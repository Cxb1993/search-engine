1 
 
行政院國家科學委員會專題研究計畫成果報告 
以網宇為基礎之安全資訊發佈系統 
計畫編號：NSC 100-2221-E-224-054 
執行期限：100年 8月 01日 101年 7月 31日 
主持人：伍麗樵   雲林科技大學資訊工程系 
計畫參與人員：洪吉祥、潘俞華、郭紹宏、林建均 
Email: wuulc@yuntech.edu.tw 
 
摘要 
近年來，由於網路通訊技術的快
速進步及使用層面的普及化，整個網
路的使用環境進入一嶄新的頁面，稱
之為網宇實體系統 (Cyber-Physical 
Systems，簡稱CPS)；本計畫將網宇實
體系統的資料庫組成一個Trusted P2P 
(Peer-to-Peer)網路，提供空間給通過身
份驗證的使用者儲存其發佈的資訊，
本計畫會利用(t, n) threshold機制將資
訊切割成n個區塊並分散儲存到不同
的資料庫之中；每個區塊至少會存在
二個以上不同的資料庫，以提供Fault 
Tolerance能力，並讓合法使用者利用
P2P技術有效率的對資訊進行存取，合
法使用者只需取得任意t個區塊即可還
原資訊內容；本計畫不會將一完整的
資訊存在任何的資料庫上，若單一資
料庫被入侵時，入侵者也沒有辦法取
得完整的資訊。 
關鍵字：可信任的點對點架構、(t, n) 
threshold機制、動態群體金鑰、指定驗
證者之簽章、資訊發佈系統。 
 
一. 研究背景、動機與目的 
在科技的進步與網路的普及化
下，人們藉著佈建智慧型感測裝置收
集在實體世界運作的資訊，經由互聯
的傳輸網路，到達特定的資訊處理中
心儲存、分析及運用，人們可以隨時
隨地享有由科技創造無所不在的智慧
服務，稱為網宇實體系統(CPS)[1]。雖
然CPS使得電腦和各式的實體裝置能
夠更緊密的互相結合，但是目前CPS
系統之資安管理架構[4]及相關安全防
護技術[2-5]尚未發展成熟，造成在資
訊的蒐集或傳遞上會有許多安全性的
問題出現，例如未能提供健全之存取
控制機制(Access Control)可能造成機
密資訊的洩漏、匿名發佈資訊、分享
的資訊含有病毒、間諜軟體、惡意程
式等。 
本計畫為一兩年期計畫，目的是要
開發一具有容錯性之CPS安全資訊發
佈系統；今年第一年在網宇實體系統
中架設多個資料庫並搭配Chord[6]建
構成P2P[8-17]分散式網路儲存架構，
用來存放使用者所發佈的資訊。使用
者為CPS中不同應用的各式實體裝
置，發佈/下載的資訊亦可視為實體裝
置所蒐集到的感測資訊。當使用者要
發佈資訊時，會將資訊切割成n個區
塊，並將每個區塊利用P2P技術存放於
不同的資料庫中，讓所規劃之分散式
資料庫具有容錯性(Fault Tolerance)之
能力。此外，因為本計畫不會將資訊
完整存放在任一資料庫上，可防止單
一資料庫被惡意使用者入侵而被取得
3 
 
Groupz所使用的動態群體金鑰。 
三. User與 BSS Agent認證 
當User i要透過BSS Agent j進行檔
案之發佈與下載時，需與BSS Agent j
進行相互認證。當確認雙方的合法性
後，User i和BSS Agent j將會自行計算
出之後通訊使用的One-Time Session 
Key稱為Kcommi,j。圖2為User i和BSS 
Agent j進行相互認證所傳遞之訊息，
其認證步驟如下： 
Step 1. User i 送認證訊息 IDi、Ti 和
hi=HMACKauthi,j(IDi, Ti)至 BSS 
Agent j，Ti為 timestamp。 
Step 2. BSS Agent j先檢查 T - Ti 是否
小於等於∆T ( T為 BSS Agent j
收到 User i認證訊息之時間)，
若條件成立，表示 User i 所送
出認證訊息傳輸時間在合法的
∆T時間內，則 BSS Agent j透
過 IDi至資料庫中找出與 User i
的 Pre-shared Key Kauthi,j，產生
hi’= HMACKauthi,j(IDi, Ti)來驗證
訊息中的 hi 是否等於 hi’，若
是，則 BSS Agent j可確認 User 
i之身份。 
Step 3. 在BSS Agent j 確認User i之身
份後，產生 timestamp Tj並計算
自己與 User i之間的 Kcommi,j= 
HMACKauthi,j(IDi, Ti, IDj, Tj)。傳
送 IDj、Tj、hj=HMACKauthi,j(IDj, Tj) 
至 User i。 
Step 4. 當 User i收到 BSS Agent j所傳
來訊息 IDj、Tj和 hj後，先檢查
T’ – Tj 是否小於等於∆T (T’為
User i收到 BSS Agent j認證訊
息之時間)，若條件成立，則驗
證 訊 息 中 的 hj’ 是 否 等 於
HMACKauthi,j(IDj, Tj)，若是則可
確認 BSS Agent j身份，接著計
算自己與 BSS Agent j 的
Kcommi,j=HMACKauthi,j(IDi,Ti,IDj, 
Tj)。 
iii hTID ,,)1(
jjii hTTID ,,,)3(
)||||||(   )2(
,
  jjiiKauth TIDTIDHMAC ji)||||||(   )4(
,
  jjiiKauth TIDTIDHMAC ji
圖 2  User與BSS Agent認證流程 
四. File切割/組合 
當 User i與 BSS Agent j認證完成
後，User i可將檔案傳送 BSS Agent j
進行發佈或要求檔案下載。其通訊內
容以 Kcommi,j進行加密。BSS Agent j
會將使用者發佈的檔案切割成多個區
塊(Block)，每個區塊會被儲存在多個
不同的 BSS Agents上，當有單一 BSS 
Agent損毀時，可由另外的 BSS Agent
來做備援，達到 Fault- tolerant目的。
在下載區塊時，可同時間由多個 BSS 
Agents 下載不同的區塊。以下將介紹
BSS Agent j在收到來自 User i的發佈/
下載請求時，如何對檔案進行切割/組
合。 
4.1 檔案進行切割之步驟： 
Step 1: 首先 BSS Agent j 會將檔案
File(簡稱 F)，切割成 k 個區塊
Blockx，其中 1≦x≦k，每一個
區塊，分別命名其檔名為
F_Blockx。 
Step 2: 每個 F_Blockx會隨機被分配儲
存至 BSS Agents上，且將這些
BSS Agents 記錄在區塊列表
F_BLx。 
Step 3: BSS Agent j會與每個 F_BLx中
所記錄的 BSS Agents，形成 k
5 
 
功率較高。 
 
圖 4  檔案成功取回機率(k=3) 
如圖5所示，區塊備份數固定為
3(l=3)，檔案切割數分別為 3、 4和
5(k=3、4和5)之設定時，在檔案切割數
越大時(k=5)，相較於切割數小(k=3)，
在BSS Agents死亡數增加時，其檔案可
被取回的成功率會降低。 
 
圖 5  檔案成功取回機率(l=3) 
圖 6、7 和 8 為本系統與論文
JigDFS[7]在檔案取回的成功率之比較
情形。圖 6 為本系統中檔案切割數為
3(k=3)和區塊備份數為 3(l=3)及論文
JigDFS 系統階層數為 1 和系統設定為
(3, 6) threshold，且系統中 BSS Agents
死亡數為 10%~90%時，這 1000 個檔
案可以取回的成功率之實驗；其中
JigDFS 系統會以(3, 6) threshold 的方
式，將檔案切割成 6 個區塊後，root
會將各個區塊發佈至下一階層不同檔
案儲存伺服器做儲存，當要還原回原
本檔案時，root只需要取回下一階層檔
案儲存伺服器所傳回的 3 個區塊，即
可還原回原本檔案。圖 7 為本系統中
檔案切割數為 3(k=3)和區塊備份數為
4(l=4)與論文 JigDFS 系統階層數為 1
和系統設定為(3, 7) threshold時，檔案
取回的成功率之實驗；圖 8 為我們系
統中檔案切割數為 3(k=3)和區塊備份
數為 5(l=5)與論文 JigDFS 系統階層數
為 1和系統設定為(3,8) threshold時，
檔案取回成功率之實驗。本系統在 DB 
nodes死亡數增加時，仍能維持較好的
檔案取回成功率。 
 
圖 6  本系統(l=3)與 JigDFS(l=6)檔案
取回成功率之比較 
 
圖 7  本系統(l=4)與 JigDFS(l=7)檔案
取回成功率之比較 
 
圖 8  本系統(l=5)與 JigDFS(l=8)檔案
取回成功率之比較 
六. 計畫成果自評 
7 
 
[19] M. Sheng, J. Zhu, and G. Cui, “A hybrid 
group key management scheme for 
two-layeredAd Hoc networks,” ICIT, Oct. 
2006. 
[20] D.-W. Kwak and J. Kim, “A Decentralized 
Group Key Management Scheme for 
theDecentralized P2P Environment”, IEEE 
Communications Letters, 2007, pp. 
555-557. 
[21] L. Xu and C. Huang, 
“Computation-Efficient Multicast Key 
Distribution”, IEEETransactions on Parallel 
and Distributed Systems, Volume 19, Issue 
5, 2008, pp. 577-587. 
[22] X. Gu, J. Yang, J. Lan and Z. Cao, 
“Huffman-based join-exit-tree scheme for 
contributorykey management”, Computers 
& Security, Volume 28, Issues 1-2, 2009, 
pp. 29-39. 
[23] M. Wen, Y.-F. Zheng, W.-J. Ye, K.-F. 
Chen and W.-D. Qiu, “A key 
managementprotocol with robust continuity 
for sensor networks”, Computer Standards 
& Interfaces, Volume 31, Issue 4, 2009, pp. 
642-647. 
[24] Q. Gu, P. Liu, W.-C. Lee and C.-H. Chu, 
“KTR: An Efficient Key Management 
Scheme for Secure Data Access Control in 
Wireless Broadcast Services”, IEEE 
Transactions on Dependable and Secure 
Computing, Volume 6, Issue 3, 2009, pp. 
188-201. 
[25] E.K. Wang and Y. Ye, “An Efficient and 
Secure Key Establishment Scheme for 
Wireless Sensor Network”, Third 
International Symposium on Intelligent 
Information Technology and Security 
Informatics (IITSI), 2010, pp. 511-516. 
[26] S.-S. Tu, C.-B. Ma, F.-L. Ao, T. Duan and 
X.-R. Hu, “The research of hierarchical 
group key management for ad hoc 
networks”, International Conference on 
Intelligent Computing and Integrated 
Systems (ICISS), 2010, pp. 121-124. 
[27] L. Harn and C. Lin, “Authenticated Group 
Key Transfer Protocol Based on Secret 
Sharing”, IEEE Transaction on Computers, 
2010, pp. 842-846. 
[28] K. Drira, H. Seba, H. Kheddouci, “ECGK: 
An efficient clustering scheme for group 
key management in MANETs”, Computer 
Communications, 2010, pp. 1094-1107. 
[29] D. Chaum and H. Van Antwerpen, 
“Undeniable signatures”, In Advances in 
Cryptology - Crypto ’89, volume 435 of 
Lecture Notes in Computer Science, 1989, 
pp. 212-216. 
[30] M. Jakobsson, K. Sako, and R. Impagliazzo, 
“Designated Verifier Proofs and Their 
Applications”, In Advances in Cryptology - 
Eurocrypt ’96, volume 1070 of Lecture 
Notes in Computer Science, 1996, pp. 
143-154. 
[31] S. saeednia, S. Kremer, and O. Markowitch, 
“An Efficient Strong Designated Verifier 
Signature Scheme”, ICICS”03, LNCS2971, 
2003, pp. 40-54. 
[32] J. S. Lee, J. H. Chang, “Strong Designated 
Verifier Signature Scheme with Message 
Revocery”, ICACT2007, 2007, pp. 12-14. 
[33] X.-Q. Liang, S.-D. Liu, J.-F. Xu and Q. Liu, 
“A certificate-based strong designated 
verifier proxy signature scheme”, 2010 3rd 
International Conference on dvanced 
Computer Theory and Engineering 
(ICACTE), 2010, pp. V1-614~618. 
[34] Z. Xiao, B. Yang and S. Li, “Certificateless 
Strong Designated Verifier Signature 
Scheme”, 2nd Conference on e-Business 
and Information System Security, 2010, pp. 
1-5. 
 
ACM ICUIMC 2012 會議進行場景 
 
ACM ICUIMC 2012 會議進行場景 
 
二. 參加 BAI 2012 國際會議經過 
The 2012 International Conference on Business and Information 國際會議於 7月 3
日至 7月 5日在 Renaissance Sapporo Hotel, Sapporo, Japan 舉行，本屆大會的投稿論
文共有 1110 篇，來自 42 多個不同的國家，每篇論文至少經過兩位匿名的學者進行
審稿工作，最後共有 645 篇論文被接受，大會安排 79 個 parallel sessions 及一個 poster 
section 在 7月 3日至 7月 5日三天完成論文發表。 
本屆大會的投稿論文如附件，大會所發的參加會議證書如下圖所示，攜回大會
議程暨大會論文集 CD 一片。 
Quorum-based Key Management Scheme 
in Wireless Sensor Networks 
Lih-Chyau Wuu 
Graduate School of Computer 
Science and Information Engineering, 
National Yunlin Unviersity of Science 
and Technology, Yunlin, Taiwan 
+886 5 5342601 ext 4317 
wuulc@yuntech.edu.tw 
Chi-Hsiang Hung 
Graduate School of Engineering 
Science and Technology, National 
Yunlin Unviersity of Science and 
Technology, Yunlin, Taiwan 
+886 5 5342601 ext 4386 
g9213714@yuntech.edu.tw 
 Chia-Ming Chang 
Graduate School of Computer 
Science and Information Engineering, 
National Yunlin University of Science 
and Technology, Yunlin, Taiwan 
+886 5 5342601 ext 4386 
g9717710@yuntech.edu.tw 
 
ABSTRACT 
To ensure the security of wireless sensor networks, it is important 
to have a robust key management scheme. In this paper, we 
propose a Quorum-based key management scheme. A specific 
sensor, called as key distribution server (KDS), generates a key 
matrix and establishes a quorum system from the key matrix. The 
quorum system is a set system of subsets that the intersection of 
any two subsets is non-empty. In our scheme, each sensor is 
assigned a subset of the quorum system as its pre-distributed keys. 
Whenever any two sensors need a shared key, they exchange their 
IDs, and then each sensor by itself finds a common key from its 
assigned subset. A shared key is then generated by the two 
sensors individually based on the common key. By our scheme, 
no key is needed to be refreshed as a sensor leaves the network. 
Upon a sensor joining the network, the KDS broadcasts a message 
containing the joining sensor ID. After receiving the broadcast 
message, each sensor updates the key which is in common with 
the new joining one. Only XOR and hash operations are required 
to be executed during key update process, and each sensor needs 
to update one key only. In summary, the proposed scheme 
satisfies the following properties: low communication overhead, 
low computational overhead, fully key connectivity, and 
resistance against node capture attack. 
Categories and Subject Descriptors 
C.2.0 [Computer-Communication networks]: General –Security 
and protection. 
General Terms 
Management, Security. 
Keywords 
Wireless sensor networks, Key management, Quorum system. 
1. INTRODUCTION 
Recent advances in micro-electro-mechanical devices and radio, 
signal processing technologies have made wireless sensor 
networks (WSNs) being well developed in a wide variety of 
applications, such as battlefield surveillance, industrial process 
monitoring and control, healthcare monitoring, home automation, 
traffic control, etc. However, some applications may require 
certain security mechanisms to protect the integrity of passing 
data from modifications, guard for confidentiality of 
communication from electronic eavesdrop, and verify message 
originator. To provide the above security-enhanced services for 
wireless sensor networks, it is necessary to have a robust key 
generation and distribution scheme. 
Considering the limited power, data processing capacity and 
memory storage of sensor nodes, traditional key generation and 
distribution schemes are inapplicable for wireless sensor networks 
[1, 7]. To solve the key distribution problem for wireless sensor 
networks, several key pre-distribution schemes have been 
proposed in the literatures [2-12]. The basic idea is that keys 
would have to be installed in sensor nodes before deployment. A 
simple key pre-distribution approach is to assign each sensor n-1 
keys, where n is the number of sensors in the network, and each 
key is known to only one other sensor node. However, this 
approach is impractical as n is large or the network is highly 
dynamic. 
Eschenauer et al. [8] proposed a random key pre-distribution 
scheme in 2002. In this scheme, a very large size symmetric key 
pool (e.g., 217 - 220 keys) is generated offline at first, and then 
each sensor randomly selects a set of keys from the generated key 
pool as its pre-distributed keys. After that, the sensors are 
randomly deployed into an interested terrain. After the 
deployment, each sensor broadcasts its stored key information to 
its one-hop neighbors. Since all the keys are randomly selected 
from the same key pool, it is quite possible that two neighboring 
sensors have some overlapped keys. If two sensors have a 
common key, they can use it as their shared key directly. 
Otherwise, a path-key establishment procedure is triggered, which 
could generate a path-key between the two communicating 
sensors under some other intermediate sensor’s participation. 
However, that intermediate sensors involve the path-key 
establishment procedure between the two communicating sensors 
not only degrades the network security, but also produces 
additional communication and computational overhead. 
Furthermore, the scheme can not achieve fully key connectivity 
since it is possible that two sensors can not derive a shared key 
even the path-key establishment procedure had been trigged. 
To achieve the fully key connectivity, the key pre-distribution 
scheme of Cheng et al. [4] uses one nn   matrix only, where 
n is the network size. Each sensor is loaded with a row and a 
 
Permission to make digital or hard copies of all or part of this work for 
personal or classroom use is granted without fee provided that copies are 
not made or distributed for profit or commercial advantage and that 
copies bear this notice and the full citation on the first page. To copy 
otherwise, or republish, to post on servers or to redistribute to lists, 
requires prior specific permission and/or a fee. 
ICUIMC’12, February 20–22, 2012, Kuala Lumpur, Malaysia. 
Copyright 2012 ACM 978-1-4503-1172-4…$10.00. 
 
Figure 2. An example of pre-distribution keys of Sensor 4. 
Step A1: KDS generates a key matrix   nnK 2/ and a random 
number r, and then computes H l (r) which will be 
used for message authenticity at the key refreshment 
phase, where l is an integer. 
Step A2: KDS assigns the quorum subset Sj to sensor j, where 
Sj contains the jth column of K (denoted as K*, j) and Ki, 
j+i mod n (i=1 to  2/n ). Each sensor j stores Sj and H l(r) 
in its memory. 
3.2 Shared key establishment phase 
After sensors have been deployed, any two sensors x and y can 
derive a common key based on their IDs, and then establish a 
shared key to secure their communication channel. Recall that 
sensor x holds n-1 keys: the entire column x of the matrix K and 
Ki, x+i mod n (i=1 to  2/n ). That indicates the sensor with ID (x+i) 
also holding the key Ki, x+i mod n since the entire column (x+i) keys 
are assigned to it. The same reason for the key Ki, x is held by both 
of sensor x and sensor (x-i). This is the reason why our scheme 
can achieve the fully key connectivity. Figure 3 illustrates the 
exchanged messages at the shared key establishment phase, and 
the process of establishing a shared key is depicted as follows. 
x y
x
y
Compute CKx-y
Generate Rx
{Rx, ECKx-y(Rx)}
{Ry, ECKx-y(Ry)}
Compute SKx-y=CKx-yRxRy
Compute CKx-y
Generate Ry
Compute SKx-y=CKx-yRxRy
 
Figure 3. Shared key establishment phase. 
Step B1: Before having a secure channel between sensor x and 
sensor y, each sensor sends its ID to the other. 
Step B2: When sensor x received the ID of sensor y, it can find 
out the common key CKx-y by their IDs, and the same is 
for sensor y. As shown in Figure 4, there are two cases 
to be considered for finding out CKx-y. 
Case 1: When |x - y| >  2/n , sensor x and sensor y 
have a common key CKx-y=Kn-|x-y|, min(x, y). 
Case 2: When |x - y|  2/n , sensor x and sensor y 
have a common key CKx-y=K|x-y|, max(x, y). 
Step B3: After the common key CKx-y had been found out, sensor 
x and y separately generates a random number Rx/Ry, 
and send out {Rx, ECKx-y(Rx)}/{Ry, ECKx-y(Ry)} to each 
other. The encrypted random number is used to provide 
message integrity and authenticity. 
Step B4: When sensor x received {Ry, ECKx-y(Ry)}, it decrypts 
ECKx-y(Ry) by the common key found at Step B2, and 
then compares the decrypted Ry with the received Ry. If 
they are the same, the sensor x computes the shared key 
SKx-y=CKx-y⊕ Rx⊕ Ry. Sensor y does the same process to 
computes the shared key SKx-y. 
By the same matrix of figure 2, figure 5 illustrates that sensor 4 
and sensor 6 find out their common key to be K2, 6 after 
exchanging their IDs 4 and 6. It is because that |4-6|=2<3, by Case 
2, sensor 4 and sensor 6 get the same common key CK4-6=K|4-6|, 
max(4, 6)=K2, 6. 
x y
/ 2x y n      
x y
/ 2x y n      
(a) Case 1  (b) Case 2       
Figure 4. Finding out a common key for sensors x and y. 
K1, 1 K1, 2 K1, 3 K1, 4 K1, 5 K1, 6 K1, 7
K2, 1 K2, 2 K2, 3 K2, 4 K2, 5 K2, 6 K2, 7
K3, 1 K3, 2 K3, 3 K3, 4 K3, 5 K3, 6 K3, 7
K1, 1 K1, 2 K1, 3 K1, 4 K1, 5 K1, 6 K1, 7
K2, 1 K2, 2 K2, 3 K2, 4 K2, 5 K2, 6 K2, 7
K3, 1 K3, 2 K3, 3 K3, 4 K3, 5 K3, 6 K3, 7
Sensor 4
Sensor 6
 
Figure 5. Finding out a common key K2, 6 for sensor 4 and 6. 
3.3 Key refreshment phase 
By our scheme, the network size n is required to be odd. This 
makes sure that any key in matrix   nnK 2/ is only held by two 
sensors at most. In this case, while a sensor leaves the network, 
KDS only needs to announce the leaving sensor’s ID, and no one 
needs to refresh its pre-distributed keys since the keys held by the 
leaving sensor will never be used to generate a shared key by the 
remaining sensors in the network. Our scheme can resists against 
node capture by regarding the captured sensor as a leaving one. 
The sensors never establish a shared key with a leaving sensor, 
even if an attacker spoofed some sensor’s ID, it could not derive a 
correct shared key based on the captured keys. 
When a sensor joins the network, KDS assigns an ID and a 
quorum subset of pre-distributed keys to it, and then broadcasts 
the joining sensor’s ID to require the other sensors to update the 
key in common with the new joining one. The key refreshment 
phase is as follows. 
Step C1: KDS assigned an ID x to the new joining sensor. 
Step C2: KDS computes H l-m(r), where m is an integer and m<l. 
KDS assigns the keys Ki, x, Ki, (x+i) mod n, (i=1 to  2/n ) to 
the new joining sensor x, where Ki, x= H(K1, x-i⊕K2, x-
i⊕... ⊕   ixnK ,2/ ⊕H
 l-m(r)), and Ki, (x+i) mod n = H(K1, 
x+i⊕K2, x+i⊕... ⊕   ixnK ,2/ ⊕H
 l-m(r)).  
Step C3: Sensor x stores Ki, x, Ki, (x+i) mod n, (i=1 to  2/n ), and H l(r) 
into its memory. 
4.6 Performance Comparison 
Table 3 gives the comparing results of the number of message 
sent by each sensor. During pair-wise key establishment process, 
the works of [4], and [6], each sensor only exchanges ID to each 
other. In the work of [8], each sensor needs to exchange a list of 
pre-assigned keys’ ID. Although the number of messages in our 
scheme is 2 at the pair-wise key establishment phase, it needs less 
messages when sensors join to or leave from the networks. 
Table 4 gives the comparing results of the number of keys being 
maintained by the KDS and each sensor. In our scheme, the KDS 
maintains a  2/nn  key matrix K, and each sensor j stores Ki, j 
and Ki, j+i (for i=1 to  2/n ). Our scheme provides full key 
connectivity without executing the path-key establishment 
procedure as [8] did. Besides, our scheme can easily update keys 
by each sensor without re-assigning all sensors keys as [4] and [6] 
did.  
Table 4. Number of maintained keys 
 [8] [4] [6] Our scheme
Each Sensor np+1 2(n1/2) λ+3 n-1 
key pools 217~220 n λn  2/nn  
np: The number of pre-assigned keys [8] 
n:  Network size                           
λ:  Security parameter [6] 
5. CONCLUSION 
We propose a quorum-based key pre-distribution scheme for 
wireless sensor networks. Based on the characteristic of a quorum 
system - the intersection of two subsets is non-empty. That makes 
our scheme to achieve fully key connectivity - any two sensors 
can find a common key if needed. The proposed quorum system 
guarantees that any key in the matrix K is distributed to two 
sensors at most. That makes no key needed to be refreshed when a 
sensor leaves the network. When a sensor joins the network, only 
a broadcast message is sent out by the KDS, and then sensors 
execute XOR and hash operations to update the key in common 
with the new joining one, and only one key is updated for each 
sensor.  The proposed scheme has low message traffic and low 
computation overhead to make it appropriate for dynamic wireless 
sensor networks. 
6. ACKNOWLEDGMENTS 
The research was supported by the National Science 
Council, Taiwan, under contract number NSC 100-2221-E-
224-054. 
7. REFERENCES 
[1] Carman, D.W., Kruus, P.S., and Matt, B.J. 2000. Constraints 
and approaches for distributed sensor network security. 
Network Associates Inc. 
[2] Chan, H., Perrig, A., and Song, D. 2003. Random key 
predistribution schemes for sensor networks. In Proceedings 
of the IEEE Symposium on Security and Privacy (May 11-14, 
2003), 197-213. DOI=10.1109/SECPRI.2003.1199337. 
[3] Chen, N., Yao, J., and Wen, G. 2008. An improved matrix 
key pre-distribution scheme for wireless sensor networks. In 
Proceedings of the International Conference on Embedded 
Software and Systems (July 29-31, 2008), 40-45. DOI= 
10.1109/ICESS.2008.44. 
[4] Cheng, Y. and Agrawal, D.P. 2005. Efficient pairwise key 
establishment and management in static wireless sensor 
networks. IEEE International Conference on Mobile Adhoc 
and Sensor Systems (Nov. 7, 2005). 
DOI=10.1109/MAHSS.2005.1542842.  
[5] Cheng, Y. and Agrawal, D.P. 2006. Improved pairwise key 
establishment for wireless sensor networks. IEEE 
International Conference on Wireless and Mobile 
Computing, Networking and Communications (June 19-21, 
2006), 442-448. DOI=10.1109/WIMOB.2006.1696395. 
[6] Chien, H.Y., Chen, R.C., and Shen, A. 2008. Efficient key 
pre-distribution for sensor nodes with strong connectivity 
and low storage space. 22nd International Conference on 
Advanced Information Networking and Applications (Mar. 
25-28, 2008), 327-333. DOI=10.1109/AINA.2008.24. 
[7] Du, W., Deng, J., Han, Y.S., Varshney, P.K., Katz, J., and 
Khalili, A. 2005. A pairwise key predistribution scheme for 
wireless sensor networks. ACM Trans. Inform. Sys. Se. 8, 2. 
DOI=10.1145/1065545.1065548. 
[8] Eschenauer, L. Gligor, and V.D. 2002. A key-management 
scheme for distributed sensor networks. In Proceedings of 
the 9th ACM conference on Computer and communications 
security. DOI=10.1145/586110.586117. 
[9] Liu, D., Ning, P., and Li, R. 2003. Establishing pairwise 
keys in distributed sensor networks. In Proceedings of the 
10th ACM Conference on Computer and Communications 
Security. DOI=10.1145/948109.948119. 
[10] Ren, K., Zeng, K., and Lou, W. 2006. A new approach for 
random key pre-distribution in large-scale wireless sensor 
networks. Wirel. Commun. Mob. Com. 6, 3 (May 2006). 
DOI=10.1002/wcm.v6:3. 
[11] Wang, E.K. and Ye, Y. 2010. An efficient and secure key 
establishment scheme for wireless sensor network. Third 
International Symposium on Intelligent Information 
Technology and Security Informatics (Apr. 2-4, 2010), 511-
516. DOI=10.1109/IITSI.2010.139. 
[12] Xu, L. and Shen, J. 2009. A novel key pre-distribution 
scheme using one-way hash chain and bivariate polynomial 
for wireless sensor networks. 3rd International Conference 
on Anti-counterfeiting, Security, and Identification in 
Communication (Aug. 20-22, 2009), 575-580.  
[13] Blom, R. 1985. An optimal class of symmetric key 
generation systems. In Proceedings of the EUROCRYPT 84 
workshop on Advances in cryptology: theory and application 
of cryptographic techniques. 
[14] Lang, S.D. and Mao, L.J. 1998. A torus quorum protocol for 
distributed mutual exclusion. In Proceedings of the 10th 
International Conference on Parallel and Distributed 
Computing and Systems. 
[15] Jiang, J.R., Huang, S.T., and Kuo, Y.C. 1997. Cohorts 
structures for fault-tolerant k entries to a critical section. 
IEEE Trans. Comput. 46, 2 (Feb. 1997), 222-228. 
DOI=10.1109/12.565603. 
[16] Toyomura, M., Kamei, S., and Kakugawa, H. 2003. A 
quorum-based distributed algorithm for group mutual 
 Business and Information 2012 
(Sapporo, July 3-5) 
 
 
Self-Deploying Mechanism for Sensor Networks 
 
Lih-Chyau Wuu  Chien-Chun Lin  Zhen-Kun Chen 
Graduate School of Computer Science and Information Engineering,  
National Yunlin University of Science and Technology, Douliu, Yunlin, R.O.C. 
 
wuulc@yuntech.edu.tw 
 
 
 
ABSTRACT  
With IEEE 802.15.1/Bluetooth and IEEE 802.15.4/ZigBee development, sensors 
can be connected as an Ad Hoc wireless network to collect the environmental 
information, and then transfer the collected information to a specific node, called as 
the Sink. In general, not all the sensors can transfer the data to the sink directly. Data 
may be relayed by sensors before it delivers to the sink. It means that sensors near the 
sink must consume more energy to relay data than those sensors faraway from the 
sink. It is well known that sensors have limited energy supply. The wireless sensor 
network may not work properly once some sensors exhaust their energy. In this paper, 
we will discuss a self-deploying mechanism for sensor networks to optimize the 
energy consumption. Our idea is that the area around the Sink should have more 
sensors being deployed. To do that, the whole sensing area is divided into several 
hexagon blocks, and the number of sensors needed in each block is computed by our 
formula. The blocks near the sink will have more sensors than the blocks faraway 
from the sink. A block state is hungry if it shorts of sensors, and is overfull if it has 
too much sensors, and is neutral if the number of sensors in the block is equal to the 
computed one. Sensors in a block will select a sensor to be the leader to communicate 
with other block leaders. A leader of an overfull block will move sensors to a hungry 
block. By our scheme, eventually, each block will remain in the neutral state. The 
simulation results show that our scheme can prolong the network lifetime. For the best 
case, our network lifetime is three times than the networks without executing our 
scheme. 
 
Keywords: Wireless sensor network (WSN), self-deploying, sink, lifetime, cluster. 
 
1. INTRODUCTION
 
A wireless sensor network (WSN) consists of a large number of sensor nodes. In 
general, sensors have the ability to sense and collect environmental information 
(pressure, temperature, carbon dioxide, humidity, sound, etc.) and then transmit the 
information to a special node called as sink. It is well known that sensors near the sink 
must consume more energy to relay data than those sensors faraway from the sink 
[1-6]. In this paper, we propose a self-deploying mechanism for sensor networks. It is 
assumed that sensors have the ability of mobility and using neighborhood information 
to execute the self-deploying mechanism.  
The work of the paper [7] requires sensors to make use of neighborhood 
information only to build the Voronoi diagram [9, 10] to discover the coverage holes 
 Business and Information 2012 
(Sapporo, July 3-5) 
the center of the hexagon called as the cluster-head. This self-deploying mechanism 
has the following assumptions:  
(1) The location of sink is fixed. 
(2) There are enough sensors to achieve the full coverage. 
(3) Each sensor is equipped with a GPS to get its geographic location. 
(4) Neither interferences nor obstacles exit in the sensing area. 
(5) Each sensor has the same sensing radius (rs) and communicating radius (rc), 
sc rr 3= . (6) Sensors do not execute any process while they are moving. 
The self-deploying mechanism consists of three phases: Initialization, Clustering 
and Self-Deploying. The details of the three phases are as follows. 
2.1 Initialization phase 
Before sensors are deployed into the sensing area, the sink divides sensing area 
into clusters and calculates the location of all the cluster-heads and the number of 
sensors needed for each cluster. It is assumed that the sensing area is a square, and the 
sink is located at the center of the square, and Vd_max is one of the four vertices of the 
square. The distance between sink and Vd_max is d, let k be the number of circles 
needed to cover the whole sensing area, as shown in Fig. 4, k = d / rc,. The most inner 
circle consists of one cluster, then the second inner circle consists of six clusters, then 
12, 18, …etc. Each cluster is assigned a unique ID as shown in Fig. 5. After that, the 
location of all the cluster-heads can be calculated depending on the coordinates of the 
sink. 
Sink
Vd_max
d
 
Fig. 4 The number of circles needed to cover the sensing area. 
 
Fig. 5 Each cluster is assigned a unique cluster ID. 
Each cluster-head is required to route the packet to the sink via a static path. Fig. 
6 depicts a path tree consisting of all the paths from cluster-heads to the sink. The 
number of packets for a cluster-head to relay is equal to the number of descendents of 
the cluster-head in the path tree. By the path tree, the sink calculates the number of 
sensors needed by each cluster. According to the number of packets each cluster must 
 Business and Information 2012 
(Sapporo, July 3-5) 
Algorithm 1 Sensor i with “Undecided” Status
1) Decide CIDi;
2) Broadcast a Hello message and set a waiting timer;
3) do { Upon receiving a Hello message from sensor j :
4) if (CIDi = CIDj) then Add j’s Hello message into hello_list;
5) }until timeout
6) if ( i is the least number for all sensor IDs in hello_list) then 
7) Si ← “Head”, decide numi and mi;
8) if (numi > mi) then CSi← “Hungry”, decide∆i- ← numi – mi;
9) else if (numi < mi) then CSi← “Overfull”, decide ∆i+ ← mi – numi;
10) else CSi ← “Neutral”;
11) end if
12) else Si ← “Member”;
13) end if
 
Fig. 7 Clustering phase. 
2.3 Self-Deploying phase 
Depending on the cluster state, each cluster-head executes one of the three 
algorithms: “Overfull”, “Hungry”, and “Neutral” as shown in Fig. 8, Fig. 9 and Fig. 
10 respectively. For a cluster-head in overfull state, it first makes sure that none of its 
six neighbor clusters is in empty state. After that, it dispatches the redundant sensors 
to the clusters in hungry state. For a cluster-head in hungry state, it does nothing until 
it receives the Advertisement messages from the overfull cluster-heads. Although a 
cluster-head in neutral state means that sensors in the cluster is neither more nor less, 
it must make sure that none of its six neighbor clusters is in empty state. If some 
neighbor cluster is in empty state, it replies a request message for the empty cluster 
when it receives an Advertisement message. 
Algorithm 2 “Overfull” Cluster Procedure
1) while ( there exists an “Empty” neighbor ) do
2) Move a sensor to the “Empty” neighbor;
3) ∆i+ ← ∆i+ - 1;
4) if (∆i+= 0) then CSi ← “Neutral”; break;
5) end while 
6) TTL ← 2;
7) while (∆i+> 0) do
8) Broadcast Advertisement message and set a waiting timer;
9) do { Upon receiving a Request message from sensor j :
10) Add j’s Request message into sensor_request_list;
11) }until timeout
12) while (sensor_request_list is not null)
13) Remove an element k from the sensor_request_list, where k’s
“sensor_require” is the largest in all Request messages;
14) “sensor_amount”←min(∆i+, k’s “sensor_require”);
15) Move “Member” sensors to k’s “Target CID”;
16) Send a Dispatch message to k’s “Source SID”;
17) ∆i+ ← ∆i+ - “sensor_amount”;
18) if (∆i+= 0) then CSi ← “Neutral”; break;
19) end while
20) TTL← TTL + α;
21) end while
  
Fig. 8 “Overfull”algorithm. 
 Business and Information 2012 
(Sapporo, July 3-5) 
5
25
45
65
85
105
125
100 200 300
Our Mechanism
Snap and Spread
The number of sensors
WS
N 
Lif
eti
m
e 
(ro
un
ds)
 
Fig. 12 Random deployment. 
 
5
25
45
65
85
105
125
100 200 300
Our Mechanism
Snap and Spread
W
SN
 
Lif
eti
m
e 
(ro
un
ds)
The number of sensors
 
Fig. 13 Boundary deployment. 
 
5
25
45
65
85
105
125
100 200 300
Our Mechanism
Snap and Spread
WS
N 
Lif
eti
m
e(ro
un
ds)
The number of sensors
 
Fig. 14 Central deployment. 
4. CONCLUSION 
This paper proposed a self-deploying mechanism for wireless sensor networks. 
The whole sensing area is divided into several hexagon blocks, and the number of 
sensors needed in each block is decided before the self-deploying phase. Sensors in 
the overfull clusters move to the empty or hungry clusters without the sink being 
involved. Eventually the blocks near the sink will have more sensors than the blocks 
faraway from the sink to prolong the network lifetime. For the best case, our network 
lifetime is three times than the networks without executing our scheme. In the future 
work, we will focus on making the number of sensors movements as less as possible, 
and reduce the information stored in sensors.  
國科會補助計畫衍生研發成果推廣資料表
日期:2012/10/30
國科會補助計畫
計畫名稱: 以網宇為基礎之安全資訊發佈系統
計畫主持人: 伍麗樵
計畫編號: 100-2221-E-224-054- 學門領域: 計算機網路與網際網路
無研發成果推廣資料
ICUIMC 2012) 
2. ＇＇Self-Deploying 
Mechanism for Sensor 
Networks＇＇ 2012 
International 
Conference on Business 
and Information (BAI 
2012) 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
其他成果 
(無法以量化表達之
成果如辦理學術活
動、獲得獎項、重要
國際合作、研究成果
國際影響力及其他
協助產業技術發展
之 具 體 效 益 事 項
等，請以文字敘述填
列。) 
‧00 年度＇居家安全巡邏員＇ 獲得第一屆「智慧感知與辨識」領域專題成果發
表觀摩會【網際服務應用組】第一名。 
‧00年度＇改善 PEER-TO-PEER OVERLAY 網路與 PHYSICAL 網路間的拓樸差異＇
獲得 2011 Symposium on Digital Life Technologies論文佳作獎。 
‧00 年度＇霹靂啪啦-Words Attack＇ 獲得經濟部工業局「2011 通訊大賽
-Android 使用者介面設計競賽」優等獎。 
‧01年度＇智慧型手機之東拍西藏＇ 獲得中工會學生分會論文競賽佳作獎。 
‧01 年度＇智慧型手機之東拍西藏＇ 獲得第二屆「智慧感知與辨識」領域專題
成果發表觀摩會【多媒體應用組】佳作。 
‧01 年度＇卡路里小助手＇ 獲得第二屆「智慧感知與辨識」領域專題成果發表
觀摩會【多媒體應用組】佳作。 
‧01年度＇The High Steganographic Method Based on General Multi-EMD＇ 獲
得「2012 International Conference on Information Security and Intelligent 
Control」Excellent Paper Award。 
 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
