 2
貳、英文摘要 
In some specific applications, non-conventional logarithmic number system (LNS) has 
better computing performance than conventional floating-point (FLP) number system. To 
facilitate the usage of LNS arithmetic, we propose to design a system with the ability to 
automatically select the arithmetic instructions among the LNS and FLP instructions within a C 
program.  We have completed the following research works: 
1. In an Altera SOPC system, we implemented the LNS addition/subtraction as a sequence of 
short application-specific instructions by using custom instruction method. We also 
implemented the LNS arithmetic operations as arithmetic subroutines in an ARM embedded 
system. Thus, we can easily utilize LNS arithmetic for computation by functions calls. 
2. We have constructed the control flow graph (CFG) data structure of C programs by using Lex 
tool and designed the algorithm for automatic selection and replacement of arithmetic 
instructions in C programs. 
3. We have implemented an image object tracking system on the Altera DE2 SOPC board and 
on an ARM embedded system development board to test the effectiveness of our instruction 
selection algorithm. Our experimental results showed that our proposed automatic instruction 
selection approach can effectively improve the efficiency of the computing system with 
complex functions. 
 
Keywords: SOPC (system-on-programmable-chip) system, Floating-point arithmetic, 
Logarithmic number system arithmetic, Automatic instruction selection algorithm, 
Image object tracking system 
 4
數數字系統的算術是以下的方式計算： 
 
[ ]
[ ]
[ ] ( )
( ) ( ) ( )
[ ]
Multiplication C A B c a b and S S S
Division C A B c a b and S S S
Addition C A B c a v and S S
A B with v a b and v r
Subtraction C A B
C A B
C A B
r C A
r r
v
                 
                            
                    
                                      
       
= × = + = ⊕
= ÷ = − = ⊕
= + = + =
≥ = − = +
= −
−
Φ
Φ
0
0 0
1 0log
( )
( ) ( ) ( )
        
                                      
c a v and S S
A B with v a b and v r
r C A
r r
v
= + =
≥ = − = − −
Ψ
Ψ
0
0 0
1 0log .             
SA 、 S B 及 SC 分別表示 A、 B 及C 的正負號。以上的公式顯示出在對數數字系統中，乘法
和除法分別使用加法器和減法器就可以實現，而這個特性可以用來增加計算複雜函數的效
率[3]。 
非傳統式的 LNS 算術，大部分是應用在特殊用途 IC (ASIC)設計上，較少應用於處理
器的算術運算單元的設計上，其原因有二，第一，LNS 算術系統的算術運算單元在設計上
有先天的限制，例如位元長度較長的LNS加減法運算單元，其硬體成本非常大。第二個原
因，也是最主要的原因，乃在於一般的程式設計人員對非傳統數字系統的不熟悉，在使用
非傳統算術指令於計算系統的設計上，將遭遇極大的困難。 
本計畫的研究動機即在解決上述的第二個問題，我們首先將在可程式化單晶片系統 
(system-on-programmable chip)設計一個具有傳統與非傳統算術運算單元的共同處理器 
(co-processor)，並在與 ARM 嵌入式系統上以軟體實現 LNS 的算術運算。如此一來，我們
將可以指令呼叫此算術 co-processor 或指令函數來執行算術運算。其次，我們將針對以 C
程式語言所設計的計算系統進行自動化的指令選擇與置換。在 C 程式進行編譯 
(compilation)之前，我們提出的自動指令選擇系統會先偵測出 C 程式中的那些程式區塊較
適於使用非傳統的算術指令，以便達到 C 程式執行的最佳效率。然後，此系統會在運算元
進入此區塊前增加將傳統的算術運算元轉換為非傳統的算術運算元的指令，而在運算結果
輸出此區塊前，插入轉換指令將非傳統運算結果轉換為傳統格式的運算結果。最後，此系
統將此偵測到的程式區塊內的所有傳統算術指令更改成相對應的非傳統算術指令，以達到
此 C 程式執行的最佳效率。 
此自動指令選擇系統將使 C 程式設計人員毋須瞭解非傳統算術指令的使用時機，而能
 6
令在 ARM 嵌入式系統的軟體實現。 
 
3.1 LNS 算術以直接計算法實現的誤差分析 
我們提出的 LNS 加減法的計算實現上，無論是以硬體或軟體設計，都是以直接計算
(direct computation)的方式實現。所謂的直接計算法，即是在計算 ( )2log 1 2 v−± 時，先計算
0.2 Fv− ，再經過右移 Iv 位元以得到 FI vv .0.22 − 的值，然後與值 1 做加或減法以便得到
)221( .0 FI vv −− ⋅± ，最後再取其對數函數值 )221(log .02 FI vv −− ⋅± 。 
在這項研究工作上，我們分析了指數函數與對數函數在 LNS 直接計算法上所需要的
精密度要求，進而推導出達到對等於浮點數算術運算的精密度要求時，此指數與對數函數
在直接計算法中所需要達到的最大絕對相對誤差。經由此項研究成果，我們在設計LNS共
同計算處理器或 LNS 算術指令時，才可規劃所需的硬體成本或計算成本。 
 此項研究成果的詳細內容，請參見參考文獻[4]。 
3.2 實現 LNS 加減法的特殊應用指令(application-specific instruction)的設計 
當我們將 LNS 加減法的計算以單獨一個指令完成計算時，所獲得的指令將會是一個
硬體成本過高而執行時間相當長的指令。根據精簡指令電腦架構設計的原則，幾個短而精
簡的指令將比一個長而複雜的指令有用[5]。根據這項原則，我們將 LNS 加減法拆成三個
指令。第一個指令稱為最大值指令，指令的輸出結果為兩個 LNS 運算元 a與 b 的最大值。
第二個指令稱為指數指令，可以執行兩種運算。第一種為 LNS-to-FLP 的轉換，對一個
LNS 運算元 ( )1 2p z Fs a aa ⋅= − ，此指令的硬體將執行 0.2 Fa 函數的計算，並將輸出 FLP 格式的
結果 ( ) ( ) exp1 1 2FA FAS Am− + × ，其中 FA AS S= ， 0.1 2 FaAm+ = ，且 expFA Ia= 。 
第二種指令係為計算 LNS 加減法所需的 ( )0.1 2 2z Fv v− −± ⋅ 的值，此指令共有三項動作： 
 8
術可以使 FLP 算術快了近三倍，而比純軟體的執行速度則快了至少 12 倍。 
此項研究成果的詳細內容，請參見參考文獻[6]。 
 
3.3 LNS 算術指令以 ARM 處理器之軟體函數實現 
 在參考文獻[7]中，作者 Sloss 等人已設計出多種的計算函數，包括雙倍精密度的乘
法、除法、開方、對數、指數、正弦、餘弦等函數的軟體程式。這些軟體函數執行各項複
雜函數的速度也是相當快，主要的原因乃在於 ARM 處理器的指令集中有許多特殊的指
令，如 Barrel shift 等適於做各種複雜函數的計算。所以使用軟體函數來實現 FLP 與 LNS
的各項算術運算，應該是一項實現 FLP/LNS 共同處理器的代替方案。 
 這項研究工作除了可以增強 ARM 嵌入式系統的運算能力，也是一項尚未被開發的研
究方向。我們目前已在完成以 Socle CDK ARM development board 為開發工具，設計以
ARM 處理器之軟體函數實現 LNS 算術指令。完成的 LNS 算術指令包括：加減法、乘法、
除法、指數函數( BA ，A與 B皆為 LNS 格式)。要完成 LNS 加減法的計算，最主要的困難在
設計一個快速的指數( Fve .0 )函數與對數函數的計算。我們的方法是利用泰勒級數展開以及
查表法，並且利用 ARM 指令中獨見的移位動作，以達到快速計算的目的。 
此項研究成果的詳細內容，請參見參考文獻[8]。 
 
4. 第二項研究工作與成果: C 程式 CFG 資料結構與指令選擇演算法的設計 
由於本研究的主要目的在作算術指令選擇的動作，為了要考慮其算術運算及變數是否
符合轉換之條件，我們必須紀錄程式碼中每一個變數的所有算術運算及其發生之順序，並
且紀錄每個變數與其有算術運算關係之互動變數，所以我們將建立一個變數關連性表格來
 101
之前插入一個將運算元由浮點數數字轉換成LNS數字格式的指令，而在資料輸出之後插入
一個將運算元由LNS數字轉成浮點數數字的指令。分割後所有子流程圖內權重和的總和應
該是最小的可能值。換句話說，若 C 程式控制流程圖內共有 N 個節點，而分割後共有
FLPM 個浮點數子流程圖及 LNSM 個 LNS 子流程圖，則此演算法即在找出具有最小權重總和
之 FLPM 個 FLP 子流程圖及 LNSM 個 LNS 子流程圖，而且其權重總值應小於原先之浮點數流
程圖的權重總值，如下式所示： 
∑∑∑∑∑
== == =
<+
N
i
FLP
i
M
i
J
j
LNS
ij
M
i
I
j
FLP
ij wwwMin
LNS iFLP i
11 11 1
)(  
其中 iI 為第 i個 FLP 子流程圖的節點個數， iJ 為第 i個 LNS 子流程圖的節點個數，而 ijw 為
各個節點的權重。我們已完成建立二元樹資料結構的程式撰寫以及其最佳化演算法的設
計。圖 4.1 是整個自動指令選擇系統的設計流程圖。 
Application Written in C Code
建立Lex的pattern來自動產生Scanner
根據算術規則所撰寫的Parser
含有完整相關資訊的程式碼Queue
變數關連性表格
擷取所需要的token
程式語彙與語意分析
及
資料結構的建立
藉由算術指令自動選擇演算法
達到程式碼最佳化
1
2
4
單獨只有程式碼資訊的程式碼佇列
3
篩選出需作對數轉換之運算
作對數轉換
程式碼Queue
輸出成可執行的C code6
最佳化演算法
5
 
圖 4.1 自動指令選擇系統設計流程圖 
 121
計算提升百分之 99.67%的速度。如果是以在 Socle CDK ARM development board 上設計完
成的 LNS 指令函數計算公式(1)，則可以提升執行效率約 21.45 倍。 
 
6. 結論 
在本計畫已利用 Altera DE2 SOPC 系統發展板以及 Socle CDK ARM 嵌入式系統發展
板完成一個自動算術指令選擇的系統，以幫助計算系統工程師能充分利用 LNS 算術的優
點，提高計算系統的執行效率。我們已完成如下工作： 
1. 將 LNS 加減法以特殊應用指令(application-specific instruction)的方式實現於 Altera 
SOPC 系統，並以 ARM 處理器之軟體函數實現 LNS 算術指令。如此，我們將可以 C 程式
指令或函式呼叫的方式利用 LNS 算術做運算。 
2. 我們已利用 Lex 編譯器設計工具建立 C 程式的指令控制流程圖資料結構，我們並
已利用此資料結構設計指令選擇演算法，以偵測出需要作非傳統數字系統置換的算術運算
程式區塊，用以提升系統效率。 
3. 我們已設計並開發出影像物體追蹤系統於 Altera SOPC 系統以及 ARM 嵌入式系
統發展板，用來測試我們發展的算術共同處理器以及自動算術指令選擇的演算法。實驗結
果顯示本計畫所提出之自動算術指令選擇的方法可以有效提升具複雜函數計算之系統的效
率。  
 141
Morgan Kaufmann Publishers, 2004. 
[8] Chichyang Chen, Li-Wei Liu, and Jun-Wen Jou, “Software Implementation of LNS 
Arithmetic in an ARM Embedded System,” Proceedings of the 13th IEEE International 
Symposium on Consumer Electronics, May 25-28, 2009, Mielparque-Kyoto, Kyoto, Japan. 
[9] The Lex & Yacc Page http://dinosaur.compilertools.net/ 
[10] P. Perez, C. Hue, J. Vermaak, and M. Gangnet,” Color-based Probabilistic Tracking,” 
European Conference on Computer Vision, p. 661-675, 2002. 
