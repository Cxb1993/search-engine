1. 計畫緣由與目的 
Genetic algorithms (GAs) are well-known me-
ta-heuristic algorithms and have shown their 
effectiveness in a variety of fields [1][2]. The 
general principle of GAs is to simulate the 
mechanisms of natural evolution, such as se-
lection, crossover, and mutation [2]. Based on 
Darwin's theory "Survival of the Fittest" [3], 
GAs are believed to be capable of evolving 
candidate solutions into better ones.  
Crossover (or recombination) is the most 
salient feature of GAs. It reproduces offspring 
by exchanging and recombining genetic ma-
terial from two parents. The most common 
crossover in GAs are one-point crossover 
[2][4], two-point crossover [2][4], and uniform 
crossover [5]. The way of exchanging material 
in crossover is subject to the representation of 
chromosomes. The aforementioned crossover 
operators, for example, are applicable to bi-
nary-coded GAs as well as real-coded GAs, 
but they are inapplicable to order-based GAs. 
Order-based GAs have the additional restric-
tion on the legality of an order. Thus we need 
specific designs for order-based GAs to meet 
the requirement. Several crossover operators 
have been proposed to address this issue, such 
as partially mapped crossover (PMX) [6], or-
der crossover (OX) [8], cycle crossover (CX) 
[7], and the series of edge recombination [9]. 
Multi-parent crossover is the crossover that 
allows more than two parents to participate in 
the crossover operation. Traditionally, GAs 
adopt two parents in crossover to reproduce 
offspring. This idea is reasonable because, to 
the best of our knowledge, the form of sexual 
reproduction on Earth is absolutely of two 
parents. Multi-parent crossover breaks through 
the convention of using two parents in cros-
sover. Several multi-parent crossover operators 
have been proposed and shown shows the ef-
fectiveness in improving binary-coded and 
real-coded GAs. However, effective mul-
ti-parent crossover for order-based GAs is still 
lacking. The goal of this project is to explore 
and design effective multi-parent generaliza-
tion of crossover for order-based GAs, in order 
to improve their performance on the combina-
torial problems. 
2. 文獻探討 
Beyond two parents in binary-coded GAs, Ei-
ben et al. proposed scanning crossover [10] 
and diagonal crossover [12][13] as generaliza-
tion of uniform crossover and one-point cros-
sover, respectively. Experimental results on 
several test functions show that, in terms of 
success rate, both scanning crossover and di-
agonal crossover outperform their 2-parent 
versions, namely uniform crossover and 
one-point crossover. Muhlenbein et al. [14] 
introduced the concept of global recombination 
into GAs as gene pool recombination (GPR). 
Rather than from two parents, GPR samples 
the genes for crossover from the gene pool, 
which consists of several pre-selected parents. 
The studies show that GPR and its variants are 
easier to analyze and these methods can con-
verge faster than 2-parent recombination. 
Tsutsui and Jain [15] proposed multi-cut cros-
sover (MX) and seed crossover (SX). Note-
worthily, multi-cut crossover generalizes the 
classic two-point crossover and was shown 
empirically to outperform diagonal crossover. 
For real-coded GAs, Tsutsui and Ghosh [16] 
presented a series of multi-parent crossovers: 
center of mass crossover (CMX), multi-parent 
feature-wise crossover (MFX), and seed cros-
sover (SX). Experimental results demonstrate 
that these multi-parent crossovers can lead to 
better performance although the performance 
is problem-dependent. Another multi-parent 
crossover, simplex crossover (SPX) [17], pro-
duces offspring by the simplex sampled from 
multiple parents. Their results show that this 
method performs well with three or four par-
ents for multimodal and epistatic problems. 
Moreover, Kita et al. [18] introduced multiple 
parents into unimodal normal distribution 
crossover (UNDX) to enhance the diversity of 
offspring. This multi-parent extension of 
approach for MPPMX to construct a unique 
mapping relationship in order to legalize the 
proto-offspring reproduced from more than 
two parents. 
The proposed MPPMX follows the 
four-step procedure of PMX, as shown in Fig-
ure 3.1. It is worthy of note that MPPMX con-
structs a unique circular list as the basis of 
mapping relationship for all parents, which is 
different from the mapping list of PMX. De-
tailed descriptions of each step are given in the 
following subsections. 
3.1.1. Substrings selection 
The substrings selection imitates n-point cros-
sover for n  parents: It randomly selects n  
crossover points to cut each parent into +1n  
substrings. Figure 3.2 illustrates the case of 
three parents: the substrings selection cuts each 
parent into four substrings at three random 
crossover points. 
3.1.2. Substrings exchange 
This step exchanges the selected substrings to 
create proto-offspring. The method of ex-
changing substrings is analogous with mul-
ti-cut crossover [15]. As shown in Fig. 3.2, 
MPPMX picks and recombines the substrings 
from each parent in a diagonal way to form an 
offspring. 
3.1.3. Mapping list determination 
Determination of mapping list is the major 
point in MPPMX. To construct the mapping 
list for more than two parents, first, MPPMX 
randomly chooses a parent as the start parent 
and a locus as the start locus. Second, a parent 
different from the start parent is chosen at ran-
dom as the end parent. The end locus is the 
locus at which the gene in the end parent is the 
same as the gene at the start locus. Next, a 
parent different from the end parent is picked 
at random to serve as the start parent for the 
next round. The gene of the new start parent at 
the locus corresponding to end locus is deter-
mined to be the element of the mapping list. 
The process will repeat until the mapping list is 
completed. 
Figure 3.3 gives an example of mapping 
list determination in MPPMX. At random, 
Parent 2 is chosen as the first start parent, and 
its second locus is picked as the first start locus. 
The gene ‘4’ is therefore the first element of 
the mapping list. Afterwards, Parent 1 is ran-
domly chosen as the end parent, and its third 
locus is the end locus because the gene at this 
locus is ‘4’. Next, we randomly choose Parent 
3 as the second start parent. By mapping from 
Parent 1 to Parent 3 at the third locus, the gene 
‘8’ is determined to be the second element of 
the mapping list, as shown in Fig. 3.3(b). Con-
tinuing this process and we can obtain a unique 
mapping list for the three parents. 
In MPPMX, a deadlock may occur when 
there is no parent qualified to be a start parent. 
At this time, MPPMX is defined to break the 
deadlock by randomly choosing one from all 
available genes for the next start parent and 
start locus. Figure 3.3(h) shows that MPPMX 
encounters a deadlock since there is no suitable 
start parent for the element ‘2’. Hence 
MPPMX randomly chooses the gene ‘3’ at 
Parent 2 for the next start parent and start locus. 
Subject to the way of breaking deadlock, 
2-parent MPPMX is not exactly equivalent to 
PMX. Precisely, MPPMX is not an exact but 
an approximate generalization of PMX in 
terms of the number of parents. 
 
Fig. 3.2 Substrings selection and exchange 
4
1
6
8
7
9
3
2 51
4
3
6
5
8
2
9 78
9
3
7
6
2
5
4 1
Proto-offspring 1
Parent 1
Parent 2
Parent 3
41 6 87 932 5
14 3 65 829 7
89 3 76 254 1
Proto-offspring 2
Proto-offspring 3
candidates for each current node and these 
candidates may have the same property for se-
lection of next node, for example, the same 
numbers of links and common edges. The edge 
table in the original edge recombination cannot 
simply apply to MPEX in that the table fails to 
record more than two times of occurrence for 
an edge. To deal with this issue, it is required 
to modify the original edge table for storing 
more information from more than two parents. 
In this project, an extended edge table is de-
veloped by replacing the negative sign with a 
number for indicating the occurrence times of 
a particular common edge, as shown in Fig. 3.5. 
Such an edge table can then support the opera-
tion of edge recombination with more than two 
parents. 
The proposed multi-parent crossover 
MPEX-1 adopts the heuristic of EX-1 to select 
the edge with priority for the isolating cities. 
That is, MPEX-1 always picks the cities with 
fewest links in the process of building 
offspring tours. Note that MPEX-1 can use the 
original edge table since it is not concerned 
with the occurrence times of edges. Another 
proposed crossover, MPEX-3, makes use of an 
additional heuristic from EX-3: giving a higher 
priority to frequent links than the isolating ci-
ties. As aforementioned, EX-3 recognizes fre-
quent edges as common edges by a negative 
sign; nevertheless, this sign cannot afford to 
mark the frequency higher than two. The ex-
tended edge table is therefore used to record 
the occurrence times of links instead of nega-
tive signs. For example, the extended edge ta-
ble in Fig. 3.5 indicates that the city E links 
city D three times, city F twice, and city G 
once. Following the heuristic in EX-3, city D 
has a higher priority to be selected than other 
two cities. In addition, the failure treatment of 
EX-3 is implanted to MPEX-3. It is worthy of 
note that, as the adopted number of parents is 
two, MPEX-1 and MPEX-3 will coincide with 
 
Fig. 3.4 Offspring legalization 
Offspring 1 52
2
nd
1 82 51 52 3 2 1 82 51 52 3 2 1 82 51 52 3 2
Offspring
1 82 51 52 3 2 1 82 51 52 3 2 1 82 51 52 3 2
1 52 3 1 52 3 6
41 52 3 6 8 41 52 3 6 7 98 41 52 3 6
Proto-offspring
Proto-offspring
(a) (b) (c)
(d) (e) (f)
3
rd
1
st
Order Array
4Mapping List 8 9 1 7 5 2 3 6
4 32 13 21 1 2
1
st
 Substring
 
Node Adjacency (link) #links 
A B(2),D(1),H(1),J(2) 4 
B A(2),C(1),H(1),I(1),J(1) 5 
C B(1),D(1),F(1),G(2),I(1) 5 
D A(1),C(1),E(3),J(1) 4 
E D(3),F(2),G(1) 3 
F C(1),E(2),G(1),H(1),J(1) 5 
G C(2),E(1),F(1),H(1),J(1) 5 
H A(1),B(1),F(1),G(1),I(2) 5 
I B(1),C(1),G(1),H(2),J(1) 5 
J A(2),B(1),D(1),F(1),I(1) 5 
 
Fig. 3.5 Extended edge table 
Figure 4.2 compares the best tour lengths 
obtained from MPEX-1 and MPEX-3 with 
different numbers of parents on the six test 
TSP instances. The outcomes show the supe-
riority of MPEX to edge recombination: The 
multi-parent crossover MPEX-1 outperforms 
EX-1 and MPEX-3 in the smaller-scale TSP 
instances (eil51, gr96, and lin105). In addition, 
in eil51 and lin105 the solution quality of 
MPEX-1 improves with the increase of parents 
for 2 to 9 parents; particularly, MPEX-1 with 6 
to 8 parents can achieve the optimal solution in 
all our experiments on the lin105 problem. The 
results of one-tailed t-test further support that 
using more than two parents in MPEX-1 can 
gain significant improvement on EX-1. These 
preferable results demonstrate the advantage of 
expanding the search for isolating cities by in-
creasing the number of parents in EX-1. 
5. 結論 
This project presents multi-parent generaliza-
tions of partially mapped crossover (PMX) and 
edge recombination for order-based GAs. The 
key point in extending PMX into multi-parent 
version, i.e. MPPMX, is to determine the map-
ping relationship between more than two par-
ents. For this, a novel approach to establish a 
global mapping list for all parents is proposed. 
The resultant mapping list provides a basis for 
offspring legalization in MPPMX. 
The classic edge recombination (EX-1) is 
extended to multi-parent edge recombination 
MPEX-1 based on the original structure of 
edge table. For the edge recombination EX-3, 
the original edge table is modified in order to 
distinguish the commonality of edges from 
more than two parents. An extended edge table 
is devised by recording the occurrence times of 
links instead of negative sign in the edge table. 
Through this modified edge table, the EX-3 
crossover can be extended into a multi-parent 
crossover MPEX-3. 
 
Fig. 4.1 Mean and standard error of the best tour length for PMX and n-parent MPPMX at dif-
ferent mutation rates on the lin105 
[4] K.A. De Jong. An Analysis of the Behavior of a 
Class of Genetic Adaptive Systems. PhD thesis, 
University of Michigan, Ann Arbor, 1975. 
[5] G. Syswerda. Uniform crossover in genetic algo-
rithms. In Proceedings of the 3rd International 
Conference on Genetic Algorithms, pages 2–9. 
Morgan Kaufmann, 1989. 
[6] D.E. Goldberg and R. Lingle. Alleles, loci, and the 
traveling salesman problem. In Proceedings of the 
First International Conference on Genetic Algo-
rithms and Their Applications, pages 154–159. 
Lawrence Erlbaum Associates, Publishers, 1985. 
[7] I.M. Oliver, D.J. Smith, and J.R.C. Holland. A 
study of permutation crossover operators on the 
traveling salesman problem. In Proceedings of the 
2nd International Conference on Genetic Algo-
rithms and their Applications, pages 224–230. 
Lawrence Erlbaum Associates, 1987. 
[8] L. Davis. Applying adaptive algorithms to epistatic 
domains. In Proceedings of the 9th International 
Joint Conference on Artificial Intelligence, pages 
162–164. Morgan Kaufmann, 1985. 
[9] D. Whitley, T. Starkweather, and D. Fuquay. 
Scheduling problems and traveling salesman: The 
genetic edge recombination operator. In Proceed-
ings of the Third International Conference on Ge-
netic Algorithms, pages 133–140. Morgan Kauf-
man, 1989. 
[10] A.E. Eiben, P-E. Raué, and Zs. Ruttkay. Genetic 
algorithms with multi-parent recombination. In 
Parallel Problem Solving from Nature – PPSN III, 
volume 866 of LNCS, pages 78–87. Springer, 
1994. 
[11] I.G. Sprinkhuizen-Kuyper, C.A. Schippers, and 
A.E. Eiben. On the real arity of multiparent re-
combination. In Proceedings of the Congress on 
Evolutionary Computation, volume 1, pages 
680–686. IEEE Press, 1999. 
[12] A.E. Eiben, C.H.M. van Kemenade, and J.N. Kok. 
Orgy in the computer: Multiparent reproduction in 
genetic algorithms. In Proceedings of the Third 
European Conference on Artificial Life, volume 
929, pages 934–945, 1995. 
[13] A.E. Eiben and C.H.M. van Kemenade. Diagonal 
crossover in genetic algorithms for numerical op-
timization. Journal of Control and Cybernetics, 
26(3):447–465, 1997. 
[14] H.-M. Voigt and H. Mühlenbein. Gene pool re-
combination and the utilization of covariances for 
the breeder genetic algorithm. In Proceedings of 
the Second IEEE International Conference on 
Evolutionary Computation, pages 172–177. IEEE 
Press, 1995. 
[15] S. Tsutsui and L.C. Jain. On the effect on mul-
ti-parent recombination in real coded genetic algo-
rithms. In Proceedings of the 2nd International 
Conference on Knowledgebased Intelligent elec-
tronic systems, pages 155–160, 1998. 
[16] S. Tsutsui and A. Ghosh. A study on the effect of 
multi-parent recombination in real coded genetic 
algorithms. In Proceedings of International Con-
ference on Evolutionary Computation, pages 
828–833, 1998. 
[17] S. Tsutsui, M. Yamamura, and T. Higuchi. Mul-
ti-parent recombination with simplex crossover in 
real coded genetic algorithms. In Proceedings of 
the Genetic and Evolutionary Computation Confe-
rence, volume 1, pages 657–664. Morgan Kauf-
mann, 1999. 
[18] H. Kita, I. Ono, and S. Kobayashi. Multi-parental 
extension of the unimodal normal distribution 
crossover for real-coded genetic algorithms. In 
Proceedings of the Congress on Evolutionary 
Computation, volume 2, pages 1581–1588. IEEE 
Press, 1999. 
[19] C.K. Ting. On the convergence of multi-parent 
genetic algorithms. In Proceedings of the 2005 
Congress on Evolutionary Computation, pages 
396-403. IEEE Press, 2005. 
[20] C.K. Ting. On the mean convergence time of mul-
ti-parent genetic algorithms without selection. In 
Proceedings of the Eighth European Conference 
on Artificial Life, volume 3630 of LNAI, pages 
403-412. Springer-Verlag, 2005. 
[21] J. Dzubera and D. Whitley. Advanced correlation 
analysis of operators for the traveling salesman 
problem. In Parallel Problem Solving from Na-
ture – PPSN III, number 866 in Lecture Notes in 
Computer Science, pages 68–77. Springer, 1994. 
[22] K. Mathias and D. Whitley. Genetic operators, the 
fitness landscape, and the traveling salesman prob-
lem. In Parallel Problem Solving from Nature II. 
Elsevier Science Publishers, B. V., 1992. 
[23] H.D. Nguyen, I. Yoshihara, and M. Yasunaga. 
Modified edge recombination operators of genetic 
algorithms for the traveling salesman problem. In 
Proceedings of IEEE International Conference on 
Industrial Electronics, Control, and Instrumenta-
tion, pages 2815–2820, 2000. 
[24] T. Starkweather, S. McDaniel, K. Mathias, D. 
Whitley, and C. Whitley. A comparison of genetic 
sequencing operators. In Proceedings of the Fourth 
International Conference on Genetic Algorithms, 
pages 69–76. Morgan Kaufman, 1991. 
[25] C.K. Ting. Improving edge recombination through 
alternate inheritance and greedy manner. In Evolu-
tionary Computation in Combinatorial Optimiza-
tion – EvoCOP 2004, volume 3004 of LNCS, pag-
es 210–219. Springer-Verlag, 2004. 
 
 
