 I. 中文摘要 
三維晶片是將一個大型的二維平面電路分
割成數塊，透過矽穿孔將數個區塊垂直堆疊起來
的技術，相較傳統的二維平面晶片，可有效的減
少面積與總線長，但相對以垂直堆疊的方式會導
致散熱不易，越上層所累積的熱也越高，即使線
段等長，但在每一層所造成的時序延遲卻是截然
不同的。因此如何在不同溫度分佈的晶片上，構
建出最小時序差異的時鐘樹已成為一個重要的
議題， 
在本計畫我們提出了在最高的溫度分佈下
的環境，和溫度均勻分佈的環境下，所造成的時
序差異能達到近乎相同。從實驗結果可證明，我
們演算法所建構出來的時鐘樹，能減少在最高溫
與均勻的溫度分佈環境下的時序差異與矽穿孔
數量，並同時達到兩者近乎相同的時序差異。 
 
關鍵字：三維晶片、矽穿孔、時序差異、溫度分
佈 
 
Abstract 
3D IC integration of circuits is a promising 
approach to integrate large systems on a single chip. 
The average global wirelength is reduced drastically. 
But the thermal can not dissipate efficiently in 3D 
ICs, because chips are stacked in vertical direction. 
The temperature in 3D ICs increases drastically. 
Therefore, how to construct a minimal skew clock 
tree considering the temperature distribution is 
becoming an important issue. In this paper, we 
proposed a 3D clock tree generator such that the 
skew under the temperature profile is minimal. And 
we can construct a balanced skew clock tree under 
the uniform temperature profile and the worst case 
temperature profile. Experimental results show that 
our algorithm significantly reduces the skew under a 
 
 
temperature profile, and balances the clock skew 
values under different temperature profiles. 
II. INTRODUCTION 
Three dimensional integration of circuits is a 
promising approach to integrate large systems on a 
single chip. Heterogeneous components may be 
fabricated in different layers. And the global 
wirelength is reduced drastically [1,2,3] by TSVs 
(through silicon vias). A two dimensional system is 
divided into a number of smaller size blocks that are 
fabricated at different layers in the 3D integration 
technology. These blocks are stacked on top of each 
other and connected by TSVs [4,5]. 
However, the substrates experience higher 
thermal gradients due to multiple active layers plus 
the use of insulating dielectric layers of low thermal 
conductivity. These thermal distribution will affect 
the skew significantly [6,7,8,9]. As a result, the 
classic Deferred-Merge Embedding (DME) 
algorithms are no longer zero/bounded skew under 
the temperature distribution (non-uniform 
distribution), because the wire resistance per unit 
length will change with different temperature [8]. As 
a result, the temperature distribution issue must be 
considered during the clock tree construction.  
There are few works to consider this problem. 
TACO [6] constructs a balanced skew clock tree 
under the temperature profiles. It first builds a 
zero-skew clock tree under a uniform temperature 
profile. And refines it with merging diamond during 
the bottom-up phase under both uniform 
temperature profile and worst case temperature 
profile. TMST [8] is used to avoid hot-spots and 
compensate temperature variation. It reduces the 
skew variation and worst case skew with the 
smoother temperature gradient routing path. 
BURITO [9] develop the first buffered clock tree 
synthesis algorithm under thermal variations for 3D 
IC technology. But it is only considered the two 
行政院國家科學委員會專題研究計畫成果報告 
不同溫度分佈下 
最小平衡時序差異之三維積體電路時鐘樹繞線 
計畫編號：NSC 100-2221-E-033 -055 - 
執行期限：100年8月1日 ～ 101年7月31日 
主持人：陳美麗 中原大學資訊工程系教授 
 Thermal Aware 3D IC Clock Tree Construction 
algorithm. 
A.  Algorithm Overview 
In this section, we describe our thermal aware 
clock tree algorithm from the clock tree topology 
generation to the clock tree construction. Delaunay 
Triangulation is used to generate a hypergraph that 
each node is connecting to their nearest 
neighborhood and calculate their cost. Then we sort 
the edges by their cost in ascending order. We group 
the nodes under an upper bound. Therefore, we will 
group a set of nodes in this iteration rather than 
merge all nodes. After grouping phase, we will 
perform the DME-like algorithm to find the merging 
segment of each group in this iteration under the 
temperature distribution, and decide which path can 
have a smaller delay because the temperature 
distribution. Until there is only one unmerged node, 
we will perform the top-down phase to determine 
the actually delay center point of each groups. The 
flow chart of our algorithm is shown in Fig. 3. 
 
 
Fig. 3 Program flow 
B. Delaunay Triangulation (DT) Construction 
In this section, we describe the coordinates 
transform method and how to construct a Delaunay 
Triangulation.  At first, we transform every 
unmerged node to a new coordinate according to 
their downstream capacitance, the transform 
formulation is following: 
 
xi’ = xi + β*( ci / cw ) * xi/( xi + yi )                  (4) 
yi’ = yi + β*( ci / cw ) * yi/( xi + yi )                  (5) 
 
x’、 y’ is the new coordinate after transformation, 
ci is the downstream capacitance at node i, and cw is 
the unit capacitance of wire, β is the weight of the 
downstream capacitance of this node.  
For example, there are eight sinks and the 
downstream capacitance are 10、20、35、25、18、
35、22 and 15. We set β = 0.1. 
 
 
Fig. 4 Sinks distribution 
 
Therefore, the Delaunay triangulation (DT) will 
different compared with the DT of original 
coordinate. We have much more opportunity to 
merge two nodes with closer load although their 
distance is longer then other nodes. 
 
    
(a)                              (b) 
Fig. 5 (a) Before capacitance converted into distance, 
(b) After capacitance converted into distance 
 
After the DT construction is complete, we 
calculate the costs of all edges, and sort them in 
ascending order. 
C. Load-based Grouping 
After the step of IV-B, we will get a sorted list. 
Using the concept of clustering based algorithm, we 
set an upper bound of grouping. Each times we only 
merge the cost less then the upper bound. The upper 
bound is the minimum cost of the sorted list, 
multiply a parameter γ (γ>1). 
 
  
 
Fig. 9 Selected the sub-segment 
 
2) Two nodes are at different layers 
If two nodes (or merging segments) are at 
different layers, we need to add a TSV between them. 
Our method is projecting a node to the layer of the 
other node. As shown in Fig.10, A’ and B’ are the 
projection nodes of node A and node B.  
 
 
Fig. 10 A’ and B’ are the projection nodes of node 
A and node B. 
 
After the projection, we need to update the 
information (downstream delay and capacitance) of 
node A’ and B’ caused by the TSV. The formulation 
is below: 
D(A’) )
2
( ATSVTSVA C
CRt                                   (7) 
C(A’) ATSV CC                                               (8) 
D(A’) is the downstream delay at node A’, RTSV 
and CTSV are the resistance and capacitance of TSV, 
C(A’) is the downstream capacitance at node A’, CA 
is the downstream capacitance at node A and tA is 
the downstream delay at node A. 
Then we can find the merging segments of two 
sets (A’,B) and (A,B’) using the method in section 
IV-D-1. We only preserve the one with smaller 
delay as the final merging segment.  
3) Average Temperature Clock Tree 
When perform bottom up stage to find the 
merging segment of two nodes, we also determine 
the routing path that can avoid crossing the hot spot 
and having a smaller wire delay.  Because the unit 
wire resistance is proportion to the temperature 
according to the formulation we talked in section 
II-A. Therefore we can find the skew balance 
merging segment along the path under two different 
temperature profiles (uniform and non-uniform 
temperature profile) by using the average resistance. 
The wire capacitance is not affected by the 
temperature [11]. As shown in Fig.11, we assume 
the downstream delay and capacitance are 0 at 
Node1 and Node2. The wire resistance at Tile i and 
Tile j are 0.1 at the uniform temperature profile. And 
the wire resistance at Tile i and Tile j are 0.3 and 0.5 
at worst temperature profile separately. We can 
easily find the merging point at uniform profile and 
non-uniform profile. 
 
 
Fig. 11 Delay point under difference temperatures 
 
Here we want to find the balanced skew merging 
point at uniform temperature profile and worst case 
temperature profile. We first calculate the average 
wire resistance (the mean of the two different wire 
resistances) of each tile along the routing path. For 
example: the average wire resistance (ravg) is 0.2 at 
Tile i, and is 0.3 at Tile j. 
Then we can find that the distance Node1 should 
extend is 54.16, Node2 is 45.84. Therefore the delay 
under uniform temperature are 29.3 (Node1) and 21 
(Node2). The delay under worst case temperature 
profile are 96.6 (Node1) and 105 (Node2). And the 
skew are 8.3 and 8.4 separately. The skew difference 
between two temperature profiles is 0.1. The value is 
only 1.2% to the original skew. 
VI. EXPERIMENTAL RESULTS 
We implement our algorithm in C++ and run the 
program on a 2.8GHz Core 2 Duo PC. The IBM 
benchmark suite r1-r5 from [14] was used for the 
experiments. The 3D benchmark is randomly 
distribution into four layers. The technology 
parameters used were rw = 0.003 Ω/μm, cw = 2.0 x 
10−17 F/μm, and β = 0.0068 /℃. The TSV 
 Exploration Using 3DCacti”, in Proceedings of 
the IEEE International Conference on Computer 
Design, 2005, pp. 519–524. 
[3] R. Reif, A. Fan, K.N. Chen, and S. Das, 
“Fabrication technologies for three-dimensional 
integrated circuits”, in Proc. Int. Symp. on 
Quality Electronic Design, 2002. 
[4] A. Rahman, R. Reif, “System-Level 
Performance Evaluation of Three-Dimensional 
Integrated Circuits”, IEEE Transactions on Very 
Large Scale Integration (VLSI) Systems, vol. 8, 
pp. 671–678, December 2000. 
[5] R. H. Havemann and J. A. Hutchby, 
“High-Performance Interconnects: An 
Integration Overview”, in Proceedings of the 
IEEE, vol. 89, pp. 586–601, May 2001. 
[6] Minsik Cho, Suhail Ahmed, and David Z. Pan, ” 
TACO: Temperature Aware Clock-tree 
Optimization,” in Proc. ICCAD, pp. 582-587, 
2005. 
[7] Hao Yu, Yu Hu, Chunchen Liu, and Lei He, 
“Minimal Skew Clock Embedding Considering 
Time Variant Temperature Gradient,” in Proc. 
ISPD, pp. 173–180, 2007. 
[8] ChunChen Liu, Junjie Su, and Yiyu Shi, 
“Temperature-Aware Clock Tree Synthesis 
Considering Spatiotemporal Hot Spot 
Correlations,” in Proc. ICCAD, pp. 107–113, 
2008. 
[9] J.Minz, Z.Xin, S.K.Lim, “Buffered clock tree 
synthesis for 3D ICs under thermal variations,” 
in Proc. ASPDAC, pp. 504–509, 2008. 
[10] T. Wang and C. Chen, “Power-Delivery 
Networks Optimization with Thermal 
Reliability Integrity,” in Proc. Int. Symp. on 
Physical Design, April 2004. 
[11] K. Banergee, A. H. Ajami, and M. Pedram, 
“Analysis and optimization of thermal issues in 
high-performance VLSI,” in Proc. Int. Symp. on 
Physical Design, pp. 230–237, April 2001. 
[12] P. Wilkerson, M. Furmanczyk, and M. 
Turowski, “Compact Thermal Modeling 
Analysis for 3D Integrated Circuits,” in Proc. 
MIXDES, 11th International Conference Mixed 
Design of Integrated Circuits and Systems, 
Szczecin, Poland, Jun. 2004. 
[13] Ting-Hai Chao, Yu-Chin Hsu, Jan-Ming Ho, 
Kenneth D.Boese, “Zero skew clock routing with 
minimum wirelength”, IEEE Transactions 
Circuits and Systems II: Analog and Digital 
Signal Processing, vol. 39, pp. 798-814, Nov. 
1992. 
[14] http://vlsicad.ucsd.edu/GSRC/bookshelf/Slots/
BST/ 
 Area
PowerityPower_dens 
Abstract 
We present an effective algorithm to partition a circuit into k 
layers under power density constraints for 3D IC designs. Our 
algorithm utilizes a multilevel structure and a successive 3D 
aware two-way partition method to minimize the number of 
signal TSVs and area overhead. A layer swapping technique is 
used to improve total number of signal TSVs and power TSVs. 
Finally, a zero-gain cell move technique is used to refine the 
area overhead. Our test cases are 4 industrial circuits provided 
in the IC/CAD 2011 contest in Taiwan [1]. Experimental 
results show that our results are better than those of all teams 
in the contest. 
In addition, we study the impact on signal TSVs of an 
extended hMetics method, simultaneous k-way partition, and 
successive two-way partition for k layer 3D ICs. The results 
show that the successive two-way partition method is superior 
to the other methods both in number of TSVs and run time. 
 
Keywords 
Three dimensional integrated circuit partition; 3D IC; 
Multilevel multilayer partitioning; Through Silicon Via (TSV); 
Power density constraint. 
I. Introduction 
For future generations of ICs, 3D stacking technology is 
likely to become a popular trend in 3D IC designs. It has 
several advantages such as higher integration density, 
heterogeneous integration, higher performance, and lower 
power consumption [2-6]. To implement a 3D IC, the circuit is 
partitioned into subcircuits and then the subcircuits are stacked 
in 3D layers. The devices of the same net located in different 
layers are connected by using through-silicon vias (TSVs). 
These TSVs are defined as signal TSVs. 
In order to supply power to every layer from the 
power/ground pads, which are located on the bottom layer, 
power TSVs are needed. The power TSVs connect the 
power/ground pads to different layers. A power TSV is a TSV 
used only for transporting power. There is a maximum power 
allowed for one power TSV. Therefore, every layer requires a 
specific number of power TSVs according to its power 
consumption. However, the power TSVs of an upper layer 
connect to the power/ground pads via the power TSVs of the 
lower layers. Therefore, the same number of additional power 
TSVs is added to each layer below. For example, if layer 3 
needs 4 power TSVs, then layer 2 will need 4 additional 
power TSVs to serve as pathways. The total number of power 
TSVs in the circuit will be less if the higher layers consume 
less power than the lower layers. 
One of the important issues in 3D IC design is thermal and 
power management. We assume that the top layer and the 
bottom layer of a 3D IC are connected to good thermal sinks 
for heat dissipation. If the middle layers reach a high 
temperature, thermal dissipation will be difficult and the 
performance of the chip will be reduced. Therefore, we need to 
apply power density constraints during circuit partition at 
specified layers to control the temperature of the chip. 
We have developed a program to effectively partition a 
circuit with the goal of minimizing the total number of signal 
TSVs and power TSVs, and equalizing the area of each layer 
while observing power constraints. 
Recently, several papers have been published that are 
related to 3D IC partition [6-10]. [6] describes partitioning an 
IC based on an ILP solver. [7] and [8] introduce methods of 
partitioning a circuit in a 3D structure. [9] and [10] focus on 
the prediction of best layer numbers in 3D IC partitioning with 
minimum manufacturing cost. 
The rest of this paper is organized as follows. Section II 
presents the problem description. Section III describes power 
estimation. The details of the power-aware partitioning 
algorithm will be described in Section IV. Experimental 
results are shown in Section V. Finally, we give conclusions in 
Section VI. 
II. Problem Description 
The input of the problem include a gate level netlist, the 
number of layers of the 3D IC (k), the operating frequency of 
each primary input, the supply voltages, the standard cell 
library, the TSV cells and the power density constraints of 
some layers in the 3D IC. The objective is to partition the 
netlist into k layer to minimize the total number of TSVs 
(signal TSVs and power TSVs) and area overhead under the 
designated power density constraints. Area overhead is 
defined as the following equation: 
 
 
where layermaxA is the maximum area of a layer among all layers, 
and originalA  is the total area of original 2D design that does not 
contain TSVs. 
 The power density is the power consumed at a certain layer 
divided by the area of the layer, and it is defined as the 
following: 
 
 
             
 
where Area includes the areas of cell and TSVs. 
We assume that all layers are stacked using the 
Face-to-Back style, and the I/O pads (including the 
power/ground pads) of this design are all located at the first 
A 3D IC Designs Partitioning Algorithm with Power Consideration 
Ho-Lin Chang1, Hsiang-Cheng Lai2, Tsu-Yun Hsueh3, Wei-Kai Cheng4, Mely Chen Chi5 
Department of Information and Computer Engineering 
Chung Yuan Christian University, Chung Li 32023, Taiwan 
Email: { 1g9977027, 2g9977025, 3g9877014, 4wkcheng, 5mlchen } @cycu.edu.tw 
(2) 
(1) originaloriginal
layer
max AAkAadAreaOverhe ))(( 
978-1-4673-1036-9/12/$31.00 ©2012 IEEE                             137                  13th Int'l Symposium on Quality Electronic Design
 CurL_mNCurL_mNPreL_mNRateReduction_ )( 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
The process coarsens modules with less external and more 
internal connections. The coarsening phase will stop either 
when the total number of modules is less than 20 × k or 
Reduction_Rate < 50%. Reduction_Rate is defined as 
following: 
 
 
 
where PreL_mN is the number of modules in previous coarsen 
level, and CurL_mN is the number of modules in current level 
of coarsening process. 
 
2) Initial Partitioning 
First, we place all modules on the first layer and successively 
move the module of the maximum gain to the next upper layer 
until the cell area on the first layer is less than or equal to Aavg, 
where Aavg is defined as the total cell area divided by the total 
number of layers. After that, After that, we apply an area 
constrained FM partitioning algorithm to these two groups of 
modules to reduce the number of cutlines. This process is 
equivalent to reduce the number of signal TSVs. If there is a 
power constraint on the first layer, then during the cell move 
process, we check the power density of the first layer. If it 
satisfies the power density constraint of the first layer, we will 
record this state. After the process of the cell move stops, we 
will choose the state which area is closest to Aavg. Then we 
repeat the same process to move cells from the second layer to 
the upper layer until all modules are partitioned to all layers. 
 
3) 3D-Aware k-Layer-Partitioning and Uncoarsening 
The way that gain is calculated in a 3D IC structure is 
different from the calculation of gain in a 2D structure. As 
shown in Figure 3, when cell A is moved from cluster 1 to 
cluster 2, the total gain calculated in a 2D structure is 0. 
However, in a 3D IC structure, the gain is 1. 
 
 
Figure 3: Difference of cutlines between 3D IC structure and 
2D structure. 
 
3.1)  Preliminary Study for Simultaneous k-Way Partition 
and Successive Two-Way Partition without Power Density 
Consideration 
Currently a circuit size is more than millions of gates. It 
takes long time to partition the circuit. Therefore, we explore 
two partitioning schemes: (1) a simultaneous k-way partition 
and (2) a successive two-way partition for k layers. The 
purpose of exploring these two schemes is to study the impact 
on the number of TSVs and the run time of these two schemes 
without considering power density. We use the same results of 
the initial partition described in the previous section for both 
schemes. The objective of partition is to minimize the number 
of signal TSVs without violating the following area constraint: 
 
 
 
where r is a user defined ratio for area variation. 
In the simultaneous k-way partition process, a cell may be 
moved to the layer of the maximum gain among all layers in 
the 3D IC structure. However, in the successive two-way 
partition process, a cell may only be moved between two 
selected layers. This process begins with partitioning layer 1 
and layer 2. Then layer 2 and layer 3 are partitioned. This 
procedure is done for all combinations of layers, that is 
kC2 times. When a cell is moved between two layers the cell 
gain is calculated by considering the connected net 
distribution across all layers [7]. This allows the global 3D 
effect to be included even when only two-way partition is 
performed. We have done the experiments on 3 circuits with 
sizes of 201, 106818, and 1079420 with layer numbers from 2 
to 6. The results are shown in the Section V. In addition, we 
also use hMetis [13-15] to partition the same netlists with the 
parameters which are recommended on the Operation Manual. 
We have also transformed the result of hMetis to a 3D IC 
design using the method presented in [6] by way of 
comparison. We perform the exhaustive permutation kC2 in 3D 
and record the smallest number as the final result of the 
extended hMetis method. The results of the extended hMetis 
are also listed in Section V. The experimental results show that 
the successive two-way partition scheme outperforms the 
k-way partitioning scheme and extended hMetis method both 
in the number of TSVs and in run time. The results of 
successive two-way partition are better may be explained as 
follow. In the two-way partition, the choice of a cell move is 
(12) 
Figure 2: Algorithm flow 
Start
Design  
information
Calculate power, No. of 
power/ground pads
Coarsening
Do Coarsening steps 
stop?
K-layer-Partitiom
Do Unoarsen steps 
stop?
Yes
No
Yes
No
Finish
Initial-K-layer-Partition
Layer Swapping
AreaOverhead 
Refinement
Technology 
information
avglayeravg ArAAr  )1()1( (13) 
 Table XI: Comparison of our results with the top three teams in 
the IC/CAD 2011 contest 
TSV, Area Overhead and Run 
Time Results Comparison 
Team Team Team Team Team Team
  
20 49 57 
Ours 
20 49 57 
Ours 
# of TSVs 412 374 418 354 1.16 1.06 1.18 1.00 
Area Overhead 3.85 3.61 5.41 4.35 0.89 0.83 1.24 1.00 
Run Time  697.0 3.8 15.4 2.6 271.21 1.48 5.99 1.00 
bench_2
Memory 292 80 45 72 4.06 1.12 0.63 1.00 
# of  TSVs 381 342 497 342 1.11 1.00 1.45 1.00 
Area Overhead 6.33 1.95 2.06 1.95 3.25 1.00 1.06 1.00 
Run Time  3430.0 6.9 41.9 7.3 467.94 0.94 5.72 1.00 bench_3
Memory 609 177 93 151 4.03 1.17 0.62 1.00 
# of  TSVs 41200 2744 3031 2744 15.01 1.00 1.10 1.00 
Area Overhead 92.29 35.02 93.74 35.02 2.64 1.00 2.68 1.00 
Run Time 11080.0 74.6 333.0 74.5 148.72 1.00 4.47 1.00 
bench_7
Memory 2586 673 315 665 3.89 1.01 0.47 1.00 
# of  TSVs 6355 10336 15323 8416 0.76 1.23 1.82 1.00 
Area Overhead 7.18 8.72 94.63 15.55 0.46 0.56 6.09 1.00 
Run Time  15955.0 257.0 1819.0 384.5 41.50 0.67 4.73 1.00 
test_1 
Memory 5780 1684 968 1688 3.42 1.00 0.57 1.00 
4.51 1.07 1.39 1.00 
1.81 0.85 2.77 1.00 
232.34 1.02 5.23 1.00 
Average TSV Comparison 
Average Area Overhead Comparison 
Average Run Time Comparison 
Average Memory Comparison 3.85 1.07 0.57 1.00 
 
Table V: Run Time comparison of bench3_1.8_400.info 
Run Time (sec) Comparison 
Benchmark # Layers Ex_hMetis k-way 2-way Ex_hMetis k-way 2-way
2 8.99 6.05 5.26 1.71 1.15 1
3 15.94 6.25 6.89 2.31 0.91 1
4 19.76 29.12 7.63 2.59 3.82 1
5 22.73 39.96 10.13 2.24 3.94 1
6 23.84 60.84 16.56 1.44 3.67 1
bench3_1.8_400.inf
o 
avg. 2.06 2.70 1
 
 
Table VI: TSV comparison of test1_1.8_400.info 
# TSV Comparison 
Benchmark # Layers Ex_hMetis k-way 2-way Ex_hMetis k-way 2-way
2 147 106 106 1.39 1.00 1
3 412 2215 318 1.30 6.97 1
4 487 2615 416 1.17 6.29 1
5 3534 4746 3632 0.97 1.31 1
6 4838 5138 3760 1.29 1.37 1
test1_1.8_400.info 
avg. 1.22 3.38 1
 
 
Table VII: Run Time comparison of test1_1.8_400.info 
Run Time (sec) Comparison 
Benchmark # Layers Ex_hMetis k-way 2-way Ex_hMetis k-way 2-way 
2 242.02 144.54 88.53 2.73 1.63 1
3 371.25 282.31 105.17 3.53 2.68 1
4 588.69 536.97 113.07 5.21 4.75 1
5 778.28 1796.16 122.62 6.35 14.65 1
6 889.20 1960.06 148.18 6.00 13.23 1
test1_1.8_400.info 
avg. 4.76 7.39 1
The following experimental results are the results of the 
successive two-way partition with power consideration. 
Because the sponsor of the IC/CAD contest provides contest 
results for 4 benchmarks listed in Table VIII, therefore, we use 
the same benchmarks for our experiments. 
Table VIII shows the constrained layers and power density 
constraints of each benchmark, and the final results of power 
density of our algorithm. 
 
Table VIII: Power Density Information 
 
 
Table IX shows the difference of total TSVs before and 
after layer swapping. It shows that our layer swapping reduces 
the total number of TSVs under power density constraints for 
some cases. 
 In the final stage, we focus on minimizing area overhead. 
As shown in Table X, we can reduce area overhead by 24% in 
“bench3_2.0_200.info”. On average, we can reduce area 
overhead by 6.9% after refinement. 
 
 
Table IX: Comparison of the Number of the TSVs before and 
after Layer Swapping 
 
Table X: The Area Overhead Comparison before and after 
Area Overhead Refinement 
 
Table XI shows the comparison of our results with the top 
three teams in the IC/CAD 2011 contest. They are the only 
teams out of 14 teams that successfully completed all the test 
cases correctly. They are teams 20, 49, and 57. On average, 
our algorithm is 351%, 7% and 39% less in terms of the 
number of TSVs, and  232.34×, 1.02× and 5.23× faster in 
terms of run time, respectively. The area overhead of our 
algorithm is 81% and 177% smaller than teams 20 and team 57, 
respectively. 
VI. Conclusions 
We present an effective algorithm to partition a circuit into k 
layers under power density constraints. Our algorithm utilizes 
multilevel structure and the successive two-way partition 
method to minimize the number of signal TSVs and area 
Benchmark Constrained Layer 
Power Density 
Constraint 
Power density after 
partition 
bench2_2.5_300.info 2 100 61 
bench3_2.0_200.info 2 60 28 
bench7_1.8_400.info 2、3 80、100 73、90 
test1_1.8_400.info 2、3、4 100、80、100 60、56、57 
Before After 
Benchmark # of 
Signal 
TSVs
# of 
Power 
TSVs
# of 
Total 
TSVs 
# of 
Signal 
TSVs 
# of 
Power 
TSVs
# of 
Total 
TSVs
Difference 
(Before - 
After) 
bench2_2.5_300.info 236 118 354 236 118 354 0
bench3_2.0_200.info 139 352 491 216 126 342 149
bench7_1.8_400.info 558 2186 2744 558 2186 2744 0
test1_1.8_400.info 6147 2686 8833 5858 2558 8416 417
Area Overhead (%) Comparison Benchmark 
Before After Before After 
bench2_2.5_300.info 4.50 4.35 1.034 1
bench3_2.0_200.info 2.42 1.95 1.241 1
bench7_1.8_400.info 35.04 35.02 1.001 1
test1_1.8_400.info 15.56 15.55 1.001 1
Average Area Overhead Comparison 1.069 1
 
-----Forwarded message----- 
From: keith.a.bowman@intel.com 
To: mlchen@cycu.edu.tw 
Cc: ali@isqed.org,keith.a.bowman@intel.com 
Date: Fri, 2 Dec 2011 17:41:05 -0800 
Subject: Your ISQED 2012 Submission (Number 153) 
 
Dear Prof. Mely Chen Chi: 
 
On behalf of the ISQED 2012 Technical Program Committee (TPC), it is my pleasure 
to inform you that your following submission has been accepted for oral presentation 
at the conference. 
 
     A 3D IC Designs Partitioning Algorithm with Power 
           Consideration 
 
You will have a maximum of 17 minutes to present your paper plus 3 minutes for 
questions and answers.  The conference program will be available on the ISQED 
website (www.isqed.org) within the next week.  At this time, you will be able to 
identify the session in which you will be presenting.   
 
At the bottom of this e-mail, the reviewer comments for your paper are 
provided.  Please address the reviewer comments as you prepare the final version of 
your paper. 
 
Please use the following link to upload the final version of your paper. 
 
     https://www.softconf.com/c/isqed2012/ 
 
On the left side of the page at this link, enter the passcode associated with your 
submission.  Your passcode is: 
 
     153X-H9A3P9G5D9 
 
Alternatively, you can click on the following URL, which will take you directly to a 
form to submit your final paper. 
 
This paper studied the problem of circuit partitioning for 3D-IC 
considering power density constraints and overheads in power 
delivering TSVs in order to minimize the total number of TSVs 
and area overhead. Here are a few comments. 
 
1 Do you consider the area occupied by TSVs? This may help to 
  justify your results when compared to others in terms of 
  area overhead. 
 
2 The experimental results should be consolidated. 
 
3 References to other approaches should be included if possible. 
 
=============================================================
=============== 
                            REVIEWER #2 
=============================================================
===============  
 
 
--------------------------------------------------------------------------- 
Comments 
--------------------------------------------------------------------------- 
 
* The description is clear while the flow diagram in figure 2 is too small to 
read. 
* The run time and results on the benchmarking cases are convincing. 
* Partitioning a whole design’s netlist into 3D IC implementation seems not 
popular yet. 
 
=============================================================
=============== 
                            REVIEWER #3 
=============================================================
===============  
 
 
--------------------------------------------------------------------------- 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/07/31
國科會補助計畫
計畫名稱: 不同溫度分佈下，最小平衡時序差異之三維積體電路時鐘樹繞線
計畫主持人: 陳美麗
計畫編號: 100-2221-E-033-055- 學門領域: 積體電路及系統設計
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
本計畫提出一個三維架構下考量溫度分佈時之最小化時序差異的時鐘樹。 並且
提出一個座標轉換的方法，將各點的電容轉換為距離，得到的新座標再去建立
Delaunay Triangulation，使得我們在挑選組合時，也能同時考量電容的影響。
我們也可以建立一棵平衡時序差異的時鐘樹，不論晶片處於剛開始運作時的溫
度或是晶片處於 Fully Active 的狀態，晶片的功能都能夠正常的運作。 由實
驗中發現，我們能夠有效的在考量溫度分佈的情況下，建立最小化時序差異的
時鐘樹。 我們也可以在建立時鐘樹時，考慮 Worst Case Temperature Profile
與 Uniform Temperature Profile(室溫，均勻分佈)，使用平均電阻來建立時
鐘樹，能夠使得我們所構建的時鐘樹，在這兩種 Temperature Profile 擁有相
近的時序差異(skew)，並且降低時鐘樹的時序延遲(delay)。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
