 1
中文摘要 
由於資料串流的特性迥異於傳統資料，再加上許多新興應用的推波助瀾，使得資料串流成為
備受矚目的資料型態，舉凡資料串流管理系統（DSMS）的相關理論或應用雛型，皆為當前
資料工程領域中熱烈討論的研究課題。為了滿足各種不同應用的實際需求，並且探討與解決
現存資料串流管理系統所遭遇的種種問題與技術瓶頸，本計畫以研究 DSMS 的核心技術⎯連
續型查詢（continuous query, CQ）之處理為主軸，開發此核心技術所需的各種關鍵技術；同
時，本計畫更進一步地實際考慮感測器網路（sensor network）的環境，透過感測器特性之分
析，發展感測器網路下之多查詢處理技術，並建立一實作系統作為使用者監測之用。 
 
Abstract 
During the last couple of years, many researchers have paid their attention to data stream 
management, which is much different from the conventional database management. At present, the 
new type of data management system, called data stream management system (DSMS), has become 
one of the most popular research areas in data engineering field. To satisfy all kinds of requirement 
in DSMS, we focus on the core technique – continuous query processing and have developed the 
key techniques for the concerned applications. Moreover, we develop the multiple query processing 
techniques for the sensor network by considering the real environment and the characteristics of 
sensors. Furthermore, a robust system is constructed for users to efficiently monitor the sensor 
network.
 3
目錄圖表 
圖一：新式概要結構........................................................................................................................12 
圖二：記憶體空間及準確率之實驗結果........................................................................................12 
圖三：傳輸策略示意........................................................................................................................13 
圖四：傳輸策略間的傳輸次數比較................................................................................................14 
圖五：傳輸策略間的探勘時間比較................................................................................................14 
圖六：有項目標幟的有序樹T及其對應編碼 .................................................................................15 
圖七：與StreamT效能比較 ..............................................................................................................16 
圖八：每t個時間點的CM sketches..................................................................................................16 
圖九：CM sketches記錄指數統計圖資訊 .......................................................................................16 
圖十：事件序列篩選系統之流程圖................................................................................................17 
圖十一：在不同查詢數量下我們方法所需之處理時間................................................................18 
圖十二：在不同查詢數量下暴力法所需之處理時間....................................................................18 
圖十三：不同查詢數量下的總處理時間........................................................................................19 
圖十四：一至三條事件串流所需之總處理時間............................................................................19 
圖十五：階層型聚合式網格索引架構............................................................................................20 
圖十六：不同移動物件數量下三種方法的效能............................................................................21 
圖十七：不同查詢數量下三種方法的效能....................................................................................21 
圖十八：分群索引架構....................................................................................................................22 
圖十九：改變每筆資料所包含的平均項目數時的效能變化........................................................23 
圖二十：改變每筆資料的可能最大式樣時的效能變化................................................................23 
圖二十一：無線感測器感測排程技術之系統架構........................................................................24 
圖二十二：能源節省比率及資料錯誤率........................................................................................25 
圖二十三：錯誤誤差與通訊錯誤率之關係圖................................................................................26 
圖二十四: 動態計數速寫資料結構 ................................................................................................27 
圖二十五：準確率實驗比較............................................................................................................28 
圖二十六：所需空間實驗比較........................................................................................................28 
圖二十七：MAKE DB 系統架構圖 ...............................................................................................29 
 
 5
（三） 感測器網路之查詢處理 
除了一般性的資料串流環境外，由於感測器網路（sensor network）乃是一資料串流環境
中之重大應用，為了與真正實際應用結合，我們將多查詢處理問題延伸至建構在感測器網路
上之資料串流研究；也因為我們的研究真正的涉及實際應用的範疇，使得在實際情形下，感
測器網路上的查詢處理技術，會受限於感測器本身之物理限制，如電力（power）、傳送半徑
（transmission radius）等，因而加深了資料管理之複雜度，卻也提供了不同的研究議題。針
對感測器資料之近似聚合查詢問題，基於不同的設計概念，本計畫發展了兩個獨立的方法並
且加以比較，而這兩個方法在效能上都勝過目前所存在的其他方法；同時為了應付實際的電
力限制，本計畫分別設計了使用期限下之感測排程技術以及以趨勢分析為基礎之感測省電技
術，並將這些技術一同彙整於實作系統之內；最後，為了減少多個查詢在聚合運算時的耗電
量，我們也發展了一套計算分享的機制來進行多個查詢的最佳化處理。 
茲就依照這三類主題，分別描述其研究目的、相關文獻、研究方法暨成果展示於以下各
節，最後一節則為本計畫執行成效的整體評估與論文成果列表。 
 7
有鑑於移動物件環境也屬於串流資料環境中的一環，我們同時亦考慮在此環境中開發連
續型 KNN 查詢處理技術。有別於過去的研究成果，我們將物件的屬性分類為位置相依型
（location-dependent）與位置獨立型（location-independent）兩種，使用者能夠透過決定這兩
種屬性的重要性來設計其個人化的花費測量機制，以取得滿足其需求之答案，因此我們所開
發的移動物件環境下 KNN 查詢處理方法能夠滿足更為複雜的應用需求。 
 最後，像是市場販賣、使用者側寫檔以及網路使用資料等交易型資料（transactional 
data），也廣泛出現在許多新興的應用當中，這些資料通常都會大量且快速地累積，如何能夠
及時地對這些資料做查詢處理也是一門重要的課題，本計畫針對此一課題，設計了嶄新的篩
選機制以及資料結構，並據此開發一交易串流環境下之區間查詢技術，以符合這類應用所需
的及時性要求。 
（三） 感測器網路之查詢處理 
在感測器系統應用中，除了單一感測器節點資料的收集外，針對一群感測器節點資料之
聚合查詢（Senor Data Aggregation），如平均、總和、記數、最大值等聚合值，也廣為使用，
常見的感測器資料聚合查詢應用包括了平均雨量的回報、活動中之感測器節點數的回報等。
現階段感測器系統中最常見的資料聚合方式為樹狀式資料聚合計算（Tree-Based Aggregation）
與多路徑式資料傳遞（Multi-Path Routing）兩種，然而樹狀式資料聚合與多路徑式資料聚合
各有其優缺點。在沒有網路錯誤發生的狀況下，樹狀式資料聚合擁有精確的查詢結果，多路
徑式資料遞送則僅能提供近似或錯誤的結果。而在網路狀況不佳的條件下，樹狀式資料聚合
將會遺失大部分的感測器觀測值，而多路徑式資料聚合則保有較佳的容錯能力，並提供一個
較準確的聚合查詢結果。有鑒於此，本計畫以多路徑式資料遞送方式為基礎，設計出具高可
靠度、高準確率與高能源效率之感測器資料聚合計算方法，以供感測器資料聚合查詢應用使
用。 
此外，在無線感測器網路系統上（Wireless Sensor Network）由於感測器之電力供應是由
電池所提供，再加上無線傳輸和感測功能皆須消耗相當大量之電力，一旦電量耗盡，即失去
功能無法再行充電，因此在增加電源供應的狀況下，如何節省電量消耗，是無線感測器網路
研究範疇中，相當重要的課題之一。對此一課題，本計畫從兩個面向來加以探討：第一，在
感測器網路續航力方面的研究，只著重於如何節省能源消耗量，而無有效方法能確切規劃感
測器之使用期限，為了能夠達到使用者所預定的監測時限，方便監測計畫的訂定和付出成本
的計算，我們藉由發展感測時程技術（Acquisition Rate）及突發事件應對之排程技術，來規
劃具有『以達到任務期限為目標』之無線感測器網路，盡可能在不同電力供應下，滿足使用
者查詢所需之特定突發狀況的同時，還能夠將剩餘的電量做有效之分配利用；第二，TinyDB
與 TAG 等感測器資料管理系統，其收集資料的方式為定期地偵測環境變數，並且回傳給資料
管理系統，然而其偵測週期乃由管理者直接下達指定。若偵測時間設定較長，則較節省能源，
但相對得到較少的環境資訊；若偵測時間設定過短，則相對應得到較多資訊，但卻十分耗電。
在一般的感測應用中，如溫度監測等，常具有其週期性，過份密集的偵測不僅耗電也無助於
取得有用資訊，基於此觀察，我們設計一週期探勘的演算法，針對感測器所偵測之歷史資料
加以分析，探勘這些資料的週期資訊，並利用所找出的週期特性，以便動態調整偵測時間，
達到省電的目的。 
 9
目。在這些研究中，多半是讓項目經由幾個雜湊函數計算後，將其資訊存入雜湊表格中相對
應的計數器中，使得一個項目會和多個計數器相互對應，而且多個項目也可能會對應到一共
同計數器。在這些以雜湊為基礎的演算法中，雜湊表格的維護程序(Maintaining Procedure)非
常簡易，當有新的項目被產生時，與該項目相關的計數器之計數值便會增加，而各個項目的
支持度則可由它們各自相對應的計數器來估算。然而，以雜湊為基礎的方法到目前為止，僅
提供於高頻項目的探勘。在[JQS03]內所提的 h 計數(hCount)方法中，當使用者想知道目前的
高頻項目，也就是在所謂的探勘階段(Mining Stage)時，所有的項目皆會經過雜湊函數計算來
求得其支持度，並一一檢查是否有滿足最小支持度。此外，Manku et al.在[MM02]中則是發展
了一少算(Lossy Counting)演算法來探勘高頻樣型。此演算法主要的原理是，僅在系統中記錄
較高頻的樣型，而且盡量快速地將低頻樣型給移除。然而，由於為了達到樣型之真正支持度
和估計支持度之差值能小於使用者所定義的錯誤參數值(Error Parameter)；因此，該演算法必
須將支持度超過錯誤參數的樣型全部儲存，而造成系統記憶體大幅被佔用。 
在本計畫中，我們將分散式探勘系統建構成一連續分散式模型。所謂連續分散式模型
[CMZ07]其架構如下：有多個遠端網點(Remote Site)，且每個遠端網點會監控一資料串流，而
另有一伺服器(Server)其主要的功能是來作為所有遠端網點的協調者(Coordinator)，在此一分
散式系統架構下，伺服器端會在所有資料串流的聯集上，持續監控一特定任務(Task)，我們
可將之視為伺服器端會於所有資料串流的聯集上執行一特定計算函數 (Computational 
Function)，如分群(Clustering) [CMZ07]、越門檻計數(Thresholded Counts) [KCR06]、複本回
復(Duplication Resilient) [CMZ06]、前 k 監控(Top-k Monitoring) [BO03]、追蹤集合表示
(Tracking Set Expressions) [DGG04]及分位數(Quantiles)監控[CGM05]等。在此模型下，多半不
考慮由網路所造成的訊息延遲 (Message Delay) 、封包遺失 (Packet Loss) 或是同步
(Synchronization)議題等，而假設在傳輸過程中，傳送者將資料送出的瞬間，接收者便可收到，
進而將問題化簡成，監控結果正確性(Correctness)及準確性(Accuracy)完全取決與所設計之相
關演算法。 
（二） 串流資料之連續型查詢處理 
包括 DNA 序列比對、內涵式複音音樂查詢以及資料串流管理等研究領域都與我們所開
發的串流資料的連續型查詢處理有關，分別介紹如下： 
在 DNA 序列比對的領域，大多是考慮由 A、T、C 與 G 四種單一符號所組成的基因序列，
其中 BLAST[AG90][PL98]是最廣為人知的基因序列比對工具，這個工具雖然有極高的比對效
率，但是確有可能會遺漏部分的答案，在其他應用環境之下，這種情況可能會導致服務品質
的嚴重下滑，而我們研究的目標則是在進行連續型查詢處理時，不遺漏任何的答案；此外，
[KS01]則是利用序列中所有的子字串利用小波轉換技術轉至數字空間，將所得之小波係數建
立在索引結構之上以加速比對速度，然而這種方式並不適合用在串流環境之中，因為我們所
考慮的多數值串流會比單數值串流更為複雜，這樣的轉換將會造成更大的搜尋空間，反而會
拖累比對的效益。 
針對複音音樂之查詢，因大部分的音樂查詢系統乃是以音高為比對的標準，而在複音音
樂中同一個時間點會有一個以上的音符同時發生，因此一首複音音樂可以由一個多數值字串
來表示。對於複音音樂之查詢，[LP00]根據shift-or演算法發展一新演算法，但是與shift-or演
算法相同，其查詢樣型的長度受限於計算機中的字元長度，而且其查詢只限於單音的形式；
 11
應到的位元 RN來估算。FM-Sketches 估算的精神在於，若一個多重集合裡不同元素數量越多，
則二元陣列裡最右側被對應到的位元 RN，也將會越大。因此利用二項式測試隨機雜湊函數的
特性，多重集合裡不同元素數量可利用 E[RN ] = log2(0.773×N)，此公式來估算。 
 然而，使用 FM-Sketches 來解決多路徑式資料聚合計算所產生的重複記數問題，將會面
臨三個主要缺點。首先，使用 FM-Sketches 來估算資料聚合值，所得的估計值準確率低且所
得的資料聚合估算值的變異程度高。由於 FM-Sketches 所使用之雜湊函數模擬ㄧ連串二項式
測試，在 FM-Sketches 二元陣列中由左側算來第 i 個位元被對應到的機率較第 i+1 個位元被對
應到的機率多出一倍。因此在估算中，二元陣列裡由左側數來最右側被對應到的位元 RN實際
上各有一半的機率，會被對應於第(RN+1)位元與第(RN -1)位元，造成使用 FM-Sketches 準確率
低且變異程度高的缺點。第二，FM-Sketches 的使用需在各感測器節點維持一組隨機雜湊函
數，造成額外的記憶體花費與感測器能源消耗。第三，使用 FM-Sketches 無法在資料聚合估
計值之準確率上有任何保證。 
 在[MN05]中，Manjhi et al.則提出在一個無線感測器網路中，同時使用多路徑式資料聚
合與樹狀式資料聚合來進行高可靠度無線感測資料聚合；在網路通訊失敗率較高的地方使用
以 FM-Sketches 為基礎之多路徑式資料聚合，而在網路通訊失敗率較低的地方使用一般的樹
狀式資料聚合。這樣的方法巧妙地結合多路徑式資料聚合與樹狀式資料聚合的優點，然而，
使用此方法的主要代價為需主動地管理並動態切換感測器網路中各區域所需維持之資料聚合
模式。當網路狀況不穩定時，頻繁地切換各區域所維持的資料聚合模式，將造成額外的能源
消耗與能源利用率的下降。 
在[SB04]中，Shrivastava et al.則探討無線感測器網路中較複雜的資料聚合函式的計算，
例如中位數(Median)與統計條狀圖(Histogram)。論文中假設感測器網路中並無網路通訊失敗
的情形存在，並將焦點置於感測器觀測值的統計資料儲存結構之設計。在[CP06]中，Chen et al.
則提出利用重複的隨機資料交換程序(Data Exchanging Process)的方法來計算無線感測器網路
中資料聚合值。在一次隨機資料交換程序中，網路中的感測器節點隨機的成為主導節點。成
為主導節點的感測器節點利用廣播邀請其鄰居來形成感測器群組，群組中的節點將其所儲存
的部分資料聚合值傳遞給主導節點。主導節點接收其群組所傳遞之部分資料聚合值後，計算
新的部分資料聚合值，並廣播予群組中之節點。利用如此的隨機資料交換程序，各感測器節
點所儲存的部分資料聚合值將逐漸收斂至正確的資料聚合值。然而使用這樣方法的缺點為需
要多次的隨機資料交換程序，造成感測器能源的消耗與查詢結果回報的延遲。
型的支持度。 
實驗的成果如圖二所示，我們所提出的新式概要在記憶體的需求上，其表現都明顯優於
Lossy Counting。 
2. 分散式多重串流下之高頻樣型探勘方法 
如圖三所示之分散式系統建構，我們利用一台電腦來處理一局部串流（local stream），並
另設一伺服器（server）來當作所有電腦的協調者（coordinator）。對於一局部串流而言，處
理該串流的電腦利用我們在前一項目中所設計之雜湊式概要結構，建立此一局部串流的概
要。而對於伺服器而言，它主要的工作是在於合併（merge）所有局部串流概要，形成所有局
部串流的聯集（union）所對應之一總體概要（global synopsis）。此外，為求節省電腦端將其
局部概要傳送至伺服器，且伺服器合併所有局部概要所花費之等待時間，我們將此一分散式
系統建構成一連續分散式模型（continuous distributed model），使得伺服器所維護之總體概要
皆永遠對應至目前所有局部串流的聯集。 
 13
  
圖三：傳輸策略示意 
在此分散式系統架構中，我們採取單向傳輸策略（one-way communication strategy），也
就是伺服器端僅接受由電腦端傳來之資料，而不會傳送資料至電腦端，藉此來節省由伺服器
端傳送至電腦端所可能產生之傳輸量。在電腦端，我們設計兩傳輸策略（communication 
strategy）：一、COS 策略：僅考慮根據使用者對樣型所給定之真正支持度與估計支持度的差
異容忍範圍以及二、AOS 策略：除上述考量外，同時考慮樣型狀態的改變，例如：由高頻樣
型轉變為非高頻樣型，或由非高頻樣型轉變為高頻樣型等因素。當超過上述傳輸策略裡訂立
的傳輸限制時，強迫此一電腦傳送相關資料給伺服器。 
在電腦端強迫與伺服器溝通時，電腦端傳送至伺服器的資料為：上次傳輸後至目前時間
點的概要差異，也就是如圖一所示，我們需將△Ni的局部概要傳送至伺服器。根據傳輸策略
的特性，我們設計兩個策略來產生△Ni的局部概要：一、直接建立新的概要來維護△Ni的局
部概要及二、利用目前最新的局部概要及最近一次傳輸時的局部概要來推導△Ni 的局部概
要。此外，伺服器端的工作十分簡易，由於在此分散式系統上是使用單向傳輸策略，所以伺
服器端的工作便是接收由電腦端所傳送之△Ni 的局部概要，並將其結合至總體概要中，持續
維持目前所有局部串流聯集所對應之總體概要即可。 
Ni (最近一次傳輸)
△Ni 
newNi 
△Ni的局部概要 
Ni的局部概要 Ni的局部概要 
串流 i 
電腦 i 
... 
N 
(目前時間) 
總體概要  
樹。同時為了便於產生所有子樹及計數等步驟，正規樹需再經過轉換成為特殊編碼的字串形
式。此編碼方式僅能得到唯一的編碼字串，同時亦可將編碼字串轉換回原本的正規樹，此編
碼過程為：依深度優先順序走訪正規樹中的各節點，依此順序列出其項目標幟以形成字串，
如圖六所示。 
編碼方式：A1B2D3C2 
圖六：有項目標幟的有序樹 T 及其對應編碼 
D 
A 
B C
T 
(2) 列舉所有子樹並合併至全域字首樹（Global Prefix Tree）：在此步驟，我們可根據編碼字
串的特性，制訂的增加字首樹（APT, Augmented Prefix Tree）。其實因為在編碼的設計過程中，
我們有將各節點所在的高度（Level）明確的紀錄下來，再加上編碼的過程是利用深度優先
（depth first）順序，因此以這兩項特性反推我們可以建立一增加字首樹用以快速列舉並儲存
所有的子樹樣型，之後再將其合併（merge）至全域字首樹中。 
(3) 以 Lossy Counting[MM02]演算法為基底，刪除計數非常小的子樹樣型：若我們將每棵查
詢樹的增加字首樹找出，合併至全域字首樹，在資料流經一段時間後，可能會有非常龐大的
全域字首樹，造成記憶體空間不足；因此，我們將全域字首樹的建置值基於 Lossy 
Counting[MM02]演算法上，當固定幾棵查詢樹加入全域字首樹之後，就將計數不足其規定的
節點加以刪除，以達到節省記憶體之原則，並維持少算的部分能在容忍誤差範圍內。 
(4) 頻繁子樹探勘處理：當使用者要求回傳目前頻繁子樹時，我們對全域字首樹作深度優先
的走訪，依據該子樹的計數值佔整體資料串流大小之比例是否超過使用者給定之最小支持度
（Minimal Support），回傳頻繁且被標記為封閉的節點。 
我們利用由Zaki所提供之資料產生器產生一組資料來進行實驗的測試，用來比較我們的
方法（STMer）與過去的方法（StramT）效能的優劣，結果如圖七所示，在資料量不斷增加
的情況之下，我們的方法大致上都只需耗費原本方法 7 成左右的時間而已，所以可以顯著地
提升在串流環境中頻繁子樹樣型探勘的效能 
 
 15
查詢間存在的共通性，讓相似的查詢能夠一起進行比對的工作，進而節省運算工作量。圖十為
我們系統運作的流程。查詢管理者（query manager）的工作是對所有註冊的查詢建立索引架
構，我們將每個查詢分割成數個不重疊且長度為n的片段，稱為查詢n-gram（query n-gram）
再套用一分群方法將相似的查詢 n-gram放在同一分群之內。同時，為了加速查詢比對的工
作，每一個分群都會建立一個摘要（summarization）以代表該群，作為和每一筆流入資料比
對之依據。另外，我們利用一流動視窗（sliding window）擷取長度為n的資料片段，稱為資
料n-gram（data n-gram）。當查詢索引建立完成後，刪除機制（pruning mechanism）會開始針
對事件串流所流入的每一筆資料 n-gram進行比對，以找出哪一筆資料 n-gram有可能成為某
一查詢答案的一部份。 
(2) 資料 n-gram 和查詢 n-gram 的比對：我們提出了一個計算資料 n-gram 與每一分群摘要間
限制編輯距離（restricted edit distance）的方法，讓系統得以快速地驗證目前流入的資料 n-gram
一定不會是哪些分群的答案。如果一個資料 n-gram 與一個分群的最短距離大於每一個屬於
該分群的查詢誤差容忍值的話，我們便可以將該分群的所有查詢 n-gram 忽略；反之，我們將
該資料 n-gram 送至每一個相對應的查詢緩衝器（query buffer），以便於在組合答案的時候使
用。 
(3) 合併查詢答案：合併機制（merging mechanism）的工作在於嘗試組合出能夠滿足某一查
詢的近似答案。原則上，對於一個查詢來說，只要我們能夠找到滿足其每一個 查詢 n-gram
的資料 n-gram 時，我們就可以試著組合出一個可能的近似答案。然而如此鬆散的合併機制，
將會浪費許多必不要的計算。因此，根據串流的特性以及誤差容許值的限制，我們在合成近
似答案時採用了四項檢查，來避免組成一些不可能的答案，導致檢查時間的額外花費，這些
檢查包括了滿足第 k 個查詢 n-gram 的資料 n-gram 必須在滿足第 k-1 個查詢 n-gram 的資料 
n-gram 存在緩衝器中才屬有效；當組合出部分解答時，該部分答案的長度不能違反誤差容許
值的限制；實際檢查目前資料 n-gram 與查詢 n-gram 的最小可能誤差，確定其沒有違反誤差
容許值的限制；最後，在合成部分解答時，利用評估的方式預測已經產生的最小可能誤差，
確定其沒有違反誤差容許值的限制。當我們完整組合出一段答案時，便要實際執行與查詢的
距離計算，以確認是否為真正滿足之近似答案。 
Data n-gram
(sliding window)
Event Stream
Sequence Queries
Query n-gram 
(non-overlap)
Query
Manager
Pruning
Mechanism
Merging
Mechanism
Final Answers
Filtering Engine
  
圖十：事件序列篩選系統之流程圖 
 為了模擬一串流環境來進行測試，我們隨機選擇了一百首 MIDI 格式的音樂連續播放，
以作為實驗所用之事件串流，這一百首歌曲一共包含了 168283 個事件，另外，我們也隨機從
中選擇了一千五百個包含 24 個事件的音樂片段來作為查詢，由於我們的技術在此領域中是首
 17
05000
10000
15000
20000
25000
30000
35000
40000
45000
50000
500 750 1000 1250 1500
Number of Queries
Pr
oc
ess
ing
 T
im
e (
s)
Our Approach
Naive Approach
Total Playing Time
 
圖十三：不同查詢數量下的總處理時間 
2212 3185
4167 5058
5915
4424
6572
8334
11116
12330
6836
11359
14200
17974
20045
0
5000
10000
15000
20000
25000
500 750 1000 1250 1500
Number of SQs
Pr
oc
ess
ing
 T
im
e (
s)
one music stream
two music streams
three music streams
 
圖十四：一至三條事件串流所需之總處理時間 
2. 移動物件環境下之 KNN 查詢方法 
在某些應用下，資料的屬性可以分為 location-dependent 與 location-independent 兩種，例
如在買鞋子時，使用者可能會同時考慮移動距離的遠近以及價格高低來決定哪些店面是可以
考慮的對象，因此我們將這一類的 KNN 查詢稱為 heterogeneous KNN（HKNN）以便與傳統
只考慮 location-dependent 的 KNN 作區隔。我們的 HKNN 查詢處理方法設計了一個特殊資料
結構來加速移動物件的資料紀錄，並且採用了數個全新的篩選技術來提升查詢之效率。 
為了能夠有效地建立並且維護移動物件的資訊，我們設計了一個全新的資料結構：階層
型聚合式網格索引架構（hierarchical aggregate grid index），這個索引架構由多層的網格所構
成，最底層的網格由basic cell所構成，而其他層的網格則由index cell所構成，每個index cell 都
會有link指向它所包含的下一層cell，圖十五為該索引架構的一個範例。每個basic cell會紀錄
目前有哪些物件位於該cell所負責的範圍之內，以及該basic cell中的物件所擁有的最大及最小
 19
 
圖十六：不同移動物件數量下三種方法的效能 
 
圖十七：不同查詢數量下三種方法的效能 
3. 交易串流環境下之區間查詢技術 
在本計畫中，我們針對在交易串流環境下進行區間查詢的問題，發展了一個全新的方法，
這個方法結合了資料摘要、資料分群與分群索引的技術，來提升整體查詢的效率，在整個方
法中，我們則是採用 hamming distance 來作為距離衡量的標準。 
過去的針對交易型資料的查詢研究，都會利用 union transaction 來代表一群 transaction，
該 union transaction 即為這些 transaction 的聯集，利用 union transaction 可以計算出查詢與該
群 transaction 的距離界限，可以用來加速查詢處理的時間，然而在我們的實驗觀察中，我們
發現 union transaction 常會過於鬆散，而導致距離界限的預估過為寬鬆而降低了其篩選的能
力，為了解決這一個問題，我們設計了一個全新的 virtual transaction，virtual transaction 是由
一群 transaction 中最常出現的數個項目所構成的，我們還額外紀錄了 r，r 代表了這群
transaction 與 virtual transaction 的最遠距離，當一個查詢進來的時候，我們可以直接計算該查
詢與 virtual transaction 的距離，加上 r 即為該群 transaction 與查詢的最大可能距離，減去 r
則為該群 transaction 與查詢的最小可能距離。 
 21
00.005
0.01
0.015
0.02
0.025
10 15 20 25 30
varying x for T, I=6, D=200k
%
 of
 ac
ce
sse
d d
ata
0
20
40
60
80
100
120
140
160
180
200
tim
e (
ms
ec
)
Our approach (%data)
Two-level(%data)
SG-tree (%data)
Our approach (time)
Two-level (time)
SG-tree (time)
 
圖十九：改變每筆資料所包含的平均項目數時的效能變化 
0
0.01
0.02
0.03
0.04
0.05
0.06
0.07
0.08
0.09
0.1
6 12 18 24 30
varying y for I, T=30, D=200k
%
 of
 ac
ce
sse
d d
ata
0
20
40
60
80
100
120
140
160
tim
e (
ms
ec
)
Our approach (%data)
Two-level(%data)
SG-tree (%data)
Our approach (time)
Two-level (time)
SG-tree (time)
 
圖二十：改變每筆資料的可能最大式樣時的效能變化 
（三） 感測器網路之查詢處理 
以下分別介紹在本項目中所開發的四項技術以及一個實作之感測系統： 
1. 使用期限下之感測排程技術 
在感測器的網路拓樸結構採用樹狀結構的前提下，越是接近伺服器端的節點，必須負責
傳遞越多下端子節點的封包；因此，所需消耗的能量將隨著子節點的數目而增加。其次在於
針對使用者所要求的特定條件，其所需消耗能量的多寡若超出原先統計分析的估計值時，如
何重新排程以求盡可能達到原先預定使用期限。為此，我們設計了一套能有效管理感測排程
的查詢系統，針對各種不同的變因得出最佳的排程，並回覆使用者，根據此排程結果執行的
可靠度（confidence），來決定此查詢的可行性，或得知應當需要如何修正，該系統架構如圖
二十一所示。 
本方法假設網路分布狀態和密度皆為已知，且節點均勻分佈於監測區域，原因在於均勻
分佈下能平均回收各地區的資料，使得資料的代表性較高。首先我們依據過去的統計值資訊，
假設資料為常態分佈（normal distribution），對突發事件的機率和平均耗電量做一估計，接著
 23
到 5%，証明了我們的系統在省電率與錯誤率之間提供了非常良好的平衡。 
0%
5%
10%
15%
20%
25%
30%
35%
40%
45%
50 100 150 200 250 300
tolerance
pe
rce
nta
ge Saving Ratio
Error Ratio
 
圖二十二：能源節省比率及資料錯誤率 
3. 感測器網路之近似聚合查詢技術 
現階段無線感測器網路中主要有兩種資訊傳遞方式：樹狀式資料遞送（Tree-Based 
Routing）與多路徑式資料遞送（Multi-Path Routing）。樹狀式資料遞送方式，主要針對整個
感測器網路，建構一個以主機（Host）為根節點的擴張樹（Spanning Tree），網路節點所感測
或接收之資料，皆往其母節點傳送。但如前文所述，在 Zigbee 的架構下，節點間通訊封包流
失率約為約百分之三十，許多節點的感測資料將因此而遺失。另一方面，多路徑式資料遞送，
則將整個網路拓樸建構為以主機為終節點的 DAG （Directed Acyclic Graph），網路節點所感
測或接收之資料，皆往其上層節點傳送，相同的資料可能會被接收多次。這樣的傳遞方式，
會導致相同資料重複計數（Double Counting）。重覆計數在某些查詢下，並不會對查詢結果產
生影響，例如求取網路中擁有最大溫度值的感測器編號。但是對於某些查詢，例如計算個數
count(*)，則造成錯誤的查詢結果。有趣的是，多路徑式資料遞送的方式，由於單一筆資料被
接收多次，反而在 Zigbee 的架構下，擁有較佳的容錯能力（Fault Tolerance）。 
樹狀式資料遞送與多路徑式資料遞送各有其優缺點。在沒有網路錯誤發生的狀況下，樹
狀式資料遞送擁有精確的查詢結果，多路徑式資料遞送則僅能提供近似（或錯誤）的結果。
而在網路狀況不佳的條件下，樹狀式資料遞送將會遺失大部分的感測結果，而多路徑式資料
遞送則保有較佳的容錯能力，並提供一個較佳的查詢結果。有鑒於此，我們將提出一個在多
路徑式資料遞送方式下，有效避免聚合查詢重複計算的資料摘要結構與演算法，並提供一個
有誤差保證的近似查詢結果。 
多路徑式資料遞送方式產生近似結果的原因，來自於對相同的一筆感測值進行多次的重
複計數（Double Counting）。這樣的問題類似於傳統資料庫中，針對表格（Relation）中某個
屬性（Attribute）進行相異值數量（Distinct Value）的估算問題。因此，我們引用線性計算速
寫技術 （Linear Counting Technique）來避免相同感測器被重覆讀取的問題。 
線性計算速寫技術主要包含一個隨機的（Randomized）雜湊資料結構。線性計算速算技術
主要用來估算一個多重集合（multi-set）中，相異值的數量。給定一個多重集合，線性計算
速算技術的使用方法如下。首先，產生一個長度為 m，初始值為零的位元陣列。同時引入一
個均勻散佈且獨立的雜湊函式，該函式將給定之多重集合中的元素對應至所產生的位元陣
列，並將所對應到的位址設定為一。接下來，將所有多重集合中的元素，對應至位元陣列。
最後，計算位元陣列中，所有非零的位址數目。並利用非零的位址數目（Vn），進行相異值的
 25
定址集合 計數向量 
 
圖二十四: 動態計數速寫資料結構 
   由於在感測器環境的應用上，些許的估算上誤差是可被允許的，我們所設計的資料結構根
據使用者所允許的誤差與誤差值的變異數，來設定資料結構長度。可以想見，此資料結構的
長度應與使用者所允許的誤差、所允許的誤差值變異數，以及真正的資料聚合值有關。然而，
真正的資料聚合值，即所求，在決定資料結構長度時是不知道的。因此過去常使用真正資料
聚合值的上限(例如網路中的感測器數目)來決定資料結構長度。這樣的方法確實避免掉決定
資料結構長度時之問題，但是卻帶來資料結構長度過長以及在離網路主機較遠之節點大多傳
遞大部分值為零的位元陣列之副作用，造成大量的感測器能源消耗。因此我們提出一個動態
配置資料結構長度的演算法，動態地調整資料結構的長度，以避免資料結構過長及傳遞大部
分值為零的位元陣列之副作用。我們的方法進行步驟如下: 
(1) 使用動態計數速寫結構表示感測器資料：首先，令所有參與資料聚合的節點ui，根據其
感測資料值vi，配置一長度為mi之動態計數速寫資料結構。其中mi )1(5
)1(5
) ,,( −−⋅⎥⎥⎥
⎤
⎢⎢⎢
⎡
−−
⋅= tet ，
詳細設定見[FC09]。一個節點的動態計數速寫資料結構DC(BI, CV)包含一個定址索引元件BI 
(Border Index)與一個計數向量CV (Counting Vector)。
te
kv
t
i δεL
圖二十四為我們所設計之動態計數速寫
資料結構之概念圖。定址索引元件提供不同節點之計數向量長度索引位置，而計數向量則為
一初始值為零之位元陣列。接著所有節點ui將所配置之動態計數速寫資料結構之計數向量隨
機均勻的設定vi個元素為壹，並將定址索引元件指向mi的位置。 
(2) 內網路動態計數速寫資料結構聚合計算：接下來，則進行內網路動態計數速寫資料結構
聚合計算。該計算由網路最底層的節點開始，將其動態計數速寫資料結構廣播到其上一層的
節點。收到動態計數速寫資料結構之節點，將其自己之動態計數速寫資料結構與接收到之動
態計數速寫資料結構進行內網路資料聚合。當兩個動態計數速寫資料結構要進行聚合時，其
聚合動作定義如下: 給定兩個動態計數速寫資料結構 DC1 (BI1, CV1)與 DC2 (BI2, CV2), 假設 
|CV2| ≥|CV1|. 則 DC1 與 DC2 之總和 DC3 (BI3, CV3)為(1)BI3 = BI1∪BI2 與(2)CV3[i] = 
CV1[i] ∨ CV2[i], for i = 0, …, |CV1|-1, and CV3[i] = CV2[i], for i = |CV1|, …, |CV2|-1。接著該節點將
聚合過後的動態計數速寫資料結構以此類推地往其上層節點傳送與處理，直到所有的動態計
數速寫資料結構集合於網路主機節點。 
(3) 近似資料聚合結果計算：待所有的動態計數速寫資料結構集合於網路主機節點後，網路
主機將所有動態計數速寫資料結構聚合後產生一個最終動態計數速寫資料結構，並根據該動
態計數速寫資料結構之定址索引元件與計數向量所提供的資訊利用動態計數估算子
進行最終近似資料聚合結果計算，並將最終結果回傳予下
達查詢之使用者。 
∑−−=∑= −
== +
1
1
1 1
max
max
max )/ln()ln(ˆˆ
max i
mmimi i ii VVmVmvn
 27
 圖二十七：MAKE DB 系統架構圖 
MAKE DB的系統架構如圖二十七所示，其中所使用之相關元件分述如下： 
NesC：由柏克萊大學所設計的一種專門用來開發感測器應用程式的程式語言(類似 C 語言)。
這種程式語言是採取元件導向的結構， 以元件來表達抽象的系統函式和硬體，而感測器程式
就是組合各功能的元件來達到整體程式的目標。 
http://www.tinyos.net/dist-1.1.0/tinyos/windows/nesc-1.1.2a-1.cygwin.i386 
TinyOS：是專為無線嵌入式感測器系統所設計的作業系統，採用元件導向的結構。可依據嵌
入應用，輕易增減控制執行的功能，且程式碼佔量極少，有助於記憶體空間的硬體資源精省，
且能夠同時執行多個要求快速回應的控制運作。TinyOS 內部是由 nesC 所寫成的各種元件集
合而成。不需行程(Process)管理，不需虛擬記憶體，不需記憶體管理，採用靜態配置記憶體
技術。 
http://tinyos.net/windows-1_1_0.html 
Maté：Maté 是 TinyOS 的一個元件，是利用 NesC 所撰寫出來的。可以想像它是一個物件，
用來提供 VM(Virtual Machine) 開發。此外 Maté 還包括了一個 Java toolchain 的部分，提供我
們使用一種較簡單、較高階的 scripts language 來對 TinyOS networks 進行程式的撰寫。 
http://www.cs.berkeley.edu/~pal/mate-web/rpms/mate-asvm-2.2-1.noarch.rpm 
Bombilla：Bombilla 正是用 Maté 所開發出來的一個 VM 實例。而我們目前系統所使用的
Maté，在它上面執行的正是 Bombilla 這套 VM。 
TinyScript：由 Maté 所支援的一種簡單且高階的 scripts language。 
Instruction Code：一種類似組合語言的 code。我們所寫的 TinyScript 程式會被 Maté 編譯成
Bombilla 能看懂的 Instruction Code。這種 Instruction Code 會被散佈(Broadcast)到感測器網路
上去執行。 
 29
 31
Environment,” Submitted for publication. 
[7] Y. C. Fan and A.L.P. Chen, “Exploring Common Evaluation for Efficient Processing Multiple 
Queries in Sensor Databases,” Submitted for publication. 
[8] Y.C. Fan and A.L.P. Chen, “Efficient and Robust Sensor Data Aggregation using Dynamic 
Counting Sketches,” Submitted for publication. 
[9] E.T. Wang and A.L.P. Chen, “A Novel Hash-based Approach for Mining Frequent Itemsets 
over Data Streams Optimizing Memory Space Utilization,” Submitted for publication. 
[10] E.T. Wang and A.L.P. Chen, “Continuously Maintaining a Global Synopsis for Distributed 
Finding Frequent Itemsets over Data Streams,” Submitted for publication. 
3. 碩士畢業論文 
[11] C.S. Chen and A.L.P. Chen, “Lifetime-based Acquisition Scheduling for Wireless Sensor 
Networks,” National Tsing Hua University, 2007. 
[12] G.R. Lin and A.L.P. Chen, “Adaptive Power-Saving Techniques for Wireless Sensor Networks 
based on Incremental Data Trend Analysis,” National Tsing Hua University, 2007. 
[13] J. Hsieh and A.L.P. Chen, “An Efficient Optimization Strategy for Query Execution over 
Streaming Sources,” National Tsing Hua University, 2006. 
[14] Y.K. Lu and A.L.P. Chen, “Mining Closed Frequent Subtrees over Data Streams,” National 
Tsing Hua University, 2006. 
[15] Y. C. Fan and A.L.P. Chen, “Sharing Aggregate Computations for Processing Multiple 
Regional Queries in Sensor Networks,” National Tsing Hua University, 2008. 
 33
[CM05]  G. Cormode and S. Muthukrishnan, "An improved data stream summary: the 
count-min sketch and its applications," J. Algorithms 55(1): 58-75 
[CMZ06]  G. Cormode, S. Muthukrishnan, and W. Zhuang, “What’s Different: Distributed, 
Continuous Monitoring of Duplicate-Resilient Aggregates on Data Streams,” Proc. 
IEEE Conference on Data Engineering, pp. 57-66, 2006. 
[CMZ07]  G. Cormode, S.Muthukrishnan, and W. Zhuang, “Conquering the Divide: Continuous 
Clustering of Distributed Data Streams,” Proc. IEEE Conference on Data Engineering, 
pp. 1036-1045, 2007. 
[CP06] J. Y. Chen, G. Pandurangan, and D. Xu, “Robust computation of aggregates in wireless 
sensor networks: distributed randomized algorithms and analysis,” IEEE Transaction 
on Parallel and Distributed System, vol. 17, no. 9, pages 987-1000, 2006. 
[CWY04]  Y. Chi, H. Wang, P. S. Yu, and R. R. Muntz, “Moment: Maintaining Closed Frequent 
Itemsets over a Stream Sliding Window,” Proc. IEEE Conference on Data Mining, pp. 
59-66, 2004.  
[DGG04]  A. Das, S. Gangule, M. Garofalakis, and R. Rastogi, “Distributed Set-Expression 
Cardinality Estimation,” Proc. International Conference on Very Large Data Bases, pp. 
312-323, 2004. 
[DLM02]  E. Demaine, A. Lopez-Ortiz, and J. I. Munro, “Frequency Estimation of Internet 
Packet Streams with Limited Space,” Proc. European Symposium on Algorithms 
(ESA2002), Rome, Italy, September 2002, pp. 348-360. 
[Dov99] M. J. Dovey, “An Algorithm for Locating Polyphonic Phrases within a Polyphonic 
Musical Piece,” Proc. AISB Symposium on Musical Creativity, 1999. 
[FC08] Y. C. Fan and A. L. P. Chen, “Efficient and robust sensor data aggregation using linear 
counting sketches,” Proc. IEEE Symposium on Parallel and Distributed Processing, 
pages 1-12, 2008. 
[FM85] P. Flajolet and G. N. Martin, “Probabilistic counting algorithms for database 
applications. Journal of Computer and System Science,” pp. 31, 1985. 
[FS82]  M. J. Fischer and S. L. Salzberg, “Finding A Majority among N Votes: Solution to 
Problem 81-5,” Journal of Algorithm, Vol. 3, Is. 4, 1982, pp. 362-380. 
[GDD03]  L. Golab, D. DeHaan, E. D. Demaine, A. López-Ortiz, and J. I. Munro, “Identifying 
Frequent Items in Sliding Windows over On-Line Packet Streams,” Proc. ACM 
SIGMOD Conference. on Management of Data, pp. 173-178, 2003. 
[GHP03]  C. Giannella, J. Han, J. Pei, X. Ayn, and P. S. Yu, “Mining Frequent Patterns in Data 
Streams at Multiple Time Granularities,” Next Generation Data Mining, 2003, pp. 
191-212. 
[GO03] L. Golab and M.T. Özsu, “Issues in data stream management,” ACM SIGMOD Record, 
2003. 
[HF00] J. Hellerstein, M. Franklin, S. Chandrasekaran, A. Deshpande, K. Hildrum, S. Madden, 
V.  Raman, and M.A. Shah, “Adaptive query processing: Technology in evolution,” 
IEEE Data Engineering Bulletin, 2000. 
