 I
Table of Content 
 
中文摘要......................................................................................................................III 
Abstract ........................................................................................................................IV 
1 Introduction.................................................................................................................1 
1.1 Background ......................................................................................................1 
1.2 Objectives ........................................................................................................2 
1.3 Outline of the report.........................................................................................3 
2 Literature Review........................................................................................................5 
2.1 Usability...........................................................................................................5 
2.2 Formal methods in Human-Computer Interaction...........................................6 
2.2.1 Finite State Machine (FSM) and Human-Computer Interaction ..........7 
2.2.2 What is Finite State Machine? ..............................................................8 
2.3 GOMS Model...................................................................................................9 
2.3.1 Strength of GOMS ..............................................................................10 
2.3.2 Limitation of GOMS........................................................................... 11 
2.4 Procedure systems in Nuclear Power Plants..................................................12 
2.4.1 Characteristics of CBPs ......................................................................14 
2.4.2 Operators and CBPs............................................................................16 
2.4.2.1 Display Formats .......................................................................17 
2.4.2.2 Functionalities..........................................................................17 
2.4.2.3 Navigation................................................................................18 
3 The hybrid framework of FSM-GOMS ....................................................................20 
3.1 Conceptual framework...................................................................................22 
3.2 The proposed framework ...............................................................................23 
3.2.1 Integrated prototyping and evaluation ................................................27 
3.2.2 Evaluation for generic applications ....................................................29 
3.2.3 Stakeholders involved .........................................................................32 
3.3 Comparison between conventional GOMS and FSM-GOMS.......................33 
4 An application of FSM-GOMS to a Computer-based Procedure (CBP) system ......38 
4.1 The research platform ....................................................................................38 
4.2 System model.................................................................................................42 
4.3 Structural and procedural analysis .................................................................42 
4.4 GOMS sequence generation ..........................................................................46 
5 Experimental evaluation of the CBP system.............................................................49 
5.1 The task ..........................................................................................................49 
5.2 Experiment I: embedded controls/parameters ...............................................50 
5.2.1 Results of Experiment I ......................................................................51 
 III
中文摘要 
 
 
可用性（usability）一直被視為提升品牌形象、產品價值及顧客忠誠度的方
法之一，然而過去的研究指出，可用性的評估常常因為資源的限制而被忽略，
而且愈趨緊縮的產品生命週期使得這個問題日益嚴重。此外，負責產品開發過
程不同層面的人員，也對可用性有著不同的看法。因此，如何將可用性方法，
在不佔用過多有限資源的前提下，整合進產品開發過程，便成了一個重要的課
題。 
本研究提出一個名為 FSM-GOMS 的整合模式，結合有限狀態機器（Finite 
State Machine, FSM）這個正規方法，及 GOMS（為 Goals, Operators, Methods, 及
Selection rules 的縮寫）這個人機介面模式。透過找出兩者的共通特色，本研究
提出一個整合這兩個方法的架構，並透過簡單的例子描述此架構。此外，為驗
證這個架構，本研究以一模擬電子化程序書的平台作為案例，討論及驗證該架
構之應用過程及實用性。在本研究中，該模擬平台亦作為以實驗法評估三個電
子化程序書設計項目的研究環境。 
從案例研討中發現，以本研究所提之整合 FSM 及 GOMS 的方法可找出單
獨採任一方法所無法顯現的問題。而以實驗法評估三個電子化程序書設計項目
方面，嵌入式控制及參數顯示的設計對時間績效有顯著改善，但在其他方面也
有其蘊涵。同樣是在分析電子化程序書系統，透過 FSM-GOMS 架構及實驗法，
可以得到不同的可用性見解。在未來要將 FSM-GOMS 架構的潛力完全發揮，
可將該架構實做成開發工具。 
    本研究為三年期計畫，前兩年研究成果有兩篇期刊論文發表註明於結論。 
 
關鍵字：可用性、有限狀態機器、GOMS、開發流程、電子化程序書 
 
 1
1 Introduction 
 
 
1.1 Background 
Usability is one of the most important factors that dictate the success or failure of 
a product. No matter how intricate the internal design of a product is, poor usability of 
the product will give a bad first impression when users encounter with the product. 
Such negative impression often hinders users’ acceptance of a product, lowers the 
perceived value of a brand, and prevents a casual customer from becoming a loyal 
patron. In addition, high level of interactivity has become a major commodity for 
products such as mobile phones, digital cameras, gadgets and software products, 
which explains the trend of the growing portion of code related to user interface 
(Canny, 2006; Myers & Rosson, 1992). The importance of usability has also been 
pointed out in several literatures pertaining to a plethora of products and systems (Cao, 
Zhang, & Seydel, 2005; Compaq, 1999; Kuo, Hwang, & Wang, 2004). 
 
Despite the importance of usability, practice of it is often neglected, not 
thoroughly done, or not institutionalized. This situation is due to several reasons, such 
as lack of managerial support, lack of usability understanding and knowledge, and 
resource constraints, among other reasons (Andre, Hartson, Belz, & McCreary, 2001; 
Boivie, Åborg, Persson, & Löfberg, 2002; Gunther, Janis, & Butler, 2001; W. Hudson, 
2001; Vredenburg, Mao, Smith, & Carey, 2002). Most of these problems attribute to 
one cause: resource constraints, such as time, money, and manpower (Rosenbaum, 
Rohn, & Humburg, 2000). The situation worsens when the schedules for new 
products become tighter due to a short product life cycle so that every couple months 
or so, a new product will be released for a company to remain competitive. 
Development teams have to race against time, and management teams have to strike a 
balance between feasibility and ideals. Hence less usability efforts therein. Moreover, 
people in charge of different aspects of a product development may have very 
different mindsets toward usability because of the different roles they play. For 
example, development people and usability people were shown to have different 
viewpoints regarding the necessity, current and future impact of usability (Ji & Yun, 
2006). Therefore, people in the field of usability must promote the awareness of the 
importance of usability, and find ways to introduce the methodology of usability into 
the process of development without incurring too much consumption of limited 
resources.  
 
 3
has its share of criticisms, such as tedious task analysis process, empirically 
determined parameters (Ivory & Hearst, 2001), and experimental problems (Greif, 
1991). The framework proposed in this paper aims at solving these problems by 
simplifying the process of employing GOMS, and by streamlining the process of 
incorporating it into the development process. 
 
The first goal of this research is to develop a framework that can embed usability 
evaluation into the design process. Such tight integration saves efforts and time, 
therefore cuts down costs. Design errors and better alternatives can be found at earlier 
stages of the design process. To achieve this goal, this research proposes a 
process-integrated framework that combines prototyping, evaluation, and feedback 
capturing. Formalism-based user interface modeling and GOMS style evaluation 
technique work in tandem as the corner stones of the framework. Such framework 
makes the evaluation of user interface design easier by speeding up GOMS analysis 
and model comparison, as well as by other benefits. The ability to conveniently 
capture structured data also paves the way for continuous improvement of user 
satisfaction via analyzing this great amount of data with methodologies such as Data 
Mining and other analytical approaches.  
 
The second goal of this research is to apply the aforementioned framework to a 
very important context: Computer-based Procedure (CBP) system. It’s very practical 
to apply the proposed framework to CBP systems since the use of operating 
procedures is an important measure for safety and operation management. The 
application of the framework to the said context also provides means to discuss, 
demonstrate, and validate the proposed framework via a case study. 
 
1.3 Outline of the report 
This report is organized in seven chapters. The first chapter presents the 
background and the objectives of this research, as well as the overall outline of the 
whole thesis. In Chapter 2, relevant literatures are reviewed, including usability, 
formal methods in Human-Computer Interaction (HCI), GOMS model, and procedure 
systems in Nuclear Power Plants (NPPs). In Chapter 3, the proposed framework is 
fully described with illustrative examples. Comparisons between the proposed 
framework and the conventional GOMS are also given in this chapter. Chapter 4 
details the application of the proposed framework to a CBP system. This chapter 
doubles as a case study to validate the proposed framework. In Chapter 5, the CBP 
system described in Chapter 4 is evaluated in two factorial experiments. Some aspects 
of CBP design are evaluated and discussed. In the last two chapters, discussions and 
 5
2 Literature Review 
 
2.1 Usability 
Usability is a term that has several meanings. ISO 9241 defines usability as “the 
extent to which a computer system enables users, in a given context of use, to achieve 
specified goals effectively and efficiently while promoting feelings of satisfaction”. In 
addition to general description of what usability is, several attributes of usability have 
also been proposed, as Table 1 summarized.  
 
Table 1. Attributes of usability 
z Effectiveness‡ 
The required range of tasks must be accomplished. 
z Learnability†‡ 
The system should be easy to learn. 
z Efficiency† 
The system should be efficient to use so that steady-state level of 
performance is possible. 
z Flexibility‡ 
The system should be adaptive to variation in tasks or environments. 
z Memorability† 
The system should be easy to remember so that learning effect would not 
be perishable. 
z Errors† 
The system itself should prevent users from making errors and should 
provide safe opportunities for users to learn from making errors. 
z Satisfaction/Attitude†‡ 
The system should be pleasant to use, and within acceptable levels of 
human costs in terms of tiredness, discomfort, frustration and effort. 
† Nielsen and Mack (1994) 
‡ Shackel (1991) 
 
 7
software/hardware engineering, control, reliability, safety, and many other disciplines, 
have been cultivating the solid and sound heritage of formal methods. 
 
Formal methods have been extensively applied to human-computer interaction 
(Harrison & Thimbleby, 1990) via complementing traditional evaluation techniques. 
If the model of the interaction or the user could be constructed, preliminary prediction 
about usability could be easily obtained. Lots of modeling techniques has been 
developed for different purposes. Hann, Veer et al. (1992) classify these approaches 
into four categories:  
 
1. Models for task environment, such as External-internal task mapping (ETIT) 
(Moran, 1983), 
2. Model for user knowledge, such as Action Language (AL) (Reisner, 1984) and 
Task-Action Grammar (TAG) (S. J. Payne & Green, 1986) 
3. Model for user performance, such as Goals, Operators, Methods, and Selection 
(GOMS) (Card, Moran, & Newell, 1983) 
4. Model for user interface, such as Extended Task-Action Grammar (ETAG) 
(Tauber, 1990) 
 
Harrison and Thimbleby (1990) argue that Human-Computer Interaction is a 
multidisciplinary field in need of formal methods for precise notations and 
mathematical methods. Even though the scope is limited in some way, it’s still 
worthwhile to use formal methods. Researchers think that formal methods have 
following practical values: 
 
(From Kieras and Polson (1985)) 
1. Possibility of simulations models using the formal representations  
2. Quantitative measures of user complexity resulting from simulation modeling 
3. Basis for the generation and evaluation of training materials and reference 
documentation. 
4. Description of the differences between experts and novices 
(From Parnas (1969)) 
5. Clear and concise notation and representation  
6. Served as a method to divide the development tasks 
7. Utilities for eliminating identical states, violation, and other improvement, 
such as algorithms for finding equivalent machine and machine minimization 
 
2.2.1 Finite State Machine (FSM) and Human-Computer Interaction 
 9
 
Figure 3. A finite state machine M shown in (a) matrix form, and (b) state chart 
 
 
2.3 GOMS Model 
The GOMS model was developed by Stuart, Thomas, and Allen in the early 
eighties, and was elaborately described in the book The Psychology of 
Human-Computer Interaction (Card et al., 1983). The model is based upon a 
psychological theory called Model Human Processor, which can be described by a set 
of memories and processors, and a set of principles. Model Human Processor is 
composed of three interacting subsystems: (1) the perceptual system, (2) the motor 
system, and (3) the cognitive system, each with its own memories and processors. A 
user is like an information processing system, using available and applicable 
processors and memories to execute a task. The execution of a task can be further 
broken into goals, operators, methods, and selection rules, each of which means: 
 
z Goals are a set of goals or particular states a user wants to reach. 
z Operators are the perceptual, motor, or cognitive operations that are required to 
be performed to reach goal states. 
z Methods are well-learned procedures that a user perfected. Methods reflect the 
detailed and exact sequence of subgoals and operators that can accomplish a 
 11
description is also useful for other non-evaluation purposes, such as online help 
system (Gong & Elkerton, 1990). Since the advent of GOMS, it has been extended 
and applied in many academic and real world situations (John, 1996; John & Kieras, 
1996; Judith Reitman Olson & Olson, 1990). Its impact on the field of 
Human-Computer Interaction is powerful. 
 
Extensions and applications of GOMS are wide and diverse. There are 
applications in highly interactive tasks (Peck & John, 1992), in telephone operator 
workstation selection using CPM-GOMS (Gray et al., 1993), in computed 
tomography interpretation system development using QGOMS (Beard et al., 1996), in 
text editing tasks using KLM (Card et al., 1983), and many others. Summaries of 
family of GOMS variants and their applications are available in literatures (John, 
1996; John & Kieras, 1996). Among these variants, three of them are hybrid in nature. 
That is, they add another technique to work with the conventional GOMS to enhance 
the value and applicability of either method alone. These three GOMS variants are 
summarized as follows. 
 
(1) CPM-GOMS (Gray et al., 1993) 
Original GOMS assumes that operators are performed serially. CPM-GOMS 
breaks this assumption by arguing that human processors are parallel in nature. 
The task used in the development of CPM-GOMS is the task of toll and 
assistance operator. Such task is highly parallel in nature, where eyes, hands, 
voice, and memory accessing all happen together. To model this task, Critical 
Path Method (CPM) is employed to construct the task analysis (Schweickert, 
1978), where actions of various processors over a span of time are denoted as 
a critical path graph. Then, the approximate performance time can be obtained 
using standard CPM calculation.  
 
(2) QGOMS (Beard et al., 1996) 
As its name implies, QGOMS is a quick hack of the GOMS model, with 
which simplification and reuse are emphasized. The task used in the 
development of QGOMS is the interpretation of computed tomography. The 
result of task analysis reveals that several subtasks are rather identical in an 
abstract level. So, the analysis of these subtasks is reused, and time required to 
perform the analysis is shortened.  
 
(3) NGOMSL (David Kieras, 1996) 
Complaining the lack of a detailed description of how to perform GOMS 
analysis, Kieras (David Kieras, 1996) wrote a guide for the rest of us. The 
author of this guide also extends GOMS by providing a more human-readable 
format of GOMS analysis, that’s the reason for the letters N and L in the name 
(i.e. Natural GOMS Language). This format is more suitable for its ancestor 
for documentation and help system (Gong & Elkerton, 1990; Mallen, 1996). 
 
2.3.2 Limitation of GOMS 
 13
approached from two aspects: (1) the technical accuracy of the procedure, and (2) the 
general design of the procedure. The technical accuracy of the procedures is ensured 
by scientists or engineers of related domains, while the general design issues should 
be addressed by Human Factor specialists. The general design issues include 
Human-Computer Interface, presentation formats, cognitive supports, and many other 
issues that facilitate the efficient and effective use of the operating procedure. General 
design issues are of interest in this research. 
 
Traditional operating procedures are paper based. They are usually bulky, 
become outdated very soon, and get dirty due to frequent uses. Thanks to advances in 
information technology, operating procedures are computerized and evolving into a 
better supporting role during emergency or abnormal operations. However 
computerized operating procedures are not perfect, either. For example, reading on 
Video Display Unit (VDU) is not as easy as it is on paper; the amount of information 
that can be legibly displayed on VDUs is limited. Even worse, using the computer 
system incurs cognitive and physiological loads. To make a CBP really useful, we 
must tackle the deficiencies of it.  
 
Operators play a role of supervisory controller in a modern control room. 
Cognitive tasks of an operator can be classified into primary and secondary tasks, as 
Figure 5 shows, where primary tasks include monitoring and detection, situation 
assessment, response planning, and response implementation. Secondary tasks include 
interface management, search, and communication. The operator interacts with the 
plant and automatic control system through the Human-System Interface, during 
which the cognitive system is taxed and the cognitive overload might occur as a 
consequence. Cognitive overload is caused by four types of causes: (1) too many 
information supply, (2) too many information demand, (3) the need to deal with 
multi-tasking and interruption, and (4) the inadequate workplace infrastructure (Kirsh, 
2000). In the demanding systems mentioned above, cognitive issues should be 
carefully considered during the design and implementation of the systems.  
 
 15
procedures instead of coming up with solutions in real time.  
 
While the nuclear power plants are shifting toward digitalization, the operating 
procedures are also transforming from paper-based procedures to computer-based 
ones. Such heavy reliance upon information technology makes CBPs an important 
factor of personnel performance and safety significance (J. O'Hara, Stubler, & 
Higgins, 1996; Stubler, Higgins, & O'Hara, 1996).  
 
Traditional paper-based procedures are identified to be inefficient in 
implementing the procedures, procedure design process, training, and maintenance (J. 
M. O'Hara et al., 2000). Several authors identified some features of CBPs that are 
important in addressing the inefficiencies of paper-based procedures (Barnes, 
Desmond, Moore, & O'Hara, 1996; Lipner & Rusnica, 1996; Teigen & Ness, 1994). 
Table 2 summarizes their findings. 
 
Table 2. Important features of CBPs in addressing the inefficiencies of paper-based 
procedures  
Procedure Implementation/Execution 
z Creating detailed record keeping on procedure implementation†§ 
z Sequence control and navigation‡§ 
z Place keeping in procedures when operators are in several procedures 
simultaneously or when they access support information, such as tables 
and charts§ 
 
Cognitive Support 
z General cognitive workload‡ 
z Monitoring plant parameters†§ 
 
Presentation 
z Context sensitivity‡ 
z A structured, consistent format§ 
z Clear, consistent logic statements§ 
z Variable level of details‡§ 
 
Procedure Management and Development 
z Design process support‡ 
z Management of Multiple procedures‡† 
z Facilitating the maintenance of procedures†§ 
 17
 
Focusing on the design of CBPs, researchers identified some characteristics that 
CBPs must possess. Most characteristics are direct answers for support of operation, 
while some are for safety and integration (Niwa et al., 1996; J. M. O'Hara et al., 2000). 
In this research, three aspects will be focused: display format, functionalities, and 
navigation. 
 
2.4.2.1 Display Formats 
Procedural contents are usually presented as text or as flowcharts and 
comparisons of these two formats revealed mixed results. Ware (2000) commented 
that a flowchart is often a poorer way of representing information than natural 
language-like pseudo code, for a graphical flowchart representation must be translated 
before it can be understood. However, the flowchart format could be helpful because 
of its ability to specify the sequence and relationships of procedure steps (Krohn, 
1983). Wright and Reid (1973) also summarized other benefits of flowchart format, 
including the reduced complexity and better distinguishability. 
 
Researchers also found that there is an interaction between display format and 
window size. Desaulniers, Gillan, and Rudisill (1988) compared flowchart and text 
formats displayed in a 6- or 12-line window. The performance deteriorated as the 
window size increased for the flowchart format, but for the text formats the 
performance improved. Such result suggested that the participants lost their place on 
the flowchart in a larger window capable of accommodating larger flowchart, while in 
the text formats, participants were given more context information with larger window. 
However, viewing information through the limited area of a display also incurs 
“keyhole effect” (Woods, Roth, Stubler, & Mumaw, 1990), which has been identified 
as a root cause of performance challenges (J. M. O'Hara & Brown, 2002). This 
problem could become worse with flowchart format, since boxes and links of a 
flowchart occupy more space than text formats do. To remedy the deficiency of 
flowcharts, a modified form of flowchart is used in the system called ImPRO (Jung, 
Seong, & Kim, 2004). In this system, all step boxes are arranged along the roll and 
extend in both horizontal and vertical directions. All step boxes in the flowchart are 
collapsible, expandable, and scrollable. Besides, flowcharts show only the abstract 
meaning, while detailed actions are shown in success logic trees for easier 
comprehension.  
 
2.4.2.2 Functionalities 
Operating procedures serve many purposes. From a technical perspective, the 
 19
related materials by just clicking. However, it’s the same feature that makes users lost 
during navigation.  
 
Several kinds of navigation aid have been proposed, such as Bookmarks, History, 
Back/Forward buttons that reside in a browser, or site map provided by a web site 
therein. However, not all navigation aid designs would fit every case. In a study by 
Padovani and Lansdale (2003), two navigation aids, bookmarks and site maps, are 
compared within different circumstances, and the results show that navigation aid is 
highly context-dependent. Cockburn and Jones (1996), after comparing a variety of 
navigation aids, also found that navigation facilities should base upon users’ need. 
While there is no previous study of navigation aid for CBPs, this research will 
investigate this issue. 
 
 21
 
Figure 6. The concept maps of GOMS and FSM 
 23
 
The four layers delineated in the diagram are the core concepts of FSM-GOMS. 
It’s postulated that, when interacting with a system, user’s mental model and 
performance are mainly constrained by the system model and the capabilities of 
human beings. Instead of measuring individual time data of seemingly trivial basic 
actions, it’s more practical to use the actual time data obtained from users’ interaction 
with the system. In FSM-GOMS, FSM can be used as a data collection model to keep 
record of time data and organize it better. It can also generate task sequences needed 
by GOMS analysis and approximation.  
 
3.2 The proposed framework 
To model a user interface, one can use two kinds of notation, matrix and diagram, 
for denoting a FSM model. Figure 8 is a very simple FSM model of a flashlight with 
an on/off switch. In this figure, both notations are provided. Set S and T are the sets of 
all states and events, respectively. When a user picks up this flashlight, it’s in off state. 
A push_on event will put this device into on state. 
 
 
st
at
es
next 
states
pu
sh
_o
n
pu
sh
_o
ff
Figure 8. FSM model of a flashlight denoted in matrix and diagram. 
 
 
To commence the description of the proposed framework, some terms must be 
defined for the sake of clarity.  
 
(1) A system model is the formal representation of a system, by which the system’s 
behavior is fully specified.  
(2) A task instance is the formal representation of a task, by which the required 
sequence of states and events to fulfill the task is fully described. 
 25
First step in the framework is to build the system model in FSM, by which the 
system behavior is fully described. Unlike the procedural and textual description of 
GOMS, system behavior described in this way is structural. For example, part (a) of 
Figure 10 is the system model of a wizard-type interaction where one goes through a 
series of guided steps to accomplish a task. There are four screens to be displayed, 
one at a time. Users can go from A through D forward or backward. In screen B, one 
can also choose to bypass screen C and go to screen D directly. In each screen, one 
can always go to the exit state by entering the screen X. 
 
With the system model specified, analysts can use the model to generate task 
instances of interest. For example, the task instance can be A-B-D-X or A-B-C-D-X, 
as shown in part (b) of Figure 10. The ending state of this task instance is screen X, 
which marks the completion of this task. The states (i.e. A through D and X) and 
events (i.e. arrows) are subsets of the system model, and can be derived from it. The 
task instance also represents a perfect implementation of the task, because following 
the exact sequence of the task instance, one can accomplish the task without any 
redundant step. Such ideal implementation is analogical to the expert-level, error-free 
performance of GOMS analysis. 
 
 
Figure 10. The (a) system model and (b) a task instance of a wizard-type interaction. 
 
 
With the task instance in hand, conventional GOMS analysis can proceed. Please 
note that the description of this task is generated, and one can generate an instance of 
each individual task if so desired. This is a very different approach from that of 
 27
Figure 11. Samples of user’s behavior 
 
One major advantage of structuring the captured events around the system model 
is the capability of building a profile of the system and of a user. As mentioned before, 
it’s hard to estimate the time it takes to do a primitive operations in a varying context. 
With the accumulation of event capturing data, time distribution of each event can be 
obtained, which makes it easier to have a time parameter estimation of an operator in 
a given context. Time parameters of higher level operators can also be obtained by 
this method, which are otherwise hard if you have to conduct experiments to get the 
parameters for operators unreported before. 
 
By combining the time data and the model of user’s behavior, analysts can also 
establish the profile of a user interacting with the system. What is particular hard and 
time-consuming for one user might not be as hard for another. By inspecting user’s 
profiles, analysts can find ways to make the system easier for average users, not just 
professional ones. 
 
3.2.1 Integrated prototyping and evaluation 
In the tight schedule of the development of information systems, keeping up with 
the ever-changing needs of the users is a hard job. To cope with such problem, 
prototyping is a widely adopted technique in managing the development process. 
Although prototyping serves different goals and has many types (Lichter, 
Schneider-Hufschmidt, & Zullighoven, 1994), current integrated development 
environments (IDE), such as Microsoft® Visual C++ or Borland® C++ Builder, only 
support top-down visual user interface construction. Such approach of prototyping is 
less specific and error-prone (Horrocks, 1999). Previous studies also reveals that 
while the prototyping method saved costs and produced easier-to-use products, the 
specifying method produced a more coherent and easier-to-evolve design (Boehm, 
Gray, & Seewaldt, 1984). Another problem is with the evaluation of the user interface. 
As mentioned in previous sections, user interface is very important to the success of 
information systems. However, none of major IDE players have evaluation features in 
their user interface construction environments.  
 
Figure 12 depicts the architecture of the integration of prototyping and 
evaluation. The façade of the system is constructed with visual user interface 
construction environments, while the behavior of the user interface is modeled in 
FSM. To integrate GOMS style evaluation into the model, each transition in the model 
that involves user actions is given its corresponding GOMS operators. User interface 
 29
 
 
 
 
Field Description 
from_state The state from which the 
transition happens. 
to_state The state to which the transition 
happens. 
transition_code The code of the transition. 
input_name The input that triggers the 
transition. 
condition The conditions that are satisfied 
when the transition happens. 
time_of_occurrance The time the transition happens. 
goms_operators The GOMS operators of the 
transition 
Table 4. Fields of the database table for Figure 12 
 
The statechart-based model also allows some forms of automatic checking and 
evaluation of the user interface behavior. For example, cost of knowledge (Thimbleby, 
2004; Thimbleby et al., 2001), and graph algorithms for finding shortest-path and 
reachable/unreachable states. Other qualitative model comparison methods are also 
applicable (Degani & Heymann, 2002; David Kieras & Polson, 1985), but a 
quantitative model comparison method combining GOMS is proposed in this 
research.  
Since fragments of the GOMS hierarchy are readily available in each transition, 
generating GOMS sequence for a task is a lot easier than traditional pure GOMS 
approach. This would save time and effort while conducting GOMS analysis. In 
addition, automatic checking and evaluations also make possible early findings and 
treatments of user interface problems before the system is tested by actual users. The 
results of these evaluations and GOMS analysis provide valuable feedback for the 
improvement of the system. 
 
3.2.2 Evaluation for generic applications 
In previous section, a development approach combining prototyping and 
evaluation is proposed, which is applicable for projects started from scratch. The user 
interface has to be modeled in FSM to harvest the said benefits. What if the 
 31
 
Figure 14. Windows, sub-windows, and elements are arranged in a hierarchy 
 
Once the messages and the hierarchy are obtained, they are stored in a database. 
GOMS operators are then given to each distinctive message-destination pair, so that 
the generation of GOMS sequences is more efficient due to higher level of reuse. 
After this stage, the GOMS sequence for a certain task can be fetched from the 
database. By applying GOMS analysis to the obtained data, improvements or 
evaluations to the system can be obtained. This approach is easier than pure GOMS 
method. In addition, with a large amount of data in the database, other approaches, 
such as Data Mining, can be applied to find other trends that are otherwise hard to 
obtain. Table 5 shows the fields of the database table of this architecture. 
 
 
Figure 15. Architecture of the evaluation of generic applications 
 
 
Field Description 
component_title The title of the component that 
the message happens. 
component_window The window within which the 
component resides. 
 33
system, because for ordinary users, the user interface is the system. 
 
 
 
3.3 Comparison between conventional GOMS and FSM-GOMS 
Comparatively, the proposed FSM-GOMS framework has several advantages. 
FSM-GOMS models a system first, and then uses the system model to generate task 
instances of interest, while a GOMS analysis represents only one particular task. It 
would be painstaking to do GOMS analysis for several tasks if you have to dissect 
each one of them. The knowledge type of the FSM-GOMS framework is structural, 
while that of GOMS is procedural or “how-to-do-it”. In other words, the modeling 
target of the FSM-GOMS framework is the structure of a system while that of GOMS 
is a specific task.  
 
FSM-GOMS also has its share of drawbacks. For beginner analysts, building a 
system model in FSM can be intimidating although it is fairly easy to learn and is an 
industry standard for modeling hardware and software. Also, the mainly pictorial and 
mathematical notation can grow out of proportion if only pen and paper are available 
tools. A proper tool supporting such notations would be necessary. Table 6 is a 
summary of the comparison between conventional GOMS and the proposed 
framework. 
 
As can be seen from the table, some disadvantages of one are advantages of the 
other. For example, the non-generative nature of the conventional GOMS is remedied 
by incorporating FSM. On the other hand, the lack of detailed dissection of operations 
specified in FSM is addressed by the notion of GOMS. The combination of the two is 
mutually complementary and enhancing. Differences in other aspects, such as goal 
structure, representation, and output formats are summarized in Table 6.
 35
Assumptions From Card, Moran et al. (1983) 
 The human mind is an 
information-processing system 
 This human 
information-processing system is 
modeled as Model Human 
Processor, or MHP 
 MHP can be described by (1) a set 
of memories and processors 
together with (2) a set principles of 
operation 
 User interaction is a process of 
problem solving in a state-based 
fashion. 
 System behavior, task instances, 
and user’s behavior are formally 
represented. 
 Task instances and user’s 
behavior are constrained by the 
system model. 
 Each permissible task instance 
can be generated by the system 
model, while user’s behavior can 
be obtained via real-time logging 
of user’s interaction with the 
system, or via empirically built 
user simulation model. 
Advantages  A tried-and-tested method 
 A school of variants and 
applications, such as QGOMS, 
CPM-GOMS, NGOMSL, and etc. 
 Abstraction is allowed by higher 
level operators (as in NGOMSL). 
 The specified interaction interface 
can serve as the basis for coding, 
thus ideal for bridging the gaps 
between interface 
design/evaluation, specification, 
and coding. For example, 
consider the software 
 37
tasks are generated. 
Goal structure  Goals are enumerated and 
explicitly represented, which can 
be decomposed further into 
operators. 
 Goals are formulated as states, 
which are to be reached via a 
certain sequence of states and 
events. 
Knowledge 
type 
 “How-to-do-it” or procedural 
knowledge 
 Structural knowledge 
Representation  Textual  Pictorial or matrix; Generated 
task instances can be pictorial or 
textual 
Outputs  A step-by-step description of 
certain task 
 Performance calculation and 
approximation  
 Other qualitative analysis relying 
upon expert inspection 
 A model capable of generating all 
permissible task instances 
 Based upon the generated 
sequence, the corresponding 
GOMS analysis can be conducted 
 Comparison of path length and 
path cost 
 A framework for gathering time 
and frequency data. 
 Other qualitative or quantitative 
analysis by inquiring into the 
gathered data 
 39
Contents stored on SimCBP are accessed through CBP viewer, while SimPlant is 
controlled or monitored via Plant Control. When operating in embedded 
control/parameter mode, SimCBP can replace the role of Plant Control in that the 
content of a procedure also have relevant plant parameters and controls embedded in 
it. Plant operators will not have to switch their attention back and forth between the 
screens of the control system and the procedure system. Another configuration of 
SimCBP is the availability of navigation aid. It’s inevitable for plant operators to refer 
to more than one procedure when dealing with a situation. To facilitate this action, 
SimCBP can be configured to keep track of visited procedures and provide a list of 
those visited so that one can go back to where left undone and continue the task.  
 
An annotated sample screen of SimCBP is shown in Figure 17. The flowchart 
used in SimCBP is that of a simplified form, where only abstract meaning of each step 
is denoted in the flowchart box and the detailed description of that step is placed in a 
rectangle to the right. In each step, the operator follows the detailed description to 
control or monitor the embedded controls or parameters accordingly. The argument 
for such simplified flowchart is that placing detailed description inside the flowchart 
box would waste too much screen space. Figure 18 and Figure 19 show two other 
configurations of SimCBP. When the operator finishes a step, he or she can advance 
to the next step via “Confirm” button. Redundant coding scheme is used to 
differentiate finished steps from others. Finished steps are distinguished by the dark 
blue solid border lines, while unfinished and unused steps are marked with the light 
blue dotted border lines. Currently active steps can be easily discriminated by the 
rotating circles and flashing dots on the left side. The system will also record each 
visited procedures in the navigation aid list box, through which the operator can jump 
to any visited procedure via clicking on an entry.  
 
The system is designed to be configurable to accommodate the factors 
considered in this research. The first factor is the presence of simplified flowchart. 
When the simplified flowchart is removed, only the rectangles of detailed description 
will be shown in the procedure content panel. The second factor is the presence of 
embedded controls/parameters. When operating without embedded 
controls/parameters, the operator has to resort to Plant Control to control or monitor 
the plant. An annotated screen of Plant Control is shown in Figure 20. The third factor 
is the presence of navigation aid. If the system is configured as not having navigation 
aid, the operator will have to browse or search for a procedure when it is necessary to 
go back to previously visited one. 
 
 41
 
Figure 19. A screen shot of SimCBP with text only display format. Embedded controls/parameters, 
simplified flowchart and navigation aid panel are configured to be nonexistent 
 
 
 
Figure 20. A screen shot of Plant Control 
 
 
 
 
 43
dwell in two displays and have their own dedicated input devices. In this 
configuration, plant operators will have to switch back and forth between these two 
systems and such activity is quite frequent. Each time a switch occurs, plant operator 
will have to: 
 
z Turn his or her head to the system 
z Home to the input device of that system 
z Retrieve the name of the panel from the short-term memory that instructed 
by the procedure 
z Locate the panel 
z Do as instructed by the procedure 
z Turn his or her head to the other system 
z Home to the input device of that system 
 45
As we can see from this breakdown, it’s a very costly operation that involves 
many motor, memory, and cognitive operators. Therefore, it is preferable to embed 
relevant controls and parameter displays in the content of a procedure when 
reduction of performance time is an important issue.  
 
Another noteworthy part of the system model is the availability of navigation 
aid. Without navigation aid, operator has to do the following to go back to the 
procedure left undone: 
 
z Click the Browse button (motor operation) 
z Recall last procedure (memory operation) 
z Locate last procedure entry (visual search) 
z Click the procedure entry (motor operation) 
 
While in the configuration with navigation aid, plant operator only has to click 
on the topmost item of the visited procedure list, which requires only a very 
straightforward visual search and a mouse click. Please note that no attempt is made 
to do the estimation of time, because there are high level operators and operators 
haven’t been reported before in similar context. 
 
From the system model shown in Figure 21, analysts can generate task 
instances from it. An example task instance from the previous research is shown in 
Figure 22. And when a user performs the task prescribed by this task instance, user’s 
behavior is established. For example, there were many times of failure when users 
were lost while attempting to find their way back without the help of navigation aid. 
They had to correct their mistakes by finding out the correct ones, hence the 
sequence required to finish the task was lengthened, as illustrated in Figure 23. 
These redundant steps may signal a user in need of help, a routine task, or a system 
in need of redesign. 
 
 47
As mentioned in Chapter 3, GOMS sequences can be generated by traversing 
the model. Figure 24 is the result of such generation. The goal structure is first 
obtained by enumerating the states whose purposes are handling alarms via 
implementing procedure contents. Actual implementation of each procedure is 
further parameterized, but the further detail of the implementation is left out on 
purpose. To return to a procedure that is left unfinished, two methods are available. 
One can select the unfinished procedure from the Browse screen, or choose the 
topmost item in the list presented by navigation aid. 
 
 49
5 Experimental evaluation of the CBP system 
 
In this study, we hypothesized that the participants using a procedure system 
with embedded controls/parameters would outperform those using a procedure 
system with separate display for manipulating the plant. We also hypothesized that 
the presence of the navigation aid of the recently used procedures would be a great 
improvement since it reduces the required amount of mouse clicks and alleviates the 
needs to memorize the track for backtracking. For the display format, it’s very hard 
to establish a hypothesis since most previous studies revealed mixed results. 
However, this study considered a form of simplified flowchart to see how well it 
performs. Since the design of embedded controls/parameters is hypothesized as a 
great improvement, it is evaluated in Experiment I in isolation. If this design is 
significant, it will be used in Experiment II within which the other two factors are 
evaluated. 
 
5.1 The task 
Currently, the research platform contains a simplified model of three 
subsystems and a small set of procedures for this model. With the aid of SimCBP, 
each participant is required to handle three emergent conditions. The occurrence of 
these conditions will be caught by SimCBP and a message of alarm and designated 
procedures will be shown on the screen. Therefore, three major procedures will be 
needed to handle the conditions. Only one of the procedures calls other four 
sub-procedures, which makes to a total of seven procedures with about 40 steps.   
 
The task used in this research is extracted and simplified from real operating 
procedures of a nuclear power plant. Briefly after the task starts, the first alarm will 
show up, indicating the need to execute the procedure 502.1. Since procedure 502.1 
contains references to procedure 302.1, 302.2, 302.4, and 302.3, sequentially, it’s 
necessary to dig into those sub-procedures (that is, 302.1 to302.4) and go back to the 
main procedures (that is, 502.1) when those sub-procedures are finished. When an 
arbitrary sub-procedure is still in the execution, a second alarm of higher priority 
will be raised, indicating the need to postpone the current active procedure and 
handle the new alarm immediately. The case of the third alarm is similar to the 
aforementioned, and the overall structure of the experimental task is shown in 
Figure 25.  
 51
is quite the same. In addition, they don’t have any experience of working with the 
system used in this study.  
 
Each participant was randomly assigned to one of the two groups, the group 
with or without embedded controls/parameters. After the practice period, they were 
asked to handle the emergent conditions using SimCBP and Plant Control. During 
the course, two dependent variables, the amounts of time (in seconds) taken to finish 
handling all conditions, and the count of error (in times) were recorded. At the end 
of a trial, a questionnaire was administered to the participant to learn their opinions 
about the system. Each participant was paid with 300NTD for their participation.  
 
5.2.1 Results of Experiment I  
In Experiment I, the design of embedded controls/parameters and the design of 
separate controls/parameters were compared. Figure 26 shows the box-whisker plot 
of the two groups, where the group using the embedded design outperformed the 
group using the separate design. The analysis of variance of these two groups 
indicated that there was a significant difference in mean performance time (in 
seconds) between these two designs (F1,22=121.22, p << 0.01), as Table 7 shows. As 
to the error they made, there was no significant difference, as Table 8 shows. It can 
be observed that during the experiment, every participant in the second group has to 
refer to SimCBP and Plant Control back and forth to accomplish the task, which is 
not the case for the participants in the first group. Although spending much more 
time in cross-referencing to Plant Control, participants in the second group 
developed a better knowledge of the hierarchical composition of the simulated plant 
than those in the first group did. Such results have practical implications for CBP 
and training material design. 
 
 53
control system complained about the need to alternatively look at two VDUs. 
However, according to the observation of the way participants used the system, they 
tend to developed better memorization of the procedure content and the control 
system since they often rehearsed the parameters or controls to be observed or 
manipulated while they were using the control system. 
 
5.2.2 Discussion of Experiment I  
Embedded controls/parameters design is advantageous because it’s easier to 
manipulate the value of a parameter and to compare it with the value designated in 
the procedure steps. Similar arguments were also proposed for interactive computer 
systems (Nickerson, 1999). In addition, integration of information is beneficial for 
operations in time-critical incidents (Blandford & Wong, 2004). High perceptions of 
ease of use, as affected by the interaction style or directness of interaction, also play 
a positive role in users’ adoption of computer technology (Wiedenbeck & Davis, 
1997). Although easier to use, embedding controls and parameters in the procedure 
content might be a design and maintenance headache due to the increased software 
complexity and signal traffic. Such design might challenge the software reliability 
and the network infrastructure. Research also indicates that embedded design might 
inadequately confine the operator’s scope of information gathering to those provided 
by the procedure system (Mosier et al., 1992). So, is it worthwhile to use the 
embedded controls/parameters? Based upon the result of this experiment, we think 
this feature is better designed as configurable and has to be context-dependent. For 
tasks that are time-critical, embedded controls/parameters design is an obvious 
choice. The display screens that are related to operating procedure steps could be 
opened automatically in case the operator needs them, where the relatedness could 
be inferred from the causal structure of the system or by other means. On the other 
hand, when this CBP system is used for training purpose, controls and parameters 
should be separate from the procedure system. The trainee has to follow the 
instruction of the procedure and manipulates or observes accordingly through a 
separate control system (like Plant Control in this research). Such settings provide 
the trainee with the opportunities to gain hands-on learning of the hierarchy used in 
the control system. It’s important for the operator to understand not only the actual 
hierarchy, but also the different abstractions of the systems, because display screens 
in the control system might follow some abstraction scheme such as Ecological 
Interface Design (Vicente & Rasmussen, 1992). Operating via a procedure system 
with separate controls and parameters, although takes longer time, gives the operator 
chances to comprehend the abstractions put forth by the designers of the system. It 
encourages operator to reflect and find relevant components of the system, which in 
 55
not significant (F1,22=1.282, p >> 0.01), neither. However, the effect of navigation 
aid on error is significant (F1,22=53.166, p << 0.01). Table 9 and Table 10 
summarized the result of the analysis of variance. 
 
Source 
Sum of 
Squares
df
Mean 
Square
F P
Within-Subject  
Display format 59.25 1 59.25 .015 .904
(Display format * Navigation aid) 567.77 1 567.77 .142 .710
Error 88018.46 22 4000.84  
Between-Subjects  
Navigation aid 3124.882 1 3124.882 1.282 .270
Intercept 3694201.84 1 3694201.84 1515.63 .000
Error 53622.95 22 2437.41  
Table 9. ANOVA table of the performance time (in seconds) of Experiment II 
 
 
Source 
Sum of 
Squares
df
Mean 
Square
F P
Within-Subject  
Display format 1.69 1 1.69 .537 .471
(Display format * Navigation aid) 1.69 1 1.69 .537 .471
Error 69.13 22 3.14  
Between-Subjects  
Navigation aid 221.02 1 221.02 53.166 .000
Intercept .02 1 .02 .005 .944
Error 91.46 22 4.16  
Table 10. ANOVA table of the count of error of Experiment II 
 
 
After Experiment II, questionnaires were administered to the participants to 
elicit their preferences of display formats with respect to the understanding of the 
relationship among steps and to the understanding of the step meaning. The result of 
their choices is summarized in Table 11. Twenty-three participants thought the 
simplified flowchart does help them comprehend the relationship among procedure 
steps. However, when trying to understand the meaning of a step, the simplified 
flowchart seems to be underused. In the questionnaires, participants were also asked 
 57
 
Figure 27. Combined mean performance time (in seconds) of the between-subject groups of 
Experiment II 
 
5.3.2 Discussion of Experiment II 
Previous researches on the use of flowchart in the procedure content have 
reported both positive and negative results. Some commented flowchart is inferior to 
natural language-like pseudo code (Ware, 2000), and the space inefficient graphics 
of flowcharts on the limited area of a display would make worse the “keyhole 
effect” (Woods et al., 1990). However, other researchers regarded flowchart as 
beneficial for its ability to reduce complexity and to clarify the sequence and 
relationships of procedure steps (Krohn, 1983; Wright & Reid, 1973). However, in a 
procedure system powered by information technology, it’s possible to embed the 
logics of a flowchart into the procedure system so that via operating the procedure 
system will guide you through the right path. Our research platform has such design, 
which also partially explains why the flowchart is less used by our participants. It 
seems that there is plenty room for flowchart to improve, especially with the help of 
other new techniques. The collapsible, expandable, and scrollable flowchart of 
ImPRO (Jung et al., 2004) is an effort toward this direction. However, it’s still a 
question whether this kind of dynamic flowchart would incur cognitive penalty or 
not, since the operator has to collapse, expand, or scroll the flowchart during the 
operation. In this research, we took a conservative approach to adopt a form of 
simplified flowchart instead of a dynamic one, but the result is also mixed. In the 
future, we will evaluate a map-like and zoomable interface with an overview for 
 59
6 Discussion 
 
6.1 General discussion 
The proposed FSM-GOMS framework and conventional GOMS are 
complements to each other. FSM-GOMS framework begins with the modeling of a 
system in a formal notation, which is followed by generating task instances and 
building user’s behavior model. With all of these in hand, GOMS can come into play 
for the comparisons and analysis of task instances or users’ behavior. On the other 
hand, GOMS provides FSM with detailed breakdown of a path, which is critical in 
estimating the real cost of an operation. For example, in the case study mentioned 
before, two steps (vertex) are required if navigation aid is not in place, while only 
one step is required if navigation is. It doesn’t seem to be a far cry from each other, 
only one step difference. However, if we break the steps down, the former requires 
four operators, and the latter about two. We say ‘about two’ because the kind of 
visual search involved in the latter configuration is simplistic in that users only have 
to look for the topmost item in the list of visited procedures. So, it’s fair to say that 
FSM-GOMS framework can provide analysts with a macro view of a system and 
tasks that the system can carry out with the involvement of users, while GOMS can 
provide a micro view of operations worthy of further dissecting.  
 
Unlike conventional GOMS studies, we didn’t attempt to sum the time 
parameters of each operator to obtain an approximation of performance time. Instead, 
we used those operators as “placeholders”. We could have replaced them with data 
from previous researches and done the calculation since we have the list of 
operations, but we are not able to ensure that those data are applicable in our context. 
Let alone the fact that the time parameters of some operators are not available. In 
addition, adding up these time parameters leads to adding up variations of them. For 
a system of variable reaction time, which is very common in a network-connected 
environment such as our research platform, it’s not easy to distinguish which 
variation belongs to which. Versatility of users and conflicting microgoals (Greif, 
1991) also justifies the use of placeholders in this research. All those being said, 
approximation of performance time still is a very useful feature and should be used 
when aforementioned conditions are insubstantial. 
 
When examining the structure of a system, task instance, or user’s behavior, 
analysts should keep in mind that the context of use must be considered. For 
instance, in designing systems for learning, ease of use may not be appropriate 
 61
systems. The statechart modeling of user interface can serve as a basis of formal 
checking, as well as a communication vehicle of different parties involved in the 
development. Such modeling can also be used to structure the logic of user interface 
codes. Another important implication of this framework is the simplified process of 
applying GOMS. Through assigning GOMS sequences to the transitions of the 
statechart model of a user interface, the hierarchy and time approximation can be 
easily derived from it. 
 
As to systems that are not developed in-house, the proposed framework 
provides a convenient way to gather usage data for further evaluation purpose. Such 
concept comes handy when one has more than two system vender products to 
choose from. Since these products are respective venders’ private properties, there is 
slim chance to access the logics of their products to inject codes for evaluation 
purposes. One has to use video recording or other manual techniques to gather 
evaluation data, which is very time-consuming and impractical. The concept 
proposed in the framework is a convenient way to capture usage data during the 
course of interacting with the system. 
 
Since usability is one of the most important issues that dictate the success or 
failure of products, no matter the system is being developed in-house or bought from 
other venders, such framework has practical value for improving the quality of 
information systems in the long run. 
 
6.3 Experimental evaluation 
In this study, we have conducted laboratory evaluations of display formats, 
embedded controls/parameters, and navigation aid in the design of a computer-based 
procedure system. Two simulation systems, SimCBP and SimPlant, are developed to 
be the research platform of this study. These two systems follow a client/server 
scheme and are network-connected. In addition, both systems are configurable so 
that factors of interest can be manipulated.  
 
The results show that the design of embedded controls/parameters has a clear 
advantage over the design of separate controls/parameters when performance time 
and ease of use are the most important issues. However, the embedded design has its 
disadvantages of limiting operator’s scope of information gathering and is harder to 
develop and maintain. On the contrary, the design of separate controls/parameters, 
although takes more time to operate, helps the operator to comprehend the actual or 
 63
Analyzing the effect of presentation format is not possible with the proposed 
framework unless the whole process of vision is fully demystified and measured. It’s 
also arguable and questionable whether it’s worthy of the effort to model the process 
of visual perception and cognition for the sack of counting length and time 
approximation. In this case, experimental study shines. The experiment described in 
Chapter 5 revealed that display format was not significant in terms of performance 
time and error, yet subjectively, participants preferred flowchart for the 
comprehension of the relationship among procedure steps, while text format was 
preferred for the understanding of the meaning of procedure steps. 
Surprisingly, navigation aid was not found to be significant regarding 
performance time in our experiment, although in Chapter 4, it was found that more 
mental and motor steps were involved if navigation was not in place. The larger 
amount of mental and motor steps can justify the significant effect of the navigation 
aid on error because those extra steps tolled our cognitive resources. 
Like GOMS, the proposed framework combing FSM and GOMS is not to 
replace traditional usability methods, but to complement them. There are aspects that 
cannot be addressed by the framework where other methods need to come into play. 
Chapter 4 and Chapter 5 demonstrated such interesting symbiosis. 
 
 65
FSM-GOMS framework can only reveal the behavioral aspects of the system. This 
is due to the fact that the framework relies heavily upon the notation of FSM. This 
deficiency must be augmented by other methodologies. Secondly, to produce the 
initial GOMS sequence for basic operations in an interactive system, expert judges 
or other prototyping techniques, such as paper mockup or storyboarding, are still 
needed. Thirdly, with the growing diversity and variety of interaction styles, the 
applicable domain of FSM-GOMS regarding user interaction grants further 
exploration. Although standard user interface elements can be adequately modeled 
using FSM, it’s still questionable whether or not it can model new interaction styles 
such as multi-touch, gesture-based interaction, and other novel interaction styles. 
 
There are several implications pertaining to this research. Although the 
framework is about the usability issues of a system, it uses the formalism that 
designers and engineers also use, as mentioned before that FSM is a common way of 
specifying interactive systems. By using this notation, it’s easier to connect the 
stages of design, implementation, and evaluation. Usability won’t be left out since it 
is part of the process. It’s also valuable to obtain profiles of a system and users since 
it can be the basis for continuous improvement and for new design. Furthermore, 
these profiles and the structure of the models invite other analytical methods not 
mentioned in this paper. So, the future work of this framework is to extend the 
applicability of the framework and to build up a development toolset that facilitate 
its use. 
 
As to the future work of the research of computerized procedure systems, it is 
plausible that, with proper infrastructure, we can also explore other possibilities to 
enhance some operations that require operators to check facilities on site, such as 
portable procedure system terminals with wireless connection to the main procedure 
system. Location-aware facilities can also shorten the access time by pre-fetching 
procedures and data relevant to a specific site. However, just as important as 
innovation, the investigation of the positive and negative effects of these new 
designs should be thoroughly conducted. 
 
In summary, the importance and contributions of this research can be viewed 
from four perspectives. 
(1) Theoretical perspective: Both GOMS and FSM have their own 
shortcomings when applied alone to HCI. The development of the proposed 
framework complements the theoretical foundation of GOMS model via 
extending it with formal methods, within which an additional layer will be 
 67
References 
 
Andre, T. S., Hartson, H. R., Belz, S. M., & McCreary, F. A. (2001). The user action 
framework: a reliable foundation for usability engineering support tools. 
International Journal of Human-Computer Studies, 54(1), 107-136. 
Barnes, V., Desmond, P., Moore, C., & O'Hara, J. (1996). Preliminary review 
criteria for evaluating computer-based procedures (BNL Technical Report 
E2090-T4-2-9/96). Upton, NY: Brookhaven National Laboratory. 
Baumeister, L. K. (2003). A Comparison of Tools for Building GOMS models. Paper 
presented at the ACM CHI'2000, The Hague, Amsterdam. 
Beard, D. V., Smith, D. K., & Denelsbeck, K. M. (1996). Quick and Dirty GOMS: A 
Case Study of Computed Tomography Interpretation. Journal of Human 
Computer Interaction, 11, 157-180. 
Blandford, A., & Wong, B. L. W. (2004). Situation awareness in emergency medical 
dispatch. International Journal of Human-Computer Studies, 61, 421-452. 
Boar, B. (1984). Application Prototyping: A Requirements Definition Strategy for 
the 80s. New York: John Wiley & Sons. 
Boehm, B. W., Gray, T. E., & Seewaldt, T. (1984). Prototyping vs. specifying: A 
multi-project experiment. Paper presented at the The 7th International 
Conference on Software Engineering, Orlando, Florida, United States. 
Boivie, I., Åborg, C., Persson, J., & Löfberg, M. (2002). Why usability gets lost or 
usability in in-house software development. Interacting with Computers, 
15(4), 623-639. 
Brun, P., & Beaudouin-Lafon, M. (1995). A Taxonomy and Evaluation of 
Formalisms for the Specification of Interactive Systems. Paper presented at 
the HCI '95, Huddersfield. 
Burns, C. M. (2000). Navigation strategies with ecological displays. International 
Journal of Human-Computer Studies, 52, 111-129. 
Byrne, M. D., Wood, S. D., Foley, J. D., Kieras, D. E., & Sukaviriya, P. N. (1994). 
Automating interface evaluation. Paper presented at the Conference on 
Human Factors in Computing Systems, Boston, Massachusetts, United 
States. 
Canny, J. (2006). The future of human-computer interaction. ACM Queue, 4(6), 
24-32. 
Cao, M., Zhang, Q., & Seydel, J. (2005). B2C e-commerce web site quality: an 
empirical examination. Industrial Management & Data Systems, 105(5), 
645-661. 
 69
and Where to Sell User-Centered Design into the Development Cycle.   
Retrieved 9/6, 2006, from http://www.ovostudios.com/upa2001/surf.htm 
Haan, G. D., Veer, G. C. V. D., & Vliet, J. C. V. (1992). Formal modelling techniques 
in humancomputer interaction. In G. C. v. d. Veer, S. Bagnara & G. A. M. 
Kempen (Eds.), Cognitive Ergonomics: Contributions from Experimental 
Psychology, Theoretical Issues (pp. 27-67). Amsterdam, The Netherlands: 
Elsevier Science Publishers. 
Hall, A. (1990). Seven Myths of Formal Methods. IEEE Software, 7(5), 11-19. 
Harrison, M., & Thimbleby, H. (1990). Formal methods in human-computer 
interaction. Cambridge: Cambridge University Press. 
Horrocks, I. (1999). Constructing the user interface with statecharts: 
Addison-Wesley. 
Hudson, S. E., John, B. E., Knudsen, K., & Byrne, M. D. (1999). A tool for creating 
predictive performance models from user interface demonstrations. Paper 
presented at the Symposium on User Interface Software and Technology, 
Asheville, North Carolina, United States. 
Hudson, W. (2001). Towards Unified Models in User-Centred and Object-Oriented. 
In M. v. Harmelen (Ed.), Object Modeling and User Interface Design. Upper 
Saddle River, NJ: Addison-Wesley. 
Hyman, R. (1953). Stimulus information as a determinant of reaction time. Journal 
of Experimental Psychology, 45, 423-432. 
Irving, S., Polson, P., & Irving, J. E. (1994). A GOMS Analysis of the Advanced 
Automated Cockpit. Paper presented at the ACM CHI'94. 
Ivory, M. Y., & Hearst, M. A. (2001). The State of Art in Automating Usability 
Evaluation of User Interfaces. ACM Computing Surveys, 33(4), 470-516. 
Jacob, R. J. K. (1983). Using formal specifications in the design of a 
human-computer interface. Communications of the ACM, 26(4), 259-264. 
Ji, Y. G., & Yun, M. H. (2006). Enhancing the Minority Discipline in the IT Industry: 
A Survey of Usability and User-Centered Design Practice. International 
Journal of Human-Computer Interaction, 20(2), 117-134. 
John, B. E. (1990). Extensions of GOMS analyses to expert performance requiring 
perception of dynamic visual and auditory information. Paper presented at 
the ACM CHI'90. 
John, B. E. (1996). The GOMS Family of User Interface Analysis Techniques: 
Comparison and Contrast. ACM Transactions on Computer-Human 
Interaction, 3(4), 320-351. 
John, B. E., & Kieras, D. E. (1996). Using GOMS for User Interface Design and 
Evaluation: Which Technique? ACM Transactions on Computer-Human 
 71
Marcus, A. (2005). User Interface Design's Return on Investment: Examples and 
Statistics. In R. G. Bias & D. J. Mayhew (Eds.), Cost-Justifying Usability. 
San Francisco: Morgan Kaufman. 
Marsh, K. (1993). Win32 Window Hierarchy and Styles: MSDN, Microsoft Corp. 
Mayhew, D. J. (1999). The Usability Engineering Lifecycle. San Francisco: Morgan 
Kaufmann. 
Moran, T. P. (1983). Getting into a system: External-internal task mapping analysis. 
Paper presented at the Human Factors in Computing Systems, Boston, MA. 
Moray, N., & Huey, B. (1988). Human Factors: Research and Nuclear Safety. 
Washington, DC: The National Academies Press. 
Mosier, K., Palmer, E., & Degani, A. (1992). Electronic checklists: Implications for 
decision making. Paper presented at the The Human Factors Society 36th 
Annual Meeting, Santa Monica, CA. 
Myers, B. A., & Rosson, M. B. (1992). Survey on user interface programming. 
Paper presented at the ACM CHI'92, Monterey, CA. 
Nickerson, R. S. (1999). Why interactive computer systems are sometimes not used 
by people who might benefit from them. International Journal of 
Human-Computer Studies, 51, 307-321. 
Nielsen, J., & Mack, R. L. (Eds.). (1994). Usability Inspection Methods. New York: 
John Wiley & Sons, Inc. 
Niwa, Y., Hollnagel, E., & Green, M. (1996). Guidelines for computerized 
presentation of emergency operating procedures. Nuclear Engineering and 
Design, 167, 113-127. 
Norman, D. (1990). The Design of Everyday Things. New York: Doubleday. 
O'Hara, J., Stubler, W., & Higgins, J. (1996). Hybrid human-system interfaces: 
Human factors considerations (BNL Technical Report J6012-T1-4/96). 
Upton, New York: Brookhaven National Laboratory. 
O'Hara, J. M., & Brown, W. S. (2002). The Effects of Interface Management Tasks 
on Crew Performance and Safety in Complex, Computer-Based Systems: 
Overview and Main Findings (NUREG/CR-6690, Vol. 1). Upton, New York: 
Brookhaven National Laboratory. 
O'Hara, J. M., Higgins, J. C., Stubler, W. F., & Kramer, J. (2000). Computer-based 
Procedure Systems: Technical Basis and Human Factors Review Guidance 
(NUREG-6634). Washington, DC: U.S. Nuclear Regulatory Commission. 
Olson, J. R., & Nilson, E. (1987-88). Analysis of the cognition involved in 
spreadsheet software interaction. Human -Computer Interaction, 3, 309-349. 
Olson, J. R., & Olson, G. M. (1990). The Growth of Cognitive Modeling in 
Human-Computer Interaction Since GOMS. Human-Computer Interaction, 5, 
 73
Stubler, W., Higgins, J., & O'Hara, J. (1996). Evaluation of the potential 
safety-significance of hybrid human-system interface topics (BNL Report 
J6012-T2-6/96). Upton, NY: Brookhaven National Laboratory. 
Tauber, M. J. (1990). ETAG: Extended task action grammar - A language for the 
description of the user's task language. Paper presented at the Third 
International Conference on Human-Computer Interaction, Cambridge, UK. 
Teigen, J., & Ness, E. (1994). Computerized support in the preparation, 
implementation, and maintenance of operating procedures. Paper presented 
at the IFAC Workshop on Computer Software Structures Integrating AI/KBS 
Systems in Process Control, Lund, Sweden. 
Thimbleby, H. (2004). User interface design with matrix algebra. ACM Transactions 
on Computer-Human Interaction, 11(2), 181-236. 
Thimbleby, H., Cairns, P., & Jones, M. (2001). Usability Analysis with Markov 
Models. ACM Transactions on Computer-Human Interaction, 8(2), 99-132. 
Vicente, K. J., & Rasmussen, J. (1992). Ecological Interface Design: Theoretical 
Foundations. IEEE Transactions on Systems, Man, and Cybernetics, 22(4), 
589-606. 
Vredenburg, K., Mao, J.-Y., Smith, P. W., & Carey, T. (2002). A survey of 
user-centered design practice. Paper presented at the Human Factors in 
Computing Systems. 
Ware, C. (2000). Information visualization: perception for design. San Francisco: 
Morgan Kaufman. 
Wasserman, A. I. (1985). Extending State Transition Diagrams for the Specification 
of Human-Computer Interaction. IEEE Transactions on Software 
Engineering, SE-11(8), 699-713. 
Wiedenbeck, S., & Davis, S. (1997). The influence of interaction style and 
experience on user perceptions of software packages. International Journal 
of Human-Computer Studies, 46, 563-588. 
Woods, D., Roth, E., Stubler, W., & Mumaw, R. (1990). Navigating through large 
display networks in dynamic control applications. Paper presented at the The 
Human Factors Society 34th Annual Meeting, Santa Monica, CA. 
Wright, P., & Reid, F. (1973). Written information: some alternatives to prose for 
expressing the outcomes of complex contingencies. Journal of Applied 
Psychology, 57(2), 160-166. 
 
 
 
2008國際應用人因工程研討會會議報告 
 
一、參加會議經過 
  本會議為第二屆應用人因工程與第十二屆人因工程在先進製造
系統聯合舉辦之國際研討會，於 2008 年 7 月 14 日至 17 日在美國內
華達州之拉斯維加斯市舉行。會議籌備委員來自世界各地 29 個國
家。籌辦議題為應用人因工程之七大主題，即認知人因工程，人體工
學(Physical ergonomics)，製造系統中之人因，健康照護及特殊群體，
人因模式及可用度評估，社會與組織人因，安全等。由此七大主題各
發展出十餘項子題，每一子題即為一議程，因此最後會議包含 84 個
議程（session）。每個議程有 5 至 7 篇論文發表，加上 50 餘篇海報展
示論文，本次會議共有六百餘篇口頭報告及海報展示論文發表。 
  會議舉辦地點雖在美國，與會人士大多數來自歐洲、亞洲、澳州、
中南美洲等地區之國家，地主卻僅占了大約 20％。來自台灣的論文
發表有三個議程之多，約二十餘位參加，均為學界人士。大會第一天
（7/14）有三個訓練課程，包含「多模式與適應性顯示設計」，「認知
作業分析實作──以一軟體工具支援生手與熱手」及「全方面了解使
用者」等。另有一專題演講，演講者 Dr. Schmorrow 為國際擴增認知
(Augmented Cognition)學會創辦人及主辦，同時也是名美國海軍中
力，與國際水準已不相上下，值得欣慰。 
 
二、參觀訪問 
  本次會議舉行地點位於沙漠中的賭城，入夜之後熱鬧非凡，然而
過度商業化，空氣品質亦不佳，頗感失望。 
   回程在洛山磯停留一天，參訪加州州立大學洛山磯分校。主要
是本人之前的一位學生目前在此校唸經濟學碩士學程。此校位於洛山
磯華人區的一座山丘，環境單純。七月中校園仍有不少學生修習暑期
課程。此校 （California State U. at LA）雖名聲不如 UCLA 或加洲理
工等名校，但也屬加州州立大學中最具規模的分校，文法理工商均平
衡發展。很特別的是在校園中有一座孔夫子的雕像，文中刻著中英對
照的「有教無類」。 
  本人學生住在學校附近，同一棟房子的室友，三名台灣人，四名
中國人，一名日本人，一名俄羅斯人。房東訂下許多規矩，大家也都
很遵守。問及學習狀況及同學程度，本人學生感覺比在清大容易。留
學目的只想要把英文學好，唸完學位有一兩年工作經驗後，還是要回
台灣發展。 
 
三、心得 
  參加此次會議，了解國際上人因工程之發展與應用研究，尤在健
