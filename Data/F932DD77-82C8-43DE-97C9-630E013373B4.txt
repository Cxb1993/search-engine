在奈米製程下考量信號完整度之測試與診斷技術 
計畫編號：96-2221-E-002-275-MY3 
執行期間：98 年 8 月 1 日 至 99 年 7 月 31 日 
主持人：台大電子所 李建模 副教授 
 
1. 中文摘要 
我們提出一個可以同時產生多重測試圖
樣的平行化演算法。這個演算法把圖樣產生器
做的決定轉換成邏輯運算所以多個測試圖樣
可以做獨立的搜尋。這個演算法也可同時針對
多個目標產生圖樣。在 ISCAS’89 電路上的實
驗結果顯示我們的演算法產生的測試圖樣的
質量在許多目標上都比傳統測試圖樣產生器
所產生的 50-detect 圖樣還要好且測試時間較
短。 
 
英文摘要 
We propose a parallel ATPG algorithm 
(SWK) that generates multiple test patterns at a 
time.  This algorithm converts decisions into 
bitwise logic operation so that W (CPU word 
size) test patterns are searched independently.  
Multiple objectives for different quality metrics 
can therefore be achieved in a single test 
generation process.  Experimental results on 
ISCAS’89 benchmark circuits show that SWK 
test sets are better in many quality metrics than 
traditional 50-detect test sets, while the length of 
the former is shorter. 
 
Keyword: test pattern generation, test quality, 
bitwise parallel 
 
2. Introduction 
It has been shown that traditional single 
stuck-at fault (SSF) test patterns are not effective 
enough for hard-to-detect defects [Lin 09] 
[Benware 03].  For measuring the test quality, 
many metrics have been proposed: N-detect [Ma 
95], physical-aware N-detect (PAN) [Blanton 03] 
[Lin 08], gate exhaustive (GE) [Cho 05] [Guo 
06], bridging coverage estimate (BCE) [Benware 
03], and so on.  To achieve these quality goals, 
some researchers tried to add more objectives 
into traditional SSF ATPG which results in many 
backtracks because additional objectives may 
conflict with each other [Lee 02].  Other 
researchers tried to select test patterns from very 
large N-detect SSF test sets [Huang 06] [Lin 08] 
[Yilmaz 08][Kavousianos 09].  However, the 
quality improvement is limited because 
traditional N-detect ATPG does not consider the 
physical information.  We propose a novel 
parallel algorithm to generate test patterns that 
meet multiple quality objectives.   
Parallel ATPG algorithms can be divided 
into several categories: fault parallelism, 
heuristic parallelism, search space parallelism, 
functional parallelism, circuit partitioning, and 
simulation parallelism [Klenke 92].  We 
present a parallel algorithm, Split into W Clones 
(SWK1) ATPG, to generate test patterns that 
meet different quality metrics.  SWK is a 
PODEM-based ATPG algorithm that exploits 
both simulation and search-space parallelism.  
SWK converts decision making into parallel 
bitwise logic operation so multiple decisions can 
be searched at the same time.  The quality of 
SWK test patterns is higher than that of 
traditional ones because the former achieve 
multiple objectives at the same time.  SWK test 
patterns contains don’t care bits so they can be 
easily compressed by on-chip DFT hardware.  
Our experiments show that, SWK test sets is 
10% to 20% higher in PAN coverage but the size 
is shorter than 50-detect test sets. 
The structure of this report is as follows.  
Section 3 describes the signal representation.  
Section 4 describes the details of this algorithm.  
Section 5 shows the test compaction techniques.  
Finally, section 6 shows the experimental data 
and section 7 concludes this report. 
3. Preliminaries 
3.1 Signal Representation 
In SWK, signal A is represented by seven 
words of W bits: ,,,,,, 1010 bbdd AAAAAA  and Ap.  
Each bit in a word represents an individual clone, 
                                                 
1 SWK is named after Sun Wu-Kong, a heroic monkey who is able to 
magically multiply himself to gain advantage in combats, in a famous 
Chinese novel “Journey to the West” (1590).   
p-propagation.  They are described in the 
following subsections. 
4.2.1 d-generation and d-propagation 
A d or d  is generated when the fault site 
is controlled to the opposite value of the stuck 
value.  d-generation can be easily performed by 
inserting a logic operation at the fault site.  For 
A stuck-at fault, the corresponding d-generation 
can be simply implemented by: 
1AAd = ,  for A stuck-at zero fault  
0AAd = ,  for A stuck at one fault 
After d-generation, the fault effect (d or d ) 
is propagated from a gate input to its gate output 
when (1) at least one of the input is d or d , and 
(2) none of the gate input holds the controlling 
value.  For the example of a two-input AND 
gate, with inputs AB and output C, the following 
logic operations implement d-propagation.    
111 BAC =      (eq. 2a) 
dddd BABABAC +++= 000  (eq. 2b) 
ddddd BABABAC ++= 11   (eq. 2c) 
ddddd BABABAC ++= 11   (eq. 2d) 
where multiplication represents the bitwise AND 
logic operation.  For an inverter with input A 
and output C, the equations are simply as 
follows.   
01 AC =       (eq. 3a) 
10 AC =       (eq. 3b) 
dd AC =       (eq. 3c) 
dd AC =       (eq. 3d) 
Since we have shown the equations of both 
AND gates and inverters, the equations of other 
gates can be derived in the same way.  The 
values of fanout branches are the same as those 
of the fanout stem. 
4.2.1 p-generation and p-propagation 
In simulation, a Ap=1 represents that net A is 
on a possible propagation path of the fault effect.  
A p is generated when one of the gate inputs is d 
or d  while the other input is unknown.  A p 
could be propagated from gate input to gate 
output when three conditions are met:  (1) one 
of the input is p, and (2) the other input is 
non-controlling value, and (3) the gate output is 
unknown.  For a two-input AND gate, the 
p-generation and p-propagation can be written 
as the following bitwise logic operation.   
444 3444 2144444 344444 21
npropagatio
00
generation
)()(
−−
+++++=
p
xpxp
p
ddxddxp CBACBAAABBBAC  (eq. 4) 
where first two terms represent p-generation, 
while the last two terms take care of 
p-propagation.  For an inverter, p cannot be 
generated; it can only be propagated.  
Cp = Ap     (eq. 5) 
Similarly, for a fanout stem, p cannot be 
generated but only propagated.  For a fanout 
stem (M) with n fanout branches (M1, M2, ... Mn), 
p is propagated if the fanout stem is p.   
pp
n
pppp MMMMMM === ,...,, 21  (eq. 6) 
 
4.3 Backtrace 
After the simulation is finished, a backtrace is 
performed from outputs to inputs.  The 
backtrace function can be divided into two 
phases:  the p-backtrace and the o-backtrace.  
The former searches for path(s) to propagate the 
fault effect and the latter searches for input 
assignment(s) to achieve the objective.  The 
OBJ flag indicates whether an objective has been 
generated or not. 
4.3.1 p-backtrace 
After the fault is activated, a p-backtrace is 
needed to choose a path to propagate fault 
effects.  When backtrace, a Ap=1 represents that 
net A is on a candidate propagation path.  There 
are two types of p-backtraces: p-implication and 
p-split.  A p-implication is performed when 
there is only one possible propagation path in 
p-backtrace. 
The following equation implements the 
p-backtrace of an AND gate with inputs AB and 
output C,    
44 344 21444 3444 21
split-nimplicatio-
1 )(
p
ppp
p
pppp OBJSCBAOBJCBBAA ⋅+⋅+=  (eq. 7a) 
444 344 21444 3444 21
split-nimplicatio-
1 )(
p
ppp
p
pppp OBJSCBAOBJCAABB ⋅+⋅+=  (eq. 7b) 
where the first term is simply an p-implication 
and the second term corresponds to a p-split.  
Please note that the p’s on the right hand side are 
obtained during the simulation and the p’s on the 
left hand side are obtained during the backtrace.  
S is a random split vector of W bits, half of 
which are ones and the other half are zeros.  
⎥⎦
⎤⎢⎣
⎡⎥⎦
⎤⎢⎣
⎡+⎥⎦
⎤⎢⎣
⎡⎥⎦
⎤⎢⎣
⎡= ∑∑∑∑
====
n
i
b
i
n
i
b
i
n
i
b
i
n
i
b
i
b MMSMMM
1111
01011  (eq. 13b) 
The first term represents conditions (1) and (2) 
while the second term represents a random split.  
Return to the example in Fig. 6, b0 for clone #1 
is merged with b1 for clone #2.  The fanout 
stem of input A is now {b0, b1}.   
4.4 Backtrack 
Every time a simulation is finished, SWK 
backtrack the dead clone(s), if any.  Every 
clone has a unique stack which stores the input 
that has been assigned.  When backtrack occurs, 
the last input is popped out of the stack.  The 
value of the input would be flipped if the 
complement of the input has not been tried; 
otherwise, both values of the input have been 
tried and we just change it to unknown and the 
second to last input is backtracked.   
4.5 Initialize Multiple Objectives 
When generating SSF test patterns, SWK has 
only one objective ⎯ the fault objective.  
However, when generating better test patterns, 
SWK has to achieve other objectives ⎯ quality 
objectives.  The fault objective is unique and it 
has to be met; otherwise the clone is dead.  The 
quality objectives, on the other hand, may be 
missed.  
Figure 3 shows how SWK initialize these 
objectives.  The fault objective simply controls 
the fault site to the opposite value to the faulty 
value.  For N-detect, PAN, and BCE coverages, 
SWK assigns different quality objectives based 
on the neighborhood states.  Before test 
generation, a list of neighbors for each net is 
extracted from the physical information [Liu 09].  
Suppose that the number of neighbors of the 
fault site is m so the number of distinct 
neighborhood states is 2m.  If 2m is less than W, 
then W/2m objectives are evenly assigned to each 
clone; if 2m is greater than W, then only the first 
W objectives are assigned to each clone.  For 
GE coverage, SWK assigns different objectives 
to the faulty gate input. 
 
 
Fig. 3.  Initialize Multiple Objectives 
 
5. Test Compaction 
5.1 Dynamic Test Compaction 
The dynamic test compaction algorithm is shown 
in Fig. 4.  A secondary fault is picked from a 
net n in the fanin cone of an output with many 
x’s.  The algorithm picks a net n that has an 
undetected fault and many unspecified values x 
in many clones.  Test generation for the 
secondary fault is the same as that of the primary 
target fault.  The dynamic test compaction 
repeats until time out or the abort count is larger 
than a predefined limit.   
 
Fig. 4.  Dynamic Test Compaction Algorithm 
5.2 Static Test Compaction 
Those test cubes that do not contribute to any 
quality metric (N-detect, GE, BCE, PAN 
coverages) are removed in static test compaction.  
Static test compaction is simply implemented by 
pattern reordering and fault simulation.  For GE 
and PAN coverage, the number of distinct states 
is stored for each fault during fault simulation.  
dynamic_test_compaction(T)  { 
1: abort_count = 0;  
2: repeat { 
3:  n = a net in fanin cones output with many x; 
4:  if (n has undetected fault f and many x)  
{ 
5:   if (test_generate(f, T)==SUCCESS) { 
6:   } 
7:   else { 
8:    abort_count++; 
9:   } 
10:  } 
11: } until (time out or abort count > limit);
initialize_objective (f)  { 
2: F = faulty net (f); // fault objective 
3: if (f == stuck-at one) { Fb0 = 1;} 
4: else {Fb1 =1;} 
6: m = number of neighbors of F; // quality 
objectives 
7: if (2m ≤ W)  
8:     { Q = all possible neighborhood states}; 
9: else  
10:     { Q = W different neighborhood states}; 
11:  assign Q quality objectives to W clones; 
12: if (excite f requires o-split)  
13:     { C = three gate input combinations}; 
14:  assign C quality objectives to W clones; 
15:}
 Table I.  Experimental Results 
N-detect SWK Ckt. 
N T.L. PAN % BCE % GE % N T.L. PAN % BCE % GE % 
5 1,502 77.74 97.73 94.90 s13207 
50 29,419 81.60 98.47 94.88 
5 12,990 89.52 98.49 94.92 
5 877 67.72 96.64 92.83 s15850 15 31,045 70.05 97.10 92.78 5 9,357 88.23 97.08 93.03 
5 107 61.09 89.42 81.86 s35932 50 1,868 61.44 89.49 81.85 5 1,540 81.10 89.64 81.95 
5 2,282 79.60 98.68 96.65 s38417 50 29,190 81.89 99.25 96.60 5 9,377 89.81 99.20 97.05 
5 707 72.73 94.78 91.19 s38584 
40 11,475 74.71 95.09 91.25 
5 7,331 86.35 95.10 92.07 
 
[Ma 95] S.-C. Ma, P Franco, and E. J. McCluskey, “An 
Experimental Chip to Evaluate Test Techniques: 
Experiment Results,” Proc. Int’l Test Conf., 
pp.663-672, 1995. 
[Motohara 86] A. Motohara, K. Nishimura, H. Fujiwara, 
and I. Shirakara, “A Parallel Scheme for Test-Pattern 
Generation,” Proc. IEEE Int’l Conf. Computer-aided 
Design, pp.156-159, 1986. 
[Patil 90] S. Patil and P. Banerjee, “A Parallel Branch and 
Bound Algorithm For Test Generation,” IEEE Trans. 
Computer-aided Design, Vol. 9, No.3, pp.313-322, 
March, 1990. 
[Patil 91] S. Patil and P. Banerjee, “Performance 
Trade-Offs In A Parallel Test Generation/Fault 
Simulation Environment,” IEEE Trans. 
Computer-aided Design, Vol. 10, No.12, pp.1542-1558, 
Dec, 1991. 
[Seshu 65] S. Sesuh and D. N. Freeman, “On Improved 
Diagnosis Program,” IEEE Trans. Electron. Comput., 
EC-14(1), pp.76–79, 1965. 
[Smith 87] S. P. Smith, B.Underwood, and M. Ray Mercer. 
“An Analysis of Several Approaches to Circuit 
Partitioning for Parallel Logic Simulation,” Proc. 
IEEE Int’l Conf. on Comput. Design, pp.664-667, 
1987. 
[Synopsys 08] TetraMAX® ATPG User Guide Version 
B-2008.09 SP2, December 2008 
[Waicukauski 85] J. A. Waicukauski, E. B. Eichelberger, 
D. O. Forlenza, E. Lindbloom, and T. McCarthy, 
“Fault Simulation for Structured VLSI,” Proc. VLSI 
Syst. Des., 6(12), pp.20-32, 1985. 
[Wolf 96] J. M. Wolf, L. M. Kaufman, R. H. Klenke, J. H. 
Aylor, and R. Waxman, “An analysis of fault 
partitioned parallel test generation,” IEEE Trans. 
Computer-aided Design, Vol. 15, Issue 5, pp.517-534, 
May, 1996. 
[Yeh 09] K.-W. Yeh, M.-F. Wu, and J.-L. Huang, “A Low 
Communication Overhead and Load Balanced Parallel 
ATPG with Improved Static Fault Partition Method,” 
Algorithms and Architectures for Parallel Processing, 
Vol. 5574, pp.362-371, 2009. 
[Yilmaz 08] M. Yilmaz, K. Chakrabarty, and M. 
Tehranipoor, “Test-Pattern Grading and Pattern 
Selection for Small-Delay Defects,” Proc. IEEE VLSI 
Test Symp., pp.233-239, 2008. 
 
 
and tension, where μ0 is the original mobility without bending [7], 
and ε is surface strain [12].  It can be seen that the maximum 
mobility change is +7.6% when outward bended and -26% when 
inward bended.  A positive ε indicates outward bending (tensile 
strain) while a negative ε indicates inward bending (compressive 
stain).  In their experiment, the relative mobility can be modeled 
as 
μ/μ0 = 1+ 26ε.                                    (1) 
2.2 Static Timing Analysis 
Static timing analyzer (STA) is a useful EDA tool that estimates 
the timing of digital circuits without input patterns.  Static timing 
analyzer identifies the structural long paths and short paths 
(sometimes not knowing them true or false).  In synchronous 
circuits, setup time violation occurs when a signal on a long path 
arrives later the required setup time of a flip-flop.  On the 
contrary, hold time violation occurs when a signal on the short 
path arrives earlier than the required hold time of a flip-flop.  STA 
is very fast and the result can be regarded as the worst-case 
analysis of the circuit timing.   
STA can be classified into two categories: path based and block 
based.  The path-based STA performs a depth-first traversal of 
paths in the circuit [13][14].  The path-based STA keeps track of 
timing on all paths so it is time consuming because the number of 
paths grows exponentially with respect to the circuit size.  The 
block-based STA performs a breadth-first traversal of paths in the 
circuit [15][16].  The block-based STA is usually faster than the 
path-based STA but the former does not trace all paths. 
The proposed STAF is a block-based STA, which makes the 
following assumption: STAF considers only the mobility change 
when the circuit is bended.  The other parameters, such as wire 
capacitance and wire resistance, are assumed to remain constant 
when the circuit is bended.  This assumption is valid since wires 
are passive components that are not sensitive to bending.  STAF 
does not identify false paths.  The path delay reported by STAF 
can be pessimistic, which means the actual longest path can be 
shorter and the actual shortest path can be longer than our 
prediction.  This error should not be a significant problem since 
TFT circuits need large margins to tolerate process variation. 
3. PROPOSED TECHNIQUE 
3.1 Overall Flow 
Figure 3 shows the overall STAF flow.  First of all, we modify the 
parameters in the original TFT model to generate a new TFT 
model with bending effects.  Then all the logic gates in cell library 
are simulated using the TFT models with bending effects to create 
the load library and delay library.  The details of gate delay 
modeling can be found in Sec. 3.2.  The circuit netlist (in Verilog) 
as well as its layout (in DEF) are parsed and then STAF can be 
executed.  Finally, two types of maps are plotted in Section 3.3. 
3.2 Cell Library Characterization 
To demonstrate the STAF technique, a cell library is built using 
8μm a-Si NMOS TFT technology.  The SPICE model of NMOS 
TFT is obtained from the manufacturer, Industrial Technology 
Research Institute, Taiwan.  Due to the process limitation, PMOS 
is currently unavailable in this a-Si TFT technology.  Figure 4 
shows the schematic of three logic gates in this library, which are 
designed in pseudo NMOS style.  The lengths of all transistors are 
8μm and their W/L ratios are labeled.  The W/L ratio is a design 
trade off among speed, VOH, VOL, and area. 
With the schematic and TFT model, the gate delay can now be 
obtained by SPICE simulation.  Figure 5 shows the gate delay 
model of NOR3 as a function of load capacitance and mobility 
change (Δμ/μ0).  The SPICE simulation is performed on a 1pF 
load and 5% mobility change (Δμ/μ0) grid.  The gate delay of 
NOR3 seems to be a flat plane but actually it is not.  To reduce 
the error, in our implementation, we use a look-up table to store 
the delay values on the grid.  The other delay values can be 
calculated by interpolation or extrapolation. 
The load library contains the input capacitance of each gate.  The 
capacitance of each gate input can be obtained by SPICE 
simulation using the ‘.option captab’ command.  Each gate has 
eight different sizes and their corresponding input capacitances 
are store in a static table. 
3.3 STAF 
Region under bending (RUB) is an area within which all gates are 
  
Figure 4: INV, NOR2, NOR3 and NAND2 in a-Si TFT library. 
 
Figure 2: Relative mobility as a function of strain (a-Si) [8]. 
Layout
Parameter 
modification
TFT Model (without 
bending)
Netlist
SPICE 
Simulation
Parsing 
DEF
Parsing 
Verilog 
STAF
TFT Model 
(with Bending)
Delay library
Load library
Maps
lib. cell
schematics
Gate Delay Modeling
Figure 3: Overall STAF flow. 
regions under bending.  Experimental results on ISCAS’89 
benchmark circuits showed that the longest path delay can 
increase by up to 32% when the mobility is reduced by 25%.  
What is worse, the shortest path change can be up to 9%, which 
cannot be simply fixed by reduced clock speed.  The STAF 
experiments indicate that careful timing analysis with bending 
effect is vital for flexible electronics. 
6. REFERENCES 
[1] Y. Chen, J Au, P Kazlas, A Ritenour, H Gates, “Electronic paper: 
Flexible active-matrix electronic ink display,” Nature 423, pp136-
137, 2003. 
[2] H. Gerwin and et. al., “Flexible active-matrix displays and shift 
registers based on solution-processed organic transistors,” Nature 
Materials 3, pp. 106 - 110, 2004. 
[3] Nathan, A.; Chalamala, B.R., “Special Issue on Flexible Electronics 
Technology, Part 1: Systems and Applications,”  VOL. 93, NO.7, pp. 
1235-1238, 2005. 
[4] M.G. Kane and et. al., “Analog and Digital Circuits Using Organic 
Thin-Film Transistors on Polyester Substrates,“ IEEE Electron 
Device Letter, VOL. 21, NO. 11, Nov. 2000, pp. 534-536. 
[5] Nobuo Karaki, Takashi Nanmoto, Hiroaki Ebihara, Sumio 
Utsunomiya, Satoshi Inoue, and Tatsuya Shimoda, “A Flexible 8b 
Asynchronous Microprocessor based on Low-Temperature Poly-
Silcon TFT Technology,” IEEE International Solid-State Circuits 
Conference, 2005. 
[6] J.-Y. Bai   H.-R. Chen   S.-Y. Chien , “An asynchronous fixed-
coefficient FIR filter implemented with flexible a-Si TFT 
technology,” Proc. IEEE Asia Pacific Conference on Circuits and 
Systems, pp.1790-1793, 2008. 
[7] H. Gleskova, S. Wagner, W. Soboyejo and Z. Suo, “Electrical 
Responseof Amorphous Silicon Thin-Film Transistors under 
Mechanical Strain,” Journal of Applied Physicss, 2002. 
[8] Jun Hyuk Cheon, Jung Ho Bae and Jin Jang, “Mechanical Stability 
of Poly-Si TFT on Metal Foil,” Solid-State Electronics, 2007. 
[9] Tsuyoshi Sekitani, Shingo Iba, Yusaku Kato, Yoshiaki Noguchi, and 
Takao Someya, “Ultraflexible Organic Field-Effect Transistors 
Embedded at a Neutral Strain Position,” Applied Physics Letters, 
2005. 
[10] P. Servati and A. Nathan, “Modeling of the reverse characteristics of 
a-Si:H TFTs,” IEEE Trans. Electron Devices, Vol.49, pp.812-819, 
2002. 
[11] P. Servati and A. Nathan, “Modeling of the static and dynamic 
behavior of hydrogenated amorphous silicon thin-film transistors,” 
Journal of Vacuum Science and Technology A, Vacuum, Surfaces, 
and Films, Vol.20, pp.1038-1042, 2002. 
[12] H. Gleskova, S. Wagner and Z. Suo, “Failure Resistance of 
Amorphous Silicon Transistors under Extreme In-Plane Strain,” 
Applied Physics Letters, 1999 
[13] D. J. Pilling, and H. B. Sun, “Computer-Aided Prediction of Delays 
in LSI Logic Systems,” Proc. of the l0th ACM/IEEE Design 
Automation Workshop, pp, 182-186, 1973. 
[14] M. A. Wold, “Design Verification and Performance Analysis,” Proc. 
of the 15th Design Automation Conference, pp. 264-270, 1978. 
[15] T. I. Kirkpatrick and N. R. Clark, “PERT as an Aid to Logic 
Design,” IBM Journal of Research and Development,” Vol. 10, No. 
2, pp. 135-141, March 1966. 
[16] T. M. McWilliams, “Verification of Timing Constraints on Large 
Digital Systems,” Proc. of the 17th Design Automation Conference, 
pp. 139-147, 1980. 
Table 3: Worst DSr of ISCAS’89 benchmark circuits (%) 
Δμ/μ0 Circuit Size of RUB 
(cm) 5% 10% 
0.1×0.1 -4.82 -9.27 s5378 
0.3×0.3 -4.82 -9.27 
0.1×0.1 -4.75 -9.07 s9234 
0.3×0.3 -4.75 -9.07 
0.1×0.1 -4.70 -8.97 s13207 
0.3×0.3 -4.70 -8.97 
0.1×0.1 -4.70 -8.97 s15850 
0.3×0.3 -4.70 -8.97 
0.1×0.1 -4.71 -9.03 s35932 
0.3×0.3 -4.71 -9.03 
0.1×0.1 -4.70 -8.97 s38417 
0.3×0.3 -4.70 -8.97 
0.1×0.1 -4.70 -8.97 s38584 
0.3×0.3 -4.70 -8.97 
  
Figure 7: DLi map of s38584 (RUB 0.1×0.1, Δμ/μ0 = -25%).
  
Figure 8: DSr map of s38584 (RUB 0.1×0.1, Δμ/μ0 = 10%). 
  
Figure 9: DLi map of s38584 (column RUB, Δμ/μ0 = -25%). 
國科會補助計畫衍生研發成果推廣資料表
日期:2010/11/24
國科會補助計畫
計畫名稱: 子計畫六：在奈米製程下考量信號完整度之測試與診斷技術
計畫主持人: 李建模
計畫編號: 96-2221-E-002-275-MY3 學門領域: 積體電路及系統設計
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
