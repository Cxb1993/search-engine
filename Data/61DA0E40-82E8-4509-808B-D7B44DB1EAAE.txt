  1
關鍵詞：序列比對、序列擷取、傅葉爾轉換 
 
中文摘要： 
本計劃討論如何使用傅葉爾轉換來比對生物序列的相似度，並運用特徵擷取萃取序列的重要
資訊，以便縮小資料空間及處裡時間，用以進行序列資料庫的快速搜尋。 
 
Keywords: DNA-sequence similarity, edit distance, Fourier transform 
 
Abstract： 
This research project deals with how to apply Fourier-transform to compare similarities between 
biological sequences. Based on the benefit of Fourier transform, useful features can be extracted 
from the analyzed sequences. By doing so, both data space and search time can be reduced 
dramatically. 
  3
可以看出並非在所有的區段皆有顯著的差異，但是經過刪選，在部份區段可以找到明顯差
異。如果將人類粒線體與 B型肝炎重疊，很明顯的可以看出不同，如下圖： 
 
 
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 
1 0 0.0085 0.0092 0.0005 0.0160 0.0147 0.0099 0.0115 0.0126 0.0093 0.0511 0.0477 0.0485 0.0532
2 0.0085 0 0.0002 0.0076 0.0086 0.0068 0.0111 0.0066 0.0065 0.0088 0.0569 0.0525 0.0555 0.0610
3 0.0092 0.0002 0 0.0080 0.0094 0.0075 0.0120 0.0069 0.0077 0.0099 0.0566 0.0522 0.0553 0.0605
4 0.0005 0.0076 0.0080 0 0.0135 0.0120 0.0078 0.0087 0.0107 0.0078 0.0485 0.0450 0.0464 0.0504
5 0.0160 0.0086 0.0094 0.0135 0 0.0002 0.0028 0.0023 0.0005 0.0022 0.0485 0.0443 0.0484 0.0533
6 0.0147 0.0068 0.0075 0.0120 0.0002 0 0.0030 0.0017 0.0005 0.0024 0.0468 0.0427 0.0469 0.0515
7 0.0099 0.0111 0.0120 0.0078 0.0028 0.0030 0 0.0019 0.0023 0.0006 0.0472 0.0432 0.0472 0.0512
8 0.0115 0.0066 0.0069 0.0087 0.0023 0.0017 0.0019 0 0.0019 0.0023 0.0515 0.0472 0.0518 0.0555
9 0.0126 0.0065 0.0077 0.0107 0.0005 0.0005 0.0023 0.0019 0 0.0012 0.0499 0.0456 0.0497 0.0548
10 0.0093 0.0088 0.0099 0.0078 0.0022 0.0024 0.0006 0.0023 0.0012 0 0.0491 0.0448 0.0489 0.0537
11 0.0511 0.0569 0.0566 0.0485 0.0485 0.0468 0.0472 0.0515 0.0499 0.0491 0 0.0004 0.0004 0.0007
12 0.0477 0.0525 0.0522 0.0450 0.0443 0.0427 0.0432 0.0472 0.0456 0.0448 0.0004 0 0.0010 0.0010
13 0.0485 0.0555 0.0553 0.0464 0.0484 0.0469 0.0472 0.0518 0.0497 0.0489 0.0004 0.0010 0 0.0008
14 0.0532 0.0610 0.0605 0.0504 0.0533 0.0515 0.0512 0.0555 0.0548 0.0537 0.0007 0.0010 0.0008 0 
圖表 1 
圖表 1 為根據 FT-vectors 所計算的距離矩陣，左上方為分類為第一類的 B型肝炎 DNA，
中間為分類為第二類的 B 型肝炎 DNA，右下方為人類的粒線體 DNA。其叢聚效應很明顯的可
以被區分出來。1 
類似的方法也可以用來分析判定基因序列的啟動子(promoter)的位置，下圖為分析
SD(Shine-Dalgarno)序列的比較圖： 
                                                 
1 本研究所開發的工具軟體可以在下列網址下載：http://alg.csie.ncnu.edu.tw/program/Alg017.zip 
此次出國參加 13th International Conference on Logic for Programming, 
Artificial Intelligence, and Reasoning國際學術演討會，地點在柬埔寨金邊，從 11
月 12日到 11月 17日，為期六天，與會者多是歐美的研究學者與研究生，鮮少
有東方人。此會議是邏輯推理領域在國際上最重要的會議之一，會議的論文蒐錄
在 Lecture Notes in Artificial Intelligence, and Reasoning, Vol. 4246，本人則在第五
天發表論文“Boolean Rings for Intersection-Based Satisfiability”，並廣泛的與與會
學者討論。 
柬埔寨之前內戰不斷，局勢穩定之後逐漸開放，到現在也不過十年的光景，
觀光客絡繹不絕。大會很體貼的特別安排了一天的行程讓與會者去遊湄公河畔，
也讓大夥親眼目睹當地居民生活的困苦及許多人間慘況，這與因開放而逐漸富裕
的金邊，形成強烈的對比。 
雖然說此篇論文與本計劃並無直接關聯，但卻是本人之前的國科會計畫
NSC94-2213-E-260-016部份的產物，因此特別感謝國科會在這方面的支持。 
 大會中本人所發表的論文，如附件，也為本人在這場學術會議畫下最好的句
點。 
which one can delete intermediate results that follow from known (or yet to be
derived) simpler facts, without jeopardizing completeness of the inference mech-
anism. Simplifying as much as possible at each stage can greatly reduce storage
requirements. Simpliﬁcation-based theorem-proving strategies, as in the popu-
lar term-rewriting approach, have been used to solve some diﬃcult problems in
mathematics, including the long-open Robbins Algebra Conjecture [19]. Term
rewriting means using equations asymmetrically to replace “equals by equals”
in the direction that decreases the complexity of the term (according to some
well-founded measure). For term rewriting as a tool in automated deduction, see
[1, 12]. For an abstract theory of inference with simpliﬁcation, see [11, 5].
A natural way of incorporating simpliﬁcation in propositional reasoning is to
use the Boolean-ring (BR) formalism. Boolean rings obey the following identities:
xx = x x0 = 0 x1 = x
x+x = 0 x+0 = x −x = x
xy = yx (xy)z = x(yz)
x + y = y + x (x + y) + z = x + (y + z) x(y+z ) = xy+xz
where (nilpotent) + is exclusive-or and (idempotent) juxtaposition is logical-
and, ∧. (The additive inverse −x is useless.) It is straightforward to express
inclusive-or and negation: x ∨ y is xy + x + y and x is x + 1.
The Boolean-ring formalism diﬀers from Boolean algebra in that it deﬁnes a
unique normal form (up to associativity and commutativity of the two operators)
for every Boolean formula, called a Boolean polynomial (also known as a Zhe-
galkin polynomial or Reed-Muller normal form). It is known [22, 21] that circuits
based on exclusive-or are smaller, on the average, than those using inclusive-or.
A similar advantage should accrue symbolic representations. Like any other nor-
mal form, applying the distributive law (the bottom-right equation) can cause
the length of a Boolean polynomial to grow exponentially in the worst case.
This paper focuses on satisﬁability testing using Boolean rings (which is, of
course, NP-hard [4]). Several possibilities are outlined in the next two sections.
Section 4 proposes a Davis-Putnam-like method for satisﬁability. We use a novel
representation, called Bin-Lin, separating the set of formulæ into two parts (lin-
ear, binomial), each of which, on its own, can be dealt with eﬃciently. This is
followed (in Sect. 5) by some suggestions for practical improvements. Converting
to the Bin-Lin representation is the subject of Sect. 6. Section 7 provides several
relevant complexity results, including NP-completeness (via reduction from SAT,
which implies completeness of the proposed method). We also give polynomial-
time results for restricted classes of Boolean-ring formulæ corresponding to the
two parts mentioned above. The latter results provide some justiﬁcation as to
why the proposed method may be eﬃcient.
The main advantage of the proposed Bin-Lin representation is that it allows
for a large measure of polynomial-time inference of new facts, using Gaussian
elimination on the linear part and Horn methods for the binomial. This suggests
incorporating more forward reasoning in a search-based satisﬁability procedure
than just Boolean constraint propagation. In Sect. 8, we apply the Boolean-
2
The traditional mechanical approach to satisﬁability of a propositional for-
mula is to assert its negation and try to infer a contradiction. The total number
of consequences one needs to derive is, of course, in general, exponential. Most
nontrivial proofs require some form of case splitting. In Sect. 8, we show how to
combine limited saturation with search, within a BR framework.
3 Simplification
To counter the certain exponential cost of na¨ıve realizations of satisﬁability meth-
ods, simpliﬁcation at intermediate stages is of paramount importance. Equations
being processed are replaced with simpler ones (in some well-founded sense) by
making polynomial-time inferences and deleting now-redundant formulæ. Such
steps reduce the likelihood of suﬀering from the potentially exponential aspect
of the approach (be it case analysis, splitting, merging, or distributivity).
Regardless of the method, it is helpful to make cheap and valuable
deductions—which may enable additional simpliﬁcations—as early as possible.
In particular, virtually all approaches employ some mechanism for detecting
“necessary” assignments. Simpliﬁcation rules used in DPLL and OBDD provers
[6] include tautology, unit (Boolean constraint propagation), pure literal, sub-
sumption, and failed literal. (In practice, tautology and pure-literal are often
omitted.) In the search approach, after assigning 0 or 1 to a variable, simpliﬁers
like x0 = 0, x1 = x, x∨0 = x, and x∨1 = 1 should be applied, regardless of the
speciﬁc manner in which formulæ are represented, since these rules may result
in the deletion of all occurrences of some other variables.
Performing simpliﬁcation during preprocessing can also be useful. In [20],
preprocessing CNF formulæ derived from circuit testing, bounded model check-
ing, combinatorial equivalence checking, and superscalar processor veriﬁcation,
was found to reduce the number of variables to 1/3 in many cases. In a nor-
malization approach, the same simpliﬁers can dramatically reduce the size of
formulæ. The ﬁrst ﬁve Boolean-ring axioms are simpliﬁers. They can be easily
implemented by keeping terms sorted.
4 Representation
We argue that Boolean rings are an especially convenient framework for simpli-
ﬁcation. As already mentioned, distributivity is the potentially expensive step
(even when directed acyclic graphs are used for shared subterms). We propose
a new representation, called Bin-Lin, that circumvents this problem.
A linear equation (over Z2) is a Boolean equation of the form x1+· · ·+xn = 1
or x1+ · · ·+xn = 0, where the xi are distinct propositional variables. A binomial
equation is a Boolean equation with at most two monomials, that is, an equation
of one of the three forms: P = Q, P = 0, or Q = 1, where P and Q are products
of distinct propositional variables (distinct on account of idempotence). Simple
equations, x = 0, y = 1, or x = y, for propositional variables x, y, as well as
4
Table 1. Inference rules for replacing antecendents with consequents (A,B are any
formulæ; M,N are monomials, including variables and values; x is any propositional
variable; c is either Boolean value; A[M ] is a formula containing M ; ⊥ signiﬁes unsat-
isﬁability)
A = A MN = 1
M = 1, N = 1
M0 = N
N = 0
M1 = N
M = N
Mxx = N
Mx = N
A + 0 = c
A = c
A + 1 = 1
A = 0
A + 1 = 0
A = 1
A + x + x = c
A = c
M + N = 0
M = N
M = N, A[M ] = B
M = N, A[N ] = B
M>N
1 = 0
⊥
⊥, A = B
⊥
To represent the clause p∨q, a new variable p̂ for p is required. The clausal form
of its negation, written as Boolean equations, is as follows:
(1) qs = q (2) sp = s (3) prt = pr (4) rt = 0
(5) p + p̂ = 1 (6) qp̂ = p̂ (7) pr = p .
Equation (4) simpliﬁes (3) to pr = 0, which, in turn, simpliﬁes (7) to p = 0. This
invokes the Unit Rule, and (2,5) become s = 0 and p̂ = 1. The new (2) simpliﬁes
(1) to q = 0. Finally, p̂ = 1 and q = 0 simplify (6) into the contradiction 1 = 0,
concluding the proof (sans splits). unionsq
Example 2. The Pigeon-Hole Principle for 3 pigeons and 2 holes can be expressed
as linear equations {a1+a2+1 = 0, b1+b2+1 = 0, c1+c2+1 = 0} and binomial
equations {xiyj = 0 | xi, yj ∈ A, x = y ∨ i = j}, where A = {a1, a2, b1, b2, c1, c2}
and xi means that pigeon x is in the ith hole. One split on a1, with simpliﬁcation,
proves the principle. If a1 = 0, then a2 = 1 from the linear part, b2 = c2 = 0 from
the binomial part, b1 = c1 = 1 from the linear part, leading to a contradiction
1 = 0 from the binomial b1c1 = 0. A similar contradiction obtains from a1 = 1.
unionsq
5 Cross-Fertilization
It is advantageous to allow some “cross-fertilization” between B and L, so that
useful equations can migrate from one set to the other. A trivial case is when
equations can belong to both sets. In fact, the Unit and Equivalence Rules of
Sect. 4 belong to this case.
Since B is Horn, it can express cases where variables propagate values, such
as those that can be obtained from equations in L. For example, consider a linear
equation x+y+z = 1. By assigning 1 to variables x and y, the equation reduces
to z = 1, since an even number of 1’s cancel each other. Thus, we may conclude
that the binomial equation xyz = xy (that is, x and y imply z) is a logical
consequence of the linear equation. Furthermore, if we are lucky enough to have
xyz = 0 (equivalent to x∨y∨z) as a constraint, we can deduce xy = 0. In general,
6
literal, a new variable l̂i and new equation l1 + l̂i = 1 are introduced, and li + 1
is replaced by l̂i. Therefore, at most 2n variables remain after compilation.
Additional inference rules can help handle the positive variable ν(F ) and the
negative variable µ(F ). Two variables x and y are called complementary if the
linear equation x + y = 1 exists. We proceed as follows:
1. Replace any product of variables by 0 if it contains complementary variables.
2. Replace a negative variable x̂ by x + 1 in every linear equation other than
x + x̂ = 1 (and simplify).
3. Suppose we have MM ′x = N and M ′y = 0, where M,N,M ′ are monomials.
Replace MM ′x = N by MM ′ = N if x and y are complementary.
4. Replace MN = 1 by M = 1 and N = 1.
5. Suppose we have MP = QR and MQ = 0. Replace MP = QR by MP = 0
and QR = 0.
6. Remove an equation x = M if x is a variable that appears only in this
equation.
Example 3. Consider, again, the instance in Example 1:
(p ∨ q) ∧ (q ∨ s) ∧ (s ∨ p) ∧ (p ∨ r) ∧ (r ∨ p ∨ t) ⇒ (t ∧ r) .
To prove this formula valid, we set it equal to false and try to ﬁnd a counterex-
ample. We compile it into the following:
(1) t̂1 = p̂q̂ (2) t̂2 = qŝ (3) t̂3 = sp̂
(4) t̂4 = pr̂ (5) t̂5 = rpt̂ (6) t6 = tr
(7) t7 = t1t2t3t4t5 (8) t̂8 = t7t̂6 (9) t8 = 0 .
Note that the ti and the variables wearing hats are new. (We’ve omitted all the
duality constraints.) It follows that (9) forces t7 = 1 and t6 = 0 in (8), which
further forces t1 = t2 = t3 = t4 = t5 = 1 in (7). Then repeatedly applying Rule 3
and the Unit Rule, we get rp = 0 in (5), p = 0 in (4), s = 0 in (3), q = 1 in (1),
and ﬁnally 0 = 1 for (2). unionsq
In [23], all formulæ are represented as deﬁnitional “triplets”, of the form
x ⇔ y ∧ z, where x, y, z are propositional variables, which is just the binomial
x = yz in BR.
7 Complexity
We next present several simple complexity results, including two polynomial-
time subclasses (for B and L). These results give some indication as to why our
Bin-Lin method may be relatively eﬀective.
Let Linear-BRSAT be the problem of solving a system of linear equations over
the Boolean ring.
Theorem 1. Linear-BRSAT is solvable in polynomial time.
8
x = 0
A
x = 1
A0
Merge
A1
A∗
CheapCheap
Cheap
Fig. 1. Intersection-based learning method
2. Choose a variable to split on; recur on each case.
3. If either case succeeds, then done; otherwise, merge results.
4. If something learned, add it to formulæ and reset the list of variables.
5. If no unsplit variables remain, increase depth up to current bound;
otherwise, continue at same depth.
6. Repeat with incremented bound until maximum depth.
By “merging”, we mean looking for consequences that hold in both cases. This,
too, should be a polytime step. See Fig. 1.
Suppose, then, that we are provided with the following four polynomial pro-
cedures:
1. Sat A, which detects “obvious” cases of satisﬁability of the formulæ in a set
of formulæ A.
2. Unsat A, which detects “obvious” cases of unsatisﬁability of A.
3. Cheap A, which performs simple, but incomplete, “reduction” inferences on
A.
4. Merge A,B, which returns a set of formulæ that can be inferred from both
A and B.
Let Th A be the theory (deductive closure) of A, ⊥ denote unsatisﬁability (false-
hood, failure), and Var A be the (unassigned) variables appearing in A. We need
for the above procedures to satisfy the following requirements:
– Sat and Unsat are sound:
Sat A = T ⇒ (Th A)′ = ∅
Unsat A = T ⇒ (Th A)′ = ∅
where (Th A)′ are the formulæ that are not theorems.
10
IBL(P ) := I(P,Var P,N)
where I(B, V, n) is
if n = 0 then return Cheap B
A := I(B,V, n− 1)
if Unsat A then return ⊥ ‖ if Sat A then return 
V ′ := V ∩Var A
if V ′ = ∅ then return A
choose p :∈ V
V ′′ := V ′ \ p
A0 := I(A ∪ {p}, V ′′, n− 1) ‖ A1 := I(A ∪ {p}, V ′′, n− 1)
A∗ := Merge A0, A1
if A∗ ∈ {,⊥} then return A∗
if A = A∗ then return I(A,V ′′, n)
else return I(A∗,Var A∗, n)
Fig. 2. Generic intersection-based learning algorithm (S‖S′ means that execution of S
and S′ can be performed in parallel; N is the maximum depth of splits for learning)
9 Results
The degree to which simpliﬁcation and learning can sometimes reduce the num-
ber of splits needed in a backtrack search is the main practical question. In
earlier, initial experiments with an implementation of a na¨ıve Boolean-ring-
based search method (of Sect. 2), the number of splits was reduced by 30%
[17]. This saving, however, came at the price of time-consuming simpliﬁcation,
mainly because—in that implementation—distributivity was needed, which is
not the case with the method proposed here.
We conducted several sets of experiments to measure the usefulness of reduc-
tion techniques under the Bin-Lin framework:
P: This is a basic DPLL procedure, with learning of conﬂict clauses. Variables
are split according to their given order. This set is intended as a baseline
reference.
I: The intersection method described in Sect. 8, with syntactic intersection, is
incorporated in this case. The maximum depth for intersection-based learn-
ing was set to 3.
GI: Gaussian elimination on linear equations is added to the implementation of
Set I.
HI: Equivalence of variables are learned from binomial equations, together with
Set I.
GHI: The features of Sets GI and HI are combined.
Over 700 satisﬁable examples, taken from actual Intel Corp. hardware ver-
iﬁcation problems, were tested for each set of features. Not surprisingly, using
combined simpliﬁcation (GHI) performed best in terms of eliminating splits.
Indeed, nearly 14% of these 700 examples have over 50% savings on splits with
12
time, but simpliﬁcation, though polynomial, is not linear. On the other hand,
eliminating a split saves space, and may in the long run save time.
Besides the ease of incorporating simpliﬁcation, Boolean rings are a suitable
representation for preprocessing for the following reason: Let C be the set of
Boolean formulæ over all binary and unary operations, D be over {∨,∧, },
and G over {1,+,∧}. As shown in [16], any formula in C is linearly reducible
to one in G, but may not be linearly reducible to one in D. Hence, Boolean-
ring formulæ can preserve the structure of any Boolean formula, while Boolean
algebra requires additional variables. This ability to preserve structure is also
important for St˚almarck’s method (cf. Sect. 8), which is sensitive to the structure
of the input formula.
Nilpotence of + makes it possible to express parity succinctly as a linear
equation in the Boolean ring. This feature allows for very simple BR proofs of
the pigeon-hole principle (see Example 2) and the mutilated checkerboard. In
contrast, in Boolean algebra, the shortest corresponding formula is of quadratic
length, if no new variables are introduced. Introducing new variables normally
increases computational eﬀort.
It should also be interesting to identify additional subclasses of Boolean rings
(like Binomial-BRSAT) for which satisﬁability testing can be accomplished by
simpliﬁcation alone, without splitting.
Acknowledgement
We are grateful to the referees for their comments.
References
1. Baader, F., and Nipkow, T.: Term Rewriting and All That. Cambridge University
Press (1998)
2. Ben-Sasson, E., and Wigderson, A.: Short proofs are narrow — resolution made
simple. Journal of the ACM 48 (2001) 149–169
3. Bjo¨rk, M.: A First Order Extension of St˚almarck’s Method, Ph.D. thesis, Depart-
ment of Computer Science and Engineering, Go¨teborg University, Sweden, 2006
4. Bloniarz, P. A., Hunt, H. B., III, and Rosenkrantz, D. J.: Algebraic structures
with hard equivalence and minimization problems. Journal of the ACM 31 (1984)
879–904
5. Bonacina, M. P. , and Dershowitz, N.: Abstract canonical inference. ACM Trans-
actions on Computational Logic, to appear
6. Bryant, R. E.: Symbolic Boolean manipulation with ordered binary-decision dia-
grams. ACM Computing Surveys 24 (1992) 293–318
7. Clegg, M., Edmonds, J., and Impagliazzo, R.: Using the Groebner basis algo-
rithm to ﬁnd proofs of unsatisﬁability. Proc. 28th ACM Symposium on Theory of
Computing (1996) 174–183
8. Davis, M., Logemann, G., and Loveland, D.: A machine program for theorem
proving. Communications of the ACM 5 (1962) 394–397
9. Davis, M., and Putnam, H.: A computing procedure for quantiﬁcation theory.
Journal of the ACM 7 (1960) 201–215
14
