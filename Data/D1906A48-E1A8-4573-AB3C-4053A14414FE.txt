 1
（一） 計畫中文摘要 
關鍵詞：可逆式可變長度編碼、傳輸錯誤、錯誤偵測、錯誤同步、編碼建構方法 
本計劃為一年期計劃，進行「可逆式可變長度碼之多位元錯誤偵測與同步分析」之研究。 
主要工作內容包括：建立與驗證可逆式可變長度碼之多位元錯誤偵測及錯誤同步分析模
型、建立錯誤偵測及同步的分析公式與指標，並實作文獻中各種 RVLC 的建構方法，進行
不同的原始資料分佈及不同錯誤率下，錯誤偵測及同步分析指標的關係，並加以比較及
探討。 
 
（二） 計畫英文摘要 
Keyword：Reversible Variable Length Codes (RVLC), Transmission Error, Error Detection, 
Error Synchronization, Codes Construction Algorithm 
In this project, “Multiple Error Detection and Synchronization Based Reversible 
Variable-Length Codes Construction Algorithm”, we construct and verify the multiple error 
detection and synchronization model for RVLC. Some formulas for estimating the error 
detection and synchronization probability and lengths are provided. We also implement some 
RVLC construction algorithms in the lectures and compare these methods with error detection 
and synchronization probability and lengths. 
 
(三)  前言及研究目的 
隨著網路與多媒體的興起，多媒體資料經過壓縮並在網路上進行傳輸已經成為普遍的應
用，由於頻寬的限制及通道的干擾，為了避免傳輸過程產生錯誤，造成資料無法順利讀
取，因此無論是哪一種系統，都需要具備良好的錯誤控制機制，這也使得許多學者紛紛
開始研究各種兼顧編碼效率與錯誤復原機制的方法，使經過壓縮後的資料擁有抵抗傳輸
錯誤的能力。一般來說，壓縮過後的資料非常容易受到錯誤的影響，如大多數影像與影
片壓縮標準所採用的變異長度編碼（Variable Length Codes, VLCs），包括霍夫曼編碼
（Huffman Code）及算數編碼（Arithmetic code）等，往往因為一個位元的錯誤而產生一
連串的解碼錯誤，導致資料無法正確傳輸，而可逆式可變長度碼（RVLCs）便是一種用
來降低傳輸錯誤的方法，也因此被 MPEG-4 及 H.263 影片壓縮標準所採用。 
可逆式可變長度編碼資料中會固定安插再同步標記，並可以從區塊兩端分別進行解碼，
因此，只要接收端在解碼發現錯誤時便可以從另一端開始反向解碼，以確保未受到誤差
干擾的部分可以儘量地被正常讀取，提高資料傳輸的能力，反之，一般的變異長度編碼
方法，即使僅遭遇一個位元的傳輸錯誤，接收端也只能等到下一個再同步標記才能重新
正確的解碼。雖然 RVLC 兼顧壓縮效率與錯誤復原的能力，但是不同的 RVLC 建構方法，
會導致編碼效率的差易，因此，早期的研究主要著重於如何選擇最具編碼效率的 RVLC，
使平均編碼長度最短，擁有最佳的壓縮效果。然而，不同的 RVLC 建構方法在面對錯誤
發生時也可能產生不同的結果，包括不同的錯誤偵測的長度、不同的錯誤同步的長度及
受傳輸錯誤影響的解碼字元長度等，錯誤愈早被偵測出來，則解碼端可以及早從反向解
 3
法；由於錯誤發生會影響影片解碼後的品質，錯誤影響的資料愈多，影片品質也會愈低，
因此，Xu等人 [XU06] 根據傳輸錯誤發生後，解碼端影片的PSNR（Peak Signal to Noise 
Ratio) 大小，來判斷不同RVLC建構法遇到錯誤造成的影響。 
近幾年來，RVLC被應用及討論的範圍包括：視訊壓縮標準中的H.263[WEN97, 
WEN98,ITU00]、MPEG-4[TALL98, ISO01, KUMA03, KUMA04, BUTT05]及影像壓縮標準
JPEG-2000[ISO99]，其中，MPEG-4 標準中所採用的RVLC是以Toshiba[CHUJ99]提出的方
法為基礎所建立，此外，康乃爾大學的Hemami[HEMA00]採用可同步的VLC編碼方法來進行
影像傳輸；新加坡南洋理工學院Wang等人[WANG05]提出將RVLC應用於語音壓縮標準 
ITU-T G.722.1[ITU99]上取代原先的霍夫曼編碼，使壓縮後的資料擁有更多抵抗錯誤的
能力；[BYST01,GAO03,XU05b]則證明RVLC可以有效地對抗傳輸錯誤所造成的影響；而最
近則有Wisconsin-Madison 大學的Huang 等人[HUAN05, HUAN06]結合3D Wavelet及
RVLC，用於ultraspectral sounder資料的無失真壓縮，在壓縮效率增加不多的情況下，
擁有比JPEG2000 更好的抵抗錯誤的能力；中國大陸哈爾濱大學及中國科學院Wang等人 
[WANG07]提出根據傳輸內容而調整RVLC的概念，以擁有更好的編碼效率及錯誤抵抗效
果；英國Southampton 大學Pham等人[PHAM07]應用於視訊電話系統。 
 
(五) 研究方法 
RVLC 因為兼具 VLC 的壓縮效率及錯誤復原的特性，因此被 MPEG-4 與 H.263 等壓縮
標準所採用，然而，與 VLC 相同，即使是一個位元的誤差都可能導致後續資料的解碼錯
誤，當傳輸錯誤發生後，解碼端將會面臨錯誤偵測或錯誤同步的情況，而錯誤被偵測出或
產生同步中間所影響的資料長度會影響解碼端的解碼效率及影像品質，因此 RVLC 的設
計原則不應該只有考慮編碼效率，也應把錯誤造成的影響納入考量。 
研究的過程首先必需針對 RVLC 設計完善的評估錯誤偵測長度及錯誤同步長度的機制，現
有文獻針對 RVLC 錯誤分析的相關討論中，最完整的為台灣大學的 Lin 與 Wu [LIN05]，
其內容針對 RVLC 發生單一位元錯誤後的錯誤偵測及錯誤同步長度的特性，提出一套完
整的模型，分別計算 RVLC 發生錯誤後，錯誤偵測與同步的相關特性，然而，假設發生
單一位元錯誤意味著推論所得的結果僅適用於傳輸通道錯誤率極小的情況。真實網路傳輸
的情況是，當錯誤發生時可能連續影響數個位元，也有可能在不連續的位元發生好幾個錯
誤，因此，我們需要更完整 RVLC 的錯誤分析方法，針對傳輸過程中遇到連續的錯誤或者
是傳輸通道錯誤率較高的情況進行考慮，才能藉此設計更符合實際需求的 RVLC。因此，
本研究主要目標為進行 RVLC 之多位元錯誤特性分析，並發展錯誤評估的指標以與現有
的 RVLC 進行分析比較。 
針對 RVLC 面對多位元傳輸錯誤（包括連續錯誤與非連續錯誤）的特性進行分析可以分成
兩個步驟，首先建立多位元錯誤偵測與錯誤同步分析模型並發展錯誤評估指標；接著根據
建立的模型探討 RVLC 的特性，並藉由實際模擬驗證模型的可靠性並比較現有 RVLC 的
建構方法，以下分別說明研究方法： 
1.建立多位元錯誤偵測與同步分析模型 
我們以 A = {a1, a2, …, an}代表原始壓縮資料的所有資料所形成的集合，而 p(ai)則代表資料
ai所發生的機率，所有資料將進行 RVLC 編碼成 R = {r1, r2, …, rn}。每個 RVLC 的集合 R
都可對應至一顆二元樹（binary tree）T，所有的二元樹都有兩類節點（node），一種為內
 5
建立多位元錯誤偵測與同步分析模型的研究結果討論如下，當傳輸錯誤發生後，解碼的過
程中可能發生三種情況：（1）接收端移動到 D（假的子節點），因此錯誤被偵測出；（2）
接收端移動到 C（編碼節點）時，這代表錯誤已經同步，下一個解碼資料將從根節點 Λ重
新開始；（3）接收端移動到 I（內部節點）時，這代表發生傳遞性錯誤，接收端會繼續進
行解碼直到發生錯誤被偵測或同步為止。 
我們的研究採用 finite state machine 來做計算，因此假設子節點 D 共有 m 個，由於接收端
移動到 D 代表錯誤可以被偵測出，因此我們定義這些子節點為 ES1,…, ESm (表示 Error State 
1,…,m )；假設編碼節點 C 共有 n 個，由於接收端移動到 C 代表錯誤可以被偵測出，因此
我們定義這些子節點為 Syn1,…, Synn (表示 Synchronize State 1,…,n )；假設內部節點 I 共有
l 個，由於接收端移動到 I 代表發生傳遞性錯誤，接收端會繼續進行解碼，因此我們定義
這些子節點為 I1,…, Il，並定義 Λ為 Initial State。 
如此一來，多位元錯誤偵測的機率 PD代表錯誤發生後，解碼過程解碼端移動到 ES1,…,ESm
的機率和，解碼過程中，解碼端可能在錯誤發生的編碼便移動到 Error State，也有可能在
解碼數個錯誤的編碼後移動至 Error State，我們令 P(q|p)表示從 State p 解碼一個 codeword
至 State q 的機率，在我們的研究中，這個 codeword 可能發生 1 個以上的位元錯誤。 
因此，PD 可以表示成以下的數學式(1): 
PD = ΣiP(ESi|Λ) + Σi,jP(ESi|Ij)P(Ij|Λ) + Σi,j,kP(ESi|Ik)P(Ik|Ij)P(Ij|Λ) + …   (1) 
而 PS 可以表示成以下的數學式(2): 
PS = ΣiP(Syni|Λ) + Σi,jP(Syni|Ij)P(Ij|Λ) + Σi,j,kP(Syni|Ik)P(Ik|Ij)P(Ij|Λ) + …  (2) 
我們因此歸納出計算 PD與 PS 所必須具備的資訊包括： 
1) P(ESi|Λ), P(Syni|Λ)及 P(Ij|Λ)：表示從起始狀態解碼一個 codeword (codeword 可
能發生一個以上的位元錯誤)後，解碼端分別落在 Error State, Synchronize State 
及 Internal node 的機率。 
2) P(Ik|Ij)：表示從第 j 個內部節點解碼一個 codeword (codeword 可能發生一個以上
的位元錯誤)後，解碼端落在第 k 個內部節點的機率。 
3) P(ESi|Ik)及 P(Syni|Ik)：表示從第 k 個內部節點解碼一個 codeword (codeword 可能
發生一個以上的位元錯誤)後，解碼端分別落在 Error State 及 Synchronize State
的機率。 
以下，我們利用一個簡單的例子來進一步說明，假設一個 A = {a1, a2, …, a5}代表原始壓縮
資料的所有資料所形成的集合，p(ai)代表資料 ai的機率，所有資料將進行 RVLC 編碼成 R 
= {00, 010, 011, 110, 111}，RVLC Tree 如圖一所示。在圖一中，我們可以看出，Synchronize 
State 即 RVLC codeword {00, 010, 011, 110, 111}，Error State 為我們加入作為錯誤偵測的
節點{10}，內部節點 I 則為{0, 1, 01, 11}，同時我們假設每一個位元發生錯誤的機率為 E，
並列出一個表格(表一)說明每一個 RVLC 編碼當錯誤發生時可能的變化。 
 
 7
根據表一，我們若將表格內容根據解碼狀態來整理，便可得出從起始點 Λ解碼一個發生位
元錯誤的 RVLC 編碼後，可能落在不同狀態的機率值，整理結果如表二所示。 
 
起始
點 
解碼 
狀態 符號 機率 
Λ Syn1 P(Syn1|Λ) 0 
 Syn2 P(Syn2|Λ) P(a3)*E*(1-E)2+P(a4)*E*(1-E)2+P(a5)*E2*(1-E) 
 Syn3 P(Syn3|Λ) P(a2)*E*(1-E)2+P(a4)*E2*(1-E)+P(a5)*E*(1-E)2 
 Syn4 P(Syn4|Λ) P(a2)*E*(1-E)2 +P(a3)*E2*(1-E)+P(a5)*E*(1-E)2 
 Syn5 P(Syn5|Λ) P(a2)*E2*(1-E)+P(a3)*E*(1-E)2+P(a4)*E*(1-E)2 
 
ES1 P(ES1|Λ) 
P(a1)*E*(1-E)+P(a2)*E2*(1-E)+P(a2)*E3+P(a3)*E2*(1-E)+ 
P(a3)*E3+P(a4)*E*(1-E)2+P(a4)*E2*(1-E)+P(a5)*E*(1-E)2+ 
P(a5)*E2*(1-E) 
 I1 P(I1|Λ) P(a2)*E*(1-E)2+P(a3)*E2*(1-E)+P(a4)*E2*(1-E)+P(a5)*E3 
 I2 P(I2|Λ) P(a2)*E2*(1-E)+P(a3)*E*(1-E)2+P(a4)*E3+P(a5)*E2*(1-E) 
 I3 P(I3|Λ) P(a1)*E*(1-E)  
 I4 P(I4|Λ) P(a1)*E2  
表二、以圖一的 RVLC 為例，用來說明當位元錯誤率為 E 時，從起始點 Λ開始解一個編
碼(codeword)後，可能落在不同狀態的機率值 
依照同樣的方式，我們便可以依序得出 P(Ik|Ij)、P(ESi|Ik)及 P(Syni|Ik)。 
我們進一步將所計算之機率以矩陣表示，其中一維矩陣包括： 
SYNRoot = [P(Syn1|Λ), P(Syn2|Λ), P(Syn3|Λ), P(Syn4|Λ), P(Syn5|Λ)],  
ESRoot = [P(ES1|Λ)],  
InterNodeRoot = [P(I1|Λ), P(I2|Λ), P(I3|Λ), P(I4|Λ)],  
二維矩陣包括： 
SYNi,j = P(Syni|Ij)，表示第 j 個 internal node 經過一個編碼後，落於 Syni的機率, 
ESi,j = P(ESi|Ij)，表示第 j 個 internal node 經過一個編碼後，落於 ESi的機率, 
InterNodei,j = P(Ii|Ij)，表示第 j 個 internal node 經過一個編碼後，落於第 i 個 internal 
node 的機率。 
假設 I 表示由 1 所形成之一維矩陣，因此，數學式(1)可改寫成矩陣形式： 
PD = ESRoot * I + ES * InterNodeRoot * I + ES * InterNode * InterNodeRoot * I + 
ES * InterNode2 * InterNodeRoot * I +… 
= ESRoot * I + ES * (ΣInterNodei) * InterNodeRoot * I 
同理數學式(2)可改寫成 
PS = SYNRoot * I + SYN * (ΣInterNodei) * InterNodeRoot * I。 
計算多位元錯誤偵測與同步平均長度(LD與 LS)的方法與計算 PD與 PS 類似，即 
LD = ESRoot * I * 1 + ES * InterNodeRoot * I * 2 + ES * InterNode * InterNodeRoot * I * 3 
 9
CHUJ99 T. Chujoh and T. Watanabe, “Reversible variable length codes and their error 
detectingcapacity,” in Proc. Picture Coding Symp., Portland, OR, Apr. 1999, pp. 
341–344. 
FRAE90 A.S. Fraenkel and S.T. Klein, “Bidirectional Huffman coding”. Comp. J., vol. 33, no. 
4,1990, pp.296-307. 
GAO03 S.S. Gao and G.F. Tu, ”Robust H.263+ video transmission using partial 
backwarddecodable bit stream (PBDBS)”, IEEE Trans. Circuits and Systems for 
VideoTechnology, vol. 13, no. 2, Feb. 2003, pp.182-187. 
HEMA00 S.S. Hemami,”Robust image transmission using resynchronizing variable-length 
codesand error concealment”, IEEE Journal on Selected Areas in Commun., vol. 18, 
no. 6,June 2000, pp.927-939. 
HUAN05 B. Huang, A. Ahuja, H.-L. Huang, T. J. Schmit, and R. W. Heymann, 
“Ultraspectralsounder data compression using error correcting reversible 
variable-length coding,” in Proc. SPIE, Vol. 5889, 2005, pp. 167-176. 
HUAN06 B. Huang, A. Ahuja, H.L. Huang, and M. Goldberg, “Real-Time DSP 
Implementation of 3D Wavelet Reversible Variable-length Coding for Ultraspectral 
Sounder Data Compression,” in Proc. IEEE Int. Conf. Geoscience and Remote 
Sensing Symp., Jul. 2006, pp. 3545-3548. 
ISO99 ISO/IEC JTC1/SC29/WG1/N1164, “Coding of Still Pictures,” 1999. 
ISO01 ISO/IEC JTC1/SC29/WG11/N4350, “ISO/IEC 14496-2: MPEG-4 video draft 
international standard; Annex E”, July 2001. 
ITU99 ITU-T Recommendation, “G.722.1, coding at 24 and 32 Kbit/s for hands-free operation 
in systems with low frame loss,” 1999. 
ITU00 ITU-T Recommendation, “H.263, video coding for low bit rate communication,” Annex 
V, 2000. 
JEON03 W.H. Jeong and Y.S. Ho, “Design of symmetrical reversible variable-length codes 
from the Huffman code,” in Picture Coding Symp., Apr. 2003, pp. 135–138. 
JEON04 W.H. Jeong and Y.S. Ho, “Generic code design algorithms for reversible 
variable-length codes from the Huffman code,” in Proc. The Int. Workshop on 
Advanced Imaging Technology, Singapore, Jan. 2004, pp. 111-115. 
KUKO02 Z. Kukorelly and K. Zeger, “New binary fix-free codes with Kraft sum 3/4,” in Proc. 
IEEE Int. Symp. on Inform. Theory, June 2002, pp.178. 
KUMA03 S. Kumar and L. Xu, “Data Recovery using Improved RVLC in MPEG-4,” in Proc. 
SPIE ITCOM, Sep. 2003. 
KUMA04 S. Kumar and L. Xu, “RVLC decoding scheme for improved data recovery in 
MPEG-4 video coding standard,” Real-Time Imaging, vol. 10, Issue 5, Oct. 2004, 
pp. 315-323. 
LAKO02a K. Lakovic and J. Villasenor, “On design of error-correcting reversible variable 
length codes”, IEEE Commun. Letters, vol. 6, no. 8, 2002, pp. 337-339. 
