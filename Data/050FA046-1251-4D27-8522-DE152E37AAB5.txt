 1
報告內容 
一、前言 
Zadeh[11,13]指出目前知識處理的工作，最欠缺的能力有兩點，包括(1)缺乏知識推論能
力，通常只能搜尋知識而無法針對某一個查詢推論出適當的解答出來，以及(2)真實世界中
的 perceptional knowledge，本質上皆為模糊的，傳統的二價邏輯無法處理知識中的部份確
定、部份可能、和部份真實等問題。Yang 等人[10]分析了 fuzzy logic、first order predicate 
logic、與 non-monotonic logic 作為知識表示法的優缺點後，進一步指出以模糊邏輯作為知
識管理的知識表示法可以更準確地表達知識的語意。因此，本研究計畫提出一個系統化架
構（如圖一所示）來管理與應用模糊化知識，包括有 fuzzy knowledge representations、fuzzy 
inference rules、fuzzy knowledge modeling、fuzzy knowledge verification、fuzzy knowledge 
storage、和 fuzzy knowledge querying 等六個部分。首先，使用圖形化的知識表示法，讓使
用者容易了解及表達知識，有助於內隱知識的取得，並將知識表示法予以模糊化，以作為
建立模糊知識模型的圖形表示法與正規化基礎；其次，根據模糊知識表示法的正規化基礎，
研究模糊知識表示法的推論規則，以提供模糊知識的驗證與查詢之推論基礎；第三，提出
模糊知識模型，使用一致性的模糊知識表示法來同時表達宣告性知識與程序性知識，並提
供模糊知識推論之能力；第四，提供驗證模糊知識之機制，檢查模糊知識是否有語法性錯
誤、結構性錯誤、或語意性錯誤，以因應知識的不斷改變，防止不一致的知識更新產生；
第五，發展一個階層式的 ontology 系統來儲存模糊知識模型，並提供模糊知識的分類機制，
處理共同知識與個別特定知識的問題；最後，提供具語意基礎的模糊化知識查詢語言，讓
使用者可以很方便地查詢所需知識，並可經由模糊推論規則推論出進一步的解答，以減輕
資訊超載的問題。 
 
 
 
 
 
 
本研究計畫分三年進行，第一年完成的是模糊知識表示法（Fuzzy Knowledge 
Representations）與模糊推論規則（Fuzzy Inference Rules）兩個部分。今年為執行的第二年，
完成的是模糊知識模型 (fuzzy knowledge modeling)與模糊知識儲存 (Fuzzy Knowledge 
Storage)兩個部分。在未來第三年的計畫執行中，將繼續完成模糊知識驗證(Fuzzy Knowledge 
Verification)與模糊知識查詢(Fuzzy Knowledge Querying)兩個部分。 
二、研究目的 
在使用模糊化概念圖形法建立模糊知識模型時，我們先要了解有哪些知識是需要表達與
組織的，知識管理所涵蓋的知識範圍非常廣泛，包括企業流程、市場行銷、產業活動、人
圖一､模糊知識管理系統架構
Fuzzy 
Knowledge 
Modeling 
Fuzzy 
Knowledge 
Verification
Fuzzy 
Inference Rules
Fuzzy 
Knowledge 
Storage 
Fuzzy 
Knowledge 
Querying 
Fuzzy 
Knowledge 
Question 
Answering 
Fuzzy Knowledge 
Representations 
 3
z 知識管理系統必須能支援更新的能力，因知識是不斷地改變與創新的。 
z 知識工作者之間必須對於所處理的問題與知識有共同的瞭解與認知，才能共享知識
與相互操作。 
z 資訊超載的情況讓知識工作者不容易找到真正所需的知識，因此必須提供語意基礎
的擷取機制讓知識工作者可以搜尋到相關知識。 
z 缺乏系統化的方法，知識管理必須能結合整個企業程序與整合各種不同的知識管理
工具以達到企業目標。 
模糊理論領域的專家學者也進行研究模糊知識的處理方法，並以模糊邏輯的觀點探討
真實世界中知識的不明確性與不確定性[10,11,13]。 
Zadeh 提出 Precisiated Natural Language (PNL)方法[11,12]，根據模糊邏輯為基礎來處
理模糊知識中所隱含的 partiality of certainty、partiality of possibility、和 partiality of truth，
以提供模糊知識的推論能力。PNL 使用 generalized constraints 形式的自然語言將知識中每
個 proposition 的意義都描述出來，再將此自然語言形式轉換成為 Generalized Constraint 
Language (GCL)，經由 GCL 的限制組合、限制限定、與限制傳播規則的執行，來達到模糊
知識的推論工作。 
Yang 等人[10]定義知識的特性共有五種使用方式，包括概念化、轉換、修改、整合、
和分解。並根據這五種使用方式去比較以 fuzzy logic、first order predicate logic、與
non-monotonic logic 作為知識表示法的優缺點，從分析的結果得知，在表達知識語意的準確
性上，以模糊邏輯作為知識表示法可以最準確地表達知識的語意，其次為 non-monotonic 
logic，以 first order predicate logic 為最差；而在表達知識的完整性上，模糊邏輯則是介於 first 
order predicate logic 與 non-monotonic logic 兩者之間，以 non-monotonic logic 為最差。 
四、研究方法 
依據 Mineau [5]所指出，完整表達知識的基本元件需包含 object、relationship、
structure、behavior、time、constraints、context、state、condition、process、function、classification、
和 assembly。其中物件（object）、關係（relationship）、結構（structure）、時間（time）、本
文環境（context）、狀態（state）、條件（condition）、分類（classification）、和組合（assembly）
可以描述宣告性知識，而行為（behavior）、限制（constraint）、程序（process）、和功能（function）
則著重於描述程序性知識。 
我們可以利用模糊化概念圖形法來表示這些知識的基本元件（如圖二所示），模糊化
概念圖形法的 fuzzy concept 可以表達物件，fuzzy relation 表達關係，fuzzy concept 與 fuzzy 
relation 所形成的語意網路可以表達知識結構，時間可以運用 fuzzy concept 和 fuzzy context
來表達，本文環境與狀態可以用 fuzzy context 表達，條件可用 fuzzy proposition 表達，fuzzy 
type lattice 可以表達分類結構，fuzzy  relation 可以表達組合關係，行為和程序可用 fuzzy 
demon 表達，限制可以用 fuzzy actor 與 fuzzy context 表達，功能可以用 fuzzy actor 與 fuzzy 
demon 表達。 
 
 5
(3) 將新增的型態加入 fuzzy type lattice 中(或改變現有型態在 fuzzy type lattice 中的模
糊包含程度或儲存位置)。 
(4) 使用模糊知識驗證來檢查改寫後的下層節點 ontology 是否有語法上、結構上、或
語意上的錯誤，若無錯誤發生即可放入階層式 ontology 系統中。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
圖三､更新模糊知識儲存架構的五種操作型態 
我們可以根據模糊知識的使用頻率與相互關係的統計資料來隨時調整模糊知識的儲
存架構，如圖三所示，我們建立了五種型態的操作來進行儲存架構的更新，包括 split、
merge、move、lift、和 lower，讓模糊知識的查詢工作可以更有效率。知識工作者在查詢知
識時，可以透過階層式 ontology 系統選擇適合領域的模糊知識模型來查詢，選擇上層的
ontology 可以應用共同的一般知識定義，選擇下層的 ontology 可以應用各領域個別的知識
定義。階層式 ontology 系統可以適度地減輕資訊超載的問題，使用者透過選擇最適合領域
的 ontology 可以有效地減少查詢所需的搜尋空間，而且所查詢得到的解答知識將會是符合
領域所需，以減少出現不符合 context 之不合理答案的機會。 
五、結果與討論 
本計畫歸納整理多位專家學者所提出的一般知識管理系統所遭遇的難題，使用模糊化
D2 n1 n2 
n3 n4
n5 n6 n7 
n8 
D1 
D3
n9D4 n10
D2 n2 
n3 n4 n5 n6 n7 n8 
D1 
D3
n9
n1
n10
D4 n1 n2
n3 n4 n5 n6 n7 n8 
D1 
n9 n10
D2 n2 
n3 n4 n5 n6 n7 n8 
D1 
D3 
n9
n1 
n10
D2 n2
n3 n4 n5 
n6 n7 
n8 
D1 
D3
n9
n1 
n10
D2
n2
n3 n4 n5 n6 n7 n8 
D1 
D3 
n9
n1 
n10
(a) (b) Split
(c) Merge (d) Move
(e) Lift (f) Lower
