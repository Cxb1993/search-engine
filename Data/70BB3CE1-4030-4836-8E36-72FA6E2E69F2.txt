usually seek either the max-flow or min-cost 
over a network with flows satisfying the node 
flow balance constraints and arc flow bounds 
(including lower and upper bounds) 
constraints. These constraints are simplified 
from real-world applications, and are not 
sufficient to model some real cases, for 
example, the synthesis and distillation of 
products in some manufacturing processes. 
For this purpose, Fang and Qi [FQ03] 
proposes a generalized network model called 
manufacturing network flow (MNF). A MNF 
model considers three specialized nodes: 
I-nodes, C-nodes and D-nodes, besides 
conventional nodes (S-nodes, T-nodes, and 
O-nodes) in literature. They define a 
specialized MNF model called distribution 
network which contains only D-nodes as well 
as conventional nodes. Two optimization 
problems on a distribution network are given: 
(1) Maximum Distribution Flow Problem 
(MDFP) and (2) Minimum Distribution Cost 
Problem (MDCP).  
A D-node only connects with a single 
incoming arc and several outgoing arcs 
where the flows entering a D-node have to be 
distributed according to a pre-specified ratio 
associated with each outgoing arc. Such a 
proportional relationship between the arc 
flows associated with each D-node 
complicates the problem and makes the 
MDFP and MDCP harder than the max-flow 
and min-cost network flow (MCF) problem. 
Based on Fang and Qi’s paper, we have 
further identified several challenging 
research topics: First, the modified network 
simplex algorithm by Fang and Qi is not 
complete and require further investigations. 
For example, it is only suitable for the 
MDCP with unlimited arc capacity and is 
also lack of detailed procedures to obtain an 
initial primal basic feasible solution to start 
the algorithm, and to graphically instead of 
algebraically update the dual variables.  
Since an uncapacitated MCF can be 
regarded as a shortest path problem, we will 
investigate ways to modify traditional 
shortest path algorithms for solving an 
uncapacitated MDCP, which is supposed to 
be more efficient than the modified network 
simplex method by Fang and Qi. We shall 
also investigate new methods to solve the 
MDFP based on traditional max-flow 
solution methods, analyze their theoretical 
performance, as well as the max-flow 
min-cut property which may not be hold 
anymore for MDCP. A network compaction 
scheme and its complexity will also be 
investigated to simplify a given distribution 
network into an equivalent compacted 
network with smaller size. In order to 
perform computational evaluation on 
solution methods for MDCP and MDFP, we 
will propose and implement a random 
network generator that generates random 
distribution networks guaranteed to be 
acyclic, connected and in a compact form. 
 
Keywords: Manufacturing Network; 
Distribution Network; Max-Flow; Shortest 
Path; Min-cost Flow Problem; Random 
Network Generator 
 
二、緣由與目的 
 
The distribution network model is first 
introduced by Fang and Qi [FQ03]. Besides 
the three types of nodes (i.e. S-nodes, 
T-nodes, and O-nodes), the distribution 
network model further introduces a type of 
distillation node, denoted by D-node, as the 
half-circle previously appeared in Figure 1.  
A D-node i has only one incoming arc (l,i) 
and at least two outgoing arcs called 
distribution arcs. Each distribution arc (i,j) is 
associated with a positive rational number, 
denoted by , to specify the percentage of 
the flow in (l,i) to be distributed into the 
distribution arc (i,j). We also assume
ijk
1ijk =∑  
i D∀ ∈  and  for each distribution arc 
(i,j). Let 
0ijk >
ijx  represents the flow in arc (i,j), 
then the flow along each distribution arc (i,j) 
for a D-node i with one incoming arc (l,i) can 
be calculated by 
ij ij lix k x= . We call the 
relationship for flows on arcs connecting a 
D-node as "flow distillation", and  as a 
distillation factor. For each distribution arc 
(i,j), we define a normalized capacity 
ijk
/ij ij iju u k=  to represent the least amount of 
flow required in arc (l,i) to saturate arc (i,j). 
 
 2
subgraph, decomposing components, solving 
for variables associated with each component, 
and then calculating flows inside each 
component. 
 
3. Solving UMDCPs 
 
Fang and Qi [FQ03] first discuss the 
following UMDCP: 
( , )
min
∈
∑ ij ij
i j A
c x               (UMDCP) 
( ) ( )
. . 0
∈ ∈
− = ∀ ∈∑ ∑ji ij
j E i j L i
Os t x x i N         (1) 
( )∈
≤ ∀ ∈∑ ij i S
j L i
x u i N         (2) 
( )∈
≥ ∀ ∈∑ ji i
j E i
Tx d i N         (3) 
0 ( , ), ( , ) ,∗ ∗− = ∀ ∈ ∀ ∈ij ij Di ix k x i j i i A i N  (4) 
where 
( , ) iji j A∈  for each 1k =∑ Di N∈ . They 
propose a network simplex algorithm to 
solve this problem. However, they do not 
give procedures for obtaining an initial basic 
feasible solution to start their method. 
Neither do they specify steps to update dual 
variables. Techniques in solving the 
conventional minimum cost network flow 
problems such as the network simplex 
algorithm can not be directly applied here 
due to the appearance of the distillation 
constraint (4). The distillation constraint also 
destroys the property of total unimodularity 
which makes the optimal flow not 
necessarily be integral. 
 
3.1 UMDCP1 
 
In this paper, we focus on two problems 
similar to the UMDCP of Fang and Qi (2003). 
We first formulate our problems and then 
develop solution methods based on Dijkstra's 
algorithm. 
Our first uncapacitated minimum 
distribution cost problem, UMDCP1 , finds 
the minimum cost to connect a source node 
( -node) to one termination nodes (T -node) 
using arcs in a distribution network. In this 
problem, we only consider the dependency of 
arcs connecting to a -node and ignore its 
flow distillations. Here we consider the 
one-to-one case that satisfies the demand of a 
specific termination node from a specific 
source node. 
S
D
To formulate the one-to-one UMDCP1, 
we associate each outgoing arc of each 
-node  with another parallel artificial arc 
 and set its length to be the same as  
 . This parallel arc    is a copy of 
the arc  ( ,  .When appears in a 
solution to a one-to-one UMDCP1, it means 
the -node  i   is in the main path 
connecting 
( , )i j
D i
( , )i j ′
ijc ( , )i j ′
)i j ( , )i j ′
D
s  and   but the -node  
is not (  can be viewed as a side-product). 
On the other hand, if ( ,  appears in a 
solution, it means both the 
t O j
j
)i j
D -node  and  
-node  are in the main path connecting 
i
O j
s  and  (  can be viewed as a major 
product). So, arc  and arc  
t j
( , )i j ( , )i j ′  can 
not appear in a solution at the same time. If 
either  or ( , )i j ( , )i j ′  appears in a solution, it 
means the  -node    must be in the 
main path and thus the fixed cost of   
(or  
D i
( , )i j
( , )i j ′  ) has to be made. For each 
termination node  in T  , if  is the 
requested termination node, we set its 
demand  
i N i
( ) 1d i =  , otherwise   . Let 
 be the set of all arcs  from each 
( ) 0d i =
B ( , )i j ′
Di N∈  and ( )j L i∈ . We can formulate a 
UMDCP1 problem as follows: 
1
( , ) ( , )
( ) ( )
( )
( , ) ( )
min                                       (UMDCP )
. . 0
( )
0 ( ), ( ),
1
,  {0,
ij ij ij ij
i j A i j B
ik ji O
k L i j E i
ji T
j E i
ji ik ik D
ik D
i k A i
ij ij
c x c x
s t x x i N
x d i i N
x x x j E i k L i i N
x i N
x x
′
∈ ∈
∈ ∈
∈ ′
∈′
+
− = ∀ ∈
= ∀ ∈
− − = ∀ ∈ ∀ ∈ ∀ ∈
≤ ∀ ∈
∈
∑ ∑
∑ ∑
∑
∑
1} ( , )  and ( , )i j A i j B∀ ∈ ∀ ∈
 
The objective function minimizes the 
total cost of all the original and artificial arcs 
in the network. The first constraint is the 
flow balance constraint for all -nodes. The 
second constraint requires all -nodes to 
satisfy their demands. The third and forth 
constraints are relative to -nodes which 
show that only one of the original arc and the 
artificial parallel arc can be selected, and if 
an original arc from a -node is selected, 
the parallel arcs of other outgoing arcs from 
the same -node will also be selected. The 
fifth one means that all ij
O
T
D
D
D
x  and ijx′  are 
binary. That is, arc ( ,  is selected, if )i j
1ijx =  or ij 1x′ = ; arc  is not selected if ( , )i j
0ijx =  and 0ij . x′ =
This 0-1 integer programming problem 
can be solved by some optimization 
softwares like Lindo, Lingo or CPLEX. Here 
we present two combinatorial algorithms to 
solve it. 
Let s  be the only supply node in a 
distribution network .  is the set 
of permanently labeled nodes. 
( , )=G N A S
S  is the set 
of temporarily labeled nodes, and  S S N∪ = . 
The distance label to any permanently 
labeled node represents the shortest distance 
from the source to that node. For any 
temporarily labeled node, the distance label 
 4
among these outgoing arcs, only one will be 
in the main path connecting s  and .  t
 6
To formulate the one-to-one UMDCP2, 
we construct a transformed network G ′  by 
adding a parallel artificial arc  and set 
its length to be ij  for each arc  out of 
a -node . Like UMDCP2, when a 
-node  lies on a main path connecting 
the requested source and termination nodes, 
only one of its outgoing arcs will appear in 
the main path. In that case, we select that arc 
together with all other parallel arcs into the 
solution. The flows on these selected arcs can 
be calculated according to the distribution 
ratios. For each termination node  in  
we associate it with a demand  
where  if  is the requested 
termination node. Let  be the set of all arc 
 for each  
( , )i j ′
c ( , )i j
D i
D i
i TN
( ) 0d i ≥
( ) 1d i ≥ i
B
( , )i j ′ Di N∈  and for each 
. ( )j L i∈
Unlike UMDCP1, here we must 
consider the flow value ijx  for each arc 
 and the distribution ratios ik  for each 
outgoing arc  of each -node . We 
associate a binary variable ij  to each arc 
 in the transformed network to denote 
whether the flow passes arc  (i.e., 
ij ) or not (i.e. ij
( , )i j r
( , )i k D i
y
( , )i j
( , )i j
1y = y 0= ). Suppose M  is a 
very large number, we can formulate the 
one-to-one UMDCP2 as follows: 
2
( , ) ( , )
( ) ( )
( )
min                                      (UMDCP )
. . 0
( )
0 ( ), ( ),
0 ( )
0
ij ij ij ij
i j A i j B
ik ji O
k L i j E i
ji T
j E i
ik ji ik ik D
ji ji D
ik ik
c x c x
s t x x i N
x d i i N
r x x x j E i k L i i N
x My j E i i N
x My
′
∈ ∈
∈ ∈
∈ ′
+
− = ∀ ∈
≥ ∀ ∈
− − = ∀ ∈ ∀ ∈ ∀ ∈
− ≤ ∀ ∈ ∀ ∈
− ≤
∑ ∑
∑ ∑
∑
( , ) ( )
( )
0 ( )
1
,  {0,1} ( , )  and ( , )
D
ik ik D
ik D
i k L i
ij ij
k L i i N
x My k L i i N
y i N
y y i j A i j B
′ ′
∈′
∀ ∈ ∀ ∈
− ≤ ∀ ∈ ∀ ∈
≤ ∀ ∈
∈ ∀ ∈ ∀ ∈
∑
 
The objective function minimizes the 
total cost for all arcs in , including those 
parallel arcs in the network. The first 
constraint is the flow balance constraint for 
all -nodes. The second one shows that all 
-nodes must satisfy their demand. The third 
constraint represents the flows on -nodes' 
outgoing arcs should obey the distribution 
ratios. The forth, fifth and sixth constraints 
stand for the relationships between the flow 
values and whether the flow passes an arc or 
not. That is, an arc  is selected ( ij
G ′
O
T
D
( , )i j 1y = ) 
if ij . Otherwise, arc  is not 
selected ( ij ) if ij
0x >
y = x
( , )i j
0 0= . The seventh and 
eighth ones are relative to -nodes: only 
one of the original arc and its parallel arc can 
be selected, and if an original arc is selected, 
then all other parallel arcs from the same 
-node will also be selected. ij
D
D 1y =  or 
1ijy
′ =  means arc  is selected, otherwise ( , )i j
0ij ij . y y′= =
This 0-1 integer programming problem 
can be solved by some optimization 
softwares like Lindo, Lingo or CPLEX. Here 
we present a combinatorial algorithm to 
solve it. 
Denote the amount of flow passing 
through each node i N∈  to be ix . Let  
and 
( )d i
_ ( )avg d i  (equals to i ) be the 
distance and the average distance from node 
( ) /d i x
s  to node  for . We give an 
algorithm in figure 5 similar to the one in 
Figure 2 to solve a one-to-one UMDCP2. In 
particular, the algorithm selects a node 
according to its average distance label 
i i N∈
_ ( )avg d i , instead of the original distance 
label . Whenever a D-node is 
encountered, the algorithm takes all of its 
outgoing arcs into account. Using the 
predecessor information, the optimal solution 
can be retrieved by the main path connecting 
from s to t, together with all the outgoing 
arcs of the D-nodes in the main path. 
( )d i
 
2Algorithm for one-to-one UMDCP
begin
    : { }; : ;
    ( ) : 0;  _ ( ) : 0;   :   ( , ) ( );
    ( ) : , _ ( ) : 0  ;
    pred( ) : 0  ;
    while  do
        select the node arg m
sj
S s S N S
d s avg d s x s j A s
d i avg d i i S
i i N
S N
i
β= = −= = = ∀ ∈
= ∞ = ∀ ∈= ∀ ∈≠
= in { _ ( ) : };
        : { };  : { };
        if   then
             for each arc ( , ) ( ) do
                  : ;
                  : , :   ( , ) ( );
                 
j
O
j ij
jk jk ij j ij
avg d j j S
S S i S S i
i N
i j A i
x x
x r x x x j k A j
∈
= ∪ = −∈
∈=
= = ∀ ∈
( , ) ( )
 if   then
                      ( ) : ( ) ;
                      _ ( ) : ( ) ;  pred( ) : ;
                      for each arc ( , ) ( ) do
                           if  
D
ij jkj k A j
j
j N
d j d i c c
avg d j d j x j i
j k A j
avg
∈
∈
= + +
= =
∈
∑
_ ( ) ( )  then
                               ( ) : ( );  
                               _ ( ) : ( ) / ;  pred( ) : ;
                  else  
                      if  _ ( ) ( ( ) )  the
k
k
ij ij j
d k d k x
d k d j
avg d k d k x k j
avg d j d i c x x
>
= = =
> + n
                           ( ) : ( ) ;  
                           _ ( ) : ( ( ) ) ;  pred( ) : ;
end
ij ij
ij ij j
d j d i c x
avg d j d i c x x j i
= +
= + =
 
The complexity of our one-to-one 
UMDCP2 algorithm is also the same as the 
conventional Dijkstra's algorithm. 
 
4. Preprocessing 
4.1 compacting capacity 
 
Parallel arcs connecting to the same end 
two directed cycles: (C1)-(C3)-(C2)-(C1) and 
(C2)-(C3)-(C2). Thus we may iteratively 
conduct (C1), (C3) and (C2) or (C2) and (C3) 
until they finish their inducing relations and 
then conduct (C4) in the end of the process as 
illustrated in the following algorithm 
COMPACT. 
 
Algorithm COMPACT(G) 
While (G is not in compact form) 
Case 1: detect a D-group, apply (C1)  
Case 2: detect a single transshipment 
O-node, apply (C2) 
Case 3: detect parallel arcs, apply (C3) 
End while 
Case 4: detect capacity-mismatched arcs, 
then apply (C4) 
 
Each time when any of compacting rules 
(C1), (C2) and (C3) is applied, the network 
will be reduced by at least one arc or one 
node. Thus the entire compacting process 
takes  time and produces a simplified 
network which has smaller size and is easier 
to detect the bottleneck for solve a maximum 
flow problem. 
2( )O m
 
 8
 
Figure 5. Inducing relations of different 
compacting rules 
 
4.2 compacting cost 
 
We may transform a distribution network 
into an equivalent one with smaller size by 
removing some nodes or arcs, or integrating 
some arcs. There are three possible cases for 
compacting a distribution network: Case 1 
compacts -nodes, Case 2 compacts 
-nodes, and Case 3 compacts parallel arcs.  
O
D
 
Case 1.  Any -node with only one 
incoming arc and one outgoing arc can 
be compacted.  
O
When an -node has a single incoming 
arc and a single outgoing arc, this -node 
can be regarded as a transshipment node. 
Thus, we can remove this O -node and 
merge its adjacent arcs into one arc with a 
new cost equals to the summation of the 
costs on the two original arcs. 
O
O
Take the distribution network in Figure 6(a) 
for example. After removing node 4 and 
merging arc (2,4) and (4,5), we have arc 
(2,5) with cost   as shown in 
Figure 5(b). After this compacting 
procedure, one -node and one arc can 
be removed each time. Hence, Case 1 will 
be executed  times. 
3 2 5+ =
O
( )O n
 
Figure 6.  Any O-node with only one 
incoming arc and one outgoing arc can be 
compacted. 
 
Case 2. Nodes in the same -group can be 
compacted into a -node.  
D
D
A -group is a set of adjacent -nodes. 
Depending on the problem characteristics, 
we discuss two subcases: (1) Case 2.1 for 
UMDCP1, which only considers the flow 
dependency relation but not the 
distribution ratios and arc flow; and (2) 
Case 2.2 for UMDCP2, which considers 
the distribution ratios of a -node and arc 
flows.  
D D
D
Case 2.1: In UMDCP2, we can merge all 
adjacent -nodes to be the top -node 
closest to the source node. Then we add 
new arcs from this -node to all the 
-nodes adjacent to the -group. The 
compacting procedures are as follows: 
D D
D
O D
 
Step 0: Identify a -group D G  which 
contains several adjacent -nodes. 
Suppose its top -node 0  is connected 
from an -node . Repeat Step 1 to Step 
3 for each 
D
D j
O 0i
G . 
Step 1: Identify all the O -nodes (say, 
1, ,v vχ…
j j
 ) adjacent to this -group. For 
each arc ( ,a b  that connects -nodes 
 and  in 
D
) D
aj bj G  , we count the number 
(C1) 
D-groups 
(C2) 
1-in,1-out 
O-nodes 
(C3) 
Parallel 
arcs 
(C4) 
Mismatched 
arcs 
 
Figure 9.  Parallel arcs connecting to the 
same nodes can be compacted (1). 
 
 
Figure 10.  Parallel arcs connecting to the 
same nodes can be compacted (2). 
 
 
Figure 11.  Parallel arcs connecting to the 
same nodes can be compacted (3). 
 
In summary, we observe two properties 
for a compacted distribution network. First, 
every intermediate node (i.e. an O-node or a 
D-node) is adjacent to at least three arcs, 
including one incoming arc and one outgoing 
arc. Second, D-node will not be adjacent to 
any other D-node. By these observations we 
may easily check whether a distribution 
network is compactable. For a distribution 
network not in its compact form, we may 
compact using the algorithm COMPACT. 
 
5. Random Network Generator 
 
There are several parameters such as n  (the 
total number of nodes), umax  (the maximum 
capacity for an arc) and  
outdeg_Dmax,outdeg_Omax  (the maximum 
outgoing-degree for a D -node and an O 
-node) that a user can specify to generate 
suitable networks. These parameters can not 
be arbitrarily set. For example, n  must be 
larger than 3  because three nodes can not 
form a compacted network. The example in 
Figure 12 shows that a simple network 
formed by only three nodes can be 
compacted. Besides, outdeg_Dmax  must be 
larger than 1  because each D-node has at 
least two outgoing arcs. The network should 
be connected, so every node except the 
T -node has at least one outgoing arc. For this 
reason, outdeg_Omax  must be larger than  
0  . 
 
Figure 12.  A network with only three 
nodes is not a compact network 
 
We group the nodes into two set USE  and 
UNUSE . The set USE  contains the nodes 
that have been added into the network, while 
UNUSE  refers to the nodes that still wait to 
be added into the network. Every node i  has 
a distance label di  indicating its distance 
away from the source. We use the maximum 
number of arcs from the source to a node as 
its distance label. The notation used for 
constructing a random network generator is 
summarized as below. 
at_least_one_D : flag to record if there is 
any D-node 
di : the distance from source to node i . 
USE : the set of nodes that has been put 
into the network 
UNUSE : N ∖ USE : the set of nodes that 
have not been put into the network, 
LEAF : the set of nodes in USE  without 
outgoing arcs 
FARTHERi : the set of O-nodes in USE  
with distance label equal to or larger than 
di  
AVAi : UNUSE  FARTHERi : the set 
of nodes that node i  can connect to, 
 10
has to specify its node type. When 
|AVAj|  is 1, which means there is only 
one eligible head node for node j  to 
connect to, so node j  must be an 
O-node. When node j  is the T -node, it 
must be an O-node. In other situations, 
the node type for node j  will be 
randomly decided. In any case, a leaf 
should be an O -node and a D -node 
must connect with an O-node since the 
random network should be in a compact 
form. Therefore, if a new node which is 
just removed from UNUSE  is decided 
to be a D -node by the generator, we 
change it to be a non-leaf by immediately 
deciding all of its outgoing arcs and force 
their head nodes to be O -nodes. 
Otherwise, the new node just removed 
from UNUSE  is decided to be an 
O-node and we will add it into LEAF . 
5) Modify the topology of the random 
network whenever necessary. 
Repeat step 1  to 4  until LEAF  
becomes empty. Since the node type is 
decided randomly, the generator may 
generate a network containing only 
O-nodes. In that case, the network will 
be erased and the generator will be re-run 
until a random network that contains a 
D-node is produced. Because we want to 
generate a compacted random 
distribution network, every incompact 
situation requires correction. In particular, 
when we detect a single transshipment 
O-node, the generator will add artificial 
arcs from a node of smaller or equal 
distance label to a single transshipment 
O-node. See Figure 13(c) for example. 
Suppose it contains a random network 
generated in the stage of empty LEAF . 
Since node 2  is a single transshipment 
O-node, we will randomly add an arc, 
say, from node 2  to node 5  to ensure 
the resultant network is in a compact 
form. 
 
六、計畫成果自評 
 
The research results of this project are 
well fit with the research purpose of the 
original proposal as follows.  
 
First, we have proposed model 
transformations and polynomial-time 
combinatorial algorithms to solve UMDCPs, 
which may be considered to be hard integer 
programming problems at first glance. 
Second, we give detailed preprocessing 
procedures in both the arc capacity and cost 
to compact a distribution networks into a 
smaller one. Our procedures can be done in 
polynomial time and simplify the original 
problem. Third, we design random network 
generator that can produce random networks 
with D-nodes so that we can generate random 
cases for future computational experiments. 
 
This research is suitable for publishing and 
the author is currently writing the manuscript 
for publishing. 
 
七、參考文獻 
[AMO93]  Ahuja, R., Magnanti, T., and 
Orlin, J., Network Flows: theory, 
algorithms and applications. Englewood 
Cliffs, NJ: Prentice Hall, 1993. 
[AO91] Ahaja, R. and Orlin, J. 
Distance-directed augmenting path 
algorithms for maximum flow and 
parametric maximum flow problems. Naval 
Research Logistics Quarterly, 38, 413-430, 
1991. 
[Be58]  Bellman, R. E. On a routing 
problem. Quarterly of Applied 
Mathematics, 16, 87-90, 1958.  
[Di59]  Dijkstra, E. W. A note on two 
problems in connexion with graphs. 
Numerische Mathematik, 1, 269{271, 1959. 
[Di69] Dial, R. Algorithm 360: Shortest 
path forest with topological ordering. 
Communications of the ACM, 12(11), 
632-633, 1969. 
[FF56] Ford, L. R. and Fulkerson, D. R. 
Maximal flow through a network. 
Canadian Journal of Mathematics, 8, 
399-404, 1956. 
 12
出席國際學術會議心得報告 
                                                             
計畫編號 NSC95-2221-E-006-268 (會計編號：A95-0964) 
計畫名稱 分配網路之最小分配成本流量與最大流量問題研究 
出國人員姓名 
服務機關及職稱 
王逸琳 
國立成功大學工業與資訊管理學系 
會議時間地點 2007/04/19~2007/04/21 於 日本東京工業大學 
會議名稱 Workshop on Advances in Optimization http://optlab.mcmaster.ca/~deza/tokyo2007.html 
發表論文題目 On solving the minimum distribution cost problem 
 
一、參加會議經過 
It is a little bit late for me to learn that this small and nice workshop 
(http://optlab.mcmaster.ca/~deza/tokyo2007.html) would be held in Feb. 2007, at which time 
the deadline (2006.12.31) for abstract submission is already long way passed. However, I still 
sent an email to the organizers: Prof. Antoine Deza (http://optlab.mcmaster.ca/~deza/) from the 
McMaster University at Canada and Prof. Shinji Mizuno 
(http://www.me.titech.ac.jp/~mizu_lab/indexe.html) from the Tokyo Institute of Technology at 
Tokyo, asking whether I can still participate this workshop. Fortunately enough, they finally 
succeeded in arranging an empty slot for me.  
 
Originally they put me into the last session of the workshop in Apr. 21 16:30~18:00, but 
later they were able to give me a better slot in Apr. 21 10:45~12:45 
(http://optlab.mcmaster.ca/~deza/program.html). Unlike conventional international conference 
with hundreds of participants, advantages for such a small workshop is that each participant 
has to make presentation in front of all the people, thus you can know others better and also be 
known better. The main theme of this workshop is to present researches related with 
optimization, and is dedicated to Prof. Masao Kojima (http://www.is.titech.ac.jp/~kojima/) for 
his 60 birthday in Feb. 
 
In order to save time in flight transit, I took ANA instead of EVA AIR or CHINA AIR. 
ANA has a direct fight from Kaohsiung to Narita in the morning. My flight departed around 
8:40am, Apr. 20 and arrived at Narita around 12:10pm, Apr. 20. I took the limousine bus which 
takes about 2hr to Shinjuku, Tokyo and stayed at the Century Southern Tower hotel Tokyo 
(http://www.southerntower.co.jp/chinese/index.html) located just besides the Shinjuku railway 
station. 
 
After settling down in hotel, I headed for the Fujitsu research lab 
 
In the break time, Prof. Kojima talked with me, “have we met before?”. I replied, “Yes!”, 
since in 2000 we did have met in Georgia Institute of Technology, when the ISMP 2000 was 
held by ISyE, my mother department when I was a Ph.D. student. At that time, I chatted with 
several Japanese researchers who are students of Prof. Kojima. I also guided them to their 
hotel from the reception room in campus. In fact, I might be the only one person that Prof. 
Kojima is not familiar with since most of other speakers were related with him or his students, 
except me. 
 
I went to lunch with Prof. Tien-Yien Li (http://www.mth.msu.edu/~li/), Prof. Yang Dai 
(http://array.bioengr.uic.edu/~yangdai/), Prof. Akiko Takeda 
(http://www.is.titech.ac.jp/~takeda/), and Prof. Sunyoung Kim (http://math.ewha.ac.kr/~skim/). 
Prof. Li is the other attendant from Taiwan for this workshop. His name was not familiar in the 
OR field, but is quite famous in the fields of Chaos. I have also met Prof. Takeda and Prof. 
Kim in ISMP 2000, but they did not remember.  
 
The other talks in Apr. 21 were not so interesting to me except the talk by Prof. Maiko 
Shigeno (http://infoshako.sk.tsukuba.ac.jp/~maiko/) from University of Tsukuba, who was a 
former Ph.D. student of Prof. Kojima and is currently a young expert in combinatorial 
optimization. After all the talks, I attended the banquet hold in a small Japanese restaurant. 
This is a rare experience for most of the attendants, since most banquets are supposed to be 
held in some high-class hotels or restaurants. At that moment, I learned that this small 
workshop does not receive any financial support from the government or organization, which 
is very rare. On the other hand, all the attendants are still willing to pay by themselves for such 
 
二、與會心得 
In this small workshop, only about 50 persons with 44 papers are presented. Most 
participants are local Japanese. There are others from Canada, United States, Singapore, Hong 
Kong, Germany, Austria, and Taiwan. Since the main theme is to celebrate Prof. Kojima’s 
birthday, most attendants do research related with Prof. Kojima’s, such as cone programming, 
interior-point methods, semi-definite programming, linear complementarity, nonlinear 
programming, convex optimization, and polyhedral homotopy method for problems involving 
polynomials. Since there are not so many people, I get more chances to know people in more 
depth. I learned that there are many young Japanese researchers doing serious research, 
investigating the state-of-the-art challenging problems, and have very positive attitudes in 
international research collaboration. All of these observations enlighten me a lot. There is 
indeed still much room for me to learn in the field of operations research. Every time I attend 
such a wonderful workshop or conference, I can feel I still have much to do and learn from 
those excellent researchers. Finally, I would like to thank NSC for giving me enough financial 
support for attending this workshop. 
 
 
 of its outgoing arcs called distillation arcs, according to a pre-specified ratio associated 
with each outgoing arc. For each D-node i  with entering flow *i ix  on its incoming arc 
, the flow distillation constraint specifies the flow on its distillation arc ( ,  to be ( *, )i i )i j
*=ij ij i ix k x  where  is a constant between 0 and 1. ijk
The MDCP can appear often in part of a supply chain network. Take Figure 1 as a 
reverse logistics network example. A recycled product collecting site M distributes a 
recycled product A which then will be decomposed (or distilled) into materials B and C in 
two different recycle plants (half-circled nodes), and finally transported to landfills T1, T2 , 
and T3. In this example, each recycle plant is a D-node; M is the S-node; T1, T2, and T3 
are the T-nodes; and all the other nodes are O-nodes. Suppose that each recycle plant can 
decompose one unit of A into 0.2 unit of B and 0.8 unit of C. Each arc in the reverse 
logistics network in Figure 1 represents some operation (e.g. transportation) associated 
with a unit cost as well as a capacity constraint. The MDCP in Figure 1 seeks the 
minimum possible total cost to satisfy the demand requirements of landfills T1, T2, and T3.  
 
M
T1
T2
T3
[0.2]
[0.8]
( )object,cost,capacity
[ ]material composition percentage
( )A,3,30
( )A,4,40
( )A,2,40
( )A,5,50
( )A,3,30
( )B,3,20
( )C,3,30
( )B,2,20
( )C,4,30
( )B,3,40
( )B,4,10
( )C,3,20
( )B,4,50
( )C,3,30
( )A,1,20
di i= the demand of T
d1=10
d2=20
d3=20
[0.2]
[0.8]
( )A,5,70
 
Figure 1. An MDCP example in a supply chain network 
 
 
i ij j
i
j'
j i
j
i'
α β
0.8
0.2
0.8
0.2
α: D-node β: C-node
(a) flow with loss (b) flow with gain  
Figure 2. Converting a generalized flow to the MNF model 
 
At first glance, the MDCP seems similar to the generalized network flow problem 
where the flow along an arc ( ,  may lose or gain based on a gain factor )i j ijµ  ,defined as 
the ratio of the flow arriving at the head node  to the flow leaving from the tail node i . 
In fact, the generalized flow problem is a special case of the MDCP model. Take Figure 
2(a) as an example. For each arc ( ,  with loss of flows (i.e. 
j
)i j 1ijµ < ), one may convert it 
 kind of D-node to decompose commodity 0 into η  commodities and one kind of C-node 
to combine commodity σ  from λ  commodities. Second, the distillation factor k  
associated with each D-node (or C-node) is assumed to be identical (i.e. 1k η=  for a D-
node, or 1k λ=  for a C-node). Moreover, the elementary procedures in their proposed 
network simplex algorithm are still pure algebraic rather than graphical operations.  
In short, several specialized MDCPs have been solved in the literature, yet their 
problems are more restrictive (e.g. [6], [8], [9], [7]) or lack graphical operations (e.g. [4], 
[6]). Since a network simplex algorithm should contain more graphical operations than 
pure algebraic operations like the conventional simplex algorithm, we propose here in this 
paper the detailed graphical operations for each elementary procedure in a network 
simplex algorithm for solving the MDCP. Our work provides a more efficient graphical 
implementation and more insights into the solution structures. The techniques developed 
in this paper can also be used to solve the problems in [7] and [9].  
The rest of this paper is organized as follows: Section 2 introduces definitions and 
notations, presents a model transformation for easier illustration, defines a basic feasible 
graph, and provides optimality conditions for our network simplex algorithm. Detailed 
procedures of our network simplex algorithm are illustrated in Section 3. Finally, Section 
4 summarizes and concludes the paper.  
 
2. PRELIMINARIES 
 
2.1. Notations and Model Transformation  
 
Let  be a directed simple graph with node set  and arc set ( , )=G N A N A . For each arc 
, we associate it with a unit flow cost  and a flow capacity  where the arc 
flow 
( , )∈i j A ijc iju
[0, ]ij ijx u∈ . For each node , we define the set of nodes connecting to and from 
it as 
∈i N
( ) : { : ( , ) }= ∈ ∈E i j N j i A  and ( ) : { : ( , ) }= ∈ ∈L i j N i j A , respectively. There are 
four kinds of nodes (see Figure 3): S-nodes, T-nodes, O-nodes, and D-nodes, and they are 
denoted by , , , and SN TN ON DN , respectively. An S-node is a source node connected 
only by outgoing arcs. A T-node denotes a sink node connected only by incoming arcs. 
An O-node represents a transshipment node connected with both incoming and outgoing 
arcs. Usually, an S-node is a supply node, a T-node is a demand node, and an O-node is 
for transshipment. We refer to these three types of nodes as conventional nodes since they 
only have to satisfy the flow balance constraints. A D-node connects with one incoming 
arc and at least two outgoing arcs. For each node ∈ Di N  with incoming arc ( * , the 
flow distillation constraint specifies 
, )i i
*=ij ij i ix k x  for the flow on its distillation arc ( , . 
Furthermore, we assume 
)i j
( )
1∈ =∑ ijj L i k  in order to satisfy the flow balance constraint. 
Without loss of generality, we assume all the networks in this paper to have already been 
compacted using the rules and algorithms by Wang and Lin [8] and Wang and Yang [9]. 
Also, we assume that the MDCP problem contains a finite optimal solution. 
   
 
 s
i
ui
ui
i
[ - ]
i
i
S
[ ]-dit
 
Figure 4. Transforming the MDCPFQ to the conventional minimum cost network flow 
model. 
 
Our modification successfully transforms MDCPFQ into a formulation similar to the 
conventional minimum cost network flow model where each node has an exact amount of 
supply or demand and each flow variable is associated with an arc containing both a head 
node and a tail node. In particular, as illustrated in Figure 4, each S-node and T-node, as 
well as the dummy nodes s  and t , all have a fixed amount of net flow. The modified 
formulation thus contains only two types of nodes: (1) the D-nodes, and (2) the other 
nodes denoted as the -nodes, including the original S-nodes, T-nodes, O-nodes, and the 
dummy nodes s  and . Let , then we update 
lO
t l { , }S O TON N N N s t= ∪ ∪ ∪ l= ∪ DON N N  
and . The new MDCP formulation after 
our transformation can be described as follows: 
{( , )} {( , } {( , ) : }S TA A s t s i j t j N= ∪ ∪ ∈ ∪ ∈) : i N
 
( , )
min                                                                                             (MDCP)ij iji j Ac x∈∑  
s.t.                       for                                                             (9)
S S
st si ii N i N
x x u s∈ ∈+ =∑ ∑  
( )
 0                                                                           (10)si ij Sj L ix x i N∈− = ∀ ∈∑  
( ) ( )
 0                                                                    (11)ij ji Oj L i j E ix x i N∈ ∈− = ∀ ∈∑ ∑  
( )
                                                                         (12)jt ij j Ti E jx x d j N∈− = − ∀ ∈∑  
               for                                        (13)
T T S
st jt j ij N j N i N
x x d u t∈ ∈ ∈− − = −∑ ∑ ∑   
( ) ( )
 0                                                                    (14)ij ji Dj L i j E ix x i N∈ ∈− = ∀ ∈∑ ∑  
* 0               , ( *, ) , ( , )                               (15)ij i i ij Dk x x i N i i A i j A− = ∀ ∈ ∈ ∈   
 0                         ( , )                                              (16)ij ijx u i j A≤ ≤ ∀ ∈  
 
where equations (9)-(14) define the flow balance for each node in , equation (15) is the 
flow distillation constraint associated with each D-node, and equation (16) defines the arc 
flow bounds. Note that we assume 
N
( )
1ijj L i k∈ =∑  which means that equation (14) can be 
derived from equation (15) and thus equation (14) is removable. This new formulation 
 Although our Lemma 1 seems similar to the properties proposed by Fang and Qi [4], 
they are not identical in the following sense: First, we generalized their results to deal 
with a capacitated MDCP whereas their results are only applicable for an uncapacitated 
MDCP. Second, we suggest a more specific way (property (v) in Lemma 1) to describe 
the relationship between  and a its induced spanning tree, which helps us to design 
the optimality conditions in Section 2.3 and our graphical network simplex algorithm in 
Section 3.  
( )BG x
 
2.3. Dual Variables and Optimality Conditions 
 
Let π i  and πi  be the dual variables associated with the flow balance constraint for each 
node  (equation (9)-(13)) and lOi N∈ ∈ Di N  (equation (14)), respectively. Let  denote 
the dual variable associated with the flow distillation constraint (equation (15)) for each 
distillation arc ( , . The constraints of the dual problem of an MDCP can be formulated 
as follows: 
ijv
)i j
l                     ,                                                        (17)i j ij Oc i j Nπ π− ≤ ∀ ∈  
l              ,                                                 (18)i ij j ij D Ov c i N j Nπ π− − ≤ ∀ ∈ ∈  
( )
       , ( )                                                 (19)i j jl jl ij Dl L j k c j N i E jπ π ν∈− + ≤ ∀ ∈ ∈∑  
 
For each distillation arc ( ,  leaving D-node , define )j l j ρ π= −jl j v jl  and 
( )
π ρ∈=∑j jl jll L j k . Since ( ) 1∈ =∑ jll L j k , we will have 
( )
π ∈−∑ j jl jll L j k v ( ) ( )π∈= −∑ jl j jll L j k v ( ) ρ∈= ∑ jl jll L j k π= j . Equation (17)-(19) can be 
rewritten as         
 
l                  ,                                                      (20)i j ij Oc i N j Nπ π− ≤ ∀ ∈ ∈  
l                 ,                                                    (21)ij j ij D Oc i N j Nρ π− ≤ ∀ ∈ ∈  
 
We apply the upper bound technique for linear programming to solve a capacitated 
MDCP. Specifically, when ij ijx u=  for an arc ( , , one may consider its orientation to be 
reversed. This also means that the check on its dual feasibility constraint has to be 
conducted conversely (e.g. replace the 
)i j
≤  with ≥  in equations (20) and (21)). The upper 
bound technique can also be implemented in the original model proposed by Fang and Qi 
[4], but their basic graph can not be guaranteed to be connected, which complicates the 
procedure to traverse along arcs for checking the dual feasibility. On the other hand, the 
basic graph is shown to be connected in our model by Lemma 1(iii). 
Let B, L, and U be the set of basic arcs, non-basic arcs at lower bound, and non-basic 
arcs at upper bound, respectively. Thus the set of all arcs = ∪ ∪A B L U . The dual 
optimality conditions are then as follows: 
 
1. For each arc ( , )i j B∈ ,  
l                  ,                                        (22)i j ij Oc i N j Nπ π− = ∀ ∈ ∈  
l                ,                                       (23)ij j ij D Oc i N j Nρ π− = ∀ ∈ ∈  
2. For each arc ( , )i j L∈ ,  
l                 ,                                         (24)i j ij Oc i N j Nπ π− ≤ ∀ ∈ ∈  
  
In particular, Step 1 through Step 3 identify 1n p− −  basic arcs, and Step 4 identifies 
another q  basic arcs. The flow assignments are feasible since all the supply and demand 
are satisfied. Furthermore, the basic dual variables can be calculated by setting : 0sπ = , 
l:  fi s or each i Oc i Nπ = − ∈ , :ij j ijcρ π= +  for each distillation arc ( , , and )i j
( )
:i j L i kij ijπ ρ∈=∑  for each Di N∈ . This procedure takes ( )O n q p+ −  time. 
 
3.2. Calculating the Basic Dual Solutions 
 
Fang and Qi [4] outlined this procedure without detailed graphical implementation. In the 
present paper we propose a basis partitioning technique that decomposes the basic graph 
into 1p +  basic components, in which each basic component is a tree and contains at least 
one D-node or one distillation arc. We show that all the dual variables on the same basic 
component can be expressed using a representative dual variable (e.g. the π  associated 
with some node in that basic component) due to its tree structure, so that we can use the 
1p +  representative dual variables to derive all the n q+  dual variables. A system of 
1p +  linear equations, composed by iπ ς=  for some node i N∈  or αβρ ς=  for some 
distillation arc ( , )α β  with a constant ς  , as well as p  equations of 
( )i ij L i
k j ijπ ρ∈=∑  for 
each Di N∈ , can be used to solve the 1p +  representative dual variables, and then to 
derive all the  dual variables. n q+
 
3.2.1. Decomposing the Basic Graph into Basic Components 
 
When solving the basic dual variables for a minimum cost network flow problem, the 
network simplex algorithm starts from any node i , sets π i  to be a fixed value ς  (e.g. 
0ς = ), and then calculates other dual variables by tracing basic arcs along the basic tree 
arcs. Here in MDCP, such a tracing operation is not trivial when a D-node is encountered. 
Specifically, when starting from a node ∈i N  one may trace along basic arcs and 
calculate other dual variables π  or ρ  using equations (22) and (23). However, when a D-
node i  is encountered, the tracing has to be stopped since the 1+iq  dual variables in the 
equation 
( )
π ρ∈=∑i j L i kij ij  associated with a D-node i  cannot be calculated using a single 
equation (i.e. equation (22) or (23)). A search algorithm such as the Depth-First Search 
(DFS) or Breadth-First-Search (BFS) can be used to trace the basic arcs and calculate the 
dual variables using equation (22) and (23), as long as we do not crossover a D-node. 
Once the search algorithm backtracks to its starting node it can start from any unvisited 
node and conduct the same operations until all the nodes in  have been visited. That is 
to say , D-nodes can be viewed as boundary nodes for the search algorithm.  
N
 
i
j
j
i
i
 
 47
48
46
56
59
BC2
BC1
BC3
BC1
BC3
BC2
 
Figure 6. An example of basic components 
 
For a D-node i  connecting with 1iq +  basic arcs in , the detachment will group 
the D-node i  into the basic component containing its entering node  (i.e. ), 
while all of its side-nodes belong to the other basic components. On the other hand, for a 
D-node  connecting with  basic arcs in , the detachment will create a basic 
component composed by an isolated D-node or side-node. For example, Figure 7(a) 
shows a case where the incoming arc ( *  for the D-node i  is non-basic, and Figure 7(b) 
gives another example where a distillation arc  for the D-node i  is non-basic.  
( )BG x
*i * (i E i∈ )
i iq ( )BG x
, )i i
( , )i j
 
ij
( )a ( )b  
Figure 7. Examples of basic components composed by an isolated node. 
 
Each basic feasible graph can be uniquely decomposed using our basis partitioning 
technique. The following are some properties of the basic components. 
 
Lemma 2.  
(i) The number of basic components is 1p + . 
(ii) Each basic component is a tree. 
(iii) The number of components containing at least one -node (i.e. not an isolated D-
node or side-node) is at most min
lO
{ 1, }+ −p n p . That is to say, the number of D-
nodes whose adjacent arcs are all basic is at most min{ , 1}p n p− − . 
 
Proof :  
 setting 1 1 0tπ = = , we will have p  representative variables ( : 2, , 1= +…it i p ) and a 
system of p  linear equations ( ).  
( )
:π ρ∈= ∈∑i ij ij Dj L i k i N
Let’s take Figure 6 as an example. Using 1 0π =  and the relations between dual 
variables as defined in Figure 6(b), the equations associated with flow distillation 
constraints: 4 460.4π ρ= 470.3  480.3ρ+  and 5 560.5π ρ=  590.5ρ+ρ+  can be expressed 
using  and , and we can compute 2t 3t 2 11.286= −t  and 3 20.5 8 2.357= + =t t . 
Although our basis partitioning technique requires us to solve a system of  linear 
equations for calculating the basic dual variables, this is already more efficient than 
solving a system of  linear equations as required in the network simplex 
method proposed by Fang and Qi [4]. In fact, the efficiency of our method can be 
improved further, if a better ordering in the sequence of components to be solved can be 
identified. For example, in Figure 6(b), D-node 4 is the boundary node for two 
components (
p
1n q p+ − −
1BC  and 2BC ), and D-node 5 is the boundary node for three components 
( 1BC , 2BC , and 3BC ). Setting  will have to solve a 3 0t = 2 2×  system of linear equations, 
whereas setting  or  will make the remaining system of linear equations 
become a triangular form, which can be solved more efficiently. 
1 0t = 2 0t =
To speed up this procedure, we may reduce the number of linear equations required to 
be solved. We first identify the following three types of basic components: (1) a basic 
component composed of an isolated D-node or side-node (e.g. Figure 7), (2) a basic 
component that contains exactly one D-node, some -nodes but no side-nodes (e.g. 
the
lO
3BC  in Figure 6), and (3) a basic component that contains no D-node, some -nodes, 
and some side-nodes whose associated distillation arcs are emanating from the same D-
node in the adjacent basic component. We call these three types of basic components leaf 
basic components since their dual variables only depend on a single dual variable without 
interacting with others. Thus, the dual variables inside a leaf basic component can first be 
left aside, and then later be derived from the dual variables of other non-leaf basic 
components. By Lemma 2(iii), we know that there are at most min  basic 
components that are not leaf basic components. Thus, we may at most solve a system of 
 linear equations which takes  time. Then, the 
calculation on the dual variables in the remaining leaf basic components takes  
time. In summary, the procedure to calculate all dual variables takes 
 time. 
lO
{ 1, }+ −p n p
min{ 1, }+ −p n p 3(min{ , ( ) })−O p n p 3
q
( )O p q+
3 3(min{ , ( ) } )O p n p n− + +
 
3.3. Finding an Entering Arc and Pivoting Flows 
 
After calculating the basic dual variables, any arc in  that violates the dual 
feasibility conditions (equation (24)-(27)) is eligible to enter the basis. A pivoting graph, 
obtained by adding the entering arc to the basic graph, contains more than one cycle since 
the original basic graph already contains cycles induced by the D-nodes. Thus the flow 
pivoting operations become more difficult and complicated. Similar to the computation 
on dual variables, the difficulty of flow pivoting lies in the design of an efficient 
procedure to pivot flows graphically, rather than algebraically. To this end, we apply the 
basis partitioning technique used in calculating the dual variables to design efficient 
graphical flow pivoting operations. There are two types of entering arcs: either the 
entering arc connects two nodes of the same component or it does not. We provide  
different procedures to conduct flow pivoting for these two cases. 
∪L U
 particular, two types of nodes are removable: (1) any -node connecting with one arc, 
and (2) any node inside a leaf basic component. This compacting procedure may be 
repeated until all the -nodes are connected with at least two basic arcs and all the leaf 
basic components are removed. Since each compacting operation removes at least one 
node and one basic arc, it takes a total of 
lO
lO
( )+O n q  time. 
The graph compacting procedure reduces the number of components in a pivoting 
graph from p  to . p i i i( , )G N A=  denotes the remaining pivoting graph after the 
compacting process. We give four properties for iG  as follows:  
 
Lemma 3.  
(i) Any leaf node in  is either a D-node or a side node. iN
(ii) Any D-node  in  has to be adjacent to i iN 1iq +  arcs. 
(iii) . min{ , }p p n≤ − p
p
(iv)  contains  D-nodes. iG p
 
Proof :  
(i) and (ii) are trivial since the compacting process removes all the leaf -nodes, as well 
as those isolated D-nodes or side-nodes. We give the proof for (iii) and (iv) as follows: 
lO
(iii) If , then we know that 1p n+ ≤ − p n p< −  and thus p p≤  since the  On p−  -
nodes can at most cover all the p  components in the pivoting graph. On the other 
hand, if , then we know that 1p n+ > − p p n p≥ −  and thus since the 
 
p n p≤ −
n p− O -nodes can at most cover n p−  of the p  components in the pivoting 
graph. Therefore, . min{ , }p p n≤ − p
(iv) The  components have to include the merged basic components induced by the 
entering arc ( , , since the entering arc is the source of any flow change. This 
means that there were  basic components if we exclude the entering arc from 
p
)k l
1p +
iA . Since these  basic components must be formed by detaching the 
distillation arcs from the  D-nodes, and these D-nodes will not be removed by 
(ii), so we know  contains  D-nodes. 
1p +
p
iN p
 
To conduct the flow pivoting operation, we have to identify the relationship of flow 
changes on basic arcs with respect to the flow change on the entering arc. To this end, we 
first set  (or ) to represent the shipping of one unit of flow along the 
entering arc ( ,  if  (or 
1kl∆ = 1kl∆ = −
)k l ( , )k l L∈ ( , )k l U∈ ), and then for each D-node i  we assign the 
flow change along its incoming arc to be *i i∆  (thus we have in total  variables of by 
Lemma 3(iii)). Using the flow distillation and balance constraints, we can derive the flow 
change on each arc in 
p *i i∆
iA  in terms of *i if  for each D-node i . Specifically, the flow in each 
distillation arc can be derived by  for each D-node i . Since each component in 
 is a tree with leaf nodes as D-nodes or side-nodes, all the flow change entering or 
leaving each leaf node can be expressed by 
*ij ij i ik∆ = ∆
iG
*i i∆  for each D-node .  i
In addition, using the flow balance constraints associated with each internal node, we 
can conduct a search algorithm inside a component to traverse from leaf nodes to all other 
internal nodes and derive the flow change entering or leaving each internal node in terms 
 ( )a Add the entering arc (1,3) . ( )b Set variables to arc (2,4) and arc (3,5).
( )c Calculate all ( )d G
( )b=1
variables anda b
5
7
-
3
14
-
3
14
-
5
7
-
3
14
-
3
14
2
7
-
1
2
1
2
1
2
1
1
BC1
BC2
BC3
BC1
BC2
BC1
BC2
BC1
BC2
root  
Figure 9. Computing the relative flow changes in a pivoting graph 
 
The procedure to pivot the flow in the case where the entering arc connects nodes of 
different basic components is described as follows:  
 
Step 1: Add the non-basic entering arc  into  to construct a pivoting graph.  ( , )k l ( )BG x
Step 2: Conduct the graph compacting procedure which repeatedly removes any -node 
connecting with one arc and any node inside a leaf basic component, as well as 
their associated arcs in a pivoting graph, until no more such node exists. We call 
the compacted graph as 
lO
i i i( , )G N A= . 
Step 3: For each node ∈ Di N  in iN , we assign a flow change variable  for its 
incoming arc ( * , and then calculate 
*i i∆
, )i i *ij ij i ik∆ = ∆  for each distillation arc ( , . )i j
Step 4: For each component in , we select some -node in this component as its root 
node,  conduct a search algorithm to traverse from leaf nodes to the root node, and 
then derive the flow change on any arc inside that component using the flow 
balance constraints associated with each internal node. 
iG lO
 share many common components, a more efficient dual variable update scheme can take 
advantage of the basic graph of the previous iteration. In this paper we propose a dual 
variables update procedure that exploits the structure of the basic components in the 
previous procedure and saves more computational efforts than the procedure in Section 
3.2. 
Let  and  represent the index of the basic component containing the node 
 and the side-node , respectively. Suppose  is a basic graph in some 
network simplex iteration before flow pivoting, and that the flow pivoting procedure 
selects ( ,  and  to be the entering and leaving arc, respectively. Let , 
, and . If we remove the leaving basic arc ( ,  from , 
( )bc i ( )jbc i
i N∈ ji ( )BG x
)k l ( , )v z ( )g bc k=
( )h bc l= ( )w bc z= )v z ( )BG x wBC  
will be split into two basic components:  and . For the sake of convenience, 
let  and , and there are a total of 
( )bc zBC ( )bc vBC
( )bc z w= ( ) 2bc v p= + 2p +  basic components in the 
pivoting graph, excluding the entering and leaving arcs. Since all the arcs in these  
basic components remain basic, the dual variables still satisfy equations (22) and (23). 
Thus, the dual variables inside each of these 
2p +
2p +  basic components will have the same 
amount of change, but different basic component may have a different amount of change. 
Let αδ  record the change for each dual variable inside BCα  for 1,..., 2pα = + . Let oldiπ , 
old
ijρ  and newiπ , newijρ denote the dual variables associated with a node i  and a 
distillation arc ( ,  in two successive network simplex iterations, respectively. Then, 
N∈
)i j A∈
( ):
new old
i i bc iπ π δ= +  and . ( ): jnew oldij ij bc iρ ρ δ= +
Adding the non-basic entering arc ( ,  to the )k l 2p +  basic components merges gBC  
and hBC  into a new and larger component g hBC BC∪  in the pivoting graph. For the sake 
of convenience, let :gBC = g hBC BC∪  and 2:h pBC BC += . This merger integrates the 
variables of two components and reduces the number of components and variables by one. 
Now we only need to consider 1p +  components (i.e. BCα  for 1, 2,..., 1pα = + ). 
Depending on the type of node k , hδ  can be expressed by gδ  using one of the following 
two equations: 
 
1. If node k is an -node, it satisfies:  lO
    
                                                        (28)
new new
k l kl
old old
k g l h kl
old old
h g kl l k
c
c
c
π π
π δ π δ
δ δ π π
− =
⇒ + − − =
⇒ = − − +
 
2. If node k is a D-node, it satisfies:   
    
                                                       (29)
new new
kl l kl
old old
kl g l h kl
old old
h g kl l kl
c
c
c
ρ π
ρ δ π δ
δ δ π ρ
− =
⇒ + − − =
⇒ = − − +
 
 
Now we can form a system of 1p +  equations composed by 0gδ = , as well as the  
equations of  for each D-node . Moreover, each equation can be 
expressed using 
p
( ) ( )( ) jbc i ij bc ij L i
kδ ∈=∑ δ i
1p +  variables composed by αδ  for 1, 2, ,..., 1pα = + .  Therefore, the 
 the calculation for both primal and dual variables. With our techniques, many 
computational efforts for calculating the basic variables can be reduced, compared to 
other methods in the literature. Techniques to speed up our algorithm have also been 
investigated with theoretical support. Although omitted in this paper, for future research, 
we suggest investigating the degeneracy issues, which are usually encountered in 
simplex-like algorithms.  
 
 
REFERENCES 
 
[1] R. K. Ahuja, T. L. Magnanti, and J. B. Orlin,  Network flows: theory, algorithms, and 
applications, Prentice-Hall, New Jersey, 1993. 
 
[2] E. Cohen, and N. Megiddo, Algorithms and complexity analysis for some flow 
problems, Algorithmica, 11(3) (1994), 320–340. 
 
[3] E. W. Dijkstra, A note on two problems in connexion with graphs, Numerische 
Mathematik, 1 (1959), 269–271. 
 
[4] S. C. Fang, and L. Qi,  Manufacturing network flows: a generalized network flow 
model for manufacturing process modeling, Optimization Methods and Software, 18 
(2003), 143-165. 
 
[5] L. R. Ford, and D. R. Fulkerson, Maximal flow through a network, Canadian Journal 
of Mathematics,  8 (1956), 399-404. 
 
[6] J. Mo,  , L. Qi,   and Z. Wei,  A network simplex algorithm for simple manufacturing 
network model, Journal of Industrial and Management Optimization, 1(2) (2005), 251-
273. 
 
[7] R. L. Sheu, M, J. Ting, and I. L. Wang, Maximum flow problem in the distribution 
network,  Journal of Industrial and Management Optimization, 2(3) (2006), 237-254. 
 
[8] I. L. Wang, and J. C. Lin, Solving Maximum Flows on Distribution Networks: 
Network Compaction and Algorithm, Proceedings of the 10th Annual Conference of the 
Asia-Pacific Decision Science Institute (APDSI) 2005, June, Taiwan. 
 
[9] I. L. Wang, and Y.  H. Yang, Uncapacitated minimum cost flow problems in a 
distribution network, Proceedings of the 11th Asia Pacific Management Conference 
(APMC) 2005, November, Taiwan 
(http://jp.fujitsu.com/group/labs/) where I have been working for one year in 1996~1997 in the 
department of telecommunication network. At that time I was responsible for proposing 
wavelength assignment and routing algorithms. I took Yamanote line to Shibuya, took Tokyu 
Toyoko line to Musashi Kosugi, and then the Nanbu line to Musashi Nakahara. I walked in the 
streets around Fujitsu research lab and then met with my old colleagues around 17:30. I met 
with Ogura san, Miyazaki san, Fukuda san, and Chujo san. Although I have been eager to have 
some research collaboration with them, it seems not so likely given my current tight schedule. 
However, we still talked about possible collaboration and hopefully this may come true in the 
near future. Then I left Fujitsu because all of my colleagues still have important meetings to 
attend. In general, they have to work until 9pm and return home around 10pm for dinner. After 
having a dinner with Ogura san around the Musashi Nakahara station, I returned the hotel to 
prepare for the presentation in the workshop. 
 
In Apr. 19, I first took Yamanote line to Shibuya, Tokyu Toyoko line to Jiyugaoka, and 
finally Tokyu Oimachi line to Ookayama, where the Tokyo Institute of Technology is just 
located besides. It took me about 40mins to travel from Shinjuku to Ookayama, which is not 
too far. This is my first time being this school. The campus looks good, especially there is a 
square in front of the main building surrounded by Sakura trees. I missed the reception, but 
managed to catch up the talk of Prof. Yinyu Ye, an expert in semi-definite programming (SDP) 
and interior point method. The second speaker, Dr. Mituhiro Fukuda, was a Ph.D. student of 
Prof. Kojima. He arranged a surprising presentation that introduces the achievement of Prof. 
Kojima including many interesting and funny life stories, besides his excellent academic 
achievements.  
 
a meeting which shows the success of the relationships that Prof. Kojima has maintained with 
all the attendants. I also get to know Prof. Toh Kim-Chuan 
(http://www.math.nus.edu.sg/~mattohkc/), Prof. Takashi Tsuchiya 
(http://www.ism.ac.jp/~tsuchiya/), and Prof. Masakazu Muramatsu 
(http://jsb.cs.uec.ac.jp/~muramatu/) at the banquet. 
 
Among the talks in the second day (4/22), I paid more attention in the talks by Prof. Li, 
Prof. Tamura (http://www.math.keio.ac.jp/local/aki-tamura/). Prof. Li works on the problem to 
seek all the roots for a polynomial system. Since Prof. Kojima has done much research in cone, 
nonlinear, and semi-definite programming, most of these attendants are related with these 
fields, which are not my specialty. Anyway, it is good to know more about what I do not know. 
In the afternoon, I chatted with Prof. Dai more since we both have common research interests 
in bioinformatics. Prof. Dai has similar background as I and is already promoted to be an 
associated professor in the University of Illinois at Chicago. Hopefully we will be able to 
establish some research collaboration in the field of bioinformatics. 
 
My talk was in the 3rd day (4/21). I believe I gave a very interesting and surprising talk for 
the audience. I gave Prof. Kojima a small birthday gift as an omiyage, which is a Wu-long tea 
from the Mountain Ali. I have successfully linked my connection to Prof. Kojima in a 
humorous way. I present the topic of minimum distribution cost problem (MDCP) that I have 
been doing these years. The problem was firstly introduced by Fang & Qi, and most audiences 
are familiar with these two persons. As a graduate from ISyE, Georgia Tech, and the only 
scholar from Taiwan, I tried to give the audience some impression about me. After my talk, 
there were several attendants come to chat with me. Prof. Kojima invited me to the lunch with 
Prof. Dai and Prof. Franz Rendl (http://www.math.uni-klu.ac.at/~rendl/?&language=en) from 
Austria. 
 
Since I have to prepare for the departure in 4/22, I left the workshop earlier in the 
afternoon.  
