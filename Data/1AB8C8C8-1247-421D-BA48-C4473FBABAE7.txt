 2 
一、中文摘要 
軟體工廠的生產模式早在 70 年代就
被提出，但軟體工廠的概念卻未獲得認
同，究其原因在於軟體的應用領域既廣泛
而複雜，而工廠生產機制卻僅能生產一定
類型的產品。本計劃提出 Pseudo Software
及相對應的 SoftBOMs 的概念，使得類似
工廠生產模式的軟體工廠能夠實際存
在。進而提升軟體生產速度，並確保軟體
品質。 
關鍵字：軟體工程、軟體工廠、Pseudo 
Software、生產管理、生產工具 
Abstract 
As early as in the 1970’s, the notion of 
software factory that treats software 
development as a kind of factory production 
had been proposed. However, software 
factory has not yet been accepted by the 
software development community. The 
major cause of failure is that the factory 
model restricted to produce fix-type 
products. In this research, we propose the 
Pseudo Software and corresponding 
SoftBOMs notions. Based on these notions, 
the software factory as resembling hardware 
factory model can be existed.  
Keywords：software engineering, software 
factory, production tools, production 
management, pseudo software 
 
二、前言 
本計劃目的在於發展一個可以支援
企業計算所需的軟體工廠模式。在此模式
下，企業計算可以有效的運用大量軟體開
發人力，進而獲得即時、高品質、但合理
成本的企業 e 化軟體。我們希望模仿硬體
生產的工廠運作機制，發展一個新的軟體
工廠模式。然而軟體生產本質上就相異於
於硬體生產的方式，主要在於硬體生產在
設計完成後，即重複地製造出同樣的產
品；軟體生產則是最終只有一個產品會被
發展出來。因此，若要落實軟體代工、甚
至是海外代工 (offshore outsourcing)的開
發模式，若能模仿硬體生產模式於軟體工
廠中，對於軟體產業而言將是非常有意義
的研究課題。 
硬體產品生產至今已可走向少量多
樣的生產模式，其關鍵在於所生產的硬體
產品，原則上是仍屬於同一種類型的產
品。硬體產品在進入生產線前，製造部門
透過物料清單(Bill of Materials, BOM)詳
細條列生產時所需的原物料，明確定義各
生產單元所執行的工作步驟 (Working 
Procedure)，使得生產者即能實際生產出
少量多樣的產品。我們模仿這樣的概念，
於第一年構想的 SoftBOM（即軟體的物
料清單），搭配一個可以在需求面上描述
預計開發軟體的表達方式，亦即本計劃所
發展的 Pseudo Software，基本上可以解決
上述所提及的困難。 
本計劃所提出的軟體工廠模式，如同
硬體工廠一樣，事先發展出軟體工廠特定
的 SoftBOMs，需求發展者則能夠運用
Pseudo Software 中所對應的 SoftBOMs
來定義軟體需求。這樣一來，這些以
Pseudo Software 描述的軟體需求，就能夠
被該軟體工廠接受作為生產依據。這樣的
生產概念具有以下幾個優點： 
(1) 軟體生產者與需求提供者間，在生產
過程中的規格模糊程度大量降低。 
(2) 需求錯誤與變更次數大幅減少。 
(3) 提升軟體生產速度，並確保軟體品
質。 
(4) 類似硬體工廠生產模式的軟體工廠得
以實際存在。 
 
三、研究目的 
今年的計劃以建立 Pseudo Software 及
SoftBOM 模型，並發展成軟體工廠生產生
產方式的具體架構，主要的研究目標可分
成下列兩點： 
(1) 提出 Pseudo Software 及 SoftBOM 概念: 
本計劃提出 Pseudo Software 概念，以解
決 IKIWISI (I’ll Know It When I See It)
的困擾得以提前在需求階段解決外，將
需求能夠以 Pattern 的方式記錄下來，
同時也相對應提出軟體工廠的物料清
單 SoftBOM，使得軟體工廠能夠模仿硬
體工廠的生產模式。 
(2) 模仿硬體工廠的軟體工廠生產方式: 
 4 
 
「無疑義」的組裝軟體。此外，SoftBOM
可透過組裝其他的 SoftBOM，以重複使用
已經完成、現有的功能，而 SoftBOM 內部
組裝的邏輯交由 ComposistionRule 類別所
描述，其結構上的關係則在 Template 類別
中描述。最後，SoftBOM 中 Test Case 的
設計必須符合 Intent 類別所描述的要求，
使得 SoftBOM 能具備良好的品質。 
圖 3 為 SoftBOM 開發流程之活動圖，
SoftBOM 主要由製程工程師所負責設計
與，並在開發完成後儲存於軟體團隊的資
源中心(Repository)。製程工程師首先依據
需求規格，將 SoftBOM 為依據發展成
Pseudo Software 需求模型。若無適用的
SoftBOM，則交由製程工程師評估後進行
開發新的 SoftBOM，製程工程師首先分析
其需求，依 Pseudo Software 描述、設計、
模擬並驗證其需求，進而實作部份的程式
碼，而後再再經過反覆地測試及驗證此
SoftBOM 的功能，直到通過後再將相關的
設計文件、元件及程式碼等內容包裝成完
整的 SoftBOM，最後再依類型儲存至公用
資源中心。 
 
 
 
圖 3: SoftBOM 開發流程之活動圖 
 
圖 2: SoftBOM 之結構設計 
 6 
且詳細地定義，使用標準介面或同一類
型之零組件，其發生錯誤的可能性極
低，因此其產品規格模糊程度近似於
0。而軟體開發在使用任何方法及技術
的情況下，如何獲取正確無誤的需求依
然是軟體發展中最艱難的課題之一。軟
體的產品規格缺少具體的、可操作的方
式，經常造成依關係者常有不同的詮
釋，使得在實體程式碼產出後，才發現
因詮釋差異造成的錯誤，其產品規格模
糊程度遠大於 0。相對於我們所提出的
軟體工廠生產方式，由於其前提是以落
實 Pseudo Software 為基準，Pseudo 
Software 則可協助需求提供者在生產前
確認軟體的需求，使其產品規格的模糊
程度能夠趨近於 0。 
(3) 生產的最終產品形式 (TIIP, Target 
Item In Production):  
透過組裝零組件方式生產，整個生產過
程能夠依階段分為不同生產單元，各個
生產單元中均遵循固定的工序，這些生
產單元依組裝步驟而形成產品生產
線，最終生產後的產品其功能、外觀、
結構均等同當初所設計的產品原型。而
軟體依不同功能區分不同的軟體模組
各別開發，各模組則相互整合成單一軟
體，其產出物為大量的程式碼，我們以
N 代表軟體最終產品的總程式碼行
數。而我們所提出的軟體工廠生產方
式，是以該軟體工廠所提供的 SoftBOM
為基準，此特定的軟體工廠如同硬體工
廠僅能生產同一類型的軟體，我們以 m
代 表 其 軟 體 最 終 產 品 所 包 含 的
SoftBOM 數量，換言之，其軟體工廠生
產的最終產品應近似於 m，且 m 應遠小
於 N。 
(4) 產品物料清單一致性 (BCIP, BOM 
Consistency in Production): 
硬體在其物料清單中清楚定義了各零
組件的規格、數量及裝配方式，且各個
生產單元中均使用同一類型的零組
件，使得生產人員能夠正確無疑義地進
行組裝，因此其產品物料清單一致性為
100%。而軟體之各模組之開發屬於創
造性的開發工作，其模組之間的差異極
大，並無法依循固定的步驟逐一完成，
其一致性遠低於 100%。而我們所提出
的軟體工廠生產方式是模仿硬體的物
料清單，設計了軟體的物料清單
SoftBOM ， 其 生 產 線 上 產 出 均 以
SoftBOM 做為生產的依據，進而確保下
一步驟開發人員可以明確且無疑義地
組裝程式，因此其產品物料清單一致性
也可說是等於 100%。 
 
表 1: Pseudo-Software Software Factory 與
硬體製造及軟體生產的差異 
  FIBP SAIP TIIP BCIP 
Hardware 
Manufacturing =100% ~0 =1 =100% 
Software 
Development ~x/N >>0 =N <<100% 
Pseudo-Software 
Software Factory ~100% ~0 ~m =100% 
在此軟體工廠模式下，相關生產工具
與「原物料」必須先被建置與發展完成；
當工廠模式確立後，除生產所需工具外，
工廠管理更是確保軟體工廠可以正常運作
的關鍵機制。工廠管理必須從軟體生命週
期的角度來研發所需之管理系統，例如像
是工時管理系統、建構管理系統、持續整
合系統、品質管理系統等。 
六、文獻探討 
軟體工廠的概念早在 70 年代就被提
出[8]，最早由 GE 的 Bemer 所提倡之標準
化工具以提升生產率的方式[33]。而後其
軟體工廠概念由日本企業應用[6]，並逐一
在各地設立軟體工廠，如 Toshiba[22,30]、
Hitachi[11]等。在 1980 年代於歐洲等地也
有 Aaen 提出的 Eureka Software Factory 
(ESF)[10,11,26]。90 年代則有 HP 的 M. L. 
Griss 所提出的特定應用領域、System 
Reuse 為主的軟體工廠[14,31]。而近年來
隨著 MDA 興起，亦即有以 Model-Driven
類型的軟體工廠 (Model-Based Software 
Factory)產生[13,18,29,32]。另一方面也有
強 調 以 人 為 中 心 的 軟 體 工 廠 類 型
(Cell-Based Software Factory)[34]。 
 8 
18. B. Langlois, and D. Exertier, “MDSoFa, A Model-Driven Software Factory,” 
OOPSLA 2004, MDSD Workshop. 
19. C. Li, H. Li, and M. Li, “A Software Factory Model Based on ISO 9000 and 
CMM for Chinese Small Organizations,” Proceedings of the Second 
Asia-Pacific Conference on Quality Software, December, 2001, pp.288–292. 
20. N.K. Lim, J.S.K. Ang, and F.N. Pavri, “Diffusing Software-Based Innovation 
with A Software Factory Approach for Software Development,” Proceedings 
of the 2000 IEEE International Conference on Management of Innovation 
and Technology, Vol. 2, November, 2000, pp. 549 -555.  
21. M. S. Mahoney, "Finding a History for Software Engineering," IEEE Annals 
of the History of Computing, January–March 2004, pp. 8-19. 
22. Y. Matsumoto, "Japanese Software Factory," in Encyclopedia of Software 
Engineering, (ed.) Marciniak, J.J., FIRST EDITION, Johon Wiley & Sons, 
N.Y, pp.593-605. 
23. J. Nandhakumar, "Managing Time in a Software Factory: Temporal and 
Spatial Organization of IS Development Activities," The Information Society, 
Volume 18, Number 4, 1 July 2002 , pp. 251-262(12) 
24. L.J. Osterweil, “Software Processes are Software Too,” Proc. 9th Int’l Conf. 
Software Eng. (ICSE 9), IEEE Computer Soc. Press, 1987, pp. 2-13. 
25. K. Potosnak, “Human Factors-Management: The Key to Success”, IEEE 
Software, Volume 6, Issue 2, March, 1989, pp: 86 – 88. 
26. W. Schäfer, and H. Weber, „European Software Factory Plan—the ESF 
profile,” In Modern Software Engineering, Foundations and Current 
Perspectives, P. A. Ng and R. T. Yeh, Eds. Van Nostrand Reinhold Co., New 
York, NY, 1989, pp. 613-637. 
27. K. Swanson, D. McComb, J. Smith, and D. McCubbrey, “The Application 
Software Factory: Applying Total Quality Techniques to Systems 
Development,”, MIS Quarterly, Vol. 15, No. 4 (Dec., 1991), pp. 567-579. 
28. H. Weber, The Software Factory Challenge, IOS Press, 1997. 
29. Benoît Langlois, Jean Barata, Daniel Exertier, "Improving MDD Productivity 
With Software Factories," OOPSLA 2005 
30. Matsumoto, Y., "Toshiba Software Factory," Modern Software Engineering, 
P.A. Ng and R.T. Yeh (eds.), pp.479-501, Van Nostrand Reinhold, 1990 
31. Martin L. Griss, "Software Reuse: From Library to Factory," IBM Systems 
Journal, 1993 
32. Uwe Zdun, "Concepts for Model-Driven Design and Evolution of 
Domain-Specific Languages," OOPSLA 2005  
33. Bemer, R.W., Position papers for Panel Discussion: The Economics of 
Program Production, in A. J. H. Morrell (Ed.), Information Processing 68, 
Amsterdam, North-Holland (1968) 
34. Yoshihiro Matsumoto site, http://www5d.biglobe.ne.jp/~y-h-m/ 
 
