 2 
2. Software maintainability and development problem 
According to ISO/IEC 9126-1 (2001), software maintainability, which includes 5 
sub-characteristics, is defined as the capability of the software systems to be modified. 
Through a literature survey, we have identified 25 major problem factors in the 
development phase of software projects which may possibly affect the maintainability of the 
delivered software systems and classified them into five dimensions: Documentation quality 
problems (DOC), Programming quality problems (PGM), System requirements problems 
(SYS), Personnel resources problems (PER), and Process management problems (PM). 
Improving software development processes can enhance the quality of software systems 
and the overall performance of the software project and organization [11]. The ISO 9001 
Quality Management System (QMS) (2000) and the Capability Maturity Model Integration 
(CMMI) (2002) are well-known methodologies that provide guidelines for SPI. 
3. Research approach 
Initially, this study developed a preliminary questionnaire consisting of 32 items relating to 
problem factors. Some experts were invited to verify the content validity and readability of the 
original version of the questionnaire. After deleting some inappropriate items, 25 items 
remained and were used with a five-point Likert-type scale, ranging from 1 (strongly disagree) 
to 5 (strongly agree).  
 
This study is based on data collected via an e-mail survey. 160 of 400 questionnaires 
surveys were returned within a span of four weeks and 23 incomplete questionnaires were 
discarded. As a result, only 137 became effective response questionnaires yielding a response 
rate of 34.25%. 
The t-test method, Cronbach’s alpha and item-to-total correlation coefficients were 
conducted to test the potential non-response bias, reliability and internal consistency.  
4. Data analysis and results 
4.1. Patterns in problem dimensions across different levels of software maintainability 
The result of the K-means Cluster Analysis divided the 137 projects into three clusters 
representing low (n = 62), medium (n = 63) and high (n = 12) levels of software 
maintainability. In order to avoid the distortion of the analysis results, the outlier samples were 
eliminated in the subsequent analyses. 
In order to explore the patterns in software development problem dimensions across low, 
 4 
This indicates that the SYS problem dimension only requires minimum attention in 
relation to achieving improvement as we move from the medium to the high 
maintainability cluster. 
(5) For all of the five problem dimensions, the values of “Dist 2” are greater than the values 
of “Dist 1”. This indicates that as higher levels of software maintainability are required, 
a corresponding increase in cost and effort in relation to improvement is also required. 
The Pearson correlation analysis was performed to explore the relationship between 
problem dimensions and software maintainability. It suggests that there is a negative and 
middle-level linear correlation (r = –0.41 ~ –0.62, p < 0.01) between project problems and 
software maintainability. 
Furthermore, in order to explore the influence of all problem factors on software 
maintainability, the 25 problem factors were combined into one variable, namely “software 
development problems”. Cronbach’s alpha coefficient exceeded the threshold (0.70) as 
suggested in [12]; and the item-to-total correlation coefficients were all greater than 0.40, as 
suggested in [13]. This indicates that the internal consistency of the construct of “software 
development problems” is acceptable. 
In order to examine the relationship between software development problems and software 
maintainability, a regression analysis was conducted. As shown in Table 1, it provides 
empirical evidence that (1) software development problems can negatively affect software 
maintainability and (2) decreasing levels of the severity of software development problems in 
projects can improve maintainability of the delivered software systems. 
 
Table 1: Regression analysis: software development problems on software maintainability 
Dependent variable Independent variable Standardized 
coefficient 
t-value p-value 
Software maintainability Software development problems –0.630*** –9.434 0.000
 Model R2   0.397  
 Adjusted R2  0.393  
 F-value 88.991  
 P-value  0.000  
*** Indicates significance at the 0.001 level. 
4.2. The relationship between project demographics and software maintainability 
This study also explored the possible confounding effect of project demographics (i.e., 
project size, project duration, and average experience of project members) on software 
maintainability. 
All project demographics are ordinal scale variables, so one-way ANOVA analyses were 
 6 
Table 4: The results of one-way ANOVA analysis between average experience of project 
members and software maintainability 
Model Independent variable Dependent Results 
  variable F-value P-value a Notes 
Model 1 Average experience of 
project members 
N Software  
maintainability 
1.032 0.359 
 Group 1:  < 4 years 63    
 Group 2:  4 – 6 years 53    
 Group 3:  > 6 years 21    
No significant 
relationship 
Model 2 Average experience of 
project members 
N Software 
maintainability 1.680 0.197 
 Group 1:  < 4 years 63    
 Group 2:  >= 4 years 74    
No significant 
relationship 
Model 3 Average experience of 
project members 
N Software 
maintainability 0.004 0.947 
 Group 1:  <= 6 years 116    
 Group 2:  > 6 years 21    
No significant 
relationship 
a P > 0.05 indicates no significant relationship. 
 
4.3. Impact of SPI on problem dimensions 
In this study, the 137 surveyed projects were classified into two groups: (1) organizations 
certified with ISO 9001 and/or CMMI; and (2) organizations without ISO 9001 and CMMI 
certification. This study has no intention to compare or distinguish between ISO 9001 and 
CMMI, so that if an organization has either one of these two certifications, its projects are 
regarded as being part of the SPI group. The Univariate F-test was performed (SPSS, 2004) in 
this study to explore the relationship between SPI and problem dimensions, as shown in Table 
5. 
The results reveal that SPI projects have a significantly lower level of severity on the DOC 
dimension (P = 0.040) and PM dimension (P = 0.000) than non-SPI projects. Possible 
explanations of this finding are: (1) SPI methodologies attach importance to software 
documentation writing, which can contribute to problem-solving[8][9]; and (2) SPI 
methodologies place an emphasis on improving the capability of process management, which 
can contribute to achieving project objectives [3][7]. Therefore, these results suggest that SPI 
can reduce the level of severity on the DOC and PM dimensions. 
Furthermore, the results also reveal that SPI projects have significantly higher levels of 
software maintainability (P = 0.045) than non-SPI projects. One possible explanation of this 
finding is that the well-defined and clearly documented processes provided by SPI 
 8 
practice. Information & Management 40(7), pp. 677–690. 
[3] Chrissis, M.B., Konrad, M., Shrum, S., 2006. CMMI: Guidelines for Process Integration 
and Product Improvement; 2nd Edition. Addison-Wesley Professional. 
[4] Diaz, M. Sligo, J., 1997. How software process improvement helped Motorola. IEEE 
Software 14(5), 75–81.  
[5] Girden, E.R., 1992. ANOVA: Repeated Measures - Quantitative applications in the social 
sciences. Sage Publications. 
[6] Haley, T.J., 1996. Software process improvement at Raytheon. IEEE Software 13(6), 
33–41. 
[7] Hoyle, D., 2005. ISO 9000 Quality Systems Handbook; Fifth Edition. 
Butterworth-Heinemann. 
[8] Humphrey, W.S., 1992. Introduction to Software Process Improvement. Software 
Engineering Institute Technical Report CMU/SEI-92-TR-7.  
[9] Kuilboer, J. P., Ashrafi, N., 2000. Software process and product improvement: an empirical 
assessment. Information and Software Technology 42(1), 27–34.  
[10] McGarry, F., Pajerski, R., Page, G., Waligora, S., Basili, V., Zelkowitz, M., 1994. Software 
Process Improvement in the NASA Software Engineering Laboratory. Software 
Engineering Institute Technical Report CMU/SEI-94-TR-22.  
[11] Paulish, D.J., Carleton, A.D., 1994. Case studies of software-process-improvement 
measurement. Computer 27(9), 50–57.  
[12] Nunnally, J.C., 1978. Psychometric Theory. McGraw-Hill, New York, NY.  
[13] Park, C.H., Kim, Y.G., 2003. Identifying key factors affecting consumer purchase behavior 
in an online shopping context. International Journal of Retail & Distribution Management 
31(1), 16–29. 
 
Approaches and a New Algorithm” and “Architectural Reconstruction of 3D 
Building Objects Through Semantics Knowledge Management”.  
 
Session 2D was Data Mining and Knowledge Discovery/Software Testing. 
Four papers were presented but only one paper was related to software testing. 
Its tile was “Test Generation for Web Applications Using Model-Checking”. 
Session 2G was “Collaborative Computing/ Service-Oriented Computing/ Visual 
and Multimedia Computing”. One of four presented papers was lightly closed to 
my master student’s work. It was “Bounded Model Checking for Web Service 
Discovery and Composition”. The title of my student’s master thesis was”具備功能
性分析與 QoWS評估機制之網路服務組合流程模式”.  
 
After tow-day paper presentation, five papers were chosen as best papers 
and recommended for publication in the International Journal of Computer and 
Information Science (IJCIS). Some outstanding papers were also selected for 
publication in the Springer’s academic series.  
 
This conference brought scholars and industry practitioners together to 
discuss and exchange their new ideas and research results. Most scholars come 
from UK and China. I got some acquainted with some papers’ authors from China. 
I had benefited from attending this conference and it also facilitated possible 
opportunities for further collaborations and linkages with software engineering 
researchers. Therefore, I thank NSC for the financial support so that I can attend 
this conference. 
98年度專題研究計畫研究成果彙整表 
計畫主持人：黃世禎 計畫編號：98-2221-E-011-096- 
計畫名稱：軟體流程改善、軟體發展問題因素與軟體可維護性相互影響之研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 2 2 100%  
博士生 1 1 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
