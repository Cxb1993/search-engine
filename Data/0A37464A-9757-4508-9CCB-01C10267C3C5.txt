80 年代的軟體測試被給予包括預防
缺陷等擴大性的含義。例如，根據 Boris 
Beizer [2]的說法，設計適當測試案例的
行為是已知最有效的缺陷預防方法之
一。並且由於測試成本的快速增加，人
們也開始認識到，測試需要經過計畫及
管理。 
90 年代初期軟體測試的思想從偵測
轉為預防，能夠提早測試軟體品質的技
術受到重視。透過審查、排演等複核方
法，軟體測試被重新定義為「計劃、設
計、建構、維護、執行軟體測試，以及
維護測試環境」[3]。 
上面的歷史回顧可以發現，軟體測試
的意義會隨著時代、環境、及需要而跟
著調整與改變。那麼，現今的軟體測試
是否符合我們的需求呢？讓我們來看一
下今日的軟體測試做些什麼。 
典型的軟體測試主要有兩類[2]：功能
性測試(Functional Testing)與結構性測試
(Structural Testing)。功能性測試又稱為
黑箱測試(Black-Box Testing)，主要目的
就是針對系統功能做測試，不考慮系統
內部的結構，把程式當作是個黑盒子，
只考慮輸入值和輸出結果是否符合系統
所期望的規範。結構化測試又稱為白箱
測試(White-Box Testing)。顧名思義，白
箱測試主要針對程式的結構來設計測試
案例。結構測試的目的，可用測試涵蓋
率(test coverage)來表達，亦即測量程式
執行所經過的片斷，是否可以完整地覆
蓋所有程式的結構。 
上述兩種測試無論哪一種，它們所要
偵測的都是程式的行為表現，希望尋找
出其中潛在的缺陷（fault）。因此，這
兩類測試依照我們的術語，都可被歸類
為『行為測試』，亦即檢驗程式所表現
出的行為是否符合預期。 
但除了驗證邏輯行為的表現之外，軟
體測試是否就沒有其它方面需要注意了
呢？從安全的角度來看，許多日常的電
腦應用如今都已轉移到網路上執行（例
如，Google 已經在網路上提供大部分
Microsoft Office 軟體的基本功能），在
四周充滿惡意駭客伺機攻擊的情形下，
如何驗證軟體的安全性顯然也是一個重
要的測試目標。 
或許有人會認為，透過偵測並阻擋惡
意網路攻擊的方式也可避免系統遭受破
壞。這或許是事實，但道高一尺魔高一
丈，根本的問題還在於軟體本身是否存
在有弱點，可被駭客加以利用。倘若本
身不犯錯，則駭客再厲害也無可奈何。
這才是網路軟體應思考的安全重點，也
是軟體測試無可逃避的責任。 
什麼是軟體潛在的弱點？我們知道
今日的電腦由於功能強大，因此工程師
們在開發程式時，通常只注意邏輯指令
的安排，很容易忽略軟體程式的執行是
需要消耗系統資源的（如佔用之記憶
體、請求之服務等）。一般的假設是這
些資源要就有，而多數時候也的確如
此；因此程式的一切運作如常，使得我
們忽略了它的存在。這就形成了潛在的
漏洞：「當系統資源不足時程式所出現
的異常行為」。這就是駭客攻擊的巧門，
而一般的軟體測試也不知道要如何偵測
此一情況。 
 
三、結果與討論 
問題描述 
資源耗用上所產生的系統問題，常見
的情況有軟體老化(Software aging)[4]等
現象。例如，經由長時間重複地執行某
些程式會造成系統執行速度變慢，甚至
更嚴重時出現意外的軟體錯誤或是當機
的情形。而背後的原因又以記體洩漏的
情況最為嚴重。 
Memory block created 
All the paths which pass both 
the create and dispose-free node 
should be tested. return 
憶體洩漏和雙重釋放的錯誤來看，其實
是同一問題的兩個不同面向；前者是取
得了記憶體但沒有釋放，而後者是釋放
了一次以上。無論何者，其背後都牽涉
到要求（e.g., malloc()函數）與釋放（e.g., 
dispose()函數）記憶體的有關指令，而錯
誤就發生在這兩者其中之一的指令誤用
上。 
另一種情況則發生在運算（e.g., 
modify()之類用戶提供的函數）相關的指
令上；程式師在計算的過程中不小心變
更了記憶體大小卻不自知。 
綜合以上分析，最後我們可得出兩
個資源測試的準則：基本涵蓋（basic 
coverage）與建立與無釋放對（create and 
dispose-free pair）。前者類似於語句涵蓋
準則（statement coverage criterion），其
要求較簡單，只要所有與釋放以及（資
源）運算有關的指令都經過測試案例驗
證至少一次即可。 
第二個準則較為複雜，首先它需要
辨認出從程式結束點循路徑反推，能夠
走得最遠的無釋放節點（dispose-free 
node），亦即從此一節點以下不會有釋
放記憶體之類的指令。一旦找出這樣的
節點，我們就可以將所有的建立（create）
與無釋放節點（dispose-free node）配對
（參考圖二）。第二個準則要求所有這
樣的組合都需要經過測試驗證。 
至於測試結果的驗證（test oracle），
則是另一個需要解決的問題。由於資源
耗用的變化不會顯現在程式的輸出行為
上，因此很難以人為加以判斷。所幸市
面上有一些記憶體分析工具可用，例如
purify[5]或其他類似軟體[6, 7]可以分析
資源耗用的變化。 
為了驗證我們的測試準則是否有
用，我們設計了一個實驗，並選擇一個
網路上公開的資料庫 CVE（Common 
Vulnerabilities & Exposures）[8]作為我們
驗證的對象。該資料庫共有 78 支程式，
但扣除其中一些非開源碼或過於老舊的
程式之後，我們留下了其中 21 支程式加
以檢驗。幸運的是，這些程式全都可透
過以上我們所建議的兩項測試準則加以
發掘。（詳細資料可參考表一） 
此外，在實驗的過程中，我們並且
整理出資源不當使用的各種程式類型片
return 
return 
return
1
2 3 4
Memory block disposed 
5 
6 7 8
9
圖二、無釋放點與建立與無釋放對 
memory errors. 1996, ACM Press. p. 
44-53. 
[9] Lionel C, Briand, Yvan Labiche, Marwa 
Shousha. Using genetic algorithms for 
early schedulability analysis and stress [8] CVE. http:// cve.mitre.org/. 
表一：CVE 相關程式的測試結果列表 
Num CVE# Version Related criteria  Related problem 
CVE-2002-0069 1 Squid 2.4 STABLE3 Create-dispose free pair Memory leak 
2 CVE-2002-1232 Ypserv 2.2 Basic Memory leak 
3 CVE-2003-0032 Libmcrypt 2.4.10 Basic Memory leak 
4 CVE-2003-0132 Apache 2.0.44 Create-dispose free pair Memory leak 
5 CVE-2004-0113 Apache 2.0.48 Basic Memory leak 
6 CVE-2004-0222 openBSD 3.4 Create-dispose free pair Memory leak 
7 CVE-2004-0427 Linux 2.4.25 Create-dispose free pair Memory leak 
8 CVE-2004-1335 Linux 2.6.9 Basic Memory leak 
9 CVE-2004-2395 Passwd 0.68 Basic Memory leak 
10 CAN-2004-0642 MIT Kerberos 5 1.3.4 Create-dispose free pair Double free 
11 CVE-2004-2660 Linux 2.6.9 Create-dispose free pair Memory leak 
12 CVE-2005-0096 Squid 2.5 STABLE 7 Create-dispose free pair Memory leak 
13 CVE-2005-2800 Linux 2.6.13 Basic Memory leak 
14 CVE-2005-3858 Linux 2.6.12 Basic Memory leak 
15 CVE-2005-2970 Apache 2.1.8 Create-dispose free pair Memory leak 
16 CVE-2006-0451 Fedora directory server Basic Memory leak 
17 CVE-2002-0059 Zlib 1.1.3 Basic Double free 
18 CVE-2003-0015 CVS 1.11.4 Basic Double free 
19 CVE-2007-1521 PHP 4.46 Create-dispose free pair Double free 
20 CVE-2007-1522 PHP 5.2.0 Basic Double free 
21 CVE-2006-5656 Vilistextum 2.6.8 Create-dispose Memory leak 
