 2
行政院國家科學委員會專題研究計畫成果報告 
H.264 框間編碼多重加速之研究 
 Enhancement of H.264 Inter-Coding via Various Algorithms 
計畫編號：NSC 96-2221-E-027-009- 
 執行期限：96 年 8 月 1 日至 97 年 7 月 31 日 
主持人：郭天穎   國立台北科技大學電機系 
計畫參與人員：羅一中 葉錦坤 王忠信 蕭文海 
詹偉傑 吳家宏 蔡弘揚 馮世杰 
國立台北科技大學電機研究所 
 
一、中文摘要 
 
 本研究針對 H.264 可變區塊大小與多
張參考圖框的情形下，提出一種有效的動態
搜尋範圍來加速運動估測。我們的動態搜尋
範圍控制機制由區塊模式和目標巨方塊的
參考圖框來決定區分不同等級的搜尋範
圍。各等級之搜尋範圍大小則以相鄰巨方塊
和編碼區塊大小為 8x8 之運動向量為基
礎。實驗結果證實了我們所提出的估測機制
不但在位元率-失真效能的表現上接近於全
搜尋，同時也降低了運算複雜度。 
 
關鍵詞：H.264、多張參考圖框、可變區塊
大小、運動估測、動態搜尋範圍 
 
Abstract 
 
This paper proposed an effective 
mechanism to select the dynamic search range 
for the H.264 multiple reference  frames 
motion estimation with variable block sizes. 
Our dynamic search range control mechanism 
divides the search range into different zones 
determined by the block mode and reference 
frame of the target macroblock. In each zone, 
the search range is set on the basis of the 
motion vectors of its neighboring macroblocks 
and the motion vectors of block size 8x8. 
Experimental results show that our algorithm 
not only significantly reduces the 
computational complexity but also maintains 
the similar video coding quality as full search. 
 
Keywords: H.264,multiple reference frames, 
variable block size, motion estimation, search 
range  
二、緣由與目的 
 
The H.264 standard is the latest video 
codec developed by the Joint Video Team 
(JVT) [1]. It introduces several new coding 
tools to improve upon the rate-distortion 
performance of past coding standards. For 
example, variable block size motion 
compensation, sub-pixel motion estimation, 
and multiple reference frame motion 
compensation are tools introduced to enhance 
inter-coding efficiency. Multiple reference 
frame motion compensation allows the 
encoder to predict a better picture, using 
several pre-coded and stored pictures. 
However, the computational complexity of 
motion estimation increases linearly compared 
with that of a single reference frame, and 
could be even worse as the situation is 
complicated by variable block size motion 
estimation. 
In the literature, several methods have 
been proposed to reduce the complexity of 
multiple reference frame motion estimations. 
One way is to apply various efficient search 
patterns instead of checking every position 
inside the search range as in the method of full 
search (FS). These methods to reduce the 
search points, such as diamond search (DS) 
[2], hexagon search [3], as well as 
kite-cross-diamond search (KCDS) [4], are 
actually designed for the purpose. Another 
general approach is based on the block mode 
decision [5], which is to drop impossible 
modes from motion estimation and thus to 
 4
 
t k
leftV
−
t k
topV
− t k
top rightV
−
− 4,0
t kV − 4,1
t kV −
4,2
t kV − 4,3
t kV −
 
Fig.3. The motion vectors of neighboring blocks and of 
8x8 blocks. 
 
According to the block modes and 
reference frames of the target macroblock, 
three search zones in DSRC are described as 
following, 
 
(a) SearchZone1: May get into low motion activity. 
When, 
(i) Modes 1-3, and 
(ii) Reference frame is t-1. 
(b) SearchZone2: May get into medium motion 
activity. When, 
(i) Modes 4-7 in reference frame t-1; or 
(ii) Modes 1-3 in reference frames t-2 to t-N. 
(c) SearchZone3: May get into high motion activity. 
When, 
(i) Modes 4-7, and  
(ii) Reference frames are t-2 to t-N.  
 
Fig.4. Three defined search zones in DSRC. 
 
The conceptual 2-D relationships of 
three search zones in DSRC are illustrated in 
Fig.4. The implemented search range of our 
proposed DSRC pseudo-code is shown in the 
below: 
 
We define some parameters at first. 
delta_neighbor = 
abs(max( t kleftV
− , t ktopV
− , t ktop rightV
−
− )-min(
t k
leftV
− , t ktopV
− ,
t k
top rightV
−
− )) 
Loop Valid Reference Frames 
   Loop Valid Macroblock Modes 
      Switch (Search Zone) 
         Case SearchZone1 
            If (max( 4
t kV − ) = 0) 
               max_search_range = 3; 
            Else If (0<max( 4
t kV − ) ≤ 5) 
               max_search_range = 5; 
            Else If (5< max( 4
t kV − ) ≤ 10) 
               max_search_range = 10; 
            Else 
               max_search_range=default_search_range; 
            End if 
         End Case 
         Case SearchZone2 
            If (max( 4
t kV − ) = 0) 
               max_search_range = 3; 
            Else If (0<max( 4
t kV − ) ≤ 10) 
               max_search_range = 10; 
            Else 
               max_search_range=default_search_range; 
            End if 
         End Case 
         Case SearchZone3 
            max_search_range = default_search_range; 
         End Case 
      End Switch 
      predicted_search_range = min((delta_neighbor + 
max( 4
t kV − )) , max_search_range); 
   End Loop 
End Loop 
 
The max and min operation on a set of 
vectors will produce a scalar as taking both 
the x and y components into account. Two 
outer loops indicate which reference frames 
and macroblock modes are in process inside 
the loops, in which DSRC would select the 
suitable search zones and then decides the 
predicted search range with each valid 
reference frame and valid mode for the input 
macroblock. For example, if the current 
macroblock is in mode 1 with reference frame 
t-1 that would be decided to SearchZone1 by 
DSRC. Furthermore, DSRC would decide the 
predicted search range by the current mode 4 
motion vectors and neighboring motion 
vectors. A numerical example is illustrated in 
Fig.5. 
 
 6
1 2 3 4 5 6 7 8
0
10
20
30
40
50
60
70
80
90
100
Search range
H
it 
ra
te
 o
f m
ot
io
n 
ve
ct
or
s 
(%
)
Mode 1
  ref-frame t-1
  ref-frame t-2
  ref-frame t-3
  ref-frame t-4
  ref-frame t-5
1 2 3 4 5 6 7 8
0
10
20
30
40
50
60
70
80
90
100
Search range
H
it 
ra
te
 o
f m
ot
io
n 
ve
ct
or
s 
(%
)
Mode 2
  ref-frame t-1
  ref-frame t-2
  ref-frame t-3
  ref-frame t-4
  ref-frame t-5
 
1 2 3 4 5 6 7 8
0
10
20
30
40
50
60
70
80
90
100
Search range
H
it 
ra
te
 o
f m
ot
io
n 
ve
ct
or
s 
(%
)
Mode 3
  ref-frame t-1
  ref-frame t-2
  ref-frame t-3
  ref-frame t-4
  ref-frame t-5
1 2 3 4 5 6 7 8
0
10
20
30
40
50
60
70
80
90
100
Search range
H
it 
ra
te
 o
f m
ot
io
n 
ve
ct
or
s 
(%
)
Mode 4
  ref-frame t-1
  ref-frame t-2
  ref-frame t-3
  ref-frame t-4
  ref-frame t-5
 
1 2 3 4 5 6 7 8
0
10
20
30
40
50
60
70
80
90
100
Search range
H
it 
ra
te
 o
f m
ot
io
n 
ve
ct
or
s 
(%
)
Mode 5
  ref-frame t-1
  ref-frame t-2
  ref-frame t-3
  ref-frame t-4
  ref-frame t-5
1 2 3 4 5 6 7 8
0
10
20
30
40
50
60
70
80
90
100
Search range
H
it 
ra
te
 o
f m
ot
io
n 
ve
ct
or
s 
(%
)
Mode 6
  ref-frame t-1
  ref-frame t-2
  ref-frame t-3
  ref-frame t-4
  ref-frame t-5
 
1 2 3 4 5 6 7 8
0
10
20
30
40
50
60
70
80
90
100
Search range
H
it 
ra
te
 o
f m
ot
io
n 
ve
ct
or
s 
(%
)
Mode 7
  ref-frame t-1
  ref-frame t-2
  ref-frame t-3
  ref-frame t-4
  ref-frame t-5
 
Fig.6. The hit rate of motion vectors in different reference frames, modes, and search ranges for Silent video sequence 
 8
which basically calculate the average PSNR 
distance between two R-D curves (i.e., over 
all QPs) of two methods, respectively. 
The R-D curves of each method for 
Container, Foreman, Paris and Mobile 
sequences are plotted in Fig.8. Table 1 shows 
that, on average, our proposed DSRC 
algorithm would only degrade 0.02db of 
BDPSNR to FS5, and 0.14dB (0.16-0.02) to 
FME5, in contrast to the 1.75dB of high 
degradation in Yamada’s method [6]. Table 2 
lists the percentage of complexity reduction of 
each method to FS5 based on the execution 
time of motion estimation time. As shown in 
Table 2, our DSRC+FS5 can reduce the 
computational complexity to FS5 by 60.50% 
in terms of the motion estimation encoding 
time, which saves much more than the 
reductions of Shimizu (15.32%) and Yamada 
(54.46%). Note that, though Shimizu’s 
BDPSNR is as good as that of our proposed 
algorithm, its complexity is much higher than 
ours. Furthermore, if our DSRC is used with 
FME5, the percentage of complexity reduction 
to FS5 could be further improved to 82.54% 
on average. Thus, we conclude that our DSRC 
can give a good speed-up while keeping the 
R-D performance. 
 
0 20 40 60 80 100 120 140 160 180 200
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
Bit-rate (kbit/s)
P
SN
R
 (d
B
)
Container
 
 
FS5
FME5
FS5+Yamada
FS5+Shimizu
Proposed FME5+DSRC
Proposed FS5+DSRC
0 100 200 300 400 500 600
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
Bit-rate (kbit/s)
P
SN
R
 (d
B)
Foreman
 
 
FS5
FME5
FS5+Yamada
FS5+Shimizu
Proposed FME5+DSRC
Proposed FS5+DSRC
 
0 500 1000 1500
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
Bit-rate (kbit/s)
P
SN
R
 (d
B
)
Paris
 
 
FS5
FME5
FS5+Yamada
FS5+Shimizu
Proposed FME5+DSRC
Proposed FS5+DSRC
0 1000 2000 3000 4000 5000 6000 7000 8000
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
Bit-rate (kbit/s)
P
SN
R
 (d
B)
Mobile
 
 
FS5
FME5
FS5+Yamada
FS5+Shimizu
Proposed FME5+DSRC
Proposed FS5+DSRC
 
Fig.8. R-D curves comparisons among different methods in Container, 
 Foreman, Paris and Mobile sequences 
 
Table 1. BDPSNR performance of FME5, Shimizu,   
Yamada, and two proposed methods FS5+DSRC, 
FME5+ DSRC (FS5 is the comparing basis). 
Method FME5 Shimizu Yamada 
Proposed+
FS5+ 
DSRC 
Proposed
+FME5+
DSRC 
(dB) BDPSNR BDPSNR BDPSNR BDPSNR BDPSNR
Container 
(10 fps) -0.03 -0.01 -0.29 -0.02 -0.14 
Foreman 
(10 fps) -0.03 -0.01 -3.27 0.00 -0.21 
Paris 
(15 fps) -0.01 -0.01 -1.05 -0.01 -0.13 
Mobile 
(30 fps) 0.00 0.00 -2.39 -0.03 -0.17 
Average -0.02 -0.01 -1.75 -0.02 -0.16 
 
 
Table 2. Complexity reduction of Shimizu, Yamada, and 
two proposed methods FS5+ DSRC, FME5+ DSRC 
(FS5 is the comparing basis) 
Method FME5 Shimizu Yamada 
Proposed+
FS5+ 
DSRC 
Proposed+
FME5+ 
DSRC 
Refuction Motion Est Time
Motion  
Est Time
Motion 
Est Time 
Motion 
Est Time 
Motion 
Est Time
Container
(10 fps) 19.35 52.83 69.79 84.25 19.35 
Foreman
(10 fps) 10.71 54.13 42.20 81.45 10.71 
Paris 
(15 fps) 15.25 52.38 61.24 81.79 15.25 
Mobile 
(30 fps) 15.97 58.51 68.75 82.67 15.97 
Average 15.32 54.46 60.50 82.54 15.32 
