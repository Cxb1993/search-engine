I 
中文摘要 
由於網際網路與資訊科技的快速發展，許多組織必須面對支援分散式異質平台運算環
境之協同設計工作流程的運作問題。近年來，運用代理人技術發展工作流程管理平台以支
援分散式協同設計環境，已經成為一個發展快速的解決方案與研究重點。本研究以建構疏
鬆耦合協同設計型態之工作流程為焦點，主要目標為應用智慧型代理人技術，發展可運作
於分散式環境下之自發性協同設計工作流程管理。研究歷程分為兩個階段，第一階段是以
美國工作流程管理聯盟提出之工作流程參考模型為基礎，從本體論觀點，發展通用性工作
流程定義與系統元件運作架構，並定義各代理人的目標、行為模式與代理人間之溝通機制。
第二階段則是依據第一階段的研究成果，以 JADE 代理人平台為載具，以分散式協同設計
運作環境為設計主體，建構以代理人為基之協同研發流程平台。同時並引用 IC 產業 PCB
協同設計流程案例，驗證系統之可行性。本研究之價值，在於發展彈性工作流程建構方法
與管理機制，並以智慧型代理人技術為基礎，建立分散式環境下之協同設計運作平台，有
助於提昇協同設計工作流程應用整合整體之綜效，對產業應用發展有相當之效益。 
 
關鍵字：工作流程、代理人、協同設計、工作流程管理系統、本體論 
英文摘要 
With the rapid development of Internet and information technologies, many organizations 
are faced with managing the workflow for collaborative design on heterogeneous platforms 
linked to a distributed computing infrastructure. Recently, the use of agents for collaborative 
design in distributed environment has shown promise as a solution. In this research, we focus on 
developing the loose-coupled collaborative workflow management system with the intelligent 
agent technology in the distributed environment. There are two stages in our research. The first 
stage is to apply ontology point of view to develop a general workflow definition mechanism 
based on the workflow reference model proposed by Workflow Management Coalition, and 
define the goals, beliefs, and actions for each intelligent agent and the agent communication 
language (ACL) model between agents. For the second stage, by using JADE platform as agent 
design platform we develop and implement agent-based collaborative workflow platform 
(ACWP) based on the definition from the first stage. With the ACL message mechanism 
constructed by previous stage, the workflow elements can be applied to other heterogeneous 
workflow platforms. Finally, this research applies printed circuit board (PCB) collaborative 
design as a case study to investigate the validation of proposed ACWP system. The contribution 
of our research is to apply agent technology to develop a flexible workflow constructing 
technology and management mechanism for collaborative design in distributed environment. This 
research will move up the whole synergy of design process for collaborative design industries. 
 
Keywords: Workflow, Agent, Collaborative design, Workflow management system, Ontology 
2 
3. 協同設計要能夠支持跨平台架構，並應發展一個共通的標準，進行系統的整合，與達到
資訊的傳達及分享。 
4. 在目前的研究成果中，較缺乏疏鬆耦合式協同設計的討論。 
3.2 工作流程管理 
工作流程參考模型由美國工作流程管理聯盟所提出[9]，它認為工作流程是企業流程全
部或部份的自動化，在這個流程中，文件、資訊、作業，依據既定的程序規則，從一個參
與者傳送到另一位參與者中[9]。依執行過程，可將工作流程分為三個主要階段任務[27]：
流程定義階段提供了流程定義工具，它依據組織／角色模型等資料，進行流程元件內容的
定義；流程推進服務階段負責工作流程的制定與推動執行，外部應用系統的介面整合；工
作執行與監控階段則負責監控流程執行的狀況，並與使用者互動。為了系統整體的運作，
工作流程參考模型提供了整合於各階段中的五個主要元件，作為工作流程設計及發展之藍
本。這五個主要元件分別為：流程定義工具、工作流程推進服務、工作流程客戶端應用程
式、被呼叫的應用程式、管理及監控機制。 
美國工作流程管理聯盟提出的工作流程參考模型，已經成為研究與設計工作流程的參
考標準。在流程設計上，Kuo and Cheng [15]認為工作流程的運作必須以三個 R (角色、遶徑、
規則)為基礎。基於這三個 R 的定義，工作流程中的元件才能夠清楚地定義出來。例如，工
作流程的綱要、流程、作業、流程狀態、作業狀態、工作流程參與者，以及所有導出的案
例[7, 8]。流程知識本體(process ontology)是用以定義工作流程概念的一種方法[4]。 
美國工作流程管理聯盟的工作流程參考模型，提供了不同工作流程系統間互通的標準
介面，然而，一些問題仍然存在於現行的工作流程系統間，諸如資源衝突、工作流程執行
上的缺乏彈性、工作處理的被動性、缺乏標準語法、以及缺乏互通性[7, 17, 23]。 
探討上述的幾項缺點，軟體代理人(software agent)技術提供了工作流程管理系統彈性
的、分散式的、互通性以及替代的智慧解決方案。軟體代理人技術在建構以工作流程管理
系統為基的協同設計環境上，已經被大量的使用。 
3.3 代理人理論與技術 
代理人用來表示一段具有自發性 (autonomy)、社交能力 (social ability)、反應性
(reactivity)、主動性(proactiveness)、移動性(mobility)等性質的目標導向的軟體程式[2, 19, 
28]。通常，將具有上述性質的代理人稱為智慧型代理人(intelligent agent) [5, 18, 22, 29]。 
代理人技術是目前在分散式環境下，協同產品發展主要的研究方向，為何選擇代理人
技術作為解決方案，綜合學者對代理人應用領域的研究與歸類，有下列幾點的觀察可供考
量[2, 18]： 
1. 問題應用領域中，包含了資料、處理的問題、以及責任等分散式的特性。 
2. 現存組織結構的整合性，以及必須要維持它的組成單位的自主性。 
3. 互動過程相當的複雜，例如包含協調、資訊分享、以及合作等。 
4. 問題解決方案沒辦法從開始至結束，預先地完整描述清楚。 
 
代理人溝通語言(agent communication languages, ACL)提供了代理人之間交換資訊與知
識的方法，它是在多代理人系統(multi-agent aystem, MAS)上，所有互動行為的基礎。成立
於 1996 年的智慧實體代理人基金會(Foundation for Intelligent Physical Agents, FIPA)，為一
推動代理人技術標準化之非營利組織，由 IBM、Motorola、NTT、Siemens 等企業所組成，
IEEE 於 2005 年 6 月 8 日將 FIPA 納入為第 11 個標準委員會，目前已成為 IEEE Computer 
Society 的標準組織。FIPA 於 1996 年推出標準化的代理人溝通規格，處理異質性代理人間
的溝通問題，並於 1998 年將行動代理人技術項目納入標準化之作業。FIPA 的代理人溝通
規格，就是用來處理代理人溝通語言的訊息格式，它是以 KQML 為基礎制訂的，包含了代
理人溝通行為或意圖的語意描述[6]。同時，FIPA 也定義了用來與其他代理人溝通的語意語
言，每一個代理人都可以與使用相同語義表示的代理人進行溝通。FIPA 提出了代理人平台
的參考架構(reference architecture)[1]，它包含了所有用以管理代理人平台的元件，如訊息傳
4 
理人便會進行使用者之身份驗證。在使用者順利通過驗證後，便取得使用者的角色權限，
然後將控制權轉移至工作流程代理人群組，自動激發對應之代理人，執行工作流程任務。
在工作流程執行時，亦可透過客戶端應用程式介面，連結客戶端應用，完成作業。主控界
面代理人肩負了整個系統執行的控制與管理。閘道代理人則扮演中介角色，負責接收由協
同設計外包公司傳送來的訊息或需求，轉送給主控界面代理人；或由主控界面代理人接收
訊息或任務，將之轉送給客戶端代理人，這樣可以避免客戶端的使用者直接連線至協同設
計公司的系統，造成可能的惡意入侵。 
 
圖 1 系統概念性架構 
工作流程本體論分析 
工作流程定義機制包含兩個部份，首先必須要定義工作流程的詮釋資料模型(metadata 
model)，其次要能建立彈性的工作流程定義機制(flexible workflow definition mechanism)。工
作流程的詮釋資料模型可用知識本體(ontology)的觀念，加以釐清工作流程物件間的運作關
係。彈性的工作流程定義機制，必須要能彈性地組合成不同的工作流程結構，以符合企業
不同的流程組合，這可應用物件導向之元件化概念來達成，進而達到物件共享之目的。 
圖 2 為本研究定義之工作流程元件知識本體(workflow component ontology)，是以
WfMC 工作流程參考模型為基礎，模型中主要的組成包含：工作流程樣板(workflow 
templates)、工作流程案例(workflow instances)、作業(tasks)、作業案例(task instances)、角色
(roles) 、規則 (rules) 、客戶端應用 (client applications) 、被呼叫之應用系統 (invoked 
applications)、訊息 (messages)、文件 (documents)、專案效能分析 (project performance 
analysis)。其中，訊息元件、文件元件、作業元件、作業案例、工作流程樣板、工作流程案
例為工作流程知識本體之核心元件。訊息元件與文件元件為基礎元件，用以定義在流程中
要傳遞的訊息內容，與需要使用的文件；作業元件是在分派原則控制下，指定了流程參與
者應執行的任務(activities)，並包含了流程傳遞中，需要傳送的訊息元件與文件元件，作業
元件執行時，會觸發嵌入於作業元件的客戶端應用，以及將呼叫的應用程式(invoked 
applications)。整個工作流程樣板是由數個作業元件，依流程控制規則串接而成。系統中可
依協同設計工作流程的特性與參與對象的不同，定義各種不同的工作流程樣板。在運作上，
使用者依需求觸發工作流程樣板，系統便複製工作流程樣板，並產生工作流程案例
(workflow instances)來執行。 
6 
代理人行為模式定義以主控界面代理人為例。主控界面代理人為主控了整個平台的運
作，與各代理人間的溝通。使用者代理人提供了使用者登入之介面，並作為啟動其他代理
人之主要控制媒介。它會依照使用者之權限，開啟「帳號－功能」對應權限矩陣，取得使
用者之功能權限表，然後啟動對應之代理人，並傳送 “Starting” 之 ACL 訊息給工作流程代
理人群組之成員，通知其準備提供服務。 
4.2 代理人模式建構與系統模組規劃 
依據系統之初步整體架構，定義雛型系統發展目標與功能項目，可能需求之技術內涵
與可用之資源，並參考代理人導向軟體工程方法論，詳細界定協同設計流程平台，以及各
智慧代理人之行為模式，逐步建立技術整合之途徑。此程序主要乃完成各代理人模組項目
之開發，採用模組化平行進行方式執行之，再將各模組進行整合。 
系統模組流程建置 
主要是依據在第一階段完成定義之代理人行為模式，設計各代理人模組細部功能，並
界定代理人模組與角色權限之關係。代理人為基之協同工作流程平台的設計是以 JADE 為
基礎，JADE 是一個免費之代理人平台，提供圖形化界面與模組供設計者觀察代理人間之訊
息溝通與運作情形，它並遵循 FIPA 組織所訂的代理人訊息溝通 ACL 國際標準，可以減少
在分散式環境下設計代理人系統的困難性。 
代理人溝通模式建置 
主要是依據各代理人元件之行為模式，設計各代理人間之 ACL 溝通訊息模式，並觀察
其 ACL 互動模式是否正確，以建立代理人自發性之行為準則，部分之溝通模式，參考圖 3。 
 
圖 3 各代理人間之溝通模式 
4.3 協同設計應用案例導入與雛型系統整合效能評估 
PCB 協同設計案例導入 
本研究將以 PCB 協同設計為研究對象，透過業者訪談方式，分析 PCB 協同設計的流
程，如圖 4 所示，以增加研究成果之真實性。案例的建構目前已有初步成果，詳細的內容
可參考已發表論文[10]。 
雛型系統整合與效能評估 
透過上述各項代理人模組之測試，並進行必要之修正與調整，並整合各模組，完成雛
型系統，如圖 5。利用 ACWP 平台，資料整合上可取的即時共識、可減少溝通上之誤差、
可即時確認工程變更、可擴展客戶服務面與分享產品設計之相關知識。另外，透過協同機
制，將製造商的產業知識與客戶做密切結合，增加客戶對廠商之依賴性，有利爭取更多訂
單，且透過資料庫的建置，針對不同客戶特性，提供即時知識，縮短研發討論時程，也可
增加接單成交率。 
8 
1. Bellifemine, F., Caire, G., Trucco, T., Rimassa, G. and Mungenast, R. (2005), “JADE 
Administrator’s guide/ Programmer’s guide”, available at: 
http://jade.tilab.com/doc/index.html. 
2. Boudriga N. and Obaidat, M. (2004), “Intelligent agents on the web: A review”, Computing in 
Science and Engineering, July/August, pp. 35-42. 
3. Chiang, T. A., Trappey, A. J. C., and Ku, C. C. (2006), “Using a knowledge-based intelligent 
system to support dynamic design reasoning for a collaborative design community”, 
International Advanced Manufacturing Technology, accepted. 
4. Chung, P. W. H., Cheng, L, Stader, J., Jarvis, P., Moore, J. and Macintosh, A. (2003), 
“Knowledge-based process management-an approach to handling adaptive workflow”, 
Knowledge-Based Systems, Vol. 6, pp. 149-160. 
5. Etzioni, O. and Weld, D. S. (1995), “Intelligent agents on the Internet: Fact, fiction, and 
forecast”, IEEE Expert, Vol. 10, No. 4, pp. 44-49. 
6. FIPA (2002), “FIPA ACL message structure specification (SC00061)/FIPA ontology service 
specification (XC00086)”, available at: http://www.fipa.org/repository/aclspecs.html. 
7. Georgakopoulos, D., Hornick, M. and Sheth, A. (1995), “An overview of workflow 
management: From process modeling to workflow automation infrastructure”, Distributed and 
Parallel Database, Vol. 3, pp. 119-153. 
8. Gudes, E. and Tubman, A. (2002), “AutoWF-A secure web workflow system using 
autonomous objects”, Data and Knowledge Engineering, Vol. 43, pp. 1-27. 
9. Hollingsworth D. (1995), “Workflow Management Coalition: the Workflow Reference 
Model”, Workflow Management Coalition, TC00-1003. 
10. Huang, C. J. and Liao, L. M. (2007), “An intelligent agent-based collaborative workflow for 
inter-enterprise PCB product design”, The International Conference on Industrial 
Engineering and Engineering Management (IEEM2007), Singapore, December 2-5, 2007. 
(IEEE Catalog Number: 07EX1992C) 
11. Huang, C. J., Trappey, A. J. C. and Yao, Y. H. (2003), “Design and develop WfMC-based 
modularized network collaborative design system”, Journal of Chinese Institute of Industrial 
Engineer, Vol. 20, No. 4, pp. 422-434. 
12. Huang, C. J., Trappey, A. J. C., and Yao, Y. H. (2006), “Developing an agent-based workflow 
management system for collaborative product design”, Industrial Management and Data 
Systems, Vol. 106, No. 5, pp. 680-699. 
13. Huang, G. Q., Huang, J. and Mak, K. L. (2000), “Agent-based workflow management in 
collaborative product development on the Internet”, Computer-Aided Design, Vol. 32, pp. 
133-144. 
14. Korhonen, J., Pajunen, L. and Puustjarvi, J. (2003, October 13-17), “Automatic composition 
of web service workflows using a semantic agent”, Proceedings of the IEEE/WIC 
International Conference on Web Intelligence (WI’03), pp. 566-569. 
15. Kuo, G. S. and Cheng, H. Y. (1999), “On workflow and agent technologies on the 
Internet/intranet”, Global Telecommunications Conference 1999, Vol. 3, pp. 1937-1941. 
16. Kvan, T. (2000), “Collaborative design: what is it?”, Automation in Construction, Vol. 9, pp. 
409-415. 
17. Li, H. and Shi, M. (1999), “Application of agents in workflow management system”, 
APCC/OECC '99. Fifth Asia-Pacific Conference on Communications and Fourth 
Optoelectronics and Communications Conference, Vol. 2, pp. 1068-1072. 
18. Liang, W. Y. and Huang, C. C. (2002), “The Agent-based Collaboration Information System 
of Product Development,” International Journal of Information Managment, Vol. 22, pp. 
211-224. 
19. Maamar, Z. (2002), “Association of users with software agents in e-commerce”, Electronic 
Commerce Research and Applications, Vol. 1, pp. 104-112. 
20. Madhusudan, T. (2005), “An agent-based approach for coordinating product design 
workflows”, Computers in Industry, Vol. 56, pp. 235-259. 
21. Monplaisir, L. (1999), “An integrated CSCW architecture for integrated product/process 
design and development”, Robotics and Computer-Integrated Manufacturing, Vol. 15, pp. 
145-53. 
10 
研究成果之學術與應用價值 
本研究成果可以做為傳統集中式工作流程設計業者系統發展的另一個研究方向，對於
目前在分散式環境下運作的產業，有直接的參考價值，可突破傳統技術應用上的思考困境。 
1. 對於學術研究之貢獻 
代理人技術之發展已有數年，然由於其理論與技術上的深度，目前在國內參與研究發展
的學者專家，尚不普及。發展代理人為基的系統，除了要有訓練良好的系統分析與設計
能力之外，更必須熟悉物件導向方法論與代理人導向軟體工程方法論，才能真正發揮智
慧代理人技術的特性與價值。本研究可作為理論與實務上的研究參考，對於國內智慧代
理人技術之學術研究，有相當之貢獻，並可延伸為後續更寬廣的其他專業領域研究。 
2. 對於國家發展與產業應用之貢獻 
協同研發流程與管理機制是現今國家發展 E 計畫之重點項目，本研究計畫配合國家發展
重點方向，並考量產業協同研發設計之分散式環境，運用智慧代理人技術設計協同研發
流程，克服產業流程整合面臨之分散式、異質平台運作環境，對於產業協同設計平台的
研發與實際的應用，提供了一個具體的解決方案，對於提升產業研發能量有直接之助益。 
是否適合在學術期刊發表或申請專利 
本研究目前已發表之期刊與研討會論文清單如下： 
1. Huang, C. J. and Liao, L. M. (2007), “An intelligent agent-based collaborative workflow for 
inter-enterprise PCB product design”, The International Conference on Industrial 
Engineering and Engineering Management (IEEM2007), Singapore, December 2-5, 2007. 
(IEEE Catalog Number: 07EX1992C) 
2. Huang, C. J., Liao, L. M. and Chen, C. C. (2007), “Applying agent technology to develop 
coordinative workflow for cross organizational application”, The 8th Asia Pacific Industrial 
Engineering & Management System and 2007 Chinese Institute of Industrial Engineers 
Conference (APIEMS & CIIE Conference 2007), Ambassador Hotel, Kaohsiung, Taiwan, 
R.O.C., December 9-12, 2007. 
3. Huang, C. J., Trappey, C. V. and Ku, C. C. (2007), “A JADE-based autonomous workflow 
management system for collaborative IC design”, The 11th International Conference on 
Computer Supported Cooperative Work in Design (CSCWD2007), Melbourne, Australia, 
April 26-28, 2007. (IEEE Catalog Number: 07EX1675) 
4. Huang, C. T., Wang, W. L. and Huang, C. J. (2007), “An agent applied collaborative design 
workflow for CATV equipment”, International Conference on Automation Technology 
(Automation 2007), The Howard Plaza Hotel Taipei, Taipei, Taiwan, June 13-14, 2007. 
5. Huang, C. J., Liao, L. M. (2008), “Applying intelligent agent technology to develop 
coordinative workflow platform for inter-organizational applications”, International Journal 
of E-Business Management, Vol. 6, No. 4, pp. 185-194. (EI: Inspec) 
6. Trappey, C. V., Trappey, A. J. C., Huang, C. J., C. C. Ku (2009), “The Design of a 
JADE-Based Autonomous Workflow Management System for Collaborative SoC Design”, 
Expert Systems with Applications, Vol. 36, No. 2, Part 2, pp. 2659-2669. (SCI) 
7. 黃敬仁、廖麗滿 (2007)，疏鬆耦合式網路協同設計之分析與建置，勤益學報，第 25 卷，
第 1 期，第 M1-M19 頁。 
8. 黃敬仁、廖麗滿 (2008)，企業電子化之動態工作流程建構機制設計，技術學刊，第 23
卷，第 1 期。 
主要發現或其他有關價值 
代理人技術的應用是有多面向的，在本研究中除了發現代理人技術可用於分散式環境
下工作流程系統的建置，亦可以藉由代理人技術的特性，與實務上廠區資料蒐集與處理系
統相結合，典型的應用包含與無線射頻技術(RFID)的整合，可以作為資料蒐集後的自主性
應用系統設計。另一方面，亦可以藉由代理人技術溝通與協同的特性，整合排程(scheduling)
技術與演算法設計，這方面目前發表的論文與整合技術的方法尚不多見。 
  共 2 頁  第 2 頁 
在學術研究的創新性方面以及未來產業實務排程問題解決方案的應用方面，非常值得排程領
域的學者專家重視與投入研究。 
這次本專題研究投稿的論文是以排程研究為主軸，屬於先導型的研究，主要是先了解排
程的運作機制與演算法設計，在未來的研究上，本研究將試圖從代理人觀點，分析排程演算
法的運作機制，拓展目前代理人技術與排程技術的整合應用，逐漸將重心轉移至異質系統整
合方向，將代理人技術與排程方法(scheduling)的應用方法，以形成比較整合性的研究成果，
開拓更寬廣的應用領域，並發表整合排程技術與代理人技術之整合性研究論文。 
 
三、榮譽 
這次本研究發表的論文已獲 ICCIE2008研討會評選為優等論文，並推薦收錄於北京航空
航天大學學報(EI: Compendex)，同時亦於 2009年 2月受邀投稿於 Special issue of the journal 
Computers & Industrial Engineering on “Models and Algorithms for Production & Service 
Systems”，預期於 6月完成投稿。 
 
四、投稿論文全文 
 
  
simultaneously as long as the total size of the batch 
does not exceed the machine capacity.  
Makespan or maximal completion time is equivalent 
to the completion time of the last job leaving the last 
work center of production system. The smaller 
makespan implies a higher utilization. The utilization 
for flowshop is closely related to productivity of the 
production system. Therefore, the makespan 
performance measure is selected as the objective.  
The rest of this paper is organized into four sections. 
Section 2 describes the proposed two-BPM flowshop 
problems with MILP model and reviews related 
papers. The proposed heuristic is presented in 
Section 3. Extensive computational experiments are 
conduct in Section 4 to evaluate the performance of 
the heuristic. Finally, concluding remarks are made 
in Section 5. 
2. RELATED WORK 
Problems related to scheduling batch processing 
machines, in which machine has the ability of 
processing a number of jobs simultaneously has 
received much attention in the deterministic 
scheduling literature in recent years. The main 
classification division is research done for batch 
processing machines with incompatible job families 
vs. those with compatible job families (Imelda et al., 
2005). The first model concerns the case of 
incompatible product families. According to this 
model, only products belonging to the same family 
may be processed simultaneously. Kempf et al. 
(1998), Uzsoy (1995) and Dobson and Nambimadon 
(2004) developed deterministic algorithms to 
schedule batch processing machines with 
incompatible job families. The second model 
considers batch processing of compatible product 
families. In this case, it is assumed that products 
belonging to alternative families may be processed 
simultaneously. For example, Lee et al. (1992) model 
burn-in oven as batch processing machine. The role 
of batch machines is used as a bottleneck for 
resources, and can process a number of jobs 
simultaneous. The different jobs can be batched 
together but the processing time of the batch is given 
by the longest processing time among all jobs in the 
batch (Lee et al., 1992, Uzsoy, 1994, Lee and Uzsoy, 
1999). This paper considers the second model. 
In a batching machine with compatible job families, 
Uzsoy (1995) first proposed heuristics to minimize 
the makespan and total flow time. Brucker et al. 
(1998) proposed dynamic programming algorithms 
to optimize several different criteria both for 
unrestricted batch sizes, and for batches that can 
contain at most n jobs. The dynamic programming 
algorithms are further extended to identical parallel 
batching machines for unrestricted batch sizes (Van 
Der Zee, 2007). Dupont and Dhaenens-Flipo (2002) 
presented some dominance properties for a general 
enumeration scheme and for the makespan criterion, 
and provided a branch and bound method. Kashan et 
al. (2008) proposed a hybrid genetic heuristic (HGH) 
to minimize makespan. 
From Perez et al. (2005), we know that the 
scheduling research for batch processing machines 
almost focus on single and parallel batch machines. 
Due to the problem of single or parallel batching 
processing machines is complicate, some efficient 
heuristics based on hybrid genetic algorithm are 
proposed. In flowshop batch processing machines, 
there is little reported research deal with it. 
Damodaran and Srihari (2004) addressed the problem 
of scheduling two batch processing machines in a 
flowshop (two-BPM flowshop). The paper proposed 
two models to schedule batches of jobs on 
two-machine flowshop. Mixed integer formulations 
are proposed for the flow shop problem when the 
buffer capacity is unlimited or zero. Liao and Liao 
(2008) consider the same problem as Damodaran and 
Srihari and propose improved MILP models for the 
problem. A heuristic procedure based on MILP will 
also be developed to derive near-optimal solutions in 
much less computation time. Sun and Kim (2003) 
considers a scheduling problem in a two-BPM 
flowshop and three efficient polynomial time 
algorithms are proposed. The paper assumes that the 
processing time of a batch depends on the individual 
machine, but not on the jobs in the batch. That is, all 
the jobs sizes are one. Therefore, the scheduling 
problem is simpler than Damodaran and Srihari 
(2004) considered.  
From Liao and Liao (2008), we know that the 
MILP-based heuristic is still an integer program, 
where the computation time grows exponentially 
with problem size. The heuristic only solved problem 
size about 15 jobs or 8 batches. Therefore, this paper 
develops a polynomial time heuristic to solve the 
larger problems. 
3. PROBLEM DESCRIPTION 
This paper considers two-BPM flowshop problem 
with the following assumptions. 
  
Step 2. Let bρ  denote jobs assigned of a new batch. 
The initial bρ  includes the first job of σ  and 
bρσσ \= . If φσ = , then go to Step 7. Now the 
first job of σ  is the ith job.  
Step 3. If 0)(
 min
=−∑ ∈ bbatchj jS σ  or ni > , then 
go to Step 6. If the )(iσ  is not satisfy the condition 
∑ ∈−≤ bj jSi )()( min σσ , then 1+= ii , repeat Step 
3. 
Step 4. )}({ ibb σρρ ∪=  and )}({\ iσσσ = . Use 
JA to schedule the batches bρρ ,...,1  and jobs of σ , 
and obtain the sequence and its makespan 'maxC . 
Step 5. If max
'
max CC < , then 'maxmax CC = , otherwise 
)}({\ ibb σρρ =  and )}({ iσσσ ∪= . And 1+= ii  
and go to Step 3. 
Step 6. If φσ ≠ , then 1+= bb  and go to Step 2. 
Step 7. Use JA to schedule the batches bρρ ,...,1 , 
and obtain the best batch sequence *σ  and the 
*
maxC .  
Step 8. Interchange two jobs wherein two adjacent 
batches are. And then use JA to schedule the batches 
and compute the makespan, 'maxC .  
Step 9. If *max
'
max CC < , then interchange the two 
jobs, update *σ , 'max*max CC =  and go to Step 8.  
Step 10. Choosing one job of a batch inserts to the 
next one batch. All batches still hold the feasible 
capability. If the insert can improve makespan, then 
the insert is accepted and until no improvement 
obtained. If any insert improves makespan, then go to 
Step 8, otherwise, the best job sequence is *σ  and 
the best makespan *maxC . 
The above procedure can be divided two parts. The 
former part includes Step 1 to Step 7 which is the FF 
procedure based on JA. The latter part applies 
adjacent swap and insert techniques. Step 1 applies 
JA such as the adjacent two jobs with nearer 
processing are. But through FF algorithm and 
batching procedure, the jobs of a batch whose 
processing times exists more difference. In order to 
reduce the difference of jobs’ processing order in a 
batch, adjacent swap technique is applied. That is, 
jobs with nearer processing time on each machine 
should be combined to a batch to make the makespan 
reduction. 
Example 1. Consider the same numerical example as 
in Damodaran and Srihari (2002). The processing 
times and sizes of jobs are given in Table 1. The 
machine capacities are assumed to be 10. Applying 
the above steps yields the following result. (See 
Figure 1) 
Step 1. All jobs are arranged by JA and obtain initial 
sequence }4,6,9,8,1,5,10,3,7,2{=σ )}10(),1({ σσ K= . 
79max =C . (See Table 2) 
Step 2. 1=b , }2{1 =ρ , }4,6,9,8,1,5,10,3,7{=σ , 
2=i . 
Step 3. 08210)(
 min
>=−=−∑ ∈ bbatchj jS σ  and 
102 <=i . 2105)2( −≤=σ . 
Step 4. }7,2{1 =ρ , }4,6,9,8,1,5,10,3{=σ . Use JA to 
schedule 1ρ  and σ , and obtain 77'max =C . 
Step 5. Since max
'
max CC < , update 77max =C  and 
go to Step 3. (See Table 3 (a)). 
Step 3. 03)52(10)(
 min
>=+−=−∑ ∈ bbatchj jS σ  
and 103<=i . 33)2( ≤=σ . 
Step 4. }3,7,2{1 =ρ , }4,6,9,8,1,5,10{=σ . Use JA to 
schedule 1ρ  and σ , and obtain 74'max =C . 
Step 5. Since max
'
max CC < , update 74max =C  and 
go to Step 3. (See Table 3 (b)). 
Step 3. 0)352(10)(
 min
=++−=−∑ ∈ bbatchj jS σ , 
go to Step 6. (Batch 1 is done.) 
Step 6. Because }4,6,9,8,1,5,10{=σ , then 
1+= bb and go to Step 2. (The new batch is starting) 
Repeat Step 2 to Step 6, all jobs is combined as 4 
batches.  
Step 7. Use JA to schedule the batches 41,...,ρρ , 
and obtain the best batch 
sequence )}4,6(),9,8,1(),5,10(),3,7,2{(=σ which is 
shown as Table 4. The *maxC  is 46. 
Step 8. Interchange two jobs wherein two adjacent 
batches are. The best neighborhood is swap of jobs 1 
and 10 and the makespan is 45'max =C .  
  
Table 5 The best batch sequence of Example 1 
j job  7, 3, 2 5, 1 10, 8, 9 6, 4 
1jp  6 10 10 15 
2jp  10 14 9 4 
js  10 10 9 7 
 
 
Figure 1 The Gantt chart of the best batch sequence of Example 1 
 
5. COMPUTATIONAL EXPERIMENTS 
In this section, we evaluate the proposed heuristic by 
using the same problem generating scheme as Uzsoy 
(1994) and Liao and Liao (2008). Job processing 
times were randomly generated from a discrete 
uniform distribution (1,100)U . The capacities of 
both machines were assumed to be 10. Job sizes were 
generated from discrete uniform distributions 
between mina and maxa . Three different distributions 
of job sizes are design including the factors and the 
levels which are summarized in Table 6. The MILP 
models, generated by a computer program, were 
solved by LINGO 8.0. The proposed heuristic and 
MILP model run on a Pentium Ⅳ 2.4 GHz (Core 2 
Quad) PC. 
 
Table 6 The best batch sequence of Example 1 
Distribution ),( maxmin aa  Description 
I (1, 5) Job sizes are relatively small 
II (4, 10) Job sizes are relatively large 
III (1, 10) Job sizes are distributed widely 
 
This paper evaluates the performance of the proposed 
heuristic by solving the problem with 10=n , 
15=n  and 20=n . For each factor combination, 10 
independent instances were generated, resulting in a 
total of 30 instances for the proposed heuristic. In the 
first experiment, the problem with 10=n  is solved 
by the MILP model described in Section 3 and the 
optimal solution is obtained. The solution of the 
proposed heuristic compares with the optimal 
solution. The relative error percentage (REP) is used 
to evaluate the performance, and described as follows. 
The computational result is shown as Table 7. 
100*
max
*
maxmax ×−=
C
CC
REP
H
 (12) 
In 15=n  and 20=n  problems, few instance can 
solve by MILP model in 24 hrs. Therefore, in the 
second experiment, the proposed heuristic solves the 
problem with 15=n and 20=n  instances, and 
compares the solution with the lower bound. That is, 
the lower bound, LB, substitutes the optimal solution, 
*
maxC  in formulation 12. The performance index is 
named REPLB and described as follows. The 
computational result is shown as Table 8. 
100max ×−=
LB
LBC
REP
H
LB  (13) 
Table 7 presents the performance of the proposed 
heuristic for 10=n  problems. The three averages of 
RPE are respectively 6.10, 1.02 and 5.71 in 
distributions I, II and III. Specially, in distribution II 
of Tables 7, there are 7 instances optimum. The 
percentage of optimum is 70%. By the way, the 
average ratios of LB are respectively 0.89, 0.99 and 
  
6. CONCLUDING REMARKS 
For two-BPM problem, as the number of batch 
rapidly increases, the computational time of MILP 
model becomes more exhausted. As job batch is 
larger than 8, few instance can be solved. In 15=n  
problems with distribution II, job sizes are relatively 
large; no instance can be solved by MILP-based 
heuristic in 12 hrs. This paper proposes a heuristic 
with polynomial time for flowshop with two-BPM 
such that the makespan is minimized. Because the 
complexity of the MILP-based heuristic is depended 
on the number of job’s batches, the both heuristics’ 
comparison is under up-to-eight batches problem. As 
job sizes are relatively small, distribution I, the 
MILP-based heuristic is significant efficient. But as 
job sizes are relatively large, distribution II, the 
proposed heuristic is significant effective. Therefore, 
the proposed heuristic and the MILP-based heuristic 
are respectively effective and efficient for 
distribution II and distribution I. 
The proposed heuristic is used to solve larger batches 
problem and the performance is evaluated by the 
lower bound. The complexity of the proposed 
heuristic is polynomial, its efficiency is significant. 
But it still lacks property of batching such that 
batching maybe not fit. Recently, we will try to find 
the optimum property to evaluate the performance of 
the proposed heuristic. And future research also may 
develop a meta-heuristic to obtain near-optimum and 
construct branch and bound to solve the optimum for 
two-BPM problem. In addition, deriving the better 
lower bound is another further research. 
ACKNOWLEDGMENTS 
This research is funded by the National Science 
Council under Grants NSC 96-2221-E-167-003. And 
special thanks to all who have helped to make this 
study. 
REFERENCES 
Brucker, P., Gladky, A., Hoogeveen, H., Kovalyov, M. Y., 
Potts, C. N., Tautenhahn, T., Van De Velde, S. L., 
(1998), “Scheduling a batching machine”, Journal of 
Scheduling, Vol. 1, 31-54. 
Damodaran, P., Srihari, K., (2004), “Mixed integer 
formulation to minimize makespan in a flow shop with 
batch processing machines”, Mathematical and 
Computer Modeling, Vol. 40, 1465-1472. 
Dobson, G., Nambimadon, R. S., (2001), “The batch 
loading and scheduling problem”, Operations Research, 
Vol. 49, No. 1, 52–65. 
Dupont L., Dhaenens-Flipo, C., (2002), “Minimizing the 
makespan on a batch machine with non-identical job 
sizes: an exact procedure”, Computers and Operations 
Research, Vol. 29, 807–819. 
Kashan, A. H., Karimi, B., Jenabi, M., (2008), “A hybrid 
genetic heuristic for scheduling parallel batch 
processing machines with arbitrary job sizes”, 
Computers and Operations Research, Vol. 35, 
1084–1098. 
Kempf, K. G., Uzsoy, R., Wang, C. S., (1998), 
“Scheduling a single batch processing machine with 
secondary resource constraints”, Journal of 
Manufacturing Systems, Vol. 17, No. 1, 37–51. 
Lee, C. Y., Uzsoy, R, Martin-Vega L. A., (1992), 
“Efficient algorithms for scheduling semiconductor 
burn-in operations”, Operations Research, Vol. 40, No. 
4, 764–775. 
Lee, C. Y., Uzsoy, R., (1999), “Minimizing makespan on a 
single batch processing machine with dynamic job 
arrivals”, International Journal of Production Research, 
Vol. 37, No. 1, 219–236. 
Liao, C. J., Liao, L. M., (2008), “Improved MILP models 
for two-machine flowshop with batch processing time”, 
Mathematical and Computer Modeling (in press).  
Perez, I. C., Fowler, J. W., Carlyle, W. M., (2005), 
“Minimizing total weighted tardiness on a single batch 
process machine with incompatible job families”, 
Computers and Operations Research, Vol. 32, 327–341 
Pinedo, M., (2002), Scheduling: Theory, Algorithms, and 
Systems, Second Edition, Prentice-Hall, New Jersey. 
Sung, C. S., Kim, Y. H., (2003), “Minimizing due date 
related performance measures on two batch processing 
machine”, European Journal of Operational Research, 
Vol. 147, 644-656. 
Uzsoy, R., (1994), “Scheduling a single batch processing 
machine with non-identical job sizes”, International 
Journal of Production Research, Vol. 32, No. 7, 
1615-1635. 
Uzsoy, R., (1995), “Scheduling batch processing machines 
with incompatible job families”, International Journal 
of Production Research, Vol. 33, No. 10, 2685–2708. 
Van Der Zee, D. J., (2007), “Dynamic scheduling of 
batch-processing machines with non-identical product 
sizes”, International Journal of Production Research, 
Vol. 45, 2327-2349. 
 
