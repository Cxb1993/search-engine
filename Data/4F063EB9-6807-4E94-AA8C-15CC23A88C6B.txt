Key-Words: - Semantic Web, RDF, word sense 
disambiguation, semantic annotation, ontology, 
Wordnet 
1 Introduction 
When looking for interested information through 
the traditional approaches such as category 
browsing or search engine, the users have to 
make lots of effort manually filtering out noise 
and prospecting for the interested pieces from the 
massive information feedback. 
The major drawback of the nowadays most 
commonly used Web language, the HTML, is its 
inability to encode the semantic information 
essential to a large range of Web applications. 
This is the main reason why new languages such 
as XML and RDF [1] have been developed. 
Some corresponding schemas, as well as 
extensions or applications of these languages 
include DAML [2], OIL [3], OWL [4], SHOE [5] 
and many others. 
Today’s Web was initially designed for direct 
human processing. With its current structure, 
machine-based Web applications are not possible 
unless its content is transformed into a 
machine-readable format with the semantic 
information encoded. And this is the major 
intention of the Semantic Web [6]: to create a 
new type of Web content which is meaningful to 
machines. Semantic Web contains not just one 
single kind of relation (the hyperlink) between 
resources, but many various kinds of relations 
between the various types of resources. 
The realization of the Semantic Web requires the 
widespread availability of semantic annotations 
for existing and new documents on the Web. 
Semantic annotations are to tag ontology class 
instance data and map it into ontology classes. 
The fully automatic creation of semantic 
annotations is still an unsolved problem. An 
approach that can effectively leverage 
semantically tagged data is definitely needed. 
This work aims at facilitating the migration from 
today’s Web to the future’s Semantic Web. It 
tries to automate the process of generating and 
annotating semantic information for the existing 
general-domain textual data. The semantic 
retrieval to these data is demonstrated also. The 
proposed framework can be viewed at three 
levels: data format level, semantics level and 
ontology level.  
 
The major concerns of this work are:  
1. Extract semantic information from the data; 
2. Annotate data with the semantics; 
3. Search for data based on the semantics; 
4. Make inference from the ontology 
2. Extract Semantic Information 
from Textual Data 
Up to August 2005 there are over 8 billion 
HTML documents on the Internet; however there 
is relatively a very small quantity of semantic 
annotated documents. One reason is that 
Semantic Web related standards and techniques 
are still under construction. However defining 
and annotating the semantic information to the 
data is still tough to most of the ordinary 
information providers (or editors). Especially for 
the existing innumerable web documents, how to 
make them “semantic” is a critical concern. In 
this section, how to automatically extract (or 
identify) the semantic information from textual 
data according to its context is investigated. This 
makes it possible to represent these data by 
concepts (semantics) rather than keywords. 
Because meaningful sentences are composed of 
meaningful words, any computer system that 
hopes to process natural languages as human do 
 2
popular issues in computational linguistics for a 
long while. Roughly speaking, recent advances 
benefit from machine learning techniques, 
sophisticated sense inventories, and large corpora 
to find relevant linguistic features.  
3. Annotate Textual Data with 
Semantics 
The semantic information can be extracted from 
text, the “interests” of the content is known. Now 
following issue is: how to annotate text with 
these interests in a form understandable or 
processable to the machine. 
In RDF, the underlying structure of any 
expression is a collection of triples, each 
consisting of a “subject”, a “predicate” and an 
“object”. The assertion of an RDF triple says that 
some relationship, indicated by the predicate, 
holds between the things denoted by subject and 
object of the triple. A set of such triples is called 
an RDF graph. A statement can be illustrated by 
a node and directed-arc diagram, in which each 
triple is represented as a node-arc-node link, as 
shown in figure 2. 
 
Figure 2. RDF graph data model to make 
statements about any resource. 
A node may be a Uniform Resource Identifier 
(URI) with optional fragment identifier (URI 
reference, or URIref), a literal, or blank. A URI is 
a compact sequence of characters that identifies 
an abstract or physical resource. Properties are 
URI references. A URI reference or literal used 
as a node identifies what that node represents. A 
URI reference used as a predicate identifies a 
relationship between the things represented by 
the nodes it connects. A predicate URI reference 
may also be a node in the graph. 
The RDF graph data model can be used to 
annotate data with semantics. Here the annotation 
can be on a “document basis”. A textual 
document can correspond to a “subject”, and a 
word sense in Wordnet can correspond to an 
“object”. As to the “predicate”, which indicates 
the relationship between “a textual document” 
and “a word sense”, should be qualified to reflect 
the idea of “has the concept in its context” or 
“refers to the concept in its context”. The RDF 
graph is as figure 3. 
Figure 3. Using RDF graph to annotate a 
document with semantic information 
In this RDF/OWL schema of WordNet ontology, 
there are three main classes: Synset, WordSense 
and Word. The former two have subclasses for 
the lexical groups present in WordNet, e.g. 
NounSynset and VerbWordSense. Each instance 
of Synset, WordSense and Word has its own URI. 
There is a pattern for the URIs so that (i) it is 
easier to determine from the URI the class to 
which the instance belongs; and (ii) the URI 
provides some information on the meaning of the 
entity it represents.  
4. Search for Documents Based on 
the Semantics 
The modern search engines operate based on the 
traditional information retrieval techniques. They 
directly and merely deal with the strings in the 
text, and do not take care of the semantic 
annotations in the documents. Therefore these 
techniques are far from sufficient for dealing with 
the Semantic Web documents which consist of 
rich semantic annotations such as RDF triples or 
RDF statements. As a result, to the nowadays 
search engines, the Semantic Web does not exist. 
This is a barrier to move toward Semantic Web 
 4
Wordnet ontology. After this the data are 
associated with the concepts in the ontology. In 
the retrieval, the query can also be first associated 
with the concepts in the ontology, then search for 
the instances data. Related concepts can be 
inferred from the ontology, the inference results 
can be use to facilitate the data management such 
as retrieval or classification. The approach is 
fully automated and can be apply to very large 
scale data. This work facilitates the migration 
from today’s web to the future’s Semantic Web 
in that the semantics can be annotated to all the 
existing textual data on the Web in this way. 
The proposed framework can be viewed at three 
levels: data format, semantics and ontology. In 
this work, the data format level is given the 
example of textual data. However, other kinds of 
data, such as image, video, audio, can be dealt in 
a similar approach. In semantics level, the 
extraction of semantic information of these data 
formats has their own specific techniques. 
Meanwhile, the RDF can still be used to annotate 
the semantics. 
  
References: 
 
[1] Resource Description Framework (RDF), 
http://www.w3.org/RDF/. 
[2] The DARPA Agent Markup Language 
Homepage, http://www.daml.org/. 
[3] Dieter Fensel, Frank van Harmelen, Ian 
Horrocks, Deborah L. McGuinness, and 
Peter F. Patel-Schneider. OIL: An ontology 
infrastructure for the semantic web. IEEE 
Intelligent Systems, 16(2):38–45, 2001. 
[4] Michael K. Smith, Chris Welty, and 
Deborah L. McGuinness. OWL Web 
Ontology Language Guide. W3C 
Recommendation, 10 February, 2004. 
Available at 
http://www.w3.org/TR/owl-guide/.  
[5] Jeff Heflin, Jim Hendler, Sean Luke. SHOE: 
A Knowledge Representation Language for 
Internet Applications. Technical Report 
CS-TR-4078 (UMIACS TR-99-71), Dept. of 
Computer Science, University of Maryland 
at College Park. 1999. 
[6] Tim Berners-Lee, James Hendler and Ora 
Lassila. The Semantic Web. May 2001. 
[7] Christiane Fellbaum, editor. 1998. WordNet: 
An Electronic Lexical Database. MIT Press, 
Cambridge, Massachusetts. 
[8] J. Kahan and M.R. Koivunen. Annotea: an 
open RDF infrastructure for shared Web 
annotations. In World Wide Web, pages 
623–632, 2001. 
[9] Aditya Kalyanpur, James Hendler, Bijan 
Parsia, Jenni-fer Golbeck, SMORE - 
Semantic Markup, Ontology, and RDF 
Editor, available at 
http://www.mindswap.org/papers/SMORE.p
df 
[10] L. Denoue and L. Vignollet. An annotation 
tool for Web browsers and its applications to 
information retrieval. In Proceedings of 
RIAO2000, Paris, April 2000. 
[11] D. Maynard, V. Tablan, H. Cunningham, C. 
Ursu, H. Saggion, K. Bontcheva, and Y. 
Wilks. Architectural elements of language 
engineering robustness. Journal of Natural 
Language Engineering, Special Issue on 
Robust Methods in Analysis of Natural 
Language Data, 2002. 
[12] M. Tallis, N. Goldman, and R. Balzer. The 
briefing associate: A role for cots 
applications in the semantic web. In 
Semantic Web Working Symposium 
(SWWS), Stanford, California, USA, 
August 2001. 
 6
J. Ma et al. (Eds.): UIC 2006, LNCS 4159, pp. 1114 – 1123, 2006. 
© Springer-Verlag Berlin Heidelberg 2006 
Evolution of Ubi-Autonomous Entities 
Jason Hung1, Kuan-Ching Li2, Wonjun Lee3, and Timothy K. Shih4 
1 Department of Information Management 
Northern Taiwan Institute of Science and Technology 
No. 2, Xueyuan Rd., Peitou, 112 Taipei, Taiwan, R.O.C. 
jhung@cs.tku.edu.tw 
2 Parallel and Distributed Processing Center 
Dept. of Computer Science and Information Engineering 
Providence University 
Shalu, Taichung 43301, Taiwan 
kuancli@pu.edu.tw 
3 Department of Computer Science and Engineering 
Korea University, Seoul, Korea 
4 Department of Computer Science and Information Engineering 
Tamkang University 
tshih@cs.tku.edu.tw 
Abstract. Ubiquitous power includes one important factor that is the 
coordination among small instances of individualized smart programs. With the 
coordination, intelligent strategies can be established to realize computing 
topology and to serve different purposes of computing goals. With the 
development of cellular phones and internet, these individualized programs exist 
in the digital world where a new ecosystem can be formed. These smart entities 
create groups and consume natural resources in the digital world. Competition 
and collaboration thus exists among different groups of autonomous entities. We 
propose a model, based on a concept called food web in ecosystem. Food web 
exists in natural words for minions of years and serves as a balancing algorithm 
among different types of species. We define the food web model for autonomous 
entities and propose algorithms for formation and communication. As a 
consequence, the proposed model can be used to consider the development of 
intelligent strategies and the underlying communication topology such that 
ubiquitous intelligences can be evolved on the digital food web. 
Keywords: Evolution Computing, Autonomous Agent, Food Web, Food Chain, 
Embedded Agents, Intelligent Networks, World Modeling and Semantics. 
1   Introduction 
Communication over wireless networks and Internet is growing increasingly and will 
have profound implications for our economy, culture and society. From mainframe-based 
numerical computing to decentralized downsizing, PCs and workstation computers 
connected by Internet have become the trend of modern computers. In addition to PCs, 
wireless communication further encourages personalized communication/computing 
1116 J. Hung et al. 
needs to be defined. The evolution of a particular agent species includes several states, 
as we should see in section 4. In our conclusion section, we point out potential 
applications of ubiquitous computing. 
2   Related Works 
The concept of agent-based software engineering is discussed in a survey paper [2]. 
The author presents two important issues: agent communication language and agent 
architecture. An open agent architecture for kiosk-based multimedia information 
service is proposed in [1]. Survey of different types of agents can be found in [5]. The 
author [5] also indicates that, Web-based intelligent agents are necessary and should 
be a trend to new engineering applications. However, application designers need to 
resolve the conflict between the client-server-based designs and the peer-to-peer 
protocol. The Java Agent Template (JAT) was proposed, which allows application 
designers to write Java programs run on heterogeneous computer environments.  
The concept of mobile agent is discussed in several articles [4]. Agent Tcl, a 
mobile-agent system providing navigation and communication services, security 
mechanisms, and debugging and tracking tools, is proposed in [3]. The system allows 
agent programs move transparently between computers.  
Many pervasive and ubiquitous researches combined with agent technology were 
found in the literature. A new smart meeting room system called EasyMeeting [7] 
explores the use of multi-agent systems. By the way, COBRA imports several 
different upper ontologies from the Standard Ontology for Ubiquitous and Pervasive 
Applications (SOUPA) [7]. The SOUPA is designed to model and support pervasive 
computing application. This ontology is expressed using the Web Ontology Language 
OWL and includes modular component vocabularies to represent intelligent agents 
with associated beliefs, desires, and intentions, time, space, events, user profiles, 
actions, and policies for security and privacy. In [9], the authors introduced a novel 
approach named Group-based Service Discovery (GSD). GSD combined the two 
fields by utilizing semantic service descriptions used in service matching to develop 
an efficient, distributed, scalable, and adaptive service discovery architecture for 
Ubiquitous and Pervasive computing environments.  
Wireless communication, sensor technology, and miniaturization of electronics 
enable us to create new form factors of communication devices. Computers are no 
longer heavy and bulky and hidden away under a desk, but available as miniature 
notebooks with built-in electronics for wireless communications with a computer 
network. Speech technology, touch screens, heads-up displays, and pointing devices 
allow us to experiment with new form factors and to integrate these into the things we 
wear (wearable) or, in an extreme case, even as body implants. In heterogeneous 
wireless infrastructure, [10] provides the Session Initiation Protocol (SIP) to support 
addressing and localization of users and end devices.  
The agent technology was applied widely in ubiquitous and context-aware 
environment. Context-aware Hospital Information System (CHIS) [8] is an example. 
Hospital information systems (HISs) that provide access to electronic patient records 
are a step in the direction of providing accurate and timely information to hospital 
staff in support of adequate decision-making.  
1118 J. Hung et al. 
communication statuses of links of an agent society. Therefore, network resource can 
be evaluated when an agent checks its surviving environment to decide its evolution 
policy. 
It is necessary for us to give formal definitions of the terminology to be used in our 
algorithms. In the following definitions, "= ='' read as "is defined by'' and ”Set_Of 
(X)” represents a set of object X: 
 Host_Station == URL × Resource × Set_Of(Agent) 
Resource == Network × CPU × Memory × Information 
Agent == Set_Of(Goal) × Policy 
Goal == Query_Return_URL × Query × Priority 
Agent_Society == Set_Of(Agent) 
Species ⊂ Agent_Society 
 
A Host_Station has a uniform resource locator (i.e., URL)1 which represents the 
station's unique network address. A host station has system resources (i.e., Resource) 
and can hold some agents (i.e., Set_Of(Agent)). Network represents the network 
facility available to a station. CPU represents the computation power of a station. 
Memory represents the storage of a station. It could be the main memory or the 
secondary memory. Information is available on a station. Each Agent has some Goals 
and a Policy, which is a set of application dependent factors the agent depends on to 
perform its evolution computation. Query_Return_URL is the URL where an agent 
should return its query results. Query is an application dependent specification, which 
represents a user request to the agent. Priority is an integer represents the priority of a 
goal. The larger the integer, the higher the goal priority. Agent_Society is a set of 
agents, which share a common goal. Species is an Agent_Society of the same goal 
priority. 
4   The Evolution of Ubi-Autonomous Entities 
An agent evolves. It can react to an environment, respond to another agent, and 
communicate with other agents. The evolution process of an agent involves some 
internal states of an agent, as well as a communication to other agents. As shown in 
figure 2, an agent is in one of the following states after it is born and before it is killed 
or dies of natural: 
• Living: an agent is born with a goal to live 
• Suspending: an agent is waiting for enough resource in its environment 
• Dangling: the agent loses its goal of surviving, it is waiting for a new goal 
• Mutating: the agent is changed to a new species with a new goal 
We use two single layered circles, one in dark and one in white, to represent the 
initial (creation) and final (termination) of agents, respectively. We also use four 
double layered circles to represent the four states as discussed. Since agents do not 
exist alone in general, we use two example agents in figure 2 to illustrate the 
communication process in ACN in general. The procedure of agent evolution and 
communication can be discussed below: 
                                                          
1
  We could use an IP address. But, since our implementation of agents is based on the Web, a 
unique URL is used instead. 
1120 J. Hung et al. 
Agent Messages 
Messages from an Agent Actions 
abort_goal(DestAgent, Search_results) The search process of DestAgent is abort. 
The search results are also passed to the 
DestAgent. After that, the source and the 
destination agents both transit to the 
dangling state. 
new_goal(DestAgent, Goal) A new search Goal is assigned to 
DestAgent. 
new_host(DestAgent, Host_station) The DestAgent is re-located at 
Host_station. 
The new_host message is used in conjunction with the new_goal message. After a 
new_goal message is received, the destination agent transits to a mutating state. The 
second type of agent messages are sent form a host station. Upon resources available 
at a host station, the host station may suspend and later resume the search process of a 
specific agent. In the case that the resources are lower than a threshold, the host 
station may kill an agent. 
Host Station Messages 
Messages from an Station Actions 
suspend_goal(DestAgent) The agent DestAgent is suspended. 
resume_goal(DestAgent) The agent DestAgent is resumed. 
kill_agent(DestAgent) The agent DestAgent is killed. 
4.2   Species Food Web and Niche Overlap Graph 
Agents can suspend/resume or even kill each other. We need a general policy to 
decide which agent is suspended of aborted. By our definition, a species is a set of 
agents of the same goal with a same priority. It is the priority of a goal rather than an 
agent we base on to discriminate two or more species. We need to construct a direct 
graph, which represents the dependency between species, w. r. t. a goal. We call this 
digraph the species food web. Each goal has a graph. Each node in the graph 
represents a species. All species of a connected food web are of the same goal. We 
assume that, different users at different host stations may issue the same query. Each 
directed edge has an origin represents a species of a higher goal priority and has a 
terminus with a lower priority. Since an agent (and thus a species) can have multiple 
goals, each goal of an articulation agent should have an associated food web.  
We give an example of an ACN in figure 3, were 4 different species exist, called 
W, X, Y, and Z. Species are represented as complete undirected graphs in different 
line style and colors (see figure 3). Each species has several agents (from agent a to 
agent i) as the following: 
 
1122 J. Hung et al. 
5   Conclusions 
Mobile agent based software engineering is interesting. However, in the literature, we 
did not find many similar theoretical approach to model what mobile agents should 
act on the Internet, especially how mobile agents can cooperate and compete. A 
theoretical computation model for agent evolution was proposed. However, there are 
other extensions to the evolution model. For instance, species in the natural world 
learn from their enemies. In our future model, agents can learn from each other. We 
can add a new state, the "learning'' state, to the agent evolution state diagram. When 
an agent is in the dangling state, it can communicate to other agents via some agent 
communication languages. Computing methods can be replicated from other agents. 
And the agent transits to the mutating state to wait for another new goal. In addition, 
when a station lacks of system resource, an agent in the suspending state can change 
its policy to admit to the environment before it transits to the searching state. These 
are the facts that agents can learn. On the other hand, in the cloning process, two 
agents on a station sharing a common goal can be composed to a new agent (i.e., 
marriage of agents). An agent composition state could be added to the agent evolution 
state diagram.  
    The evolution of computers has changed from mainframe-based numerical 
computation to networked stations. In line with the success of Internet technologies, 
in the future, computation and information storage are not limited to a single machine. 
It is possible that, an individual buy a primitive computer that only has a terminal 
connected to Internet. Personal data and the computation power are embedded within 
the Internet. Mobile agent and agent evolution computing will be very interesting and 
important. Our agent evolution model addresses only a small portion of the ice field, 
which should be further studied in the societies of network communications, 
automatic information retrieval, and intelligent systems. 
References 
1. P. Charlton, Y. Chen, E. Mamdani, O. Olsson, J. Pitt, F. Somers, and A. Wearn, “An Open 
Agent Architecture for Integrating Multimedia Services,” in Proceedings of the 
Autonomous Agents 97 conference, Marina Del Rey, California, U.S.A., 1997, pp. 522 - 
523.  
2. Michael R. Genesereth, “Software Agents,” communication of the ACM, Vol. 37, No. 7, 
Jul. 1994, pp.48 -- 54.  
3. David Kotz, Robert Gray, Saurab Nog, Daniela Rus, Sumit Chawla, and George Cybenko, 
“Agent Tcl: targeting the needs of mobile computers,” IEEE Internet Computing, Vol. 1, 
No. 4, July 1997, pp. 58 -- 67. 
4. T. Magedanz and T. Eckardt, “Mobile software agents: a new paradigm for 
telecommunications management,” in Proceedings of the 1996 IEEE Network Operations 
and Management Symposium (NOMS'96), Kyoto, Japan, 1996, pp 360 -- 369. 
5. Charles J. Petrie, “Agent-Based Engineering, the Web, and Intelligence,” IEEE Expert, Vol. 
11, No. 6, 1996, pp. 24 - 29.  
6. Peter S. Sapaty and Peter M. Borst, “WAVE: mobile intelligence in open networks,” in 
Proceedings of the 1996 1st Annual Conference on Emerging Technologies and 
Applications in Communications, Portland, OR, USA, 1996, pp. 192 -- 195. 
