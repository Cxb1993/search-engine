低成本且多功能之數位控制系統學習平台研製 
The developments of a low cost and versatile learning platform 
for digital control systems 
 
Abstract— A home automation module with programmable 
control instructions (PCIs) is devised in this project.  
Although it is implemented by using a low-cost 8-bit 
microcontroller with only 8 Kbytes of ROM spaces, a 
time-sharing task scheduler and 10 PCIs are included in the 
firmware.  Timer and counter control, logic functions, and 
temperature control are examples of PCIs.  Thanks to the 
design of pseudo nodes, these PCIs can also be combined to 
implement more complex functions that home automation 
needs. These modules, up to 65536 theoretically, share the 
same IP address, and can be found over the network via 
different port numbers.  No dedicated home server is 
necessary because the network communication (TCP/IP) is 
handled by the module.  A remote control and monitoring 
software is also developed to let users control the home 
automation modules on the Internet.  The programmable 
home automation module has a lower cost and better 
cost/performance ratio than current home automation 
modules. 
Keywords —Programmable home automation module 
 
I. INTRODUCTION 
The rapid development in computer and network 
technology has made the use of the Internet expand 
exponentially.  Although the Internet is currently used for 
reading, chatting, and searching for information, it can 
also be used in home automation which provides 1) 
increased comfort, 2) greater safety and security, and 3) 
efficient use of energy.  For example, the user can 
monitor and control his/her home gate, air-conditioner, 
and refrigerator over large distances.  Recently, A. 
Alheraish [2] proposed a home automation system which 
is based on the wireless GSM network.  This is an 
expensive way to control home appliances compared to 
the approach which use the Internet [1].  Kanma et al [3] 
also presented a home appliance control system 
architecture over Bluetooth technology.  The approach in 
[3] uses a cellular phone with Bluetooth communication 
capability to locally control home appliances.  In this 
case, each and every home appliance should be equipped 
with a serial communication port and a Bluetooth 
communication module to communicate with the cellular 
phone, which acts as the control terminal.  The cellular 
phone can also report statuses to or download manuals and 
programs from the remote service site via the internet.  
The initial cost is high because of the cellular phone with 
both internet and Bluetooth services, and those Bluetooth 
communication modules for home appliances.   
Although, Al-Ali and AL-Rousan [1] devised a less 
expensive Java-based home automation system, a 
dedicated home server to run Java server pages and Java 
beans is necessary and the ready-made embedded system 
board costs about USD$200.  Moreover, the Java-based 
home automation system controls only the on/off states of 
home appliances.  Actually, home appliances may be 
controlled according to several environment states or a 
local control algorithm.  These situations are not 
considered in previous results [1-3].  For example, timer 
control instruction can help user to turn on or off a home 
appliance after a specific interval of time.  Therefore, a 
low-cost home automation module with programmable 
control instructions (PCIs) and local control algorithms is 
devised in this paper.  These PCIs can also be combined 
to implement complex functions.  This is useful when a 
home user wants to turn on the light in the living room 
when either the gate or the garage door is opened, because 
a logic OR instruction is necessary to implement such a 
function.  Control techniques for temperature, power, etc. 
can also be built into the PCIs.  A remote control and 
monitor software is also developed to let users control the 
home automation module on the internet.  By using these 
programmable home automation modules, the users can 
control more efficiently their home appliances according 
to the weather conditions, lightness, etc.   
 
II. OVERVIEW OF THE HOME AUTOMATION MODULE 
The block diagram of the proposed home automation 
module with PCIs is shown in figure 1.  The hardware 
and software parts will be described in this section. 
A. Hardware 
  The hardware part of the module is a single board 
computer and it costs about USD$40 (see table 1 for cost 
analysis).  It consists of the followings: 
1. A 8-bit RISC microcontroller (8K Bytes of in-system 
self-programmable flash memory, 1K Bytes of 
internal SRAM) which handles all the tasks required 
to control home appliances according to the 
environment variables; 
2. A multiplexed RS232 port to support communications 
with other devices (e.g. programmable logic 
controllers, or GSM modules) and the remote control 
PC;  It is controlled by the microcontroller via a 
quad bilateral switch IC (CD4066BC); 
3. A TCP/IP network module for users to control home 
appliances and to monitor the security status on the 
Internet; 
4. 6 A/D input ports to access the home environment 
variables, e.g. temperature, humidity, etc.; 
5. A multi-purpose I2C/RS232 communication and push 
data to be sent. The programmable home automation 
module can automatically calculate the checksum 
information for error detection purposes. 
7. The ‘P control’ instruction is currently used to control 
any one of the analog input signals with a 
gain-scheduled proportional (P-type) control 
algorithm.  The reference value is entered in the 
function block by users.  It would be activated by the 
input signal.  The output signal of this instruction is 
a pulse-width-modulated (PWM) control signal to 
drive motors, heaters, etc.. 
 
Figure 4: 10 programmable instructions implemented in the home 
automation module 
Six bytes of data (defined in table II) are assigned in the 
firmware to each PCI to preserve the control parameters, 
and to identify its configuration and interconnections with 
another instruction.  The physical input and output nodes 
in table II refers to the inputs and outputs of the home 
automation module, respectively.  Only 6 physical inputs 
and 4 output controls are supported in this version of 
programmable home automation module due to the 
limitations of I/O pins of the microcontroller. 
C. The SMARTPC software 
The structure of the PC side software, SMARTPC, is 
shown in figure 5.  It is used to remotely control and 
monitor the programmable home automation modules.  It 
is written as a menu-driven window program.  The 
username and password are used to identify whether or not 
the user is authorized to use the SMARTPC program and 
to access the programmable home automation module.  
The commands provided by the SMARTPC program are 
divided into the following 4 groups: 
1. The first group, SmartPC_set in figure 5, is used to 
load the background picture of home floor planning 
and to decide where the sensors and those controlled 
appliances are placed;  The items Sw01-Sw05 and 
temperature are those 6 inputs supported by the home 
automation module; 
2. The second group, Program_SmartIO, is used to 
define the interconnections of the PCIs, and to enter 
the  control parameters of the PCIs; 
3. The third group, Link_SmartIO, can help users 
connect to 5 programmable home automation 
modules by using the same IP address and different 
port numbers.  The connection between the 
SMARTPC program and the programmable home 
automation module should be established first such 
that the interconnection settings and parameter values 
of the PCIs can be retrieved and changed.  
4. The last group, Remote_SmartIO, is used to control 
the status of the programmable home automation 
module. 
To initialize the SMARTPC program, the user should first 
load the home floor planning image file which includes all 
the locations of the sensor inputs and control outputs as 
the background. The commands in the menu item 
SmartPC_set shown can be used to put the status signals 
of the monitoring sensors and control relays.  Figure 6 is 
the screenshot of the SMARTPC program when the status 
signals of a temperature sensor, and a control relay are put 
on the image file of the home floor planning.   
TABLE II. CODING INFORMATION FOR EACH PROGRAMMABLE 
CONTROL INSTRUCTION 
Byte no. description 
1 Index of programmable control instructions 
2(bit7-bit4) 
1st input node  
 0000: physical input node I; 
 0001: virtual input node X; 
 0010-0011: virtual I/O node M, C; 
 0100-1111: reserved 
2(bit3-bit0) Node number for 1st input node, 0-15; 
3(bit7-bit4) 
2nd input node   
 0000: physical input node I; 
 0001: virtual input node X; 
 0010-0011: virtual I/O node M, C; 
 0100-1111: reserved 
3(bit3-bit0) Node number for 2nd input node, 0-15; 
4(bit7-bit4) 
Output node   
 0000: physical output node O; 
 0001: virtual output node Y; 
 0010-0011: virtual I/O node M, C; 
 0100-1111: reserved 
4(bit3-bit0) Node number for output node, 0-15; 
5-6 
Reserved for parameters used in timer control, 
counter control, temperature control, serial RS232 
port, and P-control instructions 
Username & Password
NO
YES
PASS ?
SmartPC_Set
START
END
Program_SmartIO Link_SmartIO Remote_SmartIO
Load/save picture
Sw01 ~ Sw05
Temperature
Appliances01 - 04
Exit
Monitor on/off
Run/Stop SmartIO
Key in PCIs
Return
IP/Port Config
Connect To
SmartIO 01~06
Write PCIs
Read PCIs
 
Fig. 5: The flowchart of the menu-driven SMARTPC monitor and 
control program 
As can be seen in figure 6, the red light means the door or 
window is open or the control relay is on, and the green 
light indicates the opposite meanings.  The yellow light 
is for temperature sensors, and the temperature value is 
used in the P-control instruction to obtain the PWM 
control signal is a simple gain-scheduled P-type controller.  
When the temperature value is below the reference by 2 
degrees, the PWM control signal for the heater will be 
always high.  If the physical temperature is lower than 
the reference value and the difference is within 2 degrees, 
the duty ratio of the PWM control signal is proportional to 
the value of the error.  The heater will be turned off if the 
physical temperature value is larger than the reference 
value. 
 
Fig. 8: The flowchart for the first operation mode of the timer 
control instruction 
Figure 10 shows the water temperature values of the water 
tank during the experiment. The non-smooth curve of the 
temperature values in figure 10 is due to the resolution 
limitation of the temperature sensor TCN75.  The 
performance is good in spite of the simple control 
algorithm.   
 
Fig. 9: The hardware setup of the remote water temperature control 
experiment 
 
IV.  CONCLUSION 
A low cost programmable home automation module with 
PCIs is proposed in this project.  Although 10 PCIs are 
included in current version of programmable home 
automation module, there is still room (about 4Kbytes) 
reserved for another 10 PCIs.  The cost of the TCP/IP 
communication module can also be further reduced if 
stand-alone Ethernet controller solution [4] is used.  
These will be done in the near future. 
REFERENCES 
[1] A. R. Al-Ali, M. AL-Rousan, “Java-Based Home Automation 
System,” IEEE Transactions on Consumer Electronics, vol. 50, no. 
2, pp. 498-504, May 2004. 
[2] A. Alheraish, “Design and Implementation of Home Automation 
System,” IEEE Transactions on Consumer Electronics, vol. 50, no. 
4, pp. 1087-1092, Nov. 2004. 
[3] H. Kanma, N. Wakabayashi, R. Kanazawa, H. Ito, “Home 
Appliance Control System over Bluetooth with a Cellular Phone,” 
IEEE Transactions on Consumer Electronics, vol. 49, no. 4, pp. 
1049-1053, Nov. 2003. 
[4] Microchip technology Inc., Stand-Alone Ethernet Controller with 
SPI Interface ENC28J60 datasheet, 2006. 
 
Fig. 10: The temperature values of the water in the tank during the 
experiment 
 
