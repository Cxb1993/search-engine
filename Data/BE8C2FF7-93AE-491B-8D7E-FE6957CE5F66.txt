 2 
(PDA)
 
(click 
wheel)
40
(Open Handset Alliance)
30
 
ITU-T E.161
4  3
12
(traveling salesman path) 
 
x y
4  3 ITU-T E.161
 
  
三、分析與設計 
 
( )  
ITU-T E.161
12
4 3
1 4  3
1
5 2
4 1-5
1-2-5 1-4-5
4  3
(Hamilton Circuits)
1-(b) 1-(c)  
 
 4 
Touch-sensitive Visual Development Framework 
Based on Prof-UIS Project,” Chinese Culture 
University, Technical Rep., 2008. [Online]. 
Available: 
http://faculty.pccu.edu.tw/~zyh2/techrept/Contact-
areaDriven.pdf.  
[10] Android platform, [Online]. Available: 
http://developer.android.com  
 
98  10  31  
 
 
 
 
 
 
 
 
 
 
 
98 9 12
14  
(Kyoto) 
 
 
NSC 97-2221-E-034-017 
 
( )  
 
( ) The 5th Int'l Conf. on Intelligent Information Hiding 
and Multimedia Signal Processing 
 
( )
 
 
( ) Touch-sensitive Alphanumeric Encrypting PIN Pad 
Design Based on Hamilton-connected Subgraph Recognition 
 
 
 
 
A.  
  
9/11 17:00
Check-in
(
http://bit.kuas.edu.tw/~iihmsp09/)  
 
 
圖一：報到與會議行程 
 
 C.  
  
(9/13)
( a) (
c)
 
 
 
( b)  
 
 
  
(a)                                    (b) 
 
 
(c) 
 
圖四：晚會照片與觀光手冊 
 
 
 
 
 
    
(a)                                    (b) 
 
圖六：會議光碟片與會議摘要封面 
 
 
 
 
IIH-MSP 2009
 
 
Mobile
HCI  
 
 
 
 
left, and right (abbreviated as U, D, L, R) by finger following 
the path of grid will influence the shape and the direction of 
the directed graph it forms. The final graph formed by the 
finger movement might not contain all twelve keys but a 
subset of it called a subgraph. 
Firstly, two kinds of subgraphs existed are defined: 
vertex-induced and edge-induced subgraph. A vertex-
induced subgraph is one that consists of some of the vertices 
of the original graph and all of the edges that connect them in 
the original. An edge-induced subgraph consists of some of 
the edges of the original graph and the vertices that are at 
their endpoints. The proposed patterns in this paper are all 
edge-induced subgraphs. 
Secondly, a connected subgraph is a connected graph 
consisting of a subset of the nodes and edges of some other 
graph. The connected subgraphs proposed in this paper are 
named Hamilton-connected subgraph which is a connected 
subgraph such that exist a path in the graph which visits each 
vertex exactly once. 
For illustration, Fig. 1 (c) gives us three connected 
subgraphs and only the last two are Hamilton-connected. 
Worthy of being mentioned in advance, these two patterns 
are designed for the characters “a” and “n” by imitating their 
calligraphy style. 
For analysis of Hamilton-connected subgraph, we 
represent the keypad graph by using adjacency list with n 
head nodes (n=12) and 2e list nodes (e=17) as shown in Fig. 
1 (d) [10]. The traverse for each possible path of Hamilton-
connected subgraph can be operated by one of the searching 
methods: depth first or breadth first. If the number of key-
vertexes for visit counts from 1 to 12, then the total paths are 
3236 computed by Fig. 1 (e). 
III. PATTERN DESIGN AND RECOGNITION EXPERIMENT 
A. Alphabet Pattern Design 
Among the 3236 kinds of Hamilton-connected directed 
subgraphs, we design 11 flap-shaped and 15 thin-shaped 
totally 26 lowercase letters with directed edges to be 
alphabet patterns as listed in Table 1. The flat-shaped pattern 
takes two rows and three columns wider but shorter than the 
shape of three rows and two columns for the thin-shaped. 
Each node is not fixed to one particular key, and the pattern 
series defined in Table 1 are mainly for the superset-subset 
relationships. 
For design and recognition purpose, firstly we use the 
enum class to encode the alphabet and its static method, 
valueOf(), to match them by the switch-case statements. 
Then instead of the MouseListener class methodology as 
presented in [6], the OnTouchListener class imported from 
the Android SDK has been used to handle the actions of the 
finger [11].  
The pattern recognition algorithm is presented in 
flowchart as depicted in Fig. 2 by using the finite-state 
machine the states defined as following: 
• State 0 is the initial state ready for recognition.  
• State 1 is the state after touching any key but then 
sliding out the keypad. 
• State 2 is the state after touching any key and then 
sliding into any adjacent key. 
• State 3 is the state after matching any pattern and 
then leaving the finger untouched for the keypad. 
The states can be caught by the Android MotionEvents of 
ACTION_DOWN, ACTION_MOVE and ACTION_UP. 
B. Experimental Results 
The experimental environment is built on the Android 
SDK 1.1 which is a touch-sensitive platform announced by 
the Open Handset Alliance (www.openhandsetalliance.com). 
After successful simulation on the SDK, the execution file 
named as touchVer2.apk is installed on a physical handset 
called Freerunner which is produced by Openmoko [12]. 
Figure 4 shows four snapshots of the execution process for 
accurately recognizing an alphabet “p” of the “RDLD” 
pattern as listed in Table 1. 
 
Figure 1. EPP design: (a) Layout based on ITU-T E.161; (b) Built in 
square-gridded graph; (c) Some induced subgraph examples; (d) Data 
structure for graph analysis; (e) The results of the analysis. 
259
