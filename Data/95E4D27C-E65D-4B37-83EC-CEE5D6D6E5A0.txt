II 
 
摘要 
 
現今的電子產品其功能性趨向多樣化，相較以往的電路則是越做越複雜，因此測試電子線路的成
本也隨之增加。為了降低測試電子線路的成本，所以本計畫利用量子的特性，提出一些新穎的邏輯測
試方法來測試布林電路。讓所有的布林電路都能被容易、快速且以低成本的方式測試完成。 
本計畫針對量子布林電路的測試領域來做相關研究，利用量子的物理特性，以及IBM公司藍道爾
博士的理論－所有的量子邏輯閘的操作轉換在熱力學上都是一種可逆的過程，意思是一台使用奈米尺
寸元件打造的通用型量子電腦，其所有的運算都是可逆的且理論上消耗的能量是很少的。根據以上兩
個特點來設計量子電路合成和測試的演算法和布林電路的測試系統。 
由於前人的文獻已經證明過任意的傳統布林電路都有辦法轉換成對應的量子布林電路。因此本計
畫將所有的量子布林電路安排成反覆邏輯陣列，並使其具有「壹可測性」，也就是說，對任意的量子
布林電路或是量子反覆邏輯陣列，其測試樣本的數目與該陣列的大小無關且同時與輸入位元的長度無
關。換句話說，我們只需要一個測試樣本就可以測試完畢任意長度與寬度(任意的輸入位元數)的任何一
個量子布林電路或陣列。 
 
關鍵詞 : 量子電路、電路合成、電路檢測、反覆邏輯陣列、可逆電路、量子計算。 
  
Abstract 
 
The circuits of modern electrical appliances become more and more complicated and the cost of circuit 
testing is rapidly increasing along with the complexity of the chip. To decrease the cost of circuit testing, so in 
this project, a novel method is proposed to perform logic testing for Boolean circuit by utilizing the quantum 
computation. In the future, any Boolean circuit can be tested easily, quickly, and cost-effectively, so that 
reliable and inexpensive products can be acquired by everyone. 
It has been proved that any Boolean circuit can have its quantum version. In this project, we showed that 
quantum Boolean circuits can be arranged into a 1-testable quantum iterative logic array (QILA). Furthermore, 
with superposition, which is a nanoscale phenomenon in the quantum computation, any quantum Boolean 
circuit and any QILA can be tested in just a few steps for any given classical Boolean function. By utilizing 
nanotechnology, these methods provide a smooth migration to the next generation circuit design and may 
intrinsically change the IC design flow in the future. 
In this project, we study the testing properties on quantum Boolean circuit and quantum iterative logic 
array (QILA). QILA consists of reversible quantum circuits constructed from a library of universal reversible 
gates, including quantum NOT, controlled-NOT (CNOT), generalized controlled-controlled-NOT (CCN), and 
Hadamard gates. Under stuck-at fault and cell fault model, we show that any QILA and quantum Boolean 
circuits are 1-testable. That is, the circuits can be tested with only one test pattern. 
 
Keyword : Quantum circuit, Circuit Synthesis, Circuit testing, Quantum iterative logic array (QILA), 
Reversible circuit, Quantum computation. 
1 
 
 壹、報告內容 
一、 前言 
 
從1994年，秀爾提出了一量子演算法，其可以在多項式時間內解出因數分解以及離散對數
的問題。此後有關量子計算與量子通訊的研究便急速增加。目前不少國家投入大量財力和人力
積極地做量子相關研究。因此如何運用量子的特性，來改善傳統物理學上所遇到的困難，是本
計畫主要的動機。 
 
目前，人們使用的電子產品除了方便性能提高之外，同時功能也越來越多。因此電路上的
設計也趨向複雜和體積小型化。依照傳統電路技術架構來看，有天還是會碰到物理極限，導致
科技無法繼續延伸。為了避免那天的到來，本計畫主要針對量子電路的設計、測試和模擬
（Quantum circuit design, testing and simulation）作研究。 
 
二、 研究目的 
 
為了讓所有的布林電路都能被容易、快速且以低成本的方式測試完成。因此本計畫將深入
研究量子電路的合成、測試和量子系統之實作方式，其內容與成果包括量子電路合成及測試之
理論分析，演算法探討，以及如何使用各種不同的方式來設計製作一個量子計算系統的實作過
程。其中，實作時有可能會遇到底層的各種錯誤，所以將其建立模型，並對應到傳統上層抽象
的錯誤模型中，探討是否可能有新的更有效率的測試方式或是容錯計算的技術。  
 
三、 文獻探討 
 
隨著消費者對產品容量的要求，半導體廠商必須利用奈米科技製造出符合消費者需求的商
品。先進的半導體製造技術通常被用於生產各種奈米結構。由於奈米技術的生成，越來越多電
晶體被規模性的整合在單一晶片上，同時也降低電晶體的成本。 
 
然而，奈米尺度的設備具有更高的製造錯誤率和許多外在因素所引起而導致較敏感的電晶
體和線路的故障，因此測試電晶體的難度隨著產品的複雜度而增加。測試這種高度複雜和密集
的電路將會變得非常困難和昂貴。另一方面，當設備變得越來越小時，將會出現量子效應。量
子疊加態(Superposition)和糾纏態(Entanglement)的現象，使我們可以運用量子計算(Quantum 
computation)去解開一些傳統無法解決的問題。例如 : Shor 演算法 [1] 和 Grover 搜尋演算法 
[2]。 
 
很有趣的一件事情是奈米級的現象同樣也可以被用來解決電路測量問題。前人的研究顯
示，任何傳統電路可以藉由一利用量子輔助做為中間儲存器的簡單替換演算法來執行。最近有
個最小型的輸入量子布林電路建構程序已經被發表出來[3] – [8]，所構造出來的量子布林電路
3 
 
五、 結果與討論 
 
量子電路檢測方面，我們也提出了電路測試演算法，在這個演算法中，利用由後向前傳遞
方式找到ㄧ組測試向量。輸入這組向量到電路中，檢查輸出向量是否正確，可以利用測試結果
找到有問題的量子位元。假設n個位元的量子布林電路有m個量子邏輯閘，這個演算法的說明
如下:  
1. 掃描整個電路，並且記錄每一個目的量子位元的位置。  
2. 選一個未標示的量子位元，其位元是某個邏輯閘的目的量子位元，然後標示這個位元。  
3. 利用由後向前傳遞方式，找到測試方程式。  
4. 根據測試方程式，可以得到一組測試向量。  
5. 如果仍然有未標示的量子位元，則跳到步驟 2。  
6. 組合所有測試向量，可以得到一組必要測試向量。  
7. 輸入必要測試向量到電路中，並且找到具有不正確值的輸出量子位元。  
8. 根據錯誤量子位元的位置，可以找到故障閘的可能位置。  
 
為了讓大家可以更清楚明白，本計劃如何用量子特性來檢測布林電路，因此我們取 000 來測
試量子半加器，對此半加器做電路檢測。 
 
 
 
在三個量子位元未經過半加器運算前，先用哈達馬邏輯閘做運算，然後透過半加器運算完後，
再使用哈達馬邏輯閘還原起初的量子狀態。此樣本證明了，當輸出與輸入不相同時，代表電路
出現錯誤。此方法還可以使用在輸入端的位元為疊加態時，同樣也可以偵測出電路中錯誤。如
下圖所示: 
 
 
5 
 
試電路。以下為QORA的流程圖 : 
 
 
 
 
本技術減少了測試電路的樣本並且同時大幅降低觀察線路所造成錯誤的檢查次數。同時跟傳統
的電路內建自我測試系統相比較，量子內建自我測試系統比傳統的系統的步驟更少，速度更加快
速。使得未來量子布林電路，再檢測方面可以大幅降低成本且縮短測試時間，使得電子產品將不
會受到物理限制，而更順利進步到新階段－量子世代。 
 
貳、 參考文獻 
 
[1] P. Shor, “Algorithms for Quantum Computation: Discrete Logarithms and Factoring”, in 
Proceedings of 35th Annual IEEE Symposium on the Foundations of Computer Science 
(FOCS), pp. 124–134, 1994.  
[2] L. Grover, “A Fast Quantum Mechanical Algorithm for Database Search”, in Proceedings of 
28th Annual ACM Symposium on the Theory of Computing (STOC), pp. 212–219, 1996.  
[3] T. Toffoli (ed. J. W. de Bakker and J. van Leeuwen), Automata, Languages and Programming, 
pp. 632. New York: Springer. 1980.  
[4] A. Barenco, C. H. Bennett, R. Cleve, D. P. DiVincenzo, N. Margolus, P. Shor, T. Sleator, J. 
Smolin, and H. Weinfurter, “Elementary Gates for Quantum Computation”, Phys. Rev. A, 52(5): 
3457–3467, 1995.  
[5] D. P. DiVincenzo, “Quantum Gates and Circuits”, Proc. Roy. Soc. Lond. A, 454, 261–276, 
1998.  
[6] M. Nielsen and I. Chuang, Quantum Computation and Quantum Information, Cambridge 
University Press, 2000.  
[7] I.-M. Tsai and S.-Y. Kuo, “An Algorithm for Quantum Boolean Circuit Construction”, in 
Proceedings of 2001 IEEE Conference on Nanotechnology, pp. 111–116, July 2001.  
7 
 
CNOT-based Quantum Circuits”, in Proceedings of Design Automation Conference 
(DAC-2002) pp. 419–424, June, 2002, New Orleans, Louisiana, USA.  
[26] L. T. Wang, C. W. Wu and X. Wen, Design for Testability: VLSI Test Principles and 
Architectures, Elsevier (Morgan Kaufmann), San Francisco, 2006.  
[27] I.-M. Tsai and S.-Y. Kuo, “Digital Switching in the Quantum Domain”, IEEE Trans. 
Nanotechnol., vol. 1, pp. 154–164, Sep. 2002.  
[28] I.-M. Tsai, S.-Y. Kuo and D. S. L. Wei, “Quantum Boolean circuit approach for searching an 
unordered database”, In Proc. 2002 IEEE Conf. Nanotechnol, pages 315–318. IEEE, Aug. 2002.  
[29] Y.-H. Chou, I.-M. Tsai and S.-Y. Kuo, “Quantum Boolean Circuit is 1-Testable”, In Proc. 2007 
IEEE Conf. Nanotechnol (IEEE-NANO‘07), pages 1292–1295, Aug. 2007, Hong Kong, PRC.  
[30] Y.-H. Chou, I.-M. Tsai and S.-Y. Kuo, “QBIST: Quantum Built-In Self- Test for any Boolean 
Circuit”, in Proc. of 26th IEEE VLSI Test Symposium (VTS’08), pages 261—266, San Diego, 
May 2008.  
[31] P. Benioff, “The computer as a physical system: A microscopic quantum mechanical 
hamiltonian model of computers as represented by turing machines,” J. Stat. Phys., vol. 22, no. 
5, pp. 563–591, 1980.  
[32] R. Feynman, “Simulating physics with computers,” Int. J. Theor.Phys., vol. 21, pp. 467–488, 
1982.  
[33] D. Deutsch, “Quantum theory, the Church-Turing principle and the universal quantum 
computer,” in Proc. R. Soc. Lond. A, vol. 400, 1985, pp.97–117.  
[34] C. Bennett and G. Brassard, “Quantum cryptography: Public key distribution and coin tossing,” 
in Proc. IEEE Int. Conf. Computers Systems and Signal Processing, 1984, pp. 175–179.  
[35] P. Shor, “Algorithms for quantum computation: discrete logarithms and factoring,” in Proc. 
35th Annu. IEEE Symp. Foundations of Computer Science, 1994, pp. 124–134.  
[36] L. Grover, “A fast quantum mechanical algorithm for database search,” in Proc. 28th Annu. 
ACM Symp. Theory of Computing, 1996, pp.212–219.  
[37] I. M. Tsai and S. Y. Kuo, “Quantum boolean circuit construction and layout under locality 
constraint,” in Proc. 1st IEEE Conf. Nanotechnology, 2001, pp. 111–116.  
[38] J. Cirac and P. Zoller, “Quantum computation with cold trapped ions,” Phys. Rev. Lett., vol. 74, 
pp. 4091–4094, 1995.  
[39] Q. Turchette, C. Hood, W. Lange, H. Mabuchi, and H. Kimble, “Measurement of conditional 
phase shifts for quantum logic,” Phys. Rev. Lett., vol. 75, pp. 4710–4713, 1995.  
[40] N. Gershenfeld and I. Chuang, “Bulk spin resonance quantum computation,” Science, vol. 275, 
pp. 350–356, 1997.  
[41] D. Loss and D. DiVincenzo, “Quantum computation with quantum dots,” Phys. Rev. A, vol. 57, 
pp. 120–126, 1998.  
[42] B. Kane, “A silicon-based nuclear spin quantum computer,” Nature, vol.393, pp. 133–137, 
1998.  
This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication.
1
Quantum Boolean Circuits are 1-Testable
Yao-Hsin Chou, I-Ming Tsai and Sy-Yen Kuo, Fellow, IEEE
Abstract—Recently, a systematic procedure was proposed to
derive a minimum input quantum circuit for any given clas-
sical logic with the generalized quantum Toffoli gate, which is
universal in Boolean logic. Since quantum Boolean circuits are
reversible, we can apply this property to build quantum iterative
logic array (QILA). QILA can be easily tested in constant time
(C-testable) if stuck-at fault model is assumed. In this paper, we
use Hadamard and general CCN gates to make QILA 1-testable.
That is, for any quantum Boolean circuit, the number of test
patterns is independent of both the size of the array and the
length of the inputs.
Index Terms—Iterative logic array (ILA), C-testable, M-
testable, design for testability (DFT), reversible circuit, quantum
circuit, quantum computation.
I. INTRODUCTION
NANOTECHNOLOGY has made the semiconductor in-dustry to keep up with the growth of consumers’
performance–capacity demands. Sophisticated semiconductor
fabrication techniques are used for the production of nanoscale
structures. By nanometer technologies, there are more transis-
tors fabricated on a single chip with increasing integration
scale, thus reducing the cost per transistor.
However, nanometer-scale devices have much higher man-
ufacturing fault rates and are more sensitive to failures of
transistors and wires owing to many external factors. Conse-
quently, the difficulty of testing each transistor increases as the
complexity of devices increases. Testing such highly complex
and dense circuits becomes very difficult and expensive.
On the other hand, when devices are getting smaller and
smaller, the quantum effect appears. With nanoscale phe-
nomenon such as superposition or entanglement, we can
perform quantum computation to accomplish some tasks that
are classically impossible. Some of these examples are Shor’s
factorization and Grover’s search algorithm [1], [2].
Manuscript received November 29, 2007; revised January 10, 2008.
This work was supported by the National Science Council, Taiwan, under
Grant NSC 95-2218-E-002-004.
The review of this paper was arranged by Associated Editor K. Likharev,
Editor K. Wang and Editor-in-Chief A. Requicha.
Y.-H. Chou is with the Department of Electrical Engineering, National
Taiwan University, Taipei 10617, Taiwan.
I.-M. Tsai is with the Department of Electrical Engineering, National
Taiwan University, Taipei 10617, Taiwan, and also with Chunghwa
Telecommunication Laboratories, Chunghwa Telecom Co., Ltd., Taoyuan
32601, Taiwan (e-mail: imtsai@cht.com.tw).
S.-Y. Kuo is with the Department of Electrical Engineering, National Taiwan
University, Taipei 10617, Taiwan, and also with the Department of Computer
Science and Information Engineering, National Taiwan University of Science
and Technology, Taipei 10607, Taiwan (e-mail: sykuo@cc.ee.ntu.edu.tw).
Copyright (c) 2008 IEEE. Personal use of this material is permitted.
However, permission to use this material for any other other purposes must be
obtained from the IEEE by sending a request to pubs-permissions@ieee.org.
It is interesting to note that these nano-phenomena can be
used to solve the circuit testing problem as well. Previous
study showed that any classical circuit can be implemented by
a straightforward replacement algorithm with auxiliary qubits
as intermediate storage. Recently, a construction procedure of
minimum input quantum Boolean circuit was proposed [3]–
[8]. The constructed quantum Boolean circuits are reversible.
Such circuits are of interest for several reasons.
One of the important reasons is energy saving. Reversible
circuits are information lossless and hence tend to dissipate
relatively little energy. According to Landauer’s principle, it is
possible to construct a computer using reversible circuits that
can compute with arbitrarily small amounts of energy [9].
Another reversible circuit’s property of particular interest
is that the Boolean function of a reversible circuit is bijective
(one-to-one and onto); hence it can be used to form an iterative
logic array (ILA), a system that consists of identical modules
arranged in a geometrically regular interconnection pattern.
ILA is well known to be easily testable [10]–[20].
In this paper, we study the testing properties on quantum
iterative logic array (QILA). QILA consists of quantum cir-
cuits constructed from a library of universal reversible gates,
including quantum NOT, controlled-NOT (CNOT), general-
ized controlled-controlled-NOT (CCN), and Hadamard gates.
Under stuck-at fault and cell fault model, we show that any
QILA and quantum Boolean circuits are 1-testable. That is,
the circuits can be tested with only one test pattern.
The rest of this paper is organized as follows: Section II
introduces basic notations and preliminaries about the quantum
circuits and the fault models we used in this paper. Section
III illustrates and proves the testability of quantum Boolean
circuits. Finally, conclusions are given in Sec. IV.
II. PRELIMINARIES AND NOTATIONS
A. Testability and Fault Model
Although the general logic testing problem is known to be
NP-complete [17], it is much easier to deal with the testing
problem for ILAs (iterative logic arrays). The definitions and
properties of ILA architectures can be found in [18]. ILA is
a well-known and demonstrated test scheme for systolic-like
array architectures. It provides a systematic way to test all cells
in an array with only the same number of test patterns for a
single cell. There is an assumption that the cell’s behavior in
the array is invariant over time, even if it is faulty. A faulty
cell’s function may deviate from the correct one in any manner,
as long as it remains combinational. In other words, we are
testing for permanent combinational faults only. If all cells
of an ILA have two directional I/O pins, we can construct
a two-dimensional ILA architecture with these cells. A one-
dimensional ILA architecture is illustrated in Fig. 1.
This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication.
3
Similarly, an example of three-qubit gate is the Controlled-
Controlled-NOT (CCN or Toffoli) gate. It consists of two
control bits, x and y, which do not change their values, and a
target bit z, which changes its value only if x = y = 1. The
bit-wise operation can be written as CCN(|x, y, z〉c,c,t) =
|x, y, (x ·y)⊕ z〉c,c,t, where “·” (dot) stands for bit-wise AND
operation. The Boolean functions of N, CN, CCN and some
generalized CCN gates are shown in Fig. 3.
11
00
ax
1111
1010
0101
0000
abxy
(a)
(b) (c) (d) (e)
111111
110110
101101
100100
011011
010010
001001
000000
abcxyz
111111
110110
101101
100100
011011
010010
001001
000000
abcxyz
111111
110110
101101
100100
011011
010010
001001
000000
abcxyz
ax
ax
by
ax
by
cz
ax
by
cz
ax
by
cz
Fig. 3. The symbols and Boolean functions for (a) N, (b) CN, and (c) CCN
gate. (d) is a zero-controlled CCN gate. (d) and (e) are generalized CCN gates.
III. TESTABILITY OF QUANTUM BOOLEAN CIRCUITS
A. The C- and M-Testabilities of Quantum Boolean Circuit
In this section, we study the testing properties of quantum
Boolean circuit which is an important subclass of quantum
reversible circuits constructed from a library of quantum
reversible gates called k-controlled-NOT (C⊗kNOT ) gates.
A C⊗kNOT gate has k+1 inputs and k+1 outputs. It keeps
the first k input signals unchanged, and inverts the last input
signal if and only if the first k inputs are all 1. Clearly, this
input-output mapping is reversible. If k = 0, a C⊗kNOT is
a simple quantum N (NOT) gate. C⊗1NOT and C⊗2NOT
gates are also known as the CN and CCN gates, respectively.
Definition 1. A quantum Boolean circuit is a quantum circuit
which implements Boolean functions. The input and output
spaces are only the eigenspace of the quantum system.
Lemma 1. Any classical circuit can be transformed into a
quantum Boolean circuit.
Proof: This is true since quantum Toffoli gate is a univer-
sal gate for classical circuit. By setting target bit to |1〉 at the
third input, we can get CCN(|x, y, 1〉) = |x, y, (x · y)⊕ 1〉 =
|x, y, x · y〉, which is the NAND function. NAND gate is well
known as a universal gate in classical computation. Also, we
can use the CNOT gate in quantum Boolean circuit as the
FANOUT in classical circuit. By setting target bit to |0〉 in a
CN gate, we have CN(|x, 0〉) = |x, x ⊕ 0〉 = |x, x〉, which
is a FANOUT. Similarly, AND, OR and NOT functions can
be easily replaced by C⊗kNOT gates. Following the fact that
{AND, OR, NOT} is universal, any classical circuit can be
transformed into quantum Boolean circuit.
For example, Fig. 4 and 5 show the quantum circuit im-
plementation with direct replacement for classical gates in a
half adder, where the inputs of the half adder are x, y, and
the output sum and carry are s = x¯ · y + x · y¯ and c = x · y
respectively.
x
y
c
s
0 x
x x
0 x . y
y y
x x
0 x + y
y y
x x
FANOUT AND ( . ) O R ( + )
x x
NOT (     )
Fig. 4. Straightforward replacement for classical gates in a half adder.
x
y
x
y
y
x
x . y
s = x.y + x.y
c = x.y
0
0
0
0
0
0
x
y
0
0
x . y
Fig. 5. Direct implementation of a quantum half adder with 8 aux. qubits.
Theorem 1. Any classical circuit can be transformed into
quantum Boolean circuit with minimal space.
Proof: Previous study showed that any classical circuit
can be implemented by the straightforward replacement al-
gorithm with auxiliary qubits as intermediate storage [5],
[6]. However, this inefficient implementation causes a large
number of auxiliary qubits to be used (See Fig. 5). In our
previous work [7], [8], a systematic procedure was proposed
to obtain a minimum space quantum circuit for a given
classical Boolean function. We first formulate the problem
of transforming an m-to-n bit classical Boolean logic into
a t-bit unitary quantum operation. The eligible solution set
is then constructed such that a solution can be easily found
by selecting any member from this set. We also showed that
the algorithm is optimal in terms of space. A constructed
minimum space quantum half adder is shown in Fig. 6.
In general, for an m-bit input and n-bit output classical
circuit, we need t = max(m, p + n + z) input/output qubits
to realize the same Boolean function of the classical circuit,
where p is the number of preserved input bits and z is the
number of bits for distinguishing the same value in the outputs.
It has been proved that t is the minimum value, mainly because
that if t < max(m, p + n + z), the number of qubits will not
be sufficient to construct a reversible quantum circuit.
This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication.
5
Definition 5. A C-testable array is an array testable with a
constant number of test patterns independent of the size of
the array.
Theorem 3. Any iterative logic array (ILA) with bijective cell
functions is C-testable.
Proof: If a so called “complete” or “exhaustive input
sequence” for a cell, which is an input sequence includ-
ing all input combinations of the cell, {0, 1,∼, 2n − 1},
(0, 0, . . . , 0), (0, 0, . . . , 1), · · · , (1, 1, . . . , 1), is entering a per-
fect cell of an iterative logic array, the output sequence must be
“complete” since the Boolean function of the cell is bijective.
The complete sequence from the first cell’s output will then
be the input of the second cell and will propagate on and
on. (Please see Fig. 1.) The main reason of why an ILA
with bijective cell functions is C-testable is that any fault
can automatically propagate to the end of the array and to
some observable primary outputs. It has been shown that a
d-dimensional ILA (d ∈ N) is C-testable if it has bijective
cell functions [18]. In this paper, we only consider about 1-
dimensional arrays.
Definition 6. An m-input, m-output, totally-specified Boolean
function f(X), X = {x1, x2, . . . , xm} is reversible if it maps
each input assignment to a unique output assignment [21]. An
n-input, n-output gate or circuit is reversible if it realizes a
reversible function.
Corollary 3. Any reversible Boolean circuit is bijective.
Proof: If a Boolean logic gate is reversible, every distinct
input must yield a distinct output, and the number of inputs
and outputs must be equal. Hence the Boolean function of
the gate, the mapping of inputs to outputs, is bijective. The
remaining part of the proof is also similar to Theorem 2; a
function of another bijective function is bijective. Then the
following can be easily proved by contradiction. Assume that
there is a reversible circuit which is not bijective, that is, there
must be two or more inputs which map to the same one output.
Thus it will be irreversible which contradicts the assumption
(→←). Hence all reversible Boolean circuits are bijective.
For example, Fig. 8 illustrates the comparison of the quan-
tum, classical, and reversible XOR gates.
Definition 7. A reversible iterative logic array (RILA) is
a regularly structured circuit which consists of an array of
reversible Boolean circuit cells.
Corollary 4. Any reversible iterative logic array is C-testable.
Proof: By corollary 2 and 3 and Theorem 3, RILA is
C-testable.
Also in [19]–[25], other testing properties of reversible
circuits are elaborated.
Definition 8. An M-testable array is an array testable with the
minimal number of test patterns independent of the size of the
array.
Definition 9. A quantum iterative logic array (QILA) is a
regularly structured circuit which consists of an array of
quantum Boolean circuit cells.
1111
0101
1010
0000
tcyx
x
y
t x
y
t
c
11
101
010
00
tyx
(a) (b) (c)
1111
0101
1010
0000
tcyx
x
y
c
t
Fig. 8. (a). A quantum XOR (CNOT) gate. (b). An irreversible classical
XOR gate. (c). Making the classical XOR gate reversible by preserving one
input bit. The symbol “×” indicates the irreversible function of the circuit,
whereas “©” represent the reversible ones.
Theorem 4. Any QILA is C-testable and M-testable.
Proof: A quantum iterative logic array (QILA) is a
regularly structured ILA composed of arrays of cells and
each cell of the QILA is a quantum Boolean circuit. Thus by
Theorem 2, each of the cell functions of the QILA is bijective.
Hence by Theorem 3, the quantum iterative logic array is
C-testable. Note that, unlike classical ILAs, each cell of the
QILA needs not to be identical. Similar proof is given in the
third paragraph of the proof of Theorem 2. Furthermore, since
QILA is C-Testable and by Theorem 1, any classical circuit
can be transformed into its quantum version with minimal
input/output lines, the transformed quantum circuits are also
bijective and suitable for constructing an iterative logic array
with the minimum number of test patterns independent of the
size of the array, which is by definition M-testable.
Now, we have some good properties about quantum Boolean
circuits. Given classical Boolean circuits, we can transform
them into quantum Boolean circuits or/and arrange them to
form some QILAs. They are all C-testable and M-testable.
B. 1-Testability of Quantum Boolean Circuit
It is well known that transferring classical circuits into a C-
testable iterative logic array is not an easy task. It needs many
design-for-testability techniques and huge overhead. Besides,
for an m-bit input and n-bit output classical circuit, say m =
128 and n = 100, we can hardly deal with so many testing
patterns for all 2m to 2n possible mappings. The number of
test patterns grows exponentially with the number of inputs.
Though the number of test patterns is a constant number or
even a minimum number such as 264, an exhaustive testing,
which applies all 2m possible input patterns for testing stuck-at
faults, is not practical when m increases.
However, by using quantum properties, such as Walsh-
Hadamard transformation, to achieve quantum parallelism,
H⊗
m |0〉⊗m = 1√
2m
∑2m−1
x=0 |x〉 and H⊗
m
( 1√
2m
∑2m−1
x=0 |x〉)
= |0〉⊗m , we can test the whole array of circuits with one
test pattern |0〉⊗n = |000 · · · 0〉. We call it “1-testable” since
it needs only one single test pattern and one output response.
This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication.
7
Now, if there is a stuck-at-one fault occurring in the second
qubit, the joint state becomes
1√
2
(|0〉+ |1〉)⊗ |1〉 ⊗ 1√
2
(|0〉+ |1〉) (29)
=
1√
2
(|01〉+ |11〉)⊗ 1√
2
(|0〉+ |1〉) (30)
=
1√
4
(|010〉+ |011〉+ |110〉+ |111〉) (31)
at stage (c) of Fig. 9. After applying the Hadamard gates, it
becomes
(H ⊗H ⊗H) 1√
4
(|010〉+ |011〉+ |110〉+ |111〉) (32)
= (H ⊗H ⊗H) |0〉+ |1〉√
2
⊗ |1〉 ⊗ |0〉+ |1〉√
2
(33)
= H(
|0〉+ |1〉√
2
)⊗H|1〉 ⊗H( |0〉+ |1〉√
2
) (34)
= |0〉 ⊗ |0〉 − |1〉√
2
⊗ |0〉 (35)
at stage (d) in Fig. 9. After the measurement, both the first and
third qubits must be in the zero state. However, the second
qubit will be either in state |0〉 or in state |1〉 with equal
probability (| 1√
2
|2 = |−1√
2
|2 = 0.5 and | 1√
2
|2 + |−1√
2
|2 = 1).
As a result, if one or more |1〉 states are measured at the
end of testing, there must be some faults in the CUT. That is,
each time we have a 50% detection rate under the single-fault
model. Hence, by simply repeating the trial for t times, there
will be a probability of 1−(1− 12 )t to detect if there is a single
fault. That is, if t = 10, we have a confidence over 0.999 (three
nines) of fault detection and we need only t = 20 trials to have
a six nines reliability (over 99.9999%). Besides, in the cases of
multiple faults on the same or different wires, the confidence
will be the same or even higher. By adjusting t, the probability
of false positive decreases exponentially. Given any arbitrary
small positive number ε, we can choose t ≥ log 1ε to make
the detection rate greater than 1− ε. Hence the detection rate
would be ≈ 1 with high probability (w.h.p).
This solution not only detects the fault, but also points
out the line on which the fault has occurred. In the example
mentioned above, the faulty wire will result in a superposition
state 1√
2
(|0〉+ |1〉) or 1√
2
(|0〉 − |1〉), which is also known as
the |+〉 or |−〉 state. Although the syndromes of both stuck-at
zero and stuck-at one faults are the same (the |1〉 state), if we
run the testing one more time right after the fault is detected
and measure the faulty qubits along the x-axis again, we can
identify the type of fault. When the measured result is in |+〉
or |−〉 state, there must be a stuck-at-zero or stuck-at-one fault
occurring respectively, as shown in Fig. 10.
Also, we could identify the faulty cells with 2-dimensional
array or by using the bisection method. We can identify a
faulty cells in O(log2 N) steps, where N is the length of the
array, or the number of cells.
Definition 10. A 1-testable circuit is an array of logic cells
testable with only one single test pattern which is independent
of both the size of the array and the length of the inputs.
0
1
Stuck-at zero fault
Stuck-at one faultA stuck-at cell fault on second wire
1
0
0
0
H
H
H
H
H
H
0
0
0
H
H
H
H
H
H
H
Fig. 10. Identifying the faulty wires and types of stuck-at faults.
Theorem 5. Any quantum iterative logic array (QILA) and
quantum Boolean circuit are 1-testable.
Proof: According to our testing method above, by uti-
lizing the superposition property of quantum computation to
achieve quantum parallelism and using multiple Hadamard
gates to compact the output response, QILA can be tested
by one single test pattern only. Besides, no matter how many
cells in an ILA and how many millions of gates in a cell
(regardless of the width of each cell), this array still can be
tested with one test pattern. In other words, the number of
test patterns is independent of both the size of the array and
the length of the inputs, which is 1-testable. Particularly, if a
QILA comprises only one cell, it is undoubtedly 1-testable.
That is, any quantum boolean circuit is also 1-testable.
Theoretically, any quantum Boolean circuit with input size
of w can be 1-testable by using w Hadamard gates to perform
a superposition of a combination of all 2w possible inputs. In
practice, however, it is better to partition the quantum circuit
into smaller cells of a quantum iterative logic array. Never-
theless, the partitioned cells do not need to be equal in length
since operations of tensor product for joint quantum system
will not change each cell’s bijective property in an iterative
logic array. In the future, different partitioning methods either
new or used in classical design for test (DFT) techniques are
worthy investigating.
To evaluate the overhead of this proposal, we know that we
first increase the number of qubits by t −m for transferring
classical circuits into quantum Boolean circuits and then apply
2m Hadamard gates. Although these two steps increase the
number of bits and elementary gates that is proportional to
the number of inputs, fortunately we have a super-exponential
speed-up for the circuit testing. Also the effective fault cover-
age rate will be 100% since we can perform all functional
testing by applying exhaustive testing techniques, which is
very hard to achieve in classical logic testing. Furthermore,
we do not need extra effort to perform test pattern generation,
fault simulation, output verification and result analysis as used
in classical testing.
The 1-testability of QILA only requires one test pattern and
one read-out as shown in the Fig. 11. Without measuring all
the output bits, we can use a Zero-Controlled-NOT (ZCN) gate
to detect the fault. Note that in a general ZCN gate, the target
bit is inverted only if all its control bits are set to 0. If we
found the target bit of ZCN gate was not inverted, there must
be some faults in this circuit.
This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication.
9
Yao-Hsin Chou received the B.S. degree in the
Department of Business Mathematics (Department
of Financial Engineering and Actuarial Mathemat-
ics) from Soochow University, Taipei, Taiwan and
the M.S. degree in computer science and informa-
tion engineering from National Central University,
Taoyuan, Taiwan in 1998 and 2001, respectively. He
is currently working toward the Ph.D. degree in the
Department of Electrical Engineering at the National
Taiwan University, Taipei, Taiwan. His current re-
search interest is quantum information science (QIS)
and electronic design automation (EDA).
I-Ming Tsai received the B.S. degree in electrical
engineering from National Cheng Kung University,
Tainan, Taiwan, R.O.C., the M.S. degree in telecom-
munications from the University of Pittsburgh, Pitts-
burgh, PA, and the Ph.D. degree in electrical en-
gineering from National Taiwan University, Taipei,
Taiwan, R.O.C., 1988, 1993, and 2003, respectively.
Since 1993, he has been with Chunghwa Telecom-
munication Laboratories, Taoyuan, Taiwan, R.O.C.,
where he works on circuit design, broadband switch-
ing, information security, and network architecture
evolution. His research fields include experimental and theoretical aspects of
quantum computing and quantum communication.
Sy-Yen Kuo is a Chair Professor and Dean of the
College of Electrical and Computer Engineering,
National Taiwan University of Science and Technol-
ogy, Taipei, Taiwan. He is also a Distinguished Pro-
fessor at the Department of Electrical Engineering,
National Taiwan University where he is currently
taking a leave of absence and was the Chairman at
the same department from 2001 to 2004. He received
the BS (1979) in Electrical Engineering from Na-
tional Taiwan University, the MS (1982) in Electrical
& Computer Engineering from the University of
California at Santa Barbara, and the PhD (1987) in Computer Science from the
University of Illinois at Urbana-Champaign. He spent his sabbatical years as a
Visiting Professor at the Computer Science and Engineering Department, the
Chinese University of Hong Kong from 2004-2005 and as a visiting researcher
at AT&T Labs-Research, New Jersey from 1999 to 2000, respectively. He
was the Chairman of the Department of Computer Science and Information
Engineering, National Dong Hwa University, Taiwan from 1995 to 1998, a
faculty member in the Department of Electrical and Computer Engineering
at the University of Arizona from 1988 to 1991, and an engineer at Fairchild
Semiconductor and Silvar-Lisco, both in California, from 1982 to 1984. In
1989, he also worked as a summer faculty fellow at Jet Propulsion Laboratory
of California Institute of Technology. His current research interests include
dependable systems and networks, software reliability engineering, mobile
computing, and reliable sensor networks. Professor Kuo is an IEEE Fellow.
He has published more than 270 papers in journals and conferences, and also
holds several patents. He received the distinguished research award between
1997 and 2005 consecutively from the National Science Council in Taiwan
and is now a Research Fellow there. He was also a recipient of the Best
Paper Award in the 1996 International Symposium on Software Reliability
Engineering, the Best Paper Award in the simulation and test category at
the 1986 IEEE/ACM Design Automation Conference (DAC), the National
Science Foundation’s Research Initiation Award in 1989, and the IEEE/ACM
Design Automation Scholarship in 1990 and 1991.
 2 
隨即抵達會場進行報到手續。會議場地是位於伊斯坦堡新城區的一個軍事博物館，
名為 Cultural Center of Askeri Muze (Military Museum)，最佳學生論文決賽及
論文發表的日期分別為 10月 12日及 10月 13日，在勘察場地後，分別確認比賽及
發表論文的會議室，隨即回旅館繼續為比賽作更好的準備。在充分的準備下，順利
及圓滿的完成參與最佳學生論文決賽及論文發表。
 
 
二、與會心得 
2010 IEEE International Conference on Systems, Man, and Cybernetics是一場
非常大型國際會議，主要徵稿的研究領域廣泛可分成 Systems Science & 
Engineering、Human-Machine Systems、Cybernetics等三大類，各大類項下包含數
十種領域，難得有機會遇到這麼多領域的學者，不僅能跟他們交流研究的心得，分
Classical and Quantum-Inspired 
Electromagnetism-like Mechanism for 
Solving 0/1 Knapsack Problems 
Yao-Hsin Chou, Chih-Cheng Chang, Chia-Hui Chiu, Fang-Jhu Lin, Yi-Jyuan Yang and Zan-Va Peng 
Department of Computer Science and Information Engineering 
National Chi-Nan University 
Puli 54561, Taiwan 
yhchou@ncnu.edu.tw 
Abstract- In this paper, we propose a novel evolutionary 
computing method which is called quantum-inspired 
electromagnetism-like mechanism (QEM) to solve 011 
knapsack problem. QEM is based on the electromagnetism 
theory and using the characteristic of quantum computation. It 
can rapidly and efficiently find out the optimal solution of 
combinatorial optimization problem. We compare the 
conventional genetic algorithm (CGA), quantum-inspired 
genetic algorithm (QGA), traditional electromagnetism-like 
mechanism algorithm (EM) and the quantum-inspired 
electromagnetism-like mechanism algorithm (QEM). The 
experiment results show that the QEM is better than CGA, EM 
and QGA in general cases. 
Keywords- quantum-inspired electromagnetism-like 
mechanism, quantum computing, combinatorial optimization, 
conventional genetic algorithm, quantum-inspired genetic 
algorithm, electromagnetism-like mechanism algorithm. 
I. INTRODUCTION 
Quantum-inspired Evolutionary Algorithm (QIEA) is a 
special issue of Estimation of Distribution algorithm (EDA), 
where quantum probability amplitudes are used with 
probabilistic models to describe the promising areas of 
decision space and to guide the exploration of the global 
optimum. Different from other EDAs, it has more than one 
probability variables that can be used simultaneously. 
Besides, it enhances the traditional evolutionary computing 
as well [1-19]. 
The most successful case of using Q uantum-inspired 
evolutionary computing is by Han and Kim in 2002 [2]. In 
general, this method can be used to deal with some difficult 
problems. For example, the travelling salesman problem, 
knapsack problem, generalized assignment problem, etc. 
In section II we briefly introduce electromagnetism-like 
mechanism. Then in section III we describe some basic 
characteristic of quantum computation. Follow that, a hybrid 
algorithm called quantum-inspired electromagnetisms-like 
mechanism (QEM) is proposed in section IV. In section V, 
978-1-4244-6588-0/10/$25.00 ©201 0 IEEE 
3211 
we use QEM to solve the 0/1 knapsack problem. After that, 
we will test some different benchmarks and the experiment 
results are shown in Section VI. Finally, conclusions and 
discussions about QEM are made in section VII. 
II. ELECTROMAGNETISM-LIKE MECHANISM 
Electromagnetism-like Mechanism (EM) is a heuristic 
algorithm developed by Birbil and Fang in 2003 [3]. Like 
Particle Swarm Optimization (PSO), EM is also a 
population-based algorithm. EM simulates charged points 
attracted or repulsed to each other in a feasible domain. By 
the force between the points, it will finally converge to the 
highly attractive region and find the optimal solutions. The 
variables are bounded in the form of: 
Min·f(x) 
sJ. XE [l,u] 
where �,u]={ xE9\nllk �xk �Uk,k=1,2, ... ,n } 
n : the dimension of the problem 
x : the possible solution of the problem 
lk : the lower bound in the kth dimension 
Uk : the upper bound in the kth dimension 
f(x) : the object function 
In this n-dimensional solution space, each point x 
represents a solution and a charge q is associated with each 
point (or particle). The charge q is related to the objective 
function value f (x) associated with the solution point x. As 
in evolutionary search algorithms, a population, or set of 
solution, is created. Each solution point will exert attraction 
or repulsion on other points of which the magnitude is 
proportional to the product of the charges and inversely 
proportional to the square of the distance between the points 
(Coulomb's Laws). The principle behind the algorithm is 
that inferior solution points will prevent a move in their 
direction by repelling other solution points in the population, 
and that superior solution points will facilitate the moves in 
their direction. 
ItP>=uI0>+f311>= [�] (6) 
where a and /3 are complex numbers, and lal2 and Ipl2 
are represented as the probability that the qubit will be found 
in the "0" state and "1" state, respectively. The sum of 
la 12 and 1.8 12 will follow the rule of probability and can 
be represented as 
(7) 
If there are n quantum bits in a quantum system, we can 
represent all of them as the following form: 
an 1 
Pn 
a2 (8) 
According to (7), for each la; 12 + IP; 12 = 1, i = 1,2 ... n. 
A key point when considering quantum systems is that 
they can compactly convey information on a large number 
of possible system states. In classical bit strings, a string of 
length n can only represent one of the 2n possible states. 
However, a quantum system of n qubits can represent a total 
of 2n dimensions. This means that even a short qubits can 
convey information on many possible system states. The 
representation of quantum bits as (8) is more easily to 
express any superposition of the states, and it is more 
suitable than other classified representations when applying 
to generating populations of evolutionary algorithms. 
The process of generating binary strings from the qubit 
string /3 is called measurement (observation). Let us have a 
binary solution x by observing the states of /3, where x =Xl, 
X2, ... ,Xn• At any generation in the binary string of length n, x is formed by selecting either 0 or 1 for each bit by comparing 
the probability, either laf or Ipl2 , with R. In a quantum 
computer, in the act of observing a quantum state, it 
collapses to a basis state. However, collapsing into a single 
state does not occur in QEM, since QEM is working on a 
classical computer, not a quantum computer. Besides, to 
observe (measure) a Q-bit string /3 , a string consisting of the 
same number of random numbers between 0 and 1 is 
generated, the elements of string x is set to 0 if R is less than 
square of /3; Otherwise, x is set to 1. For example, Table I 
shows the observation process. 
TABLE I 
OBSERVATION OF QUBIT STRING 
Number of qubit 1 2 3 4 5 
R 0.16 0.32 0.9 0.46 0.28 
!3 0.5 0.75 0.3 0.81 0.27 
x 0 0 1 0 1 
... N 
... 0.82 
... 0.62 
... 1 
3213 
IV. QUANTUM-INSPIRED ELECTROMAGNETISM-LIKE 
MECHANISM (QEM) 
In this section, we describe the QEM algorithm and denote 
the variables used in the algorithm as follows. 
MAXITER: the maximum number of iterations 
/3 : the probability matrix of the quantum bits. 
R : the reference matrix for qubits measurement 
x : the measurement result from {3, possible solutions 
q : the charge of each particle 
F : the electromagnetic force among particles 
Procedure of Q EM 
Begin 
i) 
ii) 
iii) 
iv) 
v) 
vi) 
End 
iteration = 0 
initialize /3 
while iteration < MAXITER 
Generate x by measuring /3 
Repair x 
Evaluate x and/(x) 
Calculate q use the/ex) 
Calculate of total force vector F globally 
by using /3 and q 
Update /3 using the total force F 
iteration + 1 
End while 
The QEM steps are as follows: 
Step 1: Create n items, m populations andR (with U[O, 1].) 
Then we measure /3 with R, when R � > fJ; , set 
x � = 1 , otherwise x" = 0 . /3 can be expressed as 
the following matrix: 
pI pl 
1 
P= �2 
pA Pi? 
Step 2: Compare those populations with the limit of 
boundary condition (capacity), and then repair x. 
(9) 
Step 3: Calculate every profit of each x with the obj ect 
function/(x) and compute the maximum profit from 
all populations. 
Step 4: Calculate charge q using/ex), which can determine 
the force vectors in the next step. 
Step 5: Use each of the q and /3 to calculate the total force 
vector F. 
Step 6: Finally, apply the force vector Fto update and move 
the {3 in order to create the next generation . 
The flowchart of the QEM is shown in Fig. 2 . 
Procedure Evaluate x 
Begin 
End 
for i = 1 to m 
calculate fk) using x 
end for 
f(xbest) - max { fk) } 
Procedure Calculate total force vector F 
Fi -0 
Begin 
End 
for i = 1 to m 
for j = 1 tom 
if f ( x j) < f ( xi ) then 
else 
end if 
end for 
end for 
Procedure Update f3 
A - U[O,I] 
Begin 
for i = 1 to m 
for k =1 to n 
if Fi > 0 
else 
i i Fi i Pk� Pk+A IIFi ll (xk -lk) 
end if 
end for 
end for 
End 
It is noteworthy that the computation of Ilxi -xJ!r is equal 
to L(i -pJf in quantum-inspired EM. Besides, a uniformly 
random number J.. is also used as in [3]. J.. is a random factor 
moving between 0 and 1. Finally, we can use the renewed f3 
to evolve the next generation of populations. 
VI. EXPERIMENTAL RESULTS 
We implement QEM in Matlab7.6. The test environment 
is set up on a personal computer with Pentium E5300 CPU at 
2.6 GHz CPU, 4G RAM, and running on Windows XP. 
Recall that we have made two different experiments of 
011 knapsack problem. In the first case of Oil knapsack 
problem, if we set Wi E [1, 10], and let Pi = Wi +5, then we 
can get Table II. One can see from this table, the heavier 
item always gets the less profit per unit weight, but in the 
real world, things are not always going this way. Hence, we 
also perform the experiment to test the case II: Pk = Wk + lk , 
where hE [0, 5], as in [17]. The experiment results shown in 
Table III and IV confirm case II is a more difficult problem. 
TABLE II. 
THE UNREASONABLE SETTING IN 0-1 KNAPSACK PROBLEM 
Wk 1 2 3 4 5 6 7 8 9 10 
Pk 6 7 8 9 10 11 12 13 14 15 
pdWk 6 ... ... ... 2 ... ... ... ... 1.5 
In Table III, the weIghts are settmg to unIform random 
numbers of [1, 10], and the profits are the weights add 5. 
TABLE III. 
EXPERIMENTAL RESULTS OF THE 0-1 KNAPSACK PROBLEM (CASE I) 
Number 
of CGA EM QGA QEM 
items 
best 603.4 603.1 616.3 613.2 
100 profits mean 575.3 582.9 587.9 584.6 
worst 535.4 552.9 560.5 564.1 
t (sec/run) 0.001083 0.059537 0.018539 0.006514 
best 1463.9 1479.4 1488.5 1480.3 
250 profits mean 1417.8 1428.4 1439.5 1432.9 
worst 1355.9 1385.3 1396.8 1400.4 
t (sec/run) 0.001631 0.118293 0.059267 0.031845 
best 2877.1 2900.2 2906.7 2904.0 
500 profits 2806.7 2820.5 2838.9 2831.7 mean 
worst 2718.4 2752.2 2770.9 2785.4 
t (sec/run) 0.002461 0.197781 0.158383 0.398752 
TABLE IV. 
EXPERIMENTAL RESULTS OF THE 0-1 KNAPSACK PROBLEM (CASE II) 
Number 
of CGA EM QGA QEM 
items 
best 467.5 472.5 477.7 492.6 
100 profits mean 444.5 449.9 452.2 453.4 
worst 414.9 425.7 432.3 435.9 
t (sec/run) 0.001073 0.05915 0.016852 0.00579 
best 1138.0 1143.4 1141.2 1201.4 
250 profits mean 1095.7 1104.5 1109.2 1134.3 
worst 1049.6 1065.5 1077.6 1105.2 
t (sec/run) 0.001625 0.110153 0.060588 0.03304 
best 2253.8 2256.3 2257.9 2289.4 
500 profits mean 2161.1 2182.1 2182.8 2186.6 
worst 2089.1 2138.6 2134.4 2147.0 
t (sec/run) 0.002561 0.193722 0.153577 0.39987 
3215 
2920 
2900 
2880 
... 2860 
t;: 
e 2840 
� 
2820 
2800 
2780 
2760 
500 
Best Profit 
r . ......._..-- -..• ---.. ---.--...... -.--. . ..� .... ;== 
I �----o__---- -__o__---.-;-----o-
:.--0 _r 
. 
1�---'------___0 ' 
lJ ;  
, : 
201 401 601 
Generation 
'l::.' eGA 
801 -.-EM 
-O-QGA 
-@-'QEM 
Figure 3. best profit ( 100 items, Ii =5) 
Best Profit 
® 
490 ---� 
... 
t;: 
0 
I. 
� 
, 
I 
450 _ 
440 
2920 
2900 
2880 
2860 
2840 
2820 
2800 
2780 
2760 
201 401 601 
Generation 
" II ' eGA 
801 - .- EM 
- ¢-QGA 
-®-'Qf.M 
Figure 4. best profits (250 items, Ii =5) 
Best Profit 
r _____ ----e-- ·--·---.--� � ... ;== 
I ---0 ----0 ; -0-:� ® ' r--! & 
f ;  t : 
i� 
! 
201 401 601 
Generation 
,,/J.. eGA 
801 -.-EM -O-QGA 
-@-'QEM 
Figure 5. best profits (500 items, Ii =5) 
3217 
600 A verage Profit 
590 
580 
... 
!.: 
e 570 
� 
... 
t;: 
0 
I. 
� 
560 
550 
540 
201 401 601 
Generation 
"fr' eGA 
801 -' - E�I 
-O-QGA 
-®-- 'QEM 
Figure 6. average profits ( 100 items, Ii =5) 
1450 
1440 
1430 
1420 
� 1410 
o 
� 1400 
1390 
1380 
1370 
1360 
201 
A verage Profit 
401 601 
Generation 
"6" eGA 
801 -.-EM 
-O-QGA 
-®-'QE�I 
Figure 7. average profits (250 items, Ii =5) 
2860 
2840 
2820 
2800 
2780 
2760 
2740 
2720 
2700 
201 
A verage Profit 
401 601 
Generation 
"/:r eGA 
801 -a-HI 
-<>-QGA 
-®-'QEM 
Figure 8. average profits (500 items, Ii =5) 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/01/31
國科會補助計畫
計畫名稱: 量子布林電路可測試性之研究
計畫主持人: 周耀新
計畫編號: 98-2218-E-260-001- 學門領域: 量子計算
無研發成果推廣資料
國
外 
論文著作 期刊論文 2 2 100% 篇
1. Yao-Hsin Chou, Chi-Yuan 
Chen and Han-Chieh 
Chao, ＇Quantum Entanglement 
and Non-Locality based 
Secure Computation for 
Future Communication＇, 
2010, accepted for 
publication, will appear in 
IET (IEE) Information 
Security, 
(NSC-98-2218-E-260-001) 
(SCI, EI) 
2. Cheng-An Yen, Shi-Jinn 
Horng, His-Sheng Goan and 
Yao-Hsin Chou, Tzong-Wann 
Kao, 2009, ＇Quantum Direct 
Communication with mutual 
Authentication＇ in Quantum 
Information &amp ；
Computation (QIC), Vol. 9, 
No. 5&amp；6, Page 376—394, 
June, 2009, Rinton Press. 
(NSC-97-2112-M-002-012-MY3) 
(EI, SCI) (SCI: impact 
factor: 3.379) Top 5% (排名/
期刊總數: 4/85) 
3. Chih-Hung Liu, Yao-Hsin 
Chou and Sy-Yen Kuo, 
2009, ＇Obstacle-Avoiding 
Preferred Direction Steiner 
Trees＇, will appear in IEEE 
Transactions on 
Computer-Aided Design of 
Integrated Circuits and 
Systems (TCAD), (invited 
paper, under revision) 
(NSC-96-2221-E-002-023) 
(EI, SCI impact factor: 
1.466) 
4. Yao-Hsin Chou and Sy-Yen 
Kuo, 2008 
November, ＇Quantum Boolean 
Circuits are 1-Testable＇, 
in IEEE Transactions on 
Nanotechnology (TNANO), Vol. 
7, Issue 4, Page 484—493, 
July, 2008. 
(NSC-95-2218-E-002-004) 
(EI, SCI) (SCI impact factor: 
2.154) Top 10% (排名/期刊總
數: 21/227) 
 
