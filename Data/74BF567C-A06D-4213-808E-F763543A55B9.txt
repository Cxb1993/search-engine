摘要 
 
一個多層機密資料庫系統是一個資料庫系統，其內部所存每一筆資料都有一個機密等級，每一個資料
庫使用者也都有一個使用等級。只有在他的使用等級高於或等於資料的機密等級時，使用者才能存取
那資料。在此研究中，我們將探討並研發一個多層機密等級的資料庫系統。此系統可自動產生每一筆
資料的初始機密等級，並可讀入資料機密等級的須求，然後自動產生每一筆資料的機密等級。若一個
多層機密資料庫系統的每一筆資料的機密等級均由此系統產生，則機密等級不會互相牴觸，此資料庫
系統可避免多層用戶所產生的多重物件的問題，及來自 functional 和 multi-value dependencies 的
推論攻擊。同時也可以解決一些資料整體性的問題，另外也可以增加資料的可用性。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
0  Preface 
 
This report presents the results of the research project “ A Multilevel Secure Database System (2)” granted by 
NSC (99-2221-E-035-102). This research project is the continuous part from the previous one “ A Multilevel 
Secure Database System ” NSC (98-2218-E-035-004). To familiarize readers with the area of research, we 
would like to repeat part of last-year’s report. Section 2 gives the goals of the research. Section 3 reviews 
related research in this area. Section 4 describes the research method, in which, we summarize the research 
results and methods used. 
 
1 Introduction 
 
Leaking information from a database has been around for several decades.  Investigation showed that 
unauthorized personnel’s inappropriate access of data stored in the database is the major cause of this type of 
security issues. This type of security issues in databases happens everywhere in the world and actually, 
database security problems happen in every kind of business. They could happen in a high-tech company, a 
financial bank, an airline company, or even in many government organizations. Thousands of similar 
incidents have mostly unreported and caused tremendous damages to their victims. 
 
In this research, we concentrate on the database security issues and propose approaches to avoid and 
overcome those issues. To familiar readers with the research background, we describe some key concepts in 
the following sections. 
 
1.1 Multilevel Database Systems 
 
A multilevel database system is a database system in which, each piece of data stored in the database is 
assigned a classification level and the database system also provides data stored in it to users with different 
clearance levels. The data classification level assignment scheme could be different in different databases. 
Three major assignment schemes are commonly used, they are element level, tuple/record level, and attribute 
level classifications. 
 
Figure1.1 gives an example of a relational database table/relation with element and tuple level classification. 
In this classic example of multilevel relation, the classification information is specified both on each 
tuple/record and each data element. Table SOD contains three data attributes: Starship, Objective, and 
Destination. Also contained in Table SOD are the classification levels of data elements. For example, CS    
attribute contains the data elements’ classification level for attribute Starship and the starship “Enterprise” is 
classified as “U”(Unclassified), the starship “Voyager” is classified as “S”(Secret). “TC” at the last column 
represents the tuple/record classification level, e.g., the record of starship “Voyager” is classified as 
“S”(Secret). 
 
violation of database primary key principle. 
 
Table SOD  
Starship CS Objective CO Destination CD  TC 
Enterprise S Spying S Talos S  S 
Enterprise U Exploration U Talos U  U 
Figure 2.1   Example of poly-instantiation 
 
 Security Threats from Inference 
 
Evan we can properly assign security levels to data stored in the database, we still cannot guarantee that the 
database is safe and free from any compromise. One major threat to database security is called inference. 
Inference is a mechanism to derive unknown information from existing knowledge and authorized queries to 
the database system. Consider the following example. 
 
Example 2.1 Assume employee salaries in a company are based on an evaluation factor, called rank, of every 
employee. That is, employees who have the same rank get the same salary. Let the salary information is 
classified as TOP SECRET and the rank SECRET. Now a user with clearance level SECRET can infer the 
TOP SECRET salary information if he also knows the mapping between rank and salary. 
 
 Dynamic nature of data 
 
A database reflects the part of real world of some application. The real world will keep changing its state, thus, 
data stored in a database, to truly reflect the world, must be kept changing. As a result, the data and its 
associated classification level in a multilevel database would need to be updated according to the real world 
state. As a consequence, even a small change in the data classification level might cause large impact on the 
originally “stable and secure” database. 
 
 Great Amount of Data 
 
A normal database may contain thousands of records. The size of a military or government database might 
even pass millions of records. Obviously, manual assignment of data security level is not an option. An 
automatic security level assignment must be in place to deal with the big amount of data. 
 
 Complex of Classification Scheme 
 
As data might come from various areas and be used to support different applications, the data classification 
scheme may become so complex. For example, the same piece of data can be classified as secret for use in 
one application and be classified as restricted in another application. Due to the large amount of data stored in 
the database, another problem easily encountered is the cyclic level assignment.  
 
2.2 Research Goals 
 Summarizing the cryptography approach works, we come up with the following: 
 
• All approaches assume existences of a central control that maintains the keys and related information. 
• All approaches base on the idea that a node in the hierarchy can derive keys for its descendants. 
• To access data, each method will incur encryption/decryption costs. 
• Each method needs some sort of key storage/management scheme. In some cases, the number of 
stored keys becomes large and may become another security hazard. 
• No support of database operations is mentioned. 
 
3.2 Database Approach 
 
In database approach, besides satisfying multilevel security requirements, research efforts are focusing on real 
database applications which allow users to perform common data operations like insertion, deletion, and 
modification. We can categorize this type of researches into the following: 
 
3.2.1 Security Models 
 
Several security models related to multilevel security have been proposed to help research and development 
efforts [2 – 13]. For examples, the BLP Model [2] defined the policies/requirements for a MLS system to 
support confidentiality; the Biba Model [3] described the integrity requirements for a MLS system; [7-13] 
proposed models for multilevel relational databases. Based on these security data models, various research 
and development activities were carried out in MLS area during the first three decades of the computer 
security field. 
 
3.2.2  Data Integrity Protection 
 
In [7], one approach using an un-trusted database system to manage the data, and an isolated trusted filter to 
enforce security was proposed. The filter attaches a security classification label to each data record, computes 
an un-forgeable cryptographic checksum over the record (including the label), and stores the checksum in the 
database. The checksum protects against modification to the data and its classification label. In [8] and [10], 
the integrity lock approach was proposed to deal with the data integrity problem. The integrity lock 
architecture provides a means of constructing a secure database management system with a relatively small 
amount of trusted code, using a trusted filter which verifies the integrity of security labels on data from an 
un-trusted DBMS by computing cryptographic checksums. 
 
3.2.3 System Implementation  
 
In [11] and [19], a multilevel relational database system was designed and implemented. Code name SeaView 
project, its formal security policy model admits a range of designs for a multilevel secure relational database 
system. The requirement for a near-term implementation suggests that the design should utilize existing 
technology to the extent possible. Thus the design used an existing database management system ported to an 
existing trusted code block (TCB) environment. A preprocessor translates key constructs of the SeaView 
multilevel relational data model to those of the standard relational model used by the commercial database 
2. System Design and Implementation 
3. System Integration and Testing 
4. Deployment and Maintenance 
5. Evaluation of Technology 
 
We will describe the results of the project in the following sections. 
 
4.1 Inference Control 
 
An inference channel in a database is a means by which one can infer data classified at a high level from data 
classified at a low level. Inference control is approaches to detecting and removing inference channels. There 
are two major inference channels existing in a multilevel database system, i.e., functional dependency (FD) 
and multi-value dependency (MVD). We have demonstrated the FD in Example 2.1. Here we give an example 
of MVD inference. 
 
Example 4.1 Let R = ( M, S, W ) be a relation scheme in a military database with tuple level classification 
scheme, where M, S, and W represent the name of the mission, the name of the warships involved in the 
mission, and weapons used in the mission. Assume every warship involved carries the same weapons, and in 
mission m1 there are three warships and three types of weapons involved. Then, we have the relation r in the 
database shown in the table of Figure 4.1. Now, if a user u with clearance level 4 knows the fact that every 
warship carries the same set of weapons, then u can infer the records (m1, s2, w3 ), (m1, s3, w2), and (m1, s3, w3) 
which are all classified higher than level 4 and unauthorized to him. 
 
Security Level M S W 
1 m1 s1 w1 
2 m1 s1 w2 
1 m1 s1 w3 
3 m1 s2 w1 
4 m1 s2 w2 
5 m1 s2 w3 
4 m1 s3 w1 
5 m1 s3 w2 
6 m1 s3 w3 
 
Figure 4.1  A Multi-Value Dependency Relation 
 
[21, 22, and 23] have detail and deep analysis on the theory of FD and MVD inference. They also provided 
algorithm to adjust security levels to avoid these types of inferences. The basic idea to prevent these types of 
inferences is to make the “deciding object” has at least the same security level as the “dependent object”. For 
example, in Example 2.1, we should make the attribute “RANK” at least has the same level as attribute 
“Salary”. 
 
We have investigated this problem in a different angle. FDs and MVDs are all arise from semantic 
level assignment engine which implements all the classification. Finally, the engine will generate the proper 
security levels and store them with associated data. 
 
Another path in Figure 4.2 is the normal multilevel database operations which might be data insertion, 
deletion, and update. Users can freely access data through this path and the database system can automatically 
assign the appropriate initial or default classification levels to the data. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figure 4.3 System Architecture 
Classification Policy 
Specifications 
(inSQL) 
Rule-Based Language 
(Prolog) Inference 
Engine  
Intelligent Security 
Level Assignment 
Engine 
Store Security 
Levels/data 
Figure 4.2 System Work Flow 
Multilevel database 
operations 
Initial Security Level 
Assignment 
 
User Data 
MySQL 
DB Operation 
GUI 
SQL Query Translator 
MySQL 
Classification 
Policy in SQL 
Confliction 
Detection and 
Resolution Manager 
Classification Rule 
Management 
 SQL-to-Prolog 
Translator 
• The choice of level assignment specification language 
• Using logic programming in the detection of policy confliction 
• The performance of the classification level assignment system 
 
As stated in Section 1, as the interactions between businesses arise, the need of multilevel database system 
technology arises. Our research has addressed this need with results contributing to several information 
security areas. Our system, not only automatically assigning security levels to data stored in a multilevel 
database but also checking conflictions in assignment policies, will promote this technology to even more 
applications. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
[21] G. Ozsoyoglu, and T. A. Su, "Data Dependencies and Inference Control in Multilevel Relational 
Database Systems",  Proc. of the 1987 IEEE Symposium on Security and Privacy, IEEE Computer 
Society, Oakland, CA, Apr. 1987. 
[22] T. A. Su, and G. Ozsoyoglu,  "Multi-valued Dependency Inferences in Multilevel Relational Database 
Systems", Database Security III: Status and Prospects - Proceeding, Third IFIP Working Conference 
on Database Security, edited by D. Spooner and C. Landwehr, North-Holland 1990, ISBN 
0-444-88701-6. 
[23] T. A. Su, and G. Ozsoyoglu, "Controlling FD and MVD Inferences in Multilevel Relational Database 
Systems", IEEE Transactions on Knowledge and Data Engineering, Vol. 3, No. 4, December 1991. 
[24] S. Rizvi, A. Mendelzon, S. Sudarshan, P. Roy, “Extending query-rewriting techniques for fine-grained 
access control”, In SIGMOD Conf., 2004 
[25] H. Garcia-Molina, J. D. Ullman, and J. Widom, “Database Systems: The Complete Book”, Prentice 
Hall, 2002. 
[26]     P.D. Stachour and B. Thuraisingham, “Design of LDV: A Multilevel Secure Relational Database 
Management System”, IEEE Transactions on Knowledge and Data Engineering, Vol.2, No.2, June, 
1990 
[27] Claudia Marcus, Arity Corporation “Prolog Programming: applications for Database Systems, Expert 
Systems, and Natural Language Systems”, Addison-Wesley, 1986 
[28] H. Gallaire and J. Minker, “Logic and Databases”, Plenum Press, New York, 1978 
[29] M. Liu, “Deductive database languages: problems and solutions”, ACM  Computing Surveys, Vol. 31, 
No. 1, Mar 1999. 
[30] D. Ferraiolo and D. Kuhn, “Role Based Access Control”, Proceeding of the 15
th
 National Computer 
Security Conference, 1992 
[31] R. Sandhu, E. Coyne, H. Feinstein, and C. Youman, “Role-Based Access Control Models”, IEEE 
Computer, Vol. 29, No. 2, 1996 
[32] D. Denning, “Field Encryption and Authentication”, Advance in Cryptology, Proceeding of Crypto 83, 
Plenum Press 
[33] S. G. Akl and P. D. Taylor, “Cryptographic Solution to a Problem of Access Control in a Hierarchy”, 
ACM Transaction on Computer Systems, Vol. 1, No. 3, Aug, 1983 
[34] L. Harn and H. Y. Lin, “A Cryptographic Key Generation Scheme for Multilevel Data Security”, 
Computer & Security, Vol. 9, No. 6, Oct. 1990 
[35] H. Liaw, S. Wang, and C. Lei, “A Dynamic Cryptographic Key Assignment Scheme in a Tree 
Structure”, Computers and Mathematics with Applications, Vol. 25, No. 6,  1993 
[36] H. M. Tsai and C.C. Chang, “A Cryptographic Implementation for Dynamic Access Control in a User 
Hierarchy”, Computer and Security, Vol. 14, No. 2, 1995 
[37] T. S. Chen and J. Y. Huang, “A Novel Key Management Scheme for Dynamic Access Control in a 
User Hierarchy”, Applied Mathematics and Computation, Vol. 162 , Issue 1, March 2005 
[38] M. J. Atallah, K. B. Frikken, and M. Blanton, “Dynamic and Efficient Key Management for Access 
Hierarchies”,  ACM Transactions on Information and System Security, Vol. 12, Issue 3, Jan. 2009 
 
 
 
 
 
 18
Curiosity is an intrinsic nature of human beings; the 
revelation of the attribute “Balance” might trigger 
users to steal that information. We believe that the 
attribute should be hidden from those U-users just as 
those real data. This actually gives rise to the need 
of schema classification of a database. In this paper, 
a new scheme is proposed for this reason to support 
classification in schema level, including 
classification both on relations and attributes. 
II. RELATED WORKS 
 
Various MLS database models have been proposed. 
The Hinke and Schaefer model [5] first proposed to 
support classification at attribute level (or column 
level); the I.P. Sharp model [6] then proposed to 
support classification at relation level; the TRW 
model [7] also was proposed to support 
classification at tuple-level. The SeaView Model [8, 
9] supports classification not only at the tuple-level 
but also at  element-level; as a project of U.S DoD, 
the SeaView Model satisfies trusted database system 
in class A1 [10].  
Polyinstantiation is known as an inevitable part of 
multilevel secure database [12]. It can be defined as 
creation of different views from shared 
resources/objects to different subjects. In database 
applications, data entities can be considered as 
shared resources. From the example of Figure 1, 
relation SOD has tuples with the same key value 
(Enterprise), but different TC values; these tuples 
represent a single entity, and are called 
polyinstantiation tuples [13] of an entity. These 
polyinstantiation tuples are created due to different 
views from U-users and TS-users. 
The LDV approach [14-16] achieved multilevel 
security in database by using Lock Data Views 
policy of operation systems; one of features of LDV 
is that while there are polyinstantiation tuples, only 
one tuple per secure class would be exist in an entity. 
The Belief-Consistent Model (BCMLS) [17] first 
considered the semantics of data [18], by using 
true/false label representing the correctness of data 
to increase database completeness. Last, the 
Multilevel Relational (MLR) Data Model [19] is a 
redesign of SeaView model proposed by the same 
authors. It takes the adventure of previous models 
and first gave formal definition of operations and 
integrity properties; also, it is the first model using 
mathematical proof  to show that the MLR model 
satisfied soundness, completeness, and security 
property. 
III. DATA MODEL 
A. Basic Model 
In this paper, we limit our investigation to the 
schema classification. It does not include data 
classification which will be integrated into this result 
later. Since data classification is not involved, there 
is no polyinstantiation issue. The goal of this 
research then is to propose a schema classification 
scheme to reduce the inference problems from the 
semantics of the schema. We begin with the 
definition of databases in our data model. 
• Definition 1 A relation scheme is denoted by R(A1, 
A2,  . . . , An), where each Ai is a data attribute over 
domain Di. 
• Definition 2 A relation instance, denoted by r(A1,  
A2,  . . . , An), is a set of distinct tuples of the form (a1,  
a2,  . . . , an), where each ai ∈ Di. 
Definition 1 and 2 described the scheme of relation 
and relation instance. Figure 4 gives an example of a 
relation where “Starship”, “Objective”, Destination” 
represents the names of attributes. As Figure 4 
shows, relation scheme defines relation name and all 
attributes in a relation, and relation instance stores 
all of the data in it. 
A relation scheme example of SOD 
Starship Objective Destination 
A relation instance example of SOD 
Enterprise Spying Rigel 
Figure 4   Example of relation scheme and relation instance 
 20
include CREATE RELATION to create and specify 
the classification of a relation and its attributes, 
ADD ATTRIBUTES to add attributes to some 
relation, INSRT to insert a data entity, DELETE to 
delete an entity, UPDATE to change values of 
attributes, and SELECT to query data. The 
following gives a description of each operation. 
1) CREATE RELATION 
• Syntax: A CREATE RELATION statement executed 
by a c–subject (user classified at c level) has the 
following general form
2
: 
CREATE RELATION  R :CR ( 
         Aj1  :CAj1 Dj1 
       [,Aj2  :CAj2 Dj2] 
         . . .   
) 
• Symbol Explanation: R is the relation name, 1 ≤ j1, 
j2, . . . ≤ n；Aj1, Aj2 . . . is data attribute; CR is the 
classification of R, CAj1，CAj2 . . . represent the 
classification attribute of attribute Aj1, Aj2 . . . 
respectively; DAj1，DAj2 . . . is the parameter of each 
attribute (i.e. primary key). 
• Semantics: A CREATE RELATION operation will 
create a relation stored in database, and create 
correspond tuples in schema configuration relation Rs. 
(1) If CR ≤ c, CAj1 ≤ c, CAj2 ≤ c… etc, then the relation 
is created in the form of (Aj1, Aj2,  . . .), and 
(2) In schema configuration relation instance rs ∈ Rs, 
tuples t1 ∈ rs，t2 ∈ rs . . . is created where t1[RN, 
CRN, AN, CAN] = (R, CR, Aj1, CAj1), t2[RN, CRN, 
AN, CAN] = (R, CR, Aj2, CAj2) . . . etc. 
 The statement is permitted if and only if 
(3) There doesn’t exist CR > c or CAji> c (1 ≤ i ≤ n); and 
(4) Database state satisfies SI after operation. 
• Commentary: Compare to traditional database model, 
this statement not only can be use to specify the relation 
                                                 
2 In this paper, [] represents optional clause, and … represents repetition 
clause. 
name and attribute name with their parameter; users can 
also specify each classification of relation of attributes. 
The only constrain is the classification level must less 
or equal than subject whom query. In addition, this 
statement usually rename to CREATE TABLE on 
implementation. 
2) ADD ATTRIBUTES 
• Syntax: An ADD ATTRIBUTES statement executed 
by a c–subject (user classified at c level) has the 
following general form
3
: 
ADD ATTRIBUTES  R ( 
         Aj1  :CAj1 Dj1 
       [,Aj2  :CAj2 Dj2] 
         . . .   
) 
• Symbol Explanation: R is the relation name, 1 ≤ j1, 
j2, . . . ≤ n；Aj1, Aj2 . . . is data attribute; CAj1，CAj2 . . . 
represent the classification attribute of attribute Aj1, 
Aj2 . . . respectively; DAj1，DAj2 . . . is the parameter of 
each attribute (e.g. TYPE). 
• Semantics: An ADD ATTRIBUTES operation will add 
attributes to a relation stored in database, and create 
corresponding tuples in schema configuration relation 
Rs. 
(5) If CR ≤ c, CAj1 ≤ c, CAj2 ≤ c… etc, then the relation 
R is modified as (Bj1, Bj2, . . . Aj1, Aj2,  . . .), 
where Bj1, Bj2, . . . are existing attributes of R , 
and 
(6) In schema configuration relation instance rs ∈ Rs, 
tuples t1 ∈ rs，t2 ∈ rs . . . is created where t1[RN, 
CRN, AN, CAN] = (R, CR, Aj1, CAj1), t2[RN, CRN, 
AN, CAN] = (R, CR, Aj2, CAj2) . . . etc. 
 The statement is permitted if and only if 
(7) There doesn’t exist CR > c or CAji> c (1 ≤ i ≤ n); and 
(8) Database state satisfies SI after operation. 
• Commentary: This operation is used to add attributes 
to existing relations. The purpose is to prevent higher 
                                                 
 
 22
UPDATE R 
SET Aj1   =  aj1   [, Aj2  =  aj2 . . . ] 
WHERE p 
• Symbol Explanation: R is the relation name; Aj1 , 
Aj2 , . . .1 ≤ j1, j2, . . . ≤ n, are attributes of R; aj1, aj2, . . . 
are the data values to be set to Aj1 , Aj2 , . . . 
In this statement, values must specify in 
appropriate domain, i.e. aj1 ∈ Dj1, aj2 ∈ Dj2… 
etc.  
• Semantics: An UPDATE operation will set new values 
to those attributes specified in the SET clause if p 
condition is satisfied.  For all 1 ≤ i ≤ n: 
The statement is permitted if and only if 
(16) CR  ≤  c , and  CAji  ≤ c, 1 ≤ j1, j2, . . . ≤ n  and 
(17) Database state satisfies DI, KI, and EI after 
operation. 
• Commentary: The UPDATE statement changes values 
of some attribute specified, but only those authorized 
relations and attributes can be modified by the user. 
IV. CONCLUSION 
In this paper, we defined a new multilevel database 
model to support classification of relations and 
attributes in database. According the requirements of 
database model design, we first defined the basic 
model and proposed a schema configuration relation 
to store all classification information of relations and 
attributes; second we defined a set of integrity 
properties including SI, KI, EI, DI, and RI to 
constrain database; we also defined operations serve 
to user queries including CREATE RELATION, 
ADD ATTRIBUTES, INSERT, DELETE, 
UPDATE, and SELECT. By classifying schema of a 
database, which can hide attributes and relations to 
those unauthorized users, thus, we can reduce lots of 
curiosity from users and therefore could reduce 
unauthorized attempts to steal information from the 
database. 
V. ACKNOWLEDGEMENT 
This research work is supported by the National 
Science Council of Taiwan under grant 
98-2218-E-035-004. 
VI. REFERENCES 
[1] D. E. Bell, and L. J. LaPadula, “Secure Computer Systems: Mathematical 
Foundations,” 01 Nov 1973, 1973. 
[2] D. Bell, and L. La Padula, “Secure Computer System: Unified Exposition 
and Multics Interpretation, MTR-2997,” MITRE Corp., Bedford, MA, 
1976. 
[3] K. Biba, "Integrity considerations for secure computer systems," 
Storming Media, 1977. 
[4] X. Qian, and T. Lunt, “Tuple-level vs. element-level classification,” in 
Results of the Sixth Working Conference of IFIP Working Group 11.3 on 
Database Security on Database security, VI : status and prospects: status 
and prospects, Simon Fraser Univ., Vancouver, British Columbia, Canada, 
1993. 
[5] T. Hinke, and M. Schaefer, Secure Data Management System: Defense 
Technical Information Center, 1975. 
[6] C. C. C. OTTAWA, and M. Grohn, “A Model of a Protected Data 
Management System,” 1976. 
[7] T. Hinke, C. Garvey, N. Jensen et al., "Al secure DBMS design." 
[8] D. E. Denning, T. F. Lunt, R. R. Schell et al., "The SeaView security 
model." pp. 218-233. 
[9] T. F. Lunt, D. E. Denning, R. R. Schell et al., “The SeaView Security 
Model,” IEEE Trans. Softw. Eng., vol. 16, no. 6, pp. 593-607, 1990. 
[10] D. Tcsec, Trusted computer system evaluation criteria, Technical Report 
5200.28-STD, US Department of Defense, 1985. 
[11] S. Jajodia, and R. Sandhu, “Toward a multilevel secure relational data 
model,” SIGMOD Rec., vol. 20, no. 2, pp. 50-59, 1991. 
[12] T. F. Lunt, "Polyinstantiation: an inevitable part of a multilevel world." 
pp. 236-238. 
[13] A. Galinovic, and V. Antoncic, "Polyinstantiation in Relational Databases 
with Multilevel Security." pp. 127-132. 
[14] P. Dwyer, E. Onuegbe, P. Stachour et al., "Query processing in LDV: a 
secure database system." pp. 118-124. 
[15] D. O'Brien, "The LDV approach to polyinstantiation." pp. 239-240. 
[16] P. D. Stachour, and B. Thuraisingham, “Design of LDV: a multilevel 
secure relational database management system,” Knowledge and Data 
Engineering, IEEE Transactions on, vol. 2, no. 2, pp. 190-209, 1990. 
[17] N. Jukic, S. V. Vrbsky, A. Parrish et al., “A belief-consistent multilevel 
secure relational data model,” Information Systems, vol. 24, no. 5, pp. 
377-400, 1999. 
[18] M. Pranjic, K. Fertalj, and N. Jukic, "Importance of semantics in MLS 
database models." pp. 51-56 vol.1. 
[19] R. Sandhu, and F. Chen, “The multilevel relational (MLR) data model,” 
ACM Trans. Inf. Syst. Secur., vol. 1, no. 1, pp. 93-132, 1998. 
[20] H. Garcia-Molina, J. D. Ullman, and J. Widom, Database Systems: The 
Complete Book: Prentice Hall Press, 2008. 
[21] J. Goguen, and J. Meseguer, “Security policies and security models,” 
Proceedings of the 1982 Symposium on Security and Privacy, pp. 11–20, 
1982. 
 
 1
 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                    日期：100 年 10 月 25 日 
一、參加會議經過 
Flied to Chicago on 4/11. Checked in Marriott Hotel and joined several session presentations and 
discussions. 
二、與會心得 
This is one the best sensor network conference concentrating on the data processing in the world. There 
were lots people from various areas including academia, industry, and governments. It is the place to 
know works currently been done in this field. 
三、考察參觀活動(無是項活動者略)  
none 
四、建議 
Sensor network research includes many areas. In Taiwan, research only concentrated in areas related to a 
few applications like power saving.Ｉstrongly encourage people here attend this conference to see the 
計畫編號 NSC99－2221－E－035－102－ 
計畫名稱 多層機密分級安全資料庫之研發 
出國人員
姓名 蘇宗安 
服務機構
及職稱 逢甲大學資訊工程學系副教授 
會議時間 
100 年 4月 12 日
至 
100 年 4月 14 日 
會議地點 
Chicago, Illinois, USA 
會議名稱 
(中文) 
 (英文) The 10th International Conference on Information Processing in Sensor 
Network 
發表論文
題目 
(中文) 
(英文) 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/27
國科會補助計畫
計畫名稱: 多層機密分級安全資料庫之研發
計畫主持人: 蘇宗安
計畫編號: 99-2221-E-035-102- 學門領域: 資訊 
研發成果名稱
(中文) 多層機密分級安全資料庫
(英文) A Multilevel Secure Database System
成果歸屬機構
逢甲大學 發明人
(創作人)
蘇宗安
技術說明
(中文) 一個多層機密資料庫系統是一個資料庫系統，其內部所存每一筆資料都有一個機
密等級，每一個資料庫使用者也都有一個使用等級。只有在他的使用等級高於或
等於資料的機密等級時，使用者才能存取那資料。在此研究中，我們探討並研發
一個多層機密等級的資料庫系統。此系統可自動產生每一筆資料的初始機密等級，
並可讀入資料機密等級的須求，然後自動產生每一筆資料的機密等級。若一個多
層機密資料庫系統的每一筆資料的機密等級均由此系統產生，則機密等級不會互
相牴觸，此資料庫系統可避免多層用戶所產生的多重物件的問題，及來自 
functional 和multi-value dependencies 的推論攻擊。同時也可以解決一些資
料整體性的問題，另外也可以增加資料的可用性。
(英文) A multilevel database system is a database system in which each piece of data is assigned 
a classification level and it also provides data to users with different clearance levels. In 
this research we investigate and develop a multilevel relational database system. The 
system allows users to do regular database operations and automatically assigns an initial 
(default) classification level to data. It can also accept a specification of data security 
level requirements written in a rule-based language and automatically generate security 
levels for data stored in the multilevel database. The system can detect conflict level 
assignments among classification policies; eliminate covert channel due to poly-
instantiation and avoid data dependency inference threats. It can also provide in-time 
classification updates, ensure data confidentiality and data integrity, and improve data 
availability.
產業別 其他專業、科學及技術服務業；資訊服務業；研究發展服務業
技術/產品應用範圍 任何使用資料庫系统並有机密等級存取控制須求之机構
技術移轉可行性及
預期效益
本計劃係與TelTel Inc.合作.Beta版本已於該公司啓用. 
預計可提供該公司員工及客户之分級存取控制之應用 
註：本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
本計劃係與 TelTel Inc.合作.Beta 版本已於該公司啓用. 
預計可提供該公司員工及客户之分級存取控制之應用. 
 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
