 2
by the receiver and Fin be the interpolated frame between Fn and Fn+1. There are three ways to 
reconstruct Fin. The first one is the frame repetition which repeats Fn to replace Fin, i.e., Fin = Fn. This 
technique is simple but it will cause an annoying jerkiness effect. The second one is the frame 
averaging which averages all of the pixel values between Fn and Fn+1, and then sets these averaged 
values to be the pixel value of Fin i.e., Fin = (Fn +Fn+1)/2. This method is also very simple but blurred 
images are unavoidable in some moving objects. The third one is the motion compensated frame 
interpolation (MCFI) which utilizes the motion relationship among Fn, and Fn+1 to construct Fin. Many 
algorithms of MCFI had been proposed and approved successively in frame rate up conversion [3, 4].  
 
Since the duration between two successive frames is very tiny in videos, the change of objects among 
Fn, Fin, and Fn+1 can be modeled as a linear movement on a straight line. MCFI algorithms utilize this 
motion property to reconstruct Fin. They can be further divided into two categories based on the way to 
extract the above motion relationship. Algorithms of the first category reuse the motion vectors (MVs) 
between Fn and Fn+1 to maintain the linear motion relationship. The computation required by these 
algorithms is very little but some interpolated blocks would be incorrect. On the other hand, the linear 
motion relationship among Fn, Fin, and Fn+1 is rebuilt by algorithms of the second category. Overlapped 
bi-directional motion compensated frame interpolation (OBMCFI) [5]-[7] is one of the representatives 
among these algorithms. Although the accuracy of the motion can be improved by the OBMCFI, the 
computation needed is extremely large.  
 
The OBMCFI performs well if the available computational power of the employed device in the 
receiving side is larger than that of computation required by the OBMCFI. However, various types of 
handheld devices are being used recently for visual communications, such as PDAs and multimedia 
handsets. The large variation in the computation power among these devices makes the OBMCFI 
impractical since the computational power of some devices cannot fully support the computation 
required by the OBMCFI to interpolate frames. If that happens, the quality of interpolated frames is 
degraded because some blocks of frames cannot be processed. Researches on computation-aware (CA) 
schemes are to study algorithms to distribute available computation to each frame as well as the 
corresponding blocks to achieve higher output quality. In recent years, many CA schemes [8, 9] are 
successfully introduced to block matching algorithm (BMA) for motion estimation. This project applies 
the CA technology to the OBMCFI for frame rate up conversion.    
 
The authors of [8] are pioneers of the CA technology. The main concept of the CA scheme proposed in 
[8] is that it greedily allocates more computation to blocks with the highest initial distortion in the 
frame block by block. It’s simple and efficient, but it is a two-pass algorithm resulting in a lot of 
memory required. This limitation is infeasible in some handheld devices. In 2005, a one-pass CA 
algorithm with adaptive search strategy is proposed to overcome this problem [9]. However, users must 
define a target computation for each block in this scheme. It is unrealistic since users usually don’t 
have knowledge about technologies. Therefore, it is impossible to apply existed CA schemes directly to 
the OBMCFI for the frame rate up conversion. In this project, a threshold-based CA scheme is 
 4
operations, and 255 additions to calculate a SAD. The number of SAD operations required for the 
OBMCFI is 225(=15×15) when the size of the search area m  is limited within ±7 pels. Accordingly, 
the computational requirement for one second of a 15-Hz SIF video sequence with 352×240 pels is 
about 3.4×109 operations per second. The computation is extremely huge. 
 
三、結果與討論 
 
Since the computation needed by the OBMCFI is extremely large, it is infeasible to guarantee that all 
blocks of the interpolated frame can be performed by the OBMCFI if there is not enough 
computational power of the employed device. This project embeds a CA module in the front of the 
OBMCFI to distribute the available computation to blocks of the interpolated frame. Figure 2 gives the 
structure of that combination. Blocks with large distortion are selected by the CA module and then fed 
into the OBMCFI to achieve higher output quality until the available computation of the employed 
device is exhausted. 
 
CA
ModuleFn+1
Fn
FinOBMCFI
Module
 
 
Fig. 2. The combination structure of the CA scheme and the OBMCFI. 
 
To design an efficient CA scheme, the first issue must be conquered is that how many operations can 
be executed by the employed device actually. In order to get the above answer, the CA module is 
initially disabled for a few seconds, i.e., we only perform the OBMCFI in the beginning. For simplicity, 
this project uses the number of SAD operations to measure the computational power of a device. 
Suppose pC  be the average number of SAD operations per frame performed by the OBMCFI during 
the testing period. The available computation per frame of the employed device is then approximately 
derived as pC .  
 
Once pC  is determined, the CA module is enabled and selects blocks with large distortion to improve 
the interpolation quality. In general, the more computation allocated to blocks with larger distortion, 
the more interpolation error reduced. But, it is difficult to identify (i.e., predict) which block would 
yield the maximum distortion reduction before evaluating them. Hence we should consider some 
heuristic approaches. One of heuristics is to compare the corresponding SAD value with a given 
threshold, TH. If the SAD value is larger than TH, the block is denoted with large distortion and then 
fed into the OBMCFI to reduce the distortion. Otherwise, the block is dropped. Therefore, blocks 
performed by the OBMCFI are directly dependent on the value of TH since a small threshold would 
result in a large number of blocks performed, and vice versa for a large threshold. We call this as the 
threshold-based CA scheme. The major advantage of this approach is that it is a one-pass algorithm and 
no user interaction is required. The main challenge of this approach is of course to adapt the threshold 
in a way that keeps the total number of the SAD operations consumed by the OBMCFI below pC . 
 6
a limited range. When TH is set at 1000, the saving of SAD operations is about 21.20%, and the quality 
degradation is only 0.02%. When TH is increased to 3,000, the computation saving and the quality 
degradation are 55.03% and 2.17% on the average. 
 
This paragraph discusses the effect of the proposed threshold adaptation mechanism. The initial value 
of TH0 is set at zero, and the number of available SAD operations of the device, i.e., pC , is assumed in 
the range from 50,000 to 250,000 per frame for the SIF videos and from 15,000 to 75,000 per frame for 
the QCIF videos, to simulate the environment of heterogeneous devices. Figure 3 gives the MSE results 
of the threshold-based CA OBMCFI as a function of ∆ ranging from 0 to 4096. Note that when ∆=0 the 
proposed threshold approach is disabled, i.e., each frame is coded by the original OBMCFI. In general, 
the threshold-based CA OBMCFI (∆> 0) performs better than the original OBMCFI (∆= 0). 
 
We now analyze the effect of the parameter ∆. For the football sequence and a device with 150,000 
SAD operations per frame, the average MSE values are 686, 554, 546, 551, 561, and 613 when ∆ is 0, 
256, 512, 1024, 2048, and 4096, respectively. The MSE value of the original OBMCFI (∆=0) is the 
worst. About 20% quality improvement can be realized by the threshold-based CA OBMCFI with 
∆=256, ∆=512, and ∆=1024, where the MSE values are the best and almost equal. The quality is a little 
bit lower when ∆ increases to 4096. Similar results are obtained for the foreman sequence and a device 
with 45,000 SAD operations per frame. The corresponding MSE values are 72, 54, 53, 53, 57, and 73 
when ∆ is 0, 256, 512, 1024, 2048, and 4096, respectively. The simulation results indicate that the 
values 256, 512, and 1024 are good choices for ∆, since they always achieve lower MSE values. 
 
We now discuss the influence of ∆ on the value of the threshold TH. Figure 4 (a) gives an example of 
details of the threshold for the football sequence and a device with 200,000 SAD operations per frame. 
The average values of the threshold are 1592, 1669, 1740 when ∆ is 256, 512, and 1024, respectively. 
They are quite similar. This is the result of the proposed adaptation mechanism automatically adjusting 
the threshold to a suitable value dependent on the motion activity of the videos and the available 
computational power. Note that values of 2048 and 4096 are inappropriate for ∆, because the amount 
of threshold regulation is too large, resulting in poor performance in many cases. Another example is 
depicted in Fig. 4 (b) using the mobile & calendar sequence with a computational power of 200,000 
check points per frame. In this example, the average threshold values are 2452, 2570, 2642, 2908, and 
2048 when ∆ is 256, 512, 1024, 2048, and 4096, respectively.  
 
Table 1. Computation distortion results on the OBMCFI and the threshold-based CA OBMCFI without 
threshold adaptation. 
 
(a) Computation results (SAD operations per frame) 
 8
350
400
450
500
550
600
650
700
750
800
50000 100000 150000 200000 250000
Computation
M
SE
∆= 0 ∆= 256 ∆= 512
∆= 1024 ∆= 2048 ∆= 4096
 
(b) Mobile & calendar sequence. 
 
60
80
100
120
140
160
180
200
15000 30000 45000 60000 75000
Computation
M
SE
∆= 0 ∆= 256 ∆= 512
∆= 1024 ∆= 2048 ∆= 4096
 
(c) Foreman sequence. 
 
6
7
8
9
10
11
15000 30000 45000 60000 75000
Computation
M
SE
∆= 0 ∆= 256 ∆= 512
∆= 1024 ∆= 2048 ∆= 4096
 
(d) Salesman sequence. 
 10
0
500
1000
1500
2000
2500
3000
3500
4000
4500
5000
0 4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96
frame number
TH
∆= 0 ∆= 256 ∆= 512 ∆= 1024 ∆= 2048 ∆= 4096
 
(a) Football sequence. 
 
0
500
1000
1500
2000
2500
3000
3500
4000
4500
5000
4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96
frame number
TH
∆= 0 ∆= 256 ∆= 512 ∆= 1024 ∆= 2048 ∆= 4096
 
(b) Mobile & calendar sequence. 
 
Fig. 4 Details of the threshold under different values of ∆. 
 
 
四、計劃成果自評 
 
This project proposes a simple and efficient algorithm, called the threshold-based CA OBMCFI, to 
utilize the advantages of the OBMCFI while also overcoming its drawbacks. A threshold adaptation 
mechanism is also presented to distribute the available processing power of a device to blocks of 
interpolated frames. Experimental results demonstrate that the output quality can be uniformly 
improved by the proposed threshold approach. 
 
表 Y04 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                            98 年 1 月 20 日 
報告人姓名  黃世育 服務機構及職稱 
 
銘傳大學資訊工程系教授 
 
     時間 
會議 
     地點 
97.1.13-97.1.16 
日本  東京 
本會核定
補助文號
96-2221-E-130-014-MY2 (第二
年) 
會議 
名稱 
(中文)2009 年亞太影像與視訊技術國際會議 
(英文) Pacific-Rim Symposium on Image and Video Technology(PSIVT) 
發表 
論文 
題目 
(中文) 一個用秘密通訊上的先進 LSB 坎入資訊演算法 
(英文) An Advanced Least-Significant-Bit Embedding Scheme for 
Steganographic Encoding 
附件三
 
