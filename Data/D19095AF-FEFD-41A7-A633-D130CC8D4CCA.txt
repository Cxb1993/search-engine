 - 2 - 
行政院國家科學委員會專題研究計畫成果報告 
以智慧型探索、擷取、過濾、代取、排序與呈現技術為基礎之智慧型高品質網路資訊整合系統 
（Research on an Intelligent high-quality Web Information Integration System Based upon 
Intelligent Discovery, Retrieval, Filtering, Proxy, Ranking, and Presentation） 
計畫編號：NSC９５－２２２１－Ｅ－１２９－０１９ 
執行期限：９５年８月１日至９６年７月３１日 
主持人：楊勝源 聖約翰科技大學電腦與通訊工程系 E-mail: ysy@mail.sju.edu.tw 
計畫參與人員：吳思賢、吳霽時、江洪鈞 聖約翰科技大學電腦與通訊工程系 
摘要 
本報告旨在討論本體論如何協助網際 FAQ 查詢。我們
將描述 FAQ-master，討論它如何從下列三種網頁搜尋
面向中，同時改進 FAQ 查詢的品質︰使用者意圖、資
料內容處理、及網站搜尋。本系統以本體論支援的內容
資料庫為基礎，協同四個代理人子系統一起運作。設計
的技術包括：領域本體論、本體論支援之使用者詢問處
理、本體論支援之解答快取、本體論主導之 FAQ 包裹、
貯存、取回及排列、以及本體論支援之網站分類和擴展。 
關鍵字：本體論、多重代理人系統、網際 FAQ 系統 
Abstract 
This report discusses how ontology helps Web FAQ query. 
We are describing FAQ-master, discussing how it 
improves FAQ query quality from the following three 
aspects of Web search activities at the same time: user 
intention, document content processing, and website 
search. The system is implemented as four agents working 
together through an ontology-supported content base. 
Techniques involved in the design include domain 
ontology, ontology-supported user query processing, 
ontology-supported solution caching, ontology-directed 
FAQ wrapping, storage, retrieval and ranking, and 
ontology-supported website classification and expansion. 
Keywords: Ontology, Multi-Agent Systems, Web FAQ 
Systems 
1. 前言 
資訊爆炸的時代，基於網路技術逐漸普及與發展，地球
村這個名稱隱喻著人際間的距離縮短。由於網際網路的
快速普及，人們藉由更多樣的網站來獲取所需的資訊。
諸多搜尋系統（例如：搜尋引擎、入口網站等）已日益
普及，因為他們能協助人們有效地使用這浩瀚無垠的網
際寶庫。不過，現今查詢系統的品質離完善還有很長一
段距離，例如：他們通常產出過多造成使用者負擔的入
口資訊、充斥著瀏灠後才發現的過期網頁入口、不相干
的入口網頁也一樣繁多，最後，使用者還受挫於諸多無
意義的資訊。 
一般網頁搜尋品質不佳的背後有三個主因：一是事
先定義的資料庫索引不僅難以理解、缺乏彈性，更難以
使用；二是以關鍵字為主的介面無法忠實地擷取使用者
真正的意圖；三是沒有任何一個搜尋引擎的資料庫能涵
蓋整個網際空間。當前文獻中已出現三種方案，並嘗試
解決上述問題。為解決問題一，SHOE [6]、VUDLA [2]、
及 Chord [12]等系統，藉由適當地註解資料語意，提供
以內容為主的查詢。其次，為解決問題二，系統採用使
用者個性化的前端過濾系統，來處理搜尋過程的前置工
作，就像是 Personal Webwatcher [8]、 SIS [4]、及
KeyConcept [14]這些系統。最後，以匯總式查詢
（meta-search）來解決問題三，亦即倡導整合多個單一
搜尋引擎於單一查詢過程中，例子包括 OySTER [9]、
DMAG 新聞的進階匯總式查詢引擎[11]、以及 Helios [5]
等系統。綜言之，這些方案基本上只單獨從下列三個方
面︰資料內容處理、使用者意圖、或者網站搜尋，個別
地從網頁搜尋中致力改進查詢品質。本文中，我們將透
過本體論的協助達成智慧型的網頁查詢，全面地解決這
三個問題。尤其，將特別討論 FAQ-master。 
FAQ-master [17,24]具有智慧型檢索、過濾、整合等
能力、並能夠從網際網路中提供高品質的FAQ解答，示
如圖1。它包含本體論內容資料庫支援之四個代理人系
統，資料庫內容依次包含使用者模式庫、樣版資料庫、
領域本體論、網站模式庫、本體論資料庫、解答訊息庫、
及規則庫。在本體論主導與樣版為主之使用者模式庫的
協助下，介面代理人（Interface Agent）能透過合適的
人機互動介面擷取使用者的真實意圖[18]。搜尋代理人
（Search Agent）在本體論支援網站模式的協助下，執
行立即、使用者導向和領域相關的網際FAQ資訊擷取
[16,22]。答覆代理人（Answerer Agent）扮演後端資訊
處理的腳色，將來自搜尋代理人收集之FAQ網頁，執行
本體論主導之資訊匯總[19]。最後，代取代理人（Proxy 
Agent）則扮演像是本體論增強之的智慧型代取機制，
分擔諸多答覆代理人的查詢負荷[20,21]。請注意，我們
以個人電腦領域相關的FAQ做為系統的應用標的，並在
爾後章節做為解釋之用。 
Answerer AgentProxy Agent
Interface Agent
Query
terms
Query
terms
Internal
query
format
Search
engines
User
query
Content Base
Search Agent
Solutions
Retrieved
solutions
Retrieved
webpages
 
圖1. FAQ-master的系統架構 
2. 基本語義的領域本體論  
本系統的主要關鍵背景知識是採用Protégé 2000 [10]建
構之個人電腦的領域本體論。圖2顯示出部份的本體論
分類樹，雖然這個領域本體論是中文的，但我們的系統
仍將其對映的英語名詞視為同義詞來處理。這個分類樹
描述有關PC概念的類別，isa鏈接則表示其間的父子關
係。圖3例示出本體論CPU概念的細節，圖中最上層的
節點用諸多欄位來定義出本體論CPU概念的語義，在較
低階層的節點則代表了各式CPU的實例（io意為實例的
關係），用以擷取現實世界的資料。欲瞭解完整的PC
本 體 論 可 以 參 照 史 丹 佛 大 學 網 站
（ http://protege.stanford.edu/download/ontologies.html）
 - 4 - 
（Ontological Database Access Cases）擷取出對映解
答，並建構出頻繁查詢（frequent queries）且存於快取
池（Cache Pool）中。最後，預測模組（Prediction Module）
則根據這些頻繁序列查詢樣式，建構出每一使用者組群
的預測模型。樣式匹配監督器（ Pattern Matching 
Monitor）則負責監管新近的查詢記錄，並利用預測模
型產出下一個可能的查詢且存於預測池（Prediction 
Pool）中。 
ODAC
PC
ontology
Adaptation
Rule Base
similar case
for adaption adapted
case
new case
CBR
Interface Agent
Solution Finder
original  case
solution
adapted case
solution
solutionuser
feedback retrieved case
full matching
or sim ilar case
Internal Query
Format
Case
Retriever
Case
Retainer
Case
Reuser
Case
Reviser
 
圖8. CBR層的快取架構 
圖 8 說明 CBR 層的架構。ODAC 是案例圖書館，
包含後端答覆代理人產出的查詢案例。 假使案例擷取
器僅取回一個包括與使用者查詢相同或更多特徵的案
例，則直接輸出解答給該使用者。否則，則利用本體論
中的 VRelationship 檢查類似案例。表 2 在最後兩欄解
釋中例示出 VRelationship 的一些範例。當案例擷取器
確認出類似案例時，案例再用器（Case Reuser）會介入
檢查是否該類似案例可直接重複使用或是在重複使用
前需要一些修飾（Adaptation）。具體而言，當該類似案
例與使用者查詢間的 VRelationship 為︰1) 向下相容
時：則該案例直接被認定為一合法的解答；2) 有條件
向下相容時：則該案例被看作一具參考價值的案例，並
送給案例修正器（Case Reviser）根據推理規則進行案
例修飾。 
表 2 VRelationship 的詳細範例與解釋 
RELATIONSHIP FEATURE VALUE EXPLANATION SIMILAR? 
ASUS 
Mutually exclusive MB_Provider 
MicroStar  
A motherboard cannot belong to 
two different producers at the same 
time 
No 
PCI*4 
Downward-compatible MB_PCI_Num 
PCI*2 
A motherboard which contains 
four USB ports can be regarded as 
one with two USB ports 
Yes 
Pentium4 1.4G Conditionally 
Downward-compatible CPU_Clock_Rate 
Pentium4 1.8G 
A 1.8 GHz Pentium 4 CPU can be 
regarded as one with 1.4 GHz, but 
cannot be regarded as one with 866 
MHz, a Pentium III CPU format 
Yes 
START
R: set of frequent
itemsets that
satisfy ontology
constraints
Every
frequent itemset of R
calculated
?
Get frequent
itemset i
Divide the attributes of
frequent itemset i
according to  the
attribute values of
Problem_Subject
Rf: attribute values unconstrainted
      by       Problem_Subject
Rb: attribute values constrainted
      by         Problem_Subject
Calculate degree of confidence =
degree of support of frequent itemset i /
degree of support of Rf
If
degree of confidence >=
minimal confidence
?
Add Rf -> Rb to
association rule base
END
Y
N
Y
N
 
圖 9. 關聯式規則探勘的流程圖 
在前面我們已闡述出解答尋求處理的必要性，接著
根據使用者查詢企圖來尋求解答的一般直覺，我們結合
CBR 與 RBR 構成尋求解答的混合做法。RBR 利用規則
探勘器（Rule Miner）從 ODAC 的案例中產出關聯式規
則。圖 9 即顯示出這個規則探勘的流程圖，其混合修改
來自 Apriori [1]及 Eclat 兩演算法[25]。當 ODAC 的新案
例數量超過門檻值時，系統就會啟動規則探勘器。假使
沒有任何來自預測器或 CBR 時，解答尋找器就會啟動
RBR，執行規則式推論來產出可能的解答。 
5. 答覆代理人之本體論主導的FAQ包裹、儲存、
擷取及排序  
首先，OD 被設計來適當地反映出本體論結構的一個儲
存架構；扮演成儲存 FAQ 資訊的標準格式。在此，我
們以描述 what 表格結構為例，其被設計來應對出儲存
於 OD 中的 what 問題類型。它包含一表示問題意圖之
問題操作的欄位，其餘架構內重要欄位包括記錄由
MMSEG [15]產出的使用者查詢之斷詞結果的問句分詞
與解答分詞兩欄位；分別紀錄由 HTML 包裹器（HTML 
Wrapper）產出的問句及解答原型關鍵字之問句關鍵詞
與解答關鍵詞兩欄位；而回饋人數、回饋日期和老化次
數等欄位，則用以支援系統的老化和抗老化的機制。還
有其它有助於提升系統性能的統計資訊，包括問句關鍵
詞數、問句關鍵詞頻、解答關鍵詞數及總滿意度等欄
位。最後，還儲存一些協助追溯原始 FAQ 的輔助資訊
欄位，包括原問句、原解答、以及 FAQ 網址等。 
Q_A Pairs
Parser
Keyword
Extractor
Pre-processed
Webpage Structure
Transformer
Transformed
FAQ
 
圖10. HTML包裹器的架構 
在答覆代理人內部，我們採用包裹技術產生存於
OD 的標準 FAQ 資訊。基本上，包裹器將網頁中的問題
解答對（Q-A pairs）進行標準格式的分析、擷取及轉換。
圖 10 即顯示出 HTML 包裹器的架構。問題解答對剖析
器(Q_A Pairs Parser)除了去掉 HTML 標籤、刪除在問題
解答對中多餘的空白，更將問題解答對中的文字利用
MMSEG 來斷詞。由於預先定義的 MMSEG 字典包含不
夠完整的 PC 領域術語，導致這個原始斷詞結果不佳。
但我們卻可很容易地將本體論資料庫當成第二個字
典，矯正那些不當的斷詞。關鍵字擷取器（Keyword 
Extractor）則負責建立 FAQ 的標準關鍵字索引。首先，
從斷詞中抽出關鍵字，再利用本體論服務檢查是否為本
體論術語，並消除歧義或相互矛盾的術語。在這裡所使
用的本體論技術包括：借用本體論同義詞刪除多餘的資
訊、 利用本體論概念的特徵恢復缺漏的資訊，並利用
本體論概念的數值限制條件來解決不一致現象，然後將
剩餘的一致性關鍵詞當成存於 OD 中的索引。最後，結
構轉換器（Structure Transformer）計算出關聯到這些標
準本體論關鍵詞的統計資訊，並根據其問題型態將其儲
存在適當的資料表格內。 
Select  * 
From COULD 
Where operation ＝ ‘support’ AND  
Question keywords like ‘% 1GHZ % K7V % CPU%’ 
圖11. SQL轉換語句的範例 
隨意給個使用者的查詢，答覆代理人先從 OD 中取
回最佳匹配的問題解答對、刪除任何衝突的問題解答
對，並根據與使用者匹配的程度排序處理的結果。首
先，圖 11 顯示一個由使用者查詢所轉換出的 SQL 語
句。這裡 Where 子句包含該查詢的所有關鍵字，我們稱
為全關鍵字匹配法。用這種方法，代理人只檢索出問句
 - 6 - 
W e b s ite  P r o file :
W e b N o : : In te g e r
W e b s ite _ T itle : :S tr in g
S ta r t_ U R L ::S tr in g
W e b T y p e :: In te g e r
T re e _ L e v e l_ L im it : : In te g e r
U p d a te _ T im e /D a te : :D a te /T im e
. .. . .
W e b p a g e  P r o f ile :
B a s ic  In fo r m a tio n :
D o c N o : : In te g e r
L o c a tio n : :S tr in g
U R L ::S tr in g
W e b T y p e :: In te g e r
W e b N o : : In te g e r
U p d a te _ T im e /D a te : :D a te /T im e
. .. . .
S ta tis t ic s  In fo rm a tio n :
# T a g
# F r a m e
... . .
T it le  T e x t
A n c h o r  T e x t
H e a d in g  T e x t
O u tb o u n d _ U R L s
. .. . .
O n to lo g y  In fo r m a t io n :
D o m a in _ M a rk : :B o o le a n
c la s s 1 :  b e lie f1 ;  te r m 1 1 (fre q u e n c y );  . . .
c la s s 2 :  b e lie f2 ;  te r m 2 1 (fre q u e n c y );  . . .
. . . . .  
(a) 網站模型的格式 
W ebNo#1
DocNo#11 DocNo#12 DocNo#189 DocNo#190
.....
(w ebpage profile)
(w ebsite profile)
W ebNo#2
DocNo#21 DocNo#22 DocNo#290 DocNo#291
.....
(w ebpage profile)
(w ebsite profile)
 
(b) 網站模型的概念架構 
圖12. 網站模型格式與架構 
接著，我們轉來談談網站輪廓。WebNo 確認出一個
網站，如同網頁輪廓中用過的。透過這個數字，我們就
能 存 取 屬 於 該 網 站 中 網 頁 輪 廓 描 述 的 網 頁 。
Website_Title 記錄網站首頁介於標籤<TITLE>中的文
字。Start_URL 儲存該網站的起始地址，它可能是個領
域名稱或是個領域地址下的目錄 URL。WebType 指出
在網頁輪廓中用過的六個網站類型中的一種。
Tree_Level_Limit 則記錄網站的結構層級，用以限制搜
尋代理人探索的深度。Update_Time/Date 記錄網站修改
的最後時間。這個模型架構透過收集到的資訊協助詮釋
網站的語義；也有益於快速取回網頁資訊與自主性網際
資源搜尋。圖 12(b)例示出整個網站輪廓和網頁輪廓的
組織架構，這就說明了何以我們能達成網頁資訊的快速
取回、自主性、使用者導向及領域主導的網頁搜尋。 
具體來說，我們使用領域本體論來擴展使用者的查
詢，例如在使用者查詢中加入適當的同義詞。我們也採
用一隱含網頁擴展機制，亦即徵詢使用者模式尋求出使
用者的興趣，並利用該資訊把更多的網頁資訊添加到網
站模式中，例如，查驗網站模式中網頁聯外超連結之文
字是否與使用者興趣存在強烈的關聯性[22]。我們也採
用四階段漸進策略進行網站擴展，也就是把更多的領域
關聯網頁加到網站模式中。 
第一個階段使用公式(8)針對網站 S 所參照到，以及
從其 URL 地址中確認出，但其超連結網頁卻未被收集
到 S 的每個超鏈結 U，計算出 S(U)。 
( ) SUCPRUS DS
DC
DS ∈−×= ∑
∈
,)(1)( ,,  and 0)(, ≠CP DS     (8) 
其中 C 是領域 D 中的一個概念，PS,D被定義在公式(9)， 
PS,D(C)度量出網站 S 與領域 D 的概念 C 間概念強度的
比例關係。NS,C則是在網站 S 中論及領域概念 C 的網頁
數量。圖 13即顯示出計算NS,C的演算法。簡言之，PS,D(C)
度量出網站與一特定領域概念間的強度關係。第一階段
就是著眼在擴展已被充分描繪但卻涵蓋過少領域概念
的網站。 
Let C be a Concept, S be a Website, and D be a Domain.
Let THW be some threshold numbers for the website models.
OntoPages(S) = The webpages on website S belong to D.
OntoCon(THW, P) = The top THW domain concepts of webpage P.
Calculating_NS,C(S, C)
{
For each webpage P in OntoPage(S)
{
If OntoCon(THW, P) contains C
NS,C = NS,C + 1
}
Return NS,C
}  
圖 13. 計算 NS,C的演算法 
DS
CS
DS N
N
CP
,
,
, )( =                  (9) 
第一階段擅長收集更多充分描繪的網頁；然而卻無
助於未知的網站。我們的第二階段則更進一步搜索有助
於定義新網站輪廓的網頁。本階段，我們先利用網站模
型中屬於一些未知網站輪廓的 URLs。針對這些儲存在
未定網站模式中的每一網頁聯外超鏈結U利用公式(10)
計算 S(U)。 
),()( DUAnchorUS =               (10) 
其中，函數 Anchor(U,D)根據有多少字詞出現在聯外超
連結 U 的錨點文字是屬於領域 D，來計算該超連結 U
的權重。因此，第二階段著眼在擴展那些能協助帶來更
多補足未定網站模式輪廓規格資訊的網頁。 
在第三階段，我們更放鬆約束條件；就是放寬針對
未知網站輪廓的狀態。我們開拓任何可能的 URLs，只
要他們被網站模式中的網頁參照到即可。我們利用公式
(11)針對網站模式中被任何網頁參照到的每一聯外超連
結 U，計算它的 S(U)。簡言之，第三階段企圖收集網站
模式中網頁參照到的所有網頁。 
)(),()( ,, CPRCUAnchorUS DS
DC
DS ××= ∑
∈       
(11) 
在最後階段，我們根據存在網站和網頁輪廓中的
Update_Time/Date 週期性地更新並擴展網站輪廓。具體
而言，我們參照[7]所提出針對不同網站類型的更新週期
分析，並針對每一類網站定義如表 4 所示的權重。接
著，這個階段使用公式(12)針對屬於一特定網站類型 T
的每一 U 設定一個 S(U)。 
TUWRUS TDS ∈×= ,)( ,             (12) 
表 4 不同網站類型的權重表 
Web Type, T WT 
com 0.62 
net/org 0.32 
edu 0.08 
gov 0.07 
PC Hardware
Graphic Card Optical Drive
Sound Card
Network Card
SCSI Card
Hard Drive
Monitor
Modem
Motherboard
CPU
Related
Concept
Related
Concept
Related
Concept
Related
Concept
Related
Concept
Related
Concept
Related
Concept
Related
Concept
Related
Concept
Related
ConceptRelated
Concept
Reference class
Superclass  
圖14. 重新組織的部分PC本體論 
網站模型建構及擴展時，我們需要擷取基本網頁資
訊並進行統計，為了註解本體論資訊也需要將原始網頁
轉換成一份無標籤的網頁文件。這些動作皆與領域本體
 - 8 - 
參考文獻 
[1] R. Agrawal and R. Srikant, “Mining Sequential Patterns”, 
Proc. of the IEEE 11th International Conference on Data 
Engineering, Taiwan, 1995, pp. 3-14. 
[2] J.A. Arias and J.A. Sanchez, Content-Based Search and 
Annotations in Multimedia Digital Libraries, Fourth Mexican 
International Conference on Computer Science, Tlaxcala, 
Mexico, 2003, pp. 109-116. 
[3] M. Craven, D. DiPasquo, D. Freitag, A. McCallum, T. 
Mitchell, K. Nigam, ans S. Slattery, Learning to Extract 
Symbolic Knowledge from the World Wide Web, Proc. of 
the 15th National Conference on Artificial Intelligence, 
Madison, Wisconsin, 1998, pp. 509-516. 
[4] S. Dumais, E. Cutrell, J.J. Cadiz, G. Jancke, R. Sarin, and 
D.C. Robbins, Stuff I’ve Seen: A System for Personal 
Information Retrieval and Re-use, Proc. of the 26th Annual 
International ACM SIGIR Conference on Research and 
Development in Information Retrieval, Torento, Canada, 
2003, pp. 72-79. 
[5] A. Gulli and A. Signorini, Building an Open Source Meta 
Search Engine, Proc. of the 14th International World Wide 
Web Conference, Chiba, Japan, 2005, pp. 1004-1005. 
[6] J. Heflin, J. Hendler, and S. Luke, Applying Ontology to the 
Web: A Case Study, Proc. of the 5th International 
Work-Conference on Artificial and Natural Neural Networks, 
Alicante, Spain, 1999, pp. 715-724. 
[7] T. Joachims, A Probabilistic Analysis of the Rocchio 
Algorithm with TFIDF for Text Categorization, Proc. of the 
14th International Conference on Machine Learning, 
Nashville, TN, USA, 1997, pp. 143-151. 
[8] D. Mladenic, Machine Learning Used by Personal 
WebWatcher, Proc. of ACAI-99 Workshop on Machine 
Learning and Intelligent Agents, Chania, Crete, 1999. 
[9] M. Müller, An Intelligent Multi-Agent Architecture for 
Information Retrieval from the Internet, Technical report, U. 
of Osnabrüeck, Germany, Available at 
http://citeseer.ist.psu.edu/94069.html, 1999. 
[10]N.F. Noy and D.L. McGuinness, Ontology Development 
101: A Guide to Creating Your First Ontology, Available at 
http://www.ksl.stanford.edu/people/dlm/papers/ontology-tuto
rial-noy-mcguinness.pdf, 2000. 
[11]T. Ruben and D. Jaime, Advanced Meta-Search of News in 
the Web, Proc. of the 6th International ICCC/IFIP 
Conference on Electronic Publishing, Karlovy, Czech 
Republic, 2002. 
[12]O.D. Sahin, F. Emekci, D. Agrawal, and A.E. Abbadi, 
Content-Based Similarity Search over Peer-to-Peer Systems, 
2004 Second International Workshop on Database, 
Information Systems, and Peer-to-Peer Computing, Torento, 
Canada, LNCS 3367, 2005, pp. 61-78. 
[13]G. Salton and M.J. McGill, Introduction to Modern 
Information Retrieval, McGraw-Hill Book Company, New 
York, USA, 1983. 
[14]J. Trajkova and S. Gauch, Improving Ontology-Based User 
Profiles, The 2004 Recherche d’Information Assistee par 
Ordinateur Conference, Vaucluse, France, 2004, pp. 
380-390. 
[15]C.H. Tsai, MMSEG: A Word Identification System for 
Mandarin Chinese Text Based on Two Variants of the 
Maximum Matching Algorithm, Available at 
http://technology.chtsai.org/mmseg/, 1996. 
[16]S.Y. Yang and C.S. Ho, A Website-Model-Supported New 
Search Agent, The 2nd International Workshop on Mobile 
Systems, E-Commerce, and Agent Technology, Miami, 
Florida, USA, 2003, pp. 563-568. 
[17]S.Y. Yang and C.S. Ho, An Intelligent Web Information 
Aggregation System Based upon Intelligent Retrieval, 
Filtering and Integration, The 2004 International Workshop 
on Distance Education Technologies, Hotel Sofitel, San 
Francisco Bay, CA, USA, 2004, pp. 451-456. 
[18]S.Y. Yang, Y.H. Chiu, and C.S. Ho, Ontology-Supported 
and Query Template-Based User Modeling Techniques for 
Interface Agents, 2004 The 12th National Conference on 
Fuzzy Theory and Its Applications, I-Lan, Taiwan, 2004, pp. 
181-186. 
[19]S.Y. Yang, F.C. Chuang, and C.S. Ho, Ontology-Supported 
FAQ Processing and Ranking Techniques, Accepted for 
publication in International Journal of Intelligent 
Information Systems, 2005. 
[20]S.Y. Yang, P.C. Liao, and C.S. Ho, A User-Oriented Query 
Prediction and Cache Technique for FAQ Proxy Service, 
Proc. of The 2005 International Workshop on Distance 
Education Technologies, Banff, Canada, 2005, pp. 411-416. 
[21]S.Y. Yang, P.C. Liao, and C.S. Ho, An Ontology-Supported 
Case-Based Reasoning Technique for FAQ Proxy Service, 
Proc. of The Seventeenth International Conference on 
Software Engineering and Knowledge Engineering, Taipei, 
Taiwan, 2005, pp. 639-644. 
[22]S.Y. Yang, C.M. Wang, and C.S. Ho, How Do 
Ontology-Supported Website Models Help Web Search? 
Submitted to Web Intelligence and Agent Systems: An 
International Journal, 2005. 
[23]S.Y. Yang, An Ontology-Supported Information 
Management Agent with Solution Integration and Proxy, 
Proc. of The 10th WSEAS International Conference on 
Computers, Athens, Greece, 2006, pp. 974-979. 
[24]S.Y. Yang, FAQ-master: A New Intelligent Web Information 
Aggregation System, International Academic Conference 
2006 Special Session on Artificial Intelligence Theory and 
Application, Tao-Yuan, Taiwan, 2006, pp. 2-12. 
[25]M.J. Zaki, S. Parthasarathy, M. Ogihara, and W. Li, “New 
Algorithms for Fast Discovery of Association Rules”, Proc. 
of the 3rd International Conference on KDD and Data 
Mining, Newport Beach, California, USA, 1997, pp. 
283-286. 
表 Y04                    - 1 - 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                          95 年 9 月 26 日 
報告人姓名   楊勝源 
 
服務機構 
及職稱 
 
 聖約翰科技大學電通系副教授
 
     時間 
會議 
     地點 
 95 年 9 月 21~24 日 
 
 日本東京工業大學 
本會核定 
補助文號 
 NSC-95-2221-E-129-019 
會議 
名稱 
 (中文) 第三屆軟運算與智慧型系統暨第七屆尖端智慧型系統聯合國際會
議 
 (英文) Joint 3rd International Conference on Soft Computing and Intelligent 
Systems and 7th International Symposium on advanced Intelligent 
Systems (SCIS & ISIS 2006) 
發表 
論文 
題目 
 (中文) 網際網路服務之本體論主導式網頁分類器 
 (英文) An Ontology-Directed Webpage Classifier for Web Services 
一、參加會議經過 
  本人參加 SCIS & ISIS 2006 國際研討會在日本東京的東京工業大學大岡山校區
舉行，從九月二十日至九月二十四日為期五天(二十日為報到日)。此次研討會共區
分成 41 個領域，並包括 60 個 Organized Sessions。依據不同的研究領域於四天議程
內在十個會議廳分別進行約達 400 篇論文的口頭發表。 
  本人於九月二十一日搭乘本國長榮航空班機抵達日本東京成田機場，再轉搭利
木津巴士到赤版見附東急飯店，即刻轉搭東京地鐵山手及目黑線到會議地點，抵達
時已是同日下午快三點。隨即報到並準備五點的論文發表，報到時也遇到幾位同樣
來自台灣的教授與博士生。閒聊間，瞭解彼此的研究情形並交換學習心得。 
  本人參加Ontology technology and its applications相關的Session，研討主題包括：
1. Ontology and Information Retrieval 
2. Ontology and Data Mining 
3. Ontology and Semantic Web 
4. Ontology and e-Health 
5. Ontology and e-Learning 
6. Ontology and Bioinformatics 
7. Ontology and Web Services 
8. Ontology and Smart Life 
9. Ontology and e-Commerce 
10. Other Applications of Ontology 
論文題目為「An ontology-directed webpage classifier for web services」，論文摘要如
下： 
This paper discusses how ontology helps webpages/websites classification for Web 
services. We propose an ontology-directed classification mechanism, namely, 
OntoClassifier to make a decision of the class for a webpage or a website in the 
semantic decision process for Web services. OntoClassifier is a two-step classifier 
附件三
 
An Ontology-Directed Webpage Classifier for 
Web Services 
 
Sheng-Yuan Yang 
Dept. of Computer and Communication Engineering, St. John’s University 
499, Sec. 4, TamKing Rd., Tamsui, Taipei County 251, TAIWAN  
ysy@mail.sju.edu.tw 
 
Abstract - This paper discusses how ontology helps web-
pages/websites classification for Web services. We propose an 
ontology-directed classification mechanism, namely, OntoClassi-
fier to make a decision of the class for a webpage or a website in 
the semantic decision process for Web services. OntoClassifier is 
a two-step classifier based on the deliberately organized ontology 
structure and can do very accurate and stable classification on 
web pages to support Web services. The first stage uses a set of 
representative ontology features for measuring how strong a 
webpage/website is related to a specific class by calculated the 
number of ontological features of a class that appears in a web-
page/website. If for any reason the first stage cannot return a 
class for a webpage/website, we move to the second stage of 
classification. It employs another set of related ontology features 
with a level-related weighting mechanism for webpage/website 
classification. Our experiments show that OntoClassifier per-
forms very well in obtaining accurate and stable web pages 
classification. 
I. INTRODUCTION 
In this information-exploding era, the World Wide Web is the 
largest source for all kinds of information that is available to a 
very high number of people all over the world. On the one 
hand, it improves the capability of information sharing among 
humans. On the other hand, the volume of web pages has 
been growing beyond human comprehension. Due to the vast 
amount of online information available on the Web, it is im-
portant to classify or filter the documents. Especially, auto-
matic webpage classification is of great importance to provide 
a Web portal service [12]. To solve this problem two kinds of 
services have emerge helping to retrieve information: search 
engines like Google and directory services like yahoo!. In 
general, a search engine basically consists of a large database 
of words with respect to the web documents they occur in; a 
directory service consists of a large topic tree organizing a 
huge, predefined set of possible query topics. However, these 
services suffer from some common problems. First, they pro-
vide a well-organized directory structure in order to pinpoint 
proper web information for the user. The problem is: Are the 
directory/index structures truly conformed to the user’s query 
requirements or usually very simple from what the user con-
jectures about his problems? Second, even if they possess ad-
hoc classified/clustered mechanisms for providing precise, 
effective, and efficient classification. The problem is: Do 
these classification/clustering mechanisms have any physical 
meaning of the domain concepts for the Web services? These 
problems stem from a more fundamental problem: lack of 
semantic understanding of Web documents. To make sure 
whether exist any classified mechanism with specific physical 
meanings can actually help Web services effectively utilize 
the information on the Web, we need to develop a new classi-
fication which is free of the above problems. 
We notice that ontology is mostly used in the systems that 
work on information gathering or classification to improve 
their gathering processes or the search results from disparate 
resources [6]. For instance, Labrou and Finin [9] suggest that 
one (or a collection) of names of Yahoo! (or any other WWW 
indexer’s) categories can be used to describe the content of a 
document, which offer a standardized and universal way for 
referring to or describing the nature of real world objects, 
activities, documents, etc., and may be used to semantically 
characterize the content of documents. Park and Zhang [12] 
describe a novel method for webpage classification that is 
based on a sequential learning of the classifiers which are 
trained on a small number of labeled data and then augmented 
by a large number of unlabeled data. Wang et al. [16] propose 
a new website information detection system based on Web-
page type classification for searching information in a particu-
lar domain. SALEM (Semantic Annotation for LEgal Man-
agement) [2] is an incremental system developed for auto-
mated semantic annotation of (Italian) law texts to effective 
indexing and retrieval of legal documents. Chan and Lam [3] 
propose an approach for facilitating the functional annotation 
to the Gene ontology by focusing on a subtask of annotation, 
that is, to determine which of the Gene ontology a literature is 
associated with. Swoogle [5] is a crawler-based system that 
discovers, retrieves, analyzes and indexes knowledge encoded 
in semantic web documents on the Web, which can use either 
character N-Gram or URIrefs as keywords to find relevant 
documents and to compute the similarity among a set of 
documents. Finally, Song et al. [13] suggest an automated 
method for document classification using an ontology, which 
expresses terminology information and vocabulary contained 
in Web documents by way of a hierarchical structure. 
In this paper, we propose an ontology-directed classifica-
tion mechanism, namely, OntoClassifier to make a decision of 
the class for a webpage or a website in the semantic decision 
process for Web services. OntoClassifier is a two-step classi-
fier based on the deliberately organized ontology structure (as 
illustrated in Figs. 4 and 5) and can do very accurate and 
stable classification on web pages to support Web services, 
e.g., correct annotation of domain semantics [18,19,20]. The 
first stage uses a set of representative ontology features (ex-
plained later) for measuring how strong a webpage/website is 
related to a specific class by calculated the number of onto-
logical features of a class that appears in a webpage/website. 
If for any reason the first stage cannot return a class for a 
TH-D5-2 SCIS&ISIS2006 @ Tokyo, Japan (September 20-24, 2006)
- 720 -
and their relationships and can serve as a fast and stable se-
mantics decision mechanism for Web services, e.g., website 
modeling and Web search [18,19,20]. 
Table 1 Example of related concept nodes of different levels 
(after stemming) 
LEVEL 3 LEVEL 4 LEVEL 9 LEVEL 10
ddr 
dvi 
graphi 
inch 
kbp 
khz 
raid 
bandwidth 
microphone 
network 
scsi 
channel 
connector 
extern 
mhz 
plug 
usb 
intern 
memori 
output 
pin 
III. SYSTEM APPROACH 
OntoClassifier is a two-step classifier based on the re-
organized ontology structure as shown in Figs. 3 and 4, where, 
for ease of explanation, we have deliberately skipped one 
piece of information. Fig. 5 brings it back showing that each 
ontology feature is associated with a term frequency. The 
term frequency comes from the number of each feature ap-
pearing in the classified webpages. 
3dnow (35)
Sse2 (52)
L1 (43)
Pipeline (36)
Ondie (28)
.....
BIOS (72)
ATX (47)
Onboard (41)
Amr (23)
Cnr (15)
.....
CPU Motherboard
Level 1
Level Threshold = 1
(THW = 1)
Socket (126)
478pin (78)
423pin (36)
.....
Socket (154)
478pin (122)
423pin (98)
.....
Related concept nodes
Level 2
 
Fig. 5 Re-drawed ontology structure 
OntoClassifier classifies a webpage in two stages. The first 
stage uses representative ontology features. We employ the 
level threshold, THW to limit the number of ontology features 
to be involved in this stage. For example, Fig. 5 shows THW 
= 1, which means only the set of representative features at 
level 1 will be used. The basic idea of classification of the 
first stage is defined by Eq. (1). In the equation, On-
toMatch(d,C) is defined by Eq. (2), which calculates the num-
ber of ontological features of class C that appears in webpage 
d, where M(w,c) returns 1 if word w of d is contained in class 
C. Thus, Eq. (1) returns class C for webpage d if C has the 
largest number of ontology features appearing in d. Note that 
not all classes have the same number of ontology features; we 
have added #wC’, the number of words in each class C’, for 
normalization. Also note that Eq. (1) only compares those 
classes with more than three ontology features appearing in d, 
i.e., it filters less possible classes. As to why classes with less 
than three features appearing in d are filtered, we refer to 
Joachims’ concept that the classification process only has to 
consider the term with appearance frequency larger than three 
[8]. 
3),(,
#
),(maxarg)( '
'
'
'
'
>=
∈∈
CdOntoMatch
w
CdOntoMatchdHOntoMatch
cC
C
cC
  (1) 
∑
∈
=
dw
CwMCdOntoMatch ),(),(                      (2) 
If for any reason the first stage cannot return a class for a 
webpage, we move to the second stage of classification. The 
second stage no longer uses level thresholds but gives an 
ontology term a proper weight according to which level it is 
associated with. That is, we modify the traditional classifiers 
by including a level-related weighting mechanism for the 
ontology concepts to form our ontology-based classifier. This 
level-related weighting (L) mechanism will give a higher 
weight to the representative features than to the related fea-
tures. The second stage of classification is defined by Eq. (3). 
Inside the equation, OntoTFIDF(d,C) is defined by Eq. (4), 
which is basically the calculation of a TFIDF score on the 
ontology features of class C with respect to webpage d, where 
TF(x|y) means the number of appearance of word x in y. Thus, 
Eq. (3) returns class C for webpage d if C has the highest 
score of TFIDF with respect to. 
),(maxarg)( '
'
CdOntoTFIDFdHOntoTFIDF
cC ∈
=
             (3) 
∑ ∑∑∈
∈∈
×=
dw
FwFw
w
CC
dwTF
dwTF
CwTF
CwTF
L
CdOntoTFIDF
''
)'(
)(
)'(
)(1),(
       (4) 
IV. SYSTEM EVALUATION 
Our classifier is developed using Borland JBuilder 7.0 on 
Windows XP. We collected in total ten classes with 100 web-
pages in each class from hardware-related Websites. The first 
experiment is to learn how well OntoClassifier works. We 
applied the feature selection program as described in ontol-
ogy-reorganization to all collected webpages to select ontol-
ogy features for each class. 
OntoClassifier
0%
20%
40%
60%
80%
100%
10 20 30 40 50 60 70 80 90 10
0
# of Features
A
cc
ur
ac
y
CPU
Motherboard
Graphic Card
Sound Card
Network Card
SCSI Card
Optical Drive
Monitor
Hard Drive
Modem
 
Fig. 6 Classification performance of OntoClassifier 
To avoid unexpected delay we limit the level of related 
concepts to 7 during the second stage classification of Onto-
Classifier. Fig. 6 shows its performance for each class. Sev-
eral interesting points deserve notice here. First, with a very 
small number of ontology features, OntoClassifier can per-
form very accurate classification results in virtually all classes. 
- 722 -
