 行政院國家科學委員會專題研究計畫成果報告 
音樂旋律編碼、片語抽取及檢索方法之研究 
Melody Encoding, Pattern Extraction and Retrieval Method of Music 
Contents 
計畫編號：NSC 99-2221-E-011-129 
執行期限：99年8月1日至100年7月31日  
主持人：林伯慎   台灣科技大學資訊管理學系  
一. 摘要 
 傳統音樂內容資訊檢索的作法，是將查詢片段轉為特徵序列，與音樂資料庫
中所有的樂曲逐一做動態比對，以找出目標歌曲。這種作法會隨著資料庫中樂曲
數量增加或特徵序列維度變大，而導致搜尋時間線性增加，也使得內容檢索很難
被應用到大型的音樂資料庫。本研究提出旋律片語的抽取、過濾和排序篩選方法，
以及基於此方法的索引搜尋架構的模糊比對演算法。這種方法和傳統動態比對方
法相較，可以大幅改進音樂檢索的速度。在不過度犧牲平均排名的情況下，經由
篩選片語辭典可以進一步降低比對時間，達到速度與效能之間的平衡。而模糊比
對的演算法，則有助於找到新奇、相關並和目標文件有近似旋律的樂曲，可以應
用於輔助音樂的內容探索、創作或教學。 
 
關鍵詞：音樂檢索、N-grams、前綴樹、模糊比對 
 
Abstract  
Conventional methods of content-based music information retrieval (MIR) convert 
the queries into the feature sequences and dynamically compare them with the 
features of all the collections in the database to find out the target. However, with the 
increasing amount of the collections or dimension of feature sequence, the search time 
based on dynamic programming raises linearly, which limits the scalability of MIR 
systems. In this research, we proposed a search scheme for MIR based on extracted 
melody patterns and fuzzy matching. The results show that our approach can reduce 
the retrieval time effectively. Ranking and filtering on melody patterns can further 
reduce the comparison time without heavily sacrificing the average rank, while fuzzy 
matching can help to retrieve relevant novel documents with similar melody patterns 
as the query, which the user might feel interested in. 
Keywords：Music Retrieval, N-gram Melody, Melody Patterns, Fuzzy Matching 
做法類似統計語言處理的抽詞演算法)。為了節省記憶體的使用，我們將片
段載入前綴樹進行統計和索引，並以過濾條件取出共 9577 個片段，稱為「旋
律片語辭典」。根據旋律片語辭典和前綴樹的索引結構，我們對樂曲建立文
件索引，也驗證了此架構可根據旋律的快速搜尋樂曲，並達到不錯的平均排
名。進一步我們以 TF-IDF 排序旋律片段，並篩選出具較重要、具鑑別力之
旋律片段。實驗結果顯示，此方式在幾乎不犧牲平均排名的情況下可以有效
地提升搜尋速度。另外，我們也提出了模糊比對的演算法，這個方法不單考
慮目標歌曲的平均排名，也同時能找到其它新奇、有相關、旋律近似的歌曲，
作為輔助音樂內容的探索、創作與教學之用。 
 未來的研究方向：本計畫被核准的年限為一年，故僅執行了規劃中第一年的
執行進度，順利完成了資料庫搜集處理、基本旋律編碼、自動旋律抽取方法
和基本檢索架構的建置等，其中建立「旋律片語辭典」為主要重心。「旋律
片語辭典」代表了音樂中具重複性與鑑別力之旋律片段，角色類似自然語言
的辭典，是進一步研究的重要基礎。在本計畫執行成果上，可以引入傳統資
訊檢索與機器學習領域的處理技術，包括：建立文件向量、索引、搜尋比對、
關聯分析、或分群分類等。我們已依此架構和規劃，繼續曲風分類以及風格
旋律關聯的研究，計畫未來能將相關成果發表於國際的研討會與期刊。 
 
本計畫研究價值歸納如下：  
 建立以片段抽取和模糊比對為基礎之音樂檢索方法：本計畫研究了片段抽取
表示與旋律的搜尋比對方法，並利用這些技術實作了音樂檢索原形系統，詳
細研究方法請參照所附之論文。所提出的方法讓傳統資訊檢索的索引搜尋技
術可以應用至音樂內容檢索上，避免因動態比對的極大計算量而耗費過多的
時間。此架構使大型音樂資料庫的內容即時檢索成為可能，未來我們將繼續
發展此技術，讓使用者可以透過哼唱搜索(Query by Singing or Humming)或
以歌找歌(Query by Example)方式，搜尋大型的樂曲旋律資料庫。另外，此
研究提出的模糊比對方法還有助於找出新奇、相關、旋律和查詢近似的非目
標樂曲，可用來輔助音樂內容研究、音樂創作、或製作音樂教材等。這些都
是未來可深入研究的方向。 
 以本計畫為基礎研究情緒辨識、曲風分析的可行性：本計畫以音符編碼來建
立通用的旋律片語辭典，藉此將機器學習技術引入至音樂處理的研究領域，
並使音樂工作者和資訊技術研究者間能有互動的空間。旋律是音樂最重要的
特徵之一，旋律片語辭典就像語言研究的辭典，是個相當有用的工具，也是
統計分析研究重要的基礎。例如，如果樂曲有風格或情緒等標記，就可分析
不同風格的代表性旋律、介於兩風格之間的旋律，哪些旋律和哀傷情緒關聯
度高等。過去音樂內容檢索的研究多只著重在結合信號處理與機器學習方法，
這樣的做法雖能達到特定功能，其成果卻很難產被音樂教學、演奏、創作、
研究等方面的音樂工作者理解並能加以延伸應用。「旋律片語辭典」本身就
 
圖 1 標歌網網站介面 
 
 
圖 2 曲風分析之系統介面 
  
內涵式音樂資訊檢索系統的作法，會先將每首樂曲轉換為特徵並儲存至資料庫，而查詢的內容也
以相同方式轉換為特徵，再與資料庫的每首樂曲的特徵做相似度比對。然而，隨著資料庫歌曲數
量與特徵序列的長度增加，動態比對的計算量大增，而難以達到即時查詢的目標。因此，如何選
擇、擷取適當的音樂特徵、建立索引，以提升檢索速度，是音樂內容檢索應用在大型資料庫實必
頇處理的議題[1-10]。另外，使用者輸入的特徵(例如:哼唱的旋律)與目標歌曲的旋律未必完全一
致，因此如何在有誤差的情況下找到目標歌曲，也是改進的目標[1][2][4]。 
 本論文為了解決上述的問題，提出了將音樂文件以前綴樹(prefix tree)進行索引與分析，從
中萃取出重複的旋律片段，建立「旋律片語辭典」。旋律片語辭典就如同自然語言中的辭典，但
是以抽取出來的旋律片段作為單位。有了旋律片語辭典後，就能引入傳統資訊檢索領域的技術對
樂曲做分析與處理，例如建立文件向量、索引、比對樂曲的相似度或快速查詢等。如此一來，就
能有效解決音樂資料庫過於龐大而無法做到即時查詢的問題。 
 除此之外，為了解決查詢詞與文件有些微誤差的「字彙不匹配」(vocabulary mismatch)問題，
本文制定了一種查詢與文件的模糊比對公式，並使用動態時間校準法(dynamic time warping, 
DTW)針對兩個近似旋律片段做相似度計算，以提升目標歌曲被檢索到的排名。實驗發現本系統
能在短時間內在音樂資料庫中找到目標歌曲，在檢索的效率與準確性上亦可取得平衡點。 
2. 旋律片段抽取 
 本章將說明音樂文件的編碼方式，以及從音樂文件集中抽取重要、重複旋律片段的方法。 
2.1. 音符編碼 
 在抽取重複旋律特徵之前，頇先要將樂曲的旋律特徵以適當編碼方式表達出來。本論文中
我們將音符以相對音高與音長編碼。因為許多流行歌曲的副歌會為了帶動情緒而升 key，或是會
更改速度，如果使用絕對的音高或時長，就無法發現這些旋律的重複性。本論文希望做到「平移
無關」(translation independent)的比對，也就是將起音音高不同但旋律相同的片段視為相同旋律片
段，故將音符以相對音高音長的方式編碼如下： 
 
  
                                (1) 
  
                            (2) 
 
    為第 i 個音符的音高(pitch)變化量，以傳統的半音音程為單位，   則是第 i 個音符的音長
(duration)變化量。舉例來說，若    
        ，代表  與    的音程差為2，計算出  
   ；若
       ，代表相鄰兩音的音高相同，計算出  
   。計算出相對音高與音長之後，便能將音樂
文件編碼成相對音符序列    ，其中  表示第 i 個相對音高、音長的數值，表達為   
    
  形式。
以兒歌「小毛驢」的第一、二小節為例，編碼後的形式如圖1所示。 
 
圖 3. 音符編碼範例 
旋律片段。因此，我們規定：若一個路徑的出現次數皆等於其延伸路徑的出現次數，則該路徑不
視為一個旋律片段。如上例，由於{BC}出現次數與{BCA}相同，代表{BC}沒有獨立出現過，就
被過濾掉。依此類推，上例中僅會留下獨立出現過的最長路徑{BCAAA}為旋律片段。 
 除此篩選條件之外，本文使用以下三個條件篩選出較重要的旋律片段： 
 
 旋律片段出現次數≧Cth 
 旋律片段長度≧Lth 
 旋律片段來源數≧Nth 
 
 第一個條件是將出現次數大於門檻 Cth 的旋律片段，才視為重要的旋律片段。如果旋律片段
出現次數過少，則難以區分樂曲。本論文中，單用音高特徵時，門檻設為10；使用音高和音長特
徵時，門檻則設為4。第二個條件是因為過短的旋律片段很容易在不同樂曲中出現，對區分樂曲
的能力較差。本論文將長度門檻 Lth設為4。第三個條件是因為檢索系統的目標除了能找出目標樂
曲，也希望能夠取出旋律內容相近的樂曲作為其它選擇。因此，本論文將來源數門檻設 Nth為2，
去除了只出現在一份文件的旋律片段。 符合以上三種篩選條件的旋律片段，即為本論文所
定義具重複性的旋律片段。 
2.4. 旋律片段排序 
 上述的篩選方式仍有機會抽取到重覆但不重要的旋律片段（類似於資訊檢索中的 stop word），
因此本節進一步對抽取出來的旋律片段做重要性排序，使用的是類似資訊檢索經常應用到的
TF-IDF (Term Frequency-Inverse Document Frequency)，公式如下： 
                         
 
        
        (3) 
   表示某個旋律片段，      表示片段在所有文件出現的總次數，D 為文件總數，d 表示片
段出現在不同文件的數目。由於某些常見片段出現次數遠較其他片段為多，因此針對詞頻取 log
以降低詞頻的影響。 
 將所有旋律片段的 TF-IDF 數值由大至小排序，出現越多次且僅出現在少數樂曲的旋律片段
越能區分出歌曲差異。利用此排序方法，我們可以進一步精簡旋律片段數目，只取前 N 個重要
片段建構出旋律片語辭典，而毋頇將所有片段納入。這樣可以加快比對的速度與減少文件資料庫
需要的儲存空間，後面我們會針對這部分進行實驗。 
 
3. 旋律檢索方法 
 本章將接續上一章所介紹抽取旋律片段建立旋律片語辭典的作法，設計出一個旋律檢索方
法。 
3.1. 旋律相似度計算 
 上一章取得了旋律片語辭典後，我們可以依此取得每首音樂文件所對應到的旋律片段個數，
類似資訊檢索中文件的詞頻(term frequency)概念。要比對兩份文件的相似度，最常使用的就是餘
弦相似度(cosine similarity)的作法，但如果今天查詢的旋律片段不夠精確，與目標歌曲有一些誤
度，並儲存相似度最高的數值。之後兩者互換，由片段集合  找出與片段集合  中最相似的片
段距離，計算出總距離後將兩者相加。 
 
圖 5. 模糊比對公式示意圖 
 
 然而，若查詢的旋律片段過少，比對目標歌曲時可能會因為有太多其他旋律片段，使得查
詢與目標歌曲的匹配程度降低。舉例來說，設查詢文件 A’為文件 A 的子片段，僅出現旋律片段1，
文件 A 所有的片段為1, 2, 3, 4, 5，且片段2, 3, 4, 5與片段1完全不相似，依照公式，Sim(A’,A) = 
(1+1+0+0+0+0) / (1+5) = 0.33。這是因為所有旋律片段都會被計算的緣故。為了避免這個情形，
我們可以設定一個相似度門檻 Sth，片段最大相似度必頇大於門檻值才會加入計算，分母只計算
加入的片段個數，演算法細節請參見表1。以前例而言，假設相似度門檻為0.1，計算結果為
Sim(A’,A) = (1+1)/(1+1) = 1.0。相似度門檻是將模糊化的概念引入相似度比對，兩文件只有「足
夠相似」的旋律片段會被用來計算相似度，其它的旋律片段則被忽略。當相似度門檻設為1.0，
代表沒有模糊空間，兩文件中只有完全相同的旋律片段才會被記入，換言之就是 Non-Fuzzy 的比
對結果。本文會調整相似度門檻進行實驗。 
表 1. 模糊比對公式演算法 
 
double simValue = 0.0; 
int count=0; 
for (pA as pattern in mA){ 
double maxA= find_max(S(pA、mB)) 
if (maxA >= threshold){ 
simValue += maxA; 
count++; 
} 
} 
for (pB as pattern in mB){ 
double maxB= find_max(S(pB、mA)) 
if (maxB >= threshold){ 
simValue += maxB; 
count++; 
} 
} 
if (count==0) return 0.0; 
return simValue / count; 
NA 
NB 
mA mB 
… 
… 
sim 
sim 
sim 
 圖 7. 音高片段個數統計 
4.3. 實驗分析 
 本論文實驗是以每份音樂文件的部分片段做查詢，判斷檢索出目標文件的排名(rank)，排名
1（rank = 1）即為最好的結果。由於一般檢索系統希望目標文件出現在前30名，排名愈前面愈好，
因此，我們將觀察所有查詢之前10名、前20名、前30名中目標文件的含入比例平均值，以及目標
文件的平均排名，作為檢索效能的指標。為了驗證以重複片段為基礎的架構是否合用，本論文不
會使用文件重排序(document re-ranking)的方式改進平均排名。 
 另外，某些系統參數調整方法可能會減少旋律片段數（例如：用 TF-IDF 過濾片段），而導
致部分查詢文件完全找不到旋律片段。在這種情形下，我們會將該查詢結果的排名設為中間值。
以本實驗的519首歌為例，對於無法查詢的片段，我們會將其排名設為中間值260。由於篇幅限制，
以下都只針對音高編碼特徵進行實驗，查詢片段的長度固定為原本樂曲長度的10%。 
4.3.1. 篩選旋律片段對效能的影響 
首先，我們探討以 TF-IDF 篩選旋律片段對查詢效能的影響。這是因為，旋律片段的個數會
直接影響了比對的速度，如果能適度刪減，就可以有效地減少搜尋時間。然而，不能夠盲目地刪
減，應該優先刪減對樂曲鑑別力較差的旋律片段。因此，我們提出的過濾方式，是以片段對所有
樂曲的TF(log scale)乘以 IDF來代表個別片段的鑑別力，篩選後只留下鑑別力最高的前N名片段。
如果刪除過多的片段(N 值小)，雖然可以讓比對更加快速，卻相對地增加了查詢文件因沒有旋律
片段而無法做查詢的可能性。本實驗的目的就是希望找出能同時兼顧速度與效能的折衷(trade-off)
方案。 
 本實驗結果如表(2)所示，「前 N 名文件數」表示查詢的目標文件在前 N 名以內的文件數，「無
片段文件數」表示因旋律片段篩選使得查詢文件沒有旋律片段的文件數，實驗的量化等級設為1。
實驗結果顯示，旋律片段個數從所有片段（ALL: 9577個片段）一路減少下來，平均排名幾乎沒
有太大的變化，直到旋律片段個數減少至2000、1000個時，排名才大幅度下滑。這是因為無法查
詢的文件大幅度增加所致（請見表(2)粗體數字）。從表(2)還可以發現，與保留所有片段(ALL)相
比，刪除少數 TF-IDF 較低的片段反而可讓排名微幅提升。這顯示了並非所有旋律對查詢都有幫
助，適度刪除可以改進效率，對於檢索效能卻不會有太大影響。本實驗顯示出在本音樂文件集下，
將片段個數篩選至3000個仍能兼顧效率與效能，因此接下來的實驗將片段固定調整為3000個。 
表 2. 篩選旋律片段實驗數據 
篩選後片段個數 1000 2000 3000 4000 5000 
平均排名 76.6 27.3 15.8 12.2 9.6 
 圖 9. 查詢長度比例排名比較 
  
表 3. 查詢長度比例的實驗數據 
查詢長度比例 10% 20% 30% 40% 50% 
平均片段個數 12 21 32 40 45 
無片段文件數 17 4 2 1 0 
查詢長度比例 60% 70% 80% 90% 100% 
平均片段個數 47 49 51 52 54 
無片段文件數 0 0 0 0 0 
 
4.3.4. 相似度門檻對效能的影響 
 
圖 10. 旋律片段個數排名比較 
 最後，我們探討3.2節中公式(6)所使用的相似度門檻對平均排名的影響。相似度門檻的構想
是在比對兩個文件時，只有「足夠相似」的旋律片段才會被用來計算兩兩相似度。我們針對門檻
=0（兩文件的所有片段都會兩兩計算相似度）與門檻=1（兩文件只有完全相同的片段才會計入）
進行實驗。在不同片段篩選個數的情形下，其平均排名的變化趨勢如圖8所示。我們看到「門檻
=1」的較「門檻=0」情況好，這是符合預期的，如同資訊檢索中，精確比對的召回率會比模糊
比對高。然而在資訊檢索的應用上，除了找回目標文件，其它（非目標）文件的相關性與新奇性
也是重要的考量因素。模糊比對演算法有利於找到和目標樂曲的旋律片段接近但非完全相同的樂
曲。 
5. 結論 
 傳統內涵式音樂資訊檢索的作法，是將查詢片段轉為特徵序列，與資料庫所有的樂曲做動
態比對，找出目標歌曲。這種作法會隨著資料庫音樂數量或特徵序列長度的增加而導致搜尋時間
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/31
國科會補助計畫
計畫名稱: 音樂旋律編碼,片語抽取及檢索方法之研究
計畫主持人: 林伯慎
計畫編號: 99-2221-E-011-129- 學門領域: 人工智慧
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
蒐集研究資料及標記曲風的數位樂譜兩千餘首 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
