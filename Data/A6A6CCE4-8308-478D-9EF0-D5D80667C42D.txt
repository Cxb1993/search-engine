2proposition is to provide feasible difference
equations to solve for these solution gradients. First,
two supplementary equations consistent with the
original Poisson equation are derived. A
corresponding supplementary control volume for
these two additional equations is constructed
within the original computational cell. A local
coordinate system is then introduced to estimate
the flux derivatives for the supplementary
equations. Finally, a simple interpolation method
based on the information in the neighboring
computational cells is suggested to determine the
numerical flux at the computational cell boundaries.
Therefore, for a n-polygonal computational cell,
only (n+1) computational nodes are directly
involved in the difference equations. No additional
geometrical relation and associated data structure
are required in the present formulation.
2. Formulation
2.1 Governing equation
The Poisson equation in the two-dimensional
space can be generalized as the following
conservation form:
 fˆ (1a)
where fˆ is the flux function defined as:
 Dfˆ (1b)
with D the diffusion coefficient and  the
solution variable to be solved. In the above
governing equation,  is regarded as the
inhomogeneous source term.
2.2 Domain discretization
In the present study, an unstructured grid as
shown in Fig.2 is employed. In this grid system, the
control volume is constructed as contiguous
polygons by connecting the associated grid nodes.
In each polygonal control volume, the centroid
(points p and c in Fig.2) is defined as the
computational node. For convenience, some import
geometrical features can be defined from this
specific grid system: pV denotes the control
volume enclosing the computational node p,
)V( pA the area vector adherent to the control
volume and vn the number of line segments (edges)
constituting the control volume. For each line
segment, kA is the surface area vector and m is its
midpoint,
2.3 Approximate solution
To derive the difference equation for the
specified governing equation (1), solution variable
in the interested domain is approximated by the
piecewise linear distribution,


 c
n
1p
)p;()( rr (2a)
where )p;(r is the approximate linear
distribution associated with the p-th computational
cell,
otherwise
Vif
0
)(
)p;(
pppp 


 

rrr
r (2b)
with
ji ppp qp  (2c)
Therefore, for a given computational cell, there are
three unknown variables,  , p and q needed to be
determined. Physically, unknown p is the
approximate solution at the computational node
and unknowns, pp and pq are the spatial gradients
of the approximate solution. In the present
formulation, these variables are obtained by
solving two supplementary difference equations
2.4 Supplementary equations
The main theme of present study is to offer a
feasible methodology to provide the required
difference equations for two additional unknown
variables. Basically, these equations must be
consistent with the original governing equation (1).
Since the additional variables can be related to the
spatial gradients of approximate solution, a
reasonable choice to afford the supplementary
equations is by taking derivatives of the original
governing equation (1) with respect to the spatial
coordinate:
xx
ˆ


 f (3a)
and
yy
ˆ


 f (3b)
2.5 Original difference equation
Following the standard procedure of a finite
volume method, equation (1) is integrated over the
specified control volume to yield the difference
equation,
4difference equations to solve for the three unknown
variables,  , p and q.
2.7 Numerical flux function
In the resulting difference equations (4), (6a)
and (6b), there are numerical flux function and its
derivatives to be specified at the computational
node and midpoint. The numerical flux function
defined at the computational node can be
determined without difficulty because the
approximate solution distribution is continuous
with the computational cell:
)qp(DD pppppp jif  (7)
To determine the numerical flux function at
midpoint, mf , it needs to estimate the solution
gradient from the discontinuous approximate
solution profiles for the adjacent computational
cells. With the available solution spatial gradient at
the computational cells, we can generalize the
numerical flux function by the following form:
m m p c
k
m,c m,p
k
1D [ ( )
2
( ) ]
  
  
f
A
A
(8a)
In this equation, the first term is simply the
arithmetic average of those drawn from the two
neighboring computational cells. The second term
is considered to account for the approximate
solution difference across the cell boundary. In
addition,  is the scheme parameter which can be
regarded as a weighting factor. The length scale,  ,
is introduced in the numerical flux function due to
the dimensional homogeneity criterion. In the
present sudy, we employ a simple expression to
estimate this length scale:
k
cp VV
2
1
A
 (8b)
It is noted that this length scale will become the
adopted grid spacing in the one-dimensional
circumstance. With the given numerical flux
function (8a), its spatial derivatives can be obtained
with straightforward manipulations,
k
k
pc
m
m )(
D
A
Af   (9)
2.8 Resulting difference equations
Collecting and rearranging the related terms in
the above derivations, the resulting difference
equations can be expressed by the following matrix
form:
p
n
1k
ck,ppp
v
sΘAΘA 

(10a)
where Θ is the unknown solution vector,









q
pΘ (10b)
pA and p,kA are the 3 3 influence coefficient
matrixes and ps the source term vector.
From the derivation procedure and the
resulting difference equations, it is clearly shown
that the required geometrical information is
confined in the computational cell. The related
neighboring nodes involved in the difference
equations are only those sharing the same edge
with the computational cell, which leads to a
compact stencil.
3. Numerical validations
3.1 Poisson equation
The present formulation will be validated by
solving two test examples. Four types of grid
system are employed: rectangular (mesh A),
regularly triangular (mesh B), unstructured grid
(mesh C) and random distributed grid based on a
original rectangular mesh (mesh D). The randomly
distributed grid (mesh D) based on mesh A by the
following rule:
xx)1i(xx xmini 
yy)1j(yy yminj 
In the above equation, x and y are the random
numbers in the range of 5.0,5.0 yx  and
 is a distribution parameter.
The first test problem is a Laplace equation
02  with the following exact equation,
]2/)1x(nsin[)nsinh(
]2/)1y(nsinh[)y,x( 

The resulting solution profiles along the lines of
y=0.9 and x=-0.1 are illustrated in Figs.5(a) and
5(b), respectively. As shown in these figures, the
computational results are in good agreement with
the exact solution. Meanwhile, the computational
solution gradients are also in general agreed with
the exact solution.
The order of solution accuracy in our
6consistent with the original Poisson equation are
derived to form a complete equation system for
three unknown variables in a computational cell.
Contrary to the original equation, the
supplementary equations are integrated over a
supplementary control volume to obtain its
difference counterpart. The proposed derivation
process yields a compact difference stencil without
introducing geometrical relations of neighboring
computational points. Two typical test problems
are successfully solved to verify the present
formulation. Furthermore, the present formulation
is also extended to solve convection-diffusion
equation. From the test results, it is shown the
present formulation will be a feasible tool to
simulate both the Poisson equation as well as
problems in flowfield.
References
1. H. S. Carslaw and J. C. Jaeger, Conduction of
heat in solids, Oxford University Press (1959)
2. S. P. Timosheko and J. N. Goodier, Theory of
elasticity, McGraw-Hill (1970)
3. D. K. Cheng, Fundamentals of engineering
Electromagnetics, Addison-Wesley (1993)
4. G. K. Batchelor, An introduction to fluid
dynamics, Cambridge University Press (1967)
5. S. V. Patankar, Numerical heat transfer and
fluid flow, Hemisphere (1980)
6. P. J. Roache, Computational fluid dynamics,
Hermosa (1972)
7. C. Hirsch, Numerical computation of internal
and external flows, John Wiley and Sons (1988)
8. C. Olivier-Gooch and M. Van Altena, A high-
order-accurate unstructured mesh finite-volume
scheme for the advection-diffusion equation,
Journal of Computational Physics, Vol.181,
pp.729-752 (2002)
9. G. Manzini and M. Putti, Mesh locking effects
in the finite volume solution of 2-D anisotropic
diffusion equations, Journal of Computational
Physics, Vol.220, pp.751-771 (2007)
10. K. Lipnikov, M. Skashkov, D. Svyatskiy and
Yu. Vassilevski, Monotone finite volume
schemes for diffusion equations on
unstructured triangular and shape-regular
polygonal meshes, Journal of Computational
Physics, Vol.227, pp.492-512 (2007)
11. J. Breil and P.-H. Maire, A cell-centered
diffusion scheme on two-dimensional
unstructured meshes, Journal of
Computational Physics, Vol.224, pp.785-823
(2007)
12. J. B. Perot and V. Subramanian, Discrete
calculus methods for diffusion, Journal of
Computational Physics, Vol.224, pp.59-81
(2007)
13. S.-C. Chang, X.-Y. Wang and C.-Y. Chow, The
space-time conservation element and solution
element method: a new high-resolution and
genuinely multidimensional paradigm for
solving conservation laws, Journal of
Computational Physics, Vol.156, pp.81-136
(1999)
Fig 1(a)
Fig. 1(b)
8nc
102 103 104 105
e
10-5
10-4
10-3
10-2
10-1
100
mesh A
mesh B
mesh C
mesh D
Fig. 6
X
Y
-1 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1-1
-0.8
-0.6
-0.4
-0.2
0
0.2
0.4
0.6
0.8
1
Fig. 7(a)
X
Y
-1 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1-1
-0.8
-0.6
-0.4
-0.2
0
0.2
0.4
0.6
0.8
1
Fig. 7(b)
X
Y
-1 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1-1
-0.8
-0.6
-0.4
-0.2
0
0.2
0.4
0.6
0.8
1
Fig. 7(c)

-1.0
-0.5
0.0
0.5
1.0
exact
random quadrilateral
random triangular
random polygonal
p
-10
-5
0
5
10 exact
random quadrilateral
random triangular
random polygonal
x
-1.0 -0.8 -0.6 -0.4 -0.2 0.0 0.2 0.4 0.6 0.8 1.0
q
-10
-5
0
5
10
exact
random quadrilateral
random triangular
random polygonal
Fig. 8
