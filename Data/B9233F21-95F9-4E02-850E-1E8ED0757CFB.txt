 
Abstract 
Touch screen has been widely used as user interface for most mobile embedded systems. 
Currently, both the well-known iOS and Android operating systems have been fully supporting 
multi-touch capabilities. But most mobile applications run on them are still based on only single 
or two strokes of touch gestures to make a simple tap, draw, or zoom. In this paper, we propose a 
new gesture recognizer to track the related attributes of the positions, gap time, sequence, 
directions, and styles (such as dot, line, arc, or circle) among touch strokes to realize a richer 
gestures and customizable design of recognition. For example, we can customize the gesture of 
drawing a cross X with two strokes corresponding to do the action of closing the running 
application immediately. The recognizer designed with a two-level finite-state machine can be 
embedded to any applications of iOS to fully recognize all possible four kinds of gestures: 
single-touch and single-stroke, single-touch and multi-stroke, multi-touch and single-stroke, and 
multi-touch and multi-stroke. We also support users to customize their favorite gestures 
according to operations of applications and need not to rebuild them. Since most hand-writing 
recognition algorithms are CPU-bound, our approach will keep track the related attributes among 
strokes to recognize gesture within a customized state transition diagram such that our proposed 
model not only a simple and efficient power-saving algorithm design, but also a personal 
customized gesture recognizer. 
Keywords: Multi-Touch, Gesture Recognizer, Embedded System. 
 ii
圖次 
 
圖 2.1 利用 NDDE 與 DCR 來區分弧與折線 ...................................................5 
圖 2.2 紅綠燈的狀態轉換圖 ...................................................................................7 
圖 2.3 密碼為 7-8-9 順序的密碼鎖狀態轉換圖 ..................................................8 
圖 3.1 辨識器架構 ...................................................................................................9 
圖 3.2 Critical Point 表示圖 ..................................................................................10 
圖 3.3 一筆畫中  和  是 Critical Point...................................................10 3M 6M
圖 3.4 第一層狀態轉換圖 ..................................................................................... 11 
圖 3.5 直線的定義 .................................................................................................13 
圖 3.6  是 Critical Point ...................................................................................13 2M
圖 3.7  超出以  與  為基準線的容忍值被認定為 Critical Point .....13 P2 P1 nM
圖 3.8 P 的與基準線的起點和終點構成的夾角超過 155 度，判定為直線 ...14 
圖 3.9 折線示意圖 .................................................................................................15 
圖 3.10 只要產生兩個 Critical Point 以上判定為弧線 ........................................16 
圖 3.11 點擊的定義................................................................................................17 
圖 3.12 Critical Point 與基準線向量的距離關係 .................................................18 
圖 3.13  與 P1 MB 4  的距離為正，  與 P2 MP 6  的距離為負 ..........................18 
圖 3.14  夾角小於 90 度，下一筆畫從  開始..........................................19 P1 P1
圖 3.15  夾角大於 90 度且  和  為異號，下一筆畫從  開始..19 P2 V k 1 V k P1
圖 3.16  夾角小於 90 度，下一筆畫從  開始 .........................................19 P2 P2
圖 3.17  夾角小於 90 度，下一筆畫從  開始 ........................................20 Pk Pk
圖 3.18  夾角大於 90 度且  小於 90 度，下一筆畫從  開始......20 Pk Pk 1 Pk
圖 3.19  大於 90 度且  大於 90 度且  和  為異號，下一筆畫
從  開始 ..............................................................................................20 
Pk Pk 1 V k 1 V k
Pk
圖 3.20  大於 90 度且  大於 90 度且  和  為同號，下一筆畫
從  開始 ............................................................................................21 
Pk Pk 1 V k 1 V k
Pk 1
圖 3.21 第二層狀態轉換圖 ...................................................................................23 
圖 3.22 手勢列表的資料結構 ...............................................................................24 
圖 3.23 X 手勢的資料結構 ....................................................................................24 
圖 4.1 可辨識的手勢範圍 .....................................................................................25 
圖 4.2 16 種手勢的辨識速度 ................................................................................27 
圖 4.3 手勢最後一筆畫與辨識速度的統計.........................................................27 
圖 4.4 各類手勢的辨識速度 .................................................................................28 
圖 4.5 將三個相似的弧都對應到同一個功能......................................................28 
 iv
 vi
表次 
 
表 4.1 可辨識的筆畫元素參數 .............................................................................26 
 是否能歸納出符合人類手勢多點以及多筆畫的特性，以利簡化辨識多點多筆畫手
勢的難度？ 
為了解決以上的問題，本研究提出一個兩層式的有限狀態機 (Finite State Machine) 
[16] 來做辨識，利用狀態轉換的特性來進行分期式的手勢追蹤與辨識分析。 
第二節 研究目的 
本研究將設計與實作出一套具有精簡與效率的嵌入式系統多點觸控手勢辨識器，本
研究的核心為發展一套演算法可以在有限資源下即時辨識手勢，主要以辨識簡單有意義
且迅速的多點(Multi-touch) [15] 以及多筆劃(Multi-stroke) [1] 的手勢為主，而非手寫辨
識，此辨識器是有彈性的，可以改變使用者客製化的手勢與對應的功能，因此辨識器有
兩個主要的設計重點: 
1. 以辨識有意義且簡單手勢為主，並歸納出符合人類手指特性的四種手勢: 
 單點單筆畫 (Single-touch and Single-stroke) 
 單點多筆畫 (Single-touch and Multi-stroke):例如在螢幕上單指畫下兩筆畫直線
並且交錯的手勢 X 來代表關閉視窗。 
 多點單筆畫 (Multi-stroke and Single-stroke): 例如在螢幕上雙指一起畫一平行
的垂直線手勢 || 來代表將正在播放的音樂暫停 (Pause)。 
 多點多筆畫 (Multi-stroke and Multi-stroke): 例如在螢幕上用兩手分別用雙指
一起畫下平行往內或往外的手勢 = = 來代表音量放大和縮小。 
2. 提供應用程式可導入此辨識機制以及可以讓使用者自行新增刪除手勢。 
第三節 研究限制 
1. 本研究強調以提供更便利的使用者介面為目的，利用手勢來替代應用程式中或硬
體上的按鈕功用，因此辨識器是以命令設置 (command set) 的辨識為主，用來提高
 2 
第二章 文獻探討 
第一節 手勢辨識相關文獻探討 
手勢辨識通常可分為單筆畫 (Unistroke) 辨識 [5, 7, 13] 和多筆畫 (Multi-stroke) [1] 
辨識。而手勢辨識的能力則與觸控螢幕的能力有關，因此觸控螢幕可分為單點觸控 
(Single-touch) [15] 與多點觸控 (Multi-touch) [10, 15]，詳細分述如下。 
一、單筆畫 (Unistroke) 辨識 
單筆畫以 [13] 提出的 $1 (template-base) 以及 [5] 提出的 Protractor (template-base 
與Nearest Neighbor approach) 最具代表性，皆提供使用者可以自定手勢來做辨識。在 [13] 
中，其辨識演算法中利用旋轉放大來與預設的模板做比對判斷其相似程度，因此 $1 雖
然有很高的辨識率，但其主要的缺點為模版數量多辨識率才會高，但相對運算時間會變
長，而且無法辨識筆畫的方向。在 [5] 中，其演算法一樣是基於模版的方式，雖然改善
了 $1 無法辨識方向的問題，但缺點是可偵測的方向越多，準確率也會下降，且其方法
只支援單一筆畫，無法辨識多筆畫手勢。 
二、多筆畫 (Multi-stroke) 辨識 
多筆畫辨識則以 [1] 提出的 $N (template-base) 研究為主，$N 仍然利用 $1 的研
究成果來實現多筆畫辨識，(在 2011 年時改用 Protractor [5] 來改善辨識速率)，$N 也
是使用基於模版的辨識演算法，雖然可以接受使用者任何想得到的圖形做為手勢模版，
但其主要缺點為必須等待使用者輸入完畢後才能進行辨識，無法有效地利用使用者輸入
手勢的時間。 
三、單點觸控 (Single-touch) 
在 [15] 中提出單點觸控的發生是當有一隻手指讓觸控螢幕的感應器發送觸控事件 
[14]，而觸控控制器和應用程式接收到事件後，可以從觸控事件取得其在觸控螢幕上的
 4 
第三節 觸控事件 
在 [14] 中，觸控事件是指一個觸控型態的事件物件，當有手指觸摸到觸控螢幕並
且在平面上持續移動，系統就會持續發送這些觸控事件給應用程式。觸控事件在多點觸
控序列中提供一個包含所有觸控的快照，記錄著這些觸控的新增以及變化。當有手指一
觸摸到觸控螢幕，多點觸控序列就開始記錄，接著其餘的手指可能觸摸到螢幕，或全部
的手指都在螢幕上移動，當最後一個手指離開螢幕，則多點觸控序列就結束。 
本研究引用原本 Apple 公司的 iOS 作業系統提供的四種觸控事件:  
 touchesBegan:代表觸控的開始，紀錄觸控起始的座標，如有多點同時觸發事件，則
會有多個觸控點的起始的座標。 
 touchesMoved:代表觸控的移動，紀錄觸控點移動後的座標，如有多點同時觸發事
件，則會有多個觸控點移動後的座標，若觸控點持續的移動，則會以很短的時間
間隔來記錄觸控點所在的座標。 
 touchesEnded:代表觸控的結束，如手指離開觸控螢幕。紀錄觸控點離開前最後的座
標，如有多點同時觸發事件，則會有多個觸控點離開前最後的座標。 
 touchesCancelled:代表觸控的中斷，如觸控進行時，有電話來電，則會觸發此事件
，並中斷觸控的輸入。 
因此本研究利用 Apple 公司的四個觸控事件來記錄多點觸控的軌跡座標，來辨識
多點多筆畫的手勢。 
 6 
2. 密碼鎖:必須依照一定的順序輸入參數，切換到開鎖的狀態，否則會切換到鎖住的
狀態。其有限狀態機的狀態轉換圖 2.3 所示。 
 
圖 2.3 密碼為 7-8-9 順序的密碼鎖狀態轉換圖 
本研究提出一個兩層式的有限狀態機 (Finite State Machine) 來做辨識，利用狀態轉
換的特性來進行分期式的手勢追蹤與辨識分析，並引用 [7] 中 NDDE 和 DCR 的概念
提出新的改進版本，稱為 Critical Point 演算法來計算筆畫中哪些座標屬於 Critical 
Point，藉由 Critical Point 的數目與角度來區分折線和弧，再分別利用幾何圖形的定義
來辨識各筆畫之間的關係和方向性，最後應用群組的概念來區分同時間不同方向的筆畫
來簡化同時多點多筆畫的辨識能力。 
 8 
第一節 Critical Point 演算法 
Critical Point 演算法，是用來追蹤一筆畫中所產生的一連串觸控事件之座標中，篩
選出可供用來分辨直線、折線和弧的觸控點，稱之為 Critical Point。假設 touchesBegan 
事件的座標為 B，touchesMoved 事件的座標為 M，第 n 個 touchesMoved 事件的座標
為 ，以 Critical Point 的座標為 P，第 k 個 Critical Point 為 ，容忍值為 τ，如
圖 3.2 所示， B 與  構成基準線 L，  與 L 的垂直線長度為 V，則 Critical 
Point 演算法的定義為如下: 
nM Pk
2M 1M
若 V > τ 則  是 Critical Point 
若 V ≤ τ 則  不是 Critical Point 
1M
1M
 
圖 3.2 Critical Point 表示圖 
關於 Critical Point 詳細的說明將會在後續探討直線狀態時，做更詳盡的解釋。如
圖 3.3 所示，為在觸控螢幕上畫一筆畫所產生的軌跡點，其中只有 和 被判斷為
Critical Point。 
3M 6M
 
圖 3.3 一筆畫中  和  是 Critical Point 3M 6M
 10 
Line: 目前此筆畫為 Line。 
Line Continue: 確定此筆畫為 Line，筆畫連續。 
Line Ended: 確定判斷為 Line。 
Polyline: 目前此筆畫為 Polyline。 
Polyline Continue: 確定此筆畫為兩條連續的直線，筆畫連續。 
Polyline Ended: 確定判斷為兩條連續的直線。 
Arc: 目前此筆畫為 Arc。 
Arc Continue: 確定此筆畫為 Arc，筆畫連續。 
Arc Ended: 確定判斷為 Arc。 
Arc &: 確定此筆畫為 Arc，筆畫連續但下一筆畫起始位置未定。 
Arc & Continue: 確定此筆畫為 Arc，筆畫連續且下一筆畫起始位置確定。 
Arc & Line Ended: 確定判斷為 Arc & Line。 
Circle: 目前此筆畫為 Circle。 
Circle Ended: 確定判斷為Circle。 
一、直線狀態 (Line): 
從 touchesBegan 事件開始，後續接著 1 個或 n 個 touchesMoved 事件，最後是
touchesEnded 事件。其中 touchesBegan 的座標 B 與第 n 個 touchesMoved 的座標 
 的所產生的線段長度 d 必須大於 25 個像素點 (在 iPad 上約為 1 公分)。若 , 
, ...,  分別代表中途的軌跡點，則第 i 個軌跡點  與 B 和  所構成的直
線 
nM
2M
1M
nM iM nM
MB n  (以下稱此線為基準線 L)之最短距離 V 不可以超過容忍值 τ (經實驗測試為
人的手指寬度大約為 25 個像素點)，如圖 3.5 所示，B 經過  再到  的軌跡是
折線，但因為 V 沒有大於 τ 所以判定為直線。而 Critical Point 演算法就是做以上方
法判斷直線時，若軌跡點超出了容忍值，則超出最遠的軌跡點就是 Critical Point。 
1M nM
 12 
 
圖 3.8 P 的與基準線的起點和終點構成的夾角超過 155 度，判定為直線 
Pseudocode: 
 τ = 基準線產生的容忍值(像素) 
 =正在移動中的觸控事件座標 
= Critical Point 
k =第 k 個 Critical Point 
B = 起始的觸控事件座標 
I = 第 i 個觸控事件 
n =最後觸發的觸控事件 
L = 基準線 
d = B 與 的距離(像素) 
= 與基準線 L 的距離(像素) 
 
Start 
if   現在是點擊狀態 
iM
kP
iV
iM
iM
if   d > 25 Pixels   
   轉換為直線狀態 
   goto Start 
else 
   轉換為點擊狀態 
   goto Start 
if   現在是直線狀態 
    for  從 1 到 i  
       if  < τ  
          轉換為直線狀態 
          goto Start 
       else 
          產生 Critical Point  
          if  的夾角> 155 度 
            轉換為直線狀態 
            goto Start 
iV
Vi
kP
kP
 
二、折線狀態 (Polyline): 
如圖 3.9 所示，折線只會有一個 Critical Point (由兩條直線組成)，開始會有一個 
touchesBegan 其座標為 B，接 1 個或 n 個 touchesMoved 其座標為 M，最後接著 
 14 
 三、弧狀態 (Arc): 
如圖 3.10 所示，弧線一定有 2 個 Critical Point 以上 (由三條直線以上組成)，開
始會有一個 touchesBegan 其座標為 B，接著 1 個或 n 個 touchesMoved 其座標為 
M，最後接著 touchesEnded 其座標為 E，以 , , ...,  為軌跡點，而一定有軌
跡點會超出基準線 
1M 2M nM
MB n  線段的容忍值 (也就是與基準線的最短距離會大於 25 個像
素點) 且以距離 MB n  線段最遠的樣本點為 Critical Point，稱為  點，則  分別
與基準線的 B 和  產生兩條直線，而  夾角大於 90 度再將基準線的起點設為 
，並以  之後的觸控事件 , …,  作為軌跡樣本，一定會有軌跡點超出基準
線 
P1 P1
nM P
n
1
P1 P1 1pM M
nP MM 1  線段的容忍值來產生 ，  的夾角大於 90 度，則 P2 P2 MB n  線段為弧線。
即使用 Critical Point 演算法，會產生 2 個 Critical Point 則是弧線。 
 
圖 3.10 只要產生兩個 Critical Point 以上判定為弧線 
Pseudocode: 
iM
kP
 =正在移動中的觸控事件座標 
= Critical Point 
k =第 k 個 Critical Point 
B = 起始的觸控事件座標 
i= 第 i 個觸控事件 
n=最後觸發的觸控事件 
L = 基準線 
 
Start 
if   現在是折線狀態 
    if  Critical Point 數量 > 1 and 的夾角 > 90 度  
        轉換為弧線狀態 
        goto Start 
kP
 16 
 圖 3.12 Critical Point 與基準線向量的距離關係 
(3). 若將第 k 個 Critical Point 與其基準線的距離為 V k，如圖 3.13 所示，若 P1  落
在 B 往 4M  基準線向量的上方則 1V  是正值而 P2  落在 P1  往 6M  基準線
向量的下方則 2V  是負值。因此可以發現若 V k  與 V k 1  為異號時，則 Pk  為
反向點。 
 
圖 3.13  與 P1 MB 4  的距離為正，  與 P2 61MP  的距離為負 
由以上得知的反向點資訊可以將筆畫連續判斷分為下列幾種: 
(1). 直線連續: 
 直線狀態時，若產生 Critical Point 為 ，而  的夾角小於 90 度，則可以判定
touchesBegan 的座標 B 到  的線段 
P1 P1
P1 PB 1  為直線。下一筆畫從  開始如圖 3.14 
所示。 
P1
 18 
所示。 
 
圖 3.17  夾角小於 90 度，下一筆畫從  開始 Pk Pk
弧線狀態時，若第 k 個 Critical Point 為 ，  夾角大於 90 度且  小於 
90 度，則可以判定 touchesBegan 的座標 B 到  的線段 
Pk
Pk
Pk Pk 1
PB k  為弧線。下一筆畫從 
 開始，如圖 3.18 所示。 Pk
 
圖 3.18  夾角大於 90 度且  小於 90 度，下一筆畫從  開始 Pk Pk 1 Pk
弧線狀態時，若第 k 個 Critical Point 為 ，  夾角大於 90 度且  大於 
90 度且  和  為異號，則可以判定 touchesBegan 的座標 B 到  的線段 
Pk Pk Pk 1
PkV k 1 V k
PB k  為弧線。下一筆畫從  開始，如圖 3.19 所示。 Pk
 
圖 3.19  大於 90 度且  大於 90 度且  和  為異號，下一筆畫從  
開始 
Pk Pk 1 V k 1 V k Pk
 20 
第三節 筆畫屬性歸納 
本研究進一步的計算筆畫的屬性，來增加筆畫的多樣性，屬性分別是: 
 Angle: 起始點與終點連成直線的角度。 
 Location & Continue: 與前一筆畫的相對位置或此筆畫為連續筆畫。 
 Direction: 此筆畫的方向，弧的開口方向。 
 Cross: 與前一筆畫是否交錯。 
本研究為了能夠清楚地區分出單手以及多手觸控，認為當有多隻指頭在觸控螢幕移動
時，其移動的方向相同且角度相近的必是同一隻手的手指。這才符合人類以手掌作移動時
的行為，以整個手掌作移動，各手指移動軌跡會是同方向且平行的，因此本研究稱符合此
特性觸控點為同一群組。因此筆畫屬性還有以下兩種屬性。 
 Touch-Count: 此群組中的手指數。 
 Group-Count: 同時有幾個群組。 
 22 
 
圖 3.22 手勢列表的資料結構 
 
圖 3.23 X 手勢的資料結構 
 24 
本研究辨識的筆畫元素參數有角度、方向、連續、多筆畫、多點觸控、多群組、相
對位置以及交錯，如表 4.1 所示。因此本研究提高了單一筆畫的變化性，並且可以將不
同筆順但外型相同的多筆畫符號視為不同的手勢，而多群組的概念能夠實現同時多方向
筆畫的手勢如圖 4.1 (12) 的手勢。 
表 4.1 可辨識的筆畫元素參數 
屬性                 筆畫 點 線 弧 圓
角度 X V V X 
方向 X V V X 
連續 X V V X 
多筆畫 V V V V 
多點觸控 V V V V 
多群組 X V V V 
相對位置 V V V V 
交錯 X V V V 
X 代表無此屬性 V 代表支援此屬性 
第二節 即時辨識的效能 
為了測試本研究即時辨識的效能，本研究將此辨識器開發在 Apple 公司的 iPad 
上，並且利用 2010 年 Lisa 的 Protractor 這篇研究的測試方法來測試效能 [5]。實驗環
境為 2010 年 Apple 公司推出的 iPad，系統版本為 iOS 4.2，硬碟容量為 64GB 並且
支援多點觸控的嵌入式手持設備。 
在 $1 的研究中已經證明 $1 的效能比 Line Discriminate [10] 以及 DTW [6, 11] 
辨識器來的高。而在 Protractor 中也證明了辨識成功率與辨識速率比 $1 來的好，因此
本研究模仿 Protractor 其資料採集的方式，將圖 24 中四大類共 16 個手勢分別給 10 
位使用者各取 30 個樣本，總共取得 16×30×10 = 4800 個手勢樣本，並做辨識速率與準
確率分析(其 16 種手勢的辨識成功畫面請詳附錄 A)。 
整體上，在小樣本數 (4800 個樣本) 的測試下，iPad 的平均辨識速率為 0.062 微
秒，其中秒數計算以使用者手指離開觸控螢幕開始計算。Protractor 在 2010 年 Dell 
 26 
0
0.01
0.02
0.03
0.04
0.05
0.06
0.07
0.08
SS SM MS MM
The gesture category
 
Milliseconds 
圖 4.4 各類手勢的辨識速度 
在圖 4.4 可以發現複雜度低的 SS 類別辨識時間較高於複雜度較高的 SM 與 MS 
類別，導致這樣的結果，是因為辨識器架構中的第二層有限狀態機的起始手勢列表含有
所有手勢的第一筆畫，因此需要比對最多的手勢，而第二筆畫後的手勢列表，因為多筆
畫手勢彼此相似度沒那麼高，因此比對的手勢很少，所以反而比單筆畫辨識速率要高。 
在辨識錯誤率上，本研究發現因為人的手並不像機器般的精準，而導致每一次畫的
相同手勢，實質上是不可能每個在觸控螢幕上的座標點都相同的。本研究發現使用者可
能是由於輸入的手勢過快，導致輸入的手勢與使用者想輸入的不符，因此依據本研究原
始的目的，使用簡單象徵性的手勢去執行對應的軟體功能，本研究將相似的手勢都對應
去執行同一個功能如圖 4.5 所示，將三種方向的弧都對應執行同一個功能，並將增加過
相似手勢都對應到同一個的辨識器，與沒有將相似的手勢都對應到同一個功能的辨識器
做辨識錯誤率分析。 
Perform the same Fuction
 
圖 4.5 將三個相似的弧都對應到同一個功能 
 28 
個筆畫元素的多寡有關，原因於弧線筆畫元素本身必有一定的弧度，但人的手畢竟不是
機器，避免不了因為移動較快而常將弧線畫成折線。因此複雜度越高的手勢也意味著越
不簡單的手勢，在本研究的辨識器中，辨識率會越差。 
 30 
參考文獻 
[1]  L. Anthony and J. O. Wobbrock, "A Lightweight Multi-stroke Recognizer for User 
Interface Prototypes," CI’10, 2010, pp. 245-252. 
[2]  I. Guyon, P. Albrecht, Y. L. Cun, J. Denker, and W. Hubbard, "Design of a Neural 
Network Character Recognize for a Touch Terminal," Pattern Recognition, Vol. 24, 
No. 2, pp. 105-119. 
[3]  L. B. Kara and T. F. Stahovich, "An Image-based Trainable Symbol Recognizer for 
Sketch-based Interfaces," AAAI Fall Symposium, 2004, pp. 99-105. 
[4]  P. O. Kristensson and S. Zhai, "SHARK2: A Large Vocabulary Shorthand Writing 
System for Pen-based Computers," UIST '04. 2004, pp.43-52. 
[5]  Y. Li, "Protractor: A Fast and Accuate Gesture Recognizer," CHI, 2010, pp. 2169-2172. 
[6]  C. S. Myers and L. R. Rabiner, "A Comparative Study of Several Dynamic 
Time-Warping Algorithms for Connected Word Recognition," The Bell System 
Technical, Vol. 60, No. 7, 1981, pp. 1389-1409. 
[7]  B. Paulson and T. Hammond, "PaleoSketch: Accurate Primitive Sketch Recognition 
and Beautification," IUI’08, 2008, pp. 1-10. 
[8]  J. A. Pittman, "Recognizing Handwritten Text," CHI '91, 1991, pp. 271-275. 
[9]  R. Plamondon and S. N. Srihari, "On-line and Off-line Handwriting Recognition: A 
Comprehensive Survey," IEEE Trans. Pattern Analysis & Machine Intelligence, Vol. 22, 
No. 1, 2000, pp. 63-84. 
[10]  D. Rubine, "Specifying Gestures by Example," SIGGRAPH '91, 1991, pp. 329-337. 
[11]  C. C. Tappert, "Cursive Script Recognition by Elastic Matching," IBM J. of Research 
& Development, Vol.26, No. 6, 1982, pp. 765-771. 
[12]  C. C. Tappert, C. Y. Suen, and Wakahara, T. "The State of the Art in Online 
Handwriting Recognition," IEEE Trans. Pattern Analysis & Machine Intelligence, Vol. 
12, No. 8, 1990, pp. 787-808. 
[13]  J. O. Wobbrock, A. D. Wilson, and Y. Li, "Gestures without Libraries, Toolkits or 
Training: A $1 Recognizer for User Interface Prototypes," UIST’07, 2007, pp. 159-168. 
 32 
附錄A 
對應圖 4.1 中 16 種手勢辨識成功的畫面如下: 
     
(1)                        (2)                       (3) 
 
      
(4)                        (5)                       (6) 
 
 34 
      
(13)                        (14)                       (15) 
 
 
(16) 
 36 
 38 
丙、從技術創新的觀點而言，本研究計畫所能支援的平面觸控式手勢，可分成四大
類分別為：單點單筆劃  (single-touch and single-stroke) 、單點多筆劃 
(single-touch and multi-stroke)、多點單筆劃 (multi-touch and single-stroke)以及
多點多筆劃 (multi-touch and multi-stroke)。皆超過現有產品的觸控功能，具有
實務性的應用價值。而且本研究計畫已在最熱門的 iOS 作業系統環境上，完成
APP 的實作、測試與驗證。若也能將此二層式有限狀態機演算法，移植到
Android 作業系統環境上進行測試與驗證，將是更完美的開發軟體。 
丁、從社會影響方面，本研究計畫培育出具有撰寫 APP 實務經驗的人才，符合現
階段軟體產業市場的人才需求，對所有參與的學生就業有正面的幫助。 
 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：鄭王駿 計畫編號：99-2220-E-158-001- 
計畫名稱：內嵌式系統之多點觸控手勢協定的使用者介面研發 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 1 0 100% 王可為學生的碩士論文 
研討會論文 1 0 100% 
篇 
被 2011 全國計算
機會議接受 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100 字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100 字為限） 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
本計畫的主要目標是設計與實作具精簡且有效率的嵌入式系統多點觸控手勢辨識器，使其
能提供比現有平面觸控產品更具多樣性的多點觸控手勢的辨識能力，並且提供使用者客製
化多點觸控手勢的介面與功能，而其演算法的效能也必須符合嵌入式系統節能減碳的要
求，最後則是其辨識率必須接近完美。 
從學術成就的觀點而言，本研究計畫已投稿至 2011 全國計算機會議(NCS2011)，論文已被
接受並將於 12/2~3 日發表。本研究提出了一個有效率的分期式手勢辨識演算法，可以在
手勢觸碰事件發生的同時，累積座標、角度、方向等相關資訊來做分期式的辨識狀態轉換，
藉由第一層的有限狀態機來辨識基本的手勢觸控筆劃，如直線、弧線、折線、圓等等，再
經由第二層來自使用者自行客製化手勢後的有限狀態機，來找出對應的手勢進行辨識。 
尤其在嵌入式系統的應用環境下，平面觸控式手勢本身就是必須以簡單好用為原則，當手
勢複雜到類似輸入字型的辨識就失去了手勢與觸控的本意，若採用傳統字型辨識的演算
法，其複雜的學習演算法勢必將辨識導向大而不當的設計，這也我們採用二層式有限狀態
機演算法來取代字型辨識演算法的潛在優勢。另一個優勢是，一般字型辨識必須全部筆畫
輸入完畢後，才開始進行辨識。因此，有很多筆順與方向的問題不易處理。但相對地，本
研究藉由筆順、角度、方向等資訊的累積，不但可以豐富觸控手勢的種類，而且可以提昇
有限狀態機的狀態轉換效率。例如，使用劃叉的手勢 X，就可以依其筆順與角度方向分成
8 種不同的手勢，但對字型辨識而言，是同一種。當然應用程式所使用的手勢愈多，其第
二層的有限狀態機就會愈複雜。但由於觸碰事件發生的同時就會進行狀態轉換，只有最後
