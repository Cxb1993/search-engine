  2
plays an important role in Intelligent Transportation System (ITS), is not 
possible to obtain by the traditional method. With real-time O-D information, 
numerous high-value ITS applications e.g., just-in-time delivery, time shortest 
path emergency vehicle routing and congestion avoidance would be feasible. 
Due to this reason, researchers have been seeking estimation methods to derive 
valuable O-D flow information from less expensive traffic data, mainly link 
traffic counts of surveillance systems. The existing studies on this subject can be 
roughly divided into two categories: 1) Assignment-Based Methods and 2) Non-
Assignment-Based Methods (Chang, 1995).  
 The concept of assignment-based methods is mainly extended from static O-
D estimation method. These methods based on the assumption of reliable 
descriptive model for network flow assignment. The dynamic models developed 
by this approach appears to address the complex time-dependent issues in urban 
networks effectively, if the descriptive model mentioned above exists and a 
time-series set of actual O-D information is available. Another approach is the 
non-assignment based method. The key concept of this approach is to assume 
that each O-D parameter remains approximately constant during consecutive 
intervals of measurements. Researchers proposed a variety of estimation 
methods in this subject, and the primary difference among all recursive 
algorithms for dynamic O-D estimation lies in their unique way of computing 
filter matrix. The main strength of non-assignment-based method is the 
capability of providing O-D information from surveillance system which would 
be relatively accurate and less expensive cost. 
 Jou [23] introduced state pace model into dynamic O-D estimation which 
estimates both O-D matrices and transition matrix simultaneously without any 
prior information of state variables, while most of the aforementioned studies 
assume that the transition matrix is known or at least approximately known, 
which is unrealistic for a real world network. Gibbs sampler, a particular type of 
Markov Chain Monte Carlo (MCMC) method, has been introduced in the 
solution algorithm to overcome the shortcoming of the assumption of known 
transition matrix. The solution algorithm requires considerable quantities of 
iterations and takes massive computation time, thus parallel computing 
technique is then been introduced to improve the performance. 
 We begin, in the section 2, with the introduction of dynamic origin-
destination estimation (DODE) by state space model. The parallel 
implementation of DODE is addressed in the section 3, and the conclusion is 
outlined in the last section. 
 
2  Dynamic Origin-Destination Estimation 
State space model is introduced to estimate O-D flow from link traffic counts. 
The standard state space model is coupled with two parts: transition equations 
and observation equations. First, the state equation which assumed that the O-D 
flows at time t can be related to the O-D flows at time t-1 by the following 
autoregressive form, 
  4
 As the new observation ty  become available, the parameter vector would be 
updated according to Baye’s rule, 
  ( ) ( ) ( )1||| −∝ tttttt yxpxypyxp  
by using Baye’s rule and standard Bayesian theory, the posterior will be normal 
distribution with parameters 
  ( )1|11|| −−− −′= tttttttt HyMH μμμ               (7) 
  1|
1
1|1|| −
−
−− ′−= ttttttttt HVMHVVV                (8) 
The algorithm of Kalman Filter is illustrated as follows, 
Algorithm Kalman Filter 
 
Input: ,, 00 Vμ  sequencenobservatioyt =:  
Output: Filtered μ  and V 
 Begin 
  FOR each time step of the observation sequence 
   Generate prediction of the new observation by 
    1ˆ −⋅⋅= tt FHy μ  
    ( ) γ+′Σ+′⋅⋅= − HFVFHM tt 1  
   Update the parameter by 
    ( )1|11|| −−− −′= tttttttt HyMH μμμ  
    1|
1
1|1|| −
−
−− ′−= ttttttttt HVMHVVV  
  END FOR 
 END 
 
2.2 Gibbs Sampler 
 
The Gibbs sampler is a technique for generating random variables from a 
distribution indirectly, without having to calculate the density. In this paper, we 
make the following assumptions, 1) The initial ( )000 ,~ VNx μ , 2) The 
covariance matrix Σ  and γ  are known, and 3) Given F, the distribution tx  is 
Gaussian. 
The state equation can be written 
  ttt Fxx μ′+′′=′ −1 , t=1,2,…,n 
that is 
  
1 0 1
1n n n
x x
F
x x
μ
μ−
′ ′ ′⎡ ⎤ ⎡ ⎤ ⎡ ⎤⎢ ⎥ ⎢ ⎥ ⎢ ⎥′= +⎢ ⎥ ⎢ ⎥ ⎢ ⎥⎢ ⎥ ⎢ ⎥ ⎢ ⎥′ ′ ′⎣ ⎦ ⎣ ⎦ ⎣ ⎦
M M M
 
The following notation is used for simplification. 
  
1
n
n
x
X
x
′⎡ ⎤⎢ ⎥= ⎢ ⎥⎢ ⎥′⎣ ⎦
M
, 
0
1
1
n
n
x
X
x
−
−
′⎡ ⎤⎢ ⎥= ⎢ ⎥⎢ ⎥′⎣ ⎦
M
, 
1
n
U
μ
μ
′⎡ ⎤⎢ ⎥= ⎢ ⎥⎢ ⎥′⎣ ⎦
M
, [ ]F F F F′ ′ ′ ′= L L  
  6
 Using the sup norm, rather than the 1L  norm, the joint density of 
),...,,,( )()(3
)(
2
)(
1
i
k
iii ZZZZ  converges to the true density at a geometric rate in i, 
under visiting in the natural order. 
 
Result 3 Ergodic theorem 
 For any measurable function T of kZZZZ ,...,,, 321  whose expectation exits, 
( )( )ki
l
l
k
lll
i
ZZZZTEZZZZT
i
,...,,),...,,,(1lim 321
1
)()(
3
)(
2
)(
1 →∑
=∞→
 
As Gibbs sampling through m replications of the aforementioned i iterations 
produces k tuples ( )( )mjZZZZ ikjijijij ,...,3,2,1,...,,, )()(3)(2)(1 = , which the proposed 
density estimate for [ ]sZ  having form [ ] [ ]∑ = ≠= mj jrss srZZmZ 1 )( ,1ˆ . 
  
The above Gibbs sampling scheme on a random transition matrix and state 
variable forms the center part of the algorithm. In the process of generate state 
variables, Kalman filtering mechanism is added. While a simple monitoring of 
the chain (x(g)) can only expose strong non-stationarities, it is more relevant to 
consider the cumulated sums, since they need to stabilize for convergence to be 
achieved (Robert 1998).  The solution algorithm with the time-complexity of ( )2nO  is shown as follows, 
 
Algorithm Gibbs Sampler 
 
Input: matrixincidencenobservatiopathH −=: , sequencenobservatioyt =:  
Output: FX ˆ,ˆ  
 Begin 
  Initialize 
   pIF =:)0( , pI=Σ : , pI=:γ  
   { }φ=storeX , { }φ=storeF  
  SET GibbsCount (g) to 0 
  WHILE not Converge 
Generate ( )VNx g ,~)( μ  
Append )(gx  to storeX  
   CALL Kalman Filter with μ ,V , and observation sequence 
   Generate )( gF ′  by 
    { })()( gijg aA = , ( ) ( ))()( 1)( )()()( 1)( )()( ˆˆ gjgngjngigngingij FXXFXXa ′′−′′′′−′= −−  
    Generate ( )pnXXWishartw gngn −′−− ,~ )( 1)( 1  
    Generate ( )pzzzzZ ′′′′= ,...,,, 321 , ( ))(,0~ gpiidk ANz  
  8
Figure 1. The flow chart of parallel algorithm 
  
 In the pre-processor section, parameters used in our algorithm are initialized, 
so does the necessary input data. When assign jobs, these input data are sent to 
computing nodes in the cluster through TCP/IP base intranet with Message 
Passing Interface (MPI) Library. The computational procedure for the parallel 
process consists of: 
Step 1. Load input data and parameters. Initialize MPI environment. 
Step 2. Count the computing nodes exits in the cluster environment. Decide 
the count of samples should be generated by each computing nodes. 
Send data to each computing nodes. 
Step 3. Each computing nodes generate its own Xˆ  and Fˆ ′  by given input data 
for given times. And then send the result to server. 
Step 4. After all the data been sent to server, the server check the convergence 
by each Xˆ  and Fˆ ′ . If converge, the server estimate the global Xˆ  and 
Fˆ ′  by averaging Xˆ  and Fˆ ′  of each computing node. 
Step 5. Stop MPI environment. Output data. 
Pre-processor (Server) 
Assign Jobs to Computing Nodes (Server) 
Computing 
Node Local 
Job
Client Local 
Xˆ & Fˆ ′  
Send Local 
Xˆ & Fˆ ′  to 
server
Computing 
Node Local 
Job
Client Local 
Xˆ & Fˆ ′  
Send Local 
Xˆ & Fˆ ′  to 
server
Computing 
Node Local 
Job
Client Local 
Xˆ & Fˆ ′  
Send Local 
Xˆ & Fˆ ′  to 
server
…
C
om
puting N
ode 1 
Post-processor (Server) 
C
om
puting N
ode 2 
C
om
puting N
ode n 
  10
0
2
4
6
8
10
12
14
16
0 4 8 12 16 20 24 28 32
Number of processors
Sp
ee
du
p
0.0%
10.0%
20.0%
30.0%
40.0%
50.0%
60.0%
70.0%
80.0%
90.0%
100.0%
Ef
fic
ien
cy
(%
)
speed-up
Ideal
Efficiency
 
Figure 3. Speedups and efficiencies for the parallel computing 
 
4 Conclusions 
 This paper introduced a dynamic origin-destination estimation method by 
state space model. With Gibbs Sampler and Kalman filter, the algorithm loosens 
the assumption of known transition matrix that exists in other studies. To satisfy 
the real-time computation requirement of this algorithm, a parallel 
implementation on a PC-based Linux cluster is conducted. The parallel 
implementation shows a good result of nearly 80% of computing power remains 
for each CPU under a 32 CPUs cluster environment. That leads to the 
conclusion: real-time estimation of O-D matrices can be achieved by increasing 
a reasonable amount of CPUs. 
 
Acknowledgement 
This research was supported in part by the National Science Council of Taiwan 
under Grants NSC 95-2221-E-009-345 respectively. 
 
 
References 
[1] C.K. Cater, R. Kohn, Markov Chain Monte Carlo in Conditionally 
Gaussian State Space Models, Biometrika 83 (3) (1996) 589-601. 
  12
[18] R. Nanda, S. Kikuchi, Estimation of Trip O-D Matrix When Input and 
Output are Fuzzy, in: Proceedings of the IEEE International Symposium on 
Uncertainty Modelling and Analysis, 2003, pp. 104-111. 
[19] S. Gao, I. Chabini, Policy-Based Stochastic Dynamic Traffic Assignment 
Models and Algorithms, in: Proceedings of the IEEE International 
Conference on Intelligent Transportation Systems, 2002, pp. 445-453. 
[20] W. Gropp, E. Lusk, R. Thakur, Using MPI-2: Advanced Features of the 
Message-Passing Interface, MIT Press, Cambridge, MA, 1999. 
[21] Y.J. Jou, M.-C. Hwang, J.M. Yang, A Traffic Simulation Interacted 
Approach for the Estimation of Dynamic Origin-Destination Matrix, in: the 
Proceedings of IEEE International Conference on Networking, Sensing and 
Control, 2004, pp.868-873 . 
[22] Y. Li, S.M. Sze, T.S. Chao, A Practical Implementation of Parallel 
Dynamic Load Balancing for Adaptive Computing in VLSI Device 
Simulation, Engineering with Computers 18 (2003) 124-137. 
[23] Y.J. Jou, M.C. Hwang, Y.H. Wang, C.H. Chang, Estimation of Dynamic 
Origin-Destination by Gaussian State Space Model with Unknown 
Transition Matrix, in: The proceedings of 2003 IEEE International 
Conference on Systems, Man & Cybernetics, 2003, pp. 96-101. 
[24] Y.J. Jou, M.C. Hwang, Rapid Transit System Origin-Destination Matrix 
Estimation, in: The proceedings of 2002 World Metro Symposium & 
Exhibition, Taipei, April 2002. 
[25] Y.J. Jou, Rapid Transit System O/D Pattern Calculation with Statistical 
Gibbs Sampling and Kalman Techniques, in: The proceedings of 
Conference on Computational Physics 2001. 
