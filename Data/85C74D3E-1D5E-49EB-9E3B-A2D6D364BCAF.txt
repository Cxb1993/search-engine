II 
 
 
研究計畫中英文摘要： 
（一）計畫中文摘要。（五百字以內） 
 
 
網際網路的日益發達，程式之間透過網路來溝通及交換訊息也日趨頻繁。目前發佈／訂閱
模式是很流行的中介軟體架構，主要的優點是：低耦合、非同步、合乎直覺的彈性運作模
式，但當規模大到某個程度時，現有的實作卻有擴充、容錯方面的問題。另一方面，P2P 網
路的特點在於：充份利用所有節點的資源、自行組織、負載平衡、容錯，但缺點是：如果
使用者需要某個資料，必須透過查詢來表示，並且在每次的傳回結果中，都需要再進行過
濾，才能得到此資料。 
 
本研究計畫提出一套「發佈／訂閱式之 P2P 系統」，結合上述兩種網路系統的優點：藉由
發佈／訂閱式系統提供上層的服務，而由 P2P 網路負責底層的訊息路由。如此一來，對
於前者系統而言，底層的 P2P 網路提供了更有擴充性、自我組織容錯能力、更有效率的
路由機制；對於後者而言，發佈／訂閱模式提供了更好的資訊過濾能力，能降低網路頻寬
的損耗。 
 
本計畫也從應用軟體角度提出一項 Blog 系統應用實例，以驗證系統的運作效益。 
 
 
關鍵詞：P2P，發佈／訂閱式系統，中介軟體。 
IV 
 
報告內容： 
 
（一）前言 
 
At present, the structured P2P algorithms have been proposed frequently. Consequently, the P2P 
application developers need to learn different API semantics. It generates additional efforts of 
switching to different P2P topologies. Moreover, it is difficult for the developers to evaluate the 
performance of an application based on a particular underneath P2P APIs. On the other hand, if 
the P2P framework can provide reusable and comprehensive network communication 
components, it can expedite developing progress. Therefore, the P2P protocols can easily 
accommodate to different network environments. 
 
In this research, a novel P2P developing framework is proposed to assist in developing P2P 
applications by using various structured P2P protocols and P2P pub/sub algorithms. We design 
an architecture to construct the structured P2P functional blocks, including network 
communication components, P2P topology maintenance and routing, network bootstrapping, as 
well as pluggable pub/sub services. 
 
（二）研究目的 
 
In the application domain of content management system, e.g., personal blog system, large 
amount of information are created and requested over the entire user community. With the 
search capability, users can retrieve information which has particular contents according to 
given query. As the P2P community keeps advancing, however, the number of updating events 
will soon overwhelm the size of events that human can handle. By introducing pub/sub 
mechanism, applications can automatically disseminate information to the interested peers in 
P2P network. Like the RSS supported on many website, the pub/sub paradigm provides the 
functionality for users focusing on only the interested events. Therefore, pub/sub mechanism is 
an essential feature while designing a platform for developing P2P applications. 
 
There are three aspects of developing a P2P Pub/Sub-related program: application developers, 
P2P protocol developers, and P2P pub/sub protocol developers. From the aspect of developing 
pub/sub applications, programmers usually need to learn new APIs when changing the 
underlying overlay network. The difference of semantics can reside in peer initialization, 
network construction, and even communication mechanism; that is, implementing the same 
functionality on different P2P APIs could cause code rewriting. The same situation happens in 
changing pub/sub APIs. This means application would be strong coupled with P2P and pub/sub 
implementations. Application developers have no chance to compare the performance of their 
systems on different overlays. 
 
 
 
P2P Applications retrieve a live peer in the P2P network through Bootstrap Service. This live 
peer is used to initiate the join operation. Application can directly access the P2P Protocol Layer 
for message routing and performing lookup operation. By registering Pub/Sub Service to local 
peer, applications use Pub/Sub API to do event publication and subscription. P2P Protocol Layer 
delegates the physical network transmission to Transport Layer. Environment module loads 
external parameters from configuration file. 
 
The pub/sub service module provides a light-weight API for executing pub/sub related task. 
Publisher and Subscriber define the common pub/sub API that can connect with arbitrary 
pub/sub service. Each Publisher and Subscriber is associated with one topic. 
 
The PubSubService is a subclass of Service that defines the SPI needed for implementing P2P 
pub/sub algorithms. PubSubService receives the actions from pub/sub applications via Publisher 
and Subscriber. In order to accommodate to both topic-based model and content-based mode, 
the pub/sub API is designed with topic-based model and additional selector language like the 
one used in JMS for attribute filtering. The content-based model is also supported by 
introducing a wildcard topic. Pub/sub client program receives interested event via registering 
EventHandler. 
 
VI 
 
VIII 
 
without an additional message server. Instead, each peer is involved in the information dispersal 
of the pub/sub mechanism in our framework, without establishing additional message server. 
The benefit of pure P2P is that applications do not depend on a pre-constructed server 
infrastructure. The index information is connoted in the P2P network topology and routing 
protocol, compared to the super-peer indexing mechanism used in JXTA. However, this 
statement assumes the computation power of each peer is about equal. According to the 
assumption, this framework does not grant developer the advantage deploying P2P applications 
on the environment of heterogeneous devices. 
 
In previous research of P2P protocol, network bootstrapping is usually omitted. By considering 
the practicality of creating P2P applications, we define the bootstrap service interface and 
provide two boot server implementations. By externalizing the network communication, the 
framework allows different protocols transmitting messages through one single network port. 
With the evolving of CommunicationManager, the performance of all P2P protocols can be 
boosted. 
 
The FreePastry library is an open source implementation of Pastry. With Scribe system 
implemented as an additional service, developers can create group communication system with 
efficient pub/sub capability. In the design of FreePastry, the factory methods are used for 
testing/simulating applications without modification to the source code. However, applications 
developed using FreePastry are limited to the functionalities that this P2P library offered, i.e., 
only Pastry network and Scribe system. Our framework provides a flexible architecture that 
application can easily deploy to any P2P network and any network environment. With the 
lightweight pub/sub APIs, application developers can adopt any P2P pub/sub service to meet 
their system requirements. 
 
JXTA is a general P2P platform that allows heterogeneous applications be deployed on top of a 
virtual JXTA network. JXTA can provide additional structured P2P network functionality based 
on Peer Resolver Protocol. An open source project named Meteor [17] implements Chord and 
CAN on top of the JXTA platform. This approach deploys the DHT overlays upon the virtual 
JXTA network, which causes the performance downgrade because of the communication 
overheads among peers that introduced by JXTA. The JXTA platform provides a propagating 
pipe which can simulate pub/sub mechanism via the one-to-many message transmission. The 
message might be lost without noticed during the process of propagation. The performance 
degrading and reliability issue make this propagation mechanism not scaled to a large group 
communication system. In our framework, the message transmission among peers is directly 
delegated to physical network transportation, which does not incur the overheads of additional 
node discovery. Without message propagating, our pub/sub service can maintain a distributed 
multicast structure and support many-to-many message transmission. Therefore, disseminating 
information among peers will not cause unnecessary bandwidth dissipation. 
 
X 
 
計畫成果自評： 
 
 
z 與原計畫相符程度 
 
原計畫之構想規模及進度係以三年期來設計，現在由於計畫只通過一年，因此在探討規模
方面，縮減為著眼於核心、基礎的 P2P pub/sub 機制上，在應用方面，也改成複雜度較低
的 blog 系統。 
 
z 達成預期目標情況 
 
以核心 P2P pub/sub 機制而言，已大致達成原本設定的第一年目標。 
 
z 研究成果之學術或應用價值 
 
以本計畫設定的方向而言，是目前架構較完整、包容性較強的一套 P2P pub/sub 框架，具
有初步的學術及應用價值。但還有許多細節課題有待進一步探討，才能更加完善。 
 
z 是否適合在學術期刊發表或申請專利 
 
需要再進一步探討未盡完善之處，並包容更多 P2P 協定、更多的應用實例，便具有期刊
發表的價值。 
 
此次會議從 8/28 開始，至 8/29 日結束，共二日。然而，此次旅程會一次參加兩個在韓
國的研討會。除了本研討會之外，還會在會議結束後到慶州參加 4th International Conference 
on Networked Computing and Advanced Information Management (NCM 2008) 。因此，我在 8/28 
日出發前往韓國仁川機場，途中藉由 shuttle bus 及計程車到達大田，並於 8/30 日搭乘火車
前往慶州。最後，在 NCM 會議結束後，於 9/5 返回台灣。 
 
 
二、與會心得 
 
此次參與 ICHIT 2008會議，得以有機會跟許多來自各地各種領域的人做交流，交換研究
上的心得，聽取了其他學者的報告，更觸發了我的研究想法，拓展了我的研究方向。而我在
大會中報告我的研究內容時，與會人士的提問及建議可以讓我們知道自己的研究還有哪些可
以改進的地方，也讓我見識到了不同國家的研究者，可以說是獲益良多。而此次的研討會，
整體而言，感覺大會辦得十分用心，包含了各種不同領域的研究。由於平時大多只著重在自
己所研究的領域，很少有這麼好的機會能夠瞭解到不同的研究者所提出的研究議題以及應
用，大家彼此分享不同的文化及專業領域，因此，這次的會議，讓我瞭解了更多的研究方向
與研究重點。感謝提供補助的機會，有了此次的經驗，我想以後我會更勇於參加國際性的研
討會。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
