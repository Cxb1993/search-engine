II 
 
Abstract 
  
Applying ICT to help for the creation of smart living space has been a hot topic in various 
fields. Both academy and industry invest huge resources to this topic. Basically, a smart living 
space consists of a set of ubiquitous context-aware services which are implemented on various 
digital appliances and sensor devices. Therefore, we need a middleware platform to coordinate 
hardware and software resources to realize expected context-aware services. Since the realization 
of each context-aware service depends on several hardware devices and software components, 
the service is easy to suffer in low reliability. Therefore, how to enhance the failure detection 
capability of middleware and the ability to determine failure recovery strategy becomes a critical 
issue for the development of context-aware middleware. 
The mentioned issue is associated with two problems: how to accelerate the development 
and testing of ubiquitous context-aware services? and how to guarantee the run-time reliability of 
ubiquitous context-aware services? The solutions for these two problems should be able to 
efficiently run on the middleware platform. Our team has made many efforts on the creation of 
smart living space, and has implemented a multi-agent middleware executed on JADE platform. 
Because more and more context-aware services are added onto the middleware, we did 
experience the two problems mentioned above. This project intends to develop a simulator 
attached to the context-aware middleware for the acceleration of context-aware application 
software development, and embed a trust accreditation mechanism of hardware devices and 
software components for the run-time recovery from system failure. These two capabilities are 
important for the ICT-supported middleware platform of digital life. 
Based on the rich experiences of our team in the development of digital life services, we 
believe that the success of this project will be high and the contribution of this project will be 
remarkable. 
 
Keywords: Digital Life, Context-aware Applications, Middleware, Trust Model, Context 
Simulator 
1 
 
一、  前言 
 
隨著數位科技快速演進，人類生活各層面，包括食衣住行育樂等活動的內涵，將產生
質變，構成所謂數位生活的型態。在這個新的生活型態中，一方面是支援傳統生活的設施
轉換成更方便有效的數位化設施，另一方面係因數位技術而衍生出新的生活質素。所以，
所謂數位生活，既是傳統的遞嬗，也是創新的轉型。它蘊涵著一個巨大而快速的變遷，從
技術變遷進而激發社會性的變遷、文化性的變遷、教育性的變遷、藝術性的變遷、法律性
的變遷、娛樂性的變遷等等，其影響將甚為深遠。 
數位生活空間的營造已是近年來相當熱門的主題，不只是學術界重視，也是產業界競
相投入資源進行研發的領域。基本上，數位生活空間乃是由各種建構於多重數位家電及感
測器設備之上的ubiquitous context-aware services 所構成。要有效實現各種ubiquitous 
context-aware services 於一平台中，必須有一個整合性的中介軟體平台。但是由於每一個
context-aware service 執行時，必須要整合眾多的數位技術，以及眾多的硬體設備用來達
成，因此，只要其中一個軟體或者硬體環節出現問題，此context-aware service 就不能達到
使用者及程式設計者的期望，但在整合了眾多的硬體與軟體設備的情況下，系統的可靠度
並不高，如何提高系統偵測軟硬體錯誤能力，並據以決定處理策略的課題，變成ubiquitous 
context-aware services 可否正式落實於生活上不可以缺少的一環 
上述課題其實牽涉到兩個層面的問題：如何加速 ubiquitous context-aware services 的開
發和測試並確保及其有效度?及如何提昇 ubiquitous context-aware services在 run-time時的可
信賴度。這兩個問題的解決方案必須可以落實於 ubiquitous context-aware services 所依存的
數位生活中介軟體上。本研究團隊過去幾年投入許多心力致力於支持數位生活機能之智慧
型家庭服務網路開發和數位生活服務情境之實現，迄今已產出初步成果，能在智慧型家庭
服務網路上展示多重的 ubiquitous context-aware services。在該智慧型家庭服務網路上，最
重要的核心軟體即是一個建構於 JADE 的 multi-agent 中介軟體。由於服務情境越來越多元，
越來越複雜，因此軟體的開發和維護的負擔日益沉重。本計劃即基於此經驗和需求，希望
能夠在該 multi-agent middleware 平台上發展 context-aware service simulator 和處理 run-time
時軟硬體元件可否有效執行之 trust recommendation mechanism。後者並能提供 middleware
進行 fault-tolerance 處置之依據。 
 
二、 研究目的 
 
在數位家庭的研究中，各元件間的溝通與人機介面是家中成員與電腦管家互動的最大
瓶頸。首先在元件上，在過去的研究中，往往需要實際的測試與改良，方能發展出一個穩
定的元件。我們提出 Context Simulator 的方法與系統，讓各元件的溝通與測試能在此模擬
環境中先行執行，如此便能早期發現問題並加以改善，並有助於加速元件的開發。 
 隨著行動裝置與數位家電的發展，context-aware application 的開發最近幾年漸漸受到重
視，一個有效率的 context-aware application 必須要能根據環境的狀態的變化適時給予使用
者適當的回應，因此，context-aware application 必須能夠控制感測裝置與軟體元件去完成使
z 提供機制來判斷軟體元件的可靠度 
z 提供機制來判斷硬體元件的可靠度 
z 用來提高 context-aware application 執行的成功率 
4. 提供相同的情境需求有不同呈現的方法 (Dynamic Plan Generator) 
z 提供 context-aware application 不同的執行計畫 
z 提供計畫正確執行的可能性預測 
z 根據外在環境狀況更動 context-aware application 執行內容 
3 
 
 
 
 
 
圖 1：系統架構圖 
 
Trust 這個名詞的概念由 Diego Gambetta 提出的定義可以清楚瞭解，Trust 這個名詞強
調的是個人主觀的觀點對信任者的相信程度，Trust 在 Yahalom et. al 的論文中又被分為兩個
不同的觀點：一個是直接信任(direct trust)，一個是間接信任(indirect trust)，直接信任表示
個體直接對被信任者的相信程度，間接信任則是表示個體透過第三者來決定對被信任者的
相信程度。目前眾多研究將 Trust Model 運用在 Peer-to-Peer Network 以及 Social Network
的研究上，目前的研究大部分都是將 Trust量化利用這些 Trust的值來計算信任度，利用 Trust
計算的結果來選擇適當的 Service Provider。 
常見的 Trust Model 有下列幾種： 
z Holland and Geofflocketts model 
在這個架構中，Holland 和 Geofflocketts 定義了兩種 Trust Types：Dispositional trust 還
有 Subjective trust。Dispositional trust 依據對方的態度、個人基本特質以及過去的相處經驗
發自內心的相信對方，跟目前處的情況是無關的。而 Subjective trust 則是如果你有某方面
特殊需求時，你會對不同人產生不同的信賴程度，例如：你相信你的家人，但是當你生病
時，你相信醫生的建議更勝於家人。圖 2 即是 Holland and Geofflocketts framework of trust. 
Dispositional Trust 會根據外在的 Context 的影響，產生所謂的 Subjective Trust。 
Context-Aw
are 
Context-Aw
are 
Context-Aw
are 
Context-Aware Middleware 
Context Simulator 
模擬對外在環境
狀態的影響 
z Abdul-Rahman and Hailes computational model 
這個系統架構主要建構在真實世界的 trust 特徵上，而且這個系統主要以推薦機制
(reputation mechanism)為基礎。這個模型處理 agent 間彼此的信賴度根據自身的體驗還有推
薦的相關資訊，所以這個架構中的 agent 會收集自身的經驗還有其他 agent 的推薦資訊，用
此衡量對於某個特定 agent 的信賴程度用以做為決策的基準。這個模型的系統架構圖如圖  
 
Agent 
5 
 
圖 4：Abdul-Rahman and Hailes’ computational model 
 
z Mui, Mohtashemi, and Halberstadt computational  
在這個架構中他提出 Trust、Reputation 還有 Reciprocity 間的相互關係，以架構圖圖 ，
在這個 model 可以反映在網路交易上出如果賣家的聲望(Reputation)越高，那麼就會獲得其
他買家更高的信任度，有較高的信任度就會獲得較多的交易，因而獲得更多了利益。 
圖 5：Mui, Mohtashemi, and Halberstadt computational model 
根據 Trust Model 衍生出來還有 Recommendation System 和 Reputation System 的相關研究。
而其主要目的都是希望能夠透過推薦機制 (Recommendation System)或者聲望機制
(Reputation System)來提升可靠度。因此在這個系統中我們希望利用這樣的機制來協助達到
提供系統偵測軟、硬體元件的正確性。 
由於分散式系統的發展迅速，因此對可靠的分散式服務的需求也就越來越高。為了能夠
 
 
 
 
Trust Opinion 
interact statistical 
date 
  Agent 
Recommende Experiences 
Reputatio
Trust Reciproci Net 
7 
 
表一、Comparison of ubiquitous service discovery approaches 
 Approach Multicast/ Broadcast Protocol 
Complexity
Network Type Network Scale
SLP, Jini, UPnP Centralized Yes/No Low Fixed Small 
Salutation Protocol Centralized No/No Low Fixed Small 
[A.3.10] Distributed Yes/No Medium Mobile Medium 
[A.3.11] Distributed No/No Medium Mobile Medium 
[A.3.12] Distributed No/Yes High Mobile Large 
 
就我們所知，目前 ubiquitous service composition 的方法多以分散式為主。Basu et al. [66]
所提出的 Dynamic Task-based Anycasting (DTA)是一個適合 MANETs 的方法。在 DTA 中，
ubiquitous service 是利用 Task Graph (TG)來表示，並產生對應的 BFS 樹以降低複雜度。從
BFS 樹的根節點開始，用來執行父節點所代表之 system service 的裝置必須負責為其子節點
在網路上找尋適當的裝置直到所有 system services 都找到了對應的裝置。在找尋的過程中，
DTA 利用 greedy method 來保持區域最佳化。DTA 雖然是一個低負載且可行的方案，然而
因為是採用樹的結構來描述一個 ubiquitous service，因此所選出來的裝置可能無法滿足使用
者的服務品質要求。 
因此在 2006 年，Su et al. [67]提出了 Service-oriented Device Anycasting (SDA)來改善
DTA。首先，SDA 採用了一般的圖而不是樹來描述一個 ubiquitous service 以避免某些
interactions 被忽略而導致服務品質下降。第二，為了滿足各種不同的服務品質要求，SDA
採用了一個 adaptive service quality utility function 同時考慮許多影響 QoS 的因子。從實驗看
來，SDA 所選出來的裝置的確提升了服務執行時的品質。然而，SDA 的複雜度與附載都比
DTA 要來的高。 
然而，分散式的方法最大的問題最佳化只能針對個別的 ubiquitous service 而不是所有
的 ubiquitous services。這使得對於裝置資源與網路頻寬的使用上以及服務排程上並無法達
到全域的最佳化。因此，本計畫所提出的集中式方法可以有效解決資源管理與服務排程問
題。 
Context-aware 技術近年來甚受重視，但較多研究定位於網路架構設計和
context-awareness 方法設計，在 middleware 部分已逐漸崛起，下列參考文獻列出若干相關
研究。國際軟體大廠如 IBM、SUN、Microsoft 等亦已紛紛提出它們的解決方案。Microsoft
一方面利用.NET 開發 digital home solution，強調 total connectivity、personalized experiences、
ubiquitous access等特色，另一方面推動 easy living計劃採用 agent technology開發新的 digital 
home solution。 
Context-Aware 
Application 
9 
 
 
圖 6：Subscribe function 
 
為了讓程式開發者可以方便地開發新的 context-aware application 程式，首先我們必須
要設計一個可以用來感測外在環境資訊的 context-aware middleware，藉此來減少系統開發
者所會遭遇的問題。本計劃希望利用 Multi-Agent System(MAS)開發 Context-Aware 
Middleware[1][2]，這樣的系統架構擁有可擴充性與軟體元件的可再用性(reuse)之優點。圖 
為表現其系統架構圖。為了提供未來有更大的擴充性，我們將系統功能區分成九個軟體元
件：抽象化資料整合層(Abstract Wrapper Layer)元件、抽象化服務控制層(Abstract Controller 
Layer)元件、基本服務提供層(Service Provider Layer)元件、本體知識庫(Ontology Knowledge 
Base)元件、認證控制層(Admission Control Layer)元件、個人化代理人層(Personalized Agent 
Layer)元件、系統資源管理層(Resource Management Layer) 元件、情境模型層(Scenario 
Model Layer)元件、感測裝置層(Sensor Device Layer)元件，不同元件可以獨立開發，以下即
是對九個系統元件的說明： 
 
Location Wrapper 
Senso
r 
Context-Aggregati
on 
Communicati
on 
Communicati
on 
Get location 
Information 
Subscribe location 
information 
Sensor date arrives 
Callback if data 
matches 
11 
 
Context Reasoning 的動作，然後將資料填寫入本體論知識庫(Ontology Knowledge Base)中，
以便於其他 context-aware application 讀取所需的感測資料。 
z 抽象化服務控制層 (Abstract Controller Layer) 
將控制 Service Provider 的方式抽象化，系統與 Controller 之間的溝通依賴 Agent 
Communication Language (ACL)，當服務 context-aware application 被觸發執行時，將會依據
Scenario 定義的 Task List 來完成系統應該完成的工作。 
z 基本服務提供層 (Service Provider Layer) 
Service Provider 層元件為系統提供功能的最小元件，例如：語音合成、語音辨識、影
像物件追蹤等等。這個層級的元件主要功能有兩部分：(a)主動接收感測資料並將資料轉換
成有用的 Context 資訊，然後將資料存放在 Ontology Knowledge Base 中，(b)被動接受
Controller 的控制進行外在資料感測並將感測的資料回送給 Controller。 
z 本體論知識庫(Ontology Knowledge Base) 
主要用來存放使用者的相關資訊比如使用者的基本資料、位置、使用中的服務
(Scenario)，系統偵測到的環境相關資訊將用來更動或修改知識庫的內容，當系統情境
(Scenario)需要使用者的相關資訊與內容時，即可透過 Context Broker 取得相關的資訊；
Context Broker 提供 Context Query Engine 用來查詢相關使用者的 Context，以及 Context 
Aggregator 來整合感測裝置(Sensor Device)傳遞回來的環境資訊，因此本體論資料庫提供的
是高階的 Context 資訊。 
z 認證控制層 (Admission Control Layer) 
在這個層級中系統會依據系統認證機制去讀取 Context Broker 中的個人資料，然後利用
個人資料產生個人化的服務代理人，唯有經過認證的使用者才會被提供服務並由服務代理
人協助提供相關 Context-Aware Service。 
z 個人化服務代理人層 (Personalized Agent Layer) 
個人化服務代理人會根據個人的喜好根據本體論知識庫的內容產生 Scenario Agent 去
完成使用者所要求的情境目標(Scenario Goal)，一個 Scenario Agent 如同一個 Context-aware 
application 會根據應用程式本身的期望去產生計畫，然後依循計畫執行，期望能夠達到
context-aware application 預期完成的目標。 
z 系統資源管理層 (Resource Management Layer) 
系統資源管理層級主要是對系統進行資源管理，系統會依據目前系統資源的使用情
況，監看 context-aware application 想要使用的資源是否足夠讓 context-aware application 完
成預期達成目標，如果系統資源不足，將會拒絕該 context-aware application 執行。 
z 情境模型層 (Scenario Model Layer) 
情境模型層主要功用就是用來設計 context-aware application。設計完成的 context-aware 
application 必須要定義希望達到的情境目標，也就是執行後期望的環境狀態以及硬體的反應
的情境目標(Scenario Goal)，一個情境目標將會透過抽象化服務控制層(Abstract Controller 
Layer)將 Service Provider 的服務整合起來完成使用者所要求的情境目標。所以在系統中，
情境模型層中的 Agent 將依據情境目標定義的工作列表執行，期望能夠達到使用者預期的
情境目標。 
13 
 
底下為開發此 Context Simulator 可實現的特色： 
z 提供模擬正確性(Correctness) 
 正確記錄下模擬環境中 Agent 的傳輸資料，確定記錄下來的資料的正確無誤 
z 可靠性(Reliability) 
 讓模擬的環境更趨近真實部署的環境 
 模擬周遭環境狀態：利用系統看的懂得語法來描述周遭環境的狀態，每個
context-aware application 執行時，必須定義 context-aware application 對周遭
環境期望的結果，Context-Aware Middleware 將根據期待的結果幫
context-aware application 訂定執行計畫，期望 context-aware application 可
以正常執行。 
 模擬系統效能狀態：因為在單一系統下模擬 context-aware application 的運
作模式，所以必須要能夠模擬多個軟體分散於系統中的執行效能，利用這
樣的結果來得知是否多個 context-aware applications 可以同時一起執行，不
會因為資源不足導致 context-aware application 在真實環境下執行時無法正
常運作。 
 模擬系統佈署狀態：必須要用來模擬真實系統佈署狀態，包括硬體位置以
及軟硬體間的相互關係。 
z Usability 
 可以同時模擬多個 context-aware application 運作情況 
 可以偵測出 context -aware application 中 Agent 溝通協定上的錯誤 
 可以偵測出多個 context-aware applications 運作時系統資源的衝突 
 Context-aware application 在 Context Simulator 測試過後，不用做任何程式的修
改即可將程式佈署於真實環境之中。 
z Modularity 
 提供模組化的模擬器，程式開發者可以容易開發虛擬硬體元件 
z Traceability 
 當 context-aware application 發生問題，可以找出出現問題的關鍵元件 
z Measurement of Plan Quality Factors 
 提供評估 context-aware application 計畫好壞的衡量標準，作為重新歸劃執行計
畫的的準則，也可以用來衡量往後動態計畫產生器(Dynamic Plan Generator)的
好與壞。 
開發情境感知服務的過程會遇到三個問題，第一個問題是在情境感知服務執行流程
中，可能發生一些裝置(Device)損壞或服務元件(Component Service)當機的情況，導致執行
流程無法正常完成，這個問題會影響到整個情境感知服務流程的執行及系統的穩定，小則
可能導致流程不正常運作，大則甚至有智慧型家庭服務網路癱瘓的危機。為了解決上述問
題，系統上的情境感知服務執行過程需要被量化、模擬，甚至驗證，以確認任務可以正常
執行。研究中我們更動 Petri Net 的定義用來符合原先我們提出的系統架構，為了表示不同
的服務元件的 Quality 層級，我們在 Petri Net 內使用了 Quality 函式來取代原本的 Weight
 圖 9 利用 Petri Net 來呈現情境感知服務 
 
一個 Service Script 通常被用來描述一個 context-aware applications 要完成的一些任務以
及達成 User 的目標，從圖 9 的架構圖可以看出如何利用 Quality-driven Petri Net 來表示一個
Context-aware application。例如圖 10 說明了兩個 Context-aware application 使用同個 service 
component 的情況。 
 
圖 10.兩個 context-aware applications 使用同個 service component 
Quality-driven Petri Net 的可信賴度 
為了預防上述所提到的一些問題，我們定義了關於 Petri Net 包含可達性之行為特性的
可信賴度。因為 Quality-driven Petri Net 是以傳統 Petri Net 的理論為基礎，我們可以經由量
化關聯矩陣和狀態方程式來判斷最後標記是否可以達成。事實上，一個標記代表一個任務
集合的狀態，對於擁有 n 個 transitions 和 m 個任務的 Quality-driven Petri Net，初始化的移
項關聯矩陣 ' [T ij ]A a= 是一個 整數矩陣。 m n×
15 
 
    
3
1
1
1
2
1
1
1
2
4
5
6
t
t
t
qx
t
t
t
=
⎡ ⎤⎢ ⎥⎢ ⎥⎢ ⎥⎢ ⎥⎢ ⎥⎢ ⎥⎢ ⎥⎢ ⎥⎢ ⎥⎣ ⎦
 
在這個例子裡，因為計算向量 x 中有非負整數存在，所以最後標記是可以達到的。 
當流程被標準化後，系統就可以利用 Petri Net 的 Reachability 來驗證是否情境感知服務
可以如預期到達最終狀態，藉以驗證情境感知服務的可達性。 
Context Simulator 雖然能夠幫助我們解決 context-aware application 在程式初步測試的階
段，不要因為硬體出現問題導致程式開發者花太多的時間在處理硬體問題上。但
context-aware application 終究必須要建構至真實的硬體環境下才能呈現數位生活的夢想，
所以我們希望能夠在 Context-Aware Middleware 上提供偵測周遭軟、硬體元件是否能夠正常
的運作的功能，所以當環境中有某個硬體出現問題時，可以尋找相同功能的硬體來取代完
成整個 context-aware application 的目標。 
因為 Context-Aware Middleware 建構於分散式的 Multi-Agent System 平台上，因此當系
統要完成情境目標時，就必須透過 Agent 與 Agent 間的合作來完成整個 context-aware 
application 的目標，但分散於各個硬體間的軟體元件可靠性不高，因此我們希望能夠藉由信
賴模型、推薦機制和信用評等機制(Trust Model、Recommendation and Reputation System)的
方法來幫助我們尋找出系統中最可靠的軟體元件(Service Provider Agent)，然後利用這些軟
體元件規劃出執行情境的目標，藉此降低情境目標因為某些軟體元件無法正常運作導致目
標無法達成。 
 
4.3 Trust Model、Recommendation and Reputation System 
目前信賴模型、推薦機制以及信用評等機制(Trust Model & Reputation System)最常被使
用於電子商務(E-commerce)中用於買方、賣方信用度的衡量以及 Peer-to-Peer Network 中用
於判斷服務提供者的可靠度上。主要原因不外乎下例特性：(1)系統元件不受中央統一管理
(2)系統元件無法確保一定能夠正常運作，系統元件可能隨時加入或者離開整個系統，整個
系統的狀態一直在改變(3)系統元件的執行效能無法被評估。 
底下為本系統之研究方法： 
整個 context-aware application 執行時，將由個人化服務代理人(Personal Agent)讀取本體
知識庫(Ontology Knowledge Base)去判斷環境狀態，當觸發 context-aware application 的條件
成立時便產生 Scenario Agent。此時，Scenario Agent 會根據完成這個 context-aware application
目標的計畫去執行所必須完成的工作列表(Task list)，藉由利用 Controller Agents控制 Service 
Provider 去完成情境目標(Scenario Goal)。但由於 Service Provider 的不確定性，例如：網路
頻寬不夠、硬體設備損壞等…導致 Controller Agent 沒有辦法控制 Service Provider 去完成情
17 
 
 
 
2. Freshness 代表 sensor 提供 context information 的新舊程度 
 
 
3. Resolution 代表 Sensor 在辨識正確率 100%的前提下 ,其能夠來區分兩者 context 
information 的程度。\ 
 
 
context information 的最小差距、
 
Quality Property 主要包含三個部分：Availability、Reliability、Spatial adaptability。 
1. Availability 用來表示 Actuator 可用資源多寡，Availability 的值越高代表代表當下要求
Actuator 越能夠得到 Actuator 的服務，用來衡量短時間 Actuator 的 Quality 衡量標準 
 
 
 
 
2. Reliability 用來表示 Actuator 執行的可信度，Reliability 的值越高代表任何時間要求
Actuator 越能夠得到 Actuator 的服務，用來衡量長時間 Actuator 的 Quality 衡量標準 
 
：Recovery time from failure 
MTBF：Mean time between failures 
3. Spatial adaptability 用來表示考量使用者的位置資訊，Actuators 的適合程度 
 
、  使用者的位置、 的位置、
徵 
在此，我們利用函數模型來表現情境資訊提供者的特徵，並且利用這些特徵來衡量情境資
訊提供者提供服務的優劣。 
在本系統中，我們利用函數模型來表現情境資訊提供者的特徵，並且利用這些特徵來
19 
 
薦值。情境資訊管理機制所產生的推薦值可分為評估感測器所提供的情境資訊的信賴值
(Trustworthiness)；以及評估執行器執行服務的品質(Quality)。 
 
圖 13.情境資訊管理機制元件 
 
z 情境資訊管理機制的流程 
情境資訊管理機制主要有三個步驟，如圖 14 所示。步驟 1，將經由情境資訊轉譯元件
轉換的情境資訊根據硬體的能力分成感測器的情境資訊以及執行器的情境資訊兩部分。步
驟 2，分別將感測器及執行器的情境資訊轉換成有用的情境資訊特徵(Property)。步驟 3，根
據情境感知應用程式的需求來聚集情境資訊特徵並產生對感測器所提供的情境資訊的信賴
值以及對執行器執行服務的品質。 
 
21 
 
z 情境特徵衡量元件(Property Evaluation) 
情境資訊特徵(Property)的目的是去定義感測器與執行器情境資訊的重要參數。在CMM
中，情境資訊特徵是去推論感測器的情境資訊的信賴值以及執行器提供服務的品質。每一
個情境資訊特徵被賦予一個效能函數(Utility Function)來表示底層資訊與情境資訊特徵的關
聯。 
(1) 感測器的情境資訊特徵： 
我們將感測器的情境資訊特徵定義為準確率(Accuracy)、即時性(Freshness)、分辨率
(Resolution)。 
準確率代表感測器提供的環境資訊與真實環境資訊的吻合程度。例如，一個定位系統使
用無線訊號來偵測 PDA 的位置，該定位系統的準確率即代表其定位結果與 PDA 真實位置
在某一可接受的誤差範圍(Error Range)內的正確率。如圖 16 所示，圓圈代表在可接受誤差
範圍內其定位的結果。反之，叉叉代表在可接受誤差範圍外的定位結果。 
 
圖 16.可忍受的誤差範圍 
 
 由於環境資訊的準確率會隨著時間變化而改變，所以我們很難去定義影響準確率的重
要參數。為了解決上述問題，我們應用了推薦系統(Recommendation System)的想法在計算
準確率上。首先，我們會設置一個參考點讓感測器定期地去偵測，該參考點被當作是一個
事前就被得知所在資訊的信賴推薦者(Trusted Recommender)。我們假設在適當的時間裡誤
差範圍的變化是穩定的，那麼在這段時間內所收集的情境資訊可被用來推論情境資訊的準
確率。例如，一個 RFID 定位系統透過接收器(Reader)的無線訊號來偵測主動式標籤(Active 
Tag)的位置。我們放置一個已經事先知道位置的主動式標籤來被定位系統偵測，那麼誤差
範圍就是定位系統偵測到的位置與該主動式標籤的真實位置的誤差距離。在 CMM 中，情
境感知應用程式可接受的誤差範圍被稱為可忍受的誤差範圍(the Tolerance-Band)。而誤差範
圍和準確率之間的關係又能以常態分布(Normal Distribution)來描述。因此，我們藉由常態
分布的曲線輸入一個誤差範圍就可求得在此誤差範圍內的準確率。例如圖 17，一個 RFID
23 
 
步驟 1.蒐集一定數量的情境資訊並計算平均值與標準差。 
 (2) 
 (3) 
N 表示情境資訊的數量。 
步驟 2.利用求得的平均值與標準差來建構一個常態分布。 
 (4) 
步驟 3.將實際收到的情境資訊轉換成機率分布 。 
步驟 4.計算常態分布與實際情境資訊的機率分布的關聯性。 
 (5) 
步驟 5.若兩者分布的關聯性不再劇烈動盪變化，則結束流程，否則重複步驟 1 至步驟 5。
圖 19 表示常態分布與機率分布之間的關聯性。 
 (6) 
 
圖 19.常態分布與機率分布的關聯性 
 
 透過上述常態分布的建構流程，我們可以求得最小 n 值來求得準確率。此 n 值可代表
該系統呈穩態時至少所需要蒐集的資料量，本文稱之為穩態變數(Stable Parameter)。 
 即時性是代表接收到的情境資訊的新舊程度。一些情境感知應用程式對情境資訊的即
時性是很在意的，例如使用者的位置資訊必須時常更新以確保提供給使用者的服務能正確
無誤。為了達此目的，我們定義即時性的公式如下: 
 (7) 
 t 表示接收此情境資訊的時間戳記， 表示情境感知應用程式對時間的限制。 
 分辨率是代表情境資訊的一個精確值。例如，一個感測器能提供較高的分辨率，即表
示該感測器有較高的能力去分辨兩個不同的情境資訊。也就是說，一個定位系統的分辨率
25 
 
 
圖 20.點音源隨距離衰減示意圖 
 
可執行性代表在短期內執行器是否擁有足夠的資源可以滿足情境感知應用程式的需
求。所以我們定義可執行性的公式如下: 
(11) 
  代表情境感知應用程式要求的執行氣型態， 是型態為 i 的某個執行器， 是情境感
知應用程式要求的資源限制， 是執行器剩下的資源。 
 可靠性代表在長期時間下執行器是否能回應情境感知應用程式的要求。 
(12) 
 RT 是當錯誤發生時的回復時間，MTBF 是正常運作的平均時間。 
z 情境資訊特徵限制(Property Constraint) 
在 CMM 中，每一個情境感知應用程式都必須提供對情境資訊特徵的限制。主要分別
針對感測器的情境資訊特徵以及執行器的情境資訊特徵兩類別的限制條件。 
感測器的情境資訊特徵限制包含三種條件限制: 。其中， 表示對準確率的限
制， 是對可忍受誤差範圍的限制， 是對時間週期的限制。 
執行器的情境資訊特徵限制包含兩種條件限制: 。 是代表情境感知應用程式對
執行器型態的要求， 是代表情境感知應用程式對資源的要求。 
z 推薦值的衡量元件(Recommendation Evaluation) 
推薦值衡量元件是負責去聚集感測器的情境資訊特徵並賦予感測器提供的情境資訊一
個信賴值(Trust)。同樣的，也會去聚集執行器的情境資訊特徵並賦予執行器一個執行服務
的品質(Quality)。我們利用權重值的概念去強調情境資訊特徵對於推薦值的重要性。 
在 CMM 中，每一個情境感知應用程式必須提供對情境資訊特徵的權重值。因此，推薦
值衡量元件會根據這些權重值來計算感測器提供的情境資訊信賴值或執行器提供服務的品
質。 
情境感知應用程式對感測器的情境資訊特徵的權重值為 。 表示準確率的
權重， 表示即時性的權重， 表示分辨率的權重。根據這些權重所計算出來的信賴值
為: 
 (13) 
情境感知應用程式對執行器的情境資訊特徵的權重值為 。 表示空間適應
27 
 
Action 
List 
Proposition List Action 
List 
Proposition List 
Level k-1 Level k 
A5 
A1 
P1 
29 
 
 
圖 22：Planning as Constraint Satisfaction 架構圖 
 
用於計畫的架構可以用下列函示表示 
0 :
i i
Agentπ 表示 目前偵測的使用者系統狀態  
n
i : iAgentπ 表示 期望執行後使用者的系統狀態  
1:   : Pri iiSP Service oviderπ π− ⎯⎯→ 表示  執行後的結果  
   : G  Gi iP Scenario Agent對於情境目標 ， 的計畫結果  
   1 ...0 1: SPG ni i iP iπ π π⎯⎯→ ⎯⎯→  
把高階型態規劃計畫直接交給 Scenario Agent 的去執行仍然有很長一段路要去執行，通
常目前常見都是將高階型態規劃計畫利用階層式的分解(Hierarchical Decomposition)的觀
念，將一個高階型態規劃計畫分解成多個執行步驟，然後再將這分解後的低階步驟移交給
Scenario Agent 去執行。實際情況中，Scenario Agent 必須要處理不完整與不正確的資訊，
比如：Scenario Agent 必須要處理不完整資訊導致無法推論出一個可行的計畫或者不正確的
資訊導致計畫執行不如預期。目前最常見的解決方式有下兩列兩種：(1)條件規劃：利用建
構條件式的計畫來負責處理每一種可能的情況或者偶發事件(2)監控執行結果：隨時監控計
畫執行每一個行動(Action)後的結果，藉由監控計畫執行的每一個步驟來做計畫的重新規
劃。 
為了可以達到讓 Scenario Agent 可以根據外在資訊做正確的計畫，我們將延續我們在
A6 
G1 
P2 
A7 
A2 
G2 
P3 
A8 
P4 
A9 
A3 
G3 
A10 
31 
 
– 將使用者之服務需求、環境資源狀態、以及傳輸網路狀態等問題以 MMKP 模式呈現，
並以 MMKP 解決模式找出最佳解決問題之群組。 
4. 圖形化的 ubiquitous service 產生器 
– 可以利用 GUI 的方式來描述一個複雜的 ubiquitous service，包含需要的 system service、
interaction、input、output、與 QoS 需求等。讓服務開發或甚至是使用者可以更快速且
更有彈性的開發新的服務。 
此動態計劃產生器主要功能是達到 ubiquitous service 自動化，讓使用者能夠在任何時
間、任何地點存取 ubiquitous services[55][56][57]。通常，一個複雜的 ubiquitous service 是
藉由分散式地執行多個較小且簡單的 system services 並透過這些 system services 之間的
interactions 來完成的[58]。為了在 CUE 中實現一個使用者所要求的 ubiquitous service，一組
適當的裝置必須被選出來執行所有 system services 並且藉由裝置之間的網路連線來完成
system services 之間的 interactions。 
為了更清楚地說明此動態計劃產生器的功能，我們以一個 ubiquitous service 的範例來
進行說明。如圖 24 所示，一個用來播放符合使用者心情的音樂的 ubiquitous service 可以由
四個 system services 以及三個 interactions 來完成，其執行步驟說明如下： 
 
Step 1: “Facial expression acquisition”系統服務在”camera”裝置上執行以擷取使用者的表
情。 
Step 2: “Emotion recognition”系統服務在“emotion recognition system”裝置上執行並根據在 
Step 1 中”camera”裝置所得到的使用者表情來判斷使用者的情緒。 
Step 3: “Music selection”系統服務在“music center”裝置上執行並根據在  Step 2 中” 
emotion recognition system”裝置所得到的使用者情緒來選擇適合的音樂。 
Step4:   “Music execution”系統服務在“music player”裝置上執行並撥放在 Step 3中“music 
center”裝置所選出來的音樂。 
為了完成上述情境，此動態計劃產生器包含了兩個模型： 
Service Profile 模型：描述 ubiquitous service 的結構、特性、及需求。 
Ubiquitous Network 模型：描述 ubiquitous network 的網路拓樸與狀態。 
以及兩個機制 
Service Discovery 機制：找尋適當的裝置並定期更新裝置與網路狀態。 
Service Composition 機制：選擇適當的裝置來執行被要求的 ubiquitous services。 
 
is1 is2
is3
is4
it1
it2
it3
 
圖 25、 An example of Service Profile (SP). 
另外，由於 ubiquitous service 可以提供許多種不同的服務品質等級來滿足不同的使用
者，SP 也必須定義不同服務品質等級所需要的資源與頻寬以選擇一組適當的裝置來滿足使
用者對於 ubiquitous service 所提出的品質要求[59]。可以下列兩個資料結構來描述一個
ubiquitous service 在不同服務品質等級對於資源與頻寬的要求： 
z Demanded Resource Estimate (DRE). 定義在每一個服務品質等級下完成 ubiquitous 
service 對於執行每一個 system service 的裝置的資源要求。可以一個 -by- -by- 的矩陣
來描述，其中 、 、與 是此 ubiquitous service 提供的服務品質等級個數、包含的 system 
service 個數、以及資源型態的個數。 
iq iv m
iq iv m
z Demanded Bandwidth Estimate (DBE). 定義在每一個服務品質等級下完成 ubiquitous 
service 對於執行每一個 interaction 的網路路徑的頻寬要求。可以一個 -by- 的矩陣來描
述，其中 與 是此 ubiquitous service 提供的服務品質等級個數與包含的 interaction 個。 
iq ie
iq ie
 
Ubiquitous Network 模型 
為了能夠提供資源使用率以及高品質的服務給使用者，我們也必須蒐集最新的網路狀
態。因此，需要一個 Ubiquitous Network (UN)模型來描述網路拓樸、裝置支援的 system 
services 與所剩資源、以及網連結所剩頻寬。相同地，利用 vertex 和 edge 來代表裝置與裝
置之間的網路連結。可以下列兩個資料結構來描述裝置的所剩資源與網路連結所剩頻寬： 
z Available Resource Estimate (ARE). 定義一個裝置所剩餘的資源。可以一個長度為
的陣列來描述，其中 是資源型態的個數。 
m
m
z Available Bandwidth Estimate (ABE). 定義一個網路連結所剩餘的頻寬。可以一個簡單
的數值來描述。 
 
Ubiquitous Service Discovery 
Ubiquitous service discovery 是找尋適當裝置以執行服務的機制。如圖 26 所示，此機制
必須收集網路元件 (包含各式各樣的裝置以及網路連結 )的狀態。Ubiquitous Service 
Discovery 機制必須整合底層的資訊擷取技術以獲得最新的網路狀態。本計畫整合多種底層
33 
 
35 
 
五、 結果與討論 
 
本計劃已具體實現環境感知數位生活服務之可信賴多代理人中介軟體發展環境，並已
發展出相關的演算法與中介層環境，並以此尋求技術轉移或產學合作的可能性。 
在這兩年的計畫裡，發展 Context Simulator 做有系統的測試整個系統的元件以提升穩
定性與效率，並提出 trust model 在 middleware 上提升 context-aware 的準確性。還有解決了
加速 ubiquitous context-aware services 的開發和測試並確保及其有效度，以及如何提昇
ubiquitous context-aware services 在 run-time 時的可信賴度之問題。最後藉由以上所發展之
技術提供 context-aware application 一個可靠的執行環境。 
 
以下為本計劃兩年執行期間完成的詳細工作項目： 
第一年：(建立發展單一 context-aware application 的發展、測試平台) 
1. Context-Aware Middleware 
z 規劃 Context-Aware Middleware 修正元件 
z 建構抽象化資料整合層 
z 建構抽象化服務控制層 
z 規劃 context-aware application 發展流程 
z 依據發展流程撰寫 context-aware application 
z 測試 context-aware application 確定可以正常執行 
2. Context Simulator 
z 收集模擬的硬體與環境相關資訊 
z 設計模擬環境與硬體的參數模型 
z 模擬 Sensor Device Layer 的運作狀態 
z 模擬 Sensor Device 對環境影響 
z 規劃 Context Simulator 與 Context Middleware 整合流程 
z 撰寫與 Context-Aware Middleware 溝通的介面 
z 整合 Context-Simulator 與 Context-Aware Middleware 
3. 信賴模型、推薦與信用評等機制 
z 研究信賴、推薦與信用平等機制相關研究優缺點 
z 實做目前常見的發展信賴、推薦與信用平等機制的演算法 
z 整合發展信賴、推薦與信用平等機制的演算法與 Context-Aware Middleware 
z 測試在這個演算法中 context-aware application 執行成功率 
4. 動態計畫產生器 
z 設計對環境狀態的描述語言，必須整合 Context Simulator（模擬環境使用） 
z 利用描述語言來描述 context-aware application 的目標 
z 利用 Context-Aware Middleware 取得的資訊，協助 context-aware application 動態產生
計畫 
第二年：(建立發展多個 Context-aware application 的發展、測試平台) 
37 
 
[2]. Context-Aware Middleware for Pervasive and Ad Hoc Environments 
[3]. http://www.cs.hku.hk/~clwang/projects/nsfc2005.htm 
[4]. http://www.cs.uoregon.edu/~jprideau/CAT/index.html 
Agent-Oriented Software Engineering  
[5]. N.R. Jennings, “On Agent-Based Software Engineering”, Artificial Intelligence, 
117:227-296, 2000. 
[6]. N. R. Jennings, P. Faratin, T. J. Norman, P. O'Brien, B. Odgers, “Autonomous Agents for 
Business Process Management”, Int. Journal of Applied AI, Vol. 14 (2), pp. 145-189, 2000. 
[7]. M. J. Wooldridge and N. R. Jennings, "Software Engineering with Agents: Pitfalls and 
Pratfalls", IEEE Internet Computing, Vol.3, No. 3, May-June 1999. 
[8]. N. R. Jennings and M. Wooldridge, "Agent-Oriented Software Engineering", Handbook of 
Agent Technology (ed. J. Bradshaw) AAAI/MIT Press, 2000.  
[9]. N. R.  Jennings, K. Sycara and M. J. Wooldridge, "A Roadmap of Agent Research and 
Development", Jour. of Autonomous Agents and Multi-Agent Systems Vol.1, No .1, pp.7-38, 
1998. 
[10]. C. Iglesias, M. Garijo, J. C. Gonzales, “A Survey of Agent-oriented Methodologies”, 
Intelligent Agents V, LNAI No. 1555, 1999. 
[11]. M. Wooldridge, P. Ciancarini, “Agent-Oriented Software Engineering”, in Agent-Oriented 
Software Engineering, LNCS No. 1957, 2001.  
[12]. O. Shehory and A. Sturm, “Evaluation of Modeling Techniques for Agent-Based Systems”, 
Proceedings of The Fifth International Conference on Autonomous Agents, pp. 624-631, 
2001. 
[13]. L. Cernuzzi, G. Rossi, "On the Evaluation of Agent Oriented Methodologies", in Proc. of the 
OOPSLA 2002 Workshop on Agent-Oriented Methodologies, November 2002. 
[14]. E. Yu, L.M. Cysneiros,  "Agent-Oriented Methodologies – Towards A Challenge 
Exemplar", 4th Intl. Workshop on Agent-Oriented Information Systems (AOIS’02), May 
2002.  
[15]. Q. N. Tran, G. Low, M. A. Williams, Software Engineering Methodology for Developing 
Multi-Agent Systems - A Survey, 
http://129.94.244.146/personal/numi+tran/surveyq.nsf/survey, 2003.  
[16]. K. H. Dam, M. Winikoff, Survey on Agent-Oriented Methodologies, 
http://yallara.cs.rmit.edu.au/~kdam/Questionnaire/Questionnaire.html, 2002.  
[17]. M. Wooldridge, N. Jennings, D. Kinny,”The Gaia Methodology for Agent-Oriented 
Analysis and Design”, Journal of Autonomous Agents and Multi-agent Systems, 3(3), 2000. 
[18]. F. Zambonelli, N. Jennings, M. Wooldridge, “Organizational Rules as an Abstraction for the 
Analysis and Design of Multiagent Systems”, Journal of Software and Knowledge 
Engineering, 11(3), 2001. 
39 
 
[34]. Finding others online: reputation systems for social online spaces, Proceedings of the 
SIGCHI conference on Human factors in computing systems: Changing our world, changing 
ourselves, 2002, Pages: 447 - 454     
[35]. J. Pujol and R. Sanguesa and J. Delgado, Extracting reputation in multi-agent systems by 
means of social network topology, In Proceedings of First International Joint pages 467--474, 
2002 
[36]. J. Sabater and C. Sierra,Reputation and social network analysis in multi-agent systems, 
Proceedings of the first international joint conference on Autonomous agents and multiagent 
systems: P475 – 482,2002 
[37]. Trust evaluation through relationship analysis, Proceedings of the fourth international joint 
conference on Autonomous agents and multiagent systems, P1005–1011, 2005  
[38]. Trust and Reputation model in peer-to-peer networks, www.cs.usask.ca/grads/ 
yaw181/publications/120_wang_y.pdf  
[39]. S. D. Kamvar, M. T. Schlosser, and H. Garcia-Molina. The Eigen Trust algorithm for 
reputation management in p2p networks. In Proceedings of the Twelfth International World 
Wide Web Conference, 2003. 
[40]. Goecks, J. and Mynatt E.D. (2002). Enabling privacy management in ubiquitous computing 
environments through trust and reputation systems. Workshop on Privacy in Digital 
Environments: Empowering Users. Proceedings of CSCW 2002 
[41]. G.L. Rein, Reputation Information Systems: A Reference Model, Proceedings of the 38th 
Hawaii International Conference on System Sciences – 2005 
[42]. Lars Rasmusson and Sverker Jansson,“Simulated social control. for secure internet 
commerce,”in New Security Paradigms ’96. September 1996 
[43]. S. Marti, H. Garcial-Molina, Limited Reputation Sharing in P2P Systems, ACM Conference 
on Electronic Commerce (EC'04) 
[44]. Lik Mui, Computational Models of Trust and Reputation: Agents, Evolutionary Games, and 
Social Networks, Ph. D Dissertation, Massachusetts Institute of Technology 
[45]. J Carbo, JM Molina, J Davila, “A BDI agent architecture for reasoning about reputation”, in 
Proceedings of the IEEE International Conference on Systems, Man, and Cybernetics, vol. 2, 
2001, pp. 817-822. 
[46]. Maria Chantzara, Miltiades Anagnostou, Efstathios Sykas, “Designing a quality-aware 
discovery mechanism for acquiring context information”, in Proceedings of the 20th 
International Conference on Advanced Information Networking and Applications, AINA 
2006, vol. 1, 2006, pp. 6. 
[47]. SD Kamvar, MT Schlosser, H Garcia-Molina, “The Eigentrust algorithm for reputation 
management in P2P networks”, in Proceedings of the 12th international conference on 
World Wide Web, May 20-24, 2003, Budapest, Hungary. 
41 
 
[62]. J. Verzades, E. Guttman, C. Perkins, and S. Kaplan, “Service Location Protocol, Version 2”, 
IETF RFC 2608, 1999. 
[63]. B. Joy and W. K. Edwards, “Core Jini”, Prentice Hall, 2000. 
[64]. C. Lee, A. Helal, N. Desai, V. Verma, and B. Arslan, “Konark: A System and Protocols for 
Device Independent, Peer-to-Peer Discovery and Delivery of Mobile Services”, IEEE Trans. 
on Sys., Man, and Cybernetics, 33(6), pp. 682-696, 2003. 
[65]. U. C. Kozat and L. Tassiulas, “Network Layer Support for Service Discovery in Mobile Ad 
Hoc Networks”, in Proc. of IEEE INFOCOM, 22(1), pp. 1965-1975, 2003. 
[66]. P. Basu, W. Ke, and T. D. C. Little, “Dynamic Task-Based Anycasting in Mobile Ad Hoc 
Networks”, Mobile Networks and Applications, 8(5), pp. 593-612, 2003. 
[67]. C.-C. Su, K.-S. Lu, M.-F. Horng, C.-L. Chen, Y.-H. Kuo, J.-P. Hsu, and W.-H. C, 
“Service-oriented Device Anycasting using Quality First Search in Wireless Personal Area 
Network”, in Proc. of 2006 IFIP Int. Conf. on Embedded and Ubiquitous Computing, pp. 
620-629, 2006. 
 
七、 計畫成果自評 
本計畫的研究成果包括： 
 
Context-Aware Middleware 
我們規劃了 Context-Aware Middleware 的修正元件，並且建構出抽象化資料整合層和抽
象化服務控制層，用此來完成一個能夠容易存取感測資料及建立硬體抽象感測元件的模組
化 Context-Aware Middleware。讓多個 context-aware applications 能夠共享感測資料，還有
程式開發者能更加容易地新增系統元件或 context-aware application，也能讓多個程式開發者
同時獨立開發 context-aware application。 
 
Context Simulator 
我們研發出一個 Context Simulator，此 Simulator 擁有能夠模擬使用者的生活環境狀態、
軟體元件對周遭環境的影響、硬體抽象感測元件分佈的情況和周遭環境受到 agent 影響，環
境狀態的改變，並且紀錄 agent 與 agent 之間的溝通訊息的功能。讓使用者可以用來測試依
據 context-aware middleware 撰寫的 context-aware application 以及不同的 context-aware 
applications 間的相容性。 
 
信賴模型、推薦與信用評等機制 
我們研究了目前常見的發展信賴、推薦與信用評等機制相關研究之優缺點，並且實做
他們的演算法，然後將信賴、推薦與信用評等機制的演算法與 Context-Aware Middleware
做整合發展，最後提供整合後的機制來判斷軟體元件和硬體元件的可靠度，藉此提高
