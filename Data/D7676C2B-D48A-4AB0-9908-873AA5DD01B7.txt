- 2 -
（二）中英文摘要及關鍵詞
1. 中文摘要
為了增強軟體的強健度，找出軟體的錯誤行為一直是軟體工程領域裡
面一個相當重要的課題。過去已有許多靜態或動態程式分析的技術被提出
來應用在這方面的研究上，然而在使用上我們必須在靜態分析的不真確性
和動態分析的不完整的測試之間取得平衡。本論文中，我們結合了靜態分
析的完整性和動態分析的真確性。我們實做了一個測試平台，此平台在執
行程式的過程中可以同時蒐集目前執行路徑的條件限制。我們的測試平台
可以被用來檢測一個由靜態分析工具回報的程式狀態，此程式狀態所隱含
的臭蟲，是否可能在真實世界發生。此平台會自動地嘗試產生一組測試資
料來觸發目標的程式狀態。
關鍵詞：錯誤追尋、隨機測試、測試案例產生、符號執行、限制式解法
2. Abstract and keywords
Locating software bugs is an important topic in software engineering for
enhancing software robustness. Research topics in these areas with static analysis or
dynamic analysis have been proposed. Choosing these two different analyses is the
tradeoff between false positive and unsound testing. In our work, we combine
completeness of static analysis and soundness of dynamic analysis. We implement a
testing framework which runs a program and collects constraints along with its
execution path. Our testing framework can be used to check whether a program state
with potential bug reported by a static analysis tool is feasible in real world or not.
The testing automatically tries to find a test case which can trigger the target program
state.
Keywords
Fault Localization, Random Testing, Test Case Generation, Symbolic Execution,
Constraint Solving
- 4 -
passed parameter violates the precondition. In the case of malloc(), we can check
whether the parameter of malloc() can be zero or a negative value. If we can check the
feasibility of these program states, the reliability or security of the program will be
improved.
1.2 Objective
Once a security problem is modeled as a property state, the feasibility of that
state can be checked by software testing technique. We implement a target directed
random testing framework which combines symbolic execution and concrete run
similar to DART. In addition, we introduce CFG information to avoid the testing take
execution paths which is not reachable to the target state. It can let the testing find a
test case triggering the target state faster if there is such a test case.
However, there are often too many execution paths to enumerate from program
entry point to target state. So we add several restrictions about the control paths
between entry point and target state. In other words, our testing framework checks the
feasibility of an incomplete execution path. This path contains a sequence of branch
decisions. Our implementation then checks whether the specified decisions can be
feasible in real world.
In our work, such an incomplete execution path is produced by CQual[7], a type
based analysis tool. It can generate a data flow from input parameter to one statement
with a potential security problem. The data flow can be easily transformed to an
incomplete execution path. The detail will be described in Sec 4.
1.3 Example
Here we give an example demonstrating how our testing framework improves
directed random testing to let the path searching more effectively:
- 6 -
such like line 20, which is unreachable to the target location, it will generate next test
case to take another branch right away. In this example, the next test case will execute
the statement in line 17. So our testing framework can avoid exploring the execution
paths which is unreachable to our target state.
- 8 -
it needs user to provide test cases.
2.3 Concolic Execution
DART[2] combine concrete run and symbolic execution. It can collect the
program constraints in runtime and solve it to get the test cast for next run. CUTE[3]
is the follow-up work of DART. It can handle pointer operations, and get
approximated pointer constraints.
EGT[4] and its following work EXE[5, 6] is similar to CUTE, but it uses
bit-vector constraint solver. So EXE can detect the behavior of arithmetic overflow or
treat the same memory block in different type viewing. In additional, EXE is made up
with CRED[10] framework. So it can provide full pointer constraints rather than
approximation.
2.4 Model Checking
Similar to our work, given a model (a finite state machine), model checker
checks whether this model satisfies a specified property. The checker systematically
explores state space, and tries to find a counter-example which violates the
specification. For software model checking, the model is based on CFG (Control Flow
Graph). And some property checking can be reduced to program state reachability
problem. However, the reachability problem is un-decidable because of state
explosion. The most detail model for software includes the memory configuration.
Obviously such a model will have state explosion problem.
Many researches of this area use abstraction to reduce the explosion number of
states. Given an abstraction function, the concrete states will be grouped and mapped
- 10 -
3. Concolic Execution Implementation
In this section, we describe our implementation of concolic execution testing
framework in detail. “Concolic execution”mixes concrete run and symbolic
execution. Similar to DART, a program performs symbolic execution in run time, so
symbolic execution can easily obtain all run time information. Symbolic execution is
used to convert a concrete run to a constraint system. After a concrete run is finished,
the testing framework modifies the constraint system to represent another execution
path which we want to cover in the next testing. Finally our testing framework will
query the theorem prover with the resultant constraint system to get a test case for
next run.
3.1 Testing Framework Overview
Our testing framework contains three components: CIL[15] (instrumentation
tool), symbolic execution library, and CVCL[16] (decision procedure). Before testing,
we use CIL to transform a program to a relatively simplifier form, and instrument
some codes for symbolic execution. The instrumented codes are symbolic execution
library calls. In addition to instrumentation, we also use CIL to compute CFG (control
flow graph) information for path searching. Symbolic execution library collects the
symbolic constraints during run time. It uses a store to record accumulated symbolic
constraints, and also communicates with CVCL. CVCL is an automatically validity
checker for first-order logic. It can check the validity of a given logic context. In our
implementation, CVCL is used to be queried whether a given constraint system which
represent an execution path has any solution satisfying it or not. If there is a solution,
then we get the next test case.
- 12 -
additional path let the testing not only try to find an execution path to the target
location, but also check whether the variable can satisfy specified constraints.
After CIL preprocessing, we compile and link the instrumented program with our
symbolic execution library and CVCL. The objective program is a “self-testing”
program. In other words, it is both a tester and testee. It does symbolic execution and
generates next test case by itself. As Figure 3 shows:
Figure 3: Tested program links with symbolic execution and CVCL library
After instrumentation, the user must supply some additional codes which are
used as testing driver for initializing the testing and calling the entry function. After
compiling the preprocessed code, it then links with symbolic execution library and
- 14 -
user must manually add a testing driver which loads test case from a file to its inputs,
and call the entry testing function. The whole preprocessing is showed in Figure 4:
Figure 4: Preprocessing by CIL
After simplifying in the first phase, the simplified program can easily perform
instrumentation. The simplified program has no complex grammar of C, it has a
relatively simple form. In C each statement can have many writing style or syntax.
CIL can transform each kind of C statement to its unique syntax. So the
instrumentation can just consider limited cases to decide what code should be added
on some location. On the other hand, we can also easily design our symbolic
execution library API, because every statement will be transformed to a unique form,
and the API applied on each statement can just serve for that special form.
The simplified program has the following property:
1. All control statements, like if-statement and switch, are transformed to if-else form.
2. All predicates in if-statement are transformed to a binary relation with atomic
variables.
3. All loop statements are transformed to while(1), if, and goto statements.
4. Reduce all complex program expression to three address form.
Following is an example which demonstrates how we use CIL to do above
mentioned simplification:
- 16 -
while-loop by using if and goto statement. Next, CIL transforms the if-statement with
else-if block in line 7 to a form which is without else-if block. We can observe that the
simplified code have the same control flow and semantic with the source code.
3.3 Symbolic Execution
When program executes, it has such as variables and program counter to
represent current execution state. However, symbolic execution can be seen as
stateless execution. In symbolic execution, each executed statement and instruction
will be transformed to a symbolic logical formula. After the symbolic execution
finished, these symbolic logic formulas will be combined to a conjunction. The
conjunction can be seen as the constraint of this execution path.
We call the conjunction C a symbolic constraint system. In C, each expression e
is built from variables, constants, and function symbols. The function symbols
include plus, minus, multiply, etc. For example,“a+3”is an expression. Each atomic
formula f is built from expressions and relation symbols. The relation symbols
include equal, less than, larger than, etc. For example, “a+3<b”is an atomic
formula .Finally each predicates p are composed of atomic formulas using negation,
conjunction, and disjunction. For example, “a+3<b ∧ b=10“is a predicate.
Composed of predicates, C is a predicate built by conjunction.
For a program P, we must have a mapping from its code to symbolic constraints
in order to transform an execution path to a symbolic constraint system C. When the
program P executes a statement, it will use this mapping to transform the current
statement to a predicate in C. Symbolic execution can be seen as a process to
transform an execution path to a symbolic constraint system C.
For if-statement, let p be the predicate of its conditional expression. After
simplification, the if-statement will exactly include two blocks: then-block and
- 18 -
procedure. Just like the effect of assignment, when doing inter-procedure symbolic
execution we must rename the variable in symbolic constraint system. Consider a
procedure proc, the variables defined in this procedure is referred as local variables.
If the name of a local variable in proc1 is the same with a local variable in proc2, we
must make these two the local variable names different in constraint system C. In
principle, we must let each local variable name in each call frame be unique. The
detail of inter-procedure symbolic execution can be referred to Sec 3.4.
An execution path can be seen as a sequence of if-statements, each with a
sequence of instructions. It can be transformed to a conjunction of predicates by
symbolic execution, where each predicates is corresponding to each if-statement or
instruction along this execution path.
3.4 Combination of symbolic execution and concrete run
In this section, we describe the detail of how the testing program performs
symbolic execution during runtime. And we will describe how the symbolic
execution library collects symbolic constraints for each kind of statements in C
programming language.
3.4.1 Concolic Execution
While testing program is invoked, its execution will pass through four phases as
described in Sec 3.1. The testing program initially loads the test case from the
“Input”file. This file specifies all input data the testing program reads. The order of
each data in the input file is the same as the order of these data been accessed in the
testing program. If the testing program is invoked in first time, the input file is empty
and the testing program will generate random value for each input data. Otherwise,
the input file will contains input values which are determined by last invocation of
- 20 -
searching which will be described in Sec 4. Figure 8 is the algorithm of doing
symbolic execution in symbolicExec() and addPredicate() is similar to it.
Figure 8: Algorithm of symExec()
This algorithm has four inputs: lhs, operator, op1, op2. These inputs represent a
statement: “lhs = op1 operator op2; “. If there is no op2 in the statement, in other
words operator are unary, we let op2 be empty. Each of lhs, op1 and op2 has their
variable name n, type information t, and concrete value v. Given n and t, we can
define or find its corresponding variable in symbolic constraint system by the naming
rule described in Sec 3.2. Concrete value v is used when this variable is not affected
by input.
For each variable, we maintain a flag recording whether it is a symbolic variable.
Each symbolic variable in concrete program has a corresponding variable in
constraint system. Once setSymbolic() let a variable be symbolic, CVCL then creates
a new variable corresponding to that variable in its logical context. The naming rule
of this new CVCL variable follows the rule described in Sec 3.3. On the other hand,
when a variable is not symbolic it will be replaced by its concrete value in symbolic
constraint system.
Initially, all input variables are symbolic. CVCL creates corresponding variables
1 symExec(lhs, operator, op1, op2)
2 if( isSymbolic(op1) || isSymbolic(op2) ){
3 setSymbolic(lhs)
4 c GenerateConstraint(lhs, operator, op1, op2)
5 addConstraint(c)
6 }
7 else{
8 setConcrete(lhs)
9 }
- 22 -
simulate real program behavior better. For example, consider the following program:
Figure 9: An example demonstrating integer overflow
Assume the variable i is symbolic. If there are an execution with i greater than 10
at line 1, generally i will be naturally assumed to be a positive integer. So the
programmer will expect the execution to execute line 3 and 4, and use malloc() with
a positive integer parameter. Is it possible there is an execution path with <1,2,3,5>?
If we use bit-vector constraint in our constraint system and assume the size of i is 32
bit, we can query following constraint:
Figure 10: The bit-vector constraint system for execution path <1,2,3,5> of
Figure 8
The above constraint represents the execution path of <1,2,3,5>. This path has i
greater than 10 at line 1, but it is a negative value in line 3. After above constraint
being solved by CVCL, we get following solution:
i1 = 0bin01111111111111111111111111111111
If we let i be 2147483647 (the largest integer of 32-bit), after the addition at line
2, i will be overflow and has a negative value. Note this kind of behavior can only be
1 if(i>10){
2 i = i + 10;
3 if(i>=0)
4 malloc(i*sizeof(int));
5 }
BVGT(i1, 0bin00000000000000000000000000001010) and
(i2 = BVPLUS(32, i1, 0bin00000000000000000000000000001010)) and
SBVLT(i2, 0bin00000000000000000000000000000000)
- 24 -
constraint, we use the following constraint:
(a = 0)∧
(r = b)
Since we have the remainder variable in above equations, we can also handle
modular operator in the similar manner with division.
3.4.4 Casting
Since CVCL supports bit-vector variable and bit-wise operation, we can easily
perform symbolic execution on casting operation. In C programming language,
casting operation can be classified to explicit casting and implicit casting. However,
after simplification by CIL, all implicit casting will be transformed to explicit casting.
Additionally, the casting operation only happens in following form:
a = (type) b;
In other words, we can treat casting as an independent operator. It does not
appear together with other operators like plus and minus. The fact of one statement
contains no more than one operator let the design of symbolicExec() API easier. For
example, the left hand side of Figure 11 will be transferred to the right hand side of
Figure 10:
- 26 -
Figure 12: Algorithm of Symbolic Casting
For down-casting (line 2), we only extract the lower bits of the casted bit-vector.
For up casting (line 3), we consider whether the type of casted variable is signed or
unsigned. If it is signed (line 5), we do sign extension on the casted bit-vector. If it is
unsigned (line 7), we do unsigned extension (extended by all’0) on the casted
bit-vector. Here is an example with casting operation:
Figure 13: Example Program for Symbolic Casting
After symbolic execution, following constraints are generated:
(c1 = (i1)[7:0])∧
(j1 = SX(c1,16))∧
(k1 = BVPLUS(32, j1, 0bin00000000))
The first constraint is got by extracting lower 8 bits in bit-vector i1, and let c1 be
1 Cast (var, orgType, castType)
2 if(orgLen > castLen)
3 return EXTRACT(var, castLen-1, 0)
4 else if(orgLen < castLen){
5 if(isSignedType(orgType))
6 return SX(var, castLen)
7 else
8 return EXTENSION(var, castLen)
9 }
10 else
11 return var
1 int i;
2 char c = i;
3 unsigned short j = c;
4 int k = j;
- 28 -
Figure 14: Source code and instrumented code for demonstrating symbolic
parameter and return value propagation
When calling a procedure, the caller will first clear the stack by _clearStack(),
then push all its parameters into the stack by _pushParameter(). The three parameters
of _push() is the variable name n, type information t, and concrete value v. These
information is used by CVCL for constructing constraints. In the called procedure
called_proc(), it will pop the symbolic variables stored in the stack and let each
popped variable be equal to the corresponding local variable in the constraint system
by _popParameter(). When the called procedure returns to the caller, it pushes the
return variable into the stack by _pushReturnValue(). After returning from callee,
caller pops the variable stored in the stack and let it be equal to a variable in the
constraint system by _popReturnValue(). After executing above operations, symbolic
execution produces following constraints for symbolic propagation of parameter and
int called_proc(int m, int n)
{
_popParameter (“n”, T_INT);
_popParameter (“m”, T_INT);
temp = m + n;
…
_pushReturnValue(“temp”,temp
,T_INT,);
return temp;
}
…
_clearStack();
_pushParameter(“i”, i, T_INT);
_pushParameter(“j”, j, T_INT);
r = called_proc(i, j);
_popReturnValue(“tmp”, T_INT);
…
1 int called_proc(int m, int
n)
2 {
3 return m+n;
4 }
5 …..
6 int r = called_proc(i,j);
7 …..
- 30 -
We first rename the variable by the context number. Each
“vairableNume+ContextNumber”has its own reference count introduced in Sec 3.3.
And it also has a flag recording whether it is symbolic. Note that this new naming
rule will only be applied on local variables. Consider following program:
Figure 16: Inter-Procedure Program
All the four procedures have a local variable i. After symbolic execution, the
generated constraints are:
Figure 17: Generated constraints for the program in Figure 16
We can observe above constraint system to understand how the context number
1 int A(int i)
2 { return B(i); }
3 int B(int i)
4 { return i; }
5 int C(int i)
6 { return i; }
7
8 void testme(int i)
9 {
10 A(i);
11 C(i);
12 }
(i_2_1 = i_1_1)∧ 
(i_3_1 = i_2_1)∧ 
(__returnVal_3_1 = i_3_1)∧ 
(__returnVal_2_1 = __returnVal_3_1)∧ 
(i_2_2 = i_1_1)∧ 
(__returnVal_2_2 = i_2_2)
- 32 -
4. Target Directed Random Testing
In Sec 3 we have described how our testing framework combines concrete
execution and symbolic execution. In this section we describe how our testing
framework triggers the target program state. We will discuss how to transform a
target program state to a target path by CQual, and how our testing framework finds
a test case which can pass along the target path.
4.1 Incomplete Target Execution Path
Our target state must be specified as: one variable satisfies some constraints in a
given program location. For example, we can specify the parameter of some malloc()
must be greater than zero. We first use CQual to check such a state. CQual is a
type-based tool for finding potential bugs in C program. CQual extends the type
system of C with extra user defined type qualifiers. We use two new types, tainted
and untainted. The untainted type is the subtype of tainted type. We then let all
input data be tainted, and the variable of the target state be untainted. CQual can try
to find out a data flow which lets the tainted data propagate to the untainted variable.
Consider the following piece of program:
Figure 18: An example program with tainted and untainted type
fread($tainted buffer)
int n = buffer[0];
malloc($untainted n);
- 34 -
Figure 20: Execution Tree of a program
Each diamond in above diagram is branch node, or if-statement. Each circle is
other statement which have only one control path to next statement. Each fuscous
diamond is the specified path node in the target path. Note that between each fuscous
node, there may be some unspecified branches. Our path searching algorithm will try
to find a test case which execution path passes along from root to these fuscous
nodes.
If we use DFS path searching, each time searching next execution path we can
easily negate the last added constraint in constraint system. However, DFS path
searching causes our testing to be stuck on some location, for example, like loop
statement. So we introduce CFG (Control Flow Graph) to guide our path searching.
CFG statically analyze the control flow of a program and it is produced by CIL
before our testing beginning. Each time a program enters an if-statement, it will ask
CFG whether current execution is impossible to reach next target path node. If it is
true, it terminates its execution and negates the constraint of last taken branch. Then
- 36 -
Figure 22: Algorithm of check_path(), used in addPredice()
isBranchSymbolic is used to specify whether current branch node is symbolic. In
line 2, checkWhetherDone() checks whether current execution has passed along all
path nodes in the specified target path. If it has passed, then our testing finishes. In
line 3, if the current symbolic branch depth is less than the length of branch_hist,
the taken branch should follow current branch_hist. In line 10, if the depth is larger
than the length of branch_hist, in other words, if there is no specified branch in
branch_hist, it adds current taken branch to branch_hist. Then use CFG to check
whether the next executing statement is not reachable to first unvisited path node in
1 check_path( branchID, branch, isBranchSymbolic)
2 checkWhetherDone(branchID, target_path)
3 if(depth<hist_len){
4 if(branch_hist[depth].branch != branch)
5 //Failed caused by incomplete constraints
6 exit(1)
7 else if(depth = hist_len -1)
8 branch_hist[depth].done true
9 }
10 else{
11 if(isBranchSymbolic)
12 recordBranch(branch_hist)
13 nextNode cfGraph[branchID].next(branch)
14 nextTarget target_path
15 if(!isReachable(cfGraph, nextNode, nextTarget)){
16 if(isBranchSymbolic) depth++
17 solveConstraints()
18 if(!isComplete) exit(0) //There is another path not been
explored
19 else exit(1) //The target path is infeasible
20 }
21 }
- 38 -
The while loop in solveConstraints() repeatedly pops out constraints from
symbolic constraint system by popConstraints(). It pops out the constraints
generated by last if-statement. When all constraints are popped out, the while loop
terminates. In this case, the flag isComplete will be set. In the while loop, it negates
the last constraint in the constraint system, and queries CVCL. If CVCL can resolve
a solution for current constraint system, it then records the solution to the file
“Input”for next test case. If CVCL determines there is no solution on current
constraint system, it then calls popConstraints() and back traces to parent branch
node. On the other hand, in line 17 the flag done of the branch node is set. It shows
that all descent CFG nodes have been explored. So it will back trace to the parent
CFG node such as line 13.
Note our path searching algorithm combines DFS searching and CFG guiding.
DFS searching can automatically try to find out an execution path passing along the
target path. On the other hand, CFG guiding can improve searching more effectively
by only searching paths which are reachable in CFG to the target state.
- 40 -
Figure 24. The first run executes following execution path in vGet8Stylesheet():
Figure 25: Execution path of testing run 1
After negating branch1, the second run executes following path:
- 42 -
Figure 27: Execution path of testing run 3
In third run, the execution reaches the target state. Note that CFG can prevent our
testing from searching the execution paths below the target state.
In this experiment we let all buffer read from a file be symbolic. And because our
testing framework can’t handle array of symbolic size, so we let all buffer read by
fread() with a fixed size. After our testing framework generates three test cases, it
finds an input to vGet8Stylesheet() which causes the parameter of xmalloc() in line
636 of stylesheet.c to be less than zero.
In other experiment, we check whether the parameter of malloc() in line 544 of
summary.c can be less than zero. This time we take vSet2SummaryInfo() as our entry
function. After our testing framework generates 24 test cases, it concludes there is no
- 44 -
6. Conclusions
We implement a testing framework combining concrete run and symbolic
execution. We, therefore, have both the logic reasoning of static analysis and
soundness of concrete run. Such a testing framework can be used to verify the
diagnosis reported by static analysis tool. In our work, we use CQual to generate a
data flow with potential specification violation. Then our testing framework can
verify whether there is a test case leading the data flow to violate specification. In
addition, we use CFG information to guide our testing to the target program state.
This guiding lets the path searching for the target state more efficient.
References
[1] A. Gotlieb and M. Petit, "Path-oriented random testing," in RT '06:
Proceedings of the 1st International Workshop on Random Testing, 2006, pp.
28-35.
[2] P. Godefroid, N. Klarlund and K. Sen, "DART: Directed automated random
testing," in PLDI '05: Proceedings of the 2005 ACM SIGPLAN Conference on
Programming Language Design and Implementation, 2005, pp. 213-223.
[3] K. Sen, D. Marinov and G. Agha, "CUTE: A concolic unit testing engine for
C," in ESEC/FSE-13: Proceedings of the 10th European Software Engineering
Conference Held Jointly with 13th ACM SIGSOFT International Symposium on
Foundations of Software Engineering, 2005, pp. 263-272.
[4] C. Cadar and D. Engler, "Execution Generated Test Cases," in PLDI '05:
Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language
Design and Implementation, 2005.
[5] C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill and D. R. Engler, "EXE:
- 46 -
[15] G. C. Necula, S. McPeak, S. P. Rahul and W. Weimer, "CIL: Intermediate
language and tools for analysis and transformation of C programs," in
Computational Complexity, 2002, pp. 213-228.
[16] C. Barrett and S. Berezin, "CVC lite: A new implementation of the
cooperating validity checker," in Proceedings of the $16^{Th}$ International
Conference on Computer Aided Verification (CAV '04); Lecture Notes in
Computer Science, 2004, pp. 515-518.
[17] Anonymous "Antiword: a free MS word document reader,"
http://www.winfield.demon.nl/
[18] D. Brumley, T. Chiueh and R. J. and, "Efficient and accurate detection of
integer-based attacks," in Proceedings of the Annual Network and, 2007,
[19] D. Molnar and D. Wagner, "Catchconv: Symbolic execution and run-time
type inference for integer conversion errors," feb 2007.
[20] N. Nethercote and J. Seward, "Valgrind: A framework for heavyweight
dynamic binary instrumentation," in PLDI '07: Proceedings of the 2007
ACM SIGPLAN Conference on Programming Language Design and
Implementation, 2007, pp. 89-100.
