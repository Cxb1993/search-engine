Minimum Model Repair with an Automata-Theoretical Approach 
 
I. Introduction 
 
The construction of large complex software with quality assurance is becoming more 
important than ever. In general, quality assurance is achieved with verification techniques, i.e., 
checking if the behavior of the design meets the specification. Up to now, for program 
verification, various techniques have been developed, including testing [Myers04] and model 
checking [CE81]. Once a bug is reported in the verification process, locating and repairing the 
bug still rely heavily on human intervention which is costly, time-consuming, and error-prone. 
In most projects, the cost for debugging and repairing programs still cannot be managed well. 
Thus, without taking repair cost into consideration, research work in program repair is not 
likely to be useful in practice. It is the goal of this work to develop a formal theory for the 
automatic construction of minimum-cost repairs of computer systems. 
 
In our framework, we have a model automaton AM 1  [Land69, PR89, VW86] and a 
specification ψ2. A repair is defined as a sequence of edit operations to AM
M
M
 to satisfy ψ 
according to a repair criterion. We propose several repair criteria, including language 
containment, language equivalence, and bisimulation. We consider four types of edit 
operations: addition of a state, deletion of a state, addition of a transition, and deletion of a 
transition. Then we formally define a repair as an edit sequence that transforms A  to an 
automaton that satisfies ψ with respect to a criterion. Then the length of an edit sequence 
naturally defines the cost of the corresponding repair. Thus our minimum repair problem is to 
construct the minimum-length repair of A  for ψ and a criterion. 
 
As for the computation issues of the minimum repair problem, we have adapted Bunke’s 
theorem of minimum edit-sequence [Bun97] for an upper-bound on the minimum repair cost 
for a given problem instance. The upper-bound is irrelevant to the repair criteria. We then 
present an algorithm based on maximal common subgraph (MCS) construction to calculate 
this upper-bound. Then we discuss the complexities of the minimum repair problem for the 
criteria that we have proposed. Then we also present a procedure that uses a breadth-first style 
to explore the space of repairs to search for the minimum repair. Then we present an 
algorithm for repair for bisimulation based on heuristics of MCS construction and 
bisimulation construction. We have implemented the algorithms and report their performance 
against several benchmarks.  
                                                 
1 The model automaton can be constructed as an abstraction of, for example, a C program. 
2 Ψ can be another automaton or a temporal logic formula [Pnu71]. 
2 
 
IV. An MCS-based algorithm for repair for bisimulation 
The algorithm in section III may suffer from low performance since the space of repairs could 
be huge even within the upper-bound. In this section, we present a repair algorithm for 
bisimulation based on MCS construction and bisimulation construction. Specifically, we 
construct a bisimulation between a graph and itself and partition the states into equivalence 
classes. The algorithm may not yield the minimum-cost repair. But it may efficiently find a 
repair that is less expensive than the upper-bound in lemma 4.  
 
The idea of our new algorithm is as follows. Let GMCS be the MCS between AM and Aψ. Let 
AM − GMCS denote the difference between AM and GMCS. Similarly Aψ − GMCS is the difference 
between Aψ and GMCS. The repair cost upper-bound in lemma 4 is derived from the edit 
sequence from AM to Aψ. Conceptually, this upper-bound suggests a repair that discards AM 
−GMCS and adds Aψ − GMCS. It could be the case that neither the whole AM − GMCS need be 
discarded nor the whole Aψ −GMCS need be added. This intuition is realized with the following 
two steps. 
z Step 1: minimizing Aψ − GMCS 
z Step 2: maximizing the reusability in the difference of AM 
 
V. Implementation and Experiments 
 
Our experimental tool ModelRepair ver.0.1 realizes part of our idea in finding a minimum 
repair. The tool is available at http://val.ee.ntu.edu.tw/ModelRepair. It finds minimum repairs 
for many repair criteria. The language containment checking is achieved by a specialized 
version of GOAL [TCWC07]. To visualize the model, we offer interfaces to convert our 
graph representations into the GOAL format. The users can thus conveniently see the 
difference between the repaired model and the original model. A snapshot of the tool is shown 
in Fig. 1. 
 Fig.1. Snapshot of Model Repair ver.0.1 
4 
 
