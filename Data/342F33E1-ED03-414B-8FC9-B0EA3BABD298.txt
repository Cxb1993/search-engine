- 2 - 
前言 
本計畫原擬以三年的時間，配合助聽器演算法之需求，為數位助聽器量身打造一個極
低電壓，卻又具有一定處理效能之處理器核心。惟因計畫時程縮短為一年，因此僅能呈現
低電壓處理器之核心架構設計。本成果正在審查中，因此直接以會議論文格式呈現。 
 
成果自評 
本計畫所提出之動態式管線設計，乃為解決在低電壓下，一般電路的效能大幅低落的
問題，實驗結果顯示了相當好的省能效果，可說為低電壓、細胞元式設計(過去多為全客戶
式設計)的可行性打開了第一道門。 
這項設計本來就是因於數位助聽器嚴格的省能需求而來，所以與原計畫完全相符，且
與原計畫之一年預期目標一致。另外，本項研究成果正在審查中，其更深入、適合於期刊
發表之結果亦正在加緊進行中。綜合以上，本計畫之目標可謂順利達成。 
 
- 4 - 
can tolerate environmental timing variations by 
dynamically detecting a delay failure and 
propagating the pipeline recovery mechanism 
upon errors. Similar to Razor, our approach is 
aimed at operating at a sub-critical supply voltage 
such that power savings can be gained at a low 
voltage. However, the key difference is that we 
try to predict the logic evaluation time in advance 
and thus control the pipelining data path 
dynamically to avoid the error recovery problem 
once the execution time is larger than one cycle. 
Unlike an error speculation detection circuit is 
employed in Razor, our approach needs a circuit 
to tell a late evaluation, which can be solved by 
logic synthesis[3]. A well-known example is 
based on a Telescopic unit to transform logic 
evaluation with fixed latency into variable 
latency for the purpose of throughput 
enhancement[4].The computation of arithmetic 
functions are well suited for variable-latency 
implementation, because the algorithms involved 
are iterative in nature and the number of 
iterations is data-dependent.  
In this paper, we propose to make several 
arithmetic pipeline stages organized as 
variable-latency block (LA-Block). We construct 
a "SWING" data path flow for each LA-Block by 
using dual-track flip-flops, which are triggered by 
different positive(↑ ) and negative(↓ ) edges 
respectively. As shown in Figure 1, the SWING 
structure uses a detection logic to predict timing, 
and decide to swing up or down flip-flops for the 
output data with variable-latency execution in 
terms of multiple half-cycles  (0.5, 1.0, 
1.5...cycles). Figure 1(b) shows adaptive retiming 
timing diagram of six instructions, and it mixes 
several 0.5 cycle-based variable latency 
execution and makes some accommodation for 
resource conflicts. Gary shadows in timing 
diagram means negative-edge lower flip-flops for 
output data. As illustrated in Figure 1(a), 
instruction MUL needs to use 1.5 cycles for EX2 
stage, whereas instruction MOV spends 0.5 
cycles. As the detection logic tells the long 
latency for MUL, the control directs the output of 
MUL to lower FF to extend the execution time. 
Figure 1(b)-1 shows the MUL instruction needs 
1.5 cycle processing time in EX1 stage, and use 
the lower FF (↓) for output data. Suppose that 
write-back data can always commit in 0.5 cycle. 
Figure 1(b)-3 shows that due to resource conflict 
in EX1, the MOV instruction waits for MUL 
instruction. Figure 1(b)-4 shows the XOR 
instruction has both 0.5 processing time in EX1 
and EX2, so instruction stream swings down in 
EX1 and up in EX2. In normal pipeline design, it 
requires 8 cycles for six instructions, whereas the 
SWING needs 7 cycles even though the MUL 
takes longer time. In addition, since the SWING 
does not limit the worse-case latency for the 
critical path within a single clock, the cycle time 
can be looser at a sub-critical voltage. Hence, it 
not only gains cycle-count but also reduces clock 
period for performance improvement. 
 
 (a) Dual-track flip-flops swing with different 
input instruction 
 
(b) Instructions with adaptive timing 
Figure 1. Instruction streaming in SWING 
pipeline 
However, connecting several LA-blocks in 
processor design will result in several 
synchronous problems. First, there may be 
various processing time for earlier pipeline stages 
and it must have some synchronous control and 
take care "short path" and "meta-stability" 
problems. Without any FF to latch the 
- 6 - 
systems. 
In high-speed processor design, the 
computation of arithmetic functions are usually 
partitioned into several pipeline stages (3~5 
stages) for performance issue. However, there are 
several drawbacks of deep pipeline stages in 
computation functions. (1)Longer delay slots 
cause for more hazard penalty and reducing 
throughput rate. (2)Reduction the depth of logic 
will inevitably enhance the percentages of 
Setup-time/delay-time of pipeline, global 
interconnection, and signal integrity. (3)Deeper 
pipeline stages in computation functions will 
cause more forward paths/hazard detection and 
more pipelines, so it will increase complexity of 
control/forward circuit and increase clock loading 
for driving pipelines. Fewer pipeline stages, 
simpler circuit complexity, but highly parallelism 
becomes a fashion in recent research.. 
A. Retiming mechanism 
As shown in Figure 2, Prediction-based time 
speculation is supported by detection logic. The 
LA-Block is the same as pipeline stage but 
replaces original pipeline with dual-track 
flip-flops. Dual-track flip-flops and Coordinator 
(controller for synchronization) create "pipe 
only-after completion" policy in prediction-based 
time speculation and perform cycle-stealing 
advantage by dynamically adaptive retiming. 
Figure 2(a) shows block diagram of LA-Block. 
Those parts with gray shadow are additional 
components. Dual-track flip-flops contain a set of 
PEDFF/NEDFF and a MUX for output select. 
They are controlled by clock signals of "CLK_P" 
and "CLK_N" for catching completion data 
which are combinational logic outputs. In 
consideration of power issue, Coordinator uses 
the clock signal of "CLK" to produce "CLK_P" 
and "CLK_N" when two conditions are subsisted. 
These conditions are (1) Detection logic predicts 
completion of this operation and (2) There is 
empty space for output data. The retiming 
mechanism is used to construct a locally 
independent block in nature. Dual-Track 
Flip-flops can offer temperature space for the 
current instruction when there is resource conflict 
(next combinational logic), and the current 
instruction will release resource (current 
combinational logic) for next instruction. It is 
helpful to offer a buffer for performance 
improvement in locally retiming environment. 
There are four types of variable-latency execution 
in Figure 2(a) (0.5, 1.0, 1.5, 2.0 cycles).  
Detection logic pre-alerts the completion signals 
of the coordinator when the output is stable, and 
it will do a corresponding judgment. 
 
(a) Block diagram of LA-Block 
 
(b) Timing diagram of LA-Block. 
Figure 2. Description of retiming mechanism. 
The coordinator plays a important role of 
synchronous controller, and it includes "Sync-G" 
and "Sync-L" controllers. "Sync-L" controller 
does retiming judgments by state information of 
dual-track flip-flops and alert-signal from 
detection logic. When two conditions are 
subsisted, "Sync-L" controller triggers "CLK_P" 
or "CLK_N" for one set of Dual-Track Flip-Flops 
swinging. "Sync-G" controller is constructed a 
unified circle handshaking protocol in the 
interface with other independent blocks. This 
methodology will have detailed description in 
Section 3.2. The advantage of prediction-based 
timing speculation is that we can decide the data 
path in advance. Figure 2(b)-1 shows completion 
signals of MUL instruction and swing NEDFF of 
dual-track flip-flops for output data, then change 
input case of MOV instruction. The mechanism 
make sure only one instruction on data path of 
certain pipeline stage all the time, even having 
- 8 - 
 
Figure 3. Tolerance interconnection of 
synchronization chain. 
Circle handshaking protocol is constructed 
by two signals, RA signal and SR signal. The 
“Sync-G” controller receives status of retiming in 
local block and RA signal from other block and 
makes decision if data keep processing or not. In 
the detailed description, we use two DEDFF in 
Figure 4-1 and one NL in Figure 4-2. DEDFF is 
used for SR signal and output selecting signal. 
Because it is a 0.5-cycle based retiming, we use 
DEDFF to match the behavior. We use 
negative-type Latch and pulse to construct 
locking phase in timing diagram of Figure 4. 
Because negative-type Latch is low transparent, 
“Sync-G” controller receive RA signal at 
negative edge of pulse. When positive edge of 
pulse arrive, “Sync-G” controller stop receiving 
RA signal and processing SR signal and output 
selecting signal. The circuit of processing output 
communication signals is very simple, and it only 
spends 2~3 level gate delay. 
 
 
Figure 4. Description of circle handshaking 
protocol. 
C. Detection logic concept & trade-off 
The detection logic is used to identify 
whether the current computation exceeding a 
given timing constraint T or not. Essentially, we 
modified the method in [4] and generate a hold 
logic as our detection logic for system estimation. 
Given a timing constraint T and the target 
combinational circuit, we would generate the 
corresponding detection logic by using the 
sensitization conditions of critical paths. The 
patterns which can’t satisfy the necessary 
conditions of activating the critical paths would 
be identified as the patterns with delay less than T. 
Note that, because the detection logic generated 
in [4] is not exact, some patterns with delay less 
than T would be miss-predicted as patterns with 
delay longer than T. The increasing ratio of miss 
prediction would make overall system 
performance down. In the other hand, for some 
large combinational circuits, the prediction rate 
and the area overhead of the hold logic would be 
a trade-off. With sacrificing the accuracy of 
prediction rate, the area overhead would decrease 
possibly. However, the more accurate hold logic 
would not always have lager area. The complex 
equations used for the construction of the hold 
logic could be optimized further. 
D. Integration 
We identify four kinds of locally in 
independent blocks, SRAM components, 
Synchronous Blocks, LA-Blocks, and Control 
unit. Figure 5 shows each block have unified 
interface which is constructed by circle 
handshaking protocol, and it forms a reliable 
synchronization chain network by integrating 
those components. Figure 5-B is Synchronous 
block also having fixed latency execution time, 
including instruction issue/decode/forwarding 
stages. We integrate instruction issue/ decode/ 
forwarding stages into one locally synchronous 
block with three pipeline stages. Because of 
locally adaptive retiming, we propose an adaptive 
pipeline for tolerating “pipeline traffic” to smooth 
the overall data flow without global stall. There 
are some trade-offs about cost of adaptive 
pipeline buffer and performance. 
- 10 - 
130nm cell library on different multimedia 
applications. In Table 1, the field of “Ref” is the 
percentage of function utilization in those media 
applications. We evaluate five critical 
computation functions in processor, and they 
include over 90% dynamic execution instructions. 
We define T* latency is one clock period, and we 
can find that large percentages of path delay lay 
on 1.0T* and 1.5T* timing sections. It is a 
reasonable result for synthesis tool policy, and we 
gain about 30~50% performance by 4 types 
adaptive retiming at single pipeline stage. The 
timing distribution is depended on different 
structure circuit and different input case. For 
example, the L/S function has very rare path 
delay between 1.5T* ~ 2.0T*. It is a application 
pattern dependency result.  
Table 1. Timing distribution on different 
Applications 
 
Table 2. Evaluate Detection logic in Shifter 
circuit 
 
Table 2 shows several detection logic area 
overhead by different ratio of correct prediction 
in 32-bit shifter circuit, and the cut is 85% of 
critical path. In our implementation result, we 
find that higher ratio of correct prediction not 
absolutely means larger area overhead. We 
discuss the relationship of those evaluation 
results in previous subsection 3.3. 
In the experimentation result, hazard penalty 
of deep pipeline causes large IPC impact. We can 
gain about 23% IPC compared with our locally 
adaptive retiming pipeline architecture (7 
pipeline stages). Another comparison in Figure 7 
is the ratio of correct prediction to impact the IPC. 
In this part, the IPC impact is not obvious. Larger 
miss-prediction will cause timing distribution 
migrating to larger path delay. Because of 
out-of-order execution between multi-execution 
channels hiding longer path delay except 
sequential instructions in the same channel, so it 
only has 1 ~ 2% IPC loss for each 5% percentage 
miss-prediction. There is still 17% IPC gain with 
70% correct prediction. In our proposed design, 
we provide a large margin for miss-prediction by 
detection logic with still well performance gain. 
It is increasing the practicability of detection 
logic. 
 
Figure 7. IPC impact with hazard penalty and 
ratio of correct prediction. 
We use different levels wire model to 
synthesize processor RTL code at 1.2v/0.5v for 
evaluating the ratio of global 
interconnection/Signal integrity in clock period. 
Higher level wire model is used to simulate larger 
and more complex circuit. In 1.2v environment, 
the ratio is about 11.1% in wl10 wire model. With 
higher level wire model, the ratio is increasing in 
nature. It means more complex circuit which 
usually has worse global interconnection/Signal 
integrity delay. In 0.5v environment, the ratio is 
worse than 1.2v environment. The ratio is about 
35.75% in wl10 wire model, and the ratio 
increases more rapidly than 1.2v environment (in 
wl50, it reaches 52.2%). In 0.5v embedded 
environment, it has larger tolerance margin for 
reliability or performance gain with circle 
handshaking protocol methodology. We find a 
balance with a maximum throughput gain when 
reduction of clock period and increasing ratio of 
error which can be tolerated. It isn’t a precise 
evaluation, but can get more or less relationship 
for ratio of global interconnection/signal integrity 
between complexities of circuit and low voltage 
environment. 
