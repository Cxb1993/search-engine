 2 
3 建立簡化模型 
半規則網格重製演算法的建立流程，首先會將封閉的三角網格模型 M 簡化
成外型和網格較簡單的基底模型 M0，接著使用網格細切技術建立多層次解析度
的階層式架構，最後利用投影技術將細切步驟產生的新取樣點移動到 M 的表面
上，藉此還原模型的細部特徵。在上述的演算流程中，想要建立出理想的多層次
解析度模型必須滿足下述幾個原則： 
a. 基底模型必須正確保留原始模型的外觀特徵； 
b. 基底模型細切後仍須保留外觀特徵； 
c. 原始模型的表面的起伏變化必須盡量接近細切後的模型表面。 
遵守上述三點的要求，是為了讓經過細切後的模型能夠正確保留原始模型整體上
的外形特徵，避免後續的取樣點投影步驟發生錯誤，導致和原始模型之間的外形
誤差大幅提升。為此，本計劃使用 [5]中提出的自動表面分群結果來建立基底模
型M0，使得上述的三個原則能夠正確達到。 
[7]提出的簡化演算法可分成兩個步驟，首先是利用 L2,1誤差估測法將模型表
面分成多個區塊，接著將每個表面區塊轉化成多邊形，並透過連接多邊形的頂點
建構出最終後的多邊形簡化模型。藉助於以法向量為基礎的 L2,1誤差估側法，可
保證分群後的表面區塊具有理想的共平面特性，進而保證表面區塊內部的三角片
法向量和區塊轉換後的多邊形法向量十分接近，這正好符合上述的第三點原則。
另外，此分群法的分群結果會讓區塊交界線落在表面曲率變化較大的部份，因此
對於工業上具有尖銳特徵(Sharp Feature)的模型，簡化後的模型會完整的保留住
原始的尖銳特徵，以符合上述的第一點原則。 
然而，[7]的分群演算法卻有著需要使用者自訂分群數量的困擾，雖然分群數
量的多寡是主觀的，但對於工業中表面有著明顯變化的幾何模型而言，分群的好
壞將會取決於是否能讓區塊交界線精確的落在尖銳特徵位置。若能夠一次就自動
決定出適當的分群數量，並保證依照此數量產生的分群結果就能夠正確的將物體
表面的變化萃取出來，將可大幅降低因分群數量不佳而重覆測試所浪費的精神和
計算時間。為此，本計劃採用主持人在[5]中提出的自動表面分群法來進行原始
模型的簡化。 
 
3.1自動表面分群 
給予一個封閉的三角網格模型M，自動表面分群的演算流程包含下列步驟： 
1. 選擇M的 Bounding Box六個面為代表平面 Pbase，針對M上的所有三角片
t計算與 Pbase之間的 L2,1誤差值，並把 t分派給有最小誤差值的 Pbase。當M
上所有三角片都分派完後，會將模型分成六個表面區域但每個區域內會包
含多個不相連的表面區塊，如圖一(a)所示； 
2. 把區域中各個不相連的表面區塊 Ri獨立成新的表面區域，得到初始的分群
結果，如圖一(b)所示； 
3. 由每個表面區塊中選擇 L2,1誤差最小的三角片為初始三角片 ti，並利用 ti的
質心和法向量推算代表平面 Pi；。 
4. 由每個表面區塊 Ri之初始三角片 ti，依序找出 ti的 1-ring，2-ring，…，k-ring
相鄰三角片，計算這些三角片與 Pi之間的 L2,1誤差值。並以此誤差值為權
重，由小至大依序將三角片放入優先權佇列中。在此優先權佇列中，可能
存在同一個三角片是由不同初始三角片所找到的相鄰三角片，它會依據和
不同 Pi的 L2,1誤差值，而分屬在佇列內的不同位置。依序由佇列中取出三
 4 
網格分佈，但在網格簡化時成功保留下來的模型尖銳特徵，卻也因為細切時考量
整個模型，造成產生表面平滑化而破壞這些特徵，如圖三(b)所示。此外，網格
細切後的模型若與原始外觀差異過大，如圖三所示，會導致後續的投影步驟中產
生幾何上的錯誤，例如三角片互相穿刺的情形。 
 
為此，本計劃採用三角片一分四的細切概念進行重新取樣。給予一個基底模
型M0，針對M0上的每一個三角片 ti，細切演算法首先會在 ti的三個邊上個別找
出中心點，如圖四(a)所示。接著依照逆時針方向連接三個邊的中心點，藉此在
ti中產生出四個新的三角片，如圖四(b)所示。依此概念將 M0上的每一個三角片
進行一分四的細切處理即可產生具有較高解析度的模型 M1，如圖四(c)所示。以
此類推，每經過一次細切處理模型的解析度將逐漸增加，直到細切模型的頂點數
量與原始模型最為接近即為所求，如圖四(d)所示。 
 
4.2 投影取樣點 
經過一分四網格細切的處理後，會在基底模型上產生大量的新取樣點。但為
了維護模型整體的外觀結構，新取樣點仍是落在基底模型的表面上，因此必須經
過投影的方式把新取樣點移動到原始模型的表面上，藉此還原模型的區域性的細
部特徵。 
  
  
(a) (b) (c) (d) 
圖四：網格細切處理，(a)在基底模型三角片三個邊上找出中心點；(b)逆時針連
接三邊中心點完成細切步驟；(c)基底模型細切一次後的結果；(d)與原始模型點
數最接近的細切結果 
 
在過去有關多層次解析度模型的研究，大多是採用參數化技術在網格簡化步
驟中建立新取樣點和原始模型表面之間的對應關係，但此類手法是採用區域性點
對合併的簡化方式，因此並不適用於本計劃的研究。為此，本計劃使用法向量偏
移(Normal Displacement)的概念在三度空間中直接進行取樣點投影。法向量偏移
投影法的概念如下： 
給予細切模型上的任一取樣點 v和其法向量 nv，法向量偏移投影法會由 v點
為起始點沿著 nv方向產生一條法向量射線，此法向量射線會和原始模型的表面
交於多個點，其中找到與 v點最近的交點 v’即為投影點並且 v’=v+tnv，其中 t代
表 v和 v’點之間的法向量方向偏移值。 
相對於參數化技術，法向量偏移投影法可以直接在三度空間中執行以減少參
數化所需時間，但也因為三度空間的空間變化程度較複雜，導致原始模型表面變
化較大的位置可能產生投影錯誤的狀況。關於此問題，本計劃所採用的表面分群
方法是藉由分析原始模型表面的法向量變化，將模型表面變化較相近的區域合併
在一起，並在網格細切過程中限制新取樣點的位置，使得位於同一分群區域的細
切模型表面和原始模型表面之間的變化程度相近。因此新取樣點只需要針對同一
分群區域的原始表面進行法向量偏移的投影即可，此種區域對區域的投影概念不
但可避免投影過程產生的幾何錯誤，更可降低計算投影位置的時間複雜度。至於
位於區域交界處的新取樣點，只需針對交界線所相鄰區域的兩個原始模型表面進
 6 
離切線平面，因此必須再進行一次的法向量偏移投影將取樣點移動回原始模型的
表面上。如圖六(b)所示，經過調整並再次投影後的模型網格分佈的平順度可大
幅提升，原先三角片穿刺的問題也可成功解決。必須注意的是當模型具有尖銳特
徵時，只有內部新取樣點可以進行全域性調點的處理，以避免尖銳特徵被破壞。 
 
5 實驗結果 
本計劃的實驗硬體環境為 CPU Intel Core2 Duo 1.83GHz，RAM 2.00GB。透
過以法向量為基礎的自動表面分群法，搭配 Constrained Delaunay Triangulation
三角化技術，演算法可以建立出保留原始模型外觀結構的基底模型，特別是在具
有尖銳特徵的模型的簡化上，可以得到理想的簡化效果。此外，若是採用 Garland 
et al.所提出的點對合併網格簡化法[11]來製作基底模型，因為點對合併法只要是
滿足門檻值的點對都可以進行合併，在某些模型的簡化結果中會產生幾何上的錯
誤。此外形上的錯誤會在後續的投影步驟更加惡化，成三角片嚴重穿刺的問題，
如圖七(a)所示。 
在本計劃所提演算法，因為具有表面分群資訊，會具備下列特點： 
1. 可以成功避免位在表面變化較劇烈的區域的取樣點，會找到不正確的投
影位置，如圖八所示； 
2. 在具有尖銳特徵的模型進行投影時，受惠於表面區塊交界線即為尖銳特徵
的特點，本計劃提出的分段式投影法不需花費前處理來定義尖銳特徵的位
置，大幅加強了演算法的全面性； 
3. 取樣點投影步驟所需的時間，相較於不使用空間分割技術輔助的無分群資
訊投影法[3]而言，可以在不增加與原始模型之間的外形誤差下，降低計算
所需成本，如表格二所示。 
 
 
 
  
(a) (b) (a) (b) 
圖八：投影結果比較，(a)無分群
資訊的取樣點投影結果；(b)本計
劃採用個別區域投影的結果 
圖九：網格分佈平順度的比較，(a)使用 Loop細切並
投影後的網格；(b)使用本計劃所提的一分四細切加
上全域性調點後的投影網格 
相較於過去提出的演算法[3]使用 Loop細切技術來獲得平順的網格分佈，在
考慮必須保留模型外形特徵的原則下，本計劃採用一分四三角片細切法，再搭配
全域性取樣點調整技術，可以產生接近 Loop細切法所建立的網格分佈平順度，
結果比較如圖九所示。 
 
具有平順且規則的網格之外，與原始模型外形上的差異量是決定演算法好壞
的重要因子，在本計劃所做的實驗中，藉由Metro工具[12]所估測出的模型外形
 8 
  
  
(a)#vertex = 26 (b)#vertex = 3330 (c) (d) 
  
  
(e)#vertex = 67  (f)#vertex = 4162 (g) (h) 
  
  
(i)#vertex = 188  (j)#vertex = 11906 (k) (l) 
 
 
  
(m)#vertex = 226 (n)#vertex = 14338 (o) (p) 
圖十一：實驗模型的半規則網格重製結果，第一欄為簡化後的基底模型；第二欄
是重製後的新模型(取最接近原始模型點數的細切層級)；第三欄為重製模型的網
格分佈情形；第四欄為原始模型的網格分佈情形 
 
6 結論與未來展望 
在本計劃中提出了一套半規則化網格重製演算法，透過自動表面分群法進行
網格簡化，可成功建立出保留原始模型外形特徵的基底模型。三角片一分四的細
切技術可以產生多層次解析度格的階層式架構，並讓每一層次解析度的模型外形
特徵正確的維持。透過第一步驟中的表面分群資訊，分段式投影法可以減少投影
步驟所需的計算時間和錯誤的發生，模型在尖銳特徵的部份更能正確的呈現。最
後，利用全域性的取樣點位置調整技術，可讓原本分佈不均的網格分佈有所改
善，在不改變外形誤差的條件下提升整個模型的網格分佈平順程度。 
 
參考文獻 
[1] Autodesk 3DsMax. http://www.autodesk.com 
[2] Autodesk Maya. http://www.autodesk.com 
[3] A. Lee, H. Moreton, and H. Hoppe. Displaced subdivision surfaces. In 
Proceedings of SIGGRAPH 00, pages 85–94, July, 2000. 
[4] B. S. Jong, W. Y. Chung, P. F. Lee, and J. L. Tseng. Efficient surface 
reconstruction using local vertex characteristics. The 2005 International 
Conference on Imaging Science, Systems, and Technology : Computer Graphics, 
國科會補助專題研究計畫項下出席國際學術會議心
得報告 
                                     
日期： 2010 年 11 月 26 日 
                                 
一、參加會議經過 
The 18th Pacific Conference on Computer Graphics and 
Applications(Pacific Graphics)舉辦於大陸杭州的浙江大學。此研討會著
重於電腦圖學的應用，可以視為亞洲地區電腦圖學最重要的研討會，總共包
含了 31篇 oral以及 16篇 poster。此研討會一共舉辦三天，前來參加的人
士都是在這個領域頂尖的學者，能夠在這個會議上報告及聽取來自各方的專
計畫編號 NSC 99－2221－E－033－049 
計畫名稱 自動保留外形特徵的半規則網格重製技術之研究 
出國人員
姓名 
高啟綱 
服務機構
及職稱 
中原大學電子工程系 博
士班研究生 
會議時間 
 2010年
09 月 25
日至 2010
年 09月 27
日 
會議地點 
中國大陸杭州浙江大學 
(Hangzhou, China) 
會議名稱 
(中文) 太平洋計算機圖學研討會 2010 
(英文) Pacific Graphics 2010 
發表論文
題目 
(中文) 漸進式三維動態網格壓縮法與應用 
(英文) Representing Progressive Dynamic 3D 
Meshes and Applications 
Representing Progressive Dynamic 3D Meshes and Applications
Chi-Kang Kao∗, Bin-Shyan Jong†, Tsong-Wuu Lin‡
∗Dept. of Electronic Engineering
windkey@cg.ice.cycu.edu.tw
†Dept. of Information & Computer Engineering
bsjong@ice.cycu.edu.tw
‡Dept. of Computer and Information Science
twlin@cis.scu.edu.tw
Abstract—Dynamic 3D mesh sequences, also called 3D an-
imation, have been widely used in the movie and gaming
industries. However, the huge storage requirements of dynamic
mesh data make it problematic for a number of applications
such as rendering, transmission over a network, and displaying
on mobile devices.
This paper proposes a multiresolution representation of 3D
animation that results displaying 3D animation progressively.
The proposed method transforms traditional 3D animation
representation into progressive representation, which takes up
less storage and memory space. The progressive representation
is constructed by compressing the animation into a base ani-
mation with sequenced refining operators. The base animation
is viewable and can be reconstructed by transmitting for only
a few seconds, which is also called thumbnail animation in this
paper; the more detailed animation can be refined smoothly
with applying refining operators. As the results, the resolution
of animation can be free to change at real-time, where the
resolution can be increased automatically or even controlled
by user. Moreover, the progressive animation is more suitable
for transmitting and displaying through the network.
Keywords-Progressive animation; compression; dynamic 3D
mesh; PCA
I. INTRODUCTION
Dynamic 3D mesh sequences are created in terms of
3D static models that change over time. Each frame is
represented by its own geometry, and all frames share the
same connectivity in a scene. The main advantages of this
traditional representation are its simple storage structure
and faster rendering. However, this representation requires a
large amount of storage space for the geometry. To reduce
the redundancy between neighboring frames and closing
vertices of animation, simplification and compression are
needed.
In recent years, Internet and multimedia communication
networks have been widely used to access multimedia con-
tent anywhere and with any kind of device. Researchers have
attempted to find ways of transmitting multimedia (including
dynamic mesh) more efficiently over bandwidth-limited net-
works. They have also examined ways of providing suitable
media content, or universal media access (UMA), according
to characteristics of the end user’s terminal environment,
such as CPU/GPU performance, and network bandwidth
[1]. A user may have multiple terminals for retrieving
multimedia content, such as a desktop computer or mobile
phone. However, the content providers cannot know how
the content will be used throughout the network, so single-
resolution, fixed-quality content has usually been provided.
Using a desktop computer to view animation sequences may
require only a few seconds or even milliseconds. However,
for a mobile phone, viewing the same sequences may
require minutes or even lead to rendering failure because the
memory capacity is overloaded. Thus, a worthwhile topic of
research is the issue of UMA for dynamic meshes that can
dynamically provide suitable resolutions.
Figure 1 shows an example of representing multires-
olution image and 3D animation, and how to apply the
progressive animation (PA) to UMA. The progressive images
(top) first appear blurry, and then become clearer as the data
keep transmitting and loading. The progressive animation
presents a coarse animation first, as the refined operators
keep transmitting, the animation can presents more feature
motion and more detailed shape. Moreover, the PA supports
adjusting the resolution of each frame when displaying, and
the view point in the scene can be moved by viewer. This
is one of the main advantages that 2D animation can not
realize.
In other words, non-progressive animation displaying
frame-by-frame, PA can efficiently browse the entire an-
imation with lower resolution. This is especially useful
for constructing thumbnail animation and stream displaying
through network. The viewer can browse the thumbnail
animation first, and then download the higher quality version
if the content of animation is interested by the viewer.
Thus the viewer can save a lot of bandwidth and time for
downloading the animation which he is not interested.
II. RELATED WORK
With the goal of providing animation that can update the
resolution dynamically depending on the environment. PA
needs to cover the compression technique with a multires-
olution representation. This section will describe previous
work on these two topics.
Based on the simplification algorithm QSlim [19], Kircher
[22] constructed a multilevel mesh hierarchy for animation
sequences. Moreover, edge-swap and reclustering operations
are used to update the mesh connectivity in order to reduce
the simplified error and preserve more feature shapes of
the animation. Huang’s [23] method employed an improved
error metric DOD, which considers spatial and temporal
information simultaneously. Another proposed algorithm,
DCU, is used to preserve features while minimizing con-
nectivity changes.
Although these methods [22], [23] provide excellent ap-
proaches to constructing multiresolution meshes and anima-
tions, they are mainly concerned with whether these shapes
can be preserved well after simplification. To provide PA,
not only connectivity but geometry should be considered
simultaneously.
III. ALGORITHMS FOR CONSTRUCTING PROGRESSIVE
REPRESENTATION
In previous work, both geometry compression and mesh
simplification demonstrated some effective results. However,
providing a complete framework for constructing a progres-
sive representation of animations was less often discussed.
In this paper, PA should have the following properties.
∙ The viewer should be able to browse the animation
without receiving all the compressed data. In other
words, as the thumbnail animation is constructed, the
viewer side can browse and keep refining the thumbnail
animation simultaneously.
∙ Both the resolution of connectivity and geometry can
be changed progressively.
∙ The shape and vertex coordinates of the reconstructed
animation in each resolution are maintained as well as
in the original animation.
∙ Animation compression and simplification techniques
should be considered to reduce the total required stor-
age and memory usage.
∙ The refine step should fast enough for real-time dis-
playing.
∙ Moving the view point through the scene is allowed.
In order to displaying the animation at real-time, the
computation cost in decoding side should as less as possible.
Therefore, some effect methods which are based on simpli-
fying the connectivity at the decoding side [14]–[17] can not
be easily applied to PA. Because the mobile devices maybe
encounter out-of-memory states while processing large se-
quences. To avoid this, this paper develops a progressive
representation, which is constructed on the encoding side.
The decoding side needs only to receive the simplified data,
reconstructs and render the animation.
To provide a complete framework for PA, neither geome-
try nor connectivity can be omitted. Therefore, the progres-
sive representation of this paper contains both progressive
connectivity representation (PCR) and progressive geometry
representation (PGR). The PCR not only constructs a multi-
level mesh but also construct a correlation between geometry
and connectivity. This paper also shows how to mapping
the compressed geometry and simplified connectivity when
constructing the PGR and PCR. The main purpose of PGR
is to reduce the size of animation, and provide progressive
refinement for vertex displacements in all the frames. The
PGR contains a series of PCs which is produced by KPCA
(K-mean+PCA). As the results of the encoding side, a series
of principal components (PCs) and a base connectivity with
a sequence of vsplits are stored and used by the decoding
side.
A. Constructing the Progressive Connectivity Representa-
tion
The main purpose of the PCR is to provide a data structure
that can change the shape resolution smoothly. Moreover,
throughout the animation, the shapes should be kept as close
as possible to the original animation.
For constructing PCR, this paper uses edge-driven ap-
proach to simplify the connectivity of animation. However,
directly using the previous simplification method such as
[19] can not keep correlation between PGR and PCR.
Therefore, the data structure of base connectivity and vsplits
should be redefined. Please note that the vertex displace-
ments are compressed by PGR, thus the PCR does not need
to record any information about geometry.
Figure 2 shows performing an edge contraction on a mesh
Ω𝛾+1 during simplification. Edge contraction means there
is a vertex pair (𝑉𝑠, 𝑉𝑡) in Ω𝛾+1 to be contracted into only
one vertex 𝑉𝑠 in Ω𝛾 . In this case, 𝑉𝑠 is preserved because
its simplified error is greater than that of 𝑉𝑡. The index of
𝑉𝑠 is recorded as the vertex index (VI) in vsplit. The index
of split vertex 𝑉𝑡 is not recorded in VI because 𝑉𝑡 will be
placed as the last vertex in Ω𝛾+1. In other words, for Ω𝛾
with 𝛾 vertices, the index of 𝑉𝑡 is equal to 𝛾 + 1.
To represent the changed faces in vsplit, the faces elim-
inated by edge contraction thus become new faces (NF) in
the vsplit operator. The NF is described in terms of vertex
indices, where each vertex index i in NF means there is a
new face (𝑉𝑖, 𝑉𝑠, 𝑉𝑡) to be added to Ω𝛾+1. Finally, the delta
faces (DF) record the indices of updated faces, where each
index j in DF indicates the vertex 𝑉𝑠 in triangle 𝑇𝑖 should
be replaced with 𝑉𝑡.
Finally, the PCR is represented by the base connectivity
and vsplit operators. The base connectivity consists of tri-
angle sets without geometry. Each vsplit operator is given
in terms of VI, NF, and DF information. The information is
used to construct a static connectivity hierarchy shared by
all frames.
B. Constructing the Progressive Geometry Representation
The PCA-based method is chosen for constructing the
PGR because it offers advantages such as high compression
1 γ
• • •⎡ ⎤ ⎡ ⎤ ⎡ ⎤ ⎡ ⎤
⎢ ⎥ ⎢ ⎥ ⎢ ⎥ ⎢ ⎥⋅ ⋅ =⎢ ⎥ ⎢ ⎥ ⎢ ⎥ ⎢ ⎥
⎢ ⎥ ⎢ ⎥ ⎢ ⎥ ⎢ ⎥• • •⎣ ⎦ ⎣ ⎦ ⎣ ⎦ ⎣ ⎦

     

•
•

•
•

• • ••
• • ••
1     2 N
•
•

• • • • V
V
Base Connectivity
Base Geometry
Base   Animation
⊕
=
1
γ
V'
T
S'B'
1     2 N
F1 F2 FN
Figure 3. Constructing the base animation by three PCs and 𝛾 vertices. Different colors in the matrix indicate different PCs.
transmit the rows relative to the vertices indicated by the
base connectivity. As the decoder receives the PCs B’,
S’, V’, it then multiplies these three matrices and will
get the geometry of the base animation. Figure 3 shows
the construction of the base animation, supposing that the
vertices in the base connectivity are 𝑉1, 𝑉2, ..., 𝑉𝛾 .
B. Connectivity Updating
Each CU is performed by receiving a vsplit operator from
the encoder and updating the animation with the vsplit.
Suppose the resolution of the animation on the decoding side
now is Φ𝛾𝜌 , where Φ𝛾𝜌 means the animation is reconstructed
with 𝛾 subset vertices and 𝜌 PCs. As the decoder receives
the vsplit, the CU is processed by the following steps, with
reference to figure 4 (a).
(1) The decoder first needs to receive the spatial PCs
𝐵𝑡1 ∼ 𝐵𝑡𝜌 from the encoder. Then, the following formula
will yield the trajectory of split vertex 𝑉𝑡:
𝐴𝑡𝑗 =
𝜌∑
𝑖=1
𝐵𝑡𝑖 ⋅ 𝑆𝑖𝑖 ⋅ 𝑉 𝑇𝑖𝑗 , 𝑗 = 1...𝑁 (4)
(2) According to VI(s) and NF(ℓ,r) in vsplit, the decoder
adds the two triangles (𝑉ℓ, 𝑉𝑠, 𝑉𝑡) and (𝑉𝑟, 𝑉𝑠, 𝑉𝑡) into the
connectivity.
(3) According to DF(4,5,6) in vsplit, the decoder thus
substitute 𝑉𝑡 for 𝑉𝑠 in the three triangles 𝑇4, 𝑇5, and 𝑇6.
More specifically, a vsplit (VI, NF, DF) and spatial PCs
𝐵𝑡1 ∼ 𝐵𝑡𝜌 should be transmitted through the network. A
matrix multiplication (equation 4) and mesh updates with
NF and DF are performed on the decoding side. The matrix
multiplication and mesh updating are quite simple and fast;
thus, most of the computation time should be spent on
transmitting the vsplit and PCs.
C. Geometry Updating
For the intermediate animation with resolution Φ𝛾𝜌 , the
GU refines the 𝛾 subset vertices from Φ𝛾𝜌 to Φ
𝛾
𝜌+1 . The GU
will increase the precision of the geometry and present more
key motions. Greater precision is achieved by receiving the
(𝜌+1)-th PCs, which the decoder does not have. Remember
that the PGR can refine the vertex coordinates of each
vertex individually; thus, the decoder needs only the vertex
coordinates of the intermediate animation. In other words,
for rendering the 𝛾 vertices, transmitting 𝐵1(𝜌+1) ∼ 𝐵𝛾(𝜌+1)
of the spatial PCs to the decoder is enough. Figure 4 (b)
shows the GU by adding PCs.
In displaying the PA, the connectivity is updated by CU
only; the geometry matrix is updated by CU or GU. The CU
expands the row of spatial PCs in B; the GU expands the
column of PCs in B and V and the relative value of PCs in
S.
V. RESULTS
In the experimental environment, an Intel Core 2 Quad
Q6600 processor (2.4 GHz, 2 GB memory) was used. Table
1 lists basic information and compression time of tested
animation sequences. The result shows that simplification the
connectivity is very fast, and large amount of the computa-
tion time follows on compressing the vertex displacements.
Moreover, the total preprocessing time does not take over
2 minutes per animation. Figure 5 shows the results of
compression error measurement using the KG error [13]
compared with earlier work. The rate-distortion curve of
2 4 6 8 10 12 14 16 18
0
0.5
1
1.5
 bpvf
 
K
G
 e
rr
or
 Error of Cowheavy
 
 
 KPCA
 SSK05
 GK04
 KG04
1 2 3 4 5 6 7 8 9
0
0.02
0.04
0.06
0.08
0.1
0.12
0.14
 bpvf
 
K
G
 e
rr
or
 Error of Chicken
 
 
 KPCA
 SSK05
 AS07
Figure 5. Compression results compared to previous work. The KPCA provides a suitable and efficient approach for processing the geometry data.
due to video card of these devices has poor performance
than desktop computer.
VI. CONCLUSION AND FUTURE WORK
The main contribution of this paper is that it converts
dynamic 3D mesh sequences into a newer representation.
This representation not only compresses and simplifies the
original animation into a smaller, lower polygon form, but
also allows progressive visualization of the animation.
The proposed framework for PA is achieved by construct-
ing the PCR and PGR on the encoding side. KPCA is
used to compress the geometry data into a more compact
format called PGR. The PGR supports refining each vertex
trajectory individually by utilizing the property of PCs. The
PCR represents a progressive connectivity in terms of the
base mesh with prioritized vsplits. The PCR handles the
sequences of split vertices and connectivity updating (CU),
and the PGR maintains the coordinates of subset vertices
and provides geometry updating (GU) to the vertices with
different required sizes.
To display the PA, the decoding side starts by reconstruct-
ing the base animation. As the base animation is constructed,
the intermediate animation, with coarser resolution, can
start rendering on the decoding side. CU and GU are two
operations for refining the intermediate animation. Refining
the coordinates of the subset vertices is achieved by GU;
splitting a vertex with mesh updates is achieved by CU.
According to different environments on the decoding side,
the animation can be reconstructed by any combination
of CU and GU. For example, a device with low memory
capacity and high bandwidth may need more GU than CU,
so the animation is displayed with detailed motions and low
polygons.
The results show that a smooth, CLOD animation can be
realized. This paper also shows that displaying the animation
without all vertices is adequate for most environments. Con-
sequently, multiresolution with less required memory makes
UMA feasible, and suitable resolution can be provided for
different content retrievers.
In the future, to have the best visualization under restricted
bandwidth and memory, the combination of GU and CU is
worthy of further consideration. Another, more challenging,
problem worthy of further investigation is the optimization
of transmitting, which combines the geometry and connec-
tivity operators into more general refining operators. The
valence-driven approach can be combined with KPCA to
obtain different representations of a PA. Finally, the PCR
and PGR should be further compressed, for example, by
quantization of vsplit operators and basis compression of
PCs.
REFERENCES
[1] K. Tack, G. Lafruit, F. Catthoor, and R. Lauwereins, “Platform
independent optimisation of multi-resolution 3d content to
enable universal media access,” The Visual Computer, vol. 22,
no. 8, pp. 577–590, 2006.
[2] J. E. Lengyel, “Compression of time-dependent geometry,”
in Proceedings of the ACM Symposium on Interactive 3D
Graphics, 1999, pp. 89–95.
[3] G. Collins and A. Hilton, “A rigid transform basis for
animation compression and level of detail,” in Vision, Video,
and Graphics, 2005, pp. 1–7.
[4] K. Mamou, T. Zaharia, and F. Preˆteux, “A skinning approach
for dynamic 3d mesh compression,” Computer Animation and
Virtual Worlds, vol. 17, no. 3-4, pp. 337–346, 2006.
[5] L. Ibarria and J. Rossignac, “Dynapack: Space-time com-
pression of the 3d animations of triangle meshes with
fixed connectivity,” in Proceedings of the ACM SIG-
GRAPH/Eurographics Symposium on Computer Animation,
2003, pp. 126–135.
[6] D. L. James and C. D. Twigg, “Skinning mesh animations,”
ACM Trans. Graph., vol. 24, no. 3, pp. 399–407, 2005.
Model Vertex Triangle Frame Orig Size(MB) Computation time
K-mean PCA simplification
Chicken 3030 5664 400 14.54 25.03 14.66 0.11
Cowheavy 2904 5804 204 7.10 10.88 5.23 0.09
Dance 7061 14118 201 48 26.98 25.64 0.23
Horse 8431 16843 48 4.85 4.484 0.57 0.30
Jump 15830 31660 222 41.98 50.98 37.52 0.52
Table I
BASIC INFORMATION ON TESTED ANIMATION SEQUENCES. THIS TABLE ALSO SHOWS THE COMPUTATION TIME (SEC) IN ENCODING STEPS.
Low resolution (86KB)
Medium resolution (200KB)
High resolution (681KB)
Figure 7. The PA can provide any resolution that the viewer wants. This figure shows an example of different resolutions. The top row (low resolution)
needs 86KB with 320 triangles, the medium row (medium resolution) needs 200KB with 1780 triangles, and the bottom row (high resolution) needs 681KB
with 5200 triangles.
99 年度專題研究計畫研究成果彙整表 
計畫主持人：鍾斌賢 計畫編號：99-2221-E-033-049- 
計畫名稱：自動保留外形特徵的半規則網格重製技術之研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 1 1 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 2 2 100%  
博士生 1 1 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 1 100% The Visual Computer 
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
ICS 2010 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
