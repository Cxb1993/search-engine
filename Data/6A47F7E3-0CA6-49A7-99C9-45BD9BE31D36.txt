Hybrid Multi-Feature Indexing for Music Data Retrieval 1
 
 
                                                          
1 Published in the  6th IEEE/ACIS International Conference  
on Computer and Information Science (ICIS 2007),  
Melbourne, Austraila, July 11-13, 2007, pp. 543-548. 
摘要 
在多媒體資料庫中如何有效率的管理音樂
資料，近年來已獲得了高度的關注。現在大部
分的研究工作，多利用音樂資料的特性萃取，
例如：旋律、節拍、和弦等等，來建立索引，
以加速音樂資料的搜尋。已有許多的研究報告
指出，這些音樂資料特性可以轉換為字串或數
值形式，再各別發展出有效率的索引架構，以
幫助音樂資料的擷取。而這些研究報告中，多
數只針對音樂資料之單一特徵索引所設計，而
目前已被發表少數的多特徵索引技術，若不是
處理查詢沒有彈性，就是必須佔用相當大的記
憶體空間，限制了多特徵索引的擴充能力與實
用性。在此篇研究報告中，我們將提出一混合
樹狀結構的索引架構，以改善索引對記憶體的
使用量。我們並經由實驗分析證實，所提出的
方法，確實可以大幅降低音樂資料多特徵索引
所需大量的記憶體空間，讓多特徵索引的應
用，更為實用可行。 
關鍵字：多媒體資料庫、音樂資料庫、多特徵
索引、內容擷取 
 
Abstract 
 
The management of large collections of music 
data in a multimedia database has received much 
attention in the past few years. In the most of 
current works, the researchers extract the features, 
such as melodies, rhythms and chords, from the 
music data and develop indices for helping to 
retrieve the relevant music efficiently. However, 
there is only a small number of existing 
approaches introduced multi-feature index 
structures for music queries while most of 
researches are for developing single feature 
indices. The existing music multi-feature index 
structures are memory consuming and lack of 
scalability. In this paper, we will propose a 
hybrid index structure which can save lots of 
memory for music multi-feature indexing. Our 
experimental results also show that the new 
approach outperforms existing multi-feature index 
scheme for memory needed. 
 
Keywords: multimedia database, music database, 
multi-feature index, content-based retrieval 
 
1. Introduction 
 
In the researches of music content-based 
retrieval, many approaches extract the features, 
such as key melodies, rhythms, and chords, from 
the music objects and develop indices that will 
help to retrieve the relevant music efficiently 
[5][8][12][13]. Several reports have also pointed 
out that these features of music can be 
transformed and represented in the forms of music 
feature strings [1][2][4][6][7][13][14] or numeric 
values [10][11] such that the indices can be 
created for music retrievals. We also can combine 
these features to support various types of queries. 
However, there is only a small number of existing 
approaches introduced multi-feature index 
structures for music retrievals while most of 
researches are for developing single feature 
indices. The existing music multi-feature string 
index structures are memory consuming and lack 
of scalability, whereas the numeric indexing 
approaches for music data are inflexible for varied 
of query lengths and difficult to support for fault 
tolerance searching. To address the drawbacks of 
current multi-feature indices for music data 
retrieval, in this paper, we will propose a more 
flexible index structure which associates numeric 
indexing with string indexing for multi-feature 
music query searching. Our study is shown that 
the proposed index structure is more economic in 
memory need than existing multi-feature indexing 
approach though it is without restriction in query 
length.  
 1
2.2 Multi-Feature Numeric Indexing 
 
The Multi-Feature Numeric Index for music 
data retrieval was proposed by Lo and Chen [11]. 
For translating music data into numeric value, 
they assume that the music symbols, ‘a’, ‘b’, 
‘c’, …, ‘m’, can map into integer values 0, 1, 
2, …, m-1, respectively. If we pick out a music 
segment with n sequential notes from a melody 
feature string, denoted x1x2…xn, the integer value 
of each note can be represented by P(xi), 1 ≤ i ≤ n. 
Therefore, this segment of n sequential notes can 
be transformed into a numeric value by the 
conversion function – v(n), as shown below. 
1
1
)()( −
=
×= ∑ xn
x
mxPnv
  …  (2) 
Each music feature segment can be converted into 
a numeric value by equation (2) and these values 
for a music feature segment can be looked as a 
coordinate for multi-dimensional space. Such that 
the coordinate can be inserted into a multi-
dimensional index tree, such as R-tree [3], for 
music retrieval. Therefore, it also can be extended 
for converting three or more features into high 
dimensional index tree. 
 
2.3 Discussions 
 
Although, the authors claimed that Grid-Twin 
Suffix Trees provides more scalability than the 
other three index structures in [6]. However, if 
there are more features or we use more symbols of 
suffixes (n > 2) to map into the buckets, a massive 
of memory space is needed for Grid-Twin Suffix 
Trees to construct buckets of grid structure. They 
may need a huge memory space and a sparse 
matrix may occur in the grid structure. 
In addition, since numeric index is created by 
transforming fixed length, n in equation (2), of 
music segment into numeric value, the main 
drawback of Multi-Feature Numeric Index is that 
the length of  a query (Query By Example, QBE) 
is inflexible. It had better equal to the length of 
music segment which the index created. 
Otherwise, searching time for the query will be a 
multiple times increasing.  
 
3. Hybrid Multi-Feature Indexing 
 
In this section, we present our proposed Hybrid 
Multi-Feature Indexing for music data retrieval. 
We take advantages of Multi-Feature Numeric 
Index and Grid-Twin Suffix Trees to construct a 
new index structure such that our proposed index 
structure will be less memory space needed than 
Grid-Twin Suffix Trees, as well as, unlike Multi-
Feature Numeric Index, be without any query 
length restriction.  
 
3.1 Constructing Hybrid Multi-Feature Index 
 
To construct Hybrid Multi-Feature Index, we 
use a multi-feature tree structure instead of grid 
structure in Grid-Twin Suffix Trees. The Twin 
Suffix Trees original under each bucket are now 
linked under corresponding leaf node of multi-
feature tree in Hybrid Multi-Feature Index. We 
organize the creating of our approach in the 
following three steps: 
Step 1: Suppose that there are d features in music 
data and, in each music feature string, the first 
n symbols of the suffix will be transformed 
into a coordinate. We design equation (3) for 
d-feature coordinate P(x1, .., xd) as follows, 
∑
=
−− ⋅⋅=
n
i
in
dd
in
d NiFNiF)x,P(x
1
111 ))(,..,)((..,
…. (3) 
where F1(i), … , Fd(i) and N1, … , Nd represent 
the values and sizes of alphabet symbols, 
respectively, for d music features. We note that 
a suffix within any music segments, such as 
“a1” or “a1b2”, will have only one 
corresponding coordinate. 
Step 2: The coordinate derived from Step 1 is 
then inserted into a d-feature (d dimensional) 
tree. The degree of each non-leaf node in this 
d-feature tree is 2d. There is also a center point 
for each non-leaf node. The coordinate, (x1c, 
x2c, …, xdc), of the center point is computed by 
averaging the coordinates inserted under 
current node or its descendent nodes. Such 
that, if there are 2 features and the center point 
is (x1c, x2c), the node will be partitioned into 
four domains, (≥ x1c, ≥ x2c), (< x1c, ≥ x2c), (≥ 
x1c, < x2c), and (< x1c, < x2c). To keep the index 
tree balancing as R-tree, each non-leaf node in 
this d-feature tree contains at least 2d-1 not 
null links (half full). Therefore, to insert a new 
coordinate into a node, it may cause the center 
point to be re-computed or may cause the 
index tree be reorganized.  
Step 3: The remaining symbols behind the first n 
symbols of suffix are then used to construct 
the Twin Suffix Trees linked under d-feature 
tree. 
 2
Figure 6. Inserting a new node 
4. Performance Study 
In order to evaluate the performance of our 
new approach, a series of experiments are 
performed in this section. The proposed index 
structure of Hybrid Multi-Feature Index is look 
like an improved version of Grid-Twin Suffix 
Trees except we use a multi-feature tree structure 
instead of grid structure in Grid-Twin Suffix 
Trees. Therefore, for simplify, we would like to 
know how memory is desired by comparing 
multi-feature tree with grid structure. We consider 
following three factors in our experiments and the 
parameters used are also listed in Table 2. 
(a). The effect of number of music features (d). 
(b). The effect of number of the first symbols (n) 
of suffix for mapping or transforming. 
(c). The effect of music database size. 
Table 2. Parameters for experiments 
Parameter domain 
No. of music feature (d) 2 ~ 5 
No. of symbols of suffix (n) 2 ~ 5 
Database size (music segments) 100K~600K
4.1 The Effect of Number of Music Features 
 
The number of music features will affect the 
memory needed for constructing the index. We 
investigated the number of music features (d) 
from 2 to 5 for the first 2 and 3 symbols of 
suffixes (n) for mapping into grid or transforming 
into coordinate, and the database size is set on 
100,000 music feature segments. For simplify, we 
assume that there are 20 symbols for each feature 
(Ni). Since Twin Suffix Trees in both index 
schemes are exactly the same, we only analyzed 
the memory needed for grid structure (of Grid-
Twin Suffix Trees) and multi-feature tree (of 
Hybrid Multi-Feature Index). The experimental 
results are shown in Table 3 and Table 4. Both 
tables show that the memories needed for grid 
structure and for multi-feature tree increase as 
number of music features raised from 2 to 5, and 
especially, the memory is consumed by grid 
structure very seriously. The memory needed is 
over 97GB for grid structure when the number of 
features is 4 or higher joined with it uses the first 
two symbols of suffix. The results of memory 
consuming are even more when it uses the first 
three symbols of suffix for grid structure. On the 
contrary, the memory needed by multi-feature tree 
increases smoothly. Even on number of features 
being 5, there is only 14.11MB memory needed in 
both tables setting. We note that the results for 
multi-feature tree are the same for both tables. 
That is due to the memory needed for multi-
feature tree is not affected by the number of 
symbols of suffix for transforming into coordinate. 
Only the number of features and database size 
will affect the memory usage of multi-feature tree 
and the effect is milder than construction of grid 
structure. 
(4, 3.75) 
(3, 5) (5, 5) 
(6, 2) (1.5
Table 3. Memory needed for first 2 sym of suffix 
(MB) 
No. of 
features 
Grid structure Multi-feature 
tree 
2 0.61 2.29 
3 244.14 4.20 
4 97,656.25 7.63 
5 39,062,500.00 14.11 
Table 4. Memory needed for first 3 sym of suffix 
(MB) 
No. of 
features 
Grid 
structure 
Multi-feature 
tree 
2 244.14 2.29 
3 1.95×106 4.20 
4 15.63×109 7.63 
5 125.00×1012 14.11 
 
(2, 3) 
(1, 1) 
, 2 ) 
 4
Table 8. The effect of database size (MB) 
Database 
size 
Grid 
structure 
Multi-feature 
tree 
100,000 522.19 4.2 
200,000 522.19 8.39 
300,000 522.19 12.59 
400,000 522.19 16.78 
500,000 522.19 20.98 
600,000 522.19 25.18 
 
5. Conclusion 
 
There are many features in music data, such as 
melodies, rhythms, chords and the tone 
differences of adjacent notes. We can extract 
these features to develop the multi-feature index 
to help the query searching quickly and to 
improve the accuracy of query results. The 
researches on multi-feature indexing for music 
data is relative rarer to the researches of music 
data retrieval. In this paper, we propose an index 
structure, named Hybrid Multi-feature Index, for 
music data retrieval. Our Hybrid Multi-Feature 
Index uses a multi-feature tree structure instead of 
grid structure in Grid-Twin Suffix Trees [6]. In 
our approach, the first a couple of symbols of 
suffix are transformed into a coordinate then 
inserted into multi-feature tree. We examined our 
new approach by comparing with Grid-Twin 
Suffix Tree in varied parameters of experiments. 
As expected, the experimental results show that 
the memory needed for our multi-feature tree of 
Hybrid Multi-Feature Index is far less than it is 
needed for gird structure of Grid-Twin Suffix 
Trees. Our Hybrid Multi-Feature Index is more 
scalable to support large music databases. 
Since the number of features increases, the 
Twin Suffix Trees becomes more complicate. Our 
future works will emphasize on improving the 
Twin Suffix Trees under multi-feature tree of 
Hybrid Multi-Feature Index. 
 
6. References 
 
[1] James C.C. Chen and Arbee L.P. Chen, 
“Query by Rhythm An Approach for Song 
Retrieval in Music Databases,” In Proc. Of 
Int’l Workshop on Research Issues in Data 
Engineering, Pages 139-146, 1998. 
[2] Arbee L.P. Chen, M. Chang, J. Chen, J.L. 
Hsu, C.H. Hsu, and Spot Y.S. Hua, “Query 
by Music Segments: An Efficient Approach 
for Song Retrieval,” In Proc. of IEEE Int’l 
Conf. on Multimedia and Expro, 2000. 
[3] A. Guttman, “R-Trees A Dynamic Index 
Structure For Spatial Search,” in proc. of the 
1984 ACM SIGMOD Int’l Conf. on 
Management of Data, Pages 47-57, 1984. 
[4] J.L. Hsu, C.C. Liu, and Arbee L.P. Chen, 
“Efficient Repeating Patterrn Finding in 
Music Databases,” In Proc. of ACM Int’l 
Conf. on Information and Knowledge 
Management, 1998. 
[5] C. L. Krumhansl, “Cognitive Foundations of 
Musical Pitch,” Oxford University Press, 
New York, 1990. 
[6] W. Lee and A.L.P. Chen, “Efficient Multi-
Feature Index Structures for Music Data 
Retrieval,” In Proc. Of SPIE Conf. on 
Storage and Retrieval for Image and Video 
Database, 2000. 
[7] Chia-Han Lin and Arbee L. P. Chen, 
“Indexing and Matching Multiple-Attribute 
Strings for Efficient Multimedia Query 
Processing,” IEEE Transactions On 
Multimedia, Vol. 8, No. 2, April 2006. 
[8] C.C. Liu, J.L. Hsu, and Arbee L.P. Chen, 
“Efficient Theme and Non-Trivial Repeating 
Pattern Discovering in Music Databases,” In 
Proc. of IEEE Data Engineering, Pages 14-
21, 1999. 
[9] C.C. Liu, J.L. Hsu, and Arbee L.P. Chen, 
“An Approximate String Matching 
Algorithm for Content-Based Music Data 
Retrieval,” In Proc. of IEEE Int’l Conf. on 
Multimedia Computing and Systems, Pages 
451-456, 1999. 
[10] Yu-lung Lo and Shiou-jiuan Chen, “The 
Numeric Indexing For Music Data,” in Proc. 
of the IEEE 22nd ICDCS Workshops – the 
4th Int’l Workshop on Multimedia Network 
Systems and Applications (MNSA’2002), 
Vienna, Austria, Pages 258-263, July 2002. 
[11] Yu-lung Lo and Shiou-jiuan Chen, “Multi-
feature Indexing For Music Data,” in Proc. 
Of the IEEE 23nd ICDCS Workshops – the 
5th Int’l Workshop on Multimedia Network 
Systems and Applications (MNSA’2003), 
Providence, Rhode Island, USA, Pages 654-
659, May 19-22, 2003. 
[12] Yu-lung Lo, Ho-cheng Yu, and Mei-chin Fan, 
“Efficient Non-trivial Repeating Pattern 
Discovering in Music Databses,” Tamsui 
Oxford Journal of Mathematical Sciences, 
Vol. 17, No. 2, Pages 163-187, Nov. 2001. 
 6
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                            96 年 7 月 28 日 
報告人姓名 羅 有 隆 服務機構
及職稱 
朝陽科技大學 資訊管理系 
副教授 
     時間 
會議 
     地點 
96/07/11 ~ 96/07/13 
Melbourne, Austraila 
本會核定
補助文號
NSC 95-2221-E-324-039 
會議 
名稱 
 (中文) 第六屆電腦與資訊科學國際研討會 
 (英文) 6th IEEE International Conference on Computer and Information 
Science
發表 
論文 
題目 
 (中文) 混合式的音樂資料多特徵索引 
 (英文) Hybrid Multi-Feature Indexing for Music Data Retrieval 
一、參加會議經過 
7/10 下午抵達澳洲墨爾本(Melbourne, Australia)，進住預定飯店。因開會所在之飯店
(Rydges Hotel)價位相當高，因此住宿飯店另訂於約十分鐘距離，較廉價之一
般飯店。
7/11 早上至會場報到領取會議資料，參加 9 點開幕，並聆聽 Keynote speech 的演講
與討論，題目為“Meta-learning: From Classification to Forecasting, to 
Optimization, and Beyond”。論文發表則於 10:40AM 開始，同一時段有三個
Sessions 分三個場地進行。而個人此次的口頭報告，則被安排在第二天 7/12
下午的場次。今天主要聽取報告的研究領域為 Image Processing 與 Wireless 
Computing。 
7/12  本校資工系謝政勳主任亦參加此研討會，於今早發表口頭報告。此次會議未
特別舉辦晚宴，但以今天的午宴取代，同時頒獎此次會議的得獎人員。席間認
識了由台灣到澳洲留學而留在澳洲任教的 Prof. Yi-Ping Phoebe Chen (Deakin 
University, Australia)，互相允諾未來有機會將進一步的學術交流，並互相留下
連絡資料。個人口頭報告在 1:20PM ~ 3:20PM 的場次，Session 主題為 Data 
Mining, Data Warehousing & Database，主持人為 Dr. Gongzhu Hu (Central 
Michigan University, USA)。此場次，有六篇論文發表，每篇約有 20 分鐘的報
告時間。(Reference:Yu-lung Lo and Chun-hsiung Wang, “Hybrid Multi-Feature 
Indexing for Music Data Retrieval,” Proceedings of the 6th IEEE/ACIS 
International Conference on Computer and Information Science (ICIS 2007), 
Melbourne, Austraila, July 11-13, 2007, pp. 543-548.) 
7/13 繼續參與會議，主要參加有關 Multimedia Computing 與 Data Mining 的相關論
文發表，至 5:40PM 整個會議結束。 
 
二、與會心得 
1. 有機會於大型國際學術研討會上發表個人的研究成果，對自己是一項鼓勵。 同
時此會議的主題涵蓋廣泛，多聽不同領域的研究構想，對自己的研究方向可以多
所啟發，以及對未來可能的發展方向，有了更深一層的領會，對未來個人的研究
將有莫大的幫助。 
附件三
 
表 Y04 
