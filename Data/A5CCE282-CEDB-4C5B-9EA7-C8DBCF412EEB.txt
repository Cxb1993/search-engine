???????? 
????? k-out-of-n: F (Con/k/n:F)???????? n????????????
????????? k?(??? k?)?????????????????? n????
?????????????????????? con/k/n:F????? con/k/n:F????
?????????????????????????????????????? 1980
?? Kontoleon ?????????????????????Hwang & Wright ? 1995
???????????????????????????????????????
???????????? O(k3log(n/k))???????????????? O(k2log(n))
????????????????????? Con/k/n:F??? Con/k/n:F??????? 
??????? k-out-of-n: F???????????????????? 
???????? 
A consecutive k-out-of-n:F (Con/k/n:F) system is an ordered sequence of n components that 
fails if and only if at least k consecutive components in the system fail. Two cases exist - linear or 
circular, according to whether the components are arranged on a straight line or on a circle. This 
system can represent telecommunications, oil pipelines, computer ring networks, and other kinds 
of systems. Such systems were introduced by Kontoleon and extensively studied in many papers. 
Hwang & Wright derived an O(k3log(n/k)) time algorithm for computing the reliability of a 
Con/k/n:F system with i.i.d. components. In the model of such a system, the components are 
assumed to be statistically independent and each component has the same probability p of 
working and probability q ≅ 1−p of failing. An O(k2log(n)) algorithm is presented for computing 
the reliability of the consecutive-k-out-of-n: F system. This algorithm is more efficient and 
drastically simpler than Hwang & Wright’s O(k3log(n/k)) algorithm. 
Keywords: consecutive k-out-of-n: F system, reliability, general Fibonacci number, algorithm 
 II
? RL(n)??????????? 
kninRqpnR
k
i
L
i
L ≥∑ −−⋅⋅=
−
=
1
0
for     )1()(
 
? RL(n)=1 ? 0 ≤ n ≤ k−1. 
?? p????????????q(=1−p)??????????????? n???
?????? k?(n−1, n−2, …, n−k)???????????????????????
?????????(general Fibonacci numbers)????? 
kninFnF
k
i
>∑ −−= −
=
1
0
for     )1()(  
? F(n)=0 ? 1 ≤ n ≤ k−1, ? F(k)=1 
? k=2????????????????????????????????????
? Con/k/n:F ?????????????????? M? k×k ??? 









 −−
×
⋅⋅⋅⋅
=
   0   1 000
      
   0   0 100
   0   0 010
   0   0 001
122
L
LLLLLL
L
L
L
L qpqpqpqpp
M
kk
kk
. 
??????????? 








−
−
−
×=
+−
−
×× )(
)2(
)1(
)1(
)1(
)(
11 knR
nR
nR
M
knR
nR
nR
L
L
L
kL
L
L
k
MM  
???????(n-k)??????? 








+−
−
×)1(
)1(
)(
1knR
nR
nR
L
L
L
k
M 







−×=
×
−
)1(
)1(
)(
1R
kR
kR
M
L
L
L
k
kn
M 


 −
×=
×
−
1
1
1
1
M
q
M
k
k
kn   
???????? Mn−k???? RL(n)?????????? Mn−k? O(log(n))???
??????? 
Fast-Matrix-Multiplication Algorithm 
Input : M, n, k 
Output: Mn−k 
begin 
M2 ← I;  /* I is an k×k identity matrix */ 
for r ← 0 to  )(log2 kn −  do 
  if the rth bit of the binary representation of (n-k) is 1 then M2 ← M2×M;   
  M ← M×M; 
 2
