  2
actions chosen at each execution step. Instead, the robot must 
discover which actions yield the most reward using only 
reinforcement signals. In [35], dynamic fuzzy Q-learning 
(DFQL) is proposed for reinforcement fuzzy control of a mobile 
robot for wall-following. The DFQL learning approach cannot 
find a successful FC that controls the robot to move along the 
wall while satisfying a distance constraint. That approach can 
only design a FC that reduces the times it takes the robot to 
move outside a distance constraint. This paper proposes a new 
reinforcement FC learning method, i.e. the reinforcement ant 
optimized fuzzy controller design method (RAOFC), for robot 
wall-following control. No pre-assignment of fuzzy rules is 
required in RAOFC because all fuzzy control rules are 
generated on-line. In contrast to [34], the RAOFC method can 
successfully design a FC that moves a robot along the wall 
inside a distance constraint.  
The rest of this report is organized as follows. Section 2 
introduces the structure of the T2SONFS. Section 3 introduces 
T2SONFS structure and parameter learning. Section 4 
introduces FPGA implementation of learned T2SONFS. Section 
5 describes the mobile robot and wall fallowing control problem. 
Section 6 introduces the designed interval type-2 FC. Section 7 
introduces online aligned interval type-2 fuzzy clustering 
(AIT2FC) for antecedent part learning. Section 8 introduces 
Q-value aided ACO (QACO) algorithm for consequent part 
learning. Section 9 presents T2SONFS performance in 
simulation examples, verifies the designed FPGA chip 
performance, and conducts RAOFC simulations and experiment.  
Finally, Section 10 draws conclusions. 
2. T2SONFS STRUCTURE 
This section introduces the structure of a Type-2 
Self-Organizing Neural Fuzzy System (T2SONFS). Figure 1 
shows the proposed system structure, which has a total of five 
layers. This five-layer system forms an interval type-2 fuzzy 
system with a Mamdani-type consequent part. Each rule in the 
T2SONFS has the following form 
Rule i :  IF 1x  is 1
iA  AND …  AND nx  is inA  THEN y  is  
iG ,  i =1, … , M       (1) 
where  ijA , j =1,… , n  and iG  are interval type-2 fuzzy sets, 
and M  is the number of rules. Detailed mathematical functions 
of each layer are introduced as follows.  
Layer 1 (Input layer): The inputs are crisp values. For each 
input to have a similar scale, nodes in this layer scale inputs ix , 
1, ,i n= … , to around the range [ 1,  1]−  or  [0, 1]. Note that no 
weights must be adjusted in this layer.  
Layer 2 (Fuzzification layer): This layer performs the 
fuzzification operation. Each node in this layer defines an 
interval type-2 membership function. For the i th fuzzy set ijA  
in input variable jx , a Gaussian primary membership function 
(MF) is used which has a fixed standard deviation σ  and an 
uncertain mean that takes on values in 1 2[ , ]m m  (Fig. 2), i.e.,  
2
1 2
1exp{ ( ) } ( , ; ), [ ,  ]
2ij
i
j j i i i i i
j j j j j jiA
j
x m
N m x m m mµ σ
σ
−
= − ≡ ∈  (2) 
 
 
y
Layer4
Layer3
Layer2
Layer1
1F
… …
xn
… …
xj
… …
x1
R1 …… Rj RM- - - - -
MF
[  ,  ]l ry y
Layer5
⎡⎢⎣
⎡⎢⎣
⎡⎢⎣
⎡⎢⎣
⎡⎢⎣
jF
1 1[ ,  ]l rw w [ ,  ]j jl rw w
[ ,  ]M Ml rw w
 
Fig. 1.  Structure of the Type-2 Self-Organizing Neural Fuzzy 
System (T2SONFS) 
0 2 4 6 8 10
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
 
Fig. 2. An interval type-2 fuzzy set with an uncertain mean. 
The footprint of uncertainty (FOU) of this MF can be 
represented as a bounded interval in terms of upper MF, i
jA
µ  , 
and lower MF, i
jA
µ  , where  
1 1
1 2
2 2
( , ; )          
( )=     1                          <          
( , ; )          
i i i
j j j j j
i i
j j j ji
j i i i
j j j j j
N m x x m
x m x m
A
N m x x m
σ
σ
µ
⎧ <⎪⎪
<⎨⎪
>⎪⎩

    (3) 
and  
1 2
2
1 2
1
( , ; )         
2( )=
( , ; )         
2
i i
j ji i
j j j j
ji i i
j j ji i
j j j j
m m
N m x x
x
m m
N m x x
A
σ
σ
µ
⎧ +
<⎪⎪⎨
+⎪ >⎪⎩
            (4) 
That is, the output of each node can be represented as an interval 
[ i
jA
µ  , i
jA
µ  ]. 
Layer 3 (Meet layer): Each node in this layer is a rule node, 
and performs the fuzzy meet operation [6] using an algebraic 
product t-norm operation. The output of a rule node is a firing 
strength, iF , which is an interval type-1 fuzzy set. The firing 
strength is computed as follows [6]  
[ , ]i i iF f f=                                    (5) 
where  
1
i
j
n
i A
j
f µ
=
= ∏   and 
1
i
j
n
i A
j
f µ
=
= ∏                            (6) 
  4
3.2. Parameter Learning 
The parameter learning phase occurs concurrently with 
the structure learning phase. To clarify, consider the 
single-output case, where the objective is to minimize the error 
function 
21 [ ( ) ( )]
2 d
E y t y t= −                          (17) 
Here, ( )y t  and ( )dy t  denote real and desired outputs, 
respectively. The Karnik-Mendel iterative procedure for 
computing ly  and ry  in Eq. (8) and (9) has the premise that 
i
lw  and 
i
rw  are re-arranged in ascending order. During the 
parameter learning process, the ilw  and 
i
rw  values change, 
and their orders and corresponding rule orders in computing Eq. 
(8) and (9) should change accordingly. The T2SONFS approach 
considers this problem in its derived rule-ordered Kalman 
filtering algorithm for consequent parameter learning. Let 
1 2( , ,..., )M Tf f f=f  and 1 2( , ,..., )M Tf f f=f  where 
the firing strengths are expressed according to the original rule 
order. According to [7], Eq. (8) can be re-expressed in the 
following rule-ordered form 
1 1 2 2
1
( ) (
   
T T T T T T
l l l l
l L M
l i l ii=1 i L
Q E E Q Q E E Q
y
Q Q )
= +
+
=
+∑ ∑
l lf w f w
f f                         (18) 
where 
 1 1 2( , ,..., , ,..., )
L M
LE
×
= ∈ℜ0 0e e e ,               
( )
2 1 2( ,..., , , ,..., )
M L M
M LE
− ×
−
= ∈ℜ0 0 ε ε ε ,      (19) 
and where Li ∈ℜe  and M Li −∈ℜε  are elementary vectors. 
Similarly, Eq. (9) can be re-expressed in the following 
rule-ordered form  
3 3 4 4
1
( ) (
T T T T T T
r r r r
r R M
r i r ii=1 i R
Q E E Q Q E E Q
y
Q Q )
= +
+
=
+∑ ∑
r rf w f w
f f
                       (20) 
where 
3 1 2( , ,..., , ,..., )
R M
RE
×
= ∈ℜ0 0e e e ,        
                 ( )4 1 2( ,..., , , ,..., )
M R M
M RE
− ×
−
= ∈ℜ0 0 ε ε ε , (21) 
and where Ri ∈ℜe  and M Ri −∈ℜε  are elementary vectors. 
In [9], consequent parameters are tuned by a gradient descent 
algorithm. In a T2SONFS, a rule-ordered Kalman filtering 
algorithm tunes consequent parameters. Equation (18) can be 
re-expressed as  
  l l ly =
T wφ , 1T Ml ×∈ℜφ                              (22) 
where  
 1 1 2 2
1
( ) (
T T T T T T
l l l lT
l L M
l i l ii=1 i L
Q E E Q Q E E Q
Q Q )
= +
+
=
+∑ ∑φ
f f
f f
                       (23) 
And Eq. (20) can be re-expressed as  
r r ry =
T wφ , 1T Mr ×∈ℜφ                             (24) 
where  
3 3 4 4
1
( ) (
T T T T T T
r r r rT
r R M
r i r ii=1 i R
Q E E Q Q E E Q
Q Q )
= +
+
=
+∑ ∑
f f
f f
φ                   (25) 
respectively. Thus, the output y  in Eq. (10) can be 
re-expressed as  
             
1 1( ) ( ) [   ]
2 2
l
l r l l r r l r
r
y y y
⎡ ⎤
= + = + = ⎢ ⎥⎣ ⎦
φ φ φ φT T T T ww w
w
     (26) 
where 0.5l l=
T Tφ φ  and 0.5r r=T Tφ φ . Since T2SONFS rules 
are on-line generated, dimension of lw  in Eq. (26) increases 
with time and the positions of liw  and riw  in a vector change 
accordingly. To keep constant positions of liw  and riw  in a 
vector, vector components in Eq. (26) are rearranged in rule 
order in the proposed rule-ordered Kalman filtering algorithm. 
That is, y  is re-expressed as  
1
1
1 1 ( ) ( )
( )
( )
[     ]
 
l
r
l r lM t rM t
lM t
RM t
w
w
y
w
w
φ φ φ φ
⎡ ⎤⎢ ⎥⎢ ⎥⎢ ⎥ ′= ⎢ ⎥⎢ ⎥⎢ ⎥⎣ ⎦
#"  wΤφ                   (27) 
Given the training pair ( ( ( 1), ( 1))dt y t+ +x  at time 1t + , 
new parameters ( 1)l t +w  and ( 1)r t +w  are obtained by 
executing the following rule-ordered Kalamn filtering algorithm 
( 1) = ( ) ( 1) ( 1)( ( 1) ( 1) ( )) 
1 ( ) ( 1) ( 1) ( )( 1) [ ( ) ]
( 1) ( )
dt t S t t y t t t
S t t S tS t S t
t S t
τ
λ λ
′ ′+ + + + + − +
′ ′+ +
+ = −
′ ′+ +
Τ
Τ
Τ
φ φ
φ φ
φ φ
w w w
           
(28) 
where 0 1λ< ≤  is a forgetting factor ( λ =0.9995 in this paper) 
and M MS ×∈ℜ . Each time a new training sample is presented, 
lw  and rw  are updated using Eq. (28). Crossover points L  
and R , matrices iE , 1,..., 4i = , lQ  and rQ  in Eq. (18)-(28) 
are updated accordingly.  
   For antecedent parameters in T2SONFS, they are tuned by a 
gradient descent algorithm. That is, 
 1 1
1
( 1) ( )i ij j i
j
Em t m t
m
η ∂+ = −
∂
                          (29) 
                2 2
2
( 1) ( )i ij j i
j
Em t m t
m
η ∂+ = −
∂
                         (30) 
                ( 1) ( )i ij j i
j
Et tσ σ η
σ
∂
+ = −
∂
                          (31) 
where η  is a learning coefficient (η =0.05 in this paper). 
Details of the learning algorithm can be found in [7], where the 
authors had explicitly derived gradient calculations 
considering the rule re-ordering problem.  
The T2SONFS structure in Section II is suitable for 
software implementation. To reduce the hardware 
implementation cost of T2SONFS, some of the T2SONFS layer 
functions were modified and the parameters learning equations 
were modified accordingly. The modified 
hardware-implemented T2SONFS is called H-T2SONFS, and 
the modifications are described as follows. Layer 3 of the 
H-T2SONFS replaces the product function in Eq. (6) by a 
minimum function. That is, the AND operation becomes  
  6
input-output mapping of each interval type-2 Gaussian 
membership function is stored in a LUT using the available 
RAM block in a FPGA. The number of type-2 fuzzy sets in 
each H-T2SONFS input variable is equal to the rule 
number M . Since each input variable contains M  type-2 
fuzzy sets, each input variable requires 2M ×  RAMs for 
storing the 2M ×  membership values 
1 1, ,..., ,M Mµ µ µ µ . The input variable resolution is 8 bits. 
This creates 256 possible input values, each of which 
serves directly as a memory address for concurrently 
retrieving the membership values stored in the 2M ×  
RAMs. The membership values are all in the range [0, 1], 
and the resolution is 8 bits, where the LSD (Least 
Significant Digit) is 82− =0.00390625. The size of each 
RAM is 256×8 bits= 256 bytes, and the total RAM used is 
2 256M × ×  bytes= 512M ×  bytes for each input 
variable.  
(2) Crossover Calculation Module: This module receives the 
external inputs and calculates the crossover points L  in 
(35) and R  in (36) (or in (18) and (20) when normalization 
term is used). This module stores the crossover points for 
each input sample in two LUTs, one for crossover points 
L  and the other for R . When (18) and (20) are used, the 
size of each point is represented by 2log ( )M⎡ ⎤⎢ ⎥  bits.  
When (35) and (36) are used, the two LUTs reduce to two 
registers because the two equations use only two crossover 
points..  
(3) Meet Module: Figure 6 shows the module. The main 
function of this module is to perform the minimum 
operation in Eq. (32). Each Meet Module contains M  
“MIN” circuits. The j th MIN circuit in the upper Meet 
Module in Fig. 6 receives inputs 1 jµ , …, njµ , and sends 
out the minimum one. The order of the upper module 
output values 1f , …, Mf  and 1g , …, Mg  are arranged 
in advance in the circuit according to the values of  1wA , …, 
MwA  and 
1
rw , …, 
M
rw , respectively, as described in 
Subsection IV-A.  
(4) Output Processing Module: This module executes the 
product terms i ilf w  and 
i i
lf w  in Eq. (35) and 
i i
rf w  and 
i i
rf w  in Eq. (36). The product operation is implemented 
by shift operations instead of multipliers to reduce 
hardware design cost. Each product result is represented by 
13 bits, where the LSD is 92− =0.001953125 and the MSD 
(Most Significant Digit) is a sign bit. Figure 7 shows the 
module for executing the product terms in Eq. (35). The 
crossover point L , which is already available from the 
Crossover Calculation Module in Stage one, is sent to the 
multiplier (MUX) in this module to determine which term, 
if  or if , should be selected to multiply 
i
lw .  
(5) System Output Module: The negative term values from the 
Output Processing Module are first represented using two’s 
complement. This module then adds all of the product 
terms from the Output Processing Module to get l ry y+ , 
as Fig. 8 shows. Finally, a one-bit right shift circuit  
MIN
11
1n
µ
µ
#
1f8
…
..
1M
nM
µ
µ
# Mf8MIN
8
8
8
8
MIN
11
1n
µ
µ
# 1f
8
…
..
1M
nM
µ
µ
# Mf
8
MIN
8
8
8
8
8 if
1g
Mg
…
..
jf
1g
…
..
Mg
8
…
..
…
..
#
#
#
#
…
..
…
..
…
..
…
..
…
..
…
..
 
Fig. 6. Meet module. 
Mf
1f
Mf
MUX
L
1f
MUL
1
1l
f
w 1lterm
13
13
8
13
13
MUL
M
lM
f
w lMterm
13
13
8
8
8
8
8
..…
..…
…
..
…
...
…
.…
..…
..…
…
..
…
...
…
.…
 
Fig. 7. Output processing module. 
Add
13
output
1lterm
lMterm
rMterm
Div 2
13
1rterm
13
…
.
…
..
13
…
.
…
..
 
Fig. 8. System output module. 
implements ( ) / 2l ry y+ .  
5. MOBILE ROBOT AND PROBLEM DESCRIPTION 
This study uses the PIONEER 3-DX mobile robot 
(http://www.mobilerobots.com/) shown in Fig. 9. The robot 
body measures 45 cm×38 cm×25 cm. This robot includes two 
19 cm wheels, one caster, and eight ultrasonic transducer 
(range-finding sonar) sensors in front. Its two wheels are 
controlled by two motors with 500-tick encoders. The front 
sensors read ranges from 15 cm to approximately 5m, and are 
arranged to provide 180-degree forward coverage, as Fig. 10 
shows. This study aims to design a FC for robot wall-following 
at a constant speed of 20 cm/sec. As in [35], this study considers  
 
  8
7. ANTECEDENT PART LEARNING-AIT2FC 
Since the firing strength in the interval type-2 FC is an 
interval (see (5)), the center of the interval is computed  
1
( )
2
i i
c if f f= +                              (46) 
The firing strength center then serves as a rule generation 
criterion. That is, for each piece of incoming data x  find 
1
arg  max ( )ic
i M
I f
≤ ≤
= x                          (47) 
where M  is the number of existing rules. If ( )Ic thf φ≤x , then a 
new rule is generated and 1M M= + , where (0,1)thφ ∈  is a 
pre-specified threshold. The threshold decides the number of 
input clusters generated in a RAOFC. Once a new rule is 
generated, there is the problem on determining if the 
corresponding type-2 fuzzy set in each input variable should be 
generated. One simple solution is to generate a new type-2 fuzzy 
set in each input variable for a new fuzzy rule. However, this 
method usually generates highly overlapping fuzzy sets in each 
input variable and reduces FC interpretability. The proposed 
AIT2FC addresses this problem by proposing a novel and 
efficient type-2 fuzzy set generation method, as introduced 
below.   
The idea behind (47) is reapplied to one-dimensional space 
in AIT2FC, where the membership value [ i
jA
µ  , i
jA
µ  ] in (39) is 
used as fuzzy set generation criterion. Since this value is an 
interval, its center i
j
c
A
µ   is computed as follows 
1
( )
2
i i i
j j j
c
A A A
µ µ µ= +                               (48) 
For each newly generated rule, compute  
1
arg max i
j
j
c
j Ai S
I µ
≤ ≤
=  , 1, ,j n= … ,                      (49) 
where jS  is the number of existing type-2 fuzzy sets in input 
variable j . If I j
j
thA
µ ψ> , where thψ ∈ [0, 1] is a pre-specified 
threshold, then use the existing fuzzy set jI
jA  as the antecedent 
part of the new rule in input variable j . In other words, 
different rules share the same fuzzy set in input variable j . 
Geometrically, this means different clusters are aligned in the j  
input dimension. If I j
j
thA
µ ψ≤ , generate a new type-2 fuzzy set 
in input variable j  and set jS = jS +1. Parameter thψ  
determines the number of type-2 fuzzy sets in each input 
variables. A smaller value of thψ  generates a smaller number of 
type-2 fuzzy sets. This paper sets thψ  at 0.7.  
Once a new interval type-2 fuzzy set is generated, it should 
be assigned with a shape. According to the notation in (3) and 
(4),  
 
 
1u 1u
2u 2u
3u
2 4q
Initial
state
1 4q
1 1q
1 2q
1 3q
2 1q
2 2q
2 3q
3 4q
3 1q
3 2q
3 3q3u 3u
4u4u 4u
2u
1u
1R 2R 3R
14τ
23τ
31τ
1 1τ
2 1τ
1 2τ 1 4
τ
2 2τ 2 4τ
3 1τ
1 3τ
2 3τ
3 2τ 3 4
τ3 3τ
1u 2u 3u 4u
1R
2R
3R
Pheromone
matrix
 
Fig. 11. The consequent value is selected by an ant according to pheromone trails 
and Q-values, where the tour of an ant is marked by a bold line. The 
corresponding pheromone matrix is shown below. 
 
the initial uncertain mean ijm  and width 
i
jσ  for the ( 1)jk t + -th 
interval type-2 fuzzy set in input variable jx are  
[ ,  ]ij j jm x m x m∈ − ∆ + ∆                          (50) 
                              ( 1) 0.4jk t jσ + =                                   (51) 
where the input data jx  is used as an uncertain mean center and 
m∆  assigns the range of mean uncertainty. This paper sets m∆  
to be 0.08.    
8. CONSEQUENT PART LEARNING 
In RAOFC, rules are generated online using AIT2FC. For 
each rule, the consequent action is selected from a predefined set 
1{ ,  ,  }NU u u= … . Therefore, there is a total of MN  
combinations of consequent actions. The paper proposes the use 
of Q-value aided ant colony optimization (QACO) to select one 
combination that satisfies FC performance constraint.  
   In the QACO approach, the combination of selected 
consequent actions functions as an ant tour. Figure 11 illustrates 
the case where three rules are generated and 1{ ,U u=  2u , 3u , 
4u }. The size of the pheromone matrix is M N×  and each 
entry in the matrix is denoted by ihτ , where 1, ...,i M=  and 
1, ...,h N= . As Fig. 11 shows, when the ant arrives at rule iR , 
then the probability ihp  that action hu  is selected from 
N candidate actions (denoted by nodes) of 1iR +  is partly 
dependent on 1i hτ + , 1, ...,h N= . In addition to the pheromone 
trail, consequent selection probability is also influenced by the 
Q-values ihq . Figure 11 also shows the distributions of ihq . The 
selection probability ihp  in QACO is defined by  
1
11
( )( )
( )
( )( )
ih
iz
q
i h
ih N q
i zz
k e
p k
k e
β
β
τ
τ
+
+=
= ∑  1, ...,i M=  and 1, ...,h N=  (52) 
where e  denotes an exponential function. The parameter β  
controls the influence weighting of  τ  and q . This paper sets 
  10
0 20 40 60 80 100 120 140 160 180 200
-2
-1.5
-1
-0.5
0
0.5
1
1.5
2
time step
y(
k+
1)
desired
actual
 
Fig. 12. T2SONFS Identification results using four rules in Example 1. 
0 20 40 60 80 100 120 140 160 180 200
-2
-1
0
1
2
m
ag
ni
tu
de
yd(t+1)
yn(t+1)
y(t+1)
0 20 40 60 80 100 120 140 160 180 200
-2
-1
0
1
2
time step(t)
m
ag
ni
tu
de
yd(t+1)
yn(t+1)
y(t+1)
(a) 
(b) 
 
Fig. 13. Test results of noisy plant identification using T2SONFS under different 
noise ranges (a) [ 0.1− , 0.1], (b) [ 0.5− , 0.5] in Example 1, where ( 1)dy t + , 
( 1)ny t + , and ( 1)y t +  denote clean plant output, noisy output, and 
T2SONFS output, respectively.  
 
 
TABLE I. PERFORMANCE OF T2SONFS AND OTHER COMPARED TYPE 
1 AND TYPE 2 FUZZY STSTEMS FOR PLANT IDENTIFICATION IN 
EXAMPLE 1. 
Methods FALCON SONFIN  T2FLS T2SONFS T2SONFS
Rule number 6 6 4 4 6 
Epochs 60000 500 500 500 500 
RMSE 0.02 0.018 0.023 0.013 0.0066 
 
TABLE II. PERFORMANCE OF T2SONFS AND SONFIN FOR NOSIY 
PLANT IDENTIFICATION IN EXAMPLE 1. 
Noise 
Range 
[ 0.1− , 0.1] [ 0.5− , 0.5] 
Methods SONFIN SONFIN T2SONFS SONFIN SONFIN T2SONFS
Rule 
number 
6 6 6 6 6 6 
Epochs 500 5000 500 500 5000 500 
RMSE 0.041 0.037 0.034 0.170 0.169 0.138 
 
Training was performed for 500 epochs. Table I shows the 
T2SONFS performance with different rules. Figure 12 shows 
the T2SONFS identification results with four rules.  
The Mamdani-type interval type-2 fuzzy logic system with 
all parameters tuned by the gradient descent algorithm [7], 
denoted as T2FLS hereafter, was then compared to the 
T2SONFS. The T2FLS has no structure learning, and the 
number of rules in T2FLS is assigned a priori. Table I shows 
that with the same number of rules, the T2SONFS RMSE is 
much smaller than the T2FLS RMSE.  
 
Fig. 14. Identification results of the software and hardware implemented 
H-T2SONFS in Example 2. 
 
This study also compared the performance of type-1 
fuzzy neural networks (FNNs) applied to the same identification 
problem. These type-1 FNNs include the fuzzy adaptive 
learning control network (FALCON) [42] and the 
self-constructing neural fuzzy inference network (SONFIN) 
[43], both of which also have structure learning abilities and use 
Mamdani-type consequent part. Table I lists the performance of 
the FALCON and the SONFIN, indicating that the T2SONFS 
has a smaller RMSE and number of rules than both of these 
type-1 FNNs.  
This example also conducts identification of the same 
plant with noise using networks T2SONFS (type-2) and 
SONFIN (type-1). It is assumed that each measured dy  value 
contains noise and the noisy value is denoted as ny . The added 
noise is artificially generated white noise with uniform 
distribution. Simulations with noise being generated in the 
ranges of [ 0.1− , 0.1] and [ 0.5− , 0.5] are conducted. Noise is 
added to the original 200 clean training patterns. For network 
training, the inputs are ( )ny t  and ( )u t , and the desired 
output is ( 1)ny t + . After training, another set of noise is 
added to the original 200 clean patterns and noisy values 
( )ny t  are fed as learned network inputs to test noise 
resistance ability. The RMSE between the actual network 
output ( 1)y t +  and clean output ( 1)dy t +  is calculated. 
There are 20 Monte-Carlo realizations of the above training 
and test processes, and RMSEs of all realizations are averaged. 
Performance of T2SONFS and SONFIN that contain the same 
number of six rules are compared. Table II shows the average 
RMSE of T2SONFS and SONFIN with different training 
epochs and different noise levels. The results show that when 
there is noise the RMSE of T2SONFS is smaller than SONFIN 
even when the latter is trained with a much higher number of 
epochs, indicating that T2SONFS is more robust than SONFIN. 
Figure 13 illustrates one test result of T2SONFS, showing that 
the T2SONFS outputs do not change as violently as the 
measured noisy outputs. 
 
9.2. Verification of FPGA-implemented T2SONFS  
The FPGA device uses a Xilinx Virtex-4 
XC4vlx60-10ff1148 chip. The electrical design automation 
(EDA) software tools used in this study are ISE 7.1i and 
ModelSim 5.7d. 
Example 2. This example implements H-T2SONFS using a 
FPGA chip for modeling the nonlinear system described in  
 
  12
 
 
Fig. 18. Wall-following control positions of the PIONEER 3-DX using RAOFC 
in a real environment.  
 
figure shows that the robot collides with the wall for most 
realizations.  
Similar robot wall-following tasks using type-1 FC and 
dynamic fuzzy Q-learning (DFQL) are studied in [34]. The 
DFQL is applied to the same reinforcement wall following 
control problem, and produces no successful FC after 30 runs. 
This approach can only design a FC that reduces the times it 
takes the robot to move outside a distance constraint. The result 
also verifies the effect of combining ACO with fuzzy 
Q-learning in the QACO. In [31], particle swarm optimization 
(PSO) is used to train a type-1 FC  for robot motion control. The 
PSO is also applied to the same reinforcement wall following 
control problem using type-1 FC, where the total number of 
control time steps is used as particle performance index. The 
PSO swarm size is also set to be aN =15. Only two runs succeed 
for a total of 30 runs.  
Example 4. (Experiment) 
The software designed type-2 FC in Example 3 is applied to 
practical wall-following control of the PIONEER 3-DX in this 
experiment. Since the practical environment is smaller than that 
in the simulation, this experiment sets the constraint to be 
4S ∈ [0.2, 1.2]m and 1S ≥ 0.2m at every time step. That is, the 
robot moves closer to the wall. The robot is remotely controlled 
using a personal computer via IEEE802.11b wireless 
communication. Figure 18 shows some images of the real 
environment and robot positions. The number of time steps the 
robot moves outside the distance constraint is zero. The 
designed type-2 FC successfully controls a practical robot in the 
wall-following control task. 
10. CONCLUSIONS AND SELF-EVALUATION 
In this project, we have successfully designed a T2SONFS 
for automatic structure and parameter learning of interval type-2 
FLS. Simulation results show that the T2SONFS outperforms 
several well-known interval type-2 FLS and type-1 FLS that 
also have structure learning ability. Simulation examples also 
show that type-2 FLS are more robust to noisy data than type-1 
FLS. The proposed new FPGA circuit for implementing interval 
type 2 FLS is simple and effective. The proposed RAOFC 
automatically learns a robot wall following behavior using only 
reinforcement signals. The type-2 fuzzy controller is shown to 
be more robust to noise that its type-1 counterpart. Experimental 
results show the effectiveness of the designed type2- fuzzy 
controller.  
 
REFERENCES 
[1] C. F. Juang and Y. W. Tsao, “A type-2 self-organizing neural fuzzy system 
and its FPGA implementation,” IEEE Trans. Syst., Man, and Cyber., Part B: 
Cybernetics, vol. 38, no. 6, pp. 1537-1548, Dec. 2008. 
[2] C. F. Juang and Y. W. Tsao, “A self-evolving interval type-2 fuzzy neural 
network with on-line structure and parameter learning,” IEEE Trans. Fuzzy 
Systems, vol. 16, no. 6, pp. 1411-1424, Dec. 2008 
[3] C. F. Juang and C. H. Hsu, “Reinforcement ant optimized fuzzy controller for 
mobile-robot wall-following control,” IEEE Trans. Industrial Electronics, vol. 
56, no. 10, pp. 3931-3940, Oct. 2009. 
[4] C. F. Juang and C. H. Hsu, “Reinforcement interval type-2 fuzzy controller 
design by on-line rule generation and Q-value aided ant colony 
optimization,” IEEE Trans. Syst., Man, and Cyber., Part B: Cybernetics. vol. 
39, no. 6, pp. 1528-1542, Dec. 2009. 
[5] C. F. Juang, R. B. Huang, and W. Y. Cheng, “An interval type-2 fuzzy neural 
network with support vector regression for noisy regression problems,” 
IEEE Trans. Fuzzy Systems, vol. 18, no. 4, pp. 686-699, Aug. 2010 
[6] J. M. Mendel, Uncertain Rule-Based Fuzzy Logic System: Introduction and 
New Directions, Prentice Hall, Upper Saddle River, NJ, 2001. 
[7] C. H. Wang, C. S. Cheng, and T. T. Lee, “Dynamical optimal training for 
interval type-2 fuzzy neural network (T2FNN),” IEEE Trans. on Syst., , 
Man, and Cyber. - Part B: Cybernetics, vol. 34, no. 3, pp. 1462-1477, 
2004. 
[8] H. Hagras, “Comments on dynamical optimal training for interval type-2 
fuzzy neural network (T2FNN),” IEEE Trans. Syst., Man and Cyber. - Part 
B: Cybernetics, vol. 36,  no. 5,  pp. 1206-1209, Oct. 2006.  
[9] J. M. Mendel, “Computing derivatives in interval type-2 fuzzy logic system,” 
IEEE Trans. On Fuzzy Systems, vol. 12. no. 1, pp. 84-98, Feb. 2004. 
[10] G. M. Mendez and O. Castillo, “Interval type-2 TSK fuzzy logic systems 
using hybrid learning algorithm,” Proc. IEEE Int. Conf. Fuzzy Systems, pp. 
230-235, May 22-25, 2005.  
[11] H. Eichfeld, T. K u nemund, and M. Menke, “A 12b general-purpose fuzzy 
logic controller chip,” IEEE Trans. Fuzzy Syst., vol. 4, no. 4, pp. 460-475, 
Nov. 1996. 
[12] M. J. Patyra, J. L. Grantner, and K. Koster, “Digital fuzzy logic controller: 
design and implementation, IEEE Trans. Fuzzy Syst., vol. 4, no. 4, pp. 
439-459, Nov. 1996. 
[13] G. Ascia, V. Catania, and M. Russo, “VLSI hardware architecture for 
complex fuzzy system,” IEEE Trans. Fuzzy Systems, vol. 7, no. 5, 
pp.553-569, Oct. 1999. 
[14] J. M. Jou, P. Y. Chen , and S. F. Yang , “ An adaptive fuzzy logic controller: 
its VLSI architecture and applications,” IEEE Trans. VLSI Systems, vol. 8, 
no.1, pp.52-60, Feb. 2000. 
[15] V. Salapura, “A fuzzy RISC processor,” IEEE Trans. Fuzzy Systems, vol. 8, 
no. 6, pp. 781-790, Dec. 2000.  
[16] G. Louverdis and I. Andreadis, “Design and implementation of a fuzzy 
hardware structure for morphological color image processing,” IEEE Trans. 
Circuits and Systems for Video Tech., vol. 13, no. 3, pp. 277-288, Mar. 2003. 
[17] D. Kim, “An implementation of fuzzy logic controller on the reconfigurable 
FPGA system,” IEEE Trans. Industrial Electronics, vol. 47, no. 3, pp. 
703-715, June 2000. 
[18] C. F. Juang and C. H. Hsu, “Temperature control by chip-implemented 
adaptive recurrent fuzzy controller designed by evolutionary algorithm,” 
IEEE Trans. Circuits and Systems- I: Regular Papers, vol. 52, no. 11, pp. 
2376-2384, Nov. 2005. 
[19] C. F. Juang and J. S. Chen, “Water bath temperature control by a recurrent 
fuzzy controller and its FPGA implementation,” IEEE Trans. Industrial 
Electronics, vol. 53, no. 3, pp. 941-949, June 2006. 
[20] Q. Cao, M. H. Lim, J. H. Li, Y. S. Ong, and W. L. Ng, “A context switchable 
fuzzy inference chip,” IEEE Trans. Fuzzy Systems, vol. 14, no. 4, pp. 
552-567, Aug. 2006. 
[21] S. Sanchez-Solano, A. J. Cabrera, I. Baturone, F. J. Moreno-Velo, M. Brox, 
“FPGA implementation of embedded fuzzy controllers for robotic 
applications,” IEEE Trans. Industrial Electronics, vol. 54, no. 4, pp. 
1937-1945, Aug. 2007. 
[22] M. A. Melgarejo and C. A. Pena-Reyes, “Hardware architecture and FPGA 
implementation of a type-2 fuzzy system,” Proc. of ACM Great Lakes 
Symp. on VLSI (GLSVLSI), Boston, USA, pp. 458-261, 2004.  
[23] M. A. Melgarejo, R. A. Garcia, and C. A. Pena-Reyes, “Pro-Two: a 
hardware based platform for real time type-2 fuzzy inference,” Proc. IEEE 
Int. Conf. Fuzzy Systems, vol. 2, pp. 977-982, July 2004.  
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                日期：2009 年 12 月 21  日 
一、參加會議經過 
10 日: 當天抵達會議所在地美國、德州聖安東尼奧市的 Hyaat Regency Riverwalk 飯店，
個人於會議舉行期間亦下塌與此飯店。 
11 日︰當天註冊報到。本日全部為 Tutorial 課程，與一般會議不同處為此次大會提供的
tutorial 為免費，參加者可自由挑選有興趣的領域。晚上參加 welcome reception，
大會提供簡單的自助式餐點。 
12 日: 白天為一般 session 進行。共有 14 個 oral session 平行舉辦，與一個 poster 
session。每個 oral session 共 75 分鐘。個人的論文發表在下午場次的「Intelligent 
Learning in Control Systems  II」這一個場次。此場次共有五篇論文發表，個人
為第一為發表者，發表的論文題目為「加強式自我組織區段第二型模糊系統及其螞蟻
群最佳化」。同時個人亦擔任此 session 的主席(session chair)。 
13 日: 於前一日一樣，白天為一般 session 進行。共有 14 個 oral session 平行舉辦。除
了參與 session 之外，早上聽了 keynote speech，題目為”On large systems of 
interacting robots, agents, and humans”。晚上參加晚宴，於會議所在飯店舉辦。
晚宴期間與會學者利用此機會彼此交流閒話家場。期間除了頒獎活動，大會安排樂器
演奏與魔術表演。 
14 日: 除了參與 session 之外。早上聽了 keynote speech，題目為 “Biology inspired 
techniques for soft computing, robot control, and perception in the machine 
and human-machine symbiotic systems”。停留會議地點至下午會議結束後，則立
即搭機啟程返回台灣。 
15 日: 返回台灣，結束一次豐富的會議行程。 
計畫編號 NSC 96-2628-E-005-087-MY3 
計畫名稱 以新型學習演算法設計第二型模糊系統及其應用與 FPGA 設計(3/3)  
出國人員
姓名 
莊家峰  
(Juang, Chia-Feng) 
服務機構 
及職稱 
  中興大學 電機工程系 教授 
會議時間 
2009 年 10 月 11 日
至 
2009 年 10 月 14 日 
會議地點 
美國、德州、聖安東尼奧 
會議名稱 (中文)2009 國際電機電子學會系統、人與人工頭腦學國際會議 (英文)2009 IEEE International Conference on Systems, Man, and Cybernetics 
發表論文
題目 
(中文)使用螞蟻群最佳化法設計加強式自我組織區段第二型模糊系統 
(英文) Reinforcement Self-Organizing Interval Type-2 Fuzzy System with Ant Colony 
Optimization 
 編號 1. 攝於 2009 年 10 月 12 日, 照片內容簡述： 大會的場景前留影之一。 
 
 
 
編號 2. 攝於 2009 年 10 月 11 日, 照片內容簡述：  
        大會所在地旁的 riverwalk 為到聖安東尼奧必訪景點。 
三、考察參觀活動(無是項活動者略) 
四、建議 
   因近來國際機票費與生活水準提高，若國科會可提高補助額度的話，對致力於研究的
學者而言，將可減輕與會的經濟負擔。 
五、攜回資料名稱及內容 
    會議論文集光碟 
六、其他 
 
 
 

其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
計畫相關成果與參與碩士學生黃仁伯榮獲 2009年「中華民國模糊學會碩士論文
獎」第一名 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
