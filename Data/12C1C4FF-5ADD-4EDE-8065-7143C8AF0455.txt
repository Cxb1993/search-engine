一、中英文摘要 
前一年度年計畫中，我們以互動式代
理人劇本為基礎，設計一個多代理人系統
架構，透過參考架構的建立，軟體設計師
可以清楚的明瞭互動式劇本的運作機制，
以及支援互動式劇本所需的軟體元件，並
以老人關懷議題為主要應用，實作老人關
懷互動式代理人系統（EIAS）作為本研究
所提之代理人架構的展示系統。 
在本年度年計畫中，本計畫應用了推
薦系統的機制來強化 EIAS 的服務功能。作
法是當使用者提出推薦需求時，透過代理
人找出最契合使用者需求的劇本，並讓代
理人攜帶這些劇本至客戶端，以互動的方
式展現劇本內容，再將與使用者互動的歷
程蒐集與紀錄成回饋資訊，進而利用這些
資訊來評估劇本的效益，學習更準確的掌
握使用者的偏好。最後，並將推薦系統的
概念結合 EIAS，來實際展現本研究所提出
的概念。 
 
關鍵詞：互動式劇本、代理人架構、老人
關懷系統、EIAS、推薦系統 
 
In the past, we have designed an 
interactive scenario mechanism for 
controlling interactive behaviors between 
agents and humans. Besides, we have 
proposed an interactive scenario-based 
multi-agent framework for identifying and 
describing these necessary software 
components. Finally, a multiagent-based 
eldercare system calls EIAS is built to 
exemplify the feasibility of the proposed 
framework. 
In this year, we use recommendation 
system concept to propose a more complete 
EIAS. In this system, end users receive 
scenario when they ask for recommend 
information and these scenarios are 
recommended by system to meet end user’s 
need. The agents in this system are not 
merely bring scenario and migrate to client 
site, but also interact with end user, record 
the record of interacts, collection these 
feedback to improve recommendation 
mechanism and raise benefit. Also in this 
thesis, we combine recommendation system 
with the EIAS to implement as an example. 
 
Keywords: Interactive scenario, Agent 
framework, Eldercare system, EIAS 
二、前言 
前一年度年計畫中，我們已經成功的
利用 XML（Extensible Markup Language）
發展出一套互動式劇本機制，透過互動式
劇本機制的運作，提出一個以多代理人為
基礎的老人關懷互動式代理人系統
（Eldercare Interactive Agent System, 
EIAS）。在 EIAS 中，當老人之家屬無法親
身與老人談話或是社工人員有訊息欲與老
人互動時，可以藉由劇本檔案來驅動代理
人的行為，透過代理人自主執行的特性來
與老人談話互動，達到老人關懷的目的。 
在本年度年計畫中，我們延續 EIAS，
讓社工人員能專注於設計劇本，在劇本發
佈後，系統會去找尋適合的老人家，並建
構出使用者側寫與偏好矩陣，描繪出老人
家的偏好與喜好，進而再結合推薦機制與
學習機制，藉由軟體代理人給予老人適當
的劇本資訊，並進行處理與評估劇本效益
等工作，進而提高老人關懷的正確性與適
切性。最後，並將推薦系統的概念跟 EIAS
結合，來實際展現本研究所提出的概念。 
三、研究目的 
我們訂定了數個目標與完成此目標對
應的方法，詳述如下： 
 2
能，期望能對每個客戶不同的需求與興
趣，分別提供合乎客戶興趣的推薦內容。
在個人化的推薦系統中，主要分成兩種推
薦方法，合作式推薦與內容導向式推薦。
合作式推薦常用到之前提過的產品之間的
關聯性與客戶之間的關聯性兩種方法，例
如Goldberg[ ]8 的Tapesry系統、Resnick等人
[ ]9 提出的使用者間同好度係數計算，和
Mobasher等人[ ]10 使用k-nearest Neighbor來
推薦使用者尚未選擇過的產品或資訊，目
前可見的例子有亞馬遜網路書店與
GroupLens[9]；而內容導向式推薦是一種比
較使用者的喜好與目標物內容之間的相關
性，來提供使用者建議的推薦方法，這主
要是從資訊擷取（Information Retrieval）所
延伸過來的方法。   
4.3 決策樹（Decision Tree） 
決策樹是功能強大且相當受歡迎的分
類和預測工具，以樹狀圖為基礎的方法，
其吸引人之處在於決策樹具有規則，規則
可以用文字來表示，讓人理解，或是轉化
為 SQL 之類的資料庫語言，讓落在特定類
別的資料紀錄可以被搜尋。 
決策樹是歸納學習方法[ ]11 中一種重要
的類型，是有效且普遍用來分類、預測的
方法。決策樹方法將資料由上而下地建立
一棵樹，來將資料排序並提供分類結果。
決策樹是一棵語意樹（Semantic Tree），與
一般資料結構的樹一樣有節點與樹業，每
一個節點都會安排一個適當的測試，節點
的每個邊都會有一個對應的屬性。資料要
分類時由樹的根節點（root node）開始測
試，經過測試後，根據結果決定資料該往
哪個子樹作為分類的條件繼續做決策，直
到抵達樹頁節點（leaf node）。從根節點到
每個樹頁節點有一獨特路徑，此路徑則為
用來分類資料的規則[ ]12 。 
五、研究方法 
本研究的主要目的是提出一個能依據
老人的需求與興趣，適當應用推薦系統來
提供服務滿足老人的需求。因此在本章節
將介紹本系統的系統架構與設計要素。 
5.1 多代理人系統 
在本系統架構中，有許多的代理人參
與其中，以支援 EIAS 能順暢運作。去年，
我們在代理人架構中規劃了三個代理人角
色（Agent Roles），分別是任務管理者（Task 
Manager）、劇本演員（Scenario Actor）
與權限管理者（Permission Manager）。今
年，我們增加其它組成元件和代理人角色
到 EIAS，讓 EIAS 更趨完整。圖 3.3 為 EIAS
推薦系統架構圖，以下詳述各端所參與的
代理人與其職責：  
圖 1 EIAS 推薦系統架構圖 
z 權 限 管 理 者 (Permission Manager, 
PM): 位於Client Site，主要負責為End 
User(即老人)註冊、發佈 End User 興
趣、要求推薦劇本資訊、過濾拜訪的
代理人等。 
z 任務管理者(Task Manager, TM): 位
於 Server Site，主要負責 Domain 
Expert(即社工或老人家屬)註冊、發佈
劇本資訊、獲得互動的效益評估。 
 4
初始劇本偏好矩陣建立完成之後，第
二個部份的實際偏好矩陣並沒有資料，而
是當系統開始運行時，Domain Expert 建立
出劇本，透過初始劇本偏好矩陣獲得這份
劇本與各個族群間適用關係，並依照實際
系統運作建立出實際的偏好矩陣。 
 
圖4 實際劇本偏好矩陣 
如圖 4 所示，假若 Domain Expert 撰寫
數個劇本，其中第一個與第三個劇本的類
型都為初始劇本偏好矩陣的第一種類型，
則複製第一種類型的劇本對應其他族群的
適用值，以建立實際的劇本偏好矩陣。透
過此劇本矩陣，我們可以輕易地得到每一
種族群的老人家最適合的劇本清單。同
理，社工人員若欲將某樣特定的內容推薦
給老人家觀看時，劇本偏好矩陣也能找到
最適合這份資訊的老人群。 
5.4 學習機制 
在本系統中，所產生的推薦清單，並
非固定不變，這些推薦清單必需隨著劇本
被瀏覽的頻率情形調整，也需要隨著使用
者不斷更改喜好而調整。所以當 End User
開始些收到劇本之後，系統會收集許多的
回饋資料，例如老人與 SA 互動時對劇本的
反應與滿意度等類型的資料，這些回饋資
料也就是讓系統學習的訓練資料。 
六、結果與討論 
在系統實作方面，實驗系統以JADE為
代理人程式的開發與執行平台，是由
Telecom Italia Lab所開發的代理人系統開
發與執行平台。JADE遵守FIPA[ ]13 所制定的
標準，並以Java撰寫而成，具有物件導向之
特性，設計者可以使用JADE中所提供與代
理人有關的Package來實作多代理人系
統，可有效簡化程式複雜度。各端的開發
技術與執行環境，於表 1 所示： 
表1實驗系統開發技術與執行環境 
Server site Publisher site Client site
程式開發 Java SE Java SE Java SE 
代理人平
台 JADE JADE JADE 
執行環境 JVM,JADE JVM,JADE JVM,JADE
資料庫 X 
SQL 
Server 
2000 
X 
劇本編輯
器開發 X 
ASP.NET 
for C# X 
資料挖掘
工具 X 
IBM DB2 
Intelligent 
Miner for 
data 
X 
 
6.1 .EIAS 系統之實作與執行畫面 
 
圖 5 PM—推薦功能畫面 
圖 5 是本實驗系統的 PM，它具有即時
更新使用者喜好的功能，並扮演門房的角
色，可藉由 PM 來設定使用者接受劇本的
 6
                                                                          
ACM, Vol.35,No.12, December 1992. 
[9] Paul Resnick, Neophytos Iacovou, Mitesh 
Suchak, Peter Bergstrom, and John Riedl, 
“GroupLens : An Open Architecture for 
Collaborative Filtering of netnews,” Proceedings 
of the CSCW 1994 conference,1994. 
[10]  Mobasher, Bamshad, Dai, Honghua, Luo, Tao, 
and Nakagawa, Miki, “Effective Personalization 
Based on Association Rule Discovery from Web 
Usage Data,” The 3rd ACM Workshop on Web 
information and Data management, 2001. 
[11]  H. Kim and G. Koehler, “Theory and Practice of 
Decision Tree Induction,” International Journal 
Management Science on Omega, Vol.23, Issue.6, 
pp.587–700, Dec. 1995. 
[12] Tom Mitchell, McGraw Hill, ” Machine 
Learning”, 1997. 
[13] FIPA abstract Architecture Specification, URL 
http://www.fipa.org/specs/fipa00001/SC00001
L.pdf. 
 8
資工系的王豐堅教授，大華技術學院電子系李一忠教授等。由此可見，國內除了電腦電子工
業的進步外，在複雜性開放式分散系統研究的方面其實也並不落於世界各國之人後。 
本人在 XML、軟體整合、軟體重用技術、代理人劇本設計方面的研究已有多年，在參與
此次會議發表了一篇論文﹐"A Framework for Interactive Scenario-Based Multi-Agent 
Systems "﹐見到了許多軟體代理人研究領域的大師，如英國牛津布魯克大學朱鴻教授，在與
他們交談之中瞭解到以 Scenario 為基礎的軟體代理人劇本製作將極可能是未來軟體代理人
的新方向，配合 INTERNET 的快速發展，將來如果能以最快速的方法來發展軟體代理人技術的
軟體公司將是未來市場的主宰者，這給國內軟體發展的學界與工程師一個很好的啟示。 
 
B、建議 
目前國內的資訊業正蓬勃發展中，但是卻大多將重點放在資訊硬體相關的產業，由於硬
體業的發展只能跟在國際大廠，如 IBM，日本 NEC 等的腳步之後，為他們作 OEM 或 ODM 來獲
得比較辛苦的利益。其實以國人目前的人力素質以及聰明才智，應該更可以在資訊軟體的創
作與發展方面有很大的發揮空間。我們也許不能與微軟 MICROSOFT 競爭作業系統類的軟體，
但是對於應用軟體，尤其從 INTERNET 以及 Software Agent 所帶來的商機以及教育領域等在
地化或華文相關的研究應是我們發展應用軟體的起點。 
 
C、攜回資料名稱與內容：  
 
CODS 2007 紙本及 CD 論文集各一冊。 
 
 
ST-01
OBS-01 OBS-02 OBS-03
SAB-01 SAB-02 SAB-03 SAB-04 SAB-05 SAB-06
 
Fig. 1. Hierarchical structure of scenario documents 
 
There are three kinds of documents for the interactive 
scenario mechanism. 
(i) Scenario tree (ST). The ST is the top level in the 
structure. It represents a scenario that consists of several 
interactions, and describes the OBSs related to these 
interactions. 
(ii) Operation Block Structure (OBS). An OBS is the middle 
of the structure. It represents a specific purpose 
interaction and manages a group of SABs that constitute 
the interaction. 
(iii) Scenario Activity Block (SAB). A SAT is the bottom 
level in a scenario. It represents an agent behavior, such 
as showing a message, playing a multi-media file, 
opening a web page, etc. 
 
The ST, OBS and SAB are XML-based documents. Some 
labels are defined in these documents to manage the tree 
structure and represent interactions. Table 1 shows the labels 
in a ST. The OBS_members describes the ID of OBSs in the 
scenario. Agents will refer to the first OBS in OBS_members. 
The Memo has the ST ’s description written by the scenario 
designer. 
 
Table 1. Labels in a ST 
Label Description 
ID The identifier of the ST 
OBS_members The OBS members that belong to the ST 
Memo The memo to the ST 
 
Table 2 shows the labels in an OBS. The Attribute describes 
the ID of the ST that the OBS belongs to. The SAB_members 
records the ID of the SABs that the OBS manages. Agent will 
execute the behavior described by the first SAB in 
SAB_members. The NextOBS describes the next OBS that the 
agent will refer to. 
 
Table 2. Labels in an OBS 
Label Description 
ID The identifier of the OBS 
Attribute The ST that the OBS belongs to 
SAB_members The SAB members that belong to the OBS 
NextOBS The next OBS 
Memo The memo to the OBS 
 
Table 3 shows the labels in a SAB. A SAB represents a 
behavior that could be executed by agents. These behaviors 
are showing a message, buttons or multimedia files. The 
UI_message is the text message shown to the user. The 
UI_input are the interactive buttons corresponding to the 
message. The chosen buttons will determine the next SAB 
executed by the agents. An agent may show a multimedia file 
described in UI_Output. The file may be provided by an 
agent or program described in the Interact_with label. 
 
Table 3. Labels in a SAB 
Label Description 
Node_ID The identifier of the SAT 
SAB_Attr The OBS that the SAB belongs to 
Interact_with The agent or program that provide 
resource 
SA_Output The items for feedback information 
SA_Input The flag to enable the feedback 
UI_message The message shown to the user 
UI_Input The choices to the message in the 
UI_message 
UI_Output The required multimedia files in 
rum-time 
Exception The processing to handle the 
exception 
Memo The memo to the SAB 
 
In rum-time, agents execute the behaviors described in the 
SABs. The relationships between these SABs form a tree 
structure. Figure 2 is an example of scenario tree. In the 
example, the SAB-01 is the first SAB executed by the agent. 
The SAB-01 lets the agent greet an elder man with showing a 
message. Two buttons with “Fine” and “Bad” words are 
given as choices. The chosen button will determine the next 
SAB executed by the agent. If the Fine button is chosen, the 
agent will execute the behavior described in SAB-02. 
Otherwise, the SAB-03 will be executed. Therefore, agents 
can interact with elder men by referring to the behaviors 
described in SABs. 
Hello, I am the agent of social 
worker. 
How are you today?
That is good. See you tomorrow. 
Goodbye.
Do you need the help from a 
social worker
We will dispatch a social worker 
to there
If you need some help, you can 
contact us with the phone 
number, XXXX-XXXX.
Fine Bad
Yes No
SAB-
01
SAB-
02
SAB-
03
SAB-
04
SAB-
05
 
Fig. 2. Example of scenario tree 
 
3. Interactive Scenario-based Multi-agent 
Framework 
 
To work with scenario, a multi-agent system may need 
some components and agents to be built. In this paper, we 
propose a framework to explain the participators and the 
processes in the Scenario Generation Phase and Agent 
Execution Phase. Figure 3 is the overview of the scenario-
based multi-agent system proposed in this paper. The 
<<human>>
End User
<<agent>>
Task Manager
<<agent>>
Scenario Actor
<<agent>>
Permission Manager
<<software component>>
Repository
interact
ask
access
configure
cooperate
1..*
<<human>>
Domain Expert
operate
1..*
1..*
1..*
1..* 1..*
1..*
1
1..*1
1..*
1..*
 
Fig. 6. Class Diagram of Agent Execution Phase 
 
In Agent Execution Phase, there are three agents that 
provide different services. To clearly describe agents, we use 
the Agent Diagram of AUML to define services provided by 
the agents. AUML is one specification proposed by FIPA 
(Foundation for Intelligent Physical Agents) [11]. Figure 7 
shows the Agent Diagram of TM that provides the services of 
Assign Task, Accept Support, Receive Feedback Information 
and Delete Scenario. The TM is the user interface for domain 
experts to manage agents and scenario files. The domain 
expert could use Assign Task service to assign task to SAs 
and use the Delete Scenario service to remove the scenario 
files in repository. The TM also provides services to SAs for 
cooperation. The SAs could get the resource in the repository 
through the Accept Support service and send feedback to TM 
through the Receive Feedback Information service.  
 
:Task Manager
Assign Task
Accept Support
Receive Feedback Information
Delete Scenario
 
Fig. 7. Agent Diagram of Task Manager 
 
Figure 8 shows the Agent Diagram of SA. The SA provides 
the Interact service to TM. The TM could command SAs to 
interact with end users through the Interact service. Before 
interacting with end users, SAs must get permission from 
PMs. If failing to get permission, SAs should stop the task 
and report the situation to the TM.  
 
: Scenario Actor
<<service>> Interact
Descriptions
The ability to interact with end user based on 
scenario files. Permission request should be 
arisen before interaction. Agent can request 
support or send feedback, if it is necessary.
 
Fig. 8. Agent Diagram of Scenario Actor 
 
Fig. 9 shows the Agent Diagram of PM that provides the 
services of Permission Request and Permission Configure. 
The PMs manage the permission of interaction. The SAs 
could request the permission to interact with end users 
through the Permission Request service. The end users could 
set the permission filter through the Permission Configure 
service. Programmers may implement the terms and policy in 
the filter according to requirements. 
 
: Permission 
Manager
Permission Request
Permission Configure
 
Fig. 9. Agent Diagram of Permission Manager 
 
4. Eldercare Interactive Agent System 
 
Elders may be lonely and need peoples to talk with them. 
When social workers are not able to care for elders, agents 
could talk with them instead. By referring to the proposed 
framework, we implement an Eldercare Interactive Agent 
System (EIAS) to provide an agent system that uses agents to 
interact with elders. Figure 10 shows the system concept of 
EIAS. At the Personal Site, the interactive agents run on the 
PDA of elders. In order to interact with elders, the agents 
may connect to the Active Site to get scenario and multimedia 
files. Because the PDA of elders is a mobile device, an 
Information Broker Site may be required to manage the 
location information of elders and provide the services of 
requesting and registering the information. 
To interact with elders, the PAs may show some text 
messages, pictures or vides on PDA’s screen. Some buttons 
on screen are also provides to support the input of elders. 
Figure 14 shows the screenshot of PA on PDA. A video about 
elder’s family is shown on the screen, and a button is 
provided to continue next interaction. 
 
 
Fig. 14. Screenshot of Personal Agent on PDA 
 
5. Conclusions 
 
Scenario mechanism provides a manner to more flexibly 
control the behavior of agents. Programmers may apply the 
scenario mechanism to agent systems for different purposes. 
To provide the interaction between humans and agents, we 
propose a scenario-based approach. The framework that 
describes the components, agents and process of the 
interactive scenario multi-agent system is proposed in this 
paper. In order to exemplify this approach, we implement an 
Eldercare Interactive Agent System (EIAS) to care for elders.  
 
In the framework, the processes about scenario generation 
and agent execution are explained. The participators in the 
processes are described by using Class Diagram. The agents 
and their services are defined by using Agent Diagram of 
AUML. Therefore, programmers could develop an interactive 
scenario-based multi-agent system by referring to the 
proposed framework.  
 
In the future works, we will put the focus on the 
representation of scenario. In our scenario-based approach, 
some labels are defined in the XML-based scenario 
documents to instruct the interaction. However, the 
representation of scenario may not be sufficient, especially 
that may involve the knowledge of the problem domain. We 
may discuss the appropriateness of applying the 
representation for general domains. 
 
 
 
 
 
 
 
 
References 
 
[1] Yan-Bin Peng, Ji Gao, Jun Hu, Bei-Shui Liao, "Policy-
Driven Agent Social," Proceedings of International 
Conference on Machine Learning and Cybernetics, Vol.1, 
Aug 2005, pp.345-350 
[2] B. Moulin and M. Brassard, “A Scenario-Based Design 
Method and Environment for Developing Multi-Agent 
Systems,” Proceedings of first Australian Workshop on 
DAI, Vol. 1087 of LNAI, 1996, pp. 216–232. 
[3] H. Zhu. “Scenario Analysis in An Automated 
Requirements Analysis Tool,” Journal of Requirements 
Engineering, Vol. 5, 2000, pp.2–22. 
[4] H. Zhu. “Formal Specification of Agent Behavior 
Through Environment Scenarios,” Proceeding of NASA 
First Workshop on FAABS, Vol.1871, 2000, pp.263–277. 
[5] Rue Shen, Ji Wang and Hong Zhu, “Scenario mechanism 
in agent-oriented programming,” The 11th Asia-Pacific 
Software Engineering Conference, 2004, pp.464-471. 
[6] H. Zhu. “SLABS: A Formal Specification Language for 
Agent-Based Systems,” International Journal of SEKE, 
Vol. 11, 2001, pp.529–558. 
[7] Jim-Min Lin, Kai-Yi Chin, Zeng-Wei Hong, and Arthur 
Jing Lin, "An Agent Scenario Mechanism Supporting 
Human/Agent Interaction”, Proceedings of The 2006 
International Conference on Information and Knowledge 
Engineering (IKE'06), Las Vegas, USA, June 26-29, 
2006, pp.203-207 
[8] Kai-Yi Chin, Jim-Min Lin, Zeng-Wei Hong, Chih-Wei 
Lin and Arthur Lin, “An Architecture for an Internet 
Marketing Multi-Agent System using AUML,” 
International Journal of Multi-agent and Grid Systems, 
2006, pp.413-433 
[9] Marc-Philippe Huget, “Agent UML Notation for 
Multiagent System Design,” IEEE Internet Computing, 
Vol.8, 2004, pp. 63-71. 
[10]  Agent UML Web Site, URL: http://www.auml.org 
[11]  FIPA Homepage, URL: http://www.fipa.org 
[12]  JADE – Java Agent DEvelopment Framework, URL: 
http://jade.tilab.com/ 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
