II. 文獻探討 
Communication between intellectual properties (IPs) is one of dominants of successful SoC. As 
technology advances, several million transistors are available on a die to achieve an integrated 
system, which is referenced as system-on-a-chip (SoC). Due to complexity of system increases and 
time-to-market pressures, traditional ASIC design methodology is hard to accomplish such complex 
design in a short time. A design methodology is presented to reuse existing IPs to improve the 
productivity of SoC development that is similar to what had been done in combining several 
integrated circuits (IC) on a board in the past. However, various IPs have different pin structures 
and communication protocols. Integrating these incompatible IPs to a chip induces a signification 
challenge to SoC design [1].  
In SOC design, IP starts the communication processes between incompatible protocols using an 
extra specify interface. An interface synthesis method has been studied. Akella and McMillan 
observe the protocol behaviors and formulate a first regular expression for the two connected 
incompatible protocol of components using an existing finite state machine theory [2]. Passerone et. 
al explore all the computations between two incompatible protocols in the form of proposed 
expression and retain the legal sequence of operations to generate an interface automatically [3]. 
However, they focus on the compatibility checking of components. The generated interface using 
the proposed expression is impractical for a system that has some complex data across the 
communication channel. 
Passerone and Alfaro simplify the operations on bus for core as a producer or consumer [4]. A 
method is presented to synthesize the interface between two cores based on a given system 
specification. In fact, IPs can be modeled as both of the producer and consumer. An inspired model 
by Passerone et. al, called synchronous interface automata model, is proposed by Bahaduri and 
Ramesh [5]. In this framework, a practical interface is easier to be implemented by a Mealy 
automaton statement. 
Although the protocol expression is well studied, few works address the bandwidth requirement, 
like the smooth of burst transfers. A queue-based interface architecture is proposed by Shin and 
Gajski [6]. The synthesized interface consists of the corresponding dual protocols and a queue 
model. Androutsopoulos et. al optimize the bandwidth of interface using graph theory and find the 
minimum datapath storage in the interface [7]. 
The incompatible IPs operating at different clock frequencies have been considered by several 
researchers. Park et al. classify the clock into two characteristics, the ratio of two clock frequencies 
are integer and real number, and model the connected IPs as a pair of polling model and 
acknowledgement model [8]. Two frequency matching solutions for the integer number case and 
real number case are presented. 
The same problem, incompatible protocols formulation and interface synthesis with different 
clock frequency and other factors such as data width, is addressed by Vijay and Arcot. They 
formulate the loop and branch in the transfer of component by the nondeterministic finite state 
 2
III. 研究方法 
In order to overcome the IP based design gap, we present a mulit-mode communication interface 
to enable a plug-and-play ability for IP core. We depict the multi-mode communication interface 
(MCI) design methodology in Fig. 1. After finished the four steps, signal extraction, functional 
template development, template mapping and design optimization, we can generate a specify MCI 
for IP core. 
Step 1. Signal extraction: The bus specification which various vendors release is composed of 
signals definition, interaction protocol, and physical fabric. Interaction protocol represents the 
sequence of behaviors on bus at run time, like how to transfer data in burst. Further, all of bus we 
have seen can be modeled in abstract as bus function (or transaction) by signal definition and 
interaction protocol. 
IP cores who the bus initiators usually ask the resources through bus and package the asking as a 
transfer for bus. A unified transfer representation for IP cores is needed. Further, MCI can make the 
compatible transfer on different buses from the translation of the transfer representation. In the first 
step, we use a bus syntax analysis to generate the representation. Two sets are defined to approach 
various original bus signals, one is qualifier set and another is control set by analyzing the signals 
definitions and interaction protocols. The value of a transfer which is initiated by the IP core is 
called qualifier signal, like the number of data in a transfer. On the other hands, the signal whose 
value is changed with the interactions of IP core and bus is called control signal. After that, we are 
able to translate the set of qualifier signals that we chosen from different bus specifications into one 
unified representation (signals definition) based on the signals characteristics. Finally, no matter 
what is the target bus architecture, IP core can send a bus request on different bus architectures by 
the embedded MCI. The set of control signals will be used in step 3. 
In other words, the IP core can package the transfer using the unified signals format and locate 
the package into MCI. MCI converts the package into another signal definition that bus protocols 
are acceptable. Note that, we do not try to generate a new concept as virtual component, the 
interaction protocol between IP core and interface is simplified as delivering a package because the 
job of interface development can be done by core designer. 
Step 2. Functional template development: Multi-mode module in Fig.2 is consisted of a dynamic 
engine, Communication generator and Trigger generator. Dynamic engine analyzes a sequence of 
bus interactions and determinates the states of bus transfer for MCI. The output of dynamic engine 
and the bus transfer which  located on the queue by the IP core are send on the bus by the 
translator, Communication generator. In other words, these prepared to be sent on the bus are 
configured as the bus acceptable pin precision format by Communication generaor. Trigger 
generator extracts the bus reponses and generates the unified input signals for dynamic engine 
based on the system configurations. Developing the dynamic engine in MCI is time-consuming and 
inefficiency due to the signals on the bus are various and core needs to connect with these bus 
protocols through a configuration of system. Our approach is to develop bus functional templates 
 4
and IP designer needs to make a decision which/how many bus protocols should be included in 
MCI. More similar signal features and protocol interaction we can find will lower the overhand and 
carry out an efficiency interface design. 
 
Besides, we also summary the achieved progress of this research in the three years.  
First year: 
We study various bus architectures and discuss the difficulties of multi-mode communication 
interface development. The difficulties are conducted from the various signals and protocols which 
are published by different vendors. Form our observation; some of bus architectures have the 
similar signals definitions and protocol operations. Thus, resource sharing is a good idea to reduce 
the hardware cost and the complexity of design. We publish the research in 2005 VLSI-TSA-DAT 
after the studying of the resource sharing [26]. We develop an initial version for this interface by 
the resource concept and verify it is practicable. Besides, the switching activities on bus result most 
of power consumption in the system. We developed a low power encoding method that can reduce 
the power from self-wire switching and wires coupling. 
 
Second year: 
We synthesize the initial version of the interface and prototype it on FPGA. We repeat the design 
several rounds and take care of more bus operations, such as burst and interruption in this newly 
developed version. In the results, the newly interface can work correctly on FPGA for the given the 
bus transfers. Besides, many of registers are consisted in the interface and register consumes more 
consumption in the system. We develop two high speed and low power flip-flop, called Conditional 
capturing edge sense-amplifier flip-flop (CDAFF) and adaptive clocking dual edge sense-amplifier 
flip-flop (ACSAFF). This part research is published on 2006 ISCAS [27]. 
 
Third year: 
Based on previous experiences, we develop the MCI design methodology in that the multi-mode 
interface can be embedded into IP core faster. The methodology consists of four steps, signal 
extraction, functional template development, template mapping and design optimization. Different 
bus protocol interfaces design can be realized by the methodology. We also develop an IP core, 
direct memory access and embed the developed interface with the ability of AHB/PLB 
communication into it. On the other hands, dual- threshold voltage design is one of the popular low 
power design technology. We propose a useful dual-edge triggered and dual-Vth level converting 
flip-flop (LCFF) that addresses dual-edge triggering, dual Vth, supporting sleep mode and data 
retention. This part is published on 2007 ISCAS [28]. 
 
 
 
 6
bus. Table 2 lists the relations between trigger generator, bus and dynamic engine. Fig. 4. shows the 
AHB/PLB multi-mode communication interface architecture. The PE Times and PE Addr is the 
internal processing registers. The PE Times records the number of data of a transfer has been 
translated. The PE Addr records the physical address that is going to be translated on bus. 
C. Synthesis and Simulation results 
Before embedding the interface into DMA, we synthesize the proposed interface in UMC 0.18 
technology using Synopsys Design Complier [25]. The requests from core and bus responses are 
simulated in the testbench we developed. The synthesized area of proposed interface is 
7081.905762 units and the power consumption is 2.6649mW. The waveforms of post-simulation 
for 4-burst transfer between interface and buses (AHB or PLB) using Synopsys Design Complier is 
shown in Figure 7 and Figure 8. The signal, MCI_STATE, is translated correctly under these two 
bus architecture. That demonstrate the operations inside the interface are correct. We also 
synthesize the interface and testbench using FPGA and post the circuit on the board. Figure 9 
shows the simulation on FPGA and the operating of interface is also correct. Finally, we synthesize 
the DMA core with proposed interface on FPGA board and finish the pre-simulation on FPGA 
complier. Maximum operating frequency is 132.753MHz. 
 
2) Energy-Efficient Dual-Edge Triggered Level-Converting Flip-Flop  
A. Simulation Setup 
We setup the simulation environment as shown in Fig. 5. Each flip-flop is driven by 5X normal 
inverter and drives a 10X inverter load. For our D2LCFF, there will be extra sleep control signals to 
test sleep mode. The VDDL is set to 1.25V, which is 70% of the VDDH, 1.8V, based on the study in 
[19]. Since researches have shown that some LCFFs like SLLS and PPR have higher PDP than 
PHL, SPFF or CD-LCFF [19] [18] [21] [24], we will only compare these three structures with our 
design. 
For fair comparison, all flip-flops are designed with TSMC 0.18um technology and adapted to 
dual-Vth version by the same optimization rules. All simulations are done using HSPICE. Since 
this technology doesn’t officially support dual-Vth transistors, we make use of “medium-Vth” 
transistors from the transistor models to act as LVTs. One draw back of medium threshold 
transistors is that the minimum gate length should be larger than the normal threshold ones, which 
increases the gate capacitance, delay and power for dual-Vth design. This side effect is already 
considered in sizing transistors of all flip-flops. 
B. Experimental Results 
Table 3 shows summary of simulation results including minimum D-Q delay, setup and hold 
time, power consumption with different data switching activity (α), and power-delay product by 
multiplying minimum D-Q delay and the average power at α=0.5. Simulation setup in Table 3 
adopts VDDH =1.8V, VDDL =1.25V, 250MHz clock frequency for DET-FF (D2LCFF& CDLCFF) 
 8
 Figure 3. AHB/PLB Functional Template  
 
 
Figure 4. AHB/PLB Multi-mode Communication Interface Architecture 
 
 
Figure 5. Simulation environment (Supply voltage of colored inverters is low voltage, VDDL; and 
high voltage, VDDH, is the supply of those white inverters.) 
 
 10
 Figure 9. FPGA simulation for proposed interface 
 
TABLE 1. COMMUNICATION GENERATOR I/O 
Input Output 
 From Qualifier
FIFO 
From 
Dynamic
Engine
For 
AHB 
Bus 
For 
PLB 
Bus 
Address N/A HADDR Mn_ABus 
RNW N/A HWRITE Mn_RNW 
TYPE/ 
TIMES 
N/A N/A Mn_BE 
TYPE/ 
TIMES/ 
SIZE 
N/A N/A Mn_Size 
SIZE N/A HSIZE N/A 
TYPE/ 
TIMES 
N/A HBURST N/A 
N/A STATE HTRANTS N/A 
N/A RdBurst N/A Mn_WrBurst 
Communic 
-ation 
Generator 
N/A WrBurst N/A Mn_RdBurst 
 
 
 
 
 
 
 
 12
V. 參考文獻 
[1] D. D. Gajski, Allen C.-H. Wu, Viraphol Chaiyakul, Shojiro Mori, Tom Nukiyama and Pierre 
Bricaud, “Embedded tutorial: essential issues for IP reuse,” in Proc. Conf. Asia South Pacific 
design automation ASP-DAC, Jan. 2000, pp.37-42.  
[2] J. Akella and K. McMillan, “Synthesizing converters between finite state protocols,” in IEEE Int. 
Conf. VLSI in computers and processors,  Oct. 1991, pp.410-413. 
[3] R. Passerone, J. A. Rowson and A. L. Sangiovanni-Vincentelli, “Automatic synthesis of interface 
between incompatible protocols,” in IEEE Int. Conf. Design Automation,  Jun. 1998, pp.8-13. 
[4] R. Passerone, L. de Alfaro, T. A. Henzinger and A. L. Sangiovanni-Vincentelli, “Convertibility 
verification and converter synthesis: two faces of the same coin[IP block interfaces],” in 
IEEE/ACM Int. Conf. Computer Aided Design, Nov. 2002, pp.132-139. 
[5] P. Bhaduri and S. Ramesh, “Synthesis of synchronous interfaces,” in IEEE Int. Conf. Application 
of Concurrency to System Design, June. 2006, pp.208-216. 
[6] D. Shin and D. Gajski, “Interface synthesis from protocol specification,” Center for embedded 
computer systems, Irvine, CA , Technical Report CECS-02-13, April 2002,  
[7] V. Androutsopoulos, D. M. Brookes and T. J. W. Clarke, “Protocol converter synthesis,” in IEEE 
Journal of Computers and Digital Techniques, vol. 151, issue 6, pp. 391-401, Nov. 2004. 
[8] P. Bong-II, C. Hoon, P. In-Cheol amd K. Chong-Min, “Synthesis and optimization of interface 
hardware between IP’s operating at different clock frequencies,” in IEEE Int. Conf. Computer 
Design, Sept. 2000, pp.519-524. 
[9] V. D’silva, S. Ramesh, and A. Sowmya “Automated interface synthesis,” TR-325, School of 
Computer Science and Engineering, University of New South Wales, 2003 
[10] AMBA Specification Rev 3.0. ARM Ltd. [Online]. Available:http://www.arm.com, 2003. 
[11] The CoreConnect ™  Bus Architecture. IBM Corp. [Online].Available: 
http://www.chips.ibm.com/products/coreconnect/index.html, 1999 
[12] V. D’silva, S. Ramesh and A. Sowmya, “Synchronous protocol automata: a framework for 
modeling and verification of SoC communication architectures,” in IEEE Journal of Computers 
and Digital Techniques, vol. 152, issue 1, pp. 20-27, Jan. 2005. 
[13] Open Core ProtocolTM Specification, OCP-IP Association, Available:http://www.ocpip.com, 
2001 
[14] Zhang Su, Gao Minglun, Hu Younghua and Li Li, “An approach to PVCI-based wrapper 
design,” in IEEE Int. Conf. ASIC, Oct. 2003, pp.433-437. 
[15] Ming-Yan Yu, Qing-Li Zhang, Jin-xiang Wang, Yi-zheng Ye and Feng-chang Lai, “The Design 
of AMBA/VCI wrapper,” in IEEE Int. Conf. ASIC, Oct. 2003, pp.438-442. 
 14
 16
VI. 成果自評 
Multi-mode Communication Interface (MCI) enable IP to connect effectively onto several 
protocols without plugging an interface since IP designers participate in the development of interface. 
From the bus observation and signal classification, a formal procedure of multi-mode interface 
development is proposed to speed up the implementation. The multi-mode interface architecture  
consists of the transfer smooth queue, dynamic engine and signal type converters. We have also 
proposed an energy-efficient flip-flop design. The proposed flip-flop has the smallest PDP compare 
among four different designs. 
As a summary, the contribution of this project is to develope an AHB/PLB multi-mode 
communication interface and present a general-purpose bus multi-mode communication interface 
methodology. We believe that the IP core can be integrated into the system rapidly by embedding the 
developed interface. We have published some papers on international conferences as below for this 
project: 
 
 
[1] Lih-Yih Chiou, Hsieh-Wei Lee, Sheau-Fang Lei and Bin-Da Liu,”Design and implementation of 
an efficient architecture for high order statistics with DWT”, IEEE International symposium on 
VLSI Design, Automation & Test (VLSI-TSA-DAT), pp.282-285, 2005. 
[2] Yen-Ting Liu, Lih-Yih Chiou and Soon-Jyh Chang, ”Energy-Efficient Adaptive Clocking Dual 
Edge Sense-Amplifier Flip-Flop”, in Proc. ISCAS May, 2006. 
[3] Lih-Yih Chiou and Shien-Chun Luo, "An Energy-Efficient Dual-Edge Triggered 
Level-Converting Flip-Flop", International Symposium on Circuit and System (ISCAS) 2007, pp. 
1157-1160, 2007. 
 
持系統速度又保持低功耗。發表後，多人就論文中關鍵之處提出問題進行討論。 
 
 
二、與會心得 
由這次會議討論來看，低功率是影響系統大小的關鍵因子且已成為目前最熱門的研究題
目之一，討論的議題相當多樣性從系統 (system)至線路 (circuit)，從數位 (digital)至類比
(analog)，相關技術的發展非常的快。如何在眾多的研究當中做前瞻性的研究，而非跟隨他人
起舞，需要多下工夫多研究、多思考。另外由實作入手，或許可以看到更實際、更有意義的
問題。很多研究都是由實作面入手，建立系統，並由其中找出研究議題。而且他們實作的系
統的確為大家所使用，造成影響。或許這樣的研究方式是我們可以嚐試學習的。當然這其中
如何將理想實現，的確是一大挑戰。 
    此次參與國際會議獲益良多，除了感受到國際年會盛況空前的氣氛外更有機會接受國際
專家學者的指導與建議，希望將來能多參加國外的研討會，也期待國內學者先進的努力，使
此一領域的國際研討會也能在國內舉辦，相信對於國內相關的研究在國際視野上的推動有絕
對正面的助益。 
 
攜回資料名稱及內容： 
書籍: 「2007 IEEE International Symposium on Circuits and Systems Conference guide」 
光碟: 「論文集」 
 
附錄： 
本次發表之論文全文（謹附於下頁）。 
 
 
 
experimental results and comparisons will be shown in 
section III. Finally, we will draw conclusion in section IV.  
II. PROPOSED LCFF  
 
 
Figure 1.  
(a) Pulse-t FF 
(b) Dual-ed
 
Structure of D2LCFF  
riggered LC
ge pulse trigger circuit 
We propose a dual-edge triggered and dual-Vth level 
converting flip-flop, referred to D2LCFF as shown in Figure 1. 
Colored inverters and gates use low supply voltage, VDDL, 
while the inverter in white utilizes high supply voltage, 
VDDH. Transistors with bold line represent high-Vth 
transistors (HVTs), and those with thin line are low-Vth 
transistors (LVTs). D2LCFF is composed of a pulse-triggered 
flip-flop and a pulse trigger. The pulse trigger is adapted from 
the conventional single-edge-triggered one by an extra NOR 
gate. There are two nodes producing pulses, as shown in 
Figure 1(b). Node “pulse1” produces a pulse on the positive 
clock edge, and node “pulse2” produces a pulse on the 
negative clock edge. The transistors of the pulse trigger all 
use HVTs to obtain sufficient pulse width.  
The delay time of pulse generating on both clock edges can 
be more balanced than that of other pulse triggers, for 
example, in [7] and [10].  The referred pulse triggers have 
different pulse-generating delay (about an inverter delay 
difference) on positive and negative clock edge. Balanced 
pulse generation at different clock edge results in balanced 
setup time and hold time. Subsequently, this reduces the 
worst case scenario in dual-edge triggering. The reason is that 
the earlier generated pulse causes larger setup time, while the 
later generated pulse increases the hold time of the flip-flop.  
M2 
M1 
M3 
M4 
M5 
M6 M7 
M8M9 
M10
M11
M13
M12 
M14 
M15 
M16 
M17 
I5 
Q
SC 
SC
D Pulse1 
Pulse2 
Pulse1 
Pulse2 
SC
SC 
VDDH 
VDDL 
VDDH
I6X 
(a)
QL
 
The proposed pulse-triggered flip-flop is shown in Figure 
1(a). This structure is extended from PHL with many new 
features: dual-edge operation, novel latch, dual-Vth, and data 
retention. The circuitry before the internal latch is used to 
prevent sneaky leakage and support dual-edge operation. The 
first inverter (I5) will be controlled by two sleep transistors 
(M1, M2) to cancel the sneaky leakage form the data retention 
latch [8]. To enable dual-edge triggering, two transistors (M4, 
M6) are parallel to the pass gate transistors, M3 and M5, 
respectively.  
 
Sleep Control 
Pulse1
Pulse2
Clk 
  
I1 I2 I3 
I4
N1 
N2 
MSL 
(b)
Our novel structure of the power-aware latch will be 
introduced in the following. The power-aware latch consists 
of ten transistors (M8~M17). First, minimum size HVTs (M9 
and M12) are stacked to M10 and M11. These two small 
HVTs are designed to limit the leakage current by its size and 
stacking effect in sleep mode. During normal operation, two 
larger transistors (M8, M13) are turned on to increase the 
driving ability for quick state transition. PMOS M10 is a 
HVT because low level voltage will temporally appear in the 
node “X”, and HVT is less sensitive to the temporary low 
voltage.. LVT NMOS M11 is to enhance its sensibility to the 
transient low level voltage at node “X”. Output “Q” is driven 
by the inverter I6, and the PMOS of I6 is HVT and NMOS of 
I6 is LVT, the same reason that referred. For the inverse- 
connected inverter of the data retention latch, one HVT (M14) 
and three LVTs (M15~M17) are put in series to form a 
stacked inverter. The sizes of these four transistors are the 
same as the size of PMOS and NMOS respectively in a 
minimum inverter.   
Low supply voltage 
High supply voltage 
Low threshold voltage 
High threshold voltage 
 
 
Design issues and operation of the latch are described as 
follows. To change the value of a latch, there should be 
enough driving strength to invert the inverse-connected 
inverter. This inverting progress causes power and increases 
delay because of temporally short circuit through the latch 
input node, for example, the node “X” in Figure 1(a). 
Therefore, we design a forward signal “D” (connect to M14 
and M17) to control the inverse-connected inverter of the 
latch to eliminate this transient short circuit power by early 
detection of data change. If the value of “D” is the same as 
“Q”, the early forward “D” will not change the conducting 
states of the inverse-connected inverter. If the value of “D” is 
different form “Q”, the early forward “D” will turn off the 
feedback path controlled by “Q”, where it denotes node as 
1158
