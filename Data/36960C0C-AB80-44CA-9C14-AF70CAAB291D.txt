 2
M-???????????????????Tausworthe???[Tausworthe 1965] 
?????????????(Generalized Feedback Shift Register, GFSR)??? [Lewis and 
Payne 1973]????????Fushimi [1989]?Golomb [1982]????? 
R = { r | 1 ≤ r < T, gcd(r, T) = 1 }            (3) 
R?????T?????????(group)????(coset) 
C1 = {1, 2, 22, 23, 24, ..., 2p-1}             (4) 
??????(subgroup)???????R???????C1??????????? ( )Tϕ /p
?????????C1, C2, ..., CK, K = ( )Tϕ /p???| R | = ( )Tϕ ? ( )Tϕ ?Euler’s totient 
function? 
dta ? ta ???d??(d-wise decimated sequence)? dta  = ,...,, 20 dd aaa ? dta ?
?M-????????T?????gcd(d, T) = 1 [Golomb 1982, Chapter IV, Theorem 2]??
???T?M-????????M-??????????d??[Golomb 1982, Chapter IV, 
Corollary 1]?? ( )Df1 ?? ta ?????????? ( )Dfi ?? dta ?????????
?? d ∈ Ci, 2 ≤ i ≤ K? 
?D????????(unit delay operator)??D at = at-1????(1)???(2)??? 
 ( ) 0=taDf , ??             (5) 
 ( ) 0/1 =dtd aDf ,               (6) 
?? d/1 (?? 1−d )?d???T?????(multiplicative inverse modulo T) [Golomb 1982, 
Chapter IV, Theorem 2]?M-?? dta ????????? ( )dxf /1 ?p??????? 
 
?? ???? 
??M-?? ( )fat ????????λ??(2 ≤ λ ≤ p)?????????  
(1) Tausworthe?? ( )σ;fX t : 
Xt = 121 ... −+++ λtttt aaaa σσσσ , σ ∈ R          (7) 
(2) GFSR?? ( )τ;fYt : 
 Yt = τττ )1(2 ... −+++ λtttt aaaa , τ ∈ R           (8) 
Fushimi [1989, Theorem]??????p?λ????????(equivalence relations) ??? 
( ) ( )11 ;; −≅ σσ itt fYfX  if σ ∈ Ci          (9) 
( ) ( )11 ;; −≅ ττ jtt fXfY   if τ ∈ Cj          (10) 
Fushimi [1989]???????????????k-??(k-distributed)??[Fushimi and 
Tezuka 1983]???????????λ?2?????? λp2=τ ?? 1C∈τ ? λ=−1τ ??
??(10)????????? 
( ) ( )λ;; 11 fXfY tt ≅τ              (11) 
?????? ( )λ;1fX t ?0 ≤ t < p????? ( )τ;1fYt ???????Tausworthe [1965]
?Fushimi [1989]????????????k-?????1 ≤ k ≤  p/λ?  
??????????????????????GFSR???????????M-
???????????????M-???????????????????????
??????????????????????????????GFSR???????
??????????????????????d?GFSR??????????GFSR?
??Tausworthe??????????????d?GFSR????????????d??
???????????????????????????????? 
 
?? ???? 
 4
 
??. ???p?λ?????????? 
( ) ( )dfXdfZ utt 11 ;;; −≅ ττ  if τ ∈ Cu          (15) 
( ) ( )11 ;;; −≅ dfYdfZ vtt ττ  if d ∈ Cv          (16) 
??: ?????m, 0 ≤ m ≤ λ-1????? ( )1fa mdt τ+ ?? 
( ) ( )( ) ( )umdtmdtmdt fafafa +++ −− ≅≅ 11 11 ττττ  if τ ∈ Cu       (17) 
?? ( )1fa mdt τ+ ?? ( )dfZt ;;1 τ ??? (m + 1)?? (???? )?? ( )umdt fa +−1τ ??( )dfX ut 1; −τ ??(m + 1)???????????GFSR??????Tausworthe????
???(15)??????????m?0 ≤ m ≤ λ-1?????? ( )1fa mdt τ+ ?? 
( ) ( )( ) ( )vdmtdmtdmdt fafafa 11 11 −− +++ ≅≅ τττ  if d ∈ Cv       (18) 
????????GFSR?????GFSR?????????(16)?  
Q.E.D. 
?λ?2?????? λd=τ ?? λ=− d1τ ?d ∈ Cu???????? 
( ) ( ) ( )λ;;;; 11 ututt fXdfXdfZ ≅≅ −ττ  if τ ∈ Cu       (19) 
???????? ( )λ;ut fX , 0 ≤ t < p?d ∈ Cu????? ( )dfZt ;;1 τ ????????
Tausworthe [1965]?Fushimi [1989]??????????k-???1 ≤ k ≤  p/λ? 
????????????????GFSR??????????Kurita and Matsumoto 
[1991]??????xp + xq + xr + xs + 1???p?Mersenne???????T = 2p – 1????
?gcd(d, T) = 1???????????d????????T?????d?3?99????
??????????????????????GFSR??????1????????
????????????????????? 
?1. Maximally equidistributed decimated GFSR generators. 
Generator (p, q, r, s) or p d # nonzero terms (n) n / p 
execution time
K1 (89, 69, 40, 20) 31 65 
29 
37 
0.3258 
0.4157 
24.58 s.
46.98 s.
K2 (127, 83, 63, 22) 
7 
15 
53 
25 
55 
52 
0.1969 
0.4331 
0.4094 
7.93 s.
17.26 s.
42.22 s.
K3 (521, 447, 197, 86) none - - - 
K4 (607, 461, 307, 167) 61 249 0.4102 44.25 s.
K5 (1279, 988, 630, 339) 81 459 0.3589 66.53 s.
K6 (3217, 2381, 1621, 809) none - - - 
Taus88 88 n.a. 26 0.2955 1.32 s.
TT800 800 n.a. 93 0.1163 2.36 s.
MT19937 19937 n.a. 135 0.0068 2.03 s.
n.a. = not applicable 
 
?? ???????? 
??????????????(????)???????????????????
??? K5 (p, q, r, s) = (1279, 988, 630, 339)? d=81?????????? 0.36?????
???????MT19937????????? 0.0068????????????????
 6
[20] Kao, C., Wong, J.Y., “Random number generators with long period and sound statistical 
properties,” Computers & Mathematics with Applications, Vol.36, No.3, Aug. 1998, 
pp.113-121. 
[21] Kirkpatrick, S., Stoll, E., "A Very Fast Shift-Register Sequence Random Number 
Generator," Journal of Computational Physics 40, pp. 517-526, 1981. 
[22] Knuth, D. E., The Art of Computer Programming Vol 2: Seminumerical Algorithms, 2nd ed., 
Addison-Wesley, MA, 1981. 
[23] Kurita, Y., and Matsumoto, M., “Primitive t-Nomials (t = 3, 5) Over GF(2) Whose Degree is 
a Mersenne Exponent ≤ 44497,” Mathematics of Computation, Vol. 56, No. 194, April 1991, 
pp. 817-821. 
[24] L’Ecuyer, P., "Efficient and Portable Combined Random Number Generators," 
Communications of the ACM, Vol. 31, No. 6, June 1988, pp.742-749 and 774. 
[25] L'Ecuyer, P., “Maximally Equidistributed Combined Tausworthe Generators,” Mathematics 
of Computation, Vol. 65, No. 213, Jan. 1996, pp. 203-213. 
[26] L’Ecuyer, P., ”Bad Lattice Structures for Vectors of Non-successive Values Produced by 
Some Linear Recurrences,” INFORMS Journal on Computing, Vol. 9, No. 1, pp.57-60, 
1997. 
[27] L'Ecuyer, P., ”Tables of maximally equidistributed combined LFSR generators,” 
Mathematics of Computation, Vol. 68, No. 225, Jan. 1999, pp.261-269.  
[28] L'Ecuyer, P. and Panneton, F., “Construction of Equidistributed Generators Based on Linear 
Recurrences Modulo 2,” Monte Carlo and Quasi-Monte Carlo Methods 2000, K.-T. Fang, F. 
J. Hickernell, and H. Niederreiter eds., Springer-Verlag, 2002, pp.318-330. 
[29] L’Ecuyer, P., Simard, R., “Beware of Linear Congruential Generators with Multipliers of the 
form a = ± 2q ± 2r,” ACM Trans. on Mathematical Software, Vol. 25, No. 3, Sept. 1999, 
pp. 367 – 374. 
[30] L'Ecuyer, P., Simard, R., Wegenkittl, S., “Sparse serial tests of uniformity for random 
number generators,” SIAM Journal on Scientific Computing, Vol.24, No.2, 2002, pp. 
652-68. 
[31] Lewis, T.G., and Payne, W.H., “Generalized Feedback Shift Register Pseudorandom 
Number Algorithm,” J. ACM, Vol. 20, No. 3, July 1973, pp.456-468. 
[32] Liang, Y., Whitlock, P.A., “A new empirical test for parallel pseudo-random number 
generators,” Mathematics and Computers in Simulation, Vol. 55, No. 1-3, 2001, pp.149-158. 
[33] Lidl, R., and Niederreiter, H., Introduction to Finite Fields and their Applications, 
Cambridge University Press, Cambridge, 1986. 
[34] Lindholm, J.H., “An Analysis of the Pseudo-Randomness Properties of Subsequences of 
Long m-Sequences,” IEEE Trans. Information Theory, Vol. IT-14, No. 4, July 1968, pp. 
569-576. 
[35] Matsumoto, M., and Kurita, Y., “Twisted GFSR Generators,” ACM Trans. Modeling and 
Computer Simulations, Vol. 2, No. 3, July 1992, pp. 179-194. 
[36] Matsumoto, M., and Kurita, Y., “Twisted GFSR Generators II,” ACM Trans. Modeling and 
Computer Simulations, Vol. 4, No. 3, July 1994, pp. 254-266. 
[37] Matsumoto, M., and Nishimura, T., “Mersenne Twister: A 623-Dimensionally 
Equidistributed Uniform Pseudo-Random Number Generator,” ACM Trans. Modeling and 
Computer Simulations, Vol. 8, No. 1, Jan. 1998, pp. 2-30. 
[38] Nogues, J., Costa-Kramer, J.L., Rao, K.V., “Are random walks random?” Physica A: 
Statistical and Theoretical Physics, Vol. 250, No.1-4, Feb. 15 1998, pp.327-334. 
[39] Park, S. K., and Miller, K. W., "Random Number Generators: Good Ones Are Hard to 
Find," Communications of the ACM, Vol. 31, No. 10, Oct. 1988, pp. 1192-1201.  
Maximally Equidistributed Decimated GFSR Generators 
Pei-Chi Wu (???) 
Department of Computer Science and Information Engineering 
National Penghu University 
300 Liouhe Rd., Magong City, Penghu County 880, Taiwan (R.O.C.) 
E-mail: pcwu@npu.edu.tw 
 
Abstract 
This paper presents generators based on decimated 
sequences of Generalized Feedback Shift Register 
(GFSR) generators. The equivalence relation between 
decimated GFSR generators and Tausworthe 
generators are presented and a k-distributed 
initialization scheme is derived. We present decimated 
GFSR generators that are maximally equidistributed. 
Timing results of these generators are presented. 
Key Words: linear recurring sequence, decimation, 
k-distribution.  
1. Introduction 
An M-sequence (or called PN-sequence) is 
defined to be a maximum-length linear recurring 
sequence modulo two [Golomb 1982, p.75]. Let ta  
be an M-sequence that satisfies the following linear 
recurrence: 
 (mod 2)       (1) ∑
=
−=
p
i
itit aca
1
and has period T = 2p – 1. The polynomial  
  (mod 2)      (2) ∑
=
+=
p
i
i
i xcxf
1
1)(
is called the characteristic polynomial of the sequence 
ta  and is primitive over Galois field GF(2).  
The d-wise decimated sequence dta  = 
,...,, 20 dd aaa . Sequence dta  is also an 
M-sequence with the same period T, if and only if 
gcd(d, T) = 1 [Golomb 1982, Chapter IV, Theorem 2]. 
All M-sequences of period T can be obtained from any 
given one by suitable decimation [Golomb 1982, 
Chapter IV, Corollary 1].  
M-sequences have been widely used in the 
design of random number generators, such as 
Tausworthe generators [Tausworthe 1965] and 
Generalized Feedback Shift Register (GFSR) 
generators [Lewis and Payne 1973]. Primitive 
trinomials have also been widely used in the design of 
these random number generators; however, 
trinomial-based generators fail the weight distribution 
test [Lindholm 1968; Matsumoto and Kurita 1992; 
Matsumoto and Kurita 1994].  
L'Ecuyer [1996; 1999] proposes combined 
Tausworthe generators, which are based on products of 
primitive trinomials and can achieve the maximum 
equidistribution property, a leading selection criteria 
for linear generators based on recurrences modulo two. 
Matsumoto and Nishimura [1998] propose Mersenne 
Twister generators, which are based on primitive 
polynomials with 135 nonzero terms and guarantee the 
k-distribution property [Fushimi and Tezuka 1983] 
with any nonzero seed.  
Fushimi [1990] proposes a GFSR with recursion 
Xt = Xt-3p ⊕ Xt-3q. The recursion is derived from a 
d-wise decimation of generator with primitive 
trinomial xp + xq + 1, 3d ≡ 1 (mod T). Ferrenberg et al. 
[1992] use every fifth call of generator R250 
[Kirkpatrick and Stoll 1981], which is based on 
primitive trinomial x250 + x103 + 1. Ziff [1998] shows 
that 3-wise, 5-wise, and 7-wise decimation of 
generators with primitive trinomials actually are 
generators with primitive pentanomials.  
This paper presents generators based on 
decimated sequences of GFSR generators. The 
equivalence relation between decimated GFSR 
generators and Tausworthe generators are presented 
and a k-distributed initialization scheme is thus derived, 
where 1 ≤ k ≤ p/ l , and  is an integral power of 2. 
We search the d-wise decimation of GFSR generators 
with primitive pentanomials, for d in 3 to 99. We find 
several decimated GFSR generators that are maximally 
equidistributed. Timing results of these generators are 
presented.  
l
2. The Equivalence Relations  
We follow the definitions in Fushimi [1989] and 
Golomb [1982]. Let  
R = { r | 1 ≤ r < T, gcd(r, T) = 1 }.      (3) 
R forms a group under multiplication modulo T. We 
denote by  the inverse of 1−σ σ  in the 
multiplicative group. Let coset  
C1 = {1, 2, 22, 23, 24, ..., 2p-1}       (4) 
be the multiplier subgroup. Taking any element from R 
and multiplying it by each number in C1 obtain the 
other cosets, denoted as C2, ..., CK, where K = ( )Tϕ /p, 
| R | = ( )Tϕ , and ( )Tϕ  is Euler’s totient function. 
 
decimated GFSR generators are implemented by using 
a power-of-2 buffer [Ziff 1998, p.392]. All these 
decimated GFSR generators run much slower than 
taus88, TT800, and MT19937. The Appendix is the 
sample C code for decimated GFSR generator with d = 
81 and GFSR generator K5. 
4. Conclusions  
We have presented the equivalence relation between 
decimated GFSR generators and Tausworthe 
generators and have derived a k-distributed 
initialization scheme based on this relation. We have 
also found seven maximally equidistributed decimated 
GFSR generators with primitive pentanomials. Six of 
the seven decimated GFSR generators have the ratio 
n/p greater than 0.3. All these decimated GFSR 
generators run much slower than taus88, TT800, and 
MT19937.  
Appendix. The C Program for Decimated 
GFSR generators 
The C preprocessor constants D, P, Q, R, and S are 
defined for a d-wise decimated generator with 
primitive polynomial xp + xq + xr + xs + 1, p > q > r > s. 
LOG_W is defined as the number of bits in a machine 
word. Function set_seed uses generator SR(28, 3, 31) 
[Anderson 1990] (macro rand) to generate p random 
bits for the initialization of the equivalent Tausworthe 
sequence ( )l;ut fX , d ∈ Cu, which state is stored 
in a bit buffer (unsigned char init_buf[P]). Function 
set_seed then generates the first p words of the 
equivalent Tausworthe sequence for the initialization 
of the decimated GFSR generator. Variable IX is the 
index to the buffer (unsigned int buffer[POW2]). 
POW2 is the smallest power of 2 greater than p; M is 
defined as (POW2 – 1). Bit-wise “and” with M is 
effective to cause the random numbers cycle around 
the buffer. 
#ifndef D 
#  define D    81 
#endif 
#ifndef P 
#  define P    1279 
#  define Q        988 
#  define R        630 
#  define S        339 
#  define POW2    2048 
#endif 
#define LOG_W    32 
#define M      (POW2-1) 
#define rand(seed) \ 
 (tmp = seed ^ (seed >> 3), \ 
 seed = (tmp ^ (tmp << 28)) & 0x7fffffff) 
static unsigned char init_buf[P]; 
static unsigned int buffer[POW2]; 
static int IX; 
void set_seed(unsigned int seed) 
{ 
  int i, j, k;  
  unsigned int tmp, x;  
  for(i=0; i<P; ) {  /* init P bits */ 
    x = rand(seed); 
    for(j=0; j<31 && i+j<P; j++) 
      init_buf[i+j] = (x >> j) & 1; 
    i = i + j; 
  } 
  IX = 0;  
  for(i=0; i<P; i++) /* init P words */ 
  { 
    unsigned int w = 0; 
    unsigned char b, t; 
    int ixq; 
    for(j=0; j<LOG_W; j++)  {    
      for(k=0; k<D; k++)  { 
        t = init_buf[IX]; 
        if ((ixq=IX-Q) < 0) ixq += P; 
        t ^= init_buf[ixq]; 
        if ((ixq=IX-R) < 0) ixq += P; 
        t ^= init_buf[ixq]; 
        if ((ixq=IX-S) < 0) ixq += P; 
        t ^= init_buf[ixq]; 
        b = init_buf[IX] = t; 
        if (++IX == P) { IX=0; }  
      } 
      w = (w<<1) | (b&1); 
    } 
    buffer[i] = w; 
  } 
  IX = P;  
} 
 
unsigned int get_rand()  
{ 
  int i; 
  unsigned int tmp;  
  for(i=0; i<D; i++)   
{ 
    tmp = buffer[IX&M] = buffer[(IX-P)&M] ^ 
buffer[(IX-Q)&M] ^ buffer[(IX-R)&M] ^ 
buffer[(IX-S)&M]; 
    IX++; 
  } 
  return tmp; 
} 
 
