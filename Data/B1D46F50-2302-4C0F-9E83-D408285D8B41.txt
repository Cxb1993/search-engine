sender: a cloud challenge response service is used to 
get a registry key during login stage. Based on the 
key, a sequence of non-duplicated one-time key 
generation services is used to add into each mail 
header before sending, such that the receiver can 
invoke a cloud one-time key verification service to 
identify this mail directly sent by recipient or not. 
Once a mail server enabled such services, all its 
users can be protected by key verification service 
that all mails without one-time key are possible spam 
mails required filtering later. Since the failure of 
verifications can be analyzed in the cloud to make an 
active possible botnet infected reports to mail 
servers. 
In this project, we will develop these services on 
the free cloud environments. To implement this anti-
spam services based on the open source Apache＇s 
Hadoop distributed computing architecture. The three 
major services consists of a challenge response 
service, a non-duplicated one-time key generation 
service, and an active reporting service of anti-
botnet analyzer in the cloud. 
英文關鍵詞： Cloud Computing, Botnet, Spam, Challenge Response, 
One Time Key Encryption 
 
與機器的挑戰回應驗證(Challenge Response)，其二為具有一次性與時效性的認證碼，其
三為殭屍網路的探測與黑名單服務。電子郵件的寄件者在登入郵件系統時必須先通過身
份認證，取得通行票證，後續每寄一封電子郵件皆憑通行票證向雲端服務索取認證碼，
將認證碼附加在電子郵件的表頭裡寄出，收件端取出電子郵件表頭內的認證碼之後，透
過雲端服務驗證認證碼的有效性。由於認證碼具有一次性與時效性，經過複製或變造的
認證碼皆無法通過驗證。我們可以利用這些在雲端蒐集到的認證紀錄進行分析以偵測殭
屍網路的分佈，依此建立黑名單，進一步的阻絕來自殭屍網路的垃圾郵件，也可以主動
通知殭屍電腦的擁有者他的電腦已經遭到殭屍網路控制。 
本研究在校內的私有雲上建置服務，在 Apache 的 Hadoop 分散式運算架構開放系統
上開發基於雲端服務的反垃圾郵件服務，包括互動式挑戰與回應認證、一次性認證碼以
及殭屍網路黑名單等服務。 
 
關鍵詞：雲端運算、殭屍網路、垃圾郵件、挑戰回應驗證、一次性認證碼 
基於雲端計算之反垃圾郵件服務設計
372
因此，偵測並防止電腦被殭屍網路控制，可以有效降低垃圾郵件的數量，至於不是
由殭屍網路發送出來的郵件，仍然有可能是垃圾郵件，必須針對郵件表頭及內容進行過
濾分類，常見的郵件分類與過濾機制包括 Naïve Bayes[13][14]、 Support Vector 
Machines[15]、Boosting[16]等，這些機器學習模式可以很快地辨識出新的垃圾郵件，代
價是額外的儲存空間和計算資源。 
除了郵件分類與過濾機制之外，黑名單與白名單[17]也是相當基本而有效的方式，除
此之外還有防止偽造 Email 位址網域名稱反查(Sender Policy Framework)[18]等過濾分類
機制，然而傳統的郵件過濾機制並無法徹底解決垃圾郵件的問題，因為大部分的過濾機
制都只能在收信端進行處理，送信端反而可能成為被殭屍網路所控制的殭屍電腦或甚至
於是郵件伺服器，儘管有再強的過濾功能，垃圾郵件佔用網際網路的資源是早在送信端
就已經造成的事實。所以解決垃圾郵件問題有必要將各種型式的防範措施加以整合起
來，尤其是必須具備有快速偵測殭屍網路的機制出現，縮短殭屍電腦被偵測出來的時間，
才能達到垃圾郵件減量的效果。 
最後，由於雲端計算(Cloud Computing)[23]與服務平台的出現，如何將可受公評的服
務透過第三方平台提供出來給公眾使用的機會出現了，雲端服務透過分散式架構提供大
量的儲存空間和計算能力，使得服務的效能遠勝於單一的電子郵件伺服器，而且具有容
錯的特性。本研究將透過雲端分散式的計算平台提供快速的挑戰回應辨識服務，來防止
身份冒用，利用雲端的計算能力與儲存空間提供各種複雜的過濾分類機制[24][25][26]，
並且將各種辨識機制與郵件分類過濾機制產生的紀錄，整理成各類黑名單[27]，透過雲端
服務提供給公眾使用。 
二、 研究目的 
本研究的最主要目的為設計一個經由雲端的服務機制來保障非垃圾郵件能快速順利
通過認證送達目的地，可疑的垃圾郵件能被雲端的過濾及分析程式攔截，被辨識出來而
能進行對殭屍帳號有效地處置，將垃圾郵件阻絕於送信端，其主要的設計目標分述如下： 
(一) 提供主動式發送郵件的認證機制：由送信端在發送郵件前，主動於登入帳號使經由
雲端服務來建立並完成挑戰回應的認證機制，來確認後續的郵件寄送是人為的發送
行為即可，而不再重複對每封信做挑戰回應的認證，以避免要來信件簽章並加密等
繁瑣事件的覆轍，寄信不應手續過於複雜。 
(二) 提供郵件非殭屍網路所發送的辨識機制：由送信端在發送郵件前，將雲端服務所取
得的一次性認證碼(One-Time Password，縮寫為 OTP)[28][37]加入郵件的表頭後，
再交由郵件伺服器寄出。而認證機制的建置與辨識皆由公認可受信認的雲端服務來
提供，使得收信端的辨識與送信端無關，以避免挑戰回應攻擊挑戰回應的問題發生。 
(三) 提供殭屍帳號的可疑清單：由於雲端服務可收集郵件伺服器的送收郵件的行為，所
有的認證失敗皆是可疑的殭屍網路所發送。當累計足夠的資訊，雲端服務可分析出
郵件伺服器的殭屍帳號清單，提供使用者及郵件管理進行殭屍網路的防制與清除工
作。 
基於雲端計算之反垃圾郵件服務設計
374
目前反垃圾郵件技術對郵件表頭及內容做過濾分類，諸如 Naive Bayes[13][14]、
Support Vector Machines[15]、Boosting[16]等機器學習模式的過濾機制，也是提供個人收
信的分類有助益，對垃圾郵件的舉發效果也有限，但可以歸納出惡意程式的種類，提昇
辨識效果。至於防止偽造 Email 位址網域名稱反查機制，則建議使用，因其對找出殭屍
電腦有助益。本研究主要使用挑戰回應(Challenge-Response)與一次性認證碼(One-Time 
Password)的機制，詳述如下： 
(一) 挑戰回應機制 
在偵測郵件是否來自殭屍網路的機制之中，本研究使用以辨識寄件者身份為基
礎的判別方式，以區分究竟是真實的人類在寄信還是木馬程式在寄信，主要的機制
為挑戰與回應式的認證機制(Challenge Response)[19]，將挑戰與回應機制應用於辨
識真人和機器稱為 CAPTCHA[36]。CAPTCHA 通常在挑戰時顯示稍加扭曲的文字
或圖形，要求使用者看懂挑戰的題目之後作出正確的回應，由於程式無法立即進行
圖形辨識，而人類能夠看懂稍微扭曲的文字和圖形，因此能夠區分使用者的身份是
否為真實的人類。 
挑戰回應的認證機制本身存在被惡意程式用來攻擊自己的風險[20]，也有人認
為挑戰回應在考驗人類的耐性[21]，甚至於被殭屍網路用來發送騙取帳號及密碼的
假挑戰與回應郵件。儘管有這些缺點，挑戰回應仍然是很直接有效的快速辨識機制
[22]。因此如何取其優點避開其缺點才是反垃圾郵件防範措施的設計重點。 
挑戰回應認證機制的問題在於，首先要更改 SMTP 的通訊協定，最嚴重的是會
有挑戰回應攻擊挑戰回應的問題，主要的原因是送挑戰回應的是收信端而形成迴圈
[20][22]。我們將其改變由送信端主動提供，而非被動回應，因為沒有任何人可以
確認其使用的電腦永遠不會被殭屍網路所控制，而且主動提供給收信端認證碼及辨
識所需的成本絕對遠低於事後在收信端做複雜的挑戰回應郵件確認及原本的郵件
過濾成本。 
(二) 一次性認證碼 
一次性認證碼(One-Time Password)[35]機制分成使用者端的『安全令牌』
(Security Token)和伺服器端的『認證伺服器』(Authentication Server)兩個部份。在特
殊演算法的設計之下，『安全令牌』和『認證伺服器』可以在不連線的情況下達成
同步，亦即，『安全令牌』和『認證伺服器』之間可以不透過任何形式的網路連線
而達成同步。『安全令牌』每次產生一組看似隨機的密碼，而『認證伺服器』能夠
正確地進行密碼的認證。『安全令牌』產生的密碼只能使用一次，而且必須在規定
的時間內使用，逾時即失效。 
本研究提出一套以一次性認證碼(OTP)為基礎的電子郵件來源認證機制。國際
間 OTP 在資訊安全方面的應用已經非常廣泛，但是尚未有應用於電子郵件來源認
證者。在國內，中華電信以 OTP 提供『動態密碼鎖』服務[36]，藉以保護個人資料，
提昇網站交易安全。本研究利用 OTP 的一次性和時效性確保電子郵件的來源不可
基於雲端計算之反垃圾郵件服務設計
376
 圖 2.2、HDFS Architecture[37] 
(三) HBase 
HBase 是 Hadoop 的資料庫，以 Hadoop 的檔案系統 HDFS 為基礎，可提供類
似 Google 的 BigTable 的功能，同時也提供了 MapReduce 的程式能力，可以更快的
搜尋資料。 
HBase 並非一般關連式資料庫，而是屬於 Column-Oriented。Column-Oriented
的好處是每一筆資料可以存放不固定欄位的東西，在擴充欄位時成本較低。HBase
目標就是處理資料非常龐大的表，底層使用 HDFS 為基礎，會將一個資料表拆成很
多份，跟 HDFS 一樣有副本機制，由不同伺服器去存取，藉此達到高效率的讀寫以
及確保檔案的可靠性。[38] 
 
圖 2.3、HBase 資料模型[38] 
四、 Web Service 
Web Service 是在網路上提供其他程式呼叫使用的一種服務，而這些程式間透過
XML 溝通，XML 是可擴展標記語言(eXtensible Markup Language)，其規格是由「全球
資訊網標準制定組織」(W3C)所制定，目的就是提供一個標準格式，使電腦之間互相傳
遞訊息。 
Web Service 標準包括：WSDL、UDDI、SOAP，以下將詳述之。 
(一) WSDL 
基於雲端計算之反垃圾郵件服務設計
378
如圖 3.1 的。通過驗證碼之後則每次發送郵件前都會向雲端索取一組 OTP，並附在郵件
標頭(header)上一起寄出，如圖 3.1 的。收信端收到郵件後若郵件標頭有 OTP，則向雲端
查詢 OTP 正確性，以判斷是否為垃圾郵件，如圖 3.1 所示。 
二、系統功能說明 
本系統將安裝於 Linux 作業系統下，使用郵件伺服器 Sendmail，搭配 MIMEDefang
來實做。MIMEDefang 是一種郵件過濾程式，架設在 Sendmail 之下，使用 Perl 和 C 撰
寫。圖 3.2 為 Sendmail 與 MIMEDefang 之關係圖，E-mail 的傳送接收都是由 Sendmail
負責，Sendmail 會將郵件交給 MIMEDefang，MIMEDefang 將收到信件傳送給 
MIMEDefang-multiplexor，MIMEDefang-multiplexor 趨近於同時呼叫多個 MIMEDefang 
Perl 且同時將信件資料傳送，如此一來可達到同時處理多封信件過濾，MIMEDefang Perl
可決定是否對信件進行 SpamAssassin 中的貝氏過濾，信封過濾後則會一層層將資訊向上
傳遞，最後再傳回到 Sendmail。 
 
圖 3.2、Sendmail 與 MIMEDefang 關係圖[39] 
如圖 3.3 所示， (1) 使用者端透過瀏覽器使用 HTTP 傳輸協定連結至 Open Webmail
郵件伺服器網頁(2) ，郵件伺服器回傳 HTML 網頁，(3) 網頁中<iframe>頁框連結至雲
端伺服器索取 CAPTCHA 圖片，雲端伺服器透過 CAPTCHA 服務隨機產生 CAPTCHA
圖片，同時會將使用者端 IP 與產生 CAPTCHA 之文字和數字存入 MySQL 資料庫以 IP
為 Key，(4) 再透過 HTML 網頁來顯示 CAPTHCA 圖示，使用者即可依據網頁上顯示文
字與數字輸入驗證碼。(5) 使用者輸入帳號、密碼與 CAPTCHA 驗證碼並按下登入，郵
件伺服器呼叫驗證 CAPTCHA 的 Web Service，(6) 郵件伺服器將使用者端的 IP 與使用
者輸入的 CAPTCHA 送至雲端驗證，雲端伺服器收到後以 IP 為 Key 查詢 MySQL 資料
庫是否有此 CAPTCHA 紀錄，(7) 如存在則雲端伺服器回傳驗證結果正確。確認完
CAPTCHA 後，(8) 郵件伺服器將 IP 與 CAPTCHA 存入 Session，並隨機亂數產生一組
SessionID，傳送 SessionID 與使用者帳號至雲端並存入雲端分散式資料庫 Hbase，(9) 完
基於雲端計算之反垃圾郵件服務設計
380
CAPTCHA 的 Web Service，(6) 郵件伺服器會將使用者端 IP 與使用者所輸入的
CAPTCHA 驗證碼傳送給雲端伺服器，雲端伺服器收到後，以 IP 為 Key 查詢 MySQL
資料庫是否存在此 CAPTCHA，如查詢不到相對應資料，(7) 雲端伺服器回傳驗證結果
錯誤，(8)系統將重新返回郵件伺服器登入頁面。 
 
圖 3.5 成功取得 OTP 流程圖 
如圖 3.5 所示，(1) 使用者使用登入編輯信件頁面時，(2) 郵件伺服器傳送使用者帳
號給雲端伺服器，雲端伺服器根據使用者帳號到 Hbase 尋找相對應 SessionID，(3) 並回
傳 SessionID 給郵件伺服器，郵件伺服器再依據 SessionID 尋找相對應 Session 以找出該
使用者客戶端的 IP 與輸入的 CAPTCHA 驗證碼，(4) 並附加上郵件標頭名為 X-OTP，
標頭內數值則為使用者 IP 與 CAPTCHA 驗證碼。使用者送出信件時，(5)  
mimedefang-filter 郵件過濾程式呼叫驗證 CAPTCHA 的 Web Service，送出客戶端 IP 與
CAPTCHA 驗證碼給雲端伺服器作驗證，雲端伺服器以 IP 為 Key 查詢 MySQL 資料庫驗
證 CAPTCHA 驗證碼是否正確，(6) 並回傳驗證結果至郵件伺服器，郵件伺服器確認
CAPTCHA 驗證碼正確後，(7)  mimedefang-filter 程式呼叫 OTP 的 Web Service，並傳
送使用者帳號與收件者號帳至雲端伺服器，確認此帳號驗證失敗次數在一定次數下，雲
端會產生一組 OTP 驗證碼，並將使用者帳號與收件者帳號合併為字串與 OTP 存入 Hbase
並以使用者帳號與收件者帳號字串為 Key，(8) 雲端伺服器再將產生之 OTP 回傳至郵件
伺服器，郵件伺服器收到(9) OTP 驗並將其加至郵件標頭名稱為 X-OTP 數值為雲端所給
予之 OTP，(10) MIMEDefang 再將信件交由 Sendmail 寄出信件。 
如圖 3.6 所示，(1) 使用者進入編輯信件的頁面，(2) 郵件伺服器傳送使用者帳號至
雲端伺服器，雲端伺服器根據使用者帳號到 Hbase 尋找相對應的 SessionID，(3) 並回傳
SessionID 給郵件伺服器，郵件伺服器再依據 SessionID 尋找對應 Sessions 內中客戶端的
IP 與輸入 CAPTCHA 驗證碼，(4) 並附加上郵件標頭 X-OTP: (ClientIP、CAPTCHA 驗證
基於雲端計算之反垃圾郵件服務設計
382
檢查 OTP 是否正確，(2) 比對結果為錯誤將使用者驗證失敗次數加一，並回傳驗證錯誤
訊息至郵件伺服器，(3) 郵件伺服器則將郵件 Tittle  附加上[This Letter Is Spam]字樣。 
 
三、系統總結 
本研究使用挑戰回應機制，能在登入系統時辨認是否由真人使用或者是僵屍電腦，
將挑戰回應機制應用於辨識真人和機器的方法稱做 CAPTCHA，使用者在登入系統時必
需輸入正確的驗證碼才能登入，登入後所發送的每一封郵件都將自動取得一次性的認證
碼，如此可避免每次寄信時重複做 CAPTCHA 造成困擾。 
通過 CAPTCHA 驗證後，發送郵件前都將向雲端服務索取一份一次性的認證碼
(One-Time Password, OTP)並附加於郵件標頭，OTP 每次產生不同的密碼且只能使用一
次的特性，可確保不會被複製或盜用。當郵件伺服器接收到新的郵件並檢查 OTP，只要
OTP 正確就是正常郵件，不再做其他多餘的過濾處理以減少系統負擔。 
最後本研究將 CAPTCHA 的辨識以及 OTP 認證處理放置於雲端服務，藉由雲端的
運算能力減輕伺服器負擔，在不改變 SMTP 通訊協定的狀態下，使用 Web Service 與雲
端溝通，提升整個系統的實用性。 
肆、 系統安全問題探討 
一、CAPTCHA 認證的安全問題? 
在驗證CAPTCHA方面，雲端伺服器僅回傳驗證結果是否正確，而不提供CAPTCHA
正確答案給郵件伺服器，以防止駭客模仿郵件伺服器的流程製作網頁並嵌入<iframe>頁
框向雲端伺服器索取 CAPTCHA 正確答案，如果郵件伺服器可以取得 CAPTCHA 驗證
碼，駭客即可自行架設郵件伺服器，並利用雲端服務機制，寄送含有合法 OTP 驗證碼
的 SPAM 給收件者，所以 CAPTCHA 的產生與安全認證皆需在雲端完成。 
二、Session 的用途及其安全問題? 
Session 主要用途為後端寄信時再次驗證使用者是否為合法使用者，Session 內存放
客戶端 IP 與使用者輸入 CAPTCHA 並以 CGI-Session 函示亂數產生 SessionID，並將
UserID 與 SessionID 儲存於雲端伺服器的分散式資料庫 HBase，以 UserID 為 Key。使用
者寄信時，郵件伺服器傳送 UserID 向雲端索取使用者之 SessionID 以找到當初創建的
Session 並將 CAPTCHA 取出與雲端比對是否一致，正確即可獲得合法 OTP；Session 如
同郵件伺服器的 Cookie，讓寄件者只需在郵件伺服器登入頁面時驗證一次 CAPTCHA，
而不需於每次寄信時再作輸入 CAPTCHA 驗證，簡化寄信流程，利用 Sesssion 將寄信步
驟串聯起來，進而通過 CAPTCHA 安全認證。 
三、取得 OTP 的安全問題? 
目前雲端伺服器所提供的雲端服務尚未有驗證郵件伺服器身分的機制，且 Open 
webmail 郵件伺服器為開放原始碼，有心人士可能會修改程式碼並誤用或濫用郵件伺服
器來向雲端伺服器索取 OTP，並寄送大量含有合法 OTP 之垃圾郵件。另外，若郵件伺
基於雲端計算之反垃圾郵件服務設計
384
時雲端會將客戶端的 IP 與 CAPTCHA 正確答案當做 Key 與 Value 存入 MySQL 資料庫，
(4) 再透過 HTML 網頁來顯示 CAPTHCA 圖示，使用者即可依據網頁上顯示的文數字做
輸入的動作。(5) 使用者輸入郵件帳號密碼與 CAPTCHA 驗證碼後， (6) 郵件伺服器呼
叫驗證 CAPTCHA 的 Web Service，並傳送客戶端 IP 與使用者輸入的 CAPTCHA 驗證碼
給雲端伺服器，雲端伺服器收到後，查詢 MySQL 資料庫來尋找相對應的使用者 IP 與
CAPTCHA 驗證碼，經查詢找到符合的資料後，(7) 雲端伺服器回傳驗證結果正確。確
認完 CAPTCHA 後，(8) 郵件伺服器將客戶端的 IP 與使用者所輸入的 CAPTCHA 驗證
碼以及 Perl 亂數產生的二進位 SessionID 後四碼之十進位數字存入 Session 物件，(9) 郵
件伺服器傳送 SessionID、使用者帳號與客戶端的 IP、二進位 SessionID 後四碼之十進位
數字，分別存入雲端伺服器分散式資料庫 Hbase，(10) 接下來做郵件帳號與密碼的認證
工作，確認無誤後，(11)登入郵件伺服器的信件編輯操作介面。 
 
圖 6.3 取得 OTP 權限流程圖 
如圖 6.3 所示， (1) 郵件伺服器如需取得 OTP ， (2) 郵件伺服器會讀取
openwebmail.pl、openwebmail-main.pl、openwebmail-send.pl、openwebmail.conf，且將上
述資料進行 MD5 運算處理並產生 MD5 Message，四組 MD5 Message 前後排列組合順序
不同而會有 24 種不同組合，2 進位的 4 bits 只能表示 16 種不同數字，前述過的 24 種組
合只採用前 16 種排列，同時須與雲端定義好其中 16 種 MD5 Message 排列組合順序相
同，(3) 郵件伺服器再根據 key number 來產生 MD5 Message 當作對稱式加密法的鑰匙，
將 SenderID 與 ReceiverID 加密後，(4) 連同郵件伺服器與客戶端的 IP 一起傳送給雲端
伺服器，(5) 雲端伺服器依據郵件伺服器的 IP 找到相對應的 MD5 Message，再依據客戶
端的 IP 尋找相對應的 SessionID 後四碼的數字之十進位數字所對應之排序產生相對應的
基於雲端計算之反垃圾郵件服務設計
386
參考文獻 
1. Plice, Robert K., Melville, Nigel P., "Toward an Information-compatible Auti-spam 
Strategy," Communications of the ACM, Vol. 52, No. 5, pp. 128-130, May 1, 2009. 
2. Wikipeida: E-mail spam, http://en.wikipedia.org/wiki/E-mail_spam, 2010. 
3. Spam Defined, http://www.monkeys.com/spam-defined/, 2010. 
4. Scott Hazen Mueller, "What is spam?," 
http://spam.abuse.net/overview/whatisspam.shtml, 2010. 
5. MessageLabs Intelligence, http://www.messagelabs.com/intelligence.aspx. 
6. Ping Wang, Sherri Sparks, and Cliff C. Zou, "An Advanced Hybrid Peer-to-Peer Botnet," 
IEEE Trans. on Dependable and Secure Computing, Vol. 7, No. 2, April-June 2010. 
7. Paul Wood, "Spam from Rustock, Lethic and Xarvester Disappears over the Holiday 
Season," 
http://www.symantec.com/connect/blogs/spam-rustock-lethic-and-xarvester-disappears-o
ver-holiday-season, 2010. 
8. Wikipeida: Internet Relay Chat (IRC), http://en.wikipedia.org/wiki/IRC, 2010. 
9. Oikarinen J. and Reed D., "Internet Relay Chat Protocol," RFC-1459, May 1993. 
10. Wikipeida: Peer-to-peer, http://en.wikipedia.org/wiki/Peer-to-peer, 2010. 
11. Wikipeida: DoS, http://en.wikipedia.org/wiki/Denial-of-service_attack, 2010. 
12. Paul Bächer, Thorsten Holz, Markus Kötter, and Georg Wicherski, "Know your Enemy: 
Tracking Botnets," http://www.honeynet.org/papers/bots, 2008. 
13. M. Sahami, S. Dumais, D. Heckerman, and E. Horvitz, "A Baysian Approach to Filtering 
Junk E-mail," AAAI Technical Report WS-98-05, pp. 55-62, 1998. 
14. Wikipeida: Bayesian spam filtering, 
http://en.wikipedia.org/wiki/Bayesian_spam_filtering, 2010. 
15. H. Drucker, D. H. Wu, and V. Vapnik, "Support Vector Machines for Spam 
Categorization," IEEE Trans. on Neural Networks," Vol. 10, pp. 1048-1054, 1999. 
16. X. Carreras and L. Marquez, "Boosting Trees for Anti-spam Email Filtering," Proc. 4th 
International Conference on Recent Advances in Natural Language Processing 
(RANLP'01), pp. 58-64, 2001. 
17. Ron Evans, "Blacklist, Whitelist - The New Rules For Getting Your Email Marketing 
Campaigns To The Inbox," 
http://www.zeromillion.com/webmarketing/blacklist-whitelist.html, 2010. 
18. M. Wong and W. Schlitt, "Sender Policy Framework (SPF) for Authorizing Use of 
Domains in E-Mail," RFC-4408, April 2006. 
19. "Why Challenge-Response is a Bad Idea," http://tardigrade.net/challengeresponse.html, 
2006. 
20. Ed Felten, "A Challenging Response to Challenge-Response," 
http://freedom-to-tinker.com/blog/felten/challenging-response-challenge-response, 2003. 
21. Larry Seltzer, "Challenge-Response Spam Blocking Challenges Patience," 
http://www.pcmag.com/article2/0,2817,1113101,00.asp, 2003. 
基於雲端計算之反垃圾郵件服務設計
388
國科會補助計畫衍生研發成果推廣資料表
日期:2012/10/30
國科會補助計畫
計畫名稱: 基於雲端計算之反垃圾郵件服務設計
計畫主持人: 鄭王駿
計畫編號: 100-2218-E-158-001- 學門領域: 推動計畫-開放軟體
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
