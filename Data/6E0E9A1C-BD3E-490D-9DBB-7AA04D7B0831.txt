 1
結構化客製積體電路邏輯合成及實體合成之研究(II) 
"Development of logic and physical synthesis tools for structured ASICs(II)" 
計畫編號：NSC97-2221-E-155-071-MY2 
執行期間：97年 8月 1日 至 99年 7月 31日 
主持人：劉一宇  元智大學資訊工程學系  助理教授 
 
一、 摘要 
中文摘要 
結構化客製積體電路  (structured ASIC, 
S-ASIC)設計流程為近年來所提出介於 FPGA
及傳統標準元件庫 (standard cell library)的電
路設計型式。S-ASIC 提供預製的邏輯區塊 
(pre-fabricated logic block) 及預製的導線線段 
(pre-fabricated wire segment)，同時保留部份彈
性給晶片設計者，晶片設計者僅需配置少數幾
層導孔 (via)及繞線，透過導孔決定是否連接
預製的邏輯區塊及預製的導線線段，即可產生
出多樣性之邏輯電路。由於 S-ASIC可共用預
製的邏輯區塊及導線線段的光罩，一方面達到
降低光罩成本費用，另一方面也避免使用
LUT、SRAM或是 TG而達到增進電路效能之
目的。本計劃分兩年探討 S-ASIC的設計自動
化之相關議題： 
1. 多輸出邏輯區塊的技術映成與邏輯
區塊大小評估：由於 S-ASIC的邏輯區塊為多
輸出 (multiple output)的型式，傳統單一輸出
的技術映成再搭配邏輯區塊打包的方式無法
有效降低電路的階層數 (circuit level)。我們將
研究多輸出的技術映成演算法以降低電路的
階層數，進而提高電路的效能。 
2. 交叉導線架構之可繞度導向佈置：由
於S-ASIC可以在犧牲切換區塊 (switch block)
彈性的前提下，透過安排介於交叉導線 
(crossbar)的導孔而達到類似於 FPGA 的切換
區塊之功能。然而採用交叉導線卻會衍生可繞
度降低的問題。因此在佈置階段時，需精確評
估交叉導線的可繞度 (routability)，以發展可
繞度導向之佈置演算法  (routability-driven 
placement algorithm)。 
3.  支援雙軌導線架構之效能導向繞
線：由於 S-ASIC 包含高密度的預製導線線
段，這些導線線段將大幅增加導線耦合電容而
導致因電磁雜訊所帶來的影響。為了有效減輕
耦合電容對 S-ASIC的影響，我們提出利用未
被使用的導線線段改進電路效能的方法。 
透過我們所提出的邏輯合成和實體合成
演算法，將針對資源使用率、可繞線能力及信
號完整性提出有效解決方案，將有益於
S-ASIC設計自動化之發展。 
 
英文摘要 
Structured ASIC (S-ASIC) design style is 
one of the modern VLSI design styles proposed 
in recent years. S-ASIC lies between the 
conventional standard cell and the FPGA design 
styles. In modern high mask cost era, one major 
advantage of the S-ASIC is the mask cost of the 
pre-fabricated logic blocks as well as the 
pre-fabricated wire segments can be amortized 
by reusing these masks. Besides, since the LUT, 
SRAM, and TG are removed, the chip area can 
be reduced while the circuit performance can be 
improved. In this 2-year project, we motivate to 
explore the synthesis techniques for S-ASIC 
design automation. We focus on the following 
 3
設計的電路轉換為硬體，再以此硬體進行電路
驗證 (circuit verification)，防止因電路設計錯
誤而造成的 re-spin，進而減少 IC 製造所需的
時間，達到加速 time-to-market 的目標，因此
FPGA已成為應用價值極高之電路設計型式。
雖然使用 FPGA設計可以降低 NRE cost，同時
達到 time-to-market的目標，使用預製的 LUT 
(lookup table)、SRAM及 TG (transmission gate)
一方面增加 FPGA的面積，另一方面也導致電
路效能降低，使得較高的單價及較低的效能仍
是 FPGA發展上之負擔。近年來有研究團隊提
出一種新的電路設計型式–結構化客製積體電
路 (structured ASIC, S-ASIC)，以填補 FPGA
及標準元件庫之間的差距。S-ASIC 提供預製
的邏輯區塊 (pre-fabricated logic block) 及預
製的導線線段 (pre-fabricated wire segment)，
同時保留部份彈性給晶片設計者，晶片設計者
僅需配置少數幾層導孔 (via)及繞線，透過導
孔決定預製邏輯區塊及預製導線線段的連接
方式，即可產生出多樣性之邏輯電路。因此
S-ASIC 可以視為是一種介於 FPGA 及傳統標
準元件庫的電路設計型式，此類的電路又稱為
可程式化導孔邏輯閘陣列 (via-programmable 
gate array, VPGA)。由於 S-ASIC提供預製的邏
輯區塊及導線線段，透過此架構所製作的電路
將可以共用多數光罩，一方面達到降低光罩成
本費用，另一方面也避免使用 LUT、SRAM或
是 TG而達到增進電路效能之目的。如此一來
S-ASIC 在適度的導孔光罩 (via mask)成本支
出下，將能提供較高的電路效能及較佳的電路
面積使用率，使其成為中產量 IC 產品的新選
擇。自 2003 年以來，部份業界已開始投入
S-ASIC 產品研發及製造工作，如國外的廠商
ChipX、eASIC 和國內的廠商 Faraday、Socle
分別提出 NRE cost較傳統 ASIC低的 S-ASIC
解決方案。這些解決方案多半採用特製的CAD
工具來完成設計自動化流程，約可得到比使用
FPGA 小一倍的面積，同時可以提昇效能約 2
至 3倍。為了有效降低 NRE cost同時儘量使
S-ASIC 的電路效能得以與標準元件庫相匹
配，直接採用傳統 FPGA的設計自動化流程是
不夠理想的做法，因此我們針對 S-ASIC設計
自 動 化 流 程 的 前 段  (front-end) 及 後 段 
(back-end)考量一些重要的議題： 
A. 多輸出邏輯區塊的技術映成與邏輯
區塊大小評估 
隨著 FPGA技術發展，原本每個可配置邏
輯區塊 (configurable logic block, CLB)所能包
含的 LUT 數目已逐漸增加。現今 FPGA 的邏
輯區塊多由數個 LUT 所共同聚集而成，使得
FPGA的邏輯區塊已由單一輸出(single output)
轉變為多輸出 (multiple output)。目前 FPGA 
技術映成時，多半先採用單一輸出 LUT 技術
映成 (single output LUT technology mapping)
演算法，得到由多個 LUT 所組成的電路，隨
後再以區塊打包 (block packing)的方式，將數
個 LUT放置於一個由多個 LUT所共同聚集而
成的 CLB之中。然而，以單一輸出 LUT技術
映成的結果再搭配區塊打包來解決多輸出邏
輯區塊的技術映成的問題時，並不能確保電路
的效能。因此，同時完成技術映成和區塊打包
將成為 S-ASIC邏輯合成時的一個重要議題。 
B. 交叉導線架構之可繞度導向佈置 
由於 S-ASIC和 FPGA的繞線資源均已預
製，繞線資源的安排對於這兩類的設計型式均
相當重要。FPGA 的繞線是採用可程式化 TG
的方式，透過額外晶片面積的 SRAM和 TG以
安排不同的線段連接。有別於 FPGA屬於繞線
資源支配晶片面積 (routing resource dominates 
chip area)的電路設計型式，S-ASIC 採用交叉
導線架構 (crossbar architecture)將可輕易透過
安排導孔的位置以完成電路繞線。如此一來，
除了節省不必要的晶片面積浪費外，同時還能
加快訊號傳遞的時間。然而採用交叉導線卻會
衍生切換區塊 (switch block)可以支援繞線種
 5
 
圖四：Hybrid CLB組態分析 
 
我們選擇以Ratio=2作為 hybrid CLB之組
態，並提出適合 hybrid logic synthesis之演算
法，如圖五所示。同時，我們提出三種邏輯最
佳化之技術來進行 hybrid CLB 之合成：cell 
collapsing, phase flipping和 phase duplication，
如圖六所示。 
 
 
圖五：Hybrid CLB之邏輯合成演算法 
 
圖六：三種邏輯最佳化技術 
 
表一列出實驗結果，透過使用 hybrid logic 
block 和我們所發展的演算法，將有效減少
51.7%電晶體使用量，同時增加 35.1%電路效
能。 
 
表一：Area reduction and performance improvement 
 
 
 7
 
圖十：繞線面積成本與電路效能之綜合比較 
 
為了有效減少 dangling-wire 所造成繞線
面積浪費和導線電容增加，我們提出
dangling-wire award routing演算法(DAR)，如
圖十一所示。 
 
 
圖十一：Dangling-wire aware routing algorithm (DAR) 
 
首先我們針對 crossbar switch的特性提出
新的 routing graph來有效增進演算法效能。新
的 routing graph如圖十二所示。 
 
圖十二：New graph modeling for crossbar switch 
即使 crossbar switch 並非屬於 universal 
switch，我們證明採用新的 graph model時，可
以搭配 left-edge channel routing演算法即可保
證 detailed routing所需的繞線資源等於 global 
routing 所估計之繞線資源。由於 CLB 的 pin
具有對稱性，我們提出 deferred pin assignment
來增加 pin assignment時的彈性，如圖十二。 
 
 
圖十二：Deferred pin assignment 
 
接下來我們再透過 FLUTE 產生 Steiner 
tree。然而在此架構下將可能產生非法的
Steiner point，如圖十三所示。 
 
 
圖十三：Illegal Steiner point 
 
因此我們將 logic block和 routing channel
上非法的 Steiner point re-assignment移至合法
的區域。圖十四和圖十五分別為 logic block上
的Steiner point re-assignment和 routing channel
的 Steiner point re-assignment。 
 
 9
六、參考文獻 
1. EE Times – http://www.eetimes.com/ 
2. N. Sherwani, P. Sawkar, "Layout driven synthesis or 
synthesis driven layout?", in Proceedings of VLSI 
Design, pp. 44-47, 1998 
3. K. C. Wu, Y. W. Tsai, "Structured ASIC, evolution or 
revolution?", in Proceedings of the International 
Symposium on Physical Design, pp. 103-106, 2004 
4. Y. Ran, M. Marek-Sadowska, "Via-Configurable 
Routing Architectures and Fast Design Mappability 
Estimation for Regular Fabrics", in Proceedings of 
Intl. Conf. Computer Aided Design, pp. 25-32, 2005 
5. L. Macchiarulo, C. F. Caccamo, D. Pandini, "A 
Comparison Between Mask- and Field-Programmable 
Routing Structures on Industrial FPGA Architectures", 
in Proceedings of the 14th ACM Great Lakes 
symposium on VLSI, pp. 436-439, 2004 
6. T. Zhang, S. S. Sapatnekar, "Buffering Global 
Interconnects in Structured ASIC Design", in 
Proceedings of the Asia and South Pacific Design 
Automation Conference, 2005, pp. 23-26, 2005 
7. N. V. Shenoy, J. Kawa, R, Camposano, "Design 
automation for mask programmable fabrics", in 
Proceedings of Design Automation Conference, pp. 
192-197, 2004 
8. T. Okamoto, T. Kimoto, N. Maeda , "Design 
methodology and tools for NEC electronics' structured 
ASIC ISSP", in Proceedings of the International 
Symposium on Physical Design, pp. 90-96, 2004 
9. L. Pileggi, H. Schmit, A. J. Strojwas, P. 
Gopalakrishnan, V. Kheterpal, A. Koorapaty, C. Patel, 
V. Rovner, K. Y. Tong, "Exploring Regular Fabrics to 
Optimize the Performance-cost Trade-off", in 
Proceedings of Design Automation Conference, pp. 
782-787, 2003 
10. J. L. Wong, F. Kourshanfar, M. Potkonjak, "Flexible 
ASIC: Shared Masking for Multiple Media 
Processors", in Proceedings of Design Automation 
Conference, pp. 909-914, 2005 
11. A. Koorapaty, V. Chandra, K. Y. Tong, C. Patel, L. 
Pileggi, H. Schmit, "Heterogeneous Programmable 
Logic Block Architectures", in Proceedings of Design, 
Automation and Test in Europe Conference, pp. 
1118-1119, 2003 
12. R. Yajun, M. Marek-Sadowska, "On Designing Via 
Configurable Cell Blocks for Regular Fabrics", in 
Proceedings of Design Automation Conference, 
pp.198-203, 2004 
13. K. Rajagopal, T. Shaked, Y. Parasuram, T. Cao, A. 
Chowdhary, B. Halpin, "Timing driven force directed 
placement with physical net constraints", in 
Proceedings of the International Symposium on 
Physical Design, pp. 60-66, 2003 
14. T. Y. Ho, Y. W. Chang, S. J. Chen, D. T. Lee, 
"Crosstalk- and performance-driven multilevel 
full-chip routing", in IEEE Trans. on Computer-Aided 
Design of Integrated Circuits and Systems, V.24, I.6, 
pp. 869-878, June 2005 
15. J. Y. Lin, Deming Chen, J. Cong, "Optimal 
Simultaneous Mapping and Clustering for FPGA 
Delay Optimization", in Proceedings of Design 
Automation Conference, pp. 472-477, 2006 
16. C. Chu, Y. C. Wong, "FLUTE: Fast lookup table 
based rectilinear Steiner minimal tree algorithm for 
VLSI design", in IEEE Transactions on 
Computer-Aided Design of Integrated Circuits and 
Systems, Vol.27, No.1, pp.70-83, 2008. 
17. F. W. Chen, Y. Y. Liu, "Wire sizing alternative – An 
uniform dual-rail routing architecture", in 
Proceedings of Design, Automation and Test in 
Europe Conference, pp. 796-799, 2008. 
18. F. W. Chen, Y. Y. Liu, "Performance-driven dual-rail 
insertion for chip-level pre-fabricated design", in 
Proceedings of ACM/IEEE Design, Automation and 
Test in Europe, pp. 308-311, 2009. 
19. P. Y. Hsu, S. T. Lee, F. W. Chen, Y. Y. Liu, "Buffer 
design and optimization for LUT-based structured 
ASIC design styles", in Proceedings of ACM Great 
Lakes Symposium on VLSI, pp. 377-380, 2009. 
Performance-driven Dual-rail Insertion for Chip-level Pre-fabricated Design
Fu-Wei Chen Yi-Yu Liu
Dept. of Computer Science Dept. of Computer Science and Engineering
National Tsing Hua University Yuan Ze University
Hsinchu, Taiwan, R.O.C. Chungli, Taiwan, R.O.C.
d9762812@oz.nthu.edu.tw yyliu@saturn.yzu.edu.tw
Abstract
In recent years, pre-fabricated design styles grow up rapidly
to amortize the mask cost. However, the interconnection delay
of the pre-fabricated design styles slows down the circuit
performance due to the high capacitive load. In this paper,
we propose a technique to insert dual-rail wires for pre-
fabricated design styles. Furthermore, we propose an effective
dual-rail insertion algorithm to reduce the routing area over-
heads caused by the inserted dual-rail wires. Taking the wire
criticality, the delay significance, and the wire congestion into
consideration, our proposed algorithm is capable of trading
additional routing area overheads for the interconnection per-
formance improvement. The experimental results demonstrate
that our proposed algorithm reduces the interconnection delay
by 11.4% with 5.8% routing area overheads.
I. INTRODUCTION
With the advances of VLSI design technology, mask cost
increases dramatically due to the lithographic difficulties. The
one-time-use mask cost is no longer affordable for small
and medium volume ASIC designs. This results in a higher
threshold for conventional standard cell ASIC designs. To
amortize the mask cost, some pre-fabricated design styles
are then proposed. Structured ASIC is a semi-chip-level pre-
fabricated design style. Most of the masks are fixed except the
contact-mask and some via-masks. The functionalities and the
interconnections are then specified by properly assigning the
contacts and the vias. It is also known as the via patterned
gate array (VPGA) [1] [2]. Field programmable gate array
(FPGA) is a full-chip-level pre-fabricated design style. Both
the devices and the wires have been pre-fabricated in FPGA.
CAD tools synthesize a circuit into a series of control bits
to configure both the functionalities and the interconnec-
tions [3] [4].
In this paper, we are going to discuss the chip-level (full-
chip-level and semi-chip-level) pre-fabrications. Both design
styles have been intensively studied with the advancement of
the VLSI technology. FPGA provides the field programma-
bility with very low non-recurring engineering (NRE) cost
and medium performance; while structured ASIC provides
higher performance at the expense of some NRE cost. The
This work is supported in part by the National Science Council of Taiwan
under Grant NSC-96-2221-E-155-070 and NSC-97-2221-E-155-071-MY2.
metal wires of both design styles have been pre-fabricated.
One major design difficulty of the pre-fabricated wires is to
accurately predict required routing resource. Since different
designs require different routing resource, we need to over-
design the pre-fabricated wires to meet a wide variety of
routing resource requirements. However, once a design is
mapped, the over-designed routing resource is then wasted.
The pre-fabricated routing architectures suffer high capacitive
load consequently. With the boost impact of interconnection
delay on circuit performance in modern VLSI design, the
capacitive issues in pre-fabricated routing architectures should
be carefully taken into account.
Uniform dual-rail routing architecture is proposed as a wire
tapering alternative to improve the interconnection perfor-
mance. By exploiting negligible coupling capacitance between
two adjacent wires with the same signal source, dual-rail rout-
ing architecture provides a signal propagation channel with
similar propagation delay, less crosstalk noise, and less power
consumption to the wire tapering architecture [5]. Hence, we
apply the dual-rail architecture in pre-fabricated design styles
to improve the interconnection performance. Furthermore, we
propose an effective dual-rail insertion algorithm to reduce the
routing area overheads caused by the inserted dual-rail wires.
To the best of our knowledge, there is no previous work which
exploits the anti-Miller effect in pre-fabricated design styles
to trade moderate routing area overheads for interconnection
performance.
The rest of this paper is organized as follows. The prelimi-
nary background knowledge is given in Section II. Section III
presents our proposed dual-rail wire insertion technique for
pre-fabricated routing architecture and our dual-rail insertion
algorithm. The experimental results are drawn in Section IV.
Section V concludes this paper.
II. PRELIMINARY
A. Chip-level Pre-fabricated Design Style
The island-style pre-fabrication is one of the well-known
chip-level pre-fabricated design styles [3] [4]. There are two
major components in an island-style pre-fabrication, the logic
component and the routing component. The logic component is
composed of the configurable logic blocks (CLB). Each CLB
contains a set of lookup tables and flip-flops to realize both
the combinational and sequential logic functions. The routing
 
978-3-9810801-5-5/DATE09 © 2009 EDAA 
 
CLBCLB
I/O I/O
Original wireOriginal wire
Dual-rail wire
Fig. 2. Modified connection-block for dual-rail routing
H-channelH-channel
V-channel V-channel
Original wireOriginal wire
Dual-rail wire
Fig. 3. Modified switch-block for dual-rail routing
primary output, paths from primary input to flip-flop, paths
from flip-flop to flip-flop, and paths from flip-flop to primary
output. After performing the static timing analysis on the
circuit, we can compute the arrival time as well as the required
time. The wire slack is the required time minus the arrival
time. The maximum slack is the maximum wire slack among
all wires.
Definition 3.1: Wire criticality: The wire criticality of wire
i, denoted as Crit(i), can be formulated as
Crit(i)≡ 1− wire slack i
maximum slack
The wire criticality is a fractional number between 0 and 1.
High wire criticality represents that the wire is on a critical
or near-critical path.
Definition 3.2: Delay significance: The delay significance
of wire i, denoted as Sig(i), can be formulated as
Sig(i)≡ min( delay of wire i
W × circuit delay ,1),
where W is a user-specified constant to weight each wire
according to the wire delay. In this work, we set W = 15%.
The delay significance is a fractional number larger than 0
and less than or equal to 1. High delay significance represents
that the wire contributes a large amount of delay.
Definition 3.3: Channel congestion: The channel conges-
tion of wire i in routing channel x, denoted as cxi , can be
formulated as
cxi ≡
number of routed wires
width of the channel
The channel congestion of wire i in routing channel x is
a fractional number larger than 0. High channel congestion
represents that the channel is congested.
Definition 3.4: Wire congestion: The wire congestion of a
wire i, denoted as Cong(i), can be formulated as
Cong(i)≡MAX(cxi ),∀ routing channel x of wire i
Algorithm Dual-rail Insertion(2-pin wires)
Begin
perform static timing analysis
foreach wire i
if slack(i)≤ 15%× circuit delay
wire i is a dual-rail candidate
end if
end foreach
foreach candidate wire i
if Crit(i)×Sig(i)≥Cong(i)− k
insert dual-rail
update channel congestion
end if
end foreach
update wire delay
End
Fig. 4. The Dual-rail Insertion algorithm
The wire congestion of wire i is the maximum channel con-
gestion of wire i for all routed channels. High wire congestion
represents that the wire pass through some congested channels.
Based on the aforementioned notations, we can illustrate
the flow of our dual-rail insertion algorithm. First, we perform
original wire routing. Once the routing is completed, we use
Elmore delay model to compute the delay of each 2-pin wire.
Static timing analysis is then performed to compute the arrival
time, the required time, and the wire slack. Since we can
have 10% to 15% of wire delay improvement after dual-rail
insertion, we select wires with slack less than and equal to
15% of circuit delay as candidate wires for dual-rail insertion.
After that, we take three aforementioned factors, the wire
criticality, the delay significance, and the wire congestion,
to reduce the wire overheads caused by the inserted dual-
rail wires. The following formula is used to decide whether a
dual-rail wire could be inserted or not.
Crit(i)×Sig(i)≥Cong(i)− k, (1)
where k is a user-specified constant. The dual-rail wire is
inserted if the condition of Equation (1) satisfies. The reason
behind this formula is quite intuitive. The product of wire
criticality and delay significance implies the potential gains
from dual-rail insertion. The wire congestion minus k implies
the tolerance of routing area overheads. Hence, the overall
formulation mimics that, a dual-rail wire could be inserted
only if both the original wire with large interconnection delay
and the wire is on a critical or near-critical path under a
certain of congestion constraint. Finally, static timing analysis
is performed again to compute the exact timing of the design.
The algorithm of dual-rail insertion is drawn in Figure 4.
IV. EXPERIMENTAL RESULTS
We use a FPGA physical design automation environment,
VPR [3], as our dual-rail insertion platform. Both the crossbar
switch-block and the dual-rail insertion algorithm proposed in
Buffer Design and Optimization for LUT-based Structured
ASIC Design Styles∗
Po-Yang Hsu†
s976024@mail.yzu.edu.tw
Shu-Ting Lee†
s966008@mail.yzu.edu.tw
Fu-Wei Chen‡
d9762812@oz.nthu.edu.tw
Yi-Yu Liu†
yyliu@saturn.yzu.edu.tw
† Department of Computer Science and Engineering, Yuan Ze University, Chungli, Taiwan, 320, R.O.C.
‡ Department of Computer Science, National Tsing Hua University, Hsinchu, Taiwan, 300, R.O.C.
ABSTRACT
The interconnection delay of pre-fabricated design style dom-
inates circuit delay due to the heavily downstream capaci-
tance. Buffer insertion is a widely used technique to split
off a long wire into several buffered wire segments for cir-
cuit performance improvement. In this paper, we are moti-
vated to investigate the buffer insertion issues in LUT-based
structured ASIC design style. We design the layouts of two
dedicated buffers and extract the technology dependent pa-
rameters for evaluations. After that, we propose a channel
migration technique, which employs both intra-channel migra-
tion and inter-channel migration, to alleviate the sub-channel
saturation problem. The experimental results demonstrate
that dedicated buffers are essential for structured ASIC de-
sign style.
Categories and Subject Descriptors: B.7.1 [Integrated
Circuits]: VLSI
General Terms: Performance
Keywords: Structured ASIC, Buffer Insertion, Interconnec-
tion
1. INTRODUCTION
In nanoscale CMOS era, mask cost increases dramatically
due to the lithographic difficulties. The one-time-use mask
cost is no longer affordable for small volume ASIC designs.
This results in a higher threshold for conventional standard
cell ASIC designs. To amortize mask cost, some pre-fabricated
design styles are proposed. Those design styles provide differ-
ent levels of pre-fabrication: the device-level, the gate-level,
the semi-chip-level, and the full-chip-level. Among them, struc-
tured ASIC is a semi-chip-level pre-fabricated design style.
∗This work is supported in part by the National Science Coun-
cil of Taiwan under Grant NSC-96-2221-E-155-070 and NSC-
97-2221-E-155-071-MY2.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
GLSVLSI’09,May 10–12, 2009, Boston, Massachusetts, USA.
Copyright 2009 ACM 978-1-60558-522-2/09/05 ...$5.00.
Most of the masks are fixed except the contact-mask and
some via-masks. The functionalities and the interconnections
are specified by properly assigning the contacts and the vias.
It is also known as the via patterned gate array (VPGA)
[4] [5] [6] [8] [9] [10]. With low NRE cost and medium circuit
performance as compared with the conventional standard cell
design, structured ASIC provides a new alternative for circuit
designers in terms of the mask cost, programmabilities, and
performance.
Since the interconnection delay dominates circuits delay,
buffer insertion becomes an important technique in modern
VLSI design. The interconnection delay is due to the para-
sitic resistance and capacitance on a wire. The downstream
capacitance can be greatly reduced by buffer insertion. Hence,
the interconnection delay can be reduced at the expense of
extra buffer area. Gao and Wong solve the buffer planning
problem by using a graph-based algorithm [3]. In the struc-
tured ASIC design style, the downstream capacitance would
become a crucial problem unless there are dedicated buffers.
The aforementioned issues motivate us to design dedicated
buffers for the interconnections. We design the layouts of two
dedicated buffers and extract the technology dependent pa-
rameters for evaluations.
The rest of this paper is organized as follows. The prelim-
inary background knowledge and the motivation of this pa-
per are given in Section II. Section III presents two dedicated
buffers and performs evaluations for these buffers. The exper-
imental results are drawn in Section IV. Section V concludes
this paper.
2. MOTIVATION
2.1 Island-style Structured ASIC
Structured ASIC is proposed to balance the mask cost and
the circuit performance gap between standard cell and FPGA.
Several research papers use the island-style pre-fabrication in
their structured ASIC design [9] [10] [12]. The logic fabric is
used to replace the FPGA logic component; while the rout-
ing fabric is used to replace the FPGA routing component.
Both SRAMs and transmission-gates are replaced by mask-
programmable vias. Therefore, structured ASIC provides the
mask-level programmability instead of the field programma-
bility. In a structured ASIC design style, the device-masks
and the metal-masks have been pre-fabricated such that they
can be shared among different circuits. In contrast to the
Algorithm Buffer-Insertion-for-Delay-Optimization
Init
C = all possible buffer insertion candidates ci
P = φ
Begin
do
static timing analysis
S = {ci ∈ C|Crit(ci) = 1}
U = S\P
foreach ci in U
if (downstream capacitance of ci > Cth)
buffer insertion for ci
end foreach
P = P ∪ U
while (U 6= φ)
End
Figure 3: The algorithm of Buffer-Insertion-for-Delay-
Optimization
ily downstream capacitance. Each RFB-pair has two opposite
RFBs in order to support signal propagation in different direc-
tions. The dimensions of our RFB-pairs are 8.1µm × 4.5µm
and 6µm × 4.5µm in horizontal channel and vertical chan-
nel, respectively. Combined the layouts of RFB and CLB, we
can see that there are 6 (⌊4.5/0.66⌋) routing tracks sharing 4
RFB-pairs (⌊33/8.1⌋ and ⌊29/6⌋). Therefore, we integrate 4
RFB-pairs into a sub-channel.
In our design, we use metal2/metal4 for horizontal tracks
and metal3/metal5 for vertical tracks. Hence, there are total
12 routing tracks and 4 RFB-pairs (8 RFBs) in a sub-channel.
To improve the area utilization, sub-channels are back-to-back
connected to form a routing channel. The sub-channels are
similar to standard cell rows with power/ground sharing. Fi-
nally, we use crossbar switch-block to interconnect tracks in
different routing channels [9]. A simplified layout (metal4 and
metal5 are omitted for brevity) of routing channel as well as
the RFB is drawn in Figure 2.
3.3 Simulations on Buffer Insertion
Before we perform the simulations on LFB and RFB in-
sertions, we propose an algorithm to insert buffers for delay
optimization. The algorithm is illustrated in Figure 3. C
represents the set of all possible buffer insertion candidates.
For the LFB insertion, C is the set of total CLBs; while for
the RFB insertion, C is the set of total 2-pin wires. P rep-
resents the set of processed buffer insertion candidates. S
represents the set of candidates on the critical paths. U rep-
resents the set of critical candidates which are not processed
before. Cth is the threshold capacitance for buffer insertion.
We set Cth ≈ 30fF in our simulation. Our algorithm it-
eratively selects the candidates on critical paths. Once the
downstream capacitance of the selected candidate exceeds the
threshold Cth, we insert a buffer to split off the downstream
capacitance. The complexity of this algorithm is O(n), where
n is the number of all possible buffer insertion candidates in
C.
We use a FPGA placement and routing tool, VPR [1], as our
simulation platform. The technology dependent parameters
are from SPICE simulation and predictive technology model
(PTM) [7]. All the benchmark circuits from MCNC are opti-
mized, mapped, and packed by using SIS [11], FlowMap [2],
Table 2: Simulation results of different buffer inser-
tions
Buffer Insertion RDelay (%) DW /DL
Baseline 100 14.17
LFB 29.46 7.47
RFB 10.45 0.98
LFB + RFB 10.39 0.77
and T-Vpack [1], respectively. After that, we perform place-
ment and routing by using VPR.
We first conduct a baseline simulation. There is no addi-
tional buffers inserted in our baseline simulation. After that,
we perform simulations on the following three scenarios: the
LFB insertion, the RFB insertion, and the combined LFB and
RFB insertion. The combined LFB and RFB insertion is the
results of LFB insertion followed by performing the RFB in-
sertion. Notice that there are unlimited RFBs for both the
RFB insertion and the combined LFB and RFB insertion. The
simulation results are summarized in Table 2. The Baseline,
LFB, RFB, and LFB + RFB represent the results without
any buffer insertion, the results with LFB insertion, the re-
sults with RFB insertion, and the results with combined LFB
and RFB insertion, respectively. Column RDelay represents
the average ratio of the circuit delay. Column DW /DL repre-
sents the ratio of the wire delay to the logic delay. In Table 2,
the ratio of the wire delay to the logic delay is low after per-
forming the RFB insertion. The circuit delay of combined
LFB and RFB insertion is similar to that of RFB insertion
only.
3.4 Simulation Summary
In this section, we design two buffers in our structured ASIC
and perform simulations on them. From the viewpoint of area
overheads, there is only 1 4X-buffer per CLB in a LFB design;
while there are 8 1X-inverters per 12 routing tracks in a RFB
design. Hence, the LFB is the most area-efficient; while the
combined LFB and RFB is the least area-efficient. From the
viewpoint of circuit performance, both the RFB insertion and
the combined LFB and RFB insertion outperform the LFB in-
sertion. From the viewpoint of the downstream capacitance,
we can repeatedly insert the RFB in a long wire to split off
the downstream capacitance and hence to maintain a low ra-
tio of the wire delay to the logic delay. However, the LFB
is incapable of dealing with the heavily downstream capaci-
tance due to the limitation of its maximum driving-strength.
Therefore, taking the area overheads, the circuit performance,
and the balanced ratio of the wire delay to the logic delay into
account, we suggest to use the RFB only for structured ASIC
design style.
4. CONSTRAINEDRFB INSERTIONANDEX-
PERIMENTAL RESULTS
According to the simulation results in Section III, we sug-
gest to use the RFB for structured ASIC design style. Since
the number of RFBs are fixed, we can not unlimitedly use
the RFB in routing channels. A constrained RFB insertion
technique is required to optimize the interconnection delay.
During the RFB insertion, if there is no available RFB in a
sub-channel (saturated sub-channel), we need to assign an-
other available RFB for that critical wire. Hence, we propose
a channel migration technique to alleviate the sub-channel
saturation problem. There are two phases in our channel mi-
gration technique, the intra-channel migration and the inter-
An Efﬁcient Hybrid LUT/SOP Reconﬁgurable Architecture
Po-Yang Hsu Ping-Chuan Lu Yi-Yu Liu
Department of Computer Science and Engineering
Yuan Ze University, Chungli, Taiwan 320, R.O.C.
s976024@mail.yzu.edu.tw s966027@mail.yzu.edu.tw yyliu@saturn.yzu.edu.tw
Abstract
With the increasing NRE cost of advanced process technologies,
reconﬁgurable devices receive great attention in small and medium
volume IC designs. However, lower logic utilization and slower timing
performance limit the efﬁcacy of FPGA and CPLD. In this paper,
we propose an efﬁcient hybrid LUT/SOP reconﬁgurable design style
to exploit both the advantages of LUT-cell and SOP-cell for circuit
design. After that, architectural evaluations are performed in order to
have the best cell mixture ratio. Furthermore, three logic optimization
techniques, cell collapsing, phase ﬂipping, and phase duplication, are
proposed for hybrid LUT/SOP FPGA synthesis from a pure LUT-based
design. The experimental results demonstrate that our proposed hybrid
LUT/SOP design style achieves 35% circuit performance improvement
and 51% transistor count reduction as compared with the depth
optimal 4-LUT-based FPGA.
I. INTRODUCTION
Reconﬁgurable design styles provide relatively low NRE cost as
compared to either the standard cell or the full custom design styles.
With the growth of VLSI technology, reconﬁgurable design styles are
widely used for either pre-silicon hardware/software co-veriﬁcation or
for small and medium volume ASIC products. Field programmability
enables fast re-spin turn around time and hence speeds up time to
market. There are two major categories of reconﬁgurable devices, the
ﬁeld programmable gate array (FPGA) and the complex programmable
logic device (CPLD). The FPGA utilizes lookup tables (LUT) to
implement multi-level functions in order to maximize node sharing
in a Boolean network. The CPLD employs macro-cells to implement
two-level functions in either sum-of-product (SOP) form or product-
of-sum (POS) form with maximized product-term sharing in a Boolean
network. The drawbacks of the reconﬁgurable design styles are lower
timing performance and lower area utilization as compared with the
standard cell design style. Previous research optimizes either circuit
delay or circuit area for FPGA and CPLD [1]–[7].
Hybrid FPGA architecture was proposed in last decade [8]. The
hybrid FPGA utilizes both LUT-cells and macro-cells in order to
take the advantages of FPGA and CPLD. Many research teams
suggest different macro-cell conﬁgurations for performance and area
optimization [8]–[11]. Most of the proposed hybrid FPGA architectures
utilize large macro-cells in order to cluster more functions within
a macro-cell. In this paper, we ﬁrst investigate the logic utilization
issue of homogeneous reconﬁgurable logic blocks. According to our
proﬁling results, the logic utilizations of both LUT-cell and macro-cell
are poorly low. This motivates us to propose a small reconﬁgurable
cell (SOP-cell) for hybrid FPGA architecture. In order to achieve
the best area saving, neither I/O phase complement nor product-
term sharing is available in the SOP-cell. After that, architectural
evaluations are performed to determine the best mixture ratio of SOP-
cell to LUT-cell in each reconﬁgurable logic block. Furthermore,
three logic optimization techniques, cell collapsing, phase ﬂipping,
and phase duplication, are proposed for hybrid LUT/SOP synthesis.
The experimental results demonstrate that the simple SOP-cell, without
phase complement and product-term sharing, is promising for both
performance improvement and area reduction.
The rest of this paper is organized as follows. The reconﬁgurable
architecture survey is given in Section II. Section III gives the
motivation of this paper. In Section IV, we propose our SOP-cell
and logic optimization techniques for hybrid LUT/SOP reconﬁgurable
This work is supported in part by the National Science Council of Taiwan
under Grant NSC-97-2221-E-155-071-MY2.
architecture. The experimental results are drawn in Section V. Finally,
Section VI concludes this paper.
II. SURVEY OF RECONFIGURABLE ARCHITECTURES
In this section, we give a brief architecture survey for three recon-
ﬁgurable design styles, FPGA, CPLD, and hybrid FPGA.
A. LUT-based FPGA
FPGA utilizes LUT-cell as a basic logic block. The LUT-cell is
characterized by k as a k-LUT, which consists of a 2k-input MUX with
k selection signals and 2k SRAM bits. The SRAM is used to store the
truth table of a k-input function. Hence, a k-LUT is capable of realizing
any k-input Boolean function by properly assigning all the SRAM bits
selected by k MUX selection signals. Due to the exponential growth
nature of the SRAM bits with respect to k, LUT-cell input size k is
usually less than 7 in most of commercialized LUT-based FPGA [12],
[13]. Taking circuit delay into account, Ahmed and Rose suggest 4-
LUT with the best area efﬁciency [1]. Many research teams investigate
area and delay trade-off in order to make FPGA competitive [2]–[4].
B. Macro-cell-based CPLD
CPLD utilizes macro-cell as a basic logic block. The macro-cell
conﬁguration is characterized by 3-tuple, (k, m, p). There are k inputs
with both positive and negative phases, m product-terms derived by the
AND-plane, and p outputs derived by the OR-plane. The advantages
of macro-cell are circuit performance and delay predictability since its
regular layout and ﬂattened circuit level. Feedback paths are available
in many commercialized products in order to extend the capability
of implementing multi-level Boolean functions [12], [13]. Anderson
and Brown propose an area-efﬁcient multi-level synthesis approach for
medium size macro-cell with (10, 12, 4) constraints [5]. In addition,
logic packing receives intensively study to cluster multiple output
Boolean functions into a macro-cell [6], [7].
C. Combined LUT/Macro-cell-based Hybrid FPGA
Hybrid FPGA is composed of heterogeneous reconﬁgurable devices.
The objective of using different types of logic blocks is to draw on
the strength of each to offset the weakness of the other. Previous
work utilizes large macro-cells in hybrid FPGA design [8]–[10]. Hu
et al. propose a unique function extraction method by proﬁling the
NPN-equivalence of LUT-cells. Four commonly used sub-circuits are
extracted to make up a primitive macro-gate. However, once a certain
sub-circuit is selected by the MUX in the macro-gate, the other 3
sub-circuits are wasted [11].
APEX-20K is a commercialized hybrid FPGA product. Both LUT-
cell and macro-cell are integrated in the device [12]. The (k, m, p)
constraints of the macro-cell are large (36, 80, 16) in order to ﬁt
more functions. However, the product positioning of hybrid FPGA is in
vague since either FPGA or CPLD is capable of replacing the hybrid
FPGA. Besides, the most intractable issues are technology mapping
and logic packing of heterogeneous cells. To improve the capability
of hybrid FPGA, mapping and packing algorithms are required to
deal with the following three issues simultaneously: (1) utilize less
hardware resource, (2) achieve higher circuit performance, and (3)
balance heterogeneous type of reconﬁgurable cells.
978-1-4244-5271-2/10/$26.00 ©2010 IEEE 173
a
b
c
d
e
o= ab+acd+ e
VDDVDDVDDVDD
GND GNDGNDGND
R
o
u
tin
g
Ch
an
ne
l
Fig. 5. Schematic of a SOP-cell
TABLE I
TRANSISTOR COUNT AND DELAY OF SOP-CELL AND LUT-CELL
Cell Type Transistor Rise Delay Fall Delay Max Delay Delay Ratio
LUT-cell 164 4.75E-10 4.27E-10 4.75E-10 1.00
SOP-cell 40 2.37E-10 2.46E-10 2.46E-10 0.52
to LUT-cell number is not balanced, some of the unused cells are
forced to be wasted. Hence, we conduct architectural evaluations for
the hybrid LUT/SOP FPGA. We use 20 benchmark circuits mapped
by DAOmap as our baseline. Then, we simply transform LUT-cell
into SOP-cell if the LUT-cell satisﬁes both literal and product-term
constraints of a SOP-cell. In order to understand the best mixture
ratio of SOP-cells to LUT-cells in each reconﬁgurable logic block,
we further perform similar transformations under given cell ratio
constraints.
There are total 6 architectural conﬁgurations, the transformation
without cell ratio constraint and the transformations with cell ratio
constraints from 0.5 to 4. The evaluation results are summarized
in Figure 6. Notice that we use the parameters listed in Table I
for transistor count and circuit delay evaluations. The “Optimal”
conﬁguration represents that there is no cell ratio constraint. The “Ratio
= 0.5” conﬁguration represents that a SOP-cell is along with 2 LUT-
cells. The “Ratio = 2” conﬁguration represents that a LUT-cell is
along with 2 SOP-cells, and so on and so forth. From Figure 6, our
proposed SOP-cell is efﬁcient for both area reduction and performance
improvement. Taking both area and performance into account, we
conclude that the best ratio of SOP-cell number to LUT-cell number
is about 2 to 3 in each logic block.
C. Synthesis for Hybrid LUT/SOP FPGA
In this subsection, we propose our synthesis techniques and overall
synthesis ﬂow for hybrid LUT/SOP design. The initial input is a pure
LUT-based design. We transform some LUT-cells into SOP-cells for
area and delay optimization. According to the SOP-cell characteristics
discussed in Section IV.A, phase complement is not available in
our design. Hence, our proposed synthesis techniques maximize the
number of positive unate LUT-cells in order to perform SOP-cell
mapping.
1) Cell Collapsing: The collapsing operation is to transform a
multi-level Boolean network into a two-level representation. In cell
 0
 10
 20
 30
 40
 50
Optimal Ratio=0.5 Ratio=1 Ratio=2 Ratio=3 Ratio=4
Pe
rc
en
ta
ge
(%
)
Architechtural configurations
Transistor count reduction
Delay improvement
Fig. 6. Architectural evaluations for hybrid LUT/SOP
LUT
LUT
SOP
aa bb cc dd
w
x
x
y
y
z
z
o
o
wxyz o
---1 1
111- 1
abcd w
--1- 1
---1 1
11-- 1
abcdxyz o
------1 1
--1-11- 1
---111- 1
11--11- 1
Fig. 7. Example of cell collapsing
LUT
LUTLUT
LUT
LUTLUT
aa bb cc dd
mm nn pp
w w′
xx yy zz
o1o1 o2o2
abcd w
1-1- 1
-010 1
mnpw o1
1-1- 1
-001 1
wxyz o2
0-1- 1
-1-1 1
abcd w′
--0- 1
01-- 1
0--1 1
mnpw′ o1
1-1- 1
-000 1
w′xyz o2
1-1- 1
-1-1 1
Fig. 8. Example of phase ﬂipping
collapsing, only positive unate cells are eligible for collapsing into
SOP-cells. Figure 7 illustrates cell collapsing. Two cascaded LUT-
cells, o and w, are collapsed into one SOP-cell under given product-
term and literal constraints.
2) Phase Flipping: Phase ﬂipping is to ﬂip the phase of a negative
unate input to a positive unate input. By using phase ﬂipping technique,
we are capable of transforming a function with both positive unate
inputs and negative unate inputs into a pure positive unate function.
Figure 8 illustrates phase ﬂipping. We complement the phase of LUT-
cell w in order to form a positive unate LUT-cell o2.
3) Phase Duplication: Phase duplication is to clone a new LUT-cell
with complemented phase from the original cell. Since both positive
and negative phases are available, we can easily transform binate
inputs in LUT-cells into positive unate inputs. Figure 9 illustrates phase
duplication. In Figure 9, a complemented LUT-cell w′ is duplicated in
order to remove the binate input in LUT-cell o1.
4) Overall Synthesis Flow: Our overall synthesis ﬂow is summa-
rized into three main steps.
Step 1: Cell collapsing is performed on critical cells for timing
optimization if both the product-term and literal constraints are satis-
ﬁed. We repeat the procedure until no further critical cell collapsing
is possible.
Step 2: We further improve circuit performance by one-to-one
transforming critical LUT-cells into SOP-cells. The transformation
procedure is performed repeatedly until there is no possible critical
LUT-cell transformation.
Step 3: We transform LUT-cells into SOP-cells in order to balance
the ratio of SOP-cell number to LUT-cell number.
LUTLUTLUT
LUT SOP SOPSOP
o1 o1o2 o2
aaa bbb ccc ddd
w ww′
xx yy zz mno... mno... vv
abcd w
-11- 1
1--1 1
mnopqrstuvw o2
111-------- 1
------111-- 1
---111----- 1
--11-----1- 1
-1-------11 1
wxyz o1
01-- 1
1-11 1
abcd w’
00-- 1
0-0- 1
-0-0 1
--00 1
wxyzw’ o1
-1--1 1
1-11- 1
Fig. 9. Example of phase duplication
175
Dangling-wire Avoidance Routing for Crossbar Switch Structured ASIC Design Style
Yi-Huang Hung Hung-Yi Li Po-Yang Hsu Yi-Yu Liu
Department of Computer Science and Engineering
Yuan Ze University, Chungli, Taiwan 320, R.O.C.
s976054@mail.yzu.edu.tw s976030@mail.yzu.edu.tw s976024@mail.yzu.edu.tw yyliu@saturn.yzu.edu.tw
Abstract
In the routing architecture of a structured ASIC, crossbar is one
of the most area efﬁcient switch blocks. Nevertheless, dangling-
wire occurs when there is a routing bend in crossbar switch.
The dangling-wire incurs longer wire length as well as higher
interconnection capacitance. In this paper, we are motivated to
tackle dangling-wire routing issues for structured ASIC. We ﬁrst
propose a compact graph model for crossbar switch routing. With
our graph model, switch connectivity relations can be removed to
keep the 2-D structured ASIC routing graph efﬁcient and to speed up
run-time of our routing algorithm. Furthermore, we leverage state-
of-the-art techniques into our routing framework, which contains
deferred pin assignment, Steiner point re-assignment, and anchor
pair insertion, to minimize dangling-wires taking both total wire
length and routing congestion into account. The experimental results
demonstrate that our proposed routing framework greatly reduces
21% dangling-wires, 34% channel width, and 13% total wire length
as compared with VPR using crossbar switch.
I. INTRODUCTION
As the VLSI fabrication technology advances, the increasing
NRE cost (non-recurring engineering cost) becomes a key design
factor. Structured ASIC is a via-programmable design style with
semi-chip-level pre-fabrication. Except some via-masks, most of the
masks are ﬁxed in structured ASIC. Both the functionalities and
interconnections can be conﬁgured by mask-programmable vias.
The ﬁxed masks are shared among different design projects in
order to amortize fabrication cost of advanced process technology.
Therefore, cost-performance efﬁciency is the advantage of structured
ASIC design over FPGA and standard cell designs. Structured ASIC
becomes one of the design style options for modern ASIC design
projects. Recently, many research teams target on structured ASIC
generic logic block designs and synthesis methodologies [1]–[5].
Besides of the functional efﬁciency in logic block designs, in-
terconnection efﬁciency is another important issue for structured
ASIC. In structured ASIC, the beneﬁt of an universal switch block
is offset by complex layout topology and large metal area [2].
Crossbar switch is one of the most area efﬁcient switch block
conﬁgurations for structured ASIC [6]. Nevertheless, dangling-wire
in crossbar switch incurs extra routing area and wire capacitance
overheads. Therefore, we are motivated to alleviate dangling-wire
issue in structured ASIC design. To the best of our knowledge, there
is no previous work which minimizes dangling-wires for crossbar
switch in structured ASIC design style.
The rest of this paper is organized as follows. Section II presents
background knowledge of structured ASIC design style, switch
block design, and dangling-wire issue. In Section III, we propose
an efﬁcient graph model for 2-D crossbar switch structured ASIC
routing. Section IV illustrates our framework for dangling-wire
avoidance routing, which contains deferred pin assignment, Steiner
point re-assignment, and anchor pair insertion. The experimental
results are drawn in Section V. Finally, Section VI concludes this
paper.
This work is supported in part by the National Science Council of Taiwan
under Grant NSC-97-2221-E-155-071-MY2.
(a) (b)
HorizontalVertical
Fig. 1. Crossbar switch block
II. BACKGROUND
A. Structured ASIC Design Style
Structured ASIC is a via-programmable design style. Most of the
masks including the device-masks, contact-mask, metal-masks, and
some via-masks are pre-fabricated. Only a few via-masks are used
to conﬁgure various Boolean functions and interconnections. As
compared with the FPGA design style, structured ASIC removes
ﬁeld programmable elements (SRAM and transmission-gate) in
order to greatly improve chip density as well as circuit perfor-
mance. As compared with the standard cell design style, shared
masks signiﬁcantly amortize fabrication cost. Consequently, the cost-
performance advantage over FPGA and standard cell design styles
is an incentive for ASIC vendors to migrate toward an advanced
process technology.
B. Switch Block Design
In switch block design, the concept of universal switch is
proposed to guarantee simultaneous routability through a switch
block [7]. Pileggi et al. implement a via-programmable universal
switch block with three wire segments in both horizontal and vertical
orientations [8], [9]. The area penalty reduces the applicability
of universal switch block in structured ASIC. Crossbar switch is
composed of only one horizontal and one vertical wire segments.
Patel et al. perform architectural evaluations on universal switch and
crossbar switch for structured ASIC design style. The evaluation
results indicate that universal switch is inferior to crossbar switch
in terms of area utilization [2]. Figure 1(a) draws the layout of
a crossbar switch. Notice that there is no transistor required in
switch block. Mask-programmable vias are used to interconnect
horizontal and vertical wire segments. Accordingly, the area density
of crossbar switch is extremely high. In Figure 1(a), each cross-point
is a possible location to place a programmable-via connecting two
wire segments with different orientations. The connectivity relations
of horizontal and vertical tracks form a complete bipartite graph
drawn in Figure 1(b).
C. Dangling-wire Issue
Since there is only one metal bridging the two sides of adjacent
routing tracks, each crossbar switch supports at most one signal
transmission. Dangling-wire occurs when there is a routing bend
in crossbar switch. Figure 2(a) illustrates the dangling-wires. In
Figure 2(a), the dangling-wire inactivates the connectivity from the
opposite routing track to the switch block. The dangling-wire incurs
longer wire length as well as higher interconnection capacitance.
Taking Figure 2(b) and Figure 2(c) as an example, a zigzag routing
incurs extra wire segments as compared with a L-shape routing. Ran
and Marek-Sadowska evaluate several crossbar routing architectures
and suggest to use jumper metals for dangling-wire length reduction.
They further investigate white-space allocation to alleviate crossbar
978-1-4244-5271-2/10/$26.00 ©2010 IEEE 177
cc
Illegal wire segment
S
S
S
SS S
S
SS
SS
L
L L
LL
LLLL
L
LL
L
L
L
LC
C C
C
C
C
C
C
CC
C C C
CC
C C
C C
CC C
C
CC
C
C
C
Source
Sink
SinkSink
Sink
Location of Steiner point
Location of deferred pin
Illegal Steiner point
Fig. 5. Example of an illegal Steiner tree
0.5 0.5 0.5
(a) (b) (c)
0.5
0.5
0.50.5
0.5
0.5
0.5
0.5
11
11
Illegal Steiner point Candidate switch block
Fig. 6. Steiner point re-assignment from logic block
neighboring switch blocks. In order to minimize dangling-wires,
physical locations of pins incident to the Steiner point (the predeces-
sor and successors in a Steiner tree) are used to determine a better
switch block for Steiner point re-assignment. The assigned switch
block is determined by a priority weight. Higher priority weights
are granted to switch blocks close to incident pins (predecessor and
successors) with minimum number of routing bends.
Each incident pin grants a speciﬁc priority weight to switch blocks
neighboring to the Steiner point. Figure 6 draws the priority weights
of Steiner point re-assignment from logic block. In Figure 6(a), if
an incident pin resides in four quadrants of the logic block, the
pin grants priority weight 1 to nearest switch block. In Figure 6(b),
if an incident pin locates on the same row/column of the switch
blocks, the pin grants priority weight 0.5 to two switch blocks
within the same row/column. In Figure 6(c), if an incident pin
is directly above/below/left/right to the logic block, the pin grants
priority weight 0.5 to two switch blocks above/below/left/right to
the logic block. Figure 7 draws the priority weights of Steiner point
re-assignment from routing channel. In Figure 7(a), if an incident
pin has the same distance away from two switch blocks, the pin
grants priority weight 0.5 to both switch blocks. In Figure 7(b), if
an incident pin is close to a switch block, the pin grants priority
weight 1 to the switch block.
Finally, we compute the lump sum priority of each switch block.
The illegal Steiner point is shifted to the switch block with highest
priority. By taking incident pins into account, our Steiner point
re-assignment technique is capable of minimizing dangling-wires
incurred by unnecessary routing bends. Once the Steiner switch
blocks are assigned, two-pin pattern routing with I-shape and L-
shape is performed to complete an initial Steiner tree routing for
all Steiner switch blocks and deferred pins. After that, we use the
0.5 0.5
0.5
0.5
11
(a) (b)
Illegal Steiner point
Candidate switch block
Fig. 7. Steiner point re-assignment from routing channel
initial Steiner tree to assign actual pin locations and to complete the
ﬁnal Steiner tree by connecting deferred pins to actual pins.
C. Anchor Pair Insertion for Congestion Removal
After completing the initial global routing, we perform rip-up
and re-route. The objective of rip-up and re-route is to move
wire segments out of a congested channel/switch with minimized
dangling-wires and wire length overheads. Recently, congestion
removal receives intensive attention in standard cell routing [14],
[15]. Rip-up and re-route-based maze routing with progressive
bounding box expansion is a commonly used technique without
modifying original Steiner tree topology. However, routing bends,
incurred by maze routing, lead to numerous dangling-wires. Hence,
maze routing may not be a good congestion removal technique for
crossbar switch routing. Restricted routing bends must be enforced
in order to prevent from incurring many dangling-wires.
We propose anchor pair insertion algorithm to remove channel
congestion with minimized dangling-wire overheads. The fundamen-
tal motivation of our anchor pair insertion algorithm is to construct
a new bridge away from the congested channel/switch to replace the
original interconnection. Given a Steiner tree T , if a wire segment
between pinx and piny passes through a congested channel/switch,
we remove the interconnection between the two pins. The original
Steiner tree is then partitioned into two sub-trees, Tx and Ty. After
that, we create a pair of anchor points, ax and ay, and insert the
anchor points into Tx and Ty, respectively. Furthermore, we re-
construct new Steiner sub-trees T ′x and T ′y individually. Finally, we
connect anchor points ax and ay to form a new Steiner tree T ′.
There are three properties for the anchor pair locations in order to
guarantee at most 2 extra dangling-wire segments.
1) Bridging: In order to minimize the number of dangling-wires,
the horizontal/vertical coordinates of an anchor pair are the same.
Hence, no dangling-wire is allowed between ax and ay.
2) Topology: In order to reuse existed sub-tree topologies, switch
blocks and connection blocks of original Steiner sub-trees Tx and
Ty, are anchor point candidates with higher priority. The reused sub-
tree topologies not only reduce dangling-wires but also prevent from
incurring too much wire length overheads.
3) Boundary: In order to limit the wire length overheads as well
as run-time complexity, we use a bounding box to conﬁne search
space for the anchor pair. Initially, the bounding box Bx,y is speciﬁed
by two pins, pinx and piny. If there is no available anchor pair found
for congestion removal, a progressive bounding box expansion is
used to enlarge Bx,y. The bounding box expansion direction is based
on the orientation of congested channel/switch. If the congested
channel/switch is in horizontal orientation, we expand Bx,y in vertical
direction and vice versa.
With the aforementioned three properties, the run-time complexity
of our anchor pair insertion algorithm is O(m+ n+ e), where m
and n are the dimensions of the bounding box Bx,y and e is the
wire length of Tx and Ty within Bx,y in terms of channel/switch
numbers. Empirically, e is dominated by m+n. Figure 8 draws three
typical anchor pair insertion examples. In Figure 8(a), the original L-
shape pattern routing is reshaped to a Z-shape pattern routing under
bridging and boundary properties. In Figure 8(b), the original I-
shape pattern routing is optimized by edge shifting under bridging,
topology, and boundary properties. In Figure 8(c), the original I-
shape pattern routing is reshaped to a detoured bridge routing under
bridging and boundary properties.
V. EXPERIMENTAL RESULTS
Our proposed dangling-wire avoidance crossbar router is im-
plemented as a software tool, denoted DAR-C. We use VPR as
our development platform [16]. Our experiment is performed on
IBM X3550 2.5GHz Xeon Server with 26 GB memory. MCNC
benchmark suite is used in the experiment. All circuits are pre-
placed by VPR.
We compare the results of our DAR-C to the results of VPR
using crossbar switch, denoted VPR-C. The experimental results are
drawn in Table I. The benchmark circuit proﬁles in terms of logic
179
IEEE TRANSACTIONS ON COMPUTER-AIDED DESIGN OF INTEGRATED CIRCUITS AND SYSTEMS, VOL. X, NO. XX, XXX 2010 1
Performance-driven Dual-rail Routing Architecture for
Structured ASIC Design Style
Fu-Wei Chen and Yi-Yu Liu, Member, IEEE
Abstract
In recent years, structured ASIC design style has lessened the
importance of mask cost. Multiple structured ASIC chip designs
share the same pre-fabricated device and wire masks. Nevertheless,
the interconnection delay in a pre-fabricated wire slows down
circuit performance as a result of high capacitive load. We propose
a dual-rail routing architecture that reduces wire delay by 10% to
15% compared to the original routing architecture. Furthermore,
we propose a dual-rail insertion algorithm to reduce routing
area overhead. Taking wire criticality, delay significance, and
wire congestion into consideration, our proposed algorithm is
capable of trading moderate routing area overhead for performance
improvement. The experimental results demonstrate that our dual-
rail technique reduces wire delay by 9.8% with 4.8% routing area
overhead and improves overall circuit performance by 7.0%.
I. INTRODUCTION
With the advances of VLSI manufacturing technology, lithographic
difficulties have dramatically increased mask cost. The one-time-use
mask cost is no longer affordable for small and medium volume
ASIC designs. This results in a higher threshold for conventional
standard cell design style. To reduce mask cost, structured ASIC is
proposed to share multiple masks among different designs [1], [2]. In
this paper, we are going to discuss interconnection issues of structured
ASIC. For pre-fabricated metal layers, we propose a uniform dual-rail
routing architecture as a wire tapering alternative to improve circuit
performance. Furthermore, we propose a dual-rail insertion algorithm
to reduce routing area overhead caused by extra wire segments.
The rest of this paper is organized as follows. The background
knowledge of structured ASIC and performance-driven routing ar-
chitectures is given in Section II. Section III illustrates our SPICE
simulations on different routing architectures. The dual-rail inser-
tion technique and algorithm for structured ASIC design style are
proposed in Section IV. Section V reports the experimental results.
Section VI concludes this paper with future research directions.
II. PRELIMINARY
A. Structured ASIC Design Style
Structured ASIC is proposed to balance the problems of mask
cost and circuit performance between the FPGA and standard cell.
Manuscript received December 3, 2008; revised November 30, 2009 and
April 20, 2010. Date of current version July 15, 2010. This work is a revised
and extended version of the papers presented at the 2008 IEEE/ACM Design,
Automation, and Test in Europe (DATE’08) and the 2009 IEEE/ACM Design,
Automation, and Test in Europe (DATE’09). This work was supported in part
by the National Science Council of Taiwan under Grants NSC-96-2221-E-
155-070 and NSC-97-2221-E-155-071-MY2. This paper was recommended
by Associate Editor L. Scheffer.
Fu-Wei Chen is with the Department of Computer Science, National Tsing
Hua University, Taiwan, ROC. (E-mail: d9762812@oz.nthu.edu.tw)
Yi-Yu Liu is with the Department of Computer Science and Engineering,
Yuan Ze University, Taiwan, ROC. (E-mail: yyliu@saturn.yzu.edu.tw)
Copyright (c) 2010 IEEE. Personal use of this material is permitted.
However, permission to use this material for any other purposes must be
obtained from the IEEE by sending an email to pubs-permissions@ieee.org.
TABLE I
RESOURCE UTILIZATION OF PRE-FABRICATED DESIGN STYLE
Circuit CLB Net UCLB (%) UChannel (%)
apex4 1262 1271 97.8 65.6
bigkey 1707 1936 80.0 47.9
C6288 2416 2448 97.4 66.1
des 1591 1847 76.1 38.7
diffeq 1497 1561 93.6 67.8
dsip 1370 1599 76.3 36.8
elliptic 3604 3735 93.6 53.1
ex1010 4598 4608 99.6 64.4
ex5p 1064 1072 93.7 65.1
frisc 3556 3576 96.3 63.9
misex3 1397 1411 98.0 67.3
s298 1931 1935 99.5 76.0
seq 1750 1791 95.8 66.1
spla 3299 3315 98.2 58.5
tseng 1047 1099 85.7 61.0
average 92.1 59.9
In contrast to the FPGA design style, structured ASIC design style
replaces both SRAMs and transmission-gates by mask-programmable
vias. Therefore, a structured ASIC trades field programmability for
circuit performance. Several previous works utilize island-style pre-
fabrication in their structured ASIC design [1]–[3]. The island-style
pre-fabrication is one of the well-known chip-level pre-fabricated
design styles [4], [5]. There are two major components in an island-
style pre-fabrication, logic component and routing component. Logic
components are composed of configurable logic blocks (CLB). Each
CLB contains a set of lookup tables and flip-flops to realize both
combinational and sequential logic functions. Routing components
consist of routing channels, connection-blocks, and switch-blocks
to interconnect logic components. By properly configuring mask-
programmable vias, various VLSI circuits can be implemented in
island-style pre-fabrications. The structured ASIC design style is also
known as via patterned gate array (VPGA).
However, one major difficulty of implementing a circuit in pre-
fabricated design styles is properly allocating both logic components
and routing components under limited resource constraints. Many
previous research works focus on related issues. Tom and Lemieux
propose a module depopulation technique under a given routing
channel-width constraint [6]. Chang and Wong compare a set of
universal switch-block structures to improve circuit routability [7].
Betz and Rose investigate channel widths of both horizontal channels
and vertical channels for better routing area utilization [8]. However,
these techniques inevitably require over-designing either logic com-
ponents or routing components. Once a design has been mapped,
unused hardware resources are wasted.
In order to understand resource utilization of pre-fabricated design
styles, we conduct a profiling experiment. First, benchmark circuits
from MCNC are optimized, mapped, and packed by using SIS [9],
FlowMap [10], and T-Vpack [4], respectively. After that, we perform
placement and routing by using VPR [4]. Table I shows the results.
In Table I, Columns CLB and Net are numbers of CLBs and nets,
respectively. Columns UCLB and UChannel are utilizations of CLB
and routing channel, respectively. From Table I, we can see that the
channel utilization is relatively low compared to the CLB utilization.
Many unused routing tracks are wasted in a pre-fabricated design
style.
B. Performance-driven Routing Architectures
Conventionally, non-uniform wire tapering architecture is used to
reduce interconnection delay. Since there are many unused tracks in
a pre-fabricated design style, we propose a uniform dual-rail routing
architecture for wire delay optimization. Our dual-rail merges two
adjacent wires into one signal propagation channel. According to the
IEEE TRANSACTIONS ON COMPUTER-AIDED DESIGN OF INTEGRATED CIRCUITS AND SYSTEMS, VOL. X, NO. XX, XXX 2010 3
265
270
275
280
285
290
295
300
0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0
Si
gn
al
 p
ro
pa
ga
tio
n 
de
la
y 
 (p
s)
Ratio of heterogeneous wire length to total wire length
Original wire
Tapering-wire
Dual-rail wire
0.00
0.05
0.10
0.15
0.20
0.25
0.30
0.35
0.40
0.45
0.50
0.55
0.60
0.65
0.70
0.75
0.80
0.85
0.90
0.95
1.00
1.05
1.10
0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0
Cr
os
st
al
k 
no
ise
  (V
)
Ratio of heterogeneous wire length to total wire length
Original wire
Original wire
High to low condition: tapering-wire
High to low condition: dual-rail wire
Low to high condition: tapering-wire
Low to high condition: dual-rail wire
0.0
0.2
0.4
0.6
0.8
1.0
1.2
1.4
1.6
1.8
2.0
2.2
2.4
2.6
2.8
3.0
3.2
3.4
0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0
Po
w
er
 c
on
su
m
pt
io
n 
(m
W
)
Ratio of heterogeneous wire length to total wire length
Original wire
Original wire
Worst case condition: tapering-wire
Worst case condition: dual-rail wire
Best case condition: tapering-wire
Best case condition: dual-rail wire
(a) (b) (c)
Fig. 3. Property simulation results in terms of (a) signal propagation delay, (b) crosstalk noise, and (c) power consumption
0
50
100
150
200
250
300
350
400
450
500
550
600
650
700
750
800
850
900
950
1000
1050
1100
1150
1200
500 1000 1500 2000 2500
Si
gn
al
 p
ro
pa
ga
tio
n 
de
la
y 
 (p
s)
Wire length (um)
Original wire
Tapering-wire
Dual-rail wire
0.00
0.05
0.10
0.15
0.20
0.25
0.30
0.35
0.40
0.45
0.50
0.55
0.60
0.65
0.70
0.75
0.80
0.85
0.90
0.95
1.00
1.05
1.10
500 1000 1500 2000 2500
Cr
os
st
al
k 
no
ise
  (V
)
Wire length  (um)
High to low condition: original wire
High to low condition: tapering-wire
High to low condition: dual-rail wire
Low to high condition: original wire
Low to high condition: tapering-wire
Low to high condition: dual-rail wire
0.0
0.2
0.4
0.6
0.8
1.0
1.2
1.4
1.6
1.8
2.0
2.2
2.4
2.6
2.8
3.0
3.2
3.4
500 1000 1500 2000 2500
Po
w
er
 c
on
su
m
pt
io
n 
 (m
W
)
Wire length  (um)
Worst case condition: original wire
Worst case condition: tapering-wire
Worst case condition: dual-rail wire
Best case condition: original wire
Best case condition: taperng-wire
Best case condition: dual-rail wire
(a) (b) (c)
Fig. 4. Scalability simulation results in terms of (a) signal propagation delay, (b) crosstalk noise, and (c) power consumption
are two identical wire segments. For dual-rail wire capacitance, it is
difficult to obtain a closed analytical formula. Hence, we perform
effective capacitance fitting for both original and dual-rail wires. We
first remove coupling capacitance in our SPICE netlists to prevent
interference from crosstalk effect. After that, we fine tune the effective
values of ground capacitance for both original wire and dual-rail wire
in order to obtain similar worst case simulation results within 1ps
delay deviation. Finally, the capacitance factor is the ratio of the
effective capacitance in dual-rail wire to that in original wire. Fig. 5
summarizes our fitting results with 25µm unit wire length. The fitting
results indicate that the effective capacitance of dual-rail wire is about
16.8% larger than that of the original wire.
Given an n-segment transmission line, assume that the driver
resistance, load capacitance, unit wire resistance, and unit wire
capacitance are Rd, CL, rw, and cw, respectively. According to the
Elmore delay model, the signal propagation delay of the transmission
line can be derived in Equation (1).
Delay = RdCL + nRdcw + nrwCL +
1
2
n2rwcw (1)
In Equation (1), the first term is a constant in both original and
dual-rail routing architectures. The second term will be increased by
16.8% in dual-rail routing architecture. The last two terms will be
decreased by 50% and 1− 0.5 · 1.168 = 41.6% in dual-rail routing
architecture, respectively. Therefore, our dual-rail routing architecture
can be utilized for interconnection performance improvement unless
the second term dominates the last two terms.
IV. DUAL-RAIL FOR STRUCTURED ASIC DESIGN STYLE
A. Dual-rail Insertion Technique
According to profiling results in Section II, routing resource
utilization of pre-fabricated design style is low. This is a good
8.00
8.50
9.00
9.50
10.00
10.50
11.00
11.50
12.00
500 1000 1500 2000 2500
 1.15
 1.16
 1.17
 1.18
 
W
or
st
 c
as
e 
ef
fe
ct
ive
 c
ap
ac
ita
nc
e 
(fF
)
Ca
pa
cit
an
ce
 fa
ct
or
Wire length (um)
Effective capacitance factor = 1.168
Original wire
Dual-rail wire
Capacitance factor
Fig. 5. Effective wire capacitance characterization per 25µm
opportunity for dual-rail routing. To enable dual-rail routing, we need
to insert a dual-rail wire segment next to the original wire segment.
After that, we need to modify corresponding connection-blocks and
switch-blocks to complete dual-rail routing. For layout regularity,
we take crossbar switch-block as an example to illustrate dual-rail
insertion for structured ASIC design style [1].
Fig. 6 draws the schematic of dual-rail insertion within a
connection-block and a switch-block. By enabling dual-rail insertion
capabilities within both connection-blocks and switch-blocks, we
are capable of reducing wire delay for structured ASIC design
style. Nevertheless, the inserted dual-rail wire doubles routing track
requirement and hence incurs large routing area overhead. Therefore,
we need to effectively select a small set of wire segments for dual-rail
insertion.
B. Dual-rail Insertion Algorithm
The dual-rail insertion algorithm is performed after timing-driven
routing by using original wires. Once the initial routing is completed,
we use the Elmore delay model to compute wire delay. Then, we
IEEE TRANSACTIONS ON COMPUTER-AIDED DESIGN OF INTEGRATED CIRCUITS AND SYSTEMS, VOL. X, NO. XX, XXX 2010 5
TABLE III
RESULTS OF DUAL-RAIL INSERTION
Original VPR+D VPDR
Circuit wh wv dlogic dwire dtotal Owh Owv Idwire Idtotal Owh Owv Idwire Idtotal
apex4 37 37 3.28E-09 1.03E-08 1.36E-08 29.73% 10.81% 13.45% 10.21% 2.70% 2.70% 1.49% 1.13%
bigkey 37 37 1.94E-09 1.46E-08 1.66E-08 100.00% 32.43% 13.12% 11.59% 8.11% 5.41% 4.08% 3.61%
C6288 34 34 6.72E-08 1.42E-08 8.14E-08 23.53% 5.88% 20.44% 3.58% 2.94% 2.94% 2.34% 0.41%
des 30 30 2.73E-09 2.03E-08 2.30E-08 76.67% 26.67% 25.33% 22.32% 3.33% 3.33% 22.32% 19.67%
diffeq 37 37 7.88E-09 4.95E-09 1.28E-08 8.11% 5.41% 9.75% 3.77% 2.70% 2.70% 10.17% 3.93%
dsip 26 26 1.94E-09 1.24E-08 1.43E-08 92.31% 30.77% 12.75% 11.02% 3.85% 3.85% 11.47% 9.92%
elliptic 31 31 1.94E-09 1.81E-08 2.01E-08 80.65% 22.58% 8.85% 8.00% 9.68% 6.45% 17.27% 15.61%
ex1010 46 46 8.19E-09 5.78E-09 1.40E-08 10.87% 10.87% 8.42% 3.49% 4.35% 2.17% 8.04% 3.33%
ex5p 31 31 3.82E-09 1.11E-08 1.49E-08 22.58% 16.13% 19.13% 10.56% 3.23% 3.23% 9.34% 3.28%
frisc 33 33 6.24E-09 2.06E-08 2.68E-08 90.91% 45.45% 15.19% 11.65% 6.06% 6.06% 14.66% 11.25%
misex3 29 29 3.28E-09 3.28E-08 3.61E-08 44.83% 37.93% 19.71% 17.92% 3.45% 3.45% 19.70% 17.91%
s298 29 29 8.49E-09 1.86E-08 2.71E-08 100.00% 37.93% 8.77% 4.01% 6.90% 3.45% 6.02% 2.12%
seq 32 32 3.28E-09 1.82E-08 2.15E-08 34.38% 21.88% 16.85% 14.28% 3.13% 6.25% 3.29% 2.79%
spla 34 34 8.19E-09 1.83E-08 2.65E-08 14.71% 17.65% 11.77% 10.19% 5.88% 5.88% 14.35% 9.91%
tseng 17 17 7.88E-09 2.19E-09 1.01E-08 76.47% 29.41% 2.86% 0.62% 5.88% 5.88% 1.97% 0.43%
average 53.72% 23.45% 13.76% 9.55% 4.81% 4.25% 9.77% 7.02%
TABLE IV
NUMBER OF DUAL-RAIL 2-PIN WIRES
Circuit 2-pin Cand Rc Dual Rd Removal Rr
apex4 5757 165 2.87% 55 0.96% 44 0.76%
bigkey 8473 822 9.70% 467 5.51% 459 5.42%
C6288 7280 2878 39.53% 45 0.62% 41 0.56%
des 7959 932 11.71% 172 2.16% 157 1.97%
diffeq 7234 53 0.73% 30 0.41% 28 0.39%
dsip 7468 122 1.63% 87 1.16% 83 1.11%
elliptic 17491 269 1.54% 193 1.10% 176 1.01%
ex1010 20686 197 0.95% 129 0.62% 127 0.61%
ex5p 5074 135 2.66% 75 1.48% 73 1.44%
frisc 17234 854 4.96% 381 2.21% 380 2.20%
misex3 6397 1187 18.56% 36 0.56% 33 0.52%
s298 8894 946 10.64% 112 1.26% 104 1.17%
seq 7984 481 6.02% 92 1.15% 89 1.11%
spla 11475 447 3.90% 67 0.58% 56 0.49%
tseng 5244 227 4.33% 20 0.38% 19 0.36%
average 7.98% 1.35% 1.28%
Idwire, and Idtotal are the horizontal and vertical routing area
overhead, wire delay, and circuit delay improvement compared to the
baseline, respectively. From Table III, dual-rail routing architecture
reduces wire delay by 9.8% with 4.8% routing area overhead and
improves circuit performance by 7.0%.
In Table IV, we report the number of dual-rail 2-pin wires.
Columns 2-pin, Cand, Dual, and Removal represent numbers of all
2-pin wires, candidate wires, inserted dual-rail wires, and dual-rail
wires after safe removal, respectively. Columns Rc, Rd, and Rr are
ratios of candidate wires, inserted dual-rail wires, and dual-rail wires
after safe removal to total number of 2-pin wires. From Table IV,
we can see that our proposed algorithm effectively selects a small
portion of wire segments for dual-rail insertion.
VI. CONCLUSION AND FUTURE WORK
We have proposed a dual-rail routing architecture to improve circuit
performance of structured ASIC design style. By exploiting the anti-
Miller effect between two adjacent wires with the same signal source,
this dual-rail routing architecture achieves 10% to 15% wire delay
reduction. Additionally, we present a technique to insert dual-rail
wires for structured ASIC design style. Furthermore, we propose an
effective dual-rail insertion algorithm to reduce routing area overhead.
Taking wire criticality, delay significance, and wire congestion into
consideration, our proposed algorithm is capable of trading routing
area overhead for circuit performance improvement. The experimental
results demonstrate that our proposed algorithm improves overall
circuit performance by 7.0% with about 4.8% routing area overhead.
There are some practical issues that can be further addressed. The
concept of dual-rail insertion can be further integrated into initial
global routing in order to reserve enough routing tracks for important
and critical wires. Moreover, it is worthwhile to use dual-rail as a new
routing alternative in different metal layers for ASIC routing resource
management.
Acknowledgement
The authors would like to thank the anonymous reviewers for their
constructive revision comments and suggestions.
REFERENCES
[1] C. Patel, A. Cozzie, H. Schmit, L. Pileggi, “An architectural exploration
of via patterned gate arrays”, in Proceedings of International Symposium
on Physical Design, pp.184-189, April 2003.
[2] Y. Ran, M. Marek-Sadowska, “Via-configurable routing architectures
and fast design mappability estimation for regular fabrics”, in Proceed-
ings of International Conference on Computer-Aided Design, pp.25-32,
May 2005.
[3] T. Zhang, S. S. Sapatnekar, “Buffering global interconnects in structured
ASIC design”, in Proceedings of Conference on Asia and South Pacific
Design Automation, pp.23-26, January 2005.
[4] V. Betz, J. Rose, A. Marquardt, “Architecture and CAD for deep-
submicron FPGAs”, Kluwer Academic Publishers, 1999.
[5] D. Chen, J. Cong, P. Pan, “FPGA design automation”, Now Publishers,
2006.
[6] M. Tom, G. Lemieux, “Logic block clustering of large designs for
channel-width constrained FPGAs”, in Proceedings of Design Automa-
tion Conference pp.726-731, June 2005.
[7] Y. W. Chang, D. F. Wong, C. K. Wong, “Universal switch modules
for FPGA design”, in ACM Transactions on Design Automation of
Electronic Systems pp.80-101, vol.1, i.1, Jan 1996.
[8] V. Betz, J. Rose, “Directional bias and non-uniformity in FPGA global
routing architectures” in Proceeding of International Conference on
Computer-Aided Design, pp.652-659, 1996.
[9] E. M. Sentovich, K. J. Singh, L. Lavagno, C. Moon, R. Murgai, A.
Saldanha, H. Savoj, P. R. Stephan, R. K. Brayton, A. Sangiovanni-
Vincentelli, “SIS: A system for sequential circuit synthesis”, Electronics
Research Laboratory, Memorandum No. UCB/ERL M92/41, 4 May
1992.
[10] J. Cong, Y. Ding, “Flowmap: An optimal technology mapping algorithm
for delay optimization in lookup-table based FPGA designs”, in IEEE
Transaction on Computer-Aided Design of Integrated Circuits and
Systems, pp.1-12, vol.13, i.1, Jan. 1994.
[11] A. B. Kahng, S. Muddu, E. Sarto, “On switch factor based analysis
of coupled RC interconnects”, in Proceedings of Design Automation
Conference, pp.79-84, June 2000.
[12] The predictive technology model (PTM) 2007
http://www.eas.asu.edu/˜ptm/.
[13] The international technology roadmap for semiconductors (ITRS) 2007,
http://www.itrs.net/Links/2007ITRS/Home2007.htm.
六月十五日： 
大會本日邀請到 Global Foundries的 CEO進行主題演講。演講主題為: From Contract to 
Collaboration: Delivering a New Approach to Foundry。演講者深入淺出地談到目前在先進
製程中所遭遇的問題，同時也初步地提出一些可行的解決方案。從台灣的觀點來看，這
家公司所具備的雄厚資本財力在未來十年有可能成為 TSMC的勁敵。但目前晶圓代工的
產業分佈，TSMC 和 UMC 仍然擁有最多的市場佔有率。如何持續維持台灣在半導體產
業上的競爭力，將是重要的關鍵。 
 
六月十六日： 
本日上午參加一個座談會，主題為: A Decade of NOC Research – Where Do We Stand? 本
座談會探討了許多已經被提出來的 NOC (network-on-chip)架構，這些架構可能未來在多
核心平台上遇到的問題和可行之解決方案也一一被與會者點出來討論。此外，大會在下
午安排了第二場的 keynote speech，主題為 Echoes of DAC's Past: From Prediction to 
Realization, and Watt Next? 從標題已經明顯看出，主講人針對大型晶片功率消耗所帶來
的問題提出看法。主講人相當看好 Cloud Computing 的前景。但在緊接著的另一場座談
會中，許多 IC設計工程師均對 Cloud Computing抱持質疑的態度。主要原因仍在於，IC 
designer在乎的不是 CAD flow的 run-time，而是 circuit的 quality和 design的 security。
如果雲端計算能有機會帶來電路設計品質的提升，那麼或許可以帶來 EDA演算法的新思
維。 
 
六月十七日： 
本日除了繼續參加論文發表外，也有一場大會 keynote speech，主題為: Design the Motorola 
Droid。主講人是Motorola Android phone project的主持人，主要內容圍繞在硬體 prototype
平台建構及軟體開發和驗證的複雜度及重要性。 
 
六月十八日： 
本日有付費課程(tutorial)，本人並未參加。 
由於友人在 UCLA唸書，本人趁此機會拜訪 UCLA校園，同時也進入 Jason Cong的實驗
室參觀。 
 
二、與會心得 
 
參與此次會議，除了多聽多看目前產業發展的趨勢外，更能進一步瞭解目前產業界所遭
遇的瓶頸，還可藉此機會多認識一些國際友人進而交換研究心得，以利未來學術研究。
論文發表除了能讓全世界瞭解國內的研究成果進而增加臺灣的國際能見度外，更是教師
自我成長與吸取他國經驗的重要歷練。今年國內學術單位約有 11篇論文在本會議發表，
僅次於美國。此成果表示我國在半導體設計自動化的研究水準仍然維持領先。本人還攜
帶一些書商的新書資訊及一些相關會議及期刊的 call-for-paper回臺灣參考。 
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100字為限） 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500字為限） 
由於 S-ASIC 的提出，將可以填補 FPGA 及標準元件庫兩個主流電路設計型式之間的差距，
作為中產量 IC 設計之選擇。目前 S-ASIC 的設計自動化流程多半採取類似 FPGA 的方式，
這樣的方式將無法確保電路面積使用率及電路的效能。為了提升 S-ASIC 設計型式的競爭
力，我們針對 S-ASIC 的特性分別在邏輯合成及電路繞線提出有效的演算法。進一步提升
S-ASIC 的電路效能及面積使用率，以增加 S-ASIC 的競爭力，滿足中產量 IC 設計的需求。
