1Ad-hoc Position-Aware Sensor and Communication Networks for
Reliable Surface Exploration
Chih-Yu Wen
Department of Electrical Engineering
Graduate Institute of Communication Engineering
National Chung Hsing University
Abstract
One of the most needed and challenging components in an ad-hoc wireless sensor network is the
development of practical localized algorithms for the automatic discovery of sensor position. This project
outlines recent work in which we have developed a principled approach to sensor location that operates
efficiently. We identify a number of ways that the method can be made more efficient and robust for
localization and target tracking in wireless sensor networks. A design study is performed to determine
the detailed system requirements - to determine the required spatial coverage, data rates, communication
protocols, and position estimation accuracy, and to study the trade-offs against the mass and power
requirements of the subsequent radio systems. Based on modular, self-powered, autonomous nodes, a
robust, ad-hoc, combined communications and navigation infrastructure is developed to enable the surface
exploration.
I. INTRODUCTION
A critical element of future Exploration Missions to the space or unknown areas are wide-area
explorations of the surfaces. Robots and humans will travel large distances to make scientific discoveries
and to find in-situ resources to be used as inputs to processes resulting in fuel or construction materials.
In these scenarios, it is critical that the robot or human explorer is provided with reliable, fault-tolerant
communication back to a central control point, and also with navigation information, to allow the explorer
to accurately track their progress, and enable their return to identified features of interest. Therefore, a
robust, ad-hoc, combined communications and navigation infrastructure, based on modular, self-powered,
autonomous nodes, is developed to enable this surface exploration. It will also enable sensing at each
node, to measure physical characteristics of interest.
The infrastructure will be based around low-power, wireless radio systems, that self-organize into
a network that routes communication traffic, and also determines autonomously the relative physical
positions of each node. The nodes may be pre-positioned or may be deployed incrementally, in an ad-
hoc manner; robots or human explorers can deploy new nodes as necessary. The network is robust to
single- and multiple- points-of-failure. The position location estimation becomes more accurate as more
nodes are added to the network and as more network traffic propagates.
Recent approaches to location discovery often require the availability of GPS on some reference sensors
[1], [2], [3], [4], or assume some sensors with prior position information [5], [6]. Moreover, the approaches
proposed in [7], [8] require a centralized processing of the data in order to locate the sensors. For a
wireless ad-hoc network, these assumptions may not be reasonable because the information may not be
available or because of the communication requirements. In [9] and [10], distributed systems for GPS-free
positioning in ad-hoc networks are proposed to establish a relative global coordinate system. However,
the computational burden of these procedures is heavy and their communications overhead is large.
In this project, a number of sensors are assumed to be scattered about the landscape. Initially, all of
the sensor positions are unknown and must deduce their positions based on the limited information that
The first method is a centralized technique that the current clusterhead, sensor i, determines a new
clusterhead by aggregating energy and neighbor information from its cluster members and solving the
optimization problem:
argmax
l
(1− E
(k)
l
Emaxl
)Nl (2)
subject to : El > η; l ∈ Ci, (3)
where E(k)l is the energy at time step k, Emaxl is the initial energy of sensor l, Ci is the index set of
the cluster members of sensor i, and Nl is the number of neighbors of sensor l. That is, the current
clusterhead picks the new clusterhead, choosing a member with large energy and many neighbors.
The second method is a distributed technique, which operates much like the CAWT in utilizing a
random timer. Once the energy in the current clusterhead is below the threshold, it transmits a message
to start the reselection process. Each cluster member then checks the energy constraint. As long as the
cluster member satisfies the constraint, it generates a random waiting time:
WT
(k+1)
i = (1−
E
(k)
i
Emaxi
)N
c
i ·WT (k)i , (4)
which depends on the number of neighboring cluster members N ci and the remaining energy level.
The motivation for forming subclusters is to provide a way to do multi-hop communication within a
cluster, which may be needed because sensors are no more than 2 hops away from the initial clusterhead
and sensors may be up to 4 hops away from the new clusterhead. Hence, sensors in a cluster may
be further classified as: (1) subcluster member, (2) subclusterhead, or (3) clusterhead. Subclusters and
subclusterheads are generated by applying this distributed protocol to the cluster topology.
For real applications, it is possible that the clusterhead may malfunction before broadcasting the
reselection message. One solution is that if a certain amount of time has passed with no messages from
the clusterhead, then all sensors begin their timers and apply the algorithm. As a result, restructuring the
cluster formation of the network may be required when the clusterhead malfunctions or when none of the
cluster members satisfy the energy constraint. In this case, it may necessary to re-initialize the network
into new clusters to help balance the energy burden. Such reformation may also be useful in the event
that the network topology changes or the sensors move.
B. Distance Estimation
The most straightforward method of estimating the distance between sensors directly measures the
time required for a signal to propagate between the sensors. For low-powered sensors where the commu-
nication range is limited to a few hundred meters, the distance must be estimated to sub-meter accuracy.
When transmitting with electromagnetic signals, one meter of distance corresponds to a time delay of
approximately 3ns. This requires extremely accurate clocks that are precisely synchronized. Such clocks
may be more expensive than desired in the network application.
The DEVAC method [20],[21] helps to alleviate the need for highly accurate synchronous clocking.
Suppose that sensors A and B are equipped with clocks (oscillators) that are assumed to be asynchronous
in both frequency and phase. Denote tai and tbj as the time stamps in sensors A and B, respectively; let
tadel and tbdel be the delay time in sensors A and B, respectively; tab is the signal propagation time. The
estimation proceeds as shown in Figure 1:
a. Sensor A transmits a message containing the time ta0 (the time indicated on its clock at the start
of the transmission).
3
two-dimensional identity matrix and Γ is a zero matrix. The measurement term for the mth sensor is
zk = g(x) =
∑
`
||xmk − xm`k | − dm,m` |+ vk (6)
where the sum is over the nearby sensors xm`k and the measurement noise is another uncorrelated zero
mean Gaussian white noise process. Before measurements are taken at k = 1, the initial state vector is
assumed to have a uniform distribution. The particle filter method is:
1) Initialization: Generate a set of random samples xk(i), i = 1, 2, . . . , N from the prior density at
time k = 0. Each sample of the state vector is a ‘particle.’
2) Prediction: Each random sample is passed through the state equation to obtain samples from the
prior density at time k + 1. Thus
xˆk+1(i) = Φxk(i) + Γwk(i) (7)
where wk(i) is a sample drawn from the probability density function of the system noise.
3) Measurement Update: The weights of the likelihood function p(zk+1|xˆk+1(i)) are updated for each
sample in the random set i = 1, 2, . . . , N and the normalized weights are
qk+1(i) =
p(zk+1|xˆk+1(i))∑n
j=1 p(zk+1|xˆk+1(j))
(8)
for each sample.
4) Resampling: Take N samples with replacement from the random sample set xˆk+1(i), i = 1, 2, . . . , N ,
to generate the new sample set xk+1(i).
5) Position: The best single estimate of the position is the mean of xk+1(i), xk.
After obtaining the estimated sensor position, location adjustment is executed. Because the particle
filter looses diversity in the samples for static models, the Metropolis-Hastings (M-H) algorithm is used
to generate new samples. Here we summarize the M-H algorithm[24] with the initial value x0(i):
• Set k = 0 and repeat for xk(i), i = 1, 2, . . . , N .
• Draw x′k(i) from the proposal density q(xk(i), ·).
• Set u to a draw from a U(0, 1) distribution.
• Acceptance probability:
α(xk(i), x
′
k(i)) = min{1,
pi(x
′
k(i))q(x
′
k(i), xk(i))
pi(xk(i))q(xk(i), x
′
k(i))
},
where pi(·) is the target density from which samples are desired.
• If u ≤ Acceptance Probability: accept proposal and set xk+1(i) = x′k(i).
• Else: reject proposal and set xk+1(i) = xk(i).
• Return the values {xk+1(1), xk+1(2), . . . , xk+1(N)} and set k = k + 1.
D. Target Tracking
For the target tracking case, the target moves within the x − y plane according to the discrete-time
state equation (5) over a four-dimensional state state space, where xk = (x, x˙, y, y˙)Tk , wk = (wx, wy)Tk ,
Φ =

1 1 0 0
0 1 0 0
0 0 1 1
0 0 0 1
 , andΓ =

1 0
1 0
0 1
0 1
 .
5
0 0.2 0.4 0.6 0.8 1
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1 ich
ich
ich
ich
ich
ich
ich
ich
ich
cch
cch
cch
cch
cch
dch
dch
dch
dch
dch
Fig. 3. Clusters are formed and clusterheads are reselected in a random network of 100 sensors with R/l = 0.175; “¤”
represents the initial clusterhead (ich); “♦” represents a new clusterhead using the centralized protocol (cch); “ M ” represents
a new clusterhead using the decentralized protocol (dch).
The following numerical result evaluates the critical timing parameters tai and tbj in the DEVAC method
to determine the required level of timing resolution (i.e. the standard deviation of the time measurement
σ). Figure 4 shows the typical performances of time and distance measurement with the parameters
detailed in the caption and the clocks providing a resolution of 1 ns and 100 ns, respectively. Figure 4(a)
and 4(b) show the distance as estimated by a single pulse. As expected, a distance measurement with
a higher timing resolution has a smaller measurement variance. However, combining the estimates of k
pulses allows the less accurate clocking to achieve similar accuracy to the faster clocks. For example,
with the parameters as in Figure 4, it would require 10000 pulses for the 100 ns clock to achieve the
same estimation accuracy as the 1 ns clock.
C. Sensor Positioning
A typical simulation run is shown in Figure 5 (left). The three empty circles represent the three sensors
with a priori known positions, while all the others discover their positions using only power-of-arrival or
time-of-arrival information. Within the first few iterations, all sensors estimates are close to their actual
positions; as time progresses, some move about and achieve convergence by about 300 time steps.
Figure 5 (right) reports the performance of the sensor location estimate and adjustment by applying the
particle filtering and a few Monte Carlo Markov Chain (MCMC) steps on each particle. The estimation
error of a typical simulation run of the sensor location estimation is shown to be reduced by applying
the Metropolis-Hastings algorithm. Therefore, the error propagation within the network is suppressed.
D. Target Tracking with Distance Information
Figure 6 (left) presents the architecture that is used for this multiple sensor tracking system. The
measurement makes use of the information sent from another sensor to determine the target position.
Thus, we group sensors together in twos. Each group member shares its distance measurement through
a communication protocol. Then they send the best estimates of local sensor tracks to the track fusion
7
−0.5 −0.4 −0.3 −0.2 −0.1 0 0.1 0.2 0.3 0.4 0.5
−0.4
−0.2
0
0.2
0.4
0.6
0.8
1
Xk
Yk
Multilevel Tracking (Power Case): "ro"− true state; "b*"− Mean Estimate ; "gTriangle"− Track Fusion
Fig. 6. The figures show the general architecture of the tracking system and multilevel sensor tracking using power/distance
information.
• Chih-Yu Wen, Jun-Koh Chen, and William A. Sethares, “Joint Distributed Clustering and Ranging
for Wireless Ad-Hoc Sensor Networks,” in Proceedings of IEEE Vehicular Technology Conference
VTC2007-Spring, Dublin, Ireland, April 2007. (EI)
• Chih-Yu Wen and William A. Sethares, “Adaptive Decentralized Re-Clustering for Wireless Sensor
Networks,” in Proc. of IEEE International Conference on Systems, Man, and Cybernetics, Taipei,
Taiwan, October 2006. (EI)
V. CONCLUSION
This project describes a decentralized protocol for infrastructure establishment in wireless sensor
networks. The algorithms perform network topology management [25] using random waiting timers
and local information. On the basis of the cluster-based network topology, this self-configuring technique
may be applied to achieve local and global time synchronization and to provide efficient network routing.
This work assumes that all sensors operate with the same transmission range. Future plans involve
generalizing the method to consider power control strategy for minimizing the total energy consumption,
to consider certain failure scenarios, and to design efficient topology control protocols for mobile ad-hoc
wireless networks.
REFERENCES
[1] P. Bahl and V. N. Padmanabhan, “RADAR: An in-building RF based user location and tracking system,” Proceedings of
IEEE INFOCOM, pp. 775-784, Tel Aviv, Israel, March, 2000.
[2] N. Bulusu, J. Heidemann, and D. Estrin, “GPS-less Low-Cost Outdoor Localization for Very Small Devices”, IEEE Personal
Communications, vol. 7, no. 5, pp. 28-34, October 2000.
[3] D. Niculescu and B. Nath, “Ad hoc positioning system (APS),” Proceedings of IEEE GLOBECOM, pp. 2926-2931, San
Antonio, TX, November 2001.
[4] N. B. Priyantha, A. Chakraborty and H. Balakrishnan, “The cricket location-support system,” Proceedings of ACM
MOBICOM, pp 32-43, Boston, MA, August 2000.
[5] C. Savarese, J. M. Rabaey, J. Beutel, “Locating in Distributed Ad-Hoc Wireless Sensor Networks”, Proceedings of ICASSP,
pp. 2037-2040, Salt Lake City, UT, May 2001.
[6] A. Savvides, C-C Han, and M. B. Srivastava, “Dynamic fine-grained localization in ad-hoc networks of sensors,” ACM
SIGMOBILE, July 2001, Rome, Italy.
9
出席國際學術會議心得報告 
                                                             
計畫編號 NSC － 95 － 2221 － E － 005 － 026 
計畫名稱 Ad-hoc 定位感測器與通訊網路在實現可靠地表探索上之應用 
出國人員姓名 
服務機關及職稱 
國立中興大學 電機工程學系/通訊工程研究所 
溫志煜    助理教授 
會議時間地點 22 - 25 April 2007, Dublin, Ireland
會議名稱 2007 IEEE 65th Vehicular Technology Conference VTC2007-Spring
發表論文題目 Joint Distributed Clustering and Ranging for Wireless Ad-Hoc Sensor Networks 
 
 
一、參加會議經過 
 
We presented a paper titled “Joint Distributed Clustering and Ranging for Wireless Ad-Hoc 
Sensor Networks” on the IEEE VTC2007-Spring. We extend the results from our previous 
work to develop an interesting new method for solving the communication and 
self-organization problem in wireless sensor networks adaptively and efficiently. It is nice to 
have a chance to present this work on the IEEE VTC2007-Spring and obtain valuable opinions 
from the wireless communications industry professional and academics. We have a great 
discussion on sensor positioning problems with Professor Martin Klepal at Cork Institute of 
Technology, Ireland. I believe this special experience will be a very important step in my 
research progress. 
 
 
二、與會心得 
 
IEEE Vehicular Technology Conference (VTC) is one of the world's foremost international 
technical conferences for engineers and researchers at the forefront of development and 
deployment of wireless technologies. VTC program covers the entire spectrum of technologies 
including design issues of wireless communications and networks, vehicular technology, and 
applications, which provides me a great opportunity to appreciate the most current tutorials, 
research results, and industry-oriented technical contents and perspectives on wireless 
communications and networks, and further allows me to realize the issues and opportunities 
for the future of wireless communications, systems and applications as well. 
 
 
TABLE I
THE JDCRA: AN ALGORITHM FOR CLUSTERING AND RANGING
1. Each sensor initializes a random waiting timer with a value WT (0)i .
2. A Hello message consists of:
(1) the sensor ID of the sending sensor,
(2) the cluster ID of the sending sensor,
(3) information.
(At the beginning, the cluster ID of each sensor is zero.)
3. Each sensor transmits the Hello message at random times:
if a sensor receives a Hello message from a neighboring sensor
before transmitting its Hello
(a) draw a sample r from the distribution λ ·WT (0)i · U(0, 1),
where 0 < λ < 0.5
(b) wait r time units and the processing delay for clock calibration
between pairs of sensors.
(c) transmit the replied Hello message.
else
wait r time units and then transmit the Hello message.
4. Establish and update the neighbor identification:
if a sensor receives a message of assigning a cluster ID at time step k
(a) join the corresponding cluster.
(b) draw a sample r′ from the distribution WT (k)i · U(0, 1).
(c) wait r′ time units and then send an updated Hello message
with the new cluster ID.
(d) stop the waiting timer. (Stop!)
else
count the number of neighboring sensors.
end
5. Decrease the random waiting time according to equation (1).
6. Clusterhead check:
if WTi = 0 and the neighboring sensors are not in another cluster
(a) broadcast itself to be a clusterhead.
(b) assign the neighboring sensors to cluster ID i. (Stop!)
elseif WTi = 0 and some of the neighboring sensors are
in other clusters
join any nearby cluster after τ seconds, where τ is greater
than any possible waiting time. (Stop!)
else
go to Step 3.
end
where the communication range is limited to a few hundred
meters, the distance must be estimated to sub-meter accuracy.
This can be accomplished using accurate clocks, but these may
be more expensive than desired in the network application.
The Distance Estimation via Asynchronous Clocks (DEVAC)
method [11] helps to alleviate the need for highly accurate
synchronous clocking.
1) The Modified DEVAC Method: Instead of transmitting
a pulse signal twice to adjust the clock skew in the DE-
VAC method, sensor A transmits a ranging sequence using
Ultra-Wideband (UWB) signaling to achieve clock calibration.
Suppose that sensors A and B are equipped with clocks
(oscillators) that are assumed to be asynchronous in both
frequency and phase. Denote tai and tbj as the time stamps
in sensors A and B, respectively; let tadel and tbdel be the
delay time in sensors A and B, respectively; tab is the signal
propagation time. The estimation of the Modified DEVAC
method proceeds as shown in Figure 1:
a. Sensor A transmits a Hello message, which is a ranging
sequence comprising K symbols and containing the
times ta0 and ta1 (the times indicated on its clock at the
start and the end of the transmission, respectively).
b. Sensor B receives the first symbol at time tb2 (which is
tab seconds after it is transmitted) and receives the last
symbol at time tb3.
c. Sensor B calibrates its clock to A’s using the differences
ta1 − ta0 (which is known from A’s message) and tb3 − tb2
(the arrival times).
d. Some time tdel later, sensor B transmits the time tadel =
z · tbdel that has elapsed since reception of A’s message
along with the time stamp tb4 (the time on B’s clock when
it transmits). These times are adjusted (if necessary)
using the scale factor z = t
a
1−ta0
tb3−tb2
.
e. Sensor A receives the replied hello message from sensor
B when its clock reads ta5 (the time indicated on its clock
at the start of the reception). The transmission time tab
can be calculated as
tab =
ta5 − ta1 − tadel
2
.
Fig. 1. The Modified DEVAC Method: Sensor A receives its reply at ta5 .
This is equal to ta1 +2tab + tadel, from which A can estimate tab and hence
the distance. In this variation, sensor B can calculate the difference between
its clock (tb3 − tb2) and A’s clock using the time stamped information in A’s
messages (ta1 − ta0 ).
2) Analysis of the Distance Estimation: This paper assumes
that only the line-of-sight (LOS) path exists. If multipath
interference exists, then more complex signaling schemes can
be used [20]. The accuracy of the distance measurement is
analyzed as a function of the accuracy of the clock by de-
riving an approximate distribution for the estimation based on
Figure 1. Quantitative expressions are provided to demonstrate
the operation of the Modified DEVAC method. The random
variable T represents the sensor estimate of the true t; thus
Tab is an estimate of the true time tab and T ai is the estimate
of the time tai as measured by the clock of sensor A. The
estimated transmission time is
Tab =
T a5 − T adel − T a1
2
. (2)
Since sensor B calibrates its clock to A’s using time differ-
ences,
T adel = Z · T bdel, (3)
where T bdel = T b4 − T b3 and
Z =
T a1 − T a0
T b3 − T b2
(4)
From (16), (17), and (18), the total energy consumption,
Etotal, for cluster formation and distance estimation in the
wireless sensor network is
Etotal = NT · ET +NR · ER +Npro · Epro, (19)
where Epro is consumed by the clock calibration or propaga-
tion time calculation.
Observe that the above analysis is suitable for any transmit-
ting range. However, overly small transmission ranges may
result in isolated clusters whereas overly large transmission
ranges may result in a single cluster. Therefore, in order to
optimize energy consumption and encourage linking between
clusters, it is sensible to consider the minimum transmission
power (or range R) which will result in a fully connected net-
work [18]. The performance of the total energy consumption
of the JDCRA with different selections of R is examined via
simulation.
IV. SIMULATIONS AND NUMERICAL RESULTS
A. Ranging using UWB Communications
This subsection demonstrates the performance of the various
distance measurement methods. Assume that the propagation
time is tab = 10−7s (i.e. the true distance is dab = 30 m) for
all distance measurement settings. Note that these settings may
represent a reasonable transmission range for many wireless
sensor applications as in the emerging ZigBee standard.
The first set of numerical results evaluates the critical timing
parameters tai and tbj in the modified DEVAC method to
determine the required level of timing resolution (i.e. the
standard deviation of the time measurement σ). Figure 2
(left) shows the typical performances of time and distance
measurement using (10) with the parameters detailed in the
caption and the clocks providing a resolution of 1 ns and 10
ns, respectively.
The second set of numerical results shows the distribution
of the best possible ranging accuracy using different UWB
signal formats with synchronous clocking. Based on the char-
acteristics of UWB signaling [19] and assuming that channel
transfer function is independent of frequency and dependent
upon distance between transmitter and receiver as the inverse
of the square of distance dab, equation (12) can be further
expressed by
σs ≥ c · dab4pi
√
3N0
2TobsG0(f3H − f3L)
, (20)
where Tobs is the observation time (Tobs = ta1 − ta0), N0 =
2.935×10−11 W/Hz, G0 = 7.413×10−14 W/Hz regulated by
FCC [19], and fH and fL are the highest and lowest frequency
of UWB frequency bands, respectively. Note that the ranging
accuracy in different UWB signal formats are related to the
difference in bandwidth and the center frequency. Figure 3
(right) depicts that the DS-UWB high band signal format has
the best ranging performance with time synchronization.
The third set of numerical results demonstrates the ranging
accuracy related to SNR, signal bandwidth, and clock cali-
bration using UWB communications. Figure 3 illustrates the
best possible ranging performance using the JDCRA approach
25 30 35
0
0.05
0.1
0.15
0.2
Timing resolution: 10 ns
25 30 35
0
0.5
1
1.5
Timing resolution: 1 ns
29.992 29.994 29.996 29.998 30 30.002 30.004 30.006 30.008
0
500
1000
1500
2000
2500
DS−UWB High Band
DS−UWB Low Band
MB−OFDM Band 3
MB−OFDM Band 1
MB−OFDM Band 2
Fig. 2. The distribution of distance measurement using the JDCRA Method
with a timing resolution of 10 ns (left top) and 1 ns (left bottom): tab =
10−7, tb4 = 0.3 + 2.92 µs, t
b
3 = 0.3 + 1.92 µs, t
b
2 = 0.3, t
a
1 = 0.25 +
1.83 µs, and ta0 = 0.25 (left); the distribution of the ranging accuracy using
different UWB signal formats with synchronous clocking (right).
with UWB communications. It suggests that based on the same
observation time the DS-UWB signaling has better ranging
accuracy than the MB-OFDM signaling.
29.7 29.8 29.9 30 30.1 30.2 30.3
0
2
4
6
8
10
12
14
Distance (m)
DS−UWB High Band
       (K = 200)
DS−UWB Low Band
        (K = 100)
MB−OFDM Band 2
        (K = 6)
MB−OFDM Band 3
        (K = 6)
MB−OFDM Band 1
         (K = 6)
Fig. 3. The performance of the ranging accuracy using different UWB signal
formats with a timing resolution of 0.1 ns, observation time Tobs = 1.83 µs,
and the parameters detailed in the caption of Figure 2.
B. Cluster Formation
The fourth set of experiments examines the variation of the
average number of clusterheads with respect to the ratio R/l.
With random waiting time parameters C = 100, α = 10, and
β = 0.9, Figure 4 depicts a typical run of the algorithm in a
random network of 100 sensors with R/l = 0.175. The result
shows that each cluster is a collection of sensors which are up
to 2 hops away from a clusterhead.
Figure 5 shows the relationship between the average number
of clusterheads and the R/l ratio with varying the number of
sensors. The average number of clusterheads in each case is the
sample mean of the results of 200 typical runs. Observe that
the average number of clusterheads decreases as the ratio R/l
increases (i.e. the transmission power increases). Since larger
transmission power allows larger radio coverage, a clusterhead
has more cluster members, which reduces the number of
clusters in the network.
The last set of experiments considers the total energy
consumption of the JDCRA. Assume that the communication
channel is error-free. Since each sensor does not need to
