An algorithm for computing an optimal general alignment of A and B is developed using
dynamic programming. Define S(i, j) to be the maximum score of general alignments ending at
positions I and j of A and B. Then S(m, n) is the score of an optimal general alignment of A and B.
To compute the matrix S efficiently, three additional matrices are introduced. Define H(i, j) to be
the maximum score of general alignments ending with a difference block at positions i and j of A
and B. Similarly, define D(i, j) for general alignments that end with a deletion gap and I(i, j) for
general alignments that end with an insertion gap. We have formulated the recurrences for
generalized global alignments, and developed efficient algorithm for computing them.
Consider a largest-scoring alignment P(i, j) ending with a difference block at positions i and j
of A and B. The score of the alignment is H(i, j). Note that either residue i of A or residue j of B is
part of the difference block. Assume that residue i is part of the difference block. Let P(i-1, j)
denote the entire portion of P(i, j) before residue i. If the difference block consists only of residue
i, then the alignment P(i-1, j) ends with a substitution or gap and its score has to be S(i-1, j). Thus,
the score of the alignment P(i, j) is equal to the score of the alignment P(i-1, j) minus the penalty
for the difference block, that is, H(i, j) = S(i-1, j) - d. If the difference block consists of residue i
and other residues, then the alignment P(i-1, j) also ends with a difference block and its score has
to be H(i-1, j). Thus, the score of the alignment P(i, j) is equal to the score of the alignment P(i-1,
j), that is, H(i, j) = H(i-1, j) because the penalty for the difference block is already included in
similarities are performed separately. We developed a linear-space, quadratic-time algorithm for
the piecewise linear gap penalties, and also gave a diagonalwise alignment algorithm to speed up
the computation.
Consider the three-pieces piecewise linear gap penalties. We penalize a gap open penalty for
opening a gap, but penalize each gap extension penalty based on its gap length. If the gap length
is at most 1L , we penalize each gap extension penalty 1. If the gap length is larger than 1L
and smaller than or equal to 2L , we penalize each gap extension penalty 2 . If the gap length is
larger than 2L , we penalize each gap extension penalty 3. Let  jiD , ,  jiD ,' and  jiD ,"
denote the minimum cost of any alignment between iaaa ...21 and jbbb ...21 ending with a
deletion;  jiI , ,  jiI ,' and  jiI ," denote the minimum cost of any alignment between
iaaa ...21 and jbbb ...21 ending with an insertion;  jiS , denote the minimum cost of any
alignment between iaaa ...21 and jbbb ...21 . We prove that tables D , 'D , "D , I , 'I , "I , and
S of the alignment using three-pieces piecewise linear gap penalties maintain a diagonalwise
monotonicity property. Hence the entries are non-decreasing along each diagonal of tables D ,
'D , "D , I , 'I , "I and S . This property allows us to employ the ‘greedy’method. For
diagonal k and cost c, let  ckD ,~ ,  ckD ,'~ ,  ckD ,"~  ckI ,~ ,  ckI ,'~ ,  ckI ,"~ , and  ckS ,~
be the largest raw i such that   cikiD , ,   cikiD ,' ,   cikiD ," ,   cikiI ,
  cikiI ,' ,   cikiI ," , and   cikiS , , respectively. With proper initialization, they
can be computed by the following recurrence relations:
    





1,1
~
1,1
~
max,
~
1
1


ckS
ckD
ckD
     





1,1
~
1,1'
~
max,'
~
2121
2


LckS
ckD
ckD
       





1,1
~
1,1"~
max,"
~
3232121
3


LLckS
ckD
ckD
    





1
1
,1
~
,1
~
max,
~


ckS
ckI
ckI
     





2121
2
,1
~
,1'
~
max,'
~


LckS
ckI
ckI
       





3232121
3
,1
~
,1"~
max,"
~


LLckS
ckI
ckI
[10] Huang, X. and Miller, W. “A time-efficient, linear-space local similarity algorithm.” Adv.
Appl. Math., 12, 337-357, 1991.
[11] Jareborg, N., Birney, E. and Durbin, R. “Comparative analysis of noncoding regions of 77
orthologous mouse and human gene pairs.” Genome Res., 9, 815-824, 1999.
[12] Ma, B., Tromp, J. and Li, M. “PatternHunter: faster and more sensitive homology search.” 
Bioinformatics, 18, 440-445.
[13] Myers, E.W. and Miller, W. “Optimal alignments in linear space.” Comput. Applic. Biosci.,
4, 11-17, 1988.
[14] Needleman, S.B. and Wunsch, C.D. “A general method applicable to the search for
similarities in the amino acid sequences of two proteins.” J. Mol. Biol., 48, 443-453, 1970.
[15] Pearson, W.R. “Comparison of methods for searching protein sequence databases.” Protein
Science, 4, 1145-1160, 1995.
[16] Pearson, W.R. and Lipman, D. “Improved tools for biological sequence comparison.” Proc.
Natl. Acad. Sci. USA, 85, 2444-2448, 1988.
[17] Sellers, P.H. “On the theory and computation of evolutionary distances.”SIAM J. Appl.
Math., 26, 787-793, 1974.
[18] Smit, A and Green, P.“http://ftp.genome.washington.edu/RM/RepeatMasker.html”, 1997.
[19] Smith, T.F. and Waterman, M.S. “Identification of common molecular subsequences.” J. Mol.
Biol., 147, 195-197, 1981.
[20] Thompson, J.D., Higgins, D.G. and Gibson, T.J. “CLUSTAL W: improving the sensitivity of
progressive multiple sequence alignment through sequence weighting, position-specific gap
penalties and weight matrix choice.” Nucleic Acids Res., 22, 4673-4680, 1994.
[21] Wagner R.A. and Fischer, M.J. “The string-to-string correction problem.” J. Assoc. Comput.
Mach., 21, 168-173, 1974.
[22] Waterman, M.S. and Eggert, M. “A new algorithm for best subsequence alignments with
application to tRNA-rRNA comparisons.” J. Mol. Biol., 197, 723-728, 1987.
[23] Waterman, M.S., Smith, T.F. and Beyer, W.A. “Some biological sequence metrics.” Adv.
Math., 20, 367-387, 1976.
[24] Schwartz, S., Zhang, Z., Frazer, K., Smit, A., Riemer, C., Bouck, J., Gibbs, R., Hardison, R.
and Miller, W. “PipMaker--A web server for aligning two genomic DNA sequences.
“Genome Res., 10, 577-586, 2000.
Self Evaluation:
The project has been carried out as scheduled. In this project, we have accomplished the
following:
1. The recurrences for computing an optimal alignment consisting of substitutions, gaps, and
difference blocks;
2. A dynamic programming algorithm for computing the recurrences;
3. A linear-space version of the algorithm;
4. A C program for implementing the algorithm;
5. New strategies for dealing with the end gaps and difference blocks;
6. Experimental tests on genomic sequences;
