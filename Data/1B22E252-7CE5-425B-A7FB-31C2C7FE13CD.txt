1一、中文摘要
本研究討論一個在有機器加工限制的平行機環境中，總完成時間最小化的問題。所謂
機器加工限制，是指工件僅能被特定的機器來加工，這是一個更廣泛的平行機問題。在實
際製造環境(例如：晶圓測試、食品加工廠等)中，會常遭遇到此類問題。然而，由於機器加
工限制問題較為複雜，僅有在少數的文獻中進行討論。
本研究討論工件可被部份機器來完成加工。而這些工件的處理時間是假設為整數且工
件沒有優先權。每部機器具有相同的加工速率且一次只能處理一個工件。本研究推導本問
題總完成時間的下界限，並應用這下界限來平衡機器間的工作負荷，進而發展啟發性演算
法。數值計算的結果顯示，本研究所提出的演算法是優於 LFJ 與 LPT 演算法。
關鍵詞：排程、總完成時間最小化、平行機、機器加工限制
ABSTRACT
We consider a makespan minimization scheduling problem on parallel machines with
machine eligibility restrictions. Under machine eligibility constraints, a job can be processed by
any machine of a specific subset of the machine set. Thus, the problem generalizes the classical
parallel machine problem in which a job can be processed by each machine of the machine set.
The problem often meets in the actual manufacturing environment (e.g. wafer testing, food
processing plant etc.). However, due to its complexity, there exists little research in the
scheduling literature.
The study considers that the jobs can be processed on parts of the machines. The job
processing times assume to be integer and job pre-emption is not allowed. Each machine has
identical processing speed and processes one job at a time. We derive the lower bounds on
makespan for the problem. Then we apply the lower bounds to balance the workload to develop
the heuristic. The results of computational experiment show that the proposed heuristic is
superior to the LFJ and LPT heuristics in the considered problem.
Keywords：Scheduling; Makespan minimization; Parallel machines; Machine eligibility
3間最小化的問題，但是可開始加工時間事先無法知道。他們除了運用先前的啟發式演算法
來討論外，並討論另一的分派方式，即是先以 LFM 法則決定加工的機器，再用 LFJ 法則，
來決定加工的工件。而 Brucker 等人(1997)回顧這機器加工限制問題的相關文獻。除了討
論平行機問題，也針對於流程型工廠(flowshop)、零工式工廠(job shop)、開放式工廠(open
shop)等其他的作業型態進行討論。
而討論有關巢狀機器加工限制(僅考慮平行機問題)的文獻如下。Pinedo (1995)證明在
工件處理時間為單位時間的情況以下，可以使用 LFJ 法則，來得到為最佳解。Hwang 等人
(2004)將服務業的不同等級的會員服務，視為一平行機加工限制的問題。他們以等級(grade)
較少來表示需要較多(高)的服務，所以等級較高的工件(會員)無法被等級較低的機器(服務)
來處理，此為巢狀機器加工限制的情況。他們依據問題的特性修改 LPT 啟發式演算法，
以等級較少(限制較多)的工件為優先，而相同等級的工件，再以 LPT 來安排順序，發展出
LG-LPT(Lowest Grade- LPT)啟發式演算法。並針對此啟發式演算法，進行最差情況
(worst-case)的分析。Gills 與 Mills(2006)討論的條件是處理單位時間的工件(處理時間是
一)。他們針對各種準則進行討論,包含總完成時間，平均流程時間(mean flow time)，延遲
工件數(the number of tardy jobs)以及最大遲誤時間。
四、問題描述與解析
這是一個非巢狀加工限制的平行機環境，探討總完成時間最小化的問題。系統中共有
三類機器，標記為 AM 、 BM 與 CM ，其數量分別有 Am 、 Bm 與 Cm 部。而工件可區分為數
類 (以符號下標字來表示可加工的機器 )，一是在單一機器加工完成的工件 (例如：
, ,A B CJ J J )；或是在兩部機器上可完成加工的工件(例如： , ,AB AC BCJ J J )；以及所有機器均
可加工的工件(例如： ABCJ )。而各類工件與可加工機器的關係如下表(其中有”*”符號者為
該機器可加工該工件)。
表 1 各類工件與可加工機器關係表
AM BM CM
AJ *
BJ *
CJ *
ABJ * *
ACJ * *
BCJ * *
ABCJ * * *
本研究將針對此問題，提出一總完成時間的下界限，並利用該下界限提出一啟發式演
算法來求解。最後，並以數值計算的方式與現有的方法(例如 LFJ 與 LPT 法則)相比較。
問題假設
進行本文的討論，是有下列各項的假設：
1. 所有工件數目與機器數目為固定。
2. 工件的處理時間(processing time)為整數，而且是預知且固定。
3. 所有工件一開始均可加工，即各工件的準備時間(ready time) 為零。
4. 每部機器每次只能加工一個工件，而工件只能被一部機器加工。
5. 不允許有工件有插件(preemption) 的情況發生。
5BM 。
(C)可被所有機器加工的工件( ABCJ )：其可分派的對象為任一個機器，是以 AC BCL L、 與
ABL 來作為分派機器的標準。若是 ABL 為三者中最大者，則應分派到 CM 上，如此
僅會增加 ACL 與 BCL 的結果，並不會增加到 ABL 。若是 ACL 或 BCL 為最大者，則分別
應分派到 BM 或 AM 上。
為及時調整相關的下界限值，以反映目前機器上所分派到的工作負載。對於分派的工
件 (即為(B)或(C)兩類)，在確定分派到某部機器後，所以將該工件重新歸類為與機器相同
的類別上，再重新計算各下界限值。例如：一工件 ( )i ACJ J 經判斷後，是確定分派到 CM
上，此時應將該工件 iJ 視為 CJ 的工件，而重新計算 CT (增加 iJ )、 ACT (減少 iJ )以及相關下
界限值。因為此演算法是採用 LB 來均衡工作負載，我們稱此為 BLB (Balancing Lower
Bounds)啟發式演算法
BLB演算法的步驟
步驟 0： 計算各類工件的總處理時間( , ,...,A B ABCT T T )、下界限值( , ,...,A B ABCL L L )以及
LB，令  , , ,i i AB AC BC ABCJ J J J J J  。
步驟 1： 選取中最大處理時間( ip )的工件以符號 iJ 來表示。
步驟 2： 若  , ,i AB AC BCJ J J J ， 假 設 1 2i K KJ J 且 1 3 2 3K K K KL L ， 2 2K K iT T p  與
1 1K K i
T T p  。(其中下標 1K A 或 B 或 C， 2K A 或 B 或 C，且 1 2K K )
步驟 2a： 若
2K
T LB ，則 2h K 並至步驟 2d。
步驟 2b： 若
2K
T LB 且
1K
T LB ，則 1h K 並至步驟 2d。
步驟 2c： 若
1 2K K
T T  ，則 2h K ；否則 1h K 。
步驟 2d： iJ 分派到 hM 上，令 h hT T 與 1 2 1 2K K K K iT T p  並重新計算各個下界限以
及 LB。
步驟 3： 若 i ABCJ J ，假設 1 2 1 3 2 3K K K K K KL L L  ， j j iT T p  其中 1 2 3, ,j K K K 。
步驟 3a： 若
1K
T LB ，則 1h K 並至步驟 3e。
步驟 3b： 若
2K
T LB ，則 2h K 並至步驟 3e。
步驟 3c： 若
3K
T LB ，則 3h K 並至步驟 3e。
步驟 3d： 令   1 2 3, ,h K K Kh h T Min T T T     。
步驟 3e： iJ 分派到 hM 上，令 h hT T 與 ABC ABC iT T p  並重新計算各個下界限以及
LB。
步驟 4： iJ   。若，則回到步驟 1，否則停止演算法。
五、數值計算結果
我們利用數值計算實驗的方式，對所提出的 BLB 演算法，與常見的演算法(LFJ、LPT)
進行計算上的討論。而在應用 LFJ 法則時，若遇到可加工機器數相同時，是以 LPT 為輔
助法則，再按照工件處理時間來決定次序；相同地，若在應用 LPT 法則時，若遇到工件
處理時間相同時，以 LFJ 為輔助法則，再按照可加工機器數相同來決定次序。本計算實驗
共分為兩部份，第一部分為每類機器均僅各有一部的情況，另一為每類機器各二部的情
況，來討論兩者間的差異。
首先針對 1A B Cm m m   與各類工件數目相同的情況，討論的參數為工件處理時間
( ip )與工件個數( in )。在處理時間上，我們探討兩種不同範圍的數據，一為(1,a )平均分布；
另一為較難的問題是( / 2,a a )的平均分布，其中 a = 50, 100, 500, 1000。而各類工件個數則
7表 3 所有各類工件數量呈比例的計算結果
與 MinC 相較的平均誤差 100 次例題中 BLBC 較佳的個數
ip Alg. BLB Alg. LFJ Alg. LPT 與 LFJC 比較 與 LPTC 比較
(1,50) 0.03% 0.24% 0.28% 66 (32)* 56 (33)
(1,100) 0.04% 0.22% 0.28% 68 (19) 65 (15)
(1,500) 0.02% 0.19% 0.33% 77 (6) 79 (4)
(1,1000) 0.04% 0.19% 0.25% 75 (0) 72 (0)
(25,50) 0.25% 0.41% 0.60% 56 (8) 54 (6)
(50,100) 0.27% 0.46% 0.69% 61 (1) 61 (3)
(250,500) 0.31% 0.43% 0.86% 53 (1) 62 (0)
(500,1000) 0.27% 0.43% 0.69% 60 (0) 58 (0)
*括號中為與 BLBC 相同的個數
以表 3 的結果來看，在(1,a )問題上，BLB 的結果是優於 LFJ 與 LPT 的結果，但 LFJ
與 LPT 的結果是較為接近的。當針對( / 2,a a )問題時，出現與表 2 相似的結論，拉近 BLB
與 LFJ 結果的差距，與 LPT 結果的差異增加。
接著，討論每類機器各有兩部機器的情況，即是 2A B Cm m m   。除了增加機器的
數量外，對於工件的數量也相同比例增加( ... 20A ABCn n   )，可使得計算結果值相近，
方便誤差值的比較，而其他的參數維持不變。而運用 BLB 演算法處理此部份的問題時，
需做下列修正：先以 BLB 演算法將工件分為三類，由於每一類工件中均有兩部機器可加
工，則我們再以有效率的雙平行機 TMO 演算法(Ho 與 Wong, 1995)，來平衡這雙平行機上
工作負載的問題。結果如表 4 所示。
表 4 每類均兩部機器的計算結果
與 MinC 相較的平均誤差 100 次例題中 BLBC 較佳的個數
ip Alg. BLB Alg. LFJ Alg. LPT 與 LFJC 比較 與 LPTC 比較
(1,50) 0.00% 0.53% 0.27% 91 (9)* 69 (30)
(1,100) 0.00% 0.49% 0.25% 99 (1) 91 (8)
(1,500) 0.00% 0.57% 0.34% 100 (0) 96 (2)
(1,1000) 0.00% 0.56% 0.33% 100 (0) 99 (1)
(25,50) 0.00% 1.06% 1.56% 96 (3) 100 (0)
(50,100) 0.00% 1.18% 1.55% 96 (3) 100 (0)
(250,500) 0.01% 1.12% 1.51% 96 (0) 100 (0)
(500,1000) 0.01% 1.09% 1.63% 97 (0) 100 (0)
*括號中為與 BLBC 相同的個數
以表 4 結果來看，無論是在(1,a )或( / 2,a a )問題，BLB 演算法顯著優於其他兩演算法。
所以，BLB 演算法先平衡各類機器間的工作負載，再以 TMO 演算法平衡各類中兩部機器
上的工作負載，是相當可行的作法。另外，在表 4 也發現，在(1,a )問題上，LPT 演算法是
優於 LFJ 演算法的；但在( / 2,a a )問題，則是 LFJ 演算法是優於 LPT 演算法的。此與第一
部分的結果是較為不同的。所以各類機器的數目也是本問題中另一相關的重要變數。
