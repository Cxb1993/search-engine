 行政院國家科學委員會補助專題研究計畫 ■ 成 果 報 告   □ 期中進度報告 
 
「逆向最佳化問題」之演算法的研究 
A Study on Some Inverse Optimization Problems 
 
 
計畫類別：■ 個別型計畫  □ 整合型計畫 
計畫編號：NSC－97－2221－E－007－053－MY3 
執行期間： 97 年  08 月 01 日至 100 年 07 月 31 日 
 
計畫主持人：王炳豐教授 
共同主持人： 
計畫參與人員：  
 
 
成果報告類型(依經費核定清單規定繳交)：□ 精簡報告  ■ 完整報告 
 
本成果報告包括以下應繳交之附件： 
□赴國外出差或研習心得報告一份 
□赴大陸地區出差或研習心得報告一份 
□出席國際學術會議心得報告及發表之論文各一份 
□國際合作研究計畫國外研究報告書一份 
 
 
處理方式：除產學合作研究計畫、提升產業技術及人才培育研究計畫、
列管計畫及下列情形者外，得立即公開查詢 
          □涉及專利或其他智慧財產權，□一年□二年後可公開查詢 
          
執行單位：國立清華大學資訊工程學系 
 
中   華   民   國   100 年   10 月    25 日 
 
 II
行政院國家科學委員會補助專題研究計畫成果報告 
「逆向最佳化問題」之演算法的研究  
A Study on Some Inverse Optimization Problems 
計畫編號：NSC－97－2221－E－007－053－MY3 
執行期限：97 年 08 月 01 日至 100 年 07 月 31 日 
主持人：王 炳 豐   國立清華大學資訊工程學系 
 
摘要 
 
 在「最佳化問題」  (optimization 
problem) 裡，我們假設所有給予的系統
參數 (system parameters) 都可以被精確
的提供且永久不變。然而，在現實環境
中，這些數值可能無法被精確的測量，
或者是這些數值會隨著時間而變動。為
了符合現實環境下的實際狀況，近年來
有一類新的研究主題越來越被重視，稱
為 「 逆 向 最 佳 化 問 題 」  (inverse 
optimization problem)。在逆向最佳化問
題裡，除了一組系統參數外，也會預先
指定一個 solution，問題的目標是用最
小的變動量去修改系統參數，使得指定
的  solution 成 為 最 佳 解  (optimal 
solution)。 
 有關「逆向最佳化問題」的探討，
因為實用價值極高，所以不論就理論研
究或實際應用而言，都具有相當的重要
性，也因此成為近年來新興的熱門研究
主題之一。這個研究計劃的主要目的，
就是去探討「逆向最佳化問題」，希望能
對這一方面的研究，作出貢獻。這是一
個為期三年的研究計劃，已進行完畢，
成果相當豐碩。在逆向最佳化問題中，
有一類非常重要的問題，稱作 inverse 
sorting problem。我們在這一類問題的研
究上獲得了許多非常好的研究成果。此
外，在計劃過程中，我們同時也在 
disjoint path problem 與 the continuous 
tree edge-partition problem 這兩個問題
上獲得了相當不錯的研究成果。 
關鍵詞：演算法設計與分析、最佳化問
題、逆向最佳化問題、逆向排序問題 
 
Abstract 
 
 While solving an optimization 
problem, we are given the parameters of 
a system, and we are interested in the 
finding of an optimal solution. Recently, 
there has been an increasing interest in 
the study of inverse optimization 
problems. In an inverse optimization 
problem, we are given the parameters of 
a system as well as a solution that is not 
optimal under the parameters, and the 
goal is to modify the parameters as little 
as possible so that the given solution 
becomes optimal. 
 The study of inverse optimization 
problems is both of theoretical interest 
and practical importance. Inverse 
optimization problems are the focus of 
this project.  
Keywords: algorithms, optimization, 
inverse optimization, inverse sorting
 2 
parameter 的數值無法被精確的測量，而
只能得到大概的估計範圍，但是我們卻
可以清楚知道 optimal solution (例如: 
在地質傳遞速率上的研究)。在這種情況 
下，我們可以透過 inverse optimization
來修正所評估的數值，得到一組比較準
確的 system parameters。另外，在現實
環境中，很多 system parameters 會隨著
時間而變動，使得原本的  optimal 
solution 不再 optimal。在這種情況下，
如果原先的 solution 不能被改變 (例如: 
醫院或圖書館的位置)，那麼我們便必須
面對 inverse optimization 這樣的問題。 
 有關 inverse optimization problems 
的探討，不論就理論研究或實際應用而
言，都具有相當的重要性。這個研究計
劃的主要目的，就是去探討「逆向最佳
化問題」，希望能對這一方面的研究，作
出貢獻。 
 
 
二、結果與討論 
 
 這是一個為期三年的研究計劃，已進
行完畢，成果相當豐碩。在逆向最佳化問
題中，有一類非常重要的問題，稱作
inverse sorting problem。這個問題在許多
不同的領域中有實際的應用，例如
operation research [13, 22, 28]，statistics [2, 
15, 27]，biomedical research [11, 16, 23, 31, 
34]及 image processing [26]。根據不同的應
用，許多種類的 cost function 也被定義及
討論, 例如 l1-norm [30]，l2-norm [4, 9]，
l∞-norm [21, 32, 33]，Hamming distance [35] 
及其它的 convex function [1]。目前我們已
在 inverse sorting problem 這一類問題的
研究上獲得了許多非常好的研究成果。此
外，在計劃過程中，我們同時也在 the ratio 
search problem 、 the continuous tree 
edge-partition problem 、 與  the 
vertex-disjoint path problems 這些問題上
獲得了相當不錯的研究成果，分述如下。 
 
A. Inverse sorting under the l∞-norm 
 
 Let A = (a1, a2, …, an) be a sequence 
of n real numbers. Each element ai, 1 ≤ i ≤ 
n, has a positive weight wi and two bounds 
−
ia  and 
+
ia  such that 
−
ia  ≤ ai ≤ 
+
ia . A 
sequence X = (x1, x2, …, xn) is a feasible 
solution of A if it satisfies 
 
 x1 ≤ x2 ≤ … ≤ xn, and 
 
−
ia  ≤ xi ≤ 
+
ia  for each i, 1 ≤ i ≤ n. 
 
A sequence A is feasible if it has a feasible 
solution; otherwise, it is infeasible.  
 Given the sequence A, the inverse 
sorting problem under the l∞-norm is to 
find a feasible solution X of A so as to 
minimize the cost function  
 
 C(A, X) = max1≤i≤n{wi × |xi – ai|}. 
 
When −ia  = – ∞ and 
+
ia  = ∞ for all i, 1 
≤ i ≤ n, the problem is unconstrained; 
otherwise it is constrained. 
 Ubhaya [32] had an O(n2)-time 
algorithm for the unconstrained inverse 
sorting problem under the l∞-norm. We 
have the following improved result. 
 
Theorem A1. The unconstrained inverse 
sorting problem under the l∞-norm can be 
solved in O(n log n) time. 
 
 In the unconstrained problem, the 
input sequence A is always feasible. 
However, this is not true when there are 
bound constraints. For the constrained 
 4 
 If the construction of GA is necessary, 
since O(|V| + |E|) = O(n2), Yang and 
Zhang's algorithm is optimal both in space 
and time. In this project, we give an 
improved algorithm. Our idea is to do the 
finding of a longest path from v0 to vn+1 
without the construction of GA. We obtain 
the following improved result, matching 
the lower bound in Theorem B1. 
 
Theorem B2. The inverse sorting problem 
under the Hamming distance can be 
solved in O(n log n) time. 
 
C. Inverse sorting with bound constraints 
under the max Hamming distance 
 
 Given a sequence A, the inverse 
sorting problem with bound constraints 
under the max Hamming distance is to 
find a feasible solution X of A so as to 
minimize the cost function 
 
 C(A, X) = max1≤i≤n{wi × h(ai, xi)}. 
 
 By using the dynamic programming 
technique, we obtain the following result. 
 
Theorem C1. The inverse sorting 
problem with bound constraints under the 
max Hamming distance can be solved in 
O(n) time and O(n) space. 
 
D. Ratio search and continuous tree 
edge-partition 
 
Let m be a positive integer and B be a 
(non-ordered) set of n non-negative real 
numbers. Let F: R → R be a 
non-increasing function and t be a real 
number. The ratio search problem is to 
find the largest real number z in {b/a | a ∈ 
[1, m], b ∈ B} such that F(z) ≥ t. A special 
case of the ratio search problem is called 
the rational search problem, in which B = 
[1, m]. This special case had been solved 
efficiently in O(tF×log m) time [14, 24, 
25], where tF is the time required to 
evaluate the function value F(z) for any 
real number z. The algorithms in [14, 24, 
25] utilize the integral property of B and 
thus can not be applied to our problem. 
We have the following result. 
 
Theorem D1. The ratio search problem 
can be solved in O(n + tF×(log n + log m)) 
time. 
 
 The problem of searching in sorted 
matrices and matrices with sorted columns 
has received considerable attention [6, 7, 
29]. Let (x1, x2, ..., xn) be an arbitrary 
sequence of B. Let Y be an n × m matrix in 
which yij = xi / j, where 1 ≤ i ≤ n and 1 ≤ j 
≤ m. A number z is feasible if F(z) ≥ t and 
is infeasible otherwise. Frederickson and 
Johnson [7] had an efficient approach for 
searching in sorted matrices, which 
requires O(nlog n + mlog (n/m) + tF×log n) 
time if m ≤ n, and O(nlog n + nlog (m/n) + 
tF×log m) time otherwise. 
 
 By extending our algorithm for the 
ratio search problem, we obtain the 
following result. 
 
Theorem D2. Let Y be any n × m matrix 
with non-increasing rows and 
non-decreasing columns. Suppose that Y 
satisfies both of the following two 
 6 
   
 (a) a tree T (b) an interior cut c 
 
 
(c) three node cuts at i 
Figure 3. Interior cuts and node cuts. 
 
 
Figure 4. A continuous 2-partition. 
 
np3)-time algorithms. Later, Halman and 
Tamir [10] proposed O(n2log (min{p, 
n}))-time algorithms. 
By applying our algorithm for the 
ratio search problem, we obtain the 
following improved results. 
 
Theorem D3. The max-min continuous 
tree edge-partition problem can be solved 
in O(n2) time. 
 
Theorem D4. The min-max continuous 
tree edge-partition problem can be solved 
in O(n2) time. 
 
 
i 
j k 
i
j k 
i 
j k 
i 
j k 
a node cut on ei a node cut on ej a node cut on ek 
i
c 
j k 
i
c 
j k 
 8 
< ε < 1, a solution with approximation 
ratio 1 + ε to the minmax k vertex-disjoint 
paths problem on a dag can be found in 
O((1/ε)k–1n2k logk–1 M) time and 
O((1/ε)k–1n2k–1 logk–1 M) space, where M is 
the length of the longest path in an 
optimal solution. 
 
 
三、計畫成果自評 
 
 這個三年計劃的成果相當豐碩。
Theorems A1, A2, A3, B1, and B2 的結果已
發表在 2009 Journal of Computer and 
System Sciences [20]， Theorem C1 的結果
目前正在整理撰寫論文中，Theorems D1, D2, 
D3, and D4 的 結 果 已 發 表 在  2010 
Discrete Applied Mathematics [19] ，
Theorems E1, E2, E3, and E4 的結果已發表
在 2010 Journal of Computer and System 
Sciences [36]。 
 
 
四、參考文獻 
 
[1] R. K. Ahuja and J. B. Orlin, "A fast 
scaling algorithm for minimizing 
separable convex functions subject to 
chain constraints," Operations 
Research, vol. 49, pp. 784-789, 2001. 
[2] R. E. Barlow, D. J. Bartholomew, D. 
J. Bremner, and H. D. Brunk, 
Statistical Inference under Order 
Restrictions, Wiley, New York, 
1972. 
[3] R. Becker, B. Simeone, and Y-I. 
Chiang, "A shifting algorithm for 
continuous tree partitioning," 
Theoretical Computer Science, vol. 
282, pp. 353-380, 2002. 
[4] M. J. Best and N. Chakravarti, 
"Active set algorithms for isotonic 
regression: a unifying framework," 
Mathematical Programming, vol. 47, 
pp. 425-439, 1990. 
[5] R. Fleischer, Q. Ge, J. Li, and H. Zhu, 
"Efficient algorithms for k-disjoint 
paths problems on DAGs," in 
Proceedings of the 3rd International 
Conference on Algorithmic Aspects 
in Information and Management, 
2007, pp. 134-143. 
[6] G. N. Frederickson and D. B. 
Johnson, "The complexity of 
selection and ranking in X + Y and 
matrices with sorted columns," 
Journal of Computer and System 
Sciences, vol. 24, no. 2, pp. 197-208, 
1982. 
[7] G. N. Frederickson and D. B. 
Johnson, "Generalized selection and 
ranking: sorted matrices," SIAM 
Journal on Computing, vol. 13, no. 1, 
pp. 14-30, 1984. 
[8] M. L. Fredman, "On computing the 
length of longest increasing sub- 
sequences," Discrete Mathematics, 
vol. 11, pp. 29-35, 1975. 
[9] A. J. Goldstein and J. B. Kruskal, 
"Least-squares fitting by monotonic 
functions having integer values," 
Journal of the American Statistical 
Association, vol. 71, pp. 370-373, 
1976. 
[10] N. Halman and A. Tamir, 
"Continuous bottleneck tree parti- 
tioning problems," Discrete Applied 
Mathematics, vol. 140, pp. 185-206, 
2004. 
[11] I. Hirsch, M. Dilleen, and G. 
 10
[26] A. Restrepo and A. C. Bovik, 
"Locally monotonic regression," 
IEEE Transactions on Signal 
Processing, vol. 41, pp. 2796-2810, 
1994. 
[27] T. Robertson, and F. T. Wright, 
"Algorithms in order restricted 
statistical inference and the Cauchy 
mean property value," Annals of 
Statistics, vol. 8, pp. 645-651, 1980. 
[28] R. Roundy, "A 98% effective 
lot-sizing rule for a multi-product 
multistage production/inventory 
system," Mathematics of Operations 
Research, vol. 11, pp. 699-727, 1986. 
[29] M. I. Shamos, "Geometry and 
statistics: problems at the interface," 
in Algorithms and Complexity: New 
Directions and Recent Results, J. F. 
Traub, ed., Academic Press, New 
York, pp. 251-280, 1976. 
[30] Q. Stout, "Optimal algorithms for 
unimodal regression," Computer 
Science and Statistics, vol. 32, 2000. 
[31] M. Stylianou and N. Flournoy, 
"Dose-finding using the biased coin 
up-and-down design and isotonic 
regression," Biometrics, vol. 58, pp. 
171-177, 2002. 
[32] V. A. Ubhaya, "Isotone optimization, 
I," Journal of Approximation Theory, 
vol. 12, pp. 146-159, 1974. 
[33] V. A. Ubhaya, "Isotone optimization, 
II," Journal of Approximation Theory, 
vol. 12, pp. 315-342, 1974. 
[34] K. Ulm, "Nonparametric analysis of 
dose-response relationships," Annals 
of the New York Academy of Sciences, 
vol. 895, pp. 223-231, 1999. 
[35] X. Yang and J. Zhang, "Inverse 
sorting problem by minimizing the 
total weighted number of changes 
and partial inverse sorting problems," 
Computational Optimization and 
Applications, vol. 36, pp. 55-66, 
2007. 
[36] C.-C. Yu, C.-H. Lin, and B.-F. Wang*, 
"Improved algorithms for finding 
length-bounded two vertex-disjoint 
paths in a planar graph and minmax k 
vertex-disjoint paths in a directed 
acyclic graph," Journal of Computer 
and System Sciences, vol. 76, no. 8, 
pp. 697-708, 2010. 
 
 
 
Efficient Indexes for the Positional Pattern
Matching Problem and Two Related Problems
over Small Alphabets?
Chih-Chiang Yu, Biing-Feng Wang, and Chung-Chin Kuo
Department of Computer Science, National Tsing Hua University
Hsinchu, Taiwan 30013, Republic of China
{littlejohn,bfwang,cckuo}@cs.nthu.edu.tw
Abstract. In this paper, we study the following three variants of the
classical text indexing problem over small alphabets: the positional pat-
tern matching problem, the position-restricted pattern matching prob-
lem, and the indexing version of the variable-length don’t care pattern
matching problem. Let n be the length of the text, p be the length of a
query pattern, and Σ be the alphabet. Assume that |Σ| = O(polylog(n)).
For the first and third problems, we present O(n)-word indexes with O(p)
query time. For the second problem, we show that each query can be an-
swered in O(n log n) space and O(p + occ) time, or in O(n) space and
O(p+ occ log n) time, where occ is the number of outputs. When the al-
phabet size is O(polylog(n)), the indexes presented in this paper improve
the results in [6,10,11,22].
1 Introduction
In this paper, we first consider a variant of the classical text indexing problem,
called the positional pattern matching problem, which is to construct an index
for a text T so that the first occurrence of a pattern P in T at or after a given
position s can be found efficiently. This problem was firstly considered by Keller
et al. [11] as an application of the range successor problem [6,11,14,22]. For the
positional pattern matching problem, Keller et al. [11] had an O(n logn)-word
index with O(p + log logn) query time; Crochemore et al. [6] had an O(n1+)-
word index with O(p) query time; and Yu et al. [22] had an O(n)-word index
with O(p + logn/ log logn) query time, where n is the length of the text, p is
the length of a query pattern, and  > 0 is an arbitrary small constant. For
real world applications, the alphabet size of a string to be indexed is usually
small so that there are many researches concerning string matching over small
alphabets [19,20]. For instance, nucleotide sequences are strings over an alphabet
of size 4 [19]; amino acid sequences are strings over an alphabet of size 20 [20]; and
the standard ASCII characters have values between 0 and 127 [20]. This inspires
us to study the positional pattern matching problem over small alphabets. In
? This research is supported by the National Science Council of the Republic of China
under grant NSC-98-2221-E-007-081.
Indexes for the Positional Pattern Matching Problem and Related Problems 3
that may contain variable-length don’t care symbols, the variable-length don’t
care pattern matching problem is to determine whether the pattern P occurs in T .
For this problem, efficient sequential and parallel algorithms had been proposed
in [2,12,17]. For the indexing version of this problem, Inenaga et al. [10] had an
index that supports each query in O(p) time, using O(n2) space; and Crochemore
et al.’s index in [6] can be used to answer each query in O(p) time, using O(n1+)
space. In this paper, we also consider the indexing version of the variable-length
don’t care pattern matching problem. For |Σ| = O(polylog(n)), we give an O(n)-
word index with O(p) query time. Table 3 summarizes the above results.
Table 3. Indexes for pattern matching with variable-length don’t care symbols.
Space Query time Remarks
[10] O(n2) O(p)
[6] O(n1+ε) O(p)
Ours O(n) O(p) |Σ| = O(polylog(n))
2 Preliminaries
Let X be a string over an alphabet Σ. The length of X is denoted by |X |. The
substring of X containing X [i], X [i + 1], . . . , X [j], where 1 ≤ i ≤ j ≤ |X |, is
denoted by X [i, j]. For 1 ≤ i ≤ |X |, the substring X [1, i] is called a prefix of X ,
whereas the substring X [i, |X |] is called a suffix of S. A string Y occurs in X at
position i if Y is equal to X [i, i+ |Y |−1]. If a string Y occurs in X at a position
i, we call i an occurrence of Y in X .
Let A be a sequence of numbers. The successor of a number x in A, denoted
by succ(A, x), is the smallest number in A whose value is greater than or equal
to x. Let succ−1(A, x) be the position of the successor of x in A.
The improvement of our indexes stems from (1) a simple classification of
patterns into types according to length, which in turn motivates the use of a
different strategy for each type, and (2) a novel application of rank and select
indexes [5, 16] on the suffix tree and the segment tree to facilitate the search.
Suffix trees, segment trees, and rank and select indexes are introduced as follows.
Let T be a text of length n over an alphabet Σ. The suffix tree [15] of T ,
denoted by ST , is a compact trie of all suffixes of T , where each edge is labeled by
a non-empty substring of T . For each node v in the suffix tree, the concatenation
of the edge labels along the path from the root to v is called the path label of v.
The path label of each leaf is exactly a suffix of T , and we label a leaf by i if
its path label is the suffix T [i, n]. For a pattern P , its locus µ(P ) is the node v,
nearest from the root, whose path label has the prefix P . Let Lv be the set of
leaf labels in the subtree of ST rooted at v. We have the following.
Lemma 1 ([15]). If µ(P ) exists, all occurrences of P in T are those in Lµ(P ).
The set Lv is not explicitly stored. Rather, an array L is used to store the
labels of the leaves of ST , from left to right, and each node v maintains only
Indexes for the Positional Pattern Matching Problem and Related Problems 5
 
 
2 5 6 8 10 13 A 
2 6 10 13 B 
Fig. 1. An illustration of bridges.
3.1.1 An Index for Short Patterns
Given a text T , we first construct a suffix tree ST of T . For ease of discussion,
we assume that ST is a binary tree. In case it is not true, since the out-degree
of each internal node is a constant, we simply transform ST into a binary tree.
Recall that the set of all occurrences of a given pattern P in T is Lµ(P ). For
each node v, define Av to be the sequence obtained by sorting the labels in Lv
increasingly. Then, given a PPM query (P, s), the desired answer for the query is
succ(Aµ(P ), s). The locus µ(P ) in ST can be determined in O(p) time. Therefore,
to complete our index for short patterns, it suffices to show how to compute
succ(Aµ(P ), s) in O(p) time using O(n) space. The main idea is based on the
bridging technique [18]. Let A and B be two increasing sequences. The bridges
from A to B are pointers from the elements of A to their respective successors in
B. An example is given in Fig 1. As will be seen later, in our application, bridges
are constructed only from a sequence to its subsequences. Assume that B is a
subsequence of A. Then, it is easy to see that for any given number s, succ(B, s)
can be obtained in O(1) time by using the bridge of succ(A, s). Consider the
example in Fig 1. Given that succ(A, 7) = 8, we can obtain succ(B, 7) = 10
immediately by following the bridge of the element 8.
Now, we are ready to describe our index for short patterns, which is obtained
by augmenting the suffix tree ST with additional data structures. Let r be the
root of ST . We define the depth of a vertex v in ST , denoted by d(v), to be
the number of edges on the path from the root r to v. For each node v with
d(v) < logn, bridges are constructed from Av to Au for each child u of v. As
mentioned, a PPM query (P, s) can be answered by determining the value of
succ(Aµ(P ), s). Let (v1 = r, v2, . . ., vg = µ(P )) be the path from the root r
of ST to µ(P ). At the root vertex v1 = r, since Lr = {1, 2, . . . , n}, we have
succ(Av1 , s) = s trivially. When going downwards from vi to vi+1, 1 ≤ i < g, we
compute succ(Avi+1 , s) in O(1) time by using the bridge of succ(Avi , s). In this
way, when we reach the node µ(P ), succ(Aµ(P ), s) is obtained. Thus, a PPM
query can be answered in O(p) time for a short pattern P .
A straightforward implementation of the above index requires O(n log n)
space, as we need to store the sequences Av and the bridges. In the following,
we show that the bridges can be maintained with smaller space. More specifi-
cally, we show that rank indexes can be used to serve the function of bridges.
Our scheme is motivated by the wavelet tree [8, 14] and thus has a similar fla-
vor. However, as will be discussed in Remark 1 in Section 3.1.2, our index is
essentially different from the wavelet tree.
Indexes for the Positional Pattern Matching Problem and Related Problems 7
Proof. Similar to the proof of Lemma 6, we create a bit-vector B of size |A|
to indicate whether each number in A belongs to A0 or A1. We preprocess B
for binary select queries. Then, for any position k in Aj , j ∈ {0, 1}, we have
Aj [k] = A[selectj(B, k)]. Therefore, the lemma holds. uunionsq
To identify Av[k] for some given node v and position k with d(v) ≤ logn, we
construct the structure of Lemma 7 for each node v of ST with 1 < d(v) ≤ logn
in a bottom-up fashion to facilitate the identification. It takes O(n logn) bits in
total. Then, by Lemma 7, we can determine the position of Av[k] in Ar in O(d(v))
time by backtracking from v to the root r. Since Ar[i] = i for i = 1, 2, . . . , n, the
value of Aµ(P )[k] can be found in O(d(v)) time.
In summary, given a PPM query (P, s), we first locate µ(P ) in ST . By
following the bridges the value k = succ−1(Aµ(P ), s) is also determined. Then,
tracing from µ(P ) back to the tree root r, we compute k′ as the position of
Aµ(P )[k] in Ar. Finally, we report k
′ as the answer. We have the following.
Theorem 1. We can construct an O(n)-word index for a string T over a finite
alphabet, so that a positional pattern matching query can be answered in O(p)
time for any short pattern P .
3.1.2 An Index for Long Patterns
In this section, we present an O(n)-word PPM index with O(p + logn) = O(p)
query time for a long pattern. Recall that in the suffix tree, we maintain an
array L and two indices bv, ev at each internal node v such that Lv is the set
of numbers in L[bv, ev]. Thus, given a PPM query (P, s), the desired answer is
succ(L[bµ(P ), eµ(P )], s). And therefore, our problem is to preprocess the array L,
so that succ(L[i, j], s) can be efficiently answered for any interval [i, j] and num-
ber s. Before presenting our index, we remark that this problem can be solved
in the desired time and space bounds by employing the range successor indexes
in [14,22]. However, our scheme has the advantage that it can be extended to ob-
tain more efficient indexes for the position-restricted pattern matching problem
over an alphabet of size O(polylog(n)), as will be discussed in Section 4.
We build an index for the finding of succ(L[i, j], s) as follows. First, construct
the segment tree GT of [1, n]. Consider a fixed internal node v in GT . Let [bv, ev]
be the interval represented by v, and define Av to be the sequence obtained by
sorting the elements in L[bv, ev]. Next, for each internal node v of GT , construct
the bridge structure of Lemma 6 from Av to Aleft(v) and Aright(v), where left(v)
and right(v) are, respectively, the left and right children of v. We also maintain
the structure of Lemma 7 so that the position in Av of an element in Aleft(v) or
Aright(v) can be found in O(1) time. Since GT is a binary tree and its height is
O(log n), the structures of Lemmas 6 and 7 take O(n log n) bits of space.
With the above constructed data structure, succ(L[i, j], s) is found as follows.
By traversing downwards from the root r, we find a set C of O(log n) nodes
which represent the O(log n) canonical pieces of the interval [i, j]. Then, we have
succ(L[i, j], s) = min{succ(L[bv, ev], s) | v ∈ C} = min{succ(Av, s) | v ∈ C}. Let
CT be the subtree of GT that is induced by the nodes in C and their ancestors.
Indexes for the Positional Pattern Matching Problem and Related Problems 9
usage is O(n log |Σ|) bits for a fixed level. In total, our index takes O(n log |Σ|×
log|Σ| n) = O(n log n) bits. The query process is similar to that of the index in
Section 3.1.1. In summary, we have the following.
Theorem 3. We can construct an O(n)-word index for a string T over an al-
phabet of size O(polylog(n)), so that a positional pattern matching query can be
answered in O(p) time for any pattern P .
4 The Position-Restricted Pattern Matching Problem
For ease of exposition, we only present indexes for T that report all occurrences
of P in T [s, n] in sorted order for any pattern P and position s given later. It is
easy to modify our solutions to report all occurrences of P in T in sorted order
within a given query interval [s, t].
The indexes are adapted from the index in Section 3. We classify patterns
into three types: short patterns, medium patterns, and long patterns. A pattern
P of length p is short if p ≤ log|Σ| n and is long if p > logn. If log|Σ| n < p ≤
logn, then P is a medium pattern. Using O(n logn) space, we first show how to
answer each query for each type of patterns in O(p+ occ) time. Next, the space
requirement is reduced to the desired bounds.
An Index for Short Patterns. Our index for short patterns is the same
as that in Section 3.2, except that we explicitly store Av for each node v in
ST with d(v) ≤ log|Σ| n. Given a PPM query (P, s), it is easy to see that
Aµ(P )(succ
−1(Aµ(P ), s), |Aµ(P )|) is the sorted occurrences of P in T [s, n]. There-
fore, the query time is O(p + occ) and the space usage is O(n log|Σ| n).
An Index for Medium Patterns. Similar to the index for short patterns,
we explicitly store Av for each node v in ST with log|Σ| n < d(v) ≤ logn,
so that all occurrences of P in T [s, n] can be easily reported in sorted order
once succ−1(Aµ(P ), s) has been determined. To save space, we do not construct
bridges for those nodes v with log|Σ| n < d(v) ≤ logn. Instead, for medium pat-
terns we employ two dominance queries to determine succ−1(Aµ(P ), s). Given
an array A, a dominance query asks to return the number of elements in A[1, i]
that are less than or equal to s, where both i and s are specified in the query
stage. We index the array L for dominance queries, so that we can obtain
succ−1(Aµ(P ), s) by determining the numbers of elements in L[1, bµ(P ) − 1] and
in L[1, eµ(P )], respectively, that are less than or equal to s. Since L consists
of integers in [1, n], we use the O(n)-word index in [3] to support each domi-
nance query in O(log n/ log logn) time. In summary, we answer the query of a
medium pattern as follows. First, locate the locus µ(P ). Then, invoke two dom-
inance queries to compute succ−1(Aµ(P ), s). Finally, output the subsequence
Aµ(P )(succ
−1(Aµ(P ), s), |Aµ(P )|). The total space is O(n log n) and the query
time is O(p+ logn/ log logn+ occ) = O(p+ occ).
An Index for Long Patterns. Our index for long patterns is the same as
that in Section 3.1.2, except that we explicitly store Av at each node v of the
Indexes for the Positional Pattern Matching Problem and Related Problems 11
5 Variable-Length Don’t Care Pattern Matching Problem
Let T be a text over an alphabet Σ and P = P1∗P2∗ . . . ∗Pm be a pattern
such that each Pi is a string over Σ. Pinter [17] had a linear-time algorithm for
determining whether P occurs in T . His algorithm is based upon the following
observation: if P1 does not occur in T , then neither does P ; otherwise, P occurs
in T if and only if P2∗ . . . ∗Pm occurs in T [k1 + |P1|, n], where k1 is the first
occurrence of P1 in T . Consider the example in Fig 3. The first occurrence of P1
is at position 3. Thus, our problem reduces to determining whether P2∗P3 occurs
in T [8, n]. Similarly, since the first occurrence of P2 in T [8, n] is at position 11, the
problem further reduces to determining whether P3 occurs in T [15, n]. Finally,
since P3 occurs in T [15, n], we conclude that P occurs in T .
 
 
T CACAATCAATCACAATCACACATGGCCTGCT 
P1 CAATC 
P2 CACA 
P3 GC 
Fig. 3. Finding a pattern P1∗P2∗P3 in a text T .
Inspired by Pinter’s work, we construct the O(n)-word PPM index in Theo-
rem 3 for T and then answer a query pattern P = P1∗P2∗ . . . ∗Pm as follows. Ini-
tially, set i = 1 and s = 1. Then, iterate as follows. First, find the first occurrence
k of Pi in T [s, n] by a PPM query. Next, if k does not exist, report that P does
not occur in T . Otherwise, do the following: if i = m, report that P occurs in T ;
and otherwise, increase i by one, set s = k+|Pi|, and then proceed to the next it-
eration. It is easy to see that the query time is O(|P1|+|P2|+. . .+|Pm|) = O(|P |).
We obtain the following.
Theorem 5. We can construct an O(n)-word index for a string T over an al-
phabet Σ of size O(polylog(n)), so that we can determine in O(p) time whether
a pattern P over Σ ∪ {∗} occurs in T .
6 Concluding Remarks
Ma¨kinen and Navarro [14] had an O(n)-word index with O(p+log n) query time
for the following problem: preprocess a text T , so that for any pattern P and
integer k, the kth occurrence of P in T can be found efficiently. Using the result
in [3], the query time can be improved to O(p + logn/ log logn). We remark
that when |Σ| = O(polylog(n)), using our data structure in Section 3.2, the
query time can be further improved to O(p). One direction for further study is
to investigate more pattern matching problems which can be solved efficiently
based on the idea in this paper.
References
1. Bentley, J.L.: Solutions to Klee’s rectangle problems. Department of Computer
Science, Carnegie Mellon University, Manuscript (1977)
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/24
國科會補助計畫
計畫名稱: 「逆向最佳化問題」之演算法的研究
計畫主持人: 王炳豐
計畫編號: 97-2221-E-007-053-MY3 學門領域: 計算機理論與演算法
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
