2“software and algorithm animation systems for data structures”
and “software and algorithm animation systems for debug-
ging.” The first class requires the users to create visualizations
by inserting specific program segments and function calls
directly into the source code in the animation systems. The
second class centers on data structure visualization and pro-
vides users with a rich environment to interact with data struc-
ture. Finally, the third class bridges the gap between debugger
systems and sophisticated algorithm animation systems. Our
system provides a visual debugging environment with full
support of the LEDA [18] library for geometric algorithm
development and thus belongs to the last class.
In Subsection III-A, we survey the 3D algorithm visualiza-
tion systems in this class. Most of these systems were built
using the C language and thus they should be installed before
executing. The state-of-the-art Java-based system JCAT [28]
was developed in 2001 when the modern JOGL (Java bindings
for OpenGL) techniques were not yet released. JCAT can run
as a Java applet inside a web page; however, its drawing
engine is built upon outmoded Java 3D libraries and does not
support smooth camera moving and zooming modes. Our work
focuses on 3D geometric algorithm visualization; therefore,
we do not go through other worthwhile topics such as data
structure visualization and model-view mapping as described
in jGRASP [15], JIVE [8] and Vizz3D [33] projects.
The proposed GeoBuilder system and the Geo3D-
DrawingBean thereof are portable software on the basis of the
Java language and the JOGL bindings. A practical application
of this system is to plug into the OpenCPS knowledge portal
as an implementation interface. Therefore, we introduce the
OpenCPS in Subsection III-B. Prior similar systems enabling
collaborative development are then compared in Subsection
III-C, followed by a description of the dynamic camera posi-
tioning feature in the last subsection.
A. Three Dimensional Algorithm Visualization Systems
Three-dimensional algorithm visualization systems can be
categorized into C/C++ and Java-based families. It is quite
natural that the systems using C/C++ were developed much
earlier, since the C language has a longer history. For exam-
ple, Polka-3D [40] and Zeus-3D [6] were first developed in
1993. Polka-3D seems to be the leader which suggested the
object-oriented animation methodology. This system provides
reusable classes to model animation effects, 3D objects, and
special viewers etc. Polka-3D is GL (industrial Graphics
Library) compliant, but was implemented only to run on
the Silicon Graphics IRIS (SGI) workstation. Zeus-3D is an
algorithm visualization system which does not purpose to
show intrinsically three-dimensional objects. This system uses
3D concepts and graphical display to enhance the quality
when presenting information of 3D objects contained in an
algorithm.
In 1995, GASP [42] implemented a library of primitive
animation functions. The input and output of this system are
transmitted by files. GASP only runs on the SGI workstation
with an exclusive UNIX operating system, which allows GASP
to set its user interface (UI) upon Inventor and Motif/Xt. In the
same year, Geomview [30] was released with a revolutionarily
useful viewer for visualizing objects in three and higher
dimensions. It reads geometric data from a simple formatted
file and displays the objects in a window. Users can translate,
rotate and scale the objects with mouse operations. However,
Geomview is still built on the C language and can only run
on a specific Unix platform.
Following the architecture of GASP, GASPII [38] was
released in 1998. This upgrade maintains several screens
when users run an algorithm. One is the instructor’s screen
while the other is the student’s. Design like this helps in
educational activities. GASPII runs in the same environment
as GASP. Next in 1999, DAViD [25] proposed the 3Dsheet
[23] framework to achieve 3D visualization capability. Using
a mouse driven drag-and-drop mechanism, it developed the
3D-snap environment to facilitate computer-assisted design.
GeoWin [5] was the state-of-the-art system released in
2002. This system can be easily interfaced with renowned
standard geometric software libraries including LEDA and
CGAL. For instance, it has access to a simple 3D viewer
based on the LEDA d3 window class. GeoWin owns input and
output scenes. Every editing operation of the input interactive
interface maps to an associated event. Whenever the input
scene is modified, the output scene is recomputed and redrawn
immediately.
Java-based algorithm visualizations systems are relatively
fewer compared to those written in C/C++, mainly due to
the fact that Java is a newer language invented only in 1995.
The 3D graphic interfaces of Java, such as Java 3D, were
developed much later in 1999. Therefore, we can only find
GAWAIN [14] and JCAT [28] released in 1998 and 2001
respectively. They both are visualization systems running as
Java applets. Each user can interact with the 3D views locally,
independent of the page, to animate geometric algorithms.
The JCAT system further allows the user to start and stop
the algorithm, advance the algorithm step by step, and adjust
the visualization speed. In this project, we developed the
GeoBuilder as a new generation of algorithm visualization and
debugging system for geometric computing. Benefiting from
modern JOGL technologies, this system is not only portable
in web-based environment, but also equipped with camera
manipulation capabilities.
B. OpenCPS Computational Problem Solving Environment
In previous work, we implemented a knowledge portal
for Computational Problem Solving [24], dubbed OpenCPS,
which is intended to combine geographically distributed efforts
in algorithmic research. Algorithmic researchers are invited
to share their information in the form of files, documents,
etc., and collaboratively design or implement new algorithms.
Knowledge in OpenCPS, consisting of various objects and
content types, is regarded as a map relating instances in
problem, solution, and implementation spaces. Problem space
objects consist of uniquely identifiable computational prob-
lems, solution space objects consist of algorithmic solutions,
and implementation space objects consist of actual code for
the solutions.
4TABLE I
PRIMITIVE VISUALIZATION OBJECTS CURRENTLY PROVIDED BY THE
GEOBUILDER SYSTEM.
Type Objects Header and Source Files
2D simple Circle GeoCircle.h, GeoCircle.c
objects Point GeoPoint.h, GeoPoint.c
Segment GeoLineSeg.h, GeoLineSeg.c
Node GeoNode.h, GeoNode.c
Edge GeoEdge.h, GeoEdge.c
2D composite Triangle GeoTriangle.h, GeoTriangle.c
objects Rectangle GeoRectangle.h, GeoRectangle.c
Polygon GeoPolygon.h, GeoPolygon.c
Undirected graph GeoUGraph.h, GeoUGraph.c
Directed graph GeoGraph.h, GeoGraph.c
List GeoList.h, GeoList.c
3D simple Point Geo3DPoint.h, Geo3DPoint.c
objects Segment Geo3DLineSeg.h, Geo3DlineSeg.c
3D composite Polygon Geo3DPolygon.h, Geo3Dpolygon.c
objects Polyhedron Geo3DPolyhedron.h,
Geo3DPolyhedron.c
List Geo3DList.h, Geo3DList.c
implement concurrent collaboration, since it is also suitable for
collaborative graphic editing and thus more useful to geometric
computing.
D. Camera Positioning in 3D Environments
Dynamic camera positioning has received increasing atten-
tion in the fields of computer vision [12] and virtual reality [4],
[45]. A typical paradigm of computer vision is to determine the
set of objects visible from a given viewing area and derive a
camera placement method for generating image-based models
[12]. Virtual reality technologies connect the image-based
models to render a cinematic style, and thus support virtual
3D simulation, training, and entertainment environments with
intelligent visualization interfaces [4], [45].
The GeoBuilder system implements the concept of camera
positioning for 3D geometric algorithm visualization. Camera
position is not a problem in 2D environments. This issue
becomes serious in 3D environments, however, because the
visualized geometric objects may overlap in front of the
camera view. Therefore, we need a decision rule to move the
camera to a proper position to focus on the objects in the next
step. In Section IV, we will present the positioning rule based
on an observation sphere. The camera will be moved along
the surface of this sphere, located on one of the candidate
positions, and then focused on the center of next object of
interest.
IV. SYSTEM ARCHITECTURE
During this project, we have created an algorithm visual-
ization system, dubbed GeoBuilder , which is an Integrated
Development Environment (IDE) that supports LEDA [18]
library for geometric algorithm development and visualization.
Using this system, users can edit, debug, and visualize geo-
metric algorithms written in C/C++. GeoBuilder provides a
widget to generate frame code with geometric object classes.
As Table I lists, the currently provided objects include points,
line segments, polygons, etc., and lists of these objects. The
Fig. 1. System Architecture of the GeoBuilder. The backend of the
GeoBuilder system connects to an Algorithm Server to request compiling
and debugging services. The states of replicated application processes can be
synchronized by the Collabench Server.
choice of this set of primitive visualization objects is based
on our experience of geometric algorithms, and the set can
always be extended and modified.
A. Architecture of GeoBuilder
Based on Java’s portability, GeoBuilder is platform inde-
pendent and can be launched in any web environment. Fig. 1
shows the system architecture of GeoBuilder. The backend of
the GeoBuilder system connects to an Algorithm Server using
TCP/IP sockets. During program development, source pro-
grams are submitted to this server. They are then compiled by
GNU’s gcc compiler and launched by the server’s activation
service. The visualization and execution components provide
coupled functions on the two sides for users to interact with the
running program; consequently, object-oriented visualization
classes allow users to manipulate geometric objects directly
via a point-and-click mechanism. Users can further input, save,
and restore these geometric objects. The GeoBuilder system
also supports a debugging mode, in which the submitted
programs are tracked by GNU’s gdb debugging tool. The
Java Wrapper of the Algorithm Server parses and returns the
debugging messages for the GeoBuilder IDE to update the
current states and watch the internal variables.
GeoDrawingBean and Geo3DDrawingBean are the drawing
beans that render geometric 2D and 3D objects respectively.
They implement the ActionListener interface as the main part
of the visualization component for listening to the execution
and debugging messages. These two drawing beans render
geometric objects and store them into the GeoModel and
Geo3DModel. As for connection to the Collabench server, we
developed subclasses inheriting all the above object functions
and enabling access to current objects for collaborative work.
In case users check the box to enable automatic camera
decision for 3D algorithm visualization, Geo3DDrawingBean
must forward 3D objects to CameraAnimation, which handles
the operation of automatic camera positioning. After finish-
ing the task, CameraAnimation transmits the output objects
6Fig. 2. GeoBuilder is embedded into the OpenCPS portal. (a) GeoBuilder as a content object in the implementation space; (b) Associated JNLP (Java
Network Launch Protocol) file; (c) Running a 2D Voronoi diagram program.
they would like to use. These files are within the GeoLEDA
library and are listed in Table I.
For users’ convenience, GeoBuilder provides a frame code
generator that asks for the required data types and then creates
program files with frame codes in default. Users can thus
easily use the GeoLEDA library, as long as they define the
input and output in creating a new algorithm. Fig. 3(a) is an
example of auto-generated codes to deal with circle objects in
the algorithm, TestGeometry. The input thereof is a circle and
the output is also a circle. The input variable name is inCircle
and the output variable name is outCircle. This program can
be implemented to find the smallest enclosing circle, as shown
in Figs. 3(b)(c)(d).
In the above example, three program files are generated
in the project: TestGeometry.c, TestGeometry GeoMain.c, and
TestGeometry.h. The first two files contain the main routine
and the user procedures respectively. The last file, TestGeome-
try.h, is the overall header file, in which other primitive header
files of geometric objects in the GeoLEDA library are also en-
capsulated. Notice that the sample program calls an API func-
tion, void IPCServiceSetup(char* hostname, int port id );
in front of the entry point of the main routine. This function
initializes a TCP/IP connection to the algorithm server. After
the connection is established, the program can thus receive
user commands, read input instances, and write the outputs
to the canvas panel of the GeoBuilder drawing beans. The
arguments of this function indicate the hostname (or IP ad-
dress) and the port number of the Algorithm Server. They are
pre-assigned in the JNLP file, as shown in Fig. 2(b).
V. CONCURRENT COLLABORATION
Coined as a shorthand notion of collaborative workbench,
Collabench provides a service for collaborative event broad-
casting and concurrent action. This service package [52] uses
an event-driven framework to maintain a consistent state
among replicated applications, facilitating the task of devel-
oping concurrently collaborative applications and is used to
equip the GeoBuilder system with collaboration capability.
A. Architecture of the Collabench Service Package
When the user creates objects, moves objects or modifies
object properties in an application, the application’s states will
change as a result. The Collabench service allows user applica-
tions to broadcast corresponding events to other collaborative
applications in the same session, so all the collaborators can
see the same changes.
The core idea of Collabench is an event translating mecha-
nism that maps “local events” (LocalEvents) to “collaborative
events” (CollabEvents) and vice versa. In the above mentioned
situation, relevant local events are fired reflecting the state
change made by users’ operation on a local object. Using the
Collabench service package, application developers wrap local
objects (LocalObjects) in collaborative objects (CollabObjects)
8Fig. 5. State-vector diagram illustrating Collabench service. (a) Collabench
Server creates an event queue at the first application’s request; (b) The
second application requests to join this collaboration session; (c) Collabench
Server broadcasts CollabEvent A; (d) The third application joins the same
session; (e) CollabEvent B and C are broadcast following the first-come-first-
served policy; (f) User applications direct their compiling/debugging requests
solely to the algorithm server – after the commands are conducted, the state
updating information are then broadcast through collaborative events, such as
CollabEvent D.
instance editing. Notably, the dynamically created geometric
objects at run time during the program execution will inherit
VisualObject and GLObject classes in the Java drawing beans.
We can therefore add/delete geometric objects or change
their properties in one client, and the relevant events will be
copied to and reproduced in other GeoBuilder clients in the
same collaboration session. The contents of the text editor,
the commands to the development environment, the outputs
generated step by step by the algorithm server, and the actions
of camera, regardless of manual or automatic occurrence 2,
are all synchronized among the replicated GeoBuilder clients.
Built upon this system architecture, GeoBuilder is inserted
in a collaborative integrated programming environment with
visualization support.
Fig. 5 shows the state-vector diagram that results when
we apply Collabench service to the GeoBuilder system. Figs.
5(a)(b)(c)(d) sequentially demonstrate the following scenarios:
the first GeoBuilder application requests an event queue, the
second application joins as a latecomer, CollabEvent A is
broadcast, and the third application joins the same session.
Figs. 5(e) and (f) show two significant design issues. In
Fig. 5(e), CollabEvent B and C are broadcast following the
first-come-first-served policy. When the Collabench Server
broadcasts the collaborative events, the semantics of these
events are ignored. If the events conflict in the order in
2The camera positioning mechanism is built inside the Java drawing beans
and runs in each individual client process. Different from manual movement,
automatic camera positioning only generates one CollabEvent as the enabling
signal. This design option reduces the queue length of CollabEventObjects in
the Collabench server.
which they come, the GeoBuilder application is responsible
for making a reasonable solution. For example, the second and
the third applications are moving and deleting the same object
in CollabEvents C and B respectively. If event B (deleting) is
first broadcast and conducted by all collaborative applications,
then event C (moving) must be ignored after it is transmitted
to the applications later.
Fig. 5(f) explains what the GeoBuilder application has to
do when making compiling/debugging control commands. All
the GeoBuilder clients launched in a collaboration session
do connect to the algorithm server. To prevent the clients
from reduplicating control commands to the algorithm server,
all the online IDE operations for compiling, debugging, etc.
are forked into controller interface events and service request
events. The former, showing the button press effect and waiting
for a response (if necessary), is wrapped as CollabEvents
and broadcast out; on the other hand, the latter must consist
of unbroadcast local events that are directed solely to the
algorithm server. As Fig. 5(f) shows, the service request
events update the application states after making requests,
receiving their response, and accordingly triggering output
actions. The state updating will subsequently be broadcast
through collaborative events, such as CollabEvent D, to other
GeoBuilder applications, thus reactivating the collaboration
synchronously.
C. Benefits from Concurrent Collaboration
GeoBuilder is a collaborative algorithm development tool
that supports geometric algorithm visualization in distributed
environments. We have embedded this system into our
OpenCPS knowledge portal and used it as an implementation
platform for teaching a graduate course, geometric computing
and algorithm visualization. Benefits from the collaboration
function are clearly observed in the classroom. The feature of
concurrent collaboration helps this system reach the highest
level of Naps et al.’s criteria of visualization, i.e., presenting,
as earlier stated in Section I. The following examples express
how the concurrent collaboration could be used.
In office hours, students can invite Teaching Assistants
(TAs) to join their collaboration session in order to discuss
the problems they have encountered. The conversation part
of this discussion may progress over the built-in chat room
service, other third-party messaging product, or the traditional
telephone line. Importantly, the TA can operate the GeoBuilder
system to help students in testing their geometric input in-
stances, verifying their source codes, and even debugging their
programs. The concurrent collaboration mechanism makes the
TA’s extracurricular instructions more efficient than those of
other remote desktop products because: (a) GeoBuilder allows
multiple users to join a session; (b) the TA can assign several
tasks to the group of students and supervise or co-edit with
them at the same time; (c) the strongly coupled teamwork
mode naturally encourages students to understand their part-
ners’ habits of working and thus fosters an atmosphere of tacit
agreement that is particularly helpful to collaborative learning
and mutual advancement [37]. After a period of practice, some
student groups have thrived in this collaborative development
environment.
10
Fig. 7. Snapshots captured while constructing the convex hull. This procedure is visualized with a camera unmoved in the manual mode; seven input points
from A to G sequentially locate farther away from the viewport. The five subfigures illustrate in order the triangles generated: (a) ΔCDE, (b) ΔBCD and
ΔBCE, (c) ΔABD and ΔABE, (d) ΔACD, and (e) ΔCDF . Notably, the 3D objects may overlap one another in front of the camera. Without moving
the camera dynamically to proper positions, we cannot observe all changes of algorithm states.
Fig. 8. Snapshots captured while constructing the convex hull with automatic camera positioning. The camera in this mode is automatically moved to
visualize the algorithm step by step. In comparison with Fig. 7, the corresponding subfigures from (a) to (e) show the runtime states more clearly in generating
hull triangles.
12
Fig. 9. GeoBuilder can also visualize line segment associated algorithms. Subfigures demonstrate the animation in detecting line segment intersections in a
3D environment.
A good algorithm visualization system must address var-
ious features meeting the users’ need, and its development
requires implementation of a variety of modules integrated
together. We have proposed a camera positioning module,
in addition to addressing the system portability issue and
collaboration capability, because animation effect is always
the kernel issue of an algorithm visualization system, and other
considerations such as platform independence and capabilities
to allow teamwork are also important. Although our camera
positioning rule is simple, it applies well to automatically
track 3D geometric objects as shown by two examples of 3D
algorithms, i.e., constructing convex hulls [3] and detecting
line segment intersections [31].
A. Engagement in a Collaborative Learning Environment
Felder in 1993 indicated that students have their own
learning styles. These styles can be categorized into eight
modes as shown in Table II. There are no correct but only
preferred learning styles; furthermore, students may prefer one
side of a dimension in some subjects and the opposite side
in other subjects [20]. Traditional coursework puts particular
stress on the dimensions of learning on the left side, i.e.,
students are taught to think about the concepts on the lectures
step by step. Felder’s learning style of information advises the
teachers to reach all the different learning dimensions in a
course. To accommodate all the learning styles, teachers can
assign hands-on exercises, review the course with a global
picture, and even use some visualization tools. The combina-
tion of GeoBuilder and the OpenCPS portal supports a large
set of these facilities. Students can develop their programs
for submission and visualize their execution. Presentations
following the knowledge management policy of the OpenCPS
build a global view of the problems and solutions. The overall
system is an effective supplementary tool that is promising for
academic research and in educational settings.
B. Discussion of the System Effectiveness
The effectiveness of an algorithm animation system has
been studied and analyzed in the field of computer science
education. Stasko et al. conducted an empirical study of a
priority queue algorithm animation and found that algorithm
TABLE II
FELDER’S LEARNING STYLE
Dimensions Definitions Dimensions
Reflective Think about it Do it Active
Intuitive Learn Concepts Learn Facts Sensing
Verbal Require Lecture Require Picture Visual
Sequential Step by Step Big Picture Global
animation was not necessarily a better way to teach an algo-
rithm [39]. Nevertheless, Lahtinen et al. indicated that all the
user groups, teaching materials and classroom instructions can
affect the effectiveness of an algorithm visualization system
[21], [22]. Developed for geometric algorithm visualization,
the GeoBuilder system is especially useful in debugging and
education since geometric objects are naturally suitable for
users to see the shapes rather than to see the numbers on a
printout. The 2-opt algorithm to solve the traveling salesman
problem and the quick-hull algorithm to find a convex hull are
examples for which we can clearly display the next operations
running in the algorithms, i.e., detecting a path intersection and
inserting a new edge respectively. The visualization interface
can not only help the users to verify their idea but also teach
the students to understand the pseudocodes of the algorithms.
The performance issues we have presented in this work
involve system portability, concurrent collaboration, and im-
provement of animation effect. The discussion with regard to
these issues has been given in the relevant sections. From
the viewpoint of system effectiveness, we conclude: (a) Using
the Java’s portability, we have demonstrated the integration
with our system and a knowledge portal. This integration
enhances the application of a visualization system. (b) The
concurrent collaboration function is now helpful for TAs to use
to guide and test the students. Some students also enjoy this
collaborative development environment. We intend to extend
this mechanism to a larger scale program development. (c) We
have proposed a method for positioning the camera properly
to visualize the geometric objects, but moving the camera
automatically may not always work in certain cases that the
changes to the scene occur on many different places. To
solve this problem, our system will support multiple views
of visualization in the future.
14
[39] J. Stasko, A. Badre, and C. Lewis. Do algorithm animations assist
learning?: an empirical study and analysis. In Proc. SIGCHI Conference
on Human Factors in Computing Systems, pages 61–66, 1993.
[40] J. T. Stasko and J. F. Wehrli. Three-dimensional computationvisualiza-
tion. In Proc. IEEE Symposium on Visual Languages, pages 100–107.
1993.
[41] C. Sun and D. Chen. Consistency maintenance in real-time collaborative
graphics editing systems. ACM Transactions on Computer–Human
Interaction, 9(1):1–41, 2002.
[42] A. Tal and D. Dobkin. Visualization of geometric algorithms. IEEE
Transactions on Visualization and Computer Graphics, 1(2):194–204,
1995.
[43] M.-H. Tsai, J.-D. Wei, J.-H. Huang, and D. T. Lee. A portable geometric
algorithm visualization system with dynamic camera positioning for
tracking 3D objects. In Proc. 22nd Annual Symposium on Computational
Geometry, pages 479–480, 2006.
[44] J. D. Wei, M. H. Tsai, G. C. Lee, J. H. Huang, and D. T. Lee.
GeoBuilder: A geometric algorithm visualization and debugging system
for 2d and 3d geometric computing. IEEE Transactions on Visualization
and Computer Graphics, 15(2):234–248, 2009.
[45] M. Zancanaro, O. Stock, and I. Alfaro. Using cinematic techniques in
a multimedia museum guide. In Proc. Museums and the Web 2003.
[46] Algorithmic Solutions Software GmbH LEDA. http://www.mpi-
sb.mpg.de/LEDA/.
[47] Java Web Start Technology. http://java.sun.com/products/javawebstart/.
[48] JOGL API Project. https://jogl.dev.java.net/.
[49] Manual of GeoLEDA Library. http://webcollab.iis.sinica.edu.tw/ Com-
ponents/GeoBuilder/ GeoLedaManual/index.html.
[50] Plone Foundation. http://plone.org/.
[51] ShareTone Project. http://webcollab.iis.sinica.edu.tw/SHARETONE,
http://www.sharetone.org/.
[52] WebCollab – Collabench’s Home. http://webcollab.iis.sinica.edu.tw
/Components/Collabench.
[53] Zope Corporation. http://www.zope.org/Documentation/.
被視為一種傳輸的工具，有效解決 Space與 Time方面的問題。當天沿續多媒體
醫療應用之主題展開一系列的議程，其中成功大學醫學院亦發表一篇文章 : « An 
Intelligent Web-based System for Mental Diorder Treatment by Using Biofeedback 
Analysis »，他們提出一項家用設備，稱為 Emotion Ring，可以監視精神疾病患
者的心智活動，並將資料傳輸到網際網路上，以便醫生及家屬可以及早關切其發
病狀況。很可惜的是，今天的討論大多是一些終端應用設計，而沒有更高規格如
談論標準製訂，或是問題分析及解決的案例。 
 
第二天早上進行一場 Keynote Speech談到 Computer Vision技術的演進，講題是
“Geographic Visualization of Movement Patterns”，演講者 Gerard Medinoi教授首先
舉了兩個 1996年應用 Computer Vision技術成功的案例，並且從當時的時空背景
來分析其成功的因素為何；接著從現今的環境來看 Computer Vision 的應用。
Gerard Medinoi教授分別舉了三個不同的應用領域：Surveillance、3D Sensing, 和 
Entertainment。在 Surveillance方面，主要是想利用 Computer來自動判讀或辨識
Video的內容，不再需要人力介入，由於洛杉磯的治安不太好，這方面的應用可
以用來幫助警方分析監視錄影機的光碟內容，將具有意義的影像部分擷取出來，
再交由警員偵辦，可節省人力觀看大部分無意義的片段；3D Sensing方面，提到
可用 3D技術來幫助顯示一些 2D做不到的事情，例如，幾何物體的視覺化，可
方便觀看各個不同的面像和相交的部份；Entertainment方面，提到現今最熱門的
遊戲主機Wii的影像感應和處理技術，使得玩電玩的方式有了很大的突破，玩家
可以透過身體的動作來控制遊戲的進行，不像以往只有手指在做運動而已。 
 
由此，第二天的議程內容，出現不少先進的概念，雖然尚未達到具體應用的階段，
但所談論的內容主題，卻相當精彩，例如  « Video Qualiy Issues for Computer 
Vision and Mobile Television »由 Carlos Regis主講，討論的是 Video Network在
Human Recognition 的發展現況，包含各種細部的技術和實際的應用。Video 
Network是目前興起的一個研究領域，其主要概念為將各種 Devices擁有的 Video 
Contents透過 Communication Channels連接起來，達到彼此交流的目的，如此，
便可以發展出大範圍的應用，例如，smart homes、environment and traffic 
monitoring、elderly care...等等，講題一開始從現今 wireless video network的發展
談起，並隨後介紹如何用來與 human detection、tracking和 recognition相結合，
提出幾種步驟來進行，例如，feature extraction、classification、indexing和 matching
等等，並評估各個方面的 performane為何。 
 
包括我們在內的數位教學主題安排在第三天進行，我們的題目是  « Concept Map 
Supported E-Learning Implemented on Knowledge Portal Systems »，在本論文中，
我們提出如何用「知識概念圖產生器」來整合「知識管理 (Knowledge 
無衍生研發成果推廣資料
專任助理 0 0 100%  
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
系統已掛載於中研院資訊所-資訊網際合作實驗室之「計算幾何問題解題環境」
(http://www.opencps.org)實際使用。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
