 2
具有即時效能/功率監控功能的高效率可程式化三維電腦繪圖晶片系統：軟硬體 
開發及整合-子計畫二：可程式化三維電腦繪圖晶片系統之三維(3D)應用程式介 
面(API)與流體模擬之應用(3/3) 
計畫編號: 96-2220-E-110-003- 
執行期間: 98 年8 月1 日至99 年7 月31 日 
主持人：李宗南 教授 國立中山大學資訊工程系 
 
摘  要  
近年來基於物理的流體模擬已成為計算機動畫領域中的一個研究熱點，且隨著多媒
體系統(multimedia)與虛擬實境(virtual reality)的快速發展，3D 繪圖硬體也已廣泛地運用
於各領域之中。然而目前雖有許多系統商品化，有時為了不同的著眼點，會有不同的硬
體設計策略。在本年度計劃中的工作內容主要是依據 OpenGL ES 2.X 為基礎並搭配
ARM926EJ 來對行動裝置本身做為基礎開發環境，來提供及實現出一個流體模擬，使得
儘管是具有較小處理能力及低功率的行動裝置亦能呈現有如 PC 般逼真的場景與特效。
為此目的，藉由一個專門為行動裝置量身訂製的硬體來對其加速在未來已是無可避免，
因此我們基於 OpenGL ES 2.x 之 Shader language 技術，且實現專屬之 OpenGL ES 3D 動
畫仿真器與並提供三類的 test-benches，來協助其他子計畫其相關軟硬體整合與開發，
以呈現有如同 PC 平臺上的特效與效能。 
 
0、前言 
 本計劃研究主要是先依據OpenGL ES 1.X 2.X 規格為基礎並搭配ARM926EJ來對
行動裝置本身來實做開發，並提供及實現一個海水的自然模擬現象。為達到此目的，我
們依據OpenGL ES 2.X 之Shader language 為基礎，與實現一3D動畫開發之OpenGL ES
仿真器(emulator)開發平台，並與其它硬體子計劃整合來提升硬體之處理速度，並透過
分別的軟硬體之最佳化以呈現出有如同PC 平臺上的特效與效能，最後藉由開發一個模
擬3D流體之演算法與提供一個圖形用戶應用介面(3D Perf. Monitor)來協助開發者模擬
特效的開發和一除錯與效能上之偵測。 
 
I、研發目的 
 4
2.1 OpenGL ES 仿真器開發平台 
近年來，由於電腦圖學的發展已趨於成熟，且隨著多媒體系統(multimedia)與虛擬
實境(virtual reality)的快速發展，3D 繪圖的軟硬體也廣泛運用在各種不同領域之中。此
外目前為了滿足人們需求，也常運用於嵌入式系統中（如資訊家電、行動電話與 PDA
等），因此如何方便且有效開發有關嵌入式系統之 3D 動畫應用程式，是一項極大的挑
戰。 
  
有鑑於此，我們提供一個基於PC上的仿真器，來實現嵌入式系統之OpenGL ES開發
環境，意即可視為一個嵌入式3D動畫應用程式發展平台，其中包含OpenGL ES 1.0與
OpenGL ES 2.0函式庫。此外藉由分析現有之仿真器得知，目前關於OpenGL ES仿真器
僅侷限在提供開發環境，並無考量不同平台的規格與效能差異。且在使用上常需要特殊
硬體來支援，因此在本作品中我們透過一個跨平台繪圖管線效能分析，以改善上述缺
點。並協助使用者可依不同嵌入式系統規格與在無需特殊硬體支援下，開發出一個符合
的3D動畫應用程式，以助節省開發時間和達到成本控制目標，有關作品功能比較如表
一所列。 
 
表一、不同仿真器功能與比較 
有無無無整個繪圖管線效能分析功能
有有無無模組化之OpenGL ES函式介面
佳普佳佳開發自由度
佳佳普普函式支援性
不需需需需特殊硬體需求
有無無無可跨平台之效能檢測引擎
Our 
Emulator
Render
Monkey
PowerVR
SGX 
OpenGL ES 
2.0 SDK
AMD 
OpenGL 
ES 2.0 
Emulator
 
 
 6
是有些模擬，它也是採用模擬水的運算方法，如火焰模擬。從這些類型模擬可發現水模
擬之重要性。其因是水為是可變的，可變成任何型態，而水的運動方程，乃是採用流體
力學方程式，其中 Navier-Stokes 方程在流體力學中可解釋所有流體變化，運算上，很
多模擬都是以它當作主要運算方程，若可以正確解讀它，即可以正確得到水中的速度
場，透過速度場後針對不同的模擬需求，再決定最後的結果。 
 
    在本計劃中，我們針對海水來做ㄧ自然模擬研究。相關文獻探討中，在海水的模擬
中，由於真實物理運算量過於龐大，使的海水模擬受到很大的限制，因此相當多的模擬
方法採取了一種高度場的方法，即透過觀察海水的波動特性所設計出來的一種方法，將
海水分割成一個 2D 的網格型態，接著代入特定的波方程式，即可得到網格點的高度變
化情形，此方法發展到現在已相當成熟，模擬速度也相當不錯。但它同時也存在著無法
模擬劇烈變化的波的缺點，因模擬海水的碎波情形中，高度場方法本身就無法達到較佳
之模擬成效，故在模擬海水碎波的相關研究中，大多是透過物理去解出 Navier-Stokes
方程，雖然透過此種方法可得到更為真實的模擬，但相對的速度也變的相當慢，往往需
花費數十秒方能模擬出一張圖片，在應用上有很大的限制。因此針對此問題，我們提出
一個新的海水模擬方法，目的是希望可以透過 CPU 與 GPU 的結合，協助我們加快運算。 
 
在此計畫中我們基於一個 slice 的模擬方法來呈現海水碎波自然模擬，以減少模擬
之運算量來達到較佳之模擬效能。透過 Navier-Stokes 方程，精確計算出海水之變化情
形，並結合 VOF(Volume of fluid) 和一重構自由液面的方法，快速建構出一連串之 2D
海水模擬結果。最後對此ㄧ序列之 2D 模擬結果，採用線性內插和噪音函數(noise 
function)，來大幅降低模擬時間並達到較佳之模擬效能，使其可應用在更多的用途上。 
 
 
 
 8
shader 與 Fragment shader)，並開始與 OpenGL ES 1.X 有了不同的發展路徑。其主要差
異在於 OpenGL ES 2.0 可用來增強一些如流體模擬效果、製作精細的水面特效和水波動
畫，不同於 OpenGL ES 1.X 如圖三(a)，其架構圖中之橘紅部份已改由 Fragment shader
與 Vertex shader 來作一替代如圖三(b)。其效果已由此兩者來分別作處理，主要為在
rasterization 之後，去除原本的 texture environment、color sum 與 fog operation 功能，改
以 fragment shader 取代，rasterization 之前的 transform 與 lighting 則改由 Vertex shader
來運作，如圖三所示。 
 
 
(a) (b) 
圖三、繪圖管線(rendering pipeline)：(a) OpenGL ES 1.X 與(b) OpenGL ES 2.X 
 
 以Vertex shader而言，在OpenGL ES 2.X中可透過Vertex shader來支援定點函數(fixed 
function)的點管線(vertex pipeline)運作與一個可被程式化的點管線(programmable vertex 
pipeline)架構，其中對於OpenGL ES 2.X本身，目前僅提供programmable vertex pipeline
架構。OpenGL ES 2.X允許一應用程式透過Vertex shader來描述這些頂點的運算和發生在
這些頂點上的一些相關資訊，此外OpenGL ES 2.X提供一介面來直接載入pre-compiled 
shader binaries資訊，或者透過載入原始的shader sources在OpenGL ES中再將其編譯
(compile)兩種。其中上述兩種方式可分別透過OES shader binary extension與OES shader 
source extension來描述APIs如何去載入pre-compiled shader binaries與APIs如何載入與
compile這些shader sources。此外，這些方法中皆至少需一個實現完成在OpenGL ES 2.X
中。 
 10
A null
vertex shader
 ll
t  
A null
fragment shader
 ll
f t 
Load the vertex/fragment shader source code t  t /f t   
Fragment shaderVertex shader
Parsing and translating 
GLSL ES to C compiler
i   t l ti  
  t   il
Vertex 
shader C file
t  
 fil
Fragment 
shader C file
t 
 fil
CPU hardware
vertex/fragment .c files replace the GM/RM
 
rt /fr t .  fil  l  t  /
API
vertex/uniforms
I
t / if
Frame 
buffer
 
ff
Pre-translated
C code
C-language compilerl  il
 
圖五、An Emulator for OpenGL ES 2.0 based on C-language Compiler 程序 
 
3.1.3 Gltrace 
Gltrace 是一用在 Windows 平台中，追蹤 OpenGL 應用程式中之 GL 函數使用情況
之工具，亦即可在程式執行時輸出所使用到之 OpenGL 函數。此工具對ㄧ應用程式開發
者有有助於在效能評估或錯誤偵測，圖六為 GLtrace 執行後所產生之一範例結果。由於
GLtrace 只針對 OpenGL 來設計，目前尚未提供一 OpenGL ES 版本。有藉於此，若我們
可提供 OpenGL ES 之函數使用情形，並實際運用於仿真器上，不僅可為嵌入式應用程
式開發者帶來便利，亦能協助開發者在效能及規格限制上做出適當調整。 
 
 
圖六、Gl function data from the GLtrace 
 
 12
並實現『OpenGL ES之GLtrace工具』，可在執行繪圖時切換至效能檢測介面來使用效能
檢測功能，其執行畫面如圖九所示。而執行繪圖時，成像視窗則會以副視窗方式呈現，
解析度依使用者的設定而有所不同，如圖十。 
 
 
圖八、模組化之 OpenGL ES 函式編輯介面 
 
 
圖九、仿真器之效能檢測介面 
 
 
圖十、成像副視窗 
 
 14
的正餘弦波動方程複雜，但更卻像水波。我們實現它以網格之模式如圖十一
(a)，並且加入打光及應用凹凸貼圖技術如圖十一(b)。 
 
(a) (b) 
圖十一、Gerstner 波與 Gerstner 波網格 
 
 物理意義的模擬方程式： 由於高度場無法模擬出碎波的情形，因此我們採用
其它的模擬方法，我們使用具有物理意義的模擬方程式，Navier-Stokes 方程
式，它被廣泛的應用在解流體力學的問題上，透過複雜運算來獲得正確的海
水速度然後帶入流體體積法(VOF)更新海面變化情形，透過這樣的方法來模擬
海水變化，但由於大量計算會耗費大量的資源和時間，為了加快速度，我們
採用 slice method 方法，slice method 是一種將 2D 的模擬擴展到 3D 的方法，
它首先收集所有的 2D 模擬結果，這些 2D 的模擬結果是可以由使用者去控制
的，然後再將這些結果合併成 3D 的模擬，由於 2D 的模擬結果是使用者可以
去控制的，因此在模擬上可以得到變化較大的波的變化情形，而且我們可以
透過減少 2D 的模擬結果，然後採取線性內插的方法，來獲得其他的 2D 模擬
結果，來達到減少運算量，加快模擬速度的目的，但由於採用線性內插結果
容易形成不真實的變化引此我們結合噪音函數來獲得局部的變化，達到更真
實的效果。 
 
在此計畫中，我們的海水模擬大致可分成『網格生成』、『波動模擬』、『粒子模擬』
 16
流場變化並非我們所關注的地方，因此為了得到逼真結果，自由液面模擬將格外重要。
在此，我們對自由液面做網格分類，用來區別出自由液面的位置，當網格充滿液體時，
稱之為滿網格(full cell)，而位於自由液面上方，即表示內部不含任何液體的網格，將之
稱為空網格(empty cell)。此外網格內部份含有液體的網格，至少有一相鄰的網格為空網
格者，則稱之表面網格(surface cell)，此網格即為自由液面所通過的網格。模擬過程中
需時時判別每一網格是否屬於上述網格，若是滿網格，則照內部流場的計算方式處理，
若空網格則不進行任何運算。此外若是表面網格，則需要而外算出網格內的平均密度
後，再依照內部流場方式進行運算。式子如下： 
( ) f121 ρρρρ −+=  
其中 1ρ  和 2ρ 分別為空氣和流體的密度， f 為網格內流體所佔的比例。藉由上述可以得
知自由液面的運算方法，但前提需判別出網格類型，因此我們採用流體體積法(VOF)的
方法來幫助我們辦別網格類型。VOF 將計算的網格點額外再定義一個變數，稱之為流
體體積比函數 f (x,z,t)，此變數的位置與壓力變數相同，皆位於網格中心點，其值介於
0 和 1 之間，0 表示為空網格，1 為滿網格，其餘介於 0、1 之間即為表面網格。由於自
由液面會隨著時間而移動，因此 f 值也要隨著自由液面產生變化，VOF 方法是透過定
義每一個單元的流體體積比來捕獲自由運動界面，即 0fuft =∇⋅+ ，意指 f 值隨著流體
而移動。VOF 法可以，因此我們可以透過 VOF 處理複雜自由液面的型態來幫助我們獲
得碎波模擬結果。 
 
    VOF 可以幫助我們更新網格內的狀態，之後我們必須要將這些網格狀態資訊轉換
成真實的頂點資訊，即為表面重構的方法，首先，假設有一海面其在網格內的情形如圖
十三所示。 
 18
    圖中網格內(1)(2)(3)為表面網格行走的次序編號， I 為當前表面網格在網格邊界中
的網格序號。而類型一的特徵為與當前網格前後相鄰的網格在同一條直線上，平行於 x
軸或 y 軸，這種類型稱為直線型；類型二的特徵為與當前網格前後相鄰的網格不在同一
條直線上，但流場的表面往外凸，稱為外凸型；類型三的特徵為與當前網格前後相鄰的
網格不在同一條直線上，但流場的表面往內凹，稱為內凹型；且每種類型根據走向的不
同又可分為四種情況。 
 
    為獲得正確的型點，定義 iQ 為邊界型點， iP 為緊鄰 iQ 位於流場旁的網格節點，作
為未來之參照點，引進型點位置變量如下： 
xQPt iii Δ= / ( iiQP 平行於 x 軸)或 yQPt iii Δ= / ( iiQP 平行於 y 軸) 
其中 xΔ 和 yΔ 分別為網格 x 方向和 y 方向的長度。記錄與每個型點 iQ 相關的資訊，包括
型點編號，邊界網格編號等於型點編號的表面網格類別，以及參照點 iP 的座標 ( )ii PP YX , 。 
 
    假設第 I 個表面網格上的流體體積分數為 if ，則可根據表面網格的類型，建立如表
二。所示的保持流體體積分數的方程式。求出 it 後，根據紀錄的型點 iQ ，最後可以計算
出型點的座標 ( )
ii QQ
YX , ，如表三。 
表二、表面網格類型 
第 I 個表面網格類型 保持流體體積分數的方程式 
類型一：直線型 
 
類型二：外凸型 
 
類型三：內凹型 
( ) iii ftt =+ +12
1  
iii ftt =+12
1  
( )( ) iii ftt =−−− +1112
11  
 
 
 20
格位於起始網格之上方，並根據其相鄰網格之下一相鄰網格分成兩種情況。我們根據不
同類型和不同情況做運算，以求得 1t ，運算方程式如表四。 
 
表四、不同類型與情況 
 Type 1 
(a) 
(b) 
(c) 
)/2ff(t 211 3 −=  
( ) 2122211 22 ffffft +±+=  
( ) 232322 212122211 +−−++−+= ffffffft  
 Type 2 
(a) 
 
(b) 
2
21
2
11
1 f
ffff
t
++=  
21111 22 fffft −±=  
 Type 3 
(a) 
 
(b) 
( )
2
2121
2
121
1 1
23
f
fffffff
t −
+−−+±−=  
( ) 21211 212 fffft −±−=  
 
表四可幫助我們計算求得 1t ，然後根據表二來計算其他 ( )Niti ,,3,2 L= ，透過這樣
的運算過程可以快速的建構出自由液面。為了驗證結果的正確性，我們定義了一波形如
圖十六的海浪，然後代入上述說明的重構方法，可以獲得如圖十七所示的結果，兩者對
照之下可以判斷結果是正確無誤的。  在擴展至 3D 自由液面方法，我們採取線性內插
的方法和噪音函數做結合來獲得新的 2D 結果，最後將這些 2D 結果合併成 3D 模擬來
幫助我們獲得正確的結果。 
 
 22
擬水濺和泡沫的效果，分別為『生成』、『更新位置』、『更新狀態』和『消逝』，詳細說
明如下。 
 
 生成：生成粒子時，當水波動過大會有水濺的現象發生，透過定義一門檻
值 T，若水面的曲度C 大於門檻值的話，則會生成粒子，反之會怎樣。曲
度越大生成粒子越多，且粒子屬性定為 Splash，其曲度的式子如下： 
C = 
f
f
∇
∇∇     where f  denotes the VOF function 
 更新位置：粒子的移動是根據它的速度和重力，我們可以得知它在位置 x
上所受到的力 F 藉由 ( ) ( )vVmgxF x −+= δ 。其中 g 為重力、m 為粒子質
量、 xV 為原本位置流場的速度、δ 是空氣的阻力和 v是粒子原本的速度。
根據這個式子可以得知新的位置和速度的公式，如下： 
( ) ( ) 2),( dt
m
txFvdttPdttP ++=+  
( ) ( ) dt
m
txFtvdttv ),(+=+  
而 粒 子 Foam 因 為 不 受 重 力 影 響 ， 所 以 粒 子 受 力 的 公 式 為
( ) ( )vVxF x −= δ 。其中δ 為水的阻力，然後代入上面所敘述的位置和速度
公式，即可更新新的 Foam 的位置和速度。 
 
 更新屬性：隨著粒子位置的變化，屬性也會跟著變動。一開始粒子剛生成
時是定義為 Splash，當 Splash 落到水面後，則粒子屬性變為 Foam 且速度
設為零，並且給它一個生命週期(lifetime)。 
 
 消逝：因為水濺和泡沫也是會有消逝的時候，因此我們定義了粒子系統，
粒子會因為曲度過大而生成，也會因為某些情形而消逝。當粒子滿足『粒
 24
三維仿真是通過結合不同的二維結果來呈現，如圖十九。在本計劃中，我們的演算
法之優點是可讓使用者選擇 2D 的結果來決定未來 3D 的變化。圖二十顯示不同片數的
FPS 測量值。這些切片均勻分布在 Z 軸網格大小的區間裡，網格大小為 100×100×50，
其大約有 148000 個三角形。圖二十一是不同片數之產生結果，左圖是五個切片，計算
時間大約為 6.31(frame/s)，右圖是二十個切片，計算時間大約為 2.3(frame/s)，其中右圖
比左的圖來的真實，且顯示了詳細的水面變化，但左圖可顯示主要變化並節省大量時
間，實驗結果顯示了更多的切片數目可顯示更多的細節，但也造成需要花費更多時間。
圖二十二顯示我們演算法中各個部分所佔的時間比例，數學計算時間大多都花在計算
NS 方程式裡與法向量上計算。 
 
 
 
圖十九、三維波形 
 
 26
 NS 方程式可以分成四個部分如表示，如。投影部分使用 PCG 方法來降低空間複雜
度和時間複雜度從 ( )2nO 到 ( )mO ，其中的 n 為網格大小，m 為 A 中的非零項數目，k 為
迭代次數。我們的演算法是和先前的切片法(Mihalef et al.[25])做比較，在(Mihalef et 
al.[25])中自由表面是利用 CLSVOF 來計算，他的結果比較真實但是計算時間是 VOF 的
兩倍。在我們的演算法中使用 VOF 去解決自由表面的問題，VOF 在追蹤液體中保持質
量守恆的能力是有名的，我們改進重建演算法 VOF，而且使用 Chaikin's 演算法使表面
變得更平滑。 
 
 表六是方法的比較，我們假設 NS 方程式和重建表面的時間複雜度為 ( )KO ，故我
們的方法和切片法的時間複雜度分別為 ( )KtO 和 ( )KhO ，其中 t為關鍵片的數量，而 h為
z 軸的長度 ( )ht ≤ 。假設三為空間的 z 軸長度為 50，即可得到擴展 3D 場景上切片法需
要 50 個切片，而我們的方法只需 2～6 個切片，因此計算時間比切片法要快。並藉由可
由使用者來決定切片數目，提供較大的彈性度。此外為了減少在計算線性差值時所造成
的失真，我們使用噪音函數來使表面更趨於自然。 
 
表五、NS 方程式各步驟之複雜度 
NSE Force Diffuse Advect Project 
Method Finite 
difference 
Finite 
difference 
Method of 
characteristics 
PCG 
Time complexity ( )nΟ  ( )nΟ  ( )nΟ  ( )mκΟ  
 
表六、時間複雜度比較 
Method The proposed method Slice method 
Time complexity ( )KtΟ  ( )KhΟ  
Computation time 5~9 frames/s 1 frame/s 
 
透過線性差值和噪音函數來提高水模擬的細節，如圖二十三所示。其中圖二十三(a)
 28
3.3 各軟硬體系統整合測試 
為了達到軟硬體整合測，我們依照運算複雜設計了三類 test-benches 來協助測試軟
硬硬體之效能，分別為『運算量簡單的立方體』、『運算量中等的變形球』及『運算量複
雜的海洋』。此外立方體根據計算量的不同又可分成四種，分別為『單純紅色著色的立
方體』、『燈光效果的立方體』、『貼圖效果的立方體』與『結合燈光與貼圖特效的立方體』，
分別說明如下： 
 運算量簡單的立方體： 
紅色著色的立方體是經由外部讀取點座標，經由 vertex shader 中計算其所在位
置並乘上使用者自訂的旋轉矩陣，最後並在 fragment shader 中給予其紅色的屬性，
如圖二十六(a)；燈光效果的立方體同樣是由外部讀取點座標及法向量，並經由
vertex shader 中計算其所在位置並乘上使用者自訂的旋轉矩陣，此外還利用使用者
傳入的光線參數，計算出其每個點所受到光線照射後應該有的顏色，並將其利用
varying 變數傳入 fragment shader 來與本身的紅色進行混合，其結果如圖二十六(b)；
貼圖效果的立方體則是從外部讀取點座標及貼圖坐標，同樣在 vertex shader 中計算
其位置，並將貼圖坐標利用 varying 變數將其傳入 fragment shader，而後在 fragment 
shader 中利用函式 texture2D 取得每個畫素的顏色，並與紅色合併，所得到的結果
如圖二十六(c)；最後則是總合上述各種方法，結果如圖二十六(d)。 
 
 
 
 
 
 30
shader)的測試，當在打光計算位於 fragment shader 中的 testbench，則是在 vertex shader
中計算 ambient、diffuse、光源方向(lightDir)及光源和視線的角平分線向量(halfVector)，
並加上 normal 的資訊與利用 varying 變數傳入 fragment shader，並在 fragment shader 中
計算 specular 光源，最後產生的效果如圖二十七(b)。 
 
 
(a) (b) 
圖二十七、 變形球 test-bench：(a) vertex shader 與(b) fragment shader 
 
 運算量複雜的海洋： 
第三個部分則為海洋，其包含海洋、飛機、太陽及天空場景四個部分。其中海
洋之作法是透過產生一個 50*50 的網格，利用 attribute 將網格傳入 vertex shader 中
並依據震幅及波長等參數，來調整網格高度。此外並計算每個點經調整後之法向量
並將之傳入 fragment shader 中。在 fragment shader 中會計算貼圖坐標以進行貼圖及
波浪的顏色。對於飛機則分成為飛機主體、噴射火焰及火焰場生的光暈三個部分，
火焰所在的位置由使用者根據飛機位置計算；光暈部分則利用混和效果將光暈、飛
機及火焰進行混合；太陽是藉由外部讀入點坐標，並調整其大小，最後混和貼圖材
質而成；天空場景則是利用一個大型的球，將所以物件包在裡面，並在球上進行貼
圖，其執行結果如圖二十八。 
 
 32
glCreateProgram 
glDeleteProgram 
glUseProgram 
Mask 
glColorMask 
glDepthMask 
glStencilMask 
Clear 
glClear 
glClearColor 
glClearDepthf 
glClearStencil 
Information 
glGetVertexAttrib 
glGetVertexAttribPointerv 
glGetProgramiv 
glGetTexParameter 
glGetShaderPrecisionFormat 
glGetProgramInfoLog 
glGetFramebufferAttachmentParameteriv 
glGetAttachedShaders 
glGetActiveUniform 
glGetUniform 
glGetUniformLocation 
glGetShaderiv 
glGetError 
glGetString 
glValidateProgram 
glEnable 
glDisable 
glViewport 
glDepthRangef 
glScissor 
glLineWidth 
glPixelStorei 
glReadPixels 
Buffer 
glBindRenderbuffer 
glDeleteRenderbuffers 
glGenRenderbuffers 
glRenderbufferStorage 
glCheckFramebufferStatus 
glFramebufferTexture2D 
glBindFramebuffer 
glDeleteFramebuffers 
glGenFramebuffers 
glBindBuffer 
glBufferData 
glBufferSubData 
glGenBuffers 
glDeleteBuffers 
Separate set 
glStencilFuncSeparate 
glStencilOpSeparate 
glBlendFuncSeparate 
glStencilMaskSeparate 
 
其中14個函式分類中目前完成10個，未完成部份因有些與硬題實作有其相關與關連性，
故需硬體支援才可完成，此外未完成之函數亦不會影響整個純軟體的繪圖管線，來造成
模擬上的困難。表八為每個函式分類的完成情況，符號Ｖ、△與Ｘ分別代表為該分類函
式完成、部分未完成與尚未完成。 
 
 
 
 
 34
表十 設定 data 函式 
Name Functionality 
glBindAttribLocation Specifies index location using what kind of values 
glVertexAttribPointer Links the data to the index location 
glEnableVertexAttribArray Enables the vertex arrays 
glDisableVertexAttribArray Disables the vertex arrays 
 
為確定上述(如表九與表十所列)所設計之函式功能完整可正確運作，測試結果如
下： 
 
Specification:  
glCreateShader — create a shader object 
C Specification: 
Gluint glCreateShader(GLenum shaderType) 
z shaderType 
 Specifies the type of shader to be created. Must be either  GL_VERTEX_SHADER or 
GL_FRAGMENT_SHADER. 
Test: 
 glCreateShader(fragment_shader) 
 glCreateShader(vertex_shader) 
 glCreateShader(5) 
Result: 
 
 36
Specification:  
glCreateProgram — create a program object 
C Specification: 
GLuint glCreateProgram(void) 
Test: 
 glCreateProgram() 
 glCreateProgram() 
Result: 
 
 
Specification:  
glDeleteProgram — delete a program object 
C Specification: 
void glDeleteProgram(GLuint program) 
z program 
 Specifies the program object to be deleted. 
Test: 
 glDeleteProgram(2) 
 glDeleteProgram(5) 
Result: 
 
 
 38
 
 
(尚未支援) 
Specification:  
glLinkProgram — link a program object 
C Specification: 
void glLinkProgram(GLuint program) 
z program 
 Specifies the handle of the program object to be linked. 
Test: 
Result: 
 40
Specification:  
glBindAttribLocation — associate a generic vertex attribute index with a named attribute 
variable 
C Specification: 
void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name) 
z program 
 Specifies the handle of the program object in which the association is  
 to be made. 
z index 
 Specifies the index of the generic vertex attribute to be bound. 
z name 
 Specifies a null terminated string containing the name of the vertex  shader 
attribute variable to which index is to be bound. 
Test: 
  glBindAttribLocation(2, 1, "rm_Vertex") 
  glBindAttribLocation(2, 8, "rm_Vertex")-index 超過 8,error 
Result: 
 
 
Specification:  
glGetAttribLocation — return the location of an attribute variable 
C Specification: 
GLint glGetAttribLocation(GLuint program, const GLchar *name) 
z program 
 Specifies the program object to be queried. 
z name 
 Points to a null terminated string containing the name of the attribute  variable 
whose location is to be queried. 
Test: 
  glGetAttribLocation(1,"rm_Vertex") 
  glGetAttribLocation(1,"rm_rm")-找不到 rm_rm,回傳-1 
Result: 
 42
IV、遭遇問題及解決方案 
4.1 OpenGL ES 2.0 函式 
    由於我們的 OpenGL ES 2.0 預計會同時支援軟體及硬體成像，兩者在根本上有著相
當大的差異。軟體成像會先透過 CPU 運算，之後將結果繪於 frame buffer 上。至於硬體
版本則透過硬體運算，然後將結果顯示至螢幕。在此，由於目前硬體與 shading language 
compiler 尚未實作完成。而市面上現有的 GPU 驅動程式不支援我們的函式庫，我們無
法為了讓其支援我們的函式庫而自行撰寫新的驅動程式，此舉不但沒有效率亦沒有泛用
性，故如何實現純軟體成像是ㄧ個須深思的問題。 
 
4.2 軟體實現的障礙 
在實作出OpenGL ES 1.0 Fixed Point 之後，接著問題將是如何去實現OpenGL ES 
2.0之架構，然而2.0版本與1.0在架構已有所差異，故如何運用OpenGL ES 1.0的概念來
實現OpenGL ES2.0亦是一大挑戰。在2.0版本中增加了一Shader language的功能，其所造
成影響會使的1.0的架構部份有所變動，如在rasterization之後的架構在2.0版本中，已去
除原本的texture environment、color sum與fog operation功能改以Vertex and Fragment 
shader取代，此外在rasterization之前的transform與lighting改由Vertex shader來運作。在
Hudson Entertainment總裁John Greiner表示：目前市面上已開始採用最佳的繪圖平台
OpenGL ES 2.0，而其最吸引人之處在於它是一個可程式化繪圖引擎，且它可對於製作
精細的水面特效與水波動畫帶來非常大的幫助，故這亦是OpenGL ES1.0與2.0之間的差
異所在。 
 
4.3 自然模擬中的運算與CPU和GPU結合上的障礙 
    自然模擬需求解Navier-Stokes方程，但此方程為一偏微分方程，需透過有限差分法
來幫助我們離散此方程式，若要達成此目標需要對流體力學有基礎的了解，且需將此些
數學公式代入至GPU中來協助運算，以往CPU在解此些式子時，需採用陣列來表示網格
 44
常發生的錯誤常因軟體函數所欲I傳遞的值或位址給硬體時，可能因驅動系統
上的缺失，使得配給的位址或空間不足等，或者是軟體系統不正確的呼叫，而
導致硬體在接收時得到錯誤的訊息或資料。 
 硬體系統：在硬體設計上，常發生的問題，除了是本身硬體在實作上的缺失以
外，其可能因軟體系統錯誤的傳遞訊息資料，或者是因驅動裝置不當地分配位
址與空間，進而導致該硬體發生錯誤。 
V、計畫成果自評 
開發過程中我們發現，如何在一個低效能且具硬體限制之嵌入式系統中，開發3D
應用程式，已是一個重要議題。目前嵌入式系統中有關3D動畫應用程式之OpenGL ES
開發平台常有兩個缺點。一、並無提供繪圖管線效能檢測；二、常因系統或特殊硬體需
求限制，造成開發困難與效能不彰。因此如何實現一個具有跨平台之繪圖管線效能檢測
且不需特殊硬體環境的OpenGL ES仿真器，來提供開發者可對3D應用程式之效能做出分
析，並依不同嵌入式系統的限制實現3D應用程式，亦是另ㄧ需考量的重點與價值。 
此外在嵌入式系統中，電源管理和功耗控制，始終也是一個重要的任務，ㄧ般而言
通常都會有各自不同的軟硬體策略，來輔助電源管理和功耗控制，常見的有低功耗模式
或動態頻率或電壓切換等。因此如何實現一個適當的電源管理計畫，也是一個重要價
值。故在本節中我們將針對『計畫目標與目前成果』、『主要發現或相關價值』與『學術
研究成果』三項分別做ㄧ敘述。 
5.1 計畫目標與目前成果 
目前我們根據原計劃內容，對於OpenGL ES 2.0部份，我們完成實現OpenGL ES 2.0
資料收集、系統架構評估與函式撰寫。至於動態特效模擬方面，目前已實做海水模擬函
數撰寫與實驗測試結果。茲第三年原計畫書所需實現項目及各季工作項目與目前結果如
表十一所列。 
 46
特殊硬體需求』、『函式支援性多寡』、『OpenGL ES 之 GLtrace 工具』、『開發自由度是否
足夠』與『模組化之 OpenGL ES 函式使用介面』。經此，我們希望能夠保持其優點之下，
實現一較理想之仿真器，讓使用者能因應各種不同規格的嵌入式平台，來達到建構出適
合的 3D 動畫應用程式之目標。 
 
 整個繪圖管線效能分析功能：現有的相關仿真器中，只有 RenderMonkey 具效
能檢測的功能，其效能檢測部份僅提供每個 frame 的點數、三角形數以及 FPS
資訊，其中點數和三角形個數是固定的，對開發嵌入式系統之 3D 應用程式並
無太大幫助。為此，我們將結合 GPTT 功能以檢測整個繪圖管線的效能，讓使
用者在開發時能真正因應其檢測結果對應用程式做出修改。 
 可跨平台之效能檢測引擎：OpenGL ES 本身具有一個共同標準，能夠於不同
的平台實現相同的功能。而 GPTT 效能檢測功能為利用其 extension function 方
式所實現的，故若是不同的硬體廠商願意於驅動中加入這些 extension function
功能，便可以於不同的平台上使用這個效能檢測功能。我們藉由結合 GPTT 於
仿真器中，實際運用此效能檢測引擎作為開發協助工具。 
 特殊硬體需求：由於 OpenGL ES 2.0 支援 shader language 功能，所以在執行時
需要有特殊硬體環境，用以實際成像，如限定使用支援 OpenGL 2.0 的 GPU。
而這個仿真器在 OpenGL ES 2.0 的部份使用『An Emulator for OpenGL ES 2.0 
based on C-language Compiler』的基礎，所以可以 CPU 模擬實際效果，不需要
特殊硬體環境即可成像。 
 函式支援性：現有的仿真器在 OpenGL ES 的函式支援性上，多僅針對 1.0 部
份或是 2.0 部份作開發。此仿真器會整合 1.0 與 2.0 開發功能，並可依照使用
者需求，自行決定運用的函式庫(OpenGL ES 1.0/2.0)。 
 OpenGL ES 之 GLtrace 工具：GLtrace 是一個能提供擷取 OpenGL 相關函式呼
 48
動不同事件，其中不同事件常具不同複雜度圖二十九。藉此，我們依據事件導向為基準，
當場景產生變化時，依據事先的場景分析我們可預測並找到對應之電源模組。圖三十表
示不同事件與相對應之電源模組關係，基於不同之故事或劇本，如風車、兵工廠、商店
或市中心，我們可找到一條專屬路徑來對不同故事或劇本作一描述。因此透過場景分析
與GPTT的協助，可針對電源消耗或電源管理的問題上作一分析，並可提供低電源設計
者在設計上一適當的協助。 
 
Game Engine Lay er
Game P layer Layer
Game/Benchmark
Combat System
NPC System/ AI Trading System
Story/Script System
3D Scene Graph
Collision
Virtua l Agent/ Ava tar
3D/2D Sprite
Rendering Physics
Sound Animation Character
 
圖二十九 遊戲應用系統架構 
 
Events /Script Workload/Complexity Level Power Modules
Windmill
Register/
Game over
…
Level 2
Level 3
Level 1
…
Module 2
Module 3
Module 1
…
Downtown
(indoor)
Level n Module n
Hierarchical-based 
game analysis
GPTT analysis, frame workload prediction of  PID and frame structure 
Factory
Shop/
Trading
Level n-1 Module n-1
 
圖三十 不同的事件與相對於的電源模組 
 
 50
參考文獻 
[1]. A. Fournier and W. T. Reeves, “A simple model of ocean waves,” Proc. of the ACM 
SIGGRAPH ‘86, pages 75-84, 1986 
[2]. C. Johanson, “Real-time water rendering,” 2004 
[3]. D. Enright, S. Marschner, and R. Fedkiw, “ Animation and Rendering of Complex 
Water Surfaces,” Proc. of the ACM Transactions on Graphics, Vol. 21, Issue 3, pages 
736–744, 2002. 
[4]. D. Kim、O. Y. Song and H.S. Ko, “A Semi-Lagrangian CIP Fluid Solver without 
Dimensional Splitting,” EUROGRAPHICS 2008, Volume 27, Number 2, 2008 
[5]. D. Nguyen, D. Enright and Ron Fedkiw, “Simulation and Animation of Fire and Other 
Natural Phenomena in the Visual Effects Industry,” Western States Section, Combustion 
Institute, Fall Meeting, UCLA, 2003. 
[6]. D. R. Peachey, “Modeling waves and surf.,” In SIGGRAPH ’86: Proceedings of the 
13th annual conference on Computer graphics and interactive techniques, pages 65–74,  
1986.  
[7]. G. Irving, E. Guendelman, F. Losasso, and R. Fedkiw, “Efficient Simulation of Large 
Bodies of Water by Coupling Two and Three Dimensional Techniques,” Proc. of the 
ACM Transactions on Graphics, Vol. 25, 2006. 
[8]. J. Stam, “Stable Fluids,” Proc. of ACM SIGGRAPH ‘99,  pages 121–128, 1999. 
[9]. J. Tessendorf, “Simulating Ocean Water,” Proc. of ACM SIGGRAPH 2004 Course 
Notes 31, 2004. 
[10]. L.S. Jensen and R. Golias, “Deep-Water Animation and Rendering,” In Gamasutra , 
2001. 
[11]. M. Kass and G. Miller. Rapid, “Stable Fluid Dynamics for Computer Graphics,” Proc. 
of the ACM Transactions on Graphics, Vol. 24, Issue 4, pages49–55, 1990. 
[12]. N. Foster and D. Metaxas, “Realistic Animation of Liquids,” Graphical Models and 
 52
175–194, 1996 
[24]. T. Takahashi, H. Fujii, A. Kunimatsu, K. Hiwada, T. Saito, K. Tanaka, and H. Ueki, ” 
Realistic animation of fluid with splash and foam,” Computer Graphics Forum, Vol. 22, 
Issue 3, 2003. 
[25]. V. Mihalef, D. Metaxas, and M. Sussman, “Animation and Control of Breaking Waves,” 
Proc. of the ACM SIGGRAPH/ Eurographics Symposium on Computer Animation, 
pages 315–324, 2004. 
[26]. http://w3.oc.ntu.edu.tw/chap7/chap7.htm 
 
shape of a breaking wave at a desired moment by the library 
evolution of breaking waves. Irving et al. [4] proposed an 
approach which optimizes the fluid simulations with tall and thin 
cells, and also reduces the computational complexity for large 
fluid volumes. Thürey et al. [12] presented a new method for 
enhancing shallow water simulations by the effect of overturning 
waves that make it possible to simulate scenes in real-time. 
The wave simulation including the splashes and foam has an 
important role in the visual representation of the breaking waves. 
The particle system often specifies the splashes and foam 
movement in 3D environment. Takahashi et al. [19] proposed the 
control of the generation, vanishing and transition rule of splashes 
and foam. Based on the particle model Thürey et al. [11] 
presented a shallow water to achieve real-time by using a 
smoothed particle hydrodynamics simulation. Wang et al. [13] 
used moving particle semi-implicit (MPS) method, and using 
fractional Brownian motion (fBm) 2D simulation to expand into 
3D representation by giving motion variation.  
Due to simulating the effect of breaking waves needs a large 
amount of calculation and spends considerable time. Therefore, 
this paper proposes a slice-based method to speed up the 
simulation of breaking wave by using a new reconstructing 
algorithm keeps the simulation of volume fraction of fluid in VOF 
in 2D. Then it is expanded to 3D representation by combining 
linear interpolation with noise function. The proposed algorithm 
is effective in reducing the computation time. 
3. THE PROPOSED METHOD 
We proposed a slice-based method to get 2D simulation results 
first and then combined them using a linear interpolation with 
noise function to generate the new 2D simulation slices from 
previous two 2D simulations. Because the linear interpolation will 
cause unnatural result, the noise function is used to make the 
motion and behavior look more natural. For the 2D simulation we 
use NSE as the physical equation and solve free surface via VOF. 
In addition, about the reconstruction of volume fraction in VOF 
[15] one can improve by a moving interface reconstructing 
algorithm, and use the project grid method in reducing 
unnecessary computation in implementing the level of detail 
(LOD). 
The system architecture for the proposed ocean simulation is 
given in Figure 1. It consists four parts including the grid 
generation, wave simulation, particle simulation, and render 
respectively. And the flowchart is given in Figure 2.  
Grid 
Generation
Ocean Wave
Wave
Simulation
Staggered
Grid
Particle
System
Render
NSE
Splash
Lighting
Bump
Mapping
2D
VOF
Expansion
to 3D
Reconstruction
of iso-surface
 
Figure 1：System architecture 
 
Figure 2：The flowchart of the proposed method 
3.1 Grid generation 
We use finite difference schemes that can be described as non-
staggered or on staggered grids. In the same positions all the 
scalar variables for the non-staggered grid are stored, and the 
staggered grid the scalar variables (e.g. pressure and density) are 
stored in the cell centers of the control volumes, whereas the 
velocity or momentum variables are located at the cell faces. 
Using a staggered grid is a feasible way to avoid odd-even 
decoupling between the velocity and pressure. Odd-even 
decoupling is a discretization error that can occur on collocated 
grids and can lead to checkerboard patterns in the solutions. 
3.2 Wave simulation 
The main part we concern for the ocean simulation is the variation 
of water wave. We can use 2D NSE to calculate the fluid varying, 
and solve the problem of free surface using VOF. However, by 
combining the linear interpolation with noise function one can 
generate the new 2D simulation results between any two existing 
2D simulations. Finally, we use an isosurface reconstruction 
approach to obtain the 3D surface. 
3.2.1 Fluid equation 
The incompressible NS equation is used for the ocean simulation. 
The NSE includes three types of forces, they are body forces (
g
F ), 
pressure forces (
p
F ) and viscous forces (
v
F ). The body forces act 
on the entire water element. We assume only the gravity, GF
g
 , 
where   is density and G  is the gravitational force (9.81m/s
2). 
The pressure forces act inwards and normal to the water surface, 
so the pressure forces are defined as the negative ( pF
p
 ). 
The viscous forces are VF
v
2   according to the definition of 
Newtonian fluid, where VL 1/ ,   is density, V  is velocity 
and L  is dimension. Newton’s second law is used ( mAF  ) to 
describe the motion. According to the AFFFF
vpg
 , we 
can get the expansion as VpGA 2  . Assume that 
density is uniform, the acceleration is  // 2VpGA  . The 
varying velocity over time is      /2// 




  VpGVVtV . 
This equation conserves the momentum. In addition, the equation 
0 V  describes a conservation of mass. The last two equations 
together are referred to as the NSE. The NSE contains four terms: 
force, advect, diffuse, and pressure. The steps of the NSE solver 
are illustrated in Figure 3. We can solve the equation one by one.  
 
Table 2：Formula of spot Q 
The pattern of the I 
type 
Spot Q 
iQ
X  
iQ
Y  
(a) 
(b) 
(c) 
(d) 
iP
X  
iP
tX
i
  
iP
X  
iP
tX
i
  
iP
tY
i
  
iP
Y  
iP
tY
i
  
iP
Y  
Assuming the boundary grid, i , is the volume fraction of fluid fi. 
If the boundary grid is closed and the boundary is composed of 
the boundary grids, we can obtain N equations. By solving these 
equations one can obtain  Niti ,,2,1   and the coordinate of Qi 
by tN+1 = t1. When the simulation has non-closed boundary, the 
equation would be tN+1 ≠ t1. Hence, we should obtain the spot of 
start gird before the operation. Here, we divide the start grid into 
three types and seven cases. And we can obtain the t1 as shown in 
Figure 5 by the equations of the different cases. We divide the 
start grid into three types. Type 1 is “leftward”, and the adjacent 
grid is located on the left start grid. Type 2 is located below the 
start grid, called “downward”. Type 3 is located above the start 
grid, called “upward”. The different types have different cases. 
According to the different cases one can calculate t1 as shown in 
Table 3. 
 
Figure 5：The status of the start grid 
Table 3：Formula of t1 
 Type 1 
(a) 
(b) 
(c) 
  2/3 211 fft   
  21
2
2211 22 ffffft   
  232322 2121
2
2211  ffffffft  
 Type 2 
(a) 
 
(b) 
221
2
111 / ffffft 





  
21111 22 fffft   
 Type 3 
(a) 
 
(b) 
   22121
2
1211 1/23 fffffffft 





  
  21211 212 fffft   
3.2.3 Expansion to 3D 
The slice method can generate the different 2D simulations, one 
can further integrate them to get a 3D shape. We can use the level 
of detail(LOD) scheme because LOD involves decreasing the 
complexity of a 3D object representation as it moves away from 
the viewer or according other metrics such as object importance, 
eye-space speed or position. Based on the LOD each patch will be 
determined by the distance to the viewer, one can use the larger 
grid on the 2D simulation when grid is farther away from the 
camera. 
In contrast to the slice method that needs to process many slices, 
the proposed method only process some key slices. We apply 
linear interpolation with noise function to generate the new 2D 
simulations between two key slices. The formula is shown as 
follows. 
 
t
ik
PP
PP
jijk
jijti




,,
,,
, nj 1                                 (2) 
  )('
1,,1,,
jNoisePPPP
jijijiji 
                                      (3) 
where Pi,j is the i-th of 2D simulation result (outline), and the j is 
the order of the boundary. Pi,j and Pk,j are the two 2D simulations 
by VOF, and they need to interpolate 2D new slice 
jti
P
,
 between 
the i-th and the k-th simulation. By Eq.(2) which is the linear 
interpolation one can obtain the value of the interpolation. But the 
quality is insufficient, when only use the value of the interpolation 
to generate the 2D simulation, so a noise function is integrated 
into Eq.(3). The noise function makes the simulation more real. 
The reconstructed surface may have aliasing and not smooth. 
Therefore, we should add some techniques to make the surface 
more smooth. Here, we use the Chaikin's algorithm to smooth the 
reconstructed surface.  
3.3 Particle simulation 
The particle system is used to simulate certain fuzzy phenomena 
on computer graphics. The particle status of splashes and foam is 
very important for the ocean simulation. In this paper, we only 
render the splash. We generate the particles according to the value 
of curvature, and the new splash particle has its lifespan. Then we 
update position over time. And the splash particles are rendered in 
white. In this way, we can effectively visualize splashes. 
3.4 Render 
In this step, we use the lighting and texture operations for the 
ocean simulation. The texture technique that we used is bump 
mapping. Bump mapping perturbs the surface normal of the 
object at each pixel, and is applied before the illumination 
calculation. In addition, it has been proved an effective way to 
improve the appearance of reality and not increase the complexity 
of the geometric objects. The technique has already implemented 
in the field of real-time graphics with the graphics hardware 
progresses and the application of shading language. In order to 
render the water, we should implement the reflective and the 
refractive effects. Environment mapping can help us to render the 
effect. One can calculate the normal vector to get the 
corresponding environment texture. Then one can mix the texture 
with water color and get the final color. The technique is easy to 
implement by GLSL, and the result is more realism. 
4. IMPLEMENTATION 
The simulation of breaking wave has a lot of formulas that are 
very complicated to implement for hydrodynamics. In this paper, 
we use the finite difference method to describe the formula of 
NES. Then, we can get the velocity at the center of each face of a 
grid and the pressure at the center of a grid. According to the 
correctness of velocity and pressure one can construct a flow field 
and do the ocean simulation. 
4.1 2D simulations 
4.1.1 Initialization 
Before the simulation, the computation domain can be represented 
via a fixed rectangular grid aligned with a Cartesian coordinate 
system. To initial configurations of space such as mesh size, 
velocity field and pressure field, and prescribe initial conditions 
for the 2D NSE, one can create an ocean wave by [20]. At first, 
we denote the period, T , wavelength,  , and amplitude, A . If 
the 2D results to determine the variation of wave. Figure 9 shows 
the FPS measurements for the different slice counts. These slices 
would be uniformly distributed on the interval of z-axis grid size. 
And the grid size is 100 100 50 and the number of triangles is 
about 148000.  
 
Figure 8：Snapshots of the 3D wave 
9.62
8.2
7.11 6.31 5.61
0
2
4
6
8
10
12
2 3 4 5 6
FPS
Slice counts
 
Figure 9：FPS measurements for the different slice counts 
NSE can be divided into four steps with the time complexity is 
listed in Table 6. Project step uses the PCG method to reduce 
both the space complexity and time complexity per iteration from 
 2n  to  m , where n  is the grid size, m  is the number of 
nonzero entries of A , and   is the iteration times. Our algorithm 
efficiency is competitive compared with the previous method of 
the slice method [20]. In [20], the free surface is calculated by 
CLSVOF. The result is more realism but needs more 
computational time. In the proposed algorithm, we use VOF to 
solve the free surface. The VOF method is known for its ability to 
conserve the "mass" of the traced fluid. Although the reality is 
less, the computational time is twice less than that of CLSVOF. 
Table 7 lists comparisons of time complexity for the proposed and 
the slice methods. We assume the time complexity of 2D NSE and 
the surface reconstruction is  K , so the time complexity of the 
proposed method and the slice method is  Kt  and  Kh  
respectively, where t  is the number of key slice and h  is the 
length of z axis ( ht  ). Here we assume the length of z-axis on 
3D space is fifty. The slice method needs fifty slices and the 
proposed method would use 2~6 slices to expand 3D environment. 
The computation time of the proposed method is faster than the 
slice method. Although fewer slices would reduce the reality, the 
work efficiency would increase. And the proposed method is more 
flexible due to users can decide to control slices count. In order to 
reduce aliasing which producing by linear interpolation, we add 
the noise function to make the free surface more natural.  
Table 6：Time complexity for different solutions of NSE 
NSE Force Diffuse Advect Project 
Method 
Finite 
difference 
Finite 
difference 
Method of 
characteristics 
PCG 
Time 
complexity 
 n   n   n   m  
Table 7：Time complexity of the proposed method and the slice 
method 
Method 
The proposed 
method 
The slice method 
Time complexity  Kt   Kh  
Computation time 5~9 frames/s 1 frame/s 
We render the environment mapping, the reflective and the 
refractive effect of the water by GLSL. The reflective and the 
refractive effect of the water are mix environment texture with 
water color. And we use bump mapping to increase the reality. 
The technique is simple and yields good results. Figure 10 shows 
the render effect. And Figure 11 increases the splash effect by the 
particle system.  
 
Figure 10：Render effect 
 
Figure 11：Snapshots of the breaking wave 
5. CONCLUSIONS 
In this paper, we have presented a slice-based water simulation 
method for ocean breaking wave on natural simulation. By 
combining linear interpolation with noise function to construct a 
complete three dimensional ocean simulation, one can reduce 
computational time and achieve better efficiency. The proposed 
algorithm can improve the computational time of the slice method. 
And we also avoid the aliasing using linear interpolation with 
noise function. The proposed method is more flexible to users, 
because users can determine how many slices are used. Users can 
generate simple ocean waves by a few slices, or complicated 
ocean waves by more slices. No matter what users choose, the 
ocean wave is still realism.  
People can design the different ocean waves by the slice method, 
but it would spend much time and resources. The proposed 
method can speed up the computation time as fast as 9 times and 
make the simulation efficiency. And this method still can reserve 
the reality because it uses the noise function to increase the 
variation of water. 
6. REFERENCES 
[1]. C. Johanson, “Real-time water rendering,” Master of 
Science paper, Lund University, 2004. 
[2]. D. Enright, S. Marschner, and R. Fedkiw, “Animation and 
Rendering of Complex Water Surfaces,” Proc. of the ACM 
Transactions on Graphics, vol. 21, no. 3, pp. 736–744, 
2002. 
[3]. D. Kim, O.Y. Song, and H.S. Ko, “A Semi-Lagrangian CIP 
Fluid Solver without Dimensional Splitting,” 
EUROGRAPHICS 2008, vol. 27, no. 2, 2008. 
[4]. G. Irving, E. Guendelman, F. Losasso, and R. Fedkiw, 
“Efficient Simulation of Large Bodies of Water by 
Coupling Two and Three Dimensional Techniques,” Proc. 
of the ACM Transactions on Graphics, vol. 25, 2006. 
[5]. J. Stam, “Stable Fluids,” Proc. of ACM SIGGRAPH ‘99, pp. 
121–128, 1999. 
[6]. J. Tessendorf, “Simulating Ocean Water,” Proc. of ACM 
SIGGRAPH 2002 Course Notes 9 (Simulating Nature: 
Realistic and Interactive Techniques), 2002. 
 - 1 - 
國立中山大學工學院博士生出席國際會議報告 
 
                                   製表日期：99年 10月 05日 
報告人姓名 張簡大敬 服務單位 國立中山大學資訊工程學系
會議時間  9/20-9/24 地    點 俄羅斯 聖彼得堡大學 
中文：GraphicCon’ 2010 研討會 
會議名稱 英文：20th International Conference on Computer Graphics 
      and Vision 2010 
中文：基於 slice的方法之海水碎波模擬 
發表論文題目 英文：An Efficient Slice-Based Water Simulation Approach for 
Breaking Waves 
報告內容包括下列各項： 
一、參加會議過程 
二、參加會議心得 
三、相關建議 
四、攜回資料 
   五、其它 
 
 - 3 - 
   
大會入口 參與情況 專題演講 
   
讚助廠商 攜回資料 接待處 
 
二、參加會議心得 
這次到俄羅斯參加了 GraphicCon’ 2010會議，聽了來自各國的專家與學者報
告，覺得獲益良多。此次會議因得到了國家國科會之補助，讓我得以出國並開擴
自己的視野與見聞，在此，感謝國科會之經費支持、李宗南老師與學長姊與朋友
的意見與協助，讓我得以順利出國。 
 
三、相關建議 
建議可以多補助金費以提供國內博士生出國參加國際型之會議，並交換研究
心得。隨著互相研習與交換彼此心得，除了可增進國際觀與歷練，亦可增加台灣
於國際舞台之能見度。經過此次會議，除了學習本身之專業領域之外，亦學習到
不同國度的民族特性(如俄羅斯人生性冷酷)與緊急事件的處理(坐車與行李相關
事情)。根據觀察及體驗，提出以下建議： 
 產學合作：適度與業界執行產學合作，除了可加強學生將理論落
實，且也可經由與業界交流而了解到何者才是業界目前的需求與未
來趨勢。若只是專注在本身議題之身，而無法有一實體呈現，在科
技進展的實質面上將是相當可惜。 
 自身學習的動機：由於民族的特性差異，雖然台灣學生與國外學生
 - 5 - 
論文發表之投影片(局部) 
 
 
 
98年度專題研究計畫研究成果彙整表 
計畫主持人：李宗南 計畫編號：98-2220-E-110-003- 
計畫名稱：具有即時效能/功率監控功能的高效率可程式化三維電腦繪圖晶片系統：軟硬體開發及整合
--子計畫二：可程式化三維電腦繪圖晶片系統之三維(3D)應用程式介面(API)與流體模擬之應用(3/3)
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 0 100% 
篇 
CGW 2009 論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 0 100%  
博士生 1 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 0 100% 
篇 
1.Asia-Pacific 
Signal and 
Information 
Processing 
Association 
( 2009 APSIPA) 
2.International 
Conference on 
Computer 
Graphics and 
Vision (2010 
GraphiCon) 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
國外 
參與計畫人力 
（外國籍） 博士生 0 0 100% 
人次 
 
 
