deformable objects can be found in [Teschner et al. 2005]. A brute force approach for 
collision detection is to perform an elementary test for every two features of triangles. 
The run–time complexity is bounded by O(n2), where n is the number of features. 
Employing bounding volumes would cull away a large portion of non-colliding triangles, 
such as the methods in [Hubbard 1993; Gottschalk et al. 1996; Klosowski et al. 1998; van 
den Bergen 1999; Mezger et al. 2003; Smith et al. 1995; van den Bergen 1999]. The 
hierarchies of k-DOPs [Klosowski et al. 1998] are widely used because of its high culling 
effectiveness.  
Continuous collision detection can be used for computing precise contact times for two 
objects. Continuous collision detection has been applied in the simulation of rigid bodies 
[Redon et al. 2005]. For handling deformable objects, an approach was proposed in [Liu 
et al. 1996] for computing the contact time between two triangles by checking the fifteen 
feature pairs of these two triangles. Each test for a feature pair involves solving a cubic 
equation for the times when the feature pair is coplanar. The shortest distance of the 
feature pair is then computed. If the distance is less than or equal to a predefined 
threshold, the feature pair collides. Subsequently, this method was adopted in [Provot 
1997; Bridson et al. 2002; Wong and Baciu 2005; Hutter and Fuhrmann 2007]. Solving 
the cubic equations takes the most amount of time. It is unnecessary to solve the cubic 
equations as a large portion of feature pairs are not coplanar over the simulation time 
interval. Based on that, Tang et al. [Tang et al. 2010] proposed an approach to filter the 
feature pairs that are not coplanar so as to avoid solving the corresponding cubic 
equations. They employed a numerical iteration method, Interval Newton, to solve the 
cubic equation of the feature pair if the filter test is passed. 
An assignment scheme was proposed in [Wong and Baciu 2006] for assigning features to 
adjacent triangles. Each edge and vertex in the mesh is assigned to one of their adjacent 
triangle in a randomized manner. Their method significantly reduces the number of 
duplicate tests for feature pairs. The idea was adapted in [Hutter and Fuhrmann 2007; 
Curtis et al. 2008; Tang et al. 2009a].  
High-level culling technologies have been proposed for reducing the computation cost in 
self-collision detection. Volino et al. [Volino and Magnenat-Thalmann 1994] proposed a 
method for partitioning surfaces into low-curvatured regions. There would be no self-
collisions for the regions with low curvature. Originally, the method was adopted in 
discrete collision detection. The idea was extended in [Provot 1997; Wong and Baciu 
2005; Tang et al. 2009a] for continuous collision detection. Collision detection can be 
performed at interactive rate for complex deformable objects by employing parallel 
computation techniques. An approach was proposed in [Kim et al. 2009] for treating 
inter-collisions and self-collisions as inter-CD tasks. Independent inter-CD tasks are 
assigned to different threads for performing parallel update and traversal of bounding 
volume hierarchies on a multi-core platform with graphics processing units. In [Tang et al. 
2009b], a parallel collision detection method was developed for storing the front nodes 
temporarily as the start nodes for the traversal of bounding volume hierarchies at each 
frame. 
 
II. Parallel collision detection 
隨著平行化技術的成熟，可形變物體的碰撞偵測，也將觸角延伸向這個領域。Kim 
et al. [12] 提出了“inter-CD task”，將資料互相獨立的inter-CD task 分派給不同的執
Dynamic Task Scheduling. 顯然地，在上述的方法中，所有處於閒置狀態下的執行緒
將被迫等待 ttra 找到所有可能的 PCTPs 後，才能開始動工。然而讓大多數的執行緒
閒置，空轉著等待單一條執行緒的方式，是有許多改進空間的。與此同時，我們也
修改 ttra 的工作方式。ttra 不再讓空閒的執行緒等待它找到所有存在的 PCTPs 後，才
能經由 ttra 的平均分配，開始基層測試的計算。 
 
為了達成這個目標，我們決定將 PCTPs 包裝成一個個固定大小的封包。在 ttra 執行
BVH traversal 的過程中，一旦發現有封包被裝滿，便 動態地從 nidle 條 tidle 中找出
一條空閒的執行緒來接管這個裝滿的封包。我們發現這樣的改變是值得的。經過這
樣的調整後，我們能在整體效能上，進一步取得改進。 
 
III.CUDA for rendering objects 
We adopted multithreading techniques and streaming SIMD extensions (SSE) for ray 
packets. A dynamic loading balancing scheme is employed for multiple threads on a CPU. 
On the other hand, we perform ray tracing on a GPU with CUDA. Then we assign tasks 
to the CPU and the GPU as evenly as possible for load balancing. 
 
結果與討論 
We have built out system and tested for performance. 
 
I. Continuous collision detection 
We implemented our algorithm and performed experiments. All the experiments were 
performed on an Intel(R) 2.66 GHz quadcore CPUs with 4GB main memory and one 
thread was used. The computation was all carried out in double precision floating point 
for solving the cubic equations. The type of bounding volume was k-DOPs. We had 
implemented 6-, 10-, 14-, 16-,18- and 26-DOPs. For the update and traversal of bounding 
volume hierarchies, we implemented them based on Intel SSE instruction set. The 
shortest distance between the features is computed for the times t in an ascending order 
[Hutter and Fuhrmann 2007]. On average we found that the performance for using 14-
DOPs, 16-DOPs and 18-DOPs were the best. We compared our algorithm to I-Newton 
(implemented in [Kim et al. 2009]) and NPF (non-penetration filter in [Tang et al. 2010]) 
The type of bounding volume was 16-DOP in all methods. Moreover, we employed our 
proposed feature assignment scheme for avoiding duplicate elementary tests. We 
recorded the simulation data (such as positions of vertices) and the same set of data was 
then employed for each method. In this way, all methods would have to process the same 
amount of potentially colliding triangle pairs. 
 
 
 
 
 
 
 
 
 
 
III. CUDA for rendering objects 
We performed CPU ray tracing on Intel(R) Core(TM)2 Quad CPU Q9400 @ 2.66GHZ 
2.67 GHz, 3.25GB RAM platform.There are four cores on the CPU, so we employed four 
threads to get better efficiency. For GPU ray tracing, CUDA process runs on NVIDIA 
Quadro FX 4600 graphics card that 1.0 compute capability is supported. The overall 
performance, however, could be improved up to around  50%. 
 
 
References: 
I. Continuous collision detection and II. Parallel collision detection 
1. BARAFF, D., AND WITKIN, A. 2003. Untangling cloth. ACM Transactions on 
Graphics 22, 3, 862–870. 
2. BREEN, D., HOUSE, D., AND WOZNY, M. 1994. Predicting the drape of 
woven cloth using interacting particles. In Computer Graphics Proceedings, ACM 
SIGGRAPH, 365–372. 
3. BRIDSON, R., FEDKIW, R., AND ANDERSON, J. 2002. Robust treatment of 
collisions, contact and friction for cloth animation. ACM Transactions on 
Graphics 21, 3, 594–603. 
4. CHOI, K., AND KO, H. 2005. Stable but responsive cloth. In ACM SIGGRAPH 
2005 Courses, ACM, 1.  
5. CURTIS, S., TAMSTORF, R., AND MANOCHA, D. 2008. Fast collision 
detection for deformable models using representative triangles. In Proceedings of 
the Symposium on Interactive 3DGraphics and Games, 61–69. 
6. GOTTSCHALK, S., LIN, M., AND MANOCHA, D. 1996. OBBTree: A 
hierarchical structure for rapid interference detection. In Computer Graphics 
Proceedings, ACM SIGGRAPH, 171–180. 
7. GOVINDARAJU, N., KNOTT, D., JAIN, N., KABUL, I., TAMSTORF, R., 
GAYLE, R., LIN, M., AND MANOCHA, D. 2005. Interactive collision detection 
between deformable models using chromatic decomposition. ACM Transactions 
on Graphics 24, 3, 991–999. 
8. HARMON, D., VOUGA, E., TAMSTORF, R., AND GRINSPUN, E. 2008. 
Robust treatment of simultaneous collisions. In Computer Graphics Proceedings, 
ACM SIGGRAPH, 23. 
9. HUBBARD, P. 1993. Interactive collision detection. In Proceedings of IEEE 
Symposium on Research Frontiers in Virtual Reality, 24–31. 
10. HUTTER, M., AND FUHRMANN, A. 2007. Optimized continuous collision 
detection for deformable triangle meshes. Proceedings of WSCG, 25–32. 
11. KIM, D., AND YOON, S., 2009. OpenCCD: Continuous collision detection API, 
used in HPCCD. http://sglab.kaist.ac.kr/OpenCCD. 
12. KIM, D., HEO, J., HUH, J., KIM, J., AND YOON, S. 2009. HPCCD: Hybrid 
parallel continuous collision detection using CPUs and GPUs. Computer 
Graphics Forum 28, 7, 1791–1800. 
13. KLOSOWSKI, J., HELD, M., MITCHELL, J., SOWIZRAL, H., AND ZIKAN, K. 
1998. Efficient collision detection using bounding volume hierarchies of k-DOPs. 
IEEE Transactions on Visualization and Computer Graphics 4, 1, 21–36. 
29. WONG, S., AND BACIU, G. 2006. A randomized marking scheme for 
continuous collision detection in simulation of deformable surfaces. In 
Proceedings of ACM Int’l Conf. on Virtual Reality Continuum and Its 
Applications, 181–188. 
30. YE, J. 2008. Simulating inextensible cloth using impulses. In Computer Graphics 
Forum, vol. 27(7), 1901–1907. 
 
 
III. CUDA for rendering objects 
 
 
1. T. Aila and S. Laine. Understanding the efficiency of ray traversal on GPUs. In 
Proceedings of High Performance Graphics, pages 145-149, 2009. 
2. A. Appel. Some techniques for shading machine renderings of solids. In 
Proceedings of the Eastern Joint Computer Conference, pages 37-45, 1968. 
3. C. Benthin. Realtime Ray Tracing on Current CPU Architectures. PhD thesis, 
2006. 
4. M. Ernst, C. Vogelgsang, and G. Greiner. Stack implementation on programmable 
graphics hardware. In Proceedings of the Vision, Modeling, and 
5. Visualization Conference 2004, Stanford, California, USA, November 16-18, 
2004, pages 255-262, 2004. 
6. T. Foley and J. Sugerman. KD-tree acceleration structures for a GPU raytracer. In 
Proceedings of the ACM SIGGRAPH/EUROGRAPHICS conference on Graphics 
hardware, page 22, 2005. 
7. D. Fussell and K. Subramanian. Fast ray tracing using kd trees. 1988. 
8. J. Goldsmith and J. Salmon. Automatic creation of object hierarchies for ray 
tracing. IEEE Computer Graphics and Applications, 7(5):14-20, 1987. 
9. V. Havran. Heuristic Ray Shooting Algorithms. Phd thesis, Department of 
Computer Science and Engineering, Faculty of Electrical Engineering, Czech 
Technical University in Prague, 2000. 
10. D. Horn, J. Sugerman, M. Houston, and P. Hanrahan. Interactive kd tree GPU 
raytracing. In Proceedings of the 2007 symposium on Interactive 3D graphics and 
games, page 174, 2007. 
11. C. Lauterbach, M. Garland, S. Sengupta, D. Luebke, and D. Manocha. Fast BVH 
construction on GPUs. In Computer Graphics Forum, pages 375-384, 2009. 
12.  T. M oller and B. Trumbore. Fast, minimum storage ray/triangle intersection. In 
ACM SIGGRAPH 2005 Courses, page 7, 2005. 
13. C. NVIDIA. Compute Uni_ed Device Architecture, Programming Guide, version 
2.1, 2008. 
14. R. Overbeck, R. Ramamoorthi, and W. Mark. Large ray packets for real-time 
Whitted ray tracing. In IEEE/EG Symp. on Interactive Ray Tracing, 2008. 
15.  S. Popov, J. G unther, H. Seidel, and P. Slusallek. Experiences with streaming 
construction of SAH KD-trees. In Proceedings of the 2006 IEEE Symposium on 
Interactive Ray Tracing, pages 89-94, 2006.  
 
Fig. 1 Snapshots of experiments for collision detection. 
 
 
 
 
Figure 2. Rendering results. 
98年度專題研究計畫研究成果彙整表 
計畫主持人：黃世強 計畫編號：98-2221-E-009-143- 
計畫名稱：運用 CUDA 在多核心平台上進行平行運算模擬多層不可伸展衣服 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 2 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
