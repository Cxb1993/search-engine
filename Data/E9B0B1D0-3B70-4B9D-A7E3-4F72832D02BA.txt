行政院國家科學委員會專題研究計畫成果報告 
 
專案趕工策略、專案作業時間與專案風險評估之進階研究(I)  
Advanced research on project crashing, project activity time, and project 
risk assessment  
 
計 畫 編 號：NSC-96-2221-E-027-101 
執 行 期 限：96 年 8 月 1 日至 97 年 10 月 31 日 
主 持 人：林逾先．國立台北科技大學．經營管理系 
中文摘要 
尋求最佳趕工策略的時間與成本抵換方式是專案管理中廣為研究討論的主題之
一。在此項研究中，我們首先利用接線方式提出一項線性規劃模式，去描述分離
作業時間及浮動作業趕工成本的專案趕工情況。我們接著發展出一項技巧，將此
線性規劃模式轉換成另一種等值問題。本研究結果發現，從現實的角度來看，此
種轉換後的問題很容易加以建立及可以更直接有效地求解。與此同時，轉換後等
值問題最終答案裡的決策變數對最佳趕工策略有較佳的闡釋。 
關鍵詞:  專案管理、時間-成本抵換、線性規劃。 
Abstract 
Time-cost tradeoffs toward optimal project crashing strategy is one of the widely 
discussed topics in project management. In this research, we first proposed an LP 
formulation to accommodate the project crash under discrete activity time and 
fluctuating activity crash cost using piecewise linear approximation. We then developed 
a technique to transform such LP formulation into an equivalent problem. The results of 
this research show that, in practice, such transformed problem can be easily and directly 
constructed, and efficiently solved. Furthermore, the decision variables in the final 
solution of this transformed problem have meaningful interpretations towards the 
desired optimal crashing strategy. 
Keywords:  Project management; Time-cost tradeoffs; Linear programming 
研究報告內容 
The optimal strategy of crashing project activity times to meet the desired project 
duration, known as “time-cost tradeoffs”, is an area that has drawn the attentions of 
many researchers. Ever since the development of an algorithm by Siemens (1971) using 
the cost slope to shorten all paths in a project network, many studies in this area have 
been carried out over the years. Falk and Horowitz (1972) presented an algorithm for 
time-cost tradeoff problem with the activity crash cost being a concave function, 
Robinson (1975) presented an algorithm that incorporates dynamic programming to 
solve the time-cost tradeoff problem. Goyal (1975) revised Siemens’ algorithm to 
reduce the number of shortened paths in the algorithm. Phillips and Dessouky (1977) 
 2
be referred to as the relationship constraints as they hold the interrelationship (i.e., 
precedence and succession) of all project activities. Specifically, it is required that, for a 
given activity i, its finish time should always be greater than the start time of its 
immediate predecessors minus the number of time units crashed. Constraints (2), called 
the variable precedence constraints, are used to enforce the requirement that, for a 
specific time of an activity, it cannot be crashed unless all times before it have been 
crashed (e.g., one cannot crash day 2 unless day 1 is crashed). Constraint (3) states that 
the project is to be crashed to the desired time duration t. Constraints (4) set the {0, 1} 
integrality requirement for all xij variables, i = 1, 2, …, n;  j = 1, 2, …, s(i). 
While problem (P) can be solved directly using LP software, the efficiency of such 
solution approach is curbed by the existence of many variable precedence constraints. 
This is especially true when the project contains a significant number of activities with 
the high number of eligible crash times for each activity (i.e., high values of s(i), i = 1, 
2, …, n.). In light of this, we propose a transformation technique in the following section 
that can make these variable precedence constraints implicit. 
Define a set of transformation variables yij to be 
yij  = xij – xi,j+1     i = 1, 2, …, n;  j = 1, 2, …, s(i). 
Note that decision variables yij, in this case, can be interpreted as follows: 
1  if activity i is to be crashed up to time j, 
yij = 
0  if otherwise. 
Using the recursive relationship, we can derive that 
 s(i) 
xij = Σ yik i = 1, 2, …, n;  j = 1, 2, …, s(i). (5) 
 k=j 
Substituting xij in (P) by their associated transformation variables as shown in (5), we 
are able to make the variable precedence constraints implicit by turning xij – xi,j+1 ≧ 0 
into yij ≧ 0, i = 1, 2, …, n;  j = 1, 2, …, s(i). It is important to note that the {0, 1} integrality 
requirement of (4) in (P) needs to be addressed. Specifically, if we rewrite (4) into 
1 ≧ xij ≧ 0  and  xij = integers,  i = 1, 2, …, n;  j = 1, 2, …, s(i). (6) 
Transformation of (6) using (5) yields to 
 s(i) 
1 ≧ Σ yik ≧ 0 i = 1, 2, …, n;  j = 1, 2, …, s(i). (7) 
 k=j 
However, we note that only one constraint needs to be considered in (7). Namely, 
yi1 + yi2 + ……… + yi,s(i) ≦ 1. (8) 
This is because the solution space of (8) is the subset of the solution spaces created by 
all other remaining constraints which would then become redundant. Therefore, we can 
replace (7) by 
 s(i) 
 Σ yij ≦ 1, i = 1, 2, …, n. 
 j=1 
 4
參考文獻 
[1] Baker, B. M., Cost/time trade-off analysis for the critical path method: a derivation 
of the network flow approach. Journal of Operational Research Society, 1997, 48, 
1241-1244. 
[2] Falk, J. E. and Horowitz, J. L., Critical path problems with concave cost time 
curves. Management Science, 1972, 19, 446-455. 
[3] Fulkerson, D. R., A network flow computation for project cost curves. 
Management Science, 1961, 7, 167-178. 
[4] Goyal, S. K., A note on simple CPM time-cost tradeoff algorithm. Management 
Science, 1975, 21, 718-722. 
[5] Hamacher, H. W. and Tufekci, S., Algebraic flows and time-cost trade-off 
problems. Annals of Discrete Mathematics, 1984, 19, 165-182. 
[6] Herring, B. E. and Murphy, L. C., Recursive relation using the critical path to 
perform time-cost trade-offs. International Journal of Project Management, 1987, 
177-179. 
[7] Kanda, A. and Rao, U. R. K., A network flow procedure for project crashing with 
penalty nodes. European Journal of Operational Research, 1984, 16, 174-182. 
[8] Kanda, A. and Singh, N., Project crashing with variations in reward and penalty 
functions: Some mathematical programming formulations. Engineering 
Optimization, 1988, 13, 307-316. 
[9] Kelley, J. E., Critical-path planning and scheduling: mathematical basis. 
Operations Research, 9, 296-320. 
[10] Law, J. S. and Chu, H. W., Models to predict efficiency of two network flow based 
algorithms on the time-cost trade-off problem. Computers and Industrial 
Engineering, 1987, 12, 91-97. 
[11] Phillips, S. Jr., Project management duration/resource tradeoff analysis: an 
application of the cut search approach. Journal of Operational Research Society, 
1996, 47, 697-701. 
[12] Phillips, S. Jr. and Dessouky, M. I., Solving the time/cost trade-off problem using 
the minimal cut concept. Management Science, 1977, 24, B393-400. 
[13] Premachandra, I. M., A goal-programming model for activity crashing in project 
networks. International Journal of Operations & Productions Management, 1993, 
13, 79-85. 
[14] Robinson, D. R., A dynamic programming solution to cost-time tradeoff for CPM. 
Management Science, 1975, 22, 158-166. 
[15] Siemens, N., A simple CPM time-cost trade-off. Management Science, 1971, 17, 
B354-362. 
[16] Tufekci, S., A flow preserving algorithm for the time-cost trade-off problem. AIIE 
Transactions, 1982, 2, 109-113. 
[17] Wei, C. C. and Wang, C. M., Efficient approaches of linearization in project 
compression. Computers and Industrial Engineering, 2003, 44, 695-706. 
 6
