結構化客製晶片之可程式元件與繞線網路之研究 
“Reconfigurable Logic Blocks and Regular Fabrics for Structured ASICs” 
計畫編號：NSC95-2221-E-155-084 
執行期間：95 年 8 月 1 日 至 96 年 7 月 31 日 
主持人：林榮彬 元智大學資訊工程系副教授 
 
一、 中文摘要 
結構化客製積體電路(Structure ASIC)是
目前市場上為彌補 FPGA 與 Cell-based ASIC 
之間的鴻溝所發展出的一種新技術。它與傳統
之 gate array 非常相似，但其不同之處在於
Structured ASIC 已經預先製造一些金屬層，並
保留一些上層金屬層來規畫底層元件以完成
電路設計。它較 FPGA 具備較低成本、較高效
能與較低功率消耗等優勢，與 Cell-based ASIC 
相比則具有低設計成本及縮短設計及製造時
間的優勢。本計畫針對 Structured ASIC 之架
構做深入的探討。首先，我們提出一些可程式
的 Structured elements (arrays)，我們並建立了
一個類似標準元件設計流程來設計 Structured 
ASICS。我們並發展了一些與 Structured ASIC 
相關之 EDA 設計工具。 
英文摘要 
Structured ASIC as an emerging integrated 
circuit design technology claims its capability of 
filling the gap between ASIC and FPGA designs. 
Structured ASIC is very similar to a traditional 
gate array except that it has some pre-fabricated 
bottom metal layers and has some un-fabricated 
top metal layers. The top metal layers are used to 
program the structured elements to complete a 
circuit design. Structured ASIC takes advantages 
of lower cost, higher performance, and lower 
power consumption than FPGA, and lower cost 
and shorter time-to-market than cell-based ASIC. 
In this project, we have proposed several 
structured elements (arrays). We created a 
standard cell design flow using the proposed 
structured elements and develop some EDA 
tools particularly for our design flow. 
 
二、 計畫的緣由與目的 
A structured ASIC consists of arrays of 
pre-fabricated yet configurable logic blocks 
(CLBs), a regular fabric⎯some metal layers 
with pre-defined mask patterns, and one or a 
couple of yet-to-be defined via layers. The 
yet-to-be defined vias are used to set the 
functions implemented by the CLBs and 
establish the connections among the CLBs. In 
this manner, a user need only pay the mask 
tooling cost for a couple of via layers and a small 
amount of amortized mask cost for making the 
remaining layers[1-3]. Structured ASIC can 
achieve a timing performance comparable to that 
of an ASIC while consuming much less power 
than that of an FPGA [4-6]. As an emerging 
implementation option, structured ASIC is still 
found many unsolved problems related to 
designing of via-configurable logic blocks 
(VCLBs) and regular fabrics as well as tool 
development. Especially, lacking of tool 
supports for cell library development, placement 
and routing, logic synthesis, etc. has greatly 
limited the adoption of structured ASIC. To 
reduce tool development cost for structured 
ASIC, the designing of VCLBs should leverage 
the existing tools as much as possible. 
There are two types of VCLB. One adopts 
FPGA-like look-up tables (LUT) to implement 
k-input logic functions. The other employs 
series-parallel layout structures to implement 
various kinds of logic functions. LUT-based 
VCLBs proposed by [6] can be laid out in a way 
similar to standard cells. Standard cell design 
style enables simple power/ground (P/G) 
distribution. P/G buses between adjacent cells 
can be abutted and P/G stripes using higher 
metal layers can be easily deployed to form a 
Fig. 3 shows our VCLB. It consists of three 
N and P diffusion regions, respectively.  The 
layout design on the left resembles the VCC and 
the layout on the right resembles the INV in Fig. 
1. The left part can be used to implement CMOS 
logic gates using serial-parallel structures. All 
the logic functions implemented by the VCC in 
Fig. 2 can also be realized using transistors in the 
left part of our VCLB. The right part can be 
employed to implement logic functions using 
pass transistor structures. Please refer to [8] for 
the details about what logic functions can be 
realized by a VCC and INV. Despite of a 
resemblance between our VCLB and the left part 
of a BLE in Fig. 2, our layout design as a whole 
is quite different from that in Fig. 2. The features 
unique to our VCLB are as follows. 
z Our VCLB is a monolithic design. That is, 
the left and right parts can not be separated.  
z The preferable routing directions of M1 and 
M2 are horizontal and vertical, respectively. 
P/G lines are located at the top and bottom 
boundaries.  Our VCLBs can be abutted to 
form a cell row. Some cell rows can be 
flipped with respect to X-axis, each of 
which can be abutted the rows above and 
below it to form wider P/G lines. Power 
stripes on higher metal layers can be freely 
deployed above the core area because our 
P/G lines are on M2. Basically, what can be 
done for a traditional standard cell design 
can also be done for a design based on our 
VCLBs. 
z There are five long wires running on M2. 
Three of them are used for intra cell 
connections. The rest two are used for inter 
cell connections to implement more 
complex logic functions using several 
VCLBs. 
z  Pins accesses are located at the centre of a 
VCLB rather than at the top and bottom. All 
the pins are laid out with M2. The unused 
inputs need not be tied to P/G because any 
floating input does not have a chance to 
create a short circuit from power to ground. 
However, a choice of connecting a pin to 
P/G can always be made. 
z Creating a cell library using our VCLB is 
considerably easier than that using VCGA 
given in Fig. 1 because the number of logic 
functions that can be implemented by our 
VCLB is much smaller.  
 
Our VCLB with respect to power planning is 
quite similar to that presented in [9], but one 
very important difference is that the VCLB in [9] 
must contain a fixed ratio of combinational logic 
element to sequential element.  
We present a structured ASIC design 
methodology based on our VCLB. Fig. 4 shows 
a simple flow of how to construct a standard cell 
library (the shaded part) and perform chip 
designs using our VCLBs and cell library.  
To create a cell library, we first define a via 
map on the VCLB given in Fig. 3 for each logic 
function.  We install the so-defined vias in the 
VCLB to complete the layout of the logic 
function. We use the tool [10] to perform post 
layout timing characterization. Once this is done 
for all the logic functions, we create a library 
called DC cell library for Synopsys Design 
Compiler. In DC cell library, each logic function 
is implemented using a VCLB. Since the 
transistors in the VCLBs for simple logic 
functions are not fully utilized, we hand-pack 
more than one logic function into a single VCLB 
to form a multi-function packed block (MFPB). 
A MFPB has more than one output. 
Correspondingly, we have to create a layout for 
each MFPB. Once this is done, we create a cell 
library called SOC-E cell library for Cadence 
SOC Encounter. SOC-E cell library consists of 
packed versus non-packed logic blocks. 
 
 
Fig. 3. Proposed VCLB 
 
A typical standard cell design flow shown on 
the left of Fig. 4 is used for chip designs. This 
