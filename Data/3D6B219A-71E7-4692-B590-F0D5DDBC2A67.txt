interactive, composable, and decoupled from data, 
i.e. a complicated visualization metaphor can be 
composed and assembled from basic ones, each of which 
is independently replaceable. The benefits of xDIVA 
can already be demonstrated by several applications. 
英文關鍵詞： visual debugging, debugging visualization, software 
visualization, composable visualization metaphors, 
program visualization. 
 
2 
 
	 	
4 
 
	
一、 摘要	
(1)計畫中文摘要	
 
儘管軟體視覺化工具已經有很大的進展，但是現在的程式設計師仍然必須依
賴插入額外的程式碼(像是 printf)來顯示複雜的程式狀態以進行除錯。直到最近
才開始有像 DDD(Data  Display  Debugger)這類的除錯工具提供程式設計師資料型
態的視覺化。但是這類的軟體工具依然有許多的限制。實務應用上，軟體視覺化
仍然存在許多障礙，最主要的原因是程式的資料型態具備多樣性與廣泛性。面對
資料型態在各個領域的多變與複雜，讓依賴固定視覺化方式的工具，都難以在實
用上符合使用者的興趣。在這個計畫中，我們嘗試去解決這個問題，並提出建構
一個視覺化除錯軟體，叫 xDIVA。xDIVA 導入 3D 繪圖引擎，靠使用 3D 的圖形，
顏色和動畫，來視覺化軟體與除錯資訊。xDIVA 透過謹慎小心的物件導向分析與
設計，讓 VM (Visualization Metaphor)  和變數資料能夠在最低耦合的情況，可以
與使用者互動，還可以互相合成。一個複雜的 VM可以由許多基礎的 VM組合而
成。每個 VM 都是獨立可以替代的。初步的一些成果與應用，將用來展示 xDIVA
的好處，而本計畫的未來工作將對 xDIVA 做更進一步的提升。 
 
關鍵詞：視覺化除錯，軟體視覺化，軟體除錯，可合成視覺化，可程式視覺化 
6 
 
二、 前言	
除錯，是程式開發的必然過程。據研究，程式人員花在除錯上的時間約佔
1/3的工作時間。整合開發環境(IDE)都會提供一個內建的除錯器。除錯器是個複
雜的系統程式，通常只具備命令列模式的文字介面。由於命令列模式的介面較不
容易上手。 
  而許多 IDE 都將除錯器包裝於圖形化介面(GUI)底下來提高可用性。除錯器主
要的功能是經由設定中斷點來暫停程式的執行，然後借此來觀察程式狀態。大部
分的 IDE 提供監視視窗(watch  window)，讓程式人員來觀察被監視的變數。當變
數具有複雜的結構(像 array或者 object)，監視視窗提供展開(unfold)，或收合(fold)
指令。在一般的 GUI設計上，通常是由  +  來代表一個變數還有子結構。如下圖。 
 
圖  1  除錯器 GUI 介面 
  雖然除錯器是程式設計人員非常重要的工具，但是插入輸出指令（如 cout  ，
printf）來除錯的舊習慣卻依然存在。程式人員這麼做的原因通常是為了將複雜
的資料結構整理之後列印到螢幕或檔案，以幫助除錯。有經驗的程式設計師通常
需要靠輸出與列印變數來搭配除錯器一起解決問題。傳統的除錯器限制程式設計
師只能以文字模式視覺化單一的變數或結構。所以，當一個程式設計師想要了解
物件或結構之間的關係時，他只能選擇在程式適當的地方插入額外的程式碼，以
他所偏好的視覺化方式來顯示變數與資料結構。舉一個資工人都會有的經驗：在
撰寫二元樹相關的資料結構程式時，為了除錯，我們會將二元樹想辦法印在螢幕
上。這樣子的動作其實就是人類想透過「視覺」這項本能來理解事物。 
 
8 
 
四、 文獻探討	
(1)	相關研究	
  一件複雜的事物可以經由圖形，動畫的表示，使它更容易被理解。大部分成
熟的工程皆有標準的藍圖來描述它的設計和產品。圖示還可以幫助人類解決溝通
的問題。 
  程式相較而言相當難以令人理解，因為它有一定程度的不可見性。軟體工程
先驅 Brooks 在其著名的書─人月神話中提到，不可見性令程式設計變成是相對
困難的一門工程領域，因為不像其他工程領域，現有的軟體表示圖形都與幾何沒
有關係，而其他工程領域的圖形表示都與幾何有直接的對映，所以圖形在其他工
程領域作為溝通的工具遠比軟體來的有效。延續這樣子的觀察，過去的幾十年，
軟體工程的研究一直試圖尋找使用圖形來描述軟體系統。UML  就是在這樣的背
景之下，成功地成為軟體工程的重要標準圖形(diagrams)。 
  另一方面，近幾年興起的軟體視覺化研究則著重於建構視覺化系統來視覺化
軟體系統的巨觀結構，大小，或行為等等各種軟體的性質。這類的工具，通常是
視覺化多種  software  metrics。它們可以在軟體開發時用來評估原始碼品質的好
壞，提供重要的管理依據，早一步發現異常的地方，並採取必要的步驟。 
 
(2)	程式內部的視覺化	
  對程式設計師而言，靜態的視覺化像 UML，可以在系統開發的早期給程式
設計師一個程式的宏觀架構概念。但當他們開始維修程式碼以後，還是需要面對
程式最仔細的資訊。這就是 Brooks 所說的複雜性。意思是，程式設計師最後還
是必須處理所有的細節，而不能只面對簡化的模型去完成工作。原始碼是最後定
義程式行為的產物，然而，靠 trace 程式碼來了解程式行為常常是不夠的，因為
程式碼是靜態的，但它的行為卻是動態的。所以技術高深的程式人員，通常會利
用除錯器來輔助追蹤程式碼，這在物件導向技術漸趨普及的今天，面對多型
(polymorphism)，多載(overloading)，繼承(inheritance)，等等技術的發展下，程式
的行為更形複雜與難懂。確實的執行路徑與行為常常隱藏於多型繼承之下。運用
除錯器來輔助追蹤程式碼尤其更形重要。 
程式的行為分成 2種，一種是可見的外部行為(輸出與輸入)，而另一種是不
可見的內部行為。而內部行為卻是程式設計師最關心的。軟體視覺化的研究中，
有一個分枝是為了對付程式內部行為，叫 program visualization。但是大部分這一
類的研究[1]發展至今，都僅用於教學用途（如演算法的教學），而無法使用於日
10 
 
五、 xDIVA功能簡介	
xDIVA  主要由除錯器前端  (Minerva 和 Eclipse  &  Microsoft visual studio 
IDE Plugins )  以及視覺化子系統(DIVA)  所組成。 
 
(1)	除錯器前端	 (debugger	front‐end)	
除錯器  (debugger)  是一個複雜的系統程式，通常是伴隨著編譯器一起釋出。
一般而言，編譯器的製造者所釋出的除錯器都是以命令列指令作為輸入，然後將
除錯的結果輸出到螢幕上。不過由於命令列的除錯器並不容易使用，通常整合開
發環境(IDE)  會將命令列的除錯器包裝起來，讓使用者可以用  GUI  的介面與除錯
器進行互動。 
(2)	架構與系統元件	
  xDIVA 是建構在 windows 系統下，xDIVA 的視覺化子系統  DIVA 和其前端處
理器的溝通是透過網路交換訊息，而目前前端系統包含了Minerva 、Eclipse Plugin
和 Microsoft visual studio Plugin，供使用者利用自己適合的開發工具來選
擇 xDIVA 的前端系統 
圖 3是 xDIVA 的架構圖。  其中 DIVA子系統有相當多個重要元件，第一個是
Watched Object Pool Module(WOPM)，wopm儲存所有等待 DIVA視覺化的變數，
指標，和物件。這些資料由其除錯器前端(Minerva或 IDE的 Plugin)取得，當中斷
點改變時會改變其值。前端負責通知程式狀態的改變，有一些複雜的程序在這時
後啟動來確保 wopm和 debugger的資料同步。 
  
	 (4
這個
重組
可單
置換
bas
實做
的個
 
(5)
 
到 D
Dial
 
  
)	Basic	B
在前文中
特性是 xD
的重要特
獨使用，或
。 
在 xDIVA
ic VM)。這些
。由於是程
數越少越
	Mappin
當一個變
IVA。當 D
og  讓使用
   
uilding	
，我們一再
IVA 想要達
質，就是必
與其他的
裡，我們
UBVM 的實
式設計，
好。以物理
g	Engine
數被在除錯
IVA 接收了
者自行決他
 
Blocks	–
地提到合
成視覺化
須滿足自我
元件間互相
將這些最小
做必需要
所以免不了
學的術語
	
器前端中
一個視覺化
要如何組
12 
圖 4  Ma
Ultimate
成性(comp
任意的資料
滿足性(
合作，不
、最基本
基於上一
需要測試
，這有點類
被視覺化之
的要求之
合 VM來視
pping Dialog
	Basic	VM
osability
結構的關
self-cont
過相依元件
的視覺化單
節的 VM pr
與除錯。所
似在找基
後，該變數
後，會跳出
覺化該變
 
	(UBVM
)以及組合
鍵。而元件
ained)。換
間不具耦
位稱為 U
ogramming 
以原則上我
本粒子。 
的資料會
前面所敘
數。 
)	
的基本元件
間要能獲得
言之，元件
合，要可以
BVM(ultim
framework
們希望 U
透過網路傳
述的  Map
 
。
可
須
被
ate 
 來
BVM
遞
ping 
14 
 
六、 研究方法	
xDIVA  在建置初期的目地除了學術研究之外，主要目標為成為程式設計人員
每天使用的除錯視覺化輔助工具。一個從學術界創新而成的軟體工程工具一般的
進展都是由「學術成果」→「學術雛形」→「實用工具」。這其間從一個階段進
展到另外一個階段，所需要投入的人力與資源都很可觀。尤其以學術界的環境，
我們通常以學生作為程式人員，學生除了來去頻率比起業界更為頻繁之外，其素
質往往也不整齊，程式碼的素質也令人憂心，軟体工程問題非常嚴重。作為「學
術成果」有時候只要能夠蒐集足以令人滿意的例子以及實驗，並詳述其設計原理，
就可以進行論文發表。而「學術雛形」，則需要更完整的系統重整與廣泛的測試，
每一項功能都必須要能經得起實測，也就是能夠經的起學術圈研究人員的試用，
但是不足之處尚且可以不負責任。而開放原始碼實用工具除了學術雛形之外，還
要投入更多力氣與資源於系統的使用方便性，好用的介面，支援更多的平台，順
暢的安裝，以及更廣泛的系統測試。以目前的進展而言，xDIVA 的完整度大概還
只介於學術成果與學術雛形之間。畢竟，許多新的功能還是屬於研究問題，必須
探討可能方法之後進行，發現問題，然後修正。我們希望藉由本計畫，將 xDIVA
提升到學術雛形以上的層次，並能夠接近開放原始碼的實用層次。到了這個層次
以後，必定能漸漸吸引全世界開放原始碼的程式人員一起貢獻，享受開放原始碼
資源共享的好處。 
 
 
七、 結果與討論	
xDIVA 目前正朝著實用工具的階段邁進，目前讓 xDIVA 的前端除錯程式以
plugin 的方式支援了主流的 IDE  (Eclipse 和 Microsoft visual studio)，這讓更
多程式開發者能夠使用 xDIVA，此外更以學界和業界合作與試用為目標，讓 xDIVA
可以獲得更多建議和改進方向，同時驗證 xDIVA 的視覺化能力可以滿足各種領域
的程式設計師在除錯上的需求，有了這些經驗和回饋，讓 xDIVA 更加成熟並成為
一個實用工具，不再只是個學術成果。 
現階段的 xDIVA 不但可以將變數視覺化到 3D 世界中，更可以使用 Change 
Animation System 和 Visual Tracepoints產生出動畫來呈現出程式內部的變數變化
的行為。並且加上 Layout 來呈現不同的資料結構或是各領域對於視覺化物件的
排版，讓程式設計師使用適合他們的 Layout加強 Debug的效率。 
總結, xDIVA  的性質雖然屬於創新的研究，但是其最終目的卻是成為程式設
計師的必要工具之一。所以我們在改進與新增  xDiva  的新功能時都得小心翼翼。
將程式暫時寫死，製作出可以發表論文的畫面是輕而易舉可以達到的。但是要能
 八
(1)
不過
ecl
Ecl
Vis
端除
計師
 
行視
時，
者想
JAVA
 
 
 
、 計
 支援	 E
Minerva 
若要讓 x
ipse 以及
ipse 在 o
ual Studio
錯程式已
選用。 
Eclipse Plu
覺化。當
可以點擊
視覺化的
程式語言
畫成果
clipse	與
這個除錯器
DIVA 脫離
 Microsof
pen sourc
 在專業的
經完整以 P
gin可以讓
Eclipse進入
此 Plugin所
變數，xDIV
。 
圖  6 x
自評
	 Micros
前端，在早
學術雛型
t visual s
e 的領域中
軟體開發產
lugin 方式
程式開發者
Debug模
提供的＂
A將會接手
DIVA在 Ec
16 
	
oft	visua
期幫助我
而且開始
tudio 讓
佔了極重
業中也擁
擴充到 Ec
在利用 E
式並觸發
visualize＂
將此變數
lipse的前端
l	studio
們進行必要
拓展到真
Minerva 功
要的地位
有大量的使
lipse 和
clipse進行開
到某個程式
按鈕，並在
繪製到 3D
除錯程式
的測試上
正的程式人
成身退是
。另外一方
用者。如
Visual Stu
發時可以
開發者所
跳出的視
環境中，主
Plugin 
有巨大的貢
員，則支
一條必走的
面 Micros
今 xDIVA 的
dio 供程式
使用 xDIV
設定的中斷
窗中輸入使
要用於除
 
獻。
援 
路。
oft 
前
設
A進
點
用
錯
 (3)
與 C
慮到
面更
Map
糊地
Typ
特定
釐清
xDI
 
 
 Mappin
而在替 xDI
omposite 
使用者的
加直覺，
ping。 
在此，新的
帶，我們
e 進行 Map
的 Class 
對變數做
VA 難以視覺
g	Dialog
VA 更換 GU
Mapping E
學習曲線修
讓程式設
Mapping
設計了一個
ping，此
或是 Data
Mapping 和
化的資料
圖  8  使
	改進	
I Framewo
ditor 進行
正了過去
計師能夠更
邏輯為了釐
全新的 Di
Dialog 與
 Structur
對 Type 做
結構幾乎都
用 QT Fr
18 
rk 的同時
重新設計
的 Mapping
直覺地進
清以往 xD
alog，Typ
Composite
e 製作專屬
Mapping
能迎刃而
amework 的
，我們也將
，除了讓介
 邏輯，讓
行變數、
IVA 在處理
e Mapping
 Mapping 
的 Mappi
邏輯上的不
解。 
Mapping 
原本的 Ma
面更加美
新的 Mapp
型別與 3
變數和型
 Dialog，
Editor 相
ng Node，
同。這項
Dialog 
pping Dia
觀，同時也
ing Dialo
D 物件 VM
別間差異的
來針對變數
似，可以針
如此一來可
改進使得過
log
考
g 介
的
模
的
對
以
去
 
 (5)
寫新
有學
Des
 xDIVA在
隨著基本
的 UBVM
術研究價
ign and Ver
 VLSI 
發人
comp
積體
複雜
軟體
某一
極大
程。通
都是
可以
上使
Comp
特殊應
素材 UBVM
已經可以在
值之外，也
ification＂這
Layout Des
Electronic 
員使用來
uter‐aided
電路基本上
，EDA 這樣
開發人員常
行設置了中
量且複雜的
在這一點上
常 VLSI la
2D 空間的
3D世界中
用。 
 
osite Mapp
用領域的
的逐漸完
短短的時
具有商業
領域有些
ign and Ver
design  aut
設計積體
  design)  或
都是由人
的軟體產業
常要面對
斷點，也讓
資料結構
，xDIVA 就
yout  中的
點所構成
視覺化出該
20 
ing Editor 
 
VM客製
成，在這個
間就完成
的特殊價值
進展及成果
ification 
omation  (E
電路。
者是 CAD
進行  layou
隨之興起
複雜的程式
程式中止
。 
可以展現
積體線路都
。而在 xDIV
對應 poly
with outpu
化	
過程中我們
。客製化這
。目前 xD
。 
DA)  是一系
有時候也
。在這些軟
t。但是隨著
。當開發這
除錯問題
於中斷點
其威力，來
由  polygo
A 中我們也
gons的來供
t port 
累積了不
些應用領域
IVA 已經在
列的軟體
叫做   EC
體工具開
積體電路
些軟體工
。例如，當
，但是程式
加速  EDA
ns  所組成
專門設計
EDA軟體
少的經驗
的 VM，除
＂VLSI La
工具讓硬體
AD  (electr
發出來之前
愈來愈龐大
具時，ED
他們在程式
人員面對的
軟體的除錯
。而  polyg
了一組 UB
工程師在除
 
。撰
了
yout 
開
onic 
，
與
A的
的
是
過
ons 
VM
錯
22 
 
(6) Visual	Tracepoints	
  Visual tracepoints 是開發在 Microsoft visual studio 上的 Plugin，屬
於 xDIVA 除錯器前端的一種。在前文中提到 Change Animation System 是將兩
個中斷點間的資料變化呈現出來，然而 visual tracepoints 希望強化 Visual 
Studio 的 tracepoints，結合 xDIVA 的視覺化能力，進一步用動畫的方式呈現一
連串連續性的資料變化。 
Visual tracepoint 運作方式是讓程式不斷地執行，而當程式執行到一個
Visual tracepoint，前端的 plug-in 子系統會由除錯器取得變數資訊，並更新
給視覺化 DIVA 子系統，使得 DIVA 不斷更新畫面，讓程式人員所關心的變數資訊
的以動畫方式呈現於 DIVA 畫面中。 
然而將Visual tracepoint結合 xDIVA原有的 layout interpolation功能，
我們認為要有這兩部份的支援，有可能真正達到 generic program animation。 
 
 
圖  13 Visual tracepoints 除錯器前端 
 
 (7)
不同
同視
重要
預知
Lay
列。
演算
的開
望在
者使
 Layout
xDIVA 已經
的資料結
覺化的情
的功能，
所有 Layo
out 的演算
 
同時為了考
法，不需
法者，我們
未來讓在
用。 
 
	API	
可以做到將
構或是特定
境使用不同
由於在不同
ut 的種類
法，以 Pl
慮到如何
了解太多 x
在 xDIVA
使用 xDIVA
圖
變數在 3
的領域下
的 Layout
領域會利
，所以 xDI
ugin 的方式
讓設計Lay
DIVA 的細
中提供了許
的使用者
  16尚未套
24 
D 世界中視
，這些 3D
來對 3D 世
用不同的 L
VA 設計了
讓 xDIVA
out的 Pro
節又可以保
多 API 供
一齊擴充 L
用 Binar
 
覺化成相對
物件該如何
界中的 VM
ayout，在
一套架構讓
可以使用此
grammer簡
留相當的
Layout 的
ayout 的數
y Tree La
應的 3D 物
排列是有
進行排版
設計 xDIV
使用者也
演算法來
單且快速
自由度給 L
Programm
量，並開
yout 
件，但是
意義的。在
儼然成為一
A 時無法事
可以自行撰
替 VM 進行
的實作Lay
ayout 演算
er 使用，也
放給其他使
 
在
不
個
先
寫
排
out
法
希
用
26 
 
 
 
 
 
(9) 對於學術研究、國家發展及其他應用方面之貢獻。	
本計畫的研究有助於台灣尖端軟體技術的研究與開發。計畫所完成的軟體工
程工具，可以加速除錯的時程。在學術研究方面，一個具備實用性的創新工具，
將有助於提升台灣在此軟體工程領域的能見度。參與人員可以從這個過程中，瞭
解一個創新的軟體工程工具，如何從概念，設計，實做，最後成為一個實用性的
工具。 
 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/12/23
國科會補助計畫
計畫名稱: 3D軟體除錯視覺化工具xDIVA 之建構
計畫主持人: 鄭永斌
計畫編號: 100-2218-E-008-014- 學門領域: 推動計畫-開放軟體
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
研究成果將改變特定領域之除錯方法與過程。 
另外，本研究成果將完全改變 algorithm animation 領域的研究。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
