二機連續性流程工廠總完工時間最小化之排程問題研究 
Two-machine No-wait Total Completion Time 
Flowshop Scheduling Problem 
 
 
中 文 摘 要 
 
流程工廠(Flowshop)之排程問題可簡單地描述如下，n項獨立工件及 m部不同的機器，每項工件所
經由機器程序均相同，同一時間內，每部機器最多只能針對一項工件進行處理且每項工件僅能在一部機
器上加工，排程重點是決定機器對工件的處理順序，流程工廠之排程問題常見於相同或類似產品之大量
生產系統。 
所謂連續性(No-wait)是指工件進入生產系統中，一旦開始加工就必須持續地進行，直到完工，不允
許工件有閒置或等待的狀況發生。具有連續性限制之排程問題常見於許多產業，例如，在金屬熔融業中，
已加熱之金屬為了防止產生缺陷，在冷卻之前必須持續地在高溫時進行一連串的作業。同樣地，在塑膠
成型及銀製品產業，其一連串作業必須接連立即地進行，以防止溫度下降。 
本研究針對二機流程工廠受連續性加工之限制，以總完工時間(Total Completion Time)最小化為研
究目標，發展一啟發式演算法(Heuristic)與分枝界限演算法(Branch and bound)。啟發式演算法能迅速
且有效地解決大規模之問題，且啟發式演算法之結果亦可應用於分枝界限演算法之上限值。本研究亦將
設計分枝界限演算法之分枝策略、下限值和淘汰法則，以期能有效地求取最佳解。 
    最後，本研究將以大量隨機產生之測試問題，評估所發展之啟發式演算法與分枝界限演算法之求解
績效，分枝界限演算法可有效地求解工件數為 30 以下之問題。 
 
關鍵詞：流程工廠、連續性、總完工時間、分枝界限演算法 
 
 
Abstract 
 
    The flowshop scheduling problem can be stated as follows. There are n independent jobs and m different 
machines. There is restriction on the order in which the operations of a job are to be performed. Each machine 
can process at most one job at a time and each job can be processed on one machine at a time. flowshop 
scheduling are often encountered in mass production systems. 
Scheduling problems with no-wait constraints occur in many industries. For instance, in hot metal rolling 
industries , where the heated metal has to undergo a series of operations at continuously high temperatures 
before it is cooled in order to prevent defects. Similarly , in the plastic molding and silverware production 
 2
最佳值之下限值，將此方法應用至分枝界限
法，以求得Fm | No-wait |∑Ci的最佳解，並且以
6 部機器，12 個工件為例作說明。Rajendran and 
Chaudhuri(1990)【40】以TSP為基礎針對Fm | 
No-wait |∑Ci發展出近似最佳解的啟發式演算
法並改良了Van Deman and Baker (1974)【48】
所發展的下限值，Adiri and Pohoryles (1982)
【1】Panwalkar and Woollam(1980)【37】對Fm 
| No-wait |Ci各機台工件皆依據SPT排序的特
殊情況下提出最佳排序演算法，Adiri and 
Pohoryles(1982)【1】推導最佳化公式並証明當
考慮機器no-idle時，在加工時間連續遞增或是
連續遞減的情況中會與考慮工件no-wait之演
算法相同Aldowaisan and Allahverdi(2004)【5】
針對Fm | No-wait |∑Ci問題，利用Rajendran and 
Chaudhuri(1990)【40】所提出的演算法加以改
良，有效降低平均錯誤率，並比較提出多項啟
發式演算法之求解績效。 
Tariq Aldowaisan* (2001)【4】探討F2 | 
No-wait ,setup times |∑Ci，利用整體(Global)與
局部(Local)淘汰法則在特殊例子情況下有效
改善分枝界限法的求解效率，Aldowaisan and 
Allahverdi(1997)【2】對於F2 | No-wait , setup 
times |∑Ci問題利用淘汰法則針對在特殊問題
推導出最佳解演算法，Shyu et al.(2004)【47】
以Dorigo et al.(1999)【15】和Dorigo et al.(1996)
【 16 】所發展的蟻行演算法 (Ant colony 
optimization)為基礎針對此類型型態做雙機排
程，設計一網路搜尋模式來找尋最佳解，並以
實際例子證明此啟發演算法能快速找出近似
最佳解。 
 
3.研究方法 
    分枝界限演算法是排程中最常被用
來求解最佳解的方法，但求解的過程相當地繁
雜且耗時，而且經常因為限制條件和目標的不
同，需要做不同地設計，藉以提高求解的品質
和效率。本研究所發展的啟發式演算法和分枝
界限演算法，針對所發展演算法的求解過程，
使用 C++語言來撰寫程式，並且與 LINGO 所
得的最佳解進行比較。最後，針對所得之結果
進行分析，進而得到本研究之結論與建議。 
3.1 符號定義 
為了便於介紹後面的數學模式和分枝界
限演算法，首先定義符號，並且進一步地說
明： 
n：總工件數。 
Mj：機器j ,j=1,2。 
Pi,j：工件i於機器j的作業處理時間。 
Si,j：工件i於機器j的開始處理時間。 
TPi：工件i的總處理時間，即TPi＝Pi ,1＋Pi ,2。 
3.2 建立數學模式 
二機連續性流程工廠總完工時間最小化
的排程問題，可用下列之整數規劃的模式來表
示。 
 
 
述整數規劃模式之式(1)為目標函數，即
為本研究所要探討的總完工時間(∑Ci)最小
化，限制式(2)為各項工件經過機器之連續性
限制，限制式(3)與(4)規範工件i和k於M1之處
理順序，限制式(5)與(6)規範工件i和k於M2之
處理順序。其中，M為一極大的數( Big number 
 2
root
1 2 n
…
2 3 n…
2 4 n…
Level 1
Level 2
Level 3
…
 
分枝界限演算法之分枝策略 
     
    假設Sk為一部份排程，其中工件在M1之排
序為{J1, J2, … , Jk-1, Jk}，部分排程Sk可分為四
種類型 ( Type1、Type2、Type3 及Type4 )，其
中，Ik-1= t'－t－Pk-1,1且Ik=Pk-1,2－Pk,1。 
Type1：t'－t－Pk-1,1＞0、且Pk,1＜Pk-1,2如下圖所
示，Ck=t'＋Pk-1,2＋Pk,2。 
Type1 部分排程 
Type2：t'－t－Pk-1,1＞0、且Pk,1＞Pk-1,2如下圖所
示，Ck=t'＋Pk,1＋Pk,2。 
t
k
k
k-1
k-1M1
M2
t＇
Ik-1
Type2部分排程 
Type3：t'－t－Pk-1,1＜0、且Pk,1＜Pk-1,2如下圖所
示，Ck=t＋Pk-1,1＋Pk-1,2＋Pk,2。 
 
Ik
t
k
k
k-1
k-1M1
M2
t＇  
Type3部分排程 
Type4：t'－t－Pk-1,1＜0、且Pk,1＞Pk-1,2如下圖
3.9，Ck=t＋Pk-1,1＋Pk,1＋Pk,2。 
t
k
k
k-1
k-1M1
M2
t＇
Type4 部分排程 
 
上限值 
    上限值可以透過任何的啟發式演算法求
得，但設計良好的上限值(即較小的上限值)
可以在初期的搜尋過程中刪除較多的分枝，增
加裁減分枝的能力，進而提高求解效率。當問
題規模擴大時，上限值之設計對求解品質的影
響相當地顯著。本研究利用所提之啟發式演算
法的最佳解，作為分枝界限法的上限值 
下限值 
    分枝界限法所搜尋的節點數通常十分龐
大，分枝過程中可計算每個節點的下限值，進
而刪除不必要的分枝，故將初始問題放鬆，以
方便並快速計算下限值。 
    針對已決定的部分排程，分枝界限演算法
必須計算未排定之工件所對應的下限值，當下
限值等於或大於已知之上限值時，則刪除該項
分枝。以下針對下限值之計算進行概述： 
步驟一：將未排定的工件列出，分別以機器一
M1與機器二M2的工件加工時間依
SPT法則重新排序所有的作業。 
步驟二：將重新排序後之作業再重新組合成為
新的未排定工件。 
步驟三：依照工件No-wait限制重新計算其完
工時間，此數值為其所對應之下限
值。 
淘汰法則 
淘汰法則是分枝界限法中有效裁減分枝
的重要策略，有效的淘汰法則可以刪除絕大部
分明顯較差的分枝，使得分枝界限法僅需要搜
尋極小部分之區域，便可求得最佳解，。 
    以下針對本研究所設計的淘汰法則作詳
 4
閒置時間若Jj排在Jk之前，如下圖所示。 
k
t
j
j
M1
M2
k
j
j
M1
M2
k
k
t
S 
S'
部分排程Pk,1>Pj,2> Pk,2> Pj,1情形 
法則 3:若Jj與Jk為兩相鄰工件，且滿足Ij=0，
Pk,1>Pj,2、Pk,1>Pj,1、min{Pj,1,Pj,2}>Pk,2，
則在機器M1的加工順序中，Jj優先於
Jk，其中，Ij為Jj之前的閒置時間若Jj排在
Jk之前，如下圖所示。 
 
S'
t
 
S
  
j
j
M1
M2
k
k
t
j
j
M1
M2
k
k
部分排程Pk,1>Pj,2、Pk,1>Pj,1、 
min{Pj,1,Pj,2}>Pk,2情形 
法則 4:若Jj與Jk為兩相鄰工件，且滿足Ij=0，
Pk,2> Pj,2> Pk,1> Pj,1，則在機器M1的加工順序
中，Jj優先於Jk，其中，Ij為Jj之前的閒置時間
若Jj排在Jk之前，如下圖所示。 
 
 
 
S'
  
   
t
  j
 j
M1
M2
  k
 k
 
  
 
  
S
t
j
j
M1
M2
k
k
部分排程P > P > P > P 情形k,2 j,2 k,1 j,1
法則 5:若Jj與Jk為兩相鄰工件，且滿足Ij>0，
Pk,2> Pj,2> Pk,1> Pj,1，則在機器M1的加
工順序中，Jj優先於Jk，其中，Ij為Jj之
前的閒置時間若Jj排在Jk之前，如下圖
所示。 
 
S'
 
  
t
  
  j
 j
M1
M2
 k
  k
 
S
  
  
t
j
j
M1
M2
k
k
部分排程P > P > P > P 情形k,2 j,2 k,1 j,1
法則 6:若Jj與Jk為兩相鄰工件，且滿足Ij>0，
Pk,2>Pj,2、Pk,2>Pj,1、min{ Pj,1, Pj,2} 
>Pk,1，則在機器M1的加工順序中，
Jj優先於Jk，其中，Ij為Jj之前的閒置
時圖所示。 
 
 
t
  
S'
 j
 j
M1
M2
k
 k
   
S
 
 
t
j
j
M1
M2
k
k
 
部分排程Pk,2>Pj,2、Pk,2>Pj,1、 
min{ Pj,1, Pj,2} >Pk,1情形 
其最後整理結果如下圖所示： 
4.實例驗證 
本研究將針對所發展的分枝界限演算法
進行績效評估。為了測試所發展之分枝界限演
算法的求解績效，本研究將隨機產生大量的測
試問題，以徹底瞭解所發展方法之求解績效。
此實例驗證評估的項目包含：(一) 分枝界限
演算法之績效評估 (二) 具有瓶頸機台之求解
法則。  
4.1 分枝界限演算法之績效評估 
分析之內容包括：(1)上限值(UB)及下限值
(LB)之績效評估 (2)分枝界限演算法之求解績
效。 
 6
表:分枝界限演算法之平均節點數 
    上表表示分枝界限演算法之平均節點
數，其中，*表示問題中包含未於限定時間(1
小時)內完成求解之問題，當工件數增加時問
題的困難度就會劇增。如工件數為 30 時，未
於限定時間內完成求解之問題數就變得很
多，而實際之平均節點數比表中所列之平均節
點數要大上好幾倍。因此相較於工件數為 25
時，工件數為 30 之平均節點數產生了異常的
現象。 
4.2 具有瓶頸機台之特例 
特殊案例一 
    當機器一之最小工件加工時間大於或等
於機器二任一工件之加工時間，機器一可稱之
為 瓶 頸 機 台 ， 可 以 用 數 學 模 式
{ } { }2111 maxmin jnjini PP ≤≤≤≤ ≥ 表示，此特例可利
用機器一M1之SPT排序法則求解。如下圖所
示，假設機器一依SPT法則排序所得之順序為
{J1,J2,…,Jn}，以下將推導利用機器M1之SPT法
則可在此特殊例子求得最佳解。 
排程S： 
 
排程S' (對調J1與J2)： 
 
   比較排程S與排程S'，因為P11＜P21，所以
排程S優於排程S'。事實上，當任意二個工件
對調位置時，此結果亦成立，故依機器M1之
SPT法則即可得到最佳工作排序。 
發生瓶頸機台為M1兩工件交換排程表示圖 
特殊案例二 
當機器二之最小工件加工時間大於或等
於機器一之最大工件加工時間，機器二可稱之
為 瓶 頸 機 台 ， 可 用 數 學 模 式
{ } { }1121 maxmin inijnj PP ≤≤≤≤ ≥ 表示，求解此類型問
題可利用以下簡易法則求取最佳解。 
    欲決定第一個加工次序的工件，可利用
Adiri, I. and Pohoryles, D.【1】所提出之式(11)
求得，其中Vj代表M2之SPT排序第j個工件移至
第 1 個排程工件所產生的成本，若欲求第 1 個
位置之工件為何，可將所有工件一一帶入並計
算其交換成本，求取最小的交換成本便可求得
第 1 個位置之工件。 
 
    其中，P[j]1及P[j]2為M2之SPT法則排序中第
j個工件在M1及M2之處理時間，求得第一個位
置之工件後，假設為第r個工件，則最佳之工
件 排 程 順 序 為 {J[r],J[1],J[2],…,J[r-1], 
J[r+1],…,J[n]}。 
5.結論與建議 
5.1 結論 
1.針對二機流程工廠連續性加工之排程問
題所發展之啟發式演算法，無論是求解品質
或求解時間其績效均十分優異。 
2.本研究所發展之下限值策略十分有效，不
僅計算容易，且與最佳值之差距小。 
 8
scheduling in the no-wait flow- shop” 
Journal of Materials Processing Technology, 
Vol.107, pp.459-465 (2000) 
12. Bertrand, M.T., Lin, T.C. Cheng, E., “Batch 
scheduling in the no-wait two-machine 
flowshop to minimize the makespan” 
Computers & Operations Research, Vol.28, 
pp.613-624(2001). 
13. Coffman, E. G., “Computer and Job Shop 
Scheduling” Wiley, New York(1976). 
14. Cheng, E., Chenga, T.C., Liu, Z., 
“Approximability of two-machine no- wait 
flowshop scheduling with availability 
constraints” Operations Research Letters, 
Vol.31, pp.319 - 322(2003). 
15. Dorigo, M., Di Caro, G., & Gambardella, L. 
M., “Ant algorithms for discrete optim- 
ization,” Artificial Life, Vol.5, pp.137– 
172(1999). 
16. Dorigo, M., Maniezzo, V., & Colorni, A., 
“Ant system: optimization by a colony of 
cooperating agents.” IEEE Transactions on 
Systems, Man and Cybernetics: B, Vol.26, 
pp.29–41(1996). 
17. Dileepan, P., “A note on minimizing 
maximum lateness in a two-machine no-wait 
flowshop” Computers & Operations 
Research, Vol.31, pp.2111–2115(2004). 
18. Dutta, S.K., and Cunningham, A.A., 
“ Sequencing two-machine flow shops with 
finite intermediate storage,” Mgmt.Sci, Vol. 
21,pp.989-996 (1975). 
19. Espinouse, M.L., Formanowicz, P.,  Penz, 
B., “Minimizing the Makespan in the 
Two-Machine No-Wait Flow-Shop with 
Limited Machine Availability” Computers & 
Industrial Engineering, Vol.37, pp.497- 
500(2001). 
20. Gilmore, P. C., and Gomory, R. E., 
“Sequencing a one state-variable machine：A 
solvable case of the traveling salesman 
problem ,” Opns. Res., Vol.12, pp.655-679 
(1964). 
21. Gupta, J. N. D.,“Optimal flow shop 
schedules with no intermediate storage 
space,” Naval Res. Logistics Quarterly, 
Vol.23, pp.235-243 (1976). 
22. Garey, M. R., and Johnson, D. S., “A guide 
to the theory of NP -completeness.” 
Computers and intractability, Freeman ,San 
Francisco (1979). 
23. Gonzalez, T., “Unit execution time shop 
problems,” Math.O.R., Vol.7, pp.57-66 
(1982). 
24. GuoqingWang, T.C., Cheng, E., “Heuristics 
for two-machine no-wait flowshop 
scheduling with an availability constraint” 
Information Processing Letters,Vol.80, 
pp.305–309(2001). 
25. Hall, N. G., Kamoun, H., and Sriskandrajah, 
C., “Scheduling in robotic cells：classifi- 
cation, two and three machine cells,” 
Opns.Res., to appear (1996). 
26. Johnson, S. M., “Optimal two-and three- 
stage production schedules with setup times 
included,” Naval Res. Logistics Quarterly, 
No.1, pp.61-68 (1954). 
27. Jack A. A., Veen, V. D., and Dal, R. V., 
“Solvable Case of the No-wait Flow-shop 
Scheduling Problem”Journal of the 
Operational Research Society, Vol.42, No. 
11 .pp.971-980(1991). 
28. Jeffrey, B., Sidney, Potts, Chris N., 
Sriskandarajah, C., “ A heuristic for 
scheduling two-machine No-wait flow shops 
with anticipatory setups, ” Operations 
Research Letters,26, pp.165-173 (2000). 
29. Kamoun, H., Hall, N.G., and Sriskandrajah, 
C., “Scheduling in robotic  cells：Heuristics 
and cell design ,” Working Paper 93-08, 
 10
flowshop with no intermediate queues,” 
AIIE Trans., No.6, pp.28-34  (1974). 
 
 
49. Wu, J., Srikanthan, T., “An efficient data 
structure for branch and bound 
algorithm ”Information Sciences xxx (2004) 
 
 
 
 xxx–xxx  
 50. 陳柏秀，「二機連續性開放工廠總時程最
小化排程問題之研究」，碩士論文，朝陽
科技大學工業工程與管理研究所，台中
(2003). 
 
 
 
 
51. 詹詠翔，「二機連續性零工工廠總時程最
小化排程問題之研究」，碩士論文，朝陽
科技大學工業工程與管理研究所，台中
(2004). 
 
 
 
 
  
  
  
  
  
  
  
  
  
  
  
  
 
 
 
 
 
 
 
 
 
 
 
 
 12
