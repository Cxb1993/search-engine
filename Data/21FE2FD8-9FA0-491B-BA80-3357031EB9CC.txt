 行政院國家科學委員會補助專題研究計畫 
■成果報告   
□期中進度報告 
 
多核心嵌入式軟體之模型驅動整合開發環境-VMC-- 
子計畫二: 支援多核心嵌入式軟體設計之多重觀點整合模型與可再
用元件庫 
 
計畫類別：□個別型計畫   ■整合型計畫 
計畫編號： NSC 99－2220－E－029－002、 NSC 98－2220－E－029－002 
執行期間：98 年 8 月 1 日至 100 年 7 月 31 日 
 
執行機構及系所：東海大學 資訊工程系 
 
計畫主持人：朱正忠 
計畫參與人員：何畯豪、林朝聖(NSC 99－2220－E－164－001) 
              何畯豪、林介中(NSC 98－2220－E－164－001) 
 
成果報告類型(依經費核定清單規定繳交)：□精簡報告  ■完整報告 
 
本計畫除繳交成果報告外，另須繳交以下出國心得報告： 
□赴國外出差或研習心得報告 
□赴大陸地區出差或研習心得報告 
■出席國際學術會議心得報告 
□國際合作研究計畫國外研究報告 
 
 
處理方式：除列管計畫及下列情形者外，得立即公開查詢 
□涉及專利或其他智慧財產權，□一年□二年後可公開查詢 
 
中   華   民   國  100 年 9 月 5 日 
  
(Capability Maturity Model Integration, CMMI)相
關之訓練課程及評鑑之補助，教育部也同時推動
軟體工程之相關課程之改善，期許產業在軟體技
術及工程之提昇。過去幾年我們也看到許多產業
亦願意投入經費及資源來改善其軟體品質的相關
活動，例如導入能力成熟度整合模型(Capability 
Maturity Model Integration, CMMI)來提昇團隊之
服務品質及團隊的成熟度。 
軟體工程之相關議題，從軟體生命週期的各個
階段衍生出來，包括需求分析、系統設計，到軟
體開發、驗證、測詴，直到最後的維護。這些議
題能獲得突破，才能帶來新的進步。過去幾年，
軟體再利用(Reuse)、可擴展標記語言(Extensible 
Markup Language)、設計樣板(Design Pattern)及以
元 件 為 基 礎 的 軟 體 工 程 (Component-Based 
Software Engineering) 及 服 務 導 向 架 構
(Service-Oriented Architecture)等相關技術相繼提
出，目的都是希望提高軟體系統開發及維護的效
率。舉例來說，再利用的技術是將過去經驗裡好
的元件保留下來，讓工程師用來解決相關的問題，
提高開發的效率。 
有鑑於軟體在本質上具有高度的彈性，當不同
公司與不同團隊採用各別的方法、Models 及 Data 
Schema 描述方式，便會造成進行軟體開發
(Development)、整合(Integration)、再利用(Reuse)
時的極大困難，最後導致軟體整體開發時的耗費
人工、低效率、高價格等不利現象不斷出現。這
些軟體開發上可能發生的問題，於是引發專家學
者探討如何提供一個標準的機制與架構方法及整
合 Model，能夠整合現有的各種公認的標準於整
個軟體開發過程之中，達到整體軟體生命週期的
標準化與自動化。同時，也將伴隨增進軟體開發
時程更容易掌握，開發風險與開發成本的降低等
等所帶來之附加價值。 
從軟體工程的角度看待嵌入式軟體開發，整個
嵌入式軟體生命週期包括硬體發展、韌體和驅動
程式移植(Porting)、OS 選用及搭配、中介軟體於
OS 上驗證、品質評估、系統層級測詴等階段。目
前嵌入式軟體的實際開發流程，尚未落實統一塑
模與軟體驗證，意即只有極少數的嵌入式軟體專
案能確實在專案早期進行塑模來輔助設計，同時
軟體驗證也因較看重硬體驗證被忽略。這種情況
不僅發生在歐美，在中國與台灣也有這種現象。
仔細分析問題，可發現目前尚無完整且符合嵌入
式系統開發特性的軟體開發程序是一個重要的原
因。本計劃的重心在於如何才能提供一套適當的
流程管理及開發整合工具，來達到嵌入式系統
(Embedded System)開發的品質及效率。 
近幾年來，有感於目前在嵌入式系統開發流程
(Software Process)是屬於土法煉鋼型，在每一個階
段(Phase)，並無科學量化的標準，所以當開發時
雖然看似容易做到，卻因為沒有一套標準存在，
且階段之前也無連貫及整合的考量機制存在，因
而浪費許多時間在整合及驗證上。本計劃希望能
從需求分析 (Requirement Analysis)、規劃設計
(Design) 、 實 作 (Implementation) 一 直 到 測 詴
(Testing)、維護(Maintenance)各階段來建置一套標
準一致且完整的標準流程，並且使用重用(Reuse)
技術，減少往後嵌入式系統開發之時程。 
2. 研究目的 
軟體的生命週期一般而言包含了需求、設計、
實作、測詴及維護五個階段，在這些階段裡可以
利用許多的軟體標準以降低軟體開發本身的複雜
度。然而當我們使用某個標準於某階段時所造成
的改變，可能會帶來其他階段所使用的標準也連
帶的需要作改變的問題。在整個軟體開發週期裡，
開發團隊裡的成員會根據特殊的需求或個人的經
驗法則導入不同的軟體標準。但是所引發的結果
卻是標準與標準之間的不相容(Incompatibility)，
這樣的結果往往會帶來許多問題，若使用的軟體
輔助開發系統工具互相整合有難處，彼此間無協
調整合機制，所帶來的不確定因素讓開發者之發
展環境持續在改變而使其無所適從，軟體開發方
法、軟體開發流程與軟體輔助開發工具無法相互
整合，以致於不能發揮整體功效。軟體的開發與
維護相當的不易，也因此至目前為止已有許多的
組織及相關領域的專家制定並提出了軟體標準，
其目的就是提昇軟體的品質。但沒有一種軟體標
準及模型可以涵蓋軟體開發過程中的每個階段，
因此我們必須要開發一套專屬於嵌入式系統的軟
體工程方法來處理上述可能發生的問題。 
綜觀目前整個嵌入式系統軟體設計方面各個
階段之間的關係，在整合技術方面並無一套標準
步驟以及應用的工具，會在開發的過程中將會產
生許多不必要的成本，就有可能導致產出功能與
原始需求不盡相同的產品仍勉強上架。並且也須
考慮到跨各階段間的連續性與一致性，往往以人
規則和功能，使用完整定義的語法和語義讓電腦
可以自動解譯，由於只是一種抽象的描述檔，所
以在不涉及開發技術與系統運作平臺下可以將問
題描述的更為明確，此階段主要是描述如何解決
企業運作的問題，最常見的方法是以統一塑模語
言（Unified Modeling Language, UML）來完成此
階段的塑模。 
2. 特定平臺模型特定平臺模型（Platform Specific 
Model, PSM）：PSM 是將上一階段PIM產生的檔
轉換成使用者指定平臺；相對於PIM，此階段是
相依於特定平臺技術，如有關於SQL Server的PIM
就轉換為相對應技術，像是"Table"、"Primary Key"
等相關pattern，都在此階段進行轉換。 
3. 轉換程式模型轉換程式模型（Generating the 
Application）：產生程式碼（Generating the 
Application），因為上一階段PSM已經轉換為使用
者指定的技術平臺，所以此階段只需根據PSM的
相關檔案轉換為程式碼即可。 
3.2 統一塑模語言(Unified Modeling Language, 
UML) 
統一塑模語言(UML)[3]是一種 Modeling 
Language，結合了 G. Booch，J. Rambaugh，與 I. 
Jacobson 三人的物件導向方法論所提出的一種物
件導向語言，並被 OMG 納入為標準。UML 結合
了 Booch 的物件導向方法、Rambaugh 的物件塑模
技術與 Jacobson 的物件導向軟體工程，目前 UML 
已成了一種通用的物件導向語言(Object Oriented 
Language)，廣為被應用在各類系統的描述及設計
上，成為一種溝通設計理念的語言，除了主導廠
商 Rational 的推廣及擴展之外，其他為數眾多的
廠商及研究單位也利用 UML 做為表達設計或研
究成果的語言。在軟體工程中，UML 已被應用在
相關的研究中，譬如：Software Architecture、
Framework、Patterns、Software Process。應用在
其他領域如：Real-Time System、Embedded System
以及 Workflow。 
雖然 UML 被應用在許多領域，同時也被視為
是塑模的重要工具，但 UML 的使用往往過於彈性
而缺乏嚴謹，導致需求分析與系統設計的模型容
易產生不完整及不一致性[4]。然而不只 UML，包
含所有現有的模型建置技術都必須要有一個正規
化的方式以達成軟體開發與維護過程中軟體模型
的高度整合性，目前 OMG 亦發現這個問題，訂
定了 Diagram Interchange 標準[5]，不過僅限於
UML 相關的圖形轉換，對於整合其他標準或非圖
形塑模方式，尚未支援。 
3.3 XML 與 XMI 
XML是由World Wide Web Consortium (W3C)
所制定的標準[6]，一種延伸式的標記語言，具有
擴展性(Extensibility)、結構性(Structure)、描述性
(Description)、確認性(Validation)等特性。同時
XML具有跨平台的功能，對於不同的作業系統、
硬體設備、應用軟體、多元的輸入模式，開發者
可以自行制定符合己身需求的標記(Tag)，做結構
性的描述，促使相同的一份文件呈現不同的規格，
適用於不同的軟體，符合不同的設備、滿足多重
的輸入方式。 
XML 本身就是一種 Meta Language，可利用
XML 定義各種 Model 的文件語言，在進行各種
Model 轉換時可以利用 XML 延伸出的 XMI 來幫
助檔的交換及存取。XMI 是 XML Metadata 
Interchange 的縮寫，在 XMI 裡 X 代表 XML 跟
extensible 雙重意義。XMI 在 1999 年 3 月 23 日正
式被 W3C 所建議為正式標準。 
XMI[7]是一種提供以 XML 來交換 Object- 
Oriented Models 和資料的標準，XMI 同時是 OMG 
(Object Management Group)所認可的一種新的標
準，讓使用者可以根據 XMI 的標準標籤(Tag)將
UML文件轉換為XML及DTD文件。XMI讓XML
使用起來更加的容易，因為它應用了 UML 圖形化
的特性來產生 XML 所需的文件及 DTD 檔。而且
XMI 讓 DTD 檔、軟體設計及 XML 檔資料可以一
致。 
3.4 原生 XML 資料庫(Native XML Database) 
 原生XML資料庫[8]是以XML文件最為基本
的儲存單位，有別於關聯式資料庫是以表格最為
部模型(Intra-Model)一致性，意指在相同抽象層級
中不同的模型間應該保持一致性，例如類別圖、
循序圖以及狀態圖彼此之間應該保持一致。 
演化一致性(Evolution Consistency)：驗證不
同版本的相同模型應保持一致性。 
語意的一致性(Semantic Consistency)：在
UML的Metamodel中，語意的意義應該被驗證。 
語法的一致性(Syntactic Consistency)：在
UML的Metamodel中，UML模型的規格應該被驗
證。 
在本計畫中，我們利用XUM的理論，達到
UML垂直與水平的一致性，整合使用案例圖(Use 
Case Diagram)、類別圖(Class Diagram)、狀態圖
(State Machine)、循序圖(Sequence Diagram)等模型，
這四種圖型最被常用來描述系統的不同觀點，因
此優先被探討。 
4.2 整合模型 XUM 
UML可以描述系統不同面向的靜態與動態觀
點，但本身並未定義彼此之間的關聯，在過往的
研究當中探討了不同的UML模型間的關聯性
[12][13][14][15][16][17][18]，可以歸納如圖2，系
統的描述由使用案例開始，表明了系統的功能面
向和使用者與其之關係，再更進一步的細化設計
則利用類別圖顯示系統的靜態觀點，當某個類別
圖的邏輯過於複雜時，狀態的轉移可能分散在不
同的使用案例中，則由狀態圖針對事件以及狀態
做統一的描述，而循序圖分別可以描述使用案例
以及類別圖的動態觀點，以進行驗證，最後這些
模型會產生明確的程式碼去實作。 
 
圖2 UML 之間的關聯 
為了建立模型之間的追蹤性，我們運用 XML
的標準建立整合模型，記錄必要的模型資訊，在
模型驅動的架構下，目前的 UML 模型資訊都以
XMI 的標準進行儲存，以圖形交換(Diagram 
Interchange)的格式記錄圖形的名稱、位置、關係、
大小等圖形化的資訊，所以要建立完整的整合模
型，必須從這兩個標準的檔案中取得相關的資訊。
圖 3 顯示類別圖在 XMI 格式下的表示方式，以
packaged Element 的標籤記錄不同的 UML 模型，
包含 xmi:type 用來識別此 UML 的類型，另外具
有唯一的識別 ID 和此類別的名稱。而類別所在的
圖形名稱則是從圖形交換的格式中獲取，如圖 4
所示，在樹狀結構的最上層包含類別所在的圖形
名稱，而樹狀結構內，可以找出符合相同 ID 之屬
性值。 
圖3 XMI中類別的描述 
圖4  圖形交換格式的描述 
當我們從上述的兩種標準獲取相關的資訊時，
即可將需要的資訊寫入至整合模型之中，是 XUM
整合模型中類別圖的定義，分別從 XMI 的檔案中
取得類別的 ID、名稱以及來源的檔案，並寫入指
定的屬性，從圖形交換格式取得此類別所屬的圖
形名稱，另外定義三種不同的鏈結記錄與其他
UML 的關聯性。 
在每一種模型的表示下，定義了整合關係
(Unification Link)，整合關係是用以整合各階段相
關產出物的機制。其中包含了抽象鏈結
(Abstraction Link)、整合鏈結(Integration Link)與程
式碼鏈結(Source Code Link)，如圖 5 定義了抽象
鏈結，包含了幾個屬性，分別是此鏈結的 ID、來
源的圖形名稱以及類型、指向的圖形名稱以及類
型、此鏈結的建立是否由使用者所決定和此鏈結
建立的時間。 
 圖10 從程式碼中擷取出的資訊 
4.3 模型相似度比對 
在資訊檢索中，常見有幾種方法來量測文字
的相似度，包含 Jaccard Coefficient、Bleu 
Coefficient、Dice Coefficient 等方法。在本計畫中
利用文字相似度比對的方法來進行軟體產出物的
比對，找出可能不一致的部分，發現潛在的錯誤，
更能進一步建議使用者建立可能的關聯性，Dice 
Coefficient 在過往的研究顯示其成效較不受出現
次數多寡的影響，且計算簡單[19]，因此在本計畫
中被使用，定義式 1 所示： 
 
式1  
nx 代表字串 X 的雙元字串(Bigram)數目，ny
代表字串 Y 的雙元字串數目，nt 則是分別出現在
X 與 Y 字串的雙元字串數目，計算的結果會出現
介於 0 到 1 之間的值，分別代表完全不同與完全
相似。以類別圖與原始碼的類別名稱比對為例，
表 2 顯示幾個不同計算區間的結果，套用 Dice 
Coefficient 的計算，除了有量化的數值依據，更可
以省去對於文字比對所需要做的前置處理，例如
字串的切割等，能夠找出潛在的相同或是相似名
稱之軟體產出物，另一方面當使用者寫入錯誤之
名稱時，也有利於校正，在本計畫的系統中，我
們預設比對顯示的結果是大於 0.5 小於 1 之間，
以避免使用者得到過多不必要之資訊。 
表2 類別圖與原始碼類別名稱的文字相似度比對 
 
類別圖 原始碼類別名稱 相似度 
ConnectionServ ConnectionServer 0.92 
Connection 0.81 
CnnServ 0.52 
Server 0.33 
Quantization 0.25 
StreamingServ 0.24 
Camera 0.11 
HuffStatistics 0.07 
4.4 可再用元件庫 
針對各相關功能進行模組化之關聯性探討、模
組分析與設計、整合分析、原型發展後，設計一
套具轉換性質的平台。 
我們設定的再使用元件庫為一 XML 資料庫，
其中的再使用軟體元件(Reusable Components，
RC)，是蒐集程式的知識並產生原始述語(Primitive 
Predicate)，我們用來替 Reusable Components 建立
正規化的知識，使其成為正規化軟體元件(FRC)
及定義相關之推理規則，並將程式 Artifacts 及
FRC 存入相對的 Reuse Component Library 中，藉
由搜尋樹產生 Artifacts，正規化之再使用元件
(Formal Reusable Components, FRC)，然後儲存至
再使用程式庫中，並以一有效率的元件存取機具
(Library Retrieving Tool, LRT)，提供後續擷取所
需。 
此系統另外其中包含了二個組件： 
4.4.1再使用程式庫和資料庫擷取協尋工具(Reuse 
Library and Library Retrieving Tool，LRT) 
使用元件程式庫(Reuse Library)是用來存放
處理中或處理後的再使用元件。 
我們透過OO觀念，配合XML資料庫使用
QUERY語法索引，目標是呈現一套使用者透明化、
低維護需求、組織良好之軟體再使用元件高效能
資料庫與資料管理系統。可提供使用者與系統工
具間對軟體再使用元件之增減修改等等操作，可
作為讓各階段各工具存取資訊之中間儲放所。 
資料庫擷取協尋工具(LRT)，它的作用在於提供一
套正規化的元件擷取(Retrieving)協助方式，經由
述語編碼的量化資訊，將使用者所需要的元件搜
尋出來。 
在 XUM 的檔案建立後雙擊此檔案，Eclipse
的環境會根據此副檔名開啟對應的編輯器或是工
具列按鈕，如圖 14，本系統包含了編輯器、觀點
等功能，在首次開啟時，其內容並無任何資料存
在，使用者必須藉由點擊 Model Checking 的按鈕，
進行分析，系統會抓取在此專案目錄下，所有.uml
與.di2 的檔案並儲存至資料庫內，再進一步寫入
部分必要之資訊以及彼此之關聯到 XUM 的檔案
中。 
 
圖14 系統執行畫面 
在模型分析完成後，編輯器會自動更新資料，
如圖 15 所示，左邊的樹狀結構顯示所有的 UML
項目，點擊其中任一項目，在右邊的上方表格顯
示與此名稱一致之項目，右邊的下方表格，則是
利用相似度比對，找出可能潛在結果，使用者可
以在右下方的表格，透過勾選 Checkbox 進行確認。
另外，考量到使用者可能需要進行手動變更的需
求，使用者也可以透過 Add 的按鈕自行手動加入
相關連性的項目，透過 Remove 的按鈕將不相關
的項目移除，如圖 16 所示。 
 
圖15 模型的關聯 
 
 
圖16 手動修改關聯 
系統分析模型的過程中，所發生的事件會自
動的記錄下來，如圖 17 所示，由 Link Event 的
View 去顯示。使用者可以搜尋或是排序特定的欄
位，來獲取不同的訊息，如圖 18，使用者經由搜
尋 From: Type 的欄位，了解所有 Use case 與其他
UML 模型間的關係。 
 
圖17 Link Event View 
 
圖18 搜尋特定 Link Event 欄位 
Zhu,” Agent-And Aspect-Oriented Software 
Development And Evolution”International 
Journal of Computer Application in 
Technology.(EI). Vol. 31, Nov. 1/2, 2008 
8. C.H. Chang, C.W. Lu, C.W. Chu, Y.W. Chen, 
R.E. Ger "A SysML-based System 
Requirement Modeling Process" accepted by 
the 3rd Information Education and 
Technological Applications Conference, 
Taichung, Taiwan, November 6, 2009 
 
9. C.H. Shih, C.T. Wu, C.Y. Lin, P.A. Hsiung, N.L. 
Hsueh, C.H. Chang, C.S. Koong and C.W. Chu, 
"A Model-Driven Multicore Software 
Development Environment for Embedded 
System," to appear by the 3th IEEE 
International Workshop on Quality Oriented 
Reuse of Software(QUORS 2009), Washington, 
USA, July 20-24, 2009 
10. Y.W. Chen, J.J. Chen, C.H. Chang and C.W. 
Chu, " Prototyping Software Development with 
UI Modeling Adaption," to appear by the Fifth 
Taiwan Conference on Software Engineering, 
Taipei, Taiwan, June 19-20, 2009 
11. Y.W. Chen, J.J. Chen, C.H. Chang and C.W. 
Chu, "User Requirement Modeling Process 
using SysML," to appear by the Fifth Taiwan 
Conference on Software Engineering, Taipei, 
Taiwan, June 19-20, 2009 
 
7. 參考文獻 
[1]. J. D. Poole, "Model-Driven Architecture: 
Vision, Standards And Emerging Technologies", 
Proceedings of the European Conference on 
Object-Oriented Programming, 2001. 
[2]. R. Soley and the OMG Staff Strategy Group, 
"Model Driven Architecture", Object 
Management Group White Paper Draft 3.2 – 
November 27, 2000. 
[3]. OMG, "Unified Modeling Language: 
Superstructure", Version 2.3, 2010. 
[4]. R.H. Bourdeau and B.H.C. Cheng, "A Formal 
Semantics for Object Model Diagrams", IEEE 
Transitions on Software Engineering, Vol.21, 
No.10, pp.799-821, 1995. 
[5]. OMG, "UML 2.0 Diagram Interchange 
Specification", Version 1.0, 2006 
[6]. Holland I.M. “The design and representation of 
object-oriented components.” PhD thesis, 
Northeastern University. Retrieved March 20, 
1996 from 
http://www.ccs.neu.edu/home/lieber/theses-inde
x.html 
[7]. XML Metadata Interchange (XMI) Version 
2.1.1, 
[8]. X. M. Yang and H. Dai, "Native XML Database 
design and realization based on MDA", 
Proceedings of the 2nd IEEE International 
Conference on Information Management and 
Engineering, pp.738-741, 2010. 
[9]. V. Rijsbergen and C. Joost, Information 
Retrieval, Butterworths, pp.24-25, 1979. 
[10]. T. Mens, R. V. D. Straeten and J. Simmonds, "A 
Framework for Managing Consistency of 
Evolving UML Models", Software Evolution 
with UML and XML, chapter 1. Idea Group 
Inc., pp. 1-31, 2005. 
[11]. R. V. D. Straeten, "Inconsistency Management 
in Model-Driven Engineering (An Approach 
using Description Logics) ", PhD thesis, 
Department of Computer Science, Vrije 
Universiteit Brussel, Belgium, 2005. 
[12]. A. Egyed, "Scalable Consistency Checking 
between Diagrams – The VIEWINTEGRA 
Approach", Proceedings of the 16th IEEE 
International Conference on Automated 
Software Engineering, pp. 387-390, 2001. 
[13]. C. Lu, W.C. Chu, C. Chang, D. Yang,  and W. 
Lian, "Integrating Diverse Paradigms in 
Evolution and Maintenance by an XML-Based 
Unified Model", Journal of Software 
Maintenance, Vol.15, No.3, pp.111-114, 2003. 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/31
國科會補助計畫
計畫名稱: 子計畫二:支援多核心嵌入式軟體設計之多重觀點整合模型與可再用元件庫
(VMC_MUM)(2/2)
計畫主持人: 朱正忠
計畫編號: 99-2220-E-029-002- 學門領域: 自由軟體暨嵌入式系統
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
