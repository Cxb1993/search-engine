行政院國家科學委員會補助專題研究成果報告 
 
智慧型分散式最佳化系統之設計 
A design of intelligent distributed optimization system 
 
計畫編號：NSC 94－2213－E－150－017 
執行期限：94年 8月 1日至 95年 7月 31日 
主持人：胡念祖 助理教授 
執行機構及單位名稱：國立虎尾科技大學資訊管理系 
E-mail:drhu@nfu.edu.tw 
 
一、中文摘要 
傳統的非線性最佳化求解過程往往是費時且不易得到最佳解。但隨著電腦科技的進
步，使得個人電腦的運算速度大幅提升而且成本也降低很多。因此，本研究目的在運用網
格運算的精神，將週遭閒置的個人電腦經由網際網路加以整合，透過一部主機來自動控制
各可用電腦的計算與資訊的傳遞。整合目前的網路技術 Grid computing, Web Service, 
AJAX(Asynchronous Java and XML)等技術，發展一套可分散處理最佳化運算的基本平台。
藉由本平台，可以指定非線性規劃問題(nonlinear programming problems)於待命的個人
電腦進行求解。求解過程中會隨時將最新的過程送至資料庫並顯示於主網頁上。如此，便
能夠掌握各電腦的即時求解進度並可瞭解題目的特性。 
關鍵詞：非線性規劃、網路服務、網格運算 
 
Abstract: 
The solving process of conventional nonlinear programming is not only a time-consuming 
work, but also hard to obtain the optimal solution. However, the advanced improvements of 
computer technology not only boosted the computational performance but also reduced the cost. 
Therefore, this study tries to integrate the available personal computers on Internet to construct 
the grid-computing environment. And, we develop a basically distributed optimization platform 
by adopting the advantages of Grid computing, Web Service, AJAX and so on. Nonlinear 
programming problems can be solved on assigned PC. Whole solving process can be dynamically 
enumerated on the main web pages through the database server. Moreover, the properties of 
problems can be retrieved by monitoring the real-time progress on all computers. 
Keywords: Nonlinear programming, Web Service, Grid computing 
 
 
 
 
 
 
 
由於網際網路技術的發達，許多功能已逐漸發展至 Web介面，如目前所盛行的
Web 2.0。 傳統的單機或網路的程式都可以移植到 Web上；其優點是可以透過 Web 
Service的開放界面與 XML的標準交換格式，來將程式包裝成元件並開放給被授權
的使用者。如此一來，便可成為網格運算的基本平台。其中的 UDDI 是一個目錄服
務，可讓使用者查詢指定的主機上有那些可使用的 Web Service。WDSL 則是描述該
服務的運作方式。本研究則運用 Web Service 發展二個元件，詳細的說明請參照如
後的說明。 
 
2. Asynchronous Java and XML 
傳統的 Postback 是大部份網頁間傳遞資料的方法，但 Postback最大的缺點是
相當耗費系統與網路的資源，而影響與使用者互動的方便性。AJAX在 1998提出，
並且在這 Google 使用後大幅提升其效能與使用介面的親和性，也讓這個技術更受
矚目。本系統則是運用 AJAX 將使用者的需求傳回系統，並將即時的解題情形(如
iteration, objective value, feasibility 等)顯示於網頁上。 
 
3. Grid computing 
目前個人電腦的運算速度比起以往的大型電腦都不遜色，加上價格便宜，相當
適合用來求解複雜的問題，而網格運算則是將閒罝的電腦運算能力加以整合的最佳
方案。因此，本研究以網格運算為主，設計一個主控端與被控端。主控端只要包含
入口首頁、並從資料庫抓取可供求解的問題類型，並自動判別週遭可供連線的電腦
狀態，由使用者所指定的被控端求解問題。而被控端則是接受使用者的問題後，運
用所指定的方法來求解，並除了回傳最後的結果之外，也會將即使的解題情形傳至
資料庫，供主控端來抓取。如圖 2. 
 
4. Asynchronous procedure call 
在一般的程式中呼叫 Web Service時，必須等待該元件執行完畢傳回結果後才
會繼續。但如此一來，會導致許多等待的空窗期；而且各被控端可獨立運算的優勢
就受到影響。因此將 Asynchronous procedure call 的機制導入本系統。除了可以
讓各被控端同時運算之後，主控制也能夠不必等待被控端的回傳而處理其他的程
序。 
 
5. Database Server 
在本研究架構中，資料庫系統扮演相當重要的角色。除了儲存使用者登入的帳號密
碼的資料，還包含預先儲存的非線性規劃的問題內容與暫存各被控端即時的處理進
度。不但能提供所需的資料，也能夠可以減少主控端與被控端的資料傳遞量。 
 
6. Integration with Nonlinear Solver 
一些現成的套裝軟體，如 Lingo, CPlex 都有提供高效率的解題模組。雖然不一定能
獲得最佳解，但卻能提供好的參考解。因此，本系統將整合這類的求解引擎來提升
效率。 
2. Piecewise Linearization [7][8][9] 
在本研究中將採用 Piecewise Linearization 來求得最佳解。因為 Piecewise 
Linearization 會使用相當多的二元變數，所以速度會受到影響。因此，本研究將採
用以下二個方法來改善效率。 
以一個 Signomial 的問題如下：  
Minimize pmpp
pmp
p p
pppp xxxczcSP
 21 2
1 1
1 
 
  (1) 
subject to 
kqmq
q
qkq
q
kqkq lxxxhgh
kqmkqkq 

 21 2
1
1
1
, k = 1,2,…,r, 
iii xxx   (i=1,…,m); ix 與 ix  是 ix 的上下界; pc , pi , kqh , kqi , kl  是常數且
沒有限制; ix  是連續變數。 
則可被轉成 convex 問題如下 (令 y = ex): 
Minimize )()()( yyy   fff  (2) 
subject to rkggg kkk ,,1  ,0)()()( 

yyy  
niyyy Uji
L
j ,,1   ,   
where  






Pp
y
p
m
i
ipi
ecf 1)(

y , 






Pp
y
p
n
i
ipi
ecf 1)(

y  
rkehg
k
N
i
ikqi
Qq
y
kqk ,,1  ,)(
1 

 





y  
rkehg
k
N
i
ikqi
Qq
y
kqk ,,1  ,)(
1 

 





y  
)ln()ln(    , ),,,( 21 iiin xyxyyy  y  
}0|{  pp ccP , }0|{ 

pp ccP  
3. Decomposition 
本研究為了充份整合週遭可用的閒置電腦，因此將原本的問題加以拆解成小問題並
依序分配到各被控端。如此也得以減少各次解題所需的時間。原問題可由以下的方
式來切割： 
Minimize )()()( yyy   ffSPl  (3) 
subject to rkggg kkk ,,1  ,0)()()( 

yyy  
njyyy ji
L
j ,,1   ,
0  ,   njyyy Ujij ,,1   ,
0   
 圖 5、問題選擇/修改畫面 
 
圖 6、系統求解畫面 
 
 
 
 
 
 
 
