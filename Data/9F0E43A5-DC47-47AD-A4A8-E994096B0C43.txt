在行動式隨意網路中使用特徵辨識之最佳競爭協議之探討 
 
計畫主持人：江茂綸 
共同主持人：  
計畫參與人員：陳彥儒、金建邦、劉淑珍 
 
摘 要 
為了達成分散式系統的可靠度，容錯是需要被注意的議題。這類的系統通常需要在一些處理
單元發生錯誤的情況下，還可以共同協議出一個決策。而在此容錯系統中，拜占庭協議 Byzantine 
Agreement (BA)是一項非常需要被注意的重要議題。一般來說，拜占庭協議在傳統的網路結構中
已有顯著研究成果。然而，隨意式網路架構 MANETs (Mobile Ad-hoc NETwork)愈來愈受到重視及
歡迎，因此，本計畫書將在此網路架構下檢視並探討拜占庭協議問題。本計畫將提出一個新奇且
有效率的競爭協議協定，在行動隨意式網路中使用最少的訊息交換在來達成最大的容錯力。     
關鍵字：拜占庭協議、分散式系統、容錯、一致性、行動隨意式網路。 
 
 
Abstract Reliability is an important research topic of distributed systems. To achieve fault-tolerance in 
the distributed systems, healthy processors need to reach a common agreement before performing 
certain special tasks, even if faults exist in many circumstances. This problem is called as the Byzantine 
Agreement (BA) problem and it must be addressed. In general, the traditional BA problem is solved in 
well-defined networks. However, the MANETs (Mobile Ad-hoc NETwork) are increasing in popularity 
and its network topology is dynamic in nature. In this paper, the BA problem is re-examined in 
MANETs. Our protocol uses the minimum number of message exchanges to reach an agreement within 
the distributed system while tolerating the maximum number of faulty processors in MANETs. 
Keywords-Byzantine Agreement; Distributed System; Fault-tolerant; Consensus; Mobile Ad-hoc Network 
 II
(4). An arbitrary faulty processor is chosen as a source, and its initial value is broadcasted to other 
processors and to itself to execute the protocol. 
In general, a healthy source processor sends the same values to all processors and arbitrary 
processors cannot affect the root values sent from the healthy source processor. However, the source 
processor, which has arbitrary faults, may transmit different values to different processors. This situation 
is the worst case of the BA problem and is worth discussing. Therefore, we assume the source processor 
is an arbitrary processor in (4).  
Besides, various protocols for the BA problem have been developed in order to meet the following 
requirements [1,4,5,7,9,16,18,19]: 
 (BA1) Agreement: All healthy processors agree on a common value v. 
 (BA2) Validity: If the initial value of the source is vs and the source is healthy, then all healthy 
processors shall agree on the value vs; i.e., v = vs. 
Under these assumptions and requirements, several protocols [1,4,5,7,9,16,18,19] have been 
proposed for solving such problems. The protocol in Lamport et al. [7] indicates that fp+1 (fp ≤ ⎣(k-1)/3⎦) 
rounds (a round denotes the interval of message exchange) of message exchange are required to reach a 
common agreement in a synchronous fully connected network with k processors. Further, Fischer and 
Lynch [5] point out that fp+1 rounds are the minimum number of rounds needed for sufficient messages 
to achieve BA. 
As the network technology continues to grow at a high rate of speed, traditional network topology 
is improved with wireless topology such as Mobile Ad-hoc NETwork (MANETs). MANETs, consisting 
of wireless processors that communicate with each other in the absence of a fixed infrastructure, is 
different from the traditional network structures [1,7]. 
MANETs can be used flexibly and quickly in automated battlefields, disaster relief, and rescue. In 
general, each mobile processor can communicate with another within its own wireless transmission 
range. The mobile processor sends the message to the destination processor located outside its wireless 
transmission range by forwarding it via another mobile processor. Its topology, as shown in Figure 1, 
can be modeled as a unit-disk graph [2,6] according to the strength of transmission power. 
 
 
 2
 2.  The Basic Assumption of MANETs 
MANETs have enjoyed an amazing rise in popularity. MANETs requires no infrastructure due to its 
dynamic nature. Therefore, previous research [2,13,14,15,17] has proposed the concept of a virtual 
backbone to organize MANETs. To build a virtual backbone, the processors in MANETs can be 
classified into gateway or non-gateway processors. In this gateway/non-gateway model, the gateway 
processors can organize the entire network and forward messages for non-gateway processors. Namely, 
the source processor can forward its message to one of its adjacent gateway processors when the source 
processor is not also a gateway processor. Subsequently, the gateway processor acts as the new source 
processor to route the message to another gateway processor. Finally, the destination gateway processor 
forwards this message to the destination processor directly. 
The main advantage of the gateway/non-gateway model of virtual backbones is that the routing 
process is simplified to gateway processors. Namely, only gateway processors need to account for the 
routing table and the search space of routing path is reduced to itself. Furthermore, non-gateway 
processors can change their status to sleep mode to conserve their battery power. Therefore, the 
gateway/non-gateway model is being adapted for use as a virtual backbone in MANETs. We review 
some of the popular virtual backbone construction algorithms as follows: 
The Connected Dominating Set (CDS) algorithm was proposed by Wu and Li [17] to build the 
virtual backbone of MANET. CDS-based routing is related to the concept of dominating in graph theory 
[13,17]. A subset of vertices of a graph is a dominating set if every vertex not in the subset is adjacent to 
at least one vertex in the subset. Therefore, the processors of the dominating set should be connected to 
build the path of communication. 
Their algorithm consists of a marking phase and a re-marking phase. The marking phase is a 
localized algorithm [17] that marks every vertex in a given connected and simple graph G = (V, E). Let 
m(v) be a marker for v∈V, which is either T (marked) or F (unmarked). Let N(v) = {u|{v,u}∈E} 
represent the open neighboring set of processor v (i.e., v∉N(v)). The N[v] = N(v)∪{v} represents the 
closed neighboring set of vertex v (i.e., v∈N[v]). The marking phase assigns a marker F to every v in V 
initially and then every v exchanges its open neighboring set N(v) with all its neighbors. Every v assigns 
its marker m(v) to T if there are two unconnected neighbors.  
After this marking phase, the set V’ of vertices that are marked T in V is obtained, i.e., V’ = {v|v∈ 
V, m(v)=T} and G’ is the subgraph induced by all processors with marker T. According to the marking 
phase, the initial CDS is constructed as the backbone of MANETs. The initial CDS subset consists of 
 4
(4). When a processor immigrates into a new region, it needs to send a probe message to the gateway 
processor of this region to register its id. 
(5). Each gateway processor knows total number of gateway processors and the number of non-gateway 
processors in its group. 
(6). Each non-gateway (gateway) processor cannot know the total number of processors in MANETs. 
(7). When a gateway processor of a region needs to change into a non-gateway processor, each processor 
can elect a new gateway processor by the replication technique (Backup or candidate gateway 
processors) [6,17]. 
Due to Fischer et al. [5] found that the BA problem could not achieve consensus in an asynchronous 
network even if only one processor has failed, and the failure is a crash failure. Therefore, the BA 
problem is considered in a synchronous network in this paper. We also assume that the bounds on the 
processing and communication delays of healthy components are finite [4]. The parameters in this 
synchronous MANETs are assumed as follows: 
(1). G: The total number of gateway processors in a MANET. 
(2). n: The total number of non-gateway processors in a MANET. 
(3). ni: The total number of processors in group i. 
(4). Si The source processor i, and S∈G∪n.  
(5). di: The decision value of gateway processor i. 
(6). Signsk(di): The gateway processor i signs its decision value di by using its signing key sk. 
(7). Vk: the vector in processor k. 
(8). vs: The initial value of processor s broadcasts to all other processors.  
(9). val(α): The collected values at vertex α. 
(10). LMAJi: The majority value of processor i collected from the non-gateway processors. 
(11). MATi: the gateway processor i collects all received vectors from other processors.  
(12). ג: The value of dormant faulty processors. 
(13). c: The connectivity of MANETs. Based on the Menger theorem [3], at least c disjoint paths need to 
exist between any pairs of processor A and B when the connectivity of the network is c. 
(14). Gpa: The number of gateway processors with an arbitrary fault. 
(15). Gpd: The number of gateway processors with a dormant fault. 
(16). npa: The number of non-gateway processors with an arbitrary fault. 
(17). npd: The number of non-gateway processors with d dormant fault. 
(18). Φ: The default value, and Φ∈{0, 1}. 
 6
each gateway processor in MANETs needs to broadcast its package Signsk(di) to all gateway processors 
in a broadcasting agreement process. This package contains its id and its decision value obtained from 
the decision making phase of the consensus agreement process.  
During the broadcasting agreement process, each gateway processor has a set of decision values 
and forwards these to its members in the same region. Subsequently, each healthy non-gateway processor 
can obtain a common value by taking a majority of these. 
The last part, the maintenance function, is used to handle the mobility of processors. Conceptually, 
each processor has unrestricted mobility; it may immigrate into the network or emigrate away from the 
network at any time. Therefore, the movements of processors must be heeded. Thus, processor 
movement is discussed in the next section. 
Due to the mobility of processors, the number of required rounds of message exchange may not be 
an inherent value from the outset, but it is expected and required that at most fp+1 (fp ≤ ⎣(k-1)/3⎦) rounds 
of message exchange occur to reach a common value as proposed by Fischer et al. [5], at any time. Due 
to each processor does not know the movement of other processors in MANETs. For obtaining the 
expected number of rounds, each gateway processor acts in an important role to manage the movement 
of non-gateway processors in MANETs. Based on our virtual backbone, only gateway processors need to 
heed the total number of gateway processors in MANETs to determine the required rounds of message 
exchange. The main advantage of our virtual backbone is that the movement of non-gateway processors 
cannot influence on the number of rounds of required message exchange. Before an example is 
illustrated, the following relevant information is given. 
3.1 The Number of Required Rounds for GCAP is Predictable in MANETs 
In general, the BA/consensus problem needs fp+1 (fp ≤ ⎣(k-1)/3⎦) rounds of message exchange to be 
solved. Fischer et al. [5], and Bar-Noy et al. [1], proved that fp+1 rounds of message exchange are the 
necessary and sufficient lower bound for agreement problems. However, while processors may migrate 
at any time, they lack for messages sent from the previous rounds. Based on the CDS virtual backbone, 
the gateway processors can regulate the movement of non-gateway processors and retransmit messages 
on demand. Therefore, the number of required rounds can be predicted in MANETs and follows the 
result of the protocol proposed by Bar-Noy et al. [1]. For example, assume there are 25 processors in 
MANETs; 5 gateway processors, and 20 non-gateway processors. In that case the GCAP must execute σ 
(≤⎣(G-1)/3⎦+1) = ⎣(5-1)/3⎦+1 = 2 rounds of message exchange. If the total number of the gateway 
processors in MANETs is changed to 7, the GCAP will need σ ≤ 3 (⎣(7-1)/3⎦+1=3) rounds of message 
exchange. Thus, the rounds of message exchange of GCAP conform to the previous results [1]. 
 8
 
Figure 3. A 15-processor MANET. 
 
Figure 4. The two-layer hierarchy structure of Figure 3 
 
 
3.3 The LMAJ Function, MAT Function, ic-tree(Ti), and VOTE Function as Used by GCAP 
At first, the source processor broadcasts its initial value to others and to itself. Each gateway 
processor must forward this message to its members. Subsequently, each gateway processor must collect 
the message from non-gateway processors in a group agreement process. Each gateway processor takes 
a local majority LMAJ(α) on collected values of vertex α and stores it as its new initial value as shown 
in Figure 5(a). The majority value is replaced by complement of val(α) when the majority value does 
not exist. Subsequently, the consensus agreement process is to be invoked. 
In the consensus agreement process, each gateway processor broadcasts its value to all gateway 
processors. When a healthy gateway processor receives these values from other gateway processors, it 
will store them in its vertex Vi (1<i<G). Then, each gateway processor broadcasts its vertex again and 
constructs MATi(1<i<G). The details of MATi are shown in Figure 5(b). Subsequently, each gateway 
processor exchanges its messages repeatedly until round σ. Eventually, a convenient tree structure, 
ic-tree (a information collection tree structure, Ti) will be constructed by taking the local majority of 
each row k of MATi for each round as shown in Figure 5(c). The vertices with repeated names of 
 10
 
Figure 5(c). The ic-tree (Ti.) 
 
 1. val(α), if α is a leaf. 
VOTE(α)=
2. The majority value in 
the set of {VOTE(αi)|1 
≤i≤G, and vertex αi is a 
child of vertex α}, if 
such majority values 
exists. 
 3. A default value φ is 
chosen, otherwise. 
Figure 5(d). The function VOTE. 
Figure 5. The functions of protocol GCAP. 
 
4 Protocol GCAP 
In this section, the protocol GCAP is introduced to solve the BA/consensus problem in MANETs. 
GCAP can tolerate (⎣(G-1-Gpd)/3⎦) + [(∑⎣(ni-1-npd)/2⎦)-(Gpa+Gpd)] faulty processors and requires (σ) 
rounds of message exchange to reach an agreement. Namely, all healthy processors can reach an 
agreement under a MANET environment where (⎣(G-1-Gpd)/3⎦) + [(∑⎣(ni-1-npd)/2⎦)-(Gpa+Gpd)] faulty 
 12
processors, construct MATi for each round. 
For σ> 2, do: 
4) Broadcast the MATi-1 to other gateway processrs, and receive the MATi-1 sent by 
other gateway processors to construct the MATi for each round. 
Decision Making Phase: 
Step 1: Take the local majority on each MATi of each round and construct a corresponding 
ic-tree Ti. If vki (for each row k of MATi) = λ, then vki is ignored by the local 
majority. 
Step 2: Using function VOTE to root of each processor’s ic-tree Ti and common value, 
VOTE(s) is obtained. 
Broadcasting Agreement Process: 
1) Each gateway processor broadcasts its signature Signsk(di) on the decision value di 
to all non-gateway processors. After receiving Signsk(di) and di, each non-gateway 
processor verify the signature by using the corresponding verifying key. 
2) Each healthy non-gateway processor decides a common value by using function 
LMAJ. 
Maintenance Function: 
Before the message exchange state: 
1) Processors immigrate: 
         If the new processor has initial value vs from the source, then it sends 
messages to its gateway processor directly 
         Else it broadcasts a request for initial value vs. 
2) Processors move exit: (what mean = migrate??) The gateway processor deletes this 
absent non-gateway processor from its routing table. 
Between the message exchange and decision making state: 
1) Processors immigrate: 
1. The new processor broadcasts the request for initial value vs to its region and 
takes majority of received initial value (vsi, …, vsn |1≤i≤n) from other processors, 
sequent it send this majority value to its gateway processor. 
2. The gateway processor takes a majority value of this new initial value and 
previous values. 
If the new majority value equals the previous majority value, then gateway 
processor does nothing. 
Else the gateway processor resends its message to other gateway processors. 
2) Processors move exit: The gateway processor deletes an absent non-gateway 
processor from its routing table. 
After the decision making state: 
1) Processors immigrate: 
The new processor broadcasts a request for a decision value to all processors in its 
region, sequent takes majority value of received decision value (di, …, dn |1≤i≤n) as its 
decision value. 
2) Processors move exit: The gateway processor deletes an absent non-gateway 
processor from its routing table. 
Figure 6. the GCAP protocol 
 
 
 14
decision making state, and after the decision making state. The details of this procedure in GCAP are 
showing as Figure 7. 
 
Figure 7. The procedure of GCAP. 
 
The most serious effect of these states relates to the between message exchange and decision 
making state. The main of work of this state is exchanging messages and preparing to make a decision; 
thus the fate of new message may be changed. When the new processor immigrates into a new region, 
the new processor must broadcast the request for initial value vs via other processors. The gateway 
processor must calculate a majority value from this new initial value and previous values. Subsequently, 
the gateway processor must decide whether it needs to resend the messages to other gateway processors 
or to do nothing. When a processor emigrates away its region, the gateway processor just needs to delete 
the processor from its membership and ignore its message. 
 
5 Example of Execution  
In this section, two examples are shown to illustrate the GCAP protocol. The first example 
illustrates how GCAP facilitates the healthy processors achieving agreement when a new processor 
immigrates into a new region. The processor moving away from its region will be shown as the second 
example. 
 16
processor. Subsequently, the new processor p takes the majority value of the received values and sends 
it to gateway processor a. If the new majority value is equal to previous majority values, then gateway 
processor a does nothing. Otherwise, gateway processor a changes its value in the (σ-1)th of its vector 
and resends to others. 
Continuously, each gateway processor broadcasts its value to other gateway processors in the 
second round. Due to the protocol GCAP only requiring σ = ⎣(5-1)/3⎦+1 = 2 rounds of message 
exchange, thus the message exchange is stopped. Figure 8(h) shows the results of gateway processor a 
in the message exchange phase of consensus agreement process. The common result of gateway 
processors is shown as Figure 8(i), and it is equal to that of other healthy gateway processors. 
Subsequently, we take the local majority of each MATi of each round to construct a corresponding 
ic-tree Ti and use the function VOTE to the root of each processor’s ic-tree Ti in Figure 8(j) and 8(k) to 
make a decision value. Eventually, the common value (“0”) of gateway processors can be reached if the 
number of faulty gateway processors is less than or equal to (⎣(G-1-Gpd)/3⎦). 
During next process, each gateway processor broadcasts its signature Signsk(di) on the decision 
value di to all non-gateway processors, as shown in Figure 8(l). Then, each non-gateway processor can 
use the corresponding verification key to verify the signature and make a common decision by using the 
LMAJ function if the number of faulty non-gateway processors in a group is less than or equal to 
⎣(ni-1-npd)/2⎦. Therefore, the healthy processors in protocol GCAP can reach consensus in a MANET 
environment where (⎣(G-1-Gpd)/3⎦) + [(∑⎣(ni-1-npd)/2⎦) - (Gpa+Gpd)] faulty processors exist. 
 
Furthermore, the processors may emigrate out of MANETs. In our virtual backbone structure, 
mobility of processors can be solved easily. This is because gateway processors can control and manage 
the activity of non-gateway processors. Figure 9 shows how GCAP can make each healthy processor 
reach an agreement in MANETs when processors emigrate out of MANETs. There are 18 processors 
containing 5 gateway processors and 13 non-gateway processors in MANETs; such an environment 
requires σ = ⎣(5-1)/3⎦+1 = 2 rounds during the message exchange phase. In Figure 9, we show all 
necessary steps to execute GCAP on the healthy gateway processor e when processors emigrate out of 
the MANETs. 
We assume the source processor h as an arbitrarily faulty processor, and the original environment is 
shown as Figure 9(a). The source processor h first broadcasts its initial value to all processors. Due to 
the source processor being an arbitrary faulty processor, each processor may obtain a different initial 
value. In Figure 9(b), the source processor h sends to all gateway processors a, b, c, d, and e being 1, 0, 
 18
 
Figure 8(c). The results of the group agreement process. 
 
Figure 8(d). The result of processor a executing the first round of message exchange. 
 
Figure 8(e). The vector received from gateway processors in the first round of consensus agreement process. 
 20
process. 
 
Figure 8(i). The result of all gateway processors executing the second round of the message exchange phase in consensus 
agreement process. 
 
Figure 8(j). The ic-tree of gateway processor a. 
 
Figure 8(k). The result of gateway processor a in the decision making phase of consensus agreement process. 
 22
 
Figure 9(c). The result of processor e executing the first round of message exchange phase in consensus agreement process. 
 
Figure 9(d). The processor q leaves region E between the message exchange and decision marking states. 
 
Figure 9(e). The decision value of gateway processor e in the decision making phase of consensus agreement process. 
Figure 9. The procedures of GCAP when processors leave the MANETs. 
 
 
6 The Correctness and Complexity of GCAP  
The following proofs for the agreement and validity are given in this section that the BA problem 
needs to meet. The lemmas and theorems are used to prove the correctness and complexity of GCAP. 
6.1 Correctness of GCAP  
In this section, we prove the correctness of GCAP if the number of faulty processors does not 
 24
definition of correct vertex, a common frontier does exist in the ic-tree. Namely, the root can be proven 
to be a common vertex (BA1’) due to the existence of a common frontier, regardless of the correctness of 
a source processor. Based on reasoning above, an agreement among the root values is reached. 
Subsequently, we will check the condition of (BA2’). Based on (BA2’), we know that when the 
source processor fails, the (BA2’) is true. This is because the propositional logic PÆQ indicates (NOT(P) 
OR Q), then (NOT(P) OR Q) or (PÆQ) is true when P is false; where P implies “the source processor is 
healthy” and (PÆQ) implies BA2’. Conversely, root s is a correct vertex by the definition of a correct 
vertex if the source processor is healthy. If all correct vertices’ true values can be computed by GCAP, 
then the true value of the root on ic-tree can be computed because the root is a correct vertex. By 
definition, the true value of the root is the initial value of the source processor if the source processor is 
healthy. Namely, each healthy processor’s root value is the initial value of the source processor; if the 
source processor is healthy, then BA2’ is true when the source processor is healthy. In short, the 
BA1’and BA2’ are both tree whether the source processor is healthy or fails, the consensus/BA problem 
is solved. 
Lemma 1. Messages sent through dormant faulty components can be detected by healthy destination 
processors. 
Proof. The healthy destination processor can detect the message(s) from dormant faulty components if 
the protocol appropriately encodes a transmitted message by using either the Non-Return-to-Zero code 
or the Manchester code [6] before transmission.□ 
Theorem 1. The destination processor can receive messages free of influence from faulty components 
existing between the sending processor via virtual backbone in each round if c > Gpa + Gpd. 
Proof. By Lemma 1, we can remove the influence of dormant faulty components between any pair of 
processors in each round of message exchange; and we can rule out the influence of the arbitrarily faulty 
components between any pairs of processors in each round of message exchange if c > Gpa + Gpd. This 
is because the healthy sending processor sends c copies of a message to healthy destination processors. 
In the worst case, a healthy destination processor can receive c- Gpd messages transmitted by the healthy 
sending processor because dormant faulty components can be detected [6] and c - Gpd > Gpa. Therefore, 
a healthy destination processor can decide which the correct messages are by taking into account the 
majority value.□ 
Lemma 2. A healthy destination processor can detect a dormant faulty sending processor by means of 
the forwarding technique uses in the gateway/non-gateway model.  
Proof. If the number of value λ is greater than or equal to c - ⎣(G-1)/3⎦, then the sending processor 
 26
processors, if the initial value of the source is vs, say v=vs. Since most of processors are healthy, they 
transmit the message to all others. As a result, each of the correct vertices of the ic-tree is common 
(Lemma 3), and its true value is v. By Theorem 3, this root is common. The computed value VOTE(s) = 
v is stored in the root for all healthy processors. (Validity’) is satisfied.□ 
6.2 Complexity of GCAP 
The complexity of GCAP is judged in terms of: (1) the minimal number of rounds, (2) the 
maximum number of allowable faulty components, and (3) the number of exchanged messages. 
Theorem 5. GCAP requires σ rounds to solve the consensus/BA problem by dual failure mode 
(containing arbitrary and dormant faults) in MANETs if G>⎣(G-1)/3⎦+2 Gpa + Gpd and c>2 Gpa + Gpd, 
where Gpa ≤⎣(G-1)/3⎦, and Gpa+1 (σ) are the minimum number of rounds of message exchange. 
Proof. Due to the fact that message passing is required in the message exchange phase, it is very 
time-consuming. Fischer and Lynch [5] pointed out that fp+1 (fp ≤ ⎣(k-1)/3⎦) rounds are the minimum 
number of rounds needed to obtain enough messages to achieve consensus/BA. The unit utilized by 
Fischer and Lynch [5] is the processor, so the number of required rounds of message exchange in 
MANETs is σ (σ≤ ⎣(G-1)/3⎦+1). Thus, GCAP requires σ rounds and this number is the minimum.□ 
Theorem 6. The total number of allowable faulty components by GCAP is Gpa + npa arbitrarily faulty 
processors and Gpd+ npd dormant faulty processors, where G>[(G-1)/3]+2Gpa + Gpd, n >2npa + npd, and 
c>2 Gpa + Gpd. 
Proof. According to the constraints of the BA problem for processors which was proposed by Siu et al. 
[12]. In this study, we use gateway processors to substitute the unit of Siu et al., thus the constraints in 
our protocol are G > [(G-1)/3] + 2Gpa + Gpd, c > 2Gpa+Gpd.. Furthermore, our protocol can tolerate 
other faulty non-gateway processors in MANETs. The number of allowable faulty non-gateway 
processors is (∑⎣(ni-1-npd)/2⎦) if n > 2npa + npd. This is because each healthy non-gateway processor in 
each group can send  messages to healthy gateway processors. In worst case, the 
gateway processor may receive (⎣(ni-1-npd)/2⎦) wrong messages from arbitrary non-gateway processors. 
It is clear that  is larger than (⎣(ni-1-npd)/2⎦) even if dormant processors do exist. So 
the total number of allowable faulty components by GCAP is Gpa + npa arbitrarily faulty processors and 
Gpd + npd dormant faulty processors, which reach a maximum if G>[(G-1)/3]+2 Gpa + Gpd, n >2 npa + 
npd, and c>2 Gpa + Gpd.□ 
⎡ )2/)(( dnpn −
⎡ ⎤)2/)dnp
⎤
(( n −
Theorem 7. The number of message exchanges of GCAP is minimal and the computational complexity 
of each round is O(n+G) 2. 
 28
Meyer et al. [9], Siu et al. [12], and Wang et al. [16] can meet the requirements of consensus/BA, but all 
of them need 34 (⎣(100-1)/3⎦+1) rounds of message exchange to reach consensus. However, there are 7 
rounds of message exchange in our GCAP protocol (⎣(20-1)/3⎦+1). If the capabilities of gateway 
processors are improved, they can handle more non-gateway processors. In that case, the number of 
rounds of message exchange can be decreased rapidly. Therefore, the proposed protocol is more 
efficient than the others [7,12,9,16]. The comparison of various protocols used in different environment 
is shown in Table 1. 
Table 1. The comparison of various protocols 
 
 
In the future, we will consider the faults found in transmission links in MANETs. This is because 
that each processor in MANETs can communicate with one another directly when they exist within their 
transmission range. A processor sends its message to a destination processor located outside its wireless 
transmission range by forwarding it via another mobile processor. Therefore, the failure of the 
transmission link may occur at any time.  
References 
[1] Bar-Noy A, Dolev D, Dwork C, Strong R. Shifting gears: changing algorithms on the fly to 
expedite Byzantine agreement. Information and Computation 1992; 97(2): 205-233. 
[2] Bharghavan V, Das B. Routing in ad hoc networks using minimum connected dominating sets. In: 
Proc. Int. Conference on Communications ’97, Montreal, Canada; June 1977, pp. 376-380. 
[3] Deo N. Graph theory with applications to engineering and computer science. Prentice-Hall, 
Englewood Cliffs, NJ; 1974. 
[4] Dolev D, Reischuk R. Bounds on information exchange for Byzantine agreement. Journal of ACM 
1985; 32(1): 191-204. 
[5] Fischer M. The consensus problem in unreliable distributed systems (A Brief Survey). Technical 
report, Department of Computer Science, Yale University, 2000. 
 30
無研發成果推廣資料 
