2 
 
中文摘要 
本計畫之目標為發展三維電腦繪圖之系統晶片，此系統晶片以具有及時效能/功
率監控的高效率可程式化三維電腦繪圖晶片系統為研究目標，在第一年執行計畫
裡，本團隊透過系統模型的建立，對軟硬體整合進行評估與分析，並針對軟硬體
系統整合，提出系統晶片的驗證方法，此為第一年計畫的執行。第二年的研究計
畫延續第一年的研究成果與規劃，並完成目標之實現：主要以建立軟硬體整合的
分析工具以加速系統晶片的除錯時程，並建立系統晶片的即時效能分析工具，以
即時效能分析為基礎，另外建立電子系統層級模組來評估系統晶片功率的消耗，
以達成低功率輸出的目標，以及整合晶片的驗證方法，並規劃晶片的測試機制。
第三年的研究計畫主要以(1)QEMU-SystemC平台的建置，利用軟體的方式模擬實
際硬體在FPGA上的行為，以增加軟硬體之間的整合速度，(2)三維電腦繪圖晶片
在虹晶(Socle)科技之MDK-FPGA上完成之整合驗證，為加速在整合與驗證時的
效率以及增加各IP之使用率，整合了工業標準化之(3)OCP-IP可擴充性介面於三
維圖形晶片系統中。以上所提及之三大主題(Topic)將於報告中逐一呈現與介紹： 
 Topic 1：QEMU-SystemC Abstraction Level Design and Verification Mechanism  
 Topic 2：FPGA Prototyping of the 3D Graphic SoC 
 Topic 3：OCP-AHB Bus Interface for 3D Graphic SoC Integration   
(各章節之研究動機、目的、方法、預定完成之工作項目與預期之貢獻將分別於
各章節中敘述) 
 
關鍵詞：三維圖形系統晶片、效能監控、耗能監控、系統晶片驗證、系統晶片除
錯、電子系統層級模組 
 
 
 
 
 
 
 
 
 
 
 
 
4 
 
目    錄 
中文摘要............................................................2 
Abstract............................................................3 
Topic 1：QEMU-SystemC Abstraction Level Design and Verification Mechanism  
Topic 2：FPGA Prototyping of the 3D Graphic SoC.......................... 
Topic 3：OCP-AHB Bus Interface for 3D Graphic SoC Integration............. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
6 
 
 
圖 1-2 軟、硬體透過 multiple abstraction levels co-design
架構圖 
 為了建立 QEMU-SystemC 平台，我們修改了 QEMU 的 source code，新增
了 IO socket 的裝置如圖 1-3，並撰寫其驅動程式來使用此 IO socket，當軟體在
存取此 IO socket 時，會認為它正在使用的是我們 3D Graphic 的硬體，而我們也
另外在 SystemC 這端新增了一個 SystemC TCP/IP model 來將我們由 QEMU 傳送
的資料如圖 1-4，轉成 SystemC model 中所使用的硬體信號，並且也能透過此
TCP/IP model，來將 3D Graphic 硬體所需傳回的信號，像是 IRQ signal，傳回
QEMU 端，讓 QEMU 模擬出來的 CPU 認為真的有 IRQ 訊號發出，進而呼叫到
我們的驅動程式內部的 IRQ handler，完成整個軟/硬體流程。 
 
圖 1-3 包含 IO socket 的 QEMU virtual platform 
8 
 
Topic 2：FPGA Prototyping of the 3D Graphic SoC 
隨著晶片設計越趨複雜之際，我們要如何針對晶片有效率的驗證，在計劃的
現階段中我們以 3DG SoC 為例，提出一個由 System Modeling Level 到 Chip 
Level 的均一化驗證方法，以期能夠快速驗證整個系統，達到 Time-to-Market 的
目的。而藉由實際上整合以及驗證我們的 3DG SoC，也能夠使我們的驗證方法
更切實際，而非僅是理論上而無實際運用的方法。在本計劃中，我們提出的均一
化驗證方法的主要三個概念分別為 Platform Consistent、Test Pattern Reuse、
Automatic Verification Mechanism。而基於這三個概念，我們將驗證樣本提升到
Program Level 的層次，進而達到在不同抽象層次的驗證環境都可以使用相同的
驗證樣本。此外，我們也使用高階的程式語言來撰寫我們的測試樣本，例如 C 語
言，如此一來，面對複雜的系統級晶片，我們便可以專心於功能性的驗證，而不
必像過去傳統的驗證方法必須考慮每一個時脈週期訊號的變化，減少驗證上所需
花費的寶貴時間。同時，我們也提出自動化驗證機制，當硬體有所修改時，此機
制能夠快速執行驗證並自動比對其結果，以達到成功驗證 3DG SoC 的任務。 
晶片整合暨驗證進度 
在本計劃中的硬體整合部分，除了將原本系統晶片上的繪圖硬體（如
Geometry Module, GM 和 Rendering Module, RM）以及部分匯流排上的觀測元件
（如 Bus Tracer 和 Protocol Checker）的版本更新之外，此外，並整合了嵌入式處
理器（Embedded Core）到系統中，以提供另一種的系統運作流程和設定機制，
如圖 2-1 即展示該計劃中系統晶片的硬體架構以及驗證環境。 
 
圖 2-1 3DG SoC Architecture and Verification Environment 
10 
 
 
 
               圖 2-2 Beethoven benchmark 
 
 
                      圖 2-3 Cube benchmark 
 
 
                      圖 2-4 Elephant benchmark 
12 
 
Name W Driver Function
Clk 1 B Clock input
EnableClk 1 B Enable OCP clock
MAdder 32(V) M Transfer address
MCmd 3 M Transfer command
MData 32(V) M Write data
MDataValid 1 M Write data valid
MRespAccept 1 M Master accepts response
SCmdAccept 1 S Slave accepts transfer
SData 32(V) S Read data
SDataAccept 1 S Slave accepts write data
SResp 2 S Transfer response
MBurstLength V M Burst length
MBurstPrecise 1 M Given burst length is precise
MBurstSeq 3 M Address sequence of burst
MBurstSingleReq 1 M Burst uses single request/ multiple data 
protocol
MDataLast 1 M Last write data in burst
MReqLast 1 M Last request in burst
SRespLast 1 S Last response in burst  
表格 3- 1 OCP Basic Signals 
對於核心而言除了專心於自身 IP 的設計以外，為了相容於 OCP 必須滿足下列件: 
1 核心必須至少有一個 OCP 介面 
2 核心和 OCP 介面必須一個用 RTL 來描述的組態檔案 
3 在核心上的每一個介面必須: 
 符合所有 OCP 介面的規範事項 
 有它的用於合成設定所描述的時序 
當 IP 做為 master 角色時，必須連接一組 OCP-AHB Master Interface 作為
Master 與 Bus 之間的轉換界面，底下是 OCP 與 AHB 在做資訊交換時，訊號所
做的對應關係，圖 3-1 為 OCP-AHB Master Interface 之訊號對應之關係圖，左邊
為 OCP 之訊號與 OCP Master 相連接，右邊則為 AHB 之訊號與 AHB Bus 相連接，
master interface 會根據 OCP master 所發出的一些命令轉換成 AHB 的 protocol 發
送至 bus 上，另外也會從 bus 接受 slave 的一些 response，轉換成 OCP 之訊號傳
給 OCP Master 做為一個兩邊同步機制的傳輸介面。 
14 
 
 
圖 3-3 OCP-AHB Master Interface FSM 
 
圖 3-4 OCP-AHB Slave Interface FSM 
當設計好 OCP-AHB interface 以後，接下來就進入驗證的步驟，利用目前 3D 
Graphic SoC 的環境來驗證 OCP-AHB Interface 的正確性，如圖 3-5 所示，OCP 
Master 和 OCP Slave 分別透過 OCP-AHB Master Interface 以及 OCP-AHB Slave 
Interface 掛載到 AHB Bus 的環境上進行驗證，而驗證的環境與 3D Graphic SoC
驗證環境一樣同為 RTL-SystemC co-simultaion 之環境，故驗證所需要的 C 程式、
Golden Result 皆與 3D Graphic Soc 驗證時相同，所以可以達到測試環境與測試檔
案重複使用的概念。 
出席國際學術會議心得報告 
                                                             
計畫編號 NSC 98-2220-E-110-002- 
計畫名稱 有即時效能/功率監控功能的高效率可程式化三維電腦繪圖晶片系統：軟硬體開發及整合－子計畫ㄧ系統晶片整合與分析(3/3) 
出國人員姓名 
服務機關及職稱 
賴俊宏 
國立中山大學資訊工程學系/博士生 
會議時間地點 Jun. 13-18, 2010  美國加州阿那漢(Anaheim) 
會議名稱 
中文：2010 ACM/IEEE 設計自動化研討會 
英文： 2010 ACM/IEEE Design Automation Conference Workshop on 
Diagnostic Services in Network-on-Chips - 4th Edition 
發表論文題目 
中文：用於單晶片系統發展之多重解析 AXI匯流排資料追蹤器 
英文：An Embedded AXI Bus Tracer with Dynamic Multi-Resolution and 
Real-Time Compression 
 
一、參加會議經過 
2010 ACM/IEEE設計自動化研究會為在電機資訊領域中和系統晶片設計及設計自動化
方面最盛大的研討會，由美國電腦學會（ACM）、電子設計自動化聯盟（EDAC）、及國際
電機電子工程師學會（IEEE）等單位所聯合主辦的，為一年舉辦一次的會議。今年的會議地
點是美國加州阿那漢（Anaheim, CA），會議為期六天（Jun. 13-18, 2010）。本會議為
全球IC設計領域最頂尖之會議，每年參與人數都破萬人，此研討會的論文將可以在國際重要
的工程論文資料庫系統EI中索引到。 
    DAC是一個規模非常龐大的會議其內容非常豐富，有別於一般的學術會議，它是一個產
業界及學術界緊密結合的頂尖國際會議，參展廠商超過三百家，除了可增進學術新知，了解
到世界各知名大學及研究機構目前最新的研究成果，又可以得知目前業界最新動態。 
    在Technical Session方面，主要是聆聽跟自己未來研究方向相關的記憶體系統最佳
化，多核心系統設計空間探索，及系統層級設計的相關領域，其中比較有幫助的是Session 
9.2由美國Pennsylvania State University團隊所發表的Off-chip Memory Bandwidth 
Minimization Through Cache Partitioning for MultiCore Platforms，其提出一套
Memory Bandwidth Based Cache Partitioning方法，不同於傳統只考量降低Cache 
Miss Rate，本篇論文主要的最佳化目標為達到最大幅的Off-chip Memory Bandwidth降
低，使得多核心系統不會因為頻寬不足而降低了多核心系統運算效能。另外，Session 22.2
是由National University of Singapore團隊所表發的 Instruction Cache-locking 
Using Temporal Reuse Profile，其針對程式執行Profile的追蹤資料來進行分析，從中擷
取出會於迴圈中大量使用的指令，因此會將這些指令以Cache-locking的方式，將其強制保
存於Cache中而不會被置換回外部記憶體中。在Session 33.2中National Technical 
University of Athenes團隊所發表的A Framework for Automatic Parallelization, 
  
跟與會者進一步討論畫面 – 2 跟與會者進一步討論畫面 – 3 
  
跟與會者進一步討論畫面 – 4 論文發表會場實況 
  
論文發表會場實況 廠商展覽解說實況 
 
二、與會心得 
這次到美國加州阿那漢市參加了 ACM/EDAC/IEEE DAC 2010會議，聽了來自各國的
專家、學者報告，覺得獲益良多。此次會議中，可以得到了國科會的補助，讓我可以得以出
國，開擴自己的視野，增廣見聞，在此，再度感謝各位國科會的審查委員們通過學生的審查
An Embedded AXI Bus Tracer with Dynamic
Multi-Resolution and Real-Time Compression
Chun-Hung Lai, Chien-Hung Chen, Cheng-Lung Chiang, Liang-Bi Chen, and Ing-Jer Huang
Department of Computer Science and Engineering, National Sun Yat-Sen University, Kaohsiung, Taiwan, R.O.C.
Abstract—This paper proposes an embedded bus signal tracer
for AXI master/slave interfaces. The proposed AXI bus tracer
is a passive monitoring mechanism, which does not disturb the
native system behavior. In general, the trace size of cycle-accurate
monitoring is huge, and hence the proposed AXI bus tracer
provides the abstraction module and the compression module.
The abstraction module provides four trace resolution modes
that can perform cycle-accurate or a transaction-based trace
collection in an unlimited time. The compression module is used
to reduce the size of trace data to enlarge the duration of tracing.
The experimental results show that the total compression ratio is
76.7%. Moreover, we can use an independent debug bus with an
embedded processor to configurable AXI bus tracer and dumping
the trace data.
I. INTRODUCTION
A highly integrated SoC has many components. All of
components are communicated on an on-chip bus. For efficient
communication purpose, since the early 1990s, several on-
chip bus-based communication architecture standards have
been proposed to handle the communication needs of emerg-
ing SoC designs. Some of the popular standards include
ARM Microcontroller Bus Architecture (AMBA) versions
2.0 and 3.0, IBM CoreConnect, STMicroelectronics STBus,
Sonics SMART Interconnect, OpenCores Wishbone, and Al-
tera Avalon [1]. However, how to debug in the bus-based
SoC environment is a great challenge because the internal
signals are difficult to observe. To overcome this problem, we
proposed an embedded AXI tracer, which can capture the bus
signal trace directly inside the SoC and store them in an on-
chip trace memory in real time. The trace data can be dumped
off-line from the trace memory to debug host or software
for analysis of bus traffic/performance. The trace is usually
triggered by events. The event trigger is used to indicate a
stop or start of the trace. Related to the event trigger, there
are two types of trace: Pre-Triggering (Pre-T) trace and Post-
Triggering (Post-T) trace. As shown in Fig. 1, the trace of
Pre-T/Post-T captures the signals before/after the event trigger.
Pre-T is usually used to preset stop position or detected error.
Post-T is usually used to set start trace or matched event.
II. PROPOSED AXI BUS TRACER ARCHITECTURE
The proposed embedded AXI bus tracer is a passive monitor
component in an SoC, as shown in Fig. 2. The proposed em-
bedded AXI bus tracer includes an AXI tracer, a tracer mem-
ory, a SYS32TDMI (which is an ARM7-like microprocessor,
supporting JTAG debug port, developed by ourselves), on-chip
memory, and an independent debug bus. The SYS32TDMI
TimeTrace capacity
Event
 trigger
Pre-T Trace Post-T Trace
Trace capacity
Fig. 1. Pre-Triggering Trace and Post-Triggering Trace
  

 


  
	 
    
  
 

  
 




 





ﬀ

ﬁ
ﬂ

ﬃ

 





ﬀ

     

 ! ! 

   "
 
 # #  
DesignWare VIP
   $
 
 %  
$
 
 % 
	  & '  (
)  * + , - +  .
 /
- * 
   0 1
 /
-
"
 
 # #  
 /
-
"
 
 # #  
 2  3 4 $
) 	

.
 5
	 6 7
 8 9
 1
 /
-
"
 
 # #  
:
! 7
  8
#
	  & '  (
 /
-
"
 
 # #  
An Embedded AXI Bus Tracer
;
$  <
Fig. 2. AXI Bus Tracer RTL Design Environment
and on-chip memory are used to configure scenario of the
AXI bus tracer. The proposed AXI bus tracer consists of an
abstraction module, a reduction module, a pack module, and a
FIFO module, as shown in Fig. 3. We combine the abstraction
levels in the timing dimension and the signal dimension that
provide four modes in different granularities. There are Mode
1, Mode 2, Mode 3, and Mode 4. At Mode 1, the tracer traces
all bus signals cycle-by-cycle so that user can observe the most
detailed bus activities. Full signals can be sampled at cycle
level. The trace depth is the shortest among the four modes.
At Mode 2, the tracer traces all signals only when their values
are changed. Full signals are sampled at transaction level at
cycle based. At Mode 3, the signals abstraction at bus state,
such as Wait, Address channel wait, Transfer, Data channel
wait. Bus state signals would be sampled at cycle based. At
Mode 4, the tracer uses bus state to represent bus transfer
activities in transaction level. Bus state signals can be sampled
at transaction level.
The compression module is used to reduce the trace size.
In accordance with cluster of bus signals encoded data, the
cluster of bus signals are classified according to AXI channel
and transaction protocol. Table I shows cluster types with
 1
出席國際學術會議心得報告                                
計畫編號 NSC 98-2220-E-110-002- 
計畫名稱 有即時效能/功率監控功能的高效率可程式化三維電腦繪圖晶片系統：軟硬體開發及整合－子計畫ㄧ系統晶片整合與分析(3/3) 
出國人員姓名 
服務機關及職稱 
陳建宏 
國立中山大學資訊工程學系博士生 
會議時間地點 Songdo Convensia, Incheon, Korea(韓國仁川市松島 Convensia國際會展中心송도컨벤시아) November 22-23, 2010 
會議名稱 International SoC Design Conference(ISOCC2010) 
發表論文題目 A Synthesizable AXI Protocol Checker for SoC Integration 
 
一、參加會議經過 
本次出國主要的目的是去參加 2010年 ISOCC在韓國仁川市舉辦，該會議議題是針
對 SoC設計及應用為討論主軸，所有與會人員都必須在 11月 23日早上，到達舉辦的場
地做報到的手續，因為是第一次自己處理出國手續，選擇提前一天到韓國住宿。本次投
稿的是 Special Section的邀稿，論文題目為 A Synthesizable AXI Protocol Checker for SoC 
Integration，而口頭報告 Oral Section是被安排在會議的第一天下午 5:00~6:30，一共有六
位報告人，我是被安排在第五順序報告，平均每位可以報告 15分鐘，其中包含提問討論
3分鐘。在參加會議過程中，也去觀摩國際間在 SoC上的研究及其應用領域上的趨勢、
方法及發展的現況。 
同時在會場週邊有相關 SoC及自動化設計廠商進行展示，展示內容大多以軟、硬體
開發平台為主，另外還有微型機器人自動控制等展示。會議開始前就已經有相關 Chip 
Design Contest隊伍進行說明及 Demo，參賽隊伍報告自己的設計及內容。其中有一參賽
隊伍令我感到有興趣的，是 Korea Advanced Institute of Science and Technology所自行設
計的 32bit RISC，具備 Debug function可透過 UART與 GDB連接，並且實際 Taped-out
晶片，能與相關硬體週邊設備連接。這與本實驗室所自行設計的 ARM7-like非常相似，
而最大的不同是 Debug Hardware 的設計，及 Debug Communication Interface。我們的
Debug Hardware設計是按照 JTAG標準及 ARM specification，他們 Debug Hardware是透
過母板上的 UART與 PC連接，再由 GDB操作 Debug Function。能夠參加本次會議，很
感謝實驗室及指導老師所提供的相關協助及資源。 
   
圖 1 廠商聯合參展 
 3
Session會議的 Chair - Dr. Yeong-Kang Lai (National Chung Hsing University, Taiwan)，針對
我們的論文提出了關於 AXI Protocol Checker會不會有 Design Area Overflow的問題，而
當時我回答是說當然很容易就會造成 Overflow，就目前我們的 AXI Protocol Checker是針
對單個 DUV IP進行檢驗，但是 AXI特色就是 point-to-point連接，會牽涉到如何分散式
檢驗，仍然是很大的挑戰。一般直覺的解決方式，是看有多少個 IP要成為檢驗目標，就
散佈多少個 Checker硬體，但是很可能會造成 Checker面積大到 Overflow。另一個解法，
是採用輪流切換檢驗方式，共享單一組 Checker，但是這要把 Checker的檢驗速度及切換
檢驗的管理加速，才有辦法解決輪流檢驗共享的問題，而這也會造成硬體執行速度上的
Overflow。 
   
圖 3 當天會議報告及會議主席合照 
 
經過這一次會議論文投稿及參與，這讓自己學習到如何投稿、修稿，並且將投稿的
格式通過 IEEE的檢驗，到會議論文的投影片製作，直到當天的報告，一切過程當中，
學習到許多珍貴的經驗，也順便學習別人如何表現報告方式。透過在本次的學習成長中，
期待在下一次的會議論文時，能有更上一層樓的表現。 
 
  -2- ISOCC 2010 
A
M
B
A
 A
X
I
 
Figure 1.  The proposed AXIChecker achitecture. 
The checking results are recorded in the error reference 
table (ERT) which is used for improving verification ability for 
FPGA-level or chip-level on-chip bus verification. The ERT 
can summarize total errors that have occurred. In addition, the 
GUI software analyzer is also developed to display error 
information in details. 
Table I. Contrasting features of AXI and AHB [1] 
AMBA 3.0 AXI AMBA 2.0 AHB 
Channel-based specification, 
with five separate channels 
for read address, read data, 
writes address, write data, 
and write response enabling 
flexibility in 
implementation. 
Explicit bus-based 
specification, with single 
shared address bus and 
separate read and write data 
buses. 
Burst mode requires 
transmitting address of only 
first data item on the bus. 
Requires transmitting 
address of every data item 
transmitted on the bus. 
Out-of-Order transaction 
completion provides native 
support for multiple, 
outstanding transactions. 
Simpler SPLIT transaction 
scheme provides limited and 
rudimentary outstanding 
transaction completion. 
Fixed burst mode for 
memory mapped I/O 
peripherals. 
No fixed burst mode. 
Exclusive data access 
(semaphore operation) 
support. 
No exclusive access support. 
Advanced security and 
cache hint support. 
Simple protection and cache 
hint support. 
Register slice support for 
timing isolation. 
No inherent support for 
timing isolation. 
Native low-power clock 
control interface. No low-power interface. 
Default bus matrix topology 
support. 
Default hierarchical bus 
topology support. 
In the table I show Contrasting features of AXI and AHB. 
The major difference as follow: (1) The AXI is five channels; 
The AHB is single shared address bus and data bus. In 
accordance with this difference, we must to modify from AHB 
bus tracer an address and a data encode expand into read/write 
address and read/write data encode for AXI bus tracer. (2)The 
AXI protocol is burst-based [15]. In accordance with burst-
based, we changed address encoding for AXI bus tracer.  
The rest of the paper is organized as follows. Section 2 
describes about the AMBA AXI Protocol Checker Architecture. 
Section 3 is verification strategy. Section 4 shows experimental 
results. Finally, Section 5 is our conclusion. 
II. AMBA AXI PROTOCOL CHECKER ARCHITECTURE 
The AXI protocol checker consists of configuration register, 
protocol checker, error reference table as figure 1 shows the 
architecture, called the AXIChecker. This section introduces 
the blocks of the AXIChecker, respectively. 
A. Protocol Checker 
AXIChecker is a rule-based protocol checker, thus how to 
establish a set of well-defined rules is very important. Hence, 
we refer to the Synopsys verification intellectual property (VIP) 
[16] to establish 44 rules, including 31 master-related rules, 12 
slave-related rules, and one default slave-related rule. 
Protocol Checker is the main core of the AXIChecker, the 
inputs are all AXI bus signals, and the outputs are 44-bits 
ERROR signals and correspondingly master and slave IDs. 
Each rule has its owned correspondingly bits because every 
cycle maybe occur more than one error. If the i-th bit of the 
ERROR is set, which indicates current bus signals violate i-th 
rule. If an error has been occurred, the AXIChecker will output 
the corresponded master ID number or slave ID number to 
indicate which master or slave violates the AXI protocol. 
Figure 1 shows sub-modules of the protocol checker. There 
are sixteen sub-modules in protocol checker. They are: ADDR, 
DefaultSlave, Interface, Stable, Burst, Exclusive, LOCK, 
Surprise data, Cache, Handshake, ORDER, WDATA, 
Concurrency, ID, Resetn, and WSTRB, respectively. The sub-
modules are described as follows. 
1) ADDR: This sub-module is to check ADDR related 
rules. The ADDR signal is very important to the system. For 
every transfer, the slave, based on the ADDR, either send to or 
receive from data to the master. 
2) DefaultSlave: This sub-module is to check default slave 
response DECERR or not, when master issue a invalid address. 
3) Interface: This sub-module is to check the multiple data 
send to slave exceeds data interleave depth or not. 
4) Stable: This sub-module is to check data or control 
signals remain stable or not when valid signals is assert. 
5) Burst: This sub-module is to check burst related rules. 
The AMBA AXI provides some burst type to the designer, 
FIXED, INCR and WRAP. In some SoC designs, the burst 
transfer is very important to the performance.  
  -4- ISOCC 2010 
IV. EXPERIMENTAL RESULTS 
We compare Synopsys bus monitor VIP, ARM AXI 
protocol checker with the proposed AXIChecker shown as 
Table I. Synopsys bus monitor VIP and ARM AXI protocol 
checker are un-synthesizable hardware module and they can  
 
Figure 3.  Execution screen of the AXIChecker analyzer. (a) Count total 
violation rules and indicate which masters or slaves are violated the rule; (b) 
Show violation information in details. 
TABLE I.  COMPARISION OF THE AXI VIERFICATION MONITORS 
IP Name 
Synopsys Bus 
Monitor VIP 
[15] 
ARM AXI 
Protocol Checker 
[16] 
The Proposed 
AXIChecker 
Synthesizable 
 
No No Yes 
Debugging 
Support Error Messages Error Messages 
ERT, Detect     
multiple errors, 
and GUI SW 
analyzer 
Number of 
Rules 44 127 44 
TABLE II.  SYNTHESIS RESULTS 
Max. Frequency 242 MHz 
Total Area 70.7K Gates 
Only output error messages when errors occurred. Our 
proposed AXIChecker is a synthesizable hardware module. We 
also provide error reference table and GUI software analyzer to 
achieve efficient verification in FPGA-level or chip-level 
environment.  
Figure 3 shows the execution screen of the AXIChecker 
analyzer, AXIChecker analyzer is GUI interface software that 
can analyze the error reference table (ERT), and then display 
the violation information in details. Figure 3 (a) shows the total 
violation rules and indicates which masters or slaves are 
violated the rule. Figure 3 (b) shows detail violations. Table II 
shows AXIChecker synthesis results, the total area is 70.7K 
gate counts. 
V. CONCLUSION 
In this paper, we have proposed an AMBA AXI on-chip 
protocol checker with an efficient verification mechanism 
based on monitored-based methodology. The proposed AXI 
on-chip bus protocol checker has 44 rules that provide AXI 
master, slave, and default slave issue. The proposed 
verification mechanism is used for improving verification 
ability. The proposed verification mechanism can summarize 
total errors that have been occurred in simulation. In addition, 
the GUI software analyzer is also developed that can be 
displayed error information in details. 
ACKNOWLEDGMENT 
The authors would like to thank Global Unichip Inc. for 
their generous financial and technical supports.  
REFERENCES 
[1] S. Pasricha, N. Dutt, On-Chip Communication Architectures: System on 
Chip Interconnect, Morgan Kaufmann, 2008. 
[2] E. M. Clarke, E. A. Emerson, and A. P. Sistla, “Automatic verification 
of finite-state concurrent systems using temporal logic specifications,” 
ACM Transactions on Programming Languages and Systems (TOPLAS), 
vol. 8, pp. 244-263, 1986. 
[3] P. Chauhan, E. M. Clark, Y. Lu, and D. Wang, “Verifying IP-core based 
System-On-Chip designs,” In Proceedings of the Twelfth Annual IEEE 
International ASIC/SOC Conference, pp. 27-31, Sept. 1999. 
[4] A. Roychoudhury, T. Mitra, and S. R. Karri, “Using formal techniques 
to debug the AMBA System-on-Chip bus protocol,” In Proceedings of 
the IEEE/ACM Design, Automation, and Test in Europe Conference & 
Exhibition (DATE’03), 2003. 
[5] L. Ivanov and R. Nunna, “Specification and formal verification of 
interconnect bus protocols,” In Proceedings of the 43rd IEEE Midwest 
Symposium on Circuits and Systems (MW-CAS’00), Vol. 1, Aug. 2000. 
[6] M. Kaufmann, A. Martin, and C. Pixley, “Design constraints in 
symbolic model checking,” In Proceedings of the 10th International 
Conference on Computer Aided Verification, Springer-Verlag, 1998. 
[7] K. L. McMillan, “Symbolic Model Checking,” Kluwer Academic 
Publishers, 1993. 
[8] I. Ltd., ‘‘Sugar formal property language reference manual.’’ [Online]. 
Available: http://www.haifa.il.ibm.com/projects/verification/sugar/ 
[9] S. Ltd., OpenVera LRM 2.0. [Online]. Available: 
http://www.openvera.com 
[10] Property Specification Language Reference Manual. [Online].Available: 
www.eda.org/vfv/docs/PSL-v1.1.pdf 
[11] Kanna, Shimizu, David L. Dill and Alan J. Hu. “A monitor-based formal 
specification of PCI”. Proceeding of the 3rd International Conference of 
Formal Methods in Computer-Aided Design, Nov. 2000. 
[12] Marcio T. Oliveira, Alan J. Hu. “High level specification and design: 
High-Level specification and automatic generation of IP interface 
monitors”. Proceedings of the 39th conference on Design automation, 
June 2002. 
[13] M. S. Jahanpour, E. Cerny. “Compositional verification of an ATM 
switch module using interface recognizer/suppliers (IRS)”. International 
High-Level Design, Validation, and Test Workshop, pp. 71-76. 2000. 
[14] M. Kaufmann, A. Martin, C. Pixley. “Design constraints in symbolic 
model checking”10th International Conference on Computer-Aided 
Verification, pp. 477-487. LNCS 1427. Springer, 1998. 
[15] ARM Ltd., “AMBA 3 AXI Protocol Checker: user guide,” ARM DUI 
0305B, ARM Ltd., 2006. 
[16] Synopsys Inc., “Using the DesignWare Verification Models for the 
AMBA 3 AXI Protocol,” Version 5.60a, Synopsys Inc., April 2009. 
[17] Y.-T. Lin, C.-C. Wang, and I.-J. Huang, “AMBA AHB Bus Protocol 
Checker with Efficient Debugging Mechanism,” In Proceedings of the 
IEEE International Symposium on Circuits and Systems(ISCAS’08), 
May 2008, pp. 929-931.  
[18] ARM Ltd., “AMBA AXI Protocol Specification V1.0”, ARM IHI 
0022B, ARM Ltd., 2004. 
[19] Harry Foster , David Lacey , Adam Krolnik, Assertion-Based Design, 
Kluwer Academic Publishers, Norwell, MA, 2003. 



98年度專題研究計畫研究成果彙整表 
計畫主持人：黃英哲 計畫編號：98-2220-E-110-002- 
計畫名稱：具有即時效能/功率監控功能的高效率可程式化三維電腦繪圖晶片系統：軟硬體開發及整合
--子計畫一：系統晶片整合與分析(3/3) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 2 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 3 0 30%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 2 2 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 5 0 20%  
研究報告/技術報告 0 0 20%  
研討會論文 8 0 20% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 3 0 30%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
