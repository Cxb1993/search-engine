中文摘要 
隨著全球資訊網(World Wide Web)的快速發展，如何在這些大量資料中萃取出有用的訊
息是非常重要的事情，例如：比價系統須萃取出相關電子商務網站中的有用訊息，如產品
名稱、價格、購買方式等；其他，如萃取網路上一些新聞、及出版單位之書籍文章目錄等。
在我們過去的國科會計畫中，我們設計了一個資料萃取語言叫做 BODED(Browser Oriented 
Data Extraction Description)語言及其雛形系統來解決這些問題，並已技術轉移至業界。然而
如何對所萃取的資料進一步做一般化的管理是接下來的一件非常重要研究課題。萃取出
Web 資料的管理之基本應用有︰資料貯存(data storing)、資料查詢(data query)、網站再生工
程(web site reengineering) 、網站資料整合(web site integration)等。 
 
這些 Web 資料管理應用的共通需求，是如何將 Web 的資料與資料庫的資料容易地互轉
及整合，以便於管理。然而由於 Web 資料較為不規律，解決這些需求並非易事。首要工作
是研究明確及有彈性的 Web 資料模式，如此方能簡化這些需求。因此，本計畫將以過去設
計出的 BODE 資料萃取系統為基礎，提出一套適用於 BODE 的資料模式，以便於管理所萃
取出的資料。主要工作項目如下：（前四項為第一年計畫，而後四項為第二年計畫） 
 
1. 收集並分析過去 Web 資料模式及資料管理的研究。 
2. 提出一套適用於 BODE 的資料模式，並對此模式制定資料定義語言。 
3. 研究此模式與關聯式資料庫之對應關係。這研究含如何從這資料定義語言自動產生相對
應的關聯式資料庫 schema。 
4. 研究 BODE 萃取系統與此模式之對應關係。這研究含如何從 BODE 系統所產生的
script，自動產生相對應的資料定義語言。結合前項研究工作，可使 BODE 萃取系統自
動萃取網站資料至關聯式資料庫。 
5. 研究並設計如何整合不同網站的資料。這須研究及分析如何將不同的資料定義整合於同
一個資料定義。 
6. 研究並設計適用於此資料定義語言的查詢語言及系統。 
7. 研究並設計適用於此資料定義語言的網站再生工程系統。 
8. 以現有電子商務網站為實例，展示所研究的系統對萃取資料之管理能力。 
 
 
Abstract 
 
With the rapid growth of World Wide Web, it becomes very important to extract information 
from such a huge amount of database. For example, a price comparison system needs to extract 
information, such as product names, prices, purchase methods, etc, from some related 
e-commerce sites.  Other examples are to extract news from news providers and to collect 
categories of publishers.  In our past projects from NSC, we defined a data extraction language, 
named BODED (Browser Oriented Data Extraction Description) Language, and designed to solve 
the problem of data extraction a system for it whose technique has been transferred to industry.  
However, the way to manage the extracted data for data management is the next very important 
research topic.  The basic applications include: data storing, data query, web site reengineering, 
and web site integration.  
 
二、研究目的 
 
在我們過去的國科會計畫中，我們設計了一個資料萃取語言叫做 BODED (Browser 
Oriented Data Extraction Description)及其雛形系統來解決這些問題。然而如何對所萃取的資
料進行儲存，並進一步做一般化的管理也是一件非常重要的事情。萃取出 Web 資料的管理
之基本應用有︰ 
z 資料貯存(data storing)︰將萃取的資料貯存下來。 
z 資訊查詢(information query)︰查詢萃取下來的資訊。 
z 網站再生工程(Web site reengineering)︰可將資料庫內的資料反向顯示成網站。對有些
網站年久失修，或使用舊的 Web 伺服器技術，亦可藉由此技術重新修整。 
z 資料資料整合(Web site integration)︰將不同網站萃取下來的資料整合在同一個資料
庫，或甚至整合成一個新的網站。 
這些 Web 資料管理應用的共通需求，是如何將 Web 的資料與資料庫的資料容易地互轉及
整合，以便於管理。然而由於 Web 資料較為不規律，解決這些需求並非易事。首要工作是
研究明確及有彈性的 Web 資料模式，如此方能簡化這些需求。因此，本計畫將以過去設計
出的 BODE 資料萃取系統為基礎，提出一套適用於 BODE 的資料模式，以便於管理所萃取出
的資料。 
 
三、研究背景： 
 
    過去我們進行許多相關的研究，如 WebOQL0、XML Information Set、XQuery and XPath 
Data Model[16]、Relational Data Model、Object Data Model、OQL、ORDB 等資料庫系
統或資料定義語言，並參考 BODE 系統以及語言的特性，改良發展為 DESDL Data Model。
在說明如何在網頁上萃取資料以及以有系統的方式儲存這些資料之前，我們先來看一個例
子。假設有一個簡化的論文資料庫網站，在這個網站中包含兩層的分類，圖 1 中顯示包含
主分類的論文資料庫網站首頁，在主分類網頁中，有超鏈結會連結到含有多個次分類的次
分類網頁。其中一個次分類網頁的內容顯示在圖 2 中。次分類網頁中則有超鏈結連結到屬
於該次分類的論文列表的網頁。圖 3 則顯示列有好幾篇論文以及其作者名稱、標題與出版
商的論文列表網頁。在論文列表網頁的結尾處，有一個 URL 鏈結到下一個論文列表網頁以
顯示更多的論文列表。在論文列表網頁的每一篇文章的標題，皆有一個超鏈結連結到論文
網頁。圖 4 顯示一個論文網頁，在論文網頁中，有論文的標題、摘要、作者與出版商等資
訊。在每一個作者名稱上，皆有一個超鏈結連結到作者資訊的網頁。圖 5 顯示一個位於
wu.html 的作者資訊網頁，在作者網頁中，包含作者的稱謂、電子郵件地址、電話，以及
其相關著作。每一篇著作，則又有超鏈結連結到上一層的論文網頁。 
<TABLE> 
  <TR><TD><A href="db.html">Databases</A></TD></TR> 
  <TR><TD><A href="al.html">Algorithms</A></TD></TR> 
    . . . 
</TABLE> 
圖 1、包含主分類的論文資料庫網站首頁 
 
<P>I-Chen Wu</P> 
<TABLE>   
   <TR> 
      <TD>Title</TD>  
      <TD>Associate Professor</TD> 
   </TR> 
   <TR> 
      <TD>Email</TD> 
      <TD>icwu@csie.nctu.edu.tw </TD>     
   </TR> 
   <TR> 
      <TD>Tel</TD> 
      <TD>035731855</TD>      
   </TR> 
   <TR> 
      <TD>Publisher</TD> 
      <TD> 
         <TABLE> 
            <TR><TD> 
               <A href="p1.html">On the Web Data Extraction Model</A>
            </TD></TR> 
            <TR><TD> 
               <A href="p2.html">A Web Data Extraction Description 
                                   Language and Its Implementation</A>
            </TD></TR> 
            <TR><TD> 
               <A href="p3.html">BODE: A Data Extraction Service  
                                   Description Language</A> 
            </TD></TR> 
         </TABLE> 
      <TD> 
   </TR> 
</TABLE> 
圖 5、位於 wu.html 的作者資訊網頁 
 
在上述的例子當中，我們要萃取所有的論文資料，並且將這些資料自動的儲存到資料
庫中。為了要萃取整個網站的論文資料，我們必需瀏覽網站中的所有論文列表網頁，然後
連結到論文網頁中萃取相關資料。 
在之前的研究 0[2][3][8][11][12][13][16][17]中，要萃取網站上的資料並儲存，通
常會使用搜尋引擎、撰寫自訂的 wrapper、或是撰寫網頁查詢程式，然後利用特定的系統
將網頁中的資料萃取出來。當資料萃取出來後，再利用撰寫好的資料對應程式，將資料對
應儲存到資料庫當中。然而，在萃取資料的過程當中，有一些重要的資訊在網頁中的資料
被萃取完成，並進入到下一頁進行其他的萃取之後即遺失。比如頁面之間的超鏈結關係。
xpath屬性指定主分類的 HTML 超鏈結元素所在的位置)。在此假設有 n 個。這時 FOREACH
元素所包含的 BODED script 片斷皆會被執行 n 次。在第 i 次的迴圈中，MainCat變數內容
為第 i 個主分類的 HTML 超鏈結元素。在 FOREACH當中的每一個元素皆是以 MainCat變
數所指向的元素為根節點，在此根節點上使用 xpath的相對路徑來萃取資料。例如，在圖
6 的 FOREACH 中，使用 VAR 元素來萃取主分類的名稱到名為 MainCatName 的變數中，
並將該變數置於 BODE 系統中的萃取資料集區(extracted data pool)。由於主分類的名稱是在
HTML 超鏈結的文字部分，因此 xpath屬性中的值為"./text()"。在這個 XPath 當中，
"."代表目前的節點，即 HTML 超鏈結元素。在圖 6 的例子中，若是目前在第 i 次的迴圈
中，則"."指的是第 i個主分類的 HTML超鏈結。而"./text()"則取出目前 HTML超鏈結
的文字部分，也就是第 i個主分類的名稱。接著利用 EVENT元素模擬使用者在瀏覽器中的
主分類項目上按滑鼠左鍵的 Click 動作。而萃取的規則如果是使用 XPath 語言，則由 xpath
屬性指定。在 BODED 的變數中，可包含被萃取出來的字串資料或指向某個元素的指標。 
<BODED Name="CSArchive"> 
<INIT page="MainCatPage" 
url="http://bode.csie.nctu.edu.tw/index.html" /> 
<PAGE Name="MainCatPage"> 
<FOREACH Name="MainCat" xpath="//TD/A"> 
         <VAR name="MainCatName" xpath="./text()" /> 
         <EVENT name="LinkToSubCat" xpath="." service="SubCat"  
                  type="OnClick" /> 
      </FOREACH> 
   </PAGE> 
  ... 
</BODED> 
圖 6、用來萃取圖 1 主分類的 BODED 萃取程式 
   
BODED 使得控制瀏覽順序與資料萃取變的更加容易。簡單的說，BODED 具有下列的特色。 
(1) 使用 XPath[17] 當作萃取網頁內部資料的查詢敘述格式。 
(2) 能以特定的順序瀏覽網頁。 
(3) 可以填寫表單並啟動下一個服務來萃取提交表單後的下一頁。 
(4) 支援使用 javascript 所產生的超鏈結。 
(5) 支援稱為 BODEDLet 的外掛程式，以處理所萃取的資料。例如，將萃取的資料儲存到
資料庫或瀏覽下一頁。 
(6) 與目前的瀏覽器的規格一致。 
(7) 模擬按一下的動作並啟動下一個服務來萃取下一頁。 
此外，BODE 系統包含一個 WYSIWYG 的視覺化的工具，如圖 7，讓使用者能快速的產生
能萃取網站資料的 BODED 萃取程式。我們過去的經驗是，透過這視覺化工具的輔助，我們
可以在一小時，甚至幾十分鐘內完成 BODED 萃取程式的設計。 
<BODED Name="CSArchive"> 
<INIT page="MainCatPage" 
url="http://bode.csie.nctu.edu.tw/index.html" /> 
<PAGE Name="MainCatPage"> 
<FOREACH Name="MainCat" xpath="//TD/A"> 
         <VAR name="MainCatName" xpath="./text()" /> 
         <BODEDLET name="BODEDB" code="BODEDLET.saveDB"  
archive="bodedlet.dll"> 
             <PARAM name="SavedVAR1" value="MainCatName" /> 
         </BODEDLET> 
         <EVENT name="LinkToSubCat" xpath="." service="SubCat"  
                  type="OnClick" /> 
      </FOREACH> 
   </PAGE> 
  ... 
</BODED> 
圖 9、儲存萃取資料並且控制 BODE 系統瀏覽下一頁的 BODEDLET 範例 
 
 
五、Data Model 
 
在 Web 資料模式的研究中，我們設計了一個新的資料模式，叫做 BODE 資料模式，並
定義描述該模式的語法，用以描述網頁上所萃取的資料。同時，我們也設計一個對應語言。
這個對應語言能夠將 BODED script 中指定萃取的資料對應到資料模式中的特定資料欄位。 
BODE 資料模式 
在 Web 資料模式的研究中，我們定義了 BODE 資料模式(BODE Data Model)以及其描
述語言。在 BODE 的資料模式中，視一筆資料紀錄為一個資料物件。一個資料物件中須
具備的欄位由資料類別所定義。圖 10 顯示一個描述圖 1 的 BODED 語言所萃取的主分類
名稱資料的 BODE 資料模式定義。在圖 10 中定義了名為 MainCat 的類別。在該類別中，
有一個欄位叫做 MainCatName，其型態是字串(string)，長度為 20。 
描述 BODE 資料模式的語言稱為 Class Definition Language，簡稱 CDL。CDL 是以 XML 
Schema 架構（Framework）為基礎，是一個用來描述 BODE 資料內容的結構的 XML 
Language。 
目前 CDL 定義了兩個標籤，一個是 CLASS，另一個是 FIELD。CLASS標籤定義資料
物件的類別。其內含 FIELD 標籤。 
CLASS 標籤包含兩個屬性，一個是 name，用以指出資料類別的名字。一個是 key，
用以指出資料類別是以哪些欄位當作主鍵。在資料物件資料庫中，具有同樣主鍵的資料會
被視為是同一筆資料。 
FIELD 標籤包含三個屬性，第一個是 name，為該欄位的名稱，第二個是 type，為該欄
位的資料型別，第三個是 length，是該欄位所儲存的資料的長度。 
TABLE BODE_EMPLOYEE 
( 
RID LONG, 
DOMAIN      CHAR(32), 
NAME        CHAR(50), 
TITLE       CHAR(50), 
ROOM        CHAR(50), 
SPEC        CHAR(254) 
) 
  圖 12、圖 11 中的 TEACHER 資料物件所對應的 SQL 資料表 
 
 
BODED 資料模式對應語言 
為了要讓資料的萃取與儲存能夠自動化的進行，因此我們設計了一個能夠將 BODED
萃取程式中所萃取的資料項目對應到 BODE 資料模式中的資料欄位的資料定義的語言，稱
為 BODED Script to Class Mapping Description Language，簡稱 BSCMDL。該語言利用
BODED 語言的標籤結構，將資料對應到物件模式中。圖 13 的對應規則即是將圖 9 中的
BODED 語言對應到圖 10 的類別定義中。在圖 13 中，FOREACH 元素會對應到圖 10 中的
MainCat 資料類別。而 FOREACH 元素中的 VAR 元素則對應到 MainCat 資料類別中的
Name 欄位。因此在 BODE 系統執行當中，便可依據該對應程式將資料自動的儲存於資料
庫中的資料表內。 
<MAP script="CSArchive"> 
   <PAGE name="MainCatPage" . . . > 
      <FOREACH name="MainCat" class="MainCat" . . . > 
         <VAR name="MainCatName" field="Name" /> 
         . . . 
      </FOREACH>     
   </PAGE> 
   . . . 
</MAP> 
圖 13、將 BODED script 中的萃取資料對應到資料模式中的主分類項目資料的 BSCMDL 程式 
 
BSCMDL 資料對應描述語言是以 XML Schema 架構（Framework）為基礎，其定義的
標籤如下： 
(1) MAP：MAP 標籤內含一個屬性 script，用來指出 Script 的名字。 
(2) BLOCK：BLOCK 標籤包含數個重要屬性。name 是用以指出 BODED Script 內的區
塊名稱。class 是用以指出相對的資料類別的名稱。bind 是用以指出將從不同的 Event
中所萃取的資料項目加入到某一個資料類別中，成為其中的一個欄位。rclass 是用
以指出一個與此一資料類別有關聯的資料類別的名稱，domain 是用以標示及區分
不同的資料來源。 
(3) VAR：VAR 標籤包含數個重要屬性，name是用以指出 BODED Script 內的 VAR 標
籤的名稱，field是用以指出相對的資料類別內的欄位名稱。 
 
圖 14 顯示將 BODED script 中兩個不同的 BLOCK 元素以及其所包含的 VAR元素對應
</MAP> 
圖 15、將 BODED script 中兩個不同的 BLOCK 所萃取的項目，結合到 BOOK 資料類別 
       
在做 Script 與資料類別對應時，將採取以下原則：  
(1) BLOCK 根據其名稱，可指定為 BODED script 中的 PAGE 以及 FOREACH 等元素。
藉由執行 BODEDLET，可以將 PAGE 以及 FOREACH 等元素所萃取的資料對應
至資料類別。 
(2) BLOCK 被啟動的時機，通常是在 BODE 系統結束一個 PAGE 或 FOREACH 等元
素的萃取作業的一個循環或是結束之後。 
(3) 資料類別與資料類別的結構關聯次序，是由 rclass 屬性所指定的。  
由於資料大部份可以從 BODED script 中的 PAGE 或 FOREACH 中的變數而來，為了
要提供更簡化的操作，BODE 系統對 BODED Script 稍作修改，並且根據這些修改，提供一
個 CDL 及 BSCMDL 產生器，協助使用者產生 CDL 及 BSCMDL。 
對於 BODED Script 的更動如下：  
(1) 在 PAGE、FOREACH等標籤內，新增一個屬性 class，用來指示對應的的資料類
別名稱。對於未定義屬性 class的標籤將被 CDL及 BSCMDL產生器所忽略。屬
性 domain，用來指示對應的的資料類別名稱。屬性 rclass，用來指示關聯此
一資料類別的資料類別名稱。屬性 rname，用來設定關聯的名稱。 
(2) VAR 標籤內，新增一個屬性 field，用來指示對應的的資料欄位名稱。isKey
則表示是否為鍵值。type指定型態。length則指定欄位長度。若 field屬性
不存在，CDL及 BSCMDL產生器將產生一個與 VAR相同名稱的欄位，若 type屬
性不存在，則預設為 String。若 length 屬性不存在，則預設長度為 32 的
String。isKey若為 true，則該欄位為鍵值欄位。若 isKey不存在，則該欄
位為非鍵值欄位。 
例如圖 16 的 BODED Script，經由 CDL 及 BSCMDL 產生器，可以得到圖 17 的 CDL
程式，以及圖 18 的 BSCMDL 程式。 
<BODED name="scrpNET" InitialService="pageTeacher"  
         url=".../index.html"> 
  <PAGE name="pageTeacher"> 
    <FOREACH name="forTeacher" xpath=".../TR[position()>=1]" 
         class="TEACHER"> 
<VAR name="varName" xpath="/TD[0]" /> 
      <VAR name="varTitle" xpath="/TD[1]" /> 
      <VAR name="varRoom" xpath="/TD[2]" /> 
      <VAR name="varSpecialty" xpath="/TD[3]" />       
      <BODEDLET name="SaveDB" code="BODEDLET" 
                  archive="BODEDLETDB.dll"> 
<PARAM name="domain" value="NET" /> 
      </BODEDLET> 
    </FOREACH> 
  </PAGE> 
</BODED> 
圖 16、萃取教師資料的 BODED script 
Mapping
Rules
Class
Definition
DatabaseData Model
ImplementationWeb Page
BODED
SCRIPT
BODE System
 
圖 19、在 BODE 系統中的資料模式實作 
 
資料關聯 
在網頁當中的資料與資料之間，有些會具有特定的關係，這樣的關係我們稱為關聯。
以資料庫的角度來看，關聯大致有四種，即一對一、一對多、多對一以及多對多等關聯，
如圖 20。在網頁當中的資料，也存在這四種關係。例如圖 4 的論文網頁當中，論文的標題
(Title)、摘要(Abstract)與出版商(Publisher)具有一對一的關係。也就是一篇論文當
中，會有一個標題、一份摘要以及由一個出版商出版。這些資料都是屬於一篇論文中的屬
性，且對於一篇論文當中，具有唯一性。因此我們可以建立一個論文的類別，如圖 21 中的
Paper類別，並將這些彼此之間是一對一的資料，作為論文類別中的欄位。在 BODED 萃取
程式中，要萃取的資料是由 VAR 標籤來描述該資料位於何處。由於 BODED 萃取程式的
XML 結構中，僅有變數類型的標籤才能指定要萃取的資料。因此，這些標籤會被對應到類
別中的欄位。為了使資料定義更加簡單，在 BODE 資料模式中規定 CLASS 當中不能包含
其他 CLASS。因此 CLASS 沒有辦法表達多層的關係。而可以包含 VAR 標籤的其他標籤，
例如 PAGE或是 FOREACH標籤，由於包含了欄位，因此會被對應到資料類別。 
zOne To One zOne To Many zMany To One zMany To Many
 
圖 20、資料間的一對一、一對多、多對一與多對多關聯 
 
<CLASS name="Author"> 
   <FIELD name="AuthorName" type="string" length="20" /> 
</CLASS> 
 
當資料之間具有一對多、多對一或多對多的關係時，就沒有辦法以目前單純的 CLASS
定義來定義這樣的關係。因此 BODE 的資料類別在設計時，必需使系統能夠處理及紀錄各
種關聯。而且，因為即使是 BODE 在萃取資料的同時，也很難得知兩個資料類別之間的關
聯性屬於那一種，因此 BODE 資料類別在處理 Relationship 時，必須使用一般性通用性的
做法。為了保持簡單的資料定義格式，並且同時保留可以彈性的描述各種物件之間的關係，
BODE 使用一個 Universal Relation Table 去紀錄關聯資訊，無論是何種關聯資訊，皆可由
Universal Relation Table 紀錄。 
為了要將資料物件(Object)與資料物件的關聯性轉換成紀錄(Record)與紀錄之間的關
係，BODE 系統可以使用以下方法： 
(1) 給予每一個 Object 一個 RID。 
(2) 將資料物件與資料物件的關聯紀錄儲存於 Universal Relation Table 中。 
Universal Relation Table 的結構如圖 24： 
 
TABLE BODE_RELATION 
( 
CID LONG, 
EID LONG, 
PNAME  CHAR(50), 
CNAME  CHAR(50), 
RNAME  CHAR(50), 
DOMAIN  CHAR(50) 
) 
圖 24、Universal Relation Table 結構 
 
其中，PNAME 和 CNAME 是用來紀錄資料類別名稱，PNAME(Container Class Name)
紀錄父資料類別的名稱。CNAME 紀錄子資料類別的名稱。PID 是一個 PNAME 所紀錄的
資料類別的一個 Record 的 ID，CID 是一個 CNAME 所紀錄的資料類別的一個 Record 的 ID，
DOMAIN 是用以標示及區分不同的關聯。  
例如，圖 25 表格的第一列資料，其意義是：一個叫做 Teacher 的資料類別的一筆記錄
與一個叫做 Course 的資料類別的一筆記錄存在關聯，此一關聯的被指定一個叫做 CSINFO
的 DOMAIN。TEACHER 為此一關聯的父資料類別，COURSE 為此一關聯的子資料類別。 
PID CID PNAME CNAME RNAME DOMAIN 
670296712 670297531 TEACHER COURSE TEACHER-COURSE CSINFO 
670296112 670296922 PaperList Paper PaperList-Paper ARCHIVE
670296922 670297201 Paper Author Paper-Author ARCHIVE
. . . . . . . . . . . .  . . . 
圖 25、描述老師/課程以及論文列表/論文以及論文/作者的關聯資料表片段 
 
例如圖 26 的教師網頁與課程資訊之間存在有一 Hyper Link，此一 Hyper Link 具有關聯
意義"教師以及此教師所開課程"的關聯。經由 Universal Relation Table，我們得以保留來自
網頁上的關聯資訊，儲存到 Universal Relation Table 中。 
 
間的關聯也是以 parentrelation屬性指定。 
跨網頁間的關聯則是由 BODE 資料模式處理程式，也就是圖 9 中的 BODEDLET 來處
理。BODE 資料模式處理程式會紀錄目前的資料物件的 ID，之後執行一個 EVENT 元素以
建立一個新的瀏覽器來瀏覽下一頁。並且將新的網頁服務，即圖 9 中 EVENT元素所指定的
SubCatPage 網頁服務連結到新的瀏覽器中執行。同時在 SubCatPage 網頁服務中，建
立一個內定的變數，將目前資料物件的 ID設到該變數中。如此新的網頁服務即可得知前一
個網頁服務目前的資料物件是哪一個。且依據此資訊建立網頁間的關聯。 
若是資料之間具有多對一的關係。比如不同的論文可能作者是同一人，因此這些由某
一個作者所撰寫的論文的網頁中，都有作者的超鏈結連結到作者網頁，這時若沒有特別的
機制，會使得同一個作者的資料在資料庫中同時出現好幾次。而違反了一致性的原則。要
解決這樣的問題，就必須在類別的定義上加入 key屬性，指定該類別的物件是由哪些欄位
來決定唯一值。圖 21 中的 Paper類別即指定類別的標題(Title)欄位為 key。因此當萃取
資料時，發現具有同樣 key值的資料被萃取時，則不再產生新的物件，直接將資料庫中已
存在的物件與上層的資料物件作關聯。如此可確保多筆論文資料物件中的同一個作者皆關
聯到同一個作者的物件。當 BODE 資料模式處理系統遇到具有相同 key 值的資料時，就會
停止繼續往下萃取，在建立好物件的關聯後，直接返回上一層繼續萃取。 
 
 一但資料與其間的關聯資訊由 BODE 系統儲存到關聯式資料庫中後，即可以關聯式資
料庫的 SQL 查詢來查詢資料。 
 
使用標準 SQL 查詢 CDL 定義的資料類別的資料 
BODE 使用關聯式資料庫儲存 BODE 所萃取的網路資料，因此仍然可以直接應用 SQL
存取存 BODE 所萃取的網路資料。但是，由於使用 Universal Relation Table 建立類別資料
之間的關聯，所以當使用者需要存取經由 BODE 系統萃取所得並且儲存於資料庫中的資料
時，仍然可以透過 Universal Relation Table 發覺資料間的關聯。Universal Relation Table 在
BODE 系統資料庫中的資料表名稱為 BODE_RELATION。 
以下將以TEACHER及COURSE兩個資料類別作為例子將說明如何存取兩個資料表的
資料。   
假設使用者要查詢所有教師與課程資料，由於 BODE_TEACHER 為父資料類別，
BODE_COURSE為子資料類別，SQL 的建立方式如下：以 Universal Relation Table 的 PID
關聯 BODE_TEACHER資料表，以 Universal Relation Table 的 CID關聯 COURSE資料表。
即可找到所有有關聯的 TEACHER 與 COURSE 資料。 
SELECT T.*, C.*  
FROM    BODE_TACHER T, BODE_RELATION R, BODE_COURSE C 
WHERE   T.RID = R.PID 
  AND   C.RID = R.CID 
圖 28、BODE 資料模式資料的查詢 
 
網站資料的整合 
為了能夠將從各個不同網站抓取，具有不同資料類別的資料，對應到一個共同的資料
類別中，需要有一套工具能夠將不同的資料類別欄位定義，對應到共同的資料欄位定義。
這個過程我們稱為資料格式轉換。資料格式轉換是資料管理中，非常重要的一件工作。例
        <FIELD field="NAME"  value="TEACHER.NAME"/> 
<FIELD field="TITLE" value="TEACHER.TITLE"/> 
<FIELD field="ROOM"  value="TEACHER.ROOM"/> 
</CLASS> 
</TRANSLATION >  
</TRANSLATIONS> 
圖 29、使用 Aggregation 的 CCMDL 程式 
CCMDL 的模式 
CCMDL 提供了以下兩種資料轉換的模式： 
z General 模式 – 預設的資料轉換模式。使用"GENERAL"模式時，系統不會考慮
DOMAIN。任何一個 KEY 的資料仍然只有一組。若是遇到相同 KEY 的資料時，
則以" OVERWRITE "或是"PREEMPT"模式處理。 
z Aggregation 模式 – 使用"AGGREGATION"模式時，系統會先考慮 DOMAIN。在
相同 DOMAIN 下的資料,任何一個 KEY 的資料仍然只有一組。若是遇到相同 KEY
的資料時，則以" OVERWRITE "或是"PREEMPT"模式處理。 
 
首先，我們以兩個來自不同網頁的資料為例，進行資料格式及結構的轉換，第一組網
頁資料是"教師關聯教師所開的課程"，第二組網頁資料是"學校課程關聯授課講師"；我們
將要從中得到"課程名稱關聯教師"。此一例子我們將假設教師的姓名不會重複，且分別以
課程名稱及教師的姓名為鍵值。 
(1) 使用"GENRAL"模式時，任何相同課程名稱將視為單一課程資料。 
圖 30、CCMDL 資料轉換(GENRAL 模式)示意圖 
 
(2) 使用"AGGREGATION"模式時，不同來源相同課程名稱的課程資料將不被視為單
一課程資料。也就是說，鍵值作用會被 domain 所限定。 
子使用 OVERWRITE 模式處理重複資料) 。此一例子顯示使用"GENERAL"模式
不利於規格及售價上的比較。 
 
圖 36、CCMDL 資料轉換(GENRAL 模式) 
 
(2) 使用"Aggregation"模式，並且以產品資訊 PRODUCT 及 PRODUCER 為 KEY，進
行資料匯整。使用此一方式，系統會將使用相同 KEY 值，但是不同 DOMAIN 的
資料，視為不同的資料。相同 KEY 值，但是相同 DOMAIN 的資料，視為重複資
料的資料。(以下例子使用 OVERWRITE 模式處理重複資料)   
  
圖 37  CCMDL 資料轉換(AGGREGATION 模式) 
 
資料重複資料的處理 
當所抓取的兩筆資料，其 KEY 值相同，則代表其中一筆資料重複。 
 
當我們要將不同來源的資料進行彙整時，往往會遇到重複的資料，對於如何處理重複
性的資料，取決於應用本身。為了要滿足各類需求，BODE 提供了以下兩種重複性的資料
的處理方式： 
(1) 取代資料庫現有資料 (Overwrite) - 使用" OVERWRITE "模式時，若資料已經存
在，系統會以新的資料及舊的資料 ID，更新資料庫中的資料。否則，系統會產生
新的資料 ID 儲存資料。此時， DOMAIN 僅有紀錄資料來源的功能。 
(2) 保留資料庫現有資料 (Preempt) - 使用"PREEMPT"模式，假若資料已經存在，系
料。否則，系統會產生新的資料 ID，並且將資料存入資料庫中。 
 
圖 40、處理重複資料的示意圖(OVERWRITE 模式) 
 
(2) 或者是，使用"OVERWRITE"模式，先匯入其他圖書館的圖書資料，接著再"中央
圖書館"的圖書資料。此時，ISBN 為 KEY，DOMAIN 僅僅作為區別資料來源的
功能。在進行轉換時，資料庫出現相同 KEY 的資料時，系統先取得原有資料 ID，
刪除原有的資料，將新取得的資料以舊有的資料 ID 存入資料庫中。否則，系統
會取得新的資料 ID，並且將資料存入資料庫中。  
 
圖 41、處理重複資料的示意圖(PREEMPT 模式) 
 
CCMDL 資料轉換語言的限制 
CCMDL 主要適用於具有以下特性的關聯。首先是，資料類別之間的關聯，必需具有
方向性。而且，其衍生關聯必需要具有遞移性。例如圖 42，若存在資料 A 關聯資料 B，則
存在反向關聯(資料 B 關聯資料 A)，而且具有意義，但是兩者關聯的意義並不一定相同。 
 
圖 45、John、Johnson 以及 Johnson L.的衍生親族關聯 
 
然而，衍生關聯並不一定具備實質的意義。例如圖 46 中 Johnson 是 John 的兒子，且
Tom 是 Johnson 的同事，但是，經由父子關係及同事關係，並不會產生具有實質意義的關
連。  
 
圖 46、John、Johnson 以及 TOM 的衍生關聯 
 
關連是否具有遞移性，無法從關聯的組合方式直接推論，必需審視衍生關聯是否具有
意義。並非所有的衍生關聯都具有遞移性。假設，衍生關聯不具有遞移性，就有可能會產
生錯誤或是不合理的資料。 
本研究對於上述的衍生關聯是否具有遞移性，進行研究，並提出數種具有遞移性關聯
的特性： 
(1) Composition 
例如圖 47 中，汽車是由各種模組裝置組合而成；也可以將汽車視為由許多更小的
零件所構成。 
 
圖 47、汽車與零件的 Composition 衍生關聯 
 
(2) Inheritance 
John Johnson 
父子關聯 
Johnson L. 
父子關聯 
親族關聯 
John Johnson
父子關聯
TOM 
同事關聯
? 
的 DOMAIN，區別不同的資料來源。 
最後是執行個別的 BODED script，萃取不同網站的產品資訊儲存到資料庫中。圖 54
為使用此方式整合不同網站資料的示意圖。 
… 
<TABLE>      
   <TR> 
      <TD>PRODUCT</TD>        
      <TD>EENCODE</TD>    
      <TD>PRICE</TD>    
      <TD>COUNTRY</TD>    
   </TR>    
   <TR>       
      <TD>NOTEBOOK001</TD>       
      <TD>710626981315</TD>        
      <TD>NT40000</TD>  
      <TD>TAIWAN</TD>        
   </TR> 
   … 
</TABLE>    
… 
圖 50、Web_A.html 
 
… 
<TABLE>      
   <TR> 
      <TD>PRODUCT</TD>        
      <TD>EENCODE</TD>    
      <TD>PRICE</TD>    
      <TD>WEIGHT</TD>    
   </TR>    
   <TR>       
      <TD>NOTEBOOK001</TD>       
      <TD>710626981315</TD>        
      <TD>NT40000</TD>  
      <TD>3000g</TD>  
   </TR> 
   … 
</TABLE>    
… 
圖 51、Web_B.html 
 
… 
<TABLE>      
   <TR> 
      <TD>PRODUCT</TD>        
      <TD>EENCODE</TD>    
      <TD>PRICE</TD>    
      <TD>SIZE</TD>    
   </TR>    
   <TR>       
      <TD>NOTEBOOK001</TD>       
      <TD>710626981315</TD>        
      <TD>NT40000</TD> 
      <TD>15</TD>  
   </TR> 
層結構如圖 56。燦坤購物網(TKEC)的階層結構如圖 57。 
   
       圖 55、名人購物網(MREN)的階層結構 
 
     
  圖 56、順發購物網(SUNFAR)的階層結構 
 
 
  圖 57、燦坤購物網(TKEC)的階層結構 
 
根據以上的網站的結構分析，可以發現以上三個網站的網頁結構都具備 Specification
的特性，資料的衍生關聯具有遞移性，也就是名人購物網(MREN)，順發(SUNFAR)以及燦
坤(TKEC)等銷售網站的網頁資料，適合用 BODE 資料轉換語言進行資料重組。 
依據網站的結構以及資料內容，分別定義以上三個網站使用的資料類別。名人購物網
(MREN)的資料類別定義如圖 58。順發(SUNFQAR) 銷售網站的資料類別定義如圖 59。燦
坤(TKEC)銷售網站的資料類別定義如圖 60： 
   
圖 62、名人、順發與燦坤網站資料匯整的資料類別架構 
 
接著是，利用資料轉換語言，將名人購物網(MREN)，順發(SUNFAR)以及燦坤(TKEC)
等銷售網站的資料，匯入匯整資料的類別。其示意圖如圖 63。 
 
圖 63、將名人、順發與燦坤網站資料匯整到匯整資料類別示意圖 
 
為了要讓來自不同來源的資料能夠並存，資料轉換語言將以 AGGREGATION 模式轉換
資料。名人(MREN)購物網的資料轉換程式如圖 64。順發(SUNFAR)銷售網站的資料轉換程
式如圖 65。燦坤(TKEC) 銷售網站的資料轉換程式如圖 66。 
 
</TRANSLATION> 
</TRANSLATIONS> 
 
圖 65、順發(SUNFAR)銷售網站的資料轉換程式 
 
<TRANSLATIONS> 
<TRANSLATION mode="AGGREGATION"> 
<SOURCE> 
     <CLASS>TKEC_PRODUCT_MAINCAT</CLASS> 
     <CLASS>TKEC_PRODUCT_SUBCAT</CLASS> 
<CLASS>TKEC_PRODUCT</CLASS> 
      <RELATIONSHIP>TKEC_PRODUCT_MAINCAT, TKEC_PRODUCT_SUBCAT</RELATIONSHIP> 
<RELATIONSHIP>TKEC_PRODUCT_SUBCAT, TKEC_PRODUCT</RELATIONSHIP>      
  </SOURCE> 
<CLASS name="PRODUCT_TYPE" mode="PREEMPT"> 
      <FIELD field=" PRODUCER" value="alpha(TKEC_PRODUCT.PRODUCT_TYPE)" /> 
<FIELD field=" TYPE"   value="TKEC_PRODUCT_SUBCAT.PRODUCT_TYPE" />  
</CLASS> 
    <CLASS name="PRODUCT" mode="PREEMPT">  
<FIELD field="SN"      value="TKEC_PRODUCT.PRODUCT_NAME" />  
<FIELD field=" PRICE"  value="TKEC_PRODUCT.PRICE" />  
</CLASS> 
</TRANSLATION> 
</TRANSLATIONS> 
 
圖 66、燦坤(TKEC)銷售網站的資料轉換程式 
 
資料匯整及重組時，必須先將來源資料展開，然後依據轉換描述將資料拆開，並建立
關聯，下圖是以名人購物網(MREN)的一筆筆記型電腦為例，說明其處理過程。 
  
圖 70 是一個萃取整個論文資料庫網站的 BODED 萃取程式。而圖 71 則是由圖 70 的
BODED 萃取程式中自動產生的類別定義。由於程式無法事先得知所要萃取的資料長度為
何？因此在圖 71 的 CLASS中的 FIELD，其 length屬性值為 variable，亦即可變長度。 
<BODED name="CSArchive"> 
   <INIT page="MainCat"  
          url="http://bode.adm.mcu.edu.tw/index.html" /> 
   <PAGE name="MainCat"> 
      . . .  <!-- 詳見圖 6 --> 
   </PAGE> 
   <PAGE name="SubCat"> 
      <FOREACH name="ForeachSubCat" xpath="//TD/A"> 
         <VAR name="SubCatName" xpath="." /> 
         <EVENT name="LinkToPaperList" xpath="." page="PaperList" 
type="OnClick" /> 
      </FOREACH> 
   </PAGE> 
   <PAGE name="PaperList"> 
      <VAR name="PaperItem" xpath="//TR" /> 
      <FOREACH name="ForeachPaperItem" from="PaperItem"> 
         <VAR name="Title" xpath="./TD[0]" /> 
         <VAR name="Authors" xpath="./TD[1]" /> 
         <VAR name="Publisher" xpath="./TD[2]" /> 
         <EVENT name="LinkToPaper" xpath="./TD/A" page="Paper"  
type="OnClick" /> 
      </FOREACH> 
   </PAGE> 
   <PAGE name="Paper"> 
      . . .  <!-- 詳見圖 23--> 
   </PAGE> 
   <PAGE name="Author"> 
      <VAR name="Name" xpath="//P[0]" /> 
      <VAR name="Title" xpath="//TR[0]/TD[1]" /> 
      <VAR name="Email" xpath="//TR[1]/TD[1]" /> 
      <VAR name="Tel" xpath="//TR[2]/TD[1]" /> 
      <FOREACH name="Publishs" xpath="//TR[3]/TD[1]//TR"> 
         <VAR name="Publish" xpath="./TD[0]/A[0]/text()" /> 
      </FOREACH> 
   </PAGE> 
</BODED> 
圖 70、可萃取圖 1 到圖 5 的整個論文資料庫網站的 BODED 萃取程式 
 
<CLASS name="MainCatPage"> 
</CLASS> 
<MAP script="CSArchive"> 
   <PAGE name="MainCatPage" class="MainCatPage" > 
      . . .  <!-- 詳見圖 69 --> 
   </PAGE> 
    
   <PAGE name="SubCatPage" class="SubCatPage"  
          parentrelation="MainCat" > 
      <FOREACH name="SubCat" class="SubCat"  
                 parentrelation="SubCatPage"> 
         <VAR name="SubCatName" field="Name" /> 
      </FOREACH>    
   </PAGE> 
    
   <PAGE name="PaperListPage" class="PaperListPage"  
          parentrelation="SubCat" > 
      <VAR name="Papers" xpath="//TR" />  //?? 
      <FOREACH name="PaperItem" class="PaperItem"  
                 parentrelation="PaperListPage"> 
         <VAR name="Title" field="Title" /> 
         <VAR name="Authors" field="Authors" /> 
         <VAR name="Publisher" field="Publisher" /> 
      </FOREACH> 
   </PAGE> 
    
   <PAGE name="Paper" class="Paper" parentrelation="PaperItem"> 
      <VAR name="Title" field="Title" /> 
      <VAR name="Abstract" field="Abstract" /> 
      <VAR name="Publisher" field="Publisher" /> 
      <FOREACH name="Authors" class="Authors"  
                 parentrelation="Paper"> 
         <VAR name="AuthorName" field="AuthorName" /> 
      </FOREACH> 
   </PAGE> 
 
   <PAGE name="Author" parentrelation="Paper"  
          parentrelation="Authors"> 
      <VAR name="Name" field="Name" /> 
      <VAR name="Title" field="Title" />  
      <VAR name="Email" field="Email" />   
      <VAR name="Tel" field="Tel" />   
      <FOREACH name="Publishs" parentrelation="Author"> 
         <VAR name="Publish" field="Publish" /> 
      </FOREACH> 
<PAGE name="Paper" class="Paper" parentrelation="PaperItem"> 
   <VAR name="Title" field="Title" /> 
   <VAR name="Abstract" field="Abstract" /> 
   <VAR name="Publisher" field="Publisher" /> 
   <FOREACH name="Author" class="Author"  
parentrelation="Paper"> 
      <VAR name="AuthorName" field="Name" /> 
   </FOREACH> 
</PAGE> 
       
<PAGE name="Author" parentrelation="Paper" upbinding="Author"> 
   <VAR name="Title" field="Title" />  
   <VAR name="Email" field="Email" />   
   <VAR name="Tel" field="Tel" />   
   <FOREACH name="Publishs" parentrelation="Author"> 
      <VAR name="Publish" field="Publish" /> 
   </FOREACH> 
</PAGE> 
圖 74、利用 upbinding 將兩個物件合併 
 
 
七、成果與討論 
 
在 BODE 資料模式的研究中，我們設計了一個 BODE 資料模式，並且定義了 BODE
物件定義語言 Class Definition Language，簡稱 CDL。並描述 BODE 資料模式中的資料定
義如何轉換為關聯式資料庫的資料表。此外，在 BODE 資料模式中，利用關聯資料表
(Relation Table)，建立物件之間的各種關聯。因此 BODE 資料模式除了具有簡單的資料
定義格式，且同時可以更彈性的方式描述各種物件之間的關係。我們也實作 BODE 資料
模式處理系統。 
在 BODE 物件定義語言上，利用 CLASS 與 FIELD 標籤建立資料物件的類別。由於
BODED script 中，即包含許多萃取資料的描述。因此，我們設計一個可以根據 BODED 
script 中有關描述要萃取哪些資料的描述，將萃取的資料欄位轉換成資料類別定義的對應
語言，稱為 BODED Script to Class Mapping Description Language，簡稱 BSCMDL。根據
這個語言，BODE 資料模式處理系統可以輸入一個 BODE script，然後輸出一個資料物件
定義程式。並且根據此資料物件定義程式，可以直接在關聯式資料庫中建立相對應資料
表。而沒有 BSCMDL 程式的情況下，亦可根據預設值直接從 BODED script 轉換出資料
類別定義，並建立相關的關聯式資料庫。省去設計資料類別的時間。 
對於來自不同網頁的資料匯整，在此研究中，我們研究資料之間的關聯性，以及在
轉換過程中，這些關聯可能發生的變化，並據此提出資料類別的轉換語言，稱為
CCMDL。根據 CCMDL，BODE 資料模式處理系統可以知道如何將一個資料類別中的資
料，轉換為另一個資料類別中的資料。 
