 3
    
             (a) Word Processor 的 GUI                (b) Word Processor 的 Font Dialog 
圖 1 RTF Word Processor 待測應用程式 
 
 
圖 2 GUI 測試腳本範例 
 
建立(與產生)GUI 測試腳本有許多方法及工具，包括(1)使用 CR 工具 [1, 5, 6, 7, 11]、(2)
建立 FSM 模型[2, 8, 10]及(3)建立測試規格(Test Specification) [3, 4, 9, 12]等，然而不管是使
用何種方法產生，測試腳本的內容無可避免地必須包含一連串繁瑣的事件與驗證，當測試
腳本的長度成長到百筆甚至千筆以上時，就會變的非常難以閱讀，產生維護上的困難，特
別是當 GUI 的操作方式或結構發生變動時，如圖 3 所示 Font子選單從 Format選單移到
Edit選單下時，則測試腳本必須隨著修正(即圖 2 的測試腳本要再修改)，才能進行迴歸測
試(Regression testing)。GUI 測試腳本的產生通常並不困難，但是其維護卻常是很大的負擔，
常常因為難以維護，而必須重新產生測試腳本。 
 
圖 3 Word Processor 的 GUI 結構變動 
 
本計劃提出元件抽象化(Component Abstraction)的觀念，作為解決問題的方法。元件抽
象化是以元件(component)為單位，將 GUI 做抽象化成一個巨集模型(Macro Model)，其中以
巨集元件(macro component)與巨集事件(macro event)來分別封裝 GUI 的結構與行為，巨集元
件用來描述 GUI 上每個基礎元件的相對關係；而巨集事件則描述 GUI 的使用者操作流程。
 5
許多對應的事件，由於工具列本身是一個比較高階的概念(高於按鍵)，所以工具列也會對應
到比較高階的事件(例如工具列具有直接指定 Bold 的能力)。如果我們以遞迴的方式看待巨
集元件，那麼 Word Processor 當然也可以視為是一個巨集元件，它是由工具列、其他巨集
元件及某些基礎元件所構成的，而 Word Processor 這個元件也具備了最高階的事件，如開
檔、存檔、打字、編輯等。 
整個 Word Processor 的 GUI 結構可以表達為圖 4 的巨集元件結構， WordProcessor 包
含了 Menu、ToolBar 與 TextArea 等元件，而 Menu 及 Toolbar 又各別包含不同的子巨集元
件，如此重覆下去，就能將 Word Processor 的 GUI 結構完完整整地封裝起來。每個巨集元
件中有許多對應的巨集事件，每個巨集事件用來表達特定的 GUI 操作行為，就像類別(class)
中的方法(Method)，負責執行該元件所需的動作或事件。透過元件抽象化的機制，我們就
能正確地將待測程式的 GUI 作模型化(modeling)，再利用這個模型來設計測試腳本，則測
試腳本的內容將充分反映待測程式的 GUI 結構，因此當 GUI 變動導致測試腳本需要隨著更
動時，其維護就會得到簡化。 
 
圖 4 Word Processor 的巨集元件樹狀結構 
巨集元件就像是物件導向程式語言中的類別(class)，而巨集元件所包含的元件就相當於
類別中的 member variables (或 attributes)、事件就相當於 member functions (或 methods)。因
此 Component Abstraction 提供了一個將各種 GUI 元件抽象為 GUI 物件(object)的機制，其優
點就好像是將傳統程式改寫為物件導向程式一樣，而巨集模型(macro model)與物件導向中
的類別，在概念就有許多相同之處，圖 5 表示巨集元件與物件導向程式的類別(class)的對
應關係，一個巨集元件中包含許多其他的元件(Component)，就好像類別中的資料成員(Data 
Member)一樣，而這些元件也有可能是另一個巨集元件。 
 
圖 5 巨集模型與類別的對比 
GTML 是一個 GUI 測試模型語言，用來規範巨集模型。圖 6 定義了 GTML 的 EBNF 文
法，對於任何熟悉物件導向程式語言的人而言，瞭解這個 EBNF 文法並不困難，所以我們
 7
 
圖 7 GTML 範例: Word Processor 
 
四、GUI 測試工具 GTT 
本計畫實作一個可以編輯 GTML 的 GUI 測試工具，簡稱 GTT，提供視覺化的巨集模
型編輯工具，讓測試人員可以輕鬆地撰寫 GTML。圖 8 為 GTT 的使用者界面，分成兩種
編輯區，其中 Macro model area 用來編輯巨集模型；Test script area 用來編輯測試腳本。 
 
圖 8 GTT 工具的使用者界面 
 9
七、參考文獻 
 
[1] J. Andersson and G. Bache. “The video store revisited yet again: Adventures in GUI acceptance testing.” In J. 
Eckstein and H. Baumeister, editors, Proc. Extreme Programming and Agile in Software Engineering, 5th 
International Conference (XP’04), volume 3092 of Lecture Notes in Computer Science, pages 1–10, 
Garmisch-Partenkirchen, Germany, 2004. Springer. 
[2] F. Belli. “Finite-state testing and analysis of graphical user interfaces.” In Proc. 12th International Symposium on 
Software Reliability Engineering (ISSRE’01), page 34, Washington, DC, USA, 2001. IEEE Computer Society. 
[3] Jessica Chen, “Expressing Graphical User's Input for Test Specifications,” Lecture Notes in Computer Science, 
Springer-Verlag Heidelberg, Vol. 2480, pp. 347, 2002. 
[4] W.-K. Chen, T.-H. Tsai, and H.-H. Chao. “Integration of Specification-Based and CR-Based Approaches for GUI 
Testing.” In Proc. 19th International Conference on Advanced Information Networking and Applications 
(AINA’05), pages 967–972, Taipei, Taiwan, March 2005. IEEE Computer Society. 
[5] S. Dutta. “Abbot-a friendly JUnit extension for GUI testing.” Java Developer Journal, pages 8–12, Apr. 
2003. 
[6] HP. Hp WinRunner. http://www.mercury.com/us/products/qualitycenter/functional-testing/winrunner.  
[7] IBM. IBM rational robot. http://www-306.ibm.com/software/awdtools/tester/robot.  
[8] Atif.M. Memon, Pollack, M.E.; Soffa, M.L, “Hierarchical GUI test case generation using automated planning,” 
IEEE Transactions on Software Engineering, Vol. 27, No. 2 , pp 144-155, 2001. 
[9] Y. Sun and E. L. Jones. Specification-driven automated testing of GUI-based java programs. In S.-M. Yoo and L. 
H. Etzkorn, editors, ACM Southeast Regional Conference, pages 140–145, Huntsville, Alabama, USA, April 
2004. ACM. 
[10] R. K. Shehady and D. P. Siewiorek. “A methodology to automate user interface testing using variable finite state 
machines.” In Proc. The Twenty-Seventh Annual International Symposium on Fault-Tolerant Computing 
(FTCS’97), pages 80–88, Seattle, Washington, USA, June 1997. IEEE Computer Society. 
[11] 趙宏興，一個測試 Java Swing 圖形使用者介面應用程式的工具，碩士論文，國立台北科技大學資訊工程
研究所，台北，2002 年。 
[12] 蔡東宏，一個支援測試先行編輯模式的 Java GUI 測試工具，碩士論文，國立台北科技大學資訊工程研究
所，台北，2003 年。 
[13] 張哲銘，一個以巨集為基礎的圖型使用者介面測試規格語言，碩士論文，國立台北科技大學資訊工程研
究所，台北，2004 年。 
