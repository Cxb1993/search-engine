 2 
子計畫三：應用於嵌入式異質多核心平台之主動式物
件記憶體回收管理技術與開發工具(1/2) 
 
計畫編號：NSC 98-2220-E-259-002 
執行期限：98 年 8 月 1 日至 99 年 7 月 31 日 
主持人：雍 忠   國立東華大學資訊工程學系 
 
 
一、中文摘要 
 
為了滿足對計算機系統日益增加的效能需求，
許多嵌入式系統都採用分散式的系統架構來達到
這個目的。由於嵌入式系統在功率消耗上的限制，
因此嵌入式系統上的多核心處理器通常採用異質
多核心(heterogeneous multi-core)的架構有愈來愈普
遍的趨勢。由於各種中高階電子裝置需求急速增加，
要藉重 Java語言跨平台的特性以及安全上的考量，
許多廠商使用 Java 語言來撰寫嵌入式應用程式。
然而要在分散式系統平台的嵌入式系統上執行這
些 Java 應用程式，Java 虛擬機器(JVM)和物件記憶
體回收管理機制必須進行相當程度的調整與修
改。 
由於主動式物件系統與如 Java 等可並行化
(concurrent)物件導向語言的使用日漸廣泛，回收不
再使用的記憶體也成為一個日趨複雜的問題。與被
動式物件系統不盡相同的，在主動式物件系統中，
我們不能僅只以可否由系統的根物件(root objects)
到達做為認定物件是否為垃圾(garbage)的基準。在
研究文獻中，有許多以函數式及物件導向程式語言
環境進行記憶體回收的研究，但這些研究所提出的
演算法並無法直接應用在主動式物件系統或角色
(actor)系統。這也引發了許多專注於主動式物件系
統的記憶體回收研究。 
本計畫的焦點在於分散式平台上主動式物件
的記憶體回收。我們將深入觀察現有的記憶體回收
演算法在標示垃圾及清除垃圾步驟中在分散式平
台上的行為模式，並進而提出新的主動式物件記憶
體回收演算法。同時，我們也將針對不同的分散式
平台進行實驗。由於在資源有限的分散式平台，我
們必須使記憶體回收器本身較小且有效率。同時，
本計畫也將我們的主動式物件系統記憶體回收演
算法延伸應用至跨平台的分散式應用平台。最後，
我們將本計畫所發展的主動式物件記憶體回收管
理工具與其他子計畫所發展的關鍵技術與工具進
行整合。 
本計畫之研究進行需時三年，本年度為計畫的
第二年，研究議題重點如下：我們針對以分散式系
統為基礎的嵌入式平台進行深入的研究，並且進行
實驗觀察不同的物件記憶體回收管理機制的效能。
我們開發出適用於以分散式系統為基礎的嵌入式
平台上的主動式物件記憶體回收管理工具做為本
年度的研究成果。 
在本計畫實行中的第一年度計畫裡，我們建立
了基礎的系統平台，將一般 JVM 之物件記憶體回
收機制成功的移植到我們的目標平台，並著手實作
本實驗團隊發展出的新演算法。在本年度中，我們
繼續完成先前規劃的各項工作項目。在本計畫完成
時，我們提出了分散式嵌入式平台物件記憶體回收
管理之解決方案，現正積極著手整理論文準備發
表。 
 
關鍵詞：嵌入式系統、記憶體回收、主動式物件、
角色系統、異質多核心平台、Java、分散式記憶體
回收。 
 
Abstract 
 
In order to fit the increasing performance 
requirement for computing systems under the 
constraints of semi-conductor manufacturing process, 
it becomes a common approach in industry to increase 
the number of cores on chip.  Moreover, it is getting 
popular to use the heterogeneous multi-core 
architecture for meeting the requirement of speed and 
power consumption in the middle and/or high levels of 
embedded systems.  One of the popularly used 
heterogeneous multi-core platforms is the Andes Core 
developed by the Andes Corporation, who is the 
partner of this project.  Since the operating systems 
and executing platforms among various embedded 
devices are widely different, many applications are 
developed in the Java language for its platform 
independency.  In order for these applications to be 
executed on the heterogeneous multi-core architecture, 
a lot of adaptations are required for the Java virtual 
machine (JVM) and the garbage collection 
mechanism. 
With the increasing use of active object systems 
and concurrent object oriented languages like Java, the 
problem of garbage collection to reclaim unused 
memory has become more complex.  Different from 
passive object systems, the criterion for identifying 
garbage in active object systems cannot be based 
solely on reachability from the root objects in the 
systems.  A substantial amount of research has been 
devoted to the area of garbage collection for 
functional and object-oriented languages.  However, 
the garbage collection algorithms for those systems 
 4 
active object systems and experiment on the efficiency 
of the garbage collector in the heterogeneous 
multi-core environment.  In embedded heterogeneous 
multi-core environments, we have to keep the size of 
the garbage collector small and we have to make the 
garbage collection algorithm efficient.  Also, we 
extend the newly develop garbage collection into the 
applications on the distributed heterogeneous 
multi-core platforms. 
After the progress of this year, we will integrate, 
in the next year, our garbage collectors with the tools 
developed by the other sub-projects; namely, the Java 
virtual machine and the dynamic job scheduling 
mechanism. 
 
三、研究方法與成果 
 
Observing the inefficiency of the garbage 
collection algorithms proposed by Kafura et al. are 
mainly driven by the redundant repetitions for 
exploring possible changes of object colors.  We 
propose a new table-driven approach by instrument 
the object dependence graph with two small tables that 
store the partial results of previous visits to an object 
so that the overall algorithm will be more efficient 
than the algorithms by Kafura et al. 
Our new approach transforms the object 
dependence graph into an object dependence forest in 
which each object dependence tree is rooted by an 
active object.  We propose using a table that stores 
the root of the object dependence tree of each object, 
and another table that stores that groups of the object 
dependence trees in a way such that the trees in a 
group have common nodes.  We prove that if two 
object dependence trees have a common node, all the 
nodes in these two trees will have the same garbage 
color according to the definition of garbage actors.  
Hence, our approach avoids the redundant repetitions 
and improves the efficiency of the garbage collector. 
To be precise, our approach may be described in 
the following steps: 
 Initialization: to instrument the object 
dependence graph with the two proposed 
tables. 
 Transformation: to transform the object 
dependence graph into the object 
dependence forest. 
 Joint: to explore whether two object 
dependence trees have a common node. 
 Recursive GC: to reclaim garbage objects 
recursively according to the definition of 
garbage actors using the two proposed 
tables. 
Consider the following object dependence graph. 
 
Figure 1: Unnecessary repeated iterations of Kafura’s 
algorithms 
 
After transformation, the object dependence 
forest consists of 5 object dependence trees rooted by 
nodes A, C, F, I, and K, respectively.  The object 
dependence trees A and C have a common node B, 
and the groups of trees (C, F) and (F, I) also have 
common nodes.  As a result, our approach identifies 
the objects K, L, and O are garbage, which is the same 
as the result by Kafura et al.  However, our approach 
finishes in two iterations while their algorithms need 
10 iterations each at the worst case. 
Following the idea, we develop a new garbage 
collection algorithm for the actor model.  The 
algorithm runs with efficiency on the heterogeneous 
multi-core platforms.  In the future, we will adapt the 
newly developed algorithm into the distributed 
heterogeneous multi-core platforms. 
We set up the work items of this project in this 
year as the following table. 
Step Work Items 
1 Adapt and evaluate the garbage collector 
to the distributed platform 
2 Improve the efficiency of the distributed 
garbage collector 
3 Develop the tools for implementing the 
new distributed algorithm 
 
We describe the details of each work item as 
follows. 
 
1. Adapt and evaluate the garbage collector to the 
distributed platform 
 
A. Goal 
The goal at this stage is to port the distributed 
garbage collector into the CVM at the distributed 
platform. 
 
B. Methodology 
After we port the garbage collector to CVM at 
the Andes Core platform in the first year, we extend 
the garbage collector so that it can reclaim the unused 
objects in the distributed environment.  We start with 
porting the local and global garbage collectors for the 
distributed environment to CVM at the distributed 
platform, and we evaluate the efficiency of the 
distributed garbage collectors ported.  There are a 
few steps: 
 6 
 
四、結論與討論 
 
One of the main themes of this project is a 
research combining the industrial and academic 
interests, which is a tendency getting more and more 
popular in this country.  The young computer 
scientists trained by this project get knowledge in the 
fields like improving the efficiency of garbage 
collection mechanism, optimizing Java virtual 
machines, and applying compiler techniques to 
improve the performance of embedded systems on 
heterogeneous multi-core platforms.  The tools 
developed in our project are practical and may be 
transferred into industry use immediately. 
 
More precisely, this project contributes in the 
following aspects: 
1. The tools of efficient garbage collection 
developed by this project equip the 
embedded systems with automatic 
memory management mechanism. 
2. We enhance the performance of Java 
virtual machines by augmenting the 
efficient garbage collectors. 
3. The tools of efficient distributed garbage 
collection developed by this project 
enhance the multi-core embedded systems 
in the distributed platform. 
4. We unload the burden in memory 
management of programmers for 
embedded systems by facilitating them 
with tools of efficient garbage collection. 
 
In the execution of this project in this year, we 
finish the following work items: 
1. We port the garbage collectors to CVM at 
the distributed platform. 
2. We extend our new table-driven approach 
of garbage collection to the distributed 
environment. 
3. We implement a new distributed version 
of the garbage collection algorithm on 
CVM at the distributed platform. 
4. We conduct benchmark experiments to 
compare the practical efficiency of our 
garbage collectors with the other 
distributed garbage collectors. 
5. We improve the efficiency of our 
distributed garbage collectors on CVM. 
6. We develop a package of tools for 
efficient distributed garbage collection. 
 
For the young computer scientists joining this 
project, they get solid training in the following 
aspects: 
1. Understanding the internal architecture 
of a Java virtual machine. 
2. Studying the various methods of garbage 
collection and automatic memory 
management. 
3. Knowing the ways of improving the 
efficiency of garbage collectors. 
4. Learning the techniques for designing 
good garbage collection algorithms. 
5. Performing experiments on evaluating 
the efficiency of garbage collectors in 
the heterogeneous multi-core platform. 
6. Developing a programmer friendly 
package of Java tools. 
 
When executing this project, we send a technical 
paper in an international conference for publication.  
For now, we are manipulating the data collected in 
this project, and two more technical papers are in 
preparation for submitting to international journals. 
 
五、參考文獻 
 
[1]  G. Agha. Actors: A Model of Concurrent Computation 
in Distributed Systems, MIT Press, Cambridge, Mass., 
1986. 
[2]  Andes Technology. Andes Instruction Set Architecture 
Specification, 2007. 
[3]  D. F. Bacon, P. Cheng, and V. T. Rajan. “A Unified 
Theory of Garbage Collection,” Proceedings of the 
19th Annual ACM SIGPLAN Conference on 
Object-Oriented Programming, Systems, Languages, 
and Applications, pp. 50-68, October 2004. 
[4]  F. Brown. “Incremental Garbage Collection in 
Massive Object Stores,” Proceedings of the 24th 
Australasian Conference on Computer Science, pp. 
38-46, 2001. 
[5]  G. Chen, R. Shetty, M. Kandemir, N. Vijaykrishnan, 
M.J. Irwin, and M. Wolczko. “Tuning Garbage 
Collection in an Embedded Java Environment,” 
Proceedings of Eighth International Symposium on 
High-Performance Computer Architecture, pp. 92-103, 
February 2002. 
[6]  P. Dickman. “Efficient, Incremental, Distributed 
Orphan Detection and Actor Garbage Collection using 
Graph Partitioning and Euler Cycles,” Proceedings of 
International Workshop on Distributed Algorithms 
and Graphs (WDAG'96, now known as DISC, 
published as LNCS 1151), pp 141-158, October 1996. 
[7]  B. Goldberg, and M. Gloger. “Polymorphic Type 
Reconstruction for Garbage Collection without Tags,” 
Proceedings of the 1992 ACM Conference on LISP 
and Functional Programming, pp. 53-65, June 1992. 
[8]  R. Jones and R. Lins. Garbage Collection Algorithms 
for Automatic Dynamic Memory Management, John 
Wiley & Sons Press, 1996. 
[9]  D. Kafura, M. Mukherji, and D.M. Washabaugh. 
“Concurrent and Distributed Garbage Collection of 
Active Objects,” IEEE Transactions on Parallel and 
Distributed Systems, vol. 6, no. 4, pp. 337-350, April 
1995. 
[10]  D. Kafura, D. Washabaugh, and J. Nelson. “Garbage 
Collection of Actors,” Proceedings of the European 
Conference on Object-Oriented Programming on 
Object-Oriented Programming Systems, Languages, 
and Applications, pp. 126-134, September 1990. 
[11]  N.-C. Juul and E. Jul. “Comprehensive and Robust 
Garbage Collection in a Distributed System,” 
Proceedings of International Workshop on Memory 
Management, vol. 637 of Lecture Notes in Computer 
Science, pp 103-115, September 1992. 
[12]  I. Puaut. “Distributed Garbage Collection of Active 
Objects with No Global Synchronisation,” 
Proceedings of International Workshop on Memory 
出席國際學術會議心得報告 
日期： 2010 年 6 月 22 日 
                                 
一、 會議簡介 
International Conference on Supercomputing(ICS)是在高性能計算系統方面全
世界最先進的國際研討會之一。今年的 ICS 會議在日本 Tsukuba 市舉行，共約有
近兩百人與會，32 篇研究論文發表，並有三場專題演講，會議內容十分豐富。 
二、 與會心得 
第一次參加如此大型的國際學術研討會，著實為自己打開了視野。之前為了
自己的研究領域尋找相關的參考資料時，曾閱讀了好幾篇的國際期刊論文，這之
中的作者及研究單位當然也包含了各個不同的國家，但畢竟是透過書面、紙本的
認識，並沒有太多特別的感覺；而當自己與其他來自不同國家近兩百位的研究者，
同在一間會議廳裡聆聽演講，討論這個領域上目前面臨的及未來將遇到的各項議
題時，才深刻地感受到「世界」的感覺。 
資訊這個領域的發展速度是日新月異的，在這樣大型的研討會之中，更讓人
直接地體驗到那股推動這個領域不斷往前的力量，而自己似乎也身在其中。從另
一個角度來說，也必需讓自己能身在其中才行，因為那代表著自己的研究確實是
與世界接軌的，研究的成果的確能為這股推進的力量提供小小的貢獻。 
之前找資料，總是對於跟我目前的研究主題直接相關的才吸收；但在這次體
驗後有感，應該要對於這個領域，包含各種相關的議題做一個更全面性的了解。
能清楚了解這個領域的樣貌，才能了解自己的研究主題在這個領域中的定位，如
計畫編號 NSC 98－2220－E－259－002 
計畫名稱 應用於 Java 虛擬機器之記憶體回收開放式平台 
出國人員姓名 楊翔宇 
服務機構及職稱 東華大學資訊工程學系 兼任助理 
會議時間 2010 年 6 月 1 日 至 2010 年 6 月 4 日 
會議地點 日本筑波縣茨城市 
會議名稱 24th International Conference on Supercomputing (ICS’10) 
無研發成果推廣資料 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：□已發表 ■未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100字為限） 
1. 已完成 2篇技術報告。 
2. 已投稿 1篇國際研討會論文，現正審查中。 
3. 預計完成 2篇學術期刊論文，現正撰寫中。 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500字為限） 
1. 自動記憶體回收管理機制(garbage collection)在學理上仍有許多可改良進步的空
間，本計畫為學術上在此方面的努力之一。 
2. 本計畫為多年期的計畫，大部分成果可望於明年度執行完畢後取得更大的收穫。 
3. 本計畫在實作方面的成果，可能對於業界的技術創新有具體貢獻，現正多方研議申請
專利的可行性。 
