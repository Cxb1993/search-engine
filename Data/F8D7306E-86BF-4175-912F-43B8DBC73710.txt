2目錄 page
摘要 3
1.1 前言及目的 Introduction 3
1.2 研究方法(一) Reversible data hiding and extraction in a 3x4 block 4
1.3 研究方法(二) Adaptive data hiding for an image 5
1.4. 實驗 Experimental results 6
1.5 結論 Conclusion 7
1.5 參考文獻 References 7
1.6 計畫成果自評 11
2.1 前言及目的 Introduction 12
2.2 研究方法 Theproposed algorithm 12
2.3 實驗 Simulation results 16
2.4 結論 Conclusions 17
2.5 參考文獻 References 17
2.6 計畫成果自評部份 20
4non-reversible data hiding techniques cannot recover the original image from the
stego-image, which do not fit the critical requirement of sensitive digital contents,
especially in medical and military images. For this requirement, perfectly reconstructing
the original image and extracting hiding information from the stego image should be
accomplished concurrently.
Celik et al. [6] proposed a lossless data embeddingmethod, which losslessly compresses
the little perceptible portion of the original image to create the extra space for the data
payload. Tian [7] proposed a reversible watermarking using difference expansion, which
embeds the data bit into the least significant bit (LSB) of the expanded difference of two
pixels by using integer Harr wavelet tranform. However, the difference of two pixels less
than a small threshold can be the embedding location. That means the embedding space
almost lies on smooth area. This would cause perceptible noise unless the threshold is
small. Moreover, both papers [6, 7] losslessly compressed the original image features, e.g.
LSB information, to create extra space for hiding data. Since the LSB space of an image
contains large entropy, this requires a lossless compression algorithm of good
performance to reduce the size of the compressed original image features. The proposed
method is to embed data on the edge of an image by adaptively choosing the edgy blocks.
We propose a new reversible data hiding technique on image edge and use the prefixing
technique [8] instead of lossless compression to increase data hiding capacity.
1.2. REVERSIBLE DATA HIDING AND EXTRACTION IN A 3X4 BLOCK
Embedding data on an image produces a stego-image. However, the embedding position
affects the stego-image significantly. Thus, choosing embedding position without much
perceptible distortion is important. Since human visual system (HVS) is less sensitive to
the edge area than the smooth area, the edge pixels can be the proper location to embed
data. To find out the edge pixels, we use the Sobel detector which uses the horizontal and
vertical masks (Gh and Gv) to approximate the gradient of a pixel in an image. In this
section, we only show how to embed and extract data in a 3x4 block of an image by the
horizontal mask Gh. Similarly, we can use the vertical mask Gv or both to do the same
work. At first,we applies Gh to a 3x4 block (Fig. 1) to compute the horizontal
components of the gradients of pixels f and g, as given by,
Ef = Gh(f) = (2j + i + k)−(2b +a + c)
Eg = Gh(g) = (2k + j + l)−(2c + b + d).
For simplicity, we use S = |Ef | + |Eg| to represent the horizontal edge energy of this block.
if S > Te, where Te is a chosen edge threshold. Then this block is an edgy block.
Otherwise, this block is a non-edgy block and skips to the next 3x4 block. If this block is
an edgy block,
we subtract Ef from Eg and obtain the edge difference D, as given by,
D = Eg−Ef = ((2k + j + l)−(2c + b + d))−((2j + i + k)−(2b + a + c))
= (k + l−i−j)−(c + d−a−b).
6The encoder processes each 3x4 block from the most lefttop block to the most
right-bottom block in a row-major fashion. In order to increase data hiding capacity, we
introduce a block-overlapped row-major fashion to hide data in an image. As shown in
Fig. 2, suppose the coordinate of the first pixel of the current processing 3x4 block is (i, j).
Then, the coordinate of the first pixel of the next processing 3x4 block will be (i, j + 1).
In other situation, when the 3x4 block reaches the image right boundary, the coordinate
of the first pixel of the next processing 3x4 block will be (i + 1, 0). By contrast, the
decoder processes each 3x4 block from the most right-bottom block to the most left-top
block in a backward overlapped row-major fashion to correctly extract data and
reconstruct the original image.
However, In the embedding process, a 3x4 block was altered by using the equation (5)
may cause any of the eight pixels(a, b, c, d, i, j, k, and l) overflow (> 255) or underflow
(< 0). For this situation, we applied the prefixing technique [8] in our method. To begin
with, we define a critical block as a 3x4 block applying (5) with b = ±1, which causes any
of the eight pixels of the 3x4 block to be overflow or underflow. In the encoder, if the
block is critical, the encoder wil not embed data in this block but prefix ’0’ to the data
bitstream. In another situation, if the block becomes critical after embedding data, the
encoder wil prefix ’1’ to the data bitstream. In the decoder, if the block is critical, the 
decoder wil drop the last extracted bit. If the dropped bit is ’0’, the decoder wil not 
extract data from this block since that this block is originally critical. If the dropped bit
is ’1’, the decoder wil process this block to extract data. The overal steps for the encoder 
and decoder are illustrated in Fig. 3 and 4, respectively.
1.4 Experimental results
The data bitstream to be embedded is the binary stream produced by Matlab function
rand() together with round() to calculate its nearest integer. We applied the proposed
algorithm to the six 512x512 gray level images:Lena, Baboon, F16, Boat, Barbala, and
Peppers to calculate its maximum data hiding capacity measure by bits per pixel (bpp)
and Peak-to-Signal Noise Ratio (PSNR) under different Te and Td ranging from 20 ~ 100
and 8 ~ 40, respectively. The data hiding capacity tended to increase if Td was set large
as illustrated in Fig. 5. The results can be explained by that more block edgy differences
|D| are likely to fall in the range that is less than Td, so the numbers of embeddable
blocks increase. On the contrary, data hiding capacity tended to decrease if Te was large
as illustrated in Fig. 6. That is, Te controls the numbers of edgy blocks. The larger Te
results in fewer edgy blocks, hence data hiding capacity decreases.
In addition, Table 1 displays the data hiding capacity and PSNR for Lena and Baboon
images under Te=20 and 100, Td=8, 24, and 40. Both test images have high PSNR results
and good data hiding capacity. Moreover, since the Baboon image contains more edges
than the Lena image does, the numbers of edgy blocks increase. Therefore, the Baboon
image demonstrates better data hiding capacity than Lena image does under fixed Te or
Td. To see how Td controls the data hiding capacity and stegoimage quality, we used the
lena image as a test image under Te = 40. When Td = 8, the data hiding capacity was
15271 bits. When Td = 40, the data hiding capacity increased to 55457 bits. The lena
8.
Fig. 1. a 3x4 block
Fig. 2. The block-overlapped row-major
10
Fig. 5. bpp v.s. Td under fixed Te = 40
Fig. 6. bpp v.s. Te under fixed Td = 8
12
2.1 INTRODUCTION
Reversible data hiding [1] embeds a secret message into an image, and generate a
stego-image. After extracting the secret message from the stego-image, it is possible to
recover the original image. There are many applications in military, medical, and
forensic images for reversible data hiding.
Zhicheng Ni et al. [2] proposed a lossless data hiding technique based on histogram
modification. This algorithm uses the zero or minimum point, and the maximum point of
the image histogram to embed secret data. The algorithm is very simple and the
stego-image could get very high visual quality. Jun Tian proposed a reversible data hiding
using difference expansion of pixel values [3, 4]. After doubling the difference of two
pixels, the least significant bit of the difference could embed a secret bit in it. This
algorithm could implement with repetition so that the capacity is quite high.
Vleeschouwer proposed an interesting reversible data hiding technique which uses the
“center of mass” of the circle mapped from the histogram [5].
In this paper, we propose a new method by shifting the mean values of two groups of
pixels values in a block of an image. The method can do reversible data hiding for
lossless environment and also extract correct secrete data in a low noisy environment.
2.2 THE PROPOSED ALGORITHM
An image is divided into a sequence of blocks. The block size can be 2×2, 2×4, 4×2,
4×4, etc. If a block that is suitable to embed a data bit it is called embeddable; otherwise
it is not embeddable. Each block is divided into two groups. The proposed reversible data
hiding technique uses the concept of the mean value of a group in an embeddable block.
The number of the embeddable blocks increases as the block size decreases. It is possible
that the value of a pixel in the block may become overflow or underflow if it is shifted by
a certain value to embed a data bit. We adopt the histogram modification to prevent
overflow and underflow. The coordinate of the modified pixels for histogram
modification is the side information that is needed for the receiver to recover the image.
Because the number of the pixels needed to be modified is usually quite small, we can
embed the side information into the image before embedding the secret data. Like
Vleeschouwer’s technique[5], our technique could resist against the JPEG compression
by using a multiple bit hiding strategy.
The flowchart of embedding and extracting procedure are depicted in Figure 1 and
Figure 2, respectively. They both include histogram modification. In the embedding
process, we need to record the coordinates of the modified pixels as side information after
histogram modification, and embed this side information together with the secret data
into the pre-processed image. In the extracting phase, we can use this side information
and histogram modification to recover the original one.
We also need to design a data format of secret data for extraction. The data format of
the secret data is shown in Figure 3. The first bit b1 means whether the image is
pre-processed by histogram modification or not. If b1 is 0, there is no pixel needed to be
shifted, the other bits from b2 ~ bN are secret data, where N is the number of the total bits
of side information. If b1 is 1, the image has some modified pixels. b2 ~ b7 record how
many the modified pixels are, and b8 ~ b(16n+7) are the coordinates of the modified pixels,
where n is the decimal value of b2 ~ b7. The rest are the secret data we want to embed.
14
Figure 4: 2 kinds of pixel grouping for 4 kinds of blocks
To explain the proposed reversible data hiding algorithm, the following notations are
used.
G1: The set of black pixels in a block in Figure 4
G2: The set of gray pixels in a block in Figure 4
P1: a pixel in G1
P2: a pixel in G2
F(P1) is the pixel value of P1
F(P2) is the pixel value of P2
M1: The mean of pixel values in G1
M2: The mean of pixel values in G2
T: A threshold value
S: A bit we want to embed or extract
D: The difference of the two mean values, M1 and M2,
D = M1－M2
After histogram modification, since 0 ＜ M1 ＜ (255－T) and 0 ＜ M2 ＜ (255－
T) we have (T－255) ＜ D ＜ (255－T). Figure 5 shows the range of D after histogram
modification. The black line means the difference value D before our watermark
embedding algorithm.
Figure 5 The range of difference value D of a block after histogram modification
16
long slash area is [0, T), in Figure 7(a), the short slash area is [2T, 255], the long
backslash area is [-T, 0) and the short backslash area is [-255,-2T). The short slash area
and the short backslash area mean that the pixel value whose mean value is in this area is
shifted by T but is not embedded a secret bit, and the long slash area and long backslash
area mean that the pixel whose mean value is in this area is shifted by T and is embedded
a secret bit.
(a)
(b)
Figure 7 Shifting of D when the secret bit (a) 0 is extracted (b) 1 is extracted.
2.3 SIMULATION RESULTS
Two standard test images, Lena and Baboon, are used to be experimented by our
proposed technique. We show our experimental images of 256×256 Lena in Figure 8
using the side grouping method with 2×2 block size and different thresholds. Secondly,
we show the experimental results of 256×256 Baboon in Figure 9 using the interlaced
grouping method with 2×2 block size and different thresholds. Table 1 shows PSNRs for
various thresholds. Table 2 shows capacity and bitrate of Lena using interlaced grouping
method with different thresholds and block sizes. Table 3 shows capacity and bitrate of
Lena using the side grouping methods with different thresholds and block sizes. From
these three tables, when the threshold becomes big, the embedding capacity becomes
large. Table 4 shows the correct bits extracted from JPEG images with different
quality factors using side grouping and 2×4, 4×4, and 4×8 block sizes. It shows that the
correct bits extracted from JPEG images with different quality factors using side
grouping and 2×4, 4×4, and 4×8 block sizes
18
(a) (b)
(c) (d)
(e) (f)
Figure 8:(a) Original 256×256 gray level image (b) T＝1(c) T＝2(d) T＝3 (e) T＝4 (f) T=5
(a) (b)
(c) (d)
(e) (f)
Figure 9: (a) Original 256×256 gray level image (b) T＝1 (c) T＝2 (d) T＝3(e) T＝4 (f) T＝5
20
1 2 3 4 5
Capacity 3358 7051 9397 10962 12004
2×2
Bitrate 0.0589 0.1076 0.1434 0.1673 0.1832
Capacity 1202 2267 3154 3780 4265
2×4
Bitrate 0.0183 0.0346 0.0481 0.0577 0.0651
Capacity 1776 3180 4241 4956 5426
4×2
Bitrate 0.0269 0.0485 0.0647 0.0756 0.0828
Capacity 345 670 1002 1280 1506
4×4
Bitrate 0.0053 0.0102 0.0153 0.0195 0.0230
Table 3: Capacity and bitrate of Lena using side grouping methods with different
thresholds and block sizes
90 80 70 60 50 40 30 25 20
2×4
10
0
10
0
10
0
97 87 81 79 67 59
4×2
10
0
10
0
10
0
96 95 84 62 54 46
4×4
10
0
10
0
10
0
10
0
10
0
98 88 83 64
Table 4: The correct bits extracted from JPEG images with different quality factors
using side grouping and 2×4, 4×4, and 4×8 block sizes
2.6 計畫成果自評部份: 研究內容與原計畫相符，達成預期目標應該適合在學術期
刊或會議發表。
Threshold
Block
Size
QF
block
size
mechanisms and new applications and services 及兩 場 special sessions on future Internet and
co-operative networking, and sensor networking in multimedia delivery., 32 篇論文, 為一小型
國際會議。論文來自歐洲 、 台灣及中國大陸等。近年來世界各國均積極爭取主辦國際會議之機
會，除了提升主辦國家國際形象之外，亦可增加觀光收入。因此，如何爭取國際會議在國內舉辦
可以說十分 重要。
三、考察參觀活動: 無。
四、建議: 國科會應該有策略提昇國內會議之國際化以提升台灣之國際知名度。
五、攜回資料名稱及內容: Proceeding of 4th International Mobile Multimedia Communications
Conference 2008
respectively. They both include histogram
modification. In the embedding process, we need
to record the coordinates of the modified pixels as
side information after histogram modification,
and embed this side information together with the
secret data into the pre-processed image. In the
extracting phase, we can use this side information
and histogram modification to recover the
original one.
We also need to design a data format of secret
data for extraction. The data format of the secret
data is shown in Figure 3. The first bit b1 means
whether the image is pre-processed by histogram
modification or not. If b1 is 0, there is no pixel
needed to be shifted, the other bits from b2 ~ bN are secret
data, where N is the number of the total bits of side
information. If b1 is 1, the image has some modified pixels.
b2 ~ b7 record how many the modified pixels are, and b8 ~
b(16n+7) are the coordinates of the modified pixels, where n
is the decimal value of b2 ~ b7. The rest are the secret data
we want to embed.
Figure 1: The embedding procedure
Figure 2: The extracting procedure
Figure 3: The data format of embedded data
2.1 Histogram Modification
To prevent overflow and underflow, we use histogram
modification before the shifting of mean value of a group in
the coding block in the embedding phase.
For the pixels whose gray values are greater than 255-T,
the gray values of these pixels need to be decrease by T so
that the gray values become equal to or less than 255-T. For
the pixels whose gray values less than T, the gray values
need to be increased by T so that the gray values become
equal to or greater than T. The equation of histogram
modification for a pixel f(x,y) in an image is:
( , ) ,if ( , ) 255
( , ) ( , ) ,if ( , )
( , ) ,otherwise
f x y T f x y T
f x y f x y T f x y T
f x y
  
  

For a given image, we embed 1 bit in each embeddable
block of the image. The block size could be 2×2, 2×4, 4×2,
or 4×4. The block is divided into two groups, G1 and G2, as
shown in Figure 4. The grouping methods are called side
grouping and interlaced grouping.
Figure 4: 2 kinds of pixel grouping for 4 kinds of blocks
To explain the proposed reversible data hiding
algorithm, the following notations are used.
G1: The set of black pixels in a block in Figure 4
G2: The set of gray pixels in a block in Figure 4
P1: a pixel in G1
P2: a pixel in G2
F(P1) is the pixel value of P1
F(P2) is the pixel value of P2
M1: The mean of pixel values in G1
M2: The mean of pixel values in G2
T: A threshold value
S: A bit we want to embed or extract
D: The difference of the two mean values, M1 and M2,
D = M1－M2
After histogram modification, since 0 ＜ M1 ＜ (255
－T) and 0 ＜ M2 ＜ (255－T) we have (T－255) ＜ D
＜ (255－T). Figure 5 shows the range of D after
number of embeddable blocks and leads to a high capacity. Our
technique could get high PSNR values in the data hided images
because only half of pixels in a block are changed other than total
of pixels. Also, we can extract secret data correctly in a low
noisy environment due to JPEG compression.
(a) (b)
(c)
(d) (e)
(f)
Figure 8:(a) Original 256×256 gray leve limage (b) T＝1
(c) T＝2(d) T＝3 (e) T＝4 (f) T=5
(a) (b)
(c)
(d) (e)
(f)
Figure 9: (a) Original 256×256 gray level image (b) T＝1
(c) T＝2 (d) T＝3(e) T＝4 (f) T＝5
Threshold 1 2 3 4 5
PSNR 51.1411 45.1205 41.5987 39.0999 37.1617
Table 1: PSNR of stego-image with different thresholds
1 2 3 4 5
Capacity 4635 8172 10539 12064 12961
2×2
Bitrate 0.0707 0.1247 0.1608 0.1841 0.1978
Capacity 3039 5021 6158 6684 6998
2×4
Bitrate 0.0464 0.0766 0.0937 0.1020 0.1068
Capacity 3085 5051 6084 6684 7011
4×2
Bitrate 0.0467 0.0771 0.0928 0.1020 0.0170
Capacity 1085 1959 2563 2981 3232
4×4
Bitrate 0.0166 0.0298 0.0391 0.0455 0.0493
Table 2: Capacity and bitrate of Lena using interlaced
grouping method with different thresholds and block sizes
1 2 3 4 5
Capacity 3358 7051 9397 10962 12004
2×2
Bitrate 0.0589 0.1076 0.1434 0.1673 0.1832
Capacity 1202 2267 3154 3780 4265
2×4
Bitrate 0.0183 0.0346 0.0481 0.0577 0.0651
Capacity 1776 3180 4241 4956 5426
4×2
Bitrate 0.0269 0.0485 0.0647 0.0756 0.0828
Capacity 345 670 1002 1280 1506
4×4
Bitrate 0.0053 0.0102 0.0153 0.0195 0.0230
Table 3: Capacity and bitrate of Lena using side grouping
methods with different thresholds and block sizes
Threshold
Block
Size
Threshold
Block
Size
An Hybrid Error Concealment Method with Data Hiding for
H.264 over Wireless Network
Renn-Hwa Hsieh
Department of Computer Science
National Tsing Hua University
Hsinchu, Taiwan
u881521@alumni.nthu.edu.tw
Long-Wen Chang
Department of Computer Science
National Tsing Hua University
Hsinchu, Taiwan
lchang@cs.nthu.edu.tw
ABSTRACT
With the development of internet, video
communication becomes important in human’s 
life. H.264 is a new standard for video coding. It
is very suitable for video communication.
However, in a network, especially in a wireless
network, transmission error is inevitable so that
packet loss and bit error occur very often. In this
paper, we propose a new hybrid error
concealment method with data hiding for H.264.
It combines the advantages of temporal error
concealment (TEC) and spatial error concealment
(SEC) for the loss of macroblocks. Also, we use a
data hiding technique to embed the directional
information for each 8 x 8 block for directional
interpolation. Our method is suitable for the error
concealment in H.264 video communication over
wireless network. Experimental results of two
video sequences called foreman and news show
that the proposed method outperforms the
conventional TEC and SEC and their hybrid
method.
Keywords: H.264, error concealment, data
hiding, wireless network
6. INTRODUCTION
H.264[1,2] is a new standard for video
coding. It is very suitable for video
communication. However, in a network,
especially in a wireless network, transmission
error is inevitable so that packet loss and bit error
occur very often. In H.264 standard, TEC
(temporal error concealment) is only used in a
P-frame and it takes use of the dependence of the
current frame and its reference frame. In a P-slice,
every macroblock (MB) has its motion vector
(MV) so that it can reference its relative MB in
the reference frame. When the current frame
loses a MB (MV is lost), TEC selects a new
MV for this lost MB in the reference frame. The
best MB in the reference frame will be chosen to
substitute the lost MB in the current frame. The
algorithm to choose the best MV is called
“Boundary Matching Algorithm” (BMA)[3,4].
Similar to TEC, SEC (spatial error concealment)
is only used in an I-frame and the idea of SEC is
to recover the lost MB by its surrounding MBs in
the current frame with an interpolation algorithm.
The interpolation algorithm in H.264 is bilinear
interpolation (BI) that means to interpolate the
lost pixel value in both vertical and horizontal
direction. When a lost pixel is being interpolated,
the four pixels of the surrounding MBs in vertical
and horizontal direction are chosen.
BI is just a simple algorithm for SEC in
H.264 standard andit can’t recover edges
because ecause it handles all kinds of MBs in
the same way. No matter what the MB is smooth
or complicated, the interpolation methods are all
the same. The reconstructed MBs are usually
“blured” and the edges can’t be recovered very 
well.
Many researchers try to improve the
interpolation algorithm on SEC. One of the most
popular refined algorithms is “Directional 
Interpolation” (DI) [5, 6]. Unlike BI, DI can
interpolate a lost MB in 16 directions so that the
reconstructed MB will be more suitable to its
surrounding MBs. Because every lost MB can
choose the most suitable direction to perform
interpolation, better edges will be recovered than
BI.
In this paper, we will propose a hybrid
interpolation is performed. The second idea is to
divide a 16x16 MB into four 8x8 MBs to perform
interpolation, and the third idea is to hide the
directions of a MB for interpolation.
A. Select More Suitable Reference Pixels while
Directional Interpolation Is Performed
When packet loss occurs during video
communication, the whole slice may be lost
together. To prevent MBs from being lost
continuously, H.264 may use error resilience
tools to rearrange the order of MBs, such as
flexible microblock ordering (FMO). As Figure
1 shows, the black MBs may be in the same slice
with the lost MB when FMO is used so that they
may be lost at the same time. So, E1 and E2 may
not be available for interpolation while D1 and
D2 may be more possibly available.
Thus, we think it is more suitable to limit the
reference pixels for directional interpolation to
the outer boundary of the lost MB. As Figure 2
shows, the black region is the lost MB and the
white region is the outer boundary of the lost MB
for directional interpolation.
Figure 1: Problem on directional interpolation (E1 and E2
may be lost with the lost MB)
Figure 2: Limit the boundary for directional interpolation
B. Divide a 16x16 MB into four 8x8 MB to
Perform Interpolation
The second idea we proposed is to divide a
16x16 MB into four 8x8 MBs to perform
interpolation. Although DI can recover edges
better than BI, sometimes a 16x16 MB may be
“complicated” and may have not only one 
direction in itself. If we only use one direction to
reconstruct a whole 16x16 MB, the performance
may be bad in a complicated MB. So, we think it
is better to divide a lost 16x16 MB into four 8x8
MBs to perform DI separately.
As Figure 3 shows, Block 0 consults the
up-left corner’s direction (Region0), Block 1
consults the up-right corner’s direction (Region
1), Block 2 consults the bottom-left corner’s 
direction (Region 2), and Block 3 consults the
bottom-right corner’s direction (Region3). Thus,
each 8x8 MB has its interpolation direction.
Figure 3: Divide a 16x16 MB into four 8x8 MBs
If we hide data in every MB, the overhead
may be too large. So we only hide data in the
MBs that have edges. We take a 16x16 MB as the
unit to determine whether the data should be
hidden in it. To examine whether a MB should
hide data or not, we set a threshold “T”. If the 
mean square error to the average value of a
16x16 MB is larger than T, we will hide the data
of the MB. When a 16x16 MB has to hide data, it
takes 12 bits (each 8x8 MB takes 3 bits, and
totally takes 3x4=12 bits). In Figure 6, “0” 
represents the MBs without data hiding, “1” 
represents the MBs having data hiding.
To further reduce the overhead in data hiding, if
the four 8x8 MBs in a 16x16 MB have the same
direction, we just hide 3 bits (one direction) in a
16x16 MB. In Figure 7, “0” represents the MBs
without data hiding, “1” represents the MBs have
to hide data (12 bits), and  “1” represents the
MBs only have one direction (3 bits).
Figure 6: A bit map for each MB (0: repents the
MBs without data hiding; black 1: with data
hiding—12bits/MB)
Figure 7: A new bit map for each MB (0: repents
the MBs without data hiding; black 1: with data
hiding—12bits/MB; red 1: with data
hiding—3bits/MB)
As Figure 8 shows, there are sixteen 4x4
DCT block in a 16x16 MB so that a 16x16 MB
can hide 16 bits. In Figure 9, the 0 to 15 array
represents the 16 positions in a 16x16 that are
chosen to hide data. D(0) is used to represent the
bit map where “0” means no direction is hidden 
in the MB while “1” means the directions are 
hidden in the MB. D(1) is used to represent the
direction type of the MB where “0” means single 
direction while “1” means multi direction. D(2) 
to D(13) are used to represent the directions in
Table 1. If there is only one direction, only D(2)
to D(4) will be used. Because there are at most 14
bits to be hidden in a MB, D(14) and D(15) will
not be used. According to our experience, the
probability of data hiding for a MB is about 37%
and the probability of hiding only one direction
for a MB is about 12%. A 16x16 MB takes about
4.71 bits overhead for data hiding in average (1 +
1*0.37 + 12*0.25 + 3*0.12= 4.71).
Figure 8: A 16x16 MB in DCT domain
Figure 9: The usage of the hidden data
reconstructed MB. Directional interpolation uses
only one direction so that the other directions
can’t be recovered. The performance of our 
proposed method is much better than other
methods.
(a)
(b)
(c) (d)
(e) (f)
Figure 11: The first frame of foreman (CIF size,
QP=28) (a) original; (b) with data hiding; (c) lost;
(d) BI; (e) DI; (f) proposed
(a)
(b)
(c)
(d)
(e) (f)
Figure 12: The first frame of news (CIF size,
QP=28) (a) original; (b) with data hiding; (c) lost;
(d) BI; (e) DI; (f) proposed
( a) (b)
(c)
(d) (e)
(f)
Figure 13: Zoom in image of the first frame of
foreman (CIF size, QP=28);(a) original; (b) with
data hiding; (c) lost; (d) BI; (e) DI; (f) proposed
Figure 14 is the zoom in image of Figure 12.
We can see from (a) the lost MB has 3 edges in
