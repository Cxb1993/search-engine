The rapid advancement of positioning technologies and 
wireless communication has made many mobile services 
a reality. Among them, location-based services (LBS) 
are the most commonly used ones. Spatial queries that 
request for information related to the position of a 
user have been highly demanded in such networks. The 
kNN query and range query are two of the most-
mentioned services in this respect. Mechanisms 
designed for such services are often constrained by 
limited resources available in the networks.  
In this project, we address issues related to 
continuous spatial queries in a MP2P environment. We 
propose two protocols to tackle continuous kNN query 
and continuous range query problems, respectively. 
There are two main techniques proposed in our 
protocols: location awareness and update 
collaboration. When monitoring a continuous query, a 
mobile node utilizes its own location to reduce the 
need of location update, and further prolongs its 
safe period with respect to the query issuer. 
Furthermore, nodes collaborate to share location 
information about the query issuer, thereby cutting 
communication traffic in the network. The cost of 
processing a continuous query is taken as a 
performance metric in our research.  
Research result of the continuous kNN query has been 
presented in an international conference, and the 
result of continuous range query had submitted for 
possible journal publication. 
英文關鍵詞： Continuous k nearest neighbor query, continuous range 
query, continuous spatial query, mobile peer-to-peer 
network. 
 
 I 
 
Ҟᒵ 
΋ǵᄔाǺ .......................................................................................................................................... 1 
Βǵ߻ق .............................................................................................................................................. 2 
ΟǵࣴزҞޑ ...................................................................................................................................... 3 
ѤǵЎ᝘௖૸ ...................................................................................................................................... 3 
ϖǵࣴزБݤ ...................................................................................................................................... 5 
5.1 ೱុന߈ k ঁᎃۚࢗ၌ ....................................................................................................... 6 
5.2 ೱុጄൎࢗ၌ ..................................................................................................................... 10 
Ϥǵ่݀ᆶ૸ፕ ................................................................................................................................ 12 
ΎǵୖԵЎ᝘Ǻ ................................................................................................................................ 12 
Ζǵीฝԋ݀ԾຑǺ ........................................................................................................................ 13 
ߕკǺ ................................................................................................................................................ 15 
ߕᒵǺ 
ว߄ܭ International Conference on Mobile Communications, Networking and Applicationsϐፕ
ЎǺLoco-cKNN: An Extended Safe Time based cKNN Query Protocol in MP2P Networks ......... 21 
 
 2 
 
of location update, and further prolongs its safe 
period with respect to the query issuer. 
Furthermore, nodes collaborate to share location 
information about the query issuer, thereby 
cutting communication traffic in the network. 
The cost of processing a continuous query is 
taken as a performance metric in our research.  
Research result of the continuous kNN 
query has been presented in an international 
conference, and the result of continuous range 
query had submitted for possible journal 
publication.  
Keywords: Continuous k nearest neighbor 
query, continuous range query, continuous 
spatial query, mobile peer-to-peer network. 
 
Βǵ߻ق 
߈ԃٰǴᒿ๱೯ૻזೲว৖ᆶࣽמޑ຾
؁Ǵᆛሞᆛၡޑว৖Ψ΋ВίٚǴЀځࢂค
ጕᆛၡᆶՉ୏ीᆉޑِೲஙଆᆶදϷ׳зΓ
ӑຝుڅ[27][28][30]ǴԶځ΢ޑᔈҔΨВᖿ
ӭϡᆶख़ाǶᙖҗՉ୏ۓՏמೌᆶฯᡏᇙ೷
ޑ຾؁ǴՉ୏း࿼္ຫٰຫදϷޑ΋໨ଛഢ
൩ࢂǴڀഢӵӄౚۓՏس಍(Global Positioning 
System, GPS)ޑۓՏး࿼ǶՉ୏း࿼ନΑคጕ
೯ૻфૈѦǴΞ໒৖р೚ӭཥޑၮҔሦୱǴ
ځύǴΞаՏ࿼ࣁ୷ᘵޑ୍ܺ(location-based 
service, LBS)[17]നࣁ዗ߐǶ 
аՏ࿼ࣁ୷ᘵޑ୍ܺࡰޑࢂǴගٮᆶ٬
ҔޣՏ࿼࣬ᜢޑϷਔၗૻǴаᅈى٬Ҕޣ྽
ਔޑሡ؃ǶٯӵǴᡉҢ٬Ҕޣ܌ӧՏ࿼ߕ߈
ޑӦკǴջࢂ΋தـޑၮҔǶځύǴޜ໔ࢗ
၌ (spatial query)׳ࢂ΋৲৲࣬ᜢޑ୍ܺ໨
ҞǶԜᅿࢗ၌୷ҁ΢൩ࢂǴӧคጕᆛၡᕉნ
ΠǴЍජаޜ໔ύޑၗૻࣁࢗ၌Ҟ኱ޑᔈ
ҔǶதҔޑޜ໔ࢗ၌ᜪࠠёаϩԋ൳ᜪǴ᝽
ӵന߈ޑᎃۚࢗ၌(nearest-neighbor query)Ǵ൩
ࢂפрᚆՉ୏ࢗ၌ޣന߈ޑၗ਑ނҹ(܈ᆀࣁ
ၗ਑ᗺ)ǴٯӵפډຯᚆҞ߻Տ࿼Ǵന߈ޑ΋
ৎ໭۫ǵന߈ޑуݨઠ฻Ǵ೭೿ࢂᆶޜ໔Ԗ
ᜢ߯ޑࢗ၌ǹ۳Πۯ՜Ǵёᄽᡂԋ׳΋૓ϯ
ޑᚆࢗ၌ޣന߈ޑkঁၗ਑ᗺࢗ၌(k-nearest 
neighbor query or kNN)Ǵӵפຯᚆന߈ޑΟৎ
໭۫฻ǶԶќ΋໨தـޑࢗ၌ˇጄൎࢗ၌
(range query)Ǵ߾Ьाࢂࢗ၌ຯᚆ٬Ҕޣ΋ۓ
ຯᚆϣϐ܌Ԗၗ਑ᗺǹٯӵǴᚆ٬Ҕޣ΋Ϧ
ٚϣޑ܌Ԗᙴଣ฻฻ǶᗋԖืαࢗ၌(window 
query)߾ࢂќ΋ޜ໔ࢗ၌ࠠԄǴԜᜪޜ໔ࢗ၌
ࢂӃ๏ۓ΋ঁࢗ၌୔ୱǴԶाࢗ၌ӧ၀୔ୱ
ϣޑ܌Ԗၗ਑ᗺǹᖐٯٰᇥǴࢗ၌ӧࢌ΋ቶ
൑ጄൎϣޑೡ୧इۺࠔޑ܌Ԗ۫ৎǶ΢ॊޑ
ޜ໔ࢗ၌ࢂၨ୷ҁޑࢗ၌ࠠԄǴԜѦǴᗋԖ
ӵϺሞጕࢗ၌(skyline query)Ǵ߾ࢂਥᏵຯᚆ
ឦ܄ϐѦǴᗋୖԵځдߚޜ໔࣬ᜢޑឦ܄ӵ
ሽ਱฻຾Չࢗ၌ޑ୏բǴаᅈى٬Ҕޣόӕ
ឦ܄ޑሡ؃Ƕ 
ᗨฅᆶޜ໔࣬ᜢޑၗ਑ࢗ၌Ǵ٠ߚۈܭ
คጕՉ୏ᆛၡޑр౜Ǵٯӵ୷ܭӦ౛კၗၗ
ૻ(GIS)ޑᔈҔǴ൳Я೿ᆶՏ࿼࣬ᜢǶՠҗܭ
Չ୏း࿼ޑр౜Ǵ٬ளԜ΋ᔈҔ׳ࣁቶݱᆶ
ख़ाǶԐӧ1980ԃжǴ൩ςԖᏢޣଞჹޜ໔
࣬ᜢޑၗૻࢗ၌Ǵ຾ՉࣴزǶԐයޑޜ໔ࢗ
၌ၨࣁൂપǴឦܭၨࣁۓ܄ޑޜ໔ၗ਑ࣴ
زǴҭջό๱ख़ނҹ(Ѐځࢂ٬Ҕޣ)ޑ୏ᄊ౽
୏܄ǶՠӧՉ୏ᕉნΠǴޜ໔ࢗ၌ޑ᝼ᚒ൩
ᅌᅌ౐ੋډ܌ࢗ၌ޑ኱ޑނࢂց཮౽୏ޑ᝼
ᚒǴҭջၗ਑ᗺҁيࢂց཮όᘐ౽୏Ǵ׳຾
΋؁ᇥǴࢗ၌ޣҁيΞࢂց཮౽୏Ƕа߻ॊ
ޑٯηٰᇥǴ໭۫ᆶᙴଣࢂឦܭᓉᄊޑၗ਑
ᗺǴό཮౽୏Ƕՠӵ݀܌פޑၗ਑ᗺࢂځѬ
ޑՉ୏࿯ᗺǴӵ΋፶ीำًाפന߈ޑӕً
ՉޑΟ፶ीำًǴ൩ࢂ΋ٯǴӧ೭΋ঁٯη
ύǴࢗ၌ޣᆶ೏ࢗ၌ޣ೿ёૈόᘐ౽୏Ƕၗ
਑ᗺ཮౽୏ޑ௃ݩΠǴޜ໔ࢗ၌ޑୢᚒ൩཮
КၨፄᚇǴᡉฅሡाࢌᅿำࡋޑၗ਑ᗺՏ࿼
ӣൔǴωё຾Չࢗ၌่݀ीᆉǶ 
໺಍ޑޜ໔ࢗ၌Ǵதଷ೛ࢗ၌ࢂҥջޑ
ൂ΋ޑǴΨ൩ࢂᇥǴࢗ၌ޣѝा؃Ҟ߻ޑ௃
ݩǴൂѝा؃྽Π၀ᕓ໔ޑӣൔǴҭջس಍
ѝሡӣൔ྽Πޑ่݀๏ࢗ၌ޣǴࢗ၌୏բ൩
ᆉ่״Ƕՠᒿ๱คጕး࿼ޑ౽୏܄፦Ǵ߈ٰ
ཥࠠԄޑޜ໔ࢗ၌த཮࡭ុ΋ࢤਔ໔Ǵᆀࣁ
ೱ ុ ܄ ޑ ޜ ໔ ࢗ ၌ (continuous spatial 
query)Ƕӧೱុ܄ޑޜ໔ࢗ၌ύǴ΋ঁޜ໔ࢗ
၌୏բ཮࡭ុ΋ࢤ٩٬Ҕޣ܌ुޑਔ໔Ǵӧ
೭ࢤਔ໔ύǴҗܭ࿯ᗺޑ࡭ុ౽୏Ǵࢗ၌ޑ
่݀཮ᒿਔׯᡂǴࡺ໪ஒനཥޑࢗ၌่݀࡭
ុӣൔ๏ࢗ၌ޣǶа߻ॊޑीำًᔈҔࣁ
ٯǴ΋፶ीำًёૈ཮ࢗ၌҂ٰޑΜϩដϐ
ϣǴ܌ԖຯᚆѬ΋ϦٚϐϣޑӕًՉޑीำ
ًՏ࿼ǶԜ΋ӢનޑᏤΕΨ஥ٰΑཥޑ᝼
ᚒǴࣴزӵՖаനϿޑԋҁӵคጕ೯ૻໆǴ
ၲԋࢗ၌่݀ӧࢗ၌ਔ໔ϣǴ΋ޔߥ࡭҅ዴ
ޑҞ኱Ƕ 
а۳ှ،ೱុ܄ޜ໔ࢗ၌ޑБݤǴӭࢂ
ଷ೛ᆛၡύӸӧ΋໣ύԄޑၗ਑՛ܺᏔǴ౽
୏ύޑނҹ܈ࢂࢗ၌ޣ߾όᘐӦӛԜ՛ܺᏔ
׳ཥځՏ࿼ǴӵԜǴ೸ၸคጕ೯ૻǴ՛ܺᏔ
 4 
 
spatial queries)ޑ᝼ᚒǴ໒ۈڙډቶݱޑ௖
૸Ƕӧ[25]ޑࣴز္ǴբޣॺගрΑ܌ᒏޑԖ
ਏ୔ୱ(validity region)ޑཷۺǴҞޑࢂᡣ཮౽
୏ޑࢗ၌ޣਥᏵҞ߻ޑՏ࿼ٰ،ۓӃ߻ࢗ၌
่݀ޑԖਏ܄ǴӧԜǴԖਏ୔ୱޑۓကࢂࡰ
Ӄ߻ࢗ၌่݀܌х֖ޑၗ਑ᗺϝࢂԖਏޑޜ
໔ጄൎǶ߈ٰǴᜪ՟ޑཷۺӜຒɡӼӄ୔ୱ
(safe zone)ΨӧЎ᝘ύ೏ගр[2]Ǵځࡰޑࢂҗ
΋ဂٛӺၗ਑ᗺ(guard objects)܌ीᆉрٰޑ
ё᎞ጄൎǴёዴߥࢗ၌ޣӧԜጄൎϣ౽୏
ਔǴӃ߻ࢗ၌ၸޑ่݀٩ᙑ҅ዴԖਏǴค໪
ख़ཥࢗ၌ǶځдᗋԖճҔ Voronoi კޑᐒڋ
[20][26]ǴΨ೿ࢂࣁΑှ،ޜ໔ࢗ၌ޑೱុ܄
ୢᚒǶӧ[26]ύǴଞჹന߈ᎃۚ᝼ᚒ(NN)Ǵஒ
ၗ਑ނҹ٣Ӄϒаೀ౛ǴᓯӸӧ R-tree ္Ǵ
٠а Voronoi კ߄Ңၗ਑ᗺϩթޑ௃׎ǹӵԜ
΋ٰǴёճҔ Voronoi კזೲӦೀ౛ϐࡕޑࢗ
၌Ǵஒന߈ᎃۚޑࢗ၌่݀Ǵӣ໺๏ࢗ၌ޣǶ
ӕਔЬᐒΨ཮΋ٳߕ΢၀่݀ޑԖਏਔ໔Ǵ
ዴߥӧ΋ࢤਔ໔ϣࢗ၌่݀ό཮ᡂ୏ǶՠԜ
Бݤѝૈೀ౛ന߈ᎃۚࢗ၌(1NN)Ǵ٠ό፾Ҕ
ܭӭঁᎃۚࢗ၌ୢᚒ(kNN)ǶځচӢࢂ཮٬ள
Voronoi კၸܭፄᚇǴ྽ၗ਑ނҹຫӭǴीᆉ
ໆ཮ᡂளΜϩᚳεǶ[20]ޑࣴز߾ׯ๓ΑԜ΋
ୢᚒǴځБݤό٬Ҕ Voronoi კǴԶׯҔ౜ԋ
ޑᄽᆉݤ[18]Ǵջёှ، kNN ᎃۚࢗ၌Ƕ 
߈ԃٰǴೱុޜ໔ࢗ၌ሦୱ໒ۈ௖૸஥
Ԗ౽୏ၗ਑ᗺޑၗ਑ࢗ၌Ƕ൩೭΋Бय़ǴԖ
ӳ൳ᅿ઩ЇБݤ೏ගрٰаှ،౽୏ޑୢ
ᚒǴٯӵǴஒ R-tree ۯ՜ǴуΕਔ໔ୖኧޑ
TPR-tree[19]่ᄬǴᗋԖ TPR*-tree[21]Ǵёග
ϲس಍୺Չޑਏ౗ǶќѦǴSTRIPES Бݤ[15]
߾ճҔ dual transformed space БԄ຾Չ઩
ЇǶόၸǴӧ೭٤ࣴز္Ǵ೿ӃՉଷ೛ނҹ
ޑ౽୏БԄڀԖёႣෳ܄ǴٯӵೲࡋᆶБ
ӛ Ƕ ࡕ ٰ ޑ ࣴ ز ߾ ܫ ᚞ Α ೭ ٤ ज़ ڋ
[14][16][24]Ƕӧ[16]ޑࣴزύǴPrabhakar ฻
Γගрٿᅿ่ᄬǺQ-index ک VCIǴҔаೀ౛
ၗ਑ނҹ཮౽୏ޑೱុጄൎࢗ၌(continuous 
range query)ǶQ-index ௦ҔΑᆶ R-tree ᜪ՟ޑ
่ᄬǴסᙯΑচҁࢗ၌ޣᆶၗ਑ނҹ܌תᄽ
ޑفՅǶ[24]ύ߾ගрΑٿᅿ٬Ҕ grid indices
ޑᄽᆉݤǴёೀ౛཮౽୏ޑ kNN ࢗ၌Ƕӧ[14]
ޑࣴز္ǴMokbel ฻բޣගрᆀࣁ SINA ޑ
ᄽᆉݤǴԜᄽᆉݤЬाࢂ཮ຑ՗ӕਔวғޑ
ޜ໔ࢗ၌Ǵ୺Չਔёၲډࢗ၌Ӆ٦ޑӳೀǴ
Ԝᖐૈቚуس಍ۯ৖܄Ǵ຾Զ෧Ͽس಍ޑ᏾
ᡏၮբԋҁǶ 
ӧࣴز[9]ύǴբޣගр΋ᅿ୷ᘵޑ፾Ҕ
ܭᅱຎӚᅿೱុࢗ၌ޑࢎᄬǶ؂ঁނҹ೿Ԗ
ӚԾޑӼӄ୔ୱ(safe zone)ǴѝाނҹᗋӧӼ
ӄ୔ୱ္य़Ǵٗሶࢗ၌่݀٩ᙑԖਏǶԶӼ
ӄ୔ୱ߾ࢂҗ܌ԖᆶԜނҹԖᜢޑࢗ၌Ǵ܌
Ⴤۓрٰޑ୔ୱǴЬाࢂҔٰှ،Տ࿼׳ཥ
ޑୢᚒǶӧ[12]ޑࣴزύǴբޣࣁΑှ،ӧค
ጕቶኞᕉნ္ߏਔ໔ۯᒨޑୢᚒǴନΑӧӛ
Ьᐒࢗ၌ޑӕਔǴΨ཮ቶኞૻ৲๏΋؁ຯᚆ
ޑᎃۚޕၰǴᡣᎃۚॺӣ໺ځϐ߻ࢗ၌ၸޑ
ၗ਑Ǵ٠ᡍ᛾ӣ໺ޑ่݀Ƕଷӵᎃۚӣ໺ޑ
ၗ਑ςىаӣเࢗ၌Ǵ൩όѸ฻ډЬᐒቶኞ
่݀ǹӵ݀ѝᅈى೽ҽࢗ၌Ǵᆄ࣮ࢗ၌ޣჹ
ܭࢗ၌่݀ޑ࡚ॐ܄ᆶჹ่݀ྗዴ܄ޑௗڙ
ࡋǴӆ،ۓҗቶኞᓎၰύ฻ࡑ৾ڗى୼ޑ࠾
хၗૻࡕǴωૈֹԋࢗ၌Ƕ 
ࣁΑ෧ᇸࢗ၌ЬᐒॄᏼϷफ़եЬᐒᆶ౽
୏ނҹޑ೯ૻ޸຤Ǵ[6]ගрޑ MobiEyes Бݤ
ճҔϩණԄޑࢎᄬǴஒೀ౛ࢗ၌ޑπբϩଛ
๏ӧคጕᆛၡύ౽୏ޑՉ୏٬ҔޣǴԶЬᐒ
ѝתᄽύϟޣޑفՅǴॄೢ໺ሀՉ୏࿯ᗺ໔
ޑྎ೯ૻ৲ǴЬᐒόѸॄೢೀ౛ࢗ၌ޑी
ᆉǴԶࢂᡣ౽୏ޑ٬Ҕޣॺ࡭ុᅱ௓วрࢗ
၌ޑࢗ၌ޣǶ೸ၸЬᐒᆶࢗ၌ޣ຾Չྎ೯ᆶ
׳ཥՏ࿼Ǵࢗ၌ޣᆄ߾ॄೢीᆉࢗ၌่݀ޑ
πբǶόၸǴ΋ѿᆛၡύ౽୏ޑ٬ҔޣၸӭǴ
ࢗ၌ԛኧΨ཮ᒿϐቚуǴ٬ளࢗ၌ޣᆶЬᐒ
ޑྎ೯کՏ࿼׳ཥૻ৲໺ሀ׳уᓎᕷǴёૈ
೷ԋᆛၡᏱᔒޑރݩวғǴҭёૈ཮ቚуЬ
ᐒޑॄᏼǶ 
΢ॊ[6]ޑࣴزЬाࢂ๱౳ܭೱុጄൎࢗ
၌ǴԶ[22]຾΋؁௖૸Αೱុ kNN ᎃۚࢗ၌
ୢᚒǶӧ[22]ύǴբޣගр΋ᅿћ଺ disMKNN
ޑБݤǴࢂҗЬᐒᆶ౽୏ނҹӅӕӝբǴೀ
౛཮౽୏ޑ kNN ᎃۚࢗ၌Ƕ೸ၸςޕޑಃ k
ঁࢗ၌่݀ޑނҹՏ࿼کނҹҁيޑ౽୏ೲ
ࡋٰᅱຎࢗ၌Ǵ٠όሡाᔈҔፄᚇޑၗ਑่
ᄬᆶᄽᆉݤǶӵკ΋Ǵҗࢗ၌࿯ᗺ f วр΋ጄ
ൎࣁ CD ޑ kNN ᎃۚࢗ၌ǴΥࢂᆶԜ CD ख़
᠄ډޑ base stationǴӵ bs1, bs2 Ϸ bs4ǴѸ໪
೯ޕӧځ೯ૻጄൎϣ܌Ԗ౽୏ނҹǴٰᅱຎ
Ԝ kNN ᎃۚࢗ၌Ƕ೸ၸςޕޑ critical object
 6 
 
moving range query, cMRQ)Ǵ௖૸ځၮբБԄ
٠ϒаϩ݋ǴගрૈԖਏफ़ե࿯ᗺ׳ཥǴ٠
όቹៜࢗ၌่݀҅ዴ܄ϐБݤǶځύ֖Ԗٿ
໨ᜢᗖޑᐒڋǺԾيՏ࿼ճҔ (location 
awareness) а Ϸ ၗ ૻ ӝ բ ϩ ٦ (update 
collaboration)Ƕ 
၁ಒࣴزϣ৒ᆶ܌ගрϐᐒڋǴаΠϩձ
аೱុന߈ k ঁᎃۚࢗ၌ǵೱុ౽୏ጄൎࢗ
၌ٿ໨ཷॊǶ 
 
5.1 ೱុന߈ kঁᎃۚࢗ၌ 
 २ӃǴךॺ௖૸ೱុന߈ k ঁᎃۚࢗ၌
ϐ᝼ᚒǴҗϩ݋໒ۈుΕԜୢᚒޑਡЈǴ٠
ၮҔ܌ගޑٿ໨ᐒڋ location awareness ᆶ
update collaborationǴԖਏफ़եځ᏾ᡏᆛၡ೯
ૻໆǶԜѦǴ׳ଛӝำԄኳᔕǴᡍ᛾܌ගБ
ݤϐ҅ዴᆶёՉ܄Ƕ 
5.1.1 ᆛၡኳࠠᆶଷ೛ 
 ӧࣴز္ǴԵቾ΋Չ୏ӕᏆس಍ᆛၡ
(MP2P)Ǵ؂΋ঁՉ୏࿯ᗺ೿ёаԾҗޑ౽
୏Ǵ٠ڀഢ୷ҁޑคጕ೯ૻфૈǴӵ IEEE 
802.11Ǵё٬࿯ᗺॺϕ࣬೯ૻǶ؂ঁՉ୏࿯
ᗺǴ܈ᆀ౽୏ނҹ(moving objects)Ǵ೿ڀഢΑ
ӄౚۓՏس಍(GPS)း࿼Ǵ೸ၸӄౚۓՏس
಍ǴՉ୏࿯ᗺёаᒿਔඓඝԾБӦ౛΢ޑՏ
࿼ӦᗺǶԜѦǴ౽୏ނҹԖ΋നε౽୏ೲࡋ
ޑज़ڋǴӧԜᆀࣁ MaxSpeed (maximum 
speed)ǶനεೲࡋёаٰԾܭၰၡᆛၡޑೲ
ज़ǵΓᜪՉوາ؁ޑനזೲࡋǴ܈ࢂёЍජ
౽୏ύ೯ૻޑനଯೲࡋǶ 
 ᆛၡύǴ཮ڀԖ΋ಔ౽୏ނҹ O = {o1, 
o2,…, on} ᆶ΋ಔᓉᄊࢗ၌࿯ᗺ (stationary 
queries) Q = {q1, q2,…, q3} ӸӧΒᆢӦ౛ᕉნ
ύǴჹܭ؂΋ঁࢗ၌ǴሡೱុӦᅱຎ k ঁന
ௗ߈ࢗ၌ᗺޑ౽୏ނҹǶࢗ၌่݀೏ࢂࣁ΋
ಔ໣ӝ(set)ǴཀջऩԖٿಔࢗ၌่݀྽ύх֖
࣬ӕޑނҹǴ߾ٿಔࢗ၌่݀࣬ӕǹඤѡ၉
ᇥǴךॺ٠όԵቾࢗ၌่݀ύ౽୏ނҹޑ໩
ׇǶᖐٯٰᇥǴӧ΋ঁ k = 5 ޑٯηύǴന᎞
߈ࢗ၌ޑ౽୏ނҹ o1 ᆶಃΒ᎞߈ࢗ၌ޑ౽୏
ނҹ o2 ٿޣҬඤΑՏ࿼Ǵځ่݀ךॺຎࣁ࣬
ӕόᡂޑǶךॺࣴزޑขᗺӧܭೱុᅱຎ่
݀ޑ೽ϩǴЬाᜢݙӧ཮όᘐׯᡂޑࢗ၌่
݀ύǴӵՖӧࢗ၌่݀ׯᡂޑ྽Πёаଭ΢
ளޕǴ೯ޕࢗ၌ޣǶ 
ӧόѨ΋૓܄ϐΠǴаΠඔॊஒᜢݙ΋
ࢗ၌࿯ᗺǴᆀࣁ q1ǴځБݤё঺Ҕܭࢗ၌࿯
໣ӝ Q ϐύޑҺ΋ࢗ၌ǶќѦǴз dst(pi, pj)
߄Ңࣁ০኱Տ࿼ pi ډ০኱Տ࿼ pj ޑኻԄຯᚆ
(Euclidean distance)ǹᡣ 1tio ߄Ңࣁ౽୏ނҹ oi
ӧਔ໔ᗺ t1 ޑ০኱Տ࿼ǹԶᡣ qj ନΑ߄Ңࢗ
၌࿯ᗺҁيϐѦǴҭёӧຯᚆڄԄϐύ߄Ң
ࣁ০኱Տ࿼Ǵٯӵ  1 ,ti jdst o q ߄Ңӧ t1 ਔ໔ᗺ
౽୏ނҹ oiᆶࢗ၌࿯ᗺ qjޑຯᚆǹᡣ 
1 2
1
( , )t tq i jdst o o   
1 2
1 1( , ) ( , )
t t
i jdst q o dst q o Ǵ 
߄Ңٿ౽୏ނҹᆶࢗ၌ޣޑຯᚆৡǶ 
5.1.2 ckNN ϩ݋ 
 ӧԜǴךॺሡाӃ௖૸٠ϩ݋ ckNN ၮբ
ၸำǴӵ߻܌ॊǴҗܭނҹόଶӦ౽୏Ǵऩ
ाߥ᛾ ckNN ่݀࡭ុ҅ዴǴᔈ၀ा๱ख़ޑᜢ
ᗖࣁՖǴ٠аԜࣁԵໆ೛ीӝ፾ޑ ckNN ᐒ
ڋǶ 
 ྽ ckNN ΋໒ۈֹԋࢗ၌ਔǴёаว౜܌
Ԗޑ౽୏ނҹϩԋٿঁ໣ӝǴ΋ঁࣁࢗ၌่
݀໣ӝ R (result set)Ǵќ΋ঁࢂߚࢗ၌่݀ R~ 
(non-result set)ǶӵკΟ܌ҢǴo1~o5 ࣁࢗ၌่
݀Ǵឦܭࢗ၌่݀໣ӝ R ϐύǴo6ᆶ o7߾ࣁ
ߚࢗ၌่݀Ǵឦܭߚࢗ၌่݀໣ӝ R~Ƕჴሞ
΢ǴR~໣ӝᔈх֖܌Ԗӧس಍ύǴନΑࢗ၌
่݀ k ঁނҹаѦޑ౽୏ނҹǴӧԜ໻а o6
ᆶ o7 ٿނҹ଺ࣁж߄Ƕ 
 җܭ ckNN ޑࢗ၌่݀཮ᒿ๱ਔ໔όᘐ
ׯᡂǴऩགྷाᅱ௓ࢗ၌่݀ޑ҅ዴ܄Ǵ൩Ѹ
໪ᒿਔඓඝࢗ၌่݀ׯᡂޑᕓ໔Ƕϩ݋ cKNN
ޑ੝܄ࡕёаว౜Ǵࢗ၌่݀ׯᡂѝวғӧ
྽ R ໣ӝϐύޑځύ΋ঁ౽୏ނҹ oiᆶ R~໣
ӝϐύޑ΋ঁ౽୏ނҹ oj Ҭඤޑᕓ໔ǴԶЪ
ԜҬඤ୏բѸฅࢂ΋຾΋рޑҬඤǴҬඤว
ғӧӕ΋ঁ྽ΠǴό཮Ԗ΋ঁނҹӃ຾ѐǴ
ၸΑ΋ࢤਔ໔ќ΋ঁނҹӆрٰޑ௃ݩǶ җ
ܭࢗ၌่݀ޑׯᡂวғӧٿঁ໣ӝ࣬ϕޑբ
ҔϐΠǴ܌аѝाࢗ၌่݀ԖׯᡂѸۓࢂٿ
ঁ໣ӝӕਔׯᡂǴཀջځύ΋ঁ໣ӝऩࢂׯ
ᡂǴ߾ࢗ၌่݀ׯᡂǶ೸ၸԜϩ݋ёޕǴऩ
ाᅱຎࢗ၌่݀ࢂցׯᡂǴѝሡᅱ௓ٿ໣ӝ
ޑځύ΋ঁǶӧԜךॺᒧ᏷ᅱ௓ࢗ၌่݀໣
ӝ RǴӢࣁ R ϐύޑϡનঁኧ೏ज़ڋࣁ kǴ࣬
ჹޑ R~໣ӝύޑϡનঁኧ߾ࣁߚۓኧǶ 
 8 
 
Ѹ໪ाӛಃ k+1 ঁ౽୏ނҹ ok+1 ׳ཥՏ࿼Ǵ
ख़ཥᔠࢗࢂցς࿶ׯᡂࢗ၌่݀Ƕ྽౽୏ނ
ҹڗளཥޑࢗ၌่݀ǴΞ཮٩Ᏽ྽Πڗளޑ
ၗૻǴճҔԄ(a)ख़ཥीᆉ΋ঁਔ໔୔໔Ǵ٠
ЪॹኧǶ 
໺಍ޑ଺ݤߡࢂ΋ޔ࡭ុ΢ॊޑၸำǴ
ख़ፄ׳ཥՏ࿼ीᆉ stǶՠҗᆛၡ੝܄ёޕǴҗ
ܭ౽୏ނҹӧ๊ε೽ϩޑ௃ݩΠ٠ό཮΋ޔ
а MaxSpeed ౽୏ǴЪΨό཮࡞ѯа࣬ჹޑБ
ӛර k+1 ނҹ߻຾Ƕࡺӧ st ॹኧֹࡕǴךॺ
ᡣ౽୏ނҹճҔԾي྽߻ޑՏ࿼ၗૻஒ׳ཥ
ޑਔ໔ۯᒨǶࣁБߡှᇥǴз st ॹኧֹޑਔ
໔ᗺࣁ t2Ƕ྽ st ॹኧֹ౥ࡕǴ౽୏ނҹ oi ཮
ஒԾيҞ߻ޑՏ࿼жΕԄ(b)Ǵڗளཥޑਔ໔
୔໔ Ǵ٠Ъख़ཥᔠࢗ ࢂցεܭ႟Ǵऩࢂ
߾ᝩុॹኧǴϸϐ߾ӛಃ k+1 ঁ౽୏ނҹ׳
ཥՏ࿼Ƕ 
MaxSpeed
MaxSpeedttoodst
st
t
k
t
iq
u
u 
2
)(),(
' 1211
12
 (b) 
ਔ໔୔໔ ࢂճҔၸѐਔ໔ᗺ ok+1 ޑၗૻᆶ
౽୏ނҹ oi Ҟ߻ޑၗૻٰीᆉрǶךॺёа
࣮рǴԄ(b)ࢂଷ೛ ok+1 όᘐӦаനזೲࡋ౽
୏Ǵڗள΋ঁനߥӺޑӼӄਔ໔୔໔Ǵߥ᛾
ӧਔ໔ϣࢗ၌่݀ό཮ׯᡂǶӵკϖ܌ҢǴ
ךॺа oi ӧਔ໔ᗺ t2 ޑ҅ዴՏ࿼ᆶ౽୏ނҹ
ok+1 ӧਔ໔ᗺ t1ǴаനזೲࡋႣෳޑຯᚆٰी
ᆉᗋԖӭΦٿ౽୏ނҹёૈҬඤՏ࿼ǶӵԜ
٬ҔԄ(b)ख़ፄीᆉ ٠ЪॹኧޑၸำǴޔԿ
ीᆉрٰޑॶࣁ႟Ǵ౽୏ނҹ oi ൩཮วр
ૻ৲ၟ ok+1 ׳ཥՏ࿼Ǵаߡख़ཥ٬ҔԄ(a)ी
ᆉཥޑਔ໔୔໔ǶԜБݤᜢᗖ೽ϩӧܭճҔ
ԾيՏ࿼ǴֹӄόሡाᚐѦޑၗૻǴջёε
൯෧ϿՏ࿼׳ཥޑ࠾хǴךॺᆀϐࣁ location 
awareness ᐒڋǶ 
(3)׳ཥ໘ࢤǺ྽౽୏ނҹѸ໪ाၟ k+1
ނҹ׳ཥՏ࿼ਔǴ߾຾Ε׳ཥ໘ࢤǶӧ׳ཥ
໘ࢤǴךॺִ๓ӦճҔᆛၡύޑ౽୏ނҹၸ
ѐ׳ཥޑၗૻٰڐշ׳ཥǶҗܭࢂ࿯ᗺ׳ཥ
Տ࿼ਔ܌௦ҔޑᐒڋǴࡺךॺᆀϐࣁ update 
collaborationǶ 
౽୏ނҹ oi ӧਔ໔ᗺ tj ܌ीᆉрٰޑਔ
໔୔໔ ฻ܭ႟Ǵܭࢂӛ ok+1 ׳ཥၗૻǶவ
oi Կ ok+1 ၡ৩཮࿶ၸځдޑ౽୏ނҹ opǴ྽
op ԏډ׳ཥૻ৲ࡕǴ൩཮ճҔԾيම࿶׳ཥ
ၸЪၨཥޑ ok+1 Տ࿼ၗૻᔅԆ oi ीᆉਔ໔୔
໔ Ǵऩीᆉрٰޑ εܭ႟Ǵ߾߄Ңаၨ
ཥޑ ok+1 Տ࿼ၗૻीᆉрٰว౜ oi Ҟ߻ۘࢂ
ӼӄǴ٠ό཮ቹៜډࢗ၌่݀Ǵ߾ op ஒၨཥ
ޑ ok+1 Տ࿼ၗૻӣ໺๏ oiǴόӆ۳ᝩុ׳ཥǹ
ϸϐǴऩीᆉрٰࣴղ oi ёૈቹៜډࢗ၌่
݀Ǵop ߾ஒૻ৲ᝩុ۳ ok+1 ໺ଌǶ 
྽ ok+1 ԏډ׳ཥૻ৲ࡕǴ൩཮ीᆉ oi Ҟ
߻ࢂցς࿶ᆶԾيҬඤՏ࿼ǶऩࢂᗋؒԖǴ
߾ஒԾρ྽ΠޑՏ࿼ӣ໺๏ oiǶ࣬ӕޑǴӧ
ၡ৩΢܌Ԗޑ౽୏ނҹௗԏډၨཥޑ ok+1 Տ
࿼೿཮໩ߡ׳ཥǶ 
ϸϐǴऩ ok+1 ࣴղς࿶ᆶ oiҬඤՏ࿼ਔǴ
ཀښ๱྽Πޑࢗ၌่݀ς࿶ׯᡂǴoiԋࣁཥޑ
ಃ k+1 ঁ౽୏ނҹ ǴԶ ok+1 ԋࣁࢗ၌่
݀ϐ΋ǶԜਔǴok+1 ཮ஒԜૻ৲೯ޕ qǴ٠Ъ
Ψ཮ஒԜૻ৲೯ޕ oiǶӧ ok+1 Կ q ၡ৩΢܌
Ԗޑ౽୏ނҹᆶ ok+1 Կ oi ၡ৩΢܌Ԗޑ౽୏
ނҹௗԏډԜૻ৲ǴΨ೿཮ஒԜૻ৲׳ཥǴ
аߡΠ΋ԛ٬ҔǶௗ๱Ǵok+1 ΨѸ໪ा٬ҔԄ
(a)ीᆉрਔ໔୔໔Ǵᅱຎࢗ၌่݀ࢂց཮೏
ԾρׯᡂǶ 
ӵკϤǴஒკΟᙯඤԋᐋރ่ᄬǶკϤ
(a)Ǵӧਔ໔ᗺ tjǴo5 ղᘐԾρԖёૈς࿶ᆶ
o6 ҬඤՏ࿼Ǵ൩ӛ o6 วр׳ཥा؃Ƕύ໔࿶
ၸ౽୏ނҹ o2ǴՠԜਔ o2 ٠คၨཥ o6 ޑՏ࿼
ၗૻǴ܌аᝩុஒ׳ཥा؃໺ଌԿ o6Ƕo6 ௗ
ԏډ׳ཥा؃ࡕǴख़ཥճҔԄ(a)ीᆉਔ໔୔
໔ stǴว౜ o5 Ҟ߻ᗋؒԖᆶԾρҬඤՏ࿼Ǵ
൩ஒԾρޑՏ࿼໺ଌӣѐ๏ o5ǶԜਔǴၡ৩
΢࿶ၸޑ౽୏ނҹ o2 ൩཮໩ߡஒၨཥޑၗૻ
इᒵǶ 
კϤ(b)ࢂௗុკϤ(a)Ǵӧਔ໔ᗺ tj+1Ǵo4
࿶ၸԄ(b)ޑᔠࢗǴว౜ԾρԖёૈς࿶ک o6
ҬඤՏ࿼Զׯᡂࢗ၌่݀Ǵo4 ൩ӛ o6 วр׳
ཥा؃ǶԶၡ৩΢࿶ၸޑ౽୏ނҹ o1 ᆶࢗ၌
ޣ q1 ೿ؒԖၨཥޑՏ࿼ၗૻǴ܌аᝩុஒ׳
ཥा؃໺ଌԿ o6ǶԶ྽׳ཥा؃໺ଌԿ o2ޑ
ਔংǴҗܭӧখখਔ໔ᗺ tj ς࿶Ԗ׳ཥၸ o6
ޑՏ࿼ၗૻǴ܌а൩཮ճҔԄ(b)ڐշᔠࢗ o4
ࢂցёૈׯᡂࢗ၌่݀Ǵऩࢂ߾ᝩុஒૻ৲
۳ o6 ໺ଌǹऩᔠࢗрٰ o4 ᗋό཮ቹៜډࢗ၌
่݀߾ஒၨཥޑ o6 Տ࿼ၗૻӣ໺Կ o4Ƕӕኬ
ޑǴӧၡ৩΢ޑ q1 ᆶ o2 ೿཮໩ߡ׳ཥՏ࿼ၗ
ૻǶӧԜ௃ݩϐΠǴऩ o3 ଭ΢ௗ๱ሡा׳ཥ
o6 ޑՏ࿼ၗૻǴ྽ૻ৲໺ଌԿ o1 ਔ൩ёаڐ
 10 
 
ฅ࿯ᗺஏࡋቚуǴՠҗܭ k ॶόᡂǴࡺୖᆶ
ޑ࿯ᗺኧό཮ቃਗ਼ቚуǶ 
Զࢗ၌่݀ޑ҅ዴ܄ǴךॺаკΜΒ଺
ࣁж߄ǶკΜΒࣁ౽୏ނҹኧҞᆶࢗ၌่݀
҅ዴ܄ޑኳᔕ่݀Ƕ໣ύԄᄽᆉݤӢࣁҗ՛
ܺᏔӄ៾ीᆉǴࡺځ่݀ࣁֹӄ҅ዴǶԶޔ
ᢀޑϩණԄᆶךॺޑБݤǴҗܭࢂ೸ၸ࿯ᗺ
ӝբǴёૈڙᆛၡܗᐆᆶ໺ᒡቹៜǴ೷ԋ٤
༾ޑᒱᇤǴฅځ҅ዴ౗ҭёၲډ 99%Ƕ 
!
5.2 ೱុጄൎࢗ၌ 
ࣴزύǴҭஒӕኬޑ location awarenessǵ
update collaboration ཷۺၮҔӧೱុጄൎࢗ၌
(cMRQ)᝼ᚒϐύǶԜѦǴ׳ճҔΑคጕᆛၡ
ቶኞޑ੝܄Ǵ٬࿯ᗺ๓Ҕୂ᠋(overhearing)ޑ
ᐒڋǴૈ׳຾΋؁ஒᆛၡ໺ᒡໆϒаफ़եǶ 
5.2.1 ᆛၡኳࠠᆶଷ೛ 
cMRQ ޑᆛၡᕉნǴ୷ҁ΢ᆶ ckNN ࣬
՟Ǵ୤΋ޑৡձӧܭǴcMRQ ޑࢗ၌ޣ q1 Ψ
ёаᒿཀ౽୏ǴӧԜǴךॺஒа n0 ଺ࣁࢗ၌
ޣж߄Ǵᜢݙ n0 ӵՖ຾Չ΋ঁ୏ᄊޑೱុጄ
ൎࢗ၌ǶᆛၡύҭԖ΋നε౽୏ೲࡋѸ໪ᒥ
ൻǴஒځ߄Ңࣁ MaxSpd(maximum speed)Ƕ 
܌ᒏጄൎࢗ၌Ǵջࢂаࢗ၌ޣࣁ༝ЈǴа
΋ࢗ၌ຯᚆ(Q.r)ࣁъ৩ǴӧԜጄൎϣޑՉ୏
࿯ᗺǴջࣁࢗ၌่݀ǶԶ୏ᄊޑೱុጄൎࢗ
၌Ǵ߾ࢂԜࢗ၌ሡ࡭ុ΋ࢤਔ໔ǴӧԜਔ໔
ϣǴҗܭނҹޑ౽୏Ǵࢗ၌่݀Ψ཮ᒿϐׯ
ᡂǹ྽ฅǴӧ่݀ׯᡂϐਔǴѸ໪ջਔ೯ޕ
ࢗ၌ޣ่݀ޑᡂϯǶ 
5.2.2 cMRQ ࢗ၌ᄽᆉݤ 
cMRQ ࢗ၌Ǵၟ߻ॊ ckNN ᄽᆉݤᜪ՟Ǵ
ϩԋΟঁ໘ࢤǺ(1)߃ۈ໘ࢤǴ(2)ᅱຎࢗ၌Ǵ
(3)׳ཥ໘ࢤǶ܌ҔډޑᢀۺନΑ location 
awareness ᆶ update collaboration ϐѦǴӆቚ
уୂ᠋ޑᐒڋǴ๓ѯճҔคጕᆛၡޑ੝܄Ƕ
ՠҗܭጄൎࢗ၌ၟന߈ k ঁᎃۚࢗ၌ҁ፦ό
ӕǴаΠךॺᗋࢂัуှញǶ 
(1)߃ۈ໘ࢤǺ२ӃǴࢗ၌ޣ n0 วଆ΋ঁೱ
ុጄൎࢗ၌Ǵ߾຾Ε߃ۈ໘ࢤǶn0 Ӄቶኞࢗ
၌࠾хԿࢗ၌ጄൎ Q.rǴࢗ၌࠾хϣх֖ࢗ၌
ޣՏ࿼ǵࢗ၌࡭ុਔ໔ǹӧࢗ၌ጄൎϣޑ܌
ԖՉ୏࿯ᗺԏډ၀࠾хߡ໒ۈ຾Εᅱຎࢗ၌
໘ࢤǶ 
(2)ᅱຎࢗ၌Ǻ܌ᒏᅱຎࢗ၌Ǵཀࡰԏډࢗ
၌ૻ৲Ъӧጄൎϣޑ࿯ᗺǴӵ niǴճҔ n0 ᆶ
ԾيޑՏ࿼Ǵीᆉр΋ঁӼӄ୔໔ safe 
periodǴӧԜӼӄ୔໔ϣǴՉ୏࿯ᗺޑ౽୏ό
཮ቹៜډࢗ၌่݀ǴӼӄ୔໔ޑीᆉ၁ـԄ
(c)Ǻ 
1 1
0( , ) . 
2
t t
id n n Q rsafe period
MaxSpd

 
u    (c) 
Ԅ(c)ύǴ 10
tn ߄Ң n0 ӧ t1 ਔ໔ޑՏ࿼ǴԶ
1 1
0( , )
t t
id n n ߾߄Ң n0ᆶ ni ӧ t1 ਔ໔ਔޑຯᚆǴ
ϷՉ୏࿯ᗺᆶࢗ၌ޣޑຯᚆৡǶԄ(c)ଷ೛ӧ
Ӽӄ୔໔ϐϣǴՉ୏࿯ᗺᆶࢗ၌ޣϕ࣬аന
εೲࡋϸБӛ౽୏ǴࡺӧӼӄ୔໔ډයਔǴ
Չ୏࿯ᗺ཮҅ӳပӧࢗ၌ޣޑࢗ၌ጄൎᜐ
ጔǴԜਔߡሡा׳ཥՏ࿼๏ࢗ၌ޣǴаᡍ᛾
่݀ࢂցׯᡂǶ 
ฅԶǴ၈ӵ߻ॊࣴز܌قǴ೭ᅿ࣬ϕаന
εೲࡋ౽୏ޑᐒ཮ΜϩشـǴаԄ(c)܌ीᆉ
рٰޑӼӄ୔໔ၸܭߥӺǴࡺךॺϝฅ௦Ҕ
location awareness ޑᐒڋǴёаஒӼӄ୔໔ӆ
ԛۯߏǶଷ೛Ӽӄ୔໔ډයਔ໔ࣁ t2ǴკΜΟ
ஒՉ୏࿯ᗺ niᆶ cMRQ ࢗ၌ޣ n0ޑ࣬ჹᜢ߯
ฝрǴճҔ niӧ t2ਔ໔ޑՏ࿼Ǵᆶ n0ӧ t1ਔ
໔ޑຯᚆǴ٠ଷ೛ӧ t1 ډ t2 ೭ࢤ୔໔Ǵn0 ර
niޑϸБӛаനεೲࡋ౽୏Ǵࡺӧ t2 ਔ໔ਔǴ
n0 ᆶ ni ϐ໔ޑനεຯᚆࣁ dl (ӵԄ d)Ǵ
   1 20 2 1,t tl id d n n MaxSpd t t  <    (d) 
ऩ dlۘ҂εܭ Q.rǴ߾Ӽӄ୔໔൩ёаӆԛۯ
ߏ
.
2
lQ r d
MaxSpd

 ΋ࢤਔ໔Ƕ 
ԜѦǴচҁόӧࢗ၌่݀ϣǴՠัࡕԖё
ૈԋࣁࢗ၌่݀ޑ࿯ᗺॺǴ߾ճҔᜪ՟ޑᢀ
ۺǴ२Ӄीᆉ
1 1
0( , ) . 
2
t t
id n n Q rsafe period
MaxSpd

 u Ǵ
ࡑӼӄ୔໔ܭ t2 ډයࡕǴӵკΜѤ܌ҢǴी
ᆉӧ t2 ਔ໔ਔǴn0 ᆶ ni ёૈޑന߈ຯᚆ dsǴ
ऩ ds ϝฅεܭ Q.rǴ߾߄Ң ni ᗋό཮ԋࣁ่
݀ϐ΋Ǵ߾Ӽӄ୔໔ёаӆۯߏ
.
2
sd Q r
MaxSpd


΋ࢤਔ໔Ƕӧᅱຎࢗ၌ޑ໘ࢤǴךॺၮҔޑ
ӕኬࢂՉ୏࿯ᗺჹԾيՏ࿼ޑᕕှǴόሡा
ᚐѦޑၗૻǴԜᐒڋᆀࣁ location awarenessǶ 
 12 
 
ኳᔕ่݀ǶҗკύёـǴࢗ၌ਔ໔ჹܭ؂ൂ
ࣁਔ໔ޑѳ֡࠾х໺ᒡໆቹៜόεǴԶךॺ
ޑБݤᆶ ExtRange ࣬КǴҭૈсᡉځਏૈǶ
ჴᡍ᛾ჴךॺޑᐒڋૈԖਏ౗Ӧफ़ե᏾ᡏ࠾
х໺ᒡໆᆶس಍ॄᏼǶ 
Ϥǵ่݀ᆶ૸ፕ 
ҁԛीฝύǴךॺଞჹՉ୏ӕᏆᆛၡ္Ǵ
ख़ाޑޜ໔ࢗ၌୍ܺ᝼ᚒ຾Չ௖૸Ƕךॺа
ٿᜪന୷ᘵЪ዗ߐޑࢗ၌Ǵջೱុጄൎࢗ၌
ᆶೱុkঁന߈ᎃۚࢗ၌ࣁࣴزҞ኱Ǵࣴวр
፾Ҕܭೱុ܄ޜ໔ࢗ၌ޑᐒڋǴ೭٤ᐒڋό
ՠૈᆢ࡭҅ዴޑϷਔࢗ၌่݀ǴԶЪΞૈԖ
ਏफ़եᆛၡޑ࠾х໺ᒡໆǴаගϲس಍ޑ᏾
ᡏਏૈǶ܌ගрޑБݤځ୷ҁᆒઓԖΒǺԾ
يՏ࿼ճҔаϷၗૻӝբϩ٦ǶԜٿ໨מೌ
ࣣόሡाᚐѦޑॄᏼ(overhead)ǴૈᡣՉ୏࿯
ᗺ๓уճҔԾيςޕޑՏ࿼ၗૻǴЪΞᆶӕ
Ꮖ࿯ᗺϐ໔࣬ϕӝբǴӵԜջёε൯फ़եࢗ
၌ύ܌ሡޑ࠾х໺ᒡໆǶ 
ҁीฝࣴزҭ՘аӭኬుΕޑኳᔕᆶ᛾
ܴǴٰᡍ᛾ځ҅ዴ܄ǵёՉ܄ᆶБݤޑਏૈǶ
᏾ᡏԶقǴीฝԋ݀ڀԖ࣬྽ᙦ൤ޑϣ఼Ǵ
ΨჹԜ΋Бय़ޑ᝼ᚒගрཥޑബـǶ࣬ᜢࣴ
زԋ݀ԖόᒱޑౢрǴΨςว߄ܭᏢೌ཮
᝼ǴၲԋচӃႣۓޑीฝҞ኱Ƕ 
 
ΎǵୖԵЎ᝘Ǻ 
[1] N. Beckmann, H.-P. Kriegel, R. Schneider, 
and B. Seeger, "The R*-tree: An Efficient 
and Robust Access Method for Points and 
Rectangles," in Proc. SIGMOD '90, 1990, 
pp. 322-331. 
[2] M. A. Cheema, L. Brankovic, L. Xuemin, 
Z. Wenjie, and W. Wei, "Multi-Guarded 
Safe Zone: An Effective Technique to 
Monitor Moving Circular Range Queries," 
in Proc. IEEE 26th International 
Conference on Data Engineering, 2010, pp. 
189-200. 
[3] C.-Y. Chow, M. Mokbel, and H. V. Leong, 
“On efficient and scalable support of 
continuous queries in mobile peer-to-peer 
environments,” IEEE Transactions on 
Mobile Computing, vol. 10, no. 10, pp. 
1473ȸ1487, oct. 2011. 
[4] T. T. Do, K. A. Hua, and C.-S. Lin, 
"ExtRange: Continuous Moving Range 
Queries in Mobile Peer-to-Peer Networks," 
in Proc. 10th International Conference on 
Mobile Data Management: Systems, 
Services and Middleware (MDM '09), 2009, 
pp. 317-322. 
[5] P. Galdames, K. Kim, and Y. Cai, “A 
Generic Platform for Efficient Processing 
of Spatial Monitoring Queries in Mobile 
Peer-to-peer Networks,” in Proc. 
International Conference on Mobile Data 
Management (MDM), May 2010, pp. 1–10. 
[6] B. Gedik and L. Ling, "MobiEyes: A 
Distributed Location Monitoring Service 
Using Moving Location Queries," IEEE 
Transactions on Mobile Computing, vol. 5, 
pp. 1384-1402, 2006. 
[7] D. Greene, "An Implementation and 
Performance Analysis of Spatial Data 
Access Methods," in Proc. Fifth 
International Conference on Data 
Engineering, 1989, pp. 606-615. 
[8] A. Guttman, "R-Trees: A Dynamic Index 
Structure for Spatial Searching," in Proc. 
ACM International Conference on 
Management of Data (SIGMOD), 1984, pp. 
47-57. 
[9] H. Hu, J. Xu, and D. L. Lee, "A Generic 
Framework for Monitoring Continuous 
Spatial Queries over Moving Objects," in 
Proc. ACM International Conference on 
Management of Data (SIGMOD), 
Baltimore, Maryland, 2005, pp. 479-490. 
[10] R. Katz, E. Brewer, E. Amir, H. 
Balakrishnan, A. Fox, S. Gribble, T. Hodes, 
D. Jiang, G. Nguyen, and V. Padmanabhan, 
"The Bay Area Research Wireless Access 
Network (BARWAN)," in Proc. 
Technologies for the Information 
Superhighway Digest of Papers (Compcon 
'96), 1996, pp. 15-20. 
[11] K. Kim, C. Ying, and W. Tavanapong, 
"Safe-Time: Distributed Real-Time 
Monitoring of cKNN in Mobile 
Peer-to-Peer Networks," in Proc. 9th 
International Conference on Mobile Data 
Management (MDM '08), 2008, pp. 
124-131. 
[12] W.-S. Ku and R. Zimmermann, 
"Location-Based Spatial Queries with Data 
Sharing in Mobile Environments," in Proc. 
22nd International Conference on Data 
Engineering Workshops, 2006, p. 140. 
[13] F. Liu, K. A. Hua, and T. T. Do, "A P2P 
 14 
 
ߏ࿯ᗺޑӼӄਔ໔ǴᏵԜε൯फ़ե܌ሡޑՏ
࿼׳ཥ࠾хǶԜѦǴΞၮҔӕᏆ໔ၡ৩ޑख़
᠄੝܄຾ՉၗૻӅ٦ӝբǴӆу΢คጕ໺ᒡ
ޑୂ᠋܄፦Ǵ׳ё຾΋؁ஒૻ৲ໆ෧ډന
եǶӆޣǴךॺΨගрගԐ᝾֋ޑᐒڋǴ׳
ёаᗉխڬය܄ޑวթࢗ၌ቶኞǴЪঋ៝ࢗ
၌่݀ޑ҅ዴ܄Ƕ 
࣬ᜢޑԋ݀ӧೱុkঁന߈ᎃۚࢗ၌Б
य़Ǵখว߄ܭ2012ԃInternational Conference 
on Mobile Communications, Networking and 
Applications (MobiCONA 2012)Ƕќ΋Бय़Ǵ
ೱុጄൎࢗ၌ϐࣴزԋ݀Ǵς׫ዺԿ
Computer NetworksයтቩਡύǶ 
ԜѦǴ࿶Ԝ΋ीฝޑЍ࡭ǴךॺΨӧᆛၡ
࣬ᜢޑࣴز᝼ᚒБय़ǴԖځѬޑࣴزԋ݀ว
߄Ǵीฝ᏾ᡏޑ୺Չ຾ࡋᆶচӃीฝϣ఼࣬
྽ޑ಄ӝǶҗܭޜ໔ࢗ၌᝼ᚒࢂ౜໘ࢤՉ୏
ᆛၡനख़ाޑᔈҔϐ΋Ǵ࣬ߞҁीฝޑࣴز
ԋ݀ǴӧԜ΋ሦୱڀԖ΋ۓޑୖԵᆶၮҔሽ
ॶǶ 
ஒٰ຾΋؁ว৖ޑБӛࢂஒҞ߻࣬ᜢࣴ
زᘉ৖ډԵໆࢗ၌ޣޑᗦدୢᚒǴዴߥࢗ၌
ޣӧࢗ၌ၸำύૈߥԖځᗦد៾ǹӵԜǴ׳
ૈుϯҁࣴزޑਏᔈᆶᔈҔำࡋǶ 
 16 
 
),( 16
1
51
tt
q oodst
(a) (b) 
კѤġ cKNN k = 5 ޑጄٯǹ(a)Ӛঁ౽୏ނҹᆶࢗ၌࿯ᗺӧΒᆢѳय़΢ჴሞޑՏ࿼ᜢ ǹ߯ (b)
ஒΒᆢჴሞՏ࿼ᜢ߯ᙯඤԋ࣬ჹܭࢗ၌ޣຯᚆޑ΋ᆢѳय़კǶ 
 
),( 11
2
1
t
k
t
iq oodst 
MaxSpeedtt u )( 12
კϖġ ౽୏ނҹᆶԄ(b)ᜢ߯Ƕ 
 
 
(a) (b) 
კϤġ ckNN ׳ཥ໘ࢤٯηǴ٬Ҕ࿯ᗺӝբޑ׳ཥၗૻၲډ࿯࣪໺ᒡԋҁǶ 
 
(a) (b) 
კΎġ ࢗ၌่݀ׯᡂޑ׳ཥ໘ࢤٯηǶ 
 
 18 
 
100 110 120 130 140 150
300
400
500
600
700
800
900
1000
Number of mobile objects
C
om
m
un
ic
at
io
n 
co
st
 (m
es
sa
ge
/s
ec
on
d)
 
 
Centralized
Naive
Loco-cKNN
 
კΜ΋ġ ࠾х໺ᒡໆᆶ౽୏ނҹኧໆϐ่݀კǶ 
 
100 110 120 130 140 150
0.99
0.995
1
Number of mobile objects
R
es
ul
t c
or
re
ct
ne
ss
 ra
tio
 
 
 
Centralized
Naive
Loco-cKNN
 
კΜΒġ ࢗ၌่݀ޑ҅ዴ܄Ƕ 
 
ld
2 1( )MaxSpd t t 
1
0
tn
2t
in
1 2
0( , )
t t
id n n
 
კΜΟġ n0ᆶ niӧ t2ਔ໔ёૈޑനߏຯᚆ dlǶ 
 
sd
2 1( )MaxSpd t t 
1
0
tn
2t
in 1 20( , )
t t
id n n  
კΜѤġ n0ᆶ niӧ t2ਔ໔ёૈޑന߈ຯᚆ dsǶ 
 
 20 
 
5 6 7 8 9 10
100
150
200
250
300
350
400
450
MaxSpd (m/s)
N
o.
 o
f m
es
sa
ge
s/
tim
e 
un
it
 
 
ExtRange
Integration
Integration+overhear
 
 
კΜΖġ ൂঁ cMRQ ࢗ၌ϐനε౽୏ೲࡋᆶѳ֡؂ࣾޑ࠾хኧᡂϯ่݀Ƕ 
 
300 400 500 600 700
50
100
150
200
250
300
350
400
Number of nodes
N
o.
 o
f m
es
sa
ge
s/
tim
e 
un
it
 
 
ExtRange
Integration
Integration+overhear
 
კΜΐġ ൂঁ cMRQ ࢗ၌ϐᆛၡύՉ୏࿯ᗺኧໆᆶѳ֡؂ࣾޑ࠾хኧᡂϯ่݀Ƕ 
 
20 40 60 80 100
75
100
125
150
175
200
225
250
Query time (time unit)
N
o.
 o
f m
es
sa
ge
s/
tim
e 
un
it
 
 
ExtRange
Integration
Integration+overhear
 
კΒΜġ ൂঁ cMRQ ࢗ၌ϐࢗ၌ਔ໔ᆶѳ֡؂ࣾޑ࠾хኧᡂϯ่݀Ƕ 
 
 
 
be divided into two classes: 1) centralized approaches [3]–
[7,14,15], and 2) distributed approaches [1,2,8,16]. Most of the
centralized approaches depend on mobile objects periodically
returning their location back to the server. Since most of them
are implemented with complex data structure and algorithm,
the system loading and accuracy of the query result are sig-
nificantly affected by the location-update frequency of mobile
objects. Unlike centralized method, distributed approaches
devolve computation load to mobile objects; hence they are
more suitable for mobile ad hoc environments. In this paper,
we focus on the distributed approaches and further analyze the
relative techniques.
Both [1] and [8] tackled the cKNN problem in a hybrid
approach. Their methods rely on a server, which receives
location updates from mobile objects and helps to compute the
query results. In addition, the server will delegate mobile nodes
to monitor the cKNN queries. These architectures, however,
may have a drawback that keeps a server’s loading remains
high.
In [2], the authors provided an approach to solve the cKNN
queries with stationary query points in MP2P networks. They
used the concept of safe-time and proposed a distributed
solution for the problem. For a given stationary query, query
result remains unchanged during the safe-time period. When
the safe-time expires, the method performs a ring broadcast
within a circular band to identify the new kth and (k + 1)th
objects. However, the concept of ring broadcast is infeasible
in MP2P network and cannot ensure the desired area can be
fully covered by the broadcast messages.
In [9], the authors proposed a cost-effective technique to
process four kinds of spatial monitoring queries based on
primitive stationary range monitoring query in MP2P system.
The method partitioned the network into disjointed gird cells
and forced each mobile node to cache queries that are relevant
to its home cell. Other types of continuous moving queries
can be converted into the primitive type of query. However,
the continuous monitoring overhead of those converted types
of queries was not addressed in the paper.
III. THE PROPOSED LOCO-CKNN
In this section, we first describe the system model used
in the paper. We then present an analysis of the cKNN query
followed by the proposed Loco-cKNN protocol for processing
cKNN query.
A. System Model and Assumption
In this paper, we consider a MP2P network that consists
of a collection of mobile devices. Each device is equipped
with some wireless communication interface such as IEEE
802.11. In addition, each mobile device has some positioning
capable mechanism such as GPS; hence it is aware of its
current geographical location at any time. A mobile device
communicates with another device by passing messages, for
which intermediary devices act as relays in forwarding the
messages. Also, this paper assumes that the maximum moving
speed of mobile devices is known in advance and is denoted
by MaxSpd. The assumption of prior knowledge of MaxSpd
is possible and reasonable in many scenarios. For example,
roaming human users typically have maximum capable mov-
ing speed. In addition, most road networks have maximum
speed limit that mobile vehicular nodes have to comply with.
A cKNN query is defined as a location-based spatial query
that continuously returns a set of k nearest objects to the
query issuer. Since each network object is associated with
a distinct mobile device, the terms object, device, and node
are used interchangeably throughout the paper. Given a set of
moving objects O = {o1, o2, . . . , on} and a set of stationary
query nodes QN = {q1, q2, . . . , qq} in a two dimensional
geographical space. A cKNN query continuously monitors a
set of k moving objects that are nearest to the corresponding
query issuer. Two query results are considered identical as
long as they consist of exactly the same set of moving objects,
regardless of the order of the objects. That is, a cKNN query
does not concern about the order of the objects in the result.
Due to mobility of moving objects, the query result changes
from time to time. It is important to inform the query issuer
about the change of the result; thus continuously monitoring
the query is the main process of the cKNN query service.
Without loss of generality, Loco-cKNN is described below
with respect to a query issuer q1.
Let dis(pi, pj) denote the Euclidean distance between po-
sitions pi and pj . Also let oti refer to the position of object oi
at time t. The relative distance between oi at time t1 and oj
at time t2 with respect to q1 is defined as dstq1(ot1i , ot2j ) =
dis(ot1i , q1) − dis(o
t2
j , q1). Last, let ith NN represent the ith
nearest neighbor of the query issuer.
B. Analysis of cKNN Query
Consider a cKNN query Q, issued by q1. Let us focus on
the time when query result changes. Generally, a cKNN query
process is divided into three phases: initial phase, monitor
phase, and update phase. In the initial phase, the query issuer
q1 submits the query Q and obtains the first query result.
After the initial phase, mobile objects enter the monitor phase,
during which they monitor Q continuously for the entire
query period. The aim of this phase is to ensure that every
mobile object can detect the change of query result caused
by itself and takes appropriate action accordingly. When an
object discovers that itself may affect the query result, it enters
the update phase immediately. In the update phase, the object
will send a location-update message to an appropriate node
as described later to update its knowledge about the current
location of the node, and the node will recalculate the result.
The monitoring phase and update phase alternates for each
mobile node until the query time of Q expires.
Upon the end of the initial phase, it is clear that mobile
objects in the network are divided into two sets: the result set
R, and the non-result set R. For example, in Fig. 1, q1 issues a
cKNN query with k = 5. We have R = {o1, o2, o3, o4, o5} and
R = {o6, o7} after the initial phase is performed. Note that
a change of the result can only happen at the time when one
of the object in R exchanges the position with another object
	




 
' "#$%&
q1 ok+1
2 1
1
( , )1
t tdst o oq i k +
oi
ok+1oi
ok+1 moves at 
MaxSpd
(t2 - t1)×MaxSpd
q1
ds
Fig. 3: Example of extended safe time.
3) Collaboration update phase: When oi finds itself may
exchange the position with ok+1, it proceeds to update phase
in which it sends a location-update message to ok+1. The
message contains the current location of oi along with the
timestamp of the location information of ok+1 known to
oi. In this phase, mobile nodes may collaborate to reduce
communication cost by sharing location information about
ok+1.
Assume that there is an intermediary node, op, on the
path from oi to ok+1. If op receives the location-update
message sending from oi to ok+1, op first checks the timestamp
associated with ok+1. If the location information about ok+1
maintained by op is more recent than the one maintained
by oi, op may use its location information to compute the
safe time for oi. By using the newer location information, op
may conclude that oi can further extend the safe time. If the
extended safe time exceeds a given threshold, op determines
to return the newer location information about ok+1 back to oi
without forwarding the location-update message. Otherwise, it
continues relaying the message. If there exists no such kind of
intermediary node, the location-update message will eventually
reach ok+1. In addition, when the location-update packet is
returned, either from ok+1 or from intermediary op, mobile
nodes along the path will update their location information
about ok+1 according to the information in returned packet.
For example, consider the communication graph shown
in Fig. 4, which reflects the tree topology structure of the
previous example. Suppose o5 detects that it might have
exchanged the position with o6, the current ok+1, it sends
a location-update message to o6 to acquire the latest position
of it. The packet goes through path (o5, o2, o6). If the result
does not change, o6 will simply return the packet, containing
its latest location information, back to node o5. Along the
reverse path, o2 will also update its location information about
o6 according to the packet. Later, if o4 sends a location-update
message through path (o4, o1, q1, o2), o2 can use the newer
information to help to re-compute the safe time for o4, without
forwarding the packet to ok+1. Thus, lots of communication
overhead can be saved. On the other hand, as the case when
node o5 indeed changes the position with o6, the original ok+1,
o6 will send a message to inform the query issuer q1 and o5
about the change, and starts to monitor o5. Since o2 relays the
q1 o1o2
o3 o4
o5
o6 o7
! !"#
Fig. 4: Collaboration update example shown in tree structure.
inform packet, it can update the location about o5, the new
(k+1)th, and computes a new safe time accordingly as well.
After a while when o4 issues a location-update message to o6,
the original (k + 1)th NN, the packet will go through q1. q1
will update the information about the new (k + 1)th object,
o5, to o4 and thus o4 knows a change has happened and it has
to monitor o5 from now on.
As described earlier, objects in set R also need to monitor
ok+1 in order to prevent any of them from becoming the new
(k + 1)th NN but no one is aware of the occurrence of the
event. Existing solutions rely on periodically re-broadcasting
the query, letting mobile objects aware of the query and the
current ok+1. Here, we propose a method to eliminate the need
for broadcasting the query.
Our technique is motivated by the observation that a mobile
object may become part of the query result only after the
node makes connection with some objects, including the query
issuer, that has already been part of the query result. Therefore,
in our scheme, if oi, i ≤ k, makes connection to a new
neighbor on, oi will pass the information about Q to on,
forcing on to monitor the cKNN queryQ as well. For example,
in Fig. 4, when o7 makes connection with o4 and finds that o4
is a part of R, it will start to monitorQ as well. When o7 sends
a location-update message to ok+1, the packet is forwarded
through (o7, o4, o1, q1, . . . ), expecting some intermediary
node can help further extend the safe time using more recent
information about ok+1.
There exists an extreme scenario in which above method
may fail to detect the possible query result. As indicated in
Fig. 5, mobile nodes form in circular order (q1, o1, . . . , o7)
and the communication range of q1 is plotted in dashed line.
Consider that o7 lies in R but is out of q1’s communication
range. Since o7 can only connect to o6, they are not aware of
that there is a query issued by q1; thus o7 will not monitor the
query and the result will be incorrect. However, this situation
is rarely happened and since the topology is continuously
changing in mobile network, the node will be notified about
the query in a very short period.
D. Proofs of Correctness
We show that our Loco-cKNN protocol generates correct
result for a cKNN query in this section.
Theorem 1. Suppose node ok+2 switches place with ok+1
before ok’s safe time expires, which is calculated based
	




 
) "#$%&
100 110 120 130 140 150300
400
500
600
700
800
900
1000
Number of mobile objects
Co
m
m
un
ica
tio
n 
co
st 
(m
es
sa
ge
/se
co
nd
)
 
 
Centralized
Naive
LocoKNN
Fig. 8: Communication cost for different number of objects.
100 110 120 130 140 1500.99
0.995
1
Number of mobile objects
Re
su
lt c
or
re
ctn
es
s r
at
io 
 
 
Centralized
Naive
Loco−cKNN
Fig. 9: Query result correctness ratio for different number of
objects.
to 150. The Centralized scheme, compared with the rest
two distributed methods, shows relatively notable increment
on communication cost when number of objects increases.
This results from that every involved object needs to report
its location to the server periodically. Two distributed meth-
ods, Naive and Loco-cKNN, also have slight increment on
communication cost. When node density increases, the query
result may change with higher possibility; thus, the cost of
distributed methods increases as well.
In addition, we have testified our protocol by means of
simulation as well. Centralized method served as the baseline
for correct result. The correctness ratio of varying k and
MaxSpd are all 1; hence, we omitted those figures for saving
the space. Fig. 9 illustrates the result correctness ratio for
different number of objects. Both Naive and Loco-cKNN have
slight error (for only one incorrect member of k) in the
result set. This is mainly due to time difference during the
implementation in simulation, and as mentioned earlier, the
error would be rectified soon and rarely occur.
V. CONCLUSIONS
This paper has addressed the problem of continuous k
nearest neighbor queries in a MP2P environment. We have
proposed a novel distributed monitoring protocol, called Loco-
cKNN, toward this issue. Two techniques, location awareness
and update collaboration, are adopted to reduce the com-
munication traffic by utilizing the location information of
each moving object and sharing the information among peer
nodes. These techniques are unique in that they are virtually
free without sacrificing the query result. Simulation results
demonstrate that the proposed techniques are highly effective
in reducing the amount of communication cost induced when
processing continuous KNN queries.
ACKNOWLEDGEMENT
This work was supported in part by the National Science
Council, Taiwan, under Grants NSC 100-2221-E-011-078.
REFERENCES
[1] F. Liu, K. Hua, and T. Do, “A p2p technique for continuous k-nearest-
neighbor query in road networks,” vol. 4653, pp. 264–276, 2007.
[2] K. Kim, Y. Cai, and W. Tavanapong, “Safe-time: Distributed real-
time monitoring of cknn in mobile peer-to-peer networks,” in Proc.
International Conference on Mobile Data Management. Washington,
DC, USA: IEEE Computer Society, 2008, pp. 124–131.
[3] B. Gedik, K.-L. Wu, P. Yu, and L. Liu, “Motion adaptive indexing
for moving continual queries over moving objects,” in Pro. ACM
international conference on Information and knowledge management.
New York, NY, USA: ACM, 2004, pp. 427–436.
[4] M. F. Mokbel, X. Xiong, and W. G. Aref, “Sina: scalable incremental
processing of continuous queries in spatio-temporal databases,” in Proc.
ACM International Conference on Management of Data. New York,
NY, USA: ACM, 2004, pp. 623–634.
[5] K. Mouratidis, D. Papadias, S. Bakiras, and Y. Tao, “A threshold-based
algorithm for continuous monitoring of k nearest neighbors,” IEEE
Trans. on Knowl. and Data Eng., vol. 17, pp. 1451–1464, November
2005.
[6] X. Xiong, M. F. Mokbel, and W. G. Aref, “Sea-cnn: Scalable processing
of continuous k-nearest neighbor queries in spatio-temporal databases,”
vol. 0. Los Alamitos, CA, USA: IEEE Computer Society, 2005, pp.
643–654.
[7] X. Yu, K. Q. Pu, and N. Koudas, “Monitoring k-nearest neighbor
queries over moving objects,” in Proc. International Conference on Data
Engineering. Washington, DC, USA: IEEE Computer Society, 2005,
pp. 631–642.
[8] W. Wu, W. Guo, and K.-L. Tan, “Distributed processing of moving k-
nearest-neighbor query on moving objects.” Los Alamitos, CA, USA:
IEEE Computer Society, 2007, pp. 1116–1125.
[9] P. Galdames, K. Kim, and Y. Cai, “A generic platform for efficient pro-
cessing of spatial monitoring queries in mobile peer-to-peer networks,”
in Proc. International Conference on Mobile Data Management (MDM),
May 2010, pp. 1–10.
[10] A. Guttman, “R-trees: a dynamic index structure for spatial searching,”
in Proc. ACM SIGMOD international conference on Management of
data, ser. SIGMOD ’84. New York, NY, USA: ACM, 1984, pp. 47–
57.
[11] N. Beckmann, H.-P. Kriegel, R. Schneider, and B. Seeger, “The r*-tree:
an efficient and robust access method for points and rectangles,” in Proc.
ACM SIGMOD international conference on Management of data. New
York, NY, USA: ACM, 1990, pp. 322–331.
[12] Z. Song and N. Roussopoulos, “K-nearest neighbor search for moving
query point,” in Proc. International Symposium on Advances in Spatial
and Temporal Databases. London, UK, UK: Springer-Verlag, 2001,
pp. 79–96.
[13] B. Zheng and D. L. Lee, “Semantic caching in location-dependent query
processing,” in Proc. International Symposium on Advances in Spatial
and Temporal Databases. London, UK, UK: Springer-Verlag, 2001,
pp. 97–116.
[14] H. Hu, J. Xu, and D. L. Lee, “A generic framework for monitoring
continuous spatial queries over moving objects,” in Proc. ACM Inter-
national Conference on Management of Data. New York, NY, USA:
ACM, 2005, pp. 479–490.
[15] K. Mouratidis, D. Papadias, and M. Hadjieleftheriou, “Conceptual
partitioning: an efficient method for continuous nearest neighbor moni-
toring,” in Proc. ACM International Conference on Management of Data
(SIGMOD). New York, NY, USA: ACM, 2005, pp. 634–645.
[16] C.-Y. Chow, M. Mokbel, and H. V. Leong, “On efficient and scalable
support of continuous queries in mobile peer-to-peer environments,”
IEEE Transactions on Mobile Computing, vol. 10, no. 10, pp. 1473
–1487, oct. 2011.
[17] C. Bettstetter, G. Resta, and P. Santi, “The node distribution of the
random waypoint mobility model for wireless ad hoc networks,” IEEE
Transactions on Mobile Computing, vol. 2, no. 3, pp. 257–269, July-
Sept. 2003.
	




 

"#$%&
 2 
AwardȩǴჴឦᄪ۩Ƕ 
Βǵᆶ཮Јள 
ךޑࣴزሦୱၨௗ߈คጕᆛၡᆶᆛၡၮᆉ೽ϩǴҁԛࣴ૸཮ϣ৒ᆶঁΓሦୱ࣬಄Ǵՠ఼ᇂय़ӛ׳
ቶǴӧୖᆶޑၸำύǴό໻ჹᆶԾρ࣬ᜢޑࣴزБӛԖ׳ుޑᇡ᛽ǴჹܭځдᆛၡπำޑጄᛑǴҭ׳
уᕕ ǶှӧୃӛܭคጕᆛၡᔈҔБय़ǴεৎЬाޑԵໆࣣࢂӵՖଞჹՉ୏ϡҹޑ੝܄Ǵջሡाեႝໆǵ
ե઻ཞٰ೛ीᆛၡڐۓǴЀځࢂаྷγ Montemanni ௲௤܌ගޑႝΚനλϯޑဂኞᐒڋǴᆶךॺ܌ឦ
ሦୱന࣬ᜢǶନԜϐѦǴᗋԖ΋٤ଞჹϺጕᆶ MIMO(multiple-input and multiple-output)೛ीޑ
ڐۓǴΨ೿ᆶคጕᆛၡ৲৲࣬ᜢǴзΓᕇ੻ঘభǶ 
ԶךॺޑፕЎࢂаՉ୏ӕᏆᆛၡᕉნࣁ୷ᘵǴଞჹޜ໔ࢗ၌(spatial query)྽ύǴ࣬྽዗ߐޑന
߈kঁᎃۚ࿯ᗺࢗ၌(kNN query)ޑᄽᆉݤୢᚒǴуаׯ຾ǶፕЎύЬाගрٿᅿᢀۺǴϩձࣁlocation 
awarenessǴаϷ update collaborationǴԜٿ໨ᐒڋёஒচۈޑБݤуаׯؼǴ٠ε൯फ़եӕᏆᆛ
ၡύ܌ሡޑ೯ૻԋҁǶԜҭ಄ӝคጕ೯ૻᆛၡύǴ࿯ᗺሡԵໆႝΚᆶ໺ᒡ઻ཞޑୢᚒǶԶа Java ำ
Ԅ܌ኗቪޑኳᔕ่݀ǴΨӕኬᡉҢΑךॺ܌ගޑڐۓϐᓬᗺǶൔ֋ϣ৒ಒ࿯ᕷӭǴ۩ӳεठ΢ؒԖၶ
ډ੝ਸޑୢᚒǴଞჹගୢޣޑୢᚒ೿ૈ୼ϒаӣเǶԜѦǴԖගୢޣࡌ᝼ǴךॺёауаԵቾǴӧࢗ
၌຾ՉύਔǴ٬Ҕޣёа୏ᄊӦፓ᏾ୖኧ kޑελǴԜࡌ᝼ΜϩڀԖୖԵሽॶǴޑዴёаӈΕԜࣴز
҂ٰޑ຾ՉБӛϐ΋ǴзךॺޑБݤ׳уӦԖቸ܄Ƕ 
Ԝԛ཮᝼ޑೕኳᗨฅόεǴՠΨӢԜՏ࿼Ӽ௨׳у໣ύǴ࣬ᜢ૸ፕૈ୼ᆫขΨ׳ᡉ዗ਗ਼Ǵᆶ཮ޣ
Ψ׳ԖୖᆶགǹКϐܭ೚ӭεࠠޑ୯ሞᏢೌ཮᝼Ǵ೭ኬޑኳԄዴჴԖځᓬᗺǶЀځࢂ཮᝼׀ᖂǴԖ΋
ࢤਔ໔ࣁ panel discussion (λಔ૸ፕ)Ǵ၀ਔ໔җཥуڵᆅ౛εᏢޑ Shankararaman௲௤Ь࡭Ǵᡣ
ᆶ཮ޣଞჹԾρޑ୯ৎ܈܌൩᠐ޑӦ୔Ǵ΋ଆ૸ፕӚ୯ޑᆛၡว৖౜ݩᆶΓ҇٬Ҕᆛၡޑ௃׎Ƕ೭ࢤ
ਔ໔ᡣεৎкϩޑΑှډӚ୯୯௃όӕ܌஥ٰόӕޑғࢲቹៜᆶว৖Ǵ๱ჴзΓӑຝుڅǶ 
᏾ᡏԶقǴ೭ԛҗ GSTFᖐᒤޑ཮᝼ǴᗨฅೕኳၨλǴՠӧӚ໨Ӽ௨΢೿࣬྽Ԗచ౛ᆶڬډǴගٮ
Αᆶ཮ޣࡐӳޑ૸ፕᆶҬࢬᐒ཮ǶԶ೭ᗨฅόࢂךಃ΋ԛୖᆶ୯ሞ཮᝼Ǵࠅࢂಃ΋ԛ҅Ԅ΢ѠаमЎ
ൔ֋ǴԴჴᇥ΢Ѡ߻Μϩᆙ஭Ǵ۩ӳྗഢளەǴၸำ΋Ϫ໩ճǹӕਔǴΨᙖҗԜԛᐒ཮Ǵᇡ᛽Αࡐӭ
д୯ޑ௲௤ᆶᏢғǴϕ࣬੮Πᖄ๎БԄǴаߡВࡕёаӆᝩុϕ࣬ҬࢬǶ 
Զ཮᝼ᖐᒤӦᗺࣁཥуڵǴΨࢂךಃ΋ԛ೷ೖ၀୯ǴΦᆪཥуڵа౜жϯᆪӜǴЀځࢂٗჺჺᕇ
ள୯ሞຑКޭۓޑክەᐒ൑Ǵ׳ࢂךԜՉགྷݙཀޑख़ᗺǶཥуڵՏೀ዗஥Ӧ୔Ǵߏԃ೿ࢂহۑ਻ংǴ
খډਔ൩೏ࡷଯǵᙁऊޑክەᐒ൑܌֎ЇǶክەᐒ൑؂ঁૐ༺ࣣόᆉϼεǴՠ୏ጕೕჄளەǴЪᕉნ
᏾ዅ๤፾ǴѤೀ׳ӭа୯޸Ȩើ޸ȩ଺ࣁᆘϯးႬǴΜϩ܃ΓǶԜѦǴߡ௘ޑᐒ൑௘ၮǴёа೯ၲѱ
୔ǴזೲΞБߡǶ 
୷ҁ΢Ǵཥуڵࢂ΋ঁલϿϺฅၗྍޑ୯ৎǴՠᏧᙖ๱ځӦ౛Տ࿼ޑख़ाǴ஥୏Αߎᑼǵૐၮᆶ
୍ܺ཰ޑว৖຾؁Ǵ؂ԃࣣԖ೚ӭ཮᝼ᆶεࠠ୘৖ᒧӧཥуڵᖐᒤǴ٬ளཥуڵᔒيࣁཥᑫς໒ว୯
 Global Science and Technology Forum 
10 Anson Road, International Plaza, Singapore 079903 
Tel: (65) 6327 0161/166     Fax: (65) 6327 0162     www.GlobalSTF.org 
 
 
 
 
 
PART A   
CONFIDENTIAL COMMENTS FOR AUTHORS ONLY 
MOBICONA2012_22  
 
Loco-cKNN: An Extended Safe Time based cKNN Query Protocol in MP2P Networks 
RECOMMENDATION 
I recommend that the paper:  
Accepted without changes 
 
PART B: COMMENTS FOR THE ATTENTION OF THE AUTHOR 
 
 Novel contribution: Research area is good and effective for mobile computing. 
 
 Originality in thought: The techniques used for peer to peer network are new. 
 
 Inferences : Very Good 
 
 Key strengths: This research work deals with the two  techniques  that’s  location  awareness & 
updates collaboration are effective for protocol.   
 
 Key weaknesses: No need to discuss Theorem in content III-D 
 
 Areas of improvement: Missing the key words. 
 
 Presentation/Organization of research: Good 
 
 
  
be divided into two classes: 1) centralized approaches [3]–
[7,14,15], and 2) distributed approaches [1,2,8,16]. Most of the
centralized approaches depend on mobile objects periodically
returning their location back to the server. Since most of them
are implemented with complex data structure and algorithm,
the system loading and accuracy of the query result are sig-
nificantly affected by the location-update frequency of mobile
objects. Unlike centralized method, distributed approaches
devolve computation load to mobile objects; hence they are
more suitable for mobile ad hoc environments. In this paper,
we focus on the distributed approaches and further analyze the
relative techniques.
Both [1] and [8] tackled the cKNN problem in a hybrid
approach. Their methods rely on a server, which receives
location updates from mobile objects and helps to compute the
query results. In addition, the server will delegate mobile nodes
to monitor the cKNN queries. These architectures, however,
may have a drawback that keeps a server’s loading remains
high.
In [2], the authors provided an approach to solve the cKNN
queries with stationary query points in MP2P networks. They
used the concept of safe-time and proposed a distributed
solution for the problem. For a given stationary query, query
result remains unchanged during the safe-time period. When
the safe-time expires, the method performs a ring broadcast
within a circular band to identify the new kth and (k + 1)th
objects. However, the concept of ring broadcast is infeasible
in MP2P network and cannot ensure the desired area can be
fully covered by the broadcast messages.
In [9], the authors proposed a cost-effective technique to
process four kinds of spatial monitoring queries based on
primitive stationary range monitoring query in MP2P system.
The method partitioned the network into disjointed gird cells
and forced each mobile node to cache queries that are relevant
to its home cell. Other types of continuous moving queries
can be converted into the primitive type of query. However,
the continuous monitoring overhead of those converted types
of queries was not addressed in the paper.
III. THE PROPOSED LOCO-CKNN
In this section, we first describe the system model used
in the paper. We then present an analysis of the cKNN query
followed by the proposed Loco-cKNN protocol for processing
cKNN query.
A. System Model and Assumption
In this paper, we consider a MP2P network that consists
of a collection of mobile devices. Each device is equipped
with some wireless communication interface such as IEEE
802.11. In addition, each mobile device has some positioning
capable mechanism such as GPS; hence it is aware of its
current geographical location at any time. A mobile device
communicates with another device by passing messages, for
which intermediary devices act as relays in forwarding the
messages. Also, this paper assumes that the maximum moving
speed of mobile devices is known in advance and is denoted
by MaxSpd. The assumption of prior knowledge of MaxSpd
is possible and reasonable in many scenarios. For example,
roaming human users typically have maximum capable mov-
ing speed. In addition, most road networks have maximum
speed limit that mobile vehicular nodes have to comply with.
A cKNN query is defined as a location-based spatial query
that continuously returns a set of k nearest objects to the
query issuer. Since each network object is associated with
a distinct mobile device, the terms object, device, and node
are used interchangeably throughout the paper. Given a set of
moving objects O = {o1, o2, . . . , on} and a set of stationary
query nodes QN = {q1, q2, . . . , qq} in a two dimensional
geographical space. A cKNN query continuously monitors a
set of k moving objects that are nearest to the corresponding
query issuer. Two query results are considered identical as
long as they consist of exactly the same set of moving objects,
regardless of the order of the objects. That is, a cKNN query
does not concern about the order of the objects in the result.
Due to mobility of moving objects, the query result changes
from time to time. It is important to inform the query issuer
about the change of the result; thus continuously monitoring
the query is the main process of the cKNN query service.
Without loss of generality, Loco-cKNN is described below
with respect to a query issuer q1.
Let dis(pi, pj) denote the Euclidean distance between po-
sitions pi and pj . Also let oti refer to the position of object oi
at time t. The relative distance between oi at time t1 and oj
at time t2 with respect to q1 is defined as dstq1(ot1i , ot2j ) =
dis(ot1i , q1) − dis(o
t2
j , q1). Last, let ith NN represent the ith
nearest neighbor of the query issuer.
B. Analysis of cKNN Query
Consider a cKNN query Q, issued by q1. Let us focus on
the time when query result changes. Generally, a cKNN query
process is divided into three phases: initial phase, monitor
phase, and update phase. In the initial phase, the query issuer
q1 submits the query Q and obtains the first query result.
After the initial phase, mobile objects enter the monitor phase,
during which they monitor Q continuously for the entire
query period. The aim of this phase is to ensure that every
mobile object can detect the change of query result caused
by itself and takes appropriate action accordingly. When an
object discovers that itself may affect the query result, it enters
the update phase immediately. In the update phase, the object
will send a location-update message to an appropriate node
as described later to update its knowledge about the current
location of the node, and the node will recalculate the result.
The monitoring phase and update phase alternates for each
mobile node until the query time of Q expires.
Upon the end of the initial phase, it is clear that mobile
objects in the network are divided into two sets: the result set
R, and the non-result set R. For example, in Fig. 1, q1 issues a
cKNN query with k = 5. We have R = {o1, o2, o3, o4, o5} and
R = {o6, o7} after the initial phase is performed. Note that
a change of the result can only happen at the time when one
of the object in R exchanges the position with another object
	




 
' "#$%&
q1 ok+1
2 1
1
( , )1
t tdst o oq i k +
oi
ok+1oi
ok+1 moves at 
MaxSpd
(t2 - t1)×MaxSpd
q1
ds
Fig. 3: Example of extended safe time.
3) Collaboration update phase: When oi finds itself may
exchange the position with ok+1, it proceeds to update phase
in which it sends a location-update message to ok+1. The
message contains the current location of oi along with the
timestamp of the location information of ok+1 known to
oi. In this phase, mobile nodes may collaborate to reduce
communication cost by sharing location information about
ok+1.
Assume that there is an intermediary node, op, on the
path from oi to ok+1. If op receives the location-update
message sending from oi to ok+1, op first checks the timestamp
associated with ok+1. If the location information about ok+1
maintained by op is more recent than the one maintained
by oi, op may use its location information to compute the
safe time for oi. By using the newer location information, op
may conclude that oi can further extend the safe time. If the
extended safe time exceeds a given threshold, op determines
to return the newer location information about ok+1 back to oi
without forwarding the location-update message. Otherwise, it
continues relaying the message. If there exists no such kind of
intermediary node, the location-update message will eventually
reach ok+1. In addition, when the location-update packet is
returned, either from ok+1 or from intermediary op, mobile
nodes along the path will update their location information
about ok+1 according to the information in returned packet.
For example, consider the communication graph shown
in Fig. 4, which reflects the tree topology structure of the
previous example. Suppose o5 detects that it might have
exchanged the position with o6, the current ok+1, it sends
a location-update message to o6 to acquire the latest position
of it. The packet goes through path (o5, o2, o6). If the result
does not change, o6 will simply return the packet, containing
its latest location information, back to node o5. Along the
reverse path, o2 will also update its location information about
o6 according to the packet. Later, if o4 sends a location-update
message through path (o4, o1, q1, o2), o2 can use the newer
information to help to re-compute the safe time for o4, without
forwarding the packet to ok+1. Thus, lots of communication
overhead can be saved. On the other hand, as the case when
node o5 indeed changes the position with o6, the original ok+1,
o6 will send a message to inform the query issuer q1 and o5
about the change, and starts to monitor o5. Since o2 relays the
q1 o1o2
o3 o4
o5
o6 o7
! !"#
Fig. 4: Collaboration update example shown in tree structure.
inform packet, it can update the location about o5, the new
(k+1)th, and computes a new safe time accordingly as well.
After a while when o4 issues a location-update message to o6,
the original (k + 1)th NN, the packet will go through q1. q1
will update the information about the new (k + 1)th object,
o5, to o4 and thus o4 knows a change has happened and it has
to monitor o5 from now on.
As described earlier, objects in set R also need to monitor
ok+1 in order to prevent any of them from becoming the new
(k + 1)th NN but no one is aware of the occurrence of the
event. Existing solutions rely on periodically re-broadcasting
the query, letting mobile objects aware of the query and the
current ok+1. Here, we propose a method to eliminate the need
for broadcasting the query.
Our technique is motivated by the observation that a mobile
object may become part of the query result only after the
node makes connection with some objects, including the query
issuer, that has already been part of the query result. Therefore,
in our scheme, if oi, i ≤ k, makes connection to a new
neighbor on, oi will pass the information about Q to on,
forcing on to monitor the cKNN queryQ as well. For example,
in Fig. 4, when o7 makes connection with o4 and finds that o4
is a part of R, it will start to monitorQ as well. When o7 sends
a location-update message to ok+1, the packet is forwarded
through (o7, o4, o1, q1, . . . ), expecting some intermediary
node can help further extend the safe time using more recent
information about ok+1.
There exists an extreme scenario in which above method
may fail to detect the possible query result. As indicated in
Fig. 5, mobile nodes form in circular order (q1, o1, . . . , o7)
and the communication range of q1 is plotted in dashed line.
Consider that o7 lies in R but is out of q1’s communication
range. Since o7 can only connect to o6, they are not aware of
that there is a query issued by q1; thus o7 will not monitor the
query and the result will be incorrect. However, this situation
is rarely happened and since the topology is continuously
changing in mobile network, the node will be notified about
the query in a very short period.
D. Proofs of Correctness
We show that our Loco-cKNN protocol generates correct
result for a cKNN query in this section.
Theorem 1. Suppose node ok+2 switches place with ok+1
before ok’s safe time expires, which is calculated based
	




 
) "#$%&
100 110 120 130 140 150300
400
500
600
700
800
900
1000
Number of mobile objects
Co
m
m
un
ica
tio
n 
co
st 
(m
es
sa
ge
/se
co
nd
)
 
 
Centralized
Naive
LocoKNN
Fig. 8: Communication cost for different number of objects.
100 110 120 130 140 1500.99
0.995
1
Number of mobile objects
Re
su
lt c
or
re
ctn
es
s r
at
io 
 
 
Centralized
Naive
Loco−cKNN
Fig. 9: Query result correctness ratio for different number of
objects.
to 150. The Centralized scheme, compared with the rest
two distributed methods, shows relatively notable increment
on communication cost when number of objects increases.
This results from that every involved object needs to report
its location to the server periodically. Two distributed meth-
ods, Naive and Loco-cKNN, also have slight increment on
communication cost. When node density increases, the query
result may change with higher possibility; thus, the cost of
distributed methods increases as well.
In addition, we have testified our protocol by means of
simulation as well. Centralized method served as the baseline
for correct result. The correctness ratio of varying k and
MaxSpd are all 1; hence, we omitted those figures for saving
the space. Fig. 9 illustrates the result correctness ratio for
different number of objects. Both Naive and Loco-cKNN have
slight error (for only one incorrect member of k) in the
result set. This is mainly due to time difference during the
implementation in simulation, and as mentioned earlier, the
error would be rectified soon and rarely occur.
V. CONCLUSIONS
This paper has addressed the problem of continuous k
nearest neighbor queries in a MP2P environment. We have
proposed a novel distributed monitoring protocol, called Loco-
cKNN, toward this issue. Two techniques, location awareness
and update collaboration, are adopted to reduce the com-
munication traffic by utilizing the location information of
each moving object and sharing the information among peer
nodes. These techniques are unique in that they are virtually
free without sacrificing the query result. Simulation results
demonstrate that the proposed techniques are highly effective
in reducing the amount of communication cost induced when
processing continuous KNN queries.
ACKNOWLEDGEMENT
This work was supported in part by the National Science
Council, Taiwan, under Grants NSC 100-2221-E-011-078.
REFERENCES
[1] F. Liu, K. Hua, and T. Do, “A p2p technique for continuous k-nearest-
neighbor query in road networks,” vol. 4653, pp. 264–276, 2007.
[2] K. Kim, Y. Cai, and W. Tavanapong, “Safe-time: Distributed real-
time monitoring of cknn in mobile peer-to-peer networks,” in Proc.
International Conference on Mobile Data Management. Washington,
DC, USA: IEEE Computer Society, 2008, pp. 124–131.
[3] B. Gedik, K.-L. Wu, P. Yu, and L. Liu, “Motion adaptive indexing
for moving continual queries over moving objects,” in Pro. ACM
international conference on Information and knowledge management.
New York, NY, USA: ACM, 2004, pp. 427–436.
[4] M. F. Mokbel, X. Xiong, and W. G. Aref, “Sina: scalable incremental
processing of continuous queries in spatio-temporal databases,” in Proc.
ACM International Conference on Management of Data. New York,
NY, USA: ACM, 2004, pp. 623–634.
[5] K. Mouratidis, D. Papadias, S. Bakiras, and Y. Tao, “A threshold-based
algorithm for continuous monitoring of k nearest neighbors,” IEEE
Trans. on Knowl. and Data Eng., vol. 17, pp. 1451–1464, November
2005.
[6] X. Xiong, M. F. Mokbel, and W. G. Aref, “Sea-cnn: Scalable processing
of continuous k-nearest neighbor queries in spatio-temporal databases,”
vol. 0. Los Alamitos, CA, USA: IEEE Computer Society, 2005, pp.
643–654.
[7] X. Yu, K. Q. Pu, and N. Koudas, “Monitoring k-nearest neighbor
queries over moving objects,” in Proc. International Conference on Data
Engineering. Washington, DC, USA: IEEE Computer Society, 2005,
pp. 631–642.
[8] W. Wu, W. Guo, and K.-L. Tan, “Distributed processing of moving k-
nearest-neighbor query on moving objects.” Los Alamitos, CA, USA:
IEEE Computer Society, 2007, pp. 1116–1125.
[9] P. Galdames, K. Kim, and Y. Cai, “A generic platform for efficient pro-
cessing of spatial monitoring queries in mobile peer-to-peer networks,”
in Proc. International Conference on Mobile Data Management (MDM),
May 2010, pp. 1–10.
[10] A. Guttman, “R-trees: a dynamic index structure for spatial searching,”
in Proc. ACM SIGMOD international conference on Management of
data, ser. SIGMOD ’84. New York, NY, USA: ACM, 1984, pp. 47–
57.
[11] N. Beckmann, H.-P. Kriegel, R. Schneider, and B. Seeger, “The r*-tree:
an efficient and robust access method for points and rectangles,” in Proc.
ACM SIGMOD international conference on Management of data. New
York, NY, USA: ACM, 1990, pp. 322–331.
[12] Z. Song and N. Roussopoulos, “K-nearest neighbor search for moving
query point,” in Proc. International Symposium on Advances in Spatial
and Temporal Databases. London, UK, UK: Springer-Verlag, 2001,
pp. 79–96.
[13] B. Zheng and D. L. Lee, “Semantic caching in location-dependent query
processing,” in Proc. International Symposium on Advances in Spatial
and Temporal Databases. London, UK, UK: Springer-Verlag, 2001,
pp. 97–116.
[14] H. Hu, J. Xu, and D. L. Lee, “A generic framework for monitoring
continuous spatial queries over moving objects,” in Proc. ACM Inter-
national Conference on Management of Data. New York, NY, USA:
ACM, 2005, pp. 479–490.
[15] K. Mouratidis, D. Papadias, and M. Hadjieleftheriou, “Conceptual
partitioning: an efficient method for continuous nearest neighbor moni-
toring,” in Proc. ACM International Conference on Management of Data
(SIGMOD). New York, NY, USA: ACM, 2005, pp. 634–645.
[16] C.-Y. Chow, M. Mokbel, and H. V. Leong, “On efficient and scalable
support of continuous queries in mobile peer-to-peer environments,”
IEEE Transactions on Mobile Computing, vol. 10, no. 10, pp. 1473
–1487, oct. 2011.
[17] C. Bettstetter, G. Resta, and P. Santi, “The node distribution of the
random waypoint mobility model for wireless ad hoc networks,” IEEE
Transactions on Mobile Computing, vol. 2, no. 3, pp. 257–269, July-
Sept. 2003.
	




 

"#$%&
100 年度專題研究計畫研究成果彙整表 
計畫主持人：邱舉明 計畫編號：100-2221-E-011-078- 
計畫名稱：行動同儕網路中連續性空間查詢暨隱私議題之研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 1 1 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100 字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100 字為限） 
相關的成果在連續 k個最近鄰居查詢方面，剛發表於 2012 年 International Conference 
on Mobile Communications, Networking and Applications (MobiCONA 2012)，並獲得 Best 
student paper award。另一方面，連續範圍查詢之研究成果，已投稿至 Computer Networks
期刊審核中。 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
本計畫為一年期的研究計畫，計畫之目標針對行動同儕網路的連續性空間查詢議題，做整
體且深入的了解，進而研發出新穎且有效率的行動網路連續性空間查詢機制，並佐以詳細
的效能評估。 
計畫成果於學術研究方面，主要是探討於行動同儕網路下，如何利用節點現有已知資訊，
並搭配同儕間的合作，降低進行連續空間查詢時所需的訊息傳輸量，以減少網路傳輸負
擔。此研究目標對於電力供應、通訊頻寬等資源有限的行動網路來說，具有相當的重要性。
我們主要的貢獻為能充分運用節點自身已帶有的資訊，不需額外的通訊成本即可延長節點
的安全時間，據此大幅降低所需的位置更新封包。此外，又運用同儕間路徑的重疊特性進
行資訊共享合作，再加上無線傳輸的偷聽性質，更可進一步將訊息量減到最低。再者，我
們也提出提早警告的機制，更可以避免周期性的發佈查詢廣播，且兼顧查詢結果的正確性。
相關的成果在連續k個最近鄰居查詢方面，剛發表於2012年International Conference on 
Mobile Communications, Networking and Applications (MobiCONA 2012)。另一方面，
連續範圍查詢之研究成果，已投稿至 Computer Networks 期刊審核中。 
此外，經此一計畫的支持，我們也在網路相關的研究議題方面，有其它的研究成果發表，
計畫整體的執行進度與原先計畫內涵相當的符合。由於空間查詢議題是現階段行動網路最
