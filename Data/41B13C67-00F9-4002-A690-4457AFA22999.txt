transform. With the Daubechies 4, the
proposed algorithm requires 37.68%,
50.00%, and 75.29% Mults in the
forward transform; and 37.54%, 49.95%,
75.29% Mults in the inverse transform.
When compared to the lifting scheme,
the computational counts
(multiplications and additions) of our
proposed algorithm are more than that of
the lifting scheme, but the latter has the
inconvenience of changing basis and
requires longer waiting time in software
implementation.
一.緣由與目的
The DWT has been recognized as a
natural wavelet transform for
discrete-time signals. Its parameters,
time and scale, are both discrete. In
many practical applications, the signals
which we want to process are usually
sampled, so the DWT is used
extensively. The Mallat algorithm [8, 9]
which utilizes the filter bank theory
computes the DWT very conveniently.
The filter bank theory provides a very
regular structure to accomplish it. If we
regard the structure of the forward DWT,
or the inverse DWT, as a cell, the cell
can be employed over and over again.
The forward transform cell contains a
lowpass filter, a highpass filter, and two
down-sampling operators. A forward
DWT cell has one input and two outputs.
Inputting the discrete data, then we get
its approximation and detail coefficients
from the two outputs. The 2-level DWT
is processed by inputting the 1-level
approximation data to the same forward
DWT cell, and we get the 2-level DWT
coefficients in the outputs. In the same
way, we can calculate all-level DWT
coefficients. On the other hand, the
inverse transform of the Mallat
algorithm is calculated by using a
reverse structure, but there is still a little
difference. The inverse DWT cell is
composed of a dual lowpass filter, a dual
highpass filter, and two up-sampling
operators.
The Mallat Algorithm is the
premier fast DWT algorithm; hence
there are some places in which we can
improve the DWT. Because convolution
operations occupy a lot of computational
complexities of the Mallat algorithm, the
short-length algorithm was proposed to
reduce the numbers of multiplications of
the convolution operation. The numbers
of multiplications in convolution
operation are proportional to the lengths
of filters, so the “short-length” method 
divides a long filter into three half length
filters to process [10, 12]. Outwardly,
Down-sampling and up-sampling
operations in the Mallat algorithm do
not add any computational complexities;
but the down-sampling operation
abandons extensive information which
we have calculated, and the up-sampling
operation inserts macro zero points into
data sequences that we prepare to
process. Using different phases of data
sequences well, the poly-phase
algorithm avoids the computation
redundancy incurred by up-sampling
where the notation Z represents the
advance operation, the notation D
expresses with the delay operation, and
the suffixes of filters display its phase.
Besides, each length of the filters
becomes only half, though the number
of filters increases.
00h
01h
00 01h h 
00g
01g
00 01g g 
10h
11h
10 11h h 
10g
11g
10 11g g 
1a n
1d n
0a n
Figure 1 A DWT cell of the
poly-short-length algorithm.
The inverse transform which is not
as straightforward as the forward
transform. When the sequence passes
through the up-sampling operator, the
odd polyphase components are all equal
to zeros. Therefore, the sub-sequence
with all zero values will appear in the
polyphase structure and we use this
property to modify the inverse DWT.
The order of the forward
poly-short-length algorithm is the
poly-phase algorithm first and then the
short-length algorithm. This order will
be reversed in the inverse transform.
Doing the short-length algorithm first in
the inverse transform can have a great
benefits. To reduce the computational
complexity, we use the short-length
algorithm again to substitute for the
convolution operation and obtain Figure
2. Because the structure of Figure 1 is
very close to Figure 2, we call it inverse
poly-short-length algorithm, although
the structure is not derived from the
poly-phase algorithm.
00h
01h
00 01h h
10h
11h
10 11h h
00g
01g
00 01g g
10g
11g
10 11g g
1a n
1d n
0a n
Figure 2 The inverse DWT cell of the
poly-short-length algorithm.
The complexity formulas of the
four algorithms considered above are
shown in Table 1.
Figure 3 The processing time of the
DWT with D4.
Figure 4 The computational complexity
of the DWT with D4.
The simulated results of a 512×512
still image decomposed by the
Daubechies 9/7 wavelet basis are shown
in Table 3. The computational
complexities are proportional to the
length of filters in the algorithm. Figure
5 and 6 show the bar graphs from the
results of Table 3.
Table 3 The result of the DWT of the
five algorithms with CDF(9,7).
Time(ms) Adds +Mults Mults Adds
Mallat 78 16083600 8577920 7505680
Short-Length 76 14721649 7364433 7357216
Poly-Phase 46 9100667 4816832 4283805
Lifting 172 3670016 1572864 2097152
Poly-Short-Length 40 7786172 3628089 4158083
Figure 5 The processing time of the
DWT with CDF(9,7).
Figure 6 The computational
complexities of the DWT with
CDF(9,7).
From Figure 5, the processing time
of the lifting scheme with the
Daubechies 9/7 wavelet basis is more
than that with the Daubechies 4 since the
former consists of 4 steps and the latter
of 3 steps. In addition to the lifting
scheme, the processing times of the
other algorithms are proportional to their
computational complexities roughly. On
the other side, the poly-short-length
algorithm has better performances in
terms of computational complexities
than that of the poly-phase algorithm
with the Daubechies 9/7 basis.
