 2
以 P2P 為基礎的多媒體存取系統的運作機制之設計與對網路效能
之分析 
The Design and Performance Evaluation for a Peer-to-Peer Based 
Multimedia Access System. 
 
郭家旭 1*、王三元 2、陳冠億 2、黃宛薇 2、林瑋誌 1、蔣惟丞 1 
1 國立虎尾科技大學 資訊工程學系 
2 義守大學 資訊工程學系 
*E-mail:kuoch@nfu.edu.tw 
 
摘要 
 
近幾年來 P2P 網路蓬勃發展，各種 P2P 相關研究也逐漸地受到重視。在 P2P 網路中，
散佈在各處的節點透過底層網路互相連接，各節點扮演相同的角色，利用應用層的網路特
性，建構具有自主可靠、延展性和安全等特性的分散式網際網路應用系統。在 P2P 這樣無
中央控管的系統下，會存在節點路由以及如何讓節點分散運作網路的問題，因此有賴於設
計適當的機制與協定才能使得整個系統的組織更加地完善。本計畫針對 P2P 疊加網路
(Overlay Network)中，路由節點的搜尋(Lookup)協定來做改進。首先探討各種 P2P 網路的
基本結構及運作模式，做深入及有系統的研究，根據 MIT 所發展出的 Chord Lookup Protocol
為基礎來設計出具有較好執行效率的方式，使得節點搜尋時能夠達到更快的效果，並修正
以 Chord 為基礎的演算法，減少錯誤以及訊息量，讓 P2P 網路的效能能夠更達到最佳化的
型態。 
Abstract 
 
 P2P networks have been paid much attention for the past several years, and more and more 
researches are also purposed. How to construct a reliability, scalability and security mechanism 
on P2P networks become the most important. This project is focused on improving the efficiency 
and performance on P2P Networks. Routing algorithm has great impacts on the system 
performance. In the existing DHT routing algorithms, we choose the Chord which is proposed by 
MIT to design a more efficient algorithm that makes the error rate of the finger table of peers and 
message loading reduced. Based on our simulation, the system performance of P2P Networks 
can be improved, and some issues we proposed in the project can also be solved based on the 
enhancement of the lookup operation on P2P network in the future. 
 
Keyword：Chord, finger table, successor, predecessor, lookup. 
 
一、前言 
 
從網際網路開始普及化到現今，Client-Server 的架構一直都是網路存取方式的主流，
主要的原因在於可以方便管理資訊，以及有效地掌握資源的配置。但是當網路使用者人數
逐漸迅速地增加，Server 所必須要面對的問題也逐漸浮出檯面，例如：存取空間的限制、
頻寬大小的窘境、網路延展性不佳以及計算能力的不足等等，為了解決這些問題，最近幾
年 P2P 網路的研究也逐漸地受到重視。Peer-to-Peer 網路架構發展至今，已經有許多的各種
不同的應用系統，除了最早用在音樂檔案分享之外，現在還有應用在醫學計算、VoIP、多
 4
 在眾多利用 Structured 的查詢演算法中，我們選擇了由 MIT 所提出的 Chord Lookup[6]
演算法來做我們研究的基準，因為它的包容性十分高，而且在 Table 上的儲存空間上之記
憶體消耗量也很低，如果此 Peer-to-Peer 網路的最大總數目為 N 的話，Chord 也只需利用
O(log N)筆欄位來儲存表格資訊，查詢時也只要花費 O(log N)次的詢問，Peer 的加入和離
開也只需 O(log2 N)個訊息就可以完成，因此以效能來說，Chord 是很具有規模彈性的演算
法。 
 
Chord 的運作模式就像是 DNS 提供的服務一樣，提供了名字對應到某個 Key 值以及將某個
IP 連結到某個值一樣，但差別在於 Chord 不需要特別的 Server 來做這件事，而是交給每一
個 Peers 去進行此程序。換訖，DNS 的工作主要是用來找尋某特定名字的主機，而 Chord
也可以用來找尋在這網路上儲存的某資料物件，Peers 彼此之間利用自己的 Finger Table 來
查詢和幫助其他 Peers 找尋 Key 的繼承者(successor)，因此 Finger Table 的資訊內容是 Chord
相當重要的一環。而另外一項重點 Chord 是 Peers 組成的環形架構，要穩固系統最重要的
就是維護繼承者(Successor)和前導者(Predecessor)資訊，因為要形成 Chord 所定義的環形架
構，Peers 之間必須得串接起來，而且不能間斷，因此在 Node 的 Join 和 Leave 時的機制也
就顯得十分地重要。 
1
3
7
5
4
6 2
0 1 的Finger Table
Start Interval Succ
2 [2, 3) 4
3 [3, 5) 4
5 [5, 1) 7
4 的Finger Table
Start Interval Succ
5 [5, 6) 7
6 [6, 0) 7
0 [0, 4) 1
7 的Finger Table
Start Interval Succ
0 [0, 1) 1
1 [1, 3) 1
3 [3, 7) 4
 
圖 (一) Chord 環狀架構圖與 Finger Table 
 
四、問題與研究方法 
 
 根據原始的 Chord 演算法來運作的話，在 Node 加入時的演算法部份，可能未必能夠
得到正確的資訊，Nodes 加入時會影響到部份區域的 Table，如果遇到在 Stabilization 運作
完成之前，有 Node 做 Lookup 的話，會產生以下三種情況： 
 
（1）首先此次 Lookup 相關的 nodes 都沒有被影響到，並且成功地只利用 O(log N)次，即
可找到所要找尋的 successor。 
（2）第二種情況是 successor 的部份已經更新完成，但是被影響到 Nodes 的 Table 尚未更
新完成，這時 Lookup 依然是會成功，但是可能就必須要花比較多的時間來找尋
successor。 
（3）第三種情況是被影響 Nodes 的 successor 尚未更新完成，或者是 Key 尚未轉移到新加
入的 Nodes 上，此時 Lookup 就可能會失敗。當然在應用程式部份就會通知說此次找
尋的資料沒找到，可能就會暫停一下，之後再繼續搜尋。因為修正 successor 的動作
其實不會很久，因此暫停時間也不用太長。 
 6
 
 上面圖(三)演算法部份，是修正過的 update_others 的演算法，這部份演算法主要是用
來修正因為有新的 Node 加入時，而必須變更的 Finger Table，由於在前面的 init_finger_table
部份，我們已經做過了修正，因此在這裡的演算法，我們也做了些許的更動，這邊都是以
Predecessor 的方向來做更新 Table，但是有可能到最後，演算法中的 p 會等於新加入的
Node，此時其實就已經無須再更新了，因為 init_finger_table 其實都已經做完了，同樣可以
聯想到，假使再接下去也可能更新的動作就繞了一圈，因此當 p 已經變成新加入的 Node
時，update_other 的動作其實就已經算是完成了，接下來再多做的都是浪費了，所以根據原
本演算法設計上的缺點，我們將其修正以減低錯誤與訊息的花費。 
 
五、結果與討論 
 
實驗結果如下圖(四)所示，我們利用 8 個 Nodes 來進行模擬，讓這 8 個 Nodes 
 
Table Error Rate of MaxSize 8
0.45
0.48
0.51
0.54
0.57
0.6
0.63
10 20 30 40 50 60 70 100
join/leave次數
er
ro
r r
at
e
Oringinal
Improve
 
圖(四)Table Error Rate 
 
隨機地加入或者離開這環狀架構，每種情況分別模擬 10000次，如果在沒有利用Stabilization
的情況之下，在 Node 加入離開時，Finger Table 裡因為原本的演算法而錯誤的機率會很高，
經由修正後的演算法，可以看到有些許的改善，在後面加入和離開的次數增高時，錯誤率
也會上升許多，但是在修改後的演算法以較節省訊息量的情況之下，卻能使得錯誤率降低。 
 
 Chord 所設計的方式就是以精簡為考量，在 Finger Table 等儲存空間上的使用量都是非
常優秀的，因此我們未來也考慮利用一個 Successor List，讓 Node 與 Node 之間的聯繫更加
地堅固，不單單只有依靠與 predecessor 和 successor 的連接，每一個 Node 可以去儲存本身
successor 的 successor，當如果有 Node 離開時，要銜接起來就會快速許多，不必再去利用
find_successor 的演算法來重新找尋新的 successor，直接從 Successor List 的資訊來做更新
就好了，而且也比較穩定，只是必須考量到的就是每隔一段週期要做定期 update 時，要如
何和 update 時產生的訊息量來達到一個最佳的平衡點，是除了效能之外最重要的考量，要
在 Table 中建立更多的資訊，就必須要花更多的訊息傳遞來保持 Table 的正確性，所以如果
要加入類似 Successor List 這類的 Table，沒有良好的演算法之前，可能反而會使得效率降
低，因此這也是可以值得去研究的議題。 
 
