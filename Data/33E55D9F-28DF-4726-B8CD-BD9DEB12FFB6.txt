 2
中文摘要 
網絡型生產系統內有複雜的階層式網絡結構。若能明確掌握工程鍊內各個節點的投入
與產出關聯模型，才能就最底層機台間的產品生產流程，再整個網絡觀點下做最有效的排
程和派工。也才能就上層工廠與工廠間的產品分配做整個工程鏈觀點下進行最有效的訂單
分配。大前提是要建立適切的問題模式，才能夠針對問題模式規劃、設計求解及決策系統。
據此才能在網絡各層節點上套用有效的優化求解工具，達成各節點偕贏的局面。 
本研究第一年探討網絡型生產系統裡層單一生產系統內泛用機台群組在加工時的時
間限制問題，並建立此問題的優化模式。。泛用的加工作業會有時窗限制規範某工件完成
前項加工作業後，必需在時窗內執行接續的加工作業。沒有時窗限制的一般加工作業則屬
時窗長度無限大的泛用加工作業。這些具批次處理能力、具時窗限制的機台及加工排程屬
於高度複雜的派工、併批、和排程的綜合問題。第一年完成此「具時窗限制的併批派工式
排程優化問題」數學模式的定義並規劃了三種遺傳演算模式。此外也開發了遺傳演算的求
解系統，同時探討了三種求解模式的效能。研究成果已經整理成論文發表於 2008 年在印
尼舉行的第九屆亞太工業工程年會(APIEMS 2008) ，見成果一。 
第二年研究探討具階層架構的網絡型生產系統在序列階層都有完工時間限制下的訂
單分配優化問題。研究成果完成「具時窗限制之多階多廠序列生產工程鏈的訂單分配問題」
數學模型的定義並據以規劃遺傳演算求解模式。此外也開發了遺傳演算的求解系統，求解
訂單在工程鏈各階層中各個廠各時段所分配的產品數量以及訂單在工程鏈生產網絡中所
選擇的生產途徑。研究內容也分就「工廠生產和運輸成本有無差異」及「工程鏈階層數」
兩個屬性進行範例問題測試。範例測試結果顯示不同的實數交配演算法對本問題各模式有
不同的求解結果，同時求解模式能使分配結果符合愈早完工愈好的常情。在各模式下求解
不同類型的範例問題時，求解結果皆符合測試所設定的模式及範例問題的特性。研究成果
已經整理成論文發表於中國工業工程學會九十七年度年會，見成果二。同時也整理成英文
論文將於 2009 年底，發表於日本舉行的第十屆亞太工業工程年會(APIEMS 2009) ，見成
果三。 
第三年研究重點在探討網絡型生產系統單一節點內的組裝線平衡問題，屬生產作業流
程中作業節點同時窗長度限制下的效能優化問題。本研究對較具時窗優勢的 U 型生產線進
行時窗優化問題的數學模式研擬，以及柔性計算模式的建立，並進行求解系統開發。本研
究針對此問題提出了蟻軍優化求解法，以單一階段的求解方法同時處理作業配置和投料排
序的問題。求解目標是在各工作站的組裝作業配置和投料順序規劃下得到：(1) 最小化生
產週程時間及(2) 最小化絕對工作量偏差，同時深入探討此兩種目標式的求解效果。本研
究研擬兩種組裝模式的生產情形：(1) 組裝線的各組裝作業依照投料順序個別組裝不同的
產品及(2) 相同工作站內的相鄰組裝作業共同組裝相同的產品。本研究使用解及擴大的技
術增加蟻軍的解數，並使用優加劣減擇段蟻拓系統的費洛蒙更新方式，完成最佳解的搜尋。
本研究同時開發一軟體系統實作提出的求解模式，並對多個範例問題進行測試。驗證結果
顯示，使用最小化絕對工作量偏差作為優化目標無法提升組裝線的生產效能；應改用最小
化總生產週程時間為優化目標。數值分析結果，本研究提出的蟻軍優化求解法相較於其他
相關此問題的求解法可得到較好的結果。研究成果已整理成英文論文將於 2009 年底，發
表於日本舉行的第十屆亞太工業工程年會(APIEMS 2009) ，見成果四。 
 4
rigorously defined in this research. We have proposed an Ant Colony Optimization (ACO) 
method for task balancing and model sequencing involved in the problem. The pitfall and fitness 
for the objective functions using the minimum cycle time (CT) and the absolute deviation of 
workloads (ADW) were discussed. An ant platoon consisting of three squads with different 
heuristic value evaluations was proposed to guide the solution construction for line balancing. 
The first task for an ant is to construct a sequence of assembly tasks subject to the precedence 
constraints and create workstation one after the other to host the tasks. The second task is to 
construct a model sequence. Our method uses a solution set augmentation technique to enlarge 
the number of solutions and then adopts the segment-based pheromone update strategy from the 
segment discriminated ant system (SDAS). A software prototype system was developed to 
implement the proposed method. Several numerical tests were conducted on benchmarks to 
evaluate the performance of the proposed method. Numerical results show that the ADW 
objective function, compared with the one with CT, is unable to maximize the line efficiency. In 
addition, the proposed ACO method significantly outperforms the existing solving algorithms in 
solving the discussed problems. The work was elaborated and written as an English paper 
submitted to the conference of APIEMS 2009, as shown in Achievement 4.  
Keywords: networked production system, time-constrained optimization problem, order 
allocation problem, genetic algorithm, ant colony optimization, U-shaped assembly line balance 
  
 Ant Colony Optimization Method for  
Time Window Constrained Batching and Scheduling Problem 
 
Feng-Cheng Yang† and Yu-Hui Hung 
Institute of Industrial Engineering, National Taiwan University 
1, Sec. 4, Roosevelt Rd., Taipei City 10617, TAIWAN 
Email: iefcyang@ntu.edu.tw† 
 
 
Abstract. The mathematical model of a time window constrained batching and scheduling problem is rigo-
rously defined. This problem is subject to process type constraints between operations and machines, prece-
dence constraints between operations of a job, machine batch capacity limits, and the time window con-
straints between two successive operations. Three Ant Colony Optimization (ACO) solution construction pro-
cedures are developed for finding the maximum machine utilization in the time window constrained batching 
and scheduling problem. The first is the TW-SOFT computation mode that regards time window constraints as 
soft constraints. The second is the TW-HARD computation mode that regards time window constraints as hard 
constraints. The third is the TW-semiHARD computation mode that treats time window constraints as soft 
constraint, but considers them hard constraints in candidate set construction process. Four heuristic terms 
are proposed to guide the ACO solution search. Among them, the MSD aims to start an operation right after 
its predecessor is completed; the MPD aims to fully utilize time capacities of machines; the MSPD is a hybrid 
of the MSD and MPD; and the MSCmax aims to minimize the maximum completion time of machines. A soft-
ware prototype system is developed to implement the proposed computation modes and heuristic terms. In the 
system, five ACO methods are implemented with the proposed ACO technique for the discussed problem. Sev-
eral numerical tests are conducted to evaluate performances of the five implemented ACO methods, including 
the AS, ACS, ASelite, ASrank, and SDAS. Combinations of the proposed computation modes and heuristic 
terms are tested to evaluate their performances. Numerical results show that the TW-semiHARD mode and 
MSCmax heuristic term outperforms others. In addition, the ACS, SDAS, ASelite, and ASrank are better 
choices for the problem.  
 
Keywords: time window constrained batching and scheduling problem, scheduling of batch processor, 
Ant Colony Optimization.  
 
j . Let the completion time of operation1. INTRODUCTION 
The manufacturing system discussed in this research that 
has time constrained batching and scheduling problems is in 
generic regarded as a discrete event system. The machine 
tools involved are parallel batch processors that can process 
more than one product simultaneously. A production job is to 
manufacture a product that belongs to a product type through 
a series of operations, which are planned in a process plan. 
The sequence of two consecutive operations of a job imposes 
a precedence constraint and a time window constraint in job 
scheduling, where an operation cannot start processing until 
its predecessor is processed. The time window constraint in-
dicates that when an operation finishes processing, the suc-
cessive operation must start within a period of time; other-
wise quality loss or tardiness cost is incurred. For example, 
suppose operation  is the successor of operation1+j j , the 
time window between them is denoted as , an attribute of 
operation
jw
j bec , op-
eration
j
1+j  should start at a time within ( )jjj wcc +, . 
Although time window constrained batching and schedul-
ing problems are widely studied, meta heuristics approach is 
rarely discussed. This paper develops an Ant Colony Optimi-
zation (ACO) method for solve this problem. The ACO ap-
proach is a solution construction method, constructing the 
solution by selecting one problem related item in each con-
struction step. When all of the selection processes are com-
pleted, the sequence of the selected items can be interpreted 
directly as or transform indirectly into a solution. The ACO 
method proposed is to achieve a scheduling and batching re-
sult without violating time window constraints while mini-
mizing the makespan and maximizing the machine utilization. 
The mathematical model of this complicated problem is rigo-
rously defined first. Then solution construction algorithms of 
the proposed ACO method are individually designed to deal 
with different levels of time window constraints. The prob-
lem-dependent heuristics for the computation of selection 
________________________________________ 
† : Corresponding Author 
163
 AS is the first proposed ACO, which was firstly applied 
to solve the TSP and then other combinatorial problems such 
as the Quadratic Assignment Problem (QAP) and Job Shop 
Problem (JSP) (Zwaan and Marques 1999). The AS defines a 
solution construction step as a state transition transforming 
from the last state that object i selected to one with 
ject j added. The selection probability for object j to success 
object is i
⎪⎪⎩
⎪⎪⎨
⎧ ∈⋅
⋅
= ∑
∈
otherwise ,0
 if , i
Nq
iqiq
ijij
ij
Nj
p
i
βα
βα
ητ
ητ
. (4) 
Candidate object set is composed of non-processed objects 
that do not violate any hard constraint when they are selected 
to succeed object  ij
iN
i ; τ is the pheromone intensity of 
link ijl between objects j and i .; ijη is a value calculated from a 
heuristic perspective, which is strongly related to the objec-
tive function. For example, dispatching rules such as Longest 
Remaining Processing Time (LRT) and First-In-First Out 
(FIFS) are frequently used for a job shop scheduling problem 
to evaluate the heuristic term. aram tersP e α andβ  are used to 
intensify or relieve the influence of t e val e of ijh u τ and ijη , re-
spectively. A hig lue of βα ητ ijij ⋅ leads to a higher probabili-
ty fo  object
her va
r j to be selected to succeed object i . The transition 
rule of the AS is a probability proportional stochastic method. 
An object j  with the highest value of ijp  is not guaranteed 
to be selected; however, if it is likely to be selected than oth-
ers. Thus, this proportional randomness allows ants to explore 
a larger area of the solution space for the global optimum 
solution. 
ij
After each ant has constructed a solution, pheromone up-
date method is invoked to update the pheromone values of the 
solution. The pheromone valueτ is update as 
( ) ijijijij ∀Δ+−← ,1 ττρτ , (5) 
where ρ is a pheromone evaporation rate, 10 ≤< ρ . Initially, 
pheromone on each object link is initialized by an initial val-
ue 0τ . The pheromone intensity is subtracted from pheromone 
evaporation and is added with an amount 
ij,
I
k
k
ijij ∀=∑
=1
τΔτΔ , and (6) 
( ) ( ), if 
0,  otherwise
k
ijkk
ij
l
f
ς
τ
⎧ ∈⎪Δ = ⎨⎪⎩
H S
S   (7) 
where I is the number of ants, kijτΔ  is the pheromone value 
dropped by ant on object link l , andk ij ς is a constant. ijτΔ  is 
the sum of pheromone values dropped from all of the ants. 
Let  be the solution found by ant k , kS ( )kSf   is its objec-
tive value. Through the segmentation operation, ( ) { },ijl i O⊆ =LkH S j∈ the set of object links that have been 
traversed by ant k can be used in pheromone update operation. 
The AS updates pheromone by adding pheromone on all ob-
ject links of a solution that has been selected by ants. The 
pheromone are evaporated and dropped on the segments by 
Eqs. 5 to 7. 
The first extension of the AS is ASelite (Dorigo et al. 
1996) which adopted an elitism strategy. ASelite focuses on 
the global best solution by giving an extra amount of phero-
mone on the object link of the global best solution. ASrank 
(Bullnheimer et al. 1999) ranks the performances of all the 
ants by comparing their objective values. A fix number of 
elite ants are selects to add pheromone on their solution based 
on their ranks. Dorigo and Gambardella (1997) proposed an 
Ant Colony System (ACS), which adds local searches to im-
prove the efficiency of solving TSPs. Superior/Inferior Seg-
ment Discriminated Ant System (SDAS) (Lin 2004) uses the 
statistics technique of  Rx −  chart to define a superior and 
an inferior limits to partition the ants into superior, inferior, 
and ordinary ants. Generally, superior ants deserve phero-
mone deposit and inferior ants are subject to a pheromone 
deduction. Table 1 illustrates the primary characteristics of 
these ACO systems for cross reference. 
Table 1. Comparison of each ACO methods 
ACO method AS ASelite ACS ASrank SDAS 
Deterministic selection   x  x 
Stepwise Pheromone 
Update   x   
Iterative Pheromone 
Update x x x x x 
Which ant or segment 
can play a part in phe-
romone update   
All All Best Best 
Elitest 
Best 
Inferior segments
Superior segments
Best 
In this paper, the AS, ASelite, ACS, ASrank, and SDAS 
are reconstructed for solving the complicated batching and 
scheduling problem.  
3. DEFINITION OF THE TIME CONSTRAINED 
BATCHING AND SCHEDULING PROBLEM 
An operation is the smallest and basic scheduling and 
batching item. The process plan for a job is restricted to a 
sequence of operations. An operation cannot be processed 
unless its predecessor is completed. Each operation is sche-
duled and dispatched to a process batch of a batching ma-
chine that is capable of processing the operation. Machines 
discussed in this research are parallel batching processors 
with different batching capacity that can process more than 
one operation simultaneously. The processing time required 
for a batch is the longest processing time of the batched. The 
time window constraint discussed in this research is the time 
period constraint between two successive operations. When 
one operation is completed, its successor should start process 
within the time window.  
Figure 1 is a Gantt chart representing a feasible opera-
tion scheduling. The rectangle in bold frame represents a 
batch, and the packed rectangle with rounded corners is a 
 
165
APIEMS 2008 Proceedings of The 9th Asia Pasific Industrial Engineering & Management Systems Conference
Nusa Dua, Bali – INDONESIA  December 3rd – 5th, 2008      
 1
1
1 1
1
, if  
and 1
1, otherwise
j
h
d
j
hj
j
d Q j
d
d
δ
−
−
=
−
⎧ ≥⎪= ⎨⎪ +⎩
∑
 
1 
Product type Job 
d = . (9) 
2 
3 
4 
5 
1 
1 
1 
2 
2 
1 2 3 
4 5 6 
7 8 9 
10 11 
12 13 
Serial Operations 
 
Figure 2.  Indices of jobs and their operations. 
The product type of operation j  is denoted as jχ ; therefore, 
jdj
δχ = . Let the sequence index of operation j  in job  
be , then  
jd
jq
j
1
1
11
1, if 
and 1
1, otherwise 
j
h
d
j
h
q Q j
q δ
−
−
=
⎧ + ≥⎪= ⎨⎪⎩
∑
j
q = . (10) 
Knowing the product type χ and the sequencing index of 
job
jq
j , the processing time , time window w , and process 
typev of operation
j j
j
t
j can be obtained by referring to product 
type information, i.e., t , , and . jjq wj Pχ= jjq
kb
j W= χ jjqj Vv χ=
Number of pre-allocated batches ~ on machine is set to 
the total number of operations with the process type
k
kμ , i.e., 
. The total number of pre-allocated batches is 
1k
∑
=
n
v kj μ,
1
k
=
=
j
kb
1
~
m
B b
=
. Batches are sequentially indexed following the 
order of machines. Let i be the batch index; then 
=∑
{ }Bi ~,",2,1∈
i
ie
i
. Figure 3 shows the pre-allocated batches on 
machines shown in Fig. 2, where there are eight operations of 
process type 1 and seven of type 2. Machine 1 and machine 2 
are of process type 1, their numbers of pre-allocated batches 
are set to 8. In a similar way, the number of pre-allocated 
batches on machine 3 is set to 7. 
In addition, the machine where batch i locates on is 
1
1
k 1 1
1
,  if , 
and 1
1,otherwise
i
i k
i
b i
γ
γγ
γ
−
−
=
−
⎧ ≥⎪= ⎨⎪ +⎩
∑ 
i
⎧ =  1 if ,i γ
γ = , (11) 
and the sequence index of batch can be traced from the 
batch index 
⎪⎩
⎪⎨ −= ∑−
=
otherwise ,~
1
1
ir
k
k
i
bi
ie i
. (12) 
Therefore, if =1, batch  is first batch process on ma-
chine
 Machine 1
Machine 2
Machine 3
1 2 3 4 
9 10 11 
17 18 19 
5 6 7 8
12 13 14 15 16
20 21 22 23
 
Figure 3. Planned batches on each machine. 
The introduced are problem definition data. During the 
solution construction, run-time data are required and are di-
vided into solution related and schedule related data. When 
and o-b assignment is selected in constructing a solution, the 
selected operation would be inserted to the operation set of 
the selected batch, which updates both of the solution and 
schedule related data.  
Solution Related Data 
Let the data structure of a solution to the discussed prob-
lem be  
{ }{ }{ }
γ . 
{ },,
~
~
BB
s s"{ },,,,,,,,,, ,,, 21 2~1~2222111211 ~21 BBB ssssssss sssssS """" ==  (13) 
where
ii
B
i
i n γθ≤=∑
=
ss  and  
~
1
. In the equation,s is the set of op-
erations assigned to batch i , and s is the c operation assigned 
to batch i . The data structure of the solution shown in Eq. 13 
is similar to that of a grouping problem. The solution con-
struction is to assign one operation to a batch in each step. 
The assignment is called an o-b assignment. When an ant 
executes one solution construction step, an o-b assign-
mento is selected from a candidate set, operation would 
be assigned to the operation set of batch *i ; i.e.,
i
ic
th
** ji
*j
{ }*** jii ∪← ss . 
Schedule Related Data 
Schedule related data are updated when an ant assigns an 
operation to a batch. Initially, processing time iπ  and availa-
ble starting time R of batch i are set to 0s. If the sequence in-
dex of an operation is 1, its process starting time can be set 
freely, since no time window constraint is applied. In this case, 
the latest starting time of the operation is set to infinity. 
i
' ji
'
Assume o-b assignment 'o is selected in the first step, the 
processing time of batch i is updated by the processing time 
of operation ,'j '' ji t←π . The earliest staring time of the suc-
cessive operation ' 1j + , ' 1jr + , is the completion time of batch 'i , 
' 1 ' ' 'j i i ir C R π+ = = +
1'
, (14) 
Operation +j
1'+j
should start processing before its latest starting 
timeλ , where  
' 1 ' 1 'j j jr wλ + += +
''' ji
'
"j
.      (15) 
Otherwise, it would violate time window constraint. Suppose 
that after a number of steps, o-b assignmento is selected in 
the current step; the process time of batch i is further updated 
by the processing time of operation by 
 
167
APIEMS 2008 Proceedings of The 9th Asia Pasific Industrial Engineering & Management Systems Conference
Nusa Dua, Bali – INDONESIA  December 3rd – 5th, 2008      
 ( )dow constraints; yet feasible solutions are still attainable if 
any of them exists. 
( ) ( )
3.3 Batch Precedence Graph, Pheromone Matrix, 
and Heuristic Terms 
Two consecutive operations of the same job have a pre-
cedence constraint and that makes the two batches batching 
them precedence-constrained, if these batches are located on 
different machines. Moreover, the batches on the same ma-
chine have precedence constraints, following their indices, so 
as to be executed one after another. This paper proposes a 
dynamic directed graph to represent these precedence con-
straints between batches, namely the batch precedence rela-
tion graph. This graph is constructed and updated during each 
solution construction step to help identifying whether an o-b 
assignment is feasible. 
They are either adjacent batches on the same machine or 
one of the batched operations in batch is the successive op-
eration of one of the batched operations in batch
y
x . LetG be 
the graph and , where is the set of nodes, which 
are batches in the schedule, and is the set of directed arcs, 
(B, ) B
A
AG =
( ){ }, | ,x y x y= ∈A B
)yx,  
. (29) 
Directed arc (  indicates that batch y is the successor of 
batch x . A slack time attribute is defined on each directed arc 
as the time difference from the completion time of batch x  
 the starting time of batch y . We proposes operatorto ( )⋅T s 
the slack time evaluator; therefore, ( )⋅T nd  
 a
ℜ , a
T
T
→A:
( )( ) xy CRyx −=, . (30) 
Therefore, when  the precedence constraint 
between batches
( )( ) 0, ≥yx
x and is satisfied; otherwise, it is not. The 
graph is dynamically augmented in the solution construction 
stage when a new successive empty batch is introduced (node 
adding) or a precedence relationship is formed between exist-
ing batches (arc adding). 
y
Figure 4 is the directed graph corresponding to the Gantt 
chart of Fig. 1 whose pre-allocated batches are shown in Fig. 
3. The wider rectangles represent the non-empty batches that 
have operations batched and the thinner ones are the empty 
batches with the smallest batch indices on each machine. The 
number on the left top of a batch is the batch index, and the 
number in angular brackets on an arc is the slack time. For 
example, the slack time of directed arc ( )1,19
( )19,1T
l
S
( )
is 
. ( ) 5510119 =−=−= CR
The o-b assignment is the main concern in constructing a 
feasible solution for the problem. Therefore, the object link of 
the ACO method is defined as the connection between an 
operation and a batch. Let link ij  stand for the connection 
between batch i and operation j. The segmentation operation 
on the solution  of Eq. 13 for the problem is a set of opera-
tion-batch links, 
{ }11 12 21 221 1
1 1
1 1 1 2 1, , , , , , , .B sB
B
i i B
s s s s s Bsl l l l l l
== = ∪ ∪ =
s
H S H s H s H s
 



∪ "
" "
 
<0> <0> <0>
<0>
<9> <0>
<0><2> 
Machine 1
1 
Machine 2
 (31) 
9 
Machine 3
17
2 3 
11 12
19 20
10
18
<5> 
<2> <0> 
<0>
T
n
<0>
<0>
 
Figure 4.  The directed graph reveals the precedence relationship
 between batches. 
As expected, the pheromone matrix is designed as an 
operation–to–batch matrix. The number of columns is the 
number of operations and the number of rows is the pre-
allocated number of batches B~ . Therefore, 
11 1
1
n
ij B n
τ τ
τ
⎡ ⎤⎢
B Bnτ τ
×
⎥⎡ ⎤= =⎣ ⎦ ⎢ ⎥⎢ ⎥⎣ ⎦
T 
 
"
# % #
"
, (32) 
where element ijτ  is the pheromone value deposited on ob-
ject link l .  ij
Four heuristic items are proposed in this paper, MSD, 
MPD, MSPD, and MSCmax, to participate in the selection 
probability computation for available o-b assignments. MSD 
stands for minimizing the start time delay of both operation 
and batch sides. If the earliest starting time of a batched oper-
ation is later than the starting time of the batch, other batched 
operations have to postpone their processing for an additional 
time period, which might make them violate their time win-
dow constraints. Moreover, postponing the starting time of a 
batch would utilize more time capacities of the machine and 
thus decreases the machine utilization. Therefore, an o-b as-
signment that has the earliest staring time of the operation 
closing to the starting time of the batch would be assigned a 
higher heuristic value. The heuristic item for MSD is 
100, if  
1 , otherwise
j i
MSD
ij
j i
u R
u R
η
=⎧⎪= ⎨⎪ −⎩
"j
. (33) 
MPD stands for minimizing the processing time differ-
ence. If the processing time of the operation is longer than 
that of the current batch, process time of the batch is extended 
to accommodate the operation. The extension results in ca-
pacity wastes for other batched, since their processing times 
are smaller than that of the extended batch. For the example 
shown in Fig. 5, batch i would have the smallest time capacity 
waste to have operation batched than operations j and . 
The heuristic item for MPD is 
'j
 
169
APIEMS 2008 Proceedings of The 9th Asia Pasific Industrial Engineering & Management Systems Conference
Nusa Dua, Bali – INDONESIA  December 3rd – 5th, 2008      
 If op on 'j is not the first operation of a job (i.e., 1' >jq ), its 
cessor (operation 1'−j ) has been assigned to a batch in 
Assume that operation 1'−j  is batched in batch *i ; then the 
precedence con etween batches and *i is resu
erati
prede
 
straint , if 
B .
arc 
 b 'i lted( )',* ii  is not yet d . There arc efined in A fore, a directed ( )'i  is co
is add
c
,*i
'+i
pre
nst
d to
ructed a  additio
e  the av i ssed e, the 
nd ad
ailabl
de
e ba
d t
ad
o A
tch set, as d
. In n, if batch 
1 scu  abov
edence arc ( )1',' +ii  is also ded to A ; i.e., 
( ){ } ( ){ }
( ){ }⎪⎪⎨
⎧
∪
<=+∪∪←
otherwise ,',⎩
′
~ 1and if ,1','',
*
''
*
ii
beiiii ii
A
sA γ iA . (45) 
In Fig. 6, after operatio is assign to empty batch
batc becomes an available batch and the arcs
n 'j 'i , 
h 1'+i ( )',* ii and 
( )1 are ',' +ii generated in the graph. 
 
<0> Machine 1 
1'−i
*i
'i
1* +i
1* +i
<0> 
 
<0> Machine 2 
 
2* +i
<2>  
 
(a) operation j’ is to be batched  
<0> Machine 1 
1'−i
*i
'i
1* +i
1* +i
<0>
 
<0> Machine 2 
 
2* +i
<2>  
 
(b) after operation j’ is batched  
<0> 
1'+i
<2> 
1'−j  
1'−j  
'j   
'j   
update he
e batches to keep a valid 
batch precede e relation gra
graph should have all slack tim
 
Figure 6.  Operation 'j  is assigned to empty batch 'i . 
After an o-b assignment is selected, the current schedule 
is updated accordingly. At first, the processing time, starting 
time and completion time of operation 'j  and batch 'i  are 
d or set by Eqs. 14 to 19. Then we need to update t  
starting and completion times of som
nc
 
ph. A valid batch precedence 
es on arcs non-negative. Let ( )**, yx  be th w
is th ma
e arc ith the smallest slack time in A and minT  
e s llest slack time, therefore, 
( ) ( ) ( )( ){ }yxTyx yx ,min arg, ,** A∈= , (46) 
( )( )**min , yxTT = . (47) 
If minT is less tha  zero, where the starting time of batch 
*y is earl the com letion time of batch *x , the prece-
dence constraint between batches *x and *y is iolated
n
an p
v . In this 
case, the c
ing tim
ier th
urre
e of 
nt schedule is not feasible. Therefore, the start-
atch *y should be postponed to have a non-b
negative ( )( )** , yxT . Batch *y is then postponed by sh ifting the 
starting  c
s
 time to the ompletion time of batch *x , i.e., 
** xy CR ← , (48) 
 and the completion time of batch *y i  updated by  
*** yyy RC π+← . (49) 
After batch  updated, the vali*y is dity of the graph is checked 
nce violation. Therefore, the checking and 
again, since the postponing of batch *y might result in another 
invalid precede
postponing procedure for the downstream batches are re-
peated until minT is non-negative.  
3.5 Candidate Set Update Procedure for the TW-
SOFT mode 
In constructing or updating the candidate set, an o-b as-
signment that would generate a directed cycle in the batch 
precedence graph is not considered. When a cycle occurs, an 
operation starts before the completions of its successors. For 
example, Fig. 7(a) shows that operation 1−j has been assigned 
to batch 10 while operation j is not assigned yet. If j is to be 
assigned to batch 2, which is one of the b tc es that complete 
before batch 10, arc(10,2) is 
constraint between operations
a h
formed due to the precedence 
j and 1−j . Therefore, as shown 
in Fig. 7(b), a directed cycle is resulted, which is an infeasible 
schedule. To avoid this kind of infeasible assignments, a tabu 
list of batches for available operation j , jΨ , is defined to 
record the forbidden batches. 
 4 
 
(b) an invalid graph with a directed cycle  
(a) a valid graph  
11
j-1 
4 
8 9 10 
1 2 3 
 
11
3 1 2
10 8 9 
j-1 
j
 
Figure 7.  Infeasible assignment generates cycle in the batch pre
cedence graph. 
T onstructing a pdating the candidate set, 
a feasi conducted for each combination 
of one ble operation and one available batch, to check 
the consis  of ocess types and whether the batch is 
forbidden. Th  is the following: 
Pro ( )j,ity    
Inp tion 
herefore, in c nd u
bility test procedure is 
 availa
tence  their pr
e procedure
cedu  re Feasiblili
 i , operaut batch j  
Begin 
If jΨi∉  and jvi =γμ  
return true; 
Else  
return false; 
End If 
End 
 
In TW-SOFT mode, since ti e in
 as soft constraints, no violati  c
m w dow violations are re-
gard on hecking is required in ed
 
171
APIEMS 2008 Proceedings of The 9th Asia Pasific Industrial Engineering & Management Systems Conference
Nusa Dua, Bali – INDONESIA  December 3rd – 5th, 2008      
 Note that for each operation, there are at most batchΛ o-b 
assignments. These assignments are subject to the feasibilit
test first. In general, the TW-semiHARD mode would create
y 
 
 one o-b assignment for each available operation. If all 
o-b   time window con-
straint th of time 
window constrained arcs is dete inistically selected for op-
eration j. The candidate set update procedure for the TW-
semiH
Proced ndidate Set Up re for the TW-semiH
ARD mode
Begin 
Foreach av
at least
 assignments of operation j violate the
, the o-b assignment that has e least number 
rm
 
ARD mode is 
ure Ca date Procedu
 
ailable operation j in opΛ  
Construct the set of tabu batches jΨ for operation j ; 
tr←
{ }←
Foreach available batch i i op
ueassignment−  
 
obno _
b
n Λ  
signmen on the current solution 
to obtain a tem orarily updated precedence relation 
graph ( )'B'' AG =  
each ( ) '  
If Feasiblil ( )j,ityi is true  
Simulate the as t ijo
p
,
For  arc yx,  in A
If ( )( )y,xViolation_TW is true 
 next batch  
End If 
{}i  ∪← bb
Continue with i
End Foreach { }ijoNN ∪←  
ntobno falseassignme ←−_ ; 
End
End Fo
t   
Foreach batch i
nment  on the current solution to 
obtain a temp rarily pdated precedence relation 
graph ( )',B'' AG =
Foreach a ( ) '  
 If 
reach 
If ignmenobno __ ass  is true
 in b  
0  =ci
sigSimulate as ijo
 u
; 
o
r yx,c  in A
If ( )( )y,xViolation_TW  is true 
1 +← ii cc
End If 
End Foreach 
End Foreach { }ii* cargi  min b∈∀=  { }
ji*oNN ∪←  
End If 
End Foreach 
End 
4. NUMERICAL TEST 
Several test problems are constructed for various perfor-
mance tests. Only a few number of the test problems have 
known optima. Optimum-unknown numerical tests are to test 
the performance of different ACO methods, including the AS, 
ACS, SDAS, ASrank, and ASelite. The comparison between 
the proposed three computation modes and heuristic terms is 
carried out by running optimum-known problems. 
The name of an optimum-unknown problem consists of 3 
to 4 parts. The first part refers to the tightness of the time 
window. The second refers to the amount of processing time 
variation. The third part is optional for specifying reentrant 
process flows. The fourth part is the number of operations. A 
problem with narrow time windows is a tight constraint prob-
lem, denoted by T, while a loose one is denoted by L (loose). 
Larg
flow  
er sett e iteration limit is set to 2000, 
but 
e processing time variation is denoted as L (Large), while 
small is denoted as S (Small). The problem with reentrant 
flows is denoted by r. Therefore, for example: TS34 is a prob-
lem having 34 operations, tight constraint, and a small 
processing time variation. Similarly, problem LLr53 is a 
problem having 53 operations with loose time window con-
straints, a large processing time variation, and reentrant s. 
For the paramet ing, th
an execution is forced to exit if the best optimal value 
computed so far has not been improved for 1000 iterations. 
The number of ants dispatched is set to 7 for those problems 
that have operations smaller than 60; otherwise, 10 ants are 
dispatched. The upper limit of pheromone value is set to 2.0 
and the lower one is set to 0.01, pheromone factor  ,1=α  
and heuristic factor 2.5=β .  
Four execution cases: TW-SOFT_MSPD, TW-SOFT+ 
MSCmax, TW-semiHARD+MSPD, and TW-
semiHARD+MSCmax were executed against the five ACO 
methods. Each problem in each case for each method has had 
been executed for 10 times. Their averaged best objective 
values are shown in Table 2. The values in bold face are the 
best ones among these cases. In general, the performance 
ranking order from the best to the worst is TW-
semiHARD+MSCmax, TW-SOFT+MSCmax, TW-
semiHARD+MSPD, and TW-SOFT+ MSPD. The TW-
semiHARD+MSCmax combination performs the best in all 
of th
 ex-
cep
where operations 1, 2, 3, and 4 belong to job 1 and operations 
e problems with loose time window constraints and prob-
lems with 68 operations. On the other hand, the TW-
SOFT+MSCmax combination can find better solutions in 
almost all problems with tight time window constraints
t TS68. In problem with 68 operations, the TW-
semiHARD computation mode performs better than TW-
SOFT mode.  
Comparing the results of ACO methods, the AS and 
ASrank have inferior performance than others in solving 
those problems without reentrant flows. For problems with 
reentrant flows, the ASrank performs better than others.  
Four optimum-known problems with optimal value 
equals 1.0 were created for testing the performances of the 
three computation modes. Problems A and B share the same 
optimal solution shown in Fig. 8. The time windows between 
consecutive operations in Problem A are all set to 0s while in 
Problem B they are set to infinity, which means no time win-
dow constraint. Problem C doubles the number of jobs in 
Problem A. Figure 9 is the optimal solution for Problem C, 
 
173
APIEMS 2008 Proceedings of The 9th Asia Pasific Industrial Engineering & Management Systems Conference
Nusa Dua, Bali – INDONESIA  December 3rd – 5th, 2008      
 assi
nt ACO methods, computation modes, and 
results, we can conclude that 
TW
. 
ENT 
l 
-
RE
mpatible job families to minimize total weighted 
tardi
:25-38. 
tem:
Milano.Milano, Italy. 
, 29-41. 
., Fowler, J. W. and Carlyle, M., (2002). A mod-
ified
D.C.
scheduling 
strat
maschke, J. (2000). Implementation of 
mod
6). Capacity determination 
mod
l, Electronics Manufactur-
02). A genetic algorithm to 
lectromagnetism-like mechan-
ism, genetic algorithms, wrapped-round self-organizing 
e to download these 
systems for their interests. The URL 
is http://www.ie.ntu.edu.tw/
gning an operation to a batch. MSD, MPD, MSPD, and 
MSCmax are four heuristic terms that designed in this re-
search to help guiding the search in state transition mechan-
ism. The numerical tests are executed to compare the effi-
ciency of differe
heuristic terms. 
From the computational 
-semiHARD mode and MSCmax heuristic term outper-
forms others. In addition, the ACO methods that add addi-
tional pheromone on the best solution so far are better choices 
for the problem
ACKNOWLEDGM
This research is partially supported by the Nationa
Science Council of Taiwan numbered with NSC 95-2221-E
002-270-MY3. 
FERENCES 
Balasubramanian, H., Mönch, L., Fowler, J., and Pfund, M. 
(2004). Genetic algorithm based scheduling of parallel batch ma-
chines with inco
ness. International Journal of Production Research. 42, 
1621-1638. 
Bullnheimer B, Hartl, RF, Strauss, C. (1999). A New Rank-
Based Version of the Ant System: A Computational Study. Cen-
tral European Journal of Operations Research and Economics 
1999; 7
Dorigo, M. and Di Caro, G. (1999). Ant colony optimization: 
a new meta-heuristic.1477 Vol. 2. 
Dorigo, M. and Gambardella, L.M. (1997). Ant colony sys-
 a cooperative learning approach to the traveling salesman 
problem. Evolutionary Computation, IEEE Transactions on. 1, 
53-66. 
Dorigo, M., Maniezzo, V., and Colorni, A. (1991). Ant Sys-
tem: An Autocatalytic Optimizing Process. Dipartimento di 
Elettronica e Informazione, Politecnico di 
Dorigo, M., Maniezzo, V., and Colorni, A. (1996). Ant sys-
tem: optimization by a colony of cooperating agents. Systems, 
Man and Cybernetics, Part B, IEEE Transactions on. 26
Lee, C.-Y., Uzsoy, R., and Martin-Vega, L.A. (1992). Effi-
cient Algorithms for Scheduling Semiconductor Burn-In Opera-
tions. Operations Research. 40, 764-775. 
Lin, D.-H. (2004) Added to the superior segments and sub-
tracted from inferior segments Ant System for Combinatorial 
Optimization Problems.Industrial Engineering,Master. 
Mason, S. J
 shifting bottleneck heuristic for minimizing total weighted 
tardness in complex job shops. Journal of Scheduling. 5, 247-262.  
Mason, S.J., Fowler, J.W., Carlyle, W.M., and Montgomery, 
 (2005). Heuristics for minimizing total weighted tardiness in 
complex job shops. International Journal of Production Research. 
43, 1943-1963. 
Mason, S.J., Jin, S., and Wessels, C.M. (2004). Re
egies for minimizing total weighted tardiness in complex job 
shops. International Journal of Production Research. 42, 613-628. 
Mathirajan, M. and Sivakumar, A. I. (2006). A literature re-
view, classification and simple meta-analysis on scheduling of 
batch processors in semiconductor. The International Journal of 
Advanced Manufacturing Technology. V29, 990-1001. 
Ovacik, I.M. and Uzsoy, R. (1997). Decomposition methods 
for complex factory scheduling problems, Kluwer Academic Pub-
lishers. 
Scholl, W. and Do
eling and simulation in semiconductor wafer fabrication with 
time constraints between wet etch and furnace operations. IEEE 
Transactions on Semiconductor Manufacturing. 13: 273-277. 
Tu, Y.-M. and Liou, C.-H. (200
el with time constraints and batch processing in semiconduc-
tor wafer fabrication. Journal of the Chinese Institute of Industrial 
Engineers. 23, 192-199. 
Uzsoy, R. and Wang, C.-S. (1997). Decomposition proce-
dures for global scheduling of complex job shops. Proceedings of 
Twenty-First IEEE/CPMT Internationa
ing Technology Symposium, 425-429. 
Wang, C.-S. and Uzsoy, R. (20
minimize maximum lateness on a batch processing machine. 
Comput. Oper. Res. 29, 1621-1640. 
Zwaan, S. and Marques, C. (1999). Ant Colony Optimisation 
for Job Shop Scheduling Proceedings of the '99 Workshop on 
Genetic Algorithm and Artificial Life. 
AUTHOR BIOGRAPHIES 
Feng-Cheng Yang is currently an associate professor in 
the Graduate Institute of Industrial Engineering at National 
Taiwan University. He received the Bachelor’s degree in 
Mechanical Engineering from National Taiwan University, 
in 1980, and the Ph.D. degree in Mechanical Engineering 
from the University of Iowa, USA, in 1991. His present 
research interests include various heuristics techniques for 
solving industrial optimization problems. Currently, his 
focus is the newly developed Water Flow-like Algorithm 
for various optimization problems. He has developed sev-
eral software systems covering various heuristics: ant colo-
ny optimization algorithms, e
maps, etc. These systems are developed to facilitate aca-
demic research and teaching. Various benchmark problems 
frequently used for new algorithm verification are included 
in these systems. Readers are welcom
. 
Yu-Hui Hung received an M.S. degree from the Graduate 
Institute of Industrial Engineering at National Taiwan Uni-
versity, Taiwan in 2007. She currently works in the photon-
ics industry as a production engineer. 
 
175
APIEMS 2008 Proceedings of The 9th Asia Pasific Industrial Engineering & Management Systems Conference
Nusa Dua, Bali – INDONESIA  December 3rd – 5th, 2008      
具時窗限制多階多廠序列生產工程鏈訂單分配問題暨其遺傳演算求解法 
林皙杰  楊烽正*  楊傑翔 
國立臺灣大學 工業工程學研究所 
臺北市羅斯福路四段一號 
*e-mail: iefcyang@ntu.edu.tw 
 
摘要 
本研究提出一個具實務性的工程鏈營運問題，
名為「具時窗限制之多階多廠序列生產工程鏈的訂
單分配問題」。除完整定義此問題及數學模型外，
並提出「階層內工廠競爭模式」和「階層內工廠合
作模式」二種求解目標。在競爭或合作的模式下與
訂單的分配策略下組成「競爭拆單模式」、「競爭不
拆單模式」、及「合作拆單模式」。本文研擬遺傳演
算求解法，在問題模型架構下規劃「訂單暨階層開
展式」的實數型染色體編碼法。並搭配提出一「訂
單暨階層區隔式」的染色體交配法，及五種實數交
配演算法。同時，也提出一「訂單暨階層區隔式」
的染色體突變法執行突變運算。本研究也規劃一套
「階層式染色體解碼法」有效地展出最終訂單分配
結果。求解結果會顯示訂單在工程鏈各階層中各個
廠各時段間分配的產品數量以及訂單在工程鏈生
產網絡中所選擇的生產途徑。 
關鍵字：時窗限制、多階多廠序列生產工程鏈、訂
單分配問題、遺傳演算法 
1. 緒論 
近年來為了提升產品的良率與降低生產成本
和 上 市 時 間 ， 企 業 依 各 自 的 特 性 組 成 工 程 鏈
(engineering chain)的生產型態漸漸形成。藉由工程
鏈的管理，鏈中各企業間的各個工廠(生產單元)形
成產品資料交換與分享單元。彼此可以互相合作分
享資料達成雙贏互惠的工程鏈效益。本研究從顧客
和企業兩個角度研討訂單在多階多廠序列生產的
工程鏈訂單分配問題。以顧客的角度來看，期望在
交期和時窗限制下將訂單的產品分配到工程鏈各
階層各個廠生產使得訂單的總生產及運輸成本最
低。以工程鏈各企業的角度來看，期望能爭取訂單
的產品分配，以充分利用各廠的產能減少閒置並能
符合訂單的交期要求。 
2. 文獻探討 
由於全球化及產品差異性的需求，傳統單一工
廠接單生產已經無法負荷需求。企業為了因應顧客
訂單需求增加，必需擴建工廠。因此訂單從傳統單
一工廠訂單分配轉變為多廠訂單分配。Jayaraman
和 Pirkul 針對多階層多廠的供應鏈(supply chain)生
產模式，並考量工廠及零售商的產能限制提出混合
整數線性規劃模式及以拉式鬆弛法(Largrangian 
Relaxation)為基的啟發式演算法來解決供應鏈多
廠生產的問題。目標是設置、生產、及運輸成本的
總成本最小化[1]。Chan 和 Chung 在訂單分配的需
求供應鏈架構下發展一個多準則基因演算程序來
求解訂單分配問題。此需求供應鏈架構只有需求端
和生產端兩階層。並以生產、運輸成本最小且平衡
各製造者的產能為目標[2]。Kawtummachai 和 Van 
Hop以供應鏈為架構來探討多供應商的訂單分配，
此供應鏈以一間公司來考量所有供應商的訂單分
配數量及購買成本(purchasing cost)來進行訂單分
配。目標在使總購買成本最低並且維持最佳的服務
水準[3]。Chen 和 Huang 針對供應鏈中各組成成員
作業時間的不確定性，提出三角模糊函數來描述這
些不確定性的變數。並且建構一個在不確定的供應
鏈環境下可以滿足訂單生產需求的模糊系統。此模
糊系統結合模糊理論和計劃評核術(Program Eval-
uation and Review Technique, PERT)來求出整個供
應鏈的總生產週期時間，並獲得訂單在供應鏈滿足
生產需求和交期[4]。 
3. 具時窗限制多階多廠序列生產工程鏈訂單分配 
3.1 問題定義 
在「具時窗限制多階多廠序列生產工程鏈訂單
分配問題」中，工程鏈是由序列的多層生產階層
(layer)所組成。每一階層分別處理產品的一個專業
生產程序。每階層都具有多個廠(plant)可供選擇以
執行及完成該階層的生產程序。此外在交期及時窗
限制的衡量下也必需確定訂單被分配到各廠規劃
期間的哪一個時段(time slot)，因此每一個廠必須
規劃能容納訂單的生產時段。最終產品(product)須
依序經過工程鏈每一階層生產程序才能完成生產。
如此形成多階多廠序列生產的工程鏈網絡架構。 
3.2 時限多階廠訂單問題模式架構 
在問題的模型架構上，本研究首先建立一個數
學模型，求解目標是所有訂單總成本最小化。接著
再研擬遺傳演算法求解模式並規劃最佳訂單分配
結果和生產途徑。在工程鏈的實務運作下，本研究
規劃兩種運作模式：「階層內工廠競爭模式」和「階
層內工廠合作模式」。在競爭模式下，訂單可拆單
由同階層的多個廠或不拆單由單一工廠生產，求解
如果使用傳統的染色體交配方法，在一條染色
體中隨機截取一小段染色體進行交配，染色體基因
值演化速度緩慢。因此本研究研擬一「訂單暨階層
區隔式」的染色體交配法，以前述染色體規則的「訂
單/階層染色體段」為交配單元各自進行交配演算。
交配時由親代兩條染色體的同一「訂單/階層染色
體段」，分別截取相同位置及長度的一小節染色體
進行交配。因不同的「訂單/階層染色體段」的長
度不同，因此分別隨機設定交配點。如此整條染色
體的每一個「訂單/階層染色體段」都會進行交配，
可以均勻快速的演化求解。 
遺傳演算法在求解不同的問題時，最佳解會出
現在基因值值域上特定的範圍中。因此，染色體基
因值交配後，交配值的分佈若不是均勻分佈在值域
上，則遺傳演化結果會有偏頗。如果此問題的最佳
解落在交配值分佈密度高的範圍時，可以很容易地
搜尋到最佳解。在考量基因交配值分佈情形下，本
研究提出並探討五種實數交配演算法：「大值分隔
兩段式」、「小值分隔兩段式」、「中段和任一端段式」、
「兩端兩段式」、及「中段往覆兩段式」。此五種實
數交配運算法對求解結果都有不同的影響。 
1. 大值分隔兩段式：此交配演算是比較兩基因值
後取大於大值與上界的範圍，進行內差演算，
產生一個交配值。再取小於大值與下界的範圍，
進行內差演算產生另一個交配值。 
2. 小值分隔兩段式：比較兩基因值後取大於小值
與上界的範圍，進行內差演算產生一個交配值。
再取小於小值與下界的範圍，進行內差演算產
生另一個交配值。 
3. 中段和任一端段式：在兩基因值間進行內差演
算產生一個交配值。再隨機選取大於大值與上
界或小於小值與下界的範圍進行內差演算產
生一個交配值。 
4. 兩端兩段式：比較出兩基因值後取大於大值與
上界的範圍，進行內差演算產生一個交配值。
再取小於小值與下界的範圍，進行內差演算產
生另一個交配值。 
5. 中段往復兩段式：此交配方法是取此兩基因值
分由兩值做為內差參數為零的起點進行兩個
內差演算產生兩交配值。 
為了讓整條染色體可以均勻突變，本研究提出
「訂單暨階層區隔式」的染色體突變法，在突變染
色體的每一「訂單/階層染色體段」中，隨機選取
一點進行突變。 
本研究針對訂單內產品跨階運輸數量守恆限
制提出一「階層式染色體解碼法」。由基因值換算
而得訂單分配率及上階來源產品量，從顧客端逐階
層地進行染色體解碼，計算各訂單分配到各階層各
廠各時段的產品數。由基因值解碼成相對的產品分
配數時，須推算出各基因代表的產品分配變數。 
解碼過程會依照本研究提出的「可拆單」和「不
拆單」分配方式有不同的「階層式染色體解碼法」。
此兩種解碼法以下分別稱為「可拆單染色體解碼法」
和「不拆單染色體解碼法」。 
1. 可拆單染色體解碼法：可拆單分配方式是訂單
在工程鏈生產網絡中，每一階層都可以選擇多
於一個廠來生產。因此在「可拆單染色體解碼
法」需考量各階層各廠各時段皆有可能分配到
訂單的產品量。各訂單各階層各廠各時段的產
品分配量解碼過程由階層 1 開始逐層進行。過
程中，確定某基因 ϕ,,kib 代表的訂單、階層、本
階和上階廠、及本階和上階時段後(即
ysyskix ,,',',, )，
須先計算與該基因同屬相同上階來源時段的
同階層基因值加總，並確認上階來源時段的產
品量，再進行比例分配求得該基因代表的分配
變數的分配產品量。 
2. 不拆單染色體解碼法：不拆單分配方式表示訂
單在工程鏈中的每一階層只可以選擇一個工
廠生產。因此，訂單的產品只可以分配到各階
層其中一個廠的各個時段生產。在「不拆單染
色體解碼法」中，本研究以階層內受分配的基
因值總和最大的廠來做為訂單在各階層選擇
分配的廠。因此不拆單解碼程序多了各階層工
廠的選定作業。 
3.4 遺傳演算法目標函式 
本問題目標函式依提出的「階層內工廠競爭模
式」和「階層內工廠合作模式」兩種模式略有不同。
在染色體編碼中已設計迎合訂單最晚完工時窗(含
最終交期)限制的染色體數目。染色體解碼過程也
依產品跨階運輸數量守恆定律進行各階各廠各時
段產品數量分配。訂單分配結果仍可能超過工廠時
段產能限制或產品運輸時間超過時段的間距。針對
此兩項限制條件，本研究採用懲罰策略處理。本問
題目標是成本最小化，當產生違反此兩限制條件的
不可行解時，在目標函式上賦予一極大成本值，再
透過遺傳演化進行淘汰。因此，定義產品分配量生
產時間超過工廠時段產能總時間是
cM 。產品運輸
時間超過時段間距的總時間是
tN 。設染色體違反
限制條件衍生懲罰成本值是 ，是各張訂單的需求
量乘上
cM 和 tN 。 
( )∑
=
+=
p
i
tci NMaP
1
 6) 
 4. 實例驗證與結果分析 
本研究針對所提出的問題及演算法，以 C#程
式語言開發 GA-based Multi-Plant and Multi-Layer 
Serial Engineering Chain Order Allocation System，簡
稱為 GA-ECOAS，見圖 1，以進行範例測試。針
對本研究提示的三種問題求解模式，「競爭拆單模
式」、「競爭不拆單模式」、及「合作拆單模式」。
使用八個不同類型的測試範例進行測試，比較並
探討各類型範例問題的測試結果。各範例求解設
定交配率 0.8，突變率 0.1。所有測試範例都使用
「兩端兩段式」的實數交配演算。 
P
 7
成果三： 
Feng-Cheng Yang and His-Chieh Lin, 2009, “Time Window Constrained Order 
Allocation Problem for Multi-plant/Multi-layer Serial Engineering Chain and 
GA-based Solving Method,” Proceedings of the 10th Asia Pacific Industrial 
Engineering and Management Systems Conference, Kitakyushu, Japan. 
roughly utilize the resource of each entity to maximize the 
profits of all entities.  
With the formation of engineering chains, the order alloca-
tion problem complicates from dealing with a single or mul-
tiple factories to dealing with multi layers and multi factories. 
In an engineering chain with a serial of production activities, 
the processing times of the product in each activity are the 
most important management targets, to meet the requirement 
of the time to markets in a minimal cost. Since the engineering 
chain consists of multiple factories in each layer, the order al-
location (or distribution) is an integration problem that should 
thoroughly utilize the available production capacities of all of 
the entities and schedule the production flow to timely transfer 
the production between entities in adjacent layers. Therefore, 
the time window constraints applying to the order allocation 
problem should be considered in order to meet the order deli-
very demands.  
2.1 Time Window Constraints 
Time window constraints can be classified into a con-
straint of a single-side time window and a constraint of a 
double-side time window (Tan et al., 2006) on the basis of the 
number of time limits defined. A single-side time window con-
straint defines either an earliest or a latest time limit; e. g., a 
latest service time is given for each pickup and delivery station 
in a simple vehicle routing problem. Conversely, a two-side 
time window constraint specifies both the earliest and latest 
service times to request a service must be done within this time 
period.  
The applications of time window constraints include hard 
or soft constraints in solving a constrained problem (Ombuki 
et al., 2006). Hard time window constraints must be met for a 
feasible solution; on the other hand, a feasible solution might 
have a soft time window constraint violated. The violation of a 
soft time window constraint will incurs penalties in evaluating 
the quality of the solution. 
In an engineering chain, time window constraints are 
usually encountered in the production delivery between two 
factories on two consecutive layers. In order to meet the due 
date, the product production activities in each factory of each 
layer have a scheduled time window to complete its manufac-
turing operations and delivery the product to the consecutive 
factory. Once the time window constraint is violated, the prod-
uct completion date may not meet the due date. 
2.2 Order Allocation Problems 
The order allocation is to distribute production orders to a 
number of factories subject to limited production capacities 
and a due date requirement for the final product. Under the in-
fluence of the increasing global competition and product cus-
tomization, the traditional order fulfillment for an enterprise 
with a single factory is no longer to meet the customer de-
mands. To enhance the production efficiency, the production 
activities are conducted by a serial of production plants in dif-
ferent layers, based on the diverse manufacturing technologies. 
Multiple and plants are therefore dispersedly constructed to 
meet customer demands directly. The order allocation problem 
is then enhanced and complicated both horizontally in the 
same layer and vertically throughout the serial chain. Jayara-
man and Pirkul (2001) proposed a hybrid integer programming 
model for a supply chain order allocation problem, which is 
solved by a Largrangian relaxation-based heuristic algorithm. 
Their model considered the capacities constraints of the retail-
ers and factories while the objective was to minimize the total 
cost of equipment setup, operation processing, and transporta-
tion. Chan and Chung (2004) proposed a multi-criterion genet-
ic algorithm procedure to solve a two-tier supply chain, includ-
ing the demand and supply layers. Their objective was to bal-
ance the production loads and minimize the production and 
transportation cost of the supply chain. They also used an Ana-
lytic Hierarchy Process to evaluate the fitness of a chromo-
some.  
Kawtummachai and Van Hop (2005) distributed produc-
tion orders of a company to multiple suppliers considering the 
purchasing cost and economic quantities to obtain minimal 
procurement price to maintain the best service level. Chen and 
Huang (2006) used triangular member functions to model 
fuzzy decision variables to construct a fuzzy inference system 
that can meet the production demands against the demand un-
certainty. The fuzzy system incorporated PERT to compute the 
overall cycle time, order completion time, and demand quanti-
ties.  
The Genetic Algorithm, GA, models discussed in the lite-
rature for solving the order allocation problem usually adopted 
the direct coding scheme to encode the order assignment as 
genes of a chromosome that represents an order distribution 
result. Lin and Gen (2007) developed a GA based multistage 
decision making model for the multi-objective resource alloca-
tion problem, MORAP. They modeled this problem as a multi-
stage decision network where a number of selection variables 
were defined in each stage. Only one selection variable were 
enabled to construct a optimal decision path. The resources 
discussed included labor, financial, raw materials, orders, and 
products. Pareto solutions were therefore generated from the 
GA model.  
As shown in the literature, the genetic coding for modeling 
the solution to a multilayer resource allocation problem is in 
general modeled as a Boolean selection variable. This paper, 
however, proposed a hierarchically cascading encoding 
scheme to model the selection variables as normalized real 
numbers, associated with a cascading decoding method to dis-
tribute orders to factories layer by layer.  
The available literature focused on the order distribution 
for multiple plants and the coordination between suppliers, 
manufacturers, retailers, and customers. The result of an order 
distribution is simply an amount of products for each plant. 
The distribution is not further assigned to the time slots of the 
plant. Therefore, no precise information about the production 
Since the largest completion time for the three orders is day 3 
and the first time slot is day 2, two time slots are defined. In 
layer 3, one plant is installed and three time slots starting from 
day 3 to day 5 are defined, since the largest completion time is 
day 5 and the first time slot is day 3. Note that the product de-
livery from slot 2 of plant 1 in layer 2 to slot 1 of plant 1 in 
layer 3 is impossible, where the source slot is day 3 and the 
target slot is also day 3. Although the direct arcs (feasible 
transportation flows) shown in the figure can be constructed 
from the prescribed product demands and completion time re-
quirements, if the required transportation time for a product is 
larger than the time difference between the target and source 
slots, the order allocation is still infeasible. Otherwise, the 
number of product delivered on to this arc should be zero.  
Order 3 
Layer 1 Layer 2 
Layer 1 Plant 2 
Layer 3 
Slot 1 
(day 1) 
Slot 1 
(day 1) 
Slot 1 
(day 2) 
Slot2 
(day 3) 
Slot 1
(day 3)
Slot 2
(day 4)
Slot 3
(day 5)
Infeasible 
Layer 2 Plant 1 Layer 3 Plant 1 
Layer 1 Plant 1 
 
Figure 1.  Product delivery flows for order 3 on the engineering 
chain. 
Order 1 
Order 2 Plant 2 
Order p Plant r1 
Plant 1
Plant 2 
Plant r2 
Plant 1
Plant 2
Plant rl
Layer 2 Layer l 
Slot 1 
Customer 
Layer 1 Layer 0 
Layer 1 Plant 1r  
Plant 1
Slot 2 
Slot v1 
Slot 1 
Layer 1 Plant 2 
Slot 2 
Slot v2 
… 
 
Figure 2.  The order distribution between plants of an engineering 
chain. 
The orders are distributed directly from the customer to 
the plants in Layer 1; no physical product delivery is con-
ducted, no transportation time or cost is incurred. The order al-
location problem is then to distribute the product demands to 
the time slots of plants in the same layer, layer by layer, with-
out violating the completion time requirements and transporta-
tion time constraints to have a minimal production and trans-
portation cost. Figure 2 is a schematic diagram of an order al-
location problem with p product orders. The chain consists of l 
layers, with each layer k has rk plants and vk time slots. Since 
Layer 0 is refer as the customer, r0 = 1 and v0 = 1. 
This paper proposes three order allocation modes: order 
splitting under competition mode, order splitting under corpo-
ration mode, order competition mode. In the order competition 
mode each plant in the same layer competes for the order; only 
one plant takes all of the order. In splitting modes, the plants in 
the same layer split the order. The objective is then to reduce 
the production and transportation cost. On the other hand, in 
the corporation mode, all plants in the same layer split the or-
der while balancing their loads. Therefore, the objective of this 
mode will consider reducing the idle capacity of the plants, in 
addition to the production and transportation costs. The no-
menclature used in the mathematical model is introduced first 
and then the model: 
Properties of Order and Product 
p : number of orders 
i : order index, pi ,...,2,1=  
q : number of product types 
j : product type index, qj ,...,2,1=  
ie : product type of order i , { }qei ,...,2,1∈  
ia : the demand quantity of product ie on order i 
iD : the final due date of order i (unit: day) 
Properties of the Engineering Chain and Plants 
l : number of layers on this engineering chain 
k : layer index, l,...,,,k 210= 。The customers is regarded as 
the only entity on layer 0. 
kiw , : the latest completion time of order i  processed in layer 
k . Since the first time slot in layer k is day k, kw ki ≥, . In 
addition, in a serial engineering chain the completion time 
for an order in the rear layer should be larger than the one in 
the previous layer; i.e., 
kiki ww ,1, <− . For the customer,
i,w ,i ∀= 00 . 
kiz , : the number of time slots required for order i  in layer k ; 
1,, +−= kwz kiki . 
kr : the number of plants in layer k and 10 =r . 
s : index of plants in the same layer; therefore, in layer k 
krs ,...,2,1= . 
kv : the number of time slots in layer k , where { } 1max , +−= ∀ kwv kiik  to allow all orders with different 
processing times can be completed in layer k. 
y ：: index of time slots in the same layer; in layer k ,
kvy ,...,2,1= . 
, 1 ,1
, 1 ,1
, , ', ', , , ,
1 1 ' 1 ' 1 1 '
, , ', ', , , ', ,
1 2 ' 1 ' 1 1 '
, ,
, ,
1 1 1 1 , ,
i k i kk k
i
i k i kk k
i
k k
i
i
z zr rp l
i k s y s y e k s
i k s y s y y
z zr rp l
i k s y s y e s k s
i k s y s y y
r vp l
k s y
e k s
i k s y e k s
E y x C
y x U
F
I y C
t
−−
−−
= = = = = =
= = = = = =
= = = =
⋅ +
⋅ +
⎡ ⎤⋅ ⎢ ⎥⎢ ⎥⎢ ⎥
∑∑∑∑∑∑
∑∑∑∑∑∑
∑∑∑∑
, (5) 
where ∑
=
−=
p
i
skeyskiskysk i
tXuF
1
,,,,,,,, and E , I are the weights of 
the production cost and capacity waste, respectively, which are 
specified by the user.  
3.2 Genetic Algorithm for Solving the Order Al-
location Problem 
Chromosome Encoding 
Due to the layer-wised structure of the engineering chain, 
this paper proposed an order-layer based GA encoding scheme. 
Each order constitutes l order/layer chromosome segments. 
Since there are p orders and l layers, a chromosome that 
represents a solution of the order allocation problem is there-
fore composed of pl  order/layer segments. The segments are 
hierarchically arranged following the sequences of orders and 
then layers. Each segment consists of a number of variables 
that represent the numbers of products delivered to the time 
slots of the layer. The number of variables is the number of 
feasible transportation paths that deliver products from pre-
vious layer to the layer. The sequence of the variables defined 
in the segment is hierarchically arranged following the se-
quence of plants and then time slots.  
Since the number of time slots required for order i in layer 
k is 
kiz , , the feasible product deliveries from time slot 'y  of 
layer k-1 to layer k are slots 
kizyyy ,,...,1',' += . Notice that the 
number of feasible delivery paths reduces for the index in-
creased time slot 'y . Therefore, the number of feasible delivery 
paths for order i (or variables) from a plant in layer k-1 to a 
plant in layer k is 
 
( ) ( )( )( ) ( )⎟⎠⎞⎜⎝⎛ −−=−−++−+ −−− 12
11...1 1,,1,1,,,, kikikikikikiki zzzzzzz
. 
Let the number of variables for the segment of order i and 
layer k be
kig , ; then 
( )⎟⎠⎞⎜⎝⎛ −−= −−− 12
1
1,,1,1, kikikikkki zzzrrg , (6) 
where 1−kr and kr  are the numbers of plants of layers k-1 and 
k, respectively. 
The genes of the chromosome are encoded as real num-
bers within 0.1 and 1.0. A chromosome is expressed as a vec-
tor [ ] [ ]lppplikiilp...BBB ,2,1,,,1,,12,11,121 .................. bbbbbbbbbB == , 
where [ ]
kigkikikiki
...bbb
,,,2,,1,,,
=b ， pi ,...,2,1= ， lk ,...,2,1=  is 
the order/layer chromosome segment for order i distributed to 
layer k. Gene ϕ,,kib  is the ϕ th gene, where kig ,,...,2,1=ϕ ,
10 ,, ≤≤ ϕkib , ℜ∈ϕ,,kib . The initial values of all of the genes are 
assigned with normally distributed random numbers; i.e., 
( )1,0U~,, ϕkib . Each gene maps to a product delivery variable 
ysyskix ,,',',,  
based on its location in the segment. For example, in 
Fig. 3, chromosome [ ]p...BBB 21=B ; iB consists of segments
1,ib , 2,ib ,…, and li ,b . Since segment ki ,b is composed of kig ,
genes, 
,, , ,1 , ,2 , , i ki k i k i k i k g
b b ...b⎡ ⎤= ⎣ ⎦b , the variable ysyskix ,,',',, mapped 
by gene ϕ,,kib  can be identified hierarchically from the com-
position structure of plants and time slots. Specifically, the in-
dices s', y', s and y to the variable can be systematically identi-
fied for gene ϕ,,kib . As shown in the figure, ki ,b  can be first 
decomposed into 1−kr blocks, where each block is dedicated to 
a plant in layer k-1. A block is then further decomposed into 
1, −kiz  sub-blocks, where each sub-block is dedicated to a time 
slot in layer k-1. A sub-block is first divided into kr  sub-sub-
blocks to map to the kr  plants in layer k. Finally each sub-
sub-block contain ( )1', +− yz ki  gene. 
1B  … iB  pB
1,,kib 2,,kib ϕ,,kib kigkib ,,,
…
1,1b … …l,1b 1,ib … ki ,b  … li ,b  … 1,pb … lp ,b
… …
… …
… … 
… … 
ysyskix ,,',',,  
Chromosome B
Segment for order i  
distributed to layer k  
Plants in yayer k+1 1 2 1−kr's  
1 2 'y  1, −kiz
y  kiz ,'y  1'+y  
Time slots of plant 's
Time slots of plant s 
feasible for order i 
ϕ,,kib
… … 
1 2 s  kr  Plants in layer k 
 
Figure 3.  The mapping between decision variable and the gene. 
The number of products of order i 
ysyskix ,,',',,  transferred 
from time slot y' of plant s' in layer k-1 to time slot y of plant s 
in layer k is computed from the value of gene ϕ,,kib  via syste-
matic computations from first layer to the end of the engineer-
that stand for the delivery paths whose source is plant s' in 
layer k-1. To computer the value of Q, a nested looping com-
putation, under the loop of time slots y', that loops through all 
plants and time slots in the current layer is conducted in ad-
vance. Let 
, 1, ', 'i k s yA −  denote the number of products of order i 
delivered to time slot y' of plant s' in the previous layer, whose 
value is computed from the previous layer. The value of 
ysyskix ,,',',,  is then computed as 
( )( )QbARoundx kiyskiysyski ϕ,,',',1,,,',',, −←  (7) 
where ( )•Round  is the rounding operation for an integral 
product number. As noticed, the number of products distri-
buted from a time slot of the previous layer must be exactly 
equal to the sum of products distributed to the time slots of the 
current layer. Since the distribution ratios are real numbers and 
rounding operations are applied to obtain integral numbers of 
distributed products, the sum of the products distributed,  
, , ', ', ,
,
= i k s y s y
s y
L x
∀
∑ , (8) 
may exceed or short of the number of products distributed 
from, 
, 1, ', 'i k s yA − . When a surplus value is checked, the value of 
product number is subtracted from the largest variable. When 
the value of shortage is checked, the value of product number 
is added to the largest variable. Therefore,  
( )
( ) { }
* * * * , 1, ', ', , ', ', , , , ', ', ,
* *
, , ', ', ,
,
,
, arg max
i k s yi k s y s y i k s y s y
i k s y s y
s y
x x A L
xs y
−
∀
← + −
=  (9) 
Let DecodingForOrderSplittingMode () be the procedure 
of chromosome decoding and solution generation for the order 
splitting under cooperation and competition modes, whose de-
tails are shown as follows: 
 
Procedure DecodingForOrderSplittingMode ()  
Begin 
1 for 1=i  to p   // Products looping 
2  ,0,1,1i iA a←   
3   for 1=k  to l   // Layers looping 
4   for 1=s  to kr  
5    for 'yy =  to kiz ,  
6     , , , 0i k s yA ←   // Initial the number of 
product delivery 
7    end for 
8   end for 
9   1←ϕ   // Start from the first gene of the chro-
mosome segment of order i layer k 
10   for 1'=s  to 1−kr   // Plants (previous layer) 
looping 
11    for 1'=y  to 1, −kiz   // Slots (previous layer) 
looping 
12     0←L  
13     ϕθ ← ; 0←Q  
14     for 1=s  to kr  
15      for 'yy =  to kiz ,  
16       θ,.kibQQ +←   // Aggregate 
the gene values 
17       1+←θθ  
18      end for y 
19     end for s 
20     for 1=s  to   // Plants (current 
layer) looping 
21      for y = y' to zik  // Slots (current 
layer) looping 
22      
 ( )( )QbARoundx kiyskiysyski ϕ,,',',1,,,',',, −←  
23       
, , , , , , , , ', ', ,i k s y i k s y i k s y s yA A x← +  
24       ysyskixLL ,,',',,+←  
25       if 1=s  and 'yy =  then // 
Record the gene index of the largest value 
26        * 1s ← ; *y y′← ;
*
, , ', ',1,i k s y yx x ′←  
27       else 
28        if *
, , ', ', , >i k s y s yx x  then 
29         *s s← ; *y y← ;
*
, , ', ', ,i k s y s yx x←  
30        end if 
31       end if 
32       1+←ϕϕ  
33      end for y  // Slot 
34     end for s  // Plant 
35     if 
, 1, ', 'i k s yL A −≠  then 
36     
 ( )* * * * , 1, ', ', , ', ', , , , ', ', , i k s yi k s y s y i k s y s yx x A L−← + −  
37      ( )* * * * , 1, ', ', , , , , , i k s yi k s y i k s yA A A L−← + −  
38     end if 
39    end for y' // Slot 
40   end for s' // Plant 
41  end for k // Layer 
42 end for i // Order 
End 
 
An extra operation of selecting one plant in each layer is 
conducted in the decoding procedure for the order competition 
mode. The winner plant ∗ks in layer k for order i has the maxim-
al value of sum of genes mapping the product delivery paths 
from the slots of the winner plants
, 1i ks
∗
− in the previous layer, 
kr
 Objective Function for the Fitness Evaluation 
Although no time window constraint violation is yielded 
from the predefined structure of the product delivery paths, in-
feasible solutions might be generated when the assigned 
amount of product processing exceeds the production capacity 
of the plant or the required transportation time of a product de-
livery exceeds the time difference between the target and 
source time slots. These constraints has been discussed and 
shown in Eqs. 2 and 3. In our GA model, the amount of con-
straint violation is computed and converted into a penalty val-
ue P and added to the objective functions shown in Eqs. 4 and 
5. The penalty is 
( )G c tP M N= +
, 
(10) 
⎪⎩
⎪⎨
⎧ <−= ∑∑∑∑= = = =
otherwise,                                          0
0 if , ,,
1 1 1 1
,,,,,,
,
ysk
p
i
l
k
r
s
z
y
skskeyski
c
FutXM
k ki
i    (11) 
, 1 ,1
, , ', ', , , ', ,
1 1 ' 1 ' 1 1 '
, , ', ', , , ', ,
1 ' , 
                        if 1 '
0,  otherwise
i k i kk k
i
i
z zr rp l
i k s y s y e s k s
i k s y s y y
t
i k s y s y e s k s
x h y y
N
x h y y
−−
= = = = = =
⎧ − − +⎪⎪= ⎨ > + −⎪⎪⎩
∑∑∑∑∑∑
 (12) 
where Mc is the total amount of time capacity exceeding, Nt is 
the total amount of transport time exceeding , and G is an user 
specified equivalent constant to balance the numerical values 
between the time exceeding the limits and cost to be mini-
mized. Note that P is zero for a feasible solution.  
4 NUMERICAL TESTS AND RESULT 
DISCUSSION 
To verify the proposed GA computation model, we gene-
rates a number of sample problems from two perspectives: the 
diversity of production and transportation costs and the varia-
tion of the numbers of layers. The first perspective is the cost 
variation such that the production and transportation costs are 
either all the same for the plants in the same layer or they are 
significantly different among the plants. To name the generated 
problem, letter ‘E’ is used to indicate the cost is equal and ‘D’ 
is used for different cost. The second perspective is referring to 
the numbers of layers. The larger number of the layers, the 
more complex of the problems. The number of layer is then di-
rectly attached to the name of the problem. Therefore, a prob-
lem with name ‘D3’ means it layer number is 3 and the pro-
duction and transportation costs of plants are different. We, 
therefore, generates eight sample problems: E2, E3, E4, E5, 
D2, D3, D4, and D5. Details about the eight problems please 
refer to (Lin, 2007). For the problems named as Dx, the pro-
duction and transportation costs of plant 1 in each layer are set 
as the smallest for easier recognition, without loose of general-
ity. In addition, a prototype solving system implementing the 
proposed GA model was developed in C# programming lan-
guage and executed on a PC to conduct numerical tests. Figure 
6 show a snap shot of the developed system. 
 
Figure 6.  The GA based engineering chain order allocation sys-
tem. 
These problems are then solved by the proposed GA solv-
ing system in the three modes: order splitting under competi-
tion mode, order splitting under corporation mode, and order 
competition mode. Iteration limit was set as the termination 
condition for the solution evolution computation. The popula-
tion seizes and iteration limits settings for the eight problems 
are shown in Table 3. In the genetic operations, crossover rates 
are all set to 0.8 and mutation rates are 0.1. 
Table 3.  The settings of the iteration limits and population sizes of 
the problems 
Problem Iteration Limit Population Size
D2 600 700 
D3 900 1000 
D4 1000 1300 
D5 1200 1500 
E2 600 700 
E3 900 1000 
E4 1000 1300 
E5 1200 1500 
 
Figure 7 illustrates the final production distribution route 
for problem D4 in the order splitting under competition mode. 
Since plant 1 of each layer has the minimal production and 
transportation costs, the order allocation focuses on the time 
slots of the first plants in all of the layers. Moreover, the orders 
have been allocated to the earlier time slots to shorten the 
completion times. Figures 8 and 9 show the results of the order 
splitting under corporation mode and order competition mode.  
5. CONCLUSION AND REMARKS 
Order1
Layer1
Plant 1
1000
Layer1
Plant 2
0
Layer2
Plant 1
1000
Layer2
Plant 2
0
Layer2
Plant 3
0
Layer3
Plant 1
1000
Layer3
Plant 2
0
Layer3
Plant 3
0
Layer3
Plant 4
0
Layer3
Plant 5
0
Layer4
Plant 1
1000
Layer4
Plant 2
0
Layer4
Plant 3
0
0
0
1000
0
0
0
0
0
0
0
1000
0
0
0
0
0
0
0
0
0
0
0
0
1000
0
0
0
0
0
0
0
0
0
0
0
0
Order2
Layer1
Plant 1
2500
Layer1
Plant 2
0
Layer2
Plant 1
1603
Layer2
Plant 2
897
Layer2
Plant 3
0
Layer3
Plant 1
0
Layer3
Plant 2
2088
Layer3
Plant 3
412
Layer3
Plant 4
0
Layer3
Plant 5
0
Layer4
Plant 1
1907
Layer4
Plant 2
593
Layer4
Plant 3
0
897
0
1603
0
0
0
412
0
0
1191
0
0
0
0
897
0
0
0
0
0
0
0
0
0
490
0
1598
103
0
309
0
0
0
0
0
0
 
Order3
Layer1
Plant 1
1500
Layer1
Plant 2
0
Layer2
Plant 1
1500
Layer2
Plant 2
0
Layer2
Plant 3
0
Layer3
Plant 1
1282
Layer3
Plant 2
56
Layer3
Plant 3
107
Layer3
Plant 4
52
Layer3
Plant 5
3
Layer4
Plant 1
1397
Layer4
Plant 2
103
Layer4
Plant 3
0
0
0
1500
0
0
0
107
52
3
56
1282
0
0
0
0
0
0
0
0
0
0
0
0
1282
56
0
0
45
0
62
2
0
50
0
0
3
Order4
Layer1
Plant 1
1000
Layer1
Plant 2
0
Layer2
Plant 1
1000
Layer2
Plant 2
0
Layer2
Plant 3
0
Layer3
Plant 1
925
Layer3
Plant 2
75
Layer3
Plant 3
0
Layer3
Plant 4
0
Layer3
Plant 5
0
Layer4
Plant 1
1000
Layer4
Plant 2
0
Layer4
Plant 3
0
0
0
1000
0
0
0
0
0
0
75
925
0
0
0
0
0
0
0
0
0
0
0
0
925
0
0
75
0
0
0
0
0
0
0
0
0
 
(b) Allocation result of order 2 
(c) Allocation result of order 3 (d) Allocation result of order 4 
(a) Allocation result of order 1 
 
Figure 8.  The order allocation results for problem D4 in the order splitting under corporation mode. 
Order1
Layer1
Plant 1
1000
Layer1
Plant 2
0
Layer2
Plant 1
1000
Layer2
Plant 2
0
Layer2
Plant 3
0
Layer3
Plant 1
0
Layer3
Plant 2
1000
Layer3
Plant 3
0
Layer3
Plant 4
0
Layer3
Plant 5
0
Layer4
Plant 1
1000
Layer4
Plant 2
0
Layer4
Plant 3
0
0
0
1000
0
0
0
0
0
0
1000
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1000
0
0
0
0
0
0
0
0
0
Order2
Layer1
Plant 1
2500
Layer1
Plant 2
0
Layer2
Plant 1
2500
Layer2
Plant 2
0
Layer2
Plant 3
0
Layer3
Plant 1
0
Layer3
Plant 2
2500
Layer3
Plant 3
0
Layer3
Plant 4
0
Layer3
Plant 5
0
Layer4
Plant 1
2500
Layer4
Plant 2
0
Layer4
Plant 3
0
0
0
2500
0
0
0
0
0
0
2500
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
2500
0
0
0
0
0
0
0
0
0
 
 
Order3
Layer1
Plant 1
1500
Layer1
Plant 2
0
Layer2
Plant 1
1500
Layer2
Plant 2
0
Layer2
Plant 3
0
Layer3
Plant 1
1500
Layer3
Plant 2
0
Layer3
Plant 3
0
Layer3
Plant 4
0
Layer3
Plant 5
0
Layer4
Plant 1
1500
Layer4
Plant 2
0
Layer4
Plant 3
0
0
0
1500
0
0
0
0
0
0
0
1500
0
0
0
0
0
0
0
0
0
0
0
0
1500
0
0
0
0
0
0
0
0
0
0
0
0
Order4
Layer1
Plant 1
1000
Layer1
Plant 2
0
Layer2
Plant 1
1000
Layer2
Plant 2
0
Layer2
Plant 3
0
Layer3
Plant 1
1000
Layer3
Plant 2
0
Layer3
Plant 3
0
Layer3
Plant 4
0
Layer3
Plant 5
0
Layer4
Plant 1
1000
Layer4
Plant 2
0
Layer4
Plant 3
0
0
0
1000
0
0
0
0
0
0
0
1000
0
0
0
0
0
0
0
0
0
0
0
0
1000
0
0
0
0
0
0
0
0
0
0
0
0
(b) Allocation result of order 2 
(c) Allocation result of order 3 (d) Allocation result of order 4 
(a) Allocation result of order 1 
 
Figure 9.  The order allocation results for problem D4 in the order competition mode. 
 Ant Colony Optimization for the Mixed-model  
U-shaped Assembly Line Balancing Problem 
 
Feng-Cheng Yang† and Hao-De Lai 
Graduate Institute of Industrial Engineering, National Taiwan University 
1, Sec. 4, Roosevelt Rd., Taipei City 10617, TAIWAN 
Tel: +886-2-33669503, Email: iefcyang@ntu.edu.tw† 
 
 
Abstract. The mathematical model of the mixed-model U-shaped assembly line balancing problem is first ri-
gorously defined in this paper. This research proposes an Ant Colony Optimization (ACO) method for the 
tasks of line balancing and model sequencing involved in the problem. The pitfall and fitness for the objective 
functions using the minimum cycle time (CT) and the absolute deviation of workloads (ADW) are discussed. 
Two operation scenarios are simulated for the assembly line to determine the cycle times of all of the sub-
cycles: (1) each task assigned to a workstation is processing on an individual model instance, and (2) succes-
sive tasks assigned to a workstation are processing on the same model instance. An ant platoon consisting of 
three squads with different heuristic value evaluations is proposed to guide the solution construction for line 
balancing. The first task for an ant is to construct a sequence of assembly tasks subject to the precedence con-
straints and create workstation one after the other to host the tasks. The second task is to construct a model 
sequence. Our method uses a solution set augmentation technique to enlarge the number of solutions and then 
adopts the segment-based pheromone update strategy from the segment discriminated ant system (SDAS). A 
software prototype system is developed to implement the proposed method. Several numerical tests are con-
ducted on benchmarks to evaluate the performance of the proposed method. Numerical results show that the 
ADW objective function, compared with the one with CT, is unable to maximize the line efficiency. In addition, 
the proposed ACO method significantly outperforms the existing solving algorithms in solving the discussed 
problems.  
 
Keywords: Assembly line balancing problem; Line balancing; Model sequencing; Mixed-model U-shaped line; 
Ant Colony Optimization. 
 
1. INTRODUCTION 
Balancing the entire assembly line before producing mas-
sive standard commodities is concerned an important prior 
procedure. Tasks involves in this procedures include work-
space planning, assembly task sequencing, and product re-
lease order setting. An assembly line is a flow-oriented pro-
duction system. Tasks or operations are processed through a 
sequence of machines or operators. Jobs or workpieces visit 
the workstations successively along the assembly line. Trans-
portation systems, such as conveyer or tracked AGVs, are in-
stalled to link the workstations. The key factors to designing 
an effective assembly line have been studied for years. Re-
cently, the meta heuristics methods, such as genetic algo-
rithms, ant colony optimization, and annealing simulating 
systems, have been adopted to search for near optimal solu-
tions subject to various constraints. 
The Ant Colony Optimization (ACO) method, which is a 
solution construction method, has been used to deal with the 
single model (or straight layout) line balancing problem. This 
research, however, focuses on the complicated mixed-model 
U-shaped assembly line balancing problem (MMUALBP). 
For this line balancing problem, the task assignment, 
workstation formation, and model sequencing subproblems 
are tightly interrelated. In the literature, the ACO techniques 
are rarely discussed and proposed for solving the MMUALBP. 
In the ACO method, the construction process of the candidate 
set can be carefully designed to filter out infeasible selections 
that violate the constraints. Based on the fact that the ACO 
has been successfully applied to solving a variety of highly 
constrained combinatorial optimization problems, this re-
search is to develop ACO methods for the MMUALBPs. 
We first briefly review the assembly line balancing prob-
lem related literature and postulate the ACO techniques in 
Section 1.1; then depict the definition of MMUALBP in Sec-
tion 2. Section 3 presents the proposed ACO method SA-
SDAP for the discussed problem. Section 4 displays the nu-
ject to evaporation as time goes by. Therefore, an equal 
amount of pheromone deployed on a longer trail will be eva-
porated quicker than on a shorter trail. In the long run, the 
pheromone density of the shortest trail is stronger than others. 
The trail with the highest pheromone density would attract 
more ants to follow and subsequently reinforce the phero-
mone on it. Consequently, most of the ant would travel on the 
shortest trail for the food.  
As a construction heuristic, the ant of the ACO adds one 
object at a time to construct a feasible solution step by step. 
When the solving process starts, a non-processed object set is 
initialized as 
{ }zO ,,2,1 L=  (1) 
where z  is the number of objects. Objects are dealt with one 
by one to join an order sequence, a set of object subsets, or 
object sets of the forms during the solution construction. The 
ant selects an object from a candidate set and adds it into the 
solution under construction. Procedures of update the candi-
date set, select an object, and add the object to the solution 
are iteratively repeated until all objects are placed. Let S  be 
a constructed solution, then it could be a sequence: 
Ossss iz ∈=  ,,,, 21 LS , (2) 
or a set of object subsets: 
{ }
{ } { }{ }1
1 2
11 12 1 21
, , ,
, , , , , , ,
g
g
g g g
s s s s s s
= =
s s
S s s sL
L L L
. (3) 
where 
1
g
k
k
z
=
=∑ s . Equation 2 is a solution to an object se-
quencing problem; e.g. in a travelling salesman problem 
(TSP), is  represents the i th visited city. Equation 3 is a so-
lution to an object grouping problem; e.g. in the bin-packing 
problem (BBP), is  represents the set of objects grouped in 
bin i , g  is the number of bins, and ,i js  represents the j
th object packed into bin i . 
 
 
 Figure 1.  ACO meta heuristic algorithm. 
Figure 1 shows the pseudo code of the ACO meta heuris-
tic algorithm, which includes three parts: (1) SolutionCon-
struction: all of the ants construct their solutions where activi-
ties of state transition (or object selection), stepwise phero-
mone update, and full route pheromone update are executed, 
(2) PheromoneEvaporation: eliminate a certain amount of the 
pheromone on each segments, and (3) DaemonAction: update 
optionally execute local searches for better solutions, and 
conduct iteration-based pheromone updates. 
The segment discriminate ant system, SDAS 
The SDAS was proposed by Yang (2007). The x R−  
chart technique is used to differentiate the superior and infe-
rior solutions. After that, the SDAS determines superior and 
inferior object links by a stochastic set intersection operation. 
The pheromone intensities of superior object links are in-
creased and those of inferior object links are subtracted. The 
superior limit bestF  and the inferior limit worstF  are deter-
mined firstly for partition operation. Let K  be the number 
of deployed ants, minf , maxf , and f  be the minimal, max-
imal, and average of the object values obtained from all of the 
K  solutions. Then 
( ){ }
( ){ }
( )
min 1, ,
max 1, ,
1
min ,
max ,
1 ,
problem type k
k K
problem type k
k K
K
problem type k
k
f f
f f
f f
K
=
=
=
=
=
= ∑
L
L
S
S
S
 (4) 
where kS  is  the solution constructed by ant k . For mini-
mization problems, the superior and inferior limits are 
( )
( )
min
max
,
, 0 1.0,
best
worst
F f f f
F f f f
ω
ω ω
= − −
= + − < ≤  (5) 
where ω  is the range factor for the limits. The solutions are 
then separated into sets of superior, inferior, and normal solu-
tions by these limits. Let U  be the superior set of solutions, 
( ) { }{ },  1, ,problem type k bestU k f F k K= ≤ ∈ LS , and V  be the 
inferior set of solutions, 
( ) { }{ },  1, ,problem type k worstV k f F k K= ≥ ∈ LS . Note that bestF  
approaches minf , and worstF  approaches maxf  when ω  
approaches 1.0, where fewer solutions are recognized as su-
perior or inferior ones. 
The pheromone update strategy of SDAS is superior-
added, and inferior- subtracted. Moreover, the object links in 
the superior and inferior solutions are further classified as su-
perior segments or inferior segments by a stochastic set inter-
section operation. Let ∗S  be the best solution so far, the set 
of segments associated with ∗S  is 
( )problem typeG ∗= H S . (6) 
Applying the segmentation operator on the superior and 
inferior solutions, the segment set of superior solutions is 
( )problem type k
k U
A
∈
′′ = HU S , (7) 
Procedure ACO meta heuristic 
   While (termination criteria are not satisfied)
      ExecuteScheduleActivities 
         SolutionConstructions() 
  PheromoneEvaporation() 
  ExecuteDaemonAction() 
      end ExecuteScheduleActivities 
   end While 
end ACO meta heuristic 
task i  on model m . The combined precedence graph 
( ),G V A= , which is a directed graph without cycles, de-
scribes the synthesized assembly precedence for all of the 
models. { }1, 2, ,V I= L  is the set of tasks, and A  is the set 
of precedence arcs which represents the precedence proce-
dures. Directed arc ,i jl A∈  starting from task i  to  j  in-
dicates that task i  must be processed before task j . Let 
mD  be the demand of model m  during the production pe-
riod. Suppose g  is the greatest common divisor of 
1 2, , , MD D DL , then mm
Dd
g
=  is the minimal part set demand 
(MPS demand) of model m . The number of subcycles to 
complete one MPS demand of the product mix is 
1
M
m
m
d
=
Δ = ∑ . 
Therefore to meet the overall demand, the assembly line will 
execute g  MPS cycles, specifically gΔ  subcycles. In addi-
tion, the overall cycle time is therefore the time required to 
complete an MPS cycle. 
Base on the provided task and model information, as-
sembly line designers can set up the number of workstations, 
J , to configure their lines. Let 1,2,...,j J=  be the index of 
workstation, then each task will be appropriately assigned to 
one workstation eventually. 
Derived data 
The derived data are calculated or converted from the 
known input data. let iˆt  be the sum of processing time of 
task i  on all of the models in an MPS cycle, then 
,
1
ˆ
M
i m i m
m
t d t
=
= ∑ . Therefore, the time spent on the assembly op-
erations of an MPS demand is the sum of all the processing 
times of the tasks; i.e.
1
ˆ
I
i
i
t
=
∑ . When this total time is distributed 
evenly to each workstation and each subcycle, we will have 
the theoretical minimal cycle time, where  
1
1 ˆ
I
i
i
T t
J =
= Δ ∑ . (14) 
Let PiU  be the set of immediate predecessor tasks i , 
and SiU  be the set of immediate successor tasks. Therefore, 
{ }{ }
{ }{ }
,
,
 ,  1, , ;
 ,  1, , .
P
i j i
S
i i j
j l A j I
j l A j I
= ∈ ∈
= ∈ ∈
L
L
U
U
 (15) 
Runtime data 
The run time data keep updating during the solution con-
struction. They can be divided into line balancing data and 
model sequencing data. For example, in constructing a solu-
tion, when a task is assigned to a workstation, the processing 
time of the workstation will be updated accordingly. 
Let the result of the task assignment and workstation 
formation of a U-shaped assembly line be a pair of two se-
quences: 
{ }
1 2
1 2
, ;
, 1, , .
I i
I i
w w w w V
v v v v J
=
= ∈
= ∈
W w v
w
v
L
L L
 (16) 
In Eq. 16, w  is the task sequence along the U-line, 
where iw  is the i th ordered task; v  is the workstation in-
dex sequence corresponding to w , where iv  is the assigned 
workstation for the i th ordered task. 
The model sequence is constructed by the ant based on 
the specified MPS. The constructed model sequence is 
{ }1 2 , 1, 2,...,sL L L L MΔ= ∈LL , (17) 
where 
sL
 is the s th released model in an MPS cycle. 
Note that the mixed models are sequentially released to 
the U-shaped line from the line entrance following the speci-
fied model sequence. For the M-release scenario, the model 
processed by the i′ th ordered task on the U-shaped line is 
forwarded to the ( )1i′ + th ordered task when the assembly 
subcycle forwards. The model processed by the i′ th ordered 
task on the U-shaped assembly line at subcycle s  for the M-
release scenario is 
( ) { }, ,mod 1, 1, 2, , .i s i ss iQ L Q M′ ′′− Δ+= ∈ L  (18) 
Therefore, the model under the operation of task iw ′  at sub-
cycle s  is ,i sQ ′ . On the other hand, for the S-release scena-
rio, the model under the operation of task iw ′  at subcycle s , 
{ }, 1,2,...,i sR M′ ∈  is computed from the following procedure: 
Procedure: Computation for ,i sR ′  
1,
1
1: mod ;
2: ;
3: for 2 to  do
4: if  do
5: if 1, ;
s k
i i
k s
R L
i I
v v
k k
′ ′−
← Δ
←
′←
≠
= ← Δ
%
%
% %
      
,
6: else 1;
7: end if
8: ;
9: end for
i s k
k k
R L′
← −
← %
% %
 
Hence, the sum of time deviation and overall cycle time 
can be computed from the assigned task sequence and 
workstation formation result W  and model sequence L . 
Objective function 
Variance minimization has been considered by Monden 
(1993) for the mixed-model U-shaped line problem. Kim et al. 
(2006) referred to the work done by Modern to deal with both 
line balancing and model sequencing problems to aim for 
workload smoothness on each workstation for each subcycle. 
The objective, called the absolute deviation of workload 
(ADW) intends to lead a solution to evenly distribute the 
P
i ie ← U  and Si ie′ ← U  and pointers 1r ← , b I← . In-
itialize the candidate sets 
{ }
{ }
 and ,
 and .
r P
i
b r S
i
i i
i i
← ∀ =∅
← ∀ ∉ =∅
C U
C C U
 
Step 2. Set workstation 1 as the current workstation index, 
1j ← , ˆ 0jT ← . 
Step 3. Calculate the selection probabilities for the candidate 
tasks in the candidate set. 
( ) ( )
( ) ( )
( ) ( )
( ) ( )
( ) ( )
( ) ( )
, ,,
, , ,
, ,
, ,
, ,
,
ˆ , if 
ˆ , if z < ,  
ˆ ,otherwise
ˆ , if 
ˆand , if z < , .
ˆ ,otherwise
D
i j i ji j
P r
i j i j ii j
N
i j ii j
D
i j J i j
P b
i j i j J i
N
i j J i
k z
p k z i
k z
p k z i
βα
βα
βα
βα
βα
βα
τ η
τ η
τ η
τ η
τ η
τ η
+
+
+
⎧ ′≤⎪⎪⎪ ′ ′′= ≤ ∀ ∈⎨⎪⎪⎪⎩
⎧ ′≤⎪⎪⎪ ′ ′′= ≤ ∀ ∈⎨⎪⎪⎪⎩
C
C
 
Step 4. Using either deterministic or probability selection me-
thod to choose a task i∗  from the two candidate sets. If 
ri∗ ∈C , assign task i∗  to the entrance side of current 
workstation, and if bi∗ ∈C , assign task i∗  to the exit side; 
i.e., 
* *
* *
, , 1;if 
, , 1;if 
r
r r
b
b b
w i v j r r i
w i v j b b i
← ← ← + ∈
← ← ← − ∈
C
C
. 
Step 5. If i∗ ∈ rC , subtract 1 from ke  for each successor 
task i′  task i∗ , i.e., 
 *1, Si i ie e i′ ′ ′← − ∀ ∈U . 
On the other hand, if bi∗ ∈C , subtract 1 from ie ′′  for each 
predecessor task i′  of task i∗ , i.e., *1,
P
i i ie e i′ ′′ ′ ′← − ∀ ∈U . If 
ri∗ ∈C , first remove i∗  from rC , { }*r r i← −C C  and then 
add the successor tasks of task i∗  that have all of their pre-
decessor tasks assigned, { }* , =0, and r r S biii i e i′′ ′ ′← ∈ ∉UC C U C . Otherwise, remove 
i∗  from bC , { }*b b i← −C C , and add new candidates 
{ }* , =0, and b b P riii i e i′′ ′ ′ ′← ∈ ∉UC C U C .  
Note that if new candidates have recruited in the other candi-
date set, they are not added. 
Step 6. Compute the current workload assigned to worksta-
tion j , ˆ ˆ ˆj j iT T t ∗← + . Check for completion: if 
r b =∅UC C , exit algorithm. 
Step 7. If ( )ˆ 1jT Tε> − %  and j J< , close the current 
workstation and open the next one, 1j j← + , ˆ 0jT ← , 
where 0 1ε≤ < . Go to Step 3. 
3.3 Data requirements for model sequencing 
Pheromone Matrix for Model Sequencing 
As the quantity of model m  released in one MPS pro-
duction cycle is md , totally there are 
1
=
M
m
m
d
=
Δ ∑  instances in 
an MPS. Let { }= 1, 2,...,Y Δ  be the set of indexed instances to 
be sequenced and each instance belongs to a model. Let iξ  
be the model of instance i , { }1, 2,...,i Mξ ∈ . Then, 
1
1
1 1
1
, if 
, 2 ,  and 1
1,otherwise
i
i m
mi
i
i d
i
ξξξ ξ
ξ
−
−
=
−
⎧ ≤⎪= ≤ ≤ Δ =⎨⎪ +⎩
∑   (23) 
Therefore, the model sequencing for the an ant is to ar-
range a sequence of the indexed instances; 
1 2 , iU U U U YΔ= ∈LU . This sequence of instances is then 
directly mapped to the model sequence 
1 21 2 U U UL L L ξ ξ ξ ΔΔ= =L LL . As a result, the data struc-
ture of the pheromone matrix used in model sequencing is 
1,1 1,
,
,1 ,
i j
τ τ
τ
τ τ
Δ
Δ×Δ
Δ Δ Δ
′ ′⎡ ⎤⎢ ⎥⎡ ⎤′ ′= = ⎢ ⎥⎣ ⎦ ⎢ ⎥′ ′⎣ ⎦
T
L
M O M
L
  (24) 
Element ,i jτ ′  is the pheromone value reflecting the 
bonding strength between instances i  and j  in the in-
stance sequence. 
Heuristic Term Evaluation in Model Sequencing 
The value of heuristic term ,j kη′  indicates the degree of 
preference on selecting instance j  to succeed the previously 
selected instance i , where k  is a randomly selected order 
in the task sequence w , { }1, 2,...,k I∈ . Note that since the 
MPS cycle time is dependent on the model sequence, which 
is still under construction, it is difficult to estimate the final 
value of the cycle time. Therefore, a good heuristic term that 
can minimize the MPS cycle time is hard to define. Initially, 
for the first construction step, k  is randomly selected from 
{ }1, 2,..., I . Then k  is shifted to the smaller index in each 
step until it is decreased to 1, where k  is then set to I  to 
continue the shift for smaller value. The heuristic term for se-
lecting an instance j  subject to the k th task on sequence 
order w  is 
, , ,j kj k w jξη ϕ′ ′= ∀ ∈C ,  (25) 
***
*
if F F
F F
⎫′← ⎪ ′ <′← ⎬⎪′← ⎭
W W
L L   (31) 
Evaluation of Superior, Inferior Solutions 
Following the solution partition procedures of the SDAS 
(Yang 2007), the proposed system evaluates the average, min-
imum, and maximum values of for the augmentation objec-
tive matrix F , 
{ }
{ }
, min ,2 ,1 1
max ,,
1 , min ,
max
Z Z
i j i ji ji j
i ji j
f F f F
Z
f F
∀= =
∀
= =
=
∑∑
.  (32) 
And the superior limit bestF  and inferior limit worstF  
are derived as: 
( )
( )
min
max
, 0 1.0
best
worst
F f f f
F f f f
ω ωω
= − − < ≤= + −   (33) 
where ω is a range factor for the limits. Using these limits 
we can determine a combination of ( )iW  and ( )jL  is a su-
perior solution or an inferior one. Our segment discrimination 
strategy does not regard that a superior combination of ( )iW  
and ( )jL  promises that both of the ( )iW  and ( )jL  are supe-
rior. Therefore, we investigate the performance of ( )*iW  as-
sociated with the Z  to count the number of superior combi-
nations and number of inferior ones. The superior and inferior 
sets of ( )iW  are 
( ) ( )
( )
( ) ( )
( )
,1,...,
,1,...,
,1,...,
,1,...,
ˆ  and
, 1,...,
ˆ ,
, 1,...,
i j bestj Zi
i j worstj Z
i j bestj Zi
i j worstj Z
count F F
A
count F F i Z
count F F
B
count F F i Z
=
=
=
=
⎧ ⎫< >⎪ ⎪= ⎨ ⎬< =⎪ ⎪⎩ ⎭
⎧ ⎫< <⎪ ⎪= ⎨ ⎬< =⎪ ⎪⎩ ⎭
W
W
w
w
  (34) 
respectively. Similarly, the superior and inferior sets of ( )jL  
are 
( ) ( )( )
( ) ( )( )
,1,...,
,1,...,
,1,...,
,1,...,
ˆ  and
, 1,...,
ˆ .
, 1,...,
i j besti Zj
i j worsti Z
i j besti Zj
i j worsti Z
count F F
A
count F F j Z
count F F
B
count F F j Z
=
=
=
=
⎧ ⎫< >⎪ ⎪= ⎨ ⎬< =⎪ ⎪⎩ ⎭
⎧ ⎫< <⎪ ⎪= ⎨ ⎬< =⎪ ⎪⎩ ⎭
l
l
L
L
  (35) 
Superior and Inferior Segments 
The segmentation operators on a given task assign-
ment/workstation formation ( )⋅W  is computed from the fol-
lowing procedure: 
 
Procedure: Computation for ( )( )wH ⋅W  
( )( ) { }
( )( ) ( )( ) { }
1 1,
1
1
1
,
1: ;
2: ;
2: for 2 to  do
5: if  do
6: if , ;
7: else ;
8: end if
9: ;
10: end for
i
w
w v
i i
i i i
i
w w
w k
H a
k v
i I
v v
v v k v J
k v
H H a
′
⋅
′ ′−
′ ′ ′−
′
⋅ ⋅
←
←
′←
≠
< ← +
←
←
W
W W %
%
%
%
U
 
Note that the resulting segments are the set of links asso-
ciating a task with either side of a workstation. On the other 
hand, the object links segmented from the ( )⋅L  associate a 
model with the adjacent one. The segmentation operator on 
the model sequence ( )⋅L  is  
( )( ) ( )( )
{ }1 2 1 1, , ,, , ,
l l
U U U U U U
H H
u u u
Δ− Δ Δ
⋅ ⋅= =
L
L U
,  (36) 
where ( )⋅U  is the sequence of instances mapped to ( )⋅L . 
Let the segment sets of the so-far-the-best task assign-
ment/workstation formation result ∗W  and so-far-the-best 
model sequence *L  be 
( ) ( )and .w w l lG H G H∗ ∗= =W L   (37) 
To collect the superior and inferior segments, the method 
aggregates those segments belong to the superior and inferior 
set of ( )iW  and ( )iL . Let 
( )
( )( )
( )
( )( )
( )
( )( ) ( ) ( )( )
ˆ
ˆ
ˆ ˆ
,
;
, .
k
k
k k
kw w w
A
kw
B
k kl l l l
A B
A H B
H
A H B H
∀ ∈
∀ ∈
∀ ∈ ∀ ∈
′′ ′′= =
′′ ′′= =
W
W
W
W
U
U
U U
w
w
l lL L
L L
  (38) 
Figure 4(a) illustrates the general relationships between 
these segment sets, where wL%  and lL%  are the complete sets 
of segments for pheromone matrices T  and ′T  respective-
ly. A superior segment should only belong to the set of supe-
rior segments only; conversely, an inferior segment should 
not appear in the set of superior segments. Since the segments 
from the so-far-best solution will be treated separately, they 
are excluded from the superior and inferior segment sets. 
Therefore, the set of candidate superior and inferior segments 
are 
, ;
, ,
w w w w w w w w
l l l l l l l l
A A G B B B G A
A A G B B B G A
′ ′′ ′′ ′ ′′ ′′= − − = − −
′ ′′ ′′ ′ ′′ ′′= − − = − −   (39) 
To verify the pitfall depicted in Section 3.2.2, objectives 
of minimizing the ADW and minimizing the CT are both 
tested to compare the numerical results. Table 2 lists the 
computed average CTs and ADWs of both modes for each 
problem. The values in bold face are the best ones among 
these cases. As expected, the numerical results indicate that 
minimizing the ADW does not obtain any best CT in any 
problem, compared with the CT-driven mode. In contrast, 
even the ADWs generated from the CT-driven mode are 
worse than the counterpart, the CTs are significantly reduced 
than those obtained from the ADW-driven mode. 
Table 1.  Parameter settings of platoon heuristic ratios and the 
average ADW of 10 runs using the SA-SDAP and the EEA on the 
test problems. 
Problem Platoon heu-ristic ratio 
SA-
SDAP EEA 
Thomo. 1 0:1:0 0.96 1.3
Thomo. 2 0:1:0 2.62 2.4
Thomo. 3 1:1:4 0.84 1.3
Kim 1 0:1:1 18.95 21.9
Kim 2 1:0:1 80.63 78.3
Kim 3 1:1:4 63.39 73.9
Kim 4 1:1:0 32.39 38
Kim 5 0:0:1 121.44 123.2
Kim 6 1:0:0 111.54 105.7
Arcus 1 1:0:0 13881.61 12598.8
Arcus 2 1:0:0 37211.29 31080.6
Arcus 3 4:1:1 38057.37 45342.1
Arcus 4 1:0:0 37304.27 42661.6
Arcus 5 1:0:0 12375.41 16809.8
Arcus 6 1:0:0 35513.95 39379.2
Arcus 7 1:0:0 37156.09 61223.6
Arcus 8 4:1:1 40873.87 54659.8
Arcus 9 1:0:0 38258.21 46254.7
Arcus 10 1:1:1 90790.91 108231.4
Arcus 11 4:1:1 137742.1 209222.2
Arcus 12 1:0:0 127489.8 162998.8
 
Moreover, the best solutions from the ADW-driven and 
CT-driven modes for the Thomopoulos-1 problem are further 
investigated in details. Tables 3 and 4 show the solution de-
tails of the CT-driven and ADW-driven modes respectively. 
Notice that a smaller ADW does not yield the smaller CT. in 
this problem. Figure 5 compares the workload deviations and 
Figure 6 shows the Gantt charts of an MPS cycles for these 
solutions. It is clear that to use 2.0T =  to level the sub-
cycle time, which is what minimizing ADW does, is improper 
for a minimize its MPS cycle time. On the contrary, minimiz-
ing the ADW will in general increase the cycle time.  
Note that, this contradiction is more significant in Kim’s 
and Arcus’s problems. Therefore, the objective of minimizing 
the ADW is not applicable for the MMUALBPs. To increase 
the throughput, the objective of minimizing the CT should be 
directly applied. 
5. CONCLUSION 
The developed SA-SDAP method can effectively solve 
the MMUALBPs and yield high throughput solutions. The 
techniques of the SDAS are successfully adopted to imple-
ment the segment-based pheromone update strategy. The 
technique of the solution augmentation can efficiently explore 
more solutions to evolve the best solution so far. 
Different heuristic ratios have been studied. Although a 
single heuristic might outperforms the other two, the ant pla-
toon consisting of more than two heuristic squads generally 
can perform a wider solution search.  
The pitfall of minimizing the ADW for the MMUALBPs 
to increase the throughput has been pointed out and illustrated 
with numerical examples. Numerical tests show that the pro-
posed SA-SDAP method outperforms the EEA for the 
MMUALBPs. 
Table 2.  Averaged objectives of the 10 runs generated from the 
CT and ADW-driven modes. 
Problem ADW-driven CT-driven ADW CT CT ADW 
Thomo. 1 0.56 6.22  6.14 2.76 
Thomo. 2 2.40 12.28  11.83 3.44 
Thomo. 3 0.78 4.77  4.70 1.72 
Kim 1 22.34 64.75  63.02 28.00 
Kim 2 105.44 227.82  221.29 111.95 
Kim 3 105.25 209.54  201.61 111.73 
Kim 4 38.45 36.44  34.52 45.88 
Kim 5 154.14 126.56  122.05 173.13 
Kim 6 152.45 117.53  113.20 176.71 
Arcus 1 14580.94 65159.40  62974.60 22005.81 
Arcus 2 41537.57 158830.40  152332.60 58252.91 
Arcus 3 52824.82 253688.90  249928.70 74913.61 
Arcus 4 53344.15 220273.90  212639.70 63753.49 
Arcus 5 14965.71 52831.40  50525.60 21424.88 
Arcus 6 39794.62 126987.40  122821.20 62788.58 
Arcus 7 51021.43 204938.40  200210.10 77586.67 
Arcus 8 47521.89 177893.00  171146.10 62564.93 
Arcus 9 35668.83 36254.60  35220.00 45266.85 
Arcus 10 77334.90 83685.70  79444.00 108509.30 
Arcus 11 130090.90 145121.80  140894.00 181328.80 
Arcus 12 120031.50 122836.20  119748.00 159675.50 
 
Table 3.  The best solution of CT-driven mode for problem Tho-
mopoulos-1. 
Model sequence 3 2 1=L  
Workstation formation W  
2 5 4 11 3 9 13 1 7 14 8 17 10 6 19 12
1 1 1 1 1 2 2 3 3 3 3 3 3 2 2 2 2 1
=
=
w
v
 
CT = 6.1 ADW = 4.0 
 
 
 
 9
計畫成果自評 
本計畫執行結果，第一年順利定義出「具時窗限制的併批派工式排程優化問題」的數
學模式。同時規劃了三種遺傳演算的求解模式。也使用 C#程式語言開發了在.NET 
Framework 平台上執行的雛型系統，供驗證即求解各型的範例問題。同時也系統化地分析
問題的各個維度，建立本問題的類型分類法則。測試結果顯示所提的求解演算模式能有效
求解各類型範例問題。本研究探討的是實務中常見的高複雜度且具有時窗限制及併批和派
工式的排程問題。開發出的優化求解工具將有助於相關產業的現場控制。第一年探討了工
程鏈中最底層的機台時窗限制問題。之後更往上一層探討工程鏈工廠間訂單的分配時窗限
制問題。第二年完成了「具時窗限制之多階多廠序列生產工程鏈的訂單分配問題」的數學
模式定義。同時也規劃出相對的遺傳演算求解模式。也使用 C#程式語言開發了在.NET 
Framework平台上執行的求解系統。同時也針對研究問題的不同特性設計不同的範例問題。
求解不同類型的範例問題時，求解結果皆符合測試所設定的模式及範例問題的特性。本研
究研擬的遺傳演算求解系統可以有效地求解此具實務應用性及高複雜度的具有時窗限制
多階多廠序列生產工程鏈的訂單分配問題。將有助於相關產業工程鏈的營運和決策。最後
一年探究的 U 型組裝線平衡問題更是切合業界實務。完成的數學模式和蟻拓求解模式能確
實求解實務需求的組裝線平衡和規劃問題，極具工業實務應用價值。此外我們也意外發現
學者針對此問題慣用的 ADW 效能衡量指標，只會使組裝線各站的周期時間平準化，無法
使整個生產線的總週期時間最小化。成果有助於釐清本問題研究的盲點。 
 
 
