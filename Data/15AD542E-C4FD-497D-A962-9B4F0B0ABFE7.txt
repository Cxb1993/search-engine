X 架構之平面規劃 
“Floorplanning for the X Architecture” 
計畫編號：NSC95-2221-E-424-005 
執行期間：95 年 8 月 1 日 至 96 年 7 月 31 日 
主持人：林佑政 開南管理學院資電系助理教授 
 
一、 中文摘要 
超大型積體電路(VLSI)的設計流程大致
上包含兩個步驟：邏輯設計(Logic design)以及
實體設計 (Physical design)。其中平面規劃
(Floorplan)是實體設計中非常重要的一個步
驟。它規劃各模組(module)在晶片上的形狀和
位置並且允許設計者擁有額外的彈性調整
chip 及所有 component 的幾何性質：例如模組
的方位、長寬比例、或大小等。隨著製程的進
步，在平面規劃階段所要考慮的問題規模越來
越大，除了要能夠處理大量的模組數量外，還
需要考慮影響晶片效能的種種因素。 
由於奈米等級的積體電路技術發展神
速，內部連線延遲(interconnect delay)已成為影
響晶片效率的最重要因素之一。為了有效處理
這個問題，近來一種稱為「X 架構」 (X 
Architecture)的技術開始被推廣，X 架構是第
一套大量運用 45 度斜角繞線的量產型設計技
術，能夠有效率地降低晶片內部約 20%的內部
連線或佈線資源，並減少 30%的導孔(via)數
量，可同時改進晶片效能、功率消耗及成本。 
在本計劃中，我們探討 X 架構 (X 
Architecture)的平面規劃問題，分析 X 架構對
傳統平面規劃問題 model 的影響，提出兼具彈
性與效率的演算法，以解決平面規劃問題。在
核心演算法方面，我們結合螞蟻演算法與傳統
模擬退火演算法，以提升整體演算法速度並兼
顧解的品質。 
 
英文摘要 
 
A typical VLSI CAD flow consists of two 
stages: (1) Logic design (2) Physical design. 
Floorplanning is an important process in the 
physical design stage of VLSI design flow, two 
main works must be done during floorplanning, 
the first work is to specify the relative positions 
of modules on a chip and the second one is to 
determine the shapes of soft modules. There are 
several objectives of floorplanning such as 
minimization on total chip area, total wire-length, 
wire-length of critical nets, estimated power 
consumption, estimated routing congestion…etc. 
For deep submicron VLSI design 
technology, the interconnect delay has become a 
first-order effect on chip performance. To handle 
this effect, the X Architecture has been proposed 
in the last five years, an interconnect-centric 
architecture designed to meet the challenges of 
the interconnect-centric world of DSM design. 
The X Architecture is a new interconnect 
architecture based on the pervasive use of 
diagonal routing. Targeted at chips with five or 
more metal layers, the X Architecture rotates the 
primary direction of the interconnect in the 
fourth and fifth metal layers by 45 degrees in 
relation to conventional Manhattan architecture. 
The X Architecture’s pervasive use of diagonal 
routing reduces wirelength by an average of 20% 
在傳統曼哈頓架構時，這個 model 雖然計算時
間略久，但是估計值頗為準確；然而在 X 架
構時，除了原本的繞線之外，還要把走 45 度
斜角的繞線可能性估算進去，因此 Congestion 
model 的機率分佈應修正如 Figure 4 所示。 
 
 
Figure 3.未考慮每個方格成功進行 buffer 
insertion 機率之 Congestion model 
 
6+6+1
3+2+0
1+0+0
3+2+0
3+2+0
4+6+1
1+0+0
3+2+0
6+6+1
13/13
5/13
1/13
5/13
5/13
11/13
1/13
5/13
13/13
 
Figure 4. X架構下未考慮每個方格成功進行
buffer insertion 機率之Congestion 
model 
 
本研究計畫的目的主要有以下兩項： 
(1) 滿足多目標的限制： 
傳統的平面規劃問題是以晶片面積最小
化(area minimization)與晶片上模組間的連線
總長度最小化(total wire length minimization)
為主要目標，然而隨著超大型積體電路實體在
製程及設計技術大幅的進步，導致電晶體之間
連線所產生的訊號延遲變得非常明顯，在現今
的一些系統中可發現，大部分的時脈週期
(Clock Cycle)是被訊號間的連線延遲效應所
佔用；此外，隨著系統晶片(SOC)設計需求的
日益普及，晶片中所包含的電晶體(transistor)
數量和訊號在電晶體間的轉換速度亦急速增
加，使得連線產生之訊號延遲(signaldelay)與
可繞度(routability)等問題成為當前必須設法
解決的重要課題。因此在平面規劃階段，除了
晶片面積最小化的成本考量之外，還必須考慮
影響晶片效能的種種因素，例如： 內接線長
度(interconnect length)、可繞度(routability)…
等。 
(2) 符合實際狀況的model 
平面規劃問題傳統目標model與計價函數
(Cost function)應相對應的小幅修改，如連線
長度、可繞度、繞線擁擠度等。而X架構目前
僅考慮45度斜角，在未來很有可能也會出現其
他角度(如30度、18度、15度甚至於任意角
度)，為了避免平面規劃解失真，在制訂多目
標限制及建立計價函數時，我們必須要保持彈
性，以符合實際狀況。 
 
三、 研究方法及成果 
本研究計畫的主軸，在於探討 X 架構(X 
Architecture)的平面規劃問題，分析 X 架構對
傳統平面規劃問題 model 的影響，提出兼具彈
性與效率的演算法，以解決平面規劃問題。在
核心演算法方面，我們延續採用 94 年度國科
會計畫所發展之演算法[6]，該演算法結合螞蟻
演算法與傳統模擬退火演算法，可順利提升整
體演算法速度並兼顧解的品質。 
本研究核心程式以 C++撰寫，GUI 部分是
採 用 QT Library ， 程 式 建 置 平 台 為
Pentium-1.6GHz、1G-RAM，作業系統可用
Linux RedHat 與 Windows XP。所開發之系統
如 Figure 5 所示。 
為了評估本研究所產生之平面規劃解是
符合 X 架構所需，因此我們也開發了一個 X
架構的 Router 用以驗證結果，而 Router 的初
步 結 果 將 發 表 於 VLSI Design/CAD 
Symposium 2007 中。 
 
四、 結論與討論 
本研究計畫擬藉由研究X架構對於平面規
□ 赴國外出差或研習 
□ 赴大陸地區出差或研習 
■ 出席國際學術會議 
□ 國際合作研究計畫出國 
心 得 報 告 
計 畫 名 稱 X架構之平面規劃 計 畫 編 號 NSC 95-2221-E-424 -005 
報 告 人 
姓 名 林佑政 
服 務 機 構
及 職 稱開南大學資電系助理教授 
會議/訪問時間 
 地點 
2007年 8月 5-8日 
加拿大(Canada)/蒙特羅(Montreal)/ Montreal Marriott Chateau Champlain Hotel. 
會 議 名 稱 
The 50th anniversary of the IEEE International Midwest Symposium on Circuits and 
Systems (MWSCAS 2007) and the 5th of the IEEE International NEWCAS conference 
(IEEE-NEWCAS 2007). 
發表論文題目 Large-Scale Timing-Driven Rectilinear Steiner Tree Construction in Presence of Obstacles 
 
一、歷程與心得 
 
IEEE MWSCAS 2007 與NEWCAS 2007是兩個歷史悠久的重要會議，今年兩個會議合併於加拿大蒙
特羅共同主辦，本屆於Montreal Marriott Chateau Champlain Hotel舉行。 
 
本次會議的Topic主要包含: 
z Analog Circuits and Signal Processing  
z Digital and Adaptive Signal Processing  
z Programmable Logic, VLSI, CAD and Layout  
z Linear and Nonlinear Circuits and Systems  
z Nanoelectronics and Nanotechnology  
z Communications and Wireless Systems  
z Digital Circuits and Computer Arithmetic  
z Embedded Electronics  
z Image Processing and Multimedia Systems  
z RF, Microwave, and Optical Systems  
z Neural Networks and Fuzzy Systems  
z Control Systems, Mechatronics, and Robotics  
z Optics and Photonics  
z Power Electronics and Systems  
z Bioengineering Circuits and Systems  
z System Architectures 
 
 
會議的執行委員會包含： 
General Chair 
Mohamad Sawan, École Polytechnique de Montréal 
Technical program Co-Chairs 
Gabriel A. Rinc鏮-Mora, Georgia Institute of Technology 
Finance Chair 
Mounir Boukadoum, Université du Québec à Montréal 
Tutorials Co-Chairs 
Zeljko Zilic, McGill University
s s
detour
Large-Scale Timing-Driven Rectilinear Steiner Tree Construction 
in Presence of Obstacles  
 
 
 
 
 
 
 
Abstract—In the paper, we provide a timing-driven rectilinear routing tree 
algorithm which applies top-down partitioning followed by the bottom-up 
routing tree construction in the presence of the obstacles. The objective is to 
simultaneously minimize the source-to-terminal delay and the total 
wirelength. First, a top-down partitioning method is used to divide the chip 
into four sub-regions according to the position of the source. Then, the 
terminals in each sub-region are connected by a fast sequential routing tree 
algorithm. The major steps of the routing algorithm include minimal 
spanning tree constructing, invalid edges pushing and routing. It shows 
experimentally that the maximum source-to-terminal delay of the routing 
tree is improved by 74%. Compared to the results in [13], total wirelength 
is significantly reduced by 34.7%. 
I. INTRODUCTION 
 
There are many traditional wirelength-driven algorithms are 
proposed in literature. Lee [1] proposed a maze-based router, but it 
takes large memory space and timing consumption. Soukup [2] 
presented the line search technique to find the solution quickly on the 
continuous plane. Kahng et al. introduced the batched method to 
achieve a good solution with the complexity of O (n log2 n), where n is 
the numbers of terminals [3]. Zhou provided an efficient O (n log n) 
algorithm which combines the concept of edge substitution with the 
spanning graph, where n is the numbers of the terminals [4]. Authors [5] 
gived the segment-orientation algorithm which improves the tee 
flexibility and guides the segments to the lower congested region by 
cost function. In paper [6], RST-T method, which improves the length 
of STST, is provided to obtain the optimal solution for nets up to 
degree four and the algorithm is shown experimental to be optimal for 
degree five nets. The study [7] provides an efficient heuristic algorithm 
which generates the optimal solutions for nets if the number of sinks is 
less than ten by using the lookup table. Cho et al. integrate the concept 
of bounding box expansion into the ILP model to achieve a wirelength-
drivne routing result [8]. Although the algorithms can obtain the 
wirelength-driven routing result, they do not focus on the timing issue. 
As the shrinking of technology, SOC trend which applies more 
and more Intellectual Property in the design should construct the 
obstacle-avoiding routing tree. Ganley presented an obstacle-avoiding 
method to get the optimal solution for four terminals. Zhou provided an 
efficient O (n log n) algorithm which combines the concept of the 
spanning graph and the edge substitution [9]. Yang et al proposed a 
two-step approach that first directly constructs the minimal spanning 
tree and then removes the overlap inside the obstacles [10]. Hu et al. 
give the algorithm based on track-graph to reduce the searching 
memory space by handling complex obstacles with the shape of the 
convex and concave polygon [11]. Shen et al. provided a novel graph 
based method, which constructs a connection graph according to the 
terminals and blockage boundaries and obtains a minimal spanning tree 
from the connection graph [12]. The time complexity is O (v log v), 
where v denotes the sum of terminals and obstacle boundaries. Feng et 
al. [13] present the three-step approach to build an obstacle-avoiding 
routing tree in the λ-Geometry plane. However, some methods do not 
take obstacles into consideration and some algorithms achieve good 
routing quality with in-acceptable runtime. Besdies, some obstacle-
avoiding algorithms focus on the minimization of the wirelength 
without the timing issue.  
Interconnect delay plays a very important role in high-speed 
design. Hence, more and more timing-driven routing algorithms are 
proposed to improve the timing issue, such as the critical routing path 
from source to terminal [14]. Cong et al. provided a hybrid global 
router, which simultaneously applies the rip-up and reroute (R&R), to 
meet timing requirements for printed circuit board (PCB) and multiple-
chip module (MCM) [15]. For the FPGA architecture, Chang et al. 
proposed the lagrangian relaxation based method to minimize the 
critical path delay [16]. Lin et al. [17] modifies the structure of the 
routing tree by using a recalling modification mechanism. Author [18] 
proposed UTACO algorithm to integrate the timing issue and wire 
congestion into a single cost function. In that paper, the global routing 
problem is formulated by the primal and dual problems and they 
explore the lower bound and upper bound of the routing solution. 
Alpert et al. [19] provided the concept of integrating the Manhattan 
distance and the radius and present two heuristic algorithms construct 
the timing-driven routing tree. The first algorithm reroute the terminals 
with large radius-ratio, and then connects them. Their second method 
shortens the wirelength and relaxing the radius-ratio. However, their 
proposed approach may take too many try-runs to fix the violated nets. 
Obviously, it takes a long time to achieve timing closure. 
Partitioning algorithm is usually utilized to reduce runtime as the 
circuit complexity becomes more and more large. The authors propose 
a recursive bi-section placement to predict the wirelength of critical 
nets precisely [20]. Ou et al. [21] proposed the timing-driven algorithm 
by the repeated quadric section on the chip. The 4-way partitioning is 
based on the procedure of solving the quadratic problem recursively. 
Chen et al. [22] proposed the look-ahead partitioning concept to solve 
the floorplanning by bi-partitioning. In order to speedup the algorithm, 
the partitioning is usually embedded into the timing-driven routing the 
algorithm. However, some of them consider only the terminals without 
the obstacles and some do not take source effect into account. 
The main contributions are as follows. (1) The timing-driven 
partitioning is proposed to improve the detour routing and minimize the 
maximum s-t delay. (2) The study focuses on the timing-driven routing 
tree algorithm which considers the source effect to construct tree with 
the obstacles. (3) A two-step sequential-based algorithm, which 
constructs the minimal spanning without the obstacles followed by 
removing the invalid edge outside obstacles, is proposed to efficiently 
construct the feasible routing tree. Time complexity is O (nm), where n 
and m are the numbers of terminals and the obstacles. 
We organize the paper as follows. Section II illustrates the 
preliminary, including motivation, the Elmore delay model and 
problem definition. In the section III, the timing-driven routing tree is 
explained in detail. Experimental results are shown in section IV, and 
we make some conclusions and further work in section V.  
 
 
 
 
 
 
 
 
  (a)                                              (b) 
Figure 1. (a) Detour routing (b) improved by partition-region technique. 
Hsin-Hsiung Huang 
Institute of Electronic Engineering, 
Chung Yuan Christian University, 
Chung-Li, Taiwan, R.O.C. 
bear@fpga.ice.cycu.edu.tw 
 Tung-Fu Chiu
Dept. of Information and Computer Engineering, 
Chung Yuan Christian University, 
Chung-Li, Taiwan, R.O.C. 
ooxx05312 @gmail.com  
 
Tsai-Ming Hsieh
Dept. of Computer Science and Information Engineering, 
National Taitung University,   
Taitung, Taiwan,  R.O.C. 
hsieh@nttu.edu.tw 
Yu-Cheng Lin
Dept. of Information and Electronic Commerce,  
Kainan University,  
Taoyuan, Taiwan, R.O.C 
linyu@mail.knu.edu.tw 
vi
vj
vi
vj
forward backward
(10,14)
(1,7)
(3,1) (13,1)
(11,6)
(16,7)
(10,14)
(1,7)
(3,1) (13,1)
(11,6)
(16,7)
(a) Partitioning  (b) Routing 
chip
D C B A
D4 D3 D2 D1
chip
A3A2
A1 A4
level=1
level=2
A4 A3 A2 A1
B C
D3D2
D1 D4
v  j
B o u n d in g  b o x
v  k
v  j
v  kv  j
v  k
v  j
v  k
v  j
v  k v  j
v  k
v  j
v  kv  j
v  k
v  j
v  k
v  i
v  i
v  i
v  i
v  i
v  i
v  i
v  iv  i
Algorithm: push_line (ti , tj) 
Input: Two terminals and a set of obstacles. 
Output: A feasible routing paths. 
Method: 
begin 
if ( there is no obstacle within bounding box ) 
Apply two kind of L-shaped pattern routing. 
else if ( ti is located at the obstacle boundary ) 
for the two corner points of the boundary 
Choose the point t' near ti 
Apply push_line(t', ti ). 
else 
Project ti to the boundary and get t". 
Apply push_line (t", t i). 
                end. 
Figure 5. Push_line technique (i.e. iteratively projection and choose corner point) 
 
For each edge of MST, we will consider two routing paths, 
including the forward and backward operation, and the result with 
smaller total wirelength will be selected. The criteria of cost is that cost 
= αWL, where WL denotes the total wirelength. For each net, it takes at 
most m times to remove the invalid edge, i.e. edge inside the obstacles. 
For n terminals, we at most check n-1 edges outside the obstacles. 
Therefore, the time complexity is O(mn), where n and m are the 
number of terminals and obstacles, respectively.   
 
 
 
 
(a)                                                   (b) 
Figure 6. Two kinds of push_line. (a) forward vi→vj and (b) backward vj→vi .  
An example that contains three terminals and five obstacles 
explains FRT. First, the minimal spanning tree are constructed, see 
Figure 7(a). In Figure 7(b), the edge is routed by the upper L-shaped 
routing pattern. For the edge, the push line algorithm is applied to 
construct the feasible routing path among the obstacles. Because the 
bounding box intersects the obstacles (Figure 7(c)), we generate the 
projection point by considering the relationship of the terminal and 
obstacle, see Figure 7(d). When the bounding box still intersects the 
obstacles, we will select the corner point near the projection point, see 
Figure 7(d). We iteratively generate the projection point and select the 
proper corner point after checking whether the bounding box intersects 
the obstacles or not (see Figure 7(e)-(g)). For the forwarding operation, 
we will get the feasible routing paths which do not intersect the 
obstacles (Figure 7(h)). In similar way, we will obtain the backward 
routing path, see Figure 7 (i). From Figure 7(h) and (i), we will take the 
routing path with the shorter wirelength as the result. 
 
 
 
 
 
 
(a)                                    (b)                                      (c) 
 
 
 
 
 
 
(d)                                      (e)                                     (f) 
 
 
 
 
 
 
(g)                                     (h)                                       (i) 
Figure 7. FRT. (a) a minimal spanning tree, (b) L-shaped patter routing, (c) 
project terminal to the boundary, (d) choose the near corner point, (e) check,  
iteratively (f) and (g) , (h) forward, (i) backward result. 
C. Timing-Driven Partitioning-Based Routing Tree (TPR) 
After analyzing the III-A and III-B, we know that the timing-
driven routing tree algorithm contains three steps. First, the chip is 
divided into k (=40, 41, 42. . .) sub-regions according the source. For each 
sub-region, the sequential method is then applied to construct the 
routing tree without obstacles. Finally, we adjust the edges which 
intersects the obstacles.  
Each sub-region is recorded by the quadratic tree data structure 
(Figure 8). The objective is to minimize the maximum s-t delay, we 
may divide the sub-region into k sub-regions (level = 2) if the detour 
routing is till serious, such as sub-region A and D. The overall timing-
driven routing tree algorithm is described in Figure 9 and a flow chart 
is given in Figure 10. 
 
 
 
 
 
 
 
 
 
(a)                                                  (b) 
Figure 8. (a) A chip region and (b) the corresponding Quad-tree structure. 
Algorithm: Timing-Driven Partitioning-Based Routing Tree (TPR) 
Input:  A set of obstacles and terminals with the source. 
Output: A timing-driven routing tree. 
Method: 
begin 
for a chip design with terminal and obstacles 
        Apply timing-driven partitioning to get a set of sub-regions. 
for each sub-region 
Construct the minimal spanning tree without obstacles. 
for each edge  
        Perform push_line technique for the invalid edges. 
end. 
Figure 9. TPR algorithm. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figure 10. Flow for TPR. (a) top-down partitioning and (b) bottom-up routing. 
 
IV. EXPERIMENTAL RESUTS 
 
We implement our algorithms in the C++ language on an Intel 
2.4GHz processor based PC with 256MB memory. To simplify, we 
implement the partitioning by setting k = 4 and level =1 and the 
corresponding Quad-tree data structure in used to record the terminals 
and obstacles (in Figure 7). The delay of each segment of the routing 
tree is estimated by Elmore delay model formula (1). 
First, we investigate the improvement on total wirelength. From 
table I, the total wirelength of [13] are reduced by our proposed method 
(k=1) with 37.5%. Besides, the total wirelength of [13] is also reduced 
by our proposed routing tree which applies timing-driven partitioning 
with the extra total wirelength. Figure 11 (a) and (b) are the routing 
result by TPR (k=1) and TPR (k=4), respectively. From the Figure 11, 
we can find that the maximum s-t delay in TPR (k=1) is indeed 
improved. 
