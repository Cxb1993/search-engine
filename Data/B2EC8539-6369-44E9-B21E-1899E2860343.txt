problem and extend to investigate the multiple-
steppers problems. The multiple-steppers problem is 
concerned with two decisions: (1) job assignment 
decision, (2) job sequence decision. We propose a 
novel chromosome representation to model the two 
decisions and develop seven meta-heuristic algorithms 
(GA, Tabu, GA-Tabu, SA, M-MMAX, PACO, PSO) to solve 
scheduling problem. Numerical experiments indicate 
that GA-Tabu outperforms the other meta-heuristic 
algorithms. 
英文關鍵詞： Scheduling, in-line Steppers, Flow Shop Scheduling, 
Meta-heuristic Algorithms, Genetic Algorithms, Tabu 
Algorithm. 
 
   
  
中文摘要 
本專題計畫是針對半導體廠在低良率情境下，研究步進機的投料排序問題，
期能提高步進機的產出。步進機是半導體廠的瓶頸機台，其內部是由一系列的加
工單元（稱為反應室）所組成，每一個反應室一次可加工一片晶圓。步進機的外
部一般設有 4個暫存區，每一區可暫存一批晶圓盒，每晶圓盒最多可存放 25片
晶圓。在低良率的情境下，許多晶圓盒會出現「不滿批」的現象（亦即晶圓片數
低於 25片）。本研究發現：在低良率情境下，即使步進機的某些反應室有產能閒
置，因為暫存區的空間限制，使得暫存區以外的晶圓片無法即時放入步進機加
工，因而造成步進機的產能損失。這種產能損失可以藉由晶圓批的投料排序來改
善。本研究發展各種進化式演算法(meta-heuristic methods)來求解此問題。研究情
境由簡而繁，首先研究在單機的情境下，如何決定工件投料的序。進而研究多機
情境下，工件如何指派給各機台，以及各機內工件的排序問題。本研究設計一個
新的染色體表達法，可同時表達「工件指派」和「工件排序」的兩個決策。並測
試各種進化式演算法的績效。本研究提出 7種演算法(GA, Tabu, GA-Tabu, SA, 
M-MMAX, PACO, PSO)，經實驗測試，GA-Tabu 演算法優於其他演算法。 
 
 
關鍵詞：排程、步進機、流程式生產、進化式演算法、基因演算法、禁忌搜尋法 
  
   
  
1. Introduction  
In semiconductor manufacturing, in-line steppers (or simply called steppers) are 
the most expensive machines, which may cost up to 40 million dollars per tool and 
usually become the bottleneck of a fab (semiconductor factory). Effective scheduling 
for steppers is very important because it could significantly affect the fab throughput, 
cycle time, and on-time delivery. 
Most prior studies on scheduling stepper are developed under a high-yield 
assumption (Chern and Liu, 2003; Dabbas and Flowler, 2003; Duwayri et al., 2006; 
Sha et al. 2006; Morrison and Martin, 2007; Wu and Chang, 2006; Wu et al.,2007, 
2008; Chen, 2009). That is, they implicitly assumed the production yield is 100% and 
no wafer will be scrapped. Each wafer lot (a container for transporting wafers) is 
always a full-lot (typically carrying 25 wafers). Under this assumption, they took a 
stepper as a single machine and a wafer lot as a job for scheduling. This implies that a 
stepper will not be idle as long as it has wafer lots waiting to be processed.  
Recently, a few studies (Wu and Chiou, 2010; Chiou and Wu, 2009) noticed that 
a stepper in a low-yield scenario may become idle even though it has many wafer lots 
waiting to be processed. They modeled the interior configuration of an in-line stepper 
as a special-featured flow shop, which comprises a series of chambers and each piece 
of wafer has to travel through the flow shop. They discovered that some chambers of 
the flow shop might become idle due to the inclusion of small-lots (i.e., carrying less 
than 25 wafers) and developed some scheduling algorithms to alleviate such chamber 
idleness in order to increase the throughput of steppers. These algorithms were 
developed in the context of scheduling a single in-line stepper.  
However, in practice, there are multiple in-line steppers to be scheduled. This 
paper enhances the prior scheduling algorithms to deal with the scheduling for 
multiple in-line steppers. Such a scheduling problem involves two decisions: (1) how 
   
  
2. Problem Statement 
The research problem is introduced by first describing the interior configuration, 
the exterior interfacing equipments, and the transportation mechanisms of an in-line 
stepper. Then, we use an example to illustrate such an in-line stepper may suffer a 
capacity loss in a low-yield scenario. Finally, the problem for scheduling multiple 
in-line steppers and its performance metric are presented.  
The interior configuration of an in-line stepper comprises a sequence of 
manufacturing stages, each of which involves one or more than one functionally 
identical chambers (Quirk, 2001). Each chamber processes one piece of wafer at a 
time. To undergo the operation at the stepper, a piece of wafer has to travel through all 
the manufacturing stages. Of these chambers, a particular type (called the aligner 
chamber) may need a setup. The aligner chamber is typically the bottleneck chamber 
and involves only one chamber at this manufacturing stage. Such a configuration can 
be seen as a flow shop if we consider each stage as a workstation and each chamber as 
a machine in a workstation (Yang, 1999; Pinedo, 2008). A simplified illustration of an 
in-line stepper is shown in Figure 1, where each manufacturing stage involves only 
one chamber.   
See Figure 1, the exterior of an in-line stepper is directly interfaced with a dock 
area which generally involves four ports. Each port serves as a one-job-buffer for the 
in-line stepper, which can accommodate only one job at a time. A job (or a wafer lot) 
is a container, which involves at most 25 pieces of wafers. Apart from the dock area, a 
large-sized stocker (also called the WIP area) is equipped to store the wafer jobs that 
are to be transported to the dock area.  
The transportation mechanisms of an in-line stepper are explained below. See 
Figure 1, a wafer job has to undergo a round-trip travel. A job first moves from the 
WIP area to the dock area, placed on a free port. Then, each piece of wafer will 
   
  
ports. This implies that no chamber will be idle while the port originally for job B 
becomes free to accommodate job E. Thus, the capacity-loss of an in-line stepper may 
be alleviated by applying an appropriate job sequence.  
The research problem is concerned with the scheduling of multiple in-line 
steppers in a low-yield scenario. Such a scheduling problem involves two decisions: 
(1) how to allocate jobs to each stepper, and (2) how to sequence the allocated jobs for 
each stepper. That is, given N jobs to be scheduled for m in-line steppers. The N jobs 
have to be categorized into m groups, and the jobs of each group have to be sequenced. 
The performance metric of the scheduling problem is defined as },...,max{ 1
*
mCCC = , 
where iC  is the makespan of i-th stepper. That is, 
*C is the makespan required to 
complete the N jobs, and */CN could be used to denote the total throughput rate of 
the m steppers. In the scheduling, we aim to maximize total throughput rate ( */CN ), 
which also implies the minimization of *C . 
   
  
ρ : total number of ports in the dock 
n: total number of jobs to be processed by the in-line stepper 
M: total numbers of stages in the in-line stepper 
im : total number of chambers at stage i 
iljkp : processing time required by chamber l  at stage i to process wafer k in job j  
π : a job sequence for the n jobs, [ (1),... ( )]nπ π π=  
))(( jw π : the job in the jth position of sequence π  
)( jπ : total number of wafers in job j 
ut : transportation time for uploading a job to the dock area 
dt : transportation time for downloading a job from the dock area 
kjliS ),(,, π : setup time required by chamber l in stage i to process wafer k in job )( jπ  
, , ( ),
, , ( ), ( ), ( 1)
if  or 1, then  = 0,
otherwise, 
i l j k
i l j k j j
i a k S
S
π
π π πδ −
≠ ≠
=
 
)1(),( −jj ππδ : setup time required for the aligner chamber to switch production from job 
)1( −jπ to job )( jπ ; ( ), ( 1) 0j j sπ πδ − =  if )1( −jπ  and )( jπ  use different 
masks, and ( ), ( 1) 0j jπ πδ − = , otherwise 
tliA ,, : the time epoch when chamber l in stage i just turns to be available; that is, while 
the chamber ( , )i l  is free at t, tliA ,,  is the last wafer-completion-epoch 
before t; while the chamber ( , )i l  is in operation at t, tliA ,,  is the first 
wafer-completion-time after t. 
   
  
4. Chromosome Representation and Decoding 
As stated in Section 1, the scheduling problem involves two decisions: (1) 
allocation decision—how to allocate jobs to each stepper, and (2) sequencing 
decision—how to sequence the allocated jobs for each stepper. That is, given N jobs 
to be scheduled on m steppers, we first need to categorize the N jobs into m groups, 
each of which is processed by a particular stepper. Then, we need to determine the job 
sequence for each stepper.  
Let a particular sequence of the N jobs be called a chromosome. In this research, 
we develop a chromosome-decoding scheme. By the decoding scheme, a chromosome 
can be interpreted as a particular scheduling solution, which involves two 
decisions—one is the allocation decision and the other is the sequencing decision.  
To introduce the chromosome-decoding scheme, some notation is described 
below. Denote a chromosome by [ (1),... ( )]Nπ π π= , where )( jπ , called a gene, 
represents the job in the jth position of sequence π . For job )( jπ , represent the 
number of wafers in the job by )( jwπ  and its processing time for a piece of wafer at 
the aligner chamber (the bottleneck chamber) by )( jpπ . Then, denote the total 
processing time at the aligner chamber for job )( jπ  by )()()( jjj pwt πππ ⋅= . The 
procedure for interpreting the job allocation decision from a given chromosome is 
described below. 
 
Procedure Job_Allocation 
Step 1: Compute the threshold for forming a job group 
∑
=
=
N
j
jtT
1
)(π ; /*total processing time of the N jobs*/ 
mTh /= ;  /* processing time threshold for forming a job group*/ 
   
  
5. GA-Tabu Algorithm  
To solve the scheduling problem, we developed seven meta-heuristic algorithms 
(GA, Tabu, GA-Tabu, SA, MMAX, PACO, and PSO) These algorithms adopt the 
algorithmic architectures published in prior studies as referenced below, but are 
distinguished in embedding the novel chromosome decoding scheme we proposed. Of 
these seven enhanced algorithms, the GA-Tabu performs the best and is presented 
here.  
 
5.1 Chromosome Fitness  
 As stated in Section 4, given a chromosome [ (1),... ( )]Nπ π π= , we can use the 
chromosome decoding scheme to extract its two decisions— jobs allocation among 
steppers and job sequencing for each stepper. Then, given a job sequence 
[ ( ),... ( )]k s eπ π π=  for each stepper k, mk ≤≤1 , we can compute its makespan kC  
by the procedure in Section 3. In turn, the scheduling performance (also called fitness) 
of the chromosome [ (1),... ( )]Nπ π π=  is },...,max{ 1
*
mCCC = , which is also 
denoted by )(* πC  hereafter. 
 
5.2 Algorithmic Procedures 
The GA-Tabu algorithm is composed of three procedures. The main one is called 
procedure GA-Tabu which calls two sub-procedures GA(t) and Tabu( outin ππ , ). There 
are two sets of chromosomes. One is called the GA-pool P(t), which include N 
chromosomes and iteratively evolve by procedure GA(t). The other set is called 
Seed_Set, which involves only one chromosome (called seed) and iteratively evolve 
by procedure GA-Tabu.  The procedure GA(t) is designed to evolve from P(t) to 
P(t+1) to possibly include better chromosomes and identify its best four ones. The 
   
  
GA-Tabu: the main procedure 
bestπ : the current best solution ever found by procedure GA-Tabu 
GA(t): a sub-procedure designed to evolve P(t) 
P(t): a set of N chromosomes, called the GA-pool. . 
best
tGA,π : the best chromosome in P(t) 
best
tGA
−2
,π : the 2
nd best chromosome in P(t) 
best
tGA
−3
,π : the 3
rd best chromosome in P(t) 
best
tGA
−4
,π : the 4
th best chromosome in P(t)  
Tabu ( outin ππ , ): a procedure designed to search the neighborhood of inπ , where outπ  
is the best chromosome found in the searched region. 
Tabu_list: a limited set of tabu_moves, where a tabu_move represents an interchange 
of two particular jobs.  
Seed_Set: a set of one chromosome, which iteratively evolve by procedure GA-Tabu 
seedπ : the present chromosome (called seed) in the Seed_Set  
 
Procedure GA-Tabu  
Initialization: Randomly select a chromosome as bestπ  
For each iteration t )0( fTt ≤≤  
Step 1: Call GA(t) to find besttGA 1, +π , 
best
tGA
−
+
2
1,π , 
best
tGA
−
+
3
1,π , 
best
tGA
−
+
4
1,π  in P(t+1) 
Step 2: If besttGA 1, +π  is better than 
bestπ  
 Update bestπ by besttGA 1, +π  (i.e., ←bestπ besttGA 1, +π ) 
 Call Tabu ( outbest ππ , ) to search the neighborhood of bestπ  for 
   
  
Step 4: Output the best four chromosomes in P(t+1): besttGA 1, +π , 
best
tGA
−
+
2
1,π , 
best
tGA
−
+
3
1,π , 
best
tGA
−
+
4
1,π . 
Procedure Tabu ),( outin ππ  
Step 0: Initialization bestout ππ =  
Step 1: Create a set of new chromosomes, Neighbor )( inπ  
Step 2: Try to improve outπ   
 Identify the best q chromosome qππ ,....1  from Neighbor )( inπ  
 If 1π  is better than bestπ , then 1ππ =out ;  
Step 3: Update tabu_list  /*Try to add a new tabu_move to the tabu_list*/ 
For i = 1, q  
If listtabumove iin _)( ∈→ππ , then go to Next i 
If listtabumove iin _)( ∉→ππ ,  
Then 
 Update the tenure of each tabu_move in the tabu_list 
/* Each tabu_move’s tenure starts at 1 and is added by 1 while a new 
tabu_move is found*/ 
 Remove the tabu_move with longest tenure from the tabu_list; 
 Put )( iinmove ππ → in the tabu_list;  
 If )( seedin ππ = , set iseed ππ =  
 Go to Step 4 
  Next i 
Step 4: Return 
 
   
  
defined. Each in-line stepper has 4 ports, 14 stages and 21 chambers. See Table 1, of 
the 14 stages, two stages model the interfaces among the WIP buffer, the dock area, 
and the stepper; and the other 12 stages model the interior chambers of the stepper. 
Note that one stage may include one or more chambers. The operation time at each 
stage i of each in-line stepper is a uniform distribution [ai, bi]. At each stepper, a mask 
setup is always needed for the aligner chamber while it turns to process a new job’s 
wafer, and the mask change time is a constant (1.0 min.). The process yields are 
modeled by truncated binomial distributions, which denote that the job size is first 
generated by a binomial distribution, and then those jobs that carry no wafer are 
“truncated” (removing them from the fab).   
We use (M, N, Y) to represent a test case, where M represents the number of 
in-line steppers, N represents the number of jobs, and Y represents the average yield. 
We design 100 test cases, in which M has two options (with 2 or 3 steppers) and N has 
5 options ranging from 20 to 100 jobs and Y includes 10 options ranging from 15% to 
90%. In practice, the complexity of a typical multiple-stepper scheduling problem is 
M = 2 and N = 60.  
In each test case, we run 15 replicates and the average makespan of the 15 
replicates is taken as the performance measure of the tested algorithm. The average 
makespan of each algorithm x is designated as Cx. For example, tabuGAC −  represents 
the average makespan of the GA-Tabu. Likewise, the average CPU time used in each 
algorithm x is defined as xt ; for example, that used in the GA-Tabu is represented by 
tabuGAt − .  
Pilot experiments indicate that the GA-Tabu essentially outperforms the other six 
algorithm. To compare the solution quality of the seven algorithms, we define a 
performance gap as follows: TabuGATabuGAxx CCC __ /)( −=γ . A positive xγ  indicates 
   
  
6.2 Experiment Results 
Tables 2-11 show the experiment results of xγ  and xt .The GA-Tabu 
outperforms the other six algorithms in terms of xγ . Of the 100 test cases, xγ  
ranges from 0% to 22% but the average of xγ  is only 1.19%. See Figure 3, the lower 
is Y (average process yield), the higher is the average of xγ .  While Y decreases to 
15%, the average of xγ  even reaches up to 8.06%. This is due that the number of 
small lots in a high-yield scenario is fewer which in turn results in less capacity-loss. 
Therefore, the GA-Tabu outperforms the other algorithms substantially in low-yield 
scenarios and slightly in high-yield scenarios.  
Of the 100 test cases, the average of xγ  for each algorithm is shown in Figure 4, 
which indicates that the Tabu algorithm is the second best—the average of Tabuγ  is 
only 0.16%. However, the value of Tabuγ  may reach up to 5.31% in a low-yield 
scenario (Table 3). The average of xt  for each algorithm is shown in Figure 5, which 
indicates that the Tabu algorithm is computationally faster than the GA-Tabu. The 
maximum value of TabuGAt −  is 4,379 sec. (about 1.2 hour). In practice, the scheduling 
decision is made on every working shift (12 hours); solving such a scheduling 
problem 1.5 hours before the shift is acceptable to practitioners.  
 
6.3 Research Uniqueness 
 The uniqueness of this research, in comparison to the prior studies on the 
single-stepper scheduling problem, is explained from the following three perspectives: 
(1) the scheduling context, (2) the chromosome-decoding, and (3) the chromosome 
solution quality of meta-heuristic algorithms. 
The scheduling context of multiple steppers is more complicated than that of 
single stepper. Namely, the scheduling context of multiple steppers involves two types 
of decisions: (1) stepper allocation: how to allocate jobs to each stepper, and (2) job 
   
  
each stepper, and how to sequence jobs for each stepper. The longest makespan of the 
M in-line steppers is taken as the performance measure.    
A scheduling solution (called a chromosome) is represented by a sequence of N 
jobs. We develop a novel chromosome-decoding scheme to interpret a chromosome 
into its two associated scheduling decisions—job allocation and job sequencing. Such 
a decoding result can be used to compute the performance (also called fitness) of the 
chromosome.  
Based on the chromosome representation and decoding schemes, seven 
meta-heuristic algorithms adapted from prior studies are developed. These seven 
algorithms include GA, Tabu, GA-Tabu, SA, M-MMAX, PACO, PSO. Numerical 
experiments indicate that the GA-Tabu outperforms the other six algorithms in terms 
of solution quality; and this merit is particularly impressive in low-yield scenarios. In 
practice, such a scheduling decision is made on every working shift (12 hours). The 
computation time of the GA-Tabu, ranging from a few minutes to less than 1.5 hours, 
is acceptable to practitioners.  
One extension of this research is examining the optimal design of port number. 
The larger is the port number, the higher is the tool expenditure and the tool operation 
costs; yet the less is the capacity loss of steppers. Therefore, stepper vendors may 
need to customize the port design based on the process yields of their customers. 
 
   
  
learning. Addison-Wesley, Boston.  
Holland J.H. (1975), Adaptation in neural and artificial systems, Ann Arbor, MI: Univ. 
Michigan Press. 
Liao C.J., Tseng C.T. and Luarn P. (2007), ‘A discrete version of particle swarm 
optimization for flowshop scheduling problems’, Computers & Operations 
Research, 34, 3099 – 3111.  
Michalewicz Z. (1996), Genetic algorithms + data structures = evolution programs,  
3rd ed. Springer, Berlin Heidelberg New York. 
Morrison J.R. and Martin D.P. (2007), ‘Performance evaluation of photolithography 
cluster tools’, OR Spectrum, 33, 375–389. 
Nearchou A.C. (2004), ‘The effect of various operators on the genetic search for large 
scheduling problems’, International Journal of Production Economics, 88,  
191–203.  
Osman I.H. and Potts C.N. (1989), ‘Simulated annealing for permutation flow-shop 
scheduling’, OMEGA, The International Journal of Management Science, 17(6), 
551–557. 
Pinedo M. (2008), Scheduling:theory, algorithms, and systems. 3rd ed., Springer New 
York.  
Quirk M. (2001), Semiconductor manufacturing technology, Prentice Hall.  
Rajendran C. and Ziegler H. (2004), ‘Ant-colony algorithms for permutation 
flowshop scheduling to minimize makespan/ total flowtime of jobs’, European 
Journal of Operational Research, 155, 426–438. 
Reeves C.R. (1995), ‘A genetic algorithm for flowshop sequencing’, Computation 
Opereration Research, 22(1), 5–13. 
Ruiz R. and Maroto C.(2006), ‘A genetic algorithm for hybrid flowshops with 
sequence dependent setup times and machine eligibility’, European Journal of 
   
  
Production Economics, 112, 416–426. 
Yang W.H. (1999). ‘ Survey of scheduling research involving setup times’, 
International Journal of Systems Science, 30:2, 143-155.  
 
Figure 1. Configuration of a simplified in-line stepper. 
(a). Chromosome representation
J2 J5 J7 J4 J1 J6 J3 J9 J8
Processing time in aligner chamber 
(min.) 
J2 J5 J7 J4 J1 J6 J3 J9 J8
0.1 0.2 0.15 0.3 0.15 0.2 0.1 0.2 0.2
(b). Calculating the accumulated processing time
Accumulated processing time in aligner 
chamber (min.) 
0.1 0.3 0.45 0.75 0.9 1.1 1.2 1.4 1.6
0.53 min.
Cutting point
J2 J5 J7 J6 J3 J9 J8
(c). Decoding result
Job sequence 
In machine 1
Job sequence 
In machine 3
1.06 min.
Cutting point
Job sequence 
In machine 2
J4 J1
Job-based Wafer-based 
 
11 10 9 8 7 6 5 4 3 2 1 
12 13 14 15 16 17 18 19 20 21 22 
Port 4 
Port 3 
Port 2 
Port 1 
Job-based Wafer-based 
WIP 
area 
Dock area 
   
  
8.06%
4.46%
2.01%
0.45% 0.55%
0.56% 0.68%
0.73%
1.03%
1.28%
0.0%
1.0%
2.0%
3.0%
4.0%
5.0%
6.0%
7.0%
8.0%
9.0%
90% 80% 70% 60% 50% 40% 30% 25% 20% 15%
Yield
rx
 
Figure 3. Average of xγ  at various yields. 
 
2.80%
2.33%
0.65%0.60%0.60%
0.16%
0.0%
0.5%
1.0%
1.5%
2.0%
2.5%
3.0%
Tabu GA PACO MMAX SA PSO
Algorithms
rx
 
Figure 4. Average of xγ  at various algorithms. 
   
  
Table 1. Process times of in-line stepper chambers 
Process 
sequence 
WIP buffers to dock 
area 
Dock area to 
track 
HMDS Cooling Coater 
Soft- 
bake 
Cooling Aligner 
wafer edge 
exposure 
PEB Cooling Develop 
Hard 
bake 
High 
cooling 
Chamber 
number 
1 1 2 2 2 2 2 1 1 2 2 2 2 1 
Process time 
(min) 
2.5 0.1 1.2 1.2 1.2 [1.2,2.8] 1 [0.75,1.65] 1 [1.2,2.8] 1 [1.2,2.8] [1.2,2.8] 0.5 
 
   
  
Jobs
Yield
(min) (sec) (sec)
(min)
(sec) (sec) (sec) (sec)
90% 564.6 381 0.05% 160 0.02% 722 0.10% 185 0.10% 261 0.97% 30 1.37% 7
80% 488.1 333 0.07% 155 0.04% 635 0.20% 160 0.20% 226 1.06% 31 1.59% 7
70% 438.5 294 0.08% 151 0.18% 674 0.29% 143 0.29% 203 1.26% 30 1.79% 6
60% 378.3 276 0.03% 146 0.00% 553 0.16% 122 0.16% 173 1.33% 28 2.00% 6
50% 331.9 261 0.08% 143 0.00% 488 0.16% 106 0.16% 150 1.42% 26 2.11% 6
40% 254.4 182 0.00% 138 0.11% 359 0.20% 81 0.20% 116 1.89% 24 2.87% 6
30% 200.0 150 0.07% 133 0.10% 334 0.45% 63 0.45% 89 2.29% 22 3.62% 5
25% 172.2 150 0.04% 130 0.29% 419 0.52% 54 0.52% 76 3.39% 21 4.93% 5
20% 129.9 128 5.31% 129 2.20% 386 1.90% 48 1.90% 69 15.55% 20 15.77% 5
15% 118.8 104 2.71% 124 2.80% 649 3.66% 34 3.66% 48 22.91% 19 15.34% 5
GA_Tabu GA SATabu MMAXPACO PSO
40
TabuGAC − SAtTabuGAt − tabut MMAXtPACOt PSOtSArGArTabur MMAXrPACOr PSOrGAt
 
   
  
Table 5. Performance comparisons of algorithms in scenarios with (M, N) = (2, 80) 
Jobs
Yield
(min) (sec) (sec)
(min)
(sec) (sec) (sec) (sec)
90% 1123.3 1851 0.01% 1210 0.03% 2502 0.12% 1474 0.13% 2084 0.79% 49 1.05% 34
80% 1004.2 1731 0.06% 1174 0.09% 2722 0.27% 1309 0.37% 1857 0.80% 47 1.18% 33
70% 891.7 1659 0.00% 1139 0.06% 2053 0.16% 1158 0.19% 1648 0.86% 43 1.30% 33
60% 760.3 1352 0.00% 1098 0.06% 1767 0.21% 978 0.30% 1393 1.58% 39 1.47% 32
50% 654.7 1130 0.02% 1074 0.05% 1726 0.20% 844 0.21% 1205 1.26% 36 1.75% 32
40% 515.0 864 0.05% 1034 0.25% 1109 0.35% 660 0.43% 954 2.66% 32 2.16% 31
30% 412.5 708 0.00% 998 0.22% 1262 0.59% 521 0.20% 744 1.77% 28 2.62% 31
25% 334.7 601 0.01% 967 0.89% 1315 1.12% 426 0.55% 610 4.69% 26 4.11% 30
20% 292.4 529 0.07% 954 2.69% 1997 2.39% 374 1.87% 543 5.85% 24 7.39% 30
15% 228.9 392 2.68% 931 6.91% 2126 7.80% 253 4.02% 366 8.77% 21 16.64% 30
PSOGA_Tabu GA SATabu PACO MMAX
80
TabuGAC − SAtTabuGAt − tabut MMAXtPACOt PSOtSArGArTabur MMAXrPACOr PSOrGA
t
 
   
  
Jobs
Yield
(min) (sec) (sec)
(min)
(sec) (sec) (sec) (sec)
90% 197.9 4379 0.11% 6.0 0.09% 5876 0.41% 21 0.29% 31 1.27% 30 1.37% 2
80% 186.7 3970 0.19% 5.0 0.13% 4726 0.59% 19 0.31% 29 1.47% 27 1.61% 2
70% 159.7 3484 0.14% 4.0 0.22% 4348 0.50% 16 0.25% 25 1.53% 24 1.77% 1
60% 140.9 3375 0.12% 4.0 0.39% 4978 0.69% 14 0.58% 21 1.60% 21 1.87% 1
50% 126.7 2450 0.11% 3.0 0.57% 3996 0.76% 13 0.61% 19 1.69% 17 2.07% 1
40% 99.8 2046 0.10% 2.0 0.44% 4059 0.55% 10 0.52% 14 1.81% 14 2.29% 1
30% 82.2 1540 0.06% 2.0 0.55% 2632 0.60% 7 0.51% 11 1.83% 11 2.68% 1
25% 63.7 1377 0.13% 1.0 0.81% 3063 1.08% 6 0.85% 8 2.56% 10 3.88% 1
20% 55.9 1135 0.39% 1.0 0.89% 2209 1.18% 5 1.11% 7 3.43% 9 4.99% 1
15% 49.2 896 0.57% 1.0 1.53% 2238 1.99% 4 1.53% 6 5.10% 7 8.51% 1
PSOGA_Tabu GA SATabu MMAXPACO
20
TabuGAC − SAtTabuGAt − tabut MMAXtPACOt PSOtSArGArTabur MMAXrPACOr PSOrGA
t
 
Table 8. Performance comparisons of algorithms in scenarios with (M, N) = (3, 40) 
   
  
Table 9. Performance comparisons of algorithms in scenarios with (M, N) = (3, 60) 
Jobs
Yield
(min) (sec) (sec)
(min)
(sec) (sec) (sec) (sec)
90% 577.5 1092 0.00% 179.4 0.05% 2724 0.07% 597 0.00% 915 1.23% 20 1.38% 17
80% 509.6 975 0.02% 158.9 0.09% 2093 0.02% 526 0.02% 804 1.19% 18 1.52% 17
70% 449.1 866 0.04% 140.1 0.17% 1587 0.15% 463 0.11% 705 1.46% 16 1.68% 16
60% 405.6 774 0.00% 126.9 0.13% 1859 0.13% 418 0.17% 635 1.65% 15 1.81% 16
50% 328.2 645 0.00% 101.0 0.31% 1278 0.14% 333 0.08% 504 1.78% 12 2.25% 16
40% 272.4 522 0.04% 83.7 0.48% 1428 0.24% 276 0.22% 416 2.84% 11 2.70% 15
30% 196.6 384 0.13% 59.0 0.91% 986 0.38% 197 0.16% 295 2.94% 9 3.80% 15
25% 165.1 330 0.18% 50.0 1.91% 1366 0.64% 166 0.47% 249 5.08% 8 5.94% 15
20% 146.8 315 0.63% 45.0 4.20% 1511 2.08% 148 1.78% 222 7.75% 7 9.63% 14
15% 116.9 326 4.68% 33.0 4.00% 1081 4.35% 107 4.20% 161 17.53% 6 19.41% 14
PSOGA_Tabu GA SATabu MMAXPACO
60
TabuGAC − SAtTabuGAt − tabut MMAXtPACOt PSOtSArGArTabur MMAXrPACOr PSOrGA
t
 
Table 10. Performance comparisons of algorithms in scenarios with (M, N) = (3, 80) 
   
  
Table 11. Performance comparisons of algorithms in scenarios with (M, N) = (3, 100) 
Jobs
Yield
(min) (sec) (sec)
(min)
(sec) (sec) (sec) (sec)
90% 950.5 4379 0.04% 839.1 0.06% 5876 0.39% 2780 0.28% 4236 0.96% 30 1.14% 59
80% 853.9 3970 0.05% 756.9 0.16% 4726 0.63% 2493 0.34% 3788 1.48% 27 1.24% 58
70% 760.4 3484 0.00% 674.0 0.21% 4348 0.47% 2214 0.23% 3349 1.35% 24 1.36% 57
60% 653.2 3375 0.04% 579.6 0.38% 4978 0.69% 1896 0.57% 2865 1.78% 21 1.56% 57
50% 535.1 2450 0.00% 474.8 0.63% 3996 0.82% 1549 0.67% 2336 1.56% 17 1.89% 56
40% 451.1 2046 0.10% 397.1 1.12% 4059 1.23% 1296 1.21% 1953 2.42% 14 2.35% 56
30% 345.0 1540 0.07% 300.5 1.57% 2632 1.62% 981 1.54% 1478 2.11% 11 2.93% 55
25% 306.8 1377 0.33% 269.8 2.32% 3063 2.60% 882 2.35% 1329 4.46% 10 3.68% 55
20% 252.8 1135 0.08% 224.3 5.30% 2209 5.61% 730 5.54% 1097 5.96% 9 7.24% 54
15% 205.7 896 0.16% 167.7 7.81% 2238 8.29% 533 8.24% 803 16.05% 7 14.02% 54
PACO PSOGA SATabu MMAXGA_Tabu
100
TabuGAC − SAtTabuGAt − tabut MMAXtPACOt PSOtSArGArTabur MMAXrPACOr PSOrGA
t
 
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。 
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
 達成目標 
□ 未達成目標（請說明，以 100字為限） 
□ 實驗失敗 
□ 因故實驗中斷 
□ 其他原因 
說明： 
 
   
 44 
國科會補助計畫衍生研發成果推廣資料表 
日期：101 年 5月12日 
國科會補助計畫 
計畫名稱：新製程導入情境下連線式步進機之排程 
計畫主持人：巫木誠  
計畫編號：99-2221-E-009-110-MY3 領域：工業工程 
研發成果名稱 
（中文）連線式步進機之排程方法 
（英文）An Effective Scheduling Method For In-Line Steppers 
成果歸屬機構 
國立交通大學 發明人 
(創作人) 
巫木誠、邱志文、呂佳
玟、謝佩芸 
技術說明 
（中文）半導體廠最貴的機台是步進機(Stepper)，因此成為影響
產出最關鍵的瓶頸機台。在新製程導入時，製程良率通常很低。
本研究發現在低良率情境下，晶圓批的加工順序安排若不適當，
很可能造成步進機台意外性閒置，進而降低產出量。本研究提出
一套有效的排程方法，可使步進機台產出最佳化。 
 
（200-500字） 
（英文）In semiconductor fabs, in-line steppers are the most 
expensive tools, which are the bottleneck in determining 
wafer outputs. While introducing new processes or products, 
the process yields tend to be low. This low-yield feature 
may unexpectedly result in capacity idleness in an in-line 
stepper. This research develops a scheduling method for 
in-line steppers to reduce the risk of their unexpected 
capacity idleness in low yield scenarios. 
 
產業別 
半導體產業 
技術/產品應用範圍 
步進機排程 
1 
 
                                                      
 
參加國際學術會議 
出國報告書 
 
學術會議名稱 
The 9th International Conference on  
Intelligent Manufacturing and Logistics Systems 
& 
International Symposium on  
Semiconductor Manufacturing Intelligence 
 
 
 
 
 
 
 
盧柏翔 
國立交通大學工業工程與管理學系 
2013/02/27-2013/03/01 
 
3 
 
目錄 
（一） 目的------------------------------------------------------------4 
（二） 過程------------------------------------------------------------4 
2.1 行程簡述----------------------------------------------------4 
2.2 主題演講----------------------------------------------------4 
2.3 論文發表會--------------------------------------------------7 
（三） 心得與建議事項--------------------------------------------------8 
 (四) 附錄------------------------------------------------------------9 
5 
 
主題演講(Keynote Speech)共有三個場次，各場次分述如下: 
Keynote Speech I:  
 演講者：Prof. Youfang Huang 
 主 題 ： SMU--Top Research and Educational University in 
Transportation and Logistics Engineering 
 重點： 
 中國大陸近年來物流與供應鏈蓬勃發展 
 供應鏈相關策略需要由「人」去執行 
 因此上海海事大學成立 LRC (Logistics Research Center) 
 將重點放在交通運輸工程、物流工程與管理，並與業界合作發展 
 培養具備物流與供應鏈學術與實務經驗的人才 
 面對未來物流與供應鏈的發展，台灣的學校也要積極培養物流與供
應鏈領域的人才 
 心得： 
 演講者是上海海事大學的現任校長:黃有方校長，曾在 2010年度榮獲物
流時代評選為 2009年度中國物流十大風雲人物稱號。在現今現代化服務性
的工業，物流與供應鏈扮演一個相當重要的角色，供應鏈相關策略需要由
「人」去執行，所以上海海事大學致力於發展運輸、製造與物流產業，成
立 LRC (Logistics Research Center)，在物流系統最佳化與模擬、國際物
流、供應鏈管理等相關研究領域，上海海事大學都有相當多的研究，也承
接政府好幾項的重大建設，未來希望在 2020 年成為世界高水平的海事大
學，並將學科定位在交通運輸工程、物流工程與管理、海洋工程與材料、
航運經濟與管理、國際航運政策與法律等，培養更多具備物流與供應鏈學
術與實務經驗的人才。面對未來物流與供應鏈的發展，台灣的學校也要積
極培養物流與供應鏈相關領域的人才，提升台灣在物流與供應鏈產業的競
爭力。 
 
Keynote Speech II: 
 演講者：Prof. Shu-Cherng Fang 
7 
 
 演講者 David Liu是中國大陸 TSMC公司的財務副總，他在半導體產業
已有二十幾年的經驗，憑藉在半導體產業如此豐富的經驗，David Liu先是
以宏觀的角度預測 2013 年度的整體經濟趨勢:有 2/3 的營收成長來自於智
慧型手機與平板電腦，然後把重點聚焦在半導體產業上的趨勢預測，接著
再深入討論中國大陸半導體產業未來的發展趨勢: 智慧型手機相關晶片與
智慧電視最被看好，從技術面、人才面、資金面以及政策面四個面向逐一
探討，最後，討論 IC產業在現今的社會中，該如何維持可觀的收益並且持
續成長，應將重點放在「智能、節能、效能」的產品，提升創新與研發的
實力是致勝的關鍵。 
 
2.3 論文發表會(Paper Sessions) 
 本次會議學術論文發表共有 77篇，共分成 19個場次(session)，每個時段
有 4-5個場次同時進行論文發表。 
本人發表的論文題目是：A novel solution representation for developing 
a genetic algorithm to solve DFJSP scheduling problems，排在Intelligent 
Manufacturing場次(02/28，星期四下午4:40-6:00)發表。其構想為:許多研究
都改善啟發式演算法的algorithmic architectures來獲得較佳的績效，很少研
究去探討改變啟發式演算法的solution representations，因此我試著比較兩
種不同solution representations的績效(GA_Sold與GA_Snew)，其結果顯示GA_Snew
的績效較佳。 
另外本人此次會議參與其他兩篇論文的發表: 
(1) 
 作者：C. Chamnanlor, K. Sethanan, C.F. Chen and M. Gen (Department 
of Industrial Engineering, Faculty of Engineering, Khon Kaen 
University) 
 主題：Ant Colony Optimizations for Hybrid Flow Shop Scheduling 
Problem with Time Windows in Hard-Disk Manufacturing 
 文獻:過去的文獻未曾考慮 Time Windows 
 構想：生產高品質產品需考慮 Time Windows，利用 HACO(Hybrid Ant Colony 
9 
 
（四） 附錄 
 
 
 
 
 
 
 
 
報告照片(一) 報告照片(二) 
 
 
 
 
 
上海海事大學手冊 會議電子論文 USB 
 研討會議程: 
 
2 
 
 
摘要 
本人此次出國是參加 2013 年 02/27-03/02 在中國上海舉辦的 9th IML 
Conference及 ISMI Conference。此次出國參加會議，除了參與學術論文發表也聆
聽大會主題演講。此次會議，本人心得為(1) Keynote Speech 心得:I.中國大陸近
年來物流與供應鏈蓬勃發展，供應鏈相關策略需要由「人」去執行，SMU 積極培養
物流與供應鏈的人才。II.決策者面臨決策問題需要建立模型來幫助解決問題，利
用模糊最佳化與決策技術來建立模型，提供更好的分析和健全的決策。III.預測
2013年的經濟趨勢，討論中國大陸半導體產業未來發展與 IC產業如何維持收益且
持續成長(2) 謝謝國科會補助出國參與國際研討會，讓我有這個機會能夠增廣見
聞，做研究不能只是閉門造車，因此參與國際研討會就是個很好的方法，建議國科
會可以多補助國內年輕學生，參與國際研討會，不僅僅可以增進學生的素質，還可
以增進學生的國際觀，對於台灣在學術研究領域上，相信會有很大的幫助。 
4 
 
（一） 目的: 
本人此次出國是參加 2013年 02/27-03/02在中國上海(Shanghai, China)所舉
辦的 9th IML (Intelligent Manufacturing & Logistics Systems) Conference 及
ISMI (International Symposium on Semiconductor Manufacturing 
Intelligence)。IML與 ISMI這兩個會議是聯合會議，在同一時間停一地點舉行，
舉辦地點是在 Radisson Hotel, Pudong, Shanghai；會議主辦單位是中國上海海事
大學 SMU(Shanghai Maritime University)。 
此次出國參加會議，目的有三： 
(1) 發表學術論文 
(2) 聆聽大會主題演講(Keynote Speech) 
(3) 聆聽相關場次的學術論文發表(Session Presentation) 
 
（二） 過程: 
 2.1 行程簡述 
 本人此次行程簡述如下: 
 02/27（星期三）：由桃園國際機場抵達上海浦東國際機場 
 02/28（星期四）：辦理報到註冊 
 上午：聆聽大會主題演講 (Keynote Speech，9:30-11:40 AM) 
 下午：聆聽學者發表學術論文(Sessions，1:30-4:25 PM) 
 下午：發表本人的學術論文(Paper Presentation，5:00-5:20 PM) 
   03/01（星期五）： 
 上午：聆聽大會主題演講 (Keynote Speech，9:00-10:00 AM) 
 下午：聆聽其他學者發表學術論文(Sessions，1:30-2:50 PM) 
 下午 4:00前往上海浦東國際機場（準備離境中國） 
 當天晚上 9:50抵達桃園國際機場（抵達台灣） 
 
   2.2 主題演講(Keynote Speech) 
本次會議分成兩大單元：(1) 主題演講(Keynote Speech)，(2) 學術論文
發表(Paper Session)。 
6 
 
 主題：Fuzzy Optimization and Decision Making for Intelligent 
Manufacturing and Logistics 
 重點： 
 決策者面臨決策問題經常需要建立模型 
 運用模糊最佳化與決策技術來建立模型 
 演講者舉例說明:如何決定物流中心的位置 
 利用 Random Fuzzy Variable來建立模型 
 再用 Spanning Tree-Based Genetic Algorithm求解 
 心得： 
 演講者是任職於北卡羅來納州立大學的方述誠教授，也是交通大學的榮
譽講座教授。現今的製造業與物流業，為了能使產業永續經營，許多高度
智能化的工具經常被拿來使用。經理人、設計者、工程師與研究人員在面
臨不確定很高的決策問題時，經常需要建立模型來幫助解決問題。然而最
先進的工具能夠有效提供更好的分析和健全的決策，因此利用模糊最佳化
與決策技術來建立模型，而能提供更好的決策分析供決策者作為參考。演
講者舉例說明:如何決定物流中心的位置，先利用 Random Fuzzy Variable
來建立模型，再用 Spanning Tree-Based Genetic Algorithm求解。 
 
Keynote Speech III:  
 演講者：Prof. David Liu 
 主題：IC Economics Search for the Next Catalyst  
 重點： 
 2013 半導體趨勢產業趨勢預測:有 2/3 的營收成長來自於智慧型手
機與平板電腦 
 中國半導體產業趨勢預測: 智慧型手機相關晶片與智慧電視最被
看好 
 IC產業應將重點放在「智能、節能、效能」的產品 
 提升創新與研發的實力是致勝的關鍵 
 心得： 
8 
 
Optimizations)去求 Hard-Disk Drive(HDD)製造系統，與 lower bound 比
較，可以獲得不錯的解。 
 (2) 
 作者：A. Zuhdi, Z. Taha, S. Z. M. Dawal,  H. J. Yap (Centre for Product 
Design and Manufacturing, Faculty of Engineering, University Malaya) 
 主題：Spine Layout Design for Flexible Manufacturing Systems Using 
a Hybrid Genetic Algorithm and Fuzzy-Based Level Control Model 
 文獻: 過去的文獻未曾考慮 Fuzzy-Based Level Control Model 
 構想：利用 GA (Genetic Algorithm)去求解一個彈性製造系統具有 spine 
layout configuration，與其他演算法比較，可以獲得不錯的解；並比較
GA與 GA + fuzzy-based level control的績效，結果考慮 fuzzy-based level 
control的績效較佳。 
 
（三） 心得及建議事項： 
 謝謝國科會補助出國參與國際研討會，讓我有這個機會能夠增廣見聞，參
與這次研討會聽到許多學者的研究與想法，對我的研究有大大的幫助，另
外因為來自不同的國家的學者，皆須使用英語來溝通，英語能力還需要再
多加強，才能符合社會對於博士生的要求，除此之外，這是我第一次出國，
上海市的風貌讓我留下了深刻印象。 
 由於家中經濟關係，只能在台灣攻讀博士學位，但目前是國際化的社會，
做研究不能只是閉門造車，也需要參考其他國家的學者在相同研究領域有
什麼樣的想法，因此參與國際研討會就是個很好的方法，但苦於經費問題
因此打消這個念頭，所以很感謝國科會補助，讓我有機會可以參與這次的
研討會。所以建議國科會可以多補助國內年輕學生，參與國際研討會，不
僅僅可以增進學生的素質，還可以增進學生的國際觀，對於台灣在學術研
究領域上，相信會有很大的幫助。 
 
 
國科會補助計畫衍生研發成果推廣資料表
日期:2013/09/05
國科會補助計畫
計畫名稱: 新製程導入情境下連線式步進機之排程
計畫主持人: 巫木誠
計畫編號: 99-2221-E-009-110-MY3 學門領域: 生產系統規劃與管制
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
參與本研究之博士生邱志文，在學期間是在職生，任職於新竹科學園區某半導
體廠，邱先生將此研究成果用於生產現場，發現確實可改善步進機的產出。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
