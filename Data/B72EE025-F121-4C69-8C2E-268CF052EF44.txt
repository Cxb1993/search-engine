characteristics to identify the evidences of Botnet. 
However, there still exist many problems of packet 
encryption and data privacy because Botnet can easily 
change the packet contents and flow characteristics 
to circumvent the Intrusion Detection System (IDS). 
The study of this paper combines Particle Swarm 
Optimization (PSO) and K-means algorithms to provide 
a solution to those problems and structures step-by-
step a mechanism of Botnet detection. First, three 
important network behaviors including long active 
communication behavior (ActBehavior), connection 
failure behavior (FailBehavior), and network scanning 
behavior (ScanBehavior) are defined in this study 
according to the related literatures and analyzing 
the communication activities among the infected 
computer. Secondly, the features of network behaviors 
are extracted from the flow traces in the network 
layer and transport layer of the network equipment. 
Thirdly, PSO and K-means techniques are used to 
uncover the host members of Botnet in the 
organizational network. This study mainly uses the 
flow traces of a campus network as an experiment. The 
experimental findings show that this approach can 
detect the suspicious Botnet members early than the 
detection application systems. In addition, it is 
simple to implement and can be used in the campus 
dormitory network, home network and also the mobile 
3G network. 
英文關鍵詞： Botnet, Particle Swarm Optimization, K-means 
clustering, network traffic analysis 
 
一、前言 
常見的資安問題，像是分散式阻斷服務攻擊(Distributed Denial-of-Service, 
DDoS)，就能導致目標網站的攤換，讓使用者無法存取該網站提供的服務，若該
網站為線上購物網站，經營者就會產生極大的商業損失，若是電子銀行，則對依
賴這些服務的用戶將造成極大的不便。若像木馬這樣的惡意程式植入在多台受害
電腦中，而且這些受害電腦又能被同一個人控制，建立起 Botnet(Sun et al, 2006)，
則會使上述情況更加惡化，舉例來說，若 Botnet 擁有控制一百萬台受害電腦的
規模，就可以產生足以讓美國財星雜誌前五百大企業當機的 DDoS 攻擊，若擁有
控制一千萬台受害電腦的規模，更可以透過 DDoS 攻擊使先進國家的基礎網路建
設癱瘓(Carr, 2009)。而且除了受害電腦本身的機密資料會被偷走外，Botnet 也可
以寄送釣魚網頁的信件以騙取其他人的帳號及密碼，除此之外，Botnet 還可以發
送大量廣告信，點擊欺詐等網路犯罪，若 Botnet 收集到的受害電腦越多，在網
路上造成的破壞力也會越驚人，也因為這樣，Botnet 現在已成為網路安全中最大
的威脅(Al-Hammadi et al., 2008; Huang et al., 2011)。 
  Botnet 從過去到現在一直對網路世界帶來很大的危險，像是在 2009 年，
Botnet 就利用龐大的受害電腦發動分散式阻斷服務攻擊(DDoS)，造成 Twitter 、
Facebook 、LiveJournal、Amazon 等知名網站服務中斷(Acohido, 2009; Whitney, 
2009)，不但造成服務提供者巨大的損失外，也使用戶對網站產生不信任。網路
安全公司 NetWitness 在 2010 年也發現(NetWitness, 2010)，代號 Kneber 的 Botnet
已感染全球 2500 個組織，並超過 7 萬 5 千台電腦受害，但很多組織並不知道自
己已成為 Botnet 的受害者。而在 2011 年時，以 Rove Digital 為首的網路犯罪集
團就利用 Botnet 進行犯罪(Hacquebord, 2011)，而不法所得就高達 1400 萬美元，
而被 Botnet 控制的受害電腦就超過 4 百萬台，並分佈在全球 100 多個國家。 
  我們可以發現，隨著許多新的偵測技術和解決方案出現，仍然無法有效降低
Botnet 所帶來的威脅，以台北市為例，在 2008 年成為亞太地區 Botnet 感染程度
的第一名後，到了 2009 年竟然成為全球 Botnet 感染程度的第一名(Symantec, 
2010)，而台灣在 2010 年成為全球 Botnet 感染的第三名(Symantec, 2011)後，到了
2011 年竟變成全球 Botnet 感染程度的第二名(Symantec, 2012)，因此 Botnet 的威
脅不但沒有獲得改善，情況還在逐漸惡化中，所以我們仍然必須找出有效的方法
解決 Botnet 帶來的資安問題。 
 
二、研究目的 
  Botnet 在進行感染與內部通訊時會透過惡意程式，而惡意程式感染電腦的技
術十分成熟，就算使用者在主機上安裝防毒軟體也難逃被感染的命運，因為惡意
程式可以透過加殼及加花等反防毒的技術欺騙防毒軟體，使惡意程式可以在使用
者電腦上活動而不被發現，甚至還可以控制防毒軟體，關閉防毒軟體的偵測功
能。因此，不論在個人電腦上安裝偵測率多高的防毒軟體，或安裝多有效的資安
工具，只要惡意程式不斷被改良，就有辦法植入到使用者電腦中，並建立起
Botnet。因此我們不會在主機上建立類似防毒軟體的偵測系統做為 Botnet 偵測的
方法，因為在主機上容易被惡意程式影響，而導致錯誤的結果，所以我們使用的
方法以網路分析為基礎，透過每一台電腦使用網路的行為找出 Botnet 成員。 
  一般網路分析的方法往往都會直接以封包內容和網路流量的特徵做分析，但
這些方法主要有一個大問題，就是惡意程式可以容易的改變這些內容和特徵以躲
避偵測系統。像是網路流量特徵，惡意程式作者也可以很輕易的要求惡意程式在
通訊時，使用不同的封包大小，放慢或加快每秒封包傳輸速度等不同的方式進行
通訊；而封包內容部份，就可以透過增加無用字元的方式改變其封包特徵，讓以
封包特徵為基礎的方法必須被迫不斷學習新的特徵，才有辦法正確識別，除此之
Botclient。作者主要使用 Activity Response Detection 和 Protocol Matcher 取
得相關資訊，在透過關聯方式找出結果。 
  在 Botminer 中，作者認為 Botnet 是多個惡意程式協同運作的群組，最大的
特點是 Botclient 與 C&C Server 通訊會和惡意程式的活動很相似。作者主要使用
基於 Snort 的 A-PLANE 找出惡意程式的活動記錄，並用 C-PLANE 對網路流量
進行分析，以得到 C&C Server 通訊的流量記錄，最後以分群的方式各別將這兩
種結果中，相似部份聚集起來，在對這兩個結果互相關聯，作者實作在校園網路
中可偵測到 Botnet，並有很低的誤判。 
  在 Zeng 等人的方法中(2010)，作者使用行為特徵的方式來分析 Botnet，透
過主機資料及網路流量這兩種資訊描繪出整個 Botnet 的行為，在主機資料的分
析中定義了 9 個特徵，而在網路流量分析上中定義了 17 個特徵，整個過程都不
會使用到封包內的 payload 的資料，最後並透過分群的方式將相似行為聚集起來，
在透過互相關聯產生結果，此研究以 6 種 Botnet 做測試，實驗結果顯示有不錯
的表現。 
  在 Zhang 等人的方法中(2010)，作者使用 PSO 為基礎的方式偵測 Botnet，首
先透過 Honeypot 產生資料集，資料集中包含了 SDBot、MyBot、PoeBot、IRCBot
資料，並從網路流量中定義 16 個特徵，接著將不像 Botnet 的資料刪除以減少要
分析的數量，最後以 PSO 以機器學習的方式負責資料訓練與分類，並以 J48 與
BayesNet 兩種分類方法進行比較，可以發現 PSO 有較高的精確度。 
  在 Lu 等學者的方法中(2011)，作者先將應用程式在網路流量記錄的 Payload
轉為特徵，轉換過程以 n-gram 方式為主，Payload 轉換後會有 256 個維度，作者
用這些維度的值來代表不同的應用程式在網路上的特徵，接著在對這些特徵資料
進行分群，最後根據分群的資訊評估是否為 Botnet 應用程式，作者用 IRC Based 
Botnet 的資料集做測試，有得到很高的偵測率和很低的誤判率。 
  在上述文獻中，學者 Gu 需依賴入侵偵測系統所提供的記錄，而且和 Lu 等
人一樣，都需要解開封包的內容來分析是否為惡意行為，但封包分析有三個主要
問題：(1)封包內容會涉及隱私權問題(Zeng et al, 2010)，也會增加計算成本，(2)
除此之外，運作在 Botnet 中的封包內容一但加密後就很難分析，(3)封包內容可
以透過增加無用字元改變這個封包的特徵，因此很難透過分析封包內容的方式找
出可疑的主機。另外 Zeng 等學者所提出的方法都需在主機上安裝程式以收集特
徵，但若是在無法將感應器安裝在電腦的環境中，該方法則無法使用。另外，雖
然 Strayer 與 Zhang 等學者直接使用網路第三層及第四層的流量特徵進行分析，
但惡意程式可輕易的更改特徵，讓學者認為有效的特徵無法辨識新的 Botnet，以
封包大小為例，就可以透過增加無用字元改變實際大小，導致網路流量特徵改變，
除此之外 Strayer 主要是針對 IRC-based Botnet，因此對其他類型的 Botnet 並不適
用，而 Zhang 使用機器學習的方式，因此若沒有學到新的特徵，則無法發現新的
Botnet。 
 
本研究比較如表 3.1，在分析資料來源方面說明如下， 
 應用層的封包內容：從封包的 Payload 取出特徵做為分析用的資料，通常會
透過 Tcpdump 或 Wireshark 等工具進行封包的搜集。 
 網路層與傳輸層的資料：像是網路層的 IP，或是傳輸層的 TCP 及 UDP 所使
用的 Port 資訊，像是 Flow-Based(Brownlee et al, 1999)的資料格式就屬於此
類型資料。 
 主機資料：透過安裝在使用者端的程式，所蒐集而來的相關資訊或記錄。 
 
  
  整個 Botclient 偵測的概念如圖 4.1 所示，我們先根據上述四項特點，從網路
流量資料中取得 3 個行為值，分別為 ActBehavior、FailBehavior、ScanBehavior，
在利用 PSO+K-means 演算法(Merwe et al, 2003)分離出 Botclient 與正常用戶端
(Normal Client)。 
  其中， 
ActBehavior：與所有可疑的外部主機長時間通訊的行為； 
FailBehavior：與所有可疑的外部主機持續產生連線失敗訊息的行為； 
ScanBehavior：疑似掃描的行為； 
 
 
圖 4.1：本方法之概念圖 
 
  完整架構可分為 5 個階段，如圖 4.2 所示，先從網路設備取出流量記錄並存
放於資料庫，在將資料轉換為相關資訊，在從資訊取得特徵，並將特徵集合為
ActBehavior、FailBehavior、ScanBehavior 三個維度，最後以 PSO+K-means 分群
將 Botclient 與正常用戶端(Normal Client)分離出來。 
 
 
圖 4.2：本方法之架構 
 
  這 5 個階段可用層級的概念表示，如表 4.1，每層負責不同的任務。 
 
表 4.1：各層介紹 
名稱 說明 
RawData Layer 儲存網路設備的流量紀錄 
DataProcess Layer 將流量紀錄轉換成相關資訊 
LanIP layer 從資訊中萃取出每個要稽核的 IP 特徵 
Behavior Layer 將相同行為的特徵合併 
Cluster Layer 分離 Botclient 與正常用戶端(Normal Client) 
(6)FailWeight：表達網內 IP(LanIP)到可疑網外非活動 IP(sWanIPFail)之間失敗通
訊的顯著程度，數值越大表示越明顯。 
(7) FailFlow：表達網內 IP(LanIP)到可疑網外非活動 IP(sWanIPFail)的連接失敗次
數，數值越大表示失敗次數越高。 
(8)FailMatch：表達網內 IP(LanIP)連接多個可疑網外非活動 IP(sWanIPFail)的數量，
數值越大表示連接越多。 
(9) NoExist：表達網內 IP(LanIP)連接不存在的私有 IP(Private IP)數量，數值越大
表示連接越多。私有 IP (Private IP)為無法在 Internet 路由的 IP，多用於組織內網
路。管理單位會給用戶端配發私有 IP，因此一個私有 IP 會對應一個用戶端，但
網內 IP(LanIP)有時卻會將訊息傳送到未被分配的私有 IP，而這些未被分配的私
有 IP 實際上並不存在組織網中，因此這些私有 IP 為不存在的私有 IP。 
(10) DPortSum：表達網內 IP(LanIP)使用目地 Port 的數量，數值越大表示使用越
多。 
上述 10個網內 IP(LanIP)之特徵產生後，便可以在Behavior Layer進行相關工作，
相關工作會在 4.4 節中描述。 
 
4.4 合併相同行為之特徵 
  在 4.3 節中的 LanIP Layer 中分別產生了 10 個特徵，這些特徵僅代表數據的
大小，還無法表達所代表的行為，除此之外，若將這些特徵視為維度進行分群，
則會因為維度太多而影響分群結果，因此我們在 Behavior Layer 將相同行為的特
徵合併成一個行為值。 
  行為值用來描述該行為的顯著程度，數值越高表示該行為相對而言越顯著。
將特徵合併成行為值的方法是先將每個特徵的數據視為一個點數，因各特徵有不
同的數據大小，因此先將各特徵透過正規化讓各數據一致，接著在以累積點數的
方式讓屬於相同行為的特徵合併成一個行為值，以下分為 3 個部份做說明。 
 ActBehavior：ActHour、ActRate、ActWeight，這 3 個特徵都是可疑網外活
動 IP(sWanIPAct)連線到網內 IP(LanIP)的時間特徵。在本方法定義的
ActBehavior 行為中，表示與所有可疑的外部主機長時間通訊的行為，因此
我們將這 3 個特徵屬於 ActBehavior 行為。 
 FailBehavior：FailHour、FailRate、FailWeight，這 3 個特徵都是網內 IP(LanIP)
無法連線到可疑網外非活動 IP(sWanIPFail)的時間特徵。在本方法定義的
FailBehavior 行為中，表示與所有可疑的外部主機持續產生連線失敗訊息的
行為，因此我們將這 3 個特徵屬於 FailBehavior 行為。 
 ScanBehavior：正常用戶端僅使用常見的幾個目地 Port，但在 Port 掃描時會
用到大量的目地 Port，因此我們可以透過目地 Port 的使用數量推測用戶端是
否在進行 Port 掃描。因此，我們讓特徵 DPortSum 屬於 ScanBehavior 行為。
正常用戶端僅會對已存在的 IP 進行存取，包括公共 IP (Public IP)與私有 IP 
(Private IP)，當用戶端進行掃描 IP 或掃描 Port 的動作時，會將訊號傳給大
量的主機，其中包括未在線上的主機及根本就不存在的主機，若主機不存在
或未在線上就會回應失敗的訊號，因此透過失敗訊號多寡的觀察，可以知道
用戶端是否有在進行大量掃描的動作，因此我們讓特徵 FailMatch 和特徵
NoExist 屬於 ScanBehavior 行為。 
 
4.5 分離異常資料 
  在 4.4 節中的 Behavior Layer 中產生了 3 個行為值，這 3 個行為值會被視為
3 個維度在 Cluster Layer 中進行相關處理。 
五、實驗結果與結論 
5.1 實驗結果 
  本研究以某學術單位之網路進行分析，首先，我們將網路核心交換器之網路
記錄透過 Cisco NetFlow 協定儲存到流量記錄主機中，該主機會透過轉檔程式將
網路記錄匯入資料庫，之後我們會從中取得 3 個行為值，分別為 ActBehavior、
FailBehavior、ScanBehavior，在利用 PSO+K-means 演算法分離出 Botclient 與正
常用戶端(Normal Client)。透過 PSO+K-means 分群演算法分離出來的結果如圖
5.1，所有的記號 x 都為異常群，每一個記號 x 都表示一個屬於 Botclient 的網內
IP(LanIP)，每一個記號 o 都表示一個屬於正常用戶端的網內 IP(LanIP)。可以發
現正常用戶端分佈較集中且各維度較低，而 Botclient 分佈較稀疏且各維度較高。 
 
圖 5.1：分群結果 
  
 在本方法發現的 Botclient 中，會包含入侵偵測系統發現的異常事件，以及
連接過黑名單的網內 IP(LanIP)，如表 5.1 所示。入侵偵測系統(Intrusion detection 
system，IDS)使用開放原始碼的 Snort(Sourcefire, 2012)，並搭配教育部系統安全
及反駭客控制技術研究計畫的特徵碼(教育部, 2012)，該計劃主要針對 Botnet 行
為及活動製作相關特徵碼；而黑名單則包括 dshield(ISC, 2012)、
infiltrated.net(Oquendo, 2012)、stop-spam 的 SIBL(Stop-Spam, 2012)、MTC 的 C&C 
server list(MTC, 2012)、www.senderbase.org(Cisco, 2012)。以 03/21 為例，我們找
出 509 個 Botclient 中，就有 369 個 Botclient 從入侵偵測系統及黑名單中發現異
常，其中就已經有 173 個 Botclient 也被入侵偵測系統發現有問題，並有 337 個
Botclient 連接過黑名單。 
表 5.1：Botclient 分析 
日期 
被 IDS 發
現的數量 
連接黑名
單的數量 
發現異常的數量 
(IDS 與黑名單) 
本方法找出的
Botclient 數量 
101/03/21 173 337 369 509 
101/03/22 124 371 390 575 
101/03/23 80 440 460 762 
101/03/24 25 115 125 199 
101/03/25 78 247 255 378 
101/03/26 111 381 396 601 
101/03/27 141 557 578 862 
ActBehavior 
FailBehavior ScanBehavior 
 
正常用戶端分佈較
集中且各維度較低 
Botclient 分佈較稀
疏且各維度較高 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。 
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■ 達成目標 
□ 未達成目標（請說明，以 100 字為限） 
□ 實驗失敗 
□ 因故實驗中斷 
□ 其他原因 
說明： 
本計畫依照所提計畫申請書，按照執行進度逐步完成相關之理論建置，並實
作驗證，確認其可行性。藉由個案的分析，驗證此架構之可行性與有效性。 
 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：□已發表 ■未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 □無 
技轉：□已技轉 □洽談中 □無 
其他：（以 100 字為限） 
 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
 
本研究應用過去所建立的資訊科技稽核架構，能夠有效的擷取相關網路存取
資訊，並藉由彈性的架構設計，因此，可以導入 k-means 與 PSO演算法協助
分析殭屍網路的受害主機。 
此架構，可以在不解開封包的內容的情況下，依照存取、使用行為而能夠分
辨出可疑的殭屍網路。透過本研究的案例分析，證實此方法可以有效地找出
受感染電腦，並進一步阻絕。 
相關研究已經完成英文論文撰寫，將投稿於 SCI等級期刊。 
   (如下所附) 
 
 
2 
 
efficiency and the ability of the prediction according to the analysis results. The evaluation results prove 
that the three benefits mentioned above of this mechanism are achievable. 
 The remaining part of this paper is organized as follows. Section 2 reviews the literature related to the 
Botnet detection approaches and applications of PSO + K-means. A Botnet detection mechanism based on 
PSO and K-means clustering is proposed and developed in Section 3. Section 4 uses a case study to 
implement this mechanism and assesses the results of the analysis. Finally, conclusions with some 
suggestions for future studies are provided in the last section. 
 
2. Literature Review 
This section reviews the related studies on Botnet detection and discusses some applications based on 
PSO and K-means algorithm. 
 
2.1 BotNet Detection 
Botnet detection has been a widely-discussed topic in many studies related to network security. The 
researchers proposed different strategies to improve the efficiency and the effectiveness of Botnet detection. 
Strayer et al. (2006) used statistical flow characteristics and supervised classifiers to develop a mechanism 
that examined the flow characteristics to exclude the unlikely traffic flows of Botnet, classify the remaining 
traffic into a group that is likely to be part of a Botnet, and then correlate the potential traffic to speculate 
the most likely activity of Botnet. The results of this study show that the malicious Botnet can be detected 
by finding common IP address endpoint and any evidence of communication between botmaster and the 
C&C server (Strayer et al, 2006). 
The researchers, Gu et al. presented three strategies to detect the potential Botnet infections in network 
traffic and implemented the prototype systems according to the proposed approaches, including BotHunter 
(Gu et al, 2007), BotSniffer(Gu et al, 2008a) and BotMiner (Gu et al, 2008b). BotHunter is designed to 
track the two-way communication flows between internal assets and external entities and to understand the 
life cycle of malware infections through IDS-driven dialog correlation. This system collects the main 
information about malicious behaviors, including scanning, exploits usage, egg downloading through 
SNORT, Statistical payload Anomaly Detection Engine(SLADE) and Statistical sCan Anomaly Detection 
Engine（SCADE）,  then analyzes these correlated behaviors to find out Botnet-infected client hosts. 
Briefly, BotHunter implements an analytical model which can correlate multi-behaviors rather than just 
detect the traffic flows by single characteristic. 
Botsniffer(Gu et al, 2008a) contains two components, i.e., the monitor engine and the correlation 
engine. It examines network traffic, generates connection record of suspicious C&C protocols, and detects 
activity response behavior (e.g., scanning, spamming). For scan activity detection, BotSniffer uses 
approaches similar to SCADE that have developed for BotHunter (Gu et al, 2007). The authors developed 
port-independent protocol matchers to find all suspicious IRC (Internet Relay Chat) and HTTP traffic. 
BotSniffer performs group analysis to capture the information of spatial-temporal correlation in network 
traffic and utilize statistical algorithms to detect suspicious Botnets with high accuracy and have a very low 
false positive rate. 
3 
 
Gu et al (2008b) improved the previous Botnet detection approaches that worked on specific botnet 
command and control (C&C) protocols (e.g., IRC) and structures (e.g., centralized) to present a detection 
framework that is independent of Botnet C&C protocol and structure, clusters similar communication traffic 
and similar malicious traffic, and correlates the two results to identify the hosts that share both similar 
communication patterns and similar malicious activity patterns. The results of this study show that 
BotMiner can detect real-world botnets (IRC-based, HTTP-based, and P2P Botnets including Nugache and 
Storm worm), and has a very low false positive rate. 
Zeng et al (2010) presented a framework that combined both network- and host-level information to 
detect botnets. This approach can detect botnets that appear stealthy in network activities with the assistance 
of host-level information, and extract features from NetFlow data to analyze the similarity or dis-similarity 
of network behavior without inspecting each packet’s payload. This detection relies on the invariant 
properties of botnets’ network and host behaviors, which are independent of the underlying C&C protocol 
so that it can detect both traditional IRC and HTTP and hybrid P2P Botnets. The results show their 
proposed framework can detect different types of Botnets with low false-alarm rates. 
Zhang et al (2010) proposed an approach to Botnet detection based on PSO (Particle Swarm 
Optimization) techniques. The first step is to capture the collection of malware data set through the 
Honeypot system and to classify dada into different types such as SDBot, MyBot, PoeBot, IRCBot, unknow 
bot and the other. The next is to define 16 flow characteristics for each flow in the traffic traces and to 
eliminate traffic flows which are unlikely to be part of Botnet. The last is to perform data training and data 
classification based POS mechanism. To explore the effectiveness of PSO-based classification in 
identifying IRC traffic, this study uses two comparable classification techniques: J48 (i.e. the WEKA 
implementation of C4.5 decision trees) and Bayesian networks. The experimental results show that it 
reaches higher accuracy with PSO mechanism. 
 Lu et al. (2011) proposed a new approach for detecting and clustering Botnet traffic flows on 
large-scale network application communities. This is a hybrid mechanism that conducts two-stage 
classifications. To start with, signatures-based classifier is used to classify the network traffic into different 
applications. The packet payload is classified into 256 dimensions representing the different flow features. 
The unknown flows that cannot be identified by signatures-based classifier are classified again by applying 
a novel decision tree model. The network traffic is clustered based on n-gram features extracted from the 
content of network flows to differentiate the malicious Botnet traffic created by bots from normal traffic on 
each specific application. In summary, this proposed approach can detect two IRC Botnet traffic traces with 
a high detection rate and a acceptable low false alarm rate. 
In summary, Gu et al. (2008b) mainly use the records of the IDS (Intrusion Detection System) and 
analyze the decrypted packet contents to determine the normal and malicious behaviors. However, there 
exist three main problems of analyzing packets. The first, packet contents involve security and privacy 
issues (Zeng et al., 2010), thus, if the contents are directly used to analyze, the cost of calculation will 
increase. The second, it becomes a big challenge to analyze the encrypted packets of Botnet. The third, 
packet features can be easily changed only by adding some useless characters to the contents; therefore, the 
6 
 
detection rate. Edwin Raj et Shalini (2012) proposed an architecture depending on PSO-based IP 
trackbacking. The experimental results showed this approach is successful in prompt detection of Botnets. 
In addition, the PSO schema with K-means algorithm can be used in a face recognition system that can 
accurately identify faces in real time and effectively recognize whether the person's profile is preserved in 
the database, detect and recognize each person's identity when an image contains several people (Pai et al., 
2012). 
General speaking, combing PSO and K-means algorithm obviously improves the efficiency of 
clustering. This study classifies three main network behaviors and extracts the suspicious Botnet clients 
from normal clients based on this hybrid clustering approach to structure a Botnet detection mechanism, 
which is described in the next section. 
 
3. Botnet Detection Mechanism Using PSO+K-means 
 
The architecture of this Botnet detection mechanism is displayed in Figure 3.1 including five layers. 
First, in RawData Layer, network traffic entries are collected from various network devices and stored the 
flow records into a centralized database. Secondly, network flow data are transferred into related 
information in DataProcess Layer. Thirdly, audit-purposed IP features are retrieved from the information in 
LanIP Layer. Fourthly, the similar IP features are formed one type of network behavior and there are three 
types of behaviors can be classified in this mechanism including ActBehavior, FailBehavior and 
ScanBehavior. Lastly, the abnormal client bots (i.e., Botclient) can be detected in Cluster Layer, based on 
the PSO algorithm and K-means clustering method. The details for each step of this Botnet detection 
mechanism are discussed in the sections 3.1 to 3.5. 
 
 
Figure 3.1 Architecture of This Botnet Detection Mechanism 
 
7 
 
Figure 3.2 shows four key characteristics of network behaviors of a Botclient in the network 
communication. 
(1) Communicate for a long time 
The Botclient has the characteristics of keeping a long and active connection to C&C servers for 
getting a new command and then returning Botmaster the current status (Gu et al, 2008). 
(2) Appear the prompt connection error messages continuously 
The Botclient communicates with multi C&C servers that not each connection is active, sometime the 
server(s) may be showdown or off-line so that Botclient connection failure messages would keep 
occurring (Wang et al, 2011; Rostami et al, 2011). 
(3) Expand Botnet scale through malicious scanning 
To expand the Botnet scope, the Botclient locates and attacks the vulnerable hosts by scanning a 
bunch of network servers and installs "backdoors" on them, and then those server hosts may turn into 
members of the Botnet (Gu et al, 2007). 
(4) Communicate only with the unknown servers 
Generally speaking, the Botmaster only communicates with the unknown servers. It is more difficult 
to build a C&C server on the computer with high security control and management, especially for the 
famous companies like Google, Yahoo and etc. On the contrary, the servers with low security control 
are much easier to be invaded and become a C&C Server, such as the vulnerable servers, private 
computers, the unknown server hosts. 
 
Figure 3.2 Behaviors of Botclient in Network Layer 
 
10 
 
Table 3.3 summaries the data of each hour. 
 
Table 3.2 Network Flows of Connection from sWanIPAct1 to LanIP1 
Date/Time Source IP 
(suspicious Wan IP) 
Destination IP 
(Lan IP) 
 
2012-04-29 06:00:18 sWanIPActଵ  LanIPଵ 
}2 flows in period 6 
2012-04-29 06:01:09 sWanIPActଵ  LanIPଵ 
2012-04-29 07:03:03 sWanIPActଵ  LanIPଵ 
}3 flows in period 7 2012-04-29 07:25:24 sWanIPActଵ  LanIPଵ 
2012-04-29 07:56:31 sWanIPActଵ  LanIPଵ 
2012-04-29 09:42:41 sWanIPActଵ  LanIPଵ }1 flow in period 9 
 
Table 3.3 Network Flows per hour from sWanIPAct1 to LanIP1  
Source IP 
(suspicious 
active Wan IP) 
Destination IP 
(Lan IP) 
Network flows per hour (0-23) 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 
sWanIPActଵ  LanIPଵ        2 3  1  
 
 Tables 3.2 and 3.3 show the network flows from single source IP to single destination IP. In practical 
cases, the connections are from multi source IP to multi destination IP. Table 3.4 represents the summary of 
network flows that all suspicious active Wan IP (sWanIPAct) connect to a Lan IP (LanIP). 
 
 Table 3.4 Network Flows from sWanIPAct to LanIP 
Source IP 
(suspicious active 
Wan IP) 
Destination IP 
(Lan IP) 
Network flows per hour (0-23) 
0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 
sWanIPActଵ  LanIPଵ       2 3  1  
sWanIPActଶ  LanIPଵ         2 1 8 6 
sWanIPAct௝ଵ  LanIPଵ        2 3 4  7 3 
sWanIPActଵ  LanIPଶ      1 8 6     
sWanIPActଶ  LanIPଶ       2 5 3    3 2 
sWanIPAct௝ଶ  LanIPଶ       3 1 2    2 
sWanIPActଵ  LanIP௜  1 2 1 3 4 1 2 3 2 1 8 6 4 5 2 3 
sWanIPActଶ  LanIP௜            2 5 3 
sWanIPAct௝௜  LanIP௜             2 
 
11 
 
(2) Calculate the hourly network flows of each day, including that all Lan IP (LanIP) connect to the single 
suspicious inactive Wan IP (sWanIPFail). The data process is similar to that of sWanIPAct2LanIP except 
that the source IP is Lan IP and the destination IP is suspicious inactive Wan IP. First, gather the information 
on three key attributes (source IP, destination IP and destination Port) of network flow records for the 
connection from Lan IP (LanIP) to single suspicious inactive Wan IP (sWanIPFail). Secondly, summarize 
the traffic flows of each hour. In practical cases, the connections are from multi source IP to multi 
destination IP. Therefore, calculate network flows for each hour, including that all Lan IP (LanIP) connect 
to single suspicious inactive Wan IP (sWanIPFail), and define it as “LanIP2sWanIPFail”. 
(3) Sum up daily network flows that all Lan IP (LanIP) connect to all ever-used Destination Port. Firstly, get 
the flow records that the Lan IP (LanIP) connects to single destination Port, shown in Table 3.5. Next, 
summarize the data by source IP, destination IP and distinct destination Port value as Table 3.6 shows. 
Table 3.5 Records of Connection from LanIP1 to IP 1 
Date/Time Source IP 
(Lan IP) 
Destination IP 
(all IP) 
Destination Port 
2012-04-29 06:00:18 LanIPଵ IPଵ TCP80 
2012-04-29 06:01:09 LanIPଵ IPଵ TCP80 
2012-04-29 07:03:03 LanIPଵ IPଵ TCP443 
2012-04-29 07:25:24 LanIPଵ IPଵ TCP80 
2012-04-29 07:56:31 LanIPଵ IPଵ TCP5050 
2012-04-29 09:42:41 LanIPଵ IPଵ TCP80 
 
Table 3.6 Used Destination IP of Connection from Private Network IP1 (LanIP1) to IP 1 
Source IP 
(Lan IP) 
Destination IP 
(all IP) 
Used Destination Port 
LanIPଵ IPଵ  TCP80、TCP443、TCP5050 
 
 Tables 3.5 and 3.6 demonstrate the example record of the communication from single source IP and 
destination IP. In practical cases, the flow entries consist of the connections from all Lan IP (LanIP) to 
single destination Port that the destination IP ever used, and "LanIP2IPPort" is defined for describing this 
information, which is shown in Table 3.7. 
Table 3.7 Used Destination IP of Connection from LanIP to any IP  
Source IP 
(Lan IP) 
Destination IP 
(Any IP) 
Used destination Port 
LanIPଵ IPଵ TCP80、TCP443、TCP5050 
LanIPଵ IPଶ TCP80 
LanIPଵ IP௝ଵ  TCP80、UDP4872、….、UDP5683 
LanIPଶ IPଵ TCP80、TCP25、….、UDP1813 
14 
 
Table 3.10 ActRate Calculation 
Source 
IP 
Destination 
IP 
݂ݎ௜௝  
LanIP௜  sWanIPFailଵ  
଻
ሺሺଽିଵሻାଵሻିଶ
 = ଻
଻
 = 1 
→ 1 = max( 1 , 0.6 , 0.8 ) 
=FailRate௜  
LanIP௜  sWanIPFailଶ  
ଷ
ሺሺଽିସሻାଵሻିଵ
 = ଷ
ହ
 = 0.6 
LanIP௜  sWanIPFailଷ  
ସ
ሺሺଽିସሻାଵሻିଵ
 = ସ
ହ
 = 0.8 
 
 
(3)ActWeight ={	ۯ܋ܜ܅܍ܑ ܏ܐܜ 	૚,	ۯ܋ܜ܅܍ܑ ܏ܐܜ 	૛,…,	ۯ܋ܜ܅܍ܑ ܏ܐܜ 	࢏ }； 
ۯ܋ܜ܅܍ܑ ܏ܐܜ 	࢏=max( ࢇ࢝૚࢏ , ࢇ࢝૛࢏  ,...,	ࢇ࢝࢐࢏  )，the ith feature value of LanIP； 
ࢇ࢝࢐࢏= [݈ ݋ ଵ݃଴(ܽ ௝݄௜ )](	ܽݎ௝௜ )，the weight of time for the connection from the jth suspicious active Wan IP 
(sWanIPAct௝ ) to the ith of Lan IP (LanIP௜) 
(4)FailHour={	۴܉ܑ ܔ ۶ܗܝܚ૚  ,	۴܉ܑ ܔ ۶ܗܝܚ૛  ,…,	۴܉ܑ ܔ ۶ܗܝܚ࢏  } 
۴܉ܑ ܔ ۶ܗܝܚ࢏=max( ࢌࢎ࢏૚, ࢌࢎ࢏૛ ,...,	ࢌࢎ࢏࢐ )，the ith feature value of LanIP； 
ࢌࢎ࢏࢐= the number of hours that the hourly network traffic flows connect from the ith Lan IP (LanIP௜) to 
the jth suspicious inactive Wan IP (sWanIPFail௝ ) to, which is greater than 0 
(5)FailRate ={ ۴ܑ܉ ܔ܀ ܉ܜ܍૚,	۴ܑ܉ ܔ܀ ܉ܜ܍૛ ,…,	۴ܑ܉ ܔ܀ ܉ܜ܍࢏ } 
۴ܑ܉ ܔ܀ ܉ܜ܍࢏=max( ࢌ࢘࢏૚, ࢌ࢘࢏૛ ,...,	ࢌ࢘࢏࢐ )，the ith feature value of LanIP； 
ࢌ࢘࢏࢐	= 
௙௛೔ೕ
൫௘௡ௗ೔ ௦ି௧௔௥௧೔ೕାଵ൯ ௡ି௨௟ ௟ ೔
 ，the ratio of the number of hours of the jth suspicious inactive Wan IP 
(sWanIPFailj) to that of the ith of Lan IP (LanIPi). 
 ࢋ࢔ࢊ࢏ = the last hour of the network activity from the ith Lan IP (LanIP௜) to all suspicious inactive 
Wan IP (sWanIPFail) 
 ࢙࢚ࢇ࢚࢘ ࢏࢐ = the first hour of the network activity from the ith Lan IP (LanIP௜) to the jth suspicious 
inactive Wan IP (sWanIPFail௝) 
 ࢔࢛࢒ ࢒ ࢏࢐ = the number of hours for no flow data after ݏݐ ܽݎ ݐ௜௝between the start and the end of the 
network activities, of which the communication is from the ith Lan IP (LanIP௜) to all suspicious 
inactive Wan IP (sWanIPFail) 
(6)FailWeight = {	۴܉ܑ ܔ ܅܍ܑ ܏ܐܜ ૚ ,	۴܉ܑ ܔ ܅܍ܑ ܏ܐܜ ૛ ,…,	۴܉ܑ ܔ ܅܍ܑ ܏ܐܜ ࢏} 
۴܉ܑ ܔ܅܍ܑ ܏ܐܜ ࢏	= max( ࢌ࢝࢏૚, ࢌ࢝࢏૛ ,...,	ࢌ࢝࢏࢐  )，the ith feature value of LanIP； 
ࢌ࢝࢏࢐=[݈ ݋ ଵ݃଴(݂݄௜௝)](	݂ݎ௜௝)，time weight of connection from from the ith Lan IP (LanIP௜) to the jth 
suspicious inactive Wan IP (sWanIPFail௝)). 
(7)FailFlow={ ۴܉ܑ ܔ ۴ܔ ܗܟ૚ ,	۴܉ܑ ܔ ۴ܔ ܗܟ૛ ,…,	۴ܑ܉ ܔ۴ܔܗܟ ࢏  }； 
۴ܑ܉ ܔ۴ܔܗܟ ࢏=max( ࢌࢌ࢏૚, ࢌࢌ࢏૛ ,...,	ࢌࢌ࢏࢐) , the ith feature value of LanIP； 
ࢌࢌ࢏࢐ ൌ the total number of network flows from the ith Lan IP (LanIP௜) to the jth suspicious inactive Wan 
IP (sWanIPFail௝ ). 
15 
 
(8) FailMatch ={	۴܉ܑ ܔ ۻ܉ܜ ܋ܐ૚,	۴܉ܑ ܔ ۻ܉ܜ ܋ܐ૛ ,…,	۴ܑ܉ ܔۻ ܉ܜ܋ܐ࢏ } 
	۴܉ܑ ܔ ۻ܉ܜ ܋ܐ࢏= the ith feature value of LanIP； 
FailMatch௜= the count of that the ith LAN IP (LanIPi) connecting to suspicious inactive Wan IP 
(sWanIPFail). 
(9) NoExist ={	ۼܗ۳ܠܑ ܛ ܜ૚ ,	ۼܗ۳ܠܑ ܛ ܜ ૛ ,…,	ۼܗ۳ܠܑ ܛ ܜ ࢏  } 
	ۼܗ۳ܠܑ ܛܜ ௜= the ith feature value of LanIP； 
NoExist௜= the count of that the ith Lan IP (LanIPi) connecting to inexistent Lan IP； 
The section 2.2 mentioned that IP refers to all IP addresses. Firstly, the Lan IP addresses are 
selected out from all IP, and then calculating the total number of inexistent Lan IP. 
(10) DPortSum ={	 ۲۾ܗܚ ܜ ܁ܝܕ૚ ,	۲۾ܗܚ ܜ ܁ܝܕ૛ ,…,	۲۾ܗܚ ܜ ܁ܝܕ࢏ } 
	۲۾ܗܚ ܜ ܁ܝܕ࢏=max( ࢉ࢖࢏૚, ࢉ࢖࢏૛ ,...,	ࢉ࢖࢏࢐) ，the ith feature value of LanIP；  
ࢉ࢖࢏࢐ ൌ the count of that the ith Lan IP (LanIPi) connecting to the used destination port of the jth IP 
 
3.4 Combine Same Behavioral features to Form a Single Behavior – Behavior Layer 
The 10 features generated in LanIP Layer cannot represent all behaviors in Figure 2.1 yet. In addition, 
the effect of clustering IP by these features is not efficient. In Behavior Layer, the same feature values 
combined into one behavior. The behavior value is used to measure the significant level of the behavior. 
The higher the value is, the more significant it is. The way to generate the behavior value is firstly to 
normalize each feature value, and then to accumulate the normalized value for each behavior. The details 
are described as follows. 
(1) Assign Relevant Features to a Behavior 
 ActBehavior 
For the connection from the suspicious active WAN IP to LAN IP (LanIP), there are three time feature 
values including ActHour, ActRate and ActWeight. ActBehavior of this mechanism standards for the 
behavior of the long communication with all suspicious outside network hosts; therefore, these 3 feature 
values belong to ActBehavior. 
 FailBehavior 
FailHour, FailRate and FailWeight are the time feature values that the Lan IP (LanIP) failed to connect to 
the suspicious inactive Wan IP (sWanIPFail). FailBehavior of this mechanism is defined as the behavior of 
continuous connection failure with all suspicious outside network servers; therefore, these three feature 
values belong to FailBehavior.  FailFlow is another feature value of FailBehavior, which expresses the 
number of connection failure. As for the successful connection, because it usually focuses on the time and 
not the number of connections, this count feature is ignored in this study. 
 ScanBehavior 
DPortSum, FailMatch and NoExist are the main feature values to ScanBehavior. In normal cases, client host 
only connect to the certain and often used destination port except conducting port scanning; therefore, 
DPortSum can be used to predict the port-scanning behavior according to the total number of used port. The 
left one of Figure 3.7 shows that the normal client can only access to the existent IP. Once the unusual 
scanning behavior occurs, as the right one of Figure 3.7 shows, the client host will send all Wan IP and Lan 
18 
 
 
The flow process of Cluster Layer is described as follows. 
Step1. Normalize each behavior value/dimension of Lan IP according to the Equation 3.1. 
Step2. Decide the number of particles; randomly assign each particle a cluster centroid (particle position) 
and the movement of PSO. 
Step3. Each particle has to： 
(1) Calculate fitness value according to Equation 3.1 
Fitness = 
∑ ቊ
∑ ೏൫೎ೣ, ೗೔൯∀ ೗೔∈ ಲೣ
ೞೣ
ቋ಴ಿసೣభ
஼ே
  Equation 3.2 
Related variables: 
l୧= the vector of the ith Lan IP, l୧	= {lଵ, lଶ, l୧ } 
A୶= all vectors of Lan IP in cluster x 
19 
 
c୶= the vector of cluster center in cluster x 
dሺc୶, l୧ሻ=the	distance	between	c୶  and l୧ 
s୶= the amount of data in cluster x 
CN= the number of clusters 
(2) Update the best value of each particle 
Step4. Assign the best value of each particle with the current fitness value 
Step5. Move the location of the center of each cluster 
Step6. Return to Step 3 and repeat until the end of all procedures 
Step7. Inherit the center of the cluster that generated the best value 
Step8.Assign each Lan IP the the closest cluster center 
Step9. Re-calculate the center of each cluster 
Step10. Return to Step 5 and continue the process until the current cluster center stops at the same position 
of the last center 
Step11. Classify normal-data group and abnormal-data group according to the value of cluster center; 
abnormal one has smaller values (Table 2.25), the Lan IP in abnormal-data group is the Botclient that 
the proposed approach detected 
 
4. Experiments and Evaluations 
This study collects the real-world network traffic traces from a campus network. The network 
architecture is shown in Figure 4.1. The flow records of the core switch are transferred into the server of 
network flows based on the Cisco NetFlow Protocol, and using the conversion programs to import the flow 
records into the database. The spec of the server is shown in Table 4.1 and the network traffic records of 
seven days in Table 4.2. 
The analysis process adopts the network traffic records on March 21, 2012 as an example. This study 
keeps the best fitness value of each generation in the process of PSO (Figure 4.2). The horizontal axis 
represents generation number and the maximum reaches 100 generations; the vertical axis is the fitness 
value (the smaller the better). The optimization process starts to converge from the 30th generation. 
 Figure 4.3 illustrates the data results of three behaviors based on PSO and K-means clustering 
algorithm, which are plotted in 3-dimensional space. The data marked “x” are attributed to an 
abnormal-data group and each of them represents a Lan IP address of Botclient. On the contrary, the data 
marked “o” is a normal-data group, consisting of Lan IP addresses of the general client computers. 
Compared to the normal-data group, the abnormal-data group (i.e., Botclient) has more dimensions and 
distribution of data is more dispersed. 
 
22 
 
 The Botclients uncovered by the proposed mechanism in this study include the abnormal events 
detected by the Intrusion Detection System (IDS) and the Lan IP connecting to the Blacklist (Table 3.10). 
For an example, among the traffic flow records of 3/21, there are 509 Botclients being uncovered, of which 
369 Botclients are successfully detected by the IDS and also have ever connected with the IP in the 
Blacklist. Among 369 Botclients, there are 176 Botclients being detected by the IDS; 143 Botclients having 
ever connected to the Blacklist. 
Table 4.10 Statistics of the Number of Botclients 
 
 
 
 
 
 
 
 
 
Table 4.11 summarizes the top 10 Botclient events occurring from 3/21 to 3/27 and listes separately the 
number of Botclients uncovered by the IDS and by the proposed mechanism. The largest share of all events 
is” ET MALWARE Suspicious User Agent (Autoupdate)”, consisting of 397 Botclients . 
 
Table 4.11 Event Statistics of the Intrusion Detection System 
Event Name count 
ET MALWARE Suspicious User Agent (Autoupdate) 397 
ET MALWARE Suspicious Mozilla User-Agent - Likely Fake (Mozilla/4.0) 137 
ET MALWARE Mozilla User-Agent (Mozilla/5.0) Inbound Likely Fake 93 
ET TROJAN Downadup/Conficker A or B Worm reporting 49 
ET TROJAN IMDDOS Botnet User-Agent STORMDDOS 48 
ET MALWARE User-Agent (User-Agent Mozilla/4.0 (compatible )) 32 
ET MALWARE AskSearch Toolbar Spyware User-Agent (AskTBar) 27 
DNS:tacoda.at.atwola.com, Kaspersky:HEUR:Trojan.Win32.Generic 22 
ET MALWARE Baidu.com Spyware Bar Pulling Data 16 
ET TROJAN Suspicious User Agent Ryeol HTTP Client Class 14 
 
Table 4.12 shows that the top 10 countries have had the connections from these Botclients, of which 
the mainland of China (cn) ranks first of 80.4%, and the United States (us) is in the second place of 17.6%. 
 
 
Date This Mechanism IDS & Blacklist By IDS 
Connecting 
to Blacklist 
101/03/21 509 369 173 337 
101/03/22 575 390 124 371 
101/03/23 762 460 80 440 
101/03/24 199 125 25 115 
101/03/25 378 255 78 247 
101/03/26 601 396 111 381 
101/03/27 862 578 141 557 
23 
 
Table 4.12 Countries of the World in Blacklist 
Country Code Ratio 
cn 80.4% 
us 17.6% 
Other 
ru 0.45% 
tw 0.37% 
kr 0.24% 
my 0.2% 
vg 0.2% 
de 0.16% 
bs 0.12% 
ua 0.12%  
 
4.2 Analysis Results II 
If the detected Btclients based on this mechanism have never been uncovered by the IDS (Intrusion 
Detection System) or have not connected to the Blacklist on that day, they would be detected successively 
the next few day and also build up the connections with the Blacklist. The results are described below. 
The Botclients of 3/21 have yet been located by the other systems, then on the next 6 days: 
On 3/22, 30 Botclients are detected by the IDS, and 59 Botclients connect to the Blacklist. 
On 3/23, 5 Botclients are detected by the IDS, and 18 Botclients connect to the Blacklist. 
On 3/24, 1 Botclients are detected by the IDS, and 3 Botclients connect to the Blacklist. 
On 3/25, 5 Botclients are detected by the IDS, and 10 Botclients connect to the Blacklist. 
On 3/26, 10 Botclients are detected by the IDS, and 15 Botclients connect to the Blacklist. 
On 3/27, 7 Botclients are detected by the IDS, and 21 Botclients connect to the Blacklist. 
The Botclients of 3/22 have yet been located by the other systems, then on the next 5 days:  
On 3/23, 8 Botclients are detected by the IDS, and 42 Botclients connect to the Blacklist. 
On 3/24, 4 Botclients are detected by the IDS, and 4 Botclients connect to the Blacklist. 
On 3/25, 13 Botclients are detected by the IDS, and 15 Botclients connect to the Blacklist. 
On 3/26, 21 Botclients are detected by the IDS, and 34 Botclients connect to the Blacklist. 
On 3/27, 13 Botclients are detected by the IDS, and 32 Botclients connect to the Blacklist. 
The Botclients of 3/23 have yet been located by the other systems, then on the next 4 days: 
On 3/24, 11 Botclients are detected by the IDS, and 34 Botclients connect to the Blacklist. 
On 3/25, 26 Botclients are detected by the IDS, and 60 Botclients connect to the Blacklist. 
On 3/26, 26 Botclients are detected by the IDS, and 119 Botclients connect to the Blacklist. 
On 3/27, 21 Botclients are detected by the IDS, and 94 Botclients connect to the Blacklist. 
The Botclients of 3/24 have yet been located by the other systems, then on the next 3 days: 
On 3/25, 11 Botclients are detected by the IDS, and 10 Botclients connect to the Blacklist. 
On 3/26, 5 Botclients are detected by the IDS, and 24 Botclients connect to the Blacklist. 
80%
18%
2%
cn
us
other
26 
 
References 
 
[1] Acohido, B. & J. Swartz, (2009). Hacker attack takes down Twitter, Facebook, LiveJournal. Retrieved 
from http://www.usatoday.com 
[2] Ahmadyfard, A. H. Modares, (2008). Combining PSO and k-means to Enhance Data Clustering 
Telecommunications, 2008. IST 2008. International Symposium on Aug.: 688-691. 
[3] Al-Hammadi, Y., U. Aickelin & J. Greensmith, (2008). DCA for Bot Detection. IEEE World Congress 
on Computational Intelligence (WCCI 2008), Hong Kong. 
[4] Bergh, F. van den and A.P. Engelbrecht, (2006). A study of particle swarm optimization particle 
trajectories, Information Sciences 176(8) 937–971. 
[5] Benson, S. Edwin Raj & Shalini R., (2012). A Novel Approach for the Early Detection and 
Identification of Botnets. Advanced Materials Research : 403-408(2012) 4469-4475. 
[6] Brownlee, N., C. Mills & G. Ruth, (1999). Traffic Flow Measurement: Architecture. IETF. RFC 2722 
pg. 9-12. 
[7] Carr, J. (2009). Inside Cyber Warfare. Sebastopol: O'Reilly Media. 
[8] Huang, C. T., K. J. Han & J. Perretta, (2011). Automatic Selection of Routers for Placing Early Filters 
of Malicious Traffic. Global Telecommunications Conference 1-5. 
[9] Cui, X. & Potok T.E. (2005). Document Clustering Analysis Based on Hybrid PSO+K-means 
Algorithm. Journal of Computer Sciences (Special Issue), 27-33. 
[10] Du, Z., Y. Wang & Z. Ji, (2008). PK-Means: a new algorithm for gene clustering. Computational 
Biology and Chemistry 32(4) 243–247. 
[11] Eberhart, R. & J. Kennedy, (1995). A new optimizer using particle swarm theory. In Proc. 6th Int. 
Symp. Micromachine Human Sci., Nagoya, Japan, 39–43. 
[12] Geng, G., G. Xu, M. Zhang, Y. Guo, G. Yang & C. Wei, (2012). The Design of SMS Based 
Heterogeneous Mobile Botnet. Journal of Computers, 7(1) 235-243. 
[13] German Honeynet Project. Tracking botnets. http://www.honeynet.org/papers/bots, 2005. 
[14] Eberhart, R.C. & Y. Shi, (1998). Comparison between genetic algorithms and particle swarm 
optimization. Proceedings of the 7th Annual Conference on Evol utionary Programming, 611-619. 
[15] Gu, G., P. Porras, V. Yegneswaran, M. Frog & W. Lee, (2007). BotHunter: Detecting malware 
infection through ids-driven dialog correlation. In Proceedings of the 16th USENIX Security 
Symposium, 167-182. 
[16] Hacquebord, F. (2011). Esthost Taken Down – Biggest Cybercriminal Takedown in History. Retrieved 
from http://www.trendmicro.com 
[17] Hartigan, J. A. & M. A. Wong, (1979) A K-Means clustering algorithm. Journal of the Royal 
Statistical Society Series C, 28(1) 126–130. 
[18] Jain, A. K., (2010). Data Clustering: 50 Years Beyond K-Means. In Pattern Recognition Letters, 31(8) 
651-666. 
[19] Kennedy, J., R. Eberhart & Y. H. Shi, (2001), Swarm Intelligence. Morgan Kaufmann Publishers. 
[20] Kennedy, J. & R. Eberhart, (1995), Particle swarm optimization. In Proc. IEEE Int. Joint Conf. 
Neural Networks, Vol. 4, 1942–1948. 
[21] NetWitness. (2010). NetWitness Discovers Massive ZeuS Compromise. Retrieved from 
http://www.netwitness.com 
[22] Messerschmidt, L. & A. P. Engelbrecht, (2004). Learning to Play Games Using a PSO-Based 
Competitive Learning Approach. IEEE transactions on evolutionary computation, 8(3), 280-288. 
[23] Gu, G., P. Porras, V. Yegneswaran, M. Frog & W. Lee, (2007). BotHunter: Detecting malware 
infection through ids-driven dialog correlation. In Proceedings of the 16th USENIX Security 
Symposium, 167-182. 
[24] Gu, G., J. Zhang & W. Lee, (2008a). BotSniffer: Detecting botnet command and control channels in 
network traffic. In Proceedings of the 15th Annual Network & Distributed System Security 
Symposium (NDSS'08). 
[25] Gu, G., Perdisci, R., Zhang, J., & Lee, W. (2008b). BotMiner: Clustering analysis of network traffic 
for protocol- and structure-independent botnet detection. In Proceedings of the 17th USENIX Security 
Symposium, 139-154. 
[26] Cui, X. & T. E. Potok, (2005). Document Clustering Analysis Based on Hybrid PSO+K-means 
Algorithm. Journal of Computer Sciences (Special Issue): 27-33. 
[27] Lam, Y. K., P. W. M. Tsang & C. S. Leung, (2012). PSO-based K-Means clustering with enhanced 
cluster matching for gene expression data. Neural Computing & Applications , Springer 1-7. 
27 
 
 
[28] Li, Z., Y. Li & L. Xu, (2011). Anomaly Intrusion Detection Method Based on K-means Clustering 
Algorithm with Particle Swarm Optimization. International Conference of Information Technology, 
Computer Engineering and Management Sciences 2(1) 157-161. 
[29] Lin, Y., N. Tong, M. Shi, K. Fan, D. Yuan, L. Qu & Q. Fu, (2012). K-means Optimization Clustering 
Algorithm Based on Particle Swarm Optimization and Multiclass Merging. Advances in CSIE, Vol. 1, 
AISC 168, pp. 569–578. 
[30] Lu, W., Rammidi, G., & Ali A. Ghorbani. (2011). Clustering botnet communication traffic based on 
n-gram feature selection. Journal of Computer Communications, 34( 3) 502-514. 
[31] Merwe, V.D. & A. P. Engelbrecht, (2003). Data Clustering using Particle Swarm Optimization. 
Congress on Evolutionary Computation, 215-220. 
[32] Pai, N. S. & S. P. Chang, (2012). Real-Time Face Recognition System Using an Integrating PSO and 
K-Means Algorithm. Advanced Science Letters: 9(1) 179-184(6). 
[33] Piskac, P. & J. Novotny, (2011). Network Traffic Classification Based on Time Characteristics 
Analysis. Masaryk University Faculty of Informatics, 4-14. 
[34] Rana, S., S. Jasola & R. Kumar, (2010). A hybrid sequential approach for data clustering using 
K-Means and particle swarm optimization algorithm. International Journal of Engineering, Science 
and Technology, 2(6) 167-176. 
[35] Rostami, M.R., B. Shanmugam & N.B. Idris, (2011). Analysis and detection of P2P botnet 
connections based on node behaviour. World Congress on Information and Communication 
Technologies, Dec. 928-933. 
[36] Shi ,Y. & R. Eberhart (1998). A Modified Particle Swarm Optimizer, Evolutionary Computation 
Proceedings, IEEE World Congress on Computational Intelligence, 69-73. 
[37] Sun, J., W. Chen, W. Fang, X. Wun & W. Xu, (2012). Gene expression data analysis with the 
clustering method based on an improved quantum-behaved particle swarm optimization. Engineering 
Applications of Artificial Intelligence 25(2) 376–391. 
[38] Visalakshi, N.K. & K. Thangavel, (2009). Impact of Normalization in Distributed K-Means 
Clustering. International Journal of Soft Computing, 4(4), 168-172. 
[39] Wang, K., C. Y. Huang, S. J. Lin & Y. D. Lin, (2011). A fuzzy pattern-based filtering algorithm for 
botnet detection. Journal of Computer Networks, 55(15), 3275-3286. 
[40] Whitney, L. (2009). Amazon EC2 cloud service hit by botnet, outage. Retrieved from 
http://news.cnet.com 
[41] Zhan, Z.H., J. Zhang, Y. Li & S.H. Chung, (2009), Adaptive Particle Swarm Optimization. IEEE 
transactions on systems, man, and cybernetics—part b: cybernetics, 39(6) 1362-1381. 
[42] Strayer, W.T., R. Walsh, C. Livadas & D. Lapsley, (2006). Detecting Botnets with Tight Command 
and Control. In 31st IEEE Conference on Local Computer Networks, 195-202. 
[43] Zeng, Y., X. Hu & K. G. Shin, (2010). Detection of botnets using combined host- and network-level 
information. Dependable Systems and Networks (DSN), 2010 IEEE/IFIP International Conference on 
June, 291-300. 
[44] Zhang, Y., Y. Wang & L. Qi, (2010). Exploring a swarm intelligence methodology to identify 
command and control flow. IEEE: Advanced Computational Intelligence (IWACI), 2010 Third 
International Workshop on Aug., 318-322. 
 
 
 
 論文被接受發表之大會證明文件 
 
  
Consequently, establishing and maintaining proper business process monitoring is an essential, 
ongoing, and complex process for organizations operating in a 21
st
 century business environment.  
 
This study reports on a mechanism developed to assist audit staff in evaluating potential weaknesses 
and detecting anomalies within an information system. The mechanism was to differentiate each 
related Log according to the transaction codes, and relating primary key and foreign key to arrange 
the sequences for connecting the paths. According to this research, audit staff does not have to 
understand the whole structure of the system and can reduce time for investigation, improve 
efficiency, and identify the problems hidden in the system with ease. 
 
This study discussed how to obtain operation business process for users through analysis of log 
recorded in database, and further conducted difference analysis, comparing it with standard process 
provided by original system, and made auditor understand how users operate information system. 
The remainder of the paper is organized as follows: Section 2 provides background and prior 
studies in the subject area of this research; Section 3 introduces the mechanism as well as how to 
discover business processes from a database log; Section 4, the final section, is comprised of 
conclusions and suggestions for future studies. 
 
2. Background 
2.1 Database Log 
Database Log can record any changes related with the system including transaction and audit log, 
which allows auditor or database administrator to audit the whole system. In this research, the 
authors will capture some information from the database log, such as: LOG ID, Operation, Table, 
Transaction ID, key (primary key), and values; then the log will be combined with the database 
schema to obtain the foreign key value and assist in the analysis of the relevant processes. Table1. 
illustrates the regular column names of Database Log and its definition. 
 
from actions and an initial state (Huff & Lesser, 1989).  All of the aforementioned methods enable 
the general use event log to work in the form of an event stream collected from process execution, 
and ultimately result in the development of a behavioral model of the process (Cook & Wolf , 1996).  
In addition to these methods, there are several other variations that can generate process models, 
such as the use of the finite state machine model to represent the process (Cook & Wolf , 1995; 
Cook & Wolf , 1996), the use of a probabilistic analysis of the event log (Cook & Wolf , 1998), and 
the use of workflow logs (Agrawal et al., 2000).  The latest study in this subject area employed the 
Petri net technique and extracted a process model based on event logs and the use of an algorithm 
(van der Aalst et al., 2008). They have designed several algorithms, such as the α-algorithm, α+ 
algorithm, β-algorithm and heuristic algorithm. Overview the past research, a major problem 
existed, because instead of database logs, the algorithms were focused on the event logs, thus 
resulting in the assumption that the number of present cases and the access order of the cases were 
known.  
 
Based on the above discussion, most of the methods require an event-based model of process 
actions, where events are employed to characterize the dynamic behavior of a process in terms of 
identifiable and instantaneous actions, such as sending a message, starting a transaction, or 
accessing a development tool. The other event attributes that could be applied include the agents, 
resources, and data associated with an event, the return value of a method, and the timing of an 
event (Cook & Wolf, 1999). Many software process methods and tools pre-assume the existence of 
an event log in the application software (Cook & Wolf, 1995; Cook & Wolf , 1999; van der Aalst, 
2004; van der Aalst et al., 2005). Unfortunately, most application software (for example, CRM 
software, and ERP systems such as SAP, Oracle, and Baan) do not collect workflow logs with event 
data. For this reason, use the existing database log to understand the users’ operation process is 
important.  
 
T4 Key4 4001 
21 10:49:55 10:50:31 Insert T5 Key5 5003 
T3 Key3 (null) 
T4 Key4 4002 
22 10:50:43 10:51:03 Insert T5 Key5 5004 
T3 Key3 (null) 
T4 Key4 4003 
 
In table 2, log informaiton contains four tables (T1, T2, T3, T4, and T5). ER model are seen in 
figure 1.  
Table T1
PK Key 1
Table T2
PK Key 2
FK Key 1
Table T3
PK Key 3
FK key 1
Table T4
PK Key 4
FK Key 3
key 2FK
Table T5
PK Key 5
FK Key 3
FK Key 4
 
Figure 1. The ER Model for Simplified Example 
 
Definition 1 (Database Log): A database log includes at least 7 fields:  
L = (LogID, BeginTime, EndTime, Operation, TableName,  
Table (PK value), ForeignTable(FK value) ) 
 
To discover a data flow model on the basis of database log, the log should be analyzed for 
causal dependencies, e.g., if one record is always followed by another record, a causal relationship 
between both of these records is likely. To analyze these relationships we introduce the following 
notations: 
 
Definition 2 (Log-based Ordering Relations): Let a1, a2,.. an, b ∈ PowerSet (L*),  
∃a ∈{a1..an} such that a.BeginTime = MAX{a1.BeginTime .. an.BeginTime} 
 Type 1: (See Figure 2.(a)) 
a.TableName=b.TableName and a.Table.PK.Value=b.Table.PK.Value and a.BeginTime < 
b.BeginTime 
 
 Type 2: (See Figure 2.(b)) 
a.Tablename ≠ b.Tablename and a.Table.PK.Value = b.ReferenceTable.FK.value  
and a.Table.PK ∉ b.ReferenceTable.PK and a.BeginTime < b.BeginTime 
 
Table 3. Generate the Relation from the Database Log 
Log 
ID 
Begin 
Time 
End 
Time 
Operati
on 
Table PK 
PK 
value 
Referen
ce 
Table 
FK 
FK 
value 
relation 
1 
10:21:0
1 
10:23:5
0 
Insert T1 Key1 1001     
2 
10:23:0
5 
10:25:4
0 
Insert T2 Key2 2001 T1 Key1 1001 1 2 
3 
10:24:2
7 
10:25:5
1 
Insert T1 Key1 1002     
4 
10:25:1
1 
10:26:1
3 
Update T1 Key1 1001    1 4 
5 
10:25:4
2 
10:27:5
4 
Update T1 Key1 1002    3 5 
6 
10:26:5
7 
10:28:2
9 
Insert T3 Key3 3001 
T1 Key1 1001 4 6 
T2 Key2 2001 2 6 
7 
10:27:3
3 
10:31:1
5 
Update T2 Key2 2001 T1 Key1 1001 
2 7 
4 7 
8 
10:29:5
1 
10:33:2
9 
Insert T3 Key3 3002 
T1 Key1 1001 4 8 
T2 Key2 2001 7 8 
9 
10:31:2
4 
10:34:4
7 
Insert T3 Key3 3003 
T1 Key1 1001 4 9 
T2 Key2 2001 7 9 
10 
10:31:2
6 
10:33:1
9 
Insert T4 Key4 4001 T3 Key3 3001 6 10 
11 
10:32:3
7 
10:35:3
9 
Update T3 Key3 3002 
T1 Key1 1001 4 11 
T2 Key2 2001 8 11 
12 
10:33:3
9 
10:35:2
9 
Insert T4 Key4 4002 T3 Key3 3002 11 12 
13 
10:34:2
8 
10:36:1
9 
Update T4 Key4 4002 T3 Key3 3002 12 13 
14 
10:34:3
9 
10:36:2
1 
Update T3 Key3 3003 
T1 Key1 1001 4 14 
T2 Key2 2001 9 14 
15 
10:36:3
3 
10:37:2
9 
Update T4 Key4 4003 T3 Key3 3003 14 15 
16 
10: 
40:45 
10:40:4
5 
Update T4 Key4 4002 T4 Key4 4002 13 16 
17 
10:42:4
6 
10:42:5
5 
Update T4 Key4 4003 T4 Key4 4003 15 17 
18 
10:46:5
1 
10:47:2
9 
Insert T3 Key3 3004 
T1 Key1 1002 5 18 
T2 Key2 (null)  
19 10:47:5 10:48:3 Insert T5 Key5 5001 T3 Key3 3004 18 19 
      
         T5
T4T3
T2
T11
2
3
4
5
7 8
9
10
11 12 13
14
16
6
18
19
20
2122
15 17
 
Figure 4. Access Sequence Diagram Group by Table 
 
 
      
         T5
T3
T1
      
         T5
T4T3
T2
T11
2
4 7 8
9
10
11 12 13
14
16
6
20
2122
15 17
18
19
3 5
 
Figure 5. Separate the Access Sequence by different LPath. 
 
Using the LPath generate by our research, we can compare the difference between the database log 
and enterprise business process. In this sample, we can find user is following the enterprise business 
process. The Original business process is shown Figure 6. 
  
Purchase 
Requisition
Purchase Requisition
Table
RFQ
Purchase 
Order
Receipt
Payment
Request for Quotation
Table 
Purchase Order
Table
Receipt
Table
Payment
Table
 
Figure 6. The Business Process about Purchase Cycle. 
 
4. Conclusion 
Although the database only stores the most updated versions of records and does not keep the 
manipulation record, the retention of all business operation trails is essential to auditors, since they 
Garg P. K., Bhansali S. 1992. Process programming by hind-sight. Paper presented at the annual 
meeting of the 14th International Conference on Software Engineering. 
Garg P. K., Jazayeri M., M.L. Creech. 1993. A meta-process for software reuse, process discovery, 
and evolution. Paper presented at the annual meeting of the 6th International Workshop on 
Software Reuse. 
Huff K. E., Lesser V. R. 1989. A plan-based intelligent assistant that supports the software 
development process. Paper presented at the third ACM SIGSOFT/SIGPLAN software 
engineering symposium on Practical software development environments. 
Madhavji N. H., Hoeltje D., Hong W., Bruckhaus T. 1994. A method for eliciting process models. 
Paper presented at the 3rd International Conference on Software Process. 
Motahari-Nezhad H. R., Saint-Paul R., Casati F. and Benatallah B. 2011. Event correlation for 
process discovery from web service interaction logs. The VLDB Journal, 20:417–444. 
Petterson M. 2005. The Keys to Effective IT auditing. Journal of Corporate Accounting & 
Finance, 16(5): 41-46. 
Rozinat A., van der Aalst W. M. P. 2008. Conformance checking of processes based on monitoring 
real behavior. Information Systems, 33(1): 64-95.  
Themistocleous M., Irani Z., O'Keefe R. M., Paul R. 2001. ERP problems and application 
integration issues: an empirical survey. Paper presented at the 34th Annual Hawaii 
International Conference on System Sciences, HICSS. 
van der Aalst W. M. P., Weijters A. J. M. M. 2004. Process mining: a research agenda. Computers 
in Industry, 53: 231–244. 
Alves de Medeiros A. K., Weijters A.J.M.M., and van der Aalst W.M.P. 2006. Genetic process 
mining: a basic approach and its challenges. Paper presented at the 2005 International 
Conference on business process management, BPM. 
Wright S., Wright A. M., Information system assurance for enterprise resource planning systems: 
unique risk considerations. Journal of Information Systems, 16: 99-113. 
 
100 年度專題研究計畫研究成果彙整表 
計畫主持人：李興漢 計畫編號：100-2221-E-036-036- 
計畫名稱：資訊科技稽核架構—應用於殭屍網路偵測 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 1 1 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 1 100% 已經完成論文撰寫，正準備投稿。
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100 字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：□已發表 ■未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 ■洽談中 □無 
其他：（以 100 字為限） 
研究成果已經應用於大學電算中心，作為殭屍網路的偵測使用。 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
Botnet 現在已成為網路安全最大的威脅，Botnet 除了可以發動阻斷服務攻擊癱瘓重要網
站外，也可將受害電腦本身的機密資料偷走，或以釣魚網頁手法騙取他人帳號密碼，發送
大量廣告信、點擊詐欺等網路犯罪，但隨著許多新的偵測技術和解決方案出現，仍然無法
有效降低 Botnet 所帶來的威脅。現今的偵測方法主要是透過分析封包內容與網路流量的
特徵，但這些方法所面臨的問題是 Botnet 可以很容易的改變這些封包內容和流量特徵以
躲避偵測系統，而且還會面臨封包加密及隱私權問題。本研究提出了一個機制，可在封包
加密、封包或流量特徵被改變、不侵犯隱私權的情況下偵測到問題，首先藉由文獻探討與
分析受害電腦在網路的活動找出三項重要的網路行為特徵，分別為長期通訊行為
(ActBehavior)、連線失敗行為(FailBehavior)、網路掃描行為(ScanBehavior)，隨即透
過網路設備從網路層及傳輸層的網路資料中萃取出這些網路行為特徵，這些網路行為在
Botnet 運作產生變化時也不會影響到本方法之偵測效果，接著透過 PSO(Particle Swarm 
Optimization)結合 K-means 演算法尋找組織網路內的 Botnet 成員。本研究以某學術機構
網路作為個案進行分析，結果顯示本方法可以有效達到：(1)找出組織內部網路中 Botnet
的成員；(2)當 Botnet 為了避免被偵測到而對封包加密或改變流量特徵時，仍可以找出
Botnet 成員；(3)在 Botnet 的成員尚未被其他資安系統偵測到時，可以提早發現。由於本
方法只使用網路流量進行分析，而且不會侵犯隱私權問題，也不需在使用者電腦安裝程
式，因此很適合應用在宿舍網路、電信業者提供給家庭用戶的網路、手機使用的 3G 網路
