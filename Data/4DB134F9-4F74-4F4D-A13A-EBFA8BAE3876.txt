???????????????????? – ????? 
????????(2/3) 
Emerging EDA Technologies beyond DSM Era – Sub-Project 3? 
Silicon Debug for Hard-Corner Design Errors 
????: NSC97-2220-E-009-034 
????: 98 ? 8 ? 1 ? ? 99 ? 7 ? 31 ? 
???: ??? ??????????? 
?????: ??? ????????????? 
 
??? ???? 
    ????????????????????????????
??????????????????????????????
??????????????????????????????
??????????????????????????????
?????????????????????????????? 
    ????????????????????????????
??????????????????????????????
??????????????????????????????
???????????????????? ?????????
?????????????? 
    ????????????????????????????
??????????????????????????????
?????????????????????????????
??????????????????????????????
?? minimum feedback vertex set ??????????????
NP-complete ????????????????? s9234 ????
????????? 97%???????????? 32?????
?????????? s13207???????? 50%???????
??????????????????????????????
??????????????????????????????
????????????????????????? 
??? ??????? 
Trace-buffer selection for silicon debug 
  To observe the faulty signal as soon as possible, we have to not only 
choose the correct flip flop but also minimize the number of flip flop to 
reduce the cost of trace buffers. Every design could be represented as 
following: 
 
 
 
 
 
 
 
 
 
 
  If the faulty signals propagate to the output, it is obviously the output 
could be observed at each clock cycle. But if the faulty signals only 
propagate to the flip flops, these faulty signals could not be observed at 
the first faulty cycle, and these faulty signals even loop for ten or hundred 
cycles before it can be observed at outputs. 
  The trace buffer is a set of memories on the chip. With a small part of 
the combination driven circuit, the trace buffer can save the status of 
internal signals until it is full. The status of internal signals has much help 
for failure analysis. According the information, we can identify the faulty 
cycle more accurately and reduce the faulty candidates and the time of 
debugging. Thus, the signals we choose are very important. In this project, 
we only choose the signals from flip flops, which is called observation 
flip flops, because the number of flip flop is much less than the 
combinational circuit and we can infer more signals by forward or 
backward implications from these observation flip flops. 
 
Fig. 1 
The minimum feedback vertex set problem is a well-known problem. 
In the mathematical discipline of graph theory, a feedback vertex set of 
a graph is a set of vertices whose removal leaves a graph without cycles. 
The minimum feedback vertex set problem is an NP-complete problem 
in computational complexity theory. If we model the flip flops to be the 
node and each direct path to be the arc in a graph, the trace-buffer 
selection problem is the same and can be model to the MFVS problem. 
For our trace-buffer selection problem, if we can remove all the cycles 
formed by flip flops in the design, the design could be decomposed into 
acyclic combinational circuit, and the maximum cycle we observe a 
faulty signal is the longest path of the new circuit. 
  Because MFVS problem is NP-complete, we propose some heuristic 
method to break the loops. 
 
 
 
 
 
 
 
  The first assumption is that once the node has no input or output as the 
node A in Fig. 3(a), the node A could be eliminated and the new figure is 
shown as Fig. 3(b). The assumption is trivial because the node with no 
input or output cannot break any loop and can be removed from the 
candidate set of observation flip flops. 
  The second assumption is the extension of first one. If a node with only 
one input/output as the node B in Fig. 4(a), the node could be merged into 
it input/output to reduce the number of nodes for further selection. From 
Fig. 4(a), we can observe that node B has only one input from node A. It 
means whether we choose node A or node B to be observation flip flop, 
we can all observe the faulty signal in cycle N or cycle N+1. For this 
   
(a)                   (b) 
Fig. 3 
Experimental results: 
We test our method on ISCAS89 circuits and show three results as 
following: 
Circuit FFs FF coverage (%) Size of SW Run time (sec) 
s9234 8 77.73 5.1 0.22 
16 87.68 4.9 0.23 
32 97.16 4.8 0.26 
s13207 8 45.44 13.82 1.21 
16 55.46 12.91 1.45 
32 64.28 12.52 2.39 
s15804 8 58.46 6.33 112.04 
16 70.35 6.54 111.98 
32 75.71 6.20 114.98 
 Table 1 
  The first column of Table 1 is the name of circuits. The second column 
is the number of flip flop we pick up. The third column is the flip flop 
coverage of total flip flop. The forth column is the size of SW (suspect 
window), and it means that once we find an error signal at cycle N, the 
real fault must can be found between cycle N-SW and cycle N. The last 
column is the run time of our program. 
  According to Table 1, we can find that the more FFs we pick up, the 
more coverage we have, and the size of suspect window will be less. The 
number of FFs and the coverage rate will be different dependent on 
designs. For example, we can get 97.16% coverage with 32 FFs at s9234, 
but we only get 64.28% coverage with the same number of FFs at s13207. 
The size of suspect windows shows that, after picking the target FFs, we 
can observe the faulty signals at target FFs or outputs in 5 cycles for 
s9234, and the run time is acceptable for all these circuits. 
 
 
 
