	 一、  中英文摘要: 
中文摘要：  
 子計畫二的目標為研究、設計、與開發提供多媒體系統在異質多核心（虛擬）平台
上具有高移植性、且高效能的即時執行環境，這個環境稱為 Moviola。 Moviola 系統包
含在微處理器上執行的微核心作業系統、在數位訊號處理器上的奈米核心作業系統、以
及一個整合的虛擬化環境。這個整合的虛擬化環境提供在虛擬平台上的作業系統以及使
用者應用程式一個具有高移植性且高效能的執行環境，當 Moviola 所安裝的（虛擬）平
台改變，其上所執行的作業系統與使用者應用程式並不需要重新設計與開發。多媒體系
統的順利執行對於計算能力與資料傳輸的頻寬都有相當高的要求，而多核心平台提供多
媒體系統的針對函數功能或資料進行分割而後進行平行處理的高效能平台，因此可提高
系統的資料處理量(throughput)、並提昇使用者對系統效能的觀感。然而，如何管理多核
心平台、尤其是異質多核心平台的資源以及如何降低系統開發者移植系統至不同多核心
平台的困難度則是多核心平台的兩大挑戰。因此，在這個子計畫中，我們將設計與開發
管理微處理器以及數位訊號處理器資源的微核心作業系統以及提供高階資源管理與資源
保證的虛擬化技術。本計畫完成的程式碼，將依循開放源碼精神，以開放式架構進行設
計開發，並開放本計畫所完成之原始碼。 
本子計畫與其他子計畫具有高度的互補性與整合性。本子計畫所完成的微核心作業系統
與虛擬化技術將是其他三個子計畫的測試系統，我們也將使用本子計畫所設計的效能量測模
型(benchmark)，提供其他三個子計畫系統效能的資訊。而本子計畫開發過程也將藉由其他
子計畫的虛擬平台進行設計與開發，以縮短開發時程，並減少開發所需的硬體環境。其中，
我們將在開發初期藉由子計畫三的虛擬平台，進行功能驗證，並藉由其快速模擬的特性縮短
開發時程。而子計畫一與四則可提供準確的時序資訊，子計畫一可藉由高階多核心技術，大
幅縮短模擬的時間，使本子計畫在驗證虛擬化計畫的資源管理時可以在短時間內得到準確的
時序資訊。而子計畫四的Sample-Base技術，則可協助本子計畫在進行作業系統核心開發過
程中，提供開機過程中所需的時序資料。 
 
 
二、  報告內容：  
1. Introduction 
我們預計期望在異質多核心的平台上做到兩大目標：物理多核心平台和多核心的
虛擬平台。圖1顯示多核心平台，在這種使用情況下，一個微核心(micro-kernel)上執
行一個微處理核心和奈米核心(nano-kernel)是部署在一個信號處理的核心。微/奈米和
核心 (micro-kernel/nano-kernel)負責管理對核心的資源，包括執行緒排程 (thread 
scheduling)，記憶體管理(memory management)，通信(communication)和中斷處理
(interrupt handling)。接下我們將對微核心與奈米核心的詳細部分做介紹。 
 
2. 微核心(Micro-kernel) 
隨著嵌入式系統的應用日漸複雜，嵌入式作業系統對即時性(Real-time)、安全性
(Security)以及強韌性 (Robust)等要求日益提高。實作虛擬化技術 (Virtualization 
Technique)於嵌入式系統不但能夠提供即時性工作(Real-time Task)的建立，更能夠利
用虛擬化技術的獨立性(Isolation)達到強韌性以及安全性的要求。如下圖，可以看到
應用Virtualization的環境下，由於各系統之間是互相獨立，所以能夠保證系統的強韌
性以及安全性。目前在嵌入式系統上，微核心(µ-kernel)是最廣為使用的虛擬化技術。 
 
由於異質多核心架構在嵌入式系統上的應用蓬勃發展，如何提高嵌入式系統中進
行Inter-Core Communication的效率，以及如何減少發展程式的時間，增加程式可攜性
(Portability)是迫切需要的。本作品提出了一個以虛擬化技術為核心的系統架構
(framework)，並設計一套適合多媒體處理的高效能核心間溝通協定(Inter-Core Process 
Communication, ICPC)。本作品將會實作提出之系統架構，並將ICPC整合於此架構中，
結合微核心之高效能行程間溝通(Inter Process Communication, IPC)，建立起一套完善
的介面供使用者使用，提昇嵌入式系統上核心與核心間溝通的效率和使用介面。下圖
為本作品提出之系統架構整合ICPC示意圖，可以清楚看到在此系統架構中，上層的
Guest OS可以透過IPC & ICPC函式庫溝通。 
 傳送端與接收端都利用中斷機制來告訴對方是否可以接收或傳送資料，並且都使用
共享緩衝區來傳遞資料，這樣情形會導致必須將資料由共享緩衝區複製到自己的輸入或輸
出緩衝區中，無形間造成額外的負擔。另外，也會有多餘的閒置情形發生，所以根據以上
的多媒體特性和傳統通訊協定的缺點，我們設計了三種機制來達到非同步(Asynchronous)
和不需緩衝區 (Un-buffer)的溝通方式，這三種機制分別是Mail Sending、Express 
Transmission和Double Output Buffer，以下即是我們的設計與實作方法。 
Mail Sending 
由觀察的結果可知，多媒體程式有週期性執行的特性，因此不需要使用中斷機制
(interrupt)，這樣可以減少內文切換(Context Switch)時的負擔，因此我們設計了一個
Polling-based Mail Sending機制。當傳送端要傳送資料時，首先會利用此機制來傳送訊
息，只需要如同寄信一般將”可以傳送資料”的訊息送到對方的信箱內，接收端也就像
收信者一樣，定期去檢查信箱即可。 
為了要實作此機制，我們必須保留一塊記憶體空間當作信箱，並設計我們自己的
訊息格式，當傳送端資料準備好要傳送時，將會發出含有”Data Ready”的訊息至接收
端的信箱內，接收端去檢查信箱時就可知道要接收的資料已經準備好了。若當接收端
準備好要接收資料，但此時郵箱內並無任何通知郵件，則接收端將會利用持續詢問
(Polling)的方式檢查信箱直到訊息傳至信箱中，此即為我們根據多媒體特性所設計的
Polling-based Mail Sending機制。 
Express Transmission 
第二種機制為Express Transmission，此機制主要是將資料由傳送端的輸出緩衝區
此機制就如同其名稱，每一個子工作將有兩個輸出緩衝區，並且會交互使用這兩
個緩衝區。當有不同緩衝區可以放不同的輸出資料時，傳送端就可以不必等待接收端
完成資料複製，因為其可將產生的資料放入另一個緩衝區內也可以避免複製錯誤的資
料，在這同時也就可以接收其他要傳送給它的資料，如下圖所示： 
 
而此Double Output Buffer也可根據應用程式子工作間處理速率的不同而改變為
Multiple Output Buffer，再加入完這三種機制後，就完成了我們的ICPC設計，我們並
將此通訊協定模組化，提供使用者API以供使用。以下為我們將ICPC模組化後提供予
使用者之API： 
ICPC API 
init_icpc() Initial the ICPC_SM 
request_iobuf() Subtask call this function to request its input 
and output buffers (for subtask which has 
single sender) 
request_miobuf() Subtask call this function to request its input 
and output buffers (for subtask which has 
multiple senders) 
icpc_send() Send to Single or Multiple Receiver 
icpc_receive() Receive from Single-Sender 
icpc_multi_receive() Receiver from Multi-Sender 
icpc_batch_send() Batch Send to Single-Receiver 
 
  
 
3. 奈米核心(Nano-kernel) 
 在此機制中，Memory Manager會將一段連續的記憶體空間分割成數個memory 
pools；每個memory pool有其基本的block大小，並依此大小分割成數個大小相同的blocks。
當使用者想動態地配置記憶體，Memory Manager會分配一些blocks，其總大小恰好滿足使
用者的需求。由於Memory Pool支援一次配置多個blocks，因此需要一個合適的buffer配置
方式來選取連續blocks以滿足需求；我們實作了兩種buffer配置方式：Best Fit與First Fit。 
下圖為buffer配置方式的示意圖，圖中有2段連續空白的blocks，個數分別為4個和3
個。當使用者要求配置3個blocks時，在First Fit方法中，會選擇有連續4個空白blocks的這
一段空間中的前3個block分配給使用者；在Best Fit方法中，會選擇有連續3個空白blocks
的這一段空間分配給使用者。由此可知，Best Fit方法可以減少Memory Pool的fragmentation
問題。 
 
當我們呼叫API如 
 
就會產生總大小為2048 byte、基本block大小為32 byte且採用First Fit的memory pool。如
下圖所示，左邊為為初始化前的記憶體狀態，右邊則為memory pool初始化後的記憶體狀
態。 
 
在Thread Pool實作中，我們將以一個簡單的scenario來加以描述，如下圖所示。 
 
首先假設使用者會在系統上同時執行多個不同的程式(如圖中MPEG, JPEG, H.264 
等三個decoder)，當系統正式開始執行之後，首先，scheduler會將這三個程式中的工作
依照priority的高低順序依序放入queue中。而當thread pool中存在適合執行的thread時
(stack大小符合)，會由此thread接下這個工作；但若thread pool中並無任何適合的thread
或者適合的thread已接下別的工作時，則系統會產生新的thread來處理這個工作。 
另外，系統中還存在著一個monitor thread，當monitor thread發現thread pool中存在
已經time out的thread(一段特定的時間未處理任何工作)，則此monitor thread會將這個
thread從thread pool中移除，以保證thread pool中的thread總數不會無限制的增加。 
下表為Thread Pool設計之API。 
Thread Pool API 
tpool_job_add() Add job to thread pool 
tpool_task_create()  Create thread 
tpool_task_delete() Delete thread 
tpool_task_exit() Exit from working 
thread 
tpool_task_change_prio() Change thread’s priority 
tpool_task_suspend () Suspend a thread 
tpool_task_resume() Resume a thread 
3. 排程器(Scheduler) 
nano-kernel提供了一個排程器，負責分配各個執行緒的執行時間，此排程器
Scheduler API 
sched_scheduler_init() 進行排程器的初始化 
sched_schedule() 進行排程，執行目前系統中優先權最高
的工作 
sched_current_task_remove() 將目前正在執行的工作從就緒佇列
(ready queue)中移除 
sched_task_add() 新增工作到就緒佇列(ready queue)中 
sched_task_remove_from_queue() 從就緒佇列(ready queue)中移除任意工
作 
sched_highest_priority_taskid_get() 獲得目前優先權最高工作的辨識碼
(Task’s ID) 
 
4. 其他  
在nano-kernel的實作上，除了3個主要元件外，另外還有nano-kernel初始化
(Initlization)、中斷處理(Interrupt Handling)、除錯(Debug)以及模組化架構的實作。 
 Kernel初始化 
Kernel初始化的部份會針對硬體裝置、記憶體配置、執行緒資料結構以及排程器
進行初始化的動作，並建立閒置程序(Idle Thread)與使用者建立的處理程序(User 
Thread)，最後開始執行各個程序完成預定的工作。大致的流程如下： 
硬體裝置初始化：初始化計時器、UART以及Interrupt等。 
記憶體配置初始化：劃分出記憶體上面Stack與Heap的區塊，並對其控制區塊進行初
始化。 
執行緒資料結構初始化：建立執行緒的串列，初始化Thread Pool的架構。 
排程器初始化：初始化排程器的結構，選擇排程的Policy。 
建立閒置程序：系統閒置時，需要執行一個閒置程序。此閒置程序必須在Kernel初
始化的過程中建立。 
建立使用者的處理程序：建立所有使用者註冊的處理程序，系統開始執行後會對這
些程序進行排程。 
 由於PAC DSP硬體架構的限制，我們需要使用特別的inline assembly讓PAC DSP
能夠去存取UART硬體的暫存器。下表為UART driver的API。 
UART Driver API 
UART2_putc() Output a character 
UART2_puts() Output a string 
UART2_puthex() Output an integer in the hexadecimal way 
UART2_putln() Output new line 
 模組化架構 
nano-kernel的實作是建立在一個模組化的架構上，期望做到能夠自由的抽換
其中的每個元件。實作上將會藉由一個設定檔來配置和描述系統，指定使用哪些
元件和取消哪些功能，以做到控制程式體積，不浪費嵌入式系統稀少的資源。 
除此之外，模組化架構也提供將整個元件替換成不同的實作版本和加入新的
元件，讓系統更具可擴充性(Scalable)和彈性(flexible)。因此，我們藉由清楚定義
每個元件間互相依賴關係以及彼此的介面(API)，確實依循所定義的標準進行實
作，因此未來在擴充與修改時只需遵守此部份的定義，即可輕易的調整與抽換每
個元件。 
 
4. Conclusion and Future Work 
異質多核心平台架構近年來大量被應用在嵌入式系統上，因此如何設計一個高效能的
核心間通訊協定是十分重要的。另外，隨著嵌入式系統的應用日益複雜，而能夠在嵌入式
系統上提供即時性、安全性等多項優點的虛擬化技術也漸漸受到重視。 
首先，計畫中設計了一個高效能的核心間行程通訊協定(ICPC)，利用Mail Sending、
Express Transmission和Double Output Buffer三種機制，確實的減少在傳統通訊協定中所花
費的多餘時間。由於我們的設計是針對多媒體，所以此方式可以適用於現今大部分多媒體
程式流程，如H.264、MP3等。另外我們也將此ICPC模組化並在 PACDuo 開發板中驗證
其正確性，結果顯示我們所設計的通訊協定遠優於一般傳統的通訊協定。透過模組化，不
僅提供良好的API同時具備了可移植性，使其可相容於我們之後所提出的系統架構中。 
[12] J. W. S. Liu, K. J. Lin, R. Bettati, D. Hull and A. Yu, “Use of imprecise computation to enhance 
dependability of real-time systems,” Foundations of Dependable Computing, Edited by Gary M. 
Koob and Clifford G. Lau, Kluwer Academic Publishers, 1994. 
[13] Liu, J. W. S, K. J. Lin, W. K. Shih, J. Y. Chung, A. Yu, and W. Zhao, “Algorithms for scheduling 
imprecise computations,” IEEE Computer, pp. 58-68, May 1991 
[14] J. Y. Chung, J. W. S. Liu and K. J. Lin, “Scheduling periodic jobs that allows imprecise results,” 
IEEE Transactions of Computers, Vol.19, No.9, pp. 1156-1173, September 1990. 
[15] Shih, C. S. and J. W. S. Liu, “Scheduling state-dependent jobs,” Proceedings of 2002 IEEE 
Symposium on Real-Time Systems, December 2002. 
[16] Shih C. S., J. W. S. Liu and I. Cheong, “Scheduling jobs with multiple feasible intervals,” 
Proceedings of 2003 RTCSA, pp. 213-231, February 2003.  
[17] Kim, K. H., B. Rajkumar, J. Kim, “Imprecise computation grid application model for flexible 
market-based resource allocation,” Proceedings of Sixth IEEE International Symposium on 
Cluster Computing and the Grid (CCGRID'06), 2006. 
[18] Sharma, P. K.,  J. Loyall, R. E. Schantz, J. Ye, P. Manghwani, M. Gillen, and G. T. Heineman, 
“Managing end-to-end QoS in distributed embedded applications,” IEEE Internet Computing, vol. 
10, no. 3, pp. 16-23, May/Jun, 2006. 
[19] Oki, T., S. Inoue, and Y. Kakuda, “An adaptive automobile control system using scheduling by 
imprecise computation and multi-agent-based traffic information exchange and its experimental 
evaluation,” Proceedings of the 4th International Conference on Distributed Computing Systems 
Workshop, 2004. 
[20] M. Amirijoo, “Algorithms for managing real-time data services using imprecise computation,” 
http://www.ida.liu.se/~rtslab/projects/QoSRTDS/  
[21] Card, S. K., T. P. Moran and A. Newell, The psychology of Human-Computer Interactions, 
Hillsdale, N. J., Lawrence Erlbaum Associates.  
[22] K. Crisler, et al., “Considering the User in the Wireless World,” IEEE Communications, 
September 2004.  
[23] Moviola, http://en.wikipedia.org/wiki/Moviola. 
[24] GeForce GTX 295 by nVidia, http://www.nvidia.com/object/product_geforce_gtx_295_us.html. 
[25] Ya-Shu Chen, Chi-Sheng Shih and Tei-Wei Kuo, Dynamic Task Scheduling And Processing 
Element Allocation For Multi- Function SOCs, in Proceedings of 13th IEEE Real-Time and 
Embedded Technology and Applications Symposium, Bellevue, WA, United States, April 3 - 
April 6, 2007. 
[26] Ya-Shu Chen, Nei-Chiung Perng, Chi-Sheng Shih, and Tei-Wei Kuo, Interference Analysis of 
Multiple Critical Paths, ASPICES 2005, Bangalore, India, July 2005. 
[27] Li Chia and Chi-Sheng Shih, Template-based Run-time reconfiguration scheduling for partial 
reconfigurable SoC, in Proceedings of the 13th IEEE International Conference on Embedded and 
Real-Time Computing Systems and Applications (RTCSA 2007), Daegu, Korea, August 21-23, 
2007. 
[28] Cheng-Min Lien, Ya-Shu Chen, Chi-Sheng Shih On-Chip Bus Architecture Optimization for 
Multi-core SoC Systems, Fifth IFIP Workshop on Software Technologies for Future Embedded 
and Ubiquitous Systems (SEUS 2007), Santorini Island, Greece, May 7-8, 2007. 
可供推廣之研發成果資料表 
□ 可申請專利	 	 □ 可技術移轉                                      日期：	 年	 月	 日 
國科會補助計
畫  
計畫名稱： 
計畫主持人：	 	 	 	 	 	 	 	  
計畫編號：	 	 	 	 	 	 	 	 	 	 	 	 	 學門領域： 
技術 /創作名稱   
發明人 /創作人   
中文： 
 
 
（100~500字） 
技術說明  
英文： 
可利用之產業  
及  
可開發之產品  
 
技術特點  
 
推廣及運用的價
值  
 
※ 1.每項研發成果請填寫一式二份，一份隨成果報告送繳本會，一份送	 貴單位研發成果
推廣單位（如技術移轉中心）。 
※ 2.本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。  
※ 3.本表若不敷使用，請自行影印使用。 
misunderstanding of medication directions and making medication schedules more 
tolerant to tardiness and negligence. This paper presents an overview of the 
assumptions, models, architecture and implementation of the system.  
 
This paper describes a system of smart medication dispensers, medication schedule 
managers, and supporting software tools. The system, called iMAT (intelligent 
medication administration tools), targets as users the growing population of elderly 
individuals and people with chronic conditions who are well enough to maintain 
active, independent lifestyles. Such a person may take many prescriptions and over 
the counter (OTC) medications and health supplements at home and work without 
close professional supervision. In subsequent discussions, by a user, we mean such a 
person.  
 
Nowadays, modern drugs can help people conquer previously fatal diseases, control 
debilitating conditions, and maintain wellness and independence well into old age, 
provided that the drugs are taken as directed. Unfortunately, even critically important 
drugs such as those for treatments of hypertension, diabetes, and heart conditions are 
often not taken as directed [1]. The fact is that statistics on health care quality 
continue to show alarmingly rates and serious consequences of preventable 
medication errors [2-6]. Administration errors due to non-compliance to medication 
directions are known to contribute 25 – 40% of all preventable medication errors and 
are the cause of approximately 10 % of hospital admissions and 23% of nursing home 
admissions. The primary goal of iMAT is to prevent administration errors as much as 
possible and when errors occur despite prevention efforts, reduce the adverse effects 
caused by them. iMAT can also help to make sure that interactions among all 
medications of each user and their interactions with food and drink have been 
properly accounted for by the directions for the user.  
 
A look at causes of non-compliance points out that information technology can help 
eliminate many common ones, including misunderstanding of medication directions, 
inability to adhere to complex medication regimens, and inconvenience of rigid 
schedules. iMAT is designed specifically to eliminate these causes. A user of iMAT 
medication dispenser and schedule manager has no need to understand the directions 
of her/his medications. iMAT enables the pharmacist of each user to extract a 
machine readable medication schedule specification (MSS) from the user’s 
prescriptions and OTC directions. Once loaded into an iMAT dispenser or schedule 
manager, the tool automatically generates a medication schedule that meets all the 
constraints specified by the user’s MSS. Based on the schedule, the tool reminds the 
Overall, the three days conference had a very fruitful program and provided the 
attendant great insights. 
 
 
98年度專題研究計畫研究成果彙整表 
計畫主持人：施吉昇 計畫編號：98-2220-E-002-019- 
計畫名稱：在多核平台上之多核虛擬環境研發--子計畫二:異質多核心平台之虛擬化技術研究(1/2) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 200% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 4 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
