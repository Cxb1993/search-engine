applications. It is a common idea to design multiple 
spanning trees with a specific property in the 
underlying graph of a network to serve as a 
broadcasting scheme or a distribution protocol for 
receiving high levels of fault-tolerance and of 
security. To achieve such a goal, the construction of 
independent spanning trees (referred to as ISTs for 
short) has received much attention.  Let $G$ be a 
graph. Two spanning trees in a graph $G$ are said to 
be independent if they are rooted at the same node 
$r$ such that, for each node $v(\ne r)$ in $G$, the 
two different paths from $v$ to $r$, one path in each 
tree, are internally node-disjoint. A set of spanning 
trees of $G$ is independent if they are pairwise 
independent. 
 
 
Recently, hyper-stars were introduced as a 
competitive model of interconnection network for both 
hypercubes and star graphs. The class of folded 
hyper-stars is a strengthened variation of hyper-
stars obtained by adding additional links to connect 
complemented nodes. Both hyper-stars and folded 
hyper-stars have been shown to have lower network 
cost (measured by the product of degree and diameter) 
than hypercubes, folded hypercubes, and other 
variants.  Yang and  Chang[J.-S. Yang and J.-M. 
Chang, Independent spanning trees on folded hyper-
stars, Networks, 56 (2010) 272-281] recently 
presented an algorithm to construct $k+1$ ISTs on a 
regular folded hyper-star $FHS(2k,k)$, where the 
number of ISTs matches the connectivity of 
$FHS(2k,k)$. In this project, we give a new algorithm 
to generate $k+1$ ISTs with a reduced height in each 
tree. 
 
 
Let $T_1,T_2,\ldots,T_k$ be spanning trees in a graph 
$G$. If, for any two vertices $u,v$ of $G$, the paths 
joining $u$ and $v$ on the $k$ trees are mutually 
vertex-disjoint, then $T_1,T_2,\ldots, T_k$ are 
called completely independent spanning trees (CISTs 
Folded Hyper-Stars
Abstract
Fault-tolerant broadcasting and secure message distribution are important issues
for network applications. It is a common idea to design multiple spanning trees with
a specific property in the underlying graph of a network to serve as a broadcasting
scheme or a distribution protocol for receiving high levels of fault-tolerance and of
security. To achieve such a goal, the construction of independent spanning trees
(referred to as ISTs for short) has received much attention. Let G be a graph. Two
spanning trees in a graph G are said to be independent if they are rooted at the
same node r such that, for each node v(6= r) in G, the two different paths from v to
r, one path in each tree, are internally node-disjoint. A set of spanning trees of G
is independent if they are pairwise independent.
Recently, hyper-stars were introduced as a competitive model of interconnection
network for both hypercubes and star graphs. The class of folded hyper-stars is a
strengthened variation of hyper-stars obtained by adding additional links to connect
complemented nodes. Both hyper-stars and folded hyper-stars have been shown to
have lower network cost (measured by the product of degree and diameter) than
hypercubes, folded hypercubes, and other variants. Yang and Chang[J.-S. Yang
and J.-M. Chang, Independent spanning trees on folded hyper-stars, Networks, 56
(2010) 272281] recently presented an algorithm to construct k+ 1 ISTs on a regular
folded hyper-star FHS(2k, k), where the number of ISTs matches the connectivity
of FHS(2k, k). In particular, for k > 4, the constructed k ISTs have height 2k − 2,
and the other one has height k + 1. In this project, we give a new algorithm to
generate k + 1 ISTs with a reduced height in each tree.
Let T1, T2, . . . , Tk be spanning trees in a graph G. If, for any two vertices u, v
of G, the paths joining u and v on the k trees are mutually vertex-disjoint, then
T1, T2, . . . , Tk are called completely independent spanning trees (CISTs for short)
in G. The construction of CISTs can be applied in fault-tolerant broadcasting and
secure message distribution on interconnection networks. Hasunuma first introduced
the concept of CISTs and conjectured that there are k CISTs in any 2k-connected
graph. Although this conjecture was, unfortunately, disproved by Pe´terfalvi recently.
In this project, we show that there are two CISTs in 4-regular chordal rings under
some restricted conditions.
Keyword: folded hyper-stars; chordal rings; independent spanning trees; intercon-
nection networks; internally disjoint paths; fault-tolerant broadcasting;
1 Introduction
Interconnection networks take a key role in parallel computing systems, and such a network
can be represented by a graph G = (V,E), where nodes and edges represent the processors
and the communication links between processors, respectively. It is well-known that the family
Table 1: A list of references of constructing ISTs on interconnection networks.
Interconnection networks Parallelizable Optimal height References
Qn hpercube no yes [40]
yes yes [44,53]
FQn folded hypercube yes no [46]
yes yes [47]
LTQn locally twisted cube yes - [19,30]
no - [31]
TQn twisted cube no - [42]
PQn parity cube no - [43]
CQn crossed cube no - [5, 6]
MQn Mo¨bius cube no - [7]
Sn star graph yes - [38]
FHS(2n, n) folded hyper-star yes - [48]
On odd graph yes yes [26]
En even graph yes yes [27]
G(cdm, d) recursive circulant graph yes - [51,52]
Kmn,mn−1,...,m1 Cartesian product of cliques yes yes [4]
Rmn,mn−1,...,m1 multidimensional torus yes - [41]
Hmn,mn−1,...,m1 hybrid graph yes yes [49]
CR(N, d) chordal ring yes - [24,50]
- unkown
In this project, we show that there are two CISTs in 4-regular chordal rings under some
restricted conditions. Constructing ISTs or CISTs has many applications on interconnection
networks such as fault-tolerant broadcasting and secure message distribution [2, 38, 47]. By
contrast, Hasunuma [18] conjectured that there are k CISTs in any 2k-connected graph and
showed the NP-completeness for determining the existence of two CISTs in an arbitrary graph
G. So far the study related to CISTs has received less attention except for [15–17,35]. Hasunuma
showed that there are k CISTs in the underlying graph of any k-connected line digraph L(G) [18],
there are two CISTs in any 4-connected maximal planar graph [16], and there are two CISTs in
the Cartesian product of any 2-connected graphs [17]. Pai et al. [35] showed that there are bn2 c
CISTs in a complete graph with n(> 4) vertices, there are bn2 c CISTs in a complete bipartite
graph Km,n with m > n > 4, and there are bn1+n22 c CISTs in a complete tripartite graph
Kn3,n2,n1 with n3 > n2 > n1 and n1 +n2 > 4. Recently, Pe´terfalvi [36] gave counterexamples to
disprove Hasunuma’s conjecture. He showed that there exists a k-connected graph which does
not contain two CISTs for each k > 2.
The rest of this project is organized as follows. Section 2 formally gives the definition
of folded hypercubes, Section 3 presents our construction scheme of ISTs. Section 4 shows
completely independent spanning trees in partial chordal rings. The final section contains our
concluding remarks.
2 Folded Hyper-Stars
In this section, we first introduce some notation which will facilitate our discussion. We use
V (G) and E(G) to denote the node set and edge set a graph G, respectively. For each node
x ∈ FHS(2k, k) with binary string x = x1x2 . . . x2k, we define ρi(x) to be the operation that
exchanges x1 with xi provided that 2 6 i 6 2k and xi = x¯1 (i.e., xi is the complement of
3
For instance, consider x = 010110 and y = 000111 in FHS(6, 3), where H0x = {1, 3, 6},
H1x = {2, 4, 5}, H0y = {1, 2, 3}, and H1y = {4, 5, 6}. Clearly, φ(1) = 1, φ(2) = 4, φ(3) = 2,
φ(4) = 5, φ(5) = 6, φ(6) = 3 and φ(∗) = ∗. Thus, if we find a path P : 010101 2−→ 100101 3−→
001101
∗−→ 110010 4−→ 010110 from a node 010101 to x, then we can transform P to a path
Q : 001110
4−→ 101010 2−→ 011010 ∗−→ 100101 5−→ 000111 from a node 001110 to y by applying
the automorphism.
3 Constructing independent spanning trees on FHS(2k, k)
According to Theorem 2, we may consider the node
k︷ ︸︸ ︷
0 · · · 0
k︷ ︸︸ ︷
1 · · · 1 (0k1k for short) as the root of
ISTs for FHS(2k, k). Let J = {k+ 1, k+ 2, . . . , 2k} and suppose that x( 6= 0k1k) ∈ FHS(2k, k)
is any node with binary string x = x1x2 · · ·x2k. Recall that we have defined H0x and H1x to
indicate the sets of positions of x for bit 0 and for bit 1, respectively. We write H0x(i, i
′) =
{j ∈ H0x : i < j 6 i′} and H1x(i, i′) = {j ∈ H1x : i < j 6 i′} to mean the restricted sets
of H0x and H
1
x, respectively. Obviously, |H0x(0, k)| = |H1x(k, 2k)| and |H1x(0, k)| = |H0x(k, 2k)|.
For b ∈ {0, 1}, we let Fb : Hbx(k, 2k) → H b¯x(0, k) be the increasing function that maps every
element of Hbx(k, 2k) onto H
b¯
x(0, k). That is, Fb preserves the related order of elements between
its domain and codomain. According to the parity of x1, we define two functions as follows.
For x1 = 0 (in this case H
1
x(k, 2k) 6= ∅), let next0x(i) be a one-to-one mapping of J ∪ {∗} onto
H1x ∪ {∗} given by
next0x(i) =

minH1x(i, 2k) if i 6= ∗, xi = 1, |H1x(k, 2k)| 6 k/2, and H1x(i, 2k) 6= ∅.
∗ if i 6= ∗, xi = 1, |H1x(k, 2k)| 6 k/2, and H1x(i, 2k) = ∅.
i if i 6= ∗, xi = 1, and |H1x(k, 2k)| > k/2.
F0(minH
0
x(i, 2k)) if i 6= ∗, xi = 0, and H0x(i, 2k) 6= ∅.
F0(minH
0
x(k, 2k)) if i 6= ∗, xi = 0, and H0x(i, 2k) = ∅.
F0(i) if i 6= ∗, xi = 0, and |H0x(k, 2k)| > k/2 + 1.
minH1x(k, 2k) if i = ∗ and |H1x(k, 2k)| 6 k/2.
∗ if i = ∗ and |H1x(k, 2k)| > k/2.
For x1 = 1, let next
1
x(i) be a one-to-one mapping of J ∪ {∗} onto H0x ∪ {∗} given by
next1x(i) =

minH0x(i, 2k) if i 6= ∗, xi = 0, |H0x(k, 2k)| 6= k, and H0x(i, 2k) 6= ∅.
minH0x(k, 2k) if i 6= ∗, xi = 0, |H0x(k, 2k)| 6= k, and H0x(i, 2k) = ∅.
i if i 6= ∗, xi = 0, and |H0x(k, 2k)| = k.
F1(minH
1
x(i, 2k)) if i 6= ∗, xi = 1, |H1x(k, 2k)| 6 k/2, and H1x(i, 2k) 6= ∅.
∗ if i 6= ∗, xi = 1, |H1x(k, 2k)| 6 k/2, and H1x(i, 2k) = ∅.
F1(i) if i 6= ∗, xi = 1, and |H1x(k, 2k)| > k/2.
F1(minH
1
x(k, 2k)) if i = ∗ and 0 6= |H1x(k, 2k)| 6 k/2.
∗ if i = ∗ and (|H1x(k, 2k)| > k/2 or |H1x(k, 2k)| = 0).
For instance, if x = 0101010011, we have H0x = {1, 3, 5, 7, 8} and H1x = {2, 4, 6, 9, 10}. Then,
next0x(6) = 9, next
0
x(7) = F0(8) = 4, next
0
x(8) = F0(7) = 2, next
0
x(9) = 10, next
0
x(10) = ∗,
5
02
3
4
5
6
7
8
9
10
11
12
13
14
15 1
Figure 2: Chordal ring CR(16, 4).
The proof is by constructing two spanning trees, say TB and TR (for blue tree and red tree),
in CR(N, d) for each case j = 0, 1, . . . , 4. Since it is easy to check up with the vertices incident
to edges, we only need to provide the set of edges for describing a spanning tree.
Case j = 0. The constructions are
E(TB) =
 ⋃
i=0,2,...,k−2
Ei(+1)
 ∪
 ⋃
i=0,2,...,k−4
Ei(+d)
 ∪ E−k−2(+d)
and
E(TR) =
 ⋃
i=1,3,...,k−1
Ei(+1)
 ∪
 ⋃
i=1,3,...,k−3
Ei(+d)
 ∪ E−k−1(+d).
In the above constructions of TB and TR, the edge incident to a vertex u ∈ Vi is a forward
edge. Clearly, for each i = 0, 2, . . . , k − 2 (respectively, i = 1, 3, . . . , k − 1), vertices of Vi in TB
(respectively, TR) are connected, and vertices of Vi+1 in TB (respectively, TR) are connected
through a path induced by Vi. Moreover, there is only one edge (i(d−1)+d−2, (i+2)(d−1)) with
hop +d that connects the two groups of vertices Vi and Vi+2 except for i = k− 1 and i = k− 2.
Indeed, for (N−1) ∈ Vk−1, we have (N−1, N−1+d) /∈ E(TR); and for (N−d) ∈ Vk−2, we have
(N − d, 0) /∈ E(TB). This assures that TB and TR are connected and acyclic. Also, it is easy to
verify that |E(TB)| = |E(TR)| = N − 1, E(TB) ∩ E(TR) = ∅ and there is no vertex of degree
two in both TB and TR. Thus, by Corollary ??, TB and TR are two completely independent
spanning trees of CR(N, d). For example, Figure 3 shows a chordal ring CR(20, 6), where the
set of solid lines indicates the edges of TB, and the set of dashed lines indicates the edges of TR.
In the remaining cases, we explicitly describe the sets of E(TB) and E(TR). Also, we omit
the discussion that TB and TR are completely independent spanning trees because all arguments
are similar to case j = 0.
Case j = 1. The constructions are
E(TB)=
 ⋃
i=0,2,...,k−2
Ei(+1)
 ∪
 ⋃
i=0,2,...,k−2
Ei(+d)

7
54
3
2
10
6
7
8
9
14
13
12
11 10
19
18
17
16
15
20
Figure 4: Two completely independent spanning trees in CR(21, 6).
For example, Figure 6 shows a chordal ring CR(23, 6) and two completely independent
spanning trees TB and TR.
Case j = 4. In this case, we adjust the last group as follows:
Vk−1 = {n | i(d− 1) + 2 6 n 6 i(d− 1) + d}
and let Ek−1(h) = {(n, n+ h) |n ∈ Vk−1} for h ∈ {+1,+d}. Then, the constructions are
E(TB) =
 ⋃
i=0,2,...,k−2
Ei(+1)
 ∪
 ⋃
i=0,2,...,k−2
Ei(+d)

∪{(0, N − 1), (N − 2, N − 2− d),
(N − 3, N − 3− d)}
and
E(TR) =
 ⋃
i=1,3,...,k−1
Ei(+1)
 ∪
 ⋃
i=1,3,...,k−1
Ei(+d)

∪{(N − 1, N − 1 + d), (N − 2, N − 2 + d),
(N − 1− d,N − 2− d)}
For example, Figure 7 shows a chordal ring CR(24, 6) and two completely independent
spanning trees TB and TR.
The reason why each group consists of d−1 vertices is every vertex of chordal ring with hop
d. If each group consists of d vertices, then every group cannot be connected together. If each
group consists of d− i(> 2) vertices, then there exists a cycle in every group. 
9
22
5
4
3
2
10
6
7
8
914
13
12 11
10
19
18
17
16
15
21
20
Figure 6: Two completely independent spanning trees in CR(23, 6).
[2] F. Bao, Y. Funyu, Y. Hamada, and Y. Igarashi, Reliable broadcasting and secure distribut-
ing in channel networks, in: Proc. of 3rd International Symposium on Parallel Architec-
tures, Algorithms and Networks, ISPAN’97, Taipei, December 1997, pp. 472–478.
[3] J.C. Bermond, F. Comellas, and D.F. Hsu, Distributed loop computer networks: a survey,
J. Parallel Distrib. Comput., 24 (1995) 2–10.
[4] X.-B. Chen, Parallel construction of optimal independent spanning trees on Cartesian
product of complete graphs, Inform. Process. Lett., 111 (2011) 235–238.
[5] B. Cheng, J. Fan, X. Jia, and S. Zhang, Independent spanning trees in crossed cubes,
Inform. Sci., 233 (2013) 276-289.
[6] B. Cheng, J. Fan, X. Jia, and J. Wang, Dimension-adjacent trees and parallel construction
of independent spanning trees on crossed cubes, J. Parallel Distrib. Comput., 73 (2013)
641–652.
[7] B. Cheng, J. Fan, X. Jia, S. Zhang, and B. Chen, Constructive algorithm of independent
spanning trees on Mo¨bius cubes, Comput. J., doi: 10.1093/comjnl/bxs123
[8] E. Cheng and L. Lipta´k, Structural properties of hyper-stars, Ars Combinatoria, 80 (2006),
pp. 65–73.
[9] E. Cheng and M. Shah, A strong structural theorem for hyper-stars, Congressus Numer-
antium, 179 (2006), pp. 181–191.
[10] J. Cheriyan and S.N. Maheshwari, Finding nonseparating induced cycles and independent
spanning trees in 3-connected graphs, J. Algorithms, 9 (1988) 507–537.
[11] S. Curran, O. Lee and X. Yu, Finding four independent trees, SIAM J. Comput., 35 (2006)
1023–1058.
[12] D.Z. Du, D.F. Hsu, Q. Li, and J. Xu, A combinational problem related to distributed loop
networks, Networks, 20 (1990) 173–180.
11
[26] J.-S. Kim, H.-O. Lee, E. Cheng, and L. Lipta´k, Optimal independent spanning trees on
odd graphs, J. Supercomputing, 56 (2011) 212–225.
[27] J.-S. Kim, H.-O. Lee, E. Cheng, and L. Lipta´k, Independent spanning trees on even net-
works, Inform. Sci., 181 (2011) 2892–2905.
[28] T.C. Lee and J.P. Hayes, A fault-tolerant communication scheme for hypercube computers,
IEEE Trans. Comput., 41 (1992) 1242–1256.
[29] H.O. Lee, J.S. Kim, E. Oh and H.S. Lim, Hyper-star Graph: a new interconnection network
improving the network cost of the hypercube, Lecture Notes in Computer Science 2510,
Springer, Berlin, 2002, pp. 858–865.
[30] J.-C. Lin, J.-S. Yang, C.-C. Hsu, and J.-M. Chang, Independent spanning trees vs. edge-
disjoint spanning trees in locally twisted cubes, Inform. Process. Lett., 110 (2010) 414–419.
[31] Y-J. Liu, J.K. Lan, W.Y. Chou, and C. Chen, Constructing independent spanning trees
for locally twisted cubes, Theoret. Comput. Sci., 412 (2011) 2237–2252.
[32] K. Miura, S. Nakano, T. Nishizeki, and D. Takahashi, A linear-time algorithm to find four
independent spanning trees in four connected planar graphs, Internat. J. Found. Comput.
Sci., 10 (1999) 195–210.
[33] S. Nagai and S. Nakano, A linear-time algorithm to find independent spanning trees in
maximal planar graphs, IEICE Trans. Fund. Electron. Comm. Comput. Sci., E84-A (2001)
1102-1109.
[34] K. Obokata, Y. Iwasaki, F. Bao and Y. Igarashi, Independent spanning trees of product
graphs and their construction, IEICE Trans. Fund. Electron. Comm. Comput. Sci., E79-A
(1996) 1894–1903.
[35] K.-J. Pai, S.-M. Tang, J.-M. Chang, and J.-S. Yang, Completely independent spanning
trees on complete graphs, complete bipartite graphs and complete tripartite graphs, in:
Proc. Int. Computer Symp. (ICS 2012), Dec. 12-14, Hualien, Taiwan. R.-S. Chang et al.
(Eds.): Advances in Intelligent Systems and Applications Vol. 1, SIST 20, Springer, pp.
107–113.
[36] Pe´terfalvi, F.: Two counterexamples on completely independent spanning trees, Discrete
Mathematics, 312 (2012) 808–810.
[37] P. Ramanathan and K.G. Shin, Reliable broadcast in hypercube multicomputers, IEEE
Trans. Comput., 37 (1988) 1654–1657.
[38] A.A. Rescigno, Vertex-disjoint spanning trees of the star network with applications to
fault-tolerance and security, Inform. Sci., 137 (2001)259–276.
[39] Y. Saad and M.H. Schultz, Topological properties of hypercubes, IEEE Trans. Comput.,
37 (1988) 867–872.
[40] S.-M. Tang, Y.-L. Wang, and Y.-H. Leu, Optimal independent spanning trees on hyper-
cubes, J. Inform. Sci. Eng., 20 (2004) 143–155.
[41] S.-M. Tang, J.-S. Yang, Y.-L. Wang, and J.-M. Chang, Independent spanning trees on
multidimensional torus networks, IEEE Trans. Comput., 59 (2010) 93–102.
13
國科會補助計畫衍生研發成果推廣資料表
日期:2013/10/31
國科會補助計畫
計畫名稱: 折疊超星狀圖
計畫主持人: 楊進雄
計畫編號: 100-2628-E-141-001-MY2 學門領域: 計算機理論與演算法
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
