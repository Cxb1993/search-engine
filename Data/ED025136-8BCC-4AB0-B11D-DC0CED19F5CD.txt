2 
 
的方式去建立完整的測試案例，不免有所疏漏，換句話說，如何達到全自動的 GUI測試，
特別是自動 GUI測試案例的產生，漸受重視[4,5,22,26,27,36,37,42-44]。 
在各種GUI測試的方法中，以FSM (Finite State Machine)為基礎的測試 [36,37,42-44]
是最常見的測試技術。以圖 1的 Word Processor 應用程式為例，我們可以針對 Word 
Processor程式的啟動、輸入文字、存讀檔等行為製作 FSM (見圖 2)，再利用 FSM自動
化地產生測試案例。然而，一個軟體的 GUI往往都很複雜，因此，其對應的 FSM也很
複雜，動輒就是數以百、千計的狀態和狀態轉移。以Word Processor為例，光是針對圖 
1的畫面建立 FSM，就已經需要用到 60個狀態和 242條狀態轉移，更不論還有字型設定、
段落調整、尋找取代對話框等畫面沒有考慮進來。因此，想要建立完整的 FSM，勢必要
付出很多代價。 
 
 
圖 1 RTF Word Processor應用程式 
     
我們發現 FSM 雖然複雜，但是經常可以找到會重複出現的相似子圖，如圖 2中以
虛線框起來的部份，就是兩個幾乎相同的子圖。假設建立一個子圖必須付出 X的成本，
那麼這個例子就需要 2X 的成本。而且，越複雜的 FSM 就會出現越多重複的子圖，如
Word Processor的主畫面實際上是由六個相似子圖組合而成的，因此，本計劃考慮的重
點，是探討如何重複使用(reuse)子圖，避免重製，以降低建構 FSM的成本。 
 
 
圖 2 Word Processor 的部份 FSM 
 
我們提出階層式有限狀態機(Hierarchical Finite State Machine, 簡稱HFSM)為基礎
的測試方法。HFSM 利用可以重複使用的子狀態(superstate)，來建立狀態圖。我們在
HFSM中先使用子狀態描述一份子圖，當遇到其它相似子圖時，就重複使用已建立好的
子狀態去表達。HFSM有兩種重複使用子狀態的機制，第一種機制是組合(composition)，
其使用方式是將數個小的子狀態包裝起來成為單一的子狀態，子狀態可以被引用，並組
4 
 
轉換成一般的 FSM，進行測試案例的自動產生。雖然利用全域變數的概念，可以提高
狀態轉換的描述能力，但是 VFSM的狀態圖仍然沒有解決子圖重複建立的問題。 
L. White [35][43]則是專注在如何簡化 FSM產生測試案例的數量，如前面所述，當
建立好待測程式的 FSM 模型後，測試人員就能很方便又快速的自動產生大量的測試案
例，但是當 FSM很複雜時，所產生的測試案例數量動輒數千個、數萬個以上。因此White
認為，在進行 FSM 的測試案例產生時，應該加入相關的機制，以減少不必要的測試案
例。White所提出的方法著重在找尋 FSM中的強連通 (Strongly connected) 子圖，以及
強連通子圖的結構對稱 (Structural symmetry)，接著找出恰好可以涵蓋這些子圖的測試
案例，就能進行初步也是最重要的測試，最後再進行其他部分的測試。顯而易見地， 
White的方法並不是著重在簡化 FSM本身，而是著重在減少測試案例的數量。 
Belli[36] 提出以 fault model的方式，進行 FSM Model不合法測試案例的測試，因
為就測試的角度來看，在 FSM 中不存在的狀態轉換，也是具有測試效用的，雖然這些
事件也許不會驅動到程式中的功能，或是甚至無法被觸發，但是我們不能保證應該不能
被觸發的事件一定不會被觸發，或是不該驅動程式中的功能就必定不會驅動到某些功
能。Belli雖然從另一個角度提出 FSM的應用，但是卻沒有探討如何化簡 FSM複雜度的
議題。 
Zunliang Yin [25] 提出 Actionable Knowledge Model (簡稱 AKM)，以圖形表示的方式
呈現測試案例，利用 Actionable Knowledge Graph (AKG) 和 Sub-Goals-List (SGL)建立一
個可以二維的方式收集測試案例的機制，事實上 AKM 就是以 FSM 形式來描述測試案
例之間的關係，AKM 的主要用途在於當我們需要修改測試案例時，只需要修改少數幾
個地方，而不用修改每一個測試案例。Yin所提的方法也是另一種 FSM的應用，但是，
他著重於測試案例的維護，而不是 FSM本身的建立或維護問題。 
 
三 階層式有限狀態機(Hierarchical Finite State Machine, HFSM) 
 
對於降低建立 FSM 的複雜度，我們提出一個新的模型，稱為 HFSM (Hierarchical 
FSM)。HFSM 是一個比 FSM 更強力(powerful)的模型。如第一節中所提到的，FSM 中
常會有重複出現的相似子圖，因此我們提出「子狀態」的定義及宣告的機制，當我們遇
到一個新的子圖時，我們可以在 HFSM中宣告該子圖所對應的子狀態。爾後只要再遇到
相同的子圖時，就能直接拿已宣告的子狀態來產生一份實體，而不用再重新建立子圖。
這個觀念就相當於物件導向設計(object-oriented design)的類別(class)，我們對於一群相似
的物件(object)設計出對應的類別，日後若需要其它相似的物件時，我們就能使用這個類
別來表達。 
我們提出組合(composition)和繼承(inheritance)等兩種重複使用的機制，達到化簡
FSM 複雜度的目地。組合是將 FSM 中的子圖包裝成一個子狀態(參考如圖 1及圖 3)，
當有了子狀態後，就能用來表達其它相似的子圖，因此可以化簡 FSM (如圖 4即為圖 1
化簡過後的 HFSM)。組合的機制適用於化簡完全相同的子圖，對於有差異的子圖，HFSM
則是提供繼承的機制來達到重複使用的目的。以子狀態 File Handle(圖 3)為例，子狀態
中有一個輸入事件 File和兩個輸出事件 OpenFile及 SaveFile，我們若考慮將 start，以及
Text typed當成相同的狀態 X封裝於子狀態之中(圖 5)，便會因為兩個區域中有著不同
輸出／輸入事件，導致子狀態無法互相重複利用。 
6 
 
 
 
圖 7 組合 Initial FileHandle及 TextTyped FileHandle 
 
 
圖 8 隱藏圖 7 中兩個子狀態細節後的 HFSM 
 
 
四 GTT：以 HFSM為基礎的 GUI測試工具 
 
本計畫實作出一個可以在 Eclipse 上編輯 HFSM 的 GUI 測試工具，簡稱 GTTlipse 
(GUI Testing Tool on Eclipse)。GTTlipse 包含完整的測試環境及工具，提供視覺化的
HFSM編輯器，可以自動產生測試案例、執行測試、驗證測試結果等。GTTlipse同時整
合 JDT 及 JUnit，讓軟體的開發及測試的過程可以更緊密的結合在一起。以下簡介
GTTlipse的操作介面及使用方式。 
圖 9所示為 GTTlipse的執行畫面，畫面中央是 HFSM的主要編輯區， HFSM以樹
狀結構的方式呈現，除了易於定義子狀態，也更方便表達子狀態間的階層關係。一個完
整的 HFSM樹狀結構依儲存的內容不同，會分別記錄在兩種根節點下，分別是一般狀態
及子狀態這兩種，一般狀態根節點用來儲存已定義的狀態和狀態之間的轉移；而子狀態
根節點則用來儲存子狀態定義，在子狀態根節點有一個特殊的 main子狀態，代表 HFSM
的主要狀態圖，用來實際描述待測程式的 GUI。通常在編輯 main 子狀態圖時，都會大
量重複利用其它已定義的子狀態。表 1說明 HFSM樹狀結構上的各種節點圖示的意義及
功能。 
 
8 
 
 
 
圖 10 將 HFSM轉換成 FSM 
 
五 結論 
 
本計畫提出一個新的 FSM模型，稱為 HFSM(階層式有限狀態機)。HFSM能將 FSM
中重複的部份建立成子狀態，再以組合或繼承的方式重複使用，以完成完整的 FSM，降
低建構 FSM的成本。另外，我們也實作一個以 HFSM為基礎的 GUI測試工具，並整合
至 Eclipse整合開發環境，我們的測試工具提供視覺化的 HFSM編輯器，具有測試案例
產生及執行、驗證測試結果等功能，是一整套完整的 GUI測試工具。未來，我們預定在
更複雜的測試產生演算法以及測試先知等議題上繼續研究，提高 HFSM 在 GUI 測試上
的應用。 
 
六 計畫成果自評 
 
本計劃執行的相當順利，原訂目標皆已達成。本計畫部份研究成果已撰寫成會議論
文，發表於  TCSE’08 (Proceedings of Taiwan Conference on Software Engineering, 
2008)[41] ，另外，期刊論文亦已經在準備中。為了推廣我們的研究成果，我們已經將
計劃的產出以自由軟體的方式釋出於著名的自由軟體網站 SourceForge 
(http://sourceforge.net/projects/gtt/)，希望能將研究成果推廣給不同的使用者。 
 
參考文獻 
[1]  Johan Andersson, Geoff Bache, “The Video Store Revisited Yet Again: Adventures in GUI Acceptance 
Testing,” Lecture Notes in Computer Science, Springer-Verlag Heidelberg, Vol. 3092, 2004. 
[2]  http://www.eclipse-plugins.info/eclipse/index.jsp  
[3]  R.V Binder, “Design for Testability in Object-Oriented Systems,” Communications of the ACM, Volume 
37, No 9, 1994, pp. 87-101. 
[4]  Jessica Chen, Subramaniam, Suganthan, “A GUI Environment to Manipulate FSMs for Testing 
GUI-based Application in Java,” Proc. of the 34th Hawaii International Conference on System Sciences, 
2001. 
[5]  Jessica Chen, “Expressing Graphical User's Input for Test Specifications,” Lecture Notes in Computer 
Science, Springer-Verlag Heidelberg, Vol. 2480, pp. 347, 2002. 
10 
 
[30]  Qing Xie and Atif Memon, Automated Model-Based Testing of Community-Driven Open-Source GUI 
Applications, 22nd International Conference on Software Maintenance (ICSM 2006), Philadelphia, PA, 
USA, Sep. 25-27, 2006. 
[31]  Qing Xie and Atif Memon, Studying the Characteristics of a "Good" GUI Test Suite, 17th International 
Symposium on Software Reliability Engineering (ISSRE 2006), Nov. 6-10, 2006. 
[32]  Qing Xie and Atif M. Memon, Rapid "Crash Testing" for Continuously Evolving GUI-Based Software 
Applications, International Conference on Software Maintenance 2005 (ICSM'05), pp. 473-482, Sept. 
25-30, 2005 
[33]  Scott McMaster and Atif M. Memon, Call Stack Coverage for Test Suite Reduction, Proceedings of the 
17th IEEE International Symposium on Software Reliability Engineering (ISSRE 2006), Raleigh, NC, 
USA, Nov. 6-10 2006. 
[34]  Kai-Yuan Cai, Lei Zhao, Hai Hu, Chang-Hai Jiang: On the Test Case Definition for GUI Testing. Quality 
Software, (QSIC 2005: 19-28), 2005. 
[35]  Lee White and Husain Almezen, Generating Test Cases for GUI Responsibilities Using Complete 
Interaction Sequences, Proceedings of the International Symposium on Software Reliability Engineering, 
pages 110–121, Oct. 2000. 
[36]  Fevzi Belli, Finite-State Testing of Graphical User Interfaces, Proceedings. 12th International Symposium 
on Software Reliability Engineering (ISSRE 2001), pp.34-43, 2001. 
[37]  Richard K. Shehady and Daniel P. Siewiorek, A Method to Automate User Interface Testing Using 
Variable Finite State Machines, Twenty-Seventh Annual International Symposium on Fault-Tolerant 
Computing (FTCS), pp.80-88, 1997. 
[38]  Lee White, Husain Almezen, and Shivakumar Sastry, Firewall Regression Testing of GUI Sequences and 
their Interactions, Proceedings of the International Conference on Software Maintenance table of contents, 
pp. 398, 2003. 
[39]  Memon, A. M. and Soffa, M. L, Regression testing of GUIs, Proceedings of the 9th European Software 
Engineering Conference Held Jointly with 11th ACM SIGSOFT international Symposium on Foundations 
of Software Engineering, pp. 118-127, 2003. 
[40]  Ana C. R. Paiva, João C. P. Faria, Nikolai Tillmann, and Raul F. A. M. Vidal, A Model-to-implementation 
Mapping Tool for Automated Model-based GUI Testing, ICFEM 2005 - Seventh International Conference 
on Formal Engineering Methods, 2005. 
[41]  Woei-Kae Chen, Hsien-Ta Wu, Jung-Chi Wang, and Zheng-Wen Shen, "An Automatic GUI Testing 
Approach Using Hierarchical Finite State Machine," The Fourth Taiwan Conference on Software 
Engineering (TCSE08), June 13-14, 2008. 
[42]  Shehady Ricard and Siewiorek Daniel, "A Method to Automate User Interface Testing Using Variable 
Finite State Machines," Proc. of the 27th Int. Symposium on Fault Tolerant Computing, Seattle, WA, 
pp80-88, June, 1997 
[43]  Lee White, Husan Almezen, and Nasser Alzeidi, “User-Based Testing of GUI Sequences and Their 
Interaction,” 12th International Symposium on Software Reliability Engineering (ISSRE'01), p. 54. 27-30 
Nov. 2001 
[44]  David LEE, “Principles and methods of testing finite state machines - a survey,” Proceedings of the IEEE, 
Aug 1996 Volume: 84, Issue: 8 pp. 1090-1123 
