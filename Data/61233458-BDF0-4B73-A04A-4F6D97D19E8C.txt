- 2 - 
also called relative differentiated services (relative DiffServ or RDS), which is originally proposed 
in [5] for supporting multi-class or multi-priority services in packet scheduling. The RDS in this 
study we define that the average response time for jobs of a higher priority is not greater than that of 
jobs of the same length but with a lower priority. The response time of a job is composed of job and 
result transmission time, queueing delays on the selected resource, and CPU time of the job on that 
machine. 
The research in [8] defined two classes of service machines: QoS machines and normal machines. 
The QoS machines have a higher power of computation and high-priority jobs are only dispatched 
to this kind of machines. However, the QoS machines can also accept low-priority jobs. The normal 
machines have lower computational capability and only execute low-priority jobs. According to the 
characteristic of machines, such a grid can deliver relative QoS.  
In earlier research [2][3][6], the provision of absolute QoS is mostly achieved with advanced 
resource reservation. Users must specify a deadline for their jobs. The jobs may be rejected because 
the grid system can not find sufficient resources to finish these jobs before their deadlines. Some 
approach [9] provides a negotiation mechanism, but the process is not very simple and convenient 
for users. Besides, some literature [11][12] has pointed out that many factors may lead to the 
reserved resources not used at the specified time period. Therefore, the resource reservation 
mechanism may result in inferior system utilization and also increase queueing delays for the other 
users’ jobs. 
Dong et al. proposed a task scheduling algorithm [4] based on QoS priority grouping and 
deadline. This method must get execution time of all tasks on all machines first and then compute 
their QoS levels. With each job’s QoS level, the algorithm dispatches the job to a suitable machine. 
On each machine, the approach has to optimize the task list in order to achieve minimum 
completion time. The overhead for the estimation of a job’s execution time on all machines and that 
for sorting jobs to get optimal scheduling order are not trivial. The overheads will increase 
significantly as the numbers of grid nodes and jobs increase.  
In [8], Hsu et al. proposed a scheduling method, Makespan Optimization Rescheduling (MOR), 
for delivering QoS and also decreasing the overall execution time without increasing resource need. 
MOR is an extension of QoS guided Min-Min algorithm [7], jobs are divided into two classes: QoS 
and non-QoS. Since MOR is a static scheduling approach, its optimization process is only useful for 
the existing jobs during each scheduling period. 
Most of the aforementioned work has assumed that job execution time is known in advance. 
However, the execution time or CPU time can be estimated only after the target resource is 
determined. In this research, we assume that the job length can be estimated but the actual execution 
time depends on which resource the job is executed. Few of the aforementioned research discussed 
the effect of queueing delay on the whole job completion time. In real world, due to the dynamic 
nature of the Internet, the effect of queueing delay does exist and should be considered.  
- 4 - 
 
Figure 1. Architecture of the proposed DiffServ grid. 
 
When a RM deals with job dispatching, RMx usually communicates with RMx-1 where x is 1 or 2. 
The low-level RM can migrate some jobs to the adjacent high-level RM when the load of high-level 
resources is light. In such a way, both the user’s satisfaction and resource utilization can be 
improved and it possibly introduces more profits. The rules for service charge are not within the 
scope of this study and are left as a future work. 
In order to implement job migration between RMs, we defined the following parameters. RMs of 
class 0 and class 1 will examine the parameters and notify the next low-level RM whether it can 
migrate jobs or not. 
 largeQueJobx: the maximum number selected from the list jobQueued of class x. 
 CxQueUpThreshold: when the number largeQueJobx reaches this value, RMx does not allow 
RMx+1 to migrate jobs. The value of x is either 0 or 1. 
 CxQueDownThreshold: when the number largeQueJobx reaches this value, RMx permits 
RMx+1 to migrate jobs. The value of x is either 0 or 1. Jobs of class 1 or 2 can be at most 
migrated one upper level (i.e., a class-2 job can only be migrated to RM1).  
 MAX_CxQueSize: when the number largeQueJobx reaches this value, RMx will attempt to 
migrate jobs. The value of x is 1 or 2.  
 acceptMigrate: a flag is used to indicate whether RMx can accept job migration now. 
 jobClass: the class of a new job. 
 canMigrate: a flag is used to indicate whether RMx can migrate jobs to RMx-1 now or not. The 
value of canMigrate is set true when RMx receives a notification from RMx-1 that permits RMx 
to migrate jobs. Its value is false when RMx receives a notification (from RMx-1) that does not 
allow RMx to migrate jobs. The value of x is either 1 or 2. 
 
Whenever a job arrives at a RM, the RMx will firstly find the value of largeQueJobx, and then 
follow the rules in Fig.2 to determine whether it can accept job migration from the lower level 
- 6 - 
The operations of selectResource are described in detail as follows: Step 1 is to find the 
minimum number of waiting jobs on all resources of the same class. Step 2 is to pick one from one 
or more resources with the minimum waiting jobs but with the relative maximum computational 
capability. For such a machine, the next job dispatched to that resource will have a high probability 
of being completed soon. Therefore, such a node should be selected with the first priority. Finally, 
Step 3 returns the corresponding resource identifier to the RM for job dispatching. The time 
complexity of selectResource is O(r). 
Fig.5 shows the schematic scheduling architecture after the RM has transferred a job to a grid 
resource. We modified the existing DDRR scheduler and named it as GridDDRR in this model. 
Whenever a job arrives at a resource, the job manager will enqueue the job according to the 
corresponding JA’s identifier. In addition, the job manager simultaneously estimates and saves the 
job’s length in a token and a token queue is established for each JA. The size of each token can be 
fixed and very small. 
The GridDDRR scheduler is deployed in each resource. The GridDDRR makes a scheduling 
decision according to the job length stored in tokens. Because of the SJF and max-min fairness 
features of DDRR, GridDDRR can decrease the average queueing delays and simultaneously 
achieve fairness for jobs from different JAs. 
When a job has been finished at a resource, the result is sent back to RM. The RM is responsible 
for transmitting the job result to JA according to JA’s identifier associated with the job. Finally, after 
the JA receives any returned result, the JA delivers the result to the owner of the job. 
Fig. 6 shows the GridDDRR algorithm, and the used notations are described as follows: 1) si : 
the job length saved in the HOL token of token queue i, where 10 −≤≤ ni ; 2) ci : the value of deficit 
counter of token queue i; The initial value of ci is 0; 3) di : difference of si and ci; 4) α: a very large 
value. The time complexity of GridDDRR is O(n), where n is the number of job agents. 
 
 
 
 
 
 
 
 
Figure 5. Schematic architecture of GridDDRR 
scheduling. 
Algorithm GridDDRR 
Step 1. Calculate di, 0≦i≦n-1. 
(a) di = si – ci   for nonempty queue i, or 
(b) di =α     for empty queue i 
Step 2. Select a queue with the minimum di. 
k = arg min { di , where 0≦i≦n-1 } 
Step 3. Update ci, 0≦i≦n-1.  
(a) ci = ci + dk  for nonempty queue i and i ≠ k, 
or  
(b) ci = 0   for empty queue i or i=k. 
 
Figure 6. Algorithm of GridDDRR scheduling. 
- 8 - 
1000
10000
100000
1 6 11 16 21 26 31
Normalized job length (MI)
A
v
er
ag
e 
qu
eu
ei
n
g 
de
la
y(s
) Class-0 (RR) Class-0 (GDDRR)Class-1 (RR) Class-1 (GDDRR)
Class-2 (RR) Class-2 (GDDRR)
Figure 7. Queueing delay versus job length, λ = 
60. 
10
100
1000
10000
100000
40 45 50 55 60
Load parameter
A
v
er
ag
e 
qu
eu
ei
n
g 
de
la
y(s
)
Class-0 (RR) Class-0 (GDDRR)
Class-1 (RR) Class-1 (GDDRR)
Class-2 (RR) Class-2 (GDDRR)
Figure 8. Comparison of queueing delays with 
RR and GDDRR. 
 
100
1000
10000
100000
40 45 50 55 60
Load parameter
A
v
er
ag
e 
sy
st
em
 
de
la
y(
s)
Class-0 (RR) Class-0 (GDDRR)
Class-1 (RR) Class-1 (GDDRR)
Class-2 (RR) Class-2 (GDDRR)
 
Figure 9. Comparison of system delays with RR 
and GDDRR. 
1
10
100
1000
10000
100000
1000000
1 5 9 13 17 21 25 29
Normalized job length (MI)
A
v
er
ag
e 
sy
st
em
 
de
la
y(
s)
Class-0 (NJM) Class-0 (JM)
Class-1 (NJM) Class-1 (JM)
Class-2 (NJM) Class-2 (JM)
 
Figure 10. Impact of job migration on system 
delay, λ = 60. 
 
Fig. 11 shows the number of jobs dispatched by RM to each resource in one of many 
experiments where job migration is enabled and the job ratios are Z0=20%, Z1=30% and Z2=50%. 
The number of resources of each class is different. Although the jobs executed by the class-i 
resources may come from class i+1, the difference in the number of jobs allocated to each resource 
is still very small. The other experiments have similar results. Therefore, Fig. 11 demonstrates that 
the RMs can achieve load balancing among resources. 
- 10 - 
Journal of Computer Science and Technology, vol. 18, Issue 4, pp.442-451, 2003. 
[8] C.-H. Hsu, J. Zhan, W.-C. Fang, J. Ma, “Towards Improving QoS-Guided Scheduling in Grids,” Proceedings 
of the third ChinaGrid Annual Conference, pp.89 – 95, 20-22 Aug. 2008. 
[9] Chunlin Li, J. X. Zhong, and Layuan Li, “Resource scheduling with conflicting objectives in grid 
environments: Model and evaluation”, Journal of Network and Computer Applications, vol. 32, Issue 3, 
pp.760-769, May 2009. 
[10] Y.-P. Lin, “Scheduling Jobs of Differentiated Services in Computational Grids, unpublished. (A master thesis, 
Department of Computer Science, National Chung Hsing University) 
[11] W. Smith, I. Foster, and V. Taylor, “On scheduling with advanced reservations,” Proceedings of the 14th 
international Parallel and Distributed Processing Symposium, May 2000. 
[12] A. Sulistio and R. Buyya, 2004, “A Grid simulation infrastructure supporting advance reservation,” 
Proceedings of the 16th International Conference on Parallel and Distributed Computing and Systems, 
November 2004. 
[13] C.-C. Wu, H.-M. Wu, and W. Lin, “High-performance packet scheduling to provide relative 
delay differentiation in future high-speed networks,” Computer Communications, vol. 31. Issue 
10, pp.1865-1876, June 2008. 
[14] K. Yamakoshi, E. Oki, and N. Yamanaka, “ Dynamic deficit round-robin scheduler for 5-Tb/s switch using 
wavelength routing,” Proceedings of 2002 Merging Optical and IP Technologies Workshop on High 
Performance Switching and Routing, pp. 204-208, 26-29 May 2002. 
[15] C.-H. Yang, “An Adaptive Hybrid Model for Predicting Run Times of Service-Grid Applications,” 
unpublished. (A master thesis, Department of Computer Science, National Chung Hsing University) 
 
98年度專題研究計畫研究成果彙整表 
計畫主持人：吳晉吉 計畫編號：98-2221-E-252-012- 
計畫名稱：於格網運算環境建構相對差異服務模式之工作排程設計與效能分析研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備註（質化說明：
如數個計畫共同
成果、成果列為
該期刊之封面故
事...等） 
期刊論文 0 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 2 100% 
篇 
TANET 2010 論文集
(1) 吳晉吉 ＇＇
Efficient 
Scheduling 
Delivering 
Differentiated 
Services in a 
Computational 
Grid 
Environment＇＇；
(2) 楊哲璿,吳晉
吉,林偉 ＇＇一個
預測服務格網應用
執行時間的可調適
混合預測模型＇＇
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100% 
兩篇碩士論文(中興
大學資工所) (1)林
鈺 濱  ＇ ＇
Scheduling Jobs of 
Differentiated 
Services in 
Computational 
Grids＇＇ (2)楊哲
璿  ＇ ＇ An 
Adaptive Hybrid 
Model for 
Predicting Run 
Times of 
Service-Grid 
Applications＇＇
國內 
參與計畫人力 
（本國籍） 
博士生 0 0 100% 
人次 
 
 
