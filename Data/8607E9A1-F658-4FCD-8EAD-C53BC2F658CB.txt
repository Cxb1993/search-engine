2 
 
在三維電腦圖學的領域中，一個角色的
動作行為就是一段頁框期間中使用內插的表
現結果，而這些角色是被許多多邊型所包覆，
要控制這些多邊形實為不易，所以便產生了為
角色設立骨架的方法，被稱為內隱方法
(implicit approach) [3][4]，透過角色人物的關
節、骨頭與其週遭的多邊形彼此建立起關聯
性，使用這些關節以及骨頭來調整人物動作並
且設立關鍵頁框，最後再搭配內插方法，即可
讓這個角色做出簡單的動作[5][6][7]。它的好
處是可以讓該人物主角透過骨架事先已與多
邊形定義好的關聯性，在需要即時運算的場景
中使用該動作檔時，可以即時地被產生與場景
互動的運算，而不需要一些事先針對此場景進
行費時的前置處理。但是就算讓一位有豐富經
驗的美術人員來製作一段極為真實的動作，過
程通常是非常費時又浪費勞力。所以現今電腦
娛樂界中，動態動作捕捉器[8][9][10]普遍受到
業界的青睞。雖然動作捕捉器可以透過真人的
行為來捕捉錄製，可以產生人類生活化並且極
為真實的人物動作，但是不同的公司生產的動
態捕捉器，所產生的人物骨架檔案結構彼此不
盡相同，甚至於不同的三維建模軟體所使用的
骨架結構，以及不同的美術人員所習慣設定的
骨架結構也不一定會相同，所以當一個被期待
可重複利用的動作檔被產生時，要指定給不同
的角色骨架，便會造成雙方關節彼此無法對應
的情況發生，更何況是不同動物彼此的動作要
互相轉換。可以想像當我們把ㄧ隻海豚的動作
對應到人類身上，便會發現海豚的鰭沒有可以
被人類所對應的關節，以及人類的雙腳動作也
沒辦法對應到海豚身上。為解決角色雙方骨架
無法對應的問題，以及希望被花費許多時間與
勞力來產生的動作檔可以被多次重複使用，在
三維電腦圖學技術中，便發展出了一個被名為
“動作重置” (motion retargetting)的技術。  
 
 
圖 1.1：多樣性的生物存在於生活當中 
 
如圖 1.1在古代許多神話中，多半以複合
多種生物產生的角色來當作神怪故事的主
角，如希臘神話中的客邁拉(chimera)為古代神
話中的怪獸。最早在希臘詩人荷馬的故事中我
們看到的客邁拉是一種會噴火的怪獸：它由三
部分所構成，它的前段是獅子，尾巴是一條蟒
蛇，身體是山羊。然而這種奇特的生物在現今
的生物演化規範中是不會有這樣的結果存在
的。在充滿驚奇與幻想的動畫領域中，動畫師
的想像力是無窮的，不斷地期望可以設計出多
樣性的主角人物。所以本研究期望能讓不同種
類的生物採用此篇論文提出的階層式演化
(hierarchical evolution, HE)，如圖 1.2能夠產生
出新型的生物。首先選取所要用來演化的生
物，再來利用交配(crossover)的機制，讓兩個
親代的骨架交配產生新的巨集骨架 (meta 
skeleton)，此巨集骨架會同時包含親代雙方的
關節以及骨頭，再針對此巨集骨架產生突變，
之後讓被篩選後產生的骨架對應到親代的骨
架，以產生動作傳遞  (motion transition) 
[11][12]並讓所得到的動作資料透過適應值篩
選，進而完成動作重置的結果。  
 
圖 1.2：使用階層式演化產生新的生物 
 
二、 相關工作 
 由於今日電腦動畫以及遊戲的蓬勃發
展，人物角色設計的多樣性是被高度期待的，
但是設計一個新的人物角色的動作必須耗費
許多時間以及成本。以夢工廠的史瑞克三
(Shrek 3)為例，如圖 2.1他們利用現存的主角
驢子(donkey)以及火龍(dragon)繁衍出了下一
代 dronkey，不過這樣的新角色通常是由動畫
人員重新設計其外表以及動作，如此難免花費
了動畫人員大量的時間進行設計製作。所以一
個能讓已被產生的動作檔可以被重複使用，甚
至被加以修改合成後能產生嶄新動作檔的技
術是被期待和需求的。以下是我們選擇使用動
作重置方法以及階層式演化來進行研究的相
關工作說明。 
4 
 
 
圖 2.4：基因規劃行走路徑 
 
2.2.3  階層式演化法 
本研究考慮了最佳化技術中的全自動計
算以及使用者互動控制兩者的平衡。互動式控
制可以透過一些簡易的選擇來循序式找尋在
審美觀上較符合需求的新型生物骨架，所以本
研究提出的階層式演化規劃了使用者介面，讓
使用者在系統介入產生符合其需求的解，而不
必是系統認定的最佳解，其過程是採用半自動
的運作方式。規劃步驟如圖 2.5所示，此為階
層式演化的演化流程，由圖中可得知選擇
(selection)、交配(crossover)、突變(mutation)
及適應性篩選(survivor)為整個階層式演化的
主要運作中心，不管缺少那一步驟都無法有效
地得知最終解答。 
 
 
圖 2.5：階層式演化流程圖 
 
三、研究方法 
 
3.1 動作重置 
動作重置的方法已經在目前的一些動畫
軟體上如 Maya 被使用了，它可以將 Mocap
的骨架在 Maya中不需要經過 Character set，
即可以讓動作透過骨架來做對應，不過這樣的
骨架仍是支援於相似的骨架結構下，接下來的
章節將就動作重置方法所需要用的定義，以及
最後透過本研究提出的階層式演算法將它實
作出來我們的動作重置方法。一個骨架 sC 被
定 義 為 許 多 關 節 所 組 成 的 集 合 ，
1 1 1( , ,..., , ,... ), {1,...., 1}s i i nC R j j j j i n− −= ∈ −
，共有 n個關節， 0j 為 R代表 root 節點。
( , , , , , )x y z x y zR t t t r r r= 且 ( , , )i x y zj r r r= ，
3( , , )x y zt t t ∈ 代表關節在各自的對應軸移動
的向量， 3( , , )x y zr r r S∈ 代表該關節在各自的對
應軸轉動的向量。每個關節所擁有的自由度
(degrees of freedom, DOFs)會各自不相同，
( ) 6DOFs R = 且 ( ) 3iDOFs j = ，每個動作資
料 ( )mC t 都是參照該關節在頁框 t的幾何座標
包 含 位 移 和 旋 轉 來 做 呈 現 ，
1 1 1( ) ( ( ), ( ),..., ( ), ( ),..., ( )), {0,..., }m i i nC t R t j t j t j t j t t k− −= ∈
共有 k個頁框。當有兩個角色 1C 和 2C ，擁有
不同的骨架結構 1sC 和 2sC 時，由於它們彼此的
骨架結構可能不完全相同，就無法讓兩者的動
作 1mC 和 2mC 做轉換，以讓另一者的骨架能使
用對方的動作檔。所以本研究必須要先找到骨
架的對應，並且讓骨架做初始化，最後再讓動
作做雙方的傳遞。 
當兩個不同骨架架構要彼此建立起關連
性時，是會產生一些問題。會發生有關節找不
到它所應該要對應或是要被對應的部份，這是
因為雙方骨架架構以及關節數目不同的原因
造成。 
 由 Hsieh 在 2005 年發表的論文[16]得
知，這樣關節會產生三種對應上的情況。第一
種為一對一關聯，彼此雙方的關節都能互相完
全對應，並不會有人對應不到或是被多個關節
對應的情形，大部份的情形都是屬於本情況。
第二種為多對一或一對多關聯，會有多個關節
同時對應到同一個關節，如人的雙腳要同時對
應到魚的尾鰭。最後一種為沒有關聯，有關節
找不到可對應的部份，如猴子尾巴的關節沒辦
法對應到人的骨架上。 
解決方法是讓兩者產生出一個結合彼此
關節的骨架，被稱作巨集骨架 sM 。這個 sM 是
屬於 1sC 和 2sC 的聯集， 1 2s s sM C C= ∪ 將會同
時擁有 1sC 和 2sC 雙方的關節，所以不管 1sC 或
是 2sC ，一定都可以在 sM 上找到欲對應的關
節，因此可以透過 sM 來傳送動作，在章節 3.2
此巨集骨架的生成將作為我們階層式演化的
主要基礎發展步驟。 
6 
 
該使用者必須再選取一個親代來執行該
骨架接下來的步驟。例如當使用者選了一個為
翼手龍的角色模型時，如圖 3.4所示。則此翼
手龍的模型即為 2C ，而它所擁有的骨架即是
2
sC 。因此，這兩個骨架就是要執行階層式演
化法所需的開端過程之步驟。 
 
 
圖 3.4： 2sC 骨架載入圖 
 
3.2.2 交配 (Crossover)  
如圖 3.5所示，在不同的骨架中，它們的
骨架架構並不會完全相同。所以我們必須要針
對該架構的異同來做切割和結合。首先針對它
的結構做掃描，找出相同的關節以及不同的關
節，將相同的關節做保留，不同的關節將以切
割，留做最後用來結合。 
 
 
圖 3.5：親代骨架架構分析 
 
 將相同的關節代號合併之後，其餘不同
的關節代號就會附加在此架構的後面，所產生
的新架構即是交配所得的巨集骨架，如圖 3.6
和圖 3.7所示。 
 
 
圖 3.6：巨集骨架的 spine1架構 
 
 
圖 3.7：巨集骨架生成圖 
 
3.2.3 突變 (Mutation) 
讓原本的 sM 綜合了 1sC 和 2sC 之後的巨
集骨架，藉突變將多餘的關節經篩選後做去
除，可以將 sM 從 2sC 將得到的翼手龍翅膀以
及觸角給消去，於是 sM 的軀幹將只保留馬的
結構，在其後要將動作做傳遞時，就不會再將
sM 上所沒有的關節動作傳入。此一步驟為階
層式演化的重點之一，要產生適合的骨架做為
後來的動作傳遞使用。本研究的作法為旋轉弧
度的運算判斷， ( )ij t 記錄了該關節 i在頁框 t
所擁有的旋轉角度。 
由式 (3-2)計算後可得知，由 ( )iX t 和
( 1)iX t − 所 形 成 的 夾 角 ， 將 可 決 定 出
( )iRadian t ，本研究會將這些關節的旋轉角度
蒐集起來使用動作分析(motion analysis)的方
法，利用式(3-3)的標準差公式，來比較所選取
的關節何者變化的變異程度較大。 
 
( , , ) is the normalized direction of the joint 
            : the length of the joint 
            
            
            
        
i i i
i
i
i i
i
i i
i
i i
dirx diry dirz i
length i
x length dirx
y length diry
z length dirz
= ⋅
= ⋅
= ⋅
2 2 2
   ( ( ), ( ), ( )) ( ) ( , , )
            ( ) ( ) ( ) ( )
i i i i i i i
i i i i
x t y t z t j t x y z
X t x t y t z t
= ⋅
= + +
 
( ) ( 1)( )  ,  = frame_no., =joint_no., -1 1| ( )| | ( 1)|
i i
i i
i i
X t X tCos t t i Cos
X t X t
θ θ⋅ −= ≤ ≤
× −
 
1 () ( 1)() ,  = frame_no., =joint_no., : Rotation angle of  the joint | ()| | ( 1)|
                                             () ()180/
i i
i i
i i
i i
X t X t
t Cos t i i
X t X t
Radian t t
θ θ
θ pi
−
⋅ −
=
× −
= ⋅
  (3-2)                         
8 
 
Spine1
Neck1
Head1
Lthigh1
Lthigh2
Lfoot
Rthigh1
Rthigh2
Rknee
Rfoot
0
20
40
60
80
100
120
140
160
180
0 5 10 15 20 25 30
st
a
n
d
a
rd
 d
e
vi
a
ti
o
n
s 
o
f 
th
e
 s
e
co
n
d
 p
a
re
n
t'
s 
jo
in
ts
standard deviations of the first parent's joints
圖3.11：將第三象限投影到第一象限 
 
將經由主成分分析得到的新的標準差資料
取代原本關節上較不一致的標準差資料，在圖
3.12中可以得到 1mC 以及 2mC 動作檔的標準差分
佈情形。圖3.13為未使用PCA的標準差資料，可
以發現明顯不一致，因此使用PCA的資料它的
標準差數值變化較有差異。 
 
 
圖 3.12：使用 PCA的 1sC 和 2sC 骨架的標準差
分佈圖 
 
圖 3.13：使用 PCA前的 1sC 和 2sC 骨架的標準
差分佈圖 
 接著本研究使用快速排序法(quick sort)，
將巨集骨架所有關節的標準差投影到座標上，
依照強度由左到右排列，結果如圖3.14所示。 
 
 
圖 3.14：標準差排序圖 
 
 經由快速排序法，將巨集骨架 sM 中動作
較不活潑的關節存入突變骨架 sMu (mutative 
skeleton)，利用圖3.15的演算法從 sM 刪除，其
突變過後的結果為子代骨架 spC  (population 
skeleton)。如圖3.17所示，可以發覺原本在 sM 中
還存在的右翅膀在突變過程中被刪除了。 
 
 3   ( , )
 .
 0.
while b maxmium joint number of 
   if ( ( ).  AND .  are equal) 
       ( ) ( ).
       ( ).
s s
s
p
s
s b s
s count s b
p
s count
p
Algorithm MutativeSkeleton M Mu
Assign C NULL
Assign count
M
M j name Mu name
C j M j
C j parent M
=
=
≤
=
= ( ). .
            if ( ( ). )
                 ( ). .
             end if 
                 .   
   end if 
end while
s b
s b
s count
p
j parent
M j leaf NULL
C j leaf NULL
count
==
=
+ +
圖3.15：突變骨架演算法 
 
10 
 
本研究的 ( )d t 是利用 1mC 來做取樣，分別
編號為 1 ( )mC v ，v為時間間隔編號，每 5個頁
框來做間隔取樣，在 2mC 中尋找最小能量損失
的時間間隔 ( )e m ，將 2mC 該段時間間隔的動作
檔與 1mC 利用式(3-6) 來找尋 ( )d t ，再經由式
(3-8)將兩者親代的動作傳遞給新型生物 pC ，
其結果如圖 3.18 所示， pC 結合了親代 1C 與
另一個親代 2C 的動作。 
 
 
圖 3.18：適應計算所得的動作 
 
 在圖 3.19 中本研究將新生物獲得的動作
資料分別是沒透過時空運算單純只做動作傳
遞的結果，以及在動作傳遞時有透過時空運算
產生動作資料的結果來做比較，在圖 3.19 中
上方的紅色主角因為沒透過時空運算的結
果，可以發現該生物的後腿因為同時具有兩者
親代的動作，所以在只做傳遞時會受到親代雙
方動作資料特徵的干擾，產生不能接受的結
果，但在下方的綠色主角由於有透過時空方
法，以第一個親代的動作資料為基礎向第二個
親代的動作找尋最小能量損失的特徵資料來
做結合，所以仍可以保有其運動特性。 
 
 
圖 3.19：沒時空方法與有時空方法的動作資料
比較圖 
 
3.2.4.1(b) 限制令 
 限制令在動作重置中也是重要的工具，它
必須要限制重置後產生的動作必須要符合所受
限制的條件，如在地板上行走時不能讓主角低
於地板，不能四肢同時不在地板上而浮在半空
中，或是在運動時它的肢體會與場景中的物體
穿過。本研究目前所使用的限制令為在運動時
不能讓主角的任何關節位置低於地板。我們訂
定一個規定 ( ( )) ,  { , , }if j t c = ≤ ≥ =  , c為常
數。如式(3-8)當所得到的動作行為距離我們的
限制令的允許值 c不等式，例如限制它距離地
板的距離為 0.0c = 公分，當它目前的狀態為
( ( ))if j t c≥ 表示它目前的姿勢在地板以上的
位置，但如果為 ( ( ))if j t c< 則表示它的姿勢在
地板以下，不符合限制令所要求的，這樣的動
作可以被視為無效，或是必須要被改正，本研
究所選擇的是透過IK來做改正，在章節3.2.4.2
會做說明。 
 
'( ) ( ( )) , '( ) ( ( )) , '( ) ( ( ))
                         ( ( )) ' ' ', 0
                             ( ( ( )) )
                                          
i i i
x y z
i
x y z
i
y t R rx t X y t R ry t X y t R rz t X
f j t y y y c
if f j t c
compute
= ⋅ = ⋅ = ⋅
= + + =
<
.
                : frame no., : joint no., : rotation martix
IK
t i R
        (3-8) 
 
3.2.4.2 反向運動學 
 在本研究當所產生的新生物動作資料違反
3.2.4.2中的限制令時，該資料就必須要被修正。
在這裡所使用的IK是較為簡易的，如式(3-9)以
此IK來維持其在動作重置之後仍可保有其動作
真實性。首先，在 Jacobian matrix中計算每個頁
框關節轉動角度的導數，分別會有
ij
rx
∂
∂
, 
ij
ry
∂
∂
, 
ij
rz
∂
∂
，判斷是否有關節會穿透地板。本研究方
法，是使用投影向量投影到X-Z平面，將為負值
的y座標值的關節動作給予校正，使其保持於地
板平面以上。 
 
                    ( ) ( ( ( )))
:  joint no., :  rotation martix, :  Jacobian matrix
i i iX t X R J j t
i R J
= ⋅ ⋅ ⋅
                (3-9) 
 
四、討論與實驗 
本研究提出的階層式演化跟一般最佳化
方法演化較為不同之處為本研究的適應值判
斷。一般最佳化方法將會利用自動化系統來執
行重複性運算，判斷決策找到最佳適應值解或
是近似解，例如使用者需要一個非常會飛翔的
生物，於是在該生物背部加上突變變因，要求
決策出最佳的關節生長以產生具有可使該生
物擁有豐富飛翔動作表現的關節。但是，要產
生這樣的生物除了所要花費的計算時間長之
12 
 
使用者可以改變適應值動作的時空控制
參數，該參數為 1mC 與 2mC 的結合比例，當參
數值為 x時， 1( ) ( ) ( )m mpC t C t x d t= + ⋅ 。如此
新生物 pC 所擁有的 mpC 所擁有的動作資料會
有所不同，未來本研究仍希望能結合一些有關
物理屬性以及更有效的 IK 方法來加強適應值
動作的真實性。預設的狀態是權重參數不更
改，突變數目為 5。 在表 4.3的實驗中，適應
值的動作結合給定兩種參數，由於參數增大所
以動作的差異度被縮小，計算得到的平均標準
差值也會被縮小，當參數減小時，動作差異度
被放大所得到的平均標準差值就被變大了。 
 透過進行以上三個實驗，不同的變數指
定將會產生擁有不同關節數目的新生物骨架
s
pC ，也由於這些參數的關係造就了新生物動
作檔 mpC 擁有不同活潑程度的差異性動作，因
此我們所提出的使用者互動方式的階層式演
化系統，能夠產生不論是在骨架或是動作方面
都具有多樣性的新生物。 
 
 
圖 4.2：透過使用者介面改變權重值 
 
 在圖 4.2中使用者將突變次數限定為 1，
並且將觸角(Horn)的權重值設定為-2，所以在
突變過程中觸角的標準差差異度會是最低
的，所以在只挑選一個關節的條件下，觸角被
篩選出來需要被突變，所得到新型生物如圖
4.3 所示，該生物為一匹具有雙翅的馬且同時
擁有馬與翼手龍雙方親代的動作資料。 
 
 
圖 4.3：改變權重值所得到的骨架結果 
 
4.4 親代雙方與子代的轉動軌跡比較 
 由於本研究經由適應性函數計算所得的
動作資料是根據時空計算式來找尋最小能量
損失的結果，所以我們根據第一個親代(馬)在
第二個親代(翼手龍)找出最接近的動作資料
來做補償，因此被產生的新生物動作資料將會
盡可能地接近第一個親代，由圖 4.4(a)-(e)以及
圖 4.5(a)-(e)可以看出，代表新生物的紅線的動
作軌跡盡可能地與代表第一個親代的藍線接
近，並且從代表第二個親代的綠線中找出與藍
線最接近的時間區段來做補償，所以會與藍線
產生出些微的變化但又不會跟親代完全不一
樣。 
 
圖 4.4(a)：關節轉動軌跡比較 x =-2.0 
 
 
圖 4.4(b)：關節轉動軌跡比較 x =-0.5 
14 
 
4.5 動作重置的時間花費 
表 4.5為親代的骨架與動作資料表，其頁
框長度以及關節數都不一樣。由表 4.6可以觀
察出被產生的生物其骨架資料都比親代來的
多，因為其關節是由親代雙方獲得的，所以超
過任何一方的親代資料是可以被預期的。在動
作資料方面，子代生物可以從具有不同頁框長
度動作資料的兩者親代來取得，但其獲得的資
料長度會與親代中擁有較長長度的那一方相
同。在處理時間方面，選取親代的時間是人為
時間，在交配、突變、以及適應性三個步驟的
時間是自動處理的，其消耗時間由大到小為適
應性>交配=突變，因為在適應性中時空計算的
時間複雜度為 2( )O n 是消耗時間的關鍵，它隨
著頁框長度而增加，但是它仍可維持在一秒鐘
左右的時間，因此是可被允許的範圍。在交配
過程需要將親代雙方的資料建立起巨集骨
架，而突變過程需要對動作資料做分析，這兩
者所需花費的時間都很少以及差異也比較
小，在這次的實驗結果看不出差異，不過理論
上突變所需花費的時間會略多。在 frame rate
方面，所產生的新生物的 frame rate 都會較親
代略為下降。 
 
表 4.5：親代的骨架與動作資料 
 馬(走路) 翼手龍
(飛翔) 
人(走路) 
Number of 
frames 
151 121 111 
Total joints 48 36 31 
Total 
DOFs 
147 111 96 
Frame rate 
(HZ) 
377.358 425.532 427.350 
 
表 4.6：兩兩親代生成的新生物骨架與動作資
料(時空控制參數 x=0.5) 
 馬-翼
手龍 
人-馬 人-翼手龍 
Number of 
frames 
151 151 121 
Total joints 59 54 41 
Total DOFs 180 165 126 
Mutation 
time 
0 1 3 
Elapsed time 
of crossover 
(sec) 
0.016 0.016 0.015 
Elapsed time 
of mutation 
(sec) 
0.016 0.016 0.015 
Elapsed time 
of survivor 
(sec) 
1.235 1.141 1.094 
Frame rate 
(HZ) 
222.15 266.67 276.32 
 
五、結論與未來工作 
  
5.1 結論 
本研究的三維骨架繁衍技術透過動作重
置以及階層式演化的配合，透過自由選擇親
代，讓親代交配產生出巨集骨架，藉由突變來
篩選刪除多餘的關節，動作重置時的適應性結
合等步驟，將可以產生擁有嶄新動作的新型生
物骨架，結合親代的骨架演進而成的新物種，
將可讓電影動畫以及數位遊戲界的人物角色
更加具有多樣性。並且本系統提供的圖形化使
用者介面可以幫助動畫人員給予演化過程參
數，讓產生的新生物符合動畫人員的需求。更
值得一提的是，經由本系統所產生出來的新生
物仍可以重複再傳回本階層式演化系統作演
化。在應用方面，本研究所產生的資料檔案可
以載入到 Maya，在 Maya 中將能讓具有動作
資料的骨架與多邊形模型作綑綁產生出新的
人物角色，即可以將此人物應用在電影動畫與
數位遊戲界。 
 
5.2 未來工作 
 本研究在動作資料適應性的物理屬性與
IK 方法仍有很多的努力空間，希望可以在圖
4.8 達到讓新生物在動態的虛擬環境上運動的
時候不會發生不真實的情況，如四肢穿過環境
中的物件或是四肢在地板上滑動的情形等
等，並且在多變化的場景中能夠不受地形的限
制，依然保有其動作的真實度增加其可適性。
期許這樣的一些方法能夠讓得到的動作資料
使主角在運動的時候能擁有更佳的結果，以及
可 以 採 用 人 物 動 作 的 時 間 校 正 (time 
warping)，讓不同頁框長度的動作資料透過分
割動作片段方式調變式的結合，並且可以考慮
在動作片段與片段間加上平滑化處理，如此將
可以在動作結合時候所得到的動作能避免產
生碎裂感以維持真實性。綜合以上的未來工
作，我認為本系統也將能讓動畫人員在使用上
更加便利與滿意。 
 
 
16 
 
Fr`ed`eric Pighin, “Motion graphs,” Proc. 
of the 29th Annual conference on 
Computer graphics and interactive 
techniques – SIGGRAPH ’02, pp. 473-482, 
2002. 
26. James McCann, Nancy S. Pollard, and 
Siddhartha S. Srinivasa, “Physics-based 
Motion Retiming,” In 2006 ACM 
SIGGRAPH / Eurographics Symposium on 
Computer Animation, pp. 205-214, 2006. 
27. Michael F. Cohen, “Interactive spacetime 
control for animation,” Proc. of the 19th 
Annual conference on Computer graphics 
and interactive techniques – SIGGRAPH 
‘92, pp. 293-302, 1992. 
28. Charles Rose, Brain Guenter, Bobby 
Bodenheimer, and Michael F. Cohen, 
“Efficient Generation of Motion 
Transitions using Spacetime Constraints,” 
International Conference on Computer 
Graphics and Interactive Techniques, pp. 
147-154, 1996. 
29. Michael Gleicher, “Motion editing with 
spacetime constraints,” Proc. of the 1997 
symposium on Interactive 3D graphics - 
SI3D '97, pp. 139-148, 1997. 
30. Zoran Popovi´c and Andrew Witkin, 
“Physically based motion transformation,” 
Proc. of the 26th Annual conference on 
Computer graphics and interactive 
techniques – SIGGRAPH ‘99, pp. 11-20, 
1999. 
31. Ronan Boulic and Daniel Thalmann, 
“Combined Direct and Inverse Kinematic 
Control for Articulated Figure Motion 
Editing,” Computer Graphics Forum, Vol. 
11, No. 4, pp. 189-202, Aug. 1992. 
32. Lionel Reveret, Laurent Favreau, Christine 
Depraz, Marie-Paule Cani, “Morphable 
Model of Quadrupeds Skeletons for 
Animating 3D Animals,” Proc. of the 2005 
ACM SIGGRAPH/Eurographics 
symposium on Computer animation - SCA 
'05, pp. 135-142, 2005. 
33. John H. Holland and Judith S. Reitman, 
“Cognitive Systems Based on Adaptive 
Algorithms,” In 1997 ACM SIGART 
Bulletin, pp. 49-49, 1997. 
34. Cândida Ferreira, “Gene Expression 
Programming: A New Adaptive Algorithm 
for Solving Problems,” Complex Systems, 
Vol. 13, No. 2, pp. 87-129, 2001. 
35. Karl Sims, “Evolving Virtual Creatures,” 
Proc. of the 21st annual conference on 
Computer graphics and interactive 
techniques - SIGGRAPH '94, pp. 15-22, 
1994. 
36. John R. Koza, Genetic Programming. 
Cambridge, MA: MIT Press, 1992. 
37. Larry Gritz, James K. Hahn, “Genetic 
Programming for Articulated Figure 
Motion”, The Journal of Visualization and 
Computer Animation, Vol. 6, No. 3 , pp. 
129-142, Jul. 1995. 
38. Larry Gritz, James K. Hahn, “Genetic 
Programming Evolution of Controllers for 
3-D Creature Animation”, Genetic 
Programming 1997: Proc. of the 2nd 
Annual Conference, pp. 139-146, 1997. 
39. Lindsay I Smith, “A Tutorial on Principal 
Components Analysis,” available through 
http://www.cs.otago.ac.nz/cosc453/student
_tutorials/principal_components.pdf, Feb. 
2002. 
40. FLTK, available through 
http://www.fltk.org/, Dec. 2008. 
 
七、計畫成果自評 
 
本計畫部分成果已發表論文列表如下： 
1. Tainchi Lu and Hungchang Chang, "A 
Situation-Aware Mesh Morphing of Facial 
Expression for Virtual Environments," 
International Journal of Advanced 
Information Technologies, Vol. 2, No. 1, pp. 
106-122, June 2008. 
2. Minchih Tsai and Tainchi Lu, "A Rapid 
Mesh Fusion Method to Create 3D Virtual 
Characters in Games," In Proceedings of the 
2009 International Conference on Computer 
Sciences and Convergence Information 
Technology, Nov. 24-26, 2009, Seoul, 
Korea. 
3. Tailin Chen, Daosheng Mu, and Tainchi Lu, 
"Hierarchical Evolution for Animating 3D 
Virtual Creatures," In Proceedings of the 
2009 APSIPA Annual Summit and 
Conference, Oct. 4-7, 2009, Sapporo, Japan.  
4. Jinhung Ke, Yuchieh Kao, and Tainchi Lu, 
"MOG Platform using Mobile Agents for 
Resource Transactions," In Proceedings of 
the 9th International Conference on Hybrid 
Intelligent Systems, Vol. 1, pp. 129-134, 
Aug. 12-14, 2009, Shenyang, China. 
5. Chien-Hsiang Wen and Tainchi Lu, "Using 
Hierarchical Evolution to Synthesize 
Textures for Mapping on 3D Characters," In 
Proceedings of the 2009 Computer Graphics 
Workshop, July 23-24, 2009, Taiwan. 
出席國際學術會議心得報告 
                                                             
計畫編號 NSC 97-2221-E-415-012 
計畫名稱 使用三維骨架繁衍技術進行物體動作轉移串接之研究(II) 
出國人員姓名 
服務機關及職稱 
盧天麒 
國立嘉義大學資訊工程學系 副教授 
會議時間地點 
2009/08/12~2009/08/14 
中國遼寧省瀋陽市洲際大飯店 
會議名稱 
(中文)第九屆國際混合式智慧系統研討會 
(英文)HIS-2009 Ninth International Conference on Hybrid Intelligent Systems 
發表論文題目 
(中文)多人連線網路遊戲平台運用行動代理人進行資源交易之研究 
(英文)MOG Platform Using Mobile Agents for Resource Transactions 
 
一、參加會議經過 
2009年的 HIS-2009 Ninth International Conference on Hybrid Intelligent Systems會議在中
國遼寧省瀋陽市舉行，主辦單位為瀋陽師範大學軟件學院，HIS2009 舉辦的天數為期三天，
本篇論文是發表在會議主題為 Agents on Networked Media and its Applications，本人並擔任本
場次的主持人。此 session 共有七篇論文，作者分別來自台灣、中國和泰國。第一篇論文題目
為 A Rate Adaptation Scheme with Loss Differentiation for WLAN。此篇論文提出了 Enhanced 
CARA (E-CARA)來克服 CARA 的兩大問題。它利用發出 Busy Tone 的 Clear Channel 
Assessment (CCA)和 Freeze Counter (FC)來區分 frame collision。進而提供比 E-CARA和 ARF
更佳的 Rate Adaptation。第二篇論文題目為 A New RFID Authentication Protocol with 
Ownership Transfer in an Insecure Communication Environment。此論文所提出的架構將 Osaka
與 Lei-Cao等學者提出的安全架構不能抵禦攻擊的問題加以解決，使得 RFID在無線網路的環
境中的保密性與安全性更有所提升。第三篇論文題目為 Finding Time-delayed Gene Regulation 
Patterns from Microarray Data。此論文提出了一個修正性的關連法則，透過 Apriori 演算法以
及背景頻率的不同來分析基因調控後，得到所需要的基因調控模組。第四篇論文題目為 The 
Lower Hops Selection Scheme for Constructing the Multihoming NEMO。此篇論文提出了一個階
層式的路徑選擇架構，作者將多重 Gateway 進行分層，由底層往高層依序選擇，並且依據選
擇的結果重新進行網路拓墣，如此一來便能解決巢狀 NEMO的 Route Loop的問題。第五篇論
文為本次發表之論文，題目為MOG Platforms Using Mobile Agents for Resource Transaction。
第六篇論文題目為 The Patching Methods of the Bayesian Network Data。在本篇論文中提出一
個 score function，此 function 會去評估每一個位於貝式網路上的節點並且由評估的結果判斷
MOG Platform using Mobile Agents for Resource 
Transactions  
Jinhung Ke, Yuchieh Kao, and Tainchi Lu*  
Department of Computer Science and Information Engineering 
National Chiayi University 
Chiayi, Taiwan 
*E-mail: tclu@mail.ncyu.edu  
 
 
Abstract—A great challenge of designing a successive multi-user 
online game (MOG) platform is capable of supporting hundreds 
of thousands of game players to participate in an online game 
simultaneously. The proposed MOG architecture makes use of a 
hybrid network communication technology by means of splitting 
the platform into two major extents, one in the central game 
server, and the other is the encapsulated game group (EGG). 
The MOG can not only accommodate large-scale simultaneous 
online players but also get rid of low system stability and 
complicated synchronization problems. Moreover, we propose a 
dynamic agent itinerary algorithm to lead an autonomous mobile 
agent to complete the operations of matching game resources. 
Furthermore, the agent architecture comprises three kinds of 
software agents for accomplishing the specific tasks. The 
purpose of dispatching a mobile business agent (MBA) to remote 
peers is to provide online game players with the personalized 
game resource matching services. The proposed MOG system 
makes use of Java technologies to accomplish the whole platform 
and the game engine. The experimental results show that the 
proposed MOG platform can dynamically generate an itinerary, 
and then take advantage of the itinerary to lead a MBA to work 
in a large-scale hybrid network. 
 
Keywords:  Mobile Agent; Itinerary; Multiplayer Online Game; 
Peer-to-Peer; Resource Transaction 
I. Introduction 
As the network technology gets more advanced and more 
popular for the development of multi-player online games, 
people are enthusiastic at exploiting and playing games 
through the Internet. The consequence of popularizing for 
digital technologies and the development for multi-player 
games, people play games through the Internet more 
frequently. As a result, the classification of online game has 
been changed time to time, and the game servers need to 
support more users to take part in the games. On the other 
hand, the terminology “agents used in a game” has become 
more popular, and it is the reason why we take into account 
the agent technologies to be the main foundation of the hybrid 
network framework. 
When a mobile agent receives an order from a terminal 
user, it would deal with the order immediately, move from 
one host to another one as soon as possible, and send the 
results back to the terminal user. The agents move as small as 
themselves to results, status of program (i.e. the variables of 
the agent’s program), and even the whole object; furthermore, 
agents can assign tasks by themselves. Host node does not 
wait for the agents to send the results back when the agents 
are working for their tasks. The sending node and receiving 
node will be able to continue playing games, interacting with 
other game users, and processing the resources. Terminal user 
dispatches orders or missions while restarting a new mission. 
Other nodes could not control or prevent agents doing their 
missions. 
In this paper we build three roles of mobile agents to 
perform resource transactions. There are mobile business 
agent (MBA), peers in P2P network, and itinerary. When 
game players were going to carry out resource transactions, 
they send out MBAs after building up an itinerary. When the 
MBAs arrive at the target peers, their itineraries are updated 
dynamically. The MBAs would obtain the information of 
game resources, such as location, price, and time register for 
the players. We discussed the relations among MBA, peers, 
and itineraries in order to set up a simulation environment by 
using Java technologies. 
II. Background 
The IBM Corporation developed a Java-based agent 
system, namely the “Aglet” [6], in 2000. However, the 
“Aglet” was not a common Java-based agent. It was 
combined with mobility, and it can migrate to other P2P-
based Aglet systems for execution. Because of the mobile 
agents will visit several hosts for execution, the efficiency, 
success, or failure depended on the itinerary of the mobile 
agents [1][10][12][8][12]. It is hard to change the itinerary 
dramatically for visiting some particular hosts, where most of 
researches aim to apply in specific networks when they design 
an agent system. Therefore, an intelligent agent [4] that can 
emulate the topology dramatically was trying to research. 
According to these researches, these intelligent agents can 
only enforce in a simulated network. This problem was solved 
by ADK [13]. It established the different components of 
agents based on its behaviors. Ambient calculus [5] permits 
agent covering other agents and moves all the sub-
components. Agents of Ambient calculus can hold other 
agents, so that the itinerary becomes more complicated. Seal 
calculus [9] is familiar with the Ambient calculus, but it 
focuses on analyzing the security of agents. Polis language is 
a framework to analyze the mobile entity. It contains agents 
and codes, and can be involved in the entity. However, it is 
un-executable and it needs the sharing buffer of a remote host 
for analyzing. Hence, an agent which can enforce and reuse at 
the non-centralized environment [16] has been developed. 
 
More and more agents have been applied in many ways. 
Peter Leong and Miao Chunyan proposed the FCGN agent for 
controlling the NPC in games. The FCGN integrates the 
Fuzzy Conitive Map [15][11][14] and Goal Net Modeling [7]. 
passes the information to a mobile agent, and dispatches it to 
the other nodes for its mission. 
3.2.3 Dynamic Node Agent (DNA) 
When the first player enters in the EGG, the central 
server will dispatch the dynamic node agent to help and 
initialize the first player turning into the eM of this EGG. If 
the eM of the EGG leaves, the central server holds the rights 
to select a new eM for this EGG, then the DNA also helps and 
initializes the elected one turning into the eM. 
3.2.4 Itinerary 
The itinerary only provides the encrypted files to the 
mobile agent and the CIA, which is similar to a dynamic 
routing table. Each player holds a partial itinerary when they 
are online. The itinerary keeps trace of the IP address of the 
other player’s mobile trading agent who wants to have a 
transaction. For mobile trading agent, each player on the 
visiting path just holds a part, which is the part pointed to the 
next player. 
3.3 Journey of Agents 
In the beginning of the agent dispatched, the agent does 
not predict how many nodes that it will visit. However, the 
itinerary will be updated for the next stop when the agent 
arrives at a new node. In other words, although the agent 
cannot keep the whole itinerary of the whole visiting path 
during visiting, the agent will possess the whole itinerary at 
the end of the resource searching. The whole journey of 
agents follows the following steps: 
 Step 1: Player sets the rules for trading to the CIA, 
including the limitation of the budget, and the total time 
of journey. If time is up, the CIA will call the method 
“backHome()” for invoking mobile agents back to the 
server.  
 Step 2: The CIA notifies the mobile agents how to obey 
the rules. The mobile agent who is notified will visit the 
eM first. If the player is the eM, the agent of the eM 
will visit another eM’s node. It will calculate the budget 
cost by invoking cost(Pn) when the agent arrives at the 
Pnth node. 
 Step 3: The mobile agent writes his own IP address and 
related information into the local itinerary when it 
arrives. 
 Step 4: Load the local itinerary. If it matches the rules 
of the player, the next step jumps to the step 5; 
otherwise, the next step goes to the step 6. 
 Step 5: Adding the information to the shopping cart, 
choosing the latest data of the shopping cart, and 
counting the budget. If the budget is larger or equal to 
the value of cost(Pn), to visit that node, and check the 
data   
 Step 6: Select the latest data from the itinerary, and visit 
the node which IP address got from the data. 
 Step 7: Go back to the home peer, if the shopping list is 
full, the budget is running out, or the visited nodes are 
exceeded the given value; Go to the step 3; if the 
shopping list is not full, or the budget is still surplus 
after the calculation (i.e. b >= cost(Pn) ). 
 Step 8: Report the information after back to the home 
peer, and let the player decides who they want to trade 
with, then call the method, dispose(), to ensure that the 
amount of business agent is lower than the limited size. 
 
There are two main mechanisms of the itinerary. First, 
the itinerary provides certain mounts for the players that the 
players can write their IP addresses and the commodities for 
trading. Second, the latest agent will replace the earliest 
timestamp when the itinerary is full. In figure 3, we show the 
order that the mobile agent reads and writes the itinerary. 
 
 
Figure 3: The journey of the mobile business agent. 
 
Whenever a mobile agent reaches a node of player, it 
writes IP address and also commodities for trading, and it 
loads the information from the itinerary, including the other 
players’ IP addresses and the commodities for trading. If the 
information matches the rules of the master player for trading, 
the agent writes the information back to its own register, or 
sends it back to the master player when the register is full. 
Besides, the agent loads the local information of other players 
from the itinerary and keeps visiting and searching 
information when it fails to match the trading rules or the 
register filled up. 
3.4 Game Framework 
As shown in Figure 4, when a player connects to the 
main server first, the main server will check the player’s 
member ID and some related data. For checking player’s 
member ID and some related data, the main server loads the 
member data from the database. Players can enter to the 
“game hall” after checking the players’ member ID.  The 
players can make a choice for holding a new game as an eM, 
or adding to the other EGG as a player node. The game 
system will write the status of the players back to the game 
database in every 30 seconds. If the trading behavior occurred, 
the game system will load the trading database and deal with 
the trading. Only the eM of the EGG will communicate with 
the main server while loading the game database. The normal 
player nodes will send their own status to all the members of 
the EGG. There are 3 constrains in our game framework, 
including gaming time, members of EGG, and virtual treasure 
Figure 7: The relationship of the visited peers with the different cost budgets. 
 
In the second experiment, we also have two groups to 
experiment on the effect of the usage with the itinerary, the 
using itinerary group, and the visiting by sequence group. In 
the first step, we let the two groups visit 100 nodes. In figure 
8, we can see that the effect of the usage with the itinerary is 
not very obvious, but in the dynamic P2P environment, the 
agents without the itinerary will visit the node disorderly.  
 
Figure 8: The effect of the usage with the itinerary for 100 peers. 
 
In the second step, we let the 2 groups visit 200 nodes. In 
figure 9, we can see that the effect of the usage with the 
itinerary is better than the first experiment. Although the 
effect of usage with the itinerary is noticeable while visiting 
200 nodes, the effect becomes a limited extent.  
 
Figure 9: The effect of the usage with the itinerary for 200 peers. 
 
In the third step, we let the two groups visit 300 nodes. 
In figure 10, we can see that the effect of the usage with the 
itinerary is more obviously than the second experiment. 
According to above experiments, we can find out that the 
effect of the usage with the itinerary is directly proportional to 
the visiting nodes. In the real dynamic P2P environments, 
there are always hundreds of thousands of nodes. Hence, we 
can see that the group using the itinerary is better than the 
group visiting by sequence in the real dynamic P2P 
environments. 
 
 
 
Figure 10: The effect of the usage with the itinerary for 300 peers. 
 
V. Conclusions 
In this paper, we introduced an agent application for 
resource trading and searching in the multiuser online game 
platform. The mobile business agents can visit the other 
player nodes according to the itinerary, and search the 
information of the resource which the player required. The 
players can stand on the information and decide whether the 
transactions are carried out or not. The agents will send and 
write the records back to the historical transaction record 
database through the Encapsulated Game Group Manager 
after a successful transaction. In addition, we consider with 
the variables which affect the efficiency of the agents while 
visiting the player nodes, such as the total player nodes, size 
of the itinerary, price range, the budget, and the number of 
mobile business agents. Regarding the real dynamic peer-to-
peer environments, there are some reasons that we have to 
consider, such as the route of the network, the load of the 
hardware, and the destruction of the itinerary. These outcomes 
will also affect the efficiency of the agents. There are several 
possible extensions in this work. The enhancement of the 
exception control, such as preventing the destruction from the 
peer-to-peer structure, is a possible extension. Another 
extension is that agents can change the rules of searching for 
the personalized services based on the player’s requirements.  
 
REFERENCES 
 
[1] A. Bharambe, S. Rao and S. Seshan: “Mercury: A 
Scalable Publish-Subscribe System for Internet Games”, Proc. 
of 1st Workshop on Network and System Support for Games 
(NetGames2002), 2002. 
