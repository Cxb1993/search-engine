 2
中文摘要 
 
 過去以程式執行的系統呼叫序列是否異常來做入侵偵測(anomaly intrusion detection)
的研究大都假設這些程式（如 sendmail）的所有正常執行過程都被完整記錄，所以可
作為後來判斷是否執行異常的依據。但實際上，這些假設並不容易成立，因為即使某
一程式曾經被完整記錄，但是當程式改版，增加新功能時，原有的記錄可能已不再適
用。更何況現代電腦裡的程式，往往有數十甚至數百個，要一一記錄其正常行為有實
際上的困難。為解決此問題，本計畫擬利用其他領域所發展的隱藏式馬可夫模型的漸
進估計方法 (Incremental estimation of Hidden Markov Model)，發展一個 SCIMAID 
(System Call based Incremental hidden Markov model for Anomaly Intrusion Detection)方
法，此方法能讓主機型入侵偵測系統（IDS）在各程式的日常執行過程中，漸進地建立
該程式的 HMM （Hidden Markov Model)模型，省去專門訓練該程式的 HMM 的時間。
隨著程式執行時間的增長，該 HMM 模型的偵測也將愈準確。我們發展的方法其原理
是從多個觀察序列學習單一隱藏馬可夫模型，配合本研究所提出的模型調適方法，能
夠幫助解決正常程式因程式更新而容易導致誤判狀況發生的問題。我們透過美國新墨
西哥大學所提供之 Sendmail 系統呼叫資料集與自行蒐集之 Windows 系統呼叫資料來證
明本研究的方法能夠區分程式的執行確實有異常的入侵行為，程式更新時也能夠對於
模型進行相對的調適，且經實驗顯示訓練所需時間與所需記憶體空間將分別節省約 65%
與 90%。 
關鍵字：Windows 系統呼叫、程式行為、異常入侵偵測、漸進式隱藏馬可夫模型。 
 
 
英 文 摘 要 
 
As more and more researches put emphasis on the host based intrusion detection systems, this 
project intends to develop a System Call based Incremental hidden Markov model for 
Anomaly Intrusion Detection (SCIMAID ) method. The purpose of this method is to reduce 
the huge overhead of training the HMMs (Hidden Markov Models) of programs. This kind of 
training overhead may hinder the use of system call based anomaly intrusion detection for the 
number of programs in modern computers may be quite large. 
 4
model for Anomaly Intrusion Detection (下簡稱 SCIMAID )，此方法主要是利用
微軟 Windows 作業系統上之 Native APIs，結合改良的漸進式隱藏馬可夫模型演算法，
藉由訓練程式執行時正常使用系統呼叫的行為來偵測目前程式執行是否有入侵攻擊事
件發生，並且設計一模型調適方式，來解決正常程式因程式更新而容易導致誤判狀況
發生的問題。 
本文分為六節。第二節介紹系統呼叫在入侵偵測上的應用，以及微軟 Windows 入
侵偵測與隱藏馬可夫模型之相關研究。第三節將說明應用漸進式隱藏馬可夫模型與
Windows 系統呼叫於異常入侵偵測所需考慮的議題。第四節為系統架構與設計。第五節
為實驗，透過美國新墨西哥大學所蒐集之 SunOS 作業系統的 Sendmail 程式系統呼叫資
料集以及本研究自行於微軟作業系統上收集之 Windows Native APIs 使用資料，來驗證
SCIMAID 方法的效用。第六節為結論，說明本研究的貢獻與未來研究方向。 
 
2. 相關研究 
 
近年來入侵偵測所關注的分析資料來源逐漸由網路封包、使用者所輸入指令等轉
移至系統呼叫，在[FHSL 1996]的研究中指出，存放在磁碟上的程式要對系統造成非法
傷害需要經過執行的動作，而執行的程式要對系統造成影響，則必定得透過系統呼
叫，由此觀點來看，經由檢查系統呼叫執行的合法性便能偵測出程式異常的狀態，且
程式執行時產生的系統呼叫有很明顯地先後順序的特徵[YD 2003]，而隱藏馬可夫模型
其特性就是用來描述有時間順序特性的動態工具，因此被廣泛的應用於語音辨識及分
子生物學等領域上[Rabiner 1989] [RJ 1986]。  
隱藏式馬可夫模型是一個雙層隨機程序，包含了隱藏的狀態層和可觀察的輸出
層。隱藏過程是無法直接觀察的，但可以從可觀察的輸出序列之隨機過程觀察得出，
因此一個隱藏馬可夫模型 λ主要可以下面幾種元素來表示： 
 
λ = (A, B, π)  
 
其中A代表狀態轉換矩陣，B代表的符號產生機率矩陣，π代表初始狀態機率向
量；在實際的應用上，使用隱藏馬可夫模型會碰到求得觀察序列的產生機率P(O 
 6
綜合以上的相關研究，本論文結合漸進式隱藏馬可夫模型與漸進式訓練架構，提
出一基於Windows Native APIs且具有模型調適性質之異常入侵偵測系統，來解決異常
入侵偵測系統所常常遇到的正常使用模型需要更新與調適的問題，並且能夠保有原先
正常模型的部分知識，且應用漸進訓練架構的概念與漸進式隱藏馬可夫模型，使得訓
練成本大幅的降低，也使得即時的訓練與偵測更為可行。 
 
3. 結合漸進式隱藏馬可夫模型與 Windows 系統呼叫 
3.1 漸進式隱藏馬可夫模型之應用  
應用隱藏馬可夫模型於入侵偵測需要對某些參數事先定義，其中包括隱藏狀態的
個數、所需系統呼叫短序列的長度以及觀察值種類個數等。隱藏狀態通常具有某種實
體的意義，應用在本研究之程式使用之系統呼叫模型中，則代表系統目前執行的狀
態，在隱藏馬可夫模型中狀態的個數通常以 N來表示。 
在不同的狀態之下，會出現不同的觀察值，通常以 M 來表示，以建立程式行為模
型來說明，某一狀態可能會產生的觀察值，必定將會是屬於作業系統所提供的系統呼
叫全部的種數之一，以 SunOS 為例，所提供的系統呼叫種類個數為 182 個，而在微軟
Windows 作業系統上，所提供的 Native API 種類個數為 284 個。而在隱藏狀態個數選
擇方面，應用於異常入侵偵測的隱藏馬可夫模型之隱藏狀態個數都是以訓練時期所蒐
集資料中所出現的系統呼叫種類個數為基準[HHB2003][QXBG2002][WFP1999]，因此
本研究也採用此選擇方式。 
在傳統的隱藏馬可夫模型中，一個重要的元素為下列(3)式的運算： 
 
 
 
 
其中 aij為狀態轉移機率矩陣，bj為觀察值機率向量，上式之代表含意為時間 t 時
位於狀態 Si且時間 t+1 時狀態轉移至 Sj的機率，而其中 
 
 
 
...(3)                     
)()()(
)()()(
        
)
1 1
11
11
1
∑∑
= =
++
++
N
i
N
j
ttjijt
ttjijt
jt+it
jObai
jObai
 = 
|O, λ=s, i=sP(iξt(i,j) = 
βα
βα
...(4)                      )()( 1
1
1 jOba t
N
j
tjijt +
=
+∑= ββ
 8
察序列數量超過一定額數量，則新加入的系統呼叫觀察值序列將以取代方式取代較舊
之系統呼叫觀察序列，詳細流程將於下一節說明。 
 
3.2 Windows 系統呼叫  
 
在 Windows 系統架構中，Windows Native API 相當於 UNIX-Like 系統中的系統呼
叫[BGM 2004][ACGS 2005]。Native API 的用途是讓各類程式能夠藉此取得核心系統的
各項資源，而這些 Native API 函數只運行在系統核心層，主要實作於 ntoskrnl.exe
之中，為了安全上考量，需要透過間接的方式，即利用一層呼叫一層的方式向系統核
心請求系統資源，由系統於 User mode 所提供之 Win32 API 以 INT 2E 中斷的進入
Kernel Mode，交由相關之 Native API 執行。 
 
圖二  SSDT Hooking 流程  
       
  在這樣程式存取 Windows 系統資源的流程之中，可以利用 API Hooking 的技術，
來擷取程式使用 API 的資訊，API Hooking 的方式有許多種，而在本研究中使用 SSDT 
Hooking 的方式[Strace]，來擷取各個程式使用 Native API 的相關資訊，其方法流程
如圖二所示，該方法主要會利用 WIN32 Device I/O Control 的方法載入 Kernel mode
的 Device Driver 來修改 System Service Description Table，以攔截 Native API 呼
叫，獲得程式使用 API 的資訊，而在所獲得的眾多資訊中，我們僅記錄 Native API 的
名稱，以得到所需的 Native API 呼叫序列。 
 10
察序列之後，再針對同一個初始化之隱藏馬可夫模型進行最佳化學習，訓練得到正常
使用行為之隱藏馬可夫模型，在本研究中，依據試驗結果，將此一序列長度門檻值定
為三萬個，即每觀察到三萬個 Native API，便成為一個新的觀察序列。 
    在學習過程中，需反覆的以訓練資料進行模型最佳化的學習，因此在每一次訓練
之後，皆須進行學習的評估，以確定所得到之使用行為模型為最佳，評估方式為利用
所得到的 Native API 觀察序列(此一序列並不包含於訓練資料中)，求取其出自此隱藏
馬可夫模型的機率 P(O|λ)，並取其對數 ln P(O|λ)，ln P(O|λ)值較大表示所學習
得到之正常使用模型品質較佳，因此學習停止條件為當 ln P(O|λ)不再增加時，則停
止學習的程序。 
 
4.2  異常入侵偵測階段 
 
        在異常入侵偵測階段，主要包含監控個別程式所使用的 Native API、異常評
估與模型調適三件工作，如圖三中所示，擷取每個程式所使用 Native API 序列之方法
如同正常行為訓練階段以 SSDT Hooking 的方法來達成，異常評估時利用此階段所蒐集
到之 Native API 序列與訓練階段得到之正常使用模型來評估程式之執行是否有異常，
我們利用滑動視窗的方式取得 Native API 短序列，並利用前向演算法(Forward 
algorithm)得到此一短序列自正常使用模型產出的機率並取其對數值，當此數值小於
是先訂定之門檻值時，則將這一個短序列視為異常，而異常的評估則以異常的比率為
主，即當偵測階段所蒐集到之 Native API 序列異常的比率過高時，便認定可能有入侵
行為的發生。  
  此外，由觀察中我們也發現入侵攻擊的行為往往造成連續多個異常的系統呼叫，
因此於本研究中亦同時評估連續異常的短序列個數，以 Internet Explorer 為例，依
據實際實驗顯示，當連續異常的短序列個數大於 25 次或異常比率高於 5%時，才由系統
發出異常的警訊。 
而小幅度的程式更新往往造成異常率的提升，但並不會造成連續的系統呼叫短序
列發生異常，因此於本研究中，若未發出異常的警訊，卻有異常比率提升的現象時，
便啟動模型調適的流程，模型調適的方式為將此一 Native API 序列當作新的觀察值序
 12
 
圖四  模型品質比較  
 
        另外，為了確定本研究所使用之先行對系統呼叫序列分割，再以漸進式隱藏
馬可夫演算法訓練出隱藏馬可夫模型的方式，相較於傳統批次訓練(即訓練資料僅為一
個長序列，不進行序列分割)的方式，確實也能在較短的時間內完成單次的訓練，以下
將以另一實驗證明之。 
而為方便實驗比較，下面以 S(2,2) (代表符合兩個狀態以及兩個觀察值的隱藏馬
可夫模型的資料)此一資料筆數為一百萬之自行創造的資料集，來觀察利用漸進式隱藏
馬可夫模型與序列分割的學習架構，是否能有效的降低訓所需的成本，其中記憶體耗
用部分，由於我們所設計之雛形系統以 Java 實做，所以本研究以 Java Virtual 
Machine 所耗用的記憶體空間來表示利用實做傳統隱藏馬可夫模型與我們所使用之方法
所使用記憶體空間的差異，其結果如下表所示： 
 
表一  訓練成本比較表  
 
 
由表中可以得知，以 S(2,2)此一資料集來看，本研究所設計之方法，在單次訓練
所使用的時間較傳統隱藏馬可夫模型方法可節省 66%的時間，且記憶體使用空間更可節
省 93%的耗用，且傳統隱藏馬可夫模型學習方法之記憶體空間與時間耗用皆與狀態數的
平方成正比，因此套用在實際的資料時，其成本耗用將會更加可觀，且如前述本研究
所提的方法亦可以較少的訓練次數得到品質較佳的模型，綜合來說，本研究之方法可
以減少訓練的成本耗用。 
 14
 
圖五  MS06-001 攻擊之 lnP(O|λ) 
 
綜合以上實驗所述，我們可以下表七來說明，我們所提出的可調適性異常入侵偵測方
法，對於異常的入侵攻擊行為，確實能夠加以偵測出來，而且經由實驗證明我們所設
計之模型調適機制與方法，確實能夠降低因程式更新所造成的異常程度升高的現象，
並且如前所述，本研究所提之方法對於訓練成本亦能夠有效的降低至合理範圍之內。 
 
6. 結論 
         
對於入侵偵測系統來說，如何能夠設計一個具有即時學習與偵測能力的方法，仍
是目前大家所關注的焦點之一，而微軟作業系統的普及，也使得微軟作業系統上的安
全問題一直為大家所密切注意的議題，例如微軟公司的新作業系統 Vista 與安全軟體 
Windows Defender 便因應這樣的趨勢而開發，因此本研究提出一個基於漸進式隱藏馬
可夫模型與 Windows 系統呼叫之可調適性異常入侵偵測方法，透過對於程式正常使用
的塑模與學習，結合漸進式隱藏馬可夫模型的使用，來建置一具調適性之異常入侵偵
測雛形系統。 
綜合來說，本研究所設計之異常入侵偵測方法主要有下面三種貢獻： 
(1) 訓練成本的改善： 
一個要達到即時偵測與學習的入侵偵測系統其訓練成本不能夠過高，本研究利
用改良的漸進式隱藏馬可夫模型學習演算法有效的將應用隱藏馬可夫模型的訓
練空間成本與時間成本各降低約 90%與 66%。 
(2) 基於 Window 作業系統的入侵偵測方法： 
 16
8th Information Security Conference, 2005. 
[FHSL 1996] S. Forrest, S.A. Hofmeyr, A. Somayaji, and T.A. Longstaff. A sense of self for 
unix processes. In Proceedings of the 1996 IEEE Symposium on Security and Privacy, 
pages 120-128. IEEE, May 1996. 
[HFA 1998] S A Hofmeyr, S Forrest, Anil Somayaji. Intrusion Detection Using Sequences of 
System Calls. Jouranl of Computer Security, 1998. 
[HH 2004] X.A Hoang, J. Hu,” An efficient hidden Markov model training scheme for 
anomaly intrusion detection of server applications based on system calls”, Proceedings. 
12th IEEE International Conference on ICON, Nov. 2004 
[LS 1998] W. Lee and S. J. Stolfo. Data mining approaches for intrusion detection. In 
Proceedings of the 7th USENIX Security Symposium, 1998. 
[NEB2000] G. Nebbet.“Windows NT/2000 native API reference”, 2000 
[QXBG 2002] Y. Qiao, X. W. Xin , Y.Bin and S.Ge:“Anomaly intrusion detection method 
based on HMM”, Electronics Letters, 20th, 2002 
[Rabiner 1989] Lawrence R. Rabiner, Fellow, IEEE, “A Tutorial on Hidden Markov Models 
and Selected Applications in Speech Recognition”, In Proceedings of the IEEE, Vol. 77, 
No. 2, February 1989. 
[RJ 1986] L. R. Rabiner, B. H. Juang, “An Introduction to Hidden Markov Models”,IEEE 
ASSP Magazine, January 1986. 
[RJ 1993] L. Rabiner, B.H. Juang, “Fundamentals of Speech Recognition”, Prentice Hall, 
1993. 
[Strace] Strace for NT WebSite 
http://www.bindview.com/Services/RAZOR/Utilities/Windows/ strace_readme.cfm 
 [UNM]  UNM system call datasets http://www.cs.unm.edu/~immsec/systemcalls.htm 
[WFP 1999] C. Warrender, S. Forrest, B. Pearlmutter, “Detecting intrusions using system 
calls: alternative data models”, In Proceedings of the 1999 IEEE Symposium on Security 
and Privacy, pages 133-152, Oakland, California,1999. 
[WGZ 2004] W. Wang, X.H. Guan, X.L. Zhang, “Modeling Program Behaviors by Hidden 
Markov Models for Intrusion Detection”, In Proceedings of 2004 International Conference 
on Machine Learning and Cybernetics, Aug. 2004 
[XCY 2004] M. Xu, C. Chen, J. Ying, “Anomaly detection based on system call 
classification”, Journal of Software, 2004 
[YD 2003] D.Y. Yeung, Y. Ding, “Host-based Intrusion Detection using Dynamic and Static 
Behavioral Models” Pattern Recognition . 2003. 
討會，但可能是因為日本屬於科技先進國家，所以仍吸引了不少知名人物參加。例如在
Role Based Access Control方面相當著名的美國George Mason 大學的Ravi Sandhu教授就
出席此會議並於第二天親自宣讀其與學生合寫的論文，獲得全場聽眾注意聆聽。 
綜觀此次大會所錄取的 30 篇論文，雖然與密碼學有關的論文，如 Signatures, 
Authentication, Encryption and Key exchange, Cryptoanalysis and Implememtation 等就佔了
一半以上的篇數，但值得注意的是，和密碼學沒有直接相關的資訊安全主題，例如Network 
security, Access control, Security evaluation 等論文篇數也佔了三分之一以上。由此也似乎
顯示出，在資訊安全領域，除了傳統密碼學相關的研究題目外，有關系統安全安全實務
方面的研究也引起愈來愈多人的重視和研究興趣。 
本人在這次會議上所發表的論文題目為『Information Flow Query and Verification for 
Security Policy of Security-Enhanced Linux』。此論文的主旨在於提出一個正規的方法來描
述 Security-Enhanced Linux (SELinux)裡面的安全規則，然後以彩色派翠網(Colored 
PetriNet，CPN)為工具，分析此轉換過的安全規則，看看這些安全規則中是否有互相矛
盾不一致之處，以致潛藏資訊洩漏，或資料完整性被破壞等安全問題。論文上台宣讀 25
分鐘，其間聽眾除提出幾個技術細節的問題（如為何要採用 CPN 當分析工具？）外，亦
問到SELinux這個B1安全等級的作業系統在台灣的推廣使用情形為何？本人皆就自己所
知回答。宣讀結束後，亦有日本學者過來進一步交換在資訊流控制(Information Flow 
Control)研究方面的意見，充分達到學術交流的目的。 
巧合的是，這次大會所接受的 30 篇論文中，有一篇日本 NEC 公司研究人員所發表的
論文：『A Model-Based Method for Security Configuration Verification』其研究動
機和目的和本人的有些類似，都是希望發展一套方法及相對應的工具來協助電腦使用者
自動或半自動地檢查電腦以及網路上的各種安全設定，看看是否會造成危害安全目標的
情況發生。只是本人的研究標的鎖定在 SELinux 的安全規則設定，而 NEC 這篇論文的對
象則包括網路設備（如路由器）、作業系統以及應用程式，乃至防火牆的設定，故其需要
針對各種不同的標的，開發出不同的代理人程式來取得各標的上的設定檔，然後作種種
資料正規化的動作，整個系統明顯複雜許多。本人的研究是由國科會支持，屬於純學術
研究，沒想到在這個會議上，會遇到像日本 NEC 這種大公司也會有類似的研究構想，這
