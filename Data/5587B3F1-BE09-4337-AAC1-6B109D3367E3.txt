 2
the assessment of the reliability of a software 
system contains two major tasks: the 
estimation of the reliability of a 
module-based system and the estimation of 
the reliabilities of its individual modules.  
Therefore, we propose an analytical model 
for estimating the reliability of a 
module-based software.  The model 
assumes that the software modules are 
heterogeneous and the transfers of control 
between modules follow a discrete time 
Markov process.  Moreover, the failure 
process of an individual module is assumed 
to be a Non-homogeneous Poisson Process 
(NHPP), and the time-dependent behavior of 
corresponding testing effort is modeled by a 
Logistic distribution.  
In the second part, two of the most important 
applications of SRGM are to be discussed.  
The first one is the optimal testing-effort 
allocation problem. To ensure the overall 
reliability of a module software application, 
software modules in the system have to meet 
certain reliability requirements, subject to 
some resource constraints.  These resources 
include human power, CPU hours, and 
elapsed time, etc. Without loss of generality, 
we call all these resources as the 
testing-effort.  Hence, to develop a good 
reliable software system, a project manager 
must determine in advance how to effectively 
allocate these resources.  The other 
important application is to determine the 
software release time.  In this research, we 
develop a useful method to compute the 
software release time considering cost, 
reliability and testing efficiency during the 
development phase.  We then address the 
problem of how to decide when to stop 
testing and when to release software for use.  
Issues of how we collect the data set, how we 
adopt data-smoothing procedures, how we 
use the techniques, how we evaluate the data 
stability of software reliability growth 
models we proposed, and how we assess the 
accuracy/performance of fault prediction, 
will to be addressed.  We plan to study the 
failure physics and present the censored data 
set in the future.  Besides, we will also 
propose a more accurate way for software 
reliability prediction and the policy for 
probabilistic risk assessment. 
關鍵詞：軟體模組系統，軟體測試，軟體
可靠度，軟體可靠度成長模型，軟體
釋放最佳時間。 
 
 
二、報告內容 
I. Introduction 
A number of studies have been performed on 
the subject of software reliability, many of 
them are focused on black-box based 
Software Reliability Growth Models 
(SRGMs).  That is, they typically consider 
the software system to be autonomous and 
only its interactions with the outside world 
are modeled, without looking into its internal 
structure [1, 2].  More precisely, the 
black-box based approaches are normally 
employed during software testing and a 
testing strategy must be selected to generate 
the necessary data for the estimation.  By 
using the testing data, unknown parameters 
of the models can be estimated and future 
failure behavior can be predicted [3-5].  In 
order to estimate the reliability of a modular 
software system based on its architecture, 
some techniques are required to obtain the 
failure behavior of each modular and the 
knowledge on how the modules are intended 
to interact among themselves during system 
execution.  Therefore, in this paper we 
present an analytical model to estimating the 
reliability of a modular software system, 
based on the failure behaviors of individual 
modules and the system architecture.   This 
integrated approach is based on the fact that 
not only the failure behavior of each module 
can be specified by an appropriate SRGM 
but also the architecture of a module-based 
software system can be modeled as a Markov 
process.  Furthermore, based on the 
architecture of the system, a Markov process 
is formulated under the assumption that the 
reliabilities of the software modules are 
independent and the next transfer of control 
to be executed is independent of the past 
history and depends only on the present 
module.  This indicates that we have 
obtained a stochastic model for 
module-based software systems and can 
derive the overall system failure rate. 
 4
be used for the overall system, there are 
some potential drawbacks.  For example, Eq. 
(1) reveals that each module has equal 
influence on the overall system no matter 
how often it executes.  In practice, the 
frequency of a module being executed affects 
the overall system reliability.  A higher 
frequency indicates a greater effect of that 
module on the performance of the system.  
This fact shows that the modules should have 
distinct weights according to the architecture 
of the software system.  Consequently, we 
propose a new approach to representing the 
effects of weighting on the modules.  This 
means that we add a weight vector to Eq. (1) 
and the new solution is as follows: 
 )(...)()()( 2211 twtwtwt nns λλλλ +++=         (4) 
where the vector of weights (w1, w2, ..., wn) 
represents the importance of each module 
and is obtained based on the system 
architecture. 
III.  SR estimation for software systems 
In this section we describe how to 
evaluate the reliability of a module-based 
software system.   In particular, we 
consider systems with different architecture 
styles and utilize the Markov process to 
model the failure behaviors of the 
applications.  In addition, we develop some 
methodologies to estimating the reliability of 
a software system.  
Mutiple-input/multiple-output system 
Consider a software system with N 
modules, denoted as 1, 2, ..., N.  Let Pij 
represent the probability that the process will, 
when in module i, next make a transition into 
module j. Let {Xn, n=0, 1, 2…} be a Markov 
process with some absorbing states and some 
transient states.  Define the random variable, 
Nij, to represent the number of visits to state j 
before entering an absorbing state given Xo=i.  
The expected value of Nij , E(Nij), is denoted 
by ijμ .  Furthermore, let kη denote the 
probability of absorption when a process 
terminates at an absorbing state k.  
Therefore, in this section we describe how to 
evaluate the reliability of a module-based 
software system.   In particular, we 
consider systems with different architecture 
styles and utilize the Markov process to 
model the failure behaviors of the 
applications.  Some general input-output 
cases were employed.  In addition, we 
develop some methodologies to estimating 
the reliability of a software system. 
Theorem 1: Consider an s-input and r-output 
system.  Let {Xn} be a Markov process 
where {N, N−1, ..., N−r+1} are absorbing 
states (i.e. r output nodes) and {1, 2, ..., N−r} 
are transient states.  In particular, assume 
states {1, 2, ..., s} are the input nodes with  
probability p1, p2, ..., ps, respectively. 
Therefore, we have 
(1)The transformation probability matrix can 
be written as follows: 
NNrNrNrrN
rr
QR
I
P
×−×−×−
× ⎥⎦
⎤⎢⎣
⎡=
)()()(
0
 
where Q is the transformation probability 
matrix corresponding to the transient states, 
rrNR ×− )(  is the matrix of transition probabilities 
from transient to recurrent state, and I is an 
identity matrix of size r.  
(2)The expected value of Nij, denoted as ijμ , 
can be obtained from the inverse of (I−Q).   
(3)The expected number of visits on module 
k, 1+≥≥− skrN , is ∑
=
s
l
lklp
1
.μ  
(4) The probability of absorption at state i, 
iη , 1+−≥≥ rNiN , can be obtained by 
∑ ×−×
= ×−
− −×−
s
j
jirrNrNrNj RQIp
1
)(
1
)()( ))((  
(5) }])()()([exp{(t)R 0
1 1 11
s duupuup
t N
rNl
rN
sk
s
l
klklll
s
l
ll∫ ∑ ∑ ∑++∑−= +−=
−
+= ==
λμληλ  
where )(uiλ  is the failure rate of module i 
Relationship to existing 
architecture-based software reliability 
models  
A software system can be regarded as 
composed of logically individual modules, 
which can be implemented and tested 
independently [2, 5, 13-15].   Under the 
assumption of independence among the 
successive executions of the modules, the 
reliability of the system can be predicted by 
the path-based approaches [2, 14].  That is, 
 6
Q 1=
28
1,
88 09.0
075.0
3.00
4.00
00
00
00
00
01.0000000
000025.0000
3.01.00003.000
06.0000000
006.04.00000
00010000
0003.007.000
00005.05.000
×× ⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢
⎣
⎡
=
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢
⎣
⎡
R
. 
Step 4:  
After some calculations, the inverse of (I−Q1) 
is as follows: 
880050.11119.00168.00162.00280.00050.000
0504.01192.11679.01623.02798.00504.000
3156.03470.00520.13503.00867.03156.000
0302.06715.01007.00974.11679.00302.000
2015.04768.06715.06491.01192.12015.000
0302.06715.01007.00974.11679.00302.100
0302.06715.01007.00974.11679.07302.010
1158.05741.03861.08733.06435.06158.001
×⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢
⎣
⎡
 
Thus, the expected number of visits on each 
transient state before absorption from the 
input nodes (modules 1 and 2) is as follows:  
,3861.0,8733.0,6435.0,61588.0,1 1615141311 ===== μμμμμ
,1679.0,7302.0,1,1158.0,5741.0 2423221918 ===== μμμμμ
0302.0,6715.0,1007.0,0974.1 29282625 ==== μμμμ  
According to (3) in Theorem 1, portion of the 
vector of weights in Eq. (4) can be obtained 
by ∑=
=
2
1
.
l
lklk pw μ   Therefore, we have:  
 (w1, w2, w3, w4, w5, w6, w8, w9)=(0.5, 0.5, 
0.673, 0.4057, 0.9853, 0.2434, 0.6228, 0.073) 
On the other hand, with the aim to computing 
the probability of absorption at each 
absorbing state, the following information 
about the two absorbing states is obtained 
from Theorem 1: 
28
1
1
1
0115.09885.0
1153.08847.0
4557.05443.0
4692.05308.0
4611.05389.0
4692.05308.0
4692.05308.0
4651.05349.0
)(
×
−
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢
⎣
⎡
=×− RQI
 
, and  .5329.0,4672.0 107 == ww  
Step 5: 
From Theorem 1, the reliability of the system 
is estimated by the following equation:  
))]}()0059.0exp((1[4089.23exp{)( 1.241
6.229
1.241
6.229
1 035.0 ++ −×−−×−= − tetR
 
 
 
                         
                        
         
 
 
 
 
 
 
 
 
 
0.5 0.5 
1
2 4
3
5
7
6 
89
10  
Figure 1: A control-flow graph of a 
multiple-input/multiple-output system. . 
Heterogeneous system 
This example from [13] is used to 
demonstrate how to estimate the reliability of 
a heterogeneous system by applying 
Theorem 2.  In [13], the authors presented a 
module-based reliability model that takes the 
reliability of each module and the operational 
profile into account.  In addition, the 
reliability of a heterogeneous architecture 
including batch-sequential/ pipeline, 
call-and-return, parallel, and fault tolerance 
styles is estimated.  Figure 2 depicts the 
control-flow graph of this example. It 
consists of 15 modules in which module 1 is 
the input module and module 15 the output 
module.  Specifically, Modules 3 and 4 
could be regarded as concurrent modules, 
Modules 9 and 10 as backup modules, and 
Modules 5, 8, and 11 as call-and-return 
modules. Therefore, a series of derivations 
are obtained in the following:  
Step 1~ Step 3:  
1414
00000000000000
4.00000000000000
05.000000000005.00
15.05.000002.000000015.0
03.07.000000000000
03.07.000000000000
0008.0000002.00000
00025.0375.0375.000000000
000045.045.001.0000000
00000010000000
00000001000000
00000001000000
00000000100000
00000000003.03.04.00
2
×
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
=Q
  
 
 8
用、實際系統開發或論文發表上的質與量
進度表現，均已達成原設定之階段性目標。 
 
 
四、參考文獻 
 
[1] M. R. Lyu(1996). Handbook of Software 
Reliability Engineering. McGraw-Hill. 
[2] S. S. Gokhale, “Analysis of Software Reliability 
and Performance,” Ph.D. Dissertation, 
Department of Electrical and Computer 
Engineering, Duke University, Durham, NC, 
USA, 1998. 
[3] J. D. Musa, A. Iannino, and K. Okumoto (1987). 
Software Reliability, Measurement, Prediction 
and Application. McGraw-Hill.  
[4] J. D. Musa (1998). Software Reliability 
Engineering: More Reliable Software, Faster 
Development and Testing. McGraw-Hill. 
[5] R. C. Cheung, "A User-Oriented Software 
Reliability Model," IEEE Trans. on Software 
Engineering, SE-6(2), pp. 118-125, March 1980. 
[6] D. M. Woit, "Specifying Component Interactions 
for Modular Reliability Estimation,'' Proc. 1st 
International Software Quality Week Europe 
(QWE'97), November 1997. 
[7] J. H. Lo and S. Y. Kuo, and C. Y. Huang, 
"Reliability Modeling Incorporating Error 
Processes for Internet-Distributed Software," 
IEEE Region 10 International Conference on 
Electrical and Electronic Technology (TENCON 
2001), pp. 1-7, Aug. 2001, Cruise Ship, SuperStar 
Virgo. 
[8] J. H. Lo and S. Y. Kuo, M. R. Lyu, and C. Y. 
Huang, "Optimal Resource Allocation and 
Reliability Analysis for Component-Based 
Software Applications," Proceedings of the 26th 
IEEE Annual International Computer Software 
and Applications Conference (COMPSAC 2002), 
pp. 7-12, Aug. 26-29, 2002, Oxford, England 
[9] J. H. Lo, C. Y. Huang, S. Y. Kuo, and M. R. Lyu, 
"Sensitivity Analysis of Software Reliability for 
Distributed Component-Based Software 
Systems," Proceedings of the 27th IEEE Annual 
International Computer Software and 
Applications Conference (COMPSAC 2003), pp. 
500-505, Nov.3-6, 2003, Dallas, Texas, USA. 
[10] J. H. Lo, C. Y. Huang, I. Y. Chen, S. Y. Kuo, and 
M. R. Lyu, “Reliability Assessment and 
Sensitivity Analysis of Software Reliability 
Growth Modeling Based on Software Module 
Structure,” Journal of Systems and Software, Vol. 
76, Issue 1, pp. 3-13, April 2005. 
[11] K. S. Trivedi.  Probability and Statistics with 
Reliability, Queuing and Computer Science 
Applications.  Prentice-Hall, Englewood Cliffs, 
New Jersey, 1982. 
[12] M. Xie and M. Zhao, "The Schneidewind 
Software Reliability Model Revisited," 
Proceedings of the 3th International Symposium 
on Software Reliability Engineering (ISSRE'92), 
pp. 184-192, May 1992.  
[13] W. L. Wang, Y. Wu, and M. H. Chen, "An 
Architecture-Based Software Reliability Model," 
Proceedings of the Pacific Rim International 
Symposium on Dependable Computing, pp. 
143-150, December 1999. 
[14] S. Krishnamurthy and A. P. Mathur, "On the 
Estimation of Reliability of a Software System 
using Reliabilities of its Component", 
Proceedings of the 8th International Symposium 
on Software Reliability Engineering, pp. 146-155, 
November 1997. 
[15] B. Littlewood, "Software Reliability Model for 
Modular Program Structure", IEEE Trans. on 
Reliability, vol. 28, No. 3, pp. 241-246, August 
1979. 
[16] A. L. Goel and K. Okumoto, “Time-Dependent 
Fault Detection Rate Model for Software 
Reliability and Other Performance Measures, 
“ IEEE Trans. on Reliability, Vol. R-28, No. 3, 
pp. 206-211, 1979. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
