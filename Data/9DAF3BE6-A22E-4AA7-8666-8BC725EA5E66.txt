Collaborative Planning and Scheduling in Semiconductor
Manufacturing;
Subproject 2: Research on Simulation-based Ordinal
Optimization Methods with Applications to Production
Scheduling of 300mm Foundry Fabs;
Subproject 3: Shop Floor Control of Hot Lots in 300mm
Wafer Manufacturing;
Subproject 4: Evolutionary Process Optimization Methods
for Multi-stage Manufacturing Systems with Applications to
Semiconductor Yield Rump-up.
The main project aims at establishing a benchmark
environment and integrating the data sets, models and
optimization tools of individual subprojects into it.
In the first year, we constructed a simple skeleton of the
benchmark system, which includes adopting object-oriented
technology for system analysis, design and software
implementation. The configuration of the benchmark
environment included a web server, one database server,
and one optimization tool server. Within the database
server, PostgreSQL was adopted as the database
manipulation software. Our web server adopted Apache as
the web server and will use PHP as the scripting language to
connect the web page stored in the web server to the
database server. PHP also added interaction functionality to
our web page to users from outside. The web site was built
with HTML language with PHP embedded to enhance its
functionality. Other web page techniques, such as java
script, CSS, may also be added in the process of website
building.
In the second year, we designed and developed an
environment for benchmarking optimization tools of
foundry manufacturing services. In specific, a close-loop-
control mechanism is designed, which consists of three
levels of processes (collaborative, analytic, and operational)
for three specific roles (subproject owner, website manager,
and system visitor). Based on the close-loop-control design,
we developed a scalable framework for benchmark
environment and the architecture for flexible integration of
optimization tools. Specific implementations include the
web-based project repository management, customized page
editor, website structure management, website explorer and
generic tool adaptor.
二、研究進度與成果
I. Introduction
The major achievements of this main project are the
constructions of the architecture for flexible
optimization-tools integration and a framework for
scalable benchmark-environment development. In
addition, on top of the two achievements, we further design
and develop a benchmark system to support the
processes in operational, analytical, and collaborative
levels [1].
During the past three years, four subprojects aiming to
the optimizations for 300mm foundry manufacturing service
provisions are in proceeding. It raises two challenges to
concurrently develop the benchmark system while the
optimization methodologies and tools in each subproject are
under development.
C1. How to integrate heterogeneous optimization tools
into the benchmark system? In specific, these
optimization tools maybe individually developed in
each subproject or contributed by other organizations.
C2. What is the most efficient way to continuously
enrich the benchmark system? In specific, the
benchmark system should easily integrate all the up-to-
date research results from each subproject and
feedbacks from system visitors.
To cope with C1, the architecture for integrating
heterogeneous tools is designed and implemented so that
the benchmark system manager can flexibly access and
manage these tools. The key for heterogeneous tools
integration is the design of a generic tool-adaptor, based
on which three extension adaptors are developed to support
the integration of execution files, dynamic linking libraries,
and web service.
To face with C2, a framework for developing a
scalable benchmark system is designed and constructed
so that each subproject owner can individually design and
manage their latest research results on the benchmark
system. As demonstrated in Fig 1, it is designed to support
the continuous benchmark and improvement in
optimization tools for 300mm foundry manufacturing
services. In addition, the development of framework aims
to supporting the close-loop-control mechanism providing
three levels of processes (collaborative, analytic, and
operational) for three specific roles (subproject owner,
website manager, and system visitor).
II. Design and Development of Benchmark Environment
II.1 Design Goals and Requirements
Our goal in developing a benchmark system is to
provide an environment for continuous benchmark and
improvement in optimization tools for 300mm foundry
manufacturing services. In specific, the benchmark system
should support the closed-loop-control mechanism to
efficiently integrate all the up-to-date research results from
each subproject and all the insightful feedbacks from system
visitors. To fulfil these requirements, the roles and
processes involved in a benchmark environment are first
analysed and designed. Then a framework for developing a
scalable benchmark system is designed and constructed.
In our design of benchmark system, there are three
roles: subproject owner, website manager, and system
visitor. According to the interactions between the roles and
the benchmark system, three levels of processes are
identified: operational, analytic, and collaborative. Fig 2
demonstrates the roles and processes involved in a
benchmark environment through a table format, where the
major functions/requirements for each combination of a role
and a level of process are demonstrated as list items in each
system as server side computing service. Otherwise, since
confidential issues may arise when sharing some tools, the
web-service [9] components from remote server could be
then designed and integrated into the system.
Due to various program developing platforms, we are
facing different formats of analytic tools. There are two
major issues:
I1. The analytic tools are shared as execution files (.exe)
or dynamic linking libraries (.dll). Also, developers of
some tools might just provide web-service components
for remote accessing via internet.
I2. The provided tools or service may require input files
for program settings. The formats of input files are
surely different. Furthermore, the output file as the
analyzed results of each tool would be varied.
To deal with different types and formats of tools, we
first design an adaptor (a generic tool adapter), to handle
external tools from various sources. Then, specific adapters,
ex: EXE Adapter and DLL Adapter, inherited from Adapter
are designed to integrate specific types of tools into
Benchmark system.
III.2 An Example of Optimization-Tools Integration
Here, we use an example to demonstrate the mechanism
of optimization-tools integration. Assuming Dr. Hu from
NTU provides a discrete event dynamic system (DEDS)
simulator [10] to be integrated into Benchmark system as a
web-based computing service. This tool is shared as an
execution file (.exe) which is developed in C language and
compiled by Visual C++ 6.0. It also needs to be set up by
specific input settings defined in a text file. After running
the program, simulation statistics and results are written in
an output file. The standard procedures to integrate this tool
into the system are as follows:
a. Collect the execution file (includes run-time
components) and input files. Upload these files to the
designated directory by using the project repository
management on Benchmark website.
b. To execute the DEDS simulator on the Benchmark
web page, a “deds.php”file is created by using the
EXE Adapter. The designed page should perform four
functions:
(1) Allow clients to upload modified input files.
(2) Provide a user interface where the parameters for
various scenarios and strategies could be
manually set by clients.
(3) Execute the tool based on the given input settings
and parameters.
(4) Display the simulation results and http link for
downloading the output files.
c. We then establish a classification node in Web
Structure and connect it to the designed page
(“deds.php”). Therefore clients could access and use
the computing service on this page via internet.
d. Finally, we demonstrate this tool from client-side and
test if it works well. As can be seen in Fig 14, the page
“deds.php”contains all necessary functions. After
execution, Fig 15 shows up a page with simulation
results. The output file is also downloadable on the
page.
III.3 Summary of Optimization-Tools Integration
To achieve the goal of benchmarking developed tools,
we design the integrating mechanism, which includes
extendable adapters and standard procedures, to integrate
external analytic tools into Benchmark system. As can be
seen in Fig 16, there might be more varied sources of tools
in the future. Follow the procedure described in section
III.2, we could build a extendable web-based test board to
integrate more varied analytic tools and provide overall
computing service for benchmarking.
III.3 Optimization Tools Developed by Individual
Subprojects (2nd Year)
Subproject 1: a collaborative scheduling tool for
semiconductor supply chain
This project proposes to develop enabling
technologies for collaborative planning and scheduling in
semiconductor supply chains. In the second year, our
progress includes a study of system dynamics of production
operation, completion of scheduling tools for the chains, and
an analysis of the behavior of material flow in the chains.
Subproject 2: Ordinal optimization-based policy
iteration algorithm for dynamic schedule composition
In the second year, we have completed the design, and
convergence analysis of an OO-Based Policy Iteration
(OOBPI) method to handle the combinatorial complexity of
decisions over the time axis for dynamic composition of
production schedules. Utilizing the framework of policy
iteration, we approximate the optimal cost-to-go and
optimal decision of each state by simulation-based OO.
Priority service disciplines are also included into the
simulator.
Subproject 3: Dispatching policy and simulator for
differentiated material handling services
In the second-year research, we accomplished three
designs:
(1) a differentiated preemptive dispatching policy to
expedite the movement of high priority products to the
extreme while keeping the incurred delays on regular
ones being acceptable;
(2) an optimization-based vehicle control system for
differentiated 300mm AMHS with the help of integer
programming techniques;
(3) Lagrangian relaxation and Gauss-Seidel iteration
methods for shop floor control of hot lots by allocating
proper quota of each priority level of products such
that the overall throughputs are maximized while the
specified cycle time performances of each priority level
are satisfied.
Subproject 4: An evolutionary process optimization
(1) a collaborative scheduling tool for semiconductor
supply chain,
(2) an ordinal optimization-based policy iteration
algorithm for dynamic composition of production
schedules,
(3) a differentiated pre-emptive AMHS dispatching
policy and simulator for differentiated material
handling services, and
(4) a confidence interval minimization-based
sequential experiment design procedure for the
optimization of multi-step processes.
三、參考文獻
[1] http://140.112.37.24/benchmark/ui_user_view.php
[2] O. Zimmermann et al, “Elements of Service-Oriented
Analysis and Design”, http://www-128.ibm.com/
eveloperworks/webservices/library/ws-soad1/
[3] A. Arsanjani, “Service-Oriented Modeling and
Architecture”, www.ibm.com/developerworks/webserv
ices/library/ws-soa-design1/
[4] F. Buschmann et al, Pattern-Oriented Software
Architecture, Volume 1: A System of Patterns, John
Wiley & Sons, 2001.
[5] G. Booch, Object-Oriented Analysis and Design with
Applications, Addison-Wesley Professional, 1993.
[6] Resource Description Framework (RDF),
http://www.w3.org/ RDF
[7] A. Dennis, Systems Analysis and Design with UML
Version 2.0 : An Object-Oriented Approach, John
Wiley & Sons, 2004
[8] H. Eriksson, UML 2 Toolkit, Wiley,2003
[9] A. Ryman, “Understanding Web Services”,
http://www-128.ibm.com/developerworks/websphere/
library/techarticles/0307_ryman/ryman.html
[10] M. Hu, Translating Overall Production Goals into
Distributed Flow Control Specifications for
Semiconductor Wafer Fabrication, Ph.D. Thesis,
Institute of Electrical Engineering, National Taiwan
University, 2002.
四、發表論文
[1] Chih-Min Fan, Shi-Chung Chang , Henry Chang,
“Design of Collaborative Engineering Data System (CEDS):
an application case of process integration,”Proceedings of
International Symposium of Semiconductor Manufacturing,
Tokyo, 13-15 Sept. 2005, pp. 43-46.
Fig 7: The binding of project repository folder and
customized page
Fig 8: The environment for website structure management
Fig 9: Selection of a page-file to bind with a website
structure node
Fig 10: Website structure after binding
Fig 11 System user view page on the website explorer
Project
Repository
Website
Management
Website
Explorer
Structure
Node
Project
Folder
Page
File
1
*
*
1
Tree
Manager
Tree
Node
Generic
Object
Fig. 12: The class diagram of a benchmark system
Figure 19: Process response surface
Fig 20: The contour plots of sequential steps for process
improvement.
Project Owner
Project
File Vault
Upload The
Research Results
1
Website Manager
Website
Structure
2
Setup The
Website Structure
System Visitor
Benchmark
Explorer
3
Explore the
Website Pages
4 Issue Tracking
Fig 21: Issue tracking mechanism for closed-loop
management process
0
0
0
-2
-2
2
-4
-6
2
4
6
8
(a)
(b)
0
0
0
-2
-2
2
-4
-6
2
4
6
8
0
0
0
-2
-2
2
-4
-6
2
4
6
8
The estimated optimum
(c)
(d)
