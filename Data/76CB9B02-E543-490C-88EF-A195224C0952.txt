kinds of information and communication equipments in 
heterogeneous networks, such as hand-set devices, multimedia 
devices etc. Thus we could truly implement the spirit of Ubiquitous 
Cloud Service. In addition, Cloud Service Scheduling and Cloud 
Resource Allocation Scheme could promote success rate of Cloud 
Service execution effectively and reduce service-waiting time. 
We formulate our research objectives of this project as follows: 
1. Research and development of Cloud Service-oriented 
Architecture Platform 
2. Research and development of Cloud Service scheduler 
3. Research and development of Proactive Resource Allocation 
Scheme 
4. Environment building and system performance assessment of 
Cloud Service-Oriented Architecture Platform 
 The outcomes of this project will be able to integrate the gap 
between SOA and Cloud Computing Platform, to expand the 
territory of Cloud Service, and to create business opportunities of 
Cloud Service industry. 
 
 
 2 
基於雲端計算之社群網路服務探勘整合與分享機制研發 
 
摘要 
本計畫為延續 98年度專題研究計畫“基於雲端計算之社群網路服務探勘、整合與分享機制
研發”(98-2221-E-168-032-)之連續性研究型計畫。本計畫之研究目的為基於上年度(98年度)研
究計畫之具體成果：創新個人代理人服務導向自動化平台 (PASOP, Personal Agent 
Service-oriented Platform)之建置與開發、複合式服務描述模組(Composite Service Profile Model)
建置與開發以及前瞻資源配置機制(Proactive Resource Allocation Scheme)研發，進而提出創新個
人代理人雲端服務導向自動化平台(PACSOP, Personal Agent Cloud Service-oriented Platform)，並
在此平台實現雲端服務排程 (Cloud Service Scheduling)與雲端資源配置 (Cloud Resource 
Allocation)之研發。本計畫之研究成果具體說明如下： 
 創新個人代理人雲端服務導向自動化平台(PACSOP)之研發 
該平台整合 PASOP 與雲端運算架構，能有效將雲端運算服務(Cloud Service)由複合式服務
描述模組(Composition Service Profile Model)描述並導入 PASOP。該平台具有下列之創新性： 
1. 整合異質網路之數位化裝置於雲端運算架構中：PACSOP能整合異質網路之數位化裝
置並提供雲端雲端運算服務，使得雲端運算架構不再只是伺服器，而能涵蓋使用者週遭之裝置
(如：數位家電設備、PDA、手機等等)，真正落實 Ubiquitous Service之目標。 
2. 整合情境資訊收集與推論機制於雲端運算架構中：藉由 PACSOP 整合感測裝置及推
論機制於雲端運算架構，使得雲端運算架構具有個人化情境感知功能。 
3. 整合使用者為中心之服務推薦與提供機制於雲端運算架構中：藉由 PACSOP 結合個
人代理人平台，使得雲端運算架構具有個人化服務推薦與提供機制。 
 雲端服務排程器(Cloud Service Scheduler)機制之研發 
在服務導向架構中，服務排程是由工作流程的概念所產生，工作流程已在資料庫、資訊系
統的研究與開發社群中廣泛被應用。而在雲端運算的工作流程，所需克服的主要問題則是如何
使底層設備支援以使用者為中心的工作流程導向視角(Workflow-Oriented View)。在本計畫中，
我們將開發工作流程模組以及排程機制，使得雲端服務能符合雲端架構上的資源狀態，並能動
態的改變複合式雲端服務(Composition Cloud Service)內部包含的簡單雲端服務(Simple Cloud 
Service)，並給予適當的排程，以期在適當的時機配置合適的資源以順利運行工作流程，使得
雲端服務能有效被執行。 
 前瞻雲端資源配置(Proactive Cloud Resource Allocation)機制之研發 
在現有的雲端計算架構下，有三種較常見的資源管理方式：基本的 Torque/Maui Resource 
Manager、Yahoo所開發的 Capacity Scheduler以及 Facebook所開發的 Fair Scheduler，此三種機
制皆具有 Priority的管理，能設定資源的優先使用權以及 Garbage Collection，具備能配合 HDFS
的Map/Reduce機制。而本計畫開發之前瞻雲端資源配置(Proactive Cloud Resource Allocation)
機制結合現有資源管理方式與上年度(98年度)研究計畫研發之前瞻資源配置機制，能有效達成
雲端資源配置之最佳化。 
本計畫為研究建立服務自動化平台，研究如何做到服務探勘和複合性服務，以及個人化的
服務，並且針對服務彼此的執行衝突提出解決方法。接著將此平台運用在社群網路上，透過彼
此分享的服務，探勘社群分享服務的特性，及如何透過社群網路找尋和分享服務方法。後期以
 4 
在雲端技術，最底層為基礎架構，強調動態和虛擬化及可靠分享機制，中間層為應用平台服
務，而我們要考量以SOA(Service-Oriented Architecture)的架構來討如何將雲端上的服務應用，
結合到我們開發的自動化服務平台上來做運用。 
 雲端技術之可靠性及安全性研究 
由於雲端技術的概念，是要將龐大的資訊及服務放在網路上，供彼此大家分享，這時如何做
到個人資料的安全性會是重要的議題，以及所分享的資訊服務的可靠信賴程度，將會是必須
考量的部分。在安全性上，要提供符合標準的安全建置以及更好的管理模式來給終端的使用
者。 
 社群網路服務在雲端技術上的探勘及管理研究 
Google的Gmail或者是Facebook都是是需要龐大的運算機制，而社群網路所提供的服務，彼此
之間具有一定的關連性，要如何將他應用在雲端技術上，以及要如何去將這些社群網路服務
做好管理和表示，將會幫助我們之後的服務自動化平台的使用更加提升其效能。 
研究方法與成果 
本計畫主要在研究建立服務自動化平台，並且延伸至社群網路應用，及雲端架構上的研究，
在未來 Cloud Computing的技術會是重要的研究議題。所以在此計畫的研究階段，主要分為三
個時期(1)建立服務自動化平台(2)服務自動化平台應用在社群網路上(3)將平台與雲端技術架構
做結合。能夠在家庭裡面有服務自動化平台，並且可以和其他家庭結合成社群網路，達到資源
服務共享的理念，並且透過雲端技術的架構，能夠將服務分享到「雲」上，讓一般遠端的使用
者，也可以做存取。 
(1) 建立服務自動化平台 
在本計畫我們以 SOA為架構的 OSGi平台來建置我們的服務自動化平台。由於 OSGi平台可
以整合不同的協定，所以我們可以透過 UPnP (Universal Plug & Play)協定，讓家庭的裝置的服
務也可以達到以服務的形態存在。 
 
圖 1.  服務自動化平台架構圖 
 
 6 
services而不需要去學習複雜的描述語言。 
c. 具有彈性：同樣地，透過視覺化的服務描述方式，發展一個 ubiquitous service就會像是
在組合一個 LEGO積木一樣可以很容易地改變 ubiquitous service的結構。 
Music 
selection
Music 
execution
Emotion 
recognition
Facial 
expression Emotion
Selected 
musicFacial 
expression 
acquisition
Description of Ubiquitous Service
Service Profile of Ubiquitous Service
is1
is2
is3
is4
it1
it2
it3
 
圖 2. An example of Service Profile (SP) 
另外，由於 ubiquitous service 可以提供許多種不同的服務品質等級來滿足不同的使用者，SP
也必須定義不同服務品質等級所需要的資源與頻寬以選擇一組適當的裝置來滿足使用者對於
ubiquitous service所提出的品質要求。可以下列兩個資料結構來描述一個 ubiquitous service在
不同服務品質等級對於資源與頻寬的要求： 
 Demanded Resource Estimate (DRE). 定義在每一個服務品質等級下完成 ubiquitous 
service對於執行每一個 system service的裝置的資源要求。可以一個 iq -by- iv -by- m的矩陣來描
述，其中 iq 、 iv 、與m是此 ubiquitous service提供的服務品質等級個數、包含的 system service
個數、以及資源型態的個數。 
 Demanded Bandwidth Estimate (DBE). 定義在每一個服務品質等級下完成 ubiquitous 
service 對於執行每一個 interaction 的網路路徑的頻寬要求。可以一個 iq -by- ie 的矩陣來描述，
其中 iq 與 ie 是此 ubiquitous service提供的服務品質等級個數與包含的 interaction個。 
 Ubiquitous Network模型 
為了能夠提供資源使用率以及高品質的服務給使用者，我們也必須蒐集最新的網路狀態。因
此，需要一個 Ubiquitous Network (UN)模型來描述網路拓樸、裝置支援的 system services與所
剩資源、以及網連結所剩頻寬。相同地，利用 vertex 和 edge 來代表裝置與裝置之間的網路連
結。可以下列兩個資料結構來描述裝置的所剩資源與網路連結所剩頻寬： 
 Available Resource Estimate (ARE). 定義一個裝置所剩餘的資源。可以一個長度為m的陣
列來描述，其中m是資源型態的個數。 
 vailable Bandwidth Estimate (ABE). 定義一個網路連結所剩餘的頻寬。可以一個簡單的數
值來描述。 
 Ubiquitous Service Discovery. 
Ubiquitous service discovery是找尋適當裝置以執行服務的機制。此機制必須收集網路元件(包
含各式各樣的裝置以及網路連結)的狀態。Ubiquitous Service Discovery機制必須整合底層的資
訊擷取技術以獲得最新的網路狀態。本計畫擬整合多種底層通訊協定，如 Universal Plug and 
Play (UPnP)以及 Link Layer Topology Discovery Protocol (LLTD)等。此機制所收集的資訊主要是
在 ubiquitous service discovery中選擇適當的裝置來執行使用者所要求的 ubiquitous services需要
考量上述資訊。 
 8 
管理與服務排程等問題。然而，在多使用者的環境下而且在裝置資源與網路頻寬的，要同時提
升所有 requested ubiquitous services的服務品質是一個相當困難的問題。此問題的本質很類似
著名的MMKP問題，說明如下： 
Maximize ∑∑
= =
n
i
c
j
ijij
i
xu
1 1
 
subject to ∑∑
= =
∀≤
n
i
c
j
kijijk
i
kRxr
1 1
 ,  
∑
=
∀=
jc
j
ij ix
1
 ,1  
where  ,
otherwise0
 service ubiquitousfor 
 selected is devices ofset th -j  theif1




∀= jiixij  
其中 iju 為所提出 adaptive QoS utility function所得到的 utility值、 ijkr 為所需要的裝置資源與網
路頻寬、而 kR 為裝置資源與網路頻寬的限制。然而，當裝置資源與網路頻寬無法滿足所有使用
者時，服務的排程就成為必須探討的重要議題之一。如何降低使用者平均等待時間得依據
ubiquitous service所需要的資源、執行的時間、以及現存的資源及頻寬進行考量。同樣地，此
問題也很類似多處理器且有資源限制的排程問題。 
(2) 服務自動化平台應用在社群網路上 
我們希望藉以第一階段所開發出來的平台，應用在社群網路上，可以達到資源和服務分享的
機制，不但可以在不同的家庭當中建立群組，也可針對家族間或父母和兒子分居兩地，建立「虛
擬家庭」的概念。我們可以以每個家庭群組建立一個獨特的 ID，利用 VPN來建立通到，讓在
這群組底下的家庭，可以互相存取服務來做使用。 
利用此平台建立社群可以應用在幾個方面，例如像居家安全監控，可以透過社群間，當有家
庭外出或是有老人在家時，若無法親自監控的話，可以使社群間彼此互相幫忙監控，這樣一來
也可以達成社區獨居老人的居家健康安全監控；或是也可讓社群間可以彼此分享多媒體資料，
或是服務裝置共享等功能，其在本計畫中達到的社群網路應用部分如下圖所示，可以分成兩部
分，若要為私密的部分的活動或事件，可以由虛擬家庭的概念來實現；而其左半邊為社群和社
群之間互相分享的部分；再結合這兩部分可以開發出開放論壇、電子商務和線上娛樂等功能。 
 10 
以整體的觀點來看，Service-based的相關活動都是由工作流程的概念所生的。IT-assisted的工
作流程是以一系列使用資訊技術解決問題的結構化的活動與運算。工作流程已在資料庫、資訊
系統的研究與開發社群中受到相當大的注目。雲端運算的工作流程，所需對付的主要問題是下
層設備是否能夠支援現實世界中工作流程導向視角(Workflow-Oriented View)，例如單一
(Individual)或聚合(Aggregated)的運算資源及其他資源的隨選與預約存取(On-Demand and 
Advance-Reservation Access)、自動化、將資源與潛在不同的「雲端」群組化及分配工作流程中
的產出、適當的安全與隱私等級等。 
本計畫建立服務自動化平台，之後應用在社群網路上，其最終目的，希望能導入到雲端技術
的架構，由於建立社群網路服務分享及應用機制，需要龐大的資源和伺服器，所以我們以雲端
的架構來實現的話，可幫助使用者(Service User)、服務整合與提供者(Services Integration & 
Provisioning)、服務設計者/開發者(Service Author)進行先期的研究，例如：服務整合與提供者
應能夠專注在為 End-User建置複合式的服務與協調解決方案。包括取樣、檢視、組合現有的
服務，開發新的複合式服務，又稱 Service-Composition。服務整合與提供者可能是熟知利用各
種工具與語言的自動化流程專家、了解如何聚合服務與要聚合哪些服務的領域專家、協調終端
使用者需求與「雲端」服務的專家等。 
 
(4) 創新個人代理人雲端服務導向自動化平台(PACSOP)之研發 
如圖 6 所示，該平台建置於 Hadoop 架構之上，將雲端服務以複合式服務模組描述之，並由
PACSOP 管理、排程與資源配置，並透過 MapReduce 落實於雲端計算架構。PACSOP 之組成
包含三個主要元件：服務包層(Bundle Layer)、雲端資源配置(Cloud Resource Allocation)機制以
及雲端服務排程器(Cloud Resource Allocation)。 
 
 
圖 6. 個人代理人雲端服務導向自動化平台(PACSOP) 
 
服務包層包含提供四種不同類型之服務包，包含：Cloud Service Composition Bundle Layer、
Communication Bundle Layer、Device Bundle Layer以及 Agent Bundle。分別說明如下： 
 12 
TaskTracker則為底下的 Slave個別管理；但目前這些方法僅適用於同質性 Computing Node的
資源分配上。在本計畫中，異質性的 Node：包括 Computing Node、Application Node、Storage 
Node 三種，在進行 Workflow 的 Service執行時，往往是這三種節點的交互運作，我們可以將
這三種節點分為不同屬性的 Pool，在排程時，分別根據 Pool的屬性得到所需要的節點。 
前瞻雲端資源配置(Proactive CR Allocation)機制將前瞻資源配置機制之演算法結合 Capacity 
Scheduler。藉由動態取得 HDFS與 HBASE之資源狀態，在複合式雲端服務排程時，預測所需
雲端資源並依 HDFS與 HBASE之資源狀態先做資源配置，此一機制將可大幅提升複合式雲端
服務之執行成功率並降低服務等待時間。 
JobTracker
CapacityScheduler
TaskTracker
Heartbeat
Client
Submit
Job
Queues Jobs
•Guaranteed Capacity
•Current Capacity
•ReclamationInfo
•UserInfo
•Waiting queue
•Running queue
•Sorted by priority and 
submission time
TaskTracker
 
圖 8. Interaction between M/R framework and schedulers 
(6) 雲端服務排程器(Cloud Service Scheduler)之研發 
雲端服務排程器使得複合式雲端服務能符合雲端上目前的資源狀態，並能動態的改變複合式
雲端服務中所包含的簡單雲端服務，並給予適當的排程，以期在適當的時機配置合適的資源以
順利運行工作流程，使雲端服務能有效被執行。如圖 9所示，一個用來播放符合使用者心情的
音樂的 ubiquitous service可以由四個 system services以及三個 interactions來完成，不同的是，
我們在 Device Layer上加入其他的雲端節點(Cloud Node)：E1&E2。 
在傳統 SOA架構中，由一個節點負責的運算；而在 CSOA架構中，則分散由多個節點來同時
進行運算。另外我們也將 System Service Layer上的服務定義為由不同雲端節點所提供的雲端
服務，這些服務隨時能夠由其他能夠提供類似服務的節點所取代。因此，執行步驟便會因為加
入雲端運算的部分，而改變如下： 
 Workflow會根據 System Service Layer上的雲端服務狀況，動態更新Workflow內的服務
組成。“Facial expression acquisition”系統服務在”camera”裝置執行擷取使用者的表情。
“Emotion recognition”系統服務在 E1及 E2上裝置上執行雲端運算，根據在圖”camera”裝
置所得到的使用者表情來判斷使用者的情緒，計算完成後將各個節點運算的結果整合，傳送至
Workflow中下一個服務的節點。“Music selection”系統服務在“music center”裝置上執行並
根據在圖中” emotion recognition system”裝置所得到的使用者情緒來選擇適合的音樂。
“Music execution”系統服務在“music player”裝置上執行並播放在圖中“music center”裝
置所選出來的音樂。 
 14 
性節點運算的可能。 
 
圖 10. An example of computing node model 
 
 
圖 11. An example of dynamic service workflow binding 
 
 Dynamic Workflow Binding 
由於雲端服務的發展，使用者所需的服務常常會動態地改變，除了使用者所在地的更新以及
其他 Context 的改變外，提供服務的節點也常會處於變動的狀態，一個服務可能隨時由其他服
務或是複合服務替換；因此我們想發展一個 Dynamic Workflow Binding的機制，目前現有的機
制使用自動機理論(Automata Theory)，設定 Transition Function 以及 Transition Constraints，來
限定河時會改變 Service Workflow的組成。以圖 11舉例說明，圖中並行的兩條服務虛線箭號
代表 Choice Service：假設{S 3} = {S6, S7}，在時間 T1時，由於某些因素，使得 S6以及 S7 服
務可以被使用，在這樣的 Service Node狀態改變下，我們會產生一條由{S6, S7}組成的 Choice 
Service路徑，這條路徑會和{S 3}並行，每當 Service Workflow執行到 S 1時，可以選擇其中一
條路徑往下執行；而另一個服務 S3 在時間 T1變為不可用狀態，會使得{ S1 S3  S4  
S5 }這條路徑變為不可用，原來的路徑便被砍掉。 
S0 
S1 
 
S2 
 
S3 
 
S5 
 
S4 
 
T0 T1 
S0 
S1 
 
S2 
 
S3 
 
S5 
 
S4 
 
S6 
 
S7 
 
 16 
25000
30000
35000
40000
45000
50000
55000
60000
PMR
(30%_60%_10%)
PM
(60%_30%_10%)
PH
(30%_30%_40%)
CPU_Bound
(0%_100%_0%)
I/O-Bound
(100%_0%_0%)
To
ta
l C
SP
 C
om
pl
et
io
n 
Ti
m
e
Distribution of Pool Type
(PM_PMR_PH)
PPA
FIFO
 
圖 14. Total CSP completion time in various distribution of pool type 
 
 
 
參考文獻 
[1] Rajkumar Buyya, Chee Shin Yeo, and Srikumar Venugopal, Market-Oriented Cloud Computing: 
Vision, Hype, and Reality for Delivering IT Services as Computing Utilities, The 10th IEEE 
International Conference on High Performance Computing and Communications, 2008. 
[2] I. Foster, Y. Zhao, I. Raicu, S. Lu, “Cloud Computing and Grid Computing 360-Degree Compared,” 
Grid Computing Environments Workshop, 2008. GCE ‘08, Nov. 2008, pp. 1-10. 
[3] Xen, http://www.xen.org/ 
[4] KVM, http://www.linux-kvm.org/page/Main_Page 
[5] L. Wang, J. Tao, M. Kunze, “Scientific Cloud Computing: Early Definition and Experience,” The 
10th International Conference on High Performance Computing and Communications, Sept. 2008, 
pp. 25-27. 
[6] J. Dean, S. Ghemawat, “MapReduce: Simplified Data Processing on Large Clusters,” 
http://labs.google.com/papers/mapreduce.html, appeared in: OSDI‘04: Sixth Symposium on 
Operating System Design and Implementation, San Francisco, CA, December, 2004. 
[7] J. Dean, S. Ghemawat, “MapReduce: Simplified Data Processing on Large Clusters,” 
Communications of the ACM, vol. 51, no. 1, Jan. 2008, pp. 107-113. 
[8] Hadoop, http://hadoop.apache.org/core/ 
[9] HBase, http://hadoop.apache.org/hbase/ 
[10] Pig, http://hadoop.apache.org/pig/ 
[11] C. Olston, “Pig: web-scale processing”, http://www.cs.cmu.edu/~olston/pig.ppt, 2008. 
[12] H.-c. Yang, A. Dasdan, R.-L. Hsiao, and D. S. Parker, "Map-reduce-merge: simplified relational 
data processing on large clusters," in Proceedings of the 2007 ACM SIGMOD international 
conference on Management of data, Beijing, China: ACM, 2007. 
[13] C. Olston, B. Reed, U. Srivastava, R. Kumar, and A. Tomkins, “Pig latin: a not-so-foreign language 
for data processing,” in Proceedings of the 2008 ACM SIGMOD international conference on 
Management of data Vancouver, Canada: ACM, 2008.  
 18 
[35] P. Basu, W. Ke, and T. D. C. Little, “Dynamic Task-Based Anycasting in Mobile Ad Hoc 
Networks”, Mobile Networks and Applications, 8(5), pp. 593-612, 2003. 
[36] C.-C. Su, K.-S. Lu, M.-F. Horng, C.-L. Chen, Y.-H. Kuo, J.-P. Hsu, and W.-H. C, 
“Service-oriented Device Anycasting using Quality First Search in Wireless Personal Area 
Network”, in Proc. of 2006 IFIP Int. Conf. on Embedded and Ubiquitous Computing, pp. 620-629, 
2006. 
[37] S. Alam, M. Hasan, M. Hossain, and A.S.M. Sohail, “Heuristic Solution of MMKP in 
Different Distributed Admission Control and QoS Adaptation Architectures for Video on Demand 
Service”, in Proc. of 2nd Int. Conf. on Broadband Networks, 2, pp. 896-903, 2005. 
[38] T. Yu and K.-J. Lin, “Service Selection Algorithms for Web Services with End-to-end QoS 
Constraints”, Journal of Information Systems and e-Business Management, 3(2), pp. 103-126, 2005. 
[39] T. Yu, Y. Zhang, and K.-J. Lin, “Efficient Algorithms for Web Services Selection with 
End-to-end QoS Constraints”, ACM Trans. on the Web, 1(1), Article 6, 2007. 
[40] S. Khan, “Quality Adaptation in a Multi-Session Adaptive Multimedia System: Model and 
Architecture”, PhD paper, Department of Electrical and Computer Engineering, University of 
Victoria, 1998. 
[41] Parra-Hernandez and N. Dimopoulos, “A New Heuristic for Solving the Multi-choice 
Multidimensional Knapsack Problem”, IEEE Trans. on Sys., Man, and Cybernetics, 35(5), pp. 
708-717, 2005. 
[42] S. Khan, K. F. Li, E. G. Manning, and M. M. Akbar, “Solving the Knapsack Problem for 
Adaptive Multimedia Systems”, Studia Informatica Universalis, 2(1), pp. 157-178, 2002. 
[43] M. Akbar, E. Manning, G. C. Shoja, and S. Khan, “Heuristic Solutions for Multiple-Choice 
Multi-Dimension Knapsack Problem”, in Proc. of Int. Conf. on Computational Science, pp. 112-117, 
2001. 
[44] [A4-8] J. Remy, “Resource Constrained Scheduling on Multiple Machines”, Elsevier 
Information Processing Letters, 91, pp. 177-182, 2004. 
[45] WARM(Web Allusive Relation Map), Available: http://warm.stu.edu.tw/ 
[46] Six Degrees of Separation, Available: http://en.wikipedia.org/wiki/Six_degrees_of_separation 
[47] VPN, Available: http://en.wikipedia.org/wiki/Virtual_private_network 
[48] Matsuo, Y.; Hasida, K.; Tomobe, H.; Ishizuka, M., "Mining social network of conference 
participants from the Web," Web Intelligence, 2003. WI 2003. Proceedings. IEEE/WIC International 
Conference on , vol., no., pp. 190-193, 13-17 Oct. 2003  
[49] Matsuo, Y., “Social network and spatial semantics for real-world information service,” 
Massively Multi-Agent Systems, 2005. 1st International Workshop on , pp. 254-268 Dec. 2004 
[50] Adamic, L., and Adar, E., "How to Search a Social Network," Social Networks, Vol.27, No.3, 
July, 2005, pp.187-203. 
[51] Amir Modarresi,; Ali Mamat,; Hamidah Ibrahim,; Norwati Mustapha,, "A social network 
Peer-to-Peer model for peer clustering," Information Technology, 2008. ITSim 2008. International 
Symposium on , vol.3, no., pp.1-7, 26-28 Aug. 2008 
 20 
[68] Microsoft Virtualization Poducts, Available:  
http://www.microsoft.com/virtualization/default.mspx 
  
 22 
 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                   日期：2011年 10月 24日 
                                 
一、參加會議經過 
本人於 2011年六月 21日搭機由台北至韓國首爾，立即再搭成當地高鐵轉往會議地
點慶州，並完成報到手續。隨後參加三天議程之會議，於六月 23日發表論文後即前
往首爾搭機返回台北。 
二、與會心得 
由於該會議為整合多項研究議題之大型會議，因此在會議中接觸許多不同研究領域
之著名學者並與之交談，包括韓國 IEEE Korea Council Chair Dr. Kae Dal Kwack
計畫編號 NSC 99-2221-E-168-034- 
計畫名稱 基於雲端計算之社群網路服務探勘整合與分享機制研發 
出國人員
姓名 
李冠榮 
服務機構
及職稱 
崑山科技大學資訊工程系 
會議時間 
2011年 6月 21日
至 
2011年 6月 23日 
會議地點 
韓國慶州 
會議名稱 
(中文)下世代資訊技術國際研討會 
(英文) International Conference on Next Generation Information 
Technology (ICNIT2011) 
發表論文
題目 
(中文)基於雲端運算之複合型服務階層式排程技術 
(英文) A Hierarchical Scheduling Strategy for the Composition 
Services Architecture Based on Cloud Computing 
附件四 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                   日期：2011年 10月 24
日 
                                 
一、參加會議經過 
本人於 2011年六月 21日搭機由台北至韓國首爾，立即再搭成當地高鐵轉往會
議地點慶州，並完成報到手續。隨後參加三天議程之會議，於六月 23日發表論
文後即前往首爾搭機返回台北。 
二、與會心得 
由於該會議為整合多項研究議題之大型會議，因此在會議中接觸許多不同研究
領域之著名學者並與之交談，包括韓國 IEEE Korea Council Chair Dr. Kae Dal 
Kwack等人。並參與各種領域之研討會議，收穫頗為豐碩。 
三、考察參觀活動(無是項活動者略) 
無考察參觀活動 
四、建議 
由於該研討會是屬新類型且整合多議題之國際會議，國內尚無類似型態之國際
會議。因此藉由該次會議能持續與主辦單位IEEE Korea相關學者保持密切交流，
並爭取在台灣主辦該會議之可行性。 
五、攜回資料名稱及內容 
計畫編
號 
NSC 99-2221-E-168-034- 
計畫名
稱 
基於雲端計算之社群網路服務探勘整合與分享機制研發 
出國人
員姓名 
李冠榮 
服務機
構及職
稱 
崑山科技大學資訊工程系 
會議時
間 
2011年 6月 21日
至 
2011年 6月 23日 
會議地
點 
韓國慶州 
會議名
稱 
(中文)下世代資訊技術國際研討會 
(英文) International Conference on Next Generation 
Information Technology (ICNIT2011) 
發表論
文題目 
(中文)基於雲端運算之複合型服務階層式排程技術 
(英文) A Hierarchical Scheduling Strategy for the Composition 
Services Architecture Based on Cloud Computing 
A Hierarchical Scheduling Strategy for the Composition Services Architecture 
Based on Cloud Computing 
 
Kuan-Rong Lee 
Department of Information Engineering, 
Kun-Shan University, Tainan, Taiwan 
Email: leekr@mail.ksu.edu.tw 
 
Meng-Hsuan Fu, Yau-Hwang Kuo 
Computer Science Information Engineering, 
National Cheng-Kung University, Tainan, Taiwan 
Email: {mhfu, kuoyh}@ismp.csie.ncku.edu.tw 
Abstract— This paper addresses the problem of composition 
service scheduling and resource allocation in cloud. In the 
development of cloud computing with data-intensive and 
compute-intensive features, many applications are based on 
Map/Reduce model to enhance the performance. A 
hierarchical scheduling scheme strategy, i.e., PPA2-level 
scheduler, is proposed in this paper for the composition 
services architecture to achieve planning of composition 
service scheduling with Map/Reduce model. While executing 
PPA2-level scheduler, it decomposes the total progress into 
three steps, i.e., preprocessing, pooling and allocating. It 
decides the job priority according to both service-level and 
task-level in the resource side. And the resources are allocated 
by taking the data locality and total job completion rate into 
account on the basis of cloud framework. In the numerical 
evaluation, it uses a Markov model to generate various 
scenarios of client requested composition services. Then it 
evaluates the strategy by applying the scheduling strategy 
mentioned above to compare with the default first-in-first-out 
scheduling (FIFO) of Hadoop. In different distribution of 
composition services, the proposed strategy also performs well, 
especially in I/O-Bound services. It achieves better 
performance (about 45 %) and efficiently decreases the 
probability of disk spill. 
Keywords-component; Service Composition, Service 
Scheduler, Cloud Computing, MapReduce 
I.  INTRODUCTION 
Cloud Computing is an application of distributing 
computing, whereby shared virtualized resources, software, 
and information are provided as virtualized-encapsulating 
services to computers and other devices on demand. With the 
rise of cloud computing, MapReduce is a programming 
model proposed by Google used to support distributed 
computing on large data sets on clusters of computers [1]. 
Besides, some researchers start to develop software 
frameworks such as Apache Hadoop and virtual computing 
environment like Amazon EC2 (Elastic Compute Cloud) that 
support data-intensive distributed applications and friendly 
user interfaces [2][3].  
How to execute composition services in cloud 
environment and achieve high resource utility which is 
customized for client requests without complicated processes 
has become an importance research issue[4][5][6]. In order 
to realize service composition in cloud computing 
environment, the technique of service scheduling and 
resource allocating have been the main points. Service 
composition can be defined as the process to create new 
working services by combining and linking existing services 
[7]. In cloud environment, it is hard to apply traditional 
service scheduling methods by the characteristics of services 
and resources: dynamical, distributed, and sharable. The goal 
of resource allocation for services is for all services in 
workflow to meet their respective performance targets [8]. 
Furthermore, in cloud platform, it promotes QoS-based 
resource allocation mechanisms that differentiate service 
requests by their utility [9][10]. This paper proposes new 
technologies in service scheduling and resource allocating 
for the improvements of resource utility and system 
executing time. 
It is a common case that several jobs demand different 
resources will run simultaneously in the same cluster while 
using MapReduce model [4]. The traditional MapReduce 
schedulers developed by Hadoop are leak to support parallel 
jobs. In such parallelized case, [11] provided MapReduce 
scheduling scheme to share large clusters and support 
multiple queues that all the jobs may get promised amount of 
resource to complete. There are two existing problems in 
general MapReduce applications. First, MapReduce model 
can only apply to processes with iteration features and 
heterogeneous task types, and couldn’t operate recursive or 
complicated service flows [1]. The other potential issue is the 
“Disk Spill”. Disk spill happens in Reduce side when 
merging map‐output causes the hadoop framework to write 
merges to local disk [11]. It will occupy the I/O of certain 
VMs and make other jobs starvation. In order to solve the 
issues mentioned above, a PPA2-level scheduler is proposed 
in the resource allocation scheme of MapReduce and service 
composition mechanism. 
The main contributions of this paper are described as 
follows. 
composite service Profile(CSP), tasks(T), VMs and data 
blocks(B) in cloud, types of Composite Service Profile (CSP) 
and description for different types of CSPs. The PPA2-level 
scheduler takes both service-level and task-level into account, 
so there are two types of resource models defined in the 
paper, which are computing resource model responsible for 
service execution and storage resource model responsible for 
data. 
A. Modeling of CSP on Cloud 
Def-1. Service Profile 
Let ,   ,   ,  ,  ,  ,  S Name Start Time End Time S value E value OP= − −  
represent service profile that is used to describe the 
attributes of services. Let Name  be a cloud service 
name;  Start Time  and  End Time  are begin and exit 
time of service execution; S value−  represents the 
longest route from start service to current service in 
a CSP. Relatively, E value−  is the longest route 
from current service to end service in a CSP. 
Def-2. Operation 
Operation is denoted as ,  ,  in outOP Dependency D D= . 
Dependency  represents what service must to 
execute before executing this service; 
inD  and outD  
are service input and output semantic data type and 
the workload that represent how many resources a 
service needs. 
The Def-3 presents the composite service patter by graph 
and it composes the need of a job including services (i.e. 
Vertex) and bandwidths (i.e. Edge), named a service set and 
a bandwidth set. The service set in simulation environment 
uses the basic types of composite service patterns which is 
motivated by OWL-S [15]. There are Sequence, Split, 
Split+Join, and Choice. The bandwidth set is to keep 
bandwidths needed for data transmission between services of 
a CSP. 
Def-3. Composition Service Pattern 
Let ,  ,  ,  in out X XCSP D D S BW=  represent the one 
composite service pattern. inD  and outD  are the 
initial input data and final output data respectively. 
XS  is a service set of a CSP. XBW  is the 
bandwidth set belong to a CSP and 
{ },p qX X X eBW S S bw= × =  where p and q represent 
arbitrary two services in the CSP, 
, , . .p q X q in p outS S S S D S D∀ ∈ = , another way of saying, 
. .q pS Dependency S Name= , and e  is the index of 
each bandwidth between two services. 
B. Computing Resource Model 
As Figure 1. shown, computing resource model is based 
on SOA and divided into a service layer and a VM layer 
SD SA SC SE
CSPX
C1
C2
C3
Service 
Layer
VM Layer
(in Cloud Environment)
D,A A,C C,E
BW1 BW2 BW3
Cx =  ＜VM, L＞ VM2C
VM1A,B
VM3D,E
VM4A
VM5B,C
VM6E
1,2
2,3
2,51,32,4
3,4
4,6
4,5
5,6
3,6
3,6
 
Figure 1.  Computing resource model 
Due to the services are executed in cloud environment, 
the definition of VMs and data blocks are given from Def-4 
to Def-7 to depict the scenario. With the support of shared 
resource and virtualization technology, cloud environment 
can be formed by the clusters composed of a number of 
virtual machines, file system that contain a large amount of 
data blocks and network connection. These elements that 
constitute the cloud scenario are defined as followed. 
Def-4. Clusters 
Let ,C VM D=  represents the clusters on cloud. 
Cluster is a group of loosely coupled computers that 
work together closely. The cluster is composed of 
virtual machines (VMs) and disk files (D). VM is the 
computing resource, relatively, D is the storage 
resource. 
Def-5. VMs 
VM  is the set of computing resources which come 
from physical machines. Each VM  contains one or 
more task slot that is the minimum execution unit in 
the thesis. The definition of task is represented in 
Def-7. 
Def-6. Data Blocks 
Let { }D d=  be the set of storage resources and 
,d FileName B=  means the set of distribute files 
in the file system. Every file will be split into several 
blocks by 64MB or 1287MB which observes HDFS 
definition [HDF], and these blocks make up the set 
B . { }, 1 ,  1i m n i iB B m NR n NS= ≤ ≤ ≤ ≤  represents the 
block set consist of NRi replicas and NSi segments. 
Thus each file will have m*n data blocks stored 
dispersedly in the file system. 
Cloud framework such as Hadoop is Master/Slave 
architecture. In master layer, it launches a JobTracker to 
accept MapReduce jobs submitted by users and take the 
responsibility to assign tasks to TaskTrackers. In general, 
there is usually one JobTracker in a cluster. In Slave layer, 
there are several VMs running TaskTrackers. TaskTrackers 
run the tasks upon instruction from the JobTracker and 
manage storage and transmission of intermediate output. 
Thus, it maps service profiles into Jobs, and every service 
profile split into several Tasks to execute on VMs. Too many 
( )*( ),
1, for service with higher MRCR
1.2,  for service with lower MRCR
2 or more, for other services
x x
execS DT S ServiceParameter
ServiceParameter
=

= 


 (2) 
After calculating the service execution time, it could be 
used to give the rank of service execution priority. First it 
takes S-value into account; this term is used to determine 
whether a service Sx in a CSP must be executed first. S-value 
is normalized by dividing by the length of CSP which SX is 
belonging to. The other term used in ranking is the sum of 
estimated execution time of every dependent service. By 
using this term, it can estimate the earliest execution time of 
SX. Finally, it adds the two terms to determine the rank of 
service as in (3), and pushes the ranked service list to next 
process. 
_
,
,  smaller is better
y x
depedent path
x y
m
y
execx
S Sx S value
rank x y
length exec
S S CSP
S
SS
S S
∈−
∈
= +
∑
∑
 (3) 
B. Pool Classification 
This stage classifies services into three pools. Each pool 
has different resource requirement characteristics that 
services in different pools will apply different resource 
allocation methods. Every service will be split into one or 
more tasks to execute on distributed task slots. Task was 
defined as the minimum execution unit in Cloud 
environment. 
There are three kinds of pools are defined in this paper. 
The classification is based on the Map/Consumption Ratio 
used to measure and compare the performance of certain 
Map/Reduce service. In Hadoop summit 2010 benchmarking, 
it shows a result that not all the Map/Reduce services are 
suitable for using the same deployment methods. There are 
three data accessing level: input data for Map, intermediate 
data between Map and reduce, and the output data from 
reduce. Different deployment methods and different services 
will cause various results that make time wasting or service 
failed possible. So the MRCR (Map/Reduce consumption 
time ratio) is used to classify the services. The details of the 
pools are described as TABLE II.  
TABLE II.  SERVICE EXAMPLES IN THE POOLS 
Pool 
Type Description 
Sample services 
Features 
PM 
Pool with higher intermediate 
data generated 
Services that generate large amount 
of intermediate data will be 
classified as PM which may make 
disk spill easily happened in 
resource limited environment. 
MRCR < M/R Threshold that 
means services (Jobs) in the pool 
require more Reduce task slots. 
Sort 
Stream Format 
Converter 
Service with 
No-Reduce 
I/O-Bound 
Pool 
Type Description 
Sample services 
Features 
PMR 
Pool with similar Map and 
Reduce time consumption 
MRCR > M/R Threshold that 
means services (Jobs) in this pool 
require more Map task slots. 
WordCount 
Page Rank 
Indexing 
CPU-Bound 
PH 
Pool with hybrid demand 
The pool contains service with 
hybrid tasks or non-Map/Reduce 
service. Services with specific 
resource/device requirement or 
user-constraint will also put into 
this pool. 
K-means clustering – 
Iteration leve 
l(I/O Bound) 
K-means clustering – 
Clustering level 
(CPU-Bound) 
I/O & CPU-Bound in 
different stage 
C. Resource Allocation 
Resource allocation is responsible for deploying the tasks 
while there are available task slots. According to pools’ 
features, it apples appropriate allocating methods to queues 
belong to each pools. By default in Hadoop configuration, 
the number of Map tasks is usually driven by the total size of 
the inputs, that is, the total number of blocks of the input 
files: NSi. And the right number of Reduce tasks seems to be 
0.95 or 1.75 multiplied by the number of assigned Reduce 
task slots, that is, the total number of assigned VMs 
multiplied by system configured maximum task slots per 
VM. TABLE III. describes the allocation methods of three 
kinds of pools. 
TABLE III.  ALLOCATION METHODS 
Pool 
Type Allocation Methods 
Map/Reduce 
Deploying 
Ratio 
PM 
Number of Map task = input file size/data 
block size ≒ 3 : 1 
PMR 
Number of Map task = input file size/data 
block size 
≒ N : 1  
N > 3 
PH 
Hybrid Tasks ≒ 1 : 1 
No-Reduce task N : 0 
Non-Map/Reduce Tasks Lunch all tasks on a VM 
 Specific Resource/Device 
Requirement 
 User-constraint tasks 
Lunch all tasks 
on specific VM 
In every pool, it takes the highest ranked service and split 
them into one or more tasks by pool determination. The 
initial task priority is decided as followed from (4) to (6). 
First it calculates the task weight in (4) by the E-value it 
belongs to. In this level, the smaller E-value represents that 
the CSP is going to be executed in the end. Thus if the 
system executes the task with smallest E-value, it could 
make a CSP to finish earlier. 
i( ) ,  where T belongs to a Service
i
i E value
t
length
Tw T
S
−=  (4) 
The weight of data transmission is determined in (5) by 
the data transferred between the tasks Ti and Tj. The second 
term of rank of Ti in (6) describes the sum of dependent data 
some computing or storage resources without executing and 
some tasks are deadlocked and failed. The simulation results 
show that the PPA strategy can avoid the resource waste and 
starvation. 
25000
30000
35000
40000
45000
50000
55000
60000
PMR
(30%_60%_10%)
PM
(60%_30%_10%)
PH
(30%_30%_40%)
CPU_Bound
(0%_100%_0%)
I/O-Bound
(100%_0%_0%)
To
ta
l C
SP
 C
om
pl
et
io
n 
Ti
m
e
Distribution of Pool Type
(PM_PMR_PH)
PPA
FIFO
 
Figure 6.  Total CSP completion time in various distribution of pool type 
Figure 6. illustrates the performance of the total CSP 
completion time in various distribution of pool type. The 
simulation results show that in I/O-Bound distribution, the 
PPA strategy has about 33% performance enhancement than 
the FIFO strategy. That is because the I/O-Bound services 
produces large amount of intermediate data and the Reduce 
tasks have higher relation with dependent Map tasks. In 
CPU-Bound distribution, the PMR services need higher 
computing resources but have lower relationship among 
tasks, so the PPA strategy only considers the sequence of 
services in a CSP and are similar to the FIFO strategy. 
Further, the PPA strategy considers data locality, so the 
performance of the PPA strategy in CPU-Bound distribution 
is also slightly higher than that of the FIFO strategy. 
VI. CONCLUSIONS AND FUTURE WORK 
The PPA2-level scheduling scheme defines the 
mathematical model of CSPs composed of tasks. Then it 
preprocesses the CSPs to find and decide the composed 
services’ priorities. Using the pool classification, services 
could be executed by their runtime characteristics to apply 
appropriate resource allocation method. Not only 
service-level, but also task-level rank decision are considered, 
the scheme takes data locality and dependent service 
completion rate into account. It has been observed from 
simulation results in various cases that using PPA2-level 
scheduling strategy could enhance the resource utility and 
achieve higher CSP successfully executed amount than 
default Hadoop scheduler. 
There are many future researched needed to make the 
scheduling scheme robust. In order to make the application 
closer to cloud environment, it’s necessary to evaluate the 
scheme on Hadoop framework or Amazon EC2. And for the 
purpose of precisely pool classification, using data mining 
approach to analysis service features could be future research 
topics. And in this thesis, it could be extended to apply on 
heterogeneous VMs by adding different features of VMs 
such as memory, CPU, I/O abilities. 
Acknowledgment 
This study was supported by Institute for 
Information Industry (III), and National Science 
Council, Taiwan, Grant Nos. NSC 
99-2221-E-168-034 and 
NSC97-2221-E-006-144-MY3. 
REFERENCES 
[1] J. Dean, and S. Ghemawat, "MapReduce: Simplied Data Processing 
on Large Clusters", Proceedings of the 6th conference on Symposium 
on Opearting Systems Design & Implementation, p.10-10, December 
06-08, 2004, San Francisco, CA. 
[2] Apache Hadoop project, Available from: http://hadoop.apache.org/ 
[3] Amazon Elastic Compute Cloud (Amazon EC2), Available from: 
http://aws.amazon.com/ec2/. 
[4] M. Zaharia, A. Konwinski, A.D. Joseph, R. Katz, I. Stoica, 
“Improving mapreduce performance in heterogeneous environments”, 
in: Proc. 8th USENIX Symposium on Operating Systems Design and 
Implementation, OSDI 2008, San Diego, USA, Dec. 2008. 
[5] T. D¨ornemann, E. Juhnke, and B. Freisleben., “On-Demand 
Resource Provisioning for BPEL Workflows using Amazon’s Elastic 
Compute Cloud.” In: Proc. 9th IEEE International Symposium on 
Cluster Computing and the Grid, page (to appear), Los Alamitos, CA, 
USA, 2009. IEEE Computer Society. 
[6] Jorge Manuel Gomes Barbosa and Belmiro Daniel RodriguesMoreira., 
“Dynamic job scheduling on heterogeneous clusters”, in: Proc. IEEE 
ISPDC, 2009. 
[7] G. Kapitsaki, et al., “Service Composition: State of the art and future 
challenges,” Mobile and Wireless Communications Summit, 2007. 
16th IST. 
[8] B. Wu, C. H. Chi, Z. Chen, et al, "Workflow-based resource 
allocation to optimize overall performance of composite services," in: 
Proc. Future Generation Computer System, vol. 25, no. 3, pp. 
199-212, 2009. 
[9] Rajkumar Buyya, Chee Shin Yeo, and Srikumar Venugopal, 
"Market-Oriented Cloud Computing: Vision, Hype, and Reality for 
Delivering IT Services as Computing Utilities", in: Proc. 10th IEEE 
International Conference on High Performance Computing and 
Communications, pp. 5-13, 2008. 
[10] Meng Xu, Lizhen Cui, Haiyang Wang, Yanbing Bi , "A Multiple QoS 
Constrained Scheduling Strategy of Multiple Workflows for Cloud 
Computing", in: Proc. IEEE International Symposium on Parallel and 
Distributed Processing with Applications, pp. 629-634, 2009 
[11] Matei Zaharia, Dhruba Borthakur, Joydeep Sen Sarma, Khaled 
Elmeleegy, Scott Shenker and Ion Stoica, "Job Scheduling for 
Multi-User MapReduce Clusters", Technical Report, No. 
UCB/EECS-2009-55, 2009 
[12] S. Chen, S. W. Schlosser, "Map-Reduce Meets Wider Varieties of 
Applications", IRP-TR-08-05, Technical Report, Intel Research 
Pittsburgh, May, 2008. 
[13] Vaidya, Available from: 
http://hadoop.apache.org/common/docs/current/vaidya.html. 
[14] Garrick Staples, "TORQUE resource manager", In the Proceedings of 
the ACM/IEEE conference on Supercomputing, No. 8, 2006. 
[15] Semantic Markup for Web Services, Available: 
http://www.w3.org/Submission/OWL-S/. 
 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/27
國科會補助計畫
計畫名稱: 基於雲端計算之社群網路服務探勘整合與分享機制研發
計畫主持人: 李冠榮
計畫編號: 99-2221-E-168-034- 學門領域: 計算機網路與網際網路
無研發成果推廣資料
Computing ’ ’ , 
International 
Conference on 
Next Generation 
Information 
Technology 
(ICNIT2011), 
Korea 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
