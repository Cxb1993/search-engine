I 
 
摘要 
視覺密碼學是一種隱藏機密資訊到幾張分享影像之中的技術。這技術可從一
些分享影像中挑選出合格的部分影像組合出來，印出成投影片，再疊合起來，就
可以讓隱藏的機密資訊顯示出來。若是將不合格的影像組合疊起來，則機密資訊
將不會呈現。雖然這種技術在數學理論上是安全的，但是它一次僅能隱藏一個機
密資訊。而我們所提出的圓形視覺密碼學是一種新的架構，它將允許一次隱藏四
個機密資訊到幾張分享影像之中。每一張圓形的分享影像將固定分割成同心圓的
兩圈，稱為外圈和內圈。我們利用兩張圓形分享影像的疊合來顯示機密資訊。外
圈的部分透過疊合和旋轉其中一張 θ0 角度再疊合，可分別在外圈呈現兩個不同
的機密資訊。然後內圈的部分，首先先將其中一張分享影像翻轉，再利用疊合和
旋轉其中一張 β0 角度再疊合，又可分別在內圈呈現另外兩個不同的機密資訊。
只有合格的圓形分享影像才能夠經由上述方式疊合出四份機密資訊。只要疊合的
旋轉角度和那一張分享影像要翻轉能保持秘密，那麼所隱藏的四份機密資訊就能
保護安全。 
關鍵字：視覺密碼學、機密分享、圓形視覺密碼學 
 
一、前言 
Visual cryptography is a data hiding technique involving multiple shares. The 
novel k-out-of-n secret sharing scheme was developed by Shamir [11] in 1979. The 
secret is hidden in k shares. Underlying, k shares are required for stacking to reveal 
the secret and k ≦ n shares.  Shares less or greater k cannot reveal the secret. 
Shamir and Naor [10] later collaborated the so-called (k, n) visual secret sharing (VSS) 
scheme to encrypt a binary secret in shares which were printed out as transparencies. 
The k number of transparencies can be stacked to reveal the secret. 
Other research [1,2,4,11] followed with some showing the shares as meaningful 
while others were garbled; some include natural image sharing [9], bit-plane based 
multiple sharing where the cover images would be modified based on bit planes 
characteristic[12] and hiding in circular shadow images [3,13].   
Over the years, I have worked in schemes for visual secret sharing that involves 
circular shares [3].  In [3], three secrets were individually hidden on the concentric 
circular rings at different rotate different angles. Wu et al. [13] hid two secrets on the 
circular shares at two different rotate angles.  Both schemes were based on the 2×2 
blocks for the (2, 2)-visual secret sharing.  Other schemes include color image secret 
sharing [4,7] (k,n)-secret sharing for natural images[5,6] and digital documents 
containing color artworks [8]. 
The proposed scheme for this paper is the circular visual cryptography for 360 
angle segmentation secret hiding. The circular shares would be divided into two major 
concentric rings where different secret messages could be hidden.  When one share 
in a stacked position is rotated at θ angle, the secret would be revealed.  The next 
two secrets can be revealed similarly but with one of the shares flipped before rotate. 
二、研究目的 
Protecting secrets is an old but important issue. So is encrypting the secret 
before transmitting to users. The visual secret hiding scheme is a novel way to split 
secrets (other than scrambling to encrypt) into several shares. The secret is scrambled 
before hiding but splitting the secret and then hiding individual portions in different 
shares further increases the security of the secret data. The hacker would need k shares 
before he/she could be able to make attempts to break the secret.  
The current visual cryptography technique is for the square shares. The normal 
hiding is for one secret only [2]. The proposed scheme allows hiding multiple secrets 
in circular shares. The multiple secrets are hidden by rotating, flipping, encrypting 
and hiding in the circular shares. The encrypted secrets in the shares are not easy to 
detect. To detect the hacker would have to know which relating sides to stack the 
shares and the correct rotating angles. The circular visual cryptography can be used to 
protect blue prints or for identifying foes or allies in espionage cases without having 
to deal with complex computations. 
三、文獻探討 
In the (k,n)-VSS method proposed by M. Naor and A. Shamir [10], a binary 
secret of M×N pixels will be encrypted in n shares where k≧n shares can be stacked 
together to reveal the secret. Any shares less than k will not reveal the secret. 
In the encrypting process, each pixel Pij of the secret will be mapped to a b1×b2 
block composed of black and white pixels to generate the n shares.  (i,j) are 
1 
 
(1) Encrypting the circular shares 
The circular shares will be encrypted for four m×n black and white secret 
messages.  Only the selective samples of 3×3 black and white blocks in Table 1 will 
be used for the encryption process.  As seen in the table, the selected 3×3 blocks 
contains a combination of seven black and two white sub-blocks.  Eight of the 
blocks are selected for encrypting share image 1 and the other eight for share image 2.  
The rule used here will be that a white block is revealed if two stacked blocks produce 
at least one white pixel; otherwise the block is black.  For example, if  of C0 is 
stacked with  of C1 then the result is a white block, ; otherwise if  of C0 is 
stacked with  of C1 then the result is a black block, .  Let Circ be the 
circumference and R be the radius of a circular share.  The size of the individual 
circular shares must fulfill the following rules: 
(a) Circ ≥ 3m. 
(b) R ≥ 6n where r must be multiple of 3 pixels. 
Two secrets will be hidden in the outer concentric and two more in the inner 
concentric. Fig. 2 shows the encrypting process for encrypting two secrets at θ0 in the 
outer concentric ring.  At position “1” marked “start here”, the first segment in 
circular share 1 will be encrypted arbitrarily from C0.  This segment will be used to 
encrypt the first secret bit in circular share 2 at the segment in location “a”.  
However, the segment in location “a” will be used to create the segment at θ0 located 
in “2”.  Based on the secret bits to reveal either black or white, selections will be 
made from C1 to create at a black or a white pixel, respectively.  This process will be 
used to encrypt the first two secrets on the outer ring. 
3 
 
SECRET 1 
Circular Share 1
+ 
Circular Share 2
 
SECRET 2 
Circular Share 1
+ 
Circular Share 2 
(rotate θ0) 
 
SECRET 3 
Circular Share 1
+ 
Circular Share 2 
(flipped 1800) 
 
SECRET 4 
Circular Share 1
+ 
Circular Share 2 
(flipped 1800; 
rotateβ0) 
 
Fig.3 Decrypting the fours secrets 
五、實驗分析 
Four 120×15 black-and-white secret images with messages, “DISGUISE”, 
“CONCEAL”, “EFFECT” and “FLEET” were used in the experimental tests.  The 
two circular share images were generated from the encryption process as shown in 
Figs. 4(a) and 4(b).  When circular share images 1 and 2 were stacked together and 
rotated at an angle, the first secret “DISGUISE” is revealed as seen in Fig. 4(c).  The 
second secret, “CONCEAL”, is revealed by rotating 400 (see Fig. 4(d)).  The circular 
share image 2 was flipped 1800 and stacked to reveal the third secret, “EFFECT” (as 
seen in Fig. 4(e)).  The fourth secret, “FLEET” is revealed by rotating 400 and 
stacking. 
5 
 
7 
 
Letters, April 2004, Vol.40, No.9, pp.529-530. 
[5] R. Lukac, K.N. Plataniotis, B. Smolka, and A.N. Venetsanopoulos: ‘A New 
Approach to Color Image Secret Sharing’ Proceedings of the XII European Signal 
Processing Conference EUSIPCO-2004 in Vienna, Austria, September 7-10, 2004, 
pp.1493-1496. 
[6] R. Lukac and K.N. Plataniotis: ‘A Color Image Secret Sharing Scheme Satisfying 
the Perfect Reconstruction Property’, Proceedings of the 2004 International 
Workshop on Multimedia Signal Processing MMSP’04 in Sienna, Italy, September 
29 – October 1, 2004, pp.351-354. 
[7] R. Lukac and K.N. Plataniotis: ‘Bit-level based secret sharing for Image 
Encryption’, Pattern Recognition, 2005, vol. 38, pp. 767-772. 
[8] R. Lukac and K.N. Plataniotis: ‘Document Image Secret Sharing Using Bit-Level 
Processing’, Proceedings of the 2004 International Conference on Image 
Processing ICIP’04 in Singapore, October 24-27, 2004, vol.III, pp.2893-2896. 
[9] N. Nakajima and Y. Yamaguchi: ‘Enhancing Registration Tolerance of Extended 
Visual Cryptography for Natural Images’, Journal of Electronic Imaging, July 
2004, Vol. 13, No. 3, pp. 654-662.  
[10] M. Naor and A. Shamir: ‘Visual Cryptography’, in Advances in Cryptology - 
Eurocrypt '94, A. De Santis Ed., 1995, Vol. 950 of Lecture Notes in Computer 
Science, Springer-Verlag, Berlin, pp.1-12. 
[11] A. Shamir: ‘How to Share a Secret’, Communications of the ACM, 1979, Vol. 22, 
pp.612-613. 
[12] C.S. Tsai, C.C. Chang and T.S. Chen: ‘Sharing Multiple Secret in Digital 
images’, Journal of Systems and Software, 2002, Vol. 64, Issue 2, pp.163-170. 
[13] H.C. Wu and C.C. Chang: ‘Sharing Visual Multi-secrets Using Circle Shares’, 
Computer Standards & Interfaces, 2005, Vol. 28, no. 1, pp. 123-135. 
※ 3.本表若不敷使用，請自行影印使用。 
 
 
 
A NEW APPROACH TO PROTECT PROTEINS IN 2D GEL 
ELECTROPHORESIS IMAGES 
 
 
Jeanne Chen1, Tung-Shou Chen1 and Jing-Yi Pan2
1Graduate School of Computer Science and Information Technology, 
National Taichung Institute of Technology, Taichung, Taiwan 
2Department of Information Management, 
National Taichung Institute of Technology, Taichung, Taiwan 
jeanne@ntit.edu.tw  tschen@ntit.edu.tw  luvjp@seed.net.tw
 
 
ABSTRACT 
2D gel electrophoresis (2DGE) is popularly used by 
biologists to analyze protein characteristics in order to 
diagnose the state of health of a patient. Therefore 
protecting the 2DGE images against illegal modifications 
and maintaining the integrity of these images are very 
important to make an accurate diagnosis for a patient. In 
this paper, the important protein information on a 2DGE 
image will be extracted using Z3 and protected by 
encrypting with a key using DES. Three copies of the 
encrypted data were then hidden in the background region; 
a region that has no protein spots and, therefore, deemed 
unimportant. The hidden data could be extracted later on 
to detect for possible changes in the 2DGE image. 
Experimental results showed that the proposed method is 
easy to implement and can be used to detect for possible 
changes in 2DGE images and to recover from these 
changes. 
 
KEY WORDS 
Data encryption standard (DES), Protein spots, two-
dimensional gel electrophoresis (2DGE), detect, 
modifications 
 
 
1.  Introduction 
 
Protein characteristics on two-dimensional gel 
electrophoresis (2DGE) can reveal important information 
about the state of health of patients. This information can 
be used in researches concentrated on seeking cures for 
diseases [5-7]. As more and more attentions are being 
paid to activities on the internet, proteome databases for 
the 2DGE images have been set up so that biologists can 
have easier and faster access to these images. 
On the internet, the 2DGE images could be pirated by 
illegal users for individual use or tampered for illegal 
purposes. A watermark technique could be used to hide 
the watermark in an image which could later be extracted 
to prove the rightful ownership or to identify the origin of 
the image [1]. In some cases the watermark could be 
special characteristics of an image that could be extracted 
and used to recover from hostile attacks [3]. Lin et al. [4] 
proposed using steganography to hide information in an 
image. The hidden data is invisible in spatial domain and 
will not arouse the attention of illegal users; thereby 
deterring potential tamper attempts. The hidden data can 
be extracted later on to prove an image’s rightful 
ownership when it is in doubt. Currently most researches 
on 2DGE images are concentrated on compression 
techniques, ways to improve the image’s quality and 
better protein detection methods [2]. None could be found 
on using data hiding techniques to protect the important 
protein information. 
Many commercial tools have been developed to detect 
for protein spots on the 2DGE images and to collect 
pertinent information on the spots. One tool is the Z3 [9] 
which can be used to collect information such as the color, 
size, quantity and locations of individual protein spots.  
In this paper, the propose method is to use Z3 to detect 
for protein spots and to collect the important protein 
information such as the size, location, color, and more. 
The collected protein data will then be encrypted with a 
key using the data encryption standard (DES) algorithm. 
Multiple copies of the encrypted data will be embedded in 
the background (regions without protein spots). The 
embedded data can later be extracted to detect for illegal 
changes on the 2DGE image and to recover from them. 
 
 
2.  Data Encryption 
 
2.1 Analyzing 2DGE images with Z3 
 
The Z3 software was developed by Smilansky et al. [9] to 
detect for protein spots on 2DGE images. The detected 
protein spots are circled as shown in Fig. 1. 
514-074 88
(see Fig. 6). Read the next B(xb,yb) pixel based on 
Step 2 and repeat step 4 for k = 2, …, 64 until all 
the protein data bits are hidden. 
Step 5: Read the next protein block Pi for i = i+1. Read 
the next B(xb,yb) and repeat step 4 and step 5 until 
i > N. 
Step 6: Repeat steps 2 thru’ 5 for M-1 times for hiding M 
copies. Suppose the size of the 2DGE is W×H. 
Then the maximum number of copies that can be 
hidden on the 2DGE image is M = ⎣(W×H)/64N⎦. 
  
Fig. 6 Hiding the encrypted protein bits in the LSB of the 
background pixels 
3.3 Detecting changes in the image 
 
In this paper, the main purpose is to protect the 2DGE 
image. The hidden data in the 2DGE image can be 
extracted. Then decrypt the protein data using the 
extracted data and the secret key. If the decrypted protein 
data is different from the protein data on the image, then 
the 2DGE is not the original image. The steps to detect 
changes in the image are as follows: 
Step1: First use Z3 to collect the protein information on 
the 2DGE image. Save all the important protein 
information into a text file A. 
Step2: In this step, extract the hidden important protein 
information in the 2DGE image. 
Step3: The extracted data from Step 2 consisted of 
multiple copies which can be used to increase the 
quality of deriving a single copy of the important 
protein data. The single “best” copy is derived by 
polling method from the multiple copies of data. 
Step4: After getting the important protein information 
data, decrypt this data with the DES algorithm and 
the same key used in the encryption process.  The 
decrypted file is called B. 
Step5: In this step, compare the two text files; one is B 
from Step4 and the second is A from Step1. The 
changes detected could be increase in spot size, 
decrease in spot size, protein spots moved and 
quantity of protein spots is changed. 
(1) Increase in protein spot size:  
Since the coordinates of protein spots are fixed, 
any coordinate that exist in record B but not in 
record A implies that there is an increase in the 
protein spot. 
(2) Decrease in protein spot size:  
This part is the opposite of protein spot 
increasing. If a coordinate exists in record A but 
not in record B, then the protein spots are 
decreased. 
(3) Protein spot moved:  
When a protein perimeter and contrast in record 
A and record B are the same but the coordinates 
are different - it means that the protein spots have 
been moved. 
(4) Quantity of protein spots changed:  
When the amount of protein spots is different in 
record A and record B, the quantity of protein 
spots is changed 
 
 
4.  Experimental Results 
 
In the experiments for the proposed method, Z3 is used to 
detect protein spots. Pertinent information about the 
protein spots is saved and encrypted with a key using the 
DES algorithm. In the experiments, three copies of the 
encrypted protein data were hidden in the original 2DGE 
image. The peak signal to noise ratio (PSNR) in dB will 
be use to judge the quality of the images after hiding 
together with visual condition of the image in spatial 
domain. 
Fig. 7 shows a comparison of the 2DGE image (a) 
before and (b) after hiding. As seen, there is no obvious 
visual difference between the image in Fig. 7(b) with 
hidden data and the original image in Fig. 7(a). Also, Fig. 
7(b) has a very high PSNR of 90.56 dB. The image in Fig. 
7(b) is very close to the image in Fig. 7(a). 
 
(a) Original 2DGE image     (b) After hiding 3 copies of 
                                              protein data, PSNR: 90.56dB
Fig. 7 Comparing the 2DGE image before and after hiding
In another experiment, the 2DGE image with hidden 
data was attacked in several ways. Attacks on the image 
include adding a protein spot, removing one, moving 
spots to a different location and last but not the least 
changing the quantity of protein spots. Fig. 8 (b) shows a 
modified pixel in a protein spot. 
0   1 0 1 0 0 0 0 
0110 011
Information to hide
0  0 1 1 0 0 0 0  
0  0 1 1 0 0 0 0  
1  0 0 1 1 0 0 1  
0  0 1 1 0 0 0 0  
0  0 1 1 0 0 1 0  
1  0 1 1 0 0 0 1  
00 1 1 0 1 0 0 
…  64 bits
90
