2行政院國家科學委員會專題研究計畫成果報告
調適編譯技術的研究
計畫編號：NSC 95-2221-E-194-041
執行期限：95 年 08 月 01 日至 96 年 07 月 31 日
主持人：林迺衛 國立中正大學資訊工程學系
計畫參與人員：林善治、胡逸良、林家弘
國立中正大學資訊工程學系
一、中文摘要
通常編譯器都會提供大量的最佳化選
項，讓使用者選擇最適合自己程式的最佳
化選項。因為大部分的使用者都不熟悉這
些最佳化選項，所以提供一個能夠自動選
擇最佳化選項的調適編譯工具是很重要
的。這類調適編譯工具大多使用基因演算
法來搜尋較適合的最佳化選項。本專題研
究提出一個權重式的基因演算法來改善搜
尋的效率。這個權重式的基因演算法除了
利用傳統基因演算法的交配運算與突變運
算外，再增加加權運算與群組運算。加權
運算用來追蹤個別最佳化選項與被編譯程
式的適用性。群組運算用來追蹤共用一群
最佳化選項與被編譯程式的適用性。透由
加權運算與群組運算可縮減基因演算法的
搜尋空間及加快基因演算法的演進速度。
本專題研究以 gcc 編譯器為研究之編譯
器，以 MiBench 為研究之評量程式，進行
初步效能評估，初步驗證加權運算與群組
運算可縮減基因演算法的搜尋空間及加快
基因演算法的演進速度。
關鍵詞：調適編譯、程式最佳化、基因演
算法、權重式基因演算法
Abstract
Compilers usually provide a large amount of
optimization options to allow users select
optimization options mostly suitable for their
specific programs. Because most users are
not familiar with these optimization options,
it is important to support a tool that can
adaptively select suitable optimization
options for users. Such adaptive compilation
tools often use genetic algorithms to search
for a set of suitable optimization options.
This research project proposes a gene
weighted genetic algorithm to improve the
performance of the traditional genetic
algorithms. In addition to traditional genetic
algorithm operations crossover and mutation,
this algorithm proposes two new operations:
weighting and grouping. Weighting operation
is used to trace the fitness between each
single option and the compiled program.
Grouping operation is used to trace the
fitness between a group of options and the
compiled program. Using weighting and
grouping operations can decrease the search
space of the genetic algorithm and speedup
the evolutional performance of the genetic
algorithm. This research project has
performed a preliminary evaluation on the
proposed gene weighted genetic algorithm
using gcc compiler as the target compiler and
Mibench as the benchmarks. The result of the
preliminary evaluation verifies that weighting
and grouping operations do decrease the
search space and speedup the evolutional
performance for such benchmarks.
Keywords: adaptive compilation, program
optimization, genetic algorithms, gene
weighted genetic algorithms
二、緣由與目的
編譯器的功能在於將高階的程式語言
編譯成低階的組合語言，而高階程式語言
在文法及結構方面較為複雜，在撰寫方
面，則其撰寫方式與風格依程式設計者而
有所不同[1]。編譯器設計者針對於不同的
程式片段、資料結構、數學運算…等，提
供了各種不同的最佳化轉換選項
4合的選項作為起點，除了挑選適合的最佳
化選項，去除無用的選項亦使搜尋演算法
不會再考慮這些項目，則對縮減搜尋空間
則有極大的助益。故在基因演算法的操作
中，考慮此種情況，在演化過程中嚐試去
固定某些最佳化選項之開啟與關閉。
對於實驗結果的精確度，為去除掉作
業系統的多工環境影響執行結果，則使用
交叉編譯器產生 ARM 目的之影像檔[7]，令
程式執行於 ARM 模擬器工具上，用計算的
方式取得更穩定的結果，增加實驗的可靠
度。
圖 1為本系統之架構圖。本系統主要
由下列幾個部分所構成:
 選項選擇模組(Option
Selection)。
 控制核心(Control Core)。
 評量程式(Benchmark)。
 記錄檔(Log Files)。
 效能計算模組(Evaluation)。
 編譯器與工具組(Compiler &
Toolchain)。
權重式基因演算法
在觀察相關研究的選項搜尋工具[2，5，
6]，大多是使用基因演算法為搜尋的核
心。傳統基因演算法依賴三個基本操作：
交配（crossover）、突變（mutation）、
複製（reproduction）以為演化運算的核
心操作，流程如圖 2所示。在每個演化生
成(generation)的過程中，僅對染色體
(chromosome)做變化並計算突變後或新產
生之子代的適性值(fitness value)，也就
是只有對整個染色體做評估並無明確指出
各個基因對系統的影響性之好壞。對於分
析一個最佳化選項如何選擇的系統，對最
佳化選項本身的影響性及選項之間的作用
關係的了解是重要的。故本系統提出對每
一個基因因子賦予權重值 (gene fitness
weight)，並隨演化生成的過程做增減，依
Option Selection
Control
Core
Optimization
Search Space
Search Algorithm
GA RA
Write file
Log Files
User Inputs
Parameters
Benckmarks:
MiBench
ADS
Simulator
Evaluation
seq
result
Compiler &
Toolchain
arm-elf-gcc
-4.1.2
arm Image
result
seq
arm Image
Option
list
圖 1.系統架構圖
6用的效果因目的程式而不同，且選項間亦
會互相影響，故無法以靜態分析一最佳化
選項的影響性。在此定義之權重值，隨演
化過程中動態改變，如此亦能應系統變化
而有所調整，增加可信度。各個最佳化選
項的權重值代表該選項對目的程式做套用
的適合程度，是為「基因權重值」(gene
fitness weight)。
群組運算目的在於減少系統中因子的
數量，即為最佳化選項的數量，如此相對
縮減了搜尋空間，若能確定系統中具有正
向交互作用的選項集合，將之群組化並設
為固定開啟，之後以其為搜尋起點對其餘
的最佳化選項作搜尋；若起點的設定為正
確，在此起點下進行對最佳解的搜尋機率
較無縮減搜尋空間的方法高。故在此進行
的結合操作目的便是找出哪些選項可能必
要被固定為開啟。
為了縮減搜尋空間（search space），
以達到加速搜尋演進速率之目標，在此作
法為企圖對可能結合的最佳化選項做群組
化。而這些可能被群組化的最佳化選項分
別為：
(1) 具有相依關係的最佳化選項。
(2) 具有正向交互作用的最佳化選項。
當搜尋演算法選擇到與其它最佳化選
項具有相依關係與正向交互作用的選項
時，則可一併將其他選項做選擇。如此節
省了選擇的時間，以及減少系統需要考慮
的因子。
相依關係如前述所言，由於此關係是
與編譯器設計有關而與目標程式無關，故
此靜態資訊可從 gcc 的說明文件中獲得，
並設計資料結構將此資訊儲存下來，在執
行選擇操作時，即可利用之。
對於最佳化選項交互作用之分析，在
此利用到最佳化選項之「基因權重值」。
根據權重值的功能與定義，是為表示該最
佳化選項對於系統的影響性。而一個染色
體，即許多的基因組成的序列，其中每個
基因代表不同最佳化選項。當我們得知每
個最佳化選項的影響性後，對於一個由最
佳化選項組成的串列，則此串列的影響性
可以由串列中各個基因之權重值推知，即
為「染色體權重值」。
在分別計算出親子的染色體權重值
後，由於染色體權重值為該染色體對目標
程式套用的預估適合程度，故比較權重值
大小以其值大者預測將產生較優秀的結
果；接著計算兩者之適性值，即模擬執行
計算的週期數目，看是否結果的好壞與以
染色體權重值估計的結果相同。若為預期
之外，則推測：在子代染色體之中存在某
些最佳化選項的組合可能有交互作用的產
生。但是，既使能夠推測存在交互作用的
發生，亦無法確認染色體中是哪些最佳化
選項所引起的，故在此收集在演化過程中
利用此方法推測出交互作用的染色體來做
分析的工作，以推出可能的選項組合。
整合前述之操作方法，而成一個完整
的演算流程，一個權重式基因演算法應包
含的操作：替換（replacement）、挑選
（selection）、交配（crossover）及突
變（mutation）、加權（weighting）、結
合（combination）。其中在突變操作部分，
分為兩次：其中一次操作參照固定開啟的
選項集合，只對非固定的選項作突變；另
一次則對全序列作突變。流程如圖 3所示：
演化階段：
1. 從母體（population）中挑選的最佳化
序列以進行基因操作，挑選的方式為從
母體上半部挑選、從母體下半部挑選、
從母體中任意位置挑選。
2. 對挑選出的序列進行基因操作（交配、
突變）以產生子代。
8Consortium)為基礎，針對嵌入式系統及提
供學術研究上用途所發展的評量程式。其
中分為 Automotive、Consumer、Office、
Networking 、 Security 、
Telecommunications 六大類，而在此就各
類別挑選使用其中的七支程式：
(1) CRC32：應用於作資料檔案錯誤偵測之
程式。
(2) dijkstra：應用於嵌入式處理器在網
路設備如交換機、路由器中計算最段路徑
之演算法。
(3) qsort：快速排序演算法之應用。
(4) stringsearch：搜尋文字資料中的字
串。
(5) basicmath：測試一些嵌入式系統中硬
體不支援的數學運算。
(6) blowfish：文件加密/解密的程式。
(7) sha：安全雜湊演算法的實作。
本次實驗目的在於從每回合 100 次搜
尋的觀察中，觀察各演算法搜尋的過程，
證明改善後的方法是有效的。且套用本系
統實作之權重式基因演算法，其演進速度
是否優於另外兩者？分別各以預設選項
(-O1、-O2、-O3)其中較好的結果為起始
點，在此實際方式為對每支程式各實驗 3
回合，每回合作 100 次的演化，去除其中
最好及最差的結果，而以中間值來比較，
避免極端的結果影響觀察。以下是各評量
程式套用三種演算法後之結果：
比較三個演算法搜尋過程追蹤的記
錄，在基因演算法方面，在各支程式的搜
尋追蹤圖中，在演化過程的前期，由於母
體狀態並非達到穩定，故再經過基因操作
後產生的結果不一定都是良好的。而在短
時間內，母體經過更新後，較差的染色體
將被移除，取代以較優良的子代染色體，
故在中期結果的曲線圖則較為平順的增
進，不如前期的曲線的不穩定。而後期的
曲線，趨為平緩收歛的狀態，此時較不易
有大幅度的演進。而隨機演算法方面，由
於並非演化的機制，產生的結果皆由隨機
決定，故結果的產生沒有一個趨勢，是不
可預期的，亦無法保證其效能。以下為各
演算法的追蹤圖，橫軸為演化次數，縱軸
為計算之週期數，產生的週期數越少之結
果，則效能越好。如下：
CRC32
30000
31000
32000
33000
34000
35000
36000
37000
38000
39000
40000
41000
0 8 16 24 32 40 48 56 64 72 80 88 96
passes
cy
cl
es
CRC32(wGA)
CRC32(sGA)
CRC32(RS)
圖 4.CRC32 搜尋過程追蹤
在此圖中，觀察權重式基因演算法的
曲線，在產生一個演進後（如次數 4，8，
13 的點），將優良的染色體加入母體，於
是整個搜尋結果會逐漸逼近之前搜尋到的
優良染色體。而與簡單的基因演算法比
較，sGA 在次數 31 次時，效能突然的增加，
但母體狀態並非馬上達到水準，搜尋的結
果仍然徘徊在之前母體狀態的結果。一直
到次數第 80 次後，才真正收斂。隨機方法
的曲線則是呈現非常不穩定的狀態。因此
證明了權重式的方法能夠在找到一個好的
結果後，保留其特徵，故能使母體狀態快
速改善，使演化的效率上升。
dijkatra 的例子中，由曲線的觀察，
仍然可以發現權重式的基因演算法收斂教
快，且曲線較平滑。
10
剩下的三支測試程式：basicmath、
blowfish 及 sha 都很明顯的能夠比較出改
善後的基因演算法在收斂的時間點較其他
兩者要早，除了一開始母體狀態還沒穩
定，之後的演化曲線都很快的能夠趨於平
穩，簡單的基因演算法變異量則較大，而
隨機的搜尋方法始終處於非問定狀態。故
從搜尋過程追蹤圖中看來，權重式的基因
演算法不但具有較穩定的演化曲線，亦較
另兩者的收斂速度要快！
四、結論與討論
在本專題研究中，我們提出了一套權
重式基因演算法，並實作出一個最佳化組
合之搜尋工具，藉由這套工具能夠幫助我
們快速的能找到一組超越預設設定的最佳
化選項集合，而與傳統基因演算法比較則
改良在演進方面的速率。本系統中，使用
者能夠透過參數控制搜尋演算法，選擇是
否要加強搜尋的次數，或增加突變的機率
等等。對於一般對編譯器不熟悉的使用
者，也能輕易的使用而找到一組良好的最
佳化選項組合。除了搜尋序列，本系統由
紀錄檔的產生，其中記錄程式效能演化與
最佳化套用的對應，則亦能作為研究最佳
化轉換性質的工具。
本專題研究中尚有許多不足之處，需
要日後再加改進：
 對與權重值的生成與分析不夠精確，
時常發生預測錯誤的情況，如此則會
回到最初搜尋的起點，白白花費搜尋
時間。
 在本系統中對最佳化選項的分析資訊
還不足，無法確切得知各選項的整體
影響、交互作用、相依關係等等…。
 在對相依關係的分析上只有簡單用比
對的方法，不能夠精確的指出具有相
依關係的最佳化選項。
 在此僅對較前端高階的最佳化做搜
尋，尚未考慮後端低階的最佳化轉換。
隨著科技不斷進步，希望本系統在日
後能更加完整，有更佳的效能表現！
五、參考文獻
[1] Aho, A. V., Sethi, R. and Ullman, J. D.
1986. Compilers: Principles,
Techniques, and Tools.
Addison-Wesley, .
[2] Almagor, L., Cooper, K. D., Grosul, A.,
Harvey, T. J., Reeves, S.W.,
Subramanian, D., Torczon, L.,
Waterman,T. 2004. Finding effective
compilation sequences. In Proceedings
of the 2004 ACM SIGPLAN/SIGBED
conference on Languages, compilers,
and tools for embedded systems. Vol.39.
No7, 231-239.
[3] Childers, B., Davidson, J. W., Soffa, M.
L. 2003. Continuous Compilation: A
New Approach to Aggressive and
Adaptive Code Transformation.
Proceedings of the 17th International
Symposium on Parallel and Distributed
Processing IPDPS '03. April, p. 205a.
[4] Cooper, K. D., Subramanian, D. and
Torczon, L. 2002. Adaptive optimizing
compilers for the 21st century. Journal
of Supercomputing, Vol. 23, No.1,
7–22.
[5] Cooper, K.D., Grosul, A., Harvey, T. J.,
Reeves, S., Subramanian, D., Torczon,
L., Waterman, T. 2005. ACME:
