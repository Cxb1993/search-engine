2 
 
二、研究目的： 
本研究主要的目的便是在進行嵌入式軟體元件測試前預測出其中可能有問題的程式片
段，以便讓程式發展人員能及早修正以節省測試的時間與成本。所使用的方式便是在現有
的程式碼中運用資料探勘的技術來找出程式樣式(program pattern)並藉由這些樣式過去在實
際目標設備上的執行結果來建立程式樣式模型(Program Pattern Models, PPM)，這些以程式
樣式為基礎所建立模型可以進一步提供軟體發展人員在元件測試前進行相關的品質評估
(quality evaluation)，並可用來提醒軟體發展人員哪些程式碼可能會產生問題，發展人員可
以依照此評估結果來決定對該元件的修改程度。運用本研究所提的方法來改善嵌入式軟體
發展流程的主要優點是在建立程式樣式模型時不需要預先定義設計樣式實作範例(PIE)，而
可以直接由現有的程式碼來建立，用於建立程式樣式模型所使用的程式碼則可以來自同一
專案，並可以針對不同的專案屬性來建立合適(suitable)的程式樣式模型。 
三、文獻探討： 
嵌入式軟體發展的困難主要在於開發環境(host machine)與測試環境(target machine)可
能位於不同的機器上，而大部分的嵌入式應用系統則可能由多個嵌入式設備所組成(如資料
詩集設備與控制設備)，因此大部分的嵌入式軟體元件都必頇要部署在目標機器上方能進行
測試，故而增加嵌入式軟體測試流程的複雜性(complexity)與人力(efforts)，而除了功能性需
求(function requirements)外，非功能性需求(non-function requirements)亦為嵌入式性統發展
的一個重要需求項目，如執行時間與記憶體的限制(Offutt, 2002; Qian et al., 2009)，有許多
方法皆可用來改善嵌入式軟體發展流程，如以元件為基礎的軟體設計技術可以用來降低軟
體的複雜度(complexity) (Musa et al., 1987)。而在實際進行測試前可以先評估嵌入式軟體元
件的品質，以降低測試所需的人力(Grunske, 2007)，而其中最常為軟體公司採用的方式則是
專家評估法(expert judgment)，然而專家法的最大問題則是所評估的準確性常會因為專家的
經驗而有不同程度的誤差，因此有些軟體公司變採用建立模型(modeling technique)的方式佐
以專家法來增加其準確性(accuracy)。採用模型評估技術需要先建立一組屬性(attributes)，利
用這些屬性所蒐集的資料來建立預測模型(prediction models)，而再利用所建立的模型來對
軟體元件的品質進行評估作業，例如蒐集自軟體檢視流程(inspection process)的資料可以用
於評估軟體元件的品質(Chang et al., 2005)，而派翠網路(Pettit nets)也可以應用於利用 UML
所描述的設計文件(Unified Modeling Language)來評估軟體元件的品質(Pettit IV and Gomaa, 
2007)，然而這些方法的缺點則是無法準確的標示出確切的軟體瑕疵的位置(Location)。 
程式樣式(program pattern)可視為用以表示一群組具有類似屬性(attributes)的程式片段
(program segments)，而程式片段則可以利用所找出的程式樣式來評估其品質(quality)，透過
品質的評估來了解有那些程式片段可能會產生瑕疵或錯誤，以提供軟體發展人員找出軟體
元件中隱藏的錯誤的資訊(如 dead code或 redundant NULL-check) (Xie and Engler, 2003)，然
而利用程式樣式來評估軟體元件品質的困難點是需要先找出程式樣式的行為(behaviors)，利
用蒐集自歷史專案的資料可以建立程式樣式模型(Hovemeyer and Pugh, 2004)，程式片段指
紋(Fingerprint)為一種可以簡單用於識別程式段之間的相似性，其中程式關鍵字(Keyword)
4 
 
五、結果與討論： 
本研究可包含三個主要步驟，第一步驟是要先找出重要的程式樣式(PPI)、評估這些程
式樣式的品質(PPQE)與紀錄這些程式樣式的品質(PPQR)，接著第二步驟再利用這些程式樣
式的品質紀錄來產生程式樣式模型(PPMC)，第三步驟再透過所蒐集到的資料來進行驗證本
研究所提出的方法的效能。根據本研究的計畫所設計的演算法如下所述。 
本研究在第一步驟中先定義用於描述程式片段的方法，主要採用 AST (Abstract syntax 
tree)的方式來表示程式片段，並以程式關鍵字(Keyword)與函式(function)作為主要的節點
(nodes)，而為了便於資料探勘程序的進行，將此 AST以前序(preorder)的方式來表示，接著
再計算資料中每個節點的個數(size)和支持度(support)，並挑選 support與 confidence大於所
指定 threshold之重要節點。此部分利用 ANTLR (ANother Tool for Language Recognition)和
BBCDT (Bare Bones CDT)等工具來建立 AST。其中 ANTLR可以用來產生 AST，ANTLR 為
LL 語法分析器，也是利用由上到下來分析一系列與上下文無關文法的工具。而 BBCDT工
具則為編輯工具 ECLIPSE的 Plug-In，其中只包含兩個 Plug-Ins，分別為核心和使用者介面，
核心插件提供相關的類別和介面為使用者建立 CDT模型，而使用者介面則提供使用者操作
的介面，因此透過本工具可以方便使用者來建立 AST。然而此工具最主要的問題為無法分
析 elseif 節點，兩個工具都用 else 和 if 節點表示 elseif 節點，為了解決這個問題，本文
提出辨識 elseif 節點的演算法，如圖一(a)所示。 
     
(圖一)、節點分析演算法(Java / C++) 
 
 1.1.1,./data/interface/Serial.java,104,L 
1.1.2,./data/device/app_ex_main.c,60,H 
1.2.1,./data/device/app_ex_main.c,111,H 
1.3.1,./data/device/clockmodes.c,122,L 
1.0.0.L  
(a) 以 preorder產生 AST            (b) 瑕疵報告(Defect Report) 
 (圖二)、產生程式樣式 
6 
 
接著由單一的 node合併為兩個 node，並重複計算前面四項資訊(與前面的計算方式相同)。
在產生重要的節點後便可使用關聯性規則探勘技術來找出程式樣式，我們根據修改的行數
產生資料並找到符合的樣式，找符合樣式的方法為先找資料中是否符合樣式中所有的關鍵
字，若樣式中除了“-1”關鍵字外皆不在資料中，則此樣式不符合，若樣式中除了“-1”外
出現在資料中，則需要考慮程式樣式的階層，此部分可使用堆疊的方式來處理，若程式階
層相同，則為符合的樣式，如圖四所示。 
第三步驟則是預測程式片段是否會產生錯誤，首先收集目前專案修改資訊(modification 
records)，包含修改編號，修改程式碼的位置和修改行數。接著產生修改過程式碼的前序資
料(pre-order tree)，最後再利用第二步驟所產生的程式樣式來比對所蒐集到的修改資訊，若
此資訊符合第二步驟所找出的程式樣式，則該修改的程式片段便可能會產生瑕疵。使用者
記錄修改資訊包含三個修改編號、檔案的絕對位置和修改行數，接著根據修改行數來產生
修改程式片段的 AST，圖五(a)表示所修改的程式片段紀錄，而圖五(b)則表示該程式片段所
符合的程式樣式。 
  
(a) 程式片段修改紀錄            (b) 符合的程式樣式 
(圖五)、修改的程式片段品質評估 
本研究利用所提出的方法應用於大學二年級的 Java程式設計的寫作上，以驗證所提方
法的效能，使用的設備則包含 eclipse helios軟體、window XP作業系統與 Java程式語言，
實驗步驟為： 
(1). 挑選實驗人員：實驗對象皆為資訊工程的學生，並將實驗人員分為三類，分別為資深
人員、中等人員和低階人員。資深人員為博士班學生和碩士班畢業學生；中等人員為
碩士班學生；低階人員為大學學生。 
(2). 選測驗題目：計算機 GUI題目共 7題；矩陣題目共 2題；判斷閏年問題題目共 1題；
副克牌排序問題共 1題。總共 11題。 
(3). 每次實驗時間:每個人約總共五天內完成題目。 
(4). 實驗人員做測驗:實驗人員在 JSP 網頁上下載插件、分析器、安裝說明檔案和測驗題
目。實驗人員在自己的電腦上安裝 eclipse，安裝好插件、分析器，並開始做測驗。 
(5). 分析實驗數據:把所有資料，不分實驗人員不分題目的資料筆數，來跑數據。 
操作流程: 
(1). 下載且安裝鑲在 eclipse的圖示、分析器和實驗專案。 
(2). 第一次測驗實驗專案需先輸入使用者和專案 ID並跑一次 eclipse的執行鈕。 
(3). 每修改一個地方，想看結果就先點選要分析的檔案再點選鑲在 eclipse的圖示。 
1.1.2,./data/device/app_ex_main.c,50;c;F:initAppEx;-1;K:w
hile;F:getJoystickDirection;-1;-1;K:while;F:getJoystickDire
ction;-1;-1;K:for;1;0.333334;1;1.000000 
1.2.1,./data/device/app_ex_main.c,110;c;F:initAppEx;-1;K:
while;F:getJoystickDirection;-1;-1;K:while;F:getJoystickDi
rection;-1;-1;K:for;1;0.333334;1;1.000000 
1.1.2,./data/device/app_ex_main.c,50,main,initAppEx,-1,
showLogo,-1,while,getJoystickDirection,-1,-1,updateMen
u,-1,while,getJoystickDirection,-1,-1,for 
1.2.1,./data/device/app_ex_main.c,110,main,initAppEx,-1
,showLogo,-1,while,getJoystickDirection,-1,-1,updateMe
nu,-1,while,getJoystickDirection,-1,-1,for 
8 
 
額外的資訊。此資訊為極有可能產生錯誤的程式片段的資訊。本文的實驗結果呈現提出的
方法可以用來偵測軟體錯誤。本文方法最主要的活動為階段一，階段二和階段三。本文的
結果呈現程式樣式可以用來找可能產生錯誤的程式片段。未來工作可以更進一步的提供如
何修正錯誤。 
參考文獻： 
1. Eason, G. Noble, B. and Sneddon, I.N. On certain integrals of Lipschitz-Hankel type involving 
products of Bessel functions, Phil. Trans. Roy. Soc. London, vol. A247, pp. 529-551, April 1955. 
2. Maxwell, J. C. A Treatise on Electricity and Magnetism, 3rd ed., vol. 2. Oxford: Clarendon, 1892, 
pp.68-73. 
3. Jacobs I.S. and Bean, C.P. Fine particles, thin films and exchange anisotropy”, in Magnetism, vol. III, 
G.T. Rado and H. Suhl, Eds. New York: Academic, 1963, pp. 271-350.+ 
4. Yorozu, Y., Hirano, M.K. and Tagawa, Y. Electron spectroscopy studies on magneto-optical media and 
plastic substrate interface”, IEEE Transl. J. Magn. Japan, vol. 2, pp. 740-741, August 1987. 
5. Young, M. The Technical Writer’s Handbook. Mill Valley, CA: University Science, 1989. 
6. Hamlet, R.G., Mason D.V. and Woit, D.M. Theory of software reliability based on components”, In 
proc. of the 23rd Intl. Conf. on Software Engineering, ICSE, 12–19 May, Toronto, Ontario, Canada. 
(2001), pp. 361–370. 
7. Grand, M. Patterns in Java Volume 1”, Wiley, 2nd Ed., 2002. 
8. Yoder, J.W., Foote, B., Riehle, D., Tilman, M. Metadata and active objectmodels”, In: Workshop 
Results Submission OOPSLA’98 Addendum, 1998. 
9. Offutt, J. Quality Attributes of Web Software Application, IEEE Software 19(2) (2002) 25–32.  
10. Qian, K., Haring D. and Cao, L. Embedded Software Development with C, Springer Science Business 
Media, USA. 2009. 
11. Musa, J.D., Iannino, A., Okumoto, K. Software Reliability: Measurement, Prediction, Application, 
MacGraw-Hill, New York NY, ACM CR 8712–0965, 1987. 
12. Grunske, L. Early quality prediction of component-based systems – A generic framework, The Journal 
of System and Software, Issue 80, 2007, pp. 678–686. 
13. Chang, C.-P., Lv, J.-L. and Chu, C.-P. A Defect Estimation Approach for Sequential Inspection Using 
a Modified Capture-Recapture Model, 29th Annual Intl. Computer Software and Applications Conf. 
(COMPSAC’05), Edinburgh, Scotland, July 25-28, 2005, pp. 41-46. 
14. Pettit IV, R. and Gomaa, H. Analyzing Behavior of Concurrent Software Designs for Embedded 
Systems, In: ISORC 2007. IEEE, Los Alamitos. 2007. 
15. Xie Y. and Engler, D. Using Redundancies to Find Errors”, IEEE Trans. On Software Engineering 
29(10) (2003) 915–928. 
16. Hovemeyer D. and Pugh, W. Finding Bugs is Easy”, ACM SIGPLAN Notices, 39(12) (2004) 92–106. 
17. Schleimer, S. Wilkerson D.S. and Aiken, A. Winnowing: Local Algorithms for Documenty 
Fingerprinting”, ACM SIGMOD 2003, June 9-12, San Diego, CA. 2003. 
18. Paul S. and Prakash, A. A framework for source code search using program patterns, IEEE Trans. On 
Software Engineering 20(6) (1994) 463–475. 
19. Draper N.R. and Smith, H. Applied regression analysis”, 3rd ed., New York: John Wiley & Sons. 
1998. 
20. Khoshgoftaar, T.M. Allen, E.B. Jones W.D. and Hudepohl, J.P. Classification-Tree Models of 
 1 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                     日期：100年 8月 1日 
                                 
一、參加會議經過 
本次會議 Modeling and Simulation (MS 2011)主要是由 International Association of Science 
and Technology (IASTED)在加拿大卡爾加利(Calgary, Canada)舉辦，大會於 2011/7/4 上午報到
後，即由 Session 1 的報告者先行報告，本會期共分成 6 個 Sessions，包含 Power and Engine 
Modeling、Modeling、Modeling and Simulation、Neural and Fuzzy System、Networking 與
Application，所邀請的演講者包含 Prof. John Chen 與 Prof. Nabil Chalboub，Prof. John Chen 針
對 Mathematical Model 應用於 Prediction 方面的重要性進行一小時的專題演講，Prof. Chen 主要
是針對石油工業對於油品復原(Oil Recovery)技術的強化與改善方面，除了可以應用 Modeling
的技術來了解油品的特性外，可以更進一步透過此模型來對於油品在不同環境下的反應來進行
模擬(Simulation)，如此不但可以精確的了解不同流程(Recover Process)的效果，更可以提升其
改善的效率。Prof. Nabil Chalboub 則是以利用工具(Automatic Tool)來建立模型為題來進行專題
演講，他並以引擎燃燒效能為例，並透過模型建立工具的使用來建立效能模型，以便加速分析
與模擬，這些模型建立的方式除了可以應用在能源的分析外，在軟體工程領域亦可以應用於了
解軟體發展的行為。 
本次研討會除了兩位應邀的演講者對於模型建立與模擬針對不同的應用領域提出其經驗
與實例的分享外，在三天共六個 Sessions 的論文發表中，來自不同國家的模型建立與模擬的學
術研究者亦對於其各自的研發領域發表其研究成果，更重要的是發表者在發表其論文後亦有相
當的時間與參與的研究者交換研究心得與意見，對於研究方向有相當的助益。Session 1 的主題
計畫編號 NSC  99 - 2221 - E - 168 - 033 - 
計畫名稱 利用程式樣式來改善嵌入式軟體發展流程 
出國人員
姓名 
張慶寶 
服務機構
及職稱 
崑山科技大學 資訊工程系 
會議時間 
100年 7月 4日至 
100年 7月 13日 
會議地點 加拿大 卡爾加利 
會議名稱 
(中文) 2011建模與模擬技術國際研討會 
(英文) The IASTED Intl. Conference on Modeling and Simulation (MS 2011) 
發表論文
題目 
(中文)應用集群分析於改善軟體專案之風險項目識別 
(英文) Improvement of Risk Identification of Software Projects using Clustering 
Approach 
 3 
資料來驗證其效率。 
三、考察參觀活動(無是項活動者略) 
無 
四、建議 
依本次發表過程中其他學者所提出的意見修改相關細節，便將本方法運用到相關的嵌入式
軟體開發專案中，藉以搜集更多的執行資料來驗證其效能，並於整理相關的資料後投稿國際期
刊。 
五、攜回資料名稱及內容 
由 MS 2011 所發行之研討會會議論文集一本、CD 光碟片一片。 
六、其他 
無 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：張慶寶 計畫編號：99-2221-E-168-033- 
計畫名稱：利用程式樣式來改善嵌入式軟體發展流程 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 1 1 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 2 2 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
