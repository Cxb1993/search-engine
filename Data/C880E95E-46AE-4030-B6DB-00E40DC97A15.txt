reversible circuits. In this project, we want to 
develop a reversible circuit database to speed up the 
reversible circuit synthesis. This is because the 
synthesis time of a complicated reversible circuit 
usually is too long for the almost existing synthesis 
algorithms. We expect that the reversible circuit 
database can grow up automatically by the feedback of 
reversible circuit synthesis. This way can reduce the 
synthesis time of a complicated reversible circuit. 
英文關鍵詞： Reversible circuits, Circuit optimization, Logic 
synthesis, Quantum computing, Divide and conquer 
 
2 
 
faster while energy consumption problem is 
becoming more and more serious. This problem in 
portable devices is even more critical than others. 
Landauer[1] proved that traditional binary 
irreversible gates will result in power dissipation 
disregard of implementation technologies. Bennett 
[2] showed that for a binary circuit built from 
reversible gates no power will be consumed due to 
information loss. It is tempting to consider that 
reversible circuits may be useful for the power 
dissipation problem. Moreover, quantum computing 
[3] is one of the important applications of reversible 
circuits. Several quantum algorithms which solve 
traditional problems much faster have been proposed 
[4], [5]. Thus, quantum computing becomes one of 
the most rapidly expanding research fields. In fact, 
quantum circuits must be reversible, so reversible 
circuits is a special case of quantum circuits. 
A reversible circuit that produces a unique 
output pattern for each input pattern has the same 
number of inputs and outputs. If a circuit is 
reversible, it can reduce the energy consumption 
caused by information loss. To build a reversible 
circuit, we need a set of reversible gates as a 
universal gate set to synthesize the circuit. But 
traditional gates such as AND, OR, and 
exclusive-OR are not reversible. Only the NOT gate 
is a reversible gate. Therefore, a set of reversible 
gates different from traditional gates need to be 
defined. In fact, several reversible gates, including 
the controlled NOT gate (called the CN gate) and the 
Toffoli gate [6], have been proposed. Hence, the set 
of reversible gates including NOT, CN, and Toffoli 
gates can be used to synthesize a reversible circuit. 
二、研究目的 
1. 提出應用可逆電路資料庫進行可逆電路合成
演算法之方法。 
2. 提昇可逆電路合成演算法之效能。 
 
 
三、文獻探討 
A considerable number of studies [7-13] have 
been made on developing synthesis algorithms for 
the reversible circuits, but the results are not 
satisfactory compared with the optimal solution. 
There is much room for improving the performance 
of these synthesis algorithms. In fact, these 
algorithms can still be reused in the synthesis 
process to obtain much better results without 
proposing a new synthesis algorithm or modifying 
the existing synthesis algorithms. Reusing the 
existing algorithms can achieve the same goal. As 
far as we know, this is the first study on improving 
the performance of existing synthesis algorithms for 
generating more simplified reversible circuits. 
四、研究方法 
A. Circuit Bipartition 
 
Definition 1: A reversible circuit C is partitioned into 
two subcircuits Cs and Cc. Subcircuits Cs and Cc 
have m and p gates, respectively. 
In order to simplify the classical circuit design, 
a circuit is divided into subcircuits and the 
subcircuits are synthesized separately. This method 
is a very powerful technique in the classical circuit 
design and it can also be used in the reversible 
circuit design. Our method partitions a reversible 
circuit into two subcircuits Cs and Cc as shown in 
Fig. 1. Since the function specifications of the two 
subcircuits are not known after partition, we can not 
synthesize the two subcircuits separately. The circuit 
bipartition here is different from the classical circuit 
design. The possible solution is that one of the two 
subcircuits becomes known. Thus, we define that 
subcircuit Cs inputs all possible combinations of j 
gates excluding those with the same function 
specification, where j=1,2,...,m. The size of m 
depends on the tolerance of time consumption and 
the requirement of improvement performance. 
Subcircuit Cc is synthesized with the existing 
algorithm once at each change of subcircuit Cs. 
4 
 
intermediate pattern Y represented as (y1,y2,y3) 
according to the function of a CN gate. Sort patterns 
(y1,y2,y3) in increasing order and move patterns (d,e,f) 
to the right side of corresponding patterns (y1,y2,y3) 
in the truth table. Then we can obtain the truth table 
of subcircuit Cc. 
C. Performing an Existing Algorithm 
In this subsection, we introduce how to use an 
existing synthesis algorithm to obtain more 
simplified reversible circuits by using our method. 
The purpose of our method is to improve the 
performance of existing synthesis algorithms. After 
the bipartition of a reversible circuit, subcircuit Cs 
inputs all possible combinations of j gates excluding 
those with the same function specification. Finding 
the truth table of subcircuit Cc makes it possible to 
synthesize a better result. Next, subcircuit Cc can be 
synthesized with the existing algorithm to get a 
reversible subcircuit. Combine the two subcircuits 
Cs and Cc to become a possible result and repeat the 
method until the possible inputs of subcircuit Cs are 
empty. Then choose the reversible circuit with the 
smallest gate count from the set of possible results 
as the final circuit. 
After the circuit bipartition, subcircuit Cc may 
become smaller if subcircuit Cs inputs a proper 
combination of j gates. Since we do not know which 
one is the proper combination, subcircuit Cs needs to 
input all possible combinations of j gates for finding 
the proper combination. At the same time, if the size 
of subcircuit Cs is bigger, the possibility of 
becoming an optimal result for subcircuit Cc also 
becomes higher since a smaller circuit is easier to 
synthesize an optimal result than a bigger one as 
discussed in Subsection III(A). Thus, we can define 
the proper size of subcircuit Cs in our method to 
synthesize a better result according to the 
requirement of synthesis performance. 
 
Improvement Algorithm: 
A. Forward and Backward Procedures 
A reversible circuit is partitioned into two 
subcircuits. The relative position of two subcircuits 
slightly affects the performance of using our method. 
In fact, there are two kinds of operations in our 
method. If subcircuit Cs is located at the front side of 
the circuit as shown in Fig. 1, it is called the 
Forward procedure. Similarly, if subcircuit Cs is 
located at the rear side of the circuit as shown in Fig. 
3, it is called the Backward procedure. The steps of 
procedures Forward and Backward are almost the 
same except finding the intermediate patterns Y. 
 
Fig. 3. The Backward procedure of our method. 
 
B. Improvement Algorithm 
Our method ImproveProgram can improve the 
performance of existing synthesis algorithms and the 
detailed steps. The inputs of our method are the truth 
table of a reversible function TruthTable_C and the 
gate count of subcircuit Cs GateNumCs whose size 
depends on the tradeoff between time consumption 
and synthesis performance. First, use an existing 
algorithm ExistingAlg to obtain the initial reversible 
circuit GateC for comparison. Function Count 
returns the gate count of circuit GateC to the 
variable g(C) which is a comparison value for 
estimating the performance, where g(C) is the gate 
count of circuit C. Here the reversible circuit is 
partitioned into two subcircuits for finding the better 
result. This is based on the divide and conquer 
approach. Perform function InputCsGate to save all 
possible combinations of j gates, excluding those 
with the same function specification, into array 
SearchAllGate, where j=1,2,…,GateNumCs. The 
while loop continues until array SearchAllGate is 
null and find all the possible results whose total gate 
count (g(Cs)+g(Cc)) are less than or equal to g(C), 
where g(Cs) and g(Cc) are the gate count of 
Subcircuit Cs Subcircuit Cc 
Input Output Y 
m gates p gates 
6 
 
totally 40,320 different functions of 3 variables. The 
Forward columns show the synthesis results using 
the Forward procedure of our method. The circuit 
synthesis, where subcircuit Cs located at the front 
side is defined as 1, 2, or 3, is called procedure F1, 
F2, or F3, respectively. The experimental results of 
procedure F1 show that the improvement percentage 
is 77.12% compared with the Initial data. It is clear 
that our method can significantly improve the 
performance of the existing algorithm [16] even 
when subcircuit Cs only has 1 gate. Similarly, the 
experimental results of procedures F2 and F3 show 
that the improvement percentages are 96.21% and 
99.84%, respectively and the time consumptions are 
still reasonable. The Backward columns of the table 
show the synthesis results using the Backward 
procedure of our method. The circuit synthesis, 
where subcircuit Cs located at the rear side is defined 
as 1, 2, or 3, is called procedure B1, B2, or B3, 
respectively. We observe that the improvement of 
the synthesis performance using the Backward 
procedures is better than the Forward procedures. In 
particular, we can obtain the optimal results of all 
the 3-variable reversible functions by using our 
method as shown in the B3 column of the table. 
TABLE I.  EXPERIMENTAL RESULTS OF ALL THE 3-VARIABLE 
FUNCTIONS. 
 Forward Backward 
#gate Initial 
F1 F2 F3 B1 B2 B3 
Optimal 
Result 
10 2 0 0 0 0 0 0 0 
9 26 0 0 0 0 0 0 0 
8 1868 787 623 583 745 595 577 577 
7 11278 10689 10327 10247 10675 10352 10253 10253 
6 15313 16547 16929 17049 16615 16932 17049 17049 
5 8385 8777 8921 8921 8765 8921 8921 8921 
4 2708 2780 2780 2780 2780 2780 2780 2780 
3 625 625 625 625 625 625 625 625 
2 102 102 102 102 102 102 102 102 
1 12 12 12 12 12 12 12 12 
0 1 1 1 1 1 1 1 1 
Average gate 
count 
5.97396 5.8903 5.86962 5.86565 5.88817 5.86885 5.8655 5.8655 
Time 0:0:47 0:9:52 1:42:04 13:19:18 0:10:46 1:42:27 13:03:30 N/A 
Improvement 
Percentage 
0% 77.12% 96.21% 99.84% 79.12% 96.92% 100% N/A 
 
 
 
0
10
20
30
40
50
60
70
80
90
100
110
Initial 1gate 2gates 3gates
Im
p
ro
v
em
en
t 
P
er
ce
n
ta
g
e 
(%
)
Forward
Backward
Optimal
 
Fig. 5. The comparison of improvement percentages. 
 
The improvement percentages of performing 
the Forward and Backward procedures compared 
with the optimal results are shown in Fig. 5. The x 
axis represents the size of subcircuit Cs. It is clear 
that the performance improvement using the 
Backward procedure is better than the Forward 
procedure, but almost the same. We see from Fig. 5 
that the improvement percentage of our 
experimental results rises rapidly to the line 
represented as the optimal results. Since we apply 
the divide and conquer approach, the performance of 
the existing algorithm becomes much better after 
using our method. Even when the size of subcircuit 
Cs is only 1, we still can obtain better results. From 
Fig. 5, it is pretty obvious that our method is a 
powerful approach that can significantly improve the 
performance of the existing algorithms for the 
reversible circuit synthesis. 
5.85
5.9
5.95
6
6.05
6.1
A
v
e
ra
g
e
 g
a
te
 c
o
u
n
t
 
Fig. 6. The comparison of average gate count between the 
existing algorithms, our method, and optimal results. 
8 
 
Conference Computer-Aided Design, pp. 125-132, Nov., 
2002. 
[15] D. Maslov and G. W. Dueck, “Reversible cascades with 
minimal garbage, “ IEEE Trans. on CAD of Integrated 
Circuits and Systems, Vol. 23, No. 11, pp. 1497-1509, 
November, 2004. 
[16] S. A. Wang, C. Y. Lu, I M. Tsai and S. Y. Kuo, “Modified 
Karnaugh map for quantum boolean circuits construction,” 
in Proc. of the 3rd IEEE Conference on Nanotechnology, 
pp. 651-654, 2003. 
[17] D. Maslov and G. W. Dueck, “Improved quantum cost for 
n-bit Toffoli gates, “ Electronics Letters, Vol. 39, No. 25, 
pp. 1790-1791, December, 2003. 
[18] D. Maslov, G. W. Dueck, and N. Scott, “Reversible logic 
synthesis benchmarks page, “ [Online] Available: 
www.cs.uvic.ca/~dmaslov/, February, 2005. 
[19] A. Barenco, C. H. Bennett, R. Cleve, D. P. DiVincenzo, N. 
Margolus, P. Shor, T. Sleator, J. A. Smolin, and H. 
Weinfurter, “Elementary gates for quantum computation,” 
Physical Review A, 50: pp. 3457-3467, Nov. 1995. 
[20] A. Agrawal and N. K. Jha, “Synthesis of reversible logic, 
“ in Design, Automation and Test in Europe, 
pp.1384-1385, February, 2004. 
[21] D. Maslov, D. M. Miller, and G. W. Dueck, “Techniques 
for the synthesis of reversible Toffoli networks, “ in 
quant-ph/0607166, July, 2006. 
[22] D. M. Miller, D. Maslov, and G. W. Dueck, “A 
transformation based algorithm for reversible logic 
synthesis, “ in Design Automation Conference, pp. 
318-323, June, 2003. 
[23] T. Toffoli, “Reversible computing, “ Tech. memo 
MIT/LCS/TM-151, MIT Lab for Comp. Sci., 1980. 
[24] Richard S. Sandige, “Modern Digital Design,” New York: 
McGraw-Hill, 1990. 
[25] D. Maslov, G. W. Dueck, and N. Scott, “Reversible logic 
synthesis benchmarks page, “ [Online] Available: 
www.cs.uvic.ca/~dmaslov/, February, 2005. 
[26] D. Maslov, D. M. Miller, and G. W. Dueck, “Techniques 
for the synthesis of reversible Toffoli networks, “ in 
quant-ph/0607166, July, 2006. 
[27] A. Agrawal and N. K. Jha, “Synthesis of reversible logic, 
“ in Design, Automation and Test in Europe, 
pp.1384-1385, February, 2004. 
七、附錄 
 
 
  
二、與會心得 
AQIS2012研討會是由蘇州大學（SuZhou University）和 Laser & Optical 
Engineering Society of Suzhou合辦 ，這是一場匯集全世界研究數學和物理
的專家學者之研討會，雖然大會只有舉辦四天，但是在這四天所獲得的啟發是
相當地多，對於我目前的研究內容有非常大的幫助，當然我也會從這些啟發和
所收集到的資料，挑選適合學生程度的內容，以補充教材方式教授學生，讓學
生能更了解這方面的最新發展。 
在 AQIS2012研討會中，將本人近期量子計算的研究成果 ” 量子布林電路合
成演算法之效率改善”，以論文方式公開發表，並且和相關領域的專家學者互相
討論我的論文內容，同時了解其他人的研究方向，並且觀摩其他人的論文，隨時
對自己的研究方向做最適當的修正，並且啟發更多的研究構思。 
 
三、考察參觀活動(無是項活動者略) 
四、建議 
五、攜回資料名稱及內容 
論文集，內含發表之論文。 
六、其他 
  
  
100年度專題研究計畫研究成果彙整表 
計畫主持人：盧勤庸 計畫編號：100-2221-E-237-006- 
計畫名稱：使用可逆電路資料庫進行可逆電路合成之研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
