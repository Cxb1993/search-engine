報告內容 
1.   Introduction 
For scientific and engineering applications, parallel systems based on distributed memory 
multicomputers have been  increasingly applied [Guo 2003a and 2003b, Chang et al. 2004, Alex et al. 
2004]. The main shortcoming of distributed memory multicomputers is the difficulty in programming 
because of without shared memory space [Michael 1996]. In such systems , the programmers (or compilers) 
must be responsible for distributing the computations and data in a program over processors and managing 
communications among tasks. Thus, carefully arranging the computations and data locality in a program can 
improve their throughput. This matter relates to determine which computations need to be distributed onto 
which processors and what data should be stored locally for the corresponding computations to access with 
little or no communication cost [Ramanujam et al. 1991, Chang et al. 2004]. 
 
Induction variable is one scalar integer variable, which is used in a loop to simulate do-variables: it is 
incremented or decremented by a constant amount through each iteration. Every induction variable can be 
replaced by a linear function or a nonlinear function in the form of do-variables. The transformation is called 
induction variable substitution. Consider a do-loop shown in Figure 1(a). If induction variable substitution is 
performed for the induction variable K, the result after transformation can be shown in Figure 1(b). In 
Figure 1(b), each array reference contains 2 raised to the power of the outer loop index I. No existed data 
alignment method can be applied to solve the problem of communication-free data alignment for the case in 
Figure (1b). Therefore, an efficient and precise method for solving the problem of communication-free data 
alignment for arrays with exponential references is very important. 
 
  K=2                                    K=2 
  DO I = 1, N, 1                            DO I = 1, N, 1 
DO J =1, 2**I, 1                         DO J =1, 2**I, 1 
      K = K + 1                             K= 2 ** I + J 
  S:  X(K) = Y(K) * Z(K)                  S:  X(2 ** I + J) = Y(2 ** I + J) * Z(2 ** I + J) 
    ENDDO                                ENDDO 
  ENDDO                                 ENDDO 
 
Figure 1(a): A do-loop                    Figure 1(b): After with an induction variable induction 
variable substitution for the induction variable K. 
 
Figure 1: A do-loop in a Fortran program. 
 
In this research, we offer the alignment techniques to properly map the loop iteration space that implies 
the computation instances, and the array elements which are, respectively, referred using exponential 
subscripts with multiple loop index variables, onto the virtual processors so that no communication cost for 
data accesses is yielded. Based on operations of elementary linear algebra, our alignment methods reduce 
the mapping problem of the computations and array elements into the problem of determining a null space 
generate as little communication as possible. Finally, in the third phase, the remaining constraints are solved 
to figure out the computation and data mapping functions. Solving the remaining constraints in terms of 
linear algebra is equal to determine the null space basis for a matrix. The programmer eventually based on 
the alignment results needs to provide codes ahead of the nested loops for replicating or broadcasting data 
onto the processors so that no further communication is needed within the nested loops. 
 
2.2. Brief Introduction of Existed Famous Methods for Solving the Alignment Problem 
Many researchers over the past several years have paid attention to maximize parallelism and minimize 
the communication cost for any given program run on a parallel machine with multiprocessors and local 
memory. For distributed memory parallel machines , the problem of data space of communication-free 
partition along hyper-planes was considered from [Ramanujam and and Sadayappan 1991]. For this problem, 
a matrix-based formulation was proposed to figure out the existence of communication-free partitions for 
data arrays. An algorithm based on Gaussian elimination was offered from [Feautrier 1993] and was applied 
to compute a placement function for the problem of data and code distributions among the processors of a 
distributed memory supercomputer. When mapping affine loop nests onto distributed memory parallel 
computers, for the data and computation alignment problem, an access graph to model affine 
communications more adequately was presented from [Dion et al. 1996]. For a program with nested loops, 
data access pattern analyzing approaches was proposed from [Lam et al. 1998 and 1999] and was used to 
enable the program to run on a parallel machine in a communication-free manner with some constraints. For 
multi-dimensional redistribution, Guo et al. [Guo et al. 1998, 1999, 2001]  focused on automatic generation 
of communication routines.For multi-statements in perfect and imperfect loops, [Shih et al. 2000] checked 
the problem to communication-free partition statement-iteration and data spaces along hyper-planes. The 
necessary and sufficient conditions for communication-free hyper-plane partitions were proposed. If the 
communication cost for performing do-loops is larger than a threshold value, from [Lee 1997], it was proved 
that data re-distribution is necessary for executing a sequence of do loops. An expression-rewriting 
framework to produce communication sets for arrays in loops with block-cyclic distribution was offered 
from [Hwang et al. 1999]. Efficient methods were offered from [Hsu et al. 1998 and 2000] and were used to 
finish block-cyclic array redistribution that allows a processor not to construct send/receive data sets for a 
re-distribution.  
 
A linear algebra framework was offered from [Kandemir et al. 1998a and 1998b] and was employed to 
automatically figure out the optimal data layouts expressed by hyper-planes for each array reference in a 
program. An efficient method was presented from [Boudet et al. 1998] and was used to solve the alignment 
problem by considering how to align and distribute data arrays while at the same time considering how to 
preserve parallelism for a given program. An alignment technique was offered from [Bau et al. 1994] and 
was applied to align arrays referenced using linear subscripts with one loop index variable in a 
communication-free manner. New communication-free alignment methods were proposed from [Chu et al. 
1998, Chang et al. 2001] and were used to align the arrays referenced using linear subscripts with three loop 
index variables. 
 
For array references with quadratic subscripts or linear subscripts in a general n do loops, two new data 
alignment technologies were proposed from [Chang et al. 2004]. Our proposed techniques use to properly 
nI
ne
I
e aa 2     2  ,1 , 1 ++L  + be,1I1 + L + be, nIn + fe, where I1, I2,L, In are index variables of the general loop 
and ae,1, L, ae,n, be,1, L, be,n are coefficients, which in general are integers or fractions in the exponential 
cases, and fe is an integer constant. For treating the exponential references, we can extend an iteration vector 
i as i = ,2 , ,2[ 1 nii L  i1, L, in]T, iv is an index value of Iv for 1 ≤ v ≤ n and T is the transposition operation) 
in the iteration space of this general n nested do loop, the alignment constraints require the processor 
performing iteration i, which stands for a computation instance, to own Ae(RAe). From our proposed methods, 
if there exist two or more distinct references (either read or write) to an array, each of the distinct references 
will be selected as the alignment constraints respectively for this array without considering their data 
dependences.  
Consider an example in Figure 2, where a statement containing three different one-dimensional arrays 
(i.e., t = 3 and m = 1) . For an iteration vector i (i =  ,2 ,2[ ji i, j]T), the alignment constraint demands that 
the processor performing iteration i must own A(RA), B(RB) and D(RD), where RA = 2I + J, RB = 2I + J and 
RD = 2I + J. 
 
DO I = 1, N, 1 
DO J =1, 2 ** I, 1 
S1: A(2 ** I + J) = B(2 ** I + J) * D(2 ** I + J) 
ENDDO 
ENDDO 
Figure 2: The Fortran do-loop extracted from TFFT2 programs in the SPEC95FP Benchmarks. 
 
Assume that C is the computation mapping function to map the loop iteration space onto virtual 
processors and DAe is the data mapping function to map the array elements of Ae onto virtual processors. 
The alignment problem can be formulated as: Find C and DAe such that ∀ i ∈ iteration space of this loop: 
C(i)=DAe(RAe).     (Eq3-1) 
In order to map the computations and array elements in a communication-free manner, our alignment 
methods consider the array subscript patterns that are generalized exponential subscripts here. Therefore, C 
and DAe will be formulated using our technique as follows: 
 RAe=
'
eA
R i + fe ( '
eA
R = [ae,1, L, ae,n, be,1, L, be,n]),      (Eq3-2) 
 C(i)= 'C  i + c0,                                    (Eq3-3) 
 and DAe(RAe)= )(
'
ee AA
RD + d0 = '' (
ee AA
RD i + fe) + d0.     (Eq3-4) 
From (Eq3-3) and (Eq3-4), (Eq3-1) can be converted into the following equation: 
 
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
1
2
1
3,32,31,3
3,22,21,2
3,12,11,1
1
i
ccc
ccc
ccc i
=
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
1
2
111
100 1
1,1,
3,32,31,3
3,22,21,2
3,12,11,1
1
i
fba
ddd
ddd
ddd ieee
. 
This makes C and DAe 3×3 square matrices. Continuing with this notion, the alignment constraint for 
the iteration space of this n nested does loop can be formally expressed, using our technique, as: 
C 'i  = .
1
2 1
12n ,122 ,121 ,12
12n ,22 ,21 ,2
12n ,12 ,11 ,1
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢
⎣
⎡
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
++++
+
+
n
i
nnn
i
ccc
ccc
ccc
M
L
MLMM
L
L
 
 The alignment constraint for an array Ae, 1≤ e ≤ t, in the general loop can be represented as: 
DAeFAe
'i  = .
1
2
1111
1111
1000
1,2,1,
12,121,12
12,11,1
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢
⎣
⎡
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
+++
+
n
ieneee
nnn
n
i
fbaa
dd
dd
M
L
MMOMM
L
L
L
L
MOM
L
 
Therefore, the alignment problem can be restated as: Find C and DAe such that ∀ i ∈ iteration space of 
this loop: 
C 'i = DAeFAe
'i . 
Here, 'i =[i, 1]T, as mentioned. The above equation can be reduced to (Eq3-8) to determine C and DAe, 
as described. This requires the column vector 'i  on both sides of the equation to be eliminated to make 
(C-DAeFAe) equal to 0 for any 
'i . To do this, we need the following lemma. 
Lemma 3-1: Let Pi be a p × 1 matrix for 1 ≤ i ≤ 2n, w a p-elements column vector, 0 a p-elements zero 
vector and yi a scalar variable for 1 ≤ i ≤ 2n. Then 
[ ] 00 =≤≤=⇔=
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢
⎣
⎡
∀ + w0w  and ,21for       
1
2
2
        1211
1
niP
y
yPPPPy i
n
y
y
nnni
n
M
M
LL . 
Proof: 
 
This means  
Pq = 0, 
that contradicts the assumption. Similarly, we have Pr = 0, Ps = 0, Pt = 0 and w = 0. Therefore, we have 
P1 = L = Pn = Pn+1 = L = P2n = w = 0. 
⇐) The (if part) is trivial  
g 
From Lemma 3−1, (Eq3-7) can actually be rewritten as: 
C = DAeFAe.     (Eq3-9) 
For 1≤ e ≤ t, the equation system of (Eq3-9) can be converted into the following matrix equation 
(Eq3-10): 
[ ] [ ]0  0
00
0
0
00
III
L
L
OM
MO
L
L
L =
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
−
−
t
t
A
A
AA
F
F
DDC
1
1
   . 
Here, I is a (2n+1)×(2n+1) identity matrix, 0 is a (2n+1)×(2n+1) zero matrix and [ ]00 L  is a 
(2n+1)×((2n+1)×t) zero matrix. 
 
To solve the matrix equation [U]s×m[V]m×n=[0]s×n in which [U]s×m is unknown and [V]m×n is known, 
we can first transform V into a 'rank-revealing' form by performing the required rank-preserving operations 
⎯ elementary row and column operations. The notion behind this is to get a matrix into a form in which its 
rank can be determined by inspection [Edmonds 1967, Bau et al. 1994]. One way to achieve this is to 
perform integer preserving Gaussian elimination [Edmonds 1967, Luenberger 1984], whereby matrix rows 
or columns are systematically manipulated by elementary row or column operations to yield a matrix in 
echelon form, to enable us to obtain the following factorization (suppose that V∈Zm×n and rank(V) = r): 
[ ] [ ] [ ]
nm
nnnmmm
RR
PVH
×
××× ⎥⎦
⎤⎢⎣
⎡=
00
2 ,11 ,1 . 
Here, H is an m×m invertible matrix representing the row operations, P is an n×n unimodular matrix 
representing the column operations and R1,1 is an r×r upper triangular invertible matrix. It is a property of 
this factorization that the transposition of the last m-r rows of H spans the null space of VT. Thus, we can 
then obtain the solution for [U]s×m as follows: 
U=H(r+1:m, 1:m). 
This means that only H, the composition of row operations, needs to be determined during the 
elimination. 
 
We consider that in the example in Figure 2 the alignment constraint for the iteration space of this loop 
can be formally expressed as: 
[ ] . 
10000100001000011111
01000010000100011111
00100001000010011111
00010000100001010000
00001000010000101001
    
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
=DBA DDDC  
This gives us: 
C = 
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
11111
11111
11111
10000
01001
, DA = ,
10000
01000
00100
00010
00001
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
  
 
DB = 
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
10000
01000
00100
00010
00001
 and DD = .
10000
01000
00100
00010
00001
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
 
We can obtain the mappings of computations and data as follows: 
C 'i  = ,
122
122
122
1
2
1
2
2
11111
11111
11111
10000
01001
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
++++
++++
++++
+
=
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
JI
JI
JI
J
J
I
JI
JI
JI
I
J
I
 
DAFA 'i  = 
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
1
2
2
11111
11111
11111
10000
01001
10000
01000
00100
00010
00001
J
I
J
I
 = ,
122
122
122
1
2
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
++++
++++
++++
+
JI
JI
JI
J
JI
JI
JI
I
 
DBFB 'i  = 
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
1
2
2
11111
11111
11111
10000
01001
10000
01000
00100
00010
00001
J
I
J
I
 = 
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
++++
++++
++++
+
122
122
122
1
2
JI
JI
JI
J
JI
JI
JI
I
 and 
DDFD 'i  = 
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
1
2
2
11111
11111
11111
10000
01001
10000
01000
00100
00010
00001
J
I
J
I
 = .
122
122
122
1
2
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
++++
++++
++++
+
JI
JI
JI
J
JI
JI
JI
I
 
the same as the previous technique in subsection 3.1 except that C and DAe are formulated in different 
patterns. However, in dealing with the nonlinear cases, more subtle but non-trivial adjustments on (Eq3-3) 
and (Eq3-4) are needed to construct C, DAe and FAe as square matrices for the nested do loop with different 
numbers of loop index variables. Similar to the exponential case, the alignment problem can be described as: 
Find C and DAe such that ∀ i ∈ iteration space of this loop: 
C 'i = DAeFAe
'i . 
In this case, i =[I, L, J, K]T and 'i  = T)2()1( ]1,,2,2*[ KJ LL −− . The alignment constraint for the 
iteration space of this general loop can be formally expressed as follows, using our alignment technique: 
C 'i  = 
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
4,43,42,41,4
4,33,32,31,3
4,23,22,21,2
4,13,12,11,1
cccc
cccc
cccc
cccc
 * 
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢
⎣
⎡ −
−
)1(
)2(
1
2
2* L
L
K
J
. 
The alignment constraint for an array Ae, 1≤ e ≤ t, in the general loop can be represented as: 
DAeFAe
'i  = .
1
2
2*
1111
1111
1000 )2(
)1(
4,3,2,1,
4,43,42,41,4
4,33,32,31,3
4,23,22,21,2
4,13,12,11,1
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢
⎣
⎡
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
−
−
K
Jaaaa
dddd
dddd
dddd
dddd
L
L
eeee
 
Similar to the discussion in the previous subsection, the column vector 'i  on both sides of equation, 
C 'i = DAeFAe
'i , is required to be eliminated for any 'i . For this kind of loops, we need the following 
lemma. 
Lemma 3-2: Let Pi be a 4 × 1 matrix for 1 ≤ i ≤ 3, w be a four-elements column vector, 0 be a 
four-elements zero vector and yz be a scalar variable for 1 ≤ z ≤ 4. Then 
[ ] 00 =≤≤=⇔=
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢
⎣
⎡
∀
−
−
w0w  and ,31for       
1
2
2*
       
4
)2(
)1(
3
321
2
2
iP
y
y
PPPy i
y
y
z . 
Proof: 
[ ] 0w   
1
2
2*
    
4
)2(
)1(
3
321
2
2
=
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢
⎣
⎡
−
−
y
y
PPP
y
y
 
⇔ 
that in solving the above matrix equation, each row with fraction elements in each FAe can be first multiplied 
by a factor to make it have only integer elements. In the example in Figure 3, the alignment constraint for 
the iteration space of this loop can be formally expressed as: 
C 'i =
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
4,43,42,41,4
4,33,32,31,3
4,23,22,21,2
4,13,12,11,1
cccc
cccc
cccc
cccc
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢
⎣
⎡
−
−
1
2
2*
 
4
)2(
)1(
3
2
2
y
y
y
y
. 
The alignment constraints for arrays A and B can be respectively represented as: 
 DAFA 'i = 
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
4,43,42,41,4
4,33,32,31,3
4,23,22,21,2
4,13,12,11,1
xxxx
xxxx
xxxx
xxxx
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
1111
1111
1000
0111
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢
⎣
⎡
−
−
1
2
2*
 
4
)2(
)1(
3
2
2
y
y
y
y
and 
 DBFB 'i =
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
4,43,42,41,4
4,33,32,31,3
4,23,22,21,2
4,13,12,11,1
yyyy
yyyy
yyyy
yyyy
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
1111
1111
1000
0111
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢
⎣
⎡
−
−
1
2
2*
 
4
)2(
)1(
3
2
2
y
y
y
y
. 
The alignment problem can be expressed as follows: Find C, DA and DB such that ∀ (I, L, J, K)∈ 
iteration space of this loop: 
⎩⎨
⎧
=
=
BB
AA
FDC
FDC
.     (Eq3-13) 
The equations system of (Eq3-13) can be converted into the following matrix equation: 
[ ] [ ] 00
0
0
II
 =⎥⎥⎦
⎤
⎢⎢⎣
⎡
−
−
B
ABA
F
FBDC .     (Eq3-14) 
Here, I is a 4×4 identity matrix and 0 is a 4×4 zero matrix. According to the method stated in 
subsection 3.1, a solution matrix of (Eq3-14) is: 
[ ] =BA DDC
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
100010001111
010001001111
001000101000
000100010111
. 
This gives us: 
C = 
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
1111
1111
1000
0111
, DA = 
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
1000
0100
0010
0001
 and DB = 
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
1000
0100
0010
0001
. 
We can obtain the mappings of computations and data as follows: 
DAeFAe
'i  = 
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
+++
+
1111
1111
1000
,2,1,
12,121,12
12,11,1
L
MMOMM
L
L
L
L
MOM
L
eneee
nnn
n
fbaa
dd
dd
,
1
2
2
1
1
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢
⎣
⎡
n
i
i
i
i
n
M
M
  
and C 'i  = DAeFAe
'i . Take any element of C 'i  for example, 
+++ ninkik cc 2*2*  ,1 , 1 L 12 ,22 ,11 , ** +++ +++ nknnknnk cicic L  for 1≤ k ≤ (2 * n + 1), as the template 
alignment function by which the template elements are determined for the corresponding iterations 
(computations) and their needed data to be mapped onto, then two dependent iterations i1 = 
[ ,2 , ,2  ,111  , nii L 1 , , , 2 ,11 ,1 nn ii L+ ] and i2 = [ ,2 , ,2  ,212  , nii L 1 , , , 2 ,21 ,2 nn ii L+ ], which both access to the same 
element of array Ae, will be mapped onto the same template array element. 
It is obvious that two iterations i1 = [ ,2 , ,2  ,111
 , nii L 1 , , , 2 ,11 ,1 nn ii L+ ] and i2 = 
[ ,2 , ,2  ,212  , nii L 1 , , , 2 ,21 ,2 nn ii L+ ] can be mapped onto the same template element if and only if 
+++ ninkik cc  ,11 ,1 2*2*  ,1 , L 12 ,2 ,12 ,1 ,11 , ** +++ +++ nknnknnk cicic L  = 
+++ ninkik cc  ,21 ,2 2*2*  ,1 , L 12 ,2 ,22 ,1 ,21 , ** +++ +++ nknnknnk cicic L  for 1≤ k ≤ (2 * n + 1). Because of that 
C 'i = DAeFAe
'i , for two iterations i1 = [ ,2 , ,2  ,111
 , nii L 1 , , , 2 ,11 ,1 nn ii L+ ] and i2 = 
[ ,2 , ,2  ,212  , nii L 1 , , , 2 ,21 ,2 nn ii L+ ], we have that if +++ nineie aa  ,11 ,1 2*2*  ,1 , L ennene fibib ++++ 2 ,1 ,1 ,11 , ** L  
= +++ nineie aa  ,21 ,2 2*2*  ,1 , L ennene fibib ++++ 2 ,2 ,1 ,21 , ** L  then 
+++ ninkik cc  ,11 ,1 2*2*  ,1 , L 12 ,2 ,12 ,1 ,11 , ** +++ +++ nknnknnk cicic L  = 
+++ ninkik cc  ,21 ,2 2*2*  ,1 , L .** 12 ,2 ,22 ,1 ,21 , +++ +++ nknnknnk cicic L  For two dependent iterations i1 = 
[ ,2 , ,2  ,111  , nii L 1 , , , 2 ,11 ,1 nn ii L+ ] and i2 = [ ,2 , ,2  ,212  , nii L 1 , , , 2 ,21 ,2 nn ii L+ ], they access to the same data element 
of array Ae, that is, +++ nineie aa  ,11 ,1 2*2*  ,1 , L ennene fibib ++++ 2 ,1 ,1 ,11 , ** L  = 
+++ nineie aa  ,21 ,2 2*2*  ,1 , L ennene fibib ++++ 2 ,2 ,1 ,21 , ** L . Therefore, we have that two dependent 
iterations i1 = [ ,2 , ,2  ,111
 , nii L 1 , , , 2 ,11 ,1 nn ii L+ ] and i2 = [ ,2 , ,2  ,212  , nii L 1 , , , 2 ,21 ,2 nn ii L+ ] will be mapped onto 
 
The code segments extracted from TFFT2 programs in the SPEC95FP Benchmarks contain arrays 
referenced using exponential subscripts and other complex nonlinear subscripts, as shown respectively in 
Table 1 and Table 2. The code segment in Table 1 contains three do-loops. The first do-loop in Table 1 is 
only used to evaluate performance of every machine tested, so it is not considered to find alignment 
functions for those arrays in statements S1 and S2. Those arrays in statements S1 and S2 for the second 
do-loop and the third do-loop have no data dependence such that they can intrinsically be executed in 
parallel. Our proposed method in subsection 3.1 can align the arrays of this code segment in a 
communication-free manner that does not cause inter-processor communication. 
On the other hand, the code segment in Table 2 contains four do-loops. The first do-loop in Table 2 is 
also only used to evaluate performance of every machine tested, so it is not considered to find alignment 
functions for those arrays in statements S1 and S2. Those arrays in statements S1 and S2 for the second 
do-loop, the third do-loop and the fourth do-loop have no data dependence such that they can intrinsically be 
executed in parallel. Our proposed method in subsection 3.2 can align the arrays of this code segment in a 
communication-free manner that does not cause inter-processor communication. 
 
DO P = 1, N, 1 
… 
DO I = 1, M, 1 
DO J =1, 2I, 1 
… 
S1: A(2 ** I + J) = r1 * s1 − r2 * s2 + COS(ti)
S2: B(2 ** I + J) = r2 * s1 + r1 * s2 + SIN(ti) 
… 
ENDDO 
ENDDO 
… 
ENDDO 
Align A(2 ** I + J) with T(2 ** I + J).
Align B(2 ** I + J) with T(2 ** I + J).
 
Table 1: The extracted code segment and the data alignments with our technique in subsection 3.1. 
 
DO I = 0, 2**(M − 1) 
   … 
DO L = 1, (1 + M) / 2 
DO J = 0, 2**((1 + M − L) − 1) 
DO K = 1, 2**(L − 2) 
… 
S1: A(K + J * 2 ** (L − 1) + 2 ** (L − 2)) = t1 + t2 -
sin(pi) 
S2: B(K + J * 2 ** (L − 1) + 2 ** (L − 2)) = t3 - t4 + 
cos(pi) 
Align A(K + J * 2 ** (L − 1)
+ 2 ** (L − 2)) with T(K + J * 2 
** (L − 1) + 2 ** (L − 2)). 
 
Align B(K + J * 2 ** (L − 1)
+ 2 ** (L − 2)) with T(K + J * 2 
** (L − 1) + 2 ** (L − 2)). 
27540 50810 92411
1713516
1048350 1049331 1050093 1050586
0
500000
1000000
1500000
2000000
5 7 9 11
ns
ec
Upper bound of index variable I
sequential time parallel time
 
Figure 5: The overall sequential and parallel run times for the extracted code segment in Table 2. 
 
579746754
3779450
6011871731560297
0
100000000
200000000
300000000
400000000
500000000
600000000
700000000
13 15
Upper bound of index variable I
m
se
c
sequential time parallel time
 
Figure 6: The overall sequential and parallel run times for the extracted code segment in Table 2. 
 
4. Conclusions 
Generally, a single nested loop is the main program section to be parallelized, the data alignment, 
which reduces the inter-processor communication to avoid undermining the benefits of parallelism, is often 
discussed on a single nested loop basis. On the other hand, to reduce the communication for a program with 
multiple parallelizable nested loops, a data alignment focusing on the whole program may be needed. 
However, the alignment entirely based on the whole program is extremely complicated because many 
factors, e.g., data dependences across the nested loops, the iteration spaces for different nested loops and the 
data access patterns for each nested loop, etc, need to be considered. Alternatively, an intuitive way for 
aligning data arrays over multiple nested loops is to align the data arrays with the proposed techniques for 
each individual single nested loop. It is possible that large amounts of communication will occur in this way 
because the data arrays might need to be remapped onto the template elements and redistributed over the 
processors across the nested loops. Nevertheless, whether the time to run the program in the above way is 
alignment for array references with linear subscripts in two loop index variables or quadratic subscripts. 
Proceedings of the Second IASTED International Conference on Parallel and Distributed Computing and 
Networks (PDCN'98), Australia, pp. 571-576. 
 
Dion Michel and Robert Yves 1996. Mapping Affine loop nests: New results. Parallel Computing, Vol. 22, 
No. 10, pp. 1373-1397. 
 
Edmonds Jack 1967. Systems of distinct representative and linear algebra. Journal of research of national 
bureau of standards, Sect. B, Vol. 71, No. 4, pp. 241−245. 
 
Feautrier Paul 1993. Toward automatic partitioning of arrays on distributed memory computers. ACM 
International Conference on Supercomputing, pp. 175-184. 
 
Guo M., Yamashita Y., and Nakata I 1998. Efficient implementation of multi-dimensional array 
redistribution. IEICE transactions on Information and Systems, Vol. E81-D, No. 11, pp. 1195-1204. 
 
Guo M., Nakata I., and Yamashita Y 2000. Contention-free communication scheduling for array 
redistribution. Parallel Computing, Vol. 26, No.8, pp. 1325-1343. 
 
Guo M. and Nakata I 2001. A framework for efficient array redistribution on distributed memory multicomputers. The Journal of 
Supercomputing, Vol. 20, No. 3, pp. 243-265. 
 
Guo M. 2003a. Efficient loop partitioning for parallel codes of irregular scientific computations. IEICE 
transactions on Information and Systems, Vol. E86-D, No. 9, pp. 1825-1834. 
 
Guo M. 2003b. Communication generation for irregular codes. The Journal of Supercomputing, Vol. 25, No. 
3, pp. 199-214. 
 
Hoeflinger Jay 1998. Interprocedural Parallelization Using Memory Classification Analysis. Ph.D. thesis, 
Univ. of Illinois at Urbana-Champaign, Center for Supercomputing Res. &: Dev. 
 
Hsu Ching-Hsien, Bai Sheng-Wen, Chung Yeh-Ching and Yang Chu-Sing, 2000. A generalized basic-cycle 
calculation method for array redistribution. IEEE Transactions on Parallel and Distributed Systems, Vol. 11, 
No. 12, pp. 1201-1216. 
 
Hwang Gwan-Hwan and Lee Jenq Kuen 1999. An expression-rewriting framework to generate 
communication sets for HPF programs with block-cyclic distribution. Parallel Computing, 25(1999), pp. 
1105-1139. 
 
Kandemir M., Choudhary A., Shenoy N., Banerjee P. and Ramanujam J. 1998a. A hyperplane based 
approach for optimizing spatial locality in loop nests. In Proc. 12th ACM Int. Conf. Supercomputing, pp. 
69-76. 
 國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
   X 達成目標 
□ 未達成目標（請說明，以 100 字為限） 
□ 實驗失敗 
□ 因故實驗中斷 
□ 其他原因 
說明： 
 
Part of “一種新設計最佳化數據對齊方法用於指數函數的陣列參考在平行編譯器最佳化之應
用應用(A new designed and optimized data alignment method for arrays references with 
exponential functions applying in parallel compiler optimizations)” has been submitted to 
International Journal of Innovative Computing, Information and Control for publication. 本計劃藉
由一種新設計最佳化數據對齊方法用於指數函數的陣列參考在平行編譯器最佳化之應用，完
成: 
(1) 建置 a MPI (Message Passing Interface) using C language in our PC-cluster environment. The 
some codes extracted from TFFT2 programs in the SPEC95FP Benchmarks are executed 
sequentially and in parallel in our MPI environment, respectively. 
(2) Preparation, coding and completion of a new optimized data alignment technique to align the 
arrays referenced using exponential subscripts with n loop index variables or other complex 
nonlinear expressions. 
(3) 藉由一種新設計最佳化數據對齊方法用於指數函數的陣列參考在平行編譯器問題得到最
佳解 
(4) 最佳化計算模組在面臨不確定動態的設定時藉由一種新設計最佳化數據對齊方法用於指
數函數的陣支持最佳化計算決策 
 
 
附件二 
 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：X已發表 X 未發表之文稿 X 撰寫中 □無 
專利：□已獲得 □申請中 □無 
技轉：□已技轉 □洽談中 □無 
其他：（以 100 字為限） 
 
Based upon the 2009 NSC research project of A New Designed and Optimized Data Alignment 
Method for Arrays References with Exponential Functions Applying in Parallel Compiler 
Optimizations (一種新設計最佳化數據對齊方法用於指數函數的陣列參考在平行編譯器最佳化
之應用), several developed related articles are accepted and to appear in the international known 
conferences and journals. They are: 
(1) Michael (Shan-Hui) Ho “A new designed and optimized data alignment method for arrays 
references with exponential functions applying in parallel compiler optimizations,” submitted in 
International Journal of Innovative Computing, Information and Control, (SCI). 
(2) Michael (Shan-Hui) Ho “Communication-free data alignment for arrays with exponential 
references in parallelizing compilers for scalable parallel systems,” accepted and published in
the Journal of Supercomputing, 2009, (SCI). 
 
Other related papers to be published in the years of 2009 and 2010 are: 
(1) Michael Shan-Hui Ho, Kun-Yu Hung and Le-Pong Chin, Chaochang Chiu “Constructing 
Optimized Bioinformatics Parallel Subtractor and Divider with Basic Logic Operations in the 
Adleman-Lipton Model,” ICIC Express Letters, Vol. 3, No. 4(A), pp. 1013-1018. (EI) 
(2) Chi-I Hsu, Chaochang Chiu, Michael Shan-Hui Ho “The Prediction of PKI Security 
Performance using PSO and Bayesian Classifier,” ICIC Express Letters, Vol. 3, No. 4(A), pp. 
1031-1036. (EI)  
 
Other papers are published in the international conference proceedingsin the years of 2009 and 2010
are: 
(1) Michael Shan-Hui Ho, Kun-Yu Hung and Le-Pong Chin, Chaochang Chiu “Constructing 
Optimized Bioinformatics Parallel Subtractor and Divider with Basic Logic Operations in the 
Adleman-Lipton Model,” The Second International Symposium on Intelligent Informatics 
(ISII2009) 
(2) Chi-I Hsu, Chaochang Chiu, Michael Shan-Hui Ho “The Prediction of PKI Security 
Performance using PSO and Bayesian Classifier,” The Second International Symposium on 
Intelligent Informatics (ISII2009) 
 
 
 
 1
 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                     日期： 99 年 8 月 20 日 
一、參加會議經過 
The Second International Symposium on Intelligent Informatics (ISII2009) organized by ICIC 
International and Yanshan University (China), sponsored by Tokai University (Japan), Dalian 
University of Technology (China), Dalian Maritime University (China), SOFT Kyushu Chapter 
(Japan), Yanda Industry Group Company (China), and Qinhuangdao Yanda Intelligent Informatics 
Inc. (China), was held on September 13-15, 2009, at QinHuangDao, China. 
 
The scope of the International Symposium on Intelligent Informatics research areas are intelligent 
systems, information and control, includes but not limited to:  
 
Intelligent Systems and Innovative Computing  
Artificial intelligence and expert systems, approximate reasoning, fuzzy systems and rough sets, 
fuzzy optimization and decision making, evolutionary computation, intelligent information systems, 
image and speech signal processing, human-machine learning, neural networks, knowledge discovery, 
計畫編號 NSC 98-2221-E-305-009- 
計畫名稱 (中文) 一種新設計最佳化數據對齊方法用於指數函數的陣列參考在平行編譯器最佳化之應用 
(英文) A New Designed and Optimized Data Alignment Method for Arrays 
References with Exponential Functions Applying in Parallel Compiler Optimizations 
出國人員
姓名 何善輝 博士 
服務機構
及職稱 
台北大學資訊中心         -教授 
台北大學資訊管理研究所 
銘傳大學資訊管理學系(所) - 兼任教授 
會議時間 98年 9月 13日至 98 年 9 月 15 日 會議地點 
QinHuangDao, China 
會議名稱 
(中文)2nd智能資訊國際研討會(ISII2009) 
(英文) The Second International Symposium on Intelligent Informatics (ISII2009) 
發表論文
題目 
(中文) ：1. 在使用 Adleman-Lipton 模式構建生物邏輯分子平行減法器和除法器; 2.
在使用 PSO 和 Bayesian 分類器對於 PKI 的安全性能該預測 
(英文) ：1. Constructing Bio-logical Molecular Parallel Subtractor and Divider Using 
the Adleman-Lipton Model; 2. The Prediction of PKI Security Performance Using PSO 
and Bayesian Classifier 
附件四 
 3
brute-force searching, and thus can be scaled-up to solve large and hard minimum vertex cover 
problems. 
 
 
Finally, both articles have been published in the ICIC Express Letters.  The ICIC Express 
Letters is cited by EI. They are: 
1) Michael Shan-Hui Ho, Kun-Yu Hung and Le-Pong Chin, Chaochang Chiu “Constructing 
Optimized Bioinformatics Parallel Subtractor and Divider with Basic Logic Operations in the 
Adleman-Lipton Model,” ICIC Express Letters, Vol. 3, No. 4(A), pp. 1013-1018. (EI) 
2) Chi-I Hsu, Chaochang Chiu, Michael Shan-Hui Ho “The Prediction of PKI Security Performance 
using PSO and Bayesian Classifier,” ICIC Express Letters, Vol. 3, No. 4(A), pp. 1031-1036. (EI)  
 
二、與會心得 
1. 何善輝博士感謝國科會提供機票部分金額補助, 將在我的學術路程中記上美麗的一筆. 
 
2. Dr. Michael (Shan-Hui) Ho has attended many SCI/EI related international known conferences and 
also presented many sounding papers in these conferences. The ISII 2009 international conference 
is very special to him. During his two sessions for his and his co-author presentations, he presented 
the construction of an optimal bioinformatics logic computing system with a set of optimal parallel 
bio-molecular subtractor and divider.  
 
3. Based upon DNA massive parallelism features and DNA special manipulations, many papers have 
employed these special advantages for NP problem solving. In this paper, we are using the truth 
table and basic logic operations to construct the bio-logic molecular parallel subtractor and divider 
in the Adleman-Liption model. It also confirms these bio-logic molecular parallel subtractor and 
molecular can solve many NP problems such as RSA public-key cryptosystem that will be 
published in the near future. Therefore, we have more evidence to prove the DNA computing will 
get efficient than the other related field.  
 
4. Dr. Ho also presented his country, Taiwan, in front of many famous international leading 
researchers and engineers. Not only he enjoyed sharing his abundant knowledge and discussing 
research with people, but also he liked to made friends in the conference. 
三、考察參觀活動(無是項活動者略) 
四、建議 
1. 我覺得出國參加國際研討會,不但能拓展學術研究的國際視野,更能激勵與國際知名學者的
交流. 
2. 我希望建議國科會能多補助國際研討會註冊費方面的支出,可以更能激勵參與國際知名研
討會,提高台灣知名度. 
無研發成果推廣資料 
國外 論文著作 期刊論文 3 1 100% 篇 
Based upon the 2009 
NSC research project 
of A New Designed and 
Optimized Data 
Alignment Method for 
Arrays References 
with Exponential 
Functions Applying in 
Parallel Compiler 
Optimizations (一種
新設計最佳化數據對齊
方法用於指數函數的陣
列參考在平行編譯器最
佳化之應用), several 
developed related
articles are accepted 
and to appear in the 
international known 
conferences and 
journals. They are:
(1)Michael 
(Shan-Hui) Ho 
“Communication-free 
data alignment for 
arrays with 
exponential 
references in 
parallelizing 
compilers for 
scalable parallel 
systems,＂ accepted 
and published in the 
Journal of 
Supercomputing, 
2009, (SCI). 
(2)Michael 
(Shan-Hui) Ho “A new 
designed and 
optimized data 
alignment method for 
arrays references 
with exponential 
functions applying in 
parallel compiler 
optimizations,＂ 
submitted in 
International 
Journal of Innovative
Computing, 
Information and 
Control, (SCI). 
 
Oth l t d
博士後研究員 0 0 100%  
專任助理 0 0 100%  
其他成果 
(無法以量化表達之
成果如辦理學術活
動、獲得獎項、重要
國際合作、研究成果
國際影響力及其他協
助產業技術發展之具
體效益事項等，請以
文字敘述填列。) 
1)最佳化計算模組在面臨不確定動態的設定時藉由一種新設計最佳化數據對齊
方法用於指數函數的陣支持最佳化計算決策 
2)藉由一種新設計最佳化數據對齊方法用於指數函數的陣列參考，對指數函數的
陣列參考問題使用最佳化計算能力來完成複雜數學運算提出明顯的證據 
3)本研究工作表明，一種新設計最佳化數據對齊方法用於指數函數的陣列參考是
一種未來新興技術之一 
4)主要成就之一是建立最佳化數據對齊方法用於指數函數的陣列參考整個理論
作為平行計算基礎 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100字為限） 
已發表 3篇，撰寫中 1篇 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500字為限） 
1)最佳化計算模組在面臨不確定動態的設定時藉由一種新設計最佳化數據對齊方法用於
指數函數的陣支持最佳化計算決策 
2)藉由一種新設計最佳化數據對齊方法用於指數函數的陣列參考，對指數函數的陣列參考
問題使用最佳化計算能力來完成複雜數學運算提出明顯的證據 
3)本研究工作表明，一種新設計最佳化數據對齊方法用於指數函數的陣列參考是一種未來
新興技術之一 
4)主要成就之一是建立最佳化數據對齊方法用於指數函數的陣列參考整個理論作為平行
計算基礎 
