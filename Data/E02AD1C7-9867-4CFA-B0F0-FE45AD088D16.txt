行政院國家科學委員會補助專題研究計畫成果報告
計畫名稱：具有轉換感知與線上動態電壓調整之即時系統排程法之研究
計畫編號：NSC 99－2221－ E－146－011－
執行期間：99 年 08 月 01 日至 100 年 07 月 31 日
主持人: 陳大仁 華夏技術學院資訊管理系
計畫參與人員：謝樹明、陳祐祥、謝衛民、劉佑玫、林秉毅、施淳仁
華夏技術學院資訊管理系
I、中文摘要
由於電腦系統大量的電源消耗除了會增加使
用成本，還會增加其運作時的溫度，進而提高系
統故障的機率與降低系統的可靠度，而攜帶型系
統還會因為電池電量的限制而縮短其運作時間。
因此，如何降低處理器的電源消耗已經成為當今
電腦系統發展的一個重要研究課題。本計畫對於
固定優先權工作的硬式即時系統，提出新的鬆弛
時間計算方式，並設計一套排程法降低週期性工
作的 CPU 功耗。鬆弛時間計算的方式採用獨特的
新概念，稱為 low-power fluid slack analysis
(lpFSA)，根據這個概念開發的排程法可以取得更
多鬆弛時間，並利用動態電壓調整 (dynamic
voltage scaling，DVS)技術，降低目前工作的執行
電壓。不同於一般鬆弛時間回收法，lpFSA 具以
下特性: 1.能與現有排程法(lpWDA，lpLDAT，…)
合作，進一步改善能源效率。2.與現有方法互相
獨立，只需小幅調整與設定即可讓排程運作。3.
時間複雜度與實際執行的額外負擔低。根據實驗
結果，新方法能比原始 lpWDA 與 lpLDAT 節省最
多 15%-21%的電源消耗。
關鍵詞: 動態電壓調整，鬆弛時間分析，電源效
率，即時系統排程。
II、Abstract
The power consumption of computer systems
can not only increase the cost but also the operating
temperature, which leads to the increased chance of
system failures and the decreased system reliability.
In addition, it will decrease the operation time for
the portable systems with batteries due to their
limited power. As a consequence, how to decrease
the power consumption of processors becomes an
important research topic in the modern computer
development. In the first part of this project, we
developed a scheduling algorithm to reduce the
energy consumption of hard real-time tasks with
fixed priorities according to rate-monotonic(RM)
policy. Sets of independent tasks running
periodically on a processor with dynamic voltage
scaling (DVS) are considered as well. The proposed
online approach can cooperate with many slack-time
analysis methods based on low-power work demand
analysis (lpWDA) without increasing the
computational complexity of DVS algorithms. The
proposed approach introduces a novel technique
called low-power fluid slack analysis (lpFSA) that
extends the analysis interval produced by its
cooperative methods (i.e. the lpWDA-based
methods) and computes the available slack in the
extended interval. The lpFSA regards the additional
slack as fluid and computes its length, such that it
can be moved to the current job. Therefore, the
proposed approach provides the cooperative
methods with additional slack. Experimental results
show that the proposed approach combined with
lpWDA-based algorithms achieves more energy
reductions than do the initial algorithms alone.
Keywords: DVS, slack time analysis, energy-
efficiency, real-time scheduling
3. Slack Time Analysis for Energy-Efficient Real-
Time Scheduling
Table 1:An example of real-time task set T .
Task Period(pi) WCET(wci) ACET(aci)
τ1 3 1.0 0.5
τ2 4 1.0 0.5
τ3 6 2.0 1.0
3.1 The concept of the fluid slack
Let rn,k be the border of τi, which is the first scheduled
job at time t where t ≥ rn,k−1. We compute the length
of additional slack in the interval [border , rn,k+1). For
instance, Figure 1 presents the WCET scheduling tasks
mentioned in Table 1. When job τ1,1 is ready at time t = 0,
the current border is at r3,2 = 6 and the target interval for
extracting additional slack time is [border , r3,3). In this
case, the period of τ2,2 spans astride the border , while the
ends of period of τ1,2 and τ3,1 are equal to the border . To
compute how much additional slack can be transferred like
liquid from interval [border , rn,k+1) to [rn,k−1, border ),
we takes the following stages.
Phase 1: In the interval [border , rn,k+1),
we compute the minimum available slack
that can be shifted to approach the right side
of the border .
Phase 2: Analyze the length of slack that can be
moved across the border .
As long as the length of the slack that can be switched be-
fore border is derived, it can be utilized by an lpWDA-based
scheme and improves energy efficiency of the schedules.
Algorithm 1: lpWDA (lpFSA with ***, and lpLDAT with NNN)
Compute available execution time and set the voltage/speed for τα
1. set uda := pα , eExchange := 0 and τasyn := Ø;
2. Compute Hα(t) :=
∑
τk∈TACTα (t) w
rem
k (t)+∑α−1
i=1
(
budα−εpi c − d t+εpi e
)
· wi;
3. NNNAi :=
∑i−1
j=0
(
ddcuripj e × acj
)
;
4. When a job τα is activated, set wremk (t) := wα;
5. When a job τα is completed or preempted,
UpdateLoadInfo( wremα (t), udα,Hα(t));
6. When a job τα is scheduled for execution
7. ***eExchange:=lpFSA(t, T ); //get additional slack
8. ***if rα = τasyn and `rightα < eExchange
then τα has the lowest priority in readyQ(t);
9. slackα(t) := ClacSlackTime(eExchange);
//get slack time
10. set the clock frequency as
fclk :=
wremα (t)
slackα(t)+wremα (t)
· fmax;
11. NNNfACL := max {Ai+acα−ex
cur
α (t)
dcuri −t |i = 1, . . . , n};
12. NNNfclk := max {fclk, fACL};
13. Set the voltage accordingly;
Algorithm 2: CalcSlackTime(additional slack eExchange)
Input:the active task τα , readyQ and current time t
Output:the slack time slackα(t) for τα
14. Identify the task τβ that has the earliest upcoming deadline
among tasks whose priorities are not higher than that of τa;
15. Lβ(t) := CalcLowerPriorityWork (τβ , t, eExchange);
16. loadβ(t) := wremβ (t) +Hβ(t) + Lβ(t);
17. slackα(t) := max (0, udβ − t− loadβ);
18. return (slackα(t));
3.2 Low-Power Work Demand Analysis (lpWDA)
In line 2 of Algorithm∗ 1, ε is an infinitesimal and
readyQ contains the currently activated tasks, and its subset,
ΓACTα (t), containing the active tasks is
ΓACTα (t) := {τκ|κ < α and τκ ∈ readyQ }. (2.1)
In the lpWDA, the tasks in readyQ are scheduled according
to RM priority. When a task is activated, its job τα is moved
to readyQ, and the job’s remaining WCET is set to wci, i.e.,
W remi (t) = wci. When τα is executed at time t, loadα(t) is
the amount of work required to be processed in [t, dα).
In Algorithms 1 and 2, lpWDA performs in the following
steps. First, the system is initialized by setting the initial up-
coming deadlines (ud) and remaining worst-case execution
(wrem) of each task. When τα is active at time t, notation
udk of each task τk is defined as follows[?]:
udk = d t+εpk e × pk. (2.2)
The jobs which are active during [t, max{udk(t)}] will be ex-
amined for slack estimation. Hα(t) denotes the estimation of
higher-priority work that must be executed before udα (lines
1-2). Whenever a job τα is completed or preempted at time
t, the remaining work wremα (t), upcoming deadline udα and
high-priority work Hα(t) are updated in line 5. In lines 6-9,
when a job τα is scheduled for execution at time t, Algorithm
2 computes the available slack for τα according to Hβ(t) and
Lβ(t) (see lines 15 and 16), where udβ is the earliest up-
coming deadline with respect to τα. Notably, function Lβ(t)
∗Procedures UpdateLoadInfo() and CalcLowerPriorityWork () which
provide detailed slack computation[?, ?, ?] are abridge in the report.
2
3.3 Low-Power Fluid Slack Analysis (lpFSA)
Before presenting the slack computation method, the fol-
lowing notations are introduced.
T b = T − {τn}
where b denotes the number of tasks in T b, b < n, and τn is
the task with the longest period in T . In an extended analy-
sis interval [border , rn,k+1), the number of synchronization
points of tasks in T b is computed as follows
Syn(T b, k) = b rn,k+1
LCM(T b)
c − b rn,k
LCM(T b)
c (3.1)
where LCM(T b) is the least common multiplier(LCM) of
task periods in T b. The tasks are defined as synchronous
at time t if their jobs are released at time t. Therefore, the
first synchronous point of T b within the interval [border ,
rn,k+1) is derived as
t(T b, k) = d rn,k+1
LCM(T b)
e × LCM(T b). (3.2)
According to Eq. (3.1), we define two situations in the inter-
val [border , rn,k+1):
Slack Transmission Obstacle (STO):
Syn(T b, k) > 0, b = n− 1.
Slack Transmission Bottleneck (STB):
Syn(T b, k) = 0, b = n− 1.
Figure 3. An example of STO
When an STO appears in the additional analysis interval,
slack time is likely to be blocked or shrunken by the STO.
For example, the tasks except τn are synchronized at time t
(Fig. 3). If a slack exists after time t, it cannot move back-
ward to the left side of t. In this case, slack can still be shifted
by exchanging it with the work of τn; this case is discussed
later in Phase 2. When Syn(T b, k) = 0 and b = n − 1, the
Figure 4. An example of STB
amount of fluid slack approaching the current border can be
estimated by applying Phase 1. For example, τi does not syn-
chronize with other tasks in T b (Fig. 4). Therefore, one can
compute the value of Syn(T x = T b−τi, k) for each τi, where
x = n− 2 and b = n− 1. Suppose Syn(T b− τi, k) > 0, the
earliest synchronization point of tasks in T b − τi is derived
using Eq. (3.2). In the interval [border , rn,k+1), we define
the earliest slack transmission bottleneck incurred by task set
T b − τi as follows:
STB(T b − τi, k) = t(T b − τi, k), i 6= n and b = n− 2. (3.3)
The release time of τi which spans astride Syn(T b− τi, k) is
rik = bSTB(T
b−τi,k)
pi
c × pi , τi 6∈ T b. (3.4)
The difference between Eqs. (3.3) and (3.4) is defined as
diff ik = max{STB(T b − τi, k)− rik, 0}. (3.5)
In Figure 4, suppose an initial slack is in the period of at least
one task in T b, the amount of slack that can be shifted across
STB(T b − τi, k) depends on the length of work of τi within
the interval [rik, rik+diff ik). However, the high-priority tasks
in T b − τi may interfere with the length of work of τi in this
interval. To estimate precisely the amount of work of τi in the
interval [border , rn,k+1), the high-priority work is classified
into two parts. The first part of work is provided by the tasks
with a period shorter than or equal to diff ik. Thus,
Hshorti (`) =
∑
τk∈T b−τib `pk c × wck , ` > pi−1 (3.6)
where ` denotes the length of diff ik . For example, in Figure
4, the value of diff ik is ` and pi−2 is shorter than `. The
worst-case execution cycles of job τi−2 must be included in
Hshorti (`), because τi−2 does not go astride the border and
has higher priority than τi. The second part is additional work
required by tasks with periods not less than diff ik, that is,
4
13. Choose a job τδ ∈ T border with `rightδ ≥ eExchangemin
and wcδ ≥ eExchangemin ;
14. When τδ ∈ readyQ, change the priority of job τδ
lower than that of job τn in readyQ;
15. Return eExchangemin ;
Table 2:Scheduling parameters in Example 2.
time udy eExchange slack voltage wc ac
0 6 1 1 0.5 2 1
1 6 1 1 0.5 2 1
2 6 1 1 0.67 3 1.5
3 6 1 1.5 0.4 2.5 1.25
4 6 1 0.5 0.4 2.5 1.25
4.25 6 1 1 0.67 1 0.5
4.75 12 0 1.25 0.44 2.25 1.125
Example 2. Consider the example of WCET schedule shown
in Figure 2(a). Before assigning τ1,1 at time t=0, we can
derive border=6 and T border = {τ2,2} according the task
periods in T . Procedure lpFSA can estimate the length of
fluid slack from interval [6, 12) as follows. When task set
T 2 = {τ1, τ2}, Procedure lpFSA computes Syn(T 2, 1)=0.
Therefore, in Phase 1, the bottleneck caused by τ1 and τ2 is
STB(T 2 − τ2, 1) = 9 and STB(T 2 − τ1, 1) = 8 , respec-
tively. Line 6 derives `=2 and τasyn = τ1. Equations (3.7)-
(3.9), derive eExchangeasyn = 1. In line 10, the value of eExchangen
, eborder , eslack and accuborder is 1, 1, 1 and 2, respec-
tively. The value of eExchangemin is 1 by line 12. Therefore, Pro-
cedure lpFSA returns eExchangemin =1 to the lpWDA algorithm
and passes additional slack eExchange to CalcLowerPriority-
Work() in the Algorithm 2. Notably, the tasks using lpFSA
still execute under RM priority policy except one of the jobs
whose periods span astride the border . At time t=0, when
jobs τ1,1, τ2,1 and τ3,1 enter readyQ at time t=0, τ1,1 has the
highest priority and utilizes additional slack eExchangemin esti-
mated by lpFSA. Therefore, job τ1,1 obtains one unit of time
of slack and changes its voltage level from 1 to 0.5. On the
contrary, if primitive lpWDA performs τ1,1 at time t=0, τ1,1
cannot obtain any slack. When lpWDA executes iteratively,
the value of eExchange does not change until τ1,1 is com-
pleted. Figure 2(c) presents the scheduling result obtained
using Procedure lpFSA. After completing τ1,1, eExchangemin
unit of slack has been run out, primitive lpWDA continuously
performs voltage scaling on the subsequent jobs of τ1,1. In
the case of τ2,1, it begins after τ1,1 (t=1) and obtains one unit
of slack time from primitive lpWDA. Therefore, its WCET
under voltage v=0.5 is changed to wc2,1 = 2 and actual ex-
ecution time is ac2,1 = 1. At time t=4, job τ2,2 is released
and moved to readyQ. Its priority is changed to and lower
than the remaining execution time of τ3,1 by executing line
14 in Procedure lpFSA. Therefore, job τ2,2 begins its work
after completing the remaining work of τ3,1. Notably, lpFSA
only changes job’s priority in T border and does not affect the
feasibility of lpWDA schedule. Table 2 shows the values of
scheduling parameters.
3.4. Properties
Let WRi denote the worst-case response time(WCRT) of
τi, without loss of generality, the higher-priority tasks have
simultaneous release time with a job of τi and the LCM of the
tasks period in T exists. This section uses WCRT analysis to
prove the schedulability of lpFSA†.
Lemma 1. When a task set T contains only one task τγ , the
available slack produced by lpWDA for τγ , is
slackγ(t) = dγ − t− wcremγ (t). (4.1)
Lemma 2. When a task set T contains n tasks where n ≥ 2,
the amount of work required to be processed in [t, dα] (α ≤
n) for the highest priority job τα is
loadα(t) = wremn (t) +Hn(t)− (udn − dα). (4.2)
Lemma 3. The length of slack that is provided by lpWDA for
the highest priority task in readyQ is at most
slackα(t) = udn(t)− t− wremn (t)−Hn(t). (4.3)
Proof. Assuming τα has the highest priority in readyQ,
this proof can be derived directly from Eqs.(2.3), (4.1) and
Eq.(4.2). 
The following theorem proves the schedulability of lpWDA
by using worst-case response time analysis. Its proof appears
in[?, ?].
Theorem 1. Given a set T of tasks is feasible in RM sched-
ule, the maximum response time of task τγ under lpWDA is
less than or equal to its deadline.
Corollary 1. For some task τi ∈ T border, i < γ and
dγ = border, and pγ is not the multiple of these pis, the
difference between WRnewγ and dγ is formulated as
dγ −WRnewγ =
∑
k<γ
(bdγ − ε
pk
c+ 1) · wck −
∑
k<γ
bpγ
pk
c · wck
=
∑
τi∈T border
wci. (4.4)
Notably, WRnewγ presents the length of WCRT proposed by
lpWDA, and therefore the slack between WRnewγ and dγ
could be utilized by lpFSA. Consider the example shown
†The detailed proof of some lemmas are presented in[?] and abridged
in the report.
6
misses are ignored, and all experimental results are normal-
ized against the same processor running at maximum speed
without a DVS technique (non-DVS for short). More assump-
tions and experiments‡ are presented in[?, ?].
Figures 7, 8, 9 and 10 list the energy consumption of each
Number of Tasks
N
or
m
al
iz
ed
en
er
gy
co
ns
um
pt
io
n
2 4
0.60
0.10
1.00
0.50
0.70
0.80
0.90
0.40
0.30
0.20
6 8 10 12 14 16 18
(bc/wc 0.9], U 0.7] )
bound ccRM lpWDA lpWDA-lpFSA lpLDAT lpLDAT-lpFSA
Figure 7. Energy consumption under different totaltask
Utilization
N
or
m
al
iz
ed
en
er
gy
co
ns
um
pt
io
n
0.1
0.60
0.10
1.00
0.50
0.70
0.80
0.90
0.40
0.30
0.20
0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9
bound ccRM lpWDA lpWDA-lpFSA lpLDAT lpLDAT-lpFSA
(bc/wc 0.9], totaltask 18] )
Figure 8. Energy consumption under different U
method and the results for a clairvoyant algorithm, named
bound, which knows the actual execution cycle of each task
beforehand and adopts the optimal speed accordingly. En-
ergy consumption includes both execution duration of lpFSA
and its host algorithms (i.e., the lpWDA and lpLDA) and the
context-switch time required to switch to and from other real-
time tasks. Since the range of task periods has been short-
ened to between [1, 100]ms, the difference between task pe-
riods and context-switch times or transition times are smaller
than those assumed in [?, ?, ?, ?]. As shown in Figure 7,
the lpWDA-lpFSA and lpLDAT-lpFSA method reduces the
energy consumption by at least 11% and 4% over that of lp-
WDA and lpLDAT alone, respectively. The value ofU of each
task set is assigned randomly at 10-70% by uniform probabil-
ity distribution function. The value of U and the bc/wc ratio
‡Many real-world overheads and experiments including program ex-
ecution time/energy , voltage transition time/energy and context-switch
time/energy are presented in [?, ?].
bc/wc
N
or
m
al
iz
ed
en
er
gy
co
ns
um
pt
io
n
0.60
0.10
1.00
0.50
0.70
0.80
0.90
0.40
0.30
0.20
bound ccRM lpWDA lpWDA-lpFSA lpLDAT lpLDAT-lpFSA
0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9
(totaltask ], U 0.7])
Figure 9. Energy consumption under different bc/wc ratio
N
or
m
al
iz
ed
en
er
gy
co
ns
um
pt
io
n
2
0.60
0.10
1.00
0.50
0.70
0.80
0.90
0.40
0.30
0.20
(totaltask ], bc/wc 0.9], U 0.7] )
bound ccRM lpWDA lpWDA-lpFSA lpLDAT lpLDAT-lpFSA
4 6 8 10 12 14 16 18
n
analysis
p p
ninterval ianalyticallength of
M
n
bound)(
Figure 10. Energy consumption under different values of
Manalysispn
for each task set is to 0.8 and 0.5, respectively. With a large U,
lpFSA outperforms its host algorithms in a small totaltask,
consuming up to 26% and 23% less energy than lpWDA and
lpLDAT, respectively.
Experimental results in Figure 8 indicate that lpWDA-
lpFSA and lpLDAT-lpFSA saved up to 21% and 4% more
energy than their host algorithms. In the experiment, the
totaltask and the bc/wc ratio of each task set is 10 and 0.5,
respectively. Increasing the value of U in Figure 8 increases
the energy consumption of lpFSA and its host algorithms.
With a small U , the gain from lpFSA is modest, with 1% and
4% saving compared to that of the initial lpLDAT and lpWDA
algorithms, respectively. Additionally, with these methods, U
is an important factor when computing the slack for deciding
processor speeds. With a moderate U value, lpWDA-lpFSA
and lpLDAT-lpFSA consumes at most 14% and 3% less en-
ergy than that of the initial lpWDA and lpLDAT algorithm,
respectively. Therefore, lpFSA utilizes not only the advan-
tages of its host algorithms, but also slack belonging to the
value of 1− U as possible and shifts the slack to current job.
8
國科會補助專題研究計畫成果報告自評表
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估
■ 達成目標
□ 未達成目標（請說明，以 100 字為限）
□ 實驗失敗
□ 因故實驗中斷
□ 其他原因
說明：
2. 研究成果在學術期刊發表或申請專利等情形：
論文：■已發表 ■未發表之文稿 ■撰寫中 □無
專利：□已獲得 □申請中 □無
技轉：□已技轉 □洽談中 □無
其他：（以 100 字為限）
國科會補助計畫衍生研發成果推廣資料表
日期：100 年 10 月 20 日
國科會補助計畫
計畫名稱：鬆弛時間分析法應用於嵌入式系統之研究
計畫主持人：陳大仁
計畫編號：NSC 99－2221－ E－146－011－
領域：資訊工程
（中文）可流動鬆弛時間分析用於動態電壓調整方法
研發成果名稱 （英文）Low-power Fluid Slack Analysis for Dynamic Voltage
Scaling Methods
成果歸屬機構
華夏技術學院資訊管
理系
發明人
(創作人)
陳大仁
（中文）
可流動鬆弛時間分析(Low-power Fluid Slack Analysis)的概念是預
先分析兩倍最長工作週期內所有鬆弛時間(slack time)的可移動
情形，讓系統能夠快速找出有多少鬆弛時間可以延長目前即將執
行工作的執行時間，同時降低它的執行電壓與速度。由於現有多
數的靜態優先權DVS排程法在降低工作執行速度上較為保守，此觀
念不僅減少浪費鬆弛時間，有效降低系統的電源消耗外，可流動
鬆弛時間分析可以應用在許多現有的DVS排程法之上，只需微幅修
改這些方法即可有效運作。
技術說明
（英文）
Low-power fluid slack analysis is to pre-analysis of the length of
“movable”slack time within a period of two times the length of the
longest task period so that the slack can be used when a new task is
dispatched from the ready queue. It can decrease the execution speed
and voltage of the current tasks and guarantee their timing constraints.
Additionally, low-power fluid slack analysis can cooperate with many
static-priority DVS scheduling with minor revision and does not
increase their computational complexities.
產業別
嵌入式作業系統軟體開發、系統晶片之省電即時核心設計、動態
電壓調整之即時排程設計。
技術/產品應用範圍
此觀念可以實作到目前的許多即時排程或是作業系統中所使用的
動態電壓調整法，將會有效協助開發省電的系統晶片之各式相關
產品。
技術移轉可行性及預期
效益
在不需修改現行即時排程法的情況下，此技術可以模組化的形態
進一步加強系統動態電壓調整的能力、縮短系統升級與測試的時
程。應用在嵌入式系統相關產業中，本計畫的成果有助於延長產
品運作時間或減少電源消耗，使系統提供更多樣的服務。
註：本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。
其間發表個人之論文“A practical slack-time analysis method for DVS real-time scheduling”，
與會國外學者也詢問筆者幾個問題，並且提供一些看法，也讓筆者獲益良多。從各場次論文報
告中，筆者觀察到即時系統與嵌入式系統未來研究的重點將傾向於(1)無線感測網路(2)多核心
處理器排程(3)動態電源調整的技術。
本次與會除了學術專業獲得充電外，並且認識許多以往只能在論文中看見列名的國際同仁，筆
者便趁此機會作一些“即時的”學術交流。另外，筆者還對法國的久遠歷史與宗教文化建築印
象深刻。本次會議所在地土魯斯，都市人口約80多萬人，是法國甚至全歐洲的航空與太空探索
重鎮，著名的空中巴士(AirBus)在此地擁有大型組裝工廠，負責飛機最後的組裝階段。此地還
有一個專門發射人造衛星的太空基地，稱為太空城(Cite de l’espace) 。另外它也是法國境
內知名的大學城，八十多萬人口中有十一萬名學生，歷史與人文氣息讓土魯斯理性中流露感性。
四、建議
(1)在參與這次會議之前，得知發表的論文不算很多，因此作者們採循序方式進行報告，故可從
頭到尾聆聽大部份的論文，類型較不同的論文，也可以聽聽看，應該會有觸類旁通的功效，也
可以得到參與會議的最大收穫。
(2)筆者在聆聽論文時，發覺有些母語非英語的發表者，報告的口音有點重，這可能是一些非英
語系國家的學者之通病，建議國科會能多獎勵國內學者的國外研究及補助，促使大家能有機會
多多訓練英語發表。
(3)此次會議，與各國學者討論，得知各國大學訓練資訊人員的人數都大幅增加，以因應未來的
趨勢，而國內在資訊領域的人才也是供不應求，而通訊網路領域的人才更是欠缺，為了發展知
識經濟，人才培育是非常重要的課題，值得有關單位深思，並及早規劃。最後，筆者感謝國科
會補助參與此次會議，有機會與世界各國的學者交換彼此的經驗及研究心得，對本人未來的研
究助益匪淺。
五、攜回資料名稱及內容
研討會論文紙本與光碟片。
六、其他
出席與報告證明(下一頁)。
Da-Ren Chen
寄件者: Ki-seo Park [pks@kips.or.kr]
寄件日期: 2011年9月2日星期五 下午 12:51
收件者: danny@cc.hwh.edu.tw
主旨: [KIPS] JIPS - Review Result[11E03-030]
郵件標幟: 待處理
標幟狀態: 紅色
類別: 紅色類別
Page 1 of 1
2011/10/19
Journal of Information Processing Systems 
 Paper number : 11E03-030 
Paper Title : Efficient Algorithms for Pinwheel Tasks to Discrete Voltage Schedules 
Author(s) : Da-Ren Chen  
  
The first round review for the paper above has been finished, and your paper has
been accepted for the final edition. Congratulations!  
The deadline for the camera-ready paper(MS word version only) is September 23.  
You will need to revise your paper according to the Journal of Information
Processing System format.  
When you submit the final paper, please attach KIPS copyright transfer form. We
cannot guarantee to include your paper in final edition, in case of late submission
of the final camera-ready paper.  
The reviews for your paper are attached in this email. We hope that the review
feedback is helpful to you.  
 
I appreciate your contribution to the journal. 
  
---------------------------------------------------
Doo-Soon Park
Editor-in-Chief of JIPS
Professor at Soonchunhyang University
---------------------------------------------------
Session 4. Verification and timing analysis (chair: Serge Midonnet)
Session 5. Dynamic voltage and frequency scheduling (Sathish
Gopalakrishnan)
Session 6. Fault tolerance (chair: Rob Davis)
Session 7. Multiprocessor scheduling 1 (chair: Laurent George)
Session 8. Multiprocessor scheduling 2 (chair: Pascal Richard)
其間發表個人之論文， “A practical slack-time analysis method for DVS
real-time scheduling”，與會國外學者也詢問筆者幾個問題，並且提供一些看
法，也讓筆者獲益良多。從各場次論文報告中，筆者觀察到即時系統與嵌入
式系統未來研究的重點將傾向於(1)無線感測網路(2)多核心處理器排程(3)
動態電源調整的技術。
本次與會除了學術專業獲得充電外，並且認識許多以往只能在論文中看見列
名的國際同仁，筆者便趁此機會作一些“即時的”學術交流。另外，筆者還
對法國的久遠歷史與宗教文化建築印象深刻。本次會議所在地土魯斯，都市
人口約80多萬人，是法國甚至全歐洲的航空與太空探索重鎮，著名的空中巴
士(AirBus)在此地擁有大型組裝工廠，負責飛機最後的組裝階段。此地還有
一個專門發射人造衛星的太空基地，稱為太空城(Cite de l’espace) 。另
外它也是法國境內知名的大學城，八十多萬人口中有十一萬名學生，歷史與
人文氣息讓土魯斯理性中流露感性。
三、建議
(1)這次參與會議之前，得知發表的論文不算很多，因此作者們採循序方式進
行報告，故可從頭到尾聆聽大部份的論文，類型較不同的論文，也可以聽聽
看，應該會有觸類旁通的功效，也可以得到參與會議的最大收穫。
(2)筆者在聆聽論文時，發覺有些母語非英語的發表者，報告的口音有點重，
這可能是一些非英語系國家的學者之通病，建議國科會能多獎勵國內學者的
國外研究及補助，促使大家能有機會多多訓練英語發表。
(3)此次會議，與各國學者討論，得知各國大學訓練資訊人員的人數都大幅增
加，以因應未來的趨勢，而國內在資訊領域的人才也是供不應求，而通訊網
路領域的人才更是欠缺，為了發展知識經濟，人才培育是非常重要的課題，
值得有關單位深思，並及早規劃。最後，筆者感謝國科會補助參與此次會議，
有機會與世界各國的學者交換彼此的經驗及研究心得，對本人未來的研究助
益匪淺。
四、其它
攜回資料名稱及內容：研討會論文全集與光碟片。
出席報告證明 最末頁
國科會補助計畫衍生研發成果推廣資料表
日期:2011/09/20
國科會補助計畫
計畫名稱: 鬆弛時間分析法應用於嵌入式即時系統之研究
計畫主持人: 陳大仁
計畫編號: 99-2221-E-146-011- 學門領域: 計算機理論與演算法
無研發成果推廣資料
博士生 0 0 100%  
博士後研究員 0 0 100%  
（外國籍） 
專任助理 0 0 100%  
其他成果 
(無法以量化表達之
成果如辦理學術活
動、獲得獎項、重要
國際合作、研究成果
國際影響力及其他
協助產業技術發展
之 具 體 效 益 事 項
等，請以文字敘述填
列。) 
後續的研究成果也分別被國際期刊 Journal of Information Processing Systems
所接受，以及另一部分已投稿至 Information Sciences(SCI) 並已進入第二階段
審查。 
在技術創新上，藉由電腦模擬與實際驗證的結果，有助於降低嵌入式即時系統的
實際功耗、延長系統運作時間，使系統提供更多樣的服務。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
