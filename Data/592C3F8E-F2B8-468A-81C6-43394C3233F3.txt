  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
計畫期程： 100 年 1 月 1 日 至 100 年 12 月 31 日 
  
新型區塊加密算法研究與開發 
期末報告書 
 3 
（2）RoundGen.c ................................................................................ 40 
（3）makeCTGen.c ............................................................................. 42 
（4）KeySBoxGen.c ........................................................................... 43 
（5）SBoxGen.c .................................................................................. 44 
（6）LinearTGen.c .............................................................................. 45 
（7）LFSRGen.c ................................................................................. 46 
（8）KeyMixGen.c .............................................................................. 47 
二、 使用方式 (compile.bat) .................................................................... 48 
三、 標頭檔產生介面 ............................................................................... 49 
四、 效率評估 ........................................................................................... 50 
柒、 結論 .............................................................................. 53 
捌、 現行其他著名加密算法介紹 ...................................... 54 
 
 5 
貳、 Serpent 加密算法背景 
 
一、 歷史背景 
Serpent 是由 Ross Anderson, Eli Biham 及 Lars Knudsen 三位學者提出，
為 AES 五個候選者之一。AES 全名為 Advanced Encryption Standard，是
美國國家技術標準局(National Institute of Standards and Technology, NIST)
於 1997 年公開徵求新一代的加密標準。由於硬體的快速發展，導致運算
處理速度更為快速，對於密鑰大小為 56 位元的 DES 而言，利用暴力攻
擊法所需的時間已大幅縮減，其安全性也略顯不足。雖然使用 3-DES 可
以確保其安全性，但其效率 (加解密的速度) 卻不適用。因此 AES 甄選
之目的，即在改善此缺點，以符合現今需求。NIST 當初的要求為 
- 加密區塊的明文長度為 128 位元 
- 可接受的密鑰長度為 128 位元、192 位元和 256 位元 
- 安全度要和 3-DES 相近(必須通過現有的密碼攻擊法) 
- 加解密的速度要比 3-DES 好 
- 可以同時由硬體及軟體來實作 
- 沒有專利的限制或必須符合 ANSI 的專利政策，可以自由使用 
 
 7 
（1） Bitslice 實作 
Serpent 演算法是基於 bitslice 實作而設計的。先了解 bitslice
方法，有助於體會 Serpent 演算法的內涵。bitslice 實作的主要概念
是利用硬體的邏輯閘 (logical gate) 或軟體的位元運算 (bitwise 
operation) 加快程式速度，位元運算包含以下五種： 
位元運算 效果 C 語言
and a,b ܽ ؔ ܽ ڄ ܾ a &= b
or a,b ܽ ؔ ܽ ൅ ܾ a |= b 
xor a,b ܽ ؔ ܽ۩ܾ a ^= b 
not a ܽ ؔ ܽ۩1 a = ~a 
mov a,b ܽ ؔ ܾ a = b 
 
Serpent的 bitslice 加密算法由 32回合運算 ܴ଴, … , ܴଷଵ 組成，
並利用從密鑰產生的 33 把 128 位元子密鑰 (subkey) ܭ଴,… , ܭଷଶ，
將 128 位元的明文  ܲ  (plaintext) 加密成 128 位元的密文  ܥ 
(ciphertext)。除最後一回合外，每回合依序包含密鑰混合 (key 
mixing)、替代盒 (S-box) 運算、線性變換 (linear transformation)；
最後一回合則將線性變換以另一個密鑰混合替代，即最後一回合
包含兩次密鑰混合。以符號表示如下： 
ܤ଴ ൌ ܲ   
ܤ௜ାଵ ൌ ܴ௜ሺܤ௜ሻ   
 9 
以二進位表示 ܵଶ 如下： 
 
 
 
 
假設有 5 個暫存器 (register)  ݎ଴, … , ݎସ，一開始將 ݔ଴, … , ݔଷ分別
存入 ݎ଴, … , ݎଷ： 
     
搜尋決定 ݎ଴, … , ݎସ 經過一系列的哪些位元運算後，其中四個
暫存器可得到 ܵଶ,଴, … , ܵଶ,ଷ。將這些位元運算過程記錄如下： 
 
 11 
其中 ൏൏൏ 表示向左旋轉 (rotation)，൏൏ 表示向左平移 
(shift)，符號後的數字代表位移量。 
 
（2） 加密 
加密演算法分為三步驟：初始排列 ܫܲ (initial permutation)、
32 回合運算、最終排列 ܨܲ (final permutation)。其中回合運算，
除最後一回合外，每回合依序包含密鑰混合、替代盒運算、線性
變換；最後一回合則將線性變換以另一個密鑰混合替代。 
以符號表示如下： 
ܤ෠଴ ൌ ܫܲሺܲሻ   
ܤ෠௜ାଵ ൌ ܴ௜ሺܤ෠௜ሻ   
ܥ ൌ ܨܲሺܤ෠ଷଶሻ   
其中 
ܴ௜ሺܺሻ ൌ ܮሺ መܵ௜ሺܺ ْ ܭ෡௜ሻሻ     ݅ ൌ 0, … ,30   
ܴଷଵሺܺሻ ൌ መܵଷଵሺܺ ْ ܭ෡ଷଵሻ ْ ܭ෡ଷଶ   
注意加密演算法的 ܤ෠௜ ൌ ܫܲሺܤ௜ሻ, ܭ෡௜ ൌ ܫܲሺܭ௜ሻ。 
 
加密演算法較 bitslice 實作演算法多了初始排列與最終排列
兩步驟。bitslice 實作替代盒運算時，將 128 位元 ܤ௜۩ܭ௜ 看成 4
組 32 位元，分別存入 ݎ଴, … , ݎଷ 四個暫存器，即位元 0 ~ 31 存入 
 13 
Serpent 有 8 個 4 ൈ 4 的替代盒 ܵ଴, … , ܵ଻，替代盒運算 መܵ௜  將
128 位元 ܤ෠௜ ْ ܭ෡௜ 分成 32 組 4 位元，使用 ௜ܵ mod ଼ 運算。  
 
線性變換除了 bitslice 實作中的表示法之外，也可以看成是將
128 位元 መܵ௜ሺܤ෠௜ ْ ܭ෡௜ሻ 的某些位元做 XOR 運算，作為 ܤ෠௜ାଵ 的某個
位元，如下 [1]： 
 
以第二個大括號為例，意思是  ܤ෠௜ାଵ 的位元 1由  መܵ௜ሺܤ෠௜ ْ ܭ෡௜ሻ
的位元 72、114、125做 XOR 運算得到。 
 15 
- 不可約(irreducible)：週期為最小的ܰ，使得 connection 
polynomial 是1 ൅ ݔே的因式，注意ܰ整除2௅ െ 1 
 
- primitive：使connection polynomial週期恰為最大值2௅ െ 1。 
 
要求做為公式基礎的多項式x଼ ൅ x଻ ൅ xହ ൅ xଷ ൅ 1是 primitive 
polynomial 應該也是希望週期最大，ω୧不容易重複。 
 
使用替代盒 ܵ଴, … , ܵ଻ 以及前置密鑰 ߱଴,… ,߱ଵଷଵ，利用以下
規則計算 
ሼ݇଴, ݇ଵ, ݇ଶ, ݇ଷሽ ൌ ܵଷሺ߱଴, ߱ଵ, ߱ଶ, ߱ଷሻ  
ሼ݇ସ, ݇ହ, ݇଺, ݇଻ሽ ൌ ܵଶሺ߱ସ,߱ହ, ߱଺, ߱଻ሻ  
ሼ଼݇, ݇ଽ, ݇ଵ଴, ݇ଵଵሽ ൌ ଵܵሺ଼߱, ߱ଽ, ߱ଵ଴, ߱ଵଵሻ  
ሼ݇ଵଶ, ݇ଵଷ, ݇ଵସ, ݇ଵହሽ ൌ ܵ଴ሺ߱ଵଶ, ߱ଵଷ, ߱ଵସ, ߱ଵହሻ  
ሼ݇ଵ଺, ݇ଵ଻, ݇ଵ଼, ݇ଵଽሽ ൌ ܵ଻ሺ߱ଵ଺, ߱ଵ଻, ߱ଵ଼, ߱ଵଽሻ  
ڭ  
ሼ݇ଵଶସ, ݇ଵଶହ, ݇ଵଶ଺, ݇ଵଶ଻ሽ ൌ ܵସሺ߱ଵଶସ, ߱ଵଶହ, ߱ଵଶ଺, ߱ଵଶ଻ሻ  
ሼ݇ଵଶ଼, ݇ଵଶଽ, ݇ଵଷ଴, ݇ଵଷଵሽ ൌ ܵଷሺ߱ଵଶ଼, ߱ଵଶଽ, ߱ଵଷ଴, ߱ଵଷଵሻ  
 
ܭ௜ ൌ ሼ݇ସ௜, ݇ସ௜ାଵ, ݇ସ௜ାଶ, ݇ସ௜ାଷሽ ൌ ܵሺଷି௜ሻ௠௢ௗ଼ሺ߱ସ௜, ߱ସ௜ାଵ, ߱ସ௜ାଶ, ߱ସ௜ାଷሻ, 
݅ ൌ 0,… ,32，則子密鑰 ܭ෡௜ ൌ ܫܲሺܭ௜ሻ。 
 
 17 
[4] 陳炳彰、孫宏民，“Serpent 之介紹與分析＂國立成功大學資訊工程
系(所)。 
[5] D. A. Osvik, “Speeding up Serpent” 
 19 
- 布林向量函數的輸入資料相差一個位元將導致輸出結果相差超過
一個位元；達到雪崩效應。 
- 布林向量函數的非線性度為 4 ~ 8；可抵擋線性攻擊。 
- 布林向量函數的輸入位元 ݔ௜ 與輸出位元 ݕ௝，其線性關係 ݔ௜ ൌ ݕ௝
成立的次數為 6 ~ 10。 
- 布林函數輸出位元的代數次數為 3；可抵擋代數攻擊。 
 
對稱群 (symmetric group) ଵܵ଺的大小 (order) 為16! ൐ 2ସସ。從中選取
256 個密碼特性最佳替代盒 (符合五個條件)，做為 Serpent 變異之候選。
256 取 8 之組合數為 256! ሺ248! · 8!ሻ⁄ ൌ 409663695276000 ൐ 2ସ଼。 
 
綜合上述，以此法建構的替代盒，變化量為 8! ൈ 256! ሺ248! · 8!ሻ⁄ ൎ
2଺ସ。 
 
二、 線性變換 
由 Serpent 的演算法可知，將 128 位元的區塊分為四個 ௜ܺ，每個 ௜ܺ 
為 32 位元。因此可以得到 
- 四個 ௜ܺ 的順序可重新排列，共有 4! = 24 種排列。 
 21 
三、 密鑰排程 
Serpent 演算法利用 
߱௜ ൌ ሺ߱௜ି଼ ْ ߱௜ିହ ْ ߱௜ିଷ ْ ߱௜ିଵ ْ ߶ْ ݅ሻ ൏൏൏ 11 
計算前置密鑰 ߱଴,… , ߱ଵଷଵ，其中߶是黃金比率ሺ√5 ൅ 1ሻ/2的小數部分，
且做為基礎的多項式ݔ଼ ൅ ݔ଻ ൅ ݔହ ൅ ݔଷ ൅ 1是 primitive polynomial。更動
的地方有 
 
- 旋轉量 11： 
更改為 7, 13, 17, 19, 23 等質數，此處 2, 3, 5, 29 因為旋轉量太小，旋
轉後與原先差別不大，可能不如上列其他質數好。考慮左旋轉和右
旋轉是等效的，得到 7, 25, 13, 19, 17, 15, 23, 9 等 8 個旋轉量。 
 
- 黃金比率߶： 
߶ 是 代 數 數 (algebraic number) ， 在 此 更 換 為 ߨ, ݁ 等 超 越 數
(transcendental number) 的某一段小數部分。 
 
- 做為基礎的多項式： 
八次的 primitive polynomial 共有 16 個，如下表。 
  
 23 
肆、 等效替代盒搜尋 
 
一、 程式碼說明 
Serpent 原設計者設立了五個條件以選出替代盒。將替代盒看成一個
布林向量函數，由四個布林函數組成，五個條件可解釋為： 
- 布林向量函數的一般差分均勻度不大於 4；可抵擋差分攻擊。 
- 布林向量函數的輸入資料相差一個位元將導致輸出結果相差超過
一個位元；達到雪崩效應。 
- 布林函數的非線性度為 4~8；可抵擋線性攻擊。 
- 布林向量函數的輸入位元 ݔ௜ 與輸出位元 ݕ௝，其線性關係 ݔ௜ ൌ ݕ௝
成立次數為 6~10。 
- 布林函數輸出位元的代數次數要為 3；可抵擋代數攻擊。 
 
本程式先篩選出符合第三、四、五個條件的布林函數，從中選出四
個排列成一布林向量函數，檢驗是否符合第一、二個條件；為加強替代
盒的安全性，多設立了一個條件：四個布林函數中，任意二或三個布林
函數線性組合而成的布林函數，其代數次數大於或等於 2。 
 
 25 
編號 布林函數(真值表) 
8 1111111000000001 
9 1111110110000000 
10 1111110101000000 
ڭ ڭ 
 
 
 
AD 函數的輸入變數是以真值表表示的布林函數，輸出其代數標準式
及代數次數。程式裡將真值表轉換成代數標準式 (algebraic normal 
form) ݂ሺݔଵ,… , ݔ௡ሻ ൌ ܽ଴ ْ ܽଵݔଵ ْ…ْ ܽ௡ݔ௡ ْ ܽଵ,ଶݔଵݔଶ ْ…ْ ܽଵ,…,௡ݔଵ …ݔ௡
的方法是實作下述以 ݊ ൌ 3 為例的邏輯電路：最左端輸入真值表，最右
 27 
LC 函數的輸入變數是以真值表表示的布林函數，輸出其線性特徵。 
 
 
二、 參考資料 
[1] “TT and ANF Representations of Boolean functions” 
http://www.selmer.uib.no/odbf/help/ttanf.pdf 
  
 29 
雖然 Serpent 設計者的線性變換包含旋轉量與平移量，但是為了分析
雪崩效應時敘述較為簡潔，暫且刪除最後一步驟的旋轉量，將線性變換
簡化如下： 
X଴ ؔ X଴ ൏൏൏ y଴ 
Xଶ ؔ Xଶ ൏൏൏ yଶ 
Xଵ ؔ Xଵ ْ X଴ ْ Xଶ 
Xଷ ؔ Xଷ ْ Xଶ ْ ሺX଴ ൏൏൏ z଴ሻ 
Xଵ ؔ Xଵ ൏൏൏ yଵ 
Xଷ ؔ Xଷ ൏൏൏ yଷ 
X଴ ؔ X଴ ْ Xଵ ْ Xଷ 
Xଶ ؔ Xଶ ْ Xଷ ْ ሺXଵ ൏൏൏ zଵሻ 
 
若使用原本的平移量會比旋轉量的雪崩效應更差，因為單一變異可
能會被刪除，而最後的旋轉對單一變異的數目沒有影響。欲強化雪崩效
應，則希望單一位元變異時經過線性變換後能有最大的位元改變數，即
改變的位元不互相抵銷。實際假設ㄧ個單一變異代入計算，可得一些不
等式使得變異不相消，下面以改變 X଴ 的單一位元為例導出不等式，再
給出 Xଵ~Xଷ 的不等式。 
 
假設 X଴ 第 0 位元發生改變，由於全部的平移都改成旋轉，第 n 個
位元發生改變與第 0 位元發生改變結果相同，則經過第一步後 X଴ 第 
െy଴ሺmod 32ሻ 位元發生改變，第二步不影響，第三步後 Xଵ 第 
 31 
接下來討論其雪崩效應，從線性變換到 S-box 會將 32 位元分給 8 個
替代盒處理。線性變換平均一個誤差會變為五個誤差，討論五個誤差的
情況，有以下六種： 
 
(a) 1 1 1 1 1 0 0 0 
(b) 2 1 1 1 0 0 0 0 
(c) 2 2 1 0 0 0 0 0 
(d) 3 1 1 0 0 0 0 0 
(e) 3 2 0 0 0 0 0 0 
(f) 4 1 0 0 0 0 0 0 
 
替代盒平均將一個誤差變為兩個誤差，假設兩個誤差隨機分佈，知 
(a) 誤差變為 2 2 2 2 2 0 0 0 
 
(b) 誤差變為 x 2 2 2 0 0 0 0，其中 x 為期望值，計算如下：一個誤差變
為兩個誤差，在 4 個位元中的分佈有 Cଶସ ൌ 6種，兩個誤差有 36 種組
合。其中Cଶସ ൌ 6種組合有 4 個誤差，Cଶସ ൌ 6種組合有 0 個誤差，24
種組合有兩個誤差，期望值為଺ൈସାଶൈଶସଷ଺ ൌ 2 ൌ x 
 
(c) 誤差變為 x x 2 0 0 0 0 0，x 如(b)之 x  
 
 33 
6 個 2 個誤差的組合共產生 288 個 2 個誤差的組合。考慮 3 個誤差變
化中 168 個 2 個誤差的組合及 1 個誤差變化中 2 個誤差的組合，後者
中的 1 1 0 0，與前者作用會產生 28 個 0 0 0 0、28 個 0 1 1 0、0 1 0 1、
1 0 1 0、1 0 0 1、以及 28 個 1 1 1 1。總共輸出6 ൈ 28 ൌ 168個 4 個誤
差組合、6 ൈ 28 ൌ 168個 0 個誤差組合、及6 ൈ 28 ൈ 4 ൌ 672，故總
共輸出 168 個 4 個誤差組合、168個 0 個誤差組合、960 個 2 個誤差
組合。z ൌ ସכଵ଺଼ାଶכଽ଺଴ଵଶଽ଺ ൌ 2。 
 
即在分佈最差的情況下經過一個回合（線性變換與替代盒）後 1 位
元的變異也會產生 4 位元的變異。 
 
二、 程式碼說明 
為了加強雪崩效應，分析上述 ݕ଴, … , ݕଷ, ݖ଴, ݖଵ 的條件，可以列出
至少 22 條不等式，使其雪崩效應在理論上最強。根據這 22 條不等式，
尋找出所有可能的 ݕ଴, … , ݕଷ, ݖ଴, ݖଵ。再參考 Serpent 設計者所選取的線性
變化 ሼ1, 3, 5, 7, 13, 22ሽ ，對於 ݖ଴, ݖଵ 的挑選僅限定在 8 以內（設計者令
ݖ଴ ൌ 3, ݖଵ ൌ 7）。而 ݕ଴,… , ݕଷ 與最後一步驟的旋轉量，則是限定在 3 與
29 之間（原設計者令其為1, 3, 5, 7, 13, 22）。 
 
 35 
陸、 程式碼產生器 
 
綜合各元件的變異，編寫了一個可以根據輸入的 Hash input 產生不同
Serpent 變異版的程式。為了使程式維護容易，將各個不同的加密步驟寫在
不同的程式碼文件中，以利之後的修改。 
 
很多簡單、重複多次的程式碼，例如 KeyMix，其實可直接寫在 Serpent
加密程式中當作子函式。之所以用 define 的方式，是考慮到加密的速度。
在加密一開始將明文放入暫存器變數中，之後便僅用 5 個暫存器去做所有
的加密運算。如果沒有用 define 的方式，而是寫成子函式，那麼就會造成
變數脫離暫存器的範圍，使得加密速度下降。 
 
一、各程式碼文件介紹 
  
 37 
其中替代盒的選取是用 ChooseSBoxes 函數，這部分的程式碼是基於
rand_table (亂數表)。如果可以隨機挑選出一個整數，則這段程式碼就能夠
以均勻的機率挑選出各種替代盒的組合。但實際上亂數表每一格即是 Hash 
input 的一個位數，僅可能是 0 至 15，因此機率是不均勻的。這部分獨立出
來的原因就是希望以後若有更恰當的方法，例如一次選取 Hash input 的多
個位數當作亂數表的一格，便可以更改這個子函式以獲得更佳結果。 
 
ChooseSbox 子函式會將結果存回 SBox_Choose 陣列中，其中若
SBox_Choose[i]=j 代表第 i 個替代盒是用 data.h 當中 SBoxOriginal 陣列的第
j 個 Bitslice 實作。 
 
InP_Choose 是選擇替代盒輸入位元的 Permutation 等價變換，由於總共
有 4!=24 種可能變換，但本變異版用 Hash input 的兩個位數，即 256 種可
能性來做選擇，因此這部分選取也是不均勻的。其中若 InP_Choose[i]=j 代
 39 
Poly_Choose 則是依據 LFSR 的研究結果挑出的 16 個 primitive 多項式
中，隨機選擇一種。用 Hash input 的一個位數來做選擇，機率是均勻的。
其中若 Poly_Choose=j 代表線性變換是用 data.h 當中 randomPoly 陣列的第 j
個 primitive 多項式係數。 
 
接下來程式逐一使用各個印製程序，在下面章節會分別介紹。 
  
 41 
其中替換盒的 permutation 也是在這部分實現的。這是由於實現
permutation 最有效率的方法是將暫存器的編號對調，如此一來便不需花費
時間將變數值由暫存器中取出。 
 
而反向解密也是用同樣的原理，只需要顛倒順序即可。 
 
  
 43 
（4）KeySBoxGen.c 
印製在密鑰排程中所需的替代盒。 
  
 45 
（6）LinearTGen.c 
根據所選擇的常數組合，印製線性變換。 
  
 47 
（8）KeyMixGen.c 
印製子密鑰加法的程式碼。 
  
 49 
三、 標頭檔產生介面 
為了便於操作，產生標頭檔 serpent.h 的部份提供了使用者介面。在使
用時，僅需輸入 24 位 16 進位的數字(0-9, A-F)，亦可由該程式隨機產生。
輸入完畢後，點選按鈕「生成標頭檔(.h)」，即會在該程式資料夾處產生一
標頭檔，檔名格式如：serpent_12_Dec_2011_18_12_57.h，後方為產生該標
頭檔的日期及時間。運作時，需確保 generator.exe, sha256deep.exe, 
sha256deep64, tmp.txt, tmp2.txt 檔案皆存在；32 位元系統請使用
Serpent32.exe 執行，64 位元系統請使用 Serpent64.exe 執行。 
 
在實際執行加解密測試時，需將標頭檔檔名更改為 serpent.h。在進行
測試前，建議先備份附有時間格式的標頭檔後，再進行更名與測試的動作。 
 
 
上圖為標頭檔產生介面。 
 
 51 
 平均加密時間(秒) 平均解密時間(秒) 
第 1 個等價類 0.3197 0.346
第 2 個等價類 0.3226 0.2997
第 3 個等價類 0.3659 0.2937
第 4 個等價類 0.321 0.3028
第 5 個等價類 0.3211 0.3027
第 6 個等價類 0.3397 0.2919
第 7 個等價類 0.3008 0.3278
第 8 個等價類 0.3213 0.2944
第 9 個等價類 0.315 0.5397
第 10 個等價類 0.3289 0.2917
第 11 個等價類 0.3048 0.3417
第 12 個等價類 0.3507 0.4308
第 13 個等價類 0.3287 0.3091
第 14 個等價類 0.315 0.3041
 
另外修改了 Serpent 原始的程式碼，計算對應的 serpent_encrypt 加解密
1000000 回合的時間 
 
 53 
柒、 結論 
 
根據 [2] 所述，AES 的決選者 Serpent 被製作得如坦克般堅強，是
所有 AES 參加者中最保守的。Serpent 在很多方面都和 AES（Rijndael）
相反。AES 強調它的優雅及效率，而 Serpent 則完全為了安全性而設計，
最有效的攻擊只能對付 32 回合中的 10 回合 [1]。 
 
Serpent 的劣勢是速度僅為 AES 的三分之一，並且很難有效率實作，
因為它的 S-box 必須被轉換成適合 CPU 執行的布林函數。如果 Serpent
的加解密速度與 Rijndael 一樣快，由於它的保守設計，它幾乎一定會被
選為 AES。但速度是相對的，若測量加密每位元組所需時間，Serpent 和
DES 一樣快，更比 3DES 快很多。只是當 Serpent 和其他 AES 決選者相
比，才顯得很慢。 
 
本計畫分析 Serpent 安全性設計，成功進行等效修改，使得總變異量
超過 280，並且完成實作。 
 
[1] Eli Biham, Orr Dunkelman, and Nathan Keller. The Rectangle Attack
　 Rectangling the Serpent. Eurocrypt 2001. LNCS 2045, pp.340-357 
[2] Niels Ferguson and Bruce Schneier. Practical Cryptography, 2003. 
 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/03/15
國科會補助計畫
計畫名稱: 新型區塊加密算法研究與開發
計畫主持人: 鄭振牟
計畫編號: 100-2623-E-002-009-D 學門領域: 電子與資訊系統
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
辦理第四屆後量子密碼學會議 http://pq.crypto.tw 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
