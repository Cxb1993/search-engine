行政院國家科學委員會補助專題研究計畫成果報告 
同儕式個人網路虛擬環境架構 
Topos: A Framework for Peer-to-Peer Personal Networked Virtual Environments 
計畫編號    : NSC 97-2221-E-008-060 
執行期限    : 97 年 8 月至 99 年 7 月 
主持人      : 江振瑞 
共同主持人  : 黃興燦 
中文摘要 
由於網路傳輸媒界的不可信任，因此驗證從同儕網路上接收到 3D 串流資料的完整性和來
源是必要的步驟。Topos 計畫之目的在於降低接收者對於同儕式 3D 串流即時處理驗證程序的計
算量，以節省計算資源。為了達到此目的，過去的做法大致上都是從驗證的演算法著手，使用
計算量低的驗證演算法，自然就降低接收者的驗證計算量。Topos 乃是從另一方面著手降低計算
量。我們觀察在網路虛擬環境中，使用者(或玩家)通常會有群聚的現象，例如在多人線上遊戲中，
同一隊伍的玩家會共同聚在一起打怪物。我們利用這個特性讓同一群使用者對於同一批 3D 串流
資料儘量降低重複的驗證動作，以達到降低整體計算量的效果。另外我們也將 3D 串流依據其資
料相依關係分成四類: 完整模式、 線性串流、獨立串流、部份線性串流，並分別針對這四類的
3D 串流資料設計適合的驗證程序，使得驗證效率能夠根據 3D 串流本身的特性達到最佳化。 
關鍵詞： 同儕網路、網路虛擬環境、3D 串流、巨量多人線上遊戲、資料驗證 
Abstract 
Verifying the integrity and the authenticity of received 3D streaming data in peer-to-peer 
networked virtual environments (P2P-NVEs) is essential because the network medium is not fully 
trusted. The objective of Topos project is to reduce the computation cost of real-time 3D streaming 
verification. In order to achieve this goal, all past researches try to reduce the computation cost of 
verification algorithms directly. However, Topos adopts different approaches to make the verification 
efficient. In NVEs, players usually gather together to perform specific actions (missions). For example, 
players form a group to fight against monsters in a Massively Multi-player On-line Game (MMOG). 
We therefore propose a group-based scheme such that group members can rely on group leader to 
verify streaming data at a very low cost. Besides, we classify 3D streaming data into four types, 
namely the whole model, linear stream, independent stream, and partially linear stream, according to 
data dependency. We then design appropriate verification procedure for different types of 3D 
streaming data to improve verification procedure efficiency. 
Keywords: Peer-to-peer, network virtual environment, 3D streaming, massively multi-player on-line 
game, data authentication 
除了討論單純利用密碼學做到驗證正確性之外[CHJ09]，也有其它的研究討論利用浮水印的
技巧，來驗證 3D模型[Wu05, Wu06]。為了要降低驗證時的計算量，本計畫提出以群體為基礎的
3D串流資料驗證技術來降低整體使用者電腦的計算負擔[CJHO09]。另外，本計畫也將3D串流資
料分成四類，根據這四類不同特性的3D串流資料，我們再分別為它們設計適當的驗證程序，已
達到降低計算量的目的 [CHJ09]。 
 
二、 研究方法 (Research Methods) 
 
Topos 計畫提出了利用群體為基礎的 3D 串流資料驗證技術來降低整體使用者電腦的計算負
擔。方法及原理大致如下。 
1.) 一開始同一個群體的使用者要先建立起最簡便的安全通道，利用對稱式加解密系統配合
上一般的身份認證金鑰交換( Authenticated Key Exchange, AKE)協定即能夠輕易達到此目
標[Bell00]。 
2.) 所有的使用者都能按照以往下載 3D 串流資料的方法來下載資料，不過並不需要按照舊
方法來驗證其正確性(integrity and authenticity)。此時派一個代表驗證下載到的 3D 串流
資料的正確性，確認之後，此代表再利用 checksum 建立已經驗證 3D 串流資料的檢查
碼。因此，只要將 checksum 利用安全通道告訴給其它的使用者，所有的使用者都能夠
確認所下載來的 3D 串流資料是正確的。 
 
以群體為基礎的驗證優點是能夠大幅降低使用者的計算量，因為大部份的使用者不再需要
利用密碼學演算法來驗證收到資料的正確性，就算我們利用安全通道來加/解密 checksums，因
為 checksums 相對串流資料或原來的數位簽章本身的資料量也是相當低的，因此加/解密並不足
以產生重大的計算量。而且此方法能夠和過去的其它研究，例如：hash-chain, hash tree…等驗證
協定相容；換句話說，以群體為基礎的驗證技術能夠搭配過去任何運算量低的驗證協定。然而，
此方法也有其缺點，也就是同一群體的使用者必要先推派可信任之驗證領導者(leader)，且此領
導者的計算量將明顯增加。幸運的是，如我們在[CJHO09]所提及的，因為每個群體的使用者數
不會太大，而且領導者本身原本也要進行資料驗證，因此領導者增加的計算量一般不會太大。 
 
除了以群體為基礎的方法之外，我們也發現 3D 串流事實上能夠分成四類，根據這四類不同
特性的 3D 串流，我們再分別為它們設計適當的驗證程序。如圖 1 所示，我們將 3D 串流資料可
以區分成四類: 
1.) 單一模型資料(whole model): 使用者的電腦必須下載完整個串流資料之後，才能夠顯示
出 3D 物件。 
2.) 對於線性串流而言，整個串流被切割成一些片段(pieces)，利用 hash chain 或 hash tree 等
方式即可做到即時驗證。其做法是將這一些連續片段的串流，從最後一個片段開始計算
其摘要值(digest)，而計算出的摘要值要連同上一個片段的內容再計算出摘要值，如此不
斷計算出摘要值一直到最前面的片段，再針對第一個片段做數位簽章即可。如圖 2所示，
令此串流共有 n 個片段，先計算出第 n 個片段的摘要值，再利用此摘要值和上一個片段
依序計算出摘要值，算到第 0 個片段時，即針對第 0 個片段算出來的摘要值做數位簽章。
對於驗證的人而言，只須要做一次數位簽章驗證，其它的片段只要利用雜湊函數即可即
時確認所有的片段的正確性，而不必等到整個串流都下載完畢。 
3.) 另外一種串流是所有被切成細小區塊的片段，之間並沒有相依性。因此不論如何只能各
別對於每個片段做數位簽章，並且分別驗證。但是這也是有技巧的，例如我們可以挑一
個驗證階段最省計算資源的數位簽章法，而完全不考慮其簽章階段的計算資源。據我們
所知，目前最符合此特性的數位簽章法是 Rabin 數位簽章法，本計畫就是採用這種方法。 
4.) 最後一種串流的片段相依是完全沒有規則性的，也就是說片段之間相依關係只可以利用
DAG 來表達。在這種情況之下，可以找到 DAG 的最未端，就像 hash chain 一樣，從最
未端往回做 hash，並且在最前面做簽章。一旦當 hash DAG 的圖過份複雜，使得效果低
於直接針對每個片段做簽章的時候，可以改利用第 3.種方法來做簽章。因此內容發佈者
其實須要事先利用二種不同的簽章來模擬相同的一份串流，以找出何者驗證效率較好。 
 
三、 計畫成果自評 (Self-Evaluation) 
 
Topos 計畫主要成果有二： (1) Authenticated Group-Based Peer-to-Peer 3D Streaming，一篇名
為”Group-Based Peer-to-Peer 3D Streaming Authentication”的論文，即將於 The 3rd International 
workshop on peer-to-peer networked virtual environments (P2P-NVE2009)會議中發表 (如附件一 )，
利用以群體使用者為基礎的架構來降低驗證計算量的問題，由於整個相同的群體當中，只有推
派的少數代表真正執行驗證的計算，因此大幅降低總體的驗證計算資源。(2) Secure Peer-to-Peer 
3D Streaming，一篇名為” Secure Peer-to-Peer 3D Streaming”的論文，已於 Multimedia Tools and 
Applications 期刊中發表(如附件二)。此論文將 3D 串流歸納成四類，分別對這四類不同的 3D 串
流設計最理想的驗證程序，使得各種串流的驗證都能夠達到最佳效率。透過本計畫，我們發表
與計畫相關的論文，我們訓練出熟悉同儕 3D 串流計數的學生，也派遣學生至新加坡國立大學進
行國際合作計畫，上列發表論文中的第一篇，即是與新加坡國立大學黃瑋燦教授共同合作撰寫
的，我們認為計畫成果符合原先的預期。 
 
  
 
 
附件一 
 
已發表之計畫相關論文 
 
 
clients of 3D streaming applications can obtain 3D con-
tents from other clients instead of the server. Since clients
navigating nearby virtual environment regions usually share
similar 3D contents, most contents can be downloaded from
clients and the server bandwidth consumption is reduced
dramatically. P2P 3D streaming can thus achieve very high
scalability.
As 3D contents may be obtained from clients in P2P 3D
streaming, the need to verify the integrity and authenticity
of the the contents arises. Integrity verification and authen-
tication are particular important in applications such as on-
line shops or auction, where a user needs to ensure that the
3D model of an item he or she is interested in is indeed
from a trusted source and has not been tampered with. One
method to achieve this is to generate a message authentica-
tion code (MAC), taking as inputs the content to verify and
a secret key known only to the content owner and receiver.
The MAC is then sent together with the content. The re-
ceiver, using the content received and the secret key, can re-
compute the MAC and verify it against the MAC received.
Since MACs are computed and verified with the same secret
key, they can be verified only by intended recipients who
possess the key beforehand. Another method for content
authentication is to make the content owner sign a digital
signature (DS), which is a piece of information based on
both the content and the owner’s private key. The receiver
can verify the content by the owner’s public key, which is
publicly accessible, so the DS scheme is suitable for public
authentication [18]. Some watermarking methods [18, 19]
were proposed for authenticating 3D contents. They are
based on concepts similar to either the DS or the MAC. For
example, Wu and Cheung proposed a public authentication
method to imperceptibly embed the owner’s signature into
the 3D content by “stealing” least significant bits (LSBs) of
floating point numbers representing the content.
The nature of 3D streaming, however, introduces a new
complication in authentication. Suppose we generate a sin-
gle DS (or MAC) for the whole 3D contents, then the 3D
contents can only be authenticated when the they are com-
pletely received. It is crucial, however, for users to be able
to authenticate the contents progressively (i.e., to authenti-
cate the 3D contents as they are is being received), since
1) we want to detect any malicious tampering early, and 2)
not all users wait to receive the whole 3D contents. For the
case of 3D mesh objects, a naive solution for progressive au-
thentication is to generate a DS (or MAC) for the base mesh
and for each of the refinement sent. This solution, however,
is expensive. In [11], the hash-chain and Rabin signature
schemes are proposed to decrease the cost of signing digital
signatures.
In this paper, we present an efficient solution for progres-
sive authentication of P2P 3D streaming that takes advan-
tage of secure group communication to further save compu-
tation. Users in virtual environments usually form a group
to perform specific actions. For example, friends might
visit a virtual shopping mall together. One of the users
of the group is assumed to be the trusted leader, who is
to download 3D contents and verify their authenticity and
integrity by a specified 3D streaming progressive authen-
tication scheme mentioned above. The leader then sends
group members a checksum value for each 3D content piece
via group secure channels. A group member can download
3D contents from any user, even from non-group members,
and can authenticate the downloaded 3D contents by the
encrypted checksum values received from the leader. Since
checksum is cheap to compute, much computation is saved.
We will evaluate the computation saving of the proposed
scheme for the case of progressive meshes based on the
hash-chain signature 3D streaming authentication scheme
which is so far of the lowest computation cost to the best of
our knowledge. We will also evaluate the rendering quality
when embedding the hash-chain signature into the LSBs of
the mesh data. We show that such embedding is impercep-
tible (i.e., it does not introduce significant distortion to the
mesh), while at the same time, preserves the total size of the
mesh.
The rest of the paper is organized as follows. In Sec-
tion 2, we introduce some related work. We describe the
proposed method in Section 3, and show its evaluations in
Section 4. Finally, some concluding remarks are drawn in
Section 5.
2 Related Work
In this section, we introduce some related work, includ-
ing P2P 3D streaming, authenticated 3D streaming, pro-
gressive meshes, imperceptible public 3D mesh authenti-
cation, and secret key exchange. The notations used in this
section and in the rest of this paper are listed in Table 1.
2.1 Peer-to-Peer 3D Streaming
FLoD [14, 16] is the first P2P 3D streaming frame-
work that partitions the VE into rectangular cells, and spec-
ify scene descriptions (i.e., files containing lists of objects
within each cells) for object discovery. It relies on the re-
cent research of P2P virtual environment (P2P VE) [7,8,15],
where a 2D spatial overlay returns a list of nearby users
within the area of interest (AOI) for the discovery of con-
tent sources. The returned neighbors are called AOI neigh-
bors. Once a navigating user obtains a list of AOI neigh-
bors, the user can then send queries to these AOI neighbors
to exchange states on scene content availability, and request
the AOI neighbors to exchange contents. The server is con-
tacted only if no neighbors have the relevant contents. As
the query-response approach to inquire content availability
that results in minimal distortion to the mesh (e.g., by col-
lapsing shortest edge first). The final, simplified model ob-
tained after the sequence of operations becomes the base
mesh. From the base mesh, we can obtain the original
mesh by performing the reverse operation vertex split, by re-
peatedly splitting the merged vertices, thereby restoring the
edges that has been collapsed. A progressive mesh there-
fore consists of the base mesh, plus a series of vertex split
operations.
To stream a progressive mesh, the base mesh is sent first,
followed by a sequence of packets containing the vertex
splits, allowing the receiver to render a simplified version of
the mesh, before refining the quality of the rendered mesh
by performing the vertex split operations received. Group-
ing of vertex splits into packets (or packetization) for pro-
gressive mesh streaming is addressed in [12].
2.4 Imperceptible Public 3D Mesh Au-
thentication
Wu and Cheung proposed an authentication scheme to
verify the authenticity and integrity of 3D meshes by pub-
lic keys [18]. The basic idea of the scheme is to embed a
digital signature within the 3D mesh so that only the public
key that is publicly accessible is required for authentication.
The scheme provides a convenient way to publicly authen-
ticate 3D meshes. Furthermore, it inserts an individual digi-
tal signature to each 3D mesh piece so that a tampered mesh
piece can be identified precisely.
Wu and Cheung’s scheme also proposes a way to em-
bed digital signature within 3D meshes imperceptibly. It
assumes that each vertex of a 3D mesh is a coordinate
of x, y and z values represented by floating point num-
bers. According to the specification of the single-precision
binary floating-point number format [4], a floating-point
number consists of three fields, namely the Sign with the
most significant bit (with index 31), the Exponent with the
middle 8 bits (with index from 23 to 30) and the Man-
tissa with the last 23 bits (with index from 0 to 22). The
actual value of a floating-point number is computed by
(−1)Sign×2Exponent−127×1.Mantissa. The least signif-
icant bit is the last bit of Mantissa (i.e., the bit with the in-
dex 0). If the least significant bit is replaced, the introduced
relative error is no more than 2−23. The distortion of the
mesh is therefore negligible even if the LSB of each vertex
is changed arbitrarily. Using LSBs to store the digital signa-
ture, which is adopted by Wu and Cheung’s scheme, is thus
imperceptible. In this way, the file format does not need to
be changed. This means whether the digital signature is in-
serted to a piece or not, the previous rendering engine which
cannot verify the digital signature can still parse and render
the mesh content correctly.
2.5 Secret Key Exchange
In secure group communication, a pair of the group
members need to negotiate a secret key for encryp-
tion/decryption between them. Many key exchange proto-
cols can be used for the purpose. In this subsection, we
introduce a password-based key exchange protocol [5] pro-
posed by Bellare, Pointcheval and Rogaway. The protocol
can be used to exchange a secret key shared between users
A and B with a pre-specified large prime p, a pre-specified
primitive root (or generator) g of p, and a shared password
pw known only by A and B. It’s security is based on the
complexity of solving the discrete logarithm problem and
can be proved in a formal model even though the password
is chosen from a small range. It has the following steps:
1. User A first picks a random value x, then calcu-
lates gx (mod p) and Epw[gx (mod p)]. Note that
for the sake of representation convenience, we omit
“(mod p)” in the rest of the paper.
In this step, A sends his/her identity A and Epw[gx] to
B. The procedure can be abstracted as follows.
A → B : A,Epw[g
x]
2. B picks a random number y and calculates gy . B also
uses the shared password pw to decrypted Epw[gx]
to obtain the value gx, and calculates the secret key
sk′ = H(A‖B‖gx‖gy‖gxy). Finally, B transmits
Epw[g
y] and H(sk′‖1) to A. After A receives this
message, A also uses the share password pw to de-
crypt Epw[gy] to obtain the value gy , and calculates
the secret key sk′′ = H(A‖B‖gx‖gy‖gyx). Note that
the value gxy is equivalent to gyx, so sk′ = sk′′. A
ensures that B already knows the secret key by check-
ing H(sk′‖1) ?= H(sk′′‖1). The procedure can be
abstracted as follows.
A ← B : Epw[g
y],H(sk′‖1)
3. User A transmits H(sk′‖2) to B, and B ensures
that A already knows the session key by checking
H(sk′‖2)
?
= H(sk′′‖2). The procedure can be ab-
stracted as follows.
A → B : H(sk′‖2)
3 The Proposed Scheme
Observing that users in virtual environments usually
form a group to perform specific tasks, such as visiting a
shopping mall together or fighting monsters cooperatively
in an MMOG, we propose to take advantage of secure group
communication to further reduce the cost of 3D streaming
authentication. The basic idea is for members of a group,
encrypted by secret key ski. The procedure is abstracted as
follows.
leader → peeri : Eski [ci‖ti‖cti]
Note that cj , tj , ctj in the above abstraction stands for
the checksum of data piece Dj , the checksum of the time
stamp of cj , and the checksum of cj and tj according to
Table 1.
3.3 Verification Phase
In this phase, group members authenticate 3D stream-
ing data with the help of the leader. By peer-to-peer 3D
streaming techniques, such as FLoD [14,16], a group mem-
ber peeri can download 3D contents from any source in the
network. After downloading a data piece, peeri can verify
the authenticity and integrity by the checksum values sent
by the leader. The steps for the verification taken by peeri
are described below.
1. peeri receives the data piece Dj of 3D contents from
any other peer, the leader or the server, and receives
the authentication message form the leader.
2. peeri decrypts the authentication message sent by the
leader to obtain ci‖ti‖cti.
3. peeri first checks if the authentication message is le-
gitimate by comparing cti with the checksum of ci and
ti.
4. peeri checks whether the timestamp is obsolete or not
by the equation: current time − ti
?
< TH , where
TH is a pre-specified threshold of time.
5. peeri computes the checksum value c′i of the received
data piece Dj and perform the following checking:
c′j
?
= cj .
If the result of the checking is positive, then the data
piece Dj is authenticated.
4 Security Analysis
The security of the proposed group-based 3D streaming
authentication scheme is based on 1) the trust of the leader
and 2) the authenticity and integrity relay by encrypted
checksum values sent by the leader. Below, we perform
security analysis in these two aspects.
4.1 The Trust of the Leader
The group leader is designated to verify the authenticity
and the integrity of 3D contents and to relay the verification
to other group members. A totally trusted group leader is
ideal. However, motivations for the leader to cheat indeed
exist in spite that the leader was usually chosen with his/her
higher reputation than others. Fortunately, the proposed
scheme uses the leader’s public key to securely exchange
the secret key, so that a peer A can always identify another
peer B when B plays the role of the leader and cheats. To
detect cheating, we can designate more than one leaders to
separately relay authenticity and integrity to group mem-
bers. The cheating of an individual leader (or a minority of
leaders) can be detected unless a majority of group leaders
collude to cheat.
4.2 Authenticity and Integrity Relay
The group leader relays the authenticity and integrity of
3D contents to all other group members after 3D contents
are successfully verified. The authenticity and integrity of
3D contents can be confirmed by group members because it
is infeasible to modify 3D contents to match the encrypted
checksum without the knowledge of the secret key used to
encrypt the checksum. Moreover, the proposed scheme em-
beds timestamps in checksum authentication messages, so
a replayed checksum message will be discarded if the em-
bedded timestamp is obsolete. This can prevent adversaries
from disseminating outdated 3D contents to group mem-
bers. The relay process is therefore secure.
5 Evaluation
In this section, we evaluate the proposed scheme in terms
of 1) the computation cost saved, and 2) the rendering qual-
ity when imperceptible 3D mesh authentication scheme is
integrated with the proposed scheme. As we will show,
about 2/3 computation is saved and the rendering quality
is acceptable. Below we begin with evaluating the compu-
tation cost.
5.1 Computation Cost
In the proposed scheme, the group leader needs to ver-
ify the authenticity and integrity of 3D contents with a pre-
specified authentication mechanism, such as the hash chain-
based mechanism proposed in [11], while group members
only need to perform the verification with encrypted check-
sum values sent by the leader. Consequently, the group
members save a lot of computation, while the leader bears
heavier computation load. We assume that 1) the pre-
specified authentication mechanism is the hash chain-based
mechanism proposed in [11], and 2) the mechanism uses
SHA-1 hash function, and 3) the proposed scheme uses the
Adler32 checksum function and the AES/CTR 128-bit se-
cret key encryption/decryption function. In Figure 2, we
(a) (b)
(c) (d)
Figure 4. (a)Original base mesh (b)Original
complete mesh (c)Base mesh in which 12
floating point number LSBs carry authentica-
tion information (d)Complete mesh in which
4 floating point number LSBs carry authenti-
cation information
group member can authenticate 3D contents downloaded
from any source. Since checksum is cheap to compute,
much computation is saved. On problem of the proposed
scheme is that it requires every group member should estab-
lish a secret key shared with the leader, which incurs a lot
of computations and communications. Fortunately, users in
a virtual environment of a group usually establish such keys
when joining the group. So, there is no extra cost of estab-
lishing secret keys caused by the proposed scheme. Another
problem of the proposed scheme is that the leader bears a
heavier load than others. To remedy the problem, we can
allow multiple leaders to be elected so that a leader serves
only a limited amount of members.
We have evaluated the computation saving of the pro-
posed scheme for the case of progressive meshes using the
hash chain signature 3D streaming authentication scheme.
As we have shown, about 2/3 computation is saved for the
group member using the proposed scheme when data piece
is about 0.9MB. We have also evaluated the rendering qual-
ity when embedding hash chain signatures into the floating
point number least significant bits (LSBs) of the mesh data
to make the signatures imperceptible. As we have shown,
the rendering quality is acceptable.
References
[1] http://www.virtualenvironments.info/.
[2] http://secondlife.com/.
[3] http://www.cryptopp.com/benchmarks.html.
[4] A. S. 754-1985. Standard for binary floating point arith-
metic.
[5] M. Bellare, D. Pointcheval, and P. Rogaway. Authenticated
key exchange secure against dictionary attacks. Eurocrypt
2000 (LNCS 1807), pages 139–155, 2000.
[6] F. Bergadano, D. Cavagnino, and B. Crispo. Chained stream
authentication. In Proceedings of the 7th Annual Interna-
tional Workshop on Selected Areas in Cryptography, volume
2012 of Lecture Notes In Computer Science, pages 144–157.
Springer-Verlag, 2000.
[7] A. Bharambe et al. Donnybrook: Enabling large-scale, high-
speed, peer-to-peer games. In Proc. SIGCOMM, 2008.
[8] A. Bharambe, J. Pang, and S. Seshan. Colyseus: a dis-
tributed architecture for online multiplayer games. In Pro-
ceedings of the 3rd conference on 3rd Symposium on Net-
worked Systems Design & Implementation, volume 3, pages
12–12, San Jose, CA, 2006.
[9] J. Botev, A. Hohfeld, H. Schloss, I. Scholtes, P. Sturm,
and M. Esch. The hyperverse: concepts for a federated
and torrent-based ’3d web’. Int. J. Adv. Media Commun.,
2(4):331–350, 2008.
[10] R. Cavagna, C. Bouville, and J. Royan. P2p network for very
large virtual environment. In VRST ’06: Proceedings of the
ACM symposium on Virtual reality software and technology,
pages 269–276, New York, NY, USA, 2006. ACM.
[11] M.-C. Chan, S.-Y. Hu, and J.-R. Jiang. Secure peer-to-
peer 3d streaming. Multimedia Tools and Applications, May
2009.
[12] W. Cheng, W. T. Ooi, S. Mondet, R. Grigoras, and G. Morin.
An analytical model for progressive mesh streaming. In Pro-
ceeding of ACM Multimedia 2007, pages 737–746, Augs-
burg, Germany, 2007.
[13] H. Hoppe. Progressive meshes. In Proceedings of SIG-
GRAPH 1996, pages 99–108, New Orleans, LA, 1996.
[14] S.-Y. Hu. A case for 3d streaming on peer-to-peer networks.
In Web3D ’06: Proceedings of the eleventh international
conference on 3D web technology, pages 57–63, New York,
NY, USA, 2006. ACM.
[15] S.-Y. Hu, J.-F. Chen, and T.-H. Chen. Von: a scalable peer-
to-peer network for virtual environments. Network, IEEE,
20(4):22–31, July-Aug. 2006.
[16] S.-Y. Hu, T.-H. Huang, S.-C. Chang, W.-L. Sung, J.-R.
Jiang, and B.-Y. Chen. Flod: A framework for peer-to-peer
3d streaming. In INFOCOM 2008. The 27th Conference on
Computer Communications. IEEE, pages 1373–1381, April
2008.
[17] W.-L. Sung, S.-Y. Hu, and J.-R. Jiang. Selection strategies
for peer-to-peer 3d streaming. In NOSSDAV ’08: Proceed-
ings of the 18th International Workshop on Network and Op-
erating Systems Support for Digital Audio and Video, pages
15–20, New York, NY, USA, 2008. ACM.
[18] H. tain Wu and Y. ming Cheung. Publisc authentica-
tion of 3d mesh models. In Proceedings of the 2006
IEEE/WIC/ACM International Conference on Web Intelli-
gence, pages 940–948, 2006.
[19] H.-T. Wu and Y.-M. Cheung. A fragile watermarking
scheme for 3d meshes. In MM&Sec ’05: Proceedings of the
7th workshop on Multimedia and security, pages 117–124,
New York, NY, USA, 2005. ACM.
Noname manuscript No.
(will be inserted by the editor)
Secure Peer-to-Peer 3D Streaming
Mo-Che Chan · Shun-Yun Hu · Jehn-Ruey Jiang
Received: date / Accepted: date
Abstract In recent years, interactive virtual environments such as Second Life, and virtual
globe applications such as Google Earth, have become very popular. However, delivering
massive amounts of interactive content to millions of potential users brings enormous chal-
lenges to content providers. Distributed peer-to-peer (P2P) approaches have thus been pro-
posed to increase the system scalability in affordable ways. Building content delivery sys-
tems based on P2P approaches nevertheless creates security concerns for commercial ven-
dors. This paper presents a generic system model for subscription-based service providers
to adopt P2P-based, non-linear streaming for interactive content. We also propose solutions
to the issue of content authentication, such that paying customers can be sure of the authen-
ticity of the content retrieved from other users. Other practical security issues in an extended
system model are also identified to allow further investigations in this problem space.
Keywords Peer-to-Peer · Virtual Environments · Nonlinear Media · 3D Streaming ·
Security · Online Games
1 Introduction
In recent years, a number of interactive multi-user virtual worlds, such as World of Warcraft
and Second Life, have proliferated. Millions of people are now paying subscribers to such
services, engaging in epic adventures or the creation and trading of virtual items worthy of
millions of dollars. Interactive, alternative life-styles are possible in these networked virtual
This research was supported in part by the National Science Council of the Republic of China (Taiwan) under
the grant NSC95-2221-E-008-048-MY3 and the grant NSC97-2221-E-008-060.
Mo-Che Chan
Department of Computer Science and Information Engineering National Central University, Taiwan, R.O.C.
E-mail: chrysler@acnlab.csie.ncu.edu.tw
Shun-Yun Hu
Department of Computer Science and Information Engineering National Central University, Taiwan, R.O.C.
E-mail: syhu@csie.ncu.edu.tw
Jehn-Ruey Jiang
Department of Computer Science and Information Engineering National Central University, Taiwan, R.O.C.
E-mail: jrjiang@csie.ncu.edu.tw
32 Background and Model
2.1 Background
There are roughly four types of 3D streaming in use today: object streaming, scene stream-
ing, visualization streaming, and image-based streaming [12]. For virtual worlds and virtual
globes, our main interests are in scene streaming [37] and in object streaming [10, 19]. We
assume that some 3D objects are located at various places in the VE. A user navigates the
scene and has a visibility area (i.e., AOI) that constantly covers new objects. Scene stream-
ing consists of two main stages: 1) object determination, where some objects of interest are
determined and prioritized according to a user’s viewing angle or preference, and 2) object
transmission, where the objects are downloaded using object streaming techniques such as
progressive meshes [10]. Objects themselves are fragmented into a base piece and many
refinement pieces to allow progressive download. A user renders a rough 3D view when
the base pieces are obtained, and progressively improves the rendering when subsequent
refinement pieces arrive.
Some recent works propose the use of P2P networks for content delivery to support
3D streaming on a large-scale. The main idea is that as users in the same VE often have
overlapping visibility, certain content thus can be shared among users who have common
views (i.e., interests). To support a large number of concurrent users, computations such as
visibility determination or the prioritization of object requests, should also be handled by
clients to ease the server loading [6].
Four main stages can be roughly identified for P2P 3D streaming: 1) object discovery,
where a client learns of which objects are within its visibility; 2) source discovery, where a
client learns about the potential content sources (including both other clients and the server);
3) state exchange, where the clients form interest groups to share information on content
availabilities and network conditions; and 4) content exchange, where the actual content
streaming occurs among the clients, such that local policies and preferences determine the
proper selection of peers and pieces to request.
FLoD [14] is the first P2P 3D streaming framework that partitions the VE into rect-
angular cells, and specify scene descriptions (i.e., files containing lists of objects within
each cells) for object discovery. It relies on the recent research of P2P virtual environment
(P2P VE) [2–4, 8, 11, 17, 29], where a 2D spatial overlay provides a list of nearby users
within view (called the AOI neighbors), for the discovery of content sources. Once a nav-
igating user obtains a list of AOI neighbors, the user can then send queries to these AOI
neighbors to exchange states on scene content availability, and request the AOI neighbors to
exchange content. The server is contacted only if no neighbors have the relevant content. As
the query-response approach to inquire content availability may be slow, a follow-up work
of FLoD [36] adopts an alternative strategy where peers would actively push content avail-
ability to their AOI neighbors to reduce time for state exchange. Additional AOI neighbors
are also maintained to increase the potential pool of source peers who could provide content.
Royan et al. propose another design for P2P 3D streaming, where a level of detail de-
scription tree (LODDT) [28] organizes 3D buildings from a large city model into a hier-
archical tree structure. A user can discover visible objects quickly using the tree structure
and determine the priority of object requests. For source discovery, a P2P VE overlay is
also assumed to provide AOI neighbors as potential sources. Clients exchange their net-
work conditions privately and would request from each other based on estimates on both
content availability and bandwidth loading. In the HyperVerse design [4], a collection of
backbone servers keep the lists of objects and AOI neighbors, so clients are notified directly
5Table 1 Classification and Properties of 3D Content Types
Content Type (example) Signature Scheme Cost / Benefit
1. whole model general digital signature requires full download /(regular meshes) lowest overhead
2. linear stream hash chain more overhead /(progressive meshes) one-the-fly rendering
3. independent stream Rabin-based highest overhead /(point cloud) fast forward supported
4. partially linear stream hash DAG hybrid of 2. linear(view-dependent meshes) and 3. independent
content exchange methods between peers are all outside our scope and we assume scenarios
as described by FLoD [14] and HyperVerse [4]. In this paper, we are mostly interested in
the security aspects to support such a scenario.
3 Authentication of 3D Content Streaming
The basic problem in content authentication is that users obtain published content from
possibly a large number of other users in P2P-based streaming, instead of the authoritative
content publisher. How to ensure that the users still receive the proper content, without
malicious content modifications or replacements, thus is of importance to both the legitimate
users and the publisher.
To provide such security guarantees for users, the content should be checked for its
authenticity and integrity whenever a user receives it. Digital signature and message authen-
tication code (MAC) are often used to verify the authenticity and integrity of the retrieved
digital content. In a typical scenario, the publisher first generates a MAC based on the pub-
lished content by the publisher’s private key. The user then takes the publisher’s public key
to verify the received content, to ensure that the content is unmodified from the publisher.
Cryptographic hash functions also are often used along with digital signatures because of
their computational efficiency and ability to prevent existential forge [24]. However, digital
signatures are costly if applied continuously, and would defeat the real-time requirement
of 3D streaming. Finding efficient content authentication methods for the interactive 3D
content thus is the main problem we want to tackle.
This section first classifies the properties of different types of 3D content, and then
presents the authentication protocols suitable to efficiently verify the authenticity and in-
tegrity of a given 3D stream. Table 1 shows the different types of 3D streaming content,
followed by their descriptions.
3.1 Content Classifications
1. The whole model content type is most basic form that needs to be fully downloaded
before using. For example, for a normal mesh model, the user needs to download the
whole mesh, before rendering can take place. This is a typical model format for certain
small mesh models, or large models that need to be transferred between the publisher or
some content serving super-peers.
2. In a linear stream such as progressive meshes [10], users can download and render the
model progressively. Content of this type usually consists of a linear stream. The main
73.2.1 Authenticating the Whole Model
A general digital signature protocol is adequate for authenticating simple content. The pub-
lisher first signs the hash value of the whole mesh model (or a texture) then publishes both
the content and signature to users. Formula 1 describes the signature.
∆ = Sprivate key{H(whole content)}. (1)
After a peer receives the whole 3D content and its signature, it computes the hash value
of the received content and uses the value and the publisher’s public key to verify the sig-
nature. However, traditional digital signature protocol can not verify the authenticity and
integrity of the received content if the content is only partially available. In other words, the
data format can not support one-the-fly downloading and verifying.
3.2.2 Authenticating the Linear Stream
To support verification of the received content on-the-fly, a trivial solution is to generate
digital signatures for each of the many pieces consisting a particular content. However, this
trivial idea ignores the fact that public key cryptosystem requires a lot of computing power
because of its many modular exponentiation computations. A stream signing mechanism
[1, 9] thus can be adopted for better efficiency. As a 3D object, consisting of both mesh
and texture data, can be treated logically as a base piece plus many refinement pieces [12],
where each refinement piece depends on the previous piece. We can thus exploit such linear
dependency in designing the proper authentication protocol.
When a provider publishes a 3D content, the model is first divided into M0,M1,M2, . . . ,Mn,
and texture divided into T0,T1,T2, . . . ,Tm, where M0 and T0 are the base pieces and M1,M2,M3, . . . ,Mn
and T1,T2,T3, . . . ,Tm are refinement pieces. The publisher then computes the hash values of
those pieces (e.g., M0, M1), and sign them by using the formulas in Figure 2 (please see
Table 2 for notations). The publisher then disseminates the digital signature of the hash of
the base piece, ∆M , some metadata of the object, meta (e.g., the object’s ID, owner, size,
number of pieces, etc.), and both the object pieces and their hash values, M0, M0, M1, M1,
... as a data stream. In order to verify the i-th message Mi immediately, a technique is to send
the hash value Mi first before the message Mi. Because Mi+1 is required when verifying Mi.
Mn = H(Mn)
Mn−1 = H(Mn−1|Mn)
Mn−2 = H(Mn−2|Mn−1)
. . . = . . .
M1 = H(M1|M2)
M0 = H(meta|M0|M1)
∆M = Ssk(M0)
Tm = H(Tm)
Tm−1 = H(Tm−1|Tm)
Tm−2 = H(Tm−2|Tm−1)
. . . = . . .
T1 = H(T1|T2)
T0 = H(meta|T0|T1)
∆T = Ssk(T0)
Fig. 2 Production rules of authenticated mesh and texture data
The receiving peer can progressively verify the received content and render the mesh
and texture. An example using progressive meshes is described as follows. The peer first
93.2.4 Authenticating the Partially Linear Stream
The last type of 3D stream has irregular dependency. Here the dependency can be described
as a directed acyclic graph (DAG) [7], where a piece may depend on several parent pieces,
and may also impact the rendering of several child pieces. So we propose a “hash DAG”
scheme to generate MAC for such streams. In Figure 3, the direction of arrow indicates “is
parent of”( e.g., piece 2 depends on piece 1). The hash value of piece Mi can be generated
if all the hash values of the predecessors of piece Mi are generated. The MAC generation
procedure for this example is described as follows. The hash value of piece 3, M3 = H(M3),
is generated first, then M2 = H(M3|M2) and M5 = H(M3|M5) can be generated. M0 =
H(meta|M1|M4) can be generated after M1 = H(M2|M5|M1) and M4 = H(M2|M4) are
generated. Finally, the publisher signs M0 to generate the major signature ∆M = Ssk(M0).
The publisher can publish this dependency relation graph, then the receiver can know which
pieces are needed. Receiver can first verify the signature ∆M = Ssk(M0), then verify the
pieces that follow. For example, anyone can verify piece 1 M1 = H(M2|M5|M1) if piece 1’s
M1 and the hash values M2,M5 are received. All MAC can be generated, transmitted, and
verified easily according to the dependency graph.
?
?
)
) q
M1 M4
M2
M3
M5
Fig. 3 Example dependency relation of partially linear stream
4 Evaluation
4.1 Security Analysis
We analyze the security for each of the four content types as follows.
Whole model. For the complete mesh or texture model, the traditional digital signature pro-
tocol is applied. Both the authenticity and integrity stand because it is difficult to find col-
lisions of cryptographic hash functions or deliver a valid digital signature verifiable by the
publisher’s public key from a specific hash value. Any attacker faces two computationally
infeasible problems without the publisher’s private key, so this digital signature protocol
cannot be forged easily.
Linear stream. The principle is the same here as in the previous traditional digital signature
– it is difficult to generate a valid signature ∆M that can be verified by the publisher’s public
key for a specific hash value. In addition, to find out Mi+1, which differs from the pre-image
11
Transmission Overhead. The communication overhead of secure content streaming consists
of the sizes of the hash values and signature. Formula 4 describes the ratio between commu-
nication overhead to content size. The overhead is relatively small if the original stream is
not divided into pieces that are too small.
number o f pieces ∗ hash value size + signature size
original stream size ∗ 100% (4)
5 Extended System Model and Future Topics
While our scenario provides a basic example on content authentication for P2P 3D stream-
ing, the scalability of the system may still be limited by the centralized aspects for state
management (i.e., object and source discovery), which may be a bottleneck if the system
grows in the range of millions of concurrent users. To improve scalability, the whole VE
may be partitioned into many disjoint regions to distribute the loads of content and state
management [17, 27], using various partitioning methods (e.g., by squares, hexagons, or
Voronoi diagrams [13]). A selected super-peer – a more trustworthy and capable machine –
is responsible to manage the game states and content meta-data within each region. Super-
peers are in general trustworthy, and may be selected based on their hardware capacities or
the owners’ reputations [15,20]. They also may be in constant contact with other super-peers
managing neighboring regions. Two more steps are thus added to our system model:
– After authentication, the joining peer is directed to one of the super-peers that currently
manages the region the user is interested to explore.
– Peers may move across different regions, at which point they would switch the super-
peer to contact.
In order to provide a convenient experience for users, existing single sign-on mecha-
nisms can be used as follows. The vendor’s authentication server first validates a logging
user based on 1) user’s private knowledge (e.g., password), 2) possession of a token (e.g.,
smart card), or 3) user’s biometric marks (e.g., finger prints) [21], with different trade-off
involved. If the authentication passes, the server will issue the user a short-term ticket, which
the user can then use this ticket to navigate within the system. Each collaborating peer in
the system can validate the user by this ticket, so the user is authenticated conveniently just
once and then can navigate everywhere in the VE. However, it is preferred that once a user
has logged in and starts to navigate (contacting various super-peers and peers for content
exchange), the user need not contact the authentication server again until logging off (i.e., a
single sign-on is mandated).
In such a scenario, the scalability may be improved, but distributed authentication or
state management are then needed. We now identify the following additional issues, if a
commercial P2P VE system also utilizes super-peer resources for state management.
User Authentication. User authentication allows only paid subscribers to login to use the
service. However, when the service is provided by not just the server, authentications among
peers becomes necessary to ensure that only subscribers can receive and exchange content.
As authenticating or querying continuously with the server is cumbersome, single sign-on
may be more preferred. Proper accounting also requires that each user has only one login.
Although authentication, authorization and accounting requirements are straightforward to
13
References
1. Bergadano F, Cavagnino D, Crispo B (2000) Chained stream authentication. In: Proceedings of the 7th
Annual International Workshop on Selected Areas in Cryptography, Springer-Verlag, Lecture Notes In
Computer Science, vol 2012, pp 144–157
2. Bharambe A, Pang J, Seshan S (2006) Colyseus: a distributed architecture for online multiplayer games.
In: Proceedings of the 3rd conference on 3rd Symposium on Networked Systems Design & Implementation,
San Jose, CA, vol 3, pp 12–12
3. Bharambe A, et al (2008) Donnybrook: Enabling large-scale, high-speed, peer-to-peer games. In: Pro-
ceedings of SIGCOMM
4. Botev J, et al (2008) The hyperverse - concepts for a federated and torrent-based ”3d web”. In: Proceedings
of MMVE
5. Burton DM (2005) Elementary Number Theory, 6th Edition. ACM Press
6. Cheng W, Ooi WT (2008) Receiver-driven view-dependent streaming of progressive mesh. In: Proceed-
ings of NOSSDAV
7. Cheng W, Ooi WT, Mondet S, Grigoras R, Morin G (2007) An analytical model for progressive mesh
streaming. In: Proceedings of the 15th international conference on Multimedia, pp 737–746
8. Frey D, et al (2008) Solipsis: A decentralized architecture for virtual environments. In: Proceedings of
MMVE
9. Gennaro R, Rohatgi P (1997) How to sign digital streams. In: Proceedings of the 17th Annual International
Cryptology Conference on Advances in Cryptology, Lecture Notes In Computer Science; Vol. 1294, pp 180
– 197
10. Hoppe H (1996) Progressive meshes. In: Proceedings of SIGGRAPH
11. Hu S, Chen J, Chen T (2006) VON: a scalable peer-to-peer network for virtual environments. IEEE
Network 20(4):22–31
12. Hu SY (2006) A case for 3d streaming on peer-to-peer networks. In: Proceedings of the eleventh inter-
national conference on 3D web technology, pp 57–63
13. Hu SY, Chang SC, Jiang JR (2008) Voronoi state management for peer-to-peer massively multiplayer
online games. In: Proceedings of NIME
14. Hu SY, et al (2008) Flod: A framework for peer-to-peer 3D streaming. In: Proceedings of IEEE INFO-
COM
15. Huang GY, Hu SY, Jiang JR (2008) Scalable reputation management for p2p mmogs. In: Proceedings of
MMVE
16. Josephson WK, Sirer EG, Schneider FB (2004) Peer-to-peer authentication with a distributed single
sign-on service. In: Proceedings of the International Workshop on Peer-to-Peer Systems
17. Knutsson B, Lu H, Xu W, Hopkins B (2004) Peer-to-peer support for massively multiplayer games. In:
Proceedings of IEEE INFOCOM
18. Li Z.-T.,Wang W.-D.,Zhang Y.-J.,Li W.-M. Source Authentication of Media Streaming Based on Chains
of Iso-hash Clusters. In: Proceedings of the Third International Conference on Autonomic and Trusted
Computing, pp, 398-407
19. Lin N.-S., Huang T.-H., Chen B.-Y. (2007) 3d model streaming based on jpeg 2000. IEEE Trans. Con-
sumer Electronics, 53(1).
20. Lo V, Zhou D, Liu Y, GauthierDickey C, , Li J (2005) Scalable supernode selection in peer-to-peer
overlay networks. In: Proceedings of HOT-P2P
21. O’Gorman L (2003) Comparing passwords, tokens, and biometrics for user authentication. In: Proceed-
ings of the IEEE, vol 91, pp 2012–2040
22. Pathak V, Iftode L (2006) Byzantine fault tolerant public key authentication in peer-to-peer sys-
tems. Computer Networks: The International Journal of Computer and Telecommunications Networking
50(4):579–596
23. Pauly M, Gross M, Kobbelt LP (2002) Efficient simplification of point-sampled surfaces. In: Proceedings
of IEEE Visualization, pp 163–170
24. Pointcheval D, Stern J (1996) Security proofs for signature schemes. Advances in Cryptology — EU-
ROCRYPT ’96 1070/1996:387–398
25. Rabin MO (1979) Digitalized signatures and public-key functions as intractable as factorization.
MIT/LCS/TR-212, MIT Laboratory for Computer Science
26. Rey C, Dugelay J (2002) A survey of watermarking algorithms for image authentication. EURASIP
Journal on Applied Signal Processing, 2002(6):613–621
27. Rosedale P, Ondrejka C (2003) Enabling player-created online worlds with grid computing and stream-
ing. Gamasutra Resource Guide
28. Royan J, Gioia P, Cavagna R, Bouville C (2007) Network-based visualization of 3D landscapes and city
models. IEEE CG&A 27(6):70–79
參加 MDM 2009 國際研討會 心得報告 
 
概要 
 
2009年5月18日至20日舉辦的MDM 2009國際研討會(International Conference on 
Mobile Data Management System,Service and Middleware)，簡稱MSN 2009。除了主會
議收錄46篇論文外，並有許多論文收錄於協同舉行的Workshop，包括 International 
Workshop on Privacy-Aware Location-based Mobile Services (PALMS 2009) 、
International Workshop on Mobile Urban Sensing (MobiUS)、International Workshop on 
Data Management in Ad Hoc and Pervasive Computing (DMAHPC)、 International 
Workshop on Sensor Network Technologies for Information Explosion Era 
(SeNTIE2009)、International Workshop on the Role of Services, Ontologies, and Context 
in Mobile Environments (ROSOC-M)、International Workshop on Mobile Media Retrieval 
(MMR'09)、The First International Workshop on Mobile Peer-to-Peer Information Services 
(MP2PIS)及International Workshop on Indoor Spatial Awareness (MDM-ISA)等。這次參
加 會 議 主 要 是 在 International Workshop on Sensor Network Technologies for 
Information Explosion Era (SeNTIE2009)報告Optimal Path Planning for Fault-Tolerant 
and Energy-Efficient Target Surveillance in Wireless Sensor and Actor Networks這篇
paper。 
    今年MDM 2009會議包含三天議程，主題含括所有 Mobile Data Management 
System相關的議題。三天各有一場專題演講，分別是Raghu Ramakrishnan所講述的
「Semantics on the Web: How do we get there?」第二日Dr. Wei-Ying Ma所講述的
「Cloud Computing and the Future of Internet Services」，最後一日Christian S. Jensen
「Location, Location, Location」。 
 
參與經過 
除發表論文外，並參與跟 Topos 計畫相關的一個名為 The First International 
Workshop on Mobile Peer-to-Peer Information Services (MP2PIS)的研討會。此研討會
分二個 session，收錄 6 篇論文，其中有一篇與本計畫相關的論文: “Improving 
Mobile Peer-to-Peer Streaming Service with BitTorrent-like Redundant Tracker”。該篇
論文講述如何透過與 BT tracker 類似的機制，去追蹤所有 peer 的加入及離開系統
的狀態，以維持高的串流資料可存取度(availability)。該篇論文並進行效能評估，
結論是可以使用多份(redundant) BT-like tracker，在不造成高成本情況下，可以大
大的提昇串流系統的穩定度。另有一片名為”Halo: A Hierarchical Identity-Based 
Public Key Infrastructure for Peer-to-Peer Opportunistic Collaboration”的論文也與
Topos 計畫相關，該篇論文提出 Halo 系統，使用階層式的身份基礎密碼系統和分
散式金鑰產生機制，使用到新穎的技術來達到遞迴式的 private key generators，並
建立一個無限層數 (unlimited number) 限制的信任階層。因此，這個公開金鑰基
  
 
 
附件 
 
研討會發表論文 
 
 
Figure 1.  A Target Surveillance System in WSAN, where three disjoint 
paths (S1ÆS4ÆS5ÆA1, S2ÆS6ÆA2, and S3ÆS7ÆA1) from source 
nodes to actor nodes are present. 
II. RELATED WORK 
In [9], Melodia et al.  studied the coordination problem in 
WSANs of selecting data paths for sensors to actors 
(sensors-actor) and actors to actors (actors-actors) in terms of 
transmission delay and energy consumption, and proposed a 
centralized integer linear programming (ILP) solution and a 
distributed adaptive solution to the problem. This work 
mainly investigated the coordination framework for WSANs. 
Other related work is the fault tolerant topology control 
for wireless communication. In [11], existing studies are 
classified into three categories by different transmission 
topology models, which are introduced in the following. 
One-to-One Model: Srinivas and Modiano [10] studied 
how to find k node-disjoint paths with minimum total energy 
consumption from a given source node to a given destination 
node. However, such pair-wise transmission model is more 
suited to the Ad-Hoc communications in wireless network 
but not WSAN. 
All-to-All Model: Papers [2] and [8] studied how to 
construct k node-disjoint paths with minimum (wireless 
radio) power for any pair of nodes in the given graph. In [8], 
Jia et al. proposed a 3k-approximation power assignment 
algorithm to construct a k-connected topology with minimum 
total power. In [2], Bahramgiri et al. proposed a distributed 
algorithm, called Fault-Tolerant Cone-Based Topology 
Control (CBTC), to increasingly adjust nodes’ transmission 
power to preserve the network connectivity tolerating at most 
k fail nodes, while minimizing the transmission power. 
One-to-All or All-to-One Model: Frank and Tardos 
proposed in [5] a polynomial time algorithm to construct 
minimum weight one-to-all k node-disjoint paths based on 
maximum cost submodular flow concept, where the paths are 
from a given node (called root) to the other nodes. Wang et 
al. proposed in [11] some algorithms to construct k node-
disjoint paths from root to the other node, or from the other 
node to root, or both. In [3], Cardei et al. studied fault-
tolerant topology control in a heterogeneous sensor network 
(a generalization form of WSAN). They introduced the k-
degree anycast topology control (k-ATC) problem with the 
objective of selecting sensor’s transmission range such that 
each sensor has k node-disjoint paths to actors, and proposed 
solutions to the problem with minimum total energy 
consumption. 
III. NETWORK MODEL AND PROBLEM DEFINITION 
In this section, we introduce the network model and the 
problem to be solved. 
A. Network Model 
We represent a WSAN as a graph G(V, E), where V is a 
set of nodes and E is a set of directed edges between nodes. 
The nodes set V consists of a sensor nodes set and an actor 
nodes set. The actor nodes set, notated by VA, represents the 
set of resource-rich actors responsible for performing 
powerful actions. The sensor nodes set, notated by VS, 
represents the set of sensors responsible for transmitting 
event packets to actors. The nodes of the set Vs are further 
classified into two categories: source nodes and intermediate 
nodes. Source nodes are so near the target that they can 
monitor the target and send out event packets when specific 
target events are detected. Other sensor nodes are 
intermediate nodes to forward event packets to other 
intermediate nodes or to actor nodes. It is noted that if a 
packet sent from a node i in set VS can reach a node j in set 
VS or VA, then there is an edge <i, j> in the edge set E. 
The energy consumption (C) in the transmission of an 
event packet between two nodes includes three parts: 
transmitting energy consumption (CT), receiving energy 
consumption (CR), and signal propagation energy 
consumption (CS); i.e., we set C=CT+CR+CS. We assume that 
CT and CR are a constant of value CM and CS is distance-
dependent component formulated as βdα, where d is the 
transmission distance, α is the path loss exponent (usually, 
2<α<5), and β is the per unit energy consumption constant. 
We assume that each sensor can determine its position by 
using a GPS positioning devices or the like or GPS-free 
positioning schemes [7], so the transmission distance can be 
figured out handily. We have that the energy consumption C 
is a function of d of the form C(d) = 2CM+βdα. It is noted that 
we can use C(d) as a cost function associated with an edge of 
transmission distance d. 
B. Problem Definition 
We are given a graph G=(V,E) with the vertices set 
V=VS∪ VA, where VS represents sensor node set, VA 
represents the actor node set, and VS contains the source 
node subset VR and the intermediate node subset VT, and 
with the edge set E consisting of edges <s, t>, where s∈Vs, 
t∈VS∪VA. Based on edge set E, we define a path set PS to 
represent the paths traversable from VR to VA. 
The problem to be solved is to find a maximum set P of 
disjoint paths in PS, while minimizing the total cost 
associated with paths in P. Note that two paths p1 and p2 are 
said to be disjoint if they have no common nodes except for 
the end point in the path. Also note that the cost CT(p) 
associated with a path p is defined to be: 
Source node 
 
 
Intermediate node 
 
 
Actor node 
 
Event Delivery Path 
S1 
S2 
S3 
S5 
S4 
S6 
S7 
A1 A2 
Satellite 
532
Authorized licensed use limited to: National Central University. Downloaded on October 28, 2009 at 05:00 from IEEE Xplore.  Restrictions apply. 
every source node s with one flow capacity and zero cost. In 
step 3, an edge <a, Nt> is added for each actor node a with 
infinite flow capacity and zero cost. Note that Ns and Nt are 
virtual nodes added to assist computation, which are not 
sensor nodes in the network. 
In step 4, a node H with multiple flow-in and multiple 
flow-out edges should be transformed by 
Node_Transformation( ) procedure to ensure that only one 
flow passes through H. By the procedure, H is transformed 
to be two nodes H_I and H_O connected by an edge with 
one flow capacity and zero cost (please refer to Fig. 3). 
 
 
Figure 3.  Illustration of Node-Transformation 
In step 5, FPA determines the minimum cost maximum 
flow plan in graph GCF within two phases. In the first phase, 
the maximum flow value from the virtual source to virtual 
target is determined. In the second phase, FPS selects the 
minimum cost flow plan based on the result of the first phase. 
Here, we realize step 5 by two algorithms. In the first phase, 
we run the Edmonds-Karp algorithm [4] to determine the 
maximum flow. Given the graph GCF, the Edmonds-Karp 
algorithm will find the maximum flow by augmenting the 
path along the shortest path as far as possible. In the second 
phase, we run the minimum cost flow (MinCost) algorithm 
to find the minimum cost flow. Given the GCF and the flow 
(say F*) found by Edmonds-Karp algorithm, the MinCost 
algorithm will try to refine the F* in GCF as lower cost as 
possible. When the MinCost algorithm is unable to further 
refine F*, it will return this minimum cost flow (F*). To save 
space, we do not show the details of the Edmonds-Karp 
algorithm and the minimum cost flow algorithm. The readers 
are referred to [4] and [6] for the implementations of the 
Edmonds-Karp algorithm and the MinCost algorithm. 
We illustrate FPA execution by a flow planning result 
shown in Fig.4, which is a solution of example in Fig.2. As 
shown in Fig. 4, each edge contains three fields, which are 
the flow value, capacity, and cost of edge. The flow value 
field indicates whether the corresponding edge is selected in 
the solution. To be more precise, if the flow value is one, 
then the corresponding edge is selected in the solution. 
Furthermore, the capacity field means the upper bound of the 
flow on the edge; the cost field is the cost associated with the 
edge. The flow planning (FP) in Fig.4 contains three disjoint 
paths, which are S1→S4→S5→A1, S2→S6_I→S6_O→A2, 
and S3→S7→A1, respectively. They correspond to three 
disjoint paths with a minimum total cost for the target 
surveillance system of the WASN in Fig. 2. 
 
 
Figure 4.  An illustration example of Flow Planning. 
B. Time Complexity Analysis 
The time complexity of proposed method is analyzed as 
follows. We use the variable V to represent the number of 
sensors and E to represent the number of edges. The core of 
our scheme is the FPA, which consists of two phases. In the 
first phase, adding links to virtual source and sink costs O(1) 
time, and Node_Transformation procedure costs O(V) time. 
In the second phase, FPA finds the maximum flow and the 
minimum cost maximum flow, which costs O(V⋅E2) and 
O(V2⋅E⋅log(V)), respectively. To sum up, the time 
complexity of our proposed scheme is O(V⋅E2 +V2⋅E⋅log(V)). 
V. PERFORMANCE EVALUATION 
In this section, we evaluate the performance of our 
proposed algorithm in this paper. We focus on two aspects: 
(1) evaluation of fault tolerance and (2) evaluation of energy 
efficiency. 
A. Evaluation of Fault Tolerance 
We evaluate the fault tolerance of the proposed Optimal 
Path Planning (OPP) scheme, and compare the results with 
those of the shortest path scheme (SPS). The SPS scheme 
utilizes Dijkstra shortest algorithm [4] to find the minimum 
cost paths to actor nodes for each source node without the 
restriction that paths are disjoint. We take SPS for 
comparison since it returns the set of paths with the 
minimum cost. We develop a simulator to evaluate the OPP 
and SPS in the same network area. Under the assumption 
that the network consists of 10 source nodes, 30 intermediate 
nodes, and 10 actor nodes, the simulation experiments are 
conducted for 4, 5, 6, 7, 8, or 9 arbitrary sensor node failures. 
Fig.5 shows the numbers of available paths of the two 
schemes after some nodes fails. As can be seen, OPP has 
S1 
S2 
S4 
S5 
S6_O 
A1 
A2 
S7 
0/1,3 
1/1, 2 
0/1,2 
1/1,4 
0/1,5 
0/1, 3 
1/1,1 
Ns 
Nt 
S6_I 1/1,0 
1/1,4 
1/1, 1 
1/∞,0 
S3 1/1, 4 
2/∞,0 
1/1, 0 
1/1, 0 
1/1, 0 
1/1,1 
FlowValue/Capacity, Cost 
H_I          H_O 
Original 
 
 
 
 
Transformed 
H
534
Authorized licensed use limited to: National Central University. Downloaded on October 28, 2009 at 05:00 from IEEE Xplore.  Restrictions apply. 
  
 
 
 
國際合作國外研究   
出國報告 
 
報告人：洪兆緯 
 
  
 
 
 
國際合作國外研究   
出國報告 
 
報告人：詹謨澤 
 
  
 
 
 
國際合作國外研究   
合作成果論文 
 
 
clients of 3D streaming applications can obtain 3D con-
tents from other clients instead of the server. Since clients
navigating nearby virtual environment regions usually share
similar 3D contents, most contents can be downloaded from
clients and the server bandwidth consumption is reduced
dramatically. P2P 3D streaming can thus achieve very high
scalability.
As 3D contents may be obtained from clients in P2P 3D
streaming, the need to verify the integrity and authenticity
of the the contents arises. Integrity verification and authen-
tication are particular important in applications such as on-
line shops or auction, where a user needs to ensure that the
3D model of an item he or she is interested in is indeed
from a trusted source and has not been tampered with. One
method to achieve this is to generate a message authentica-
tion code (MAC), taking as inputs the content to verify and
a secret key known only to the content owner and receiver.
The MAC is then sent together with the content. The re-
ceiver, using the content received and the secret key, can re-
compute the MAC and verify it against the MAC received.
Since MACs are computed and verified with the same secret
key, they can be verified only by intended recipients who
possess the key beforehand. Another method for content
authentication is to make the content owner sign a digital
signature (DS), which is a piece of information based on
both the content and the owner’s private key. The receiver
can verify the content by the owner’s public key, which is
publicly accessible, so the DS scheme is suitable for public
authentication [18]. Some watermarking methods [18, 19]
were proposed for authenticating 3D contents. They are
based on concepts similar to either the DS or the MAC. For
example, Wu and Cheung proposed a public authentication
method to imperceptibly embed the owner’s signature into
the 3D content by “stealing” least significant bits (LSBs) of
floating point numbers representing the content.
The nature of 3D streaming, however, introduces a new
complication in authentication. Suppose we generate a sin-
gle DS (or MAC) for the whole 3D contents, then the 3D
contents can only be authenticated when the they are com-
pletely received. It is crucial, however, for users to be able
to authenticate the contents progressively (i.e., to authenti-
cate the 3D contents as they are is being received), since
1) we want to detect any malicious tampering early, and 2)
not all users wait to receive the whole 3D contents. For the
case of 3D mesh objects, a naive solution for progressive au-
thentication is to generate a DS (or MAC) for the base mesh
and for each of the refinement sent. This solution, however,
is expensive. In [11], the hash-chain and Rabin signature
schemes are proposed to decrease the cost of signing digital
signatures.
In this paper, we present an efficient solution for progres-
sive authentication of P2P 3D streaming that takes advan-
tage of secure group communication to further save compu-
tation. Users in virtual environments usually form a group
to perform specific actions. For example, friends might
visit a virtual shopping mall together. One of the users
of the group is assumed to be the trusted leader, who is
to download 3D contents and verify their authenticity and
integrity by a specified 3D streaming progressive authen-
tication scheme mentioned above. The leader then sends
group members a checksum value for each 3D content piece
via group secure channels. A group member can download
3D contents from any user, even from non-group members,
and can authenticate the downloaded 3D contents by the
encrypted checksum values received from the leader. Since
checksum is cheap to compute, much computation is saved.
We will evaluate the computation saving of the proposed
scheme for the case of progressive meshes based on the
hash-chain signature 3D streaming authentication scheme
which is so far of the lowest computation cost to the best of
our knowledge. We will also evaluate the rendering quality
when embedding the hash-chain signature into the LSBs of
the mesh data. We show that such embedding is impercep-
tible (i.e., it does not introduce significant distortion to the
mesh), while at the same time, preserves the total size of the
mesh.
The rest of the paper is organized as follows. In Sec-
tion 2, we introduce some related work. We describe the
proposed method in Section 3, and show its evaluations in
Section 4. Finally, some concluding remarks are drawn in
Section 5.
2 Related Work
In this section, we introduce some related work, includ-
ing P2P 3D streaming, authenticated 3D streaming, pro-
gressive meshes, imperceptible public 3D mesh authenti-
cation, and secret key exchange. The notations used in this
section and in the rest of this paper are listed in Table 1.
2.1 Peer-to-Peer 3D Streaming
FLoD [14, 16] is the first P2P 3D streaming frame-
work that partitions the VE into rectangular cells, and spec-
ify scene descriptions (i.e., files containing lists of objects
within each cells) for object discovery. It relies on the re-
cent research of P2P virtual environment (P2P VE) [7,8,15],
where a 2D spatial overlay returns a list of nearby users
within the area of interest (AOI) for the discovery of con-
tent sources. The returned neighbors are called AOI neigh-
bors. Once a navigating user obtains a list of AOI neigh-
bors, the user can then send queries to these AOI neighbors
to exchange states on scene content availability, and request
the AOI neighbors to exchange contents. The server is con-
tacted only if no neighbors have the relevant contents. As
the query-response approach to inquire content availability
that results in minimal distortion to the mesh (e.g., by col-
lapsing shortest edge first). The final, simplified model ob-
tained after the sequence of operations becomes the base
mesh. From the base mesh, we can obtain the original
mesh by performing the reverse operation vertex split, by re-
peatedly splitting the merged vertices, thereby restoring the
edges that has been collapsed. A progressive mesh there-
fore consists of the base mesh, plus a series of vertex split
operations.
To stream a progressive mesh, the base mesh is sent first,
followed by a sequence of packets containing the vertex
splits, allowing the receiver to render a simplified version of
the mesh, before refining the quality of the rendered mesh
by performing the vertex split operations received. Group-
ing of vertex splits into packets (or packetization) for pro-
gressive mesh streaming is addressed in [12].
2.4 Imperceptible Public 3D Mesh Au-
thentication
Wu and Cheung proposed an authentication scheme to
verify the authenticity and integrity of 3D meshes by pub-
lic keys [18]. The basic idea of the scheme is to embed a
digital signature within the 3D mesh so that only the public
key that is publicly accessible is required for authentication.
The scheme provides a convenient way to publicly authen-
ticate 3D meshes. Furthermore, it inserts an individual digi-
tal signature to each 3D mesh piece so that a tampered mesh
piece can be identified precisely.
Wu and Cheung’s scheme also proposes a way to em-
bed digital signature within 3D meshes imperceptibly. It
assumes that each vertex of a 3D mesh is a coordinate
of x, y and z values represented by floating point num-
bers. According to the specification of the single-precision
binary floating-point number format [4], a floating-point
number consists of three fields, namely the Sign with the
most significant bit (with index 31), the Exponent with the
middle 8 bits (with index from 23 to 30) and the Man-
tissa with the last 23 bits (with index from 0 to 22). The
actual value of a floating-point number is computed by
(−1)Sign×2Exponent−127×1.Mantissa. The least signif-
icant bit is the last bit of Mantissa (i.e., the bit with the in-
dex 0). If the least significant bit is replaced, the introduced
relative error is no more than 2−23. The distortion of the
mesh is therefore negligible even if the LSB of each vertex
is changed arbitrarily. Using LSBs to store the digital signa-
ture, which is adopted by Wu and Cheung’s scheme, is thus
imperceptible. In this way, the file format does not need to
be changed. This means whether the digital signature is in-
serted to a piece or not, the previous rendering engine which
cannot verify the digital signature can still parse and render
the mesh content correctly.
2.5 Secret Key Exchange
In secure group communication, a pair of the group
members need to negotiate a secret key for encryp-
tion/decryption between them. Many key exchange proto-
cols can be used for the purpose. In this subsection, we
introduce a password-based key exchange protocol [5] pro-
posed by Bellare, Pointcheval and Rogaway. The protocol
can be used to exchange a secret key shared between users
A and B with a pre-specified large prime p, a pre-specified
primitive root (or generator) g of p, and a shared password
pw known only by A and B. It’s security is based on the
complexity of solving the discrete logarithm problem and
can be proved in a formal model even though the password
is chosen from a small range. It has the following steps:
1. User A first picks a random value x, then calcu-
lates gx (mod p) and Epw[gx (mod p)]. Note that
for the sake of representation convenience, we omit
“(mod p)” in the rest of the paper.
In this step, A sends his/her identity A and Epw[gx] to
B. The procedure can be abstracted as follows.
A → B : A,Epw[g
x]
2. B picks a random number y and calculates gy . B also
uses the shared password pw to decrypted Epw[gx]
to obtain the value gx, and calculates the secret key
sk′ = H(A‖B‖gx‖gy‖gxy). Finally, B transmits
Epw[g
y] and H(sk′‖1) to A. After A receives this
message, A also uses the share password pw to de-
crypt Epw[gy] to obtain the value gy , and calculates
the secret key sk′′ = H(A‖B‖gx‖gy‖gyx). Note that
the value gxy is equivalent to gyx, so sk′ = sk′′. A
ensures that B already knows the secret key by check-
ing H(sk′‖1) ?= H(sk′′‖1). The procedure can be
abstracted as follows.
A ← B : Epw[g
y],H(sk′‖1)
3. User A transmits H(sk′‖2) to B, and B ensures
that A already knows the session key by checking
H(sk′‖2)
?
= H(sk′′‖2). The procedure can be ab-
stracted as follows.
A → B : H(sk′‖2)
3 The Proposed Scheme
Observing that users in virtual environments usually
form a group to perform specific tasks, such as visiting a
shopping mall together or fighting monsters cooperatively
in an MMOG, we propose to take advantage of secure group
communication to further reduce the cost of 3D streaming
authentication. The basic idea is for members of a group,
encrypted by secret key ski. The procedure is abstracted as
follows.
leader → peeri : Eski [ci‖ti‖cti]
Note that cj , tj , ctj in the above abstraction stands for
the checksum of data piece Dj , the checksum of the time
stamp of cj , and the checksum of cj and tj according to
Table 1.
3.3 Verification Phase
In this phase, group members authenticate 3D stream-
ing data with the help of the leader. By peer-to-peer 3D
streaming techniques, such as FLoD [14,16], a group mem-
ber peeri can download 3D contents from any source in the
network. After downloading a data piece, peeri can verify
the authenticity and integrity by the checksum values sent
by the leader. The steps for the verification taken by peeri
are described below.
1. peeri receives the data piece Dj of 3D contents from
any other peer, the leader or the server, and receives
the authentication message form the leader.
2. peeri decrypts the authentication message sent by the
leader to obtain ci‖ti‖cti.
3. peeri first checks if the authentication message is le-
gitimate by comparing cti with the checksum of ci and
ti.
4. peeri checks whether the timestamp is obsolete or not
by the equation: current time − ti
?
< TH , where
TH is a pre-specified threshold of time.
5. peeri computes the checksum value c′i of the received
data piece Dj and perform the following checking:
c′j
?
= cj .
If the result of the checking is positive, then the data
piece Dj is authenticated.
4 Security Analysis
The security of the proposed group-based 3D streaming
authentication scheme is based on 1) the trust of the leader
and 2) the authenticity and integrity relay by encrypted
checksum values sent by the leader. Below, we perform
security analysis in these two aspects.
4.1 The Trust of the Leader
The group leader is designated to verify the authenticity
and the integrity of 3D contents and to relay the verification
to other group members. A totally trusted group leader is
ideal. However, motivations for the leader to cheat indeed
exist in spite that the leader was usually chosen with his/her
higher reputation than others. Fortunately, the proposed
scheme uses the leader’s public key to securely exchange
the secret key, so that a peer A can always identify another
peer B when B plays the role of the leader and cheats. To
detect cheating, we can designate more than one leaders to
separately relay authenticity and integrity to group mem-
bers. The cheating of an individual leader (or a minority of
leaders) can be detected unless a majority of group leaders
collude to cheat.
4.2 Authenticity and Integrity Relay
The group leader relays the authenticity and integrity of
3D contents to all other group members after 3D contents
are successfully verified. The authenticity and integrity of
3D contents can be confirmed by group members because it
is infeasible to modify 3D contents to match the encrypted
checksum without the knowledge of the secret key used to
encrypt the checksum. Moreover, the proposed scheme em-
beds timestamps in checksum authentication messages, so
a replayed checksum message will be discarded if the em-
bedded timestamp is obsolete. This can prevent adversaries
from disseminating outdated 3D contents to group mem-
bers. The relay process is therefore secure.
5 Evaluation
In this section, we evaluate the proposed scheme in terms
of 1) the computation cost saved, and 2) the rendering qual-
ity when imperceptible 3D mesh authentication scheme is
integrated with the proposed scheme. As we will show,
about 2/3 computation is saved and the rendering quality
is acceptable. Below we begin with evaluating the compu-
tation cost.
5.1 Computation Cost
In the proposed scheme, the group leader needs to ver-
ify the authenticity and integrity of 3D contents with a pre-
specified authentication mechanism, such as the hash chain-
based mechanism proposed in [11], while group members
only need to perform the verification with encrypted check-
sum values sent by the leader. Consequently, the group
members save a lot of computation, while the leader bears
heavier computation load. We assume that 1) the pre-
specified authentication mechanism is the hash chain-based
mechanism proposed in [11], and 2) the mechanism uses
SHA-1 hash function, and 3) the proposed scheme uses the
Adler32 checksum function and the AES/CTR 128-bit se-
cret key encryption/decryption function. In Figure 2, we
(a) (b)
(c) (d)
Figure 4. (a)Original base mesh (b)Original
complete mesh (c)Base mesh in which 12
floating point number LSBs carry authentica-
tion information (d)Complete mesh in which
4 floating point number LSBs carry authenti-
cation information
group member can authenticate 3D contents downloaded
from any source. Since checksum is cheap to compute,
much computation is saved. On problem of the proposed
scheme is that it requires every group member should estab-
lish a secret key shared with the leader, which incurs a lot
of computations and communications. Fortunately, users in
a virtual environment of a group usually establish such keys
when joining the group. So, there is no extra cost of estab-
lishing secret keys caused by the proposed scheme. Another
problem of the proposed scheme is that the leader bears a
heavier load than others. To remedy the problem, we can
allow multiple leaders to be elected so that a leader serves
only a limited amount of members.
We have evaluated the computation saving of the pro-
posed scheme for the case of progressive meshes using the
hash chain signature 3D streaming authentication scheme.
As we have shown, about 2/3 computation is saved for the
group member using the proposed scheme when data piece
is about 0.9MB. We have also evaluated the rendering qual-
ity when embedding hash chain signatures into the floating
point number least significant bits (LSBs) of the mesh data
to make the signatures imperceptible. As we have shown,
the rendering quality is acceptable.
References
[1] http://www.virtualenvironments.info/.
[2] http://secondlife.com/.
[3] http://www.cryptopp.com/benchmarks.html.
[4] A. S. 754-1985. Standard for binary floating point arith-
metic.
[5] M. Bellare, D. Pointcheval, and P. Rogaway. Authenticated
key exchange secure against dictionary attacks. Eurocrypt
2000 (LNCS 1807), pages 139–155, 2000.
[6] F. Bergadano, D. Cavagnino, and B. Crispo. Chained stream
authentication. In Proceedings of the 7th Annual Interna-
tional Workshop on Selected Areas in Cryptography, volume
2012 of Lecture Notes In Computer Science, pages 144–157.
Springer-Verlag, 2000.
[7] A. Bharambe et al. Donnybrook: Enabling large-scale, high-
speed, peer-to-peer games. In Proc. SIGCOMM, 2008.
[8] A. Bharambe, J. Pang, and S. Seshan. Colyseus: a dis-
tributed architecture for online multiplayer games. In Pro-
ceedings of the 3rd conference on 3rd Symposium on Net-
worked Systems Design & Implementation, volume 3, pages
12–12, San Jose, CA, 2006.
[9] J. Botev, A. Hohfeld, H. Schloss, I. Scholtes, P. Sturm,
and M. Esch. The hyperverse: concepts for a federated
and torrent-based ’3d web’. Int. J. Adv. Media Commun.,
2(4):331–350, 2008.
[10] R. Cavagna, C. Bouville, and J. Royan. P2p network for very
large virtual environment. In VRST ’06: Proceedings of the
ACM symposium on Virtual reality software and technology,
pages 269–276, New York, NY, USA, 2006. ACM.
[11] M.-C. Chan, S.-Y. Hu, and J.-R. Jiang. Secure peer-to-
peer 3d streaming. Multimedia Tools and Applications, May
2009.
[12] W. Cheng, W. T. Ooi, S. Mondet, R. Grigoras, and G. Morin.
An analytical model for progressive mesh streaming. In Pro-
ceeding of ACM Multimedia 2007, pages 737–746, Augs-
burg, Germany, 2007.
[13] H. Hoppe. Progressive meshes. In Proceedings of SIG-
GRAPH 1996, pages 99–108, New Orleans, LA, 1996.
[14] S.-Y. Hu. A case for 3d streaming on peer-to-peer networks.
In Web3D ’06: Proceedings of the eleventh international
conference on 3D web technology, pages 57–63, New York,
NY, USA, 2006. ACM.
[15] S.-Y. Hu, J.-F. Chen, and T.-H. Chen. Von: a scalable peer-
to-peer network for virtual environments. Network, IEEE,
20(4):22–31, July-Aug. 2006.
[16] S.-Y. Hu, T.-H. Huang, S.-C. Chang, W.-L. Sung, J.-R.
Jiang, and B.-Y. Chen. Flod: A framework for peer-to-peer
3d streaming. In INFOCOM 2008. The 27th Conference on
Computer Communications. IEEE, pages 1373–1381, April
2008.
[17] W.-L. Sung, S.-Y. Hu, and J.-R. Jiang. Selection strategies
for peer-to-peer 3d streaming. In NOSSDAV ’08: Proceed-
ings of the 18th International Workshop on Network and Op-
erating Systems Support for Digital Audio and Video, pages
15–20, New York, NY, USA, 2008. ACM.
[18] H. tain Wu and Y. ming Cheung. Publisc authentica-
tion of 3d mesh models. In Proceedings of the 2006
IEEE/WIC/ACM International Conference on Web Intelli-
gence, pages 940–948, 2006.
[19] H.-T. Wu and Y.-M. Cheung. A fragile watermarking
scheme for 3d meshes. In MM&Sec ’05: Proceedings of the
7th workshop on Multimedia and security, pages 117–124,
New York, NY, USA, 2005. ACM.
礎架構不僅能部屬階層式身份基礎加密、簽章、簽密 (signcryption) ，也能夠以
成對的 (pair-wise) 認證式金鑰協定 (authenticated key agreement) 來保護同儕網路
中的應用。還有一篇也頗為有趣的論文：” Design of P2Pnet: An Autonomous P2P 
Ad-Hoc Group Communication Systems”，描述如何在重大載難搜救隊、戰場軍事
行動行動學習群組的應用環境下，設計行動群組成員間的通訊及資訊請求功能。
該論文並介紹已設計出的雛型系統 -- Rescue Information System for Earthquake 
Disasters (RISED)，相當有趣。 
Optimal Path Planning for Fault-Tolerant and Energy-Efficient Target Surveillance 
in Wireless Sensor and Actor Networks 
 
Yung-Liang Lai2  Jehn-Ruey Jiang1 
National Central University1 
Nanya Institute of Technology2 
Jhongli, Taiwan 
yungliang.lai@acm.org   jrjiang@csie.ncu.edu.tw 
 
 
Abstract—The Wireless Sensor and Actor Network (WSAN) is 
an extension of the wireless sensor network (WSN). Besides 
resource-limited sensor nodes, WSANs have resource-rich 
nodes, called actors, of higher capabilities to perform powerful 
actions. In this paper, we focus on target surveillance systems 
built atop WSANs to monitor critical targets. Since sensor 
nodes are usually equipped with limited energy sources and 
are likely to be influenced by unpredictable failures occurring 
in the harsh sensor field, we need to seriously take fault-
tolerance and energy-efficiency into consideration. Hence, we 
develop an optimal path planning (OPP) scheme to construct a 
maximum number of node-disjoint paths to deliver targets’ 
event notification with minimum energy consumption. We also 
evaluate OPP performance by simulations and compare it with 
a related scheme to show its advantages. 
Keywords-wirless sensor and actor network; disjoint paths; 
maximum flow minimum cost 
I.  INTRODUCTION 
With technological advances, the emergence of Wireless 
Sensor and Actor Networks (WSANs) [1] has received much 
attention recently. The WSAN is capable of sensing, 
forwarding the sensed data, and performing reactions based 
on received data appropriately. The WSAN consists of 
sensor nodes and actor nodes. The sensor nodes usually have 
low costs, limited energy supply, and limited transmission 
range; they are responsible for detecting events or sensing 
environmental data. The actor nodes are resource-richer 
nodes with abundant energy sources, higher communication 
and computation capability, and the ability to perform 
powerful reactions. When a sensor node detects an event in 
its monitoring area, it will transmit the event to neighboring 
nodes, which in turn will forward the event one hop further. 
In this way, the event reaches the actors. Once an actor node 
receives the event, it will perform corresponding reactions 
appropriately. WSAN enables some realistic applications, 
such as target tracking, phenomenon monitoring, and attack 
detection [1]. 
With the capabilities of the WSAN, a target surveillance 
system can be built. Such a system is important for 
monitoring critical targets. For example, in the volcano 
surveillance scenario [12] as shown in Fig.1, sensor nodes 
nearing the crater are responsible for detecting eruption and 
transmitting eruption event packets, while other sensor nodes 
help forward the packets towards the actor nodes. On 
receiving event packets, the actor nodes relay them through 
satellite radio interface to the control center (i.e., the sink 
node) so that residents and rescuers can be notified 
immediately. 
In a target surveillance system, sensor nodes can be 
classified as two classes: nodes near the monitoring target 
are source nodes, and others are intermediate nodes. Source 
nodes are responsible for sending out event packets when 
detecting specific events of the target, while intermediate 
nodes are responsible for forwarding the packets towards the 
actor nodes. A target surveillance system needs to seriously 
consider fault-tolerance and energy-efficiency issues because 
sensor nodes are usually equipped with limited-capacity 
energy sources and are likely to be influenced by 
unpredictable failures occurring in the harsh sensor field. 
The system needs a routing protocol to deliver event packets 
from source nodes to actor nodes in a fault-tolerant and 
energy-efficient way. To the best of our knowledge, there is 
no such protocol proposed for WSANs. 
 In this paper, we propose an optimal path planning 
(OPP) scheme to construct disjoint event packet delivery 
paths with minimum energy consumption. OPP selects a path 
for each source node to deliver event packets to an actor 
node. The selected paths are node-disjoint and OPP is thus 
fault-tolerant in the sense that event packets can be received 
by an actor node even if node failures make some paths 
broken. Furthermore, OPP is energy-efficient in the sense 
that the path selection takes total energy consumption into 
account, and transmitting event packets through selected 
paths consumes the least amount of energy. We will analyze 
the time complexity of the proposed scheme and evaluate its 
effectiveness by simulation results. 
The rest of this paper is organized as follows. In section 
2, we introduce some related work. In section 3, we describe 
the network model and the problem to solve. In section 4, we 
propose the optimal path planning (OPP) scheme. In section 
5, we present the simulation results of the proposed scheme. 
And section 6 concludes the paper at last. 
2009 Tenth International Conference on Mobile Data Management: Systems, Services and Middleware
978-0-7695-3650-7/09 $25.00 © 2009 IEEE
DOI 10.1109/MDM.2009.93
531
Authorized licensed use limited to: National Central University. Downloaded on October 28, 2009 at 05:00 from IEEE Xplore.  Restrictions apply. 
 CTሺpሻ ൌ ∑ Cሺdistance of eሻୣאୣୢ୥ୣୱሺ୮ሻ  (1) 
where the cost function C(⋅) is as defined in Section III.A. 
 
To be more precise, the problem has two goals. The first 
goal is of higher priority and is to maximize the number of 
disjoint paths, i.e., 
Maximize |ሼPሽ|  (2) 
 
The second goal is to minimize the total energy consumption 
cost, i.e., 
Minimize ∑ CTሺpሻ୮אP   (3) 
where P is determined by (2). 
 
Fig.2 is a simple example to illustrate a WSAN for 
target surveillance. The network consists of 7 sensor 
nodes S1, …, S7, and 2 actor nodes, A1 and A2, where 
S1 and S2 are source nodes near the target. The 
directed edges (arcs) represent the reachable 
relationship, and each edge is associated with a cost of 
transmission energy consumption. 
 
 
Figure 2.  A simple illustration example of a WSAN for target 
surveillance. 
IV. THE PROPOSED SCHEME 
In this section, we present the Optimal Path Planning 
(OPP) scheme and analyze it time complexity. We first 
introduce the OPP scheme. 
A. Optimal Path Planning (OPP) Scheme 
In the OPP scheme, the initial deployment of sensors and 
actors is first obtained and transformed to be a cost-flow 
graph. Then, the flow planning algorithm (FPA) determines 
the flow plan in the graph. Finally, the flow plan is converted 
into a packet delivery path plan and forwarded to the sensors 
in the network. The OPP scheme is described as follows. 
 
Optimal Path Planning Scheme 
1. Each sensor somehow (e.g., by flooding) reports its status 
to a specific node called coordinator. The report contains 
node’s identity, reachable neighbors, and costs on edges to 
neighbors. The coordinator could be an actor selected among 
all actors or the sink node. 
 
2. The coordinator collects sensors’ reports. 
 
3. The coordinator converts the received report into the cost-
flow graph, notated by GCF. 
 
4. Determine the optimal flow plan in the cost-flow graph 
based on the Flow Planning Algorithm (FPA) described 
below. 
 
5. Coordinator converts the flow plan into data delivery path 
and then forward to the sensors. 
Given the network with source nodes, intermediate nodes, 
and actor nodes, the Flow Planning Algorithm (FPA) can 
find a flow plan such that the number of disjoint paths is 
maximized while the energy consumption cost is minimized. 
Its procedure is similar to that of the maximum flow 
minimum cost (Max-Flow Min-Cost) algorithm to determine 
the optimal flow plan in a given cost-flow graph. The FPA is 
described as follows. 
 
Flow Planning Algorithm
Input: a cost-flow graph GCF(V, E) 
Output: Max Flow Plan FP in GCF 
1.  Add a virtual source vertex Ns and a virtual target vertex 
Nt in GCF. 
 
2. Add edge <Ns, s> for each source node s, and assign the 
edge with the zero cost and one flow capacity. 
 
3. Add edge <a, Nt> for each actor node a, and assign the 
edge with zero cost and infinite flow capacity. 
 
4. Execute Node_Transformation( ) procedure for each 
intermediate node in GCF with multiple flow in and multiple 
flow out. 
 
5. Execute Max-Flow Min-Cost Algorithm for GCF to decide 
the Maximal Flow Minimum Cost Plan FP. 
Now, we start to explain the details of FPA steps. In step 
1, a virtual source vertex Ns and a virtual target vertex Nt are 
added in GCF. In step 2, an edge <Ns, s> is added from Ns to 
S1 
S2 
S4 
S5 
S6 
A1 
A2 
S7 
3 
2 
2 
4 
5
3 
1 
4 
1 
1 
S3 4 
Source Node    Sensor node    Actor Node
533
Authorized licensed use limited to: National Central University. Downloaded on October 28, 2009 at 05:00 from IEEE Xplore.  Restrictions apply. 
higher fault tolerant ability (i.e., more avai
SPS. 
Figure 5.  Evaluation of Fault Tolera
B. Evaluation of Energy Efficiency 
We evaluate the network lifetime of the 
compare the results with those of the SPS s
is one of the most important metrics in 
stands for the time span from the sensor dep
the time when the first sensor node runs ou
assume all sensor nodes have identical init
Joules). The energy consumption associated
depends on the transmission distance; it ran
Joules per transmission. In every second, e
injects one packet into the network. The pac
is determined by the OPP or SPS. T
transmitted to the actor nodes. Each transmi
the energy consumption from its remain
measure the network lifetime by recording t
first node runs out of energy. 
As the result shown in Fig. 6, OPP alm
lifetime of SPS. This is because OPP retu
paths and the packet forwarding load is d
among nodes. Therefore, even if SPS relie
path algorithm and has the minimum
consumption, OPP renders the system with
lifetime. 
Figure 6.  Evaluation of Energy Effici
0
1
2
3
4
5
6
7
8
9
10
4 5 6 7 8
#A
va
ila
bl
e 
Pa
th
s
# Node Failures
0
5
10
15
20
25
30
Li
fe
ti
m
e 
(s
ec
on
ds
)
OPP SPS
lable paths) than 
 
nce 
OPP scheme and 
cheme. Lifetime 
WSANs, which 
loyment time to 
t of energy. We 
ial energy (1000 
 with each edge 
ges from 3 to 40 
ach source node 
ket delivery path 
he packets are 
ssion will deduct 
ing energy. We 
he time when the 
ost doubles the 
rns node-disjoint 
istributed evenly 
s on the shortest 
 total energy 
 longer network 
 
ency 
VI. CONCLU
In this paper, we study how to m
system in a wireless sensor and acto
tolerant and energy-efficient. Bas
disjoint paths, we proposed an optim
scheme to construct maximum numb
from every source node to actor n
total energy consumption. The core 
planning algorithm (FPA), which
complexity. 
The topology control model of 
WSAN is Subset-to-Subset Mo
actor-node-set), which imposes new
design. Our study may provide a dif
communication (routing) protocol 
scheme is also flexible; we can 
functions to reflect requirements of 
the future, we plan to extend our sc
transmission under hard real-time co
REFERENCE
[1] I. F. Akyildiz, I. H. Kasimoglu, 
Networks: Research Challenges,” 
(Elsevier), Vol. 2, No. 4, pp. 351-367, 
[2] M. Bahramgiri, M.T. Hajiaghayi, V.S
3-Dimensional Distributed Topology C
Multi-hop Networks,” Proc. of IEE
Communications and Networks (ICCC
[3] M. Cardei, S. Yang, and J. Wu, “A
Topology in Heterogeneous Wirele
Transactions on Parallel and Distribute
[4] T. Cormen, C. Leiserson, R. Rivest, 
algorithms, MIT Press, 2001. 
[5] A. Frank and E. Tardos, “An Applic
Linear Algebra and its Applications, V
[6] A. V. Goldberg, “An efficient impleme
cost flow algorithm,” Journal of Algori
[7] R. Iyengar and B. Sikdar, “Scalabl
Positioning for Sensor Networks,” P
Communications, pp. 338-342, Anchor
[8] X. Jia, D. Kim, P. Wan, and C. Y
Connectivity in Wireless Ad H
INFOCOM’05, 2005. 
[9] T. Melodia, D. Pompili, V. C.
“Communication and Coordination in
Networks,” IEEE Transactions on Mob
pp. 1116-1129, October 2007. 
[10] A. Srinivas and E. Modiano, “Min
Routing in Wireless Ad-Hoc N
MobiCom’03, 2003. 
[11] F. Wang, M. T. Thai, Y. Li, X. Cheng,
Topology Control for All-to-One and 
Wireless Networks,” IEEE Transaction
no. 3, pp. 322-331, 2007. 
[12] G. Werner-Allen, K. Lorincz, M. Ru
Lees, and M. Welsh, “Deploying a w
active volcano,” Special Sensor N
Computing, 2006. 
 
9
OPP
SPS
SION 
ake a target surveillance 
r network (WSAN) fault-
ed on the concept of 
al path planning (OPP) 
er of node-disjoint paths 
odes with the minimum 
of our scheme is the flow 
 has polynomial time 
the target surveillance in 
del (source-node-set to 
 challenges in protocol 
ferent point of view for a 
designer. The proposed 
use different edge cost 
different applications. In 
heme to achieve reliable 
nstraints. 
S 
“Wireless Sensor and Actor 
Ad Hoc Networks Journal 
October 2004. 
. Mirrokni, “Fault-tolerant and 
ontrol Algorithms in Wireless 
E Int’l. Conf. on Computer 
N’02), 2002. 
lgorithms for Fault-Tolerant 
ss Sensor Networks,” IEEE 
d Systems, 2007. 
and C. Stein, Introduction to 
ation of Submodular Flows,” 
ol. 114-115, pp. 329-348,1989. 
ntation of a scaling minimum-
thms, 22, 1997. 
e and Distributed GPS Free 
roc. of IEEE Int’l Conf. on 
age, AK,May, 2003. 
i, “Power Assignment for k-
oc Networks,”  Proc. of 
 Gungor, I. F. Akyildiz, 
 Wireless Sensor and Actor 
ile Computing, Vol. 6, No. 10, 
imum Energy Disjoint Path 
etworks,” Proc. of ACM 
 and D.-Z. Du, “Fault Tolerant 
One-to-All Communication in 
 on Mobile Computing, vol. 7, 
iz, O. Marcillo, J. Johnson, J. 
ireless sensor network on an 
ets Issue of IEEE Internet 
535
Authorized licensed use limited to: National Central University. Downloaded on October 28, 2009 at 05:00 from IEEE Xplore.  Restrictions apply. 
 
一、出國經過 
 
因為 Topos計畫中需要 progressive 3d mesh streaming的技術需求，而這方面是
National University of Singapore (NUS)的 Pro. Ooi的專長，故被老師任命與學長
詹謨澤一起到新加坡找 Prof. Ooi做相關方面的研究。飛機從七月七號出發，搭
成的是新加坡航空，當天約四個小時就抵達 Changi Airport，並在那與 Prof. Ooi
碰頭，這中間四天的研究都住在 NUS的 Visitor’s lodge，也很感謝 Prof. Ooi的幫
忙。四天的研究與 Prof. Ooi和他的研究助理 Ransi，不僅研究 Progressive 3d Mesh 
Streaming的議題，也探討到 Group Authentication這個新方向。結束四天的學術
交流後，我們於七月十二日搭機返台。 
 
二、心得 
 
有別於信件的傳遞而達到討論研究，這次有機會與相同領域的國外學長面對面溝
通討論，使得許多問題都可以很清楚、很快速的或得解答，並在解答之後，可以
有新的問題、新的方向來討論，這是面對面溝通研究很有趣的地方。 
 
三、考察參觀活動 
 
因為只有四天的討論時間，所以大多可以參觀的時間只能拿來逛校園；新加坡是
個雙語國家，中英文都很溜，也因此校園內大多數人溝通的方式都是英文，許許
多多外籍學生也就不會像台灣的外籍學生那樣的寂寞了。而因為新加坡地小人稠，
在 NUS也一樣，建築物多且擁擠，不過環境非常幽美。另外，新加坡法律嚴厲，
故走在校園或機場，真的沒半點垃圾在地上。 
 
四、建議 
 
以往研究多半都是閱讀一堆相關的論文，之後與同儕間相互討論罷了。不過藉由
這次的機會，我能夠與國外的學長面對面討論，吸收他們的經驗和感想，這都是
相當難得的，這也讓我不禁想到，要有更多元化的思維，與世界上不同地方的人
互相交流似乎是不可缺少的一個重要關鍵。因此建議上當然是希望能有更多這樣
的機會提供給國內的學生或研究人員。 
 
五、攜回資料名稱及內容 
 
六、其他 
一、出國經過
由於 Topos 計畫需要，因此受指示前往 National University of Singapore (NUS)新加坡
國立大學與  Prof. Wei Tsang Ooi  討論有關於 3D Streaming (streaming of 3D 
progressive meshes, http://www.comp.nus.edu.sg/~chengwe2/3dstream.html ) 的研究
。七月七日從台灣出發，大約中午的班機，當天晚間到達樟宜機場，並與 Prof. Ooi 在機
場碰頭，Prof. Ooi 除了帶我們到 NUS 之外，也協助我們在 NUS 中找到校內 Visitor's 
lodge的住宿。接下來的時間 Prof. Ooi和他的研究助理 Ransi除了和我們研究計畫的相關
問題之外，也協助生活相關的問題。在 Topos計畫當中原本希望利用 progressive mesh及 
view-independent 的技術，但是後來我們討論出 group authentication 的新概念，使得
peer-to-peer的資料驗證能夠更節省網路總體的頻寬及計算的資源。我們回程搭的班機在
早上八點多要登記，因此七月十二日一早即到樟宜機場搭機返台。
二、心得
面對面的討論對於研究者而言，無非是能夠獲得更好的討論效率。在相互接觸的過程中，也
能夠吸取其他研究者在這個領域的經驗，這是很有意義的。除此之外，出國的經驗也是增廣
見聞的好方法之一。
三、考察參觀活動
除了討論Topos的研究內容之外，我們也籍著少數空檔的時間參觀 NUS校園。我們發現NUS
校園內車流量很大，隨時都有很多車，校園內隨時隨地好像都很多人的樣子，有些人或者是
在校園內的桌子使用電腦看文章，有些人或者是一群人在討論事情，Prof. Ooi 說這還是暑
假，如果是開學後，則會更多人。這好像和新加坡地小人多是有關的，他們的公車班次很
密，一般的學生也很習慣搭大眾交通工具。在新加坡人種組合比較複雜，各色的人種都有。
四、建議
我們能體會到合作的研究計畫，事實上能夠對研究人員帶來不同的經驗，不論是研究本身或
是生活及其它習慣，能夠見到別的實驗室的情況，看看別人和我們有什麼不一樣。因此建議
能夠鼓勵國內研究人才除了平日埋頭自身研究的同時，能夠有機會和世界上同樣也是做相關
研究的人交流。
五、攜回資料名稱及內容
六、其他
Group-Based Peer-to-Peer 3D Streaming Authentication
Mo-Che Chan Jehn-Ruey Jiang Chao-Wei Hung
Department of Computer Science and Information Engineering
National Central University, Taiwan, ROC
Wei Tsang Ooi
Department of Computer Science
National University of Singapore, Singapore
Abstract
In this paper, we present an authentication scheme for
group-based peer-to-peer 3D streaming that takes advan-
tage of secure group communication to reduce computation
overheads of authentication. Users of the same interest first
form a group, and one of the users is then elected to be the
trusted leader, who is to download 3D contents, to verify
their authenticity and integrity, and to send group members
a checksum value for each 3D content piece via group se-
cure channels. By the encrypted checksum values, a group
member can authenticate 3D contents downloaded from any
source. Since checksum is cheap to compute, much compu-
tation is saved. We have evaluated the computation saving
of the proposed scheme for the case of progressive meshes
based on the hash chain signature 3D streaming authentica-
tion scheme. We have also evaluated the rendering quality
when embedding hash chain signatures into the least sig-
nificant bits (LSBs) of the mesh data to make the signatures
imperceptible.
1. Introduction
3D streaming refers to the continuous and real-time de-
livery of 3D contents (e.g., meshes, textures, etc.) over net-
works to allow user interactions without a prior full down-
load. 3D streaming is applying to virtual environments
(VEs) [1], such as massively multiplayer online games
(MMOGs), because VE pre-installations via CD/DVD or
a prior download are unpractical, for the contents are large
and dynamic (e.g., Second Life [2] hosts 34 terabytes of
user-generated dynamic contents in 2007). Similar to au-
dio or video media streaming, 3D contents need to be frag-
mented into pieces at a server, before they can be transmit-
ted, reconstructed, and displayed at the clients. However,
unlike media streaming, because users accessing 3D con-
tents often have different visibility or interests, transmission
sequence in 3D streaming thus varies from user to user and
requires individualized visibility calculations.
Current 3D streaming schemes can be classified into four
main types: object streaming, scene streaming, visualiza-
tion streaming, and image-based streaming. In this pa-
per, we focus on scene streaming and object streaming to-
gether; when we mention 3D streaming in the following
context, we refer to object streaming and scene streaming.
A virtual environment scene usually involves a collection
of 3D objects placed arbitrarily in space that are streamed
to clients according to object visibility and/or user inter-
ests. As many more objects may exist than what a user
can see at a moment, scene streaming techniques in gen-
eral determine the object download priorities dynamically
and then download the objects for the user according to the
user’s ever-changing position and angle of view as well as
objects’ importance. Object streaming techniques, such as
progressive mesh streaming [13], can then be used to help
download objects progressively. For example, in progres-
sive mesh streaming, objects are represented as progressive
meshes, in which a base mesh, the lowest level-of-detail ver-
sion of the mesh, can first be sent to a user, and then a series
of refinements, called vertex splits, can be delivered to im-
prove the level-of-detail of the mesh. In this way, a user can
quickly view a coarse version of the mesh, trading off be-
tween waiting time and mesh quality. Further, a user may
stop the transmission if it looses interest in the mesh or finds
the quality of the intermediate mesh good enough.
3D streaming can be based on the client-server model, as
used in Second Life [2]. This model is easy to design; how-
ever, it is hard to scale due to prohibitively vast amount of
server-side bandwidth required for a massive audience. On
the other hand, 3D streaming can be based on the peer-to-
peer (P2P) model, as used in FLoD [14, 16]. In this model,
Table 1. Notations
peeri the peer/member i
PKi the peeri’s public key
H(x) hash operator with input message x
Esk[x] message encrypting x by symmetric key sk
{x}PK message encrypting x by asymmetric key PK
x‖y concatenation of the messages x and y
cj checksum of 3D data piece Dj
tj timestamp of cj
ctj checksum of cj and tj
A → B : x peer A sends message x to peer B.
x
?
= y to check if value x is equal to value y
x
?
< y to check if value x is small than value y
may be slow, a follow-up work of FLoD [17] adopts an al-
ternative strategy where peers would actively push content
availability to their AOI neighbors to reduce time for state
exchange. Additional AOI neighbors are also maintained to
increase the potential pool of source peers who could pro-
vide contents.
Royan et al. propose another design for P2P 3D stream-
ing, where a level of detail description tree (LODDT) [10]
organizes 3D buildings from a large city model into a hi-
erarchical tree structure. A user can discover visible ob-
jects quickly using the tree structure and determine the pri-
ority of object requests. For source discovery, a P2P VE
overlay is also assumed to provide AOI neighbors as po-
tential sources. Clients exchange their network conditions
privately and would request from each other based on es-
timates on both content availability and bandwidth load-
ing. In the HyperVerse design [9], a collection of back-
bone servers keep the lists of objects and AOI neighbors,
so clients are notified directly by the servers for both object
and source discoveries. Once the AOI neighbors are known,
the clients also exchange availability states and request 3D
objects among themselves to offload 3D content delivery
from the servers.
2.2 Authenticated 3D Streaming
Authenticity of progressive mesh streaming can be con-
firmed if a digital signature is generated for each piece of
3D streaming data. However, to generate digital signature
for each piece is not practical because public key cryptosys-
tem consumes a lot of computation power. Some efficient
stream signing mechanisms [6, 11] are proposed to avoid
generating digital signature for each piece. Below in this
subsection, we introduce a protocol proposed in [11] using
hash chains to achieve very low computation cost.
A 3D object, consisting of both mesh and texture data,
can be treated logically as a base piece plus many refine-
ment pieces [16], where each refinement piece depends on
the previous piece. When a 3D object owner publishes 3D
data, he/she first divides the data into D0,D1,D2, . . . ,Dn,
where D0 is the base piece and D1,D2,D3, . . . ,Dn is re-
finement pieces. The owner then computes, according to the
production rules in Figure 1, a hash chain D0, . . . , Dn out
of those pieces and only signs D0. The owner then dissemi-
nates the digital signature ∆D, the metadata meta (e.g., the
object’s ID, owner, size, number of pieces, etc.) of the ob-
ject, and D0, D0, D1, D1, ... as a data stream. Note that in
order to verify the i-th piece Di, the hash value Di is sent
before Di. This is because Di+1 is required when verifying
Di, as shown below.
Dn = H(Dn)
Dn−1 = H(Dn−1‖Dn)
Dn−2 = H(Dn−2‖Dn−1)
. . . = . . .
D1 = H(D1‖D2)
D0 = H(meta‖D0‖D1)
∆D = Signsk(D0)
Figure 1. Production rules for hash chain-
based 3D streaming authentication
The authenticity and integrity of 3D contents can be
progressively verified by the receiver receiving the stream
∆D, meta, D0, D0, D1, D1, .... The receiver can first
verify the main signature ∆D(= Signsk(D0)) by the
owner’s public key. The base piece D0 is verified if D0 =
H(meta|D0|D1), and the first refinement piece D1 is veri-
fied if D1 = H(D1|D2). Likewise, the receiver can verify
all subsequent pieces with just one hash operator. To sum
up, this protocol allows a receiver to efficiently verify a se-
quence of 3D contents. Note that the protocol has the prop-
erty of public authentication, since it utilizes the owner’s
public key, which is publicly accessible, as the basis of au-
thenticating pieces.
2.3 Progressive Meshes
Progressive mesh, proposed by Hoppe in 1996, is one
of the well-known techniques for representing level of de-
tails for a 3D mesh at fine granularity [13]. Given a non-
progressive 3D mesh, the technique derives a coarser ver-
sion of the mesh with fewer vertices by repeatedly merging
two adjacent vertices. This operation is called edge col-
lapse. Typically the operation is performed in a sequence
formed by social network facilities or MMOG team for-
mation tools, to elect a leader according to the reputation,
computing power or connection stability of members. The
leader will verify the authenticity and integrity for 3D con-
tents of interest by a public authentication mechanism, such
as the hash chain-based scheme proposed in [11], and will
then relay the authenticity by encrypted checksum values
to all members of this group via secure group communica-
tions. We also suggest embedding the authentication infor-
mation into the LSB of floating point numbers representing
3D contents to make the authentication information imper-
ceptible.
In this section, we show a scheme achieving group-based
P2P 3D streaming authentication for the case of progres-
sive meshes. The scheme has three phases: 1) secure chan-
nel initialization, 2) authenticity and integrity relay, and 3)
verification. We describe the details of every phase in the
following subsections.
3.1 Secure Channel Initialization Phase
In the first phase, group members elect a leader, and then
each member establishes a secure channel with the leader
by a secret key exchange mechanism similar to Bellare et
al.’s [5]. Besides, a padding value (PV) is exchanged after
the secure channel is established. The padding value PV
is used to pad on 3D contents before contents checksum is
calculated. This phase has the following steps for initializ-
ing the secure channel and exchanging PV. We assume all
users have verified/trusted others’ public keys before con-
tinuing the steps below. Note that the public key infrastruc-
ture (PKI) can meet this requirement.
1. Let P = {peer1, peer2, peer3, ..., peern} be a group
of members (peers). Firstly, peers in P elect a leader,
denoted by leader, where leader ∈ P .
2. Every peer picks an individual random number. Sup-
pose leader picks xi and peeri picks yi. Then leader
computes gxi and peeri computes gyi , where p is a
sufficient large prime and g is p’s generator.
3. leader sends {gxi}PKi to peeri, where gxi is en-
crypted by peeri’s public key. The procedure can be
abstracted as follows.
leader → peeri : {g
xi}PKi , where peeri ∈
P\{leader}.
4. peeri sends gyi and H(gxiyi‖1) to leader, where gyi
and H(gxiyi‖1) are encrypted by leader’s public key.
The procedure can be described as follows.
leader ← peeri : {g
yi}PKleader , H(g
xiyi‖1)
5. leader decrypts the received message in the previous
step to get gyi and H(gxiyi‖1). Then leader computes
gyixi and the hash value of (gyixi‖1) (note that the
value gxiyi is equivalent to gyixi). leader accepts the
message if the hash value matches with H(gyixi‖1);
otherwise leader rejects it. Likewise, peeri also does
the same match checking.
6. Now, leader and peeri share a pairwise secret key
ski computed by ski = H(gxiyi‖2). leader chooses
a random padding value PVi, encrypts PVi and its
checksum by ski and transmits the encrypted PVi and
checksum to peeri. The procedure is abstracted as fol-
lows.
leader → peeri : Eski [PVi‖checksum of PVi]
7. peeri decrypts the received message to get PVi and
its checksum, and then checks the legitimation of PVi.
peeri accepts the secret key ski if PVi is legitimate;
otherwise, peeri rejects the secret key and leader and
peeri should go through all steps in the first phase.
(However, we omit the star-over process in this paper
to save space.)
3.2 Authenticity and Integrity Relay
Phase
In this phase, the leader performs 3D streaming authen-
tication and relays the authenticity and integrity of 3D con-
tents. We assume the leader has the ability to quickly down-
load the 3D contents of interest and verify the authenticity
and integrity of the contents by a pre-specified mechanism,
such as hash-chain signature scheme proposed in [11]. The
leader computes checksum values for each piece of 3D con-
tent, and then sends checksum values to every group mem-
ber. In order to prevent an insider from forging 3D contents
and their corresponding fake checksum values to cheat nor-
mal group members, a padding value PVi for peeri is added
to each piece of 3D contents before calculating the check-
sum values. Moreover, a timestamp is also delivered along
with checksum values to make the scheme more secure.
Many methods can be used for calculating the checksum
value of a piece of data. Among them, the cyclic redun-
dancy check (CRC) is the most well known method. How-
ever, CRC uses the division operation, so its computation
cost is not as low as one may expect, especially when the
chosen divisor is large. Actually, the computation cost of
CRC is as high as the MD5 hash function when the divisor
is longer than 32 bits according to a report in [3]. So, pick-
ing a fast checksum algorithm, such as Adler 32, is essential
for our proposed scheme.
To sum up, the leader verifies the authenticity and in-
tegrity of the received 3D contents, computes for each
peeri the checksum of each piece of contents by adding the
padding value PVi, and then sends each peeri the checksum
 0
 0.01
 0.02
 0.03
 0.04
 0.05
 0.06
 0  0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9
CP
U 
tim
e 
(se
co
nd
)
piece size (MB)
hash chain
proposed
Figure 2. The CPU time consumption of the
hash chain-based and the proposed authen-
tication schemes
plot, according to benchmarks reported in [3], the CPU con-
sumption time of a group member for the hash chain-based
authentication scheme and the proposed scheme under dif-
ferent data piece data sizes. We can easily observe that
the proposed scheme consumes less computation time than
its counterpart and the superiority is more significant when
the data piece size is larger. When data piece size is about
0.9MB, about 2/3 computation is saved.
On the other hand, the leader has heavier computation
load since it needs to calculate the checksum value of each
data piece separately for each individual group member.
Furthermore, the leader should encrypt the checksum val-
ues by a secret key separately for every group member be-
fore sending them to the member. The computation load of
the leader thus increases with the number of group mem-
bers. Fortunately, the checksum and the secret-key encryp-
tion do not cause too much computation and the number of
group members is usually not too large. Note that when a
group has too many members, we can demand the members
to elect more leaders so that each leader will serve only a
small number of members. Figure 3 plots the relationship
between the group size and the leader’s CPU consumption.
5.2 Rendering Quality for Imperceptible
Authentication
As mentioned in Section 3, authentication information
is suggested to be embedded into the LSB of floating point
numbers representing progressive meshes to make the in-
formation imperceptible. In this section, we evaluate the
rendering quality for such information embedding when the
hash-chained based authentication scheme proposed in [11]
is adopted to authenticate progressive meshes. Figure 4(a)
 5
 10
 15
 20
 25
 30
 35
 40
 45
 5  10  15  20  25  30  35
CP
U 
tim
e 
(0.
00
00
01
 se
co
nd
)
number of members
CPU consumption
Figure 3. Relationship between the number
of group members and the leader’s CPU time
consumption
and Figure 4(b) show the rendering of the base mesh and
the full mesh of a horse model represented by progressive
meshes. Since a typical digital signature is about the size
from 1024 to 2048 bits and the base mesh has 60 vertices
in the horse model, each floating point number has to carry
12 bits of a 2048-bit digital signature. Figure 4(c) shows
the base mesh of which every floating point number car-
ries 12 bits of the digital signature. We can see that distor-
tion exists between Figure 4(a) and Figure 4(c). However,
the result is acceptable since the base mesh is just used to
roughly show the simplified shape of the 3D model. On the
other hand, since a SHA-1 hash value occupies 160 bits and
every vertex split has about 15 vertices in the horse model,
each floating point number has to carry 4 bits of the hash
value. Figure 4(d) shows the rendering of the horse model
with the complete mesh embedded with hash values. We
can see that there is almost no difference between Figure
4(d) and Figure 4(d). This result indicates that the render-
ing quality of imperceptible hash chain-based 3D streaming
authentication scheme is acceptable for the case of progres-
sive meshes.
6 Conclusion
We have presented an authentication scheme for group-
based peer-to-peer 3D streaming using secure group com-
munication to reduce CPU time consumption. The group
leader is assumed to be trusted and is designated to ver-
ify 3D contents’ authenticity and integrity with a public au-
thentication mechanism, and to send group members a en-
crypted checksum value for every content piece via group
secure channels. By the encrypted checksum values, a
