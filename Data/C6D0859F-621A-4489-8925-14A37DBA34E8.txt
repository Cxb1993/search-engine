行政院國家科學委員會補助專題研究計畫 
 成 果 報 告   
□ 期中進度報告 
 
多核心嵌入式軟體設計之設計樣式支援系統 
 
計畫類別：□ 個別型計畫   整合型計畫 
計畫編號：NSC99-2220-E-035-001 
執行期間： 99 年 8 月 1 日至 100 年 7 月 31 日 
 
計畫主持人： 薛念林 教授 
共同主持人： 
計畫參與人員：朱鵬化、李建慶、蘇奕軒 
 
 
成果報告類型(依經費核定清單規定繳交)：精簡報告  □完整報告 
 
本成果報告包括以下應繳交之附件： 
□赴國外出差或研習心得報告一份 
□赴大陸地區出差或研習心得報告一份 
□出席國際學術會議心得報告及發表之論文各一份 
□國際合作研究計畫國外研究報告書一份 
 
 
處理方式：除產學合作研究計畫、提升產業技術及人才培育研究計畫、列
管計畫及下列情形者外，得立即公開查詢 
          □涉及專利或其他智慧財產權，□一年二年後可公開查詢 
          
執行單位：逢甲大學資訊工程學系軟體工程實驗室 
中   華   民   國  100 年  10  月  18  日
 2 
1. 中文摘要 
近年來，隨著軟體系統的大量應用，使用者對於設備的效能也有越來越高的
需求。因此，各種系統設備也從傳統的單核心處理器架構發展成多核心的處理器
架構。而多核心與單核心處理器最大的不同，就是強化了系統平行處理的能力，
所以開發多核心軟體不但需要系統底層函式庫的支援，更重要的是在設計階段就
要導入平行處理的概念。然而，對於熟悉傳統循序式設計的軟體開發人員而言，
實現平行運算的技術將會遭遇到許多的困難。 
此外，如何同時確保多核心軟體的品質也將會是一大挑戰。因此，我們提出
一個模型驅動及樣式支援的方法來解決設計多核心軟體的問題。首先，利用模型
驅動的技術來加速多核心軟體的開發，而一個模型驅動的架構必須包含模型的規
格化、不同設計階段之間的轉換規則以及模型的限制規則等元素。接著，除了加
速開發之外，我們還結合了樣式支援的方法來增加多核心軟體的設計品質，在樣
式支援的部分分別提供了從未套用樣式的設計轉換到套用樣式的設計；以及直接
引用設計樣板兩種方式。最後，我們設計了一個多核心軟體的設計支援工具來提
供無縫的開發環境，並且可以驗證本研究方法的可行性。 
關鍵詞: 設計樣式、模型驅動架構、多核心軟體設計。 
2. 英文摘要 
In recent year, the need of greater efficient equipment is getting increasing. For 
this reason, different kinds of system equipment have developed from traditional 
single-core processor architectures into multi-core ones. The significant difference 
between single-core and multi-core processor is that the later strengthen the capacity 
for parallel processing system. Therefore, to develop multi-core software not only 
demand for the supporting low level system libraries, the most important things is to 
embed the concept of paralleled processing in during the design phase. However, 
developing parallel programs is still difficult for most engineers to the traditional 
sequential design will encounter many problems. 
In addition, how to develop a multi-core system will high quality also becomes a 
challenge. Thus, we proposed a model-driven and pattern-support approach to address 
the problem when designing a multi-core system. First, we use model-driven 
technology to accelerate the development of multi-core software. A model-driven 
framework consists of the modules of pattern specification, design transformation and 
model constraints. We also combine the pattern support methods to increase the 
quality of multi-core software design. In this pattern support methods, we can: design 
a better system by design transformation, or apply a design pattern in an initial design. 
In this research, we also develop a multi-core software design support tools to support 
our proposed methodology. 
Keywords: Design Pattern, Model Driven Architecture, Multi-core Software Design 
 
 4 
式。設計樣式是一種被分析並且歸類的設計框架，用以解決軟體設計的特定問
題。在過去多核心軟體的開發往往都要從程式碼階層開始，這種開發方式造成開
發者的視野被侷限於程式碼的邏輯上，無法綜觀整個多核心軟體設計的全局。近
年來，有多位學者提出模型驅動架構（Model-Driven Architecture）的概念，其目
的是為了使軟體的實作更趨近於軟體的設計以便於開發及維護，利用自動或半自
動的轉換方式從高階的設計塑模產生不同階段的設計乃至於程式碼[14-16]。藉由
模型驅動的優點，我們希望能夠加速多核心軟體的開發，並且經過套用樣式來提
升多核心軟體的品質。另外，在過去多核心軟體開發的討論較多集中於函式庫所
提供的 API，如何將多核心軟體相關的 API 提升至設計階層，並歸納出一些可
供套用的設計樣式也是本研究想要解決的問題之一。 
 
5. 研究方法 
在這個章節中，我們將會解釋本研究的主要方法。首先，利用模型驅動的技
術來加速多核心軟體的開發，而一個模型驅動的架構必須包含模型的規格化、不
同設計階段之間的轉換規則以及模型的限制規則等元素。除了加速開發之外，我
們還結合了樣式支援的方法來增加多核心軟體的設計品質，在樣式支援的部分分
別提供了從未套用樣式的設計轉換到套用樣式的設計；以及直接引用設計樣板兩
種方式。 
5.1. 規格設計 
如圖 1 所示，本研究希望能夠協助多核心軟體開發者從初始設計（Raw 
Design）套用樣式，使塑模成為進階設計（Enhanced Design），接著藉由模型轉
換產生平台規格化設計（PSM Design），並利用多核心的平行觀察框架延伸設計
系統，使得開發出來的系統能夠更容易被監控其平行化的效率。 
樣式（Pattern）規格設計 
如圖 2 所示，從結構面來看一個樣式規格包含了三個元素，分別是： 
 
圖 1 研究方法的應用流程 
 6 
(Tagged Value)，並且針對每個角色之間的關係建構出刻板與刻板之間的
關聯 (Relationship)。超模型將會與限制一同被包裝在 UML Profile 中。 
 樣板限制 (Template Constraint)：樣板限制用來表示樣式中角色的屬性
及角色之間的關係限制，在實作上我們使用物件規範語言來限制超模型
中刻板的標籤值以及刻板之間的關係，當模型在模型階層應用了刻板之
後便隱含了在超模型中所訂定的樣板限制。 
 模型 (Model)：在樣板的模型階層中，模型所代表的是超模型的實例 
(Instance)，也就是在軟體設計階段中會被應用的階層，樣板的模型將會
屬於軟體設計的一部份。 
樣板的規格化步驟分別是： 
1. 定義超模型：識別樣板模型結構並為樣式角色定義刻板及標籤值。 
2. 定義驗證規則：根據樣板限制描述樣式驗證規則。 
3. 應用樣板刻板：根據樣板結構定義設計模型並應用刻板及標籤值。 
我們將會在後面的 5.4 節以一個 TBB 管線樣式範例來解釋樣板規格化的流程。 
5.2. 樣式套用方法 
套用樣式的方法分為兩種，分別是樣式模型轉換以及引用設計樣板，以下將
對這兩種套用方式及使用時機做更進一步的說明。 
 
樣式模型轉換 
樣式模型轉換是將一個樣式區分為來源設計以及目標設計兩個階段，即是圖 3
中的 Source 與 Target 兩個部分，這兩個設計階段分別使用超模型描述其擁有的
角色與結構，並且由一個轉換規格 (Transformation Specification)來定義其轉換的
規則。樣式模型轉換可以應用在 PIM 轉換到 PSM；以及初始設計轉換到進階設
計這兩種不同的來源與目標。 
 
引用設計樣板 
引用設計樣板是為了補足樣式模型轉換的使用限制，當樣式沒有一個明確的初始
設計時，我們可以根據樣式的規格定義產生出一個基礎的設計樣板供使用者套
用。設計樣板是一個模型層的設計模型，而該模型會套用超模型層的樣式規範，
 
圖 3 樣式模型轉換方法 
 8 
處理橘色色塊的工作內容。而由於 FilterB 是平行的篩選器，所以在 Time3 的時
候，橘色色塊比紅色色塊提早進入 FilterC 是有可能的。一個線性的篩選器必須
依照工作內容進入的先後順序來處理工作內容，而一個平行的篩選器則可以平行
處理所有進入的工作內容。 
5.4.1. 樣式與樣板規格化 
樣式規格化 
步驟 1：定義超模型 
圖 7 描繪了一個 TBB 管線樣式平台獨立設計的超模型，由於 TBB 管線樣式平
台獨立設計主要是由 Client 及 Delegate 等類別所組成，所以其超模型將會包含
Client 及 Delegate 等角色，其中 Client 的 Operation 會將工作委派給 Delegate 的
SubOperation 去執行，類似管線中不同的工作階段。而表 1 則表示了這個超模型
的參與角色以及擴展了那些 UML 超模型。 
圖 8 則描繪了一個 TBB 管線樣式平台規格化設計的超模型，而表 2 表示了
這個超模型的參與角色以及擴展了那些 UML 超模型。我們可以看到 TBB 管線
樣式平台規格化設計主要由 Client、tbb:pipeline 及 tbb:filter 等類別所組成。值得
一提的是在 TBB 管線中，呼叫 run 函式必須傳入一個 max_number_of_live_tokens
的整數參數，用以限制所有工作階段中能夠處理的工作內容總和，因此，在 run
這個刻板中將會有一個標籤值來表示這個參數。另外，每個 filter 刻板也會有一
個 order 的標籤值來識別工作階段的先後順序。 
 
圖 6 管線運作示意圖 
 
圖 7 TBB 管線樣式平台獨立設計的超模型（TBB-Pipeline PIM meta-model） 
 10 
2. 在一個 TBB 管線中，工作內容的總數必須大於等於工作階段的數量。 
3. 工作內容的順序編號不能重複。 
對應以上三條規則，圖 10 使用 OCL 語法來描述 TBB 管線樣式平台規格化設計
表 2 TBB 管線樣式平台規格化設計的參與者資訊 
UML meta-model Stereotype Tagged-value Description 
Class client  管線樣式中的使用者端。 
tbb::pipeline  定義 TBB 管線的角色。 
tbb::filter  定義 TBB 工作階段的角色。 
ConcreteFilter filter_order: int 
filter_mode: 
mode 
定義具體工作階段的角色，其中
filter_order 定義了該工作階段的運作
順序，而 filter_mode 則定義了該工作階
段的運作模式是平行或是線性的。 
Generalization ConcreteFilter
ExtendFilter 
 具體工作階段繼承 TBB 工作階段的一
般化關係。 
Association InstantiateFilt
er 
 由 TBB管線使用到 TBB工作階段的關
係。 
Operation run max_number_of
_live_tokens: int 
TBB 管線執行管線任務的操作，其中
max_number_of_live_tokens定義了所有
工作階段中能容納的工作內容總和。 
clear  TBB 管線清除所有管線任務的操作。 
add_filter  TBB 管線加入新的管線任務的操作 
FilterConstruc
tor 
 工作階段的建構子操作。 
operator  工作階段所執行的工作內容操作。 
 
表 3 TBB 管線樣式角色對應關係 
 來源模型參與者 標籤值 目標模型參與者 標籤值 
參
與
者 
client  client  
tbb:pipeline  
 add_filter  
 run max_number_of_live_tokens: int 
 clear  
tbb:filter  
serialDelegate order: int ConcreteFilter filter_order: int 
filter_mode: mode (=serial_in_order) 
parallelDelegate order: int ConcreteFilter filter_order: int 
filter_mode: mode (=parallel) 
 
 12 
5.4.2. 樣式與樣板套用 
樣式模型轉換方法 
圖 12 描繪了套用 TBB 管線樣式平台獨立設計的模型結構範例，經由執行樣式
模型轉換後將會產生錯誤! 找不到參照來源。所描繪的模型結構。如果來源模型
越複雜則越能夠顯現出樣式模型轉換的優點，因為有越多的來源參與者實體則能
夠轉換出相對應數量的目標參與者實體。 
 
引用設計樣板方法 
如果開發者沒有來源模型可供轉換，將可以直接引用圖 11 所表示的模型結構至
設計之中，不過引用設計樣板僅能提供該樣式最基礎的模型結構。 
 
 
圖 11 套用 TBB 管線樣式平台規格化設計的模型 (TBB-Pipeline PSM model) 
 
圖 12 TBB 管線樣式轉換前的模型範例 
 14 
平行化的程式碼，自動透過編譯器來進行平行化的處理，由於不需要開發者參與
其中，所以能夠減少人為的錯誤，不過相對來說，其彈性也會大大的減少。我們
以表 4 來呈現相關研究與我們的方法之間的異同。 
 
表 4 相關研究方法比較 
 Judson 等
人[1] 
Dong 等 人
[2]  
Torres 等
人[3] 
Zhang 等人
[11] 
Bridges 等 人
[17] 
本研究 
模型轉
換技術 
None XSLT ATL None None ATL 
設計樣
式的規
格化 
Meta-mo
del 
Model None None None Meta-model 
驗證技
術 
None None OCL None None OCL 
多核心
支援 
None None None 
Markup 
Language 
Automatic 
Parallelization 
MDA and 
Pattern-based 
工具支
援 
None Homemade 
Eclipse 
plug-in 
ThreadXML 
Compiler 
Compiler 
Eclipse 
plug-in 
 
 16 
(perspective)設定，供不同使用者調整設定其最適合的介面，所以我們實作這個
觀點設定，使整個開發流程能夠無縫的銜接在一起。圖 16 描述了如何定義一個
觀點： 
 extension point：定義出接下來的描述是屬於哪一個 Eclipse 擴充點 
(Extension point) ， 在 這 個 例 子 裡 我 們 擴 充 的 是
org.eclipse.ui.perspectives。 
 perspective：在 perspective 裡面有三個必要屬性及一個選擇屬性，分別
是： 
 class：定義這個 perspective 是由哪一個 Java 類別所處理，這個類別的
工作包含決定該 perspective 必須載入哪些視圖 (View)以及視圖的大小
與位置等。 
 icon：這是一個選擇性的屬性，用來指定該觀點的圖標。 
 id：這邊定義的是這個 perspective 的識別字串，用來幫助 Eclipse
識別不同的 perspective。 
 name：這個屬性用來決定 perspective 顯示在選單上的名稱。 
7.2. 設計支援展示 
在本系統中，我們提供了一個無縫的環境來支援多核心軟體的設計，藉由套用樣
 
圖 15 多核心軟體設計支援系統運作流程圖 
 
圖 16 plugin.xml 觀點定義 
 18 
(pseudo code)或程式碼。 
根據本研究所提出的方法論，我們所設計的樣式規格化的方法將樣式抽象化
到超模型階層，並且以 UML Profile 標準和 ATL 轉換語法表示。UML Profile 中
針對不同的樣式角色定義刻板以及標籤值，接著以 OCL 語法限制各個元素之間
的關係，用以驗證樣式在被應用之後是否仍然保持原本的結構及功能。如此將樣
式封裝成規格化的設計，不但可以提升樣式的可重用性，更能夠使這個方法容易
被擴充，對使用者而言，套用樣式將會變得快速且直覺。 
 
7.3. 結論 
在本研究中介紹了一個模型驅動及樣式支援的方法用以幫助多核心軟體設
計，我們對樣式進行抽象化，藉由以樣式為基礎的轉換方法，讓開發者達成快速
開發的目的。藉由此方法減低人為錯誤的引發機會又可讓設計維持一定的品質。
而這些抽象化後的樣式資訊與轉換規格儲存在樣式儲存庫後，在之後的開發專案
中可被重複使用，可重用性大幅提昇。 
在支援系統實作的部分，我們提供了一個無縫的設計環境來支援多核心軟體
的開發，透過本系統可以降低開發人員設計多核心軟體的門檻，並且增加應用樣
式的機會以提升軟體的品質。我們同時也說明了樣式的規格化流程，以增加日後
系統的可擴充性，本研究也設計了多個多核心相關樣式供開發人員使用，藉由超
模型層級定義轉換規則並進行自動化的轉換或是直接引用設計樣板的方式，使得
這些規則可以不斷的被重複使用。 
 
圖 19 操作定義視窗 
 20 
the 21st ACM SIGPLAN symposium on Object-oriented programming systems, 
languages, and applications. 2006. Portland, Oregon, USA: ACM. 
16. Sendall, S. and W. Kozaczynski, Model transformation: the heart and soul of 
model-driven software development. Software, IEEE, 2003. 20(5): p. 42-45. 
17. Bridges, M.J., et al. Revisiting the Sequential Programming Model for 
Multi-Core. in Microarchitecture, 2007. MICRO 2007. 40th Annual 
IEEE/ACM International Symposium on. 2007. 
18. Mikkonen, T., Formalizing design patterns, in Proceedings of the 20th 
international conference on Software engineering1998, IEEE Computer 
Society: Kyoto, Japan. p. 115-124. 
19. Lano, K., J. Bicarregui, and S. Goldsack. Formalising design patterns. in First 
BCS-FACS Northern Formal Methods Workshop, Electronic Workshops in 
Computer Science. 1996. 
 
 
 
表 Y04 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告  
                                                          2011 年 7 月 26 日 
報告人姓名  
薛念林 
 
服務機構 
及職稱 
 
逢甲大學資訊工程系副教授 
 
     時間 
會議 
     地點 
2011/7/18-201
1/7/21 
德國，慕尼黑 
本會核定 
補助文號 
NSC 99-2220-E-035-001 
多核心嵌入式軟體之模型驅動整合開發環
境-VMC－子計畫三:多核心嵌入       
式系統之設計支援系統(2/2) 
會議 
名稱 
(英文) 35th Computer Software and Application Conference; 5th IEEE 
International Workshop on Quality Oriented Reuse of Software 
(中文) 第 35 屆電腦軟體與應用研討會; 第五屆品質導向軟體重用研討會 
發表 
論文 
題目 
(英文) An Approach for Evaluating the Effectiveness of Design Patterns in 
Software Evolution 
(中文) 一個評估設計樣式在軟體演進中有效性之方法 
 
一、參加會議經過 
 
這次同行的有本人所指導的博士生丁德宏，東海大學朱正忠教授與修平科技大學張志宏教
授 。此行除了發表論文以外，另一個重要的任務是討論 COMPSAC 在台灣舉辦的可行性。 
 
本次研討會由 COMPSAC (The 35th IEEE signature conference on Computer Software and 
Applications) 與 SAINT (The 11th IEEE/IPSJ International Symposium on Applications and the 
Internet)合辦，COMPSAC 是國際間學術界、工業界、管理決策者探討計算機軟體和應用程序
主要的論壇，第一次是 1977 年在芝加哥舉行的，迄今以有 35 年的歷史，一直是學術界、工
業界和政府討論的各大論壇中最先進的研討會，內容包括主題演講、研究論文、工業案例分
析和小組討論。 
 
我們搭乘 7/17 由台北出發，經過曼谷到慕尼黑，到達後便搭地鐵前往旅館 Holiday Inn。抵達
的時間已經是當地時間晚上九點左右，因此我們整理完行李及第二天會議的資料後就休息準
備參加連續四天的會議行程。 
 
會議自 7/18-7/21 於德國慕尼黑 Holiday Inn 的國際會議廳舉行，第一天為 Workshop Day，第
二至四天為 Conference Day 1-3。首先參加了由澳洲 Swinburne University of Technology 的 T.Y. 
Chen 與香港大學 T.H. Tse 聯合主持的 Keynote Speech：A Property-Based Approach Towards 
Debugging，演說者為 T.Y. Chen，主要是談到以 Metamorphic approach 來解決軟體測試中的
Oracle problem 的方法論。這是一個比較新的測試研究領域，給我很多啟發。 
 
此次會議中我們發表了一篇論文『An Approach for Evaluating the Effectiveness of Design 
Patterns in Software Evolution』，是在第一天 Workshop Day 上午於 Forum 2 發表。發表完也引
附
件
三 
無研發成果推廣資料 
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100%  
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 5 5 100% 千元 
莊旻儒 、董定遠、
林思武、李建慶、
蘇奕軒 
碩士生 1 1 100% 朱鵬化 
博士生 0 0 100%  
博士後研究員 0 0 100%  
參與計畫人力 
（本國籍） 
專任助理 0 0 0% 
人次 
無 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
科 
教 
處 
計 
畫 
加 
填 研討會/工作坊 0  
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100 字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100 字為限） 
計畫執行期間共計發表兩篇國際期刊論文（Springer SQJ、IJACT）、四篇國際會議論文
（ATGSE’08、COMPSAC’10、COMPSAC’11、SAC’11）與四篇國內會議論文（OOTA’09、OOTA’
10、TCSE2011&amp；22nd OOTA）。 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
本研究所提出的嵌入式系統設計方式提供開發者在設計系統時，可以減少人為錯誤並提升
設計品質，對學術研究及國家軟體發展上都有相當的幫助與貢獻。綜合來說，在本研究中，
我們完成了幾項貢獻： 
●樣式的規格化：提供樣式規格化之流程，並且以 UML Profile、ATL 及 OCL 來完整描述
一個樣式的特性。 
●樣式套用流程：透過我們設計的套用流程，不論是從初始的設計轉換到進階的設計，或
是直接引用設計樣板，都能夠迅速且正確地將樣式加入設計之中。 
●驗證樣式被應用之後的正確性：開發者能夠經由支援系統的幫助，察覺哪些被應用的樣
式結構是否遭到破壞，或者違反樣式的規則。 
在未來，我們希望能夠以本研究作為基礎，完成更進一步的目標： 
●支援以樣式為基礎的設計演進：在應用樣式之後，我們希望能夠更進一步協助設計者演
進他們的設計，使得設計的演進更加便利快速。 
●自動化產生程式碼：能夠自動化的產生不同平台的程式碼，一直是 MDA 的終極目標，我
們希望能夠藉由本研究的成果朝這個目標更進一步。 
●支援更多不同目標平台：目前我們的方法以 TBB 作為目標平台的演示，日後期望能夠加
入其他不同多核心的技術平台，以豐富整套開發方法。 
