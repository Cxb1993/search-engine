 i
 
中文摘要 
 
為了因應經濟快速發展及消費型態的改變，消費者求新求快，且更多元化，需求呈現少
量多樣化的特色，導致商品的生命週期大幅的縮短，而物流中心的通路型態也由傳統的多層
式架構，轉變為供應鏈中直接連接製造商與面對消費者的重要角色。揀貨作業為物流中心內
最主要的作業活動，也是物流中心成本的主要來源，因此有效的改善物流中心內部揀貨作業
的效率，將有助於提升物流中心的服務品質及降低營運成本。 
本研究將儲位指派、訂單批量及揀貨路徑規劃作最佳整合規劃，並且嘗試分別應用粒子
群演算法、螞蟻理論、基因演算法、模擬退火及橫跨法改良策略於揀貨路徑規劃，透過模擬
實驗，比較上述五種演算法與最大迴圈插入法之績效差異，發現螞蟻理論與最大迴圈插入法
表現最佳；更進一步證實，以最大迴圈插入法所得之解當作四種巨集演算法的起始解，可以
有效提升 4 種演算法之績效。另外發現當組合因子為較差之儲存與訂單批量策略時，粒子群
演算法因為搜尋方式較發散，導致在較差決策時收斂情形略遜於其他演算法。而透過模擬實
驗驗證並以總揀貨距離、總揀貨時間、揀貨車利用率三項績效指標評估各因子水準組合，再
利用統計分析手法找出各因子之最佳組合，期望本研究結果能提供物流業者在決策時之參
考。 
  關鍵詞： 揀貨系統、儲位指派、訂單批量、揀貨路徑規劃、巨集啟發式演算法 
 
Abstract 
 
In order to adapt to quickly economic development and the changes of expense state that 
reduced the life cycle of goods. The state of channel in distribution center form traditional 
multi-layer framework transform into the important role that connect with manufacturers directly 
and face to consumers in supply chain. Order picking operation is the principal activity in 
warehouses and causes the main cost. Thus, improving efficiency of the order picking operation 
will increase the quality of service and decrease the operation costs.  
This project integrates class storage, order batching and routing to do the best planning, and 
try to compare the performance of routing policy of the Particle Swarm Optimization algorithm 
(PSO), Ant System (AS), Genetic Algorithm (GA), Simulation Analysis (SA), Cross+ strategy and 
Maximum Loop Insertion (MLI). Through the simulation experiment, it verified that the MLI and 
AS algorithm are the best algorithm of routing strategy. Furthermore, we confirm that using MLI 
solution to find an initial solution for all the four Meta-heuristics, it can improve the efficiency of 
the Meta-heuristics solution and has the better effect of average total order picking distance. 
Besides, to compare the result that PSO is not good when it combines the worst storage and order 
batching strategies. Because of the PSO’s particle has larger search area that also induces the PSO 
has the worse convergence than other Meta-heuristics. According to the simulation result are 
analyzed by 3 indexes including total picking distance, total picking time and picking vehicle 
utilization to find the optimal combination for order picking system. Consequently, the result of this 
project will enhance the whole performance of order picking systems in distribution centers and 
provide the industry as a reference in the future. 
Keywords: Order picking systems, Storage assignment, Order batching, Picking routing planning,  
Meta-heuristics
 2
題。Chen 等人[4]。以資料挖礦裡關聯法則中的 Apriori Algorithm 計算每兩張訂單間的關聯度，
將關聯度高者優先加入批次裡，其驗證結果中皆能有不錯的績效表現。 
2.3. 揀貨路徑規劃 
Tompkins et al. [23]提及旅途時間(Travel Time)約佔揀貨活動 50%。因此透過良好的揀貨
路徑規劃，將可縮短揀貨時間並提昇揀貨績效。Roodbergen 與 Koster[17]在交叉走道的倉儲
環境系統下，針對各種不同的揀貨策略比較在不同走道數目、不同品項數以及不同走道寬度
的揀貨路徑評估。求算最短路徑之啟發式演算法包括：S 型法、最大間隙法、走道接走道法、
最佳法、結合啟發法(Combined Heuristic)以及結合法改良策略(Combine+ Heuristic)，所提出的
結合法改良策略有最佳績效表現，而學者[1]又將其加以改善，提出橫跨法策略(Cross 
Strategy)，並加入兩點改善法則，將其稱為橫跨法改良策略(Cross+ Strategy)，該研究所提出
的橫跨法改良策略，經實驗結果證明，較結合法改良策略更能有效的改善揀貨距離。 
謝玲芬與黃建霖[2]提出一啟發式路徑規劃演算法－最大迴圈插入法(Maximum Loop 
Insertion；簡稱 MLI)，MLI 是以 I/O 為起始點，找出最左邊走道最遠的揀取點與最後一個走
道中最遠的點，此三點先形成一個迴圈，再依次找尋加入後增加距離最小的點為下一個加入
之揀取點，重覆此步驟直至全部揀取點規劃完成為止。研究發現 MLI 在揀貨距離上明顯優於
（NC 最接近矩形中心啟發式(Nearest Center of Rectangular Insertion; NCRI)與最短旅行迴圈
插入啟發式(Minimum Traveling Loop Insertion; MTLI)演算法。 
2.4. 螞蟻理論 
螞蟻系統(Ant System; AS)最早是由 Dorigo 於 1992 年[6]所提出來，其理論為觀察自然界
螞蟻搜尋食物的過程所發展出來的。螞蟻在搜尋食物時，會在所走過的路上留下揮發性的化
學物質，稱為費洛蒙(Pheromone)，而幾乎全盲的螞蟻便是藉由費洛蒙來傳遞訊息，以進行溝
通。 
Dorigo 最早提出來應用於銷售員旅行問題的 AS 公式如下： 
 
[ ] [ ]
[ ] [ ]
⎪⎪⎩
⎪⎪⎨
⎧ ∈×
×
= ∑ ∈
otherwise                                                        0
,allowedj    if       
 )t(
)t(
)t(p
k
ikikallowedk
ijij
k
ij k
βα
βα
ητ
ητ
           
 
其中     表示第 k 隻螞蟻在第 t 次迭代中，從城市 i 選擇下一個城市 j 的機率；     表
示迭代 t 時，由城市 i 到城市 j 之費落蒙素濃度；   表示迭代 t 時，由城市 i 到城市 j 的視覺
能力，公式(2.1)主要依據螞蟻行走時所遺留的費洛蒙與其視覺能力，兩者所構建而成。 
 
ijijij tnt ττρτ Δ+⋅=+ )()(                (2.2) 
∑
=
Δ=Δ
m
k
k
ijij
1
ττ                 (2.3) 
 
公式(2.2)為費洛蒙更新機制，隨著時間的經過，費洛蒙將會逐漸的蒸發，所以藉由   表
示此蒸發機制，而費洛蒙亦會因螞蟻行走於相同的路徑上而逐漸累積，由公式(2.3)計算所有
m 隻螞蟻，於城市 i 到城市 j 所遺留的費洛蒙總和。 
針對費洛蒙累積(   )之更新方式著手，所以有許多學者針對此更新方式提出許多研究，
而主要分為兩類： 
 (2.1) 
)(tPkij )(tijτ
ijη
ijτΔ
ρ
 4
)(*) (*)(*) (** 21
old
idgd
old
idid
old
id
new
id xpRandcxprandcvwv −+−+=   (2.4) 
new
id
old
id
new
id vxx +=             (2.5) 
其中 xid 表示第 i 個粒子於第 d 個空間維度的位置，vid 表示第 i 個粒子於第 d 個空間維度
的速度。    代表目前這個迭代所在位置，    則代表下一個世代新的位置，   代表目前
這個世代移動速度，    則代表下一個世代新的移動速度。公式中 rand( )、Rand( )為兩個介
於[0,1]的隨機變數。c1 及 c2 為正數的學習係數。w 為慣性權重，可使求解的過程中更快找
到全域的最佳解，後續兩位學者更針對慣性權重提出較好的經驗設定[19,20]。從公式(2.4)中
可看出粒子主要依據三個因子不斷更新搜尋方向，有了新的搜尋方向，粒子便可透過公式(2.5)
從目前位置移動到新的位置，如此經過數次迭代後，粒子即可搜尋到最佳解。 
近年來 PSO 已被廣泛運用到組合優化、神經網路訓練及複雜的系統模擬中。學者[2]以
PSO 應用揀貨作業的路徑規劃，並發展一路徑規劃啟發式演算法代入 PSO 的初始解，結果顯
示以一個不錯的初始解代入 PSO 中，能有效減低演算法收歛時間，且與其它路徑規劃方法相
較之下有相當不錯的績效表現。 
 
3. 模式構建 
3.1. 儲位指派 
在儲位指派方面則運用學者[1]所提出的兩階段指派：第一階段將品項存取頻率依 ABC
儲存方法將儲位分為三個儲區，隨後依產品存取頻率的高與低依次指派離 I/O 點最近和遠；
第二階段是將 ABC 三類品項分別以 Apriori 演算法決定產品關聯性，隨之再加以調整儲位。 
3.2. 訂單批量方法 
前期計畫已考量單一訂單、最適封包批量及關聯訂單批量三種不同訂單批量方法。而此
研究再延伸加入新的批量方法來加以比較，其為應用粒子群最佳化演算法(Particle Swarm 
Optimization； PSO)，所發展出的一啟發式演算法進行訂單批次的規劃 (稱為 PSO 
Batching-Method；簡稱 PSOBM)，其演算流程如圖 3.3，而步驟如下： 
步驟一：設定 PSO 各項參數。其粒子數、慣性權重、學習因子(c1、c2)、最大速度(Vmax)、終
止條件等設定如下：粒子數：粒子數設定為 30。慣性權重：慣性權重值(w)設為 0.8。
學習因子：學習因子 c1、c2 設為 2。最大速度：設定速度Ｖid 介於(-3,3)之間，最大
速度設為 6。終止條件：迭代次數到達 200 次、全部粒子收斂至同一點或群體最佳
位置 30 世代未改變，滿足以上任一條件則演算法終止。其中最大速度設為 6，是由
於粒子大幅度的移動容易造成批次問題中不易收斂的結果，因而調整速度限制以防
止不易收斂的情況產生。 
步驟二：隨機產生訂單順序並以揀貨車容積限制作為批次考量，建立一批次初始解及隨機產
生各粒子初始速度，迭代數為 0。 
步驟三：依揀貨路徑規劃計算各粒子適應函數，並求得各個體與群體最佳位置(Pbest、Gbest)。 
步驟四：判斷適應值是否大於原先適應值來決定是否更新各別粒子之 Pbest與 Gbest。 
步驟五：根據目前位置與慣性權重、各個 Pbest與 Gbest修正粒子速度及訂單批次順序。 
步驟六：若滿足終止條件，則進行步驟七，否則回步驟三，且迭代數加 1。 
步驟七：輸出訂單批次結果。 
new
idx oldidv
old
idx
new
idv
 6
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                                      圖 3.7 應用基因演算法於路徑規劃流程圖 
 
 
 
 
圖 3.6 模擬退火演算法於路徑規劃流程圖 
3.3.2. 基因演算法 
本研究目的為降低揀貨作業時間及距離，因此適應函數則以路徑揀貨距離最小化為考
量。而後便可經由適應值比較，將適應函數值較高的染色體複製到交配池中進行交配的作
業，而適應值低者則遭淘汰，另外以競爭法決定被複製的染色體，假設複製機率為 0.5。然
在交配方法上則是用兩點交配進行交配動作，產生兩個新的染色體。至於在突變方面，則設
突變機率設為一極小值，且突變時為原染色體中之揀貨順序排序之品項兩點互換後，便可成
為新的染色體。其步驟敘述如下，而圖 3.7 為應用基因演算法於路徑規劃流程圖： 
步驟一：設定起始參數值，包括染色體數目、複製率、交配率、突變率與終止條件。 
步驟二：隨機產生起始解，於揀貨路徑規劃問題中即為隨機產生揀貨順序。 
步驟三：計算每個染色體的適應值，即計算各組揀貨順序之揀貨距離。 
步驟四：檢查是否滿足終止條件。而本研究假設若滿足迭代次數為到達 200 次或其群體最佳
位置 30 世代未改變，則至步驟六。否則跳至步驟五。 
步驟五：依序執行複製、交配與突變的作業，結束後回步驟三。 
步驟六：輸出揀貨路徑規劃順序與其距離。 
 
4. 模擬驗證分析 
4.1. 模擬環境與實驗因子組合 
本實驗採一矩形物流中心，共有 10 條主走道，走道兩側各有 20 個儲位，共計 400 個儲
位，儲位寬、深度皆為 1 公尺，倉儲前後方分別有前、後走道，中央有 1 條交叉走道，寬度
皆為 2.5 公尺，領單點與集貨點(I/O) 皆於左下角，而揀貨車容積上限值為 50 單位。 
本研究實驗考慮兩種儲位指派、一種產品關聯性、四種訂單批量及十種揀貨路徑規劃，
共有 80 種排列組合。以 Visual Basic for Application 6.0 模擬軟體建構物流中心，由電腦產生
 8
表4.2 各因子水準於三項績效指標之平均數 
 
 
 
 
 
 
 
 
 
 
 
 
 
從表 4.3 中可知，在儲位指派、訂單批量與揀貨路徑規劃三因子交互作用下，於揀貨路
徑與揀貨時間績效上，以實驗編號 39 和 23 表現最佳，即為分區儲存搭配最適封包批量與結
合 MLI 或 MLI+AS。而根據表 4.3 發現關聯法則並非表 4.2 所呈現，在揀貨距離與時間上為
最佳的批次演算法，其主要原因為在分區儲存的情況下，最適封包不論在何路徑組合下皆優
於關聯批量，但在不分區儲存的情況下，由於最適封包是以品項所座落的走道來形成訂單批
量，因此當在隨機儲存品項時，導致最適封包批量的方法劣於關聯法則批量，其詳細結果本
研究以揀貨距離為例呈現於表 4.4，如此造成最適封包批量整體平均效率劣於關聯訂單批量。 
另外在路徑規劃上也發生此情形，以揀貨距離之 PSO 演算法為例，從表 4.5 可發現當儲
位指派為不分區儲存時，PSO 演算法在 4 種的批量手法上所花的旅行距離最多；不過在分區
儲存時，除了單一批量外，其他三種之批次手法中表現最差皆為演算法 SA，綜合以上結果
得知，較差之儲存與訂單批量策略使得 PSO 演算法相較於其他演算法求解品質大幅降低。本
研究對於此結果作以下推論：由於此 4 種演算法有著不同的求解特性與模式，當環境或揀貨
策略較差時，模擬退火法求解過程，是運用一組初始解不斷迭代更新產生新解。基因演算法
則是利用挑選最優秀(適應值最佳)進行複製，而後利用輪盤法取兩染色體做隨機兩點交配，
如此反覆迭代找尋最佳解。由上述可知 SA 與 GA 求解時之搜尋擾動方式較為簡單。而螞蟻
理論與粒子群演算法，則是運用所設定之螞蟻與粒子數發散式搜尋而產生數個初始解，因此
搜尋範圍之設定相對於此兩演算法相當重要，其中螞蟻理論是運用蒸發係數與公式(2.1)來控
制螞蟻朝向整體性最佳路徑前進；至於粒子群演算法則是運用速度控制搜尋。在揀貨路徑規
劃，不管何種演算法，都是在搜尋最佳的揀貨順序，本研究發現粒子群演算法在產生揀貨順
序時，其擾動方式導致在揀貨品項排序時變化較其他演算法大，如此容易造成在限定的迭代
次數裡，粒子群搜尋許多種組合，但尚未求得至最佳組合。因此，可以推論粒子群演算法在
較差環境時，因為粒子演算法較大發散搜尋方式使得收斂速度較其他演算法緩慢。 
有鑒於最差之策略會影響整體平均績效，本研究挑出對於各路徑規劃最有利之組合，進
一步清楚比較 4 種巨集啟發式演算法、MLI 與 Cross+ Strategy 等路徑規劃之優劣，至於在 4
種巨集啟發式演算法上，由於已證明加入 MLI 當起始解將有助於求解品質，因此將 MLI 結
合每種巨集演算法進行比較，如此可得表 4.6。經由 4.6 得知，MLI 與 AS+MLI 之路徑規劃
無庸置疑為最佳解，其次為 GA+MLI 與 PSO+MLI，而表現最差的為 SA+MLI。因此本研究
所介紹之 4 種巨集啟發式演算法運用於路徑上，以螞蟻演法表現最佳，其次為粒子群演算法
 10
表 4.5 不同訂單批量與儲存政策於各揀貨路徑方法之揀貨距離表現 
 
 
 
 
 
 
 
 
 
 
 
 
 
表 4.6 各路徑演算法下之最佳揀貨距離表現組合 
 
 
 
 
 
 
 
5. 結論與建議 
本研究之研究目的乃在探討如何提高物流中心檢貨系統之揀貨效率，因影響平均訂單揀
貨績效之因子並非僅揀貨路徑方法，因此本研究與過去學者所提出最佳之揀貨路徑方法作比
較，以及考量訂單批量法、揀貨型態，並驗證在各因子間之組合以找出最佳組合，因此根據
本研究之模擬實驗所蒐集之數據，經過統計分析，可以得到下面的幾點結論： 
一、 本研究嘗試將過去學者常用之螞蟻理論、粒子群演算法、基因演算法、模擬退火法等
巨集啟發式演算運用於路徑規劃上，從模擬之結果發現，螞蟻理論在路徑規劃上不
論在揀貨距離或時間上，皆比起粒子演算法、基因演算、模擬退火法還佳。另外發
現當組合因子為較差之儲存與訂單批量策略時，PSO 演算法因為搜尋方式較發散，
導致在較差決策時收斂情形略遜於其他演算法。因此在設計相關倉儲環境與相關決
策時，必須更加全面考量，否則將影響後續作業之規劃。 
二、 再次驗證了最大迴圈插入法(MLI)，確實能有相當不錯之績效，且當最大迴圈插入法
結合螞蟻理論、粒子群演算法、基因演算法、模擬退火法等 4 種巨集啟發式演算法
時，可以有效提升 4 種演算法之績效。這也更加說明初始解對於巨集啟發式演算法
的重要性。 
三、 經由模擬結果顯示任一訂單批量法於各績效指標皆優於單一訂單，其中又以最適封包
批量法為最佳，且與其他因子之組合皆有最佳之表現。但在揀貨車利用上關聯法為
最佳的訂單批量方法，其次為 PSOBM。 
四、 從三因子組合分析下，更加證實分區儲位指派優於未經規劃之不分區儲存手法，且經
 12
(1996), “Facilities Planning,” Wiley New York.  
 
計畫成果自評 
本研究主要針對物流中心儲位規劃問題，延續上一期計畫之研究結果，考慮分區與不分
區兩種方式，並藉由關聯法則進一步改善儲位指派，在訂單揀取法中比較單一訂單別、最適封
包批量與關聯訂單批量，在揀貨路徑規劃部分，本研究將運用近幾年才提出之粒子群最佳化演
算法求解最佳路徑，並建構一啟發式演算法作為粒子群最佳化演算法之起始解，稱為最大迴圈
插入法(Maximum Loop Insertion, 簡稱MLI)以提昇求解效率，並與文獻中有較佳表現之巨集
演算法(包括：螞蟻理論、基因演算法、模擬退火法及粒子群最佳化演算法)與最短旅行迴圏啟
發式演算法一同比較。以總揀貨成本最小化為目標，進而達到單位時間內揀貨績效提昇，透過
模擬實驗驗證並以三項績效指標(最小化旅行距離、最小化旅行時間及最大化揀貨車之負載量)
評估各因子水準組合，利用統計分析手法找出各因子之最佳水準組合，並將本研究之成果提供
給物流業者用於物流規劃與績效提昇之參考。完全依照計畫書的想法進行，目前已經全部完
成，研究結果與原預期之計畫目標相符合，而且整理完手稿，投稿國際期刊中。在計畫執行期
間曾參與國際研討會(ICOTA 7)，國際會議心得報告及發表之論文詳見附錄。 
 
 14
一、會議經過 
The 7th International Conference on Optimization: Techniques and Applications (ICOTA 7)是
探討最佳化理論領域一個相當正式的研討會，每三年舉辦一次，其主要目的是提供所有在產、
關、學及軟體開發者一個國際聚會的機會，大家齊聚ㄧ堂彼此交換構想、分享經驗及心得，並
藉由溝通及討論，研擬未來之發展方向。2007 年是第七屆，由十二月十二日至十五日共四天，
地點選在日本的神戶。每屆發表論文的人數都相當多，今年共有來自32個國家，254篇論文發
表，大會並特別安排六場精彩的專題演講，參加本次研討討會真是受益良多。大會共分為六十
餘個場次發表論文，每個場次約四至五篇論文，讓與會者能充份挑選自己有興趣的主題之場次
參與討論。大會主辦單位在閉幕餐會上除了供應豐盛的餐點外，並安排傳統的日本歌舞表演，
整個研討會到此在ㄧ片歡樂中圓滿閉幕。 
由於十二月中旬參加研討會，恰逢聖誕前之前，神戶街頭相當熱鬧，趁著研討會的空檔，
親身搭乘日本的電車，逛逛當地的商場，順道體驗當地的民俗風情。且神戶當地為紀念之前的
阪神大地震，為祈求神戶居民之平安，當地每年十二月均舉辦燈祭，以祈求人民的平安及世界
和平，場面相當壯觀！當地居民告訴我門今年是舉辦燈祭的最後一年！大家更是珍惜此一機
會，留下深刻的記憶。另外我也品嚐的當地著名且道地的大阪燒，參觀當地的古蹟－姬路城，
真是收穫良多。 
          
神戶燈祭(1)                              神戶燈祭(2) 
          
神戶鶴橋風月的大阪燒                       神戶古蹟－姬路城 
 16
二、研討會發表之論文 
 
Optimal Order Picking Planning for Distribution Center with Cross Aisle 
 
Ling-Feng Hsieh 
Professor, Department of Technology Management, Chung Hua University, Hsinchu 300, Taiwan, R.O.C. 
lfhsieh@chu.edu.tw 
 
Chien-Lin Huang 
Graduate student, Department of Technology Management, Chung Hua University, Hsinchu 300, Taiwan, 
R.O.C. 
m09403033@chu.edu.tw 
 
Abstract 
 
Order picking method is one of the most important operations in the distribution center. The route planning of 
order picking systems will allow for the possibilities of increasing in production efficiency, reducing the 
operation cost in distribution center, and improving the corporation competitiveness. In a distribution center 
with cross aisle, although the cross aisle layout may reduce the order picking distance, it also may raise the 
complexity for picking routing planning. Focus on this problem, a heuristic algorithm (called Maximum Loop 
Insertion) is proposed in this paper, as well as compare with other famous algorithms and Particle Swarm 
Optimization (PSO), in order to improve the order picking performance. According to the simulation 
experiment, it verified that the Maximum Loop Insertion algorithm actually achieves the better performance. 
Overall, the result of this research will enhance the best route planning of order picking systems in distribution 
center and provide the industry as a reference in the warehouse design in the future. 
 
Keywords: Order picking system, Cross aisle, Maximum Loop Insertion, Particle Swarm Optimization, 
Performance 
 
1  Introduction 
 
As economy develops and changes in consuming habit, it makes the types and structures of marketing channel 
are transferred to the supplier transported the products to retailer by distribution center. Therefore, it is an 
important issue about how to improve the distribution center operation efficiency. Due to the fact that 
consumer’s request has been changed from few items and small volume to many items and small volume, it is 
hoped that if the order picking operations can be finished in reasonable time or not will influence the 
operation cost and service level of distribution center. In internal operations of distribution center, the factors 
included warehouse layout, storage assignment strategies, order picking operations, which will influence order 
 18
 
2.2  Particle Swarm Optimization 
Kennedy, J. and R. C. Eberhart [6] proposed Particle Swarm Optimization (PSO) in 1995. It is similar to John 
Holland [10] proposed Genetic Algorithms (GA) in 1960. They are all belonging to Evolutionary computation 
and within the evolutionary generation to optimal solutions. The main concept of GA is the survival of the 
fittest which is proposed by Charles Darwin. That is using three basic operations, which is Reproduction, 
Crossover, and Mutation to imitate natural evolutionary process, and according to the evolutionary generation 
to optimal solutions. Therefore, PSO has no crossover and mutation, it is easier than GA, but is has better 
global optimal solution ability. 
PSO and Dorigo [10] proposed Ant Colony Optimization (ACO) in 1992 is all Swarm Intelligence 
algorithms that are according to swarm intelligence to solve problems. ACO is a cooperative heuristic 
searching algorithm inspired by the methodological study on the behavior of ants. The ants can find out the 
food is done by an indirect communication known as pheromone, left by the ants on the paths, and 
constructive to the shortest distance between the nest and food. 
PSO is according to three factors to find out the optimal solution, that is (1) the current moving direction by 
itself, (2) the previous experiment by itself, (3) the swarm experiments, and compare with Fitness Value which 
is computed by Fitness Function to revise the velocity and position of itself. 
The definitions of PSO related variances, lidX  is the particle i, d dimension, l  stage position. 1lidX +  is 
the particle i, d dimension, in 1l +  stage position. idP  represents the optimum position recorded by the ith 
particle in d dimension. gdP  is the optimum position resolved by a population of particles in d dimension. 
l
idV  is the velocity of the ith particle, d dimension in l  stage. 1lidV +  is the velocity of the ith particle, d 
dimension in 1l +  stage. ()rand  is random number between [0, 1]. c1 and c2 are learning factors which 
controls the acceleration of particle velocity. w  is the inertial constant that allows user to control the 
parameters. A small w  value will direct searches within current space, and a large w  value will indicate 
searches in new space. Appropriate selection of w  value, c1 and c2 learning factors can expand search space 
to achieve a balanced result. The velocity and position update formula is shown in Formula (1) and Formula 
(2). 
 
)XP(()randc)XP(()randcVwV l2
l
1
l1l
idgdidididid −⋅×+−⋅⋅+⋅=+      (1) 
1ll
idid
1l
id VXX ++=+      (2) 
 
The original two scholars which is proposed PSO is not using inertia weight w . The inertia weight w  is 
proposed by Shiand and Eberhart [11] in 1998, illustrated inertia weight w  using can make the solution 
process to find out the global best solution faster. The characteristic of inertia weight w  is similar to cooling 
parameter of Simulated Annealing (SA) that can make the solution become convergence. Shi and Eberhart 
also illustrates w  between 0.8 and 1.2, it has more chance to find out the global solution. 
 
 
 20
 117 118 157 158 195 196 233 234 273 274 317 318 349 350 371 372 389 390 399 400
107 108 147 148 185 186 225 226 265 266 307 308 341 342 365 366 385 386 397 398
99 100 139 140 177 178 217 218 257 258 299 300 335 336 361 362 381 382 395 396
91 92 131 132 169 170 209 210 249 250 291 292 329 330 357 358 377 378 393 394
81 82 121 122 159 160 199 200 239 240 281 282 321 322 351 352 373 374 391 392
73 74 111 112 149 150 189 190 229 230 271 272 311 312 343 344 367 368 387 388
67 68 103 104 141 142 181 182 221 222 263 264 303 304 337 338 363 364 383 384
61 62 95 96 133 134 173 174 213 214 255 256 295 296 331 332 359 360 379 380
55 56 87 88 125 126 165 166 203 204 247 248 287 288 325 326 355 356 375 376
47 48 77 78 115 116 155 156 193 194 237 238 277 278 315 316 347 348 369 370
31 32 53 54 85 86 123 124 163 164 207 208 245 246 285 286 323 324 353 354
25 26 45 46 75 76 113 114 153 154 197 198 235 236 275 276 313 314 345 346
21 22 41 42 69 70 105 106 145 146 187 188 227 228 267 268 305 306 339 340
17 18 37 38 63 64 97 98 137 138 179 180 219 220 259 260 297 298 333 334
13 14 33 34 57 58 89 90 129 130 171 172 211 212 251 252 289 290 327 328
9 10 27 28 49 50 79 80 119 120 161 162 201 202 241 242 279 280 319 320
7 8 23 24 43 44 71 72 109 110 151 152 191 192 231 232 269 270 309 310
5 6 19 20 39 40 65 66 101 102 143 144 183 184 223 224 261 262 301 302
3 4 15 16 35 36 59 60 93 94 135 136 175 176 215 216 253 254 293 294
1 2 11 12 29 30 51 52 83 84 127 128 167 168 205 206 243 244 283 284
Ai
sle
 1
Ai
sle
 10
I/O
Front Aisle
Black Aisle
Cross Aisle
(a) 
36 
a 
b 
CoR 
 
117 118 157 158 195 196 233 234 273 274 317 318 349 350 371 372 389 390 399 400
107 108 147 148 185 186 225 226 265 266 307 308 341 342 365 366 385 386 397 398
99 100 139 140 177 178 217 218 257 258 299 300 335 336 361 362 381 382 395 396
91 92 131 132 169 170 209 210 249 250 291 292 329 330 357 358 377 378 393 394
81 82 121 122 159 160 199 200 239 240 281 282 321 322 351 352 373 374 391 392
73 74 111 112 149 150 189 190 229 230 271 272 311 312 343 344 367 368 387 388
67 68 103 104 141 142 181 182 221 222 263 264 303 304 337 338 363 364 383 384
61 62 95 96 133 134 173 174 213 214 255 256 295 296 331 332 359 360 379 380
55 56 87 88 125 126 165 166 203 204 247 248 287 288 325 326 355 356 375 376
47 48 77 78 115 116 155 156 193 194 237 238 277 278 315 316 347 348 369 370
31 32 53 54 85 86 123 124 163 164 207 208 245 246 285 286 323 324 353 354
25 26 45 46 75 76 113 114 153 154 197 198 235 236 275 276 313 314 345 346
21 22 41 42 69 70 105 106 145 146 187 188 227 228 267 268 305 306 339 340
17 18 37 38 63 64 97 98 137 138 179 180 219 220 259 260 297 298 333 334
13 14 33 34 57 58 89 90 129 130 171 172 211 212 251 252 289 290 327 328
9 10 27 28 49 50 79 80 119 120 161 162 201 202 241 242 279 280 319 320
7 8 23 24 43 44 71 72 109 110 151 152 191 192 231 232 269 270 309 310
5 6 19 20 39 40 65 66 101 102 143 144 183 184 223 224 261 262 301 302
3 4 15 16 35 36 59 60 93 94 135 136 175 176 215 216 253 254 293 294
1 2 11 12 29 30 51 52 83 84 127 128 167 168 205 206 243 244 283 284
I/O
c
d
e
f
(b) 
En
d 
A
re
a 
Fr
on
t A
re
a 
 
Figure 1: NCRI Order Picking Routing 
 
3.2.1  Nearest Center of Rectangular Insertion (NCRI) 
In this sub-section, we will introduce the Nearest Center of Rectangular Insertion (NCRI) which is proposed 
by Ho and Su [13]. It supposed the pickers walked in the middle of the aisle, the pickers can pick the two 
sides products in the same time. Consequently, the two sides locations can considered the same point, and 
supposed the I/O point is (0,0), and (xj, yj) is means mi products in the order of each item j’s location, such as 
∀j =1,2,..., mi. 
First, we are choosing the nearest two order picking points from I/O, such as the point a, b, in Fig. 1 (a). 
These two points and I/O depot of the practice traveling path is surrounded to rectangular circle. All have 
picked order picking points will form to the Loop Set (LS). According to the Formula (3), and compute the all 
picking points’ location in LS, which form to Center of Rectangular (CoR). 
 
{ } { } { } { }⎟⎠
⎞⎜⎝
⎛ ∈+∈∈+∈=
2
LSn;yminLSn;ymax
 , 
2
LSn;xminLSn;xmax
CoR nnnn      (3) 
 
Calculation the distance between all other order picking points j to CoR, which is calculated by Formula (4). 
We find the nearest distance order picking point k, and insert it into the LS, shown in Formula (5). If there are 
more than two orders picking points are all the same nearest distance of CoR, then choosing whichever one to 
insert. 
 
LSj;yyxxd CoRjCoRjj,CoR ∉∀−+−=      (4) 
 { }LSj;dmind j,CoRk,CoR ∉=      (5) 
 
The pickers from order picking point u' to order picking u", the practical traveling distances is TDu'u''. If the 
 22
 
Figure 2: MTLI Order Picking Routing 
 
3.2.3  Particle Swarm Optimization 
Particle Swarm Optimization is an optimal tool of evolutionary generation, and is Swarm Intelligence 
algorithm. It found the each particle by self optimal memory solution, and swarm optimal solution. Then 
update the velocity and position until all particles find out the global optimal solution. 
 
3.2.3.1  PSO Parameter Setting 
According to result of Hsieh et al. [9], the parameters setting is as following: 
Number of Particles: The Particle setting is 30. Maximum Velocity: Because the storage locations added to 
400, so in this paper, we raises the velocity lidV  is between (-80, 80), then the maximum velocity is at 160. 
Learning Factor: Learning factors of c1 and c2 usually have a value of 2. Inertia Weight: PSO with an inertia 
weight is set 0.8. Stop Condition: The maximum number of iterations is 200 or all particles converge in the 
same point. 
 
3.2.3.2  PSO Fitting Function 
The function of the PSO fitting equation is evaluate the particle obtain the optimal solution or not. Therefore, 
it set up different function based on different problem. In this paper, the main objective is minimizing total 
order picking distances. 
 
3.2.3.3  PSO Algorithm Process 
The PSO algorithm process is shown in Fig. 3 
 117 118 157 158 195 196 233 234 273 274 317 318 349 350 371 372 389 390 399 400
107 108 147 148 185 186 225 226 265 266 307 308 341 342 365 366 385 386 397 398
99 100 139 140 177 178 217 218 257 258 299 300 335 336 361 362 381 382 395 396
91 92 131 132 169 170 209 210 249 250 291 292 329 330 357 358 377 378 393 394
81 82 121 122 159 160 199 200 239 240 281 282 321 322 351 352 373 374 391 392
73 74 111 112 149 150 189 190 229 230 271 272 311 312 343 344 367 368 387 388
67 68 103 104 141 142 181 182 221 222 263 264 303 304 337 338 363 364 383 384
61 62 95 96 133 134 173 174 213 214 255 256 295 296 331 332 359 360 379 380
55 56 87 88 125 126 165 166 203 204 247 248 287 288 325 326 355 356 375 376
47 48 77 78 115 116 155 156 193 194 237 238 277 278 315 316 347 348 369 370
31 32 53 54 85 86 123 124 163 164 207 208 245 246 285 286 323 324 353 354
25 26 45 46 75 76 113 114 153 154 197 198 235 236 275 276 313 314 345 346
21 22 41 42 69 70 105 106 145 146 187 188 227 228 267 268 305 306 339 340
17 18 37 38 63 64 97 98 137 138 179 180 219 220 259 260 297 298 333 334
13 14 33 34 57 58 89 90 129 130 171 172 211 212 251 252 289 290 327 328
9 10 27 28 49 50 79 80 119 120 161 162 201 202 241 242 279 280 319 320
7 8 23 24 43 44 71 72 109 110 151 152 191 192 231 232 269 270 309 310
5 6 19 20 39 40 65 66 101 102 143 144 183 184 223 224 261 262 301 302
3 4 15 16 35 36 59 60 93 94 135 136 175 176 215 216 253 254 293 294
1 2 11 12 29 30 51 52 83 84 127 128 167 168 205 206 243 244 283 284
I/O
a 
(a) (b) 
117 118 157 158 195 196 233 234 273 274 317 318 349 350 371 372 389 390 399 400
107 108 147 148 185 186 225 226 265 266 307 308 341 342 365 366 385 386 397 398
99 100 139 140 177 178 217 218 257 258 299 300 335 336 361 362 381 382 395 396
91 92 131 132 169 170 209 210 249 250 291 292 329 330 357 358 377 378 393 394
81 82 121 122 159 160 199 200 239 240 281 282 321 322 351 352 373 374 391 392
73 74 111 112 149 150 189 190 229 230 271 272 311 312 343 344 367 368 387 388
67 68 103 104 141 142 181 182 221 222 263 264 303 304 337 338 363 364 383 384
61 62 95 96 133 134 173 174 213 214 255 256 295 296 331 332 359 360 379 380
55 56 87 88 125 126 165 166 203 204 247 248 287 288 325 326 355 356 375 376
47 48 77 78 115 116 155 156 193 194 237 238 277 278 315 316 347 348 369 370
31 32 53 54 85 86 123 124 163 164 207 208 245 246 285 286 323 324 353 354
25 26 45 46 75 76 113 114 153 154 197 198 235 236 275 276 313 314 345 346
21 22 41 42 69 70 105 106 145 146 187 188 227 228 267 268 305 306 339 340
17 18 37 38 63 64 97 98 137 138 179 180 219 220 259 260 297 298 333 334
13 14 33 34 57 58 89 90 129 130 171 172 211 212 251 252 289 290 327 328
9 10 27 28 49 50 79 80 119 120 161 162 201 202 241 242 279 280 319 320
7 8 23 24 43 44 71 72 109 110 151 152 191 192 231 232 269 270 309 310
5 6 19 20 39 40 65 66 101 102 143 144 183 184 223 224 261 262 301 302
3 4 15 16 35 36 59 60 93 94 135 136 175 176 215 216 253 254 293 294
1 2 11 12 29 30 51 52 83 84 127 128 167 168 205 206 243 244 283 284
I/O
b
c
d
e
f
 24
using the same method to repeat, and find the next order picking point, until included all order picking points 
of order i, shown in Fig. 4 (b). Then, obtained the order picking sequence, I/O, 23, 121, 368, 114, 66, 36, and 
I/O. Finally, calculated the order picking distance of order i, it can avoid when construct the path, according to 
the shortest distance, then fall in local solution.  
 
Figure 4: MLI Order Picking Routing 
 
The MLI algorithm process is as following: 
Step 1: First, find the nearest aisle which has order picking points from I/O depot. Then, find out the 
nearest order picking point from I/O in that aisle, shown in Fig. 4 (a), point a. 
Step 2: Find the farthest depth order picking point from I/O depot. If there are the same depth of order 
picking points, then choosing the nearest order picking point from I/O, shown Fig. 4 (a), point b. 
Step 3: Find the farthest aisle from I/O depot, and then find the nearest order picking point from I/O depot, 
shown in Fig. 4 (a), point c. 
Step 4: Check the previous three steps, and find is it repeated or not. If there is repeat one, then delete the 
repeat point, then using remnant points and I/O depot, and construct the maximum loop traveling 
routing with the shortest traveling distance. 
Step 5: According to the shortest insert distance, then from the non choosing points to find the insert order 
picking point k which add the shortest distance. 
Step 6: Insert this order picking point k in the loop, it formed to a new loop. If there are the same shortest 
distance points, then choosing by random. 
Step 7: Check the constructed loop included all order picking points or not. If already included all order 
picking points, then dropped to step 8, if not then go back to step 5. 
Step 8: Compute the traveling distance of the constructed loop, then finished the order picking routing 
planning. 
 
 
 
(a)
117 118 157 158 195 196 233 234 273 274 317 318 349 350 371 372 389 390 399 400
107 108 147 148 185 186 225 226 265 266 307 308 341 342 365 366 385 386 397 398
99 100 139 140 177 178 217 218 257 258 299 300 335 336 361 362 381 382 395 396
91 92 131 132 169 170 209 210 249 250 291 292 329 330 357 358 377 378 393 394
81 82 121 122 159 160 199 200 239 240 281 282 321 322 351 352 373 374 391 392
73 74 111 112 149 150 189 190 229 230 271 272 311 312 343 344 367 368 387 388
67 68 103 104 141 142 181 182 221 222 263 264 303 304 337 338 363 364 383 384
61 62 95 96 133 134 173 174 213 214 255 256 295 296 331 332 359 360 379 380
55 56 87 88 125 126 165 166 203 204 247 248 287 288 325 326 355 356 375 376
47 48 77 78 115 116 155 156 193 194 237 238 277 278 315 316 347 348 369 370
31 32 53 54 85 86 123 124 163 164 207 208 245 246 285 286 323 324 353 354
25 26 45 46 75 76 113 114 153 154 197 198 235 236 275 276 313 314 345 346
21 22 41 42 69 70 105 106 145 146 187 188 227 228 267 268 305 306 339 340
17 18 37 38 63 64 97 98 137 138 179 180 219 220 259 260 297 298 333 334
13 14 33 34 57 58 89 90 129 130 171 172 211 212 251 252 289 290 327 328
9 10 27 28 49 50 79 80 119 120 161 162 201 202 241 242 279 280 319 320
7 8 23 24 43 44 71 72 109 110 151 152 191 192 231 232 269 270 309 310
5 6 19 20 39 40 65 66 101 102 143 144 183 184 223 224 261 262 301 302
3 4 15 16 35 36 59 60 93 94 135 136 175 176 215 216 253 254 293 294
1 2 11 12 29 30 51 52 83 84 127 128 167 168 205 206 243 244 283 284
I/O
a 
b 
c
(b) 
117 118 157 158 195 196 233 234 273 274 317 318 349 350 371 372 389 390 399 400
107 108 147 148 185 186 225 226 265 266 307 308 341 342 365 366 385 386 397 398
99 100 139 140 177 178 217 218 257 258 299 300 335 336 361 362 381 382 395 396
91 92 131 132 169 170 209 210 249 250 291 292 329 330 357 358 377 378 393 394
81 82 121 122 159 160 199 200 239 240 281 282 321 322 351 352 373 374 391 392
73 74 111 112 149 150 189 190 229 230 271 272 311 312 343 344 367 368 387 388
67 68 103 104 141 142 181 182 221 222 263 264 303 304 337 338 363 364 383 384
61 62 95 96 133 134 173 174 213 214 255 256 295 296 331 332 359 360 379 380
55 56 87 88 125 126 165 166 203 204 247 248 287 288 325 326 355 356 375 376
47 48 77 78 115 116 155 156 193 194 237 238 277 278 315 316 347 348 369 370
31 32 53 54 85 86 123 124 163 164 207 208 245 246 285 286 323 324 353 354
25 26 45 46 75 76 113 114 153 154 197 198 235 236 275 276 313 314 345 346
21 22 41 42 69 70 105 106 145 146 187 188 227 228 267 268 305 306 339 340
17 18 37 38 63 64 97 98 137 138 179 180 219 220 259 260 297 298 333 334
13 14 33 34 57 58 89 90 129 130 171 172 211 212 251 252 289 290 327 328
9 10 27 28 49 50 79 80 119 120 161 162 201 202 241 242 279 280 319 320
7 8 23 24 43 44 71 72 109 110 151 152 191 192 231 232 269 270 309 310
5 6 19 20 39 40 65 66 101 102 143 144 183 184 223 224 261 262 301 302
3 4 15 16 35 36 59 60 93 94 135 136 175 176 215 216 253 254 293 294
1 2 11 12 29 30 51 52 83 84 127 128 167 168 205 206 243 244 283 284
I/O
d
f
e
 26
3. We can see from P value less than 0.05, different order picking method has significance difference to the 
average total CPU run time. Therefore, using Duncan Test, it cluster all order picking methods, shown in 
Table 4, it clustered the order picking method by three groups, that NCRI, MTLI and MLI all has the best 
performance, and fall in the same group. It all in 1 second finished 100 orders of order picking routing. We 
can see form Table 4, it also can found that PSO is the worst performance of average total CPU run time, but 
if using MLI initial solution to PSO, it can reducing CPU run time efficiency, it can improve the solution 
efficiency. 
 
Table 3: Variance Analysis of Average Total CPU Run Time 
 
Order Picking 
Method 
Numbers Average
Standard 
deviation 
F Test P Value
NCRI 30 0.619 0.038 3544.853 0.000
MTLI 30 1.561 0.126   
MLI 30 1.954 0.170   
PSO 30 188.215 15.820   
MLI Combine 
with PSO 
30 150.591 10.750   
 
Table 4: Duncan Test of Average Total CPU Run Time 
 
Duncan Group Order Picking 
Method 
Numbers
1 2 3 
NCRI 30 0.619   
MTLI 30 1.561   
MLI 30 1.954   
MLI Combine with 
PSO 
30  150.591  
PSO 30   188.215 
Significance  .573 1.000 1.000  
 
5  Conclusions 
 
The main purpose of this paper is discussing the improvement of order picking operations in distribution 
center. It expects according to order picking method to improve order picking routing planning, and improves 
the order picking performance in distribution center. Therefore, it discusses all kinds of order picking methods 
influence the order picking performance. And this research verified the performance of MLI. It is significance 
reducing order picking distance, and using the solution to be an initial solution of PSO, and find the better 
 28
and Order Batching in Distribution Center,” Proceedings of International Conference on Pacific Rim 
Management 16th Annual Meeting, Hawaiian pp. 520-525, 2006. 
[9] L. F. Hsieh, C. J. Huang, C. L. Huang, “Applying Particle Swarm Optimization to Plan Picking Routing 
in Warehouse Systems,” Proceedings of International Conference on Intelligent System Application to 
Power Systems, Taiwan, pp. 117-121, 2006. 
[10] M. Dorigo, “Optimization, Learning and Natural Algorithms,” Ph.D. Thesis. Politecnico di Milano, Italy, 
EU. (In Italian.), 1992. 
[11] R. C. Eberhart, Y. Shi, “Particle swarm optimization: developments, applications and resources,” 
Proceedings Congress on Evolutionary Computation, Vol. 1, pp. 27-30, 2001. 
[12] R. W. Hall, “Distance approximations for routing manual pickers in a warehouse,” IIE Transactions, Vol. 
25, No. 4, pp. 76-87, 1993. 
[13] Y. C. Ho, T. S. Su, “A Study on Optimizing Order-Picking Operations in Distribution Centers,” The 
Fourth Asia-Pacific Conference on Industrial Engineering and Management Systems, Taipei Taiwan, pp. 
18-20, 2002. 
 
 
 
 
 
 
 2
一、會議經過 
The 7th International Conference on Optimization: Techniques and Applications (ICOTA 7)是
探討最佳化理論領域一個相當正式的研討會，每三年舉辦一次，其主要目的是提供所有在產、
關、學及軟體開發者一個國際聚會的機會，大家齊聚ㄧ堂彼此交換構想、分享經驗及心得，並
藉由溝通及討論，研擬未來之發展方向。2007 年是第七屆，由十二月十二日至十五日共四天，
地點選在日本的神戶。每屆發表論文的人數都相當多，今年共有來自32個國家，254篇論文發
表，大會並特別安排六場精彩的專題演講，參加本次研討討會真是受益良多。大會共分為六十
餘個場次發表論文，每個場次約四至五篇論文，讓與會者能充份挑選自己有興趣的主題之場次
參與討論。大會主辦單位在閉幕餐會上除了供應豐盛的餐點外，並安排傳統的日本歌舞表演，
整個研討會到此在ㄧ片歡樂中圓滿閉幕。 
由於十二月中旬參加研討會，恰逢聖誕前之前，神戶街頭相當熱鬧，趁著研討會的空檔，
親身搭乘日本的電車，逛逛當地的商場，順道體驗當地的民俗風情。且神戶當地為紀念之前的
阪神大地震，為祈求神戶居民之平安，當地每年十二月均舉辦燈祭，以祈求人民的平安及世界
和平，場面相當壯觀！當地居民告訴我門今年是舉辦燈祭的最後一年！大家更是珍惜此一機
會，留下深刻的記憶。另外我也品嚐的當地著名且道地的大阪燒，參觀當地的古蹟－姬路城，
真是收穫良多。 
          
神戶燈祭(1)                              神戶燈祭(2) 
          
神戶鶴橋風月的大阪燒                       神戶古蹟－姬路城 
 4
二、研討會發表之論文 
 
Optimal Order Picking Planning for Distribution Center with Cross Aisle 
 
Ling-Feng Hsieh 
Professor, Department of Technology Management, Chung Hua University, Hsinchu 300, Taiwan, R.O.C. 
lfhsieh@chu.edu.tw 
 
Chien-Lin Huang 
Graduate student, Department of Technology Management, Chung Hua University, Hsinchu 300, Taiwan, 
R.O.C. 
m09403033@chu.edu.tw 
 
Abstract 
 
Order picking method is one of the most important operations in the distribution center. The route planning of 
order picking systems will allow for the possibilities of increasing in production efficiency, reducing the 
operation cost in distribution center, and improving the corporation competitiveness. In a distribution center 
with cross aisle, although the cross aisle layout may reduce the order picking distance, it also may raise the 
complexity for picking routing planning. Focus on this problem, a heuristic algorithm (called Maximum Loop 
Insertion) is proposed in this paper, as well as compare with other famous algorithms and Particle Swarm 
Optimization (PSO), in order to improve the order picking performance. According to the simulation 
experiment, it verified that the Maximum Loop Insertion algorithm actually achieves the better performance. 
Overall, the result of this research will enhance the best route planning of order picking systems in distribution 
center and provide the industry as a reference in the warehouse design in the future. 
 
Keywords: Order picking system, Cross aisle, Maximum Loop Insertion, Particle Swarm Optimization, 
Performance 
 
1  Introduction 
 
As economy develops and changes in consuming habit, it makes the types and structures of marketing channel 
are transferred to the supplier transported the products to retailer by distribution center. Therefore, it is an 
important issue about how to improve the distribution center operation efficiency. Due to the fact that 
consumer’s request has been changed from few items and small volume to many items and small volume, it is 
hoped that if the order picking operations can be finished in reasonable time or not will influence the 
operation cost and service level of distribution center. In internal operations of distribution center, the factors 
included warehouse layout, storage assignment strategies, order picking operations, which will influence order 
 6
 
2.2  Particle Swarm Optimization 
Kennedy, J. and R. C. Eberhart [6] proposed Particle Swarm Optimization (PSO) in 1995. It is similar to John 
Holland [10] proposed Genetic Algorithms (GA) in 1960. They are all belonging to Evolutionary computation 
and within the evolutionary generation to optimal solutions. The main concept of GA is the survival of the 
fittest which is proposed by Charles Darwin. That is using three basic operations, which is Reproduction, 
Crossover, and Mutation to imitate natural evolutionary process, and according to the evolutionary generation 
to optimal solutions. Therefore, PSO has no crossover and mutation, it is easier than GA, but is has better 
global optimal solution ability. 
PSO and Dorigo [10] proposed Ant Colony Optimization (ACO) in 1992 is all Swarm Intelligence 
algorithms that are according to swarm intelligence to solve problems. ACO is a cooperative heuristic 
searching algorithm inspired by the methodological study on the behavior of ants. The ants can find out the 
food is done by an indirect communication known as pheromone, left by the ants on the paths, and 
constructive to the shortest distance between the nest and food. 
PSO is according to three factors to find out the optimal solution, that is (1) the current moving direction by 
itself, (2) the previous experiment by itself, (3) the swarm experiments, and compare with Fitness Value which 
is computed by Fitness Function to revise the velocity and position of itself. 
The definitions of PSO related variances, lidX  is the particle i, d dimension, l  stage position. 1lidX +  is 
the particle i, d dimension, in 1l +  stage position. idP  represents the optimum position recorded by the ith 
particle in d dimension. gdP  is the optimum position resolved by a population of particles in d dimension. 
l
idV  is the velocity of the ith particle, d dimension in l  stage. 1lidV +  is the velocity of the ith particle, d 
dimension in 1l +  stage. ()rand  is random number between [0, 1]. c1 and c2 are learning factors which 
controls the acceleration of particle velocity. w  is the inertial constant that allows user to control the 
parameters. A small w  value will direct searches within current space, and a large w  value will indicate 
searches in new space. Appropriate selection of w  value, c1 and c2 learning factors can expand search space 
to achieve a balanced result. The velocity and position update formula is shown in Formula (1) and Formula 
(2). 
 
)XP(()randc)XP(()randcVwV l2
l
1
l1l
idgdidididid −⋅×+−⋅⋅+⋅=+      (1) 
1ll
idid
1l
id VXX ++=+      (2) 
 
The original two scholars which is proposed PSO is not using inertia weight w . The inertia weight w  is 
proposed by Shiand and Eberhart [11] in 1998, illustrated inertia weight w  using can make the solution 
process to find out the global best solution faster. The characteristic of inertia weight w  is similar to cooling 
parameter of Simulated Annealing (SA) that can make the solution become convergence. Shi and Eberhart 
also illustrates w  between 0.8 and 1.2, it has more chance to find out the global solution. 
 
 
 8
 117 118 157 158 195 196 233 234 273 274 317 318 349 350 371 372 389 390 399 400
107 108 147 148 185 186 225 226 265 266 307 308 341 342 365 366 385 386 397 398
99 100 139 140 177 178 217 218 257 258 299 300 335 336 361 362 381 382 395 396
91 92 131 132 169 170 209 210 249 250 291 292 329 330 357 358 377 378 393 394
81 82 121 122 159 160 199 200 239 240 281 282 321 322 351 352 373 374 391 392
73 74 111 112 149 150 189 190 229 230 271 272 311 312 343 344 367 368 387 388
67 68 103 104 141 142 181 182 221 222 263 264 303 304 337 338 363 364 383 384
61 62 95 96 133 134 173 174 213 214 255 256 295 296 331 332 359 360 379 380
55 56 87 88 125 126 165 166 203 204 247 248 287 288 325 326 355 356 375 376
47 48 77 78 115 116 155 156 193 194 237 238 277 278 315 316 347 348 369 370
31 32 53 54 85 86 123 124 163 164 207 208 245 246 285 286 323 324 353 354
25 26 45 46 75 76 113 114 153 154 197 198 235 236 275 276 313 314 345 346
21 22 41 42 69 70 105 106 145 146 187 188 227 228 267 268 305 306 339 340
17 18 37 38 63 64 97 98 137 138 179 180 219 220 259 260 297 298 333 334
13 14 33 34 57 58 89 90 129 130 171 172 211 212 251 252 289 290 327 328
9 10 27 28 49 50 79 80 119 120 161 162 201 202 241 242 279 280 319 320
7 8 23 24 43 44 71 72 109 110 151 152 191 192 231 232 269 270 309 310
5 6 19 20 39 40 65 66 101 102 143 144 183 184 223 224 261 262 301 302
3 4 15 16 35 36 59 60 93 94 135 136 175 176 215 216 253 254 293 294
1 2 11 12 29 30 51 52 83 84 127 128 167 168 205 206 243 244 283 284
Ai
sle
 1
Ai
sle
 10
I/O
Front Aisle
Black Aisle
Cross Aisle
(a) 
36 
a 
b 
CoR 
 
117 118 157 158 195 196 233 234 273 274 317 318 349 350 371 372 389 390 399 400
107 108 147 148 185 186 225 226 265 266 307 308 341 342 365 366 385 386 397 398
99 100 139 140 177 178 217 218 257 258 299 300 335 336 361 362 381 382 395 396
91 92 131 132 169 170 209 210 249 250 291 292 329 330 357 358 377 378 393 394
81 82 121 122 159 160 199 200 239 240 281 282 321 322 351 352 373 374 391 392
73 74 111 112 149 150 189 190 229 230 271 272 311 312 343 344 367 368 387 388
67 68 103 104 141 142 181 182 221 222 263 264 303 304 337 338 363 364 383 384
61 62 95 96 133 134 173 174 213 214 255 256 295 296 331 332 359 360 379 380
55 56 87 88 125 126 165 166 203 204 247 248 287 288 325 326 355 356 375 376
47 48 77 78 115 116 155 156 193 194 237 238 277 278 315 316 347 348 369 370
31 32 53 54 85 86 123 124 163 164 207 208 245 246 285 286 323 324 353 354
25 26 45 46 75 76 113 114 153 154 197 198 235 236 275 276 313 314 345 346
21 22 41 42 69 70 105 106 145 146 187 188 227 228 267 268 305 306 339 340
17 18 37 38 63 64 97 98 137 138 179 180 219 220 259 260 297 298 333 334
13 14 33 34 57 58 89 90 129 130 171 172 211 212 251 252 289 290 327 328
9 10 27 28 49 50 79 80 119 120 161 162 201 202 241 242 279 280 319 320
7 8 23 24 43 44 71 72 109 110 151 152 191 192 231 232 269 270 309 310
5 6 19 20 39 40 65 66 101 102 143 144 183 184 223 224 261 262 301 302
3 4 15 16 35 36 59 60 93 94 135 136 175 176 215 216 253 254 293 294
1 2 11 12 29 30 51 52 83 84 127 128 167 168 205 206 243 244 283 284
I/O
c
d
e
f
(b) 
En
d 
A
re
a 
Fr
on
t A
re
a 
 
Figure 1: NCRI Order Picking Routing 
 
3.2.1  Nearest Center of Rectangular Insertion (NCRI) 
In this sub-section, we will introduce the Nearest Center of Rectangular Insertion (NCRI) which is proposed 
by Ho and Su [13]. It supposed the pickers walked in the middle of the aisle, the pickers can pick the two 
sides products in the same time. Consequently, the two sides locations can considered the same point, and 
supposed the I/O point is (0,0), and (xj, yj) is means mi products in the order of each item j’s location, such as 
∀j =1,2,..., mi. 
First, we are choosing the nearest two order picking points from I/O, such as the point a, b, in Fig. 1 (a). 
These two points and I/O depot of the practice traveling path is surrounded to rectangular circle. All have 
picked order picking points will form to the Loop Set (LS). According to the Formula (3), and compute the all 
picking points’ location in LS, which form to Center of Rectangular (CoR). 
 
{ } { } { } { }⎟⎠
⎞⎜⎝
⎛ ∈+∈∈+∈=
2
LSn;yminLSn;ymax
 , 
2
LSn;xminLSn;xmax
CoR nnnn      (3) 
 
Calculation the distance between all other order picking points j to CoR, which is calculated by Formula (4). 
We find the nearest distance order picking point k, and insert it into the LS, shown in Formula (5). If there are 
more than two orders picking points are all the same nearest distance of CoR, then choosing whichever one to 
insert. 
 
LSj;yyxxd CoRjCoRjj,CoR ∉∀−+−=      (4) 
 { }LSj;dmind j,CoRk,CoR ∉=      (5) 
 
The pickers from order picking point u' to order picking u", the practical traveling distances is TDu'u''. If the 
 10
 
Figure 2: MTLI Order Picking Routing 
 
3.2.3  Particle Swarm Optimization 
Particle Swarm Optimization is an optimal tool of evolutionary generation, and is Swarm Intelligence 
algorithm. It found the each particle by self optimal memory solution, and swarm optimal solution. Then 
update the velocity and position until all particles find out the global optimal solution. 
 
3.2.3.1  PSO Parameter Setting 
According to result of Hsieh et al. [9], the parameters setting is as following: 
Number of Particles: The Particle setting is 30. Maximum Velocity: Because the storage locations added to 
400, so in this paper, we raises the velocity lidV  is between (-80, 80), then the maximum velocity is at 160. 
Learning Factor: Learning factors of c1 and c2 usually have a value of 2. Inertia Weight: PSO with an inertia 
weight is set 0.8. Stop Condition: The maximum number of iterations is 200 or all particles converge in the 
same point. 
 
3.2.3.2  PSO Fitting Function 
The function of the PSO fitting equation is evaluate the particle obtain the optimal solution or not. Therefore, 
it set up different function based on different problem. In this paper, the main objective is minimizing total 
order picking distances. 
 
3.2.3.3  PSO Algorithm Process 
The PSO algorithm process is shown in Fig. 3 
 117 118 157 158 195 196 233 234 273 274 317 318 349 350 371 372 389 390 399 400
107 108 147 148 185 186 225 226 265 266 307 308 341 342 365 366 385 386 397 398
99 100 139 140 177 178 217 218 257 258 299 300 335 336 361 362 381 382 395 396
91 92 131 132 169 170 209 210 249 250 291 292 329 330 357 358 377 378 393 394
81 82 121 122 159 160 199 200 239 240 281 282 321 322 351 352 373 374 391 392
73 74 111 112 149 150 189 190 229 230 271 272 311 312 343 344 367 368 387 388
67 68 103 104 141 142 181 182 221 222 263 264 303 304 337 338 363 364 383 384
61 62 95 96 133 134 173 174 213 214 255 256 295 296 331 332 359 360 379 380
55 56 87 88 125 126 165 166 203 204 247 248 287 288 325 326 355 356 375 376
47 48 77 78 115 116 155 156 193 194 237 238 277 278 315 316 347 348 369 370
31 32 53 54 85 86 123 124 163 164 207 208 245 246 285 286 323 324 353 354
25 26 45 46 75 76 113 114 153 154 197 198 235 236 275 276 313 314 345 346
21 22 41 42 69 70 105 106 145 146 187 188 227 228 267 268 305 306 339 340
17 18 37 38 63 64 97 98 137 138 179 180 219 220 259 260 297 298 333 334
13 14 33 34 57 58 89 90 129 130 171 172 211 212 251 252 289 290 327 328
9 10 27 28 49 50 79 80 119 120 161 162 201 202 241 242 279 280 319 320
7 8 23 24 43 44 71 72 109 110 151 152 191 192 231 232 269 270 309 310
5 6 19 20 39 40 65 66 101 102 143 144 183 184 223 224 261 262 301 302
3 4 15 16 35 36 59 60 93 94 135 136 175 176 215 216 253 254 293 294
1 2 11 12 29 30 51 52 83 84 127 128 167 168 205 206 243 244 283 284
I/O
a 
(a) (b) 
117 118 157 158 195 196 233 234 273 274 317 318 349 350 371 372 389 390 399 400
107 108 147 148 185 186 225 226 265 266 307 308 341 342 365 366 385 386 397 398
99 100 139 140 177 178 217 218 257 258 299 300 335 336 361 362 381 382 395 396
91 92 131 132 169 170 209 210 249 250 291 292 329 330 357 358 377 378 393 394
81 82 121 122 159 160 199 200 239 240 281 282 321 322 351 352 373 374 391 392
73 74 111 112 149 150 189 190 229 230 271 272 311 312 343 344 367 368 387 388
67 68 103 104 141 142 181 182 221 222 263 264 303 304 337 338 363 364 383 384
61 62 95 96 133 134 173 174 213 214 255 256 295 296 331 332 359 360 379 380
55 56 87 88 125 126 165 166 203 204 247 248 287 288 325 326 355 356 375 376
47 48 77 78 115 116 155 156 193 194 237 238 277 278 315 316 347 348 369 370
31 32 53 54 85 86 123 124 163 164 207 208 245 246 285 286 323 324 353 354
25 26 45 46 75 76 113 114 153 154 197 198 235 236 275 276 313 314 345 346
21 22 41 42 69 70 105 106 145 146 187 188 227 228 267 268 305 306 339 340
17 18 37 38 63 64 97 98 137 138 179 180 219 220 259 260 297 298 333 334
13 14 33 34 57 58 89 90 129 130 171 172 211 212 251 252 289 290 327 328
9 10 27 28 49 50 79 80 119 120 161 162 201 202 241 242 279 280 319 320
7 8 23 24 43 44 71 72 109 110 151 152 191 192 231 232 269 270 309 310
5 6 19 20 39 40 65 66 101 102 143 144 183 184 223 224 261 262 301 302
3 4 15 16 35 36 59 60 93 94 135 136 175 176 215 216 253 254 293 294
1 2 11 12 29 30 51 52 83 84 127 128 167 168 205 206 243 244 283 284
I/O
b
c
d
e
f
 12
using the same method to repeat, and find the next order picking point, until included all order picking points 
of order i, shown in Fig. 4 (b). Then, obtained the order picking sequence, I/O, 23, 121, 368, 114, 66, 36, and 
I/O. Finally, calculated the order picking distance of order i, it can avoid when construct the path, according to 
the shortest distance, then fall in local solution.  
 
Figure 4: MLI Order Picking Routing 
 
The MLI algorithm process is as following: 
Step 1: First, find the nearest aisle which has order picking points from I/O depot. Then, find out the 
nearest order picking point from I/O in that aisle, shown in Fig. 4 (a), point a. 
Step 2: Find the farthest depth order picking point from I/O depot. If there are the same depth of order 
picking points, then choosing the nearest order picking point from I/O, shown Fig. 4 (a), point b. 
Step 3: Find the farthest aisle from I/O depot, and then find the nearest order picking point from I/O depot, 
shown in Fig. 4 (a), point c. 
Step 4: Check the previous three steps, and find is it repeated or not. If there is repeat one, then delete the 
repeat point, then using remnant points and I/O depot, and construct the maximum loop traveling 
routing with the shortest traveling distance. 
Step 5: According to the shortest insert distance, then from the non choosing points to find the insert order 
picking point k which add the shortest distance. 
Step 6: Insert this order picking point k in the loop, it formed to a new loop. If there are the same shortest 
distance points, then choosing by random. 
Step 7: Check the constructed loop included all order picking points or not. If already included all order 
picking points, then dropped to step 8, if not then go back to step 5. 
Step 8: Compute the traveling distance of the constructed loop, then finished the order picking routing 
planning. 
 
 
 
(a)
117 118 157 158 195 196 233 234 273 274 317 318 349 350 371 372 389 390 399 400
107 108 147 148 185 186 225 226 265 266 307 308 341 342 365 366 385 386 397 398
99 100 139 140 177 178 217 218 257 258 299 300 335 336 361 362 381 382 395 396
91 92 131 132 169 170 209 210 249 250 291 292 329 330 357 358 377 378 393 394
81 82 121 122 159 160 199 200 239 240 281 282 321 322 351 352 373 374 391 392
73 74 111 112 149 150 189 190 229 230 271 272 311 312 343 344 367 368 387 388
67 68 103 104 141 142 181 182 221 222 263 264 303 304 337 338 363 364 383 384
61 62 95 96 133 134 173 174 213 214 255 256 295 296 331 332 359 360 379 380
55 56 87 88 125 126 165 166 203 204 247 248 287 288 325 326 355 356 375 376
47 48 77 78 115 116 155 156 193 194 237 238 277 278 315 316 347 348 369 370
31 32 53 54 85 86 123 124 163 164 207 208 245 246 285 286 323 324 353 354
25 26 45 46 75 76 113 114 153 154 197 198 235 236 275 276 313 314 345 346
21 22 41 42 69 70 105 106 145 146 187 188 227 228 267 268 305 306 339 340
17 18 37 38 63 64 97 98 137 138 179 180 219 220 259 260 297 298 333 334
13 14 33 34 57 58 89 90 129 130 171 172 211 212 251 252 289 290 327 328
9 10 27 28 49 50 79 80 119 120 161 162 201 202 241 242 279 280 319 320
7 8 23 24 43 44 71 72 109 110 151 152 191 192 231 232 269 270 309 310
5 6 19 20 39 40 65 66 101 102 143 144 183 184 223 224 261 262 301 302
3 4 15 16 35 36 59 60 93 94 135 136 175 176 215 216 253 254 293 294
1 2 11 12 29 30 51 52 83 84 127 128 167 168 205 206 243 244 283 284
I/O
a 
b 
c
(b) 
117 118 157 158 195 196 233 234 273 274 317 318 349 350 371 372 389 390 399 400
107 108 147 148 185 186 225 226 265 266 307 308 341 342 365 366 385 386 397 398
99 100 139 140 177 178 217 218 257 258 299 300 335 336 361 362 381 382 395 396
91 92 131 132 169 170 209 210 249 250 291 292 329 330 357 358 377 378 393 394
81 82 121 122 159 160 199 200 239 240 281 282 321 322 351 352 373 374 391 392
73 74 111 112 149 150 189 190 229 230 271 272 311 312 343 344 367 368 387 388
67 68 103 104 141 142 181 182 221 222 263 264 303 304 337 338 363 364 383 384
61 62 95 96 133 134 173 174 213 214 255 256 295 296 331 332 359 360 379 380
55 56 87 88 125 126 165 166 203 204 247 248 287 288 325 326 355 356 375 376
47 48 77 78 115 116 155 156 193 194 237 238 277 278 315 316 347 348 369 370
31 32 53 54 85 86 123 124 163 164 207 208 245 246 285 286 323 324 353 354
25 26 45 46 75 76 113 114 153 154 197 198 235 236 275 276 313 314 345 346
21 22 41 42 69 70 105 106 145 146 187 188 227 228 267 268 305 306 339 340
17 18 37 38 63 64 97 98 137 138 179 180 219 220 259 260 297 298 333 334
13 14 33 34 57 58 89 90 129 130 171 172 211 212 251 252 289 290 327 328
9 10 27 28 49 50 79 80 119 120 161 162 201 202 241 242 279 280 319 320
7 8 23 24 43 44 71 72 109 110 151 152 191 192 231 232 269 270 309 310
5 6 19 20 39 40 65 66 101 102 143 144 183 184 223 224 261 262 301 302
3 4 15 16 35 36 59 60 93 94 135 136 175 176 215 216 253 254 293 294
1 2 11 12 29 30 51 52 83 84 127 128 167 168 205 206 243 244 283 284
I/O
d
f
e
 14
3. We can see from P value less than 0.05, different order picking method has significance difference to the 
average total CPU run time. Therefore, using Duncan Test, it cluster all order picking methods, shown in 
Table 4, it clustered the order picking method by three groups, that NCRI, MTLI and MLI all has the best 
performance, and fall in the same group. It all in 1 second finished 100 orders of order picking routing. We 
can see form Table 4, it also can found that PSO is the worst performance of average total CPU run time, but 
if using MLI initial solution to PSO, it can reducing CPU run time efficiency, it can improve the solution 
efficiency. 
 
Table 3: Variance Analysis of Average Total CPU Run Time 
 
Order Picking 
Method 
Numbers Average
Standard 
deviation 
F Test P Value
NCRI 30 0.619 0.038 3544.853 0.000
MTLI 30 1.561 0.126   
MLI 30 1.954 0.170   
PSO 30 188.215 15.820   
MLI Combine 
with PSO 
30 150.591 10.750   
 
Table 4: Duncan Test of Average Total CPU Run Time 
 
Duncan Group Order Picking 
Method 
Numbers
1 2 3 
NCRI 30 0.619   
MTLI 30 1.561   
MLI 30 1.954   
MLI Combine with 
PSO 
30  150.591  
PSO 30   188.215 
Significance  .573 1.000 1.000  
 
5  Conclusions 
 
The main purpose of this paper is discussing the improvement of order picking operations in distribution 
center. It expects according to order picking method to improve order picking routing planning, and improves 
the order picking performance in distribution center. Therefore, it discusses all kinds of order picking methods 
influence the order picking performance. And this research verified the performance of MLI. It is significance 
reducing order picking distance, and using the solution to be an initial solution of PSO, and find the better 
