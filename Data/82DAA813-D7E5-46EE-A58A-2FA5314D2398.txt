2Hiding Data in Color Palette Images with Hybrid Strategies
Chin-Chen Chang
1,2
, Chia-Chen Lin2 and Yi-Hui Chen
3
Abstract
In this paper, we proposed a data embedding scheme for embedding secret data into color
palette images by using a hybrid combining pixel prediction, clustering and dissimilar pair
concepts. To maintain better image quality, a predefined threshold is defined and a
luminance-sorted algorithm is used to perform clustering and select similar colors from the color
palette for data embedding. Experimental results confirm that our proposed scheme can
successfully enhance hiding capacity while maintaining a satisfactory image quality of the
stego-image.
Keywords: Data hiding, luminance-sorted algorithm, clustering, pixel prediction, dissimilar
pair
42 Previous Works
In this section, we briefly introduce several previous works that embed secret data into a
palette-based image. In 1999, Fridrich [6] proposed a steganographic method by using a Pseudo
Random Number Generator (PRNG) and a defined equation as (R + G + B) mod 2, where R, G
and B represent the Red, Green and Blue values of the codeword, respectively. In their data
embedding approach, the selected pixel is encoded by the codeword that its parity value equals to
the secret bit. In extracting approach, firstly, the pixels are selected by using the same PRNG and
extracting the secrets by using equation as (R + G + B) mod 2.
In 2004, Tzeng et al. [9] proposed a data embedding by applying a color ordering and mapping
strategy. In Tzeng et al.’s method, a given pixel can find its neighboring pixels. Subsequently,
they sorted those neighboring pixels by using their luminance values. The luminance value is
computed as Equation (1) [9].
c = 0.299r + 0.587g + 0.114b. (1)
Here, each codeword of a color palette is composed of three corresponding values from three bit
planes, Red, Green and Blue, denoted as r, g and b, respectively. The sorting rule [9] is defined as
follows.













otherwise,
)andand(if,
)andand(
or)and(
or)(if,
21
21212121
212121
2121
2121
cc
bbggrrcc
ggrrcc
rrcc
cccc
, (2)
where c1 and c2 represent two different color pixels, which are derived by using Equation(1).
Before data embedding, two thresholds Tc and Td must be used to decide whether the inputted
pixel is embeddable. Then, the following equation used to define pixel can be replaced with
which codeword according to its corresponding secret data.
6After sorting, the similar codewords whose indices will be very close to each other (the
similar codewords will have closer indices). Note that the closer indices can be placed in a
smaller color palette called a state color palette. Thus, the distortion should be small when a pixel
in the image is replaced with a pixel from its state color palette. In our proposed scheme, we
adopt this property to create an efficient data embedding and data extraction as demonstrated in
Subsections 3.1 and 3.2, respectively.
3.1 Embedding Procedure
In our embedding procedure as shown in Fig. 1, the encoder scans image I in a raster-scanning
order and uses its neighboring pixels to generate a state color palette for each pixel. The process
for generating the state color palette is shown in Fig. 2. As shown in Fig. 2(a), except for the
pixels located in the first row and first column, each residual pixel uses its neighboring upper
pixel U and left pixel L to generate a prediction value Px by using Equation (4).
(PR, PG, PB) = ((UR + LR )/2, (UG + LG )/2, (UB + LB )/2), (4)
where components PR, PG, PB are R, G and B bit planes for pixel Px. Additionally, U and L are
composed of bit planes R, G and B and are denoted as (UR, UG, UB) and (LR, LG, LB), respectively.
For a predicted pixel Px, the most similar codeword can be found from the sorted color palette.
Assume that the index of the most similar codeword is k, as shown in Fig. 2(b). As Fig. 2(c)
shows, a state color palette is composed of two parts. The first part covers indices from (k-1)th to
(k+2)th in the sorted color palette. The second part consists of the dissimilar codewords of those
in the first part of the state color palette.
8010
100
000
110
011
101
001
111
(Rk, Gk, Bk)
(Rk+1, Gk+1, Bk+1)
(Rk-1, Gk-1, Bk-1)
(Rk+2, Gk+2, Bk+2)
1
2
0
3
4
5
6
7
),,( 111   kkk BGR
),,( kkk BGR 
),,( 111   kkk BGR
),,( 222   kkk BGR
Secret data
Index i
State color palette
Fig. 3 Phase-1 data embedding: the mapping relationship between the secret data and its
corresponding index of codeword
Phase-2 data embedding concept is shown in Fig. 4. In Phase-2, the encoder first identifies
the most similar codeword sc from the sorted color palette for the current pixel. Then, the
dissimilar codeword dsc of sc is also found from the same color palette. In addition, the Phase-2
data embedding procedure is broken into two cases and the indices 0 and 255 in the sorted color
palette are reserved for the second case of Phase-2.
PU = (UR, UG, UB)
PL = (LR, LG, LB)
PX = (PR, PG, PB)
0
(R1, G1, B1)1
(Rk, Gk, Bk)sc
(Rk+1, Gk+1, Bk+1)sc+1
(Rk-1, Gk-1, Bk-1)sc-1
(Rk+2, Gk+2, Bk+2)sc+2
.
.
.
.
.
.
255
Sorted color
palette
(a) (b)
Dissimilar
Codeword
(dsc)
Index
Reserved
codeword
Reserved
codeword
(UR , UG , UB )
L = (LR , LG , LB )
U
L
Px = (PR , PG , PB )
Fig. 4 Example of Phase-2 data embedding
In the first case of Phase-2 data embedding, D(sc, Px) is less than D(dsc, Px). If the secret data
is‘0’, the pixel is encoded with the codeword sc; otherwise, it is encoded with the codeword dsc.
10
Fig. 5 The pseudo code of embedding algorithm
3.2 Extracting Procedure
In the extracting procedure, pixels located in the first row and column are directly decoded by the
sorted color palette. For the residual pixels, receivers can apply the extracting strategies to extract
// The algorithm of embedding policy
// Threshold: T
// The temporary variable for selecting Phase-1 or Phase-2 embedding procedure: tag
01 Input a sorted color palette codebook: Csort
02 Do the loop until all pixels are scanned {
03 Input the current pixel Po
04 Input the predicted pixel for pixel Po: Px
05 Input a state codebook for pixel Px: Cstate
06 tag = true;
07 tag = Phase-1_embedding ()
08 If tag == false Phase-2_embedding ()
09 }
// Phase-1 embedding procedure
10 Function Phase-1_embedding () {
11 Input codeword Pi while Pi’s index in Cstate is equal to secret data
12 If (Pi’s index < 4 and D(Po, Pi) < T) or (Pi’s index4 and D(Po, P(i-4)) < T)
13 Outputindicator ‘1’and index of Pi
14 Else tag = false
15 Return tag
16 }
// Phase-2 embedding procedure
17 Function Phase-2_embedding() {
18 Input the best codeword in Csort for predicted pixel Px: sc
19 Input sc’s dissimilar codeword in Csort: dsc
20 If D(Px, sc) < D(Px, dsc) {
21 If secret bit =‘0’Output indicator‘0’and index of sc
22 Else Output indicator‘0’and index of dsc
23 } Else {
24 If secret bit =‘0’Output indicator‘0’, indices 0 and sc
25 Else Output indicator‘0’, indices 255 and sc
26 }
27 }
12
An inputted
index idx
idx > 3
Y
N
Decode the pixel
with codeword idx-4
of state color palette
Decode the pixel
with codeword idx of
state color palette
1
Ex:
1
5 5-4=1
idx
idx-4
Inputted idx Decode the pixel with
which codeword
Fig. 7 Phase-1 extraction policy
As for the Phase-2 extracting policy shown in Fig. 8, two scenarios can be used for decoding.
While index idx2 is ‘0’ or ‘255’, the folowing index idx3 is used to reconstruct the pixel. The
hidden data is judged as ‘0’ or ‘1’ if the related index idx2 is ‘0’ or ‘255’, respectively. If the 
value of index idx2 is other, the decoder uses neighboring upper and left pixels of the currently
processing index to produce a prediction pixel Px.
Fig. 8 Phase-2 extraction policy
In essence, the dissimilar pairs can be constructed in advance based on the rules shown in
Fig. 2. Therefore, the dissimilar codeword of the index idx2 can be found and denoted as idx4.
Next, the hidden data is judged as‘0’if D(Px, idx2) is less than D(Px, idx4); otherwise, the hidden
data is judged as ‘1’. In reconstructing the pixel, the decoder selects the codeword with the
smaller distortion for reconstruction. For clarity description, the pseudo code of extracting
algorithm is shown in Fig. 9.
An inputted
index idx2
idx2 is 0 or
255
idx2 is 0
Y
N
The secret
data is 0
The secret
data is 1
Input and transform
next compression codes
to be an index idx3
Decode this
pixel with
index idx3
Find out the
dissimilar
codewords of idx2
as idx4
D(Px, idx2) <
D(Px, idx4)
The retrieved secret data is 0
and the pixel is decoded by idx2
The retrieved secret data is 1
and the pixel is decoded by idx4
Y
N
Input the predicted pixel Px value
by using its neighboring pixels
14
4 Experimental Results
In our experiments, three 512×512 color images shown in Fig. 10, “Lena”, “Pepper” and 
“Baboon”are served as test images. Two measures, hiding capacity and PSNR, were used to
evaluate the performance of the proposed scheme. The hiding capacity represents the number of
secret data embedded in a color image. The PSNR value [1-6, 9] simply indicates the image
quality of a stego-image generated by our proposed scheme. Because each color image consists
of three planes, we obtain the PSNR for a color image from averaging the PSNRs of these three
planes in our experiments.
(a) Lena (b) Pepper (c) Baboon
PSNR: 35.451 dB PSNR: 33.008 dB PSNR:30.827 dB
Fig. 10 The three 512×512 color images served as test images
The visual qualities of the stego-images “Lena”, “Pepper”and “Baboon”, which are
reconstructed during the extracting procedure, are shown in Figs. 11(a) to 11(c), respectively. The
PSNRs in Fig. 11 are very similar to those of the original images, making it difficult for human
eyes to detect the difference between the original images and the stego-images.
(a) Lena (b) Pepper (c) Baboon
PSNR: 35.42 dB PSNR: 33.00 dB PSNR: 30.82 dB
Hiding capacity: 307 Kb Hiding capacity: 271Kb Hiding capacity: 258 Kb
Fig. 11. Three stego-images at threshold T=20
The performance of the proposed scheme in image quality of the stego-image and hiding
capacity are listed in Table 1. In essence, increasing threshold T causes a decrease in PSNR and
an increase in hiding capacity H. Because a variety of hiding strategies for different scenarios are
16
Based on the experimental results demonstrated in Table 2, we also discover Chan and
Chang’s scheme can not compete with ours although it superiors Fridrich’s and Tzeng et al.’s
schemes. To further demonstrate the performance of our scheme on image quality at the large
hiding capacity, we listed the comparison between our scheme and Chan and Chang’s scheme
regarding image quality when hiding capacity is 250Kb, 300Kb, 350Kb and 400Kb, respectively,
in Table 3.
Table 3 The further image quality comparisons between Chan and Chang’s scheme and our
scheme at the same hiding capacity
Chan and Chang’s scheme Our proposed scheme
Lena Pepper Baboon Lena Pepper BaboonHiding capacity
PSNR (dB) PSNR (dB)
255 Kb 33.520 30.560 25.22 35.450(T=3)
33.000
(T=5)
30.820
(T=10)
300 Kb 32.559 29.321 < 25.0 35.428(T=20)
32.966
(T=55)
30.708
(T=205)
350 Kb 29.881 27.473 < 25.0 35.277(T=45)
32.751
(T=120)
30.094
(T=500)
400 Kb 28.921 25.509 < 25.0 34.942(T=80)
32.321
(T=200)
28.774
(T=1000)
From Table 3, we can see that higher values of thresholds Ts lead to higher hiding capacity
but lower image quality. In addition, threshold values Ts for smooth images are smaller than
those for complex ones when the hiding capacity is the same. For example, threshold values Ts
for image“Lena”and“Pepper”are smaller than that for image“Baboon”. Certainly, the threshold
values Ts of“Lena”and“Pepper”can be enlarged to provide a high hiding capacity. For example,
if threshold T=1000 “Pepper”can hide 580Kb secret data and maintains PSNR as 28.85. As for
“Lena”, it can hide 655Kb secret data and maintains PSNR as 28.93 when its threshold T is set as
1000.
5 Conclusions
In this paper, a simple data embedding scheme for color image is proposed based on the color
palette and a hybrid combining pixel prediction, clustering and dissimilar pair concepts. To
increase hiding capacity and maintain good image quality of a stego-image, two hiding strategies
18
PICS Conference, Savannah, Georgia, pp. 285–289, April 1999.
[7] Lee, R. C. T., Chin, Y. H. and Chang, S. C., “Application of Principal Component Analysis to 
Multikey Searching,” IEEE Transactions on Software Engineering, SE-2(3), pp. 185-193,
1976.
[8] Pritchard, D. H., “U. S. Color Television Fundamentals – a Review,” IEEE Transactions on
Consumer Electronics, CE-23(4), pp. 467-478, 1977.
[9] Tzeng, C. H., Yang, Z. F. and Tsai, W.H., “Adaptive Data Hiding in Palette Images by Color
Ordering and Mapping with Security Protection,” IEEE Transactions on Communications,
52(5), pp. 791–800, 2004.
