 2 
行政院國家科學委員會專題研究計畫成果報告 
多核心嵌入式之軟體開發模型 
子計畫一:多核心嵌入式之軟體開發模型(1/2) 
 
計畫編號：98-2220-E-007-027 
 
執行期限：98 年 8 月 1 日至 99 年 7 月 31 日 
計畫主持人： 李政崑教授   國立清華大學資訊工程學系(所) 
 
一、中文摘要 
 
 
在過去幾年中，嵌入式多核心平台
迅速蓬勃的發展，使嵌入式多核心平台
在市場上已佔有舉足輕重的地位。為了
達到降低成本、提昇效能以及減少能源
消耗的目的，同質或異質的多核心平台
被廣泛的使用。然而，因為平行程式碼
的撰寫、多核心系統特殊的偵錯模式以
及高階程式語言的效能最佳化都是嵌入
式多核心軟體開發者必頇考慮的議題，
所以目前嵌入式多核心之軟體的開發仍
然是很大的挑戰。在本計劃中，將對這
些問提供解決的方案。 
 
本子計畫主要可分為三個項目:第
一，為了讓使用者得以利用高效能的平
行化程式框架產生程式碼，進而輕易的
撰寫可靠的多核心程式，本計畫以
Eclipse 為基礎平台，建立模型驅動系統
串流語言開發工具，以簡化難以處理的
多核心溝通問題。本計劃也提供多核心
系統分散式追蹤除錯器，來幫助程式開
發者更有效率的進行程式偵錯。第三，
本計畫提供具機率的指標分析工具，可
以有效的提升指標分析的準確度及速
度。 
 
經由本計畫提供的開發工具、偵錯
工具以及分析工具，未來不僅可以有效
的將工作自動分配至各個處理器上，使
的各處理器同時運算，而不花費過多時
間閒置以及等待。同時也降低了多核心
處理器架構設計及相關軟體人才的需求
門檻，並且增進國內系統設計產業的國
際競爭力。 
 
 
關鍵詞：嵌入式系統、多核心平台、
模型驅動系統、串流程式語言、偵錯
器、具機率的指標分析 
 
Abstract 
 
 
In this research project, our research and 
development are aimed at the embedded 
multi-core system. There is always a 
challenge in developing software on the 
embedded multi-core system. A software 
developer must face the problem on 
writing parallel program code, debugging 
multicore application, and high-level 
language optimization. Hence, solutions 
are suggested to these problems in this 
project. 
 
This subproject includes three items. First, 
a model-driven streaming language 
development tool for embedded multi-core 
platform is established base on the Eclipse 
project. Also, a multi-core system‟s 
distributed trace debugger for embedded 
multi-core system is provided to allow 
programmer to conduct debugging by 
recovering system state to a specific 
running time on the simulator. Third, we 
build a probability point analysis tool, 
 4 
縮短開發時程並且增加系統可靠度的目
的，對於台灣多核心嵌入式平台產業的
發展必能夠有相當的助益。 
 
 
三、結果與討論 
   
在本年度中各項子計畫主要完成的具
體成果分述如下: 
 
1. 模型驅動系統串流語言開發工具
(MSLDT) 
 
    有鑑於在嵌入式多核心平台上開發應
用程式，對程式開發人員是件相當困難的
事，現今在多核心平台上開發應用程式，
如何有效的取得高度平行化的程式，並妥
善的取得溝通及計算的覆載，一直以來都
是程式開發的瓶頸。 
 
由於多核心架構上之記憶體存取不如一般
單一處理器上之單純，不同處理器之間的
資料傳輸通常隱含著複雜的溝通機制。本
模組利用串流機制，提供一套可在多核心
系統上的各核心間快速的資料傳輸機制
[1-2]。藉由本多核心串流呼叫函式庫的研
發，程式開發人員將可在嵌入式環境中利
用有限的硬體資源，發展高效能之多核心
應用程式。其架構如圖一所示。 
 
圖一 資料傳輸機制架構 
 
本計畫對 Eclipse[3-5]進行擴展，包括提供
串流語言的設計樣式、串流語言的圖形開
發面板、串流語言 c 程式碼轉換介面以及
整合多核心 tool-chain 介面，其架構如圖二
所示。 
 
圖二 
    而根據多核心串流語言的特點其功能
整理如圖三。其中紫色區塊為本計畫自由
軟體的項目，該部分的功能將可讓使用者
使用串流語言 c 語言程式碼來協助程式開
發人員迅速的開發串流語言平行化程式於
多核心嵌入式平台上。 
 
 多核心系統軟體開發模型的串流呼叫
函式庫功能為幫助使用者在主程式上，利
用串流遠端呼叫的機制，可以把事先分割
好的程序載入到指定的核心 上，然後執
行，另外還可以設定程序的優先度，優先
度越低有越高優先權。最後，主程式可以
呼叫其他核心以中止程序，並釋放所佔用
資源。因此讓使用者輕易地規畫多核心平
行程式藉此大幅提升執行效能。 
 
圖三 
 本計畫選用開放的Eclipse平台來建構
模型驅動系統串流語言開發工具，提供新
穎的串流語言模型來協助開發高度平行化
的程式，並在 Eclipse 平台上以 plug-in 型
式提供圖型化的串流語言開發工具面板以
支援串流語言的程式開發(支援各種串流
語言的屬性設定)，可以降低使用開發所需
的費用，並且提供軟體開發所需的完整功
能，讓軟體開發者可以輕易的撰寫串流語
言的程式，並且從圖型面板產生對應的程
式代碼，加速及簡化串流語言程式開發。    
 6 
交換 data。 
 
表一 Multicore Software API(MSA) List 
RPC Module 
msa_load_procse
t(img, core)   
Called by MPU to put 
executable `img’ to a 
specific `core.’  
msa_RPC_put_ar
g(arg, size)  
Called by RPC callers to 
prepare arguments for a 
RPC.  
msa_RPC_get_ar
g(arg)  
Called by RPC calleesto 
extract arguments of a 
RPC.  
msa_RPC_start(p
rocedure, core, 
result)  
Called by RPC callers to 
execute `procedure’ on 
`core’ and puts return 
value of `func’ to `result.’  
msa_RPC_return(
result)  
Called by RPC calleesto 
end current RPC and 
returns `result’ to its 
caller.  
msa_RPC_wait(re
sult)  
Called by RPCcallers to 
halt until `result’ is 
retrieved.  
msa load 
mprocset(img_ 
list, core_list, int 
num) 
Called by RPC callers to 
load „img list 
images to „core lists 
cores. 
msa RPC 
mstart(prodecure, 
core_list, arg_ 
list, result_list, int 
num) 
Called by RPC callers to 
start „procedure‟ on 
„core list‟, set  „arg_list‟ 
to arguments of 
procedures on different 
cores, and stores 
execution results to 
„result list‟. 
msa RPC 
mwait(result_list, 
num) 
Halts current execution 
until all „result list are 
contented. 
Message and Stream Module 
msa_stream_send
(cid, data, 
attribute)   
Called by senders to put 
„data‟ to a channel „cid‟ 
with given `attribute‟ 
msa_stream_recv
(cid, data)  
Called by receivers to 
get `data‟ from a channel 
`cid‟ 
msa_msg_send(m
id, data, 
attributes) 
Called by senders to put 
`data‟ to a message box 
„mid‟ with given 
„attribute‟ 
msa_msg_recv(m
id, data)  
Called by receivers to 
get `data‟ from a 
message box „mid‟ 
msa_msg_send_a
sync(mid, data, 
attributes)  
Called by senders to put 
`data‟ to a message box 
„mid‟ with given 
`attribute‟ 
asynchronizely. 
msa_msg_recv_a
sync(mid, data)
  
Called by receivers to 
get `data‟ from a 
message box ‟mid‟ 
asynchronizely.  
 
 
 
2. 多核心 系統 分散 式 追蹤除 錯器
(MSDTD) 
 
電 子 系 統 層 模 擬 平 台 (Electronic 
System Level, ESL)在多核心系統平台上是
一個相當有效的工具(圖八)。藉由利用軟體
來模擬硬體平台，可以反饋更多的硬體執
行期的資訊給予使用者，讓程式開發者可
以更深入的了解到程式的運作模式，以利
於錯誤的偵測以及對軟體的效能進行最佳
化。 
 
圖八 ESL 模擬平台 
 
ESL 模擬平台由於是以軟體模擬硬體
行為，因此在執行速度上並無法如同直接
在硬體上執行般的快速。這樣的特性在多
核心平台上尤其明顯，由於必頇模擬的處
理器核心以及周邊設備的數量大量增加，
執行效能一直是關鍵的瓶頸之一。特別是
在程式偵錯的方面，由於為了確認一個錯
誤的存在，時常需要反覆的執行程式，以
便於確認程式出錯的位置以及原因，因此
會耗費大量時間進行測詴。此外，在多核
心系統下經常會使用到共享記憶體作為各
 8 
的系統狀態，根據這些資料，偵錯器可以
完全重現錯誤發生當時的系統狀態，並且
再次產生相同的競賽狀況，因而可以有助
於程式開發者定位程式錯誤的發生點，並
且加以修復。 
 
 
圖十二 
 
3. 具有機率之指標分析(PPA) 
 
在 C 語言中，scalar variables 的使用情
況可以很輕易的藉著編譯器（Compiler）的
分析，知道之間的相依關係；但是很不幸
的，常被大量使用的指標（Pointers）[14]，
卻不能夠很容易的被分析相互之間的關係
[11]。其中有一個問題是，當利用 C 語言的
pointers 時，pointer 可能是指到一個從 C 的
原始碼看不出來的位置，例如：當 pointer
指到由另外指令創出來的一塊記憶體區
塊，而此記憶體區塊是被放在所謂的 heap
中，從編譯器的角度，要分析這樣的資訊
已經不像 scale variables 那麼容易了，因為
他在程式中並不具有一個獨一無二的名
稱。另外 pointer 也有可能會隨著程式的執
行不斷的改變存取的位置，所以我們在靜
態時間（static time）並不能很精確的指出
該 pointer 會指到哪一個位置[17]。 
 
利用 PPA 的資訊可以讓編譯器做更積
極的優化如： 
 
1. 幫助編譯器或程式設計者在多核心的嵌
入是系統中更容易做資料上的分配，預
期可以帶來更好的效能、耗電比。 
 
2. 將資訊使用在 Transactional memory 的
結構上，可以利用該結構的 recovery 的
機制，做 pointer-induced loop carried 
dependence 的迴圈平行化的優化。 
 
延 續 之 前 團 隊 已 經 發 表 的 論 文
[14][15]，改採使用開放原始碼的 Open 
Research Compiler(ORC)並且使用 Single 
Static Assignment(SSA)Form 來改進分析的
效能與準確度。利用圖十三的分析流程產
出結果。 
 
 
 
首先經過 ORC 的前端(Front-End)產生
Intermediate representation (IR)跟 Control 
Flow Graph(CFG)及 SSA Form； Backtrace 
algorithm 藉著尋找 CFG 及 SSA 的資訊合
成 Pointers Relation Graph(PRG)，由於 PRG
的資訊過於複雜，所以再透過 Reducegraph 
algorithm 將 PRG 的資訊簡化，產生指標指
向的分析結果。 
整個分析的資料結構會如圖十四所
示，(a)為原始程式碼，經過 open64 會產生
CFG 
如(b)所示，在 CFG 上面透過 Backtrace 
algorithm 會依照(b)的虛線的樣子去行走並
蒐集指標的資訊，然後連結成一個 PRG 如
圖(c)所示，由於圖(c)並不容易被看懂因此
透過一個 Reducegraph 的 algorithm 將(c)轉
換成 (d) ，而 (d) 就是一個 probabilistic 
points-to information. 
 
SSA form CFG
PRG
Source   
Program
Source   
Program
Static assign execution frequency
Edge profiling  execution frequency
Demand-Driven
PPA in SSA
WHIRL
Open64
Backtrace
Algorithm
Reduced PRG
PPA results
Reducegraph
Algorithm
Normalized as 5 kinds of pointer usages
Encounter 5 situations
A directed weighted cyclic graph
Analysis target and locations only
WOPT phase
Make the PRG more compact
Intermediate 
representation
Explicit use-def chains
 
圖十三 
 10 
Shih-Han Lin, Shi-Yu Huang and 
Jenq-Kuen Lee, ” Power Aware SID-based 
Simulator for Embedded Multicore DSP 
Subsystems”, CODES+ISSS, 2010. 
[12]  PROGRAMMING MODEL AND 
SYSTEM SOFTWARE FOR EMBEDDED 
MULTICORE PROCESSORS, Brian K. 
Hsieh, 2010 
[13]  Brian K. Hsieh, Chi-Hua Lai, 
Shang-Hong Lai, Jenq Kuen Lee. 2009. 
Parallelization of Belief Propagation on 
Cell Processors for Stereo Vision. accepted, 
ACM Transaction on Embedded 
Computing Systems. 
[14]  Current Results on EDZL Scheduling 
for Multiprocessor Real-Time Systems, 
Wei Hsin-Wen; Chao, Yi-Hsiung; Lin, 
Shun-Shii; Lin, Kwei-Jay; Shih, Wei-Kuan, 
13th IEEE International Conference on 
Embedded and Real-Time Computing 
Systems and Application (RTCSA), 21-24 
Aug. 2007 Page(s): 120-130 (EI) 
[15]  Shou-Wei Chang, Brian K. Hsieh, Jenq 
Kuen Lee. 2009. pTest: An Adaptive 
Testing Tool for Concurrent Software on 
Embedded Multicore Processor. In 
Proceedings of Design, Automation, and 
Test in Europe(DATE 09) Nice, France, 
20-24, Apr. 2009 
[16]  .Spontaneous Detection of Infinite 
Loops and Livelocks in Dynamic Testing 
of Concurrent Programs, by Che-Sheng Lin 
and Gwan-Hwan Hwang. IEEE 2009 
International Symposium on Theoretical 
Aspects of Software Engineering (IEEE 
TASE'09) , July 29 - 31, 2009, Tianjin, 
China.   
[17]  “Che-Sheng Lin and Gwan-Hwan 
Hwang, “Dynamic Effective Testing: An 
Approach to Testing Concurrent 
Programs,” Technical Report, National 
Taiwan Normal University, 2010. 
http://www.csie.ntnu.edu.tw/~ghhwang/DE
T2010.pdf. (This paper had been submitted 
to journal for publication) 
[18]  Chu-Jung Tseng,  “Enabling 
Ahead-of-Time Java Compilation on 
Embedded Systems,” Jun. , 2010. 
[19]  Shao-Chung Wang, “Evaluation and 
Design of Programming Models for 
Heterogeneous Multi-Core Systems,” 
Apr. , 2010 
[20]  Chu-Jung Tseng,  “Enabling 
Ahead-of-Time Java Compilation on 
Embedded Systems,” Jun. , 2010. 
[21]  Shao-Chung Wang, “Evaluation and 
Design of Programming Models for 
Heterogeneous Multi-Core Systems,” 
Apr. , 2010. 
[22]  Texas Instruments, “OmapTM4 mobile 
applications platform,” 2009. 
[23]   Qualcomm, “The snapdragon 
platform,” 2010. [Online]. Available: 
http://www.qctconnect.com/products/s
napdragon.html 
[24]  T. Lin, C. Liu, S. Tseng, Y. Chu, and A. 
Wu, “Overview of ITRI PAC 
project–from VLIW DSP processor to 
multicore computing platform,” in Proc. 
IEEE Int. Symp. VLSI Des., 
Automation, and Test, 2008, pp. 
188–191. 
[25]  J. Nickolls, I. Buck, M. Garland, and K. 
Skadron, “Scalable parallel 
programming with cuda,” Queue, vol. 6, 
no. 2, pp. 40–53, 2008.  
[26]   I. Buck, T. Foley, D. Horn, J. 
Sugerman, K. Fatahalian, M. Houston, 
and P. Hanrahan, “Brook for gpus: 
stream computing on graphics 
hardware,” in SIGGRAPH ‟04: ACM 
SIGGRAPH 2004 Papers. New York, 
NY, USA: ACM, 2004, pp. 777–786. 
 
 
 
