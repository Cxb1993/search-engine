 2 
companies. This research has proposed a three-phased DCOR-based MAS 
development approach for DC cooperation activities. In the DC cooperation 
requirement modeling phase, for describing the desired DC cooperation operations, 
DCOR Level 1 to Level 3 models are constructed with DCOR standard notations 
and DCOR Level 4 models (D-L4-Ms) are built with Event-driven Process Chains 
(EPC) (column display) diagram. Next, the MAS specification development phase 
extracts the required roles and their behaviors from D-L4-M and determines the 
agent classes and methods for these roles and behaviors. Finally, the MAS 
implementation and verification phase implements the DCOR-based MAS 
specification on the JADE platform to support required cooperation activities for the 
ODM company. 
 
Keywords: Design Chain Operations Reference-model; Multi-agent system; 
Design chain; collaboration; Original design manufacturing 
 
1. Introduction 
 
In original design manufacturer (ODM) industries, the product development are 
fulfilled by the design chain (DC) which comprises an ODM company and related 
material/component suppliers. The ways to perform DC operations will determine 
the success of product development. ODM companies usually play a dominant role 
in a DC, so most of them have taken account of the problems about DC operations 
design and improvement. To have a complete DC planning framework for reference, 
the Supply-Chain Council (SCC) has proposed the Design Chain Operations 
Reference-model (DCOR) version 1.0 in 2006 (Supply-Chain Council, 2006). The 
DCOR has successfully linked standard process elements, metrics, best practice and 
features associated with the execution of the DC, so ODM companies can analyze 
and design their DC structure and processes with common terminology (Fulcher, 
2006).  
In addition to the tools for DC analysis and design, related enabling technology 
is needed to implement the DC operations. Due to the fascinating characteristics of 
agents, such as the autonomous ability, social ability (communicative), multi-agent 
system (MAS) has been considered a very promising enabling technology for 
distributed cooperation activities recently (Rosenman and Wang, 2001; Wang et al., 
2002; Hao et al., 2006). Several MAS approaches have been proposed (Wooldridge 
et al., 2000; DeLoach et al., 2001). To integrate DCOR into existing MAS 
approaches should contribute to the cooperation requirements of ODM companies. 
 4 
 
3. The proposed framework 
 
Figure 1 shows the framework of proposed DCOR-driven MAS development 
approach which basically follows the logic of MAS approaches. 
 
JADE Agent Platform
Directory
Facilitator
Agent
Management
System
Agent
Message Transport System
DC Cooperation Requirement Modeling Phase
Product
Related 
Database
Users
Company-Specific 
Practices
Modeling
Agent Class & 
Method Design
D-L4-M
D-L1-M, D-L2-M, D-L3-M
Graphical Model of process elements
Role Model
Concurrent Task Diagram
Agent Class Diagram
MAS Implementation and Test Phase
DC Processes 
Modeling
MAS Specification Development  Phase
Role & Behavior
Analysis
Verification
D-L4-M
Agent Interaction Diagram  
Figure 1. The proposed development approach 
 
3.1. DC cooperation requirement modeling phase 
 
3.1.1. Design chain process modeling 
 
Following the modeling notations and convention of DCOR, the ODM 
company should first design and describe its desired DC structure and processes 
from Level 1 to Level 3 under the consideration of competitive strategy and goals. 
The process for DC processes modeling is as follows: 
1. Identify DC members. In general, include the ODM company and related 
material/component suppliers. 
2. Derive DCOR Level 1 model (D-L1-M) by defining the DC scope and content 
with DCOR’s five Process Types, P, R, D, I and A. 
3. Derive DCOR Level 2 model (D-L2-M) by configuring D-L1-M with DCOR’s 
Process Categories. For each process type in D-L1-M, configure it from process 
categories for Product Refresh, New Product and New Technology.  
 6 
refresh processes in a mobile phone (M-Phone) DC. This work relies on the 
cooperation of M-Phone company and related LCD suppliers (Step 1). To achieve 
perfect product design, the M-Phone company determines that the process for 
outsourcing LCD design consists of process types R, D and I. On the supplier side, 
LCD suppliers need to adopt process type I to respond to process type R of M-Phone 
company for satisfying LCD design requirements (Step 2). Furthermore, to fit the 
design environment for Product Refresh, D-L2-M shown in Figure 2(b) configures 
D-L1-M’s R, D and I in with process categories R1, D1 and I1 respectively (Step 3). 
Afterward, each process category in D-L2-M would be detailed. Figure 2(c) shows 
the result of decomposing D-L2-M’s R1 into process elements from R1.1 to R1.5 
(Step 4). Besides, the process logic between these process elements is derived from 
their input/output information defined in DCOR. Finally, the desired DC processes 
for refreshing LCD for M-Phone company is described with D-L1-M, D-L2-M and 
D-L3-M. 
 
3.1.2. Company-specific practices modeling 
 
As mentioned above, to be a competent requirement analysis tool for ensuing 
role and behavior analysis of MAS development, this tool must be able to 
comprehend related organization units and their duties of a DC. To this end, this 
research will adopt the EPC (column display) diagram to extend the D-L3-M to 
DCOR Level 4 model (D-L4-M) in which the detailed company-specific 
organization structure and practices are modeled. 
As shown in Figure 2(d), the EPC (column display) diagram models processes 
in column-based swim-lanes (Scheer, 2000). Here a function (rounded rectangle) is a 
technical task or activity performed on an object in support of one or more company 
objectives while an event (hexagon) indicates the information object used to trigger 
functions or be the results of functions. 
With the help of EPC (column display) diagram, the process for the ODM 
company to acquire D-L4-M is as follows: 
1. For each process element in D-L3-M, derive its D-L4-M through the following 
steps. 
2. Find out the obligatory organization units and allocate swim-lanes in D-L4-M 
to them. To implement the selected best practices for the process element, 
responsible organization units must be selected and then allocate a swim-lane in 
D-L4-M to each of them. Company-specific implementation practices rely on 
the cooperation among these organization units. 
3. Build input/output events in D-L4-M by specifying the input/output objects of 
 8 
LCDs then become the input of next process element R1.3. 
However, the ODM company has no right to determine the organization units 
and implementation practices for its suppliers. Moreover, different suppliers have 
different organization structure and implementation practices. Therefore, the 
elaboration of organization units and implementation practices for suppliers will be 
ignored here. Only the interaction requirements between the ODM company and 
suppliers are emphasized. 
Once D-L4-Ms have been defined for D-L3-M’s process elements, the DC 
cooperation requirement modeling phase is complete. Afterward, the derived 
D-L4-Ms will be used as the foundation for developing the MAS specification. 
 
3.2 MAS specification development phase 
 
The objective of MAS specification development phase is to define a set of 
agents and inter-agent conversations for meeting the DC cooperation requirements 
described in D-L4-Ms. This method adopted in this phase mainly follows the theory 
and method of existing MAS approaches and includes two steps: the role and 
behavior analysis, and the agent class and method design. 
 
3.2.1. Role and behavior analysis 
 
The role and behavior analysis step is to transform D-L4-Ms into a set of roles 
and their tasks. This step uses the Role Model to capture the role definitions and 
uses the Concurrent Task Diagram to elaborate those tasks in the Role Model. 
As shown in Figure 3(a), the adopted Role Model is modified from the MaSE 
approach. This research believes that DC cooperation requirements described in 
D-L4-M will be satisfied if every organization unit appearing in D-L4-M is 
associated with a role and every role is played by an agent class. Therefore, 
transformation of D-L4-M to Role Model is relatively straightforward and can be 
described as follows: 
1. For each D-L4-M, derive its Role Model through the following steps. 
2. Every D-L4-M’s organization unit should become a role of the Role Model. 
3. The D-L4-M’s functions executed by a specific organization unit should be 
transformed into the tasks of the role corresponding to the organization unit. The 
transformation of functions into tasks is one-to-one. 
Figure 3(a) shows the Role Model for Figure 2(d)’s D-L4-M. D-L4-M’s three 
organization units are transformed accordingly into the three roles, namely R&D, 
Procurement and LCD Suppliers (Step 1&2). And then, D-L4-M’s functions 
 10 
expression. 
4. Transform D-L4-M’s input/output events of the function corresponding to the 
task into the input/output transitions of the state created at step 3 and describe 
these transitions with the ‘transmission’ expression. As described before, a 
D-L4-M’s function is transformed into the Role Model’s task and then 
transformed into a state here.  Hence, the function’s input/output events 
described in the D-L4-M can be regarded as the input/output transitions of the 
transformed state. Besides, this research uses ‘˄’, ‘˅’ and ‘|’ to connect multiple 
transitions transformed from multiple input/output events connected with AND, 
OR and XOR operator, in the D-L4-M, respectively. 
Figure 3(b) shows an example that derives the Concurrent Task Diagram for the 
task R1.2.1 shown in Figure 3(a)’s Role Model. 
Once the roles and behaviors have been defined, the foundation of the next step, 
agent class and method design, is formed. 
 
3.2.2. Agent class and method design 
 
The agent class and method design step will create the MAS specification that 
depicts the entire MAS as it will eventually be implemented in this work. The MAS 
specification is described by the Agent Class Diagram which is structurally different 
from the one proposed in the MaSE approach, but closer to OO class diagram. As 
Figure 3(c) shows, the boxes denote agent classes and contain the agent class name, 
the role that the agent plays, and the methods that the agent possesses for 
implementing the role’s behaviors. Specifically, in this research, the syntax of an 
agent method is shown below. 
rec_mess (sender, info.) > action() > send_mess (receiver, info.) 
That is to say that if a message rec_mess sent from agent sender with the 
information info. is received, the method action is executed for sending the message 
send_mess to agent receiver. Besides, the arrowed lines between agent classes 
identify conversations and point from the message sender to the message receiver. 
Based on this agent class architecture, the process of transforming Role Models and 
Concurrent Task Diagrams into Agent Class Diagram can be described as follows: 
1. For each Role Model and its Concurrent Task Diagrams, derive its Agent Class 
Diagram via step 2 and 3. 
2. For each Role Model’s role, create an agent class for it. To ensure all roles’ tasks 
can be implemented in the designed MAS, this research assigns one agent class 
to play one role defined in a Role Model. Further, title the agent class with the 
role name. 
 12 
implementing receiving message, a JADE agent can pick up messages by means of 
the receive() method. And then getting the information about sending agent and 
message content via getSender() and getContent() method. On the other hand, when 
implementing sending message, a JADE agent can call the send() method. And then 
transmitting the information about recevier agent and message content via 
addReceiver() and setContent() method. If the received message is matched, the 
corresponding autonomous behavior is called and carried out by the JADE agent.  
Once all JADE agent classes have created, related agents comprising the MAS 
could be instanced from these JADE agent classes and be executed in the JADE 
runtime environment. Meanwhile, the interactions among agents can be 
automatically captured by JADE Sniffer Agent and, further, be used to verify the 
conformity to the DC cooperation requirements described in D-L4-Ms. As Figure 4 
shows, JADE Sniffer Agent provides an Agent Interaction Diagram to describe the 
design of agent interaction. Figure 4’s (1) to (7) and Figure 2(d)’s (1) to (7) have 
mutually proofed the accordance of interactions among agents and cooperation 
activities among organization units. 
 
 
Figure 4. Agent Interaction Diagram resulted by designed MAS 
 
4. The empirical study 
 
As the D-L4-Ms shown in Figure 5, to make product renewal process redesign 
more effective, Y Company leveraged the DCOR’s Research for Product Refresh 
(R1) category to draw forth the desired implementation processes and cooperation 
requirements. Here, D-L1-M, D-L2-M and D-L3-M are left out for space 
consideration. Afterward, the process for deriving the MAS specification from 
D-L4-Ms is shown in Figure 6 to 8. Finally, the MAS specification is implemented 
with JADE tool. Figure 9 displays the activation of the first message transmission 
from agent BT/PCB Supplier1 to agent RD. Basically, the DC cooperation 
 14 
PM Agent
PM
BT/PCB Suppliers Agent
(BT/PCB) Suppliers
Introduction()
>send_mess (Suppliers, R&D, Materials Name,  Spec, Unit 
price, Lead time) 
rec_mess (R&D, Suppliers, Materials Quote)
>Bid()
>send_mess (Suppliers, R&D, Material Quote)
rec_mess (R&D, Suppliers, Purchase Order)
>Build Order()
>send_mess (Suppliers, R&D, Invoice & Certification 
Report)
Finance Agent
Finance
Procurement Agent
Procurement
R&D Agent
R&D
rec_mess (Suppliers, R&D, Materials Name,  Spec, Unit 
price, Lead time) 
>EncodeMaterial()
rec_mess (PM, R&D, Refresh Module) ^rec_mess (PM, 
R&D, Refresh Schedule)
>SuggestQuote()
>send_mess (R&D, Suppliers, Materials Quote) ^ 
send_mess (R&D, PM, Module Refresh Schedule) 
rec_mess (Suppliers, R&D, Material Quote)
>BuildOrder()
>send_mess (R&D, Suppliers, Purchase Order)
rec_mess (Suppliers, R&D, Invoice & Certification Report)
>ProcessDelivery()
ValidateCharacteristic()
>send_mess (R&D, Procurement, Material Spec. & 
Suppliers )
CreateTransfer()
>send_mess (R&D, Suppliers, Refresh Material Spec.)
rec_mess (PM, R&D,  Product Order)
>BuildRequirement()
>send_mess (R&D, PM, Refresh Module Function)
MakePre-Pay()
>send_mess (R&D, Finance , Invoice Payment)
 
Figure 8.  Agent Class Diagram for Research Product Refresh process of Y 
Company 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Figure 9. Activation of implemented MAS 
 
5. Conclusions 
 
This research presents a three-phased DCOR-driven MAS development 
approach. The major contributions of this research are: 
1. Integrate DCOR into existing MAS approaches to enhance the applicability of 
the resulted DC cooperation platform. 
 16 
Verlag. 
7. Supply-Chain Council, 2006. Design Chain Operations Reference-model 
(DCOR) Version 1.0, Pennsylvania; Supply-Chain Council. 
8. Wang, L., Shen, W., Xie, H., Neelamkavil, J. and Pardasani, A., 2002. 
Collaborative Conceptual Design – State of the Art and Future Trends. 
Computer-Aided Design, 34, 981-996. 
9. Wooldridge, M., Jennings, N.R. and Kinny, D., 2000. The Gaia Methodology 
for Agent-Oriented Analysis and Design. Autonomous Agents and Multi-Agent 
Systems, 3, 285-312. 
 
  
PLEASE SCROLL DOWN FOR ARTICLE
This article was downloaded by: [National Taiwan University]
On: 2 July 2009
Access details: Access Details: [subscription number 908033623]
Publisher Taylor & Francis
Informa Ltd Registered in England and Wales Registered Number: 1072954 Registered office: Mortimer House,
37-41 Mortimer Street, London W1T 3JH, UK
International Journal of Computer Integrated Manufacturing
Publication details, including instructions for authors and subscription information:
http://www.informaworld.com/smpp/title~content=t713804665
Towards a standardised framework for a multi-agent system approach for
cooperation in an original design manufacturing company
Jiun-Shiung Lin a; Chao Ou-Yang a; Yeh-Chun Juan b
a
 Department of Industrial Management, National Taiwan University of Science and Technology, Taipei,
Taiwan, ROC b Department of Industrial Engineering and Management Information, Huafan University, Taipei
Hsien, Taiwan, ROC
Online Publication Date: 01 June 2009
To cite this Article Lin, Jiun-Shiung, Ou-Yang, Chao and Juan, Yeh-Chun(2009)'Towards a standardised framework for a multi-agent
system approach for cooperation in an original design manufacturing company',International Journal of Computer Integrated
Manufacturing,22:6,494 — 514
To link to this Article: DOI: 10.1080/09511920802537987
URL: http://dx.doi.org/10.1080/09511920802537987
Full terms and conditions of use: http://www.informaworld.com/terms-and-conditions-of-access.pdf
This article may be used for research, teaching and private study purposes. Any substantial or
systematic reproduction, re-distribution, re-selling, loan or sub-licensing, systematic supply or
distribution in any form to anyone is expressly forbidden.
The publisher does not give any warranty express or implied or make any representation that the contents
will be complete or accurate or up to date. The accuracy of any instructions, formulae and drug doses
should be independently verified with primary sources. The publisher shall not be liable for any loss,
actions, claims, proceedings, demand or costs or damages whatsoever or howsoever caused arising directly
or indirectly in connection with or arising out of the use of this material.
uniﬁed and standardised framework to eﬃciently
and eﬀectively organise a MAS environment for
ODM companies to implement their design chain
cooperation.
To develop a standardised framework for ODM
companies to develop their MAS for design chain
cooperation, integrating available standards and
accepted approaches is necessary. Here, in addition
to the existing all-purpose MAS approaches, an
accepted approach for design chain analysis is also
required for the MAS development of design chain
cooperation. Recently, an industry standard, design
chain operations reference-model (DCOR), has been
developed and released by Supply-Chain Council
(SCC) for providing a complete design chain analysis
framework for reference (Supply-Chain Council 2006).
DCOR has successfully linked standard process
elements, metrics, best practice and features associated
with the execution of a design chain (Supply-Chain
Council 2006), so it has been recognised as a good tool
for design process analysis. Integrating this industry
standard into the existing MAS development ap-
proaches can contribute to the standardised MAS
development framework for ODM companies to
implement their design chain cooperation.
This research has proposed a DCOR-driven
approach for the MAS development to support
necessary cooperative activities for ODM companies.
First, DCOR and event-driven process chains (EPC)
(column display) diagram are used to construct a
DCOR model for the desired design chain operations
and company-speciﬁc implementation practices. Then,
the MAS speciﬁcation is developed based on the
models derived previously by using an existing MAS
approach. Finally, the MAS speciﬁcation is implemen-
ted and tested on the JADE platform.
2. Related work
To provide the appropriate basis and context for
the research, DCOR and MAS have been outlined
below.
2.1. Design chain operations reference-model
(DCOR)
Design chain members are responsible for the compli-
cated product design and engineering activities. To
support the communication among design chain
members and design chain operations improvement,
a complete process reference framework is necessary
(Choi et al. 2005, Fulcher 2006). Under this considera-
tion, a viable approach, DCOR, was developed and
released by the SCC (Supply-Chain Council 2004,
Supply-Chain Council 2006).
The SCC is an independent, not-for-proﬁt, global
corporation with membership open to all companies
and organisations interested in applying and advan-
cing the state-of-the-art in supply chain management
systems and practices. Its ﬁrst diagnostic and
benchmarking tool, Supply-Chain Operations refer-
ence-model (SCOR), has helped nearly a thousand
organisations make dramatic and rapid improvements
in supply chain processes.
DCOR is SCC’s newest diagnostic and benchmark-
ing tool. It is structurally based on the SCOR which
was designed to be conﬁgurable and aggregated a
series of hierarchical process model. As shown in
Figure 1(a), DCOR consists of three hierarchical
levels: top level (Level 1), conﬁguration level (Level 2)
and process element level (Level 3).
Level 1 mainly centres on ﬁve primary management
processes including Plan (P), Research (R), Design
(D), Integrate (I) and Amend (A). The P process deals
with demand/supply planning to best meet the business
goals. The R process decomposes research topics,
sources and validates materials/products against the
product requirements. The D process encompasses
the reviewing and adjusting sourcing, building and
testing the product prototype. The I process decom-
poses and synthesises the design deﬁnitions, creates
and validates a product pilot, releases product
deﬁnitions. The A process is triggered by various
feedback and speciﬁcation change. Each design chain
is a ‘chain’ of process R, D, I and A. Besides, Level 1 is
equipped with standard performance attributes and
metrics.
Level 2 divides the ﬁve management processes into
process categories according to the business environ-
ment. The DCOR has focused on three business
environments: product refresh, new product, and new
technology. As a result, the process categories com-
prising R include R1 (research product refresh), R2
(research new product) and R3 (research new technol-
ogy). This same convention is used for D and I except
P and A. At this level, users should reconﬁgure Level 1
model with corresponding process categories.
Level 3, the last level in the DCOR, decomposes
Level 2’s process categories into process elements. For
example, the process elements comprising Level 2’s R1
include R1.1 (schedule research activities), R1.2
(source materials), R1.3 (verify materials), R1.4
(transfer ﬁndings/materials) and R1.5 (authorise sup-
plier payment). Additionally, as shown in Figure 1(b),
Level 3 provides a lot of referrable information for each
process element, such as the required input and output,
process performance metrics and best practices. The
main tasks at this level include: develop detail process
models to support Level 2’s work and set proper process
metrics to support Level 1’s performance targets.
International Journal of Computer Integrated Manufacturing 495
D
o
w
n
lo
ad
ed
 B
y:
 [
Na
ti
on
al
 T
ai
wa
n 
Un
iv
er
si
ty
] 
At
: 
07
:1
7 
2 
Ju
ly
 2
00
9
chain, CPD and CPC on the basis of DCOR to
propose the collaborative design chain operations
reference model (CDCORM) as a reference for
developing a collaborative design chain system in the
product lifecycle. Scholz-Reiter and Ho¨hns (2003)
attempted to derive the MAS framework for colla-
borative E-logistics and E-business by using SCOR.
However, this study only gave a rough overview of
MAS; the detailed approaches for speciﬁcation design
and system implementation were not mentioned.
Huang et al. (2005) developed a computer-assisted
tool to provide the limited capability of conﬁguring
SCOR’s Level 1 and Level 2 models.
Although DCOR has provided substantial value
for reference, the enabling technology is still needed to
implement the design chain operations designed in
DCOR models.
2.2. Multi-agent system (MAS) approaches and
implementation tools
Owing to the fascinating characteristics of agents,
MAS has been considered a very promising enabling
technology for providing a computer supported
cooperative environment and has been applied in the
areas that require coordination, negotiation and
communication among various organisation units
(Nwana 1996, Scholz-Reiter and Ho¨hns 2003, Wang,
et al. 2003, Kuo et al. 2005).
To facilitate MAS development, several approaches
and implementation tools have been proposed. Among
these approaches, the Gaia and the MaSE are two
popular approaches with general and comprehensive
analysis framework and methods for MAS develop-
ment. To contrast the two approaches, Figure 2
arranges the similar phases and steps of these two
approaches at the corresponding position.
The Gaia approach proposed by Wooldridge et al.
(2000) is founded on the view of an MAS as a com-
putational organisation consisting of various interact-
ing roles. This approach borrows partial concept of
object-oriented (OO) analysis and design to develop its
own terminology and notations for the macro-level
(societal) and micro-level (agent) analysis of an MAS.
However, it views the requirements capture phase
as being independent of the paradigm used for
analysis and design and it does not touch this topic
in detail.
Figure 2. (a) Gaia’s approach (Wooldridge et al. 2000); (b) MaSE approach (DeLoach et al. 2001).
International Journal of Computer Integrated Manufacturing 497
D
o
w
n
lo
ad
ed
 B
y:
 [
Na
ti
on
al
 T
ai
wa
n 
Un
iv
er
si
ty
] 
At
: 
07
:1
7 
2 
Ju
ly
 2
00
9
basically follows the logic of MAS approaches. The
design chain cooperation requirements modelling
phase plays the role of requirements capture and this
phase describes the design chain structure and processes
from the perspective of business requirements. Next,
the MAS speciﬁcation development phase deﬁnes the
required agent classes and methods to support the
design chain cooperation activities. Finally, the MAS
implementation and test phase implements and veriﬁes
the DCOR-driven MAS speciﬁcation on the JADE
platform.
4.1. Design chain cooperation requirements modelling
phase
In the design chain cooperation requirements model-
ling phase, an ODM company ﬁrst constructs DCOR’s
Level 1 to Level 3 model (D-L1-M, D-L2-M, D-L3-M)
to describe its desired design chain operations, and
then it extends the D-L3-M to DCOR Level 4 model
(D-L4-M) by describing the company-speciﬁc imple-
mentation practices with EPC (column display) dia-
gram. These models will become the basis of MAS
speciﬁcation development.
4.1.1. Design chain process modelling
First of all, an ODM company should design its
desired design chain structure and processes with
DCOR’s notations and convention under the con-
sideration of competitive strategy and goals. The
process for design chain processes modelling is listed
below:
(1) Identify design chain members. Include the
ODM company and related material/compo-
nent suppliers.
(2) Derive D-L1-M by deﬁning the design chain
scope and contents with DCOR’s ﬁve Process
Types, P, R, D, I and A.
(3) Derive D-L2-M by conﬁguring D-L1-M with
DCOR’s Process Categories. Conﬁgure each
process type in D-L1-M from process cate-
gories, product refresh, new product and new
technology.
(4) Derive D-L3-M by conﬁguring D-L2-M with
DCOR’s process elements. conﬁgure each pro-
cess category in D-L2-M from the correspond-
ing process elements at Level 3. In addition, the
process logic between process elements should
Figure 3. The proposed DCOR-driven MAS development approach.
International Journal of Computer Integrated Manufacturing 499
D
o
w
n
lo
ad
ed
 B
y:
 [
Na
ti
on
al
 T
ai
wa
n 
Un
iv
er
si
ty
] 
At
: 
07
:1
7 
2 
Ju
ly
 2
00
9
An ODM company may acquire D-L4-M from
each process element in D-L3-M using the following
steps:
(1) Find out the obligatory organisation units and
allocate swim-lanes in D-L4-M to them. To
implement the selected best practices for the
process element, responsible organisation units
must be selected and with a swim-lane in D-L4-
M allocated to each of them. Company-speciﬁc
implementation practices rely on the coopera-
tion among these organisation units.
(2) Build input/output events in D-L4-M by specify-
ing the input/output objects of the process
element. This refers to the input/output objects
that DCOR provides to the process element
and creates corresponding input/output events
at proper swim-lane of D-L4-M.
(3) Pick out the suitable best practices for the
process element. By considering the competitive
environment and business conditions, the
ODM company picks the suitable best practices
from the ones provided by DCOR for the pro-
cess element and applies them to the following
implementation process design.
(4) Apply, with EPC’s functions and events, the
selected best practices for designing and describ-
ing the process element’s implementation pro-
cess. The ODM company applies the selected
best practices to design its own implementation
Figure 5. D-L4-M for D-L3-M’s R1.2.
International Journal of Computer Integrated Manufacturing 501
D
o
w
n
lo
ad
ed
 B
y:
 [
Na
ti
on
al
 T
ai
wa
n 
Un
iv
er
si
ty
] 
At
: 
07
:1
7 
2 
Ju
ly
 2
00
9
intra-role interactions. As shown in Figure 6(b), a
concurrent task diagram, modiﬁed from the MaSE
approach (Deloach et al. 2001), speciﬁes the roles’
tasks. In this research, the concurrent task diagram
consists of start (.), end (), states (rounded rectan-
gles) and transitions (an information transmission on
an arrowed lines). The states indicate a role’s internal
activities, i.e. autonomous behaviours of the role.
The autonomous behaviour is denoted as
output_messages ¼ autonomous_behaviour
(input_messages),
and the transitions represent the communications
between roles or between tasks and can be denoted as
transmission (sender, receiver, info.).
Figure 6. (a) Role model for Figure 5’s D-L4-M; (b) concurrent task diagrams for roles’ tasks.
International Journal of Computer Integrated Manufacturing 503
D
o
w
n
lo
ad
ed
 B
y:
 [
Na
ti
on
al
 T
ai
wa
n 
Un
iv
er
si
ty
] 
At
: 
07
:1
7 
2 
Ju
ly
 2
00
9
agent class diagrams with the same name, their
methods should be aggregated.
Figure 7(a) shows the agent class diagram derived
from the role model and concurrent task diagrams
shown in Figure 6 for process element R1.2. The role
model’s three roles are transformed accordingly into
Figure 7(a)’ s three agent classes, namely, R&D Agent,
Procurement Agent and LCD Suppliers Agent (Steps 1
and 2). The tasks of these roles are then transformed
Figure 7. (a) Agent class diagram derived from Figure 6 for process element R1.2; (b) agent class diagram for process element
R1.3; (c) aggregated agent class diagram.
International Journal of Computer Integrated Manufacturing 505
D
o
w
n
lo
ad
ed
 B
y:
 [
Na
ti
on
al
 T
ai
wa
n 
Un
iv
er
si
ty
] 
At
: 
07
:1
7 
2 
Ju
ly
 2
00
9
Figure 7(c)’s agent class diagram. Figure 8 explains the
relationship between the exempliﬁcative agent class
R&D Agent speciﬁcation and its corresponding JADE-
based Java implementation code. The creation process
of a JADE agent class from the agent class speciﬁca-
tion is described below.
(1) Create the JADE agent class by extending the
jade.core.Agent class. As shown in
Figure 8(a), the JADE agent class R&D Agent
is declared by extending the JADE Agent class
for the R&D Agent class deﬁned in agent class
diagram.
(2) Implement the setup() method of the JADE
agent class. The setup() method is intended
to include agent initialisations. In setup()
implementation, the services provided by the
agent for a speciﬁc role can be registered in the
yellow-page catalogue, so that other agents can
discover and exploit them more easily.
Figure 8(b) shows that the R&D Agent registers
its R&D service.
(3) Declare and implement the behaviour of the
JADE agent class. In JADE, each method
deﬁned in agent class diagram for an agent
class should be declared and implemented as a
‘behaviour’ of the corresponding JADE agent
class. JADE uses the addBehaviour()
method to declare a behaviour for an agent
class. As Figure 8(c) shows, agent class R&D
Agent’s two methods are declared in the
setup() as R1_2_1_behaviour() and R1_3_
1_behaviour(), and JADE creates classes
extending the jade.core.behaviours.
Behaviour class to implement these beha-
viours. Each behaviour class must implement
the action() method to actually deﬁne the
operations to be performed and the done()
method (returns a Boolean value) to specify
whether a behaviour has completed and must
be removed from the pool of behaviours. The
detailed implementation is explained below.
(1) Implement receiving and sending message.
Messages exchanged by JADE agents have
a format speciﬁed by FIPA’s ACL lan-
guage. A message in JADE is implemented
as an object of the jade.lang.acl.
ACLMessage class that provides get and
set methods for handling all ﬁelds of
a message. When implementing receiving
Figure 9. Comparison of (a) agent interaction diagram of designed MAS; (b) design chain cooperation requirements described
by D-L4-M.
International Journal of Computer Integrated Manufacturing 507
D
o
w
n
lo
ad
ed
 B
y:
 [
Na
ti
on
al
 T
ai
wa
n 
Un
iv
er
si
ty
] 
At
: 
07
:1
7 
2 
Ju
ly
 2
00
9
Figure 11. D-L4-Ms of R1.1 to R1.5 for Y company.
International Journal of Computer Integrated Manufacturing 509
D
o
w
n
lo
ad
ed
 B
y:
 [
Na
ti
on
al
 T
ai
wa
n 
Un
iv
er
si
ty
] 
At
: 
07
:1
7 
2 
Ju
ly
 2
00
9
Finally, Y company uses JADE tools to implement
the MAS speciﬁcation. Figure 15 displays the activa-
tion of the implemented MAS and the explanation of
the ﬁrst message transmission from agent BT/PCB
Supplier1 to agent RD. Figure 15(b) and 15(d) show
the interface designed for message input and output for
agent BT/PCB Supplier1 and agent RD respectively,
while Figure 15(c) displays the ACL message generated
by system for this message transmission. Figure 16’s
agent interaction diagram and the results from the
implemented MAS demonstrate that the design chain
cooperation requirements described in Figure 11’s
D-L4-Ms have been supported by the implemented
MAS faithfully.
Figure 13. Concurrent task diagrams of role model tasks for Y company.
International Journal of Computer Integrated Manufacturing 511
D
o
w
n
lo
ad
ed
 B
y:
 [
Na
ti
on
al
 T
ai
wa
n 
Un
iv
er
si
ty
] 
At
: 
07
:1
7 
2 
Ju
ly
 2
00
9
was presented. The major advantages of this
approach are:
(1) The SCC’s DCOR is a useful strategic tool in
the hands of upper management for tackling
the complexity in design chain management
(DCM). It provides a common design chain
framework, standard terminology, common
metrics with associated benchmarks, and best
practices; and it can be used as a common
model for evaluating, positioning and
implementing design chain application soft-
ware. A DCOR-based MAS development
approach can enhance the applicability of
design chain cooperation platform quite
substantially.
(2) A design chain deﬁned by DCOR can be
modiﬁed and reconﬁgured rapidly as business
requirements change. Additionally, every
object created by OO MAS approach can be
traced forwards or backwards through the
diﬀerent steps to other related objects.
Therefore, the proposed DCOR-driven MAS
approach should deserve to redesign and
redeploy rapidly as the design chain coopera-
tion requirements change.
Despite these advantages, further research will be
needed. For example, DCOR’s metrics and perfor-
mance attributes permit the analysis and evaluation of
a design chain against others with competing strate-
gies. Originally, this research intends to verify the
developed approach and MAS through DCOR’s
performance metrics. Unfortunately, since DCOR is
still in its initial stage, both the performance metrics
and the best practices are still incomplete (Supply-
Chain Council 2006), and this incompleteness prevents
the inclusion of this part into the proposed approach.
However, it would be a worthwhile research topic for
the future.
Acknowledgement
The authors would like to acknowledge the ﬁnancial support
by the National Science Council, Taiwan, through project
no. NSC 97-2221-E-211-010.
References
Bauer, B., Muller, J.P., and Odell, J., 2001. Agent UML: A
formalism for specifying multiagent software systems.
International Journal of Software Engineering and Knowl-
edge Engineering, 11 (3), 207–230.
Bellifemine, F., Caire, G., and Greenwood, D., 2007.
Developing multi-agent systems with JADE. Chichester:
John Wiley.
Figure 16. Agent interaction diagram resulted from implemented MAS and its relationship with D-L4-Ms.
International Journal of Computer Integrated Manufacturing 513
D
o
w
n
lo
ad
ed
 B
y:
 [
Na
ti
on
al
 T
ai
wa
n 
Un
iv
er
si
ty
] 
At
: 
07
:1
7 
2 
Ju
ly
 2
00
9
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
2009年 4月 5日 
 
報告人姓名 阮業春 服務機構及職稱 華梵大學工業工程與
經營資訊學系 
副教授 
會議時間及地點 Mar. 31 – Apr. 2, 
2009 
Wilshire Grand 
Los Angeles, Los 
Angeles, USA  
本會核定補助文號 NSC  
97-2221-E-211 -010 
會議名稱 (中文) 2009電腦科學及資訊工程全球會議 
(英文) 2009 World Congress on Computer Science and 
Information Engineering (CSIE 2009) 
發表論文題目 第一篇： 
(中文) 以流程驅動方法發展應用於同步新產品開發合作之
多代理人系統 
(英文) A Process-Driven Approach to Develop Multi-Agent 
System for Cooperation in Concurrent New Product 
Development 
第二篇： 
(中文) 結合分散式限制滿足問題演算法於多代理人系統以
支援供應鏈協同–製造供應鏈的個案研討 
(英文) Incorporating DCSP Algorithms into Multi-Agent 
System for Supply Chain Collaboration – A Case Study for 
Manufacturing Supply Chain 
 
15. Multimedia & Signal Processing (Posters) 
16. Computer Software & Systems (Posters) 
17. Pattern Recognition & Computer Applications (Posters) 
18. Computer Applications (Posters) 
19. Human-Computer Interaction & Software Tools (Oral) 
20. Software Systems (Oral) 
21. Innovations in Software engineering (Oral) 
22. Data Mining & Data Engineering (Posters) 
23. Intelligent Techniques (Posters) 
24. Intelligent Systems Applications (Posters) 
25. Computer Design & Applications (Posters) 
本人所發表的第一篇論文安排在第 8項 Computational Intelligence & Agent 
Systems (Oral)；而第二篇論文則安排在第 2項 Intelligent Manufacturing, Control & 
Automation (Oral)。除了發表自己的論文外，也聆聽了多場相關專題演講，其中
第 2,4,8,10,11,14,17,24 項是本人特別感興趣的研究領域，與本人之研究方向吻
合，獲益良多。其中較具代表性的論文題目包括： 
1. Integration of Bills of Material towards a Communication Tool 
2. Incorporating DCSP Algorithms into Multi-Agent System for Supply Chain 
Collaboration – A Case Study for Manufacturing Supply Chain (本人發表之研
究成果) 
3. Cooperative Medical Decision Support 
4. A Process-Driven Approach to Develop Multi-Agent System for Cooperation in 
Concurrent New Product (本人發表之研究成果) 
5. Product Information Exchanges between CAD/PDM systems and the 
Collaboration Portal System using PLM Services 
6. A Holistic Approach to Schema Matching 
7. Applied Simulation to Support Steel Industry Re-engineering, Planning and 
Operations: Methodologies and Case Studies 
8. A Computational Method for Temporal Logic Reasoning and Model Checking 
9. An Investigation of Forecasting Critical Spare Parts Requirement 
10. On-Line Production Planning Optimization Based on Message Bus of MES 
11. Research on the Process Modeling of Petri Nets-Based Products Collaborative 
Design 
 
此外，本次研討會特別邀請下列學者做為 Keynote Lectures，講題內容給予
與會學者很深的思考空間： 
1. Bir Bhanu, Fellow of the IEEE, University of California, Riverside, USA 
2. Hamid Jafarkhani, Fellow of the IEEE, University of California, Irvine, USA 
A Process-Driven Approach to Develop Multi-Agent System for Cooperation 
in Concurrent New Product Development 
 
 
Yeh-Chun Juan1, Jiun-Shiung Lin2 , Chao Ou-Yang3  
1Dept. of Industrial Engineering and Management Information, Huafan University, Taiwan, 
R.O.C.; ycjuan@cc.hfu.edu.tw  
2Dept. of Industrial Engineering and Management, Mingchi University of Technology, Taiwan, 
R.O.C.; jslin@mail.mcut.edu.tw 
3Dept. of Industrial Management, National Taiwan University of Science and Technology, 
Taiwan, R.O.C.; ouyang@im.ntust.edu.tw 
 
 
Abstract 
 
Recently, several multi-agent system (MAS) 
development approaches have been proposed and 
constituted on a goal basis to support the cooperation 
in a concurrent new product development (CNPD) 
environment. However, in a CNPD process, different 
cooperation requirements take place at different stages 
and need different workgroups to be involved. The 
goal-driven MAS development approaches only 
provide a partial solution. This research has proposed 
a two-phased process-driven approach to develop the 
MAS framework for fulfilling the overall CNPD 
cooperation requirement. In the process-driven 
cooperation requirements analysis phase, the desired 
CNPD process and cooperation workflow are defined. 
Next, the MAS specification design phase derives the 
MAS specification, including the agent classes, their 
conversations and system configuration, from the 
CNPD process and cooperation workflow. Finally, an 
empirical case is developed to verify the feasibility of 
the proposed approach. 
 
1. Introduction 
 
The concept of concurrent new product 
development (CNPD) has been recognized as an 
effective means for minimizing the new product 
development time [1]. As Figure 1 shows, the overall 
CNPD process comprises the parallel development 
stages. Each stage contains two kinds of activities: the 
main-activity and the cooperation-activity. The 
main-activity consists of a set of tasks that should be 
performed to complete the stage. The 
cooperation-activity is done before the main-activity to 
request the participation of downstream workgroups in 
solving new product development problems. The 
cooperation-activity is definitely the core of CNPD and 
lets related workgroups cooperate in the early stages so 
that the consensus on product design can be achieved 
as early as possible and the reworking times can be 
minimized [1]. 
  
Figure 1. CNPD process 
Recently, multi-agent system (MAS) has been 
considered a very promising computer-supportive 
cooperative environment and several MAS 
development approaches have been proposed for 
CNPD cooperation [2, 3]. These approaches are 
basically goal-driven. That is, the MAS framework is 
developed on a goal basis, such as to resolve the 
specific product design conflicts. However, in a CNPD 
process, different cooperation requirements take place 
at different stages and need different workgroups to be 
involved. Consequently, these goal-driven approaches 
only provide a partial solution to the overall 
cooperation requirement of a CNPD process. 
This research has proposed a two-phased 
process-driven approach instead of the goal-driven one 
to develop the MAS framework for CNPD 
cooperation. The first phase first defines the desired 
CNPD process and cooperation workflow. The second 
phase then derives the MAS specification from the 
defined CNPD process and cooperation workflow. 
2009 World Congress on Computer Science and Information Engineering
978-0-7695-3507-4/08 $25.00 © 2008 IEEE
DOI 10.1109/CSIE.2009.869
55247
 
Figure 3. Modified DCOR Level 3 Model 
(Modified D-L3-M) for the CNPD process 
3.1. The process-driven cooperation 
requirements analysis phase 
 
This phase captures the CNPD cooperation 
requirements from the process viewpoint (Issue 1) and 
contains two steps: CNPD process definition and 
cooperation workflow definition. 
 
3.1.1. CNPD process definition. This step uses 
DCOR’s New Product and company-specific 
organizational structure to define the CNPD process in 
a Modified DCOR Level 3 Model (D-L3-M) (Issue 2). 
As Figure 3 shows, the Y-axis of Modified D-L3-M is 
the names of participant workgroups. On the right side 
of workgroups, the standard notation of DCOR’s New 
Product is used to specify the workgroup’s tasks and 
cross-workgroup information flows. In addition, a gray 
circle is used for the cooperation-activity. The 
procedure for defining CNPD process is as follows: 
1. Designate participant workgroups. A company 
should refer to its organizational structure and 
designate the names of participant workgroups from 
upstream to downstream on the Y-axis of Modified 
D-L3-M. The top workgroup is always the initiator of 
the CNPD process. 
2. Specify workgroups’ main-activity. The process 
elements of DCOR’s New Product should be assigned 
to proper accountable workgroups according to 
company-specific organizational delegation. The 
process elements are aligned from left to right 
according to their executing sequence. Additionally, 
the input/output information of the process elements 
which vertically flows among workgroups should be 
retrieved and depicted on the diagram to connect 
relevant process elements. 
3. Specify the required cooperation-activities between 
workgroups. The vertical cross-workgroup information 
flows depicted in step 2 have shown the likely place 
for cooperation-activities. However, the company still 
needs to confirm if there really needs a 
cooperation-activity and note with the name beside the 
tagged gray circle. 
Figure 3 is an example for constructing a Modified 
D-L3-M. Suppose three workgroups (Engineering, 
R&D, and New Tech. Dep.) cooperate to complete a 
new product development. Engineering is the initiator 
and the synthesizer of the new product development. 
The tasks of New Tech. Dep. are driven by R&D’s 
tasks. Thus, the company can first designate the names 
of workgroups from Engineering to New Tech. Dep. 
on the Y-axis (Step 1). Next, by mapping the process 
elements of DCOR’s New Product to workgroups’ 
tasks, process elements I2.1 to I2.7, D2.1 to D2.6, and 
R2.1 to R2.6 are assigned to Engineering, R&D, and 
New Tech. Dep., respectively. Afterward, as Figure 3 
shows, six cross-workgroup information flows are 
retrieved from DCOR’s New Product and indicate a 
likely place for cooperation-activities (Step 2). Finally, 
two early cooperation-activities Module Req. 
Coordination and Component Req. Coordination are 
specified on the diagram (Step 3) and the desired 
CNPD process is derived. 
 
3.1.2. Cooperation workflow definition. This step 
uses E-Business Scenario Diagram [8] to capture the 
cooperation workflow for each cooperation-activity 
specified in the Modified D-L3-M. E-Business 
Scenario Diagram (Figure 4) is column-based. The 
business participants are placed in the column header 
while the column edges symbolize the interfaces 
between participants. All of the participant’s 
procedures are modeled under its own column with 
business processes (hexagon) and business documents 
(circle). The single-arrow lines connecting a business 
document and two processes represent the transfer of 
process-specific information. This research prescribes 
that a business document can have at most one inflow 
line and one outflow line. 
For each Modified D-L3-M’s cooperation-activity, 
its cooperation workflow is gotten as below: 
1. Create and allocate columns to workgroups. A 
cooperation-activity is collaborated by an upstream and 
a downstream workgroup. Thus, two columns are 
constructed for them. 
2. Specify the trigger event. The trigger event of a 
cooperation-activity can be identified from the vertical 
information flow in the Modified D-L3-M where the 
cooperation-activity takes place and be described by 
putting the transferred information (business 
document) in the column of the workgroup acting as 
the information sender. The transferred information 
can be specified more concrete according to 
company-specific practices. 
3. Design company-specific cooperation workflow. To 
successfully complete the cooperation-activity, related 
intra- and inter-workgroup tasks and their process logic 
55449
arguments args1 and the condition cond holds, then the 
method action is called and the message trans-mess is 
sent with arguments args2. All elements are optional. 
Several FIPA communicative acts [9] are chosen for 
naming rec-mess and trans-mess, including propose, 
accept-proposal and inform. The first two are used for 
cross-workgroup conflict negotiation and the third one 
is used for the information transfer within a workgroup. 
Obviously, E-Business Scenario Diagram’s 
cooperation workflow can help us define the details of 
agent class conversations. A notation transformation 
table (Table 1) is proposed for transforming one 
E-Business Scenario Diagram to two Communication 
Class Diagrams. The first two transformations are for 
start and end. The third and the fourth one are for intra- 
workgroup information transfer and cross-workgroup 
negotiation, respectively. Cross-workgroup negotiation 
can be mapped into either a propose transition for 
in-process negotiation or an accept-proposal one for 
ending the negotiation and conversation. The last one 
is for evaluation activities, so two conditions, good 
and .NOT. good, are proposed. Companies should 
incorporate these two conditions with proper 
transformations proposed in the third and fourth ones. 
Figure 6 shows two Communication Class Diagrams 
transformed from Figure 4’s E-Business Scenario 
Diagram. First, agent class Engineering proposes a 
Module Design Req. for negotiating with agent class 
R&D. A start node and a propose transition are 
constructed in the Communication Class Diagrams for 
Engineering and R&D, respectively. Engineering is 
then in a Wait state while R&D proceeds to two 
internal information transfers and a proposal evaluation. 
After evaluation, R&D either ends the conversation by 
using the accept-proposal transition or continues 
proposing the modification suggestion to Engineering 
and entering a Wait state. When Engineering receives 
the modification suggestion, it starts an internal 
information transfer and suggestion evaluation. Next, a 
propose transition is created for negotiating the 
modified Module Design Req. or the 
Counter-Modification Suggestion with R&D.  
Table 1. The notation transformation table 
E-Business Scenario Diagram Communication Class Diagram 
     
  
 
 
    
 
 
          (a)                     (b) 
Figure 6. Communication Class Diagrams 
transformed from Figure 4 for agent class (a) 
Engineering and (b) R&D 
 
Figure 7. Deployment Diagram from Figure 5 
3.2.3. System deployment. The final step uses 
Deployment Diagram [5] (Figure 7) to instance actual 
agents from the defined agent classes and deploy them 
into physical platforms. The three-dimensional boxes 
represent agents and the connecting lines represent 
actual conversations between agents. Further, agents in 
the same dashed-line box are deployed on the same 
physical platform. Figure 7 is an exemplary system 
deployed based on Figure 5’s Agent Class Diagram. 
An agent R&D is instanced from the agent class R&D 
and has its own physical platform while two agents are 
instanced from agent classes Engineering and New 
Tech. Dep. respectively and deployed on different 
physical platforms. The defined MAS specification 
depicts the entire MAS as it will eventually be 
implemented for supporting the required CNPD 
cooperation. 
 
4. Empirical study and verification 
 
This section uses a Taiwanese smart phone ODM 
manufacturer, Y Mobile Communication Corp. (Y 
Corp.), to demonstrate the feasibility of the proposed 
framework. Figure 8 is its Modified D-L3-M. Due to 
space limitation, only the cooperation-activity Module 
Req. Coordination is chosen for explanation. Figure 9 
is its E-Business Scenario Diagrams. Figure 10 and 11 
are Agent Class Diagram and Communication Class 
Diagrams derived from Figure 8 and 9. Afterward, Y 
Corp. implements the defined MAS specification on 
JADE platform. Figure 12 is JADE’s Agent Interaction 
Diagram to display the agent interaction for realizing 
Figure 9’s cooperation workflow. It is verified that Fig. 
5561
Incorporating DCSP algorithms into multi-agent system for supply 
chain collaboration - A case study for manufacturing supply chain 
 
Ping-Yu Chang 1, Yeh-Chun Juan 2, and Fu-Chieh Liu 3 
 
1, 3Department of Industrial Engineering and Management 
Mingchi University of Technology 
84, Gungjuan Rd., 
Taishan, Taipei County, 243, Taiwan, ROC 
 
2Department of Industrial Engineering and Management Information 
Huafan University 
1, Huafan Rd., 
Shihting Hsiang, Taipei Hsien, 223, Taiwan, ROC 
 
Corresponding author: pchang@mail.mcut.edu.tw 
 
Keywords: Multi-agent system, DCSP, CSP, Negotiation strategies, Supply chain 
collaboration.  
 
Astract 
Nowadays, products are expected to have 
features such as more innovative, multi 
functional, high quality, and low price because of 
the changing of consumers’ purchasing behavior. 
This phenomenon forces manufacturing 
industries to lower their cost, shorten innovation 
time, and collaborate with companies in their 
supply chain. However, it is difficult to 
collaborate among supply chain companies 
because of the wide distribution and limitations 
of companies. Due to the characteristics of 
agents, such as autonomous ability, social ability 
(communicative), applying multi-agent system 
(MAS) to supply chain collaboration has been 
demonstrated with fascinating results. 
Furthermore, supply chain collaboration problem 
can be regarded as a distributed constraints 
satisfaction problem (DCSP) since constraints 
are diverted in supply chain echelons. Therefore, 
incorporating DCSP techniques into MAS will 
form the basis for achieving better decision 
among supply chain collaboration. However, 
related research is lack and to be wanting. Hence, 
this paper develops a DCSP algorithm that can 
be appropriately applied for manufacturing 
(OEM) supply chain collaboration. Our research 
finds that using a suitable DCSP algorithm, time 
and cost can be reduced in manufacturing supply 
chain and better effectiveness can be achieved 
for future competition.  
 
1. Introduction 
Nowadays, products are expected to have 
features such as more innovative, multi 
functional, high quality, and low price because of 
the changing of consumers’ purchasing behavior. 
This phenomenon forces manufacturing 
industries to lower their cost, shorten innovation 
time, and collaborate with companies in their 
supply chain. 
Xuea et al. [10] indicated that collaboration 
between different organizations will integrate 
supply chain procedures to achieve maximum 
profit. Furthermore, intelligent agents can be 
applied to complicated environment for 
responding to jobs and objectives automatically 
[5]. However, traditional single intelligent agent 
will have higher cost and longer time to process 
a complicated procedure in the supply chain. 
Therefore, Multi agent system is developed to 
deal with these problems and to increase 
correctness of decision making.  
MAS can be implemented to solve problems 
with multi echelons and discrete information. In 
this system, agents cooperate in the collaborative 
or competitive environments and will solve 
problems through interactions that will also 
2009 World Congress on Computer Science and Information Engineering
978-0-7695-3507-4/08 $25.00 © 2008 IEEE
DOI 10.1109/CSIE.2009.893
402
 
Figure 1: DCSP algorithm 
 
4. Case study 
We present a case in this section to 
demonstrate the usefulness of the developed 
DCSP. The data of this case study is shown in 
Table 2. In Table 2, brand company order 100 
computers with due date as 4 days and price of 3 
million from OEM. OEM evaluates the 
possibility of taking this order and passes the 
information of this order to its supplier. When 
supplier receives this order, it will also evaluate 
the possibility of taking this order based on its 
own capacity, inventory, and cost. If supplier 
decides to take this order and pass this 
information to OEM, OEM will confirm this 
information with brand company and start the 
manufacturing process.  
 
Table 2: Example data 
 Brand 
company 
OEM Supplier 
Order quantity 100   
Due date 3~5 days   
Price (in million) 300~410   
Capacity 
(minutes/day) 
 480 480 
Processing time 
(minutes/product) 
 6 5 
Production cost 
(in thousand) 
 900  600  
Over time cost 
(per hour) 
 20  18  
Historical data of 
finishing an order 
  3 days 
  
 Once OEM receives the order of 100 
computers with due date of 3 to 5 days and price 
of 300 to 410 millions, OEM will evaluate the 
possibility to accept this order with calculation of 
processing time and price. The possible 
processing time of OEM can be calculate with 
100x6/480 = 1.25 days. However, historical data 
shows that it usually took 3 days for supplier to 
fulfill an order with 100 computers. Therefore, it 
will take OEM 1.25+3 = 4 days to finish this 
order that is still under the due date constraint. 
 Then OEM will pass the information of 
this order to supplier with 100 parts with due 
date of 4-1.25 = 2.75 days. The supplier will then 
evaluate the possibility to accept this order with 
the calculation of required processing days and 
price. In this case, supplier will required 
1000/480 = 2.08 days to finish this order that is 
under the due date given from OEM. Therefore, 
supplier will take this order and OEM will 
confirm with brand company with the acceptance 
of this order. 
 
5. Conclusion 
This research proposes a DCSP structure to 
solve the consultation between organizations in 
supply chain echelons. Our results show that 
proposed model is useful for compromising 
order quantities, due date, and price within 
supply chain collaboration. However, some 
factors such as outsourcing, emergency order, 
and transportation time are not considered in this 
research that could be possible extensions for 
future investigation.  
 
References 
[1] Janssen, M., (2005) .”The architecture and 
business value of a semi-cooperative, 
agent-based supply chain management 
system .”Electronic Commerce Reserch and 
Application, Vol. 4 , pp.315-328 
[2] Jennings, N. R. , K. Sycara, and M. Wooldridge, 
(1998) .” A Roadmap of Agent Research and 
Development “, Autonomous Agent and 
Multi-agent Systems Journal, Vol. 1, No.1, pp. 
275-306 
[3] Jiao, J. (Roger), Y. Xiao, and A. Kumar (2006) . 
“An agent-based framework for collaborative 
negotiation in the global manufacturing supply 
chain network”, Robotics and 
Computer-Integrated Manufacturing, Vol. 22, 
pp.239-255 
[4] Lin, F. R.and and Y. Y. Lin, (2006) . 
“ Integrating multi-agent negotiation to resolve 
constraints in fulfilling supply chain orders” , 
Electronic Commerce Reserch and Application, 
Vol.5, pp.313-322 
[5] Maes, P.,(1995).” Artificial Life Meets 
Entertainment: Lifelike Autonomous Agents. 
Communications of the ACM”, pp. 108-114. 
[6] Sycara, K., and A. Pannu, and M. Williamson, 
and D. Zeng, (1996).”Distributed Intelligent 
Agents”, IEEE Expert 
404
