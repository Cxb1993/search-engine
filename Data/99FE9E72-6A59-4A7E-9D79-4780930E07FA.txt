1 
 
行政院國家科學委員會專題研究計畫成果報告 
無線行動環境中同儕網路上資訊分享系統之開發 
 
計畫編號：NSC98-2220-E-027-007 
執行期限：98年 8月 1日至 99年 7月 31日 
主持人：劉傳銘   國立臺北科技大學 資訊工程學系 
共同主持人：劉建宏   國立臺北科技大學 資訊工程學系 
計畫參與人員：陳正憲、蘇英啟、賴傳淇、林孟澤 
 
 
一、摘要 
隨著科技的快速進步與發展，智慧型手機的運算資源以及資訊儲存與處理能力日漸提升並
成為現今民眾隨身攜帶的主要行動通訊裝置。本計劃以Web2.0的概念出發，突破傳統集中式的
服務提供方式的限制，開發一個適用於以行動隨意網路所建構的同儕網路環境上的資訊分享應
用系統。藉著以適地性服務為預期應用並發展單車騎乘應用程式，本計劃所發展之資訊分享應
用系統能夠有效的管理行動同儕網路上之資料並且大眾使用者可以輕易的透過無線行動裝置
散佈與存取資訊。專案系統本質上為本計劃所發展的行動同儕網路平台框架，透過開發並抽換
上層應用服務元件，專案系統可成為不同的應用系統。專案系統的成功實現，証實行動裝置將
不只是個人隨身的計算與通訊器材。本計劃將引入雲端運算的概念至行動環境上，實現「行動
雲(Mobile Cloud)」的概念，讓使用者亦可進入雲端成為服務提供者之一。本計劃除了專案系
統之開發，亦催生多篇成果論文，其相關成果已經發表於第15屆國科會行動計算計劃研究成果
發表會。 
 
關鍵詞：行動同儕網路、Web2.0、適地性服務、智慧型手機、資料管理 
 
3 
 
三、相關背景 
Android[5]為谷歌公司(Google)與開放手機連盟(Open Handset Alliance, OHA)所發
展的一個基於 Linux 作業系統行動裝置軟體平台。Android 除了系統核心採用
GPL(General Public License)授權的 Linux 核心外，其他部份均捨棄一般 Linux系統所
用的 GNU之 GPL開放源碼授權，改採 BSD與 Apache的開放源碼版本模式。Android
平台在軟體架構上採分層設計方式，如圖二，將介面(應用程式或 Activities)、應用服
務(Service)、函式庫以及硬體完全分開，讓其中的每個組成元件得以依照需求或不同
的硬體來實作，增加應用程式的可移植性(Portability)與可重複利用性(Reusability)。 
 
Android 在手持式裝置的軟體開發上提供了豐富的資源，其應用程式可透過 Java
語言撰寫。相較於 JavaME平台，Android平台的底層軟體運行環境並非 JavaME虛擬
機器與亦無跟從相關規範；取而代之的是 Android 自帶的 Dalvik 虛擬機器(Dalvik 
Virtual Machine， DVM)，DVM支援的執行檔格式為 dex檔案。Android提供了 javabyte
與 dex檔案的轉換管道，圖一為其轉換流程示意圖。 
專案系統考慮使用 Android為系統開發平台的原因乃基於下列兩點： 
(1) 目前存在多家手持式裝置作業系統，如 Symbian(Nokia)、Blackbarry 
OS(BlackBarry)、Microsoft Windows Mobile series(Microsoft)等，均非開放源
碼作業系統，而 Android為開放源碼作業系統。 
(2) 現行開放式手持式裝置作業系統大多存在軟體開發支援度不佳的問題，
Android可提供良好的軟體開發支援度與平台整合性。 
 
 
 圖一 、Java byte code與 dex執行檔格
式轉換流程示意圖 
圖二 、Android平台架構圖 
 
  
Jabber 是一基於可擴展標記語言 (eXetensibale Markup Language) 文件交換技術
的同儕網路平台，其包含用於文件交換與溝通之協定－XMPP (eXtensible Messaging 
and Presence Protocol)。在 Jabber中訊息交換的方式與一般電子郵件交換的方式雷同，
亦即客戶端間彼此並不連線，任何客戶端間的訊息均透過彼此連線的 Jabber伺服器來
負責。Jabber 網路模型與由電子郵件伺服器構成的網路模型是類似的，圖三為 Jabber
5 
 
饋訊息)，則其他使用節點在作資料擷取時，能以聲望點數高者為優先，這能確保資料
的有效性；在資料一致性上，[3]中提到節點的移動會造成網路被切割，導致同儕隨意
網路的情況難以實現一致性管理，所以需要不同的管理策略，分別為廣域一致性、區
域一致性、時間一致性、混合一致性、用途一致性。而依據不同的應用，需制定出不
同的一致性協定，得以達成資料一致性的需求；而在資料存取控制方面，[6]以硬體實
現客戶端的 XML 權限控制器支援彈性且動態的存取控制政策並額外加入安全的資料
加密機制。 
 
7 
 
置處理的裝置輸出入管理模組(I/O Management Module, IOMM)以及負責與使用者互動的
使用者功能介面層(User Interface Module, UIM)。各模組的任務內容如下所示，圖五則為
各模組間的溝通介面圖。 
 
• 訊息處理模組(Message Process Module, MPM) 
MPM模組為專案系統中負責訊息與事件處理的主要模組。MPM模組位於UIM、
NM與IOMM之間，是完全的內部模組，其角色為其他模組的居中協調處理者。MPM
會將所有收到的訊息要求加以解析，並呼叫完成訊息操作所需之模組。對一個訊息操
作而言，MPM可能需要呼叫多個模組才能完成。在完成訊息操作之後，MPM還必須
負責將處理結果送至對應模組(視訊息操作內容而定)。 
• 網路模組(Network Module, NM) 
NM為負責建立行動同儕網路連線的模組，主要以分享資訊系統與網路之間封包
與訊息的分析處理與繞送傳輸，所有送往系統網路的訊息均必須透過此模組，同樣的
所有來自系統網路的封包也必須經由此模組才能被其他模組處理。 
• 裝置輸出入管理模組(I/O Management Module, IOMM) 
負責處理任何外來的裝置輸出入的模組，其做為MPM對輸出入裝置的調用模組，
主要目的為提供MPM在調用系統輸出入裝置時的抽象存取介面的。 
• 使用者功能介面層(User Interface Module, UIM) 
UIM為系統對使用者的訊息輸出入窗口，其主要功能為做為使用者操作訊息的輸
入接口並且在初步過濾使用者所輸入之資料是否有效。此外，UIM亦是負責顯示系統
處理結果給予使用者。 
 
圖五、WOLF系統模組圖 
 
9 
 
五、開發過程與成果 
隨著國人對健康與環境的意識抬頭，單車從過去的代步工具提升為群眾於閒暇時刻用
來促進身心健康、訓練體能與享受自然的休閒運動器材。針對群眾對單車觀感與認知的改
變，許多廠商相繼推出各種單身活動專用的行動電子商品，例如 GARMIN公司所推出的
一系列戶外活動用的電子商品即是針對單車騎乘者所設計的。儘管各種單車相關的行動電
子產品功能強大且完善，但現行的方案均需要額外購買硬體裝置並且是離線式的解決方案，
因此市場上的相關商品其單價均居高不下且缺乏擴充彈性。近年來，隨著手持式裝置在軟
體與硬體上快速的發展，智慧型手機已經成為目前個人手機市場的主流。此外，隨著雲端
運算、同儕網路與Web 2.0等各種新興應用概念的快速崛起，更張顯了前述的戶外單車用
行動電子裝置所採用解決方案的缺陷。因此，本計劃結合Web 2.0、同儕網路、雲端運算
與資料管理等電腦科學知識與技術，開發 WOLF 系統結合單車生活應用，一般民眾不需
要高額費用購買戶外單車用行動裝置，只需要在自己的智慧型手機上安裝 WOLF用戶端
程式，大量降低金錢成本。此外，受惠於同儕網路與Web 2.0，WOLF系統不需要額外的
維護與管理成本且將隨著使用者的增加而自我成長與管理。 
 
I. 開發過程所遭遇之困難 
儘管在計劃正式執行之前已做了許多準備工作，在計劃的執行與專案系統的開發過程
中，依然遭遇到許多困難。以下為計劃執行期間所遭遇到困難的整理討論，希望能夠在日
後成為同行同業間執行相關計劃之參考與借鏡： 
 
i. Android 平台與框架與WOLF 專案系統的發展方向不同 
Android 手機其運算與網路連線能力均足以成為獨立的行動運算終端裝置，但因
Android為 Google雲端運算在行動商務上所佈置的終端裝置，故其開發框架與相
關軟體元件在設計上，以主從式服務架構為主。然而，專案系統以同儕網路為系
統網路並以同儕式服務架構為主。為了克服上述問題，本計劃自行開發同儕網路
模組來負責同儕網路上的資料傳輸以實作同儕式服務架構。 
ii. Android 平台與框架對行動隨意網路應用程式的支援度不足 
因為 Android 以主從式服務架構為主，在無線網路的支援上僅開基礎建設模式
(Infrastructure Mode)的Wifi存取能力，對隨意網路模式(Ad Hoc Mode)的支援幾乎
沒有。為使 Android支援 Ad Hoc網路模式，本計劃自行開發相關底層系統模組，
並在系統中使用外部呼叫的方式將之喚起以將 Android裝置切換Wifi存取模式。 
iii. Android 平台與框架上可用的測試工具過於稀少 
Android開發平台雖然有自帶的單元測試框架，但卻無其他自動化測試工具可供使
用，如 Robot Framework等。在經過一番調查之後，發現確實無可以使用的自動
化測試工具，專案系統使用各種不同的測試案例與劇情來彌補此部份的不足。 
11 
 
圖十二至圖十七為部份系統功能之截圖。圖十二為發送救援功能之對話框，圖十三為
騎乘群組建立與管理畫面；圖十四為歷史騎乘路徑記錄之呈現畫面，圖十五為騎乘路徑規
劃之結果；最後，圖十六與圖十七為騎乘車友搜尋以及車友所分享之路徑搜尋結果。 
 
 
圖十三、群組建立功能截圖 圖十四、路徑記錄結果 
圖十五、騎乘路徑規劃 圖十六、騎乘車友搜尋 圖十七、車友分享路徑搜尋 
 
本計劃在開發專案系統的過程中，除了 WOLF 專案系統外，亦有許多與資料管理以
及行動隨意網路之研究成果。研究成果涵蓋「行動隨意網路下的拓樸落差問題」、「在行動
同儕網路上動態語意索引產生問題」與「行動環境下 k個最近鄰居與反向最近鄰居查詢」
等議題並已經發表於第 15 屆國科會行動計算計劃研究成果發表會(MC2010) ，其成果如
表一所示。 
圖十二、救援功能截圖 
13 
 
六、計畫成果自評 
本計劃從去年八月執行到今年七月，在一年的時間內除了原本一年期計劃預計完成內容外，
亦完成些許原本於第二年所規劃之項目。研究內容與原計劃大致相符，請參閱表三。 
 
表三：進度完成表 
 預計完成工作項目 預定完成時間 完成情況 
第一年進度 T1: 專案計劃書 第一季中 已完成 
T2: 專案系統分析與設計 第二季末 已完成 
T3: 專案系統與各模組之實作 第四季初 已完成 
T4: 專案系統測試 第四季中 已完成 
T5: 專案系統 Beta測試 第四季中 已完成 
T6: 撰寫專案系統說明文件 第四季中 已完成 
T7: 撰寫計劃成果報告書 第四季末 已完成 
T8: 撰寫專案系統開發參考文件 第三季末 已完成 
第二年進度 T9: 轉植 JXTA 與 JXME/CDC 應用程式介面集至
Android平台 第二季末 已完成 
T10: 將專案系統移植至 Android平台 第三季末 已完成 
T11: 測試移植後的專案系統 第四季末 已完成 
T12: 改善訊息轉傳機制、資料搜尋以及存取和快取機制 第一季末 未完成 
T13: 開發解決資料有效性問題之方案 第三季中 未完成 
T14: 開發解決資料一致性問題之方案 第三季末 未完成 
T15: 開發資料權限機制 第四季中 未完成 
T16: 開發惡意行為偵避策略 第四季末 未完成 
T17: 修改相關專案系統文件 第四季末 未完成 
 
15 
 
可供推廣之研發成果資料表 
□ 可申請專利  ■可技術移轉                                   日期：2010年 8月 1日 
國科會補助計畫 
計畫名稱：無線行動環境中同儕網路上資訊分享系統之開發 
計畫主持人：劉傳銘         
計畫編號：NSC98－2220－E－027－007 
學門領域：LINUX推動計畫 
技術/創作名稱 無線行動環境中同儕網路上資訊分享系統 
發明人/創作人 劉傳銘 
技術說明 
中文： 
本計劃開發一個基於行動隨意網路、同儕網路與Web 2.0的行動同
儕網路平台框架－WOLF，並於此平台之上運用適地性服務的概念
實作單車生活應用系統來展示其應用性。藉由結合相關技術與服務
概念，專案系統平台相較於主從式服務架構，更具有容錯性與堅固
性，並且能夠自我管理與成長。WOLF是個單純的行動同儕網路平
台框架，透過開發並抽換上層應用服務元件，可成為不同的應用系
統。 
英文： 
This project is to develop a data-sharing system on Android platform, 
Wireless infOrmation Lookup and Feeding (WOLF) system, with the 
concept of Web 2.0 on the network which consists of many mobile 
devices and can be viewed as a Peer-to-Peer (P2P) network. The 
WOLF system can provide different types of application services. The 
users can easily access and publish information using smart mobile 
devices. We use LBS as the information service provided by WOLF 
system. 
可利用之產業 
及 
可開發之產品 
資訊服務產業、行動適地性服務系統、戶外休閒行動電子產品 
技術特點 
研究的結果可對行動同儕網路資訊系統建立出一個完整的雛型及
運作模式，除可根據不同的應用實作元件並佈署之外，並加入Web 
2.0 的想法，讓使用者能中進入系統扮演資料提供者的角色。在雲
端運算的概念下，所有系統中的行動使用者彼此相聯構成「行動雲」
來使系統維持運作；系統將隨著使用者的增加而日益豐富與強健。
此種雛型可為業者與使用者帶來共生互利的營運模式。 
推廣及運用的價值 
本系統以自由軟體方式開發與推廣，可將開發經驗與過程提供給業
界作為開發行動同儕網路應用與資訊提供服務相關產品的參考模
型。 
 1
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                     日期：99 年 10 月 30 日 
一、參加會議經過及與會心得 
筆者首先感謝國科會對於筆者參與國際會議的補助，使得筆者能有機會與其他國家的學者交流與
學習，並能了解關於筆者研究領域的最新趨勢與發展。而今年筆者在此補助與學校暨個人支援下，參
加了與計畫議題相關的兩個會議，分別是The Second IEEE International Workshop on Wireless Network 
Algorithm and Theory (IEEE WiNA2009)與The Second International Workshop on Ubiquitous Data 
Management (UDM2010)。第一個會議主要是探討與各種無線網路相關的一些基本原理問題，而第二個
會議則關於在無所不在的環境中資料管理的相關議題。這兩部份正是此一計畫的兩大主軸—無線隨意
網路上的同儕網路架構與行動同儕網路上的資料管理。 
 
 
 
計畫編號 NSC98-2220-E-027-007 
計畫名稱 無線行動環境中同儕網路上資訊分享系統之開發 
出國人員
姓名 劉傳銘 
服務機構
及職稱 
國立臺北科技大學 資訊工程學系 
副教授 
會議時間 如下 會議地點 如下 
會議名稱 
(中文) 
1. 第二屆 IEEE 無線網路演算法與理論國際研討會 (2009 年 10 月 12 日，澳門) 
2. 第二屆無所不在資料管理國際研討會 (2010 年 4 月 4 日，日本筑波) 
 (英文) 
1. The Second IEEE International Workshop on Wireless Network Algorithm and 
Theory (IEEE WiNA2009) 
2. The Second International Workshop on Ubiquitous Data Management (UDM2010) 
發表論文
題目 
1. On-demand Data Broadcasting for Data Items with Time Constraints on Multiple 
Broadcast Channels 
2. A kNN Search Protocol Using a Voronoi Diagram in Wireless Broadcast 
Environments 
 3
2. UDM2010 
UDM2010 Workshop則是於2010年4月4日在筑波大學舉行，屬於 The 15th DASFAA -- Database 
Systems for Advanced Applications (DASFAA 2010)的一個研討論壇。DASFAA是Database領域中
相當有傳統與重要的一個會議，探討Database上的相關議題，可說是Database領域的一大盛會。
筆者因為班機問題，抵達日本筑波時已經是傍晚，無法參與第一天的議程與reception，感到相當
可惜。而第二天筆者迫不急待的一大早就抵達會場報到，因為早到，所以抽空逛了一下會場附
近的校園，而時值櫻花盛開，相當漂亮。 
約至9:10分，第二天的Keynote是由Yahoo! Research 的Dr. Raghu Ramakrishnan主講"Cloud 
Data Management @ Yahoo!"，提及了Yahoo! 在cloud computing上的發展狀況，並介紹了Hadoop 
map-reduce system與PNUTS/Sherpa storage system，相當精彩。接者分別連續參與了Time Series 
and Streams、Query Processing、及Sensor Networks and Communications等三個sessions，其中
k-Selection Query over Uncertain Data (Xingjie Liu, Mao Ye, Jianliang Xu, Yuan Tian, Wang-Chien 
Lee)與筆者這兩年所關注的議題有關，而這篇論文所提的問題與解決方案令筆者印象相當深刻，
文章題目描述與建立相當完整，解題方式淺顯易懂，相當難得，而果不其然這篇論文獲得了Best 
Student Paper Award Runner-up。 
 
 
圖二、Dr. Raghu Ramakrishnan主講之"Cloud Data Management @ Yahoo!"投影片首頁 
 
第三天的開場演講也相當有意思，是由總結十年來的最佳論文的作者來發表10+ Year Best 
Paper Award Talk，能有此殊榮相當不易，而這論文的影響力正是從事研究工作者所要追求的目
標。接者，筆者參與了Trajectories and Moving Objects及Similarity Search and Event Processing兩
個sessions。其中，Incremental Clustering for Trajectories(Zhenhui Li, Jae-Gil Lee, Xiaolei Li, Jiawei 
Han)是由Prof. Han親自報告，能聽到大師級的演說實屬難得，而大師的報告果然不同凡響，思
路相當清楚，使人能輕易了解。當然，筆者也不放過這機會，當場就請教相關的議題，而能與
大師對話筆者深感受益匪淺。 
 5
整體說來，這兩次會議的內容既充實，而且高水準。與會的專家都準備充分，而且報告的內容也
都切中主題。與會專家們研究的態度，報告時的台風，都讓我學習良多，希望日後還有機會再參與同
樣高水準的國際會議，並且學習到更多的知識和經驗。 
 
二、攜回資料名稱及內容 
研討會論文集與光碟各一份 
 
 
in the broadcast. The additional information is derived
from the Voronoi diagram composed by the data set.
More details about the proposed protocols is given
and analyzed in Section III. Besides, we provide the
simulation results in Section IV. Section V concludes
this paper. In the next section, we give the related
works and preliminaries.
II. Preliminaries
The nearest neighbor (NN) search problem has
been studied for many decades and many solutions
have been proposed. One approach to solve the NN
search problem for a given data set is to use an index
structure, like R-trees, k-d-trees, or Quad-trees [14].
The first NN search algorithm on an R-tree [12]
followed the branch-and-bound algorithmic design
pattern and could be generalized to the kNN search
(k > 1). This algorithm searches the R-tree in a
depth-first fashion and prunes the irrelevant nodes
during the traversal. Based on this algorithm, the au-
thors in [4] and [10] proposed different approaches for
the kNN search using broadcast R-trees in wireless
broadcast environments.
The other approach to find the kNN for a given
query point in a data set is to use the Voronoi
diagram [2], [16]. A Voronoi diagram for a given data
set can be constructed by computing the perpendicular
bisectors of the line segments between the pairs of
data points. Each data point is then associated with a
cell in the Voronoi diagram [3]. The nearest data point
of a query point q is the data point whose associated
cell contains q. Hence, one can find the nearest neigh-
bor by examining the cells in the Voronoi diagram.
Figure II illustrates a Voronoi diagram for a data set
with a given query point.
Fig. 1. A Voronoi diagram for a set of data points on the plane
and a query point q.
Using the Voronoi diagram, one can find the NN
for a query point but can not find the kNN for an
arbitrary k > 1. To find the kNN, one can consider the
order-k Voronoi diagram [9]. However, the value of k
is fixed. In [8], the authors proposed an approach for
kNN queries in spatial network databases using order-
1 Voronoi diagram. The search first precomputes the
possible data points around each cell and then filter
the considered cells and the neighboring cells until the
result is done. In wireless broadcast environments, the
authors in [16] discussed some efficient NN search
protocols, including the solution-based and object-
based approaches, and proposed a hybrid one. Their
solutions are mainly for the NN search. Our proposed
approach will use the order-1 Voronoi diagram and
consider the neighbors of each site, when generating
the broadcast schedule.
In the following of this section, we give the ter-
minology and notations used in this paper. Given two
data points p and q in a plane, we denote the distance
between p and q as dist(p, q) and
dist(p, q) =
√
(px − qx)2 + (py − qy)2.
Let P = {p1, p2, · · · , pn} be the set of n distinct
data points in the plane. These points are the sites.
In the remainder of this paper, the data points or
sites are used interchangeably. Each site pi ∈ P , i =
1, 2, · · · , n, has an area, Voronoi cell v(pi),associated
with it. The Voronoi diagram of P is denoted by
V D(P ). Figure II shows a Voronoi diagram for a
data points on the plane and the 3NN of the query
point q is {i, k,m}.
If two sites share the same boundary of the cor-
responding Voronoi cells, these two sites are 1-order
neighbors to each other. For a site pi, if the associated
Voronoi cell has m boundaries, then pi has m 1-order
neighbors, say sites u1, u2, · · · , um. We define the set
of the 1-order neighbors of pi as
Adj(pi) = {u1, u2, · · · , um}.
For instance, in Figure II, the 1-order neighbors of d
are Adj(d) = {a, c, e, g}.
III. Proposed kNN Search Protocols
A straightforward approach for the kNN search in
wireless broadcast environment is to have the server
broadcast all the data points sequentially and the
clients filter all the data points by always tuning into
the broadcast. However, this approach is too naive
and less efficient in terms of latency and tuning time
since all the data points should be examined. So,
some papers use an index in the broadcast to improve
the performance on the latency and tuning time. In
this section, we present our kNN search protocol
which does not use an index but add some additional
information in each site in the broadcast. Using the
proposed approach, the client can perform the selec-
tive tuning to save the energy and will terminate the
Fig. 4. The example of 3NN query process.
of the algorithm for the query processing is shown in
Figure 5.
Initially, all the lists are empty and a packet is
received from the broadcast. The query process will
examine all the information contained in the packet.
Suppose the site in the received packet is p. Then site
p is marked to indicate that p has been examined and
the distance between p and q is also computed. For
each site u in Adj(p), the set of 1-order neighbors of
p, we compute the distance between u and q. All the
sites, including p and the 1-order neighbors of p, are
inserted into C-list and all the sites in C-list are sorted
according to their distances to q in a non-decreasing
order. During the insertion, if a site is already in C-
list, this site is ignored. In C-list, we decide the first
k sites as the candidates for the kNN of q. If there
are more than k sites in C-list, we insert the positions
of the rest sites into D-list and then delete the them
from C-list. If all the k sites in C-list are marked,
the query process stops and these k sites is the kNN
of q. Otherwise, the process continues and the client
needs to access the next packet. The next packet to be
received depends on D-list. If the position of the next
packet is in D-list, the client can be in sleep mode
and skip the next packet.
kNN-Query-VD(q, k)
1 count← 0;
 count: count the number of marked sites.
2 while count = k
3 do receive a packet which contains site p;
4 mark sitep;
5 count++;
6 for each u in Adj(p) ∪ {p}
7 do compute dist(p, u)
8 insert p and each u into C-list;
9 decide the candidates in C-list;
10 if k < |C-list|
11 then for each of the rest sites, u
12 do insert the position of u
into D-list;
13 if u is marked
14 then count - -;
15 delete u from C-list
16 Use D-list to compute the next
packet to receive
Fig. 5. A high-level description of the kNN query processing on
the client.
Consider the broadcast schedule in Figure 4 and
suppose that we have a 3NN query at the query point
q. Assume that the query starts at the position of
site o. After receiving o, we mark o and increase
the counter for the number of marked nodes by one.
The 1-order neighbors of o are m, l, r, s, and v. We
then insert all these sites, including o, into C-list.
According to their distances to q, the 3 candidate sites
are m, v, and l. The other sites can be deleted but their
positions should be recorded for selective tuning. In
this case, the positions 5 and 6 can be skipped since
sites r and s are impossible to be included in the
final result. Then we check whether all the candidate
sites are marked. Since no candidate site is marked
at this time instance, the process continues to receive
the next packet. The next packet can be determined
by comparing the current position with the positions
stored in D-list. Because position 3 isn’t recorded
in D-list, this position must be examined. When l
(packet 3) is received, we mark l and insert sites j
and f , into C-list only since r, o, and m have been
inserted. Note that, the 1-neighbors of l are f, j,m, o
and r. According to the distance to q, we now keep
m, j, and v in C-list and store positions 4, 5, and 6 in
D-list. Then the next packet to receive is the packet
at position 7. The same process continues until the
packet at 12 which contains site k. After receiving
this site, we mark k and all the sites in C-list are
marked and the process stops. The resulting 3NN is
k,m, i. In this example, the process experiences 6 and
11 packets in tuning time and latency respectively.
C. Correctness
In following, we show the correctness of the
proposed search protocol. Recall that the set of data
points (sites) is P = {p1, p2, · · · , pn} and the cor-
responding Voronoi diagram is V D(P ). We start
with the following two Lemmas. Due to the space
limitation, we skip the proofs of them here.
Lemma 1: Let pi ∈ P be the nearest neighbor of
query point q. Then q is in Voronoi cell v(pi) and the
next nearest neighbor of q is in Adj(pi).
Lemma 2: Suppose the kNN of a query point q is
{p1, p2, · · · , pk} . The (k + 1)th nearest neighbor of
query point q must be in
⋃k
i=1Adj(pi).
With these two lemmas, we can derive the follow-
ing theorem.
Theorem 3: Given a kNN query at point q. If all
the k sites are marked in C-list, those k sites in C-list
are the kNN of q.
Proof: Let the resulting kNN be {p1, p2, · · · , pk}
and pk be the kth nearest neighbor of q. We suppose
that the query process starts and stops at position x
earlier than the naive kNN search process. Hence, our
proposed protocol can achieve a shorter latency. Fig-
ure 7 demonstrates one of the simulation results about
the latency. All the other simulation results have the
same trend. Because the four schedules using space-
filling curve retains the locality of the data points,
they can lead to a shorter latency in average than RS.
During the query processing, when a nearby site is
approached, all the relevant sites will be checked soon
and then the process will stop. Besides, the latency
increases as the value of k increases. When k is small,
the protocol will experience a shorter latency.
Fig. 7. The latency of the proposed kNN search protocols on the
data set of size 100,000 with different values of k
V. Conclusions
In this paper, we present a kNN search proto-
col in wireless broadcast environments. The idea
of the proposed protocols is simple but can reduce
the latency and tuning time effectively. Unlike some
other protocols, the protocol does not use an index
in the broadcast and can support the kNN search
for an arbitrary k. Our simulation results show the
performance of our approaches in terms of tuning
time and latency. In the future, we plan to have
more simulation experiments on our protocols using
different space-filling curves and compare it with
the other existing kNN search protocols in wireless
broadcast environments. We will also discuss further
about the constraints on the distribution of the input
data points on the plane. It is possible that a data point
u in some given data point set of size n may have n−1
1-order neighbors. This will hurt the proposed search
protocols due to the limited packet size. However,
this case is rare in general. Besides, we believe that
the proposed approach can be easily adapted to the
traditional environments to save the number of I/O
operations when executing the query process. Recall
that our approaches do not need an index structure.
How to place the data points into the pages in order
to make the search more efficient in terms of number
of I/O operations becomes interesting.
References
[1] Swarup Acharya, Michael Franklin, and Stanley Zdonik.
Balancing push and pull for data broadcast. In Proceedings
of the 1997 ACM SIGMOD international conference on
management of data, pages 183–194, 1997.
[2] S. Berchtold, D. A. Keim, H.-P. Kriegel, and T. Seidl. Index-
ing the solution space: A new technique for nearest neighbor
search in high-dimensional space. IEEE Transactions on
Knowledge and Data Engineering, 12(1):45–57, 2000.
[3] M. de Berg, M. van Krefeld, M. Overmars, and
O. Schwarzkopf. Computational Geometry: Algorithms and
Applications. Springer, 2000.
[4] Bugra Gedik, Aameek Singh, and Ling Liu. Energy efficient
exact knn search in wireless broadcast environments. In
Proceedings of the 12th annual ACM international workshop
on geographic information systems, pages 137–146, 2004.
[5] Susanne Hambrusch, Chuan-Ming Liu, Walid G. Aref, and
Sunil Prabhakar. Efficient query execution on broadcasted
index tree structures. Data and Knowledge Engineering,
60(3):511–529, 2007.
[6] Susanne Hambrusch, Chuan-Ming Liu, and Sunil Prabhakar.
Broadcasting and querying multi-dimensional index trees in a
multi-channel environment. Information Systems, 31(8):870–
886, 2006.
[7] T. Imielin´ski, S. Viswanathan, and B. R. Badrinath. Data
on air: Organization and access. IEEE Transactions on
Knowledge and Data Engineering, 9(3):353–372, 1997.
[8] Mohammad Kolahdouzan and Cyrus Shahabi. Voronoi-based
k nearest neighbor search for spatial network databases. In
vldb’2004: Proceedings of the Thirtieth international con-
ference on Very large data bases, pages 840–851. VLDB
Endowment, 2004.
[9] D.-T. Lee. On k-nearest neighbor voronoi diagrams in the
plane. IEEE Transactions on Computers, 31(6):478–487,
1982.
[10] Chuan-Ming Liu and Shu-Yu Fu. Effective protocols for knn
search on broadcast multi-dimensional index trees. Informa-
tion Systems, 33(1):18–35, 2008.
[11] Chuan-Ming Liu and Kun-Feng Lin. Disseminating depen-
dent data in wireless broadcast environments. Distributed and
Parallel Databases, (1):1–25, 2007.
[12] N. Roussopoulos, S. Kelley, and F.Vincent. Nearest neigh-
bor queries. In Proceedings of the 1995 ACM SIGMOD
International Conference on Management of Data, San Jose,
California, May 22-25, 1995, pages 71–79, 1995.
[13] N. Vaidya S. Hameed. Efficient algorithms for scheduling
data broadcast. ACM/Baltzer Journal of Wireless Networks,
5(3):183–193, 1999.
[14] H. Samet. The Design and Analysis of Spatial Data Struc-
tures. Addison-Wesley, Reading, Massachusetts, 1990.
[15] Shashi Shekhar and Sanjay Chawla. Spatial Databases: A
Tour. Prentice Hall, 2003.
[16] Baihua Zheng, Jianliang Xu, Wang-Chien Lee, and Dik Lun
Lee. Grid-partition index: a hybrid method for nearest-
neighbor queries in wireless location-based services. The
VLDB Journal, 15(1):21–39, 2006.
demand broadcast can be used more widely for dynamic and large-scale data dissemi-
nation.
In some information services, data may have temporality, such as traffic information
and stock quotes. To ensure the data is timely useful, the clients usually request the data
with deadlines and the server then broadcasts the on-demand data. The requested data
become invalid when the deadlines are passed. Thus, how to schedule the on-demand
broadcast for the data with time constraints becomes an important topic. Many papers
discuss this topic and most of them consider a single broadcast channel. For a server,
using multiple channels to provide information makes the broadcast cycle shorter than
using one channel.
In this paper, we discuss the problem to schedule the on-demand broadcast for data
with time constraints in multi-channel environments. We consider each request has its
own deadline and has multiple data items associated with it. Such requests will raise
an important problem, data overlap problem, when multiple channels are used. That is,
the requested data items for a request may appear in different channels at the same time
and only one channel can be tuned into at a give time instance. More details about the
data overlap problem will be given in the next section. The objective of this work is to
provide on-demand broadcast schedules that have more requests meet their deadlines
and reduce the waiting time for the clients.
After giving the related work and preliminaries in Section 2, we describe the sys-
tem model in Section 3. The formal definition of the problem in Section 4. Then, we
propose two heuristics, MPHH and MPLH, in Section 5. The simulation is presented in
Section 6. Section 7 concludes this paper.
2 Related Work
Many papers about data broadcasting have been proposed in the past decade. Part of
these papers focused on how to schedule the broadcast in order to achieve a short la-
tency. The latency is the time elapsed between issuing and termination of the query and
can be used to indicate the Quality of Service(QoS). To reduce the latency, the broad-
cast schedules considered the data access probabilities and/or dependency. Furthermore,
people consider to use multiple broadcast channels to have more deduction on the la-
tency [9–13]. With multiple broadcast channels, the assumption that only one channel
can be tuned into at a time instance is usually made. Under such an assumption, the
data overlap problem happens when the requested data for a query are broadcast at the
same time [10]. In this case, only one requested datum can be accessed and the client
needs to wait until the next broadcast cycle for the other requested data, thus leading to
a longer latency.
The papers related to on-demand data broadcasting considered the urgency and pro-
ductivity of data to ensure the service quality where each request has a time constraint.
For such papers, the miss rate is used to be the main measurement to evaluate the ser-
vice quality. Miss rate is the ratio of requests missing the deadlines to all the requests.
In [2], the authors applied the earliest deadline first (EDF) policy to schedule the broad-
cast. For a request with multiple related data items, all the related data items should be
received before the deadline of the request; otherwise, the request is not fully served.
Fig. 1. The architecture of on-demand data broadcasting with 3 broadcast channels; the solid
squares presenting the broadcast slots; the dashed squares standing for the indexing channel
di(j) ∈ D. We denote the number of requests for a data item du as Ndu , 1 ≤ u ≤ n.
Ui indicates the set of unserved data items in the request Qi at current time. If Ui is not
empty, the request Qi is unserved. UR is the set of unserved requests at current time.
Let tc be the current time. The slack time of the request Qi is defined as dli − tc − |Ui|
and denoted by slacki. If |Ui| > 0 and slacki < 0, request Qi will miss its deadline
because the remaining time slots are not enough to broadcast the unserved data items
in Ui. The miss rate after the data items broadcast at tc is
R(tc−t0) =
|miss(Q{tc−t0})|
|Q{tc−t0}|
, (1)
whereQ{tc−t0} is the set of the requests received by the server from the time slot t0
to tc, |miss(Q{tc−t0})| is the number of requests missed their deadlines after the data
items broadcasted at time slot tc in the set Q{tc−t0}.
This paper discusses how to generate a broadcast schedule on multiple channels
from time t0 to ti which has the minimum miss rate as in Equation 1. We refer to such
a problem as the On-demand Broadcasting with Minimum Miss rate (OBMM) Problem
and give a formal definition as below.
Definition 1. (OBMM Problem)
Suppose all the notations are defined as above and the set RD(ti) consists of the un-
served data items of all the requests in Q{ti−t0} at ti. The On-demand Broadcasting
with Minimum Miss rate Problem is to find a mapping M : RD(t) → {1, 2, · · · , c},
t ∈ {t0, · · · , ti} such that
∑
R(ti−t0) is minimized.
5 Heuristics
The main idea of our proposed heuristics is to put the broadcast data into c channels
as compact as possible. Consider that there are c channels and the number of unserved
requests is m where c < m. In our proposed approaches, we first assume that there are
Input: c channels and m unserved requests.
Output: at most c data items.
(1) find the candidate of each request;
(2) aggregate the candidates into the set CA;
(3) if |CA| < c then /* |CA| is the number of CA */
return the data items in CA;
else
go to step (4)
(4) for n=1 to c do
select the candidate cai with minimun slacki
if more than one candidate be selected then
select the candidate cai with the least number of Ui
if more than one candidate be selected then
select the candidate cai with the most number of Ncai
remove cai from CA
else
remove cai from CA
else
remove cai from CA
return c selected candidates
Fig. 2. The high-level description of Most Popular First Heuristic
items, Nd1 , Nd2 , Nd3 , Nd4 , and Nd5 , are 1, 2, 3, 2, and 1, respectively. We first decide
the data items to be broadcast at time slot t = 1. Data item d3 will be selected as the
candidate in Q1, Q2, and Q3. Then we aggregate these three candidates into set CA.
There is only one data item d3 in CA after aggregation. The slack time of data item d3
is dl3−|U3| = 1. Because |CA| ≤ 2, we can directly broadcast d3 at time slot t = 1. In
the meanwhile, the process also receives a new request Q4 consisting of 2 data items,
d3 and d6, with deadline dl4 = 6. As show in Figure 3(b), the set of unserved data items
for each request at time slot t = 2 is U1 = {d1, d2},U2 = {d2, d4, d5}, U3 = {d4}, and
U4 = {d3, d6} respectively.Nd1 , Nd2 , Nd3 , Nd4 , Nd5 , and Nd6 now become 1, 2, 1, 2,
1, and 1 respectively. According to the approach, d2 is selected as the candidate of Q1
because Nd2 is larger than Nd1 . In Q2, because Nd2 = Nd4 = Nd5 , we can select any
one of d2, d4, and d5 as the candidate. In this case, we select the one has the smallest
id. So, d2 is selected as the candidate of Q2. Similarly, we select d4 and d3 in Q3 and
Q4, respectively. We then aggregate the candidates, ca1(= d2), ca2(= d2), ca3(= d4),
and ca4(= d3) into CA. In particular, ca1 and ca2 have the same data item. We make a
new candidate ca{1,2} with slack time slack{1,2} = slack1 and the number of unserved
data items being |U1|. Hence, after aggregation,CA becomes {ca{1,2}, ca3, ca4}.
Since |CA| = 3 > c = 2, the process moves to Conversion phase. The candi-
date with the minimum slack time, ca3(= d4), is first selected to be broadcast and
then deleted from CA. Then the process continues to select the second data item to
be broadcast. CA now becomes {ca{1,2}, ca4} and slack{1,2} and slack4 are both 3.
We then select the one having the least |Ui|. Because |U1| = |U4| = 2, we can select
either ca{1,2} or ca4. Again, we select the one with the smaller id. Hence, ca{1,2} is
(a) at time slot t = 1 (b) at time slot t = 2
Fig. 4. A broadcast schedule generated by MPFH that can be improved by accumulating more
requests for a data item
c = 2, the process moves to Conversion phase. With minimal slack time, candidates
ca3(= d4) and ca1(= d1) are selected to be broadcast. In the unserved data items for
each request in Figure 5(a), d4 is removed fromQ2 because ca2(= d5) is not selected to
be broadcast and no data items in Q2 are removed before. At time slot t = 2, candidates
ca3(= d3) and ca1(= d2) will be broadcast. Figure 5(b) shows the result after d3 and d2
are broadcast and the process at time slot t = 3. Notice that, candidates ca2(= d5) and
ca4(= d6) are not broadcast at time slot t = 2, so we can remove a data item di fromQ2
and Q4 if di is broadcast at time slot t = 2. We remove d3 from Q4. For Q2, one of d2
and d3 can be removed and d2 is removed in this case. The unserved data items in each
request now are U1 = {d3}, U2 = {d3, d5}, U3 = {⊘}, and U4 = {d6}, respectively.
Because U3 is empty, we remove Q3 from request queue. The same process continues
until UR is empty. Figure 5(c) shows the result if there is no more request received.
(a)at time slot t = 2 (b)at time slot t = 3 (c)at time slot t = 5
Fig. 5. An example of the execution of MPFH at time slots 2 and 3 and the resulting broadcast at
time slot 5 for the case in Figure 3
(a)Database Size=100 (b)Database Size=200
(c)Database Size=500 (d)Database Size=1000
Fig. 6. Miss rates for the MPFH, MPLH, EDF, and MSF, when the size of database is (a) 100, (b)
200, (c) 500, and (d) 1000, with different number of channels
before their deadlines. When the data access pattern is Zipf distribution, MPFH and
MPLH have a lower miss rate than in uniform distribution. Because the similarity of
the associated data items between requests is higher in Zipf distribution, our broadcast
schedules can serve more requests due to the aggregation of the requests when schedul-
ing the data items.The trend is opposite in EDF and MSF because they don’t aggregate
the requests.
We now discuss MPLH and MPFH. With a small number of channels, MPLH per-
forms better than MPFH when the database size is small. Recall that, MPLH postpones
the time to broadcast hot data in order to server more requests in the same time slot.
However, we observe that, as the database size increases, MPFH will do better instead.
We conjecture that the similarity between requests is too low, so the effectiveness of
postponement disappears. When the number of channels increases, more data items can
be broadcast in a time slot. The postponement leads to broadcast fewer redundant data
items. Thus, MPLH has a better performance.
each heuristic has a better performance than other in some specific conditions. MPLH
generates a broadcast schedule with lower miss rate when the number of channels and
the size of database are both either small or large. When database size is large, the
broadcast schedule generated by MPFH has a shorter latency than MPLH, but the miss
rate is higher. We conjecture that the ratio of the number of channels and the size of
database may affect the performance of our heuristics.
References
1. S. Acharya, R. Alonso, M. Franklin, and S. Zdonik. Broadcast Disks: Data Management
for Asymmetric Communication environments. In Proceedings of the 1995 ACM SIGMOD
International Conference on Management of Data, pages 199–210, 1995.
2. P. Xuan, S. Sen, O. Gonzalez, J. Fernandez, and K. Ramamritham. Broadcast on Demand:
Efficient and Timely Dissemination of Data in Mobile Environments. In Proceedings of the
Third IEEE Symposium on Real-Time Technology and Applications, pages 38–48, 1997.
3. J. Xu, X. Tang and W.-C. Lee. Time-critical On-demand Data Broadcast: Algorithms, Anal-
ysis, and Performance Evaluation. IEEE Transactions on Parallel and Distributed Systems,
17(1):3–14, 2006.
4. K.-W. Lam, V. C.S. Lee, and X. Wu. On-demand Broadcast for Bobile Real-time Multi-item
requests. In Proceedings of the Int’l Conference on Computing & Informatics, 2006.
5. J. Chen, G. Huang and V.C.S. Lee. Scheduling Algorithm for Multi-item Requests with
Time Constraints in Mobile Computing Environments. In Proceedings of the International
Conference on Parallel and Distributed Systems, pages 1–7, 2007.
6. Kai Liu, V. C. S. Lee, and Karl R. P. H. Leung. Data scheduling for multi-item requests in
multi-channel on-demand broadcast environments. In Proceedings of the 7th ACM Interna-
tional Workshop on Data Engineering for Wireless and Mobile Access, 2008.
7. C.-L. Hu. On-Demand Real-Time Information Dissemination: A General Approach with
Fairness, Productivity and Urgency. In Proceedings of the 21st International Conference on
Advanced Information Networking and Applications, pages 362–369, 2007.
8. S.K. Udgata. A dynamic, Real-time and On-demand Heuristic Broadcasting Scheme for
Multiple Data-item Transactions in Wireless Environment. In Proceedings of the 4th Inter-
national Conference on Wireless Communication and Sensor Networks, pages 40–44, 2008.
9. K.-F. Lin and C.-M. Liu. Broadcasting Dependent Data with Minimized Access Latency
in a Multi-channel Environment. In Proceedings of the 2006 International Conference on
Wireless communications and mobile computing, pages 809–814, 2006.
10. S.-Y. Fu and C.-M. Liu. Broadcast Schedules and Query Processing for k Nearest Neighbors
Search on Multi-dimensional Index Trees in a Multi-Channel Environment. In Proceedings
of the IEEE International Conference on Systems, Man and Cybernetics, 2006.
11. W.-C. Peng and M.-S. Chen. Dynamic Generation of Data Broadcasting Programs for a
Broadcast Disk Array in a Mobile Computing Environment. In Proceedings of the 9th Inter-
national Conference on Information and knowledge Management, pages 38–45, 2000.
12. W. G. Yee, S. B. Navathe, E. Omiecinski, and C. Jermaine. Efficient Data Allocation over
Multiple Channels at Broadcast Servers. IEEE Transactions on Computers, 51(10):1231–
1236, 2002.
13. S.-Y. Yi, S. Nam and S. Jung. Effective Generation of Data Broadcast Schedules with Differ-
ent Allocation Numbers for Multiple Wireless Channels. IEEE Transactions on Knowledge
and Data Engineering, 20(5):668–677, 2008.
14. G. K. Zipf. Human Behavior and the Principle of Least Effort. Addison-Wesley, Mas-
sachusetts, 1949.
98年度專題研究計畫研究成果彙整表 
計畫主持人：劉傳銘 計畫編號：98-2220-E-027-007- 
計畫名稱：無線行動環境中同儕網路上資訊分享系統之開發 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 5 5 80% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 4 4 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 2 50% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
