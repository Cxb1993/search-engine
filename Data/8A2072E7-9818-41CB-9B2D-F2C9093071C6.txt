 2
 安全的無線移動任意網路中的信任管理 
在隨意的通信網路中，無線移動 Ad-hoc 網路(wireless Ad-hoc network)是相當重要的議題
之一。 除了使用在一般所熟知的軍事用途外，Ad-hoc 網路也可適用於許多新興的生活應用
上，包括聰明的數位家庭網路、數位網路醫院、或數位辦公室等應用。Ad-hoc 網路毋需依賴
類似工作站、存取端點、或無線交換中心之類的基礎設施支援，並且能夠藉由各種無線技術
架構而成，諸如膝上型電腦、掌上型電腦、或行動電話等；只要經由一組帶有無線收發裝置
的移動終端，就能夠進行移動通訊。礙於無線傳輸的頻寬限制，Ad-hoc 網路中的內部端點只
執行基本的網路功能，如封包傳遞、搜尋服務、網路控制、路由協定、可作為路由器與其他
端點連接通訊的移動端點、以及將封包傳遞到目的地等功能。 
我們在隨意網路下提出方法形成互相合作之信任群體改善使用者之間的信任管理。在我
們的系統中，每位使用者可以藉由對他人公鑰簽署憑證表示對其的信任。每張憑證裡的信任
值代表著簽署者對公鑰擁有者的信任程度。一個評鑑權重的信任方法被運用於從一堆平常搜
集到的憑證裡，決定哪些使用者是值得信任的。我們的方法是全面分散的，不需依靠事先建
立的信任中心或是事先分配的憑證，這將使得它可以適應在隨意網路中。 
當兩個節點彼此在他們的傳輸範圍裡時，一次的交易將會完成，並且在交易完成後憑證
也會簽署出去。不管此節點被信任與否，在完成交易後都將收到由鄰近的節點所發出的憑證。
節點可以選擇拋棄較低信任值或是不被信任的憑證以空出它的空間儲存更多較高信任值的憑
證。從簽署時間到過期時間是每張憑證的有效時期。Cert X->Y 表示這是一張由節點 X 簽署給
節點 Y 的憑證。如果使用者認為憑證裡的公鑰不再是合法的或是認為自己的個人私鑰遭到破
解，它可以撤銷自己所簽署的憑證。有兩個撤銷憑證的方式，積極式撤銷法(explicit revocation)
以及消極式撤銷法(implicit revocation)。在積極式撤銷法中，使用者必須廣播此撤銷訊息給隨
意網路中的所有節點，通知他們由使用者簽發的憑證未來不再適用於認證作業。然而，此方
式需要廣播並且將會造成太多的頻寬負擔。有時候採取像消極式撤銷法這樣被動的方式或許
會更實用。如果使用者對某個公鑰不再信任，他只需拒絕簽署新的憑證來更新信任關係，並
且在過期時間到達時如果沒有更新的憑證被收到，舊的憑證將會被撤銷。 
我們在系統中建構有向圖 G(V, E)，分別以 V 表示為公開金鑰的集合，E 表示為憑證的集
合。我們稱此圖為憑證圖。隨意節點擁有兩種不同的憑證列(certificate list)，一個存放此節點
所簽署出去的憑證，另一個收集其被他人所簽署的憑證。如果在憑證圖 G 中存在一條從節點
U 到節點 V 的有效憑證鍊，則 V 的公鑰可被 U 所認證。如果此鍊中的每個憑證均未過期並且
都可以被所簽署者的公鑰所證實，則此鍊為有效合法的。 
 4
圖 2 闡明了互相合作之信任群體形成時的流程圖。在圖 2-1 中，節點 X 是一個非群節點
並且它身邊有至少兩個高度信任(信任值大於 0.7)之非群節點或是一個高度信任之非群節點加
上兩個高度信任之群節點，接下來 X 在圖 2-2 會廣撥組群訊息給所有它的鄰居。在此過程中，
圖 2-3 中的中介點(intermediate node)Y 會適時的介紹其高度信任的鄰居(節點 Z)與節點 X 互相
認識。最後，節點 X 與節點 Z 可經由 MVAE 計算出彼此的信任值並且簽署憑證給對方並且也
成為群體成員。 
 
圖 2. 產生互相合作之信任群體流程圖 
在形成互相合作之信任群體後，我們可以保證每位群體成員與群根之間是保持高度信任
的關係。但卻無法保證所有群體成員彼此都是高度信任的，因此群根此時需要做一些額外的
事情來保證這個事實。群根此時要產生群鑰配對、憑證的簽署時間、過期時間、並且找出自
己憑證庫裡所有有關群成員的憑證，包含了自己所簽署的或是被簽署的，最後將這些資訊連
接(concatenate)在一起以安全單撥(secure unicast)的方式傳送出去。當群成員收到此訊息後，
它將可以得到關於此群體及其他群成員的資訊。此時的群成員即可採用 MVAE 來重新評估自
己對其他群成員的信任。我們採用保守的方式，每位群成員會以其對所有其他群成員更新過
的信任值中選擇最低值做為對群鑰配對的信任值。此方式用以避免其他群成員在利用群公鑰
簽署憑證時，自己因高估對群公鑰的信任而產生過度信任非群體的成員。 
在隨意網路中有了以公鑰認證的服務之後，使用者將可使用傳統的加密工具解決重要的
安全議題，例如應用程式中的保密性(confidentiality)不可拒絕性(non-repudiation)。在此段落
中，我們將說明如何藉由經驗法則(heuristic algorithm)選取較高分數(high score)的憑證，提供
給每位使用者建構自己的憑證庫並進而改善認證率(authentication rate)。當越多的交易被完成
後，將會越多的空間被要求來存放這些憑證。因此，對每位使用者而言建構憑證庫是一件不
可或缺的事情。以下我們定義幾種不同種類的憑證庫並且描述它們的目的:  
1) 個人輸出憑證庫( Personal Out-bound Certificate Repository，簡稱 POCR): 每個使用者
 6
他的群輸出憑證(包括 Cert E->G)與 F 的群輸入憑證(包括 Cert G->F)。如果存在一條像圖 3 所
示的憑證鍊(E->G->F)，則稱 E 可以間接認證 F 的個人公鑰。此時採用 PTV 的方式計算 E 對
F 的信任值。 
我們在 OMNET++中的 adHocSim 建構了一個模擬環境，用來評估我們提出方法的效率。
模擬環境中的參數列舉下表。每次交易完成後的信任值是以中間值(mean)0.7 且介於 0.0 到 1.0
之間的指數分佈(exponential distribution)所設定，並且所有的憑證在環境中均假設為合法的。 
頻寬(Bandwidth) 11 Mb / sec 
移動模型(Mobile Model) Random way point 
暫停時間(Pause time) 10 sec 
傳輸能量(Transmission power) 8000 – 12000 pWatt 
接收門檻(Received threshold) 1 pwatt 
週期廣撥組群要求(Periodically broadcasting grouping request) 30 sec 
α 0.5 
 
為了觀察節點組群的情況，我們在模擬時設計組群率(grouping rate，簡稱 GR)，而 GR = 群節
點個數/N, 其中 N 表示是網路中所有節點的個數。圖 4 列出了在不同節點個數但相同網路密
度下的組群率，其中網路密度為每個節點平均佔據 1000 平方公尺。結果顯示出模擬 30 分鐘
之後，所有不同節點數的狀況下，平均每個節點有 95%的機率會形成群節點並且得到群鑰配
對。 
Group ing  Rate
0
0 .2
0 .4
0 .6
0 .8
1
0 3 6 9 12 15 18 21 24 27 30
Time (minu tes)
100  nodes
400  nodes
700  nodes
1000  nodes
 
圖 4. 組群率 
我們定義認證率(authentication rate，簡稱 AR)表示使用者成功認證其他人的比率，它的
公式如下: 
AR = | { Authen i->j | i, j∈V and i ≠ j } | / [N*( N – 1 )], 
其中 |V| = N 且 Authen i->j 表示節點 i 可以經由直接或間接方式認證節點 j。 我們模擬三種不
同的結構: 一個是一般隨意網路行為，另外兩個結構分別在隨意網路中支援互相合作之信任
群體，其中一個可存放群簽證在 GICR 與 GOCR，另一個則不儲存。我們在一個 3200 公尺*3200
公尺的環境中模擬 1024 個節點，節點的移動速度均等分配(uniform distribution)在每秒 0 公尺
到每秒 4 公尺之間，群輸出憑證庫與群輸入憑證庫可存放 32 張憑證。由圖 5 得知，利用群憑
證可以得到非常好的認證率。圖 6 則說明了與一般隨意網路比較起來，只需要少量的額外群
 8
大類：第一類為集中式處理法(centralized approach)，其群體金鑰是藉由可信賴或安全的伺服
器來產生及管理；第二類為分散式處理法(distributed approach)，其群體金鑰是由所有成員共
同推導及維護；這兩類作法各有其優缺點，前者需存在一個金鑰伺服器，當群體有成員加入
或離開時，需負責進行群體金鑰的更新並將其發送給各合法的成員，此方法對於金鑰的管控
較容易，但是金鑰伺服器需負責運算和管理整個群體中的金鑰，因此其要有較強的運算能力，
夠大的網路頻寬以及大量的儲存空間，因此金鑰伺服器往往是造成整個系統效能無法提升的
瓶頸。此外，要是金鑰伺服器非群體中的成員，則系統需多花額外的資源來建置伺服器；要
是金鑰伺服器是由群體中的某個成員來擔當，則相對於其他成員而言，其會有較高的計算成
本。而分散式處理法中，金鑰的維護成本是由群體中的所有成員來共同分擔，因此整個系統
所需的運算成本是均分在各個成員上，而非單一成員，如此將可避免集中式處理法中擔任伺
服器的成員，需負擔較高運算成本的窘境。由於此方法對於金鑰的管理須由所有成員共同來
執行，於實作上較不易實現。 
 金鑰樹(key tree)被廣泛的運用於安全群體通訊系統中，主因是透過金鑰樹的樹狀結構能
有效率且安全的進行群體金鑰的更新。本研究對於上述兩類的群體金鑰管理協定皆有所探
討，針對集中式處理法我們提出單次金鑰推導(one-way key derivation)的概念，並利用金鑰樹
的結構來配置群體金鑰與各成員的祕密金鑰，當群體中有成員加入或離開時，金鑰伺服器只
需更新受影響且由子群體中成員所共享的金鑰，以及群體金鑰。與其他研究相比，所提方法
中金鑰伺服器不需將變動的金鑰再次加密並傳送給群體成員，成員們可以使用原本所持有的
金鑰推導出更新後的金鑰，將可減少伺服器對金鑰加密與傳送的成本花費，如此對於網路頻
寬的使用將可降低。相關的研究成果發表於[3][4][5]。 
 
 具匿名性之英式拍賣機制 
針對應用於網際網路上交易拍賣活動中所牽涉的使用者個人隱私及交易過程的安全性問
題，加以說明並且提出因應之道。綜觀現行的拍賣網站，其採行的機制雖然可行，但仍存有
許多安全上的缺失，例如競標者向拍賣商註冊只需填寫身分資訊，拍賣商再以電子郵件向競
標者確認，並無使用任何的安全技術加以保護，若使用者填寫錯誤的身分資訊，拍賣商將無
法查覺。再者，關於競標者的匿名性(anonymity)問題亦無法解決，因為競標過程中，競標者
的身分資訊儲存於拍賣網站中，拍賣網站透過競標者的身分識別(identifier)即能確認競標者身
分。若拍賣商洩露了競標者身分資訊，將影響整個拍賣過程中的公平性(fairness)，對於競標
者而言，仍是一大隱憂。 
目前網際網路所採行的電子拍賣機制，可概略區分為密封式拍賣(sealed-bid auction)與開
 10
降低。 
(11) 單次註冊(on-time registration)：競標者僅需註冊一次，即可多次參與拍賣。 
(12) 容易註銷(easy revocation)：註冊單位得以簡單有效的方式註銷競標者參與競標的資格。 
我們針對參與拍賣活動的互動三方加以連結，包括：註冊單位(registration manager)、拍
賣商(auction Manager)及競標者(bidder)，並提供消費者一個安全、公平及有效率的適用於網路
拍賣環境的英式拍賣機制。此研究亦針對英式拍賣機制所須之安全性，一一提出因應之道。
在效能上，以較少的指數與乘法運算，大幅降低競標者等待核發拍賣憑證與出價所需之時間
成本，提昇競標者在投標活動中的競價效率，使競標活動得以更有效、更便捷的方式進行，
因此可適用於網際網路有限的應用環境，有助於網路商務交易之發展。(已投稿於 Journal of 
systems and software) 
 
 複雜的階層式資訊加密管理系統 
在日趨進步的網路科技應用上，分享資源已是網路技術的一大趨勢。尤其是在階層式的
系統架構中，勢必存在動態存取控制(dynamic access control)的管理問題，因此個人資訊的保
護與管理，將加權式的存取控制技術最關鍵的環節，這一類技術的相關應用常見於具有位階
分級的軍事管理系統、政府機關、或私人企業中，一般使用在資料庫管理系統、資料通訊管
理與網路管理上。 
最近幾年，已經有相當多的研究從不同的角度提出解決方法。本研究的內容，主要是針
對階層式的資料加密系統中可能出現的存取控制問題，將牛頓內插多項式(Newton's 
interpolation polynomial)應用在使用者金鑰的管理上，首先根據位階優先權對使用者做階序搜
尋，將成員組成一個多階層的結構式組織，詳圖 7。這樣的組織形式不但可以應用在存取控
制的管理，也能將安全性的管理問題有效的加以減化；將多項式的概念應用在產生金鑰的演
算法上，可以將執行之際的複雜度降至線性方程式的複雜度，以便提高執行效能。在階層式
的資料加密系統中，一個較低位階的後繼者(successor)很可能同時棣屬於多個前行者
(predecessor)，我們提供一套有效率的金鑰分配及管理機制，使不同的前行者能分別以個人的
資訊取得某一共同的後繼者的金鑰，對其進行存取控制。如何將後繼者的金鑰資訊隱含在不
同的前行者的金鑰中，使這些前行者能夠分別正確且有效解出同一把金鑰，對於擁有多個使
用者的多階層的使用者架構組織而言，在儲存金鑰的空間複雜度的減化與控制上，其重要性
不言可喻。除此之外，建構使用者用以存取控制後繼者的多項式，只使用所有立即後繼者的
秘密資訊與該節點的公開金鑰，因此不會存在來自內部後繼者的合謀攻擊問題。(已投稿於
Computer Standards and Interfaces) 
