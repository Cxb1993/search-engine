目錄 
1、前言(Preface) ........................................................................................................................... 2 
2、介紹(Introduction) .................................................................................................................. 5 
3. 文獻探討 ................................................................................................................................. 11 
4. 研究方法、進行步驟及執行進度 ........................................................................................ 25 
4.1 研究方法........................................................................................................................ 25 
一、研究理論............................................................................................................... 25 
二、發展工具............................................................................................................... 33 
1. Pattern Modeling Tool ...................................................................................... 33 
1.1 PaSEE 樣版定義模型(Pattern Unified Model)...................................... 34 
1.3 流程模型(Process Metamodel) ............................................................. 37 
1.4 工作產出模型(Artifact Model) ............................................................. 38 
1.5 角色模型(Role Model).......................................................................... 39 
1.6 輔助工具模型(Tool Model).................................................................. 40 
1.7 PaSEE 統一超模型 Sub Models 之整合 ............................................... 41 
1.8 PaSEE Unified Model 之結構................................................................ 41 
1.9 PaSE Pattern Modeling Tool： .............................................................. 43 
2. Pattern Relation Modeling Tool........................................................................ 45 
5. 結論.......................................................................................................................................... 51 
6. 參考文獻(References) ........................................................................................................ 52 
7. 近三年已發表之相關論文、期刊 ........................................................................................ 61 
　 國際期刊 ...................................................................................................... 61 
　 研討會 .......................................................................................................... 62 
 
圖2. 2003至2008年亞太市場資訊服務業區域別市場規模 
(Source: Gartner，資策會MIC整理，2004 年11月) 
為提升整體產業產值、產業規模、產品發展能力、研發投入規模與實力、外銷能力、
大型資訊系統承接能力則必須要有國際標準之引導與認證或是軟體流程作業模型準則，如
ISO 9000系列、CMMI等等，才可取得國內外之軟硬體廠商之信任，進一步與國際級開發
廠商相互匹敵。 
 
表1. 軟體產業環境SWOT之分析 
優勢(Strength) 
 新技術的接受度高。 
 政府將軟體列為策略性發展之 
產業，並予以各種輔導、支援 
計畫。 
 資本市場發達，利於籌措資 
金，不需仰賴外資。 
 勇於創新，創造自我品牌。 
 人才素質高。 
機會(Opportunity) 
 民間具有強烈的創新精神。 
 科技專案計畫已投入大量資 
源。 
 大量的電子數位產品輸出。 
 國外軟體委外訂單的釋出。 
弱勢(Weakness) 
 軟體開發可再使用性低。 
 高額的人力成本。 
 國內市場規模小。 
 缺乏世界級領導性產品。 
 軟體開發組織規模小。 
 客觀軟體評量標準未被採用。 
 土法煉鋼的軟體開發。 
威脅(Threat) 
 大陸、印度及韓國軟體產業的快
速成長。 
 高階研發上的人才仍顯不足。 
 國內其他產業外移，內在需求 
逐漸縮小。 
 世界投資環境惡化，企業領導 
人投資意願降低。 
從表 1 軟體產業環境SWOT 之分析，我們試著利用管理學上的SWOT(Strength, 
Weakness ,Opportunity and Threat)分析，分析台灣軟體產業外在環境的機會與威脅，及內部
的優勢與劣勢。我們可以得知，由於台灣軟體開發的可再使用性很低，而且水平分工、垂
直整合機制並未形成，因此，台灣軟體產業如要進軍國際，則必須要整合國際標準、導入
2、介紹(Introduction) 
近年來，由於軟體產業的發達，軟體系統的需求量愈來愈大，複雜度與異質性也越來
越高，軟體產業的問題經過三十年的努力，仍未解決。軟體開發時程的評估不易，使得工
時的增加導致時程延後，預算超支，軟體品質下降，這些問題有可能是來自於對軟體的不
了解以及誤用，但最大的問題是目前IT產業大多是跨領域的開發軟體，所以開發一個軟體
需要包含各個領域的專家(Domain Expert)才能確保這個軟體是符合需求的。雖然軟體工程
的概念已經提出數十年，但始終對於軟體工程的導入無所適從，一方面是軟體工程導入不
易，開發人員教育訓練時間過長；一方面所使用的軟體輔助開發工具相互整合來源資料亦
有其難處，彼此間無協調整合機制。如此多樣的不確定因素讓開發者之發展環境持續在改
變而使其無所適從，軟體開發方法、軟體開發流程與軟體輔助開發工具無法相互整合，以
至於不能發揮整體功效。 
 
在軟體知識隨著知識爆炸的時代，KM(Knowledge Management)更顯重要，軟體開發的
知識量大複雜而且又有相依性，並且與人才背景相關，目前軟體開發方面KM非常缺乏。
在人才培育方面，國外早已有許多軟體工程研究所的建立，在推動軟體工程方面已累積了
許多的經驗；反觀國內，近年來才有軟體工程研究所、軟體工程學程、軟體聯盟組織以及
產業訓練的人才培育中心等為了軟體產業而新興的培育中心，但已經落後國外許多，所以
我們要更積極於各階段的人才培育的計畫、各個專業領域的分享及經驗傳承來滿足市場需
求並提高用人的水準，才不會有人才誤用的情形發生。 
 
為能使軟體開發整體效益有效地提昇，陸陸續續有多種模型(Models)、技術
(Technologies)與標準(Standards)被提出以解決各階段的問題，例如，物件導向分析與設計
觀念之於軟體架構分析與規劃[2][7]；標準化模型語言(UML)之於系統整體架構、設計、狀
態控制、與測試分析[3][5]；設計樣板(Design Patterns)之於問題定位與有效設計模式的導入
[10]；元件再使用(Reusable Components)之於回收應用高效益高認同之軟體與資料模組或片
段[1]；標準化的導入之於軟體作業流程準則[87]等等。它們試圖在所針對的領域中提出整
合性的標準化，也達到了相當的成果。 
 
綜觀整個軟體開發流程的各個階段與檢討其間的連貫關係，各階段發展的標準、方法
步驟以及應用工具，卻因為缺乏彼此之間協調與整合的考量機制存在，致使軟體開發者不
僅在軟體工程生命週期中之各個階段(phase)中，以及跨各phase間的連續性及ㄧ致性，必須
以人工方式檢視並協調整合來自不同標準、方法及應用工具之來源資料。也因為學習經驗
難以累積，使得軟體軟體開發成本居高不下。並且，不同設計之間的統合、細部分工等作
業程序，使得軟體開發與研究者無法以一個一致性、協同性的開發方式進行軟體系統的開
發作業，而使得整個軟體開發困難重重。 
 
另一方面，卡內基美農大學軟體工程學院(CMU SEI)依據軟體發展成功案例定義出一
套軟體發展依歸，軟體能力成熟度整合模式(Software-Capability Maturity Model)[83]，希望
透過標準的定義累積現有經驗，有效幫助軟體產業的發展。但是，SW-CMM定義軟體發展
階段的目標與限制，並未給予實際的執行方法，這些經驗法則需要透過足夠的時間、人力
(Pattern Based Software Engineering Process)，並透過實驗案例證明此發展程序能夠有效的幫
助軟體發展，降低發展成本，提升軟體品質。 
 
在先前我們所提出的研究中，以智慧型代理人為基礎之軟體流程協同開發環境
[158][159]，如圖4所示，它是一個以軟體開發流程與符合CMMI 精神之方法技術為核心的
開放平台。軟體或系統開發者只需將此軟體開發平台設定為欲遵循的軟體開發流程，比如
統一流程(Unified Process)；並遵照此軟體開發平台所指引的步驟以及工具，一步步的開
發，不需要真正的了解軟體開發流程之各項條例、限制或順序，相對來說一般軟體業者的
開發軟體，學者時間長、專業知識需求高、代價昂貴，又有太多的工具與方法需要選擇，
就此而言軟體流程協同開發環境，能以更簡單、更高效率軟體流程來進行其系統軟體開發。 
 
圖4. The PRAISE Definition Tool GUI 
 
圖5.The use case diagram of the Library sub-system 
現在的軟體開發(Software Development)隨著軟體複雜度的增加，以及必須整合各種硬
體、OS、應用程式皆不同的異質性系統，譬如嵌入式系統與無線網路等，因而遭遇到更多
的困難與挑戰。而對於大部分的系統而言，軟體的發展與維護比起硬體的設計與實作更容
易產生問題。 
 
為了解決軟體開發上的問題，已有眾多軟體工程方法論、流程工程(process 
engineering)、以及電腦輔助軟體工程工具組(Computer Assisted Software Engineering tools, 
CASE tools)相繼被提出。然而，這些方法論、流程工程、與CASE tools並未經過適當的整
合，因此對於整個軟體開發流程來說，所能提供的支援並不完全。他們大多僅能支援軟體
流程裡的某個階段，所以在軟體開發流程中仍然有許多活動必須要仰賴人工作業；這樣會
容易產生錯誤、不一致與不可靠的情形發生，進而導致軟體品質與生產力的降低。即使提
供這些軟體開發的相關工具，對於有經驗的人也許幫助很大，但是對於不夠熟練的生手，
提供工具並不能保證其品質及工作效率，因此導引生手學習及使用有經驗地人或專家所提
供之Pattern及相關標準，並且引導在軟體工程生命週期得到較全面且連續性的輔助，相信
對軟體開發或維護，皆有很大的助益。 
 
以下為本計畫所提出之Pattern Based Software Engineering特色： 
I. 提供一樣板設計整合模組 (Pattern Unified Model) ，供系統開發者設計軟體相關樣板設
計模組 (Pattern Model) 。我們研發出一個開發方法，可以彈性的針對每個不同階段的軟體
開發問題設計有效的樣板。我們為整合System，加入Process 及Collaboration 的特色與XML 
Representation，並導入合適的軟體開發方法，調整為合適於組織的開發方法。我們希望能
協助開發組織藉由我們的開發方法，有效的累積利用現有的經驗與資源，降低多變環境所
帶來的影響。樣板的描述包含幾項重要元素，一、什麼情況需要此樣板，二、相關的人員
包括哪些，三、應該如何解決這樣的情況，四、此樣板應如何被使用，五、此樣板應該在
什麼時候被使用。因此，我們的樣板設計模組包含以下五項: 
(1) 角色設計樣板(Role Model) 
(2) 流程設計樣板(Process Model) 
(3) 工具設計樣板(Tool Model) 
(4) 文件設計樣板(Artifact Model) 
(5) 方法設計樣板(Methodology Model) 
 
II. 提供一樣板關係建立模組 (Pattern Relation Model) ，提供系統開發者依據系統開發不同
的需求整合設計樣板，建立樣板間彼此的關係。現階段軟體開發強調協同合作，協同就是
為了達到開發團隊之間的合作機制。有此可見，彈性整合不同階段的設計樣板，可以連結
所有相關的有效解決方案，以因應多變的軟體開發環境以及軟體需求。然而，不同的樣板
間可能存在許多不同的依存關係，樣板關係建立模組，可以有效幫助系統開發者建立樣板
間的相依模組(Relation Model)，利用這些模組定義樣板關係。由此機制，可以將經驗的累
積由一維的模組再利用擴展到二維的流程再利用。 
 
III. 引入CMMI軟體流程作業模型準則。 
CMMI是目前廣被接受的軟體發展流程標準，我們把CMMI各等級的關鍵流程(Key Process 
3. 文獻探討 
本計畫提出之整體環境主要包含三個領域，軟體工程方法論、電腦輔助工具、流程控
制理論。而除了基本領域之外，亦涵蓋了CMMI以及ISO 9000系列標準。相關研究詳述如
下： 
I. 軟體工程方法論 (Software Processes Methodology) 
A. PRIME, Toward Process-Integrated Modeling Environments [54] 
近十年來軟體工程的發展趨勢，偏向以流程為主的開發環境(Process-centered 
Environments，PCEs) [54]。其焦點放在專案管理支援而忽略了工程師開發專案流程的
方法守則(Method Guidance)。所以，以流程導向為主的開發環境主要是以支援資料整
合機制為主，譬如其資料交換格式的儲存；然而，這暗示著PCEs 的流程知識並不穩
定，亦無法提供一完整軟體工程環境。 
 
在 PRIME 的框架(Framework)中，它允許以Process-integrated 為主的工具嵌入方
法守則，與以PCEs為主的工具相較之下，可以知道PRIME 的工具是根據目前流程的
實際情況和方法定義來調整自己的行為。PRIME 的流程整合工具必須完成工具模型
的定義、工具模型與方法定義的整合、工具、Process-aware的控制流程機制、以及標
準機制來完成整合環境模型、以廣泛的通訊協定來同步工具與標準機制。 
 
PRIME 提供了一個整合性之流程框架，能根據客制化之軟體方法定義與流程發
展現況來調節開發人員的行為，可以強化軟體方法導引準則之效力。但其缺乏軟體相
關標準的支援，如CMMI、SPEM，也未強調現代眾所皆知的軟體方法論之應用，如
RUP、XP，且其流程法規領域(Process Enactment Domain)對於軟體流程之控制與目前
工作流程(Workflow)的定義比較之下顯得較薄弱。 
 
B. 統一流程 (Unified Process) [33][34] 
由Grady Booch、Ivar Jacobson、James Rumbaugh 三位大師提出了統一流程(Unified 
Process，UP)[38]，簡單來說是用一個通用的框架(Framework)，描述特定的開發流程，
任何的企業都可以根據自己的需求，適當的修改統一流程，以符合組織團體需要的開
發流程[39]。 
 
它讓開發人員可以將統一流程適當的導入開發流程中，在遵循統一流程所定義之
原則的同時，統一流程也指導開發團隊的方向。而從設計與實作統一流程的觀點而言，
它是一個流程產品(Process Product)，跟其他的軟體產品具有相同的特性，而不同的是
它提供了一組Rational 的軟體開發工具的發展準則。統一流程具有定義明確且標準化
的結構，這個結構主要是以物件導向的方式來形成。 
 
統一流程可分成「水平式」與「垂直式」兩個角度來探討。水平式的結構表達了
流程的動態觀點，包括了Cycles、Phases、Iterations、Milestones這些名詞。在統一流
程中，它是用循序漸進反覆(Incremental Iterations)的步驟遞迴地來設計軟體產品，而無
形中同意了設計想法的測試與驗證，以降低風險，亦即讓錯誤盡可能地發生在生命週
E. 極端軟體製程 (eXtreme Programming, XP) [40][41][46][47][48] 
極端軟體製程是一種新式、輕巧的軟體開發方法，XP 式的團隊運用客戶駐點、
持續測試、以及其獨特的規劃方式，為自己帶來快速的回饋以及大量的溝通，這些都
有助於團隊發揮出最大的效益[42][43]。 
 
相較於傳統的開發方式，XP 強調客戶參與的做事方式跟測試先行的程式技巧，
專案以客戶主動聯繫開發團隊為開端，開發團隊則要求客戶必須在整個開發期間都跟
他們並肩作戰[44]。一開始，開發團隊會專注在需求探索跟版本規劃，客戶會負責寫
出功能情節，程式設計師則負責估計這功能的時程，接著，由客戶決定功能開發的先
後順序。 
 
之後的重點則會比較放在程式碼的部分，團隊的工作方式是週期式的：客戶寫測
試程式，而當程式設計師寫程式時，客戶也要負責回答程式設計師對於業務方面的問
題。XP的實務做法，有助於強化這種客戶跟程式設計師之間的分工，把決策的因果得
失透明化，有助於讓整個團隊維持在正確的大方向上[45]。 
 
II. 相關協助工具 (CASE Tools) [70][71][72][74] 
電腦輔助軟體工程工具(Computer Aided Software Engineering Tool)，在軟體發展的
生命週期中逐漸受到重視[69][70]。良好的CASE Tool可以幫助軟體在開發、整合、維
護的過程中，提供高便利性，因此可見其重要性甚至大過硬體環境之良莠。 
 
CASE Tool的開發，常是針對軟體系統生命週期中不同階段而設計。CASE Tool
可由其功能、角色、支援的環境建構(硬體及軟體)或由來源、價格進行分類。如:專案
管理、程式編輯、雛形製作、分散式環境下物件導向資料庫設計、Date Warehouse設
計等都有相關的CASE Tool產品。 
 
由於購買CASE Tool的支出成本高，學習曲線陡峭，因此CASE Tool的評估、選擇
適當的CASE Tool 也成為現今探討的焦點。物件導向技術風行之後，也有OO (Object 
Oriented) CASE Tool的產品問世，並有套用Design Pattern 來開發、支援UML的發展趨
勢。但隨著企業軟體需求的日益強烈，CASE Tool 卻是只能在局部的軟體開發階段發
揮效用，再加上和PSEE(Process Software Engineering Environments)間還是有落差(Gap)
存在，因此整合性CASE Tool(I-CASE Tool)之需求更是日益增高[71][72]。 
 
整合性CASE 環境需要每一個CASE Tool完善的軟體資訊、Tools 間標準轉換介
面的定義、確立軟體工程師與各CASE Tool介面統一的溝通機制，雖說上述問題已有
衍生出解決方案，但仍是不夠全面化、自動化。復因軟體開發標準、模型相繼提出，
本研究提出一套樣板模組，期使軟體的開發由需求分析、設計到程式碼的實作，透由
此CASE Tool 達到自動化再利用的目標[72][74]。不同以往的，本研究的CASE Tool
乃是藉由整合軟體發展各階段的標準，將各階段的可再用資訊整合串接起來，進而降
低開發成本、加速軟體的開發。 
 
2、符合相關的流程之定義。這一層包含一般化的流程以及為特定專案量身打造的
客製化流程。 
3、流程之Metamodel(SPEM, UML)。這一層提供template 予2。 
4、描述物件之工具(MOF) 。 
 
V. 流程控制理論 (Workflow) [75][76][77][78][79][80] 
流程控制理論是基於自動化的控管，針對文件、資訊、或者是工作任務，能夠在
整個流程中自動的移轉而不須人為操作，而流程的移轉順序則是透過一些規則(Rule)
或者是程序(Procedure)所設定而來，依照這種方式來設計流程控制，所帶來的好處不
僅可以方便各種不同流程，建立客製化的要求，另一方面，基於流程控制之上，降低
使用此類軟體產品的風險[75][76]。 
 
不管在業界或者是學術上，流程控制的影子到處都在，尤其在業界之中更是明顯，
比方說製造業中，其生產流程就是最好的例子，從原料到加工、加工到生產、生產到
封裝、封裝到品管、品管到出貨，這一連串的行為、動作都是流程中的一部份，而這
在製造業中只是其中的一部份而已，並非全部，所以看來流程的複雜度絕非人們所能
夠想像的，眾多的流程互相牽涉在一起，到最後變成牽一髮而動全身的情況，就不是
人們所能掌握的了；也因此，流程控制理論有它存在的必要性和重要性，將真實情況
的動作，透過規則或是程序來轉換之，可以省下許多令人繁雜的過程；另外流程的製
作都是透過規則而來，所以根據不同的規則，可以造出不同的流程，便利了整個設計
流程的彈性[77]。 
 
在本研究中，我們提供一個可客製化的流程控制系統，並且訂定一組具CMMI精
神的調整限制，能讓開發者依自己的開發需求、開發組織規模與環境動態的調整工作
流程，來達到彈性流程控制且符合軟體品質標準的目標。 
 
VI. 軟體流程作業模型準則與國際標準 
A. CMMI [84][85][86][87][88] 
CMMI 是CMM模型的最新版本。早期的能力成熟度模型是一種單一的模型其英
文縮寫為CMM，較多用於軟體工程。隨著應用的推廣與模型本身的發展，該方法演繹
成為一種被廣泛應用的綜合性模型，因此改名為CMMI [87]。CMMI 是應用於軟體業
專案管理方法；實際上，CMMI在軟體與系統整合外的領域，如科學研究，工程等等，
甚至於日常的管理都得到了廣泛的應用，並取得了相當好的效果。 
 
CMMI實際上可說是一種管理流程的標準化。CMMI有五個不同的等級，而每一
個等級對企業的管理力程度都有著不同的要求。企業可以改進管理模式，不斷地提高
自己的CMMI等級，從而達到提升管理水平的目的。以下則是對於每一個等級作詳細
敘述[87][88]]： 
 
1. Level-1：初始級(Initial) 
企業對專案的目標很清楚明白。因此，專案的目標是可以實現。但是由於專
新版ISO9000系列標準由：9000、9001、9004(19011在CD3階段，未出版)組成。 
1. 9000：基本概念、基本原理、術語。 
2. 9001：對品質管制體系的要求。 
3. 9004：業績改進的指南。 
4. 19011：質量和環境管理體系審核的指南。 
 
2000年新版ISO 9000並不區分為ISO 9001、9002、9003 或9004，一律為ISO 9001，
且ISO 條文及要求項目係按Plan-Do-Check-Action之邏輯排列，本身並無新章節及新的
要求項目僅下列重點較舊版ISO嚴格而已，其重點如下： 
1. 品質政策及目標達成之確保與計劃。 
2. 人員訓練後之考核。 
3. 工作環境改善之加強。 
4. 統計分析之要求明確。 
5. 持續改善之規劃。 
由於CMMI 標準是參考ISO 9000 系列，並根據軟體工程的特質調整而來。而本
系統特別強調符合CMMI的精神，因此我們必須研究ISO 9000系列流程標準以探索
CMMI 之根源，以求徹底了解CMMI之詳細規範。 
 
而在本報告中相關技術及理論部份如下所列： 
I. 標準模式語言 (Unified Modeling Language, UML) 
標準模式語言是一種modeling language，結合了G. Booch，J. Rambaugh，與I. 
Jacobson 三人的物件導向方法論所提出的一種物件導向語言(OO Language)，並被
OMG納入為標準。 
 
UML結合了Booch的OO method與Rambaugh的OMT 與Jacobson的OOSE, 發展至
今(OMG UML v1.3)已經包含了9 種diagram 分別是[21][22][26]：USE-CASE diagram, 
Class Diagram, Object Diagram, Activity Diagram, State Diagram, Sequence Diagram, 
Collaboration Diagram, Deployment Diagram。 
 
目前UML已成了一種通用的物件導向語言(Object Oriented Language) ，廣為被應
用在各類系統的描述及設計上，成為一種溝通設計理念的語言，除了主導廠商Rational 
的推廣及擴展之外，其它為數眾多的廠商及研究單位也利用UML做為表達設計或研究
成果的語言。 
 
在軟體工程中，UML已被應用在相關的研究中，譬如：Software Architecture、
Framework、Patterns、Software Process。應用在其它領域如：Real-Time system、embedded 
system 以及workflow。目前支援UML的廠商與團體紛紛推出許多的工具，除了最著名
的Rational之ROSE (Rational Object Software Engineering)以外，TogetherSoft 與
VisualUML也推出了UML的相關工具，Microsoft Visio 2000也支援UML的diagram繪製
模組。 
 
A. 瀑布式方法（Water-fall model）[56]：軟體的開發必須很嚴謹的經過需求－分
析－設計－實作－測試－維護等階段，優點是時程明顯、易於規劃管制，對於開
發流程與資源調撥，而缺點乃往往需耗費相當的時日，而且使用者的需求難以確
切掌握，一旦需要修改，整個週期便得重新來過一次。 
 
B. 演進式的發展模型 (Evolutionary development model) [92]：先實作出初期的
系統，然後展示給客戶批評而改進，直到適合的系統開發完成，但是另有三個問
題：1. 過程不可見：若快速開發，會難以留下文件。 
2. 不當結構的系統：可能會不斷的更改破壞了系統結構。 
3. 經常需要特殊技巧：大部份用這種方式開發成功的軟體都是具有很高技術的小
團隊和個人動機。 
 
C. 螺旋模型 (Spiral model) [57] ：螺旋模型的每一圈代表軟體流程的一個階段，
和其它的軟體流程模型最大的不同在於它明確的考慮風險，使得不同的選擇和風
險清楚的表示出來，並且迫使管理者去考慮所有的可能性。但其缺點是缺乏明確
的方法來找出下一階段所需要達成目標的各種方法、限制，和其它的替代方案。 
 
D. Win Win螺旋模型 [58] ：Win Win螺旋模型 (Win Win Spiral Mode) 是藉由找
出下一階段的參與人員，參與人員所關心的事項，和整合這些事項等三個步驟來
獲得下一階段所需要達成目標的各種方法以及這些方法的限制，和其它的替代方
案。 
 
E. RAD (Rapid Application Development) [58][59]：它是一種線性序列軟體開發流
程模型，能以元件為建構方法來快速的完成開發工作；其缺點乃在開發大系統時，
則需要足夠的人力資源來建立正確數量的RAD小組。 
 
F. 同步開發模型 (Current Development Model) [58][60]：又稱為同步工程
(Concurrent Engineering)，可應用在所有型態的軟體開發上。它可以被大致描述成
一系列的主要技術活動、任務、及其結合狀態。此模型也定義了一串的事件 ,會
對軟體工程中的活動觸發狀態間的轉移。 
 
G. 正規方法模型 (Formal Methods Model) [58] ：經由數學表示來說明、開發及
驗證一個電腦化系統，能排除模糊、矛盾的步驟，且提供了無缺陷軟體的承諾，
此模型適用於需要安全的環境。其缺點乃是其開發時間長，需要教育訓練，不容
易將此模型使用來與客戶作溝通。 
 
H. 雛型法模型 (Prototyping Model) [58][61]：其最大的優點是可以確實掌握客戶
需求，靈活的修改。在傳統模式中，雖然也有強調雛型系統的重要，但是還不如
採用物件導向技術來的容易建構。 
一般性的特質。而需求樣板是一種用來幫助我們取得、建立模組並驗證系統的需求
[98]。Eduardo B. Femandez 等人提出分析樣板是定義初始的物件導向模型 [99] 。
Haitham Hamza等人提出大部分的分析樣板都被當作範本使用，可被實例化而且再使
用[100]。在Alexander的著作中提出了樣板，以抽象的方法取代詳細的方法能精煉的獲
取設計上的需求[101][102]。軟體再使用是從現存的軟體創造一個軟體系統的流程，由
於軟體再使用是一個已被驗證過的產品所以它可以被用來促進生產力、提昇品質。在
軟體工程尤其是需求工程上，再使用已被廣泛的建議來改善軟體發展以節省時間並促
進產品的品質[103][104][105][106][107][108][109]。 
 
樣板在需求工程的應用領域範圍中：以需求樣板的方法來做需求的獲得與誘出
[110][112][113]， Motoshi Saeki 提出了2種樣板來做使用案例的描述[114]。Philippe 
Massonet 等利用analogical 推導技術來完成部分的需求規格[103]。有些文章將定義了
樣板的類型來符合各種不同的需求，根據角色來定義[98][115]、根據實際經驗的知識
來定義[116]。 
 
Chun-Hsien Chen提到軟體行為樣板是事件交互作用上常用的一個樣板[117 
[117]，一個正規化後的軟體行為樣板可以在需求工程上用來選擇並精煉地產出更進一
步的計畫並呈現與紀錄軟體行為的需求[103][117]。Romi Satria Wahono提出了延伸樣
板的概念解決網路應用發展(web application development)上重複性資料的問題[97]。 
 
還有其他利用需求樣板的特性來解決問題：另外來自於軟體樣板的想法Hai-Quan 
nguyen 提供了品質特性的分析與轉換[118]。Matthew B. Dwyer解決了finite-state驗証
上的特性[119]，Alecia Eleonora Acosta用來建構與描述使用者介面的方法[120]。利用
UML的特性來建構樣板或以它為基礎的模型來呈現常見的需求樣板[108][121][122]。
在其他應用系統上的需求樣板有：嵌入式系統上的需求樣板[121][123]、資料庫上的分
析樣板[106][124]、ITS系統上的分析及設計樣板[105]、取樣分析上的樣板[125]以及企
業領域上[107][126][127]等。 
 
在建構與找出需求樣板的方法中，一部分的文章提供了雛型來幫助建立或驗証樣
板[98][107]，另外還有類神經網路的方法[123]、人工智慧的方法[128]、類推(analogy)
的方法或再利用[99][100][103]。以上討論了許多理論與實際應用需求範本來解決問題
的文章，但是在需求樣板上，有一個我們顯而易見的問題，就是在各個分別流程間的
間隔[98]以及在系統上獲得樣板所造成的發展上的進度以及系統改進上的問題，
Matthew B. Dwyer等人都有提到如何解決這樣的問題及更有效的使用樣板[119][129]。
找出分析與設計上的樣板來減少開發成本以及方便日後的維護[105]。 
 
VI. 設計樣板(Design Patterns)： 
談到Patterns，在整個軟體系統裡的Design階段存在風行已久且標準化的23個
Design Patterns[131]，當然Patterns不只會有23個，只不過這些是已被證實常被使用且
提出標準化，Design Patterns裡對於描述架構使用的是Unified Modeling Language 
(UML)，並說明其欲解決的問題。在大部分的設計上就可以依據需要重複地使用這些
在軟體發展中的需求階段(requirement phase)測試時，就必須站在較高的階層
(high-level)去看整個系統，像是在[147]中使用的UCM(Use Case Maps)[148]，並且在
[147]內所提到的Testing Patterns就完全是針對requirement 所作的，以圖形化的方式去
描述requirement 中的各項功能，再以作者所提的Testing Patterns去產生軟體測試所需
要的資料。 
 
為了要使測試自動化，使用Testing Patterns是自動化過程中相當重要的一環，在
[141][142][143][144][145][146]中，為了產生有助於軟體測試的資料，都把Testing 
Patterns 加入其自動化過程中，或是整個自動化過程就是以Testing Patterns為基礎。 
 
在本報告中，Testing Patterns導入關聯機制，使Testing Patterns成為Pattern-based
的概念中測試階段的一環，也提升測試階段的追溯性。 
 
2. 度量樣板(Measurement patterns) 
軟體度量(Software Measurement)是將軟體特性或軟體流程量化，將這些數值加以
互相比較後，用來表現軟體或軟體流程的品質，而在Measurement 時套用以建立好的
樣板(pattern)，以提高Measurement 的速度和功效，所套用的pattern稱之為Measurement 
patterns。 
 
在[149]中以廣為人知的設計樣板(Design Pattern)為基礎，發展出一套新的
Measurement patterns，而[150]則是以Java為工具寫出針對分散式的Measurement 
patterns。軟體的度量指標沒有標準化，也沒有通用於世界應用的標準，所以現有的
Measurement patterns屬於少數，也因為產生Measurement patterns不容易，現有的
Measurement patterns更顯得珍貴，收集並整合可用的Measurement pattern。在本報告
中，Measurement patterns 將利用PaSEE去收集其patterns並搭配Pattern Relation 
Modeling Tool及領域專家，做patterns分析、定義、正規化及驗證，最後再存入資料
庫。 
 
VIII.個人軟體流程PSP（Personal Software Process）： 
Personal Software Process(PSP)個人軟體流程[151]為軟體工程師進行軟體開發時
提供了一個規範的個人流程框架，PSP流程經由一系列方法、表單、腳本等組成，用
以指導軟體開發人員計畫、度量和管理他們的工作，同時顯示了如何定義流程及如何
測量其質量和生產率。本計畫利用PSP技術，達到記錄並管理個人工作流程，利用數
據度量其影響，以利軟體工程師能不斷地改進和提升能力，並能夠準確地預測所需要
的時間和獲得的質量，進而改進軟體產品的質量，並掌握如何評估技術和方法。 
 
IX. 團體軟體流程TSP (Team Software Process) ： 
Team Software Process(TSP)團體軟體流程[152]是為開發軟體產品的開發團隊提供
指導，TSP著重於幫助開發團隊改善其質量和生產率，以使其更好的滿足成本及進度
的目標。TSP流程亦如PSP經由一系列方法、表單、腳本等組成，用以指導軟體開發人
員計畫、度量和管理他們的工作，同時提供如何定義流程及如何測量其質量和生產率
4. 研究方法、進行步驟及執行進度 
4.1 研究方法 
一、研究理論 
本報告提出以樣板為基礎之軟體工程(PaSE)，其主要概念如下圖9 所示。軟體發
展的方法需要長時間經驗的累積與萃煉，就現階段軟體發展的狀況而言，這些經驗法
則並未妥善的保存與利用，所以在我們的架構中，將現階段分布在不同發展階段的成
功的pattern，整合在樣板整合模組(Pattern Unified Model)，並將設計出Pattern Unified 
Meta-Model。使用者可以有效的客製化各種不同的有效樣板，同時樣板與樣板之間也
能達到一致性的描述，如此一來減低了樣板不相容的潛在問題，並幫忙建立pattern 的
knowledge。 
 
不同的樣板有其解決的問題領域(Problem Domain)，然而軟體發展流程會面臨許
多不同的問題，這些問題往往環環相扣，因此樣板需要彼此互相連結合作，所以在我
們的設計架構中，我們針對類似的軟體開發流程中，不同樣板間的內部連結(intra 
-relation)，和軟體開發階段間的樣板之外部連結(inter-relation)，建立關聯機制(Relation 
Model)，此機制是依據統一的樣板關聯模組(Pattern Unified Relation Model)，設計者可
以基於此樣板關聯模組設計、自制有效樣板關聯。因此，樣板關聯的建立，連結了相
關聯樣版元件，增加了樣板間的凝聚力，換言之，也提升了軟體發展流程中的追溯力
(traceability)。 
 
此方式有別於過往的再利用，過去的軟體再利用，僅限於局部的再利用如:程式碼
再利用、設計架構再利用、測試案例的再利用等。進階的軟體再利用，也僅止於設計
樣板(Design Pattern)的再利用，此設計樣板只提供軟體在設計階段的相關解決方法，
並未針對軟體經驗的有效累績有所著墨。 
 
透過我們所提的機制，可以有效的透過系統化描述，建立有效樣版，其內容包括，
問題的呈現、主要動機、此解決方案主要應用領域、問題解決的方法描述、解決方案
的主要元件描述、元件間合作關係、解決方案架構、不同樣板間的合作關係、具體實
作方式等。同時，我們也可以利用過往他人已產生的有效樣板，發展專案系統、設計
應用軟體、解決設計問題、增加需求收集方法、提升驗證方式等。因此，此架構將軟
體再利用的觀念做進一步的延伸，拓展到以問題導向為出發點，透過成功的經驗法則，
累積有效的問題解決方案，同時建立不同解決方案間的互動關係，延伸連結相關的成
功樣板，達到更高一層次的軟體再利用境界，也就是說，有點提升為面的軟體再利用。 
 
為了再利用現有的樣板資源，我們發現已有許多相關研究針對此議題進行探討，
發表許多成功的樣板，但是這些樣板並未系統化描述，因此透過我們的設計架構與設
計理念，可以將這些現行的有效經驗，進行更精確的描述，以提升它再利用的價值與
機會。 
 
圖10. A conceptual view of Relation Definition Model 
以下就以軟體需求發展流程為例，描述如何建立軟體需求發展有效樣板。首先我們參
考SW-CMM Level3中的Requirement Development Process Area，此Process Area指出需求發
展可以分為以下三個程序，1. Develop Customer Requirements，2. Develop Product 
Requirements，3. Analyze and Validate Requirements。在Develop Customer Requirements階段
會產生Customer requirements，這些Customer requirements是develop Product Requirements階
段的input，而Develop Product Requirement 階段依據先前的Customer Requirements 產生
Product Requirement、Product-component Requirements 和Interface Requirements，然而在第
二階段的需求會在第三階段進行分析與驗證。驗證的結果回饋到Develop Customer 
Requirement 階段和Development Product Requirements階段。同時，此架構也說明了需求發
展階段參與的相關人員，與這些人員在流程執行過程所扮演的角色與職責。 
 
由此標準，我們可以歸納出需求發展樣板，此樣板包含多個需求發展流程，在不同的
流程執行階段會產生相對應的文件，這些文件分別具有他們特殊的意義。然而此主要樣板
中的Activity 元件可以在被細分為多個子流程，如Develop Customer Requirement 階段可以
透過Elicit Needs和Develop the Customer Requirement 來完成。而Develop Product 
Requirement 階段則是由Establish product & Product-Component Requirement、Allocate 
Product-component Requirements和Identify Interface Requirements來完成。最後驗證階段，則
是經由Establish operational concepts & Scenarios、Establish a Definition of Required 
Functionality、Analyze Requirements、Analyze Requirement in achieve Balance和Validate 
Requirements with Comprehensive Methods所組合完成，詳細的情況如圖11所示。 
又可分為軟體、硬體、網路。這些經驗法則可以定義在需求擷取中之stakeholder selection。 
 
其次，一個完整的需求描述，可以增加系統完成的可靠度。因此，完整的需求的描述
在需求發展階段是重要的影響因素。從許多現行的文件與系統，我們可以發現，一個完整
的需求描述需要包含需多面向。首先，我們必須了解此需求的由來(why)，其次我們必須知
道此需求是由誰所提出(who)，他們在什麼情況下產生這樣的需求(when)，他們在什麼樣的
環境底下會有這樣的需求(where)，他們真正的需求內容為何(what)，以及軟體設計師面對
這樣的需求我們應該如何因應(how)。這些描述是構成軟體需求描述的重要元素，缺一不
可。因此，需求描述樣板，參考此模式進行分析與設計。其詳細的情況如下圖13所示。 
 
圖13. The software requirement elicitation from various pattern perspectives 
然而，軟體需求的發展是相當困難的一件事，單純透過正向(forward)的軟體需求發展，
所需花費的成本相當的昂貴。很多相關的研究指出，新興的軟體系統可以完全採用正向需
求發展模式，其他的軟體系統，則可參考現行的軟體系統功能，進行分析設計。因此，需
求發展的反向工程相對重要，不僅如此，良好的資料保存與描述，更能夠有效突顯現有資
訊的可用性。 
 
我們將現有的需求再使用(reuse)方法，進行樣板設計，其詳細架構如圖14所示。此方
法有效幫助分析同類型系統之必要軟體功能，換句話說，軟體功能也就是在這邊所指的軟
體需求。同時，它也針對輔助性功能及非必要性功能提供評估方式。透過此樣板的設計，
系統開發者，可以參考現行系統他們所具有的基本功能，並且評估這些現行系統隱藏之非
 圖15、Use Case Diagram and Scenario description Model 
圖15描述Use Case Daigram的所有相關組成元素，和Executation Senario 之間的關係，
然而我們知道，一個系統的Executation Senario 就是Activity Diagram中的一條Path，因此，
針對此樣板的描述需要Use Case Daigram Formal Model和Activity Diagram Formal Model。
詳細的內容如上圖15與下圖16所示。 
 
 
圖16、Activity Diagram description pattern 
從上面的描述我們知道，我們已經建立需求發展流程樣板、特定領域之需求擷取樣板
以及需求描述樣板，這樣樣板之間存在合作的關係，如需求發展流程樣板中的Develop 
Product Requirement Activity，會利用需求描述樣板進行系統需求描述，在Develop Customer 
Requirement Activity中，會利用特定另領域之需求擷取樣板進行Customer Requriement 
Elicitation。在開發現有專案的情況下，我們會利用特定領域之需求擷取樣板分析現有系統
之功能，這些資料將成為需求描述樣板之主要參考依據。
二、發展工具 
為佐證本報告所提出之以樣板為基礎之軟體工程(Pattern-based Software Engineering , 
PaSE)提出一個以樣板為基礎之軟體流程協同開發環境(Pattern-based Software Engineering 
Environment, PaSEE)，此環境延續先前研究成果，針對不同問題領域，有效樣板的建立、
有效樣板的組合、及樣板的使用，應用於系統規模的度量、各相關子功能進行模組化之關
聯性探討、模組分析與設計、整合分析與原型發展，利用其理論設計一套具實用性質的工
具與系統整合流程環境。其開發環境，如圖18 所示。 
 
圖18、The architecture of Pattern Based Software Engineering Environment(PaSEE) 
PaSEE由三大設計功能組成： 1. Pattern Modeling Tool、2. Relation Modeling Tool與3. 
Process Executing Domain，以下分別詳加描述： 
1. Pattern Modeling Tool 
在Pattern Modeling Tool(PMT)裡，提供使用者定義某特定領域的有效樣版，此樣板包
含各個靜態與動態元件的正規描述，如圖19所示。樣板定義模組(Pattern Defination Model)
定義了靜態與動態的元件，靜態元件工具定義模式、角色定義模式、文件定義模式；動態
原件則包含軟體流程定義模式及方法定義模式。樣板設計者，可以透過含有Pattern 
Definition Model的Pattern Modeling Tool來塑模一個符合使用者需求並可信賴的“Specific 
Problem PaSEE Unified Model”。
五個子模型。Foundation Model 提供了基礎的語義和基本的元素，讓PaSEE Unified Model 
能對其他四個子模型加以描述。 
 
Process Model定義了結構化流程模型元素，process engineer可以利用這些元素來建構
軟體發展流程。然而一個流程是由多個不同的Activity所組成，一個Activity包含有一個或
多個Task，這些Task透過相對應的Methodology產生適當的Artifact，因此，我們也定義Artifact 
Model，其描述資料模型元素，透過這些元素可以製造、修改、重新定義Artifact。再者，
一個恰當的Methdology 需要有輔助的工具幫忙實作完成，所以我們在Tool Model裡的模型
元素定義了在實際執行軟體開發時，實踐Methodology的Tool。最後，Role Model則定義了
參與Activity之各個成員角色。 
 
一個完整的PaSEE Unified Model交集了上述5+1個子模型，它們內部的關聯簡化如下： 
I. Role Model利用“is responsible for”結合關係連結了Artifact Model。 
II. Artifact Model利用“Be Used as Input”與“Produces as Output”關係來跟Process Model互相
連結。 
III. Role Model利用“performs”結合關係來連結Process Model。 
IV. Tool Model利用“supports”關係支援其他三個Sub Models。 
V. Process Model 利用Methodology Model來定義Task Execution Way. 
VI. 在PaSEE Unified Model內所有的model elements和relationships 都是透過Foundation 
MModel裡的元素所描繪出來的。 
 
1.2 The Foundation Model：Foundation Model是PaSEE Unified Model裡最基本的Sub 
Model，它提供了PaSEE Unified Model所需要的基礎語義文法。Foundation Model可以由三
個不同的Views 來表現，即The Core View、The Relationship View、The Basic Elements View
如圖21，以下將分別描述之。 
 
圖 21 The Foundation Model架構圖 
1.2.2關係概觀(The Relationship View)：The Relationship View，如圖23所示，詳細描述了在
PaSE Unified Metamodel裡面模型元素間各種不同的相依關係，分別定義了不同的意義，以
下詳細說明： 
 
圖 23 關係概觀圖 
Dependency 如UML 所定義，Dependency 是一種使用關係，代表某一事物規格的改
變有可能會影響到另一個使用該事物的事物規格，但反過來則不一定成立。Generalization 
如UML 所定義，Generalization是一般性事物和其特殊性事物之間關係。Association 如
UML所定義，Association是一種結構關係，它可以訂定某一種事物的物件是如何與另一種
事物的物件之間互相連結的。 
 
1.2.3 基礎元素概觀(The Basic Element View) The Basic Element View，如圖24所示，詳細描
述了在PaSEE Unified Model裡面，用來描述與引導流程元素的基本元素。以下詳細說明： 
 
圖 24 基礎元素概觀圖 
Guidance 用來連結模型元素，以提供更多詳細的資訊來引導使用者運作此模型元素。
Guidance 有兩個基本attribute，AnnotatedElement 和Kind。AnnotatedElement 定義了
Guidance 所連結的模型元素；Kind定義了此Guidance的種類，屬於GuidanceKind element。
模型元素根據不同的流程定義，可能連結數種可能的GuidanceKind 子元素。 
 
GuidanceKind Guidance的分類，用以區別Guidance的中種類。而GuidanceKind包括了
Technique、ToolMentor、CheckList、Guideline、Template、CASETool六大類。 
 
1.3 流程模型(Process Metamodel) 
是用來定義軟體開發流程之所有活動(activity)與其之間關聯順序的模型。如圖25。 
ProcessPerformer 泛指在軟體開發過程中，負責處理WorkDefinition 的參與者。參與者
可能是一位或多位，由ProcessRole表示參與者的身分。 
SourceCode 包含系統開發原始程式碼、中介碼以及可執行檔。在軟體開發的流程中，
所產出的程式碼，可能包括Java bytecode以及component(含executable file以及dll(dynamic 
linking library) )。 
 
圖 26 Artifact Model靜態結構圖 
 
圖 27 Role Model靜態結構圖 
1.5 角色模型(Role Model)  
是用來定義負責執行軟體開發流程活動之角色與角色指定人員的模型。如圖27。 
 
RBAC(Role-based Access Control)Role 繼承自Classifier，代表開發人員的角色，是角色
模型中的核心。RBACRole與模型中其他元素皆有連結關係，以下分別描述： 
 User Assignment： RBACRole會分配給RBACUser，表示此RBACUser可扮演的角
色。 
 Session Establishment： 代表RBACUser 就其可扮演之角色以建立一個或多個
RBACSession 的聯結關係，以保存Role 和User之間的結合資訊。
1.7 PaSEE統一超模型Sub Models之整合 
基礎於1.1節所描述，PaSEE統一超模型能利用Foundation Model提供的語意，整合交集
Process Model、Role Model、Tool Model、WorkProduct Model、MethodologyModel五個Sub 
Models 且包含足夠之文法語義以描述軟體開發專案型態、軟體開發組織、軟體技術領域等
各種影響軟體開發之因素，以重新組態適合之軟體開發流程，如圖29。 
 
圖 29 PaSEE統一超模型交集五個Sub Models 之靜態結構圖 
 
1.8 PaSEE Unified Model之結構 
我們以基礎於XUM的XML表示法，來描述本報告之PaSE Unified Model。利用XUM的
語義文法的精神，設計了一個連結：Model_Link，用以描述PaSE Unified Model中之四個Sub 
Models 間的交互參照關係。Model_Link現階段的連結共有三種型別：PR_Link用以描述
Process Model與Role Model之間的連結；WP_Link 描述了Process Model 與
WorkProductModel 之間的連結；TO_Link 用來描述Process Model與Tool Model之間的連
結。如圖30。
<Permission> Modify UMLModels </ Permission> 
</ Process_Role> 
<Process_Role id=”pr_002”> …</ Process_Role> 
… 
</ Role_Model> 
<Artifact Model> 
<Artifact id=”wp_001”> 
< AF_Kind > UMLModel </ AF_Kind > 
<Name> Use-Case Model </Name> 
</ Artifactt> 
<Artifact id=”wp_002”> …</ WorkProduct> 
… 
</ Artifact Model> 
<Tool Model> 
<Tool id=”to_001”> 
<Type> Upper CASE Tool </Type> 
<Name> Rational ROSE </Name> 
</Tool> 
<Tool id=”to_002”> …</Tool> 
… 
</ Tool Model> 
</PASE Model> 
圖30、基礎於XUM的PaSEE Unified Model之XML表示法 
1.9 PaSE Pattern Modeling Tool： 
PaSE Pattern Modeling Tool是透過PaSE Unified Metamodel裡的語意文法，來塑模一個
特定問題領域的Specific Domain Pattern Unified Model。根據PaSE Unified Metamodel之組成
Sub Metamodels，PaSE Pattern Modeling Tool 亦必須擁有Process Model、Artifact Model、
Role Model、Methodology Model、與Tool Model之塑模能力。詳細說明如下： 
 
圖 31 Pattern Model示意圖
2. Pattern Relation Modeling Tool 
 
圖34 Pattern Relation Modeling Tool 
 
本報告中Pattern Relation Modeling Tool的功能，是負責各個Pattern之間的關係的鏈
結，以一個定義良好的Relation Model Definition以及各個Pattern Relation Model，來建立各
個Pattern Model之間的關係，此部分將會使用在Pattern Modeling Tool(PMT)裡，提供使用
者定義某特定領域的有效樣版，此樣板包含各個靜態與動態元件的正規描述(如圖19所
示)，而這些定義好的Pattern Model都會存入Pattern Models DB。接著，在Pattern Relation 
Modeling Tool(PRMT)裡，會從這個資料庫來取出這些定義良好的Pattern，透過定義好的鏈
結樣板，以及不同領域的Problem Definition，再更進一步的客製化Pattern之間的關係
(inter-relation)，最後針對不同領域以及不同Problem Definition的Pattern之間的關係作相關的
驗證，將正規化並且驗證好的Problem Models存入資料庫中(參考圖34)。 
 
在PRMT 當中主要分為四個模組，分別為Pattern Modeling User interface、Pattern Relation 
Model、Relation Model Definition以及Problem Domain。以下將針對這四個部份做一個相關
的描述： 
 
1. 在Pattern Modeling User interface當中，我們會先定義好一個template，以供使用者
方便操作，此template會根據各個領域專家，不同的Problem Definition的需要以作適當的調
整。 
2. 在Pattern Relation Model的部份，如圖10所定義，我們會根據UML所定義的各種關
係，將各個Relation Model作ㄧ個正規化的描述，例如：Extension Relation Model、Inclusion 
Relation Model、Dependency Relation Model、Association Relation Model、Aggregation 
Relation Model、Inheritance Relation Model以及Specific Relation Model等。 
3. 此外，Problem Definition則根據不同領域專家以及不同領域的問題需要，由各領域
專家來作相關的定義。 
表3 ： 23種設計模式 
目的 設計模式 可更動的層面 
Abstract Factory 成品物件群 
Builder 複合物件的生成方式 
FactoryMethod 具現出的子類別物件 
Prototype 具現出的類別物件 
生成模式 
Singleton 類別唯一物件個體 
Adapter 物件的介面 
Bridge 物件的實作 
Composite 物件的結構及組成 
Decorator  (在未用的子類別繼承的前提下) 物件 
Facade 子系統的介面 
Flyweight 物件耗用的儲存空間 
結構模式 
Proxy 物件的存取方式，物件所在位置 
Chain of Responsibility 可回應訊息要求的物件 
Command 何時、如何回應訊息要求 
Interpreter 語言與語法及詮釋 
Iterator 如何存取及巡訪聚合體的各個元素 
Mediator 哪些物件會彼此互動、如何互動 
Memento 物件的哪些資訊會在何時另存他處 
Observer 被多少其他物件相依，他們如何維持在最新的
狀態 
State 物件狀態 
Strategy 演算法 
Template Method 演算法步驟 
行為模式 
Visitor 可在不改變物件所屬類別的前提下施於物件
身上的操作 
PaSE所導入的Pattern-based概念，將不只限於設計階段(Design Phase)，而是採用Patterns
的理念，根據不同的屬性來作分類，將範圍拉大到其它各個階段，從需求、分析設計到系
統的維護測試，皆以Pattern-based的概念導入之，如圖36所示。值得一提的是，Software 
Lifecycle Phase裡面，為每一個階段之Pattern Package，除非Software Developer 有特別選定
的其他Pattern 格式，否則，就依照此Template所提供之Patterns來套用。
在 PaSEE 裡我們提供具有完整語意與語法的Metamodel並以XML為基礎，來對各個CASE 
Tool的產出物(Work Product)加以描述，也做為各Phase資料交換的依據，並擴展XUM的機
制加以串連，除了可以解決上述幾項問題外，更可以達到一致性之自動化控管目的。
 
圖37. PPD內部概念圖 
就PPD Processor的內部概念圖而言(如圖37)，Software Developer可以利用PaSEE 所定
義的各項Case Tool，在軟體開發流程的任一階段開發出該階段的Work Product。譬如在
Requirement Phase 的Work Product 包括Requirements Management Plan、Stakeholder 
Requests、Supplementary Spec.、Requirements Attributes、與Software Requirements Spec.等。
接著Software Developer透過Client/CASE Tool GUI，與PaSEE Client Tool作溝通，PaSEE 
Client Tool會將Work Product 轉換成PaSEE 內定之XML格式，由於每一份XML文件，皆
以XUM之軟體標準整合模型為基礎，故可以達到Work Product 之相互串接與再用。 
 
傳統的SCM Tool較注重於Source Code的管理，如版本控制等，或者是僅侷限於單獨
Phase 之間的控管，譬如當系統設計人員變更了某個Component 的名稱或內部結構，他必
須為新版本與舊版本之間的差異另製作一份說明文件，並存放到SCM裡的Share Space；然
後其他的參與人員也只能經由SCM Tool得到某份Work Product 的變動通知，並到Share 
Space內讀取說明文件才可得知被異動過的部分。
5. 結論 
本報告提出以樣板為基礎之軟體工程(PaSE)，在我們的架構中，將現階段分布在不同
發展階段的成功的pattern，整合在樣板整合模組(Pattern Unified Model)，並將設計出Pattern 
Unified Meta-Model。使用者可以有效的客製化各種不同的有效樣板，同時樣板與樣板之間
也能達到一致性的描述，如此一來減低了樣板不相容的潛在問題，並幫忙建立pattern的
knowledge。PaSE所導入的Pattern-based概念，將不只限於設計階段(Design Phase)，而是採
用Patterns的理念，根據不同的屬性來作分類，將範圍拉大到其它各個階段，從需求、分析
設計到系統的維護測試，皆以Pattern-based的概念導入之。 
 
流程方法知識庫含有通用軟體開發流程的知識與引導方法，能提供開發組織軟體工程
上的知識協助，其具CMMI精神之流程樣板亦可提供尋求流程提昇的組織一個參考，也是
國內軟體業界目前急需的一個幫助。同時，藉由我們PaSEE 所整合系統、利用樣板的特
性將軟體的知識加以儲存利用，使得組織在開發專案時，能夠將樣板套用到軟體的開發流
程上，使得組織的經驗以及知識能夠被累積與再使用。 
 
不同的樣板有其解決的問題領域(Problem Domain)，我們針對類似的軟體開發流程
中，不同樣板間的內部連結(intra -relation)，和軟體開發階段間的樣板之外部連結
(inter-relation)，建立關聯機制(Relation Model)，此機制是依據統一的樣板關聯模組(Pattern 
Unified Relation Model)，設計者可以基於此樣板關聯模組設計、自制有效樣板關聯。因此，
樣板關聯的建立，連結了相關聯樣版元件，增加了樣板間的凝聚力，換言之，也提升了軟
體發展流程中的追溯力(traceability)。透過我們所提的機制，可以有效的透過系統化描述，
建立有效樣版，同時，我們也可以利用過往他人已產生的有效樣板，發展專案系統、設計
應用軟體、解決設計問題、增加需求收集方法、提升驗證方式等。因此，此架構將軟體再
利用的觀念做進一步的延伸，拓展到以問題導向為出發點，透過成功的經驗法則，累積有
效的問題解決方案，同時建立不同解決方案間的互動關係，延伸連結相關的成功樣板，達
到更高一層次的軟體再利用境界，也就是說，有點提升為面的軟體再利用。因此透過我們
的設計架構與設計理念，可以將這些現行的有效經驗，進行更精確的描述，以提升它再利
用的價值與機會。 
 
PaSEE 透過XUM的機制，擴充了SCM的功能，將各Phase間的Work Product 建立連結
關係，以達到自動化追蹤的效果，即PaSEE 的開發環境具有Automatic Traceability 的特
色。能利用XUM來追蹤Design Phase、Implement Phase、Testing Phase 等其他Phase的Work 
Product 是否需要異動，達到跨Phase管理的效能。而在系統通知其他參與人員前，也可將
該參與人員需變動的部分事先自動地分析出來，無須經由人工的過程另行製作一份說明文
件。然後在通知其他的參與者時，除了發布版本變動的訊息外，也將變動的部分以及該參
與者需修該的部分一起提供。另外，每當Software Engineer透過各CASE Tool產生Work 
Product並Deliver到PaSEE後，PaSEE 會自動Trace 其他Phase相關的Work Product(如
Documents或Source Codes)，並檢查其一致性，達到完全自動化的效果。 
[17] Castelfranchi, C. “Guarantees for autonomy in cognitive agent architecture.” In Wooldridge, 
M. and Jennings, N. R., editors, “Intelligent Agents: Theories, Architectures, and 
Languages”(LNAI Volume 890), 1995, pp.56-70. Springer-Verlag: Heidelberg, Germany. 
[18] Wooldridge, M. J. & Jennings, N. R. editors. Intelligent Agents. Springer-Verlag, Berlin, 
1995.  
[19] Luck, M. & M. d’Inverno. “A formal framework for agency and autonomy” In Proceedings 
of the First International Conference on Multi-Agent Systems, pp254-260. AAAI Press/MIT 
Press, 1995. 
[20] Rao, A.S., Georgeff, M.P., “BDI agent: from theory to practice” Proceedings of the first 
international conference on Multi-Agent-Systems (ICMAS), San Francisco 1995. 
[21] Turban, E. and Aronson, J. Decision Support Systems and Intelligent Systems, NJ: 
Prentice-Hall, 1998. 
[22] Haverkamp, D. S. and Gauch, S. “Intelligent Information Agents: Review and challenges 
for Distributed Information Sources”, Journal of American Society for Information Science, 
49(4), 1998, pp.304-311. 
[23] David Kinny, “Reliable Agent Communication-A Pragmatic Perspective”, Department of 
Computer Science, University of Melbourne, 1999.  
[24] Brian Henderson-Sellers, Tony Simons, and Houman Younessi. The OPEN Toolbox of 
Techniques Addison-Wesley, September 1998. 
[25] Ian Graham, Brian Henderson-Sellers, and Houman Younessi. The OPEN Process 
Specification" Addison-Wesley. October 1997. 
[26] B. Henderson-Sellers and I.M. Graham, “OPEN: Towards Method Convergence”, IEEE 
Computer ,Volume 29 number 4, IEEE Computer Society, Los Alamitos, CA, USA, 86-89. 
[27] B. Henderson-Sellers, I.M. Graham, D. Firesmith, “Manuscript: ROAD966.TEX”, 
Knowledge Systems Corporation, Cary, NC, USA Printed: September 28, 1998, [JOOP (Report 
on Object Analysis and Design) (June 1997)]. 
[28] B. Henderson-Sellers, “The OPEN Mentor Methodology”, September 28, 1998 [submitted 
to Object Magazine]. 
[29] B. Henderson-Sellers, “OPEN: Object-oriented Process, Environment and Notation The. fist 
full lifecycle, third generation OO method”, Chapter for Handbook of Object Technology (CRC 
Press, 1997). 
[30] B. Henderson-Sellers, H. Younessi, and I. Graham, “The OPEN Process (Tasks, Techniques 
and Management)”, Chapter for Handbook of Object Technology (CRC Press, 1997). 
[31] “The OPEN alternative”, Object Expert, Volume 2 part 1, pp 14-15, Nov/Dec 1996, SIGS 
Publications  
[32] Available http://www.markv.com/OPEN/ 
[33] “Rational Unified Process” 
Available http://www.rational.com/rup/ 
[34] Philippe Kruchten, “The Rational Unified Process -- An Introduction”, 2nd ed., 
Addison-Wesley-Longman, Reading, MA (2000). 
[35] Grady Booch et al., “UML Users' Guide”, Addison-Wesley-Longman, Reading, MA (2000) 
[57] B. Boehm, “A Spiral Model of Software Development and Enhancement”, IEEE Computer, 
Vol. 21, No. 5, 1988, pp. 61-72. 
[58] Roger S. Pressman Ph.D. 1997.Software Engineering A Practitioner’s Approach, 4/e. 
[59] Martin, J., Rapid Application Development, Prentice-Hall, 1991. 
[60] Davis, A., and P. Sitaram, “A Concurrent Process Model for Software Development, 
Software Engineering Notes, ACM Press, Vol, 91, no.2, April 1994 ,PP. 38-51. 
[61] Brooks, F., The Mythical Man-Month, Addison-Wesley, 1975. 
[62] “Cover Pages: Trang Multi-Format Schema Converter Supports DTD to W3C XML 
Schema Conversion” 
Available http://xml.coverpages.org/ni2003-01-23-b.html 
[63] Alejandro Terrazas. Java Media APIs: Cross-Platform Imaging, Media and Visualization. 
2002/11/26. 
[64] Ted Husted, Craig R. McClanahan. Struts in Action: Building Web Applications with the 
Leading Java Framework. 2002/11/01. 
[65] Aoyon Chowdhury, Parag Choudhary. JAX: Java APIs for XML Kick Start. 2002/10/25 
[66] Mark Grand. Patterns in Java, Volume 1, 2/e. 2002/09/17 
[67] Else Lervik, Vegard B. Havdal. Java the UML Way. 2002/06/15. 
[68] Java TM Technology and XML 
Available http://java.sun.com/xml/ 
[69] Steven P. Reiss, “The Desert environment”, ACM Transactions on Software Engineering 
and Methodology, Vol. 8, No. 4, October 1999, Pages 297–342. 
[70] Harri Oinas-Kukkonen, “Flexible CASE and hypertext”, ACM Computing Surveys (CSUR) 
December 1999. 
[71] Junichi Suzuki and Yoshikazu Yamamoto, "Managing the Software Design Documents with 
XML", Proceedings of the Sixteenth Annual International Conference of Computer 
Documentation (ACM SIGDOC '98), pp. 127-136, Quebec City, Canada, September 1998. 
[72] Scott Henninger, “Case-Based Knowledge Management Tools for Software Development”, 
Automated Software Engineering 4 (3): 319-340, July 1997. 
[73] David Kung , Jerry Gao , Pei Hsia , Yasufumi Toyoshima , Chris Chen , Young-Si Kim , 
and Young-Kee Song, “Developing an object-oriented software testing and maintenance 
environment” , Communications of the ACM October 1995 
[74] Matthews, E., and Burns, G., "VADS APSE: An Integrated Ada Programming Support 
Environment", Proceedings of the First Symposium on Environments and Tools for Ada, 
Redondo Beach, CA, April-May 1990. 
[75] Charles Plesums, Computer Sciences Corporation, and Financial Services Group, “An 
Introduction to Workflow”, extracted from the Workflow Handbook 2002. 
[76] “Workflow Process Definition Interface -- XML Process Definition Language”, Document 
Number WFMC-TC-1025, Document Status –1.0 Final Draft, October 25, 2002. (Version 1.0) 
[77] “Workflow Management Coalition Workflow Client Application (Interface 2) Application 
Programming Interface (WAPI) Naming Conventions”, Document Number WFMC-TC-1013, 
01-November-97. (Version 1.4) 
[97] Romi Satria Wahono, Jingde Cheng, “Extensible Requirements Patterns of Web Application 
for Efficient Web Application Development”, Proceedings of the First International Symposium 
on Cyber Worlds (CW.02) IEEE, 2002. 
[98] Neil Maiden, “CREWS validation frames: Patterns for validating systems requirements”, 
CREWS Report 98-29, 1998. 
[99] Eduardo B. Femandez, “Building Systems Using Analysis Patterns”, ISAW, ACM 1998. 
[100] Haitham Hamza and Mohamed E.Fayad, “Applying Analysis Patterns Through Analogy: 
Problems and Solutions” in Journal of Object Technology, vol. 3, no. 4, Apr., 2004, pp. 197-208. 
[101] C. Alexander, The Timeless Way of Building, Oxford Univ. Press, 1979. 
[102] C. Alexander et al., A Pattern Language, Oxford Univ. Press, 1977. 
[103] Philippe Massonet and Axel van Lamsweerde, “Analogical Reuse of Requirements 
Frameworks”, IEEE, 1997. 
[104] Robert Darimont and Axel van Lamsweerde, “Formal Refinement Patterns for 
Goal-Driven Requirements Elaboration”, SIGSOFT 1996 ACM. 
[105] Andreas Harrer and Vladan Devedzic, “Design and Analysis Patterns in ITS 
Architectures”, Proceedings of the International Conference on Computers in Education 
(ICCE’02) IEEE 2002. 
[106] Victor de Freitas Sodre, Jugurta Lisboa F., Valerio Moyses Vilela, and Marcus Vinicius 
Alvim Andrade, “Improving Productivity and Quality of GIS Databases Design using an 
Analysis Pattern Catalog”, APCCM, 2005. 
[107] Maria Joao Ferreira and Pericles Loucopoulos, “Business Analysis Patterns: 
Methodological and Support Environment Aspects”, Ninth Americas Conference on Information 
Systems, 2003. 
[108] William N. robinson and Han G. Woo, “Finding Reusable UML Sequence Diagrams 
Automatically”, IEEE, 2004. 
[109] W. Lam, J.A. McDermind, and A.J. Vickers, “Ten Steps Towards Systematic 
Requirements Reuse,”Proceedings of the 3rd IEEE International Symposium on Requirements 
Engineering (RE'97). 
[110] Marilyn T. Gaska, and Donald C. Gause, “An Approach for Cross-Discipline 
Requirements Engineering Process Patterns”, Proceedings of Requirements Engineering, 1998. 
[111] Harry S. Delugach and Brian E. Lampkin, “Acquiring Software Requirements As 
Conceptual Graphs”, IEEE, 2001. 
[112] Colette Rolland, Carine Souveyet, and Mohamed Ben Ayed, “Guiding Lyee user 
requirements capture”, Knowledge-Based Systems 16 (2003) pp. 351–359. 
[113] Chun-Hsien Chen, Li Pheng Khoo, and Wei Yan, “A strategy for acquiring customer 
requirement patterns using laddering technique and ART2 neural network”, Advanced 
Engineering Informatics 16 (2002) pp. 229–240. 
[114] Motoshi Saeki, “Patterns and Aspects for Use Cases: Reuse Techniques for Use Case 
Descriptions”, IEEE, 2000. 
[115] Francis G. Mosse, “Modeling Roles A Practical Series of Analysis Patterns”, Journal of 
Object Technology, vol. 1, no. 4, Sep.-Oct. 2002, pp. 27-37. 
Technology (CIT), Sept. 2004, pp. 1081-1086. 
[134] P. Wendorff, “Assessment of Design Patterns during Software Reengineering: Lessons 
Learned from a Large Commercial Project”, Proc. of Fifth European Conf. on Software 
Maintenance and Reengineering (CSMR’01), 2001. 
[135] Vicente Pelechano, Oscar Pastor, and Emilio Insfran, “Automated code generation of 
dynamic specializations: an approach based on design patterns and formal techniques”, Data & 
Knowledge Engineering, Vol. 40, no. 3, March 2002, pp. 315-353. 
[136] R. France, S. Chosh, E. Song, and D.K. Kim, “A metamodeling approach to pattern-based 
model refactoring”, IEEE Software, vol. 20, no.5, Sept.-Oct. 2003, pp. 52-58. 
[137] G. Antoniol, G. Casazza, M. Di Penta, and R. Fiutem, “Object-oriented design patterns 
recovery”, Journal of Systems and Software, Vol. 59, no. 2, Nov. 2001, pp.181-196. 
[138] R.B. France, D.K. Kim, Sudipto Ghosh, and E. Song“, AUML-based pattern specification 
technique”, IEEE Transactions on Software Engineering, vol. 30, no. 3, March 2004, pp. 
193-206. 
[139] Bundell, G.A., Lee, G., Morris, J., Parker, K.and Peng Lam, “A software component 
verification tool.” Proceedings of SMT 2000, Nov. 2000, pp.137 – 146. 
[140] Macii, E., Lioy, A. and Meo, A.R., “Test generation for gate level sequential machines: 
algorithms and implementation issues”, Proceedings of CompEuro '92, May 1992, pp. 262 – 267. 
[141] Harman, M., Hu, L., Hierons, R., Wegener, J., Sthamer, H., Baresel, A.and Roper, M., 
“Testability transformation”, Transactions of IEEE Software Engineering, vol. 30, Jan. 2004, pp. 
3 - 16. 
[142] Le Metayer, D., Nicolas, V.-A. and Ridoux, O., “Exploring the software development 
trilogy”, Transactions of IEEE, vol. 15, Nov.-Dec. 1998, pp.75 – 81. 
[143] Khor, S. and Grogono, P., “Using a genetic algorithm and formal concept analysis to 
generate branch coverage test data automatically.” Proceedings of Automated Software 
Engineering 2004, 2004, pp.346 – 349. 
[144] Williams, N., Marre, B. and Mouy, P., “On-the-fly generation of k-path tests for C 
functions”, Proceedings of Automated Software Engineering 2004, 2004, pp.290 – 297. 
[145] Wee Kheng Leow, Siau Cheng Khoo and Yi Sun, “Automated generation of test programs 
from closed specifications of classes and test cases”, Proceedings of ICSE 2004, May 2004, pp. 
96 – 105. 
[146] Hameed, S.A., Deraman, A. and Hamdan, A.R., “Framework for Intelligent Meaningful 
Test Data Generation model-IMTDG.” Proceedings of TENCON 2000, vol. 2, Sept. 2000, pp. 
16 – 22. 
[147] Daniel Amyot, Luigi Logrippo and Michael Weiss, “Generation of test purposes from Use 
Case Maps.” Transactions of Computer Networks, Vol. 49, pp. 643-660. 
[148] R.J.A. Buhr, R.S. Casselman, “Use Case Maps for Object oriented Systems” , Prentice 
Hall, 1996. 
[149] Lindvall, M., Donzelli, P., Asgari, S. and Basili, V., “Towards Reusable Measurement 
Patterns”, Proceedings of Software Metrics, 11th IEEE International Symposium, Sept. 2005, 
pp.21 – 21. 
7. 近三年已發表之相關論文、期刊 
 國際期刊 
1 
P.A. Hsiung, S.W. Lin, Y.R. Chen, C.H. Huang, C.H. Shih and C.W. Chu, “Modeling and 
verification of real-time embedded systems with urgency”, The Journal of Systems and 
Software, pp. 1627-1641. October 2009 
2 
C.T. Yang, S.Y. Wang and C.W. Chu, “Implementation of a Dynamic Adjustment Strategy 
for Parallel File Transfer in Co-Allocation Data Grids”, Journal of Supercomputing, 
Springer Netherlands, May 2009 
3 
C.H. Shin, P.A. Hsiung, C.H. Wan, C.S. Koong, T.K. Liu, Y.F. Yang and C.W. Chu, 
“Integration of a vision-based tracking platform, visual instruction, and error analysis 
models for an efficient billiard training system” Optical Engineering. Vol. 48 Issue 2, pp. 
027202-027202-11, February 2009.(SCI) 
4 
C.W. Chu, H.Tianfield, H.Yang, J.Zhao and H. Zhu,” Agent-And Aspect-Oriented 
Software Development And Evolution”International Journal of Computer Application in 
Technology.(EI). Vol. 31, Nov. 1/2, 2008 
5 
C.H. Shih, Lester A. Gerhardt, C.W. Chu and C.H. Chang, “Non-Uniform Surface 
Sampling Techniques And Their Integration With View Planning For 3D Object 
Inspection” Optical Engineering. Vol. 47,5: 053606, May 2008.(SCI) 
6 
N.L. Hsueh, P.H. Chu and C.W. Chu, "A Quantitative Approach for Evaluating the Quality 
of Design Patterns," The Journal of Systems and Software, pp.1430-1439. May 2008. (SCI, 
EI) 
7 
D.M. Yeh, Y.W. Li and C.W. Chu, “Extracting Entity Relationship Diagram from a 
Table-based Legacy Database,” Journal of Systems and Software. 81(5), 2008, pp. 
764-771. (SCI, EI) 
8 
D.M. Yeh, P.C. Sun, C.W. Chu, C.L. Lin, and H. Yang, “An Empirical Study of a Reverse 
Engineering Method for the Aggregation Relationship Based on Operation Propagation, ” 
Empirical Software Engineering,Vol.12, Nol.6, pp.575-592, Dec.2007,(SCI) 
9 
L. P. Chen. I. C. Wu, and C. W. Chu, “An Efficient Incremental Algorithm for Identifying 
Consistent and Removable Checkpoints,” Submitted to IEEE Transaction on Software 
Engineering. (EI, SCI) 
12 
C.H. Chang, C.W. Lu, and C.W. Chu, "Model-based Object-oriented Requirement 
Engineering," Proceedings of the 1st Information Education and Technological 
Application Conference, pp. 168-173, 6 Nov., 2007. 
13 
C.W, Chu, C.H. Chang, C.W. Lu, C.H. Shih, and Cheng, Y.W., "Model-based 
Object-oriented Requirement Engineering(MORE) to support Software 
Maintenance," the proceedings of 18th Workshop on Object-Oriented Technology and 
Applications, 2007. 
14 
W. T. Tsai, Xinyu Zhou, C. W. Chu, “Roadmap to a Full Service Broker in 
Service-Oriented Architecture,” the proceedings of SOSE 2007, Hong Kung, Oct. 2007 
15 
Robert C.C. Chen, William Cheng-Chung Chu, Tin-Kai Chen and Hong-Ji Yang, 
“Possible Design Failures of Body-based Multimodal Interaction” 
System and Information Sciences Notes, Vol. 1, No. 3, July 2007, pp. 288-291 
16 
Peng-Hua Chu, Jonathan Lee and C. W. Chu, “A Quality Verification Model for Design 
Pattern, ” the Proceedings of COMPSAC 2007 , July, 2007, pp.531-534 
17 
Chih-Wei Lu, C. W. Chu, Chih-Hung Chang, Ching Huey Wang, “ Model-based 
Object-oriented Requirement Engineering (MORE),” the Proceedings of COMPSAC 
2007, July, 2007, pp23-27. 
18 
C.C. Chen, Tin-Kai Chen, Hong-Ji Yang, and C.W. Chu. “Effect of Wearable Computer 
Vision Tracker on Human Performance of Two-Dimensional Graphic  User,” the 
Proceedings of CODS 2007,July , 2007, Vol.1. No.3. pp.288-291. 
19 
Shuo-Yan Hsu, William C. Chu. “An Intelligent Agent of Automatically Notify 
Services,” SEKE 2007, July., 2007, pp. 541-545. 
 
Design and Implementation of an Information Service for Cross-grid 
Computing Environments 
 
 
Chao-Tung Yang, Tsui-Ting Chen, Keng-Yi Chou and William C. Chu 
 
Department of Computer Science and Information Engineering 
Tunghai University 
Taichung City, 40704, Taiwan (ROC) 
E-mail: {ctyang, cchu}@thu.edu.tw 
 
 
Abstract 
 
In solving large-scale computation problems using 
open standards over networks, grid computing must 
deal with geographically distributed heterogeneous 
resources, including differing computing platforms, 
hardware, software, architectures, and languages that 
are owned by various Administrative Domains. As 
Grid numbers worldwide increase, multi-institution 
collaborations grow rapidly as well. However, to 
realize the full potential of Grid computing, it is 
expected that Grid participants will have to be able to 
use one another’s resources. This work presents a 
Cross-grid Information Service (CGIS) that enables 
Resource Brokers to get information from cross-grid 
environments for other components.  
 
1. Introduction 
 
The rapid growth of the Internet is bringing forth a 
new era of information proliferation. More and more 
free information is available online to facilitate our 
problem-solving. Along with information growth have 
come complex problems that may require many people 
sharing huge amounts of information and spending 
huge amounts of time working together to tackle. This 
brings new challenges for large-scale collaboration by 
people all over the world. 
Grid technology plays a major role in tackling 
large-scale problems by integrating distributed re-
sources to provide users with a supercomputer-like 
capacity for data sharing and computation [2]. 
Participating sites may be physically distributed and 
heterogeneous, and governed by different administra-
tive domains. Many grid-related studies and projects 
have been proposed for solving scientific problems. 
The main function of a resource broker is to match 
available resources to user needs. Resource brokers 
help users select the most suitable resources according 
to user preferences and job characteristics. 
Typical monitoring and discovery tasks include 
providing data so resource brokers can locate job-
appropriate computing elements, and streaming data to 
applications [3, 10, 14]. MDS in the Globus Toolkit 
provides a nice information management tool, but it is 
incapable of providing a rich set of all requisite 
information by itself. In this study, we concentrated on 
building monitoring and information services that 
provide comprehensive details on available grid 
resources [5, 7, 8, 11, 12, 13]; they also provide 
execution details on any grid job or grid CPU (loading, 
architecture, etc.) of interest. 
In the last decade, many research projects in various 
countries have put considerable effort into building 
grid systems for special-purpose applications. With the 
rapid growth of grid systems in the world, grid-level 
collaboration among different grid systems may 
become a reality in the near future. However, 
achieving the goal of cross-grid collaboration depends 
on finding a mechanism for sharing information among 
different grid systems. In Section 3 we address this 
issue by presenting the Cross-grid Information Service 
that provides information-sharing interoperability 
among different grid systems. 
The contribution of this paper is reporting on 
construction of a computational grid platform called 
the TIGER [20] Medical Grid [18] for research into 
Grid environments, and the design and implementation 
of a resource broker. The resource broker enables users 
to submit job via a web portal, and does not require 
comprehension of complicated instructions. Its 
integrated Information Service is applicable to cross-
grid environments as well as single-grid environments. 
useful for resource brokers scheduling cross-site 
parallel jobs. Since Ganglia is not designed to provide 
network-related information, we adopted the NWS [19] 
service to provide dynamic network information, and 
configured it to display the information in Ganglia. 
However, measuring network information introduces 
large communication overhead burdens. We proposed 
an adaptive network information model [9] that only 
performs inter-domain measurements between clusters 
to minimize communication overheads. 
 
3.2. The Approach to Cross Grid 
 
In the last decade, research projects in many 
countries have put much effort into building various 
special-purpose grid systems. This rapid growth in grid 
systems around the world, may lead to grid-level 
collaboration among different grid systems becoming a 
reality in the near future. Such collaboration is more 
challenging than collaboration in single-grid 
environments since individual grid security 
architectures, software, information formats, and 
resource brokering mechanisms, may differ to varying 
degrees. Thus, achieving the goal of cross-grid 
collaboration depends on finding mechanisms for 
sharing information between different grid systems. In 
this subsection, we describe the challenges of this issue 
and propose a cross-grid information service to tackle 
the problems. 
Grid-level information sharing introduces new 
challenges for existing grid information services, 
perhaps involving the following two issues: 
z How can information be exchanged between 
different grids when each grid may have its own 
information service? This simply refers to 
communication with different information 
description languages. 
z How can information be efficiently exchanged 
between grids without introducing excessive 
communication overhead, given that total grid 
information is much larger than a cluster? 
We propose a Cross-grid Information Service 
(CGIS) consisting of a local grid information service 
and an information exchange service to address the 
issues above. As described in Subsection 3.1, a local 
grid information service can collect resource 
information from local grid environments such as CPU 
clock frequency and total memory size, which are 
static, and free disk space and CPU loading, which are 
dynamic. An information exchange service addresses 
the first issue by using the standard Information 
Description Language (IDL) to exchange and translate 
resource information among grids, and perform post-
transfer filtering to ensure that only necessary 
information is passed to clients, end users, and 
software components. 
Figure 1 shows our CGIS component diagram. 
Function details and relationships among components 
are described, from bottom to top, below: 
z Translator: is responsible for resolving 
heterogeneity, since each grid is designed for its 
own special application and software and ways 
of describing information vary from grid to grid. 
It translates data in local grid-resource-
information formats into the well known IDL 
format, and provides a standard interface for 
upper-level components to access IDL, as 
shown in Figure 2. Since various grids require 
different ways of retrieving underlying resource 
information, cooperation from local grid 
administrators to rewrite component-access 
functions will be needed. 
z Gather: is responsible for gathering 
information from local and remote grids 
through socket connections to Translator. The 
resource information collection operation can 
be configured as periodic or upon-request. 
Either way, the list of remote target grids must 
be pre-configured or given in the request. After 
gathering information, Gather stores it in the 
Message Center by calling Getter and Setter. 
z Getter and Setter: acts like a doorkeeper for 
the local Message Center. All Message Center 
access goes though this component, including 
all read/write operations. Since resource 
information collection and data accessing may 
occur at any time, this component uses database 
optimization technology to alleviate database 
connection overhead and to reduce redundant 
program development. 
z Message Center: mainly stores native-resource 
information on each Grid, including CPU 
loading, memory free space, disk free space, 
network information, etc. It can be implemented 
as a relational database, XML database, or just 
disk storage. Relational databases perform well 
but are less dynamic since all tables and fields 
are static. XML databases are less efficient but 
XPath provides a more dynamic way of storing 
and querying XML files. Disk storage is easy to 
implement but requires additional processing 
mechanisms to utilize data. 
z Filter: receives client information requests, 
parses resource information queried from Getter 
and Setter, and filters out unnecessary 
information for clients. 
z Agent: provides a standard interface for clients 
to query underlying information gathering 
relationships among components are shown in Figure 3. 
Each rectangle represents a discrete system component. 
The common Grid portal [3, 5, 7, 11, 12] makes the 
Resource Broker easy to use. 
The Resource Broker’s primary task is to compare 
user requests and resource information provided by the 
Information Service. After an appropriate assignment 
scheme is chosen, Grid resources are assigned and the 
Scheduler submits the job for execution. The results 
are then collected and returned to the Resource Broker, 
which records them in the Information Center database 
via the Information Service Agent. Users can view the 
results through the Grid portal. 
 
 
Figure 3. Resource Broker system 
architecture 
 
4.2. Software Stack Diagram 
 
The system software stack includes three layers 
constructed using a bottom-up methodology. The 
layers are described below: 
z Bottom Layer: principally consists of Nodes, as 
shown in Figure 4. The layer contains two main 
blocks, the Information Provider, which uses 
Ganglia to gather machine information on 
Nodes, such as number of processors/cores, 
processor loading, total/free memory, and disk 
usage, and NWS  [19], which gathers essential 
network information such as bandwidth and 
latency. The second block contains Grid 
Middleware, used to join Grid Nodes together, 
and the MPICH-G2 [17] required for running 
parallel applications on the Grid. 
 
 
Figure 4. The software stack 
 
z Middle Layer: contains, as shown in Figure 5, 
sites. Each site consists of several nodes located 
in the same place or connected to the same 
switch/hub. All nodes in a site are connected to 
each other and to the Internet. Moreover, sites 
are usually built as clusters with each node 
having a real IP. The first node in each Site is 
called the Head Node. The construction of this 
layer is related to the domain-based network 
information model described below, 
z Top Layer: contains the Resource Broker and 
the Monitoring Service, as shown in Figure 5. 
The Resource Broker coordinates Grid 
resources, dispatches jobs to resources, and 
monitors job statuses. One contribution of this 
work is proposing a resource allocation scheme 
that can handle user jobs requiring more Grid 
resources than one dedicated cluster can supply. 
To make strategic decisions in dispatching jobs 
the Resource Broker needs fresh information on 
the Grid from the Monitoring Service, which 
also provides a web front-end for users to 
observe job progress. 
 
 
Figure 5. Site and service software stack 
 
4.3. Information Services 
 
The Information Description Language (IDL) 
integrates file descriptions in cross-grid environments, 
as shown in Figure 2. Most important, at the user’s 
request, the information service dispatches current 
information from all associated grid resources, 
including the network, clusters, and more. 
[3] J. Nabrzyski, J.M. Schopf, and J. Weglarz, “Grid 
Resource Management”, Kluwer Academic Publishers, 2005. 
 
[4] Tang, Jia, Zhang, Minjie, “An Agent-based Peer-to-Peer 
Grid Computing Architecture,” Semantics, Knowledge and 
Grid, 2005. SKG '05. First International Conference on , vol., 
no., pp.57-57, Nov. 2005. 
 
[5] S.M. Park and J.H. Kim, “Chameleon: A Resource 
Scheduler in a Data Grid Environment,” Proceedings of the 
3rd IEEE/ACM International Symposium on Cluster 
Computing and the Grid, pp. 258-265, May 2003. 
 
[6] I. Rodero, J. Corbalan, R.M. Badia, and J. Labarta, 
“eNANOS Grid Resource Broker,” Lecture Notes in 
Computer Science, vol. 3470, pp. 111-121, Springer, 2005. 
 
[7] F.D. Sacerdoti, M.J. Katz, M.L. Massie, and D. E. A. C. 
D. E. Culler, “Wide area cluster monitoring with Ganglia,” in 
Cluster Computing, 2003. Proceedings 2003 IEEE 
International Conference on, 2003, pp. 289-298. 
 
[8] R. Wolski, N.T. Spring, and J. Hayes, “The network 
weather service: a distributed resource performance 
forecasting service for metacomputing,” Future Generation 
Computer Systems, vol. 15, pp. 757-768, 1999. 
 
[9] C.T. Yang, T.T. Chen and S.Y. Chen, “Implementation of 
Monitoring and Information Service Using Ganglia and 
NWS for Grid Resource Brokers”, Proceedings of 2007 
IEEE Asia-Pacific Services Computing Conference, pp. 356-
363, Tsukuba, Japan, December 11-14, 2007. 
 
[10] C.T. Yang, C.L. Lai, P.C. Shih, and K.C. Li, “A 
Resource Broker for Computing Nodes Selection in Grid 
Environments,” Grid and Cooperative Computing - GCC 
2004: 3rd International Conference,, Lecture Notes in 
Computer Science, Springer-Verlag, vol. 3251, pp. 931-934, 
Oct. 2004. 
 
[11] C.T. Yang, K.C. Li, W.C. Chiang, and P.C. Shih, 
“Design and Implementation of TIGER Grid: an Integrated 
Metropolitan-Scale Grid Environment,” Proceedings of the 
6th IEEE International Conference on PDCAT’05, pp. 518-
520, Dec. 2005. 
 
[12] C.T. Yang, C.F. Lin, and S.Y. Chen, “A Workflow-
based Computational Resource Broker with Information 
Monitoring in Grids,” in Fifth International Conference on 
Grid and Cooperative Computing (GCC’06), 2006, pp. 199-
206. 
 
[13] C.T. Yang, P.C. Shih, and S.Y. Chen, “A Domain-Based 
Model for Efficient Measurement of Network Information on 
Grid Computing Environments,” IEICE - Trans. Inf. Syst., 
vol. E89-D, pp. 738-742, 2006. 
 
[14] CNGrid: China National Grid Project, 
http://i.cs.hku.hk/~clwang/grid/CNGrid.html. 
 
[15] Ganglia, http://ganglia.sourceforge.net/ 
 
[16] Globus Alliance, http://www.globus.org/ 
 
[17] MPICH-G2, http://www3.niu.edu/mpi/ 
 
[18] Medical Grid Project, http://www.medgrid.org/ 
 
[19] Network Weather Service, http://nws.cs.ucsb.edu/ewiki/ 
 
[20] TIGER, http://gamma2.hpc.csie.thu.edu.tw/ganglia/ 
 
Retrospect of Taiwan’s Software Industry and issues of Software 
Maintenance and Evolution 
 
William Cheng-Chung Chu  
Dept. of Computer Science and Information Engineering, Tunghai University, Taiwan  
cchu@thu.edu.tw 
 
ABSTRACT  
 
Due to high demands of software applications 
world wide, software industry has drawn a great 
attention from information communication 
technologies (ICT) industry for the past decade. 
Taiwan has been known as one of the major hardware 
procurement center for global ICT companies, mainly 
on the basis of  ODM or OEM. More than 10 products  
are ranked No. 1 in the world wide ICT market share. 
However, the development of software industry has 
performed not as well as hardware industry. Based on 
the solid foundation and great achievements of 
hardware manufactures, Taiwan has designed some 
strategies and programs to enhance and promote its 
software industry development in last 10 years. This 
position paper will describe some of our observation 
and suggestions to Taiwan software industry. Some 
projects and issues related to software maintenance 
and evolution in Taiwan will be discussed too. 
 
State  of  Taiwan’s Software Industry 
 
There are several major problems that have hindered 
the development of software industry in Taiwan. First 
of all, the value of software is not recognized and 
under valued. Secondly, domestic market is not well 
structured, it lacks of horizontal collaboration and 
vertical integration mechanism. Many software 
companies have not defined their specialization 
domains, therefore many of them are lack of branding 
and sales channel. Thirdly, the lack of well trained 
software engineers is another big problem.  Many 
development teams are lack of software engineering 
technologies and training.   
Most of companies are small and medium size, 
which focus on custom-made application project and 
domestic market.   However, Taiwan does have some 
very successful software companies who have been 
focus on international market, for example CyberLink 
Corp is the world leading multimedia and digital home 
technologies and Soft-World International Corporation 
is famous on its on-line game international market. 
     However, Taiwan has realized that software has its 
important strategic values. It is a catalyst to 
knowledge-intensive industry and information society. 
It will play as tools for boosting innovation and 
creativity. It is also a glue of IT-enabled service 
industry. With the advantages of hardware industry, its 
also a possible added value products.  
 
 Software Industry Promotion  In Taiwan 
 
To enhance the competitiveness of software 
industry, Taiwan Ministry of Economic Affairs 
(MOEA) has initiated several promotion programs. 
From 1992 to 2002, MOEA Industrial Development 
Bureau (IDB) has 2 terms of 5-year software 
development plan, which sponsored projects to  
software companies for software technologies 
advancement. From 2002, a Network and Multimedia 
Project was to promote networking and multimedia 
technologies. In 2003, the Open Source Project has 
encouraged companies to use open source to develop 
applications. CMMI promotion project was to help 
improve the maturity of software companies.  
Besides, Taiwan has also aimed to attract major  
well-known international companies setting up joint 
international research centers in Taiwan. Several 
projects to encourage collaboration between industry 
and academy have been supported by Taiwan National 
Science Council (NSC), Ministry of Education(MOE), 
and MOEA.  
Most of companies have realized the importance of 
the creativity and brands. Many nation-wide 
government sponsored projects have been to promote 
advanced IT infrastructure and applications, e.g. E-
Taiwan, M-Taiwan, and U-Taiwan projects. Currently, 
Taiwan has also set up two software science parks, one 
is located in northern Taiwan, Taipei, Nan 
Kansoftware science park and the other in southern 
Taiwan, Kaohsiung, Kaohsiung Software Science Park.    
  
