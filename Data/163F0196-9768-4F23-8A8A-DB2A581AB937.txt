Abstract 
 Extended from the single common due date problem, the Multiple Common Due 
date Problem (MCDP) signifies the case where a set of jobs need to be completed 
subject to a set of common due dates. Each time a job misses a common due date, a 
penalty in a form of profit loss is charged. This makes a stepwise decreasing profit for 
a job’s completion. In such a scenario, this study aims to maximize the total profit of 
jobs by sequencing them on a single facility. For the general case where the profit loss 
of a job is job-and-due date-specific, its optimal solution is located by our proposed 
branch-and-bound algorithm, of which efficiency is evaluated by some computational 
experiments in this study. 
Keywords: Scheduling; Multiple common due dates; Stepwise decreasing profit 
 
中文摘要 
延伸自單一共同到期日，多重共同到期日問題為一組工作受限於數個共同到
期日，每當工作錯過一個共同到期日，將會遭致其部分利潤的損失；所以工作完
工時所獲得之利潤乃隨其完工時間的增加而形成階梯式遞減模式。在此模式下，
本研究假設不同的工作在不同的到期日前完成所獲得的利潤不一定相同，因此為
了使工作總利潤達到最大化，擬針對工作在單機上之作業排序問題進行探討。針
對此問題，本研究以分枝界限演算法進行最佳解的搜尋，並以電腦模擬方式，驗
證此演算法的搜尋效率。 
關鍵字：排程、多重到期日、階梯式遞減之利潤
 2
well as resource availability is a major issue for scheduling jobs under multiple due 
dates. 
Next, we classify the WNT problem into the following four groups by the number 
of due dates associated with each individual job and the relationship of due dates to 
jobs: 
 G1: single and job-specific due date, 
 G2: single and common due date, 
 G3: multiple and job-specific due dates, 
 G4: multiple and common due dates. 
For G1, Karp (1972) proved that its WNT problem on a single machine is NP-hard, 
even for the special case of a single common due date for all jobs. In view of the 
NP-hardness, Villarreal and Bulfin (1983), Potts and Van Wassenhove (1988), and 
M’Hallah and Bulfin (2003) presented some enumerative algorithms, which are based 
on dynamic programming or branch-and-bound algorithm. The WNT problem on G2 
has attracted comprehensive attention to investigate on, see a complete review by 
Gordon et al. (2002), because this problem is equivalent to the classical 0-1 single 
knapsack problem, which is also an NP-hard problem. To the best of our knowledge, 
no attention is paid for G3 until Curry and Peters (2005), who considered a 
rescheduling problem on parallel machines under multiple due dates with stepwise 
increasing tardiness cost. With the same assumption as Curry and Peters (2005), Sahin 
(2006) investigated the railroad planning and scheduling problems. By formulating 
the hump sequencing as a corresponding WNT problem on a single machine, Sahin 
developed an integer programming and some approximation algorithms to solve the 
problem optimally and near-optimally, respectively. To determine for a set of jobs 
their processing times from a range of processing times and assign their due dates 
from multiple date dates, Atan and Akturk (2008) presented some ranking rules and 
scheduling algorithm with respect to the maximization of the total profit, which is by 
subtracting the sum of weighted earliness, weighted tardiness, and production costs 
from the total revenue of jobs. The last group G4 is the scope of this study. Till now, 
no study relating to G4 has appeared in the scheduling literature. 
The same as the extension from single and job-specific due date to multiple and 
job-specific due dates, this study would like to extend the edition of common due date 
from single to multiple. Such a set of multiple due dates that are common to all jobs 
could happen to any system in which, for some reason (appointment, technical 
constraints, etc.), several tasks need to be completed under a common set of multiple 
 4
profit 
 Figure 1.  Stepwise decreasing profit under multiple common due dates 
dates  to form a series of profits . In particular, 
the last common due date , a dummy due date, is set by letting it equal the total 
processing time of all jobs. Then the dummy due date will be unrestrictive and can 
assure that all jobs would be completed no later than it. In consequence, each job will 
be completed at one of the time periods , for 
},,,{ 21 mddd K },,,{ ,,2,1 jmjj www K
md
]( ,1 ii dd − mi ,,2,1 K=  and . For 
simplification, period  is referred to as stage . Thus, completing a job at 
stage , no matter how early or late it is, corresponds to an specific amount of profit 
. Profit , the profit obtained at the last stage , is not constrained to 
be zero. Figure 1 illustrates the curve of stepwise decreasing profit.In such a 
scheduling scenario, our problem is how to arrange  jobs into  stages so as to 
maximize their total profit, of which formal mathematical model could be formulated 
as below. 
00 =d
( id −
i
jiw , jmw , ],1 mm d−
n m
,,2,1 K
],1 id i
(d
MCDP: Max             (1) ∑∑
= =
=
m
i
n
j
jiji xwZ
1 1
,,
Subject to  ,  for ii
i
k
n
j
jkj dxp ≤∑∑
= =1 1
, m= ,          (2) 
time 
Stage 1 
0 
jw ,1  
jw ,2  
jmw ,  
1d  2d 1−md md  . . .
…
 
Stage 2 Stage m 
 6
Proof.  Suppose job l  is completed at stage  and job ],( 1 ii dd − j  is at stage 
, where  and ],( 1 riri dd +−+ }1,,1{∈ −mi K },,1{ imr −∈ K . Interchanging these two 
jobs can change their total profit from jrili ww ,, ++  to jilri ww ,, ++ . Since 
 for lilijiji wwww ,1,,1, ++ −≥− 1,,2,1 −= mi K , it can be deduced that 
lrililrilrilililili
jrijrijijijijijriji
wwwwwwww
wwwwwwww
,,,,1,2,1,1,
,,1,2,1,1,,,
)()()(
)()()(
++−++++
+−+++++
−=−++−+−≥
−++−+−=−
L
L
. 
This leads to , justifying the interchanging. In addition, this 
interchanging would not harm any profit of other jobs under the condition of . 
The proof of this property is completed. □ 
jrilijilri wwww ,,,, ++ +≥+
lj pp ≤
 Delaying the completion of job j  from stage  to stage i 1+i  will incur a 
profit loss as much as . Consequently, condition (ii) in Property 1 implies 
that job  always has a larger profit loss than job . This condition is hold when the 
profit loss is due to transportation fees or cut-downs on the sale prices. So, without 
loss of generality, we impose this condition upon all jobs in our MCDP and call them 
agreeable jobs. Let the jobs be indexed in the order of decreasing profit loss. In view 
of the NP-hardness, it follows that no polynomial-time algorithm exists for the MCDP, 
so an enumerative exact algorithm based on the branch-and-bound scheme will be 
proposed in the next section.  
jiji ww ,1, +−
j l
3. The proposed branch-and-bound algorithm 
A branch-and-bound algorithm is developed in this section to find an optimal 
solution for the MCDP. This algorithm begins with a root node that contains no job, 
and then constructs a branch-decision tree by continuing the cycle of branching, 
bounding, and fathoming until an optimal solution is located. At the branching step, 
the depth-first rule is applied to selecting the next branched node, because it is most 
often used for the generalized knapsack problem in literature. From the node list that 
records all unfathomed nodes, the depth-first rule chooses the node with the largest 
number of scheduled jobs. In case of a tie among multiple nodes for the branching, it 
is secondly decided by the largest upper bound on the total profit of jobs. Each time a 
new node is generated, its upper bound is computed by the bounding step. Once a 
node does not satisfy the conditions defined at the fathoming step, then it is added into 
the node list. When the node list becomes empty, the algorithm is then stopped, 
because an optimal solution with the maximized total profit of jobs has been found. 
 8
If stage i  satisfies these two conditions, it is then put into se jt Ω , which colle
qualified stag
cts all 
es for job j . Suppose set jΩ  contains tota
(, jj mΩ espectively, and 
)()2()1( jjjj mΩ<<Ω<Ω K  If set j
l stages that are 
indexed by  ),2(),1( jj ΩΩ L , 
jm  
) r
. Ω  is not empty, then the average profit loss per 
e for job unit processing tim j  is defined as 
j
jmj
j =λ
Let }:{max arg
p
ww
jjj
)( ),(),1( ΩΩ − . 
σλα ∉= jj  and }:{min arg σλβ ∉= jj , which denote the indices 
of the two jobs with the maximum and minimum average profit losses, respectively. 
Ste
With these new notations, our branching scheme is displayed as follows: 
p 1: From no 1de , first generate two test nodes σ Π  and 2Π  by appending job 
 into stage  and job α )( ααΩ m β  into stage )1(βΩ , respe  means 
for   ,: and :{ )()(1 ααΩΩ
ctively. This
)}(Ω≠σ=σα∪σ=σ=Π αααα iiimm  and 
)
m
)}1(for   ,: and { )1(1(2 βΩΩ : Ω≠σ=σβ∪= σσ=Π ββ iii . 
Step 2: For nodes 1Π  and 2Π , compute their upper bounds and denote them by 
and 2z , respectively. (The details about how
1z  
 to calculate an upper bound will be 
given in Section 3.2) 
Step 3: If 21 zz ≤ , l  α=+j ; otherwise, β=+j . et
Step 4: om node σ ies of new node Fr  a ser s are generated by appending job  into 
ext, we show how to compute the upper bound for a node. 
3.2.
f the MCDP, we first 
rewrite the objective function (1) in terms of profit loss. Then, 
, +j
stage iσ  for each +Ω∈ ji , respectively. 
N
 
 The bounding step 
Referring to equation (3) in the mathematical formulation o
 10
MCDP into a series of 0-1 single knapsack problems  for iKP 1,,2,1 −= mi K , 
defined as below: 
iKP :  Min  , ∑
=
+ −−=
n
j
jijijii ywwz
1
,,1, )1)((~
     subject to  , i
n
j
jij dyp ≤∑
=1
,
                , }1,0{, ∈jiy nj ,,2,1 K= . 
For , the size of its “knapsack” is as large as . Putting job iKP id j  into it (i.e., 
) incurs no profit loss (1, =jiy 01 , =− jiyQ ). On the contrary, the case that  
leads to a profit loss as much as 
0, =jiy
)( ,1, jiji ww +− . In conclusion, problem  aims to 
optimally arranging jobs into a knapsack with space size  under the objective of 
minimizing the total profit loss of the jobs that cannot be put into this knapsack. 
Suppose the minimum value for problem  is referred to as . In terms of 
objective function (5), it is immediate to see that  
iKP
id
iKP
*~
iz
∑∑ −
==
−≤
1
1
*
1
,1
~zmax  
m
i
i
n
j
j zw . 
So, an upper bound on the total profit of jobs could be derived as below. 
Suppose notation  denotes a newly generated node. Then first calculate its 
corresponding spaces  for  and put all the stages  with  
into set 
Π
iSˆ mi ,,2,1 K= i 0ˆ >iS
K , where  and  denotes the index of 
the -th stage in set 
}0ˆ:,,2,1),({ )( >η== lkSllkK K )(lk
l K . Then, for 1,,2,1 −η= Kl , solve its corresponding  
as below. 
)(ΠlKP
Min  , ∑
Π∉
+ −−=Π
j
jlkjlkjlkl ywwz )1)(()(~ ),(),1(),(
subject to  , )(),( lk
j
jlkj dyp ≤∑
Π∉
}1,0{),( ∈jlky , . nj ,,2,1 K=
The algorithm used for solving )(ΠlKP  is based on Martello and Toth (1978). Then 
the value 
)(~min
1
1
),1( Π−∑∑ −η
=Π∉ l
l
j
jk zw  
constitutes an upper bound on the total profit of the jobs that have not be scheduled 
 12
- 
⎪⎪⎭
⎪⎪⎬
⎫
⎪⎪⎩
⎪⎪⎨
⎧
=×
⎟⎠
⎞⎜⎝
⎛ +==
∑
=   ,,2,1for    ,
2
)1(
: 1 mid
mm
k
dD m
i
k
iIII K  
Twenty tests are run for each combination of the above factors. The initial profit , 
earned by completing job 
jw ,1
j  at the first stage, is assumed to vary within 
. Then, on the base of initial profit, an amount of profit loss  
will be incurred whenever the completion of job 
1000]100,1[ ×DU jiw ,∆
j  is delaying from stage  to 
stage  for 
i
1+i 1,,2,1 −= mi K . In consequence, the initial profit will be reduced by 
the cumulative amount of profit loss so that the profit curve forms a stepwise 
decreasing pattern. In our experiment, the sample range designed for profit loss is 
increasing with the stages. Constrained by the assumption of agreeable jobs, 
assigning a profit loss to a job is made after all randomly generated profit losses are 
first sequenced in the non-increasing order. As a supplementary note, agreeable jobs 
do not assure Property 1. In addition, three patterns of common due dates, referred to 
as , , and , are also given to evaluate the impact of the durations of 
common due dates on the computational efficiency. The first pattern  is to test the 
situation when the first stage occupies a longer duration than the same duration of 
other stages. Secondly, dividing the total processing time (= ) into even durations is 
pattern . Contrary to the first pattern, the third pattern  assigns a longer 
duration to a later stage. 
ID IID IIID
ID
md
IID IIID
 The computational efficiency of our branch-and-bound algorithm is measured by 
the number of total generated nodes and the running time (s). Table 1 summaries for 
each set of twenty tests its average and maximum numbers of total generated nodes 
(denoted by ANN and MNN) and its average and maximum running times (denoted 
by ACT and MCT). It is worthy of note that, among three patterns of common due 
dates, pattern  requires the most computational effort, patterns  the second, 
and  the last, respectively. It seems to imply that the longer the first stage, the 
harder finding an optimal sequence for the MCDP. By reviewing Property 1 that 
implies the two critical factors for the position of a job in a sequence are its 
processing time and profit loss at each stage, we infer the reason is that the sample 
ID IID
IIID
 14
Table 1. (Continue) 
Due date 
type n  m  ANN MNN ACT (s) MCT (s) 
IIID  20 3 25.70 35 0.05 1.00 
   4 36.80 88 0.10 1.00 
   5 39.50 95 0.05 1.00 
 Average 34.00 95 0.07 1.00 
  40 3 55.95 72 0.05 1.00 
   4 78.75 95 0.10 1.00 
   5 102.05 173 0.20 1.00 
 Average 78.92 173 0.12 1.00 
  60 3 79.60 160 0.20 1.00 
   4 115.50 137 0.15 1.00 
   5 148.10 182 0.30 1.00 
 Average 114.40 182 0.22 1.00 
  80 3 109.05 143 0.25 1.00 
   4 160.55 367 0.50 2.00 
   5 201.20 298 0.55 1.00 
 Average 156.93 367 0.43 2.00 
  100 3 142.35 171 0.50 1.00 
   4 206.10 234 0.70 1.00 
   5 234.75 275 1.10 2.00 
 Average 194.40 275 0.77 2.00 
 
range for the first profit loss  does not vary so large as to dominate over the 
factor of job’s processing time. But as the stage gets later, more profit losses will be 
cumulated and finally breaks the tie. 
jw ,1∆
Table 1 also shows the influence of stage size  and job size  on the required 
computational resources. Although, on average, both job and stage sizes affect the 
computational efficiency, stage size adds more difficulty to solving problems. This 
mainly results from the branching step which generates new nodes in accordance with 
all qualified stages. 
m n
 
5. Conclusions 
Extended from a single common due date for all jobs, the MCDP considers the 
case where exist multiple common due dates and the profit earned by completing a 
job makes a decrease each time the job misses a common due date. However, 
completing a job midst two consecutive common due dates makes no difference on its 
profit. This gives rise to a stepwise decreasing profit function for a job. With such a 
 16
 18
Garey, M., Johnson, D., 1979. Computers and intractability: A guide to the theory of 
NP-Completeness. Freeman and Co., San Francisco. 
Garey, M.R., Johnson, D.S., 1975. Complexity results for multiprocessor scheduling 
under resource constraints. SIAM Journal on Computing 4, 397-411. 
Gordon, V.S., Proth, J-M. and Chu, C., 2002. A survey of the state-of-the-art of 
common due date assignment and scheduling research. European Journal of 
Operational Research 139, 1-25. 
Gordon, V.S., Tarasevich, A.A., 2009. A note: Common due date assignment for a 
single machine scheduling with the rate-modifying activity. Computers & 
Operations Research 36, 325-328. 
Kanet, J.J., 1981. Minimizing the average deviation of jobs completion times about a 
common due date. Naval Research Logistics Quarterly 28, 643-651. 
Karp, R. M., 1972. Reducibility among combinatorial problems. In: Miller, R. E., 
Thatcher, J.W. (Eds.), Complexity of computer computations. Plenum Press, New 
York, pp. 85-103. 
Koulamas, C., 1994. The total tardiness problem: review and extensions. Operations 
Research 42, 1025-1041. 
Martello, S., Toth, P., 1978. Algorithm for the solution of the 0-1 single knapsack 
problem. Computing 21, 81-86. 
Potts, C.N., Wassenhove, L.N., 1988. Algorithms for scheduling a single machine to 
minimize the weighted number of late jobs. Management Science 34, 843-858. 
Sahin, G., 2006. New combinatorial approaches for solving railroad planning and 
scheduling problems. Ph.D. Dissertation, University of Florida. 
Sen, T., Sulek, J.M., Dileepan, P., 2003. Static scheduling research to minimize 
weighted and unweighted tardiness: A stat-of-the-art survey. International Journal 
of Production Economics 83, 1-12. 
Villarreal, F.J., Bulfin, R.L., 1983. Scheduling a single machine to minimize the 
weighted number of tardy jobs. IIE Transactions 15(4), 337-343.
出席國際學術會議心得報告 
                                                             
計畫編號 NSC97-2221-E-324-026 
計畫名稱 階梯狀交貨模式下之訂單管理研究 (II) 
出國人員姓名 
服務機關及職稱 
楊文華（朝陽科技大學企業管理系副教授） 
會議時間地點 美國奧蘭多( 2009/05/01~04) 
會議名稱 The 20th Annual POMS Conference – Global Challenges and Opportunities 
發表論文題目 Maximizing total profit of jobs with stepwise non-increasing profit under multiple common due dates 
 
一、參加會議經過 
於 5/1早上抵達會場後，雖然被規劃報告的場次為次日 5/2下午，但仍挑選了數場較感興
趣之主題場次進入聆聽。晚上則參加了主辦單位所規劃的小型歡迎餐會，期間與來自台
灣、大陸、英國等研究學者交換彼此研究心得，並分享各國學術環境特色。 
5/2下午於主題為 Terminal location and scheduling之場次中發表了個人研究心得。主持人
Zeng教授及在場與會者的提問與建議均使後續研究之修改可更臻完善。當日晚上的正式
歡迎餐會，因逢會議第二天，因此參與人數更多。 
5/3早上抱著輕鬆的心情，進入會場附近的迪士尼樂園享受難得的初夏陽光與歡樂氣氛。
該日中午收拾行曩，搭乘下午班機準備返國。 
 
 
二、與會心得 
POMS 會議為生管/作業研究領域的主要會議之一，因此會議的主題內容不僅兼顧傳統、
理論性研究主題，亦配合時代環境趨勢規劃具創新、實務應用的主題；例如：強調綠能
環境與作業管理之間的互動影響、醫療產業的作業管理等。藉由參加此次研討會，不僅
在個人所從事的研究領域上獲益匪淺，更藉由此會議所規劃之多元研究主題，得以接觸
到過去較少涉獵的主題，例如討論財管與作業管理之介面研究、結合作業管理之行銷策
略研究等。藉由聆聽此些新穎議題的研究成果，或許對未來個人研究主題的豐富化可帶
來不少的助益。
1. Introduction 
 In scheduling work, arranging jobs to complete them before due dates is always 
an important issue. Nevertheless, under restrictive due dates or limited production 
resources, it is sometimes unavoidable for some jobs to be late in respect of their due 
dates. As a result, a necessary work is to decide the set of late jobs in reference to 
some performance criteria. While a job generally may has its specific due date, some 
scenarios in practice, see Kanet [1] and Biskup and Feldmann [2], could arise the 
special case of a due date common to all jobs. The common due date scheduling 
problem has received comprehensive attention in the last 20 years, including a 
comprehensive survey made by Gordon et al. [3].  
No matter whether the due dates of jobs are common or not, the traditional 
versions of tardiness cost is either linear or two-piecewise function. For the linear type, 
the tardiness cost is a linear function of the completion time of a job. Then, a major 
concern for this type of tardy cost is the minimization of the total tardiness of all jobs. 
As for the two-piecewise type, it assumes a specific amount of tardy cost will be 
charged whenever a job is late, no matter how later its completion time is than its due 
date. When such a tardy cost is concerned, the problem of minimizing the total 
tardiness cost is transformed into that of minimizing the weighted number of tardy 
jobs (WNT). Karp [4] proved that the WNT problem on a single machine is NP-hard, 
even if all jobs are constrained by a common due date. In consequence, several 
enumerative algorithms based on dynamic programming or branch-and-bound have 
been presented, such as Villarreal and Bulfin [5], Potts and Van Wassenhove [6] and 
M’Hallah and Bulfin [7]. For the special case that all jobs have the same tardy cost (or 
weight) for their lateness, Moore [8] developed a polynomial algorithm to minimize 
the (weighted) number of tardy jobs on a single machine. An up-to-date survey on 
these two types of tardy cost can be found in Sen et al. [9].  
In recent years, the third type of tardy cost –stepwise (multiple-piecewise) 
function – began to attract Curry and Peters [10] and Sahin [11] to investigate on. As 
Curry and Peters [10] pointed out, this type of tardy cost happens very often in many 
manufacturing environments, which Sahin [11] supplemented with the examples of 
fixed transportation/shipment schedules and batch production. In an earlier project 
management reference, Birge and Maddox [12] also discuss this type of tardy cost. 
Naturally, the stepwise type arises from when multiple due dates are allowed for a job. 
Every time a job misses one due date, its tardy cost is most likely to have a jump, 
 3
non-increasing, the conclusion that  can be made. With these 
assumptions, our task is to arrange  jobs into  disjoint sets 
jmjj www ,,2,1 ≥≥≥ L
n m iΩ  for 
, such that each job in set mi ,,2,1 K= iΩ  is completed at stage , and the total 
profit gained from completing all  jobs is maximized. For convenience, this 
multiple common due dates problem is abbreviated as MCDP. Thus we may formally 
formulate the MCDP as below: 
i
n
(4)                                            ,,,1   ,,,1},1,0{
(3)                                            ,,,1     ,1
(2)                                            ,,,1     ,..
(1)                                            max
1
1 1
1 1
njmix
njx
mkdxpts
xw
ij
m
i
ij
k
k
i
n
j
ijj
m
i
n
j
ijij
KK
K
K
===
=≤
=≤
∑
∑∑
∑∑
=
= =
= =
 
Without loss of generality, we assume that all coefficients in the above formulation 
are positive. It is worthy notes that the processing of a job can begin at one stage but 
finish at its next stage, while the profit obtained for this job is still in accordance with 
its finishing stage. In terms of the multiple knapsack problems, the MCDP is 
characterized by the feature that it allows the remaining space of knapsack  to be 
used for its adjacent knapsack 
i
1+i . This point distinguishes the MCDP from the 
multiple knapsack problems in literature. For the sake of simplicity, we additional 
assume the last common due date  is the total processing time of all jobs, such 
that constraints (2) and (3) become 
md
k
k
i
n
j
jij dxp ≤∑∑
= =1 1
, , for 1,,1 −= mk K  and                 (2’) m
m
i
n
j
jij dxp =∑∑
= =1 1
,
1
1
, =∑
=
m
i
jix , for nj ,,1K= .                                          (3’) 
Next, we present the following property, which describes the dominance relation for a 
pair of jobs. 
Property 1. If there exist a pair of jobs  and l  such that j
lj pp ≤  and lilijiji wwww ,,1,,1 −≥− −−  for mi ,,2K= , 
then there exists an optimal solution to the MCDP in which either both jobs  and  
are completed in the same due date window, or job  is completed in the later 
window than that job  is in. 
j l
l
j
 5
sequencing jobs in the order of shortest processing time (SPT). 
 This case demonstrates that the SPT sequence of jobs can maximize the total 
profit of the MCDP if all jobs’ sizes are in such a range that a fixed cost  is 
charged for a certain type of expedited transportation referring to due date . This 
implies the MCDP I is polynomial solvable. 
iw∆
id
3.2. MCDP II:  for )1(, ijji rww −= mi ,,1K=  and 10 321 ≤<<<<= mrrrr L . 
 Different from the above case that a fixed amount of penalty is charged for each 
stage, this case assumes a fixed rate for each stage. When a job is completed at stage 
, then its associated penalty is the equivalence of a fixed rate  of its original profit. 
The rates are independent of jobs, but increasing with stages. We often can find this 
type of penalty in an order contract, e.g., 1% loss of the price for being one week late, 
3% for being two weeks late, etc. For this case, we first use notation 
i ir
iπ  to denote the 
total amount of original profits of jobs completed at stage , and reformulate the 
objective function (1) as below. 
i
∑∑ ∑∑∑
== == =
π−=⎟⎟⎠
⎞
⎜⎜⎝
⎛−=
m
i
ii
m
i
n
j
jiji
m
i
n
j
jiji rxwrxw
11 1
,
1 1
,, )1()1( .                       (6) 
Considering the penalty rates are increasing with stages, we should arrange the total 
amount of original profits of jobs to be decreasing with stages such that objective 
function (6) is maximized. So, our first task is to maximize total profit 1π  by 
deciding set , subject to the total processing time of jobs in  not 
greater than due date . Afterwards, excluding the jobs in 
}1:{ ,11 ==Ω jxj 1Ω
1d 1Ω  from , we build a 
new job set , from which some jobs are selected so as to constitute set 
 that could maximize total profit 
N
)\( 12 Ω= NN
}1:{ ,22 ==Ω jxj 2π  for stage 2 while keeping the 
total processing time of jobs in set 2Ω  not greater than ∑ Ω∈− 12 j jpd . In a word, 
objective function (6) could be maximized by sequentially solving the following 
sub-problem  for kP 1,,2,1 −= mk K : 
 7
with stepwise non-increasing profit, subject to multiple common due dates. With the 
foundation, a further development of research on the MCDP could consider the case 
when the penalty or multiple due dates are job-dependent, or make other extension 
about machine configuration and performance measures more general than the topic 
we consider here. 
 
References 
[1] J. J. Kanet, Minimizing the average deviation of job completion times about a 
common due date, Naval Research Logistics Quarterly 28 (1981) 643-651. 
[2] D. Biskup, M. Feldmann, Benchmarks for scheduling on a single machine 
against restrictive and unrestrictive common due dates, Computers and 
Operations Research 28 (2001) 7787-801. 
[3] V. Gordon, J.-M. Proth, C. Chu, A survey of the state-of-the-art of common due 
date assignment and scheduling research, European Journal of Operational 
Research 139 (2002) 1-25. 
[4] R. N. Karp, Reducibility among combinatorial problems in: Miller, R. E., 
Thatcher, J. W. (Eds.), Complexity of Computer Computations, Plenum Press, 
New York, 1972, pp. 85-103.  
[5] F. J. Villarreal, R. L. Bulfin, Scheduling a single machine to minimize the 
weighted number of tardy jobs, IIE Transactions 15 (1983) 337-343. 
[6] C. N. Potts, L. N. Van Wassenhove, Algorithm for scheduling a single machine to 
minimize the weighted number of late jobs, Management Science 34 (1988) 
843-858. 
[7] R. M’Hallah, R. L. Bulfin, Minimizing the weighted number of tardy jobs on a 
single machine, European Journal of Operational Research 145 (2003) 45-56. 
[8] J. M. Moore, One-machine sequencing algorithm for minimizing the number of 
late jobs, Management Science 15 (1968) 102-109. 
[9] T. Sen, J. M. Sulek, P. Dileepan, Static scheduling research to minimize weighted 
and unweighted tardiness: A stat-of-the-art survey, International Journal of 
Production Economics 83 (2003) 1-12. 
[10] J. Curry, B. Pters, Rescheduling parallel machines with stepwise increasing 
tardiness and machine assignment stability objectives, International Journal of 
Production Research 43 (2005) 3231-3246. 
[11] G. Sahin, New Combinatorial approaches for solving railroad planning and 
 9
