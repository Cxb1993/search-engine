for automation.  Complexity of  
realizability and synthesis is also briefly discussed.  
Finally, we show how the  
GOAL tool may be used as a prototype tool to automate 
reasoning in the  
intuitionistic logic. 
 
 
Abstract
This three-year (2008–2011) project, being part of an integrated project, was aimed at
developing a constructive theory of temporal interfaces and an associated prototype tool for
modular/compositional verification and synthesis. The specific tasks include the develop-
ment of an intuitionistic linear-time temporal logic, as the basis of a specification language
for temporal interfaces. The logic is to be accompanied by proof rules and algorithms for
modular verification, refinement, and synthesis that enable automatic tool support.
In this final report, we present an intuitionistic version of the Quantified Propositional
Temporal Logic, which we call iQPTL, and compare the logic with its classic origin. We
then describe rules for modular verification and refinement with iQPTL and the associated
algorithms for automation. Complexity of realizability and synthesis is also briefly discussed.
Finally, we show how the GOAL tool may be used as a prototype tool to automate reasoning
in the intuitionistic logic.
Keywords: Compositional Verification, Interfaces, Intuitionistic Logic, iQPTL, Modu-
lar Refinement, Modular Specification, QPTL, Reactive Modules, Realizability, Synthesis,
Temporal Logic, Verification.
Í4ëO2008–2011i×J)i×I5Íêý3s×Í`+«
TÌ`V+«ÝxP§¡CÃyh§¡Ý×ÿà;J)WÝÕlÌx
Ý®4êÀs×8EyFÙPaP`ìÝàÌPaP`ì|`
+«à+Ý×ÍÃ¤g9ì¬ºàyYîÌÝÿà;JÞM;
)WÝJ°J|CÕ°ôÎÍi"~ÝP
3ÍSÏ ×&Æè×ËÌiQPTLÝÌÞaP`ìÝàÌPÌÍ
¬ÞÍæFÙÌÍ×f´&Æ!`1|iQPTL+Ýÿà;JÞM
;ÝJ°J|C8n;Õ°bn+«!}@¨Pÿà;)WÝÓ
&ÆôÝyÝD¡t¡&Æ1A¢ºàGOAL9Ì3iQPTL

;.§ÝÕlÌ
n"Þà)PJ+«àÌPìiQPTLÿà;Jÿà;!}QPTL
DTPÿà@¨P)W`ìJ
1 Introduction (+eÿ^êÝ)
Modularity is a central concern in software specification, design, implementation, and veri-
fication. One primary advantage of modular design and implementation is to bring about
compositionality in verification, i.e., to enable the inference of properties of a composite sys-
tem from properties of its constituent modules. Such reasoning about modules at the property
level becomes a necessity when only the specification, but not the implementation, of a module
is available. Modular development of computer software therefore hinges on clear and precise
specification, i.e., description of the interface, of a module. For software composed of concurrent
reactive modules that interact with one another, the description of a module typically needs to
reveal the temporal ordering of events that may result from the interaction between the module
and its environment (which consists of all the other modules). We refer to this description as
the temporal interface of a reactive module.
A module is meant for particular contexts or environments and will behave properly only if
its environment does, i.e., only if it is used in a proper environment. Disregarding the language
being used, when specifying the temporal interface of a module, one should therefore include
(1) assumed properties about its environment and (2) guaranteed properties of the module if
the environment obeys the assumption. In a system composed of two modules M1 and M2,
M2 is the environment of M1 and M1 is the environment of M2. The interface of M1 will
assume certain properties that must be respected by M2, and vice versa. This principle had
2
2 Related Work (8n@~)
There is a great wealth of works on methods for modularity, but modular methods that leverage
the intuitionistic view are scarce. We will give a very brief glimpse of what we consider to be
most relevant to this research. Basic technical concepts and terms from some of these works will
be reviwed in a subsequent section that provides the preliminaries needed in this research. There
has not been much progress since the proposal of this research, except perhaps a recent work
by Tsay and Wang [39] on automating compositional reasoning of infinitary safety properties
via learning.
• Modular Specification and Verification: Abadi and Lamport [1] gave a comprehen-
sive treatment of compositionality in a very general semantic setting. Concepts such as
realizability and receptiveness were defined and shown to be fundamental in composing
specifications. Their semantic composition rule explicitly uses the notion of the realiz-
able part of a specification which in general cannot be extracted by simpler operations on
the specification. In practice, a specific syntactical method should provide guidelines for
writing specifications that are realizable. Later works [2, 14, 19, 35] proposed particular
logical frameworks to address these concerns. However, for our purpose, the original work
of Abadi and Lamport is till the most authoritative with nearly all relevant semantic con-
cepts covered. Our previous work on assume-guarantee specifications with temporal logic
[19] is also useful.
More recently, de Alfaro and Henzinger proposed in [15] an automata-based language
called interface automata that is particularly tailored to the need of modular software de-
sign. Their formalism can capture both assumptions about the order in which the methods
of a component are called, and guarantees about the order in which the component calls
external methods, which are limited yet practically useful temporal aspects of software
component interfaces. The work immediately sparked a new line of research on interface
theory, e.g., [10, 11]. Though syntactically similar to two earlier compositional modelling
formalisms I/O automata [23] and I/O systems [18], interface automata are not required to
be input-enabled or non-blocking. Whether two components are compatible, i.e., whether
they can be used together, can be formally verified by checking if the composition of their
representing interface automata is nonempty.
• Intuitionism: Abadi and Plotkin [5] were probably the first to argue that intuitionism
provides a clearer picture of the general logical principles behind compositionality. The
semantic of the intuitionistic implication cleanly captures the inductive mechanism that
is needed when one composes assume-guarantee specifications. However, they consider
only safety properties. Refinement was touched upon, but not treated comprehensively.
Moreover, they worked directly on the semantic models without providing a specification
language. Later, Abadi and Merz [4] considered a slightly more general intuitionistic
semantic model, considering general partial orders instead of the more restricted prefix
relation (which suffices for linear temporal logic). In [25], Maier defined an intuitionistic
version of PTL without past operators. Refinement was not treated in these two later
works, either. All of them worked mostly on the logic-formula level and hardly discussed
the use of negation or disjunction.
In Tsay and Wang [39], we considered the class of intuitionistically closed regular lan-
guages and showed that it forms a Heyting algebra and is finitely approximatable, using
a characterization with Landweber automata. Subsequently, compositional proof rules
can be verified automatically and learning algorithms for finitary regular languages suffice
4
to safety properties, but with all prefixes of a property included. It can be shown that a closed
intuitionistic-language must also be prefix-closed. Let Fω and F∞ denote respectively the sets
of all closed ω-languages and closed intuitionistic-languages.
So much about sequences, we now turn to the machinery—automata that recognize (or
generate) such sequences. A finite(-state) automaton is a quintuple 〈Σ, Q, δ, q0, F 〉:
• Σ is the finite alphabet.
• Q is the finite set of states.
• δ ⊆ Q× Σ×Q is the transition relation.
• q0 ∈ Q is the initial state.
• F ⊆ Q is the set of final (accept) states.
Let A = 〈Σ, Q, δ, q0, F 〉 be a finite automaton. A run of A on a finite word w1w2 · · ·wn ∈ Σ∗
is a finite sequence of states q0q1q2 · · · qn such that, for every 0 ≤ i < n, (qi, wi+1, qi+1) ∈ δ. The
run is accepting if qn ∈ F . A finite word is accepted by A if there is an accepting run of A on
the finite word.
A run of A on an infinite word w1w2 · · · ∈ Σ∞ is an infinite sequence of states q0q1q2 · · ·
such that, for every i ≥ 0, (qi, wi+1, qi+1) ∈ δ. The run is accepting if, for infinitely many i,
qi ∈ F . An infinite word is accepted by A if there is an accepting run of A on the infinite word.
The language of, or the language recognized by, an automaton is the set of words accepted
by the automaton. Traditionally, when intended for finite words, a nondeterministic finite
automaton is called by the same name (NFA). For infinite words, it is called a nondeterministic
Bu¨chi automaton (NBA). A particularly interesting sub-class of Bu¨chi automata are the safe
Bu¨chi automata where every state is an accept state. Having the same structure as an NFA,
a Bu¨chi automaton may also be used as an NFA to accept finite words, in addition to infinite
words. In this case, we call it an intuitionistic nondeterministic Bu¨chi automaton (iNBA).
When the automaton is deterministic, we call it an iDBA.
Let Rω be the family of languages recognizable by an NBA, which are the well-studied
regular ω-languages (or ω-regular languages), and R∞ the family of languages recognizable by
an iNBA, referred to as the regular intuitionistic-languages. Fω ∩Rω is the family of languages
that are recognizable by a safe NBA, referred to as the safe regular ω-languages. And F∞∩R∞
is the family of languages that are recognizable by a safe iNBA, referred to as the safe regular
intuitionistic-languages. It can be shown that any safe iNBA is equivalent to some iDBA (using
the usual subset construction for determinization) where there is no transition going from a
non-accept state to an accept state.
〈F∞ ∩ R∞,⊆,∩,∪,→, ∅,Σ∞〉 forms a complete Heyting algebra, but not for Fω ∩ Rω [39].
For all L1, L2 ∈ F∞ ∩R∞, there is a greatest language L ∈ F∞ ∩R∞ such that L1 ∩L ⊆ L2. L
is usually called the relative pseudo-complement of L1 with respect to L2, denoted L1 → L2.
3.2 QPTL
QPTL (Quantified Propositional Temporal Logic) [33, 34, 20] is an extension, with quantification
over propositions, of Propositional Temporal Logic (PTL)1, which includes both future and past
1Quite a few researchers in the model checking community refer to PTL without past as LTL, considering it
as a sublogic of the general Computation Tree Logic (CTL∗) [12]. The term LTL has also been used to denote
6
4.1 QPTL in Negation Normal Form
The fact that every QPTL formula can be converted into the negation normal form suggests
that negation at the temporal level does not really add any expressive power. In other words,
we could have restricted negation to only atomic propositions to begin with. We thus obtain a
semantically equivalent variant of QPTL, as follows:
• > (“top”, the constant true) and ⊥ (“bottom”, the constant false) are formulae.
• Every p ∈ AP is a formula.
• For every p ∈ AP , ¬p is a formula (so, negation applies only to atomic propositions).
• If ϕ and ψ are formulae, then so are ϕ ∧ ψ, ϕ ∨ ψ, ©ϕ, 2ϕ, 3ϕ, ϕ U ψ, ϕ W ψ, ∼©ϕ, −©ϕ,
−2ϕ, −3ϕ, ϕ S ψ, and ϕ B ψ.
• If ϕ is a formula and p ∈ AP , then ∃p : ϕ and ∀p : ϕ are formulae.
We refer to this variant as nQPTL. Its semantics is almost identical to that of QPTL, except
for negation, and is given below.
• (σ, i) |= >
• (σ, i) 6|= ⊥
• (σ, i) |= p ⇐⇒ p ∈ si (sometimes denoted as si |= p), for an atomic proposition p.
• (σ, i) |= ¬p ⇐⇒ p 6∈ si (sometimes denoted as si 6|= p), for an atomic proposition p.
• (σ, i) |= ϕ ∧ ψ ⇐⇒ (σ, i) |= ϕ and (σ, i) |= ψ.
• (σ, i) |= ϕ ∨ ψ ⇐⇒ (σ, i) |= ϕ or (σ, i) |= ψ.
• (σ, i) |= ©ϕ ⇐⇒ (σ, i+ 1) |= ϕ.
• (σ, i) |= 2ϕ ⇐⇒ ∀k ≥ i : (σ, k) |= ϕ.
• (σ, i) |= 3ϕ ⇐⇒ ∃k ≥ i : (σ, k) |= ϕ.
• (σ, i) |= ϕ U ψ ⇐⇒ for some k ≥ i, (σ, k) |= ψ and for all j, i ≤ j ≤ k, (σ, j) |= ϕ.
• (σ, i) |= ϕ W ψ ⇐⇒ for some k ≥ i, (σ, k) |= ψ and for all j, i ≤ j ≤ k, (σ, j) |= ϕ, or for
all j ≥ i, (σ, j) |= ϕ.
• (σ, i) |= ∼©ϕ ⇐⇒ (i > 0)→ ((σ, i− 1) |= ϕ).
• (σ, i) |= −©ϕ ⇐⇒ i > 0 and (σ, i− 1) |= ϕ.
• (σ, i) |= −2ϕ ⇐⇒ for all k, 0 ≤ k ≤ i, (σ, k) |= ϕ.
• (σ, i) |= −3ϕ ⇐⇒ for some k, 0 ≤ k ≤ i, (σ, k) |= ϕ.
• (σ, i) |= ϕ S ψ ⇐⇒ for some k, 0 ≤ k ≤ i, (σ, k) |= ψ and for all j, k < j ≤ i, (σ, j) |= ϕ.
• (σ, i) |= ϕ B ψ ⇐⇒ for some k, 0 ≤ k ≤ i, (σ, k) |= ψ and for all j, k < j ≤ i, (σ, j) |= ϕ,
or for all j, 0 ≤ j ≤ i, (σ, j) |= ϕ.
8
Thanks to the formation of safe iQPTL formulae, QPTL formulae of the canonical form 2ϕ
will always be evaluated at the beginning of a sequence. The semantics of 2ϕ, where ϕ is a past
formula, with respect to (σ, 0) (σ may be finite) is adjusted to accommodate finite sequences,
as follows.
• (σ, 0) |= 2ϕ ⇐⇒ for all k, 0 ≤ k < |σ|, (σ, k) |= ϕ.
With this adjustment, the semantics of safe iQPTL formulae can now be given as follows.
• (σ, 0) |= ϕ ∧ ψ ⇐⇒ (σ, 0) |= ϕ and (σ, 0) |= ψ.
• (σ, 0) |= ϕ ∨ ψ ⇐⇒ (σ, 0) |= ϕ or (σ, 0) |= ψ.
• (σ, 0) |= ϕ−. ψ ⇐⇒ for every σ′  σ with |σ′| > 0, (σ′, 0) |= ϕ implies (σ′, 0) |= ψ.
It can be shown that the following equivalence relations hold:
• 2H1 ∧2H2 is equivalent to 2(H1 ∧H2).
• 2H1 ∨2H2 is equivalent to 2( −2H1 ∨ −2H2).
• 2H1 −. 2H2 is equivalent to 2( −2H1 → H2).
This implies that safe iQPTL formulae are in fact expressively equivalent to canonical safety
QPTL formulae (under intuitionistic interpretation). It can also be shown that models of safe
iQPTL formulae form precisely the Heyting algebra of 〈F∞ ∩R∞,⊆,∩,∪,→, ∅,Σ∞〉.
5 Temporal Interfaces (`+«)
Now let us see how the behavior of a reactive module at its interface can be described with
temporal logic. As we pointed out earlier, the description of a reactive module typically needs to
reveal the temporal ordering of events that may result from the interaction between the module
and its environment, namely all of the other modules. This description is referred to as the
temporal interface of the module.
We see that a reactive module is equipped with a set of input/output variables for commu-
nication and local variables for storage. Its behaviors are prescribed by (1) an initial condition
on the output and local variables and (2) a set of transitions that specify how it may change
the values of its output and local variables in one execution step. Additionally, there are
fairness/liveness conditions that dictate how often each transition should be performed. Se-
mantically, a module is associated with a set of computations or sequences of states, each of
which represents a possible ‘open execution’ of the module, i.e., execution of the module to-
gether with an arbitrary but compatible environment that may arbitrarily change the values of
its input variables but not its output or local variables.
Suppose we want to describe an interface with assumption A and guarantee G. Pioneers
of the assume-guarantee paradigm had shown that the classic A → G would be too weak to
deal with mutual dependency between modules. A stronger implication which essentially says
that G holds longer than (or, in some variants, at least as long as) A does was then proposed.
This stronger implication is also closely related to the notion of realizability [3, 1]. Since a
10
M1 |= G2 +−. G1 M2 |= G1 +−. G2
M1 ‖M2 |= G1 ∧G2
Here both G1 and G2 are canonical safety QPTL formulae. This rule reveals the mutual
dependency between the two modules more directly than the following equivalent rule that has
been used in automated compositional verification.
M1 ‖ G2 |= G1 G1 ‖M2 |= G2 G1 ‖ G2 |= false
M1 ‖M2 |= G1 ∧G2
It can be shown that, under the condition G1 ‖ G2 |= false, the two premises M1 ‖ G2 |= G1
and G1 ‖M2 |= G2 are equivalent to M1 |= G2 +−. G1 and M2 |= G1 +−. G2, respectively.
In fact, the following fundamental relationships, first observed in [2], can be established for
safe iQPTL formulae.
• M ‖A |= G iff M |= A−. G.
• When A and G constrain disjoint parts of the system, |= (A +−. G) = (A−. G) and hence
M ‖A |= G iff M |= A +−. G.
Below is a more comprehensive composition rule:
` A ∧G2 → A1
` A ∧G1 → A2
` A ∧G1 ∧G2 → G
` (A1 +−. G1) ∧ (A2 +−. G2)→ (A +−. G)
When the modules are explicitly given, the rule becomes as follows.
M1 |= A1 +−. G1
M2 |= A2 +−. G2
|= A ∧G2 → A1
|= A ∧G1 → A2
|= A ∧G1 ∧G2 → G
M1 ‖M2 |= A +−. G
Alternatively, applying the equivalence “M ‖A |= G iff M |= A +−. G”, the rule can be
formulated as follows:
M1 ‖A1 |= G1
M2 ‖A2 |= G2
|= A ∧G2 → A1
|= A ∧G1 → A2
|= A ∧G1 ∧G2 → G
(M1 ‖M2) ‖A |= G
Note that, to stay within the realm of Heyting algebras so that the various composition
rules can be easily justified by intuitionistic reasoning [5, 4], we have restricted both A (the
12
Recently, we have added the capability of defining ω-regular games in GOAL, though game-
solving algorithms have yet to be implemented. Games provide an alternative, at a lower level,
of modeling reactive modules and their specifications. It will be interesting to compare such
specifications with temporal-logic specifications.
Another tool called Bu¨chi Store [38] that we have been developing is also useful for obtaining
small automata from temporal formulae.
9 Concluding Remarks and Self-evaluation (¡WÝ)
Rather than devising a new (and syntactically richer) specification language as planned in the
original proposal, we decided to work directly with the logical language, namely iQPTL. This
allows us to focus on the fundamental challenges, freeing from the concern of pragmatic issues.
This also allows us to immediately leverage the GOAL tool which includes many useful functions
for manipulating QPTL and hence iQPTL formulae as well as their equivalent representations
in automata.
To better support modular design and reasoning, interfaces should be amenable to manip-
ulations that correspond to manipulations at the implementation/module level. We have seen
that two interfaces may be conjoined to become a new interface that specifies the parallel com-
position of two modules that implement the two interfaces. We will continue to investigate the
principles and rules that govern these manipulations and their correspondence at the interface
and the module levels.
An interface may also be seen as specifying a set of its possible implementations and hence
be treated as a type, of which a correct implementation is an inhabitant. Our view is therefore
related to the constructive type theory. However, the treatment of temporal behaviors as a
type does not seem to have been well explored and poses quite a challenge. We will also try to
explore this direction in the future.
Modular specification, verification, and synthesis of concurrent reactive systems have been
studied for about three decades, yet the subjects remain current. New languages, methods,
or simply new perspectives are constantly being proposed. Through this research, we hope to
have contributed to a better understanding of these subjects, with the eventual goal of making
modular reasoning a routine task. While recently many have seen modular reasoning as a
solution to alleviating the state-space explosion problem [13], we have conducted this research
more from the software methodological point of view, seeing modularity as a necessity in the
design of large software systems.
References
[1] M. Abadi and L. Lamport. Composing specifications. ACM Transactions on Programming
Languages and Systems, 15(1):73–132, January 1993.
[2] M. Abadi and L. Lamport. Conjoining specifications. ACM Transactions on Programming
Languages and Systems, 17(3):507–534, May 1995.
[3] M. Abadi, L. Lamport, and P. Wolper. Realizable and unrealizable specifications of reactive
systems. In Proceedings of the 16th International Colloquium on Automata, Languages, and
Programming (ICALP), LNCS 372, pages 1–17, 1989.
14
[19] B. Jonsson and Y.-K. Tsay. Assumption/guarantee specifications in linear-time temporal
logic. Theoretical Computer Science, 167:47–72, October 1996. An extended abstract
appeared earlier in TAPSOFT ’95, LNCS 915.
[20] Y. Kesten and A. Pnueli. Complete proof system for QPTL. Journal of Logic and Com-
putation, 12(5):701–745, 2002.
[21] O. Kupferman and M. Y. Vardi. Synthesizing distributed systems. In Proceedings of the
16th Annual IEEE Symposium on Logic in Computer Science (LICS), pages 389–398, 2001.
[22] L. Lamport. Specifying concurrent program modules. ACM Transactions on Programming
Languages and Systems, 5(2):190–222, 1983.
[23] N. A. Lynch. Distributed Algorithms. Morgan Kaufmann, 1996.
[24] P. Madhusudan and P.S. Thiagarajan. Distributed controller synthesis for local specifica-
tions. In Proceedings of the 28th International Colloqium on Automata, Languages, and
Programming (ICALP), LNCS 2076, pages 396–407, 2001.
[25] P. Maier. Intuitionistic LTL and a new characterization of safety and liveness. In Pro-
ceedings of the 13th Annual Conference of the European Association for Computer Science
Logic (CSL), LNCS 3210, pages 295–309. Springer, September 2004.
[26] Z. Manna and A. Pnueli. Temporal Verification of Reactive Systems: Safety. Springer-
Verlag, 1995.
[27] J. Misra and K. M. Chandy. Proofs of networks of processes. IEEE Transactions on
Software Engineering, 7(4):417–426, July 1981.
[28] A. Pnueli. In transition from global to modular temporal reasoning about programs. In
K.R. Apt, editor, Logics and Models of Concurrent Systems, pages 123–144. Springer, 1985.
[29] A. Pnueli and R. Rosner. On the synthesis of a reactive module. In Proceedings of the 16th
ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, pages
179–190, 1989.
[30] A. Pnueli and R. Rosner. On the synthesis of an asynchronous reactive module. In Pro-
ceedings of the 16th International Colloqium on Automata, Languages, and Programming
(ICALP), LNCS 372, pages 652–671, 1989.
[31] A. Pnueli and R. Rosner. Distributed reactive systems are hard to synthesize. In Proceedings
of the 31st Annual IEEE Symposium on Foundations of Computer Science (FOCS ’90),
pages 746–757, 1990.
[32] S. Schewe and B. Finkbeiner. Distributed synthesis for alternating-time logics. In Pro-
ceedings of the 5th International Symposium on Automated Technology for Verification and
Analysis (ATVA), LNCS 4762, pages 268–283, 2007.
[33] A. P. Sistla. Theoretical Issues in the Design and Verification of Distributed Systems. PhD
thesis, Harvard, 1983.
[34] A. P. Sistla, M. Y. Vardi, and P. Wolper. The complementation problem for Bu¨chi automata
with applications to temporal logic. TCS, 49:217–237, 1987.
16
Conference Trip Report
17th International Conference on Tools and
Algorithms for the Construction and Analysis of
Systems (TACAS)
Part of the 14th European Joint Conferences on
Theory and Practice of Software (ETAPS)
Saarbru¨cken, Germany, March 26 – April 3, 2011
(NSC97-2221-E-002-074-MY3 .»j.ºÈTÿ ×)
Yih-Kuen Tsay
|Ç
Department of Information Management
National Taiwan University
1 Purposes
The purposes of this trip are:
• to attend the 17th International Conference on Tools and Algorithms for the Con-
struction and Analysis of Systems (TACAS 2011, March 28 – 31, 2011), which is
part of the 14th European Joint Conferences on Theory and Practice of Software
(ETAPS 2011, March 26 – April 3, 2011),
• to present a paper in TACAS 2011, and
• to attend also two satellite workshops of ETAPS 2011.
– International Workshop on Interactions, Games and Protocols (iWIGP2011)
– Synthesis, Verification, and Analysis of Rich Models (SVARM 2011)
1
Bu¨chi Store: An Open Repository of Bu¨chi Automata
Yih-Kuen Tsay, Ming-Hsien Tsai, Jinn-Shu Chang, and Yi-Wen Chang
The paper introduces the Bu¨chi Store, an open repository of Bu¨chi automata for model-
checking practice, research, and education. The repository contains Bu¨chi automata and
their complements for common specification patterns and numerous temporal formulae.
These automata are made as small as possible by various construction techniques, in
view that smaller automata are easier to understand and often help in speeding up the
model-checking process. The repository is open, allowing the user to add new automata
or smaller ones that are equivalent to some existing automaton. Such a collection of Bu¨chi
automata is also useful as a benchmark for evaluating complementation or translation
algorithms and as examples for studying Bu¨chi automata and temporal logic.
I gave the oral presentation, which I believe to be well received. One attendee asked
if we could expand the repository to include other types of automata, in particular de-
terministic parity automata which are useful for experimenting with program synthesis
algorithms. Another asked if PSL could be supported as a temporal logic language; PSL
stands for Property Specification Language, which is an industrial standard for specifying
temporal properties of circuit designs. We have been working on the first extension and
contemplating on the second. A third attendee asked about the support of programmable
interfaces, which were already there with the Bu¨chi Store.
3 Miscellaneous
The conference venue, University of Saarland, has very good conference facilities, with
a large auditorium and several medium-sized lecture rooms closely situated in a group
of buildings. The Max Planck Institute (MPI) for Informatics and MPI for Software
Systems were right next door.
As usual, I met a few old friends, saw many familiar faces, and got to talk to a few people
whom I wanted to know. I was particularly happy that my former student Yu-Fang Chen
and my co-author of several papers Bow-Yaw Wang from Academia Sinica also attended
the conference. Together with my co-author and student Ming-Hsien Tsai and myself,
we were four people. This was the third time (after 2008 and 2009) that the four of us
attended TACAS/ETAPS together. Farn Wang from NTU EE was also there this time.
I had a good chance to talk to Andreas Podelski, one of the two TACAS invited speakers.
I was intrigued by his work on proving program termination with transition invariants.
In the course of discussion, I accidentally helped him catch an error in the paper for his
talk. I also talked to Gerald Holzmann, the other TACAS invited speaker. He told me
about an interesting case of the Peterson’s mutual exclusion algorithm being incorrect
when executed in a different memory model. He said very nice words about our Bu¨chi
Store.
I met Parosh Abdulla, my former colleague and co-author at Uppsala University, for the
fourth time in five years. (I had talked about him in my trip reports for TACAS/ETAPS
2007, 2008, and 2009.) He mentioned a plan of holding a competition on infinite games
solving, which I think would be very interesting to many researchers.
3
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/31
國科會補助計畫
計畫名稱: 子計畫三:以建構式時態介面為基礎之模組化規格、驗證與合成
計畫主持人: 蔡益坤
計畫編號: 97-2221-E-002-074-MY3 學門領域: 計算機理論與演算法
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
與美國 Rice University 教授也是 CACM Editor-in-Chief 的 Moshe Vardi 合作
發表研討會論文一篇。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
