一、前言 
個人隱私保護已成為資訊社會最大的挑戰之一。如何能夠在保障個
人隱私之前提下，讓資料能夠分享，以期產生最大的效用是目前研究之
重點。本計畫希望應用資訊理論來探討多方私密計算在隱私保護領域之
應用。並探討這樣得作法在實務上是否可行。 
 
二、成果 
在韓國舉辦的 The 2nd International Conference on Information 
Security and Assurance ISA 2008, April 24-26, 2008, Hanwha Resort 
Haeundae, Busan, Korea，發表論文 Towards Empirical Aspects of Secure 
Scalar Product。 
在杭州舉辦的 The 2008 IEEE International Conference on Granular 
Computing GrC 2008, Aug 26-28, 2008, Hangzhou, China 發 表 
Privacy-Perserving Colloborative Recommendation Systems Based on the 
Scalar Product.這兩篇論文都是探討在實務上利用以 scalar product 為基礎
的多方私密計算協定在實作上的複雜度。 
此外，在香港舉辦的 International Conference of Machine Learning and 
Cybernetics 2007 方表的兩篇論文 
1. Information Theoretically secure number product protocol. 
2. An Aspect-Oriented Approach to Privacy-Aware Access Control 
已經列為去年的研究成果，但因為開會時間為今年計畫之時程內，
因此使用今年度之出國費用，在此也一併提出說明。 
 
 
 
 
 
 
 
 
 
 
 
act execution time for high-dimensional inputs? How long
does it take to compute a 100-, 1000-, or 10000-dimensional
scalar product? (2) If the approach is computationally se-
cure, what is its throughput under typical security parame-
ters? (3) If the approach is theoretically secure, there must
be a third party. What is the workload of the third party?
(4) Last but not least, what is the performance of a specific
approach compared with that of Fairplay?
In this work, we implement four secure scalar-product
protocols, including the invertible-matrix, the composite-
residuosity, the polynomial-sharing, and the commodity-
based approaches. We also give specific evaluation to
address the above issues. Based on our results, proto-
col designers can estimate the performance of their scalar-
product-based designs more precisely.
This paper is organized as follows: Section 2 discusses
the related works. Section 3 briefly introduces the men-
tioned approaches realizing secure scalar-product computa-
tion. Section 4 then gives implementation remark and an-
alyzes the resources needed for each approach, including
computation cost and random number consumptions. After
that, Section 5 shows the specific data about the total exe-
cution time and CPU time of various approaches. Finally,
Section 6 concludes the paper and lays out future work.
2 Related Works
After Yao’s [20] and Goldreich et al.’s [12] proposals, re-
searchers have been looking for new complete functions and
the foundations of the completeness. Kilian shows that the
oblivious transfer is complete [13], and so are the functions
with imbedded OR [14]. Furthermore, it is believed that the
integer-based scalar product is more practical to real appli-
cations than the binary-based oblivious transfer [6].
There are many efforts to build various applications on
secure scalar products. Atallah et al. reduce geometry prob-
lems to scalar products [1]. Du et al. construct secure
protocols for statistical analysis [8] and scientific compu-
tations [7]. More recently, Bunn et al. [4] give a secure
protocol for k-means clustering, which is based on scalar
products under the composite-residuosity approach.
There is also plenty of theoretical studies on scalar prod-
ucts. Based on information theory, Chiang et al. [5] propose
a privacy measurement, by which they analyze various ap-
proaches. They prove that the invertible-matrix approach
discloses at least half the information and the commodity-
based approach is perfectly secure. Wang et al. [19] prove
that there is no information-theoretically secure two-party
protocol for the scalar product. Moreover, the closure prop-
erty of the commodity-based approach is verified according
to the security definition based on information theory [17].
More specifically, it is proven that a protocol sequentially
composed of the commodity-based approach is also secure.
3 Various Proposals for Scalar-product
We begin the section with the formulation of the scalar
product and the notations used hereafter. Alice has input
XA = [xA1 , . . . , xAn ] and Bob has XB = [xB1 , . . . , xBn ].
Each element of the private input vectors is in the domain
D. They want to collaboratively compute the scalar product
of their private vectors and then share the result. Eventually,
Alice computes yA and Bob computes yB such that
yA + yB = XA ∗XTB =
∑n
i=1xAi · xBi
where yA, yB ∈ D, and + and · are defined in accordance
with D. Our formulation follows Goldreich et al.’s princi-
ple [11] that the intermediate results during a protocol ex-
ecution are always shared. In a protocol pi composed of
scalar products, outputs of the current scalar product can be
inputs to the next scalar product, which is actually the inter-
mediate results of pi. Therefore, in order to imitate Goldre-
ich et al’s principle we formulate the outputs to be shared
among participants.
Next, we briefly introduce aforementioned approaches.
3.1 Invertible-matrix Approach
1. Alice and Bob agree on an invertible n × n matrix M
and a constant k, where k is less than n.
2. Alice computes X ′A = XA ∗M−1 = [x′A1 , . . . , x′An ]
and sends [x′A1 , . . . , x
′
Ak
] to Bob.
3. Bob computes X ′B = M ∗XB = [x′B1 , . . . , x′Bn ] and
sends [x′Bk+1 , . . . , x
′
Bn
] to Alice.
4. Alice computes yA =
∑n
i=k+1 xAi ·x′Bi as her output.
5. Bob computes yB =
∑k
i=1 x
′
Ai
· xBi as his output.
3.2 Commodity-based Approach
1. Alice and Bob agree on a semi-trusted commodity
server Carol, who selects two 1 × n random vectors
RA and RB uniformly from Dn, and selects a random
number rA uniformly from D.
2. After computing rB = RA ∗ RTB − rA, Carol sends
(RA, rA) and (RB , rB) to Alice and Bob respectively.
3. Alice computes X ′A = XA +RA and sends it to Bob.
4. Bob computes X ′B = XB +RB and sends it to Alice.
5. Bob selects a random number yB uniformly from D.
After that, he computes t = X ′A ∗XTB + rB − yB and
sends t to Alice.
6. Alice computes yA = t−RA ∗X ′TB + rA.
When M is an invertible Vandermonde matrix, there is a
O(n2) algorithm [18] computingM−1 = U−1∗L−1. More
specifically, if M ’s elements vij = a
j−1
i , ∀i, j = 1, . . . , n,
the elements lij of L−1 are given by the relations
lij =

0 i < j
1 i = j = 1∏i
k=1,k 6=j(aj − ak)−1 otherwise,
and the elements uij of U−1 are given by
uij =
 0 j = 11 i = j
ui−1,j−1 − aj−1ui,j−1 otherwise.
After combining the above formulae with Horner’s rule of
polynomial evaluation, we have a solution of O(n2) com-
putation complexity and O(n) space complexity. Without
increasing computation complexity, the invertible Vander-
monde matrix reduces the space complexity.
4.2 Commodity-based Approach
A commodity server is introduced in the commodity-
based scalar-product protocol. The commodity server is to
the commodity-based scalar product as the certificate au-
thority is to secure communication. The certificate authority
does not participate in secure communication, but its issued
digital certificate binds the public key and the key owner.
Similarly, the commodity server does not participate in Al-
ice and Bob’s communication, and neither does it receive
any data from both parties. The commodity server merely
delivers coordinated random numbers.
However, in order to relief loads from unstable network,
we recommend transferring the seed of pseudorandom num-
ber generator rather than the random numbers themselves.
Although the computation loads to both Alice and Bob in-
crease, the advantage is the constant communication be-
tween the commodity server and both of the other parties.
Thus, including the random numbers rA and yB , pseudoran-
dom number generator is called 4n+ 2 = O(n) times, and
the computation and communication complexity is O(n).
4.3 Polynomial-sharing Approach
The polynomial-sharing approach proposed by Ben-Or
et al. [3] includes addition, constant multiplication, and
multiplication in integer level. Because the secret is dis-
guised as the constant coefficient of a polynomial, to re-
duce the polynomial degree is important before the degree
is over d t2e, where t is the number of participants. The
degree reduction not only is the most expensive operation
but also requires synchronization. Fortunately, in our case
the two-party scalar product needs no degree reduction.
Without synchronization, soon after Alice and Bob share
their private inputs, all three parties can locally compute
their share of the result. Furthermore, we recommend to
communicate in a batch in order to reduce socket connec-
tions. More specifically, Alice can send all Bob’s shares of
xAi , i = 1, . . . , n as a whole packet rather than one share
per packet. The random number consumption, computation,
and communication is of complexity O(n) in this approach.
4.4 Composite-residuosity Approach
The security of composite-residuosity approach is based
on the composite residuosity class problem [16], which is
proven to be reducible to the RSA and the factoring large
number problems. It is commonly believed that the large
number should be at least 1024-bit long to be computation-
ally intractable. Therefore, the bit length of the composite
m should be more than 1024.
Let s = (1 − 1p )(1 − 1q ), then expectation number for
Alice to randomly select ri ∈ Z∗m2 is E(R), where
E(R) =
∑∞
i=0 s(1− s)i · (i+ 1) (1)
(1− s)E(R) =∑∞i=0 s(1− s)i · i (2)
After (1)-(2), we have
sE(R) =
∑∞
i=0 s(1− s)i
=⇒ E(R) =∑∞i=0(1− s)i = 1s ≈ 1
because p and q are large primes (≈ 2512) so that s ≈ 1.
Therefore, Alice calls the random number generator n times
expectedly for r1, . . . , rn; and Bob calls once for yB . The
computation and communication is also in the order of
O(n) in this approach.
4.5 Fairplay
Fairplay system includes a compiler that automatically
converts an SFDL2program into a secure, constant-round,
two-party protocol proposed by Yao [20]. More specifi-
cally, Bob generates a garbled circuit, and then Alice eval-
uates it according to Yao’s circuit evaluation protocol, the
security of which depends on the underlying cryptosystem.
In the case of Fairplay, SHA-1 hash function is adopted to
encryption and decryption. However, because of the imple-
mentation limit, Fairplay cannot generate a garbled circuit
that correctly handles integers of more than 32 bits, and nei-
ther can it compile a scalar-product program with input vec-
tors of more than 70 dimensions on the Java Viral Machine
of 1GB heap size. An “OutOfMemoryException” will be
thrown.
2Secure Function Definition Language is a programming language de-
fined in Fairplay system. The language is for end users to program their
applications with high-level descriptions.
100 102 104 106
0
20
40
60
80
100
120
Vector Dimension
To
ta
l E
xe
cu
tio
n 
Ti
m
e 
(se
c.)
 
 
Fairplay Res. Inv. Poly. Comm.
Figure 3. Comparison of the execution time.
100 102 104 106
0
20
40
60
80
100
120
Vector Dimension
To
ta
l C
PU
 T
im
e 
(se
c.)
 
 
Res. Inv. Poly. Comm.
Figure 4. Comparison of the CPU time.
former has throughput at least three orders of magnitude
higher than the latter’s.
It is evident that scalar product outperforms logic gates in
two-party computation. However, the comparison between
the number-product4and Goldreich et al.’s approach in mul-
tiparty computation is unknown. Moreover, we are also in-
terested in the performance of these secure scalar-product
protocols when the number of participants increases, and
more implementation remark will be explored in the future.
References
[1] M. J. Atallah and W. Du. Secure multi-party computational
geometry. LNCS, 2125:165–179, 2000.
[2] D. Beaver. Commodity-based cryptography (extended ab-
stract). In STOC ’97, pages 446–455, New York, NY, USA,
1997. ACM Press.
[3] M. Ben-Or, S. Goldwasser, and A. Wigderson. Com-
pleteness theorems for non-cryptographic fault-tolerant dis-
tributed computation. In STOC ’88, pages 1–10, New York,
NY, USA, 1988. ACM Press.
[4] P. Bunn and R. Ostrovsky. Secure two-party k-means clus-
tering. In CCS ’07: Proceedings of the 14th ACM conference
on Computer and communications security, pages 486–497,
New York, NY, USA, 2007. ACM.
[5] Y.-T. Chiang, D.-W. Wang, C.-J. Liau, and T.-S. Hsu. Se-
crecy of two-party secure computation. Lecture Notes in
Computer Science, 3654:114–123, 2005.
[6] W. Du. A Study of Several Specific Secure Two-party Com-
putation Problems. PhD thesis, Purdue Univ., August 2001.
[7] W. Du and M. J. Atallah. Privacy-preserving cooperative sci-
entific computations. In CSFW ’01, page 273, Washington,
DC, USA, 2001. IEEE Computer Society.
[8] W. Du and M. J. Atallah. Privacy-preserving cooperative
statistical analysis. In ACSAC ’01, pages 102–110, Wash-
ington, DC, USA, 2001. IEEE Comp. Soci.
4The number-product is an extension of the two-party scalar product in
multiparty computation. [17]
[9] W. Du and Z. Zhan. A practical approach to solve secure
multi-party computation problems. In NSPW ’02, pages
127–135, New York, NY, USA, 2002. ACM Press.
[10] B. Goethals, S. Laur, H. Lipmaa, and T. Mielikainen. On pri-
vate scalar product computation for privacy-preserving data
mining. Information Security and Cryptology V ICISC 2004,
pages 104–120, 2004.
[11] O. Goldreich. Foundations of Cryptography, Volumne II Ba-
sic Applications. Cambridge University Press, 2004.
[12] O. Goldreich, S. Micali, and A. Wigderson. How to play any
mental game. In STOC ’87, pages 218–229, New York, NY,
USA, 1987. ACM Press.
[13] J. Kilian. Founding crytpography on oblivious transfer. In
STOC ’88, pages 20–31, New York, NY, USA, 1988. ACM.
[14] J. Kilian. A general completeness theorem for two party
games. In STOC ’91, pages 553–560, New York, NY, USA,
1991. ACM.
[15] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay — a
secure two-party computation system. In Proceedings of the
13th Symposium on Security, Usenix, pages 287–302, 2004.
[16] P. Paillier. Public-key cryptosystems based on compos-
ite degree residuosity classes. Advances in Cryptology–
EUROCRYPT’99, 1999.
[17] C.-H. Shen, J. Zhan, D.-W. Wang, T.-S. Hsu, and C.-J. Liau.
Information-theoretically secure number-product protocol.
2007 International Conference on Machine Learning and
Cybernetics, 5:3006–3011, 19-22 Aug. 2007.
[18] L. R. Turner. Inverse of the vandermonde matrix with ap-
plications. Technical Report NASA-TN-D-3547, Glenn Re-
search Center, NASA, Aug 1966.
[19] D.-W. Wang, C.-J. Liau, Y.-T. Chiang, and T.-S. Hsu. Infor-
mation theoretical analysis of two-party secret computation.
Data and Applications Security XX, Lecture Notes in Com-
puter Science, 4127:310–317, 2006.
[20] A. C. Yao. Protocols for secure computation. In Proced-
dings of the 23rd Annual IEEE Symposium on Foundations
of Computer Science, pages 160–164, November 1982.
taxonomy of recommender systems through analyzing
famous e-commerce websites including Amazon.com,
CDNOW, eBay, Levi Strauss & Co., Moviefinder.com,
and Reel.com. According to their findings, rec-
ommender systems can be categorized into non-
personalized recommendations, attribute-based recom-
mendations, item-to-item correlation, and people-to-
people correlation. Each of these taxonomies has dif-
ferent degrees of automation and persistence. For pri-
vacy issues, Canny [3] has proposed some schemes
for privacy-preserving collaborative filtering. In his
schemes, there is a community of users who can com-
pute the aggregation of their private data without dis-
closing it. Another approach is the randomized pertur-
bation approach proposed by Polat and Du [8]. They
deployed a centralized server to store the perturbed nu-
meric ratings, and then used these disguised ratings to
provide predictions to users. Berkovsky et al. [1] have
proposed an obfuscation scheme about accuracy and
privacy to decentralize the rating profiles among mul-
tiple repositories. Thus, they can have more users to
improve accuracy and to mitigate privacy issues. How-
ever, their approach cannot achieve 100% accuracy un-
less all the private data is disclosed. Hsieh et al. [5]
have proposed a scheme based on homomorphic en-
cryption that provides 100% accuracy. In this paper,
we will present a more efficient privacy-preserving ap-
proach than the existing encryption approaches.
In section 2, we will introduce a recommender sys-
tem algorithm. In section 3, we will define our prob-
lem. In section 4, we will describe solutions to privacy-
preserving collaborative recommender systems. In sec-
tion 5, we will present the experimental results. We
will further discuss the experimental results in section
6.
2 Recommender Systems
Schafer et al. [10] define the recommender system
as a system that uses the opinions of members of a
community to help individuals in that community find
information or products most likely to be interesting
to them or relevant to their needs. There are two ba-
sic entities concerned in a recommender system. The
user (also referred to as customer) is a person who
uses the recommender system to provide their opinion
and receive recommendation about items. The item
(also referred to as product) is being rated by users.
The inputs of a recommender system are usually arith-
metic rating values, which express the users’ opinion
of items. Ratings are normally provided by the user
and follow a specified numerical scale (example: 1-bad
to 5-excellent). The outputs of a recommender system
can be either predictions or recommendations. The
following are the three main processes of recommender
systems.
2.1 Representation
In the original representation, the input data is de-
fined as a collection of numerical ratings of m users on
n items, expressed by them∗n user-item matrix R. We
call this user-item matrix of the input data set, original
representation. As mentioned earlier, users are not re-
quired to provide their opinion on all items. As a result,
the user-item matrix is usually sparse, including nu-
merous no rating values, making it harder for filtering
algorithms to generate satisfactory results. Thus, some
techniques, whose purposes are to reduce the sparsity
of the initial user-item matrix, have been proposed in
order to improve the results of the recommendation
process.
2.2 Neighborhood Formation
The core step of the recommendation process is de-
termining the similarity between users in the user-item
matrix R. Users similar to the active user Ua will form
a proximity-based neighborhood with Ua. The active
user’s neighborhood should then be used in the fol-
lowing step of the recommendation process in order to
estimate their possible preferences. Neighborhood for-
mation has been implemented by calculating the simi-
larity between all the users in the user-item matrix, R,
with the help of proximity metrics.
The proximity between two users is usually mea-
sured using correlation or cosine measures.
• Pearson Correlation Similarity
To find the proximity between users Ui and Uk,
we can use the Pearson correlation metric.
simik = corrik =
l∑
j=1
(rij − ri)(rkj − rk)√
l∑
j=1
(rij − ri)2
l∑
j=1
(rkj − rk)2
It is important to note that the summations of j
are calculated over L items for which both users ui
and uk have expressed their opinions. Obviously,
L ≤ n, where n represents the number of total
items in the user-item matrix R.
• Cosine Similarity
2
Authorized licensed use limited to: ACADEMIA SINICA COMPUTING CENTRE. Downloaded on December 4, 2008 at 23:29 from IEEE Xplore.  Restrictions apply.
tions. The solutions are generic and elegant, but their
prohibitive cost in protecting privacy makes them un-
suitable for large-scale applications. Therefore, practi-
cal solutions need to be developed. We will introduce
the secure two-party product protocol proposed in [14],
which has been proven information-theoretically secure
[11].
Protocol pi.
f2(xa, xb) 7→ (ya, yb), where xa · xb = ya + yb.
1. The commodity server generates random vectors
Ra, Rb, and random number ra, and lets rb =
Ra · Rb − ra. It then sends (Ra, ra) to Ailce and
(Rb, rb) to Bob.
2. Alice sends −→Xa′ = −→Xa +−→Ra to Bob.
3. Bob sends −→Xb′ = −→Xb +−→Rb to Alice.
4. Bob computes t = −→Xa′ · −→Xb + rb − yb and sends it
to Bob, where yb is a randomly generated number.
5. Alice computes ya = t−−→Xb′ · −→Ra + ra.
Theorem 1 (Secure Two-party Product Protocol)
pi is an information-theoretically secure protocol that
implements function f2 in the semi-honest adversary
model with private channels.
Proof 1 Please refer to [11] for the detailed proof.
It has been shown that the commodity-based scalar
product protocol is a very efficient approach compared
to existing benchmarks [12]. The scalar product ap-
proach is based on the above scalar product protocol.
This approach needs a neutral commodity server to
generate random numbers ra,
−→
Ra for A and rb,
−→
Rb for B.
A and B exchange −→Xa′ = −→Xa+−→Ra and −→Xb′ = −→Xb+−→Rb.
B then computes t = −→Xa′ · −→Xb + rb − yb and sends it
to A, where yb is a randomly generated number. Fi-
nally, A computes ya = t − −→Xb′ · −→Ra + ra. The result
of the scalar product equals the sum of ya and yb. The
summation and multiplication computation in the nu-
merator of the Pearson correlation formula is a scalar
product computation. It is straightforward to adapt
the commodity-based scalar product approach, where
the plain texts from two parties can be preserved and
the computation of similarities can be correctly com-
puted.
5 Performance Evaluation
In this section, we will implement both the homo-
morphic encryption approach and the scalar product
approach. Based on our experiments, the ElGamal al-
gorithm is about five times faster in a single operation
than the Paillier algorithm. Thus, we will only compare
ElGamal approach with both the original and revised
commodity based scalar product approaches.
We choose the same database as Hsieh et
al. [5], which is the ”Jester Joke Recom-
mender System”, released by Ken Goldberg
from the University of California at Berkley
(http://shadow.ieor.berkeley.edu/humor/). It has
4.1 million continuous ratings (-10.00 to +10.00) of
100 jokes from 73,421 users, collected between April
1999 and May 2003. We take the densest sub-dataset
of ratings from 23,500 users who have rated 36 or
more jokes, which is a matrix with dimensions of
23,500 * 101. For the representation process of
recommendation generation, we add the default value
0 for the items not rated. The first column of every
row stores how many items are rated by the user,
which is not necessary for computing the Pearson
correlation coefficient. Therefore, we simply ignore
the first column of the database.
Consider that Alice has one user rating (−→A ) while
Bob has 23499 (−→B1 to −−−−→B23499). Without disclosing
their original data, they want to know the Pearson
correlation coefficient simAB1 , simAB2 , ..., simABn
(1 ≤ n ≤ 23499). We implemented these approaches
with Ruby 1.8.6. Alice’s code runs on a server with
an AMD Opteron 2.8 GHz processor, and 4GB DDR2
RAM, while Bob’s code runs on a server with an Intel
Xeon 3.0 processor and 4GB DDR2 RAM.
To minimize the probabilistic variation, our exper-
imental results are the average of 100 effective execu-
tions. The experiments focus on different numbers of
user data for secure two party computation: execution
time, transportation time, and CPU time. The amount
of CPU time is the aggregation result by adding Alice
and Bob’s CPU time. The transportation time is equal
to the difference of the execution time and the CPU
time.
Since the scalar product based approach is integer-
based, the inputs must be positive integers. Let
X,min, and dig represent the original data, the effec-
tive minimum rating, and the effective decimal digits
of the database, respectively. Let
Y =
{
(X −min)× 10dig, if min < 0
X × 10dig, otherwise
be our integer input data. It is trivial to prove that,
after replacing X with Y , they will still have the same
Pearson correlation coefficient. The following section
introduces each approach we implemented and show
the experimental results.
4
Authorized licensed use limited to: ACADEMIA SINICA COMPUTING CENTRE. Downloaded on December 4, 2008 at 23:29 from IEEE Xplore.  Restrictions apply.
becomes too large. To show the total time cost for
a 100 dimensional scalar product, we list the exper-
imental results for each approach in the following table.
Approach ElGamal Comm. Revised Comm.
Time(sec) 0.10301 0.00515 0.00178
7 Conclusion and Future Works
Because of the development of e-commerce, recom-
mender systems have become more and more popu-
lar. Customers may not trust imprecise recommenda-
tions from a recommender system that has a limited
database. It is then desirable for e-commerce entities
with limited databases to merge their recommender
system databases to enhance the reliability of recom-
mendations for customers and to maximize the pre-
cision of targeted marketing while preserving the pri-
vacy of customer preferences. With the algorithms in-
troduced in this paper, e-commerce entities can merge
their recommender system databases without disclos-
ing customers’ private data. In future works, we will
design and implement a prototype of this privacy-
preserving collaborative recommender system with the
proposed approaches.
References
[1] S. Berkovsky, Y. Eytani, T. Kuflik, and F. Ricci.
Enhancing privacy and preserving accuracy of a
distributed collaborative filtering. In the Pro-
ceedings of the 2007 ACM conference on Recom-
mender systems, pages 9–16, 2007.
[2] J. Breese, D. Heckerman, and C. Kadie. Empiri-
cal analysis of predictive algorithms for collabora-
tive filtering. In the Fourteenth Conference on Un-
certainty in Artificial Intelligence (UAI-98), pages
43–52, 1998.
[3] J. Canny. Collaborative filtering with privacy via
factor analysis. In the Proceedings of the 25th an-
nual international ACM SIGIR conference on Re-
search and development in information retrieval,
pages 238–245, 2002.
[4] T. ElGamal. A public-key cryptosystem and a sig-
nature scheme based on discrete logarithms. IEEE
Transactions on Information Theory, Vol. IT-31,
No.4, 1985, pp469472, 1985.
[5] C. Hsieh, J. Zhan, D. Zeng, and F. Wang. Pre-
serving privacy in joining recommender systems.
In International Conference on Information Se-
curity and Assurance (ISA 2008), pages 561–566,
2008.
[6] I. Im and A. Hars. Does a one-size recommen-
dation system fit all? the effectiveness of collab-
orative filtering based recommendation systems
across different domains and search modes. ACM
Transaction of Information Systems, 26(1):4,
2007.
[7] P. Paillier. Public-key cryptosystems based on
composite degree residuosity classes. In Advances
in Cryptography - EUROCRYPT ’99, pp 223-238,
Prague, Czech Republic, 1999.
[8] H. Polat andW. Du. Privacy-preserving collabora-
tive filtering using randomized perturbation tech-
niques. In the Third IEEE International Confer-
ence on Data Mining, 2003.
[9] P. Resnick and H. Varian. Recommender systems.
Commun. ACM, 40(3):56–58, 1997.
[10] J. Schafer, J. Konstan, and J. Riedi. Recom-
mender systems in e-commerce. In the Proceed-
ings of the 1st ACM conference on Electronic com-
merce, pages 158–166, 1999.
[11] C. Shen, J. Zhan, D. Wang, T. Hsu, and C. Liau.
Information theoretically secure number product
protocol. In International Conference on Ma-
chine Learning and Cybernetics, August 19-22,
HongKong, 2007, 2007.
[12] I. Wang, C. Shen, J. Zhan, T. Hsu, C. Liau, and
D. Wang. Towards empirical aspects of secure
scalar product. IEEE Transaction of Systems,
Man, and Cybernetics, Part C, to appear, 2008.
[13] A. C. Yao. Protocols for secure computations. In
Proceedings of the 23rd Annual IEEE Symposium
on Foundations of Computer Science, 1982.
[14] Z. Zhan and L. Chang. Privacy-preserving collab-
orative data mining. In IEEE Intertional Work-
shop of Foundations and New Directions in Data
Mining, Melbourne, Florida, USA November 19 -
22, 2003.
6
Authorized licensed use limited to: ACADEMIA SINICA COMPUTING CENTRE. Downloaded on December 4, 2008 at 23:29 from IEEE Xplore.  Restrictions apply.
