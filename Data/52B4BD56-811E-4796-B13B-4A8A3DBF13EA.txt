國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。 
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
□ 達成目標 
 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：□已發表 ■未發表之文稿 □撰寫中 □無 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
In this project, we proposed a self-stabilizing 2-center-finding algorithm under the non-fair 
central daemon model, gave a rigorous correctness proof for the self-stabilization property and 
obtained the worst-case stabilization time of the proposed algorithm. 
There exists only one self-stabilizing algorithm for finding a 2-center of a tree (Huang TC, Lin 
J-C, Chen H-J: A self-stabilizing algorithm which finds a 2-center of a tree. Comput. Math. 
Appl. 40(4-5), 607-624, 2000). This algorithm works on a system under the fair central daemon 
model. Therefore the proposed algorithm in this project is the first self-stabilizing algorithm for 
finding a 2-center of a tree under the non-fair central daemon model. 
As an immediate consequence of the definitions of the fair central daemon model and the 
non-fair central daemon model, if an algorithm is self-stabilizing under the non-fair central 
daemon model, then it is also self-stabilizing under the fair central daemon model. The 
converse, however, is not true. The main weakness of the fair central daemon model has been 
demonstrated by a theorem in Huang et al. (Huang TC, Lin J-C, Chen C-Y, Wang C-P: The 
worst-case stabilization time of a self-stabilizing algorithm under the weakly fair daemon model. 
Submitted): for any self-stabilizing algorithm under the fair central daemon model (for a 
particular problem) which is not self-stabilizing under the non-fair central daemon model, the 
worst-case stabilization time, measured in steps, is infinity. So, for any problem, the existence of 
self-stabilizing algorithms for the fair central daemon model only is unsatisfactory; it is of 
significance to pursue self-stabilizing algorithms for the non-fair central daemon model 
 
(a) The algorithm running on each processor consists of one or more rules. Each rule is of the
form
condition part → action part.
The condition part (or guard) is a Boolean function over the states of the processor and its
neighbors; the action part is an assignment of values to some of the processor’s shared variables.
If the condition part of a rule in a processor is evaluated as true, we say that the processor is
privileged to execute the action part (or to make a move).
(b) At the initial configuration, if none of the processors is privileged, then the system is
deadlocked. Otherwise, if a privileged processor exists, the central demon in the system will
randomly select exactly one among all the privileged processors to make a move, in a single
atomic step. The local state of the selected processor thus changes, which in the meantime results
in the change of the global configuration of the system. The system will then repeat the above
process to change global configurations as long as it does not encounter any deadlock situation.
Thus, the behavior of the system under the action of the algorithm can be described by executions.
An infinite or finite sequence of configurations Γ = (γ1, γ2, . . .) of the system is called an execution
(of the algorithm in the system) if for any i ≥ 1, γi+1 is obtained from γi after exactly one processor
in the system makes the ith move γi → γi+1, and in the case that Γ is finite, it is further required
that no node is privileged in the last configuration. Under this central demon model, Dijkstra
introduced the notion of self-stabilization of a distributed system in his classic paper [6] in 1974
(cf. also [7, 8]). Following Dijkstra’s idea, in this paper we define an algorithm to be self-stabilizing
if every execution of the algorithm leads the system to a legitimate configuration and lets it stay
in legitimate configurations thereafter.
The fair demon model (or the weakly fair demon model, as it is called in [14]) is a restricted
version of the central demon model. An execution of an algorithm under the fair demon model
is defined to be an execution of that algorithm under the central demon model in which no node
can be privileged for infinite number of times over an infinite time interval without making any
move at any point in that interval. There have been a few self-stabilizing algorithms proposed in
the past that assume the fair demon model (e.g., [2, 10, 11]). As an immediate consequence of
the definitions of the above two models, if an algorithm is self-stabilizing under the central demon
model, then it is also self-stabilizing under the fair demon model. The converse, however, is not
true as the tree layer algorithm in [2] can serve as a counterexample to disprove it.
1.2 Self-stabilizing center-finding algorithms
Self-stabilizing algorithms for finding centers of trees have been proposed and studied in the past
[1, 3, 4, 12, 13, 15, 16]. The self-stabilizing algorithm proposed in Antonoiu and Srimani [1]
can find a center of any tree. The self-stabilizing algorithm proposed in Karaata et al. [13] can
find all center(s) of any tree. The journal version of [13] was later published as Bruell et al.
[4]. Blair and Manne [3] proposed a self-stabilizing generic rooting algorithm for trees that can
instantiate a self-stabilizing center-finding algorithm for trees. Lin and Huang [15] proposed a
fault-containing version of the self-stabilizing center-finding algorithm in [4] and [13]. This fault-
containing algorithm is able to reduce the worst-case stabilization time for single-fault situations
to O(∆). The above five papers all adopt the central demon model. Assuming Dolev’s read/write
atomicity model [9], a self-stabilizing center-finding algorithm was proposed in Huang et al. [12].
2
2 The algorithm
In the rest of this paper, T = (V,E) denotes an undirected tree that is used to model a distributed
system with a tree topology. Each node i ∈ V represents a processor in the system, and each
edge {i, j} ∈ E represents the bidirectional link connecting processors i and j. For any i ∈ V ,
N(i) = {j ∈ V |{i, j} ∈ E} denotes the set of all neighbors of i. For any i, j ∈ V , d(i, j) denotes
the distance between i and j, i.e., the number of edges in the unique simple path in T that
connects i and j. If X is a subset of V and v is an element of V , then the distance between X
and v, d(X, v), is defined by d(X, v) = minx∈X d(x, v) and the eccentricity of X, e(X), is defined
by e(X) = maxv∈V d(X, v). Any subset of V consisting of k nodes will be called a k-set in T . A
k-center of T is a k-set in T with the minimum eccentricity. Thus, a center of T is just a 1-center
of T . The following two propositions concerning center(s) of T are well-known (cf. Buckley and
Harary [5]).
Proposition 1 T has a unique center or two adjacent centers.
Proposition 2 If T has a unique center, then the length of any longest simple path in T , i.e.,
the diameter of T , is even, and the center is precisely the middle node of the path. If T has two
centers, then the length of any longest simple path in T is odd, and the two centers are precisely
the two middle nodes of the path.
2.1 The center-finding algorithm in [4] and [13]
The following self-stabilizing center-finding algorithm for T was proposed in [4] and [13]. Note that
in the algorithm, h.i is a shared variable of node i whose value is a non-negative integer, deg(i)
denotes the number of node i’s neighbors in T , Nh(i) = {h.j|j ∈ N(i)} denotes the multiset
consisting of h-values of all the neighbors of i, and N−h (i) = Nh(i)− {max(Nh(i))} denotes all of
Nh(i) with one maximum h-value removed. For example, if Nh(i) = {3, 4, 4}, then N−h (i) = {3, 4}.
Algorithm 1
{For each node i}
R1 : deg(i) = 1 ∧ h.i ̸= 0→ h.i := 0
R2 : deg(i) ≥ 2 ∧ h.i ̸= 1 +maxN−h (i)→ h.i := 1 + maxN−h (i)
Legitimate configurations are defined to be all those configurations in each of which the following
condition holds:
∀i ∈ V, [(deg(i) = 1 ∧ h.i = 0) ∨ (deg(i) ≥ 2 ∧ h.i = 1 +maxN−h (i))].
One can easily see that the system is in a legitimate configuration if and only if no node in the
system is privileged. In [4] and [13], the self-stabilization property of Algorithm 1 is verified, and
it is shown in [4, Theorem 4.4] that in a legitimate configuration, a node can be identified as
a center of the tree if and only if its h-value is greater than or equal to the h-values of all its
neighbors. For our later discussion, the uniqueness of the legitimate configuration of Algorithm 1
needs to be clarified.
Lemma 1 (Uniqueness) If we regard the center (or centers, in the case of two centers) of T
as the root of the tree, then, in a legitimate configuration, the h-value of any node is exactly the
height of that node in the rooted tree T .
4
p.i := max {x ∈ N(i)|h1.x = maxNh1(i)}
R4 : [deg(i) ≤ 2 ∨ h1.i ≤ maxNh1(i)] ∧ p.i ̸= ⊥ → p.i := ⊥
R5 : Deg(i) ≤ 1 ∧ h2.i ̸= 0→ h2.i := 0
R6 : Deg(i) ≥ 2 ∧ h2.i ̸= 1 +maxN−h2(i)→ h2.i := 1 + maxN−h2(i)
The legitimate configurations are defined to be all those configurations in each of which the
following condition holds:
∀i ∈ V, {[deg(i) = 1 ∧ h1.i = 0] ∨ [deg(i) ≥ 2 ∧ h1.i = 1 +maxN−h1(i)]}∧{[deg(i) ≥ 3 ∧ h1.i > maxNh1(i) ∧ p.i = max {x ∈ N(i)|h1.x = maxNh1(i)}]∨
[(deg(i) ≤ 2 ∨ h1.i ≤ maxNh1(i)) ∧ p.i = ⊥]}∧
{[Deg(i) ≤ 1 ∧ h2.i = 0] ∨ [Deg(i) ≥ 2 ∧ h2.i = 1 +maxN−h2(i)]}.
It can be seen that the system is in a legitimate configuration if and only if no node in the
system is privileged. Hence, in view of the definitions for both self-stabilizing algorithms and
finite executions, we have the following lemma:
Lemma 6 Algorithm 2 is self-stabilizing under the central demon model if and only if every
execution of Algorithm 2 is finite.
3 Correctness proof
3.1 Finding a 2-center
In this subsection, we show that in any legitimate configuration for Algorithm 2, a 2-center of T
can be identified. For presentation’s sake, we let
P1(i) ≡ [h1.i > maxNh1(i) ∧ h2.i > maxNh2(i)],
P2(i) ≡ [h1.i > maxNh1(i) ∧ p.i = j ∧ h2.i = max(Nh2(i)− {h2.j}) ∧ i > k, where k is the unique
node in N(i)− {j} such that h2.k = h2.i],
P3(i) ≡ [h1.i = maxNh1(i)∧h2.i > max(Nh2(i)−{h2.j}), where j is the unique node in N(i) such
that h1.j = h1.i],
P4(i) ≡ [h1.i = maxNh1(i) ∧ (h2.i = max(Nh2(i) − {h2.j}), where j is the unique node in N(i)
such that h1.j = h1.i) ∧ i > k, where k is the unique node in N(i)− {j} such that h2.k = h2.i],
P5(i) ≡ [h1.i < maxNh1(i) ∧ ∀x ∈ N(i), p.x ̸= i ∧ h2.i > maxNh2(i)],
P6(i) ≡ [h1.i < maxNh1(i)∧∀x ∈ N(i), p.x ̸= i∧ h2.i = maxNh2(i)∧ i > k, where k is the unique
node in N(i) such that h2.k = h2.i],
P7(i) ≡ [h1.i < maxNh1(i) ∧ (∃!j ∈ N(i) s.t. p.j = i) ∧ h2.i > max(Nh2(i)− {h2.j})],
P8(i) ≡ [h1.i < maxNh1(i)∧ (∃!j ∈ N(i) s.t. p.j = i)∧h2.i = max(Nh2(i)−{h2.j})∧ i > k, where
k is the unique node in N(i)− {j} such that h2.k = h2.i], and
P (i) ≡ P1(i) ∨ P2(i) ∨ · · · ∨ P8(i).
Theorem 2 Suppose the diameter of the system T is large enough. In any legitimate configuration
for Algorithm 2, there are exactly two nodes in T that satisfy P (i), and these two nodes form a
2-center of T .
By ”large enough”, we actually mean ”greater than or equal to 2”. We use the former expression
because it is shorter and more descriptive. Fig. 1 illustrates this theorem. The system T in Fig.
6
cv
cv c
T1 T2
T
Figure 2: At the top is a tree T that has only one center c with deg(c) ≥ 3. The tree T is in a
legitimate configuration ω for Algorithm 2 and v = max{x ∈ N(c) | h1.x = maxNh1(c)} in ω. At
the bottom are two subtrees T1 and T2 obtained from T in an obvious way.
different objects, the subtree 〈T1, h1, p, h2〉 of T equipped with Algorithm 2, and the new system
〈T1, h〉 equipped with Algorithm 1.) Induced from the legitimate configuration ω of T , we obtain
a configuration ω1 of 〈T1, h〉 in which
i) for each i ∈ V1 − {c}, h.i in ω1 = h2.i in ω.
ii) h.c in ω1 = 0.
To avoid any confusion with the notations N(i), deg(i), Nh2(i) and N−h2(i) previously defined for
T , we let, for any i ∈ V1,
N(i, T1) = {j ∈ V1|{i, j} ∈ E1} denote the set of all neighbors of i in T1,
deg(i, T1) = |N(i, T1)| denote the number of all neighbors of i in T1,
Nh(i, T1) = {h.j|j ∈ N(i, T1)} denote the multiset consisting of h-values of all the neighbors
of i in T1, and
N−h (i, T1) = Nh(i, T1) − {max(Nh(i, T1))} denote all of Nh(i, T1) with one maximum h-value
removed.
Claim 1 For any i ∈ V1 − {c}, Deg(i) in ω = deg(i, T1) and Nh2(i) in ω = Nh(i, T1) in ω1.
Proof of claim In view of Lemma 4 and the fact that p.v = ⊥ and c is the unique neighbor of v
such that p.c = v in ω, we have
Deg(v) in ω = |{x ∈ N(v)|h1.x ̸= h1.v ∧ p.v ̸= x ∧ p.x ̸= v}|+ 1 in ω
= |{x ∈ N(v)|x ̸= c}|+ 1
= deg(v)
= deg(v, T1), and
Nh2(v) in ω = {h2.x|x ∈ N(v) ∧ h1.x ̸= h1.v ∧ p.v ̸= x ∧ p.x ̸= v} ∪ {0} in ω
= {h2.x|x ∈ N(v)− {c}} ∪ {0} in ω
= {h.x|x ∈ N(v, T1)− {c}} ∪ {h.c} in ω1
= {h.x|x ∈ N(v, T1)} in ω1
8
node in N(v, T1) = N(v) such that h.u = h.v in ω1. Hence u is the unique node in N(v) − {c}
such that h.u = h.v in ω1. Since ∀x ∈ N(v)− {c}, h.x in ω1 = h2.x in ω, u is the unique node in
N(v)−{c} such that h2.u = h2.v in ω. Note that c is the unique node in N(v) such that p.c = v,
and h.c = 0 in ω1. Hence h2.v in ω = h.v in ω1 = maxNh(v, T1) in ω1 = max(Nh(v, T1)−{h.c}) in
ω1 = max(Nh2(v)−{h2.c}) in ω. Summarizing all the above, we have that in the configuration ω,
h1.v < maxNh1(v), c is the unique node in N(v) such that p.c = v, h2.v = max(Nh2(v)− {h2.c})
and u is the unique node in N(v) − {c} such that h2.u = h2.v. Thus, in the configuration ω, v
satisfies all the conditions in P8(i) except the part [i > k], and u is the unique node in N(v)−{c}
such that h2.u = h2.v.
Similarly, we can show that in the configuration ω, u satisfies all the conditions in P6(i) except
the part [i > k], and v is the unique node in N(u) such that h2.v = h2.u.
If v > u, then, in the configuration ω, v satisfies P8(i) while u does not satisfy P6(i) and the
whole P (i) as well. If u > v, then, in the configuration ω, u satisfies P6(i) while v does not satisfy
P8(i) and the whole P (i) as well.
From all the above, one can see that in this Case d, in the configuration ω, u or v is the unique
node in V1 − {c} that satisfies P (i).
As what we have just done for T1, let each node i in T2 be equipped with Algorithm 1 that
contains a single shared variable h.i. Induced from the legitimate configuration ω of T , we obtain
a configuration ω2 of 〈T2, h〉 in which
for each i ∈ V2, h.i in ω2 = h2.i in ω.
For any i ∈ V2, let
N(i, T2) = {j ∈ V2|{i, j} ∈ E2} denote the set of all neighbors of i in T2,
deg(i, T2) = |N(i, T2)| denote the number of all neighbors of i in T2,
Nh(i, T2) = {h.j|j ∈ N(i, T2)} denote the multiset consisting of h-values of all the neighbors
of i in T2, and
N−h (i, T2) = Nh(i, T2) − {max(Nh(i, T2))} denote all of Nh(i, T2) with one maximum h-value
removed.
By using similar proofs to those for Claims 1, 2 and 3, we can also obtain the following three
claims:
Claim 4 For any i ∈ V2, Deg(i) in ω = deg(i, T2), and Nh2(i) in ω = Nh(i, T2) in ω2.
Claim 5 ω2 is the legitimate configuration of T2 for Algorithm 1.
Claim 6 In the legitimate configuration ω, there is a unique node in V2 that satisfies P (i), and
this node is a center of T2.
The theorem now follows immediately from Claims 3 and 6 together with the main theorem
in [11].
3.2 Self-stabilization and stabilization time
In this subsection, we verify the self-stabilization property of Algorithm 2. In the course of the
proof, we also obtain the worst-case stabilization time for the algorithm.
10
24
536 1 3
511
0
042
0 3
20
526
2
043
2
Figure 3: An example of the tree system T . The number in each node is the h1-value of the node.
The arrow pointing from a node i to a node j represents that p.i = j. If no arrow points outward
from node i, it represents that p.i = ⊥. Here we assume that there is a segment Ω of Algorithm
2 in T such that the h1-values and the p-values in the whole system T never change in Ω and
are as indicated in the figure. All the gray nodes constitute the set AΩ, and all the black nodes
constitute the set BΩ.
Figure 4: The forest FΩ induced from the segment Ω mentioned in Fig. 2.
12
ih2.i 3
h2.j 1 h2.k 2
mkj i
h2.i 0
h2.j 1 h2.k 2
m 1 kj
h.ui 3
h.j 1 h.k 2
m'j kui vi
h.vi 3 h.ui 0
h.j 1 h.k 2
m* j kui vi
h.vi 3
→
→
h.ui 0
h.j 1 h.k 2
m 1' j kui vi
h.vi 0
→
Figure 5: At the top is an R5-move ωm → ωm+1 of Algorithm 2 by node i ∈ AΩ. The bottom shows
that the transition from ω′m to ω
′
m+1 can be composed of an Ra-move ω
′
m → ω∗m of Algorithm 3
by ui and an Ra-move ω
∗
m → ω′m+1 of Algorithm 3 by vi.
i
h1  3
h2  5
h1  5
h2  3
h1  2
h2  4
h1  1
h2  2
h1  3
h2  1
h1  4
h2  3 h1  2
h2  5
h1  3
h2  2
i
h  5
h  3
h  4
h  2
h  1
h  3
h  5
h  2
i
h1  3
h2  0
h1  5
h2  3
h1  2
h2  4
h1  1
h2  2
h1  3
h2  1
h1  4
h2  3 h1  2
h2  5
h1  3
h2  2
i
h  0
h  3
h  4
h  2
h  1
h  3
h  5
h  2
m m 1
m' m 1'
→
→
Figure 6: At the top is an R5-move ωm → ωm+1 of Algorithm 2 by node i ∈ V − AΩ, and at the
bottom, the transition from ω′m to ω
′
m+1 is an Ra-move of Algorithm 3 by i.
14
(1) δ1 = ω
′
1 in any case.
(2) If Ω is a finite segment (ω1, ω2, . . . ωλ), then Ω
′ = (ω′1, ω
′
2, . . . ω
′
λ) and ∆Ω = (δ1, δ2, . . . δτ )
are both finite, and δτ = ω
′
λ.
Observation 6 The number of moves (of Algorithm 2) in Ω is no greater than the number of moves
(of Algorithm 3) in ∆Ω.
Let C1, C2, . . . , Cr be all the connected components of FΩ, and let the numbers of nodes
of C1, C2, . . . , Cr be n1, n2, . . . , nr, respectively. As defined previously, for any configuration
δm in ∆Ω, h(δm) denotes the maximum h-value in the system. Similarly, for δm, we let h1(δm),
h2(δm), . . . , hr(δm) denote the maximum h-values in C1, C2, . . . , Cr, respectively. By using
Lemma 5.5 in [4] and the second last sentence in the proof of Lemma 6.5 in [4], one can easily
derive that the number of moves in ∆Ω executed by nodes in the component Cj, j = 1, 2,
. . . , r, is at most 3nj
3 + 2nj
2hj(δ1). Hence the number of moves (of Algorithm 3) in ∆Ω is
(3n1
3 + 2n1
2h1(δ1)) + · · ·+ (3nr3 + 2nr2hr(δ1)) ≤ (3n13 + 2n12h(δ1)) + · · ·+ (3nr3 + 2nr2h(δ1)) =
3(n1
3 + · · · + nr3) + 2(n12 + · · · + nr2)h(δ1) ≤ 3n3 + 2n2h(δ1). Therefore we have the following
claim:
Claim 1 The number of moves (of Algorithm 3) in ∆Ω is at most 3n
3 + 2n2h(δ1).
By Lemma 6.4 in [4], for any configuration δm in ∆Ω, h1(δm) ≤ h1(δ1) + ⌊n1/2⌋, . . . , hr(δm) ≤
hr(δ1) + ⌊nr/2⌋. Hence h1(δm) ≤ h1(δ1) + ⌊n/2⌋, . . . , hr(δm) ≤ hr(δ1) + ⌊n/2⌋. Since h(δm) =
max{h1(δm), . . . , hr(δm)} ≤ max{h1(δ1) + ⌊n/2⌋ , . . . , hr(δ1) + ⌊n/2⌋} = h(δ1) + ⌊n/2⌋, we have
the following claim:
Claim 2 For any configuration δm in ∆Ω, h(δm) ≤ h(δ1) + ⌊n/2⌋.
Lemma 9 In any execution of Algorithm 2 starting from configuration γ1, the number of h2-moves
is at most 238n11 + 248n10h1(γ1) + 28n
6h2(γ1) + 16n
5h1(γ1)h2(γ1) + 64n
9h1(γ1)
2.
Proof. Let Γ = (γ1, γ2, . . .) be an execution of Algorithm 2. Suppose there are k h1- or p-moves
in Γ. By cutting at these moves, Γ can be divided into k + 1 segments Γ0 = (γ1, γ2, . . . , γi1−1),
Γ1 = (γi1 , γi1+1, . . . , γi2−1), . . . , Γk−1 = (γik−1 , γik−1+1, . . . , γik−1) and Γk = (γik , γik+1, . . .). Then
there is no h1- or p-move in each of these segments. Let F0, F1, . . . , Fk−1, Fk be the forests
induced from the segments Γ0, Γ1, . . . , Γk−1, Γk, respectively. Let ∆0 = (δ1, δ2, . . . , δj1−1),
∆1 = (δj1 , δj1+1, . . . , δj2−1), . . . , ∆k−1 = (δjk−1 , δjk−1+1, . . . , δjk−1) and ∆k = (δjk , δjk+1, . . .) be
the segments of Algorithm 3 in F0, F1, . . . , Fk−1, Fk, respectively, also induced from Γ0, Γ1,
. . . , Γk−1, Γk, respectively. By Observation 6 above, the numbers of moves in Γ0, Γ1, . . . ,
Γk−1, Γk are less than or equal to the numbers of moves in ∆0, ∆1, . . . , ∆k−1, ∆k, respec-
tively. By Claim 1, the numbers of moves in ∆0, ∆1, . . . , ∆k are at most 3n
3 + 2n2h(δ1),
3n3+2n2h(δj1), . . . , 3n
3+2n2h(δjk), respectively. Since, by Observations 1 and 5, h(δ1) = h2(γ1),
h(δj1) = h2(γi1), . . . , h(δjk) = h2(γik), we have that the numbers of h2-moves in Γ0, Γ1, . . . , Γk
are at most 3n3 + 2n2h2(γ1), 3n
3 + 2n2h2(γi1), . . . , 3n
3 + 2n2h2(γik), respectively. By Claim 2,
h(δj1−1) ≤ h(δ1)+ ⌊n/2⌋. Hence h2(γi1−1) = h(δj1−1) ≤ h(δ1)+ ⌊n/2⌋ = h2(γ1)+ ⌊n/2⌋. Since the
move γi1−1 → γi1 is an h1- or p-move, h2(γi1) = h2(γi1−1) ≤ h2(γ1) + ⌊n/2⌋. Similarly, we can get
h2(γi2) ≤ h2(γi1) + ⌊n/2⌋ and hence h2(γi2) ≤ h2(γ1) + 2 ⌊n/2⌋. Arguing in the same way, we can
get h2(γi3) ≤ h2(γ1)+3 ⌊n/2⌋, . . . , h2(γik) ≤ h2(γ1)+k ⌊n/2⌋. Hence the numbers of moves in Γ0,
16
[4] Bruell SC, Ghosh S, Karaata MH, Pemmaraju SV: Self-stabilizing algorithms for finding
centers and medians of trees. SIAM J. Comput. 29(2), 600-614 (1999)
[5] Buckley F, Harary F: Distance in graphs. Addison-Wesley, Redwood City, CA, (1990)
[6] Dijkstra EW: Self-stabilizing systems in spite of distributed control. Commun. ACM 17(11),
643-644 (1974)
[7] Dijkstra EW: Self-stabilizing systems in spite of distributed control (EWD391). Reprinted in:
Selected writing on computing: a personal perspective. Springer, New York Berlin Heidelberg,
pp. 41-46 (1982)
[8] Dijkstra EW: A belated proof of self-stabilization. Distrib. Comput. 1(1), 5-6 (1986)
[9] Dolev S, Israeli A, Moran S: Self-stabilization of dynamic systems assuming only read/write
atomicity. Distrib. Comput. 7(1), 3-16 (1993)
[10] Huang S-T, Chen N-S: Self-stabilizing depth-first token circulation on networks. Distrib.
Comput. 7(1), 61-66 (1993)
[11] Huang TC, Lin J-C, Chen H-J: A self-stabilizing algorithm which finds a 2-center of a tree.
Comput. Math. Appl. 40(4-5), 607-624 (2000)
[12] Huang TC, Lin J-C, Mou N: A self-stabilizing algorithm for the center-finding problem as-
suming read/write separate atomicity. Comput. Math. Appl. 48, 1667-1676 (2004)
[13] Karaata MH, Pemmaraju SV, Bruell SC, Ghosh S: Self-stabilizing algorithms for finding
centers and medians of trees. Technical Report, TR 94-03, University of Iowa, Iowa City, IA,
(1994)
[14] Karaata MH, Chaudhuri P: A self-stabilizing algorithm for bridge finding. Distrib. Comput.
12, 47-53 (1999)
[15] Lin J-C., Huang TC: An efficient fault-containing self-stabilizing algorithm for the center-
finding problem for tree networks. Submitted.
[16] Lin J-C, Huang TC, Chiu M-Y: Concise correctness proofs for two self-stabilizing algorithms
under the distributed demon model. Submitted.
18
99 年度專題研究計畫研究成果彙整表 
計畫主持人：林基成 計畫編號：99-2221-E-155-059- 
計畫名稱：一個在 non-fair central daemon 模式下尋找雙中心點的自我穩定演算法 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 1 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100 字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：□已發表 □未發表之文稿 ■撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100 字為限） 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
In this project, we proposed a self-stabilizing 2-center-finding algorithm under 
the non-fair central daemon model, gave a rigorous correctness proof for the 
self-stabilization property and obtained the worst-case stabilization time of the 
proposed algorithm. 
 
There exists only one self-stabilizing algorithm for finding a 2-center of a tree 
(Huang TC, Lin J-C, Chen H-J: A self-stabilizing algorithm which finds a 2-center 
of a tree. Comput. Math. Appl. 40(4-5), 607-624, 2000). This algorithm works on 
a system under the fair central daemon model. Therefore the proposed algorithm 
in this project is the first self-stabilizing algorithm for finding a 2-center 
of a tree under the non-fair central daemon model. 
 
As an immediate consequence of the definitions of the fair central daemon model 
and the non-fair central daemon model, if an algorithm is self-stabilizing under 
the non-fair central daemon model, then it is also self-stabilizing under the fair 
central daemon model. The converse, however, is not true. The main weakness of 
the fair central daemon model has been demonstrated by a theorem in Huang et al. 
(Huang TC, Lin J-C, Chen C-Y, Wang C-P: The worst-case stabilization time of a 
