2Code scheme, the advantages of RFID are (1) no
line-of-sight transmission paths are required, (2)
data rate could reach 100-1000 tags per second,
and (3) tags maybe be interrogated over a long
range.
Two kinds of collisions could happen in
RFID systems: reader collisions and tag
collisions. When more than one neighboring
reader interrogates a tag simultaneously, a reader
collision occurs. When a reader sends a message
to more than one tag, those tags may transmit
their IDs to the reader at the same time. This
kind of collisions is referred to as tag collisions.
For simplicity, we only consider the cases with
passive tags. It is noted that due to the limited
functions of the passive tags, they can neither
detect collisions nor discover each other. We
focus on the investigation of the tag
anti-collision algorithms for the passive tags for
both stationary and mobile scenarios, where in
the stationary scenarios all tags are stationary,
whereas in the mobile scenarios all tags are
mobile, and there are tags arriving at the system
and/or tags leaving the system.
First, consider the stationary scenarios. As
is well-known, there are basically two types of
tag anti-collision algorithms: ALOHA-based and
Tree-based algorithms. In [6], the authors study
the throughput for the ALOHA algorithm in
RFID systems. It is shown that for the Aloha
algorithm the maximum system throughput is
36.8%. Although Aloha is a memoryless
protocol, its system efficiency is not high enough
to identify tags efficiently. Especially if the total
number of tags is not known in advance, the long
identification delay seems unavoidable. The
Aloha protocols cannot achieve high system
efficiency because they have a high re-collision
probability. In [4], it is shown that the Binary
Tree algorithm has a stable performance.
Specifically, the system efficiency is always 35%
whatever the total number of tags is. However,
the algorithm has a serious overhead problem,
i.e., its overhead is heavy when the total number
of tags is large. In [7], the authors propose a
novel anti-collision algorithm, Tree Slotted
Aloha (TSA), which combines the advantages of
Aloha and Tree algorithms. TSA reduces the
probability of re-collisions by putting those tags
having collided at one slot into the same set.
However, if the total number of tags is greater
than 1024, the performance of TSA will suffer,
as there are at most 256 slots in a frame. In [6],
the idea of grouping is utilized to solve the
limited-frame- size problem mentioned above for
ALOHA algorithms. As we cannot increase the
frame size indefinitely, if the total number of
tags is large, the tags are divided into an
appropriate number of groups so that an
appropriate frame size can be chosen to achieve
high system efficiency.
In [3], for the mobile tags, the authors
introduce the Adaptive Binary Splitting (ABS)
algorithm that memorizes tag identification
results of the pervious run. In the mobile
scenarios, we consider two identification runs,
where during the first run all tags are within the
reader range or the system and there could be
tags arriving at or leaving the system after the
first run. It is easy to show that the binary tree
anti-collision algorithm could result in lower
system efficiency in scenarios with mobile tags.
However, with the proposed algorithm, the
authors show that the efficiency can be increased
if the number of tags leaving the system and the
number of tags arriving at the system are small.
However, if much more tags arriving at the
system than leaving the system or much more
tags leaving the system than arriving at the
system, the system efficiency of ABS may suffer.
In our work, first, for the stationary
scenarios, we propose an anti-collision algorithm,
Group Dynamic Frame Tree Slotted Aloha
(GDFTSA). Specifically, we divide all the tags
into several groups and then apply TSA [7] to
each group to improve the throughput. The main
idea is to increase the system efficiency by
decreasing the number of tags in each group.
Second, for the mobile scenarios, we propose
another anti-collision algorithm, Group Dynamic
Frame Tree Slotted Aloha – Adaptive Binary
Splitting (GDFTSA- ABS). The main idea is,
with the memory of the ID result of the previous
run, a wise choice is made between GDFTSA
and ABS. If there is a big change in the number
of tags from the last run, GDFTSA is chosen
over ABS, and vice versa. Furthermore, with the
ID result of the previous run, we can introduce a
43.2.4 EDFSA Algorithm
EDFSA divides the tags into many groups
according to an estimation function. The optimal
frame size and number of groups for different
estimated total number of tags for EDFSA can be
determined as in [6].
3.2.5 TSA Algorithm
The TSA algorithm is described in [7]. In
this algorithm, two collided tags at different slots
in the current frame are prevented to collide
again in the same frames in order to reduce the
probability of re-collisions. The algorithm is
performed in tag reading cycles or levels. For the
first level, the reader starts a frame with the
chosen frame size and sends a request with the
frame size to all the tags. Each tag will reply to
reader at the randomly chosen slot in the frame.
If there is only one tag choosing one particular
slot, the tag will be identified by the reader. If
there is more than one tag choosing the same slot,
a collision results and the collided tags cannot be
identified by the reader. Next, for the next level a
new frame size is determined based on the
estimated total number of tags, the number of
collision slots, and the number of success slots
measured from the current frame. The reader
starts a new frame for each collision slot and
sends the new frame size to those collided tags at
the same slot. Those tags randomly choose a slot
from the new frame and reply to the reader. The
procedure will be repeated until all tags are
identified. The pseudo code of this algorithm is
presented as follows. The estimation of the
number of tags is defined as in [5].
However, the throughput of TSA cannot
maintain at a constant value with a large number
of tags, since the estimated number of tags could
be in error. As a result, we find that the
estimation method is one weakness of TSA.
3.2.6 GDFTSA Algorithm.
The TSA algorithm can achieve higher
system efficiency when the number of tags
approximates the frame size. However, if the
number of tags is greater than the frame size, the
number of collisions will increase and the system
efficiency will suffer. The solution is either to
restrict the number of unread tags or select the
appropriate frame size to identify tags. Therefore,
a novel GDFTSA algorithm is proposed to
alleviate the aforesaid problem
It can be shown that, if the number of
unread tags is approximate to the frame size,
higher system efficiency can be achieved. It can
also be shown that with the frame size being
fixed at 256, high system efficiency can be
achieved if the tags are divided into an
appropriate number of groups. Thus, whether the
number of tags is large or not, we can choose an
appropriate frame size and an appropriate
number of groups to increase system efficiency.
In this way we can maintain the throughput at the
approximately maximum value for different
numbers of tags However, how to estimate
accurately the total number of tags is a
challenging task.
Following the Vogt’s estimation method in
[5], we can obtain an estimated number of
unread tags. However, it is inappropriate to apply
the Vogt’s method to estimate a large number of
tags much greater than 500 if we fix the frame
size to 128. It can be concluded that Vogt’s
method is accurate only if the number of tags is
at most 4 times the frame size.
Therefore, we can use the Vogt’s method to
estimate the number of tags if the number of tags
is small. However, if the number of tags is large,
the Vogt’s method could lead to a bad estimated
number of tags, since there are at most 256 slots
in a frame as defined by the standard. Thus, if
the number of tags is large, the idea of grouping
is utilized to reduce the number of tags in each
group so that an appropriate frame size ( 256≤ )
is available.
3.3 Mobile Tags
In this section, we consider the mobile
scenarios with staying tags and arriving tags.
Specifically, we consider the mobile scenarios
with two runs. In the first run, the number of tags
remains unchanged. In the second run, there may
be tags arriving at the system and/or leaving the
system, and the number of tags could change.
We consider two anti-collision algorithms: ABS
(Adaptive Binary Splitting) [3] and the proposed
GDFTSA-ABS.
6collisions are considered. The propagation delays
from reader to tag and from tag to reader are
ignored. Two kinds of scenarios are studied:
stationary and mobile. In the stationary scenarios,
all tags are immobile or stationary, and thus the
total number of tags is fixed over time. In the
mobile scenarios all tags are mobile, and there
are tags arriving at the system and/or tags leaving
the system, and thus the total number of tags
could change over time. The parameters used in
our simulation are based on the ISO 18000-6
standard.
3.4.2 Simulation results for stationary tags
In this section, all tags are assumed to be
stationary. The memory capacity of each tag is
256 bits. The number of tags used in our
simulation is varied from 1 to 100 and 1000 to
5000, respectively. Furthermore, the initial frame
size of BFSA, DFSA, EDFSA, TSA, and
GDFTSA-B is 256 and the initial frame size of
GDFTSA-Q is 16. BT can be viewed as adopting
the fixed frame size one.
We show the performance comparison of
seven anti-collision algorithms, BFSA, DFSA,
EDFSA, BT, TSA, GDFTSA-B, and
GDFTSA-Q with a small number of tags. When
it comes to the system efficiency with a small
number of tags, the important factor is the initial
frame size. It is observed that for GDFTSA-Q
and BT the system efficiency remains almost
constant with different numbers of tags. For
GDFTSA-Q, the initial frame size for estimating
the number of tags is 16, and the number of
groups is found by dividing the estimated
number of tags by another frame size 8. It is
noted that the frame size for estimating the
number of tags will be varied dynamically when
the number of tags increases. For BT, the
algorithm continuously splits a set of tags into
two subsets until each set has only one tag. BT
can be viewed as adopting the fixed frame size
one to identify tags, and the small frame size
causes more collisions and thus a long
identification delay. Furthermore, for BFSA,
DFSA, EDFSA, TSA and GDFTSA-B, the
system efficiency increases as the number of tags
increases. For those algorithms, due to the frame
size being set to 256, more slots than needed are
used to identify tags. Therefore, for those
algorithms, the system efficiency is low when the
number of tags is small. Obviously, the system
efficiency of GDFTSA-Q is better than those of
the other algorithms.
The identification delay versus the number
of tags with different anti-collision algorithms is
also shown. The identification delay decreases as
the number of tags increases except for
GDFTSA-Q and BT. The identification delay
decreases since the number of empty slots
decreases. GDFTSA-Q achieves the lowest
identification delay since it causes the least
number of empty slots.
We also show the performance comparison
of seven anti-collision algorithms, BFSA, DFSA,
EDFSA, BT, TSA, GDFTSA-B, and
GDFTSA-Q with a large number of tags. When
it comes to the system efficiency with a large
number of tags, the important factors are the
anti-collision identification process and grouping.
We show the system efficiency versus the
number of tags with different anti-collision
algorithms. It is observed that for GDFTSA-B,
GDFTSA-Q and BT the system efficiency
remains almost constant with different numbers
of tags. For GDFTSA-B and GDFTSA-Q, the
initial frame size for estimating the number of
tags is 256 and 16, respectively, and the number
of groups is found by dividing the estimated
number of tags by frame size 256 and 8,
respectively. It is noted that the frame size for
estimating the number of tags will be varied
dynamically when the number of tags increases.
The system efficiency of GDFTSA-Q whose
frame size for grouping is 8 is higher than that of
GDFTSA-B whose frame size for grouping is
256. It is due to the fact that for TSA the
maximum system efficiency with frame size 8 is
greater than that with frame size 256. For BT, it
can be viewed as adopting the fixed frame size
one to identify tags, and the small frame size
causes more collision slots and thus a long
identification delay. Furthermore, for BFSA,
DFSA, EDFSA, TSA and GDFTSA-B, the
system efficiency decreases as the number of
tags increases. For those algorithms, due to the
frame size being set to 256, a much larger
number of tags than the frame size leads to many
8256 slots per frame, and dynamic frame size is
utilized to estimate the total number of tags. We
consider two kinds of scenarios: stationary tags
and mobile tags. First of all, we propose the
Group Dynamic Frame Tree Slotted Aloha
(GDFTSA) algorithm for stationary tags, where
first we estimate the total number of unidentified
tags with dynamic frame size, and according to
the estimated total number of tags, the number of
groups is adjusted to improve the system
efficiency. Next, we propose the Group Dynamic
Frame Tree Slotted Aloha – Adaptive Binary
Splitting (GDFTSA-ABS) algorithm for mobile
tags, where the tag identification information of
the last run is utilized to make an appropriate
choice between GDFTSA and ABS. The
performance metrics of interest are the system
efficiency, the number of transmitted bits, and
identification delay. Computer simulation
programs are written in C language. With
extensive numerical experiments, it is shown that
GDFTSA and GDFTSA-ABS outperform the
other anti-collision algorithms in most of the
cases studied.
五、參考文獻
[1] D. H. Shih, P. L. Sun, D. C. Yen, and S.M.
Huang, “Taxonomy and Survey of RFID
Anti-Collision Protocols,” Computer
Communications, pp. 2150-2166, Jan.
2006.
[2] EPCglobal, “EPC Ratio-Frequency Identity
Protocols Class-1 Generation-2 UHF RFID
Protocol for Communications at 860MHz –
960MHz,” ver 1.1.0, 2004, 2005, 2006.
[3] J. Myung, W. Lee, J. Srivastava, and T. K.
Shih, “Tag-Splitting Adaptive Collision
Arbitration Protocols for RFID Tag
Identification,” IEEE Transaction on
Parallel and Distributed Systems, Vol. 18,
NO. 6, pp. 763-775, June 2007.
[4] D. Hush and C. Wood, “Analysis of Tree
Algorithms for RFID Arbitration,” IEEE
Int’l Symp. Information Theory, p. 107,
Aug. 1998.
[5] H. Vogt, “Efficient Object Identification
with Passive RFID Tags,” Int’l Conf.
Pervasive Computing, pp. 98-113, Apr.
2002.
[6] S. Lee, S. Joo, and C. Lee, “An Enhanced
Dynamic Framed Slotted Aloha Algorithm
for RFID Tag Identification,” MobiQuitous
2005, pp. 166–172, 2005.
[7] M. A. Bonuccelli, F. L. D. Informatica, and
F. Martelli, “Tree Slotted Aloha: a New
Protocol for Tag Identification in RFID
Networks,” 2006 International Symposium
on a WoWMoMG, 2006.
99 年度專題研究計畫研究成果彙整表 
計畫主持人：鍾順平 計畫編號：99-2221-E-011-012- 
計畫名稱：具有靜止與行動標籤之射頻辨識網路之反碰撞演算法 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 4 4 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
