FSTA: 正規靜態時序分析技術(II)  
 “Formal Statistical Timing Analysis” 
計畫編號：NSC 95-2221-E-002-396 
執行期間：95 年 8 月 1 日至 96 年 7 月 31 日 
主持人：黃鐘揚 台灣大學電機系暨電子所助理教授 
 
一、 中文摘要 
本計劃今年專注於使用正規驗證方法，建立更精確
的靜態時序分析工具，主要完成的項目有四：(一)倒推
式靜態時序分析，(二)謬誤路徑檢驗，(三)電路多重轉
換情況之最大延遲測試訊號的產生，以及(四)動態時序
驗證。其中項目。在項目(一)中，我們實作一種能正確
判斷關鍵路徑的靜態時序分析工具[1]，我們以之取得
初始之關鍵路徑，並作為最後實驗結果之對照組。項目
(二)中，我們使用正規引擎對此條路徑是否為謬誤路徑
做檢驗。假定此路徑為真，則在(三)中我們同樣利用正
規引擎，產生造成電路延遲極大的測試訊號，再以項目
(四)的動態時序分析來檢驗我們所得到的電路延遲。如
此一來我們的時序分析工具可以提供使用者做電路關
鍵路徑的確認，以不錯的效率找到最大的電路延遲信
號，而這些信號對使用者在電路怖局的時序模擬是相當
有幫助的。 
關鍵詞：時序分析，時序模擬，時序關鍵路徑，偽路徑，
正規方法引擎，動態時序模擬，靜態時序模擬，多重輸
入信號變換。 
英文摘要 
In this year we dedicated to establish a precise static 
timing analysis (STA) tool on the formal verification 
engine. Specifically, we accomplished four major subjects: 
(1) we have implemented a static timing analysis tool 
using backward signal propagation[1]. (2) We perform 
false path checking on critical path in the circuit by 
Boolean Satisfiability (SAT) engine. (3) If this path is true, 
we will try to push the delay bound obtained in the STA 
process by considering simultaneous input transitions of 
the circuit. (4) If we get certain input patterns from STA 
engine, then we can evaluate the new delay data by 
dynamic timing analysis (DTA). In this way we can get an 
accurate delay bound and solve the circuit false path 
problem at the same time. Moreover, because we only 
simulate several input patterns in the circuit, the 
performance of our method would be better than 
traditional DTA. In our experiments, we demonstrate that 
our method can achieve both better performance and 
accuracy than random simulation. As a result, we believe 
that the test patterns we derived by the formal engine 
would be useful and important to the post-layout timing 
simulation stage. 
Keywords：Timing analysis, timing simulation, critical 
path, false path, formal verification engine, dynamic 
timing analysis, static timing analysis, multiple input 
transitions. 
二、計畫的緣由與目的 
Timing verification is a very important step in the 
current IC design flow [2]. It analyzes the delays of all the 
paths in the circuit under verification and checks whether 
the most critical ones meet the timing constraints. In this 
way, we can guarantee the circuit can function correctly.  
There are two methods in performing timing analysis. 
The first one is called Dynamic Timing Analysis (DTA). 
DTA is a simulation-based approach that applies input 
patterns/transitions to the circuit and observes the output 
waveforms for the delay information. The advantage of 
this method is that it can accurately compute the delay for 
the applied pattern. However, since the number of 
simulation patterns is exponential to the number of inputs 
in a design, it is practically impossible to emulate all the 
patterns to obtain the critical delay information for the 
whole circuit.  
Static Timing Analysis (STA), on the other hand, is 
an alternative approach [3]. It is more popular than DTA 
in timing verification because it does not require the user 
to provide the input patterns yet still can achieve 
reasonably accurate timing verification results with very 
high speed and capacity. It usually adopts the table 
look-up model for the cell delay calculation, where the 
input transition time and load capacitance are two indices 
for the delay table. Delay information and critical path are 
then determined by composing the worst case of single 
input pin transitions. 
Although STA works well most of the time for the 
circuit designers, it has some limitations. First, this method 
usually leads into approximate results because it only 
considers single input pin transition. In real-life circuit 
operations, inputs can transit simultaneously. If we take 
the multi-input transition effect into consideration, the cell 
delay can be larger and thus the timing constraint may be 
violated. Another limitation on STA is its capability in 
detecting false paths. An example of a false path is as 
shown in Fig 1. If the determined critical path is a false 
path, we should try to find out another one whose delay 
bound is next to the original one. Moreover, STA does not 
provide test pattern to users. In the post-layout simulation 
stage, users usually apply device-level simulation tools 
such as SPICE with more accurate delay model. In other 
words, they will need the input patterns that can simulate 
the most critical delay situations. 
 
Fig. 4 Simulation with Multiple Input Transitions 
    Our timing analysis method is the same as STA. It 
does not need input patterns from the user. Instead, we use 
formal engine to find out proper patterns or transitions 
from all input patterns. By incremental Boolean 
constraints propagation (BCP) and delay calculation, we 
guarantee the correctness and robustness of our delay 
model.  
In this thesis we focus on the behavior and data 
collection of 2-input gate. We introduce AND2, OR2, 
NAND2, NOR2, INV and XOR2 gates into our 
consideration. Note that binate gate XOR2 would not 
propagate multi-transition signals so we just consider 
single transition when we meet an XOR2 on the concerned 
path. This is shown in Table.1. Considering constraints 
such as zero, one, rise, and fall to input pins, the output 
response would have 2^4 = 16 combinations as zero, one, 
rise, and fall. Table.2 is the 2-input NAND gate 
truth/transition table. However, we found that the 
combinational response can be classified as stable zero, 
stable one, rising with single input transition (Rs), falling 
with single input transition (Fs), rising with multiple 
input transitions (Rm), falling with multiple input 
transitions falling (Fm),  and hazard/glitch (*) as shown 
in Tables below. 
 
Table.1 2-Input XOR Gate Truth/Transition Table 
 0 1 Rise Fall 
0 0 1 R F 
1 1 0 F R 
Rise R F 0 1 
Fall F R 1 0 
Green：Single input transition   
Blue：Multiple input transitions 
 
Table.2 2-Input NAND Gate Truth/Transition Table 
 0 1 Rise Fall 
0 1 1 1 1 
1 1 0 F R 
Rise 1 F F * 
Fall 1 R * R 
Green：Single input transition   
Blue：Multiple input transitions 
Reducing the complexity of logic gate output 
response is helpful for our delay calculations. Next step 
we would try to define certain delay variables to our 
timing model. As Table.3 shows, we have four kinds of 
delay variables ⎯ gate input transition time, represented 
as Tr, gate input signal arrival time, represented as Arr, 
difference of input arrival times, represented as Darr or 
Delta T, and finally the equivalent output load 
capacitance, represented as Ceq. Notice that the Delta T 
can be zero, positive, or negative. 
Delay Variables Description 
Transition Time ( Tr x ) Transition time of input 
pin 
Arrival Time ( Arr x ) Arrival time of input 
signal 
Difference of Arrival Times 
( Darr or △T ) 
May be positive or 
negative 
Load Capacitance ( Ceq ) Output load for logic 
gate 
Table.3 Delay Variables and Description 
3.2c Boundary Conditions 
In Section 3.2 we have explained our delay variables. 
As we know, the more variables to the delay calculation, 
the more complexity in solving this problem. Fortunately, 
difference of input arrival times (Darr) can be simplified 
to reduce the delay variable combinations.  
As Fig. 5 shows, when we consider 2-input unate 
gate, difference of input arrival times has some extremes. 
In one situation, we know that Darr can be treated as 
positive infinite when Arr1 – Arr2 > Tr2. In the other 
situation, Darr can be viewed negative infinite when 
Arr1 – Arr2 < -Tr1.  
    Extreme of Darr means that considering multiple 
input transitions is not necessary. Instead, the output 
response would be the same as single input transition. 
Sampling in the gap of Darr can help us to reduce the 
complexity of delay calculation.  
 
Fig. 5 Extreme of Delta T 
3.2d Multiple Transition Timing Table 
    In the previous section we have explained the 
variables for delay calculation. Now we talk about how we 
implement it. As Fig.6 shows, for a 2-input unate gate, we 
construct a 4-dimensional timing table with four variables. 
Each variable have five indexes. Tr1 and Tr2 set up 5 x 5 
= 25 timing tables. These timing tables have 5 x 5 = 25 
delay information determined by Darr and Ceq. 
 
Fig. 9 Flow Chart of Main Algorithm 
4.2b Framework Architecture 
Fig.10 is the developed framework architecture. It 
contains several components such as front-end parser, 
timing engine, and SAT engine. 
Front-end parser parses circuit file and converts the 
circuit into the defined circuit base data structure.  
Timing engine is divided into STA and DTA. It 
evaluates timing information and determines circuit 
critical path.  
SAT engine is composed of SAT solver and Boolean 
constraints. It would be helpful for DTA and finding out 
the critical patterns.  
 
Fig.10 Framework Architecture 
4.3 Experimental Results 
In this section we show our new timing analysis 
experiments. We have several tables to point out delay 
bound difference of STA and our new algorithm. 
Moreover we have performed random simulations to the 
same test cases, to figure out the relationship of efficiency 
and accuracy.  
4.3a Delay Bound Refinement with New 
Algorithm 
Table.3 is the delay bound refinement with our new 
algorithm. We can see that our algorithm always finds out 
more critical input constraints, that is, our method finds 
out more critical delay bound that STA. Average 
improvements now is up to 3 percentage.  
Table.3 Delay Bound of STA & New Algorithm  
4.3b STA & Random Simulation 
Table.4 is random simulation experiments. In these 
experiments, delay bound is determined by random input 
assignments. In order to move up delay bound, random 
simulation needs to perform DTA more times. After time 
expense, random simulation still can’t find the critical 
delay bound.  
Table.4 Delay Bound of STA & Random Simulation 
Fig.11 is the delay bound histogram of three 
algorithms. FSTA means our new timing analysis 
algorithm (formal static timing analysis), and we can see 
that delay bound magnitude is “FSAT > STA > random 
simulation”. These results meet our purpose of new 
algorithm.  
 
Table.8 Run Time Comparison  
Fig.12 shows the expected tendency of STA, random 
simulation, and our new algorithm. We can see that STA 
has only constant delay bound. Delay bound of random 
simulation and our new algorithm can be improved, but 
simulation would cost much time. The value of our 
algorithm are not only improving delay bound in short 
time but also finding out critical input patterns for 
post-simulation.  
 
Fig.12 Tendency of Three Algorithms  
五、Conclusion and Discussion 
In this year, we implemented our proposed timing 
analysis algorithm. Current framework can parse test cases 
with net list format which is directly transformed from 
verilog and our method supports 2-input gates 
(and/or/nor/nand/xor) now. This method guarantees 
accurate delay bound in this situation, solves false path 
problem, and finds out critical test patterns for 
post-simulation. These contributions are valuable because 
current timing analysis tool don’t provide these functions.  
We completed the prototype of our timing engine. It 
provides user to perform STA, false path check, and 
perform our timing analysis algorithm in order to find out 
accurate delay bound with critical input constraints.  
In the future we plan to do advance research for 
proposed algorithm. We want to research delay behavior 
with logic gate which fanin number is more than two. To 
achieve this, current look-up-table methodology would not 
work out because the table size would grow exponentially 
and take too much effort to take care. Thus, a generalized 
form of library might be required. If we have patience and 
make effort to model this problem, hopefully it could be 
solved. Furthermore a new format of technology file can 
be established at the same time. 
Our work will also contribute to the publications in the 
coming year. We will target on the major EDA conference 
such as International Conference on Design Automation 
(ICCAD, deadline in mid-April) and Design Automation 
Conference (DAC, deadline in late November). At the end, 
the work will be summarized and submitted to selected 
journals. 
六、 參考文獻 
1. D. Lee, V. Zolotov, D. Blaauw, “Static Timing Analysis 
using Backward Signal Propagation”, DAC 2004. 
2. J. Cong, L. He, K. Y. Khoo, C. K. Koh, and Z. Pan, 
“Interconnect Design for Deep Submicron ICs”, Proc. 
IEEE Int’l Conf. on Computer-Aided Design, San 
Jose, California, pp.478-485, November 1997. 
3. 陳麒旭, “靜態時序分析 ( Static Timing Analysis) 
基礎及應用”, http://www.chip123.com/article/Static 
Timing Analysis01.htm 
4. MiniSAT page, 
http://www.cs.chalmers.se/Cs/Research/FormalMetho
ds/MiniSat/ 
5. Eun Sei Park, M.Ray Mercer, “An Efficient Delay 
Test Generation System for Combinational Logic 
Circuits”, Annual ACM IEEE Design Automation 
Conference 
6. Perl 入 門 與 實 作 . 
Http://linux.tnc.edu.tw/techdoc/perl_intro/ 
7. HSPICE simulation, 
http://www.ee.vt.edu/~ha/cadtools/hspice/hspice.html 
8. MATLAB programming, 
http://www.cs.nthu.edu.tw/~jang/mlbook/ 
9. W.B. Jone, W.S. Yeh, C. W. Yeh*, and S.R. Das**, 
“An Adaptive Path Selection Method for Delay 
Testing”, Dept. of CS&IE, Natinal Chung-Cheng U., 
Taiwan, R.O.C.*, Dept. of EE, U of Ottawa, Ottawa, 
Ontario, K1N 6N5, Canada**. 
10. Luis Guerra e Silva, Joao Marques-Silva, L. Miguel 
Silveira, Karem A. Sakallah, “Satisfiability models 
and algorithms for circuit delay computation”, ACM 
Transactions on Design Automation of Elecronic 
Systems (TODAES) 2002. 
11. Seiji Kajihara, Masayasu Fukunaga, Xiaoqing Wen, 
Toshiyuki Maeda, Shuju Hamada, Yasuo Sato, “Path 
delay test compaction with process variation 
tolerance”, Annual ACM IEEE Design Automation 
Conference, 2005 
12. 黃俊輔, “Quick RTL Synthesis for Design Analysis 
and Verification”, 國立台灣大學電機工程學研究所
碩士論文 
13. 李 晨 豪 , “Test Pattern Generation for Maximum 
Circuit Delay under Simultaneous Input Transition 
Model”, 國立台灣大學電子工程學研究所碩士論文 
