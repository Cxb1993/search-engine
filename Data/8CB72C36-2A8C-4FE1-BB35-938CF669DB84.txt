以依值型別與對話型別確保並行程式之正確性
計劃編號: NSC100-2221-E-001-003
執行期限: 2011/08/01 --- 2012/07/31
研究成果報告
穆信成	中央研究院資訊科學研究所	副研究員
Shin-Cheng Mu, Associate Research Fellow
Institute of Information Science, Academia Sinica
E-mail: scm@iis.sinica.edu.tw
URL: http://www.iis.sinica.edu.tw/˜scm/
This project aim to investigate ways to develop
concurrent and parallel programs, such that the pro-
grams are correct by construction. In this year, we
started with looking at a form of parallel computa-
tion --- list homomorphisms. We then looked at the
connection between the constrcution of list homo-
morphisms and their proofs. Finally, we looked at a
important mathematical structure --- Galois connec-
tion, and its role in program construction. The result
of the project has been published in two conference
papers [18, 5] and a journal paper [19]. One of the
conference papers [18] is published in the Interna-
tional Conference on Funtional Programming, one of
the most highly ranked conference in programming
languages, and is subsequently invited for a journal
submission. We summarise the results below.
1 研究目的
With  multi-core  hardware  becoming  standard  and
distributed computation becoming common, parallel
and concurrent programming re-emerges as an im-
portant topics. It was believed that by the end of this
decade, programs will consist of processes running
on thousands of cores, with each process communi-
cating with each other. Programming parallel and/
or concurrent processes, however, has shown to be a
difﬁcult task, and it is even harder to show their cor-
rectness.
Modern programming languages deploy type sys-
tems to guarantee compiler-veriﬁable properties of
the program. Dependent type is a highly expressive
type system that corresponds to predicate logic, al-
lowing types to dependent on functions. In recent
years, there is a trend to explore what impacts de-
pendent type can bring to practical programming lan-
guages, what we can express in such a rich type sys-
tem, and how that could change the way we program.
The long term goal of this project is to propose
ways to construct and reason about parallel and con-
current  programs, with  the  help  of  type  systems,
proof assistants, and program calculation. We hope
to develop a methodology in which parallel and/or
concurrent programs can be constructed. The cor-
rectness of these programs are either guaranteed by
the methodology (since programs are developed to-
gether  with  their  proofs), or  by  the  type  systems
1
construction of programs. We summarise the results
below.
4.1 Generalising 	 and 	 dualising 	 the 	 third 	 list-
homomorphism	theorem
Less noticed, however, is that the theorem and its
proof dualise very well to unfolds on lists. Consider
the function fromTo (x, y) = [x, x + 1 . . . y]. One
may imagine three possible implementations: gener-
ating the list from the left, from the right, and from
some arbitrary point in the middle. Is it true that any
function that can be deﬁned as both an unfoldr and
an unfoldl can be written as one that generates the
list from the middle?
We show in this paper that  the answer is  posi-
tive. This is not only of theoretical interest but could
also have a practical impact. First, there are sev-
eral  efﬁcient  algorithms that  are based on divide-
and-conquer sequence generation, such as Quicksort.
Moreover, the performance bottleneck in distributed
parallel computing often lies in data distribution. Be-
ing able to generate the list anywhere allows us to
distribute seeds of sublists and simultaneously gen-
erate from them, and thereby reduce communication
costs and increase parallelism.
By formulating the third list homomorphism theo-
rem in point-free, relational style, we have dualised
the theorem to unfolds, as well as generalised the
theorem to both folds and unfolds for trees. While
the  original  theorem establishes  a  connection  be-
tween insertion sort and merge sort, the dual theorem
shows a similar connection between selection sort
and quicksort. We have also derived an efﬁcient par-
allel algorithm for scan based on unfolds. To the best
of the authors' knowledge, while there has been many
studies on parallel programming based on structural
recursion, none have considered the dual --- list gen-
eration in the form of unhom.
The theorem generalises nicely to trees: if a func-
tion processes or generates a tree both downwards
and upwards, it may process or generate the tree from
the middle. Finally, we have also presented an exam-
ple that shows how a relational view may shed new
light on an old topic by revealing its hidden symme-
try. The authors believe that relational methods de-
serve to be appreciated more among functional pro-
grammers.
4.2 Constructing	List	Homomorphisms	from	Proofs
One naturally wonders whether list homomorphisms
can be mechanically constructed. Hu et al. [14] pro-
posed to  construct  list  homomorphisms by fusion
with existing ones. Geser and Gorlatch [11] applied
term rewriting techniques to construct a deﬁnition of
(⊙) from that of (◁) and (▷). More recent develop-
ments attempt to apply the third list-homomorphism
theorem to mechanical construction of list homomor-
phisms. Morita et al. [17] proposed to automatically
construct (⊙) by picking some weak inverse h−1
and simplifying h (h−1 x ++ h−1 y). For sum, one
might pick sum
−1 x = [x], and the system simpliﬁes
sum (sum−1 x++ sum−1 y) to x+ y. For the method
to work, it is preferred that h−1 has a simple, non-
recursive deﬁnition, such that h (h−1 x++h−1 y) can
be easily simpliﬁed. The method may even be gen-
eralised to trees [16].
Elegant as the approach is, when put into practice,
however, one cannot help feeling that we have been
solving the wrong problem. In all but the most sim-
ple cases, efforts are needed to prove that the foldr
and foldl deﬁnitions of h do deﬁne the same func-
tion. It occurs often that one of (◁) or (▷) is picked
as the deﬁnition of h, while the other is much harder
to ﬁnd. If the two deﬁnitions coincide so obviously
that a proof is not necessary, like in the case of sum,
the choice of (⊙) is often equally trivial that a calcu-
lation/proof would be merely stating the obvious.
Once we have both (◁) and (▷), the operator (⊙)
3
other speciﬁes the one at target (the hard one). For
instance, the (easy) adjoint of whole division is mul-
tiplication. This setting, which suggests that ``math-
ematics comes in easy/hard pairs'', provides a very
natural way to split a problem in its parts.
The main contribution of this article is to be found
in the proposed process of deriving, using the alge-
bra of programming [3], the algorithmic implemen-
tation of Galois adjoints, expressed in closed for-
mulæ which record what is ``easy'' and ``hard'' to im-
plement. However, instead of resorting to explicit,
point-level suprema, as is usual in textbooks, a new
relational combinator (named shrinking) is proposed
which expresses such formulæ at pointfree level.
Thanks to the rich algebra of this combinator, al-
ready sketched in [9], one is able to express and gen-
eralize previous results on dynamic and greedy pro-
gramming by Bird and de Moor [3], in a way which
dispenses with the heavy artillery of power-allegories
[10]. As a side effect, such results become accessible
to a wider audience and easier to apply.
References
[1] L. Augustsson. Cayenne -- a language with de-
pendent types. In M. Felleisen, P. Hudak, and
C. Queinnec, editors, International Conference
on Functional Programming, pages 239--250.
ACM Press, 1998.
[2] R. S. Bird. An introduction to the theory of
lists. In M. Broy, editor, Logic of Programming
and Calculi of Discrete Design, number 36 in
NATO ASI Series  F,  pages  3--42.  Springer-
Verlag, 1987.
[3] R. S. Bird and O. de Moor. Algebra of Pro-
gramming. International Series in Computer
Science. Prentice Hall, 1997.
[4] J. Cheney and R. Hinze. First-class phantom
types. Technical Report TR2003-1901, Cornell
University, 2003.
[5] Y.-Y. Chi and S.-C. Mu. Constructing list ho-
momorphisms from proofs. In H. Yang, editor,
Asian Symposium on Programming Languages
and Systems, number 7078 in Lecture Notes
in Computer Science, pages 74 -- 88. Springer
Verlag, 2011.
[6] M. I. Cole. Algorithmic Skeletons: Structural
Management of Parallel Computation. MIT
Press, 1989.
[7] The Coq Development Team, LogiCal Project.
The  Coq  Proof  Assistant  Reference  Manual,
2006.
[8] P. Dybjer. Inductive families. Formal Aspects
of Computing, 6(4):440--465, 1994.
[9] M. A. Ferreira and J. N. F. d. Oliveira. Varia-
tions on an Alloy-centric tool-chain in verifying
a journaled ﬁle system model. Technical Re-
port DI-CCTC-10-07, Univ. of Minho, January
2010.
[10] P. J.  Freyd and A. Ščedrov. Categories, Al-
legories, volume 39 of Mathematical Library.
North-Holland, 1990.
[11] A. Geser and S. Gorlatch. Parallelizing func-
tional  programs  by  generalization. Journal
of  Functional  Programming, 9(6): 649--673,
1999.
[12] J. Gibbons. The third homomorphism theorem.
Journal of Functional Programming, 6(4):657-
-665, 1996.
[13] C. Gonzalía. Relations in Dependent Type The-
ory. PhD thesis, Chalmers University of Tech-
nology, 2006.
5
國科會補助計畫衍生研發成果推廣資料表
日期:2012/10/30
國科會補助計畫
計畫名稱: 以依值型別與對話型別確保並行程式之正確性
計畫主持人: 穆信成
計畫編號: 100-2221-E-001-003- 學門領域: 程式語言與軟體工程
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
