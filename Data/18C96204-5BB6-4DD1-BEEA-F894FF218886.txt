2行政院國家科學委員會專題研究計畫成果報告
生產系統中伴隨著事後序列相依的設置時間在具自然對數函數之學習效果或退化現象
下最佳化之研究
Studying some models with past-sequence-dependent setups and natural logarithmical
learning effect and deterioration consideration for some single-machine and some flowshop
problems
計畫編號: NSC 97-2221-E-060 -MY2
執行期限:2008 年 08 月 01 日至 2010 年 07 月 31 日
主持人:吳進家 逢甲大學統計系
計畫參與人員:陳玄康 劉銘治、陳政韋、劉敬良、洪瑋玲 逢甲大學統計暨精算
研究所
一、中文摘要
最近，Wang (2007)更進一步指出一個案例；當製
造情況處於競爭性的狀況，廠方為了提供顧客更多
樣化的產品，公司將會逐漸縮短生產流程，不斷更
新產品，員工處於這種情況下，員工必須花更多的
時間更替，又必須有效的處理之前工作。而其中隱
含著學習和忘記的效果就更加顯示其重要性。但
是，就個人所知，僅有極少的文獻涉及同時而有退
化和學習效果兩者兼具的情況。再者，Koulamas and
Kyparisis (2007)與 Biskup and Hermann (2007)
最近同時皆指出【在高科技製造業中常見到ㄧ整批
工作裡結合一整組的電子原件同時安裝在電子板
上，另一例子如鑽孔機在磨損倒至過去工作時間之
合加入到目前正在處理工作的時間理，此一考慮最
近 EJOR 文 獻 稱 為 後 序 列 相 依 的 設 置 時間】
(past-sequence-dependent setup time)。而此一
新的觀念尚未被考慮到同時具有學習效果與退化
效果的領域之中。因此，本研究計畫擬探討一個生
產系統中在具自然對數函數之學習效果與退化現
象下且伴隨著事後序列相依的設置時間排程問題
最佳化之研究。本研究計畫預計探討九個問題；在
單機排程的問題上；著眼於最大完工時間
(makespan) 、 所 有 工 作 的完工時間和 (total
completion time)、所有加權工作的完工時間和
(weighted total completion time)、以及所有工
作的最大延遲時間(maximum lateness)最小化相關
的最佳解等。若WSPT無法找到最佳解，我們將考慮
是否有其他辦法找特別解。另外，在流程工廠排程
的問題上，我們考慮到兩個流程工廠排程問題工作
時間有特別限制以及兩個流程工廠排程問題機器
有某些設限，這四個問題目標函數分別考慮最大完
工時間(makespan)與所有工作的完工時間和
(total completion time)最小值之最小化。
關鍵字：學習效果，最大完工時間，所有工作的完
工時間和，最大延遲時間。
Abstract
This project studies some single-machine and some
flowshop scheduling problems with natural
logarithmical learning and job-position deteriorating
effects co-existing past-sequence-dependent setup time
considerations. The motivations for this project still
have two. The first one is provided as follows;
Recently, Wang (2007) claimed that the phenomena of
learning effect and deteriorating jobs occurring
simultaneously can be found in real-life situation. For
example, as the manufacturing environment becomes
increasingly competitive, in order to provide
customers with greater product variety, organizations
are moving toward shorter production runs and
frequent product changes. The learning and forgetting
that workers undergo in this environment have thus
become increasingly important as workers tend to
spend more time in rotating among tasks and
responsibilities prior to becoming fully proficient.
These workers are often interrupted by product and
process change causing decrements in performance,
which we will refer to, for simplicity, as forgetting.
Considering learning and forgetting effects in
measuring productivity should be helpful in improving
the accuracy of production planning and productivity
estimation. The second is that Koulamas and Kyparisis
(in press) introduced the concept of
past-sequence-dependent setup times.
Past-sequence-dependent (psd) setup times occur, for
example, in high tech manufacturing environments,
‘‘in which a batch of jobs consists of a group of
electronic components mounted together on an
integrated circuit (IC) board’’ (Koulamas and
Kyparisis, in press). In addition to this un-readiness of
components, the wear-out of equipment (e.g. a drill) is
another example where the sum of processing times of
the prior jobs adds to the processing time of the actual
job. The concept of learning effect and deteriorating
jobs has been extensively studied in the literature.
However, to the best of our knowledge, the scheduling
problem with the effects of deterioration and learning
co-existing past-sequence-dependent setup time has
not been investigated. Therefore, this project will
4別，諸如：開始時間的線性函數、開始時間的分數
函數以及開始時間的非線性函數等三大類。例如，
單機方面：Browne 和 Yechiali(1990)考慮真實工
作處理時間為 i ip t ，其中 ip 是原預訂工作時間
(basic processing time)， i 是工作 i 的退化率，
而 t 是工作 i 的開始時間。Browne 和 Yechiali
(1990)以 i
i
p

的比率值，由小至大，可在解最大
完工時間(makespan)最小化的解。Mosheiov(1991)
則在真實工作時間為 i ip t 的模型下探討每個
工作完成時間之最小化(其中， 0p 為共同預定時
間， i 是工作 i 的退化率)。Mosheiov(1991)證明
此二問題之最佳解是退化率 V-型解(V-shape)。
Mosheiov(1994)將 i ip t 模型簡化為 it 模型，
分 別 針 對 目 標 函 數 準 則 最 大 完 工 時 間
(makespan)、總流程時間(total flowtime)、總延
遲時間(total lateness)、遲誤工作個數(number
of tardy jobs) 和 最 大 的 延 遲 時 間 (maximum
tardiness) 等 問 題 具 有 多 項 式 時 間 解
(polynomially solvable) 。 Bachman 和
Janiak(2000)，則證明了在真實工作時間假設為
i ip t 時最大延遲時間(maximum tardiness)的
最小化此一問題是一個難解的問題(NP-hard)，並
提出了兩個近似演算法來解此一問題。Cheng 與
Ding (2001) 證 明
max/,/1 Cddbaorap iiiii  與
 iiiiii Cddbaorap /,/1 為難解問題，
也 提 出 多 項 式 時 間 解 的 演 算 法 解
max/,/1 Cddbaorap iiiii  。Wang 和 Xia
(2005) 探 討 一 個 遞 減 退 化 現 象 的 模 型
tbatp iii )( 。而 Zhao 與 Tang(2005)則研究模
型 btatp ii )( 。至於其他不同準則和機環境設
定可參閱 1999 與 2004 年兩篇重要回顧的文章
Alidaee Womer(1999)與 Cheng et. al.(2004)。據
本人所知，至今尚未有學者研究【生產系統中在具
自然對數函數之退化現象且伴隨著事後序列相依
的設置時間之若干單機與流程工廠之研究】。
三、研究結果與討論
本計畫是研究【生產系統中在具自然對數函數
之學習效果與退化現象下且伴隨著事後序列相依
的設置時間排程問題最佳化之研究】。本計畫是二
年期的計畫預定執行二年。第一年計畫準備執行兩
個主題；主題之一為【生產系統中具自然對數函數
之學習效果之若干單機排程問題之研究】。而主題
之二則為【生產系統中在具自然對數函數之退化現
象且伴隨著事後序列相依的設置時間之若干單機
與流程工廠排程問題之研究】。第二年準備執行的
主題則為【生產系統中在具自然對數函數之學習效
果與退化現象下且伴隨著事後序列相依的設置時
間排程問題最佳化之研究】。我們已經完成在第
一、二年中之項目。分別簡述如下；
主題一之一 ：我們已經完成一個生產系統中具自
然對數函數之學習效果之若干單機排程問題之研
究。針對主題一之一，我們完成；
(a) 在具有自然對數函數之學習效果下單機排程最
大完工時間(makespan)最小化問題之解。
(b) 在具有自然對數函數之學習效果下單機排程每
個工作件完工時間之和(total completion
time) 最小化問題之解。
(c) 在具有自然對數函數之學習效果下單機排程每
個工作件的加權完工時間和(sum of the
weighted completion time) 最小化問題之
解。
(d) 在具有自然對數函數之學習效果下單機排程和
最大延遲時間等準則函數(maximum latenss)
最小化問題之解。
主題一之二 ：我們完成一個生產系統中在具自然
對數函數之退化現象且伴隨著事後序列相依的設
置時間之若干單機與流程工廠排程問題之研究。針
對主題一之二，我們已完成；
(a) 在具有自然對數函數之退化現象下且伴隨著事
後序列相依的設置時間且單機排程最大完工時
間(makespan)最小化問題之解。
(b) 在具有自然對數函數之退化現象下且伴隨著事
後序列相依的設置時間且單機排程每個工
作件完工時間之和(total completion time)
最小化問題之解。
(c) 在具有自然對數函數之退化現象下且伴隨著事
後序列相依的設置時間且單機排程每個工
作 件 的 加 權 完 工 時 間 和 (sum of the
weighted completion time) 最小化問題之
解。
(d) 在具有自然對數函數之退化現象下且伴隨著事
後序列相依的設置時間且單機排程和最大延
遲時間等準則函數(maximum latenss) 最小
化問題之解。
(e) 在有自然對數函數之退化現象下且具伴隨著事
後序列相依的設置時間且單機排程 每個工作
件的延遲時間之和(sum of job tardiness) 最
小化問題之解。
主題二：推導五個單機排程具有更一般化的伴隨著
事後序列相關設置時間自然對數學習效果與
位置退化現象模型下的最佳解證明與四個多
機流程工廠具有更一般化的伴隨著事後序列
相關設置時間自然對數學習效果與位置退化
現象模型下的最佳解證明。
我們完成；推導五個單機排程在更一般化的伴隨著
事後序列相關設置時間自然對數學習效果與位置
退化現象模型下的證明；導出最大完工時間
(makespan)最小化相關的最佳解、導出所有工作的
完工時間和(total completion time)最小化相關
的最佳解、所有加權工作的完工時間和(weighted
total completion time)最小化相關的最佳解。EDD
rule (earliest due-date first)可解所有工作的
最大延遲時間(maximum lateness)最小化相關的最
佳解。
6forgetting considerations. Production and Operations
Management 3, 118–132.
31. Lin, B.M.T. Complexity results for single-machine
scheduling with positional learning effects. Journal of
the Operational Research Society, in press.
32. Mosheiov, G., 2001a. Scheduling problems with a
learning effect. European Journal of Operational
Research 132, 687–693.
33. Mosheiov, G., 2001b. Parallel machine scheduling
with a learning effect. Journal of the Operational
Research Society 52, 1–5.
34. Mosheiov, G., Sidney, J.B., 2003. Scheduling with
general job-dependent learning curves. European
Journal of Operational Research 147,665–670.
35. Mosheiov, G., Sidney, J.B., 2005. Note on
scheduling with general learning curves to minimize
number of tardy jobs. Journal of the Operational
Research Society 56, 110–112.
36. Rohrbach, A., 1927. Economical production of
all-metal airplanes and seaplanes. Journal of the
Society of Automotive Engineers 20, 57–66.
37. Sterman, J.D., 1994. Learning in and about
complex systems. System Dynamics Review 10,
291–330.
38. Thurstone, L.L., 1919. The learning curve
equation. Psychological Monographs 26, 1–51.
39. Upton, D.M., Kim, B., 1998. Alternative methods
of learning and process improvement in manufacturing.
Journal of Operations Management 16, 1–20.
40. Venezia, I., 1985. On the statistical origins of the
learning curve. European Journal of Operational
Research 19, 191–200.
Wang, J.-B., 2006. A note on scheduling problems
with learning effects and deteriorating jobs.
International Journal of Systems Science 37,827–833.
41. Wang, J.-B., 2007. Single-machine scheduling
problems with the effects of learning and deterioration.
Omega 35, 397–402.
42. Wang, J.-B., Xia, Z.-Q., 2005. Flow-shop
scheduling with a learning effect. Journal of the
Operational Research Society 56, 1325–1330.
43. Wang, X., Cheng, T.C.E., 2007. Single-machine
scheduling with deteriorating jobs and learning effects
to minimize the makespan. European Journal of
Operational Research 178, 57–70.
44. Webb, G.K., 1994. Integrated circuit (IC) pricing.
High Technology Management Research 5 (II),
247–260.
45. Wright, T.P., 1936. Factors affecting the cost of
airplanes. Journal of Aeronautical Sciences 3,
122–128.
46. Wu, C.-C., Lee, W.-C., Chen, T., 2007a. Heuristic
algorithms for solving the maximum lateness
scheduling problem with learning considerations.
Computers and Industrial Engineering 52, 124–132.
47. Wu, C.-C., Lee, W.-C., Wang, W.C., 2007b. A
two-machine flowshop maximum tardiness scheduling
problem with a learning effect. International Journal
of Advanced Manufacturing Technology 31, 743–750.
48. Yang, D.-L., Kuo, W.-H. Single-machine
scheduling with an actual time-dependent learning
effect. Journal of the Operational Research Society, in
press.
49. Yelle, L.E., 1979. The learning curve: Historical
review and comprehensive survey. Decision Sciences
10, 302–328.
50. Zangwill, W.I., Kantor, P.B., 1998. Toward a
theory of continuous improvement and the learning
curve. Management Science 44, 910–920.
51. Zhao, C.-L., Zhang, Q.-L., Tang, H.-Y., 2004.
Machine scheduling problems with learning
effects. Dynamics of Continuous, Discrete and
Impulsive Systems, Series A: Mathematical
Analysis 11, 741–750.
退化現象相關之參考文獻：
52. Browne S, Yechiali U. Scheduling deteriorating
jobs on a single processor. Operations Research 1990;
38: 495-498.
53. Mosheiov G. V-shaped policies for scheduling
deteriorating jobs. Operations Research, 1991;39:
979-991.
54. Sundararaghavan PS, Kunnathur AS, Single
machine scheduling with start time dependent
processing times: some solvable cases, European
Journal of Operational Research, 1994, 78: 394-403.
55. Mosheiov G, Scheduling jobs with step-
deterioration: minimizing makespan on a single and
multi-machine, Computers and Industrial Engineering,
1995; 28(4): 869-879.
56. Cheng TCE, Ding Q, The complexity of
scheduling starting time dependent task with release
dates, Information Processing Letters, 1998; 65:
75-79.
57. Bachman A, Janiak A, Minimizing maximum
lateness under linear deterioration, European Journal
of Operational Research, 2000; 126: 557-566.
58. Cheng TCE, Ding Q, Single machine scheduling
with step-deteriorating processing times, European
Journal of Operational Research, 2001; 134(3):
623-630.
59. Bachman A, Janiak A, Kovalov MY, Minimizing
the total weighted completion time of deteriorating
jobs, Information Processing Letters, 2002; 81: 81-84.
60. C.T. Ng, T.C.E. Cheng, A. Bachman, Three
scheduling problems with deteriorating jobs to
minimize the total completion time, Information
Processing Letters 81(6) (2002) 327-333.
61. T.C.E. Cheng, Q. Ding, Scheduling start time
dependent tasks with deadlines and identical initial
processing times on a single machine, Computers and
Operations Research 30(1) (2003) 51-62.
62.T.C.E. Cheng, Q. Ding, M.Y. Kovalyov, A.
Bachman, A. Janiak, Scheduling jobs with piecewise
linear decreasing processing times, Naval Research
Logistics 50(6) (2003) 531-554.
63.Chen ZL, Parallel machine scheduling with time
dependent processing times, Discrete Applied
Mathematics, 1996; 70: 81-94.
8multitasking environments. European Journal of
Operational Research, 176(1), 193-209.
97.Wu, C.-C., Shiau, Y.-R., Lee, W.-C., 2008.
Single-machine group scheduling problems with
deterioration consideration. Computers & Operations
Research,35(5), 1652-1659.
98.W, J.-B., 2007. Flow shop scheduling problems
with decreasing linear deterioration under dominant
machines. Computers & Operations Research, 34(7),
2043-2058.
99.Wang, X., Edwin Cheng, T.C. 2007.
Single-machine scheduling with deteriorating jobs and
learning effects to minimize the makespan. European
Journal of Operational Research, 178(1), 57-70.
100.Wang, J.-B., Ng, C.T., Cheng, T.C.E., 2006.
Single-machine scheduling with deteriorating jobs
under a series–parallel graph constraint. Computers &
Operations Research, In Press, Corrected Proof.
101.Wang, J.-B., Daniel Ng, C.T., Cheng, T.C.E., Liu,
L.-L., 2006. Minimizing total completion time in a
two-machine flow shop with deteriorating jobs.
Applied Mathematics and Computation, 180(1),
185-193.
102.Wang, J.-B., Xia, Z.-Q., 2006. Flow shop
scheduling with deteriorating jobs under dominating
machines. Omega, 34(4), 327-336.
103.Wu, C.-C., Lee, W.-C., 2003. Scheduling linear
deteriorating jobs to minimize makespan with an
availability constraint on a single machine.
Information Processing Letters, 87(2), 89-93.
104.Voutsinas, T.G., Pappis, C.P., 2002.Scheduling
jobs with values exponentially deteriorating over time.
International Journal of Production Economics, 79(3),
163-169.
105.Ng, C.T., Cheng, T.C.E., Bachman, A., Janiak, A.,
2002. Scheduling jobs with values exponentially
deteriorating over time. Information Processing
Letters,81(6), 327-333.
106.Yong, M.J., Cheng, T.C.E., 2006. Scheduling
linear deteriorating jobs with an availability constraint
on a single machine. Theoretical Computer
Science,362(1-3), 115-126.
107.Wu, C.-C., Lee, W.-C., 2006, Two-machine
flowshop scheduling to minimize mean flow time
under linear deterioration. International Journal of
Production Economics, 103(2), 572-584.
108.Zhao, C.-L., Tang, H.-Y., 2005. Single machine
scheduling problems with deteriorating jobs.
Applied Mathematics and Computation, 161(3),
865-874.
附件如下:
bicriterion single-machine scheduling problem, and Lee and Wu [20] considered the problem of minimizing the total com-
pletion time in a two-machine ﬂowshop. Wang [30] studied a model in which the job processing times are functions of their
starting times and positions in the sequence. Koulamas and Kyparisis [16] introduced a general sum-of-job-processing-
times-based learning effect model for scheduling, in which employees learn more if they perform a job with a longer pro-
cessing time. Kuo and Yang [19] considered a sum-of-job-processing-times-based learning effect model. They provided
the optimal solution of the total completion time problem. Recently, Biskup [3] provided a comprehensive review of sched-
uling research with learning considerations. In particular, he classiﬁed the learning models into two types, namely position-
based learning and sum-of-processing-times-based learning. He further claimed that position-based learning assumes that
learning takes place by processing time-independent operations like setting up machines. This seems to be a realistic
assumption for the case where the actual processing time of a job is mainly machine-driven and has no (or near to zero)
human interference. The sum-of-processing-times-based approach takes into account the experience that workers have
gained from producing the jobs. This might, e.g., be the case for offset printing, where running the press itself is a highly
complicated and error-prone process.
Recently, Eren [7] proposed a non-linear mathematical programming model for a single-machine scheduling problem
with unequal release dates and learning effect. Wang et al. [31] studied some scheduling problems with a time-dependent
learning effect. They provided several examples to show that the classical scheduling rules do not yield optimal solutions for
the problems to minimize the weighted sum of completion times, maximum lateness and number of tardy jobs. They also
analyzed their worst-case error bounds for the classical scheduling rules. Eren and Güner [6] considered a two-machine
ﬂowshop with position-based learning where the objective is to minimize a weighted sum of the total completion time
and makespan. They applied integer programming to solve problems up to 30 jobs, and utilized a heuristic algorithm and
a tabu search based heuristic algorithm to handle large-sized problems. Janiak and Rudek [11] proposed an experience-based
learning effect. They proved that the problem to minimize the makespan under the Bachman and Janiak [1] model remains
polynomially solvable when the experience-based approach is applied, but the same problem under the more general Cheng
and Wang [4] model becomes strongly NP-hard in the presence of the new learning effect. Janiak and Rudek [12] introduced
a new model of learning into the scheduling ﬁeld that relaxes one of the rigid constraints by assuming that each job provides
a different experience to the processor. They formulated the shape of the learning curve as a non-increasing k-stepwise func-
tion. Furthermore, they proved that the makespan problem is polynomially solvable if every job provides the same experi-
ence to the processor, and it becomes NP-hard if the experiences are different. Moreover, Janiak and Rudek [14] proposed a
new experience-based learning model, where the job processing times are described by S-shaped functions dependent on
the experience of the processor. They proved that the problem to minimize the makespan on a single processor is NP-hard
or strongly NP-hard with most of the commonly considered learning models. Janiak et al. [15] investigated the single-
processor problem to minimize the makespan with an S-shaped learning model. They proved that the problem is strongly
NP-hard even if the experience provided by each job is equal to its normal processing time. They constructed a branch-
and-bound algorithm and some fast heuristic methods to ﬁnd the optimal and near-optimal solutions, respectively.
Cheng et al. [5] introduced a new scheduling model with learning effects in which the actual processing time of a job is a
function of the sum of the normal processing times of the jobs already processed and of the job’s scheduled position. In addi-
tion, Wu and Lee [33] studied the impact of the learning effect on the problem to minimize the total completion time in an
m-machine permutation ﬂowshop. Eren [8] developed a mathematical programming model for a parallel-machine schedul-
ing problem with a learning effect. Koulamas and Kyparisis [17] introduced some type of learning effect on setup times
where the setup times can theoretically grow substantially when the batch size n is large.
However, the actual processing time of a given job drops to zero precipitously as the number of jobs increases in the po-
sition-based learning model and when the normal job processing times are large in the sum-of-processing-times-based
learning model classiﬁed in Biskup [3]. Motivated by this observation, we propose a new learning model where the actual
job processing time is a function of the sum of the logarithm of the processing times of the jobs already processed. The use of
the logarithm function can be justiﬁed on the grounds that learning, like other human activities, is subject to the law of
diminishing return. The remainder of this paper is organized as follows. We present the problem formulation in the next
section. In Section 3, we provide polynomial-time solution algorithms for some single-machine problems. Finally, we con-
clude the ﬁndings in the last section.
2. Problem formulation
Formulation of the proposed learning model in the single-machine case is as follows. There are n jobs ready to be pro-
cessed on a single-machine. Each job j has a normal processing time pj with lnpj P 1, a weight wj and a due date dj. Due
to the learning effect, the actual processing time of job j is
pj½r ¼ pj 1þ
Xr1
l¼1
ln p½l
 !a
;
if it is scheduled in the rth position in a sequence, where p½l is the normal processing time of the job scheduled in the lth
position in the sequence, and a 6 0 is the learning index. The proposed learning model is a special case of the experi-
ence-based learning model of Janiak and Rudek [14] with ej ¼ ln pj for j ¼ 1;2; . . . ;n.
3128 T.C.E. Cheng et al. / Information Sciences 179 (2009) 3127–3135
Substituting k ¼ pjpi, x ¼ ln pi, and c0 ¼
1
1þ
Pr1
l¼1 lnp½l
into (5), we derive from Lemma 3 that
CiðS0Þ  CjðSÞ ¼ pi 1þ
Xr1
l¼1
lnp½l
 !a
½ðk 1Þ þ ð1þ c0 ln kþ c0xÞa  kð1þ c0xÞaP 0;
since kP 1, xP 1, 0 < c0 < 1, and a < 0. Thus, S dominates S
0. Therefore, repeating this interchange argument for jobs not
sequenced in the SPT order completes the proof of the property. h
Property 2. For the 1=pj½r ¼ pj 1þ
Pr1
l¼1 ln p½l
 a.P
Cj problem, the optimal schedule is obtained by sequencing jobs in the SPT
order.
Proof. The proof is omitted since it is similar to that of Property 1. h
Smith [29] showed that the weighted smallest processing time (WSPT) rule yields an optimal schedule for the classical
single-machine scheduling problem to minimize the total weighted completion time, i.e., sequencing jobs in non-decreasing
order of pj=wj, where wj is the weight of job j. However, this rule does not yield an optimal schedule under the proposed
model, as shown in the following example.
Example 1. Let n ¼ 2, p1 ¼ 12, p2 ¼ 8, w1 ¼ 25, w2 ¼ 15, and a ¼ 0:5. The WSPT sequence (1,2) yields a total weighted
completion time of 544.28, while the sequence (2,1) yields the optimal value of 490.96.
Property 3. For the 1=pj½r ¼ pj 1þ
Pr1
l¼1 lnp½l
 a.P
wjCj problem, the optimal schedule is obtained by sequencing jobs in non-
decreasing order of pi=wi if the processing times and the weights are agreeable, i.e., pi 6 pj implies wi P wj for all the jobs i and j.
Proof. Suppose that pjpi P
wj
wi
P 1. Since pi 6 pj, we have from Property 1 that CjðSÞ 6 CiðS0Þ. Thus, to show that S dominates S0,
it sufﬁces to show that wiCiðSÞ þwjCjðSÞ 6 wjCjðS0Þ þwiCiðS0Þ. From (1)–(4), we have
½wjCjðS0Þ þwiCiðS0Þ  ½wiCiðSÞ þwjCjðSÞ ¼ ðwipj wjpiÞ 1þ
Xr1
l¼1
ln p½l
 !a
þwjpj 1þ
Xr1
l¼1
ln p½l
 !a
 1þ
Xr1
l¼1
ln p½l þ ln pi
 !a" #
wipi 1þ
Xr1
l¼1
ln p½l
 !a
 1þ
Xr1
l¼1
ln p½l þ ln pj
 !a" #
: ð6Þ
Substituting k ¼ pj=wjpi=wi ; c1 ¼
wj
wi
; c0 ¼ 1
1þ
Pr1
l¼1 lnp½l
, and x ¼ ln pi into (6), we have from Lemma 8 that
½wjCjðS0Þ þwiCiðS0Þ  ½wiCiðSÞ þwjCjðSÞ ¼ wjpi 1þ
Xr1
l¼1
ln p½l
 !a
ðk 1Þ þ kc1½1 ð1þ c0xÞa

 1
c1
½1 ð1þ c0 ln kþ c0xþ c0 ln c1Þa

P 0;
since kP 1; c1 P 1; 0 < c0 < 1; xP 1 and a < 0. Thus, S dominates S
0. Repeating this interchange argument for jobs not se-
quenced in the WSPT order completes the proof of Property 3. h
In the following we show that the earliest due date (EDD) rule gives an optimal solution for the problems to minimize the
total tardiness, maximum lateness and maximum tardiness if the job processing times and the due dates are agreeable, i.e.,
di 6 dj implies pi 6 pj for all the jobs i and j.
Property 4. For the 1=pj½r ¼ pj 1þ
Pr1
l¼1 lnp½l
 a.P
Ti problem, the optimal schedule is obtained by sequencing jobs in non-
decreasing order of di if the job processing times and due dates are agreeable.
Proof. Suppose that di 6 dj, which implies pi 6 pj. The total tardiness of the ﬁrst r  1 jobs are the same since they are pro-
cessed in the same order. Since the makespan is minimized by the SPT rule (Property 1), the total tardiness of partial
sequence p0 in S will not be greater than that of the partial sequence p0 in S0. Thus, to prove that the total tardiness of S
is less than or equal to that of S0, it sufﬁces to show that TiðSÞ þ TjðSÞ 6 TjðS0Þ þ TiðS0Þ.
From (1)–(4), we derive that the tardiness of jobs i and j in S are
TiðSÞ ¼ max Aþ pi 1þ
Xr1
l¼1
ln p½l
 !a
 di;0
( )
3130 T.C.E. Cheng et al. / Information Sciences 179 (2009) 3127–3135
The earliest due date rule provides an optimal schedule for the classical single-machine scheduling problem to minimize
the maximum lateness. However, it does not yield an optimal schedule under the proposed model, as shown in the following
example.
Example 2. Let n ¼ 2, p1 ¼ 100, p2 ¼ 60, d1 ¼ 101, d2 ¼ 102, and a ¼ 0:5. The EDD sequence (1,2) yields a maximum
lateness of 23.34, while the sequence (2,1) yields the optimal value of 3.31.
Property 5. For the 1=pj½r ¼ pj 1þ
Pr1
l¼1 lnp½l
 a
=Lmax problem, the optimal schedule is obtained by sequencing jobs in non-
decreasing order of di if the job processing times and due dates are agreeable.
Proof. By deﬁnition, the lateness of jobs i and j in S and jobs j and i in S0 are, respectively,
LiðSÞ ¼ Aþ pi 1þ
Xr1
l¼1
ln p½l
 !a
 di;
LjðSÞ ¼ 2Aþ pi 1þ
Xr1
l¼1
ln p½l
 !a
þ pj 1þ
Xr1
l¼1
lnp½l þ ln pi
 !a
 dj;
LjðS0Þ ¼ Aþ pj 1þ
Xr1
l¼1
ln p½l
 !a
 dj;
and
LiðS0Þ ¼ 2Aþ pj 1þ
Xr1
l¼1
ln p½l
 !a
þ pi 1þ
Xr1
l¼1
lnp½l þ lnpj
 !a
 di:
Suppose that di 6 dj, which implies pi 6 pj. Interchanging jobs i and j has no impact on the maximum lateness of the jobs in
subsequence p since they are processed in the same order. As the makespan is minimized by the SPT rule in Property 1, the
maximum lateness of the jobs in subsequence p0 of S cannot be larger than that of the jobs in p0 of S0. To show that S dom-
inates S0, it sufﬁces to show that maxfLiðSÞ; LjðSÞg 6 LiðS0Þ.
Since pi 6 pj, we have
LiðS0Þ  LiðSÞ ¼ Aþ ðpj  piÞ 1þ
Xr1
l¼1
ln p½l
 !a
þ pi 1þ
Xr1
l¼1
lnp½l þ lnpj
 !a
> 0:
Since pi 6 pj and di 6 dj, we have from Property 1 that
LiðS0Þ  LjðSÞ ¼ ðpj  piÞ 1þ
Xr1
l¼1
lnp½l
 !a
þ pi 1þ
Xr1
l¼1
ln p½l þ ln pj
 !a
 pj 1þ
Xr1
l¼1
ln p½l þ ln pi
 !a
 ðdi  djÞ > 0:
Thus, repeating this job interchange argument for all the jobs not sequenced in the EDD rule completes the proof of Property
5. h
Property 6. For the 1=pj½r ¼ pj 1þ
Pr1
l¼1 ln p½l
 a
=Tmax problem, an optimal schedule is obtained by sequencing jobs in non-
decreasing order of di if the job processing times and due dates are agreeable.
Proof. The proof is omitted since it is similar to that of Property 5. h
4. Conclusions
Scheduling problemswith learning effects have capturedmany scheduling researchers’ attention in recent years. However,
the actual processing time of a given job drops to zero precipitously as the number of jobs increases in the position-basedmod-
el or when the normal job processing times are large in the sum-of-processing-times-based model. Motivated by this obser-
vation, we proposed a new learningmodelwhere the actual job processing time is a function of the sumof the logarithmof the
processing times of the jobs already processed. In particular,we showed that the problems tominimize themakespan and total
completion time on a single-machine are polynomially solvable under the proposed learning model. In addition, we showed
that the single-machine scheduling problems tominimize the total weighted completion time, total tardiness, maximum late-
ness and maximum tardiness are polynomially solvable under some agreeable conditions on the problem parameters.
Acknowledgements
We are thankful to the Editor and the anonymous referees for their helpful comments on earlier versions of our paper.
This paper was supported in part by the NSC under grant number NSC 97-2221-E-060-MY2.
3132 T.C.E. Cheng et al. / Information Sciences 179 (2009) 3127–3135
Lemma 7. Let FðxÞ ¼ 1þ c1½1 ð1þ c0xÞa þ ac0c1 ð1þ c0xþ c0 ln c1Þ
a1, then FðxÞP 0 for xP 1, c1 P 1, 0 < c0 < 1, and a < 0.
Proof. Taking the ﬁrst derivative of FðxÞ with respect to x, we have
F 0ðxÞ ¼ ac0c1ð1þ c0xÞa1 þ aða 1Þc
2
0
c1
ð1þ c0xþ c0 ln c1Þa2:
Since c1 P 1, 0 < c0 < 1, xP 1, and a < 0, we have F
0ðxÞ > 0. This implies that F(x) is an increasing function of x. From Lemma
6, we have
FðxÞP Fð1Þ ¼ 1þ c1½1 ð1þ c0Þa þ ac0c1 ð1þ c0 þ c0 ln c1Þ
a1 P 0: 
Lemma 8. Let GðkÞ ¼ ðk 1Þ þ c1k½1 ð1þ c0xÞa  1c1 ½1 ð1þ c0 ln kþ c0xþ c0 ln c1Þ
a, then GðkÞP 0, for kP 1; c1 P 1; 0 <
c0 < 1; xP 1, and a < 0.
Proof. Taking the ﬁrst and the second derivatives of GðkÞ with respect to k, we have
G0ðkÞ ¼ 1þ c1½1 ð1þ c0xÞa þ c0að1þ c0 ln kþ c0xþ c0 ln c1Þ
a1
kc1
and
G00ðkÞ ¼ aða 1Þc
2
0ð1þ c0 ln kþ c0xþ c0 ln c1Þa2
c1k
2 
ac0ð1þ c0 ln kþ c0xþ c0 ln c1Þa1
c1k
2 :
Since kP 1; c1 P 1; 0 < c0 < 1; xP 1, and a < 0, we have G
00ðkÞP 0. This implies that G0ðkÞ is an increasing function of k.
From Lemma 7, we have G0ðkÞP G0ð1ÞP 0. This implies that GðkÞ is an increasing function of k. Hence, we have from Lemma
5 that
GðkÞP Gð1Þ ¼ c1½1 ð1þ c0kÞa  1c1 ½1 ð1þ c0xþ c0 ln c1Þ
aP 0: 
References
[1] A. Bachman, A. Janiak, Scheduling jobs with position dependent processing times, Journal of the Operational Research Society 55 (2004) 257–264.
[2] D. Biskup, Single-machine scheduling with learning considerations, European Journal of Operational Research 115 (1999) 173–178.
[3] D. Biskup, A state-of-the-art review on scheduling with learning effect, European Journal of Operational Research 188 (2008) 315–329.
[4] T.C.E. Cheng, G. Wang, Single machine scheduling with learning effect considerations, Annals of Operations Research 98 (2000) 273–290.
[5] T.C.E. Cheng, C.C. Wu, W.C. Lee, Some scheduling problems with sum-of-processing-times-based and job-position-based learning effects, Information
Sciences 178 (2008) 2476–2487.
[6] T. Eren, E. Güner, A bicriterion ﬂowshop scheduling with a learning effect, Applied Mathematical Modelling (2007), doi:10.1016/j.apm.2007.06.009.
[7] T. Eren, Minimizing the total weighted completion time on a single machine scheduling with release dates and a learning effect, Applied Mathematics
and Computation (2008), doi:10.1016/j.amc.2008.12.001.
[8] T. Eren, A note on minimizing maximum lateness in an m-machine scheduling problem with a learning effect, Applied Mathematics and Computation
(2008), doi:10.1016/j.amc.2008.12.003.
[9] J.T. Fernandez-Breis, D. Castellanos-Nieves, R. Valencia-Garcí, Measuring individual learning performance in group work from a knowledge integration
perspective, Information Sciences 179 (2009) 339–354.
[10] J. Heiser, B. Render, Operations Management, ﬁfth ed., Prentice Hall, Upper Saddle River, NJ, 1999.
[11] A. Janiak, R. Rudek, The learning effect: getting to the core of the problem, Information Processing Letters 103 (2007) 183–187.
[12] A. Janiak, R. Rudek, A new approach to the learning effect: beyond the learning curve restrictions, Computers and Operations Research (2007),
doi:10.1016/j.cor.2007.04.007.
[13] A. Janiak, R. Rudek, Viewpoint on: complexity results for single-machine scheduling with positional learning effects, Journal of the Operational
Research Society 59 (2008) 1430.
[14] A. Janiak, R. Rudek, Experience-based approach to scheduling problems with the learning effect, IEEE Transactions on Systems, Man, and Cybernetics
Part A (2008), doi:10.1109/TSMCA.2008.2010757.
[15] A. Janiak, W.A. Janiak, R. Rudek, A. Wielgus, Solution algorithms for the makespan minimization problem with the general learning model, Computers
and Industrial Engineering (2008), doi:10.1016/j.cie.2008.07.019.
[16] C. Koulamas, G.J. Kyparisis, Single-machine and two-machine ﬂowshop scheduling with general learning functions, European Journal of Operational
Research 178 (2007) 402–407.
[17] C. Koulamas, G.J. Kyparisis, Single-machine scheduling problems with past-sequence-dependent setup times, European Journal of Operational
Research 187 (2008) 1045–1049.
[18] M. Kang, D.I. Kang, J. Suh, J. Lee, An energy-efﬁcient real-time scheduling scheme on dual-channel networks, Information Sciences 178 (2008) 2553–
2563.
[19] W.H. Kuo, D.L. Yang, Minimizing the total completion time in a single-machine scheduling problem with a time-dependent learning effect, European
Journal of Operational Research 174 (2006) 1184–1190.
[20] W.C. Lee, C.C. Wu, Minimizing total completion time in a two-machine ﬂowshop with a learning effect, International Journal of Production Economics
88 (2004) 85–93.
[21] W.C. Lee, C.C. Wu, H.J. Sung, A bi-criterion single-machine scheduling problem with learning considerations, Acta Informatica 40 (2004) 303–315.
[22] J.H. Lee, S.H. Ha, Recognizing yield patterns through hybrid applications of machine learning techniques, Information Sciences 179 (2009) 844–850.
[23] G.C. Luh, C.H. Chueh, A multi-modal immune algorithm for the job-shop scheduling problem, Information Sciences 179 (2009) 1516–1532.
[24] B.M.T. Lin, Complexity results for single-machine scheduling with positional learning effects, Journal of the Operational Research Society 58 (2007)
1099–1102.
3134 T.C.E. Cheng et al. / Information Sciences 179 (2009) 3127–3135
Scheduling problems with deteriorating jobs and learning effects including
proportional setup times
T.C.E. Cheng a,*, Wen-Chiung Lee b, Chin-Chia Wub
aDepartment of Logistics and Maritime Studies, The Hong Kong Polytechnic University, Hung Hom, Kowloon, Hong Kong
bDepartment of Statistics, Feng Chia University, Taichung, Taiwan
a r t i c l e i n f o
Article history:
Received 28 January 2009
Received in revised form 25 June 2009
Accepted 18 November 2009
Available online 23 November 2009
Keywords:
Deteriorating jobs
Learning
Proportional setup times
a b s t r a c t
Recently, interest in scheduling with deteriorating jobs and learning effects has kept growing. However,
research in this area has seldom considered setup times. We introduce a new scheduling model in which
job deterioration and learning, and setup times are considered simultaneously. In the proposed model,
the actual processing time of a job is deﬁned as a function of the setup and processing times of the jobs
already processed and the job’s own scheduled position in a sequence. In addition, the setup times are
assumed to be proportional to the actual processing times of the already scheduled jobs. We derive poly-
nomial-time optimal solutions for some single-machine problems with or without the presence of certain
conditions.
 2009 Elsevier Ltd. All rights reserved.
1. Introduction
In conventional scheduling models, job processing times are
often assumed known and ﬁxed throughout the duration of job
processing. However, it can be found in many situations, where
the processing times of jobs might be prolonged due to deteriora-
tion or shortened due to learning over time. In the deterioration
case, e.g., the temperature of a molten iron ingot, while waiting
to enter a rolling machine, drops below a certain level and the
ingot needs to be reheated before rolling (Kunnathur & Gupta,
1990). In such environments, a job that is processed later con-
sumes more time than the same job if processed earlier. Scheduling
in this setting is known as ‘‘scheduling with deteriorating jobs”,
which was ﬁrst independently introduced by Gupta and Gupta
(1988), and Browne and Yechiali (1990). Since then, models of
scheduling with deteriorating jobs have been extensively studied
from a variety of perspectives. For instance, Cheng and Ding
(1998), Bachman, Cheng, Janiak, and Ng (2002), Ng, Cheng, and
Bachman (2002), Cheng, Ding, Kovalyov, Bachman, and Janiak
(2003), and Wu and Lee (2008) considered models, where the job
processing times are linear functions of their starting times.
Alidaee and Womer (1999) surveyed the rapidly growing litera-
ture, while Cheng, Ding, and Lin (2004) gave a detailed review of
scheduling problems with deteriorating jobs.
On the other hand, in the learning situation, Biskup (1999)
pointed out that repeated processing of similar tasks improves
workers’ skills, e.g., workers are able to perform setups, deal with
machine operations or software, or handle raw materials and com-
ponents at a faster pace. Scheduling in this setting is known as
‘‘scheduling with learning effects”. The pioneers that introduced
the concept of learning into the ﬁeld of scheduling were Biskup
(1999) and Cheng and Wang (2000). Since then, many researchers
have devoted much effort to studying this nascent and vivid area of
scheduling. Recently, Biskup (2008) presented a comprehensive re-
view of research on scheduling with learning effects. Eren (2009)
proposed a non-linear mathematical programming model for the
single-machine scheduling problem with unequal release dates
and learning effects. Eren and Güner (2008) considered a two-ma-
chine ﬂowshop with position-based learning, where the objective
is to minimize the weighted sum of the total completion time
and makespan. Janiak and Rudek (2009) introduced a new model
of learning into the scheduling ﬁeld that relaxes one of the rigid
constraints by assuming that each job provides a different experi-
ence to the processor. They formulated the shape of the learning
curve as a non-increasing k-stepwise function. Moreover, Janiak
and Rudek (2008) proposed a new experience-based learning mod-
el, where the job processing times are described by S-shaped func-
tions dependent on the experience of the processor. Janiak et al.
(2009) investigated the single-processor problem to minimize
the makespan with an S-shaped learning model. Chang et al.
(2009) considered the problem of scheduling a set of n indepen-
dent jobs on a single machine with a learning/aging effect.
Interest in scheduling with deteriorating jobs and learning ef-
fects has been growing since Lee (2004) assumed that the actual
processing time of a job j scheduled in position r of a sequence is
pj[r] = ajtra or pj[r] = (p0 + ajt)ra, where aj is the rate of job deteriora-
tion, t P 0 is the starting time of processing the job, a 6 0 is the
0360-8352/$ - see front matter  2009 Elsevier Ltd. All rights reserved.
doi:10.1016/j.cie.2009.11.008
* Corresponding author. Tel.: +852 2766 5216; fax: +852 2364 5245.
E-mail address: LGTcheng@polyu.edu.hk (T.C.E. Cheng).
Computers & Industrial Engineering 58 (2010) 326–331
Contents lists available at ScienceDirect
Computers & Industrial Engineering
journal homepage: www.elsevier .com/ locate/caie
scheduling problems introduced by Graham, Lawler, Lenstra, and
Rinnooy Kan (1979).
3. Some single-machine results
Before presenting the main results, we ﬁrst present two lem-
mas, which will be used in the proofs of the theorems in the sequel.
Lemma 1. cþ1þa1c0c1ð1þ c0xÞa11c1ð1þc0xÞa1P0 for 0 < c <
1,0 < c0 < 1, c1 > 1, xP 0 and m1 < a1 < 0.
Proof. Let hðxÞ ¼ cþ 1þ a1c0c1ð1þ c0xÞa11  c1ð1þ c0xÞa1 . Taking
the ﬁrst derivative of h(x) with respect to x, we have
h0ðxÞ ¼ a1ða1  1Þc20c1ð1þ c0xÞa12  a1c0c1ð1þ c0xÞa11:
Since m1 < a1 < 0, 0 < c0 < 1, c1 > 1 and xP 0, h(x) is an increas-
ing function for xP 0. Since hðxÞP hð0Þ ¼ cþ 1þ a1c0c1  c1 for
0 < c < 1, m1 < a1 < 0, 0 < c0 < 1 and c1 > 1, we have
hðxÞP 0
for 0 < c < 1, m1 < a1 < 0, 0 < c0 < 1 and c1 > 1, and xP 0. This com-
pletes the proof. h
Lemma 2. ðcþ1Þðh1Þþc1ð1þc0 loghþc0xÞa1 c1hð1þc0xÞa1 P0
for 0 < c < 1, hP1, c1 > 1, 0 < c0 < 1, x > 0 and m1 < a1 < 0.
Proof. Let f ðhÞ ¼ ðcþ 1Þðh 1Þ þ c1ð1þ c0 log hþ c0xÞa1  c1hð1þ
c0xÞa1 . Taking the ﬁrst and second derivatives of f(h) with respect
to h, we have
f 0ðhÞ ¼ ðcþ 1Þ þ a1c0c1ð1þ c0 log hþ c0xÞ
a11
h
 c1ð1þ c0xÞa1
and
f 00ðhÞ ¼ a1ða1  1Þc
2
0c1ð1þ c0 log hþ c0xÞa12
h2
 a1c0c1ð1þ c0 log hþ c0xÞ
a11
h2
:
Since hP 1, c1 > 1, 0 < c0 < 1, x > 0 and m1 < a1 < 0, f 00ðhÞ > 0.
Therefore, f0(h) is a non-decreasing function for hP 1. From
Lemma 1, we have
f 0ð1Þ ¼ cþ 1þ a1c0c1ð1þ c0xÞa11  c1ð1þ c0xÞa1 P 0:
Using the fact that f0(h) is a non-decreasing function for hP 1,
we see that f 0ðhÞP f 0ð1ÞP 0. Therefore, we obtain that f(h) is a
non-decreasing function for hP 1. Since f(1) = 0, we have
f ðhÞP 0
for 0 < c < 1, hP 1, c1 > 1, 0 < c0 < 1, x > 0 and m1 < a1 < 0. This com-
pletes the proof. h
Theorem 1. For the 1=pj½r ¼ pj 1þ
Pr1
l¼1 logp½l
 a1
ra2 ; spsd=Cmax
problem, the optimal schedule is obtained by sequencing jobs in the
shortest processing time (SPT) order.
Proof. Suppose pi 6 pj. Let S and S0 be two job schedules, where
the difference between S and S0 is a pairwise interchange of two
adjacent jobs i and j, i.e., S ¼ ðp i j p0Þ and S0 ¼ ðp j i p0Þ, where p
and p0 denote partial sequences. Furthermore, we assume that
there are r  1 jobs in p. Thus, jobs i and j are the rth and
(r + 1)th jobs in S, respectively, whereas jobs j and i are scheduled
in the rth and (r + 1)th positions in S0, respectively. In addition, let A
denote the completion time of the last job in p. To show that S
dominates S0, it sufﬁces to show that the (r + 1)th jobs in S and S0
satisfy the condition CjðSÞ 6 CiðS0Þ. By deﬁnition, the actual pro-
cessing times of job j in S and job i in S0 are given by
CjðSÞ ¼ Aþ pi 1þ
Xr1
l¼1
logp½l
 !a1
ra2 þ c
Xr1
l¼1
p½l
þ pj 1þ
Xr1
l¼1
logp½l þ logpi
 !a1
ðr þ 1Þa2
þ c
Xr1
l¼1
p½l þ pi 1þ
Xr1
l¼1
log p½l
 !a1
ra2
 !
ð1Þ
and
CiðS0Þ ¼ Aþ pj 1þ
Xr1
l¼1
logp½l
 !a1
ra2 þ c
Xr1
l¼1
p½l
þ pi 1þ
Xr1
l¼1
logp½l þ logpj
 !a1
ðr þ 1Þa2
þ c
Xr1
l¼1
p½l þ pj 1þ
Xr1
l¼1
logp½l
 !a1
ra2
 !
: ð2Þ
Taking the difference between (1) and (2), we obtain that
CiðS0Þ  CjðSÞ ¼ ðcþ 1Þðpj  piÞ 1þ
Xr1
l¼1
log p½l
 !a1
ra2
þ pi 1þ
Xr1
l¼1
logp½l þ logpj
 !a1
ðr þ 1Þa2
 pj 1þ
Xr1
l¼1
logp½l þ logpi
 !a1
ðr þ 1Þa2 : ð3Þ
On substituting h = pj/pi, c0 ¼ 1 1þ
Pr1
l¼1 log p½l
 .
, c1 ¼ rþ1r
 a2
and x = log pi into (3), and simplifying, we obtain
CiðS0Þ  CjðSÞ ¼ pi 1þ
Xr1
l¼1
logp½l
 !a1
ra2 ½ðcþ 1Þðh 1Þ
þ c1ð1þ c0 log hþ c0xÞa1  c1hð1þ c0xÞa1 : ð4Þ
From Lemma 2, and hP 1, 0 < c0 < 1, c1 > 1, xP 0, m1 < a1 < 0,
0 < c < 1 and 0 < a2 <m2, we have CiðS0Þ  CjðSÞP 0.
Thus, S dominates S0. Therefore, repeating this interchange
argument for all the jobs not sequenced in the SPT order will yield
the desired result. h
Theorem 2. For the 1=pj½r ¼ pj 1þ
Pr1
l¼1 logp½l
 a1
ra2 ; spsd
P
Cj

problem, the optimal schedule is obtained by sequencing jobs in the
SPT order.
Proof. Suppose that pi 6 pj. Let S and S0 be two job schedules,
where the difference between S and S0 is a pairwise interchange
of two adjacent jobs i and j, i.e., S ¼ ðp i j p0Þ and S0 ¼ ðp j i p0Þ,
where p and p0 denote partial sequences. Furthermore, we assume
that there are r  1 jobs in p. Thus, jobs i and j are the rth and
(r + 1)th jobs in S, respectively, whereas jobs j and i are scheduled
in the rth and (r + 1)th positions in S0, respectively. In addition, let A
denote the completion time of the last job in p. To show that S
dominate S0, it sufﬁces to show that the (r + 1)th jobs in S and S0 sat-
isfy the conditions Cj(S) < Ci(S0) and CiðSÞ þ CjðSÞ 6 CjðS0Þ þ CiðS0Þ. By
deﬁnition, the actual processing times of jobs i and j in S are given
by
CiðSÞ ¼ Aþ pi 1þ
Xr1
l¼1
logp½l
 !a1
ra2 þ c
Xr1
l¼1
p½l ð5Þ
and
328 T.C.E. Cheng et al. / Computers & Industrial Engineering 58 (2010) 326–331
Suppose that neither Ti(S) nor Tj(S) is zero. Note that this is the
most restrictive case since it includes the case that either one or
both Ti(S) and Tj(S) are zero. From Theorem 1 and the fact that
di 6 dj, we have
fTjðS0Þ þ TiðS0Þg  fTiðSÞ þ TjðSÞg
¼ ðcþ 1Þðpj  piÞ 1þ
Xr1
l¼1
logp½l
 !a1
ra2
þ pi 1þ
Xr1
l¼1
logp½l þ logpj
 !a1
ðr þ 1Þa2
 pj 1þ
Xr1
l¼1
logp½l þ logpi
 !a1
ðr þ 1Þa2 þ dj
 pi 1þ
Xr1
l¼1
logp½l
 !a1
ra2  c
Xr1
l¼1
log p½l  AP 0:
Thus, fTjðS0Þ þ TiðS0Þg  fTiðSÞ þ TjðSÞgP 0 in the ﬁrst case. In the
second case, where Aþ pj 1þ
Pr1
l¼1 log p½l
 a1
ra2 þ cPr1l¼1p½l > dj,
the total tardiness of jobs i and j in S and in S0 are
TiðSÞþTjðSÞ¼ max Aþpi 1þ
Xr1
l¼1
logp½l
 !a1
ra2 þc
Xr1
l¼1
p½l di;0
( )
þmax Aþpi 1þ
Xr1
l¼1
logp½l
 !a1
ra2 þc
Xr1
l¼1
p½l
(
þpj 1þ
Xr1
l¼1
logp½l þ logpi
 !a1
ðrþ1Þa2
þc
Xr1
l¼1
p½l þpi 1þ
Xr1
l¼1
logp½l
 !a1
ra2
 !
dj;0
)
and
TjðS0Þ þ TiðS0Þ ¼ 2Aþ 2pj 1þ
Xr1
l¼1
log p½l
 !a1
ra2
þ pi 1þ
Xr1
l¼1
log p½l þ logpj
 !a1
ðr þ 1Þa2  di  dj
 cpj 1þ
Xr1
l¼1
logp½l
 !a1
ra2 þ 2c
Xr1
l¼1
logp½l:
Suppose that neither Ti(S) nor Tj(S) is zero. From Theorem 1 and
pi 6 pj, we have
fTjðS0Þ þ TiðS0Þg  fTiðSÞ þ TjðSÞg
¼ 2ðpj  piÞ 1þ
Xr1
l¼1
logp½l
 !a1
ra2 ð1þ cÞ
þ pi 1þ
Xr1
l¼1
logp½l þ logpj
 !a1
ðr þ 1Þa2
 pj 1þ
Xr1
l¼1
logp½l þ logpi
 !a1
ðr þ 1Þa2 P 0:
Thus, fTjðS0Þ þ TiðS0Þg  fTiðSÞ þ TjðSÞgP 0 in the second case.
This completes the proof of Theorem 4. h
Theorem 5. For the 1=pj½r ¼ pj 1þ
Pr1
l¼1 log p½l
 a1
ra2 ; spsd Lmax=
problem, the optimal schedule is obtained by sequencing jobs in
non-decreasing order of di if the job processing times and the due dates
are agreeable.
Proof. It is similar to that of Theorem 4 and is omitted. h
4. Conclusions
We considered a new scheduling model in which job deteriora-
tion, learning, and past-sequence-dependent setup times exist
simultaneously. Under the proposed model, we showed that the
single-machine scheduling problems to minimize the makespan,
total completion time, and sum of square of completion times
are polynomially solvable. In addition, we showed that the prob-
lems to minimize the total tardiness and maximum lateness are
polynomially solvable if the processing times and the due dates
are agreeable. Finally, analysis of the above problems with more
than one machine is an interesting issue for future research.
Acknowledgement
We are thankful to the Editor and two anonymous referees for
their helpful comments on an earlier version of our paper. This
paper was supported in part by the NSC under Grant No. NSC
97-2221-E-060-MY2.
References
Alidaee, B., & Womer, N. K. (1999). Scheduling with time dependent processing
times: Review and extensions. Journal of the Operational Research Society, 50,
711–720.
Allahverdi, A., Ng, C. T., Cheng, T. C. E., & Kovalyov, M. Y. (2008). A survey of
scheduling problems with setup times or costs. European Journal of Operational
Research, 187(3), 985–1032.
Bachman, A., Cheng, T. C. E., Janiak, A., & Ng, C. T. (2002). Scheduling start time
dependent jobs to minimize the total weighted completion time. Journal of the
Operational Research Society, 53(6), 688–693.
Biskup, D. (1999). Single-machine scheduling with learning considerations.
European Journal of Operational Research, 115, 173–178.
Biskup, D. (2008). A state-of-the-art review on scheduling with learning effect.
European Journal of Operational Research, 188, 315–329.
Biskup, D., & Herrmann, J. (2008). Single-machine scheduling against due dates with
past-sequence-dependent setup times. European Journal of Operational Research,
191, 587–592.
Browne, S., & Yechiali, U. (1990). Scheduling deteriorating jobs on a single
processor. Operations Research, 38, 495–498.
Chang, P. C., Chen, S. H., & Mani, V. (2009). A note on due-date assignment and
single machine scheduling with a learning/aging effect. International Journal of
Production Economics, 117(1), 142–149.
Cheng, T. C. E., & Ding, Q. (1998). The complexity of single machine scheduling with
release times. Information Processing Letters, 65(2), 75–79.
Cheng, T. C. E., Ding, Q., Kovalyov, M. Y., Bachman, A., & Janiak, A. (2003). Scheduling
jobs with piecewise linear decreasing processing times. Naval Research Logistics,
50(6), 531–554.
Cheng, T. C. E., Ding, Q., & Lin, B. M. T. (2004). A concise survey of scheduling with
time-dependent processing times. European Journal of Operational Research, 152,
1–13.
Cheng, T. C. E., & Wang, G. (2000). Single machine scheduling with learning effect
considerations. Annals of Operations Research, 98, 273–290.
Cheng, T. C. E., Wu, C. C., & Lee, W. C. (2008). Some scheduling problems with
deteriorating jobs and learning effects. Computers and Industrial Engineering, 54,
972–982.
Eren, T. (2009). Minimizing the total weighted completion time on a single machine
scheduling with release dates and a learning effect. Applied Mathematics and
Computation, 208(2), 355–358.
Eren, T., & Güner, E. (2008). A bicriterion ﬂowshop scheduling with a learning effect.
Applied Mathematical Modelling, 32(9), 1719–1733.
Graham, R. L., Lawler, E. L., Lenstra, J. K., & Rinnooy Kan, A. H. G. (1979).
Optimization and approximation in deterministic sequencing and scheduling: A
survey. Annals of Discrete Mathematics, 5, 287–326.
Gupta, J. N. D., & Gupta, S. K. (1988). Single facility scheduling with nonlinear
processing times. Computers and Industrial Engineering, 14, 387–393.
Janiak, A., Janiak, W. A., Rudek, R., & Wielgus, A. (2009). Solution algorithms for the
makespan minimization problem with the general learning model. Computers
and Industrial Engineering, 56(4), 1301–1308.
Janiak, A., & Rudek, R. (2008). A new approach to the learning effect: Beyond the
learning curve restrictions. Computers and Operations Research, 35(11),
3727–3736.
Janiak, A., & Rudek, R. (2009). Experience-based approach to scheduling problems
with the learning effect. IEEE Transactions on Systems, Man and Cybernetics —
Part A, 39(2), 344–357.
Koulamas, C., & Kyparisis, G. J. (2008). Single-machine scheduling problems with
past-sequence-dependent setup times. European Journal of Operational Research,
187, 1045–1049.
330 T.C.E. Cheng et al. / Computers & Industrial Engineering 58 (2010) 326–331
1Single-machine scheduling with deteriorating jobs
and past-sequence-dependent setup times
T.C.E. Chenga,*, Wen-Chiung Leeb, and Chin-Chia Wub
aDepartment of Logistics and Maritime Studies
The Hong Kong Polytechnic University
Hung Hom, Kowloon, Hong Kong
bDepartment of Statistics
Feng Chia University
Taichung, Taiwan
_____________
*Corresponding author E-mail: LGTcheng@polyu.edu.hk
Abstract
In many realistic scheduling settings a job processed later consumes more time than
the same job processed earlier - this is known as scheduling with deteriorating jobs.
Most research on scheduling with deteriorating jobs assumes that the actual
processing time of a job is an increasing function of its starting time. Thus a job
processed late may incur an excessively long processing time. On the other hand,
setup times occur in manufacturing situations where jobs are processed in batches
whereby each batch incurs a setup time. This paper considers scheduling with
deteriorating jobs in which the actual processing time of a job is a function of the
logarithm of the total processing time of the jobs processed before it (to avoid the
unrealistic situation where the jobs scheduled late will incur excessively long
processing times) and the setup times are proportional to the actual processing times
of the already scheduled jobs. Under the proposed model, we provide the optimal
solutions for some single-machine problems.
Keywords: deteriorating jobs, single-machine, past-sequence-dependent setup time
1. Introduction
In classical scheduling theory, the processing times of jobs are assumed to be
known and fixed; however, there are many situations in which a job that is processed
later consumes more time than the same job processed earlier, e.g., steel production,
fire fighting, and single-server cycle-queues (Gupta and Gupta, 1988; Kunnathur and
Gupta, 1990; Browne and Yechiali, 1990). In all of these cases, executing a task may
take more time as time passes. Scheduling problems with deteriorating jobs were first
introduced independently by Gupta and Gupta (1988) and Browne and Yechiali
(1990). Since then, the topic has received increasing attention of the scheduling
research community, and researchers have proposed various scheduling models in
which the processing time of a job is assumed to be an increasing function of its
starting time - this is known as scheduling with deteriorating jobs. Comprehensive
reviews of this stream of scheduling research were given by Alidaee and Womer
(1999), and Cheng et al. (2004).
Recently, Gawiejnowicz et al. (2006a) considered two problems of single-machine
bi-criterion scheduling of a set of deteriorating jobs. The first problem is to find a
3study scheduling with deteriorating jobs that incorporates p-s-d setup times.
The remainder of this paper is organized as follows. We introduce the problem
formulation and notation in the next section. In Section 3 we derive the optimal
solutions for some single-machine problems. We conclude the paper in the final
section.
2. Problem Formulation
Before presenting the main results, we introduce some notation that will be used
throughout the paper.
n: the number of jobs;
jp : the normal processing time of job j;
jd : the due date of job j;
A
jrp : the actual processing time of job j scheduled in the rth position;
[ ]rp : the normal processing time of a job scheduled in the rth position;
a: the deterioration index, where a > 1;
[ ]rs : the p-s-d setup time of job j scheduled in the rth position;
jC : the completion time of job j;
jL : the lateness of job j, i.e., j j jL C d  ;
jT : the tardiness of job j, i.e., max{ ,0}j jT L ;
maxC : the makespan, i.e., max max{ 1,2,..., }jC C j n  ;
jC : the total completion time of all the jobs;
2
jC : the sum of the quadratic job completion times of all the jobs;
maxL : the maximum lateness of all the jobs, i.e., max { 1,2,..., }jL L j n  ;
jT : the total tardiness of all the jobs;
1M , 2M , 3M , M : four positive numbers, where 1 11 log
n
jj
M p

  ,
2 log{max{ / }},i ji jM p p 3 1max{log }ii nM p  , and 1 2 31 logM M M M    .
The formulation of the proposed problem is as follows. There are n jobs ready to
be processed on a single machine. Each job j has a normal processing time jp and a
due date jd . We model the deterioration effect based on the observation of Biskup
and Herrmann (2007) that the processing times of the jobs processed before a job
contribute to the actual processing time of a job. Job deterioration may be caused by
various factors such as equipment wear-out and machine re-alignment in precision
manufacturing, etc. However, a job processed late may incur an excessively long
processing time if there are many jobs processed before it. To avoid this unrealistic
situation, we assume that the actual processing time of a job is a function of the sum
of the logarithm of the normal processing times of the jobs processed before it. Thus,
if a job j is scheduled in the rth position in a sequence, then its actual processing time
is
1
[ ]
1
(1 log )
r
A a
jr j l
l
p p p


  ,
where ][lp is the normal processing time of the job scheduled in the lth position in
the sequence, and a is the deterioration index.
5G ( ) is a non-decreasing function for 21 M  . From Lemma 1, we have
1
0 0 0G (1) 1 (1 ) (1 ) 0
a ar ac c x c x        .
Using the fact that G ( ) is a non-decreasing function for 21 M  , we see that
G ( ) G (1) 0   . Therefore, we obtain that G( ) is a non-decreasing function for
21 M  . Since G(1) 0 , we have
G( ) 0 
for 21 M  , 0 1  , 1 01/ 1M c  , a M , and 30 x M  . This completes
the proof.
Theorem 1. For the 1 [ ] max11/ (1 log ) , /
r a
jr j l psdl
p p p s C

  problem, the optimal
schedule is obtained by sequencing jobs in the shortest processing time (SPT) order.
Proof. Suppose ji pp  . Let S and S be two job schedules where the difference
between S and S is a pairwise interchange of two adjacent jobs i and j, i.e.,
S ( )i j   and S ( )j i   , where  and   denote partial sequences.
Furthermore, we assume that there are r-1 jobs in  . Thus, jobs i and j are the rth
and (r+1)th jobs in S, respectively, whereas jobs i and j are scheduled in the rth and
(r+1)th positions in S , respectively. In addition, let A denote the completion time of
the last job in  . To show that S dominates S , it suffices to show that the (r+1)th
jobs in S and S satisfy the condition )S()S(  ij CC . By definition, the actual
processing times of job j in S and job i in S are given by
1 1 1
[ ] [ ] [ ]
1 1 1
( ) (1 log ) (1 log log )
r r r
a A a
j i l l j l i
l l l
C S A p p p p p p
  
  
        
1 1
[ ] [ ]
1 1
( (1 log ) )
r r
A a
l i k
l k
p p p
 
 
    (1)
and
1 1 1
[ ] [ ] [ ]
1 1 1
( ) (1 log ) (1 log log )
r r r
a A a
i j l l i l j
l l l
C S A p p p p p p
  
  
         
1 1
[ ] [ ]
1 1
( (1 log ) )
r r
A a
l j k
l k
p p p
 
 
    . (2)
Taking the difference between (1) and (2), we obtain that
1 1
[ ] [ ]
1 1
(S ) (S) ( 1)( )(1 log ) (1 log log )
r r
a a
i j j i l i l j
l l
C C p p p p p p
 
 
         
1
[ ]
1
(1 log log )
r
a
j l i
l
p p p


   . (3)
By substituting /j ip p  ,
1
0 [ ]
1
1/ 1 log
r
l
l
c p


 
  
 
 , and log ix p into (3), and
simplifying, we obtain
1
[ ] 0 0 0
1
(S ) (S) (1 log ) [( 1)( 1) (1 log ) (1 ) ]
r
a a a
i j i l
l
C C p p c c x c x   


           .(4)
From Lemma 2, and since 21 M  , 0 1  , 1 01/ 1M c  , a M , and
30 x M  , we have
(S ) (S) 0i jC C   .
7Thus, repeating this interchange argument for all the jobs not sequenced in the SPT
order will yield the desired result.
Theorem 3. For the 1 2[ ]11/ (1 log ) , /
r a
jr j l psd jl
p p p s C

   problem, the optimal
schedule is obtained by sequencing jobs in the SPT order.
In the following, we show that the earliest due date (EDD) rule provides the optimal
solution for the total tardiness problem if the job processing times and the due dates
are agreeable, i.e., ji dd  implies ji pp  for all jobs i and j.
Theorem 4. For the 1 [ ]11/ (1 log ) , /
r a
jr j l psd il
p p p s T

   problem, the optimal
schedule is obtained by sequencing jobs in non-decreasing order of id if the job
processing times and the due dates are agreeable.
Proof. Suppose that ji dd  , which implies ji pp  . The total tardiness of the first
r-1 jobs are the same since they are processed in the same order. Since the makespan
is minimized by the SPT rule (Property 1), the total tardiness of partial sequence  
in S will not be greater than that of partial sequence   in S  . Thus, to prove that
the total tardiness of S is less than or equal to that of S  , it suffices to show that
)()()()( STSTSTST ijji  .
From (5) - (8), we derive that the tardiness of jobs i and j in S are
1 1
[ ] [ ]
1 1
( ) max{ (1 log ) ,0}
r r
a A
i i l l i
l l
T S A p p p d
 
 
      ,
and
1 1 1
[ ] [ ] [ ]
1 1 1
( ) max{ (1 log ) (1 log log )
r r r
a A a
j i l l j l i
l l l
T S A p p p p p p
  
  
        
1 1
[ ] [ ]
1 1
( (1 log ) ) ,0}
r r
A a
l i k j
l k
p p p d
 
 
     .
Similarly, the tardiness of jobs i and j in S  are
1 1
[ ] [ ]
1 1
( ) max{ (1 log ) ,0}
r r
a A
j j l l j
l l
T S A p p p d
 
 
       ,
and
1 1 1
[ ] [ ] [ ]
1 1 1
( ) max{ (1 log ) (1 log log )
r r r
a A a
i j l l i l j
l l l
T S A p p p p p p
  
  
         
1 1
[ ] [ ]
1 1
( (1 log ) ) ,0}
r r
A a
l j k i
l k
p p p d
 
 
     .
To compare the total tardiness of jobs i and j in S and in S  , we consider two cases.
In the first case where 1 1[ ] [ ]1 1(1 log )
r ra A
j l l jl l
A p p p d 
 
     , the total tardiness
of jobs i and j in S and in S  are
1 1
[ ] [ ]
1 1
( ) ( ) max{ (1 log ) , 0}
r r
a A
i j i l l i
l l
T S T S A p p p d
 
 
      
1 1 1
[ ] [ ] [ ]
1 1 1
max{ (1 log ) (1 log log )
r r r
a A a
i l l j l i
l l l
A p p p p p p
  
  
        
1 1
[ ] [ ]
1 1
( (1 log ) ) ,0}
r r
A a
l i k j
l k
p p p d
 
 
    
and
9past-sequence-dependent setup times exist simultaneously. Under the proposed model,
we showed that the single-machine scheduling problems to minimize the makespan,
total completion time, and sum of square of completion times are polynomially
solvable. In addition, we showed that the problems to minimize the total tardiness and
sum of lateness are polynomially solvable if the processing time and the due dates are
agreeable.
References
Allahverdi, A., Soroush, H.M., 2008. The significance of reducing setup times/setup
costs. European Journal of Operational Research 187, 978-984.
Biskup, D., Herrmann, J., 2008. Single-machine scheduling against due dates with
past-sequence-dependent setup times. European Journal of Operational Research
191(2), 587-592.
Browne, S., Yechiali, U., 1990. Scheduling deteriorating jobs on a single processor.
Operations Research 38, 495-498.
Gawiejnowicz, S., 2007. Scheduling deteriorating jobs subject to job or machine
availability constraints. European Journal of Operational Research 180, 472-478.
Gawiejnowicz, S., Kurc, W., Pankowska, L., 2006a. Pareto and scalar bicriterion
optimization in scheduling deteriorating jobs. Computers & Operations Research
33, 746-767.
Gawiejnowicz, S., Kurc, W., Pankowska, L., 2006b. Analysis of a time-dependent
scheduling problem by signatures of deterioration rate sequences. Discrete Applied
Mathematics 154 , 2150 -2166.
Graham, R.L., Lawler, E.L., Lenstra, J.K., Rinnooy Kan, A.H.G., 1979. Optimization
and approximation in deterministic sequencing and scheduling: A survey. Annals
of Discrete Mathematics 5, 287-326.
Gupta, J.N.D., Gupta, S.K., 1988. Single facility scheduling with nonlinear processing
times. Computers & Industrial Engineering 14, 387-393.
Ji, M., He, Y., Cheng, T.C.E., 2006. Scheduling linear deteriorating jobs with an
availability constraint on a single machine. Theoretical Computer Science 362,
115-126.
Koulamas, C., Kyparisis, G.J., 2008. Single-machine scheduling with
past-sequence-dependent setup times. European Journal of Operational Research
187, 1045-1049.
Kunnathur, A.S., Gupta, S.K., 1990. Minimizing the makespan with late start
penalties added to processing times in a single facility scheduling problem.
European Journal of Operational Research 47(1), 56-64.
Lee, W.C., Wu, C.C., 2008. Multi-machine scheduling with deteriorating jobs and
scheduled maintenance. Applied Mathematical Modelling 32, 362–373.
Lee, W.C., Wu, C.C., Chung, Y.H., 2008a. Scheduling deteriorating jobs on a single
machine with release times. Computers & Industrial Engineering 54, 441-452.
Lee, W.C., Wu, C.C., Chung, Y.H., Liu, H.C., 2008b. Minimizing the total
completion time in permutation flow shop with machine-dependent job
deterioration rates. Computers and Operations Research (2008), doi:
10.1016/j.cor.2008.07.008.
Raut, S., Swami, S., Gupta, J.N.D., 2008. Scheduling a capacitated single machine
Abstract
Recently, the topic of scheduling with learning effects has
kept growing attention, and a survey is further provided to
classify the learning models in scheduling into two types,
namely position-based learning and sum-of- processing-
times-based learning. However, the actual processing time of
a given job fast drops to zero as the number of jobs increases
in the first model and when the normal job processing times
are large in the second model. Motivated by this observation,
this paper extends both models to a more general learning
model where the actual job processing time is a function of
the sum of the logarithm of the processing times of the jobs
already processed and general position-based learning.
Under the proposed learning model, this paper shows that
some single-machine scheduling problems can be solved in
polynomial time.
Keywords: scheduling; learning effect; single-machine
1. Introduction
In classical scheduling theory, the job processing times
are assumed to be fixed and known from the first job to be
processed to the last job to be completed. However, in many
realistic situations, the efficiency of the production facility
(e.g., a machine or a worker) improves continuously with
time. As a result, the production time of a given product is
shorter if it is scheduled (and so processed) later. For
instance, Biskup [1] pointed out that the repeated processing
of similar tasks improves worker skills because workers are
able to perform setup, deal with machine operations and
software or handle raw materials and components at a faster
pace. This phenomenon is called as the learning effect in the
literature.
Since the pioneering studies of Biskup [1], and Cheng and
Wang [2] that introduced Wright’s [3] learning curve into
scheduling problems, many researchers have paid more
attention on this relatively young but vivid area of scheduling
research. For example, Biskup [1] considered
Manuscript received November 22, 2008. This paper is
support by NSC under grant number NSC 97-2221-E-060
-MY2.
aPeng-Jen Lai is with National Kaohsiung Normal
University, Kaohsiung, Taiwan, ROC. (e-mail:
laibird@nknucc.nknu.edu.tw).
*Corresponding author: bChin-Chia Wu is with Feng Chia,
University Taichung, Taiwan, ROC. (e-mail:
cchwu@fcu.edu.tw; phone : 886- 4 - 2456 - 7250 ext 4017).
bWen-Chiung Lee is with Feng Chia University, Taichung,
Taiwan, ROC. (e-mail: wclee@fcu.edu.tw).
two single-machine scheduling problems and showed that
both problems could be solved in polynomial time.
Following Biskup’s [1] model, under some assumption that a
job’s processing time is a decreasing function of its position
in a sequence, Mosheiov [4] found that some problems with a
learning effect are more complex than those in the traditional
problem, such as minimizing the sum of weighted
completion times, the maximum lateness, and the number of
tardy jobs. Mosheiov and Sidney [5] considered a model in
which the learning effects gained from doing some jobs are
stronger than those from the other jobs, i.e., the so-called
job-dependent learning model. Lee et al. [6] studied a
bicriterion single-machine scheduling problem, and Lee and
Wu [7] investigated the problem of minimizing the total
completion time in a two-machine flowshop. Wang [8]
studied a model in which the job processing times are
functions of their starting times and positions in the sequence.
Wu et al. [9] took the learning effect into consideration for
the single-machine maximum lateness scheduling problem.
They proposed a branch-and-bound algorithm, incorporating
several dominance properties to derive the optimal solution.
In addition, they provided two heuristic algorithms for this
problem. The first one is based on the earliest due date (EDD)
rule and a pairwise neighborhood search. The second one is
based on the simulated annealing (SA) approach. Our
computational results show that the SA algorithm is
surprisingly accurate for a small to medium number of jobs.
Koulamas and Kyparisis [10] addressed a general
sum-of-job-processing- -times -based learning effect model
for scheduling, in which employees learn more if they
perform a job with a longer processing time. Wang et al. [11]
studied some scheduling problems with a time-dependent
learning effect. They provided several examples to show that
the classical scheduling rules do not yield optimal solutions
for the problems to minimize the weighted sum of
completion times, maximum lateness and number of tardy
jobs. They also analyzed their worst-case error bounds for
the classical scheduling rules. Eren and G u ner [12]
considered a two-machine flowshop with position-based
learning where the objective is to minimize a weighted sum
of the total completion time and makespan. They applied
integer programming to solve problems up to 30 jobs, and
utilized a heuristic algorithm and a tabu search based
heuristic algorithm to handle large-sized problems. Wu and
Lee [13] extended position-based and sum-of-job-
processing-times- based learning models in which the actual
job processing time not only depends on its scheduled
position, but also depends on the sum of the processing times
of jobs already processed. Cheng et al. [14] introduced a new
scheduling model with learning effects in which the actual
Some Single-Machine Scheduling Problems with a Mixed
Learning Function
Peng-Jen Laia, Chin-Chia Wub,* and Wen-Chiung Leeb
log
( ) [1 ( ) ] [1 ( (1 ) ) ]
log
a a
i
g b y b y
p

        . If 1b  ,
1a   and log 1iK p  then ( ) 0g   for 1  .
Lemma 2. Suppose log iK p >0, 0y  , 0 1b  .
Suppose furthermore that 1b y  . If 0a  and | |a small
enough (e.g.
1 ( )a b y
K y
  
 ) then
log
( ) [1 ( ) ] [1 ( (1 ) ) ] 0a ag b y b y
K

         for
1  .
Observation 4. If z(r) is a non-increasing function of the job
position r , 1 , 2 ,… , n are a sequence of coefficients
with 1 2 0n      .( then 0 1b  ). And
suppose
1, ,
1
1
| | [ min ( ( ) ( 1))
r n
a z r z r
 
  

1
1, , 1, ,1
min ( ) min log ]1
r
il n i nl
pl l 

 
 
 
or
1, .
| | min log ii n
a p



. Then a satisfies
1 ( )a b y
K y
  

.
Lemma 3. If 1k  , 0y  , 1b  , log 1iK p  and
0a  . Then
1 log( )
( ) ( 1) [1 ( ) ] [1 ( (1 ) ) ] 0a a
k
g k b y b y
k K

            for
1  .
3. Some solvable single-machine problems
In this section we prove the properties for the optimal
solutions for some single-machine problems using the
pairwise job interchange technique. Let S and S  be two job
schedules where the difference between S and S  is a
pairwise interchange of two adjacent jobs i and j, i.e.,
( , , , )S i j   and ( , , , )S j i   , where  and  
each denote a partial sequence. Furthermore, we assume that
there are r-1 scheduled jobs in  . In addition, let A denote
the completion time of the last job in  . Under S, the
completion times of jobs i and j are respectively
 
1
1
( ) ( ( ) log )
r a
i i l r ll
C S A p z r p



    (1)
and
 
1
1
( ) ( ( ) log )
r a
j i l r ll
C S A p z r p



    .
 
1
1 1
1
( ( 1) log log )
r a
j l ir ll
p z r p p 

 

    (2)
Similarly, the completion times of jobs j and i in S  are
respectively
 
1
1
( ) ( ( ) log )
r a
j j l r ll
C S A p z r p



     (3)
and
 
1
1
( ) ( ( ) log )
r a
i i l r ll
C S A p z r p



    
 
1
1 1
1
( ( 1) log log )
r a
i l jr ll
p z r p p 

 

    (4)
Property 1. If ( )z r is a non-decreasing function of the job
position r , 1 , 2 ,… , n are a sequence of coefficients
with 1 20 n      ( then 1b  ), 1a   and
1, ,
min log 1ii n
p



. Then the shortest processing time (SPT)
first rule yields an optimal schedule for the
   
1
max
1
1/ ( ( ) log ) /
r a
j lj r r ll
p p z r p C



   problem.
Proof: Suppose that i jp p . To show that S dominates S  ,
it suffices to show that ( ) ( )j iC S C S  . Taking the
difference between Equations (2) and (4), we have
( ) ( ) ( )( ( )i j j iC S C S p p z r   
   
1 1
1
1 1
log ) ( ( 1) log
r ra
l i lr l r ll l
p p z r p 
 
 
 
    
 
1
1 1 1
1
log ) ( ( 1) log log )
ra a
j j l ir ll
p p z r p p  

 

     (5)
Substituting
 
1
1
( ) log
r
r l ll
u z r p



   ,
 
1
1
1
( 1) ( ) ( ) log
r
l l r ll
v z r z r p 

 

     , j
i
p
p
  ,
1
v
b
u
  and 1
log ipy
u

 into Equation (5), we have
( ) ( ) { [1 ( ) ]a ai j iC S C S p u b y    
log
[1 ( (1 ) ) ]}
log
a
i
b y
p

    (6)
Since 1j
i
p
p
   , 1
log
0i
p
y
u

  , 1b  and 1a   ,
we have from Lemma 1 that ( ) ( ) 0i jC S C S   . Therefore,
repeating this interchange argument for all the jobs not
sequenced in the SPT order completes the proof of the
property.
Property 2. If ( )z r is a non-decreasing function of the job
position r , 1 , 2 ,… , n are a sequence of coefficients
with 1 20 n      ( then 1b  ) , 1a   and
1, ,
min log 1ii n
p



. The SPT order yields an optimal schedule
for the
   
1
1
1/ ( ( ) ) /
r a
j l ij r r ll
p p z r p C



    problem.
Proof: The proof is omitted since it is similar to that of
Property 1.
1, ,
min log 1ii n
p



. The SPT rule yields an optimal schedule
for the
   
1
1
1/ ( ( ) ) /
r a
j l i ij r r ll
p p z r p w C



    problem if the
processing times and the weights are agreeable.
Proof: Suppose that 1j
i
p
p
 . Since i jp p , it implies from
Lemma1 that ( ) ( )j iC S C S  . Thus, to show that S
dominates S  , it suffices to show that
( ) ( ) ( ) ( )i i j j j j i iw C S w C S w C S w C S    .
From Equations (1) to (4), we have
[ ( ) ( )] [ ( ) ( )]j j i i i i j jw C S w C S w C S w C S   
 
1
11
( )( ( ) log )
r a
i j j i l rl
w p w p z r p



   
 
1
1
[( ( ) log ) ( ( 1)
r a
j j l r ll
w p z r p z r



   
 
1
1 1
1
log log ) ]
r a
l ir ll
p p 

 

 
 
1
1
[( ( ) log ) ( ( 1)
r a
i i l r ll
w p z r p z r



   
 
1
1 1
1
log log )
r a
l jr ll
p p 

 

  (9)
Substituting
 
1
11
( ) log
r
l rl
u z r p



  
 
1
1 11
( 1) ( ) ( ) log
r
l l rl
v z r z r p 

 

    
1 log ipy
u

 ,
/
/
j j
i i
p w
p w
  , 1
v
b
u
  , and j
i
w
k
w
 into
Equation (9), we have
[ ( ) ( )] [ ( ) ( )]j j i i i i j jw C S w C S w C S w C S   
{( 1) [1 ( ) ]a aj iw p u k b y     
1 log( )
[1 ( (1 ) ) ]}
log
a
i
k
b y
k p

    (10)
Since
/
1
/
j j
i i
p w
p w
   , 1j
i
w
k
w
  , 1kK  ,
1 0i
p
y
u

  , 1b  and 1a   , we have from Lemma 3
that ( ) ( ) ( ) ( )j j i i i i j jw C S w C S w C S w C S    . Thus, S
dominates S  . Repeating this interchange argument for all
the jobs not sequenced in the WSPT order completes the
proof of Property 7.
4. Conclusions
Scheduling problems with learning consideration have
captured many scheduling researchers’attention in recent
years. Biskup [1] proposed a position-based learning model
while Koulamas and Kyparisis [10] addressed a general
sum-of-job-processing- -times -based learning effect model.
However, we found in both models that the actual processing
time of a given job fast drops to zero as the number of jobs
increases in the position-based model or when the normal job
processing times are large in the sum-of-processing-
times-based model. Motivated by this observation, we
proposed a new learning model where the actual job
processing time is a function of the sum of the logarithm of
the processing times of the jobs already processed. In
particular, we showed that the problems to minimize the
makespan, total completion time and total lateness in a single
machine are polynomially solvable under the proposed
learning model. In addition, we showed that the problems to
minimize the total weighted completion time is polynomially
solvable under some agreeable conditions.
Overall, in the proposed model we overcame some draws
in position-based and sum-of-processing- times-based
models, but we made some restrictions on normal job
processing times. Future studies may focus on relaxing these
restrictions or multiple-machine systems.
References
[1] D. Biskup, (1999) Single-machine scheduling with
learning considerations. European Journal of
Operational Research 115, 173–178.
[2] T.C.E. Cheng, G. Wang, (2000) Single machine
scheduling with learning effect considerations. Annals
of Operations Research 98, 273-290.
[3] T.P. Wright, (1936) Factors affecting the cost of
airplanes. Journal of Aeronautical Science 3, 122-128.
[4] G. Mosheiov, (2001) Scheduling problems with a
learning effect, European Journal of Operational
Research 132, 687-693.
[5] G. Mosheiov, J.B. Sidney, (2003) Scheduling with
general job-dependent learning curves. European
Journal of Operational Research 147, 665-670.
[6] W.C. Lee, C.C. Wu, H.J. Sung, (2004) A bi-criterion
single-machine scheduling problem with learning
considerations, Acta Informatica 40, 303-315.
[7] W.C. Lee, C.C. Wu, (2004) Minimizing total completion
time in a two-machine flowshop with a learning effect.
International Journal of Production Economics 88,
85-93.
[8] J.B. Wang, (2007) Single-machine scheduling problems
with the effects of learning and deterioration.
OMEGA-The International Journal of Management
Science 35, 397-402.
[9] C.C. Wu, W.C. Lee, T. Chen, (2007) Heuristic
algorithms for solving the maximum lateness
scheduling problem with learning considerations.
Computers and Industrial Engineering 52, 124-132.
[10] C. Koulamas, G.J. Kyparisis, (2007) Single-machine
and two-machine flowshop scheduling with general
learning functions. European Journal of Operational
Research 178, 402-407.
[11] J.B. Wang, C.T. Ng, T.C.E. Cheng, L.L. Liu, (2007)
Single-machine scheduling with a time-dependent
learning effect. International Journal of Production
Economics 88, 85–93.
________________________________________
†: Corresponding Author
Some solvable scheduling problems with learning consideration
Chin-Chia Wu†
Department of Statistics, Feng Chia University, Taichung, Taiwan
Email: cchwu@fcu.edu.tw
Abstract. Learning effects in scheduling problems have recently received growing attention from the scheduling research
community. Recently, a comprehensive review is presented to further classify the learning model into two different ways－
position-based learning and sum-of-processing-time-based learning. However, the actual processing time of a given job in both
models dramatically declines to zero as job size or normal processing time becomes larger. Motivated by this situation, In this
paper we introduce a new learning effects scheduling model with in which the actual processing time of a job might be
controlled by two parameters, i.e. the actual processing time of a job is a exponential function and its degree is dependent on a
function of the total normal processing times of the jobs already processed and of the job’s scheduled position. Under the
proposed model, we show that the single-machine problems to minimize makespan and total completion time are polynomially
solvable. In addition, we show that the problems to minimize total weighted completion time and maximum lateness are
polynomially solvable under certain agreeable conditions. Furthermore, we present polynomial-time optimal solutions for two
flowshop problems to minimize makespan and total completion time under the assumption of identical processing times on all
the machines.
Keywords: Scheduling; learning effect; single-machine; flowshop.
1. INTRODUCTION
In classical scheduling problems, job processing times
are assumed to be fixed and known. However, Heizer and
Render [1], and Russell and Taylor [2] demonstrated
through empirical studies that unit costs decline as firms
produce more of a product and gain knowledge or
experience in several kinds of industry. Biskup [1] pointed
out that repeated processing of similar tasks improves
workers’skills, e.g., workers are able to perform setups,
deal with machine operations or software, or handle raw
materials and components at a faster pace. Scheduling in
this setting is known as “scheduling with learning effects”.
The impact of learning on productivity in manufacturing
in the aircraft industry was first discovered by Wright [22],
and it was subsequently confirmed in many industries in
both the manufacturing and service sectors [23]. Although
the learning effect had been investigated in a variety of
industries, it had not been unexplored in the field of
scheduling until Biskup [1] and Cheng and Wang (2000).
Biskup [1] introduced a learning effect scheduling model in
which the actual processing time of a job is a decreasing
function of its position in the schedule. He showed that the
single-machine problems to minimize total deviations of
job completion times from a common due date and to
minimize the sum of job completion times are polynomially
solvable. Meanwhile, Wang and Cheng [19] considered a
single-machine scheduling problem with a volume-
dependent, piecewise linear processing time function to
model the learning effect. They showed that the maximum
lateness problem is NP-hard in the strong sense and
identified two special cases that are polynomially solvable.
Since then, many researchers have devoted attention on the
relatively young but vivid area. For example, Mosheiov and
Sidney [14] considered the model in which the learning
effects gained from doing some jobs are stronger than those
from the other jobs, i.e., the so-called job-dependent
learning model. Lee et al. [12] studied a bi-criterion
scheduling problem on a single machine. Chen et al. [3]
considered a two-machine flowshop scheduling problem in
which the objective is to minimize the weighted sum of
total completion time and maximum tardiness. Eren and
G uner [6] applied the 0-1 integer programming approach
to derive the optimal solution, and used a random search,
the tabu search, and simulated annealing to obtain near-
optimal solutions for the total tardiness problem. Janiak and
Rudek [13] showed that a single machine scheduling
problem of minimizing the number of late jobs with a
positional learning effect is strongly NP-hard. Eren and
G uner (2007) considered a two-machine flowshop with
position-based learning, where the objective is to minimize
the weighted sum of the total completion time and
makespan.. Wang and Xia [21] studied the flowshop
problems when the learning effect is present. Wang [20]
( ) (0) 0 0f x f   .
This completes the proof.
Lemma 5. 1( 1) (1 ) (1 ) 0x kxk a a
k

 
 
      for
1a  , 1k  , 0x  and 1  .
Proof. Let 1( ) ( 1) (1 ) (1 )x kxg k a a
k

  
 
      .
Taking the first and second derivatives of ( )g  with
respect to  , we have
( ) 1 (1 ) lnx kxg k a xa a       ,
and
2 2( ) (ln )kxg kx a a   .
Since 1a  , 1k  , 0x  and 1  , we have
( ) 0g   . This implies that ( )g  is a non-decreasing
function for 1  . From Lemma 3, we have
( ) (1) 1 (1 ) ln 0x kxg g k a xa a         .
This implies that ( ) 0g   and ( )g  is a non-
decreasing function for 1  , too. Therefore, we have from
Lemma 4 that
1( ) (1) (1 ) (1 ) 0x kxg g k a a
k

 
      .
The proof is completed.
The formulation of the proposed problem is as follows.
Assume that there are n jobs to be scheduled on a single
machine. Each job i has a normal processing time ip
and a due date id . Specially, the actual processing time of
job j if it is scheduled in the rth position in a sequence is
1
[ ]
1
[ ]
r
l
l
b p
j r jp p a


 
 ,
where jp is the basic processing time of job j, [ ]lp
denotes the basic processing time of the job scheduled in
the lth position in the sequence, and a and b denote
two parameters with 1a  and 0b  . This learning
effect scheduling model is adapted from the sum-of-
processing-time-based learning effect scheduling model by
Koulamas and Kyparisis [10] and the job-position-based
learning effect scheduling model by Biskup [1]. Under the
proposed model, the actual processing time of a job
depends not only on the job’s scheduled position, but also
on the processing times of the jobs already processed.
For notational convenience, we denote all the problems
under consideration using the three-field notation scheme
   for scheduling problems introduced by Graham et
al. (1979).
3. Some single-machine results
In this section we will discuss several single-machine
problems under the proposed learning model. The
makespan and the total completion time problems are
shown to be polynomially solvable, while the total
weighted completion time and the maximum lateness
problems are shown to be polynomially solvable under
certain agreeable conditions. Suppose that S and S  are
two job schedules. The difference between S and S  is a
pairwise interchange of two adjacent jobs i and j, i.e.,
( , , , )S i j   and ( , , , )S j i   , where  and  
each denote a partial sequence. Furthermore, we assume
that there are r-1 jobs in  . Thus, jobs i and j are the rth
and (r+1)th job in S, whereas jobs j and i are scheduled in
the rth and (r+1)th position in S  . In addition, let B
denote the completion time of the last job in  . Under S,
the completion times of jobs i and j are respectively
1
[ ]
1( )
r
l
l
b p
i iC S B p a


 
  (1)
and
1 1
[ ] [ ]
1 1
( )
( )
r r
l l i
l l
b p b p p
j i jC S B p a p a
 
 
   
   (2)
Similarly, the completion times of jobs j and i in S  are
respectively
1
[ ]
1( )
r
l
l
b p
j jC S B p a


 
   , (3)
and
1 1
[ ] [ ]
1 1
( )
( )
r r
l l j
l l
b p b p p
i j iC S B p a p a
 
 
   
    . (4)
Theorem 1. For the
1
[ ]
1
[ ] max1/ /
r
l
l
b p
j r jp p a C


 
 problem,
the optimal schedule is obtained by sequencing the jobs in
the SPT order.
Proof. Suppose that i jp p . To show that S dominates
S  , it suffices to show that ( ) ( )j iC S C S  .
Taking the difference between equations (2) and (4), we
have
1 1
[ ] [ ]
1 1
( )
( ) ( ) ( )
r r
l l j
l l
b p b p p
i j j i iC S C S p p a p a
 
 
   
    
1
[ ]
1
( )
r
l i
l
b p p
jp a


 
 (5)
Substituting 1j
i
p
p
   , and ix bp into equation (5),
we have
1
[ ]
1( ) ( ) [( 1) ( )]
r
l
l
b p
x x
i j iC S C S p a a a

 



 

      . (6)
Since 1j
i
p
p
   , we have from Lemma 2 that
Proof. Suppose that i jd d . This implies that i jp p .
Thus, it is seen from Theorem 1 that ( ) ( )j iC S C S  . To
show that S dominates S  , it suffices to show that
max{ ( ), ( )} max{ ( ), ( )}i j j iL S L S L S L S  . By definition,
the lateness of jobs i and j in S and jobs j and i in S  are
respectively
( ) ( )i i iL S C S d  ,
( ) ( )j j jL S C S d  ,
( ) ( )j j jL S C S d   ,
and
( ) ( )i i iL S C S d   .
Since i jp p , we have from Theorem 1 that
( ) ( )j iC S C S  . (11)
With the condition that i jd d , we have
( ) ( )j iL S L S  . (12)
From equation (11), and since job i is processed before job
j in S, we have
( ) ( )i iL S L S  (13)
From equations (12) and (13), we have
max{ ( ), ( )} max{ ( ), ( )}i j i jL S L S L S L S  .
Thus, repeating this interchange argument for all the jobs
not sequenced in the EDD rule completes the proof of
Theorem 4.
4. Two flowshop problems
The formulation of the proposed problem for flowshop
setting is as follows. Assume that there is a set of n jobs, say
N = {1, 2, … , n}, to be processed on m machines M1, M2, … ,
Mm. Each job j consists of m operations 1 jO , 2 jO , … ,
m jO , where i jO must be processed on machine Mi, i = 1,
2, … , m. Processing of operation 1,i jO  can start only after
i jO has been completed. A machine can handle one job at a
time and preemption is not allowed. Moreover, we only
consider a permutation schedule. The actual processing time
pijr of job j on machine Mi if it is scheduled in the rth position
in a sequence is
1
[ ]
1
[ ]
r
i l
l
b p
ij r ijp p a





,
where ijp is the basic processing time of job j on machine
i, [ ]i lp denotes the basic processing time of the job
scheduled in the lth position on machine i in the sequence,
a and b denote two parameters with 1a  and 0b  .
For a given schedule  , ( )ij ijC C  represents the
completion time of operation ijO , and j mjC C denotes
the completion time of job j. In this paper we investigate
the special case where the processing times on all the
machines for any given job are identical, i.e., ij jp p .
For the traditional flowshop problem, Pinedo [15] showed
that the completion time of the jth job in a given sequence S
is as follows:
[ ] [ ] [1] [2] [ ]
1
( ) ( 1) max{ , ,..., }
j
j k j
k
C S p m p p p

   .
where [ ]kp is the basic common processing time of the
job scheduled in the kth position in the sequence. Similarly,
the completion time of the jth job in a given sequence S
under the proposed learning model is
1
[ ]
1
[ ] [ ]
1
( )
k
l
l
j b p
j k
k
C S a p







1
[ ]
[1] 1
[1] [2] [ ]( 1)max{ , ,..., }
j
l
l
b p
bp
jm p a p a p




 

(14)
Theorem 5. For the
1
[ ]
1
[ ] max/ /
r
i l
l
b p
ij r ijFm p p a C





problem, the optimal schedule is obtained by sequencing
jobs in the SPT order if ij jp p .
Proof. Let S and S  be two job schedules. Assume that
the difference between S and S  is a pairwise interchange
of two adjacent jobs i and j, i.e., ( , , , )S i j   and
( , , , )S j i   , where  and   each denote a partial
sequence. Furthermore, we assume that there are r-1 jobs in
 . Thus, jobs i and j are the rth and (r+1)th job in S,
whereas jobs j and i are scheduled in the rth and (r+1)th
position in S  . In addition, let B denote the completion
time of the last job in  . Under S, the completion time of
job j is
1 1
[ ] [ ]
1 1
( )
( )
r r
l l i
l l
b p b p p
j i jC S B p a p a
 
 
  
  
 
1 1
[ ] [ ]
1 1
( )
[1]( 1)max{ ,..., , }
r r
l l i
l l
b p b p p
i jm p a p a p
 
 
  
 
 
(15)
Similarly, the completion time of job i in S  is
1 1
[ ] [ ]
1 1
( )
( )
r r
l l j
l l
b p b p p
i j iC S B p a p a
 
 
  
   
 
1 1
[ ] [ ]
1 1
( )
[1]( 1)max{ ,..., , }
r r
l l j
l l
b p b p p
j im p a p a p
 
 
  
 
 
(16)
Suppose that i jp p . To show that S dominates S  , it
suffices to show that ( ) ( )j iC S C S  . Since i jp p ,
1a  , and 0b  , we have
1 1
[ ] [ ]
1 1
r r
l l
l l
b p b p
j ia p a p
 
 
 

 
,
[11] C. Koulamas, G.J. Kyparisis, Single-machine and two-
machine flowshop scheduling with general learning
functions, European Journal of Operational Research
178 (2007) 402-407.
[12] W.C. Lee, C.C. Wu, H.J. Sung, A bi-criterion single-
machine scheduling problem with learning
considerations, Acta Informatica 40 (2004) 303-315.
[13] G. Mosheiov, J.B. Sidney, Scheduling with general
job-dependent learning curves, European Journal of
Operational Research 147 (2003) 665-670.
[14] M. Pinedo, Scheduling: Theory, Algorithms, and
Systems, 2nd edition, Prentice Hall: Englewood Cliffs,
NJ. (2002 )
[15] R. Russell, III.B.W. Taylor, Operations Management:
multimedia version, 3rd edition. Prentice Hall: Upper
Saddle River, NJ. (2000)
[16] W.E. Smith, Various optimizers for single state
production, Naval Research Logistic Quarterly 3 (1956)
59-66.
[17] J.B. Wang, Single-machine scheduling problems with
the effects of learning and deterioration, OMEGA-The
international Journal of Management Science 35 (2007)
397-402.
[18] J.B. Wang, Z.Q. Xia, Flow-shop scheduling with a
learning effect, Journal of the Operational Research
Society 56 (2005) 1325-1330.
[19] T.P. Wright, Factors affecting the cost of airplanes,
Journal of Aeronautical Science 3 (1936) 122-128.
[20] L.E. Yelle, The learning curve: historical review and
comprehensive survey, Decision Science 10 (1979)
302-328.
ACKNOWLEDGMENT
This paper is support by NSC under grant number
NSC 97-2221-E-060-MY2.
AUTHOR BIOGRAPHIES
Chin-Chia Wu is a Professor in Department of Statistics,
Feng Chia University, Taiwan. He received a Doctoral
Degree from the Graduate Institute of Management, School
of Management, at National Taiwan University of Science
and Technology, Taiwan in 1997. His teaching and
research interests include applied statistics and operations
research. His email address is <cchwu@fcu.edu.tw>
異才是影響存貨政策與總成本，而非平均 lead time。
[3] 日本 Hasuike，Katagiri 與 Ishii 等學者依據一些必須的限度包括一些先前的 0-1 隨
機與模糊 programming problems 考慮更一般化 0-1random fuzzy programming
problem。日本學者們引用 change constraint 與 fuzzy goal，考慮必須度的最大化
來滿足 fuzzy goal。
[4] 加拿大華人學者 Zijiang Yang 教授引用 DEA(data envelopment analysis)的方法來
評估銀行分行運作的效率。Yang教授利用加拿大一家大銀行在大多倫多地區(Toronto)
的 204 家分行的資料進行研究。Yang 教授在文中提出很多在管理上的引導方法。
[5] Sharifi 等印度學者引用 markov chain 來解可靠度的問題(n-out-of-n system) real
time。Sharifi 等印度學者考慮 n個平行與相同可為維修的零件，且具有常數損壞率
維修率。作者們在文中提出分析解，也提出模擬測測試加以印證其理論解。
三、攜回資料名稱及內容
個人此次首次參加國際研討會吸取不少專家學者之新觀念，同時也帶回論文集一本兩
片剛光碟片內含與會人士發表論文之摘要，作為日後研究方向之參考。
四、誌謝
個人此次首次順利參加國際研討會，本人在次感謝國科會提供研討會之各項經費上的補
助。
[2] 泰國學者 Pisuchpen 與 chougchoho 提出一個有關玻璃工業生產排程的問題。此一問
題最大特色是多達 10 種工作形態與不同的處理流程。傳統方式的排法都會導致延遲的
發生。作者提出一套電腦模擬方法(Arena)來解此一問題，效果很好。
[3] Halim 與 Yusriski 等日本學者探討一個兩階段式的組合模型，第一階段是一個具有流
程工廠 m部機台所組成的晶片處理程序，第二階段是一個組合機台。主要是來安排批
次排序，亦即決定批次大小與批次安排順利以達真正流程時間最小化。
[4] 泰國學者 Phutthala 與 Sethanan 研究一再單機排程的問題且考慮到設致時間。在很多
製造業中往往一個不適當的排序將導致很高的從新排序的成本。作者提出一個數學模
式來解中小工作數，也提出近似演算法解大工作件的方法來評估運作的效率。
[5] Udomsakdigool 與 Kachitvichyanukul 等泰國學者研究一個開放性工廠具多目標函
數。作者们引用蟻群法來解此一問題。作者們在文解到 15 個工作件 10 部機器。
[6] 另外，也跟國內學者中山大學盧淵源教授，清華簡禎富教授，交通大學巫木誠教授、
高雄應用科大王天津教，授遠東科大陳禎祥教授、陳正哲教授、賴春美教授、以及致
遠科大廖焜熙教授等教授互相交流，交換心得。
三、攜回資料名稱及內容
個人此次首次參加國際研討會吸取不少專家學者之新觀念，同時也帶回論文集一本一
片剛光碟片內含與會人士發表論文之摘要，作為日後研究方向之參考。
四、誌謝
個人此次首次順利參加國際研討會，本人在次感謝國科會提供研討會之各項經費上的補
助。
[2] 泰國學者 Pisuchpen 與 chougchoho 提出一個有關玻璃工業生產排程的問題。此一問
題最大特色是多達 10 種工作形態與不同的處理流程。傳統方式的排法都會導致延遲的
發生。作者提出一套電腦模擬方法(Arena)來解此一問題，效果很好。 
 
[3] Halim 與 Yusriski 等日本學者探討一個兩階段式的組合模型，第一階段是一個具有流
程工廠 m部機台所組成的晶片處理程序，第二階段是一個組合機台。主要是來安排批
次排序，亦即決定批次大小與批次安排順利以達真正流程時間最小化。 
 
[4] 泰國學者 Phutthala 與 Sethanan 研究一再單機排程的問題且考慮到設致時間。在很多
製造業中往往一個不適當的排序將導致很高的從新排序的成本。作者提出一個數學模
式來解中小工作數，也提出近似演算法解大工作件的方法來評估運作的效率。 
 
[5] Udomsakdigool 與 Kachitvichyanukul 等泰國學者研究一個開放性工廠具多目標函
數。作者们引用蟻群法來解此一問題。作者們在文解到 15 個工作件 10 部機器。 
 
 [6] 另外，也跟國內學者中山大學盧淵源教授，清華簡禎富教授，交通大學巫木誠教授、
高雄應用科大王天津教，授遠東科大陳禎祥教授、陳正哲教授、賴春美教授、以及致
遠科大廖焜熙教授等教授互相交流，交換心得。 
 
三、攜回資料名稱及內容 
個人此次首次參加國際研討會吸取不少專家學者之新觀念，同時也帶回論文集一本一
片剛光碟片內含與會人士發表論文之摘要，作為日後研究方向之參考。 
 
四、誌謝 
    個人此次首次順利參加國際研討會，本人在次感謝國科會提供研討會之各項經費上的補
助。 
 
 
  
positions in the sequence. Koulamas and Kyparisis (2007) 
considered a general sum-of-job-processing-times-based 
learning effect scheduling model in which employees learn 
more if they perform a job with a longer processing time, 
etc. 
Recently, Biskup (2008) provided a comprehensive 
review of scheduling research with learning considerations. 
In particular, he classified the learning models into two 
types, namely position-based learning and sum-of-
processing-times-based learning. He further claimed that 
position-based learning assumes that learning takes place 
by processing time independent operations like setting up 
machines. This seems to be a realistic assumption for the 
case where the actual processing time of a job is mainly 
machine-driven and has no (or near to zero) human 
interference. The sum-of-processing-times-based approach 
takes into account the experience workers have gained from 
producing the jobs. This might, e.g., be the case for offset 
printing, where running the press itself is a highly 
complicated and error-prone process.  
However, it can be observed that the actual processing  
time of a given job in both models dramatically declines to  
zero as job size or normal processing time becomes larger. 
Motivated by this observation, we introduce a learning  
effects scheduling model with in which the actual 
processing time of a job might be controlled by two 
parameters, i.e. the actual processing time of a job is a 
exponential function and its degree is dependent on a 
function of the total normal processing times of the jobs 
already processed and of the job’s scheduled position. 
The remainder of this paper is organized as follows.   
Several lemmas and problem formulation are presented in 
the next section. In Section 3 we provide the solution 
procedures for the single-machine problems to minimize  
makespan,  total  completion time, total weighted 
completion time, and maximum lateness minimization for 
the proposed model. In Section 4 we consider two special 
cases of the flowshop  problems to minimize makespan 
and total completion time. We conclude the paper in the last 
section. 
 
2. Some lemmas and problem formulation 
Before presenting the main results, we introduce some 
lemmas that will be used throughout the paper. 
Lemma 1. 1 ln 0x xxa a aθ− −− − ≥  for  0x ≥ , 1θ > , and 
1a > . 
Proof. Let ( ) 1 lnx xf x xa a aθ− −= − − . Taking the first 
derivative of ( )f x  with respect to x, we have 
2 2( ) ln (ln ) lnx x xf x a a x a a a aθ θ− − −′ = − + + 0≥  
for  0x ≥ , 1θ > , and 1a > . Thus, this implies that 
( )f x  is a non-decreasing function on  0x ≥ . Since 
0(0) 1 0f a== − =  for  0x ≥ , 1θ > , and 1a > , we have 
( ) 0f x >  
for 0x ≥ , 1θ > , and 1a > . This completes the proof. 
 
Lemma 2. ( 1) 0x xa aθθ θ− −− + − ≥  for 0x ≥ , 1θ > , 
and 1a > . 
Proof. Let ( ) ( 1) x xg a aθθ θ θ− −= − + − . Taking the first and 
second derivatives of ( )g θ  with respect to θ , we have          
( ) 1 lnx xg xa a aθθ − −′ = − −  
and 
2 2"( ) (ln )xg x a aθθ −= . 
Since 0x ≥ , 1θ ≥ , 1a > , it implies that ( ) 0g θ′′ ≥ . 
Therefore, ( )g θ′  is a non-decreasing function for 1θ ≥ . 
From Lemma 1, we have  
(1) 1 ln 0x xg xa a aθ− −′ = − − > . 
Using the fact that ( )g θ′  is a non-decreasing function for 
1θ ≥ , this implies that 
( ) (1) 0g gθ′ ′≥ > . 
Therefore, it also implies that ( )g θ  is a non-decreasing 
function for 1θ ≥ . Since (1) 0g = , we have 
( ) 0g θ ≥  
for 0x ≥ , 1θ ≥ , and 1a > . This completes the proof. 
 
Lemma 3. 1 (1 ) ln 0x kxk a xa a− −+ − − ≥  for 1a > , 
1k ≥ , 0x ≥ . 
Proof. Let ( ) 1 (1 ) lnx kxf x k a xa a− −= + − − . Taking the 
first derivative of ( )f x  with respect to x , we have 
2( ) ( ) ln (ln )x kx kxf x ka a a kxa a− − −′ = − + . 
Since 1a > , 1k ≥ , 0x ≥ , and x kxa a− −> , we have 
( ) 0f x′ > . This implies that ( )f x  is a non-decreasing 
function for 0x ≥ . Since (0) 1 0f = > , we have 
( ) 0f x > . This completes the proof. 
Lemma 4. 1(1 ) (1 ) 0x kxk a a
k
− −− − − >  for 1a > , 1k ≥ , 
and 0x ≥ . 
Proof. Consider the following function 
1( ) (1 ) (1 )x kxf x k a a
k
− −= − − − . 
Taking the first derivative of ( )f x  with respect to x , we 
have 
( ) ( ) lnx kxf x ka a a− −′ = − . 
Since 1a > , 1k ≥ , 0x ≥ , and x kxa a− −> , we have 
( ) 0f x′ > . This implies that ( )f x  is a non-decreasing 
function for 1a > , 1k ≥ ,  0x ≥ , and x kxa a− −> . Thus, 
  
( ) ( ) 0i jC S C S′ − ≥ .                            (7) 
Thus, S  dominates S ′ . Therefore, repeating this 
interchange argument for all the jobs not sequenced in the 
SPT order completes the proof of the theorem.            
Theorem 2. For the 
1
[ ]
1
[ ]1 / /
r
l
l
b p
j r j jp p a C
−
=
− ∑= ∑  
problem, the optimal schedule is obtained by sequencing 
jobs in the SPT order. 
Proof. Suppose that i jp p≤ . From Theorem 1, we have 
( ) ( )j iC S C S ′<  since i jp p≤ . To show that S  
dominates S ′ , it suffices to show that 
( ) ( ) ( ) ( )i j j iC S C S C S C S′ ′+ ≤ + . 
From equations (1) to (4), we have 
1
[ ]
1{ ( ) ( )} { ( ) ( )} ( )
r
l
l
b p
j i i j j iC S C S C S C S p p a
−
=
− ∑′ ′+ − + = −  
1 1
[ ] [ ]
1 1
( )
( )
r r
l l j
l l
b p b p p
j i ip p a p a
− −
= =
− − +∑ ∑+ − +  
1
[ ]
1
( )
r
l i
l
b p p
jp a
−
=
− +∑−                        (8) 
The first term of equation (8) is non-negative since 
i jp p≤ . It is also noted from the proof of Theorem 1 that 
the sum of the last three terms of equation (8) is also non-
negative. This implies that 
( ) ( ) ( ) ( )i j j iC S C S C S C S′ ′+ ≤ + . Thus, repeating this 
interchange argument for all the jobs not sequenced in the 
SPT rule completes the proof of Theorem 2. 
 
Smith (1956) showed that sequencing jobs according to the 
weighted smallest processing time (WSPT) rule provides 
an optimal schedule for the classical total weighted 
completion time problem, i.e., sequencing jobs in non-
decreasing order of /j jp w , where jw  is the weight of 
job j. However, the WSPT order does not yield an optimal 
schedule under the proposed learning model. Although the 
WSPT order does not provide an optimal schedule under 
the proposed learning model, it still gives an optimal 
solution if the processing times and the weights are 
agreeable, i.e., 1
p wj j
p wi i
≥ ≥  for all jobs i and j. The result 
is stated in the following theorem. 
Theorem 3. For the 
1
[ ]
1
[ ]1 / /
r
l
l
b p
j r j j jp p a w C
−
=
− ∑= ∑  
problem, an optimal schedule is obtained by sequencing 
jobs in non-decreasing order of /i ip w  if the processing 
times and the weights are agreeable, i.e., 1j j
i i
p w
p w
≥ ≥  for 
all jobs i and j. 
Proof. Suppose that 1j j
i i
p w
p w
≥ ≥ . Since i jp p≤ , it is 
seen from Theorem 1 that ( ) ( )j iC S C S ′≤ . Thus, to show 
that S dominates S ′ , it suffices to show that 
( ) ( ) ( ) ( )i i j j j j i iw C S w C S w C S w C S′ ′+ ≤ + . From equations 
(1) to (4), we have 
[ ( ) ( )] [ ( ) ( )]j j i i i i j jw C S w C S w C S w C S′ ′+ − +  
1 1 1
[ ] [ ] [ ]
1 1 1
( )
{ [ ] [ ]}
r r r
l l l j
l l l
b p b p b p p
j j i j iw B p a w B p a p a
− − −
= = =
− − − +∑ ∑ ∑= + + + +
 
1 1 1
[ ] [ ] [ ]
1 1 1
( )
{ [ ] [ ]}
r r r
l l l i
l l l
b p b p b p p
i i j i jw B p a w B p a p a
− − −
= = =
− − − +∑ ∑ ∑− + + + +
 
[ ] [ ] [ ]
1 1 1
1 1 1
( )
( ) [ ]
r r r
il l l
l l l
b p b p b p p
i j j i j jw p w p a w p a a
− − −
= = =
− − − +∑ ∑ ∑= − + −  
[ ] [ ]
11
11[ ]
rr
jll
ll
b p pb p
i iw p a a
−−
==
⎞⎛− +− ⎟⎜⎜ ⎟⎝ ⎠∑∑− −                (9) 
Substituting / 1
/
j j
i i
p w
p w
θ = ≥ , ibp x= , and j
i
w
k
w
=  into 
equation (9), we have 
[ ( ) ( )] [ ( ) ( )]j j i i i i j jw C S w C S w C S w C S′ ′+ − +         
[ ]
1
1
1{( 1) (1 ) (1 )}
r
l
l
b p
x kx
j iw p a k a ak
θθ θ
−
=
− − −∑= − + − − − . (10) 
                      
From Lemma 5, the value of equation (10) is non-negative, 
so we have 
( ) ( ) ( ) ( )j j i i i i j jw C S w C S w C S w C S′ ′+ ≥ + . 
Thus, repeating this interchange argument for all the jobs 
not sequenced in the WSPT order completes the proof of 
Theorem 3. 
 
Let i i iL C d= −  denote the lateness of job i, for i = 1, 2,…, 
n. Ordering jobs according to the earliest due-date (EDD) 
rule provides the optimal sequence for the classical 
maximum lateness problem. However, this policy is not 
optimal under the proposed learning model.Although the 
EDD order does not provide the optimal solution for the 
maximum lateness problem under the proposed model, it is 
still optimal if the job processing times and the due dates 
are agreeable, i.e., i jd d≤  implies i jp p≤  for all jobs i 
and j. The result is stated in the following theorem. 
Theorem 4. For the maximum lateness problem under the 
proposed learning model, an optimal schedule is obtained 
by sequencing jobs in non-decreasing order of id  (i.e., the 
EDD order) if the job processing times and the due dates 
are agreeable, i.e., i jd d≤  implies i jp p≤  for all jobs i 
and j. 
  
 and  
1 1
[ ] [ ]
1 1
( )
r r
l l i
l l
b p b p p
j ja p a p
− −
= =
− − +
≥∑ ∑ . 
This implies that 
1
[ ]
1
[1]max{ ,...,
r
l
l
b p
jp a p
−
=
− ∑ 1 [ ]
1
( )
, }
r
l j
l
b p p
ia p
−
=
− +∑
 
1 1
[ ] [ ]
1 1
( )
[1]max{ ,, , , }
r r
l l i
l l
b p b p p
i jp a p a p
− −
= =
− − +
≥ ∑ ∑…  (17) 
 From equations (15) and (16), we have 
( ) ( )i jC S C S′ − = {
1 1
[ ] [ ]
1 1
( )
r r
l l j
l l
b p b p p
j ia p a p
− −
= =
− − +
+∑ ∑  
1 1
[ ] [ ]
1 1
( )
[1]( 1) max{ ,..., , }}
r r
l l j
l l
b p b p p
j im p a p a p
− −
= =
− − +
+ − ∑ ∑  
− {
1 1
[ ] [ ]
1 1
( )
r r
l l i
l l
b p b p p
i ja p a p
− −
= =
− − +
+∑ ∑  
1 1
[ ] [ ]
1 1
( )
[1]( 1)max{ ,..., , }}
r r
l l i
l l
b p b p p
i jm p a p a p
− −
= =
− − +
+ − ∑ ∑   (18) 
Substituting 1j
i
p
p
θ = ≥ , and ix bp=  into equation (18), 
we have 
( ) ( )i jC S C S′ − =
1
[ ]
1 [( 1) ( )]
r
l
l
b p
x x
ip a a a
θθ θ
−
=
− − −− + −∑  
             
1
[ ]
1
[1]( 1) (max{ ,...,
r
l
l
b p
jm p a p
−
=
−
+ − × ∑
1
[ ]
1
( )
, }
r
l j
l
b p p
ia p
−
=
− +∑
 
[1]max{ ,p−
1 1
[ ] [ ]
1 1
( )
, , , })
r r
l l i
l l
b p b p p
i ja p a p
− −
= =
− − +∑ ∑
… .  
From equation (17) and Lemmas 1 and 2, we have 
( ) ( ) 0i jC S C S′ − ≥ . 
Thus, S  dominates S ′ . Therefore, repeating this 
interchange argument for all the jobs not sequenced in the 
SPT order completes the proof of the theorem. 
Theorem 6. For the 
1
[ ]
1
[ ]/ /
r
i l
l
b p
ij r ij jFm p p a C
−
=
−
= ∑ ∑  
problem, the optimal schedule is obtained by sequencing 
jobs in the SPT order if ij jp p= . 
Proof. The proof is similar to that of Theorem 5 and so is 
omitted.  
 
5. Conclusions 
Scheduling problems with learning effects have captured 
many scheduling researchers’ attention in recent years.,The 
literatures indicated that most of the research assumed that 
the learning effects depend on job positions or the sum-of-
processing-times-based of of the jobs already processed. 
However, the actual processing time of a given job in both 
models dramatically declines to zero as job size or normal 
processing time becomes larger. Motivated by this situation, 
In this paper we introduce a new learning effects 
scheduling model with in which the actual processing time 
of a job might be controlled by two parameters, i.e. the 
actual processing time of a job is a exponential function 
and its degree is dependent on a function of the total 
normal processing times of the jobs already processed. In 
particular, we showed that the single-machine makespan 
and total completion time problems are polynomially 
solvable under the proposed learning model. In addition, 
we showed that the total weighted completion time and the 
maximum lateness problems are polynomially solvable 
under certain agreeable conditions. Finally, we presented 
polynomial-time optimal solutions for two flowshop 
problems to minimize makespan and total completion time 
under the assumption of identical processing times on all 
the machines.  
 
References 
Biskup, D. ( 1 9 9 9 )  Single-machine scheduling with 
learning considerations .  European   Journal of 
Operational Research 115, 173-178. 
Biskup, D.  ( 2 0 0 8 )  A state-of-the-art review on 
scheduling with learning effect . European Journal of 
Operational Research, 188(2), 315-329. 
Cheng,T.C.E. Wang, G.Q. (2000) Single machine 
scheduling with learning effect considerations. Annals of 
Operations Research 98, 273-290. 
Chen, P., Wu, C.C., Lee, W.C. (2006) A bi-criteria two-
machine flowshop scheduling problem with a learning 
effect. Journal of the Operational Research Society, 57 
1113-1125. 
Eren, T., Guner, E. (2007a) Minimizing total tardiness 
in a scheduling problem with a learning effect, Applied 
Mathematical Modelling, 31, 1351-1361. 
Eren, T.,  G u ner, E. (2007b) A bicriteria flowshop 
scheduling with a learning effect, Applied Mathematical 
Modelling, 32(9),1719-1733. 
Graham, R.L., Lawler, E.L., Lenstra, J.K., Rinnooy Kan, 
A.H.G. (1979) Optimization and approximation in 
deterministic sequencing and scheduling: A survey. Annals of 
Discrete Mathematics, 5, 287-326. 
Heiser, J., Render, B. (1999) Operations Management, 
5th edition, Prentice Hall: Englewood Cliffs, NJ.  
Janiak, A., Rudek, R. (2008) A new approach to the 
learning effect: Beyond the learning curve restrictions. 
Computers and Operations Research, 35(11), 3727-3736. 
Janiak,  A. , Rudek,  R. ( 2008 )  Viewpoint on
 : Complexity results for single-
machine scheduling with positional learning effects .
Journal of the Operational Research Society, 59, 1430. 
Koulamas, C., Kyparisis, G.J. (2007) Single-machine 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
本計畫引用自然對數學習效果函數 (learning effect) 與自然對數退化現象且伴隨著事
後序列相依的設置時間之若干單機的概念在傳統的單機模型排程之中，成功的發表三篇學術
論文在知名 SCI 期刊。另外野參加國際學術研討會議兩次且發表兩篇會議論文。個人非常感
謝國科會的支持與鼓勵才能有這些成果的產出。(詳細資料請參閱附件)。本計劃大致上與原
計劃是吻合 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100字為限） 
發表三篇學術論文在知名 SCI 期刊。另外野參加國際學術研討會議兩次且發表兩篇會議論
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500字為限） 
1.主題一之一 ：我們已經完成一個生產系統中具自然對數函數之學習效果之若干單機排
程問題之研究。 
refer to Information Sciences 179, 3127-3135 2.主題一之二 ：我們完成一個生產系
統中在具自然對數函數之退化現象且伴隨著事後序列相依的設置時間之若干單機與流程
工廠排程問題之研究(投稿中) 
3 我們完成；推導五個單機排程在更一般化的伴隨著事後序列相關設置時間自然對數學習
效果與位置退化現象模型下的證明。refer to Computers & Industrial Engineering, 
58(2), 326-331  
本計畫案成功完成 Biskup (1999)提出學習效果曲線收斂太快題出另外較為平滑的模式對
於後續得研究有一些幫助 
我們也見到有許多新的這方面意題產生共鳴效果 
 
