I 
 
摘要 
近年來，面對惡意程式持續的威脅，無論是在個人電腦或商用電腦上，確實的安裝防
毒軟體並且定期更新病毒碼已經是普遍必要的工作。但是這樣做卻從未真正能讓惡意程式
銷聲匿跡，新的攻擊仍然是三不五時地發生。可見欲透過防毒軟體遏止惡意程式攻擊是一
項治標不治本，甚至是本末倒置的作法。其原因在於其所使用的特徵碼比對法必須事先建
置惡意程式的特徵碼方能有效偵測，如此面對新的惡意程式只能於事後進行補強偵測，無
法在其出現的第一時間就有效的攔阻，達到預防的效果。 
為此本計畫的研究目的著重於提供一套具有預測能力的惡意軟體偵測機制，期望能徹
底改善目前防毒軟體的不足。我們認為一般軟體和惡意程式既然在執行目的上是不同的，
其在設計本質和程式行為上亦是有差異。藉由觀察程式所使用的動態連結檔（Dynamically 
Linked Library）之間的關連性和應用程式(Application Programming Interface)介面上的使
用，並透過資訊增益(Information Gain)技術進行特徵縮減(Feature Reduction)和支持向量機
(Support Vector Machine)方法，我們分別完成特徵選取(Feature Selection)與學習分類器
(Learning Classifier)的建立，並在 1758 筆正常程式和 846 筆惡意程式的實驗資料下，成功
的建置具有 99%的整體偵測率和 96.66%的整體預測率的系統。 
 
關鍵字： 惡意程式、資訊增益、特徵縮減、特徵選取、支持向量機 
 
 
 
 
 
 
 
 
 
 
 
1 
 
1. Introduction 
According to Symantec® security reports [10, 11], during July 2006 to June 2007, the virus 
threats have been getting serious so far. There were total 8,258 new Win32 variants and 136 
previously unseen malware reported on the second half year of 2006. The number of virus 
without anti-virus signatures increased 22 percent over the first half of 2006. Furthermore, 
212,101 new malicious code threats appeared in the first half year of 2007. It was a 185 percent 
increase over the second half of 2006. The studies in Computer virus detection have been worked 
for many years; however, the records above show that they are apparently not well enough. 
A malware detection model could be classified into one of the two categories: a 
signature-based detector and a heuristic classifier. Signature-based anti-virus software catches 
malware based on “known” signature, but it is unrealistic for unknown virus or variants of existed 
ones. Most commercial antivirus applications use such signature-based approach and certainly get 
an excellent result on detecting known malicious codes. However, any novel malicious code can 
easily get chance to carry out its dirty work until vendors find it and distribute new signature 
definitions. Recall of the Melissa virus, Love letter, CodeRed, and Blaster, they all caused severe 
damages before antivirus vendors provided remedies. On the other hand, a heuristic classifier 
usually analyzes code sequences in a program to predict its behavior and judge whether it is a 
malicious code or not. Although a heuristic classifier may possibly cause some false positive 
alarms, it has potential ability to identify a new malware and thus thwart a virus outbreak before 
it becomes an epidemic.  
No matter signature-based or heuristic classifier, if the information for judgment is collected 
absolutely from the code itself, without any running information, such as memory and CPU time 
consumptions, traffic amount, etc, this kind of detection is called static analysis. Static analysis 
examines control flows, programming structures, and contents of codes to determine properties of 
an executable program without running it. While a dynamic analysis lets a program be run and 
monitors the execution process trying to find some abnormal behaviors if exist. Ideally, 
identifying a malware before running it is a better solution, since it would have no chance to be 
too late before damage occurred. Therefore, our aim is to propose a virus prevention model 
(VPM) based on novel data mining methods to fix the drawbacks of traditional anti-virus 
methods. 
The rest of this paper is organized in the following way. Section 2 is devoted to some related 
researches of malicious executable detection. Section 3 states the main ideas of our VPM with 
experiment results given in Section 4. Finally, a few concluding remarks are sketched in Section 
5. 
 
2. Related work 
In general, there are two kinds of approaches for virus detection: static analysis and dynamic 
analysis. Static analysis utilizes the information in suspected executable programs without 
running it; and dynamic analysis monitors software activities after loading it into memory. 
Dynamic approach pays more attention on activities, but it is hard to prevent damage in advance 
to request the operating system to execute critical operations such as file management, resource 
access, and device control etc. Microsoft® Windows operation system provided many APIs in all 
kinds of DLLs for applications to interact with it. Utilizations of DLLs and APIs could be defined 
as behaviors of the executable and considered as attributes, which provide some clues to 
discriminate viruses from benign programs.  
 The attributes of an executable can be statically extracted from its Portable Executable (PE) 
file format [8] without running the program. PE file format is a data structure, which records 
necessary information for the Windows OS loader to manage the wrapped executable 
code. Figure 2 gives a simple view of its format. We used a utility named “Dependency Walker” 
to parse the PE file format and output in tree structure. Figure 3 is an example of a tree diagram, 
which illustrates the relationships of the invoking DLLs in an executable. In this tree structure, 
each parent DLL invokes some APIs exported from its child DLLs. Basing on the tree structure, 
we defined three types of attributes: T1, T2 and T3. T1 indicates the APIs directly used by the 
main program, i.e., the APIs reside in the first layer DLLs. T2 is the APIs contained in the first 
layer DLLs indirectly invoked by other DLLs except the main executable. T3 consists of the 
entire dependency paths to represent the relationship between DLLs. Each of them is a complete 
downward path, starting from a first layer DLL to each of its leaf DLL. Moreover, each DLL 
records a hash value to indicate the content of the APIs directly exploited by its parent DLL. An 
example of three different types of attributes is given in Figure 3. 
 
 
Figure 2. Portable Executable File Format 
 
3 
 
information about X provided by Y. 
 
                                             
In our study, there were only two classes in the dataset and H(X) is equal to the equation below
                      
: 
(v=virus, b=benign) 
        
  
, where |.| denotes the number of particular kind of executable and |S| = |v| + |b|. In addition, Y is 
an attribute with Boolean value such that Y = 1 indicates the subset S1 in which each instance has 
attribute Y and Y = 0 represents the subset S0 = 
           
S - S1. is denoted in (5) and |Sk| = |vk| +  
|bk|. 
 
According to the definition of IG, the higher the IG, the better discrimination the attribute has. 
As shown in Figure 4, it can also mean that attributes with equal IG are also the same in 
discrimination power that could be highly related. Therefore, it is unnecessary to reserve all of 
them to increase the burden of the data mining process especially when dealing with 
high-dimensional problem. Basing on this simple idea, the attribute elimination was performed by
disca
 
rding all but one of attributes with the same IG. Finally, according to the attributes that we 
had reserved, every executable was represented by a Boolean vector. Each vector element 
corresponds to an attribute and its Boolean value indicates the corresponding attribute exists in 
the executable or not. An example is given in Table 1. 
 
Figure 4. Attribute selection by Information gain 
5 
 
    
 
Figure 5. Linearly separable SVM 
 
 
Figure 6. Linearly non‐separable SVM 
7 
 
9 
 
otations for performance evaluation 
detects a spyware precisely. The true positive rate 
Table 2. N
True Positives 
(TP) 
The true positive indicates that the detection system 
(TP rate) is also called the detecting rate 
FN
TP  
TP +
False Positives 
(FP) 
The false positive indicates that a particular 
executable is detected as a spyware by the system 
but it is actually a benign. If it is too high, it will let 
ministrators to intentionally ignore the 
 warnings. The false positive rate 
the ad
detection system
(FP rate) also is called false alarms 
TNFP
FP
+  
Overall Accuracy 
(OA) 
It is defined as. Evaluating the detection efficiency of 
the spyware detection system, it is not only considering 
the higher TP rate but also considering the lower FP 
rate. Therefore, the overall accuracy could be the 
main reference for us to compromise both TP rate 
and FP rate. 
FNFPTNTP
TNTP
+++
+
 
Cross Validation 
(CV) 
The concept of cross validation rate (CV Rate) stated 
above; we use this to represent the prediction ability 
l 
 
 
of our system when facing an unknown or nove
spyware. 
 
Since both of the d t rate of benign program are 
important, we evaluated Accuracy ( A) 
ind the proportion tained two parts: 
the detection of known s. The prediction 
rate was calculated by fi t were randomly 
divided into five disjoint , one of them was 
chosen as the testing set ere merged into a training set. This 
pro  et. We calculated 
the average OA as the ge
After parsing the PE 3 16 attributes in 
the beginning. The expe  of the attributes 
with lower IG were disc y. Therefore, we 
successfully reduced the tributes from 93,116 to 1,398 after the process of attribute 
elim sl  pro edure stated 
in  3.3. Evidentl o made further 
progress in classificatio osen to train the 
RBF-SVM and achieved a proper performance with 96.66% in prevention rate and 99.00% in 
detection rate (TP=98.35%, FP=0.68%). 
 
etection rate of virus and the false aler
 them at the same time by the viewpoint of Overall 
of correctly classified executables. The experiment con
viruses and the prediction of previously unseen viruse
ve-fold cross-validation (CV). In other words, the datase
 portions with an equal number of sizes in each portion
, and the remaining four portions w
O
icates 
cedure was repeated five times by choosing different partition as a testing s
neralization ability of our system.  
 file format of each executable in the dataset, we got 9
riment results shown in Table 3 reveal that even some
arded; the performance of RBF-SVM remained stead
 number of at
,1
ination. Continuou
Section
y, Figure 3 presents the results of the feature selection
y, we not only succeeded in feature reduction but a
n performance. Finally, the top 429 features was ch
c
ls
11 
 
email addresses, bank account numbers or credit card numbers brings a huge damage if those 
collected important information are used by someone with evil intention. With the observation 
that it is natural for a spyware to work stealthily and peacefully with the host and not to destroy 
the victim, we used both static and dynamic methods to analyze the behaviors of spyware and 
benign programs. Then, adopt the concept of information gain to extract valuable behaviors 
which are distinguishingly used by normal executables and spyware to train a classifier. The 
experiment, results given in Table 4, shows that this integrated architecture is proposed in the first 
year had 98% detecting rate to known spyware and 96% detecting rate to unknown or novel 
spyware.  
 
Table 4. Performance of Spyware Detection System(SDS) 
 FP TP OA CV 
SDS 0.68% 95.33% 97.91% 96.43% 
 
Next, in the second year of this project, we was encouraged with the study results of the first 
year and wanted to 
revious work performed well in the spyware area, it is clearly that dynamic analysis can’t be 
the fact that the destructive attacks could be 
features should be observed for elaborate the 
nua
d Support Vector Machine (SVM) to combat two types of malware-virus and 
wor
extent the architecture to the more generic situation-malware. Although our 
p
directly applied to the malware problem due to 
launched as well. Nevertheless, more kinds of 
nces between benign and malicious programs. Therefore, we proposed a complete static 
malware detection system points out relationships among the usages of DLLs of different kinds 
of executables and combined several data mining technologies such as Information Gain (IG), 
Bayes classifier an
m. We used IG to choose valuable raw features and finally adopted Bayes theory and SVM to 
train a classifier for detection engine. A large dataset totally containing about 3000 executable 
programs were used to evaluate performance of our system. Although Bayes classifier didn’t 
perform well, the result of SVM showed that for known malware the detection rate is nearly 99% 
and the detection rate for unknown malware is about 96%. Table 5 presents the experiment results 
of this project in second year. 
 
Table 5. Performance of Malware Detection System 
 SVM OA Bayes OA SVM CV Bayes CV 
Virus 99.53% 83.2% 95.88％ 83.1% 
Worm 98.8% 94.5% 96.10％ 72.62% 
 
In the final period of this project, improvement of detection performance was continued in 
tandem with moderation of the computing resource. A better way to adopt feature reduction 
together with f to construct a 
detection system wi  proper per ance w 96.66  prev
detection rate. Table 6 conducts a summary of this project. 
eature selection method is proposed. Only 429 features were used 
th form ith % in ention rate and 99.00% in 
13 
 
 
References 
 
[1] J. Ber bi, J. Desharnais Static 
 Exec mposium on Requirements 
Engineering for Information Security (SREIS' 01), 2001. 
[2] J. Ber . Ktari, Static analysis of binary code to 
isolate malicious behaviors, Proceedings of the IEEE 8th International Workshops on 
9. 
[3] C.-C  
[4] N. Cristianini and J. Shawe-Taylor chines, 
Cam
[5] rning to detect malicious executables in the wild, 
Proceed  international conference on Knowledge discovery 
and USA, 2004. 
[6] M. M. Masud, L. Khan and B. Thuraisingham, A Hybrid Model to Detect Malicious 
 International Conference on Communications 
(ICC tions Network Security Symposium (2007), pp. 
1443-1448. 
[7] C. M lysis of executables to detect malicious patterns, 
Proceedings of the 12th conference on USENIX Security Symposium - Volume 12, 
[9] M. G. Schultz, E. Eskin, E. Zadok and S. J. Stolfo, Data mining methods for detection of 
new malicious executables, in E. Eskin, ed., Proceedings of the 2001 IEEE Symposium on 
Security and Privacy, 2001, pp. 38-49. 
[10] Symantec, Symantec Internet Security Threat Report, 11 (March 2007). 
[11] Symantec, Symantec Internet Security Threat Report, 12 (September 2007). 
[12] V. N. Vapnik, Statistical Learning Theory, John Wiley & Sons, 1998. 
itten and E. Frank, Data Mining- Practical Machine Learning Tools and 
Techniques with JAVA Implementations, Morgan Kaufmann, 2005. 
 
 
 
 
 
geron, M. Debba , M. M. Erhioui, Y. Lavoie and N. Tawbi, 
utable Programs, SyDetection of Malicious Code in
geron, M. Debbabi, M. M. Erhioui and B
Enabling Technologies: Infrastructure fo
. Chang and C.-J. Lin, LIBSVM: a l
bridge University Press, 2000. 
r Collaborative Enterprises, 1999, pp. 184-18
ibrary for support vector machines, 2001.
, An Introduction to Support Vector Ma
J. Z. Kolter and M. A. Maloof, Lea
ings of the tenth ACM SIGKDD
data mining, ACM, Seattle, WA, 
Executables, In Proceedings of the IEEE
), Computer and Communica
ihai and J. Somesh, Static ana
USENIX Association, Washington, DC, 2003. 
[8] M. Pietrek, Peering Inside the PE: A Tour of the Win32 Portable Executable File Format, 
Microsoft Systems Journal, 9 (1994), pp. 15-34. 
[13] I. H. W
 
 
 
 
可供推廣之研發成果資料表 
■ 可申請專利  ■ 可技術移轉                                      日期：97年7月31日 
國科會補助計畫 
計畫名稱：具學習功能之防惡意程式系統之研究 
計畫主持人：吳金雄 教授         
計畫編號：NSC 94-2213-E-158-005             
學門領域：資訊安全 
技術/創作名稱 具學習能力之惡意程式偵測機制 
發明人/創作人 吳金雄 
技術說明 
中文： 
本研究計畫之技術主要是針對運行於 Windows 平台上的可執行檔
類型之一般應用程式與惡意程式(如病毒、蠕蟲、木馬、後門和間
諜軟體)進行靜態與動態方法分析蒐集程式相關行為資訊。靜態分
析法包含動態連結檔個別的呼叫與之間的關聯性、應用程式介面的
使用。而動態的部分則包含對於系統註冊檔的修改、系統資料夾內
檔案的增刪和網路使用情況等。並利用資料探勘法從中之特徵選取
技術萃取出有助於鑑別出惡意程式的程式行為作為特徵，結合特徵
縮減技術達到特徵數量的壓縮。最後以機器學習演算法訓練不僅同
時能偵測現有惡意程式，更具備預防未來新型惡意程式之能力的學
習分類器。 
 
英文： 
This research project is targeted at the analysis the 
behaviors of Windows executables which can be used to detect 
malware such as virus, worm, and spyware. 
First, static and Dynamic analyzing methods were both been 
adopted to acquired behaviors of executables. By static 
method, we collected information of the relationship between 
the invocated dynamically linked libraries (DLLs) in tandem 
with the usage of application programming interfaces (APIs)
of each executable. Besides, with the help of dynamic 
analysis, alterations in registry or any variation in file 
system or network state were also gathered for further 
analyzing. Next, feature selection and feature reduction 
methods were applied to extract the not only valuable but also 
significant behaviors which are finally used to train a 
learning classifier. The characteristic of our technique is 
the generalization ability which can even intercept any new 
malware performs some malicious actions.  
可利用之產業 
及 
可開發之產品 
可與現有之防毒軟體整合，運行於個人電腦、商用電腦、PDA、Smart 
Phone 等各項使用 Windows OS 之系統。 
附件二 
出席國際學術會議心得報告 
                                                             
計畫編號 NSC96-2221-E-158-001-
計畫名稱 具學習功能之防惡意程式系統之研究(3/3)
出國人員姓名 
服務機關及職稱 吳金雄 實踐大學 資訊科技與通訊學系教授兼副教務長 
會議時間地點  2008 年 7 月 8 日至 11 日 澳大利亞雪梨市 
會議名稱 2008 IEEE 8th International Conference on Computer and Information Technology Workshops 
發表論文題目 A Virus Prevention Model Based on Static Analysis and Data Mining Methods 
 
 
一、 參加會議經過 
IEEE International Conference on Computerand Information 
Technology 是由IEEE Computer Society（電腦學會）主辦的國際研討
會，今年第8屆於7月8日至11日由雪梨科技大學合辦，在澳大利亞雪梨
市的雪梨科技大學舉行，為國際間電腦與資訊科技相關領域之重要研討
會，提供學者學術及技術交流聚會。本研究計畫主要是應用資訊理論及
機械學習原理於惡意程式之偵測，能出席此國際學術盛會交換研究心得
以及最新知識，深感榮幸！ 
我於7 月8 日從中正機場搭乘中華航空班機直飛澳大利亞雪梨
市，由於2008年天主教世界青年日也是在雪梨舉辦，當今教宗本篤十六
世親臨主持，約有來自世界各地青年30萬人參加，以致機票及飯店都不
容易預訂，機場安檢及通關也特別嚴格，在行程上有些耽延。會場有很
多來自不同國家的學者與會，但以華人學者居多，而承辦及接待人員幾
乎都是中國大陸旅澳學者及留學生，彷彿是到了香港。晚上的開幕餐
會，為來自世界各地的專家學者洗塵，會中並有當地特色的表演，在餐
會中結識了大會主席Xiangjian He(何)教授及財政主席Wenjing Jia(賈)教
授，他們兩位都是大陸旅澳學者，是雪梨科技大學的教授，何教授曾到
台灣訪問。餐會中也結識了來自台灣大同大學的李良德教授及北台灣科
技大學的張鴻源老師，真是他鄉遇同行倍感親切，會後我們三人也一起
 1
的系統不僅能有效偵測目前現有的電腦病毒，更具備偵測未知電腦病毒
的能力。本論文安排於在7 月11 日下午發表，當場並獲得與會學者許
多寶貴的意見，其中澳洲學者Ganesh Naik及Ashley Chonka對本論文特
別感興趣，相關研討情況如下圖。承蒙大會厚愛，邀請個人擔任主題
Networking and Mobile Computing中兩場sessions之主持人，深感榮耀！ 
 
二、 與會心得 
大會費心安排與組織會議內容，內容既多元又豐富。除研究成果的
分享外，亦有專題演講、口頭報告、餐會、研討會等不同型態的研究分
享及各項社交活動；總發表論文約有270多篇文章，有機會能參與此國
際研討會，與國內外此一領域學有專精之大師同台研討，興奮之情溢於
言表。雖然會場很多華人，令人感到他鄉遇故知，但我真的學習到英文
真的很重要，會場更是一場國際交流的舞台，若英文表達能力不好，如
何與人溝通呢？尤其擔任兩場sessions之主持人，雖然事先已把各個演講
者之簡歷及所其發表論文摘要精讀，但面對眾多國際學者，臨場的英文
表達能力仍需再磨練。 
台灣過去在IEEE有很好的表現，但面臨中國大陸的崛起，台灣的名
稱與地位也受到很大的挑戰。個人覺得中國大陸上的學術研究風氣、能
力與成果，這些年已比臺灣還強。而大陸的留學生也向世界各知名大學
發展，踴躍參與國際研討會，尤其他們的旅外學者相關團結，努力爭取
各種國際會議主辦權，再將下屆移往中國大陸舉行，內外合作已在國際
 3
A Virus Prevention Model Based on Static Analysis and Data Mining Methods 
 
 
Tzu-Yen Wang 
Dept. of Computer Sci., 
 National Chiao Tung Univ.,  
Hsinchu, Taiwan 
tzu-yen.wang@hotmail.com 
Chin-Hsiung Wu* 
Dept. of Info. Tech. & Comm.,  
Shih Chien Univ. Kaohsiung 
Campus, Taiwan 
chwu@mail.kh.usc.edu.tw 
Chu-Cheng Hsieh 
Dept. of Computer Sci.,  
Univ. of California,  
Los Angeles 
chucheng@ucla.edu 
 
 
Abstract 
 
Owing to the lack of prevention ability of traditional 
anti-virus methods, a behavior-based virus prevention 
model for detecting unknown virus is proposed in this 
study. We first defined the behaviors of an executable 
by observing its usage of dynamically linked libraries 
and Application Programming Interfaces. Then, 
information gain and support vector machines were 
applied to filter out the redundant behavior attributes 
and select informative feature for training a virus 
classifier. The performance of our model was evaluated 
by a dataset contains 1,758 benign executables and 846 
viruses. The experiment results are promising, and the 
overall accuracies are 99% and 96.66% for detecting 
the known viruses and the previously unseen viruses 
respectively. 
* 
 
1. Introduction 
According to Symantec® security reports [9, 10], 

*Corresponding author. 
This work was partially supported by the National Science Council 
under the contract no. NSC-96-2221-E-158-001. 
during July 2006 to June 2007, the virus threats have 
been getting serious so far. There were total 8,258 new 
Win32 variants and 136 previously unseen malware 
reported on the second half year of 2006. The number 
of virus without anti-virus signatures increased 22 
percent over the first half of 2006. Furthermore, 
212,101 new malicious code threats appeared in the 
first half year of 2007. It was a 185 percent increase 
over the second half of 2006. The studies in Computer 
virus detection have been worked for many years; 
however, the records above show that they are 
apparently not well enough. 
Traditional signature-based anti-virus software 
catches malware based on “known” signature, but it is 
unrealistic for unknown virus or variants of existed ones. 
Therefore, our aim is to propose a virus prevention 
model (VPM) based on novel data mining methods to 
fix the drawbacks of traditional anti-virus methods. The 
rest of this paper is organized in the following way. 
Section 2 is devoted to some related researches of 
malicious executable detection. Section 3 states the 
main ideas of our VPM with experiment results given in 
Section 4. Finally, a few concluding remarks are 
sketched in Section 5. 
IEEE 8th International Conference on Computer and Information Technology Workshops
978-0-7695-3242-4/08 $25.00 © 2008 IEEE
DOI 10.1109/CIT.2008.Workshops.102
288
extracted from its Portable Executable (PE) file format 
[7] without running the program. PE file format is a 
data structure, which records necessary information for 
the Windows OS loader to manage the wrapped 
executable code. A utility named “Dependency Walker” 
can parse the PE file format and output in tree structure. 
Figure 2 is an example of a tree diagram, which 
illustrates the relationships of the invoking DLLs in an 
executable. In this tree structure, each parent DLL 
invokes some APIs exported from its child DLLs. 
Basing on the tree structure, we defined three types of 
attributes: T1, T2 and T3. T1 indicates the APIs directly 
used by the main program, i.e., the APIs reside in the 
first layer DLLs. T2 is the APIs contained in the first 
layer DLLs indirectly invoked by other DLLs except 
the main executable. T3 consists of the entire 
dependency paths to represent the relationship between 
DLLs. Each of them is a complete downward path, 
starting from a first layer DLL to each of its leaf DLL. 
Moreover, each DLL records a hash value to indicate 
the content of the APIs directly exploited by its parent 
DLL. An example of three different types of attributes 
is given in Figure 2. 
 
3.2. Redundant attribute elimination 
 
When dealing with very high-dimensional data, 
eliminating redundant attributes is necessary to keep the 
informative ones called features. Information 
gain(IG)[12], which computes the discrimination of an 
attribute, is a kind of filter approach of feature 
selection. 
Given a random variable X, if there are k values of 
X, the entropy of X is defined in (1), where pi is the 
proportion of X = vi. 
      	
  
  	
  

    (1) 
High entropy implies X to abide by a uniform 
distribution and lack of discrimination. Furthermore, the 
conditional entropy, which is denoted in (2), implies the 
entropy of X conditioned by the values of Y.  

Figure 2. An example of dependency tree 

Then, information gain (3) is the amount by which the 
entropy of X decreases reflects additional information 
about X provided by Y. 
       	        (2) 
                       (3) 
In our study, there were only two classes in the dataset 
and H(X) is equal to the equation below: (v=virus, 
b=benign) 
  

 

 

            (4) 
, where |.| denotes the number of particular kind of 
executable and |S| = |v| + |b|. In addition, Y is an 
attribute with Boolean value such that Y = 1 indicates 
the subset S1 in which each instance has attribute Y and 
290
selection. Suppose that A is the set of attributes, which 
has been filtered out the redundant attributes by IG. P is 
the performance of RBF-SVM. The procedure of 
feature selection can be performed as follows: 
1. Train an L-SVM by A and obtain the normal 
vector w. Rank all the attributes in A, according to their 
corresponding wk2 value. 
2. Delete one or some of the attributes with lower 
rank from A and denote remaining attribute set as A’. 
3. Use A’ to train a RBF-SVM and get P’. If P’ > P, 
then set P=P’ and A=A’ and go to Step 2. Otherwise, 
stop this procedure and define A’ as the feature set. 
       
4. Experiment results 
 
Our dataset consisted of 846 virus and 1,758 
benign executables and all of them were Windows PE 
formatted and unpacked. We obtained some benign 
programs from the folders of pure Windows XP 
operating system. Besides, we downloaded additional 
ones from the web site PChome® Downloads 
(http://toget.pchome.com.tw/). On the other hand, 
viruses were downloaded from the web site VX 
Heavens (http://vx.netlux.org). The SVM classifier was 
obtained by LIBSVM[3]. 
Since both of the detection rate of virus and the 
false alert rate of benign program are important, we 
evaluated them at the same time by the viewpoint of 
Overall Accuracy (OA) indicates the proportion of 
correctly classified executables. The experiment 
contained two parts: the detection of known viruses and 
the prediction of previously unseen viruses. The 
prediction rate was calculated by five-fold 
cross-validation (CV). In other words, the dataset were 
randomly divided into five disjoint portions with an 
equal number of sizes in each portion, one of them was 
chosen as the testing set, and the remaining four 
portions were merged into a training set. This procedure 
was repeated five times by choosing different partition 
as a testing set. We calculated the average OA as the 
generalization ability of our system.  
After parsing the PE file format of each executable in 
the dataset, we got 93,116 attributes in the beginning. 
The experiment results shown in Table 2. reveal that 
even some of the attributes with lower IG were 
discarded; the performance of RBF-SVM remained 
steady. Therefore, we successfully reduced the number 
of attributes from 93,116 to 1,398 after the process of 
attribute elimination. Continuously, Figure 3 presents 
the results of the feature selection procedure stated in 
Section 3.3. Evidently, we not only succeeded in feature 
reduction but also made further progress in 
classification performance. Finally, the top 429 features 
was chosen to train the RBF-SVM and achieved a 
proper performance with 96.66% in prevention rate and 
99.00% in detection rate (True Positive=98.35%, False 
Positive=0.68%). 
 
5. Conclusion
ʳ
In summary, the following are the main concepts of 
VPM. First, executable behaviors are examined by the 
usage of DLLs and APIs and the DLL dependency 
examination is novel. Moreover, both attribute 
elimination and feature selection were performed by 
using IG and L-SVM respectively for collecting 
informative features. Finally, these features are used to 
train a RBF-SVM that is well performed in the 
evaluations of known and unknown virus detection. 
292
