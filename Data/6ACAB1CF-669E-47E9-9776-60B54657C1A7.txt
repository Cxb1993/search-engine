 2
行探勘。此探勘器首先會將未正常開啟
或結束之連線封包過濾掉，再由剩下的
封包中發掘使用者的行為。本計劃的偵
測系統屬於異常偵測，結合探勘器所探
勘出之使用者正常行為當做其偵測規
則。 
♦ 修改Snort網路型入侵偵測系統使其具
有流量監控之功能：增強網路型入侵偵
測系統Snort的功能，讓Snort藉由分析與
比對TCP、UDP與ICMP協定流量，判斷
是否有DDoS的攻擊行為。 
♦ 修改Linux作業系統以實現一防火牆：
為了避免偵測器將正常封包判定為攻
擊封包，我們採取不完全封鎖合法使用
者傳送的封包，而改以動態調整該主機
之封包流量。 
♦ 規劃參與協同防禦機制成員之間的運
作流程與整合前一年開發的子系統
群：針對使用者、身份認證伺服器、邊
界路由器、User-based行為異常偵測
器、入侵偵測器及防火牆所會面對到的
安全問題做分析及規劃其運作流程。 
♦ 設計多種攻擊場景進行整合測試，並評
估系統整體的安全效能：設計多種模擬
DDoS攻擊場景以評估整個防禦機制的
安全效能。 
三、研究結果與討論 
本計劃多層次協同防禦系統之網路拓
墣如圖一所示，包含下列成員： 
♦ 使用者(User)：所有users在使用網路
前，皆需與身份認證伺服器進行身份驗
證。 
♦ 身份認證伺服器(Authentication，AS): 
AS確認User之身份後，會將目前User
主機使用之IP位址通知User-based行為
探勘器、User-based行為異常偵測器。 
♦ User-based 行 為 探 勘 器 (User-based 
behavior Miner，UBM):針對User使用網
路的習性行為，探勘出屬於各個User
的behavior pattern。 
♦ User-based行為異常偵測器(User-based 
behavior Anomaly Detector，UBAD):收
到AS告知合法使用者所對應之IP位址
後，即針對該IP位址之封包偵測是否有
異常行為。 
♦ 入 侵 偵 測 器 (Intrusion Detector ，
NIDSOUT與NIDSIN):利用攻擊特徵偵測
是否有網路入侵行為，並藉由流量的分
析和比對，判斷是否有攻擊事件。 
♦ 邊界路由器(Edge Router，ER):發生攻
擊時進行流量控管，保證合法使用者的
網路頻寬。 
♦ 防火牆(FireWall，FW):對進入內部網路
的攻擊封包或從內部網路流出的非法
使用者的封包執行過濾動作。 
 
圖一 多層次協同防禦系統之網路拓墣圖 
 4
值：RSCN ∈R Zq*，並將此RSCN利用安全
通道傳送給ASCN。 
 
圖三 匿名漫遊身份驗證機制 
z AS需產生下列資訊給漫遊user:匿名
ID(TIDMS)、漫遊時所用之Public key及
Secret key(PKMS =H1(TID MS || IDHN || 
DateMS)，SKMS = s．PKMS，DateMS為此
public/secret key pair的使用期限)、一
Roaming Share 值 (RSMS ∈RZq*) 、
)(2 MSMScomm rTIDHK ⊕= 。 
)()(
)(
)()(
)(
22
2
22
2
MSCN
CN
MS
CNMS
MS
FNMS TIDHIDH
IDHRS
IDHTIDH
TIDHRSr −⋅+−⋅=
 
z User漫遊至其它協同網路時將與ASCN
進行雙方相互身份認證，user將傳送
{TIDMS, IDHN, DateMS, PKMS, T, RSMS, 
CMS, SigMS}給ASCN。此訊息表示：user
是來自某一協同網路(IDHN)的匿名使
用者 (TIDMS) ，其身份有效期限為
DateMS，其公開金鑰為PKMS，在T的時
間點要求使用網路，以及讓ASCN用來
推導Session key K時所需的漫遊分享
值RSMS及一亂數CMS，並且給予SigMS
證明其身份合法性之憑據。 
z ASCN 收到 user 訊息後，首先計算
)||||(1 MSHNMS DateIDTIDH ，並判斷此計算
結果是否與收到的PKMS相等，若是相
等則確認 },,,{ MSMSHNMS PKDateIDTID
之完整性。接下來ASCN用PKMS驗證
SigMS之正確性與合法性，確認user之合
法性後，再結合自己所擁有之RSCN與
user之RSMS計算出 MSr ，並且利用user
所傳遞之CMS推導出Session Key K，即
MSMSMS CrTIDHK ⊕⊕= )(2 。 之 後
ASCN用K對傳送給user之訊息做對稱
性加密。user收到訊息後，由Kcomm與
CMS推導出K，再利用K解密取得訊息。
若ASCN所計算之K與MS相同，則完成
MS對ASCN之身份驗證。 
 
 AS的運作流程如圖四所示；實作上可
分為兩個模組：AS–Authentication Module
負責驗證User的合法性。一開始，各User
的主機透過DHCP Server或是手動設定一
組IP位址；當User欲存取網路資源時，先
向AS提出存取請求訊息(Access request)；
若 該 User 通 過 身 份 驗 證 後 ；
AS–Authorization Module將授權存取網路
(Access accept)；並與此時，AS傳送該User 
ID與該User的主機使用的IP位址至UBM
與UBAD，以開始學習該User的存取網路
行為及異常行為的監控；當User提出
Logout請求後，AS送出停止學習該User的
存取網路行為及異常行為的監控至UBM
與UBAD。 
 
圖四 AS 運作流程 
3. 使用者網路行為探勘器之設計： 
User-based Behavior Miner(UBM)執
行流程分為四個步驟： (1) 先從乙太
(Ethernet)網路擷取封包(Packet capture)；(2)
利用這些封包萃取出每條合法TCP連線的
特徵，並存入各使用者的合法連線資料庫
中(Feature extracting)；(3)經由FP-Growth
演算法 [13]發掘出所有經常項目集合
(Behavior mining)，並利用找出的經常項目
集合挖掘出關聯規則；(4)將關聯規則依各
使用者、每星期、每小時的方式進行分類，
最後產生出偵測時所需要的行為規則
(Pattern modeling)並將它儲存至Behavior 
rule database中。 
4. 使用者網路行為異常偵測器之設計： 
User-based Behavior Anomaly Detector 
 6
在，則在鏈結串列末端新增該節點。 
(2) 按照具有封包上IP層上的協定型別進
行 分 類 ， 分 別 存 入 countSYN 或
volumesBW欄位。 
 
 
Source IP 
Address  
Hash  
function …
 
Hash Table  
SourceIP
GatewayIP
countSYN
volumesBW
 
 
NULL
NULL
 
SourceIP
GatewayIP
countSYN
volumesBW
 
SourceIP
GatewayIP
countSYN
volumesBW  
圖五 偵測 DDoS 之雜湊表 
(3) 單 位 時 間 內 分 別 將 雜 湊 表 內 的
countSYN欄位進行統計及排序，若累
積的封包個數超過TCP SYN flooding
的門檻值(ThresholdSYN)，則代表有可
能 正 在 進 行 高 分 散 之 TCP SYN 
flooding DDoS攻擊，並利用上述超過
ThresholdSYN的來源IP位址向攻擊來源
端的ER發佈封鎖命令。 
(4) 單 位 時 間 內 分 別 將 雜 湊 表 內 的
volumesBW欄位進行排序，若累積的
封包大小超過Bandwidth攻擊的門檻
值(ThresholdBW)，則代表有可能正在進
行高分散之Bandwidth DDoS攻擊，並
利用上述超過Bandwidth攻擊門檻值
(ThresholdBW)的來源IP位址向攻擊來
源端的ER發佈封鎖命令。 
♦ Edge Router (ER) 負 責 接 收 由
NIDSOUT與UBAD所發佈要求簽章之命令
及接收由NIDSIN所發佈要求流量封鎖之
命令。當接收到NIDSOUT或是UBAD所發
佈要求簽章之命令時，ER會對某特定IP位
址啟動或取消簽章機制；而接收到由
NIDSIN所發佈要求流量封鎖之命令時，ER
會先驗證NIDSIN命令上的簽章訊息。如果
經簽章驗證結果正確後，則ER會將流量調
節之命令送給FW執行。實作上可分為兩個
模組：對可疑的封包執行簽章(ER-IPBPS 
sign module)與可驗證簽章訊息的模組
(ER-IPBPS verify module)；假設所有的
Edge Router都已參加「以IP位址為驗證公
鑰之封包簽章機制，IPBPS」[23]。 
6. 修改Linux作業系統以實現一防火牆 
FireWall(FW)對可疑封包攻擊進行流
量調節(FW-Traffic throttle module)及對攻
擊 封 包 執 行 封 鎖 (FW-Traffic blocking 
module)的動作。 
 
本計畫測試用的網路拓墣如圖一所
示 ， 由 一 台 具 管 理 介 面 的 交 換 器
(Management switch) 、 一 台 認 證 主 機
(AS) 、 一 台 User-based 行 為 探 勘 主 機
(UBM)、一台User-based行為異常偵測主機
(UBAD)、一台攻擊主機(Zombie Host)、兩
台 邊 界 路 由 器 (ER) 、 一 台 防 火 牆
(Firewall)、一台來源端之網路型入侵偵測
器(NIDSOUT)、一台目的端之網路型入侵偵
測器(NIDSIN)、一台目標主機(Victim Host)
和由數台Router組成骨幹網路，以模擬
Internet的環境。 
首先說明探勘各使用者正常樣本的實
驗。關於UBM學習資料集方面，我們側錄
了雲林科技大學計算機網路實驗室所有使
用者的網路封包約5個月(2006/12/04~2007 
/05/2)，針對使用者對HTTP的存取行為進
行分析：側錄的檔案大小共有240GB、全
體成員存取Internet的伺服器連線數量有
2,622,139筆、實驗室成員共19人。 
0
2
4
6
8
10
12
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
Hour
Co
nf
ide
nc
e(%
)
成員A
成員B
成員C
全體
 
圖六 每小時的連線存取量 
圖六的行為規則： {Protocol=TCP, 
Server_port=80, Direction=2}Æ{Hour=*}
的意思為「在時間0點至23點中，使用者向
Internet存取HTTP連線的行為」({Hour=*}
代表0時至23時)。例如：成員A於5點時向
Internet存取HTTP連線的行為約佔5.5%。
由圖四得知，成員A、B、C與全體成員在
24小時內存取HTTP連線比例，成員A的休
眠時間可能在6至10點、成員B的休眠時間
可能在2至9點、成員C的休眠時間可能在1
至12點。 
 8
6. Smurf IP Denial-of-Service Attacks, CERT 
Advisory CA-1998-01, 2000, http://www. 
cert.org/advisories/CA-1998-01.html. 
7. MStream Distributed Denial of Service 
Tool, CERT Incident Note IN-2000-05, 
May 2000, 
http://www.cert.org/incident_notes/IN-2000
-05.html. 
8. TCP SYN Flooding and IP Spoofing 
Attacks, CERT Advisory CA-1996-21, 
http://www. 
cert.org/advisories/CA-1996-21.html. 
9. K.-F. Hwang; C.-C. Chang, “A 
self-encryption mechanism for 
authentication of roaming and 
teleconference services.” IEEE Trans. 
Wireless Communications, Vol. 2, No. 2, pp. 
400-407, Mar. 2003. 
10. J. Zhu, J. Ma, “A new authentication 
scheme with anonymity for wireless 
environments,” IEEE Trans. Consumer 
Electronics, Vol.50, No. 1, pp. 231 – 235, 
Feb 2004. 
11. M. Long, C.-H. Wu, J.D. Irwin, “Localised 
authentication for inter-network roaming 
across wireless LANs,” IEE Proc. 
Communications, Vol.151, No5, Oct. 2004. 
12. W.-B. Lee, C.-K. Yeh, “A New 
Delegation-Based Authentication Protocol 
for Use in Portable Communication 
System”, IEEE Trans. Wireless 
Communication, Vol.4, No.1, pp. 57-64, Jan. 
2005. 
13. Jiawei Han, Jian Pei, Yiwen Yin, Runying 
Mao, “Mining Frequent Patterns without 
Candidate Generation: A Frequent-Pattern 
Tree Approach”, Proc. of the 2000 ACM 
SIGMOD on Management of data. 
14. J.Zheng, M.Z. HU, H.L.Zhang “A New 
Method of Data Preprocessing and 
Anomaly Detection”, Proc. of the Machine 
Learning and Cybernetics, 2007. 
15. R. Agrawal and R. Srikant, “Mining 
sequential patterns: Generalizations and 
performance improvements”, Proc. of 
EDBT, vol.1057, 1996, pp.3–17. 
16. J. Pei, J. Han, B. Mortazavi-Asl, H. Pinto, Q. 
Chen, U.Dayal, and M.-C. Hsu, “PrefixSpan: 
Mining sequential patterns efficiently by 
prefix projected pattern growth”, Proc. of 
ICDE, 2001, pp.215–224. 
17. M. Qin, K. Hwang, “Frequent episode rules 
for Internet anomaly detection”, IEEE Symp. 
on Network Computing and Applications, 
2004, pp.161-168. 
18. Kai Hwang, Min Cai, Ying Chen, and Min 
Qin, "Hybrid Intrusion Detection with 
Weighted Signature Generation over 
AnomalousInternet Episodes", IEEE Trans. 
On Secure Computing, Vol. 4, No. 4, 2007. 
19. D. Boneh and M. Franklin,” Identity-Based 
Encryption from the Weil pairing”, in Proc. 
Crypto 2001, LNCS, pp.213-229. 
20. D. Boneh, M. Franklin, H Shacham, “Short 
signatures from the weil pairing”, in Proc. 
AsiaCrypt 2001, LNCS Vol. 2248, Springer, 
2001, pp.514-532. 
21. HainingWang, Danlu Zhang, and Kang G. 
Shin. “Detecting SYN Flooding attacks.” In 
Proceedings of IEEE Infocom’2002, June 
2002. 
22. Jian Kang, Zhe Zhang, Jiu-bin Ju, “Protect 
E-commerce against DDoS Attacks with 
Improved D-WARD Detection System” , 
IEEE International Conference on 
e-Technology, e-Commerce and e-Service, 
March 2005. 
23. 伍麗樵、詹士賢，2005， “入侵偵測系統
之 IP Tracaback 機制”，2005 Workshop on 
Wireless, Ad Hoc, and Sensor Networks, 
TAIWAN. 
攜回大會議程暨大會論文集 CD 一片。 
 圖 1. 大會公布之論文接受率 
 
 A New 256-bits Block Cipher –Twofish256  
 
 Shun-Lung Su1, Lih-Chyau Wuu2, and  Jhih-Wei Jhang2 
1General Education Center 
2 Department and Institute of Electronic Engineering 
National Yunlin University of Science and Technology 
Douliou, Yunlin 64002, Taiwan 
 
 
Abstract- Twofish, proposed by Bruce Schneier et al., is a 
128-bit block cipher that is constructed with Feistel 
Network. The cipher, one of the final candidate of AES, 
has a variable key length of 128 ,192, and 256 bits. In this 
research, Twofish is expanded to a 256-bit block 
encryption algorithm. Besides maintaining the basic 
framework of Twofish, the number of rounds is reduced 
to 10 and improve the framework of F-function to a 
higher safety level. The new structure enables the 4 
mutually-independent S-boxes in g-function to interact 
one another, and substantially raise complexity for the 
purpose of heightening avalanche effect. After the 
operations of S-box and maximum distance separable 
(MDS) operations, new byte-transformation is activated 
to elevate diffusion effect. The truncated differential 
probability of Twofish256 after 10 rounds is around        
2-81.2758 , whose security is much higher than that of the 
Twofish on 16 rounds computed by S. Moriai. 
 
I. INTRODUCTION 
In the history of symmetrical encryption system, Data 
Encryption Standard (DES) [1] was the most widely used 
symmetrical encryption algorithm. With a key length of only 
56 bits, DES appears quite vulnerable in the face of a brute 
force attack. Therefore in 1997, the National Institute of 
Standards and Technology (NIST) proposed the Advanced 
Encryption Standard (AES) to replace DES. Twofish is one 
of the several projects that satisfy NIST design criterions, and 
was one of the five candidates for AES finals. 
Twofish [2] is a 128-bit block encryption algorithm 
proposed by B.Schneier et al. that accepts a variable-length 
key up to 256 bits. The cipher is a 16-round Feistel network 
which adapted components from the ciphers Khufu [3], 
Square [4], and SAFER [5]. The Feistel network was 
invented by Horst Feistel in his design of Lucifer [6], and 
popularized by DES. The fundamental building block of 
Feistel networks is the F-function: a key-dependent mapping 
of an input string onto an output string.  
The alternative substitution and permutation operations of 
Feistel network is invented from Product Cipher brought up 
by Claude Shannon [7] in 1949. The so-called “Diffusion” 
means that any change of bits in a plaintext will affect many 
bits in ciphertext to enhance complexity between the plaintext 
and the ciphertext. In a block encryption/decryption system, 
diffusion can be achieved by repeatedly implementing a 
specific permutation and then execute a functional operation. 
“Confusion” can be achieved by manipulating the relations 
between ciphertext and subkey to be more complicated, 
leaving no chance of existence of direct linear relationship. 
The Twofish256 proposed in this research is designed on 
the basis of Twofish, and utilize mid-sized S-boxes to build a 
big-sized S-box. This will force all output of  S-boxes change 
in accordance with the change of the input of a single S-box 
to increase complexity. The new byte transformations are 
presented twice after the operations of S-box and MDS to 
diffuse the inputs of MDS and 4-pseudo-Hadamard transform 
(4-PHT) separately. 
 
II. STRUCTURE OF TWOFISH256 
Twofish256 is a 256-bit block cipher that accepts a variable-
length key up to 256 bits. The cipher is a 10-round Feistel 
network with additional input/output whitening.  Figure 1 
shows an overview of encryption. The key schedule generates 
32-bit subkeys Ki(i=0~15) for input/output whitening , 
Ki(i=16~55) for round subkeys and Li(i=0~3) for S-box 
subkeys. Table I illustrates the notations used in this paper. 
 
 
Figure 1. Encryption procedure of Twofish256 . 
 
 
TABLE I. 
NOTATIONS 
Symbol Description 
r
LiX  
the i-th left-half data of X in the round r 
(i=1~4,r=0~10) 
r
RiX  
the i-th right-half data of X in the round r 
(i=1~4,r=0~10) 
M the master key consists of 32 bytes m0,…,m31 
Ki 
the input/output whitening subkey and round 
subkey (i=0~55) 
1-4244-1366-4/07/$25.00 ©2007 IEEE 166
F0 
III. COMPONENTS OF TWOFISH256 
A. F-function 
The F-function is shown in Figure 3. The F-function is 
constructed with the Substitution-Permutation Network 
(SPN). The F-function consists of the nonlinear layer and the 
linear layer. 
 
B. Nonlinear Layer 
The nonlinear layer consists of four S-functions, S0, S1, S2, 
and S3. Each  S-function has two inputs - a 32-bit word X and 
a list L=(L0, L1, L2, L3) of 32-bit words of length 4, and 
produces four bytes of output Y0,Y1,Y2,Y3. Each S-function 
consists of  four differential S-boxes, S-box0, ,S-box1, S-
box2, and S-box3. It is shown in figure 4. The function works 
in 4 stages. In each stage, every one of the four bytes is 
computed with a fixed S-box, and XORed with a byte derived 
from the list L. In particular, S-box0 should XORed in stage 
1 with other S-boxes. In stage 2, S-box1 should XORed with 
S-box0. In stage 3, S-box2 should XORed with S-box0. In 
stage 4, S-box3 should XORed with S-box0. More formally, 
we split the word into bytes. It is as follows: 
 
a 32-bit word X: 
y4,j = X /28j mod 28  , j = 0~3   
 
the S-box subkey list L=(L0,…,L3) of 32-bit words : 
l i,j = Li /28j mod 28 ,i= 0~3, j = 0~3  
 
y3,0 = q1[y4,0] ⊕ l3,0 
y3,1 = q0[y4,1] ⊕ l3,1 
y3,2 = q0[y4,2] ⊕ l3,2 
y3,3 = q1[y4,3] ⊕ l3,3 
 
y2,0 = q1[y3,0 ⊕y3,1⊕y3,2⊕y3,3] ⊕ l2,0 
y2,1 = q1[y3,1] ⊕ l2,1 
y2,2 = q0[y3,2] ⊕ l2,2 
y2,3 = q0[y3,3] ⊕ l2,3 
 
y1,0 = q0[y2,0] ⊕ l1,0 
y1,1 = q1[y2,1⊕y2,0] ⊕ l1,1 
y1,2 = q0[y2,2] ⊕ l1,2 
y1,3 = q1[y2,3] ⊕ l1,3 
 
y0,0 = q0[y1,0] ⊕ l0,0 
y0,1 = q1[y1,1] ⊕ l0,1 
y0,2 = q0[y1,2⊕y1,0] ⊕ l0,2 
y0,3 = q1[y1,3] ⊕ l0,3 
 
 
 
 
Figure 4. S-function 
 
Y0 = q1[y0,0]  
Y1 = q0[y0,1]  
Y2 = q1[y0,2] 
Y3 = q0[y0,3⊕y0,0] 
 
Here, q0 and q1 are fixed permutation on 8-bit values that 
are defined in Twofish [2]. 
 
C. Linear Layer 
The linear layer consists of two byte transformations , four 
fixed 4-by-4 MDS matrix over GF(28), and a 4-PHT. 
 
D. Byte Transformation (BT) 
The design rationale of the byte transformation is similar to 
that of  the shiftrows of the Rijndeal [8]. We design two kind 
of byte transformation BT1 and BT2. It is as follows: 
 
BT1[x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16] 
=[x1,x6,x11,x16,x5,x10,x15,x4,x9,x14,x3,x8,x13,x2,x7,x12] 
 
BT2[x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16] 
=[x1,x6,x11,x16,x2,x7,x12,x13,x3,x8,x9,x14,x4,x5,x10,x15] 
 
E. Maximum Distance Separable (MDS) 
 After the operation of BT1, the sixteen bytes are interpreted 
as a vector of length 4 over GF(28), and multiplied by 4×4 
MDS matrix. Each MDS has four 8 bits of input, and 
produces four 8 bits of output. The MDS matrix in 
Twofish256 has identical coefficients as in the Twofish [2].  
 
F. 4-pseudo-Hadamard transform (4-PHT) 
The design rationale of the 4-PHT is similar to SAFER++ 
[9,10]. It is shown in figure 5. The main difference is that the 
operation unit is 32-bit, not 8-bit. After BT2, the sixteen 8-bit 
input ,x0,…x15, are concatenated into 4 words of 32 bits, 
F0,…, F3   
 
F0 = ( x0 || x1 || x2 || x3 ) 
F1 = ( x4 || x5 || x6 || x7 ) 
F2 = ( x8|| x9 || x10 || x11 ) 
F3 = ( x12 || x13 || x14 || x15 ) 
 
and then perform 4-PHT operation 
 
 T0=(F0+F1+F2 +F3 +K2r+16)mod 232 
               T1=(F0 +2×F1 + F2 +F3 +K2r+17) mod 232 
 T2=(F0 +F1 + 2×F2 +F3 +K2r+18) mod 232 
           T3=(F0 +F1 + F2 +2×F3 +K2r+19) mod 232 
 
Figure 5. 4-PHT 
T3 
T2 
T1 
T0 
F3 
F1 
F2 
168
 
TABLE III 
THE TDP OF S-FUNCTION IN TWOFISH256 
     
 
 
Figure 6. 32-by-32-bits 4-PHT transform to four 8-by-8-bits 4-PHT 
 
 
The truncated differential probabilities for the 4-PHT are 
defined as follows: 
)3(])(4)(4[
1
),(
),(),(
4 ∑
=∆∆
−
∆=∆⊕−⊕−=
yxyx
PHT yxxPHTxPHTc
yxTDP
δδχ
δδ  
where c is the number of ∆x satisfying the condition 
χ(∆x)=δx. 
 
Table IV specifies the weight distribution where the 
Hamming Weight is used to indicate relations between input 
and output of 4-PHT(8-by-8-bits). In the table, it can be 
found that one byte of input is changed will cause the four 
bytes of output to be changed. If more than one byte of input 
is changed, it will definitely cause at least one byte of output 
to be changed. 
 
D.    Upper Bounds on Truncated Differential Probabilities  
In this section, we will calculate the upper bounds of 
truncate differential of twofish256 probability. According to 
S. Moriai’s description [11], although the acquired highest 
truncated differential probability may not be applied to 
practical known attacks. It certainly can be used as a 
reference index of encryption system security. S. Moriai 
found that truncated differential probability of  Twofish  after  
 
TABLE IV 
TRUNCATED DIFFERENTIAL PROBABILITIES OF 4-PHT IN TWOFISH256 
 
TABLE V 
TRUNCATED DIFFERENTIAL PROBABILITIES OF TWOFISH256 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
10 rounds is 2-32.7519 ,  and on 16 rounds is  2-57.2946 . From the 
table V, the truncated differential probability of Twofish256 
in this research is 2-81.2758 on 10-round, about 248 times lower 
than Twofish on 10-round and 223.9 times lower than Twofish 
on 16-round. Therefore, it is more secure than Twofish 
obviously. 
 
VI. OTHER SECURITY ANALYSIS 
A. Dictionary Attacks  
If the block size is 128 bits, the dictionary attack will 
require 2128 different plaintexts to allow the attack to decrypt 
arbitrary message under an unknown key [12]. Twofish256 
has 256-bit block size. Therefore, the dictionary attack will 
require 2256  different plaintexts, which is impossible to be 
attacked successfully in an acceptable period of time.  
 
B. Higher-Order Differential Cryptanalysis  
X. Lai [13] proposed this attack that just work best against 
algorithms with simple algebraic function, only a few rounds, 
and poor short term diffusion. At present, not any higher-
order differential attack reported is successful against more 
than 6 round of the target cipher [2]. Therefore it is not found 
any higher-order differentials can be exploited in the 
cryptanalysis of Twofish256. 
 
C. Auto-correlation test 
It mainly tests a line of auto-correlation [14]. If {an}={a0, 
a1, a2,…} is any binary sequence, the auto-correlation C(τ) is 
defined as 
)4(1)(
1
ττ +
=
∑= n
p
n
naap
C    
 
Here, τ can be thought of as a phase shift of the sequence 
{an}. C(τ) measures the amount of similarity between the 
sequence and its phase shift. This is always highest for τ =0, 
and if {an} is random, C(τ) is quite small for most other 
values of τ. 
The test result of Twofish256 is shown in the figure 7, after 
the second round, the randomness drops sharply from 0.2488 
to 0.004490, and reaches the minimum of 0.004254 in round 
8. Therefore for Twofish256, the randomness will reach the 
maximum after the 10-round operation. 
     Wt(y) 
Wt(x) 
0 1 2 3 4 
0 1 0 0 0 0 
1 0 0 0  2-7.869 2-0.006 
2 0 2-8.994 2-8.988 2-7.421 2-0.014 
3 0 2-25.939 2-8.401 2-6.684 2-0.018 
4 0 2-23.988 2-14.415 2-6.008 2-0.022 
     Wt(y) 
Wt(x) 
0 1 2 3 4 
0 1 0 0 0 0 
1 0 0 0 0 1 
2 0 2-10.016 2-18.500 2-11.012 2-0.002 
3 0 0 2-11.013 2-11.036 2-0.001 
4 0 2-27.024 2-18.631 2-11.310 2-0.001 
Round Differential Probability 
1 
2 
3 
4 
5 
6 
7 
8 
9 
10 
0000 0001 
0001 FFFF 
FFFF FFF7 
FFF7 FFFF 
FFFF FFF7 
FFF7 FFFF 
FFFF FFF7 
FFF7 FFFF 
FFFF FFF7 
FFF7 FFFF 
2-0.0000 
2-0.0978 
2-20.2108 
2-20.3923 
2-40.5052 
2-40.6868 
2-60.7997 
2-60.9813 
2-81.0942 
2-81.2758 
170
