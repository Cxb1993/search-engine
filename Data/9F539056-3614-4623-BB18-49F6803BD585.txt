1壹、中英文摘要
一、中文摘要：
十八世紀末工業革命後，生產環境產生重大的變遷，使得生產系統模式由手工具生產
進入了機器生產，企業及工廠因而能以快速及精準的方式大量製造生產，直至今日消費者
意識抬頭，使得市場變更為買方主導，傳統的需求的穩定性也逐漸消失。消費者不再只是
從企業提供的少許選擇性商品中選購，對於商品的需求趨向於符合個人所需之功能性、美
觀性及潮流性，因而產生客製化商品需求。對於個別產品和服務的需求量也因此而變為不
穩定，「單一而大量」的產品需求漸漸轉變成「多種而少量」的產品需求。快速生產高變異
性的產品，需要在製造流程中增加彈性，且使用較短的生產線及生產流程，以製造不同規
格、高品質的產品。透過科技的應用及管理策略的改變，構建彈性和快速回應系統，產生
多樣化和客製化的產品及服務，於是得以滿足環境需求的「大量客製化」生產模式逐漸形
成。
然而傳統有關生產系統的研究，旨在改善生產製造流程及商品品質，對於預防保養維
修之相關研究鮮少提及。其中有關於預防保養維修之研究，在一般以成本為關鍵性指標之
研究中，大多都未同時考量各管理活動間之關聯性，但在實務上，設備穩定與否，對於產
品之品質與成本等績效均有相對影響，唯有考量生產製造系統之相關管理活動，如預防維
護保養、製程管制及產品檢驗等，方能提升製造資源規劃之預期效益，有鑑於此，本研究
旨在建構零工式生產之預防保養維修策略，採用時間為主軸，在預防維護保養執行時間與
生產時間限制之考量下，求算總成本最小化之預防維護保養決策。並藉由預防維護保養規
劃之總成本模式，且在期望總成本最小化之前提下，分析並透過系統模擬方式，求得此數
學模式之經濟解，及決定出最適之經濟預防維護保養規劃，並進行案例驗證與分析。最後
透過上述研究，發展出一套決策模式提供產業間各企業之應用，以獲取最大企業效益。
關鍵詞：製程管制、產品檢驗、系統模擬、預防維護保養。
3貳、報告內容
一、前言
現今的產業結構由傳統的單一大量連續生產逐漸轉變為多製程之批量式客製化生產型
態為主，因此在生產計畫的運作上面臨到很大的改變，為了達成客戶交貨期的需求及兼顧
品質、良率的考量下，對於生產排程及設備維護排程方式亦需要有所變更。
鍾繼宗[1]提及現階段工廠在排定保養維護之生產排程幾乎使用經驗法則以及定期實施維
護保養作業，而沒有可以提供決策或不影響工廠原訂生產排程下的依循模式，導致大部分
系統的失效反而是不適當的維護作業所造成，因此避免不必要的維護作業不僅可減少維護
費用與停機損失，亦可減少系統因不當維護所造成的失效機率。非週期性的預防維護在實
際的應用上，是相當具有機動性的。然而，欲達成上述的優點需要許多相關配合條件，例
如可準確模擬生產系統的可靠度模式；完整的相關系統實際運轉資料庫；精密的線上監測
系統不斷的回饋最新的資訊以供修正等。有鑑於實施生產製造系統之相關管理活動，如預
防維護保養、製程管制及產品檢驗等，方能提升製造資源規劃之預期效益，且設備穩定與
否，對於產品之品質與成本等績效均有相對影響，然而在一般以成本為關鍵性指標之研究
中，大多都未同時考量各管理活動間之關聯性，因此本研究以零工式生產製造系統為對象，
整體同步探討生產系統中成本、時間、品質等相關生產系統之管理活動，例如製程管制、
產品檢驗和在製品存貨數量，含生產時間限制與執行預防維護保養的時間，對於生產製造
系統所造成之整體影響與相關成本，並藉由預防維護保養規劃之總成本模式。透過上述成
本關係進行探討後，規劃出預防保養維修之排程派工法則與策略並在期望總成本最小化之
前提下，分析並透過系統模擬方式，求得最適之預防維護保養規劃，並進行案例驗證與分
析。
二、文獻探討
歷來有關預防維護保養規劃之問題，已有許多位學者針對不同的情境進行研究。但大
多都未同時考量各生產作業間之關聯性，因此本研究以零工式生產製造系統為對象，探討
生產系統中成本、時間、品質等相關生產系統之管理活動，利用相關文獻所提及之方法與
理論建構一套最適於零工式生產系統之預防維護保養規劃。
1. 製程管制
製程管制之觀念是藉由對生產製造系統進行線上監控，以隨時掌握系統之現況，並於
系統能力發生衰退時，即製程發生變異時，作快速原因診斷即問題排除。預防維護保養規
劃對於生產製造系統而言，是重要研究課題之一，故學者 Mohamed and Rahim [2]結合製程
管制和預防維護保養，分別建構出預防維護保養之成本和管制成本，將此兩種成本加總一
起考量，以期望單位成本最小化為目標之下，建構出適當之預防維護保養間隔時間及次數
和管制圖中之抽樣大小、抽樣間隔時間及管制界限。但在 Mohamed and Rahim [3]的研究中
對於製程管制之監控誤差進行分析時，只考量到製程能力與管制界限這兩者之間的關係，
而未加以考慮監控能力亦有可能會發生誤判之情形。即使用自動化量測系統亦無法確保其
量測出之結果是百分之百準確，故本研究在建構模擬系統時，將歸納上述文獻，同時考量
5如下：
1.1 共同參數
SimTime：系統模擬時間
Lk：第 k 工作站經經產品檢驗後，流至下一站之總產品數，k＝0,…,n，L0 表示生產系統中
一開始投入之數量。
EMQk：站與站之間運送之批量大小，即在 TIk 期間，工作站所生產之批量。
TSk：第 k 工作站運送半成品(EMQk)至下一站所需之時間。
T：整批產品生產之總時間限制。
μk：第 k 工作站之製造能力平均值。
：第 k 工作站之監控能力平均值，亦為檢驗能力平均值。
σPk：第 k 工作站之製造能力標準差。
Ksk：第 k 工作站之產品規格界限。
δk：第 k 工作站之製程偏移。
Xk：第 k 工作站實際之管制內壽命時間。
1/λk：第 k 工作站之製程在管制內的平均時間。
Pk：第 k 工作站之生產率。
Tbk：第 k 工作站之生產每次批量之週期時間。
Tk：第 k 工作站之每次生產週期中實際的生產時間。
hk：第 k 工作站定期抽樣之間隔時間。
Zk：第 k 工作站每次執行預防維護保養的時間。
NMk：第 k 工作站在實際生產時間內，實施預防維護保養之總次數。
Tki：第 k 工作站在生產週期開始至第 i 次的預防維護保養時間，i＝1,…, NMk。
TIk：第 k 工作站在預防維護保養後至下次維護保養之間隔時間。
Ck：第 k 工作站在實際生產時間(Tk)內，製程發生調查與修正的總次數
1.2 製程管制參數
UCLk：第 k 工作站之製程管制上限。
CLk：第 k 工作站之製程管制之中心，亦等於製造能力平均值μk。
LCLk：第 k 工作站之製程管制下限。
αck：第 k 工作站在單位生產週期內，平均收到假訊號的機率。
βck：第 k 工作站於製程發生變異後，量測系統未能在當次抽樣檢查中發現的機率。
τk：第 k 工作站在第 j 次至第 j+1 次的抽樣期間，製程發生變異的平均時間點。
gk：第 k 工作站調查每一個樣本的平均時間。
nk：第 k 工作站定期抽樣之數量。
DTk：第 k 工作站在得知造成變異的結果後，進一步找出發生原因，並修正所花費的時間。
a1k：第 k 工作站之定期抽樣的固定成本。
a2k：第 k 工作站之定期抽樣的變動成本。
a3k：於第 k 工作站發現造成變異原因的成本。
ka3' ：於第 k 工作站著手進行調查因誤判所造成假訊息的成本。
a4k：在第 k 工作站中的製程在管制外狀態所產生之相對成本。
E(TAk)：第 k 工作站之整個製程監控的平均單位週期時間。
E(Lk)：在自動監控下，第 k 工作站製程之期望單位時間成本。
1.3 產品檢驗參數
USLk：第 k 個品質特性之上規格界限。
mk：第 k 個品質特性之規格中心。
LSLk：第 k 個品質特性之下規格界限。
kX
72
( ) k k kk
k
al a n
E L
h
  
  
 
34 / (1 ) 3
(1 )
1
(1 )
k k
k k
h
k k
hk k k k k k k k
k
k k k k
k k
a c ea h c g n DT a
e
h g n DTc


 
 


         
       
(2)
除此之外，相關研究在探討製程管制之監控誤差時，一般將其設定為經驗值或定值，
但實際上會受到製程能力、監控能力及管制界限三者關係之影響。因此，本研究亦將同時
考量製程能力、監控能力及管制界限三者交互影響下之監控誤差，期以推得正確之總製程
管制成本。
由於在預防維護保養間隔之時間內，製程亦有可能會發生變異，且也被察覺出來，進而
進入調查與修正之階段，故須分析製程在實際生產時間內發生調查與修正的總次數：
  
 
  
k k k kk
k k
k k k k k k k k
T NM Z TITI
Int NM Int c
E TA g n DT E TA g n DT
                     
(3)
第 k工作站在實際生產時間內之期望總統計製程管制成本 TSPCk 為：
    k k k k k k k k kTSPC E L T NM Z c g n DT       (4)
2.3 產品檢驗總成本
良品、重修、替換及丟棄機率之分析，進一步分析第 k 工作站在實際生產時間內其良
品、重修、替換及丟棄之期望總成本表示如下：
*每 k 工作站在實際生產時間(Tk)內之期望檢驗成本 TICk 為：
 k k kT IC D C E D  (5)
*每 k 工作站在實際生產時間(Tk)內之期望丟棄成本 TDCk 為：
1k k kT D C IC L   (6)
*每 k 作站在實際生產時間(Tk)內之期望重修成本 TRCk 為：
 k k kT R C R C E D  (7)
*每 k 工作站在實際生產時間內之期望製造成本 TMCk 為：
1k k kT M C M C L   (8)
2.4 存貨成本
第 k 工作站在實際生產時間內之總存貨成本
'
k k
k k k k
k
AI T
THC T Hk AI T H
T
      (9)
系統開始生產前，各站需進行一次系統設置，所花費的成本為設置成本 kK ，而第 k 工
作站在實際生產時間內之期望總設置成本 kTKC ：
k kT K C K (10)
2.5 生產製造系統之總成本
整合上述，本研究將單站所考量之各項成本，累加為期望總成本，再擴大至多站，以
作為關鍵性指標，建構出以預防維護保養為基之生產模擬系統，再進行維護保養策略之分
析與時間性因素考量之分析。第 k 工作站在實際生產時間內之期望總成本為：
k k k k k k k k kTC TIMC TSPC TIC TDC TRC TMC TKC THC        (11)
9Z 預防維護保養執行時間 5 9 12
g 調查每樣本之平均時間 2 5 3
DT 找出變異發生原因與修正之時間 2 1 4
TS 工作站站間搬運時間 3 2 6
nk 定期抽樣之數量 5 7 6
hk 定期抽樣之間隔時間 7 11 8
TI 兩次維護保養間隔 60 50 30
a1 定期抽樣之固定成本 1 2.5 3
a2 定期抽樣之變動成本 0.1 0.3 0.5
a3 發現變異原因之成本 25 30 45
a3’ 調查因誤判造成假訊息之成本 50 60 100
a4 單位時間管制外成本 5 4 6
K 單位設置成本 80 180 300
H 單位存貨成本 2 3 8
IM 單位預防維護保養成本 50 70 150
1. 機齡相依預防維護政策分析
機齡相依預防維護政策(Age-Dependent PM Policy)即為設備在故障時，進行最小之修復
或完全維護，當設備年齡到達一段時間或累積到一定之失效次數，則進行設備之置換。本
案例之參數設定符合年齡相依預防維護政策的環境假設，並固定三站製程之所有參數設定
值，僅變動各站之參數1/λ，變動方式即將各站製程於管制內之平均時間1/λ分成三個水準進
行系統模擬，再以總成本為關鍵指標進行分析探討，下表為各站之1/λ水準值設定與結果，
各站的1/λ值越小，維護保養成本就越大，而對於其他成本沒有明顯的影響，因此，當單位
維護保養成本設較其他單位成本高時，對於總成本的影響相對的也越大。表2為三個工作站
的1/λ分析表。
表2 1/λ分析表
項目 工作站一 工作站二 工作站三
成本 1/λ=5 1/λ=10 1/λ=16 1/λ=4 1/λ=8 1/λ=15 1/λ=3 1/λ=9 1/λ=14
存貨 852 520 612 613 850 526 814 612 633
產品檢驗 612 600 500 657 622 513 550 632 521
製造 918 815 812 955 802 812 990 933 888
維護保養 6900 5217 5102 6617 5132 5123 6612 5400 5110
製程管製 2001 2001 2013 2019 2200 1544 2211 1750 2212
總成本 11283 9153 9039 10861 9606 8518 11177 9327 9364
2. 週期預防維護政策分析
週期預防維護政策(Periodic PM Policy)即在固定間隔時間實施預防維護，若在維護間隔
內發生故障，則進行維修(Repair)。本案例之參數設定符合週期預防維護政策的環境假設，
並固定三站製程之所有參數設定值，僅變動各站之參數 TI，變動方式即將各站之兩次維護
保養間隔 TI 分成三個水準如表 3，進行系統模擬，再以總成本為關鍵指標進行分析探討，
各站的 TI 值越小，維護保養成本、製造相關成本越大，而產品檢驗成本和製程管制成本就
越小，因此可知，維護保養間隔大小，對於各管理活動之相關成本皆有影響。表 3 為各站
之 TI 水準值設定表。
11
表 6 各項維修策略之派工
不同維修
策略之派
工
(1)機齡相依預防維護：維修時間長時適用 TIS 法則；在維修時間短時 AT 法
則較佳。
(2)週期預防維護：不論在何種實驗水準下，最佳派工法則均為 PT/TIS 法則。
維護間隔的長短，會直接影響流程時間，故理論上最小與最大化流程時
間，應為最佳派工法則，但經由統計檢定結果顯示，AT-RPT、PT+WINQ+AT
以及 PT/TIS 三法則於週期預防維護之績效指標表現並無顯著差異。
(3)逐次預防維護：長製程於管制內之平均時間與維護間隔時應使用 PT/TIS
法則，短製程於管制內之平均時間與維護間隔時則應使用 AT-RPT 法則，
AT 法則可使系統最快回復穩態期間。AT、AT-RPT 以及 PT/TIS 法則之穩
態在製品平均數較其它派工法則少，相對於系統回復穩態期間之績效為佳
的表現。
五、結論與未來建議
本研究考量生產作業對生產製造系統所造成的整體影響與相關成本，規劃預防維護保
養之總成本模式，透過系統模擬方式決定最適之預防維護保養規劃，在預防保養維修執行
時間與生產時間限制考量下，求算總成本最小化之預防保養維修決策，最後配合預防保養
維修之置換策略進行生產排程派工法則之決定。本研究為後續研究者之參考提出幾點建
議，期能藉以增進研究方法的周延性及研究結論的適用性，並將其列點如下所示：
(1)本研究不討論不完美維護，而實務上每一次維護並非為每一次維護完系統與機台皆會回
復到完美情形，建議未來可以考量不完美情況下的預防保養維護模式。
(2)本研究之機台保養維修方式，僅討論廠內自行維護，而未討論廠外，維建議未來可以考
量廠外維護。
(3)本研究之預防保養時間、保養時間、維修時間、在製品單位時間存貨成本、機台每次預
防保養維護成本為一定值且已知，然而在實務上並非全然如此，故建議未來研究可將之納
入考量。
(4)本研究僅針對不同預防保養維修策略下，作最適派工法則選定，建議未來研究可以此為
基礎進行實際排程之探討，且在正常生產與預防保養維護期間使用不同的派工法則，提高
生產績效。
六、參考文獻
[1] 鍾繼宗，「連續性生產線設備維修與生產排程問題之研究」，碩士論文，國立屏東科技大
學工業管理系，2004。
[2] Mohamed, B.D. and M.A., Rahiam, “A generalized eecomic model for joint determination 
of production run, inspection schedule and control design,” International Journal of
Production Research, 36, pp. 277-289, 1998.
[3] Mohamed, B.D. and M.A. Rahiam, “Efect of maintenance on the economic design of 
x-control chart,” European Journal of Operational Research, 120, pp.131-143, 2000.
[4] Mohamed, B.D., “The economic productionlot-sizing problem with imperfect production
processes and imperfect maintenance,” International journal of production economics, 76,
pp.257-264 2002.
[5] Ansi, C. and A.K. Daoud, “Analysis of a production/inventory system withrandomly failing 
production unit submitted to regular prevent maintenance,” European Journal of
Operational Research, 156(3), pp.712-718, 2004.
[6] 王治平、鄧紫文、林宜賢、陳春龍，「實際零工式生產排程問題的派工法則」，資訊管理
應用與發展研討會，第 26-26 頁，2004。
2二、與會心得
本研討會之中心議題為管理相關之各項領域，由於領域涵蓋廣泛且研討場次豐富
而緊湊，筆者僅針對與本身相關及有興趣的領域列述討論與反思。此次研討會的議題
涵蓋管理的各個領域及層面，故此筆者將其簡單地劃分為二大方向：（一）為財務、
金融、會計、市場行銷及資訊管理系統等；（二）為作業管理、製造系統、品質議
題、企業再造及電子商務等。其中不論是商業行為或製造等範疇，訊資均為推動與運
行的主要元素，然而筆者將其歸於商業財經之方向中，主要著眼於國際貿易之時效性
與資訊之強烈需求，同時目前正因金融海嘯而產生全球經濟衝擊，各項相關研究與資
訊均為重大的課題。
（一）財經、商管與資訊管理：
在財經、金融、市場等方面雖不是筆者的專業領域，然而綜合部分學者的研討
可看出大體的期盼。在今日國際交流頻繁而複雜，國際間事務的相互影響極為緊密，
亦即各國國際化與自由化的程度必須相對地提高，然而在此國際型態急遽膨漲的同
時，企業策略亦傾向及建議強化國家與企業本身的所謂基本面，也就是強固並健全本
身的能力、品質、效率、環境、人力資源等，並朝向國際聯合與互助的方向努力。至
於資訊化的程度，不論是金融、會計、製造、政府事務、甚至生活資訊化，都必須全
面地持續提昇。在提昇的同時，當然首要的課題要屬所謂的企業倫理、資訊倫理及安
全的考量，在法令制訂、防範與檢查等各項措施未能周全地施行時，資訊與資料的取
用將造成可能的危害與恐慌，這是所有的人所必須注意與詳加考慮的。
（二）作業管理、製造、品質議題、企業再造及電子商務、與管理教育等：
自動化程度漸趨成熟，網路技術更縮短人與人、企業與企業、甚至國與國之距
離，因此企業的再造以使競爭力及效率更為提昇，成為必要而急迫之需求。製造與作
業管理等則朝向全球運籌與系統整合及知識庫的建立和應用。如何整合電腦的使用，
透過ERP系統，自設計、成型、模擬、製造、流程及品質控制、物料配送、甚至市場
行銷與決策，仍是一值得探討的領域。對於不同的製造系統整合的可能性，引起相當
大的迴響與興趣，新的方向是值得研究的。綠色製造與永續議題亦為現今重點發展方
向。管理教育的探討方面，除了管理觀念的建立與教師的教學效果評估及學生的接受
狀況外，有一點值得醒思的是，語言--尤其是國際性語言，英語，的學習重要性，在
此次的研討中，許多學者仍相繼地提到需要進一步的加強。
三、考察參觀活動（無是項活動者省略）
無是項活動
27
Algorithm for constructing a Reconfigurable manufacturing system
Hsiang-Hsi Huang
Department of Industrial Management, National Pingtung University of Science and Technology
No.1, Shuefu Road, Nei-Pu Township, Pingtung 91201, TAIWAN, R.O.C.
Tel: +886-8-7703202 ext. 7665; Fax: +886-8-7740321
E-mail: hhuang@mail.npust.edu.tw
THE XIX ACME INTERNATIONAL CONFERENCE ON PACIFIC RIM MANAGEMENT
Association for the Chinese Management Educators (ACME) 2009 Annual Meeting
San Francisco, CA, USA, July 30-August 1, 2009
Abstract: Although severe economic impacts due to the global financial crisis in recent years, many
believe that organizations and enterprises need to reconsider changes in systems and products
innovation. In this paper, a system procedure for constructing a reconfigurable manufacturing system
is provided. The Petri Nets theory and a system theory approach are being used to design rule-based
discrete-event controllers for the sequencing of jobs in manufacturing systems. The controller is
described in terms of matrix equations that are easy to implement on a personal computer. The
concepts of Petri nets (PN) and the Industrial Engineering (IE) techniques are included and described
into matrix forms. Within the IE techniques, the standard bill of materials (BOM) is used in the first
design step to make a “task sequencing matrix.” Then a resource requirement matrix is constructed to
add non-shared resources and shared resources (e.g. pallets, transport robots and material handling
machines.) Non-shared resources are controlled using inner decision loops. However, shared resources
require outer decision loops for dispatching and routing that resolve conflicts, taking into account the
specified performance measures to be optimized (e.g. percentage of idle time, throughput, etc.) The
rule-based controller design algorithm is a step-by-step procedure with repeatability. The matrix
formulation allows a rigorous analysis of deadlock in terms of circular wait and blocking, and the
numbers of resources available.
Keywords: Petri nets, bill of materials, task sequencing, rule-based controller, manufacturing
dispatching.
29
X 5
X 2
X 8
X 4
X 6
X 3
X 9
X 1
R 1
R 2
M 2 M 1
B3
M 3
B1
A B A B
IBM robot
P U M A robot
Conveyor
bidirectional Conveyorunid irectional
machine
machine
Figure 1: The top view of the sample manufacturing system having 3 machine centers and 2 part types
(tasks and resources) with two robots.
part 1
product 1
R1
Robot 1
product 2
M1
Machine
Center 1
M2
Machine
Center 2
part 2 M3
Machine
Center 3
Robot 2
R2
Figure 2: Reentrant job-shop based on Figure 1.
In the reentrant job-shop, the parts can revisit the same resource pool more than once, and/or the same
resource pools may be used to service several parts of different types. The flow line structure is evident in the
parallel part paths, interconnected by shared resources (e.g., R1, R2) that service jobs for several part types.
Note that along one part path, some resources (e.g., R1, R2) are used more than once, so that this flow line is
reentrant. Each part path in the figure has a set of pallets denoted by P1A, P2A; one pallet is needed to hold
each part entering the cell. We say that certain resources are shared, either by parts of the same type at
different stages of their processing, or across parts of different types. According to Figure 2, this result in parts
of different types and parts at different stages in their processing queue at shared resource pools. Therefore, in
such case, one is facing with a decision at each shared resource involving which part to process next. This
dispatching decision, as the outer loops illustrated in Figure 3, is a crucial one that can cause severe problems in
a manufacturing system if not properly made.
31
equal to 1 if resource j is required for job i. The resources may include machines, robots, fixtures, tools,
transport devices, and so on.
Dispatching Rules
We say a job is activated or fireable if all the preconditions for its performance are met. The problem of
dispatching is that of allocating shared resources in the event that multiple jobs that require the same shared
resource are activated. Dispatching can be viewed as a decision made by a resource on which jobs to accept (or
parts to process). There are numerous dispatching rules [17,18,20] including first in first out (FIFO), earliest due
date (EDD), select the job with the shortest operation time, last buffer first serve (LBFS), and so on. Though
rigorous analyses of the performance of different dispatching rules are sparse, it is known for instance that LBFS
yields bounded buffer lengths and minimizes the mean of the part delay (cycle time). EDD on the other hand
minimizes the variance of the part delay. A small mean delay equates to small work-in-process (WIP), while a
small variance of the delay guarantees that the system will reliably meet due dates. Given a performance measure
specified by the user, one wishes to select the dispatching rule that optimizes this index. Performance measures
might include machine percent idle time, part throughput time, buffer lengths, WIP, percent of jobs late, and so
on.
Matrix-Based Controller Design
A rule-based matrix controller is now discussed that permit assembly/job sequencing, then addition of
resources, and dispatching controller design. The matrix controller will be illustrated using a multiple-part-paths-
reentrant-flow-line design example as indicated in section 2.1. Though the example is simple, the technique
extends directly to more complicated systems using the notions of block matrix (e.g., subsystem) design. The
AMS matrix controller is based on a matrix formulation where each matrix has a well-defined function for job
sequencing, resource assignment, and resource release. In fact, the design algorithm uses task sequencing matrix
(found from the BOM or assembly/operation process trees) and the manufacturing resource requirement matrix.
This matrix-based logical controller has the multi-loop feedback control structure shown in Figure 3, with inner
loops where there are no shared resources, and outer loops containing shared resources where dispatching and/or
routing decisions are needed. It allows for shared-resource conflict resolution to provide guaranteed deadlock
avoidance. Then, as is standard in industrial engineering, dispatching can be performed in accordance with
prescribed performance objectives such as minimum resource idle time, maximum throughputs, task priority
orderings, task due dates, minimum time of task accomplishment, and so on as prescribed by the user. In this
multi-loop control structure, the inner loops can be considered as decision-free PN where no decisions are
needed, and the outer decision-making loops can be considered as PN supervisors in the manner of Krogh and
Holloway[14] and Ramadge and Wonham[22]. The matrix controller is described by the following equations:
Controller State Equation: DDucrcv uFuFrFvFx 
(1)
Job Start Equation: xSv vs 
(2)
Resource Release Equation: xSr rs 
(3)
Product Output Equation: xSy y 
(4)
These are logical equations and therefore are binary; i.e. matrix elements are either 1 or 0. The controller
state equation (1) is a collection of rules so that it is formally a rule base. These equations are carried out in
negative logic. The “overbar” denotes logical negation by applying the negation and de Morgan’s laws. The 
logical negation can be defined as follows: given a natural number vector n, its negation is n such that
0)( in if 0)( in , and 1 otherwise. Hence, “0” entries in cv and cr indicate jobs complete and
33
M 2 P
m ill
u n loa d M 1
g rin d
u n loa d M 2
u n loa d W H 1
M 1 P
(W H 2 )
P I 1 (w a reh ou se 1 , i .e ., W H 1
w ith ra w m a te ria ls s to red )
R 1 U 1
R 2 U 1
R 1 U 2 P O 1
M1
R2
M2
R1
R1
(WH2)
M2P
mill
unload M1
grind
unload M2
unload WH1
M1P
PI 1 (warehouse 1, i.e., WH1
with raw materials stored)
R1U 1
R2U 1
R1U 2 PO 1
(Pallets)
P1
Figure 4: Product information: (a) Assembly tree, (b) Subassembly tree showing resources assigned to
jobs.
Job Sequencing Matrix:
Referring to Figure 4a, define the job vector of part type 1 as  TURPMURPMURv 211 122111 . Same
for the job vector of part type 2, v2 is defined as R U M P R U T2 3 12 3 . Then the job vector of the workcell is
defined as v v vT T
T
 1 2 . The Steward’s sequencing matrix Fv1 for the assembly tree of part 1 in Figure 4a is
given by
.
10000
01000
00100
00010
00001
00000
1
2
1
1
211
1
2
2
1
1
12211
1



















PO
UR
PM
UR
PM
UR
URPMURPMUR
vF
The mean of this matrix is
Prerequisite jobs
Next
job
Fv
(5)
In this matrix, an entry of 1 in position (i, j) indicates that job j must be completed prior to starting job i.
Fv1 is independent of available resources, and reflects the fact that the assembly tree imposes only a partial
ordering on the sequence of jobs. Regardless of the resources available, Fv1 will not change.
Controller State Vector and Job Start Equation:
The job vector v has two interpretations. As a status output of the work-cell, it denotes completed jobs;
in this role it is denoted as vc. On the other hand, as an input to the work-cell, it represents a job start command
vector, denoted as vs. To proceed, it is now necessary to define a controller state vector x, whose components are
associated with the vector v＝[R1U1 M1P R2U1 M2P R1U2 PO1| R2U2 M3P R1U3 PO2]
T
, that checks the
conditions of the rules needed for job sequencing. Then, by applying notion of the block structure, the job start
equation is
35
responsible for loading work in process of part type 1 to machine center M1 for drilling, then robot R2 loads the
drilled part to machine center M2 for milling, and finally unloaded by R1 again as final product 1 output to the
finished product warehouse.
Note that robot R1 represents a shared resource for producing product 1, so that dispatching decision-
making is needed when the two loading and unloading jobs are simultaneously requested, in order to avoid
possible deadlock. There are scores of dispatching rules available and in standard use in manufacturing
engineering [20] (for example, last buffer first serve, earliest due date, least slack time, clear the longest buffer,
etc.). The Petri nets framework goes out of its way to obscure how these dispatching rules should be
incorporated into work-cell controller design. We are showing here how the matrix controller in Figure 3 is
derived in a step-by-step repeatable design algorithm in terms of standard job sequencing and resource matrices,
and then dispatching rules are used in the outer loops to resolve shared-resource conflicts. This provides a
repeatable design algorithm for discrete event controller design and shows how industrial engineering techniques
fit into AMS controller design.
Resource Requirements (RR) Matrix:
The issue of required and available resources is now easily confronted as a separate engineering design
issue from job sequence planning. As resources change or machines fail, the RR matrix is easily modified.
Referring to Figure 4b and Figure 3, it is easy to define the resource vector as r＝[M1A M2A M3A P1A P2A
R1A R2A]
T, where ‘A’ denotes ‘available’. By inspection, write down now the resource requirement matrix Fr
and part input matrix Fu to obtain the complete controller state equation

































































































































c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
AR
AR
AP
AP
AM
AM
AM
UR
PM
UR
UR
PM
UR
PM
UR
x
x
x
x
x
x
x
x
x
x
x
2
1
2
1
3
2
1
00
01
00
10
00
01
00
10
00
01
00000
00000
00100
10000
00000
00000
00010
00000
00001
01000
1
3
2
1
2
2
1
1
100
010
001
000
000
000
000
000
000
000
00000
00000
00000
00000
10000
01000
00100
00010
00001
00000
3
2
2
1
1
10
9
8
7
6
5
4
3
2
1
































































5
4
3
2
1
2
1
00
00
00
10
00
00
00
01
00
00
000
100
000
000
000
010
000
000
000
001
00
00
00
10
00
00
00
00
00
01
D
D
D
D
D
u
u
u
u
u
PI
PI
(8)
.DDucrcv uFuFrFvF 
(9)
Fv is the job-sequencing matrix from equation (5). In the RR matrix Fr, a ‘1’ in entry (i, j) indicates that
resource j is needed to accomplish job i. Here the mean of matrix Fr is
Resources required
Next
job Fr . The subscript c on
the job vector denotes ‘jobs complete’, and on the resource vector r denotes ‘current status of the resources’. 
Both vc and rc are status outputs of the work-cell. Again, Over-bars denote negation, so that, for instance the zero
entries of rc indicate which resources are idle (using negative logic). It is direct to show that using negative
logic makes the conditions for the rules x
i
 into ‘and’ clauses, with zero elements of Fv, Fr becoming ‘don't care’ 
elements. For instance, the conditions for x
4
 become, after some logical manipulation (deMorgan’s rules): x4＝
R2U1c .AND. M2Ac, so that x4 fires when jobs R2U1 has been completed and resource M2 is available.
According to equation (6), this now commands the initiation of the grinding operation that produces the final
product of part type 1.
Conflict Resolution Input:
