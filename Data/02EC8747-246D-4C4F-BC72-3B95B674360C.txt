中文摘要 
關鍵字: 一般化霍福轉換、視覺物件檢索、平行處理、內嵌式系統、即時影像資料庫系統，
負載平衡。 
本計畫提出一結合修改式的一般化霍福轉換(Generalized Hough Transformation, GHT)
及視覺樣本之快速影像物件檢索方法，並據以研發大型影像資料庫的平行處理檢索方法及
硬體製作，提供內嵌式系統即時影像檢索平台。 
快速地從大型多媒體資料庫系統檢索出符合使用者語意的物件不是一件容易的事，許多技
術和理論都還有研究及改進的空間，例如一個影像物件在檢索時，該物件可能在影像中經
過移動、旋轉或縮放大小，如此就增加了檢索的困難度。多媒體資料檢索包含資料偏移(Data 
Skew)及執行偏移(Execution Skew)雙重問題，平行處理架構必須適當，才能克服輸出入系
統太慢或網路太窄，影響資料載入速度的問題；再者，使用一般化的循序執行電腦系統比
對資料，無法善用媒體資料處理本身隱含平行處理的因子，為了解決這個問題，本計畫提
出一平行物件比對的演算法，以利達到大型多媒體資料庫系統檢索即時處理的目標。 
本計畫為一二年期計畫，第一年(執行中)，我們設計一具有可高度平行化且可抵抗物件移
動、旋轉或縮放大小的內容導向影像檢索方法，初步成果已整理並為一國際期刊論文接受，
並在 2006 年之 IEEE 國際影像處理研討會上發表；本年度，我們將著重在應用在大型影像
資料庫檢索的平行處理演算法及分散式架構設計及期待能完成一軟硬體切割適當的內嵌式
即時影像檢索系統，本計畫修改並加速基本的物件比對方法，使之更適合分散式 CBIR 系
統，我們更進而提出一完全分散的負載平衡機制，進一步改善整體檢索效能。實驗結果驗
證本計畫提出的方法的可行性。 
報告內容 
 
ABSTRACT 
 
This paper proposes a parallel solution to retrieve 
images from distributed data sources using perceptual 
grouping of block-based visual patterns. The method of 
grouping visual patterns into image model based on 
generalized Hough transform is one of the most powerful 
techniques for image analysis. However, real-time 
applications of this method have been prohibited due to the 
computational intensity in similarity searching from a large 
centralized image collection. A query object is decomposed 
into non-overlapped blocks, where each of them is 
represented as a visual pattern obtained by detecting the line 
edge from the block using the moment-preserving edge 
detector. A voting scheme based on generalized Hough 
transform is proposed to provide object search method, which 
is invariant to the translation, rotation, scaling of image data. 
In this work, we describe a heterogeneous cluster-oriented 
CBIR implementation. First, the workload to perform an 
object search is analyzed, and then, a new load balancing 
algorithm for the CBIR system is presented. Simulation results 
show that the proposed method gives good performance and 
spans a new way to design a cost-effective CBIR system. 
Index Terms—Hough transforms, object detection, information 
retrieval, distributed computing, load modeling. 
 
1. INTRODUCTION 
 
Content-based image retrieval (CBIR) is extremely 
desirable in many applications with an explosion of the 
amount of multimedia data available to people. Currently, 
most CBIR systems are based on the centralized computing 
servers which respond to extract features from images, index 
images with feature vectors, and retrieve images relevant to a 
query. One of the shortcomings is that a centralized CBIR 
server is computational intensive and difficult to scale up. As 
reported by Smeulders et al. [1], one of promising future 
trends in CBIR includes distributed computing on data 
collection, data processing, and information retrieval. 
Cluster-based distributed computing offers a good cost 
effective solution to extend the centralized system model, 
given its excellent scalability, fault tolerance and flexibility 
attributes [2,3]. However, the nature of clusters is 
heterogeneous and requires load distributions that consider 
each node’s computational features [3]. Although many 
methods on load balancing are proposed in the literature to 
improve the performance of a computer cluster, it is still not 
totally solved, particularly for parallel multimedia systems. 
Much of the research effort for CBIR systems aims at 
seeking effective features to represent images in feature 
vectors for discriminating elements among the global 
database. Both of the low-level features including color, shape, 
or texture-based primitives and high-level semantic concept 
are explored to perform similarity searches [1,4]. From the 
retrieval accuracy point of view, correct features are essential 
to apply pattern recognition techniques in CBIR systems. On 
the other hand, complex features are potential expensive and 
hard to scale up with the ever-increasing sizes of the data 
collections associated to a centralized CBIR system. One of 
the most common approaches followed to reach a cost 
effective and scalable parallel CBIR system has been to 
exploit the parallelism of a similarity search method with 
effective and efficient image representation in order to 
achieve a reasonable user response times. 
Nowadays, two approaches to distributed CBIR systems 
are tested in the related works: a cluster [3] and a peer-to-peer 
network [5,6]. The key to success for a cluster-based CBIR 
system is the design of load balancing operations preventing 
the coexistence of idling and overloaded processors. 
Peer-to-peer (P2P) applications provide a good way to span 
fully decentralized and distributed CBIR services. In a purely 
decentralized CBIR architecture, all peers perform exactly the 
same tasks; however, in a cluster, we might have a master 
node to invoke queries to several slave nodes and collect each 
slave node’s retrieval results. It is possible to further 
implement a peer in a P2P network as a cluster when the 
shared image collection of the peer is large. Thus, each 
approach has its own advantages and does not contradict with 
each other. 
As mentioned above, a dynamic and distributed load 
balancing algorithm indeed affects the performance of a 
distributed CBIR system. Only a few of the load balancing 
operators focus on distributed CBIR systems though load 
balancing for a cluster has been extensively studied. For 
instance, Bosque et al. include a load balance operator based 
on the number of running tasks and the computational power 
of each node in their parallel CBIR system [3]. The problem 
is that the computational power of a node is highly dynamic 
and hard to obtain in the running time. In addition, the 
complexity of an image which implies different 
computational load in image analysis should be considered in 
the design of load balancing for a CBIR system. 
The use of perceptual grouping to extract structure gives 
the system an edge over content-based image retrieval 
systems that retrieve images containing structural objects 
based purely upon low-level features. Different approaches to 
group visual patterns extracted from image blocks, regions, or 
objects have been proposed to offer a semantic-based 
representation for image understanding and analysis 
applications [7]. In our previous work, we suggested using 
generalized Hough transform (GHT) to represent visual 
patterns existing in image blocks [8]. A visual pattern is 
obtained by detecting a line in a square block using the 
moment-preserving edge detector. A voting scheme based on 
generalized Hough transform (GHT) and visual patterns is 
also proposed to provide object search method, which is 
invariant to the translation, rotation, reflection of image data, 
and hence, invariant to orientation and position. 
The method of grouping visual patterns into image model 
based on generalized Hough transform is one of the most 
powerful techniques for image analysis. However, real-time 
applications of this method have been prohibited due to the 
computational intensity in similarity searching from a large 
centralized image collection. In this work, we describe a 
heterogeneous cluster-oriented CBIR implementation. First, 
),,,( **** yxs τ  which relate a query object with a target image 
are actually capable of being determined independently. 
Based on these two observations, in this work, we implement 
a parallel CBIR system using GHT. 
Let N and M be the number of edge blocks obtained from a 
query object and a target image, respectively. Given an edge 
block B =  be part of boundary of a query object Q, 
and the edge block
),,,( 21 lhh θ
Bˆ =  be the corresponding block 
of  in the target image. Blocks B and 
)ˆ,ˆ,ˆ,ˆ( 21 lhh θ
B Bˆ form a match pair 
if 
ξε <−+−= |ˆ||ˆ|)ˆ,( 2211 hhhhBB   (2) 
where ξ is a predefined threshold. The match pair (B, Bˆ ) 
will have a vote on the yxs −−−τ parameter space according 
to their block size ratio, the difference between θ  and , and 
the difference between l and lˆ . During a query session, 
 edge pairs are tested to determine if they are match 
pairs, which are then used to determine the affine parameters 
that align the query object with the target image. The 
discussion about the object search method is out of the scope 
of this paper and the details can be found in [8]. In this work, 
we focus on its parallel implementation. 
θˆ
MN ×
 
3. THe Proposed PARALLEl IMPLEMENTATION 
 
Image browsing and query by example provide us different 
ways to access a large image database. In general, users of a 
CBIR system are required either to follow the summarized 
topics of an image database for browsing the image content or 
to specify queries by keywords, similarity, sketching an object, 
and painting a rough image as the query for retrieval. For a 
distributed CBIR system, it is very time consuming to 
broadcast a query to every local node and collect and rank the 
retrieval results. In this implementation, the master process 
computes the visual patterns of the input image and 
broadcasts them to the n slave processes, each of them is 
supposed to contain an image collection characterized with 
the same topic. The slave processes then proceed to perform 
the object search procedure using GHT mentioned above. 
Once each comparison has been performed, the slave 
processes forward similarity results to the master process for 
ranking and display the k nearest neighbors of the query to the 
user as the retrieval results. The workload for every slave 
process is obviously unbalanced since the size of image 
collection stored in every slave node is different. 
Before the discussion of our load balancing operator, the 
amount of workload to perform an object search is first 
calculated. Performing the object search process, quite a lot of 
block pairs, each of them consisting of an edge block of the 
query image and an edge block of the target image are used to 
determine the optimal affine transformation parameters 
(s,τ,x,y). However, the voting scheme of GHT puts heavy 
burden on the computing units. Actually, the four parameters 
can be determined separately. In this work, we first estimate 
the optimal τ value, and then other parameters. 
h1
h2
(a)
h1(b)
Principal
Axis L
h2
h1(c)
L
: block of target image
: block of query image
h2
(d)
Projection score
… …
B
lo
ck
s
 
Fig. 2. Locate the relevant blocks for a query block in the 
21 hh − space: (a) the blocks within the square are relevant; (b) 
find out the principal axis L of blocks of the target image 
using PCA; (c) project each block onto L and redefine the 
relevant blocks in terms of projection scores; (d) index the 
target image using the projection score histogram. 
    Note that not all the block pairs are qualified to have a 
vote on the parameter space in order to reduce the noise of the 
global voting result. The question is: is it possible to skip the 
non-relevant comparison on block pairs? Given a query block 
Bq, Fig. 2 shows the four steps procedure to look after the 
relevant blocks through applying the principal component 
analysis (PCA) on the 21 hh − space of the target image. For 
each block B in the target image, we project it on the principal 
axis L according to the values of h1 and h2 of B and obtain a 
project score . The target image T is then indexed as a 
projection score histogram H with each element defined as 
Bp
maxmin},{ pipHH i ≤≤=  (3) 
where Hi represents the number of blocks in T with the same 
projection score i, and and are the minimal and 
maximal principal scores of T, respectively. Let pq be the 
minp maxp
 
Fig. 4. Performance comparison for the CBIR system with 
and without load balancing under the situation of uniformly 
distributing the global database among slave processors. 
  It is possible for the distributed CBIR system to be in a 
very load unbalance situation due to the fact we initially 
partition the global image database into several parts which 
are then distributed among the slave processes according to 
the semantic topics. Considering that the user gives a query 
example and attempts to retrieve similar images in terms of 
visual characteristics under a specific semantic topic. In this 
case, only the slave process with the corresponding semantic 
topic is responsible to answer the query and others are idle at 
first. The matching jobs are then gradually distributed among 
the slave processes by performing the proposed load 
balancing operation. However, this would lead to a large 
amount of data communication. Fig. 3 shows the performance 
comparison with and without load balancing under this 
condition by varying the sizes of image collection of the slave 
process from 100 to 1000. The average speedup achieved for 
the cluster with 2, 5, and 10 slave nodes are 2.00, 4.02, and 
5.46, respectively. When the proposed load balancing 
operation is performed, the overhead of message passing 
limits the eventual speedup achieved. 
   In the second test, we assume that the global image 
database is uniformly distributed among the slave nodes and 
all the slaves are responsible to answer a specific query. In 
this case, the communication overhead among slave nodes is 
small as compared with computing time for slave nodes to 
complete their matching jobs. Fig. 4 shows the performance 
comparison for the CBIR system with and without the 
proposed load balancing operation under this condition. The 
reductions in response times rang from 31% with 5 nodes to 
15% with 25 nodes. As the number of nodes increases, the 
differences in response time decreases. Since the size of 
image collection in the case of large number of nodes is small, 
the performance of the system is hard to improve using the 
proposed load balancing algorithm. Actually, Fig. 4 reflects 
the worst case performance of the system. 
 
5. CONCLUSION 
 
In this paper we have presented a parallel implementation 
for an object search method based on the perceptual grouping 
of block-based visual patterns. A matching strategy based on 
the visual-pattern codes also makes the retrieval process 
robust and accurate, and the method using the modified 
generalized Hough transform to find the correct geometry 
transformation parameters in object searches without the main 
disadvantage of high-computational complexity for traditional 
generalized Hough transform. Furthermore, the proposed load 
balancing method reduces the system response time and 
scales up the system with the ever growing amount of image 
collection. 
 
References 
[1] A. W. Smeulders, M. M. Worring, A. Gupta, and R. Jain, 
“Content-Based Image Retrieval at the End of the Early 
Years,” IEEE Trans. Pattern Anal. Machine Intell., vol. 22 
no. 12, pp1349-1380, 2000. 
[2] G. Bell and J. Gray, “What’s Next in High-Performance 
Computing?,” Commun. ACM, vol. 45 no 2, pp91-95, 
2002. 
[3] J. L. Bosque, O. D. Robles, L. Pastor, and A. Rodriquez, 
“Parallel CBIR Implementations with Load Balancing 
Algorithms,” J. Parallel Distributing, vol. 66, 
pp1062-1075, 2006. 
[4] .P. John Eakins, “Towards Intelligent Image Retrieval,” 
Pattern Recognition, vol. 1 no. 35, pp3-14, 2002. 
[5] I. King, C. H. Ng, and K. C. Sia, “Distributed 
Content-based Visual Information Retrieval System on 
Peer-to-Peer Networks,” ACM Trans. Information 
Systems, vol. 22, no. 3, pp477-501, 2004. 
[6] P. Androutsos, D. Androutsos, and A. N. 
Venetsanopoulos, “A Distributed Fault-Tolerant MPEG-7 
Retrieval Scheme on Small World Theory,” IEEE Trans. 
Multimedia, vol. 8, no. 2, pp278-288, 2006. 
計畫成果自評 
  本計畫計畫書撰寫時是規劃為三年期計畫，很可惜只先核定為兩年計畫，茲將計畫
書第二年預計成果與實際成果相互比較，完成查核表如下: 
查核項目 自評達成
率
(0%~100%)
補充說明 
研究內容與原計畫相符程度 95% 計畫書所列的方法實際實驗
與預期有若干落差，必須修正
搜集影像視訊資料:用以建立大
型影像資料庫 
100%  
大型分散式影像資料庫平台建立 90% 設備不足 
平行影像資料檢索演算法設計 100%  
平行的物件檢索演算法細部設計 100%  
分散式的物件檢索演算法實現 100%  
分散式系統前後端應用程式開發 100%  
分散式系統功能測試平台建立 100%  
各個平行演算法效能分析及程式
撰寫 
100%  
硬體設計及模擬 0% 人力不足 
效能測試 100%  
預期完成
項目 
報告及投稿論文撰寫 100% 發表於 IEEE ICIP2007 
研究成果之學術或應用價值  研究成果具學術及應用價值
是否適合在學術期刊發表或申請專利  論文已發表 
主要發現或其他有關價值  區塊為主的 GHT 用於視覺物
件檢索，具有高度平行因子，
可進一步設計平行化架構，用
以改進 GHT 執行速度過慢的
問題。 
 
可利用之產業 
及 
可開發之產品 
可利用之產業:影像處理相關產業 
可開發之產品: 
工業檢測、視訊監控、影像資料檢索系統、數位內容加值… 
技術特點 
區塊為主的 GHT 用於視覺物件檢索，具有高度平行因子，可進一步
設計平行化架構，用以改進 GHT 執行速度過慢的問題。 
推廣及運用的價值 
開發相關產品 
※ 1.每項研發成果請填寫一式二份，一份隨成果報告送繳本會，一份送 貴單位
研發成果推廣單位（如技術移轉中心）。 
※ 2.本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。 
※ 3.本表若不敷使用，請自行影印使用。 
第一天(9 月 16 日)是 Tutorials 課程，分別為 
1.分散式、低成本的視訊編碼技術 ( Distributed video coding for Low Cost Video 
Encoding 
2.矩量與矩量不變技術於影像分析之應用(Moments and Moment Invariants in Image 
Analysis) 
3.應用影像感官量測於影像品質評估 (Perceptual Metrics for Image Quality 
Evaluation) 
4.遊戲理論於多使用者、應用於認知式無線網路之多媒體資源配置 (Game Theoretic 
Approaches for Multi-User Multimedia Resource Allocation in Emerging Cognitive 
Radio Networks) 
5. 可調適視訊編碼及網路(Scalable Video Coding and Networking) 
6.數位影像安全(Digital Image Forensics) 
7. 基於 FPGA 之影像處理技術(Image Processing Using FPGAs) 
8. 電腦影像/視訊的儲存、擷掫及驗證(Image/video storage, retrieval, and 
authentication)。 
第二天(9 月 17 日)一早舉行開幕式並邀請到訊號處理界的大師 Prof. Emmanuel J. 
Candes, California Institute of Technology 進行專題演講，題目是＂Compressive 
Sensing＂，一席的演講勾勒出在結合訊號擷取與壓縮的技術的研究議題及方向，更令
人欽佩大師級的研究功力。隨後則展開一天的研討議程，我個人則參加了幾場感興趣的
議程隨後則展開一天的研討議程，我個人則參加了幾場感興趣的議程。 
第三天(9 月 18 日)一早進行專題演講，題目是＂Survey of Automatic Face 
Recognition，＂這個演講主要在探討人臉辨識的標準化制定現況。 
第四天(9 月 19 日)一早進行專題演講，題目是＂An Overview of Digital Cinema,＂
在這個演講裡,演講者討論數位智慧財產權管理的相關問題。9點 50 分進行個人的論文
口頭報告，本次報告的論文內容是關於如何進行以區塊樣本群組之平行 CBIR 系統實
作，一開始個人先做約 15 分鐘的內容簡介，隨後與與會的人士開始展開提問及回答，
席中也有其他的作者給予他們的想法，收獲良多。隨後則展開一天的研討議程，我個人
則參加了幾場感興趣的議程。該研討會議程於下午五點四十分圓滿結束。 
 
三、考察參觀活動(無是項活動者省略) 
無 
四、建    議 
這個研討會集合的世界各國的研究學者聚集在一起，討論主題是影像處理及多媒體系
統的最新技術發展，今年是第十四屆在美國聖安東尼市舉行，投稿的學者來自全球58 個
國家。影像及多媒體處理技術對於發展新一代的多媒體服務、數位內容開發、影像顯示
A PARALLEL CBIR IMPLEMENTATION USING PERCEPTUAL GROUPING OF BLOCK-
BASED VISUAL PATTERNS
Shyi-Chyi Cheng1, Wei-Kan Huang2, Yu-Jhih Liao2, and Da-Chun Wu2
1Department of Computer Science and Engineering, National Taiwan Ocean University, Taiwan
2Department of Computer and Communication Engineering, National Kaohsiung First University of
Science and Technology, Taiwan
ABSTRACT
This paper proposes a parallel solution to retrieve images from
distributed data sources using perceptual grouping of block-based
visual patterns. The method of grouping visual patterns into image
model based on generalized Hough transform is one of the most
powerful techniques for image analysis. However, real-time
applications of this method have been prohibited due to the
computational intensity in similarity searching from a large
centralized image collection. A query object is decomposed into
non-overlapped blocks, where each of them is represented as a
visual pattern obtained by detecting the line edge from the block
using the moment-preserving edge detector. A voting scheme
based on generalized Hough transform is proposed to provide
object search method, which is invariant to the translation, rotation,
scaling of image data. In this work, we describe a heterogeneous
cluster-oriented CBIR implementation. First, the workload to
perform an object search is analyzed, and then, a new load
balancing algorithm for the CBIR system is presented. Simulation
results show that the proposed method gives good performance and
spans a new way to design a cost-effective CBIR system.
Index Terms²Hough transforms, object detection, information
retrieval, distributed computing, load modeling.
1. INTRODUCTION
Content-based image retrieval (CBIR) is extremely desirable in
many applications with an explosion of the amount of multimedia
data available to people. Currently, most CBIR systems are based
on the centralized computing servers which respond to extract
features from images, index images with feature vectors, and
retrieve images relevant to a query. One of the shortcomings is that
a centralized CBIR server is computational intensive and difficult
to scale up. As reported by Smeulders et al. [1], one of promising
future trends in CBIR includes distributed computing on data
collection, data processing, and information retrieval.
Cluster-based distributed computing offers a good cost effective
solution to extend the centralized system model, given its excellent
scalability, fault tolerance and flexibility attributes [2,3]. However,
the nature of clusters is heterogeneous and requires load
distributions that consider each node¶s computational features [3].
Although many methods on load balancing are proposed in the
literature to improve the performance of a computer cluster, it is
still not totally solved, particularly for parallel multimedia systems.
Much of the research effort for CBIR systems aims at seeking
effective features to represent images in feature vectors for
discriminating elements among the global database. Both of the
low-level features including color, shape, or texture-based
primitives and high-level semantic concept are explored to perform
similarity searches [1,4]. From the retrieval accuracy point of view,
correct features are essential to apply pattern recognition
techniques in CBIR systems. On the other hand, complex features
are potential expensive and hard to scale up with the ever-
increasing sizes of the data collections associated to a centralized
CBIR system. One of the most common approaches followed to
reach a cost effective and scalable parallel CBIR system has been
to exploit the parallelism of a similarity search method with
effective and efficient image representation in order to achieve a
reasonable user response times.
Nowadays, two approaches to distributed CBIR systems are
tested in the related works: a cluster [3] and a peer-to-peer network
[5,6]. The key to success for a cluster-based CBIR system is the
design of load balancing operations preventing the coexistence of
idling and overloaded processors. Peer-to-peer (P2P) applications
provide a good way to span fully decentralized and distributed
CBIR services. In a purely decentralized CBIR architecture, all
peers perform exactly the same tasks; however, in a cluster, we
might have a master node to invoke queries to several slave nodes
and collect each slave node¶s retrieval results. It is possible to
further implement a peer in a P2P network as a cluster when the
shared image collection of the peer is large. Thus, each approach
has its own advantages and does not contradict with each other.
As mentioned above, a dynamic and distributed load balancing
algorithm indeed affects the performance of a distributed CBIR
system. Only a few of the load balancing operators focus on
distributed CBIR systems though load balancing for a cluster has
been extensively studied. For instance, Bosque et al. include a load
balance operator based on the number of running tasks and the
computational power of each node in their parallel CBIR system
[3]. The problem is that the computational power of a node is
highly dynamic and hard to obtain in the running time. In addition,
the complexity of an image which implies different computational
load in image analysis should be considered in the design of load
balancing for a CBIR system.
The use of perceptual grouping to extract structure gives the
system an edge over content-based image retrieval systems that
retrieve images containing structural objects based purely upon
low-level features. Different approaches to group visual patterns
extracted from image blocks, regions, or objects have been
proposed to offer a semantic-based representation for image
understanding and analysis applications [7]. In our previous work,
we suggested using generalized Hough transform (GHT) to
represent visual patterns existing in image blocks [8]. A visual
V - 1611-4244-1437-7/07/$20.00 ©2007 IEEE ICIP 2007
Image browsing and query by example provide us different ways
to access a large image database. In general, users of a CBIR
system are required either to follow the summarized topics of an
image database for browsing the image content or to specify
queries by keywords, similarity, sketching an object, and painting a
rough image as the query for retrieval. For a distributed CBIR
system, it is very time consuming to broadcast a query to every
local node and collect and rank the retrieval results. In this
implementation, the master process computes the visual patterns of
the input image and broadcasts them to the n slave processes, each
of them is supposed to contain an image collection characterized
with the same topic. The slave processes then proceed to perform
the object search procedure using GHT mentioned above. Once
each comparison has been performed, the slave processes forward
similarity results to the master process for ranking and display the
k nearest neighbors of the query to the user as the retrieval results.
The workload for every slave process is obviously unbalanced
since the size of image collection stored in every slave node is
different.
Before the discussion of our load balancing operator, the amount
of workload to perform an object search is first calculated.
Performing the object search process, quite a lot of block pairs,
each of them consisting of an edge block of the query image and an
edge block of the target image are used to determine the optimal
affine transformation parameters (s,W,x,y). However, the voting
scheme of GHT puts heavy burden on the computing units.
Actually, the four parameters can be determined separately. In this
work, we first estimate the optimal W value, and then other
parameters.
h1
h2
(a)
h1(b)
Principal
Axis L
h2
h1(c)
L
: block of target image
: block of query image
h2
(d)
Projection score
« «
B
lo
ck
s
Fig. 2. Locate the relevant blocks for a query block in the
21 hh  space: (a) the blocks within the square are relevant; (b) find
out the principal axis L of blocks of the target image using PCA; (c)
project each block onto L and redefine the relevant blocks in terms
of projection scores; (d) index the target image using the projection
score histogram.
Note that not all the block pairs are qualified to have a vote on
the parameter space in order to reduce the noise of the global
voting result. The question is: is it possible to skip the non-relevant
comparison on block pairs? Given a query block Bq, Fig. 2 shows
the four steps procedure to look after the relevant blocks through
applying the principal component analysis (PCA) on the
21 hh  space of the target image. For each block B in the target
image, we project it on the principal axis L according to the values
of h1 and h2 of B and obtain a project score Bp . The target image T
is then indexed as a projection score histogram H with each
element defined as
maxmin},{ pipHH i dd (3)
where Hi represents the number of blocks in T with the same
projection score i, and
minp and maxp are the minimal and maximal
principal scores of T, respectively. Let pq be the projection score of
a query block q. We re-formulate the condition to define that a
target image block B with the projection score pB is relevant with
respective to q if
Od || Bq pp (4)
where O is a pre-defined threshold. Based on (4), it is simple to
prove that the workload for the slave node S to determine the affine
parameters for matching the query Q with the target image T is
¦¦

 
),(
)(
),(
)(
maxmin OO iij
T
j
ppi
Q
iS HHWL
(5)
where )(QH and )(TH are the projection score histograms of Q and T
based on the principal axis L of T, respectively.
Based on the projection score histograms, we design a distributed
load balancing operation using the proposed workload tracking
technique. To avoid a large amount of data move and message
passing, a fully distributed load balancing operator is essential for a
CBIR system with a large image collection. As mentioned above,
we distribute the global image collection among the slave processes
where each of them contains images with the same semantic topic.
However, this results in the possibility of load unbalancing.
There are three steps in the proposed load balancing scheme. First,
all the images are clustered into several classes using the well-
known c-mean clustering algorithm according to their projection
score histograms. Second, for each pair of slave processes S1 and S2,
compute its similarity measurement as
|)()(|
|)()(|
),(
21
21
21 SCSC
SCSC
SSSim 
 (6)
where )()( 21 SCSC  and )()( 21 SCSC  represents the number of
images within S1 andS2 that are clustered into the same classes in
terms of projection score histograms and the total number of images
within S1 and S2, respectively. Finally, for each slave process, we
maintain a list of neighboring slave processes in the descending
order in terms of the similarity measurement. During a query
answering session, once a slave process Si has completed all its
assignments, it requests a database image for comparison from the
slave process Sjwho resides in the head of the neighboring list. Sj
might decide not to migrate one of its assignments to Sj if the data
move cannot reduce the overall response time. In this case, Si will
modify its neighboring list by removing Sj from the head of the list
and adding it again into the tail of the list. On the contrary, Sj might
decide to admit the request of Si by choosing an image whose
workload is similar to the estimated workload of Si if the following
condition is satisfied:
ij TT ! ,
ij
LB
i
LBi
i B
W
WL
WTRTTT | , j
j
a
jj
j TWL
WW
T
)(| (7)
where
iT ( jT ) is the average running time to complete an
assignment for Si (Sj ), RTT is the response time for the requesting
process, Bij is the communication bandwidth between Si and Sj,
iWL ( jWL ) is the average workload of Si (Sj ), and WLB is the actual
workload for the moved image, )(a
jW is total amount of workload
that has been completed for Sj. The underlying idea of the proposed
load balancing scheme is that the jitter in computational loading for
a fast slave process should be minimized in order to meet its
computational power. Thus, the proposed load balancing scheme is
V - 163
