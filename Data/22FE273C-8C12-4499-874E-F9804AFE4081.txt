1 
行政院國家科學委員會專題研究計畫成果報告 
引用設計模式之物件導向程式的最佳化 
Optimization of Object-Oriented Program Using Design Pattern  
計畫編號：NSC 97－2221－E－002－130 
執行期限：97 年 8 月 1 日至 98 年 7 月 31 日 
主持人：陳俊良  國立台灣大學資訊工程學系 
中文摘要 
物件導向已經被證明是開發大型軟體的有效方法。軟體開發者使用物件導向的方式構
思軟體的結構，使用物件導向語言撰寫軟體系統。所以，如何撰寫好的物件導向程式變成
是一個重要的課題。 
要寫好程式，學習別人的好經驗是一個有效的途徑。所謂的物件導向設計模式談的就
是好的物件導向程式寫法。軟體內部的組織結構，都是由許多元件堆砌而成。大量的軟體
元件，它們之間的互動與關聯使得程式的結構變得十分複雜。設計模式的哲學，就是將軟
體元件之間的從屬、互動、與組合的方式，歸納為各種設計模式。程式設計師只要依循已
經定義好的設計模式組合軟體元件，就能設計出條理分明、易於維護的軟體。 
不過易於維護的軟體結構有時是靠犧牲執行的效率換來的。本計畫建立了一套整合的
軟體開發機制，配合編譯器最佳化工具，協助軟體專案同時兼顧優良的軟體架構與執行效
率。 
關鍵詞：編譯器、最佳化、物件導向、設計模式、整合開發環境 
Abstract 
It has been proven that object-oriented approach is an efficient way to develop large-scale 
software system.  The developers think the software structure in the object-oriented way, and 
use object-oriented language to write their programs.  Therefore, how to write good 
object-oriented programs becomes a very important issue. 
In order to enhance one’s programming ability; it is an effective way to learn other 
programmer’s good experiences.  The so-called object-oriented design pattern talks about how 
to write good object-oriented programs.  Following the well-defined design patterns, it is 
possible to construct a maintainable software system.  However, good maintainability is not 
equal to fast execution speed. 
In this project, we built up an integrated development environment.  Combining compiler 
optimization techniques, we hope our tool can make a software project be easy to maintain and 
have faster execution speed at the same time. 
keywords: compile, optimization, object-oriented, design pattern, integrated development 
environment. 
計畫目的 
早先的程式語言、開發方法等等大概都是程序導向 (procedural-oriented) 的。後期才有
3 
各階段說明如下： 
開發階段：使用者利用 Netbeans 既有功能選取特定的設計模式插入專案中。我們添加
了 NetBeans 的功能，讓設計模式的資訊得以保留到專案的 Java 原始程式碼。經過編譯器後，
設計模式的資訊也移並保留到 *.class 檔案中。 
轉換階段：當軟體系統要上線前，先利用我們的工具做二元轉換 (binary transforma 
-tion)，讀入 *.class 檔，擷取裡頭的設計模式資訊，以便把引用設計模式的物件導向程式轉
成執行速度較佳的版本。 
執行階段：轉出來的 *.class 檔案格式將完全遵循原本的規範，所以可以送入標準的
Java 虛擬機器。因為轉換過了，我們可以得到較快的執行速度。設計模式的缺點被我們挽
回了。 
維護階段：萬一有維護需求時，我們將更改保留設計模式原味的原始碼。設計模式的
優點被我們保留下來了。 
設計模式資訊儲存 
我們的系統有兩點必須特別說明，首先是設計模式資訊的儲存。設計模式是一個高階
的程式設計概念，要靠編譯器從程式中分析出設計模式的概念是複雜且困難的工作。所以
我們必須提供工具讓軟體在系統分析設計階段就把設計模式資訊保留下來。 
NetBeans 的內部 UML 資料是用 XML 的格式記錄的。當使用者在專案中嵌入了一個設
計模式時，NetBeans 會呈現出類別圖 (class diagram) 的範本。圖中的類別 (class) 跟函式 
(method) 各有預設的名稱。類別名稱就是該類別在該設計模式中的角色，函式名稱就是該
函式在該設計模式中的用途。但是一般而言使用者會更改這些名稱以適應特定的專案用
途，如此一來設計模式的資訊就遺失了。 
我們的解決方法是，訂定了特別的 XML 的欄位，以記錄設計模式的資訊。當使用者
利用 NetBeans 既有功能表達欲使用某一設計模式時，我們修改的部分會在對應的 XML 檔
中產生添加的欄位，以記錄下類別與函式的角色。 
當 NetBeans 專案進入編碼階段時，NetBeans 會把 UML 轉成對應的 Java 程式碼。我們
更改的部分會從 XML 中找出類別的角色，把其用 Java annotation [6][7] 的方式記錄到 Java
程式碼中。如此就可以適當的記錄下設計模式的資訊。 
設計模式特殊化 
其次我們要說明如何把含有設計模式資訊的程式最佳化。我們的方法是因應各設計模
式的特性對程式做特殊化  (specialization) 處理。比如設計模式中的雙重分派  (double 
dispatch) 會造成效能減損，反虛擬 (de-virtualization) 就是一個可行的對策 [8][9]。 
參考文獻 
[1] E. Gamma, R. Helm, R. Johnson, and J. Vlissides, Design Patterns: Elements of Reusable 
Object-Oriented Software, Addison-Wesley, 1995. 
[2] IBM, Rational Rose Home Page, http://www-306.ibm.com/software/rational 
[3] S. Ambler, The Object Primer: Agile Model Driven Development with UML 2, Cambridge 
University Press, 2004.  
