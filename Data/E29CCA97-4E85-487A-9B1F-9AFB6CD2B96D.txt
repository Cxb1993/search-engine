 2
and requirment of automatic processing. 
the pushing is used to attach the streaming 
ability to the traditional remote object, and 
the bandwidth requirement of client will 
be met by several streaming servers by the 
aggregation mechanism. Last, the 
forwarding mechanism is used to improve 
the whole streaming system bandwidth by 
transfering the streaming resource of 
clients. 
 
In this project, we will develop the 
scheduling policy and data streaming 
mechanisms in the remote object 
enviroment. All the research results will 
make a improvement in the component 
management system and run-time 
optimization.   
 
 
Keywords: Grid computing,Java RMI, 
CMS, Streaming 
 
 
二、緣由與目的 
 
  
由於網路頻寬品質大幅進步，遠超
越電腦效能提升的進展，使得分散式計
算環境成為熱門的研究發展主流。人們
對於運算資源的需求日增，同時間還有
許多閒置的電腦存在於網際網路上，等
著 被 開 發 利 用 ， 而 格 網 運 算 (Grid 
computing)則是將這些被閒置的運算能
力集結起來，提供大量的運算能力。格
網運算的概念即是以計算力比擬為電
力，超級電腦比擬為發電廠，網路即為
傳輸計算力的線路，而 Grid 一詞即借用
傳輸電力使用的電力線 (Power Grid)，
我們期望它使用起來就像使用電器一
樣，只要將插頭插上插座，即有源源不
絕的電力送來，如同使用電力一般方便
取來運算能力。 
 
    本項計畫的主要目的就是利用遠端
元件呼叫來建構格網運算環境並規劃制
定出一套軟體元件間可共同遵守的規
範，使得程式能夠依循本身的需求，不
僅僅是在編譯時期能善用高品質的元
件，同時在執行時期，也能夠動態地在
廣大的網際網路間，尋找出特定時間的
最適元件來使用，以期增進程式執行效
能，我們已有一些初步規範，但要讓程
式間能夠快速而簡單地動態重覆使用分
散式元件，還需要更完整且詳細的規則
來輔助，此點正是我們急欲開發的目標。 
 
在本計畫中先初步針對格網運算中
熱門的應用提出相關的機制探討。對於
伺服器的建構我們提出負載平衡的解決
方法，可利用網路處理器來解決高流量
的處理問題，並且可以針對不同的遠端
元件呼叫狀態來提出解決的方法。此外
除了傳統的伺服器環境，隨著網路串流
資訊的應用越來越廣，我們也整合了網
路串流資訊在遠端元件呼叫的處理方
式，利用我們所提出的機制以求達到整
體頻寬的最大使用效率，上述兩項技術
可配合我們所研發的動態執行時期元件
置換與組裝來使程式達到軟體元件最佳
化，屆時使用者將無需察覺身處網路環
境的變化，而由軟體來作控制，有效地
利用周遭環境資源來達到最大效益。 
 
 
三、結果與討論 
   
在此計畫中我們主要研究成果如下所
述: 
1. 支援 stateful 遠端元件交換技術與網
路處理器的實作 
 
利用 Java RMI 或是.Net Remoting 等
物件導向式語言所建構的出來的叢聚伺
服器環境，當處理遠端元件呼叫時，將會
存在狀態連續性的問題，如呼叫必須參考
前次的呼叫內容所留存下來的狀態的
話，如將其排成到其他的伺服器將會造成
服務上的錯誤。 
我們提出一個解決的機制，並且提出
了續態與乏態呼叫的負載平衡演算法，利
用下列公式來評估各伺服器的所負載的
工作量，並且保持續態呼叫的正確性。 
在此我們設計了一個兩階段式的演算
法來解決整體負載平衡的問題。在此演算
法內，我們在第一階段優先處裡了續態呼
 4
圖三 
 
 Aggregation 機制則提供了使用多個來源
來滿足串流的可能性，利用來自不同來源
的資料片段來填滿串流播放的需求。在這
樣的目的下，我們設計了兩個不同的暫存
區來達到該目的，分述如下： 
z Streaming Buffer：在我們的架構裡
面，Streaming Buffer 只存在客戶端，
Streaming Buffer 負責儲存客戶端所
需的資料。一個 RMI 串流客戶端可能
會 從 多 個 伺 服 器 端 接 收 資 料 ，
Streaming Controller 知道如何接收這
些資料並且經過處理把完整的資料存
到 Streaming Buffer。 
z Continuous Buffer：Continuous Buffer
是成對在客戶端和伺服器端出現，
Continuous Buffer 在伺服器端不斷的
送出資料到相對應的 Continuous 
Buffer，在客戶端的 Continuous Buffer
是不斷的接收所傳過的資料。 
並將其機制實作於 Java RMI 內，下圖為其
架構圖。 
 
圖六 
其它元件負責不同的功能如下： 
z Stub：Stub 由 Java 自動的產生，為了
對 Stub 作修改，利用反組譯由 rmic 所
產生的類別檔(class file)來取得相關的
資訊，並在裡面加上許多功能，使其
能和多個伺服器端同時做串流的連
線，並且和 Streaming Controller 溝通。 
z Streaming Controller：和 Stub 作溝
通，接收來自 Stub 傳過來資料，經過
分析來決定把這次的呼叫由一對ㄧ變
成一對多來提高效能，或則直接從本
地端的 buffer 擷取已經存在的資料。
Streaming Controller 也負責協調每個
伺服器要如何傳遞資料到客戶端，並
且匯集 Continuous Buffer 裡的資料，
經過適當的處理和把完整的資料存到
Streaming Buffer。 
z Loader：在標準 Java RMI 架構裡，伺
服器是被動的回應客戶端的要求，為
了提高效能，串流的 RMI 伺服器端必
需主動把資料送往客戶端，為了達成
這個目標，我們添加 Loader 元件，它
會 週 期 性 地 把 串 流 資 料 載 入 到
Continuous Buffer 裡 ， 然 後 利 用
Continuous Buffer 把資料送到客戶端。 
 
 而 最 後 我 們 也 提 供 了 一 個 稱 為
forwarding 的機制架構。其基本概念則是使
用訂閱相同串流的上流客戶端為伺服器，
藉此來增加整體串流的供給頻寬。其概念
如下圖所示： 
S
R1R2
R3  
圖七 
  其中 R1、R2、R3 都需求相同的資料
串流，如果當 R1 的上載頻寬可以支持 R2
和 R3 的需求，如此我們則將 R1 的資料傳
給 R2 和 R3，藉此我們可以節省總伺服器
的效能與頻寬，以服務更多的客戶端。 
 
我們針對上列的機制以及因應不同的
串流傳輸需求設計一演算法，利用下列的
公式來計算各伺服器的權重(weight)，可以
使用三個不同的參數（α、β和γ係數）
來調整出最適合目前網路環境的傳輸公
 6
四、計畫成果自評 
   
   我們主要的成果論文發表於以下國際
學術研討會 JoS[1]，將發表於國際期刊
SoCP[2]與國內研討會 CTHPC[3]。 
在這一年的研究中，我們針對在分散
式及平行元件環境的應用上提出相關的機
制，對於叢聚伺服器的續態、乏態問題，
我們提出了相關的演算法與排程機制，而
對於串流資訊的應用上，我們也提出了一
個整合性的軟體架構，利用遠端元件的特
性來作自動的處理，以其達到更好的效能
增進，並且針對不同的串流環境設定來做
效能上的調教，以期該機制可以應用於不
同的串流環境。 
相信目前的成果與經驗對於日後的格
網環境的應用與軟體最佳化系統的研究將
可提供不少的助益。 
 
 
五、參考文獻 
[1]  C. K. Chen, Y. H. Chang, Y. T. Chen, C. 
C. Yang, and  Jenq Kuen Lee, 
Switching Supports for Stateful Object 
Remoting on Network Processors, 
Volume 40, Number 3, pp. 281-298, 
Journal of Supercomputing, 2007. 
[2]  C. C. Yang, Chung-Kai Chen, Yu-Hao 
Chang,  Jenq Kuen Lee,  Software 
Architecture Design for Streaming Java 
RMI, accepted, Science of Computer 
Programming, Elsevier (Speical Issue on 
Java Languages). 
[3]  C. C. Yang, Chung-Kai Chen, Yu-Hao 
Chang,  Jenq Kuen Lee,  Software 
Architecture Mechanism Design for Java 
RMI, the 13th Workshop on Compiler 
Techniques for High-Performance 
Computing 2007(CTHPC 2007). 
[4]  Chih-Chieh Yang, “Streaming Supports 
for Component Remoting in Overlay 
Networks” Master Dissertation, 
Department of Computer Science, 
National Tsing-Hua Univ., Jun.2006. 
[5]  Chung-Kai Chen. The Component 
Annotation Ontology, 
http://pllab.cs.nthu.edu.tw/cao.daml. 
[6]  Cheng-Wei Chen, The Paradigms of 
Component Adaptations on Distributed 
Computing Environment, Ph.D. 
Dissertation, Department of Computer 
Science, National Tsing-Hua Univ., 
Oct.2002. 
[7]  UC Berkeley Millennium. Virtual 
interface Architecture. 
http://www.cs.berkeley.edu/philipb/via/. 
[8]  Cheng-Wei Chen, Chung-Kai Chen, 
Jyh-Cheng Chen, Chien-Tan Ko, 
Jenq-Kuen Lee, Hong-Wei Lin, 
Wang-Jer Wu, Efficient Support of Java 
RMI over Heterogeneous Wireless 
Networks , International Conference on 
Communications (ICC), Paris, June 
2004. 
[9]  Yu-Tin Chen, Wang-Jer Wu, Chung-Kai 
Chen, Jenq-Kuen Lee, "Building Java 
RMI for Meta-Cluster Servers with 
Network Processor", 10th Workshop on 
Compiler Techniques for 
High-Performance Computing (CTHPC 
2004). March 18-19, 2004. 
[10]  Chung-Kai Chen, Cheng-Wei Chen, 
Jenq Kuen Lee, Specification and Archi- 
tecture Supports for Component 
Adaptations on Distributed Environ- 
ments, ,IPDPS 2004, Santa Fe, USA, 
April 2004. 
[11]  S. Mukherjee, Design and Evolution of 
Network Interface for System Area 
Networks, Ph.D. Thesis, University of 
Wisconsin, 1998. 
[12]  Yu-Tin Chen “Build a load balancer 
for .Net remoting cluster servers with 
Intel IXP 1200” Master Dissertation, 
Department of Computer Science, 
National Tsing-Hua Univ., Jun.2004. 
[13]  R. Raje, J. Williams, and M. Boyles. An 
asynchronous remote method invocation 
mechanism for Java, Concurrency : 
Practice and Experience, Vol. 9(11), 
1207-1211, 1997. 
[14]  C. W. Chen, C. K. Chen, and J. K. Lee. 
Building Ontology for Composition and 
Optimization of Parallel JavaBean 
Programs. In Proceedings of IEEE 
I-SPAN, May 2002. 
[15]  Jenq Kuen Lee and Dennis Gannon. 
Object-Oriented Parallel Programming: 
Experiments and Results. In Proceedings 
of Supercomputing’91, New Mexico, 
November 1991. 
[16]  C.-W. Chen, C. K. Chen, J. C. Chen, C. 
