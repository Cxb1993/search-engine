segments with lengths at least L.
Here we explain briefly Huang’s idea for computing the maximum sum consecutive subsequence
of length at least L. Let A = 〈a1, a2, . . . , an〉 be a DNA sequence of length n. Use w(X) to denote
the score of nucleotide X, i.e. w(G)=w(C)=1 − p, and w(A)=w(T )=−p. Define S(i) to be the
maximum score of regions ending at position i of A, which include the empty region. The scores
S(i) can be computed by the following recurrence:
S(i) =
 max{S(i− 1) + w(ai), 0} if i > 0,0 if i = 0.
Now let us shift along the sequence with a window of size L. For each fixed window, we can compute
its score, and then the maximum score of regions ending at the front of the window with the help
of the vector S. This results in a linear-time method for computing the maximum sum consecutive
subsequence of length at least L.
As noted by Huang, the lengths of the regions reported by the algorithm are usually much
greater than the cutoff L. An immediate implication is that they might contain some very poor and
irrelevant regions. It is therefore natural to consider bounding the target regions with additional
upper bound. Lin, Jiang and Chao (2002), and Fan et al. (2003) gave an algorithm that can be
combined with Huang’s algorithm to yield a linear-time algorithm for computing the maximum sum
consecutive subsequence of length between lower bound L and upper bound U .
Huang (1994) also proposed an interesting alternative measure for finding GC-rich regions.
Namely, given a DNA sequence, one would now attempt to find segments of length at least L
with the highest C+G ratio. Specifically, each of nucleotides C and G is assigned a score of 1, and
each of nucleotides A and T is assigned a score of 0.
DNA sequence: ATGACTCGAGCTCGTCA
Binary sequence: 00101011011011010
The maximum-average segments of the binary sequence correspond to segments with the highest
GC ratio in the DNA sequence.
He noted that such an optimal segment is of length at most 2L− 1. This observation yields an
O(nL)-time algorithm for computing a segment of length at least L with the highest C+G ratio,
where n is the length of the input sequence. More efficient algorithms for this problem were given
by Lin, Jiang and Chao (2002), and Chung and Lu (2004).
2
called MAVG. The empirical tests suggest that the programs MAVG and NEWCPGSEEK, which is a
popular existing program for finding CpG islands, are complementary in the sense that a combination
of their may provide a more accurate predication of CpG islands.
1.3 Annotating Multiple Sequence Alignments
Conserved regions in biomolecular sequences are strong candidates for functional elements. The most
popular methods to compute conserved regions all start with a given multiple sequence alignment
(Stojanovic et al., 1999; Stojanovic and Dewar, 2004). Stojanovic et al. (1999) gave several methods
for finding highly conserved regions within previously computed multiple alignments. Three of the
methods are based on assigning a numerical score to each column of a multiple alignment and then
looking for runs of columns with high cumulative scores. Since the assigned scores may be all positive
(e.g. in the information content case), each examined column could increase the cumulative score. It
follows that the entire alignment could be reported erroneously as a conserved region. Therefore, it
is imperative that each column score is adjusted by subtracting a positive anchor value. Determining
such an anchor value appropriately for each dataset could make the use of a program based on the
above approach very complicated. An alternative solution to the above problem is to look for runs
of sufficiently many columns in the multiple alignment with the maximum average (or normalized)
score instead. This can be efficiently computed by the algorithm for the length-constrained maximum
average consecutive subsequence problem.
1.4 Post-Processing Sequence Alignments
A new popular approach to gene prediction in the human genome is based on comparative analysis
of human and mouse DNA. The rationale behind this approach is that similarity between corre-
sponding human and mouse exons is 85% on average, while similarity between introns is 35% on
average (Arslan, Eg˘eciog˘lu, and Pevzner, 2001). Though the ingenious Smith-Waterman (Smith and
Waterman, 1981) local alignment approach has been very successful in revealing highly conserved
regions by discarding poorly conserved surrounding regions, a potential drawback of the method is
that it may lead to the inclusion of arbitrarily poor internal regions (called the mosaic effect).
In an attempt to fix the mosaic effect problem, Zhang et al. (1999) suggested to first run Smith-
Waterman type of alignment algorithms and then post-process the computed alignments. They
developed an elegant linear-time algorithm that decomposes a long alignment into sub-alignments
to avoid the mosaic effect. The method for computing the length-constrained maximum average
consecutive subsequences can be used to locate within an alignment the region that is sufficiently
4
1.7 Others
Other related interesting topics include the longest and shortest heaviest segments (Allison, 2003;
Wang and Xu, 2003; Chen and Chao, 2005), the range maximum-sum segment query (Chen and
Chao, 2004), the k maximum-sum segments (Bae and Takaoka, 2004; Bengtsson and Chen, 2004;
Cheng et al., 2005), and the maximum segments with a constrained length (Fariselli et al., 2003).
2 Achievements of this project
In the first year, we were focused on developing efficient algorithms for locating k maximum-sum
segments for a given k. Let us first describe a fundamental algorithm for the maximum-sum segment
problem.
Given a sequence of real numbers A = 〈a1, a2, . . . , an〉, the maximum-sum segment problem is
to find a consecutive subsequence (i.e., a substring or segment) in A with the maximum sum. For
each position i, we can compute the maximum-sum segment ending at that position in O(i) time.
Therefore, a naive algorithm runs in
∑n
i=1O(i) = O(n
2) time.
Now let us describe a more efficient dynamic-programming algorithm for this problem (Bentley,
1986; Cormen et al., 1999). Define S(i) to be the maximum sum of segments ending at position i of
A. The value S(i) can be computed by the following recurrence:
S(i) =
 ai +max{S(i− 1), 0} if i > 1,a1 if i = 1.
If S(i − 1) < 0, concatenating ai with its previous elements will give less sum than ai itself. In
this case, the maximum-sum segment ends at position i is ai itself.
By a tabular computation, each S(i) can be computed in constant time from i = 1 to i = n,
therefore in total O(n) time. During the computation, we also need to record the largest entry
computed so far in order to report where the maximum-sum segment ends. We also record the
traceback information for each position i so that we can trace back from the end position of the
maximum-sum segment to its start position. If S(i− 1) > 0, we need to concatenate with previous
elements for a larger sum, therefore the traceback symbol for position i is “←.” Otherwise, “↑” is
recorded. The traceback information can be used to quickly construct the maximum-sum segment
by following the arrows until a “↑” is reached.
Let prefix sum P (i) =
∑i
j=1 aj be the sum of the first i elements. It can be easily seen that∑j
k=i ak = P (j)−P (i−1). Therefore, if we wish to compute for a given position the maximum-sum
6
Report-DRS-Part(i, p[·])
Input: i denoting the suffix sequence 〈ai, ai+1, . . . , an〉; p[·]: right-skew pointers of A.
Output: The decreasingly right-skew partition of the suffix.
1 while i ≤ n do B Reports 〈ai, . . . , aj〉 as a right-skew segment.
2 Output (i, p[i]); i← p[i] + 1
Figure 1: Reporting the decreasingly right-skew partition of a suffix sequence.
Lemma 1 (Combination) Let A,B be two sequences with µ(A) < µ(B). Then µ(A) < µ(AB) <
µ(B).
Proof. Let λ = d(A)/d(AB). We have µ(AB) = λµ(A) + (1 − λ)µ(B). The result is true because
0 < λ < 1. ¤
Lemma 2 Let A,B be two right-skew sequences with µ(A) ≤ µ(B). Then the sequence AB is also
right-skew.
Proof. Consider a prefix P of AB. Clearly, µ(P ) ≤ µ(B) if P = A. If P is a proper prefix of A,
i.e. A = PY for some nonempty sequence Y , then we have µ(P ) ≤ µ(A) ≤ µ(Y ) by the last lemma.
Hence, µ(P ) ≤ µ(Y B) since µ(P ) ≤ µ(B).
On the other hand, if P contains a proper prefix of B, i.e. B = CD and P = AC for some
nonempty sequences C and D, then µ(C) ≤ µ(B) ≤ µ(D). Hence, µ(P ) = µ(AC) ≤ µ(D) since
µ(A) ≤ µ(B) ≤ µ(D). ¤
For a sequence A = 〈a1, a2, . . . , an〉, each suffix of A, 〈ai, . . . , an〉, defines a decreasingly right-
skew partition, denoted as A(i)1 A
(i)
2 · · ·A(i)k , for some k ≥ 1. Suppose that A(i)1 = 〈ai, . . . , ap[i]〉, where
p[i] is called the right-skew pointer of index i. Note that the right-skew pointers of A implicitly
encode the decreasingly right-skew partitions for each suffix 〈ai, . . . , an〉 of A. Given the right-skew
pointers, one can easily report the decreasingly right-skew partitions of a suffix as illustrated in
Figure 1. Interestingly, we can compute all right-skew pointers in linear time.
Lemma 3 The algorithm DRS-Point given in Figure 2 computes all right-skew pointers for a
length n sequence in O(n) time.
Proof. Consider the algorithm DRS-Point shown in Figure 2. The working pointer i scans the
elements of A from right to left. By Lemma 2, two increasingly right-skew segments can be grouped
8
For finding the weight-constrained k longest paths in a tree and the length-constrained k maximum-
sum segments of a sequence, we obtain the following new results:
– Given a tree T = (V,E) with a length function ` : E → R and a weight function w : E → R,
a positive integer k, and an interval [L,U ], the Weight-Constrained k Longest Paths
problem is to find the k longest paths among all paths in T with weights in the interval
[L,U ]. We show that the Weight-Constrained k Longest Paths problem has a lower
bound Ω(V log V +k) in the algebraic computation tree model and give an O(V log V +k)-time
algorithm for it.
– Given a sequence A = (a1, a2, . . . , an) of numbers and an interval [L,U ], we define the sum
and length of a segment A[i, j] to be ai + ai+1 + · · · + aj and j − i + 1, respectively. The
Length-Constrained k Maximum-Sum Segments problem is to find the k maximum-
sum segments among all segments of A with lengths in the interval [L,U ]. We show that
the Length-Constrained k Maximum-Sum Segments problem can be solved in O(n+ k)
time.
In the third year, we studied some enumeration problems on trees and sequences. Let us start by
considering some problems on trees. Let T = (V,E) be a tree with a length function ` : E → R and
a weight function w : E → R. Define the length and weight of a path P = (v1, v2, . . . , vn) in T to
be
∑
1≤i≤n−1 `(vivi+1) and
∑
1≤i≤n−1 w(vivi+1), respectively. Given T , the Tree Longest Path
problem (also known as the Tree Diameter problem) is to find the longest path in T . The Tree
Longest Path problem is a fundamental problem in dealing with trees and solvable in O(V ) time.
In the following, we introduce two generalizations of the Tree Longest Path problem, which are
closely related to our study in this project.
One is the Tree k Longest Paths problem. Given T and a positive integer k, the Tree k
Longest Paths problem is to find the k longest paths from all paths in T . After finding the kth
longest path, the k longest paths can be constructed with additional O(k) time from the computed
information. Hence, the Tree k Longest Paths problem is solvable in O(V log V + k) time.
The other is the Weight-Constrained Longest Path problem. Given T and interval [L,U ],
the Weight-Constrained Longest Paths problem is to find the longest path among all paths
in T with weights in the interval [L,U ]. The Weight-Constrained Longest Path problem was
formulated by Wu et al. [32] and motivated as follows. Given a tree network with length and weight
on each edge, we want to maintain the network by choosing a path and renewing the old and shabby
edges of this path. The length and weight on an edge measure the traffic load and update cost of
this edge, respectively. Since we also have budget constraints which limit the weight of the path
10
As a byproduct, we showed that our algorithms can be used as a basis for delivering more efficient
algorithms for some related enumeration problems such as finding the weight-constrained k largest
elements of X + Y , finding the sum-constrained k longest segments, finding k length-constrained
segments satisfying a density lower bound, and finding area-constrained k maximum-sum subarrays.
References
[1] Allison, L. (2003). Longest biased interval and longest non-negative sum interval. Bioinformatics
19, 1294–1295.
[2] Arslan A., Eg˘eciog˘lu, O¨ and Pevzner, P. (2001). A new approach to sequence comparison:
normalized sequence alignment. Bioinformatics 17, 327–337.
[3] Bae, S.E. and Takaoka, T. (2004). Algorithms for the problem of k maximum sums and a
VLSI algorithm for the k maximum subarrays problem. Proceedings of the 7th International
Symposium on Parallel Architectures, Algorithms and Networks, 247–253.
[4] Bengtsson, F. and Chen, J. (2004). Efficient algorithms for k maximum sums. Proceedings of
the 15th International Symposium on Algorithms And Computation, LNCS 3341, 137–148.
[5] Bentley, J. (1986). Programming Pearls (Reading: Addison-Wesley).
[6] Bird, A. (1987). CpG islands as gene markers in the vertebrate nucleus. Trends in Genetics 3,
342-347.
[7] Chen, K.-Y. and Chao, K.-M. (2004). On the range maximum-sum segment query problem.
Proceedings of the 15th International Symposium on Algorithms And Computation, LNCS
3341, 294–305.
[8] Chen, K.-Y. and Chao, K.-M. (2005). Optimal algorithms for locating the longest and shortest
segments satisfying a sum or an average constraint. Information Processing Letters, accepted.
[9] Cheng, C.-H., Chen, K.-Y., Tien, W.-C., and Chao, K.-M. (2005). Improved algorithms for the
k maximum-sum problems. Proceedings of the 16th International Symposium on Algorithms
And Computation, accepted.
[10] Chung, K.-M., and Lu, H.-I. (2004). An optimal algorithm for the maximum-density segment
problem. SIAM Journal on Computing 34, 373–387.
[11] Cormen, T.H., Leiserson, C.E., Rivest, R.L. and Stein, C. (1999). Introduction to Algorithms
(The MIT Press: 2nd Edition).
12
[26] Schattner, P. (2002). Searching for RNA genes using base composition statistics. Nucleic Acids
Res. 30, 2076–2082.
[27] Smith, T.F. and Waterman, M.S. (1981). Identification of common molecular sequences. J. Mol.
Biol. 147, 195–197.
[28] Stojanovic, N., Florea, L., Riemer, C., Gumucio, D., Slightom, J., Goodman, M., Miller, W.,
and Hardison, R. (1999). Comparison of five methods for finding conserved sequences in multiple
alignments of gene regulatory regions. Nucleic Acids Research 19, 3899–3910.
[29] Stojanovic, N. and Dewar, K. (2005). Identifying multiple alignment regions satisfying simple
formulas and patterns. Bioinformatics 20, 2140–2142.
[30] Takai, D. and Jones, P.A. (2002). Comprehensive analysis of CpG islands in human chromo-
somes 21 and 22. PNAS 99, 3740–3745.
[31] Wang, L. and Xu, Y. (2003). SEGID: identifying interesting segments in (multiple) sequence
alignments. Bioinformatics 19, 297–298.
[32] Wu, B.Y., Chao, K.-M., and Tang, C.Y. (1999) An efficient algorithm for the length-constrained
heaviest path problem on a tree. Information Processing Letters, 69 :63–67.
[33] Zhang, Z., Berman, P., Wiehe, T., and Miller, W. (1999). Post-processing long pairwise align-
ments. Bioinformatics 15, 1012–1019.
14
