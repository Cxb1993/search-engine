上遊戲外掛偵測機制能夠有效確實遊戲外掛，已有多家遊戲廠商接洽，希望
能實際部署至他們的遊戲中。另外，遊戲使用者行為分析及預測的研究與我
們目前正在進行的社群網路分析，能夠某種程度地預測使用者的未來行為，
也有多家遊戲廠商表達高度興趣希望能夠引進我們的技術。我們未來希望能
夠持續地在理論與實務上齊頭並進，一方面在理論上發展，另一方面也希望
發展出來的技術在實際的場域上發揮它應有的功能。 
 
A. 已發表論文： 
1. Chen-Chi Wu, Kuan-Ta Chen, Chih-Ming Chen, Polly Huang, and 
Chin-Laung Lei, "On the Challenge and Design of Transport Protocols for 
MMORPGs," Multimedia Tools and Applications, volume 45, number 1, pages 
7--32, 2009.  
2. Kuan-Ta Chen, Polly Huang, and Chin-Laung Lei, "Effect of Network Quality 
on Player Departure Behavior in Online Games," IEEE Transactions on Parallel 
and Distributed Systems, volume 20, number 5, pages 593--606, May 2009. 
3. Kuan-Ta Chen, Jhih-Wei Jiang, Polly Huang, Hao-Hua Chu, Hao-Hua Chu, 
Chin-Laung Lei, and Wen-Chin Chen, "Identifying MMORPG Bots: A Traffic 
Analysis Approach," EURASIP Journal on Advances in Signal Processing, 2009. 
4. Jing-Kai Lou, Kuan-Ta Chen, and Chin-Laung Lei, "A Collusion-Resistant 
Automation Scheme for Social Moderation Systems," Proceedings of IEEE 
CCNC 2009, 2009. 
5. Junichi Oda, Ruck Thawonmas, and Kuan-Ta Chen, "Comparison of User 
Trajectories Based on Coordinate Data and State Transitions," Proceedings of 
IEEE IIHMSP 2009, 2009. 
6. Ruck Thawonmas, Keisuke Yoshida, Jing-Kai Lou, and Kuan-Ta Chen, 
"Analysis of Area Revisitation Patterns in World of Warcarft," Proceedings of 
IFIP ICEC 2009, 2009. 
7. Chung-Cheng Chiu and Kuan-Ta Chen, "On the Construction of Initial Basis 
Function for Efficient Value Function Approximation," Proceedings of ICAI 
1On the Challenge and Design of Transport
Protocols for MMORPGs
Chen-Chi Wu†, Kuan-Ta Chen‡, Chih-Ming Chen†, Polly Huang†, and Chin-Laung Lei†
†Department of Electrical Engineering, National Taiwan University
‡Institute of Information Science, Academia Sinica
Abstract
Although MMORPGs are becoming increasingly popular as well as a highly profitable Internet business, there is
still a fundamental design question: Which transport protocol should be used—TCP, UDP, or some other protocol? In
this paper, we first evaluate whether TCP is suitable for MMORPGs, and then propose some novel transport strategies
for this genre of games. Our analysis of a trace collected from a TCP-based MMORPG called ShenZhou Online
indicates that TCP is unwieldy and inappropriate for MMORPGs. We find that the degraded network performance
problems are due to the following characteristics of MMORPG traffic: 1) tiny packets, 2) a low packet rate, 3)
application-limited traffic generation, and 4) bi-directional traffic.
Since not all game packets require reliable transmission or in-order delivery, transmitting all packets with a strict
delivery guarantee causes high delays and delay jitters. Therefore, our proposed transport strategies assign game
packets with appropriate levels of transmission guarantee depending on the requirements of the packets’ contents. To
compare the performance of our approach with that of existing transport protocols, we conduct network simulations
with a real-life game trace from Angel’s Love. The results demonstrate that our strategies significantly reduce the
end-to-end delay and delay jitter of packet delivery. Finally, we show that our strategies effectively raise satisfaction
levels of the game players.
I. INTRODUCTION
Massive Multiplayer Online Role Playing Games (MMORPGs) have become extremely popular in recent years,
and now attract millions of players who participate in the activities with other gamers in a virtual world. The
number of active subscribers worldwide increased from 12 million to 16 million between January 2007 and January
2008 [22]. However, degraded network performance, such as lengthy delays and excessive delay jitters affect players’
willingness to continue in a game [6]. How to ensure that players have a satisfactory gaming experience is currently
the most critical issue facing the game industry [8, 9].
A fundamental design question in the development of MMORPGs is—Which transport protocol should be used—
TCP, UDP, or some other protocol? GameDev.Net offers the following advice [2]: “For RTS (Realtime Strategy)
games, you’re usually best off using TCP, although UDP can make sense in extreme cases. For action-based games
like first-person shooters or racers, you should absolutely use UDP. For role playing games, the story is less clear—
action-based RPGs with lots of kinetics, like City of Heroes, use UDP, whereas slower RPGs and MUDs often
stay with TCP.” As shown in Table I, both TCP and UDP are widely used by popular MMORPGs, while other
games may adopt a hybrid approach based on both protocols. Several other transport protocols can be candidates
for MMORPGs, for example, RTP, the datagram congestion control protocol (DCCP) [15], the stream control
transmission protocol (SCTP) [20], the game transport protocol (GTP) [17], and other middleware protocols [1, 12].
Because of the diversity of protocols in use and several newly designed protocols, there is no consensus on the best
transport protocol for this genre of games. In this paper, we first assess whether TCP is suitable for MMORPGs,
and then propose transport strategies that assign appropriate levels of transmission guarantee to each game packet
to opportunistically improve the packet delivery performance.
Based on a real-life trace collected from a TCP-based MMORPG called ShenZhou Online [21], we investigate
the performance problem caused by the interplay of TCP and the design of MMORPGs. The following findings
show that TCP is unwieldy and inappropriate for MMORPGs.
1) Since game packets are generally small, TCP/IP headers occupy up to 46% of the total bandwidth consumed
by the game traffic.
Corresponding author: Kuan-Ta Chen, contact him at ktchen@iis.sinica.edu.tw.
3TABLE II
SUMMARY OF GAME TRAFFIC TRACES
Trace Date Period Drops† Session Pkt. (in / out) Bytes (in / out)
N1 8/29/04 (Sun.) 8 hr. 0.003% 7,597 342M / 353M 4.7TB / 27.3TB
N2 8/30/04 (Mon.) 12 hr. ?‡ 7,543 325M / 336M 4.7TB / 21.7TB
† This column gives the kernel drop count reported by tcpdump.
‡ The reported kernel drop count was zero, but we found that some packets were actually dropped at the monitor.
0.
0
0.
2
0.
4
0.
6
0.
8
1.
0
Payload size (bytes)
Cu
m
ul
at
ive
 d
ist
rib
ut
io
n 
fu
nc
tio
n
25 50 75 100 150 200 300 500
Client packets
Server packets
Fig. 1. Payload size distribution
deploys a proxy to multiplex streams sent to clients into a single connection. Both approaches reduce packet delay
in games. However, the type of packet is not considered thus there must be extra overhead for certain packets
as the QoS levels required by game packets are not equivalent. In another work [17], Pack et al. proposed the
Game Transport Protocol (GTP), which is designed to meet the various requirements of MMORPGs. GTP uses
a packet-oriented, rather than a byte-oriented, window scheme to accommodate the small packet size of game
traffic. In addition, to satisfy the real-time constraints of packet delivery, GTP supports an adaptive retransmission
scheme, which controls the maximum number of retransmissions based on each packet’s priority. Although the
work incorporates the concept of multiple QoS levels, it does neither address, in practice, how to map a variety
types of game packets with different QoS levels, and nor provide a performance evaluation of the proposed design.
In [18], Shirmohammadi et al. proposed to transmit update messages according to multiple QoS levels in
collaborative virtual environments (CVE). In CVEs, some messages require reliable transmission because their
loss will incur collaboration failures. For example, the last state of a shared object in a CVE must be delivered
reliably so that all participants can perceive the last position of the object correctly. On the other hand, some
update messages can be sent by a best effort delivery as they can be lost without impacting the interaction between
participants. For example, the loss of most move updates is tolerable if the last one has been received correctly.
In view of different delivery requirements, Shirmohammadi et al. classify the messages into two types: key update
messages and regular update messages. The authors implement their proposed approach based on SCTP and conduct
subjective experiments to evaluate the performance of the proposal. The results show that their approach achieves
reliable and timely transmission for key messages even in a congested and lossy network environment.
III. ANALYSIS OF TCP PERFORMANCE
TCP is a connection-oriented transport protocol that provides reliable transmission, in-order delivery, congestion
control, and flow control. In this section, we analyze the performance of TCP in MMORPGs based on real-life
game traces. We find that in-order delivery causes unnecessary transmission latencies and high delay jitters, and
the protocol’s congestion control and loss recovery mechanism are ineffective in MMORPGs.
A. Trace Description
First we describe the traces used for evaluating the performance of TCP in MMORPGs. ShenZhou Online is a
TCP-based MMORPG that is popular in Taiwan [21], where there are thousands of players online at any one time.
In this game, players can engage in fights with other players or random creatures, train their avatars to acquire
5(a) Latency (ms)
D
en
si
ty
0 200 400 600 800
0.
00
0
0.
00
4
0.
00
8
0.
01
2
normal packets
lost packets
all packets
0 10 20 30 40
0.
0
0.
2
0.
4
0.
6
0.
8
1.
0
(b) Expansion ratio of latency (%)
Cu
m
ul
at
ive
 d
ist
rb
ut
io
n 
fu
nc
tio
n
Fig. 3. The impact of packet loss on network latency
pure ack packets and the small payload size of game packets, the network bandwidth occupied by the TCP/IP
header constitutes an excessive overhead. For example, in the traces, TCP/IP headers occupy 46% of the bandwidth
consumed by the game traffic.
C. In-Order Delivery
TCP has an in-order delivery policy that guarantees the receiver will process data packets in the order generated
by the sender. Under this mechanism, a packet must be buffered at the receiver until all of its preceding packets
have been received and processed. In other words, if a packet is lost in the network, all of its subsequent packets
that have been received already would suffer additional delay. However, certain game packets do not require in-
order processing, so the mechanism may cause unnecessary delay. For example, if a player attacks an opponent
repeatedly with the same weapon and the same action, the game application will generate a number of duplicate
packets with attack messages and transmit them to the server. In this case, the packets can be processed out of
order at the server without affecting the outcome of the game. Moreover, position or state updates in MMORPGs
are often designed to be accumulative; that is, subsequent updates override earlier ones. As a result, an update
packet can be processed immediately on arrival, instead of being buffered until all of its preceding packets arrive
at the destination host.
To evaluate how much additional delay is caused by strict in-order delivery, we consider an extreme case in
which all game packets can be processed in an arbitrary order. We investigate the influence of packet loss, which
is the main source of out-of-order delivery, in terms of transmission latency and delay jitters (i.e., the standard
deviation of the latency). Since the traces were collected at the server side, we define latency as the time difference
between the departure time of a server packet and the time the corresponding ack packet is received.
In Fig. 3(a), we show the average latency of normal (non-lost) packets, lost packets, and all packets. Before
retransmitting a dropped packet, the sender needs extra time to detect a lost packet. Thus, the average latency of
packets that have been lost (576 ms) is much longer than that of normal packets (186 ms). Fig. 3(b) shows the
expansion ratio of latency due to packet loss for connections that experienced at least one packet loss. We observe
that 33% of them suffered more than 10% additional latency, and 7% suffered more than 20%. Overall, packet loss
caused the average latency to increase from 186 ms to 199 ms.
Although packet loss does not raise the average latency excessively, delay jitter is seriously affected. As shown
in Fig. 4(a), the delay jitter of lost packets is spread more widely than that of normal packets. The average delay
jitter of lost packets (321 ms) is four times longer than that of normal packets (77 ms). Figure 4(b) shows the
expansion ratio of delay jitter due to packet loss. We observe that 22% of connections suffered more than 100%
additional jitter, and 6% suffered more than 200%. The overall average delay jitter increased from 77 ms to 123
7TABLE III
THE REASONS WHY FAST RETRANSMIT FAILED TO TRIGGER
Cause Ratio
Insufficient duplicate acks 50.96%
Duplicate ack accumulation was interrupted 49.04%
New data 48.90%
New ack 0.02%
Window size change 0.12%
Both sizes are too large to reflect the available bandwidth of individual flows. In addition, we found that 36% of
connections experienced no packet loss, which would never happen in network-limited applications with sufficient
data. A potential problem associated with an inaccurately large window size is that an application with application-
limited traffic may occasionally have a large burst of packets to send in a short time. This condition results in
the release of an overwhelming traffic load due to the inappropriately large window size; therefore, the network
bandwidth will be exhausted and congestion will occur unnecessarily.
Although the congestion window tends to become arbitrarily large in MMORPGs, it could be reset incorrectly
because of the restart after idle periods policy [3]. In a connection, if the sender has not released packets in an
interval longer than one retransmission timeout (RTO), the congestion window should be reset to two packets.
The purpose is to prevent an inappropriate burst of packets being transmitted due to an out-of-date cwnd that
does not faithfully reflect current network conditions. However, the packet rate in MMORPGs is very low, so the
packet interarrival times may be longer than one RTO. In this case, the cwnd is reset unnecessarily before the
next packet transmission, so the release of subsequent packets is restricted. Figure 5 shows the distributions of
the RTO, client packet interarrival times, and server packet interarrival times in our traces. For the client packet
interarrival times, the shaded area in the upper portion indicates that they are probably longer than the RTO. In
the traces, 12% of client packets and 18% of server packets encountered a cwnd reset before they were released.
The restart-after-idle-periods policy causes additional transmission delay. For example, suppose a player issues a
series of three commands, “sneak,” “move,” and “attack,” following a short period of thinking that is longer than
RTO. Since the cwnd is reduced to two packets, the third command cannot be released until the first command is
acknowledged. As a result, inappropriate resets of the congestion window have a negative effect on the interactivity
and responsiveness of MMORPGs.
E. Loss Recovery
To detect packet loss, TCP uses one of the following three strategies [3] (depending on the version of TCP):
1) retransmission timeout (RTO), i.e., a packet is deemed to have been dropped if the associated acknowledgment
is not received by the sender before RTO occurs; 2) the fast-retransmit mechanism, i.e., a packet is considered
lost if four successive and identical ack packets arrive without interruption by other packets; and 3) the selective
acknowledgment (SACK) mechanism [16], which enables the receiver to inform the sender about the packets
received; then, the sender only needs to retransmit the lost packets. Because the game servers we monitored did
not enable the SACK option, we focus on the performance analysis of the first two strategies.
The fast-retransmit algorithm is designed to alleviate the long delays incurred by detecting packet loss via
retransmission timeout. However, in our traces, only 0.08% of dropped server packets were detected by the
mechanism; that is, 99.92% of the lost packets were not detected by the game servers until RTO occurred. This
surprising result indicates that the fast-retransmit algorithm is ineffective in MMORPGs. According to our analysis,
the mechanism failed for two reasons: 1) insufficient duplicate acks; and 2) the accumulation of duplicate acks was
interrupted. As shown in Table III, the occurrence frequency is approximately the same in both cases. To trigger
the fast retransmit mechanism, a sender should receive at least three duplicate acks within an (RTO−RTT) interval
following a dropped packet. In other words, within that interval, the sender must release at least three additional
packets, each of which will elicit a duplicate ack. However, because the server packet rate is too low, it seems
unlikely that four packets could be released within that short period. To examine this conjecture, we compare
the distribution of (RTO − RTT) intervals with that of the server packet interarrival times detailed in Fig. 6. The
shaded area indicates that 34% of the server packet interarrival times were probably longer than their corresponding
(RTO − RTT) intervals; that is, there were no subsequent packets within that interval. Hence, fast retransmit was
not triggered because insufficient duplicate acks were generated.
9MMORPGs directly because some game messages require reliable transmission. In this section, we first discuss the
design of efficient transport strategies for MMORPGs. Then, we propose three content-based transport strategies
that provide an appropriate transmission guarantee for each type of game message in order to opportunistically
improve the packet delivery performance.
A. Prerequisites of MMORPG Transport Protocol Design
The transmission requirements of game packets are diverse because of the intrinsic characteristics of messages
contained in the packets. For example, some messages require in-order and reliable transmission, while the loss of
some messages is tolerable. For MMORPGs, we generally classify game messages generated by players into three
types: move, attack, and talk messages.
• Move messages report position updates when an avatar moves or goes to a new area. Since only the latest
location in the game play matters, the server simply discards out-of-date move messages.
• Attack messages correspond to an avatar’s combat actions when it engages in fights with opponents. Such
messages cannot be lost because each action will have some impact on the target. However, if several successive
attack messages describe the same combat action against the same target, out-of-order arrivals of these messages
can be tolerated, since they can be processed in a different order without affecting the final outcome.
• Talk messages convey the contents of conversations between players. To display the complete contents to
players in exactly the same order as they were typed, talk messages must be transmitted in order and reliably.
Intuitively, it is clear that transmitting game messages with short delays and low delay jitters leads to high
interactivity and responsiveness in the game play, as game messages can be processed more quickly and smoothly
by the receiving hosts. Based on the above descriptions of game messages, we define three levels of transmission
requirements for different types of messages.
• Under the strictest level, messages must be transmitted in order and reliably. For talk messages, this QoS level
must be guaranteed so that the contents of conversations can be displayed correctly.
• For messages that can be processed out of order, in-order delivery is not essential. For example, if a player
attacks an opponent with the same weapon, a series of repeat messages are generated. Since these messages
are semantically and visually equivalent, out-of-order processing will not adversely impact the outcomes of
the game play.
• Some types of messages do not require reliable transmission because they can be lost without affecting the
game’s logic. For example, the loss of most move messages is tolerable because they are designed to be
cumulative; that is, each new message will override the previous ones. However, the last message in a series
of move updates must be delivered to the server because it reports the avatar’s latest location.
B. Opportunistic Content-based Transport Strategies
To deliver game messages efficiently for different levels of transmission requirement without incurring high
overhead, we designed the following transport options.
• Multi-streaming: With this option, different types of game messages can be put into separate streams, each
of which processes the messages independently. In other words, each stream maintains the message order
individually so that a delayed message in one stream will not affect subsequent messages belonging to other
streams. Therefore, if different types of messages can be processed independently, we can put them into several
separate streams without generating incorrect game semantics.
• Optional Ordering: We have shown that in-order delivery incurs long delays and extensive delay jitters due to
inevitable packet loss. Optional ordering can reduce this overhead because it allows some types of messages to
be processed as soon as they are received without being buffered if their preceding messages have not arrived.
• Optional Reliability: With this option, messages that do not require reliable transmission can simply be
ignored if they are lost in the network. Therefore, the loss of a packet containing a non-critical message will
not prevent the processing of its subsequent messages. In addition, optional reliability can save the network
bandwidth used by unnecessary packet retransmission.
Next, we propose content-based transport strategies based on the above options. These strategies assign appropriate
levels of transmission guarantee to game messages according to their requirements.
11
TABLE IV
COMPARISON OF THE PROTOCOLS USED IN THE NETWORK SIMULATIONS
Protocol Multi- Ordered Reliable
streaming
UDP ✘ ✘ ✘
DCCP (TCP-like) ✘ ✘ ✘
TCP ✘ ✔ ✔
SCTP† ✘ ✔ ✔
PMRO ✔ ✔ ✔
PMR ✔ ▲ ✔
PM ✔ ▲ ▲
Description: ✘ indicates that the transport protocol does not support the feature, ✔ indicates that the transport protocol supports
the feature, and ▲ indicates that the transport protocol can support this feature optionally.
†: In our experiment, SCTP transports messages in one ordered and reliable stream.
TABLE V
ANGEL’S LOVE: ACTION TRACES PER USER
Game play time Number of messages
Total 22 hr. 7 min. 7, 482, 951
Average 4 hr. 37 min. 4, 080
Maximum 22 hr. 7 min. 169, 116
Minimum 1 hr. 201
The main difference between our protocols and existing protocols is that the latter transfer each type of message
in the same way, whereas our content-based transport protocols assign an appropriate delivery guarantee to each
type of message. The features of the protocols are summarized in Table IV.
B. Description of Game Trace
Angel’s Love is a mid-scale, TCP-based MMORPG that is popular in Taiwan. There may be thousands of players
online at any one time. The traces used in the experiment were collected by the staff of Angel’s Love. They
recorded the actions of all players during a specific period of time; that is, the traces are the action logs of the
players. The action-based traces consist of game messages representing the actions performed by the players as well
as the timestamp of each message. Based on the game-level action traces, we can perform network simulations
realistically and flexibly. For example, we can investigate the end-to-end delay and end-to-end delay jitter that
players experience in various network scenarios, such as different transport protocols, different numbers of clients,
and different network configurations. Such simulations cannot be conducted on network-level traffic traces because
we cannot change the environmental conditions and network settings associated with the traces. As summarized in
Table V, the action-based traces were collected in a period longer than 22 hours. Specifically, they contain more
than 7 million action messages from about 1, 800 players.
Recall that game messages are classified into three types: move, attack, and talk. On average, for each player, 84%
of the messages are move actions, 12% are related to attack actions, and 4% are talk messages. We believe these
results are generalizable to other MMORPGs because players move their avatars most of the time in MMORPGs.
In addition, although players may feel that they spend similar amounts of time on fighting and chatting, attack
messages easily outnumber talk messages. This is because an attack message is triggered by just a mouse click,
whereas a talk message contains several words or letters that require several keystrokes.
C. Experiment Setup
We conduct experiments with the ns-2 simulator, which is useful and therefore widely used in networking
researches. As shown in Figure 8, we deploy m + n + 3 nodes: a game server and two intermediate nodes that
serve as network routers; n nodes are the game clients, and the remaining m nodes are traffic nodes. The game
clients and traffic nodes are randomly connected to one of the routers. For the links between the routers and the
server, we set the bandwidth at 600 Kbps, and the propagation delay at 70 ms. For the links between the other
13
20 40 60 80 100 120 140
0
50
10
0
15
0
20
0
25
0
30
0
35
0
Client Traffic
Client #
M
ea
n 
jitt
er 
(m
s)
TCP
UDP
SCTP
DCCP(TCPLike)
20 40 60 80 100 120 140
0
20
0
40
0
60
0
80
0
Server Traffic
Client #
M
ea
n 
jitt
er 
(m
s)
TCP
UDP
SCTP
DCCP(TCPLike)
Fig. 10. The mean end-to-end delay jitters of existing transport protocols
20 40 60 80 100 120 140
18
0
20
0
22
0
24
0
26
0
28
0
30
0
Client Traffic
Client #
M
ea
n 
de
la
y 
(m
s)
TCP
UDP
SCTP
P_MRO
P_MR
P_M
20 40 60 80 100 120 140
20
0
30
0
40
0
50
0
60
0
Server Traffic
Client #
M
ea
n 
de
la
y 
(m
s)
TCP
UDP
SCTP
P_MRO
P_MR
P_M
Fig. 11. The mean end-to-end delays of TCP, UDP, SCTP, and our transport protocols
confirms our intuition that TCP’s guarantee of data delivery is too inflexible, so long delays are inevitable. On the
other hand, since UDP does not guarantee data reliability and in-order delivery, no additional delay will occur in
the transport level. In addition, DCCP(TCP-like) always achieves the second best performance, and SCTP yields
the third best. The performance of SCTP is similar to that of TCP because we employ an ordered and reliable
stream, which provides a transmission guarantee similar to that in TCP. DCCP(TCP-like) can be viewed as UDP
plus a congestion control mechanism, so its mean delays are very close to those of UDP. Our observation supports
the conjecture that the more functionalities a protocol provides, the worse the end-to-end delay experienced by
packets.
We also consider the mean end-to-end delay jitter incurred by different protocols, as shown in Fig. 10. The trends
in the results and the differences between the results of these protocols are very similar to those in Fig. 9, since a
high average end-to-end delay usually implies that the end-to-end delay may vary over a wide range.
E. Evaluation of Content-based Transport Protocols
We now compare the mean end-to-end delays of our proposed content-based transport protocols with those of
TCP, SCTP, and UDP, as shown in Figure 11. Overall, the trends of our protocols as the number of game clients
increases are similar to those of the compared protocols. We observe that the more flexible the strategies employed
by our protocols, the better the performance they achieve. PMRO uses three TCP streams to transmit different types
of messages so that the sequencing delays between different types of messages can be eliminated. Therefore, in
most of the scenarios, the mean delays under PMRO are lower than those in TCP. For PMR, move and attack messages
are transmitted via two separate streams with optional ordering, so its performance is better than that of PMRO. PM
achieves the best performance among our protocols because approximately 80% of move messages do not have
to be transmitted reliably and in order. This avoids a large number of unnecessary retransmissions and reduces
sequencing delays for non-critical move updates. As a result, the mean delay of PM is relatively close to that of
UDP. We also analyze the mean end-to-end delay jitter, as shown in Fig. 12. Again, the results are similar to those
for end-to-end delays, i.e., a high average end-to-end delay implies that the end-to-end delay jitter may be large.
The results indicate that our strategies reduce end-to-end delay as well as end-to-end delay jitter.
To emphasize the performance of our protocols, we normalize the mean end-to-end delays and the mean end-
to-end delay jitters of our transport protocols based on those of SCTP (upper bound) and UDP (lower bound). We
15
20 40 60 80 100 120 140
20
0
22
0
24
0
26
0
Client Traffic
Client #
M
ea
n 
de
la
y 
(m
s)
Move msg
Attack msg
Talk msg
20 40 60 80 100 120 140
20
0
25
0
30
0
35
0
Server Traffic
Client #
M
ea
n 
de
la
y 
(m
s)
Move msg
Attack msg
Talk msg
Fig. 15. The mean end-to-end delay of each type of messages in PM
F. Improvement in User Satisfaction
Here, we consider how the improvement in network performance derived by our content-based strategies enhances
users’ game play satisfaction. In [6, 7], the authors provide an in-depth analysis of the relationship between network
quality and users’ game-playing time in MMORPGs. Degraded network QoS in terms of end-to-end delay, delay
jitter, and the packet loss rate significantly affect the gaming experience, so players quit games because they are
not satisfied. Based on the survival model used in [6, 7], we define the Game Satisfaction Index (GSI) as the level
of player satisfaction calculated by the following equation:
GSI ∝ exp((−1.6)× delay + (−9.2)× delay jitter + (−0.2)× log(loss rate)).
GSI indicates that the level of player satisfaction is proportional to the exponent of the weighted sum of certain
network metrics, where the weights reflect the effect of network impairment. With this equation, we compare the
improvement in user satisfaction with PM over TCP. In the simulations, when the number of clients is 150, the mean
delay and mean delay jitter of client traffic are, respectively, 208 ms and 52 ms in PM, and 285 ms and 177 ms in
TCP. The packet loss rate in PM is similar to that in TCP. The ratio of the player satisfaction levels of these two
transport protocols can be computed by exp((−1.6)× (0.208− 0.285) + (−9.2)× (0.052− 0.177)) ≈ 3.57, where
−1.6 and −9.2 are the coefficients of delay and delay jitter respectively. In other words, the reduction in delay
and delay jitter achieved by PM raises the GSI significantly. Specifically, it is 3.57 times higher than in the GSI for
TCP. That is, players have much better gaming experiences with PM as the underlying protocol, which implies that
they tend to spend much longer time in the game. The figure manifests that the proposed content-based transport
strategies can effectively raise player satisfaction levels in MMORPGs.
VI. CONCLUSION
We have analyzed the performance of TCP in MMORPGs based on real-life traces. The evaluation results
indicate that while TCP is a reliable transport protocol, using it to transmit all game packets degrades game’s
performance. Specifically, we have shown that TCP’s congestion control mechanism and the fast retransmit algorithm
are ineffective for MMORPGs. The performance problems are due to the following characteristics of game traffic:
1) tiny packets, 2) low packet rate, 3) application-limited traffic generation, and 4) bi-directional traffic. In addition,
since not every game message requires reliable transmission and strict in-order processing by the destination host,
both the loss recovery mechanism and the in-order delivery policy cause unnecessary transmission delays.
Having shown that TCP is unsuitable for MMORPGs, we propose three content-based transport strategies for
this genre of games. The purpose of our strategies is to provide appropriate levels of transmission guarantee that
exactly match the requirements of the game packets’ contents. Based on realistic game traces, we conducted network
simulations to evaluate the performance of our strategies and that of several existing protocols. The results indicate
that, the proposed strategies reduce end-to-end delay and end-to-end delay jitter significantly. We also show that the
improvement in network performance derived by our strategies can effectively raise the level of gaming satisfaction
among players. To implement our strategies, it is necessary to identify game packets according to the types of
contents. However, as these strategies are more efficient than non-content-based protocols, this additional task for
game developers is worthwhile because it will bring much better gaming experiences to players.
1Effect of Network Quality on Player Departure
Behavior in Online Games
Kuan-Ta Chen1, Polly Huang2, and Chin-Laung Lei2
ktchen@iis.sinica.edu.tw, {phuang,lei}@cc.ee.ntu.edu.tw
1Institute of Information Science, Academia Sinica
2Department of Electrical Engineering, National Taiwan University
Abstract—Understanding the impact of network conditions on
player satisfaction, which is one of the major concerns of network
game designers, is a popular research topic. Of the various ways
to gauge user satisfaction, in this paper, we focus on how network
quality affects a player’s decision to leave a game prematurely. To
answer this question, we analyze a 1, 356-million-packet trace
from a large commercial MMORPG called ShenZhou Online.
We show that both network delay and network loss signifi-
cantly affect a player’s decision to leave a game prematurely. It
is feasible to predict whether players will quit prematurely based
on the network conditions they experience. The proposed model
can determine the relative impact of different types of network
impairment. For our traces, the degrees of player intolerance of
network delay, delay jitter, client packet loss, and server packet
loss are in the proportion of 1:2:4:3 approximately. The model
can also be used to make system design decisions. Through
simulations, we show that by prioritizing server processing
according to the goodness of network conditions, employing
de-jitter buffers, or replacing TCP with a more lightweight
transport protocol, the probability of premature departure can
be significantly reduced. In this way, we demonstrate how our
model of players’ network experience provides feedback for the
design of online games.
Index Terms—Departure Analysis, Internet Measurement, Lo-
gistic Regression, MMORPG, Quality of Service, User Behavior
I. INTRODUCTION
Of the various research areas related to online games,
assessing the impact of network conditions on user experience
is one of the most popular topics. Many studies, e.g., [3, 4,
7, 8, 16, 18, 25, 27, 28, 33, 37, 39], try to answer questions
like: Are game players sensitive to network conditions? If the
answer is yes, they ask: What level of network QoS (Quality-of-
Service) should be provided to maintain a satisfactory gaming
experience? The answers to the above questions are important
because they could provide useful guidelines for the trade-offs
in network resource planning. For instance, if we can be sure
that players are less tolerant of large delay variations than high
latency, then providing a smoothing buffer at the client side,
which introduces additional latency but smoothes the pace of
game play, would be a plus, as it still improves the overall
gaming experience from the user’s perspective.
Currently, there is no standard way to objectively quantify
the satisfaction that players derive from gaming. Hence, the
effect of network quality is often evaluated in terms of the
users’ performance in a specific context, such as the number
of kills in shooting games, the time taken to complete each lap
in racing games, or the capital accumulated in strategy games.
However, game scores are highly dependent on a player’s
skills, the system design, and the game’s content, so the results
are not comparable and generalizable across different games.
On the other hand, according to flow theory in psychology,
game playing can be described as a pleasurable and exciting
activity that makes players oblivious to time while they are in
the game [21, 26]. The theory suggests that players will be
more conscious of the real world if the feeling of involvement
in the virtual world is diminished by network lags; therefore,
the effect of time distortion will be mitigated. Furthermore,
players may simply decide to quit a game as soon as they
detect unacceptable lags. Thus, we conjecture that the time
players leave a game is affected, to some extent, by the network
quality they experience.
Massively Multiplayer Online Role-Playing Games (MMO-
RPGs) have become immensely popular in recent years, with
several top games reporting millions of subscribers [36]. Our
conjecture is verified by real-life traces from a commercial
MMORPG, ShenZhou Online [35], for two reasons. First,
MMORPGs are deemed to be addictive in that about half of
the players consider themselves addicted [38], so they tend to
stay for a long time once they join a game. For instance, the
statistics of MMORPGs in Japan [1] show that the average
game session time is between 80 and 120 minutes. Most
players stay for more than an hour once they join a game.
If players leave in the first few minutes, it may indicate that
they have an unsatisfactory gaming experience due to poor
QoS. The second reason is that MMORPGs are relatively slow-
paced compared to other popular genres, such as first-person
shooting (FPS) games, which usually require players to make
sub-second decisions. Slow-action games undoubtedly have
less stringent service requirements than fast-action games.
Thus, MMORPGs could be seen as a baseline for real-time
interactive games so that if network QoS frustrates MMORPG
players, it should also affect gamers of other genres.
In this paper, we analyze the player departure patterns in
ShenZhou Online and their relationship to network quality.
We find that both network latency and network loss have a
significant influence on players’ decisions to leave a game
prematurely. We detail our major findings in the following
question-and-answer format.
1) Do game players leave a game prematurely due
to unfavorable network conditions? Yes. Generally
speaking, the worse the network quality, the earlier
3Fig. 1. A screen shot of ShenZhou Online
predictability analysis of player departure events in terms of
network quality; and 3) the representativeness and sampling
methods of network QoS factors. We also explain how the
proposed regression model can be used in making system
design decisions.
While a number of previous works have suggested remark-
able QoS tolerance on the part of game players [4, 16, 33],
our findings based on the ShenZhou Online trace show that
network quality has a significant influence on players’ de-
parture patterns. We believe that the discrepancy is due to
both the nature of the game genre and the design and im-
plementation of each particular game, such as dead reckoning
schemes [2, 29, 34], and transport protocols. For example, TCP
provides in-order delivery, which incurs additional delay and
jitter for each packet loss event. As games employ different
designs and transport protocols, it is inevitable that players
will have diverse levels of QoS-sensitivity in different games,
unless we can separate the effects of network QoS, system
design, and transport protocols on players. This issue remains
to be solved.
III. TRACE COLLECTION
ShenZhou Online is a mid-scale, commercial MMORPG
that is popular in Taiwan [35], where there are thousands
of players online at any one time. To play, the participants
purchase game points from a convenience store or online. A
screen shot of ShenZhou Online is shown in Fig. 1. The
character played by the author is the man under the tree with a
round smiling face above him. He is in a typical market place,
where other players keep stalls. As is normal in MMORPGs,
a player can engage in fights with random creatures, train
himself in special skills, participate in marketplace commerce,
or take on a quest.
With the help of the ShenZhou Online staff, we set up
a traffic monitor beside the game servers. The monitor was
attached to a layer-4 switch upstream of the LAN containing
the game servers (we call it the “game LAN”). The port
forwarding capability of the tapped layer-4 switch was enabled
so that a copy of all inbound/outbound game traffic was for-
warded to our monitor. To minimize the impact of monitoring,
all remote management operations were conducted via an
Internet
Traffic Monitor
L3 switch
L2 switchL4 switch
Game & Database servers
Monitoring
interface
Management
interface
Game Traffic
Fig. 2. Network setup for traffic measurement
additional network path, i.e., the game traffic and management
traffic did not interfere with each other. The network topology
and setup of the game servers and the traffic monitor are shown
in Fig. 2. The traffic monitor was a FreeBSD PC equipped with
1.5 GHz Pentium 4 and 256 MB RAM. We used tcpdump with
the kernel built-in BPF to obtain traffic traces. In each trace,
we randomly chose a subset of game sets, and only packets
belonging to the selected game sets were logged. A game set,
which is logically a “game server” from a player’s viewpoint,
comprises an entry server, several map servers, and a database
server. All game sets are equivalent in content, but isolated.
The reason for providing identical game sets is to distribute the
players over a number of servers with limited game content,
e.g., terrain, missions, and creatures in the virtual world. We
took two packet traces, N1 and N2, which recorded traffic
for two and three game sets, respectively. The two traces,
which spanned 8 and 12 hours, respectively, and contained
more than 1, 356 million packets, are summarized in Table I.
Interested readers may refer to [6] for more details about the
characteristics of game traffic. The full data set is available
for research purposes on request1.
Although the traced game servers are centrally located at
one ISP, players are spread over 13 countries and hundreds
of autonomous systems. More specifically, the average RTTs
experienced by game sessions range from 95 ms to 580
ms, and the loss rates incurred range from zero to 20%
(computed by one percentile and 99 percentile, respectively).
The heterogeneous network path characteristics manifest that
our trace is not specific to a particular configuration.
IV. THE PLAYER DEPARTURE PROCESS AND ITS
SENSITIVITY TO NETWORK QOS
In this section, we first analyze the general departure
process of game players without considering the effect of
network conditions. We then present a correlation analysis
of the relationship between the player departure process and
the network conditions they experience. The purpose of the
correlation analysis is twofold: 1) to confirm the influence of
1Please visit http://mmnet.iis.sinica.edu.tw/download.html to request the
ShenZhou Online traffic traces.
5100 150 200 250
0.
06
0.
10
0.
14
Average RTT
Average RTT (ms)
Pr
em
at
ur
e 
D
ep
ar
tu
re
 R
at
io Corr. coef. = 0.75
500 1000 1500 2000
0.
00
0.
05
0.
10
0.
15
Maximum RTT
Maximum RTT (ms)
Pr
em
at
ur
e 
D
ep
ar
tu
re
 R
at
io Corr. coef. = −0.06
20 40 60 80 100
0.
00
0.
04
0.
08
0.
12
Delay Jitter
RTT std dev (ms)
Pr
em
at
ur
e 
D
ep
ar
tu
re
 R
at
io Corr. coef. = 0.65
80 100 120 140 160
0.
05
0.
15
0.
25
Queueing Delay
Queueing delay (ms)
Pr
em
at
ur
e 
D
ep
ar
tu
re
 R
at
io Corr. coef. = −0.19
0.
00
0.
05
0.
10
0.
15
0.
20
Client Packet Loss
Packet loss rate (%)
Pr
em
at
ur
e 
D
ep
ar
tu
re
 R
at
io
0.01 0.1 1
Corr. coef. = 0.91
0.
00
0.
05
0.
10
0.
15
Server Packet Loss
Packet loss rate (%)
Pr
em
at
ur
e 
D
ep
ar
tu
re
 R
at
io
0.01 0.1 1
Corr. coef. = 0.89
Fig. 4. Correlation of premature departures and network QoS factors
• Maximum RTT: the maximum round-trip transmission
latency of game data packets, which accounts for the most
unpleasant “lag” experience.
• Delay jitter: defined as the standard deviation of packet
round-trip times, which measures the instability of the
game’s response time.
• Average queueing delay: computed as the average round-
trip time minus the minimum round-trip time, which is
an estimate of the average queueing time accumulated
during network transmission.
• Client packet loss rate: the loss ratio of packets sent to the
server by game clients, which accounts for the additional
latency before a player’s command can be processed (by
the server), as loss detection and recovery cost some time.
• Server packet loss rate: the loss ratio of packets sent
from the game server to the client, which accounts for
additional latency before game messages or state updates
can be displayed on the client’s screen (i.e., presented to
the game player).
Our procedure for assessing whether a particular QoS factor
affects the occurrence rate of premature departure events is as
follows. First, the range of each QoS factor is divided into
several equal intervals. Then, we classify all the game sessions
into different groups according to which interval their QoS
factors fall into, and compute the proportion of prematurely
departed sessions within each group. The computed quantity
PDratio(x) is an approximation of the conditional probability
Pr(PD|x), where x denotes the midpoints of the intervals of
a QoS factor. The scatter plots for PD(10), i.e., premature
departures that occurred within 10 minutes of joining a game,
which represent the relationship between PDratio(x) and
x, are shown in Fig. 4. For each plot, we use Kendall’s
rank correlation coefficient τ [24] to quantify the strength
of the relationship between the QoS factors and the ratio of
premature departure events. A lowess smooth curve [9] is also
plotted to facilitate visual detection of the trend.
1) Factor Analysis: In Fig. 4, except for the maximum
RTT and the mean queueing delay, the factors show generally
positive correlations with the rate of premature departures.
This basically confirms our hypothesis that more serious
network impairment annoys players such that they are likely
to leave the game earlier (even though they may come back
later).
Effect of Queueing Delay: The average queueing delay,
however, has negative correlations with premature departures
when it is small, and shows no correlation with premature
departures when it is moderate to high. A detailed analysis
reveals that this is because sessions with short queueing delays
have much higher packet loss rates than those with long
queueing delays. Specifically, the median packet loss rate for
sessions with queueing delays shorter than 50 ms is 0.84%,
but for higher-queueing-delay sessions it is 0.08%, a ratio
of approximately 10:1. The combination of high packet loss
and short queueing delay could be due to certain congested
links that incur a high packet drop rate; however, since the
capacity is high, the queueing time is relatively short (the
queueing time is decided by both the queueing length and
the outgoing link bandwidth). On the other hand, there is
no correlation between moderate to long queueing delays
and premature departures. This suggests that queueing delay
is not a good indicator of network quality, as it does not
directly affect players’ perceptions of game responsiveness
and interactivity. In other words, players cannot distinguish
between specific components of the delay time (i.e., processing
delay, propagation delay, transmission delay, and queueing
delay). Instead, they only care about the total delay time that
they actually experience in the form of game “lags,” “jumps,”
slow responses, or inconsistent states between different peers.
Effect of Maximum RTT: There is no correlation between
maximum RTT and premature departures. This may because
the maximum RTT captures the worst network lags players
experience during the session, instead of the players’ average
experience. Even if the worst lag is intolerable, users may
be patient and wait for conditions to return to normal (as
network quality changes constantly over time). In this case,
the maximum RTT factor cannot capture the true feelings of
players based on premature departures.
Threshold Effect: The trend of the lowess curves in Fig. 4
indicates that the average RTT, delay jitter, and both packet
loss factors have a “threshold” effect, i.e., the impact of a
factor remains unchanged when its magnitude is small. For
example, the threshold of the average RTT is around 180
ms, so the premature departure probability only increases
with the average RTT when the latter is higher than 180
ms. This indicates that players may be insensitive to a
small amount of network impairment. The threshold effect
is commonly seen in measures of physiological reactions to
external substances [11]. For example, human responses to
drugs in terms of enzyme activity, membrane potential, heart
rate, or muscle contraction usually have a threshold effect.
Hence, the threshold effect we identified here could be seen
as evidence that premature departures successfully capture
players’ perceptions of network impairment.
2) Effect of the Observation Period: Fig. 4 shows the effect
of network QoS factors on premature departures with an ob-
servation period of 10 minutes. We now examine whether the
effect of network impairment remains the same with different
definitions of premature departure. To do so, we plot the rank
correlation coefficient between premature departures and QoS
factors with different observation times, as shown in Fig. 5.
750
10
0
15
0
20
0
25
0
Dispersion window size (sec)
Lo
g−
lik
el
ih
oo
d
5 10 30 60 120 300
(a) RTT std dev
0
20
40
60
80
10
0
Window size (sec)
Lo
g−
lik
el
ih
oo
d
5 10 30 60 120 300
(b) Average RTT
10
0
15
0
20
0
25
0
Window size (sec)
Lo
g−
lik
el
ih
oo
d
5 10 30 60 120 300
(a) Client loss rate
Overall
Mean
Min
Max
14
0
18
0
22
0
26
0
Window size (sec)
Lo
g−
lik
el
ih
oo
d
5 10 30 60 120 300
(b) Server loss rate
Fig. 6. Evaluation of the sampling method for network QoS factors
factor in a session, which is analogous to feature vector
extraction in pattern recognition, is the key to determining
how well the model fits the observed departure behavior of
players.
Intuitively, the quantities averaged over the whole session
time should be a good way to obtain a representative feature.
However, (relatively) extreme conditions may have much more
influence on users’ overall perception than other conditions.
For example, users may quit a game immediately because of
serious network lags in a short period, but be unaware of mild
and moderate lags that occur all the time. Moreover, players
might be more sensitive to adverse network conditions than
desirable network quality (i.e., as it is “supposed” to be), or
vice versa. Players might still be happy if the network quality
is satisfactory most of the time, even if it is is intolerable
sometimes, or they may only consider the unsatisfactory
part, and leave as soon as they feel the playing conditions
are intolerable. These behavior patterns are only a few of
numerous possible ways a player might react to network
impairment. As no general and well-established perceptual
and behavioral models exist to describe players’ reactions to
perceived network impairment, we investigate how to derive
the most representative risk vectors.
We propose three measures to account for variations in
network quality over time, namely, the minimum, the average,
and the maximum of a factor, with two-level sampling. That is,
the original time series s is divided into a number of sub-series
of length w, from which network conditions are sampled.
This sub-series approach is intended to confine the measures
of network quality within time spans of length w, thereby
excluding the effect of large-scale variations. The respective
minimum, average, and maximum measures with lengths equal
to |s|/w are computed for each sampled QoS factor. We then
decide which of the three measures is the most representative
for describing a user’s perceived experience during the game.
We evaluate different combinations of measures and win-
dow sizes by fitting the extracted QoS factors into a logistic
model and checking the models’ log-likelihood value, which
is an indicator of goodness-of-fit. As Fig. 6 shows, the client
packet loss rate and server packet loss rate are best sampled
with an overall average in the whole session time, i.e., with
w = |s|. We believe this result is due to the following
reasons: 1) the game packet rate is low (generally less than
10 packets/second), and 2) packet loss is rare. Thus, a large
window would be more appropriate because a short time series
may not contain enough samples to capture the true packet loss
probability along the network path.
On the other hand, the minimum values of the average RTT
and the RTT standard deviation in consecutive windows are the
most representative. That is, we choose the minimum average
RTT and minimum RTT standard deviation and sample both
with a window size of 10 seconds. (For simplicity, we use
delay and delay jitter to refer to the sampled average RTT
and RTT standard deviation variables respectively.) The small
window size implies that players are more sensitive to short-
term, rather than long-term, effects of network quality. This
behavior is reasonable because long-term fluctuations in net-
work quality should have no influence on the real-timeliness
of game playing. The sampling method of the RTT standard
deviation indicates that players are tolerant of infrequent
extreme variations in network latency, and more sensitive to
delay fluctuations that occur in every 10-second period. The
sampling of both RTT-related factors consistently chooses the
value that represents the best (averaged) quality a player
experienced. This interesting finding could be further verified
by cognitive models that explain why good experiences (rather
than bad experiences) have a stronger effect on players’
departure decisions.
C. Model Fitting
Since our two traces were recorded on a weekday and a
weekend respectively, the day of the week effect should be
incorporated into the modeling, if appropriate. For a 10-minute
observation period, the proportion of premature departures on
weekdays and weekends was 6.8% and 7.0% respectively,
which yields an odds ratio of 0.96. This difference between
the two groups of sessions yields a p-value of 0.67 in Fisher’s
test [14], which fails to reject the null hypothesis that their
odds are equal. Furthermore, if we take the binary variable
weekend as the only predictor in the logistic regression, both
the Wald statistic and the likelihood ratio test indicate that
weekend is insignificant with a critical value of 0.2. All
of these tests indicate that the day of the week does not
cause players to leave a game prematurely. Compared to
the discussion in Sec. IV-A, the phenomenon indicates that,
although users generally spend less time playing games on
weekdays, the time constraint on weekdays is not so stressful
that players are forced to quit the game within a short time,
e.g., 10 minutes. Thus, we do not include the weekend
variable in the model.
Like ordinary linear regression models, the logistic model
assumes that the contribution of each risk factor to the
response variable is linear and additive on the logistic scale.
To check whether our QoS factors confirm this assumption, we
fit the data into a generalized addictive model with smoothing
90.0 0.2 0.4 0.6 0.8 1.0
0.
0
0.
2
0.
4
0.
6
0.
8
1.
0
Predicted probability of premature departures
O
bs
er
ve
d 
pr
op
or
tio
n 
of
 p
re
m
at
ur
e 
de
pa
rtu
re
s
Proportion of premature departures
45° straight line through (0,0)
Fig. 9. Examination of the prediction accuracy of the developed model
C-index for our model, 0.87, indicates generally good discrim-
ination compared to a C-index of 0.5, which is equivalent to
a random guess.
To demonstrate the predictive power of our model, we
compare the observed proportion of premature departures and
the predicted probabilities of premature departures, as shown
in Fig. 9. The red crosses mark the proportion of premature
departure events in each group, which is along the 45◦ straight
line through the origin. The figure shows that the predicted
probabilities match the actual probability well, which implies
that the general prediction accuracy of our model is good.
E. Model Cross-Validation
Our model’s prediction accuracy might be due to the fact
that it actually captures the relationship between variables, or
it might be due to overfitting. To confirm that the model does
not overfit the data, we use cross-validation to further verify
its adequacy.
The cross-validation steps are as follows: 1) randomly
divide all the game sessions into two equal-sized groups:
a modeling group and a validation group; 2) fit a logistic
model with the modeling group; 3) predict whether premature
departure events have occurred for the validation group based
on the fitted model, and compute the prediction accuracy; and
4) repeat steps 1–3 one hundred times.
Fig. 10 shows the cross-validation results. The prediction
accuracy differs according to the length of the observation
time. The median correct rates are generally higher than 70%
for observation times shorter than 30 minutes, and higher than
80% for times shorter than 10 minutes. We find that the cor-
rect rates in the worst cases can be quite low in some scenarios,
e.g., with the observation time of 14 minutes. We attribute this
phenomenon to the high variability of game session times.
In addition to the quality of network conditions, there are
many exogenous factors that could affect players’ decisions
to continue with a game or leave it. For example, players
may be tied by quests on hand or social bonds, even when
network conditions are poor and screen updates are jerky. On
the other hand, they may leave a game because of prearranged
events, schedule constraints, or physical conditions. Although
the worst-case prediction performance in the model’s cross-
validation is not good, overall, the median correct rates are
40
50
60
70
80
90
10
0
Observation time (min)
Co
rre
ct
 ra
te
 (%
)
2 4 6 8 10 12 14 16 18 20 22 24 26 28 30
Fig. 10. Validation of model fitting with cross-validation
acceptably high, especially when the observation time is
shorter than 10 minutes. This demonstrates that the model’s
accuracy is not a consequence of data overfitting.
F. Model Interpretation
In Table II, we present the estimated coefficients along
with their standard errors and p-values for the fitted logistic
model. All variables are significant at a significance level of
0.1. The coefficients of the model can be interpreted by odds
ratios. Since the magnitude of a coefficient implies a change
in the response (in the logit scale) for a one-unit increase
of the covariate, the odds ratio between two risk vectors
can be obtained by exponentiating their difference in logit
form. For example, assume that two players experience similar
network conditions, except for delay jitter of 20 ms and 10 ms
respectively. The odds ratio of these two sessions can then be
computed by exp((0.02− 0.01)× 86.14) ≈ 2.4, where 86.14
is the coefficient of the covariate jitter. That is, the odds that
player A will leave the game prematurely are 2.4 times higher
than the odds that player B will leave prematurely (i.e., quit
the game within 10 minutes of joining).
VI. MODEL IMPLICATIONS AND APPLICATIONS
In this section, we first discuss the implications of our
analysis results for other game genres. We then present a
predictability analysis of players’ premature departure behav-
ior. Next, we investigate the relative impact of various types
of network impairment on user perception. We conclude the
section by discussing how our model can be used to improve
system design, in terms of server processing scheduling, de-
jitter buffer dimensioning, and the choice of transport proto-
cols.
A. Implications for Other Game Genres
MMORPGs are slow-paced compared to other popular
genres, such as first-person shooting games, which require
players to make sub-second decisions. In addition to a game’s
pace, there is a great deal of difference in how players control
the virtual characters. In fast-action games like shooting,
players instruct characters “what” actions to take and “how” to
11
• Packet loss is much less tolerable than packet delay.
Comparing the overall influence of network latency and
network loss, we obtain a ratio of 3:7. This result is not
consistent with an earlier study of Unreal Tournament
2003 [4], where the authors reported that network latency
< 200 ms and network loss < 6% have a statisti-
cally weak impact on user performance. We believe this
discrepancy is due to the different transport protocols
employed.
While most FPS games use UDP to exchange informa-
tion between game peers, many MMORPGs, including
ShenZhou Online, use TCP. Since TCP provides in-order
delivery and congestion control, a lost packet will cause
subsequent packets to be buffered until it is successfully
delivered, which reduces TCP’s congestion window. On
the other hand, packet loss does not incur any overhead
in UDP. Thus, in TCP-based games, packet loss incurs
additional packet delay and delay jitters, both of which
further degrade players’ gaming experience. We discuss
the effect of transport protocols in the next subsection.
• Client packet loss is slightly less tolerable than server
packet loss. We consider this to be reasonable, since
client packet loss delays the players’ commands to the
server, whereas server packet loss delays responses to
the commands as well as state updates. Current MMOGs
are mostly server-centric, so a player’s command is not
effective until it has been processed by the server. In
addition, to speed up the responses to players’ commands,
game clients may “cheat” by displaying the expected
states in response to players’ own commands on receipt
of players’ inputs before those inputs validated by the
server. Thus, server packet loss only impacts on the
consistency between players’ views of the virtual world,
not the responsiveness to players’ inputs. As a conse-
quence, client packet loss, which may delay the players’
commands, such as attacks and spell casting, is more
annoying than server packet loss, which just delays the
server’s responses and screen updates.
D. Impact of Transport Protocols
Although TCP is generally considered to be unsuitable for
interactive and real-time communications, many MMORPGs
adopt it as their underlying transport protocol. One reason
is that TCP is stream-oriented, so that the message stream
at the sender will be identical to the stream received at the
destination. This property allows game developers to focus
on game development, and leave issues related to network
transmission to TCP. However, TCP can degrade message
transmission efficiency because the stream-oriented feature
is not required for each game message exchange; hence the
protocol’s in-order and reliable delivery might lead to overkill
sometimes.
To quantify the degradation of game message transmission,
we estimate the in-order delivery overhead in terms of the
additional delay jitters incurred. We believe that in-order
delivery is not necessary for all game messages for the
following reasons:
60 80 100 120 140
0.
12
0.
16
0.
20
0.
24
(a) Prioritizing server processing
Target RTT for high−risk sessions (ms)
Es
tim
at
ed
 p
re
m
at
ur
e 
de
pa
rtu
re
 ra
tio
0.0 0.2 0.4 0.6 0.8 1.0
0.
22
0.
24
0.
26
0.
28
0.
30
(b) Using de−jitter buffers
Proportions of de−jitter buffer users
Es
tim
at
ed
 p
re
m
at
ur
e 
de
pa
rtu
re
 ra
tio
Fig. 13. Reducing the probability of players’ premature departure by
providing more resources for high-risk sessions to ensure shorter delays or
less delay jitters.
• Many game messages are accumulative in nature, i.e.,
subsequent messages will override earlier ones. For exam-
ple, state updates, especially position updates, are usually
accumulated so that a missing message does not matter,
unless it is the last in a series of updates. Thus, a series
of accumulated commands, except for the last, could be
delivered in an unreliable and out-of-order manner.
• Some game messages can be processed in any order.
For example, server packets are primarily comprised
of accumulated state updates, dialogue messages, and
responses to queries, such as information about virtual
items. With the exception of dialogue messages, server
packages can usually be processed in any order.
To assess how much additional delay jitters are induced by
enforced packet ordering, we assume an extreme case where
game packets can be processed in any order. For our traces,
the average delay jitters are estimated in two ways: 1) 30
ms if delays induced by retransmitted packets are considered;
or 2) 18 ms if delays induced by retransmitted packets are
not considered. Based on the premature departure prediction
model developed in Section V, we estimate that the odds
of premature departure would be reduced by a factor of
exp((0.030− 0.018)× 86.14) ≈ 2.8 if additional delay jitters
could be eliminated. This corresponds to a 12% decrease in
the premature departure probability (from 20% to 8%) with an
observation time of 30 minutes. In this way, we can estimate
the degree of improvement if we replace TCP with a more
lightweight protocol that only orders packets when necessary.
Also, the result explains why packet loss generates so much
more intolerance among MMORPG players than FPS players
(Section VI-C).
E. Improving the Gaming Experience
In Section IV, we showed that the player departure rate
generally decreases over time; that is, the longer players
remain in a game, the less likely they are to leave the game in
every instant. Furthermore, in Section VI-B, we showed that
the relative influence of network impairment decreases over
time, as extraneous factors, such as social bonds, gradually
outweigh the effect of network QoS on players’ decisions
to continue or leave a game. By combining both properties,
13
much indebted to the following people who helped us gather
the trace: Tsing-San Cheng, Lawrence Ho, Chen-Hsi Li, and
especially to Yen-Shuo Su, who between them made the
datasets available. This work was supported in part by National
Science Council of the Republic of China under the grants
NSC 96-2628-E-001-027 and NSC 97-2221-E-001-009.
REFERENCES
[1] Aetas, Inc., “Gametrics weekly Korea MMORPG
population survey,” 2007. [Online]. Available:
http://www.4gamer.net/specials/gametrics/gametrics.shtml
[2] S. Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee,
and S. Rangarajan, “Accuracy in dead-reckoning based
distributed multi-player games,” in Proceedings of ACM
SIGCOMM 2004 workshops on NetGames ’04. ACM
Press, 2004, pp. 161–165.
[3] G. Armitage, “An experimental estimation of latency
sensitivity in multiplayer Quake 3,” in 11th IEEE In-
ternational Conference on Networks (ICON), 2003.
[4] T. Beigbeder, R. Coughlan, C. Lusher, J. Plunkett,
E. Agu, and M. Claypool, “The effects of loss and latency
on user performance in Unreal Tournament 2003,” in
Proceedings of NetGames’04. ACM Press, 2004, pp.
144–151.
[5] F. Chang and W. chang Feng, “Modeling player session
times of on-line games,” in NetGames ’03: Proceedings
of the 2nd Workshop on Network and System Support for
Games. ACM Press, 2003, pp. 23–26.
[6] K.-T. Chen, P. Huang, and C.-L. Lei, “Game traffic anal-
ysis: An MMORPG perspective,” Computer Networks,
vol. 50, no. 16, pp. 3002–3023, 2006.
[7] ——, “How sensitive are online gamers to network
quality?” Communications of the ACM, vol. 49, no. 11,
pp. 34–38, Nov 2006.
[8] K.-T. Chen, P. Huang, G.-S. Wang, C.-Y. Huang, and C.-
L. Lei, “On the sensitivity of online game playing time to
network QoS,” in Proceedings of IEEE INFOCOM’06,
Barcelona, Spain, Apr. 2006.
[9] W. S. Cleveland, “LOWESS: a program for smoothing
scatterplots by robust locally weighted regression,” The
American Statistician, vol. 35, no. 54, 1981.
[10] D. R. Cox and E. J. Snell, Analysis of Binary Data,
2nd ed. London: Chapman and Hall, 1989.
[11] A. DeLea´n, P. Munson, and D. Rodbard, “Simultaneous
analysis of families of sigmoidal curves: application
to bioassay, radioligand assay, and physiological dose-
response curves,” Am J Physiol Endocrinol Metab, vol.
235, pp. 97–102, 1978.
[12] J. Egan, Signal Detection Theory and ROC Analysis.
New York: Academic Press, 1975.
[13] W. C. Feng, F. Chang, W. C. Feng, and J. Walpole,
“A traffic characterization of popular on-line games,”
IEEE/ACM Transactions on Networking, vol. 13, no. 3,
pp. 488–500, June 2005.
[14] R. A. Fisher, “On the interpretation of χ2 from contin-
gency tables, and the calculation of p,” Journal of the
Royal Statistical Society, vol. 85, pp. 87–94, 1922.
[15] T. J. Hastie and R. J. Tibshirani, Generalized Additive
Models. London: Chapman and Hall, 1990.
[16] T. Henderson, “Latency and user behaviour on a multi-
player game server,” in Proceedings of the Third Interna-
tional COST Workshop (NGC 2001). Springer-Verlag,
2001, pp. 1–13.
[17] T. Henderson and S. Bhatti, “Modelling user behaviour in
networked games,” in MULTIMEDIA ’01: Proceedings of
the Ninth ACM International Conference on Multimedia.
ACM Press, 2001, pp. 212–220.
[18] ——, “Networked games: a QoS-sensitive application for
QoS-insensitive users?” in RIPQoS’03: Proceedings of
the ACM SIGCOMM Workshop on Revisiting IP QoS.
ACM Press, 2003, pp. 141–147.
[19] Hosmer, S. L. Cessie, and Lemeshow, “A comparison
of goodness of fit tests for the logistic regression model,
statistics in medicine,” Statistics in Medicine, vol. 16, pp.
965–980, 1997.
[20] D. W. J. Hosmer and S. J. Lemeshow, Applied logistic
regression, 2nd ed. New York: Wiley, 2000.
[21] S. Ila, D. Mizerski, and D. Lam, “Comparing the effect
of habit in the online game play of australian and
indonesian gamers,” in Proceedings of the Australia and
New Zealand Marketing Association Conference, 2003.
[22] F. E. H. Jr., R. M. Califf, D. B. Pryor, K. L. Lee, , and
R. A. Rosati, “Evaluating the yield of medical tests,”
Journal of the American Medical Association, vol. 247,
no. 18, pp. 2543–2546, 1982.
[23] E. L. Kaplan and P. Meier, “Nonparametric estimation
from incomplete observations,” Journal of the American
Statistical Association, vol. 53, pp. 437–481, 1958.
[24] M. Kendall, “A new measure of rank correlation,”
Biometrika, vol. 30, pp. 81–93, 1938.
[25] J. Nichols and M. Claypool, “The effects of latency
on online madden NFL football,” in Proceedings of
NOSSDAV’04. ACM Press, 2004, pp. 146–151.
[26] T. P. Novak, D. L. Hoffman, and A. Duhachek, “The
influence of goal-directed and experiential activities on
online flow experiences,” Journal of Consumer Psychol-
ogy, vol. 13, no. 1, pp. 3–16, 2003.
[27] M. Oliveira and T. Henderson, “What online gamers
really think of the internet?” in Proceedings of
NetGames’03. ACM Press, 2003, pp. 185–193.
[28] L. Pantel and L. C. Wolf, “On the impact of delay on
real-time multiplayer games,” in Proceedings of NOSS-
DAV’02. ACM Press, 2002, pp. 23–29.
[29] ——, “On the suitability of dead reckoning schemes
for games,” in NETGAMES ’02: Proceedings of the 1st
workshop on Network and system support for games.
ACM Press, 2002, pp. 79–84.
[30] V. Paxson and M. Allman, “Computing
TCP’s Retransmission Timer,” RFC 2988 (Pro-
posed Standard), Nov. 2000. [Online]. Available:
http://www.ietf.org/rfc/rfc2988.txt
[31] V. Paxson and S. Floyd, “Wide area traffic: the failure
of Poisson modeling,” IEEE/ACM Transactions on Net-
working, vol. 3, no. 3, pp. 226–244, 1995.
[32] P. Quax, P. Monsieurs, W. Lamotte, D. D. Vleeschauwer,
Hindawi Publishing Corporation
EURASIP Journal on Advances in Signal Processing
Volume 2009, Article ID 797159, 22 pages
doi:10.1155/2009/797159
Research Article
Identifying MMORPG Bots: A Traffic Analysis Approach
Kuan-Ta Chen,1 Jhih-Wei Jiang,2 Polly Huang,3 Hao-Hua Chu,2
Chin-Laung Lei,3 and Wen-Chin Chen2
1 Institute of Information Science, Academia Sinica, Taipei 115, Taiwan
2Department of Computer Science and Information Engineering, National Taiwan University, Taipei 106, Taiwan
3Department of Electrical Engineering, National Taiwan University, Taipei 106, Taiwan
Correspondence should be addressed to Kuan-Ta Chen, ktchen@iis.sinica.edu.tw
Received 10 April 2008; Accepted 8 September 2008
Recommended by Rocky Chang
Massively multiplayer online role playing games (MMORPGs) have become extremely popular among network gamers. Despite
their success, one of MMORPG’s greatest challenges is the increasing use of game bots, that is, autoplaying game clients. The use of
game bots is considered unsportsmanlike and is therefore forbidden. To keep games in order, game police, played by actual human
players, often patrol game zones and question suspicious players. This practice, however, is labor-intensive and ineﬀective. To
address this problem, we analyze the traﬃc generated by human players versus game bots and propose general solutions to identify
game bots. Taking Ragnarok Online as our subject, we study the traﬃc generated by human players and game bots. We find that
their traﬃc is distinguishable by 1) the regularity in the release time of client commands, 2) the trend and magnitude of traﬃc
burstiness in multiple time scales, and 3) the sensitivity to diﬀerent network conditions. Based on these findings, we propose
four strategies and two ensemble schemes to identify bots. Finally, we discuss the robustness of the proposed methods against
countermeasures of bot developers, and consider a number of possible ways to manage the increasingly serious bot problem.
Copyright © 2009 Kuan-Ta Chen et al. This is an open access article distributed under the Creative Commons Attribution License,
which permits unrestricted use, distribution, and reproduction in any medium, provided the original work is properly cited.
1. Introduction
Massive multiplayer online role playing games (MMORPGs)
have become extremely popular among network gamers,
and now attract millions of users to play in an evolv-
ing virtual world simultaneously over the Internet. The
number of active player subscriptions doubled between
July 2004 and January 2006 to a 13-million player
base [1]. Despite their success, one of MMORPG’s
greatest challenges is how to maintain the subscription
base in the face of the increasing use of game bots
(http://en.wikipedia.org/wiki/MMORPG#Bots).
A game bot, usually game-specific, is an automated
program that can perform many tasks in place of gamers.
Since bots never get tired, bot users can improperly reap
rewards with less time investment than legitimate players.
As this undermines the delicate balance of the game world,
bots are usually forbidden in games. However, identifying
whether or not a character is controlled by a bot is
diﬃcult, since a bot does not necessarily exploit any bugs
or vulnerabilities of the game software; it just “plays” the
game in place of a human. Currently, bots must identified
manually by launching a dialogue with a suspect character,
as a bot cannot speak like a human. However, this method
leads to a significant administrative burden. In this paper,
we analyze the traﬃc generated by human players versus
game bots and propose general solutions to identify game
bots automatically. To the best of our knowledge, this is the
first work to investigate automatic, game-independent, bot
identification techniques by using network traﬃc analysis.
Taking Ragnarok Online (Ragnarok Online, http://iro
.ragnarokonline.com/), one of the most popular MMORPGs
in the world, as a case study, we analyze the traﬃc of
human players and mainstream game bots under diﬀerent
network settings. We find that traﬃc generated by bots
versus human players is distinguishable in various respects,
such as the regularity and patterns in client response times
(i.e., the release time of client commands relative to the
arrival time of the most recent server packet), the trend and
magnitude of traﬃc burstiness in multiple time scales, and
EURASIP Journal on Advances in Signal Processing 3
when the game is running; however, it cannot stop the
widespread of standalone bots, including the bot series we
study in this paper. The reason is obvious; anticheating
softwares are host-based, so they must be installed on
players’ PCs to be eﬀective. In contrast, standalone
bots can be executed without game clients; therefore,
anticheating tools cannot prevent game bots as they would
not normally be installed on PCs where standalone bots
are running. This is evidenced by the fact that game bots
may still be active in games protected by PunkBuster or
GameGuard, for example, Quake (PunkBuster) and Lineage
(http://boards.lineage2.com/showflat.php?Number=573737.)
(GameGuard).
3. Ragnarok Online and the Bots
The core features of most MMORPGs are more or less
standard, for example, training characters, obtaining better
equipment, and completing various quests, which usually
involve fighting with monsters. Characters gradually become
stronger and better equipped by gaining experience points
and by accumulating loot from combat. However, repeated
combat is time-consuming and can become somewhat
routine and boring; thus, some players seek to set up scripts
(also known as macros or bots) that can automatically
and repeatedly perform assigned tasks without human
involvement. Given that bots never get tired, bot users can
reap huge rewards without the time investment made by
other honest players.
From the view point of business operations, bots erode
the balance and order of the game world, as bot users can
monopolize scarce resources by unleashing the indefatigable
power of bots. Although companies try to prevent the use
of game bots, automatic bot detection mechanisms are not
currently available; thus, bot-controlled characters can only
be identified manually through human intelligence. That is,
game masters try to open online dialogues with suspicious
characters; then, the masters can decide if the suspicious
characters are actually bot-controlled or human-controlled
based on their responses. However, given millions of online
players, this method is very ineﬃcient and incurs a significant
administrative burden. The biggest drawback is that the
detection is intrusive, so it may oﬀend innocent players. As
the problem of players cheating with game bots becomes
more rampant and serious, we believe the demand for
automatic bot identification techniques for online games is
urgent.
We surveyed publicly-available game bots for Ragnarok
Online, and found that although more than a dozen bots
are available, most of them are derived from the well-known
Kore project (Kore, http://sourceforge.net/projects/kore/).
Kore is a console-based, platform-independent, and open-
source bot program written in Perl and C. It could be
described as the ancestor of Ragnarok Online bots, since
many popular bots, for example, KoreC, X-Kore, mod-
Kore, Solos Kore, wasu, Erok, iKore, and VisualKore, have
been developed from it. Se also found that a similar bot
program, DreamRO (DreamRO, http://www.game186.com/
SoftList/Catalog 76 SoftTime Desc 1.html) and its deriva-
tives, is very popular in China and Taiwan.
Both Kore and DreamRO are standalone bots, that is,
they can communicate directly with game servers without the
oﬃcial game clients. Their actions are script-based, covering
almost every action available in the game client. In addition,
they both allow users to give commands anytime, regardless
of the prearranged actions of the scripts, that is, the bots are
both script-based and interactive.
4. Trace Collection
To develop bot identification techniques based on traﬃc
patterns, we acquired a number of Ragnarok Online game
traces for both popular bot series and for human players.
For brevity, we use “players” to denote human players
hereafter. To make the trace collection tractable, we chose
a bot program to represent each series. KoreC, the Chinese
edition of Kore, was selected to represent the Kore series, and
DreamRO was chosen to represent the DreamRO series.
We collected a total of 19 game traces at the client
side, that is, the traﬃc monitor was attached to the same
LAN as the game clients. To ensure heterogeneity among
the limited number of traces, we intentionally incorporated
combinations of controllable factors into the trace collection.
From a networking perspective, both bot and player traces
contained fast and slow access links, and the network media
ranged from Fast Ethernet to ADSL. In terms of user
behavior, the human players were diverse in their choice of
characters and game playing proficiency; among the four
players, Gino and Kiya were experienced. Both of them had
played Ragnarok Online for more than one year, and their
characters were high-level (> level 60), well-equipped, and
highly-skilled. On the other hand, Kuan-Ta and Jhih-Wei
were newcomers to Ragnarok Online, and their characters
were low- to middle-level (level 5 and level 40, resp.) without
advanced skills or powerful weapons. The scripts we used for
the two bots are commonly available in the Ragnarok Online
community. Their actions are set to the most common
“kill, loot, and trade” cycles. In other words, at the start,
the bot will go to a selected area, where there are many
monsters, and proactively pursue and attack the nearest
monster. After killing a monster, the bot will take the loot,
and turn to another monster. The process will continue until
the backpack is full of loot. At that time, the bot will go
to a marketplace to sell the gathered loot, and then restart
the cycle. As in the human player case, we purposely ran
the bots with characters of diﬀerent proficiency levels and
professions.
In total, the collected game traces (The complete
game traces (in tcpdump format) are publicly avail-
able at http://mmnet.iis.sinica.edu.tw/content.html?key=ro.)
contain 3 million packets over 206 hours, as summarized in
Table 1. For brevity, we denote the four players asA, B,C, and
D, respectively, Kore as K, and DreamRO as R. Traces from
the same bot/player are coded by a unique digit following the
bot/player’s identifier. The period of a game trace indicates
the continuous gaming time. We asked the human players
not intentionally leave their characters idle during the game
EURASIP Journal on Advances in Signal Processing 5
21.510.50
A1
0
0.5
1
1.5
2
2.5
D
en
si
ty
(a) Packet interarrival time (sec)
21.510.50
D1
0
0.5
1
1.5
D
en
si
ty
(b) Packet interarrival time (sec)
21.510.50
Kore3
0
1
2
3
4
D
en
si
ty
(c) Packet interarrival time (sec)
21.510.50
DreamRO3
0
2
4
6
8
D
en
si
ty
(d) Packet interarrival time (sec)
Figure 1: Histogram of packet interarrival times.
the character and environment, for example, the current life
point of the character, the movement of nearby monsters,
and whether the last slash hits the enemy, bots often react
to server data packets by issuing new commands. For
example, to pursue a fleeing enemy, a bot would issue
movement commands continuously whenever it learns the
latest location of the enemy from the server data packets.
In the following, we analyze the traﬃc traces of game bots
and human players, and search for distinctive traﬃc patterns
exhibited by bots, but not by players, and vice versa. The
analysis of traﬃc patterns comprises three aspects. First, we
examine the timing of client commands relative to the arrival
time of the most recent server data packet. We then observe
the traﬃc burstiness of the packet arrival processes. Lastly,
we identify the particular patterns in human behavior caused
by sensitivity to network conditions, which, of course, game
bots do not possess.
5.1. Regularity in Client Traﬃc. Figure 1 shows the his-
tograms of client packet interarrival times shorter than 2
seconds. While player traces in the upper two plots show
randomness in packet interarrival times, the bot traces,
shown in the lower two plots, suggest the existence of a
timer triggering mechanism and the absence of randomness
that characterizes human actions. Specifically, Kore3 reveals
a periodic timer of 16 Hz, that is, most of the packet inter-
arrival times are multiples of 1/16 second, while DreamRO3
displays more regular timing, as most of the interpacket
times concentrate on certain values.
An empirical cumulative distribution function (CDF)
plot of packet interarrival times manifests the above state-
ments more clearly. In Figure 2, the CDF curves of player
traces, A1 and B2, increase smoothly, except for a sudden
rise around 0.6 seconds, which is a frequency component
inherent in game clients. We also provide the CDF curve of
an exponential random variable fitted to A1 by maximum
likelihood estimation (MLE). Though the exponential curve
does not fit the empirical CDF of A1 very closely, it can be
seen an approximation. On the other hand, the curves of
Kore1 and DreamRO3 show zigzag patterns, which strongly
EURASIP Journal on Advances in Signal Processing 7
100806040200
Packet interarrival times
0
0.5
1
1.5
2
2.5
In
te
ra
rr
iv
al
ti
m
e
(s
)
(a) Index
0.50.40.30.20.10
Power spectral density
0
0.0005
0.001
0.0015
0.002
Sp
ec
tr
al
de
n
si
ty
(b) Frequency (Hz)
Figure 4: (a) DreamRO3 exhibits regular packet interarrival times, such that, on average, one or two large packet gaps occur for every 10
packets. (b) Power spectral density of packet interarrival times.
that significant frequency components exist in game traﬃc
in either direction. Comparing the power spectrum of bot
traces with that of player traces, we find that bots induce
additional frequency components not present in player
traces, as shown in Figure 5. However, since the frequencies
in game traﬃc may be adjusted based on a character’s
attributes [12], for example, race, skill, or equipment, and
since we do not have complete knowledge of all possible
frequencies built into the design of Ragnarok Online, we
cannot decide whether a frequency component is inherent in
the game design or induced by a bot program. For this reason,
we do not simply use the frequency components of packet
arrival processes to identify game bots.
5.2. Command Timing. We begin by defining the “client
response time” as the time diﬀerence between a client packet’s
departure time and the most recent server packet’s arrival time,
if no other client packets intervene; otherwise, the metric
is undefined. Since we do not consider the corresponding
server response time, for brevity, we use “response time”
to denote client response time hereafter. By the above
definition, for each trace, we compute the response times for
those client packets that immediately follow a server packet.
As an initial assessment of whether the response times
of bot traces diﬀer significantly from those of player traces,
we plot the cumulative distribution functions of response
times of less than 0.1 seconds for four traces, as shown in
Figure 6. In the figure, except for an initial rise for A1, the
two player traces, A1 and B2, are similar in that their response
times of less than 0.1 seconds increase smoothly, that is, they
are almost uniformly distributed. On the other hand, bot
traces reveal diﬀerent patterns; the CDF of Kore1 is a zigzag-
type, that is, the response times are clustered around certain
intervals, while that of DreamRO2 has a strong mode with
very small response times. In the following, we discuss these
two properties of bot traces, that is, strong modes and zigzag
CDF, in more depth.
5.2.1. Quick Response. Among all game traces, only those of
DreamRO possess a considerable number of short response
times, for example, ≤ 10 milliseconds, which we call quick
responses. These responses are frequent enough and clustered
so that more than one peak is formed in the corresponding
histogram, as shown in Figure 7. Note that to distinguish
peaks clearly we take a logarithm of the response time. The
quick response manifests that DreamRO often issues client
commands immediately upon the receipt of server packets,
while Kore employs a more sophisticated command timing
mechanism.
5.2.2. Regularity in Response Times. Although quick res-
ponses are not present in the traces of Kore, it still relies
on server packet arrival events to schedule the release of
client commands. In Figure 8, which depicts histograms of
response times shorter than 0.5 seconds, both bot traces show
spiky densities, while player traces do not present any visible
patterns. These plots indicate that both Kore and DreamRO
schedule their client commands by an intentional delay time
following the receipt of a server packet. In the histogram, if
the bin width is small enough, the distance between spikes
will reflect the smallest scheduling unit of the command
departure times; according to our traces, the value is set
to 16 milliseconds for both Kore and DreamRO (equivalent
to 60 Hz). In Section 6.1, we will propose a bot detection
scheme based on the quick responses and the regularity in
response times identified above.
EURASIP Journal on Advances in Signal Processing 9
0.10.080.060.040.020
Client response time (s)
A1
B2
Kore1
DreamRO2
0
0.2
0.4
0.6
0.8
1
C
u
m
u
la
ti
ve
di
st
ri
bu
ti
on
fu
n
ct
io
n
Figure 6: CDF of client response times.
the same number of packets in each iteration, then traﬃc
burstiness will be lowest at the time scale equal to the amount
of time needed for each iteration of the main loop.
We use the index of dispersion for counts (IDCs) to
measure traﬃc burstiness in multiple time scales. The IDC
at time scale t is defined as the variance in the number of
arrivals in an interval of time t divided by the mean number
of arrivals in t [14], that is,
It = Var(Nt)
E(Nt)
, (2)
where Nt indicates the number of arrivals in an interval of
time t. Thus, the IDC is defined so that, for a Poisson process,
the value of the IDC is 1 for all t.
The IDCs for selected game traces, with the Poisson
rate regulation heuristic applied, are plotted in Figure 10.
We make two observations from the plots (1) bot traﬃc
is smoother than player traﬃc, but it is hard to define
a threshold for the burstiness magnitude, and (2) all bot
traces support our hypothesis that they have the lowest
burstiness at time scales around 0.5–2 seconds. In other
words, the burstiness initially exhibits a “falling trend” when
the time scales are small; however, after a certain time scale
with the lowest burstiness, a “rising trend” will appear.
In contrast, the burstiness trends of most player traces
increase monotonically in time scales >1 second. We exploit
these patterns to develop a bot identification scheme in
Section 6.2.
Another aspect we investigate is the magnitude of traﬃc
burstiness. Though we cannot judge how smooth a traﬃc
process is simply by the absolute value of IDC measures,
in our case, we can take the IDC of server packet arrivals
as the baseline, and obtain the relative smoothness of client
packet arrivals. The rationale behind the comparison is that,
even if the client traﬃc is very diﬀerent, game servers still
treat all clients equally, that is, the burstiness of server
traﬃc processes, especially in larger time scales, should be
similar regardless of the client type. For comparison, we first
normalize the server packet arrival process so that it has the
same average rate as client packet arrivals. Then, we define
the cross-point as the minimum time scale where the burstiness
of the client traﬃc is lower than that of the corresponding
server traﬃc to determine the relative smoothness of the
client traﬃc. Figure 11 shows the burstiness comparison for
selected traces; the dashed vertical line denotes the cross-
point. According to the plots, while both client types have
server traﬃc of similar burstiness trend and magnitude, bot
traces have cross-points at lower time scales (<1 second) than
player traces due to their relatively smoother client traﬃc. We
exploit this property further to identify bots in Section 6.3.
5.4. Sensitivity to Network Conditions. The last aspect we
consider is the subconscious human reactions to network
conditions embedded in traﬃc traces. This is considerably
diﬀerent to previous approaches. We find that human players
adapt to the game pace involuntarily. While a game client
relies on server packets, which convey the latest information
about other characters and the environment, to render its
screen, its update speed is inevitably aﬀected by network
conditions. In short, we conjecture that a user’s playing pace
will be aﬀected by the game update rate, which in turn is
influenced by the transit delay of server packets. To evaluate
how network delay aﬀects a player’s pace, samples of round
trip times (RTTs) as well as the average packet rate in the
next second following each RTT sample are computed. The
plots describing the relationship between average packet rates
and RTTs, where the latter are grouped in units of 10 ms, are
depicted in Figure 12.
First, we analyze the player traces shown in Figures 12(a)
and 12(b). The trend is clearly downward. This indicates
that human players unconsciously slow down their keyboard
and mouse actions to adapt to the slower game paces which
are caused by severely delayed server packets. Figures 12(c)
and 12(d) show that the same phenomenon does not occur
in bot traﬃc; both the Kore and DreamRO traces show an
upward trend in the relationship between the packet rate
and RTT. Since bots have their own pacing schemes (certain
frequencies dictated by timers), their pace is not aﬀected by
server packets like those belonging to human players. One
possible explanation of the bots’ upward trend (instead of no
trend) is that, for a server packet that arrives late, bots issue
more commands, which are accumulated before the arrival
of that server packet.
The dashed vertical line on the graph denotes the median
of the RTT samples. We find that our traces conform to the
above observations for RTT samples smaller than the median
RTT. One explanation is that higher RTTs are spread more
diversely so that the number of samples in each group is not
large enough to provide a robust statistic. Another possibility
is that higher RTT samples are related to possible packet loss
and retransmission, which could shrink the size of the TCP
congestion window size. This in turn regulates the maximum
packet rate. For these reasons, we restrict our analysis to
RTT samples lower than the median. The pacing property
of human players will be further exploited in Section 6.4 as a
means of distinguishing bots from human players.
EURASIP Journal on Advances in Signal Processing 11
0.50.40.30.20.10
A2
0
1
2
3
4
5
6
D
en
si
ty
(a) Client response time (sec)
0.50.40.30.20.10
D1
0
2
4
6
8
D
en
si
ty
(b) Client response time (sec)
0.50.40.30.20.10
Kore3
0
5
10
15
20
25
D
en
si
ty
(c) Client response time (sec)
0.50.40.30.20.10
DreamRO3
0
5
10
15
20
25
D
en
si
ty
(d) Client response time (sec)
Figure 8: Histogram of client response times shorter than 0.5 seconds.
to the sum of the ordinates. Fuller [18] proposed an
equivalent statistic, namely, the ratio of the largest ordinate
to the average of the ordinates. While the null hypothesis is
that the data consists of white noise, [19, Section 6.8] suggests
that, even if the Gaussian assumption is not satisfied, the
theory should continue to provide a useful approximation.
Suppose I1, I2, . . . , Im are periodogram ordinates; then, by
the null hypothesis, I1, I2, . . . , Im will be independent and
exponentially distributed with mean σ2; that is,
F
(
I j
σ2
)
= 1− e−x, x ≥ 0, j = 1, 2, . . . ,m, (4)
where F(x) denotes the cumulative distribution function of
x.
Let Xm = max(I1, I2, . . . , Im), Ym =
∑m
i=1Ii, and let Fuller’s
test statistic be defined as ξm = Xm/(Ym/m). The significance
value for Fuller’s test is obtained by
Pr
(
ξm ≤ ξ
) ≈ exp (−me−ξ). (5)
Using this method, we test the regularity in response times.
We consider that a trace corresponds to a bot if Fuller’s
statistic is significant at the 0.01 level.
The identification outcome, computed with a segment
size of 2000 (as shown on the box-and-whisker plot in
Figure 14(b)) indicates that the result is correct in most cases,
although there are some misjudged cases.
6.2. Trend of Traﬃc Burstiness. We now turn to the second
identification strategy. In this scheme, we use the property
that bot traﬃc will exhibit the lowest burstiness at a time
scale approximately equal to the iteration time of its main
loop (cf. Section 5.3).
To check whether the burstiness initially exhibits a falling
trend followed by a rising trend, we use the Mann-Kendall
correlation test [20] to detect the trend of a pair of series.
The nonparametric Mann-Kendall test is expected to be
robust to outliers because its statistics are based on the ranks
EURASIP Journal on Advances in Signal Processing 13
1001010.1
Time scale (s)
A1
Kore1
Kore3
Kore5
−0.4
−0.2
0
0.2
0.4
0.6
lo
g 1
0
(I
D
C
)
(a)
1001010.1
Time scale (s)
B2
C1
DreamRO2
DreamRO6
−0.2
0
0.2
0.4
0.6
0.8
lo
g 1
0
(I
D
C
)
(b)
Figure 10: IDC plots for diﬀerent traces. Player traces are represented by filled symbols; bot traces are represented by unfilled symbols. Note
the trend of IDC for bot traces has a “dip” around 1 second.
10000 packets. From the viewpoint of business operations,
a bot detection solution should minimize the false positive
rate, while yielding a high correct decision rate. This is
because misjudging a human player as a bot would annoy
legitimate players, but misjudging a bot (as a human player)
should be relatively acceptable. By this rule, the burstiness
magnitude method is good, since it always achieves low false
positive rates (< 5%), and yields a moderate correct decision
rate (≈ 75%). Although the pacing method does not perform
well, it is still proposed because of its unique relation to
human behavior.
In practice, we can detect game bots based on an
integrated approach as the ensemble learning approach in
the machine learning field, that is, by applying multiple
schemes simultaneously and combining their results accord-
ing to desired preference. For example, if a conservative
judgement is preferred, a traﬃc stream would only be
deemed to correspond to a game bot if all schemes agree
with that decision. By this reasoning, we propose two
integrated schemes, a conservative approach and a progressive
approach. Combining the command timing and burstiness
trend methods, the conservative approach is achieved by a
logical “AND” operation and the progressive approach by an
“OR” operation. This corresponds to combining two indi-
vidual classifiers in parallel, using a static and nontrainable
combiner with an ensemble learning terminology.
The performance of these integrated classifiers is rather
good in terms of reducing the occurrence of certain kinds
of false alarm, as illustrated in Figure 19. The conservative
approach reduces the false positive rate to zero and achieves
a 90% correct decision rate, given an input size of 10000
packets. Meanwhile, the progressive approach produces a
false negative rate of less than 1% and achieves a 95% correct
decision rate, given an input size of 2000 packets.
8. Discussion
In this section, we first discuss the generality of our proposed
schemes, that is, whether they can be generalized to other bot
series designed for Ragnarok Online or other games, without
considering counter-attacks. We then evaluate the robustness
of the schemes under the presence of counter-strategies
from bot developers. Finally, we consider the issues related
to server-side deployment and how to further improve the
detection accuracy with reactive strategies.
8.1. Generality of Proposed Detection Strategies. As bots are
not actually “watching” screens, they perceive the envi-
ronment by analyzing the information conveyed by server
packets. Thus, the design naturally leads to the situation that,
whenever a bot is aware of a change in the game world, it
will react by sending commands back to the server. When
a succession of commands, rather than a single command,
needs to be sent, to avoid overwhelming the network and
the server, some pacing mechanism that spreads the release
time of the commands would be used. By this reasoning,
we argue that the regularity in client response times is not
unique to the particular bots we studied, but commonly
exists in MMORPG bots. In other words, the command
EURASIP Journal on Advances in Signal Processing 15
0.140.120.10.080.060.04
RTT (s)
1.3
1.5
1.7
1.9
Pa
ck
et
ra
te
(p
kt
/s
)
Median RTT
B4
(a)
0.20.180.160.140.120.1
RTT (s)
0.8
1
1.2
1.4
1.6
Pa
ck
et
ra
te
(p
kt
/s
)
Median RTT
C1
(b)
0.080.060.040.02
RTT (s)
0.4
0.5
0.6
0.7
0.8
Pa
ck
et
ra
te
(p
kt
/s
)
Median RTT
Kore4
(c)
0.120.10.080.060.040.02
RTT (s)
1.85
1.95
2.05
2.15
Pa
ck
et
ra
te
(p
kt
/s
)
Median RTT
DreamRO5
(d)
Figure 12: Average packet rates versus round trip times plot. The figures exhibit a downward trend for player traces, and an upward trend
for bot traces.
their robustness under counter-attacks from bot developers.
Since our strategies use packet timestamps as the only
input, an obvious counter strategy would be to add random
delays to the release time of client commands. Because the
command timing scheme relies on the regularity of bot
behavior, it is inevitable that random delays would make less
eﬀective. However, we argue that the schemes based on traﬃc
burstiness and human reaction to network conditions are
resistant to such attacks.
The burstiness trend scheme is immune to random-delay
attacks because bots must always take actions based on the
up-to-the-minute information that is sent from game servers
periodically. Adding random delay to the client response
time would not aﬀect the regularity unless the added delay is
longer than the status update intervals by orders of magnitude
or it is heavy-tailed. However, adding such long delays would
make the bots less threatening, as we explain in the next
subsection (see Section 8.3).
We demonstrate this robustness property by simulations.
Using the Kore1 trace as an example, we postpone the release
of each command by random delays drawn from uniform
and exponential distributions, respectively. The IDCs of the
original packet arrival process and those of the intentionally-
delayed versions are shown in Figure 20. It is clear that
random delays do not remove the “dip” from the burstiness
trend; they only mitigate the extent of or change the location
of the dip. The figure also shows that the burstiness magnitude
scheme is not only resistant to simple random-delay attacks;
it is also more eﬀective in terms of detection capability
because the burstiness of randomly-delayed traﬃc is even
lower than the original.
Moreover, random delays do not have any eﬀect on
the pacing scheme if they are independent and identically-
distributed. In this case, delays merely increase the variance
of the command rates, but they do not change the average
command rates.
EURASIP Journal on Advances in Signal Processing 17
r6r5r4r3r2r1k5k4k3k2k1d1c1b4b3b2b1a2a1
Multimodality test for DreamRO bots
0
0.2
0.4
0.6
0.8
1
R
at
io
of
be
in
g
ju
dg
ed
as
D
re
am
R
O
bo
t
(a) Trace
r6r5r4r3r2r1k5k4k3k2k1d1c1b4b3b2b1a2a1
Regularity test
0
0.2
0.4
0.6
0.8
1
R
at
io
of
be
in
g
ju
dg
ed
as
a
bo
t
(b) Trace
Figure 14: Bot identification results using the command timing
method which comprises the multimodality test and the regularity
test.
r6r5r4r3r2r1k5k4k3k2k1d1c1b4b3b2b1a2a1
Trace
0
0.2
0.4
0.6
0.8
1
R
at
io
of
be
in
g
ju
dg
ed
as
a
bo
t
Figure 15: Bot identification results using the burstiness trend
method.
can fool detection schemes by incorporating heavy-tailed
ON/OFF activities, the bots will pose a much smaller threat
to the balance of the game world.
8.3.2. Independent Command Release Time. With this attack,
bots have to issue commands according to a schedule that
is independent of the server packet arrival time. This attack
would make the burstiness trend scheme ineﬀective, as the
client traﬃc no longer contains the regularity inherited from
server traﬃc. As shown in Figure 21, the Exp(1) and Pareto
series simulate the eﬀect of this counter-attack, where the
client packet release time is completely decided by the value
drawn from an exponential distribution (with an average of 1
second) and a Pareto distribution (with the shape parameter
r6r5r4r3r2r1k5k4k3k2k1d1c1b4b3b2b1a2a1
Trace
Threshold
0
20
40
60
80
100
C
ro
ss
ti
m
e
sc
al
e
(s
)
Figure 16: Bot identification results using the burstiness magnitude
method.
r6r5r4r3r2r1k5k4k3k2k1d1c1b4b3b2b1a2a1
Trace
0
0.2
0.4
0.6
0.8
1
R
at
io
of
be
in
g
ju
dg
ed
as
a
bo
t
Figure 17: Bot identification results using the pacing method.
1.8). Under this attack the “dip” eﬀect may completely
disappear so that the burstiness trend scheme would be now
unable to diﬀerentiate bots from human players.
Weakness of this Counter-Attack. If a bot only sends out
packets when one or more commands are ready, the client
packet departure time would correlate with server packet
arrival time, as bot commands are decided based on the up-
to-date game states conveyed by server packets.
Thus, to make the client packet departure time com-
pletely independent of server packet arrivals, a bot should
decide when to send out packets by a diﬀerent schedule.
Whenever the scheduled timer is triggered, the bot must issue
a command no matter whether the command is necessary or
not. Consequently, there must be some cases where the bot
is not ready to issue any new commands, but it must send
out some because new game states have not been received
or processed yet, or there is nothing else to do at that point.
Hence, the bot would have to perform certain actions that
are not unnecessary, such as moving around or making
an insignificant gesture. In such cases, bots that perform
meaningfulness actions would be detected more easily by
higher-level bot detection schemes equipped with knowledge
about game semantics.
8.3.3. Intentional Packet Pacing. This attack intentionally
adapts the packet sending rate to the measured network
EURASIP Journal on Advances in Signal Processing 19
×103
2010521
Conservative
Correct rate
False positive rate
False negative rate
0
0.2
0.4
0.6
0.8
1
R
at
e
(a) Client packet count
×103
2010521
Progressive
Correct rate
False positive rate
False negative rate
0
0.2
0.4
0.6
0.8
1
R
at
e
(b) Client packet count
Figure 19: Evaluation results for the integrated schemes with diﬀerent input size.
1005010510.50.1
Time scale (s)
Original
Uniform(0, 1)
Uniform(0, 5)
Exp(1)
Exp(5)
−0.4
−0.2
0
0.2
0.4
0.6
0.8
lo
g 1
0
(I
D
C
)
Figure 20: The IDC of the original packet arrival process in Kore1
and those of the intentionally-delayed versions.
Coincidentally, the packet timestamps collected at the
server side can be seen a random-delay-augmented version
of the packet timestamps collected at the client side, where
the random delays are caused by queueing fluctuations along
the network path from the client to the server. Furthermore,
the queueing variations of a typical Internet path is much less
than one second in most cases, so the added random delay
is considerably less than the time scales we are concerned
about. Therefore, we can directly apply the discussion in
the preceding section (Section 8.2) here. That is, although
the command timing scheme would be made ineﬀective by
1005010510.50.1
Time scale (s)
Original
Delayed Pareto
Exp(1)
Pareto
−0.2
0
0.2
0.4
0.6
0.8
1
lo
g 1
0
(I
D
C
)
Figure 21: The IDC of the original packet arrival process in Kore1
and those of the versions under sophisticated counter-attacks.
random delays, the strategies based on traﬃc burstiness and
users’ sensitivity to network conditions will continue to be
eﬀective when they are deployed on the game servers.
8.5. Reactive Identification. In this paper, all the bot detection
strategies introduced so far are purely passive, that is, the
schemes only make decisions based on observation of the
packets flowing from a game client to a server and vice versa.
We argue that the schemes can be extended to be reactive to
improve the eﬃciency and correctness of the decisions.
For example, in the pacing scheme, we determine
whether a traﬃc stream belongs to a bot by its adaptation the
EURASIP Journal on Advances in Signal Processing 21
necessary, and (5) they frequently exchange items or virtual
currency with other characters in the same group.
We believe that a group of characters with all the above
characteristics is probably controlled by game bots. This
scheme can serve as an eﬃcient way to identify suspected
gold farmers. They can then be examined in more detail with
more accurate identification schemes.
9.4. Collective Decisions. As game bots tend to monopolize
resources in a game and break the balance of the game
world, most legitimate players would be happy if bots could
be eliminated from games completely. Being overwhelmed
by users’ complaints, the most common strategy currently
adopted by game companies is that, whenever a character
is reported as a bot, a game master must take some time
to follow and observe the suspect, until he/she can judge
whether the report is factual or not. However, this method
is very ineﬃcient as it takes a great deal of time to manually
identify whether a character is controlled by a program or
a human, and the number of game masters is also limited.
In addition, more advanced bots may temporarily leave the
game when they detect the presence of game masters around
their characters, and return later.
The strategy we propose relies on users’ reports to decide
whether a character is a game bot. The rationale is that
legitimate players usually have strong incentives to report
bot use. We argue that if user reports can be appropriately
aggregated, they would form a powerful weapon against bots.
It would be not diﬃcult to design a mechanism that allows
a player to report a bot-controlled character, or, conversely,
a witness of a human-controlled character. However, such
mechanisms might have the following problems [27].
(1) Misjudgement: players may mistake a normal player
for a bot, or vice versa.
(2) Ballot stuﬃng: a bot owner may collude with other
bot owners to lodge fake reports in order to avoid
detection by the system.
(3) Bad mouthing: a human player might be targeted by
a group of players who falsely accuse him/her of being
a bot owner.
The main challenge of this strategy is how to detect incorrect
and false reports. Even though individual reports might be
intentionally or unintentionally incorrect, if incorrect ones
could be detected and removed automatically, we could
determine whether a character is bot-controlled with the
help of the game’s participants.
9.5. Honey Pots. While CAPTCHA tests [11] might be the
only sure way to distinguish between human beings and
computer programs, forcing players to conduct such tests
is not appropriate in many games, since the tests inevitably
interrupt the flow of game play. We consider that honey
pots, which are also be based on human intelligence like
CAPTCHA but they are less intrusive, would be more
appropriate for detecting game bots.
For example, the game designer may put a special-
purpose monster in a game. The monster would be exactly
like the other monsters, except that it has a banner “Do not
attack me unless you are a bot!!” above its head, and the
banner text is distorted so that it is not easily recognized by
optical character recognition (OCR) techniques. In this way,
if a player keeps slashing the monster, we would know that
the player is likely a bot program. Even though the honey
pot mechanism should be very eﬀective in capturing bots,
a player may still attack the honey-pot monster by mistake
or unintentionally ignore the warning message. Hence, it
would be better to use this strategy in cooperation with other
schemes to derive more accurate decisions about bot use.
10. Conclusion
Automatic game bot identification is a new and interesting
topic that involves networking, artificial intelligence, psy-
chology, human-computer interaction, social networking,
and game design. In this paper, we have addressed the
game bot problem and proposed a number of methods
that identify game bots automatically using a traﬃc analysis
approach. Taking Ragnarok Online as a case study, we
obtained and analyzed packet traces for human players and
mainstream game bots under diﬀerent network settings.
We have shown that the traﬃc corresponding to bots and
human players is distinguishable in various respects, such
as the regularity in client response times, the trend and
magnitude of traﬃc burstiness in multiple time scales, and
user sensitivity to network conditions.
Based on the traﬃc patterns identified, we have proposed
four general decision strategies and two integrated schemes
for bot detection. For our collected traces, the conservative
approach of our proposed integrated schemes reduces the
false positive rate to zero and produces a 90% correct
decision rate, given an input size of 10000 packets. The
progressive approach, on the other hand, yields a false
negative rate of less than 1% and achieves a 95% correct
decision rate, given an input size of 2000 packets. We have
shown that the proposed methods are generalizable to other
bot series and games and robust against simple random-
delay counter-measures from bot developers. In addition, we
have discussed the issues regarding deployment and reactive
detection of bots.
Due to the highly profitable nature of game bots, bot
developers will try anything to improve their programs so
that they are undetectable by any bot identification algo-
rithm. The pure traﬃc-based detection schemes we propose
are generalizable because they are independent of game
design and semantics; however, they might be deceived by
sophisticated counter-measures that mimic human gaming
activities. This situation is not completely avoidable because
game bots can always imitate human activities at the network
level.
Given the intrinsic diﬃculty of the bot identification
problem, that is, telling computers and humans passively
while human behavior can be highly heterogeneous and
variable, we believe that the most eﬀective bot detection
scheme should be multimodal rather than a single mode
approach. To this end, we have explored a number of
promising strategies (1) exploit bots’ inability to imitate
International Journal of Digital Multimedia Broadcasting
Special Issue on
Software-Defined Radio and Broadcasting
Call for Papers
The wireless industry is experiencing an unprecedented in-
crease in number and sophistication of wireless communica-
tion and broadcasting systems. As mobile devices are minia-
turizing, more functionalities are required every time a new
device emerges. Multiple concurrent communication proto-
cols, digital TV, multimedia broadcasting, and navigation all
require their own antenna, radio, and baseband processing.
This convergence impacts both the cost and the size of the
device.
Software-defined radios (SDRs), multiband antennas,
reconfigurable radios, and cognitive radios oﬀer a pro-
grammable and dynamically reconfigurable method of
reusing hardware to implement frequency agile communi-
cations and broadcasting systems. An SDR-based device can
dynamically change protocols and update communications
or broadcasting systems over the air as a service provider
allows. Digital signal processors (DSPs) are now capable of
executing many billions of operations per second at power
eﬃciency levels appropriate for handset deployment. This
has brought SDR-based communication and broadcasting to
prominence.
Promoting state-of-the-art contributions from diﬀerent
research and industrial fields directly involved or applicable
in solving the issues and obstacles of frequency agile SDRs is
the scope of this special issue. Topics of interest include (but
are not limited to):
• SDR with multiband and smart antennas
• Theory and algorithm for SDR and software-defined
broadcasting (SDB)
• Reconfigurable RF
• Reconfigurable baseband signal processing
• Digital signal processors (DSPs) for SDR and SDB
• System-on-chip SDR implementations and complex-
ity analyses
• FPGA fabrics for SDR
• Radio systems design
• SDR applications to communication, IPTV and digital
TV
• Processor architectures for SDR
• Compiler technology and development tools for SDR
• Communications system implementations for SDR
• Spectrum sensing and spectrum management
• Cognitive radio for broadcasting and communication
• Standardization on SDR, SDB and cognitive radio
• Testbeds and hardware prototypes
Authors should follow the International Journal of Digi-
tal Multimedia Broadcasting manuscript format described
at the journal site http://www.hindawi.com/journals/ijdmb/.
Prospective authors should submit an electronic copy of their
complete manuscript through the journal Manuscript Track-
ing System at http://mts.hindawi.com/ according to the fol-
lowing timetable:
Manuscript Due September 1, 2008
First Round of Reviews December 1, 2008
Publication Date March 1, 2009
Guest Editors
Daniel Iancu, Sandbridge Technologies, Inc., Tarrytown,
NY 10591, USA; diancu@sandbridgetech.com
John Glossner, Sandbridge Technologies, Inc., Tarrytown,
NY 10591, USA; jglossner@sandbridgetech.com
Peter Farkas, University of Slovakia, Bratislava, Slovakia;
farkas@ktl.elf.stuba.sk
Mihai Sima, University of Victoria, Victoria, BC, Canada
V8W 2Y2; msima@ece.uvic.ca
Michael McGuire, University of Victoria, Victoria, BC,
Canada V8W 2Y2; mmcguire@ece.uvic.ca
Hindawi Publishing Corporation
http://www.hindawi.com
where the parties accuse one or more innocent users in order
to take revenge or to gain unfair advantages.
In this paper, we propose an automation scheme to deal with
collusion attacks in social moderation systems. Our solution is
a community-based scheme that analyzes the relations between
the accusing users and accused users. Then, based on the
derived information, the scheme infers whether the accusa-
tions are fair or malicious; that is, it distinguishes users that
genuinely misbehave from victims of collusion attacks. We
use simulations to evaluate the performance of our proposed
scheme. The results show that, in terms of detecting users who
misbehave, the count-based and community-based schemes
can achieve accuracy rates higher than 90%. However, our
scheme is much more robust to collusion attacks in that at least
90% collusion victims can be saved from collusion attacks. In
contrast, more than 50% of collusion victims are incorrectly
identified by count-based scheme in most scenarios.
II. RELATED WORK
Collusion detection is one of the most widely studied
security problems in trust-based systems, such as reputation
systems and recommendation systems, which summarize the
ratings of individuals and items respectively. In most scenarios,
the ratings given by people are subjective and unverifiable;
therefore the question Are the raters honest? is an important
and challenging problem in this field, as discussed in [3, 7,
10, 11].
In trust-based systems, unfair raters may not cause any harm
to the system justice if they act alone; however, they can easily
cause harm (i.e., incorrect overall ratings) if they collude with
other like-minded raters and compile unfair ratings together.
Cosley et al [3] considered the shill problem in e-commerce
recommender systems. To resolve the shilling problem, Del-
larocas [4] suggested using controlled anonymity and cluster
filtering to eliminate the effects of unfair ratings and discrim-
ination. O’Mahony et al [10] conducted empirical studies of
the robustness of the KNN user-user algorithm by injecting
shilling users into the system, and proved that the algorithm
is robust to shilling attacks.
III. COMMUNITY-BASED SCHEME
In this section, we present our community-based scheme for
automating social moderation. The motivation for this scheme
is that, for collusion attacks, the number of accusations made
against a specific user is no longer a reliable indicator of
whether he/she has misbehaved, as some of the accusations
may be incorrect intentionally or maliciously. Instead, we must
first determine which accusations are fair which ones are made
by mistake, and which ones are motivated by malicious intent
before we can conclude that the targeted users have definitely
misbehaved.
A. Accusing graph
Let A denote the set of identities of accusing users, and
let B denote the set of identities of accused users. For every
accusing user a ∈ A, and every accused user b ∈ B, exactly
one of the following is true: 1) a has accused b; or 2) a has not
accused b. We define an accusation relation Rα as follows. Let
a ∈ A and b ∈ B. We say that (a, b) ∈ Rα if a has accused
b. By an accusation relation Rα, we mean a subset of the
Cartesian product A×B, which is the set of all ordered pairs
(a, b), where a ∈ A and b ∈ B.
In addition, we define an accusing graph to describe the
accusation relations between all users in a social moderation
system. Assuming a system comprises m users, denoted by
U = {u1, u2, . . . , um}, we define that each user has two
identities. A = {a1, a2, . . . , am} is the accusing identity set of
users, and B = {b1, b2, . . . , bm} is the accused identity set of
users. If a user u1 accuses a user u2, then (a1, b2) ∈ Rα;
however if u1 does not accuse u3, then (a1, b3) /∈ Rα.
Therefore, an accusing graph G(A + B,Rα) is a complete
representation of the user accusation relations in a social
moderation system.
Accusing Graph. An accusing graph G(A + B,Rα) is a
graph in which the nodes can be divided into two disjoint sets
A, the identities of accusing users, and B, the identities of
accused users, such that every accusing edge connects a node
in A to a node in B, and each edge (a, b) belongs to the
accusation relation Rα.
B. Accusing Community
In the social network area, a community is a subgraph in
which the node-node interconnections are dense, and the edges
between the nodes in different communities are much less
dense [6]. We call the communities in an accusing graph
accusing communities. By definition, users tend to accuse
other users in the same community more intensively than
users in other communities. In other words, users in the same
community tend to share similar accusing tendencies, which
indicates that the targets of those users overlap significantly.
Thus, the accusing community can be seen as a way of
categorizing users into different clusters according to their
accusing tendencies.
C. Community Partitioning
To partition an accusing graph into different accus-
ing communities (called communities hereafter), we adopt
the Girvan-Newman algorithm [9]. The algorithm progres-
sively removes the edges with high in-betweenness values.
By doing so, the algorithm gradually divides the graph
into several components to reveal the underlying commu-
nity structure of the network. For example, in the ac-
cusing graph G(X + Y,Rα) shown on the left-hand side
of Figure 1, X = {A,B,C,D,E, F,G,H, I, J,K}, Y =
{a, b, c, d, e, f, i, j, k}, and Rα = {(A, b), (D, b), (D, c),
(F, c), (G, e), (H, c), (I, b), (I, g), (I, h), (J, g), (J, h),
(K, g), (K,h)}. Through the Girvan-Newman algorithm, we
can obtain three communities, namely G1, G2, and G3, by
removing the edge with the highest in-betweenness value,
(I, b), as shown on the right-hand side of the figure.
D. Inter-community Edge
We classify users in a social moderation system into two
categories: misbehaving users and innocent users. The latter
can be further classified into three sub-categories, namely,
victims, who are accused by purposeful colluders; unfortunate
users, who are accused due to misjudgment or by accident;
and law-abiding users, who are not accused by others at all.
Next, we present three properties of the edges between dif-
ferent accusing communities, which we call inter-community
edges.
Variable Definition
Number of users
Number of rounds
Number of victims
The probability of honest users accusing misbehaving users
c The probability of colluders accusing victims
error The probability of users making an accusation by mistake
Number of misbehaving users
Number of colluders
addition, we then study the effects of the following parameters
on the results: the total number of users, the number of
misbehaving users, the number of colluders, and different
colluder formations.
A. Simulation Setup
In our simulation, we assume there are N users in the
system, of which a random set of T users misbehave and
another random set C are colluders. Note that |C| is always
greater than 3, and the number of victims, V , is always smaller
than |C|.
In our simulation, the following rules apply to users.
1) An honest user only accuse misbehaving users.
2) A colluder accuses victims.
3) A user has a probability, Perror, of making an accusation
by mistake. When this occurs, an honest user will accuse
an innocent user, or a colluder will accuse a user other
than the collusion victims specified.
Our simulation is round-based, and we apply the proposed
automation moderation scheme after the simulation runs for
R rounds. In each round, each honest user has a probability
P of accusing a misbehaving user; similarly, a colluder has
a probability Pc of accusing a victim. As colluders have a
stronger motivation to participate in the social moderation
scheme, we set P = 10%, Pc = 20%, and Perror = 5%
as default values. When summarizing the accusation relation-
ships, duplicate accusations made by a user about the same
target are removed; hence, there is at most one edge between
any two nodes in an accusing graph. The parameters used our
simulations are listed in Table 1.
B. Implementation of the Count-based Scheme
We implement the count-based scheme as a baseline
method. We also apply the k-means algorithm to partition all
users into two clusters based on the number of accusations
made against each user, and label users in the cluster with the
higher average accusation count as misbehaving users.
C. Performance Metrics
We use two performance metrics to quantify the accuracy
and robustness of the social moderation automation schemes,
namely, the correctness of summarization, and the collusion
resistance. The correctness of summarization (correctness for
short) is defined as
correctness =
| detected misbehaviors ∩ actual misbehaviors |
| detected misbehaviors ∪ actual misbehaviors | .
Fig. 2. Correctness with different number of users and ratio of misbehaving
users
Ͳ


Ͳ
Fig. 3. Collusion resistance with different numbers of users and misbehaving
users.
Meanwhile, the collusion resistance index measures whether
an automation scheme can prevent collusion attacks. It is
defined as follows:
collusion resistance = 1− | misidentified victims || all victims | .
D. Effect of User Population
To assess the effects of the number of users, the number
of misbehaving users, and the number of colluders in the
compared automation schemes, we set the total user population
between 300 and 1000, the ratio of misbehaving users between
2% and 20%, the ratio of colluders between 4% and 24%.
We then observed the performance of the count-based and
community-based schemes under each scenario.
As shown in Fig. 2, both schemes achieve higher than 90%
accuracy regardless of the total number of users and the ratio
of misbehaving users. However, the collusion resistance of
the count-based scheme decreases dramatically to less than
63% when the ratio of misbehaving users is higher than 10%,
as shown in Fig 3. This result implies that the count-based
scheme is not robust to collusion attacks, especially when
the number of misbehaving users is large. As the number
of misbehaving users increases, the number of accusations
made about each misbehaving user declines and becomes
comparable to that made about collusion victims. Thus, the
count-based scheme fails to distinguish between misbehaving
users and victims in such scenarios.
Similarly, as the number of colluders increases, the num-
ber of accusations made about collusion victims grows and
becomes comparable to that of actual misbehaving users.
Therefore, it is difficult for the count-based scheme to dis-
tinguish between honest accusations and accusations based on
Comparison of User Trajectories Based on 
Coordinate Data and State Transitions  
 
Junichi Oda and Ruck Thawonmas 
Intelligent Computer Entertainment Lab,  
ISE, Ritsumeikan University 
Kusatsu, Shiga, 525-8577, Japan 
ruck@ci.ritsumei.ac.jp 
Kuan-Ta Chen  
Multimedia Networking and Systems Lab 
IIS, Academia Sinica 
Taipei 115, Taiwan 
swc@iis.sinica.edu.tw 
 
 
Abstract—At present, one can acquire a great deal of trajectory 
data as positioning technology has prevailed and become 
sophisticated. In accordance with this fact, data mining 
technology for extracting important information and knowledge 
from trajectory data is gaining recognition. Clustering of 
trajectories and giving meanings to movements are active areas 
of research. In this paper, we focus on the Markov chain model 
for representing trajectory data and propose a method for 
defining states that can cope with the distinguished characteristic 
of each trajectory and a method for comparing trajectories 
transitioning over different sets of states in the Markov chain 
model. From an experiment using real trajectory data, we 
confirm the advantage of the proposed approach over others. 
I. INTRODUCTION  
In recent years, because positioning technology such as 
GPS and wireless network has become widely available, one 
can acquire moving objects' trajectories, such as those of 
people or vehicles, easily. In accordance with this fact, data 
mining technology for extracting important information and 
knowledge from trajectory data is gaining recognition. 
Clustering of trajectories, extracting features or relationship of 
trajectories, and approximating time-series data are active areas 
of research. This type of spatial-temporal data mining is 
applicable to not only the area of movement locus analysis but 
also to many other areas such as clustering of object shapes and 
images. 
Important issues in the study of trajectories of mobile 
objects include (i) determining the distance or similarity among 
trajectories, (ii) clustering the trajectories based on distance or 
similarity indices, (iii) finding the meaning in each mobile 
object movement. A main objective of this study is to enable 
understanding the current status of a mobile object of interest. 
Another objective is to predict the next action or position of a 
given mobile object. Our research findings have wide 
applicability. If this study is applied in order to find a set of 
basic motions of human, an architect can design a building 
based on this set. In home security, one can find a suspicious 
individual whose trajectory is too different from a pre-derived 
set of basic motions.  
In the area of movement trajectory analysis, a number of 
methods were previously proposed that express and compare 
trajectories by state transitions. They divide target space into 
multiple areas and define these areas as states. Each trajectory 
is then expressed by a set of transitions between these common 
states. However, this approach has two problems: (1) some 
trajectories are overly approximated and (2) small movements 
in a given state cannot be expressed exactly. Although these 
problems can be solved by increasing the number of states, this 
leads to an increase in computational cost and thus degrades 
performance. We argue that the target space should be divided 
into suitable states for each trajectory and a method is needed 
to compare trajectories modeled by transitions in different state 
sets. 
In this paper we propose a method for defining states that 
can cope with the distinguished characteristic of each trajectory. 
The proposed method adopts dynamic space division based on 
the quadtree representation. In addition, we propose a method 
for comparing user trajectories that uses two clustering steps: 
one based on coordinate data and the other based on state 
transitions. The former clustering step uses the Hamming 
distance between a pair of quadtrees, each being represented as 
a bit sequence, as distance measure.  Resulting clusters are 
used in the latter clustering step.  In each cluster, a Markov 
chain model for each of its trajectories is built, and the latter 
clustering is performed for these trajectories based on a 
proposed distance measure. Dynamic space division enables 
elucidation of trajectory details and prevention of trajectory 
over-approximation. In addition, two-step clustering leads to 
less computational costs and easier interpretation of clustering 
results. 
II. RELATED WORK  
In order to compare player trajectories in Massive 
Multiplayer Online Game (MMOG), the following method was 
proposed in [1], as an improved version of the method in [2]. 
First, a quadtree is generated based on states derived through 
dynamic space division using all players’ trajectories. 
Landmarks in the given map are then defined based on the 
density of coordinate data of all trajectories. Each trajectory is 
approximated by the state transition probabilities between 
landmarks. Finally, such transition probabilities of each pair of 
trajectories are compared and used for clustering players. The 
speed of this method is fast, but the method might overly 
where axy is the transition probability from state x to y, l’ 
indicates the common node resulting from roll-up, A(l’) 
contains the indices to all unified nodes involving in 
calculation of the transition probability to or from l’. In Fig. 5 
if l’ is 3, A(3) contains 15, 16, 56, 57 and 58. As a result of roll-
up, an intermediate node might become a state. For example, in 
Fig. 5, intermediate nodes 4 and 8 become states after roll-up. 
Next, the distance between two trajectories after roll-up is 
defined as the average in the differences in the elements of the 
corresponding transition matrices.  This distance is used as an 
element of the distance matrix in the 2nd-step clustering. 
Because the division level is different from area to area and 
some areas might have lost the detail, we need to give weights 
to the transition probabilities in accordance with D as follows: 
 
max
max 1
D
DDw ll
+−
= ,                                (4) 
where Dl is the division level of area l, and Dmax is the 
maximum level of D. The aforementioned distance between 
trajectories i and j is given as  
  ∑∑
= =
−=
num numh
l
h
m
lmlmml
num
ij jaiawwh
Dist
1 1
)()(1 ,           (5) 
where alm(x) is the transition probability from states l to m in 
trajectory x, and hnum indicates the number of common states 
between i and j. If Dmax after roll-up is 0, the distance between 
these particular two trajectories will be given the maximum 
possible value of (5), i.e., 2. 
After obtaining the distance matrix for a cluster of interest, 
the trajectories in this cluster will be further clustered using the 
same method as described in Ⅲ.C. 
 
 
Figure 1 Dynamic map division from trajectory data distribution. From left to 
right D=1, D=2, D=3. 
 
 
Figure 2  Illustration of transformation of a divided map into a quadtree and 
illustration of node deletion, where the number in each area here is the number 
of coordinate data in the trajectory. 
 
 
Figure 3  From a quadtree to a bit sequence. 
 
 
Figure 4  Example of the distance matrix: N=4. 
 
Figure 5 Illustration of derivation of a common tree structure for two different 
quadtrees A and B, where the node number is shown in each area. The area 
with no number does not contain any coordinate data in the trajectory. 
 
 
Figure 6 Examples of trajectories for players and bots (Top-left: player, Top-
right: Crbot, Bottom-left: Ice , Bottom-right: Eraser). 
Analysis of Area Revisitation Patterns
in World of Warcarft
Ruck Thawonmas1, Keisuke Yoshida1, Jing-Kai Lou2, and Kuan-Ta Chen2
1 Intelligent Computer Entertainment Lab
Graduate School of Science and Engineering, Ritsumeikan University
Kusatsu, Shiga, 525-8577, Japan
ruck@ci.ritsumei.ac.jp
2 Multimedia Networking and Systems Lab
Institute of Information Science, Academia Sinica
Taipei 115, Taiwan
swc@iis.sinica.edu.tw
Abstract. This paper analyzes area revisitation patterns in World of
Warcraft (WoW). Online-game players roam a number of in-game areas
while playing the game and revisit some of them with diﬀerent personal
reasons. To clarify this issue, we conduct a large-scale analysis using
WoW access log collected for two years consisting of more than sixty
thousand characters and have discovered four main groups of area revis-
itation patterns. We describe also in the paper how our ﬁndings can be
utilized to support both game developers and players.
1 Introduction
An online game player regularly revisits some particular areas. Their reasons
diﬀer and might be due to several factors, such as player intention, area com-
position and content. For example, to increase their levels, a group of players
might repeatedly visit an area where monsters reside. Another area might be
visited routinely because of its periodical game events. Consequently, knowledge
on area groups, each with similar revisitation characteristic, has high potential
in supporting of not only game developers but also players.
In this paper, inspired by a recent work on analysis of web revisitation patterns
[1], we hypothesize that, similar to web pages, typical patterns exist in revisita-
tion of online-game areas. To validate our hypothesis, we conduct a large-scale
analysis using access log from World of Warcraft (WoW), a Massively Multi-
player Online Role-Playing Game (MMORPG). The contributions of this work
are (a) the ﬁrst analysis of this kind on an online game, (b) four area-revisitation
patterns (or groups) found from access log of the world most popular online game
WoW, (c) thorough discussions on each pattern, and (d) our implications to
applications of the ﬁndings.
S. Natkin and J. Dupire (Eds.): ICEC 5709, pp. 13–23, 2009.
c© IFIP International Federation for Information Processing 2009
Analysis of Area Revisitation Patterns in World of Warcarft 15
with log length of 99th percentile against other characters. As a result, the num-
ber of remaining characters becomes 6491. For area ﬁltering, we removed ar-
eas with the integral of the revisitation curve, deﬁned in the next section, of
1st percentile against other areas. This results in 107 areas remaining after
ﬁltering.
3 Analysis
Our analysis approach follows the recipe in [1]. First, we use the revisitation
curve to characterize an area of interest. Then we cluster these areas into related
groups using a hierarchical clustering algorithm.
The revisitation curve of an area represents the total number of times the area
is revisited by characters within in a given time interval. Thirteen exponential
time bins are employed, i.e., within 32, 64, 98, 136, 212, 424, 848, 1696, 3392,
6784, 13568, 27136 mins, and above; representing approximately, 30 min, 1 hour,
1.5 hour, 2 hours, 3 hours, 6 hours, 12 hours, 1 day, 2 days, 4 days, 8 days, 16
days, and above, respectively. For the example log in Table 1, the data of this
character will add 1 to the 2nd bin of Area B and to the 8th bin of Areas A as
well as C. To facilitate comparisons between areas, normalization is performed
for the revisitation curve of area[i] as follows:
bin[j ] of area[i ]
average of bin[j ] among all areas
For area[i], each of the thirteen normalized bin values represents an element of
13-dimensional input vector i used in cluster analysis described below.
To cluster areas into multiple groups, each having similar revisitation char-
acteristic, we adopt commonly used Ward hierarchical clustering [4], available
in R. Because shape information is important, the cosine distance is selected
in Ward clustering. The index in use for automatically deciding the number of
clusters is maximization of
interclass variance/(number of clusters− 1)
intraclass variance/(number of areas− number of clusters)
[5]. Because we anticipate that there should also be four main groups as in [1],
the minimum number of clusters is set to four.
4 Results and Discussions
Figure 1 shows the clustering results where all areas are divided into 15 clusters.
Each cluster is labeled to one of the four groups, i.e., Fast, Medium, Slow, and
Hybrid, based on the revisitation curve’s shape of the cluster centroid. Table 2
summarizes the cluster information for Fast, Medium, and Slow; and Table 3
Analysis of Area Revisitation Patterns in World of Warcarft 17
Table 2. Summary of cluster information for Fast, Medium, and Slow
4.1.2 Starting Area
During our data collection period (Jan 2006 to Dec 2007), an extension pack
called ”The Burning Crusade” was released in March 2007. In this extension
pack, there are two new races introduced: The Draenei for the Alliance and
the Blood Elves for the Horde. New Blood Elf characters start their journey in
the Eversong Woods, the northern section of Quel’Thalas. Farther south is the
Ghostlands, a level 10-20 zone. Low-level Blood Elves gain experience points
and reward items by pursuing the quests in Eversong Woods and Ghostlands.
However, most of the quest givers are in the capital city, Silvermoon (S6), which
Analysis of Area Revisitation Patterns in World of Warcarft 19
4.2.2 Bank and Auction House
Other areas in the Medium cluster are capital cities, including Undercity (M1)
for the Undead, Orgrimmar (M2) for the Orc and Troll, and Shattrath city
(M2) for the united force. The cities serve as the main cultural, political, and
economical center of each race. To players, one of the main functionalities of
the capital cities is their economical functions, i.e., banking and auction. Banks
and auction houses are usually located only in major cities or towns, especially
in capital cities. A bank is a building with teller NPCs which allow a player
to access his own private storage. A player can freely deposit and withdraw his
items and currency in the storage via a bank or its branches. An auction house
is a place for players to trade goods, weapons, and equipments. As of the release
time of Patch 1.9, each capital city has its own auction house. The medium
revisitation patterns of capital cities implies that players tend to regularly come
back to their respective capital cities to access their private storage or trade
goods with others.
4.3 Slow
The revisitation curves in this cluster have a slow peak, i.e., revisitation intervals
are longer than 1 day. The level 30-70 areas are included. The revisitation curves
of growth areas for moderate and upper level (30-70) characters, included in S4,
S5, S6, have higher amplitudes than those of lower-level growth areas.
4.3.1 Low-Level Instance
Those instances are special areas where a group of players can interact privately
within a dungeon. Instance dungeons tend to feature the most diﬃcult and
rewarding content. Since the majority of the players had achieved the 70th level
in our traces, the low-level (20-30 level) instances, such as Blackfathom Deeps,
Rageﬁre Chasm, Razorfen Downs, Razorfen Kraul, and Shadowfang Keep (all in
S2), can no longer oﬀer satisfying rewards. Such low-level instances thus become
less popular, and therefore, players do not revisit the areas frequently.
4.3.2 Monthly Event
Another reason for slow revisitations is due to a monthly event, the Darkmoon
Faire (the Faire), which is a regular event ﬁrstly introduced in Patch 1.6. The
Faires always start on the ﬁrst Monday of a month, and the location rotates
among three places, namely, Elwynn Forest (S1), Mulgore (S3), and Terokkar
Forest (M1). The event lasts for one week and appears in turn in the three
places each month. Because some special goods can only be purchased in the
Fairs, players may manage to attend such events, even the location is far away
from their homelands. For example, when the Faire takes place in the Elwynn
Forest near the Alliance land, we ﬁnd that some Horde players traveled through
Dust Wood, Loch Modan, Redridge Mountains, Twisting Nether, and Wetland
(all in S1) in order to get to Elwynn Forest. Because these in-between areas are
unpopular and may be only visited due to such rare events, those areas exhibit
slow revisitation patterns and are included in the slow revisitation cluster.
Analysis of Area Revisitation Patterns in World of Warcarft 21
too diﬃcult or the reward is not worth enough. Thus, we consider area revisi-
tation patterns could be a useful summarization tool of game players’ passion
about certain areas, and, at the same time, a useful analytical tool for game
designers to reconsider the design of game areas.
In addition, to maintain high user satisfaction, the contents of Fast and
Medium areas should be updated with higher frequencies than those of Slow.
Fast and Medium areas are more popular ones where players more frequently
visit. Neglect in updating them may lead to player retirement.
5.2 Players’ Social Network Solidification
For a group of players, if their characters share similar area revisitation patterns,
it is likely that they share similar game play preference and strategies, and
their characters have same game levels and expertise. For example, a group of
players may all prefer to boost the game levels through slashing monsters in
caves rather than simply chatting with other players in towns. On the other
hand, some other players may prefer accumulating valuables by manufacturing
goods, provide services, or trading, thus they tend to spend a lot of time in
market places and rarely get into battleﬁeld areas. Via the clustering of area
revisitation patterns we are able to perform player clustering, where players in
the same cluster share similar game play preference and interests.
Game operators can exploit this kind of information to solidify the social
network between gamers by designing systems like ”friend recommendation” or
by holding social events that encourage players to know about each other. For
players who share similar game play strategies, they are more likely to connect
to and share with each other, which will establish social relationships between
those players and further solidify the overall social network of the game’s partici-
pants. Consequently, this will increase the stickiness to the game and furthermore
prolong the game’s lifetime.
5.3 Player Support
Individual player support can be provided based on area revisitation character-
istic of a player of interest. For example, assume that the revisitation curves of a
character of interest to battle areas exhibit Slow, but those to growth areas are
Fast. This indicates that the player does not favor ﬁghting against other players,
but rather prefers to raise his/her character’s level. The game system can thus
give to this player personal supports such as a direct invitation to an event at
a growth area. In addition, the game system can provide to players a kind of
reminder service that reminds a player of interest to visit an area whose blank
interval since the last visit has passed the peak time in the revistation curve.
If an area search function is available in the game, information on area revis-
itation can be used in area retrieval computation. For example, assigning more
preferences to Slow areas, than to Fast or Medium areas, in the search result
might give players higher satisfaction. This is because we think there is a higher
possibility that players use the area search function to locate less known areas,
such as those in Slow group.
Analysis of Area Revisitation Patterns in World of Warcarft 23
5. Calinski, T., Harabasz, J.: A dendrite method for cluster analysis. Communications
in statistics 3(1), 1–27 (1974)
6. Catledge, L.D., Pitkow, J.E.: Characterizing browsing strategies in the World-
Wide Web. In: Proc. of the Third International World-Wide Web conference on
Technology, tools and applications (WWW 1995), pp. 1065–1073 (1995)
7. Tauscher, L., Greenberg, S.: How people revisit Web pages: Empirical ﬁndings
and implications for the design of history systems. Int. J. of Human-Computer
Studies 47(1), 97–137 (1997)
8. Cockburn, A., McKenzie, B.: What do Web users do? An empirical analysis of Web
use. Int. J. of Human-Computer Studies 54(6), 903–922 (2001)
9. Herder, E.: Characterizations of user Web revisit behavior. In: Proc. of Workshop
on Adaptivity and User Modeling in Interactive Systems (ABIS 2005), pp. 32–37
(2005)
10. Kellar, M., Watters, C., Shepherd, M.: A goal-based classiﬁcation of Web infor-
mation tasks. In: Proceedings of the Annual Meeting of the American Society
for Information Science and Technology (ASIS&T 2006) (CD-ROM Proceedings)
(2006)
11. Obendorf, H., Weinreich, H., Herder, E., Mayer, M.: Web page revisitation revis-
ited: Implications of a long-term click-stream study of a Long-term Click-stream
Study of Browser Usage. In: Proc. of the twenty-ﬁfth annual SIGCHI conference
on Human factors in computing systems (CHI 2007), pp. 597–606 (2007)
12. Adar, E., Teevan, J., Dumais, S.: Resonance on the Web: Web Dynamics and
Revisitation Patterns. In: Proc. of the twenty-seventh annual SIGCHI conference
on Human factors in computing systems (CHI 2009), pp. 1381–1390 (2009)
13. http://www.wowwiki.com/World_of_Warcraft_API
14. Ducheneaut, N., Yee, N., Nickell, E., Moore, R.J.: Building a MMO with mass
appeal: a look at gameplay in World of Warcraft. Games and Culture 1(4), 281–
317 (2006)
15. Williams, D., Ducheneaut, N., Xiong, L., Zhang, Y., Yee, N., Nickell, E.: From
tree house to barracks: The social life of guilds in World of Warcraft. Games and
Culture 1(4), 338–361 (2006)
16. Tarng, P.-Y., Chen, K.T., Huang, P.: An Analysis of WoW Players’ Game Hours.
In: Proc. of the seventh annual Workshop on Network and Systems Support for
Games, NetGames 2008 (2008)
17. Chen, V., Duh, H., Hong, R.: The Changing Dynamic of Social Interaction in World
of Warcraft: The Impacts of Game Feature Change. In: Proc. of ACM SIGCHI
International Conference on Advances in Entertainment Technology (ACE 2008),
pp. 356–359 (2008)
18. Chan, C.J., Thawonmas, R., Chen, K.T.: Automatic Storytelling in Comics: A
Case Study on World of Warcraft. In: CHI Extended Abstracts 2009, pp. 3589–
3594 (2009)
Our method finds a refined initial basis function and 
accelerates the learning process at the same time. We show 
that generating approximate Bellman errors based on 
adopting the reward vector as an initialization without policy 
learning could identify the structure of the value-function. We 
take this property to construct the first basis function with 
approximate Bellman errors. 
State space approximation is another important issue for 
value-function approximation. We propose to apply the 
relevance vector machine [13], [4], [12] to find relevant state 
parameters for state space representation. The input of the 
relevance vector machine is a set of trajectories from some 
near-optimal decision making processes, and the output is a 
set of sample points. We map the original state space to these 
sample points based on the nearest neighbor approach. The 
result of the transformation is a one-dimensional feature 
space, or a relevant state space. The improved BEBFs 
method is performed on the relevant state space to find the 
approximate value-function. 
The rest of the paper is organized as follows. Section 2 gives 
a brief description about linear value-function approximation 
and recent researches in basis generation. Section 3 describes 
the fundamental principles of constructing the first basis 
function based on the approximate Bellman error. In Section 
4 we describe the rationale of mapping relevant state space 
with the relevance vector machine and the nearest neighbor 
approach. The algorithm of entire framework is described in 
Section 5. Section 6 illustrates the experimental result of basis 
generation methods from our algorithm for different problems. 
A conclusion is made in Section 7. 
2 Background and Notation 
 The Markov decision process consists of four 
components (S, A, P, R). S is the state space of the problem. A 
is a finite set of actions. P specifies the probability P(s'|s, a) 
of executing action a at state s and it results in state s'. R 
assigns the immediate reward of executing action a at state s. 
It solves a problem as follows. When at current state s from 
the observation of environment, the agent selects an action 
from a finite, non-empty set of possible actions, and receive 
an immediate reward. It transmits to the next state s' with 
probability P(s'|s, a). The function for making such a decision 
is called a policy. The policy function π(s, a) specifies the 
probability of executing action a at state s.  
The value-function of a process maps each state to the 
expected reward received with respect to the policy. The 
objective of the processes is to find a policy maximizing the 
value-function. W   value-function 
satisfies the Bellm a
ith a given policy π, a
an equ tion 
ܸగሺݏሻ ൌ ܴ ൅ ߛܸܲగሺݏሻ , 
and the Bellm o  on a value 
function is defi
an operator T perf rmed
ned as 
ܸܶగሺݏሻ ൌ ܴ ൅ ߛܸܲగሺݏሻ . 
The Bellman error of a value function is the difference with 
its result of applying the Bellman operator: TV - V. Recent 
approaches of incremental basis generation are generally 
related to the Bellman error. 
For a complex decision making process in which its value-
function cannot map all the state-values exactly, a common 
approach is to approximate it  a linear combination of basis 
functions 
as
෠ܸ ൌ ෍ ω୧Ԅ୧
௠
௜ୀଵ
 
where Φ ൌ ሼԄଵ … Ԅ୫ሽ denotes a set of basis functions, and 
w ൌ ሼωଵ … ω୫ሽ denotes the corresponding scalar weights. A 
basis matrix is predefined for the learning process, and with 
such approximation the problem solving task becomes 
deriving weight parameters for representing the value-
function. 
2.1 Basis Functions Generation 
 Many methods [1], [6] have been proposed for learning 
weight parameters, and the requirement of constructing basis 
matrix has become the major concern in recent research. The 
proto-value function framework takes the idea of formulating 
basis functions as representing the graph transition feature of 
the state space. It calculates the eigenvalues of combinatorial 
or normalized Laplacian on the state transition graph and 
selects eigenvectors with smaller corresponding eigenvalues. 
In this calculation, the smaller eigenvalues indicate smoother 
eigenvectors and are more representative of the geometry 
feature of the graph. 
The proto-value function framework considers the graph 
structure and is less related to rewards. Thus, the Krylov basis 
includes rewards for analysis as an improvement and adds 
features incrementally. It also changes its calculation 
targeting the transition matrix. The method calculates next 
basis as Ԅ୩ାଵ ൌ ሼP୩rሽ progressively for k is the index of the 
feature to be generated. 
Many recent approaches designed basis construction method 
based on the Bellman error, and Parr et al. [10] defined them 
as Bellman Error Basis Functions (BEBFs) family. The 
approach increases basis with 
Ԅ୩ାଵ ൌ TV୩෢ െ V୩෢ ൌ R ൅ γPΦ୩w୩ െ Φ୩w୩ . 
The technique produces basis functions as a complement in 
the view of reducing Bellman error and is much closer to the 
intuition of basis construction design. Parr et al. [10] defined 
them as BEBFs family. The approximate value-function V෡ is 
the orthogonal projection of TV෡  into Φ, therefore the 
generated basis function Ԅ୩ାଵ ൌ TV୩෢ െ V୩෢  is orthogonal to 
the span of Φ, and the sequence of normalized BEBFs forms 
an orthonormal basis [10]. In value-function approximation, 
the Bellman error is composed of the reward error and the 
per-feature error [11]. 
1minimization. The successive basis functions are generated 
toward reducing approximation error.  
The original BEBFs methods generate features to model 
value iteration of policy learning while our method generates 
features to reduce approximation error of the value-function. 
This improvement is more efficient than the conventional 
approach. We illustrate the comparison of two approaches on 
the 50-state chain problem in Fig. 2. Fig. 2a implies that 
formulating the first basis function with several approximate 
Bellman errors models the structure of the value-function, and 
Fig. 2c shows that our approach requires only fewer basis 
functions to represent the value-function. 
4 Relevant State Space 
 Previous approaches often apply locally weighted linear 
regression [1] to approximate the state space. However, the 
method requires high computation cost and would become 
impractical for a large-scale problem. To find a sparse 
representation for the state space to reduce the complexity, we 
apply the relevance vector machine or RVM to determine the 
relevance of each sample. When the irrelevant data is 
eliminated, the relevant samples formulate a sparse 
approximation for the original state space. The relevance of 
each state-action sample for policy representation is 
determined from the problem solving trajectories. The 
problem solving trajectories could be recorded from the 
demonstrations of human experts or some existing agents. In 
the configuration of RVM, we define the basis matrix as 
Gaussian kernels of state parameters and the target variables 
as actions. The RVM evaluates the relevance of actions and 
data samples in the given trajectories. We take resulting 
relevant data samples to construct a sparse state space, or the 
relevant state space. Below is some short description about 
the relevance vector machine. 
For a given data x and corresponding target value t, the 
Bayesian regre e  elihood model 
of the data set a
ssion assum s the Gaussian lik
s 
݌ሺܜ|ܠ, ܟ, ߚሻ ൌ ࣨሺܜ|઴ܟ, ߚିଵሻ. 
The Bayesian treatment of linear regression assigns a prior 
probability over weight parameters w. One of common 
designs is to use m ior with a single 
precision paramet
a zero- ean Gaussian pr
er α: 
݌ሺܟ|ߙሻ ൌ ࣨሺܟ|0, ߙିଵΙሻ. 
The relevance vector machine modifies the definition of prior 
distribution as assigning individual precision parameter 
respect to each weight, and the new weight prior distribution 
becomes: 
݌ሺܟ|હሻ ൌ ෑ ࣨሺw୧|0, ߙ୧
ିଵሻ,
M
୧ୀଵ
 
where α = (α1,…, αm) denotes a vector of M hy rparameters. pe
When a αi close to infinity, the corresponding Ԅ୧ is irrelevant 
and can be removed from the model. Tipping [13] gave an 
intuitive explanation for the relation of α and sparse 
representation in the Gaussian process view. The analysis 
in [4] also showed that αi should be set to infinity when the 
estimated αi is negative. To be more specific, a basis function 
is defined as irrelevant when its maximum of marginal 
likelihood function occurs at αi = ∞. 
The Gaussian kernel takes the form of 
k(x, x') = exp(ԟԡx ԟ x' ԡ2/2σ2) . 
It provides an exponential distance measure between two 
vectors. The output value decreases significantly as their 
Euclidean distance increases. Thus, the Gaussian kernel 
provides a local preference on analyzing relevance. The 
relevance vector machine with Gaussian kernels measures the 
relevance of each sample for the policy representation based 
on actions and the similarity of state parameters. Constructing 
basis functions with relevant samples defines a low-
dimensional state space for value-function approximation. We 
approximate the original state space with the relevant state 
space via mapping states to the relevant samples with the 
nearest neighbor method. 
5 Approximate Policy Learning 
 Our method composed of two processes: the relevant 
state space construction and the improved BEBFs method. 
The relevant state space construction maps a large-scale state 
Fig. 2. The 50-state chain: (a) The first basis function generated based on the approximate Bellman error, (b) The reward vector, (c) L2 norm difference from 
optimal value function during the BEBFs generation. Horizontal axis represents the number of basis functions. The solid curve corresponds to the BEBFs 
generation with Ԅ1=R, and the dashed curve corresponds to the BEBFs generation with Ԅ1 initialed with approximate Bellman errors. 
1 2 3 4 5 6 7 8 9 10
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
 
Reward Vector
2.5
Approximate BE
5 10 15 20 25 30 35 40 45 50
0
0.5
1
1.5
2
2.5
0 5 10 15 20 25 30 35 40 45 50
0
0.5
1
1.5
2
(c) (a) (b)
Most of the state parameters are continuous, and the state 
space is too complex that it is infeasible to approximate the 
continuous variables as discrete grids. The relevant state 
construction maps the original state space to a discrete 
representation for the learning algorithm. We chose berniw 
bot from the default bots provided in TORCS and recorded its 
trajectory of running 10 races alone on Michigan Speedway. 
The berniw bot has full access to the environment and plans 
its track based on the entire track structure. Its policy is near 
optimal, and we take these decision making samples as the 
input for the relevance vector machine to determine the 
relevance of state parameters for representing the near-
optimal policy. Since in this experiment we aim to learn the 
single driving policy, the 18 sensors that detect the opponent 
distance are removed from the state parameters. The 
relevance vector machine found 43 relevant samples. To 
show the features of these relevant samples, we project them 
onto a two-dimensional plane with only the parameters of 
distance from start and relative track position and illustrate 
them in Fig. 4c. The two parameters indicate the absolute 
position of these samples on the track. Many relevant samples 
have similar values on the two parameters and project onto 
close position, so there is fewer points could be observed in 
Fig. 4c. 
We focus the problem on learning steer control and define 
full acceleration and automatic gear control for other effectors. 
We implemented a client which performs random actions for 
steer control. In each sample run, the car starts from the start 
line and terminates when it is out of the track. When the car is 
kept on the track, the controller receives a reward 0.001; and 
when the car is out of the track, it receives a reward -1. We 
run 1000 episodes and collected 273,505 points for training. 
The output of the learning method is an approximate value-
function on the relevant state space, and the utility on the 
original state space is derived from its corresponding 
projection onto the relevant state space. The utility values of 
sample points with respect to their positions on the track are 
illustrated in Fig. 5a. The samples of random steer control 
mostly terminate within 600 meters, thus we plot the graph up 
to 600 meters in the horizontal axis. Fig. 5a shows higher 
utility on the left side of the track which matches the optimal 
driving policy. The utility values in the first and second 
iteration of basis function generation are illustrated in Fig. 
5b~c. The figures indicate that the first basis function initialed 
based on the approximate Bellman error could model the 
structure of the value-function under the approximation with 
the relevant state space. 
7 Conclusions 
 The basis functions generated with a fixed weight 
parameter and with different weight parameters in the BEBFs 
method span the same basis. We take this property to 
initialize the first basis function. Due to the inherent value 
iteration process of the Bellman-error-based approach, this 
basis function models the structure of the value-function. The 
original BEBFs methods take several basis functions to 
formulate the structure of the value-function. Our approach 
reduces such a cost and focus the feature generation on 
reducing approximation error. The experimental results also 
show that the number of required basis functions is 
significantly reduced. The relevant state space projection also 
shows a significant dimension reduction for the state space 
approximation. 
The state space projection method for basis function 
approximation plays an important role in the value-function 
approximation. However, the problem of state space 
projection technique is less been addressed in recent studies. 
To apply the existing basis function generation methods for 
solving complex problem, a further designed state space 
projection algorithm is required. Previous approaches take the 
basis function generation and the state space projection as two 
independent processes. A possible formulation is to design 
the state space projection algorithm based on the applied basis 
1
(c) 
2 4 6 8 10 12 14 16 18 20
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
 
 
Reward Vector
0.9 Approximate BE
(a) (b)
(g)(f)(d) (e) 
Fig. 3. Puddle world: (a) The first basis function generated based on Bellman error, (b) Learned value-function. (c) L2 norm difference from optimal value-
function during the BEBFs generation. Horizontal axis represents the number of basis functions. The solid curve corresponds to the BEBFs generation with 
Ԅ1=R, and the dashed curve corresponds to the BEBFs generation with Ԅ1 initialed with approximate Bellman errors. (d) The second basis function 
generated in our method, (e)~(g) second, third, and fourth basis functions generated in the original BEBF method. 
Game Bot Identification Based on Manifold Learning∗
Kuan-Ta Chen1, Hsing-Kuo Kenneth Pao2, and Hong-Chung Chang2
1Institute of Information Science, Academia Sinica
2Dept. of Computer Science & Information Engineering, National Taiwan Univ. of Science & Technology
ktchen@iis.sinica.edu.tw, {pao,m9515069}@mail.ntust.edu.tw
ABSTRACT
In recent years, online gaming has become one of the most
popular Internet activities, but cheating activity, such as the
use of game bots, has increased as a consequence. Gener-
ally, the gaming community disapproves of the use of game
bots, as bot users obtain unreasonable rewards without cor-
responding eﬀorts. However, bots are hard to detect because
they are designed to simulate human game playing behavior
and they follow game rules exactly. Existing detection ap-
proaches either disrupt players’ gaming experiences, or they
assume game bots are run as standalone clients or assigned
a speciﬁc goal, such as aim bots in FPS games.
In this paper, we propose a manifold learning approach
for detecting game bots. It is a general technique that can
be applied to any game in which avatars’ movement is con-
trolled by the players directly. Through real-life data traces,
we show that the trajectories of human players and those
of game bots are very diﬀerent. In addition, although game
bots may endeavor to simulate players’ decisions, certain hu-
man behavior patterns are diﬃcult to mimic because they
are AI-hard. Taking Quake 2 as a case study, we evaluate
our scheme’s performance based on real-life traces. The re-
sults show that the scheme can achieve a detection accuracy
of 98% or higher on a trace of 700 seconds.
Keywords
Cheating, Classiﬁcation, Isomap, kNN, Online Games, SVM,
Trajectory
1. INTRODUCTION
∗This work was supported in part by Taiwan Information
Security Center (TWISC), National Science Council under
the grants NSC 97-2219-E-001-001 and NSC 97-2219-E-011-
006. It was also supported in part by Taiwan E-Learning
& Digital Archives Program (TELDAP), National Science
Council under the grants NSC 96-3113-H-001-010 and NSC
96-3113-H-001-012.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
NetGames’08, Worcester, MA, USA
Copyright 2008 ACM 978-1-60558-132-3-10/21/2008 ...$5.00.
In recent years, online gaming has become one of the most
popular Internet activities. However, as the population of
online gamers has increased, game cheating problems, such
as the use of game bots, have become more serious. Game
bots are automated programs with or without artiﬁcial in-
telligence that help players enhance, accelerate, or bypass
some routines in the game. For example, in MMORPGs
(Massively Multiplayer Online Role Player Games), players
can save a great deal of time by using bots to perform repet-
itive tasks, such as slashing low-level monsters, or ﬁshing in
a river to master the avatar’s ﬁshing skills. Meanwhile, in
FPS (First-Person Shooter) games, users can employ bots
to play in place of themselves in order to get high scores and
gain a reputation in the community.
Generally, the gaming community disapproves of the use
of game bots, as bot users obtain unreasonable rewards with-
out corresponding eﬀorts. However, game bots are hard to
detect because they are designed to simulate human game
playing behavior and they follow game rules exactly. Some
bot detection studies [8,27] propose using CAPTCHA tests
during a game to determine whether an avatar is actually
controlled by a person. Although this method is eﬀective,
it disrupts the game play and degrades players’ feelings of
immersion in the virtual world [10, 16]. Alternatively, pas-
sive detection approaches, such as schemes based on traﬃc
analysis [4] and schemes based on avatars’ shooting accu-
racy in FPS games [28], have been proposed. However, the
former approach assumes that a game bot works as a stan-
dalone client, while the latter is only suitable for detecting
aim bots in shooting games.
In this paper, we propose a general approach for all gen-
res of games in which players control the avatar’s move-
ments directly. Taking the avatar’s movement trajectory as
the input, we adopt a learning method for bot detection.
The rationale is that the trajectory of an avatar controlled
by a human player is hard to simulate. Players control the
movement of avatars based on their knowledge, experience,
intuition, and a great deal of environmental information pro-
vided in the game. Since human decisions are sophisticated
and depend on multitudinous observable and unobservable
factors, how to model and simulate realistic movements is
still an open question in the AI ﬁeld.
To exploit the complexity of an avatar’s trajectory for bot
detection, it is necessary to tackle the high dimensionality
of the derived information because the trajectory contains
a long series of two-dimensional or three-dimensional co-
ordinates (depending on whether the game is 2D or 3D)
over time. To analyze such inputs, we adopt a manifold
view it from any position and angle desired with VCR-like
operations. Players often use this function to assess their
performance and combat strategies. Moreover, experienced
players are encouraged to publish their game-play traces as
teaching materials for novice gamers and thereby build a
reputation in the community.
To ensure that our game traces represented the diversity
of Quake players, we only used traces that players had con-
tributed voluntarily. The traces were downloaded from the
following archive sites: GotFrag Quake1, Planet Quake2,
Demo Squad3, and Revilla Quake Site4. We restricted the
traces to the map The Edge, one of the most well-known
levels in death-match play. At this level, each player’s only
goal is to kill as many other players as possible, until the
time limit is reached. Because short traces contain little in-
formation, we only collected traces longer than 600 seconds.
3.3 Bot Traces
There are many game bots available for Quake 2. For this
study, we selected three of the most popular bot programs
for trace collection, namely CR BOT 1.14 [15], Eraser Bot
1.01 [7], and ICE Bot 1.0 [12].
To collect the game bot traces, we set up experiments on
our own Quake server and ran a number of game bots to
ﬁght each other. The experimental setup was as follows:
1. In each game, 2–6 bots were selected at random to
ﬁght each other. Each session spanned 20 hours.
2. The game trace was recorded at the server using the
serverrecord command.
3. The game’s catch-the-ﬂag mode was turned oﬀ, so the
game bots kept ﬁghting each other until the server shut
down. The cheating mode was also disabled.
4. The AI levels of CR Bot and Eraser Bot were randomly
set from 0 to 9 and 0 to 3 respectively.
We collected 1, 306 hours of raw traces in total. Then,
from each trace, we took the ﬁrst 1, 000 seconds, the middle
1, 000 seconds and another 1, 000 seconds near the end to
compile our dataset. In total, we collected 143.8 hours of
trace data, as shown5 in Table 1. In CR Bot and Eraser
Bot, all human players and bots were active most of time
(≥ 89%). There was less activity in ICE Bot because it often
remained idle in some places waiting for an opportunity to
ambush other players.
4. BOT IDENTIFICATION SCHEMES
We propose using two approaches for bot detection, namely,
the kNN algorithm and the support vector machine (SVM)
model [11, 26]. To improve the detection accuracy, the ap-
proaches can be combined with a dimension reduction (DR)
1http://www.gotfrag.com/quake/home/
2http://planetquake.gamespy.com/
3http://q2scene.net/ds/
4http://www.revilla.nildram.co.uk/demos-full.htm
5We assume that the sections at the beginning, in the mid-
dle and near the end of a trace dissimilar and can thus be
considered as diﬀerent samples. In this way, we can cre-
ate more useful data for the input of our learning scheme,
though this preprocessing is not essential for our scheme to
work properly.
Table 1: Trace Summary
Name No Length Total Active
1 Human 282 1000 seconds 78.0 hours 89%
2 CR 75 1000 seconds 20.8 hours 89%
3 Eraser 102 1000 seconds 28.3 hours 92%
4 ICE 60 1000 seconds 16.7 hours 67%
technique called Isometric Feature Mapping or Isomap [20],
a method that belongs to the category of manifold learning.
Considering the machine learning framework for our prob-
lem, some labeled data is collected for model training. We
treat bot traces as positive samples and the traces from hu-
man players as negative samples; thus, a binary classiﬁcation
problem is formed. Speciﬁcally, we compile a dataset of M
samples {(xm, ym),m = 1, . . . ,M} = {(xm1, . . . , xmN ; ym)}
for the training process. Each data item is described by N
attributes and ym ∈ {0, 1} is the class information.
Notations. A trace s is a series of locations in either a 2-
D or 3-D space, i.e., s = (s1, s2, . . . , st, . . . , sT ) up to time
T . Usually, T represents the eﬀectiveness of the detection
technique, or how quickly an alarm should be raised about
a bot user. A step in a trace is the vector st+1 − st, and,
the Euclidean step size is denoted by ‖st+1 − st‖. We then
consider the distribution of the step sizes, i.e., the frequency
counts of the step sizes after discretization. The counts are
collected in B bins as (f1, f2, . . . , fB), based on the frequen-
cies of the step sizes from 0 to a large number. We assume
that frequency counts of step size 0 indicate periods of con-
versation, rest periods, hiding from intense ﬁre, or waiting
for the arrival of opponents. The frequencies then become
the input vector for our machine learning framework. Next,
we consider several classiﬁers that can be used for bot de-
tection.
4.1 k Nearest Neighbors
The kNN algorithm is one of the oldest and most intuitive
classiﬁcation methods, and many applications continue to
demonstrate its competitive performance compared to other
classiﬁers (e.g. [19]). In kNN, the class label of a new trace
is decided by the class labels of the traces surrounding it.
One of the keys to the successful application of kNN is the
choice of an appropriate metric. In our study, for two data
points, i.e., two feature vectors, P and Q, we choose either
the Euclidean distance or the Kullback-Leibler divergence [5]
dkl(P,Q) =
∑
x
P (x) log
P (x)
Q(x)
,
as the metric. In general, the KL divergence is not symmet-
ric; thus, we would like to choose a symmetric version.
Dkl(P,Q) = dkl(P,Q) + dkl(Q,P ) .
We can also use the Euclidean metric as
De(P,Q)
2 =
∑
x
(P (x)−Q(x))2 ,
the distance measure between two data points.
4.2 Support Vector Machines
−800 −700 −600 −500 −400 −300 −200 −100 0 100 200
−400
−200
0
200
400
600
800
Human
Crbot
Erbot
Icebot
Figure 3: Dimension reduction by PCA, where the
x- and y-axes represent the ﬁrst and second princi-
pal components respectively. The points of human
users and bots overlap, so they are not as distin-
guishable from each other as the result obtained by
Isomap.
siﬁcation scheme.
5. PERFORMANCE EVALUATION
We consider four classiﬁcation schemes for bot detection:
(1) kNN with KL divergence as the metric, which is ap-
plied in the original space; (2) SSVM7, which is also applied
in the original space; (3) kNN, which is applied in the low
dimensional space derived using Isomap and (4) Isomap fol-
lowed by SSVM. Note that kNN is a na¨ıve classiﬁcation
method, whereas SSVM is a sophisticated method. Our re-
sults demonstrate that, in terms of performance, kNN com-
bined with DR (Isomap) is comparable to the other meth-
ods, while not to mention that kNN, compared to SVM (or
SSVM) is a very eﬃcient approach in terms of time com-
plexity. To evaluate the performance, we use the detection
error rate, which is measured by a ten-fold cross-validation
procedure. In other words, the whole dataset is partitioned
into ten subsets of more or less equal size, with stratiﬁ-
cation8. Then, nine of the subsets are used for training
while the tenth is reserved for testing. The whole pro-
cedure is repeated ten times using diﬀerent partitions for
cross-validation to obtain an average result.
To compile the training data, we transform each trace into
a distribution of step sizes, as mentioned in Section 4. The
distribution is discretized and partitioned into B = 201 bins
for each trace, with the corresponding probability function
values or frequency counts; therefore, a data item is in a
201-dimensional space. Based on the dataset described in
Table 1, there are 519 data items, of which 282 are positive
samples (human) and 237 are negative samples (bots). To
apply the Isomap procedure, the neighboring graph is de-
ﬁned by considering the ﬁve closest neighbors of each sam-
ple. Then, after the DR to a low dimensional space (of
dimensionality 5), we either use an SSVM for classiﬁcation,
or we simply use kNN in the new space for classiﬁcation with
k2 = 13. In the original space, the number of data items to
7As mentioned previously, we adopt SSVM instead of SVM
because it achieves a better performance.
8That is, the set is divided into several groups that contain
similar percentages of positive and negative samples.
Table 2: The results of 10-fold cross-validation,
which is repeated 10 times using six diﬀerent classi-
ﬁcation methods. The results show the average false
positive rates, false negative rates and error rates.
Classification Methods FP(%) / FN(%)Err(%)
(A1) kNN 0.00 / 3.22 (1.45%)
(A2) Linear SSVM 1.07 / 0.95 (1.02%)
(A3) Nonlinear SSVM 1.43 / 0.35 (0.94%)
(B1) DR + kNN 0.00 / 1.87 (0.84%)
(B2) DR + Linear SSVM 0.88 / 16.68 (8.00%)
(B3) DR + Nonlinear SSVM 0.00 / 0.00 (0.00%)
be considered as neighbors should be limited (k1 = 5) due
to the possible curse of dimensionality; however, this can be
relaxed to a larger number (k2 = 13) in a dimension reduced
space. We discuss the performance of each approach below.
5.1 Error Rates
We use the previously mentioned trace as input for the
classiﬁcation. Table 2 shows the performance of several clas-
siﬁers. Both kNN and SSVM are applied with and without
DR; and we use both the linear and nonlinear versions of
SSVM. Most of the classiﬁcation methods yield error rates9
of less than 2%, while DR by Isomap and nonlinear SSVM
achieve perfect classiﬁcation results. Overall, the methods
that employ Isomap for DR yield better results than the
methods that do not use it. Moreover, the methods based
on SSVM outperform those based on kNN.
5.2 Using Trajectories of Different Length
Since we want to detect bot users as early as possible, we
can analyze the performance when only a partial input trace
up to a certain time is given, rather than a whole sequence.
As shown in Fig. 4, one method may be superior to another
for inputs of diﬀerent length, but the results are similar to
those reported in the previous section:
1. The methods that use DR (Isomap) outperform those
that do not use it.
2. The methods based on SSVM perform better than
those based on kNN, except those with false positive
rates. In the latter case, although kNN-based methods
often outperform those based on SSVM, the diﬀerences
are marginal.
6. CONCLUSION
We have proposed a trajectory-based approach for detect-
ing game bots. Speciﬁcally, we employ Isomap for dimen-
sion reduction, and then use kNN or SSVM to perform su-
pervised classiﬁcation. The performance evaluation results
demonstrate that, based on real-life Quake 2 traces, our ap-
proach can achieve a detection accuracy of 98% or higher
on a trace of 700 seconds. Because it is diﬃcult to simulate
human players’ behavior when controlling game characters,
9DR combined with linear SSVM is not eﬀective because
the decision boundary tends to be nonlinear in a low di-
mensional space. For ease of visualization, we removed the
result of Isomap combined with linear SSVM because it is
not comparable to the results of the other methods.
Quantifying the Effect of Content-based Transport
Strategies for Online Role Playing Games
Chih-Ming Chen1, Te-Yuan Huang1, Kuan-Ta Chen2, and Polly Huang1
1Department of Electrical Engineering, National Taiwan University
2Institute of Information Science, Academia Sinica
{cmchen,huangty}@gmail.com, ktchen@iis.sinica.edu.tw, phuang@cc.ee.ntu.edu.tw
ABSTRACT
The QoS requirements of game messages may diﬀer because
of the latter’s intrinsic characteristics. In this paper, we
propose three content-based strategies for quantifying the
eﬀects of diﬀerent QoS levels. The strategies assign appro-
priate QoS requirements for game messages based on our
analysis of Angel’s Love action logs. We evaluate several
transport protocols, including TCP, UDP, SCTP, DCCP,
and our content-based transport protocol using the action
logs of Angel’s Love. Through simulations, we quantify the
performance of our content-based strategies. The results
show that the strategies incur much lower end-to-end delay
and end-to-end jitter than existing transport protocols.
1. INTRODUCTION
Real-time transfer of game messages is essential for highly
interactive online games. In other words, delays and jit-
ters play important roles in players’ gaming experiences [2].
Thus, how to minimize end-to-end delay and jitter, i.e.,
maximize real-timeliness and interactivity, is generally con-
sidered the most critical networking issue in the design of
game protocols.
The network part of end-to-end delay and jitter perceived
by game players is largely determined by the underlying
transport protocol. Both TCP and UDP are widely used
by popular MMORPGs. However, some studies [1, 3] have
shown that TCP is not suitable for massive multi-players
online games (MMOGs). Meanwhile, UDP is good for real-
time transmission, but it cannot be applied to online game
directly as some game data requires reliable transmission.
Our contribution in this work is two-fold:
1. We evaluate the performance of several existing trans-
port protocols, namely TCP, UDP, SCTP, and DCCP,
on MMORPGs with real-life traces.
2. We propose three content-based transport strategies
for MMORPGs, and quantify their performance im-
provement over existing solutions.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
NetGames’08, Worcester, MA, USA
Copyright 2008 ACM 978-1-60558-132-3-10/21/2008 ...$5.00.
Table 1: Angel’s Love Action Traces per User
Game Play Time Number of Messages
Total 22h 7m 14s 7, 482, 951
Average 4h 37m 41s 4, 080
Maximum 22h 7m 14s 169, 116
Minimum 1h 1s 201
2. DATA DESCRIPTION
Angel’s Love is a popular commercial MMORPG in Tai-
wan and thousands of people may be online at any one time.
We asked the game company to record players’ actions for
us, shown in Table 1. The traces contain the time and type
of each action a player performed. Collecting game-level
action logs allows us to perform network simulations real-
istically and ﬂexibly. We classify messages into three
types: move, attack, and talk. Since only the latest location
matters, the server will simply discard a move message if
it is out-of-date. Attack messages detail a character’s com-
bat actions when it ﬁghts with creatures or other characters.
Such messages cannot be missed as each combat action will
have some impact on the target. However, if several succes-
sive attack messages describe exactly the same ﬁght actions
against the same target, then out-of-order arrivals of these
commands can be tolerated because the ﬁnal outcome will
be the same. Finally, talk messages contain details of con-
versations between diﬀerent players. Therefore, unlike the
other two types of messages, talk messages must be trans-
mitted reliably and orderly.
3. PROPOSED TRANSPORT STRATEGY
Our content-based transport strategies assign proper QoS
levels to messages based on the QoS requirements of each
message type.
1. Strategy MRO: MRO only employs multi-streaming.
Diﬀerent message types are put in diﬀerent streams.
For example, we classify messages into three types,
namely move, attack, and talk, so we can place these
three message types into three separate streams.
2. Strategy MR: MR combines multi-streaming and op-
tional ordering. This strategy provides two kinds of
streams: ordered streams and unordered streams. If a
message type is tolerant of out-of-order processing, it
can be transmitted via an unordered stream; otherwise
it should be put in an ordered stream.
3. Strategy M: M combines all three options: multi-
streaming, optional ordering, and optional reliability.
If a message type cannot be lost and must be pro-
cessed in order, it can be transmitted via an ordered
Detection of MMORPG Bots Based on Behavior Analysis 
Ruck Thawonmas
Intelligent Computer
Entertainment Lab
ISE, Ritsumeikan University
Kusatsu 525-8577, Japan
ruck@ci.ritsumei.ac.jp
Yoshitaka Kashifuji
Intelligent Computer
Entertainment Lab
ISE, Ritsumeikan University
Kusatsu 525-8577, Japan
ci003053@is.ritsumei.ac.jp
Kuan-Ta Chen
Multimedia Networking and
Systems Lab
IIS, Academia Sinica
Taipei 115, Taiwan
ktchen@iis.sinica.edu.tw
ABSTRACT
  	 
	 
  
	   

     
    
  
 
 
 
  
           
	    

	   

  !  
	 
 
	   
     	   
 "  


 #
 

 	
$
 
 
 
  
%
 & ' 
  $&  
 
    
    $
$    &&	 
 (	   )*!)+* 	   
  
    
  
& ' 
	   
   


 
 
 #
  
  
   $
    ,   

 

  $  '   
 &$  $
  
  -- 
 
 
#
  
 
   
   
&$   '   	   
 $
  
     


   
 
  ,   
  
     .  

 ) 
   
 %

Keywords
  /	 
  	 *
 0#	 *
 !
1. INTRODUCTION
1$ 
 
    
 
  '  *	 
    
 
!
 $& $  
   2 3
  

  3
 233    
*
  3


  ) 45655789  $   !
$ '

3
 ) !,'3)	 1
 3
 )
 
  13) :;447:<557557  13) :;447:<577
559
' 
  
    

 

     $

   
 
&  
 
  = 
 $ 
       &

 
	 



   
	  >
  
 
  
  
 +$	   

	   
&  
 
 
 	 
 
 
   $  
 

$	 $
 
   %   
!  $   ?@  
   
#
  
 
      $
  $
 


 

    	 	  
  
 
   0 A	 
 


 
 
    	 
       
  
   


 &	   
 $ 	  

 
  
    
 &
 ' 
 $	 
 #
  $    
  
$ 
  
  
      
!
      $  
 
 
 $   &     
    
  
B    	  
 
 

      	    
 
$ $
 

 % +$	   
      
  
 
 
 
   $   A
!	         
     
# 
  

 
 !  $
  

   
	    
 
#  

 C7	 4D $
 )*!)+*  
   
       CE	 8	 6	 9D	 

     $
$  C;D	  (
 CFD	         
  
  
     
     
 	 
  
    

 $ $ 
   	 > 
&  $ $ 


 
  
 $
 B  
 	 $

   
 
     
 
    $
    

 = &	  
  

 &    
 
 =  (



   
 #
 !
  $  
 
	 $
 $ A

! 7 $      

  
  
      '   
 
    

    $ 
  	 
 $   

' 

	 $     :4 
 	
  6F 
  
&     	
EE 
  
&   	  7 
 

&   
!    
  
 
$  !   
  
 -- 
-
-     
	 
	  


  
 
 
 #
 
 A
 0
 
  -
-	      
  !   
     

	    

  
 
 

 
 A
	 $    
 

 3J C:D 
 
   
  -
-
 
 --  -- /$ $ 
 
$  
 
	 

'   	    	 	
K	 
	
K	
K   #  
  
 	    
 #
   	
  
 #     
  


 $  # 
& 
 	 
 *
  
  
 
  -- 
   

 
 A
 $


   	
K 

    	
K	
K
 
	
K	
K
   	
$
 
  
 
  -
- ! 
    
 
   


  $G
 0   	   
 
   
 


 
   	
K 
  
	 
   
  
	
K	
K
   I
	   
 
	 
  



 
$ 

  
 

	 
   
 


 

  

 
    $  
 
 
 ' 
  
  	     
   

 I $
	         
  

 
   	
K	
K


     
'   	   -
- 	 
 

 
 
   3J 
	 
   


 	   
 
   
    
 +	  
  
      

 	 $  
    
  
    
  	     
 
 7 

 
 
 $ 
&     

	  
 5 $

4. EVALUATION
! 4G !   &      

 

B
 !
 
 / +
76 467E 7556
E5 74F6 6;:
86 F;8 87:
95 99E EE:
' 
	 
 
     $

  

 +	  
 
 
     

   
 
    
 
  
   !     

% 
 
	 $ 

   

 
 3 4      
 

&    
	 $  
  
 &
  $
  
  56 '  
	 
& $ 
   


 	  

  $ 
	 
	 76	 E5	 86	  95 
	
 
     &   
 $ 
 ! 4
' 

	 
     
 
 &$    
  

 	 
    

 $ 	 
$
  

  L
	
 	 
 
	 $

 '  	    
   & 
 
      	   
  

   &   

 
A   
A 
/   8: 
 
      	
 $   8: < 

  
 $ 

    

   8:     

 * 3J   3JM
 3 J 

 
>
 $  
   	
$  
 & $ 
0
 E	8	6	  9 $  

    
 * !	    $
   

 *1 *M	   3J 
  
   
   $ 
 0
 	 
       
   3J 
   
 
 
 
 ' 

	   
 
  E5	
86	  95 
	 
 

    5:4 
    

  
  

  
! 

     
   
 A      

 
	 $
  
    
    & 
 

  --	    
    
  
& 
  -- 
    & ! E

"  $ 
   
 

5. CONCLUSIONS
 
& A

 $&	     
 
  
   #
  

  
 #


 !
  

   

 
"    3 
   $



 
   
  $& B

 
  
 
 #
  
  
Game Bot Detection Based on Avatar
Trajectory
Kuan-Ta Chen1, Andrew Liao2, Hsing-Kuo Kenneth Pao3, and Hao-Hua Chu2
1 Institute of Information Science, Academia Sinica
2 Dept. of Computer Science & Information Engineering, National Taiwan University
3 Dept. of Computer Science & Information Engineering, National Taiwan Univ. of
Science & Technology
Abstract. In recent years, online gaming has become one of the most
popular Internet activities, but cheating activity, such as the use of game
bots, has increased as a consequence. Generally, the gaming community
disagrees with the use of game bots, as bot users obtain unreasonable
rewards without corresponding eﬀorts. However, bots are hard to detect
because they are designed to simulate human game playing behavior
and they follow game rules exactly. Existing detection approaches either
interrupt the players’ gaming experience, or they assume game bots are
run as standalone clients or assigned a speciﬁc goal, such as aim bots in
FPS games.
In this paper, we propose a trajectory-based approach to detect game
bots. It is a general technique that can be applied to any game in which
the avatar’s movement is controlled directly by the players. Through
real-life data traces, we show that the trajectories of human players and
those of game bots are very diﬀerent. In addition, although game bots
may endeavor to simulate players’ decisions, certain human behavior
patterns are diﬃcult to mimic because they are AI-hard. Taking Quake
2 as a case study, we evaluate our scheme’s performance based on real-
life traces. The results show that the scheme can achieve a detection
accuracy of 95% or higher given a trace of 200 seconds or longer.
Key words: Cheating Detection, Online Games, Quake, Security, Su-
pervised Classiﬁcation, User Behavior
1 Introduction
In recent years, online gaming has become one of the most popular Internet activ-
ities. However, as the population of online gamers has increased, game cheating
problems, such as the use of game bots, have become more serious. Game bots
are automated programs with artiﬁcial intelligence that players use for diﬀerent
 This work was supported in part by Taiwan Information Security Center (TWISC),
National Science Council under the grants NSC 97-2219-E-001-001 and NSC 97-2219-
E-011-006. It was also supported in part by Taiwan E-Learning & Digital Archives
Program (TELDAP), National Science Council under the grants NSC 96-3113-H-
001-010 and NSC 96-3113-H-001-012.
terms of the distribution of discriminative features. In Section 6, we evaluate the
performance of the proposed scheme with the consideration of the trace length.
Then, in Section 7, we summarize our conclusions.
2 Related Work
Recently, anti-cheating software programs, such as PunkBuster and GameGuard,
have been widely deployed in online games to prevent cheating. Such software
is bundled with game clients, so it cannot be uninstalled even if the game client
has been removed. It works by hiding in the game client process, monitoring the
entire virtual memory space (to prevent modiﬁcation of the game’s executable
images), blocking suspected programs that might be hacker tools, and blocking
certain API calls. This kind of software can detect nearly all plug-in tools that
attach to a game client program to inspect or modify game states when the game
is running. Unfortunately, it cannot stop the widespread use of standalone bots,
including the bot series we study in this paper. The reason is that these anti-
cheating software programs are host-based, so they must be installed on players’
PCs to be eﬀective. Standalone bots, on the other hand, can function without
clients, and it is unlikely that anti-cheating tools would be installed on PCs
where the bots are running. This claim is strongly supported by the fact that
game bots are still active in games protected by PunkBuster or GameGuard,
e.g., Quake (PunkBuster) and Lineage4 (GameGuard).
3 Data Description
3.1 Human Traces
Quake 2 supports a game-play recording function that keeps track of every action
and movement, as well as the status of each character and item throughout the
game. With a recorded trace, one can reconstruct a game and review it from any
position and angle desired via VCR-like operations. Players often use this func-
tion to assess their performance and combat strategies. Moreover, experienced
players are encouraged to publish their game-play traces as teaching materials
for novice gamers and thereby build a reputation in the community.
To ensure that our game traces represented the diversity of Quake players, we
only used traces that players had contributed voluntarily. The human players’
traces were downloaded from the following archive sites: GotFrag Quake5, Planet
Quake6, Demo Squad7, and Revilla Quake Site8. We restricted the traces to
the map The Edge, one of the most well-known levels of death-match play. On
this map, the only goal is that each player should kill as many other players
4 http://boards.lineage2.com/showflat.php?Number=573737
5 http://www.gotfrag.com/quake/home/
6 http://planetquake.gamespy.com/
7 http://q2scene.net/ds/
8 http://www.revilla.nildram.co.uk/demos-full.htm
(a) Human players (b) CR Bot
(c) Eraser Bot (d) ICE Bot
Fig. 1. Presence locations of all players
the CR Bot navigation map in Fig. 1(b) does not indicate the presence of
bots.
2. To reduce the probability of being attacked, human players normally avoid
open spaces. Therefore, in Fig. 1(a) we observe that human players avoided
the plaza in the middle of the map, and stayed in the surrounding corridors
instead. This is indicated by the high density of plots in the corridors. In
contrast, game bots often stay in the central plaza, probably because it
occupies a large space and it is easy to get everywhere from this area.
3. Even though human players spend most of their time in narrow areas and
conﬁned rooms, there are large variations in their trajectories. There are two
reasons for this phenomenon. 1) The width of the main routes is quite large.
Rather than stay in the middle of a route, players move irregularly within
the limited space. This may be due to players’ preferences; hence, some
players may move along the wall of the path, while others may walk straight,
unless the avatar is blocked by a wall or other obstacles. 2) As ﬁghts may
occur anytime-anywhere, human players often move strategically to dodge
current or potential attacks. On the other hand, we ﬁnd that diﬀerent game
bots adopt very diﬀerent movement patterns over the routes. The movement
paths of CR Bot and Eraser Bot (Fig. 1(b) and Fig. 1(c) respectively) are
dense and easy to see. This suggests that these bots tend to follow exact
movement patterns when moving through the same corridor. In contrast, ICE
Human CR Eraser ICE
0
50
15
0
25
0
On Period Mean
Human CR Eraser ICE
0
50
10
0
20
0
On Period SD
Human CR Eraser ICE
5
10
15
20
Off Period Mean
Human CR Eraser ICE
0
5
15
25
35
Off Period SD
Fig. 2. The distribution of features related to ON/OFF periods.
2. Pace In games, avatars are generally allowed to move at diﬀerent speeds and
in diﬀerent ways, such as running, slow walking, step-by-step walking, lateral
shifting, and moving backwards. In addition, players can stop the current move-
ment and proceed with another movement in diﬀerent direction in sub-seconds;
therefore, the resulting avatar movements can be highly variable. One simple
way to characterize the dynamics of an avatar’s movement is by the pace of its
movements. We deﬁne the pace as the displacement of an avatar’s coordinate in
one second, and extract the mean and standard deviation of the pace as two fea-
tures. We ﬁnd that the paces of most avatars are generally small, although they
can be large occasionally. To characterize the variability of paces when players
move fast, we also deﬁne the “large pace SD,” which is the standard deviation of
paces larger than 10 units.
In addition to normal movements, players may teleport their avatars to a
remote place instantly through a teleportation spot. Teleportation may also be
used when an avatar dies. It will be transferred to the rebirth spot so that its life
points can be recharged. We detect teleportation occurrences by computing if the
oﬀset in one second is longer than 60 units and deﬁne the feature “teleportation
rate” as the average count of teleportation occurrences recorded in one second.
Fig. 3 shows the distribution of the four features related to the movement
pace and teleportation. Although the means of the paces of diﬀerent player
types are dissimilar, the variations are not large. This shows that the four player
types have diﬀerent but consistent micro-movement behavior in small time scales.
The standard deviation of the pace also has large discriminability, where that
of human players and Eraser Bot have similar magnitude. The large standard
Human CR Eraser ICE
0.
01
0.
03
0.
05
Linger Frequency
Human CR Eraser ICE
15
20
25
30
35
Linger Length
Human CR Eraser ICE
0.
80
0.
90
1.
00
Smoothness
Human CR Eraser ICE
5
10
15
Detourness
Fig. 4. The distribution of features related to movement path.
Detour. We deﬁne another feature “detour” to quantify the eﬀectiveness of
user movements. If an avatar is at (x1, y1) at time t1 and at (x2, y2) at time t2,
we compute the detour by dividing the length of the movement by the eﬀective
oﬀset of an avatar during the period (t1, t2).
The distributions of the above features are plotted in Fig. 4. The graph
shows that the linger frequency and duration of human players are signiﬁcantly
less than those of game bots. This is reasonable because lingering in a place for a
long time is a dangerous, as the player may be noticed and induce opponents’ ﬁre.
The smoothness of human players is the lowest of the four player types, which
supports the intuition that human players’ movements are the most irregular and
unpredictable. The detour feature shows that Eraser Bot moves very ineﬃciently
in terms of the avatar’s eﬀective oﬀset. In contrast, the movements of human
players are relatively more eﬃcient. We suspect this is because human players
tend to move away from current positions to another place eﬃciently even though
they may move irregularly and strategically; thus, the resulting avatar trajectory
exhibits both unpredictability and eﬃciency which seem contradictory.
4. Turn Our ﬁnal set of features is based on the frequency and amplitude of how
avatars change direction. Our rationale is that each time an avatar changes di-
rection, the magnitude of the change should be dependent on player conventions
and bot routing algorithms.
Assume an avatar is at (x1, y1) at time t, at (x2, y2) at time t + p, and at
(x3, y3) at time t + 2p. If the angle between two vectors (x2 − x1, y2 − y1) and
(x3 − x1, y3 − y1) is greater than a, we determine that a turn with angle a
200 400 600 800 1000
0.
0
0.
2
0.
4
0.
6
0.
8
1.
0
Observation time (sec)
Ac
cu
ra
cy
100 300 500 700 900
ON/OFF features
Pace features
Path features
Turn features
All features
Fig. 6. Classiﬁcation accuracy between human and bots.
guish between human players and game bots, by using the classiﬁer to perform
10-fold cross-validation. In real-life scenarios, the trace length plays an impor-
tant role because it determines how quickly a game bot can be detected. Thus,
we evaluated the performance of our scheme on diﬀerent traces lengths, as shown
in Fig. 6. The graph shows that the detection accuracy is higher than 90%, even
when the trace length is as short as 100 seconds. Longer traces yield better
accuracy. To determine which category of features yields the highest accuracy,
we plot the classiﬁcation performance for each category of features. The results
indicate that the features related to the movement pace, direction changes, and
ON/OFF periods all yield good results, while path-related features only exhibit
good discriminability when the trace length is 800 seconds or longer.
Furthermore, we perform a player-type classiﬁcation; that is, we not only
determine whether a character is controlled by a human player or a bot program,
but also identify the bot program used if appropriate. The results are shown in
Fig. 7. The classiﬁcation accuracy of the player types is even better than that
of the human-bot scenario when the trace length is longer than 200 seconds.
With a trace length of 500 seconds or longer, our scheme yields a classiﬁcation
accuracy of 98% or higher. However, in this setting, individual feature categories,
except those related to movement paces, exhibit low discriminability when they
are applied to the classiﬁcation separately.
7 Conclusion
We have proposed a trajectory-based approach for detecting game bots. It is a
general technique that can be applied to any game in which the avatar’s move-
ment is controlled by the players directly. Our analysis of real-life traces shows
that the trajectories of human players and game bots are very dissimilar. The
performance evaluation results show that our bot detection scheme can achieve
An Analysis of WoW Players’ Game Hours∗
Pin-Yun Tarng1, Kuan-Ta Chen2, and Polly Huang1
1Department of Electrical Engineering, National Taiwan University
2Institute of Information Science, Academia Sinica
b92901139@ntu.edu.tw, ktchen@iis.sinica.edu.tw, phuang@cc.ee.ntu.edu.tw
ABSTRACT
Online gaming has become increasingly popular in recent
years. Currently, the most common business model of on-
line gaming is based on monthly subscription fees that game
players pay to obtain credits, which allow them to start
or continue a journey in the game’s virtual world. There-
fore, from the perspective of game operators, predicting how
many players will join a game and how long they will stay
in the game is important since these two factors dominate
their revenue.
This paper represents a pilot study of the predictability
of online gamers’ subscription time. Speciﬁcally, we study
the gameplay hours of online gamers and investigate whether
strong patterns are embedded in their game hours. Our ulti-
mate goal is to provide a prediction model of online gamers,
which takes a player’s game hours as the input and predicts
whether the player will leave in the near future. Our study
is based on real-life traces collected from World of Warcraft,
a famous MMORPG (Massively Multiplayer Online Role-
Playing Game). The traces contain the gameplay histories
of 34, 524 players during a two-year period. We believe that
our study would be useful for building a prediction model
of players’ future game hours and unsubscription decisions;
i.e., decisions not to renew subscriptions.
1. INTRODUCTION
Online gaming has become increasingly popular in recent
years. In [6], it is reported that over 55% of Internet users
are now also online gamers. Currently, the most common
business model of online gaming is based on monthly sub-
scription fees that game players pay to obtain credits, which
allow them to start or continue a journey in the game’s vir-
tual world. Therefore, from the perspective of game opera-
tors, predicting how many people will join a game and how
long they will stay in the game is crucial, since these two
∗This work was supported in part by National Science Coun-
cil of the Republic of China under the grant NSC97-2221-
E-001-009.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
NetGames’08, Worcester, MA, USA
Copyright 2008 ACM 978-1-60558-132-3-10/21/2008 ...$5.00.
factors dominate their revenue.
Predicting how many gamers will join a game before a
game’s launch is very diﬃcult, if not impossible, since it
involves many non-game-related factors, such as the release
date of the game (whether it is launched during the summer
vacation), the artistic design (whether it is comic-like or
realistic), cultural issues (whether it is Eastern- or Western-
style), and even advertising strategies. Predicting how long
players will stay once they join a game is more feasible, as it
should correlate with the extent of users’ involvement in the
game’s virtual world. Usually, this can be inferred from the
players’ external behavior, such as how quickly their avatars
advance to new levels and how long they spend in the game
each day.
This paper presents a pilot study of predicting online
gamers’ subscription times. A player’s subscription time de-
notes the length of time since he/she ﬁrst joined the game
to the time of his/her last login, i.e., the player has not
logged in since then. Speciﬁcally, we study the gameplay
hours of online gamers and investigate whether strong pat-
terns are embedded in their game hours. Our ultimate goal
is to provide a prediction model of online gamers that takes
a player’s game hours as input and predicts whether the
player will decide not to continue in the game once his/her
current subscription expires. In this paper, we use the term
unsubscription decisions to describe such decisions. Predic-
tions about players’ unsubscription decisions are important
to game operators because the decisions aﬀect the operators’
revenue directly. Our rationale is that, if we can predict
the subscription time of players before they actually leave a
game, the game operator can take remedial action to pre-
vent the players’ departure and improve the game based on
feedback provided by those players.
Predictions about players’ subscription time can provide
the following beneﬁts:
1. Players usually quit a game because they are dissatis-
ﬁed with the game’s design or content, or even other
players’ cheating activities. Thus, to some degree,
player unsubscriptions should indicate low user satis-
faction. In other words, if we can predict which players
will leave the game in the near future, we may have
a chance to stop them leaving, or at least understand
their reasons and make future improvements. To this
end, operators could conduct surveys to determine the
causes of player dissatisfaction and improve the game
accordingly. However, it is more likely that opera-
tors would receive useful comments because dissatis-
ﬁed players who have been totally disappointed with
WoW trace
Start date 2005-12-22
End date 2007-10-17
Length 664 days
Total sessions 1,672,820
Accounts observed 34,521
Table 1: Trace description
0 100 200 300 400 500 600
0.0
0.2
0.4
0.6
0.8
1.0
Subscription time (day)
Su
rv
iva
l c
ur
ve
365
Figure 1: The survival curve of players’ subscription
times
terns of WoW players, in our analysis, we only use the 7043
accounts whose subscription periods are longer than 30 days.
4. HOW LONG DO GAMERS PLAY?
In this section, we examine “how long” gamers play from
various in terms of the overall subscription time, consecutive
gameplay days, and daily gameplay activity.
4.1 Subscription Time
In this study, we consider that a player has quit a game if
he/she does not login into the game for three months. Note
that some players’ subscription periods are censored, i.e.,
some players started playing WoW before our measurement
started, and some continued playing after our measurement
ended. Thus, we cannot directly estimate the distribution
of players’ subscription times by a cumulative distribution
function (CDF). Instead, we use the Kaplan-Meier estima-
tor [3], which takes account of the censored status of each
subscription period, to estimate the distribution of players’
subscription times. The Kaplan-Meier estimator’s output is
called the survival function, which reduces to the cumulative
distribution function if none of the subscription periods are
censored.
The survival function of players’ subscription times is shown
inbscribe to WoW continuously for longer than one Fig. 1.
We observe that, probabilistically, 60% of users will suyear
after their ﬁrst visits, while 50% of users will subscribe for
longer than 500 days. This result indicates that the game is
indeed very attractive game, and most players seem to be-
come addicted to its fantasy world once they become crea-
tures in it.
4.2 Consecutive Game Play Days
Intuitively, if users regularly play the game every day for a
long period, they are probably addicted to the game. Thus,
we consider the distribution of consecutive game play days in
order to understand the extent of addiction of WoW gamers.
1 2 5 10 20 50 100
0.0
0.2
0.4
0.6
0.8
1.0
(a) Period length (day)
CD
F
ON period
OFF period
1 2 5 10 20 50 100 200 500
0.0
0.2
0.4
0.6
0.8
1.0
(b) Season length (day)
CD
F
Season
Vacation
Figure 2: Cumulative distribution functions of
ON/OFF periods and season lengths
We deﬁne an ON period as a group of consecutive days dur-
ing which a player joins the game everyday, and an OFF
period as the interval between two ON periods.
Fig. 2(a) is the cumulative distribution function of the
length of ON and OFF periods. We observe that OFF pe-
riods are slightly longer than ON periods on average, but
the diﬀerence is insigniﬁcant. In addition, probabilistically,
around 80% of the gamers’ ON and OFF periods are shorter
than 5 days. In other words, players tend to alternate be-
tween ON and OFF periods shorter than 5 days. This might
be due to MMORPG’s addictive characteristics; that is, a
player may not like to leave the game for a long time, as
doing so may cause him to lose the sense of playing a role in
the game world, and become less familiar with the virtual
world. Therefore, players tend to come back to the game
world frequently to continue their onward journey or simply
to keep company with their partners or guild companions.
We observe that some OFF periods are extremely long;
for example, 3% of OFF periods are longer than 1 month,
and 1% are longer than 3 months. This may be due personal
reasons that force gamers to stop playing the game for a long
period, such as preparing for exams, beginning a new job,
or running out of money to purchase subscription credits.
In addition, we ﬁnd that, even after a long OFF period,
gamers may come back and play the game as seriously as
before. Hence, we need to divide a player’s subscription time
into a number of active periods, where two adjacent active
periods are separated by a long rest period from the game.
We call each active period a season, and a long rest period
between two seasons a vacation. More speciﬁcally, we deﬁne
a vacation as an OFF period that is longer than 30 days,
and a season as an active period between two vacations.
The cumulative distribution functions of the lengths of
seasons and vacations are shown in Fig. 2(b). From the
graph, we ﬁnd that vacations are generally longer than sea-
sons, but the diﬀerence is not signiﬁcant. Furthermore, we
ﬁnd that around 50% of the seasons are longer than 60 days.
This indicates that WoW gamers tend to become addicted
to the game, so it is common for them to spend longer than
2 months without a vacation during their adventure in the
game’s virtual world. In addition, we can see that less than
20% of vacations are longer than 180 days, which indicates
that, after a vacation longer than half a year, only 20% of
the gamers will return to the game. We also observe that
around 20% of the seasons are shorter than 10 days, which
indicates that some gamers will come back from a vacation
to join the game for only a few days and then take another
vacation.
0.2 0.5 1.0 2.0 5.0 10.0
0.5
1.0
2.0
5.0
10.0
20.0
50.0
(a) Session time (hr)
O
N 
pe
rio
d 
le
ng
th
 (d
ay
)
cor = 0.47
0.5 1.0 1.5 2.0 2.5 3.0
0.5
1.0
2.0
5.0
10.0
20.0
50.0
(b) Daily session count
O
N 
pe
rio
d 
le
ng
th
 (d
ay
)
cor = 0.46
0.1 0.2 0.5 1.0 2.0 5.0 10.0
0.5
1.0
2.0
5.0
10.0
20.0
50.0
(c) Daily playtime (hr)
O
N 
pe
rio
d 
le
ng
th
 (d
ay
)
cor = 0.54
0.2 0.5 1.0 2.0 5.0 10.0
50
100
200
500
(d) Session time (hr)
Se
as
on
 le
ng
th
 (d
ay
)
cor = −0.11
1.0 1.5 2.0 2.5 3.0
50
100
200
500
(e) Daily session count
Se
as
on
 le
ng
th
 (d
ay
)
cor = −0.14
0.2 0.5 1.0 2.0 5.0 10.0
50
100
200
500
(f) Daily playtime (hr)
Se
as
on
 le
ng
th
 (d
ay
) cor = 0.13
0.2 0.5 1.0 2.0 5.0 10.0
50
100
200
500
(g) Session time (hr)
Su
bs
cr
ip
tio
n 
tim
e 
(da
y)
cor = −0.17
1.0 1.5 2.0 2.5 3.0
50
100
200
500
(h) Daily session count
Su
bs
cr
ip
tio
n 
tim
e 
(da
y)
cor = −0.18
0.2 0.5 1.0 2.0 5.0 10.0
50
100
200
500
(i) Daily playtime (hr)
Su
bs
cr
ip
tio
n 
tim
e 
(da
y)
cor = −0.18
Figure 5: Predictability of daily playtime, daily session count, and session time
length of ON periods, the average season length, and the
overall subscription time may correlate with players’ long-
term behavior.
Fig. 5 shows the plots of the correlations between the three
short-term behavioral factors and the three long-term be-
havioral factors. We observe that the lengths of the average
ON periods are moderately correlated with all the short-
term behavioral factors, and the average daily play time has
the strongest predictability. Fig. 5(c) shows that, if play-
ers’ average daily game time is shorter than 1 hour, then
their average ON periods will probably be less than 2 days,
i.e., these players tend not play the game for three consec-
utive days. On the other hand, the average daily playtime
of highly addicted players can be as high as 10 hours, and
they may play the game for more than 20 days without in-
terruption. However, it is clear that the average length of
seasons and the overall subscription time do not correlate
with all the short-term behavioral factors. Since this indi-
cates that players’ interests may change signiﬁcantly over
time, we cannot simply use an overall average of players’
short-term behavior to predict their long-term gameplay be-
havior. Instead, we need to monitor the evolution of players’
game hours over time and keep track of their interest in the
game [5] in order to accurately predict when unsubscription
will occur. We will consider this issue in our future work.
6.2 Players’ Game Hours in Consecutive Pe-
riods
We also consider the temporal dependence of players’ game
hours in consecutive periods. In other words, we examine
whether players’ gameplay behavior in one time period will
be carried over to the following period. As shown in Fig. 6,
ﬁve types of time periods are considered: session, day, week,
ON period, and season. Not surprisingly, the overall play-
time between consecutive weeks exhibits the strongest auto-
correlations among all the time scales we consider. Session
time and daily playtime are also strongly auto-correlated;
however, the magnitude is not as strong as that of weekly
playtime. The reason may be that the weekly patterns are
the most regular for most people, while session times and
daily playtimes are more easily aﬀected by events and the
diﬀerent schedules on weekdays and weekends. On the other
hand, the auto-correlation of ON period playtime is also
moderate, although the length of consecutive ON periods
is less regular. The season length has no auto-correlations
at all, which we consider reasonable as consecutive seasons
are actually separated by a rest period longer than 30 days.
Moreover, a season might be long enough to aﬀect or change
players’ interest in the game. This implies that the predic-
tion of players’ unsubscription should be performed in a time
scale shorter than a season.
Table 3 summarizes the ﬁndings discussed in this section.
7. SUMMARY AND FUTURE WORK
In this paper, we study players’ game hours for a famous
MMORPG, the World of Warcraft, during a 2-year period.
We analyze when gamers join the game’s virtual world and
how long they stay in the game. In addition, we investi-
gate whether players’ future game hours can be predicted
by their previous behavior. Our results indicate that al-
though short-term prediction is feasible, long-term predic-
tion is much more diﬃcult as players’ interest in the game
may increase or decrease signiﬁcantly over time.
