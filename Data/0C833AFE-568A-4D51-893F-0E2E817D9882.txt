行政院國家科學委員會補助專題研究計畫 ■ 成 果 報 告   □期中進度報告 
 
 
（計畫名稱）：非對稱解析度之無接縫式即時電腦畫面錄製研究 
 
 
計畫類別：■個別型計畫   □整合型計畫 
計畫編號：NSC 99-2221-E-030-009 
執行期間：99 年 8 月 1 日至 100 年 7 月 31 日 
 
執行機構及系所：輔仁大學資訊工程學系 
 
計畫主持人：張信宏 
共同主持人：無 
計畫參與人員：劉俊毅，張貴雄與陳韋廷 (兼任研究助理) 
 
 
成果報告類型(依經費核定清單規定繳交)：■精簡報告  □完整報告 
 
本計畫除繳交成果報告外，另須繳交以下出國心得報告： 
□赴國外出差或研習心得報告 
□赴大陸地區出差或研習心得報告 
□出席國際學術會議心得報告 
□國際合作研究計畫國外研究報告 
 
處理方式：除列管計畫及下列情形者外，得立即公開查詢 
            ■涉及專利或其他智慧財產權，□一年■二年後可公開查詢 
 
中   華   民   國 一百 年 七 月 三十一 日 
1024
768
Start Window Taskbar
Remote 
Computer
Vertical 
Scrollbar
Horizontal Scrollbar
(B)
(A)
Client
Computer(C)
Uncovered
Area
 
圖二：非對稱電腦解析度之遠端操控應用系統圖。 
此外，還有一種應用，若較年長的人想學習電腦應用程式，或者是學生要展示程式時，
通常都會因為螢幕所顯示的文字或畫面太小而感到不便，而在將螢幕畫面解析度放大之後，便
可讓年長的人學習較無障礙，也可明顯將學生想表達的東西顯現出來。還有另一種應用則是，
當使用者資料只存在手機裡面，而想把這個資料報告給聽眾看時，可透過電腦畫面解析度放大
機制，先將手機畫面放大到電腦，再由電腦或接上投影機放大即可方便使用。遠端電腦解析度
小而客戶端電腦解析度大，在客戶端電腦無法全螢幕播放。如圖三所示：遠端電腦的電腦解析
度為 800×600，客戶端電腦的電腦解析度為 1024×768，在客戶端電腦的寬與高都是遠端電腦的
1.28 倍。遠端電腦將畫面傳送給客戶端電腦之後，客戶端電腦要將畫面展示到桌面來顯示，
因為客戶端電腦電腦解析度比遠端電腦大，則客戶端電腦無法全螢幕顯示畫面，畫面只會佔客
戶端電腦螢幕的部分畫面。 
 
圖三:800×600 解析度畫面放大至 1024×768 解析度畫面。 
因此，本研究計畫，提出了一套「無接縫式即時電腦畫面錄製機制」，可以即時的將電腦解析
度，根據需求，進行放大與縮小。本研究計畫所提出的無接縫式即時電腦畫面錄製機制，不僅
在系統資源需求上(CPU 使用率)，較傳統的方法少，並且同時保證了電腦畫面錄製的品質。不
會造成電腦畫面解析度進行放大與縮小時，畫面影像失真，無法辨識。 
關於電腦畫面錄製技術，去年國科會研究計畫成果，Shin-Hung Chang and Jiun-Yi Liou, 
“SGA: A Sporadic GDI Adapter for Smooth Motion Recording on Computer Screen”，發表於 9th 
IEEE/IFIP International Conference on Embedded and Ubiquitous Computing 2011 (EUC-2011) 
(EI)。這個國際研討會，論文接受率很低，每一篇論文至少 3位審查者進行審查，能被接受，
實屬不易。而今年的國科會研究成果，關於即時解析度調整的研究成果，Shin-Hung Chang, 
之後檔案太大，也都是接連出現的問題。 
為了避免對電腦硬體需求依存度過高，在系統安裝一個錄製模組在被錄製的電腦，進行
錄製。這個錄製模組，將電腦畫面進行擷取，再組合成一連續畫面，形成電腦畫面錄製資料。
一般來說，電腦畫面不會每個時間點，所有部分都在改變更新。因此，本研究只錄製有更改變
動的部分(稱為 screen differences)。這樣不僅能使得錄製效果好，錄製出來的資料量又小。 
 
 
圖四：錄製變動部分的電腦畫面錄製系統。 
如圖四所示為一只錄製變動部分的電腦畫面錄製系統。電腦畫面錄製模組會先錄製出一
個全畫面(Full Screen)，此外，會錄製出許多變動部分(Screen Differences)。這樣的即時
電腦畫面錄製技術，若是每一次，擷取的都是一整張電腦畫面(Full Screen)，就可以直接根
據非對稱解析度的比例，進行放大與縮小。然而，本計畫提出的電腦畫面錄製機制是當電腦畫
面有變動的時候才進行擷取，而且擷取的也只有變動區域的資料。若是直接根據這一連串的更
新資料，直接做比例的調整，在顯示端電腦，則必會產生接縫無法完全貼合，或出現失真的狀
況。這樣的失真會累加，會使得即時電腦錄製系統的顯示品質大大降低。 
因此，本研究計畫的主要目的，針對這個在畫面錄製中的 ASR 問題，進行分析與研究，
並找一個很有效果又有效率的解決方法。讓本研究計畫的即時電腦畫面錄製系統，不再侷限於
特定的解析度，而是可以應用於可變動的解析度裝置上。在本研究計劃中，我們有解決了兩個
問題，(1)將大量的變動更新畫面資料，在解析度不同的情況下，能進行無縫的處理。(2)在解
析度不同時，電腦畫面錄製在顯示端播放時，不會有失真的情況出現。由實驗的數據得出，本
研究計畫提出的方法，系統 CPU 使用率較傳統方法減少了 30%，並同時保持了電腦畫面錄製的
品質。 
 
三、研究方法： 
(1)無法使用微軟 Win32API 的原因 
圖形解析度調整的方式，在微軟的內建函式中就有「stretchblt( )」，這 Win32API 可以使用。
此 stretchblt( )函式，可以將接收到的圖片縮放成應用所希望的大小。然而，在一般的單張
圖形的縮放上，是一個很好用的函式。但是在於隨時隨地接收到不同畫面更新大小和位置的電
腦畫面錄製系統上，這並不是一個良好的選擇，因為沒辦法去限制他縮圖的時候會做出怎樣的
處理方式。每接收一張圖，第一條掃描線都是從座標軸(0,0)開始計算，接著從左到右從上到
 
 
 
圖七：使用 stretchblt( )函式於電腦畫面解析度調整之應用示意圖。 
 
(2)採用行列解析度調整法 
本研究計畫，採用補點與刪點方式，經過一個運算之後，判斷出哪些行哪些列需要進行補點或
刪點。如圖八所示：以 800×600 解析度畫面要放大到 1024×768 畫面相對應的位置為例。首先
α 代表畫面寬的放大倍率、以 800×600 解析度放大至 1024×768 解析度為例，α 為 1024/800，
而 β為畫面高的放大倍率 768/600，因此行以及列的放大倍率 α=1.28、β=1.28(α、β的放大倍
率不一定相同)，接著再將要判斷的行以及前一行乘上 α，兩者整數部分相減如式子
⎣ ⎦ ⎣ ⎦αα ×−×+ pp )1( ，p代表目前的像素點位置，假設目前的點 p=1，則代入 ⎣ ⎦ ⎣ ⎦αα ×−×+ pp )1(
得 1，當 ⎣ ⎦ ⎣ ⎦αα ×−×+ pp )1( ≧2時會進行補點動作。 
 
   
圖八：以放大解析度的補點示意圖。 
 
圖九所示，為行點位置示意圖，(a)、(b)分別代表 800×600 解析度和 1024×768 解析度的畫面儲
存記憶體，數字代表像素的編號，如圖九(a)所示，800×600 解析度畫面編號 0 的像素要複製到
1024×768 解析度的 0 畫面位置，像素編號 1、2 也是相同，像素編號 3 因為被判斷為補點，所
以像素編號 3 在複製到 1024×768 解析度畫面的記憶體時，要複製兩次。接著編號 4、5、6 不
需補點，所以直接複製一次到 1024×768 解析度的畫面儲存記憶體，編號 7 判斷為補點，一樣
(a)整張畫面刪除的掃描線 (b)部分區域更新刪除
的掃描線 
(c)合併之後的結果 
由前述補行與補列的概念，本研究計畫提出 R2A 演算法，演算法如下所示： 
(1) R2A (Birect , Bcscreen, Ri(l,t,r,b)) algorithm 
(2) { //Adapting resolution from (m × n)  to (p × q) 
(3)    //Birect     : ith incoming rectangle buffer address 
(4)    //Bcscreen: Client screen buffer address 
(5)    //Ri(l,t,r,b): ith incoming rectangle region information 
(6)    α=p/m; β=q/n;  
(7)    Ri(w)=Ri(r)-Ri(l);    //width of ith incoming rectangle 
(8)    Ri(h)=Ri(b)-Ri(t);    //height of ith incoming rectangle 
(9)    for(x = 0; x < Ri(h); x ++) 
(10)    {//Bcr: Update region address in buffer Bcscreen 
(11)       Bcr=Bcscreen+ ⎣ ⎦ ⎣ ⎦βRq1)αR( (l)i(t)i ×+×−× ; 
(12)       idx=0; 
(13)       c= ⎣ ⎦ ⎣ ⎦ αx)(Rα)1)x(R (t)i(t)i ×+−×++ ; 
(14)       if (c !=  0) 
(15)         {for(y = 0; y < Ri(w); y ++) 
(16)           {r= ⎣ ⎦ ⎣ ⎦ βy)(Rβ)1)y(R (l)i(l)i ×+−×++ ; 
(17)             PixelCopy(Bcr+x×q+idx, Birect+ x×Ri(w)+y, r); 
(18)             idx += r;}} 
(19)       if (c = = 2) 
(20)         PixelCopy(Bcr+(x+1)×q, Bcr +x×q, Ri(w)×β);}} 
 
The algorithm of R2A method has three input parameters, Birect, Bcscreen , and Ri(l,t,r,b). Birect records 
memory address of storing ith incoming screen difference, an update rectangle data. Bcscreen records 
the screen buffer address in a client computer. The R2A method adjusts this ith screen difference, 
Birect, and updates it in the screen memory Bcscreen. Ri(l,t,r,b) records the area information of the ith 
incoming rectangle data, Birect(left, top, right and bottom). α and β indicate the screen resolution 
resizing ratio of height and width, respectively. Ri(w) and Ri(h) are the width and height of a ith 
incoming rectangle, where Ri(w)=Ri(r)-Ri(l) and Ri(h)=Ri(b)-Ri(t). In the line (11), the R2A method 
calculates the beginning memory address, Bcr, for updating the incoming screen data in the screen 
memory Bcscreen, where Bcr=Bcscreen+ ⎣ ⎦ ⎣ ⎦βRq1)αR( (l)i(t)i ×+×−× . The R2A method scans each row with 
length Ri(w) and copies each pixel data of an incoming screen difference into the client screen 
memory. The R2A method will handle total Ri(h) rows. In the line (13), the R2A calculates value 
c= ⎣ ⎦ ⎣ ⎦ αx)(Rα)1)x(R (t)i(t)i ×+−×++ . Variable c contains one of three distinct values, 0, 1, or 2. If the R2A 
algorithm handles resolution resizing down process, variable c will contain value 0 or 1. Conversely, 
if the R2A algorithm handles resolution resizing up process, variable c will contain value 1 or 2. The 
R2A method skips a row when c is equal to 0 but complements an extra row when c is equal to 2. 
Similarly, the R2A algorithm skips a pixel when r is equal to 0 but complements an extra pixel when 
r is equal to 2, where r= ⎣ ⎦ ⎣ ⎦ βy)(Rβ)1)y(R (l)i(l)i ×+−×++ . The R2A method uses a proprietary, 
PixelCopy(d, s, l), function call for handling pixel data copy, which copies pixel data from source 
memory address s to destination memory address d with length l. 
 
(2)進階 R2A+：Real-time Resolution Adapter plus 演算法： 
為了讓解析度調整的品質更好，本研究計畫提出一套進階演算法 R2A+，合併採用了 bilinear
內差法的技術。演算法如下所示： 
 
 
(3)實驗數據與結果： 
本研究計畫進行了一系列實驗，來說明所提出 R2A 與 R2A+演算法的效果。本研究計畫使用
Windows7 的「performance monitor」軟體追蹤各式應用中，在運作電腦系統錄製時的 CPU 使
用率。首先，測試了傳統整張圖形放大與縮小的方法。在圖十一，說明在網頁瀏覽與使用報告
檔報告的應用時，CPU 的平均使用率與趨勢，均為 40% 左右。 
  
(a)AVG CPU: 41.36%  (b)AVG CPU: 40.14% 
(a)Web Browsing Application. (b)Slide Show Application. 
圖十一：傳統整張圖形放大與縮小的方法。 
 
接下來，圖十二顯示，同樣在網頁瀏覽與使用報告檔報告的應用時，使用 R2A 與 R2A+演算法的
CPU 使用率結果。 
 
R2A
 
 
R2A+
 
AVG CPU: 5.48%       AVG CPU: 9.41% 
(a) Web Browsing Application. 
 
R2A
 
 
R2A+
 
                   AVG CPU: 4.12%    AVG CPU: 11.53% 
(b) Slide Show Application. 
圖十二：R2A 與 R2A+演算法之解析度放大與縮小的方法。 
 
由實驗結果，可看出 CPU 的平均使用率，使用 R2A 與 R2A+演算法時，下降了近 30%，下降的幅
度非常的大。此外，因為此 R2A 與 R2A+演算法，實做於應用層。因此很容易的被應用到這種應
用之中，在於畫面錄製時，有效處理解析度不同的問題，也不佔太多系統資源。本研究計畫之
研究成果已被接受於 IEEE APSCC 2011 國際研討會。Shin-Hung Chang, Kuei-Hsiung Chang, 
and Wei-Ting Chen, “R2A:Realtime Resolution Adapter for Asymmetric Computer Screen 
Recording”, 2011 IEEE Asia-Pacific Services Computing Conference, (IEEE APSCC 2011) (EI)。將
在今年年底進行發表。期刊論文版本也正在審查之中。論文全文，以上傳至國科會網站之中。 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：張信宏 計畫編號：99-2221-E-030-009- 
計畫名稱：非對稱解析度之無接縫式即時電腦畫面錄製研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際
已達成數)
本計畫
實際貢
獻百分
比 
單位 
備註（質化說明：如
數 個 計 畫 共 同 成
果、成果列為該期刊
之封面故事...等）
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 3 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 1 100% 審查中 
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
Shin-Hung Chang, 
Kuei-Hsiung Chang, 
and Wei-Ting 
Chen, ’R2A:Realtime 
Resolution Adapter 
for Asymmetric 
Computer Screen 
Recording’, 2011 
IEEE Asia-Pacific 
Services Computing 
Conference, (IEEE 
APSCC 2011) (EI) 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
