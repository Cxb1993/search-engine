 中文摘要 
在 1989年， Koblitz建議使用超橢圓曲線上的 Jacobian加法群定義了一個有限域，實
作離散對數加密協定。Jacobian所形成的離散對數問題被稱為超曲線離散對數問題
（ HCDLP ） 。在含有 q個元素的有限域 Fq中，虧格(genus)為 g的超橢圓曲線，其
加法群大小為 ，比橢圓曲線上的加法群 大。且由於沒有次指數的演算法來解
小虧格的 HCDLP問題；所以超曲線密碼系統據此可適用比橢圓曲線密碼系統較短的
密鑰長度，以實現相同的安全水平。  
( )gO q ( )O q
當超橢圓曲線的虧格足夠大時，index calculus attack用在 HCDLP上可達到次指數的時
間複雜度，因此小虧格比較適合用來實作以離散隊數問題為基礎的密碼系統。而對於
小虧格的 HCDLP ，生日攻擊法的時間複雜度是 2( )
g
O q ，而基本 index calculus 攻擊演
算法是 。 Thériault利用”大質數”的方法來改進，並取得了運行時間為2( )O q
4
2
2 1( )gO q
−
−
。
此外，Gaudry等人進一步使用兩個大質數的演算法變型，來解小虧格的超橢圓曲線離
散對數問題，時間複雜為
2
2
( gO q
−
)。在此論文，我們著重於小虧格的超曲線離散對數問
題的，實作並改進 index calculus的演算法變形。我們提出了一種快速圖形算法求解虧
格為 2的 HCDLP的時間複雜度為 O(q)。 
 
 
關鍵詞：超橢圓曲線、離散對數問題、HCDLP、index calculus attack、橢圓曲線。 
 
2 
 
4 
 
 
目錄 
中文摘要 ................................................................................................................................................ 2 
Abstract ................................................................................................................................................... 3 
Contents .................................................................................................................................................. 5 
Introduction ............................................................................................................................................. 5 
Definitions .............................................................................................................................................. 5 
State of the Art ........................................................................................................................................ 7 
The Fast Graph Algorithm .................................................................................................................... 10 
Time Complexity .................................................................................................................................. 12 
Computational Comparison .................................................................................................................. 13 
Reference .............................................................................................................................................. 15 
 
 
 
 
K-rational points on C.  The point ∞  is called the point at inf
inition 3 (Divisor
inity. 
Def ) 
 A divisor D is a formal sum of points in C: PD m P=
P C∈
∑ , Pm ∈] , where only a finite 
um
Definition 4 (Divisor group) 
 de ms an additive group under the addition rule: 
he set of all divisors of degree 0, ted D0, is a subgroup of D. 
Definition 5 (Principal divisor) 
n ber of mP is non-zero. 
 The set of all divisors, noted by D, for
) . 
no
 (m P n P m+ = +∑ ∑ ∑P P P P
P C P C P C∈ ∈ ∈
n P
T de
( ) ( )P
P C
div R ord R P
∈
= ∑ Let ( )R K C∈ .  The divisor of R is called a principal divisor .   
 The group of principal divisors is a subgroup of D0 and is defined by: 
Definition 6 (Principal divisor group) 
( ) { ( ) | ( )}P P C div R R K C= = ∈ .  We have that . 0P D D⊂ ⊂
Definition 7 (Jacobian) 
 
. 
 D1
The Jacobian of the curve C is defined by the quotient group: 
  J = J(C) = D0/P
If , D2∈  D0 then we write D1 ~ D2 if D1- D2∈P; D1 and D2 are said to be equivalent 
ivis rs. 
 hyperelliptic curve over a finite field Fq and JC(Fq) its Jacobian with order # 
reduced div s D1, D
d o
Definition 8 (HCDLP) 
Let C be a
2∈JC(Fq) and D2∈JC(Fq) = n.  Given two isor <D1>.  The hyperelliptic 
curve discrete logarithm problem is to find the integer λ∈[0, n-1], such that λD1=D2.  
 
In the following we introduce reduced divisor to uniquely represent the divisors in the same 
quivalence class of J. 
visor is a de  zero divisor of the form 
e
Definition 9 (Semi-reduced divisor) 
 A semi-reduced di gree
\ \
P P
P C P C
D m P m
∈ ∞ ∈ ∞
= − ∞∑ ∑  
with the following properties: 
 (ii)  if P P and m >0 then ≠ 
 (i)   mP>0,  
P P
m  = 0 , 
 =1 (iii)  . P Pif P P and m >0 then m= 
6 
 
8 
 
 such that H  can be solved in time 
even the fastest variation is not faster than Pollard’s rho method for the genus less than 3.  
In order to analyze the security of such systems, we need to know how the index calculus 
method works for solving small genus HCDLP. 
In 2000, Gaudry [4] first presented a variation of index calculus attack for a hyperelliptic 
curve of genus g over Fq that could solve the HCDLP in time 
2( )O q .   And Harley 
improved this algorithm with reduced factor base CDLP
2
2−⎛ ⎞
⎝ ⎠
1gO q +⎜ ⎟
r [4].  Furthermore, Thériault improved it by using th ost-smooth diviso
which contains exactly one large prime.  Theriault’s algorithm 
e alm
[11] works in time 
4
2
2 1gO q
−
+⎛ ⎞⎜ ⎟⎝ ⎠ . 
By considering double large prime, the time complexity of hyperelliptic index calculus 
algorithm can be reduced to 
2
2
gO q
−⎛ ⎞⎜ ⎟⎝ ⎠ .  This idea was proposed independently by Gaudry 
t 
got the same time complexity. 
However, the double large prime variation cannot be applied on genus 2 hyperelliptic curves.  
 calculus algorithm for solving HCDLP. 
et al. [5] and Naogo [10] in 2004.  They used different tricks to handle large primes, bu
We propose an algorithm that can solve the genus 2 HCDLP with time complexity O(q) 
which can be comparable to Pollard’s rho method.   
Here is a guideline to the index
 
Algorithm 1  
Hyperelliptic index calculus algorithm 
Input: A divisor D1 in JC(Fq) with known order n = ord(D1),  
and a divisor D <D1>. 
eger λ sucht that D2=λD1. 
2∈
Output: An int
Fix smoothness bound B and construct the factor base F. 
=αD1+βD2. 
relation. 
While not enough relations have been found do: 
Pick a random element R
If R is smooth, record the corresponding 
Solve the linear algebra system over Zn. 
Return λ. 
Table 1 shows the comparison betwee
has the same time complexity as Pollard’s rho met
n these algorithms described above.  Our algorithm 
hod but smaller hiding constant term.   
The Fast Graph Algorithm 
 
Our algorithm first uses a pseudo random walk to create random reduced divisors of the 
form Ri=αiD1+βiD2.  Then, create a graph G with |F| vertices corresponding to the 
elements in the factor base F, each edge specifying a relation written as the sum of the 
points.  Initially the graph G contains no edges.  If Ri is smooth then write Ri as the sum 
of at most 2 points in C(Fq), and then add the corresponding edge between these two point.  
Notice that if Ri is written as Ri=cPj-c∞ where c=1 or 2 and some Pj∈C(Fq) then it is an 
edge of self-loop of the point Pj. 
For this graph algorithm, the data structure of the graph can be implemented as an array to 
represent trees with a union-find algorithm.  In other words, we only need to record the 
parent node of each element in the array. 
To test if adding an edge (Pi, Pj) would create a cycle, we can traverse the trees from 
vertices Pi and Pj to see if they have the same root.  If adding an edge would create an 
even length cycle then we get a relation ( ) ( )1 0i i i i i iR R D Dγ γ α γ β 2= = + =∑ ∑ ∑  for some 
γi such that the discrete logarithm of D2=λD1 can be computed as 
i i
i i
γ αλ γ β= −
∑
∑ .  If adding 
an edge would create an odd length cycle then we can compute a relation R=cPi-c∞ where 
Pi is the root of the tree.  Hence we can store such information of odd length cycles 
(including self-loop) in the roots of the trees without creating cycles in the graph G.  If 
later we have another odd length cycle within the same tree then we can compute a relation 
S=dPi-d∞.  With the information of the root Pi, the relations R and S, we can compute 
dR-cS=0 which implies the discrete logarithm. 
Here is our algorithm in detail. 
 
Algorithm 1  
A fast graph algorithm for genus 2 HCDLP 
Input: A divisor D1 in JC(Fq) with known order n = ord(D1),  
and a divisor D2∈<D1>. 
Output: An integer λ sucht that D2=λD1. 
1. /* Build the factor base F */ 
For each xi qF∈ , solve v2+h(xi)v=f(xi) to find yi qF∈  such that (xi, yi) in C(Fq), and 
10 
 
R3 = P2 + P3 - 2∞, 
  We can link two trees by compute the relations of these two roots P1 and P4.  Let R3’ = 
R1+R2 – R3 = P1 + P4 - 2∞.  Add the edge R3’ into the graph and discard R3. 
 
          
  Figure 1 An even length cycle.      Figure 2 merge two trees. 
 
 
Time Complexity 
 
In order to analyze the time complexity of this algorithm, we refer to Flajolet, Knuth and 
Pittel’s work[3], which provides comprehensive knowledge of the cycle appearance in 
random graphs.  We quote some of their results here. 
Definition 1 (Uniform model) 
The uniform model is a procedure to enrich an initially empty graph on the vertices 
{1,2,…,n}. At each step we generate an ordered pair <x, y>, where x and y are uniformly 
distributed between 1 and n, and all n2 pairs are equally likely.  The (undirected edge) x－
y is then added to the graph.  In this way we obtain a multi-graph, which may have 
duplicate edges or self-loops x－x. 
A bicyclic component in a graph is a component with more than one cycle. 
Corollary 1 (Expected time) [3]  
In the uniform model, the first cycle appears at the expected time 3
n
m ≈
 steps.  And at this 
time, the expected cycle length is of order , and the size of the component containing 
the first cycle will be .  The waiting time for the first bicyclic component is 
approximately . 
1/6n
( 1/ 2nθ )
/ 2n
The graph constructed in our algorithm can be viewed as the uniform model with |F|=O(q) 
vertices.  At each step of pseudo random walk, the relation R=αD1+βD2 is smooth with 
probability 1/2.  In other words, it is half chance to add an edge into the graph at each step.  
12 
 
14 
 
Average iterations 923.4 2642.8 50239.5 236119.6 
Average number 
of useless 
collisions 
1.7 0.7 1.3 2.2 
Our 
algorithm 
Average time 
(sec) 
0.236 1.018 17.394 80.809 
Average iterations 699.4 2350.4 40222 137832 
Average number 
of smooth 
divisors 
351.4 1169.2 20222.3 74338.8 
Graph size 1024 4071 65792 261993 
Average number 
of cycles 
2.1 2.2 2.9 2.9 
會議名稱 Pairing 2008 
時間 2008/9/1~3 
地點 Royal Holloway, University of London, UK 
 
 
  在 1985 年，Koblitz 與 Miller 利用橢圓曲線的特性分別提出兩個著名的橢圓
曲線密碼系統。雖然研究 ECC 的密碼應用理論從 1985 年就已開始，但是與 RSA
及 ElGamal 比較起來，ECC 的密碼應用理論顯得比較令人難以了解。但是橢圓曲
線密碼系統能帶來的好處，如較短的金鑰長度，仍使得橢圓曲線密碼學成為學術
界越來越熱門的研究。橢圓曲線密碼學最重要之國際研討會為 ECC, 今年 ECC 
2008 為第十二屆, 近五年 pairing-based 密碼為橢圓曲線密碼最主要的研究, 於去
年由 ECC 研討會分流出 pairing 研討會(pairing 2007 為第一屆), 網羅學術界、工業
界頂尖研究學者. 
 
  Pairing 2008 為第二屆國際學術研討會于 9 月 1 至 3 日在倫敦大學 Royal 
Holloway 學院舉辦。會議是由 Steven Galbraith 與 Kenny Paterson 籌辦，會中邀
請三個演講分別為 Xavier Boyen、Florian Hess 與 Nigel Smart 分別演講 The 
Uber-Assumption Family: A Unified Complexity Framework for Bilinear Groups、
Pairing Lattices 及 Pairing in Trusted Computing，另有 20 篇投稿發表，領域個別為： 
1. Cryptography 
2. Mathematics 
3. Constructing Pairing Friendly Curves 
4. Implementation of Pairings 
5. Hardware Implementation 
 
  該研討會為單場研討會，參加者計有英、美、德、法、義、比、加、非、中、
台共 74 人，其中日本人有 13 人參與，最為特色，中國則有 6 個海外學者參與，
台灣僅筆者一人。筆者全程參加，收穫心得豐碩。橢圓曲線密碼為將來之主流，
台灣上百密碼研究學者較少人碰觸，皆因數學背景不足，致較少人參與此研究，
殊為可惜。Pairing-based 密碼學牽涉數學科目如代數數論、代數幾何等，皆為數
學專業科目，將來如何引導更多數學程度好之優秀研究生參與方為正途。筆者期
待明年投稿並帶領學生參與 pairing 2009，使台灣橢圓曲線密碼研究與世界同
步。 
