1 . Introduction
Binary trees are a fundamental data structure in computer science and has been widely studied over the
past 40 years [1, 2, 4, 37]. One of the most common operations for reconstructing binary trees is the use
of rotations. The usual rotations in the past researches are the left/right rotations for balancing binary
search trees [17]. Thus a sequence of rotations can be viewed as a transformation that changes a tree into
another tree with the same number of nodes. Since tree transformation using rotations has application
on edge-coloring of binary trees [12] and is closely related to the problem of morphing (i.e., continuously
deforming) one simple polygon into another [11, 13, 14], many researches have focused on the design
of efficient way for tree transformation, especially a transformation such that the number of utilized
rotations coincides with a measure called rotation distance (i.e., the least number of rotations necessary
to convert one tree into the other). Unfortunately, it remains an open question whether rotation distance
can be computed in polynomial time if the usual rotations on binary trees are applied. Therefore, it
seems natural to consider restricted rotations in order to obtain more simple transformation. On the
other hand, one can also consider variant types of rotations (especially, massive rotations) in order to
obtain more efficient transformation.
According to the fact that any restricted rotation distance is bounded below by the usual rotation
distance, many restricted rotations have been introduced to estimate the usual rotation distance effi-
ciently. Bonnin and Pallo [6] restricted the usual rotations to a special case where rotations are allowed
only at nodes with a leaf as its left subtree. They showed that the rotation distance between two binary
trees in this case can be computed in quadratic time. Sundar [39] studied tree transformation when only
a single direction of rotation, called right rotation, is permitted. More recently, Cleary [8] considered the
case when the rotation is permitted only at two nodes, the root and the right child of the root. He proved
that 12n rotations are sufficient to complete the transformation between any two binary trees when this
restriction is adopted. This bound was improved to 4n − 8 by Cleary and Taback [9], and shown to be
sharp. Pallo [28] generalized this case to the situation where rotations are restricted only at nodes on
the right-arm of the tree. In addition, he established an efficient algorithm to compute this right-arm
rotation distance. For more information about tree transformation, please refer to [10, 24, 38] for general
concept, [20, 21, 24, 25, 26, 29] for restricted rotation operations, and [22, 23, 27, 33, 38] for the com-
putation of usual rotation distance. For example, Figure 1 shows that T1, T2 ∈ B5, wT1 = (1, 1, 2, 1, 1)
and wT2 = (1, 2, 1, 1, 3) [8]. Pallos right-arm rotation distance is equal to 4. Clearys restricted rotation
distance is equal to 6.
1
4
5
1
2
3
4
5
1, 1, 2, 1, 1 1, 1, 1, 1, 1
3
4
5
1, 2, 1, 1, 1
3
1, 2, 1, 1, 2 1, 2, 1, 1, 3
4
2
3 1
2 1
2
4
5
1
2
3
4
5
31 2
Figure 1: The rotation distance.
In contrast, if we provide a set of variant types of massive rotations that contains the usual rotations
as a special case, then this type of rotation distance is bounded above by the usual rotation distance.
However, up to now only a few attention has been given to the variant instances of massive rotations for
tree transformation. In [7], Chen et al. generalized the usual rotations by considering the four types of
rotations used in AVL trees. They proposed an efficient algorithm that constructs a sequence of rotations
for estimating this type of rotation distance. In this paper, we introduce new type rotations which can
rotate a massive part of a tree. All newly proposed rotations are unusual and differ from those of the
past. We allow rotations to be performed at nodes on the right-arm (i.e., the path from the root to its
rightmost leaf) or the left-arm (i.e., the path from the root to its leftmost leaf) of the tree. Consequently,
we develop a simple linear time algorithm that uses no more than n− 1 rotations to transform any two
binary trees. The proposed algorithm takes the left weight sequence as input which will be defined in
the next section. From an analysis of aggregate method for a sequence of weight renewals, we show that
each rotation in the algorithm has a constant amortized time. Next, we show that the rotation graph
1
a non-recursive procedure for obtaining the RW-sequence of T if the LW-sequence of T is given.
For a node i ∈ T , if wl(T, i) = 1 (respectively, wr(T, i) = 1), then we say that i has the uni-
left-weight (respectively, uni-right-weight) in T . Also, we denote L1(T ) = {i ∈ T : wl(T, i) = 1} and
R1(T ) = {i ∈ T : wr(T, i) = 1}.
Lemma 1 Let T ∈ Bn be a binary tree. Then, |L1(T )| ≥ bn2 c+ 1 or |R1(T )| ≥ bn2 c+ 1.
Proof. Since T contains n + 1 leaves and each leaf is either the left child or the right child of a node,
we have |L1(T )|+ |R1(T )| = n+ 1. Thus, the result follows directly. 
A rotation is a simple operation for reconstructing a binary tree into another tree and preserving their
inorder. Usually, we design such an operation to be performed in a constant time (e.g., four primitive
types of rotations for balancing AVL-trees [1]). In this paper, we introduce new type rotations that each
of them can be performed only at nodes on the left-arm or the right-arm of a tree. In order to detect
whether a node is on the left-arm or the right-arm of some subtree, we need to provide the left-weight
and the right-weight of nodes. In particular, r is the root of T if and only if wl(T, r) +wr(T, r) = n+ 1.
For convenience, we write pT (i) for the parent of a node i ∈ T . The following lemma shows that if
both weight sequences of a tree are given, we can determine whether a specific node is contained in the
left-arm or the right-arm of a subtree.
Lemma 2 Let TL(i) and TR(i) be the left subtree and the right subtree of a node i ∈ T , respectively. If
x is a descendant of i, then the following statements are true.
(1) x is contained in the left-arm of TR(i) if and only if x− wl(T, x) = i;
(2) x is contained in the right-arm of TL(i) if and only if x+ wr(T, x) = i.
Proof. (1) For the “if part”, it is obviously that if x ∈ TL(i) then x < i. Moreover, if x ∈ TR(i) but
it is not contained in the left-arm of TR(i) then x − i > wl(T, x). Conversely, if x is on the left-arm of
TR(i), the number of internal nodes in the left subtree of x is (x − 1) − i. Thus, the number of leaves
in the left subtree of x (i.e., wl(T, x)) is x− i, which gives the desired result. (2) The proof is similar to
case (1). 
Corollary 3 For each node x ∈ T which is not the root, pT (x) can be computed as follows:
(1) If x is a right child of a node, then pT (x) = x− wl(T, x);
(2) If x is a left child of a node, then pT (x) = x+ wr(T, x).
Proof. (1) It directly follows from Lemma 2 by considering that x is the root (and thus on the left-arm)
of the right subtree of pT (x). (2) The proof is similar to case (1). 
Thus, we can compute pT (i) of a node i ∈ T in a constant time if we already know that i is a right
child or a left child. Also, an easy observation shows that if i is a right child, then wr(T, pT (i)) =
wl(T, i) + wr(T, i). Therefore, using the result of Corollary 3, we can compute the RW-sequence of a
binary tree T ∈ Bn easily if its LW-sequence is available.
Algorithm LW-sequence-to-RW-sequence
for i = 1 to n do
wr(T, i)← 0;
enddo
for i = n downto 1 do
if (wr(T, i) = 0) then
wr(T, i)← 1;
endif
p← i− wl(T, i);
if (p > 0 and wr(T, p) = 0) then
3
RR-rotation(i)T1
T2
T3
i
p
T1 T2
T3
i
p
g
h
g
h
RL-rotation(i, w)
T1
T2
T3
i
p
T1
T2 T3
i
p
LR-rotation(i, w)
LL-rotation(i)
j
j
k
k
(a)
(b)
Figure 3: The left-arm and right-arm rotations.
enddo
end LL-rotation
Function LR-rotation(i, w)
p← i+ w;
if (p ∈ PL(T )) then
wr(T, i)← w
for each node x in the path from
j = p(i) up to k do
wl(T, x)← wl(T, x)− wl(T, i);
enddo
endif
end LR-rotation
Function RR-rotation(i)
wl(T, i)← 1;
for each node x in the path from
h = i− 1 up to g do
wr(T, x)← wr(T, x) + wr(T, i);
enddo
end RR-rotation
Function RL-rotation(i, w)
p← i− w;
if (p ∈ PR(T )) then
wl(T, i)← w
for each node x in the path from
h = p(i) up to g do
wr(T, x)← wr(T, x)− wr(T, i);
enddo
endif
end RL-rotation
5
endif
enddo
3.2. for i = 1 to n do
if (wl(T ′, i) 6= 1) then
Perform RL-rotation(i, wl(T ′, i));
endif
enddo
endif
We now give an example to illustrate Algorithm Tree-Conversion. Figure 4(a) shows a source
tree T with |L1(T )| = 3 and |R1(T )| = 4, and a destination tree T ′ with |L1(T ′)| = 3 and |R1(T ′)| =
4. According to the criterion in Step 2, the algorithm uses LL-rotations and LR-rotations for tree
transformation. The detail of converting steps is shown in Figure 4(b). In Step 2.1, the right weights
of nodes 2 and 4 are not 1. Therefore, an LL-rotation is performed at each of these two nodes in that
order. After that, a left-skew tree is obtained. In Step 2.2, since only nodes 4 and 2 have wr(T, 4) 6=
1 and wr(T, 2) 6= 1, respectively, one LR-rotation is performed for each of these two nodes in that
order. Moreover, since wr(T ′, 4) = 2 (respectively, wr(T ′, 2) = 4), the LR-rotation performed on node
4 (respectively, 2) is LR(4,2) (respectively, LR(2,4)). After stpes 2.1 and 2.2, a source tree T has been
transformed to a destination tree T ′.
4
1
2
3 5
6
LL(2)
wl = (1, 2, 1, 4, 1, 2)
wr = (1, 2, 1, 3, 1, 1)
4
1
2
3
5
6
wr = (1, 1, 1, 3, 1, 1)
wl = (1, 2, 3, 4, 1, 2)
LL(4)
wl = (1, 2, 3, 4, 5, 6)
wr = (1, 1, 1, 1, 1, 1)
4
1
2
3
5
6
LR(4, 2)
4
1
2
3 5
6
wl = (1, 2, 3, 4, 1, 6)
wr = (1, 1, 1, 2, 1, 1)
LR(2, 4)
wr = (1, 4, 1, 2, 1, 1)
wl = (1, 2, 1, 2, 1, 6)
41
2
3 5
6
6
5
4
3
2
1
T
6
5
4
3
2
1
T
′
wl(T ) = (1, 2, 1, 4, 1, 2)
wr(T ) = (1, 2, 1, 3, 1, 1) wr(T
′) = (1, 4, 1, 2, 1, 1)
wl(T
′) = (1, 2, 1, 2, 1, 6)
(RR, RL)-rotation
(LL, LR)-rotation
(a)
(b)
|L1(T )| + |L1(T
′)| ≤ |R1(T )| + |R1(T
′)|
|L1(T )| + |L1(T
′)| > |R1(T )| + |R1(T
′)|
Figure 4: An example of tree transformation.
Lemma 4 The sequence of rotations performed in Algorithm Tree-Conversion has length no more
than n− 1.
Proof. By Lemma 1, we have |L1(T )| ≥ bn2 c + 1 or |R1(T )| ≥ bn2 c + 1 and |L1(T ′)| ≥ bn2 c + 1
or |R1(T ′)| ≥ bn2 c + 1. With the fact |L1(T )| + |L1(T ′)| = |R1(T )| + |R1(T ′)| = n + 1, this im-
plies that max{|L1(T )| + |L1(T ′)|, |R1(T )| + |R1(T ′)|} ≥ n + 1. Recall that the tree transformation
of Algorithm Tree-Conversion is designed to have two phases. We assume that the condition
|L1(T )| + |L1(T ′)| ≤ |R1(T )| + |R1(T ′)| fulfills and hence we prove that Step 2.1 (the first phase) and
Step 2.2 (the second phase) use at most n − 1 rotations. For the other case (i.e., |L1(T )| + |L1(T ′)| >
|R1(T )|+ |R1(T ′)|), it can be proved by a similar way.
7
convenience, we use LW-sequences instead of binary trees to represent the nodes of Gn. Using the left-
arm and right-arm rotations defined in Section 3, the rotation graph with respect to Bn is determined
uniquely. In particular, if we restrictedly use only RL-rotations, the resulting digraph is definitely a
directed rooted tree with (1, 1, . . . , 1) (i.e., the right-skew tree) as its root.
Lemma 6 The rotation graph Gn with respect to RL-rotations is a directed rooted tree.
Proof. For any RL-rotation(i, w) performed in a tree T with n nodes, node i is contained in the right-
arm of T by definition. Since every profitable rotation requires w ≥ 2 and all the left-weights of nodes
in T are unaltered except that wl(T, i) is changed from 1 to w after rotation, the LW-sequence of T will
be converted into a sequence with largely lexicographic order. This shows that the resulting digraph is
acyclic. In particular, the node (1, 1, . . . , 1) (i.e., the sequence consisting of n 1’s) has no ingoing arc.
Since we have shown that the second phase in Algorithm Tree-Conversion can converts the right-skew
tree into destination tree via RL-rotations, it guarantees that any other node of Gn is reachable from
(1, 1, . . . , 1). Thus Gn is a directed rooted tree with node (1, 1, . . . , 1) as its root. 
From the above lemma, the rotation graph with respect to RL-rotations will be called a rotation
tree and is denoted by Tn preferably. For example, Figure 5 shows a rotation tree T4, where the node
(1, 1, 1, 1) can be converted into (1, 1, 2, 1) via RL(3,2) rotation. Again, the node (1, 1, 2, 1) can be
converted into (1, 1, 2, 4) via RL(4,4) rotation. Obviously, the rotation tree is an unordered tree. Also,
an easy observation shows that if the nodes of Tn are permuted such a way that nodes from left to right in
each level are labeled in lexicographic order, then so is the printout in the preorder traversal of Tn. Thus,
it is easy to develop an algorithm for enumerating LW-sequences of binary trees in lexicographic order
by constructing the rotation tree with a specific order and then traversing it. We now give a recursive
algorithm to construct Tn with a specific order starting from the root (1, 1, . . . , 1) as its parameter as
follows:
(1, 1, 1, 1)
(1, 1, 1, 2) (1, 1, 1, 3) (1, 1, 1, 4) (1, 1, 2, 1) (1, 1, 3, 1) (1, 2, 1, 1)
(1, 1, 2, 3) (1, 1, 2, 4) (1, 1, 3, 4) (1, 2, 1, 2) (1, 2, 1, 4) (1, 2, 3, 1)
(1, 2, 3, 4)
T4
Figure 5: The rotation tree T4 whose nodes in each level are labeled in lexicographic order.
Procedure LexGenTree(T )
for i = n downto 2 do
if (wl(T, i) = 1 and i ∈ PR(T )) then
T ′ ← T ;
repeat
w ← wl(T ′, i) + wl(T ′, i− wl(T ′, i));
Create a new tree T ′ that is the same
as T ;
Perform RL-rotation(i, w) in T ′;
Insert the node T ′ as a child of T in
the rotation tree Tn;
if (wl(T ′, n) = 1) then
LexGenTree(T ′);
9
References
[1] G. M. Adel’son-Vel’ski˘i and E. M. Landis, An algorithm for organization of information, Soviet
Mathematics Doklady 3 (1962) 1259–1263.
[2] A. Andersson, General balanced trees, Journal of Algorithms 30 (1999) 1–18.
[3] V. Bapiraju and V.V.B. Rao, Enumeration of binary trees Information Processing Letters 51 (1994)
125-127.
[4] R. Bayer, Symmetric binary B-trees: data structure and maintenance algorithms, Acta Informatica
1 (1972) 290–306.
[5] M. K. Bennet and G. Birkhoff, Two families of Newman lattices, Algebra Universalis 32 (1994)
115–144.
[6] A. Bonnin and J. Pallo, A shortest path metric on unlabeled binary Trees, Pattern Recognition
Letters 13 (1992) 411–415.
[7] Yen-Ju Chen, Jou-Ming Chang, and Yue-Li Wang, An efficient algorithm for estimating rotation
distance between two binary trees, to appear in International Journal of Computer Mathematics.
[8] S. Cleary, Restricted rotation distance between binary trees, Information Processing Letters 84
(2002) 333–338.
[9] S. Cleary and J. Taback, Bounding restricted rotation distance, Information Processing Letters 88
(2003) 251–256.
[10] K. Culik and D. Wood, A note on some tree similarity measures, Information Processing Letters 15
(1982) 39–42.
[11] B. Effantin, Generation of valid labelled binary trees, Proc. International Conference on Computa-
tional Science and Its Applications (ICCSA’2003), LNCS, vol. 2667 (2003) 245–253.
[12] A. Gibbons and P. Sant, Rotation sequences and edge-colouring of binary tree pairs, Theoretical
Computer Science 326 (2004) 409–418.
[13] L. Guibas and J. Hershberger, Morphing simple polygons, Proc. ACM 10th Annual Symposium of
Computational Geometry (SCG’94), 1994, 267-276.
[14] J. Hershberger and S. Suri, Morphing binary trees, Proc. ACM-SIAM 6th Annual Symposium of
Discrete Algorithms (SODA’95), 1995, 396-404.
[15] F. Hurtado and M. Noy, Graph of triangulations of a convex polygon and tree of triangulations,
Computational Geometry 13 (1999) 179–188.
[16] G. D. Knott, A numbering system for binary trees, Communications of ACM 20 (2), (1977), 113-115.
[17] D. E. Knuth, Sorting and Searching, in: The Art of Computer Programming, Vol. 3, Addison-Wesley,
Reading, MA, 1973.
[18] J. M. Lucas, The rotation graph of binary trees is hamiltonian, Journal of Algorithms 8 (1987)
503–535.
[19] J. M. Lucas, D. Roelants van Baronaigien, and F. Ruskey, On rotations and the generation of binary
trees, Journal of Algorithms 15 (1993) 343–366.
[20] J. M. Lucas, A direct algorithm for restricted rotation distance, Information Processing Letters 90
(2004) 129–134.
[21] J. M. Lucas, Untangling binary trees via rotations, The Computer Journal 47 (2004) 259–269.
[22] F. Luccio and L. Pagli, On the upper bound on the rotation distance of binary trees, Information
Processing Letters 31 (1989) 57–60.
[23] E. Ma¨kinen, On the rotation distance of binary trees, Information Processing Letters 26 (1987/88)
271–272.
[24] J. Pallo, Enumerating, ranking and unranking binary trees, The Computer Journal 29 (1986) 171–
175.
[25] J. Pallo, On the rotation distance in the lattice of binary trees, Information Processing Letters 25
(1987) 369–373.
[26] J. Pallo, Some properties of the rotation lattice of binary trees, The Computer Journal 31 (1988)
564–565.
[27] J. Pallo, An efficient upper bound of the rotation distance of binary trees, Information Processing
Letters 73 (2000) 87–92.
11
