Validation, Automotive Embedded Software Testability 
 
i 
 
 
內容目錄 
壹、 前言........................................................................ 2 
貳、 計劃背景與研究目的.......................................................... 2 
參、 文獻探討與研究方法.......................................................... 5 
肆、 研究方法.................................................................... 7 
伍、 結果與討論.................................................................. 7 
陸、 參考文獻.................................................................... 8 
附件一、本土化車用軟體開發指南..................................................... 11 
 
 
2 
 
 
壹、 前言 
自 70 年代起，汽車研發的特點係穩步地增加及部署電子系統和應用軟體，而軟體研發技術能
力的進步為汽車業提供了自由概念和設計。在一些豪華汽車上，電子設備及應用軟體的成本甚至超
過整車成本的 50%以上，因此汽車電子系統及應用軟體因為安全的考量，必須具備非常高的品質與
可靠度。在軟體業，驗證偏重技術面的需求，而確認則偏重客戶端之需求。在本年度計畫裡，我們
研究了車輛軟體工程(Automotive Software Engineering)及提出在撰寫嵌入式汽車電子軟體時，開發人
員應該遵守哪些準則或規範的本土化程式開發指南，使其最後所交付的軟體其得以符合國際標準(如
AUTOSAR 等)並且可提高軟體的正確性及可靠度。 
 
貳、 計劃背景與研究目的 
汽車電子系統(Automotive Electronic System)發展至今已逾數十載，汽車電子技術已成為一個國
家汽車工業發展水準的標誌。1932 年，Motorola 將真空管應用於汽車上，1960 年美國克萊斯勒公司
和日本日產公司在汽車上裝用了矽二極體整流的交流發電機，同年美國通用公司將 IC 調節器應用
於汽車上，從此開啟了汽車電子的時代。20 世紀 70 年代後，隨著汽車數量的日益增多，汽車安全
問題和排放污染日益嚴重，能源危機的影響更加突出，在汽車發達的國家(如美國、加拿大等)相繼
制定了嚴格的排放法規和汽車燃油經濟性法規，為解決汽車安全、污染和節能三大問題，電子技術
在汽車上的應用更加廣泛和完善。如 1967 年德國 BOSCH 公司研發出電控汽油噴射系統，1970 年
美國福特汽車公司首先在汽車上應用了除發動機以外的電控裝置—電子控制防滑裝置，1973 年美國
通用公司在汽車上裝用了 IC 點火裝置，1976 年美國克萊斯勒公司在汽車上首先裝用了電腦控制點
火系統。20 世紀 90 年代中期以後，隨著社會和汽車相關科技的進步，汽車電子的應用已逐步擴展
到車用汽油發動機機以外的底盤、車身和車用柴油發動機等多個領域， 
目前汽車的動力已經不再單純的機械和液壓系統，它們是結合機械和電子系統的機電整合
(Mechatronics)，智慧型 IC 應用在燃油噴射控制、定速控制、ABS 煞車、傳動控制裝置等不勝枚舉。
廣泛的汽車電子系統可分為：動力傳動電子系統、安全和控制電子系統、汽車舒適和便利電子系統、
汽車感測器系統、駕駛座電子系統，車載資訊系統(Telematics)、娛樂電子系統、車身電子系統等等。
2009 年微軟(Microsoft)在德國舉行的 Embedded World 展會上透露將推出汽車用 Automotive 軟體平
台，期望該平台成為建立未來車用資訊娛樂生態系統的關鍵元素。福特汽車則與微軟共同合作，在
Microsoft Auto 的基礎上開發出一種應用 Synch。其主要是一種語音啟動的程式，駕駛能透過 Synch
能控制手機和 MP3 播放機等設備，其中包括 Nokia 手機、微軟 Zune、蘋果 iPod 等產品。而近年來
英特爾與 BMW 亦共同研發可裝設於儀表板內的電腦。德國電信子公司德國系統(T-Systems)正協助
BMW 開發一套系統：當車子油量不足或煞車磨損嚴重時，系統會自動透過手機通知 BMW，並傳
送資訊到維修廠，維修廠再與車主聯繫。IBM 電腦與法國汽車零組件供應商 Valeo 公司合作開發汽
車軟體，惠普則替汽車製造商測試其網路功能，這些幾乎都需要軟體的支援。 
汽車內的電子控制單元(ECU)隨著電子系統的增加而增加，以日產汽車為例，國民車 March 的
4 
 
佳的成果。自此之後，IV&V 機制在軍事工業與航太工業系統中廣泛的被接納與應用，主要原因為
軍事與航太工業具有高失敗風險的特性，而 IV&V 機制可提早辨識風險的所在進而降低風險，可提
高研發成功率與產品可靠度，進而增加使用者之信賴度與滿意度。目前 IV&V 已經廣泛被應用於軟
體研究領域。在軟體業界，驗證偏重技術面的需求，而確認則偏重使用者端之需求。由於目前軟體
的複雜度、大小和重要性的增長導致了對 IV&V 的需求增長。現今 IV&V 已被一些國際重要單位/
組織廣泛地應用，例如 FAA，NASA 和 ESA 等等。  
一般來說，IV&V 係在軟體開發生命週期(SDLC)中由獨立於開發團隊的另一方對軟體進行評估
的規範化的方法。這個額外步驟要求需要增加開發成本。從 CMMI 模式第三層流程重點及 ISO/IEC 
15504 分析，欲增進軟體開發流程的品質，長遠來說，我們應強調軟體 IV&V 精神，必要時軟體開
發單位應將獨立驗證與確認的工作項目納入品質管理計畫中。研究報告顯示，用在安全關鍵系統
(Safety-Critical System)的 IV&V 過程的成本和工作經常超過開發整個系統的一半，基於手工撰寫程
式和紙上規格的傳統方法的這個問題更嚴重。使用 Ada、C 或 Fortran 開發模型不僅程式碼冗長而且
程式碼可能有錯誤，在不同設計階段重新利用模型時可能產生不經意的改變而導致不正確的結果。
類似地，在團隊間頻繁用於交流的需求、規格、測試和其它內容的文件可能引起誤解。事實上，IV&V
在嵌入式軟體開發週期是必要的過程，正由於汽車軟體系統越來越複雜之際，難免有些功能或程式
片段沒有經過仔細且完整的測試，此時更須仰賴 IV&V。此一過程必須放在軟體開發生命週期的一
開始。驗證的概念包括兩個基本原則：首先，軟體必須能夠正確地執行其被要求的功能；其次，軟
體不能執行任何不被要求的功能。至於驗證的目標是保證整個軟體開發生命週期的每個軟體產品都
能滿足客戶的規定和目標。一個全面的驗證努力保證在規格說明書中所有的軟體性能和品質需求被
充分的測試，並且一旦發生改變時，測試結果可以被重複。 
近年來，車用電子市場成長快速，各種車用電子產品橫跨車用控制、車用網路、無線通訊與導
航，乃至於多媒體娛樂設備，皆大大增加車用電機電子環境的複雜度，如何能透過一套標準化的方
式提升產品修改與更新的靈活性，當跨產品線間軟硬體規模改變時，系統能持續發揮效能、提供服
務，並藉由初期設計階段的偵錯功能以增進車用電機電子系統的品質與可靠度，AUTOSAR 
(AUTomotive Open System Architecture)即在此概念下孕運而生，由汽車業者主導而成立。AUTOSAR
成立的基本概念在於，希望透過制定標準化軟體介面架構，讓汽車電子相關應用所需軟體，可在不
同汽車平台上運作，同時可重複使用，如此一來，將大大降低汽車電子軟體整合成本，不受限於硬
體。目前國外供應商已紛紛推出支援 AUTOSAR 標準的工具和軟體，可提供需求管理、系統描述、
軟體構件演算法模型驗證、軟體建構演算法建模、ECU 配置以及基礎軟體和作業系統等服務。 
AUTOSAR 計畫目標主要有三項， 第一項以建立獨立於硬體的軟體架構為目標；第二項為發展
實作方法論，包括制定無縫的軟體堆疊建構流程並將應用軟體整合至 ECU 中；第三項為制定各種
車輛應用介面規範， 以作為應用軟體整合標準。AUTOSAR 標準的主要想法是透過一個嚴格定義的
中介層，把由軟體建置的功能從車輛的 ECU 硬體中分隔開來。AUTOSAR 聯盟的目標不僅在將關鍵
的系統功能加以標準化，同時也必須建立一個可整合不同供應商軟體的平台，因而提升整體產業的
效率。從汽車廠角度來看，導入更高比重的電子與軟體元件，可讓產品線更加豐富並提升差異化程
度，進而強化汽車廠在市場上的品牌印象。但在汽車電子元件如 ECU 導入汽車時，由於驅動 ECU
運作的軟體與所採用的硬體相依程度高，一旦硬體平台改變，相關軟體都需改寫。過去在汽車電子
元件使用不多情況下，此問題尚不嚴重，但目前在高級車種中，使用超過 80 個 ECU、逾 1000 項軟
體功能，軟體複雜度與投入開發成本日趨升高。 
6 
 
(ISO/IEC 15504)。ASE 的研究包括了汽車電子系統和軟體的核心開發過程、用戶需求分析和系統邏
輯結構的確定、邏輯功能結構分析和系統技術結構的確定、軟體的需求分析和軟體結構的確定、軟
體元件的描述、軟體元件設計和實現、軟體元件測試、軟體元件整合、軟體整合測試、系統元件整
合、系統測試和驗收測試、軟體功能描述和有效性驗證、工具和電子控制單元間之非車載介面、邏
輯系統結構分析和技術系統結構描述、軟體功能描述和有效性驗證、資料模型描述、軟體函數的設
計及實現、軟體功能，校正等等。圖一則為車輛軟體與系統工程主要研究架構。  
 
 
 
圖一：車輛軟體與系統工程架構 
 
 
另一方面，由於汽車應用軟體大都用 C 語言寫成，很多寫法在 ANSI 的 C 以及相應的 C 編譯
器看來並沒有什麼問題，但對汽車軟體而言，安全可靠性方面存在著隱藏的問題。例如 MISRA(Motor 
Industry Software Reliability Association)曾針對車用嵌入式軟體的可靠度做了大量研究。例如：以下
寫法在 C 語言中完全合法： 
if (a == b && c == d && e == f) { 
do something (滿足條件要做的事)； 
} 
但對於車用軟體而言，英國汽車工業軟體可靠性協會研究發現，以下寫法才能滿足可靠性要求： 
 
if (a == b) { 
if (c == d) { 
if(e== f){ 
do something (滿足條件要做的事)； 
} 
} 
} 
 
因為在判斷式 if (a == b && c == d &&e == f) 中，3 個條件看起來是並列的，但在編譯和執行中，存
在著隨意性和不確定性。 另外在部份程式語言中，有些關鍵字並不是存在於所有系統當中，例如
false。我們可以用 0 來取代 false，因為 0 和 false 的意義相同，且 0 在所有系統都能正確使用。 
8 
 
陸、 參考文獻 
[1] AUTOSAR consortium: www.autosar.org, 2006. 
[2] AUTOSAR Development Partnership. www.autosar.com 
[3] A. Bauer, M. Broy, J. Romberg, B. Schätz, P. Braun, U. Freund, N. Mata, R. Sandner, and D. 
Ziegenbein, “Auto-MoDe—Notations, Methods, and Tools for Model-Based Development of 
Automotive Software,” Proceedings of the SAE 2005 World Congress, Detroit, MI, Apr. 2005.   
[4] J. Botaschanjan, L. Kof, Ch. Kühnel, and M. Spichkova, “Towards Verified Automotive Software,” 
Proceedings of the 27th International Conference on Software Engineering (ICSE 2005), SEAS 
Workshop, St. Louis, Missouri, USA May 2005. 
[5] M. Broy, “Automotive Software Engineering,” Proceedings of the 25th International Conference 
on Software Engineering (ICSE 2003), May 2003, Portland, Oregon, USA. 
[6] M. Broy, A. Pretschner, C. Salzmann, and T. Stauner, “Software Intensive Systems in the 
Automotive Domain: Challenges for Research and Education,” Proceedings of the SAE 2006, 
Detroit, USA, April 2006. 
[7] M. Broy, “Engineering Automotive Software,” Proceedings of the IEEE, Vol. 95, No. 2, February 
2007. 
[8] D. Wild, “Concretization and Formalization of Requirements for Automotive Embedded Software 
Systems Development,” Proceedings of the 10th Australian Workshop on Requirements 
Engineering (AWRE), Melbourne, Australia, K. Cox, J.L. Cybulski et.al (ed.), 2005. 
[9] K. Grimm, “Software Technology in an Automotive Company—Major Challenges,” Proceedings 
of the 25th International Conference on Software Engineering (ICSE 2003), May 2003, Portland, 
Oregon, USA. 
[10] B. Hardung, T. Kölzow, and A. Krüger, “Reuse of Software in Distributed Embedded Automotive 
Systems,” Proceedings of the 4th ACM international conference on Embedded software (EMSOFT 
2004), Pisa, Italy, Sept. 2004. 
[11] H. Heinecke, “Automotive System Design—Challenges and Potential,“ Proceedings of the Design 
Automation and Test in Europe Conference (DATE'05), Munich, Germany, March 2005.  
[12] A. Pretschner, C. Salzmann, and T. Stauner, “SW Engineering for Automotive Systems,” 
Proceedings of the 26th International Conference on Software Engineering (ICSE 2004), May 
2004, Edinburgh, United Kingdom. 
[13] S. Toeppe, D. Bostic, S. Ranville, and K. Rzemien, “Automatic Code Generation Requirements for 
Production Automotive Powertrain Applications,” Proceedings of the 1999 IEEE International 
Symposium on CACSD, Hawaii, USA, 1999. 
[14] S. Toeppe, S. Ranville, D. Bostic, and C. Wang, “Practical Validation of Model Based Code 
10 
 
Annual International Computer Software and Applications Conference (COMPSAC'05), Vol. 2, pp. 
211-218, 2005. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
12 
 
字元集 
 
規則 5    只能使用作業系統裡的字元集及跳脫字元（escape characters）。 
注意將捲曲動字元（windings）、zap 字元以及 加入到任何程式。激發你
的創造力。你的風格展現你的天份。 
 
規則 6    字元的值應該被限制在你任何合法字體範圍內。非法的字體不應該被使用。 
 
    Ex:如 ascii 碼，有共有 256 的字元，用二進位表示為 0000 0000 到  1111 1111，超出這
範圍的都為非法字元。 
 
規則 7    三字母詞（Trigrafs）應該只被知道如何安全使用的這些人使用，如果一些人無法解釋他
們，那這些人不應該寫程式。 
 
規則 8    多位元組的字元應該只用在    的程式。 
 
註釋 
 
注意      注釋就像臭蟲一樣，在每千行程式碼千應該少於五個。不用說也知道，註釋應該是有意
義的因為他們是文件的一部份。 
 
規則 9    注釋應該要小心的使用巢狀寫法。 
                不好的巢狀注釋看起來很糟糕。 
//This gives scope  
// for some /*fantastic *\  
 //layouts and lets the  
 //*creative spirit */  
14 
 
 
規則 11    識別符號的命名應該要有意義。舉例： 
                這 個 _ 變 數 _ 是 _ 迴 圈 _ 起 始 值 的 _ 計 數 器
（This_variable_is_the_loop_counter_start_value） 
                這個_變數_是_迴圈_末端值的_計數器（This_variable_is_the_loop_counter_end_value）
如果編譯器無法處理這樣的名稱，是有問題的。 
 
 
規則 12    在同一個的函式區段內不應該有兩個命名相同的識別符號。 
讓他們不同，舉個例子    ‐0O0  就跟 000 不一樣!而標準的命名習慣，如  "暫存"，  "速度"，  "值
"，  都可以增加可讀性，幫助那些不了解何謂真正的程式編寫的新手。 
     
    Ex:一個計算速率的程式碼 
      Int main() 
      { 
        Int speed; 
        Int time=5; 
        Int distance=100; 
        speed=distance/time; 
         
        printf(“%d”,speed); 
        return 0; 
} 
       
       
型別 
16 
 
        int distance=100; 
        speed=distance/time; 
        speed2=distance/time;               
        printf("%d\t%d",speed,speed2); 
    return 0; 
} 
 
常數 
 
規則 18    編譯器可以處理所有數字的常數且這可以被使用在最適當的地方，即使在同一行。合宜
地使用二進位、八進位、十六進位和十進位以節省轉換時間和記憶體。 
 
規則 19    八進位常數比十六進位的常數還小，如果你要節省空間應該使用他。 
 
 
宣告和定義 
 
規則 20    自訂的函式當被需要時可以直接被宣告。好的編譯器會寫自動補上空白。 
     
    Ex:  一個計算速率的程式碼 
      #include <stdio.h> 
#include <stdlib.h> 
double calculate_speed(int time, int distance) //宣告一個自訂的函數 
{ 
              double speed; 
              speed=distance/time;         
18 
 
    Ex: 
      Class 內宣告的內容只有在物件被建立時才會分配給他記憶體，因此他的存在時間比
整個程式執行的時間短，可達到節省空間增加速度的優點。 
 
規則 22    「全域範圍」減少了開頭檔和參數傳遞的需求。參數傳遞和標頭頭檔皆容易發生錯誤，
應該避免。此外，傳遞參數會浪費堆疊空間。 
 
規則 23    靜態常數可以使用在函數和變數會導致各種容易困惑的事情。因此他應該被避免使用。
 
    Ex: 
      static  在不同情形下有不同的意義 
 
1. 使用在全域變數或全域函式 (Global variable & Global function) 
讓該變數(或該函式)的可視範圍只侷限在該檔案內，其他的 .c 檔看不到此變數(或函式)的存
在。 
既使其他檔案用 extern 宣告也看不到！套句行話來說，他把 Global 的變數或函數變成了
「internal linkage」，當 Linker 在找 symbol 時是會忽略它的。 
(在 C++中也相容這種用法，不過被視為比較不建議的舊的用法，C++比較建議使用
unnamed namespace。) 
 
使用時機：當此全域變數(或全域函式)不想被其他檔案引用和修改時，或者不同檔案可以使
用相同名字的全域變數(或全域函式)而不會產生命名衝突。 
2. 使用在函式內的區域變數 (Local variable) 
因為區域變數預設就是動態變數，而在區域變數前加上 static 修飾字則會將變數由動態
(dynamic)變數轉為靜態(static)變數，靜態變數的壽命(lifetime)與動態變數不同，靜態變
數會一直存在，直到程式結束為止。 
 
使用時機：這種很適合用來做統計次數的功能(某函式被呼叫幾次) 
 
 
修飾對象   使用在．．．    Linkage    Scope 
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－ 
20 
 
 
規則 31 與 32    大括弧可以被使用來配置矩陣和結構，使他們看起來相當酷。大多數有經驗的程
式設計者有它們自己可辨認的風格。 
                光的列舉  = {綠色  ，紅色=3，藍綠色，藍色，橘色=2，紫紅色=7) 
    Ex:上述已舉例。 
運算子 
 
規則 33    在複合語句中，聰明的使用&&和||可以做一些不受控制的事。保持小心，你可以找出
這些錯誤，節省許多時間。大多數關於&&和|的規則是無聊的老 COBOL 程式設計者寫出來的，你
可以忽略那些。                                                                                                       
 
規則 34    硬體工程師以&&和||兩種閘道為基礎做任何事情。你可以使用&&和||（以及一些?運算
子）在一行的巨集中編碼整個函式。 
    Ex:  if 可以用&&表示  ，if not 可以用||表示 
01.#include <stdio.h> 
02.  
03.int say_hello( void ) 
04.{ 
05.printf("Hello world!!\n"); 
06.return 0; 
07.} 
08.  
09.int main( int argc, char* argv[] ) 
10.{ 
11.int flag=0; 
12.  
13.printf("flag=0\n"); 
14.flag && say_hello(); // say_hello() won't be invoked 
15.flag || say_hello(); // say_hello() will be invoked 
16.  
17.printf("flag=1\n"); 
18.flag=1; 
19.flag && say_hello(); // say_hello() will be invoked 
20.flag || say_hello(); // say_hello() won't be invoked 
22 
 
規則 39    所有的值應該藉由"‐"來顛倒過來。 
    Ex: 
      #include<stdio.h> 
#include<stdlib.h> 
int main() 
{ 
        int x=100;         
        printf("正數 X 為%d\t 負數 X 為%d",x, ‐x);   
        system("pause"); 
        return 0; 
} 
 
前面加個  “‐“  即可正負號互換。 
 
 
 
規則 40    應該使用 sizeof 來決定動態配置空間所需要的空間大小。 
    Ex: 
#include<stdio.h> 
#include<stdlib.h> 
#include<string.h> 
typedef struct   
{ 
                int weight; 
                char color[10]; 
24 
 
表達式 
 
規則 46    compiler 總是由左讀到右。 
 
規則 47    由左到右總是使用 C 的優先權規則，而所有的 compiler 使用同一套的標準來執行這些。
 
規則 48    編譯器自動地補償混合精度運算。 
 
規則 49    零是絕對且可用於所有系統的。  0 = = False。 
 
規則 50    0.0 != 0，零就是零。 
 
規則 51    當整數折疊(wrap‐around)時編譯器會補償。因此可以維持完整性。 
 
控制流 
 
規則 52    版本控制可能需要將程式碼儲存成檔案。這些程式碼應該是不可達(unreachable)的。 
 
規則 53    沒有作用的行可以用來達到延遲，比起使用中斷或 timer 更好。這是一種簡單的方法來
延遲程式，效果卻像一個運算使用複雜的 timer，龐大且難以調整的程式碼一樣好。 
 
int d1=0; 
int d2=0; 
while(d1<9999) 
{ 
   while(d2<9999){ 
   d2++;} 
   d2=0;  
   d1++; 
} 
 
規則 54    空語句應該用一個「；」在前行的尾端以節省空間。空行則可以被忽略。 
 
for(i=1;i<10;i++) ; 
 
規則 55    使用有意義的名稱做為 goto 的標籤。 
 
start: 
.... 
.... 
26 
 
   a = a + b ; 
else if(a == 0)  
   a = a – b ; 
   a++ ; // when a > 0 
 
規則 61    break 陳述式只需用在你不想跨越 case 執行的地方。 
 
switch (c) { 
    case 'a': case 'e': case 'i': case 'o': case 'u': 
    case 'A': case 'E': case 'I': case 'O': case 'U': 
        printf(“母音字母\n”); 
        break; 
    default: 
        printf(“子音字母或其他字元\n”); 
} 
 
規則 62    default 只需要用在 switch 陳述式中 default 狀態的地方。不像過去使用 Algol 和 Pascal 這
兩種語言那麼麻煩。 
 
規則 63    switch 陳述式可以用在 true/false 情況因為它比 if else 更快且留下了空間可以擴展。 
 
if(score == 5)  
   cout << "get A" << endl;  
else if(score == 4)  
   cout << "get B" << endl;  
   cout << "Fail" << endl; 
 
等同： 
 
switch(score) {  
   case 5:  
      cout << "get A" << endl;  
      break;  
   case 4:  
      cout << "get B" << endl;  
      break;  
   default:  
      cout << "Fail" << endl;  
} 
 
28 
 
    if(n == 0 
        return m; 
    else 
        return gcd(n, m % n); 
} 
 
規則 71    原型（prototypes）並不是強制性的，K&R 並沒有它們，所以並不是真的需要。當一個函
式需要修改時，原型只會導致問題，讓編譯產生錯誤而已。 
 
規則 72    由於 C 不是強型別(strongly typed)語言，你可以經由一個函式呼叫轉換節省時間和空間。
當你傳遞一個 int 或 long 到 char 型別的參數時，所有編譯器應該了解你想要傳遞的是最
低的 8 個位元。 
 
規則 73    重要的參數需要標識符(Identifiers)。明顯的參數則不需要。 
 
規則 74  定義和宣告實際上並不一定要相同。這有助於你的程式碼與某些有著不好的命名限制(可
能是從 libraries 或其他團隊)的程式碼銜接。 
 
規則 75    回傳型別(return type)並不是必需，且會佔據一定的空間和時間。編譯器會自動假定型別
為 int，所以我們並不用特別去說明。如果你堅持輸入這些沒意義的東西，你比較像是一
名秘書而不是程式設計師。 
 
Func(){ 
int a, b, c; 
c = a + b; 
return c 
} 
 
規則 76    若一個 void 參數正如字面般地沒有任何意義。函式並不需要它，那麼根本就無需鍵入它。
 
func(void){ 
.... 
} 
 
等同： 
 
func(){ 
.... 
} 
 
30 
 
模組化或物件導向的程式設計。 
 
規則 88    Include 的檔案名稱必須具有意義。這些日子來 OS 能處理更多的字型了。你可以讓標頭
檔更有特色像是： 
                  #include <drivers‐$homboy$‐usb.&drive>   
即使有些守舊的設計員沒有辦法處理，但是現在的編譯器可以處理這些事情。 
 
規則 89    由於多數編譯器  IDE 擁有充足的資訊。你可以使用“  ”和<>去 include 檔案因為編譯器並
不笨，它將挑選正確的檔案。不論你用哪一個編譯器都會去檢查路徑是否正確。 
 
規則 90    巨集非常強大而應該用於封裝的特殊技巧。許多的轉換、過濾和函式可以被建構。它們
甚至可以用來改善 C/C++，例如     
#define IF if( 
#define THEN ){ 
省去了許多鍵入的時間並且讓程式碼易讀。 
 
規則 91    巨集和定義可以被複寫(overridden)以在{}區塊中達成類似 C++多載(overloading)的功能。
 
規則 92    當不再需要巨集時，可以透過 undef 解除巨集的定義(見規則 91)  。 
 
規則 93    比起函式，巨集更應被優先考慮。在 C++中它們模仿內行函式(inline function)，而且比函
式更快。 
 
規則 94    巨集可能視執行時的一些或全部參數的情況而被呼叫。好的編譯器不需全部的參數。它
們自動預設為 int(其值為 0)  。 
 
規則 95    在巨集中使用預處理指令可以產生一些非常有效且混亂的程式碼(obfuscated code)。這項
技術對於隱藏各種技術以便管理非常有效。對於承包商來說非常理想。 
 
規則 96    根據規則 95，複數個巨集可以任意被組合。因此，一行看起來正常的程式碼可能是由數
個巨集建構而成的，而導致編譯器產生不同的結果。這可以說是測試者的地獄！ 
 
規則 97    巨集可以使用任何標識符。當巨集為文本替換，它們可以使用那些尚未被宣告或初始化
的標識符。因此巨集可以被使用於區塊(blocks)內的區域變數。 
 
規則 98    巨集的定義符號  #  和  ##  可以是巢狀的，查查你的編譯器說明文件吧。較老式的編譯風
格則不習慣這麼做，因為他們不了解。 
 
規則 99    #Prgama 是種使用擴展編譯器的方法。由於 99%以上的編譯器都知道它們，因此可以自
由使用。那些不了解的人們不應從事程式設計。 
32 
 
}; 
class CC: public CB { 
   public: 
      virtual void f() { cout << "In class CC." << endl; } 
}; 
int main(void) { 
    CA *pCA; 
CB b; 
CC c; 
    pCA = &b; 
pCA->f(); 
    pCA = &c; 
pCA->f(); 
return EXIT_SUCCESS; 
} 
Output: 
In class CB.  
In class CC. 
 
規則  105    由於指標可以指向任何物件且我們知道C語言並非強型態，故相同的指標可藉助在C語
言創造C++風格的的樣板來指向相同函數的不同形態。 
 
規則  106    由於編譯器只做ㄧ些實作中真正需要的東西，它們會等到必須要再次使用時才離開記
憶體，你可以傳遞ㄧ個自動變數的位址並且只要你起初不呼叫太多其他函數時就可以將它用在函
數外側。 
 
規則  107    空指標為* 0，它是可以被使用的。那所謂告知你無法使用它的荒誕說法是源自於早期
人們並沒有完全理解C語言的編譯器所致。此外，編譯器也已經在過去幾年得到更好的改善並且也
已經開始適當地處理空指標了。 
#include <stdio.h> 
#include <stdlib.h> 
int main(void) { 
char *p = NULL; 
return EXIT_SUCCESS; 
} 
 
結構（structure）與聯集（union） 
 
規則  108    結構為ㄧ個被定義的空間。它是由程式設計師自定的內容來決定的。由於C語言並非強
型態，故內容並不需要在一開始就完全詳述以便後續修改。 
#include <stdio.h> 
#include <stdlib.h> 
typedef struct { 
    char *name; 
34 
 
} StatusWord; 
int main() { 
byte b = { .hi=0x0F, .lo=0x0C }; 
unsigned char *bp = (unsigned char*) &b; 
printf("byte=%02x\n", *bp);   
StatusWord sw = { .n=1,.z=0,.c=1,.v=0,.i=1,.t=1,.m=0,.b1=0,.b2=0 };
unsigned int *psw = (unsigned int*) &sw; 
printf("SW=%08x\n", *psw); 
return EXIT_SUCCESS;  
} 
Output: 
byte=fc 
SW=a00000c0 
 
標準函式庫 
 
規則  114    C語言函式庫中的關鍵字（像是__file__、__Line__等）能如同C++中被過載。當程式碼
將不需要無法進行除錯時，也就不需要測試，那麼就可以將這些用在許多函式中 
 
規則  115    ㄧ些標準函式庫裡的函數有些廢，所以用C++的作法過載，改造成你想要的樣子。Printf
函數在此是ㄧ個很好的選項。 
#include <stdio.h> 
#include <stdlib.h> 
int main(void){ 
printf ("Characters: %c %c \n", 'a', 65); 
    printf ("Decimals: %d %ld\n", 1977, 650000L); 
    printf ("Preceding with blanks: %10d \n", 1977); 
    printf ("Preceding with zeros: %010d \n", 1977); 
    printf ("Some different radixes: %d %x %o %#x %#o \n", 100, 100, 100, 
100, 100); 
    printf ("floats: %4.2f %+.0e %E \n", 3.1416, 3.1416, 3.1416); 
    printf ("Width trick: %*d \n", 5, 10); 
    printf ("%s \n", "A string"); 
    return EXIT_SUCCESS; 
} 
Output: 
Characters: a A 
Decimals: 1977 650000 
Preceding with blanks:       1977 
Preceding with zeros: 0000001977 
Some different radixes: 100 64 144 0x64 0144 
floats: 3.14 +3e+000 3.141600E+000 
36 
 
} else { 
     fclose (file); 
 } 
return EXIT_SUCCESS; 
} 
Output: 
perror: No such file or directory 
strerror(errno) = No such file or directory 
 
規則  120    偏移量（offsets）在可攜性上有許多可用之處。它也是ㄧ個能加快存取特定位元速度的
好方法。至於另ㄧ個方法則是用在獲取浮點數的ㄧ部份。 
 
規則  121    設定區域可以被用來使程式個性化。它對於自動定制等等是非常實用的。這是非常絕
妙的特徵，應該被實作以留給顧客好印象。在難懂的區域取得"."以及","是較不安全的。（本句意思
不明：Getting . and , confused locally in not safe.）你的應用程式將會知道它們位於何處！ 
 
規則  122    Setjmp與longjmp函式應被只有那些真正懂其運作的程式設計師來使用。這些函數對於
跳脫出出既複雜又巢狀的演算法而言相當實用。它們在硬體接口以及迅速調用代碼也相當有用，
無須函式呼叫以便節省執行時間與空間。 
#include <stdio.h> 
#include <stdlib.h> 
#include <setjmp.h> 
int main(void) { 
jmp_buf env; 
int val; 
val = setjmp(env); 
printf ("val is %d\n",val); 
if (!val) 
longjmp(env, 1); 
return EXIT_SUCCESS; 
} 
Output: 
val is 0 
val is 1 
 
規則  123    Signal.h標頭檔是ㄧ個能處理信號傳遞函數的快速方法。因為它們是由實作環境所決定
的，這意味著編譯器將會顧及所有特定的介面。因此我們可以在所有合適的編譯器依賴它來達成
相同運作。 
 
規則  124    Stdio.h標頭檔是程式設計師們相當熟悉的函式庫。它是許多除錯工具當中最好的ㄧ
個。像是printf與scanf函式。它也是ㄧ個存取檔案資料的堅固方法。 
#include <stdio.h> 
#include <stdlib.h> 
int main (void) { 
38 
 
/* hello.h */ 
#ifndef HELLO_H_ 
#define HELLO_H_ 
void hello(char *in) { 
 printf("Hello %s",in); 
} 
#endif 
 
/* NSoC.c */ 
#include <stdio.h> 
#include <stdlib.h> 
#include "hello.h" 
int main (void) { 
 char name[10]; 
 puts ("please, enter a name: "); 
    gets (name); 
 hello(name); 
 return EXIT_SUCCESS; 
} 
Output: 
please, enter a name: PuPu 
Hello PuPu 
 
規則  127    Time.h標頭檔內部的函式都有些差勁，所以用你自己撰寫的即可。中文與阿拉伯的時
間都不錯。像是猴年和陰曆！ 
#include <stdio.h> 
#include <stdlib.h> 
#include <time.h> 
int main(void) { 
struct tm *ptr; 
time_t lt; 
lt =time(NULL); 
ptr=gmtime(&lt); 
printf(asctime(ptr)); 
printf(ctime(&lt)); 
return EXIT_SUCCESS; 
} 
Output: 
Mon May  9 12:05:36 2011 
Mon May  9 20:05:36 2011 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：黃慶育 計畫編號：99-2220-E-007-022- 
計畫名稱：先進車用電子系統開發平台--子計畫五：車用電子與軟體系統之獨立驗證與確認(I) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 1 1 100%  
博士生 2 2 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 1 1 100%  
博士生 2 2 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
