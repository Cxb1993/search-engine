 2
recovered by using the corresponding colors 
in the same color palette of the indices. 
 In this project, we design a fast color 
palette design algorithm and an accelerated 
pixel mapping procedure for color image 
quantization. These proposed methods put 
the color image quantization into practice.  
 
Keywords: color image quantization, color 
palette, pixel mapping, image 
compression 
 
??????? 
????????????????
??????????????????
?????????????????
??????????????????
??????????????????
??????????????????
??????????????????
??????????????????
?????????? RBG ?????
????????? 8 bbp (bit per pixel)
?????? 
???????????? Lena ?
??????????????????
??? 512×512???????????
??????? RBG ????????
???????????????
(Indexed Color)???????????
?????????????????
??????? RBG ????????
???? 24 bits???????????
???????? 224????????
??????????????????
???????????? 
????????????????
???????????????????
??????????????????
???????????????????
?(palette)??????????????
RGB ????????????????
??????????????????
(index) ?????????? (color 
quantization)?????????????
???????????????????
Lena ??????????(b)?????
?????(palette)????(a)? 
 
(a) Gray-level image, 8 
bpp 
(b) Color image, 24 bpp
?? ???? Lena? 512×512?? 
 
(a) Color palette of 256 
colors 
(b) Indexed Color 
image, 8 bpp 
?? ????? Lena? 512×512?? 
 
????????????????
? ? ? ? ? ? ? ? (color image 
quantization, CIQ)??????????
??????????????????
??????????????????
??????????????????
???????????? 
????????????????
??????????????????
??????????????????
? 8~256??????????????
??????????????????
??????????????????
??????????????????
 4
2. Y. C. Hu* and B. H. Su, "Accelerated Fast 
Pixel Mapping Scheme for Color Image 
Quantization," to appear in Imaging Science 
Journal. (NSC 94-2213-E-126-009) 
 
??????????????????
????? 
 
 1-2
of n×n pixels.  To employ them to accelerate the pixel 
mapping procedure of CIQ, we need to change the vector 
dimensions from n×n to 3.   
In 1985, Bei and Gray proposed the partial 
distance search (PDS) technique [17] to speed up the 
codebook search algorithm of vector quantization.  The 
idea of PDS is that if the partially calculated squared 
Euclidean distance between the image vector and the 
checked codeword is greater than or equal to the minimal 
squared Euclidean distance found so far, the checked 
codeword cannot be the closest codeword for the input 
image vector.   
In 1990, Huang and Chen proposed the fast search 
algorithm for VQ based on the triangular inequality (TIE) 
[18].  TIE is a basic concept in geometric analysis.  It 
can be incorporated into the codebook search process of 
VQ.  The triangular inequality rule for the squared 
Euclidean distance can be described as  
),(),(),( minmin cwxdcwxdcwcwd +≤ ,
                                   (1) 
Suppose that cwmin is the closest codeword of 
current image vector x found so far.  Any codeword cw 
which satisfies ),(),(2 minmin cwcwdcwxd <  is 
safely rejected because the result d(x, cwmin) < d(x, cw) 
can be induced by substituting the above inequality.  In 
order to find the distance between each pair of 
codewords, the TIE method needs to store a distance 
table that records the squared Euclidean distances of all 
pairs of codewords in the codebook. 
An example of the TIE method is given in Fig. 1.  
The codewords cwx and cwy are within that circle 
centered at cwmin with the radius equals to 
),(2 mincwxd .  By contrast, the codeword cwz is 
outside the circle centered at cwmin with the radius equals 
to ),(2 mincwxd .  In this example, only cwx and 
cwy pass the TIE test.  Two codewords are the possible 
candidates of the closest codeword for x. 
Some additional memory space is required in the 
TIE method.  The selection of initial searched candidate 
also has great influence on the performance of the TIE 
method.  If a tighter minimal squared Euclidean 
distance can be early found in the TIE method, the less 
computational cost is required for finding the closest 
codewords in the codebook for the image blocks.  
In 1993, Ra and Kim proposed the 
mean-distance-ordered partial codebook search (MPS) 
algorithm [19].  It was proposed to accelerate the image 
encoding procedure of VQ by using a codebook that was 
previously sorted by the mean values of the codewords 
of n×n pixels.  One test condition exploring the 
relationship between the squared Euclidean distance 
(SED) and the squared sum distance (SSD) is introduced.  
The SED between the image vector x and the codeword 
cw in the codebook is defined as follows. 
dE(x,cw)= ∑×
=
nn
j 1
(xj - cwj)
2
.    (2) 
Besides, the SSD between the image vector x and 
the codeword cw in the codebook is defined as follows. 
dS(x,cw) = ( ∑×
=
nn
j 1
xj - ∑
×
=
nn
j 1
cwj )
2
.   (3) 
The inequality exploiting the relationship between 
the SED and SSD for the image block x and the 
codeword cw is described as follows: 
dS(x,cw) ≤ (n×n)×dE(x,cw).     (4) 
The MPS test condition that makes use of the 
derived relationship in Eq. (5) can be used to reject some 
impossible codewords in the codebook.   
n×n×dmin < dS(x,cw).     (5) 
Here dmin denotes the minimal squared Euclidean 
distance between the input vector x and the searched 
closest codeword cwmin serached so far.  If the squared 
sum distance between the input vector x and the 
codeword cw to be searched is greater than n×n times the 
value of dmin, the codeword cw cannot be the closest 
codeword because the inequality dmin<dE(x,cw) can be 
derived from Eqs. (4) and (5).  In other words, 
codeword cw can be safely rejected without actually 
computing the squared Euclidean distance between 
codeword cw and input vector x.  By using the MPS test 
condition described in Eq. (5), some impossible 
codewords can be safely rejected to cut down the 
computational cost.   
 In MPS, the initially searched codeword in the 
codebook for each input vector x is the codeword with 
the closest mean value to x.  That is because the authors 
claimed that the closest codeword in the codebook for 
the input vector x typically having a very close mean 
value to x.  The binary search technique is employed in 
MPS to find out the initially searched codeword in the 
codebook.   
In the proposed scheme, the test conditions of TIE 
and MPS are used to accelerate the k-means algorithm 
for palette design.  In addition, the PDS technique is 
employed to accelerate the closest color searching 
process.  The color palette used in the proposed scheme 
is sorted previously by the mean values of colors in the 
palette.  The distance table that records the squared 
Euclidean distance between all possible pairs of colors is 
calculated and stored.  The detailed descriptions of the 
proposed algorithm are given below. 
 
The Proposed Algorithm: 
Step 1: Generate the initial palette of k colors.   
Step 2: Sort the palette by the mean values of colors.  
Calculate the distance table for TIE. 
Step 3: Perform the clustering process for each color 
pixel cp.   
Step 3.1: Determine the initial searched color 
cinit in the palette for cp. 
Step 3.2: Calculate the squared Euclidean 
distance between cp and cinit.  The 
calculated distance is stored in dmin. 
Step 3.3: Sequentially check the other colors 
in the palette to find the closest color 
for cp.  Here, MPS and TIE 
techniques are sequentially 
employed to speedup the searching 
process.  In addition, the PDS 
technique is used to rejected 
 1-4
In the simulations, five palettes sized 16, 32, 64, 
128, and 256 were designed.  Four color image of 
512×512 pixels were used to measure the performance of 
the proposed scheme.  These testing images are listed in 
Fig. 2.   
To verify that the k-means algorithm indeed 
provides better image qualities than the splitting methods, 
comparative results of the image qualities of the median 
cut method [2], the mean cut method [3], and the RCSD 
method [6] are given in Table 1.  These three methods 
belong to the splitting-based palette design algorithms.  
According to the results, the mean cut method achieves 
the best image quality. 
Experimental results of image qualities and the 
number of iterations of the k-means algorithm using 
different termination threshold values are listed in Table 
2.  Five threshold values 0.1, 0.01, 0.001, 0.0001, and 
0.00001 are used in the simulations.  From the results, 
we find that more rounds are executed when a smaller 
threshold value is used in the k-means algorithm.  In 
addition, more rounds are executed in the k-means 
algorithm to design a color palette of a larger size when 
the threshold value used is fixed.   
According to the results in Table 2, we find that 
the image qualities are not strictly increased as the 
decrease of the threshold values.  But, more rounds are 
needed in the k-means algorithm to design the color 
palette.  To balance the image quality and the required 
computational cost of the k-means algorithm, we 
suggested that the control threshold value for the 
termination of the k-means algorithm used in the 
following simulations to be 0.001. 
In k-means algorithm, the selection of initial colors 
in the palette plays an important role on the performance 
of the designed color palette.  In the simulations, the 
colors in the initial palette were selected from the 
diagonal line of the color image with the limitation that 
color pixels with the same values appear only once.  In 
fact, some additional simulations have been performed to 
evaluate the performance of the proposed scheme by 
using some other initialization methods such as random 
selection, RCSD method and so on.  We find that the 
improvements of the proposed scheme compared to the 
conventional k-means algorithm using different 
initialization methods are quite similar.  To efficiently 
generate the initial color palette, the palette initialization 
method described above is used in the simulations.  
From results in Tables 1 and 2, we find that the 
k-means algorithm achieves better image qualities than 
those splitting-based methods.  However, the mean cut 
method and the RCSD method consume less 
computational cost than that of the k-means algorithm.  
The median cut method consumes approximately the 
same computational time of the k-means algorithm 
because the search of the median value is time 
consuming. 
Experimental results of the execution times of the 
k-means algorithm with the full search algorithm, the 
k-means algorithm with PDS technique, the k-means 
algorithm with the TIE technique, the k-means algorithm 
with the MPS technique, and the proposed scheme are 
given in Table 3.  In these comparative methods, the 
look-up table that records the squared values ranged 
from 02, 12, 22, …, 2552 is employed to avoid the 
multiplication operation needed in calculating the 
squared Euclidean distance.   
The average execution times of these schemes with 
different palette sizes are listed.  The color palettes used 
in the simulations were previously sorted by the mean 
values of colors.  The binary searching technique was 
employed to determine the initial searched color in the 
palette for the k-means algorithm with the TIE technique 
and the k-means algorithm with the MPS technique.  
According to the results, the proposed scheme 
significantly cuts down the computational cost of the 
k-means algorithm when a large palette is used for color 
image quantization.  An average of 92.848% reduction 
of execution time is achieved when the palette of 256 
colors is used.  In addition, it consumes 10.718%, 
21.076%, and 26.353% execution times of the k-means 
algorithm when the palettes of 128, 64, and 32 are used, 
respectively.  The proposed scheme consumes 40.102% 
execution time of the k-means algorithm when the palette 
of 16 colors is used.  It is obvious that the time 
reduction obtained by using the proposed scheme 
decreases when a small-sized palette is used.   
To explain why the proposed scheme provides 
better performance than the comparative scheme, 
experimental results of the average number of examined 
colors in the palette are listed in Table 4.  In the 
k-means algorithm with the full search approach, the 
number of examined colors equals to the size of the 
palette used.  The k-means algorithm with the PDS 
technique also needs to exam all the colors in the palette.  
In PDS, the square Euclidean distances between some 
candidate colors and the input colors are partially 
calculated so that the execution time is reduced.  In 
addition, the k-means algorithm with the TIE technique 
needs to exam each color in the palette.  The calculation 
of the squared Euclidean distance is avoided if it cannot 
pass the TIE test condition.  
In Table 4, average numbers of examined colors of 
the k-means algorithm with the MPS technique and the 
proposed scheme are not equal to the palette sizes used.  
It is because the MPS test condition has the following 
properties.  When a palette color with its mean value 
less than the input color pixel is rejected by using the 
MPS test condition, those palette colors with their mean 
values less that the rejected color are also rejected.  
Similarly, once a palette color with mean value greater 
than the input color pixel is rejected by using the MPS 
test condition, those palette colors with their mean values 
greater that the rejected color are also rejected.  
The average number of examined colors of the 
proposed scheme is less than that of the k-means 
algorithm with the MPS technique in Table 4.  That is 
because the searching order of colors in the proposed 
scheme can find more suitable candidates faster than the 
search order of the MPS technique.   
 Table 5 lists the results of the average numbers of 
colors used in calculating the whole squared Euclidean 
distance of these comparative schemes.  In addition, the 
average numbers of components used in PDS and the 
proposed scheme are also listed.  According to the 
 1-6
Letters, vol. 35, pp. 1785-1791, 2002. 
[11] W. F. Cheung, and Y. H. Chan, “Color Quantization 
of Compressed Video Sequences,” IEEE 
Transactions on Circuits and Systems for Video 
Technology, Vol. 13, No. 3, pp. 270-276, Mar. 2003. 
[12] A. Atsalakis, N. Papamarkos, N. Kroupis, D. 
Soudris, and A. Thanailakis, “Colour Quantisation 
Based on Image Decomposition and Its Embedded 
System Implementation,” IEE Proceedings – Vision, 
Image, and Signal Processing, Vol. 151, No. 6, pp. 
511-512, Dec. 2004. 
[13] C. H. Chou, and K. C. Liu, “Color Image 
Compression Using Adaptive Color Quantization,” 
Proceeding of 2004 International Conference on 
Image Processing (ICIP ’04), Vol. 4, pp. 2331-2334, 
24-27 Oct., 2004. 
[14] C. H Chang, P. Xu, R. Xiao, and T. Srikanthan, 
“New Adaptive Color Quantization Method Based 
on Self-Organizing Maps,” IEEE Transactions on 
Neural Networks, Vol. 1, pp. 237-249, Jan. 2005. 
[15] Linde, Y., Buzo, A., and Gray, R. M., “An algorithm 
for vector quantizer design,” IEEE Transactions on 
Communications, vol. 28, pp. 84-95, 1980. 
[16] Gersho, A. and Gray, R. M., Vector Quantization 
and Signal Compression, Boston, MA: Kluwer 
Academic Publishers, 1992. 
[17] Bei, C. and Gray, R. M., “An improvement of the 
minimum distortion encoding algorithm for vector 
quantization,” IEEE Transactions on 
Communications, vol. 33, pp. 1132-1133, 1985. 
[18] Huang, S. H., Chen, S. H., “Fast encoding algorithm 
for VQ-based image coding,” Electronics Letters, 
vol. 26, no. 19, pp. 1618-1619, 1990. 
[19] Ra, S. W., Kim, J. K., “A fast 
mean-distance-ordered partial codebook search 
algorithm for image vector quantization,” IEEE 
Transactions on Circuits and Systems-II: Analog 
and Digital Signal Processing, vol. 40, no. 9, pp. 
576-579, 1993. 
[20] Chang, C. C. and Hu, Y. C., "A fast codebook 
training algorithm for vector quantization," IEEE 
Transactions on Consumer Electronics, vol.  44, no. 
4, pp. 1201-1208, Nov. 1998. 
[21] Hu, Y. C. and Chang, C. C., “An effective codebook 
search algorithm for vector quantization,” Imaging 
Science Journal, vol. 51, no. 4, pp. 221-234, 2003. 
[22] Zhang, X. and Wandell, B. A., “A spatial extension 
to CIELAB for digital color image reproduction,” 
Society for Information Display Symposium 
Technical Digest, vol. 27, pp. 731-734, 1996. 
[23] Eckert M. P. and Bradley, A. P., “Perceptually 
quality metrics applied to still image compression,” 
Signal Processing, vol. 70, pp. 177-200, 1998. 
[24] Z. Wang and A. Bovik, “A Universal Image Quality 
Index,” IEEE Signal Processing Letters, Vol. 9, No. 
3, pp. 81-84, Mar. 2002.  
[25] Pan, F., Lin, X., Rahardja, S., Lin, W., Ong, E., Yao, 
S., Lu, Z., and Yang, X., “A locally adaptive algorithm 
for measuring blocking artifacts in images and videos,” 
Signal Processing: Image Communications, vol. 19, pp. 
499-506, 2004. 
 
 
 
 
 
 
Table 1 Results of image qualities of the splitting-based palette design algorithms with different palette sizes 
Palette Sizes Images Median Cut Method [2] Mean Cut Method [3] RCSD Method  [6] 
Airplane 31.757  35.384  31.374  
Lena 32.967  33.509  32.576  
Pepper 29.274  30.381  28.644  
Splash 31.758  33.950  30.483  
64 
Average 31.439  33.306  30.769  
Airplane 33.364  37.758  34.526  
Lena 35.074  35.495  34.116  
Pepper 30.988  32.618  31.177  
Splash 34.392  36.513  33.475  
128 
Average 33.455  35.596  33.324  
Airplane 35.956  39.772  36.557  
Lena 36.998  37.346  35.936  
Pepper 33.003  34.700  33.385  
Splash 36.337  38.960  35.924  
256 
Average 35.574  37.695  35.451  
 
 
 1-8
Table 4 Results of average number of examined colors of the full search (FS) k-means algorithm, the k-means 
algorithm with PDS, TIE, and MPS, and the proposed scheme 
k-means Algorithm 
Palette Sizes 
FS PDS [13] TIE [14]  MPS [15] 
Proposed Scheme
16 16 16 16 6.775 4.865 
32 32 32 32 8.449 5.921 
64 64 64 64 10.653 7.540 
128 128 128 128 14.005 9.694 
256 256 256 256 20.556 12.108 
 
 
 
Table 5 Results of numbers of components and colors that are needed in calculation of the squared Euclidean 
distance in the k-means algorithm with PDS, TIE, and MPS, and the proposed scheme for palette design 
k-means Algorithm 
PDS [13] 
Proposed Scheme Palette 
Sizes Images 
components colors 
TIE [14] MPS [15] 
components colors 
Airplane 73.177 2.164 3.600 2.965 6.131 1.850 
Lena 79.712 2.905 4.372 4.492 8.242 2.430 
Pepper 80.729 3.075 4.285 5.405 8.504 2.476 
Splash 79.192 2.253 3.602 3.948 7.282 2.137 
64 
Percentage 40.73% 4.06% 6.19% 6.57% 3.93% 3.47%
Airplane 144.374 2.904 4.618 4.344 8.172 2.352 
Lena 155.288 3.856 5.844 7.229 10.792 3.016 
Pepper 155.747 3.990 5.706 8.814 10.988 3.059 
Splash 150.448 2.718 4.571 5.798 8.822 2.515 
128 
Percentage 39.44% 2.63% 4.05% 5.11% 2.52% 2.14%
Airplane 285.866 3.832 5.356 6.348 10.559 2.918 
Lena 294.017 4.894 7.185 11.250 13.261 3.593 
Pepper 298.183 5.022 7.136 14.090 13.620 3.624 
Splash 290.752 3.360 5.787 8.832 10.991 3.009 
256 
38.05% 1.67% 2.49% 3.96% 1.58% 1.28% 38.05%
 
 
 1-10
 
  
(a) Airplane (b) Lena 
  
(c) Peppers (d) Splash 
Fig. 2 Four testing images of 512×512 pixels 
 
 2-1
Accelerated Pixel Mapping Scheme for Color Image Quantization 
 
 
Abstract 
A fast pixel mapping scheme that is equivalent to 
the full search algorithm for color image quantization is 
proposed in this paper.  The palette is first sorted by 
the mean values of colors before the pixel mapping 
procedure is executed.  A filter that exploits the 
relationship between the squared sum distance and the 
squared Euclidean distance is employed to speedup the 
closest color search process.  In addition, another filter 
based on the triangle inequality is employed to further 
cut down the computational cost of the pixel mapping 
procedure.  According to the experimental results, the 
proposed algorithm requires the least computational 
cost than these comparative schemes. 
Keywords: Color quantization; Pixel mapping; 
Triangular inequality 
 
1. Introduction 
 The RGB color image consists of three 
components: red, blue and green, each of which is 
represented by one byte.  Three bytes are needed to 
store one color pixel and there are 16777216 (224) 
possible colors in one RGB color image.  Due to the 
limitations of image display devices, storage 
requirement, and data transmission bandwidth, the need 
for color image quantization is essential [1].   
Color image quantization can be divided into 
three procedures: palette design, pixel mapping and 
image decoding.  The goal of the palette design 
procedure is to generate a set of representative colors 
that will be used in the pixel mapping procedure and 
the image decoding procedure.  Generally, the set of 
representative colors is called the color palette.  
Several methods had been proposed for the design of 
color palette.  They can be classified into two classes: 
splitting methods and clustering methods.   
The class of splitting methods divides the RGB 
color space into disjoined regions.  One representative 
color is determined to represent each region.  The 
median cut method [2], the mean cut method [3], the 
variance-based color quantization algorithm [4], the 
RWM-cut method [5], and the color space 
dimensionality reduction [6] all belong to the class of 
splitting methods.   
Another class of palette design methods performs 
clustering of the color space.  The k-means clustering 
algorithm [7] is a famous clustering algorithm for 
pattern recognition.  The k-means clustering algorithm 
is a sub-optimal quantization approach that is highly 
affected by the selection of initial patterns.  A genetic 
k-means clustering algorithm [8] had been proposed to 
solve the initial palette selection problem.  The major 
drawback of this method is that a great deal of the 
computational cost is consumed.  To cut down the 
computational cost of the palette design process, the 
reduction of RGB color space [9] had been proposed.  
In addition, the fuzzy clustering color quantization 
algorithm [10] had been introduced. 
The pixel mapping procedure for color image 
quantization is also called the image encoding 
procedure.  In the pixel mapping procedure, the 
closest color in the palette for each color pixel in the 
given image is determined.  The index of the closest 
color in the palette is used to represent each color pixel.  
The squared Euclidean distance is the most commonly 
used distance measure to determine the closest palette 
color for each color pixel.  The closest palette color is 
the one with the minimal squared Euclidean distance to 
the input color pixel.  The compressed codes of the 
given color image after the pixel mapping procedure is 
executed are the indices of the closest colors in the 
palette.   
Suppose the palette of k colors is used in the pixel 
mapping procedure, k squared Euclidean distances are 
computed and then (k-1) comparisons are performed to 
determine the closest color in the palette for one color 
pixel.  The calculation of one squared Euclidean 
distance involves 3 multiplication operations and 5 
addition operations.  The straightforward approach for 
pixel mapping described above is called the full search 
(FS) algorithm.  The FS algorithm for pixel mapping 
needs a great deal of computational cost.   
To speedup the FS algorithm, the lookup table 
(LUT) that recording the squared values ranging from 
02 to 2552 can be previously calculated so that the 
multiplication operations required in the calculation of 
squared Euclidean distance can be avoided.  By using 
LUT of 256 entries, a great deal of computational cost 
can be reduced. 
The concept of LUT was extended and employed 
in color image quantization [11].  In this scheme, the 
components of one color pixel are used as the three 
indices to search the previously generated table for 
finding the closest palette color.  A large table sized 
2563 bits (16 Mb) is required when the component 
values of color pixels and the required index of palette 
color are represented by 8 bits.   
Based on the study of vector quantization (VQ) 
[12]-[13], we find that color image quantization can be 
viewed as a special case of vector quantization.  VQ 
was a block-based image compression scheme for 
grayscale images.  VQ consists of three procedures: 
codebook design, image encoding and image decoding.  
A set of representative codewords is generated in the 
codebook design procedure that will be used in the 
image encoding/decoding procedures.   
In the image encoding procedure, each grayscale 
image to be compressed is partitioned into a set of 
non-overlapped image block of n×n pixels, typically 
4×4.  Each image block (also called image vector) is 
 2-2
squared sum distance is introduced.  The squared 
Euclidean distance between the image vector x and the 
codeword cw in the codebook is defined as 
dE(x,cw)= ∑×
=
nn
j 1
(xj - cwj)
2
.      (3) 
In addition, the squared sum distance (SSD) 
between the image vector x and the codeword cw is 
defined as 
dS(x,cw) = ( ∑×
=
nn
j 1
xj - ∑
×
=
nn
j 1
cwj )
2
.     (4) 
The inequality exploiting the relationship 
between the SED and SSD for the codeword cw and 
image block x is proven true and is described as 
follows: 
dS(x,cw) ≤ (n×n)×dE(x,cw).      (5) 
The test condition that makes use of the derived 
relationship can be employed to reject some impossible 
codewords.   
n×n×dmin < dS(x,cw).       (6) 
Here dmin denotes the minimal squared Euclidean 
distance between the input vector x and the searched 
closest codeword cwmin found so far.  If the squared 
sum distance between the input vector x and the 
codeword cw to be searched is greater than n×n times 
the value of dmin, the codeword cw cannot be the closest 
codeword because the inequality dmin<dE(x,cw) can be 
derived from Eq. (5) and Eq. (6).  Thus, codeword cw 
can be safely rejected without actually computing the 
squared Euclidean distance between codeword cw and 
input vector x.  By using the MPS test condition, a 
great deal of the candidate codewords can be rejected 
early and therefore, a significant amount of time 
reduction can be achieved. 
 
2.4 Reduction of color space dimensionality for pixel 
mapping 
The concept of color space dimensionality 
reduction had been proposed [6] to design the color 
palette and speedup the pixel mapping procedure.  To 
design the color palette, each color pixel of 24 bits is 
transformed to 15 bits.  Each color component is 
reduced from 8 bits to 5 bits.  Here, the low-ordered 
three bits of RGB components of each pixel are 
truncated.  The possible colors after reduction of color 
space dimensionality becomes 215.  Then, the 
processed colors are used to design the color palette of 
k colors. 
At first, all the transformed colors are regarded as 
a single group.  The mean color c  of the 
transformed colors is calculated, and the color cf with 
the longest distance to the mean vector is c  
determined.  The line l passes through c  and cf as 
shown in Fig. 2 is used to classify the colors into two 
groups.   
By projecting all the transformed colors of 15 bits 
on the line l, the average projection value pavg can be 
computed.  The transformed colors with their 
projection values less than or equal to pavg are classified 
into the first group.  Otherwise they are classified into 
the second group.  The mean vectors of the two 
groups are then calculated and are used to represent the 
colors in these two groups.  Now, two representative 
colors are designed.  To design a palette of k colors, 
the same process described above is repeated k-1 times 
by selecting the group with the large variance value for 
further splitting. 
Now, we turn to introduce the proposed pixel 
mapping scheme based on the reduction of color space 
dimensionality.  To accelerate the pixel mapping 
procedure, the mean value pc  of the palette colors is 
computed and the palette color pcf with the longest 
distance to pc  is determined.  The line lp passes 
through pc  and pcf is used to project all the palette 
colors.  Then, the colors in the palette are sorted by 
the projection values.  Let pi and pj denote the 
projection values of palette colors pci and pcj, 
respectively.  We find that the squared Euclidean 
distance between projection values pi and pj is less than 
or equal to the squared Euclidean distance between 
palette colors pci and pcj.   
To find the closest palette color for color pixel x, 
we need to project x on lp to get the project value px.  
The palette color pcpred with the nearest projection 
value is selected as the initial searched color in the 
palette.  The squared Euclidean distance between x 
and the initial searched color pcpred is calculated and 
stored in dmin.  For any palette color pci further in 
search, the squared Euclidean distance between pi and 
px is calculated first.  If the calculated distance is 
greater than dmin, pci can be safely rejected without 
calculating the squared Euclidean distance between x 
and pci.  Otherwise, the squared Euclidean distance 
between x and pci is calculated.  If it is less than dmin, 
we need to update dmin. 
Take the example as shown in Fig. 3, we find that 
pj is the nearest projection value of px.  The squared 
Euclidean distance between x and pcj is calculated and 
stored in dmin.  Suppose the squared Euclidean distance 
between pi and px is greater than dmin, the palette color 
pci cannot be the closest color of x.  Suppose the 
squared Euclidean distance between ph and px is less 
than dmin, we need to calculate the squared Euclidean 
distance between x and pch.  If the calculated distance 
is less than dmin, we need to update dmin.. 
 
3. The proposed algorithm 
In this section, we shall describe the proposed 
pixel mapping algorithm.  The goal of the proposed 
algorithm is to take the advantages of the MPS 
algorithm and the TIE method of VQ to accelerate the 
pixel mapping procedure of color quantization.  To 
achieve the goal, we design a simple prediction 
technique based on the mean value of color pixel to 
determine the initial searched color in the palette.  In 
addition, the PDS technique as described in Section 2.1 
and the use of the lookup table of 256 entries storing 
the squared values ranging 02 to 2552 are used in the 
proposed scheme. 
 2-4
Step 4.3 Compute the squared Euclidean 
distance dE(cp,cnext) between cp 
and pcnext.  The PDS test 
condition as described in Section 
2.1 is used here to check whether 
the calculation of dE(cp,cnext) can 
be early terminated. 
Step 4.4 If dE(cp,pcnext) < dmin, then let dmin 
= dE(x, cnext) and Imin = next. 
Step 5. Output Imin. 
Step 6. If there is any color pixel to be process, go 
to Step 2.  Otherwise, the pixel mapping 
process stops. 
 
 In Step 2, the initial search color in the palette for 
each color pixel cp is determined by performing a 
simple table lookup operation.  Then, the squared 
Euclidean distance between cp and the initial color is 
calculated and stored in dmin.  In Step 4, the next 
palette color to be checked is determined based on the 
proposed color rearrangement mechanism as illustrated 
in Fig. 4. 
The first filter and the second filter (TIE filter) 
are used in Step 4.1 and Step 4.2 to speedup the pixel 
mapping procedure, respectively.  Only the palette 
colors pass the two filters needs to calculate the squared 
Euclidean distance are the candidates of the closest 
colors in the palette for each color pixel.  In Step 4.3, 
the multiplication operations are avoided by using the 
lookup table.  In addition, the PDS technique as 
described in Section 2.1 is used in Step 4.3. 
  
4. Experimental results 
To verify the performance of the proposed 
method, several simulations had been performed on a 
personal computer (PC) Pentium 4- 2.4GHz with 256 
MB RAM under the operation system of Linux RedHat 
9.0.  The experimental results listed in the following 
are the average performance of six color 512×512 
images “Airplane,” “Baboon,” “House,” “Lena,” 
“Splash,” and “Tiffany.”  These six testing images 
were shown in Fig. 5.   
For any M×N color image, the mean squared 
error (MSE) between the original image and the 
reconstructed image is defined as 
MSE= ∑∑∑
= = =
−××
M
i
N
j h
ijhijh xxNM 1 1
3
1
2' )(
3
1 .  (12) 
Here xij and 'ijx  denote the original and the 
recovered color pixels of 3 dimensions, respectively.  
Besides, the quality of the reconstructed image is 
measured by means of the peak signal-to-noise-ratio 
(PSNR), which is defined as  
PSNR = 10× log10 (
2255
MSE ).       (13) 
Note that MSE is a commonly used measurement 
for evaluating the image quality.  Some other 
measurements [20]-[22] based on the Human Visual 
System (HVS) have been proposed to measure the 
degree of similarity between two given images. 
 In the simulations, the k-means algorithm was 
used to design the palettes of 16, 32, 64, 128, and 256 
colors.  The diagonal sampling approach is taken to 
select the colors in the initial palette from the diagonal 
line of the color image.  Then the k-means algorithm 
is employed to design the color palette.  The 
terminated threshold used in the k-means algorithm is 
set to 0.001.  Experimental results of the image 
qualities of color quantization using different sizes of 
palettes are given in Table 1.  We find that the average 
image qualities of color quantization are greater than 30 
dB when the palettes of 64, 128, and 256 colors are 
used.   
Comparative results of computational times of 
the pixel mapping procedure using different pixel 
mapping methods are given in Table 2.  Here, FS and 
FS-LUT denote the full search algorithm and the full 
search algorithm with the lookup table for pixel 
mapping, respectively.  In FS-LUT, an additional array 
recording the squared Euclidean distance between all 
pairs of colors in the palette is used.  TIE denotes the 
triangular inequality rule and the lookup table and PDS 
technique are cooperated into the TIE method.  
Besides, the initial color prediction technique 
introduced in the proposed scheme is used to determine 
the initial searched in the palette in TIE.  In addition, 
the results of the scheme using the reduction of color 
space dimensionality (RCSD) as described in Section 
2.4 are also listed in Table 2.  Furthermore, PS denotes 
the proposed scheme and PS* denotes the proposed 
scheme without using the TIE filter. 
According to the results, we find that FS requires 
the greatest execution times among these comparative 
schemes.  The use of lookup table in FS-LUT can cut 
down about 47.5% computational cost of FS.  
Compared to FS, the reductions of execution times of 
RCSD, PS*, and PS are 74.4%, 94.3%, and 94.7%, 
respectively.  Compared to FS-LUT, the time 
reductions of RCSD, PS*, and PS are 51.2%, 89.1%, 
and 89.8%, respectively.  PS* and PS require 
approximately the same computational cost when the 
palettes used are small.  But, PS achieves better 
performance in terms of execution time when a large 
palette is used. 
It is interesting that RCSD requires more 
execution time than FS-LUT when a palette of 16 
colors is used.  That may due the search of colors 
based on projection values requires quite a few 
computational costs.  From the results, RCSD 
consumes less computational times than RCSD when 
the palettes of 16, 32, and 64 are used.  However, 
RCSD required fewer execution times when the 128 
and 256 palettes are used.   
The average numbers of colors in the palettes that 
are used in calculating the squared Euclidean distances 
from the processed color pixels of these comparative 
schemes are given in Table 3.  According to the results, 
we find the average number of checked colors of FS 
and FS-LUT equals the size of the palette.  TIE needs 
to check fewer colors than that of RCSD.  PS* checks 
fewer colors than that of RCSD.  Among these 
schemes, PS needs to check the least colors in the 
 2-6
177-200, 1998. 
[22] Z. Wang and A. Bovik, “A universal image quality 
index,” IEEE Signal Processing Letters, vol. 9, no. 
3, pp. 81-84, Mar. 2002. 
 
.
cwmin
.
.x
dmin
2dmin
cwx
cwy
cwz.
.
 
Fig. 1 Illustration of the triangular inequality rule 
 
Fig. 2 Projection line l passes through c  and cf 
 
Fig. 3 Example of pixel mapping using reduction of color space dimensionality 
pc1
pc2
pc3
pck-2
pck-1
pck
pcpred
pcpred+1
pcpred-2
pcpred-1
pcpred+2
.
.
.
.
.
.
1
2
5
3
4
.
.
.
.
.
.
6
7
predicted
color
 
(a) The original palette of k colors  (b) The searching order of colors 
Fig. 4 Example of the color rearrangement mechanism 
 2-8
Table 1 Results of image qualities of color image quantization using different palette sizes 
Palette size
Images  
16 32 64 128 
Airplane 30.438  32.553  35.425  38.079  
Baboon 24.131  26.188  28.494  30.336  
House 26.194  28.537  30.928  33.524  
Lena 28.710  31.010  33.533  35.475  
Splash 28.365  30.830  33.105  36.414  
Tiffany 28.253  30.709  33.024  35.318  
Average 27.682  29.971  32.418  34.858  
Table 2 Results of computational times (in seconds) of comparative methods, the proposed scheme without using TIE 
(PS*) and the proposed scheme (PS) 
Sizes  Images FS FS-LUT TIE RCSD PS* PS 
Airplane 0.600  0.300  0.200  0.383  0.083  0.083  
Baboon 0.683  0.350  0.233  0.567  0.167  0.150  
House 0.633  0.333  0.217  0.450  0.117  0.117  
Lena 0.650  0.333  0.217  0.417  0.100  0.100  
Splash 0.633  0.350  0.183  0.383  0.083  0.083  
Tiffany 0.617  0.317  0.233  0.433  0.117  0.083  
16 
Percentage 100% 52.044% 33.648% 69.025% 17.453% 16.195% 
Airplane 1.233  0.633  0.350  0.500  0.117  0.100  
Baboon 1.300  0.717  0.400  0.800  0.217  0.217  
House 1.267  0.633  0.367  0.600  0.133  0.133  
Lena 1.250  0.650  0.350  0.583  0.150  0.133  
Splash 1.267  0.667  0.333  0.517  0.117  0.117  
Tiffany 1.217  0.633  0.367  0.567  0.150  0.150  
32 
Percentage 100% 52.229% 28.742% 47.373% 11.704% 11.306% 
Airplane 2.517  1.283  0.667  0.650  0.133  0.133  
Baboon 2.600  1.383  0.717  1.183  0.317  0.300  
House 2.583  1.300  0.667  0.817  0.183  0.183  
Lena 2.517  1.317  0.667  0.800  0.200  0.183  
Splash 2.533  1.350  0.667  0.667  0.133  0.133  
Tiffany 2.467  1.267  0.683  0.850  0.217  0.200  
64 
Percentage 100% 51.932% 26.735% 32.650% 7.768% 7.453% 
Airplane 5.000  2.533  1.233  0.983  0.183  0.183  
Baboon 5.167  2.783  1.317  1.817  0.450  0.383  
House 5.133  2.650  1.267  1.167  0.267  0.267  
Lena 5.067  2.683  1.250  1.167  0.283  0.250  
Splash 5.050  2.700  1.167  0.950  0.200  0.183  
Tiffany 5.033  2.567  1.267  1.300  0.300  0.250  
128 
Percentage 100% 52.276% 24.631% 24.256% 5.537% 4.985% 
 
