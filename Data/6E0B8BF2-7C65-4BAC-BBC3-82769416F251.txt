In our previous study [25], the formulae and operations of DE are extended for an arbitrary number
of DVs. Experimental results show that that multiple DVs can significantly improve DE in terms of
solution quality and convergence speed, especially for high-dimensional functions. Additionally, using
probabilistic number of DVs can lead to a faster convergence speed with a comparable solution quality
than deterministic number of DVs.
This project extends our study by adaptively varying the number of DVs in DE. Specifically, this study
designs the method for adaptation in the number of DVs and investigates its effects on DE performance.
Three adaptive strategies are proposed for controlling the number of DVs. To validate the advantage of
the proposed method, we conducted comprehensive experiments on 13 numerical optimization problems.
The rest of this report is organized as follows. Section II reviews pertinent literature on parameter control
of DE. Section III describes the proposed methods and Section IV presents the experimental results.
Finally, conclusions are drawn in Section V.
II. RELATED WORK
The typical control parameters of DE include amplification factor F of the difference vector, crossover
rate Cr, and population size NP . While focusing on determination and sensitivity analysis of control
parameters in DE, some studies attempt to improve DE through adaptively or self-adaptively controlling
parameters [9], [33]. Here these methods are categorized and reviewed with respect to their control
manner and objectives. As well as DE parameters, some studies [6], [15] proposed adaptive strategies to
control the scope and strength of local search in the hybrid DE algorithms.
Adaptive parameter control methods require feedback from the system as the basis for adjusting the
parameter. The population diversity is widely used as the feedback for adaptive parameter control. Xue
et al. [26] developed a fuzzy logic controller (FLC) to alter the amplification factor F dynamically
for a particular multi-objective differential evolution (MODE) algorithm. The population diversity and
generation percentage are taken as inputs of the FLC to control the amplification factor associated with
the reproduction operator of MODE. The FLC-MODE, however, may yield a worse result than the MODE
using constant parameters does. Qian and Li [19] developed the adaptive differential evolution algorithm
(ADEA) to resolve multi-objective optimization problems (MOPs). The proposed ADEA updates the
amplification factor based on the current Pareto front and the diversity of current solutions during
evolution. The simulation results indicate that amplification factor F , which determines the search range,
influences the convergence speed and population diversity. Boškovic´ et al. [1] devised an adaptive DE
with opposition-based mechanisms, where the amplification factor is updated according to the standard
deviation of the population diversity.
Apart from population diversity, Nobakhti and Wang [12], [13], [14] utilized a simple randomized
self-adaptive scheme for the factor F . The proposed method, randomized adaptive differential evolution
(RADE), initializes the control parameter F at uniformly distributed random to ensure the diversity.
Moreover, parameter F is included as a part of the individual and coevolves with variables. Experimental
results indicate that RADE performs better than the non-adaptive DE. Coelho and Mariani [5] designed
two adaptive strategies and two self-adaptive strategies for DE to deal with the power economic dispatch
problem. The self-adaptive parameter control methods for F use a uniform distribution and a Gaussian
distribution, both in the range of [0.5, 1]. Simulation results show that the adaptively increasing mechanism
for F can improve DE in terms of mean cost.
Few studies have attempted to control only the crossover rate of DE. Das et al. [7] proposed the
annealed differential evolution (AnDE), which applies simulated annealing to the selection scheme. In
addition, AnDE controls crossover rate Cr in a deterministic manner; specifically, it linearly decreases
the crossover rate Cr from 1 to 0.5 over time. This method outperforms the conventional DE with
statistical significance. Several adaptive approaches have been devised to control the amplification factor
and crossover rate simultaneously. By using population diversity as the feedback for adaptive parameter
control, the fuzzy adaptive differential evolution algorithm (FADE) [9], [10] determines the amplification
factor and crossover rate through an FLC. During optimization, FLC takes the changes of parameter
vectors and fitness values as inputs, and control parameters F and Cr as outputs. In related studies, the
performance of DE is sensitive to the control parameters, and their best setting depends on problems and
requirements. According to the experimental results, FADE converges much faster than the traditional DE
the vectors to be inserted into the population as survivors for the next generation. In DE, the initial vector
population is generated randomly and should cover the entire parameter space.
1) Mutation : For each target vector xig, a mutant vector is generated by
vig+1 = x
r1
g + F
(
xr2g − xr3g
)
,
where the indexes r1, r2, r3 ∈ {1, . . . , NP} are chosen at random under the constraint ri 6= rj for i 6= j
and F ∈ R+ is the amplification factor. Note that the three indexes are chosen independently for each
mutant vector vig+1. The differential variation
(
xr2g − xr3g
)
represents a difference vector (DV) used to
alter xr1g . The factor F controls the amplification of DV and is commonly in [0, 2].
The DE with multiple DVs extends the mutation by
vig+1 = x
r1
g +
N∑
k=1
Fk
(
xr2kg − xr2k+1g
)
, (1)
where r1, . . . , r2N+1 ∈ {1, . . . , NP} are mutually different and Fk ∈ R+ for k = 1, . . . , N . In this
expression, each DV has its own amplification factor.
The study [25] proposes deterministic and probabilistic methods for determining the number of DVs.
It also indicates that an appropriate setting of parameters can improve the solution quality or convergence
speed or both. However, suitable parameters are usually problem-dependent and difficult to obtain [2],
[18]. This project presents the design for adaptation in the number of DVs to address this issue.
2) Crossover : Differential evolution performs crossover with a trial vector, uig+1, to diversify the
perturbed parameter vectors. The target vector xig also participates in the crossover operation. Specifically,
the trial vector
uig+1 =
(
ui1g+1, u
i2
g+1, . . . , u
iD
g+1
)
is created by, for j = 1, . . . , D,
u
ij
g+1 =
{
v
ij
g+1, rj ≤ Cr or j = rni
x
ij
g , rj > Cr or j = rni
where rj ∈ [0, 1] is a uniformly random number; Cr ∈ [0, 1] is the crossover rate, which is a user-defined
parameter; and rni ∈ {1, . . . , NP} is a random index, which ensures that the trial vector uig+1 includes
at least one element from mutant vector vig+1.
3) Selection : The selection operator in DE determines the survivors for next generation. For this, DE
uses a greedy manner based on local competition: the winner of trail vector uig+1 and target vector x
i
g
can survive into generation g + 1. Formally, for a minimization problem,
xig+1 =
{
uig+1, f
(
uig+1
)
< f
(
xig
)
xig, otherwise
B. Adaptation in the Number of DVs
In the DE with multiple DVs, the number of DVs should be determined with respect to the problem
to be solved. In addition, a good strategy for the number of DVs should be capable of well exploring the
search space as well as of exploiting the promising individuals. To this end, this project proposes three
adaptive strategies for controlling the number of DVs: AdaN, AdaNInv, and AdaN-S. More details about
the strategies are given below.
1) AdaN Strategy: The AdaN strategy uses the Cauchy distribution with mean of µN and standard
deviation of 0.5 for the number N of DVs, i.e.,
N ∼ Cauchy(µN , 0.5) .
The initial value of µN is set to 1 and adaptively updated by
µN = 0.9 · µN + 0.1 ·meanL(s) (2)
Table I: Comparison of MBF and one-tailed t-test results for DE using one DV, AdaN, and AdaNInv.
Asterisk marks the best result among the three methods. Boldface in MBF denotes the superiority to
DE/1; that in p-value denotes the significant improvement over DE/1.
MBF p-value
#Gen DE/1 DE/AdaN DE/AdaNInv DE/AdaN
vs. DE/1
DE/AdaNInv
vs. DE/1
f1 1500 6.70E-14 7.10E-02 1.3E-22* -1.1E-01 2.1E-13
f2 2000 5.00E-10 8.80E-07 2.3E-16* -1.4E-01 1.0E-19
f3 5000 5.70E-11 7.20E+01 3.4E-15* -3.6E-12 6.0E-08
f4 5000 1.7E-01* 8.50E+00 2.90E+00 -7.8E-24 -2.1E-09
f5 3000 1.6E+00* 9.10E+01 2.00E+01 -2.1E-08 -3.2E-59
20000 8.0E-02* 9.00E+01 1.60E-01 -1.9E-08 -2.8E-01
f6 100 2.20E+03 1.3E+02* 4.80E+02 1.8E-28 2.1E-25
1500 0.0E+00* 6.20E-01 0.0E+00* -1.1E-03 –
f7 3000 4.30E-03 2.0E-03* 2.90E-03 7.7E-17 3.0E-09
f8 1000 4.50E+03 1.4E+03* 4.20E+03 1.9E-13 1.9E-01
9000 4.0E+01* 4.40E+02 1.30E+02 -7.0E-19 -2.4E-05
f9 1000 1.90E+02 1.1E+02* 1.70E+02 9.1E-26 -3.1E-15
5000 7.80E+01 8.80E+00 6.3E+01* -3.4E-26 1.1E-03
f10 500 8.00E-02 4.00E-02 1.7E-03* 1.3E-02 3.3E-30
2000 8.60E-11 4.00E-02 3.8E-15* -1.1E-02 1.3E-20
f11 500 1.20E-01 2.30E-02 7.4E-04* 7.1E-10 2.3E-15
3000 0.0E+00* 2.30E-02 0.0E+00* -1.2E-02 –
f12 500 4.80E-03 3.70E-02 3.4E-06* -7.1E-04 9.2E-10
1500 6.20E-15 3.70E-02 8.4E-24* -1.5E-04 2.6E-10
f13 500 3.40E-02 3.70E-01 2.2E-05* -2.9E-02 4.3E-17
1500 4.40E-14 3.20E-01 5.5E-23* -8.9E-03 1.7E-11
F ibest = Fi(1− log10(N ibest))
F irand = Fi(1− log10(N irand))
The value Fi ∼ Cauchy(µF , 0.5) and µF is updated using
µF = 0.9 · µF + 0.1 ·meanL(sF ) ,
where meanL denotes the Lehmer mean and success vector sF includes the amplification factors with
which trial vectors surpass target vectors.
IV. EXPERIMENTAL RESULTS
This project conducts a series of experiments on 13 numerical benchmark functions to investigate
the effectiveness of adaptive strategies AdaN, AdaNInv, and AdaN-S. The benchmark functions include
two types of problems: f1–f7 are high-dimensional unimodal functions, and f8–f13 are high-dimensional
multimodal functions with many local optima1. For more detailed description of these functions, see
[27], [29]. The dimension for all functions is D = 30. The population size for the test DE is set to
NP = 100. Each experiment includes 50 runs given the stochastic nature of DE. Here we adopt the
notation DE/(S)/N to identify different variants of DE, where optional S refers to the means of selecting
individuals to be mutated and N denotes the number of DVs used for mutation. For instance, DE/rand/1
represents the standard DE that mutates a random individual with reference to one DV and DE/rand/AdaN
denotes the multi-DV DE using AdaN strategy for the number of DVs.
A. Adaptive Number of DVs for DE
Table I compares the mean best fitness (MBF) for the original DE and the multi-DV DE using AdaN
and AdaNInv. The experimental results show that the two adaptive strategies, especially AdaNInv, can
lead to better solution quality than fixed one DV does on most of the test cases. With confidence level
α = 0.05, Table I shows that AdaNInv achieves significant improvement in MBF to the DE using a
1The low-dimensional multimodal functions f14–f23 are omitted from the test suite due to their low distinguishability in the test results
of different algorithms.
Table II: Comparison of MBF and one-tailed t-test results for JADE using one DV, AdaN, AdaNInv,
and AdaN-S. Asterisk marks the best result among the three methods. Boldface in MBF denotes the
superiority to JADE/1; that in p-value denotes the significant improvement over JADE/1.
MBF p-value
#Gen JADE/
1
JADE/
AdaN
JADE/
AdaNInv
JADE/
AdaN-S
JADE/AdaN
vs. JADE/1
JADE/AdaNInv
vs. JADE/1
JADE/AdaN-S
vs. JADE/1
f1 1500 3.00E-56 2.70E-88 1.30E-58 2.4E-88* 1.6E-01 1.6E-01 1.6E-01
f2 2000 4.90E-34 1.50E-60 2.40E-36 3.3E-62* 1.4E-01 1.6E-01 1.4E-01
f3 5000 1.20E-58 1.8E-78* 1.90E-58 1.10E-72 1.5E-01 -3.5E-01 1.5E-01
f4 5000 3.00E-25 1.7E-55* 1.20E-27 4.20E-30 9.6E-02 -9.7E-02 9.6E-02
f5 3000 8.00E-02 8.00E-02 6.1E-30* 3.20E-01 -2.8E-01 3.3E-01 -2.0E-01
20000 8.00E-02 8.00E-02 6.1E-30* 3.20E-01 -2.8E-01 3.3E-01 -2.0E-01
f6 100 1.50E+00 0.0E+00* 8.00E-02 0.0E+00* 3.4E-14 -1.6E-13 3.4E-14
1500 0.0E+00* 0.0E+00* 0.0E+00* 0.0E+00* – – –
f7 3000 5.30E-04 5.20E-04 5.60E-04 3.9E-04* 4.0E-01 -3.0E-01 8.9E-04
f8 1000 1.4E-05* 1.20E+03 1.10E-02 1.20E-01 -2.4E-37 -4.5E-14 -8.0E-07
9000 1.50E-13 3.60E-14 1.50E-13 0.0E+00* 8.7E-02 -5.0E-01 2.2E-02
f9 1000 7.8E-05* 2.20E+01 8.50E-03 2.10E-01 -2.9E-44 -1.2E-25 -2.5E-18
5000 0.0E+00* 0.0E+00* 0.0E+00* 0.0E+00* – – –
f10 500 3.60E-10 7.4E-14* 7.20E-10 4.2E-14* 1.3E-10 -6.0E-04 1.3E-10
2000 3.60E-15 4.00E-15 3.6E-15* 3.6E-15* -6.4E-03 5.0E-01 –
f11 500 3.90E-07 6.90E-04 1.20E-06 4.8E-16* -2.6E-02 -4.3E-02 1.6E-01
3000 0.00E+00 6.90E-04 0.0E+00* 0.0E+00* – – –
f12 500 2.20E-18 4.10E-03 2.30E-17 1.3E-26* -8.0E-02 -1.1E-01 7.7E-03
1500 1.6E-32* 4.10E-03 1.6E-32* 1.6E-32* -8.0E-02 5.0E-01 –
f13 500 1.70E-17 9.2E-26* 4.00E-17 1.30E-25 8.4E-02 -1.5E-01 8.4E-02
1500 1.3E-32* 1.40E-32 1.3E-32* 1.3E-32* -4.2E-02 5.0E-01 –
JADE. Nonetheless, the adaptive strategies (especially AdaN-S) can successfully improve JADE and lead
to significantly better MBF.
Figure 3 plots the anytime behaviors of JADE using one DV and the three adaptive strategies.
JADE/AdaN and JADE/AdaN-S have similar behaviors and both converge faster than the original JADE
and JADE/AdaNInv. Moreover, JADE/AdaN-S can prevent the premature convergence of JADE/AdaN,
e.g., on f9. Figure 4 shows the variation of µN and µF for JADE with adaptive number of DVs. The
variation of µN for AdaN and AdaNInv in JADE is similar with that in DE at the beginning, namely,
a rapid increase in µN for AdaN but a decrease for AdaNInv. However, after the rapid change, the
two strategies reverse the trends: AdaN then decreases µN whereas AdaNInv increases it gradually. In
addition, the figure shows that µF varies for a moderate amplification factor. Note that amplification
factor F magnify the DV in the mutation. Thus a large µF value corresponds to a broad search; by
contrast, a small µF will focus on a small search scope and encourage exploitation. These results reflect
the effort of AdaN and AdaNInv on balance of exploitation and exploration through adjusting the number
of DVs. As for AdaN-S, the control parameters µNbest , µNrand , and µF all increase in the beginning and
then smoothly converge to µNbest ≈ 3, µNrand ≈ 2, and µF ≈ 0.25, respectively. This smoothness helps
prevent JADE/AdaN-S from the premature convergence in JADE/AdaN.
V. CONCLUSIONS
The number of DVs has shown to be an essential arity of DE. In this project, we design the strategies
for adaptively controlling the number of DVs and its associated DE parameters. Specifically, this study
proposes three adaptive strategies for the number N of DVs, i.e., AdaN, AdaNInv, and AdaN-S, in which
N is based on the Cauchy distribution and the adaptation is performed on its parameters. Depending on
the success of mutation, the adaptive strategies increase or decrease the number of DVs; furthermore,
AdaN-S adaptively adjusts the amplification factor F along with N .
This project conducts a series of experiments to examine the effect of the proposed adaptive strategies
on DE and JADE. The investigation into the variation of these control parameters demonstrates that the
number of DVs N and the amplification F vary in the course of evolution according to the adaptive
strategies. Further, the mean values of the Cauchy distribution for the number of DVs and the amplification
factor tend to converge to µN ≈ 3 and µF = 0.2, respectively. The experimental results show that DE
[7] S. Das, A. Konar, and U. K. Chakraborty. Annealed differential evolution. In Proceedings of the IEEE Congress on Evolutionary
Computation, pages 1926–1933, 2007.
[8] Y. L. Li, F. Ding, and Y. X. Wang. Iterated function system based adaptive differential evolution algorithm. In Proceedings of the
IEEE World Congress on Computational Intelligence, pages 1290–1294, 2008.
[9] J. Liu and J. Lampinen. Adaptive parameter control of differential evolution. In Proceedings of the International Conference on Soft
Computing, pages 19–26, 2002.
[10] J. Liu and J. Lampinen. A fuzzy adaptive differential evolution algorithm. Soft Computing—A Fusion of Foundations, Methodologies
and Applications, 9(6):448–462, 2005.
[11] E. Mezura-Montes, J. Velázquez-Reyes, and C. A. Coello Coello. A comparative study of differential evolution variants for global
optimization. In Proceedings of the Genetic and Evolutionary Computation Conference, pages 485–492, 2006.
[12] A. Nobakhti and H. Wang. Co-evolutionary self-adaptive differential evolution with a uniform-distribution update rule. In Proceedings
of the IEEE International Symposium on Intelligent Control, pages 1264–1269, 2006.
[13] A. Nobakhti and H. Wang. A self-adaptive differential evolution with application on the alstom gasifier. In Proceedings of the
American Control Conference, pages 4489–4494, 2006.
[14] A. Nobakhti and H. Wang. A simple self-adaptive differential evolution algorithm with application on the ALSTOM gasifier. Applied
Soft Computing, 8(1):350–370, 2008.
[15] N. Noman and H. Iba. Accelerating differential evolution using an adaptive local search. IEEE Transactions on Evolutionary
Computation, 12(1):107–125, 2008.
[16] G. C. Onwubolu and B. V. Babu. New Optimization Techniques in Engineering. Springer, 2004.
[17] G. C. Onwubolu and D. Davendra, editors. Differential Evolution: A Handbook for Global Permutation-Based Combinatorial
Optimization. Springer, 2009.
[18] K. V. Price, R. M. Storn, and J. A. Lamplinen. Differential Evolution: A practical approach to global optimization. Springer, 2005.
[19] W. Qian and A. Li. Adaptive differential evolution algorithm for multiobjective optimization problems. Applied Mathematics and
Computation, 201(1-2):431–440, 2008.
[20] A. Qing. A study on base vector for differential evolution. In Proceedings of the IEEE World Congress on Computational Intelligence,
pages 550–556, 2008.
[21] A. Slowik and M. Bialko. Training of artificial neural networks using differential evolution algorithm. In Proceedings of the Conference
on Human System Interactions, pages 60–65, 2008.
[22] O. S. Soliman and L. T. Bui. A self-adaptive strategy for controlling parameters in differential evolution. In Proceedings of the IEEE
World Congress on Computational Intelligence, pages 2842–2847, 2008.
[23] R. Storn and K. Price. Differential evolution—a simple and efficient adaptive scheme for global optimization over continuous spaces.
Technical Report TR-95-012, Berkeley, 1995.
[24] R. Storn and K. Price. Differential evolution—a simple and efficient heuristic for global optimization over continuous spaces. Journal
of Global Optimization, 11(4):341–359, 1997.
[25] C. K. Ting and C. H. Huang. Varying number of difference vectors in differential evolution. In Proceedings of IEEE Congress on
Evolutionary Computation, pages 1351–1358, 2009.
[26] F. Xue, A. C. Sanderson, P. P. Bonissone, and R. J. Graves. Fuzzy logic controlled multi-objective differential evolution. In Proceedings
of the IEEE International Conference on Fuzzy Systems, pages 720–725, 2005.
[27] Z. Yang, K. Tang, and X. Yao. Differential evolution for high-dimensional function optimization. In Proceedings of the IEEE Congress
on Evolutionary Computation, pages 3523–3530, 2007.
[28] Z. Yang, K. Tang, and X. Yao. Self-adaptive differential evolution with neighborhood search. In Proceedings of the IEEE World
Congress on Computational Intelligence, pages 1110–1116, 2008.
[29] X. Yao, Y. Liu, and G. Lin. Evolutionary programming made faster. IEEE Transactions on Evolutionary Computation, 3(2):82–102,
1999.
[30] D. Zaharie and D. Petcu. Adaptive pareto differential evolution and its parallelization. In Proceedings of the Parallel Processing and
Applied Mathematics, volume 3019 of Lecture Notes in Computer Science, pages 261–268, 2003.
[31] J. Zhang and A. C. Sanderson. JADE: Self-adaptive differential evolution with fast and reliable convergence performance. In
Proceedings of the IEEE Congress on Evolutionary Computation, pages 2251–2258, 2007.
[32] J. Zhang and A. C. Sanderson. JADE: Adaptive differential evolution with optional external archive. IEEE Transactions on Evolutionary
Computation, 13(5):945–958, 2009.
[33] K. Zielinski and R. Laur. Differential evolution with adaptive parameter setting for multi-objective optimization. In Proceedings of
the IEEE Congress on Evolutionary Computation, pages 3585–3592, 2007.
在此次  CEC 2011 會議，我組織並主持一個特別議程  (S07) Special Session on 
“Evolutionary Computation in Network Optimization”，於六月八日下午舉行。此外，我與我的
學生劉建宏與許峻豪在第一天的  Workshop on Evolutionary Music 發表  “Evolutionary 
Composition Based on Music Theory” 論文，時間分配為 30分鐘 (包含論文內容報告及 Q&A)。
本篇論文報告時，約有二十餘人蒞臨聆聽，有三位學者於會後前來詢問相關技術問題，並表
達對此論文的高度興趣與提出建議；另外，於第三天下午，我與我的學生黃玉璇發表“Genetic 
Algorithm with Path Relinking for the Multi-Vehicle Selective Pickup and Delivery Problem”，當
時遇到 Evolutionary Strategies 的創始人 Prof. H.-P. Schwefel，他詢問了 SPDP問題的應用性。
大會期間我參加了各相關研究的議程，心得則描述於下一章。在大會第二天傍晚，我出席
Emergent Technologies Technical Committee (ETTC) of the Computational Intelligence Society 
(CIS) 會議，會中並與其它 CIS ETTC Members交流。 
二、 與會心得 
今年大會的議題包含了演化式計算幾個熱門的研究主題，以我所參加的議程而言，發表
的論文均有不錯的學術水準，所針對的問題也都有其重要性，對於瞭解並掌握各研究領域的
現況與挑戰，具有相當大的幫助。整體來說，從自己及他人發表的論文中，吾人之心得為： 
 Representation  
在演化式計算中，我們常將問題的解空間轉換為演化的個體 (或染色體) 空間，這步
驟稱為解的  representation。Representation 為利用演化式計算解題的重要工作。
在 Prof. Ashlock 的 tutorial 中，他廣泛介紹了數種不同的 representation 型式與其特
性。其中較重要的部份為： 
o Real parameter setting：在實數域的數值最佳化問題中，representation 可為 bit 
encoding、real vector、和 exotic三種型式，其中的 exotic 為 Ashlock 所提出的方
式，具有一些在碎形上的特性。Ashlock 也特別提到：從 epistatics 可得知解變數
的序，這些 domain knowledge 可用以設計更好更適用的 representation。 
o Ordered parameters：Ashlock強調 Travelling Salesman Problem (TSP) 雖然常作為
演化式演算法在組合最佳化的測試問題，但除非是理論工作，否則 TSP 對於演化
式演算法而言，並非是個好的測試問題。在  tutorial 中，Asklock 除了介紹
permutation-based representation 之外，也解說了 random key encoding 這種適合於
ordered parameters 的 indirect representation。 
 差分演化 (Differential Evolution, DE)  
差分演化為這幾年相當時興的演化式演算法。除了一般的應用性論文外，今年開始有
一些對於差分演化的理論分析與多目標差分演化方法設計。在理論分析與方法設計方
面，以下介紹幾個較有趣的主題： 
o Asynchronous DE：提出提升 update frequency 可加速收斂的概念，並探討 SD (其
概念類似 generation gap) ，以此控制搜尋時 exploitation 與 exploration 的平衡。實
驗證明小的 SD 值可獲致較佳的結果。 
o Crossover設計：考慮變動的 crossover rate (CR) ，其中特別探討 CR 對收歛速度
五、 活動照片 
與學生劉建宏與許峻豪在 Evolutionary Composition Based on Music Theory論文發表後合影 
 
 
 
與學生黃玉璇在 Genetic Algorithm with Path Relinking for the Multi-Vehicle Selective Pickup 
and Delivery Problem論文發表後合影 
 
 
1Chuan-Kang Ting
From: Alice Smith <cec2011@ieee-cis.org>
Sent: Wednesday, March 16, 2011 8:29 PM
To: hyh99m@cs.ccu.edu.tw; ckting@cs.ccu.edu.tw
Subject: IEEE CEC 2011 Paper #344 Decision Notification
Follow Up Flag: Follow up
Flag Status: Flagged
Dear Author(s), 
 
Congratulations! On behalf of the IEEE CEC 2011 Technical Program Committee and the program chairs, we are 
pleased to inform you that your paper: 
 
    Paper ID:   344 
    Author(s):  Yu‐Hsuan Huang and Chuan‐Kang Ting 
    Title:      Genetic Algorithm with Path Relinking for the Multi‐Vehicle Selective Pickup and Delivery Problem 
 
has been accepted for presentation at the 2011 IEEE Congress on Evolutionary Computation and for publication in 
the conference proceedings published annually by IEEE. This email provides you with all the information you require 
to complete your paper and submit it for inclusion in the proceedings.  A notification of the presentation format 
(oral or poster) and timing of that presentation will be sent by mid‐April. 
 
Here are the steps you must follow: 
 
1. Please see the REVIEWERS' COMMENTS below for your paper, which are intended to help you to improve your 
paper for final publication. The listed comments should be addressed, as acceptance is conditional on appropriate 
response to the requirements and comments.  Please adhere to the formatting instructions carefully. 
 
2. Please prepare your manuscript for final camera ready submission following the same PDF format guidelines as for 
the initial submission. Papers are limited to eight (8) pages in length or an over length fee will be imposed, must be 
IEEE eXpress‐compatible, and must follow the formatting instructions provided at: 
 
    http://cec2011.org/submission.htm  
 
The PDF file must be the result of processing you paper through IEEE pdf 
eXpress: 
 
    http://cec2011.org/pdfexpress.htm 
 
(please use login: cec2011x). 
 
When you have completed your paper and are ready to submit it, please go to: 
 
    http://ieee‐cis.org/conferences/cec2011/upload.php?PaperID=344 
 
to submit your final camera‐ready paper.  On this page you will need to use the following password: 
 
 which is valid only for a single submission of your final camera‐ready paper and you cannot submit any subsequent 
revision. Final papers MUST be submitted by April 15, 2011. Any papers submitted after this date run the risk of not 
being included in the proceedings. The paper must be re‐submitted even if the reviewers indicated that no changes 
are required. 
 
1Chuan-Kang Ting
From: ECMusic'11 <ecmusic11@easychair.org>
Sent: Friday, April 15, 2011 2:15 AM
To: Chuan-Kang Ting
Subject: ECMusic'11 notification for paper 3
Follow Up Flag: Follow up
Flag Status: Flagged
Dear Chuan‐Kang Ting: 
 
Your paper Evolutionary Composition Based on Music Theory has been accepted at ECMusic 2011.  This is the second 
notification we send. Please register at CEC as soon as possible (tomorrow is the deadline for reduced fees) if you 
haven't register yet. 
 
Reviews are attached to this e‐mail.  Take them into account for preparing the final version of the paper, and contact 
us if you cannot see or download the reviews. 
 
Best regards. 
 
Francisco Fernández. 
fcofdez@unex.es 
 
 
combines GA with split operator and local search, while the
TS relaxes few constraints to extend the search space. This
study also uses path relinking to enhance solution quality.
In addition, Lau et al. [9] proposed a fuzzy logic genetic
algorithm (FLGA) to solve the multi-depot vehicle routing
problem (MDVRP), in which each depot contains a number of
vehicles and each customer can be visited by only one vehicle.
The FLGA adopts fuzzy logic to adjust crossover and mutation
rates. Baker and Ayechew [10] resolved the VRP with fixed
numbers of vehicles that have vehicle capacity and maximum
travel distance limit. They proposed an integer-based GA and
an initial method that sorts and numbers customers according
to the polar angle.
III. PROBLEM FORMULATION
The proposed MVSPDP aims for the shortest route for multi-
ple vehicles to transport commodities from some pickup nodes
to all delivery nodes, subject to vehicle capacity and travel
distance for each vehicle. Let G = (V,E) be an undirected
complete graph with vertex set V = (v0, . . . , vn) and edge set
E = {(vi, vj) | vi, vj ∈ V, vi = vj}. For an n-node MVSPDP,
the vertex set V includes one depot v0 and n customer nodes
that provide or require demand di of commodities. Restated,
the vertex set V is divided into the subset of pickup nodes
V + = {vi | vi ∈ V, di > 0}, the subset of delivery locations
V − = {vi | vi ∈ V, di < 0}, and depot v0 with d0 = 0. The
cost of edge (vi, vj) is defined by cij and cij = cji.
The MVSPDP assumes identical vehicles; namely, each
vehicle has the same capacity limit Q and maximum travel
distance R. The MVSPDP is to select pickup nodes to supply
delivery nodes and arrange the visiting order for a shortest total
route distance of m vehicles. Let S ⊆ V +denote the set of
selected pickup node set; accordingly, V ∗ = S ∪ V − ∪ {v0}
represents the set of nodes for vehicles to visit. Let H =
{h1, . . . , hm} be the routes (permutations of nodes) of m
vehicles, and xijk = 1 if hk includes the path from vi to
vj ; otherwise xijk = 0. The objective of the MVSPDP can be
formally defined by
min
∑
hk∈H
∑
vi,vj∈V ∗
cijxijk (1)
s.t.
∑
hk∈H
∑
vi∈V ∗
xijk =
∑
hk∈H
∑
vi∈V ∗
xjik = 1, ∀vj ∈ V ∗\{v0},
(2)
∑
hk∈H
∑
vi∈V ∗
xi0k =
∑
hk∈H
∑
vi∈V ∗
x0ik ≤ m, (3)
∑
vi,vj∈V ∗
cijxijk ≤ R, ∀hk ∈ H, (4)
0 ≤ kt ≤ Q, ∀hk ∈ H, t ∈ {1, . . . , |hk|}, (5)
where kt denotes the load of vehicle hk at its t-th visiting
node along the route. The first constraint guarantees that each
selected pickup node and each delivery node can be visited
exactly once. The second constraint gives the upper limit
Algorithm 1 GAPR
initialize population P with random candidate solutions
repair and evaluate candidates
t = 0
repeat
t = t+ 1
offspring set C ← φ
for i = 1 to |P |/2 do
select two parents p1 and p2 from P
recombine p1 and p2 to generate offspring c1 and c2
mutate c1 and c2 to c′1 and c′2
repair and evaluate c′1 and c′2
C ← {c′1, c′2}
end for
select μ chromosomes from P ∪ C for next generation
if (t is even)
for j = 1 to |P |/5 do
randomly choose two solutions a and b from P
path relinking: split a and create path b → a
split b and create path a → b
find the best solution c along the paths
repair and evaluate c
if (F (a) > F (b)) a ← c
else b ← c
end if
end for
end if
until termination condition is satisfied
for the number of available vehicles. In addition, the third
constraint limits the maximal distance R that each vehicle
can travel and the fourth constraint restricts that a vehicle
can neither load commodities greater than its capacity Q nor
provide commodities more than its load.
As aforementioned, the MVSPDP relaxes the requirement
for visiting all pickup nodes and utilizes multiple vehicles.
This problem formulation and its constraints are more perti-
nent to the real-world logistic applications, especially for those
aim to supply demands of all customers (delivery nodes) from
some providers (pickup nodes) by multiple vehicles.
IV. PROPOSED METHOD
This study develops the GAPR for the MVSPDP. The
following subsections introduce our designs for the genetic
algorithm and path relinking in the GAPR. A repair operator is
further devised to deal with infeasible solutions. Algorithm 1
gives the procedure of GAPR. The components of the pro-
posed GAPR are described in detail below.
A. Genetic Algorithm
Genetic algorithm is well-known for its effectiveness in
global optimization. Generally, GA utilizes a set (popu-
lation) of candidate solutions (chromosomes), which can
communicate and exchange information with each other to
explore the solution space. The operation in GA includes
the whole arithmetic crossover and uniform mutation [11].
For the second part (permutation), we make use of the order
crossover (OX) [12]. Note that the negative signs are kept in
the crossover operation. Regarding mutation for the second
part, we adopt inversion and bit-flip operators. The former is
used for permutation of visiting order, and the latter alters the
selection of pickup nodes. Figures 2 and 3 demonstrate the
crossover and mutation operation for the GAPR.
B. Path Relinking
Path relinking is originally created as a strategy for tabu
search [3]. This method and its variants have shown their
advantages in various problems [4], [13]. The main idea is
to maintain certain characteristics of candidate solutions in
population. In practice, PR selects two solutions and generates
two directed paths connecting them. Along the paths, PR picks
the best of several generated candidate solutions.
As for the MVSPDP, Fig. 4 illustrates the procedure of
creating a solution along the paths between two random
solutions (chromosomes). The split procedure first decides the
cut point and the number of nodes that each vehicle serves.
The solution c1 inherits the first segment from solution b and
fills the remainder genes from solution a in order. In this
study, the split procedure is based on the saving heuristic
[14] from the viewpoint of aggregation. For two nodes vi
and vj , the cost (distance) before joining them via an edge is
ci0+ c0i+ c0j + cj0, while that after joining is c0i+ cij + cj0.
Hence, the benefit s in the cost saved from aggregation of vi
and vj is
sij = ci0 + c0j − cij . (7)
Then we sort the saved costs of all edges and join the edge in
descending order without violating travel distance and vehicle
capacity constraints, to wit, Eqs. (4) and (5). However, these
constraints raise the issue of cutting a chromosome into too
many segments by the split procedure and, consequently, the
generated solutions will be very similar. To address this issue,
the present study relaxes the lower bound of vehicle load and
tightens the upper bound of travel distance by
ω ≤ kt < Q (8)∑
vi,vj∈V ∗
cijxijk < ϕ (9)
where parameters ω < 0 and R < ϕ.
Regarding the cost, PR requires additional computation and
may lower the population diversity owing to the potentially
high similarity of the generated solutions. To mediate these
negative effects, the proposed GAPR performs PR only on
one-fifth of the population of GA every other generation,
where the PR randomly chooses two solutions from the GA
population to create the paths and then selects the best solution
along the paths to replace the worse of the two chosen
solutions.
3 3 10 5 -8 4 3-62714 9
3 2 2 5 -7 10 498635 -1
a
b
2 5 -7 4 -8103-619
b a
c1
Part1 Part2
Figure 4: Example of creating a solution along the path a → b.
The dotted line indicates the cut point.
5
v
2
-2
v
3
-7
v
4
5
v
5
1
v
6
0
v
0
0
5
3-4
1
2
5
v
2
-2
v
3
-7
v
4
5
v
5
1
v
6
0
v
0
6
11
90
5
2
65432
43265
Figure 5: Example of repair operator. The number inside a
circle is di, and the dashed circle denotes the depot v0.
C. Repair Operator
The repair operator tackles infeasible solutions, i.e., the
solutions that violate at least one constraint. Once the sum
of m numbers in the first part is unequal to n, the repair
operator will randomly choose a gene to increase or decrease
by one, depending upon the discrepancy, until the sum equals
n. As for the second part, the repair operator deals with the
route of each vehicle individually. Regarding the vehicle load,
there are two situations violating the constraint: First, the total
demand of delivery nodes exceeds the amount that all selected
pickup nodes can provide. In this case, the repair operator
chooses the unselected pickup nodes with most commodities
until the supply from selected pickup nodes is greater than the
demand of delivery nodes. Second, the vehicle load could be
negative at some delivery node. Here we adopt Anily’s method
[15] to repair this violation: The repair operator calculates the
vehicle load on each edge. Then it moves depot v0 to the
end of the lowest-load edge. Figure 5 shows that the load on
edge (v4, v5) is negative and lowest. The repair operator then
fixes this infeasible solution by inserting v0 into this edge. In
practice, since depot v0 is yet represented in the chromosome,
we cut edge (v4, v5) and exchange the two resultant segments.
V. EXPERIMENTAL RESULTS
This study conducts a series of experiments to evaluate
the performance of the proposed GAPR on the MVSPDP, in
comparison with GA. Note GAPR follows GA but additionally
adopts PR as local search. The test suite includes 14 instances
Table II: The best (Best) and average (Avg.) route lengths for different gains γ. The number in the parentheses represents the
average number of visited nodes for each vehicle. Boldface denotes the shortest route among all test γ values in an instance.
mvspdp01 mvspdp02 mvspdp03 mvspdp04
γ Best Avg. Best Avg. Best Avg. Best Avg.
0 550 (3.25) 695 (2.59) 1007 (3.71) 1164 (3.03) 1295 (4.71) 1477 (4.42) 2169 (3.36) 2359 (3.51)
1 510 (2.75) 604 (2.84) 972 (3.43) 1153 (2.92) 1237 (4.43) 1412 (4.40) 1999 (4.09) 2197 (3.53)
2 481 (2.75) 621 (2.71) 921 (3.29) 1080 (2.95) 1128 (5.00) 1357 (4.35) 1881 (3.67) 2142 (3.31)
4 470 (2.75) 596 (2.43) 902 (3.00) 1063 (2.77) 1134 (4.50) 1299 (3.99) 1894 (3.55) 2065 (3.25)
8 441 (3.33) 548 (2.16) 823(2.86) 1010 (2.59) 1037 (3.29) 1208 (3.64) 1692 (2.92) 1918 (2.88)
16 413 (2.67) 520 (1.67) 713 (2.83) 894 (2.33) 920 (4.20) 1094 (3.30) 1596 (2.64) 1764 (2.52)
32 392 (2.00) 474 (1.16) 678 (2.40) 822 (1.94) 827 (3.50) 970 (2.57) 1347 (2.50) 1587 (2.02)
64 387 (1.33) 448 (1.00) 548 (1.50) 717 (1.48) 724 (2.25) 862 (1.89) 1352 (1.56) 1529 (1.44)
128 362 (1.00) 402 (1.00) 582 (1.00) 700 (1.04) 663 (2.00) 842 (1.32) 1182 (1.38) 1399 (1.14)
256 347 (1.00) 420 (1.00) 542 (1.00) 721 (1.00) 761 (1.20) 937 (1.00) 1461 (1.00) 1587 (1.00)
512 347 (1.00) 413 (1.00) 514 (1.00) 732 (1.00) 842 (1.00) 988(1.00) 1451 (1.00) 1620 (1.00)
1024 338 (1.00) 412 (1.00) 582 (1.00) 706 (1.00) 769 (1.00) 930 (1.00) 1444 (1.00) 1592 (1.00)
mvspdp05 mvspdp06 mvspdp07 mvspdp08
γ Best Avg. Best Avg. Best Avg. Best Avg.
0 2777 (3.76) 3091 (3.80) 422 (6.50) 579 (4.29) 829 (5.00) 1028 (3.75) 1187 (5.33) 1446 (4.06)
1 2757 (3.76) 2977 (3.63) 423 (6.50) 559 (4.15) 819 (4.60) 991 (3.71) 1288 (4.43) 1479 (3.87)
2 2642 (3.47) 2941 (3.62) 430 (6.50) 515 (4.37) 795 (4.80) 959 (3.67) 1227 (4.67) 1410 (3.86)
4 2556 (3.35) 2835 (3.41) 392 (5.50) 516 (3.84) 683 (4.00) 925 (3.58) 1073 (4.80) 1320 (3.79)
8 2400 (2.67) 2601 (3.14) 416 (3.67) 476 (3.73) 658 (4.75) 862 (3.42) 1073 (4.60) 1235 (3.59)
16 2106 (2.31) 2429 (2.59) 385 (3.50) 444 (3.28) 618 (3.75) 772 (2.97) 1046 (3.17) 1180 (3.00)
32 2095 (1.43) 2285 (2.02) 358 (3.00) 424 (2.49) 602 (3.00) 692 (2.38) 912 (2.60) 1051 (2.41)
64 1991 (1.07) 2157 (1.41) 342 (2.00) 388 (1.82) 465 (2.33) 611 (1.85) 737 (2.00) 968 (1.81)
128 1867 (1.00) 2008 (1.09) 325 (1.50) 373 (1.18) 442 (1.33) 607 (1.20) 774 (1.50) 958 (1.20)
256 1819 (1.00) 2090 (1.00) 323 (1.00) 357 (1.00) 430 (1.00) 610 (1.01) 904 (1.00) 1042 (1.00)
512 1937 (1.00) 2153 (1.00) 331 (1.00) 359 (1.00) 440 (1.00) 628 (1.00) 893 (1.00) 1055 (1.00)
1024 1884 (1.00) 2150 (1.00) 332 (1.00) 356 (1.00) 454 (1.00) 620 (1.00) 921 (1.00) 1068 (1.00)
mvspdp09 mvspdp10 mvspdp11 mvspdp12
γ Best Avg. Best Avg. Best Avg. Best Avg.
0 2049 (3.50) 2214 (3.86) 2814 (3.88) 3021 (3.77) 2099 (5.38) 2432 (4.82) 1472 (5.14) 1755 (3.94)
1 1939 (3.92) 2117 (3.72) 2842 (3.76) 3075 (3.59) 1888 (6.43) 2213 (4.87) 1406 (5.14) 1813 (3.75)
2 1812 (3.83) 2116 (3.63) 2776 (3.59) 3010 (3.45) 1898 (4.63) 2177 (4.44) 1431 (4.71) 1780 (3.79)
4 1776 (3.42) 1975 (3.47) 2718 (3.50) 2927 (3.19) 1496 (4.86) 2019 (4.14) 1289 (5.00) 1664 (3.64)
8 1612 (3.50) 1847 (3.13) 2450 (3.19) 2715 (2.98) 1546 (4.83) 1886 (3.83) 1216 (3.71) 1520(3.50)
16 1478 (2.90) 1722 (2.60) 2347 (2.71) 2607 (2.50) 1302 (4.20) 1668 (3.05) 1026 (4.40) 1298 (3.25)
32 1410 (2.33) 1590 (2.01) 2221 (2.07) 2389 (1.95) 1180 (2.80) 1492 (2.45) 990 (2.83) 1155 (2.66)
64 1262 (2.14) 1495 (1.45) 2089 (1.47) 2253 (1.38) 1036 (2.00) 1281 (1.71) 740 (2.20) 1003 (2.15)
128 1178 (1.29) 1399 (1.10) 1865 (1.07) 2162 (1.09) 871 (1.20) 1110 (1.23) 656 (2.25) 917 (1.55)
256 1340 (1.00) 1562 (1.00) 1949 (1.00) 2198 (1.00) 1176 (1.00) 1472 (1.00) 1075 (1.00) 1224 (1.00)
512 1373 (1.00) 1576 (1.00) 1979 (1.00) 2195 (1.00) 936 (1.00) 1401 (1.00) 1006 (1.00) 1212 (1.00)
1024 1284 (1.00) 1534 (1.00) 1960 (1.00) 2228 (1.00) 1054 (1.00) 1372 (1.00) 955 (1.00) 1204 (1.00)
mvspdp13 mvspdp14
γ Best Avg. Best Avg.
0 1001 (22.00) 1838 (8.75) 508 (25.00) 616 (23.47)
1 1052 (21.00) 1719 (8.42) 509 (28.00) 629 (20.63)
2 977 (19.00) 1543 (8.84) 513 (25.00) 627 (21.35)
4 874 (15.50) 1496 (7.60) 493 (23.00) 603 (19.84)
8 528 (26.00) 1245 (8.28) 475 (22.00) 607 (16.49)
16 809 (10.50) 1320 (5.39) 472 (18.00) 629 (13.00)
32 690 (7.00) 1145 (3.76) 504 (14.00) 621 (9.35)
64 896 (4.00) 1111 (2.42) 489 (9.00) 751 (3.68)
128 725 (2.50) 1099 (1.34) 461 (5.00) 682 (2.30)
256 655 (1.00) 1178 (1.01) 478 (3.00) 816 (1.12)
512 919 (1.00) 1241 (1.00) 486 (2.00) 835 (1.01)
1024 748 (1.00) 1183 (1.00) 632 (1.00) 907 (1.00)
vehicle 1 vehicle 2 vehicle 3 depot pickup node delivery node
(a) γ = 0
vehicle 1 vehicle 2 depot pickup node delivery node
(b) γ = 32
vehicle 1 vehicle 2 depot pickup node delivery node
(c) γ = 128
vehicle 1 vehicle 2 depot pickup node delivery node
(d) γ = 0
vehicle 1 vehicle 2 depot pickup node delivery node
(e) γ = 32
vehicle 1 vehicle 2 depot pickup node delivery node
(f) γ = 128
Figure 8: Routes obtained from GA (top) and GAPR (bottom) on mvspdp06 with γ = 0, 32, and 128. The square denotes the
depot, black circles denote pickup nodes, and white circles denote delivery nodes.
adopts a modified permutation-based chromosome represen-
tation to indicate both the selection of pickup nodes and the
visiting order of nodes. The PR enhances the search ability of
GA to improve the solution quality. Further, a repair operator
is proposed to deal with infeasible solutions. Experimental re-
sults on 14 benchmarks demonstrate that the proposed method
can effectively select pickup nodes and arrange the visiting
order for the MVSPDP, leading to shorter routes than the
PDP. The comparative results further show that the proposed
GAPR outperforms GA in terms of route length and feasibility
rate on the MVSPDP. These preferable outcomes validate the
effectiveness of the proposed GAPR for the MVSPDP.
REFERENCES
[1] X. L. Liao and C. K. Ting, “An evolutionary approach for the selec-
tive pickup and delivery problem,” in Proceedings of the 2010 IEEE
Congress on Evolutionary Computation (CEC), 2010.
[2] J. Holland, Adaptation in Natural and Artificial Systems. University of
Michigan Press, 1975.
[3] F. Glover and M. Laguna, Tabu search. Boston: Kluwer Academic
Publishers, 1997.
[4] F. Glover, M. Laguna, and R. Martí, “Fundamentals of scatter search and
path relinking,” Control and Cybernetics, vol. 39, no. 3, pp. 653–684,
2000.
[5] ——, “Scatter search and path relinking: Advances and applications,”
in Handbook of metaheuristics. Springer, 2003, pp. 1–35.
[6] G. Berbeglia, J. F. Cordeau, I. Gribkovskaia, and G. Laporte, “Static
pickup and delivery problems: A classification scheme and survey,” TOP,
vol. 15, pp. 1–31, 2007.
[7] C. Prins, “A simple and effective evolutionary algorithm for the vehicle
routing problem,” Computers & Operations Research, vol. 31, no. 12,
pp. 1985–2002, 2004.
[8] A. Fallahi, C. Prins, and R. Wolfler Calvo, “A memetic algorithm
and a tabu search for the multi-compartment vehicle routing problem,”
Computers & Operations Research, vol. 35, no. 5, pp. 1725–1741, 2008.
[9] H. Lau, T. Chan, W. Tsui, and W. Pang, “Application of Genetic Algo-
rithms to Solve the Multidepot Vehicle Routing Problem,” Automation
Science and Engineering, IEEE Transactions on, vol. 7, no. 2, pp. 383–
392, 2010.
[10] B. Baker and M. Ayechew, “A genetic algorithm for the vehicle routing
problem,” Computers & Operations Research, vol. 30, no. 5, pp. 787–
800, 2003.
[11] A. E. Eiben and J. E. Smith, Introduction to Evolutionary Computing,
ser. Natural Computing. Springer-Verlag, 2003.
[12] L. Davis, “Applying adaptive algorithms to epistatic domains,” in
Proceedings of the 9th International Joint Conference on Artificial
Intelligence. Morgan Kaufmann, 1985, pp. 162–164.
[13] M. Resende, C. Ribeiro, F. Glover, and R. Martí, “Scatter search and
path-relinking: Fundamentals, advances, and applications,” in Handbook
of Metaheuristics. Springer, 2010, pp. 87–107.
[14] G. Clarke and J. Wright, “Scheduling of vehicles from a central depot
to a number of delivery points,” Operations research, vol. 12, no. 4, pp.
568–581, 1964.
[15] S. Anily and J. Bramel, “Approximation algorithms for the capacitated
traveling salesman problem with pickups and deliveries,” Naval Re-
search Logistics, vol. 46, no. 6, pp. 654–670, 1999.
and accompaniment to enhance its structure and euphony. The
final composition is then output as a MIDI file.
A. Genetic Algorithm for Composition
There have been some studies on automatic composition
using GA. A key issue at the use of GA for composition is
the design of fitness function, which guides the direction of
evolution in GA. In this study, we devise a fitness function for
evaluating compositions based on music theory. More details
for the proposed GA for composition are given below.
1) Representation: In this study, music sections are repre-
sented by a series of numbers for a chromosome. According
to Bach’s 12 equal temperament, each octave is divided into
12 equal notes denoted by C, #C, D, #D, E, F, #F, G, #G, A,
#A, and B. In C major scale, note C is represented by number
0, #C by 1, D by 2, and so on (see Table I). In addition, we fix
music beat at four-fourths and limit the range of note length
from one sixteenth to a quarter, where tempo is variable. In
the example of Fig. 2, bar 1 consists of four quarter notes,
i.e., E, E, F, and G; bar 4 consists of dotted quarter note E,
eighth note D, dotted quarter note D, and eighth rest.
2) Fitness Function: As aforementioned, evaluation crite-
rion is key to automatic composition. In this study, we propose
using music theory to provide an objective measure for the
fitness of compositions. Although many rules exist in the
music theory, we selected only the most important ones and
weighted them empirically for fitness evaluation:
• Chord notes (for example, C, E and G are chord notes
for chord C):
1) Positive score (+3) for chord notes.
2) Positive score for a phrase beginning with chord
notes (+10 for root and +6 for others); otherwise
negative score (−8).
3) Positive score (+10) for a phrase ending with chord
notes; otherwise negative score (−10).
• Note resolution, i.e., the move from a dissonant note to
a consonant note:
1) Positive score (+4) for chord notes followed by
others.
2) Positive score (+2) for chord notes followed by
chord notes.
3) Positive score (+2) for notes followed by the near-
est chord notes (for example, given chord C, note
D followed by note C or E gains positive score; so
does note B followed by note C).
4) Negative score (−1) for no resolution.
• Stepwise motion:
1) Positive score (+3) for the interval between two
notes being a major second or minor second.
• Leap:
1) Positive score (+2) for a leap starting with a chord
note.
2) Negative score (−10) for a leap augmented fourths
(diminished fifths).
Table I: Representation for notes
Note Number Note Number
rest -1 F 5
tenuto -2 #F 6
G 7
C 0 #G 8
#C 1 A 9
D 2 #A 10
#D 3 B 11
E 4 C (high) 12
...
...

%DU Chromosome
                
                
                
                

Figure 2: Example chromosome
3) Negative score (−2) for a leap of seventh major or
seventh minor.
4) Negative score (−2) for a leap to dissonant notes
and next to a chord.
The fitness function evaluates a composition by summing
up the scores from the above rules. Such evaluation holds
two major advantages. First, the evaluation criterion is con-
sistent. Since the compositions are scored according to the
music theory rules, the evaluation is not affected by the
personal experience or preference in the traditional human-
machine-interaction manner. Second, the evaluation is stable.
The human-assisted evaluation suffers from fatigue and the
decrease of musical sensitivity after a long time of listening.
The evaluation based on the proposed rules, although not
including all theories for different genres, can serve as an
effective guideline for the GA to evolve into and result in
satisfactory compositions.
3) Genetic Operators: The genetic operators in GA include
parent selection, crossover, mutation, and survivor selection.
For the parent selection, the proposed GA adopts the 2-
tournament selection, which selects as a parent the fitter of
two randomly picked chromosomes from the population. The
selected parents are further performed with crossover and
mutation to produce their offspring.
The crossover for composition needs to be specially de-
signed in that arbitrarily exchanging two parts of parents can
hardly result in acceptable compositions. To address this issue,
we introduce the notion of crossover unit to the order crossover
[10]. More specifically, the cutting points of order crossover
can only be between bars. As Fig. 3 shows, the crossover
randomly cuts two selected parents, and then exchange the
bars in the way of order crossover.
Mutation slightly changes the genetic information of a chro-



Figure 6: Procedure for musical form 3
(a) Form 1
(b) Form 2
(c) Form 3
Figure 7: Accompaniment forms
different stages. In the light of fitness values, random composi-
tions at initialization score only near 600, whereas the average
score (fitness value) of proto-compositions obtained from GA
ranges from 1100 to 1250, and the postprocess can increase the
score by 50 to 60 points on average. The evolutionary compo-
sition based on music theory, furthermore, is very effective in
Table II: Parameter setting
Parameter Value
GA type Generational
Representation Integer
Chromosome length 256 (16 bars)
Population size 32
Selection 2-Tournament
Crossover Order
Crossover rate 0.9
Mutation Random resetting
Mutation rate 1/256
Survivor Replacement
Termination 500 generations
0
200
400
600
800
1000
1200
1400
0 100 200 300 400 500
M
e
a
n
 B
e
s
t
 F
it
n
e
s
s
 
Generations 
Figure 8: Progress of mean best fitness
excluding disharmony and noisy melodies. According to the
audience with music background, the resultant compositions
sound harmonious and follow the sense of melody progress.
Some examples of the results (MIDI files) can be downloaded
via http://cilab.cs.ccu.edu.tw/EvoMusic_CEC2011.zip.
IV. CONCLUSIONS
This study presents an evolutionary composition method
based on music theory. Specifically, we develop a GA for
composition and design the fitness function using music theory
rules. The resultant proto-compositions are further modified
considering musical form and integrated with accompaniment.
The proposed evolutionary composition has three major advan-
tages. First, the stochastic property of GA produces diversity
in the generated melodies. Second, the evaluation based on
music theory is objective and overcomes the drawbacks of
human-assisted evaluation in fatigue and preference. With the
proposed fitness function, one can further examine a song’s
score in terms of music theory. Third, the use of musical form
makes the resultant compositions more structured.
Experimental results show that the proposed method can
effectively achieve satisfactory compositions. Based on mu-
sic theory, the evolutionary composition avoids generating
disharmony and noisy melodies. According to the audience
with music background, the resultant compositions sound
harmonious and follow the sense of melody progress.
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/20
國科會補助計畫
計畫名稱: 差分演化之向量差數量研究(II): 參數調適, 統計探索, 與族群動態分析
計畫主持人: 丁川康
計畫編號: 99-2221-E-194-051- 學門領域: 人工智慧
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
1.辦理學術活動:  
  a.(IEEE CEC 2011) 組織與主持 Special Session on ’’Evolutionary 
Computation in Network Optimization’’ 
  b.(FUZZ-IEEE 2011) 組織與主持 Workshop on ’’Hybrid Computational 
Intelligence’’ 
 
2.參與國際學術事務: 
  a.參與 IEEE CIS Emergent Technologies Technical Committee (ETTC)  
 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
