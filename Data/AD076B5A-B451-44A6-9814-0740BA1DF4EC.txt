 1 
行政院國家科學委員會補助專題研究計畫 █成果報告   
□期中進度報告 
 
 
一種最佳化數據依賴性測試用來降低原始碼級偵錯之複雜性應用於平行編譯器和向量編譯器之最佳化 
 
計畫類別：█個別型計畫   □整合型計畫 
計畫編號：NSC   99-2221-E-305-003-MY2 
執行期間： 99年 8月 1日至  101年 7月 31日 
 
執行機構及系所：國立台北大學資訊中心 
 
計畫主持人：何善輝 
共同主持人：None 
計畫參與人員：研究助理 戚竣傑，林育正，陳翔靖，詹宇翔，翁嘉偉 
 
 
 
成果報告類型(依經費核定清單規定繳交)：█精簡報告  □完整報告 
 
本計畫除繳交成果報告外，另須繳交以下出國心得報告： 
□赴國外出差或研習心得報告 
□赴大陸地區出差或研習心得報告 
█出席國際學術會議心得報告 
□國際合作研究計畫國外研究報告 
 
 
處理方式：除列管計畫及下列情形者外，得立即公開查詢 
            □涉及專利或其他智慧財產權，□一年█二年後可公開查詢 
 
中   華   民   國 101年 9 月 25 日 
 3 
mjmgimfkkukjklkukikl   ),()( and , , , . 
If the subscript expressions of the array references are linear, the problem of data dependence can be 
theoretically reduced to that of determining whether a system of s linear equations, each of the form 
 
 
 
has a simultaneous integer solution that satisfies the constraints of the form 
 
 
 
Generally, n=2d and each Ik is a loop index variable with lower and upper bounds (i.e., Mk and Nk) of 
constant integers or unknown limits. 
GCD, Extreme Value (also known as the Banerjee test), and Fourier-Motzkin elimination are 
three basic dependence analysis techniques but are too naive or expensive in practice [1, 13, 24, 25, 
35]. Various advanced techniques, based on extending these basic approaches, have been proposed to 
overcome their disadvantages [2, 3, 20, 26, 28, 33, 34]. The I test is a refined combination of the 
GCD and Banerjee tests [20, 23, 27, 29]. It checks for the existence of integer solutions as does the GCD 
test and additionally takes limits into account as does the Banerjee test. Unfortunately, the test model was 
originally devised to be employed in the case in which the increment of each loop index variable on iteration 
is one. For the cases in which the increment of the loop index variables on iteration is not one, the test cannot 
be straightforwardly applied. In addition, it creates many problems for parallel compilers, as previously 
mentioned. Alternatively, we propose both the continuous I optimization and the non-continuous I 
optimization test in this research for these cases. By developing the non-continuous I optimization test 
utilizing directly managing the non-one-increment of the loop index variables on iteration, we can efficiently 
and optimally determine data dependence for these cases. The rest of this research is organized as follows. In 
section 2, we present both the continuous and non-continuous I optimization test. In section 3, we present the 
complexity assessment. And in section 4, the experimental results are shown for the I optimization test. 
Finally, some conclusions are discussed. 
 
2. The I Optimization Test 
The I optimization test, a refined combination of the GCD and Banerjee tests, is an efficient and precise 
data dependence test technique to determine whether integer-valued solutions exist for one-dimensional arrays 
with constant bounds and one-increment. 
 
a1I1+a2I2+ …+anIn= a0 (1-1) 
Mk Ik Nk for 1 k  n (1-2) 
 5 
It is easy to make out that a linear equation as (1-1) is (M1, N1; M2, N2; …; Mn, Nn)-integer solvable if 
and only if the following interval equation is (M1, N1; M2, N2; …; Mn, Nn)-integer solvable. 
 
a1I1+a2I2+ …+anIn=[a0, a0] 2.1-2) 
 
Theorem 2.1-1: Given an interval equation as (2.1-1) subject to the constraints as (1-2), let a1, a2, 
…, an, L, 
and U be integers, and let d=gcd(a1, a2, 
…, an). This interval equation has an integer solution if and only if 
L dL/d U. 
Proof: Refer to [10].   
Theorem 2.1-2: Given an interval equation as (2.1-1) subject to the constraints as (1-2), let a1, a2, 
…, an, L, 
and U be integers. For each k, 1 k  n – 1, if |an|  U – L + 1, and an < 0 then the interval equation 
a1I1+a2I2+ +anIn=[L, U],  
is (M1, N1;M2, N2; …;Mn, Nn)-integer solvable if and only if interval equation 
a1I1+a2I2+ …+an-1In-1= ],[ nNnanMnaUnMnanNnaL








 
is (M1, N1; M2, N2; …; Mn-1, Nn-1)-integer solvable. 
Proof: Refer to (Kong et al. 1991).   
 
Theorem 2.1-3: Let a1, a2, 
…, an, L, and U be integers. For each k, 1 k  n – 1, let each of Mk and Nk be 
either an integer or the distinguished symbol “*”, where Mk  Nk if both Mk and Nk are integers. Let 
),,2,1gcd( naaad  . 
The interval equation 
 
a1I1+a2I2+ +anIn=[L, U]  
 
is (M1, N1; M2, N2; …; Mn-1, Nn-1)-integer solvable if and only if the interval equation 
 
(a1/d)I1+(a2/d)I2+ +(an/d)In=[L/d, U/d] 
 
is (M1, N1; M2, N2; …; Mn-1, Nn-1)-integer solvable. 
Proof: Refer to (Kong et al. 1991). 
 
2.2 The Non-continuous I Optimization Test 
 7 
a1I1+a2I2+ +anIn=L 
a1I1+a2I2+ +anIn=L+INC 
   
a1I1+a2I2+ +anIn=L+(
INC
LU 
+1)INC=U. 
 
The transformed interval equation as expressed with (2.2-2) is employed in the proposed test technique to 
enable the constraints on the loop index variables as represented with (2.2-1) to be directly and consistently 
operated. Obviously, if INC  0, then the quadruplet, [L, U, INC,
INC
LU 
+1], represents an integer interval (i.e., 
[L, U]) within which the actual integers contained are not continuous, and is referred to as a non-continuous 
integer interval. The transformed interval equation is thus a non-continuous integer interval equation. Clearly, 
the constraint on each index variable Ik  [Mk, Nk, INCk, 
kINC
kMkN  +1], is in itself a non-continuous integer 
interval. 
Definition 2.2-3: Let a1, a2, 
…, an, L, and U be integers. For each k, 1 k  n, let each of Mk and Nk be either 
an integer, where Mk  Nk. If n > 0, then the non-continuous interval equation 
 
 
 
 
is said to be ([M1, N1, INC1, 
1
11
INC
MN 
+1]; [M2, N2, INC2, 
2
22
INC
MN 
+1]; …; [ Mn, Nn, INCn, 
nINC
nMnN  +1])-integer solvable if one or more of the equations in the set which it denotes is ([M1, N1, INC1, 
1
11
INC
MN 
+1]; [M2, N2, INC2, 
2
22
INC
MN 
+1]; …; [Mn, Nn, INCn, 
nINC
nMnN  +1])-integer solvable. 
It is easy to make out that the ordinary linear equation 
 
 
 
is ([M1, N1, INC1, 
1
11
INC
MN 
+1]; [M2, N2, INC2, 
2
22
INC
MN 
+1]; …; [Mn, Nn, INCn, 
nINC
nMnN  +1])-integer 
solvable if and only if the equation 
 
a1I1+a2I2+ +anIn=[L, U, INC, 
INC
LU 
+1]  
0nn2211 aIaIaIa     
 9 
belongs to the non-continuous integer interval, i.e., dL/d  {L+(m-1)INC| 1 m 
INC
LU 
+1}, then there may 
be an (M1, N1);(M2, N2): …;(Mn, Nn)-integer solution; otherwise, there is no integer solution. 
 
Lemma 2.21: Let a1, a2, …, an, L, U and INC be integers. For each k, 1 k  n, let each of INCk, Mk, Nk be 
an integer constant, where Mk  Nk. If ak > 0, INC > 0, INCk > 0, akINCk  U-L+INC, 0 akINCk  
U-L+INC, and akINCk is a multiple of INC then the non-continuous interval equation 
 
 
 
 
is ([M1, N1, INC1, 
1
11
INC
MN 
+1]; [M2, N2, INC2, 
2
22
INC
MN 
+1]; …; [Mn, Nn, INCn, 
nINC
nMnN  +1])-integer 
solvable if and only if the non-continuous interval equation 
 
 
 
 
is ([M1, N1, INC1, 
1
11
INC
MN 
+1]; …; [Mk-1, Nk-1, INCk-1, 
1
11


kINC
kMkN +1]; [Mk+1, Nk+1, INCk+1, 
1
11


kINC
kMkN +1]; …; [Mn,Nn,INCn, 
nINC
nMnN  +1])-integer solvable.    
Proof: (if):  Firstly, suppose that 
 
 
 
Here, j1, …, jk-1, jk+1, …, jn satisfies the conditions for ([M1, N1, INC1, 
1
11
INC
MN 
+1]; …; [Mk-1, Nk-1, 
INCk-1,
1
11


kINC
kMkN +1]; [Mk+1, Nk+1, INCk+1, 
1
11


kINC
kMkN +1]; …; [Mn, Nn, INCn, 
nINC
nMnN  +1]) to be 
integer solvable and z is one of the elements in the non-continuous integer interval [L-akNk, U-akMk, INC, 
INC
kNkaLkMkaU  +1]. Then, consider the set of non-continuous integer intervals {[L-ak(Nk-(p-1)INCk), 
U-ak(Nk-(p-1)INCk), INC, 
INC
LU 
 +1| 1 p 
kINC
kMkN  +1]. Because ak > 0, INC > 0 and INCk > 0, these 
a1X1+…+anXn=[L, U, INC, 
INC
LU 
+1]  
a1X1+…+ak-1Xk-1+ak+1Xk+1+…+anXn=[L-akNk, U-akMk, INC, 
INC
kMkaLkNkaU  +1]  
a1j1+…+ak-1jk-1+ak+1jk+1+…+anjn= z.  
 11 
 
 
 
we can have 
 
 
 
This reduces to: 
 
 
 
Since Nk-pINCk is one element in the non-continued integer interval [Mk, Nk, INCk, 
kINC
kMkN  +1] and 
L+tINC is one element in the non-continued integer interval [L, U, INC, 
INC
LU 
+1], we can obtain that the 
non-continuous interval equation 
 
 
 
 
is ([M1, N1, INC1, 
1
11
INC
MN 
+1]; …; [Mn, Nn, INCn, 
nINC
nMnN  +1])-integer solvable. 
 (Only if:) Let a1j1+…+anjn=L+tINC, where j1 …jn satisfies the conditions for ([M1, N1, INC1, 
1
11
INC
MN 
+1]; …; [Mn, Nn, INCn, 
nINC
nMnN  +1])-integer solvable and 0 t  
INC
LU 
. We can thus obtain 
a1j1+…+ak-1jk-1+ak+1jk+1+…+anjn= L-ak(Nk-pINCk)+tINC. 
Here, 0 p 
kINC
kMkN  . Due to the fact that L-ak(Nk-pINCk)+ tINC is in the non-continuous integer interval 
[L-ak(Nk-pINCk), U-ak(Nk-pINCk), INC, 
INC
LU 
 +1] and 
k
INC
k
M
k
N
p

0
[L-ak(Nk-pINCk), U-ak(Nk-pINCk), 
INC, 
INC
LU 
 +1]=[L-akNk, U-akMk, INC, 
INC
kNkaLkMkaU  +1], L-ak(Nk-pINCk)+ tINC is obviously in 
the non-continuous integer interval [L-akNk, U-akMk, INC, 
INC
kNkaLkMkaU  +1], this implies that the 
non-continuous interval equation 
 
a1j1+…+ak-1jk-1+ak+1jk+1+…+anjn= z  
a1j1+…+ak-1jk-1+ak+1jk+1+…+anjn= L-ak(Nk-pINCk)+tINC  
a1j1+…+ak-1jk-1+ak(Nk-pINCk)+ak+1jk+1+…+anjn= L+tINC  
a1X1+…+anXn=[L, U, INC, 
INC
LU 
+1]  
 13 
U-ak(Nk-pINCk), INC, 
INC
LU 
 +1] and [L-ak(Nk-(p+1)INCk), U-ak(Nk-(p+1)INCk), INC, 
INC
LU 
 +1], will 
be equal to or less than INC. Furthermore, if ak INCk is a multiple of INC, then all the elements in the set 
can be merged to become a new non-continuous integer interval [L-akNk, U-akMk, INC, 
INC
kNkaLkMkaU  +1]. Next, the Banerjee test can be employed to determine whether an [M1, N1, INC1, 
1
11
INC
MN 
+1]; …; [Mk-1, Nk-1, INCk-1, 
1
11


kINC
kMkN +1]; [Mk+1, Nk+1, INCk+1, 
1
11


kINC
kMkN +1]; …; [Mn, 
Nn, INCn, 
nINC
nMnN  +1]-integer solution may exist for the merged new non-continuous integer interval. Like 
the normal I optimization test, if the NI optimization test returns no, then there is no integer solution; 
otherwise it repeats, in turn, applying the NI GCD test, moving an item whenever possible and applying the 
Banerjee test. This process continues until a definite result is obtained, or there are no more qualified items 
which can be moved. If there are no more items satisfying the conditions that |ak INCk| U-L+INC and that 
ak INCk is a multiple of INC to be able to be moved to the right, the NI optimization test will produce a 
result of ‘maybe’. 
 
We take an example to illustrate our point. Consider the normal linear equation 
 
X1-2X2+3X3=3,     (Ex1) 
 
subject to the constraints 
 
X1:[1, 5, 1, 5], X2:[2, 6, 2, 3] and X3:[1, 5, 2, 3] 
 
First, the non-continuous I optimization test GCD test indicates that there may be a ([1, 5, 1, 5]; [2, 6, 2, 
3]; [1, 5, 2, 3])-integer solution by first applying the GCD test (gcd(1, 2,3)=1, which is a divisor of 3) and then 
applying the Banerjee test (-8 3 16). 
Next, the NI optimization test transforms the equation (Ex1) into the following non-continuous interval 
equation. 
 
X1-2X2+3X3=[3, 3, 1,1]     (Ex1-1) 
 
By Lemma 3-2, X1 is selected to be moved to the right hand side due to the fact that 0 a1INC1 
U-L+INC (0 11=1  (3-3+1)=1) and a1INC1 is a multiple of INC (1 is a multiple of 1). This gives rise to a 
new non-continuous integer interval 
 
-2X2+3X3=[-2, 2, 1,1].     (Ex1-2) 
 
Then the non-continuous interval-equation test reveals that there may be a ([2, 6, 2, 3]; [1, 5, 2, 
 15 
where j1, j2, …, jn satisfies the conditions for ([M1, N1, INC1, 
1
11
INC
MN 
+1]; [M2, N2, INC2, 
2
22
INC
MN 
+1]; …; [Mn, Nn, INCn, 
nINC
nMnN  +1])-integer solvable and z is one element in the non-continuous 
integer interval [L, U, INC, 
INC
LU 
+1] and is L+pINC for 0 p  
INC
LU 
. By the assumption that L, U and 
INC are, respectively, a multiple of d, let L=r1d, U=s1d and INC=t1d, where r1, s1, and t1 are integers. 
Then, z is one element in the non-continuous integer interval [r1d, s1d, t1d, 
1
11 
t
rs 
+1] and is equal to 
r1+p×t1 for 0 p  
1
11
t
rs 
. We thus have 
a1j1+a2j2+ …+ a2j2= d( r1+p×t1)    
or 
n
n j
d
a
j
d
a
j
d
a
 )()()( 2
2
1
1  = r1+p×t1. 
Because r1=
d
L
, s1=
d
U
, t1=
d
INC
 and 
1
11
t
rs 
=
INC
LU 
, then (r1+p×t1) is one element in the non-continuous 
integer interval ]1 ,, ,[ 

INC
LU
d
INC
d
U
d
L
. Hence, the non-continuous interval equation 
 
]1 ,, ,[)(2)
2(1)
1( 


INC
LU
d
INC
d
U
d
L
nX
d
naX
d
a
X
d
a
  
 
is ([M1, N1, INC1, 
1
11
INC
MN 
+1]; [M2, N2, INC2, 
2
22
INC
MN 
+1]; …; [Mn, Nn, INCn, 
nINC
nMnN  +1])-integer 
solvable. 
 
Proof: (only if): Suppose that 
 
nj
d
naj
d
a
j
d
a
)(2)
2(1)
1(   =z, 
 
where j1, j2, …, jn satisfies the conditions for ([M1, N1, INC1, 
1
11
INC
MN 
+1]; [M2, N2, INC2, 
 17 
right-hand side of the equation (2.22) due to the movement of the qualified item and (3) applying the 
non-continuous interval-equation GCD test on all variable coefficients of the new non-continuous interval 
equation. 
 
The worst-case time complexity to find a qualified item to be moved is (c1n), where n is the number of 
variables in the non-continuous interval equation and c1 is a constant time to determine if an item is qualified. 
Thus, the worst-case time complexity to move all items (if they are all qualified) is (c1n
2
) due to the fact that 
there are at most n moves. To calculate the new non-continuous integer interval on the right-hand side of the 
non-continuous interval equation due to the movement of the qualified item is actually equivalent to applying 
a single Banerjee inequality. Applying a single Banerjee inequality to calculate the lower bound and the upper 
bound of the new non-continuous integer interval needs a constant time (c2). Thus, the worst-case time 
complexity for the non-continuous I optimization test to calculate all the new non-continuous integer intervals 
is (c2n) because there are at most n moves. For each new non-continuous interval equation, the worst-case 
time complexity to figure out the great common divisor for the coefficient variables of the new 
non-continuous interval equation, is O(n), where n is the number of variables in the non-continuous interval 
equation. Hence, the worst-case time complexity of applying the non-continuous interval-equation GCD test 
on all variable coefficients of the new non-continuous interval equation is O(n
2
) owing to the fact that there 
are at most n different non-continuous interval equations. The worst-case time complexity of the 
non-continuous I optimization test to determine data dependence for one-dimensional arrays with constant 
bounds and non-one-increment is (c3n
2
+c2n), similar to that of the normal I optimization test (Wu et al. 
1991). 
 
4. Experimental Results 
We have tested our method and performed experiments on the codes abstracted from two numerical 
packages: Vector Loop and Livermore [13, 22, 30]. 67 pairs of one-dimensional array references were 
observed to have subscripts under constant bounds and non-one-increment. The proposed method is only 
applied to test those one-dimensional arrays with subscripts under constant bounds and non-one-increment. It 
is very clear from the results shown in Table 1 that the proposed method could properly solve whether there 
are definitive results for one-dimensional arrays with subscripts under constant bounds and 
non-one-increment. 
 
 19 
there are many practical cases in which the increment of each loop index on iteration is not one [4, 5, 7, 9, 16]. 
To avoid the problems caused by loop normalization, the non-continuous I optimization testing model is 
coped with these cases. The idea behind the proposed test technique is to extend the normal I optimization test 
so that it can explicitly manage the non-one-increment of the loop index variables on iteration. 
 
6. References 
[1] Uptal Banerjee. Dependence Analysis for Supercomputing, Kluwer Academic Publishers, Norwell, 
Massachusetts, 1988. 
[2] Uptal Banerjee, Loop Transformations for Restructuring Compilers: The Foundations, Kluwer Academic 
Publishers, 1993. 
[3] Uptal Banerjee, Dependence Analysis, Kluwer Academic Publishers, Norwell, Massachusetts, 1997. 
[4] W. Blume and R. Eigenmann, "Nonlinear and symbolic data dependence testing," IEEE Transaction on 
Parallel and Distributed Systems, Vol. 9, No. 12 (1998), pp. 11801194. 
[5] W.-L. Chang and C.-P. Chu, "The Extension of The I Test," Parallel Computing, Vol. 24-14, Nov. 1998, pp. 
2101-2127. 
[6] W.-L. Chang, C.-P. Chu and J. Wu, "The Generalized Lambda Test: A Multi-dimensional Version of 
Banerjee's Algorithm," International Journal of Parallel and Distributed Systems and Networks, Vol. 2, Issue 2, 
1999, pp. 69-78. 
[7] Weng-Long Chang and Chih-Ping Chu, "The Infinity Lambda Test: A Multi-dimensional Version of 
Banerjee's Infinity Test," Parallel Computing, Vol. 26, Number 10, Aug. 2000, pp. 1275-1295. 
[8] Weng-Long Chang and Chih-Ping Chu, "The Generalized Direction Vector I Test," Parallel Computing, 
Vol. 27-8, Jul 2001, pp. 1117-1144. 
[9] Weng-Long Chang, Chih-Ping Chu and Jia-Hwa Wu, "A Multi-dimensional I Test," Parallel Computing 27 
(2001) 1783-1799.  
[10] W.-L. Chang, C.-P. Chu and J.-H. Wu, “A Precise Dependence Analysis for Multi-dimensional Arrays 
under Specific Dependence Direction,” Journal of System and Software, 63, 2002, pp. 99–112. 
[11] W.-L. Chang, J.-W. Huang and C.-P. Chu, “Using Elementary Linear Algebra to Solve Data Alignment 
for Arrays with Linear or Quadratic References,” IEEE Transaction Parallel Distributing System, 15 (1), 2004, 
pp. 28–39. 
[12] P.-S. Chen, Y.-S. Hwang, R.D.-C. Ju and J.K. Lee, “Interprocedural Probabilistic Pointer Analysis,” IEEE 
Transaction Parallel Distributing System, 15 (10), 2004, pp. 893–907. 
[13] J. Dongarra, M. Furtney, S. Reinhardt and J. Russell, "Parallel Loops  A test suite for parallelizing 
compilers: Description and example results," Parallel Computing 17(1991) , pp. 12471255. 
[14] R. Eigenmann, J. Hoeflinger, and D. Padua, "On the Automatic Parallelization of the Perfect 
Benchmarks," IEEE Transactions on Parallel and Distributed Systems. Vol. 9, No. 1 (1998), pp. 5-23. 
[15] Jay Philip Hoeflinger, "Interprocedural Parallelization Using Memory Classification Analysis," Ph.D. 
thesis, University of Illinois at Urbana-Champaign, 1998. 
[16] T.C. Huang and C.M. Yang, "Data Dependence Analysis for Array References," The Journal of System 
and Software, 52(2000) , pp. 55-65. 
[17] T.-C. Huang and P.-H. Hsu, “Predecessor/successor Approach for High-performance Run-time Wavefront 
 21 
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價值（簡要敘
述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適合在學術期刊發表或申請
專利、主要發現或其他有關價值等，作一綜合評估。 
 
1. 研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
█達成目標 
□ 未達成目標（請說明，以 100 字為限） 
□ 實驗失敗 
□ 因故實驗中斷 
□ 其他原因 
說明： 
第一年：完成之工作項目及成果 
1. 完成之工作項目： 
Please see both NSC2010-期中報告 and NSC2010-成果報告自評表. 
 
2. 達成預期目標: 
Please see both NSC2010-期中報告 and NSC2010-成果報告自評表. 
 
第二年：完成之工作項目及成果 
1. 完成之工作項目： 
(1) For the cases in which the increment of the loop index variables on iteration is not one, the I 
optimization test cannot be straightforwardly applied. 
In addition, it creates many problems for parallel compilers, as previously mentioned. 
Alternatively, we propose both the continuous I optimization and the non-continuous I 
optimization test in this research for these cases. By developing the non-continuous I 
optimization test utilizing directly managing the non-one-increment of the loop index variables 
on iteration, we can efficiently and optimally determine data dependence for these cases. 
 
(2) Wolfe [19] found that using Fourier-Motzkin variable elimination for dependence testing takes 
from 22 to 28 times longer than the Banerjee test. They are too naive or expensive in practice [1, 5, 
11, 12, 19]. 
According to the time complexity analysis, our proposed method performs slightly more poorly 
than the I test. Therefore, it is suggested that, depending on the application domains and 
environments, the proposed method can be applied independently or together with other 
popular methods to analyze data dependence for linear-subscript array references. 
附件二 
 23 
bounds and non-one-increment. 
 
(3) To avoid the problems caused by loop normalization, the non-continuous I optimization test is 
proposed to cope with these cases for testing purposes. 
The idea behind the proposed test technique is to extend the normal I optimization test so that it 
can explicitly manage the non-one-increment of the loop index variables on iteration. 
 
(4) Alternatively, we propose the non-continued I optimization test in this research for these cases. 
By enabling the I optimization test, the proposed test technique, which extends the normal I 
optimization test to directly manage the non-one-increment of the loop index variables on iteration, 
we can efficiently and optimally determine data dependence for these cases in an I optimization test 
like manner. 
We developed both the continuous I optimization and the non-continuous I optimization test in 
this research for these cases. By developing the non-continuous I optimization test utilizing 
directly managing the non-one-increment of the loop index variables on iteration, we can 
efficiently and optimally determine data dependence for these cases. 
 
(5) Therefore, it is suggested that, depending on the application domains and environments, the 
proposed methods can be applied independently or together with other popular methods to analyze 
data dependence for linear-subscript array references. 
The goal of a new efficient and optimized data dependence technique for one-dimensional 
arrays with constant bounds and non-one-increment has become very important. 
 
4. 研究成果在學術期刊發表或申請專利等情形： 
論文：█已發表 █未發表之文稿 █撰寫中 □無 
專利：□已獲得 □申請中 □無 
技轉：□已技轉 □洽談中 □無 
其他：（以 100 字為限） 
 
Based upon the 2010 thru 2012 NSC research project of An Optimized Data Dependence Testing for 
Reducing the Complexity of Source Level Debugging for Parallel Compiler and Vector Compiler 
Optimizations (一種最佳化數據依賴性測試用來降低原始碼級偵錯之複雜性應用於平行編譯器
和向量編譯器之最佳化), several developed/ related articles are accepted and to appear in the 
international known conferences and SCI journals. They are: 
(1) Gene Eu Jan, Cheng-Hong Li, Yung-Yuan Chen, and Shan-Hui Ho, “A Novel Approach to the 
Seat Assignment Problem,” Accepted and to be published at Sensor Letters, 2012. (SCIE, 
IF=0.602, 40/61). 
(2) Michael Shan-Hui Ho “DNA Sequence Assembly with Bioinformatics Shotgun Method”, 
published in icbeb, pp.183-186, 2012. (EI) 
 25 
optimization test in this research for these cases. (1) By developing the non-continuous I 
optimization test utilizing directly managing the non-one-increment of the loop index variables on 
iteration, we can efficiently and optimally determine data dependence for these cases. (2) We 
implemented experimental tests on both the continuous and non-continuous I optimization test. 
(3)In section 3, we present the complexity assessment. 
 
(1) The developed and optimized data dependence testing is used for reducing the complexity of 
source level debugging for parallel compiler and vector compiler optimizations  
(2) The complete I optimization test, a refined combination of the GCD and Banerjee tests, is an 
efficient and optimized data dependence test technique to determine whether integer-valued 
solutions exist for one-dimensional arrays with constant bounds and one-increment. 
(3) We implemented the non-continuous I optimization test, an extension of the I optimization test, 
to determine whether there are integer-valued solutions for one-dimensional arrays with constant 
bounds and non-one-increment. Depending on the application domains and environments, the 
proposed methods can be applied independently or together with other popular methods to 
analyze data dependence for linear-subscript array references. 
(4) The non-continuous I optimization test is proposed to extend the normal I optimization test to 
solve the problems caused by loop normalization. 
(5) Various advanced techniques have been proposed to the I optimization test is proposed for a 
refined combination of the GCD and Banerjee tests [13, 15] to overcome their too naive or 
expensive disadvantages [2, 14, 17, 18]. The goal of a new efficient and optimized data 
dependence technique for one-dimensional arrays with constant bounds and non-one-increment 
has become very important. However, there are many practical cases in which the increment of 
each loop index on iteration is not one [4, 5, 7, 9, 16]. To avoid the problems caused by loop 
normalization, the non-continuous I optimization testing model is coped with these cases. The 
idea behind the proposed test technique is to extend the normal I optimization test so that it can 
explicitly manage the non-one-increment of the loop index variables on iteration. 
(6) 指導研究人員最佳化數據依賴性測試用來降低原始碼級偵錯之複雜性應用於平行編譯器
和向量編譯器之最佳化理論探討及研究。 
(7) 研究人員藉由最佳化數據依賴性測試理論探討及實作用來降低原始碼級偵錯之複雜性。 
研究人員藉由一種新的最佳化數據依賴性測試理論探討及實作提出平行編譯器和向量編
譯器之最佳化。 
 27 
 
※Bioinformatics, Computational Biology & Systems Biology 
※Biomedical Signal Processing 
※Biomedical Imaging & Image Processing 
※Cellular & Tissue Engineering 
※Other related topics 
 
The 2012 IEEE International Conference on Biomedical Engineering and Biotechnology (iCBEB 2012) 
papers are very selected. We have one article that is presented and published in the proceedings of 
iCBEB 2012 conference by the IEEE and indexed by EI and IEEEXplore. The accepted article (with 
Paper ID CB13706) entitled “DNA Sequence Assembly with Bioinformatics Shotgun Method” was 
presented by Dr. Michael (Shan-Hui) Ho. Dr. Ho’s oral presentation for Paper ID CB13706 is presented 
in Session: Oral 1: BioMedical Engineering at 09:00-11:50 on Wednesday, May 30 of IEEE 
iCBEB 2012.  
 
The 2012 IEEE International Conference on Biomedical Engineering and Biotechnology (iCBEB 2012) 
was held from May 28th to 30th in Macau. Dr Michael Shan-Hui Ho was also invited as one of main 
talks in Oral 1: BioMedical Engineering. During and after Dr. Michael Ho’s presentation, many 
scholars, R&D scientists and engineers came to Dr. Michael (Shan-Hui) Ho not only for discussing his 
presentation but also asking him for future corporations in the bio-medical engineering especially in 
cancer sequence re-assembly problems. These are related to our human future development and are 
NP-hard problems. 
 
In addition, based upon DNA massive parallelism features and DNA special manipulations, many 
papers have employed these special advantages for NP problem solving on DNA sequence assembly. In 
this paper, a newly developed DNA sequence assembly approach along with the bioinformatics shotgun 
and Hamiltonian path finding methods is introduced and required for exact matches of any DNA 
sequence to solve worldly well-known DNA sequence assembly problem in polynomial time O(n
6
). 
 
Finally, this article in the new/better article name of “DNA Sequence Assembly with 
Bioinformatics Shotgun Method” has been accepted and published in the in the proceedings of 
2012 IEEE International Conference on Biomedical Engineering and Biotechnology (iCBEB 2012) 
cited by EI 
二、與會心得 
Dr. Michael (Shan-Hui) Ho has attended many SCI/EI related IEEE international conferences and also 
presented many sounding papers in these IEEE conferences. The 2012 IEEE International Conference 
on Biomedical Engineering and Biotechnology (iCBEB 2012) is very special to him. During his session, 
he presented “DNA Sequence Assembly with Bioinformatics Shotgun Method”.  
 
DNA sequence assembly is a set of genomic sequences that can be assembled, condensed and oriented 
in order by applying the sequence homology along with mapping information to create a consensus 
 29 
NP-hard. In this paper, a newly developed DNA sequence assembly approach along with the 
bioinformatics shotgun and Hamiltonian path finding methods is introduced and required for exact 
matches of any DNA sequence to solve worldly well-known DNA sequence assembly problem in 
polynomial time O(n
6
). 
七、 Special notes. 
Two other related research papers entitled “A Non-Continuous Optimized Data Dependence Testing For 
Reducing The Complexity Of Source Level Debugging For Parallel Compiler And Vector Compiler 
Optimizations” and “A Continuous Optimized Data Dependence Testing For Reducing The Complexity 
Of Source Level Debugging For Parallel Compiler And Vector Compiler Optimizations” are presented 
and published in the proceedings of the Twelfth National Conference on Technology and Management. 
The Twelfth National Conference on Technology and Management was held on 10/27/2011 in Taipei, 
Taiwan. It is sponsored by National Taipei University of Technology. 
 
A Non-Continuous Optimized Data Dependence Testing For Reducing The Complexity Of Source 
Level Debugging For Parallel Compiler And Vector Compiler Optimizations 
 
Abstract—Shen et al. indicate that one, two and three-dimensional array references approximately 
account for, respectively, 56, 36 and 8 percent of the examined array references. Jaramillo also points 
out that loop normalization makes array references more complex and creates many difficulties of 
source level debugging for parallel compilers and vector compilers. In this paper, we propose the 
non-continuous I optimization test to determine whether there are integer-valued solutions for 
one-dimensional arrays with constant bounds and non-one-increment. Experiments with benchmarks, 
cited from Livermore and Vector Loop, reveal that there are definitive results for most of 
one-dimensional arrays tested. 
 
 
A Continuous Optimized Data Dependence Testing For Reducing The Complexity Of Source Level 
Debugging For Parallel Compiler And Vector Compiler Optimizations 
 
Abstract—Shen et al. indicate that one, two, and three-dimensional array references approximately 
account for, respectively, 56, 36 and 8 percent of the examined array references. Jaramillo also points 
out that loop normalization makes array references more complex and creates many difficulties of 
source level debugging for parallel compilers and vector compilers. The modified I optimization test, a 
refined combination of the GCD and Banerjee tests, presents an efficient and optimized data dependence 
test technique to determine whether integer-valued solutions exist for one-dimensional arrays with 
constant bounds and one-increment. 
 
 
 2 
IEEE CATALOG NUMBERS: 
Dvd Version: CFP1241R-DVDISBN: 978-1-4577-1986-8 
Print Version: CFP1241R-PRTISBN: 978-1-4577-1985-1 
 
The main topics for the conference include the following:  
 
※Bioinformatics, Computational Biology & Systems Biology 
※Biomedical Signal Processing 
※Biomedical Imaging & Image Processing 
※Cellular & Tissue Engineering 
※Other related topics 
 
The 2012 IEEE International Conference on Biomedical Engineering and Biotechnology (iCBEB 2012) 
papers are very selected. We have one article that is presented and published in the proceedings of 
iCBEB 2012 conference by the IEEE and indexed by EI and IEEEXplore. The accepted article (with 
Paper ID CB13706) entitled “DNA Sequence Assembly with Bioinformatics Shotgun Method” was 
presented by Dr. Michael (Shan-Hui) Ho. Dr. Ho’s oral presentation for Paper ID CB13706 is presented 
in Session: Oral 1: BioMedical Engineering at 09:00-11:50 on Wednesday, May 30 of IEEE 
iCBEB 2012.  
 
The 2012 IEEE International Conference on Biomedical Engineering and Biotechnology (iCBEB 2012) 
was held from May 28th to 30th in Macau. Dr Michael Shan-Hui Ho was also invited as one of main 
talks in Oral 1: BioMedical Engineering. During and after Dr. Michael Ho’s presentation, many 
scholars, R&D scientists and engineers came to Dr. Michael (Shan-Hui) Ho not only for discussing his 
presentation but also asking him for future corporations in the bio-medical engineering especially in 
cancer sequence re-assembly problems. These are related to our human future development and are 
NP-hard problems. 
 
In addition, based upon DNA massive parallelism features and DNA special manipulations, many 
papers have employed these special advantages for NP problem solving on DNA sequence assembly. In 
this paper, a newly developed DNA sequence assembly approach along with the bioinformatics shotgun 
and Hamiltonian path finding methods is introduced and required for exact matches of any DNA 
sequence to solve worldly well-known DNA sequence assembly problem in polynomial time O(n
6
). 
 
Finally, this article in the new/better article name of “DNA Sequence Assembly with 
Bioinformatics Shotgun Method” has been accepted and published in the in the proceedings of 
2012 IEEE International Conference on Biomedical Engineering and Biotechnology (iCBEB 2012) 
cited by EI 
二、與會心得 
Dr. Michael (Shan-Hui) Ho has attended many SCI/EI related IEEE international conferences and also 
 4 
 
五、攜回資料名稱及內容 
澳門大學將寄 Proceedings of 2012 International Conference on Biomedical Engineering and 
Biotechnology (iCBEB 2012) 至台北大學電機研究所，以及光碟版之檔案。 
六、其他 
DNA Sequence Assembly with Bioinformatics Shotgun Method  
 
Abstract—DNA sequence assembly is a set of genomic sequences that can be assembled, condensed 
and oriented in order by applying the sequence homology along with mapping information to create a 
consensus sequence of a chromosome. The DNA sequence assembly problem has been recognized as 
NP-hard. In this paper, a newly developed DNA sequence assembly approach along with the 
bioinformatics shotgun and Hamiltonian path finding methods is introduced and required for exact 
matches of any DNA sequence to solve worldly well-known DNA sequence assembly problem in 
polynomial time O(n
6
). 
 
七、 Special notes. 
 
Two other related research papers entitled “A Non-Continuous Optimized Data Dependence Testing For 
Reducing The Complexity Of Source Level Debugging For Parallel Compiler And Vector Compiler 
Optimizations” and “A Continuous Optimized Data Dependence Testing For Reducing The Complexity 
Of Source Level Debugging For Parallel Compiler And Vector Compiler Optimizations” are presented 
and published in the proceedings of the Twelfth National Conference on Technology and Management. 
The Twelfth National Conference on Technology and Management was held on 10/27/2011 in Taipei, 
Taiwan. It is sponsored by National Taipei University of Technology. 
 
A Non-Continuous Optimized Data Dependence Testing For Reducing The Complexity Of Source 
Level Debugging For Parallel Compiler And Vector Compiler Optimizations 
 
Abstract—Shen et al. indicate that one, two and three-dimensional array references approximately 
account for, respectively, 56, 36 and 8 percent of the examined array references. Jaramillo also points 
out that loop normalization makes array references more complex and creates many difficulties of 
source level debugging for parallel compilers and vector compilers. In this paper, we propose the 
non-continuous I optimization test to determine whether there are integer-valued solutions for 
one-dimensional arrays with constant bounds and non-one-increment. Experiments with benchmarks, 
cited from Livermore and Vector Loop, reveal that there are definitive results for most of 
one-dimensional arrays tested. 
 
 
The 2012 International Conference on Biomedical Engineering 
and Biotechnology (iCBEB 2012) 
 
www.icbeb.org  May 28th -30th, 2012, Macau, China 
Dvd Version: CFP1241R-DVD   ISBN: 978-1-4577-1986-8 
Print Version: CFP1241R-PRT   ISBN: 978-1-4577-1985-1 
Acceptance Notification 
                                                  Mar. 13th, 2012 
Dear Authors, 
Congratulations!  It is our great pleasure to inform you that your paper 
 
Paper ID:  CB13706 
Author(s):  Ho Michael Shan-Hui,Hung Kun-Yu,Chiu Chaochang, 
 
Title:  DNA Sequence Assembly with Bioinformatics Shotgun Method 
 
 
 
has been accepted at iCBEB 2012 (The 2012 International Conference on Biomedical 
Engineering and Biotechnology).  
 
Please complete all registration procedures before March 30, 2012 by the registration 
information attached. Otherwise your paper will be excluded from the proceedings and 
can not be submitted to EI Compendex. 
 
Thank you for submitting paper to iCBEB 2012 and we sincerely hope that you could 
attend the conference. We would also appreciate it that you could contribute your 
excellent work to future iCBEB conferences. 
For more information, please visit the conference website:  
http://www.icbeb.org/ 
 
 
Best regards, 
 
 
iCBEB 2012 Organizing Committee 
 
 
 
(2a)If (Detect(T27
 second_on
) = „yes‟ and Detect(T29
 second_on
) = „yes‟) then 
(2b)T0
=  
= ∪(T0
=
, T26
first_on
, T28
first_on
, T27
 second_on
, T29
 second_on
)  EndIf 
EndIf 
(3)If (Detect(T26
first_on
) = „yes‟ and Detect(T28
first_on
) = „yes‟) then 
(3a)If (Detect(T27
 second_off
) = „yes‟ and Detect(T29
 second_off
) = „yes‟) then 
(3b)T0
=  
= ∪(T0
=
, T26
first_on
, T28
first_on
, T27
 second_off
, T29
 second_off
)  EndIf 
EndIf 
(4)If (Detect(T26
 first_off
) = „yes‟ and Detect(T28
 first_off
) = „yes‟) then 
(4a)If (Detect(T27
 second_on
) = „yes‟ and Detect(T29
second_on
) = „yes‟) then 
(4b)T0
=  
= ∪(T0
=
, T26
 first_off
, T28
first_off
, T27
 second_on
, T29
 second_on
)  EndIf 
EndIf 
(5)If (Detect(T26
 first_off
) = „yes‟ and Detect(T28
 first_off
) = „yes‟) then 
(5a)If (Detect(T27
 second_off
) = „yes‟ and Detect(T29
 second_off
) = „yes‟) then 
(5b)T0
=  
= ∪(T0
=
, T26
 first_off
, T28
 first_off
, T27
 second_off
, T29
 second_off
)  EndIf 
EndIf 
EndAlgorithm 
B. Construction of the ParallelComparator  
The following algorithm, ParallelComparator(T0
EDGE_temp , 
T0
overlay , Ta , Tb , m, n, g, b), is applied to compare whether the 
two fragments, from Ta and Tb,are different. Tube T0
overlay 
contains overlapping fragments.  
Algorithm: ParallelComparator(T0
EDGE_temp 
, T0
overlay 
, Ta , Tb , m, n, g, b) 
(1)For d =0 to Min(n-m,b-g) 
(2)For p=n downto m  
(2a) ParallelOneBitComparator(T0
=
, Ta, Tb, p, g+d)  
(2b)If (Detect(T0
=
)=“yes”) then 
(2c)Append(T0
overlay
,Op, g+d
 1
) 
(2d)Discard(T0
=
) 
EndIf 
EndFor 
EndFor 
(3)If (Detect(T0
overlay
)=“yes”) then 
(3a)T0
EDGE_temp
=∪(T0
EDGE_temp
, T0
overlay
)  EndIf 
(3b)Discard(T0
overlay
) 
EndAlgorithm 
C. Construction of the Parallel One-bit Adder 
A one-bit adder has three inputs and two outputs. The first 
and second input bits represent augend and addend, denoted 
by Ax,j and By,j. The last input represents the carry, denoted by 
Ci,j, for 1 ≤ j ≤ n. Also, the first output represents the sum of 
the augend ,addend and carry, denoted by Sx,j, for 1 ≤ j ≤ n. 
The second output represents the carry which generated by the 
sum of the augend, addend and carry, denoted by Ci,j+1. This 
carry becomes the input of next one-bit adder. The truth table 
of the one-bit adder is Table I. The corresponding algorithm 
ParallelOneBitAdder(T0, Ax,j, By,j, Ci,j, x, y, i, j, m)in the 
following. 
Algorithm : ParallelOneBitAdder(T0, Ax,j, By,j, Ci,j, x, y, i, j, m) 
(1) ParallelOneBitXOR(T0,Ax,j, By,j, x, y, i, j, 1) 
(2) ParallelOneBitXOR(T0, XORx,j ,1 , Ci,j , x, y, i, j, 2) 
(3) ParallelOneBitAND(T0, Ax,j , By,j , x , y , i , j , 1) 
(4) ParallelOneBitAND(T0, Ci,j , By,j , x, y, i, j, 2) 
(5) ParallelOneBitAND(T0, Ax,j , Ci,j , x, y, i, j, 3) 
(6) ParallelOneBitOR(T0, ANDx,j,1, ANDx,j,2, x, y, i, j, 1) 
(7) ParallelOneBitOR(T0, ORx,j,1, ANDx,j,3, x, y, i, j, 2) 
(8) T1 = +(T0, Zx,j,2
1
) and T2 = -( T0, Zx,j,2
1
) 
(9)   If(Detect(T1)==”yes”) then  (9a) Append-head (T1,Ci,j+1
1
)    EndIf 
(10) If(Detect(T2)==”yes”) then  (10a) Append-head (T2,Ci,j+1
0
)  EndIf 
(11) T0=∪(T1, T2) 
EndAlgorithm 
D. Construction of the Parallel N-bit Adder 
A binary parallel adder is also a Boolean function that 
performs the arithmetic sum for the first operand of variable  
TABLE I.  THE TRUTH TABLE OF THE ONE-BIT ADDER 
 
length and the second operand of variable length. The 
following algorithm is proposed to perform the Boolean 
function of a binary parallel adder. 
Algorithm: N-bitsParallelAdder(T0, Ax, By, x, y, i, n) 
(1) Append(T0, Ci,1
0
) 
(2) For j=1 to n 
(2a) ParallelOneBitAdder(T0, Ax,j , By,j , Ci,j , x, y, i, j, m) 
EndFor 
EndAlgorithm 
IV. DNA SEQUENCE ASSEMBLY 
DNA sequence assembly is a set of genomic sequences 
that can be assembled, condensed and oriented in order by 
applying the sequence homology along with mapping 
information to create a consensus sequence of a chromosome.  
Given a set of strings S = {s1, s2,…, sn}, any DNA original 
sequence can be cut at random sites to obtain fragments that 
are short enough to be sequenced directly. The idea of shotgun 
sequencing is to look for overlapping fragments. The 
overlapping fragments can be solved by finding a maximal 
Hamiltonian path and re-assembled back into the original 
DNA sequence. 
A. A DNA algorithm for solving the DNA sequence assembly 
problem 
Algorithm I: Solving the DNA sequence assembly problem. 
(1) Init(T0, q). 
(2) BioinformaticsShotgunFragments (T0, q). 
(3) FindAllOverlappingFragments (T0, T0
EDGE
,q). 
(4) ParallelFindOptimalRoute(T0, T0
EDGE
, T0
route
 ,q) 
EndAlgorithm 
B. Sticker-based Solution Space for DNA Sequence Assembly 
Assume that x1, . . . , xq is a q-bit binary number in a finite 
set S. Sticker is a 15-base value sequence. Bit xm represents the 
mth element in S where 1 ≤ m ≤ q. Two distinct DNA 
sequences are also designed to represent the value “0” or “1” 
of every corresponding bit. Assume that xm
1 contains the value 
of xm to be 1 and xm
0 contains the value of xm to be 0. The 
following algorithm is used to construct sticker-based solution 
space for 2q possible fragments in set S. 
Algorithm  : Init(T0, q) 
(1) For m = 1 to q 
original DNA sequence. Tube T0
EDGE includes the overlay 
value for each edge of shotgun fragments. 
Alorithm :  ParallelFindOptimalRoute(T0, T0
EDGE
, T0
route
 ,q) 
(1)Amplify(T0
EDGE
, T0
EDGE_ans
, T0
EDGE_reuse
) 
(2)For m = 1 to q    
    (2a)T34
ON
 = +( T0
EDGE_reuse
,w1,m
0
) and  
T34
OFF= − ( T0
EDGE_reuse
, w1,m
0
) 
(2b)T34 = ∪(T34, T34
ON
) 
(2c)If (Detect(T34
OFF
) =“yes”) then 
(2d)Amplify(T34
OFF
, T0
EDGE_reuse
 ,T0
EDGE_reuse _dummy
)    
EndIf 
EndFor 
(3)For m = 1 to q  
(3a)T35 = − ( T0
EDGE_ans
, w1,m
0
) 
(3b)If(m≠q) then 
(3c)Amplify(T35, T0
EDGE_ans
, T0
EDGE_ans_dummy
)    
EndIf 
EndFor 
(3d)T0
on
 = ∪( T0
on
, T34) and T0
off
= ∪( T0
off
, T35)    
(4)For m = 1 to q  
  (4a)T36
 on
 = +(T0
on
, wm,q
0
) and T36
 off = − ( T0
on
, wm,q
0
) 
(4b)T36 = ∪( T36,T36
 on
) 
(4c)If (Detect(T36
 off
)=“yes”) then 
(4d)Amplify(T36
 off
, T0
 on
,T0
on_dummy
)     
EndIf 
EndFor 
(4e)Amplify(T0
on
, T0
on_temp
, T0
on_reuse
) 
(5)For m = 1 to q    
(5a)T37= − ( T0
on_temp
, wm,q
0
) 
(5b)If(m≠q) then    
(5c)Amplify(T37, T0
on_temp
,T0
on_temp _dummy
)    
EndIf 
EndFor 
(5d)Amplify(T37, T37
on
, T37
off
) 
(6)For n = q downto 1 
   (7)For d= q-1 downto 2 
(7a)T38 = +( T37
on
, w1,d 
0
) and T38
 other = − ( T37
on
, w1,d 
0
) 
(7b)If (Detect(T38)=“yes”) then 
(8)For ds1 = q-1 downto 2 
(8a)For ds2 =2 to q-1 
(8b)T38
 only
 = +( T38, wds2, ds1
0
)  
(8c)If (Detect(T38
 only
) =“yes”) then 
(8d)T39= +( T0
off
, wds2, ds1
0
)  
(8e)If(ds1+ 1=q and ds2+1=q) then 
(8f)T39= +( T0
off
, wds2, ds1+1
0
)    
EndIf 
(8g)If (Detect(T39)=“yes”) then 
(8h)Append-head(T39, T38
 only
) 
(9)N-bitsParallelAdder(T0
Adder_answer
, wL , 
 wL* , L, L*, i, n)                 
 EndIf 
(10)Amplify(T39, T40
on
, T40
dummy
) 
EndFor 
         (11)For i =q downto 1 
(11a)If (Detect(T40
on
)=“no”) then 
(11b)Terminate the execution of the loop     
EndIf 
(11c)T40 = +( T40
on
, wi ,q
0
) and  
T41= − ( T40
on
, wi ,q 
0
)  
(11d)Amplify(T41, T40
on
, T40
off
) 
(11e)T0
route
 = ∪(T0
route
, T40) 
EndFor 
(11f)T0
route_again
 = ∪(T0
route_again
, T40
off
) and  
Discard(T40
off
)    
 EndIf 
EndFor 
EndFor 
(12)Discard(T37
on
) 
(12a)T37
on
 = ∪(T37
on 
, T0
route_again
, T38
 other
) 
(12b)Discard(T0
route_again
)     
EndIf     
EndFor 
Read(T0
route
) 
Read(T0
Adder_answer
) 
EndAlgorithm 
V. CONCLUSIONS 
DNA sequence assembly is a set of genomic sequences 
that can be assembled, condensed and oriented in order by 
applying the sequence homology along with mapping 
information to create a consensus sequence of a chromosome. 
The goal of the assembly is to compose the sequences in one 
resulting sequence in a proper order. Unfortunately, the 
sequencing outcomes usually contain misreadings (insertions, 
deletions, and substitutions of nucleotides) coming from 
biochemical steps as well as from a weakness of a sequencing 
program. To resolve the above issues, a newly developed 
DNA sequence assembly approach along with the 
bioinformatics shotgun and Hamiltonian path finding methods 
is introduced and required for exact matches of any DNA 
sequence in this paper. Of course, to disable accidental 
overlaps, some limit of mismatch acceptance must be defined. 
While larger any genome grows in size, while more difficult it 
is reassembled in operations. This newly developed DNA 
algorithm is fully utilizes parallelism to conquer time 
complexity bottleneck, and improves any DNA sequence 
assembly more efficient. The experimental results of the DNA 
sequence assembly have shown in O(n6) polynomial bound. 
In the future, we will develop more DNA assembly related 
algorithms including alignments for the better scalability and 
accuracy in the development of gene engineering (biology, 
medicine or agriculture). It is clearer that bioinformatics 
computing is the one of better choices for performing 
massively parallelism. We hope that this paper helps to 
demonstrate that bioinformatics computing is one of emerging 
technologies worth pursuing. 
REFERENCES 
[1] Setlow, J. K., & Hollaender, A. (2002). Genetic Engineering: Principles 
and Methods. 24. 
[2] U.S. Government Printing Office, W., D.C. (1984). Commercial 
Biotechnology-An International Analysis. 
[3] Lu, J. P. (2004). DNA Sequence Assembly. Master Degree Thesis, 
National Chi Nan University. 
[4] Gallant, J., Maier, D., & Astorer, J. (1980). On finding minimal length 
superstrings. Journal of Computer and System Sciences, 20(1), 50-58. 
[5] Gallant, J. K. (1983). The complexity of the overlap method for 
sequencing biopolymers. Journal of Theoretical Biology, 101(1), 1-17. 
[6] Pop, M., Salzberg, S. L., & Shumway, M. (2002). Genome sequence 
assembly: algorithms and issues. Computer, 35(7), 47-54. 
 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：何善輝 計畫編號：99-2221-E-305-003-MY2 
計畫名稱：一種最佳化數據依賴性測試用來降低原始碼級偵錯之複雜性應用於平行編譯器和向量編譯
器之最佳化 
量化 
成果項目 
實際已達
成數（被
接受或已
發表） 
預期總達
成數(含實
際已達成
數) 
本計畫
實際貢
獻百分
比 
單位
備註（質化說明：如數個計
畫共同成果、成果列為該
期刊之封面故事...等） 
期刊論文 0 0 100%  
研究報告/技術報
告 0 0 100%  
國
內 
論文著作 
研討會論文 4 4 100% 
篇 
(1)Michael Shan-Hui Ho, 
David Chia-Wei Wong, and 
Matt Yu-Shiang Gen ’A 
Non-Continuous Optimized 
Data Dependence Testing For 
Reducing The Complexity Of 
Source Level Debugging For 
Parallel Compiler And 
Vector Compiler 
Optimizations’, 2011, The 
Twelfth Technology and 
Management Symposium 
sponsor by National Taipei 
University of Technology.
(2)Michael Shan-Hui Ho, 
David Chia-Wei Wong, and 
Matt Yu-Shiang Gen ’A 
Continuous Optimized Data 
Dependence Testing For 
Reducing The Complexity Of 
Source Level Debugging For 
Solutions of the RSA 
Public-key Cryptosystem on 
a DNA-based Computer,’ 
published in the Journal of 
Supercomputing (DOI: 
10.1007/s11227-011-0627-z) 
in 2011. (SCI). 
研究報告/技術報
告 0 0 100%  
研討會論文 3 3 100% 
(1)Michael Shan-Hui 
Ho ’DNA Sequence Assembly 
with Bioinformatics Shotgun 
Method’, published in 
icbeb, pp.183-186, 2012. 
(EI) 
(2)Gene Eu Jan, Cheng-Hung 
Li, Ted Chen and Shan-Hui 
Ho, ’A Fast Channel 
Assignment Algorithm,’ 
2011 International 
Conference on Computer 
Science and Logistics 
Engineering, Zhengzhou, 
China, pp. 175-179, Nov. 
2011. (EI). 
(3)Michael Shan-Hui Ho, 
Kun-Yu Hung, and Chaochang 
Chiu, ’’ Constructing 
Molecular Parallel 
Subtractor and Modular with 
Basic Bio-logic Operations 
in the Adleman-Lipton 
Model,’ IEEE Bio-Inspired 
Computing: Theories and 
Applications, pp. 213-218, 
Sept. 2010. 
(978-1-4244-6439-5/10). 
(EI) 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100 字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100 字為限） 
There are at least 9 related SCI or EI published articles. Special thanks to 
National Science Council. 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
(1) The developed and optimized data dependence testing is used for reducing the 
complexity of source level debugging for parallel compiler and vector compiler 
optimizations.  
(2) The complete I optimization test, a refined combination of the GCD and Banerjee 
tests, is an efficient and optimized data dependence test technique to determine 
whether integer-valued solutions exist for one-dimensional arrays with constant 
bounds and one-increment. 
(3) We implemented the non-continuous I optimization test, an extension of the 
I optimization test, to determine whether there are integer-valued solutions for 
one-dimensional arrays with constant bounds and non-one-increment. Depending on 
the application domains and environments, the proposed methods can be applied 
independently or together with other popular methods to analyze data dependence 
for linear-subscript array references. 
(4) The non-continuous I optimization test is proposed to extend the normal I 
optimization test to solve the problems caused by loop normalization. 
(5) 指導研究人員最佳化數據依賴性測試用來降低原始碼級偵錯之複雜性應用於平行編
譯器和向量編譯器之最佳化理論探討及研究。 
