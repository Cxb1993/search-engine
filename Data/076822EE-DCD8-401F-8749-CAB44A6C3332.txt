 2
行政院國家科學委員會專題研究計畫成果報告 
自走型機器人在動態環境的快速三次螺旋曲線軌跡規劃 
計畫編號：NSC 94-2212-E-001-001 
執行期限：94 年 8 月 1 日至 95 年 7 月 31 日 
主持人：劉進興   中央研究院資訊科學研究所 
計畫參與人員：洪誥廷   中央研究院資訊科學研究所 
 
I. Abstract 
This paper studies the path planning problem for 
car-like mobile robots to move smoothly, safely along a 
shorter curvature-constrained path. To generate paths 
subject to a collection of multiple criteria, we apply the 
multi-island based parallel genetic algorithm (PGA) for 
multiobjective optimization (MOO) to generate a 
prespecified number of intermediate configurations for 
the candidate paths composed of cubic spiral segments. 
Simulation results are presented to show the 
effectiveness of the evolutionary MOO, compared to the 
approach based on weighted sum of multiple objectives. 
 
 
Keyword: mobile robot, dynamic obstacle 
avoidance,GA, multiobjective optimization 
 
II. Introduction 
Path planning of a mobile robot has been 
under studied in recent years since the robot 
is becoming so important in this high 
technology trend. In the past few decades, 
there are a lot of papers talking about no 
matter global or local path planning with 
many complicated numerical methods [2][3]. 
These methods sometimes can not be 
implemented into an environment that 
consists of many obstacles. So this leads the 
application of evolutionary computing into 
the problem. 
There are a lot of papers implement the 
genetic algorithm to plan the path for a 
mobile robot [4]-[7], actually they treat a 
problem that robot can turn any direction in 
the origin. Specifically, there is a key 
characteristic of the car-like robot that is the 
orientation constraint during moving toward. 
This kind of problem should not only be paid 
attention in the collision-free but also the 
smoothness of paths. Besides, some of these 
evolutionary planners contain special 
operators for the path planning problem. 
These operators seem to be designed too 
many and make their method too 
complicated. In our previous work [11], we 
implement the PGA based on the island 
model to generate multiple collision-fee 
paths composed by a pre-specified number of 
cubic spirals. Our method considers the 
orientations that the car-like mobile robot 
directed during moving toward, and 
implements the simply genetic operations 
and a specific operator during the 
evolutionary searching. In reality, the planner 
of a mobile robot must not only be able to 
generate a feasible path but also a path with 
minimum length as possible, this leads to a 
multi-objective optimization problem (MOP). 
Most real-world optimization problems 
always involve multiple objectives, 
unfortunately, these objectives sometimes 
conflict with each other. According to [18], 
Fonseca and Fleming divided the 
multi-objective evolutionary algorithms (EAs) 
into several categories, i.e. non-Pareto 
approaches, Pareto-based approaches, and 
aggregating approaches. The most common 
solution of MOP is to define a set of 
weighting factors to sum all objectives into a 
single objective, after that we can treat it 
with basic optimization techniques and this is 
termed as aggregating approaches. 
Sometimes the weighting factors are too 
difficult to define. In recent years, the idea of 
Pareto-optimality was implemented to solve 
all kinds of problems, i.e. Pareto-based 
techniques. For example, [12] proposed an 
evolutionary searching to solve the 
optimization problem of air bearings with 
multi-objectives. By the way, [13] 
implemented the Pareto-based GA to resolve 
the path planning problem. The above work 
also solves this problem in a map represented 
by a two-dimensional grid. For the 
non-Pareto techniques, the vector evaluated 
genetic algorithm (VEGA) [19] was known 
as a typical one. We will implement this 
algorithm in this research.  
In this work, we extended the previous 
 4
In [1], a symmetric mean q of any 
configuration pair (q1, q2) is a configuration 
that leads (q1, q) and (q, q2) are both 
symmetric pairs. All symmetric means of a 
configuration pair (q1, q2) forms a circle if 
(q1) ≠ (q2) or a line connecting q1 and q2 if 
(q1) = (q2) (Proposition 3, [1]). It is noted that 
the symmetric property is very important in 
this method because a cubic spiral can 
connect two symmetric configurations.  
The cubic spiral method can connect two 
given configuration q1 and q2 according to 
the following steps: 
I. If q1 and q2 are symmetric, connect 
these two configurations with a cubic 
spiral directly. 
II. Else, connect these two configurations 
with a specified symmetric mean 
i. If (q1) ≠ (q2), the symmetric mean 
locates on a circle formed by two 
given configurations, i.e. non-parallel 
case. 
ii. If (q1) = (q2), the symmetric mean 
locates on a straight line connected by 
two given configurations, i.e. parallel 
case. 
B. Simulated Environments 
In our previous work, we only consider the 
paths that are avoid the obstacles or not. Here 
we pay our attention on the searching of not 
only the collision-free paths but also the 
paths with minimum length within some 
complicated environments, i.e. so called 
MOPs. Here we also consider the polygonal, 
convex, concave and wall-like obstacles 
when proceed the evolutionary searching, by 
the way, the boundary of map would be 
considered too.  
Furthermore, since the path was derived 
from equation (1), we could compute the 
intrinsic cost of every path according to [3]. 
The so-called intrinsic cost means that how 
many intersections a path intersect with all 
obstacles, or how many sampling nodes of 
path locate outside the boundary of map, this 
also implies that our method should at least 
find out the path that with zero intrinsic cost.  
The other objective is the length of path 
should be minimized. According to equation 
(5), we can easily compute the length of 
every specific cubic spiral. Due to the above 
description, we can synthesis a particular 
path with a number of cubic spirals, and be 
aware of the length of this path. 
In this paper, we briefly proposed five 
static environments to test our method. 
For dynamic cases, since the path was 
derived according to (1), we can compute 
time sequence of all sampling points of the 
path according to the predefined velocity of 
robot. After we get the time sequence of 
robot, we can modify the positions of all 
obstacles according to their own velocities 
when the robot moves around, it implies that 
we are aware of the detail information of the 
dynamic environment during every specific 
moment. The main difference between static 
and dynamic cases is that former arbitrates 
the whole path in one time, and the later 
arbitrates every single points of the path in 
different time indices when compute the 
intrinsic cost. 
 
IV. Proposed Evolutionary Path 
Planning Method 
In this work, we implement the 
evolutionary computing into the path 
planning problem. Many researches have 
mentioned that the simple genetic algorithm 
(SGA) has a commonly serious problem, i.e. 
genetic drift. So a proposed scheme of 
parallel genetic algorithms (PGA) and a 
simple cluster-oriented genetic algorithm 
(COGA) are developed based on the SGA.  
For SGA, in the procedure, a population of 
candidate solutions, called as chromosomes, 
individuals, or paths in this problem, is under 
evolution. At the beginning of each 
evolutionary generation, the fitness value of 
each chromosome is evaluated. Three basic 
evolutionary operations are then applied: 
selection, crossover, and mutation. Only 
those individuals that are selected have the 
chance to be copied or operated under 
crossover and mutation, and to pass on to the 
next generation. Selection is based on the 
fitness values, thus implements the “the fitter 
one has more chance to breed” principle. 
Besides, another contribution of this 
research is to compare the performance of 
MOP and SOP. Thus we will implement 
three classified techniques mentioned in the 
first section. 
to the position of symmetric mean [1]. 
Parallel case: 
If (q1) = (q2) = θ, ( ) ( ) ( )( )γ γ β θ − β−⋅−+⋅−+= ,, 121121 yyyxxxqs  
where [q1] = (x1,y1), [q2] = (x2,y2), and 
⎟⎟⎠
⎞
⎜⎜⎝
⎛
−
−= −
12
121tan
xx
yyβ . 
So, if we defined N sets of cubic spirals, i.e. 
N number of control points, for a path, the 
chromosome consists of 2N+1 genes since 
the size and deflected angle of a segment, 
and the position ratio between two last 
intermediate subgoals from START and 
GOAL configuration should be defined. The 
composition of genes for a single 
chromosome p can be shown as follows: 
p = [d1 α1 ; d2 α2;…; dN αN ; γSym], N: even 
number 
B. Initial Population 
In our proposed GA-based searching, the 
initial populations are created by randomly 
generated vectors of real numbers, including 
the sizes, deflected orientations of a specified 
cubic spiral segment, and position ratio of 
symmetric means that connected two 
intermediate points derived from START and 
GOAL configurations. If we implement an 
island-based PGA, the divided 
subpopulations have constant population size, 
of 60 individuals in the following case 
studies. On the other hand, the simple COGA 
has only one population under evolution. 
Actually, the initialization of every 
chromosome should be done according to a 
predefined range, for every single cubic 
spiral segment, there are two variables 
should be randomly generated, i.e. the size 
dCS from 20 to diagonal distance of map 
divided by half of number of control points; 
the deflected orientation α varied within a 
range of –π to π; the position ratio of 
symmetric mean changed in the range of 0.2 
to 0.8. Please note that we generate the initial 
populations which are all continued paths in 
order to improve the searching efficiency. 
C. Fitness Definition: Rank-based 
Assignment & Pareto Ranking  
For single objective optimization problem 
in our previous work [11], a rank-based 
fitness assignment strategy is adopted 
straightforwardly. In this work, it may not be 
trivial since we will treat a MOP in path 
planning. Actually, if we convert the MOP 
into a single objective problem, there is a 
critical problem should be mentioned, an 
ideal set of weighting factors for the multiple 
objective function values is not easy to 
define. Here we design six sets of weighting 
factors to aggregate the objectives into one 
single objective in this work. 
The Pareto optimality can be explained as 
following. The dominated solutions are the 
points in the criterion space (the space 
formed by multiple objectives) that are 
inferior to at least one other point. On 
contrary, those non-dominated solutions are 
the optimal designs in the MOP. For ease of 
understanding, a two-dimensional criterion 
space can be used to introduce the idea of 
Pareto optimality. By the way, the detail 
mathematical definition can be referred by 
[14][15]. 
In this work, we apply the method 
proposed by [16] to rank the individuals in a 
population. There has one difference is that 
better ranks result in higher indices, however, 
this is done for the following selection 
strategy. Fig. 2 illustrates a ranking result 
with both minimizations in a 
two-dimensional MOP, as you can see, better 
ranks have higher indices. Please note that 
the best rank is always termed as 
Pareto-frontier. 
 
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
f1
f 2
1
7
6
6
5
4
6
7
7
3
7
5
6
3
6 2
3
4
7
4
1
7
6
5
2
7
5
6
8
6
8
4
8
6
1
5
8
8
7
4
7
8
4
6
5 4
36
8
5
 
Fig. 2 Pareto ranking for a two-dimensional problem 
 
Obviously, for the path planning problem, 
the intrinsic cost is much important than the 
length of a path since the robot always needs 
a collision-free path to go through. Although 
the Pareto optimality can not put pressure on 
any particular objective, we still can pay our 
 6
( )
( )⎩⎨
⎧
−⋅+⋅=
−⋅+⋅=
11122
12111
1'
1'
γθγθθ
γθγθθ
, 
where γ1 is a randomly generated real 
number between 0 and 1. Please note that γ1 
is different in different genes. 
Mutation is a mechanism introduced to 
explore new searching directions. Assuming 
θmax and θmin be the bounds of candidate 
solutions, the resultant descendant generated 
by the mutation operation will be: ( )minmax2min' θθγθθ −⋅+= , 
where γ2 is a randomly generated real 
number between 0 and 1. By the way, the 
mutated bounds for the sizes, deflected 
orientations of cubic spirals, and position 
ratios are the same with Section III.C. 
Please note that the notation θ stands for a 
chromosome in a population. 
F. Specifically Manipulated Operator 
In this paper, we also designed a 
specifically manipulated operator for 
infeasible path to increase the efficiency of 
searching the collision-free paths, like our 
previous work [11]. Since the proposed path 
representation is different from our previous 
paper, we must make a comparison to prove 
the efficiency of this operator on the later 
paragraph. 
G. The Parallel Genetic Algorithms based 
on the Island Model 
In the evolutionary algorithms, the conflict 
between speedup of convergence rate and 
avoidance of local minimum is embodied in 
the selective pressure and population 
diversity. With a single population, as in the 
SGA, the selective pressure and population 
diversity oppose with each other. By PGAs, 
it is possible to raise selective pressure in 
some subpopulations and concurrently to 
augment the population diversity in other 
subpopulations. In this work, we have three 
islands and the settings of crossover/mutation 
rates are 0.85/0.01, 0.4/0.3, and 0.1/0.9. 
The detail description of the proposed PGA 
can be viewed as our previous work [11]. 
H. The Cluster-Oriented Genetic 
Algorithm (COGA) 
In order to improve the SGA, COGA was 
proposed by I.C. Parmee [17]. COGA is 
capable to identifying high-performance 
regions of complex design spaces through the 
on-line filtering of solutions during evolution. 
Among this scheme of GA-based searching, 
a variable mutation COGA (vmCOGA) was 
proposed. vmCOGA apply the different 
mutation rates to increase the diversity of 
searching. This concept is close to the PGA 
we implement in this work. In order to 
compare these two schemes of GA-based 
searching, we design a simple COGA that 
with different sets of crossover/mutation rate 
mentioned in the previous section. By the 
way, the simple COGA is under evolution 
with increasing mutation rates. For example, 
if we plan a path with COGA with 300 
generations, the first 100 generations would 
be under evolution with crossover/mutation 
rate 0.85/0.01, the following with 0.4/0.3, the 
final 100 generations proceed with 0.1/0.9. 
I. Vector Evaluated Genetic Algorithm 
(VEGA) for MOP 
The VEGA was proposed by Schaffer [11] 
and implemented to solve the MOPs. Given 
the fixed number of population k and m 
objectives, each chromosome within a 
population was evaluated for its 
corresponding function value in every 
criterion. After that, the total population was 
divided into m subpopulations and each 
contains k/m members. The divided strategy 
is based on the rank-based assignment for 
every criterion, i.e. every subpopulation was 
formed by roulette wheel selection based on 
that particular criterion. These m 
subpopulations would be collected together 
and shuffled to form a new mating pool, thus 
the next generation would be selected under 
the usual genetic operators, i.e. reproduction, 
crossover and mutation, from that pool. By 
the way, we preserve the best solution in 
every criterion, i.e. preservation of two 
elitisms. 
 
V. Experimental Results 
In this section, we propose comparisons of 
path planning in some static environments 
with polygonal obstacles to choose an 
appropriate scheme of EA, as show by Fig.4. 
In the bottom of this section, we proposed 
some results of dynamic path planning. 
 
 8
700 800 900 1000 1100 1200 1300 1400 1500
0
0.5
1
1.5
2
2.5
3
3.5
4
x 104
Length of path
In
tri
ns
ic
 C
os
t
 
 10
Fig. 6 The preserved solutions of a particular run in a 
specific case 
 
We also treat Environment-1 and 
implement the SGA. Please note that the 
initial populations are the same in every 
independent run. Table 2 lists the parameters 
of SGA and the results of this comparison. 
The success rate represents the number of 
specific runs that find out a feasible path 
after 50 independent runs. The best and worst 
path means the path with minimum and 
maximum length within those feasible paths 
in every single run after 50 runs. The average 
length and standard deviation are derived 
from all success runs after 50 independent 
runs. Obviously, the second and third 
preservation strategies are better than the 
others. Actually the success rates of these 
strategies are not good enough, thus we 
prefer to preserve another two solutions with 
lowest intrinsic cost because the path 
planning problem must pay much attention 
on this objective. In order to compare these 
two strategies with those additional elitisms, 
we treat the Environment-1 and implement 
the previous scheme of SGA too. As you can 
see, the preservation of another two solutions 
can dramatically improve the success rate in 
our problem. That is, the new third strategy 
has better performance in our comparison 
and we will henceforward adopt it. 
 
Table. 2 The definition of SGA parameters and 
comparison of different preservation strategies 
Infor. SGA (MOP) 
Number of Control 
Points 4 
Population Size 60 
Evolutionary 
Generations 120 
Mutation rate (ωm) 0.01 
Number of 
ma of 10(/per generation) nipulations 
infeasible paths 
Infor. Stra.-1 
Crossover rate (ωc) 0.85 
Stra.
-2 
Stra- Stra. Stra.
.3 -4 -5 
Success rate
(/50 Runs) 0 23 34 0 21 
Best path N/A 739.65 735.04 N  74/A 0.72
Worst path N/A 1001.881055.87 N/A 1027.07
Average 
length 
(SD of best N/A
paths) 
793.25 
(86.78) 
812.52 
(105.97) N/A 
840.59
(104.76)
Infor. New Stra.-2 New Stra.-3 
Success rate
(/50 Runs) 30 41 
Best path 732.01 732.16 
Worst path 1007.68 1040.12 
Average 
length 
(SD of best 
810.34 
paths) 
(86.6) 
792.92 
(83.6) 
 
. Performance Comparison of the PGA 
A , the migrating intervals 
of
able. 3 Parameter definition and comparison of PGA 
Infor. 
COG
M
C
with Different Migrating Intervals and 
Simple COGA 
ccording to [20]
 PGA have some influence to the searching 
performance. In this section, we investigate 
the relation of different migrating intervals 
versus searching performance. By the way, 
we implement the simple COGA together. In 
this comparison, we treat Environment-2 to 
compare their performance. The definitions 
and comparison of the evolutionary 
parameters (migrating intervals) and different 
scheme of algorithm can be listed as Table. 3. 
As you can see, our simple COGA has better 
performance on success rate, average length, 
and standard deviation than the parallel 
schemes of GA in this environment. 
 
T
with different migrate intervals and simple COGA in 
two distinct environments 
PGA (3 
islands) 
MOP 
A 
OP
Number of Control 
Points 6 6 
Pop ize (/is s) 180 ulation S
60 
land
Evolutionary 
Generations 100 100 
Number of 10 30 
 12
Rate 
0.1/0.9 0.1/0.9 
0.4/0.3 0.4/0.3 
W  
(  
eighting factors
intrinsic cost/
length cost) 
N/A N/A N/A N/A 0/1.0 0.1/0.9 0.2/0.8 0.5/0.5 0.8/0.2 
s work)
1.0/0
(previou
Success rate 
(/50 Runs) 48 48 47 30 0 6 42 50 46 48 
Best path 697.53 707.83 699.54 803.54 N/A 695.79 691.35 699.26 698.46 701.28
Worst path 739.27 937.35 958.42 1058.47 N/A 728.9 710.96 839.22 1203.33 1138.65
Average length 
(SD of best paths) 
708.41 
(6.68) 
754.46 753.91
(48.08) (104.81) N/A (12.84) (5.16)
803.54 703.43 702.73 719.13 733.22 
(74.35) (113.17)
805.62
(48.33) (31.74) 
 
Tabl etter 8 sets of weighting factors that s rom 100 randomizations 
Infor.  by we
e. 5 B elected f
COGA 
(SOP-Aggregation ighting factors) 
Select based on success rate Select based on standard deviation W  (  
0.4381 0.6149 0.3484 0.7865 0.8688 0.8285 0.8274 
Success rate 0
eighting factors
intrinsic cost/
length cost) 0.5619/ 0.3851/ 0.5562/
0.4438
0.6516/ 0.2135/ 0.1312/ 0.1715/ 0.1726/ 
(/50 Runs) 5  45 24 40 36 
Best path 693.31 697.34 699.78 696.75 694.53 691.50 691.08 692.17 
Worst path 741.47 735.73 741.77 740.75 714.77 708.70 711.43 716.62 
Average length 
(SD of best paths) (9.91) (7.61) (11.04) (10.10) (4.80) (4.83) (7.97) (5.59) 
712.93 709.10 714.31 713.86 705.45 701.46 702.86 702.66 
 
650 700 750 800 850 900
0
2000
4000
6000
8000
10000
12000
The 30th generation
L
In
tri
ns
ic
 
ength Cost
C
os
t
 
 
COGA for MOP
VEGA for MOP (0.85/0.01)
COGA for SOP
650 700 750 800 850 900
0
2000
4000
6000
8000
10000
12000
The 60th generation
In
tri
ns
ic
 
Length Cost
C
os
t
 
 
COGA for MOP
VEGA for MOP (0.85/0.01)
COGA for SOP
650 700 750 800 850 900
0
2000
4000
6000
8000
10000
12000
The 90th generation
In
tri
ns
ic
 
Length Cost
C
os
t
 
 
COGA for MOP
VEGA for MOP (0.85/0.01)
COGA for SOP
 
Fig. 7 Monitoring of Pareto-fronts for three schemes of evolutionary searching 
E. Different Case Studies in Static 
imum intrinsic cost 
ithin those preserved elitisms in some 
particular generations. 
 
 
Environments 
In the beginning of this section, we 
implement the COGA with 100 generations, 
8 control points, preservation strategy of 
elitisms mentioned before, and specific 
manipulations to plan the path in 
Environment-3. This environment is not easy 
for a car-like mobile robot since it contains 
narrow alleys. By the way, we can illustrate 
the evolutionary histories of two best 
objective function values within the 
preserved elitisms as shown by Fig. 8. For 
the ease of observation, we reverse the axis 
of intrinsic cost. As you can see, the first 
collision-free path appears around the 63th 
generation. The intrinsic cost would not be 
stable since we implement the third 
preservation strategy mentioned before. 
Additionally, Fig. 9 illustrates the evolution 
of the path with min
w
0 10 20 30 40 50 60 70 80 90 100
700
800
900
1000
1100
Generations
Le
n
gth
 C
os
t
Convergence History of two-dimensional MOP
-4
0
x 104
-1
-2
-3
In
tri
ns
ic
 C
os
t
 
Fig. 8 Evolutionary history of the two-dimensional 
objectives 
 
 Start
Goal
Case studies: different GOAL orientation
 
F. Case Studies in Dynamic 
Environments 
In this section, we implement the 
evolutionary algorithm mentioned before to 
plan a path in two dynamic environments, i.e. 
consisting one and two moving obstacles 
(Fig. 13). Since the computing efficiency of a 
path in dynamic environment will be heavy 
than static case, we evolves the population 
with 50 generations and 120 chromosomes. 
Fig. 14 and Fig. 15 illustrate the moving 
progresses of the robot with different 
dynamic conditions in different environments, 
where the circle represents the mobile robot. 
As you can see, the robot not only avoids the 
moving obstacles but also moves smoothly. 
Actually, our approach successfully solves 
the dynamic path planning with constant 
speeds without complicated mathematical 
computation. Please note that the robot 
always goes through a directed path with 
constant velocity to avoid moving obstacles. 
(b) 
Fig. 12 Different START and GOAL orientations in 
Environment-5 
 
The most important advantage of cubic 
spiral planning is that every curve would 
have smooth curvature all the time. As 
mentioned in Section III.D, the evolution 
could proceed with a slight curvature 
constraint. In this work, all the case we set 
the maximum curvature as 0.05. From 
equation (3), we can calculate the curvature 
of a cubic spiral. Fig. 13 shows the 
normalized length versus the curvature of 
three paths in second case (Fig. 12 (b)) of 
Environment-5. The curvature for each of 10 
segments all distributes beneath 0.05. 
 
Start
Goal
OB1
 
 
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1
0
0.005
0.01
0.015
0.02
0.025
0.03
0.035
0.04
0.045
0.05
s (normalized length)
|κ(s
)| 
(cu
rv
at
ur
e
)
 
 
GOAL Orient. = 0
GOAL Orient. = π/3
GOAL Orient. = -π/3
 
Environment-6 
Start Goal
OB1
OB2
 
Environment-7 
Fig. 13 Two different dynamic environments 
Fig. 12 Normalized length versus curvature for each 
of 10 segments in Environment-5 
 
 
 
 
 
 
 
 14
Start Goal
OB1
OB2
Vrobot:VOB1:VOB2 = 1:1:3  
Start Goal
OB1
OB2
Vrobot:VOB1:VOB2 = 1:1:3  
Start Goal
OB1 OB2
Vrobot:VOB1:VOB2 = 1:1:3  
Start Goal
OB1 OB2
Vrobot:VOB1:VOB2 = 1:1:3  
Start Goal
OB1
OB2
Vrobot:VOB1:VOB2 = 1:1:3  
Start Goal
OB1
OB2
Vrobot:VOB1:VOB2 = 1:1:3  
(c) 
Start Goal
OB1
OB2
Vrobot:VOB1:VOB2 = 1:3:1  
Start Goal
OB1
OB2
Vrobot:VOB1:VOB2 = 1:3:1  
Start GoalOB1
OB2
Vrobot:VOB1:VOB2 = 1:3:1  
Start Goal
OB1
OB2
Vrobot:VOB1:VOB2 = 1:3:1  
Start Goal
OB1 OB2
Vrobot:VOB1:VOB2 = 1:3:1  
Start Goal
OB1
OB2
Vrobot:VOB1:VOB2 = 1:3:1  
(d) 
Start Goal
OB1
OB2
Vrobot:VOB1:VOB2 = 3:1:1  
Start Goal
OB1
OB2
Vrobot:VOB1:VOB2 = 3:1:1  
Start GoalOB1 OB2
Vrobot:VOB1:VOB2 = 3:1:1  
Start Goal
OB1
OB2
Vrobot:VOB1:VOB2 = 3:1:1  
Start Goal
OB1
OB2
Vrobot:VOB1:VOB2 = 3:1:1  
Start Goal
OB1
OB2
Vrobot:VOB1:VOB2 = 3:1:1  
(e) 
Fig. 15 Dynamic path planning with two moving obstacles. The dynamic conditions of robot and two obstacles 
are: (a) Vrobot = VOB1 = VOB2, (b) Vrobot/VOB1/VOB2 = 1/3/3, (c) Vrobot/VOB1/VOB2 = 1/1/3, (d) Vrobot/VOB1/VOB2 = 1/3/1, 
and (e) Vrobot/VOB1/VOB2 = 3/1/1 
 
VI. Conclusion and Future Works 
In this paper, a simple COGA is applied to 
explore potential feasible paths for a car-like 
mobile robot with considering two objectives, 
i.e. the intrinsic cost and length of a path. 
Our approach is effective to generate a 
collision-free path that with a pre-specified 
number of intermediate configurations and 
can smoothly moves a car-like mobile robot 
from an initial to a goal configuration in an 
obstructed environment. Here the cubic spiral 
paths are used to linking these smoothly 
directed planar curves. Actually, the special 
manipulator and preservation strategy of 
elitisms, as justified by simulations, 
effectively improve the evolutionary search 
capability. By the way, different schemes of 
EAs are proposed to solve the path planning 
problem. For MOPs in EAs, we also show 
that the Pareto-based technique is better than 
the traditional aggregating methods and 
non-Pareto methods. In this work, we 
successfully implement the evolutionary 
search to plan a smooth path with cubic 
spiral not only in the static but also the 
dynamic obstructed environments. 
When we consider the evolutionary 
algorithms, there still have many parameters, 
like population size and island numbers in 
PGA, will influence the results of searching. 
It implies that the simple COGA is not 
undoubtedly better than the PGA in our work. 
We might investigate more detail in the 
parameters of different GA. The dynamic 
 16
 18
Reference 
[1] Y.J. Kanayama, B.I. Hartman, “Smooth 
local path planning for autonomous 
vehicles,” Proceedings Int. J. Robot. Res., 
Vol.16(3), 1997, pp 263-283. 
[2] T.C. Liang, J.S. Liu, G.T. Hung, and Y.Z. 
Chang, "Practical and flexible path 
planning for car-like mobile robot using 
maximal-curvature cubic spiral," 
Robotics and Autonomous System, Vol. 
52, 2005, pp. 312-335. 
[3]  K. Konolige, “A gradient method for 
real-time robot control,” AIOS, 2000. 
[4] P. Wide and H. Schellwat, 
“Implementation of a genetic algorithm 
for routing an autonomous robot,” 
Robotica, Vol. 15, 1997, pp 207-211. 
[5] M. Gemeinder, and M. Gerke, 
“GA-based path planning for mobile 
robot systems employing an active search 
algorithm,” Applied Soft Computing, 
Vol.3, 2003, pp 149-158. 
[6] J. Xiao, Z. Michalewicz, L. Zhang, and K. 
Trojanowski, “Adaptive Evolutionary 
Planner/Navigator for Mobile Robots,” 
IEEE Transactions on Evolutionary 
Computation, Vol.1, No.1, 1997, pp 
18-28. 
[7] A. C. Nearchou, “Path planning of a 
mobile robot using genetic heuristics,” 
Robotica, Vol.16, 1998, pp 575-588. 
[8] A. H. Wright, “Genetic Algorithms for 
real parameter optimization.” In G. 
Rawlins, ed., Fundamentals of Genetic 
Algorithms, Morgan Kaufmann, 1991, pp. 
205-218. 
[9] K. A. De Jong, An Analysis of the 
Behaviour of a Class of Genetic Adaptive 
Systems, Ph.D. Thesis, University of 
Michigan, Ann Arbor, 1975. 
[10] H. K. Lam, F.H. Leung, P.K.S. Tam, 
“Design and stability analysis of fuzzy 
model-based nonlinear controller for 
nonlinear systems using genetic 
algorithm” IEEE Trans. Syst., Man and 
Cybernetics, Part B, vol. 33, 2003, pp. 
250-257. 
[11] K. T. Hung, J. S. Liu, and Y. Z. Chang, 
“Generation of multiple cubic spiral 
paths for obstacle avoidance of a car-like 
mobile robot using the evolutionary 
search,” International Conference on 
Autonomous Robots and Agents, Dec. 
12-14, 2006. 
[12] N. Wang and Y.Z. Chang, “Application 
of the genetic algorithm to the 
multi-objective optimization of air 
bearings,” Tribology Letters, Vol. 17, No. 
2, 2004. 
[13] O. Castillo, L. Trujillo and P. Melin, 
“Multiple objective genetic algorithms 
for path-planning optimization in 
autonomous mobile robots,” Soft 
Computing, 2006. 
[14] K. Deb, Multi-Objective Optimization 
using Evolutionary Algorithms, West 
Sussex, England, John Wiley & Sons, 
2001. 
[15] A. D. Belegundu and T.R. Chandrupatla, 
Optimization Concepts and Applications 
in Engineering, New Jersey, Prentice 
Hall, 1999. 
[16] D. E. Goldberg, Genetic Algorithms in 
Search, Optimization, and Machine 
Learning, Addison-Wesley, 1989. 
[17] I. C. Parmee, “Cluster Oriented Genetic 
Algorithms (COGAs) for the 
Identification of High Performance 
Regions of Design Spaces,” Proceedings 
of EvCA96 Conference, Moscow, June 
24-27, 1996.  
[18] C. M. Fonseca and P. J. Fleming, “An 
overview of evolutionary algorithms in 
multiobjective optimization,” 
Evolutionary Computing, Vol.3, No.1, 
1995, pp. 1-16. 
[19] J. D. Schaffer, “Multiple objective 
optimization with vector evaluated 
genetic algorithms,” Ph.D dissertation, 
Vanderbilt University, Nashville, TN, 
1984. 
[20] Z. Skolicki and K. De Jong, “The 
influence of migration sizes and intervals 
on island models,” GECCO’05, pp. 
1295-1302, 2005. 
[21] A. Farinelli and L. Iocchi, “Planning 
Trajectories in Dynamic Environments 
Using a Gradient Method,” RoboCup 
2003, LNAI 3020, pp. 320-331, 2004. 
[22] R. Smierzchalski and Z. Michalewicz, 
“Path Planning in Dynamic 
Environments,” Computational 
Intelligence, Vol. 8, pp. 135-153, 2005. 
 20
附件：封面格式 
行政院國家科學委員會補助專題研究計畫成果報告 
※※※※※※※※※※※※※※※※※※※※※※※※※※※ 
※                                                  ※ 
※ 自走型機器人在動態環境的快速三次螺旋曲線軌跡規劃 ※ 
※                          ※ 
※※※※※※※※※※※※※※※※※※※※※※※※※※※ 
 
計畫類別：■個別型計畫  □整合型計畫 
計畫編號：NSC－94－2212－E－001－001 
執行期間： 94 年 8  月 1 日至 95 年 7 月  31 日 
 
計畫主持人：劉進興 博士 
共同主持人： 
計畫參與人員：洪誥廷 
 
 
 
 
 
 
 
 
本成果報告包括以下應繳交之附件： 
□赴國外出差或研習心得報告一份 
□赴大陸地區出差或研習心得報告一份 
□出席國際學術會議心得報告及發表之論文各一份 
□國際合作研究計畫國外研究報告書一份 
 
 
 
執行單位：中央研究院資訊科學研究所 
 
 
 
中 華 民 國  95 年  10 月  16 日 
 
Arimoto演講”What is a break through toward human 
robotics”，對於機器人學術領域的研究學者來說，都是啟
人深思的研究方向。 
 
此外，為了增加機器人最新應用研究成果之資訊揭露，主辦
單位也辦理 11場次之 workshops/tutorials，參加人數甚為
踴躍。由於本次論文發表數量眾多，因此主辦單位每天同時
安排 16組，每組每次發表 5-6篇論文，每篇論文發表 18分
鐘，總計 188場次於三天會期內完成發表，這個現象反應出
世界各國對於引進機器人，並且與人互動，增進人類生活品
質的看法形成共識，從投入人力及經費從事智慧型機器人，
從事學術應用的研發規模可一窺端倪。 
 
本人此次報告有關利用內外橢球近似凸多面體邊界，進行二
凸多面體碰撞偵測的方法，進一步延伸到凸多面體頂點，可
作均勻或不均勻位移的變形情況。本次會議來自台灣之學者
及教授，包括財團法人精機中心的二位考察專員，約 15位
受邀與會，本人亦利用此次機會，與台灣學者及教授交換訊
息，增進彼此領域之瞭解，進而尋求合作研究之機會與可
