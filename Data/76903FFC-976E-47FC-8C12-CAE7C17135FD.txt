 2
降劇烈。此外，這些方法的另一個重要問題，就
是沒有一個自我適應機制去限制退化的加劇。若
以資料壓縮的角度觀之，嵌入程序後的結果，希
望是接近原來的編碼器所設置的編碼位元率和重
建品質。 
在本研究中，我們發展兩種脆弱型的
H.246/AV 視訊浮水印方法。第一種方法是利用
trailing one（T1）的極性值，和 context-adaptive 
variable-length coding (CAVLC)符號裡的 G - LSB
方法來嵌入數據。此種方法是基於 CAVLC 規則來
獲得更好的效能，根據 CAVLC 的特性，在目前
的 DCT 塊中增加 T1 的數量，且係數的數量是不
變的，可以減少該區塊編碼的長度。這種方法不
僅具有很大的品質，位元率和隱藏能力，也有能
力限制編碼退化情況。 
第二種方法利用類似的方法，但嵌入目標和
實作的細節是不同的，不同之處包括，改使用最
後非零係數（或稱為 last level coefficient）與鄰近
方塊最後非零係數的預測誤差，來嵌入浮水印位
元。為了實現可逆式，我們採用直方圖位移來嵌
入數據。此方法的特點，是它使用較少的計算量、
和俱備可逆式的恢復能力。 
我們實作所提出的方法，並與 H.264/AVC 標
準的編解碼器整合，以測試它們的性能。 H.264
是一公開的視訊壓縮格式，具有縮減資料大小和
傳播迅速、方便的特性，所以是最常用的視訊壓
縮標準，因此本本研究所提出的方法可以普遍適
用於多種類型的視訊應用。 
 
2. 研究背景與文獻探討 
這個節中我們探討 H.264 浮水印的重要文獻。
根據這些文獻的方法特性，可以分為四個類別，
如圖 1 所示。 
 
 
圖 1 H.26 的數位浮水印的技術分類圖 
在傳統的資料隱藏方法，當已以加入浮水印
的 stego-media 可被還原的話這種技術就滿足了可
逆或無損資料隱藏技術的需求。適用於醫療，軍
事，它們需要將 stego-media 還原成原始狀態。主
要的無損資料隱藏方法可以分為三種：  
（1）差值擴展（DE）。這類型的方法計算一
對相鄰像素的平均及像素差，擴大其差值產生可
藏空間，且為了避免溢位的問題，需要記錄哪些
像素在藏入資料後會產生溢位。由於差值擴大，
嵌入後的品質下降比其他方法更為嚴重，但可大
大提高其能力。另一個問題考慮到位置位元圖的
大小，可以結合壓縮技術，減少位置圖的大小。 
（2）直方圖位移（HS）：它將一個圖像轉換
成統計像素的直方圖，可用此直方圖找到此圖像
的最高點和最低點，並藉由直方圖位移來騰出空
間嵌入隱藏數據。此方法具有更少的失真，並保
持更好的圖像品質，因為它的像素稍微改變了像
素的強度，但容量通常不夠大多數的應用程序。 
（3）Generalized Least Significant Bit（G - 
LSB），將秘密資訊取代原始像素的 LSB，但原來
的 LSB 為了無損式回復必須記錄成標頭欄位。這
一系列的方法通常只能提供很小的負載能力，還
必須要扣除標頭欄位的大小，相對的失真在嵌入
資料後也較少。 
 
表 1 方法之間的比較 
 Capacity Quality Complexity overhea
d 
DE High Low Medium Medium
HS Low High Low Low 
G-LS
B 
Low High Low High 
 
2.1. 可逆式方法 
我們首先解釋為什麼沒有無損式的 H.264 浮
水印。之所以浮水印無法實現無損的目標是因為
失真漂移所造成的。圖 2 所示為大多數運動補償
的視訊壓縮技術，預測幀（P）參照 I 幀來編碼巨
它的方塊，以減少的空間和時間的冗餘性。 
 
  
圖 2 每一幀相互參考的關係 
因此，當我們嵌入資料到任何一個幀，在隨
後的幀會因為嵌入資料所造成的失真漂移變的更
加嚴重。因此，無損式浮水印的資料隱藏應用在
H.264 壓縮域並不是真的無損，因為視訊無損式浮
水印提取數據後不能恢復到原來的編碼視訊。 
 
差值擴張的可容失真編碼 
參考文獻[1]的作者利用 DE 隱藏資料於一個 4× 
4 DCT 區塊中的係數中，並進行單一位元資訊的
錯誤彈性編碼。在第一階段程序中，先選擇一對
DCT 低頻的非零量化係數 ),( 0201 cc ，進行修改，其
嵌入公式如下： 
 4
器和解碼器的複雜性。無損式浮水印嵌入的方法
[6-7]實現漂移補償的方案，因此使得資料能無損
地回復。 
在圖 6（a）和（b）中，作者為了克服失真漂
移而提出的無損漂移補償架構。在圖中，PMB 代
表往前參考的 I 或 P 幀中內巨方塊的像素。在嵌入
資料到 PMB 之後，我們可以從中得到 PMB’和
DPMB 及 PMB 和 PMB’之間的差異，其在 DCT 和
量化後成為 DMB。圖 6（b）說明移除補償信號的
過程。 
 
  （a） 
 
（b） 
圖 6 無損漂移補償模型（a）MB 的補償信號;（b）
從 MB 移除補償信號 
 
整體來說 H.264 編碼器和解碼器與補償機制
是複雜的，它必須在頻率與空間之間切換，並添
加或刪除漂移補償信號，而信號必須透過 DCT 轉
換。雖然能藉由補償機制來改善位元率和視訊品
質，但補償機制並不簡單容易。 
 
2.2 強韌型方法 
強韌性浮水印方法通常有額外的能力可抵禦
惡意攻擊和內文修改。因此，這些方法在崁入時
有更多的限制。 
 
係數對挑選與次頻帶交換 
參考文獻[9]作者提出一個在 H.264 標準中的 I
幀，嵌入資料而不考慮 P 幀的浮水印演算法，這
種方法可以抵抗超過 40： 1 壓縮比的 H.264 標準
壓縮攻擊。在每個 4 × 4 的 DCT 塊中，它採用一
對預測的  DCT 係數來嵌入浮水印 1 位元資
料。 DCT 係數的嵌入位置，是由一個預先定義的
低到高子帶來選擇，因此它可以保持更大的視訊
品質及根據預測的 DCT 方塊和當前 DCT 方塊結
果達到自我適應效果。 
嵌入過程的操作是很簡單容易的，嵌入的方法
是挑選在巨方塊中 16 個 4 × 4 塊的左上角的 3 × 3 
個 4 × 4 區塊，如在圖 7 所示，浮水印是隱藏在（2，
2）位置之方塊。 
 
圖 7 基於 H.264 編碼結構的浮水印編碼單元 
 
起初，左上角 3 × 3 塊，其中包括（1，1），（1，
2），（1，3），（2，1），（2，3），（3，1），
（ 3，2）和（3，3）是用來做（2，2）區塊的預
測和改變，以滿足嵌入規則來作隱藏數據。換句
話說，我們可以獲得預測（2，2）區塊的相鄰區
域，並利用它包括真正的（2，2）區塊，以滿足
嵌入條件。用 ),(),( nmC qp 來表示在一巨方塊內區
塊(p, q)的 DCT 系數，其中 1≦p≦4，1≦q≦4，
1≦m≦4 和 1≦n≦4。在 3 × 3 塊中， ),()2,2( nmC 係
數 是 可 以 藉 由 不 同 的 預 測 函 數 和 鄰 近 的
),()2,2( nmC 來預測，其中 1≦p≦3，1≦q≦3，但 p≠2
和 q≠2。其關係函數如下所示：  ),(),( ),()2,2( nmCfnmPC qp        (3) 
Wu 利用 7 種預測函數，來預測 ),()2,2( nmC 七個預
測函數描述如下： 
 
 函數 1： 
 8/),(),(                     
),(),(                     
),(),(                     
),(),(),)(1(
)3,3()2,3(
)1,3()3,2(
)1,2()3,1(
)2,1()1,1(
nmCnmC
nmCnmC
nmCnmC
nmCnmCnmPC




 (4) 
函數 2：   2/),(),(),)(2( )3,3()1,1( nmCnmCnmPC   (5) 
函數 3：   2/),(),(),)(3( )2,3()2,1( nmCnmCnmPC   (6) 
函數 4：   2/),(),(),)(4( )3,2()1,2( nmCnmCnmPC   (7) 
函數 5：   2/),(),(),)(5( )1,3()3,1( nmCnmCnmPC   (8) 
函數 6： 
 


  2/3/),(                     
),(),(                     
3/),(                     
),(),(),)(6(
)3,3(
)2,3()1,3(
)3,1(
)2,1()1,1(
nmC
nmCnmC
nmC
nmCnmCnmPC




 (9) 
函數 7： 
 


  2/3/),(                     
),(),(                     
3/),(                     
),(),(),)(7(
)3,3(
)3,2()3,1(
)1,3(
)1,2()1,1(
nmC
nmCnmC
nmC
nmCnmCnmPC




    (10) 
 
我們可以由公式(11)來計算由上面七個預測函數
 6
受的視覺失真內改進容量和強韌性。 文章中[11，
5]提出一些實驗結果，通常在在壓縮攻擊或嵌入資
料後會導致 intra 幀的預測模式改變。因此，設置
兩個閥值 coefT 確保嵌入的執行過程中，係數的數
量大於 coefT 以及另一個門檻值 blockT 。換句話說，
容量和視訊品質的失真量可由 coefT 和 blockT 來確
定及調整。  
半脆弱型 
這一類方法的強韌性是介於強大和脆弱之間
的，其抵禦攻擊和攻擊模式的能力是比強韌性的
弱。能抵禦的攻擊大部分屬於再壓縮，這種方法
在 H.264 的浮水印中是較為罕見的。 
 第一種半脆弱方法，藉由非零係數數量的變
化來嵌入資料，文獻[12]提出了基於 4x4DCT 區塊
的浮水印，利用了非零 AC 系數數量的奇偶關係來
嵌入資料。如果浮水印位元等於 1，非零 AC 係數
的數量必須是奇數。另外，浮水印位元等於 0 的
話，非零 AC 係數的數量應滿足規則，使係數的個
數為偶數。當嵌入的條件不存在的話，我們應該
刪除或添加一個係數，以滿足條件。 
此方法的一個優勢是，當系數數量減少時會
使得位元率下降，但刪除的係數過大或是係數的
數量過少時，視訊品質可能會下降急遽。以下虛
擬碼展示了藉由減少非零 AC 系數的數量來嵌入
浮水印位元。NumAC 和 W 代表非零 AC 係數數量
和浮水印位元，而 nAC 是最後一個非零 AC 係
數，其中 n 是 AC 係數的 zig-zag scan 順序。 
 
Embedding Algorithm 
Begin Embedding() 
if(numAC>0) 
{ 
  if(numAC !> w) 
{ 
  AC0 = 0; 
} 
} 
else if(numAC==0 && 
w==1) 
{ 
  AC0=1; 
} 
end if 
end Begin 
 
在特殊情況下，係數的數量是零，和嵌入條
件不能滿足時，我們必須添加 1 個係數到該區塊
中，以滿足嵌入條件。但根據 CAVLC 規則這種
方式將會增加編碼長度，因為區塊產生的係數和
在這區塊的 CAVLC 符號，其中包括了 Coeff_token
和 TrailingOnes_sign 都應被編碼。實驗結果顯示，
當被刪除的係數越多位元率和視訊品質的退化更
加嚴重，而在壓縮攻擊後，則能恢復大於 80％的
QCIF 格式測試視訊，大於 75％的 CIF 格式測試視
訊。雖然這種方法能抵抗重新壓縮攻擊，但當係
數的數量減少時不論是視訊品質和位元率都會降
低。權衡視訊品質和位元率之間的代價是不平等
的。 
第二種半脆弱方法，利用區塊的分類來做視訊
壓縮的驗證，[13]作者提出了用驗證的半脆弱浮水
印在視訊壓縮上，這是基於 DCT 轉換和嵌入資料
到每個 DCT 區塊內被選中的非零 AC 係數。為了
抑制失真提升，將輸入的幀分為 normal-block 和
flat-block，並根據一區塊的非零係數數量來預設閥
值。如果非零係數的數目超過閥值，區塊是
normal-block。相反，其他方塊被指定為 flat-block。
嵌入目標標示 normal-block 所選定的係數是和
flat-block 不同的，但採用的 LSB 嵌入方法是相同
的。因考慮到檢測過程的速度，嵌入的額外特徵
位元到一個額外的空間，稱為區塊分類位元，並
利用它來驗證當前區塊是否被篡改。在另一端，
為了保護嵌入區塊分類位元，位元串流會利用操
作區塊的分類位元來產生隨機數字。實驗結果表
示，所提出的方法可有效檢查有損壓縮的圖像和
視訊的驗證機制。 
 
2.4 脆弱型 
大多數的 H.264 浮水印方法是脆弱的，比起
強韌性和半脆弱，脆弱性的通常專注在位元率和
視訊品質上的效能表現。同時，為了檢視完整的
嵌入資料這種方法無法承受任何輕微的攻擊。然
而，這種方法通常是直覺，簡單和低複雜性的，
亦可適用於高複雜性應用。 
第一種脆弱方法[14]，是一種基可在 intra- 
prediction 上使用且不會造成 intra 幀的失真飄移，
其位元率和視訊品質效能都可優於其他現有方
法。失真飄移使的在 intra 或是 inter 視訊產生了嚴
重的退化，因此該作者考慮到這些造成失真飄移
的原因，並研究出避免這些點的數據隱藏方式。 
當前區塊的預測和相鄰區塊編碼的關系如圖
9 所示，其中 A~L 被編碼成 4 × 4DCT 區塊的左
上角，上，中，左，右上角的巨方塊。當編碼區
塊嵌入資料後，因為關系到參考的八種 intra 預測
模式所以失真會散播到目前的預測區塊。 
 
圖 9 intra 預測區塊和其相鄰的編碼區塊 
因此，為了防止失真漂移，他們提出了三個
條件，讓當前區塊可避免增加漂移。實際做法是
藉由最佳的 intra 預測模式，不隱藏那些會增加下
個區塊飄移的區塊，因此飄移不會被散播到下個
預測區塊。同時，嵌入的三個條件是不容易被滿
足的。嵌入/提取過程是採用在 4 × 4 的 DCT 區塊
 8
區塊。 
 
圖 10 浮水印嵌入過程 
當編碼器執行資料隱藏方法時，必須加以考慮失
真率，因此為了選擇最好的 intra 和 inter 模式，以
獲得最佳效能，必須考慮將嵌入方法整合到重建
環[4，17，19]中。換句話說，資料隱藏區需要在
重建環內部執行，或在 Rate Distortion Optimization
（RDO）的重建環內執行。否則因為編碼和解碼
器之間的預測飄移將嚴重影響位元率和視訊品
質。 
 在 H264/AVC 編碼中，RDO 有助於當前視訊
幀選擇最佳模式，並在品質失真和位元率之間折
衷得到最佳解。因此，我們的方法考慮 RDO，是
為了在嵌入視訊區塊資訊時，獲得更好的編碼效
能。圖 11 說明了在巨方塊級的嵌入過程，當一個
巨方塊進入編碼器端，編碼器會先決定它的編碼
模式，如果巨方塊是 inter 模式，編碼器會執行 inter
和 intra 預測並從其模式設置中來選擇最佳模式。
模式設置包括 PSKIP，P16× 16，P16× 8，P8× 16，
P8× 8，I4MB，I16MB 和 intra-frame pulse code 
modulation (IPCM)模式。如果當前巨方塊模式是
intra 模式下，編碼器進行 intra 預測模式設置只包
含 I4MB，I16MB IPCM 模式。 
我們所提出的方法是整合在編碼器裡的RDO程
序，當編碼器執行 RDO 程序時，它會同時選擇一
個最佳的編碼模式，和加入浮水印。這種模式可
能會因浮水印的加入，而產生不同的編碼模式。
但比起其他模式所選擇到的模式位元率和視訊品
質會是最好的。 
 
 
圖 11 在巨方塊級所提出的浮水印方法 
圖 12 更詳細說明如何在 RDCost 迴路內加入
浮水印，如前所述，我們專注在 intra 和 inter 的亮
度成分中隱藏資料，圖 12 指出在嵌入時不考慮
IPCM 和 Skip 模式。 
 
圖 12 提出的浮水印與 RDO 程序整合。 
  
圖  13 說 明 如 何 把 所 提 出 的 方 法 與
H.264/AVC 的解碼器整合，並在 H.264/AVC 的解
碼階段插入提取演算法。提取端可在熵解碼後的
DCT 區塊中執行。因為我們將崁入浮水印在 intra
和 inter 的 DCT 亮度區塊中，所以我們只需要在
DCT 的亮度區塊部份做取出動作就可。 
 
 
 10
Begin Embedding() 
   if(numT1>0)  
     ceoEnergy = getEnergy(DCTB) 
     if(ceoEnergy<Threshold) 
       W’=XorT1Polarity(T1set) 
       if(W’ != W) 
LastT1=getLastT1Index(DCTB)        
         ChangeSign(DCTB, LastT1) 
output DCTB’ 
       end if 
     end if 
   else if(numT1 == 0 && numLevel>1) 
          LastLevel = getLastLevIdex(DCTB) 
          ChangeLSB(DCTB, LastLevel, W) 
          Output DCTB’ 
   end if 
End 
 
第二部分，當非零係數的數量不為零，以及
T1 係數的數量為零時，則改變最後一個係數的
LSB 來隱藏數據，否則如果 levels 的數量和 T1s
為零的話，我們就不對他作嵌入。第一個方法的
優點是改變符號並不影響相同區塊的其他符號。
根據 CAVLC 規則，trailing_ones_sign_flag 指出，
T1 的符號會 NA 內被編碼成一個位元，如果符號
是負的會編碼成位元 1 ，相反的，如果 T1 是正的
就編碼成位元 0。因為我們只改變最後一個 T1 的
符號因此編碼區塊的編碼長度會根在作崁入程序
之前的長度相同。 
提取過程比嵌入較為簡單，浮水印的取出演
算法是在熵解碼跟反量化過程中進行。首先找出
當前 DCT 區塊所有的 T1s，接者計算 CED 的值，
如果 CED 的值小於閥值的話，我們就收集每個 T1
的所有極性值來做 XOR 運算，以獲得當 T1 數量
不為零時的浮水印位元。如果 T1 的數量為零和最
後一個係數存在的話，我們可以從最後一個係數
的 LSB 取出浮水印位元。如果係數的數量和 T1
係數為零，我們就不對其作任何事 
提取演算法的虛擬碼 
Extracting Algorithm 
Input: DCTB’  
Output: W 
Initialization:  
       T1set = getT1set(DCTB’) 
       numT1 = getTccount(T1set) 
       numLevel = getLevcount(DCTB’) 
Begin Extracting() 
   if(numT1>0) 
     coeEnergy = getEnergy(DCTB’) 
if(coeEnergy<Threshold) 
  W = XorT1Polarity(T1set) 
  output W 
     end if 
   else if(numT1 == 0 && numLevel >1) 
         LastLevel = getLastLevIndex(DCTB’)     
         W = getLSB(DCTB’, LastLevel) 
         output W 
   end if 
End 
 
 
3.2 可逆式浮水印方法 
本節我們提出一個基於直方圖位移(HS)的可
逆式的浮水印方法，藉由修改在 CALVC 領域中最
後 一 個 非 零 係 數 ， 來 嵌 入 浮 水 印 位 元 到
H.264/AVC 標準視訊中。我們提出的方法先收集
一個巨方塊內 4x4 子巨方塊的所有最後一個非零
係數(或稱作最後一個級別係數)，以及利用鄰近區
塊的最後一個級別係數來預測當前的最後一個級
別係數，根據此預測誤差，將浮水印位元嵌入當
前區塊的最後一個級別係數。這個方法的特色是
低運算和視訊壓縮品質的可逆能力，實驗結果顯
示，我們所提出的方法對於大多數的測試視訊，
其視訊品質和輸出位元率的退化都在可接受範圍
內。 
我們所提出的可逆式的浮水印方法，是一種
基於 HS，和利用每個 4x4DCT 區塊中所有的最後
一個級別係數，藉由區塊最後一個級別係數 c 和
所預測的級別係數 cˆ 的差值，來嵌入資料。如果
cˆ 相同於 c ，我們就崁入數據到 c 。否則，我們
就不對其做任何事。因 c 是來自先前所編碼的
DCT 區塊，所以很容易實現。 
首先介紹我們的嵌入演算法，在這部分我們
會展示嵌入方法的虛擬碼和解釋其中的細節。首
先，我們先定義些重要的參數:預測錯誤 e，這指
的是 c 和 cˆ 之間的差，如(29)所示。 
 
cce  ˆ          (29) 
 
 圖.15 說明 cˆ 和 c 之間的關係，首先座標
(0，0)的 c 是座標(0，1)或(1，0)的 cˆ 。座標(1，
1)的值是座標(0，1)和(1，0)的平均，水平邊界區
塊是利用左邊區塊的 c 作為 cˆ ，垂直邊界區塊是
利用上面的區塊。根據 HS 方法，當 cˆ 和 c 的差
值為零時，就將之作為峰點來隱藏數據。否則，
我們會藉由增加一或是減少一來位移該值。 
 
 12
Output: MB, W 
Begin Extracting() 
if(getDCTB(MB’) != NULL)  
PrelastLevel’ = getPrelastLevel(DCTB’, 
lastLevelTable) 
   lastLevel’= getLastLevel(DCTB’) 
   e = abs|lastLevel’ – prelastLevel’| 
   if(e == 0) 
{ 
 W = 0 
output W 
} 
else if(e == 1) 
{ 
lastLevel = lastLevel’ -1 
W = 1 
output W 
} 
else 
{ 
   setShiftBack(DCTB’) 
} 
end if 
end if 
output MB 
end Begin 
 
4. 研究結果與討論 
在這個小節中我們將會解釋研究方法所使用
的實驗環境、所測試的視訊格式、實驗結果、及
方法的效能分析。在實驗環境中，我們採用了
H.264/AVC joint model (JM) Reference software [24]
當作測試平台來實驗我們所提出的方法。表 4 呈
現了我們方法在 JM reference software 的實驗參
數，我們使用 JM software 12.2 版本。圖 16 所示
為實驗所要測試的五個視訊。表 5 為視訊的格式
資訊。藏入到測試視訊的秘密數據是一個亂數的
位元流，同時我們也設置了不同閥值，1、0.7、
0.35、0.1 和 0.05，來限制崁入規則。 
表 4 H.264/AVC codec 的實驗參數 
Parameter Information 
Profile IDC 66(baseline) 
Intra- period 15(I-P-P-P) 
Slice mode 0 
Frames to be encoded 300 
Motion Estimation scheme Fast Full Search 
Rate Control Disable 
 
 
表 5 測試視訊的格式參數 
Parameter Information 
Video format QCIF 
YUV format 4:2:0 
Frame Size 176×144 
Frame rate 30 fps 
 
(a) (b)
(c) 
(d) (e) 
圖 16 測試的視訊序列(a) Akiyo; (b) Foreman; (c) 
Hall; (d) Mobile; (e) News 
 
為了比較效能，我們使用三項指標來代表研
究方法的效能。第一，峰值訊噪比(PSNR)代表了
視訊品質，他是一種比較來源訊號以及受影響噪
訊的比例。第二，位元率，是將位元的數量轉換
或處理成每個單位時間用來量化表示視訊的每秒
位元數，第三，隱藏容量，是指有多少位元能盡
可能的被嵌入到視訊序列中。在視訊資料隱藏
中，大多數的研究都使用 PSNR 和位元率，做為
比較效能的主要指標。以視訊壓縮的觀點來看，
視訊編碼不應為了更多的隱藏空間而增加視訊大
小，及增加嵌入後視訊的失真。因此，一個好的
視訊浮水印在盡可能的增加嵌入空間時也應該保
持視訊品質和位元率接近或是與來源品質相似。 
 
4.1 有損型資料隱藏實驗結果 
在實驗中我們可以藉由增加嵌入限制來控制
在嵌入過程中的效率來獲得視訊品質或是位元率
的變化。但這也遇到了另一個問題。當閥值過小
時，效能也只會提高到一個飽和值。換句話說，
過小閥值的嵌入限制規則，對於退化的控制是有
限的。我們用圖 17(a)來說明其視訊品質和位元率
的結果。在圖 17(a)中，當閥值過小時，大多數只
修改在視訊中 DCT 區塊的 T1 符號，然而，這不
影響原有的程序，因為在這種情況下會修改區塊
中最後一個系數的 LSB。因此，當閥值過小時，
DCT 區塊用 T1 符號來隱藏會少於用 LSB 替換，
這表示位元率和視訊品質將會保持飽和。只有改
變區塊內最後一個系數的 LSB 並不會明顯影響位
元率與 PSNR。測試視訊的容量如圖 17(b)所示。 
 
 14
 
(b) 
 
(c) 
 
(d) 
 
(e) 
圖 20 比較我們的方法、Lin 和 Shahid 在不同 QP
下的位元率(a) Akiyo; (b) Foreman; (c) Hall; (d) 
Mobile; (e) News. 
 
 
(a) 
 
(b) 
 
(c) 
 
(d) 
 
(d) 
圖 21 Lin和 Shahid在不同QP下的 PSNR(a) Akiyo; 
(b) Foreman; (c) Hall; (d) Mobile; (e) News. 
 
藉由比較方法，雖然位元率和視訊品質的效
能較其他方法的平均值好，但位元率的上升比起
來源也更嚴重。在圖 20(a)到(e)，位元率的退化通
常增加至 50 – 100 kbits/s。因此，我們試著分析
造成在 P 幀中失真的原因，因為在 inter 預測中，
這個影響比起在 I 幀中，會越來越大和更加敏感。
在圖 22 (a)至(d)中，在 P 幀退化都來自那些利用改
變符號和置換 LSB 的崁入方法。為了要觀察在不
同 P 幀不同的 rdcost，我們可發現那些被稱作
“sign+LSB＂的綠線 rdcost，在 QP=19 或 31 時比
其他增加了 2。透過這個方法，會造成在嵌入資料
時，用改變符號這個方法會比用置換 LSB，導致
失真更多，以及當在低 QP 時 rdcost 會嚴重增加。 
在 Liao[16,18]和 Lin[17]，他們指出一個現
象，能藉由 CAVLC 符號控制位元率的增加。如果
T1s 的數量多於同一個 4x4DCT 區塊，編碼長度會
 16
縮的，其 PSNR 也相當接近。 
 
    (a) 
 
(b) 
圖 25 在不同 QP 下的 PSNR vs 位元率比較 (a) 
akiyo; (b) foreman. 
 
我們選擇 Chung 的方法[2]進行比較，因為他
們的方法跟我們的方法都一樣是基於 HS 演算
法，所以可用來與我們的方法做效能的比較。他
們的方法需要消耗很大的容量來嵌入視訊 MV 資
訊，因此，HS 的功能只適合應用在錯誤隱藏領域
中。為了減少因嵌入 DCT 係數所導致的品質退
化，包括 DC 的前三個係數，不在嵌入的考慮範圍
中，剩餘的 12 個係數皆可嵌入資料，但是這 12
個係數仍還有相當高的能量，利用他們來做位移
或是嵌入資料，仍造成更大的失真。 
 我們使用 akiyo 和 foreman 測試視訊為例，比
較 Chung 的方法與我們的方法之間的差別。圖 25 
(a)-(b)說明了在原始的方法，我們的方法以及
Chung 的方法之間的位元率對失真效能曲線。我們
可以發現視訊品質或位元率的效能都較 Chung 方
法來的好，因為我們提出的方法只修改每個 DCT
區塊的最後一個級別係數。而 Chung 的方法位移
了相當大的係數數量來嵌入資料，這會使得效能
的退化增加。 
 
5. 結論與自評 
本計畫研究發展兩種不同類型脆弱型的
H.246/AVC 視訊浮水印方法，提供視訊內容安全
驗證、秘密通訊、視訊內容標記、及視訊接收後
處理等相關應用。計畫的主要目的之一，是希望
達到資料隱藏對於「編碼位元率對失真」效能影
響程度最小化，而研究 H.246/AVC 編碼器後端
CAVLC 碼字特性，因應如何配合隱藏資料。本計
畫執行後，所獲得之技術成果整理條列如下： 
 開發一有損型資料隱藏方法，此方法是利用
Trailing one（T1）的極性值，和 CAVLC 符
號裡的 G - LSB 方法來嵌入資料，來獲得更
好的效能，根據 CAVLC 的特性，在目前
的 DCT 塊中增加 T1 的數量，且係數的數量
是不變的，可以減少該區塊編碼的長度。這
種方法不僅具有很大的品質，位元率和隱藏
能力，也有能力限制編碼退化情況。 
 開另一種可逆式資料隱藏方法，此方法使用
最後非零係數（或稱為 last level coefficient）
與鄰近方塊最後非零係數的預測誤差，採用
直方圖位移來嵌入浮水印位元。此方法計算
簡單且俱備視訊品質可逆的恢復能力。 
 這些方法的最主要特徵是，即使在加入這些
特殊用途資料於 H.246/AVC 視訊中，不會
破壞 H.246/AVC 的標準視訊格式。 
 建立一套視訊浮水印的實驗軟體環境，可被
利用做為後續開發相關應用的雛型。 
 發表至少兩篇學術論文，並於國際研討會公
開發表。 
經過一年的計畫執行後，除了獲得上述的技
術成果外，同時也因為碩士生、及大專生的參與
協助，因而培訓國內在 H.246/AVC 視訊標準的高
級人才，對於國內視訊相關產業注入一些工程師
生力軍。長久以來，要訓練能夠俱備標準編解碼
程式開發及視訊/影像壓縮演算法的人才，需要注
入長久的時間與精力，因此非常盼望國科會能夠
持續有此類的專題計畫，協助學校培養實務的研
發人才。 
 
參考文獻 
[1] W. N. Lie, Tom C. I. Lin, D. C. Tsai, and G. S. 
Lin, “Error Resilient Coding Based on 
Reversible Data Embedding Technique for 
H.264/AVC Video,” Proc. of IEEE 
International Conference on Multimedia & 
Expo, ICME, July 2005. 
[2] K. L Chung, Y. H. Huang, P. C. Chang, and H. 
Y. M. Liao, “Reversible Data Hiding Based 
Approach for Intra- Frame Error Concealment 
in H.264/AVC,” IEEE Trans. Circuits and 
Systems for Video Technology, Vol. 20, No. 
11, pp. 1643-1647, November, 2010. 
[3] X. Zeng, Z. Cehn, M. Chen, and Z. Xiong, 
“Reversible Video Watermarking Using 
Motion Estimation and Prediction Error 
Expansion,” Journal of information science and 
engineering, Vol. 27, pp. 465-479, 2011. 
[4] X. Zeng, Z. Chen, and Z. Xiong, “Issues and 
Solution on Distortion Drift in Reversible 
Video Data Hiding,” Multimedia Tools. pp. 
465-484, 2011. 
[5] M. Noorkami, and R. M. Mersereau, “A 
Framework for Robust Watermarking of 
H.264-Encoded Video with Controllable 
Detection Performance,” IEEE Trans. on 
表 Y04 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                           100 年 7 月 31 日 
報告人姓
名 
林易泉 
 
服務機構
及職稱 
國立虎尾科技大學資工系副教
授 
 
 
     時間 
會議 
     地點 
99 年 7 月 13 日~7 月 15 日
阿姆斯特丹 荷蘭 
本會核定
補助文號
NSC 99-2221-E-150-068- 
會議 
名稱 
 (中文)ICECECE 2011 國際電機、電腦、電子及通訊工程研討會 
 (英文) ICECECE 2011 International Conference on Electrical, Computer, 
Electronics & Communication Engineering  
發表 
論文 
題目 
 (中文)H.264/AVC 視訊可逆浮水印 
 (英文) Reversible watermarking for H.264/AVC videos 
  
一、參加會議經過 
這次出國參與國際研討會是前往位於歐洲著名的國家荷蘭，由 WASET 組織所舉
辦 ICECECE2011 國際研討會，會議地點距離阿姆斯特單約需半小時車程的郊區
Naarden NH hotel 飯店舉行。當地氣候與台灣的酷暑高溫季節截然不同，一底達
荷蘭就感覺天氣陰涼，甚至遇到大風大雨的冬天類型天候，有點難以適應，還好
大會安排的室內環境舒適，可暫時忘記戶外的陰雨天候。研討會於當地時間 7 月
13 日開始舉行，每天早上大會皆安排兩間不同主題論文發表場次。與會人員穿梭
於會場聆聽各論文發表，同時與來自不同國家學者專家非正式交流討論，汲取多
元的研究主題、方法與應用領域。雖然天氣經常陰雨綿綿，偶而天空也會暫時露
出太陽，照耀美麗的飯店戶外草地，許多學者也會移師戶外，在溫暖陽光底下進
行交流互動。 
大略觀察此次與會的學者的國籍，發現除了有來自歐美國家學者外，有許多來
自中東產油國家的學者，同時也有學者來自巴基斯坦、印度、印尼、泰國等國家。
此次本人的論文安排於 15 日上午場次第二篇發表，與該場次的聽眾及其他發表者
互動。雖然本人的發表論文主題是有關影像訊號處理方面的浮水印方法，但卻有
其它論文作者與我討論平行計算問題，相當有趣。除了論文發表以外，也偶遇來
自台灣醫學檢驗學者與會，並隨意進行長達一個早上的非正式研究主題討論，一
起探討軟體訊號處理技術與醫學檢驗自動化的應用現況與挑戰。在這場討論中，
學習到許多檢驗方面的使用需求，並分析軟體訊號處理技術的應用可行性及可能
的解決方案，獲益匪淺。 
 
表 Y04 
火車到歐洲各國參觀，去發現歐洲的各種人文、資通訊應用於生活的普及情況，
及增廣不少見聞。 
 
四、建議 
對於國科會能經費支援補助國內學者參與這樣的國際盛會，並讓國內學者至其它
國家走動，實地瞭解國際上在學術活動的努力，表示感謝。 
 
五、攜回資料名稱及內容 
會議論文資料，並帶回期刊徵稿與投稿資訊。 
 
六、其他 
無 
 
 
 
  
better coding performance while embedding the data into the 
video sequence [1], [4]. The data hiding method in our 
proposed method is done on luminance DCT blocks in both 
intra and inter modes for AC component, not considering for 
skip and IPCM (intra-frame pulse code modulation) block 
types. The DCT blocks of chrominance are not considered in 
our method. The extracting phase can be done in DCT blocks 
after entropy decoding and we need only to do extract on the 
luminance part of DCT blocks. 
B. Embedding algorithm 
In this sub-section, we will show the pseudo code for the 
embedding method and explain them in details. At firstly, we 
define the important parameter: predication error e, that means 
the difference of cl and clˆ , and is shown as (1) 
cceerrornpredicatio ll ˆ  −=                                                    (1) 
 Fig.1 illustrates that the relationship of clˆ  and cl , the 
position (0, 0) of cl  is the clˆ  to the position of (0, 1) or (1, 0) 
firstly.  The position (1, 1) is the average value of the position 
of (0, 1) and (1, 0), and the horizontal edge block is utilizing the 
left block of cl  be the clˆ , the vertical edge block is utilizing 
the up block. According to the HS method, when the difference 
value of clˆ  and cl  is zero, we as it are the peak point to hide 
data. Otherwise, we shift the value by adding one or subtracting 
one.  
 
Fig.1 prediction pattern for the last level coefficients 
                     
The data is embedding into the difference which equals zero, 
and we can extract the data if the difference is equals zero or 
one in decoder. The embedding formula shows as (2), and w is 
watermark bit. 
 
⎩⎨
⎧
<
>+
⎪⎩
⎪⎨
⎧
+
<=−
>=+
=
01
01
00
00
, if x-
, if x
n(x),where sig
)sign(
 and w, if e
 and w, if e
cc
cc
cc
'
c
ll
ll
ll
l (2)                                                
In Table I, we define the notations and the functions to be 
used in the pseudo codes. These functions often refer to the 
DCT block or the set of last levels to get the information of 
DCT block or coefficients. 
One macro blocks have 16 4×4 DCT block, we will utilize 
each last level of 4×4 DCT block for embedding except the 
position (0, 0) of DCT block due to it doesn’t have reference 
block to get predication last level. Therefore, the number of 
DCT blocks will be possess by embedding procedure is 15. At 
embedding procedure firstly, the process order of DCT block is 
left to right and top to bottom. If the cl  is not equal to clˆ , we 
only shift the cl . Otherwise; we embed data into cl . The 
predication error e can be as peak point of HS to embed data, so 
most of last level which not satisfy the embedding condition 
should be shifted. After embedding procedure, the new last 
level of coded block will replaced original last level to provide 
later DCT block using. The detail of embedding algorithm can 
see the pseudo code. 
TABLE I  
THE SYMBOL AND FUNCTION EXPLANATION 
Notations  or Functions Definition 
MB Macro block 
MB’ Macro block after embedding 
DCTB A  4x4 DCT block 
DCTB’ 
A  4x4 DCT block after 
embedding 
W Watermark bit, W = {0,1} 
lastLevel The last level in current block 
e Predication error 
lastLevelTable Record all last level of each 4x4 
DCT block in current macro block 
getPrelastLevel(DCTB, 
lastLevelTable) 
Get the predication last level of 
current DCTB 
getLastLevel(DCTB) Get the last nonzero level from 
DCTB 
setShifting(DCTB) Shifting the last level from DCTB 
setShiftBack(DCTB’) Shifting back the last level from 
DCTB 
getDCTB(MB) Get the 4x4 DCT block from the MB 
getWatermarking(lastLevel) Retrieve the embedded data 
abs(Value) Getting the absolute value for argument parameter value 
 
THE  PSEUDO CODE FOR EMBEDDING ALGORITHM 
Embedding Algorithm 
Input: MB 
Output: MB’ 
Begin Embedding() 
if(getDCTB(MB) != NULL)  
PrelastLevel = getPrelastLevel(DCTB, lastLevelTable) 
        lastLevel      = getLastLevel(DCTB) 
        e = abs|lastLevel – prelastLevel|  
        if(e == 0) 
{ 
   If(lastLevel>0) 
{ 
    lastLevel’  = lastLevel+w 
} 
else if(lastLevel<0) 
{ 
   lastLevel’  = lastLevel-w 
} 
  end if 
} 
else if 
{ 
      setShifting(DCTB) 
} 
end if 
end if 
output MB’; 
end Begin 
 
World Academy of Science, Engineering and Technology 78 2011
829
  
 
(a) Compressed                     (b) Watermarked    
Fig.3 Comparison of video quality for akiyo (a) Compressed, 
PSNR=45.07 dB; (b) Watermarked, PSNR=44.729 dB 
 
Fig.3 (a)-(b) illustrate the original video, compressed video, 
marked compressed video by our method and recovery video in 
10th P frame of akiyo with medium QP 19. Because of H.264 
Compression performance, the compressed video can keep 
high quality and low bit-rate. Comparison of quality between 
compressed and embedded, we can observe that the quality 
after embedding data is similar to compressed, and the PSNR is 
near.  
C. Comparison with other method 
 
(a)  
 
 (b)  
Fig.4 Comparison in terms of PSNR vs bit-rate at varying QP. (a) 
akiyo; (b) foreman 
 
We select Chung’ method [9] which is same with our method 
is based on HS algorithm to comparison the performance. Their 
method is need high capacity to embed MV, so the feature of 
HS is just suitable for them to application in error concealment 
domain. To reduce quality degradation caused by embedding 
into DCT coefficients, the first three coefficients which 
included DC component are not considered in the embedding 
process. The remaining twelve coefficients still occupies a lot 
of high-energy, and utilizing them to shift for embedding data. 
This will still cause considerable distortion than general 
watermark methods. 
We take akiyo and foreman as experimental target to 
compare with Chung. Fig.4 (a)-(b) illustrate that performance 
between original, our proposed method and Chung. We can 
found that our performance of video quality or bit-rate is 
greater than Chung, because our proposed method only 
modified the last level for each DCT block, the Chung’s 
method shift the considerable quantities of coefficients to 
embedding data and it will caused more degradation in 
performance. 
IV. CONCLUSIONS 
In this paper, we propose a reversible data hiding algorithm 
that has considered the rate distortion performance for 
H.264/AVC standard. Although the method can not provide 
good efficiency in video quality and bit-rate, it is able to reach 
the reversible. At the same time, we understand that applying 
tradition reversible method to video compression domain 
directly is not suitable by comparison with Chung. In order to 
reduce the degradation of hiding modification, the information 
is hided in the last level symbols of CAVLC domain in 
H.264/AVC encoder.  
REFERENCES 
[1] Y. C. Lin and J. H. Li, ”Data Hiding with Rate-Distortion Optimization on 
H.264AVC Video” , in Pro. 23th IPPR Conf. on Computer Vision, 
Graphics, and Image Processing, CVGIP. Aug. 15-17, 2010. 
[2] S. D. Lin, C. Y. Chuang, and M.J. Chen, “A Watermarking Scheme by 
Changing the Number of Nonzero Coefficients in H.264/AVC Encoder”, 
in Pro. 22th IPPR Conference on Computer Vision, Graphics, and Image 
Processing, CVGIP. Aug. 23-25, 2009. 
[3] C. C. Wang, Y. C. Hsu, “A Fragile Watermarking Scheme for 
H.264/AVC Video Authentication,” Optical Engineering, vol. 49, (2), 
027003-1, Feb 2010. 
[4] Z. Shahid, M. Chaumont and W. Puech, “Considering the Reconstruction 
Loop for Data Hiding of Intra and Inter Frames of H.264/AVC”, in Pro. 
European Signal Processing Conf., EUSIPCO 2009. 
[5] X. Huang, Y. Abe, and I. Echizen, “Capacity Adaptive Synchronized 
Acoustic Steganography Scheme”,  Journal of Information Hiding and 
Multimedia Signal Processing, vol. 1, no. 2, pp. 72-90, Apr, 2010. 
[6] J. Tian, “Reversible data embedding using a difference expansion,” IEEE 
Trans. on Circuits and Systems for Video Technology, vol. 13, no. 8, 
pp.890-896, 2003. 
[7] Z. Ni, Y. Q. Shi, N. Ansari and W. Su, “Reversible data hiding,” IEEE 
Trans. on Circuits and Systems Video Technology, vol. 16, no. 3, pp. 
354-362, 2006. 
[8] W. N. Lie, Tom C. I. Lin, D. C. Tsai, and G. S. Lin, “Error Resilient 
Coding Based on Reversible Data Embedding Technique for H.264/AVC 
Video,” in Proc. of IEEE International Conf. on Multimedia & Expo, 
ICME, July 2005. 
[9] K. L Chung, Y. H. Huang, P. C. Chang, and H. Y. M. Liao, “Reversible 
Data Hiding Based Approach for Intra Frame Error Concealment in 
H.264/AVC,” IEEE Trans. Circuits and Systems for Video Technology, 
Vol. 20, No. 11, pp. 1643-1647, November, 2010. 
[10] Iain E. G. Richardson, “H.264 and MPEG-4 Video Compression,” John 
Willy & Sons Ltd, 2003. 
[11] K. Sühring, H.264/AVC Reference Software Group [On-line]. Available: 
http://iphome.hhi.de/suehring/tml/, Joint Model 12.2 (JM12.2), Jan. 2009. 
 
World Academy of Science, Engineering and Technology 78 2011
831
99 年度專題研究計畫研究成果彙整表 
計畫主持人：林易泉 計畫編號：99-2221-E-150-068- 
計畫名稱：H.264/AVC 視訊位元率與失真最佳化之可逆資料隱藏演算法 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 1 100 100% 由此計畫單獨完成之成果 
研討會論文 1 100 100% 
篇 
由此計畫單獨完
成之成果 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 4 100 100% 由此計畫單獨完成之成果 
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 100 100% 由此計畫單獨完成之成果 
研究報告/技術報告 0 0 100%  
研討會論文 1 100 100% 
篇 
由此計畫單獨完
成之成果 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100 字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100 字為限） 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
本計畫研究發展兩種不同類型脆弱型的 H.246/AVC 視訊浮水印方法，提供視訊內容安全驗
證、秘密通訊、視訊內容標記、及視訊接收後處理等相關應用。計畫執行後，所獲得之成
果整理條列如下： 
1.開發一有損型資料隱藏方法，此方法是利用 Trailing one（T1）的極性值，和 CAVLC
符號裡的 G - LSB 方法來嵌入資料，來獲得更好的效能，根據 CAVLC 的特性，在目前的
DCT 塊中增加 T1 的數量，且係數的數量是不變的，可以減少該區塊編碼的長度。這種方法
不僅具有很大的品質，位元率和隱藏能力，也有能力限制編碼退化情況。 
2.開另一種可逆式資料隱藏方法，此方法使用最後非零係數（或稱為 last level 
coefficient）與鄰近方塊最後非零係數的預測誤差，採用直方圖位移來嵌入浮水印位元。
此方法計算簡單且俱備視訊品質可逆的恢復能力。 
3.這些方法的最主要特徵是，即使在加入這些特殊用途資料於 H.246/AVC 視訊中，不會破
壞 H.246/AVC 的標準視訊格式。 
4. 建立一套視訊浮水印的實驗軟體環境，可被利用做為後續開發相關應用的雛型。 
5. 發表至少兩篇學術論文，並於國際研討會公開發表。 
6. 經過一年的計畫執行後，除了獲得上述的技術成果外，同時也因為碩士生、及大專生
的參與協助，因而培訓國內在 H.246/AVC 視訊標準的高級人才，對於國內視訊相關產業注
入一些工程師生力軍。長久以來，要訓練能夠俱備標準編解碼程式開發及視訊/影像壓縮
演算法的人才，需要注入長久的時間與精力，因此非常盼望國科會能夠持續有此類的專題
