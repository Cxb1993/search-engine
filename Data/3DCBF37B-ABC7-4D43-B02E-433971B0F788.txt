2previous and the current job, the setup is
sequence dependent. Specifically, the
research considers the family SDST problem
in this study. There is some research
discussing the problem in the scheduling
literature.
Neale and Duenyas (2003) discussed the
control of a single batch processing machine
with random arrivals, random processing
times, and compatible job families. They
presented a heuristic approach to minimize
the long-run average time that jobs spent in
the system. Mark and Van (1999) considered
the problem of allocating a single server to
families of jobs with random service times
and due dates. They used simple sequencing
rules to minimize expected weighted flow
time, expected maximum lateness, and total
weighted tardiness. Balasubramanian et al.
(2004) developed two different versions of a
genetic algorithm to minimize the total
weighted tardiness on parallel batch
machines with incompatible job families. In
order to solve the general scheduling problem
with more than two families, Manson and
Anderson (1991) employed a
branch-and-bound algorithm to minimize the
weighted flow time. Gupta (1988) also
developed a dynamic programming algorithm
to find a smaller mean flow time schedule.
Ahn and Hyun (1990) presented two heuristic
methods to solve the same problem.
2. Notation and problem setting
The following notation will be used
throughout this study:
n = number of jobs for processing at time
zero.
jJ = job number j.
jB = batch number j.
iV = ith maintenance.
jp = processing time of job j.
jd = due date of job j.
jC = completion time of job j.
kjS , = setup time from job j to job k.
jL lateness of job j, where jjj dCL  .
jT tardiness of job j, where
 jj LT ,0max .
 jj TT maxmax  .
jf = family number j.
In addition, jJ denotes the job in the jth
position, and jB ,   ,,, jjj Cdp jT and
 kjS , are defined accordingly.
This study presents a deterministic model
of a single-machine problem where SDST
jobs and maintenances are scheduled under a
resumable case. Once a processing job is
interrupted due to maintenance (i.e., a split
job) the work done on the job is not lost so
that the operations of the job can be
continued when the machine becomes
available. It is noted that the job will be
resumed without the setup if it is already
installed. This study assumes that the total
processing time is not changed for this job.
Further, if a setup time is interrupted due to
maintenance (i.e., an interrupted setup), the
setup time will increase 2 hours and the
operations of the setup can be continued
when the machine resumes. This is because
the setup requires workers to clean the
machine and more cleaning is needed when
the production line is started. In this research,
we also assume that a work stretch is 120
hours and each maintenance period is 48
hours. The problem under consideration is to
find a schedule that minimizes the maximum
tardiness.
3. The proposed heuristic
In this section, a heuristic is developed
to provide a near-optimal solution. This
study has the following theorem that will be
used in the heuristic.
Theorem 1
Denote by aJ and bJ the first job and the
last job of a partial schedule , respectively.
Consider a schedule
,,,( il JVS  ,mV kj JJ , ), where kT is the
maximum tardiness of the schedule. Suppose
that the tardiness of each job in  is smaller
than or equal to jT . Let
'S be obtained from
4(iii) Check whether moving the
job with interrupted setup to
the potential position can
obtain a smaller maxT value.
Step 10: Stop.
4. The branch-and-bound algorithm
For a partial schedule, the lower bound
of maximum tardiness, denoted by maxT , is
calculated based on a completion of the
partial schedule. The complete schedule is
produced by sequencing the rest of the
remaining jobs according to the following
rules:
(a) Generate a batch by grouping a
set of jobs with the same family.
Repeat by grouping the remaining
jobs to form other batches.
Sequence the jobs in each batch
in EDD order. If two jobs have
the same due date, place the job
with smaller processing time in
the front.
(b) Let pJ be the last job in the
partial schedule. Arrange the
batch whose family is the same as
pJ first. The rest of the batches
are arranged in the schedule
obtained by a traveling salesman
solution algorithm.
Now, the steps are stated as follows:
Step 1: Initialization. The solution of the
heuristic is used as the initial
incumbent solution of the
algorithm.
Step 2: Branching. Select a partial schedule
with the smallest maxT value
among all unfathomed partial
schedules. Let iJ be the last job
of the partial schedule. Produce
new partial schedules by placing
each of the unscheduled jobs in
position 1i . It is noted that if the
completion time of the job is larger
than 120 hours, the unfinished part
of the setup or the job processing
time is scheduled at the first
position of the next work stretch,
48 hours should be added to the
completion time of the job. If the
setup time of the job is interrupted,
the setup time will increase 2 hours.
Step 3: Bounding. For each newly created
partial schedule, calculate maxT by
using the proposed scheme stated
earlier.
Step 4: Fathoming. Fathom those newly
created partial schedules whose
maxT values are no better than that
of the incumbent schedule. Update
the incumbent schedule if a new
partial schedule has a smaller maxT
value.
Step 5: Stop. If there are partial schedules
remaining unfathomed, go to Step 2;
otherwise, stop.
5. Computational results
The effectiveness of the proposed
heuristic is compared with the optimal
schedules obtained by the B&B algorithm
developed in this study. Both the heuristic
and the B&B algorithm were coded in Visual
BASIC and run on an Intel P4/2.8GHz. For
each test problem, the processing times were
randomly generated from a discrete uniform
(DU) distribution of integers between 1 and
40. The setup times were randomly selected
from a DU of integers between 1 and 30. The
due date of kJ was generated from another
DU over [ )2/1( QC   )(
1
,1


n
k
kkk Sp ,
)2/1( QC   )(
1
,1


n
k
kkk Sp ], with
restriction  0kd , where Q and C denote
the due date range and tardiness factor,
respectively. The experimental procedure
consists of a full factorial design with two
settings of Q )6.0,2.0( Q and two
settings of C )6.0,2.0( C . For
convenience, the four combinations 2.0C ,
2.0Q ; 2.0C , 6.0Q ; 6.0C ,
2.0Q ; and 6.0C , 6.0Q are
referred to as data set I, II, III, and IV,
respectively.
