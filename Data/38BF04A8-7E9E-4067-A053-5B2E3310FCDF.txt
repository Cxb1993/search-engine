（一） 中文摘要: 
顆粒計算為資訊處理中新興的典範。使用顆粒計算的方法進行資訊處理的過程稱為顆粒資
訊處理。本計畫主要針對顆粒計算在資訊處理與資料探勘的應用上進行研究，三年的研究
成果包括以下各點： 
   我們結合函數資訊系統與關聯資訊系統成為混合資訊系統，並探究以混合資訊
系統為基礎之分割理論及其應用。首先，我們從代數的觀點來徹底研究函數資
訊系統與關聯資訊系統之間的關係。我們定義了以關聯資訊為基礎的不可區分
關係，並以此種關係來開展以混合資訊系統為基礎之分割理論。 
   關聯資訊系統之顆粒分析與社交網路結構分析中之正規等價概念，有密切的關
係。我們將正規等價的概念擴充到模糊社交網路上。我們利用正規等價的兩種
定義加以一般化，分別得到正規相似性與一般化正規等價的定義，其中前者為
一種模糊關係而後者為一種明確關係。我們同時探索這兩者的相關性質。 
   我們證明顆粒資料模型可以作為一般資料模型的正規模型，並由此推導出將頻
繁型樣探勘化約為解不等式的方法。 
關鍵詞：顆粒資訊處理，粗略集合論，社交網路分析，正規等價，顆粒資料模型 
（二） 英文摘要: 
Granular computing (GrC) is an emerging paradigm of information processing, and its 
application in this field is called granular information processing. This project is to explore the 
applications of GrC to information processing and data mining. We have achieved the following 
results in the past three years: 
 We present a theory of granulation based on hybrid information systems (HIS), which 
combine functional information systems (FIS) and relational information systems (RIS). We 
study the relationship between FIS and RIS. We also define the indiscernibility relation 
based on relational information, and use it to develop a theory of granulation based on HIS. 
 We generalize the notion of regular equivalence in social network analysis to fuzzy graphs 
based on two alternative definitions of regular equivalence. This leads to the definitions of 
regular similarity and generalized regular equivalence. The regular similarity is a fuzzy 
binary relation that specifies the degree of similarity between nodes in the graph, whereas 
generalized regular equivalence is an equivalence relation that can determine a crisp 
partition of the nodes in a fuzzy graph. 
 We show that a granular data model can act as a canonical model of a class of isomorphic data 
models. Consequently, the mining of frequent patterns can be transformed into an inequality 
constraint satisfaction problem. 
Keywords：Granular information processing, rough set theory, social network analysis, regular 
equivalence, granular data model 
（三） 報告內容簡述: 
本報告之主體以計畫執行中主要的三項成果所發表的論文為主，今分別簡述如下： 
 顆粒計算為資訊處理中新興的典範。使用顆粒計算的方法進行資訊處理的過程稱為顆
2
即將發表。此一期刊論文為本報告內容的第三部份。 
（四） 報告內容： 
1. T.F. Fan, C.J. Liau, D.R. LIu, and G.H. Tzeng, "Granulation based on hybrid 
information systems," Proceedings of the 2006 IEEE International Conference on 
Systems, Man, and Cybernetics, pages 4768-4772, Taipei, Taiwan, October 2006. 
2. T.F. Fan, C.J. Liau, and T.Y. Lin, "A theoretical investigation of regular equivalences 
for fuzzy graphs," International Journal of Approximate Reasoning, volume 49, 
pages 678-688, 2008. 
3. T.F. Fan, C.J. Liau, and D.R. Liu, " A logical formulation of the granular data 
model,” to appear in Int. J. Granular Computing, Rough Sets and Intelligent 
Systems. 
4
TABLE I
AN FIS FOR THE REVIEWS OF 10 PAPERS
U \A o p t d
1 4 4 3 4
2 3 2 3 3
3 4 3 2 3
4 2 2 2 2
5 2 1 2 1
6 3 1 2 1
7 3 2 2 2
8 4 1 2 2
9 3 3 2 3
10 4 3 3 3
• fi : U → Vi describes the transaction details of item i
such that fi(tid) is the quantity of item i purchased in
the transaction tid.
Example 2: We draw an example from multicriteria deci-
sion analysis (MCDA) as a running example in this paper [7].
Assume that Table I is the summary of the reviews of ten
papers submitted to a journal. The papers are rated according
to four criteria:
• o: originality,
• p: presentation,
• t: technical soundness, and
• d: the overall evaluation (the decision attribute)
Thus, in this FIS, we have
• U = {1, 2, · · · , 10},
• A = {o, p, t, d},
• Vi = {1, 2, 3, 4} for i ∈ A, and
• fi as specified in Table I
Though much information associated with individual objects
is given in a functional form, it is sometimes more natural
to represent information about objects in a relational form.
For example, in a demographic database, it is more natural to
represent the parent-child relationship as a relation between
individuals, instead of an attribute of the parent or the child.
In some cases, it may be even necessary to represent relational
information simply because the exact values of some attributes
are not available. For example, we may not know the exact
ages of two individuals, but we do know which one is
older. Based on these considerations, an alternative kind of
information system, called a relational information system, is
proposed in [8].
Definition 2: A relational information system (RIS) is a
quadruple
Tr = (U,A, {Hi | i ∈ A}, {ri | i ∈ A}),
where
• U is a nonempty set, called the universe,
• A is a nonempty finite set of primitive attributes,
• for each i ∈ A, Hi is the set of relational indicators for
i, and
• for each i ∈ A, ri : U × U → Hi is a total function.
A relational indicator in Hi is used to indicate the extent
or degree to which two objects are related according to the
attribute i. Thus, ri(x, y) denotes the extent to which x is
related to y by the feature i. When Hi = {0, 1}, then, for any
x, y ∈ U , x is said to be i-related to y iff ri(x, y) = 1.
Example 3: Continuing with Example 2, assume that the
reviewer is asked to compare the quality of the ten papers,
instead of assigning scores to them. Then, we may obtain an
RIS Tr = (U,A, {Hi | i ∈ A}, {ri | i ∈ A}), where U and A
are defined as in Example 2, Hi = {0, 1}, and ri : U × U →
{0, 1} is defined by
ri(x, y) = 1⇔ fi(x) ≥ fi(y)
for all i ∈ A.
III. THE RELATIONSHIP BETWEEN INFORMATION
SYSTEMS
In this section, we review the relationship between FIS
and RIS described in [8]. We first introduce the notion of
information system morphism (IS-morphism).
Definition 3:
1) Let Tf = (U,A, {Vi | i ∈ A}, {fi | i ∈ A}) and T ′f =
(U ′, A′, {V ′i | i ∈ A′}, {f ′i | i ∈ A′}) be two FIS; then,
an IS-morphism from Tf to T ′f is a (|A| + 2)-tuple of
functions
σ = (σu, σa, (σi)i∈A)
such that σu : U → U ′, σa : A → A′, and σi : Vi →
Vσa(i) (i ∈ A) satisfy
f ′σa(i)(σu(x)) = σi(fi(x)) (2)
for all x ∈ U and i ∈ A.
2) Let Tr = (U,A, {Hi | i ∈ A}, {ri | i ∈ A}) and T ′r =
(U ′, A′, {H ′i | i ∈ A′}, {r′i | i ∈ A′}) be two RIS; then,
an IS-morphism from Tr to T ′r is a (|A| + 2)-tuple of
functions
σ = (σu, σa, (σi)i∈A)
such that σu : U → U ′, σa : A → A′, and σi : Hi →
Hσa(i) (i ∈ A) satisfy
r′σa(i)(σu(x), σu(y)) = σi(ri(x, y)) (3)
for all x, y ∈ U and i ∈ A.
3) If all functions in σ are 1-1 and onto, then σ is called
an IS-isomorphism.
An IS-morphism stipulates the structural similarity between
two information systems of the same kind. Let T and T ′ be
two such systems. Then, we write T ⇒ T ′ if there exists an
IS-morphism from T to T ′, and T ' T ′ if there exists an
IS-isomorphism from T to T ′. Note that ' is an equivalence
relation, whereas ⇒ may be asymmetrical. Sometimes, we
have to specify the properties of an IS-morphism. In such
cases, we write T ⇒p1,p2 T ′ to denote that there exists an
IS-morphism σ from T to T ′ such that σu and σa satisfy
properties p1 and p2 respectively. In particular, we need the
notation T ⇒id,onto T ′, which means that σu is the identity
6
The commutative diagram of the corollary is as follows:
Tf
B
> Tr
T ′f
'
B
> T ′r
'
As shown in Example 5, an RIS may contain summarized
information of an FIS. Thus, an RIS can serve as a tool for
information summarization. If Tf B Tr, then the information
in Tr is less specific than that in Tf , i.e., the information is
reduced. If as much information as possible is kept during
the reduction, the embedding is called a trivial embedding.
Formally, a trivial embedding from Tf = (U,A1, {Vi | i ∈
A1}, {fi | i ∈ A1}) to Tr = (U,A2, {Hi | i ∈ A2}, {ri |
i ∈ A2}) is an embedding ε = ((Bi, Ri))i∈A2 such that each
Ri is a 1-1 function. Tr is called a trivial embedment of Tf
if there exists a trivial embedding from Tf to Tr. A trivial
embedment plays a role like that of initial algebra [13] in a
class of RIS with the same attributes. This is shown in the
next theorem, which easily follows from the definitions.
Theorem 2: Let Tf = (U,A1, {Vi | i ∈ A1}, {fi | i ∈
A1}), Tr = (U,A2, {Hi | i ∈ A2}, {ri | i ∈ A2}), and
T ′r = (U,A2, {H ′i | i ∈ A2}, {r′i | i ∈ A2}) be information
systems. If ε = ((Bi, Ri))i∈A2 is a trivial embedding from Tf
to Tr and ε′ = ((Bi, R′i))i∈A2 is an embedding from Tf to
T ′r, then Tr ⇒ T ′r.
Since embedding is an information reduction operation,
many FIS may be embedded into the same RIS so that, in
general, it is not easy to recover an embedded FIS. However,
by applying constraint solving techniques, we can usually find
possible FIS candidates that have been embedded into a given
RIS. More specifically, if the universe, the set of attributes, and
the domain of values for each attribute of an FIS are known,
then, given an embedding and the resultant embedded RIS,
the problem of finding which FIS has been embedded into the
RIS is a constraint satisfaction problem (CSP). The following
example illustrates this point.
Example 7: Let U = {1, 2, 3, 4, 5, 6}, A = {a, s}, Va =
{1, 2, · · · , 120}, and Vs = {M,F} be respectively the uni-
verse, the set of attributes, and the domains of values for
attributes a and s, where a denotes age and s denotes gender.
Assume the RIS given in Table II results from an embedding
(({a}, Ra), ({s}, Rs)), where Ri(v1, v2) = 1 iff v1 = v2.
Then, to find an FIS Tf = (U,A, {Vi | i ∈ A}, {fi | i ∈
A}) such that the RIS is the embedment of Tf by the above-
mentioned embedding, we have to solve the following finite
domain CSP, where vij is a variable denoting the possible
value of fj(i):
via ∈ {1, 2, · · · , 120}, vis ∈ {M,F}, 1 ≤ i ≤ 6,
v1a = v2a, v3a = v4a, v5a = v6a,
via 6= vja, (i, j) 6= (1, 2), (3, 4), or (5, 6),
v1s = v6s 6= v2s = v3s = v4s = v5s.
IV. GENERAL THEORY OF GRANULATION
In the preceding section, we showed that both FIS and RIS
are useful formalisms for data representation. However, to
TABLE II
AN RIS OBTAINED FROM A GIVEN EMBEDDING
a 1 2 3 4 5 6
1 1 1 0 0 0 0
2 1 1 0 0 0 0
3 0 0 1 1 0 0
4 0 0 1 1 0 0
5 0 0 0 0 1 1
6 0 0 0 0 1 1
s 1 2 3 4 5 6
1 1 0 0 0 0 1
2 0 1 1 1 1 0
3 0 1 1 1 1 0
4 0 1 1 1 1 0
5 0 1 1 1 1 0
6 1 0 0 0 0 1
achieve full generality, we can combine these two information
systems. Let us define a hybrid information system (HIS) T
as
(U,A∪B, {Vi | i ∈ A}, {Hi | i ∈ B}, {fi | i ∈ A}, {ri | i ∈ B})
such that (U,A, {Vi | i ∈ A}, {fi | i ∈ A}) is an FIS
and (U,B, {Hi | i ∈ B}, {ri | i ∈ B}) is an RIS. In
general, A and B are disjoint; however, this is not theoretically
mandatory.
Since an HIS contains both functional and relational infor-
mation, the indiscernibility relation defined in rough set theory
must be generalized to accommodate both kinds of informa-
tion. To present the general definition of an indiscernibility
relation, we first introduce the notion of a Kripke model from
modal logic [14]. In the current context, a Kripke model is
a triple (U, (Ri)i∈I , (Pi)i∈J), where I and J are two sets of
indices, Ri ⊆ U × U is a binary relation on U for i ∈ I ,
and Pi ⊆ U is a subset of U for i ∈ J . In the semantics of
modal logic, each Ri is called an accessibility relation and
each Pi corresponds to a proposition. Obviously, a Kripke
model is an HIS in which the domains of the attributes and
the relational indicators are all {0, 1}. On the other hand, we
can transform an HIS into a Kripke model in the following
way. Given T = (U,A ∪ B, {Vi | i ∈ A}, {Hi | i ∈ B}, {fi |
i ∈ A}, {ri | i ∈ B}), let I = {(i, h) | i ∈ B, h ∈ Hi} and
J = {(j, v) | j ∈ A, v ∈ Vj}, and define Ri,h and Pj,v as
(x, y) ∈ Ri,h iff ri(x, y) = h and x ∈ Pj,v iff fj(x) = v
respectively. Then, (U, (Ri)i∈I , (Pi)i∈J) is a Kripke model
corresponding to T . Thus, without loss of generality, we can
develop a theory of granulation based on Kripke models,
instead of general HIS.
To define the indiscernibility relation in a Kripke model
(U, (Ri)i∈I , (Pi)i∈J), we need the notions of propositional
and relational expressions. The sets of relational expressions
(Π) and propositional expressions (Φ) based on I and J are
defined by the following formation rules:
Π := i | ι | α¯ | α` | α unionsq β | α u β | α · β,
where i ∈ I and α, β ∈ Π; and
Φ := j | ¬ϕ | ϕ ∨ ψ | ϕ ∧ ψ | 〈α〉ϕ,
8
Author's personal copy
A theoretical investigation of regular equivalences for fuzzy graphsq
Tuan-Fang Fan a, Churn-Jung Liau b,*, Tsau-Young Lin c
aDepartment of Computer Science and Information Engineering, National Penghu University, Penghu 880, Taiwan
b Institute of Information Science, Academia Sinica, Taipei 115, Taiwan
cDepartment of Computer Science, San Jose State University, San Jose, CA 95192, USA
a r t i c l e i n f o
Article history:
Received 20 November 2007
Received in revised form 17 July 2008
Accepted 17 July 2008
Available online 25 August 2008
Keywords:
Granular computing
Fuzzy graph
Regular equivalences
Bisimulation
Labeled transition systems
Social networks
a b s t r a c t
The notion of regular equivalence or bisimulation arises in different applications, such as
positional analysis of social networks and behavior analysis of state transition systems.
The common characteristic of these applications is that the system under modeling can
be represented as a graph. Thus, regular equivalence is a notion used to capture the simi-
larity between nodes based on their linking patterns with other nodes. According to Borg-
atti and Everett, two nodes are regularly equivalent if they are equally related to equivalent
others. In recent years, fuzzy graphs have also received considerable attention because they
can represent both the qualitative relationships and the degrees of connection between
nodes. In this paper, we generalize the notion of regular equivalence to fuzzy graphs based
on two alternative deﬁnitions of regular equivalence. While the two deﬁnitions are equiv-
alent for crisp graphs, they induce different generalizations for fuzzy graphs. The ﬁrst gen-
eralization, called regular similarity, is based on the characterization of regular equivalence
as an equivalence relation that commutes with the underlying graph edges. The regular
similarity is then a fuzzy binary relation that speciﬁes the degree of similarity between
nodes in the graph. The second generalization, called generalized regular equivalence, is
based on the deﬁnition of coloring. A coloring is a mapping from the set of nodes to a
set of colors. A coloring is regular if nodes that are mapped to the same color, have the
same colors in their neighborhoods. Hence, generalized regular equivalence is an equiva-
lence relation that can determine a crisp partition of the nodes in a fuzzy graph.
 2008 Elsevier Inc. All rights reserved.
1. Introduction
Granular computing (GrC) is a novel problem-solving concept deeply rooted in human thinking. Many objects can be
granulated into ‘‘sub-objects”. For example, the human body can be granulated into the head, the neck, and so forth; while
geographic features can be granulated into mountains, plains, etc. Although the notion of granulation is essentially fuzzy,
vague, and imprecise, mathematicians have idealized it into partitions (equivalence relations) and developed a fundamental
problem-solving methodology based on it. The notion has played a major role in solving many important problems through-
out the history of mathematics. In recent years, rough set theory [33,34] has introduced the idea to the ﬁeld of computer
science, where it has been successfully applied to data analysis and uncertainty management. Nevertheless, the notion of
partitions, which does not permit any overlap among granules (equivalence classes), is too restrictive for real-world appli-
cations. Even in the natural sciences, classiﬁcations permit a small degree of overlap. For example, there are creatures that
0888-613X/$ - see front matter  2008 Elsevier Inc. All rights reserved.
doi:10.1016/j.ijar.2008.07.007
q A preliminary version of this paper was published in [13].
* Corresponding author.
E-mail addresses: dffan@npu.edu.tw (T.-F. Fan), liaucj@iis.sinica.edu.tw (C.-J. Liau), tylin@cs.sjsu.edu (T.-Y. Lin).
International Journal of Approximate Reasoning 49 (2008) 678–688
Contents lists available at ScienceDirect
International Journal of Approximate Reasoning
journal homepage: www.elsevier .com/locate / i jar
10
Author's personal copy
equivalence relation q on A and a node a 2 A, the q-equivalence class of a is deﬁned as ½aq ¼ Nþq ðaÞ ¼ Nq ðaÞ. Note that the
latter equality holds because of the symmetry of q. If ða; bÞ 2 q, then a and b belong to the same equivalence class. For any
B#A, we denote ½Bq by the set f½aq j a 2 Bg.
Several equivalence relations have been proposed for exploring the structural similarity between nodes. Among them,
regular equivalence has been extensively studied [3,6,12,18,42]. Although there are several deﬁnitions of regular equiva-
lence, we only consider two of them in this paper. The ﬁrst is based on the characterization given by Boyd and Everett
[6], which states that an equivalence relation q is a regular equivalencewith respect to a binary relation a if it commutes with
a; i.e.,
aq ¼ qa;
where aq ¼ fða; bÞ j 9c 2 A; ða; cÞ 2 a ^ ðc; bÞ 2 qg is the composition of a and q. By this deﬁnition, if q is a regular equivalence
with respect to a and ða; bÞ 2 q, then for each c 2 Nþa ðaÞðresp: Na ðaÞÞ, there exists c0 2 Nþa ðbÞðresp: Na ðbÞÞ such that ðc; c0Þ 2 q.
The property naturally leads to an alternative deﬁnition of regular equivalence [18], which states that an equivalence rela-
tion q is a regular equivalence with respect to a binary relation a if for a; b 2 A,
ða; bÞ 2 q) ½Nþa ðaÞq ¼ ½Nþa ðbÞq and ½Na ðaÞq ¼ ½Na ðbÞq:
According to this deﬁnition, if a and b are regularly equivalent, then they are connected to equivalent neighborhoods. Obvi-
ously, the above deﬁnitions are equivalent. However, the situation is quite different when we consider fuzzy graphs. In this
paper, we deﬁne a fuzzy graph as a structure F ¼ ðA;aÞ, where a is a binary fuzzy relation on A, which we deﬁne in the next
sub-section.
Obviously, a graph can model different data and systems in various applications. When a graph represents a social net-
work, its nodes and edges denote actors and their interactions, respectively. In such cases, two actors are regularly equivalent
if they interact equally with equivalent others. On the other hand, when a graph models a state transition system, its nodes
and edges denote the states of the system and the transitions between the states, respectively. Hence, two states are regu-
larly equivalent (usually called bisimilar) if they always move from/to equivalent states.
2.2. Fuzzy relations
It is well-known that a binary relation a on A can be represented by its characteristic function (adjacency matrix)
la : A A ! f0;1g. A binary fuzzy relation a on A can thus be characterized by its membership function
la : A A ! ½0;1. Obviously, a binary fuzzy relation is a generalization of a binary relation, so the lower-case Greek letters
a; b;q; k, etc., are used to denote both fuzzy and crisp relations. Since we only consider binary fuzzy relations in this paper,
we call them fuzzy relations hereafter, and the term ‘‘binary relation” means crisp relations only. A fuzzy relation a is in-
cluded in another fuzzy relation b, denoted by a#b, if laða; bÞ 6 lbða; bÞ for all a; b 2 A. Several basic operations for binary
relations [6] can be easily generalized to fuzzy relations.
Deﬁnition 2.1. Given two fuzzy relations a and b on A, the following fuzzy relations can be derived:
(1) the identity relation i:
liða; bÞ ¼
1; if a ¼ b;
0; otherwise;

(2) the converse of a, a:
la ða; bÞ ¼ laðb; aÞ;
(3) the composition of a and b, ab:
muabða; bÞ ¼ sup
c2A
minðlaða; cÞ;lbðc; bÞÞ;
(4) the union of a and b, a [ b:
la[bða; bÞ ¼maxðlaða; bÞ;lbða; bÞÞ;
(5) the intersection of a and b, a \ b:
la\bða; bÞ ¼minðlaða; bÞ;lbða; bÞÞ;
(6) the right residual of a by b, a=b: the largest fuzzy relation k such that bk#a;
(7) the left residual of a by b, a n b: the largest fuzzy relation k such that kb#a;
(8) the symmetric interior of a, as: as ¼ a \ a.
The composition of a with itself k times is denoted by ak and the transitive closure of a is deﬁned as a1 ¼ SkP1ak. In the
fuzzy case, equivalence relation is generalized to a similarity relation.
680 T.-F. Fan et al. / International Journal of Approximate Reasoning 49 (2008) 678–688
12
Author's personal copy
(2) A similarity relation q is a regular similarity with respect to a fuzzy relation a iff qaq#aq and qaq#qa.
(3) If q is a regular similarity with respect to a fuzzy relation a, then q# ððaqÞ n aÞ \ ððqaÞ=aÞ.
Proof. See Lemma 8, Eq. (16), and Lemma 10 in [6]. h
The next theorem, which is analogous to Theorem 11 in [6], shows that the regular interior can be computed iteratively.
Theorem 3.1. Let a be a fuzzy relation and p be a similarity relation, both on a ﬁnite set A. Then, the regular interior of p is equal
to
po ¼
\
iP0
pi;
where p0 ¼ p and
piþ1 ¼ ½ððapiÞ n aÞ \ ððpiaÞ=aÞ \ pis:
Recall that s is the symmetric interior of a fuzzy relation.
Proof. Since the proof that each p is a similarity relation and the proof of the regularity and maximality of po follow exactly
the same steps as the proof of Theorem 11 in [6], we only have to prove that the sequence p0;p1;p2; . . . ; will eventually ter-
minate for some k such that pk ¼ pkþ1. By deﬁnition, this sequence is decreasing. Moreover, by Corollary 1, we know that
lpi ðA AÞ#laðA AÞ [ lpðA AÞ for each iP 0. Note that 1 2 lpðA AÞ because p is reﬂexive. Since
laðA AÞ [ lpðA AÞ is ﬁnite, there is only a ﬁnite number of choices for the membership values of lpi ; therefore, the
decreasing sequence p0;p1;p2; . . . will eventually reach a point where no further changes are possible. h
This theorem provides an effective way to obtain the regular similarities of a fuzzy graph, after which traditional similar-
ity-based clustering methods [16] can be applied to granulate the graph.
4. Generalized regular equivalence
Although regular similarity is a fuzzy relation, we sometimes need a crisp partition of nodes in a fuzzy graph. In such
cases, we can use the concept of generalized regular equivalence (GRE). To deﬁne GRE, we need to consider the neighborhoods
of the nodes in fuzzy graphs. Let F ¼ ðA;aÞ be a fuzzy graph. Then, for each a 2 A, the out-neighborhood and in-neighborhood
of a, denoted by Nþa ðaÞ and Na ðaÞ, respectively, are two fuzzy subsets of A with the following membership functions:
lNþa ðaÞðbÞ ¼ laða; bÞ;
lNa ðaÞðaÞ ¼ laðb; aÞ:
Let B be a fuzzy subset of A and q be an equivalence relation on A. Then, ½Bq is a fuzzy subset of the quotient set
A=q ¼ f½aq j a 2 Ag with the following membership function:
l½Bq ð½aÞ ¼maxb2½a lBðbÞ:
Thus, an equivalence relation q is a GRE with respect to a fuzzy relation a if ða; bÞ 2 q implies that
½Nþa ðaÞq ¼ ½Nþa ðbÞq and ½Na ðaÞq ¼ ½Na ðbÞq:
Let us somewhat abuse the notation and write laða; ½bqÞ and lað½aq; bÞ to denote maxc2½blaða; cÞ and maxc2½alaðc; bÞ, respec-
tively. Then, we have the following alternative formulation of GRE.
Lemma 3. An equivalence relation q is a GRE with respect to a fuzzy relation a iff for a; b 2 A, ða; bÞ 2 q implies that
laða; ½cqÞ ¼ laðb; ½cqÞ and lað½cq; aÞ ¼ lað½cq; bÞ for all c 2 A.
Based on this formulation, we can establish the connection between regular similarity and GRE.
Lemma 4. Let a be a fuzzy relation and q be an equivalence relation on a ﬁnite set A. Then, q is a GRE with respect to a iff aq ¼ qa.
Proof. Let a; b 2 A, then
laqða; bÞ ¼ maxc2A minðlaða; cÞ;lqðc; bÞÞ ¼ laða; ½bqÞ;
lqaða; bÞ ¼ maxc2A minðlqða; cÞ;laðc; bÞÞ ¼ lað½aq; bÞ:
(if): If aq ¼ qa, then ða; cÞ 2 q implies that
682 T.-F. Fan et al. / International Journal of Approximate Reasoning 49 (2008) 678–688
14
Author's personal copy
Since the largest solution of minðr1; xÞ ¼minðr2; xÞ is x ¼minðr1; r2Þ, the adjacency matrix of the largest regular similarity
with respect to a is
1 minðr1; r2Þ
minðr1; r2Þ 1
 
;
which is obviously not equal to the identity matrix if minðr1; r2Þ–0.
5. Related work
The study of fuzzy graphs is relatively new in SNA [29], but the more general notion of valued networks has been inves-
tigated extensively [4]. A (simpliﬁed) valued network is a structureN ¼ ðA;aÞ, where A is a set of nodes and a : A A ! D is a
D-valued binary relation. The set of values Dmay be numerical, ordinal, or categorical. In this sense, a fuzzy graph is simply a
special kind of valued network, where D ¼ ½0;1 is a set of numerical values. On the other hand, both numerical and ordinal
valued networks can be normalized to [0,1]-valued networks. Thus, the regular equivalences deﬁned for fuzzy graphs are
comparable to those deﬁned for valued social networks.
Deﬁnitions of regular equivalence for valued networks are proposed in [1,4]. Let ðA;aÞ be a valued network and q be an
equivalence relation on A. In [4], q is deﬁned as a regular equivalence if ða; bÞ 2 q implies that for each X 2 A=q
faða; cÞ j c 2 Xg ¼ faðb; cÞjc 2 Xg and faðc; aÞ j c 2 Xg ¼ faðc; bÞjc 2 Xg:
Meanwhile, in [1], q is deﬁned as a regular equivalence if ða; bÞ 2 q implies that for each X 2 A=q,
max
c2X
aða; cÞ ¼max
c2X
aðb; cÞ and max
c2X
aðc; aÞ ¼max
c2X
aðc; bÞ:
Obviously, the deﬁnition in [1] is the same as our deﬁnition of GRE for fuzzy graphs. Recently, the following uniform deﬁ-
nition of f-regular equivalence was proposed in [40]. An equivalence relation q is said to be an f-regular equivalence if
ða; bÞ 2 q implies that for each X 2 A=q,
fc2Xfaða; cÞg ¼ fc2Xfaðb; cÞg and f c2Xfaðc; aÞg ¼ fc2Xfaðc; bÞg;
where f is a function, such as sum, max, or mean. When f is the identity function, f-regular equivalence is the same as the
regular equivalence deﬁned in [4]; and when f ¼max, it is equivalent to both GRE deﬁned here and the regular equivalence
deﬁned in [1].
For regular equivalence, only the occurrence or non-occurrence of a position in the neighborhood of a node is relevant.
However, the number of occurrences is sometimes an important factor. In such cases, a number restriction can be added
to the deﬁnition of regular equivalences, which leads to the notion of exact equivalence or equitable partition [18]. Hence,
the number of equivalent neighbors must be the same for two nodes to be considered exactly equivalent. By generalizing the
notion of exact equivalence to graph spaces, a notion of structural similarity that can be applied to valued networks is pro-
posed in [7,8]. Structural similarity is characterized by its commutativity with the underlying valued relations. Thus, a valued
relation q is a structural similarity of the valued network ðA;aÞ iff q  a ¼ a  q, where the relational composition is the sum-
product composition, instead of the max–min composition used in the deﬁnition of regular similarity.
6. Discussion
6.1. Fuzzy state transition systems
While GRE is essentially the same as the notion of regular equivalence in valued networks, regular similarity provides
more precise information about the proximity of nodes based on their connection patterns with other nodes. To further elab-
orate on this point, we use ﬁnite state transition systems to explain the difference between GRE and regular similarity.
State transition systems were originally proposed in [30] as models of concurrency and now play an important role in
formal speciﬁcation and veriﬁcation of software systems. A state transition system is formally deﬁned as a triplet
ðQ ;R;!Þ, where Q is a set of states, R is an alphabet of events, and ! #Q  R Q is a (labeled) transition relation. When
Q is ﬁnite, the system is called a ﬁnite state transition system. A transition ðq1; e; q2Þ 2! is usually denoted by q1!
e
q2. Be-
cause each transition of the system is labeled by an event symbol, the system is also called a labeled transition system. When
R ¼ feg is a singleton, we simply denote the system as ðQ ;!Þ and the labels can be omitted from the transition arcs. In this
paper, we only consider ﬁnite transition systems in which R is a singleton. Such a system is also a special kind of ﬁnite-state
automaton. As fuzzy automata have been investigated extensively in the literature [9], we can easily deﬁne fuzzy state tran-
sition systems. In our case, a fuzzy state transition system can be represented as a fuzzy graph ðQ ;aÞ, where a : Q  Q ! ½0;1
is a fuzzy transition relation. Thus, the regular equivalence of fuzzy graphs can play a role in the analysis of the behavioral
similarity of different states. The following example shows the difference between GRE and regular similarity in this respect.
Example 2. Let us consider a simple fuzzy state transition system with four states, as shown by the fuzzy graph in Fig. 2. The
system can be a component of a larger system. However, for ease of illustration, we ignore the scalability issue and assume
684 T.-F. Fan et al. / International Journal of Approximate Reasoning 49 (2008) 678–688
16
Author's personal copy
denoted by l, such that l : 2X ! ½0;1 is deﬁned as lðXÞ ¼ supx2XlðxÞ. Given two membership functions l1 and l2 on the
same domain, we can deﬁne the difference between them as dðl1;l2Þ : X ! ½0;1 such that
dðl1;l2ÞðxÞ ¼ jl1ðxÞ  l2ðxÞj;
for all x 2 X. Then, the divergence of l1 with respect to l2 is deﬁned as
Dðl1jl2Þ ¼
Z
C
dðl1;l2Þdl1:
Strictly speaking, the divergence measure so deﬁned is not a distance metric. In particular, it is not symmetric, i.e., Dðl1 j l2Þ
is not necessarily equal to Dðl2 j l1Þ. Since our similarity relation is symmetric, we use the symmetric closure of D, deﬁned as
Dsðl1;l2Þ ¼maxðDðl1jl2Þ;Dðl2jl1ÞÞ;
to estimate the (informational) similarity between two fuzzy sets. The larger the value of Dsðl1;l2Þ, the less similar l1 and
l2 will be.
Example 3. Continuing with Example 2, we deﬁne li ¼ lNþa ðsiÞ and mi ¼ lNa ðsiÞ for 1 6 i 6 4. By using the deﬁnition of Ds and
ignoring the additive e-terms, we obtain the following values of the symmetric divergence between these fuzzy
neighborhoods:
The similarity between in-neighborhoods and that between out-neighborhoods must be considered simultaneously to
determine the similarity of two states. Therefore, we use the term maxðDsðli;ljÞ;Dsðmi; mjÞÞ shown in the following
divergence matrix to estimate the similarity between two states.
Recalling that the regular similarity in Example 2 naturally partitions the set of states into two blocks fs1; s2g and fs3; s4g,
we can see that the divergence between states in different blocks is the largest; and the divergence between s3 and s4 is
larger than that between s1 and s2. Qualitatively, this matches the regular similarity obtained in Example 2.
Note that the above justiﬁcation is quite informal, since we do not recursively account for the similarity between states in
the neighborhoods. In fact, the similarity between states based on the divergence of their neighborhoods is more like the
generalization of structural equivalence1 than the generalization of regular equivalence. However, it shows that a fuzzy rela-
tion like regular similarity can provide a much ﬁner description of the connection patterns between the nodes in fuzzy networks
than crisp regular equivalence.
6.2. Fuzzy rough sets
The basic construct of rough set theory [33] is called an approximation space, deﬁned as a pair ðU;qÞ, where U is the uni-
verse and q#U  U is an equivalence relation on U. According to Pawlak, knowledge is deep-seated in the classiﬁcation
capabilities of human beings. A classiﬁcation is simply a partition of the universe, so an approximation space constructs
the basic knowledge about objects in the universe. In philosophy, the extension of a concept is deﬁned as the objects that
1 Two nodes, a and b, in a graph are structurally equivalent if Nþa ðaÞ ¼ Nþa ðbÞ and Na ðaÞ ¼ Na ðbÞ [18].
686 T.-F. Fan et al. / International Journal of Approximate Reasoning 49 (2008) 678–688
18
Author's personal copy
We also present effective procedures for computing the regular interiors of a given equivalence relation or similarity rela-
tion. Although these procedures are effective, they are not efﬁcient enough for large-scale graphs. Therefore, in a future work,
we will explore the possibility of adapting the more efﬁcient RCPP (relational coarsest partition problem) algorithm [18] to
the fuzzy case. In addition to regular equivalences, we will consider generalizing other notions of structural equivalence [18]
to fuzzy graphs.
References
[1] V. Batagelj, A. Ferligoj, Clustering relational data, in: W. Gaul, O. Opitz, M. Schader (Eds.), Data Analysis, Springer-Verlag, 2000, pp. 3–16.
[2] P. Blackburn, M. de Rijke, Y. Venema, Modal Logic, Cambridge University Press, 2001.
[3] S.P. Borgatti, M.G. Everett, The class of all regular equivalences: algebraic structure and computation, Social Networks 11 (1) (1989) 65–88.
[4] S.P. Borgatti, M.G. Everett, Regular blockmodels of multiway, multimode matrices, Social Networks 14 (1992) 91–120.
[5] S.P. Borgatti, M.G. Everett, Two algorithms for computing regular equivalences, Social Networks 15 (4) (1993) 361–376.
[6] J.P. Boyd, M.G. Everett, Relations, residuals, regular interiors, and relative regular equivalence, Social Networks 21 (2) (1999) 147–165.
[7] U. Brandes, J. Lerner, Structural similarity in graphs, in: Proceedings of the 15th International Symposium on Algorithms and Computation, LNCS 3341,
Springer-Verlag, 2004, pp. 184–195.
[8] U. Brandes, J. Lerner, Role-equivalent actors in networks, in: S. Obiedkov, C. Roth (Eds.), ICFCA Satellite Workshop on Social Network Analysis and
Conceptual Structures: Exploring Opportunities, 2007.
[9] M. Doostfatemeh, S.C. Kremer, New directions in fuzzy automata, International Journal of Approximate Reasoning 38 (2) (2005) 175–214.
[10] P. Doreian, Measuring regular equivalence in symmetric structures, Social Networks 9 (2) (1987) 89–107.
[11] D. Dubois, H. Prade, Rough fuzzy sets and fuzzy rough sets, International Journal of General Systems 17 (1990) 191–209.
[12] M.G. Everett, S.P. Borgatti, Regular equivalences: general theory, Journal of Mathematical Sociology 18 (1) (1994) 29–52.
[13] T.F. Fan, C.J. Liau, T.Y. Lin, Positional analysis in fuzzy social networks, in: Proceedings of the Third IEEE International Conference on Granular
Computing, 2007, pp. 423–428.
[14] T.F. Fan, C.J. Liau, D.R. Liu, G.H. Tzeng, Granulation based on hybrid information systems, in: Proceedings of the 2006 IEEE International Conference on
Systems, Man, and Cybernetics, 2006, pp. 4768–4772.
[15] R.A. Hanneman, M. Riddle, Introduction to Social Network Methods, University of California, Riverside, 2005.
[16] A.K. Jain, M.N. Murty, P.J. Flynn, Data clustering: a review, ACM Computing Surveys 31 (3) (1999) 264–323.
[17] T. Kroupa, Application of the choquet integral to measures of information in possibility theory, International Journal of Intelligent Systems 21 (3)
(2006) 349–359.
[18] J. Lerner, Role assignments, in: U. Brandes, T. Erlebach (Eds.), Network Analysis, LNCS 3418, Springer-Verlag, 2005, pp. 216–252.
[19] C.J. Liau, T.Y. Lin, Reasoning about relational granulation in modal logics, in: Proceedings of the First IEEE International Conference on Granular
Computing, 2005, pp. 534–558.
[20] T.Y. Lin, Granular computing on binary relations: data mining and neighborhood systems, in: A. Skoworn, L. Polkowski (Eds.), Rough Sets In Knowledge
Discovery I, Physica-Verlag, 1998, pp. 107–121.
[21] T.Y. Lin, Rough set representations and belief functions, in: A. Skoworn, L. Polkowski (Eds.), Rough Sets In Knowledge Discovery II, Physica-Verlag,
1998, pp. 121–140.
[22] T.Y. Lin, Data mining: granular computing approach, in: Methodologies for Knowledge Discovery and Data Mining: Proceedings of the Third Paciﬁc-
Asia Conference, LNCS 1574, Springer-Verlag, 1999, pp. 24–33.
[23] T.Y. Lin, Granular computing: fuzzy logic and rough sets, in: L.A. Zadeh, J. Kacprzyk (Eds.), Computing with Words in Information/Intelligent Systems,
Physica-Verlag, 1999, pp. 183–200.
[24] T.Y. Lin, Data mining and machine oriented modeling: a granular computing approach, Journal of Applied Intelligence 13 (2) (2000) 113–124.
[25] T.Y. Lin, M. Hadjimichael, Non-classiﬁcatory generalization in data mining, in: Proceedings of the Fourth Workshop on Rough Sets, Fuzzy Sets, and
Machine Discovery, 1996, pp. 404–412.
[26] T.Y. Lin, C.J. Liau, Granular computing and rough sets: an incremental development, in: L. Rokach, O. Maimon (Eds.), Data Mining and Knowledge
Discovery Handbook: A Complete Guide for Practitioners and Researchers, Springer-Verlag, 2005, pp. 535–561.
[27] T.Y. Lin, N. Zhong, J. Duong, S. Ohsuga, Frameworks for mining binary relations in data, in: A. Skoworn, L. Polkowski (Eds.), Rough sets and Current
Trends in Computing, LNCS 1424, Springer-Verlag, 1998, pp. 387–393.
[28] M. Marx, M. Masuch, Regular equivalence and dynamic logic, Social Networks 25 (1) (2003) 51–65.
[29] P.S. Nair, S. Sarasamma, Data mining through fuzzy social network analysis, in: Proceedings of the 26th International Conference of North American
Fuzzy Information Processing Society, pp. 251–255.
[30] M. Nielsen, G. Rozenberg, P.S. Thiagarajan, Elementary transition systems, Theoretical Computer Science 96 (1) (1992) 3–33.
[31] P.E. Pattison, The analysis of semigroups of multirelational systems, Journal of Mathematical Psychology 25 (1982) 87–117.
[32] P.E. Pattison, Algebraic Models for Social Networks, Cambridge University Press, 1993.
[33] Z. Pawlak, Rough sets, International Journal of Information and Computer Science 11 (15) (1982) 341–356.
[34] Z. Pawlak, Rough Sets–Theoretical Aspects of Reasoning about Data, Kluwer Academic Publishers, 1991.
[35] L. Polkowski, S. Tsumoto, T.Y. Lin (Eds.), Rough Set Methods and Applications, Physica-Verlag, 2000.
[36] J. Scott, Social Network Analysis: A Handbook, second ed., SAGE Publications, 2000.
[37] W. Sierpenski, C. Krieger, General Topology, University of Toronto Press, 1956.
[38] A. Skoworn, L. Polkowski (Eds.), Rough Sets In Knowledge Discovery Vol. 1: Methodology and Applications, Physica-Verlag, 1998.
[39] A. Skoworn, L. Polkowski (Eds.), Rough Sets In Knowledge Discovery Vol. 2: Applications, Case Studies and Software Systems, Physica-Verlag, 1998.
[40] A. Zˇiberna, Generalized blockmodeling of valued networks, Social Networks 29 (2007) 105–126.
[41] S. Wasserman, K. Faust, Social Network Analysis: Methods and Applications, Cambridge University Press, 1994.
[42] D.R. White, K.P. Reitz, Graph and semigroup homomorphisms on networks and relations, Social Networks 5 (1) (1983) 143–234.
[43] L.A. Zadeh, Fuzzy sets and information granularity, in: N. Gupta, R. Ragade, R. Yager (Eds.), Advances in Fuzzy Set Theory and Applications, North-
Holland, 1979, pp. 3–18.
688 T.-F. Fan et al. / International Journal of Approximate Reasoning 49 (2008) 678–688
20
tracted from data tables by using first-order logic (FOL)
or many-sorted first-order logic (MSFOL)[4]. In this paper,
we explore the description of data tables based on MSFOL.
The attribute value-sorted logic (AVSL) proposed in [4] is
investigated from the perspective of granular computing.
By using a logical formulation, it is easy to show that pat-
terns are properties of classes of isomorphic data tables.
It can also be shown that a granular data model can act
as a canonical model of a class of isomorphic data tables.
Consequently, association rule mining can be restricted to
such granular data models.
In the next section, we review rough set theory and de-
cision logic. In Section 3, the syntax and semantics of
attribute value-sorted logic (AVSL) are presented. In Sec-
tion 4, we show that isomorphic data tables have the same
set of patterns, which implies that association rules are
syntactic in nature. We also show that a canonical granu-
lar model can be obtained for each class of isomorphic data
tables, and all patterns discovered from the class of data
tables can be discovered from the granular data model. We
then summarize our conclusions in Section 5.
2 Rough Set Theory—A Review
2.1 Approximation space
The basic construct of rough set theory is an approxima-
tion space, defined as a pair (U,R), where U is the universe
and R ⊆ U ×U is an equivalence relation on U . An equiv-
alence relation partitions the universe U into a family of
equivalence classes so that each element of U belongs to ex-
actly one of these equivalence classes. Thus, we can write
an equivalence class of R as [x]R if it contains the element
x. Note that [x]R = [y]R iff (x, y) ∈ R.
In philosophy, the extension of a concept is defined as the
objects that are instances of the concept. Following this
terminology, a subset of the universe is called a concept or
a category in rough set theory.
Given an approximation space (U,R), each equivalence
class of R is called an R-basic category or R-basic concept ,
and any union of R-basic categories is called an R-category.
Now, for an arbitrary concept X ⊆ U , we are interested
in the definability of X based on R-basic categories. We
say that X is R-definable, if X is an R-category; otherwise
X is R-undefinable. R-definable concepts are also called
R-exact sets, whereas R-undefinable concepts are said to
be R-inexact or R-rough. When the approximation space
is explicit from the context, we simply omit the qualifier
R and call a set an exact set or a rough set.
A rough set can be approximated from below and above
by two exact sets. The lower approximation and upper ap-
proximation of X are denoted by RX and RX respectively,
and defined as follows:
RX = {x ∈ U | [x]R ⊆ X},
RX = {x ∈ U | [x]R ∩X 6= ∅}.
2.2 Data tables and decision logic
For data mining problems, data is usually provided in the
form of data tables (DT). The following formal definition
of a data table is given in [7].
Definition 1. A data table1 is a tuple
T = (U,A, {Vi | i ∈ A}, {fi | i ∈ A}),
where U is a nonempty finite set, called the universe; A
is a nonempty finite set of primitive attributes; for each
i ∈ A, Vi is the domain of values for i; and for each i ∈ A,
fi : U → Vi is a total function.
Example 1. We now present a running example by using
two data tables from [5]. The first data table (Table 1) is
drawn from a salesperson database. There are nine sales-
U Business Birth City
Amount (in K.) Day
u1 TWENTY MAR NY
u2 TEN MAR SJ
u3 TEN FEB NY
u4 TEN FEB LA
u5 TWENTY MAR SJ
u6 TWENTY MAR SJ
u7 TWENTY APR SJ
u8 THIRTY JAN LA
u9 THIRTY JAN LA
Table 1: A data table about salespersons
person records in the data table. The three attributes de-
note, respectively, the amount of business generated by a
salesperson during a fixed period, the city where he/she
lives, and his/her date of birth. Based on the formal defi-
nition of a data table, we have
• U = {u1, · · · , u9},
• A = {ba, bd, ct} with ba = Business Amount, bd =
Birthday, and ct = City,
• Vba = {TEN, TWENTY, . . .}, Vbd = {JAN, FEB,. . .,
DEC}, and Vct = {NY, LA, . . .}.
• fba(u1) = TWENTY, etc.
The second data table (Table 2) contains several products
manufactured by a company. The table can also be de-
scribed in terms of the formal definition as follows:
• U = {u1, · · · , u9},
• A = {wt, pn,mt} with wt = Weight, pn = Product
Name, and mt = Material,
• Vwt = {10, 20, · · · }, Vpn = {SCREW, NAIL, . . .}, and
Vmt = {STEEL, BRASS, . . .}.
1Also called knowledge representation systems, information sys-
tems, or attribute-value systems
22
• ind(ba) = {{u1, u5, u6, u7}, {u2, u3, u4}, {u8, u9}} =
ind(wt)
• ind(bd) = {{u1, u2, u5, u6}, {u3, u4}, {u7}, {u8, u9}} =
ind(pn)
• ind(ct) = {{u1, u3}, {u2, u5, u6, u7}, {u4, u8, u9}} =
ind(mt)
Note that m((ct,SJ) ∨ (ct,NY)) = {u1, u2, u3, u5, u6, u7}.
Thus, the lower and upper approximations of m((ct,SJ)∨
(ct,NY)) with respect to ind(ba) are {u1, u5, u6, u7} and
{u1, u2, u3, u4, u5, u6, u7} respectively. Since the first
equivalence class of ind(ba) is the meaning set of the
descriptor (ba,TWENTY), which is a subset of the
lower approximation of m((ct,SJ) ∨ (ct,NY)), the rule
(ba,TWENTY) −→ (ct,SJ) ∨ (ct,NY) is valid, as shown
in Example 2.
3 Attribute Value-sorted Logic
We have shown that DL can be used to describe knowledge
discovered from a data table. In fact, DL is an instance of
propositional logic (PL) in which each descriptor (i, v) is
a primitive proposition, and each object in a data table is
considered an interpretation (a model) of the logic. Con-
sequently, from the PL viewpoint, a data table is a set of
models of DL. Alternatively, we can describe data tables
by using first-order logic (FOL) or many-sorted first-order
logic (MSFOL)[4].
3.1 Syntax
To describe data tables by using MSFOL, we consider a
special instance, called attribute value-sorted logic (AVSL).
The set of sorts for AVSL is Σ = {σi | i ∈ I}∪{σu}, where
I is an index set. The sort σu is called the object sort and
each σi is called an attribute value sort . The alphabet (or
vocabulary) of AVSL consists of:
1. a set of constant symbols Λ = {c1, d1, · · · },
2. a finite set of monadic predicates Π = {P1, Q1, · · · },
3. a set of dyadic predicates {Ri | i ∈ I},
4. a set of equality predicates { .=i| i ∈ I ∪ {u}},
5. a set of variables Ξ = {x1, x2, · · · , y1, y2, · · · }, and
6. logical symbols: Boolean connectives and the univer-
sal quantifier ∀.
We assume that a rank function is used to assign a
rank to constant symbols, predicate symbols, and vari-
ables. The rank of a constant symbol or a variable is an
element of Σ, and the rank of a predicate symbol is in Σk
if its arity is k. A constant (resp. variable) of rank σu is
called an object constant (resp. variable); otherwise, it is
called an attribute domain constant (resp. variable). For
each i ∈ I, Ri is of rank (σu, σi), and called an attribute
predicate. In addition, a monadic predicate of rank σu is
called a concept predicate; and for each i ∈ I, a monadic
predicate of rank σi is called a value predicate. We also
assume that an equality predicate .=i is of rank (σi, σi) for
each i ∈ I ∪ {u}.
A term is either a constant symbol or a variable, and
the rank of a term is that of the constant or the variable.
If P is a predicate of rank (σ1, · · · , σk) and t1, t2, · · · , tk
are the terms of ranks σ1, σ2, · · · , σk respectively, then
P (t1, t2, · · · , tk) is an atomic formula (k = 1, 2). The set of
wffs of AVSL is then defined as the smallest set Φ that con-
tains all atomic formulas and is closed under the following
formation rules:
1. if ϕ ∈ Φ, then ¬ϕ ∈ Φ;
2. if ϕ and ψ ∈ Φ, then ϕ ∧ ψ, and ϕ ∨ ψ ∈ Φ;
3. if x is a variable and ϕ ∈ Φ, then ∀xϕ ∈ Φ.
As usual, we abbreviate ¬ϕ∨ψ as ϕ ⊃ ψ, (ϕ ⊃ ψ)∧(ψ ⊃ ϕ)
as ϕ ≡ ψ, and ¬∀¬ϕ as ∃xϕ.
Example 4. Let us consider an AVSL language with three
attribute value sorts, i.e., Σ = {σ1, σ2, σ3, σu}. In addition
to logical symbols and variables, the alphabet of the lan-
guage includes:
1. Λ = {c1, c2, c3, d1, d2, d3, d4, e1, e2, e3},
2. Π = ∅,
3. the set of dyadic predicates {R1, R2, R3},
4. the set of equality predicates { .=1, .=2, .=3, .=u}.
We assume rank(ci) = σi(i = 1, 2, 3), rank(di) = σ2(i =
1, 2, 3, 4), and rank(ei) = σ3(i = 1, 2, 3). Let x be an
object variable. Then, R1(x, c1) ⊃ (R3(x, e1) ∨ R3(x, e2))
is a wff.
3.2 Semantics
For the semantics, an interpretation of AVSL is a tuple
A = ((Dσ)σ∈Σ, ·A), where Dσ is the domain of sort σ and
·A assigns meanings to the symbols of AVSL. Each con-
stant symbol c of rank σ is interpreted as an element of
Dσ, and each predicate symbol P of rank (σ1, · · · , σk) is
interpreted as a relation PA ⊆ Dσ1 × · · · ×Dσk (k = 1, 2).
Specifically, the interpretation of an equality predicate is
the identity relation on the corresponding domain. We
assume that Dσu and
⋃
i∈I Dσi are disjoint. A variable as-
signment of the interpretation A = ((Dσ)σ∈Σ, ·A) is defined
as a mapping µ : Ξ→ ⋃σ∈ΣDσ. A variable assignment µ
must satisfy the following constraint: if x is of rank σ, then
µ(x) ∈ Dσ. Such a variable assignment can be extended to
a valuation on the set of all terms by setting µ(c) = cA for
each constant symbol c. Let x ∈ Ξ and d ∈ ⋃σ∈ΣDσ be a
variable and an element in the domain respectively. Then,
we denote µ[d/x] by the variable assignment µ′ such that
µ′(x) = d and µ′(y) = µ(y) for all y 6= x. Note that µ[d/x]
is only well-defined when d ∈ Dσ, where x is of rank σ.
24
4.2 Isomorphism of AVSL models
Two interpretations A = ((Dσ)σ∈Σ, ·A) and B =
((D′σ)σ∈Σ, ·B) are isomorphic iff there is a one-one cor-
respondence g :
⋃
σ∈ΣDσ →
⋃
σ∈ΣD
′
σ such that
1. g(a) ∈ D′σ iff a ∈ Dσ for each σ ∈ Σ and a ∈ Dσ;
2. g(cA) = cB for each constant symbol c; and
3. (a1, · · · , ak) ∈ PA iff (g(a1), · · · , g(ak)) ∈ PB for each
predicate P and (a1, · · · , ak) ∈ Dσ1×· · ·×Dσk , where
(σ1, · · · , σk) is the rank of P .
The correspondence g is called an isomorphism between A
and B; and the notation A ≈ B is used to indicate that A
and B are isomorphic. Sometimes, the notation is written
as A ≈g B to make the isomorphism g explicit. Let µ
be a variable assignment on A and g be an isomorphism
between A and B. Then, g · µ is a variable assignment on
B such that g ·µ(x) = g(µ(x)). The following proposition,
presented in [6], shows that isomorphic models satisfy the
same set of wffs.
Proposition 1. Let A and B be two interpretations such
that A ≈g B. Then, for any wff ϕ and variable assignment
µ on A, we have
A, µ |= ϕ iff B, g · µ |= ϕ.
By interpreting a data table as an AVSL model, an asso-
ciation rule or a pattern is simply an AVSL formula ϕ(x)
with a single free variable of rank σu. Then, the extension
of ϕ under the interpretation A is its support set in the
corresponding data table. A direct corollary of the above
proposition shows that a pattern has the same support in
isomorphic interpretations.
Corollary 1. Let A and B be two interpretations such
that A ≈g B. Then, for any pattern ϕ(x), we have
g(|ϕ|A) = |ϕ|B.
Since g is a one-one correspondence, |ϕ|A and |ϕ|B have
the same cardinality, so their supports are the same.
Example 6. We continue to use the AVSL language in-
troduced in Example 4. However, we now show that
both Tables 1 and 2 can be transformed into interpreta-
tions of the language. From Table 1, we obtain a model
A1 = ((Dσ)σ∈Σ, ·A1) such that the domain of each sort is
defined as follows:
Dσu = U,
Dσ1 = {TWENTY, TEN, THIRTY},
Dσ2 = {JAN, FEB, MAR, APR},
Dσ3 = {NY, SJ, LA};
and the meaning of each constant symbol is defined as
follows:
cA11 = TWENTY, c
A1
2 = TEN, c
A1
3 = THIRTY,
dA11 = MAR, d
A1
2 = FEB, d
A1
3 = APR, d
A1
4 = JAN,
eA11 = NY, e
A1
2 = SJ, e
A1
3 = LA.
The interpretation of R1, R2, and R3 in A1 is in accordance
with the attributes ba, bd, and ct in Table 1 respectively.
Analogously, we can obtain a model A2 = ((Dσ)σ∈Σ, ·A2)
from Table 2, where the domain Dσu remains unchanged
and
Dσ1 = {20, 10, 30},
Dσ2 = {SCREW, NAIL, PIN, HAMMER},
Dσ3 = {STEEL, BRASS, ALLOY}.
The interpretation of constant symbols in A2 is defined as
follows:
cA21 = 20, c
A2
2 = 10, c
A2
3 = 30,
dA21 = SCREW, d
A2
2 = NAIL, d
A2
3 = PIN, d
A2
4 = HAMMER,
eA21 = STEEL, e
A2
2 = BRASS, e
A2
3 = ALLOY.
The interpretation of R1, R2, and R3 in A2 is in accordance
with the attributes wt, pn, and mt in Table 2 respectively.
It is easy to verify that all interpretations A0,A1, and A3
are models of BDT. Furthermore, it is obvious that all such
models are isomorphic.
4.3 Logical formulation of definability
Next, we formulate the indiscernibility relation and defin-
ability of rough set theory in AVSL. Let x and y be object
variables, v be an attribute domain variable, and S be a
subset of the index set I. Then, we can define the indis-
cernibility formula (with respect to S) as:
εs(x, y) =
∧
i∈s
∀v(Ri(x, v) ≡ Ri(y, v)).
When S is a singleton {i}, we write εs(x, y) as εi(x, y).
Given an arbitrary concept predicate P , we can define
two formulas corresponding to its lower and upper approx-
imations as follows:
εPs(x) = ∀y(εs(x, y) ⊃ P (y)),
εPs(x) = ∃y(εs(x, y) ∧ P (y)).
Let Γ be an AVSL theory that contains only predicate
symbols in {Ri | i ∈ S} ∪ {P}. Then, we say that P is
indiscernibly S-definable with respect to Γ if
Γ |= ∀x(εPs(x) ≡ εPs(x)).
4.4 Isomorphic attribute predicates
An important notion in rough set theory is that of a reduct,
which is a minimal subset of attributes that can induce
the same indiscernibility relation as the original set of at-
tributes. Specifically, if two attributes induce the same in-
discernibility relation, then at least one of them is dispens-
able. This can be formulated in AVSL with the isomor-
phism between attribute predicates. Two attribute predi-
cates, R1 and R2, are said to be isomorphic with respect
26
The subset of AVSL formulas corresponding to the DL-
style association rules is the class of ground association
rules (GAR). Given a fixed object variable x, the set of
GAR based on x is defined by the following grammar:
ϕ(x) ::= Ri(x, ci) | ¬ϕ(x) | ϕ1(x) ∧ ϕ2(x) | ϕ1(x) ∨ ϕ2(x),
where i ∈ I and ci is a constant of rank σi. Let A be a
GDM, then the extension of a GAR ϕ(x) under A can be
computed easily by performing set-theoretic operations on
the subsets of Dσu because, for each formula Ri(x, ci), we
have |Ri(x, ci)| = cAi ⊆ Dσu .
Based on the computation of the extension of a GAR,
we can transform the mining of frequent patterns into an
inequality constraint satisfaction problem[5]. For a given
data table, let us assume that the set of constants of rank
σi is equal to the set of values of attribute i that appear in
the data table. Then, we can define an elementary formula
as a GAR
∧
i∈I Ri(x, ci), where ci is a constant of rank σi.
Let A be a GDM corresponding to the given data table.
Then,
|
∧
i∈I
Ri(x, ci)| =
⋂
i∈I
cAi .
For an elementary formula ϕ(x), let us denote the cardinal-
ity of |ϕ| by ](ϕ). Then, we can find all frequent patterns
of the data table by solving the following linear inequality:
∑
ϕ∈Φ0
](ϕ) · sϕ ≥ r,
where Φ0 is the set of all elementary formulas, sϕ ∈ {0, 1}
for all ϕ ∈ Φ0, and r is the threshold for high frequency
patterns. A solution of the inequality is a mapping ρ : {sϕ |
ϕ ∈ Φ0} → {0, 1}. The inequality is satisfied by ρ if it is
satisfied by substituting each variable sϕ by ρ(sϕ). Each
solution ρ of the inequality constraint then corresponds to
the following GAR
∨
{ϕ ∈ Φ0|ρ(sϕ) = 1}.
A solution ρ is more specific than another solution ρ′ if for
any elementary formula ϕ, ρ(sϕ) ≤ ρ′(sϕ). If ρ is more
specific than ρ′ and the inequality is satisfied by ρ, then
it is also satisfied by ρ′. Thus, we only need to consider
the most specific solutions that satisfy the inequality when
mining frequent patterns.
Example 8. The elementary formulas of our AVSL lan-
guage are of the formR1(x, ci)∧R2(x, dj)∧R3(x, ek), where
1 ≤ i, k ≤ 3 and 1 ≤ j ≤ 4; hence, in total, there are 36
elementary formulas for the language. However, only a
few of the formulas have non-empty extensions under the
GDM A given in the previous example. They are defined
as follows:
ϕ1 = R1(x, c1) ∧R2(x, d1) ∧R3(x, e1)
ϕ2 = R1(x, c2) ∧R2(x, d1) ∧R3(x, e2)
ϕ3 = R1(x, c2) ∧R2(x, d2) ∧R3(x, e1)
ϕ4 = R1(x, c2) ∧R2(x, d2) ∧R3(x, e3)
ϕ5 = R1(x, c1) ∧R2(x, d1) ∧R3(x, e2)
ϕ6 = R1(x, c1) ∧R2(x, d3) ∧R3(x, e2)
ϕ7 = R1(x, c3) ∧R2(x, d4) ∧R3(x, e3)
These formulas are also shown in the last column of Ta-
ble 3. We can use the table to compute the extension
of each formula. For example, the extension of ϕ5 is
{u5, u6}, since it appears in the rows labeled u5 and u6.
Consequently, we have ](ϕi) = 1 for i = 1, 2, 3, 4, 6 and
](ϕ5) = ](ϕ7) = 2. Thus, given a threshold r, frequent
pattern mining in Tables 1 and 2 can be reduced to the
following inequality constraint satisfaction problem:
s1 + s2 + s3 + s4 + 2s5 + s6 + 2s7 ≥ r,
subject to si ∈ {0, 1},
where, for simplicity, we write si for sϕi . Note that al-
though there are 27 potential solutions for the inequality,
the number of the most specific solutions that satisfy the
inequality is far less. For example, when r = 5, the number
of the most specific solutions that satisfy the inequality is
26.
5 Conclusion
In this paper, we propose using AVSL as the description
language for data tables. Semantically, each data table
corresponds to an AVSL interpretation. Association rules
are then represented as AVSL formulas with only a single
free object variable. In terms of the basic results in clas-
sical logic, it is clear that the sets of patterns discovered
from two isomorphic models are the same. This implies
that associations are syntactic in nature. For each class
of isomorphic models, we can obtain a canonical model,
i.e., a granular data model. Thus, it is appropriate to per-
form association rule mining with the granular data model.
Building on the observation in [5], we have shown that the
mining of frequent patterns can be transformed into an
inequality constraint satisfaction problem.
REFERENCES
[1] R. Agrawal and R. Srikant. Fast algorithm for mining
association rules. In Proceedings of the 20th Interna-
tional Conference on Very Large Data Bases.
[2] R. Agrawal and R. Srikant. Mining sequential pat-
terns. In Proceedings of the 11th International Con-
ference on Data Engineering (ICDE95), pages 3–14,
1995.
28
 （五） 成果自評： 
本計畫大致有達成預期目標，並且發表兩篇期刊論文與三篇國際會議論文。研究內
容前兩項成果符合原始計畫構想，而第三項則是與計畫執行中邀訪的國外學者討論
所獲致的成果。而基於顆粒計算與邏輯系統的關係，尚有許多有待釐清的研究主
題，因此這將成為我們後續計畫的主要研究目標。 
30
要課題。我們利用機率的概念，導出決策案例中的模糊偏好關係，以作為決策分
析的基礎。 
 
此次我們除了發表論文外，也與某些學者討論合作的可能性，其中西班牙的 Lluis 
Godo 教授在數理模糊邏輯的研究上有極高的成就，由於其任職於 Spanish 
National Research Council (CSIC)下位於巴塞隆納的機構 Artificial Intelligence 
Research Institute (IIIA)，他也提及國科會與 CSIC之間有合作協議，將來或可循
此管道進行進一步的合作。 
 
與會心得：由於此次會議在歐洲舉行，歐洲學者向來在形式邏輯上有很強的傳
統，因此相較於 IEEE 的 Fuzzy Systems 研討會較重視應用，此次研討會邏輯及
理論的論文較多。但因數理模糊邏輯的技術門檻較高，常使應用研究者望之卻
步，而另一方面，缺乏理論基礎的 ad hoc方法，亦常常成為 Fuzzy Systems受人
詬病之處，如何使理論與應用的研究更密切結合，仍然是此一領域持續需要關注
的課題。 
  
攜回資料：研討會會議論文集光碟共一冊，將致贈中研院資訊所圖書館以供查閱。 
 
(i.e., for all x, y, z ∈ U , if (x, y) ∈ R and (y, z) ∈ R, then
(x, z) ∈ R). An equivalence relation partitions the universe
U into a family of equivalence classes so that each element
of U belongs to exactly one of these equivalence classes. In
other words, there exist U1, U2, · · · , Uk ⊆ U such that U =
∪ki=1Ui, Ui ∩ Uj = ∅ for i 6= j; and for x, y ∈ U , (x, y) ∈
R iff there exists i such that both x and y ∈ Ui. Thus, we
can write an equivalence class of R as [x]R if it contains the
element x. Note that [x]R = [y]R iff (x, y) ∈ R.
According to Pawlak, knowledge is deep-seated in the clas-
sification capabilities of human beings. A classification is sim-
ply a partition of the universe, so an approximation space can
construct basic knowledge about the objects in the universe.
In philosophy, the extension of a concept is defined as the ob-
jects that are instances of the concept. For example, the exten-
sion of the concept “bird” is simply the set of all birds in the
universe. Pawlak identified a concept by its extension. Thus,
a subset of the universe is called a concept or a category in
rough set theory.
Given an approximation space (U,R), each equivalence
class of R is called an R-basic category or R-basic concept,
and any union of R-basic categories is called an R-category.
Now, for an arbitrary concept X ⊆ U , we are interested
in defining X by using R-basic categories. We say that X
is R-definable, if X is an R-category; otherwise X is R-
undefinable. TheR-definable concepts are also calledR-exact
sets, whereas R-undefinable concepts are said to be R-inexact
or R-rough. When the approximation space is explicit from
the context, we simply omit the qualifier R and call a set an
exact set or a rough set.
A rough set can be approximated from below and above by
two exact sets. The lower approximation and upper approx-
imation of X are denoted by RX and RX respectively, and
defined as follows:
RX = {x ∈ U | [x]R ⊆ X}, (1)
RX = {x ∈ U | [x]R ∩X 6= ∅}. (2)
2.2 Classical data tables
Although an approximation space is an abstract framework
used to represent classification knowledge, it can easily be de-
rived from a concrete data table (DT). The following formal
definition of a data table is given in [20].
Definition 1 A data table1 is a tuple
T = (U,A, {Vi | i ∈ A}, {fi | i ∈ A}), (3)
where U is a nonempty finite set, called the universe; A is a
nonempty finite set of primitive attributes; for each i ∈ A, Vi
is the domain of values for i; and for each i ∈ A, fi : U → Vi
is a total function.
An attribute in A is usually denoted by the lower-case letters
i or a. In decision analysis, we assume the set of attributes is
partitioned into {d}∪(A−{d}), where d is called the decision
attribute, and the remaining attributes in A − {d} are called
condition attributes.
1Also called knowledge representation systems, information sys-
tems, or attribute-value systems
Let T = (U,A, {Vi | i ∈ A}, {fi | i ∈ A}) be a data table
and B ⊆ A be a subset of attributes. Then, we can define an
equivalence relation, called the indiscernibility relation based
on B, as
ind(B) = {(x, y) | x, y ∈ U, fi(x) = fi(y)∀i ∈ B}. (4)
In other words, x and y are B-indiscernible if they have the
same values with respect to all the attributes in B. Conse-
quently, for each B ⊆ A, (U, ind(B)) is an approximation
space.
Let B be a subset of attributes. Then, an object x is B-
consistent (with respect to the decision attribute d) if [x]B ⊆
[x]d, where [x]B = [x]ind(B) and [x]d = [x]ind({d}); other-
wise, x is B-inconsistent. In other words, x is a B-consistent
object in a data table if it satisfies the following indiscernibil-
ity principle for all y ∈ U :
(x, y) ∈ ind(B)⇒ (x, y) ∈ ind({d}). (5)
That is, the objects that have the same evaluations as x on the
condition attributes should have the same decision class as-
signment as x. Note that a B-consistent object corresponds to
a decision rule whose decision class can be determined con-
sistently based on the values of the attributes in B.
In [20], a decision logic (DL) is proposed for the represen-
tation of knowledge discovered from data tables. The basic
alphabet of a DL consists of a finite set of attribute symbols
A, and a finite set of value symbols Vi for i ∈ A. Thus, the
syntax of DL can be defined as follows.
Definition 2
1. An atomic formula of DL is a descriptor (i, v), where
i ∈ A and v ∈ Vi.
2. The set of well-formed formulas (wffs) of a DL is the
smallest set that contains the atomic formulas and is
closed under the Boolean connectives ¬,∧, and ∨.
3. If ϕ and ψ are wffs of a DL, then ϕ −→ ψ is a rule in the
DL, where ϕ is called the antecedent of the rule and ψ is
the consequent.
A data table T = (U,A, {Vi | i ∈ A}, {fi | i ∈ A}) relates
to a given DL if there is a bijection τ : A → A such that, for
every a ∈ A, Vτ(a) = Va. Thus, by somewhat abusing the no-
tation, we usually denote an atomic formula as (i, v), where
i ∈ A and v ∈ Vi if the data tables are clear from the con-
text. Intuitively, each element in the universe of a data table
corresponds to a data record, and an atomic formula (which
is in fact an attribute-value pair) describes the value of some
attribute in the data record. Thus, the atomic formulas (and
therefore the wffs) can be satisfied or not satisfied by each
data record. This results in a satisfaction relation between the
universe and the set of wffs.
Definition 3 Given a DL and a data table T = (U,A, {Vi |
i ∈ A}, {fi | i ∈ A}) related to it, the satisfaction relation
|=T between U and the wffs of the DL is defined inductively
as follows (the subscript T is omitted for brevity).
1. x |= (i, v) iff fi(x) = v,
2. x |= ¬ϕ iff x 6|= ϕ,
2.4 Preference-ordered decision logic
To represent the rules induced from a PODT, preference-
ordered decision logic (PODL) is proposed in [5]. The syntax
of PODL is the same as that of DL, except for the form of the
atomic formulas. An atomic formula in PODL is a descriptor
in the form of (≥i, v) or (≤i, v), where i ∈ A and v ∈ Vi.
The satisfaction relation between U and the set of PODL wffs
is defined in the same way as the relation for DL wffs, ex-
cept that the satisfaction of an atomic formula is defined by
x |= (≥i, v) iff fi(x)  v, and by x |= (≤i, v) iff v  fi(x).
By using DRSA, two kinds of rules can be induced from a
PODT explicitly. Let P be a reduct and t ∈ Vd. Then, for an
object x ∈ P (Cl≥t ), we can derive∧
i∈P
(≥i, fi(x)) −→ (≥d, t), (22)
and for an object x ∈ P (Cl≤t ), we can derive∧
i∈P
(≤i, fi(x)) −→ (≤d, t). (23)
Note that if x is P -consistent, these two formulas also hold for
t = fd(x).
3 DRSA for Uncertain Data Tables
3.1 Preference-ordered Uncertain Data Tables
Although the PODT can represent multi-criteria decision
cases effectively, it inherits the restriction of the classical DT
so that uncertain information can not be represented. An un-
certain data table is a generalization of a DT such that the
values of some or all of its attributes are imprecise [4, 1]. An
analogous generalization can be applied to PODT to define
preference-ordered uncertain data tables (POUDT). Formally,
a POUDT is a tuple
T = (U,A, {(Vi,i) | i ∈ A}, {fi | i ∈ A}), (24)
where U,A, {(Vi,i) | i ∈ A} are defined as above, and for
each i ∈ A, fi : U → 2Vi−{∅}. The intuition about a POUDT
is that the evaluation of criterion i for an object x belongs to
fi(x), although the evaluation is not known exactly. When
fi(x) is a singleton, we say that the evaluation is precise. If
all evaluations of T are precise, then T is said to be precise.
Furthermore, we assume that for each criterion i, the Cartesian
plane Vi×Vi is endowed with a uniform measure µi. Thus, for
each subset S ⊆ Vi×Vi, µi(S) is a non-negative real number.
When Vi is a finite set, we take µi(S) as the cardinality of S;
and when Vi is a real interval, we take µi(S) as the area of S.
3.2 Fuzzy dominance relation
In a POUDT, the objects may have imprecise evaluations with
respect to the condition criteria and imprecise assignments to
decision classes. Thus, the dominance relation between ob-
jects can not be determined with certainty. Instead, we define
a degree of dominance between two objects with respect to
each criterion i based on the associated measures µi. For-
mally, the dominance relation with respect to the criterion i is
a fuzzy relation Di : U × U → [0, 1] such that for all x 6= y,
Di(x, y) =
µi({(v1, v2) | v1 i v2, v1 ∈ fi(x), v2 ∈ fi(y)})
µi(fi(x)× fi(y)) ,
(25)
and Di(x, x) = 1 for any x ∈ U .
An example of computing the degree of dominance is
shown in Figure 1, where the evaluation of x with respect
to criterion i, denoted by s(x), is in a continuous interval
fi(x) = [lx, ux]. In this example, Di(x, y) is the ratio of the
area of ABC over the area of ABDE, i.e., ux−ly2(uy−ly) .
lx ux
ly
uy
s(x) = s( y)
s(x) > s( y)
s(x) < s( y)
A B
C
D E
Figure 1: The degree of dominance between x and y
After deriving the fuzzy dominance relation for each cri-
terion, we can aggregate all the relations into P -dominance
relations for any subset of criteria P . Let ⊗, ⊕ and → de-
note, respectively, a t-norm, an s-norm and an implication
operation2 on [0, 1]. Then, the fuzzy P dominance relation
DP : U × U → [0, 1] is defined as
DP (x, y) =
⊗
i∈P
Di(x, y). (26)
Since the dominance relation is a fuzzy relation, the satisfac-
tion of the dominance principle is a matter of degree. Thus,
the degree of adherence of (x, y) to the dominance principle
with respect to a subset of condition criteria P is defined as
δP (x, y) = DP (x, y)→ Dd(x, y), (27)
and the degree of P -consistency of x is defined as
δP (x) =
⊗
y∈U
(δP (x, y)⊗ δP (y, x)). (28)
Let T be a POUDT. Then, the quality of the classification of
T based on the set of criteria P is defined as
γP (T ) =
∑
x∈U δP (x)
|U | . (29)
Note that γP (T ) is monotonic with respect toP , i.e., γQ(T ) ≤
γP (T ) if Q ⊆ P . Thus, we can define every minimal subset
P ⊆ C such that γP (T ) = γC(T ) as a reduct of C, where
2For the properties of these operations, see a standard reference
on fuzzy logic, such as [14]
