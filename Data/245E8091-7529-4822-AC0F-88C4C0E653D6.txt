2 
Keywords: IP address lookups, dynamic routing table, fast routing table update, segment trees, 
elementary intervals, most specific prefixes, balanced search trees, TCAM, Intel IXP2400, binary 
perfect code, credit-based fair packet scheduling algorithm 
 
4 
1.前言 
The Internet traffic growth has been increased in an unprecedented rate recently. The 
exponential growth rate of the traffic on the Internet is mostly due to the advent of the World 
Wide Web (WWW). Backbone routers with link speed at several 10-gigabits per second (Gbps), 
such as OC-192, 10 Gigabits and OC-768, 40 Gigabits, are thus commonly deployed. To handle 
gigabit-per-second traffic rates, these backbone routers must be able to forward millions of 
packets per second at each port. Moreover, Internet host count also rapidly increases. The scarcity 
of IP addresses makes us use the Classless Inter-Domain Routing (CIDR) [7] scheme. With CIDR, 
routers aggregate forwarding information by storing address prefixes that represent a group of 
addresses reachable through the same interface. Each route entry (prefix) in the routing table can 
have an arbitrary length ranging from 1 to 32 bits, instead of 8, 16, 24 bits in Classful Address 
scheme. As a result, the IP lookups in routers become the most critical tasks for packet 
forwarding. The IP lookups work as follows. When a router receives a packet, the destination 
address in the packet’s header is used to lookup the routing table for finding the best output port 
to send the packet. There may be more than one route entries in the routing table that match the 
destination address. Therefore, it may require some techniques to determine the best match. Since 
the longest prefix from all the matched entries is the best match for a destination address, the IP 
lookup problem becomes the longest prefix match (LPM) problem. 
 
2. 研究目的 
To design a good IP address lookup scheme, we need to consider the following key 
requirements: lookup speed, memory usage, scalability, and update speed.  
　 Lookup speed: To handle the increased traffic, the IP address lookup scheme should quickly 
decide where to send the packets. This is clearly important for routers not to be the bottlenecks in 
the Internet. 
　 Memory usage: Schemes that are memory-efficient can also lead to good search time 
because compact data structures can fit in fast but small cache memory. 
　 Scalability: Due to the fast growth of Internet traffic and increasing demand for the IP 
addresses, it is expected that routing table size is growing and the address prefix length will 
significantly increases when switching to IPv6. Today, IPv6 has been gaining wider acceptance to 
replace its predecessor, IPv4, and has early deployed in Europe, Asia, and North America. 
Therefore, an IP address lookup scheme must have the capability of handling large routing tables 
and longer addresses. 
　 Update: Route update reflects the changes of the network topology or routing policies. 
Packets are not routed on an optimal path until the routing table is updated. Thus, longer update 
latency can result in a transient increase in packet round-trip times and packet loss. If the route 
update algorithm in a router cannot keep up with all of the updates, a condition known as route 
flap may be may triggered. When a route flap takes place, a router processing a backlog of route 
updates is incorrectly marked as being unreachable by other routers. This state change creates a 
domino effect of route updates that can cripple a network. Currently, the Internet has a peak of 
hundreds or even thousands of BGP updates per second, seen in real routers or in the 
6 
and increases the memory requirement of data structure. Also, the memory requirement for PST 
may be too high for IPv6. 
Besides the binary balanced tree based schemes proposed for dynamic routing tables, two 
schemes based multiway search trees were also proposed in [15] and [26]. Warkhede and others 
[26] proposed a B-tree data structure called multiway range tree (MRT). MRT finds the longest 
matching prefix in O(log N) time and takes O(mlogm N) time for inserting or deleting a prefix, 
where m is the order of the B-tree and N is the number of prefixes in the routing table. MRT is 
not only suitable for dynamic routing tables because of its fast lookup and update speed, but also 
can be used for solving the range match problem. However, there are many duplicate endpoints 
stored in the internal nodes, and a prefix may be stored in at most m – 1 nodes per B-tree level, 
where m is the order of the B-tree. This drawback increases the update time and requires a larger 
memory. Lu and Sahni [15] proposed another B-tree data structure called prefix in B-tree (PIBT) 
for solving this drawback and hence used memory more efficiently. A crucial difference between 
PIBT and MRT is that each prefix is stored in O(1) B-tree nodes per B-tree level in PIBT, while 
each prefix is stored in O(m) nodes per level in MRT. The asymptotic complexity to find the 
longest matching prefix is the same and the measured time for this operation is also nearly the 
same for PIBT and MRT. Both schemes used in prefix routing tables take O(n) memory. However, 
PIBT is more memory efficient than MRT by a constant factor. 
 
4. 研究方法 
4.1 Fast Binary and Multiway Prefix Searches for Packet Forwarding 
We first present a systematic method to compare prefixes of different lengths. The list 
of prefixes can then be sorted and stored in a sequential array, which is contrary to the linked 
lists used in most of trie-based structures. Next, fast binary and multiway prefix searches 
assisted by auxiliary prefixes are proposed. We also developed a 32-bit representation to 
encode the prefixes of different lengths. For the large routing tables currently available on 
the Internet, the proposed multiway prefix search can achieve the worst-case number of 
memory accesses of three and four if the sizes of the CPU cache lines are 64 bytes and 32 
bytes, respectively. The IPv4 simulation results show that the proposed prefix searches 
outperform the existing IP lookup schemes in terms of lookup times and memory 
consumption. The simulations using IPv6 routing tables also show the performance 
advantages of the proposed binary prefix searches. We also analyze the performance of the 
existing lookup schemes by concurrently considering the lookup speed, the update speed, 
and the memory consumption. Although the update speed of the proposed prefix search is 
worse than the dynamic routing table schemes with log(N) complexity for a table of N 
prefixes, our analysis shows that the overall performance of the proposed binary prefix 
search outperforms all the existing schemes. 
 
4.2 Dynamic Routing Tables Using Simple Balanced Search Trees 
We develop a new dynamic routing table algorithm. The proposed data structure consists of 
a collection of balanced binary search trees. The search, insertion, and deletion operations can be 
8 
5-D packet classification on Intel IXP2400 which base on the hierarchal binary prefix search. We 
also propose a cache scheme for our implement because of we observe that network traffic has 
strong locality. Traditionally cache scheme decrease the performance when cache miss. Our 
propose cache scheme does not only cache the packet header but also the node index which 
switch to next dimension in the search process. We can use the information to accelerate the 
implemented packet classification scheme. Thus the cache still has contribution even when cache 
misses. 
 
4.6 Efficient Routing Lookup Algorithms Using Binary Perfect Codes 
We design a new non pre-computation scheme called Perfect Code Tree (PCT) based on 
binomial spanning trees and three kinds of binary perfect codes which are (7, 4) Hamming code, 
(15, 11) Hamming code and (23, 12) Golay code. In light of data bit length which binary perfect 
codes can decode, we build three independent data structures which are Hamming7 tree, 
Hamming15 tree and Golay tree. When finding the longest prefix match, we search these three 
trees in the order of Golay tree, Hamming15 tree and Hamming7 tree. Based on PCT, the number 
of memory access of search, insertion, and deletion operations is almost equal to 5 in the average 
case. Comparing with the schemes building dynamic routing tables such as PBOB (prefix binary 
tree on binary tree) and MRT (multiway range tree), PCT gets better performance than PBOB and 
MRT, and memory requirement of PCT is near to those pre-computation based schemes. 
Moreover, PCT also scales well to IPv6 and large routing tables. 
Besides PCT, we also propose several parallel lookup schemes named Simple Parallel 
Lookup (SPL), Length-based Parallel Lookup (LPL), Multi-Packet and Length-based Parallel 
Lookup (MPLPL) by using binary perfect codes. In these parallel lookup systems, Hamming7 
tree, Hamming15 tree and Golay tree are built as search units. Thus, we can do the search 
operation on search units in parallel to improve the performance of lookup speed. 
 
4.7 Improved Method for Credit Based Fair Scheduling Algorithm 
We propose a new fair scheduling algorithm called Weighted Class Fair Queuing (WCFQ). 
WCFQ is a low complexity scheduler with bandwidth fairness, and has good delay performance. 
The key idea is that group flows with similar weight into the same flow class. The scheduling 
discipline is divided two part, inter-class scheduling and intra-scheduling. The inter-class 
scheduling employs credit-based scheme to choose the flow class. Next, the intra-class 
scheduling decides what flow within the flow class is scheduled in similar round-robin manner. 
We also provide a trivial analysis to explain our complexity and fairness. 
 
 
 
 
 
 
 
0
1,000
2,000
3,000
4,000
5,000
6,000
7,000
8,000
9,000
10,000
AS6447 AS6447 AS2493 Amsterdam London Frankfurt
Database
M
em
or
y U
sag
e (
KB
)
PBOB
MSPT
BTRIE
MRT
PIBT
PBOB-16
MSPT-16
BTRIE-16
BRS-16
BPS-16
HCA-16
BLS
Lulea
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
AS6447 AS6447 AS2493 Amsterdam London Frankfurt
Database
Se
arc
h T
im
e (
μ
sec
)
PBOB
MSPT
BTRIE
MRT
PIBT
PBOB-16
MSPT-16
BTRIE-16
BRS-16
BPS-16
HCA-16
BLS
Lulea
0
0.5
1
1.5
2
2.5
AS6447 AS6447 AS2493 Amsterdam London Frankfurt
Database
Up
da
te 
Tim
e (
μ
sec
) PBOB
MSPT
BTRIE
MRT
PIBT
PBOB-16
MSPT-16
BTRIE-16
Figure 2. Performance of the Most Specific Prefix Tree. 
 10 
12 
[7] S. Fuller, T. Li, J. Yu, and K. Varadhan, “Classless inter-domain routing (CIDR): An address 
assignment and aggregation strategy,” RFC 1519, September 1993. 
[8] P. Gupta, S Lin, and N. McKeown, “Routing lookups in hardware at memory access 
speeds,” Proceeding of IEEE INFOCOM, pages 1240-1247, April 1998. 
[9] P. Gupta and N. McKeown, “Algorithms for packet classification,” IEEE Network Special 
Issue, vol. 15, no. 2, pages 24-32, March/April 2001. 
[10] C. Labovitz, G. Malan and F. Jahabnian, “Internet routing instability,” Proceeding of ACM 
SIGCOMM, pages 115-126, September 1997. 
[11] B. Lampson, V. Srinivasan, and G. Varghese, “IP lookups using multiway and multicolumn 
search,” IEEE/ACM Transaction on Networking, pp. 324–334, June 1999. 
[12] H. Lu, K. Kim, and S. Sahni, “Prefix and interval-partitioned dynamic IP router-tables,” 
IEEE Transactions on Computers, vol. 54, no. 5, pages 545-557, May 2005. 
[13] H. Lu and S. Sahni, “O(logn) dynamic router-tables for prefixes and ranges,” IEEE 
Transactions on Computers, vol. 53, no. 10, pages 1217-1230, October 2004. 
[14] H. Lu and S. Sahni, “Enhanced interval trees for dynamic IP router-tables,” IEEE 
Transactions on Computers, vol. 53, no. 12, pages 1615-1628, December 2004. 
[15] H. Lu and S. Sahni, “A B-tree dynamic router-table design,” IEEE Transactions on 
Computers, vol. 54, no. 7, pages 813-824, July 2005. 
[16] E. McCreight, “Priority Search Trees,” SIAM Journal on Computing, vol. 14, no. 1, pages 
257-276, 1985. 
[17] D. Meyer, University of Oregon Route Views Archive Project, at 
http://archive.routeviews.org/. 
[18] D. Morrison, “PATRICIA—practical algorithm to retrieve information coded in 
alphanumeric,” J. ACM, vol. 15, no. 4, pp. 514–534, Oct. 1968. 
[19] S. Nilsson and G. Karlsson, “IP-Address lookup using LC-trie,” IEEE Journal of Selected 
Areas in Communications, vol. 17, no. 6, pages 1083-1092, June 1999. 
[20] C. Partridge, et. al., “A 50-Gb/s IP router,” IEEE/ACM Transactions on Networking, vol. 6, 
no. 3, pages 237-248, June 1998. 
[21] M. Ruiz-Sanchez, E. Biersack, and W. Dabbous, “Survey and taxonomy of IP address 
lookup algorithms,” IEEE Network, vol. 15, no. 2, pages 8-23, March/April 2001. 
[22] S. Sahni and K. Kim, “An O(logn) dynamic router-table design,” IEEE Transactions on 
Computers, vol. 53, no. 3, pages 351-363, March 2004. 
[23] K. Sklower, “A Tree-Based Packet Routing Table for Berkely UNIX,” Technical report, 
University of California, Berkeley, 1993. 
[24] V. Srinivasan and G. Varghese, “Fast IP lookups using controlled prefix expansion,” ACM 
Transactions on Computer Systems, pages 1-40, February 1999. 
[25] M. Waldvogel, G. Varghese, J. Turner, and B. Plattner, “Scalable high-speed IP routing 
lookups,” Proceeding of ACM SIGCOMM, pages 25-36, September 1997. 
[26] P. Warkhede, S. Suri, and G. Varghese, “Multiway range trees: scalable IP lookup with fast 
updates,” Computer Networks, Vol. 44, No. 3, pp. 289-303, February 2004. 
[27] P. Gupta and N. McKeown, “Dynamic Algorithms with Worst-Case Performance for Packet 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                    2006   年 10 月 29  日 
報告人姓名   張燕光 
 
服務機構
及職稱 
 國立成功大學 資訊工程系 
         助理教授 
     時間 
會議 
     地點 
2006 年 1 月 16 日至 2006 年
1 月 19 日 
Sendai, Japan 
本會核定
補助文號
NSC－94－2213－E－006－026 
會議 
名稱 
 (中文) 2006 年資訊網路國際會議 
 (英文) The International Conference on Information Networking 2006 
發表 
論文 
題目 
 (中文) 以簡單的平衡二元收尋樹為基礎之動態路由表設計 
 (英文) Dynamic Routing Tables Using Simple Balanced Search Trees 
附件三
 
表 Y04 
Dynamic Routing Tables Using Simple Balanced  
Search Trees 
 
Y.-K. Chang and Y.-C. Lin 
Department of Computer Science and Information Engineering 
National Cheng Kung University 
Tainan, Taiwan R.O.C. 
ykchang@mail.ncku.edu.tw 
 
Abstract. Various schemes for high-performance IP address lookups have been 
proposed recently. Pre-computations are usually used by the special designed 
IP address lookup algorithms for better performance in terms of lookup speed 
and memory requirement. However, the disadvantage of the pre-computation 
based schemes is that when a single prefix is added or deleted, the entire data 
structure may need to be rebuilt. Rebuilding the entire data structure seriously 
affects the lookup performance of a backbone router and thus not suitable for 
dynamic routing tables. 
In this paper, we develop a new dynamic routing table algorithm. The 
proposed data structure consists of a collection of balanced binary search trees. 
The search, insertion, and deletion operations can be finished in O(log N) time, 
where N is the number of prefixes in a routing table. Comparing with the best 
existing dynamic routing table algorithm which is PBOB (Prefix Binary tree 
On Binary tree), our experiment results using the realistic routing tables show 
that the proposed scheme performs better than PBOB in terms of lookup 
speed, insertion time, deletion time, and memory requirement. 
  
Keywords：IP address lookup, dynamic routing table, fast update, precomputation  
1. Introduction 
To handle gigabit-per-second traffic rates, the current backbone routers must 
be able to forward millions of packets per second at each port. The IP address 
lookup is the most critical task in the router. When a router receives a packet, the 
destination address in the packet’s header is used to lookup the routing table. There 
may be more than one route entries in the routing table that match the destination 
address. Therefore, it may require some comparisons with every route entries to 
determine which one is the longest matching. The longest route from all the 
matched entries is called the longest prefix match (LPM). The IP address lookup 
problem becomes a longest prefix matching problem. 
To design a good IP address lookup scheme, we should consider four key 
aspects: lookup speed, storage requirement, update time and scalability. For any 
scheme, it is hard to perform well in all aspects. The update process is the concern 
 1
Database 
(year-mouth) 
AS6447 
(2000-4) 
AS6447 
(2002-4) 
AS6447 
(2005-4) 
number of prefixes 79530 124798 163535 
Level-1 prefixes 73891(92.9%) 114745 (91.9%) 150245 (91.9%) 
Level-2 prefixes 4874 (6.1%) 8496 (6.8%) 11135 (6.8%) 
Level-3 prefixes 642 (0.8%) 1290 (1%) 1775 (1.1%) 
Level-4 prefixes 104 (0.1%) 235 (0.2%) 329 (0.2%) 
Level-5 prefixes 17 29 45 
Level-6 prefixes 2 3 6 
Table 1: Prefix enclosure analysis for three realistic routing tables. 
 
 
2. Analysis of Covering and Covered Prefixes 
The Border Gateway Protocol (BGP) is the de facto standard inter-domain 
routing protocol in the Internet. BGP provides loop-free inter-domain routing between 
autonomous systems, each consisting of a set of routers that operate under the same 
administration. The address space represented by an advertised BGP prefix may be a 
sub-block of another existing prefix. The former is called a covered prefix and the 
latter a covering prefix. For example, the address block 140.116.82.0/24 is covered by 
another address block 140.116.0.0/16.  
We analyzed three BGP routing tables obtained from [1], and obtained the 
detailed statistics for the enclosure relationship between the covered and covering 
prefixes. Theoretically, one prefix may be covered by at most 31 prefixes for IPv4. 
The prefix and the ones that cover it form a prefix enclosure chain. Therefore, the 
theoretical worse-case enclosure chain size is 32 for IPv4. Contrary to the definition 
in [7], we number the prefixes in a bottom-up manner. For example, if a prefix 
enclosure chain consists of five prefixes Pi for i = 5 to 1, where P5 is the shortest 
prefix that covers the other four prefixes and P1 is the longest one that is covered by 
the other four prefixes. The prefixes like P1 that do not cover any other prefix in the 
routing table are called the level-1 prefixes. The prefixes that only contain level-1 
prefixes are called level-2 prefixes, and so on. Figure 1 shows the enclosure 
relationship between covering and covered prefixes marked with their levels for an 
example routing table that has the enclosure chain size of 5. Our analysis shows that 
the chain size is 6 for all the tables we examined. We further show the number of 
prefixes in each level for all the three routing tables in Table 1. The level-1 prefixes 
account for about 92% ~ 93% of the prefixes in a routing table. The level-2 prefixes 
account for about 6% ~ 7% of the prefixes. The prefixes in other levels only account 
for less than 1% of the total prefixes. Since the prefixes in each level are disjoint, it is 
straightforward to design dynamic routing lookup algorithms with search and update 
complexity of O(log N) for a routing table consisting of N prefixes. 
 3
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Algorithm Search(d, root[], s)  
{ // d is the destination address, s is the number of trees  
01 for ( i = 1 ; i <= s ; i++ ) {  
02  x = root[i]; 
03  while ( x ≠ NULL ) { 
04   if ( x.prefix ⊇ d ) return x.prefix; //A ⊇ B denotes A covers B 
05   else  
06    if ( d < x ) x = x.LeftChild; 
07    else x = x.RightChild; 
08  } //end while 
09 } //end for 
10 return default_prefix 
} 
 
Figure 2: Algorithm to find the longest prefix match. 
 
Algorithm Insert (P, root[], s)
{ // P is the newly added prefix, s is the number of trees 
01 for ( i = 1 ; i <= s ; i++ ) {  
02  x = root[i];  
03  while ( x ≠ NULL ) { 
04   if ( P = x.prefix ) return;  
05   if ( P ⊆ x.prefix ) {   /* x.prefix encloses prefix P */ 
06    Q = x.prefix; x.prefix = P; P = Q; break; } 
07   if ( x.prefix ⊆ P ) break;   
08   if ( P > x.prefix )  
09    if ( x.RightChild = NULL ) { 
10     x.RightChild = Create_A_Node(P); 
11     BST_Balancing(root[i], x.RightChild); return; 
12    } else x = x.RightChild;  
13   else 
14    if ( x.LeftChild = NULL ) { 
15     x.LeftChild = Create_A_Node(P);  
16     BST_Balancing(root[i], x.LeftChild); return; 
17    } else x = x.LeftChild; 
18  } //end while 
19 } //end for 
20 root[++s] = Create_A_Node(P); // The level is increased by one 
} 
 
 
Figure 3: Algorithm to insert a prefix. 
 
 
 
 5
the node associated with Y from the node associated with D and checking if Y is 
covered by Q. Also notice that it is possible that Q is at level-k for k ≥ i+2 (i.e., no 
prefixes in the level-m tree cover D, m = i+1 to k-1). In this case, there must be a 
prefix enclosure chain for D consisting of a prefix in each level-j for j = k to i. Thus, 
prefix Q must remain in the level-k tree because of the prefix enclosure chain for D.  
Figure 4 shows the details of the deletion algorithm. The while loop search for 
the prefix D in each tree rooted at root[i] for i = 1 to s. When a node x associated with 
D is found in level-i tree, the function Search_a_Tree_for_Enclosure(root[i+1], D) as 
shown in line 5 is performed to find a prefix Q that contains D in the level-(i+1) tree. 
If such Q does not exist, we delete node x from the level-i tree directly by using the 
standard balanced binary search tree deletion algorithm as shown in line 6. As 
explained above, we don’t worry about if a prefix containing prefix D exists in the 
higher level tree than i. Lines 7-17 take care when a prefix Q that contains D exists in 
the level-(i+1) tree. If the right subtree of node x is not empty, it must exist a node y 
which is the x’s successor. Otherwise, x’s successor is the node already visited and 
recorded in line 21. If y exists and y.prefix is contained in Q, we replace x with y and 
delete node y directly, as shown in lines 10-11. Similar operations are done for the 
largest prefix in the left subtree of node x. 
 
Algorithm Delete(D, root[], s)
{ // y and z are the successor and predecessor of node x containing prefix D 
01 for ( i = 1 ; i ≤ s ; i++ ) {  
02 x = root[i]; y = z = NULL; 
03 while ( x ≠ NULL ) { 
04 if ( x.prefix = D ) { 
05 q = Search_a_Tree_for_Enclosure(root[i+1], D); 
06 if ( q = NULL ) { BST_Delete(root[i], x); return; } 
07 else { 
08 if ( x.RightChild ≠ NULL ) y = Smallest_Prefix(x.RightChild); 
09 if ( y ≠ NULL and q.prefix ⊇ y.prefix ) { 
10 x.prefix = y.prefix; 
11 BST_Delete(root[i], y); return; } 
12 if ( x.LeftChild ≠ NULL ) z = Largest_Prefix(x.LeftChild); 
13 if ( z ≠ NULL and q.prefix ⊇ z.prefix ) { 
14 x.prefix = z.prefix; 
15 BST_Delete(root[i], z); return; } 
16   x.prefix = q.prefix; D = q.prefix; break;  
17 } 
18  } 
19 if ( D ⊃ x.prefix ) break; // D contains x.prefix and break inner loop 
20 if ( D ⊂ x.prefix ) return; // D does not exist 
21 if ( D < x ) { y = x; x = x.LeftChild; } 
22 else { z = x; x = x.RightChild; } 
23 } //end while 
24 } //end for 
}  
Figure 4: Algorithm to delete a prefix. 
 7
and the level-2 tree account for 97%-99% prefixes in the routing table, the average 
performance of the lookup, insertion, and deletion times are very well. Since the 
number of the balanced tree is constant, the search, insertion, and deletion operations 
can be finished in O(log N) time, where N is the number of prefixes. Our experiment 
results show that the proposed scheme performs better than PBOB, the best dynamic 
routing table algorithm, in terms of lookup speed, insertion time, deletion time, and 
memory requirement. 
 
 
 
schemes AS6447 (79,560) 
AS6447 
(124,824) 
AS6447 
(163,574) 
PBOB 1,525 2,374 3,101 
Proposed scheme 1,330 2,087 2,734 
schemes AS6447 (79,560) 
AS6447 
(124,824) 
AS6447 
(163,574) 
PBOB 1.02 1.37 1.57 
Proposed scheme 0.65 0.79 0.88 
(b) Average search time (microseconds) 
(a) Memory requirements (KB) 
Table 2: Performance statistics. 
schemes AS6447 (79,560) 
AS6447 
(124,824) 
AS6447 
(163,574) 
PBOB 0.90 0.89 1.01 
Proposed scheme 0.71 0.75 0.76 
(c) Average insertion time (microseconds) 
schemes AS6447 (79,560) 
AS6447 
(124,824) 
AS6447 
(163,574) 
PBOB 0.57 0.57 0.64 
Proposed scheme 0.47 0.48 0.49 
(d) Average deletion time (microseconds) 
 
 
 
 
 
 9
