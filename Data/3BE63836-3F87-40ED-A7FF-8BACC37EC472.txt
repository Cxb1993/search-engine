1行政院國家科學委員會專題研究計畫成果報告
在考量受限時段平行機上總流程時間最小化之研究(I)
Minimizing total completion time
on parallel machines with availability constraints
計 畫 編 號：NSC 96-2221-E-228 -003
執 行 期 限：96 年 8 月 1 日至 97 年 7 月 31 日
主 持 人：林建宏 景文科技大學國際貿易系
計畫參與人員：朱芳宏、周欣怡、劉遠馨、吳珮瑾
一、中文摘要
大多數的排程文獻都假設機器在生產過程中均能連續加工。在實務上，機器並非是一直
連續加工的。例如：在執行預防保養作業或發生當機的情況下，機器就無法加工的。因此更
注重實際的排程模式是應將限制機器加工的條件納入考慮。在本研究，我們將討論考量受限
時段平行機上總流程時間最小化的問題，其中一部機器有受限時段的限制。我們將應用這些
問題的上界限與下界限的性質，並以字典搜尋法來求解最佳解。
關鍵詞：平行機排程、總流程時間、受限時段
Abstract
Most literature on scheduling assumes that machines are continuously available over the
planning time horizon. In practice, a machine may not always be available, for example, due to
preventive maintenance or machine breaks. Therefore, a more realistic scheduling model should
take the limited machine availability into account. In the study, we will investigate the total
completion time minimization scheduling problems on identical parallel machines having one
machine with an availability constraint. We attempt to use the upper and lower bounds for these
problems and apply lexicographic search to find the optimal solutions.
Keywords: Parallel machine scheduling; Total completion time; Availability constraints
3Liman (1993)討論雙平行機總完工時間最小化的問題，其中一部機器僅在部分時間可以加
工。他們討論 SPT 法則的應用與提出最佳解性質與動態規劃法；Mosheiov (1994)除了討論
與 Lee 與 Liman (1993)相同的問題外，更增加討論到多機的環境與更廣義的可用時段問
題。他們應用 SPT 順序，發展出總流程時間下界限的計算方式。另外 Lee (1996) 考慮單機
與平行機的情況，僅有一個受限時段發生在不同的工作情況，並且針對不同準則與可接續
與不可接續工件進行討論，每個討論的情況，都提供動態規劃或啟發式演算法。最近 Lee 與
Chen (2000) 討論多平行機的總加權總流程時間極小化的問題，每部機器均有維修時段(受
限時段)，他們針對維修時段的組合提出下列兩種情況：一是維修獨立的情況；另一是維修
相依的情況，前者是任意數目的機器可在同一時間進行維修作業；而後者是因為維修資源
有限，維修作業僅能在一部機器進行，不可以與其他機器同時進行，並提出一個分支界限
法來處理這問題。Liao、Zao 與 Lin (2008)針對 Lee 與 Liman (1993)的問題，提出更進一步
的最佳解性質並運用分支界限法來求解最佳解，其計算效能遠優於他們提出的動態規劃
法。
四、問題描述與演算法
本研究分別討論兩部與三部平行機的兩種作業加工情況。其中僅有一部機器有受限時
段的情形，而該無法加工的時段是確定已知，除了該時段之外，這部機器仍是正常加工的
狀態。這問題是個相當實際的情況，常見於生產機台的需要進行預防保養、定期檢查及重
新設定(定位)的情形。
雙平行機中僅有一段受限時段的情況
首先，雙平行機問題的描述與相關符號說明如下：有兩部平行機 1M 與 2M 。其中機器
1M 有受限時段( ,s f )，即是在時段( ,s f )無法進行加工，而時段( 0, s )與時間 f 之後可進行
加工， 2M 則永遠可以進行加工的狀態。
在不考慮受限時段的情況下時，平行機的總流程時間最小化問題，可應用 SPT 法則即
可獲得最佳解。而針對有一部機器的受限時段為( ,s )的情況，Lee 與 Liman (1993) 應用
SPT 法則所提出該問題最佳解的性質，Liao、Zao 與 Lin (2008) 更進一步提出相關的性質。
針對受限時段( ,s f )的問題，大都在討論最大完成時間(makespan)的準則，尚未有總流程時
間準則的探討。我們先提出這問題的上界限值演算法，此可先行檢查最佳解直接獲得，若
無法直接得到最佳解，其結果可做為本問題總流程時間的上界限值與時段( 0, s )中分派工作
負荷(workload)的下界限。
步驟 1： 先將所有工件按照處理時間的 SPT 次序重新編號。
步驟 2： 將編號奇數工件(工件 1, 工件 3, …)的處理時間依序加總，直到其總和為小於或
等於 s的最大整數(以 oddA 表示)。相同地，也針對編號偶數工件進行相同計算，得
到其總和(以 evenA 表示)。
步驟 3： 令  max ,odd evenA A A 。將構成 A的工件分派至 (0, )s ，剩餘的工件仍按照 SPT 次
序分派至 2M 上。當 2M 上分派的處理時間總和超過 f 時，再交錯分派工件於 1M 與
51kk 。
步驟 7： 當 0k ，則回到步驟 2，否則停止演算法。最佳解為F 。
三部平行機中僅有一段受限時段的情況
三部平行機問題的描述與相關符號說明如下：有三部平行機 1M 、 2M 與 3M 。其中機
器 1M 有受限時段( ,s f )， 2M 與 3M 則永遠可以進行加工的狀態。按照雙機問題的求解程
序，將之延伸到三部機器問題上。在三部機器受限時段( 0, s )前，可以用 SPT 法則得到這部
份總流程時間最小化的結果，此時三部機器上具有相同位置的工件如有互換的情形，是不
會增加這部份總流程時間。
針對 2M 、 3M 與 (0, )s 的前 1n 個工件(共有 13n 個工件，以 1N 來表示)，如果能相互交換
(0, )s 與 2M 或 (0, )s 與 3M 的前 1n 個工件，使得分派到 (0, )s 工作負荷等於 s，則其餘的工件(除
了 1N 外)可按照 SPT 法則，依序派到三部機器中較小工作負荷的機器上，即可得到最佳解。
而所以三機問題的上界限值的演算法如下：
步驟 1： 先將所有工件按照處理時間的 SPT 次序重新編號。
步驟 2： 將工件依序輪流編入工件集合 iT ( 1,2,3i )中。分別計算 iT 內的工件處理時間總
和，直到各值均達到小於或等於 s的最大整數(以 iA 表示)。
步驟 3： 令  1 2 3max , ,A A A A 。將構成 A的工件分派至 (0, )s ，剩餘的工件交錯分派至 2M
與 3M 上，當分派的處理時間總和超過 f 時，再交錯分派工件於三部機器上。
步驟 4： 此時，若 A s ，則得到最佳解並結束演算法。若 3A A ，則需增加一個虛擬工件
0J (處理時間為 0)放於 (0, )s 的第一個位置。令 1n 為分派至 (0, )s 上的工件數目(若
有 0J ，則包括 0J )。
步驟 5： 針對 (0, )s 與 2M 或 (0, )s 與 3M 前 1n 個工件(共有 2 1n 個工件)，將相同位置工件兩兩
互換，使得 A越接近 s。
步驟 6： 若 A s ，則得到最佳解；否則為上界限值。
在上述演算法的步驟 5 中，由於在 2M 、 3M 與 (0, )s 的相同位置共有三個工件，所以會
產生隸屬相同位置的兩個工件處理時間差值，即是位於 (0, )s 工件分別與位於 2M 及 3M 工件
的處理時間差值。若相同位置的工件，都被排入時段( 0, s )，則破壞總流程時間最小化。所
以，在使用 ( )P s 演算法計算目前工件處理時間差值是否能滿足 ( )s A 時，須增加一個參數
來避免此一現象的發生。以 ( )R k 來表示為工件 k 所屬的位置，當工件 k 被排入 ( )s A
前，先檢查另一相同 ( )R k 的工件是否被排入 ( )s A 中。
在經過上述演算法之後，若未得到最佳解( maxA s )，會產生時段 (0, )s 的最大工作負荷
maxA ，可作為在時段( 0, s )工作負荷的下界限值。而接下來應用字典搜尋法來求解時，其步
驟中與前述(雙機問題)的差異是剩餘工件的分派方式：先交錯分派至 2M 與 3M 上，當分派
的處理時間總和超過 f 時，再交錯分派工件於三部機器上(即優先分派在最小的工作負荷的
機器上)，可得到總流程時間的最小化。
7當工件處理時間區間增大時，其工件處理時間的差值也增大，會使得無法填滿( 0, s )區間
的情況增加，所以 maxA s 個數減少，而相對的計算時間花費較多。而α值的增加，代表( 0, s )
區間增加，所以參與上界限演算法的工件數( (0, )s 與 2M 上的前 1n 個工件數目)也增加，有助於
maxA s 情況的發生。
而三機問題的計算結果如表 2，其表格的形式與表 1 相同。隨然在上界限值演算法中，
有 2 1n 個工件(處理時間的差值)參與計算，但相同位置的工件，也是一項演算法中的限制。以
表 2 所產生的計算結果趨勢與雙機問題大致相近。就總體而言，本研究所發展的演算法，求
解出問題的最佳解是相當有效率的。
表 2 考量受限時段三平行機問題的計算結果
ip ~ (1,20) (1,100) (1,300) (1,500)
 n maxA s
個數
CPU 時間 max
A s
個數
CPU 時間 max
A s
個數
CPU 時間 max
A s
個數
CPU 時間
0.2 10 65 0.000 20 0.031 11 0.015 6 0.000
20 97 0.000 68 0.015 46 0.031 27 0.031
40 100 0.000 99 0.078 98 0.515 89 0.812
60 100 0.031 100 0.031 99 101.703 100 0.063
80 100 0.063 100 0.062 100 0.015 100 0.031
100 100 0.047 100 0.062 100 0.062 100 0.062
0.3 10 69 0.016 45 0.047 10 0.046 11 0.016
20 100 0.000 79 0.266 60 0.062 50 0.078
40 100 0.031 100 0.016 98 6.922 98 3.219
60 100 0.047 100 0.016 100 0.063 100 0.094
80 100 0.078 100 0.016 100 0.078 99 0.078 (1)*
100 100 0.110 100 0.031 100 0.140 100 0.109
0.4 10 71 0.031 74 0.000 13 0.031 7 0.031
20 100 0.000 85 0.094 80 0.141 58 0.203
40 100 0.031 99 7.797 100 0.047 99 62.812
60 100 0.047 100 0.047 100 0.031 100 0.049
80 100 0.063 100 0.110 100 0.094 100 0.063
100 100 0.078 100 0.016 100 0.063 100 0.156
*在括號中的數值為 CPU 計算時間超過 300 秒的題目數。
計畫成果自評
針對平行機考量受限時段的問題，在文獻上大都針對最大完成時間準則的討論，尚未有
總流程時間準則的探討，本研究即是針對總流程時間準則進行討論。先以平行機(未考量受限
時段)在總流程時間準則的特性，將問題的最佳解的情況，以最大完成時間來完成確認，以發
展在受限時段情況的雙平行機問題的上界限值演算法。其結果若無法直接指出最佳解，其結
果也可受限時段前的分派工件負荷下界限值，也提升演算法的計算效能。
