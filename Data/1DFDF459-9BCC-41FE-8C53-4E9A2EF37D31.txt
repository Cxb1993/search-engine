2行政院國家科學委員會專題研究計畫結案報告
分散式阻斷攻擊防禦機制之研發與設計
計畫編號：95-2221-E-009-095-MY3
執行期間：95 年 08 月 01 日至 98 年 07 月 31 日
主持人：謝續平
執行單位：國立交通大學資訊工程學系
摘要
隨著電腦網路技術的不斷進展，人們的日常生活和電腦網路產生了密切的關聯，
同時，網路攻擊也成了一個值得注意的議題。 近年來，分散式阻斷攻擊成了諸
多網路攻擊事件中最引人注目的焦點。 攻擊者藉由入侵眾多安全防護較薄弱的
電腦系統，進而利用這些被入侵的系統對網路伺服器進行阻斷式攻擊。 在攻擊
期間，該網路伺服器的使用者將感受到明顯的網路延遲、大量的封包遺失，或根
本無法與伺服器建立網路連線，攻擊者據此可輕易達到其阻斷服務之效果。 反
之，要抵抗或偵測這類型的網路攻擊事件是非常困難的，其主要原因來自於網路
上大量的防護層級較低的電腦、偽造網路位址的使用、攻擊封包與合法封包間的
高相似度以及分散式網路管理所造成的困難。
第一年計劃:
所要探討的主題為分散式阻斷攻擊的防禦技術。 為了要設計合宜且可行的
防禦機制，首先我們得對分散式阻斷攻擊有深入的了解。 因此，在本篇論文的
第一部分，我們針對分散式阻斷攻擊的成因、分散式阻斷攻擊的型態以及常見的
攻擊程式做廣泛的分析與整理。然後提出一個利用路徑指紋來抵擋偽造網路位置
的分散式阻斷攻擊的架構。
第二年計劃:
將針對追蹤單一封包攻擊來源的問題進行研究。在此提出一種有效利用空間
的方法, 稱作基於邊緣的路由表示法”。依照此表示法,我們更提出一個一般性
的追縱來源方法，允許路線被編碼成少數幾個位元。這個方法可以向下兼容、或
向上延伸。在此計劃中, 封包的整個路由過程會被劃分成幾個部份路徑的集合，
透過額外 ICMP 的封包一起傳給目的地的主機。雖然使用大量的 ICMP 封包數字也
許會對路由器和網路產生極大的負擔。但實驗結果顯示並不然。且數據顯示我們
所提出方法的準確性是相當高的。在 100 Mbps 的網路環境中, 辨認攻擊來源準
確率可達到 99.98% 。由此可見對單一封包 IP 追溯來源，在此所提出的方法是
有效、準確和可行的。
第三年計劃:
提出名為 ANTID 的新方法，它用來過濾與偵測，常利用偽裝封包來規避傳統
的入侵檢測方案的分散式阻斷攻擊。這個被提出的反分散式阻斷攻擊方法是為了
4practice, this overhead is relatively low. Moreover, analytic analysis shows that the
accuracy of the proposed scheme is high. In a network environment with 100 Mbps
links, the accuracy of identifying the attack source reaches 99.98%. This indicates the
proposed scheme is effective, accurate, and feasible for the single packet IP traceback.
Third year project:
We propose a new scheme, called ANTID, for detecting and filtering DDoS attacks
which use spoofed packets to circumvent the conventional intrusion detection schemes.
The proposed anti-DDoS scheme intends to complement, rather than replace
conventional schemes. By embedding in each IP packet a unique path fingerprint that
represents the route an IP packet has traversed, ANTID is able to distinguish IP packets
that traverse different Internet paths. In ANTID, a server maintains for each of its
communicating clients the mapping from the client’s IP address to the corresponding
path fingerprint. The construction and renewal of these mappings is performed in an
on-demand fashion that helps reduce the cost of maintenance. With presence of the
mapping table, the onset of a spoofed DDoS attack can be detected by observing a
surge of spoofed packets. Consequently, spoofed attack packets are filtered so as to
sustain the quality of protected Internet services. ANTID is lightweight, robust, and
incrementally deployable. Our experiment results showed that the proposed scheme
can detect 99.95% spoofed IP packets and can discard them with little collateral
damage to legitimate clients. It also showed that the higher the aggregated attack rate
is, the sooner the attack can be detected.
Keywords: Network Security, Intrusion Detection and Prevention, Distribution
Denial-of-Service (DDoS) Attacks, IP Traceback
64.3.4 Authentication ............................................................................81
4.3.5 Traceback Processing ................................................................84
4.4 Analysis ...................................................................................................85
4.4.1 Overhead Analysis .....................................................................85
4.4.2 Accuracy Analysis ......................................................................89
4.5 Summary.................................................................................................91
5. A Source-End Defense System for DDoS Attacks ...........................................92
5.1 Preliminaries ..........................................................................................92
5.2 Review of D-WARD ...............................................................................95
5.2.1 System Architecture ...................................................................95
5.2.2 Attack Detection.........................................................................96
5.2.3 Attack Response .........................................................................97
5.3 Proposed System ....................................................................................97
5.3.1 Basic Design Concepts ...............................................................98
5.3.2 Detection Phase ..........................................................................99
5.3.3 Initialization Phase...................................................................103
5.3.4 Rate Limiting............................................................................104
5.4 Performance Evaluation......................................................................106
5.4.1 Experimental Results...............................................................106
5.5 Summary...............................................................................................113
6. Conclusion and Future Work..........................................................................114
6.1 Concluding Remarks ...........................................................................115
6.2 Future Work .........................................................................................117
7. Reference ..........................................................................................................118
附件一、可供推廣之研發成果資料表....................................................................128
附件二、計畫成果自評............................................................................................133
1. Introduction
Denial-of-service (DoS) attacks [18,52,80], which intend to disable target
Internet servers from providing services to their clients or to degrade quality of
8packets. Moreover, software vendors will generally issue patches to fix
vulnerabilities immediately after vulnerabilities are discovered. From the
above-mentioned perspectives, vulnerability-based attacks normally can be
prevented by secure programming techniques [4, 35] and sophisticated
administration skills/tools [19, 20, 74, 110], and can be effectively detected and
stopped by IDSs/firewalls and system patches respectively.
Unlike vulnerability-based DoS attacks, flooding-based DoS attacks do not
rely on software vulnerabilities. Instead, they adversely affect the execution of a
target Internet service by simply exhausting some critical resources, such as
network bandwidth, memory space, or CPU computation power. Internet
services being subject to flooding-based DoS attacks mostly have a common
design weakness. That is, in general they will devote some resources in prior to,
or in part of, inspecting the legitimacy of received service requests. Even if the
amount of resources devoted for each service request is small, attackers can still
over-consume these resources by sending a target servers a large number of
malicious service requests. A crucial fact is that distinguishing malicious service
requests from legitimate ones is extremely difficult for target Internet servers.
Malicious service requests are usually very similar, or even identical, to requests
originated from legitimate clients. The high level of similarity generally will lead
to collateral damages to legitimate clients, and this constitutes a major obstacle
to effective DoS defense.
Distributed DoS (DDoS) attacks refer to flooding-based DoS attacks
accomplished with a enormous number of attacking machines distributed over
the Internet. The major difference between DoS and DDoS attacks is in their
scale. In a DDoS attack, many flooding-based DoS streams originated from
multiple machines are arranged to flood selected Internet servers around in the
same time. In this way, the impact of a simple DoS attack can be greatly
amplified. To conduct such a DDoS attack, an attacker first needs to compromise
a sufficient number of computer systems. Then at some later points in time, these
compromised hosts, or simply called zombies, are used to flood chosen Internet
servers in order to jam their Internet links, overload the servers or crash them.
The design of effective DDoS countermeasures is made very complicated
by several reasons. First, the Internet is naturally vulnerable to DDoS attacks.
This is mainly because the Internet was not designed with security issues in mind.
Internet routers simply provide destination-based best-effort packet delivery
10
firewalls, end host operating systems and sometimes on Internet routers, and
currently these reactive approaches are dominant solutions for DDoS attacks.
The final research area focuses on locating the sources of DDoS attack flows.
Though attack traceback provide little help to protect Internet servers from being
attacked, it is considered an essential element for automatic response to DDoS
attacks and the first step to further determine attackers who manipulate
recognized attack zombies. In other words, attack traceback helps construct a
deterrence for future DDoS attacks.
This dissertation is on the defense of DDoS attacks. In particular, according
to the classification on DDoS defense systems, our work is about the following
two types of defense approaches: (1) reactive schemes that enable edge routers
and end host systems to defend against DDoS attacks, and (2) traceback schemes
that allow constructing the Internet paths traversed by DDoS attack flows.
One key consideration in designing effective DDoS countermeasures is to
impose appropriate defense mechanisms at correct positions. Specifically,
defense systems need to be deployed at or before positions where resource
exhaustion occurs. Otherwise, an incorrectly-placed defense system will suffer
from either the ineffectiveness in blocking attack flows or difficulties in
detecting attacks. For instance, consider a DDoS attack that attempts to exhaust
CPU computation power of victims. The persistent high CPU utilization at
victim systems can serve as a signal of the attack, and reactive defense systems
installed on victims can start to discard identified attack packets once an attack
signal is captured. While, without a significant surge on the volume of network
traffic or a observable anomaly in traffic statistics, it is relatively harder for
defense systems installed at Internet routers to sense the occurrence of such
attacks, and consequently they are weak in blocking attack flows. Consider
another attack example that purports to exhaust network bandwidth of a victim
network. In this example, defense systems on Internet routers can detect the
presence of such attack by monitoring network traffics and suppress attack flows
quickly by rate-limiting rules. On the other hand, defense installed on victims
provide little help because dropping identified attack packets at victims would
not help alleviate network congestions on upstream routers.
Hence, in this dissertation, we choose to develop two types of reactive
DDoS defense systems, which are deployed at victim-end and source-end (or,
attacker-end) respectively. The major objective of victim-end defense is to
12
attack flow, and rate-limiting rules are then imposed on attack flows so as to
prevent attack packets from entering the Internet. With a widespread
deployment of this scheme, DDoS attack flows can be confine at their
sources.
1.2 Common Design Guildlines
Before we go into details of each proposed solutions, we first discuss
several design principles that are considered important to the effectiveness of
DDoS defense mechanisms.
 Lightweight Processing: The processing load of DDoS defense systems
must be lightweight. Otherwise, a defense system itself would be the target
of DDoS attacks. An attacker can disable the defense by overloading the
defense system. In particular, modifications or enhancements to routers
should be design very carefully so as not to cause substantial processing
overhead on routers.
 Incremental Deployment: DDoS defense systems should avoid relying on
a significant retrofitting to routers or end host systems in a all-or-nothing
fashion. It is unrealistic to assume that the required retrofit can be
completed within a short period of time. Instead, a feasible solution needs to
support incremental deployment, which makes the defense system gains its
effectiveness with respect to the degree of deployment.
 Loose Cooperation: A DDoS defense system had better avoid a tight
cooperation assumption among different ISP networks. This is because
cooperation normally involves complex coordinations among ISPs and
therefore incurs substantial overhead. This will make deployment of the
DDoS defense mechanism difficult in large networks, such as the Internet.
 Accuracy: An effective DDoS countermeasure should be accurate, in terms
of low false positive ratios and low false negative ratios. Low false positives
mean that the defense will not lead to significant collateral damage to
legitimate traffic, and low false negatives mean that only a negligible
portion of attack traffic is left undetected. More importantly, accuracy must
be maintained all the time even when the DDoS defense mechanism itself is
under some sorts of attacks launched by attackers who possess reasonable
and sufficient resources, such as a complete topological map of the Internet
and the IP addresses of the Internet routers. Attackers would try all the
14
2.1The DDoS Attack Problem
DDoS attacks are simply distributed versions of resource-overwhelming
DoS attacks. As shown in Fig. 2.1, the major difference between a DoS attack
and a DDoS attack is in the their scale –DoS attacks use one attack machine to
generate attack traffic while DDoS attacks use a large numbers of attack
zombies.
Figure 2.1: Denial of Service attacks and Distributed Denial of Service attacks.
Consider a simple DDoS attack that over-consumes bandwidth of a victim
network. In this case, a vast number of large IP packets will be directed to the
victim network when the attack is ongoing. Though individual IP packets toward
the victim seems harmless, a multitude of them can effectively overwhelm the
victim’s network bandwidth or othercritical packet-processing resources.
Consequently requests originated from legitimate clients would not be able to
compete with the malicious flood and has very little chance to acquire good
service from the server. Legitimate clients would experience significant service
degradation for the entire attack period. The DDoS attack streams can even
16
2.1.1 Direct and Indirect DDoS Attacks
According to the way DDoS attack streams are created, DDoS attacks can
be categorized into two classes: direct DDoS attacks and indirect DDoS attacks.
As shown in Fig. 2.3, in a direct DDoS attack, attack streams are generated
directly from attack zombies, while in an indirect DDoS attack, the attacker
takes advantage of other uncompromised systems, generally called reflectors,
to attack victims. Indirect DDoS attacks are also referred to as Distributed
Reflector DoS (DRDoS) attacks [51, 84]. In a DRDoS attack, innocent Internet
servers, which will automatically reply a service request with a relatively
larger (in terms of message size) response message, are selected as a candidate
of a reflector. The property of generating response automatically allows
attackers to further amplify the volume of attack traffic created by zombies.
To conduct a DRDoS attack, an attacker needs to construct a list of
reflectors which will later be used to reflect attack streams. Zombies are
instructed to send a multitude of service requests, with victim’s IP address as 
source IP addresses, to reflectors. And then a larger multitude of response
messages will be returned to the victim. In this way, the attack traffic, in the
form of normal response messages originated from selected innocent reflectors,
wil fil up inbound link bandwidth of the victim’s network.
18
Smurf attack [21] is a well-known DRDoS attack that creates a high
volume of attack traffic using reflectors. In a smurf attack, zombies broadcast
ICMP echo requests [93] with victim IP address as source IP addresses to a
local network. (That is, the destination IP address is an broadcast address, and
victim’s IP address is used as the source IPaddresses.) Computers receiving
the forged ICMP echo requests will return ICMP echo reply messages to the
victim. In this example, it is clear that computers which generate ICMP echo
reply messages are treated as reflectors. With a sufficient number of such
reflectors, the inbound network bandwidth of victim’s network can be 
exhausted. It is worthy to note that sometimes smurf attacks may also inflict
damages on reflectors. Consider that there are n reflectors in the same local
network, and each ICMP echo reply message is s-bit long. Let the attacker
send f ICMP echo requests per second. Then, the outbound bandwidth of
reflectors’ network wil also be exhausted if it is smaler thann*s*f.
In addition to ICMP, attackers can employ many other protocols, such
TCP, HTTP and DNS to trigger the generation of huge amount of network
traffic from innocent computer systems [84]. Via raw socket interfaces [3, 109],
most zombies can send TCP SYN packets, TCP SYN-ACK packets, HTTP
requests and DNS requests, with forged source IP addresses to a corresponding
list of reflectors (i.e. computers listening on a particular TCP port, HTTP
servers and DNS servers), and consequently the victim’snetwork would be
disabled owing to bandwidth exhaustion.
There are still other ways to create bandwidth attacks. For instance, by
connecting two UDP services, each of which generates outputs, we can create
a huge amount of traffics transmitted between the two service machines in an
infinite loop. This will result in denial of services on both service machines
and on intermediary networks between them. One such example is given in
[15], and it is summarized below. Chargen [91] is a service running on port 19.
Whenever an UDP datagram is received, chargen will return an answering
datagram containing a random number (between 0 and 512) of characters.
Echo [92] service runs on port 7. When an UDP datagram is received, the data
from it is sent back in an answering datagram to the original sender. An
attacker can easily connect the chargen service running on one machine to the
echo service on another machine by one forged echo or chargen datagram to a
20
which corresponding to a newly established TCP connection is removed.
Without the last ACK packet delivered from the TCP client, the data structure
describing a pending connection will be maintained for a predefined period of
time, and the memory space allocated for it will be deallocated when timeout.
Figure 2.5: TCP three-way handshaking
The weakness of TCP three-way handshaking is on the allocation of
memory space for half-established connections. This give malicious users a
chance to tie up half-established connection queue using a vast number of TCP
SYN packets, as depicted in Fig. 2.6. In a TCP SYN flooding attack, the
source IP addresses of malicious SYN packets are forged intensionally. As a
result, the last ACK packets corresponding to the malicious SYN packets will
never return to the victim server. By persistently sending a large number of
such malicious SYN packets to the victim, an attacker can effectively stop the
victim from accepting new TCP connections. In this way, services relying
upon TCP connections are disabled.
22
sending zombies attack commands asking them to flood victims with specified
attack streams.
In order to collect zombies rapidly, in general, attackers will use network
exploration tools and security assessment softwares, such as nmap [50] and
nessus [39], to scan a extremely large number of systems. Both nmap and
nessus are capable of detecting vulnerabilities on target machines. Particularly
nmap was designed to identify available hosts on the Internet and to recognize
operating systems and Internet services running on those hosts. It can also
detect firewalls deployed in the network being scanned. By cooperating with
nmap, nessus is capable of discovering known vulnerabilities on target
machines automatically. Both systems were originally designed to help system
administrators identify security flaws on machines in their administrative
domain. Unfortunately from the dark side, both systems can also help attackers
find weaknesses of computer systems and subsequently allow attackers to
penetrate vulnerable systems.
In addition to the infection process, the attack softwares running on
masters and zombies are another core of DDoS attacks. Most of DDoS attack
programs are built upon code fragments adopted from other DDoS attack tools.
In other words, DDoS attack tools are enhanced incrementally, and they are
mostly differ in the communication mechanisms between attacker and masters,
and between masters and zombies. Moreover, DDoS attack tools could provide
different customizations in creating attack flows. In the following, we will
summarize characteristics of known DDoS attack tools according to some
reports on them [8, 22–24, 26, 41–45].
Trinoo
Trinoo [23, 43] is a DDoS attack tool which creates UDP flooding attacks.
The attacker sends attack commands to masters via TCP, and masters
communicate with zombies via UDP. According to attack instructions, trinoo
zombies will flood victims using UDP packets of a given size, over random
UDP ports and for a specified attack duration. Notice that the source IP
addresses of the UDP flooding packets are not spoofed. Both masters and
zombies are protected by password, i.e. communications to masters or zombies
require a password. Moreover, if a second connection is made to a master (or
zombie) while the attacker is connected, an alert message containing the IP
24
telnet-like session to communicate with masters, and masters send attack
commands to zombies via ICMP echo reply packets. Finally, stacheldraht can
launch UDP flooding, TCP SYN flooding, ICMP echo flooding, and smurf
attacks.
Shaft
Shaft [24, 41, 42] is a DDoS tool which creates UDP flooding, TCP SYN
flooding, TCP ACK flooding, ICMP flooding or a mixture of them. The source
ports and source IP addresses of shaft attack packets are randomized. The
attacker communicates with masters via telnet connections. Communications
between masters and zombies are accomplished via UDP packets.
Furthermore a “ticket” mechanism is developed to keep track of 
individual zombies. Whenever a shaft zombie starts up, it announces its
availability to its default masterby sending a “new” command and a password. 
Upon receipt of the announcement, the corresponding master returns a ticket
number to the zombie. Afterwards, both the password and the ticket number
must have a match for a zombie to execute an attack command. Finally, the
creators of shaft attack tool are particularly interested in packet statistics. A
shaft master can query zombies for obtaining the amount of malicious traffic
generated. This might be used to estimate the amount of traffic created by shaft
zombies.
TFN2k
As its name indicates, TFN2k [8,22] is a successor of TFN. It employs
UDP flooding, TCP SYN flooding, ICMP flooding, smurf attacks or a mixture
of them. It can also obfuscates the traffic sources by forging source IP
addresses randomly or within a specific range of IP addresses. This allows
TFN attack packets circumventing ingress filters [49]. (Ingress filtering will be
described later in this chapter.) In addition, TFN2k is capable of creating
random mal-formatted IP packets which can crash some IP protocol stacks.
Moreover, TFN2k was designed to compile on different operating systems,
such as Linux, Solaris and Windows platforms. In other words, these systems
are susceptible to be infected by TFN2k.
Communications between an TFN2k attacker and masters are
26
2.3Fundamental Challenge to DDoS Defense
DDoS attacks are rooted on the resource asymmetry between zombies and
the victim under attack. They are, in fact, simple brute force attacks. It is the
simplicity makes DDoS attacks very hard to defend against. Additionally, there
are other factors that constitute obstacles to the design of effective DDoS
countermeasures, and major obstacles are described below.
IP header fields can be spoofed. As above-mentioned, most DDoS attack
tools are capable of forging arbitrary IP header fields, such as source IP
address, source/destination ports and other header fields. Especially they
can create IP packets with source IP addresses being spoofed randomly or
within a specific range of IP addresses. IP spoofing allows attackers
canceling the sources of attack streams or attack instructions. Thus,
attackers run at low risk of being caught because the source IP addresses
are often implausible. It is very hard for victims to trace back to zombies,
and it is even harder to find the attackers controlling zombies and masters.
Furthermore, IP spoofing helps attackers to circumvent sophisticate
queuing algorithm [2, 62], which help share limited resource fair among
several participants. It is also worthy to note that IP spoofing is a key to
create DRDoS attacks. In DRDoS attacks, zombies use IP spoofing to
deceive selected Internet servers into flooding victims.
Attack streams are composed of legitimate-like packets. To avoid being
detected and filtered by intrusion detection systems and firewalls, DDoS
attack tools tend to use common or expected communication protocols as
vehicles of their attack streams. Most DDoS attack tools use TCP, UDP,
ICMP, upper layer protocols or a mixture of them to flood the victim. For
instance, attackers can use a huge number of large-size HTTP requests to
saturate the network bandwidth of a web server or to overwhelm the web
server. IDSs that use explicit attack patterns to detect attack packets
cannot work well in this situation. Furthermore legitimate packets could
suffer from collateral damages. In other words, filtering attack packets in
an effective and accurate manner remains a very challenging issue.
28
systems focus on locating the sources of attack streams. With IP traceback
mechanisms, attacker would run higher risk of being discovered, and this may
help stop future attacks.
2.4.1 Points of Deployment
Figure 2.7: Candidate points of deployment
Fig. 2.7 depicts candidate points for the deployment of DDoS defense
systems. Basically, DDoS defense can be placed at victim-end elements,
source-end elements, or multiple defense nodes, including victim-end elements,
intermediate network components and source-end elements. In the context of
this dissertation, victim-end elements include end host systems and edge
routers which serve as ingress and egress points for subnetworks. Intermediate
network components mainly direct to Internet routers. Source-end elements,
much like victim-end elements, comprise also end host systems and edge
routers. Though victim-end elements and source-end elements both refer to
almost the same set of network entities, the functions of DDoS defense
systems deploy on victim-end elements and source-end elements are very
different, and this will be make clear later in this section.
First, consider a victim-end deployment for DDoS defense systems.
DDoS defense systems in this category protect an end hosts if the defenses are
installed on an end host system. Or they protect a set of end hosts connecting
to an edge router if the defense are deployed on an edge router. Owing to the
30
allocate resources redundantly. By replicating critical resources, the difficulty
of conducting a DDOS attack on the server is arisen. This naive approach
might work in defending against a DoS attack or a small-scale DDoS attack.
However, it certainly cannot cope with DDoS attacks with a large number of
zombies.
Another simple proactive approach is to secure all computers systems on
the Internet. By minimizing the candidates of attack zombies, we may have a
chance to weaken the power of DDoS attacks at some level, and
resource-replicating approaches might work better. However, as
aforementioned, this approach is infeasible on large scale networks, such as the
Internet, and in other words, though approaches described above might be
helpful, they simply cannot stop DDoS attacks.
A well-known proactive scheme for addressing DDoS attacks is so-called
ingress filtering [49, 70]. Ingress filtering is a source-end defense system.
Assume that an edge router has the set of valid IP addresses used by computer
systems connecting to it. Then an ingress filter, installed on an edge router, is
capable of prohibiting attackers within the originating network from launching
DDoS attacks with forged source IP addresses that do not conform to valid IP
addresses. In this way, ingress filters installed at the periphery networks can
help reduce the power of spoofed DDoS attacks. Another similar approach,
named DPF, is proposed in [82]. DPF addressed DDoS attacks by preventing
spoofed IP packets from reaching their destinations. In DPF, given the
reachability constraints imposed by routing topology, a border gateway can
determine whether an incoming IP packet is valid or not by inspecting its
inscribed source/destination IP addresses. DPF requires only 18% of
deployment in Internet AS topologies to achieve a synergistic filtering effect.
However, its ultimate effect is identical to that of a widely deploy ingress
filtering scheme.
Secure Overlay Service (SOS) [60,61] is proposed to protect a predefined
set of Internet servers and clients from DDoS attacks. In brief, the SOS
employs a set of overlay nodes, secure overlay tunneling, and filtering to
control access to protected sites. SOS works well under simple congestion
based DDoS attacks, but it is vulnerable under two more intelligent attacks
[113]. A mechanism for protecting web servers from DDoS attacks, called
WebSOS [33], is built on the SOS architecture and the use of TLS/SSL [40,
32
components responsible for attack filtering start to distinguish malicious
packets from legal ones. Identified attack packets will be dropped, or
rate-limiting rules will be imposed on identified attack flows. In the following,
we will group reactive defense approaches according to their deployment, and
present an overview on each schemes.
Victim-end DDoS defense
A preliminary study on detecting and responding to DDoS attack with
chi-square statistic and entropy is presented in [47, 48]. Techniques for DDoS
detection and response is briefly introduced, while the effectiveness and
reliability of the proposed approach is not evaluated. There are still some other
schemes detecting DDoS attacks with statistical techniques [72, 111]. These
schemes mostly focus on detecting attacks, and responding techniques are
seldom discussed.
PacketScore [31, 64] is another scheme using statistical techniques to
detect DDoS attacks. In PacketScore, profiles of incoming traffic are compared
with normal traffic profiles in order to detect anomalies. Given the attributes of
an incoming IP packets (i.e. IP header fields), PacketScore system computes
“Conditional Legitimate Probability”(CLP) of the incoming packet, and by
comparing the CLP of each packet with a dynamically adjusted threshold,
attack packets can be identified and discarded selectively.
NetBouncer [106] is a victim-end solution to DDoS attacks. Upon the
receipt of an incoming packet, a NetBouncer device determines the legitimacy
of the packet by challenging the sender. Several techniques for
client-legitimacy test are discussed. HIF [85,87] is also a victim-end DDoS
defense. It detects DDoS attacks by monitoring the source IP addresses of
incoming packets. A surge in the number of previously unobserved source IP
addresses is considered a signal of DDoS attacks. Subsequently, packets with
unobserved source IP addresses are discarded. HCF [57] uses the TTL
information inscribed in each IP packets to identified spoofed packets. Since
spoofed packets generally do not traversed the Internet path between the victim
and the IP address being spoofed, spoofed packets will arrive at the victim with
an incorrect TTL value. In this way, spoofed packets, which constituting a
majority of DDoS packets, can be identified and then discarded.
34
then instructs the gateway which is considered closest to the attack source to
block attack flows.
PI [115], similar with HCF, focus on identifying spoofed DDoS packets.
In PI, Internet routers inscribe one or two bits into the IP Identification field.
As a result, IP packets traversing the same Internet path will carry an identical
path identifier in their Identification field. IP packets coming from different
Internet paths are unlikely to have the same path identifier. In this way, PI
enables victim to distinguish legitimate packets from legitimate ones.
Instead of identifying spoofed IP packets, SIFF [114] allows constructing
a privileged communication channel between two communication parties. A
three-way handshake protocol is developed to establish privileged channels.
After a three-way handshake protocol, a legitimate clients can acquire a
“capability” to insert into its privileged packets.An IP packet without
capability will be treated as unprivileged, and a packet with forged capability
will be discarded. In this way, SIFF helps Internet servers to maintain their
availability to their clients.
In [103, 104] an IP traceback method is employed to construct the attack
graph, and subsequently IP packets marked with one of network edges in the
attack graph are discarded This scheme suffers from the large number of
packets required to construct the attack graph. And, it may mis-classify
legitimate packets as attack packets if legitimate packets ever traversed the
network edge in the attack graph.
Source-end DDoS defense
To block attack streams in the first place, several schemes were proposed
to detect and stop attacks at their sources. One such kind of approach, called
Source Router Preferential Dropping (SRPD), is proposed in [46]. SRPD
monitors high-rate outgoing flows, and if 29
the response time of a remote network exceeds a predefined threshold,
packets belonging to the high-rate flows destined to that remote network will
be dropped probabilistically. Another source-end DDoS defense system, called
D-WARD, is presented in [76]. DWARD monitors various types of protocols.
With a set of predefined thresholds in packet sending rate or the ratio of
36
techniques for adjusting marking probability are studied in [86]. And, the
effectiveness of PPM under various parameter settings is analyzed in [1, 69].
Deterministic Packet Marking (DPM) [9,10] also employs packet marking
techniques to identify attack paths. Instead of marking packets with a
probabilistic method, in DPM, IP packets are marked deterministically when
entering the network. Each edge routers are responsible for assuring the source
of IP packets by marking a segment of its 32-bit IP address in IP packets. In
this way, downstream routers need not participate in the packet marking
process, and the number of packets needed for path construction is reduced.
An alternative way for IP traceback, called messaging, is to have Internet
router transmit additional packets carrying path information to the destination.
As shown in Fig. 2.9 whenever an IP packet arrives, the receiving router
determines a probability (typically 1/20000) to send an addition ICMP
message, containing the IP address of the forwarding router and some content
of transmitted IP packet, to the destination. The main idea of this approach is
that a sufficient number of DDoS attack packets will trigger the generation of
such ICMP messages, and therefore a victims can reconstruct attack paths after
receiving enough such ICMP packets.
Figure 2.9: Messaging schemes
Hop-by-hop tracing refers to approaches recursively identifying routers
on attack paths from the victim to the source of attack streams. The simplest
hop-by-hop tracing is to manually log onto routers nearest the victim and
decide next upstream routers on the attack path. Sometimes this approach is
also referred to as link testing. By repeating this procedure, we can reach the
sources of DDoS attack streams. Its main drawback is that substantial
38
legitimate-like packets. The presence of IP spoofing further makes DDoS attacks
even harder to defend against.
In the first part of this chapter, we have briefly introduced fundamental
causes of DDoS attacks, followed by a classification of DDoS attack flows, types
of resource exhaustion and DDoS attack tools. Investigation presented here helps
understand DDoS attacks better and supports designing appropriate and effective
DDoS defense and response.
Next, we turned our attention to existing DDoS defense systems. Major
obstacles to effective DDoS defense are identified. Deployment of defense
mechanisms is discussed. Afterwards, we classified existing DDoS defense
systems into three major groups, and then elaborated key concepts and technical
details of defense approaches in each group. Points in flavor of or against these
solutions are also given.
In one word, this chapter provides necessary background knowledge for
study on DDoS attacks and their countermeasures. It serves a useful foundation
for better understanding DDoS attacks, and would help readers to better
comprehend our DDoS defense mechanism presented in the following chapters.
3. Defending Against Spoofed DDoS Attacks with Path Fingerprint
In this chapter, we propose a new scheme, called ANTID, for detecting and
filtering DDoS attacks which use spoofed packets to circumvent conventional
intrusion detection schemes. The proposed anti-DDoS scheme intends to
complement, rather than replace conventional schemes. By embedding in each IP
packet a unique path fingerprint that represents the route an IP packet has
traversed, ANTID is able to distinguish IP packets that traverse different Internet
paths. In ANTID, a server maintains for each of its communicating clients the
mapping from the client’s IP address to the corespondingpath fingerprint. The
construction and renewal of these mappings is performed in an ondemand
fashion that helps reduce the cost of maintenance. With presence of the mapping
table, the onset of a spoofed DDoS attack can be detected by observing a surge of
spoofed packets. Consequently, spoofed attack packets are filtered so as to
sustain the quality of protected Internet services. ANTID is lightweight, robust,
and incrementally deployable. Our experiment results showed that the proposed
scheme can detect 99.95% spoofed IP packets and can discard them with little
collateral damage to legitimate clients. It also showed that the higher the
40
hop-count information from the TTL field, spoofed IP packets can be easily
identified and then be discarded when the victim is under attack. However, this
scheme has problems in its basic assumption, that is, a DDoS attacker can obtain
the hop-count value between the victim and a spoofed IP address. As we will
show in Section 3.2, acquiring the hopcount information requires only two
traceroute operations. Thus, hop-count filtering is likely to be defected by
sophisticated DDoS attacks that can adjust the initial TTL value according to
traceroute results.
Based on the 32-bit source IP address, an IP filtering technique for
defending against DDoS attacks is proposed [85, 87]. In this approach, the
number of new IP addresses connecting to the protected server is monitored, and
IP addresses of frequently contacted clients are learned from past
communications. A surge in the number of new IP addresses is considered as a
signal of the onset of a spoofed DDoS attack. Then, packets with source IP
addresses not found in the IP address database will be discarded during the attack.
This approach suffers from several drawbacks. First, it cannot distinguish flash
crowd events from real spoofed DDoS attacks. Second, before launching a real
DDoS attack, an attacker can slowly pollute the IP address database of the victim
by sending the victim a set of malicious packets with an IP address to be spoofed.
Then, the attacker can use those IP addresses used before to attack the target.
Although it is indicated [85] that such an attack can be prevented by increasing
the period over which IP addresses must appear to be considered frequent, this
approach, on the other hand, will exclude some legitimate clients from the IP
address database. Subsequently, the number of legitimate clients allowed to
access the service is reduced. In other words, the effectiveness of defending
against spoofed DDoS attacks is not significant since some frequent clients may
be prohibited from accessing the protected service.
Recall that in PI [115], each participating router marks some bits (one bit or
two bits) in the Identification field of an IP packet according to the router’s IP 
address and the TTL value in the IP header. In this way, an IP packet will arrive
at its destination along with a unique identifier representing the path it has
traversed. Since the marking is deterministic, packets traversing the same path
will share an identical path identifier. With this scheme, the path identifier of a
single identified attack packet will provide the victim the ability to filter
subsequent attack packets with the same path identifier. However, the motivation
of using this approach is unclear. Since the victim is capable of detecting a single
42
Since a spoofed IP packet is unlikely to have a path fingerprint identical to
that of the source IP address being spoofed, a destination host can identify a
majority of spoofed IP packets and then discard these packets when it is under
spoofed DDoS attacks. From this point of view, establishing the mapping table,
which contains the mappings from communicating peers’ IP addresses to their 
corresponding path fingerprints, is essential to the effectiveness of our approach.
Theoretically, it seems that the mapping table should37contain the mappings of
all live IP addresses so that an Internet server under attacks can judge IP packets
sent from every possible IP addresses on the Internet. However, from a practice
perspective, it is usually unnecessary to do so since the set of IP addresses which
frequently visit a normal site usually takes a relatively small portion of all liveIP
addresses [58, 85]. At the same time, building such a mapping table containing
only frequently contacted clients will greatly reduce the storage requirement and
lookup time of an Internet server. Thus, in addition to the proposed scheme for
identifying/filtering spoofed IP packets with path fingerprints, we give an
efficient method that enables an Internet server to construct and update the
database in an on-demand fashion. In this way, a mapping of an IP address is
created or updated only when the Internet server receives an IP packet from the
IP address or when there are changes on the Internet path between the server and
the IP address.
There are two execution modes in the proposed scheme, namely monitor
mode and filter mode. By default, the proposed scheme stays in the monitor
mode. In this mode, the proposed scheme collects and updates the path
fingerprints of clients who want to connect to the protected Internet server. No
spoofed packet is discarded in this mode. However, once the rate of spoofed
packets received exceeds a pre-defined threshold, the proposed scheme switches
to the filter mode. In the filter mode, spoofed packets and IP packets sent from
infrequently contacted clients (that is, clients whose IP addresses and
correspondent path fingerprints are not yet recorded) are discarded to guarantee
service quality to frequent clients.
ANTID has the advantages of strong incremental deployment property,
lightweight processing load for marking, decoding and filtering, strong incentive
of deployment. It does not require cooperations between ISP networks, and the
filtering of spoofed DDoS packets is performed on a per packet basis. ANTID
also possesses other useful characteristics that are not present in other schemes
[57,115]. First, it can maintain high accuracy(i.e. low false negative ratio and low
44
a victim V, with source IP address S. To dodge the hop-count filtering
mechanism installed at V, the attacker A must acquire the number of
intermediate routers between S and V. To achieve this objective, A must first
obtain the IP address of the default gateway of S, i.e. the IP address of R2. (Here,
it is assumed that an Internet host has the same default gateway for both inbound
and outbound traffic. In other words, the ingress and egress routers of an Internet
host are identical.) As shown in step (1) of the figure, A can easily obtain the IP
address of R2 by39using traceroute to obtain the list of routers between A and S.
Next, as shown in step (2),to acquire the number of hops between S and V, A can
issue another traceroute command to explore the list of routers between itself and
V. By setting the IP SOURCEROUTE option on, traceroute packets are forced to
traverse R2, and A can successfully obtain the number of intermediate routers
and their IP addresses between S and V.
Figure 3.1: A two steps scenario for remotely exploring the number of hops between two end
hosts
To illustrate the feasibility of the scenario presented above, an example of
exploring the list of routers between two remote sites is demonstrated. The
following example is conducted by using the trace route program in FreeBSD 5.0.
In the following example, A stands for “140.113.209.21” and S stands for
“140.112.2.100”. Then, V is“140.113.216.190”. First, the atacker in 
“140.113.209.21” explores the default gatewayof “140.112.2.100” by issuing the 
command trace route 140.112.2.100. Fig 3.2(a) shows the result of this command,
and according to this figure, the IP address of the default gateway of S is
“140.112.1.13”. Afterwards, the atacker issues another traceroute command:
trace route -g 140.112.1.13 140.113.216.190, and the correspondent result is
46
for defending against spoofed DDoS attacks. It intends to complement, rather
than replace existing schemes.
The basic of ANTID is the validation of an IP packet via its source IP
address and the path fingerprint embedded in it. In this section, the computation
of a path fingerprint is first described, and then the inspection algorithm for
identifying spoofed IP packets is presented. Next, an efficient approach for
constructing a table that contains the mappings of IP addresses and their path
fingerprints is proposed. Finally, the details of detecting a spoofed DDoS attack
are shown, and subsequent packet filtering operations are examined.
3.3.1 Path Fingerprinting and Spoofed Packet Inspection
To generate a path fingerprint representing the route an IP packet
traversed, it is assumed that each participating router assigns each of its
network interface a n-bit random number, and these random numbers are kept
securely. These numbers should not be disclosed. Additionally, we assume that
Internet routers are secure, and it is hard for malicious users to eavesdrop
traffic by tapping on network links between Internet core routers.
In ANTID, a path fingerprint of an IP packet is composed of two fields, a
d-bit distance field and a n-bit path identification (PID) field, where the former
represents the number of intermediate routers traversed, and the latter denotes
an identifier derived from the random numbers associated with the traversed
network interfaces in the route. The path fingerprint of an IP packet is stored in
the IP packet header, and thus it is delivered to the destination host along with
the packet. Moreover, we also assume that a pf-flag bit in the IP packet header
is available for indicating the start of path fingerprinting. Later in this section,
we will discuss the allocation of (1 + d + n) bits in the IP packet header fields.
The path fingerprinting procedure is presented as follows. Whenever a
participating router receives an IP packet, it first examines the pf-flag field. If
it is unset, i.e. 0,42the receiving router is then aware of that it is the first
participating router the packet encountered in the path. In this case, the
receiving router sets the pf-flag bit to 1, sets the distance field to 1 and sets the
path identification field to the random number associated with the incoming
interface of the packet. On the other hand, if the flag bit is already on, i.e. 1,
48
H denotes a hash function.
To allocate space from the IP packet header for storing a path fingerprint,
the 16-bit Identification field in the IP header is chosen to be overloaded.
Issues related to the overloading of this field has been studied and reported
[97]. The 16-bit Identification field is divided into two sub-fields. The first
sub-field is 5-bit long and is used to store the value of distance. It is believed
that 5 bits is sufficient [14,105] since most of Internet paths are shorter than 31
hops. To deal with Internet paths with more than 31 hops, a simple solution is
to user more bits. However, this will reduce remaining bits for storing path
identification, and consequently increase the collision rates. To avoid
increasing hash collisions, in our scheme, we choose to stop increment the
distance field when its value reaches 31. Though in this case, Internet paths
that have more than 31 routers supporting our scheme will have the same
distance value, the path identification field can still help distinguish them if
their path identifications are different. The remaining 11 bits of the
Identification field are used to store path identification. Finally, we propose to
use the un-used bit of the FLAG field in IP header to store the value of the
pf-flag bit.
In this way, filtering spoofed IP packets will be quite straightforward if
the table that contains the mappings of IP addresses and their path fingerprints
is present. In this dissertation, the table is referred to as S2PF (abbrev. of
Source to Path Fingerprint ) table. Here, we first assume that the S2PF table is
available, and its construction will be discussed later.
It is worthy to note that currently we assume that the mapping from of IP
addresses and their path fingerprints is one-to-one mapping. That is, in the
S2PF table, each source IP address occupies a S2PF table entry and has its
own path fingerprint. It is clear that this approaches would lead to a large S2PF
table even if many IP addresses have identical path fingerprints. One possbile
solution to this problem is to use many to one mapping, and this technique
have been introduced in [57]. That is, IP addresses mapping to identical path
fingerprints are collected and expressed using CIDR format. Because hosts in
the same subnets generally traverse the same Internet path to a specific
destination, their path fingerprint will thus be identical. From this point of
view, by aggregating IP addresses with the same path fingerprint allows
storing more mappings without incuring storage expansion. For instance, a
50
3.3.2 The Construction and Update of the S2PF Table
As mentioned previously, there are two execution modes in the proposed
scheme, namely monitor mode and filter mode. In the monitor mode, the S2PF
table is constructed, and its entries will be updated if there are changes in the
topology of Internet or in the Internet paths due to dynamic routing. Notice
that, ANTID does not attempt to build a S2PF table containing all live IP
addresses. Instead, the S2PF table should only have entries for IP addresses
that ever connected to the destination in the past communications. It is
believed that S2PF constructed in this way is sufficient enough because,
according to the report [58], the source IP addresses of a given site in normal
conditions only take a small set of values. Thus, in ANTID, a new S2PF table
entry will be added if the destination host receives IP packets from a new IP
address. Additionally, for applications that has a predetermined set of clients,
the mapping from legitimate clients’ IP addresses and theirpath fingerprints
can be maintained in the S2PF table. Spoof packets with mismatching path
fingerprint can be easily detected and then be discarded. This allows
controlling the size of the S2PF table at a manageable level, and, at the same
time, reducing the time for searching.
There are different ways to learn the mapping of an IP address and its
path fingerprints from communications. One naive approach is to learn the
mappings simply from received IP packets. Whenever an IP packet with a new
source IP address arrives, a new entry is inserted into the S2PF table. Similarly,
the arrival of an IP packet that carries a new path fingerprint different from the
one already stored in the S2PF table would result in an update on the
correspondent S2PF entry. In this way, constructing a S2PF table is quite
straightforward, however, it is clear that this naive approach will not work for
52
table when the routing changes. This update function is important to maintain
an up-to-date S2PF table. In the proposed scheme, upon receipt of an IP packet
that traversed a new Internet path (assuming that the S2PF table has an entry
for the IP address of this packet), the spoofed detection algorithm will classify
this packet as spoofed. Then, in this case, an exploration process will be
invoked at probability r, where 0 ≦ r < 1. Both q and r are used to prevent
our scheme from excessively exploring path fingerprints by ICMP
echo-request/echo-reply messages, and at the same time, we preserve the
ability to insert and update entries in the S2PF table.
Since a S2PF table cannot accommodate the mappings of all possible IP
addresses (there can be at most 232 entries), replacing an old S2PF table entry
with a new one is also an important issue that needs to be addressed.
Whenever a replacement is needed, we currently recommend that several
cache replacement techniques, such as Least Frequently Used (LFU), Least
Recently Used (LRU) and Most Frequently Used (MFU), can be used.
However, in this dissertation, we do not make definitive claim that which
replacement technique is the best for the S2PF table entry replacement, and
determining the best replacement policy warrants further research.
Finally, in ANTID, the number of spoofed packets received is used as a
criterion to determine the onset of a spoofed DDoS attack. Thus, in the
monitor mode, whenever an exploration process is invoked owing to receipt of
a new IP address, the returned path fingerprint is compared against with the
path fingerprint stored in the IP packet. If they are not identical, a counter
spoofing-cnt, which records the number of spoofed packet received in one unit
of time, will be increased by one. Similarly, whenever the inspecting algorithm
returns SPOOFED, the spoofing-cnt is also incremented by one unless the
exploration process returns an path fingerprint identical to the one in the IP
packet. Algorithm 3 shows the pseudo-code for the construction and update of
the S2PF table in the monitor mode.
3.3.3 State Transitions and Spoofed Packet Filtering
As mentioned, the number of spoofed packets received is used as a
criterion for transition between the monitor mode and the filter mode. In the
proposed scheme, the time is divided into a set of uniform time intervals. At
54
in the S2PF table are discarded. The proposed scheme switches from the
filter mode to monitor mode when IP spoofing ceases. This is achieved by
examining the spoofing-cnt. If the value of this counter is smaller than another
threshold T2, ANTID switches back to the monitor mode. In this dissertation,
we provide only a general guideline commonly used in threshold schemes for
setting the two thresholds. The basic principle is to let T1 > T2. It is clear that
this can prevent ANTID from alternating between the two execution modes.
Another important concern is that T1 should be set appropriately such that the
victim server will not falsely switch into the filter mode. Switching to the filter
mode too easily may lead to another form of DoS attack because, in the filter
mode, the victim server only serves previously validated clients.
As to problem of setting the specific values of these parameters, such as q,
r, T1 and T2, we recommend that they should be configurable by administrators
of the Internet servers. These parameters are highly application-dependent.
That is, it is largely relied on administrators to determine their own best
trade-off between the performance and security of the protected sites. Herein,
we only briefly enumerate some factors related to the setting of these
parameters. First, q is related to definition of a “frequent” visitor. q can be set
to 1/10 if a user is considered a frequent users when the users visits the
56
field will be changed securely. Without knowing all the random numbers
associated with the traversed links, the attacker has no knowledge of the
correct seed. In other words, since the random numbers associated with
network links are kept securely, it is very difficult for an attacker to control
path fingerprint received by the victim. Thus, the best an attacker can do is
to set random seed in the fingerprint field and the source IP field. However,
this approach is infeasible since it is very unlikely that the randomly
spoofed source IP address will exist in the S2PF table at the destination host
or that these attack packets can arrive at the destination along with a correct
path fingerprint. The probability for a match is 1/2(d+n) (in our scheme, (d +
n)=16). Next, consider a more sophisticated case that an attacker can
carefully select a spoofed IP address and can set an appropriate value in the
distance field (setting an appropriate initial value in the distance field can be
achieved by using the technique presented in Section 3.2). In this case, only
very few attack packets can pass the spoofed packet detection. It is because
that the best an attacker can do is to fill the path identification field with a
random value and then only the fraction 1/2n (in our scheme, n=11) of attack
packets can arrive at the destination along with a correct path identification
value. In short, such a simple attack is not useful to dodge the proposed
scheme.
 Detour attack:
As we have shown in Section 3.2, an attacker can determine the default
gateway of a spoofed IP address. Thus it is reasonable to assume that an
attacker can force attack packets to traverse the default gateway of the
spoofed IP address by using IP SOURCEROUTE option. In this way, the
postfix of the attack path will be identical to the path from the spoofed
source to the victim. This type of attack is referred to as detour attack. The
success of a detour attack relies on the following mandatory conditions:
there must not exist any participating router in the path from the attacker to
the spoofed IP address (including the default gateway of the spoofed
source). If this condition holds, an attacker can successfully conduct a
spoofed DDoS attack by using the detour technique presented here. In this
case, the victim cannot identify spoofed attack packets since the path
fingerprints of these packets are correct. Although this type of attack allows
an attacker to dodge path fingerprint filtering, finding an appropriate
spoofed source is very difficult if the participating routers are widely
58
Figure 3.4: (a) The distribution of number of intermediate routers. (b) The
distribution of the value of path identifications
3.5.2 Experimental Design and Performance Metrics
In the experiments, 500 end hosts are randomly selected from the Internet
map to act as frequently contacted clients of an Internet server. Then, a S2PF
table which contains the “source to path fingerprint” mappings of the 500 
clients is constructed. Moreover, we set q to 1/10, r to 1/100 and T1 to 2500.
Notice that, in our experiments, we do not attempt to find a best suite of values
of these configurable parameters for a specific network environment. (As
indicated in Section 3.3, the setting of these parameters heavily depends on
both specific characteristics of deployed networks and the trade-off between
security and performance. Thus, we do not focus on this issue in this
dissertation.) Instead, other behaviors, such as the growth rate of the S2PF
table and the false negative ratio at the monitor mode and the filter mode, are
explored under various attack rates.
First we measure the false negative ratio of the proposed scheme before
and after it switches from monitor mode to filter mode. Herein, the false
negative ratio refers to the ratio of undetected spoofed packets. In this
experiment, we simulate the aggregate of attack traffic that have 5000 attack
packets in each attack round. (Note that the growth of the number of attackers
60
Figure 3.5: The false negative ratio under the attack rate of 5000 packets per
round.
According to the statistics on the measured DDoS attacks, attack rates
range from 500 to 600,000 attack packets per second [34,78]. In the following,
we will present experiments on how many packets are needed for our scheme
to detect the presence of a DDoS attack, and please notice that the sensitivity
presented here highly depends on the settings of configuration variables. Fig.
3.6 shows the number of rounds required to detect the presence of a spoofed
DDoS attack under three attack rates: 50000, 100000 and 150000 attack
packets per round. This figure shows that the number of rounds needed to
detect a spoofed DDoS attack decreases as the attack rate increases. Next, we
conduct the same experiments at lower attack rates. In these experiments, we
send 5000, 10000, 15000, . . . , 50000 attack packets to the victim at each
round. We observed the growth of the S2PF table and the number of rounds
needed to detected attacks. The experimental result is shown in Table 3.1.
According to the table, we can find that the higher the attack rate is, the fewer
rounds and the fewer entries in the S2PF table is required to detect the
presence of an attack.
62
3.6 Summary
In this chapter, we presented an anti-DDoS scheme, ANTID, for defending
against spoofed DDoS traffic. ANTID intends to complement, rather than replace
existing schemes. For instance, the proposed scheme helps discard spoofed
packets before ingress filters are installed on all edge routers. Furthermore, by
weeding out a majority of spoofed attack packets, our approach allows some
resource management systems, that share resource fair among many participants,
to work better.
In our approach, each IP packet is embedded with a unique path fingerprint
that represents the Internet path it has traversed. By learning path fingerprints
from past traffic, the victim can efficiently establish the S2PF table which
contains the mappings of source IP addresses and correspondent path fingerprints
of frequently contacted clients. A spoofed packet can be easily identified by
consulting the S2PF table since it is very unlikely that a spoofed packet can have
a path fingerprint identical to that of the spoofed IP address. Thus, by identifying
and filtering spoofed packets, a spoofed DDoS attack can be identified and
prevented. This makes the proposed scheme an effective and efficient approach
for defending against spoofed DDoS attacks.
ANTID runs in two execution modes, the monitor mode and the filter mode.
We simulate DDoS attacks with variable attack rates to evaluate the performance
of our approach. Experiment results showed that ANTID can provide protection
against spoofed DDoS attack. Only around 1/2048 attack packets can pass the
spoofed packet detection and filter mechanism when our scheme stays in filter
mode. The experiment results also show that the time required to detect an attack
depends on the attack rate of aggregated attack traffic. The higher the attack rate
is, the short the time for detecting will be. Finally, our approach possesses
several important properties, such as strong incremental deployment and
lightweight for marking, decoding and filtering. No cooperation among ISP
networks is needed. More importantly, it is robust against sophisticated DDoS
attacks, and it is resistant to the deception by nearby attackers. These properties
make the proposed scheme a general and robust approach that is feasible to be
deployed in the Internet. There are several issues that require further
investigations. For instance, a systematic way for configuring parameters, q, r, T1
and T2, for a specific network environment is required. And, an efficient
64
attack in an automatic manner, the first step may be to locate the origin of the
attack flow. This allows imposing legal sanctions and consequently protecting
other computer systems from being attacked by the same attack source. However,
due to the anonymous nature of the IP protocol, it is extremely difficult to
determine the origin of an attack flow. To address this issue, several approaches
have been proposed in the literature [9,12,38,53,86,96–98,100–102], and these
work have been reviewed in Chapter 2. Most of these works focus on tracing the
origin of a DoS/DDoS attack, where a large number of network packets are
involved. On the other hand, locating the sources of other types of attacks with a
small number of packets is seldom addressed. However, in reality some network
attacks can disable a network service or crash a remote computer system with
only a single IP packet, such as teardrop, land [17], naptha [27], and
ping-of-death. To hamper these attacks, the origin of a single IP packet must be
identified.
Techniques for tracing DoS/DDoS attacks are difficult to adapt to tracing
attacks launched with only a few packets. Current DoS/DDoS traceback
approaches heavily rely on a fundamental and unique characteristic of
DoS/DDoS attacks, that is, the large volume of attack traffic. Probabilistic packet
marking (PPM) [53, 86, 97, 98, 102] and itrace [12] both employs probabilistic
methods to locate the origin of an attack flow with a sufficient large number of
packets. In both approaches, each packet records a partial path information. After
collecting enough packets belonging to an attack flow, a victim can reconstruct
the attack path. An algebraic approach [38] addressed the traceback of a
DoS/DDoS attack by reframing the traceback problem as a polynomial
reconstruction problem. A common requirement of these schemes is that they all
require collecting a large number of attack packets before they can reconstruct
the attack paths. This requirement inherently makes these schemes infeasible for
tracing the source of a single packet.
There are two schemes currently proposed for the traceback of attack flows
with a few attck packets. Deterministic packet marking scheme proposed by
Blenky [9] employs packet marking technique. Instead of marking packets with a
probabilistic method, an IP packet is marked deterministically when entering the
network. In other words, each edge router is responsible for assuring the source
of IP packets by marking its own IP address in IP packets. However, the
requirement of supports from all edge routers poses a great challenge to the
deployment of this scheme in large networks, such as the Internet. This scheme
66
analysis shows that the number of such ICMP packets is small and the overhead
is insubstantial. In most cases, IP packets will arrive at the destination host with a
complete and ordered path information. In this case, no ICMP packet is created.
In a very rare case that an IP packet traverses over a large number of hops, an
ICMP packet is generated. Therefore edge-based record route does not incur
substantial overhead for tracing the source of a single IP packet. Another
characteristic of the proposed scheme is that it can identify the origin accurately.
According to our analysis, the accuracy reaches 99.6%.
The contribution of this chapter is that it proposes an effective way to
account for network attacks. It incurs little overhead and does not interfere with
existing network infrastructure. The traceback process can be performed
following an attack and need not be executed in a very limited window of time.
The proposed scheme runs efficiently and can scale up easily in large networks,
such as the Internet.
The rest of this chapter examines edge-based record route in details. Section
4.2 presents a general single packet IP traceback algorithm which is based on the
proposed edge-based route representation. In Section 4.3, the proposed scheme is
given, which allows the route of each IP packet to be traced in a way that can be
compatible with existing network infrastructure. In Section 4.4, we present
analytic analysis and experimental results for evaluating overhead and accuracy
of the proposed scheme. Finally, we summarize and conclude our findings in
Section 4.5.
4.2 Edge-Based Record Route
A naive solution for the single packet traceback problem is to have each
router append its IP address at the end of a network packet as the packet travels
through the network. In this way, every packet arrives at its destination host
along with a complete and ordered list of router IP addresses it traversed.
Although this approach is conceptually robust and easy to implement, it is
infeasible in current network environment. The first practical concern is the high
overhead of appending IP addresses in the flight. This may reduce the throughput
of routers. Another fundamental shortcoming is the difficulty of assuring that
there is always sufficient unused space for the complete list of router IP
addresses. Thus, appending IP addresses at the end of a packet may result in
68
Figure 4.1: Mapping a sample network environment to a network model. (a) shows a
sample network with 5 routers and 5 sub-networks. (b) shows the correspondent
abstract network model.
Consider a router ri ∈R. Let ip(ri) denote the IP address of ri, deg(ri)
denote its degree which is the number of links associated with (ri), and L(ri) be
the set of directed links which is incident into ri. Each link la in L(ri) is
associated with a identifier id(la) ranging from 0 to (deg(ri) −1). For any pair
of elements la, lb in L(ri), id(la)≠id(lb) and 0 ≦ id(la), id(lb) ≦ (deg(ri)−1).
Note that identifier id(la) is not a global identifier. It is only a local identifier to
uniquely identify a local link directly attaching to a router. In this way, size the
identifier can be much smaller than IP address, and space to store the identifier
in a network packet can be greatly reduced. We will show later on that even
without global identifier, the route can be obtained from a set of local
identifier. To better understand the edge-based record route, we would first
assume that topology of the network is publicly available to all end hosts in
the network. Later on, in the proposed scheme, this assumption is relaxed.
Recall that single packet traceback is to determine the sequence of routers
(ri1 , ri2 , . . . , rik) a given IP packet has traversed from a source host to a
destination host. To achieve this objective, as mentioned previously, one can
simply have each router append its IP address at the end of the packet. This
approach requires space proportional to the 64 number of routers on the path.
For instance, consider a path containing k routers, each having a 32-bit IPv4
70
To illustrate the edge-based record route, we will use Figure 2 as an
example. Fig. 4.2 shows a sample route of a packet p. Let the sequence of
routers in the path be r1, r5, r3, r4, and r2. Here we assume that packet p departs
from the source with p.path.links = _ and p.path.end = 0. Upon arriving at r1,
p.path.links = (1) and p.path.end = ip(r1). Subsequently, p.path.links becomes
(1, 2) and p.path.end = ip(r5) when it arrives r5. This process is repeated until p
arrives at its destination host and the edge-based representation of the route of
p becomes ((1, 2, 4, 2, 1), ip(r2)).
Figure 4.2: (a) shows the identifiers of each directed links and (b) shows only directed
links in a sample route.
Although so far we have not given the details for mapping the edge-based
representation of a route into a binary bit string, it is clear that the number of
bits required for identifying the link in edge-based representation is far smaller
than conventional schemes storing all the IP addresses of a path in a network
packet. This is based on the fact that in practice a router is unlikely to have a
great number of incident links. Thus, the number of bits used to encode a
directed link tends to be smaller than the number of bits for storing an IP
address. In IPv4 mechanism, an IP address is 32 bits long. To precisely
evaluate the number of bits required for the edge-based route representation,
we present encoding schemes starting from the most simple, but effective way
in terms of space concern.
4.2.2 Encoding Schemes for Edge-based Record Route
72
To address this issue, the number of bits for representing a link is
determined according to the degree of each router respectively. That is,
whenever a router ri receives a packet p via link lin, it left shifts p.path.links by
Upper(log(deg(ri))) bits and then add id(lin) to the shifted result. In this
approach, it is not necessary to obtain the globally maximum degree.
Moreover, the number of bits used to represent the whole path is reduced. In
fact, based on the same idea, the space efficiency can be further improved.
Conceptually, p.path.links is left shifted by log(deg(ri)) bits rather than
Upper(log(deg(ri))) bits. This is achieved by replacing the shift operation with
multiplication. That is, when packet p arrives at a router via incoming link lin,
p.path.links = p.path.links * deg(ri) + id(lin).
In addition, it is reasonable to assume that in large networks only part of
the routers are EBRR-enabled routers, and each EBRR-enabled router is aware
of the status of its adjacent routers whether they are EBRR-enabled routers or
not. We also assume that an EBRR-enabled router knows the degree of its
adjacent routers. With these assumptions, the entire route of a packet is
partitioned into a set of partial paths, where each partial path contains a
successive sequence of EBRR-enabled routers. These partial paths are also
referred to as traceable subpaths. On the other hand, a path without
EBRR-enabled routers are referred to as a non-traceable subpath. This change
leads to a modification to the original edge-based route representation. The
modified definition is given as follows.
Definition 2 (Edge-Based Route Representation with Non-Traceable
Subpaths) The path of a packet p refers to the concatenation of partial paths
(or say, traceable subpaths). p.path is written as (p.path1, p.path2, . . ., p.pathk),
where p.path1 denote the partial path which is nearest the attack source.
p.pathi.links represents the sequence of links in a partial path p.pathi. Similarly
p.pathi.end denotes the IP address of the last router in the partial path, and
|p.path| denotes the total number of partial paths.
Due to the change of assumptions, there is a slight change in the process
of edgebased record route. That is, for a partial path p.pathi, p.pathi.end is
filled with an IP address when packet p is forwarded to a non-EBRR-enabled
router. In other cases, only p.pathi.links are updated. Algorithm 7 shows the
details of enhanced edge-based record route scheme.
74
Figure 4.3: The structure of a partial path
4.3 Proposed Solution for Single Packet IP Traceback
In this section, we first present an overview of the proposed scheme.
Subsequently, issues regarding the storage of path information in an IP packet,
the delivery of partial paths to the destination hosts, and the authentication of a
partial path are explored.
4.3.1 Architecture
Figure 4.4 shows the major architectural components of the proposed
traceback system. In the architecture, networks composed of directly
connected EBRR-enabled routers are organized into a set of Traceback
Enabled Domains (TED). Networks consisted of legacy routers (i.e. routers
that do not support traceback operations) are referred to as Non- TEDs. A
TED will cooperate with other TEDs to locate the source of an IP packets. In
each TED, all routers cooperate to support the operation of edge-based record
route. Moreover, there is a Traceback Server (TS) which helps end host
systems to construct the route in the TED of a IP packet. Each TS maintains a
database of the physical topology of the correspondent TED and manages a set
of cryptographic keys which are used to ensure the authenticity of the partial
path information. The authentication issues is discussed in section 4.3.4. Due
to the complex topology of the current Internet infrastructure, there would be
several TED distributed over the entire Internet. In this chapter, we do not
impose any restriction on the constructions of TEDs except that the TED and
TS information of an EBRR-enabled router must be acquired easily. For this
purpose, we suggest that these information be stored and accessed via the
DNS hierarchy. (Its usage is somewhat like the MX record for locating a mail
exchanger of a specific domain.) In addition, as we shall see shortly, in order
to authenticate path information, hosts on the Internet, Internet routers and
TSes must be loosely time synchronized. This can be easily accomplished via
NTP [75], and details of achieving time synchronization is not discussed in the
scope of this dissertation.
76
Consequently, the number of links of the router would increase by one. It is
clear that the source identified by the partial path will be incorrect due to the
change of the topology. Since the probability of mis-identifying the source
increases as the number of routers recorded in a partial path gets larger. To
reduce the possibility of errors, the number of routers of a partial path should
be restricted in a reasonable manner. For the reliability reason and practice
concern, we choose 16-bit length for the encoded link identifiers of a partial
path. This is partly because we can find a 16-bit IP header field for storing the
encoded link identifiers.
In our approach, the 16-bit checksum field is overloaded to store the
encoded link identifiers of a partial path and ICMP packets are employed to
deliver partial paths to destination hosts. The original function of the
checksum field is to ensure the integrity of the IP header fields. It is selected
due to the following three observations. First, routers are usually connected to
each other using high quality physical media. Thus, the transmission error rate
between two adjacency routers is low. Second, the error detection/correction
mechanism in the data link layer can further reduce the occurrence of errors.
Third, upper layer protocols, such as TCP and UDP, include several IP header
fields for computing their own checksum. (The checksum field of IP header is
excluded.) This helps ensure the integrity of important IP header fields. Thus,
the function of the checksum field is considered replicated and can be
overloaded without greatly affecting network infrastructure, protocols, and
existing applications. IP protocol does not need to be revised. Note that any
such overloading may sacrifice certain function of the overloaded field and
although the checksum field is overloaded in our scheme, our solution here
only demonstrates a possible design rather than attempts to find the optimal
balance among many potential implementation trade-offs.
As mentioned above, since there are only 16 bits available in the
checksum field, it cannot accommodate a route with unlimited number of hops.
In this case, a partial path is forced to be terminated even when the next router
is an EBRR-enabled router. More specifically, a partial path is forced to be
terminated if a router finds that there is no sufficient space for the next router
to inscribe the incoming link identifier information in the checksum field. This
takes place when the value in the checksum field becomes greater than 216.
Consider a packet p arrives at router ri via link lin and the next hop router to
which p will be forwarded is another EBRR-enable router rj . After ri inscribes
78
this space is left unused. Therefore, by taking advantage of the IP option field,
several partial paths can be temporarily stored here and be delivered to the
destination host in one PPD packet. The IP option field can accommodate at
most 5 partial paths. Consequently an PPD packet is created after five partial
paths are collected in the IP option field. (Recall that the encoded identifiers of
a partial path is of the same length as a checksum field, that is, 16 bits long.
The end point address field is a 32-bit field and the Pauth field takes 8 bits.
Thus, 7 bytes is required for storing each partial path. Since the IP options
field is 40 bytes long, the IP option field can accommodate a total of five
(Lower(40/7) = 5) partial paths.) In other words, when unused space in the IP
option field becomes smaller than 7 bytes, the set of partial paths in the IP
option field are sent by one PPD packet. Afterwards, the IP option field is
cleared so that subsequent partial paths can be stored in this field.
Note that the IP option may not be available for storing the partial paths if
any of existing IP option, such as Source Route, TimeStamp, or Record Route
[90] is set. In this case, a partial path is delivered to the destination host by a
separate PPD packet every time when it is terminated or forced to be
terminated. Algorithm 8 shows the details of edge-based record route
algorithm.
Consider the case that the IP option field is available for storing the
partial paths. In our approach, the IP option is formatted as shown in Fig. 4.5.
The code field is filled with 97 (which indicates option class 3 and the option
number1). The pointer field specifies the offset within the option to the next
available slot for storing a partial path. The initial value of pointer field is 2.
Before moving a currently terminated partial path to the option field, a router
first examines the pointer. If the pointer value is less than 33, the partial path
is appended at the position specified by the pointer and then the pointer is
increased by 7. Otherwise, the option field is said to be fulfilled and a PPD
packet is used to carry the set of partial paths in the option field to the
destination host. Afterwards, the partial path is placed as the first partial path
in the IP option field and the pointer is set to 9.
80
association. Third, an end host system must be able to determine the order
among the set of authenticated PPD packets which are associated with the
same IP packet.
To address the first issue, each PPD packet contains a digest value used
to relate the PPD packet to a particular IP packet. Since the digest is used to
uniquely identify a IP packet, its value in PPD packets associated with the
same IP packet must be identical. This digest value is computed by applying a
hash function to selected IP packet header fields of the packet. With careful
selection of header fields, the end host can effectively identify a set of PPD
packets associated with an IP packet. The invariant IP header fields are
selected as inputs to a digesting function. As shown in Fig. 4.6, marked IP
fields are used to generate the digest value.
As to the second issue, each PPD packet has a 32-bit Iauth field which is
presented in Section 4.3.4 in further details. Finally, as to the third issue, each
PPD packet has a distance value which is used to determine its order. This
distance value is obtained from the TTL value of the IP packet. Specifically,
whenever a router decides to deliver a set of partial paths to the destination
host by an PPD packet, in addition to the computing of the digest value, it
copies the current TTL value to the distance field in the PPD packet. The
entire PPD packet format is depicted in Fig. 4.7.
Figure 4.6: Selected IP fields for computing the digest value
82
propagation delay of an IP packet from source to destination is denoted as
Tprop. Then, the time is divided into a set of uniform intervals, and each
interval is of duration Tint and Tint∈ △, Time interval 0 starts at time T0 and
time interval i starts at time Ti = T0+i * Tint. Each EBRR-enabled router
constructs a reversed one-way key chain and shares its key chain with the TS
in its correspondent TED. That is, in a key chain, each time interval is
associated with a secret key which is used to generate signatures in the
corresponding time period. Each secret key can then be disclosed after a small
amount of time after the key expires. Specifically, consider a key Ki which is
associated with time interval [Ti, Ti+1]. Ki can be disclosed at time Ti +Tint +Tδ
where T_ represents the waiting time after Ki expires and Tδ∈Tprop. The set of
keys are organized as a reverse key chain sequence, as shown in Fig. 4.8, that
is, Ki = H(Ki+1). Since the key is disclosed reversely, the disclosure of Ki does
not reveal Ki+1.
As Fig. 4.8 shows, a key chain can be generated in a straightforward
manner. An EBRR-enabled router first randomly generates a random number
as KL (here we assume the length of key chains is a pre-defined parameter
within a TED). Then, the subsequent elements of the key chain can then be
generated. To allow a TS to generate the same key chain, the router securely
sends KL to the TS and consequently the TS can then construct a key chain
that is identical to the key chain in the EBRR-enabled router. Whenever a key
chain is exhausted (all of the secret keys have expired), each EBRR-enabled
should reconstruct a new key chain and deliver KL to TS for generating a new
key chain in TS. Note that, we do not impose any restriction on the length of
the key chain. The settings of Tint and T_ are not strictly limited. They can be
set to an hour, twelve hours, a day or even a week. However, setting a
“too-long” duration for Tint and T_ will delay the time for the disclosure of
secret keys and consequently delay the time to start the traceback process
since each partial paths must be authenticated first. Thus, we suggest that Tint
be set to an hour and Tδ to 30 minutes. (This suggestion comes from the
84
which terminated the partial path (or delivering the PPD packet) via DNS
hierarchy. Afterwards, the victim waits until Ti+Tint+Tδ+△, and then send a
key retrieval request to the TS. The request indicates the time that the
offensive packet arrives at (i.e. Tarrival) and the router R. After receiving the
request, the TS can retrieve the key chain of R. Subsequently, TS returns
secret keys which fall in the duration between Tarrival−△ + Tprop and Tarrival +
△ + Tprop. (Since Tint∈ △, the victim may receive two secret keys when
Tarrival is near the boundary of two consecutive intervals. In most cases, only
one secret key is returned from TS.) Finally, the victim can authenticate the
partial path (or PPD packet) using the retrieved keys. If there exists a secret
key that can successfully authenticate the partial path (or PPD packet), it is
considered valid. Otherwise, the partial path (or PPD packet) will be dropped.
4.3.5 Traceback Processing
The traceback process is triggered by the detection of the presence of an
attack packet. Given an attack packet, a set of PPD packets carrying the partial
paths of the attack packet can be identified by the digest value. Subsequently,
the order of these PPD packets is then determined according their distance
values. Partial paths stored in these PPD packets are then collected and sorted.
(Note that partial paths stored in the same PPD packet are stored sequentially.)
Then, for each partial path, the victim can identify the TS which is indicated in
the end point address field of the partial path. Afterwards, the victim can
acquire a key from the TS to authenticate the partial path. In this way, the
victim can construct a sequence of authenticated partial paths which are
denoted as (p.path1,p.path2, . . ., p.pathk), where p.path1 represents the
candidate partial path that is nearest the source.
To extract the subpath encoded in p.pathi, the victim send p.pathi to the
TS associated with p.pathi.end. The TS can then construct the subpath encoded
in the partial path. It is also possible that one partial path may encode a
traceable subpath which across more than one TED. In this case, since the
current TS can identify the TS the upstream router is associated with, the
current TS can deliver necessary part of the partial path to the new TS and
then can acquire the upstream attack path. After the attack subpath encoded in
p.pathi is constructed, it is returned to the victim.
86
It is necessary to estimate the number of partial paths before computing
the number of PPD packets. In order to do this, there are several basic
assumptions must be presented. First, the degree of each router is assumed to
be independent of each other, and we use _ to represent the expected number
of bits for a router to encode its links. Here, we first consider the simplest case,
that is, all the routers in the path are EBRR-enable routers. Let f(L) denote the
number of partial paths, where L is the number of routers in the path. Then,
f(L) can be expressed as:
Next, consider a simple case that each router are administrated
independently and that EBRR-enabled routers are randomly distributed on the
Internet. In this case, let p denote the probability that an IP packet will arrive
at a router that is EBRR-enabled. F(L) denotes the expected number of partial
paths. And, in this simple probabilistic model, F(L) can be expressed as:
Consider a more complicated case that Internet routers are managed by
serveral administrators. That is, Internet routers support the proposed scheme
in a consistent manner. We assume that routers connecting to each other are
likely to reside in the same Autonomous System (AS). Since routers in the
same AS tend to be administrated under the same policy, they will support the
edge-based record route in a consistent manner. That is, routers connecting to
an EBRR-enabled router tend to be EBRR-enabled routers and vice versa.
This assumption can be modeled by a state-transition diagram, as shown in Fig
4.9. In the figure, S1 denotes the state that the current router is EBRR-enabled,
and S2 denotes the state that the current router is not EBRR-enabled. A packet
88
for IP packets that traverse fewer than 20 hops, the number of partial paths is
smaller than five. Consequently, no PPD packet will be generated in this case.
Figure 4.10: How L and q affect F(L) when α = 4
Figure 4.11: How L and _ affect F(L) when q = 0.6
90
Next, consider an attacker that forge PPD packets in order to deceive the
victim from identifying a wrong attack source. Notice that each PPD packet
needs to be authenticated via its Iauth field, and a partial path carried by an
PPD packet can be accepted if both the Iauth field in the PPD packet and the
Pauth filed in the partial path are valid. Notice that the last partial path record
in a PPD packet is created by the EBRR-enabled router which generates the
PPD packets. Therefore, the Pauth field of the last partial path and the Iauth
field of the PPD packet are created using the same singing key. Thus it is
reasonable to assume that if an attacker attacker can successfully forge a 32-bit
Iauth field, then he/she would be able to successfully forge the Pauth field.
Since an attacker does not have the signing keys which associated with
EBRR-enabled routers, the best an attacker can do is to randomly guess the
Iauth value (the probability of a successful guess is 2−32), and in this case the
accuracy of our scheme can be estimate as:
In this case, the accuracy of our scheme will be greater than 1−2−32 * (218
* 1−0) = 1−2−14≈0.99987. In other words, the accuracy of our scheme under
this attack is about 99.987%
Next, we examine the robustness of the proposed scheme under another
attack. That is, the attacker pre-filled a forged partial path in the IP Option
field. In this case, since the 86 Pauth field is only 8-bit long, the attack has
much higher probability, 1/256, to mislead the traceback process. One of the
straightforward way to reduce the probability is to allocate more bits for the
Pauth field for each partial path. However, this would increase the size of a
partial path and consequently increase the number of PPD packets. So far, it is
believed that a 8-bit Pauth field is sufficient since the proposed scheme have
the probability of 255/256 (about 99.6%) to correctly identify the attack source.
Overally, it is difficult for attackers to deceive the traceback process from
identifying a wrong attack source.
92
Although edge-based record route is effective and efficient, there are still
issues which need further investigation. One of the challenges is to reduce
unnecessary packet fragmentation which is triggered by the insertion of 40-byte
IP option field into the IP packet header. This overhead cannot be ignored in
some environments. Several other issues remain unsolved, such as evaluating the
effectiveness under distributed attacks and improving the robustness when there
are broken links in the attack path. As a whole, we believe that our solution
represents an important step toward an automated traceback facility that can be
used to trace the origin of a single IP packet.
5. A Source-End Defense System for DDoS Attacks
In this chapter, a DDoS defense scheme is proposed to deploy in routers
serving as the default gateways of sub-networks. Each router is configured with
the set of IP addresses belonging to monitored sub-networks. By monitoring
two-way connections between the policed set of IP addresses and the rest of the
Internet, our approach can effectively identify malicious network flows
constituting DDoS attacks, and consequently restrict attack traffics with
rate-limiting techniques. Current source-end DDoS defense scheme cannot
accurately distinguish between network congestion caused by a DDoS attack and
that caused by regular events. Under some circumstances, both false positive and
false negative can be high, and this reduces the effectiveness of the defense
mechanism. To improve the effectiveness, new DDoS detection algorithms are
presented in this chapter to complement, rather than replace existing source-end
DDoS defense systems. The design of the proposed detection algorithm is based
on three essential characteristics of DDoS attacks: distribution, congestion, and
continuity. With the three characteristics, the proposed detection algorithm
significantly improves detection accuracy, and at the same time reduces both
false positive and false negative against DDoS attacks.
5.1 Preliminaries
Current Internet infrastructure is vulnerable to network attacks, and
particularly, many security incidents have shown that the Internet is weak against
distributed denial-ofservice (DDoS) attacks. In general, a DDoS attack is
94
by carefully control the congestion caused by the attack.
To address the weakness of D-WARD, in this chapter, we propose a
source-end DDoS detection algorithm and an attack response mechanism, where
the former can accurately identify an ongoing DDoS attack and the latter can
effectively limit attack traffic in source networks. The proposed detection and
response algorithms are built upon the system architecture originally proposed in
D-WARD. Our proposal focuses on reducing both false positive and false
negative on detecting two-way connections. That is, the proposed scheme
attempts to complement, rather than replace the D-WARD system.
The design of proposed scheme is based on the observation of three
essential characteristics of a DDoS attack: distribution, congestion, and
continuity. Distribution refers to the spreading of attack traffic from a large
number of compromised hosts. Congestion refers to the inherent consequence of
a DDoS attack. That is, an increasing packet loss rate observed in a monitored
network flow would generally represent a signal of a DDoS attack . Third,
continuity directs to the observation that network congestion caused by DDoS
attacks usually lasts for an extended period of time. Combining the above three
criteria allows us to differentiate a DDoS attack from a typical network
congestion caused by other events. Based on the three characteristics, a new
DDoS defense mechanism is proposed. Since the proposed mechanism is built
upon D-WARD architecture, the proposed DDoS defense mechanism is also
deployed at routers serving as the default gateways. On-line traffic statistics, in
terms of distribution, congestion, and continuity, are gathered and compared
against previous statistics derived from normal traffic. In this way, malicious
network flows are identified and rate-limited. Rate limits are dynamically
adjusted according to the behavior of malicious network flows. On one hand,
dynamic adjustment allows a misclassified network flow to regain network
bandwidth when the flow shows compliance to legitimate flow model. On the
other hand, since attack scripts has no way to distinguish the effect of
rate-limiting from that of a successful DDoS attack, dynamic adjustment helps
restrain malicious flows.
This chapter is organized as follows. Section 5.2 gives an review of the
D-WARD system. The proposed source-end DDoS defense scheme is presented
in Section 5.3, including its detection and rate-limiting mechanism. Section 5.4
describes an implementation of the proposed scheme and presents several
96
Figure 5.1: An example of the deployment of D-WARD
5.2.2 Attack Detection
In D-WARD, the aggregate traffic between monitored addresses and a
correspondent host is defined as a flow. A flow is considered two-way if its
data flow comprises packets originating from the sender and corresponding
reply from the peer. TCP connections and several types of ICMP messages,
such as “TimeStamp” and “echo”, are typical examplesof two-way flows. On
the other hand, a flow is considered one-way (or uni-directional) if its data
flow does not require reply messages in its normal operation. Traffics based
on UDP protocol are examples of one-way flows.
For TCP flows, D-WARD defines a threshold that specifies the
maximum allowed ratio of the number of packet sent to and received from in a
flow. Notice that in the following context in this chapter, the ratio of the
number of packet sent and received in a flow is refereed to as the O/I of the
flow. Then, for TCP flows, whenever the O/I value of a flow breaches a
pre-defined threshold, TCPrto, the flow is classified as a DDoS attack flow.
Similarly, for ICMP-based two-way flows, ICMPrto is used to define the
maximum O/I value of an ICMP flow. In D-WARD’s experimental setings, 
TCPrto is set to 3 and ICMPrto is set to 1.1.
For a one-way flow, D-WARD defines three thresholds: an upper bound
on the number of allowed monitored hosts issuing one-way connections to a
98
that although DDoS attacks may take many different forms, it is reported
[28,73,79] that over 94% of DDoS attacks use TCP. Thus, the scheme presented
in this chapter may help defend against a majority of DDoS attacks. As to the
detection of DDoS attacks based on of one-way flows, we suggest using the
algorithm presented in D-WARD at current stage, but further enhancement is
possible for the future work.
5.3.1 Basic Design Concepts
As mentioned above, D-WARD classifies a TCP flow as an attack flow if
the O/I value of the flow is greater than TCPrto. (Recall that, in D-WARD, this
threshold is set to 3.) This approach suffers from the difficulty in determining
an appropriate value for TCPrto. It is because the O/I value of a TCP flow
heavily depends on the implementation of TCP/IP protocol stack of the peers,
and other factors such as round trip time and network congestion. This would
result in a wide range of O/I values. For instance, Fig. 5.2 shows the average
O/I values of TCP flows in a typical network consisting of 30 personal
computers. Operating systems installed in these computers include Windows
2000, Windows XP, FreeBSD, and Linux. As shown in the figure, there are
flows with O/I values which are greater than 3. (The highest average O/I value
is 3.68. It is observed in a flow consisting of only one FTP data connection.)
Figure 5.2: Average O/I values
The observation motivates a new algorithm for detecting TCP-based
100
First, a two-way flow f is a collection of connections, and each
connection is associated with a pair of IP addresses –an IP address in the set
of monitored addresses and an IP address of the correspondent hosts. The
former is referred to as initial address and the latter is terminal addresses. The
number of distinct initial addresses in a flow f is denoted as Sf . For a
connection c, nc denotes the ratio of the number of packets originated from the
initial address and received from the terminal address in one observation
period in connection c. Then, nf represents the average of the O/I value of all
connections in flow f.
Furthermore, there are two threshold values, Nf and Tf , which help
determine the malicious level of a monitored flow. Nf represents the mini
threshold of a flow f. If nf ≦ Nf , then f is considered as a normal flow. Tf
denotes the maximum allowed nf . If nf ≧ Tf , then f is classified as an attack
flow. If Nf ≦ nf ≦ Tf , then further traffic statistics must be examined to
determine the malicious level of the flow.
Then, the level of congestion and distribution can be quantified. Consider
a flow f with Nf ≦ nf ≦ Tf , the level of congestion of f refers to (nf −
Nf )/(Tf−Nf ). In this expression, we can clearly see that if the packet loss rate
of the flow approaches Tf , the value of the expression will approach 1. On the
other hand, if nf approaches Nf , the value will approach 0. Next, the level of
distribution is quantified as Sf/C, where C denotes a configuration parameter
obtained from the past behavior of the monitored network (We will describe
how to obtain this parameter later). Then, the level of congestion and
distribution are combined and used to generate a value representing the
malicious level of a monitored flow. Herein, the malicious level is denotedα
and computed as follows. (In Eq. 5.1, λ is a number between 0 and 1, that is,
0 <λ< 1. It is used to restrict the saturation of α between 0 and 1.)
(5.1)
It is worthy to note thatαhas two important characteristics. First, it is
clear thatαincreases as nf increases. In other words, if the packet loss rate of a
monitored flow f gets higher, nf will increase and consequentlyαincreases.
102
Figure 5.3: Classification of Traffic Flow
In addition to the determination of the malicious level of monitored flows,
it is desirable to update the thresholds for classifying network flows. This
allows our scheme to learn the changing behavior of normal traffic, and
dynamically adjust the thresholds according the current traffic statistics of
monitored flows. For the adjustment of thresholds, attack traffic will be
filtered out, and only traffic of a normal flow will be used to update thresholds.
In this way, thresholds will not be polluted by attack traffic.
Updating a threshold is accomplished by feeding back the current traffic
statistics. As we shall see shortly in this section, given a volume of historical
traffic of the monitored flow f, we can derive Tf , and Nf for the monitored
flow. In fact, by the same procedure, we can compute traffic statistics for each
observation period. Assume that flow f is classified as normal in period i. Let
bTf,i denote the maximum allowed O/I value derived from the traffic volume in
observation period i, and Tf,i denote the same threshold used to classify flow f
104
derived from historical traffic data and OIf,avg denotes the average O/I value.
Next, Let C be the maximum number of distinct initial addresses in a flow
during one observation period.
After Tf , Nf and C are configured, we can then compute a set of α
values, one for each observation period. Then, we can setαf to the average of
the set ofαvalues and subsequently set tf to be the maximum consecutive
number of times that αf is breached in the set.
5.3.4 Rate Limiting
106
flow model for consecutive PenaltyPeriod observation periods, the flow is
considered a transient flow and the recovery process begins. In the recovery
process, rate limit are carefully removed according to the following equation:
(5.4)
In Eq. 5.4, it is clear that the speed of recovery is controlled by α and
Ps/(Ps+Pdrop). Both reflect the current behavior of the monitored flow. When
the rate limit reaches MaxRate, a transient flow is classified as a normal flow,
and rate limit is completely removed.
5.4 Performance Evaluation
To evaluate the performance of the proposed scheme, we implemented both
prototypes of D-WARD and our approach on a machine which runs the FreeBSD
operating system. In our experiment, two types of DDoS attacks are conducted:
TCP SYN flooding attack and link overloading attack. In the TCP SYN flooding
attack, each attack agent floods the victim with TCP SYN packet at the
maximum rate of 100 KBps. In this experiment, we will show that attacks
detected by D-WARD can also be detected by our approach. Even further, our
scheme can detect the attacks earlier than D-WARD. Next, In the link
overloading attack, each agents sends the victim at the maximum rate of
100KBps. The link bandwidth of the victim is restricted to 500KBps. This is
accomplished by using Dummynet [95]. (there are in total 5 agents) In this
experiment, we will show that our approach can detect attacks which cannot
detected by D-WARD. For both types of attacks, we replicate the four attack
scenarios tested in D-WARD. That is, constant rate attack, pulsing attack,
increasing rate attack and gradual pulsing attack.
5.4.1 Experimental Results
Fig. 5.4, 5.5, 5.6, and 5.7 show the experimental results of TCP SYN
attack. The x-axis denotes time measured in second and the y-axis stands for
attack bandwidth measured in KB per second. The line with “x” symbols 
108
Figure 5.5: Pulsing SYNC attack.
110
Next, we examine the experimental results of link overloading attacks. In
this experiment, by controlling the attack sending rate, the O/I value of the
attack flow only reaches 2, smaller than threshold value 3 used in D-WARD.
Thus, D-WARD is unable to detect the presence of the attack. On the other
hand, the proposed scheme can identify the attack and perform subsequent rate
limiting. Fig. 5.8, 5.9, 5.10, and 5.11 show the experimental result. Similarly,
the x-axis denotes time measured in second and the y-axis stands for attack
bandwidth measured in KB per second. The line with “x” symbols represents 
the attack bandwidth generated by attack agents. The line with triangle
symbols represents attack bandwidth passing by D-WARD, and the line with
square symbols denotes the attack bandwidth going through the proposed
scheme. The experimental results show that our scheme is capable of detecting
attacks with a O/I value which is smaller than 2, while D-WARD cannot.
According to previous analysis and experiments, we can see that the proposed
scheme has lower fast negatives and shorter response time. And, as mentioned
previously, D-WARD will mis-classify network flows with a O/I value greater
than 3 as attack flow. This contributes a major source of false postives for
DWARD. However, in our scheme, instead of using static threshold, criteria
for identifying attack flows are derived from historical traffic of a monitored
flow, and thus even the O/I of a monitored flow is greater than 3, our scheme
willl not classify it as an attack flow. In other words, with the ability of
dynamically learning and updating thresholds, our scheme has lower false
postives than D-WARD does.
112
Figure 5.10: Increasing bandwidth overloading attack.
Figure 5.11: Gradual bandwidth overloading attack.
114
6. Conclusion and Future Work
In this dissertation, we performed an intensive study on the problem of
DDoS attacks and presented three defense approaches, each of which addressed
DDoS attacks from a different direction. As shown in Chapter 2, the problem of
DDoS attacks are unlikely solved by a single DDoS countermeasure. Instead, a
suite of solutions for increasing the resistance of the Internet to DDoS attacks is
desirable. This chapter first reviews characteristics of what we believe would be
appropriate solutions against DDoS attacks, and then we summarize the propose
defense approaches and discuss future directions which are worthy of further
investigations.
We believe that an appropriate suite of DDoS solutions has the following
characteristics.
 Accurate detection and effective response: Detection components that can
accurately discriminate legal packets from attack ones and response
components that can effectively block attack flows without collateral
damages to legitimate packets are considered two basic build blocks of
effective DDoS defense. This characteristic allows Internet servers to
survive or to sustain their services to their legitimate clients when DDoS
attacks occur.
 Support for attack accountability: The ability to locate the origins of
attack streams is considered the first step toward the discovery of DDoS
attackers. With the support for attack traceback, we may have a chance to
deter malicious users from conducting DDoS attacks.
 Feasibility of implementation and deployment: Implementations of
DDoS countermeasures should be feasible on the current Internet, e.g.,
should not impose substantial load on Internet routers, or require tight
cooperations among different ISP networks. Enhancements on routers need
to be minimized, and retrofits on routers must support incremental
deployment. Retrofitting in a all-or-nothing fashion should be avoided.
The above-mentioned appropriate DDoS solutions appear challenging to
obtain, and will certainly require not only enhancements on end host systems, but
116
D-WARD. In our scheme, a new DDoS detection technique is proposed to
monitor two-way flows. Three essential features of DDoS attacks, i.e.
distribution, congestion and continuity are integrated as a criteria for evaluating
the malicious level of monitored network flows. Experimental results showed
that the proposed scheme can shorten the time needed for detecting DDoS
attacks and reduces both false positives and false negatives.
Finally we would like to remind readers that DDoS attacks is a complicated
problem and an effective DDoS defense may comprise several defensive
componments, each of which solves the DDoS attacks problem from a specific
prespective. These defense systems are not necessary to be deployed at the same
network elements, and they must be able to coexist without conflicts. Solutions
presented in this dissertation addressed the DDoS problem from different points
of view and can coexist without disturbing each other. However, it is also worthy
to note that each solution has its own limitations. The victimend defense focuses
on identifying spoofed packets, and therefore it is weak in defending against
DDoS attacks consisting of attack packets with real source IP addresses. The
traceback scheme presented in this paper allows locating a participating Internet
router that is nearest to the attack source. However, it cannot identify end hosts
which inject attack packets into networks. Both victim-end and traceback
schemes heavily rely on a basic assumption that Internet routers are secure
against compromising. So far, to the author’s knowledge, most victim-end and
traceback schemes cannot survive with the existence of compromised routers.
Once Internet routers are compromised, attacker can instruct them to erase any
marks or path fingerprint on IP packets, and consequenlty defense systems
counting these marks would not work correctly. The source-end defense system
described in this dissertation complements the shortcomings of D-WARD system,
rather than replacing it. Moreover, the proposed scheme only address DDoS
attacks which are based on TCP packets. Techniques for detecting attacks with
ICMP packets or UDP packets requires further much more investigations.
118
7. Reference
[1]M. Adler, “Tradeofs in Probabilistic Packet Marking for IP Traceback,” 
Proceedings of the thiry-fourth annual ACM symposium on Theory of computing, pp.
407–418, 2002.
[2] G. Ahn, K. Kim, and J. Jang, “MF (Minority First) Scheme for Defeating 
Distributed Denial of Service Atacks,” Proceedings of Eighth IEEE International
Symposium on Computers and Communication, pp. 1233–1238, June 2003.
[3] T. Al-Herbish, “Raw IP Networking FAQ,” Nov. 1999. [Online]. Available:
http://www.whitefang.com/rin/rawfaq.html
[4] T. Al-Herbish, “Secure UNIX Programming FAQ,” May 1999. [Online]. 
Available: http://www.faqs.org/faqs/unix-faq/programmer/secure-programming/
[5] K. J. Argyraki and D. R. Cheriton, “Active Internet Trafic Filtering: Real-time
Response to Denial of Service Atacks,” CoRR, vol. cs.NI/0309054, 2003. [Online].
Available: http://arxiv.org/abs/cs.NI/0309054
[6] K. J. Argyraki and D. R. Cheriton, “Protecting Public-Access Sites Against
Distributed Denial-of-Service Atacks,” CoRR, vol. cs.NI/0403042, 2004. [Online].
Available: http://arxiv.org/abs/cs.NI/0403042
[7] T. Baba and S. Matsuda, “Tracing Network Atacks to Their Sources,” IEEE
Internet Computing, vol. 6, pp. 20–26, Mar. 2002.
[8] J. Barlow and W. Thrower, “TFN2K - An Analysis,” Feb. 2000. [Online].
Available: http://security.royans.net/info/posts/bugtraq ddos2.shtml
[9] A. Belenky and N. Ansari, “IP Traceback with Deterministic Packet Marking,”
IEEE Communications Letters, vol. 7, no. 2, pp. 162–164, Apr. 2003. 115
[10] A. Belenky and N. Ansari, “TracingMultiple Attackers with Deterministic
PacketMarking (DPM),” Proceedings of IEEE Pacific Rim Conference on
Communications, Computers and Signal Processing, pp. 49–52, Aug. 2003.
[11] M. Belare, R. Caneti, and H. Krawczyk, “Keyed Hash Functions and Message
Authentication,” Proceedings of Crypto’96, LNCS 1109, pp. 1–15, 1996.
[12] S. Belovin, M. Leech, and T. Taylor, “ICMP Traceback Messages,” Feb. 2003,
available at: http://www.ietf.org/internet-drafts/draft-ietf-itrace-04.txt.
[13] B. H. Bloom, “Space/Time Trade-Offs in Hash Coding with Alowable Erors,”
Communications of the ACM, vol. 13, no. 7, pp. 422–426, July 1970.
[14] R. L. Carter and M. E. Crovela, “Server Selection Using Dynamic Path 
Characterization in Wide-Area Networks,” Proceedings of the IEEE INFOCOM, pp.
1014–1021, Apr. 1997.
[15] CERT Coordination Center, “CERT Advisory CA-1996-01 UDP Port Denial-of-
120
Anonymizing
Infrastructure,” Proceedings of the third DARPA Information Survivability
Conference
and Exposition, vol. 2, pp. 78–80, Apr. 2003.
[30] B. Cheswick, H. Burch, and S. Branigan, “Mapping and Visualizing the
Internet,” Proceedings of USENIX Annual Technical Conference. [Online].
Available: http://www.usenix.org/publications/library/proceedings/usenix2000/
general/cheswick.html June 2000.
117
[31] M. C. Chuah, W. C. Lau, Y. Kim, and H. Chao, “Transient Performance of 
PacketScore
for blocking DDoS atacks,” IEEE International Conference on Communications,
vol. 4, pp. 1892–1896, June 2004.
[32] K. Clafy, T. E. Monk, and D. McRobb, “Internet tomography,” June 1999. 
[Online].
Available: http://www.nature.com/nature/webmatters/tomog/tomog.html
[33] D. Cook, W. Morein, A. Keromytis, V. Misra, and D. Rubenstein, “WebSOS: 
ProtectingWeb
Servers From DDoS Atacks,” The 11th IEEE International Conference
on Networks, pp. 461–466, Oct. 2003.
[34] T. Darmohray and R. Oliver, “Hot Spares For DoS Atacks,” ;login:, July 2000.
[Online]. Available: http://www.usenix.org/publications/login/2000-7/apropos.
html
[35] David A. Wheeler, “Secure Programming for Linux and Unix HOWTO,”
Mar. 2003. [Online]. Available: http://www.dwheeler.com/secure-programs/
Secure-Programs-HOWTO.html
[36] David Ditrich and George Weaver and Sven Dietrich and Neil Long, “The
mstream distributed denial of service atack tool,” May 2000. [Online]. Available:
http://staff.washington.edu/dittrich/misc/mstream.analysis.txt
[37] A. Daviel, “Rkdet,” Aug. 2002. [Online]. Available: htp:/vancouver-webpages.
com/rkdet/
[38] D. Dean, M. Franklin, and A. Stubblefield, “An Algebraic Approach to IP 
Traceback,”
ACM Transactions on Information and System Security, vol. 5, no. 2, pp.
119–137, May 2002.
[39] R. Deraison, “Nessus Open Source Vulnerability Scanner Project.” [Online].
Available: http://www.nessus.org/
[40] T. Dierks and C. Alen, “The TLS protocol version 1.0,” Internet Engineering
122
[51] S. Gibson, “Distributed Reflection Denial of Service: Description and Analysis
of a Potent, Increasingly Prevalent, and Worisome Internet Atack,” Feb. 2002.
[Online]. Available: http://grc.com/dos/drdos.htm
[52] V. Gilgor, “A Note on the Denial-of-Service Problem,” Proceedings of the IEEE
Symposium on Security and Privacy, pp. 139–149, 1983.
[53] M. T. Goodrich, “Eficient Packet Marking For Large-Scale IP Traceback,” 
Proceedings
of the 9th ACM Conference on Computer and Communication Security,
pp. 117–126, 2002.
[54] B. Hufaker, M. Fomenkov, D. Moore, and E. Nemeth, “Measurements of the
Internet Topology in the Asia-Pacific Region,” Proceedings of INET Conference.
[Online]. Available: http://www.caida.org/outreach/papers/asiapaper/ July 2000.
[55] Internet Security Systems, “Trinity v3 Distributed Denial of Service Tool,” Sept.
2000. [Online]. Available: http://xforce.iss.net/xforce/alerts/id/advise59
[56] J. Ioannidis and S. M. Belovin, “Implementing Pushback: Router-Based Defense
Against DDoSAtacks,” Proceedings of Network and Distributed System Security
Conference, pp. 79–86. [Online]. Available: http://www.isoc.org/isoc/conferences/
ndss/02/proceedings/papers/ioanni.pdf Feb. 2002.
[57] C. Jin, H. Wang, and K. G. Shin, “Hop-Count Filtering: An Effective Defense
Against Spoofed DDoS Trafic,” Proceedings of ACM Conference on Computer and
Communications Security, pp. 30–41, Oct. 2003.
[58] J. Jung, B. Krishnamurthy, and M. Rabinovich, “Flash Crowds and Denial of 
Service
Attacks: Characterization and Implications for CDNs and Web Sites,” Proceedings
of IEEE International World Wide Web Conference, pp. 252–262, May
2002.
[59] M. Kenney, “Ping of Death,” Oct. 1996. [Online]. Available: 
http://www.insecure.
org/sploits/ping-o-death.html
120
[60] A.D. Keromytis, V. Misra, and D. Rubenstein, “SOS: Secure Overlay Services,”
Proceedings of the 2002 ACM Conference on Applications, Technologies,
Architectures,
and Protocols for Computer Communications, pp. 61–72, Aug. 2002.
[61] A. D. Keromytis, V. Misra, and D. Rubenstein, “SOS: An Architecture for 
Mitigating
DDoS Atacks,” IEEE Journal on Selected Areas in Communications, vol.
22(1), pp. 176–188, Jan. 2004.
124
Review, vol. 32, no. 3, pp. 62–73, July 2002.
[74] S. Mann and E. L. Mitchell,Linux System Security: The Administrator’s Guide 
to Open Source Security Tools. Prentice Hall PTR, 1999.
[75]D. L. Mils, “Network time protocol (NTP),” Internet Engineering Task Force,
RFC 958, Sept. 1985. [Online]. Available: http://www.rfc-editor.org/rfc/rfc958.txt
[76] J. Mirkovic, G. Prier, and P. Reiher, “Atacking DDoS at the Source,” 
Proceedings
of International Conference on Network Protocols, pp. 312–321, Nov. 2002.
[77] J. C. Mogul and S. E. Deering, “Path MTU Discovery,” Internet Engineering 
Task Force, RFC 1191, Nov. 1990. [Online]. Available: http://www.rfc-editor.org/rfc/
rfc1191.txt
[78] D. Moore,G. Voelker, and S. Savage, “Inferring Internet Denial of Service
Activity,” Proceedings of USENIX Security Symposium. [Online]. Available:
http://www.usenix.org/events/sec01/moore.html Aug. 2001.
[79] D. Moore, G. Voelker, and S. Savage, “Inferring Internet Denial-of-Service
Activity,”
Proceedings of USENIX Security Symposium, Aug. 2001.
[80] R. M. Needham, “Denial of Service: An Example,” Communications of the
ACM, vol. 37, no. 11, pp. 42–46, 1994.
[81] C. Papadopoulos, R. Lindell, A. Mehringer, J.and Hussain, and R. Govindan,
“COSSACK: Coordinated Suppression of Simultaneous Atacks,” Proceedings of
the third DARPA Information Survivability Conference and Exposition, vol. 1, pp.
2–13, Apr. 2003.
[82] K. Park and H. Lee, “On the Efectiveness of Route-Based Packet Filtering for
Distributed DoS Attack Prevention in Power-Law Internets.” Proceedings of
SIGCOMM, pp. 15–26, 2001.
[83] V. Paxson, “End-to-End Routing Behavior in the Internet,” IEEE/ACM
Transactions on Networking, vol. 5(5), pp. 601–615, Oct. 1997.
[84] V. Paxson, “An analysis of Using Reflectors for Distributed Denial-of-Service
Atacks,”SIGCOMM Comput. Commun. Rev., vol. 31, no. 3, pp. 38–47, 2001.
[85] T. Peng, C. Leckie, and K. Ramamohanarao, “Protection from Distributed Denial
of Service Attacks using History-based IP Filtering,” Proceedings of IEEE
International Conference on Communications, vol. 1, pp. 482–486, May 2003.
[86] T. Peng, C. Leckie, and K. Ramamohanarao, “Adjusted Probabilistic Packet 
Markingfor IP Traceback,” Proceedings of the Second International IFIP-TC6
Networking Conference, pp. 697–708, May 2002.
[87] T. Peng, C. Leckie, and K. Ramamohanarao, “Detecting Distributed
Denial of Service Atacks Using Source IP Address Monitoring,” The
126
[101] A. C. Snoeren, C. Partridge, L. A. Sanchez, C. E. Jones, F. Tchakountio, W. T.
Strayer, and S. T. Kent, “Single-Packet IP Traceback,” IEEE/ACM Transactioins
on Networking, vol. 10, no. 6, pp. 721–734, 2002.
[102] D. Song and A. Perrig, “Advanced and Authenticated Marking Schemes for IP
Traceback,” Proceedings of IEEE INFOCOM Conference, pp. 878–886, Apr. 2001.
[103] M. Sung and J. X, “IP Traceback-Based Intelligent Packet Filtering: A Novel
Techniquefor Defending against Internet DDoS Atacks,” Proceedings of
International Conference on Network Protocols, pp. 302–311, Nov. 2002.
[104] M. Sung and J. X, “IP Traceback-Based Intelligent Packet Filtering: A Novel
Technique for Defending against Internet DDoS Atacks,” IEEE Transactions on
Parallel and Distributed Systems, vol. 14, no. 9, pp. 861–872, Sept. 2003.
[105] W. Theilmann and K. Rothermel, “Dynamic Distance Maps of the Internet,” 
Proceedings of the IEEE INFOCOM, vol. 1, pp. 275–284, Mar. 2000.
[106] R. Thomas, B. Mark, T. Johnson, and J. Croal, “NetBouncer: 
Client-legitimacybased High-performance DDoS Filtering,” Proceedings of the third
DARPA Information Survivability Conference and Exposition, vol. 1, pp. 14–25, Apr.
2003.
[107] K. K. Wan and R. K. Chang, “Engineering of a Global Defense Infrastructure 
forDDoS Atacks,” Proceedings of 10th IEEE International Conference on Networks,
pp. 419–427, Aug. 2002.
[108] P. A. Watson, “Slipping in the Window: TCP Reset Atacks,” cansecwest/core
conference. [Online]. Available: http://cansecwest.com/csw04/csw04-Watson.doc
2004.
[109] J. M. Winet, “The Definition of a Socket,” InternetEngineering Task Force,
RFC 147, May 1971. [Online]. Available: http://www.rfc-editor.org/rfc/rfc147.txt
[110] D. Wreski, “Linux Security Administrator’s Guide,” 1998. [Online]. Available:
http://www.nic.com/_dave/SecurityAdminGuide/SecurityAdminGuide.html
[111] Y. Xiang, Y. Lin, W. Lei, and S. Huang, “Detecting DDOS atack based on 
network self-similarity,” IEE Proceedings on Communications, vol. 151, pp. 292–295,
June 2004.
[112] J. Xu and W. Lee, “Sustaining Availability of Web Services under Distributed
Denial of Service Atacks,” IEEE Transactions on Computers, vol. 52, pp. 195–
208, Feb. 2003.
[113] D. Xuan, S. Chelappan, X. Wang, and S. Wang, “Analyzing the Secure 
OverlayServices Architecture under Inteligent DDoS Atacks,” Proceedings of 24th
International Conference on Distributed Computing Systems, pp. 408–417, May
2004.
[114] A. Yaar, A. Perig, and D. Song, “SIFF: A Stateless Internet Flow Filter to 
128
附件一、可供推廣之研發成果資料表
第一年 95 年 8 月 1 日至 96 年 7 月 31 日
□ 可申請專利 □ 可技術移轉 日期：96 年 05 月 30 日
國科會補助計畫
計畫名稱：分散式阻斷攻擊防禦機制之研發與設計
計畫主持人：謝續平
計畫編號：95-2221-E-009-095-MY3 學門領域：資訊學門
技術/創作名稱 分散式阻斷機制
發明人/創作人 謝續平、李富源
中文:
DDoS 攻擊普遍發生，凸顯對抗 DDoS 攻擊有極大的需求。由於
大量不安全系統提供 DDoS 攻擊者大量的攻擊僵屍，而這些攻擊僵
屍可以輕易地獲取與佈署工具，惡意用戶也能利用 DDoS 攻擊封包
輕易地癱瘓網路伺服器。另一方面，由於大規模的僵屍網路、IP
欺騙技術、高級合法與非法之間的灰色封包技術以及獨立分散是網
路管理技術讓 DDoS 攻擊的防禦機制越做越複雜。
在這個專題中，我們將討論 DDoS 攻擊防禦機制。為了更好了
解 DDoS 攻擊和設計有效並且適當的 DDoS 防禦和反應，我們詳盡闡
述 DDoS 攻擊的起源、包括攻擊串流型態以及常用的攻擊工具。之
後，我們提出一個利用指紋模式機制防止 DDoS 攻擊。
技術說明
英文:
The widespread incidences of distributed denial -of-service
(DDoS) attacks have highlighted a great demand for effective DDoS
countermeasures. Owing to a large number of insecure systems
supplying DDoS attackers with abundant attack zombies and the set
of easily acquired and deployed DDoS attack tools, malicious
users can easily overwhelm Internet servers with DDoS attack
packets. On the other hand, the defense of DDoS attacks has been
made very complicated by large sets of attack zombies, IP spoofing
techniques, high level of similarity between legitimate and attack
packets, and the independent and distributed nature of network
130
中文：
在此論文中將針對追蹤單一封包攻擊來源的問題進行研究。在此提
出一種有效利用空間的方法, 稱作”基於邊緣的路由表示法”。依
照此表示法,我們更提出一個一般性的追縱來源方法，允許路線被
編碼成少數幾個位元。這個方法可以向下兼容、或向上延伸。在此
計劃中, 封包的整個路由過程會被劃分成幾個部份路徑的集合，透
過額外 ICMP 的封包一起傳給目的地的主機。雖然使用大量的 ICMP
封包數字也許會對路由器和網路產生極大的負擔。但實驗結果顯示
並不然。且數據顯示我們所提出方法的準確性是相當高的。在 100
Mbps 的網路環境中, 辨認攻擊來源準確率可達到 99.98% 。由此可
見對單一封包 IP 追溯來源，在此所提出的方法是有效、準確和可
行的
技術說明
英文：In this paper, the issue of tracing the origin of a single-packet
attack is addressed. We propose a space-efficient route representation,
namely edge-based route representation. Subsequently, based on
edge-based route representation, we present a general purpose single
packet trace back scheme which allows a route to be encoded using a
few bits. The proposed scheme is backward compatible and can be
deployed incrementally. In the scheme, the entire route of a packet is
divided into a set of partial paths which are recorded and delivered to
the destination host along with the packet itself or by ICMP packets.
Although using a large of number of ICMP packets may seemingly
pose substantial overhead to routers and networks, our experimental
results show that, in practice, this overhead is relatively low. Moreover,
analytic analysis shows that the accuracy of the proposed scheme is
high. In a network environment with 100 Mbps links, the accuracy of
identifying the attack source reaches 99.98%. This indicates the
proposed scheme is effective, accurate, and feasible for the single
packet IP trace back.
可利用之產業
及
可開發之產品
在產業界來說，可利用的對像分成兩個部份，一個是國家安全相關
單位，如國安局或是調查局等。可針對新一代的網路攻擊或是無線
網路攻擊的來源，加以追縱及調查，並追溯攻擊的來源(trace
back)；另一個部份則是防毒軟體公司，可以將此技術應用在防火
牆，除了能抵擋外來的攻擊之外，甚至可以追溯攻擊的來源，記錄
相關攻擊者的資訊，而且此追溯所需要的資源是相對的小，所以可
以大量的降低使用者的負擔。
132
英文:
In this paper, we propose a new scheme, called ANTID, for detecting
and filtering DDoS attacks which use spoofed packets to circumvent
the conventional intrusion detection schemes. The proposed anti-DDoS
scheme intends to complement, rather than replace conventional
schemes. By embedding in each IP packet a unique path fingerprint
that represents the route an IP packet has traversed, ANTID is able to
distinguish IP packets that traverse different Internet paths. In ANTID,
a server maintains for each of its communicating clients the mapping
from the client’s IP address to the coresponding path fingerprint. The 
construction and renewal of these mappings is performed in an
on-demand fashion that helps reduce the cost of maintenance. With
presence of the mapping table, the onset of a spoofed DDoS attack can
be detected by observing a surge of spoofed packets. Consequently,
spoofed attack packets are filtered so as to sustain the quality of
protected Internet services. ANTID is lightweight, robust, and
incrementally deployable. Our experiment results showed that the
proposed scheme can detect 99.95% spoofed IP packets and can
discard them with little collateral damage to legitimate clients. It also
showed that the higher the aggregated attack rate is, the sooner the
attack can be detected.
可利用之產業
及
可開發之產品
此機制可與現有網路架構整合在一起，為網路提供完好的防禦機
制，可供網路服務提供商(ISP)提供反制分散式阻斷服務攻擊的服
務，以減低企業遭受阻斷式服務攻擊的損害，或是防毒軟體、防火
牆設計廠商抵擋此攻擊。
技術特點
使用封包標記的技術產生路徑指紋，可追蹤得知封包所走過的路
徑，偵測出哪些封包是偽造的，當阻斷式服務攻擊產生時在攻擊者
端阻擋攻擊封包。並可以有效的儲存封包路徑指紋。
推廣及運用的價值
近年來，網際網路快速成長，因其便利性、多樣性、即時性…等，
使之在忙碌的社會中蓬勃發展，不但改變了人們的生活型態也成為
生活中不可或缺的角色。在仰賴資訊科技的同時，實際上存在著許
多潛在的網路安全威脅與駭客攻擊。本年度的研究主要探討如何利
用路徑指紋來防禦分散式阻斷攻擊的技術。此技術利用路徑指紋得
知封包路徑後，偵測出迅速增加的偽裝封包，有效防禦分散式阻斷
攻擊。
134
設計高準確性且低誤判率之攻擊者端防禦機制
ˇ
設計可行之動態調整門檻機制，以降低誤判率
ˇ
設計可行之動態調整門檻機制，以降低誤判率
ˇ
第三年 97 年 8 月 1 日至 98 年 7 月 31 日
項目 已完
成
未
完
成
設計路徑指紋的格式
ˇ
設計可行的封包路徑指紋產出機制
ˇ
設計封包路徑指紋追踨機制
ˇ
設計有效儲存或者節省儲存空間的方法，來儲存封包路徑指紋
ˇ
研究路徑指紋管理之相關議題
ˇ
設計適合於現有網路平台上且有效之路徑指紋比對機制
ˇ
2目 次
一、 出國目的.................................................錯誤! 尚未定義書籤。
二、 行程 .........................................................錯誤! 尚未定義書籤。
三、 出國人員
四、 工作內容摘要 .........................................錯誤! 尚未定義書籤。
五、 結語 .........................................................錯誤! 尚未定義書籤。
六、 ACM Symposium on Information, Computer and Communications
Security （ASIACCS）議程...............................錯誤! 尚未定義書籤。
43/13 visit Macquarie University
3/15 Sydney–Hong Kong
3/16 Visit President of Wey Kuo, City University of Hong Kong, the
organizer of 2011 conference
3/16 Hong Kong–Taiwan
三、出國人員：
謝續平現任交通大學資訊工程系教授暨 TWISC＠NCTU 主任，曾任
交通大學資訊工程系系主任、交通大學計算機與網路中心主任、中華
民國資訊安全學會理事長。現擔任 ACM Symposium on Information,
Computer and Communications Security （ASIACCS） 推動委員會
主席（steering committee chair）。負責遴選籌辦國家單位，並督
導籌辦進度。
四、工作內容摘要
由於擔任 ACM Special Interest Group on Security, Audit, and
Control (SIGSAC) 的 推 動 委 員 會 委 員 （ Steering Committee
member），並且擔任 ACM Symposium on Information, Computer and
Communications Security （ASIACCS） 推動委員會主席（steering
committee chair），被 ACM 賦予：
a) 觀察本年度會議執行成果，
b) 審查下年度執行單位籌備現況，
6議程主席，全力投入本次會議，著力甚多。會議由雪梨市、澳洲
Macquarie University、新加坡 Singapore Management University
大力贊助，有來自全世界三十餘國作者投稿，稿件水準極高，接受率
極低，約為 15％，會議圓滿成功。
六、會議議程
ASIACCS 2009: Sydney, Australia
Wanqing Li, Willy Susilo, Udaya Kiran Tupakula, Reihaneh Safavi-Naini, Vijay
Varadharajan (Eds.): Proceedings of the 2009 ACM Symposium on Information,
Computer and Communications Security, ASIACCS 2009, Sydney, Australia, March
10-12, 2009. ACM 2009, ISBN 978-1-60558-394-5
Keynote
 Paul A. Karger:
Securing virtual machine monitors: what is needed?
 Bhavani M. Thuraisingham:
Assured information sharing between trustworthy, semi-trustworthy and
untrustworthy coalition partners.
Network security-I
 Wei Lu, Mahbod Tavallaee, Ali A. Ghorbani:
Automatic discovery of botnet communities on large-scale communication
networks.
 Zhichun Li, Anup Goyal, Yan Chen, Vern Paxson:
Automating analysis of large-scale botnet probing events.
 Brent ByungHoon Kang, Eric Chan-Tin, Christopher P. Lee, James Tyra, Hun
Jeong Kang, Chris Nunnery, Zachariah Wadler, Greg Sinclair, Nicholas Hopper,
David Dagon, Yongdae Kim:
Towards complete node enumeration in a peer-to-peer botnet.
8 Jung Yeon Hwang, Dong Hoon Lee, Moti Yung:
Universal forgery of the identity-based sequential aggregate signature
scheme.
 Kazukuni Kobara, SeongHan Shin, Mario Strefler:
Partnership in key exchange protocols.
Theory of security
 Kannan Srinathan, Arpita Patra, Ashish Choudhary, C. Pandu Rangan:
Unconditionally secure message transmission in arbitrary directed
synchronous networks tolerating generalized mixed adversary.
 Stefan Fenz, Andreas Ekelhart:
Formalizing information security knowledge.
Anonymity and privacy
 Julien Bringer, Hervé Chabanne, Thomas Icart:
Efficient zero-knowledge identification schemes which respect privacy.
 Han Chen, Pasquale Malacaria:
Quantifying maximal loss of anonymity in protocols.
 Brian Thompson, Danfeng Yao:
The union-split algorithm and cluster-based anonymization of social
networks.
 Xavier Boyen:
Hidden credential retrieval from a reusable password.
Access control
 Robert Craven, Jorge Lobo, Jiefei Ma, Alessandra Russo, Emil C. Lupu, Arosha
K. Bandara:
Expressive policy analysis with enhanced system dynamicity.
 Stere Preda, Frédéric Cuppens, Nora Cuppens-Boulahia, Joaquín García-Alfaro,
Laurent Toutain, Yehia Elrakaiby:
Semantic context aware security policy deployment.
 Rakeshbabu Bobba, Himanshu Khurana, Musab AlTurki, Farhana Ashraf:
PBES: a policy based encryption system with application to data sharing in
the power grid.
