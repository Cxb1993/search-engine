2 
 
架與 API 建立超模型，以供開發者遵循據以產生其外掛程式模型;其次則是規畫建構相
關的模型轉換與程式碼產生器，以供模型開發者產生對應的外掛程式骨架與部分實做。 
 
二、研究目的 
 
如前所述，Eclipse 是目前市場的主流軟體工具平台，其於軟體工具平台之地位猶如現今
作業系統之 Linux 與 Windows。因此，開發者莫不期盼開發以 Eclipse 為承載平台之軟
體或將其既有軟體整合至此平台執行。然而，由於系統之複雜，依據傳統模式，以程式
為核心的開發方式，將使 Eclipse 外掛程式開發，變得極度的繁雜與困難。而依據 MDA
的理念，以模型為核心的方式，將可使開發者免於 Eclipse 軟體框架與 API 之細節，而
可集中在專精的邏輯設計。然而以模型驅動方式開發程式的要件是必須具有對應領域的
超模型與輔助的模型轉換與程式碼產生器。 
   因此，我們此一計畫的主要任務即是探討並實際為 Eclipse 平台的主要常用框架與
API 建立超模型，以供開發者遵循據以產生其外掛程式模型。此外，我們也需要提供必
要的模型轉換工具，以便將高階之 PIM(Platform Independent Model) 轉為含有更多實作
細節之 PSM(Platform Specific Model)。最後再經由程式碼產生器，將 PSM 轉換為包含
程式骨架以及大部分實做的程式碼。 
 
三、文獻探討 
 
以手寫以外的方式自動產生 Eclipse plug-ins 的系統實際上是非常普遍存在的。在
Eclipse modeling 計畫群之內的許多計畫如: EMF,GMF,OAW,以及我們自行發展的
EGOE[47]系統均允許開發者在後面階段自動產生 Eclipse plug-ins。然而與我們的計
畫的最大的不同是，這些工具所產生的是 plug-ins 是為了實做特殊應用而由工具程式
所產生的特殊用途 Plug-ins。舉例而言，EMF 可以為開發者輸入之 Ecore 超模型產生
對應的樹狀結構式模型編輯器，其中包含各式選單(Menu & ToolBar)，偏好設定對話
頁，編輯器與各種視圖(View)。然而這些外掛程式，都是為了支援模型編輯器而存在
的，我們無法令 EMF 為我們產生除此之外的任何一個外掛程式。同樣的道理，GMF 可
以為開發著產生圖型編輯器，EGOE 與 OAW 可以為開法者產生文字式編輯器，及各種功
能支援外掛程式，但他們無法產生這些功能以外的任何外掛程式，例如產生一個可以
為客戶產生新檔的對話精靈。 
   Eclipse Plug-ins具有相當大的比例是屬於 GUI 設計，而在 GUI設計上，目前有越
來越多的趨勢是盡量改用 Declarative的方式以取代傳統的 imperative程式設計。最
大好處是可以降低程式碼數量，同時又增加程式之可讀性與可維護性。此一方面的進
展幾乎都是以 XML 為表達語言，最早出現的是 UIML，其後類似語言相繼出現，如
Mozilla 之 XUL,以致最近之 XAML，Laszlo 以及 JavaFX 均屬之。至於應用於 Eclipse
的 SWT 與 JFface 等 GUI 工具的 XML 語言則有 XSWT 與 eFace.  
   以生成方式產生全部或部分程式，以替代人為手寫的研究，事實上，存在已久。此
領域稱為 Generative Programming，每年都有一個名為 Generative Programming and 
Component Engineering(GPCE) 的國際會議針對此一領域與元件技術舉行。然而這些
研究，主要是針對各式技術，理論與應用，而我們的計畫則可視為是此一領域的一個
特殊領域應用。在 code generation 的技術上，我們所用的大部分是屬於範本套用的
技巧。此類技術已普遍應用於各領域如: 網頁設計之 JSP, 一般用途範本引擎 Velocity 
與 freeMarker， 文法程式分析器合成器(StringTemplate)，XML文件轉換(XSLT)等。然
而我們採用的 code generator 有兩大特性不見於前述工具:其一是我們的工具不能只
4 
 
程式的轉換工具，現有工具如[22,23]均提供各自的完整的語言供客戶使用。Open source 
的部份則可使用 AndroMDA[43]、EMF[33]上的 JET[41]範本語言、或使用 MODELWARE[34] 
計畫下的 MOFScript[35]，此 Eclipse 外掛程式事實上實做的是 OMG正在推動的通用的
模型至本文轉換語言[36]的原型。 
   確立模型表達與轉換工具之後，下一考量，即是PSM, PIM, PIM2PSM, PSM2Code (模
型至程式碼)等實體的內涵為何。簡單的分析之後，馬上就可獲致以下結論: 外掛程式
的組成是由兩部分組成:一者是與Eclipse平台無關的工具程式邏輯；一者則是用於支援
工具程式的Eclipse元件或框架。因此，PIM表示的應該是與Eclipse平台無關的軟體工
具部分；PIM2PSM轉換則負責陳述PIM上的各元素如何與Eclipse元件編織而成為具有完
整Eclipse平台外掛程式功能的一個PSM。至於PIM與程式碼之間，基本上只是視為同一
語意的兩種不同表法，彼此間應該是同構的(Isomorphic)。因此只要PSM的內容完整無
矛盾，套用Visitor pattern或應用Template即能產生對應程式碼。唯若要能夠設計程
式合成器，必須對採用工具，外掛程式專案的組成結構、以及PIM的模型架構有充分的
熟悉與掌握。綜合前述，我們確認PSM的模型結構( PSM MetaModel 或 PSM描述語言)是
最容易分析定義的，其主因乃是因為PSM與完整外掛程式碼同構，而外掛程式碼專案的
完整結構在Eclipse平台上是具有清楚定義而可以分析得到的。 
   一旦得知PSM的模型結構之後，接下來進行的就是模型分離的工作。我們需要針對PSM
模型內的所有可能型態的元素分析其組成來源以及組成方式。組成來源依其是與平台相
關或與工具相關而分別歸屬為PIM元素或PDM(Platform Description Model)[12,49]元
素。至於組成方式則歸類為PIM2PSM轉換器的一部份。因此我們的研究方法是Bottom-up 
的逆向分析。先由閱讀學習，了解 Eclipse的主要元件與外掛結構，接著利用同構概念，
反向訂出PSM的模型結構，然後再經模型分離分析，解構出PIM和PDM的必要結構，以及
PIM2PSM 轉換器的必要內涵。值得一提的是，此種逆向分析所形構出來的metamodel通
常不會完備，我們應該還需要以自訂或內插方式補足其欠缺。 
 
五、結果與討論 
 
本計劃申請時的主要目標有二。一為從現有 Eclipse 平台上的各種框架與 API，取最常
被開發者引用的部分，提供更高層次的模型描述，稱之為超模型。有了超模型之後，開
發者即可利用這些超模型，在 EMF編輯器之下，編輯產生超模型實例，即是傳統所謂的
模型。其次則是規畫建構相關的模型轉換與程式碼產生器，以供模型開發者產生對應的
外掛程式骨架與部分實做。 
在超模型的設計上，我們規畫了: 
1. 與 Eclipse 功能觸發有關之超模型。此部分的主要概念或框架包括:選單區(Menu 
bar)、選單(Menu)、彈跳式選單(Context Menu)、選項(Menu Item)、工具箱(Tool Bar)、
動作(Action)、動作集(Action Set)、指令(Command)、指令處理器(handler)、鍵
結(Key Binding)等。除了為上述基本概念定義超模型之外，我們也定義了以下超模
型:視景動作(View Action)、編輯器動作(Editor Action)、彈跳選單動作(Context 
Menu Action)，全域動作(Global Action)、指令組(Command),等。 
2. 與資訊閱覽相關之超模型。此部分的主要概念是視圖(View)，它是 Eclipse 用以輔
助使用者瀏覽相關資訊的各種內嵌輔助視窗。Eclipse 平台實際上，已經預建許多視
圖，例如: Resource Nevigator，Console，Task View, Problem View, Content Outline 
View, Property View.此部分的結果包含為視圖(View)定義一個通用的超模型，以
供程式師開發其他視圖。而另一個重大的任務則是，針對上述特殊視圖，提供延伸
點超模型，原因是因為這些視圖本身就是一種接受其他外掛程式奉獻的可延伸平台
服務，因此開發者需要有一實用超模型以供其產生對應之延伸。 
6 
 
參考文獻: 
 
[01] Stephen J. Mellor, Kendall Scott, Axel Uhl, Dirk Weise, MDA Distilled: Principles of 
Model-Driven Architecture, Addison Wesley, 2004.   
[02] Anneke Kleppe, Jos Warmer, Wim Bast, MDA Explained: The Model Driven Architecture: 
Practice and Promise. Addison Wesley, 2003. 
[03] Jos Warmer, Anneke Kleppe, Object Constraint Language: Getting Your Models Ready for 
MDA, 2nd Edition, Addison Wesley, 2003. 
[04] Grady Booch, James Rumbaugh, Ivar Jacobson , The Unified Modeling Language User Guide, 
2nd Edition, Addison Wesley, 2005. 
[05] Frankel, David, Model driven architecture : applying MDA to enterprise computing, Wiley, 
2003. 
[06] Daniel J. Duffy, Domain Architectures: Models and Architectures for UML Applications, Wiley, 
2004. 
[07] Jeff McAffer, Jean-Michel Lemieux, Eclipse Rich Client Platform: Designing, Coding and 
Packaging Java Applications, Addison Wesley, 2005,  
[08] Jim D'Anjou, Scott Fairbrother, et al. The Java Developer's Guide to Eclipse, 2nd Edition, 
Addison Wesley, October 2004. 
[09] John Arthorne and Chris Laffra, Official Eclipse 3.0 FAQ, Addison Wesley, June 2004. 
[10] Eric Clayberg and Dan Rubel,Eclipse: Building Commercial-Quality Plug-Ins, 2nd Edition,  
Addison Wesley, 2006. 
[11] Frank Budinsky, Timothy Grose, et al. Eclipse Modeling Framework, Addison Wesley, August 
2003. 
[12] Object Management Group, MDA Guide V1.0.1. http://www.omg.org/cgi-bin/ 
doc?omg/03-06-01 
[13] Object Management Group, MDA web site. http://www.omg.org/mda 
[14] UML web site. http://www.uml.org 
[15] Object Management Group, MOF web site. http://www.omg.org/mof/ 
[16] Eclipse web site. http://www.eclipse.org. 
[17] Eclipse platform project. http://wwwe.clipse.org/ecipse/ 
[18] Eclipse Java development Kit. http://wwwe.clipse.org/jdt/ 
[19] Eclipse plug-in development environment. http://wwwe.clipse.org/pde/ 
[20] Eclipse GMT project. http://www.eclipse.org/gmt/ 
[21] Eclipse ATL subproject. http://www.eclipse.org/gmt/atl 
[22] Sparx systems, Enterprise Architect. http://www.sparxsystems.com.au/ 
[23] Borland, Together Architect. http://www.borland.com/us/products/together/index.html 
[24] No Magic, MagicDraw UML. http://www.magicdraw.com/ 
[25] Jack Greenfield, Keith Short et al. Software Factories: Assembling Applications with Patterns, 
Models, Frameworks, and Tools. John Wiley & Sons, 2004. 
[26] Erich Gamma, Richard Helm et al. Design Patterns: Elements of Reusable Object-Oriented 
Software, Addison-Wesley, 1995. 
[27] Ian Sommerville, Software engineering. Addison Wesley, 2005. 
[28] OMG, Catalog of OMG Domain Specifications. http://www.omg.org/technology/documents/ 
domain_spec_catalog.htm 
