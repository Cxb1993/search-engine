 2
 
Rule 欄位1 欄位2 欄位3 欄位4 欄位5 Cost Action 
1 1* 010 2-4 6-9 TCP 10 Deny 
2 101 * 1-7 4-6 UDP 2 Pass 
3 00* 10* * * ICMP 7 Deny 
4 11* 01* 4-8 * TCP 5 Pass 
5 * * * 10-15 * * Deny 
圖一、分類規則資料庫範例 
研究目標 
封包分類演算法的優劣與否，可透過下列幾項因素加以評估： 
z 搜尋速度：隨著網路傳輸速度的快速成長，設備在單位時間內必須處理的封包數
量也快速增加，因此演算法必須在最短的時間內完成封包分類的動作，避免成為
封包傳送的瓶頸。 
z 儲存空間需求：演算法所需要使用的儲存空間即代表實作此演算法所需要的成
本，因此必須盡可能減少儲存空間的使用量。 
z 支援的欄位數量：由於分類規則十分多樣化，演算法必須適用於各種維度的分類
規則。 
z 規則更新速度：分類規則資料庫的內容並非永遠不變，可能會有規則的新增、刪
除或修改的動作發生，一個好的演算法必須能有效率地處理規則更新的需求。 
z 效能穩定性：由於不同用途的分類規則資料庫具有不同的特性，如果演算法的效
能與資料庫的特性有強烈的相關性，便會造成該演算法只適用於具有某些特性的
資料庫，無法廣泛地用於各式應用。 
雖然在國內外相關研究之文獻中可以找到為數眾多的封包分類演算法，但是現有的方
式通常無法同時滿足上述的所有項目，或是無法處理大量的分類規則。舉例來說，硬體類
的方式雖然可以提供快速的搜尋，但是卻只能使用於分類規則數目不大的資料庫，同時還
有耗電量太大的問題。軟體類的方式則是可以應付分類規則數目龐大的資料庫，但是卻無
法提供足夠快速的搜尋時間。由於網際網路的快速發展以及各類服務的相繼出現，未來的
路由器勢必得具備能處理大量分類規則的能力。因此本計畫的目的是設計一個具高度擴充
性且高效率的封包分類演算法。更具體的說，我們希望所設計的演算法能處理數量高達數
十萬個分類規則的資料庫，並且提供比現有方式更快速的搜尋，同時使用更少量的記憶體
空間。 
 
三、文獻探討 
由於封包分類在實用上的重要性，文獻上可以找到許多針對封包分類所提出的演算法
[1,6,9,10,15-18]。這些演算法可以分為以下幾類：線性搜尋/快取(linear search/caching)、硬
 4
的決策擴展至多維的決策。 
表一列出數種著名的封包分類演算法的時間與空間複雜度。 
 
表一 不同方法的時間與空間複雜度比較 
方法名稱 時間複雜度 空間複雜度 
Linear Search O(N) O(N) 
TCAM O(1) O(NW) 
Bit Parallelism [16] O(DW+N/B) O(DN2) 
Grid of Tries [18] O(W) O(NDW) 
Cross-producting [18] O(DW) O(ND) 
RFC [9] O(D) O(ND) 
Tuple Pruning Search [17] O(2W+W2) O(N) 
Rectangle Search [17] O(2W-1) O(NW) 
 
四、研究方法 
根據上述的文獻探討可以看出，不同類型的演算法具有不同的特性。針對單一類型的
演算法而言，時間複雜度與空間複雜度通常難以兼顧。舉例來說，TCAM 類型的演算法具
有最佳的時間複雜度 O(1)，但是不具有最佳的空間複雜度(O(NW) vs. O(N))。因此，我們分
別由硬體與軟體兩個不同的角度來提出解決方案。 
我們所提出的第一個演算法[19]是針對利用 TCAM 實作封包分類的方法加以改進。利
用將所有分類規則預先進行處理與編碼的方式，我們可以將分類規則的最大長度縮短。由
於 TCAM 的實作成本與耗電量與其容量有直接的關係，因此若能減少儲存分類規則所需要
的儲存空間，便可以減少硬體成本與耗電量，提高 TCAM 與其他類型演算法的競爭力。雖
然第一個演算法能提供快速的搜尋速度與有效地減少硬體成本，但對於以成本為首要考量
的應用領域而言，TCAM 類型的演算法仍非最佳的選擇。 
第二個演算法會預先對所有分類規則進行分類，並針對每一類的分類規則建立索引，
以方便未來搜尋比對動作的進行。當需要進行封包分類的動作時，首先會先透過索引找到
所屬的類別，然後再到該類別中搜尋符合的分類規則。利用預先建立的索引，能迅速濾除
大部份不可能符合的分類規則。另一方面，由於同一類的分類規則在欄位長度上具有相同
的特性，因此在搜尋同一類別中的分類規則能以較快速的方式進行。 
 
五、結果與討論 
為了驗證我們所提出的演算法的效能，我們利用由 IPMA [23]與 NLANR [24]所下載的
資料來測試第一個演算法的效能。另外，第二個演算法採用 Abilene Observatory Project [21, 
22]所下載的分類規則資料庫來進行測試，總共 10 個分類規則資料庫中具有由 333 到 3065
個數量不等的分類規則。由於可取得的真實分類規則資料庫所含有的分類規則太少，無法
測試演算法是否具有可擴充性，可用於大型的分類規則資料庫。因此，我們使用由華盛頓
