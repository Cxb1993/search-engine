already been segmented into semantically coherent seg-
ments. Besides, satisfying results may not be obtained
from video with a sound track containing more than
just speech (such as music and environmental sound),
or video clip which is silent. In the third category,
emphasis is put on the integration of visual and au-
dio features[6, 7, 8, 9]. This is because multi modal
features can provide more information to resolve ambi-
guities that are present in a single modality. But, it is
computationally expensive.
II. MOTIVATION
As the definition of violence is ambiguous, violence
detection is a subjective process. In this work, we de-
fine violence from an empirical viewpoint. Our defini-
tion of violence is: a series of human actions accompa-
nying with bleeding. Thus, the task of violence scene
detection can be decomposed into two processes: ac-
tion scene detection and bloody frame detection. Be-
fore describing the details of the proposed approach, we
review the hierarchical structure of video. A video is
physically formed by shots and semantically described
by scenes. A shot is a sequence of frames that was
continuously captured by the same camera. A scene
is basically a story unit and consists of a small num-
ber of interrelated shots that are consecutive or not.
Shots in video are analogous to words in language as
they convey little semantic information in isolation. On
the other hand, scenes allow event to be fully presented
and reflect the dramatic and narrative structure of a
video. It is noted that previous approaches on violent
scene detection only work on shot level and they do not
fully exploit the information contained in video struc-
ture. In this paper, we propose a novel technique based
on the construction of high-level video structure. To
be simple yet effective, only visual features of video are
used. Support vector machine (SVM) is also employed
to classify the extracted scenes into action scenes and
non-action scenes. The proposed approach is made up
of four main steps
(1) Segmentation of video into shots.
(2) Grouping of shots into scene.
(3) Action scene detection using SVM.
(4) Bloody frame detection.
where step (1) and (2) are accomplished by our previous
work[10]. The details of step (3) and (4) are described
in section III and IV respectively.
III. ACTION SCENE DETECTION USING SVM
For each scene of the video sequence, some features
are extracted. Then, a binary classifier (SVM) is em-
ployed to detect the action scene[11]. The details are
described in the following two subsections.
A. Overview of Support Vector Machines
Unlike traditional learning techniques such as neu-
ral networks which minimize the empirical training er-
ror, the support vector machines (SVMs) are based on
the structural risk minimization principle. The basic
idea is closely related to regularization[12]: for a finite
set of training samples, the search for the best model
or approximating function has to be constrained by an
appropriately small hypothesis space. If the space is
too large, functions can be found which fit exactly the
training data, but they will have poor generalization
capabilities on new test data. Instead, the minimiza-
tion of the structural risk is equivalent to minimizing
the sum of the error on the training set and the com-
plexity of the hypothesis space, expressed in terms of
VC-dimension. Consequently, the solutions obtained
with SVMs are more likely to generalize well on new
data points. We now go through the SVMs for a two-
class classification problem. For a comprehensive and
rigorous account of SVMs, please see[13].
Given a training set S = {(x1, y1), · · · , (xn, yn)},
where feature vector xi ∈ Rd and label yi ∈ {1,−1},
the goal of SVM is to construct a hyperplane that max-
imizes the margin while minimizing a quantity propor-
tional to the misclassification error. The optimal sepa-
rating hyperplane w∗ · x + b∗ = 0 can be found under
the following constraints:
min
w,b,ξ
1
2
w ·w +C
n∑
i=1
ξi
subject to
yi(w · xi + b) ≥ 1− ξi, ξi ≥ 0, i = 1, · · · , n
where C is the penalty parameter that controls the
tradeoff between the margin and the misclassification
errors ξ = (ξ1, · · · , ξn). Here training vectors xi are
mapped into a higher dimensional space by the func-
tion φ, and K(xi, xj) ≡ φ(xi) ·φ(xj) is called the kernel
function. This is a quadratic programming problem
2
IV BLOODY FRAME DETECTION
For each detected action scene, we further check
whether it contains the bloody frame. As scene is com-
posed of several shots, key frames can be extracted from
each shot. Key frame is the frame which can represent
the salient content of the shot. Currently we choose
the middle frame of each shot as key frame. Then, we
determine whether one of these key frames has bloody
content. We first identify the existence of human and
blood in the key frame.
Face detection is the natural and convenient way
to determine whether human appear in the frame im-
age. We adopt the excellent face detection algorithm
proposed by Viola and Jones[17]. This algorithm is
capable of processing images extremely rapidly while
achieving high detection rates. Figure 1 shows some
face detection results.
There are some sophisticated techniques to detect
specific color object such as flame and skin. However,
for the blood pixel detection task, the easiest method
is to define blood-color cluster decision boundaries for
RGB color space. Ranges of threshold values for each
color space component are defined and the image pixel
with values that fall within these predefined ranges is
detected as blood pixel. According to our observation,
there are two types of blood color: bright red and dark
red. The ranges of RGB color space are defined as (1)
170 > R > 80 & G < 5 & B < 5 (2) 200 > R > 120
& G < 90 & B < 90 & abs(G − B) < 8, respectively.
Figure 2 shows the blood detection result.
Then, a connected components analysis is per-
formed to group these detected blood pixels into several
potential blood regions. A size filter is used to elimi-
nate some potential blood regions which are too small
or too large. Small region may result from noise and
large region may correspond to some large object such
as red wall. As we observe from violent movies that
blood and human body always come up with fast mo-
tion, we integrate blood, face and motion informations
to determine whether a key frame is a bloody frame. A
key frame is detected as bloody frame if
• It contains both face and blood regions.
Table 1: Accuracy measures for four test movies.
Movie Violent Correct Missed False
ID No. Scenes Detection Detection Detection
(1) 17 14 3 0
(2) 10 8 2 0
(3) 18 17 1 0
(4) 12 10 2 0
• The distance between face and blood regions is less
than a threshold.
• The average motion intensity of each blood and
face region is greater than a threshold.
If an action scene contains at least one bloody frame
then it is detected as a violent scene.
V EXPERIMENTAL RESULTS
Four movies in MPEG-1 format are used in our
experiment: (1)“Kill Bill: Vol. 1”, (2)“Gladiator”,
(3)“The Passion of the Christ” and (4)“First Blood 4:
John Rambo”. The ground truth of test movies, i.e.,
the decision whether a given scene is violent scene or
not, is determined by human subjects. Some violent
scenes of movies are shown in Figure 3.
The experimental results are shown in Table 1.
The missed detection is due to two factors. One is that
the actor(actress) wears mask so that the face detec-
tion algorithm fails. The other is that the face part of
actor(actress) does not appear in the key frame. Figure
4 shows two missed detection cases. Although there is
no false detection in our experiment, one scenario that
causes false detection is a group of persons in red cloth-
ing playing basketball.
VI. CONCLUSION
We have presented an effective method for auto-
matically detecting violent scene in the digital movies.
While previous approaches addressed on shot level
of video structure only, our approach construct more
4
 6
   
 
 
            Figure 1: Some face detection results. 
 
 
                     (a) 
 
                     (b) 
 
Figure 2: (a) is the original image (b) is the detected blood pixels. 
 
 
 
 
 
 8
 
 
 
 
 
Figure 4: Some missed detection cases. 
FLASHLIGHT DETECTION IN VIDEO
Liang-Hua Chen and Bi-Cheng Hsu
Department of Computer Science
and Information Engineering
Fu Jen University
Hsinchuang, Taipei, Taiwan
Hong-Yuan Mark Liao
Institute of Information Science
Academia Sinica
Nankang, Taipei, Taiwan
ABSTRACT
Shot boundary detection is a fundamental step of video in-
dexing. One crucial issue of this step is the discrimination
of abrupt shot change from flashlight, because flashlight of-
ten induces a false shot boundary. Support vector machine
(SVM) is a supervised learning technique for data classifi-
cation. In this paper, we propose a SVM based technique
to detect flashlights in video. Our approach to flashlight
detection is based on the facts that the duration of flash-
light is short and the video contents before and after a flash-
light should be similar. So we design a sliding window in
temporal domain to monitor the instantaneous video vari-
ation and extract color and edge features to compare the
visual contents between two video segments. Then, a sup-
port vector machine is employed to classify the luminance
variation into flashlight or shot cut. Experimental results
indicate that the proposed approach is effective and outper-
forms some existing techniques.
KEY WORDS
machine.
1 Introduction
The advances in low cost mass storage devices, higher
transmission rates and improved compression techniques,
have led to the widespread use and availability of digital
video. Video data offers users of multimedia systems a
wealth of information and also serves as a data source in
many applications including digital libraries, publishing,
entertainment, broadcasting and education. However, be-
cause of the large amounts of data and unstructured format,
efficient access to video is not an easy task. To make the
original video data in the database available for browsing
and retrieval, they must be analyzed, indexed and reorga-
nized. A shot is a sequence of frames that was continuously
captured by same camera. It can serve as the fundamental
indexing unit. So shot boundary detection (or video seg-
mentation) is a crucial step in many content-based video
browse and retrieval applications. In general, shot bound-
aries can be detected by employing a metric to measure the
difference between two consecutive frames. This is based
on the fact the content remains nearly the same in an iden-
tical shot. If the difference is larger than a certain thresh-
old, it is most likely that the two frames belong to different
shots. Many efforts have been devoted to shot boundary
detection and many metrics have been proposed[1]. The
main problem of these techniques is that they are sensitive
to flashing light scene where great illumination variation
lasts for a few frames. This usually leads to false detection
of shot boundary since the metric also increases abruptly.
To achieve robust shot boundary detection, there is a need
to differentiate flashlight effect from abrupt shot change.
Another motivation for flashlight detection is the
study of its role as expressive element in movies. To nar-
rate a good story that warrants repeated audience view-
ing, movie directors use many cinematic elements to en-
hance the emotional experience of the viewer. One such
element that directors manipulate is lighting. Flashlights
are often used by directors to amplify a crisis situation, in-
tensify excitement, increase a sense of foreboding or in-
dicate the presence of a supernatural power. Truong and
Venkatesh propose an algorithm to identify five types of
dramatic events in feature films that are related to the ap-
pearance of flashlights[2].
Depending on the visual features used, the existing
techniques of flashlight detection can be classified into two
categories: color based [3, 4, 5, 2, 6] and edge based
[7, 8, 9, 10]. Color histogram is the most commonly used
color feature representation, because it is easy to compute
and robust to object motion. Assuming that the luminance
and chrominance will return to their original states after a
flashlight effect, the correlation between frames before and
after a flashlight should be high. Nakajima et al.[4] use
chrominance histogram correlation as a measure to detect
flashlight. Yeo and Liu[3] propose a method that is based
on the successive frame difference and global color statis-
tic comparison. Flashlight can be detected by the presence
of two close maxima in frame differences which are much
greater than the average value of the rest within a sliding
window. Zhang et al.[5] distinguish flashlights from real
shot cut by proposing a ‘cut model’ and a ‘flashlight model’
which are defined based on the temporal property of av-
erage intensity value across a frame sequence in a sliding
window (see Figure 1). On the other hand, edge feature
is insensitive to illumination variation to a certain extent.
The edge-based approaches assume that the edge pixels re-
main in the approximately same position for frame pairs
with flashlight effect, and occur in random fashion between
Video content analysis, supervised learning, support vector
696-066 133
the choice of color space and quantization of color space.
HSV (hue, saturation, value) color space is chosen since
it is nearly perceptually uniform. Since the human visual
system is more sensitive to the hue than to the saturation
and the value (intensity)[19], H should be quantized finer
than S and V . In our implementation, hue is quantized into
20 bins. Saturation and value are each quantized into 10
bins. This quantization provides 20× 10× 10 distinct col-
ors (bins), and each bin with non-zero count corresponds to
a color object.
Since we are interested in the whole video segment
rather than single image frame, only one histogram is used
to count the color distribution of all image frames within
a video segment. Then, each bin of the resulting his-
togram is divided by the frame number of a video seg-
ment to obtain the average color histogram. Histogram in-
tersection is a popular similarity measure for color-based
image matching[20]. It yields the number of pixels that
have same color in two images. In our work[21, 22], we
extend this idea to the matching of video segments. Let
A,B be the set of all color objects in video segment S1 and
S2 respectively, for a given u ∈ A, its similar color ob-
ject in B is some v ∈ B such that ||u − v|| < , where
||u − v|| denotes the Euclidean distance between u and v
in the HSV color space and  is a threshold ( is set to
be 3.). Then, (u, v) is called a similar color pair. Let
Ω = {(u, v)|(u, v) ∈ A×B, (u, v) is a similar color pair},
the similarity measure for color feature between S1 (with
the average color histogram HC1) and S2 (with the average
color histogram HC2) is defined as
Sim C(S1, S2) =
1
|Ω|
∑
(u,v)∈Ω
min(HC1(u),HC2(v))
(1)
where normalization factor |Ω| is the size of set Ω and
min(.) operator corresponds to histogram intersection.
Next, several spatial features are calculated to char-
acterize the distribution state of each color object in each
image frame[21, 22]. Assuming a set of pixels S =
{(x1, y1), · · · , (xn, yn)} belong to color object ci, k is the
image size and m is the total number of 4-connected (non-
isolated) pixels in S. Then, we define
(i) density of distribution
fi1 =
n
k
(ii) compactness of distribution
fi2 =
m
n
(iii) scatter
fi3 =
1
n
√
k
n∑
j=1
√
(xj − xµ)2 + (yj − yµ)2
where xµ = 1n
∑n
i=1 xi and yµ = 1n
∑n
i=1 yi
After the spatial features of all image frames within a
video segment are computed, we take average of these val-
ues respectively. Let fi1, fi2 and fi3 be the average feature
values of color object ci within a video segment, for two
color objects ci and cj , the difference of spatial distribution
within a video segment is defined as
Ds(ci, cj) =
1
3
(|fi1 − fj1|+ |fi2 − fj2|+ |fi3 − fj3|)
The similarity measure for the spatial distribution of
color objects between S1 and S2 is defined as
Sim S(S1, S2) =
1
|Ω|
∑
(u,v)∈Ω
1
1 +Ds(u, v)
(2)
Psychophysical experiments have shown that human
visual system is sensitive to the sharp intensity variation re-
gions of the image such as edges. When lighting condition
changes, the contours of the objects in the image change
little and the edge map remains nearly the same. In our
system, the Canny edge detector is used to extract edges
from an image. The detected edge image is partitioned into
a set of M ×M regions. Next, each region is subdivided
into N ×L blocks. A block is active, if the number of edge
points in this block is greater than a threshold (=30, in our
setting). The ratio of active blocks of a region is defined
as the edge density of the region. Then, we compute the
edge density of each region and its average value over the
whole video segment. Let E1i and E2i be the average edge
density of the ith region for video segment S1 and S2 re-
spectively, the edge similarity between two video segments
is determined by
Sim E(S1, S2) =
1
M2
M2∑
i=1
min(E1i, E2i) (3)
Currently, we set M = 3,N = 5 and L = 7.
4 The Proposed Algorithm
The proposed algorithm consists of two parts. The first part
locates the potential shot change frames in the video se-
quence. The second part distinguishes the flashlight from
the real shot boundary (cut) by the fact that the video con-
tents before and after flashlight are similar. Using the pro-
posed similarity measures for video segments, three clas-
sification features (in terms of color, spatial and edge) are
obtained. Then, a support vector machine is employed to
classify the potential shot change frame into flashlight or
shot boundary.
We scan a video sequence by applying a sliding win-
dow that spans 2m+1 frames. Given a sequence of frames
f1, f2, . . . , fn, a potential shot change frame is detected if
the average intensity difference of two consecutive frames
is larger than a threshold. Currently, the threshold is set to
be 5. Assuming fk is the detected potential shot change
frame, the flashlight detection process is performed as fol-
lows:
135
Table 2. Performance comparison for flashlight detection.
Method Recall Precision
Our approach 96.74% 97.8%
Zhang’s approach 93.48% 94.51%
Heng’s approach 88.04% 91.01%
[2] B.T. Truong and S. Venkatesh. Determining dramatic
intensification via flashing lights in movies. In Pro-
ceedings of International Conference on Multimedia
and Expo, pages 61–64, Tokyo, January 2001.
[3] B.L. Yeo and B. Liu. Rapid scene analysis on com-
pressed videos. IEEE Transactions on Circuits and
Systems for Video Technology, 5(6):533–544, Decem-
ber 1995.
[4] Y. Nakajima, K. Ujihara, and A. Yoneyama. Universal
scene change detection on MPEG-coded data domain.
In Proceedings of SPIE Conference on Visual Com-
munication and Image Processing, pages 992–1003,
1997.
[5] D. Zhang, W. Qi, and H.J. Zhang. A new shot bound-
ary detection algorithm. In Proceedings of IEEE Pa-
cific Rim Conference on Multimedia, pages 63–70,
2001.
[6] X. Qian, G. Liu, and R. Su. Effective fades and
flashlight detection based on accumulating histogram
difference. IEEE Transactions on Circuits and Sys-
tems for Video Technology, 16(10):1245–1258, Octo-
ber 2006.
[7] R. Zabih, J. Miller, and K. Mai. A feature-based al-
gorithm for detecting and classifying scene breaks.
In Proceedings of ACM International Conference on
Multimedia, pages 189–200, San Francisco, Novem-
ber 1995.
[8] D. Li and H. Lu. Lighting change problem in shot
detection. In Proceedings of IEEE International Con-
ference on Electronics, Circuits and Systems, pages
541–544. Volume 1, December 2000.
[9] W.J. Heng and K.N. Ngan. High accuracy flashlight
scene determination for shot boundary detection. Sig-
nal Processing: Image Communication , 18(3):203–
219, 2003.
[10] Y. Geng and D. Xu. A solution to illumination vari-
ation problem in shot detection. In Proceedings of
IEEE Region 10 Conference, pages 81–84. Volume 2,
November 2004.
[11] K. Jonsson, J. Kittler, Y.P. Li, and J. Matas. Support
vector machines for face authentication. Image and
Vision Computing , 20(5-6):369–375, April 2002.
[12] G. Guo, S.Z. Li, and K.L. Chan. Support vector ma-
chines for face recognition. Image and Vision Com-
puting, 19(9-10):631–638, August 2001.
[13] M. Pontil and A. Verri. Support vector machines for
3D object recognition. IEEE Transactions on Pat-
tern Analysis and Machine Intelligence, 20(6):637–
646, June 1998.
[14] C. Bahlmann, B. Hassdonk, and H. Burkhardt. On-
line handwriting recognition with support vector ma-
chine – a kernel approach. In Proceedings of Interna-
tional Workshop on Frontiers in Handwriting Recog-
nition, pages 49–54, Ontario, Canada, 2002.
[15] A. Ganapathiraju, J.E. Hamaker, and J. Picone. Appli-
cations of support vector machines to speech recog-
nition. IEEE Transactions on Signal Processing,
52(8):2348–2355, August 2004.
[16] S. Tong and E. Chang. Support vector machine active
learning for image retrieval. In Proceedings of ACM
International Conference on Multimedia , pages 107–
118, 2001.
[17] T. Evgenious, M. Pontil, and T. Poggio. A unified
framework for regularization networks and support
vector machines. A.I. Memo 1654, MIT, Cambridge,
MA, 1999.
[18] V.N. Vapnik. StatisticalLearning Theory . Wiley, New
York, 1998.
[19] X. Wan and C.-C. Jay Kuo. A new approach to im-
age retrieval with hierarchical color clustering. IEEE
Transactions on Circuits and Systems for Video Tech-
nology, 8(5):628–643, September 1998.
[20] M.J. Swain and D.H. Ballard. Color indexing. In-
ternational Journal of Computer Vision , 7(11):11–32,
1991.
[21] L.-H. Chen, K.-H. Chin, and H.-Y. Liao. An inte-
grated approach to video retrieval. In Proceedings
of the 19th Australasian Database Conference , pages
49–55, January 2008.
[22] L.-H. Chen, Y.-C. Lai, and H.-Y. liao. Movie scene
segmentation using background information. Pattern
Recognition, 41(3):1056–1065, March 2008.
[23] C.W. Hsu, C.C. Chang, and C.J. Lin. A practical
guide to support vector classification. Technical re-
port, Department of Computer Science, National Tai-
wan University, Taipei,Taiwan, 2003.
137
無研發成果推廣資料 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：□已發表 ■未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100字為限） 
待完整版論文完成，即送交知名國際期刊審核。 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500字為限） 
本研究計畫的目標為自動偵測電影中的暴力場景片段。我們把研發出來的程式測試於四部
電影，其精確度(F1 Measure)分別為:90%，89%，97%，91%。基本上，我們大致達成目標。
本計畫的研究成果除了可用來防止兒童從網路下載暴力影片外亦可應用於精采預告片的
製作。在現有電影分級制度下，成人是可以觀賞暴力電影的；而暴力情節往往是一部電影
最吸引人注意的地方。參予本計畫的人員則不論在圖形識別理論的應用及影像系統的建立
均能獲得紮實的訓練。 
 
