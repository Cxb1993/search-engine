(test coverage)來表達[1]，亦即測量被執行
的程式片斷，是否完整地覆蓋所有程式的
結構。 
上述兩類測試涵蓋了大部分傳統的
軟體測試方法，其測試目標都在於驗證程
式的行為表現，希望尋找出其中潛在的邏
輯缺陷（logical fault）。因此，用我們的
定義術語，可以將這兩類的測試稱做『行
為測試』，亦即檢驗程式所表現的行為是
否符合預期。 
隨著電腦應用與網際網路快速地發
展，許多日常的活動如今都已轉移到網路
上進行(例如，Google 已在網路上提供大
部分 Microsoft Office 軟體的基本功
能) ，並且大部分的軟體也都提供網路連
線的功能。這使得軟體的執行環境不再像
以前那麼單純，導致軟體在開發過程中，
有更多需要注意的議題。 
     圖 1. 記憶體洩漏範例 
長時間重複執行特定程式的人，往往
會發現某些軟體錯誤或缺失[2]。例如，若
作業系統長時間沒有重新開機，久而久之
會造成系統執行速度變慢或甚至當機的
情形。這是因為該軟體在資源使用與管理
上的效率不健康所導致的現象。而這一類
資源使用不當所產生的系統缺陷，很難透
過傳統的測試方法來發現。因為傳統測試
的主要目的，是驗證程式邏輯的正確性，
也就是根據輸入值，觀看是否會產生期望
外的輸出結果。至於系統資源耗用的議
題，並未列入測試的範圍。這些因為資源
耗用所產生的系統弱點，有時又稱為軟體
老化(Software aging)[3]，其中以記體洩漏
的情況最常發生。 
以圖 1 為例，可以看出每當程式執行到
A 函式時，就會產生 8ints 空間大小的記憶
體洩漏情形，這主要是因為主函式中所宣告
的記憶體空間其指標經過修改，導致所配置
的記憶體區塊無法回收。此種情況若持續發
生，會使得系統效能降低甚至產生預期之外
的結果(例如:記憶體不足)。 
此種因為系統資源使用不當的現象，初
期並沒有明顯的特徵，只有經過長時間執行
後才會產生嚴重的影響。 
三、結果與討論 
問題定義 
在記憶體等電腦資源越來越充足的今
日，上述原本是微不足道的問題。然而這
樣的弱點卻成為駭客眼中攻擊系統最佳的
標的。因為他可藉由資源不正常地消耗，
導致系統效能降低、甚至產生當機的現
象，以癱瘓或侵入一個系統，使得原本的
弱點成為軟體安全上的漏洞。 
傳統的軟體測試方法，並無法偵測上述
這樣的情況。而利用網路安全的方法，雖能
阻擋惡意攻擊的網路封包，但也只能治標不
能治本，在網路安全防不勝防的今日，效果
依然有限。因此本研究從軟體測試的角度出
發，希望發展出新的方法，來找出程式本身
會因為資源使用不當而可能遭受到攻擊的
弱點。 
以軟體測試解決此一問題，不外乎靜態
分析[4、5、6]與動態測試兩種。靜態分析
雖然可經由比對找出程式碼中可能有問題
的敘述，但分析結果的誤判率高且無法涵蓋
int *ptr; 
  void A() { 
    ptr = (int*) 
malloc(16*sizeof(int));  
    //memory leak of 8 ints 
    // use ptr 
    free(ptr); // A() is done with ptr 
  } 
void main() { 
    ptr = (int*) malloc(8*sizeof(int));
    A(); 
} 
者執行次數(或時間)終了。 
為了達到高效率的測試，基因演算法的
演化依據與效率就變得很重要。本研究設計
了一個目標函數，它會根據記憶體的耗用與
變化趨勢，計算其評估函數值。當記憶體的
耗用越大，變化趨勢越明顯，則所得到的評
估函數值越大。底下列出本研究目標函式公
式定義： 
( ) trendreswgF +⋅= ，其中 
z res 代表資源的變化量 
z trend 代表資源需求不健康的
趨勢，越密集則加成分數越高 
z w 是正實數，用來代表權重或
調整比例使用 
我們將上述的方法，運用在兩支網路上
真實運作且有資源使用上問題之程式(亦
即，有記憶體洩漏的問題)，為了觀察本方
法的有效性以及其效能，測試的終止條件是
持續測試直到程式當掉或出現錯誤為止。底
下表 1 為本方法和大量測試的比較結果。 
表 1. 實驗結果比較表 
 由表 1 中可看出，本方法的確可以偵測
到問題程式的軟體弱點，並且在效率上明顯
優於目前所採用的方法，因此本計畫所設計
的自動化資源測試方法是有效的，且在執行
的效率上較高。 
四、計畫成果自評 
隨著網路應用的程式日趨增多，傳統的
測試方法已無法應付今日所面對的情況，尤
其是對於程式在資源使用上的不健康所導
致常被駭客用來攻擊的弱點。面對此一情
勢，本計劃首先提出了資源測試的概念，接
著並設計一套自動化的測試方法。最後，我
們以兩支真實的網路應用程式來驗證我們
的方法，並證實其為有效的。 
本方法的核心精神，是利用對程式碼的
插樁來監控記憶體使用的變化，再透過基因
演算法產生相對應的測試資料，一面縮小需
要測試的範圍，一面透過更好的測試資料提
高測試的效率。總結來說，本研究提出了一
個可行且有效的方法，測試人員可透過本方
法，以自動測試的方式找出具有缺失的程
式，事先預防並加以修改，以避免因為資源
使用上的弱點導致系統受到攻擊的可能性。 
雖然本研究所提出之自動化資源測試
方法實際可行，並可測試出軟體問題的發
生。但這只是初步的成果，未來可針對本研
究所提出的方法，從幾方面做更進一步的改
進： 
1. 建立可一次偵測多個潛在弱點的系
統，減少逐次測試找出問題的成本。 
2. 雖然許多研究證明基因演算法對於產
生軟體測試測試案例十分有用。但是否
有其他更適合用來自動產生測試資料
的方法也值得探討，例如模擬退火法
(Simulated Annealing)等演化式計算方
法，可對資料及既有的資源資訊進行分
析及微調，以建立一個有學習能力的智
慧系統，並進行自我即時調適，以自動
產生合適且有效率的測試案例。 
3. 除此之外，本方法之概念也可改變用
途，應用在網路監控上，在網路軟體實
際執行期間，利用抽樣的方式監控其程
式之資源使用情況，並對異常者進一步
送出測試資料觀察其反應，倘若問題進
程式 本方法原始版 
本方法之改良
版 
大量測試
 
 
演化代數 執行次數 執行次數 執行次數
 
平均 
(標準差) 
平均 
(標準差)
平均 
(標準差) 
平均 
(標準差)
案例
一 
6673.8 
(300.4) 
43904.8
(2022.2)
28855.4 
(219.5) 
367634 
(39443.1)
案例
二 
5937 
(232.3) 
39154.1
(1427.0)
27517.4 
(6249.2) 
179634 
(23032.5)
