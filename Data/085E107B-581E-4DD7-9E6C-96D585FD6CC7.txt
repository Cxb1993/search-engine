 2
Usability assessment of model driven architecture from the 
perceptions of developers 
 
Abstract  
Model Driven Architecture (MDA) is a potential solution to overcoming the lack of 
efficiency and effectiveness with which software is developed. Proponents of 
model-engineering typically argue that the model transformation process can almost 
be completely automated using a catalog of transformation rules converting one 
model to another, and finally to code. However, the literature presents conflicting 
results regarding its usability, intended as its capability of enhancing efficiency and 
effectiveness in developing software, and developers’ satisfaction in using MDA 
techniques. Furthermore, few studies have examined these problems from the 
perceptions of developers. This study assesses the usability of MDA from the 
perceptions of developers, by examining the differences among MDA phases in terms 
of usability, and offering directions for future research. The results of this study show 
that modeling phase techniques are maturing, and that Unified Modeling Language 
has become a true industrial standard. However, it is unclear how Object Constraint 
Language (OCL) expressions can be translated into detailed models and then into 
code. Although transformation phase techniques are still being explored, the 
Query/View/Transformation has taken an important step in the right direction. 
Existing research on the round-trip phase is superficial, and requires further 
exploration. The current study on MDA leaves the central problem untouched. 
Therefore, the problem of OCL code-generation must be undertaken, and a simple, 
concise transformation language must be developed. 
 
Keywords: Usability evaluation, Model driven architecture, Model transformation, 
Unified modeling language 
 
 
 
 4
into other models such as schemas, code skeletons, and deployment scripts for various 
technological platforms. From the perspective of MDA, software development is 
essentially a model construction and transformation process [4]. Developers generate 
code from documentation to solve the problems mentioned above. During the 
development of systems, developers are able fine-tune the transformation rules to 
their specific needs, and ultimately achieve round-trip engineering. 
The primary goal of the research reported in this paper was to assess the usability 
of MDA from the perceptions of developers, and offer directions for future research. 
Two major aspects of this research were addressed. We first questioned how 
developers perceive the efficiency and effectiveness of MDA technologies in 
developing software, and their satisfaction with it. The second research question 
assessed recent advances in the development of MDA, by determining the differences 
in usability among all phases of MDA, and analyzing the discrepancies. We propose 
that developers perceive the efficiency and effectiveness of MDA technologies 
differently, and that these vary among the phases of the process. We conducted a 
longitudinal empirical experiment to test our propositions, and an internet bookshop 
system was implemented to work through each phase of MDA, to evaluate its 
usability in real-world applications. 
In the following section, we review MDA and the conflicting results regarding its 
usability. In Section 3, we describe the experimental methodology used to test the 
research questions. In Section 4, we analyze the result, and in Section 5 we discuss the 
findings of our study and implications. Finally, in Section 6 we present the conclusion 
and future works. 
2. Model Driven Architecture 
The OMG (Object Management Group) presented Model Driven Architecture 
(MDA) as the base architecture for software development in 2003, in an attempt to 
increase the productivity of software development and reduce the cost and time to 
market. The concept behind MDA is that software development drivers are the 
formulation of models rather than the manual writing of source code. This approach 
could alleviate problems in productivity, portability, interoperability, maintenance, and 
documentation [1]. In such a scenario, source code would be generated from models 
 6
computational point of view. PIMs convert a "what" view of the world into a "how" 
view of the world, but does not show the details regarding its use of the platform. 
The PSM combines PIM specifications with details specifying how a system uses a 
particular type of platform. Therefore, a PIM can be transformed into one or more 
PSMs, which describe the system with full knowledge of the final implementation. A 
PSM is tailored to specify a system in terms of the constructs used in the 
implementation that are available in one specific technology. For example, an EJB 
PSM is a model of a system in the EJB structural dialect. An EJB PSM typically 
contains EJB-specific terms, such as “home interface,” “entity bean,” “session bean,” 
and so on. An Oracle DB PSM is based on the Oracle SQL dialect, using terms, such 
as “table,” “column,” “foreign key,” and so on. Clearly, a PSM will only make sense 
to developers who are familiar with a specific platform. 
2.1. Conflicting results regarding the usability of MDA  
Previous research has shown divergence of opinion on technologies of MDA. We 
summarize the main points regarding the conflicts in the three phases of MDA: 
modeling, transformation, and round-trip. 
Modeling is the first and most important phase in MDA, because this is where the 
final source code comes from. However, previous research has pointed out a number 
of modeling problems in this phase. For example, UML is based on the theory that 
pictures are better than text [7], and although this is true in many cases, there is no 
evidence to support this in general [8]. Visual languages are inherently domain 
specific, helping developers with domain knowledge quickly assemble programs from 
existing components and well-defined operations. Developers are able to leverage 
these benefits when there is a close match between the visual abstraction and the 
modeled system. Beyond domain level abstraction however, UML can quickly create 
large, complex visual diagrams that are impossible to comprehend or debug [9]. UML 
is useful for many IT applications or telecom-style systems; however, it provides little 
leverage for biologists, process control engineers, hedge fund analysts, or other 
domain specialists, whose primary interest is in the direct modeling of application 
domains rather than learning the jargon of IT specialists [10]. Visual modeling 
techniques cannot be used to express logic rules, and describing behavioral logic in 
sequence diagrams or activity diagrams is not as good as writing code in a modern 
 8
cohesion required to convert UML into a complete solution necessary for MDA to 
work is much more difficult than the current form. Ambler [12] questioned the notion 
that developers could cobble together a toolset via the XMI standard, while software 
venders may not support that standard. Even though venders may claim to support 
XMI, previous experience with CORBA (Common Object Request Broker 
Architecture) interoperability has shown that venders tend to develop their own 
versions for reasons of competitiveness. 
The transformation and round-trip phase address the very heart of the MDA 
issue, and many researchers have examined methodology behind the transformation of 
MDA. However, there has been little agreement on the results, because many of the 
investigations have been conducted on paper, without clear examples or experience of 
what a platform using MDA would be like in reality [8]. The most common objection 
to MDA is that UML lacks sufficient precision to enable complete code generation 
and a reasonable semantic account [14]. A number of the constructs in UML 2.0 lack 
the operational semantics required to provide meaning to computer programs in a 
mathematically rigorous manner. Therefore, it is difficult to interpret and correctly 
implement UML model transformation tools [15]. For example, use case diagrams 
lack sufficient semantics to support model refinement. Supporting and evolving 
semantically correct PSMs for platforms such as J2EE or .NET are not trivial issues. 
The dearth of semantics in UML complicates the correct usage of UML extensions, 
thereby reducing their expressive power, and limiting the ability of tool vendors to 
provide reliable, consistent modeling technologies [15]. This lack of semantics makes 
it difficult to produce automated MDA tools because semantics provide the meaning 
essential for automation. 
Executable UML graphically specifies a system using a UML profile allowing 
developers to define the behavior of a single subject in sufficient detail to be executed. 
A model compiler executing mapping functions is able to produce PSMs and even 
source code from PIMs constructed using executable UML. This eliminates the 
labor-intensive task of transforming a PIM into a PSM. However, this type of 
executable UML can only be used in a limited number of situations. If a specification 
were truly executable, it would actually be “the thing.” Otherwise, it is merely a 
model of “the thing” [12]. Despite decades of experience developing executable 
models and associated tools, software engineering still finds this task a challenge. 
 10
library necessarily leads to compromises in performance and platform integration [13]. 
Such compromises have been the primary downfall of many products in the past, and 
due to those failures, the industry is now quite skeptical about the claims regarding 
MDA [2]. 
To help with model transformations, OMG issued the Query/View/Transformation 
(QVT) language to accomplish automatic transformations between models [19]. 
However, this specification has not been officially finalized, and remains somewhat 
unstable. A number of unpolished details still require revision [20]. QVT must either 
demonstrate its full potential by becoming a true industrial standard, or be relegated to 
becoming a referential notation [21]. Developers are clearly split in their opinions 
about Model-Driven Architecture. This divergence of opinion is a strong motivation 
for this paper to evaluate the usability of MDA. 
3. Research methodology 
This study conducted a longitudinal empirical experiment to test the usability of 
MDA, identify bottlenecks, and clarify the direction of research based on the 
procedures in Fig. 2. A literature review was first performed within the domain of 
MDA to develop constructs and measurements. Prior to testing, participant training 
was conducted to ensure that participants had adequate knowledge for the testing 
phase. In the test participants were required to use real-world applications and work 
through each phase of MDA (modeling, transformation, and round-trip), to evaluate 
its usability. The participants used Borland Together, a CASE tool that allows 
developers to draw UML diagrams, transform models, tune models, and maintain 
consistency. As shown in Fig. 2, participants were provided the CIM of a real case in 
the form of a use case diagram, use case narrative and activity diagram. Participants 
then created the PIM using the CASE tool, using class diagrams to express the 
structure, sequence and state diagrams for the behavior, and OCL for the business 
logic constraints. Next, the participants manually developed mappings, manually 
marked the parts of the PIM they wanted to be transformed, and developed the QVT 
program to implement the transformation using the CASE tool. Finally, they 
performed a round-trip to ensure consistency between the PIM and the PSM using the 
CASE tool. If the PSM or PIM was changed, the corresponding PIM and PSM had to 
be revised. These models were verified by two professionals to ensure soundness. The 
 12
represents the capability of a system to enhance the job performance of an individual  
[27]. Relative Advantage represents the degree to which using an innovation is 
perceived as being better than using its predecessor [28]. Outcome Expectations is a 
judgment regarding the likely consequences generated by the behavior [29][30]. 
Perceived Net Benefits is an idealized comprehensive measure of the sum of all past 
and expected future benefits, minus all past and expected future costs, accruing from 
the use of an information technology. In this construct, any use of resources, including 
time spent in building, learning to use, and/or using the system, is a cost [31]. System 
Satisfaction represents the degree of favorableness with the system and the mechanics 
of interaction felt by users [32]. Performance Expectancy represents the degree to 
which an individual believes that using the system will help him/her to improve job 
performance [33]. Perceived Ease of Use represents the degree to which a person 
believes that using a system will be effortless [23][28]. Complexity represents the 
degree to which a system is perceived as relatively difficult to understand and use 
[27]. 
This study indicates that examinations of these measures fall into three major 
categories: perceived effectiveness, perceived efficiency, and satisfaction. These three 
groups play a significant role as direct determinants regarding the usability of MDA. 
ISO 9241–11 defines usability as the extent to which a product can be used by 
specified users to achieve specified goals effectively, efficiently, and the satisfaction 
felt in a specified context of use [34]. ISO 9241–11 explains how to identify 
information that must be considered when evaluating usability in terms of user 
performance and satisfaction. To examine doubts about MDA, this study addresses the 
issue of usability from the perspective of system developers. Perceived Effectiveness 
is the degree to which the intended goals of using MDA are achieved. Perceived 
Efficiency is the degree to which resources such as time, money, and mental effort 
must be expended to use MDA. Satisfaction represents the degree of favorableness 
felt for MDA. The higher the overall satisfaction with MDA, the more likely one will 
find MDA useful in enhancing system development. 
After determining the measurement criteria, this study presents the development of 
instruments. Several researchers have developed instruments to measure perceived 
effectiveness, perceived efficiency, and satisfaction. A questionnaire was designed to 
assess the usability of accompanying techniques for each phase of MDA. The items ( 
 14
confirmation”, whereupon it was batch sent to the customer. The two flows then 
reached a connection, ending in the final activity node. This activity diagram 
contained an interruption region, describing the procedural logic and workflow of the 
alternate course step 1 in the narrative of the purchase book use-case. This region 
included the "Specify Quantity and Add Books to Cart" and "Confirm the Cart." A 
lightning-bolt style edge expressed an interruption. When an interruption was sent to 
the receive signal node “Order Cancel Request,” the two actions within the region 
would be terminated and the action “Cancel the Cart” would be executed. 
 
 
 
 
 
 
Appendix A. Items used in estimating usability of MDA 
Items 
Perceived Effectiveness 
1. In modeling phase, using class diagram in MDA-based 
system development increases my productivity. 
2. In modeling phase, the objectives of MDA can be easily 
accomplished using class diagram in MDA-based system 
development. 
3. In modeling phase, class diagram serves the purposes of 
MDA. 
Perceived Efficiency 
1. In modeling phase, using class diagram in MDA-based 
system development enable me to accomplish tasks more 
quickly. 
2. In modeling phase, using class diagram improves my job 
performance of MDA-based system development. 
3. In modeling phase, it is easy to become efficient at using 
class diagram for MDA-based system development. 
Satisfaction 
1. How adequately do you feel class diagram meet your 
needs of MDA-based system development? 
2. How efficient do you feel class diagram is? 
3. How effective do you feel class diagram is? 
4. Overall, are you satisfied with class diagram? 
Note: Similar items were used for each technique of all phases of 
MDA: modeling, model transformation and round trip. 
 16
References 
[1] A. Kleppe, J. Warmer, W. Bast, MDA Explained: The Model Driven Architecture 
Practice and Promise, Addison-Wesley, Boston, MA, 2003. 
[2] D.S. Frankel, Model Driven Architecture: Applying MDA to Enterprise 
Computing, Wiley Press, Hoboken, NJ, USA, 2003. 
[3] C. Cares, X. Franch, A. Perini, A. Susi, Towards interoperability of i* models 
using iStarML, Computer Standards & Interfaces 33(1) (2011) 69-79. 
[4] G. Caplat, J.L. Sourrouille, Model mapping using formalism extensions, IEEE 
software 22 (2) (2005) 44–51. 
[5] Model Driven Architecture Guide, v1.0.1, Object Management Group – OMG, 
http://www.omg.org/cgi-bin/doc?omg/03–06–01.pdf (accessed Aug 2011) 
(2003). 
[6] H. Kilov, I. Sack, Mechanisms for communication between business and IT 
experts, Computer Standards & Interfaces 31(1) (2009) 98-109. 
[7] T.J. Larsen, F. Niederman, M. Limayem, J. Chan, The Role of Modeling in 
Achieving Information Systems Success: UML to the Rescue? Information 
Systems Journal 19 (1) (2009) 83–117. 
[8] M. Fowler, Model Driven Architecture, 
http://martinfowler.com/bliki/ModelDriven Architecture.html (accessed Aug 
2011) (2004). 
[9] D. Thomas, UML—Unified or Universal Modeling Language? Journal of Object 
Technology 2 (1) (2003) 7–12. 
[10] D.A. Thomas, MDA: Revenge of the Modelers or UML Utopia? IEEE Software 
21 (3) (2004) 15–17. 
[11] V. García-Díaz, H. Fernández-Fernández, E. Palacios-González, B.C.P. 
G-Bustelo, O. Sanjuán-Martínez, J.M.C. Lovelle, TALISMAN MDE: Mixing 
MDE principles, Journal of Systems and Software 83 (7) (2010) 1179–1191. 
[12] S.W. Ambler, Agile Model Driven Development Is Good Enough, IEEE 
Software 20 (5) (2003) 71–73. 
[13] S. Cook, Domain-specific modeling and model driven architecture, in: D.S. 
Frankel, J. Parodi, (Eds.), The MDA Journal: Model Driven Architecture Straight 
from the Masters, Meghan-Kiffer Press, Tampa, Florida, USA, 2004, pp. 36–55. 
[14] T.O. Meservy, K.D. Fenstermacher, Transforming Software Development: An 
MDA Road Map, IEEE Computer 38 (9) (2005) 52–58. 
[15] B. Hailpern, P. Tarr, Model-driven development: The good, the bad, and the ugly, 
IBM Systems Journal 45 (3) (2006) 451– 461. 
[16] F. Brooks, The Mythical Man-Month, Anniversary Edition, Addison-Wesley, 
Boston, MA, USA, 1995. 
[17] S. Cook, S. Kent, The Domain-Specific IDE, The European journal for the 
informatics professional 9 (2) (2008) 17–21. 
[18] B. Dobing, J. Parsons, How UML is Used, Communications of the ACM 49 (5) 
(2006) 109–113. 
[19] E. Soler, J. Trujillo, E. Fernández-Medina, M. Piattini, Building a secure star 
schema in data warehouses by an extension of the relational package from CWM, 
 18
[36] J. Ballantine, M. Bonner, M. Levy, A. Martin, I. Munro, P.L. Powell, The 3-D 
model of information systems success: The search for the dependent variable 
continues, Information Resources Management Journal 9 (4) (1996) 5–14. 
[37] B.L. Myers, L.A. Kappelman, V.R. Prybutok, A comprehensive model for 
assessing the quality and productivity of the information systems function: 
Toward a theory for information systems assessment, Information Resources 
Management Journal 10 (1) (1997) 6–25. 
[38] K. Siau, Methodologies for Business Process Reengineering: The Case of DFD 
versus OO, Proceedings of the 1997 Information Resources Management 
Association International Conference, Vancouver, B.C., Canada, 1997, pp. 
407–411. 
[39] A. Rai, S.S. Lang, R.B. Welker, Assessing the Validity of IS Success Models: An 
Empirical Test and Theoretical Analysis, Information Systems Research 13 (1) 
(2002) 50–69. 
[40] B. Selic, Personal reflections on automation, programming culture, and 
model-based software engineering, Automated Software Engineering 15 (3-4) 
(2008) 379–391. 
[41] Object Constraint Language Specification, v2.2, Object Management Group – 
OMG, http://www.omg.org/spec/OCL/2.2/PDF/ (accessed Aug 2011) (2010). 
[42] R.M. Colomb, A. Gerber, M. Lawley, Issues in Mapping Metamodels in the 
Ontology Development Metamodel Using QVT, The 1st International Workshop 
on the Model-Driven Semantic Web (MDSW 2004), Monterey, California, USA, 
Sept. 20-24, 2004. 
[43] Query/View/Transformation Specification, v1.0, Object Management Group – 
OMG, http://www.omg.org/spec/QVT/1.0/PDF/ (accessed Aug 2011) (2008). 
[44] A. Armonas, L. Nemuraite, Using Attributes and Merging Algorithms for 
Transforming OCL Expressions to Code, Information Technology and Control 38 
(4) (2009) 283–293. 
[45] K. Siau, P. Loo, Identifying the Learning Difficulties with Unified Modeling 
Language (UML), Information Systems Management 23(3) (2006) 43-51. 
[46] Unified Modeling Language Specification, v1.1, Object Management Group – 
OMG, http://www.uml-forum.com/specs.htm (accessed Aug 2011) (1997). 
[47] T.M. Shaft, L.J. Albert, J. Jasperson, Managing change in an information systems 
development organization: understanding developer transitions from a structured 
to an object-oriented development environment, Information Systems Journal 18 
(3) (2008) 275–297. 
[48] T. Gardner, C. Griffin, J. Koehler, R. Hauser, A review of OMG MOF 2.0 
Query/Views/Transformations Submissions and Recommendations towards the 
final Standard, The 1st MetaModelling for MDA Workshop, York, UK, 
November 24-25, 2003. 
This preliminary program information is provided as a courtesy and is subject to
change.
Workshops (Learn more.)
7:00 AM-5:00 PM Registration
9:00 AM – 5:30 PM
Workshop 1: (all day) Socio-technical Research: Conecting Disciplines in the
iSchools; Andrea Forté, Sean Goggins, Steve Sawyer, Dana Rotman, Michael
Twidale, Christo Sims, Kalpana Shankar, Brian S. Butler, Katie Panciera,
Helena Mentis
Workshop 2: (all day) Storytelling, Narratives and Metaphors in the Design
and Use of ICTs: Creating an interdisciplinary community of scholarship;
Brian M. Landry, Phillip J. Ayoub, Michael Twidale
9:00 AM – 12:30 PM
Workshop 3: Cultivating Creative Information Practices; Theresa Anderson,
David Levy
Workshop 5: ICTD Un-Workshop: Charting iSchool Research in Information
and Communication Technologies and Development; Chris Coward
Workshop 6: Participatory media for Education; Erin Knight, Nathan Gandomi
Workshop 7: Protecting Adolescent Online Safety; Heng Xu, John Carroll
12:30 PM – 2:00 PM: Lunch on your own
2:00 PM – 5:30 PM
Workshop 8: Designing our Future Past: Lifetime Issues for Information
Technology; Ian King
Workshop 9: Information, Values, and the Justice System: Transformation
and Challenges; Donald J. Horowitz, Mike Katell, Brian Rowe, James A.
Bamberger
Workshop 10: Scholarly Communication and Informetrics; Judit Bar-Ilan,
Dietmar Wolfram
Workshop 11: Theory Construction: Finding Your Contribution; Martha
Garcia-Murillo
5:30 PM – 9:00 PM: Dinner on your own + possible participatory activity TBD
9:00 PM – 11:30 PM: Opening Reception / Seattle Public Library Norcliff Room
7:00 AM – 5:00 PM: Registration
8:45 AM 10:30 AM: Native American Blessing / Welcoming followed by Keynote
iConference 2011 Program http://www.ischools.org/iConference11/program/
1Я10 2011/1/20 Ղ֑ 07:57
in User-Generated Media, Eric Cook , Stephanie Teasley
Session 6: Information in Context
Information Source and its Relationship with the Context of Information
Seeking Behavior, Naresh Kumar Agarwal
Materiality and oral documents, Deborah Turner, Warren Allen
Rethinking Unsaid Information: Jokes and Ideology, Ronald Day, Lai Ma
12:30 PM – 2:00 PM: Lunch on your own
2:00 PM – 3:30 PM
Session 7: Alternative Event
The Informational State: Paradigm or Paradox? – Panel (Paul Duguid, Megan
Finn, Ashwin Jacob Mathew, Janaki Srinivasan)
Visit our Alternative Events page for more information on this session.
Session 8: Alternative Event
The Sociotechnical Learning Object Slam Happening – Innovative Format
(Michael Khoo, Michael Twidale, Andrea Wiggins, Jennifer Rode)
Visit our Alternative Events page for more information on this session.
Session 9: Alternative Event
Assessing the Practical Impact of Healthcare Research – Panel (Aleksandra
Sarcevic, Sharoda Paul, Brian Hilligoss, Peter Scupelli)
Visit our Alternative Events page for more information on this session.
Session 10: Social Inclusion
Dusting for science: motivation and participation of digital citizen science
volunteers, Oded Nov, Ofer Arazy, David Anderson
Technology as Amplifier in International Development, Kentaro Toyama
Things Fall Apart: Maintenance, Repair, and Technology for Education
Initiatives in Rural Namibia, Alex Pompe, Steven Jackson
Session 11: Design
Are Separate Interfaces Inherently Unequal? An Evaluation with Blind Users
of the Usability of Two Interfaces for a Social Networking Platform, Brian
Wentz, Jonathan Lazar
From Human Factors to Human Actors to Human Crafters, Monica Maceli,
Michael Atwood
Discussion, Design, and Dissent in Open Bug Reports, Andrew Ko, Parmit
Chilana
Session 12: Social Media
Expressing Well-being Online: towards Self-Reflection and Social Awareness,
iConference 2011 Program http://www.ischools.org/iConference11/program/
3Я10 2011/1/20 Ղ֑ 07:57
g ,
Blumenstock
Session 19: iSchools
Scientific Research in iSchools: Status and Implications, Dan Wu, Daqing He,
Jiepu Jiang, Wuyi Dong, Kim Thien Vo
iSchool Agenda: Mobile Context Research and Teaching, Sherry Koshman
LIS Chairs’ Attitude Toward iSchool Movement in China: A Contemporary
Grounded Theory Analysis, Chuanfu Chen, Ping Wang, Yaqi Liu, Dan Wu, Gang
Wu, Haoqin Ma
5:30PM-7:00 PM: Poster Session (Learn more); Dinner on your own
TBD: TASCHA Reception: by invitation
8:00 AM: Registration Opens
9:00 AM – 10:30 AM: Keynote Address by Susan Dumais
10:30 AM – 11:00 AM: Morning Break
11:00 AM - 12:30 PM
Session 20: Alternative Event
Information Organization meets Information Retrieval: Rethinking the
iSchool core – panel (Christine Borgman, Matthew Mayernik, Ronald Larsen,
Robert Glushko, Jess Hemerly)
Visit our Alternative Events page for more information on this session.
Session 21: Alternative Event
Games in the iSchools – Roundtable (Ian MacInnes)
Visit our Alternative Events page for more information on this session.
Session 22: Alternative Event
Scratch on the Surface and Beyond: a Creative Programming Language for All
Ages – Demos and Participation (Eliza Dresang, Kyungwon Koh, Katie
Campana, Melissa Johnston, Michale Lee, John Marino, Beth Patin)
Visit our Alternative Events page for more information on this session.
Session 23: Health Information
Researching Emotion: Challenges and Solutions, Irene Lopatovska
Making Web-based Multimedia Health Tutorials Senior-friendly: Design and
Training Guidelines, Bo Xie, Ivan Watkins, Man Huang
Who is referring teens to health information on the Web? Hyperlinks between
blogs and health web sites for teens. Leanne Bowler, Daqing He, Wan Yin
Hong
Session 24: Design
iConference 2011 Program http://www.ischools.org/iConference11/program/
5Я10 2011/1/20 Ղ֑ 07:57
p , g , Q g ,
The Internet is Here’: Emergent Coordination and Innovation of Protest
Forms in Digital Culture, Patrick Underwood, Howard Welser
Session 31: Information Management
Spaces to Control Creative Output of the Knowledge Worker: A Managerial
Paradox? April Spivack, Beth Rubin
Collaborative Learning of Ethical Decision-Making via Simulated Cases,
Kenneth Fleischmann, Russell Robbins, William Wallace
“Cool” or “Monster”? Company Takeovers and Their Effect on Open Source
Community Participation, Aditya Johri, Oded Nov, Raktim Mitra
3:30 PM – 4:00 PM Afternoon Break
4:00 PM – 5:30 PM
Session 32: Alternative Event
When Matter matters – Aproaches for Studying Materiality in Context –
Fishbowl (Arvind Karunakaran, Mohammad Hossein Jarrahi, Phillip Ayoub and
Carsten Østerlund)
Visit our Alternative Events page for more information on this session.
Session 33: Alternative Event
Assessment of Doctoral programs: Are we watching in HD? – Wildcard (Linda
Schamber)
Visit our Alternative Events page for more information on this session.
Session 34: Social Media
Do you believe in love at first sight: Effects of media richness via modalities
on viewers’ overall impressions of online dating profiles, Seoyeon Lee, Yuan
Sun, Elizabeth Thiry
Coordinating the Ordinary: Social Information Uses of Facebook by Adults,
Donghee Yvette Wohn, Cliff Lampe, Jessica Vitak, Nicole Ellison
Blogs: Spinning a Web of Virality, Karine Nahon, Jeff Hemsley, Shawn
Walker, Muzammil Hussain
Session 35: Health Information
Information Grounds and Micro Information Seeking: Unpacking the
Complexities of Community Education and Recruitment in Breast Screening
Service Delivery, Jo-Anne Kelder, Christopher Lueg
Barriers to the Adoption and Use of Personal Health Record Systems, Leslie
Liu, Patrick Shih, Gillian Hayes
This is the Real Me: A Community Informatics Researcher Joins the Barrio
Arts, Culture, and Communication Academy in a Health Literacy Campaign,
Chaebong Nam, Ann Peterson Bishop
Session 36: eGovernment
iConference 2011 Program http://www.ischools.org/iConference11/program/
7Я10 2011/1/20 Ղ֑ 07:57
Governance of Labor in Digital Video Networks, Adam Fish
The CyberNavigators of Chicago Public Library and the ‘informatics
moment’: The information revolution in civil society and people’s everyday
lives, Kate Williams
Session 42: Design
XooML: XML in Support of Many Tools Working on a Single Organization of
Personal Information, William Jones
Managing Music Across Multiple Devices and Computers, Justin Brinegar,
Robert Capra
Personalized Location-Based Services, Yiming Liu, Erik Wilde
Session 43: iSchools
Data Mining Technology Across Academic Disciplines, Lesley Farmer
The Influence of Self-Efficacy, Gender Stereotypes and the Importance of IT
Skills on College Students’ Intentions to Pursue IT Careers, Lynette Kvasny,
KD Joshi, Eileen Trauth
Social Media Futures: Why iSchools Should Care, Michael John Scialdone,
Jaime Snyder, Anthony Rotolo
10:30 AM – 11:00 AM Morning Break
11:00 AM – 12:30 PM
Session 44: Visualization
Visualizing Global Cyberscapes, Matthew Zook
A vision for Information Visualization in Information Science, Marilyn
Ostergren, Jeff J. Hemsley, Miranda Belarde-Lewis, Shawn Walker
Visualization, Causation, and History, Robert Allen
Session 45: Knowledge Organization
Notes toward a Politics of Personalization, Michael Murphy
An Emergent Culture Model for Discerning Tag Semantics in Folksonomies,
David Saab
Post-based Collaborative Filtering for Personalized Tag Recommendation,
Caimei Lu, Xiaohua (Tony) Hu, Jung-ran Park, Jia Huang
Session 46: Security
Informing Security Indicator Design in Web Browsers, Pan Shi, Heng Xu,
Xiaolong (Luke) Zhang
Deep packet inspection and Internet governance: Melding STS, Internet
studies and political science, Milton Mueller
Data Breaches and Identity Theft: When is Mandatory Disclosure Optimal?
Sasha Romanosky
Session 47: Design
Exploring Technology through the Designers’ Lens: A Case Study of an
iConference 2011 Program http://www.ischools.org/iConference11/program/
9Я10 2011/1/20 Ղ֑ 07:57
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/01
國科會補助計畫
計畫名稱: 軟體開發者觀點的模式驅動工程之可用性評估(I)
計畫主持人: 辛信興
計畫編號: 99-2221-E-143-003- 學門領域: 資訊系統
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
