 2
使用系統設計與電路合成建構低尖峰電流的系統單晶片之自動化研究(I) 
 “Research in Design Automation for Constructing SOC Chips with Low Peak Currents by System 
Design and Circuit Synthesis (I)” 
計畫編號：NSC 96-2221-E-018-023- 
執行期間：96 年 8 月 1 日 至 97 年 7 月 31 日 
主持人：吳宗益 彰化師範大學電子工程學系助理教授 
一、 中、英文摘要及關鍵詞 
在典型的同步數位系統，由於大量的邏輯
閘同時在時脈觸發緣附近切換，所以會導致巨
大的尖峰電流產生。假如在數位系統中可以使
用一個混合正緣觸發與負緣觸發的時脈方案，
而不是只用單一的正（負）緣觸發的時脈方案，
將可以減少一半以下同時切換的邏輯閘。在這
個研究計畫上，我們提出一種給定時脈觸發邊
緣（clock-triggering-edge assignment）的技術，
他可以決定待處理的數位電路系統內各區塊的
每一個時脈的觸發緣型態，這型態是上升觸發
緣或是下降觸發緣。依照實驗數據顯示，我們
所提的技術最多可以降低尖峰電流達 45.3％。 
In a typical synchronous digital system, a 
huge peak current occurs near the time of the 
active clock edge due to the simultaneous 
switching of a large number of logic gates. The 
number of simultaneous switching gates can be cut 
in half at most if the digital system can use a clock 
scheme of mixed positive and negative triggering 
edges rather than one of pure positive (negative) 
triggering edges. In this research project, we 
propose a clock-triggering-edge assignment 
technique that can assign either the rising 
triggering edge or the falling triggering edge to 
each clock of each block of a given system design. 
The goal of the clock-triggering-edge assignment 
is to reduce the peak current of the system design. 
Experimental results show that our technique can 
reduce the peak current up to 45.3%.  
 
Keywords: IR Drop, Peak Current Reduction, 
System Design 
 
二、 簡介  
In the nanometer era, a high performance 
SOC (System on Chip) chip comes up against 
some problems that include high design 
complexity, fast clock frequency, low supply 
voltage, large peak current, signal integrity, etc. 
These problems increase the difficulty of 
developing an SOC chip.  
In an SOC chip, a clock signal that 
simultaneously arrives many blocks of the chip 
causes many blocks to be triggered and to produce 
large peak current. If the number of 
simultaneously charging and the simultaneously 
discharging transistors are too many, power (VDD) 
and ground (VSS) lines will produce the 
phenomena of serious voltage drop (IR drop) and 
ground bounce. Voltage drop and ground bounce 
will influence the speed of circuit switching; even 
will cause logic errors [1][2][3]. So, reducing 
voltage drop and ground bounce is one of the main 
issues for SOC designers at present. Many 
researches have shown that reducing the peak 
current of a design is an efficient method for 
inhibiting the effect of voltage drop and ground 
bounce. 
In a synchronous design, constructing 
different clock-skews for different flip-flop groups 
can spread the switching time of the flip-flop 
groups. Obviously, the peak current of the design 
can be reduced if the switching time of most 
flip-flops can be spread. Therefore clock-skew 
optimization is a feasible technique for peak 
current reduction in a synchronous design [4][5]. 
Besides the clock skew techniques, J.-K. Wu et al. 
[6] proposed long delay flip-flops and used them 
to replace the normal flip-flops for peak current 
reduction.  
Y.-T. Nieh et al. [7] proposed an 
opposite-phase scheme for reducing the peak 
current of clock trees. They divided the clock 
buffers of a clock tree into two sets. One set 
operates at the same phase of the clock source, and 
another set operates at the opposite phase of the 
 4
iS = ∑∑
= =
n
1h
m
1l
lh c,bi
 
If block bh is a digital circuit, we employ 
iMax-like algorithm to construct ibh,cl because 
iMax algorithm [10] is a fast and powerful 
algorithm of estimating the upper bound of the 
current data. iMax-like algorithm uses a 
mathematic method to find the times that a logic 
gate may switch caused by the switching of the 
clock signal of cl , and then the algorithm uses the 
found data to construct the envelop current 
waveform(s) of the gate. Finally, by accumulating 
the data of current waveforms of all logic gates in 
bh, ibh,cl is created. 
Let Peak_I(iS) = Max(v1, v2 ,…, vq), where iS 
= [v1, v2 ,…, vq]. Moreover, let TSPeak_I(iS) = k iff 
Peak_I(iS) = vk. In other words, TSPeak_I(iS) is the 
time slot in which the maximum (peak) current of 
S appears.  
    Given a system Sorig = (B, C, faorig, fc, fr), 
finding a new edge-type-assignment function fanew 
such that Peak_I(iSnew) of the new system Snew = (B, 
C, fanew, fc, fr) is as small as possible is the goal of 
our proposed algorithm. 
B. Algorithms 
B.1. LP-Based Algorithm 
Fig. 2 shows an algorithm (LP-Based 
Algorithm) of clock-triggering-edge assignment. 
The inputs of the algorithm are Sorig = (B, C, faorig, 
fc, fr) and the data of all maximum current vectors. 
The output of the algorithm is Snew = (B, C, fanew, fc, 
fr). The algorithm uses a liner programming (LP) 
technique to estimate the peak current of each 
explored partial solution. The estimated peak 
currents guide the decisions of making 
clock-triggering-edge assignments. 
In the LP-Based Algorithm (Fig. 2), lines 1–6 
initialize the value of each fa
new(bi, cj). Line 4 
copies the value of fa
org(bi, cj) to fa
new(bi, cj) if the 
value is 0. The value of fa
new(bi, cj) is set as 2 (an 
undecided state) if value of fa
org(bi, cj) is not 0. In 
the second outmost loop (lines 7–17), a bi is 
selected for processing. In its inner loop (lines 
8–16), the types of the triggering-edges of bi’s 
input clock signals of all clock domains are 
decided one by one. The cost function used to 
decide the triggering-edge type is 
Estimate_Peak_I_by_LP. Estimate_Peak_I_by 
_LP employs LP technique to estimate the peak 
current of each decision. Pp (Pn) is the estimated 
peak current associated with assigning the positive 
(negative) triggering edge to a bi’s input clock 
signal. If Pp < Pn (line 14), the algorithm assigns 
the positive triggering edge to the bi’s input clock 
signal; otherwise, the algorithm assigns the 
negative triggering edge to the bi’s input clock 
signal. 
Fig. 3 illustrates the solution exploration of 
LP-Based Algorithm. In this figure, the first and 
the second levels of the search tree show how our 
algorithm makes decisions for the triggering edges 
of b1’s clocks. In the first level of the tree, the 
algorithm decides to assign the positive triggering 
edge to the input clock signal of clock-domain c1 
because 86mA < 100mA (i.e. Pp < Pn). Similarly, 
in the second level of the tree, the algorithm 
decides to assign negative triggering edge to the 
input clock signal of clock-domain c2 because 
92mA > 80mA (Pp > Pn). After many times of 
 
Input:     S
orig
 = (B, C, fa
orig
, fc, fr), Peak Current Vector Data I; 
Output:   S
new
 = (B, C, fa
new
, fc, fr); 
1.  For each bi in B 
2.     For each cj in C 
3.        fa
new
(bi, cj) = 2;  /* The value 2 denotes an undecided state */ 
4.        If (fa
org
(bi, cj) = 0) then fa
new
(bi, cj) = 0;   
5.     End For Loop 
6.  End For Loop 
7.  For each bi in B 
8.     For each cj in C 
9.         If (fa
new
(bi, cj) ≠ 0 && fc(bi, cj) = 0) Begin 
10.             Create fa
p 
that is the same as fa
new
 except fa
p
(bi, cj) = 1;  
11.             Pp = Estimate_Peak_I_by_LP(B, C, fa
p
, fc, fr, I); 
12.             Create fa
n 
that is the same as fa
new
 except fa
n
(bi, cj) = −1; 
13.             Pn = Estimate_Peak_I_by_LP(B, C, fa
n
, fc, fr, I); 
14.             If (Pp < Pn) then fa
new
 = fa
p else fa
new
 = fa
n
; 
15.         End 
16.    End For Loop 
17. End For Loop 
Fig. 2. LP-Based Algorithm for clock-triggering-edge assignment.
Start 
Fig. 3. An illustration of solution exploration for LP-based 
Algorithm. 
: Estimate_Peak_I_by_LP(B, C, fanew, fc, fr) 
86 mA 100 mA 
fanew(b1, c1)=1
80 mA 
Legend 
… 
92 mA
: Search Path 
fanew(b1, c1)=−1
fanew(b1, c2)=1 fanew(b1, c2)=−1 
 6
to decide the triggering-edges of all clocks.  But 
ILP technique cannot suit to a complex digital 
system because its time complexity is 
NP-Complete.  
There are nine benchmark circuits used in the 
experiment for evaluating SLPCR. Benchmarks 
CKT1–CKT7 are designed by us. Each of them 
consists of several black boxes. The peak current 
data of these black boxes (blocks) are estimated by 
hands. Benchmark SoC1 consists of an ARM CPU, 
a DSP processor, a PLL, an ADC, a DAC, and 
many memory blocks. The peak current data of 
SoC1’s components (blocks) are constructed by 
referring their data sheets. Benchmark ISCAS6 is 
a gate level circuit that contains six ISCAS 
benchmark circuits. Because benchmark ISCAS6 
is a gate level circuit, its peak current data are 
created by SLPCR using iMax-like algorithm. 
Table I shows the characteristics of these 
benchmark circuits and the experimental results. 
For each benchmark, we perform two tests. In the 
first test, we use LP-Based Algorithm to do 
optimization while in the second one we use ILP 
technique to do optimization. Benchmark SoC1 is 
too complex to use ILP technique.  
In Table I, column 4 shows the peak currents 
of the original designs. The peak currents are 
reported by SLPCR. Columns 7 and 11 show the 
peak current reduction rates. Since benchmark 
circuit ISCAS6 is a gate level netlist, its peak 
current can be reported by Synopsys NanoSim. 
For performing NanoSim simulation, we create 
some randomly input vectors for the primary 
inputs of ISCAS6. In some benchmark circuits, the 
CPU times of LP-Based Algorithm are larger than 
those of ILP technique because SLPCR calls 
GLPK for solving LP problems many times rather 
than one. 
 
五、 結論  
In this project, we propose some algorithms 
and an approach to reduce the peak current of a 
typical synchronous digital system. Using a clock 
scheme of mixed positive and negative triggering 
edges is our approach. The LP-based algorithm 
can effectively decide the triggering-edge of each 
clock signal of a digital system. We also propose 
an ILP model for finding an optimum solution. 
Experimental results show that our technique can 
reduce the peak current up to 45.3%. 
 
六、參考文獻  
[1] A. H. Ajami, K. Banerjee, A. Mehrotra, and M. Pedram, 
“Analysis of IR-drop Scaling with Implications for Deep 
Submicron P/G Network Designs,” International 
Symposium on Quality Electronic Design, pp. 35–40, 2003. 
[2] R. Saleh, S.Z. Hussain, S. Rochel, and D. Overhauser, 
“Clock Skew Verification in the Presence of IR-Drop in the 
Power Distribution Network,” IEEE Trans. on CAD, pp. 
635–644, 2000. 
[3] Y.-M. Jiang and K.-T. Cheng, “Analysis of Performance 
Impact Caused by Power Supply Noise in Deep Submicorn 
Devices,” Design Automation Conference, pp. 760–765, 
1999. 
[4] W.-C.D. Lam, C.-K. Koh, and C.-W.A. Tsao, “Power 
Supply Noise Suppression via Clock Skew Scheduling,” 
International Symposium on Quality Electronic Design, pp. 
355–360, 2002. 
[5] P. Vuillod, L. Benini, A. Bogliolo, and G. De Micheli, 
“Clock-skew Optimization for Peak Current Reduction,” 
International Symposium on Low Power Electronics and 
Design, pp. 265–270, 1996. 
TABLE I 
EXPERIMENTAL RESULTS 
LP-Based Algorithm ILP 
Peak Current (mA) Peak Current (mA) Benchmark #Blocks #Clocks 
Initial 
Peak 
Current 
(mA) Rpt. by SLPCR Rpt. by NanoSim
Reduction
(%) 
CPU 
Time (s) Rpt. by SLPCR Rpt. by NanoSim 
Reduction
(%) 
CPU 
Time (s)
CKT1 4 2 63.0 50.6 – 19.7 0.006 49.9 – 20.8 0.004
CKT2 10 2 160.3 117.1 – 26.9 0.164 117.1 – 26.9 0.287
CKT3 13 2 274.7 163.0 – 40.7 0.329 161.1 – 41.4 0.344
CKT4 15 2 319.9 202.0 – 36.9 0.533 198.1 – 38.1 0.492
CKT5 20 1 203.6 133.7 – 34.3 0.578 132.9 – 34.7 0.507
CKT6 30 1 321.0 189.9 – 40.8 0.740 189.4 – 41.0 0.982
CKT7 10 3 253.2 184.4 – 27.2 0.174 180.4 – 28.8 0.334
SoC1 56 1 1017.9 727.2 – 28.6 3.180 – – – –
ISCAS6 6 1 140.6 77.9 78.1 44.6 0.044 76.9 67.0 45.3 0.005
       
 8
 
可供推廣之研發成果資料表 
□ 可申請專利  ■ 可技術移轉                                     日期：97 年 8 月 26 日 
國科會補助計畫 
計畫名稱：使用系統設計與電路合成建構低尖峰電流的系統單晶片
之自動化研究(I) 
計畫主持人：吳宗益         
計畫編號：NSC 96－2221－E－018－023－          
學門領域：積體電路及系統設計 
技術/創作名稱 低尖峰電流的系統設計自動化軟體 
發明人/創作人 吳宗益 
中文：在典型的同步數位系統，由於大量的邏輯閘同時在時脈觸發
緣附近切換，所以會導致巨大的尖峰電流產生。假如在數位系統中
可以使用一個混合正緣觸發與負緣觸發的時脈方案，而不是只用單
一的正（負）緣觸發的時脈方案，將可以減少一半以下同時切換的
邏輯閘。在這個研究計畫上，我們提出一種給定時脈觸發邊緣
（clock-triggering-edge assignment）的技術，他可以決定待處理的
數位電路系統內各區塊的每一個時脈的觸發緣型態，這型態是上升
觸發緣或是下降觸發緣。依照實驗數據顯示，我們所提的技術最多
可以降低尖峰電流達 45.3％。 
技術說明 英文：In a typical synchronous digital system, a huge peak current 
occurs near the time of the active clock edge due to the simultaneous 
switching of a large number of logic gates. The number of 
simultaneous switching gates can be cut in half at most if the digital
system can use a clock scheme of mixed positive and negative 
triggering edges rather than one of pure positive (negative) triggering
edges. In this research project, we propose a clock-triggering-edge 
assignment technique that can assign either the rising triggering edge 
or the falling triggering edge to each clock of each block of a given
system design. The goal of the clock-triggering-edge assignment is to 
reduce the peak current of the system design. Experimental results 
show that our technique can reduce the peak current up to 45.3%. 
可利用之產業 
及 
可開發之產品 
IC 設計產業之 SoC 晶片設計自動化軟體 
技術特點 從系統設計的層面決定各個模組的時脈觸發緣 
出席國際學術會議心得報告 
                                                             
計畫編號 NSC 96－2221－E－018－023－ 
計畫名稱 使用系統設計與電路合成建構低尖峰電流的系統單晶片之自動化研究(I) 
出國人員姓名 
服務機關及職稱 
呂良盈 
國立彰化師範大學碩士班研究生 
會議時間地點 97 年 3 月 17 日至 97 年 3 月 19 日，美國聖荷西市 
會議名稱 International Symposium on Quality Electronic Design (ISQED) 
發表論文題目 IR Drop Reduction via a Flip-Flop Resynthesis Technique 
 
 
一、參加會議經過 
 
ISQED 2008會議是在美國舊金山聖荷西市舉辦的一個國際會議，參加者來自世界各
國，會議為期三天，是國際上關於電子設計領域的研討會。 
  這次會議舉行在聖荷西市的DoubleTree四星級飯店。此次會議有很多在國際間著名的
公司來參與，例如：Microsoft、Synopsys、Cadence等，這個會議共分為三天，第一天請
到各方面著名的專家來演講，其演講的內容都是相當新穎的研究成果，第二天和第三天，
分為上午四個場次、下午八個場次進行，這些場次包括論文的口頭報告及海報發表的時
間。學生在本次會議論文口頭報告的題目為“IR Drop Reduction via a Flip-Flop Re-
synthesis Technique”，這篇內容是利用不同延遲時間的Flip-Flop來取代電路中原本的
Flip-Flop，達到有效錯開電路中Peak Current，以確保電路的穩定性及效能。 
 
二、與會心得 
 
這是學生首次在國際會議上與各界學者交流討論，對第一次參與國際會議的學生來
說，這真的是一次非常難得的經驗，如何以英文流暢的演說並且講解自己的研究成果，以
及台風的訓練，都讓我有深刻的體驗。自己在很多地方上都有需要改進的空間，特別是在
英文表達能力的訓練，如果能夠順暢的與國外的學者、同學做溝通與討論的話，我想一定
 
IR Drop Reduction via a Flip-Flop Resynthesis Technique* 
 
Jiun-Kuan Wu, Tsung-Yi Wu, Liang-Ying Lu, and Kuang-Yao Chen  
Department of Electronic Engineering, National Changhua University of Education, Taiwan 
tywu@cc.ncue.edu.tw 
 
Abstract* 
Clock skew scheduling for peak current reduction is 
a conventional technique for solving IR-drop problem 
in physical design stage. In this paper, we propose two 
kinds of long delay flip-flops and a heuristic algorithm 
that is used to resynthesize flip-flops of a circuit. Be-
cause the switching times of flip-flops in the resynthe-
sized circuit are staggered, the IR drop effect can be 
reduced. Unlike clock skew scheduling, our technique 
not only can be used in physical design stage but also 
in logic design stage. The other advantages of our 
technique over the clock skew optimization technique 
are that our technique has less area overhead and has 
more opportunities to find a better result. 
1. Introduction 
In an SOC chip, if the number of simultaneously 
charging and the simultaneously discharging transistors 
are too many, power and ground lines of the chip will 
produce the phenomena of serious voltage drop (i.e. IR 
drop) and ground bounce. Voltage drop and ground 
bounce will influence the speed of circuit switching; 
they even will cause logic errors [1]–[3]. So, reducing 
voltage drop and ground bounce is one of the main 
issues for SOC chip designers at present. Many re-
searches have shown that reducing the peak current of 
a design is an efficient method for inhibiting the effect 
of voltage drop and ground bounce. 
   Voltage drop and ground bound problems can be 
solved, or just alleviated, during physical design stage 
by the help of power planning [4]–[8]. Constructing 
high density or wild power lines is a direct method for 
abating voltage drop and ground bounce phenomena. 
However, the additional routing resource required by 
building power lines may enlarge the chip size. 
    In a synchronous design, constructing different 
clock skews for different flip-flop (F/F) groups can 
stagger the switching times of the flip-flop groups. 
Obviously, the peak current of the design can be re-
duced if the switching times of flip-flops are staggered. 
                                                                
*  This research is supported by the National Science Council of 
R.O.C. under contract no. NSC 96-2221-E-018-023.  
Therefore clock skew optimization [9]–[14] is a feasi-
ble technique for peak current reduction of a synchro-
nous design. 
   Clock skew optimization is invoked in CTS (Clock 
Tree Synthesis) step during the physical design stage. 
The ideal goal of a traditional CTS task is to build a 
zero-skew clock tree. It is difficult to build a zero-skew 
clock tree, and therefore there is usually a little skew 
on some leaves in the real practice. Because CTS is a 
complex task for an SOC design, the task will become 
more knotty if CTS algorithm needs to consider the 
correlation between clock skew and the peak current.    
   Y.-T. Nieh et al. [15] proposed an opposite-phase 
scheme for reducing the peak current of clock trees. 
They divided the clock buffers of a clock tree into two 
sets. One set operates at the same phase of the clock 
source, and another set operates at the opposite phase 
of the clock source. 
   In this paper, we propose two types of long delay 
flip-flops and a heuristic algorithm that describes how 
to resynthesize flip-flops by long delay flip-flops for 
peak current reduction. Most peak current reduction 
techniques proposed by other authors can only be ap-
plied to physical design. However, our technique can 
be used in both logic design and physical design stages. 
The advantages of our technique over the clock skew 
optimization technique are that ours has less area over-
head and has more opportunities to find a better result. 
   In the next section, we use an example to explain the 
main idea of the clock skew optimization technique. 
The long delay flip-flops are introduced in Section 3. 
How to use our proposed technique in the circuit de-
sign flow is presented in Section 4. In Section 5, we 
will explain why our approach is better than the clock 
skew optimization technique. A heuristic algorithm 
implementing our proposed approach is described in 
Section 6. Some experimental results on a set of 
benchmarks are presented in Section 7. Finally, we 
conclude this paper in Section 8. 
2. Clock skew optimization technique 
   Fig. 1(a) shows a synchronous circuit CKT1. In this 
circuit, both FF1 and FF2 are a group of positive-edge 
triggered D-type flip-flops, and both CC1 and CC2 are 
   Fig. 6: The I/O files for IR Drop Reducer used in logic design. 
IR Drop 
Reducer 
New
Netlist
        SDF Pre-layout
Netlist
Current
Library
Timing 
Constraint 
Reports 
0.13um CMOS standard cells. The ODFF shown in 
Table 1 is constructed by integrating DFFQX1 and 
DLY4X1. Table 1 also shows the peak current and the 
average power data of a CDFF. 
The current waveforms of both CDFF and ODFF 
have two major peaks during a clock period. Table 2 
shows the peak current data of them. Fig. 5 shows their 
current waveforms. The peak current of the CDFF ap-
pears in the switching time of the output data while the 
peak current of the ODFF appears in the switching 
time of the Clock single. Obviously, the waveforms of 
CDFF and ODFF are different. Therefore, resynthesiz-
ing the flip-flops of a circuit by CDFFs and by ODFFs 
may produce different results. 
4. Design flow 
Our proposed technique has been implemented as a 
software system that is named IR Drop Reducer. IR 
Drop Reducer can be used in either logic design or 
physical design. 
    Fig. 6 shows how to invoke IR Drop Reducer in the 
logic design stage. First, the pre-layout netlist, the SDF 
(Standard Delay Format) file, the current library of 
standard cells, the timing constraint file, etc. are fed to 
IR Drop Reducer. Then, the reducer resynthesizes 
some selected normal flip-flops by the long delay flip-
flops. These resynthesis steps cannot cause any timing 
violation. Because IR Drop Reducer reads a pre-layout 
SDF file rather than a post-layout one, the peak current 
reported by the reducer is an approximate value. 
    If we want to invoke IR Drop Reducer in the physi-
cal design stage, the post-layout netlist and the post-
layout SDF file must be fed to IR Drop Reducer. The 
reducer can construct a new Verilog netlist for an 
AP&R (Automatic Placement and Routing) tool. The 
AP&R tool can use ECO (Engineering Change Orders) 
technique to generate the layout of the new netlist be-
cause the difference between the new constructed net-
list and the original post-layout netlist is only on the 
types of the resynthesized flip-flops.   
5. Our technique vs. traditional technique 
   In this section, we use a circuit to demonstrate why 
our approach is better than the traditional clock skew 
optimization technique. Note that only the critical part 
of the circuit is shown in Fig. 7(a). 
   For convenience sake, we assume that in the illustra-
tion circuit the delay (maximum and minimum) of a 
multiplexer, the delay (maximum and minimum) of an 
adder, the Clock-to-Q delay (maximum and minimum) 
of a flip-flop, the setup time of a flip-flop, the hold 
time of a flip-flop, the clock period and the clock jitter 
are 0.1 ns, 0.4 ns, 0.1 ns, 0.2 ns, 0.2 ns, 0.9 ns, and 0 ns, 
respectively. We use dFF, dMux and hFF to represent the 
Clock-to-Q delay of a flip-flop, the delay of a multi-
plexer, and the hold time of a flip-flop, respectively. 
Variables t1 and t2 (shown in Fig. 7(a)) denote the 
clock latencies of flip-flop X and flip-flop Y, respec-
tively. 
   Obviously, we can reduce the peak current of the 
circuit shown in Fig. 7(a) by adjusting its clock skew 
(t1 － t2). However, in this example, any clock skew is 
 
Table 2: Peak current data for long delay flip-flops.
 
 Cells First Peak Second Peak
 CDFF 27 uA 113 uA 
 ODFF 92 uA 59 uA 
Table 1: Current and power data for flip-flops and DLY4X1.
Cells Peak Current Average Power
CDFF 113 uA 3.9 uW 
DFFQX1 + DLY4X1 156 uA 5.4 uW 
ODFF 92 uA 4.0 uW 
Long Delay Flip-
Flop: ODFF 
Fig. 4: How to construct another long delay flip-flop (ODFF). 
Normal 
F/F 
Cell 
D Q  
Clock 
D  
Delay 
Cell 
D Q  
Clock 
D Q 
Delay Gate
q1 q2 
(a) (b) 
Large Wire 
Capacitance 
Clock  
 
Q  
CDFF 
ODFF 
Fig. 5: Current waveforms for a CDFF and an ODFF. 
0.47 ns 
 V 
T 
 V 
T 
  I 
T 
  I 
T 
Fig. 7: An example for the comparison between  our  approach  and 
           traditional techniques. (In (a), clock skew is assumed to be 0.) 
 
D Q 
 X
+ + 
Clock
clk1 clk2 
Our Technique Traditional Technique 
D Q 
X
D Q 
X'
ODFF Cannot do any change be-
cause adding any clock 
skew will cause a timing 
violation. 
Normal FF 
I 
T 
I 
T 
I 
T 
I 
T 
Being 
Optimized
(a)
(b) (c) 
A B 
t2 
t1
Clock 
clk1
clk2
Normal FF   Normal FF 
D Q 
   Y 
Being 
Replaced
Delay 
< 0.2 ns 
t1
t2 
number of flip-flops that directly affect the value of 
vtsPeak_I) to be removed from Peak_I(iD) but also brings 
some current (value vts'Peak_I(fj) / Numts'Peak_I(fj) in line 21) 
into Peak_I(iD). Note that RIfj is an estimated value. 
   We illustrate FR Algorithm by the example shown in 
Fig. 8. Fig. 8(a) shows the original design D = C∪F, 
where C is {c1 , c2,…, c9} and F is {f1, f2, f3}. The types 
of f1, f2, and f3 are both TypeNormFF (the normal type). 
We assume that DelayMax(TypeNormFF, f*), Delay-
Max(TypeLDFF, f*), the maximum cell delay of each com-
binational cell, the clock period and the clock skew are 
0.1 ns, 0.2 ns, 0.1 ns, 0.4 ns, and 0 ns, respectively. Let 
the size of each time slot be 0.1 ns. For convenience 
sake, we assume that the setup time and the hold time 
of a flip-flop are both 0, and assume that if1 = if2 = if3 = 
[1, 0, 0, 0], ic1 = ic2 = ic3 = [0, 1, 0, 0], ic4 = ic5 = ic6 = ic7 = 
ic8 = [0, 0, 1, 0], and ic9= [0, 0, 0, 1]. If f1 (f2 or f3) is 
implemented by TypeLDFF-type F/F, the if1 (if2 or if3) = [1, 
0.5, 0, 0]. 
   In the first While loop iteration, FR Algorithm calcu-
lates iD = [3, 3, 5, 1], Peak_I(iD) = 5 (uA), tsPeak_I = 3, 
and ts'Peak_I(fk) = 2 (= 3 − 2 + 1) for each fk (k = 1–3).  
   FLIP-FLOP RESYNTHESIS ALGORITHM (FR ALGORITHM) 
Input:  D = C ∪ F, TypeLDFF, Current Waveform Library, SDF, etc. 
Output:  DNew = C ∪ FNew  
1:   Finish = 0; h = 0; FNew = F; 
2:   While (Finish ≠ 1) Begin 
3:   Calculate iD and Peak_I(iD) by iMax-like algorithm; 
4:   Find tsPeak_I by analyzing iD and Peak_I(iD); 
5:      FR= 0;    // FR contains the candidate flip-flops for resynthesis 
6:      For Each fk∈ FNew Begin  
7:  RIfk = 0; 
8:         find ts'Peak_I(fk);  
9:         If (0 < DelayMax(TypeLDFF, fk) − DelayMax(fk) ≦ SlackS(fk )) 
FR = FR ∪ fk; 
10:     End 
11:      For Each ck∈ C that ick = [v1, v2 ,…, vn] Begin 
12:         NumtsPeak_I = 0;  // NumtsPeak_I: number of F/Fs that affect vtsPeak_I 
13:   For Each fj∈ FR 
14:            If (vtsPeak_I > 0 and Depend(fj, ck, tsPeak_I)) NumtsPeak_I ++; 
15:    For Each fj∈ FR 
16:            If (vtsPeak_I > 0 and Depend(fj, ck, tsPeak_I))  
RIfj = RIfj + vtsPeak_I / NumtsPeak_I; 
17:         For Each fj Begin Numts'Peak_I(fj) = 0; End  
18:   For Each fj∈ FR 
19:            If (vts'Peak_I(fj) > 0 and Depend(fj, ck, ts'Peak_I(fj)) Numts'Peak_I(fj) ++; 
20:    For Each fj∈ FR 
21:            If (vts'Peak_I(fj) > 0 and Depend(fj, ck, ts'Peak_I(fj))  
RIfj = RIfj − vts'Peak_I(fj) / Numts'Peak_I(fj); 
22:   End 
23:   Sort RIf1 , RIf2 ,…, RIfq as RIfs1> RIfs2>…> RIfsq; 
24:   For i = 1 to q + 1 Begin   // q: size of F  
25:       If (RIfsi  ≦ 0 or i == q + 1) Begin   
26:             Finish = 1; Break;  
27:          End 
 28: If (resynthesizing fsi cannot induce any timing violation) Begin  
29:             Resynthesize fsi by a TypeLDFF-type F/F and update F
New;  
30:             h =h+1; Break; 
31:          End  
32:     End 
33:     If (Finish ≠ 1) Copy the current circuit (C ∪ FNew) to DNewh; 
34:  End 
35:  Select the best one from {DNew1, DNew2,…,DNewh} as DNew; 
     In the first While loop iteration, FR = {f2, f3} is ob-
tained by the computation of line 9. Lines 11−22 com-
pute RIf1 = 0, RIf2 = ic6 * [0, 0, 1, 0]
T / 1 + ic7 * [0, 0, 1, 
0]T / 1 − ic2 * [0, 1, 0, 0]
T / 1 = 1 + 1 − 1 = 1, and RIf3 = 
1 − 1 = 0. The value of RIf1 is 0 because F
R does not 
contain f1. Then FR Algorithm sorts RIf1, RIf2, and RIf3 
(line 23) and decides to replace f2 by a TypeLDFF-type 
F/F for obeying rule GROFR. In the second While loop 
iteration, FR Algorithm cannot resynthesize any flip-
flop. Therefore, the algorithm immediately terminates 
and outputs DNew shown in Fig. 8(b). Peak_I(iDNew) is 4 
(uA), where iDNew = [3, 2.5, 4, 3]. Obviously, 
Peak_I(iDNew) is smaller than Peak_I(iD). 
   The time complexity of the worst case of FR Algo-
rithm is O(p*q2), where p and q are the number of 
combinational cells and the number of flip-flops in D, 
respectively. 
7. Experimental results 
   Our proposed technique has been implemented as a 
software system (IR Drop Reducer) in C programming 
language on an IBM IntelliStation. There are seven 
ISCAS’89 benchmark circuits used in the experiment 
for evaluating our proposed technique. All gate level 
netlists of the benchmark circuits used in the experi-
ment are synthesized by Design Compiler of Synopsys. 
The target library used by Design Compiler is TSMC 
0.13 um CMOS standard cell library. The power sup-
ply for each benchmark circuit is 1.2 V. 
   In this experiment, we choose a flip-flop from TSMC 
standard cell library, and revise it as two types of long 
delay F/Fs. They are CDFF and ODFF that are pro-
posed in Section 3. For each type, we design 5 differ-
ent delay (Clock-to-Q) flip-flops. The delays are from 
0.1 ns to 0.5 ns. The long delay flip-flops will be used 
(a)
D Q 
1  
D Q 
   2   
D Q 
   3   
2
1
4
5
6
7
3 8
9
time
slot 
iD
1        2       3     4   
5uA
0uA
tPeak I = 3
D Q 
   1   
 D Q 
    2   
D Q 
   3   
2 
1 
4
5 
6
7
3 8
9
time 
slot 
iD 
1         2        3      4   
5uA
0uA
tPeak I = 3
Peak_I(iD) = 5 Peak_I(iDNew) = 4
Fig. 8: An illustration for our algorithm. 
(b) 
TypeLDFF 
F/F
F/F
F/F
F/F
F/F
F/F
F/F
F/F
F/F
F/F
