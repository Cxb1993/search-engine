ity of the communication path to the corre-
sponding peer, the capability of that peer, the 
amount of data items on that peer, etc. Obvi-
ously, states in a DHT-based P2P overlay are 
distributed, and a robust and scalable DHT relies 
on sophisticated state management. 
Previously proposed DHTs, including CAN, 
Chord, Pastry [3], Tapestry [4], etc. assume that 
the participating peers are stationary. This is be-
cause DHTs are originally proposed for Inter-
net-based wide-area applications. However, a 
growing number of devices are now connected 
to the Internet through wireless links. In addition 
to wired DHT nodes, wireless devices may also 
join the DHT. Second, when considering the 
P2P systems such as DirectConnect, Gnutella 
and KaZaA, these systems are open to include 
arbitrary peers that may reside in the wired or 
wireless networks. Third, when wireless devices 
become DHT members, applications and/or ser-
vices built on DHTs can be naturally extended to 
the wireless devices. For example, a wireless 
device may like to join a multicast group (e.g., a 
group of players in a multiplayer game), where 
all members are DHT nodes, in order to receive 
messages addressed to that group. 
In light of above discussions, peers forming 
a DHT may be wireless devices and they may 
change their network attachment points during 
their lifetime in the DHT. In other words, DHT 
itself can move. As a result, we immediately 
face the peer mobility problem. That is, the 
state-pairs regarding a moving node may be dis-
tributed throughout the P2P overlay and will 
become stale. Stale states can result in route in-
efficiency and redundant traffics in manipulating 
DHT-based systems. 
In this study, we are interested to know 
whether it is possible to develop an efficient 
DHT-based overlay that can move? We discuss a 
DHT, called Bristle, which supports peer mobil-
ity and manages peer states in the overlay net-
work that moves. 
When designing an overlay such as Bristle, a 
number of issues need to be addressed. 
 
z A DHT should avoid using the wireless de-
vices to help forward messages due to the 
mobility of these devices. DHT nodes that are 
in the wired Internet are preferred. 
z A wireless communication environment is 
bandwidth-limited. It may not be appropriate 
to aggressively probe the aliveness and cur-
rent location of wireless devices for main-
taining their states, because this may increase 
the network traffic. 
z On the other hand, to maintain up-to-date and 
consistent states for mobile nodes, a DHT has 
to rapidly invalidate or update states of mo-
bile peers. 
z In the real world, heterogeneity is nature of 
life. A recent study [5] analyzed traffic ap-
pearing in multiple border routers across a 
number of ISPs' networks over a period of 
three months. The traffics include those con-
tributed by three popular P2P systems, 
namely KaZaA, Gnutella and DirectConnect. 
The study concluded that a peer-to-peer net-
work highly relies on peers that are relatively 
powerful (e.g., in KaZaA these peer are 
called supernodes), where less than 10% of 
peers contribute around 99% of traffics. How 
to take advantage of peer heterogeneity when 
designing an overlay that mixes wired and 
wireless nodes is another important research 
issue. 
 
In this paper, we discuss several design com-
ponents in Bristle by bearing the design re-
quirements mentioned above in mind. We 
evaluate Bristle via extensive simulations; show 
that Bristle conforms the design requirements.  
 
 
Overview of Our Proposal 
 
The Bristle architecture is depicted in Figure 1. 
There are two types of nodes: stationary nodes 
and mobile nodes. The stationary nodes form a 
stationary layer, which have fixed locations. On 
the other hand, mobile nodes are in the last-mile 
wireless extension (i.e., nodes in the mobile 
layer) and can change their network attachment 
points. The stationary layer is in fact a 
 2
Figure 2: The overall performance results 
spectively. The results show that when M is 
large, the invalidation-based approach can sig-
nificantly reduce the percentage of timeouts and 
the maintenance bandwidth. It performs better 
than the invalidation-update-based approach and 
leave-join approach, i.e., the Type B DHT that 
uses join and leave operations to handle the 
movement of a node. For the simulated DHT, 
the invalidation-based approach [7] can reduce a 
modest number of hops for routing a lookup re-
quest, although it introduces nearly 0% timeouts. 
This is because nodes in the simulated DHT 
maintain backup neighbors. Backup neighbors 
help forward a lookup request without signifi-
cantly lengthening the length of a routing path. 
Similarly, the invalidation-update based ap-
proach can significantly reduce the percentage 
of timeouts and the maintenance bandwidth 
when compared with the Type B DHT. However, 
the invalidation-update-based approach cannot 
outperform the invalidation-based approach [7], 
because the former will create more registry 
nodes for a mobile node. This increases the 
probability for a node to forward a message to a 
mobile node and thus increases the percentage 
of timeouts for sending a message. If the mobile 
node moves to a new location, the invalida-
tion-update-based approach requires more traffic 
to update the new location of a mobile node. 
However, the invalidation-update-based ap-
proach outperforms the invalidation-based one 
in terms of the number of hops for sending a 
lookup message. This is because the invalida-
tion-update-based approach can introduce more 
“healthy” neighbors to each peer, although this 
may increase the network traffic. Overall, the 
invalidation-update-based approach can reduce 
up-to 20% hop counts for sending a lookup re-
quest when compared with the Type B DHT. 
When M is decreased, the invalidation-based, 
 4
