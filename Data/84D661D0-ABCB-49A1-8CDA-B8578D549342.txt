bandwidth is wasted. Hence, a data frame of real- 
time transmission should retain a low overhead error 
detection field. In this project, we propose a 
successively computing CRC mechanism (SCCM) to 
generate the low overhead field for each data frame 
of real-time multimedia streaming in a wireless mesh 
network. The field adopts a partial CRC-32 checksum, 
but can possess efficient error detection ability. 
The SCCM performs the general CRC-32 calculation, and 
it hence can be implemented on the current hardware 
circuit. Using the SCCM, the corrupt and useless 
real-time data frames can be found and discarded in 
the network early. Thus, the mSTA resources and 
wireless bandwidth utilization can be improved 
significantly. 
英文關鍵詞： Real-time Multimedia Streamings, IEEE 802.11 Wireless 
Mesh Networks, Error Detection, SCCM, partial CRC-32 
Checksum. 
 
 II
行政院國家科學委員會專題研究計畫成果報告 
 
針對即時性多媒體串流探討在802.11無線網狀網路中使用部分CRC錯誤檢查碼的
方法、特性與效能 
 
Investigate the Partial CRC Method, Characteristic and Performance for Real-time 
Multimedia Streaming in 802.11 Wireless Mesh Networks 
 
計畫編號：NSC 100-2221-E-030-014 
執行期限：100年8月1日至101年10月31日 
主 持 人：莊岳儒 助理教授 輔仁大學電機工程系 
 
中文摘要 
在IEEE 802.11無線網狀網路上傳送即時性多
媒體資料串流將會是一種受歡迎的應用之一。此
種網路技(IEEE 802.11, WiFi)採用「確認」與「重
傳」的機制以提供一個可靠的傳送環境。為了執
行此機制需要有一個CRC-32的欄位被附加在資
料訊框的最後面作為錯誤偵測之用。當此資料訊
框發生錯誤時，其會被丟棄並重送。然而，由於
即時性傳送有其時間限制，故重傳的作法對於即
時性多媒體資料串流而言並不合適。所以，
CRC-32的欄位或許可以從即時性的資料訊框上
移除以減少額外的負擔。但是如此一來，網狀網
路上的中繼節點將不再能夠察覺資料訊框是否發
生錯誤，而會持續的傳送它們一直到達目的地節
點。如此無線網路的頻寬將會因此而浪費。所以
一個具有即時性傳送的資料訊框仍應該要保留一
個低負擔的錯誤偵測欄位。在此計畫中，我們針
對無線網狀網路提出一個連續計算CRC的機制
(Successively Computing CRC Mechanism, SCCM)
去為每一個即時性多媒體資料串流的資料訊框產
生一個低負擔的錯誤偵測欄位。此欄位是採用小
部分的CRC-32檢查碼，但它卻可擁有有效的錯誤
偵測能力。此SCCM是執行一般的CRC-32計算方
法，因此它可以被實現在目前現有的硬體電路
中。使用此SCCM，一些錯誤的與無用的即時性
資料訊框將可在網路傳送的過程中及早被發現並
丟棄。如此，網狀網路上的中繼節點資源與無線
網路頻寬使用率將可被有效的節省與提升。 
 
關鍵詞：即時性多媒體資料串流、IEEE 802.11 無
線網狀網路、錯誤偵測、SCCM、部分 CRC-32 檢
查碼。 
英文摘要 
Real-time multimedia streamings on the IEEE 
802.11 wireless mesh networks will be one of the 
popular applications. It (IEEE 802.11, WiFi) adapts 
an acknowledgement and retransmission mechanism 
to provide a reliable transmission environment. To 
perform the mechanism, the CRC-32 field will be 
required and attached behind the data frame for error 
detection. As the data frame becomes corrupt, it will 
be discarded and retransmitted. However, due to the 
time constraint of real-time transmission, the 
retransmission may be not suitable for real-time 
streamings. Thus, the CRC-32 field may be removed 
to reduce overhead of a data frame. As a result, the 
corrupt data frames can not be found by the 
intermediate mesh stations (mSTAs) anymore, and 
are still forwarded to the destination. The wireless 
bandwidth is wasted. Hence, a data frame of real- 
time transmission should retain a low overhead error 
detection field. In this project, we propose a 
successively computing CRC mechanism (SCCM) 
to generate the low overhead field for each data 
frame of real-time multimedia streaming in a 
wireless mesh network. The field adopts a partial 
CRC-32 checksum, but can possess efficient error 
detection ability. The SCCM performs the general 
CRC-32 calculation, and it hence can be 
implemented on the current hardware circuit. Using 
the SCCM, the corrupt and useless real-time data 
frames can be found and discarded in the network 
early. Thus, the mSTA resources and wireless 
bandwidth utilization can be improved significantly. 
 
Keywords: Real-time Multimedia Streamings, IEEE 
802.11 Wireless Mesh Networks, Error Detection, 
SCCM, partial CRC-32 Checksum. 
 
Fig. 1. The corrupt and useless WiFi MAC frames. 
 
ACK mechanism and a tunnel mechanism to discard 
more corrupt and useless data frames early and work 
correctly in a heterogeneous mesh network. From 
the statistical analyses, few of CRC-32 checking bits 
are required to attach behind an MAC frame, but it 
can still possess efficient error detection ability and 
high dropping ratio for corrupt and useless frames. 
2. The Useless Data Frame 
Table I. SCCM checking table. 
SA DA MoreBit 
IP 
identifier Status
CRC 
(32-bit)
001D60A73341 001D6012C857 1 50 clean 111…011
502E3511102E 415A9B5310DC 1 3760 clean 101…100
… … … … … … 
3EF40153AC6C 415A9B250A7B 0 334 dirty 111…001
3. The Successively Computing CRC 
Mechanism (SCCM) 
There are two points of the SCCM. The first one 
is n-checking bits. Unlike the normal CRC-32, the 
n-checking bits adapt partial CRC-32 as the 
protection. The n-checking bits can be obtained from 
the most significant bit or the least significant bit of 
the CRC-32. In addition, the n-checking bits also 
reduce the checksum size. That means the overall 
overhead of the frame transmission can be decreased. 
The second point is checking mechanism. The UDP 
datagram may be fragmented into many data frames. 
Those data frames will be considered as independent 
in the MAC layer. If one of the data frame is corrupt, 
it will be discarded by the mSTA. The other useless 
data frames will be transmitted to the destination. 
The characteristics of real-time streamings 
include loss-tolerance and delay-sensitivity. Hence, 
most of them may use UDP (Unit Data Protocol) 
transmission technique to satisfy the real-time 
requirements (i.e., the time constraint). In the 
TCP/IP protocol stacks, the real-time application 
data are first encapsulated into UDP datagrams in 
Transport Layer. Each UDP datagram employs a 
16-bit checksum filed for error detection, as shown 
in Fig. 1. 
The SCCM uses a checking table to record data 
frame checking status as shown in Table I. The table 
information will be updated after the data frame is 
processed. There are some information are required 
in the checking table. The SA is source mSTA MAC 
address. The DA is destination mSTA MAC address. 
The MF is the more flag which is used for indicating 
whether it has more data frames behind the receiving 
data frame which belong to the same UDP datagram. 
The IP identifier is used for distinguishing the data 
frames which belong to the same UDP datagram. 
The status is used to indicate the present frame 
verification status. The “clean” means correct and 
“dirty” means incorrect. The CRC-32 (32-bit) is 
used for reserving the calculating record. The IP 
identifier and more flag information is in the 
network header. The SCCM is allowed the mSTA to 
access the network header information to the 
checking table. Within the information above of the 
checking table, the mSTA can discard not only the 
corrupt data frames but also the useless data frames. 
The operation of the checking table will be detailed 
in the next section. 
The source node may fragment a UDP datagram 
into several IP packets and encapsulate into several 
WiFi MAC frames. In a destination node, when 
these WiFi MAC frames are received, then they will 
be de-capsulated, gathered to retrieve a UDP 
datagram and passed it to Transport layer. Once a 
datagram error is detected in Transport layer, all 
WiFi MAC frames belonging to the same datagram 
will be discarded no matter they are corrupt or not, 
as shown in Fig. 1. Namely, most of these discarded 
MAC frames should be correct or clean, and they are 
called the useless data frames. In a wireless mesh 
network, these useless data frames are still 
forwarded by the intermediate mSTAs but dropped 
by the destination. Thus, they will significantly 
cause the waste of wireless bandwidth and 
intermediate node resources. 
Although using n-checking bits can improve 
bandwidth utilization, it sacrifices partial checking 
performance. For example, the n-checking bits 
 4
  
Fig. 4. The procedure of tunnel data frame with 
hecksum which is the first CRC-32 as the new 
paring result is not equal which means 
the
he Chase Mechanism 
rovides the mSTAs to 
dro
lve, the mSTA generates a chase frame to 
no
n-checking bits. 
 
c
Fig. 5. The procedure of de-tunnel data frame with 
 De-tunnel 
 to the mesh networks, 
ho
ave its neighbors’ 
inf
ceives 
the
mesh standards request 
rel
input. This can be appended in front or behind the 
data frame. In the Fig. 3, the checksum is placed in 
front of the data frame. The combination data is next 
sent to the CRC-32 processor to calculate the second 
checksum. The n-checking bits are selected and 
comparing, too. The procedure will proceed until the 
n-th frame. 
If the com
n-checking bits. 
3.4. Tunnel and
 data frame is not correct, the control signal will 
terminate CRC-32 calculating procedure. Instead, 
the mSTA will start to drop the useless data frames 
which belong to the same UDP datagram in the 
buffer. 
3.3. T
The chase mechanism p
p the useless data frame in the mesh network. 
According the above paragraph, as the mSTA finds 
error with the n-checking bits, the mSTA starts to 
discard the data frames. However, for some situation, 
the error occurs at the tail data frames, the mSTA 
may not drop all the data frames which belong to the 
same UDP datagram in buffer. That is, some front 
data frames may has been transmitted to the next 
mSTA. 
To so
tify the next mSTA. The mSTA will select the first 
data frame which belongs to the same UDP 
datagram in the buffer queue to be the chase frame. 
The other data frames which belong to the same 
UDP datagram will be cleared. The mSTA 
regenerates new random n-checking bits to the chase 
frame and set it as the last data frame. As the next 
mSTA receives it finds the error on it, the mSTA will 
repeat the previous mSTA behavior. This procedure 
will sustain until all useless data frames have been 
cleared. 
As we apply the SCCM
wever, in the real environments, some of the 
mSTA may not have the SCCM. Therefore, the data 
frames which include the n-checking bits should 
disguise as a normal Wi-Fi Mac data frame. The 
procedure is called as tunnel. 
Each mSTA should h
ormation. The information also records whether it 
supports the SCCM. If the mSTA knows that it 
connects to the mSTA which does not support the 
SCCM, the procedure will be executed as in the Fig. 
4. Each data frame with n-checking bits will be sent 
to the CRC-32 calculator to generate a CRC-32 
checksum. Then, the checksum will be appended to 
the data frame with n-checking bits. This is a 
tunneled data frame. When the mSTA which does 
not support the SCCM receives the tunneled data 
frame. It can use the standard CRC checking 
procedure to normally verify this data frame. 
If the mSTA which supports the SCCM re
 tunneled data frame, it will remove the tunneled 
information from the data frame. It is called the 
de-tunnel. The procedure is showed in Fig. 5. The 
mSTA removes the CRC-32 field. Then, the 
remaining procedure will be as same as the 
n-checking bit procedure. 
Based on the 802.11 
iable transmission, that is as the mSTA receives 
the frame, it should reply an ACK frame as the 
acknowledgement to the sending mSTA. If the frame 
becomes corrupt on the transmission, the receiving 
mSTA will not reply the ACK frame. Every mSTA 
has a timer, as the frame is transmitted, the timer 
 6
        
(a) The n-checking bit from the least significant        (b) The n-checking bit from the least significant bit 
bit of the CRC-32 of 4-byte size data.                of the CRC-32 of 48-byte size data. 
 
          
(c) The n-checking bit from the most significant         (d) The n-checking bit from the most significant 
bit of the CRC-32 of 4-byte size data.                  bit of the CRC-32 of 48-byte size data. 
 
Fig. 8. The scenario of the SCCM applying on the wireless mesh network. 
 
SCCM to be its next mSTA. That is, the core mSTAs 
with SCCM will have high opportunity to become 
the candidates for routing. If the edge mSTA does 
not find the suitable core mSTA, it changes to select 
another core mSTA which is without the SCCM 
function for routing. In this situation, the tunnel 
strategy is concerned. When the routing path has 
been established, the STA starts to send the data 
frame to its edge mSTA in BSS1, as shown Fig. 7. 
The edge mSTA generates the n-checking bits of the 
data frame, sets the SCCM enabled flag in the data 
frame, and then transmits it to the first core mSTA. 
As the first core mSTA receives the data frame with 
the n-checking bits and is ready to forward to the 
second core mSTA which is without SCCM, it will 
encapsulate the data frames and sets the tunneling 
enabled flag. When the second core mSTA receives 
the tunneled data frame, it will treat it like the 
normal Wi-Fi MAC data frame. Then, it sends it to 
the third core mSTA. When the third mSTA receives 
the tunneled data frame, it will remove the tunneled 
information and clear the tunneling enabled flag in 
the mesh header. Then, it transfers it to the edge 
mSTA in BSS2 and forward to the destination STA. 
When the mSTA receives the data frame, the 
information will be updated to the checking table. 
For example, if the mSTA receives a data frame, and 
there is no corresponding information in the 
checking table, the mSTA will adds the information 
from the mesh header to the checking table. It adds 
the source address (SA), destination address (DA), 
IP identifier, and initialize the status field as “clean”. 
As the CRC-32 calculation is done, the checksum 
result will be reserved to the CRC (32-bit) field for 
later data frame calculation. 
Once the error occurs, the mSTA will stop 
continuing to calculate the later coming data frame. 
Instead, the mSTA will remark the status field as 
“dirty” to indicate that the later coming data frames 
which belong to the same UDP datagram should be 
discarded. Besides, the mSTA retains the first 
outgoing frame in the queue, and others which 
 8
 10
8. 參考文獻 
[1] IEEE P802.11s/D3.02 “Telecommunications 
2nd,” Addison Wesley, Jun. 
e-Ru Chuang, Hsueh-Wen Tseng, and 
 Performance Study of 
-checking Scheme (DECS) with 
SCCM方法的設計與運作上我們也用數學與模擬
的方式分別進行各種狀況的分析與研究。透過分
析與模擬的結果我們也更確定了此SCCM方法在
實際使用上的各種特性與頻寬使用效率提升的效
果。 
本研究計畫之成果已發表在IEEE國際會議論
文[6]，而完整研究結果也投稿到IEEE Transactions 
on Computers期刊論文，目前已被接受即將出刊
[7]。 
and Information Exchange between Systems – 
Local and Metropolitan Area Networks Specific 
Requirements – Part 11: Wireless LAN 
Medium Access Control (MAC) and Physical 
Layer (PHY) Specifications, Amendment 10: 
Mesh Networking,” May 2009. 
[2] David Ginsburg, “ATM: Solution for Enterprise 
Internetworking, 
1999. 
[3] Shiann-Tsong Sheu, Ming-Kai Hsueh, and 
Jen-Hui Chen, “An Intelligent Cell Checking 
Policy for Promoting Data Transfer 
Performance in Wireless ATM Networks,” 
Proceedings of IEEE ATM Workshop, pp. 
239-244, May 1999. 
[4] Shiann-Tsong Sheu, and Chih-Chiang Wu, “An 
Adaptive Cell Checking Controller for Wireless 
ATM Networks,” IEICE Trans. on Commun., 
vol. E83-B, pp. 330-338, Feb. 2000. 
[5] Yue-Ru Chuang, Hsueh-Wen Tseng, 
Shiann-Tsong Sheu, and Chih-Wei Su, “An 
Almost Overhead-Free Error Control Scheme 
for IEEE 802.16-Based Multi-hop Networks,” 
Proceedings of IEEE Global 
Telecommunications Conference (Globecom 
2009), pp. 1-6, Dec. 2009. 
[6] Yue-Ru Chuang, Je-Wei Chen, and Chia-Sheng 
Hsu, “Investigate Partial CRC-32 Characteristic 
and Performance for Real-time Multimedia 
Streamings in 802.11 Wireless Mesh 
Networks,” in Proc. IEEE SMC-2011, Oct. 
2011. 
[7] Yu
Shiann-Tsong Sheu, “A
Discrete-error
the Optimal Division Locations for IEEE 
802.16-based Multi-hop Networks,” IEEE 
Transactions on Computers. (Has been 
accepted to be published) 
再透過網路回傳給電腦，以提供復健師作為了解目前病患身體狀況的一個參考依據。 
 
10月 11日的議程包含上午一場主題演講、12場會議以及下午 24場會議。主題演講為腦用
機器人的互動，內容為講到以戴上頭盔式裝置機器收集腦波傳出來的訊號，進一步地去控制機
器人，輪椅或者是義肢等。另外也講到了除了可以用在病人身邊外，對於像是一些研究上，如
無人裝置的操控也做一個介紹。接著上午場我選擇雲端運算與服務這場會議。有一個研究是在
講動態存取與控制雲端服務，內容在講述以虛擬防火牆來保護雲端系統、在虛擬化底下來執行
平行虛擬連線。下午場則選了一場智慧型車用系統會議，當中有篇研究主題是在講混合不同的
感測器去導航與控制自動車，它內容講到使用雷射測距儀，電子指南針其它內部量測裝置，透
過卡爾曼濾波器與 fuzzy-logic 來去取得車子的狀態並對狀態做出決策，最後把它給實現在車子
上。 
 
10月 12日的議程包含上午一場主題演講、12場會議以及下午 24場會議。主題演講為人類
與類人類，主題內容主要是在講機器人與人類目前的互動性。在設計機器人當中要考量互動時
的人身安全，還有機能表現的效率等挑戰。接著我選擇一場電腦系統與軟體工程會議，其中有
一篇研究主題是在探討中介軟體(middleware)在使用者層級(user-level)中的配置，內容在講記憶
體配置的方式影響電腦的表現效率。而下午場則是參加我的論文口頭報告，其內容為如何在網
狀網路上去減少 CRC-32檢查碼，以提升即時性串流在傳輸上面的服務品質以即資料保護。 
 
二、與會心得： 
 
很難得有這個機會能夠來出席國際研討會並使用英文進行口頭的論文發表。除此之外，也
有機會能夠看到個各不同領域的一些想法與概念或者是技術層面的研究。本次研討會所舉辦的
場次非常多，無法全部每場都參與，然而我是還可以從論文集的光碟中去閱讀其他人的研究論
文，當中也有一些不錯的論文可以供日後研究參考。能夠參加本次研討會真是受益良多，往後
若有機會仍希望能夠繼續對外發表自己的研究成果。 
 
三、考察參觀活動(無此項活動者省略)。 
 
四、建議： 
 
此次很榮幸能獲得國科會補助出席國際會議，但系上仍有部分研究生並未能獲得國科會補
助。一些知名的國際會議有時會辦在距離台灣比較遙遠的國家或地區，因此若未能獲得國科會
補助，在出國的經費上對一名沒有工作的研究生而言確實是一筆較為沈重的負擔。因此，希望
國科會對於研究生出席距離台灣比較遙遠的國際會議的補助機會能再增加，以鼓勵更多的年輕
學子能出國參與國際會議，擴增國際視野。 
 
五、攜回資料名稱及內容： 
 
1. SMC 2011手冊：內容包含 IEEE SMC2010簡介、會議主席、會議日程表、主題演講者及
其演講主題、各個會議的主題以及場地、各個會議主席、每場會議包含的論文簡介與演
Investigate Partial CRC-32 Characteristic and 
Performance for Real-time Multimedia Streamings in 
802.11 Wireless Mesh Networks 
 
Yue-Ru Chuang, Je-Wei Chen, and Chia-Sheng Hsu 
Department of Electrical Engineering 
Fu Jen Catholic University 
Taiwan, R.O.C. 
 
 
Abstract—Real-time multimedia streamings on the IEEE 802.11 
wireless mesh networks will be one of the popular applications. It 
(802.11, WiFi) adapts an acknowledgement and retransmission 
mechanism to provide a reliable transmission environment. To 
perform the mechanism, the CRC-32 field will be required and 
attached behind the data frame. As the data frame becomes 
corrupt, it will be discarded and retransmitted. However, due to 
the time constraint, the retransmission may be not suitable for 
real-time streamings anymore. Thus, the CRC-32 field may be 
removed to reduce overhead of a data frame. As a result, the 
corrupt data frames can not be found by the intermediate mesh 
stations (mSTAs), and are still forwarded to the destination. The 
wireless bandwidth is wasted. Hence, a data frame should retain 
a low overhead error detection field. In this paper, we propose a 
successively computing CRC mechanism (SCCM) to generate the 
low overhead field for each data frame of real-time multimedia 
streaming in a wireless mesh network. The field adopts a partial 
CRC-32 checksum, but can possess efficient error detection 
ability. The SCCM performs the general CRC-32 calculation, it 
hence can be implemented on the current hardware circuit. Using 
the SCCM, the corrupt and useless data frames can be found and 
discarded in the network early. Thus, the mSTA resources and 
wireless bandwidth utilization can be improved significantly. 
Keywords-real-time multimedia streamings; IEEE 802.11 
wireless mesh networks; SCCM; parital CRC-32 checksum 
I. INTRODUCTION 
Due to the incremental requirements of multimedia 
applications transmitted via wireless communications, the 
transmission fashions of multimedia streamings based on 
802.11 mesh networks [1] will become more and more popular. 
Most of the multimedia applications may contain audio and 
video streamings, which are real-time display and possess the 
characteristics of loss-tolerance and delay-sensitivity. In these 
real-time applications, such as IPTV and VoIP (via MSN, 
Skype, or SIP), etc., most of them may use UDP transmission 
technique to satisfy the real-time requirements. 
In wireless networks, the transmission quality is usually 
worse than the wired networks due to channel interference and 
signals collision. Therefore, the standard of IEEE 802.11 (WiFi) 
designs an acknowledgement and retransmission mechanism to 
provide a reliable transmission. In this mechanism, a receiver 
will send an ACK frame back to the sender when it receives a 
correct data frame. That is, if the sender cannot receive an 
ACK frame from the receiver, the sender will automatically 
and continuously retransmit the data frame to the receiver until 
it receives an ACK frame. This mechanism is especially 
important in WiFi mesh networks because several transmission 
paths/links are in wireless. To perform the mechanism, it has to 
accompany with an error detection/correction coding to check a 
received data frame on the receiver. In the standard 802.11 
MAC frame, there is a 4-byte CRC-32 checksum attached 
behind it. Using the CRC-32 checksum, the receiver can detect 
or even correct errors occurring on a data frame. 
However, in most multimedia streaming environments, the 
characteristic of real-time transmission, which has time 
constraint, does not allow such reliable transmission based on 
retransmission mechanism. It also implicates that a receiver is 
not necessary to use CRC-32 checksum to detect the error 
occurrence on real-time multimedia data frames. Hence, the 
CRC-32 checksum may be removed from an MAC frame to 
reduce its overhead and improve wireless bandwidth utilization. 
However, in an 802.11 mesh network, if the CRC-32 checksum 
is totally removed from MAC frames, each forwarding mesh 
station (mSTA) cannot be aware of error occurrence on data 
frames during transmission, and still forwards the corrupt data 
frames to the destination. Finally, these data frames will be 
totally discarded by the destination node. The wastes of mSTA 
resources and wireless bandwidth are incremental. 
From the above aspect, in real-time streaming environment, 
a data frame is still necessary to retain a low overhead partial 
CRC-32 checksum for the intermediate mSTAs to detect error 
occurrence, and these mSTAs can discard these corrupt data 
frames early. Actually, the concept has been discussed in many 
literatures. In [2], the author had mentioned a solution called 
Early Packet Discard (EPD). The solution inspects the ATM 
cell headers and drops all error and remaining cells of the same 
CPCS PDU in AAL5. Similarly, in [3], the authors proposed an 
intelligent cell checking policy (ICCP) for error detection. The 
timing of checking the ATM cell is when the traffic congestion 
occurs. It is due to the ATM cells will be queued in the buffer 
longer at this time. The ATM switch can check those ATM 
cells and discards the corrupt cells to release the buffer capacity. 
In [4], the authors also proposed an adaptive cell checking 
controller (ACCC) for wireless ATM network to drop all error 
and remaining cells of the same CPCS PDU. However, the 
978-1-4577-0653-0/11/$26.00 ©2011 IEEE 3415
Although using n-checking bits can improve bandwidth 
utilization, it sacrifices partial checking performance. For 
example, the n-checking bits number four from the least 
significant bit of the CRC-32 means that the error can be 
detected if the error bits occur within these four bits range. As 
the error position is without this 4-bit range (in other 28 bits), 
the error will become invisible. The solution in SCCM is 
proposed. The SCCM uses the previous CRC-32 calculation 
result to combine present data input to obtain a new CRC. 
Hence, the error bits will be added into next the input data. This 
behavior will lead to the next CRC-32 calculation result that 
must be wrong. In other words, the error bits position which 
appears on the 4-bit range may have a great opportunity. If the 
error bits indeed within the 4-bit range, then the error will be 
detected, and the other useless data frames will be discarded. 
To apply the SCCM strategy on the 802.11 mesh network, 
there are some techniques are going to be introduced in the 
following paragraph. 
A. N-checking Bits Generation 
The sending mSTA takes responsibility to generate the n-
checking bits for every sending data frames. The procedure is 
shown in Fig. 2. We assume that the UDP datagram has been 
fragmented into n data frames. At beginning, the first data 
frame is accessed by the CRC-32 processor. After the 
calculation, the n-checking bits will be selected. The n-
checking bits can be selected from the most significant bit or 
least significant bit of the checksum. In the Fig. 2, the n-
checking bits are selected from the least significant bit of the 
checksum. The n-checking bits will be appended to the data 
frame and the CRC-32 of the first data frame will be reserved. 
As the second data frame is accessed, it will be combined with 
the previous reserved checksum for the new input. The CRC-
32 could be appended in front of the data frame or behind the 
data frame. In the Fig.2, the CRC is appended in front of the 
data frame. The new input will be accessed by the CRC-32 
processor to generate the second CRC-32. It is also selected the 
n-checking bits for the second data frame. The second CRC-32 
calculation result will be replaced the first CRC-32 calculation 
result and reserved for calculating the third data frame 
checksum. Similarly, if the input is n-th data frame, the (n-1)-th 
CRC-32 will be combined with it as the input to calculate the 
n-th CRC-32. 
B. N-checking bits check 
The n-checking bits checking procedure is similar to the n-
checking bit generating. According to the above paragraph, the 
n data frames will be received by mSTA in order. When the 
first data frame is received, the it will be accessed by the CRC-
32 processor. The CRC-32 processor starts to calculate the first 
checksum. After the CRC-32 is obtained, the n-checking bits 
will be selected. The n-checking bits are selected from the least 
significant bit or most significant bit of the CRC-32. In the Fig. 
3, the n-checking bits are selected from the least significant bit 
which is same as the sending mSTA. The selected n-checking 
bits are taken for comparing with n-checking bits that are 
appended on the first data frame. If the comparing result is 
equal that means the data frame is correct or no error is 
detected, the first data frame will be further processed. Also, 
CRC-32 
Processor
CRC-321
Payload1
CRC-32 
Processor
CRC-322
Payload2CRC-321
CRC-32 
Processor
CRC-32n
PayloadnCRC-32n-1
Payload1 Payload2H H PayloadnH
Payload1 Payload2 Payloadn
Wi-Fi MAC Data Frame
n-checking bit
Payload
n-bit n-bit n-bit
H H H
H H H
H
 
Figure 2. The procedure of generating n-checking bits. 
CRC-32 
Processor
CRC-321
Payload1
CRC-32 
Processor
CRC-322
Payload2CRC-321
CRC-32 
Processor
CRC-32n
PayloadnCRC-32n-1
Payload1 Payload2 PayloadnH H H
Control Signal Control Signal Control Signal
n-bitn-bitn-bit
H HH
Wi-Fi MAC Data Frame
n-checking bit
PayloadH
 
Figure 3. The procedure of checking n-checking bits. 
the first CRC-32 value will be kept. If the second data frame 
has also arrived at the mSTA, it will be processed as following. 
The second data frame will be combined with the previous 
checksum which is the first CRC-32 as the new input. This can 
be appended in front or behind the data frame. In the Fig. 3, the 
checksum is placed in front of the data frame. The combination 
data is next sent to the CRC-32 processor to calculate the 
second checksum. The n-checking bits is selected and 
comparing, too. The procedure will proceed until the n-th 
frame. 
If the comparing result is not equal which means the data 
frame is not correct, the control signal will terminate CRC-32 
calculating procedure. Instead, the mSTA will start to drop the 
useless data frames which belong to the same UDP datagram in 
the buffer. 
C.  The Chase Mechanism 
The chase mechanism provides the mSTAs to drop the 
useless data frame in the mesh network. According the above 
paragraph, as the mSTA finds error with the n-checking bits, 
the mSTA starts to discard the data frames. However, for some 
3417
mesh header flag field, it has 4-bit size is reserved for future 
using. We adapt two reserved bits for SCCM. The figure is 
shown in Fig. 6. The first is SCCM enable flag. This flag 
indicates the data frame that whether carries the n-checking bits 
or not. If the flag is set up to 1 which means enable, the data 
frame carries the n-checking bits. If the flag is set to 0 which 
means disable, the data frame does not carries the n-checking 
bits. That is, the data frame is a normal Wi-Fi MAC frame. The 
second is tunnel flag. It indicates whether the frame is the 
tunnel data frame. If the flag is set to 1 which means the data 
frame is a tunnel data frame. If the flag is set to 0 that means 
the frame is not a tunnel data frame. 
In scenario of Fig. 7, the source STA is in BSS1, connects 
to a edge mSTA. The destination STA is in BSS2, connects to 
a edge mSTA. The source STA has the data needs to transmit 
to the destination STA. In this situation, the edge mSTA that 
connects to the source STA needs to find a routing path to the 
other edge mSTA. In the routing discovery, the edge mSTA 
considers the mSTA, which supports the SCCM as the first 
priority to be the intermediate mSTA. Therefore, the core 
mSTAs which have SCCM function in the MBSS may have the 
opportunity to become the candidates for routing. If the edge 
mSTA does not find the suitable core mSTA, it changes to 
select another core mSTA which is without the SCCM function 
for routing. In this situation, the tunnel strategy is concerned. 
When the routing path has been established, the STA starts to 
send the data frames to the edge mSTA which is in BSS1 
shown in Fig. 7. The edge mSTA generates the n-checking bits 
to the data frames and sets up the SCCM enable flag in the data 
frames. Then, transmits to the first core mSTA. As the first 
core mSTA receives the data frames with the n-checking bits 
and is ready to forward to the second core mSTA which is 
without SCCM, it will encapsulate the data frames and sets up 
the tunnel enable flag. The second core mSTA receives the 
tunnel data frames, it treats them as the normal Wi-Fi MAC 
data frame. Then, sends them to the third core mSTA. The third 
mSTA receives the tunnel data frames, it will remove the 
tunnel information and reset the tunnel flag in the mesh header. 
Then, transmits them to the edge mSTA in BSS2. The edge 
mSTA collects those data frame, then sends to the destination 
STA. 
When the mSTA receives the data frame, the information 
will be updated to the checking table. For example, if the 
mSTA receives a data frame, and there is no corresponding 
information in the checking table, the mSTA will adds the 
information from the mesh header to the checking table. It adds 
the source address (SA), destination address (DA), IP identifier, 
Source port, Destination Port, and initialize the status field as 
“clean”. As the CRC-32 calculation is done, the checksum 
result will be stored to the CRC (32-bit) field for later data 
frame calculation. 
Once the error occurs, the mSTA will stop continuing to 
calculate the later coming data frame. Instead, the mSTA will 
remark the status field as “dirty” to indicate that the later 
coming data frames which belong to the same UDP datagram 
should be discarded. Besides, the mSTA selects the first 
outgoing frame in the queue buffer, the others which belong to 
the same UDP datagram will be cleared. The first outgoing data 
frame will be the chase frame. According to the chase 
Mesh
Flags
Mesh Time to 
live
(TTL)
Mesh 
Sequence 
Number
Mesh Address 
Extension
Address 
Extension 
Mode
Mesh 
Power 
Saving 
Level
Receiver 
Service 
Period 
Initiation 
Octets: 1 1 1 0, 6, 12, 18
SCCM 
Enable
Reserved
B0        B1 B2 B3 B4 B6        B7
Tunnel
Enable
B5
 
Figure 6. The SCCM header information applied on the mesh header. 
destination
STA
Source 
STA
MBSS
(Mesh Network)
BSS1
BSS2
tunnel
frame
tunnel
frame
edge mSTA
(with SCCM)
(SCCM 
source mSTA)
core mSTA
(with SCCM)
core mSTA
(without SCCM)
core mSTA
(with SCCM)
edge mSTA
(with SCCM)
(SCCM 
destination mSTA)
 
Figure 7. The SCCM header information applied on the mesh header. 
mechanism in section III, The mSTA generates a random n-
checking bits. Then the chase frame will be denote as the last 
data frame which is set the network layer more flag bit as 0. If 
the mSTA receives it and find the error, it performs the same 
procedure as the previous does. Therefore, the useless data 
frames will be cleared in the mesh networks. 
II. ANALYSIS AND RESULT 
The performance of the proposed SCCM is investigated by 
the procedure described in section III. Due to the page limited, 
we only present that the bit error number range within 5 bits. 
The n-checking bits selecting more strategy and performance is 
also investigated. Besides, we adapt two kinds of data length to 
investigate the effect of the partial CRC error detection ability. 
In Fig. 8, we consider two different data length as the 
analysis sample. There are 4-byte and 48-byte size data. They 
both have the n-checking bits which are selected from the least 
significant bit and most significant bit of the CRC-32. The 
order c0, c1, c2… c30, c31 represents the n-checking bits to the 
CRC-32 position. The counting up checking bits order means 
that the n-checking bits are obtained from the least significant 
3419
國科會補助計畫衍生研發成果推廣資料表
日期:2013/01/31
國科會補助計畫
計畫名稱: 針對即時性多媒體串流探討在802.11無線網狀網路中使用部分CRC錯誤檢查碼
的方法、特性與效能
計畫主持人: 莊岳儒
計畫編號: 100-2221-E-030-014- 學門領域: 計算機網路與網際網路
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
