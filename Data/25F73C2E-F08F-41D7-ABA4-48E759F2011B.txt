 行院國家科學委員會專題研究計畫成果報告 
 
應用面向導向技術於調適性嵌入式即時作業系統開發之研究 
 
Applying Aspect-Oriented Techniques to Developing Adaptive 
Embedded Real-Time Operating System 
 
計畫編號：NSC 96－2221－E－006－056 
執行期限：96年 08月 01日至 97年 7月 31日 
計畫主持人：  陳 敬 國立成功大學電腦與通信工程研究所 
計畫參與人員：蘇惠明 成功大學電機工程研究所 
       周建甫 成功大學電腦與通信工程研究所 
       蔡侑宗 成功大學電腦與通信工程研究所 
       高自雋 成功大學電腦與通信工程研究所 
 
摘   要 
本研究計畫為三年期以「應用面向導向
技術於調適性嵌入式即時作業系統開發
之研究」為主題之研究計畫，主要內容
係 深 入 研 究 應 用 面 向 導 向 (Aspect-
Oriented，亦稱”方面導向”，簡稱AO)技
術於嵌入式即時作業系統之建構，並以
建構調適性嵌入式即時作業系統為目
標。嵌入式系統產品不斷地推陳出新且
功能日新月異，其多樣化之產品功能與
產品之創新價值大部份依賴其軟體具體
實現，而軟體之發展於應用層面之功能
需求是否可有效地實現，其發展環境之
各軟體工具與其執行環境之系統軟體扮
演非常重要之角色，作業系統則具有關
鍵性之地位。可調適性作業系統能以靜
態方式或動態方式，因應作業背景與需
求不同而調整作業系統之組成及能力。
靜態方式例如因應降低成本之目的，透
過調適工具，以重組作業系統元件，以
最精簡之元件組合，滿足產品功能；動
態方式例如在省電考量下，作業系統可
以自動調整系統資源之分配。嵌入式作
業系統與即時系統作業之軟體發展因此
不僅維持其重要性，彈性(Flexibility)、可
(重)組態性((Re-)Configurability)、調適性
(Adaptability)等亦成為發展特定應用導向
作業系統之重點方向。面向導向程式設
計(Aspect-Oriented Programming，亦稱為
方面導向程式設計)技術之基本概念為關
注分離(Separation of concerns)原則，並以
連接點模型(join point model)為基礎，以
織入(Weaving)為實現之技術。本研究計
畫擬以全程三年之期間，規劃進行三階
段之研究工作：第一階段以研究面向導
向技術與嵌入式即時作業系統相關議題
為主，針對嵌入式即時作業系統之調適
性特質及未來之挑戰嘗試以面向導向技
術克服；第二階段之重點則為研究以面
向導向技術設計嵌入式即時作業系統所
需要之可(重)組態性、調適性等構架，並
探討對於可預測性(Predictable)之要求等
衆多横切面關注點，交織成錯綜複雜之
設計議題；第三階段之主要工作則為以
面向導向技術設計出一具調適性之嵌入
式即時作業系統架構，並驗證其架構之
可行性。本報告為第一年期研究報告，
說明動態織入面向於作業系統之研究。 
關鍵詞：面向導向，方面導向，嵌入式
系統，嵌入式作業系統，即時作業系
統，物件導向。
 long analysis facilities. This approach requires the 
information of the microkernel infrastructure and the 
specific operating system.  
These implementations presented that dynamic 
weaving mechanisms were feasible at operating system 
level. But they are platform dependence and the 
mechanisms are so complicated. Maybe they are 
powerful for specific domains such as kernel profiling 
or debugging. But a lot of systems need only the 
abilities to dynamically changing the behaviors of the 
operating system without complicated mechanisms.  
We will propose a simple, lightweight framework of a 
dynamic weaving mechanism at operating system level 
in this paper. Any implementation at operating system 
level needs the information of the operating system. 
Although it can’t avoid discussing operating system 
infrastructures in this framework, we abstract it to 
platform dependency part and platform independency 
part. We express this framework in high level view. 
The problems to implementing a dynamic weaving at 
operating system level are how to make an aspect, how 
to weave an aspect into the based program, and how to 
redirect program execution flow to advice code while 
reaching a pointcut.  
We use a program with GUI interface to help the 
developer making an aspect. This framework supports 
pointcut types only for function execution type so far. 
The advice code including the AOP specific 
declarations like proceed( ) could be interpreted as a 
regular C program then be compiled as kernel modules 
by GCC toolchains.  
The way to insert a kernel module to operating 
system at runtime is platform specific. But most of the 
modern operating systems support this kind of 
mechanism. We can use the existing tool to do it as 
possible. Then we use a lightweight mechanism to 
redirect the program execution to the advice code when 
reaching the pointcut. 
 
3. Framework overview 
This framework explores the possibilities of dynamic 
weaving at operating system level. The design goal is 
to develop a lightweight dynamic weaving mechanism 
without modifying operating system source code.  So it 
can be applied to the existing operating systems 
without customizing them. The advice which could be 
interpreted to a regular C procedure is made as a 
loadable kernel module which could be inserted into 
kernel at runtime. The developer doesn’t have to learn 
a new language to make an advice nor a new tool to 
insert an advice. But it is need to use the standard 
syntax in the AOP domain to define the pointcut or the 
advice when making the aspect. 
As showing in Fig. 1, the framework contains three 
parts, the aspect maker, the aspect register and the 
aspect manager. The aspects could be managed by the 
aspect maker with GUI interface. The structure of an 
aspect contains two parts, the pointcut declaration part 
and the advice definition part. An aspect definition 
form like Fig. 2 composes by the aspect name, pointcut 
declarations and advice code. The pointcut declarations 
and advice code will be verified before they are saved. 
The advice code will be compiled as a loadable kernel 
module by the aspect maker. The aspect definition file 
will be saved in a text file. This definition file is the 
output of the aspect maker.  
The aspect register can get the pointcuts and advice 
by reading the aspect definition file. For reaching the 
target function at runtime, the aspect register also needs 
the symbol information to get the address of the target 
function. The information can be caught by reading 
symbol file. The symbol name and its address will be 
sent to the aspect manager. The advice will be inserted 
into the operating system then pointcuts will be 
registered by the aspect manager. The ways of inserting 
loadable kernel modules are so different for different 
operating system. The aspect register will encapsulate 
this insert module mechanism to provide a universal 
interface for all operating systems. 
The aspect manger is responsible for the 
management of aspects at runtime. A main data 
structure in the aspect manger is a linked list named the 
pointcut list keeping the pointcuts. A node of the 
pointcut list contains the function address of a pointcut 
and the advice list. The way of pointcut register is 
different for the first advice and the successive advices.  
The aspect manager hooks the first advice to the core 
functions by inserting a branch instruction like the call 
instruction. The successive advice is attached to the 
advice list without replacing the branch instruction in 
the core function. When a pointcut reaches, the 
program execution flow will jump to the aspect 
manager. The aspect manager gets the information of 
function address by reading the return address from the 
stack. The address is the key of the pointcut list which 
recorded the core function address and the attached 
advices. There are two special fields in an advice node, 
the advice type and the order for an advice node. The 
advice type will be tagged as before, after and around. 
Because the execution order might be ambiguous if 
different pointcut rules were applied to the same 
function, the advice list is implemented as a priority 
queue. The aspect manager calls advice by the order.  
The aspect can be inserted or removed dynamically. 
The developer can dynamically weave or remove 
 Step 6: Replacing the first instruction by branch 
instruction the core function for entering again 
next time.  
Step 7: Return to the calling function. 
 
The first instruction jumps to the aspect manager 
when the core function was called. The aspect manager 
saves the context. The first instruction will be 
recovered for preventing system corruption. The aspect 
manager scans the linked list table to find the before 
advice. After finishing the before advices, the aspect 
manager restores the context and calls the core function. 
Once the core function finishes, the weaving replaces 
the first instruction of the core function by the branch 
instruction again for enabling the pointcut.  
 
4.2. Weaving After Advices 
The flow of registering an after advice is the same with 
the before advice’s. The aspect manager replaces the 
first instruction of the core function by a branch 
instruction and remembers it while the first advice is 
attached. The next coming advice will be inserted into 
its advice queue by its priority. 
The flow of an after advice matching the pointcuts is 
in Fig 5. 
 
 
 
 : aspectMaker  : advice  : aspectManager  : coreFunc : aspectRegister
1 : parsePointcut()
2 : compileAdvice()
3 : createAdvice()
4 : insertAdvice()
5 : weaving()
6 : replaceBranch()
 
                 Figure 3. Weaving an advice  
                                           
Step 1: The calling function calls the core function with 
advices. 
Step 2: Jump to the aspect manager. 
Step 3: The aspect manager reads the return address of 
the stack to find the core function address and 
find the advice by searching the pointcut list. 
Step 4: The aspect manager recoveries the first 
instruction of the core function. 
Step 5: The aspect manager reads the return address of 
the stack to find the core function address and 
find the advice by searching the pointcut list. 
Step 6: The aspect manager calls the core function. 
Step 7: Return to the aspect manager. 
Step 8: The aspect manager calls the after advice. 
Step 9: After finishing the after advice, jump back to 
the calling function. 
 
 : callingFunc  : coreFunc  : aspectManager  : before
1 : call()
2 : jumpTo()
3 : recovery() 4 : findAdivce()
5 : call()
6 : return7 : call()
8 : return
9 : replaceBranch()
10 : return
 
Figure 4. before advice execution 
 
