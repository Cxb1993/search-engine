目的是使用pipeline技術將程式中經常執行的loop部
分產生pipeline，以增進程式執行的效能。其主要研
究 步 驟 如 下 ： (1) 設 計 與 實 做 非 同 步 Pipeline 
modules，如：Block Pipeline Module、Branch Pipeline 
Module及Pipeline Register。(2)分析高階語言結構，
如Java，並分析Pipeline Stage的種類與結構。(3)實做
一自動偵測Pipeline結構的演算法。(4)實作一自動生
成最佳化Pipeline結構的演算法。(5)驗證與評估自動
生成Pipeline結構的執行效能、耗電量及所增加的硬
體 成 本 。 最 後 再 利 用 國 科 會 計 畫 (NSC 
91-2213-E-036-002-)中實作完成的爪哇到硬體描述
語言的轉換工具，把經pipeline技術最佳化後的
HCG，進一步的轉換成硬體程式碼，最後再用
Quartus II來驗證。 
在之前的國科會(NSC 91-2213-E-036-002)計畫
中我們利用爪哇程式語言及網際網路技術[20 - 
22]，來發展一套為單晶片系統設計的電腦輔助電路
設計應用軟體(SOCAD: A Web-based CAD Tool for 
SOC Design)[18, 23]。這一套電腦輔助電路設計軟
體 ， 利 用 爪 哇 技 術 、 自 時 系 統 (Self-timed 
System)[13,23 - 26]和軟硬體整合設計技術[27]，使單
晶片系統設計，變的非常容易。 
就目前我們所知已經存在的ESL合成工具，針
對 SystemC 系 統 有 Prosilog compiler [10] 以 及 
SystemCrafter SC [11]，尚未支援自動偵測並建構出
有效率的管線化系統，因此我們所提出的方法特別
適合於目前Time-to-Market高效能的應用程式。 
 
三、研究目的 
 
本計劃中，我們計劃設計一個工具於自動偵測
並建構出有效率的管線化系統技術上（如圖一）。
目的是使用最少的硬體來達到整體系統效能的提
升。 
這個管線化工具包含：(1) Pipeline Detection(管
線化偵測工具)：目的在分析並紀錄兩運算式或判斷
式之間的管線危障(pipeline hazards 為 J.L. Hennessy 
and D.A. Patterson [5] 所定義的 data hazard、control 
hazard 與 structure hazard)，並針對這些危障做最佳化
產 生 管 線 化 EAD 。 (2) Self-timed Pipeline 
Generation(自時管線化產生工具)：是根據管線化偵
測工具所產生的管線化 EAD 圖轉成相對應的管線
化 HCG 圖。 
為了能在 SOCAD 工具中將管線化硬體元件圖
合成到硬體描述語言 VHDL code，我們也開發了相
對應的硬體的管線化模組，包含兩個控制路徑模
組：Stage Pipeline Module、Branch Pipeline Module，
與一個資料路徑模組：Double Register Module。有了
硬體元件圖與管線化模組，則可進一步的產生相對
應的硬體。 
 
 
圖一 本計畫實作內容 
 
四、文獻探討 
 
有許多成熟的電腦輔助設計工具已被廣泛的
應用，例如：SystemC [3,4]和 JHDL [28]，它們都增
加了能用一種語言同時描述軟體及硬體的功能，雖
然 SystemC 及 JHDL 能以 C/C++或是 Java 來達到軟
硬體共同設計及共同模擬，但卻需事先分辨軟硬
體，而且是以同步電路為基礎，並不適合用來設計
可重複使用的 IP。 
因此我們選擇以 Java 語言來描述系統並轉成
以 VHDL 的硬體描述語言所描述以非同步技術為基
礎的硬體電路。 
選擇 Java 語言來描述系統的原因是它具有下
列的優點： 
1. 將 一 個 可 以 正 常 執 行 的 爪 哇 程 式 輸 入 到 由
 2
資料傳入 stage B。c 發出控制訊號，使 R2 中的
B1 暫存器資料傳入 stage C。stage A、stage B 與
stage C 同時進行運算。stage A 運算完畢，將資料
傳入 R1，儲存 A1 暫存器，並發出儲存結束訊號
回 a。stage B 運算完畢，將資料傳入 R2，儲存於
B2 號暫存器，並發出儲存結束訊號回 b。stage C
運算完畢，將資料傳入下一級之暫存器，並發出
儲存結束訊號回 c。a 發出 acknowledge 訊號回前
一級，並同時發出 request 訊號給 b。b 發出
acknowledge 訊號回 a，並同時發出 request 訊號給
c。c 發出 acknowledge 訊號回 b，並同時發出 request
訊號給下一級。此時 stage A、stage B 與 stage C
可以開始新的運算。 
 
 
圖五 pipeline 運算步驟 3 
4. 重複步驟 1，直到沒有資料進入為止。 
本計畫針對管線化設計工具包含：(1) Pipeline 
Detection(管線化偵測工具)：目的在分析並紀錄兩運
算式或判斷式之間的管線危障(pipeline hazards 為
J.L. Hennessy and D.A. Patterson [5] 所定義的 data 
hazard 、 control hazard 與 structure hazard) 。 (2) 
Self-timed Pipeline Generation( 自 時 管 線 化 產 生 工
具)：是根據管線化偵測工具所產生的管線化 EAD
圖轉成相對應的管線化 HCG 圖。 
我們將以此兩個工具，搭配之前兩個國科會計
畫 （ NSC 89-2218-E-036-020- 、 NSC 
91-2213-E-036-002-）的成果，針對 FPGA 平台進行
有效率且自動化的管線化設計。圖六為此計畫軟硬
體共同設計之流程圖。 
 
 
圖六 管線化設計流程圖 
首先為了能在 SOCAD 工具中將管線化硬體元
件圖合成到硬體描述語言 VHDL code，我們也開發
了相對應的硬體的管線化模組，包含兩個控制路徑
模組：Stage Pipeline Module、Branch Pipeline Module，
與一個資料路徑模組：Double Register Module。 
 
Stage Pipeline Module (SPM) 是 一 個 Muller 
pipeline [19]，其中包含了一個 Muller C element 與
一個 inverter，如圖七(a)所示。SPM 的工作流程為：
初始時，透過 reqa 送到 SPM 的訊號會產生 req 的
訊號觸發此pipeline stage執行並會透過acka 送回一
個 acknowledge 訊號給前一級的 SPM。再來則重複
執行以下兩個步驟：A: 當相關的 pipeline stage 執
行完後會產生一個 ack 訊號到 SPM，SPM 收到後會
發出 reqb 的訊號通知後一級的 SPM 開始執行。B. 當
同 SPM 收到 reqa 與 ackb 兩個訊號後會產生 req
的訊號觸發此pipeline stage執行並會透過acka 送回
一個 acknowledge 訊號給前一級的 SPM。 
 
圖七 硬體管線化模組 
Branch Pipeline Module (BPM)是用來記錄條件
判 斷 的 結 果 ， 如 ： if, if-else, switch-case 或 
conditional loop statement，其實做如圖七(b)所示。
BPM 由下列完件所組成：(a)一個 XOR 收到不管是
reqa 或 reqb 都會發出一個 acknowledge 訊號。(b)
由兩個 XOR 和兩個 Muller C-elements 來保持條件
判斷的結果。其工作流程如下：不論前一級的任何
 4
DRM 解決，並將此產生 data hazard 的變數記錄在
doubleRegisterList 中。 
 
Table 1. Thread table of the loop body thread 
Node Id Statement Write set Read set
{5} i <= cnt {} {i, cnt} 
{6} i = i+ 1 {i} {i} 
{7} sum = sum + i {sum} {sum, i}  
 
Table 2. Merged thread table 
Node Id Statement Write set Read set
{5, 6} i <= cnt; i = i+ 1 {i} {i, cnt} 
{7} sum = sum + i {sum} {sum, i} 
 
Step 3.  Perform inter-thread analysis：反覆對 EAD
中有相同起始節點的 sibling threads 與有先後關係
的 predecessor-successor threads 執行合併的動作。
對於 sibling threads 的合併，對 sibling threads 間檢
查是否存在管線危障，而產生危障的節點則必須
合 併 再 同 一 個 pipeline stage 中 並 用
doubleRegisterList 紀錄，此合併過的 thread 則必須
再次經過 intra-thread analysis 的檢查，最後產生出
管線化 EAD。程式 Summation 的管線化 EAD 圖如
圖十一所示，圖中利用 stage separation node (圖中
之黑點)來區隔 pipeline stage。 
 
圖十一 summation 的管線化 EAD 圖 
II. Self-timed Pipeline Generation： 
管線化 EAD 圖中的每個 stage separation 
node 皆表示為一個 pipeline stage，Self-timed 
Pipeline Generation 會將管線化 EAD 圖轉換成管線化
硬體元件圖(Pipelined HCG)，其轉換包含下列兩步
驟： 
Step 1. Construct stage and decoder pipeline 
modules：對所有的 stage separation node n 產生一
個 SPM，如果 node n 有超過 1 個 in-degree 則將
node n 取代為 DPM；圖十二為由管線化 EAD 圖
(圖十一)轉換成為包含有 SPM 與 BPM 的 EAD 的
例子。 
 
圖十二  包含 stage pipeline 與 branch 
pipeline 的 EAD 圖 
Step 2. Generate pipelined hardware component 
graph：此步驟中包含兩個子步驟：A.對所有的
decoder node 與 operation node 直接透過前國
科會計畫的 SOCAD 轉換方法轉成 HCG 格式。B.
對所有被記錄在 doubleRegisterList 中的 register，
利用本計劃所開發的 DRM(圖中標示為 DRxN)取
代原本的 self-timed register(圖中標示為 RxN)；以
將圖十二的 EAD 圖轉換成如圖十三的管線化
HCG 圖為例，圖中在變數 i 上存在著一個 WAR 
data hazard，而此 data hazard 透過將原本的 RxN_i
取代成 DRxN_i 而獲得解決。 
 
圖十三  summation 的管線化 HCG 圖 
 
 6
