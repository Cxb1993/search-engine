  i
行政院國家科學委員會專題研究計畫期末精簡報告 
 
計畫名稱：瓶頸樹排比問題之研究 
計畫編號：NSC 96-2218-E-143-001-  執行期限：96 年 8 月 1 日 至 97 年 7 月 31 日 
主持人：陳彥宏 (Yen Hung Chen)    Email：yhchen@nttu.edu.tw 
 
一、中文摘要 
給定k個序列及一個樹狀結構T含k個樹葉(leaves)，每個樹葉一對一對應到這些給定的序列，
［樹排比(tree alignment)］是指派序列到樹中的所有內部節點。在這裡樹的邊的權重是指派
到此邊的兩個節點上的序列之距離， 兩序列的距離為編輯距離(edit distance)。［樹排比問
題］是尋找一種樹排比使得加總樹上邊的所有權重為最小。［瓶頸樹排比問題］是樹排比
問題的變形。它是去尋找一種樹排比使得樹上邊的最大權重要最小。。瓶頸樹排比問題可
以被應用在生物上的演化樹重建(evolutionary tree reconstruction)，在一群生物序列的集合中
找尋高保留子區域(conserved subregions)及多序列排比(multiple sequence alignment)。［舉起
樹排比(lifted tree alignment)］是一種樹排比使得指派到每個內部節點的序列要從此節點的
子節點的序列中選出。［瓶頸舉起樹排比問題(bottleneck lifted tree alignment)］是去尋找一
種舉起樹排比使得樹上邊的最大權重要最小。這個計畫中，我們成功的証明瓶頸樹排比問
題為NP-complete，並給予一個2(h−1)-近似演算法，h為樹的高度，同時證明此bound為tight。
我們也設計一個正確的演算法來解決瓶頸舉起樹排比問題的問題，時間複雜度為O(k2(n + 
l2))，l是在k個序列中擁有最大長度序列其長度，n是樹T的節點個數。最後我們證明了樹上
邊滿足ultrametric公制標準時，一個舉起樹排比是一個瓶頸樹排比問題的最佳解。 
 
關鍵詞：計算生物; 近似演算法; 編輯距離; metric; ultramtric; 瓶頸樹排比問題; 多序列排比 
 
Abstract 
Given a set W of k sequences and a tree structure T with k leaves, each of which is labeled with 
a unique sequence in W, a tree alignment is to label with a sequence to each internal node of T. 
The weight of an edge of the tree alignment is the distance, such as Hamming distance, 
Levenshtein (edit) distance or reversal distance, between the two sequences labeled to the two 
ends of the edge. The bottleneck tree alignment problem is to find a tree alignment such that the 
weight of the largest edge is minimized. A lifted tree alignment is a tree alignment, where each 
internal node v is labeled one of the sequences that was labeled to the children of v. The 
bottleneck lifted tree alignment problem is to find a lifted tree alignment such that the weight of 
the largest edge is minimized. In this project, we show that the bottleneck tree alignment problem 
is NP-complete even when the tree structure is the binary tree and the weight function is metric. 
For special cases, we present an exact algorithm to solve the bottleneck lifted tree alignment 
problem in polynomial time. A 2(h−1)-approximation algorithm for the bottleneck tree alignment 
problem and the bound is tight when the weight function is metric, where h is the height of tree T. 
Finally, if the weight function is ultrametric, we show that any lifted tree alignment is an optimal 
solution for the bottleneck tree alignment problem. 
Keywords: computational biology; NP-complete; approximation algorithms; edit distance; 
metric; ultrametric; bottleneck tree alignment; multiple sequence alignment
  2
distance of the two sequences u and v can be computed in O(|u|* |v|) time via dynamic 
programming [21, 28], where |u| and |v| are lengths of u and v. The ultrametric [5, 10, 22, 30] is 
the metric and satisfies the following condition: for any three sequences x, y, and z, max{d(x, y), 
d(y, z)} ≥ d(x, z). A phylogenetic (or evolutionary) tree is called ultrametric if the distances from 
the root to all the leaves of the tree are equal. The ultrametric tree problem [30] is a distance 
strategy for reconstructing phylogenetic (or evolutionary) tree which satisfies ultrametric. One of 
the purposes of the bottleneck tree alignment problem is to reconstruct the evolutionary tree in 
biology. Many biologists interest how to systematically reconstruct the evolutionary tree of the 
extinct species from present-day species. We discuss how to relate the bottleneck tree alignment 
problem with the phylogenetic (or evolutionary) tree reconstruction in biology as follows. 
Evolutionary history is often represented by a phylogenetic (or evolutionary) tree. One of the 
purposes to reconstruct the evolutionary tree is that biologists can classify the species of 
nowadays. The present-day species are usually represented at the leaves of the tree and their 
unknown extinct ancestral species are represented at internal nodes of the tree. The weight 
(distance) of an edge of the tree is represented at the evolutionary time or some distance functions 
between the two species (or DNA sequences) labeled to the two ends of the edge. The tree 
structure is given from inference in a phylogeny reconstruction experiment or previous known 
data. The tree structure can be rooted or unrooted. A phylogenetic tree is a rooted evolutionary 
tree which depicts the branching pattern in the evolution of present-day species from their 
common ancestor. Given biological sequences of species, one can try to reconstruct the 
phylogenetic tree for these species by looking at the amount of evolutionary change that has 
occurred at the molecular level and estimating the times at which any two of these species 
diverged. The objective function of phylogenetic tree reconstruction depends on the distance 
function. One of the objective functions is to find an evolutionary tree such that the sum of the 
distances of all edges of the tree is minimized. The reason is according to the principle of 
parsimony [4, 9, 17]. That is, to assume the species always have the ability to find a minimum 
evolution pathway in the nature world. Hence, this evolutionary tree reconstruction problem can 
be modeled as the tree alignment problem. Another common-use objective function is the 
bottleneck (min-max) version. It can be modeled as the bottleneck tree alignment problem easily. 
A possible application of the bottleneck tree alignment problem is the average evolutionary time 
in the evolutionary tree reconstructions. The BTAP is the evolutionary tree optimizing the worst 
average evolutionary time. Other models of evolutionary trees and complexities of their 
reconstructions can be found in [15, 29]. 
Given a set of sequences, a multiple sequence alignment [6, 10, 14, 16, 22, 24] is to align the 
set of sequences such that the length of resulting sequences are equal. Now, we show how to 
relate the bottleneck and (bottleneck lifted) tree alignment problems with multiple sequence 
alignment. We illustrate by an example. According to the maximum parsimony principle [21, 23], 
such a multiple sequence alignment is believed to expose evolutionarily significant relationships 
among the sequences [6, 8, 10, 14, 16, 22, 24].  
 
  4
Example: consider the following instance shown in Figure 1a, in which the tree structure has 
four leaves, each of which is labeled with these four sequences {ACTT, GTT, ACT, ACG}. 
Suppose that all internal nodes are labeled as in Figure 1b which is an optimal solution for the 
BLTAP and the internal nodes are labeled as in Figure 1c which is an optimal solution for the 
BTAP. The weight of edge is defined the edit distance between the two sequences labeled to the 
two ends of the edge. For example: d(GTT,ACTT) = 2 and d(AGTT,ACTT) = 1. In this case, the 
weight of optimal solution for the BTAP is one and the BLTAP is two. For each edge of the tree 
in Figure 1b (respectively, in Figure 1c), we can construct six pairwise alignments of the two 
sequences labeled with the edge as in Figure 1d (respectively, in Figure 1f). Then we can induce 
a multiple sequence alignment that is consistent with six pairwise alignments by merging the 
pairwise alignments incrementally as in Figure 1e (respectively, in Figure 1g) [3, 8]. 
The rest of this project is organized as follows. In section 2, we show that the BTAP is 
NP-complete even when the tree structure is the binary tree and the weight function is metric. In 
section 3, we give an O(k2(n + l2))-time algorithm to optimally solve the BLTAP, where l is and 
the maximum length of sequences in W and n is number of nodes in T. We also present a 2(h − 
1)-approximation algorithm for the BTAP by a lifted tree alignment and the bound is tight when 
the weight function is metric, where h is the height of tree T. In section 4, we show that any lifted 
tree alignment is an optimal solution of the BTAP when the weight function is ultrametric.  
 
2 The Bottleneck Tree Alignment Problem is NP-complete 
 
In this section, the distance function of two sequences is the edit distance which is metric. 
Lemma 1: [12] Given two sequences u and v; if |u| ≥ |v| then d(u, v) ≥ |u| − |v|. 
Lemma 2: [12] Given two sequences u and v; if u and v have no symbol in common then d(u,v) = 
max(|u|,|v|). 
A sequence is a string over some alphabet Σ and the set of all finite-length sequences of symbols 
from Σ is denote by Σ*. Now, we define the decision version of the BTAP as follows. 
 
Bottleneck Tree Alignment Problem With Decision Version 
Instance: A positive integer m, a set W of k distinct sequences {w1, w2, . . ., wk} over an alphabet 
Σ and a tree structure T with k leaves, each of which is labeled with a unique sequence in W. 
Question: Does there exist sequences in Σ* which are labeled to all internal nodes of T such that 
the weight of the largest edge in T is less than or equal to m, where the weight of an edge is the 
(edit) distance between the two sequences labeled to the two ends of the edge? 
Given a finite set S of k distinct sequences over an alphabet Σ, the longest common 
subsequence problem [7] is to find a longest length sequence s such that s is a subsequence of 
each sequence in S. Higuera and Casacuberta [12] defined the subcase problem of longest 
common subsequence problem, called as the longest common subsequence0 (LCS0) problem. 
Given a positive integer m and a finite set S of k distinct sequences over an alphabet Σ0, in which 
the length of each sequence in S is 2m, the LCS0 problem is to find a common subsequence s of 
  6
odd (respectively, even). Moreover, ti = s, for 1 ≤ i ≤ k. Therefore, s must be a common 
subsequence of each sequence in S and the length of s is m. 
 
3 The Bottleneck Lifted Tree Alignment Problem 
 
In this section, first, we present an exact algorithm for solving the BLTAP via the standard 
technique of dynamic programming. The distance function of two sequences also uses the edit 
distance. Then we show a 2(h − 1)-approximation algorithm for the BTAP by any lifted tree 
alignment when the weight function is metric, where h is the height of tree. Throughout this 
section, we use Horowitz et al.’s definition: the level of a node is defined by letting the root be at 
level one. If a node is at level j, then its children are level j +1. The height of a tree is defined to 
be maximum level of any node in the tree [13]. Note that the degree of a node is the number of 
subtrees of the node and we permit the internal nodes of degree one in the tree T for the BTAP 
and BLTAP. For the TAP, we have no internal nodes of degree one. From now on, we let the tree 
T rooted at r and a set of sequences W = {w1, w2, . . ., wk} (i.e., labeling sequences of the leaves of 
T) be the instance of the BLTAP. Then let Lj denote the nodes set such that every node in Lj has 
the same level j in T. Hence, L1 contains only root r. For a node u in T, we use Tu to denote the 
subtree of T rooted at u and des(u) to denote a set of sequences which contains all labeling 
sequences of leaves in Tu. We also let the nodes set chi(u) denote the children of u in Tu. For each 
node u and wi ∈ W, we use B[u,wi] to denote minimum weight among the largest edges of all 
possible lifted tree alignments of Tu such that u is labeled by the sequence wi. For convenience, 
we let the node vα be one of the children of u such that the sequence wi belongs to des(vα). For 
each internal node u ∈ Lj, 1 ≤ j < h, if we have all B[v,wt] for each node v∈ chi(u) and wt ∈ des(v), 
then B[u,wi] can be computed as follow: 
B[u,wi] = max{B[vα, wi], max v∈chi(u) and v≠vα{ min wt∈des(v){max(d(wi, wt), B[v,wt])}}}.        (1) 
It is clear that the weight of the largest edge for an optimal solution of BLTAP is min{B[r, wi]   
| wi ∈ W}. For a node u and wi ∈ des(u), B[u,wi] will be processed after all B[v,w] have been 
processed for each node v ∈ chi(u) and w ∈ des(v). Hence, for each wi ∈ W, B[r, wi] can be 
evaluated by the iterative above process from the bottom-up (from leaves level to root). Once the 
weight of the largest edge for the optimal solution is known (i.e., min{B[r,wi]|wi ∈ W}), it is not 
hard to find an optimal solution via backtracking. For technical reason, for each leaf v, we let 
B[v,wi] be zero if the sequence wi is the labeling sequence of v. For clarification, we list the exact 
algorithm for the BLTAP as follows. 
 
Algorithm Exact-BLTAP 
Input: A tree T rooted at r with k leaves, each of which is labeled by k distinct sequences W = 
{w1, w2, . . ., wk}. 
Output: A lifted tree alignment of T. 
1. For each pair of sequences (wa, wb) ∈ W, compute the d(wa, wb) by [21, 28]. 
2. For each leaf u and the sequence w is a labeling sequence of u, let B[u,w] = 0. 
  8
 
In the remaining paragraphs of this section, we show that the BTAP can be approximated 
with ratio 2(h − 1) by a lifted tree alignment, where h is the height of tree. 
 
Theorem 5: Any lifted tree alignment is a 2(h − 1)-approximation solution of the BTAP when 
the weight function is metric, where h is the height of tree T, and the bound is tight. 
 
Proof: Let To be an optimal solution of the BTAP and D(To) be the weight of the largest edge of 
To. Because a weight of an edge of a lifted tree alignment only corresponds to a distance of two 
input sequences, for any pair of sequences {wi, wj} ∈ W, we show d(wi, wj) is less than or equal to 
2(h−1)*D(To). Now, we let vi be labeled by a sequence wi and vj be labeled by a sequence wj, in 
which vi and vj are the leaves of tree T. Because there is only one path from vi to vj in T, we let 
these sequences(wi, wi1, wi2, . . ., wip, wj) be labeled to the path (vi, vi1, vi2, . . ., vip, vj) of To. By 
triangle inequality, we have the following inequalities. 
d(wi, wj) ≤ {d(wi, wip) + d(wip, wj)},  
d(wi, wip) ≤ {d(wi, wi(p-1)) + d(wi(p-1), wip)}, 
... 
, d(wi, wi2) ≤ {d(wi, wi1) + d(wi1, wi2)}  
and hence d(wi, wj) ≤ {d(wi, wi1) + d(wi1, wi2) +… + d(wi(p-1), wip) + d(wip, wj)} ≤ 2(h − 1) * D(To), 
because D(To) is the weight of the largest edge of To. Clearly, the weight of the largest edge of 
any lifted tree alignment is one of {d(wi, wj)|(wi, wj) ∈ W}, therefore the obtained solution is a 2(h 
− 1)-approximation solution of the BTAP. To show the tightness of the bound, consider the 
following instance shown in Figure 3a, in which w1, w2 ...,w6 are the input sequences, and w1 and 
w4 have no symbol in common. Figure 3b is an optimal solution for the BTAP, in which the the 
weight of the each edge is one. Figure 3c is the a lifted tree alignment. It is also an optimal 
solution for the BLTAP. The weight of the largest edge is ten by lemma 2 and theorem 4. 
Because the height of tree is six, the approximation ratio is equal to 2(h − 1). 
 
4 The Score is Ultrametric 
 
In this section, we show any lifted tree alignment is an optimal solution of the BTAP when 
the weight function d is ultrametric. Let the tree T and a set of sequences W ={w1, w2, . . ., wk} 
(i.e., labeling sequences of the leaves of T) be the instance of the BTAP. 
Theorem 6: When the weight function is ultrametric, any lifted tree alignment is an optimal 
solution for the BTAP. 
Proof: Let To denote an optimal solution of the BTAP and D(To) denote the weight of the largest 
edge of To. For any pair of sequences {wi, wj} ∈ W, we show d(wi, wj) is less than or equal to 
D(To) when the weight function d is ultrametric. We let vi be labeled by a sequence wi and vj be 
labeled by a sequence wj, in which vi and vj are the leaves of T. For a path (vi, vi1, vi2, . . . , vip, vj) 
in To, we also let these sequences (wi, wi1, wi2, . . ., wip, wj) be labeled to these nodes of path. 
  10
Communications of the ACM 34 (1991) 32–39. 
[17] C.L. Lu, C.Y. Tang, R.C.T. Lee, The full Steiner tree problem, Theoretical Computer 
Science 306 (2003) 55–67. 
[18] P.A. Pevzner, Computational Molecular Biology: An Algorithmic Approach, The MIT Press, 
Cambridge, MA, 2000. 
[19] R. Ravi, J. Kececioglu, Approximation algorithms for multiple sequence alignment under a 
fixed evolutionary tree, Discrete Applied Mathematics 88 (1998) 355–366. 
[20] D. Sankoff, Minimal mutation trees of sequences, SIAM Journal on Applied Mathematics 28 
(1975) 35–42. 
[21] D. Sankoff and J. Kruskal, Time warps, string edits, and macromolecules: the theory and 
practice of sequence comparison, Addison-Wesley Reading, MA, 1983. 
[22] J. Setubal, J. Meidanis, Introduction to computational molecular biology, PWS Publishing 
Company, 1997. 
[23] D. Swofford, G. Olson, Phylogenetic reconstruction, in Molecular Systemtics, In: D.Hillis 
and C. Moritz(Eds.), Sinauer Associates, Sunderland, MA, 1990. 
[24] L. Wang, T. Jiang, On the complexity of multiple sequence alignment, Journal of 
Computational Biology 1 (1994) 337–348. 
[25] L. Wang, T. Jiang, E.L. Lawler, Approximation algorithms for tree alignment with a given 
phylogeny, Algorithmica 16 (1996) 302–315. 
[26] L. Wang, D. Gusfield, Improved approximation algorithms for tree alignment, Journal of 
Algorithm 25 (1997) 255–273. 
[27] L. Wang, T. Jiang, D. Gusfield, A more efficient approximation scheme for tree alignment, 
SIAM Journal on Computing 30 (2000) 283–299. 
[28] R. Wagner, M. Fisher, The string-to-string correction problem, Journal of the ACM 21 (1974) 
168–178. 
[29] H.T. Wareham, On the computational complexity of inferring evolutionary trees, Technical 
Report 93-01, Department of Computer Science, Memorial University of Newfoundland, 1993. 
[30] B.Y. Wu, K.M. Chao, C.Y. Tang, Approximation and exact algorithms for constructing 
minimum ultrametric trees from distance matrices, Journal of Combinatorial Optimization 3 
(1999) 199–211. 
 
四、計畫成果自評 
 
In this project, we have shown the BTAP is NP-complete even when the tree structure is the 
binary tree and the weight function is metric. Then we solve this problem in two special cases:  
(1) we present an exact algorithm to solve the bottleneck lifted tree alignment problem in 
polynomial time. (2) we show that any lifted tree alignment is an optimal solution for the 
bottleneck tree alignment problem when the weight function is ultrametric. We also give a 2(h − 
1)−approximation algorithm for the BTAP. The research result had been submitted in the 
Information Sciences whose SCI impact factor is now 2.147. 
