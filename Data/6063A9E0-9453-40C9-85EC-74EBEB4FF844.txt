2界中隨處可見，例如具有離散變數的最佳
化電力潮流問題就是電力工程界研究人員
所熟悉的一個最佳化問題，而隨機模擬最
佳化問題更是在離散事件動態系統中俯拾
即是的問題。隨機模擬最佳化問題可以視
為一個模擬系統操作的最佳化問題，其系
統的輸出可以透過模擬方式來評估，不論
是透過虛擬系統的驗證模擬或只是透過電
腦程式進行的模擬。因此，隨機模擬最佳
化問題的目標是要找出在設定模擬系統時
所需的決定變數(或稱為樣本解)最佳設定
值，使得輸出變數能夠達到最好或最佳的
狀況。針對解決此類問題已經發展出很多
方法，例如梯度搜尋(Gradient Search)為基
礎 的 方 法 ， 隨 機 近 似 (Stochastic
Approximation)方法、試樣路徑(Sample path)
法,反應曲面(Response Surface)法，以及啟
發式(Heuristic)方法等。其中，啟發式方法
包括基因演算法(Genetic Algorithm, GA)，
模擬退火法(Simulated Annealing, SA)與禁
制搜尋法(Tabu Search, TS)等，為近來較常
使用於解決隨機模擬最佳化問題的方法。
上述啟發式方法除了些許成功的應用
之外，在其他方面的應用上遭遇了許多技
術上的困難與障礙。在這些當中最需要克
服的就是尋找出最佳解索所需花費的計算
時間，因為當決定變數(樣本解)的搜尋空
間是巨大時，對於給定的決定變數需透過
模擬方式來評估其輸出性能，如欲搜尋到
最好的決定變數確實需要耗費冗長的計算
時間。同時，模擬的過程當中經常面對的
是瞬息萬變的特性也是屬於整個問題的一
部分。因此，模擬過程中只要環境瞬息萬
變的特性一直存在著，便會使隨機模擬最
佳化問題顯的錯綜複雜。如何迅速有效地
來解決這個富有挑戰性的問題，即是我們
研究的主題。
二、研究目的
為了克服這類問題的計算複雜度，序
的最佳化(Ordinal Optimization, OO)理論為
基礎的目標軟化搜尋方法已被提出
[1]-[3]，可以迅速有效地找出一組具有高可
靠性且足夠好的解，來取代傳統搜尋方法
須耗費大量計算時間才能求得最佳的解。
序的最佳化理論為基礎的目標軟化搜尋方
法主要觀念，在於逐次減少決定變數的搜
尋空間大小，在有限的計算時間內獲得足
夠好的解。不同於那些以全域搜尋技術來
解決困難最佳化問題的方法，序的最佳化
方法提出了一個可迅速地求得 top n% 解
的方法，且與一般的啟發式方法不一樣的
地方在於可以提供定量結果的效能分析。
整個序的最佳化方法其演算法步驟理論基
礎是建立在 Universal Alignment Probability
[2]這篇文章上，它提供了如何評量所提出
的粗略模型的概略性以及如何選取
Selected subset 樣本解的作法，這在解決實
際應用的問題中非常地有用，有了這篇文
章的基本概念後，對實際應用問題採用序
的最佳化方法進行推導可說是事半功倍。
由於目前序的最佳化方法仍有一些可
以改進的地方，例如：(1)所謂 top 5% 的解
在具有龐大樣本解空間的問題中，所求得
的解在實際最佳化技巧運用者的眼光中稱
不上是很好的解。(2)它還不能解決具有限
制式條件的困難隨機模擬最佳化問題，尤
其是具有不等式限制式條件的問題。所以
這個研究計劃的研究目的，主要是要克服
序的最佳化方法的這兩項缺點做更進一步
的改進，以序的最佳化方法為基礎提出一
個可解決具有限制式條件的隨機模擬最佳
化問題的方法，同時將我們提出的方法運
用於隨機工作生產排程最佳化問題。
三、文獻探討
排程主要功能是提供工廠內製造系統
在考量加工時間與交貨時間等因素下，安
排未來工作的生產順序，使全工廠的工作
負荷平衡，以增加產出與降低成本。工作
生產(job shop)是屬於少量多樣(High-mix
low-volume)的生產模式，不同的生產或操
作程序必須執行以完成一件工作。而等待
完成的這些工作皆須依照各自排定的先後
操作限制條件，在儘早完成所有工作的情
況下得到一個生產順序，便是工作生產排
4統裡包含了n個工作 iJ ， ni1 ，以及m
台機器 jM ， mj1 。 iK 表示執行工作 iJ
所需的操作數目，而工作 iJ 的第 k 個操作
以 kiO , 表示， iKk 1 。操作 kiO , 所需的加
工時間為 kip , ，為一隨機變數具有期望值
kip , 與變異數 kiv , 。每個工作 iJ 的交貨日期
id 為事先給定。每個工作指定了一連串的
操作加工程序，對機器 jM 而言，同一時間
只能有一個工作進行加工，同一時間也只
有一台機器可以對工作 iJ 進行加工。當一
個或多個工作已準備好在某一台機器進行
加工時，若那台機器為空閒狀態，則一個
工作會被挑選且立刻送至那台機器。
在排程解 S 的表示方法上有很多種，
其 中 的 交 叉 排 列 表 示 法 (permutation
representation)可以一維空間形式來表示，
適合運用於基因演算法中的基因編碼，因
此挑選作為我們的方法裡面排程解 S 的表
示方法，圖 1 所示為一個具有n個工作的
排程解 S 表示方法，共包含

n
i
iK
1
個操作。
針對工作 iJ 在機器 jM 上所需的加工時間
不可能為負值，因此考慮三種不同機率分
佈的隨機變數。第一種機率分佈為截尾常
態分布其平均值為 kip , 而變異數為 kiv , ，第
二 種 機 率 分 佈 為 均 勻 分 布 在 範 圍
[ kiki vp ,, 3 , kiki vp ,, 3 ]，第三種機率分
佈為指數分布其平均值為 kip , 。
},,,,,,,,,,,,{ ,2,1,,22,21,2,12,11,1 21 nKnnnKK OOOOOOOOOS 
1J 2J nJ
圖 1 排程解 S 的表示方法
由於每個工作在機器上的加工時間為
隨機變動，工作的完成時間不能確知，因
此各個工作到達機器的時間便無法事先決
定。雖然透過最佳化方法無法得到數學解
析的解，但是可以利用模擬的方法，在可
接受的計算時間範圍內得到一個足夠好的
解。欲尋找的最佳排程解必須滿足操作程
序限制(precedence constraint)，同時要使某
個特定性能準則(例如延遲時間、總完工時
間、實耗時間等)達到最佳化。然而，在有
限的時間內並沒有辦法來評估所有的解，
因此就發展出來一些啟發式的演算法在製
造過程找出合適的排程解。我們考慮的性
能準則為使每個工作的平均延遲花費與庫
存花費達到最小，在有限的計算時間內從
決定向量空間裡找出合適的排程解 S 。
可以將這個問題描述為隨機模擬最佳化問
題，如以下所示





 

ii
n
i
iiS
ATE 
1
min (1)
subject to
1,,  kiki OO , SO ki  , , ni1 , 11  iKk . (2)
其中 1,,  kiki OO 表示 kiO , 是在 1, kiO 之前
操 作 以 滿 足 操 作 優 先 限 制 ，
)0,max( iii dCT  為 iJ 的 延 遲 時 間
(tardiness)， )0,max( iii CdA  為 iJ 的庫存
時間(earliness)， iC 為 iJ 的完成時間， id 為
iJ 的交貨日期， i為 iJ 的單位時間延遲成
本， i為 iJ 的單位時間庫存成本，因此 iiT
為 iJ 的操作成本， Ai 為 iJ 的庫存成本，
AT iii   為 iJ 的操作與庫存成本總合，





 

ii
n
i
ii ATE 
1
為操作與庫存成本總合
的期望值。單位時間延遲成本與庫存成本
可依照不同的工作訂定不同的值，通常將
單位時間延遲成本訂定較大的值，而將單
位時間庫存成本訂定較小的值。 S 為決定
向量，指定了每一個機器的操作順序，為
決定向量搜尋空間。
很顯然地，最佳化問題(1)是個具有很
大的離散決定向量空間的隨機模擬最佳
化問題，若要計算每一個決定向量的真正
目標函數值，需要執行足夠多次數的模擬
程序，才能使目標函數值趨於穩定。然而
這樣太耗費時間，顯的不切實際。因此可
透過模擬次數的多寡，將原本(1)式修改如
下

  




 
L
l
n
i
l
ii
l
iiS
SAST
L
SF
1 1
)]()([
1
)(min  (3)
6好的解之良好品質，使我們的方法確實可
以達到即時的應用。
這個計畫共執行了一年，我們已獲致
七篇國際會議論文與一篇國內會議論文的
成果。國際會議論文第一篇是“Application
of ordinal optimization to stochastic classical
job shop scheduling problem”發表於 2009
年 11 月 20-22 日在中國大陸上海召開的
IEEE 智慧計算與智慧系統國際研討會
[18]，如附件一。第二篇是“Application of
particle swarm optimization to cyclic service
systems”發表於 2009 年 11 月 27-29 日在
台北召開的自動控制國際研討會[19]。第三
篇 是 “Fuzzy clustering decision tree for
classifying working wafers of ion implanter”
發表於 2009 年 12 月 8-11 日在香港召開的
IEEE 工業工程與工程管理國際研討會
[20] ，並榮獲最佳論文獎。第四篇是
“Optimization of G/G/1/K cyclic service
system with k-limited discipline”發表於
2010 年 3 月 5-7 日在台南召開的電腦、通
訊、控制與自動化國際研討會[21]。第五篇
是“Apply genetic algorithm to minimize the
overkills in wafer probe testing”發表於
2010 年 6 月 15-17 日在台中召開的 IEEE
工業電子與應用國際研討會[22]。第六篇是
“Compensating the overlay modeling errors
in lithography process of wafer stepper”發
表於 2010 年 6 月 15-17 日在台中召開的
IEEE 工業電子與應用國際研討會[23]。第
七篇是 “序的最佳化於隨機工程生產排程
問題之應用”發表於 2010 年 4 月 23-24 日
在台中朝陽科技大學召開的2010年資訊科
技國際研討會[24]。至於國內會議論文是
“序優化於太陽能電池工作生產排程問題
之應用”發表於 2009 年 11 月 26 日在台北
聖約翰科技大學召開的2009先進電能技術
研討會暨成果發表會[25]。同時，我們也在
文章中註明此研究成果係本國科會計畫所
贊助，並將計劃編號明列其上。
六、參考文獻
[1] Z. Shen, Y.C. Ho, and Q.C. Zhao, Ordinal
optimization and quantification of
heuristic designs. Discrete Event Dynamic
Systems: Theory and Applications,
19(3):317-345 (2009).
[2] Y.C. Ho, An explanation of ordinal
optimization: Soft computing for hard
problems. Information Sciences,
113(3-4):169-192 (1999).
[3] Y.C. Ho, Q.C. Zhao, and Q.S. Jia, Ordinal
optimization: Soft optimization for hard
problems. New York: Springer-Verlag,
2007.
[4] T.C. Lai , Y.N. Sotskov, N. Sotskova, and
F. Werner, Mean flow time minimization
with given bounds of processing times.
European Journal of Operational
Research, 159:558-573 (2004).
[5] M. Pinedo, Stochastic scheduling with
release dates and due dates. Operations
Research, 31:559-572 (1983).
[6] R.R. Weber, P. Varaiya, and J. Walrand,
Scheduling jobs with stochastically
ordered processing times on parallel
machines to minimize expected flowtime.
Journal of Applied Probability,
23:841-847 (1986).
[7] D.G. Ginzburg, Sh. Kesler, and Z.
Landsman, Industrial job-shop
scheduling with random operations and
different priorities. International Journal
of Production Economics,40:185-195
(1995).
[8] S.R. Lawrence, and E.C. Sewell,
Heuristic, optimal, static, and dynamic
schedules when processing times are
uncertain. Journal of Operations
Management, 15:71–82 (1997).
[9] D.G. Ginzburg, and A. Gonik, Optimal
job-shop scheduling with random
operations and cost objectives.
International Journal of Production
Economics, 76:147-157 (2002).
[10] Y. Yoshitomi, A genetic algorithm
approach to solving stochastic job-shop
scheduling problems. International
Transaction in Operational Research,
9(4):479-495 (2002).
[11] Y. Yoshitomi, and R. Yamaguchi, A
genetic algorithm and the Monte Carlo
method for stochastic job-shop
scheduling. International Transaction in
Application of Ordinal Optimization to Stochastic
Classical Job Shop Scheduling Problem
Shih-Cheng Horng
Department of Computer Science & Information
Engineering, Chaoyang University of Technology
Taichung, Taiwan, R.O.C.
e-mail: schong@cyut.edu.tw
Guan-Ling Man
Department of Computer Science & Information
Engineering, Chaoyang University of Technology
Taichung, Taiwan, R.O.C.
e-mail: s9727627@cyut.edu.tw
Abstract— In this paper, an ordinal optimization based approach
is proposed to solve for a good enough schedule that minimizes
expected sum of storage expenses and tardiness penalties of
stochastic classical job shop scheduling problem using limited
computation time. The proposed approach consists of exploration
and exploitation stage. The exploration stage uses a genetic
algorithm to select a good candidate solution set, where the
objective function is evaluated with an artificial neural network
that is trained beforehand. The exploitation stage composes of
multiple substages, which allocate the computing resource and
budget by iteratively and adaptively selecting the candidate
solutions. At each substage, remaining solutions are simulated
and some of them are eliminated, and the solution obtained in the
last substage is the good enough schedule that we seek. The
proposed approach is applied to a SCJSSP with random
processing time in truncated normal, uniform, and exponential
distributions. The test results demonstrated that the obtaining
good enough schedule is successful in the aspects of solution
quality and computational efficiency.
Keywords: Stochastic classical job shop scheduling; Ordinal
optimization; Artificial neural network; Genetic algorithm.
I. INTRODUCTION
Scheduling plays a critical role in manufacture management,
which makes the manufacture system operates orderly and
digging out its potential capacity. Scheduling problem is the
allocation of resources to perform a set of activities in a period
of time. Classical job shop scheduling problem (CJSSP) is one
of the most typical and complicated problems. The aim of
CJSSP is to find sequences for processing the jobs on each of
the machines which are best orders to with respect to the given
objectives and criterions. CJSSP can be classified into two
types according to manufacturing environment, the
deterministic CJSSP (DCJSSP) and the stochastic CJSSP
(SCJSSP). In DCJSSP, one often assumes all processing times
are fixed and known in advance. SCJSSP assumes the
processing times of all jobs fluctuate stochastically [1].
Most of the scheduling problems for job shop are the
stochastic scheduling ones in real manufacture system.
SCJSSP is a NP-Hard problem, which reflects the real-world
situations and tends to suffer from its uncertain feature.
Research about scheduling problems focusing on random
process time is one of the newest issues that have been
interested recently with regard to the need of flexible
manufacturing systems. Analytical techniques can only be
applied to specific cases in job shop scheduling problems with
random process time [2]. To overcome the drawback of
consuming much computation time for complex scheduling
problems, an ordinal optimization [3]-[4] based approach is
proposed to find a good enough feasible schedule within a
reasonable amount of time. The key idea is to narrow the
search space through iterative use of ordinal optimization. The
SCJSSP is formulated as a stochastic simulation optimization
problem that possesses a huge search space and is most
suitable for demonstrating the validity of the proposed
approach. Since the use of both earliness and tardiness
penalties gives rise to a nonregular performance measure,
storage expenses of earliness and tardiness penalties will be
served as the objective function of our optimization problem.
Thus, the purpose of this paper is to determine a good enough
schedule that minimizes expected sum of storage expenses and
tardiness penalties using limited computation time.
The rest of this paper is organized as follows. In Section II,
we will present a mathematical formulation of the SCJSSP. In
Section III, we will illustrate the proposed ordinal optimization
based approach for finding a good enough schedule from the
search space  . In Section IV, the proposed approach is
applied to a SCJSSP with random process time in truncated
normal, uniform, and exponential distributions. Finally, we will
make conclusions in Section V.
II. PROBLEM FORMULATION
A. Stochastic Classical Job Shop Scheduling Problem
A set of n jobs is given, denoted as iJ , ni1 , each
comprising of an ordered series of precedence-constrained
operations. A set of m machines is given, denoted as jM ,
mj1 . The k th operation of job iJ is denoted as kiO , ,
and the corresponding machine assignment of kiO , is denoted
by kia , , which is given in advance. The process time of kiO , is
denoted by kip , , which is a random variable following a given
probability distribution function with expected value kip , and
variance 2
,ki . For the sake of simplicity in expression, an
operation-job pair matrix, denoted as ],,[ ,
2
,, kikiki ap  , is used to
978-1-4244-4738-1/09/$25.00 ©2009 IEEE
476
附件一
B. The Exploration Stage
1) Constructing a Crude Model Based on ANN
ANN is considered to be a universal function approximator
that can model complicated nonlinear input-output
relationships of the discrete event simulated systems as
presented in [8]. Thus, treating the feasible schedule S as
input, we wish the output of ANN could estimate )(SF . To
construct such an ANN, first of all, we will select a training
data set by randomly sampling M feasible schedules without
replacement from . These collected M input-output pairs of
( S , )(SFs ) will be used to train the ANN to adjust its arc
weights. Once this ANN is trained, we can input any schedule
S to obtain an estimation of )(SF from the output of the
ANN; in this manner, we can avoid using a lengthy stochastic
simulation to compute )(SF for a given S . This forms our
crude model to roughly estimate the objective value of (2) for
a given schedule S .
2) The Genetic Algorithm (GA)
In solving the SCJSSP using a GA, the first task is to
represent a schedule as a chromosome. A permutation
encoding is utilized that encodes a schedule as a sequence of
operations in which each gene stands for one operation.
Examples of the permutation encoding of a chromosome with
n jobs on n machines are shown in Fig. 1. Once the
permutation encoding of a chromosome is determined, the
disjunctive graph model [9] is used to compute completion
time
iC for job iJ . For example, the corresponding disjunctive
graph of 1S is shown in Fig. 2. A vertex for each operation
exists in the disjunctive graph; additionally, two dummy
vertices exist, B and D, which represent the beginning and end
of a schedule, respectively. Conjunctive arcs between
operations represent the precedence constraints on the
operations of the same job. Disjunctive arcs determining by
schedule represent the mutual exclusion constraints that each
machine can handle at most one operation at the same time.
Each arc is labeled by a weight
kip , corresponding to the
processing time of operation
kiO , .
][ ,2,2,,12,21,21,2,11,11 nnnnnn OOOOOOOOOS 
Figure 1. Examples of the permutation encoding of a chromosome.
a1,1
DB
a1,2 a1,n
a2,1 a2,2 a2,n
an,1 an,2 an,n
p1,1
p1,1
p1,2
p1,n
p2,n
pn,npn,2pn,1
p2,2p2,1
p2,1
p1,2 p1,n
0
0
0
p2,2
pn,1
...
...
...
Figure 2. The disjunctive graph of schedule
1S .
Since GA improves a pool of populations from iteration to
iteration, it should best fit our needs. First, randomly selected
I , say 5000, feasible schedules from  as our initial
population. A pair of chromosomes is chosen from initial
populations, and these two chromosomes will be the parents
for crossover. The fitness of each schedule S is set to be the
reciprocal of the corresponding estimated )(SF based on the
ANN. The members in the mating pool are selected from the
pool of populations using roulette wheel selection scheme
based on the fitness values. Schedules with high fitness values
have a high probability of contributing new offspring to the
next generation. Next, a single-point crossover [6] is employed.
The probability of selecting members in the mating pool to
serve as parents for crossover is set to be
cp . The offspring
generated by crossover inherit appropriate characteristics from
parents; however, the offspring generated after exchanging
may be illegal. Thus, the offspring must be modified to be
feasible after crossover.
Fig. 3 shows an example of precedence-based crossover for
a problem with n jobs on n machines. A pair of parent
chromosomes
1P and 2P is chosen from the population. Using
a single-point crossover, suppose the cut-point is randomly
selected at the 5th position. However, the resulting offspring,
1C and 2C , generated by crossover from their parents will be
infeasible. After applying the following procedure to newly
generated offspring, infeasible offspring
1C will be legalized
into feasible offspring
1ˆC . The duplicated gene 2,iO is deleted
and the missed gene
2,nO is replenished. The missed gene 2,nO
can be inserted into the position generated by randomly
choosing between genes
1,nO and nnO , .
Mutation is the operator responsible for the injection of new
information and gives new characteristics that do not exist in
the parent population. A job-based mutation operator is
described as below. The mutation rate is assumed to be
mp .
For each job
iJ , ni1 , generate a random number
)1,0[ip and compare it with mutation rate mp . The job-
based mutation operator is applied to all genes
kiO , of job iJ if
mi pp  . First, all genes kiO , of job iJ are deleted and the
relative position for each gene of other jobs
jJ , ij , are
preserved. Then, each gene
kiO , is randomly inserted into the
preserved genes
kjO , based on the precedence constraints of
job
iJ . Fig. 4 shows an example of job-based mutation
operator for a problem with n jobs on n machines. Suppose
the job-based mutation operator is applied to job
1J . All genes
kO ,1 of job 1J are deleted and relative position for each gene
of other jobs
kjO , in chromosome 1P is preserved for 1j ,
thus the offspring
1C is obtained. Next, each gene kO ,1 is
randomly inserted into
1C based on precedence constraints of
job
1J ; this legalizes the resulting offspring 1ˆC .
478
We will test the computational efficiency and the obtained
solution quality of our algorithm using three distributions of
random process time on the machines. The first distribution is
truncated normal distribution with parent mean
kip , and parent
variance 2
,ki . The second distribution is uniform distribution
in the interval [
kikip ,, 3 , kikip ,, 3 ]. The third distribution is
exponential distribution with mean value
kip , .
Applying Step 0 to problem (2), we need to construct the
crude model based on the ANN first. Randomly select
M =9604 S ’s from  and compute the corresponding output
)(SFs using simulation length
510sL . The input for ANN is
S while for the output is )(SFs . Then, we employ a three-
layer feed-forward back propagation ANN structured with 36,
48 and 1 neurons in the input, hidden and output layers,
respectively. The activation functions of the neurons in the
hidden and output layers are the hyperbolic tangent sigmoid
and linear functions, respectively. To speed up the
convergence of the back propagation training, we used the
BFGS quasi-Newton method [10] to train the ANN.
Applying Step 1 to select N (=1000) excellent schedules
from  using GA, we start from randomly selected I (=5000)
schedules from  as our initial population. The fitness value
of each schedule is provided by the outputs of the ANN.
Apply a GA with the following setup: simple roulette-wheel
selection, precedence-based single-point crossover with
7.0cp , and job-based mutation with 02.0mp . After the
GA evolves for 20 iterations, we rank all the final I (=5000)
chromosomes based on their fitness values and select the best
N (=1000) chromosomes.
Starting from the NN 1 (=1000) schedules obtained in
Step 1, we will apply Step 2 to compute the objective value of
(2) for each schedule using a various simulation lengths
iL .
The parameters in Step 2 are set as follows: 1L =1000, 6n ,
1
1 LeL ii   , 11 /  ii eNN for 5,,1i . In the last substage,
we apply Step 3 that uses simulation length 510sL to
compute the )(SFs of the 76 N candidate solutions. The one
with the smallest )(SFs is the good enough schedule gS that
we look for.
The good enough schedule, denoted by
gS , and the
corresponding )( gSF obtained by our algorithm for three
various distributions are shown in Table III. As can be
observed, the consumed CPU times for three various
distributions in this example are all within 2 minutes, which is
short enough that we can apply our algorithm real-time. From
Table III, we found that exponential distribution results in
manufacturing the SCJSSP with highest total cost. For the case
of truncated normal distribution, the total cost is lower than for
other probability distributions.
Table III. The good enough schedule
gS and corresponding )( gSF obtained
by our algorithm.
Distribution gS )( gSF
CPU time
(seconds)
Truncated
normal
O2,1 O6,1 O1,1 O1,2 O6,2 O5,1 O3,1 O2,2 O5,2 O2,3
O6,3 O5,3 O5,4 O3,2 O6,4 O2,4 O5,5 O3,3 O1,3 O6,5
O5,6 O2,5 O2,6 O1,4 O4,1 O4,2 O6,6 O3,4 O3,5 O1,5
O4,3 O4,4 O3,6 O4,5 O1,6 O4,6
5450 113.88
Uniform
O5,1 O2,1 O1,1 O4,1 O2,2 O1,2 O5,2 O4,2 O3,1 O4,3
O3,2 O1,3 O1,4 O2,3 O3,3 O5,3 O5,4 O4,4 O4,5 O4,6
O6,1 O2,4 O6,2 O1,5 O6,3 O2,5 O2,6 O3,4 O5,5 O6,4
O5,6 O6,5 O1,6 O3,5 O3,6 O6,6
5650 112.27
Exponential
O1,1 O3,1 O5,1 O4,1 O3,2 O5,2 O2,1 O1,2 O3,3 O4,2
O4,3 O2,2 O4,4 O1,3 O1,4 O3,4 O1,5 O3,5 O3,6 O5,3
O2,3 O5,4 O2,4 O4,5 O1,6 O5,5 O4,6 O6,1 O5,6 O2,5
O6,2 O6,3 O2,6 O6,4 O6,5 O6,6
5800 117.56
V. CONCLUSIONS
In this paper, an ordinal optimization based approach is
proposed to solve for a good enough schedule which minimizes
the expected sum of storage expenses and tardiness penalties of
SCJSSP using limited computation time. The proposed
approach is applied to a SCJSSP comprising 6 jobs on 6
machines with random process time in truncated normal,
uniform, and exponential distributions to select N excellent
schedules from  and combine with the existing goal
softening searching procedure to find a good enough schedule.
ACKNOWLEDGMENT
This research work is supported in part by the National
Science Council in Taiwan, R.O.C., under grant NSC98-2221-
E-324-039.
REFERENCES
[1] D.M. Lei and H.J. Xiong, “An efficient evolutionary algorithm for multi-
objective stochastic job shop scheduling,”in Proc. of Sixth International
Conference on Machine Learning Cybernetics, Hong Kong, pp. 867-872,
2007.
[2] R.R. Weber, P. Varaiya, and J. Walrand, “Scheduling jobs with
stochastically ordered processing times on parallel machines to minimize
expected flowtime,” Journal of AppliedProbability, vol. 23, pp. 841-847,
1986.
[3] Y.C. Ho,“An explanation of ordinal optimization: Soft computing for hard
problems,”Information Sciences, vol. 113, no. 3-4, pp. 169-192, 1999.
[4] Y.C. Ho, Q.C. Zhao, and Q.S. Jia, Ordinal optimization: Soft optimization
for hard problems. New York:Springer-Verlag, 2007.
[5] E. Tekin and I. Sabuncuoglu, “Simulation optimization: A comprehensive
review on theory and applications,” IE Transactions, vol. 36, no. 11, pp.
1067-1081, 2004.
[6] S.N. Sivanandam and S.N. Deepa, Introduction to Genetic Algorithms.
Springer Berlin Heidelberg, 2008.
[7] D. Graupe, Principles of artificial neural networks. 2nd ed. New Jersey:
Hackensack, 2007.
[8] F.M. Alam, K.R. McNaught, and T.J. Ringrose, “A comparison of
experimental designs in the development of a neural network simulation
metamodel,”Simulation in Operational Research, vol. 12, no.7-8, pp.
559-578, 2004.
[9] T. Yamada and R. Nakano, “Job-shop scheduling,” Genetic Algorithms in 
Engineering Systems, Chap. 7, IEE Control Engineering Series, vol. 55,
pp. 134-160, 1997.
[10]N. Stanevski and D. Tsvetkov, “On the quasi-Newton training method for
feed-forward neural networks,” in Proc. of the International Conference
on Computer Systems and Technologies, Rousse, Bulgaria, pp. II.12-1-5,
2004.
480
98年度專題研究計畫研究成果彙整表 
計畫主持人：洪士程 計畫編號：98-2221-E-324-039- 
計畫名稱：具限制條件的隨機模擬最佳化問題之演算法研製及應用 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 2 2 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 6 6 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
