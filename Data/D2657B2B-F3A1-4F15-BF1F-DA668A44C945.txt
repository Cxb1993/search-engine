2 
 
Data Module 
Core
Man Machine Interface
Data
List
Data
List
Data
List
Data
List
Data
List
System 
members & 
Data Lists
 
Figure 2 Data Module Core 
 
The Man-Machine Interface (MMI) is designed to 
support users to complete all functions what they 
want to do [16]. The Database of the smart system 
records those about Activities Daily of Living (ADLs) 
and stores all event data of the house and the family, 
All data are separated into two parts, Real Time 
Database (RTDB) and Permanent Data Database 
(PDDB). The MMI connects all of smart objects and 
provides commands via the device of control & 
transport so that users can monitor values and status 
of smart objects through MMI. When users send 
commands to control devices through MMI, MMI 
will record the message into the database. The 
system can create a user operating history to assist 
the designer or the system manager in analyzing 
users’ behavior. According to these data, the designer 
can improve the system or change some settings. 
All of data in PDDB can be edited by users. Users 
can edit the data through the editor of MMI. The 
functions of editor include building, objects, families, 
etc. The Editor will be linked to data module core so 
as to edit or to rewrite the client data, and if user 
commands can satisfy some conditions, the system 
returns the client data to PDDB. Contrary to PDDB, 
RTDB consists of data of time events. Users have no 
requirement of changing data in RTDB. 
As shown in Figure 1, the system consists of two 
main parts. The first one is MMI (Man Machine 
Interface), which deals with all requirements for 
users and shows all status of the system for 
monitoring. The other one is the Data Module Core, 
which stores all client data of the system. In the 
system initializing step, the database is queried to 
create client data and a frame of the core. The main 
system is a data transport, which deals with and saves 
data in the center. All of the reactions and events in 
Smart Home System are dealt with by the Data 
Module Core and stored data in Core. MMI is just a 
tool for users to links to Data Module Core and 
commands. In Data Module Core, all of working 
rules are functions of those system members and data 
lists except commands given by users. Users can 
save personal setting in core through MMI. 
The smart objects in the real world are symbols of 
client data in the main system and may consist of 
many fundamental properties of real objects and the 
links to corresponding data. In the system initializing 
step, the system creates those smart objects according 
to data stored in PDDB. But when those client data 
are created, those corresponding links are not created 
yet. It needs another step to create those links and 
this step is included in the system initializing step. 
Smart objects, in addition to those fundamental data, 
contain values to define statuses of real objects. The 
data link list is named object modules to model the 
frame, fundamental status, value status and meaning 
of every type of smart objects. It also records some 
reaction procedure codes. 
 
III. Data Description 
Since the purpose is to build a system for human, 
it is required to have data related to human. The 
composition of human data is illustrated in Figure 3. 
A basic attribute for human data is the corresponding 
authority data, which include log name and authority 
level [17]. From human data, the system can find 
individual lists and active state. Individual lists like a 
memorandum of personal data and cannot affect the 
program just a record for users shown on MMI. 
Active state stores properties of human state and 
cannot be edited or saw by users. Authority data save 
those information about login and authority levels. A 
human data can combine with an authority data or 
exists independently. Those data about human are not 
connected with any system member except that 
active state connects with operating units. 
 
 
Figure 3 Data about human 
 
Permanent Data Database stores those data that 
are not changed automatically. They can only be 
changed by users or designers. It can be viewed as a 
fundamental framework database The data in this 
database will be transformed to be client data just at 
the system initializing step. As shown in Figure 4, the 
framework of PDDB is to partition data by labels 
Human Authority
Active State 
Connect
In house 
Floor 
Coordinate 
...
ID
Name 
Sex 
RFID Num. 
... 
Log Name
Password 
Authority Level 
... Individual listMadison list 
Schedule 
...
4 
 
The sensor transmits its data and must be locked at 
this time. After the data has been sent, the source is 
then released. Thus, Ack is to indicate the released 
sensor and it always connects to the corresponding 
transition with communication protocol. Outcome is 
a kind of place that we define as the operating result. 
It stores the message after the source data has been 
operated. It contains the command of the controllable 
object or other status with the use of contexts. 
Besides, it can be the source of other nets depending 
on our demand. While one net completed and got a 
suitable result, the information is preserved in an Ack 
place. This will become the source for a new net, 
which is defined as the second layer. 
Based our definition, another sensor can be added 
into the Petri net as shown in Figure 6. It can be 
adapted to increase branch nets and it can also be 
connected to multiple Petri nets. If the branch does 
not exit, it can be created. If the net already exits, the 
newer arc between them is created. For removing a 
existed sensor in the system, there are two steps. One 
is to remove the connection. If a specific sensor is 
required to be removed from an event and the net still 
have the other available resource, the arc between 
them can be deleted so that the other part of the net is 
still there. On the other hand, if the link does not be 
used, then is should be removed to avoid deadlock 
[24-29]. The flow chart is shown in Figure 7. 
 
 
Figure 6 The basic connection of the Petri net 
without circulation 
 
Select the specific event
Remove Source from this subnet
Use the deadlock prevention module
Check the deadlock
Remove the entire parameter from database
Reload the Petri net from the database
  
Figure 7 Removal of an event from the Petri net 
 
In this study, Ethernet is employed to stand for 
an application with cross-platform. According to this 
idea, a system is implemented to simulate the 
behavior of dynamic Petri net [19]. Assume that all 
of the sensors and controllable objects are connected 
to a specific device. The complete process of this 
system consists of the following modes:   
I. Initial mode: Initialize the system; 
II. Wait mode: Wait for events occurring; 
III. Petri net mode: Compute the source data and 
determine the replying event by Petri net; 
IV. Execution mode: According to the result of 
computing from previous state, the task is 
executed. 
V. Update/Maintenance mode: This model is used to 
change or check the Petri net for safety. The 
method is illustrated in the previous section and 
the Petri net can be a dynamic system.  
The complete operation is shown in Figure 8. 
 
Initial
Wait
Petri Nets
Execution
START
RELEASE
RESET
DATAOUTPUT
COMPLETE
Update/Maintain
Petri net
COMMAND
SLEEP
  
Figure 8 The relationship among five models 
 
V. Conclusions 
In this study, the architecture of smart systems 
with integration of environment and equipment is 
developed to assist human living. This approach 
provides a simple framework of hardware for smart 
home systems, and it is easy to integrate a lot of 
different devices by unifying formats of symbol data 
and devices. This system consider the concept of a 
whole building instead of traditional one floor design, 
and this design makes system capable of recording 
and represent more extensive space than normal 
design does. Special editors are created in MMI of 
the smart home system and can be employed to assist 
users to change setting and content data easily. And 
we also proposed a framework of database for this 
smart home system which is based on label structure 
rather than table structure. This structure make us can 
recognize the data type easily. 
For making the smart home system work smoothly, 
the Home Petri net (HPN) is proposed to construct 
the entire system. HPN can have parallel processes 
and also needs some methods to maintain the 
integrity of the system. The proposed system has the 
capability of reducing the possibility of deadlock 
occurrence. Besides, two-layer architecture of HPN 
Source 
Sensor 
Procedure 
1 Gate 
Buffer 1  Outcome  Ack
Procedure 2 
Collection 
Buffer 2 
Procedure 3 
Fusion 
Procedure 4 
Execution
S1  O1  A1
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/21
國科會補助計畫
計畫名稱: 工作於一般社會環境下之智慧型機器人界面研究
計畫主持人: 蘇順豐
計畫編號: 99-2221-E-011-133- 學門領域: 智慧型機器人
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
