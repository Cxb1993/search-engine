2行政院國家科學委員會補助專題研究計畫成果報告
計畫名稱：具有轉換感知與線上動態電壓調整之即時系統排程法之研究
計畫編號：NSC 98－2221－ E－146－003－
執行期間：98年08月01 日至 99年07 月31日
主持人: 陳大仁 華夏技術學院資訊管理系
計畫參與人員：林采端、林秉毅、李沂禪、簡孝澄、顏明珠
華夏技術學院資訊管理系
中文摘要
由於電腦系統大量的電源消耗除了會增加使用成
本，還會增加其運作時的溫度，進而提高系統故障的機
率與降低系統的可靠度，而攜帶型系統還會因為電池電
量的限制而縮短其運作時間。因此，如何降低處理器的
電源消耗已經成為當今電腦系統發展的一個重要研究課
題。本計畫提出一套連續性電壓調整的排程法，它能夠
有效率地計算出工作排程所需的參數值，以完成初步排
程工作。另外，它可以偵測出提早完成的工作，並且有
效率地決定能夠利用閒置時間的工作集合與其執行的電
壓與速度，以降低系統的能源消耗。此外，計畫的第二
部份提出離散電壓調整排程中尚未被發現的特性，並且
提出一套線上的離散電壓調整排程演算法。它可以有效
率地安排工作，並迅速找出能夠利用閒置時間的工作集
合並計算出工作的適當電壓與速度，以降低系統的能源
消耗。
在排程中，頻繁的電壓調整所需的功耗與轉換時間
對於排程的結果也會有重大的影響。本計劃第三部份已
發展出一套快速的搜尋結構，除了能夠與前兩部份所提
出的方法相容並且能夠快速計算出所需最少的轉換次數
與最佳的轉換點。隨著工作的執行，這些工作參數也可
以很快速的被更新。
Abstract
The power consumption of computer systems can not
only increase the cost but also the operating temperature,
which leads to the increased chance of system failures and
the decreased system reliability. In addition, it will decrease
the operation time for the portable systems with batteries due
to their limited power. As a consequence, how to decrease
the power consumption of processors becomes an important
research topic in the modern computer development. In the
first part of this project, we proposed a continuous voltage
scaling method for scheduling real-time tasks with the aim of
reducing system power consumption. We present an on-line
scheduling method, which can detect the earlier-completed
tasks. Moreover, when some tasks are completed early, it
can efficiently determine the tasks which can share the spare
time in order to further reduce their running voltage and
speed. Although some processors can change voltage and
speed levels continuously, others can only change them
within finite discrete levels. The second part of this project
developed an on-line scheduling algorithm with finite
discrete voltage levels for finding the tasks which can share
the slack time. Therefore, the power efficiency of the real-
time systems can be enhanced.
In the DVS processors, a significant limitation is their
unable to change the operation voltage and frequency
seamlessly. The limitation, known as transition overhead,
includes translation time required for power delivery system
and the time for relocking a clock generator. In the third part
of this project, we developed a data structure corresponding
to a real-time schedule for searching the optimal voltage-
transition point and minimizing the number of transitions.
This data structure is maintained by the proposed on-line
approach at the completion time of each job.
Keywords: dynamic voltage scaling, real-time scheduling, quality
of service
1. Introduction
4voltage scaling: according to the tree structure, slack will
serve as long interval in the schedule as possible for
preventing severe fluctuation of voltage scaling.
The rest of the paper is organized as follows. We explain
the target system model and present the notational
conventions in section 2. In section 3, we give the basic idea
of the proposed slack allocation method. The details of the
proposed voltage scheduling algorithm including slack
allocation algorithm are given in section 4. Section 5
discusses the performance of our method and, finally,
section 6 concludes with a summary and discussion of future
work.
2. Task Model and Notations
We focus our attention on synchronous, preemptive and
periodic task systems. For task set τ={T1,…, Tk} of k
periodic real-time tasks. Task Ti is said to have a higher
priority than task Tj if i<j. Each task Ti consists of an infinite
sequence of jobs ji,1, ji,2, …, where i denotes the task index.
Each job ji,h is described by a release time ri,h, deadline di,h,
start time bi,h, finish time fi,h and early-completion time ECi,h
if possible. Assuming SH denotes the highest speed of a DVS
processor, every task Ti with a worst-case execution cycles
wei has worst-case execution time ei=wei/SH where ei >0. We
assume that the lengths of each task period and deadline
have been transformed as the multiples [5] and sorted by
their period lengths, p1≦…≦pk. Without loss of generality,
pmin=p1 and pmax=pk denote the minimum and maximum
period lengths, respectively.
Figure 1. A (a)jitter-controlled schedule (b) job j1,1 completes early at t=3.5
and (c) the voltage scaling.
The DVS processor used in our model operates a finite
set of voltage and speed levelsυ={V1,…, VH} and S ={S1,…,
SH}. Also, we normalize the processor speeds by SH=1, and
the voltage level by V H=1. Speed SH is always fast enough to
guarantee a feasible schedule for task set τ. The execution
speed and voltage assigned to ji,h is denoted as Si,h and Vi,h,
respectively. The transition interval Δt, within which no task
can be executed, is approximated by a fixed-length interval
equal to the maximum switching time. A transition energy
denoted as ΔE is assumed to be fixed amount of energy
consumption.
2.1 Connected Jobs Tree
In the section, we introduce the connected job tree
(CJ-tree) which corresponds to a jitter-controlled schedule.
A CJ-tree presents the priority and executing order among
the jobs. The formal definitions are shown below.
Definition1: Two distinct jobs are called connected if a job
resumes or begins immediately its execution after another
job.
Definition 2: A CJ-treeΓis an ordered tree in which each
node corresponds to a job in the jitter-controlled schedule. It
satisfies the following properties:
(1) Each node corresponding to a job has a job index and
relative start and worst-case finish time.
(2) A parent node with respect to its children has lower
priority and connects to the nodes corresponding to the
job in the schedule. When a job ji,h connect to two or
more jobs, the node(job) with the highest priority
becomes ji,h’s parent.
(3) A job corresponding to a non-terminal node executes
immediately after that of its left-most child.
Assuming d, n and k denote the number of speed levels, jobs
and tasks in an jitter-controlled schedule, respectively,
where k≧2. Therefore, CJ-tree has the following properties.
Lemma1: The height of a CJ-tree is k.
Lemma2: The degree of a CJ-tree is
min
max
p
p .
Proposition 3: The maximum number of nodes and leaf
nodes is n and
min
max
p
p , respectively.
CJ-tree algorithm
Procedure insertion(Γ: CJ-tree, x: new node)
01 vthe root of T
02 WHILE v≠nul
03 {IF fx=bv THEN add new vertex x as the leftmost child of vertex v.
04 IF fx>bv AND jx and jv are connected THEN
05 IF v has non-leftmost child w and fx≦bw
06 THEN vw
07 ELSE add new vertex as the child of v
08 IF fx>bv AND jx and jv are not connected
09 THEN vthe child of v of which the execution interval covers
fx.
10 IF fx<bv THEN vthe leftmost child of v.
11 }
12 v=location of x
Figure 2. Procedure Insertion( ) in CJ-tree structure.
6Theorem 6. The node jx,y cannot perform Stretch operation
using Slacki,h if and only if ji,h does not in the leftmost
subtree of jx,y.
Proof. Let ja,b be the root of the subtree of jx,y and ji,h the
descendant node of ja,b. By Lemma 5, Slacki,h can be
delivered upward along its ancestor nodes to ja,b. As a result,
job ja,b contains Slacki,h which can be delivered upward to
jx,y. According to Lemma 4, Slacki,h cannot be utilized by jx,y
using Stretch operation, and this completes the proof.
The nodes in the set APi,h can be labeled explicitly as
either SA or MA node. For example, in the Figure 1(b), when
job j1,1 completes early at EC1,1=3.5, its ancestors j2,0 and j3,0
in Figure 3 can be labeled as MA1,1 and SA1,1, respectively. In
the set AP1,1={MA11,1, SA01,1}, node SA01,1 is capable of
performing Stretch operation to use Slack1,1 or Move
operation to distribute Slack1,1 to its descendant nodes in the
right side of ancestor path, when Slack1,1 is passed from
node j1,1 to node j3,0. When Slack1,1 is passed to MA11,1, node
j1,1 cannot stretch itself but distribute the slack to the
descendant nodes located at right side of AP1,1 and j1,1. It can
move itself as well and pass the slack to its parent. In the
Figure 1(c), consequently, jobs j3,0, j2,1, j1,2 and j1,3 share
Slack1,1 and decrease their voltage to the same level. In this
case, the transition only arises once at time t=5.4. Therefore,
APs and early completion nodes play a boundary between
the nodes that can and cannot share the given slack.
□
Theorem 7: Given an early completion node ji,h and Slacki,h,
the nodes located at the right side of APi,h, and ji,h of CJ-tree
are capable of sharing slack Slacki,h.
3. Slack Assignment
In this section, we formulate the available slack and energy
consumption produced by SA and MA nodes.
Cx,y: denotes the set of children of jx,y which locates at the
right side of AP.
Jx,y: denotes the set of descendants of jx,y which locates at the
right side of AP.
3.1 Single SA node
Given that job jx,y corresponds to a SA node and is allocated
a slacklx,y. The available slack time for the Jx,y of jx,y is as
follows.
availyxslack , min{MS(jx,y), slacklx,y } .0,2 ,  availyxslackt (1)
The available length of slack remained in jx,y can be denoted
as
slackx,y =slacklx,y－ availyxslack , －2Δt. (2)
Let ei,h denote the WCET of job ji,h, the continuous
suggestion speed of the job set Jx,y is given by
,)(,
2
otherwise.,
2
,
,
,,
,
,,
,
,
,,,
,
,,,
,,
yxx,yavail
yx
yJxhi
hi
yJxhji
hi
avail
yx
yjxyJxhi
hi
yjxyJxhji
hi
cont
yx
slackjMS
tslack
j
e
e
tslack
j
e
eS









 (3)
A discrete speed level discyxS , and the available slack for Jx,y
under the speed discyxS , can be derived as
disc
yxm
cont
yx SSS ,,  , and



 
yxhi
x,yi,h
Jj
idisc
x,y
Jj
i
desc
yx weS
we
slack
,,
,
, (4)
where m denotes the index of speed/voltage level.
When disc
yxS , >
cont
yxS , , the unused slack of
avail
yxslack , are returned
to node jx,y. According to equation (4), the execution
duration of jobs in Jx,y under the speeds discyx
cont
yx SS ,, and is
.
,
,,
cont
yx
Jj
i
S
we
yxhi

 and ,
,
,,
disc
yx
Jj
i
S
we
yxhi

 where MS(jx,y)<slackx,y, or (5)
.
,
,,,
cont
yx
jJj
i
S
we
yxyxhi

 and ,
,
,,,
disc
yx
jJj
i
S
we
yxyxhi

 otherwise. (6)
The rest of available slack can be derived from equations (5)
or (6),
otherwise.,
,)(,
,,,,,,
,,,,
.
,
,.
,
,
m
jJj
i
cont
yx
jJj
i
yxx,y
m
Jj
i
cont
yx
Jj
i
rem
yx
S
we
S
we
slackjMS
S
we
S
we
Slack
yxyxhiyxyxhi
yxhiyxhi







(7)
In the equation (2), the remainder slack is returned to SA
node jx,y. That is,
slackx,y + rem
yxslack , , MS(jx,y)<slackx,y.
itself
yxslack , = (8)
0 , otherwise.
Therefore, the new speed of SA node jx,y is
.)(andnodeais,
,,
,
, x,yx,yx,yitself
yxyx
yxitself
yx slackjMSSAjSe
e
S 


Each SA node is able to scale its speed/voltage with those of
its descendant nodes in the same speed/voltage level. The
transition energy is also required by a SA and its descendant
nodes. Let curryxS , denote the current speed of job jx,y and θthe
number of transitions required for the jobs in Jx,yjx,y. The
8node, the slack remslack 0,2 can be utilized by j3,0 of which the
new speeds are 89.0
22.08.1
8.1
0,3 
contS and discS 0,3 =0.9.
Therefore, the slack used by j3,0 is slack3,0=0.2 and the
energy consumption in Figure 5(b) is derived from
consumE = consumE 0,2 + )( 0,3
discSP × (we3,0+0.22)+ 2ΔE )1(P ×(13-
3.88)=12.15, where consumE 0,2 = )( 0,2
discSP ×(we1,1+0.28)+2ΔE and
ΔE=0.05. Note that j3,0 does not share the slack with its
descendants. In the second case, when the slack is devoted to
a SA node, the nodes in the set J3,0j3,0 share the slack to
decrease their speed level. However, when the slack does not
enough to decrease their speed to the lower discrete speed
level, j3,0 may be excluded from the job set. By equation (1),
the available slack time for J3,0 is availslack 0,3 =min{0.8, 0.7}-
0.05×2, hence slack3,0=0 and availslack 0,3 is dedicate to J3,0.
According to equations (3) and (4), the speeds of jobs in J3,0
are contS 0,3 = 90.0
205.07.06.5
6.5 

and 9.00,3 discS . Because the
tiny difference between discS 0,3 and
contS 0,3 , the rest of available
slack could be ignored and itselfslack 0,3 =0. In Figure 5(c), the
energy consumption of the schedule is
consumE = )( 0,3discSP ×(we1,2+we1,3+we2,1+0.6) +2ΔE + )1(P ×(13-
6.2)=11.42. Hence, the first case saves more energy then that
of the second case.
4. DVS algorithm for Jitter-Controlled Real-
Time systems
Before presenting the proposed algorithm, we define the
notations as follows.
l(j): denotes the level of node j in a CJ-tree.
jli,h: denotes the ancestor node of ji,h in the level l of a CJ-
tree.
Cli,h: the set of children nodes of jli,h which locate in the right
side of ancestor path.
Similarly, bli,h and eli,h denote the start and execution time of
job jli,h, respectively. The number of transition times required
by jx,y can be summarized as follows.
2 , jx,y is SA nodes,
yx ,T = 2×| Cx,y |, jx,y is MA nodes, (14)
2×|Cx,y |－1, jx,y is MA and finished before its rightmost
child.
4.1 CJ-tree Adjustment
Figure 6. Tree adjustment.
When a job completes early, the jobs performing Move or
Stretch operation probably change the connections among
the nodes in CJ-tree. Therefore, we have to adjust the CJ-
tree to keep it consistent with the future situations of the
system. For example, in Figure 6, job j1,0 completes early at
t=0.5 and the length of Slack1,0 is 1.1. Since j3,0 and j2,0 are
adjacent SA nodes, they may both perform Stretch operation
with J3,0 and J2,0 to gain better energy efficiency, However,
the length of slack does not long enough to decrease their
speed to the closest discrete speed level. The alternative is to
perform Move operation on j2,0 and Stretch operation on j3,0.
When j2,0 performs Move operation, it completes at t1=2.9
and j1,1 release at t2=2.95. Therefore, node j3,0 has to begin at
t2=2.95 and become the new parent of j1,1 according to
Definition 2. In the Figure 4, for example, j1,1 has to replace
its parent with j3,0.
Figure 7. Internal node ji,h completes early.
When an early completion node is an internal node, their
descendant nodes probably need to be moved upward one
level. The adjustment of CJ-tree can be implemented
efficiently by a link-listed data structure. For example, in the
Figure 7(a), when node ji,h completes early and its parent is
an SA node, the children in Ji,h will be moved upward as the
children of node jp, and the slack is passed upward to the
ancestor node of ji,h. Similarly, in case of the parent is a MA
node, in the Figure 7(b), node ji,h will pass its slack upward
to the SA node (if any) in the ancestor path. Consequently,
its children are moved upward one level to reflect the actual
execution order. Notably, each adjustment only takes place
at early completion time of a job and moves its necessary
children upward on level.
01 CJ-tree algorithm
02 Procedure adjustment(Γ: CJ-tree, ji,h: early completion node)
03 l= l(ji,h)-1
04 τ= null
05 IF ji,h is an internal node THEN
06 τ{ jp,q | jp,qCl+1i,h and fp,q>ECi,h}
07 Cl+1i,h Cl+1i,h–τ
08 Cli,h Cli,h∪τ
09 τ= null
10 Find an ancestor jp,q of ji,h in the lowest level, such that tslack remqp 2,11 While l >1
12 {IF jli,h is an MA node and l > l (jp,q) THEN
13 IF bli,h > ECi,h THEN
14 bli,h bli,h–slacki,h
15 ELSE eli,h eli,h–slacki,h
16 IF fx>bv AND jx and jv are not connected
17 THEN vthe child of v of which the execution interval covers fx.
10
CJ-tree using a link-listed data structure needs constant time
to adjust the descendants of ji,h (in lines 05~08) and O(k)
time to move the sibling nodes upward to the proper
ancestor node. After adjusting a CJ-tree, JCRT-DVS
algorithm scales the speeds of the jobs in Π, which contains
at most k jobs. Therefore, the time complexity of on-line
algorithms is O(k+
min
max
p
p ).
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
Number of Tasks
A
ve
ra
ge
in
fl
at
io
n
pe
r
ta
sk
se
t
2 4 6 8 10 12 14 16 18 20
Figure 9. Average inflation versus the number of tasks
Figure 10. Energy consumption under different totaltasks (a) tasks without
period transformation and (b) tasks with period transformation (U=60%,
bc/wc=0.5)
5.2 Simulation Results
The experiments are carried out in the inflation caused
by algorithm Sr [5]. Because of period transformation, the
utilization of a task set is greater than that of original set; the
difference between them is called inflation. In Figure 9, Sr is
performed in the 20,000 randomly generated task sets with
varying sizes. For example, when every τcontains 9 tasks,
the average inflation per task set is 0.14. The figure indicates
that inflation will rise at a rate proportionate to the size of
task set.
Figure 11. Effect of variations in the prob. of EC (a) tasks without period
transformation and (b) tasks with period transformation (20 tasks, U=60%,
bc/wc=0.5)
Figures 10(b), 11(b) and 12(b) have been done under
the assumption that the lengths of task periods in the non-
DVS, DAR, AGR and lpSHE are transformed to the power of 2,
while those in Figures 10(a), 11(a) and 12(a) are not
transformed. As shown in Figure 10(a), lpJCRT reduces the
energy consumption up to 7% over DRA. The utilization of a
given task set is 60%. As the number of tasks from 8 to 20,
the energy consumption of lpJCRT is increased steadily. The
reason for this fact is that lpJCRT focuses on distributing the
slack on as many tasks as possible. When the number of
tasks increases, the available slack can be shared by more
12
Figure 13. (a) Distribution of speed change intervals at d=10 (with sleep mode) and (b) Distribution of speed change intervals at d=4 (sleep, 30MHz,
60MHz and 90MHz).
6. Conclusions and Future works
In the future works, our method will be improved so that
it can be implemented in the systems without jitter-
controlled tasks. In addition, more generated benchmark
examples as well as real-life voice codec example will be
applied to show the performance of the investigated
approaches.
Reference
[1] H. Aydin, R. Melhem, D. Mosse and P. Mejia-Alvarez. Power-
Aware Scheduling for Periodic Real-Time Tasks. IEEE Trans.
Comput., 53(5): 584-600, May 2004.
[2] H. Aydin, R. Melhem, D. Mosse, and Pedro Mejia-Avarez,
“Dynamic and Aggressive Power-Aware Scheduling Techniques
for Real-Time Systems,” Proceedings of the 22nd IEEE Real-time
Systems Symposium (RTSS'01). London, England, December 2001.
[3] R. Ernst and W. Ye, “Embedded Program Timing Analysis 
Based on Path Clustering and Architecture Classification,” Proc.
Int’l Conf. Computer-Aided Design (ICCAD’97) pp.598-604, 1997.
[4] S. Gochman, R. Ronen, I. Anati, A. Berkovits, T. Kurts, A.
Naveh, A. Saeed, Z. Sperber and R. C. Valentine. The Intel®
Pentium® M Processor:Microarchitecture and Performance. Intel
Technology Journal, pp. 21-36, Issue 2, Vol. 7, 2003.
[5] C.-C. Han, K.-J. Lin and C.-J. Hou. Distance-Constrained
Scheduling and Its Applications to Real-Time Systems. IEEE
Trans. Comput. 45(7): 814-826, July 1996.
[6] T. Ishihara and H. Yasuura. Voltage scheduling problem for
dynamically variable voltage processor. In Proceedings of
International Symposium on Low Power Electronics and Design,
197-202, 1998.
[7] W. Kim, J. Kim, and S. L. Min. A. A Dynamic Voltage Scaling
Algorithm fro Dynamic-priority Hard Real-Time Systems Using
Slack Time Analysis. Proc. of Design, Automation and Test in
Europe (DATE’02), 788-794, March 2002.
[8] W. Kim, J. Kim, and S. L. Min. Preemption-Aware Dynamic
Voltage Scaling in Hard Real-Time Systems. In Proceedings of the
2004 International Symposium on Low Power Electronics and
Design (ISPLED’04), pp. 393–398,
[9] C.M. Krishna and Y.H. Lee, “Voltage Clock Scaling Adaptive 
Scheduling Techniques for Low Power in Hard Real-Time
Systems,” Proc. Sixth IEEE Real-Time Technology and
Applications Symposium(RTAS ’00), May 2000.
[10] M. Li and F. F. Yao. An efficient algorithm for computing
optimal discrete voltage schedules. SIAM J. Comput., 35(3): 658-
671, 2006.
[11] Jane W.S. Liu. Real-Time Systems. Prentice Hall, 2000.
[12] B. Mochocki and X. S. Hu. Transition-Overhead-Aware
voltage Scheduling for Fixed-Priority Real-Time Systems. ACM
Trans. Design Automation of Electronic Systems, vol. 12, No. 2,
Article 11, April 2007.
[13] B. Mochocki, X. Hu, R. Racu and R. Ernst, "Dynamic voltage
scaling for the schedulability of jitter-constrained real-time
embedded systems," International Conference on Computer Aided
Design (ICCAD), November 2005, pp.446-449.
[14] D. Mosse´, H. Aydin, B. Childers, and R. Melhem, “Compiler-
Assisted Dynamic Power-Aware Scheduling for Real-Time
Applications,” Proc. Workshop Compilers and Operating Systems
for Low-Power (COLP ’00), Oct. 2000.
[15] P. Pillai and K. G. Shin. Real-Time Dynamic Voltage Scaling
for Low-Power Embedded Operating Systems. In Proceedings of
18th ACM Symposium on Operating Systems Principles (SOSP’01),
89-102, Oct. 2001.
[16] S. Saewong and R. Rajkumar. Practical Voltage-Scaling for
Fixed-Priority RT-Systems. In Proceedings of the 9th IEEE Real-
Time and Embedded Technology and Applications Symposium
(RTAS’03), 2003.
[17] Y. Shin, K. Choi, and T. Sakurai. Power Optimization of Real-
Time Embedded Systems on Variable Speed Processors. In
Proceedings of the International Conference on Computer-Aided
Design, 365-368, Nov. 2000.
[18] M. Weiser, B. Welch, A. Demers, and S. Shenker, “Scheduling 
for reduced CPU energy,” Proc. 1st USENIX Symp. on Opemting
Systems Design and Implementation, pp. 13-23, Nov. 1994.
[19] F. Yao, A. Demers, and S. Shenker. A Scheduling Model for
Reduced CPU energy. In Proceedings of the 36th Annual IEEE
Symposium on Foundations of Computer Science, 374-382, 1995.
[20] M. Yishay and P.-S. Boaz. Jitter Control in QoS Networks.
IEEE/ACM Trans. Networking, Vol. 9, No. 4, Aug. 2001.
[21] D. Zhu, D. Mosse and R. Melhem. Power-Aware scheduling
for and/or graphs in Real-time systems. IEEE Trans. Parallel and
Distributed Sys., 15(9): 849-864, Sep. 2004.
[22] Intel Corporation, Wireless Intel SpeedStep Power Manager –
Optimizing power consumption for the intel PXA27x processor
family, Wireless Intel SpeedStep® Power Manager White paper,
2004. http://download.intel.com/ pressroom/kits/
pxa27x/wp_wireless_speedstep.pdf
14
第二階段中偏重電腦模擬與驗證,我們指導學生撰寫電腦程式，以電腦模擬出各種方法的
效能,加以比較與改進.並且藉此增加學生程式撰寫的經驗與學理基礎。
在學術研究上，本計畫探討動態電壓調整與轉換負載對於即時系統排程之影響，其演算
法設計技術、排程應用技術等，均屬於學術研究的範疇，本計畫已發表二篇(SCI)期刊論文與
三篇國內外會議論文之貢獻。此外，還有一篇投稿至 SCI 期刊的論文，目前已進入 minor
revision 的階段。
在技術創新上,藉由電腦模擬與實際驗證的結果。計畫成果有助於降低嵌入式即時系統的
實際功耗，以延長系統運作時間。此外,計畫成果所應用的"距離限制工作"排程,亦可應用在多
媒體資料傳輸與寬頻網路技術上，除了能夠保證服務品質，還能降低網路傳輸所需的功耗.
在嵌入式系統相關產業中，本計畫的成果有助於延長產品運作時間與電池壽命，使系統提供
更多樣的服務。
量化績效:
(a) SCI 期刊論文二篇(第一作者與第三作者)
[1] Da-Ren Chen*, Chiun-Chieh Hsu, You-Shyang Chen, Chi-Jung Kuo and Lin-Chih Chen, “Transition-
Aware DVS Algorithm for Real-Time Systems Using Tree Structure Analysis”, Journal of systems
architecture (JSA) Vol. 56, pp.352-367, 2010. (SCI IF=0.985, 2008, EI)
[2] You Shyang Chen*, Ching-Hsue Cheng and Da-Ren Chen, “A Fuzzy-Based Rough Sets Classifier for
Forecasting Quarterly Pgr in the Stock Market”, accepted and to appear in International Journal of
Innovative Computing, Information and Control (IJICIC), Vol.7, 2011. (SCI IF=2.791, EI)
(b) 國外會議論文二篇
[1] Da-Ren Chen, Chiun-Chieh Hsu, 2009: Transition-Aware Dynamic Voltage Scaling for Jitter-Controlled
Real-Time Scheduling: A Tree-Structured Approach. In the 38th The International Conference on Parallel
Processing (ICPP-2009): pp.27-34, Vienna, Austria, Sep. 22-25.
[2] Da-Ren Chen and You-Shyang Chen, 2010: An Efficient DVS Algorithm for Fixed-Priority Real-Time
Applications. in the IEEE International Symposium on Parallel and Distributed Processing with Applications
(ISPA10): Taipei, Taiwan, Sep.6-9.
無法量化之績效:
(a) 參與計畫執行的學生，除了接觸到最新的排程技術與演算法設計的知識外，也學習
如何收集及分析研究資料、進行理論推導、演算法設計與程式語言設計等訓練，並
從中強化邏輯思考與自我表達的能力。
(b) 學生學習到最新嵌入式平台的操作與使用，在畢業進入職場也能夠很快進入狀況，
增加畢業生謀職比例。
(c) 整體來說，參與計畫人員可以獲得在嵌入式系統上開發低耗能工作排程方法的經
驗。
4國科會補助專題研究計畫項下出席國際學術會議心得報告
日期：98 年 10 月 10 日
一、參加會議經過
國際平行與分散式處理研討會每年開一次會，這次主辦單位為 Austrian Computer Society與Vienna
University of Technology，主要參加者涵蓋全球各大學或產業界從事網路相關研究之學者或研究人
員，此會議今年已是第三十八屆，在平行處理與分散式網路相關的國際會議中是非常重要的。
筆者於九月二十日從台北搭機出發，經泰國曼谷市轉機，九月二十一日抵達奧地利維也納住一晚，九
月二十二日研討會開幕，早上乘計程車抵達位於維也納科技大學的會議中心(Freihaus building)，筆
者挑選了幾篇有關於多核心即時系統排程的論文，於前一晚細心研讀，在會議當天專心聆聽，並提出
一些疑惑與作者討論。九月二十二日下午，在Lecture Hall二樓，筆者宣讀自己的論文，九月二十五
日會議結束後，在維也納市區參觀與訪問，並於於九月三十日返回台灣。
二、與會心得
本次大會約有 150 篇論文發表，分成三十個場次以口頭報告方式發表，每一時段有二至三個場次並
行，其主題如下：
 Architecture: from multi-core to supercomputers
 Cluster/Grid/Cloud Computing: from parallel to globally distributed systems
計畫編號 NSC 98－ 2221 － E － 146 － 003 －
計畫名稱 具有轉換感知與線上動態電壓調整之即時系統排程法之研究
出國人員
姓名
陳大仁
服務機構
及職稱
華夏技術學院資訊管理系
會議時間
98年 9月 22日至
98 年 9月 25 日
會議地點 奧地利,維也納
會議名稱
(中文)國際平行與分散式處理研討會(ICPP 2009)
(英文) The 38th international conference on parallel processing
(ICPP2009) workshop on real-time systems on multicore platforms
發表論文
題目
(英文) Transition-Aware Dynamic Voltage Scaling for Jitter-Controlled
Real-time Scheduling: A Tree-Structured Approach
附件四
無研發成果推廣資料 
期刊論文 2 2 100% 
Da-Ren Chen*, Chiun-Chieh 
Hsu, You-Shyang Chen, 
Chi-Jung Kuo and Lin-Chih 
Chen, ＇Transition-Aware 
DVS Algorithm for 
Real-Time Systems Using 
Tree Structure 
Analysis＇, Journal of 
systems architecture 
(JSA) Vol. 56, 
pp.352-367, 2010. (SCI 
IF=0.986,2008, EI) 
 
You Shyang Chen*, 
Ching-Hsue Cheng and 
Da-Ren Chen, ＇A 
Fuzzy-Based Rough Sets 
Classifier for 
Forecasting Quarterly Pgr 
in the Stock Market＇, 
accepted and to appear in 
International Journal of 
Innovative Computing, 
Information and Control 
(IJICIC), Vol.7, 2011. 
(SCI IF=2.791, EI) 
 
國外 論文著作 
研究報告 /技術報
告 0 0 100% 
篇 
 
其他成果 
(無法以量化表達之
成果如辦理學術活
動、獲得獎項、重要
國際合作、研究成果
國際影響力及其他
協助產業技術發展
之具體效益事項
等，請以文字敘述填
列。) 
由於該計畫的經費支援, 主持人得於 2010 年成立行動裝置應用軟體實驗室,招募
更多本系專題生,除了累積更多相關研發能量外,還可可訓練學生學習如何收集及
分析研究資料、進理論推導、演算法設計與程式語言設計等訓練，並從中強化邏
輯思考與自我表達的能力,進而成為國家及產業界優秀的工程人員。 
(a)參與計畫執行的學生，除了接觸到最新的排程技術與演算法設計的知識外，也
學習收集及分析研究資料、進行理論推導、演算法設計與程式語言設計等訓練，
並從中強化邏輯思考與自我表達的能力，進而成為國家及產業界優秀的工程人員。
(b)學生學習到最新嵌入式平台的操作使用, 在畢業進入職場也能夠很快進入狀
況, 增加畢業生謀職比例。 
(c)整體來說，參與計畫人員已獲得在嵌入式系統上開發低耗能工作排程方法的經
驗。 
綜合以上所述，此計畫已獲得許多的成果，除建立學術研究能量，更協助國內中
小企業突破在生產排程控制上的困境，並拓展即時系統排程之應用範疇 
 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100字為限） 
(a) SCI 期刊論文二篇(第一作者與第三作者) 
(b) SCI 期刊審查一篇(唯一作者, minor revision) 
(c) 國際會議論文二篇 
 
