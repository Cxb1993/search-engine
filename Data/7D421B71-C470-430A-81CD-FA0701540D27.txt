algorithms, and skyline in database language. Since 
real world problems often involve several conflicting 
objectives for which a tradeoff must be found, this 
proposal calls for a study on the maxima problems in 
large high-dimensional data sets. We will study the 
relations among maxima, maximal layers and 
nondominated sorting, particularly on the random 
parameters of the biological evolution mechanisms. 
After understanding the basic features of 
performance, we will design a practical multi-
objective evolutionary algorithm and present a 
complete analysis of the precise costs, including 
memory storage and running time. 
 
The concept of maxima is an important component for 
various practical problems. The research subjects of 
this project provide the academic novelties and have 
the valuable applications for the IT industry. 
英文關鍵詞： maxima, maximal layers, multi-objective optimization, 
multi-objective evolutionary algorithms, Pareto 
front, skyline computation, analysis of algorithms. 
 
行政院國家科學委員會專題研究計畫成果報告
多維極大點問題分析與應用
計畫編號：NSC 99-2221-E-011-068
執行期限：99年 08月 01日至 100年 10月 31日
主持人：陳維美 臺灣科技大學電子工程系
計畫參與人員：黃慕凱、洪喜音、楊豐銘、鄭帆捷 臺灣科技大學電子工程系
中文摘要：
此專題研究計畫，擬以多維極大點 (maxima)為核心，研究這個問題於演化計算與資料庫領域之相
關應用，致力發展符合實際需求之演算法，並分析主要工作量之組合特性與隨機行為。
Abstract
This research project is to conduct in-depth study on the multidimensional maxima problem. In the pro-
posal, we will investigate the connections of maxima and related applications: evolutionary algorithms in
multi-objective optimization and skyline computation in database language, devise efficient algorithms for
practical needs in the corresponding applications, and give a detailed analysis of the combinatorial proper-
ties and stochastic behaviors for these algorithms.
Keywords: maxima, maximal layers, Pareto front, multi-objective optimization, skyline computation,
analysis of algorithms.
1 Motivations and Purposes
Searching maxima of a given data set is a fundamental problem in computational geometry, which also
arises in a number of areas such as in control, econometrics, multicriteria optimization, and statistical
decision theory. There are an increasing number of related applications for handling complex and large
data sets, so finding an efficient algorithm for the maxima problems in large high-dimensional data sets is
an important issue for decades.
A point p = (x1, . . . ,xd) ∈ Rd is said to dominate another point q = (y1, . . . ,yd) ∈ Rd if the difference
p−q has only positive coordinates. The nondominated points in a sample are called the maxima or maximal
points of that sample. Since there is no total ordering for multidimensional points (for d > 1), such a
dominance relation among points represents one of the simplest and widely used partial orders. Maxima
are sometimes referred to as nondominance, efficiency, admissibility or noninferiority, but they are more
frequently known as Pareto optimality, Pareto front or Pareto efficiency. The diverse terms used in different
fields reveal the importance of the use of maxima in practice.
Essentially maxima are also closely related to many well-known problems such as top-K queries, convex
hulls, range search, nearest-neighbor search, and nondominated sorting. In the literature, there are several
1
if p ji is not dominated by any point in M then insert p ji in M
end
2.2 The k-d trees
The data structure k-d tree (or multidimensional binary search tree) is a natural extension of binary search
tree for multidimensional data, where k denotes the dimensionality. For more notational convenience and
consistency, we also write, throughout this paper, d as the dimensionality (but still use k-d tree instead of
d-d tree). It was first invented by Bentley [1]. The idea is to use each of the d coordinates cyclically at
successive levels of the binary tree as the discriminator and direct points falling in the subtrees. If a node
holding the point r= (r1, . . . ,rd) in a k-d tree has the `-th coordinate as the discriminator, then, for any node
holding the point w = (w1, . . . ,wd) in the subtrees of r, we have the relation w` < r` if w lies in the left-
subtree of r, w`≥ r` if w lies in the right-subtree of r. The children of r then move on to the (`mod d)+1-st
coordinate as the discriminator.
2.3 Bounding-boxes
Bounding boxes are simple techniques for improving the performance of many algorithms, especially those
dealing with intersecting geometric objects, and have been widely used in many theoretical and practical
situations. The application of bounding boxes is straightforward. Let ur = (u1, . . . ,ud), where ui is the
maximum among all the i-th coordinates of points in the subtree rooted at r. Then ur is defined to be
the upper bound of the subtree rooted at r or simply the upper bound of the node r. Similarly, define
vr = (v1, . . . ,vd) to be the lower bound of the subtree rooted at r, where vi is the minimum among all the
i-th coordinates of points in the subtree rooted at r. For simplicity, we also use the upper (or lower) bound
of a node . The upper and lower bounds of a node constitute a bounding box for that subtree.
Now if a point p is not dominated by ur, then obviously p is not dominated by any point in the subtree
rooted at r. This means that all comparisons between p and all points in the subtree rooted at r can be
avoided. Similarly, when searching for points in the subtree rooted at r that are dominated by p, we can
first compare it with vr, and all comparisons between p with each node of that subtree can be saved if vr is
not dominated by p.
2.4 The proposed algorithm
We give in this subsection our two-phase maxima-finding algorithm using k-d trees and bounding boxes.
Algorithm Maxima
//Input: A sequence of points P= {p1, . . . ,pn}
//Output: a k-d tree rooted at r consisting of Max(P)
begin
r := p1;ur := p1
q1 := p1 // R := {q1}, the sequence of the records.
k := 1 // k counts the number of records
for i := 2 to n do
if (Dominated(r,pi) = 0) then
3
• quadtree: a sequential algorithm using quadtree (see [3, 5]);
• 2-phase: algorithm Maxima;
Table 1: The average numbers of scalar comparisons per input point when D is [0,1]d , where d = 6 and 10.
d = 6
n list d-tree quadtree 2-phase
102 126.37 221.77 91.42 175.93
103 1096.21 1175.40 268.67 467.27
104 8284.26 5660.90 758.05 993.25
105 55200.49 24332.05 2178.38 1849.37
106 331776.01 93275.52 6825.69 3153.92
107 — 368306.29 8418.26 5090.63
108 — — — 7996.92
d = 10
n list d-tree quadtree 2-phase
102 137.56 296.70 132.72 267.90
103 1048.73 1496.07 458.30 774.85
104 5392.57 4916.40 1190.22 1526.83
105 17779.34 11463.01 2201.99 2126.49
106 38552.96 18775.90 — 2221.26
107 59207.23 20769.36 — 2023.64
108 — 19226.26 — 1544.68
The performance of Maxima depends heavily on the number of records, which in turn is closely related
to the number of maxima.
Theorem 1. Let Rn denote the number of non-dominated records in a sequence P = {p1, . . . ,pn} of in-
dependent and uniformly distributed points from some region D in Rd . Let Mn denote the number of the
maxima of P. Then
E(Rn) =
n
∑
i=1
E(Mi)
i
, (1)
where E(·) denotes the expectation.
3 Self-evaluation of the results
In this project, we conduct in-depth study on the maxima problem, focusing on developing simple and
practical algorithms. The proposed algorithm is easily coded and modified for practical needs. The expected
complexity related to the performance of the algorithm is analyzed. The simulation results show that the
algorithm is more efficient than other popular algorithms for large high-dimensional data sets.
References
[1] J. L. Bentley, Multidimensional binary search trees used for associative searching, Communications
of the ACM, 18 (1975), 509–517.
[2] J. L. Bentley, K. L. Clarkson and D. B. Levine, Fast linear expected-time algorithms for computing
maxima and convex hulls, Algorithmica, 9 (1993), 168–183.
5
出席國際學術會議心得報告 
                                                             
出國人員姓名 
服務機關及職稱 
陳維美 
臺灣科技大學電子工程系副教授 
會議時間地點 September 16-18, 2011 (Yichang, China) 
會議名稱 The 2nd International Conference on Electrical and Control Engineering 
發表論文題目 Energy-efficient scheduling of periodic real-time tasks for reliable multi-core systems 
 
一、參加會議經過 
與會者來自全球，有台灣、大陸、新加坡、韓國、日本、英國、法國、匈牙利
及美國等，進行國際性的學術交流。大會並另外邀請三位實務專家，針對當今
多媒體網路傳輸主題，舉行多場專題演講。在學術和應用兩方面的收穫皆相當
豐富。會議議題包含下列項目： 
1. ELECTRICAL ENGINEERING 
2. POWER ELECTRONICS 
3. AUTOMATION CONTROL 
4. ELECTRONIC TECHNICAL AND INFORMATION 
5. COMPUTER ENGINEERING 
6. NEW ENERGY TECHNIQUES AND APPLICATIONS 
7. ENVIRONMENT ENGINEERING 
8. CIVIL ENGINEERING  
 
二、與會心得:  
感謝國科會的支持與補助。於會議中獲得了許多影像辨識、網路傳輸以及計算
機科學應用等相關新知，並與研究學者在討論過程中交換心得，這經驗對學術
研究方向有很大的啟發。 
 
 
Energy-efficient scheduling of periodic real-time
tasks for reliable multi-core systems
Wei-Mei Chen, Hsi-Yin Hung, Jhe-Ming Liang
Department of Electrical Engineering
National Taiwan University of Science and Technology
Taipei 106, Taiwan
{wmchen, m9802112, m9902140}@mail.ntust.edu.tw
Abstract—Technology is continuously developing in the direc-
tion of multi-core systems. However, green computing require-
ments make power consumption an important issue for embedded
multi-core applications. This study introduces an energy-efficient
algorithm for scheduling periodic real-time tasks in multi-
core systems. The proposed algorithm can reduce the power
consumption and maintain the reliability of systems. Simulation
results show that this algorithm can reduce power consumption
in periodic real-time systems from 6 to 10% compared to RA-
DPM scheduling.
Keywords: Multi-core systems, task scheduling, periodic
tasks, real-time systems, reliability, DVFS
I. INTRODUCTION
Embedded multiprocessor systems are appearing increas-
ingly frequently in real-world applications. These advances
in embedded systems have steadily increased the battery re-
quirements of portable devices, wireless networks, and mobile
communication systems. The concept of green computing also
highlights the importance of minimizing power consumption.
Power-aware computing has recently become an important
research topic. Researchers have proposed several hardware
and software techniques to manage power consumption in
modern computing systems. One feasible strategy to save
energy is to run system components at low-power states
(that is, low-frequency states), whenever possible. Researchers
have recently used the dynamic voltage and frequency scaling
(DVFS) technique to dynamically scale down frequency and
voltage to reduce power consumption [16], [17].
When computer applications must satisfy real-time require-
ments, any energy-aware policy for the processor speed should
consider timing constraints to guarantee that computational
activities meet predefined deadlines. Earliest deadline first
(EDF) is a popular scheduling policy in single processor
systems [7]. At the operating system level, suitable scheduling
policies select the executing task with a proper operating
voltage and frequency. Recent studies focus on reducing power
consumption using the DVFS policy[3], [5], [6], [11].
During the execution of a job, a fault may occur because
of a number of reasons, such as hardware failures, software
errors, and human negligence. Reducing power consumption
This work is supported by National Science Council under the Grant
NSC99-2221-E-011-068
by DVFS policy may also result in certain system errors be-
cause lower supply voltage/frequency can incur higher leakage
[9], [12], [20] and increase the possibility of fault occurrence.
In such instances, systems must re-execute the tasks with
the highest frequency if system errors occur. This results in
additional system loads.
The primary objective of this study is to develop a power
management scheme for real-time tasks on multi-core systems
that simultaneously preserves system reliability. Section 2
introduces the related system models. Sections 3 and 4 present
a discussion of the proposed algorithm and the simulation
results, and lastly, Section 5 offers a conclusion.
II. SYSTEM MODEL
Assume that a set of n independent real-time tasks are
present on an m-core computing system. The target tasks are
executed periodically, and each should be finished before its
corresponding deadline. Each core provides k frequency fi for
i = 1,2, . . . ,k and 0< fmin = f1 < f2 < · · ·< fk = fmax.
A. Task model
Consider a set of periodic real-time tasks T =
{T1,T2, . . . ,Tn}. Each task Ti is associated with a pair of
parameters (ci, pi), where ci is the worst case execution cycles
(WCECs) of Ti and pi is the period of Ti. The WCEC of Ti is
the execution cycles required for each job running under the
maximum processing frequency. For each task Ti, the worst
case execution time wi can be computed by ci/ fmax, where
fmax is the maximum frequency of the system.
Suppose that Ti contains a sequence of jobs called,
τi,1,τi,2, . . . . The arrival time of the j-th job of Ti, τi, j, is
( j−1)pi and its deadline is jpi.
B. Multi-core model
Consider n tasks executed on a system with m cores,
where each core is associated with an EDF-Queue for task
scheduling. Suppose that Si is the set of tasks assigned to core
i. The utilization of core i is defined as
ui = ∑
Tj∈Si
w j/p j,
5887
978-1-4244-8164-4/11/$26.00 ©2011 IEEE 
TABLE II
THE POWER LEVEL OF A SIMPLE MODEL
k 1 2 3
Frequency fk (MHz) 20 60 80
Power consumption Pk (mW) 140 500 800
The system initially removes the first job in the EDF-Queue
and runs it on fmax. Assume that τ(c, p) is in the front of
the EDF-Queue with deadline td . Let R be the set of all jobs
with deadline in (t, td ]. Suppose that the time overhead for
adjusting frequency is o, and the length of the available time
D is td − t−o−∑τi∈R(ci/ fmax). Thus, the optimal frequency
fopt be expressed as CA/D. Suppose that some i exists such that
fi < fopt < fi+1. Let fL = fi and fH = fi+1. Assume that the
processor runs on the frequency fL for QL time units and on the
frequency fH for QH time units, where `= ta− t = QL+QH ,
and ta is the arrival time of the following upcoming job. This
leads to
(QL−o) fL+(QH −o) fH ≥ (`−o) fopt.
Then, we set
QH =
`( fopt− fL)+o( fL+ fH − fopt)
fH − fL .
B. A working example
We first illustrate the idea of our scheduling through an
example in Figure 2,
The example in Figure 2 illustrates the idea of this schedul-
ing based on the model in Table II. Suppose that CPI is
1. Consider a processor with a task set with three periodic
real-time tasks T = {T1(80 ∗ 103, 5ms), T2(160 ∗ 103, 7ms),
T3(240∗103, 12ms)}. The worst case execution times for T1,
T2, and T3 are 1,2, and 3, respectively. Recall that preemptive
EDF scheduling is used. If two jobs have the same deadline,
the one with the smaller task index is assigned a higher
priority.
Initially, all jobs arrive at t = 0 in Figure 2(A) and τ1,1 runs
on frequency fmax (Figure 2(B)). Since the total cycles needed
in the time interval [1,5] is 320∗103 and 320∗103/4 = fmax,
τ2,1 runs on frequency fmax when t = 1. In Figure 3(D), since
the arrival time of τ1,2 is 5, the total cycles needed in interval
[3,5] are computed as 96∗103. In this case, fopt = 48MHz, and
τ3,1 runs on 60MHz for 1.72ms and on 20MHz for 0.28ms.
The unfinished part of τ3,1 is inserted into the EDF-Queue,
whereas τ1,2 is scheduled on fmax. Consider the scenario in
Figure 2(G). When t = 8.2, τ3,1 is completed successfully, and
the total cycles needed in interval [8.2,12] are 160 ∗ 103. In
this case, fopt = 42.1MHz, and τ2,2 runs on 60MHz for 2.42ms
and on 20MHz for 1.38ms. Finally, suppose that a fault is
detected at t = 12. Figure 2(H) shows that the recovery job
τ′2,2 is subsequently scheduled.
IV. EXPERIMENTAL RESULTS
The experimental simulation in this study were was con-
ducted on a C-based simulation platform for the power model
Algorithm 1 Scheduling algorithm
Input: Let τ be the first job in EDF-Queue with (c, p). The
deadline of τ is td . The arrival time of the next coming
job is ta. The current time is t.
Output: A schedule
1: while EDF-Queue 6= empty do
2: τ← remove the first job from EDF-Queue
3: if τ is a recovery job then
4: Run A on frequency fmax.
5: else
6: A← all jobs arrive before td .
7: CA← the total cycles needed for A.
8: R← all jobs with deadline in (t, td ].
9: tr ← the starting time of the next coming recovery
interval.
10: D← td− t−o−∑τi∈R cifmax
11: fopt←CA/D
12: if fopt < f1 then
13: Run A on frequency f1
14: else
15: if fopt ≥ fmax then
16: Run A on frequency fmax
17: end if
18: else
19: Find some i such that fi < fopt < fi+1
20: fL← fi
21: fH ← fi+1
22: `←min{ta, tr}− t
23: QH ← `( fopt− fL)+o( fL+ fH − fopt)fH − fL
24: QL← `−QH
25: Run A on frequency fH for QH time units
26: Run A on frequency fL for `−QL time units
27: end if
28: Update EDF-Queue by the remaining jobs in A.
29: if (τ is not completed successfully) then
30: Insert the recovery job τ′ in the front of EDF-
Queue.
31: end if
32: end if
33: end while
of Intel XScale. This simulation compares four different
schemes: a) CC-EDF [14], which adopts a well-known DVFS
algorithm without fault tolerance; b) Greedy, which allocates
all available dynamic slack for the next ready task; c) RA-
DPM, which considers the size of WT-Queue to adjust the
processing frequency of jobs; and d) the proposed algorithm.
For synthetic real-time task sets, the periods of tasks, p,
are uniformly distributed in the range [10,20] for short-period
tasks or [20,200] for long-period tasks. Assume that CPI is
1. The WCEC can be computed by the worst-case execution
time that is uniformly distributed within the range of [1, p].
This study simulates 500000 jobs for short- and long- period
task sets, where the size of each task set is ten. The overhead
of adjusting frequency is 800 µJ [8] and the time overhead of
5889
國科會補助計畫衍生研發成果推廣資料表
日期:2012/01/20
國科會補助計畫
計畫名稱: 多維極大點問題分析與應用
計畫主持人: 陳維美
計畫編號: 99-2221-E-011-068- 學門領域: 計算機理論與演算法
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
