 1
Key words: Business Process Modeling, Business Process Modeling Notation 
(BPMN), Process Model Feasibility Analysis, Petri Net 
 3
usually not easy to interpret for ordinary business users.  
This research tends to develop a framework to analyze the feasibility of a BPMN 
business model in terms of Petri-net approach. A transformation approach was 
proposed to bridge the gaps between BPMN and Petri-net, such that the developed 
business model can be transferred to its respective Petri-net model. As a result, the 
constructed BPMN business model can be interpreted by the ordinary business person, 
and its feasibility can be simulated and analyzed through Petri-net specialists.   
 
2. Literature Review and Background 
 The development of business process engineering (BPE) has attracted many 
attentions recently. Basically, this approach integrates various methodologies and 
techniques for business process modeling and analysis [Scheer 00] [Burlton 01]. 
Because there was no consensus regarding the constructs that collectively for the basis 
of a process model, different perspectives on process modeling have been developed 
and applied for various process analysis goals. Function, organization, data and 
process flow are four essential perspectives commonly used to represent a process 
[Scheer 00] [Wang 94]. In general, function tree, organization chart and 
entity-relationship diagram (ERD) are some representatives of modeling approaches 
used in the functional, organizational and data perspectives [Scheer 00]. 
The process flow perspective that interrelates the other three perspectives mainly 
focuses its representation on the information flow (or data transformation) and 
process logic (or workflow) of a process [Burlton 01]. Generally, the information flow 
models are function-centric, i.e. connecting a specific function and its processed 
datum, and time-omitted [Wang 94]. The data flow diagram (DFD), a commonly used 
system analysis tool, and the function allocation diagram used in ARIS (Architecture 
of Integrated Information Systems) methodology [Scheer 00] are commonly used 
modeling approaches [Wang 94]. In the aspect of process logic, the process logic 
models always provide the information about the temporal and logical sequence in 
which the individual activities are to be performed. Several procedural models, such 
as the classical flowchart [Tenner 97], event-driven process chain (EPC) diagram 
[Scheer 00], Petri net model [Aalst 96], and the burgeoning object-oriented process 
model [Wang 94], and so on, have been extensively used in process logic modeling. 
In addition to the graphical process representation, more sophisticated BPE 
systems further allow some process attributes to be assigned to activities defined in 
the process logic model, so that the process performance analysis including process 
time calculation and the Activity-Based Cost (ABC) analysis can be enabled [Irani 00] 
[Scheer 01]. It can be seen that the process logic models have integrated several 
fascinating characteristics, such as graphical process representation, process time 
 5
Most of the research works applying PN in process model analysis were 
addressed on the following two categories: One was time-based evaluation such as 
analyzing process cycle time [Jain 03][Lin 00], machine utilization rate [Bohez 04], 
system throughput [Lee 02][Lin 00]. Basically, in these works, various PN models 
were developed first. Then, time-based simulation should be carried out and the 
tokens spent in the net should be recorded for further analysis.  
Another works were addressed on analyzing the possible status of the modeling 
domain such as deadlock [Chin 06][Choi 02], redundant tasks [Choi 02], likely 
process sequence [Chin 06][Tiwari 01], possible process states [Gourgand 
03][Morandin 05] [Huang 92] [Barad 98]. In these works, the sequence of the tokens 
running through a net should be recorded for detailed analyzed. In order to obtain 
detailed process data, many works have developed their own PN software package to 
trace the path of tokens during simulation period.  
One of the major advantages of applying PN approach in modeling workflow 
systems was to provide a high level, structured representation to a designer. Therefore, 
a clear picture about the process flow of the system can be obtained during the stage 
of analysis and performance evaluation [Jafari 92].  
As mentioned previously, there are many existed process modeling approach. 
However, most of those methods were only addressed on part of the business 
modeling life cycle. For instance, UML based approach might suitable for technical 
system analysts but not for management level business people. On the other hand, 
ARIS might suitable for process analysts but not for the technical personnel. In 
addition, none of the developed approach turned out to be the standard of business 
process modeling until the development of BPMN. 
BPMN (Business Process Modeling Notation) was developed by BPMI 
(Business Process Management Initiative) as a standard for business process modeling. 
“The primary goal of BPMN is to provide a notation that is readily understandable by 
all business users, from the business analysts that create the initial drafts of the 
processes, to the technical developers responsible for implementing the technology 
that will perform those processes, and finally, to the business people who will manage 
and monitor those processes” [BPMN 04]. A brief description about the notations 
used in BPMN was described in Table A-1. Several related works on BPMN include a 
process instance notation was developed based on BPMN to support the visualization 
of process execution rather than process definition [Momotko 03]. In addition, a 
concept was proposed to apply BPMN as a fundamental for future business process 
programming language [Emig 06].  
BPMN also provided a mapping to an XML based BPM (Business Process 
Management) execution language BPEL4WS. Therefore, the business process can be 
 7
Once a PN model was constructed, the next issue would be how to utilize the 
characteristics of PN to reflect the feasibility of a BPMN model. In other words, 
properly categorize the process conditions of a BPMN model such that improper 
design can be reflected by PN simulation would become an issue needed to be 
addressed. 
 
3. The Proposed Framework 
Fig-1 showed the research framework for the proposed Petri Net based approach 
to evaluate the feasibility of a model defined by BPMN. There were four phases in the 
proposed approach. In problem analysis phase, the basic concept utilized in this 
research was specified. In addition, the invalid model occurred during the modeling 
stage would be defined and classification. Then, in the design stage, the approach 
used to transfer a BPMN model to its respective PN model would be specified. That is, 
the developed BPMN model would be transferred to Modified BPEL4WS first. By 
defining the XSLT transformation templates, the transferred BPEL4WS would be 
translated to a Petri-net model specified by a markup language CPNXML. The 
converted model would be imported into a commercial package for simulation.  
Finally, the three kinds of process properties (deadlock, infinite loops and execution 
time) would be analyzed in terms of the “liveness”, “reachability” and “consumed 
time” of the converted Petri Net model. In other words, two categories of analysis 
(time-based and process status-based) would be carried out in this work. 
 
3.1 The Problem Analysis Phase 
 It has been an obviously trend that most the business application will be 
developed and implemented in the web-service environment. Yang et al. has proposed 
a three stage model, as shown in Fig-2-1, for developing a web-service application 
[Yang 02]. Basically, the required components for developing a web-service 
application should be planned in the first stage. Then, the schema and inter-operation 
of those components should be defined in the second stage. The developed model 
should be implemented in the final stage.  
This three-stage model can also be used in developing a business process 
application such as an ERP ordering process. For instance, in the planning stage, the 
required process components such as order entry, order checking should be planned 
first. Then, the logical and precedence relationships among those components should 
be defined in the second stage. However before the final implementation stage, it 
would be appropriate to verify the feasibility of the defined process. For instance, 
whether there was a subsequent process if an order was rejected in the order checking 
activity. Therefore, insert a verification stage into the three stage model seems a 
 9
1. Developing a transformation template for the mapping form BPMN to PN. 
2. Based on the required BPMN modeling function from step one, expanding the 
attributes of BPEL4WS. Then, developing the mapping language for transforming 
a BPMN model into Extended BPEL4WS XML. 
3. Transfer the PN templates, defined in step1, into CPNXML template language.  
4. Define the XSLT translation templates to transfer Extended BPEL4WS into 
CPNXML.  
 
3.2.1 Build BPMN/PN Transformation Templates 
 As just mentioned, the major task of this stage was to build the mapping 
templates from BPMN to PN. Basically, three kinds BPMN constructs were defined: 
Event, Activity and Control Element. 
 Fig 6-1 showed the mapping template for BPMN Event. In the PN model, the 
input and output places represented the start and end of the event. The transition 
indicated the execution of the event. 
 The next defined construct was Activity. BPMN has defined two kinds of 
activity: Task and Sub-Process. Fig 6-2 showed the template for BPMN Task. Similar 
to the event template, the input and output place in the PN represented the start and 
finishing of the task. The transition indicated the processing of the activity. 
 As to the situation of sub-process, two kinds of mapping approach were applied. 
One was to translate the sub-process into several separated PN models. Another was 
to apply the concept of Hierarchical PN. That is the BPMN sub-process model would 
be mapped to a sub-PN model.   
 The final kind of construct was Control Element. In BPMN, four kinds of control 
elements were defined: Fork(And-Split), Joint(And-Joint), Split(Or-Split) and 
Merge(Or-Join). They were used to specify the conditions of process splitting and 
joining. Fig-6-3 showed the mapping for Fork(And-Split). In BPMN, a Parallel 
Gateway construct was used to indicate that a process path was split into two paths, 
and both paths should be carried out. The respective PN showed that there are two 
output arrows followed transition T1.Therefore, the two tokens would be sent to place 
PF1 and PF2 simultaneously if T1 was fired.  
 Fig 6-4 showed the condition for Joint(And-Joint). That is, both of the two input 
paths for Parallel Gateway construct should be finished. The respective PN also 
showed this situation.  
 Fig 6-5 and Fig 6-6 specified the “OR” condition (Split(Or-Split) and 
Merge(Or-Join)) for path split and joint. In BPMN, the Exclusive Gateway construct 
was used. As for the “OR” condition for a PN model, two arrows would be connected 
to either the input or output of a place. 
 11
3.3 The Simulation Stage 
In this stage, the transferred CPNXML files would be imported into a PN 
simulation package CPN Tools to analyze the feasibility of the BPMN model. As 
mentioned before, three kinds of workflow characters would be analyzed: deadlock 
and endless loop and consumed time.  
 
3.3.1 The Deadlock Case 
 The “liveness” property of a PN will be used to analyze the deadlock situation of 
a BPMN model. The definition for a “live” PN can be specified as follows: 
Let N = (P, T, A, W, M0) be a place/transition PN, a transition t∈T is said 
to be live for marking ∀M0∈ℜ(N, M0), ∃M' a marking reachable from M 
such that t is enabled (otherwise, the net is said to be dead) 
Where 
P = (pi), I=1, 2, n, is a finite set of places,  
T = (tj), j=1, 2, m, is a finite set of transitions, 
A⊆ P×T∪T×P is a set of directed arcs connecting places to transitions and 
transitions to places, 
W : A→ N is a function defining the weight of each arc of the net, and 
M0: P→ N is a function defining the initial marking of the net, i.e. the 
initial number of tokens in each place of the net 
ℜ(N, M0): The set of all reachable markings of a net N from its initial 
marking M0.  
Based on the definition, a deadlock of a PN would be took place if there was any 
transition which cannot be fired. Since a transition in a PN can be mapped as a task in 
a BPMN model. Therefore, a transition in a PN cannot be fired indicates that a task in 
a BPMN model cannot be executed. A deadlock would also be occurred in a BPMN 
model.  
Fig-10 showed a BPMN model and its respective PN model with deadlock 
condition. The reachable diagrams of these models were shown in Fig-11. The 
reachable sets of these diagrams were shown in Table-1. It can be found that in the 
status M11 of the PN model (Table-1-1), only one token in place P9. Since the 
transition T9 would be fired if both of the places P8 and P9 had a token (Fig-10). The 
PN model would reach a dead status.  
The similar situation could be observed in the BPMN model. It can be found that 
only activity D was activated in status M6 (Table-1-2). Since the task E would be 
activated if both of the tasks C and D were activated (Fig-10). The BPMN model also 
would be reached a dead status.  
 
 13
BPEL4WS modification regulations specified in Section 3.2.2.  
(3) Transfer each BPEL block into its respective CPNXML block and then 
re-assembled all of the CPNXML blocks. Several Java based sub-modules were 
developed in this step. 
(3.1) “BPEL Block to CPNXML Block” transformation module: Based on the 
defined XSLT templates, such as the one showed in Fig-8, translate each BPEL 
block to its respective CPNXML block. 
(3.2) “Add Arc and End Block” module: Add an arc construct to each place 
construct in each CPNXML block.  
(3.3) “Merge” module: Re-assembled all of the CPNXML blocks into one 
CPNXML file.  
(4) Imported CPNXML into CPN tools and performed the simulation. 
 
4.1 “BPMN to BPMN Block” Decomposition  
In this stage, each BPMN construct would be decomposed first. Then, each 
construct would be given a three-digit code. The first two digits indicated the 
horizontal sequence of the blocks in a BPMN diagram, and the third one was used to 
specify the vertical sequence of the block in a diagram. Fig-15-1 and Fig-15-2 showed 
an original sample BPMN model and its decomposed diagram. The decomposed data 
would be stored as an ‘BPMN Construct/Code” table (Fig-15-3) in the computer for 
later used. 
 
4.2 “BPMN Block to BPEL Block” Transformation 
In this stage, each BPMN block would be transferred into its related Extended 
BPEL4WS block based on the transformation templates such as the one shown in 
Fig-7. Table-3 showed a completed Extended BPEL4WS codes for the sample BPMN 
model. 
 
4.3 “BPEL Block to CPNXML” Transformation 
In this stage, a series of JAVA codes were developed to transfer each BPEL 
block into its respective CPNXML and then to merge all of the transferred CPNXML 
block into one CPNXML file. Fig-16 showed the structure of the transformation 
approach.  
First, each BPEL4WS block would be transferred into its respective CPNXML 
block based on XSLT templates, such as the one shown in Fig-8. Fig-17-1 showed the 
diagram for the transferred CPNXML blocks for the sample BPMN model. It can be 
found that, based on the transformation templates; each transferred CPNXML 
construct would contain at least two “place” constructs in the start and end of the 
 15
parallel gateway joined the two paths in the BPMN model as shown in Fig-20-1. 
Since an exclusive gateway was used to split the path, it would be impossible to have 
the two tasks “Ship Order” and “Send Invoice” took place simultaneously. The 
deadlock would take place in the parallel gateway. One possible solution would be to 
modify the exclusive gateway to a parallel gateway as shown in Fig-20-3.  
 Another BPMN business model used to examine the infinite loop condition was 
shown in Fig-21-1. The “Configure Product” and “Test Product” activities would be 
carried out first. Then the process would encounter a parallel gateway and be 
separated as two paths. One would go back to “Configure Product” task, and another 
would go to “Pack Product” activity. The PN model in CPN Tools was shown in 
Fig-21-2, and the simulation report was shown in Table-5. It can be found that upper 
bound values for place “End”, “Input_EndEvent” and “Input_PP” was un-normal. It 
indicated that the upper bound for these places might be extremely high if the 
simulation executed long enough. This was because there was an infinite loop existed 
among tasks “Configure Product” and “Test Product”. This problem could be worked 
out by modified the parallel gateway connected “Test Product” and “Pack Product” as 
exclusive as shown in Fig-21-3. 
 
6. Discussion and Conclusion 
The major contribution of this research was to propose a Petri Net based 
approach to support the feasibility evaluation of a BPMN oriented business process 
model during the process design stage. A transformation approach was proposed to 
transfer a BPMN model into XML markup PN language, “CPNXML”, such that the 
model could be simulated and analyzed by a commercial PN package CPN Tools. The 
main application area of the proposed approach might be in the manufacturing area. 
This was because that the situation of dead lock and endless loop might take place in 
this area such as a robotic assembly cell [Zhou 93] or a flexible manufacturing system. 
[Hosack 03]. 
There are several issues should be discussed here. One was that in this work, a 
colored PN tool CPN Tool was used. The main reason to select this tool was that it 
supported a XML based language to import and export a PN model. From the 
simulation point of view, any timed PN can be used to perform the evaluation tasks.  
Another issue was that in this work, only the methodology to transfer a BPMN 
model to its extended BPEL4WS and to the final CPMXML model was proposed. The 
transformation from BPMN to BPEL was not automatically. That was, each BPMN 
construct was identified and extracted from a BPMN model manually. Then the 
related BPEL4WS was constructed based on BPMN/BPEL4WS mapping specified in 
[BPMN 04]. The additional spatial information about BPMN constructs was added in 
 17
References 
[Aalst 96] W. M. P. van der Aalst and K. M. van Hee, “Business Process Redesign: A 
Petri-net-based Approach,” Computers in Industry, Vol. 29, pp. 15-26, 1996. 
[Barad 98] M. Barad and D. Sinriech, "A Petri Net Model for the Operational Design 
and Analysis of Segmented Flow Topology (SFT) AGV Systems", International 
Journal of Production Research, Vol.36, No.5, pp.1401- 1425, 1998. 
[Bohez 04] E.L.J. Bohez, “A New Generic timed Petri Net Model for Design and 
Performance Analysis of a Dual Kanban FMS”, International Journal of Production 
Research, Vol.42, No.4, pp.719-740, 2004. 
[BPMN 04] Business Process Modeling Notation Version 1.0(BPMN), BPMI , May 
2004. 
[Buhler 03] P. A. Buhler & J. M. Vidal, “Towards Adaptive Workflow Enactment 
Using Multiagent Systems”, Information Technology and Management Journal, 2003. 
[Burlton 01] R. T. Burlton, Business Process Management: Profiting from Process, 
SAMS, 2001 
[Chin 06] K.S. Chin, X.Zu, C.K. Mok and H.Y. Tam, “Integrated Intrgration 
Definition Language 0 (IDEF) and Coloured Petri Nets (CPN) Modeling and 
Simulation Tools: a Study on Mould Making Processes”, International Journal of 
Production Research, Vol.44, No.16 15, pp.3179-3205, 2006. 
[Cho 98] H. Cho, "Petri Net Models for Messages Manipulation and Event 
Monitoring in an FMS Cell", International Journal of Production Research, Vol.36, 
No.1, pp.231- 250, 1998. 
[Choi 02] I. Choi, C. Park and C. Lee, “A Transactional Workflow Model for 
Engineering/manufacturing Processes”, International Journal of Computer Integrated 
Manufacturing, , Vol. 15, No.2, pp.178-192, 2002. 
[Choi 03] I. Choi, M. Song, C. Park & N. Park, “An XML-based Process Definition 
Language for Integrated Process Management”, Computers in Industry, 2003. 
[Coves 98] C. Coves, D. Crestani, & F. Prunet, “Design and Analysis of Workflow 
Processes with Petri Net”, IEEE, 1998 
[Emig 06] C. Emig, J.Weisser and S.Abeck, “Development of SOA-Based Software 
Systems-an Evolutionary Programming Approach”, Proceedings of the Dvanced 
International Conference on Telecommunications and International Conference on 
Internet and Web Applications and Services (AICT/ICIW 2006), 2006.  
[Fung 03] R. Y. K. Fung, Y. M. Au, Z. B. Jiang & H. C. W. Lau, “Supply Chain 
Workflow Modeling Using XML-formatted Modular Petri Net”, International Journal 
of Advanced Manufacturing Technology, 2003. 
[Gourgand 03] M. Gourgand, P. Lacomme and M.K. Traore, “Design of a 
Monitoring environment for Manufacturing System Management and Optimization”, 
 19
Translating BPMN to BPEL. BPM Center Report BPM-06-02, BPMcenter.org, 2006. 
[Porter 85] M.E. Porter and V.E. Millar, “How Information Gives You Competitive 
Advantage”, Harvard Business Review, July-August, p.149-p.160, 1985. 
[Recker 06] J. Recker and J. Mendling, “On the Translation between BPMN and 
BPEL: Conceptual Mismatch between Process Modeling Languages”, The Eleventh 
International Workshop on Exploring Modeling Methods in Systems Analysis and 
Design (EMMSAD 2006), June 5 - 6, 2006, Luxembourg, p. 521-p532. 
[Scheer 00] A. W. Scheer, ARIS-Business Process Modeling, Springer-Verlag Berlin, 
2000. 
[Scheer 01] IDS Scheer AG., ARIS 6: Collaborative Suite: ARIS Methods, 2001. 
[Tenner 97] A. R. Tenner and I. J. DeToro, Process Redesign: The Implementation 
Guide for Managers, Addison Wesley Longman, Inc., 1997. 
[Tiwari 01] M.K. Tiwari, N. Sinha, S. Kumar, R. Rai and S.K. Mukhopadhyay, “A 
Petri Net Based Approach to Determine the Disassembly Strategy of a Product”, 
International Journal of Production Research, Vol.40, No.5, pp.1113-1129, 2001. 
[Yang 02] J. Yang and M. P. Papazoglou, “Web Component: A Substrate for Web 
Service Reuse and Composition”, Proceedings of the 14th International Conference 
on Advanced Information Systems Engineering, May 2002. 
[Wang 94] S. Wang, “OO Modeling of Business Processes: Object-Oriented Systems 
Analysis,” Information Systems Management, Spring, p 36-p43, 1994. 
[Wang 05] Z. Wang, J. Zhang, F.T.S. Chan, “A Hybrid Petri nets Model of 
Networked Manufacturing Systems and Its Control System Architecture “, Journal of 
Manufacturing Technology Management, Volume 16, Number 1, p36 – p52, 2005.  
[Venkatesh 95] K. Venkatesh and M. Ilyas, “Real-Time Petri Nets for Modeling, 
Controlling, and Simulation of Local Area Networks in Flexible Manufacturing 
Systems”, Computers in Industrial Engineering, Vol. 28, No.1, p147-p162, 1995. 
[Zhou 93] M.C. Zhou and F. DiCesare, Petri Net Synthesis for Discrete Event Control 
of Manufacturing Systems, Kluwer Academic Publishers, 1993.  
 21
 
 
 
 
(1) 
 
 
 
 
 
(2) 
 
 
 
 
 
 
Fig-2 Process Development Model 
Planning Definition Implementation Verification
Valid 
Invalid 
Planning Definition Implementation 
 23
 
 
 
 
 
Fig-4 Two Process Paths for a Workflow
 25
 
BPMN Event Petri Net 
 
 
 
 
P1 P2T1
 
 (1) 
 
BPMN Task Petri Net 
 
 
 
 
P1 P2T1
 
(2) 
 
BPMN Fork Petri Net 
 
 
 
 
 
 
P1
PF1
PF2
T1
(3) 
 
BPMN Join Petri Net 
 
 
 
 
 
 
P1
PF1
PF2
T1
 
(4) 
 
Fig 6 BPMN/PN Transformation Templates 
 27
 
<receive partnerLink="ncname" portType="qname" operation="EventTrigger" variable="ncname" createInstance="yes" 
        sequence="BlockNumber" aim=”BlockNumber” type=”Event”> 
</receive> 
Fig-7 Extended BPEL4WS for “Event” Element 
 
<!--Transition…………………………………………………………………………………………….………--> 
<xsl:element name="trans"> 
 <xsl:attribute name="id">ID<xsl:value-of select="/receive/@sequence"/>13</xsl:attribute> 
<!--Transition(posattr)……………………………………………………………………………………………--> 
 <xsl:element name="posattr"> 
   <xsl:attribute name="x"><xsl:value-of select="substring(receive/@sequence, 1 ,2) * 200 + 100"/></xsl:attribute> 
   <xsl:attribute name="y"><xsl:value-of select = "substring(receive/@sequence, 3, 3) * (-300)"/></xsl:attribute> 
 </xsl:element> 
<!--Transition(box)……………………………………………………………………………………………….--> 
<xsl:element name="box"> 
  <xsl:attribute name="w">60</xsl:attribute> 
  <xsl:attribute name="h">40</xsl:attribute> 
</xsl:element> 
<!--Transition(text)……………………………………………………………………………………..................--> 
<xsl:element name="text"> 
  <xsl:value-of select="/receive/@operation"/> 
 </xsl:element> 
</xsl:element> 
Fig-8 XSLT Transformation Template for the “Transition” of the PN in Fig-6-1 
 
<trans id="B1T1"> 
<posattr x="-100" y="100"/> 
<box w="60" h="40"/> 
<text>EventTrigger</text> 
</trans> 
Fig-9 Transferred CPNXML 
The coordinate 
transformation for the 
“transition” construct.
The transformation for the 
size of the “transition” 
construct.  
The transformation for the 
text of the “transition” 
construct.  
 29
 
Reachable Diagram for BPMN in Fig-10 Reachable Diagram for PN in Fig-10 
 
 
 
Fig-11 Reachable Diagram for BPMN and PN in Fig-10 
M0
M1
M2
M3
M4
M5 
M6 
Split Split
Fork
Join
Sequence 
Flow 
Sequence 
Flow
Deadlock
End of Process
M0
M1
M2
M3
M4
M5
M6
M7
M8
M9 
M10 
M11 
T1
T2
T4
T6
T7、T8
T9
T10
T11
T3
T5
T8
Deadlock
End of Process
 31
 
Reachable Diagram for BPMN in Fig-12 Reachable Diagram for PN in Fig-12 
M0
M1
M2
M3
M4
Sequence 
Flow
Sequence 
Flow
Sequence 
Flow
Fork
Fork
End of 
Process
 
 
Fig-13 Reachable Diagram for BPMN and PN in Fig-10 
M0
M1
M2
M3
M4
M5
M6
T1
T2
T3
T4
T5、T7
T2、T6End of Process
 33
 
 
(1) 
 
 
(2) 
 
 
011 Event 051 Fork 082 Activity 
021 Activity 061 Activity 091 Join 
031 Split 062 Activity 101 Activity 
041 Activity 072 Activity 111 Event 
(3) 
 
 
 
 
 
 
 
Fig-15 (1) An Original BPMN Model, (2) The Decomposition of the BPMN Model, 
(3) “BPMN Construct/Code” Table 
 35
 
011 021 031 042 051 061 091 101 111 
 
062 072 082 
   
(1) 
 
 
Event Activity Fork 
   
Join Split Merge 
   
(2) 
 
011 021 031 042 051 061 091 101 111 
 
062 072 082 
  
 
 
 
 
(3) 
 
Fig-17 (1) The Original CPNXML Blocks, (2) The Modified XSLT Translation 
Template, and (3) The Modified CPNXML Blocks 
 37
Fig-18 (1) Combined XML Codes for Block 011 and 021, (2) the “Add-Arc” Codes 
 
<?xml version="1.0" encoding="iso-8859-1"?> 
<workspaceElements> 
<generator tool="CPN Tools" version="1.2.0" format="3"/> 
<cpnet> 
<globbox> 
<block> 
<color> 
<id>STRING</id> 
<int/> 
<layout>color STRING = string;</layout> 
</color> 
<var> 
<type><id>STRING</id></type> 
<id>p</id> 
<layout>var p: STRING;</layout> 
</var> 
</block> 
</globbox> 
<page id="pageID"> 
<pageattr name="PetriNet"/> 
<Insert all of the Blocks> 
</page> 
</cpnet> 
</workspaceElements> 
(3) 
 
 
(4) 
 
Fig-18 (3) “Merge” XML Codes, (4) Merged CPN Model for the Sample BPMN 
Model (continued) 
 39
 
(1) 
 
 
(2) 
 
(3) 
 
 
Fig-20 (1) Order Processing BPMN Model, (2) The Order Processing PN Model 
Shown in CPN Tools, (3) The Modified BPMN Order Processing Model
 41
 
 P1 P2 P3 P4 P5 P6 P7 P8 P9 P10 P11 P12
M0 1 0 0 0 0 0 0 0 0 0 0 0 
M1 0 1 0 0 0 0 0 0 0 0 0 0 
M2 0 0 1 0 0 0 0 0 0 0 0 0 
M3 0 0 0 0 1 0 0 0 0 0 0 0 
M4 0 0 0 0 0 1 1 0 0 0 0 0 
M5 0 0 0 0 0 0 0 1 1 0 0 0 
M6 0 0 0 0 0 0 0 0 0 1 0 0 
M7 0 0 0 0 0 0 0 0 0 0 1 0 
M8 0 0 0 0 0 0 0 0 0 0 0 1 
M9 0 0 0 1 0 0 0 0 0 0 0 0 
M10 0 0 0 0 0 0 1 0 0 0 0 0 
M11 0 0 0 0 0 0 0 0 1 0 0 0 
 (1) 
 
 
 Start 
Event 
Activity 
A 
Activity 
B 
Activity 
C 
Activity 
D 
Activity 
E 
End 
Event 
M0 1 0 0 0 0 0 0 
M1 0 1 0 0 0 0 0 
M2 0 0 0 1 1 0 0 
M3 0 0 0 0 0 1 0 
M4 0 0 0 0 0 0 1 
M5 0 0 1 0 0 0 0 
M6 0 0 0 0 1 0 0 
(2) 
Table-1 Reachable Status for (1) PN and (2) BPMN Model in Fig-10 
 43
 
Extended BPEL4WS Codes for 011 Block 
<receive partnerLink="ncname" portType="qname" operation="None_Event" variable="ncname" createInstance="yes" 
        sequence="011" aim1="021" type="Event"> 
</receive> 
Extended BPEL4WS Codes for 021 Block 
<invoke partnerLink="ncname" portType="qname" operation="A" inputVariable="input_A" outputVariable="output_A" 
 sequence="021" aim1="031" type="Activity"> 
</invoke> 
Extended BPEL4WS Codes for 031 Block 
<switch sequence="031" aim1="101" aim2="041" type="Split"> 
  <case condition="Split1">acivity</case> 
  <case condition="Split2">acivity</case> 
</switch> 
Extended BPEL4WS Codes for 042 Block 
<invoke partnerLink="ncname" portType="qname" operation="B" inputVariable="input_B" outputVariable="output_B" 
 sequence="041" aim1="051" type="Activity"> 
</invoke> 
Extended BPEL4WS Codes for 051 Block 
<flow sequence="051" aim1="061" aim2="062" type="Fork"> 
  <invoke/> 
  <sequence/> 
</flow> 
Extended BPEL4WS Codes for 061 Block 
<invoke partnerLink="ncname" portType="qname" operation="C" inputVariable="input_C" outputVariable="output_C"  
sequence="061" aim1="091" type="Activity"> 
</invoke> 
Extended BPEL4WS Codes for 062 Block 
<invoke partnerLink="ncname" portType="qname" operation="Send_Invoice" inputVariable="input_SI"  
outputVariable="output_SI" sequence="062" aim1="072" type="Activity"> 
</invoke> 
Extended BPEL4WS Codes for 072 Block 
<invoke partnerLink="ncname" portType="qname" operation="D" inputVariable="input_D" outputVariable="output_D" 
 sequence="072" aim1="082" type="Activity"> 
</invoke> 
Extended BPEL4WS Codes for 082 Block 
<invoke partnerLink="ncname" portType="qname" operation="E" inputVariable="input_E" outputVariable="output_E"  
sequence="082" aim1="091" type="Activity"> 
</invoke> 
Extended BPEL4WS Codes for 091 Block 
<flow sequence="091" aim1="101" type="Join"> 
  <invoke/> 
  <sequence/> 
</flow> 
Extended BPEL4WS Codes for 101 Block 
<invoke partnerLink="ncname" portType="qname" operation="F" inputVariable="input_F" outputVariable="output_F" 
 sequence="101" aim1="111" type="Activity"> 
</invoke> 
Extended BPEL4WS Codes for 111 Block 
<receive partnerLink="ncname" portType="qname" operation="End_Event" variable="ncname" createInstance="yes"  
sequence="111" aim1="End" type="Event"> 
</receive> 
 
Table-3 Extended BPEL4WS Codes for the Sample BPMN Model Shown in Fig15-1 
 45
 
Boundedness Properties 
------------------------------------------------------------------------ 
Best Integers Bounds Upper Lower 
PetriNet'End 31 0 
PetriNet'Fork_041P 1 0 
PetriNet'Input_EndEvent 39 0 
PetriNet'Input_StartEvent 1 0 
PetriNet'input_CP 1 0 
PetriNet'input_PP 52 0 
PetriNet'input_TP 1 0 
   
Liveness Properties 
------------------------------------------------------------------------ 
Dead Markings: 672 [37016,37015,37014,37013,37012,...] 
Dead Transitions Instances: None   
Live Transitions Instances: None   
 
Table-5 Simulation Report for Production Process PN Model 
