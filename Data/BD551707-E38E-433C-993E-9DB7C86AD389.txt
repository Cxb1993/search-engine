共 17 頁 第 2頁
中英文摘要
非精確計算模型為傳統即時系統處理模型之延伸。在該系統中，非精確的作業分為主
要作業與可選擇之作業，由於可選擇之作業是可以取捨其時限與作業服務品質(或 x86 平
台之執行作業功率)，故此模型之不同的排程策略將影響其服務之結果。本研究呈現出二
個重要的關於 Deferred Optional Tasks (DOT)即時排程問題之結果。第一個重要的 DOT 即
時排程問題之結果是本研究證明 DOTwoP (imprecise DOT scheduling without preemption)非
搶佔問題於非精確計算模型中具有 NP-hardness property。第二個重要的 DOT 即時排程問
題之結果是本研究提出 DOTwP (imprecise DOT scheduling with preemption)可搶佔問題於
非精確計算模型中的一個具有 O(nlog2n) 複雜度的即時排程演算法。
The imprecise computation model is an extension of the traditional real-time processing
model. In this model, each imprecise task is logically divided into two portions: a mandatory
portion and an optional portion. Since the optional portions of imprecise tasks can be traded for
their deadlines and/or the required quality of service (QoS, or power of processing on x86
platform), the resulting quality of executing tasks in this model can be controlled by different
strategies of the scheduling algorithms. In this research, we present two significant results
pertaining to on-line scheduling problems in the model of imprecise computation obeying
Deferred Optional Tasks (DOT) scheduling discipline. The first significant result presented is, to
the best of our knowledge, the very first proof of NP-hardness property for the problem of
on-line, imprecise DOT scheduling without preemption (DOTwoP). And the second one is that
we propose an O(nlog2n) algorithm to solve the problem of on-line, imprecise DOT scheduling
with preemption (DOTwP) when tasks are ready upon arrival.
.
關鍵字：real-time system; imprecise computation model; on-line preemptive scheduling
algorithm; deferred optional tasks
共 17 頁 第 4頁
always be precisely scheduled to complete by their deadlines [13]. However, previous works did
not consider the possibility that the optional tasks can be deferred for helping arrival on-line
manda-tory tasks to meet the FMC. That is, the deferred optional tasks can be deleted to reserve
space for the on-line mandatory task. In this paper, we explore the research topic of de-ferring
optional tasks to increase the schedulability of the oncoming mandatory portions of on-line tasks
and also keep the total error minimized.
The algorithms proposed in this paper further expand the previous work described in Shih
and Liu [13] (called algorithm NORA). NORA is designed for scheduling on-line task systems in
which each task is ready upon arrival, and is optimal in the sense that it can minimize total error
under FMC. The main scheduling mechanism applied in NORA is that it employs the
reverse-scheduling technique to construct a reservation list for mandatory portions of all arrived
tasks. According to the reverse-scheduling technique used in NORA, the execution time for
mandatory portion of each arrived task is reserved in the reservation list by inserting the exact
magnitude starting from its deadline toward the beginning of the list. And then, in a greedy
fashion, optional portions will be sched-uled and executed as much as possible, if there are gaps
in the reservation list. In this way, the incurred total error can be guaranteed to be minimized, and
hence the algorithm NORA reaches its optimality.
Please note that in the NORA algorithm, the executions of mandatory tasks are de-ferred
such that the total error can be minimized. In [2][7], the authors try to increase the schedulability
of on-line mandatory tasks by scheduling all mandatory tasks first. The disadvantage of their
approach is that the total error is no longer minimized. In this paper, we apply a different point of
view. In other words, if we can find a way to defer the exe-cution of optional tasks as much as
possible while maintaining minimized total error, it may have chances to improve the overall
schedulability for on-line mandatory tasks of a real-time system in the imprecise computation
model. Besides, from the viewpoint of fault tolerance capabilities for a system under the
imprecise computation model, it is rea-sonable to assume that the recovery block of an occurred
fault plays the same role as an on-line mandatory task. Therefore, the system with high
schedulability for on-line man-datory tasks will have a better chance to discover and handle a
fault situation earlier. In other words, deferring optional tasks is a good scheduling strategy for
supporting fault-tolerance in a task system.
研究方法
1. On-line Scheduling Problems under Imprecise Computation Models
In an imprecise computation model, we are given a set of on-line, preemptive, imprecise
tasks T={T1, T2,…, Tn} in which each task Ti is characterized by the following parameters:
 arrival time ai at which Ti arrives
 ready time ri at which Ti becomes ready for execution
 deadline di by which Ti must be completed
 processing time pi which is the time required to execute entire Ti
 processing time mi which is the time required to execute the mandatory portion (Mi ) of Ti
 processing time oi which is the time required to execute the optional portion (Oi ) of Ti
 processing timeπi which is the time assigned by the scheduler to execute Ti
 error ei which is incurred by executing Ti
Since Ti is divided into Mi and Oi , pi = mi + oi . Note that, by definition, πi must be equal
to or greater than mi , and ei = pi-πi. The total error incurred by executing the task set T is equal
toΣei , from i = 1 to i = n. NORA is designed for tasks that is ready upon arrival (i.e. ai = ri), and
its scheduling objective is to minimizeΣei under FMC.
共 17 頁 第 6頁
3. DOT SCHEDULING PROBLEMS
3.1 Problem Definition
We are given a set of on-line tasks T={T1, T2,…, Tn} for a real-time system employing the
imprecise computation model, where each task Ti in T for the system are ready upon arrival (i.e. ri
= ai) and is, without lose of generality (for simplicity of proof), assumed to be either a mandatory
task (i.e. oi = 0, Ti = Mi) or an optional task (i.e. mi = 0, Ti = Oi) and can be characterized by the
parameters as defined in section 2.1. Furthermore, we say a schedule S, for a task set T, satisfies
the Deferred Optional Tasks (DOT) scheduling discipline, if the following two conditions hold:
(1) the resulting total error is minimized, that is, the total error is equal to the schedule generated
by the NORA algorithm, and
(2) the optional tasks are deferred as late as possible. In other words, the mandatory tasks are
scheduled as soon as possible, that is, for any other schedule S’≠S that satisfies 1, at any time
instant t, the number of mandatory tasks scheduled before t in S is larger than or equal to that
in S’(Mandatory tasks in S and in S’must be scheduled in EDF basis). Hence, DOTwoP
(DOTwP) is trying to find solutions to DOT scheduling problem for nonpreemptive
(preemptive) mandatory and optional tasks.
3.2 NP-hardness for the Problem DOTwoP
Theorem 1 The Deferred Optional Tasks scheduling without Preemption (DOTwoP) problem is
NP-hard.
Proof: We try to prove that the Partition Problem (PP) is polynomial time reducible to the
problem DOTwoP. PP is a known NP-complete problem. Let X be an instance of problem PP,
where  nxxxxX ,...,,, 321 , and  ni ixw 1 .
Thus, the instance X of PP is for determining whether there exist two sets A, B such that
BAX  , BA , and   B iA i ii   w/2. Then we make a simple transformation on X :
For every  nxxxxX ,...,,, 321 , we construct a task set T consisting of n mandatory tasks and 1
optional task as a corresponding instance in the DOTwoP problem, that is,
 1321 ,,...,,,  nn OMMMMT where on+1 = 1, dn+1 = w/2+1, mi = xi, ri = ai = 0, and di = w+1, for 1i
n.
It is quite obvious that the transformation takes merely linear time. Subsequently, to
complete the proof of NP-hardness, we attempt to give the proof that ‘there is a solution to the
above stated PP, if and only if there is an optimal solution to the DOTwoP problem and the
optional task only one must be scheduled in the time interval (w/2, w/2+1).
Only if part)
If there is a solution to the PP, the optimal schedule can be constructed according to this
solution as follows:
(1) Place all mandatory tasks corresponding to A in the time interval (0, w/2).
(2) Place all mandatory tasks corresponding to B in the time interval (w/2+1, w+1).
(3) Locate 1nO in the time interval (w/2, w/2+1).
Refer to Figure 2 for the constructed schedule, its total error is zero and hence minimized.
Since the optional task is deferred as late as possible, 1nO must be located right before its
deadline (i.e. w/2+1). There cannot be a way to schedule any mandatory task in B earlier;
otherwise, 1nO would miss its deadline, causing an error. In other words, while the schedule must
produce a minimized total error, all mandatory tasks in B can not be scheduled earlier. Thus,
共 17 頁 第 8頁
Event_1: The current time t reaches the beginning of R(M).
Event_2: The current time t reaches the beginning of R(O).
Event_3: A new task arrives.
Figure 4 represents the pseudo code of DOT_Sched algorithm. When Event_1 occurs, all
mandatory tasks in R(M) must be executed; otherwise they will miss deadline (no mandatory
tasks should miss deadline). When these tasks are finished, their reservations are removed from
R(M) and R(M+O) respectively. After these mandatory tasks are scheduled, we have a new
current time, denoted by z. If z-Rz(O)>0, we remove z-Rz(O) units of reservations for optional
tasks (earliest deadline first) from R(M) and R(M+O). When Event_2 occurs, if the execution of a
mandatory task will not decrease the total execution time of the optional tasks in the system (that
is, no extra error is introduced), the processor selects one unit of mandatory task with earliest
deadline for execution. Otherwise, one unit of optional task with earliest deadline must be
executed. After the execution, some related tasks must be removed from R(M), R(O), and
R(M+O). When Event_3 occurs, a new on-line task arrives. If the new task is a mandatory task,
the scheduler verifies the property of FMC for this new task. If it does not satisfy the requirement
of FMC, the task is rejected. Otherwise, the task makes reservations on R(M) and R(M+O). If the
new task is an optional task, the task makes reservations on R(O) and R(M+O). After that, the
scheduler needs to remove some optional tasks (with earliest deadline) from R(O) and R(M+O)
such that the beginning of R(O) is larger than or equal to current time.
共 17 頁 第 10 頁
The operations of the DOT_Sched algorithm are illustrated by the example in Figure 5.
Figure 5(a) is a set of on-line tasks. No task arrives after t = 1. Figure 5(b) shows the contents of
three reservation lists R(M), R(O) and R(M+O) at different time instants. Figure 5(c) presents the
resulting schedule produced by the algorithm. Initially, at time 0, some optional tasks are deleted
from R(O) and R(M+O) such that Rt (O) = Cur(t) (current time), and then Event_2 occurs because
of R(O) = Cur(t) and Rt (M+O) < Cur(t). At this time, one unit of M2 is scheduled for execution.
The scheduler deletes one unit of M2 from R(M) and R(M+O) and one unit of O1 from R(O) and
R(M+O). At time 1, Event_3 occurs because the on-line task Q1 arrives. R(O) and R(M+O) are
updated by making reservation for Q1. Since R(O) < Cur(t), both R(O) and R(M+O) must delete
one unit of O1 such that R(O) = Cur(t). Then, Event_2 occurs because of R(O) = Cur(t) and Rt
(M+O) < Cur(t). Therefore, the schedule can choose mandatory tasks (M2) for execution. One
unit of M2 is removed from R(M) and R(M+O) and one unit of O1 is removed from R(O) and
R(M+O). At time 2,3, and 4, Event_2 occurs because of R(O) = Cur(t) and Rt (M+O) = Cur(t).
The scheduler assigns one unit of Q1 and two units of O3 to processor for execution sequentially
and deletes one unit of Q1 and two units of O3 from R(O) and R(M+O). The final schedue
produced by DOT_Sched is shown in Figure 5(c).
Ti ai di mi oi
O1 0 2 0 3
M2 0 3 2 0
O3 0 5 0 2
Q1 1 4 0 2
(a) An on-line task set
R(M+O)
R(M)
R(O)
0 1-1-2 2 3 4 5
Initial
M2
O3O1
R(M+O)
R(M)
R(O)
M2
O1 M2 O3
R(M+O)
R(M)
R(O)
M2
O1 M2 O3
O3O1
M2 O3
O3
R(M+O)
R(M)
R(O)Q1O1
Q1O1
M2
R(M+O)
R(M)
R(O)
M2
O1 M2 O3
O3O1
M2 O3Q1
O3Q1
Cur(t )= 1
0 1-1-2 2 3 4 5
R(M+O)
R(M)
R(O)
O3
O3
R(M+O)
R(M)
R(O)
O3
O3
R(M+O)
R(M)
R(O)
O3Q1
O3Q1
R(M+O)
R(M)
R(O)
Cur(t )= 2
Cur(t )= 3
Cur(t )= 4
Cur(t )= 5
(b.1) The reservation lists at time 0 and 1 (b.2) The reservation lists at time 2,
3, 4 and 5
(b) The reservation lists of R(M), R(O), and R(M+O)
Q1M2 M 2 O3 O3
10 2 3 4 5
(c) The final schedule
Fig. 5. An example illustrating the DOT_Sched algorithm
共 17 頁 第 12 頁
tasks obey the “as soon as possible”scheduling discipline. If mandatory tasks in S’are not
scheduled in EDF basis, since EDF is optimal, we can carry out an EDF-rescheduling on
mandatory (and then on optional) tasks only. That is, we actually reschedule all tasks in S’, but no
time trading occurs between mandatory tasks and optional tasks. Let S’denote the schedule
created by the EDF-rescheduling process of S’. Now we try to compare S with S’; let t be the
earliest time instant that a mandatory task, say M, is scheduled in S’while an optional task, say
O, is scheduled in S. Because we apply EDF to S and S’, the schedule before t in S and S’must
be the same. Now, let’s look at schedule S, in which we schedule an optional task instead of a
mandatory task at time t. According to the algorithm DOT_Sched, at time t, the reason we
schedule O instead of M is that if we schedule M rather than O, extra error will be incurred. Since
S and S’are the same in [0,t], and in schedule S’one unit of mandatory task is scheduled at time
t, therefore, the schedule S’should have one more unit of error than schedule S. That is, S’is not
an optimal schedule with minimum error. This is a contradiction.■
According to Lemma 1 and Lemma 2 we have:
Theorem 3 Algorithm DOT_Sched can find an optimal schedule for the problem DOTwP.
3.4 Time complexity analysis of algorithm DOT_Sched
In algorithm DOT_Sched, we only need to set the scheduling point into the following time
instants:
(1) Any time instance in which some task is finished
(2) When Rt(M+O) < Cur(t), we can set next scheduling point into Cur(t) + (Rt(O)–Rt(M+O)).
(3) When Rt(O) = Rt(M+O) = Cur(t), we need to schedule all optional tasks in R(O) until we
reach the first idle time in R(O) ( from the beginning of the list). So, in this case, we just
schedule optional tasks according to R(O) until we reach the first idle time in R(O). Optional
tasks that are scheduled in this case are also finished completely.
In each case of (1), (2) and (3), the total number of scheduling points are O(n), where n is
the number of tasks. Therefore, the maximum number of scheduling points of our algorithm is
equal to O(n). At each scheduling point, we need to update R(M), R(O) and R(M+O). It is also a
critical part when new on-line task arrives. Intuitively, we have to reconstruct the reservation list
R(M+O) by reverse EDF scheduling algorithm, which costs run-time O(nlogn). Hence, algorithm
DOT_Sched has run-time O(n2logn).
Fortunately, we can apply the hierarchical tree structure in [13] to maintain the reservation
lists of R(M), R(O) and R(M+O). In [13], there is an array P to record the latest time by which
each task should be executed. We can use such arrays to represent R(M), R(O) and R(M+O)
respectively. The elements of array P are the leaves in a hierarchy of priority queues. The value of
each internal node of the binary tree is the total offset that applies to all leaves of the subtree
rooted by this internal node. When inserting the reservation of any task to these reservation lists
or deleting the reservation of any task from these reservation lists, we can modify the variation by
updating the offset value in internal nodes. Therefore, the update of these reservations cost O
(logn) time (amertized). When on-line tasks arrive, the binary tree of the priority queue must be
expanded to supply the elements of these on-line tasks. To avoid destroying the completeness of
the binary tree, each leaf of the priority queue is assigned a hierarchy of priority queues with at
most O (logn) layers. Hence, the on-line task can be inserted in a hierarchy of priority queues
belongs to a leaf whose deadline is larger than the deadline of the on-line task (the details are
described in [13]). According to the operation proposed in [13], it costs O (log2n) time
complexity to updating the reservation lists through tree structure. As we mentioned before, the
number of scheduling points is equal to O (n), and hence the overall running time of DOT_Sched
共 17 頁 第 14 頁
2. Experiment Results
Figure 8 shows the acceptance ratio of online tasks under different arrival rates, ranging
from 1 to 15. The evident shows that the acceptance ratio of online tasks in DOT_Sched
algorithm is almost comparable to that in the MF algorithm and much better than that in the
NORA algorithm. The simulation result shows that the DOT_Sched algorithm outperforms 25% ~
40% better than the NORA algorithm, in terms of the acceptance ratio.
0
0.2
0.4
0.6
0.8
1
1.2
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
Arrival Rate(Transactions/sec)
O
nl
in
e
T
as
ks
A
cc
ep
ta
nc
e
R
at
io
MF
NORA
DOT_Sched
Fig. 8. Performance analysis of Acceptance Ratio
3. Analysis of Minimum Errors
The acceptance ratio of our DOT_Sched algorithm is almost as the same as that of the MF
algorithm, while the DOT_Sched algorithm still guarantees that the total error is minimized (,
which is not guaranteed by the MF algorithm). For example, in Figure 9, we show that the
DOT_Sched algorithm can execute more optional tasks than the MF algorithm under the same
task set. The scheduling results for MF and DOT_Sched algorithm are presented in Figure 9(a)
and Figure 9(b), respectively. Obviously, the DOT_Sched algorithm completed more optional
tasks than the MF algorithm did, resulted in the smaller total errors. Furthermore, to keep the total
error minimum, the DOT_Sched algorithm needs to execute an additional optional task O1 at the
scheduling decision time 1. The decision makes the task M3 together with all unfinished
mandatory tasks un-schedulable when the online task M3 arrives at time 3 (due to the time
interval (1,2) is assigned to O1). Therefore, M3 is rejected from execution. This is exactly the only
case that the DOT_Sched algorithm incurs slightly lower acceptance ratio than the MF algorithm.
On the contrary, Figure 9(c) shows that the MF algorithm can not keep the total error
minimum. Assume that M3 does not arrive, which means that no task can be scheduled at the time
interval (3,4) according to the MF algorithm. Therefore, comparing to the DOT_Sched algorithm,
the total error of the MF algorithm is increased by one.
Ti ai di mi oi
M1 0 2 1 0
M2 1 4 1 0
O1 1 3 0 2
M3 3 4 1 0
共 17 頁 第 16 頁
Applications Symposium, pp. 255-264.
9. Liu, J.W.S, Shih, W.K, Lin, K. J., Bettati, R., Chung J. Y., “Imprecise Computations,” IEEE
Special Issue on Real-Time Systems, pp. 83-94.
10. Mehrotra, A., “Introduction to Global System for Mobile Communications,”GSM system
engineering, Artech House.
11. Shih, W.K., Lee, C.R., Tang, C.H., “A fast algorithm for scheduling imprecise computations
with timing constraints to minimize weighted error,”The 21th IEEE Real-Time Systems
Symposium, pp. 305-310.
12. Shih, W.K, Liu, J.W.S., “Algorithms for Scheduling Imprecise Computations to minimize 
maximum error,” IEEE Transactions on Computers, Mar. 1995, pp. 466-471.
13. Shih, W.K., Liu, J.W.S.,”On-line Algorithms for Scheduling Imprecise Computations,” SIAM
J. on Computing, pp. 1105-1121.
14. Shih, W.K., Liu, J.W.S., Chung, J.Y., “Fast Algorithms for Scheduling Imprecise 
Computations,” SIAM J. on Computing. 20(3), pp. 537-552.
15. Tang, M.C., Chang, R.C., Shih, W.K., “Software Radio System Design for Accessing 
Wireless Multimedia Services,” Int'l Journal of Computer Research. 10, pp. 347-360.
16. Zhao, W., Lim, C.C., Liu, J.W.S., Alexander, P. D., “Overload Management byImprecise
Computation,” Imprecise and Approximate Computation, S. Natarajan (ed), Chapter 1,
Kluwer Academic Publishers, Boston, pp 1-22.
計畫成果自評
本計劃之執行後，獲得重大成果的部份已經與 Jia-Ming Chen, Wan-Chen Lu, 及
Wei-Kuan Shih 教授,等共同研究人員與學者撰寫論文“Imprecise Computations with
Deferred Optional Tasks”並發表於 Journal of Information Science and Engineering,
(Vol. 25 No. 1, pp.185-200, January 2009, SCIE)，相關理論證明與實驗模擬數據可應
用於 x86 之系統平台中，做為考慮功耗之排程法的參考設計之重要依據，並為我國電子工
業的發展盡一份心力。
