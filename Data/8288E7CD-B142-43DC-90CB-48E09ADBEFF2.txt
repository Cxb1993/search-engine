  2 
ABSTRACT 
 
Many burst construction algorithms for Orthogonal Frequency Division Multiple 
Access (OFDMA) were proposed. However, these algorithms didn’t consider the 
characteristics of burst structure specified in IEEE 802.16 standard. This paper 
proposes two algorithms, named Best Corner Oriented (BCO) and Best Subchannel 
Oriented (BSO) algorithms, to provide high throughput for uplink burst construction in 
802.16 networks. BCO keeps all available slots as a continuous area and tries to 
construct each burst from two ending slots of this area. On the other hand, BSO places 
each burst on its best subchannels to adopt a better modulation coding scheme (MCS). 
From simulation results, BSO and BCO can achieve twice and 1.5 times, respectively, 
throughput obtained by the previous algorithm, Raster, under the heavy load. Also BSO 
obtains the better performance than BCO at the expense of higher time complexity. 
 
Keywords: IEEE 802.16, WiMAX, Burst Construction, Scheduling 
 
 
  4 
burst can provide the capacity larger than requested bandwidth, causing that some 
unused slots internal to a burst are wasted. Third, the burst should be constructed in its 
corresponding good subchannels, so it can adopt a satisfactory MCS. 
This paper proposes two novel algorithms, named Best Corner Oriented (BCO) 
and Best Subchannel Oriented (BSO) algorithms, which try to maximize the 
throughput with considering the issues mentioned above. BCO mainly focuses on 
avoiding external fragmentation while BSO mainly focuses on using a better MCS, 
while they both can solve the problem of internal fragmentation. To avoid external 
fragmentation, BCO keeps all free slots as a continuous area and tries to construct 
each burst from two ending slots of this area. On the other hand, BSO places each 
burst on its best subchannels for adopting a better MCS. For avoiding the internal 
fragmentation, BCO and BSO all shrink the size of the burst if the requested 
bandwidth is satisfied, and thus unused slots internal to this burst can be utilized by 
other bursts. 
The organization of this paper is as follows. Section 2 describes the background 
including the IEEE 802.16 network, the burst construction in uplink transmission, and 
previous related works. In Section 3, the problem statement of burst construction is 
formally illustrated and the issues to handle this problem are presented. In Section 4, 
our proposed algorithms, BCO and BSO, are described in detail. In Section 5, the 
effectiveness of the proposed algorithms compared with Raster is demonstrated by 
simulation. Finally, some conclusions are given in Section 6. 
2. Background 
2.1. IEEE 802.16 Network 
The 802.16 network is constructed by a base station (BS) and some subscriber 
stations (SSs). The BS provides connectivity, radio resource management, and control 
of SSs, and the SS supports the connectivity between it and the BS.  
The IEEE 802.16 protocol stack consists of two layers: physical layer and MAC 
layer. The former provides the means to transfer raw data while the latter is designed 
to support the physical layer for efficiently managing radio resource. For the physical 
layer with OFDMA, there are three duplex modes: Time Division Duplex (TDD), 
Frequency Division Duplex (FDD), and Half-duplex Frequency Division Duplex 
(H-FDD). TDD is the most attractive duplex mode because of its flexibility [3]. On 
the other hand, three modulations including quadrature phase shift keying (QPSK), 16 
quadrature amplitude modulation (16QAM), and 64 quadrature amplitude modulation 
(64QAM) with different coding rates are used according to the channel quality, i.e. 
SNR, for data transmission. 
An IEEE 802.16 frame is a complete set for downlink and uplink transmissions, 
and divided into downlink (DL) and uplink (UL) subframes in the time domain of the 
  6 
related factors. For flow scheduling, many algorithms were proposed and had been 
investigated in [15]. On the other hand, the task of burst construction constructs a 
burst for each connection according to the number of the allocated slots, the burst 
structure, channel quality variation, computational complexity, and so on. This paper 
aims at the topic of burst construction in the uplink transmission. 
2.2. Burst Construction in Uplink Transmission 
The uplink burst structure specified in IEEE 802.16 standard is based on the 
uplink-partial usage of subchannels (UL-PUSC) method [3], where the burst can use 
partial subchannels in the OFDMA frequency range. There are three distinct 
characteristics with regard to the uplink burst. First, the burst has to be a continuous 
area to minimize the overhead of UL-MAP, since UL-MAP is transmitted with lowest 
data rate to provide robustness, e.g. QPSK modulation, to ensure that all SSs can 
decode its embedded contents even in bad channel condition. Second, the uplink burst 
is a multi-rectangular shape [2], which starts from one slot, advances along the time 
axis until reaching the end of the current subchannel, continues to the next subchannel, 
and finally ends on one slot. With this multi-rectangular shape, the SS can transmit 
data to the BS by as less subchannels as possible to save the electric power. Third, the 
SS will face various SNRs on different subchannels resulting from varying condition 
or noise in each subchannel. To minimize the overhead and the complexity of MAC 
control messages, each burst only adopts a MCS based on the worst SNR of all 
assigned subchannels.  
su
bc
ha
nn
el
 lo
gi
ca
l n
um
be
r
M
od
ul
at
io
n 
C
od
in
g 
S
ch
em
e 
(b
yt
es
/s
lo
t) 
fo
r t
hi
s 
C
on
ne
ct
io
n
 
Figure 2. An Example of Constructing an Uplink Burst 
 
As shown in Figure 2, an uplink connection with 21 slots allocated by the flow 
scheduler is taken as an example. For simplicity, we transform the SNR of each 
subchannel into its corresponding MCS (bytes/slot). A burst can be constructed from 
  8 
position of each burst in the bandwidth area to maximize the overall throughput of all 
constructed bursts. A typical solution is the Raster algorithm, which constructs each 
burst starting from the top-left corner of the bandwidth area, continuing along the time 
axis until reaching the end of the current subchannel, and then advancing to the next 
subchannel [2]. The procedure ends until the required number of slots is fulfilled. 
Instead of horizontal direction used in [2], some studies designed the approaches that 
construct bursts following a vertical direction [10-12]. Wang provided the Weighted 
Less Flexibility First algorithm (WLFF) which selects the best edge from the free 
space and constructs the burst on this edge. The best edge means that a burst 
constructed in this edge will generate the least number of edges on the free space, so 
that the flexibility for constructing the following bursts is maximized [13] 
Nevertheless, as shown in Table 1, the methods in [10-13] are not suitable for 
constructing UL bursts because the shape of each UL burst must be multi-rectangular. 
Also all Bin-Packing solutions completely neglect the characteristic of subchannel 
diversity. 
 
Table 1. Comparisons among Related Works. 
YesNo NoHungary Algorithm
Max-Min 
Allocation
DFS
4O( )M
L: num. of connnections, M: num. of subchannels, i: maximum num. of repetition
3O( )M YesNo No
O( )iL No No Yes
Sheu, et al. [4]
Toufik, et al. [5]
Chen, et al. [6]
Greedy O( )LM No No YesNajeh, et al. [7]
Greedy O( )LM No No YesKivanc, et al. [8]
O( )LM Yes No YesErgen, et al. [9]
Sequentially 
construct 
bursts from 
one side to 
another
O( )LM NoNo Yes
Yes For DL-Burst No
Raster, et al. [2]
Ohseki, et al. [10]
2O( )L No For DL-Burst NoSo-In, et al. [11]
O( )LM No For DL-Burst NoErta, et al. [12]
WLFF 2O( )L No For DL-Burst NoWang, et al. [13]
O( )LM
 
3. Problem Statement 
This section gives a formal problem statement for the two-dimensional uplink 
burst construction. First some notations used in this paper are defined in Table 2.  
As described in section 2, a two-phase bandwidth allocation is adopted. Let allC  
be the set of all uplink connections and L be the number of all uplink connections, i.e., 
  10 
iB  The constructed burst for iC . 
iNOS  The number of occupied slots by iB . 
iMCS  The MCS adopted by iB . 
iTh  Throughput achieved by iC   
 
To solve the above problem, some conditions making bandwidth waste should be 
avoided. The following issues should be considered at designing an excellent burst 
construction algorithm. 
1. External Fragmentation. Since an UL burst is a multi-rectangular shape, a 
type of continuous area, a phenomenon of external fragmentation may 
happen. This phenomenon means that the available slots are divided into 
some small pieces and unable to fulfill the demand of bursts even when the 
total capacity is sufficient. As shown in Figure 3(a), for connection 1C , 
although the total free slots are enough for 1A , burst 1B  can not be 
constructed because the free bandwidth is divided to some pieces that are too 
small to accommodate it. 
2. Internal Fragmentation. In general, for any connection iC , the number of 
occupied slots, iNOS  should be equal to the allocated number of slots, iA . 
However, when burst iB  is constructed in good subchannels and thus has an 
excellent iMCS , the throughput that iA  can provide may exceed iW . This 
case will cause internal fragmentation, meaning that only some slots within a 
burst are used to transmit data and the remains are wasted. As shown in 
Figure 3(b), 1C  only uses 13 slots to transmit data and the remaining 3 slots 
are wasted. 
3. Subchannel Diversity. The SS will face various SNRs on different 
subchannels resulting from varying condition or noise in each subchannel. 
Thus, if the burst constructer constructs each burst on its corresponding bad 
subchannels, i.e., a low MCS, the bandwidth is definitely poorly-utilized. As 
shown in Figure 3(c), the throughput of 1C  is low when 1B  is constructed 
on the subchannels (subchannel 2 and subchannel 3) with bad channel quality 
while the throughput is high when 1B  is constructed on the subchannels 
(subchannel 5 and subchannel 6) with good channel quality. 
 
1W1A 1B   1W1A 1B1B  
      (a) External Fragmentation                       (b) Internal Fragmentation  
  12 
B
iB , from Ecorner backward. Then BCO compares 
F
iB  with 
B
iB  and determines 
which is the better, meaning that it owns the higher throughput or the less number of 
occupied slots. BCO actually constructs the best burst and updates the corresponding 
corner accordingly. 
The Forward function tries to virtually construct a burst from Scorner for 
connection iC  according to its iA  and iW . The function uses x2 and y2 to record the 
current ending slot of the constructed burst and are initially set as Scorner. It first 
constructs a temporary burst, tmpB , from Scorner to slot(x2, y2). Using tmpB , this 
function can easily find whether the constructed burst shall stop or not. That is, when 
the number of occupied slots is not enough, NOSCal( )tmp iB A< , and the provided 
bandwidth dose not satisfy the requested bandwidth, itmp WBi <),(ThCal , the burst 
shall be expanded to the next slot. In this case, the current x2 and y2 should be updated 
to advance to the next slot. This function then checks the new temporary burst which 
ends in the next slot repeatedly until the loop should stop. Finally, it returns the 
constructed burst to BCO main program. Using the same concept, the Backward 
function can be easily programmed as Figure 4. 
Two points are worthily noticed in Figure 4. First, the flow scheduler usually 
refers the total number of slots in the UL subframe to allocate the number of slots for 
each connection. That is, the sum of all allocated slots is equal to the total number of 
slots in the UL subframe. Thus, even using fewer slots to satisfy the requested 
bandwidth to avoid internal fragmentation, the saved slots are not useful. BCO tries to 
let the saved slots from the former bursts be utilized by the latter bursts. It uses a 
variable, saving, to record the number of saved slots. Thus a burst with iA saving+  
slots can be constructed for iC , as shown in line 19 of Figure 4. 
Second, in some cases, a phenomenon of throughput anomaly, that a larger burst 
may provide lower throughput, exist because it adopts a smaller MCS. For example, 
as Figure 5 shows, although burst yB  is larger than burst xB , the throughput 
provided by the former is much lower than the latter because yB  adopts a smaller 
MCS. In this case, a smaller burst which provides the largest throughput should be 
constructed to avoid the waste of slots. For connection iC , to find the optimal 
throughput among all bursts of which the size is less than iA , the Forward function 
continuously constructs a new temporary burst, tmpB , by expanding one more slot and 
records the optimal burst besttmpB  until now. When the loop (line 19~24) ends, this burst 
  14 
; 0 ; )1,1( ; )0,0( =--== savingNMEcornerScorner
BCO Algorithm
2
; obtain   to),(Forward Call FiBScorneri
; obtain   to),(Backward Call BiBEcorneri
If (( ThCal( , ) ThCal( , )) ||
      (( ThCal( , ) ThCal( , )) && (NOSCal( ) NOSCal( ))))
F B
i i
F B F B
i i i i
i B i B
i B i B B B
>
== <
} ; ),next( ;  { 22 _yB_xBScornerBB
F
i
F
i
F
ii ==
Else
} ; ),previous( ;  { 11 _yB_xBEcornerBB
B
i
B
i
B
ii ==
; )(NOSCal ii BAsavingsaving -+=
1
3
6
7
8
9
10
11
12
13
14
15 )),(,(Forward 11 yxi
16 {
; ),(),( 1122 yxyx =17
18 ; )],(),,[( 2211 yxyxBB tmp
best
tmp ==
19 While((NOSCal( ) ) && (ThCal( , ) ))tmp i tmp iB A saving i B W< + <
{
}
}
20 {
21 2 2 2 2( , ) next( , ) ;  //advance to the next slotx y x y=
22 ; )],(),,[( 2211 yxyxBtmp =
;  ) ),(ThCal),(ThCal If( tmp
best
tmp
best
tmptmp BBBiBi =>23
24 }
25 ; Return besttmpB
26 }
4
5
) 10 For( -££ Li
{
27 )),(,(Backward 22 yxi
28 {
; ),(),( 2211 yxyx =29
30 ; )],(),,[( 2211 yxyxBB tmp
best
tmp ==
31 While((NOSCal( ) ) && (ThCal( , ) ))tmp i tmp iB A saving i B W< + <
32 {
33 1 1 1 1( , ) previous( , ) ;  //advance to the previous slotx y x y=
34 ; )],(),,[( 2211 yxyxBtmp =
;  ) ),(ThCal),(ThCal If( tmp
best
tmp
best
tmptmp BBBiBi =>35
36 }
37 ; Return besttmpB
38 }  
Figure 4. The BCO Algorithm 
 
NOSCal( ) 16 slots, MCSCal( , ) 24 bytes/slot, 
ThCal( , ) 384 bytes/slot
x x
x
B i B
i B
= =
=
NOSCal( ) 17 slots, MCSCal( , ) 9 bytes/slot,
ThCal( , ) 153 bytes/slot
y y
y
B i B
i B
= =
=
 
    (a) Construct burst xB  of 16 slots           (b) Construct burst yB  of 17 slots  
    Figure 5. An Example of Throughput Anomaly 
 
  16 
further expanded and the saved slots can be utilized by later bursts. Finally, to reduce 
external fragmentation, BSO shrinks a burst if all available areas can not 
accommodate it. Thus a shrunk burst can fit into a proper available area, eliminating 
the problem of external fragmentation. 
As the pseudo code shown in Figure 7. Since the available areas are scattered on 
the uplink subframe, only remembering two corners is insufficient. Thus for each 
subchannel j, BSO remembers its first available slot FASj. That is, in subchannel j, 
slot(j,0) to slot(j, 1jFAS - ) are unavailable while slot(j, FASj) to slot(j, 1N - ) are 
available. Two extreme cases, FASj=0 and FASj=N denote that all slots in subchannel j 
are available and unavailable, respectively. 
Initially, BSO sets all FASj as zero since all slots are available. For each 
connection iC , BSO first sets the current best burst, 
best
iB  as empty. Then it 
repeatedly invokes the Forward function to virtually construct a burst, jiB , starting 
from slot(j, FASj) if subchannel j has any free slots. BSO compares jiB  with 
best
iB  
and determines which is the better, meaning that it owns the higher throughput or the 
less number of occupied slots. Then BSO updates bestiB  if necessary. After virtually 
constructing all jiB  and finding out the best burst 
best
iB , it actually constructs iB  as 
best
iB  and updates the values of saving and corresponding FASs. 
To reduce external fragmentation, BSO will shrink the burst to fit the size of 
current available area. Thus recording which slots are available is necessary. BSO 
uses a M N´  array, marked, to record whether each slot is available. A marked slot 
means that it has been occupied by a burst. Thus, at constructing a virtual burst in the 
Forward function, the loop should end if the ending slot is marked, as shown in line 
25 of Figure 7. In this case, this shrunk burst does not own the original size but can fit 
into the current available area. Also when iB  is determined, function 
Mark_Unavailability( iB ) will mark all slots occupied by iB , as line 18 in BSO main 
program. 
The time complexity of BSO can be easily calculated as follows. For each 
connection, BSO executes the Forward function q times where q is the number of 
FAS N¹ , so it requires the complexity of O( )pq . Also updating FAS and 
Mark_Unavailability requires the complexity of O( )r  and O( )p , respectively, 
where r is the number of occupied subchannels. Thus the overall time complexity of 
  18 
su
bc
ha
nn
el
 n
um
be
r
M
od
ul
at
io
n 
C
od
in
g 
R
at
e 
fo
r B
1
(B
yt
e/
S
lo
t)
0
1B1W1A
0FSA
su
bc
ha
nn
el
 n
um
be
r
M
od
ul
at
io
n 
C
od
in
g 
R
at
e 
fo
r B
1
(B
yt
e/
Sl
ot
)
1
1B1W1A
1FSA
 
    (a) Construct 01B  on 0FSA                  (b) Construct 11B  on 1FSA                               
su
bc
ha
nn
el
 n
um
be
r
M
od
ul
at
io
n 
C
od
in
g 
R
at
e 
fo
r B
1
(B
yt
e/
Sl
ot
)
5
1B1W1A
5FSA s
ub
ch
an
ne
l n
um
be
r
M
od
ul
at
io
n 
C
od
in
g 
R
at
e 
fo
r B
1
(B
yt
e/
Sl
ot
)
6
1B1W1A
6FSA
 
    (c) Construct 51B  on 5FSA                   (d) Construct 61B  on 6FSA     
su
bc
ha
nn
el
 n
um
be
r
M
od
ul
at
io
n 
C
od
in
g 
R
at
e 
fo
r B
1
(B
yt
e/
Sl
ot
)
7
1B1W1A
7FSA
su
bc
ha
nn
el
 n
um
be
r
1B1W1A
0 0FSA =
1 0FSA =
2 0FSA =
3 0FSA =
4 0FSA =
5 8FSA =
6 5FSA =
7 0FSA =
1 1
1 1
,  ThCAL(1, ) 340 bytes, 7 slots,
NOSCal( )=13 slots, MCS(1, ) 27 bytes/slot
B B saving
B B
= =
=
 
    (e) Construct 71B  on 7FSA              (f) Construct 1B  
Figure 8. An Example of BSO by Constructing Two Bursts (The Steps of 
Constructing 21B  to 
4
1B  are Omitted for Simplicity) 
 
Figure 8 shows an example of BSO to construct 1B  in the scenario that is the 
same as Figure 6. BSO first virtually constructs 1
jB  on each available subchannel j, 
then selects the best subchannel which is the fifth subchannel, on which 
1
bestB =[(5,0),(6,4)] can provide 340 bytes by using the least number of slots, 13 slots. 
Thus BSO constructs 1B  from slot(5,0) to slot(6,4), marks 1B  unavailable, and sets 
saving as 7 (20-13). Comparing with BCO that construct 1B  with 15 slots and 340 
bytes of throughput, BSO only uses 13 slots with 340 bytes of throughput. However, 
BSO produces two fragmentations, slot(0,0) to slot(4,7) and slot(6,5) to slot(7,7), 
while BCO keeps only one available area, slot(1,7) to slot(7,7). 
5. Simulations 
The simulations compare the performance of the proposed algorithms with the 
Raster algorithm in terms of total throughput and the improvement ratio. The 
improvement ratio is defined as RRA TTT /)( -  where AT  and RT  are the 
  20 
the subchannels with a poor MCS. Thus the burst having this amount of slots can not 
satisfy requested bandwidth, i.e., ( , )i iTHCal i B W< . Also since other free slots 
generated by internal fragmentation can not be utilized by iC , thus this connection 
can not obtain the requested bandwidth. Since this case always happens for some 
connections when using Raster, the overall throughput can not achieve the targeted 
bandwidth. 
BCO constructs a burst locating the best corner to avoid external fragmentation 
and to conquer with subchannel diversity. It also constructs the burst by shrinking the 
number of occupied slots to avoid internal fragmentation. Thus it obviously has the 
better throughput than Raster. BCO can fully utilize all slots when the requested 
bandwidth is about 500Kbps. When the requested bandwidth is less than 500Kbps, 
BCO can achieve the targeted bandwidth, because the constructed bursts always 
provide enough bandwidth, i.e. ( , )i iTHCal i B W= . On the other hand, since BSO 
constructs the bursts on the best subchannels, its burst adopts a better MCS than the 
burst constructed by BCO. Thus BSO has the best throughput. Using BSO, almost 
slots are utilized when the requested bandwidth is about 700Kbps. 
When almost all slots are utilized (requested bandwidth is larger than 500Kbps 
and 700Kbps for BCO and BSO, respectively), the throughput should be stabilized 
even as the requested bandwidth increases. However, this case is not a actual saturated 
situation and their throughputs still be slightly increased. The reason is that although 
almost all slots are utilized, the size of the bursts using a good MCS is generally small 
and some free slots internal in the original size will be utilized by other bursts using a 
poor MCS. That is, the minority of slots in the UL subframe uses good MCSs and the 
majority uses poor MCSs. As the requested bandwidth increases, to satisfy the 
requests, the size of the bursts using good MCSs becomes larger and there is fewer 
unused slots left to other bursts using lower MCSs. Therefore, the throughput will be 
slightly increased. However, they will finally achieve an actual saturated condition 
when all slots are well-utilized. 
Observed from Figure 9(b), as the discussion above, the improvements of total 
throughputs of BCO and BSO compared with Raster increase as the requested 
bandwidth raises because Raster has reached the saturated condition and others do not. 
Under the heavy load of 900Kbpps, BSO and BCO can achieve twice and 1.5 times, 
respectively, throughput obtained by Raster. 
  22 
simulation, the mean SNR of the subchannels received by each SS is varied from 
10db to 20db, and the standard deviation is kept as 5db. As shown in Figure 11(a), 
since the mean SNR increases and the bursts have high chance to adopt better MCSs, 
the total throughputs of BCO, BSO, and Raster increase. From Figure 11 (b), as the 
channel quality gets better, the improvement ratios of BCO and BSO become smaller. 
The reason has two points. First, Raster does not consider subchannel diversity, so the 
raise of throughput is simply caused by the increase of channel quality. However, 
BCO and BSO consider subchannel diversity and thus achieve satisfactory throughput 
even the mean SNR is not high. Therefore, when the mean SNR is increased, the 
increasing slopes on throughput in BCO and BSO are less than that in Raster. Second, 
when the mean SNR increases, the larger throughput achieved by Raster causes the 
less improvement ratios obtained by BCO and BSO. 
 
10 12 14 16 18 20
0
2
4
6
8
10
12
14
16
18
20
To
ta
l T
hr
ou
gh
pu
t (
M
bp
s)
Mean SNR (dB)
 Raster
 BCO
 BSO
10 12 14 16 18 20
0
50
100
150
200
250
300
350
400
Im
pr
ov
em
en
t R
at
io
 (%
)
Mean SNR (dB)
 BCO
 BSO
  
    (a) Total Throughput         (b) Improvement Ratio on Raster 
Figure 11. Effects of Mean SNR 
5.5. Variation of Channel Quality 
The effects of variation of the channel quality on the total throughput are 
investigated. In this simulation, the mean SNR of the subchannels received by the SS 
is kept as 15db, and its standard deviation is varied from 0db to 10db. Figure 12(a) 
shows that all algorithms have the same throughput when the standard deviation is 0. 
In this case, since all subchannels have the same channel quality, the total throughput 
of all algorithms, no matter with considering subchannel diversity or not, are the same. 
Also internal fragmentation does not happen when all subchannels have the same 
channel quality and the load is heavy. Under the heavy load, CQQ will allocate the 
number of slots less than the requirement. Also since all suchannels have the same 
channel quality, the burst always occupies its all allocated slots. 
Figure 12(a) also shows that the total throughput of Raster decreases 
dramatically as the standard deviation of the SNR increases, while that of BCO and 
BSO changes slightly. This leads that the improvement ratios of BCO and BSO raise 
  24 
number of burst decreases, and channel quality becomes better or more diverse. 
 
References  
[1] S.-Y. Wu, “Optimal infrastructure design and expansion of broadband wireless 
access networks,” European Journal of Operational Research, vol. 178, no. 1, 
April 2007, pp. 322-329. 
[2] Y. Ben-Shimol, I. Kitroser, and Y. Dinitz, “Two-dimensional mapping for 
wireless OFDMA systems,” IEEE Transactions on Broadcasting, vol. 52, no. 3, 
Sep. 2006, pp. 388-396. 
[3] M. Einhaus, B. Wolz, and B. Walke, “The influence of subchannel diversity on 
the performance of OFDMA systems based on IEEE 802.16,” in Proc. IEEE 
International Conference on Circuits and Systems for Communications, May 
2008, pp. 20-24. 
[4] S.-T. Sheu, C.-C. Yang, and H.-S. Chang, “A dynamic frequency allocation 
scheme for IEEE 802.16 OFDMA-based WMANs using Hungary algorithm,” in 
Proc. Conference on Emerging Direction in Embedded and Ubiquitous 
Computing, Dec. 2007, pp. 205-214.  
[5] I. Toufik and R. Knopp, “Channel allocation algorithms for multi-carrier 
systems,” in Proc. IEEE 60th Vehicular Technology Conference, vol. 2, Sept. 
2004, pp. 1129-1133.  
[6] Y. Chen, S. H. Shon, S.-J. Yoo, and J. M. Kim, “Dynamic frequency selection in 
OFDMA,” in Proc. The 8th International Conference on Advanced 
Communication Technology, vol. 1, Feb. 2006, pp. 574-578.  
[7] S. Najeh, H. Besbes, and A. Bouallegue, “Greedy algorithm for dynamic 
resource allocation in downlink of OFDMA system,” in Proc. The 2nd 
International Symposium on Wireless Communication Systems, Sept. 2005, pp. 
475-479. 
[8] D. Kivanc, G. Li, and H. Liu, “Computationally efficient bandwidth allocation 
and power control for OFDMA,” IEEE Transactions on Wireless 
Communications, vol. 2, no. 6, Nov. 2003, pp. 1150-1158.  
[9] M. Ergen, S. Coleri, and P. Varaiya, “QoS aware adaptive resource allocation 
techniques for fair scheduling in OFDMA based broadband wireless access 
systems,” IEEE Transactions on Broadcasting, vol. 49, no. 4, Dec. 2003, pp. 
362-370. 
[10] T. Ohseki, M. Morita, and T. Inoue, “Burst construction and packet mapping 
scheme for OFDMA downlinks in IEEE 802.16 systems,” in Proc. IEEE Global 
Telecommunications Conference, Nov. 2007, pp. 4307-4311. 
[11] C. So-In, R. Jain, and A.-K. Al Tamimi, “eOCSA: an algorithm for burst 
mapping with strict QoS requirements in IEEE 802.16e mobile WiMAX 
無衍生研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
