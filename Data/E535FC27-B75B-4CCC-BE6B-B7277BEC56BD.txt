expensive and highly scalable, there is a growing 
interest in using distributed networked computers for 
parallel computing. Message Passing Interface (MPI) 
is a de facto industry standard that defines various 
functions for developing high-performance portable 
parallel programs in a distributed memory computing 
environment. 
The conventional procedure to start an MPI parallel 
computation among distributed computers lacks 
flexibility because a user is involved in every step 
of the procedure and the parallel computation can 
only be performed with precompiled platform-dependent 
binary executables. The lack of flexibility does not 
give a conventional MPI parallel computing 
environment sufficient autonomicity to deal with 
unanticipated situations during runtime. 
Mobile agents can be dynamically created at runtime 
and migrate to destination machines to fulfill 
operations in an autonomous manner. The autonomy and 
mobility of mobile agents make mobile agent paradigm 
a proper approach for developing an autonomic MPI-
based parallel computing system. 
This project is the first attempt to integrate the 
MPI model with the IEEE Foundation for Intelligent 
Physical Agents (FIPA) internationally standardized 
mobile agent technology for distributed parallel 
computing. The developed autonomic mobile agent-based 
parallel computing system is compliant with the MPI 
and C standards for parallel computations and the 
IEEE FIPA standard for agent interoperability. The 
system can achieve rapid deployment and execution of 
mobile agents over heterogeneous platforms for MPI 
parallel computing, and self-manage an MPI 
computation with respect to self-configuration, self-
optimization, self-healing, and self-protection, 
recognized by the IBM as four autonomic properties. 
Autonomic properties of the developed system will be 
validated through different examples. Experiment on 
resource constrained mobile robotic target tracking 
over heterogeneous platforms will be conducted to 
demonstrate the developed system has a great 
potential being applicable to a variety of 
1 
 
1  Introduction 
Parallel computing is the simultaneous use of multiple computing resources to solve a computational 
problem. Parallel computing can be performed in both shared and distributed memory environments. Because 
computers connected through a network are less expensive and highly scalable, there is a growing interest in 
using distributed networked computers for parallel computing. Message Passing Interface (MPI) is a de facto 
industry standard that defines various functions for developing high-performance portable parallel programs 
in a distributed memory computing environment. 
The conventional procedure to start an MPI parallel computation among distributed computers lacks 
flexibility because a user is involved in every step of the procedure and the parallel computation can only be 
performed with precompiled platform-dependent binary executables. The lack of flexibility does not give a 
conventional MPI parallel computing environment sufficient autonomicity to deal with unanticipated 
situations during runtime. 
Mobile agents can be dynamically created at runtime and migrate to destination machines to fulfill 
operations in an autonomous manner. The autonomy and mobility of mobile agents make mobile agent 
paradigm a proper approach for developing an autonomic MPI-based parallel computing system. 
This project is the first attempt to integrate the MPI model with the IEEE Foundation for Intelligent 
Physical Agents (FIPA) internationally standardized mobile agent technology for distributed parallel 
computing. The developed autonomic mobile agent-based parallel computing system is compliant with the 
MPI and C standards for parallel computations and the IEEE FIPA standard for agent interoperability. The 
system can achieve rapid deployment and execution of mobile agents over heterogeneous platforms for MPI 
parallel computing, and self-manage an MPI computation with respect to self-configuration, 
self-optimization, self-healing, and self-protection, recognized by the IBM as four autonomic properties. An 
experiment on mobile robotic target tracking is conducted to validate the developed system. 
2 Related Work on Mobile Agent-Based Parallel Computing 
There is not much research work that has been done in the past to use mobile agents for parallel 
computing. This section introduces some representative mobile agent-based parallel computing systems: 
PaCMAn, TRAVELER, and AgentTeamwork. 
2. 1  PaCMAn 
The acronym PaCMAn stands for Parallel Computing with Mobile Agents [1]. It is a mobile agent-based 
Metacomputer that enables users to utilize idle resources on the Internet to tackle intensive computing 
problems that cannot be handled efficiently with their own resources. The PaCMAn Metacomputer launches 
multiple mobile agents that cooperate and communicate to solve problems in parallel. In PaCMAn, a 
messaging scheme for inter-agent communications is implemented as a Java class of methods based on 
Aglets [2] and Grasshopper [3] agent platforms. 
3 
 
3.1  Agency 
An agency is a mobile agent platform where mobile agents reside and operate. The agency adopted in this 
project is Mobile-C [9-11], an IEEE FIPA compliant mobile agent platform supporting C/C++ mobile agents. 
As an IEEE FIPA compliant mobile agent platform, Mobile-C comprises three FIPA normative modules, 
Agent Management System (AMS), Agent Communication Channel (ACC), and Directory Facilitator (DF). 
Two additional modules, Agent Execution Engine (AEE) and Agent Security Manager (ASM), are included 
in Mobile-C as well. The essential functionality of each module is described below. 
 AMS module - The AMS module controls the creation, registration, execution, migration, persistence, 
and termination of a mobile agent. 
 ACC module - The ACC module routes messages between distributed entities. It is in charge of 
operations including inter-agent communication and inter-agency agent migration. 
 DF module - The DF module provides yellow page services. Agents intended to advertise their services 
should register with the DF module. 
 AEE module - The AEE, a C/C++ interpreter – Ch [12-14], supports cross-platform execution of mobile 
agent codes. 
 ASM module -The ASM module is responsible for maintaining security policies for a host program. 
3.2  Interpretive MPI Middleware 
An interpretive MPI middleware, Ch MPI [15], is adopted in the system to allow for interpretively 
executing a mobile agent code with MPI C functions. It is a bridge between an agent code in the mobile agent 
space and a MPI C library in the host program space. As shown in Figure 1, through an interpretive MPI 
middleware, MPI C functions in an MPI C library can be called from within a mobile agent code. 
 
Figure 1: An interpretive MPI middleware allows MPI C functions to be invoked within a mobile agent code. 
4 Experiment: Mobile Robotic Target Tracking 
Autonomicity and ﬂexibility are important and necessary for application scenarios involving resource 
constrained and heterogeneous computing platforms. For vision-based target tracking with a mobile robot 
[16], a mobile robot has to continuously process images to identify the location of a moving target. However, 
a mobile robot does not necessarily have sufficient computing resources to process images from a camera 
efficiently. In such a situation, the mobile robot has to look for computing resources from trusted computing 
entities, such as other mobile robots, gateway sensor nodes, tiny computers, and even high-end computers. 
However, the mobile robot does not know in advance which entity is able to help and which kind of platform 
5 
 
4.1.3 Ally of Predator 
 In this experiment, another VIA ARTiGO A1100 tiny computer is employed as the predator’s only ally 
for parallel image processing purposes. This ARTiGO tiny computer is set up and operated as a general 
desktop computer. 
4.2  Software Setup 
For the predator’s VIA ARTiGO A1100, the built-in operating system is the Windows XP. However, 
since most of the software packages used in this experiment were developed under Linux environments. Thus, 
the VMware Workstation[20], a virtual machine for x86 and x86-64 computers, is installed on top of the 
Windows XP. Afterward, the Ubuntu 11.04[21], a Linux operating system, is installed in the VMware 
Workstation. Figure 4 shows that the Ubuntu 11.04 runs in the VM Workstation under the ARTiGO A1100’s 
Windows XP. 
 
Figure 4: Ubuntu 11.04 running in VMware Workstation under ARTiGO A1100’s Windows XP. 
4.3  Central Field of Mono Vision based Object Tracking (CFMVOT) 
This section presents the proposed object tracking method - Central Field of Mono Vision based Object 
Tracking (CFMVOT). This method includes image-based object tracking and positioning. 
4.3.1  Image-based Object Tracking 
Sequential Monte Carlo methods, such as particle ﬁlters [22], can perform substantially better than 
typical tracking algorithms. Particle ﬁlters are an approximation to the optimal Bayesian ﬁlter, which 
monitors the posterior probability of a ﬁrst-order Markov process through equation (1): 
p(xt|y1:t) = αp(yt|xt)�wt−1i p�xti�xt−1i �n
i=1
                    (1) 
where xt is the state(s) of a process (or particle) at time t, yt is the observation at time t, y1:t is all the 
7 
 
Stereo vision-based technique uses two cameras to tackle the problem. Although more accurate, stereo 
vision-based technique is also more compute-intensive because multiple images of the same object need to be 
processed. In addition, such a technique is more economically expensive since it requires two cameras. A 
mono vision-based method for object distance computation with an accuracy rate of 98.76%[23] is adopted in 
this experiment. 
The idea of the method is to decompose an object’s actual distance into its depth and lateral distance, as 
shown in Figure 6. Thus, an object’s actual distance can be computed as follows. Actual distance = �[Depth]2 + [Lateral distance]2          (2) 
Moreover, in this experiment, the angle, which the AmigoBot predator needs to turn in order to keep the 
AmigoBot prey in the center line of images, is also calculated as follows. 
θ = tan−1 �𝐿𝐿𝐿𝐿𝐿𝐿𝐿 𝑑𝑑𝑑𝐿𝐿𝑑𝑑𝐿
𝐷𝐿𝐷𝐿ℎ
�        (3) 
 
Figure 6: Geometric relationship between an object’s actual distance, depth, and lateral distance. 
To establish the relationships among the AmigoBot prey’s depth, pixel height, and pixel width, areas 
with a value close to the red color are extracted from an image to calculate the pixel height and pixel width, 
as shown in Figure 7(a). As shown in Figure 7(b), the pixel height is calculated as 57 pixels, and the pixel 
width from the center line of an image to the prey’s side is calculated as 41 pixels. 
 
Figure 7(a): Areas with a value close to the red color.        Figure 7(b): AmigoBot prey’s pixel height and pixel width 
C
enter line 
41px 
57px 
9 
 
Table 2: Results for the AmigoBot prey’s depths vs. PWLD ratios. 
Depth (cm) 40 50 60 70 80 90 100 110 120 130 140 150 160 
PWLD ratio 12.37 10.06 8.82 7.93 7.33 6.41 5.74 5.23 4.90 4.69 4.21 3.89 3.63 
By also using the polynomial regression method, the mathematical model representing the relationship 
between the prey’s depth and the PWLD ratio is established as follows. PWLD ratio = 0.0004475 ×δ2 − 0.1505 ×δ+ 16.3987         (5) 
whereδis the depth. 
4.3.3  Central Field of Mono Vision based Object Tracking (CFMVOT) Algorithm 
Figure 10 shows the CFMVOT algorithm. The output from the particle filtering object tracking 
algorithm, xmax , contains the size and a vertex of a rectangle, as shown in Figure 11. Thus, the pixel height 
and pixel width can be calculated through xmax and a fixed image width (640 pixels). Therefore, xmax can 
be used to obtain the prey’s depth by equation (4). Afterward, xmax and the depth are used to obtain the 
prey’s lateral distance by equation (5). Eventually, the prey’s depth and lateral distance are used to obtain the 
prey’s actual distance and the predator’s rotation angle in degree by equations (2) and (3), respectively. 
 
Figure 10: CFMVOT algorithm. 
11 
 
  
Figure 13: The predator moves toward the moving prey with a rotation angle of about 11〫clockwise. 
 As shown in Figure 14, the prey keeps moving forward, and the predator moves toward the prey 
straightly. The right-side figure shows that the distance between the prey and predator varies slightly, 
implying that the velocities of the predator and prey are almost identical. 
  
Figure 14: The prey and predator keep moving forward, maintaining a slightly varying distance. 
As shown in Figure 15, the prey turns right, and the predator moves toward the prey with a rotation 
angle of about 8〫clockwise. 
  
Figure 15: The predator moves toward the turning prey with a rotation angle of about 8〫clockwise. 
13 
 
[18] "VIA ARTiGO A1100 PC Kit," http://www.via.com.tw/en/products/embedded/artigo/a1100/index.jsp. 
[19] "AXIS 207MW Network Camera," http://www.axis.com/products/cam_207mw/. 
[20] "VMware Workstation," http://www.vmware.com/tw/support/product-support/workstation.html. 
[21] "Ubuntu for you," http://www.ubuntu.com/ubuntu. 
[22] M. S. Arulampalam, S. Maskell, N. Gordon, and T. Clapp, "A Tutorial on Particle Filters for Online 
Nonlinear/Non-Gaussian Bayesian Tracking," IEEE Transactions on Signal Processing, vol. 50, pp. 
174-188, 2002. 
[23] A. Rahman, A. Salam, M. Islam, and P. Sarker, "An Image Based Approach to Compute Object 
Distance," International Journal of Computational Intelligence Systems, vol. 1, pp. 304-312, 2008. 
 
 2 
一、參加會議經過 
August 29, 2011 
   08:40 am ~ 10:20 am  Panel Session (I am the session co-chair and a speaker): 
                      MESA-3-1: Cyber-Physical and Cooperative Systems 
   10:40 am ~ 12:00 pm  MESA-5-1 Keynote I:  
From Italy to China, Driverless!  
Dr. Alberto Broggi (University of Parma) 
   12:10 pm ~ 01:30 pm  MESA Awards Luncheon (I am one of the best paper award recipients) 
   01:40 pm ~ 03:20 pm  Panel Session: 
                      MESA-6-1: Mechatronic Control & Electrical Vehicular Systems 
   03:40 pm ~ 05:20 pm  Panel Session: 
                      MESA-7-1: Diagnosis and Monitoring in Mechatronics Systems 
   August 30, 2011 
08:40 am ~ 10:20 pm  Panel Session: 
                   MESA-9-1: Bio-Mechatronics I 
10:40 am ~ 12:00 pm  MESA-5-2 Keynote II: 
Decentralized Vibration Control for Large Flexible Structures with  
Smart Embedded Devices. 
Dr. Dong-Xu Li (National University of Defense Technology) 
  01:40 pm ~ 03:20 pm  Panel Session: 
                      MESA-10-1: Infrastructure for Embedded Systems 
   03:40 pm ~ 05:20 pm  Panel Session 
                      MESA-10-2: Theory and Algorithms for Embedded Systems 
二、與會心得 
In this conference, I attended all the keynote speeches given by experts in different research areas from 
famous academic organizations. Additionally, I also attended panel sessions regarding the research and 
teaching in popular areas, such as networked embedded systems, bio-mechatronics, sensor networks, and 
cyber-physical systems. Moreover, I received the best paper award in theory. Overall, I gained sufficient 
knowledge and inspirations that can be beneficial to my on-going and future research projects as well as my 
07/27/2011
 
Yu-Cheng Chou
No. 200, Zhongbei Rd.
Zhongli,   Taiwan, 32023
 
Dear Prof. Chou:
 
It is my pleasure to invite you to ASME 2011 International Design Engineering Technical Conferences (IDETC) and
Computers and Information in Engineering Conference (CIE), which is being held in Washington, DC, USA on
08/28/2011 - 08/31/2011.
You will be presenting the paper(s), Paper #:DETC2011-48732 "Sensor Agent Cloud: A Cloud-Based Autonomic
System for Physical Sensor Nodes Management"
ASME is the premier organization for the promotion of the art, science, and practice of mechanical engineering
throughout the world. Our mission is to promote and enhance the technical competency and professional well-being of
our members, and through quality programs and activities in mechanical engineering better enable its practitioners to
contribute to the well-being of humankind.
You are expected to undertake all expenses.
Visa Letter Form https://secure.asme.org/visaletter/letter.cfm
1／2 2011/7/28 上午 10:27
國科會補助計畫衍生研發成果推廣資料表
日期:2011/12/26
國科會補助計畫
計畫名稱: 以分散式機電嵌入式系統為導向之基於標準化移動代理人的自主平行運算
計畫主持人: 周佑誠
計畫編號: 99-2218-E-033-004- 學門領域: 計算機理論與演算法
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
The Best Paper in Theory Award at the 2011 ASME/IEEE International 
Conference on Mechatronic and Embedded Systems and Applications, 
Washington, DC, USA. 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
