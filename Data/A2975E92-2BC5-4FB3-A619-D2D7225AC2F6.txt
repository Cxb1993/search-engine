Over the past decade, many mature techniques have 
been developed for P2P computing. For example, the 
technique such as distributed hash table (DHT) enable 
a P2P system to distribute a large number of files 
over millions of computers with very efficient file 
lookups and updates. If we can adopt P2P computing on 
Cloud computing to distribute and manage cloud 
resources, then the centralized approach problems 
will be solved. In the first year, this project will 
explore how to apply P2P technology to provide 
distributed and efficient resource query and 
allocation. 
Conventionally, P2P computing only supports one-
dimentional data query. However, the virtual machine 
(VM) resource lookup is multidimensional query(e.g. 
SearchVM(1Ghz<CPU<3Ghz && Memory < 1024MB)). 
Combining multidimensional method can help P2P system 
supporting multidimensional query, there are well 
known multidimensional methods(e.g. Space Filling 
Curves(SFCs), Tree-based and Hash-technique etc.). 
However, platform designers don＇t know how to choose 
the multidimensional methods. This paper will focus 
on different P2P systems and multidimensional 
methods, and compare with each characteristic(e.g. 
Locality, Load-Balancing and Metadata size etc.). 
Finally, we suggest the P2P Virtual Machine 
management system designer how to choose the method. 
 
英文關鍵詞： Cloud computing,  P2P system, Multidimensional query, 
Distributed data structure 
 
2	  
	  
中文摘要  
P2P 計算、雲端運算、行動計算是下一代主要的資訊技術。隨著寬頻網路
的普及與叢集計算能力的大幅進步，以雲端架構提供應用程式動態服務資源規劃
已是一個可實現的商業運算模式。目前，應用程式動態服務資源規劃多半採用用
集中式配置(Centralized Provisioning)，例如：Amazon 的 AWS(Amazon Web 
Services)。但這種集中式配置可能會產生許多問題，例如：(1) 單點故障、(2)擴
充性較差、(3)易產生網路頻寬的瓶頸、(4)需要極大的運算量支援使用者的計算
資源的配置。過去十年，P2P計算的發展相當成功，例如 DHT(Distributed Hash 
Table)這一類的技術可以有效的將資源(檔案)分散到數百萬台電腦[LUA05]，並提
供非常有效率的檔案尋找(Lookup)與檔案更新(Update)。如果能夠將 P2P 計算已
經發展成功的技術轉換成分散式雲端計算資源配置，將可有效解決上述「集中式
資源配置」所產生的種種問題。本計畫第一年將探討如何導入 P2P 的技術提供
雲端平台分散式、有效率的資源配置、資源查詢、與資源更新。 
傳統的 P2P 技術大多僅支援單一維度的資源查詢，而雲端運算中虛擬機器
的資源查找卻是一種多維度查詢問題(例如 :SearchVM(1Ghz<CPU<3Ghz && 
512MB < Memory < 1024MB))。結合多維度查詢方法可讓 P2P技術支援多維度查
詢，目前已有許多知名的多維度查詢方法(例如：空間填充曲線(SFCs)、樹狀法
(Tree-based)、雜湊法(Hash-technique)等等)，要如何選擇多維度查詢方法也是難
題之一。本研究將探討各種不同的 P2P 技術與多維度查詢方法，並比較各種特
點(如：區域性、負載平衡、Metadata size等等)，希望在 P2P管理虛擬機器的部
份提供雲端系統設計者在設計上的參考。 
關鍵字：多維度查詢、點對點技術、分散式資料結構 
 
Abstract 
P2P computing, cloud computing, and mobile computing are the next-generation 
key IT technologies. With the rapid growth of network bandwidth and rapid 
development of cluster computing, it is now possible to provide dynamic resources 
provisioning for applications by cloud computing. Currently application resource 
provisioning almost adopts the centralized approach, like Amazon’s AWS, but the 
centralized approach encounters the following problems: (1) single point of failure, (2) 
poor scalability, (3) performance bottleneck of the network, (4) the requirement of 
large investment for the centralized server.  
 
4	  
	  
研究做回顧式整理，如果今天有雲端平台設計者想設計一套 P2P虛擬機器資源
管理的系統，將無法快速得知每種多維度查詢方法之間的優劣之處，設計者就會
需要花費額外的時間去調查這些方法，就會浪費額外的開發的時間。 
 
二、  研究目的  
如果能在雲端環境中使用 P2P技術來管理虛擬機器的話，就可以有效解決
集中式架構的問題，而且 P2P技術的 DHT方法亦提供非常有效率的資源查找與
更新，再加上多維度查詢方法，便能有效處理複雜的虛擬機器查詢問題。 
目前多維度查詢方法有數種(例如：空間填充曲線(Space Filling Curves, SFCs)、
樹狀法(Tree-based)、雜湊法(Hash-technique))，不同方法其運作模式與花費成本、
複雜度都不同，本研究希望在 P2P管理虛擬機器的部份提供雲端系統設計者在
設計上的參考。 
 
三、  文獻探討  
1.Prasanna Ganesan 等人在 2004 年提出[2]，此研究提出兩種解決方案來讓
CAN這個 DHT方法可以支援處理多維度範圍查詢，他們認為一個好的資源分區
索引方法(資料結構)應具備(1)區域性、(2)節點負載平衡、(3)最小化 Metadata；
而一個好的路由方法也要具有(1)低節點狀態、(2)有效率的轉送機制、(3)轉送負
載平衡這些特性才對。 
2.Cristina Schmidt等人為了改善他們設計的一套名為 Squid的 P2P資訊探索
系統(Information Discovery)在查詢時彈性不足(無法支援複雜的查詢)所提出的
[3]，而此研究的重點是將多維度的資訊轉換成單維度，再將單維度的資訊映射
到實體的節點來記錄、儲存。Squid這套系統的架構就像一般的 P2P資料查找系
統一樣，只是 Squid比較特別的一點是，並不是將資源整個 Hash到 DHT空間當
中，而是先透過一個檔案來記錄資源屬性(像是 XML 檔案)，再將此檔案 HASH
到 DHT空間當中。在資料結構的部份，則是使用 Space Filling Curves(SFCs)將資
源降維度成單維度。發佈資源主要由兩個步驟所組成的，(1)建立索引空間(屬性
空間)與(2)將索引映射到節點儲存。 
3.E. Tanin等人為了要讓 P2P的 DHT方法能支援多維度查詢所提出的[4]，
在資料結構的部份是選擇多維度查詢方法的其中一類：樹狀法的其中一種方法
MX-Cif QuadTree，而路由方法則是選擇 Chord 這個DHT方法；MX-Cif QuadTree
的運作是將一整個屬性空間分割成數個矩形，再將每個矩形會有一個控制節點來
管理，每一個控制節點需要管理它範圍內的所有節點。這篇作者們還有提出兩個
新的參數(fmax與 fmin)，fmax是 fundamental maximum level，主要是用來控制整個
樹狀結構的生長上限，代表此樹的層數不能生長大於這個數值；另外，fmin 是
fundamental minimum level是用來控制查詢開始的階層，以及儲存資源的節點所
在的階層，因為 level l < fmin的階層都是控制節點所在的階層，所以不儲存資源，
fmin可以分散各節點的負載，以及降低每次查詢都從 Root節點開始查的機會。 
6	  
	  
圖 1 - 位元交錯方式(資料來源[7]) 
	  
圖 2 - (a) Z-Order Curve、(b)Gray code、(c)Hilbert Curve範例圖(資料來源[7]) 
Hilbert Curve是 SFCs中被相當頻繁使用的一種方法，比起 Z-Order Curve 與
Gray Code 來說，Hilbert Curve 是最能保持資源之間的區域性的方法，Hilbert 
Curve會透過遞迴的方式來分割屬性空間，每一次分割空間時會均等的將空間分
成四塊子空間，稱此分割的動作為 order approximation，當經過了 k次的分割後
稱為 kth order approximation的 Hilbert Curve，而整個屬性空間也會被分割成 2kd
個區塊(k為幾次分割，d則是多少維度)，每一個區塊都會由一個節點進行管理，
每一個區塊會有一個 Hilber-value，將各 Hilber-value 連結起來形成 Hilbert 
Curve。	  
Hilbert-value的計算也有好幾種方式，以下為 Christos Faloutsos等人所介紹
的演算法[7]，以二維的屬性空間為例，透過下列 6個步驟進行得到Hilbert-value： 
(1)取得 x、y座標的 2進位值；(2)將 2進位值進行位元交錯得到一個組新的字串；
(3)將該字串以 2bit為一個組的方式分割出數個字串(例如：0010會得到 00、10
兩個字串)，若字串僅有 2bit長度便不分割；(4)透過此規則(00=0,01=1,10=3,11=2)
將每個區塊中的字串轉換成該區塊的序列號(例如：00、10會變成 03，03就是該
區塊的序列號)；(5)接著將序列號以單一位元的方式讀取(例如：03就會讀取 0、
3)，接著依照規則(a)與規則(b)將序列號作修正：(a)如果序列號第一位元為 0，將
該序列號後面全部的 1變成 3、3變成 1，(b)若第一位元為 3，將後面的 0變成 2、
2變成 0(例如：03，前綴為 0，會將 3變成 1，修正完畢變成 01)；(6)將序列號以
1bit為單位轉換成二進制，再將二進制的序列號連結起來並且轉換成十進制得到
Hilbert-value。(例如：3、3會先轉換為 11、11，接著連結成 1111再轉換成十進
制得到 15，15為序列號 33區塊之 Hilbert-value) 
Hilbert-curve繪製完成後，每個區塊會由一個節點負責儲存該區塊的資源資
訊，將 Hilbert-value分佈到覆蓋網路中有兩種方式：(1)使用 Hash Function將該
Hilbert-value進行 hash的運算，再將KEY轉送給 ID=KEY的節點儲存、(2) Cristina 
Schmidt在[3]中的做法是不經過 Hash，直接將 Hilbert-value當作該節點在覆蓋網
路當中的 Key來使用。 
關於處理查詢的部份，Cristina Schmidt等人在[3]有提到 Hilbert的查詢的處
理分成兩個步驟：(1)在查詢轉換的部份：如果非範圍查詢的話，這很簡單，直
接將查詢映射給對應的節點處理即可；如果是複雜查詢(包含範圍查詢)的話，符
合查詢條件的區域將會被標識起來負責處理這個查詢。(2)查詢合適的節點的部
份，由於 DHT提供了很好的資源查找協定，只要給定 ID，便可有效的查詢到資
8	  
	  
法屬於比較特別的解決方案；因為一般的 Hash Function僅支援單一維度的資源
查找。因為要支援多維度的資源查詢與範圍查詢，便要修改 Hash Function的運
算方式，下圖 4為Min Cai等人在[10]所提出的 Hash Function，除了替每一種屬性
定義所屬的類型之外，也替數值的屬性定義上下值(例如 CPU的 max=5,min=0、
記憶體的 max=1024,min=0等等)，該系統是幾 bit的系統 2m 的 m就是多少(以
Chord為例)，接著使用下圖的 Hash Function便可將每一個屬性均勻分佈於 DHT
當中。 
 
圖 4 – Hash Function計算公式(資料來源：[10])  
雜湊法將資源所擁有的每一個屬性都進行 Hash Function分佈到 DHT中，而
在處理多維度查詢時，則是需要將查詢拆成數個子查詢來進行查詢，在多維度的
查詢處理上，需要比較麻煩的查詢分割處理。 
 
五、  結果與討論  
5.1多維度查詢方法的評估指標說明  
Rajiv Ranjan 等人在[11]提到，一種有效率的資源分散方法(Data distributed 
methods)應該要能有效平衡各節點間的負載(Load-balancing)；另外，Prasanna 
Ganesan等人在[2]亦提到，一個好的資源分散機制應該包括下列幾個特性： 
(1)區域性(Locality)：將屬性值相近的資源映射到相同的節點進行儲存。(2)
負載平衡(Load balance)：每一個節點負責(i)記錄的連結(Number of link)與(ii)轉送
的路由訊息(Routing Messages)應該要差不多。(3)Metadata size最小化(Minimal 
metadata)：使用的多維度查詢方法與路由方法要額外記錄的資訊應該要最小化。
(4)管理成本最小化(Minimal management overhead)：節點加入或離開網路時，對
網路拓撲造成的影響最小化。 
 
5.2多維度查詢方法的選擇與建議  
我們可以得到知道好的 P2P 多維度查詢方法應要具備好的(1)區域性、(2)負
載平衡、(3)Meta data最小化以及(4)管理成本最小化之外，另外加入了查詢效率
作為分析各多維度查詢方法的特點之一，在此小節本研究依照各種多維度查詢方
法的特性整理出質化與量化分析表如下： 
表 1 - 各種多維度查詢方法之質化分析表 
特性 
方法 
(a)區域性 (b)負載平衡 
(c)Total Meta-data 
size 
(d)查詢效率 (e)管理成本 
(1)空間填充曲線 
(SFCs) 
佳 較差 較少 佳 N/A 
(2)樹狀法 佳 尚可 中等 佳 N/A 
10	  
	  
d:資源維度 ∀  𝐤,𝐝   ∈ 𝚴 含的 vm個數 ∀  i ∈ [1~2k*d] 
(2)樹狀法 
(Tree-based) 
公式/
複雜度 
𝟒𝒊𝐋𝐢!𝟎  𝟒𝒊𝐋𝐢!𝟏 +m O(log n+fmax- fmin) 
說明 L:樹狀結構層數 ∀  𝐤 ∈ 𝚴 𝟒𝒊𝐤𝐢!𝟏 : Level=0~L-1節點記錄的子節點資
訊 
m: Level= L節點範圍
內記錄的 vm資訊 
n:全部 vm數 
fmax,fmin:前面章節有介紹在此不提
[8] 
(3)雜湊法 
(Hash-techniq
ue) 
公式/
複雜度 
n n*a 
O(log n+ n*smin) 
𝐬𝐦𝐢𝐧 = 𝑯 𝒗𝒊  𝒖 −𝑯(𝒗𝒊  𝒍)𝟐𝒎  
說明 
n:全部 vm數 ∀  𝐧 ∈ 𝚴 n:全部 vm數 a: vm的屬性數量 ∀  𝐧, 𝐚 ∈ 𝚴 
n:全部 vm數 
smin:每個維度最小範圍查詢選擇性 
vi u、vi l:某個屬性之上下限值[10] ∀  𝐧 ∈ 𝚴 
 
(a)管理節點數量：  
(1)SFCs當中每一個分割區塊都會指派一個節點來管理，所以管理節點數量
為 2k*d，其中 k為分割的次數、d為資源的維度(例如：23*2=64)；(2)Tree-based
是採取分階層管理的方式，管理節點數量則是將樹狀結構中每一個階層的管理節
點加總即可(例如：Root(1) +第一層子節點(4)+第二層子節點(16)+第三層子節點
(64)=85)；(3)Hash-technique因為直接將每一個屬性拿來 hash分佈出去，所以管
理節點數量會等於全部的 vm。 
(b)Total Meta-data size：  
(1)SFCs 額外記錄的資訊量僅需將每一個區塊所記錄的 vm 資訊加總起來即
可；(2)Tree-based額外記錄的資訊量則是分成兩個部份，將這兩個部份加總即可： 
(i)Level=0~L-1的階層：每個節點都會記錄 4個子節點的資訊與(ii)Level=L的階
層：每個節點需記錄的全部 vm資訊；(3) Hash-technique因為是將每一台 vm的
每一個屬性都經過 hash 發佈出去，所以額外記錄的資訊量則是會隨著 vm 的數
量與屬性數量而改變的。  
(c)查詢效率：  
(1)SFCs將Hilbert-value拿來Hash，在查詢效率的表現上則是看所採用的P2P
技術之查詢效率，在此為 O(log n)，其中的 n為全部的節點數；(2)Tree-based的
部份複雜度大致上也是 O(log n)，若是系統有使用 fmax與 fmin來限定樹狀結構的
話，複雜度則變為 O(log n+fmax-fmin)；(3)Hash-technique基本上是 O(log n)，若是
使用 Min Cai 於[10]所提出範圍查詢策略的話，查詢效率則是變為 O(log n + 
n*smin)，其中 n為全部節點數、smin則是每個維度的最小範圍查詢選擇性。 
12	  
	  
in P2P Systems" , Proceeding WebDB '04 Proceedings of the 7th International 
Workshop on the Web and Databases: colocated with ACM SIGMOD/PODS 2004 
Pages 19-24 , 2004 
[3]Cristina Schmidt , Manish Parashar , "Enabling Flexible Queries with Guarantees 
in P2P Systems" , Internet Computing, IEEE , 2004 
[4]Egemen Tanin et al. , "An Efficient Nearest Neighbor Algorithm for P2P Settings" , 
Proceeding dg.o '05 Proceedings of the 2005 national conference on Digital 
government research Pages 21-28 , 2005 
[5]Artur Andrzejak , Zhichen Xu , "Scalable, Efficient Range Queries for Grid 
Information Services" , Peer-to-Peer Computing, 2002. (P2P 2002). Proceedings. 
Second International Conference on , 2002 
[6]Peter Triantafillou, Ioannis Aekaterinidis , "Content-based Publish-Subscribe Over 
Structured P2P Networks" , Proc. third Int. Workshop Distributed Event-based 
Systems (DEBS’04), 16 of 16  
[7]Christos Faloutsos , Shari Roseman , "Fractals for Secondary Key Retrieval" , 
PODS '89 Proceedings of the eighth ACM SIGACT-SIGMOD-SIGART symposium 
on Principles of database systems Pages 247 - 252 , 1989 
[8]Egemen Tanin et al. , "Using a distributed quadtree index in peer-to-peer 
networks" , The International Journal on Very Large Data Bases archive Volume 16 
Issue 2, April 2007  
[9]Rajiv Ranjan , Liang Zhao , "Peer-to-peer service provisioning in cloud computing 
environments",Springer Science+Business Media,LLC 2010 
[10]Min Cai et al. , "MAAN: A Multi-Attribute Addressable Network for Grid 
Information Services", International Workshop on Grid Computing (GRID’03) , 2003 
[11]Rajiv Ranjan et al. , "Peer-to-peer-based resource discovery in global grids: a 
tutorial," Communications Surveys & Tutorials, IEEE , vol.10, no.2, pp.6-33, Second 
Quarter 2008. 
 2 
l Track 9. System Software and Software Engineering (系統軟體與軟體工程) 
l Track 10. Pattern Recognition and Artificial Intelligence (模式識別與人工智慧) 
l Track 11. Information Technology in Biomedicine (生物醫學的資訊科技) 
l Track 12. Wireless Communications (無線通訊) 
l Track 13. Mobile Multimedia Communications (行動多媒體通訊) 
 
三、與會收穫  
    每次參加學術研討會不同的論文發表場次，總是收穫不少，從不
同的學術研究領域學到許多新的發展知識。此次最特別的收穫在於
CPS (Cyber Physical System)的研究領域。由於個人過去的研究領域並
不包含 CPS (Cyber Physical System)，此次大會邀請澳洲 Deakin 
University的 Professor Yang Xiang 針對 CPS的研究發表專題演講，
令個人收穫頗多。Professor Yang Xiang 目前也擔任國際知名學術期刊
IEEE Transactions on Parallel and Distributed Systems 的 Associate 
Editor，對於分散式計算系統有相當深入的了解。他的演講裏面談到
CPS幾個重要的議題，包含：CPS 如何整合軟硬體與物理系統的動態
流程，並探討 CPS的模擬、設計、與分析的架構。此外，他也探討了
CPS的安全性問題。由於 CPS的佈署規模很大，各元件具備獨立自主
運作的特性，且整個 CPS具備語意認知的特性，很容易遭受各種軟硬
體的駭客攻擊。專題演講中所探討的安全性問題包含信任機制的建
立、惡意攻擊的型態、入侵偵測的機制、資料保密的防範、以及系統
自我恢復的機制。 
 
四、活動照片  
 
   
大會舉辦地點:電子科大 大會議場的照片 大會晚宴的照片 
 
100年度專題研究計畫研究成果彙整表 
計畫主持人：丁建文 計畫編號：100-2221-E-151-038- 
計畫名稱：以 P2P 應用服務供應支援行動用戶計算卸載之研究與實做 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
