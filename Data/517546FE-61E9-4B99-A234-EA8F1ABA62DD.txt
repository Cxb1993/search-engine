H.264 Inter Prediction 矽智產設計 
計畫編號：NSC95-2221-E-224-110 
執行期間：95 年 8 月 1 日 至 96 年 7 月 31 日 
主持人：蘇慶龍 雲林科技大學電子工程系助理教授 
 
一、 中文摘要 
    本計畫提出一適用於先進視訊壓縮技術
之快速但低運算量需求之移動估測演算法。演
算法不僅具低運算複雜度之特色且資料存取
規則並有高度可預測性避免資料存取之障
礙，也突破一般快速演算法雖然可大幅減少運
算量但在最差狀況時卻無法減低運算複雜
度，造成硬體實現時成本無法下降之困境。演
算法將移動估測分成整數與分數兩部份，整數
移動估測演算法採兩階段方式減少運算，分數
移動估測演算法利用預測分割大小趨勢之方
式減少運算複雜度。依模擬顯示在 H.264 
QCIF、CIF 與 D1 規格下，整數演算法可減少
96.8%、95.6%與 96.8%之移動估測搜尋點運
算，與完全搜尋相較僅減少 0.058dB、0.092dB
與 0.081dB 之影像品質，而分數演算法也可分
別減少 32.3%、30.4%與 28.4%之運算，與完全
搜尋相較僅減少 0.012dB、增加 0.015dB 與增
加 0.019dB 之影像品質。本演算法已實作於
H.264 編碼 IC 上，該設計並刊登於國際頂尖
IC 設計會議 ISSCC 2007 會議論文中，另外也
以國科會補助名義刊登在 2 篇 APCCAS 2006
會議論文內。 
 
英文摘要 
In this project, we have proposed a high 
quality and low complexity required motion 
estimation (ME) algorithm for the advanced 
video compression technology. The algorithm 
possesses not only low computational operations 
but also regular data accesses. It can provide a 
high data anticipation to avoid the fetching 
hazard. The proposed algorithm differs from 
other fast ME ones with a low average 
complexity but applied the full search in worse 
case. This eventually causes a large hardware 
implementation cost. Our ME algorithm consists 
of an integer ME and a fractional one. The 
integer ME adopts two steps operations to 
reduce the complexity, and the fractional one 
dose a trend of the partition size scheme to lower 
the number of the fractional ME operations for 
sub-macroblock partitions. The simulation 
shows that the proposed IME algorithm can 
reduce 96.8%, 95.6%, and 96.8% of block 
matching points at QCIF, CIF, and D1 formats, 
respectively. Compared with the full search 
integer ME algorithm, it only drops 0.058dB, 
0.092dB, and 0.081dB. The fractional ME one 
reduces 32.3%, 31.4% and 28.4% operation at 
the quality of 0.012dB worse, 0.015dB better, 
and 0.019dB better than the full search algorithm. 
We have implemented the algorithm on an 
H.264 encoder IC, which design was accepted by 
the internal top IC design conference ISSCC 
2007. Besides, the IME and FME algorithms 
were also published on the proceeding of 
APCCAS 2006. 
 
二、 計畫的緣由與目的 
  影像、聲音、和動態的畫面數位化後，會
產生大量的資料，使得不易傳輸或儲存，例如
以一個像素大小 352×288、每秒 30 張的視訊，
每秒就需要 35Mbps 的資料量，因此，如果不
  
FME  Start
Complete
16x16 ~ 8x8
Compare the cost of  
16x16 and four 8x8,
16x16 is better?
Mode reduction for 
each sub-macroblock
Yes
Mode decision 
No
   
 
分數型位移運算(FME)： 
    在非整數點搜尋方面可搜尋到四分之一
點的精確度，使預測更加準確，因此增加了運
算複雜度，非整數點方面就佔了 H.264/AVC
系統約 45%的運算量。由於非整數點搜尋方面
是採用「階層式」做法，此種方式不具資料預
測性，因此不適合以硬體實現。對 Fractional 
ME (FME)提出針對 Sub-macroblock Partitions
進行模式刪除的演算法，並且修改搜尋區域變
為連續之搜尋點，對於硬體實現有很高利用
率。 
 圖三，先完成 16×16 ~ 8×8 這四種模式的
編碼，利用 IME 在分析不同 Macroblock 
Partitions 之 Cost 趨勢，對 16×16 區塊與四個
8×8 區塊所得到的 Cost 進行比對分析，當
16×16 區塊模式的 Cost 比較小時，編碼區塊是
一個比較平坦的區塊，因此省略 8×4、4×8 及
4×4 這三種模式的編碼，由 16×16 ~ 8×8 四種
模式取得最佳的編碼模式；反之編碼區塊使用
較小的區塊來做預測將會得到較好的效果，因
此對這四個 8×8 區塊進行較小區塊的編碼，針
對 Sub-block Partitions 部分提出一套新的模式
刪除的方法，利用區塊間水平與垂直方向的關
聯性，在 8×4、4×8 及 4×4 將不必要的區塊切
割模式刪除降低運算的複雜度，得到最佳的編
碼模式。此種方法可以避免一般 FME 在 Worse 
Case 時做全部 Mode 運算，造成硬體設計時須
考量此狀況，演算法所省下之運算無法實際降
低晶片面積之窘境，並可保持演算法之精確
度。 
圖三、Proposed FME mode reduction flow 
 
針對所提出之 HDLFS IME 演算法與現有
的演算法做比較，表一與表二為所提出的演算
法與文獻[1]、[2]、[3]、[4]中其他移動估測演
算法分別在 QCIF 與 CIF 標準視訊格式下所做
的比較。表一為 QCIF 在 HDLFS IME 演算法
選用參數 5_2_2，在搜尋範圍為[32,-32]、在 5
個固定 QP 值為 15、20、25、30、35 的環境
下進行模擬，只剩下 3.2%的運算複雜度，而
PSNR 平均只損失了 0.03dB；表二為 CIF 在
HDLFS IME 演算法選用參數 5_2_2，在搜尋範
圍為[32,-32]、在 4 個固定 QP 值為 20、25、
30、35 的環境下進行模擬，只剩下 4.4%的運
算複雜度，而 PSNR 只損失了 0.04dB。此演算
法之矽智財設計已由中正大學郭峻因教授所
領導的晶片系統設計實驗室完成。在 integer 
motion estimation 方面硬體實現方面，最高的
工作頻率為 115MHz，可應用於 QCIF、CIF、
SDTV 及 HDTV，工作頻率分別為 10MHz, 
20MHz, 40MHz 及 108MHz 以達到即時系統的
需求。而 fractional motion estimation 最高的工
作頻率為 158.7MHz，可應用於 SDTV 及
HDTV，工作頻率分別為 40MHz 及 108MHz
出席國際學術會議心得報告 
                                                             
計畫編號 95-2221-E-224-110- 
計畫名稱 H.264 Inter Prediction矽智產設計 
出國人員姓名 
服務機關及職稱 
蘇慶龍 
國立雲林科技大學電子系助理教授 
會議時間地點 Dec. 4~7, 2006 新加坡 
會議名稱 IEEE Asia Pacific Conference on Circuits and Systems (APCCAS), 2006 
發表論文題目 
一、Low Complexity High Quality Fractional Motion Estimation Algorithm and 
Architecture Design for H.264/AVC 
二、A Low Complexity High Quality Integer Motion Estimation Architecture 
Design for H.264/AVC 
 
一、參加會議經過 
本次會議共發表三篇論文，其中「Low Complexity High Quality Fractional Motion 
Estimation Algorithm and Architecture Design for H.264/AVC」為 Special Session之邀稿論
文，「A Low Complexity High Quality Integer Motion Estimation Architecture Design for 
H.264/AVC」為自行投稿之 Regular Session 接受論文。另外也為實驗室合作學校中正大
學資工系發表一篇關於 MPEG-4/H.264 解碼器設計論文。此趟在新加坡共停留三天，第
一天晚上飛抵新國，第二天發表兩篇論文，第三天發表一篇論文。任務完成後隨即搭晚
班飛機返國。 
在新加坡時由於時間匆促並未廣泛參訪新國研究機構。但是在會議期間利用空檔時
間與新國、日本、南韓、香港與中國大陸學者討論自己研究領域環境與方向，因此受益
良多。 
 
二、與會心得 
前段提到，由於時間匆促，但是也與亞洲各國學者充分交換意見。發現新加坡學者
多專注於理論的研究對系統方面較不感興趣。因此學術論文發表為其重點。而日本學者
在 Video IC設計領域則較不跟隨 Standard實做，但是在理論創新、實現方法與系統設計
部分均衡發展。而香港、新加坡、日本等國家其研究主力如碩、博士生，大陸學生佔其
相當高之比例。因此可以預見，在未來數年這些學生投入產業界與學術界時，大陸會慢
慢展現其影響力。而我國的論文則多注重在 Standard實做技巧，對前瞻性之系統研究較
不熱衷。這與國內學生畢業要求、老師升等要求與業界合作案有關。但是長此以往，我
國將漸漸無法主導本領域之發展，為重要警訊。 
總之，非常感謝國科會提供經費可以讓我出國參加會議，有機會跟亞洲各國學者交
換觀念與相互觀摩。相信不但對我的研究有相當大的助益，在調整實驗室方向與計畫上
也增加許多思考面向。 
會議中發表論文全文如後： 
16
16
8
8
 
Figure 1.  Segmentations of macroblock motion compensation 
In the previous architecture designs [4][9], the data reuse 
of SAD was adopted in VBSME to reduce the hardware cost. 
But they also suffer the overhead of the additional 
multiplexers, de-multiplexers, internal bus, and data buffers 
that were used to select and store these partial SADs. This 
overhead makes a low cost hardware design for H.264/AVC 
inter prediction become difficult because of the wide 
distribution of the 41 MVs. Hence, we have analyzed the 
MV distribution of the “mobile: video stream with ±32 
search ranges. Fig. 2 shows the probability of the MV 
displacement from the center of 16×16 macro partitions. It 
indicates most MVs are concentrated around the 16×16 MB 
partition. In a fact, the distance range within 3 integer pixels 
covers 94.7% of the total MVs. 
 
Figure 2.  The analysis of VBSMVs distribution 
Based on this property, we propose an HDLFS IME 
algorithm that consists of two stage processes. The first stage 
process performs the motion estimation based on 16x16 MB 
with respect to down-sampling pixel positions for reducing 
the hardware cost. Several candidates are obtained in the first 
stage process. The second stage process locally performs the 
accurate variable block size motion estimation on pixels 
around the selected candidates to obtain the 41 MVs. Fig. 3 
illustrates the flow chart of HDLFS IME algorithm. In the 
beginning, the current and reference pixels was truncated as 
half-word data operations to both save the memory 
bandwidth and reduce hardware cost. Down sampling on the 
search points was performed both along the horizontal and 
vertical directions starting from the center of the search 
range. In this stage, only the 16×16 MB partition mode is 
processed to select several candidates. Then, the first stage 
ME sieves out several candidates as the center of the local 
full search in the second stage. The second stage ME 
searches around all the candidates generated from the first 
stage to calculate the 41 cost values for IMVs on each search 
point to obtain the best matched motion vectors. This 
concept combines the down-sampling and half-word 
operations to dramatically reduce the operation counts. The 
precision of IME is decided by the down-sampling ratio and 
the search range of the local full search. The first stage IMVs 
are only grabbed by 16×16 partition, thus the search range of 
the second stage must cover most MVs of the other MB 
partitions. Our simulation results show the second stage 
search range only requires ±2 pixels. Eq. (1) presents the 
number of search point ratio of HDLFS IME to FSBM 
algorithm. The indexes z, y, n, and m denote the down-
sampling ratio, the number of candidates chosen by the first 
stage ME, the search range of ME, and the local search range, 
respectively. 
 
2
22
)12(
)12(2/)12/(
+×
+++×=
n
myzn
SP
SP
FSBM
HDLFSIME       (1) 
 
Figure 3.  The flow chart of HDLFS IME 
Table I and Table II list the simulation results of CIF and 
D1 format under the HDLFS parameters (z,y,m) are equal to 
(5,4,2) and (5,2,2), respectively. By applying Eq. (1), the 
proposed algorithm at CIF and D1 formats drops 0.06968dB 
and 0.08296dB PSNR loss. The total numbers of search 
points are 4.36% and 3.18% as compared to those in FSBM. 
TABLE I.  CIF z-y-m=5-4-2 HDLFS IME ALGORITHM SIMULATION 
RESULTS (REFERENCE 4 FRAMES, SEARCH RANGE=±32) 
Video Sequence (CIF: 352×288 Pixel) 
Foreman Mobile Stefan Q
P 
FSMBA HDLFS Diff. FSMBA HDLFS Diff. FSMBA HDLFS Diff. 
0 59.16 59.17 -0.01 59.16 59.15 0.01 59.17 59.16 0.01 
2 56.23 56.21 0.02 56.13 56.12 0.01 56.18 56.16 0.02 
4 54.21 54.18 0.03 54.18 54.17 0.01 54.22 54.20 0.02 
6 52.53 52.49 0.04 52.37 52.35 0.02 52.46 52.43 0.03 
8 50.98 50.94 0.04 50.83 50.80 0.03 50.96 50.93 0.03 
10 49.67 49.61 0.06 49.44 49.41 0.03 49.62 49.58 0.04 
12 47.98 47.90 0.08 47.58 47.52 0.06 47.86 47.79 0.07 
14 46.57 46.46 0.11 46.03 45.96 0.07 46.44 46.36 0.08 
16 44.94 44.87 0.07 44.33 44.26 0.07 44.83 44.76 0.07 
18 43.29 43.20 0.09 42.43 42.34 0.09 43.15 43.06 0.09 
20 41.83 41.75 0.08 40.73 40.64 0.09 41.65 41.55 0.10 
22 40.55 40.46 0.09 39.15 39.05 0.10 40.24 40.13 0.11 
24 39.05 38.96 0.09 37.24 37.15 0.09 38.54 38.41 0.13 
26 37.75 37.65 0.10 35.58 35.50 0.08 37.00 36.88 0.12 
28 36.59 36.49 0.10 33.97 33.90 0.07 35.51 35.38 0.13 
30 35.31. 35.22 0.09 32.22 32.15 0.07 33.84 33.73 0.11 
32 34.10 34.01 0.09 30.63 30.57 0.06 32.31 32.20 0.11 
34 33.01 32.90 0.11 29.22 29.16 0.06 30.92 30.83 0.09 
36 31.87 31.77 0.10 27.77 27.70 0.07 29.43 29.35 0.08 
38 30.75 30.68 0.07 26.46 26.40 0.06 28.03 27.94 0.09 
40 29.77 29.66 0.11 25.28 25.21 0.07 26.74 26.66 0.08 
Average Diff. 0.0742 Average Diff. 0.0580 Average Diff. 0.0766
Average Diff. 0.069683 
 
 
 
Figure 6.  (a) The PE structure; (b) The AD structure; (c) The mode 
generator architecture 
The mode generator use half-tree structure to save 
hardware cost as shown in Fig. 6(c). For every search points 
in the second stage, the comparator module uses only 16 
instead of 41 comparators to find the best motion vectors for 
each mode and can greatly reduce the hardware cost. Finally, 
it spent 41 cycles to pass the 41 sets of best motion vectors 
to fractional motion estimation for further search. In the 
proposed IME architecture, one search range buffer of 9 x 
256 bytes SRAM, one current MB buffer of 256 bytes, and 
one reference MB buffer of 256 bytes are required. 
Therefore, the total required local memory buffer size is 
2.75Kbytes (or 22Kbits). The proposed architecture of the 
memory rotation scheme and the AD structure fully supports 
the HDLFS IME. This configurable hardware design 
supports the variable algorithm parameters, thus the same 
hardware can perform a tradeoff of the scalable search range 
and the density of search points. 
IV. PERFROMANCE COMPARSION 
The proposed architecture has been implemented by 
Verilog HDL with nLint checking [8] and simulated with 
ncVerilog simulators. It has been synthesized by Synopsys 
Design Compiler with TSMC 0.18um CMOS library. The 
implementation results are shown in Table III. The 
maximum working frequency of the proposed design is 
125MHz, which can achieve real-time integer motion 
estimation on HD720 video at 105MHz@30fps. Table III 
also lists the comparison of the proposed design with other 
VBSME architectures presented in [4-7]. It shows that our 
architecture is faster for the same search range, requires less 
on-chip memory and owns lower hardware cost. 
TABLE III.  COMPARISONS OF THE VBSME ARCHITECTURES 
  [4] [5] [6] [7] Proposed 
# of PE 16 16x16 128x8 16x16 2x16 
32x32 128x64 64x64 Search range
16x16 
64x64
64x32 32x32 
32x32 
16x16,Block size Full modes 8x8, 4x4 Full modes Full modes Full modes 
Process 0.13 um 0.5 um 0.18 um 0.18 um 0.18 um 
Gate Count 108K - 330.2K 154K 47.9K 
On-chip memory - 96Kbits 208Kbits 60Kbits 22Kbits 
81 MHz (SDTV) 40MHz (SDTV)Work Freq. 100MHz 100MHz108 MHz (HD720) 100 MHz 105MHz (HD720)
Throughput 
(MB/sec)  5,560 - - 97,560 140,924 
Quality loss 0dB 0dB 0dB 0dB CIF: 0.06968dBD1:0.08296dB
V. CONCLUSION 
A low cost high quality motion estimation IP design has 
been proposed for VBSME in H.264. The proposed design is 
based on a low complexity HDLFS IME algorithm at 
average cost of 0.06968dB and 0.08296dB loss at CIF and 
D1 formats. Moreover, the configurable PE design and the 
memory rotation mechanism have been utilized for 
achieving low hardware cost and low memory bandwidth. 
The architecture fully supports the parameter configuration 
of HDLFS IME for the tradeoff of search range and video 
quality. According to TSMC 0.18um CMOS technology, the 
proposed design costs 47.9K gates, 4Kbits of Cur./Ref. pixel 
buffer and 22Kbits local memory. The maximum operating 
frequency of the proposed design is 125MHz and it can 
achieve real-time motion estimation on D1 video and 
HD720 video when operated at 40MHz and at 105MHz, 
respectively. 
ACKNOWLEDGEMENT 
This work is supported under R.O.C. National Science 
Council Contract #NSC95-2221-E-224-110. 
REFERENCES 
[1] Joint Video Team, Draft ITU-T Recommendation and Final Draft 
International Standard of Joint Video Specification, ITU-T Recom. 
H.264 and ISO/IEC 14496-10 AVC, May 2003 
[2] Lian E.G. Richardson, H.264 and MPEG-4 Video Compression – 
Video Coding for Next -generation Multimedia, JohnWiley & Sons 
Inc., 2003. 
[3] Joint Video Team Reference Software JM9.3, http://iphome.hhi.de/ 
suehring/tml/doc/, June 2005. 
[4] S. Y. Yap, J. V. McCanny, “A VLSI architecture for variable block 
size video motion estimation”, IEEE Transactions on Circuits and 
Systems, vol. 51, no. 7, pp. 384 – 389, July 2004. 
[5] P. M. Kuhn, A. Weisgerber, R. Poppenwimmer, and W. Stechele, “A 
flexible VLSI architecture for variable block size segment matching 
with luminance correction,” Proc. ASAP’1997, Zurich, 1997. 
[6] C. Y. Chen, S. Y. Chien, Y. W. Huang, T. C. Chen, T. C. Wang, L. G. 
Chen, ”Analysis and Architecture Design of Variable Block Size 
Motion Estimation for H.264/AVC”, IEEE Transactions on Circuits 
and Systems-Part I, vol. 53, no. 2, pp. 578-593, Feb. 2006. 
[7] M. Kim, I. Hwang, and S. I. Chae, ”A fast VLSI Architecture for 
Full-Search Variable Block Size Motion Estimation in MPEG-
4/H.264,” Proc. ASP-DAC’2005, vol. 1, pp. 631 - 634, Jan. 2005. 
[8] Michael Keating and Pierre Bricaud, “Reuse Methodology Manual” 
3rd edition by Kluwer Academic Publishers, 2002. 
[9] Tung-Chien Chen, Yu-Wen Huang, and Liang-Gee Chen, “Analysis 
and design of macroblock pipelining for H.264/AVC VLSI 
architecture”, Proc. ISCAS '2004, Vol. 2, pp. II - 273-6, May 2004.
algorithm respectively provides 0.01196dB PSNR less than 
and 0.0115dB PSNR higher than quality of JM9.3 [8] at CIF 
and D1 formats in average. The FME architecture design 
supports run-time dynamic mode selection from different 
packages of MB partitions for the tradeoff in video quality 
and power consumption. The proposed design costs 112.7K 
gates and achieves real-time FME processing on D1 
(720×480) and HD720 (1080×720) videos when operated at 
40 MHz and 108 MHz, respectively. 
The rest of this paper is organized as follows. In Section II, 
we briefly introduce an H.264 VBSME and a general 
hardware implementation of FME. In Section III, we 
describe the proposed FME algorithm with analysis on the 
simulation results. In Section IV, we will illustrate the 
associated FME architecture design and its performance 
evaluation. Finally, we conclude this paper in Section V. 
II. H.264 VARIABLE BLOCK SIZE FRACTIONAL MOTION 
COMPENSATION 
To increase the compression ratio, H.264 adopts the 
variable block size ME and Fractional ME. Figure 1 shows 
that a MB can be organized by variable block size 16×16, 
16×8, 8×18, or 8×8 macroblock partition. Each 8×8 
macroblock partition can be further divided by 8×8, 8×4, 4×8, 
or 4×4 sub-macroblock partitions. Lagrangian mode decision 
decides the best MV organization according to the cost of 
each MB partitions. The variable block size ME consumes 
the huge operation because of the repeated SAD and initial 
cost calculations. 
 
Figure 1.  Segmentations of macroblock motion compensation 
A general hardware implementation of FME is presented 
in Figure 2. Since the regular hardware architecture and the 
divergence of IMVs, the scheme of reusing the partial SAD 
data is hard to apply to the FME architecture design. The 
IME process searches the integer MV candidates within 
search range and 41 MVs will be passed to the FME module. 
The FMVs of macroblock partitions is obtained by searching 
around its corresponded IMV from the most important 
16×16 MB partition. The mode decision makes the best 
organization for MB partitions by summation of absolute 
transformed difference (SATD) value and the initial cost. In 
the next step, the best mode decision of the each 8×8 block 
can be determined by the minimum cost of sub-macroblock 
partitions. Finally, the mode decision is applied to compare 
the best mode of the macroblock and sub-macroblock 
partitions again for deciding the best mode for FME. 
 
Figure 2.  A general FME hardware implementation flow 
III. PROPOSED FME ALGORITHM 
In this section, we describe the proposed low complexity 
FME algorithm for high quality realization. By intelligently 
truncating FME operations on sub-macroblock partitions, we 
can effectively reduce about 30% of complexity in the 
proposed algorithm with comparable video quality with 
JM9.3 reference software. In addition, the adoption of 
regular search points facilitates the efficient VLSI 
architecture design for the FME. 
Figure 3 presents the proposed FME mode decision 
algorithm. The labels in italic type are the same as the 
partition fashions in Figure 1. Function FME_Cost performs 
the cost of any block size by sub-pixel interpolation, 2D 
Hadamard transform, summation of absolute difference 
(SAD), and the cost generation. Function Sub_FME_Cost 
individually determines the cost of four 8×8 partitions 
organized in 8×4, 4×8, or 4×4 partition. First, function FME 
receives the 41 IMVs and a prediction motion vector which 
is decided by MVs of the three neighbor MBs. The proposed 
FME algorithm computes the cost values of macroblock 
partitions by function FME_Cost. These operations in 
Parallellism_1 can be concurrently performed by the 
hardware PEs. If the cost of partition 16×16 is larger than 
one of the summation of four partition 8×8, it means that the 
smaller partition has better compression ratio. For this reason, 
it is necessary to evaluate the smaller partitions, i.e. 8×4, 4×8, 
and 4×4, that are performed in the next step. The operations 
in Parallelism_2 calculate Sub_Value of four 8×8 partitions 
by function Sub_FME_Cost. The values of Sub_H_Value, 
Sub_H_Value and Sub_HV_Value represent the 64 pixels 
average value of partition 16×8, 8×16 and 8×8 in the same 
MB allocation of partitions 4a, 4b, 4c, or 4d. The three Sub_ 
values in Parallelism_3 indicates the same but small texture 
pattern of sub-partitions 8×4, 4×8, and 4×4, respectively. 
Verification of the minimum for the three Sub_ values helps 
us to select the partition smaller than size of 8×8 in 
Parallelism_4 procedures. Finally, the Lagrangian mode 
decision chooses the best mode and its MVs for inter/intra 
mode decision. In the fast mode decision algorithm of 
architecture design, function FME_Cost dominates the 
computational requirements, which is realized in dedicated 
hardware for achieving real-time processing.  
