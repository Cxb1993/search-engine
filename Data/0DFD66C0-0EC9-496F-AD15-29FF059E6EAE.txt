1 Abstract
Although receiving considerable attention in recent years for its low power consumption in
very long instruction word (VLIW) architecture, dynamic voltage scaling (DVS) is ineﬃcient in
65nm-25nm-process technology. Therefore, this work designs an adaptive-speed processor with
an energy-proportional eﬀect in 65nm-25nm process technologies. An adaptive-IPC (AIPC)
architecture and multi-pass list scheduling (MPLS) algorithm is also developed. AIPC allows
each function unit to have its register ﬁle named local register ﬁle (LRF) in order to reduce
data-access costs from the original register ﬁle named share register ﬁle (SRF). As a running
modiﬁed list scheduling algorithm with all possible parallelism, MPLS determines the minimal
energy consumption. The modiﬁed list scheduling algorithm balances the problem between
speed and energy consumption through sorting operations with low data relation together in
the step of deterring the topological order list. AIPC and MPLS can reduce 20% to 40% of
energy consumption. As a feasible means of lowering power consumption when adding a small
register ﬁle, also beneﬁts to subsequent compiler research, such as registered allocation.
2 摘要
近幾年來，在 Very long Instruction Word 架構下，低功率的設計是以 Dynamic Voltage
Scaling (DVS) 為主，然而 DVS 在 sub deep-micron 製程下，的低功耗效果並不是十分的顯
著。
我們的目的是，在 65nm 至 25nm 的製程下。設計出一個可調控速度並具有 energy-
proportional 效果的處理器。
我們提出 Adaptive-IPC (AIPC)架構和 Multi-Pass List Scheduling (MPLS)演算法來達成
這個目的。AIPC 讓每個 Function Unit 都有自己的小型 register ﬁle 稱為 Local Register File
(LRF) 以減少資料存取能量的成本對於原本的 register ﬁle 稱為 Share Register File (SRF)。
MPLS 是針對所有可能的平行度執行 local scheduling algorithm，從中挑選出耗能最小的結
果輸出。而我們修改 List Scheduling 為，在決定 topological order 時，將資料關連度較小的
排序在一起，而在插入 schedule chart 時，仍然使用 As soon as possible (ASAP) 策略來平衡
速度和效能的問題。
在只有 local instruction scheduling 的狀況下，我們假設 register allocation 能完美的分配
至 LRF 與 SRF，我們可以比現有的架構省下 20% 至 40% 的能量。在未來，做完 register
allocation之後，我們仍有很大的機率可以從 AIPC架構省電。在 65nm至 25nm的低功耗研
究時，AIPC 是一個可行的方向。然而當製程更往前推近，而 LRF 額外的成本必需考量的時
候，則需要發展 Multi-Voltage Register File。我們可以動態的開關以調整可以使用 Register
File 的大小。
Keywords: VLIW Architecture, local scheduling, Complier, low power con-
sumption
I
Flow-graph analysis of low power consumption
has, in recent years, focused on adapting the function
unit, explaining why the ratio of function unit in total
power consumption is not a significant factor [6].
More than a function unit, the ratio of power
consumption in a register file is 24% without
cache power consumption. [3] The ratio of power
consumption in the function unit and register file is
38%. (Fig. 4) achieves an improved power-savings
effect when the function unit and register file are
considered simultaneously.
Register File
Pipeline Register
Clock+ 52%
14%
24%
10%
Control Logic
Arithmetic
Fig 4. Total energy efficiency without cache
III. ADAPTIVE-IPC ARCHITECTURE
A. Underling concept for Adaptive-IPC Architecture
The adaptive-IPC architecture is an efficient
method to reduce data-supply energy by adding a
small register file to an embedded processor. [6]
Notably, the power-saving effect is significant if the
amount of data access from the conventional register
file is moved to a small register file. Designing a
efficient and small register file is thus of priority
concern.
B. Energy Complexity of register file
 0
 2e-08
 4e-08
 6e-08
 8e-08
 1e-07
 1.2e-07
 0  10  20  30  40  50  60  70
Po
we
r
Regs
16-bits
32-bits
Fig 5. Dynamic Power ∝ size in register file
 0
 2e-08
 4e-08
 6e-08
 8e-08
 1e-07
 1.2e-07
 1.4e-07
 1.6e-07
 1.8e-07
 1  2  3  4  5  6  7  8
Po
we
r
Ports
32 bits
16 bits
Fig 6. Dynamic energy ∝ port2 in register file
Three factors of design that influence the power
consumption of a register file are ports (p), size (r)
and bit (b). These factors with static and dynamic
power are discussed as follows.
The static power of a register file is proportional
to the bit, size and ports. Static power is the domain
of the number of transistors for a cell array and
decoder. The number of transistors for a cell array
is proportional to br. The number of transistors of a
decoder is proportional to prlog2 r. Static power of
register file is proportional to br + log2 r.
The dynamic power of a register file is proportional
to the bits, sizes and ports. Dynamic power is the
domain of the area of bit line and word line. The
area of bit line and word line for a register file is
proportional to the ports, size and bit pbr. (Fig. 5)
The number of ports significantly influences the
dynamic energy of a register file. The dynamic
energy of a register file is proportional to port2 when
data access to a register file is utilized 100%. (Fig. 6)
The number of ports is considerable in dynamic
energy when the utilization of a register file is higher
than a certain portion.
The design of a register file with small size and
fewer ports can significantly reduce the dataaccess
energy.
C. Adaptive-IPC architecture
Share Register File (SRF)
FU0
L
R
F
Vcc
FU0
L
R
F
Vcc
FU0
L
R
F
Vcc
FU0
L
R
F
Vcc
Fig 7. AIPC VLIW Architecture
This work designs a modified VLIW architecture
-Adaptive-IPC architecture (AIPC), in which a small
register file named Local Register File (LRF) is added
for each function unit. All function units transfer
data from the conventional register file named share
register file (SRF) (Fig. 7). The proposed design can
reduce the data-access energy when the data access
is moved from SRF to LRF.
All function units are homogeneous to ensure the
simplification of the architecture and observe the
energy consumption clearly. While consisting of a
shifter, multiplier and arithmetic unit to simulate the
function unit, each function accesses its LRF and
SRF data directly, but not the other function units
I0 I1 I4
I2 I3 I5
I6
1 2 3 4
slot 0
1
cycle
I0
I2
I4
I1
I3
I5
I6
1 2 3
slot 0
1
2
3
cycle
Share Register File
Local Register File
Fig 11. Scheduling constraint: utilization of schedule chart and the
number of cross-slot DDG edges
runs all possible parallelisms and determines the
minimal energy consumption of these results. The
algorithm is shown in Algorithm 1.
Algorithm 1 Multi-Pass Scheduling Algorithm
Input: G - Data D ependence Graph
Input: T - Time Constraint
Output: SC - Schedule Chart
1: E = [0, 0, 0, ..0] and |E| = MAXIPC
2: for m = 1 → MAXIPC do
3: E[m] =Run local scheduling algorithm with
parallelism m
4: end for
5: i = minargs(m)(E[m])m∈1→MAXIPC
6: SC = Run local scheduling algorithm with paral-
lelism i
C. Design Strategies for Local Scheduling Algorithm
In fix parallelism, the local scheduling algorithm
considers specific two factors. The algorithm finishes
the scheduling as soon as possible and reduces the
amount of cross-slot DDG edges. Consequently, the
scheduling results satisfy the time constraint with a
high probability when the algorithm completes the
scheduling as soon as possible efficiently. The usage
of LRF thus increases when the algorithm reduces
the amount of cross-slot DDG edges.
The list scheduling algorithm is modified to fit
the problem for meeting time constraint. The list
scheduling algorithm is divided into the two phases,
i.e. determine the topological order and insert the
node to the schedule chart.
Algorithm 2 List Scheduling
Input: G - Data Dependence Graph
Input: m - parallelism
Output: SC - Schedule Chart
1: Determine the topological order from G
2: Insert the node to SC by the topological order.
The design is balanced speed and low power
consumption design as follows. When the the
topological order is determined, nodes with a low
data relation are allocated together. When the node
is inserted in the schedule chart, as-soon-as-possible
policy is adopted to balance the speed and data-
dependence problem. Data relation is defined as the
distance to these nodes common ancestor/ decedent.
Of priority concern is how to select a node to
reduce the cross-slot DDG edges when the number
of ready instructions is more than that of parallelism.
Outcome of the schedule chart depends on different
topological orders. A low data-relation node with
these nodes in the same slot should be selected when
only one issue slot is in the cycle. For instance,
selecting I1 than I2 is preferred when 1st cycle is
available. (Fig. 12) The topological order influences
the following scheduling results.
I0 I1 I4
I2 I3 I5
I6
1 2 3 4
slot 0
1
cycle
I0 I2 I4
I1 I3 I5
I6
1 2 3 4
slot 0
1
cycle
Fig 12. Determine the topological order
V. PREORDER LIST SCHEDULING
This work designs a preorder list scheduling with
preorder as-soon-as-possible (PASAP) list scheduling
algorithm and a preorder affinity-oriented (PAFO)
list scheduling algorithm. The scheduling results
of PASAP and PAFO also compared. Preorder list
scheduling algorithm (resembles OR is similar to)
the list scheduling algorithm, yet differs from the
goal of the algorithm.
Algorithm 3 Preorder List Scheduling Framework
Input: G - Data Dependence Graph
Input: m - Parallelism
Input: T - Time constraint
Output: SC - Schedule Chart
1: Determine the topological order from G
2: Insert the node into SC by the topological order.
A. Preorder-ASAP List Scheduling
In this work, the As-soon-as-possible policy is
insert into the schedule chart. The ASAP policy
schedules an instruction either at its earliest available
time or at its high affinity slot if two or more slots are
in its earliest available time, as shown in Algorithm 4
Algorithm 9 Non-Preorder-AFO List Scheduling
Input: G - Data Dependence Graph
Input: m - Parallelism
Input: T - Time constraint
Output: SC - Schedule Chart
1: V = V (G)
2: while V ̸= ∅ do
3: Select operation Ii to be scheduled
4: Select slot s for Ii’s the highest data relation.
5: Select cycle τ for Ii’s earliest available time
from the select slot.
6: Insert node Ii at position (τ , s) in SC
7: end while
C. Selection next operation for scheduling
The policy selects no common ancestor/ decedent
at the nodes’ earliest available time.
Algorithm 10 Non-Preorder List Scheduling — Se-
lect next operation to schedule
Input: G - Data Dependence Graph
Input: SC - Partial Schedule Chart
Output: Ii - Next Operation
1: Determine Ready Set R
2: Determine Prioritized Set P from R
3: Determine the longest tail length of P
VII. EVALUATION
A. Environment Setting
The maximum time constraint is set to run PASAP
Algorithm with IPC m= 1. Also α with (0, 1] to
multiply the maximum time constraint to set the all
time constraint. Additionally, the parameter is set as
follows.
• Maximum IPC = 8
• SRF with (ports, regs, bits) = (24, 32, 32)
• LRF with (ports, regs, bits) = (3, 8, 32) and
(3, 16, 32)
In this work, 4 of the kernel functions of mibench
are set to run the evaluation. Also, these kernel
functions are run with the four algorithms (PASAP,
NPASAP, PAFO, NPAFO) and IPC = 1 to 8 and
α = 0.01, 0.02 . . . 1.
B. Implementation
The energy of ALU, shifter and multiplier is
measured with Synopsys design Compiler and UMC
90nm cell library. Also, the energy of the register
file is measured with Synopsys design compiler and
UMC 90nm memory compiler. Additionally, the
raw data are scaled to 35nm process technology.
Moreover, LLVM is used as a front-end to generate
DDG information and write MPLS algorithm in
order to simulate the results of a schedule chart.
C. Energy Model
This work develops an energy model to quantify
the computational energy of function unit and the
data-supply energy of SRF and LRF.
The computational energy model describes how to
utilize a function unit. The static energy presents the
number of issue slots. The static energy increases
with parallelism because the utilization of a function
unit decreases with parallelism. The dynamic energy
presents the number of operations to use a function
unit. The dynamic energy is a fixed value because
the number of operations in DDG remains constant.
The data-supply energy model presents the
difference between having LRF or not. The static
energy is considered as the overhead because there
are additional units to execute. The dynamic energy is
considered the reduced cost because the data-access
cost moves from SRF to LRF.
• Ecomp(m) = Est,comp(m) + Edyn,comp(m)
– Est,comp(m) = T (m) ·m · est,fu
– Edyn,comp(m) = I · edyn,fu
• Eds(m) = Est,ds(m) + Edynds(m)
– Est,ds(m) = T (m) · δst · est,srf
∗ δst = 1 +m αst
– Edyn,ds(m) = A · δdyn · erw,srf
∗ δdyn = rs(m)+(1−rs(m))(1− lr)+(1−
rs(m)) αdyn · lr
• T (m) – the number of cycles of the scheduling
result
• m – Instruction per cycle (IPC)
• I – the number of instructions
• est,fu – static energy for function unit per cycle
• edyn,fu – dynamic energy for function unit per
use
• αst – est,lrf/est,srf
• αdyn – erw,lrf/erw,srf
• A – the number of total read/ writes for register
file
• rs(m) – the ratio of SRF read/ write
• lr – assume the real ratio in LRF
In this work, EScomp(m) and ESds(m) are defined
to present the energy-saving ratio of computing
energy and data-supply energy. Where EScomp(m)
is always equal to 1 because the architecture does
not change with the function unit. The energy-saving
effect only happens to data-supply energy.
Notably, ESds(m) is formalized as
ESds(m) = R · δst + (1 − R) · δdyn. δst and
 0
 1
 2
 3
 4
 5
 6
 7
 8
 1 2 3 4 5 6 7 8
Sp
ee
d 
Up
IPC
PASAP - 01 Susan
PASAP - 07 sha
PASAP - 09 fft
PASAP - 10 fourierf
Fig 17. Speed Up with IPC
 0
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
 1  2  3  4  5  6  7  8
ES
_d
s
IPC
PASAP - 01 Susan lr=0.5
PASAP - 07 sha lr=0.5
PASAP - 09 fft lr=0.5
PASAP - 10 fourierf lr=0.5
PASAP - 01 Susan lr=0.3
PASAP - 07 sha lr=0.3
PASAP - 09 fft lr=0.3
PASAP - 10 fourierf lr=0.3
Fig 18. ESds(m)
 0
 0.01
 0.02
 0.03
 0.04
 0.05
 0.06
 0.07
 0.08
 0.09
 0.1
 0.11
 0.12
 0.13
 0.14
 0.15
 1  2  3  4  5  6  7  8
R
_E
_s
t_
ds
_s
rf_
on
ly
IPC
PASAP - 01 Susan
PASAP - 07 sha
PASAP - 09 fft
PASAP - 10 fourierf
Fig 19. R
 1
 1.1
 1.2
 1.3
 1.4
 1.5
 1.6
 1  2  3  4  5  6  7  8
de
lta
_s
t
IPC
PASAP - 01 Susan
PASAP - 07 sha
PASAP - 09 fft
PASAP - 10 fourierf
Fig 20. δst
F. Energy-Saving Effect
A problem involving computing energy and
data-supply energy is considered. The ratio of saving
data-supply energy is also discussed since computing
energy can not be saved in the proposed energy
model. Additionally, the saving data-supply energy
 0
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
 1  2  3  4  5  6  7  8
de
lta
_d
yn
IPC
PASAP - 01 Susan lr=0.5
PASAP - 07 sha lr=0.5
PASAP - 09 fft lr=0.5
PASAP - 10 fourierf lr=0.5
PASAP - 01 Susan lr=0.3
PASAP - 07 sha lr=0.3
PASAP - 09 fft lr=0.3
PASAP - 10 fourierf lr=0.3
Fig 21. δdyn
with ESds(m) indicates that the data-supply energy
with a local register file is the ratio from only a
shared register file. Consequently, data-supply energy
is saved when ESds(m) < 1.
Moreover, the ESds(m) value presents the balance
in the overhead and the energy savings. The ability
to find an appropriate ratio for R could save energy
from the AIPC architecture and MPLS algorithm.
On average, 20% to 40% of the energy cost can
be reduced in data-supply energy (Fig. 18). Where R
is about 3 to 11% when IPC decreases from 8 to 1
(Fig. 19). Although the ratio of static energy per cycle
and dynamic energy per cycle is a fixed value, the
number of reads/ writes increases with m. Doing so
allows R to decrease with m. Moreover, δst increases
with m (It is about 1 to 2)(Fig. 20), and δdyn reduces
20% to 40% of the energy costs. (Fig. 21)
G. The analysis of algorithm
1) Energy-Savings Effect: Non-preorder selection
is preferred to preorder selection from an energy
savings perspective. Non-preorder apply the same
concept to the unscheduled node. This is owing to that
a non-preorder considers not only the data dependence
of DDG, but also the state of chart results for a
partial schedule. It can be obtained from non-preorder
selection (Fig. 22)
 0
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
 1  2  3  4  5  6  7  8
ES
_d
s
IPC
PASAP - 01 Susan
PASAP - 07 sha
PASAP - 09 fft
PASAP - 10 fourierf
NPASAP - 01 Susan
NPASAP - 07 sha
NPASAP - 09 fft
NPASAP - 10 fourierf
Fig 22. energy-saving in algorithm
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/26
國科會補助計畫
計畫名稱: 可調適平行度VLIW處理器與功耗最佳化編譯技術
計畫主持人: 馬詠程
計畫編號: 99-2221-E-182-031- 學門領域: 計算機結構與計算機系統
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
本研究包含一文稿 ’’Energy-aware list scheduling for adaptive IPC 
processor’’, 投稿 Journal of Systems and Software 進行審查, 尚未列
入前述指標計算. 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
