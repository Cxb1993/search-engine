The Dijkstra algorithm with a Fibonacci heap data structure remains by far the fastest 
known algorithm for the general case of arbitrary non-negative link cost networks. 
Although some researchers have developed algorithms with average linear time, but the 
limitation make it unsuitable for road network. [Meyer, 2001] However, the traditional 
optimal shortest path algorithms, while remaining computationally intensive, do not meet 
the need of vehicle navigation. 
Traffic networks remain relatively constant over time, and thus preprocessing can be 
done to improve the query time. The problem itself becomes a trade-off between storage 
space and computation time. Although the pre-computed shortest path can provide near 
constant query time, but the O(n2)  storage space prevent the real traffic networks with 
node numbers exceeding hundreds of thousands from doing the pre-computation. Some 
researchers reduced the search space of the Dijkstra algorithm to 50~10% of the origin 
search space by using a pre-computed information that can be stored in O(n+m) space. 
[Dorothea Wagner and Thomas Willhalm, 2003] While facing the on board unit of 
vehicle navigation equipment, the storage space and computing power is more limited, it 
becomes necessary to introduce an even faster algorithm.  
While dealing with a traffic network, a person can rapidly indentify reasonably short 
path between two arbitrarily selected nodes. Although this path may not be the shortest 
path, it is a good alternative. Humans treat networks hierarchically, and the hierarchical 
concept can be introduced into in efforts to solve the shortest path for navigation systems. 
The contribution of this paper lies in combining the hierarchical concept and other 
techniques to establish a suitable algorithm for the onboard vehicle navigation system. 
The algorithm developed with this combined approach has the potential to be several 
thousand times faster than the traditional Dijkstra algorithm. 
 
2 PRELIMINARIES 
2.1 Graphs 
A weighted directed graph G=(N,A,c) comprising a finite set of nodes N, arc set 
NNA ×⊆ , and a real-valued nonnegative weight function 0: ≥→RAc  is considered in 
this study. The weight of arc Avu ∈),(  with start node v and end node u is denoted as 
c(u,v), if Avu ∉),( , ( ) ∞=vuc ,  . Throughout this study, the number of nodes N is 
denoted by n and the number of arcs A  is denoted by m. The arc cost represents the 
impedance of a vehicle traveling trough that arc, and can generally be described as arc 
length (actual length) or travel time. A graph is considered sparse, if the number of arcs 
m is in O(n2), and is considered large if it is only possible to afford a memory that is 
linear in the size of graph O(n+m). A path from an origin (s) to destination (t) is defined 
as a sequential list of links: (s,i),…,(j,t) and the path cost is the total costs of the 
individual links.  
 
Limiting Search Space – A* Algorithm 
The traditional optimal search algorithms, e.g. Dijkstra, examine all possible nodes 
from the origin to the destination node without considering the possibility that they will 
be included in the shortest path. If the algorithm utilizes the node location information 
and limits the search to a certain area, the search space can be reduced and the search 
performance can be improved. 
The A* algorithm, proposed by Hart, Nilsson, and Raphael, is one of the most 
effective methods of utilizing the limiting search space idea. A* algorithm is a best-first 
search algorithm with a heuristic evaluating function f(v) = g(v) + h(v). The f(v) denotes 
the label of node v, g(v) represents the cost of the current evaluated path from origin node 
to node v, and R→Avh :)(  is the estimated cost from node v to destination node t. The 
h(v) is important in this heuristics, and has the following characters. 
1. If the h(v) equals 0, then the A* algorithm performs as Dijkstra. 
2. If the h(v) is less than the actual distance between node v and the destination node, 
then the A* algorithm is guaranteed of finding the optimal shortest path. The search 
space is increased with decreasing h(v). 
3. If the h(v) is larger than the actual distance between node v and the destination node, 
then the A* is not guaranteed to find the optimal shortest path. Computational speed 
increases with h(v). 
 
Let h(v) and h’(v) denote two estimation functions that 0)(')( == thth and, 
)()(', vhvhNv ≥∈∀ . The set of nodes scanned by A* algorithm using h’(v) is contained 
in the set of nodes scanned by A* search using h(v). [Goldberg, 2007] In the worst case, 
the time complexity of A* algorithm is exponential. Regarding the application of vehicle 
navigation, the estimated cost h(v) can be calculated based on the Euclidian distance 
between node v and the destination node. Based on this estimated cost, the search space 
of the A* algorithm tends to follow the same direction as the destination. The A* 
algorithm is the most efficient algorithm that guarantees the identification of an optimal 
solution. A study empirically found that the A* algorithm explores less than 10% of the 
nodes expanded by the Dijkstra algorithm [5]. Some researchers demonstrated that A* 
algorithm identifies the shortest path in many Euclidean graphs with an average 
computational complexity of O(n). Owing to its performance and accuracy, the A* 
algorithm is the most popular algorithm currently implemented in vehicle navigation 
system. Figure 1(a) compares the search space with the Dijkstra algorithm. 
 
Limiting Search Space – Hierarchical Concept 
The hierarchical concept is known as an abstraction problem solving strategy. The 
basic idea is to first focus on the essential features of a complex problem, with the details 
being completed later. Uchida et al. demonstrated that drivers prefer to select a path 
based on the connectivity, familiarity, and road types rather than selecting the optimal 
shortest path. Huang and Jin proposed a hierarchical search method combined with a pre-
calculated shortest path. The study of Huang and Jin first divided a large network into 
several separated sub-networks and stored the all-to-all shortest path within the sub-
4.1 Implementation of Hierarchical and Bi-directional Concepts 
The network is divided into two connected layers. The upper layer comprises high 
mobility links, for example, freeway and expressway; moreover, the lower layer 
comprises high accessibility links, for example, urban and rural networks. Pseudo nodes 
are created for these separated networks, and these nodes enable entering or exiting the of 
the separated networks, and thus these nodes are labeled entry/exiting nodes. In real 
networks, not all entry/exit nodes can both enter and leave the layer, and instead the enter 
and leave must depend on the real network, meaning some parameters on the node should 
store this information. This study combines the Bi-directional concept and the 
Hierarchical concept, and crate a Bi-directional Hierarchical Concept demonstrated in the 
figure 2. This research combines the above concepts and suggests the following solution 
procedure. 
 
1. Compute the Shortest Path between the Origin Node and the nearest Entry Node on 
the lower layer. 
2. Compute the Shortest Path between the Destination Node and the nearest Exiting 
Node on the lower layer. 
3. Compute the Shortest Path between the Entry Node and the Exiting Node on the 
upper layer. 
 
 
FIGURE 2. Bi-directional Hierarchical Concept 
 
4.2 Integration of Existing Shortest Path Algorithm 
The solution procedure proposed above involves several shortest path computations. 
These computations use traditional algorithms, including the Dijkstra algorithm and the 
A* algorithm. The Dijkstra algorithm is recognized as the best known shortest path 
algorithm that provides exact solution. This algorithm is selected to test the speed-up and 
error of the hierarchical and bi-directional concepts. For vehicle navigation applications, 
where memory and computing power are limited, the Dijkstra algorithm is not suitable. 
to find where the data is stored. Searching algorithms are time consuming. Binary search, 
a fast and popular search algorithm, takes O(2log2n); while direct access takes only O(1).  
Extensive node search is performed during the node selection stage of the shortest 
path algorithm. If the relationship between links and nodes is stored in matrix form, 
where node id represents the row subscript, the link id is the column subscript, and the 
cost is the matrix element. The node can be directly accessed by the subscripts without 
searching, improving the speed of node selecting stage. However, since the traffic 
network is sparse, the matrix storage method is extremely wasteful. A crucial problem is 
how to simultaneously maintain the speed of direct access and minimal storage space. To 
achieve this the links were first sorted and assigned a continuous id. These id numbers 
were then be stored immediately following each node structure according to the network 
structure; the id of neighboring node were also stored. During the computation stage, 
when a node is selected, the connected link id was also be obtained; link information 
could then be directly accessed via the link id; and neighbor nodes that connected to the 
selected node can also be derived.  
Most nodes in real traffic networks were connected to three or four links; it was 
extremely rare for there to be more than six connections. The increase in storage space 
compared to the forward star structure was very limited; but the speed improvement was 
significant. 
 
5 IMPLEMENTATION AND DISCUSSION 
The proposed hybrid algorithm is implemented in C++ programming language using 
MS C++ compiler with optimizing option “-o3” on Microsoft Windows XP systems, and 
the graph data structure is the direct access data structure. All computations were 
performed on 32 bit machines: Intel Pentium 4 processor 2.4GHz with 2 GB memory.  
The test network derived from the Institute of Transportation, shown in Fig. 4(a), was the 
highway network of the Taiwan area. The network consists of 374,520 nodes and 
502,485 links, the lengths of which were stored as double precision floating point, where 
their travel time was stored as double precision floating point.  
  
               
FIGURE 4.  (a)Taiwan Area Highway Network. (b) Freeway and expressway highlighted.  
(c) Freeway, expressway, and arterial highway highlighted. 
(a) (b) (c) 
  
FIGURE 5.  (a) The length shortest path result of 170KM range and (b) 400KM range 
 
The reason for the larger error of D-D-D is that the search direction of the Dijkstra 
algorithm radiates from the origin; making the search likely to find an entry node located 
in the opposite direction to the destination node. However, for A-D-A and A-A-A, the 
search direction runs from the origin and toward the destination, thus yielding better 
solutions. 
 
Implementation Results – Link Travel Time as Link Cost 
This section conducts testing via the same procedure as actual distance, but the link 
cost altered from actual distance to travel time. The link travel time is derived via 
dividing actual distance by the link speed limit. Taking the Dijkstra algorithm as the 
comparison base; the A* algorithm is approximately 1.75 times faster, the D-D-D 
algorithm is 21,900 times faster, the A-D-A algorithm is 25,500 times faster, and the A-
A-A algorithm is 33,400 times faster. For the 400KM range, the A* algorithm is 
approximately 1.86 times faster, the D-D-D algorithm is 23,000 times faster, the A-D-A 
algorithm is 37,000 times faster, and the A-A-A algorithm is 78,700 times faster. The 
computing time for each algorithm is shown in Fig. 6, using a logarithm scale. 
The error (the length increase versus the optimal solution) of the 170KM range is 2% 
for the A* algorithm, 1.7% for D-D-D, and 5.2% for both A-D-A and A-A-A. The error 
for the 400KM range is reduced to 1.2% for the A* algorithm, 0.72% for D-D-D, and 
2.73% for both A-D-A and A-A-A.  
 
(a) 
(b) 
 
The proposed hybrid algorithm limits the search space using several concepts and 
achieves a significant performance improvement of computation. The hierarchical 
concept divided the network into different layers; high mobility and high accessibility. 
The concept of the hybrid algorithm is familiar to the way most road users choose their 
route; being focused on identifying the quickest possible route to the freeway. 
Consequently, though the solution generated using the hybrid algorithm might not be the 
optimal solution compared to the Dijkstra algorithm, it was more suitable for vehicle 
navigation.  
By reducing the search space, this algorithm achieves significantly faster performance 
but also reduces its memory requirement. Vehicle navigation equipment usually have 
limited memory, the hybrid algorithm has a significant advantage when implementing on 
such on-board units. Memory consumption is closely related to number of nodes searched, 
because during the computation of the shortest path, searched nodes must be recorded to 
determine the next node to be explored. Figure 2 illustrates the total node explored by 
each algorithm, which may roughly indicate memory usage during computation.  
 
TABLE 2.  Number of Average Searched Nodes of Different Algorithms. 
Link Cost Actual Distance Travel Time 
 400KM Range 170KM Range 400KM Range 170KM Range 
Dijkstra  335,853 159,654 313,490 155,933 
A*  254,305 108,044 171,892 88,910 
D-D-D  7,622 6,289 6,993 3,606 
A-D-A  6,888 5,164 5,305 2,878 
A-A-A 5,780 4,142 3,387 1,665 
6 CONCLUSION 
This study discussed several shortest path algorithms before proposing a hybrid 
shortest path algorithm. The tradition Dijkstra, heuristic A*, hierarchical concept, and bi-
directional concept algorithms were integrated. The proposed hybrid algorithm was tested 
on a real network including more than 370,000 nodes and 500,000 links. A network 
separation scheme was implemented to separate the freeway and expressway (contains 
3,511 links) to the upper layer while leaving the remaining links in the lower layer. A 
numerical example showed that the proposed hybrid algorithm demonstrated a significant 
performance improvement (hundreds of thousand times faster) compared to the 
traditional Dijkstra algorithm and the heuristic A* algorithm. While implemented on a 
machine with equivalent computing power to a Pentium 4 processor, shortest path 
between the points distributed on the opposite side of the network can be obtained in less 
than a second. This algorithm not only increased computing speed but also reduced 
memory consumption. This feature represents a significant advantage in vehicle 
navigation applications. 
This hybrid algorithm will be tested on vehicle navigation equipment in the near 
future. This test makes it possible to analyze the performance in real situations. Different 
delamination methods should also be considered. While facing a giant network, e.g. the 
European or the pan-America road networks, the network can be further divided into 
行政院國家科學委員會補助國內研究生出席國際學術會議報告 
                                                                 95 年 11 月 5 日 
報告人姓名 李宜珊 
 
 
就讀校院 
（科系所） 
                     □博士班研究生 
 
運管所               ■碩士班研究生 
     時間 
會議 
     地點 
2006 年 10 月 27 日至 11 月 1
日 希臘 克里特島 
本會核定 
補助文號 
 
會議 
名稱 
 (中文) 2006 科學與工程計算方法國際會議 
 (英文) International Conference of Computational Methods in Sciences and Engineering 
2006 (ICCMSE 2006) 
發表 
論文 
題目 
 (中文) 運輸路網設計問題之矛盾現象預防與放鬆 
 (英文) The Prevalence of Paradox in Transportation Network Design Problem 
報告內容應包括下列各項： 
一、參加會議經過 
  此次會議地點位於希臘克里特島，舉辦天數共五天，而我們所參加的議程在會議的第二天舉
行。主題是「Computational Electronics: Physical Modeling, Mathematical Theory,and Numerical 
Algorithm」，主持人為李義明教授。參加會議的主要流程不外乎先向大會報到，並領取相關會議
資料(包括註冊證明、論文集…等)，而在報告時需注意服裝儀容，並先與議程主持人溝通相關報
告流程、測試相關設備與投影片是否能順利播放…等，這些細節在報告前都頇先確定無誤。本場
次的投影相關設備可能使用過度，在報告時還一度過熱無法使用，而耽擱了議程時間。 
  此次參加 ICCMSE 研討會，大多挑選和數值方法、數學模式相關的場次聆聽，例如：
Mathematical and computational methods、Computational , numerical methods and modeling 等。簡述
如下，M. Demiralp 發表了利用 HDMR（High Dimensional Model Representation）之 image 來處理
多變量分析；Jonathan I. Mantondo 則是利用 General Circulation Models 來衡量氣候變化對
Swaziland 水資源的影響；Chaofeng Shi 則是提出另一種新的 self-adaptive 方法求解 general mixed 
variational inequilities，此方法比 Abedellah Bnouhachem 原本提的求解方法更有效率；Yimming Li
和 Shao-Ming Yu 發展出以目標為基底之 UOF（unified optimization framework）求解一般最佳化問
題等。 
二、與會心得 
  初次參加研討會，我感受到濃厚的學術氣息，許多與會同儕與先進都是針對自己有興趣的主
題，聽完某一篇論文後，馬上前往另一場議程，憑著一股求知求新的熱情。發現其實參加這次大
會的東方人比例並不低，顯示亞洲在學術上已漸漸展露頭角，我們也看到很多韓國與大陸的學
者，顯示他們在學術上認真的態度。再者，出國最重要的還是語言能力，才能與參加先進或同輩 
 
 
