二、計畫的緣由與目的 
  在先進製程技術中，單晶片中的
高密度電晶體除了帶來面積及效能的
提昇，也使得製程變動的控制成為困
難的問題，其中晶片之間跟晶片內部
的製程變動(within-die variations)影響
到金屬線的寬度(Critical Dimension)，
電晶體的通道長度(Leff)，臨界電壓
(threshold voltage, Vt)等等，進而會造
成電路的時序沒辦法符合標準(跟模擬
數據有相當大的差別)。從硬體設計的
角度，如果利用保守的最差情況的時
序模型(worst case delay model)來設計
電路，其效能將沒有競爭力，即使統
計時序計算(Statistical STA)來預估，但
受限於時序模型的建立方式(使用 test 
key 或 ring oscillator 等)，我們仍無法
得 到 和 設 計 電 路 直 接 相 關
(circuit-dependent)的模型，每個電路的
晶片內部的製程變動通常只有後矽量
測(post-silicon)才能得到，換句話說，
晶片最佳的工作點應該在晶片測詴後
再設定才能達到效能和功率真正的平
衡模式，本計畫的主要目標即在於利
用晶片測詴及診斷的結果，進行軟硬
體的調整，以得到最佳的效能良率。 
最近多核心的設計平台的應用有
逐漸擴大的趨勢，因為每一計算所需
的功率消秏可使用較慢的核心配合平
行化程式加以降低。但多核心平台的
設計和使用並非單純的增加核心數即
可達成，除了平行程式的編譯器和記
憶體介面支援的挑戰外，同一晶片的
大量核心數也同時受到上述內部的製
程變動的影響，實際上每一核心的最
佳工作頻率並不相同，但基於多核心
的高效率及可程式化彈性，我們認為
這一類平台，適用使用本計畫的軟硬
體的調整的技術，經由測詴的結果，
同時進行硬體的設定及軟體的配置，
使系統得到最佳的工作效率。 
 以下會先後分別介紹(1)電子系統
層級之多核心平台，(2)延遲診斷之電
壓調整演算法，(3)適用於診斷 JPEG
解碼晶片之高階轉態錯誤模擬器 
 
 
Core 
Router 
Core 
Router 
Core 
Router 
Core 
Router 
Core 
Router 
Core 
Router 
Core 
Router 
Core 
Router 
Core 
Router 
External 
interface 
 
圖一: 多核心架構 
定應用的多核心系統晶片中，哪一個
核心的哪一個功能元件發生錯誤，週
期精確 (cycle-accurate)的模擬並不是
必要的。舉例來說，如果我們的應用
程式可以分成五種不同的函式，且將
這五種不同的函式分配到五個不同的
處理器上執行。假設只有一個處理器
被分配到浮點數運算指令，那麼我們
可以推測這個處理器中的浮點數運算
元件發生的錯誤必然會在模擬結果中
產生有別於其它錯誤的功能性特性
(functional features)。換言之，雖然我
們是在高抽象層級的模擬環境進行不
甚精確的模擬，只要這個模擬器能夠
區分出足夠的功能性特性，我們還是
用它的結果來進行功能性診斷。 
在此，我們的貢獻是實作了一個
高抽象層級的軟體轉態錯誤模擬器
(software transition fault simulator)，其
中並沒有加入處理器模型，能夠快速
產生模擬結果。並以其模擬結果為基
礎，提出一個功能性診斷技術，此技
術適用於特定應用程式的多核心系
統。
socket 和 Slave socket 互相連接而達
成。協定中詳細定義了接口間信號的
種類，以及各種信號變化的規範。如
圖三所示，OCP 只規範接口間信號變
化 ， 與 晶 片 內 溝 通 架 構 (on-chip 
communication architecture)無關，我們
可以調整不同的晶片內溝通架構以達
成系統需求。 
儘管 OCP 定義了許多複雜的通訊
模式，我們並不需要實作所有的通訊
模式。我們可以實作部分的通訊模式
以求簡化硬體，降低成本。在目前的
計畫中，我們只實作 single read/write 
(每次傳輸單筆資料)，和 precise burst 
mode(每次傳輸多比資料，但在傳輸開
始時就要決定這次傳輸資料的長度，
傳輸過程中不能更改)。 
上述的 OCP 介面裝置的輸入輸出
可分為兩部份，其中一部份是 OCP 標
準中定義的信號，對外連接到晶片內
網路。另一部份則是由微處理機核心
控制。我們利用一般常見的記憶體對
應式 I/O (memory-mapped I/O)的方式
來控制 OCP 介面裝置。如圖四所示。
使用記憶體對應式 I/O 的方便之處是
可以把 I/O 存取直接當成存取記憶體
來用，不需要更動指令集架構。 
為了讓軟體開發者方便撰寫能在
多核心系統平台上執行的平行程式，
必需將控制 OCP 介面裝置的指令(在
我們的例子中就是對 I/O 對應到的記
憶體位置做讀寫)包裝成應用程式介面
(Application programming interface, 
API)。我們詴作了一組低階的、極為
簡單的 API，提供測式通道是否忙碌、
送出資料和接收資料的機制。但要滿
足許多平行程式中的複雜機制，例如
一 對 多 或 多 對 多 的 讀 寫 、 屏 障
(barrier)、互斥量(mutex)……等等，可
能還需要相當大的調整。 
Master Slave
State
DataValid
Response
Command
TargetRank
DataIn
BurstLength
Slave
State
DataCaptured
DataOut
Master
OCP 
signals
OCP 
signals
Processor 
Core
Memory
Map
NoC
 
圖四: 以記憶體對應式 I/O 控制 OCP介面裝置 
存取會集中在一處，達到 1115MB/s 的
吞吐量。在網路連線寬度為 32bits 的
情況下，必須要讓頻率達到 400MHz
才能滿足其需求〈包含封包檔頭長
度〉。但是在平行化程式之下，距離
較遠的兩個微處理器存取同一記憶體
位置的情況並不合理，因此我們考慮
將 16x8 個處理器分成數個群組，每個
群組內共享一個外部記憶體。如此可
降低記憶體存取造成吞吐量集中在少
部份網路的情形。以下假設將 16x8 個
微處理器分為 4 個群組，則每個外部
記憶體的吞吐量為 278.72MB/s。在網
路連線寬度為 32bits 的情況下，大約
只需頻率 105MHz 即可達到需求〈包
含封包檔頭長度〉。除此之外，還可
以讓整個晶片內網路的負載平衡，解
決資料流量過於集中的問題。 
 
2. 延遲時間 
Arteris 使用的網路交換技術為蟲
洞交換(Wormhole switching)，封包被
切為可一次傳送的小單位，稱為 flit。
對每一個交換器而言，只要接到一個
封包的第一個 flit，即可解碼出該封包
的路由方向。因此，一個 flit 通過一個
交換器的時間為一個時鐘週期。而延
遲時間的定義為該封包的第一個 flit送
出到接收的時間，因此，在沒有壅塞
的情況下，從圖七的微處理器 A 傳送
資料到微處理器 B 的延遲時間為 3 個
時鐘週期。A 到 C 則為 4 個時鐘週期，
以此類推。 
 
若是在壅塞的情況下，如微處理
器 A、C 同時傳送資料給微處理器 B，
則會在交換器 S2 上發生仲裁；若 S2
選擇讓 A 先行，則 C 至少必須等待 A
傳完一個封包之後才能傳送。一個封
包大小 24bytes，若連線寬度為 32bits，
則 C 須多等待 6 個時鐘週期才能將第
一個 flit 送到 B。如果這種情形一再發
生，對晶片內網路效能影響甚鉅。 
 
3. 面積 
 Gate 
count 
Comb. DFF. 
(x7) 
Init. 3315 1404 273 
Target 5563 2441 446 
Req. SW 2676 786 270 
Rsp. SW 2247 588 237 
Total 55207 20879 4907 
 
 
以一個 2x2 的二維網狀網路來
看，交換器所佔面積不大，主要是連
接微處理器的通訊協定轉換器(OCP to 
NTTP adapter)佔去大部份的面積。通
訊協定轉換器的面積主要與其功能的
複雜度有關。若 OCP 通訊協定只實作
其中一部份，可以減少其面積。另外
可以看到，暫存器(DFF)佔了約 60%的
面積，一般而言暫存器在網路中作為
緩衝器(buffer)使用，因此可調整各組
間內部的緩衝器大小以改變面積。 
 
表一、晶片內網路面積估算 
 
圖七: 微處理器核心間連線示意圖 
遲時間跟要求的時脈差，最後一列為
我們提出演算法和 full-chip tuning 的
動態功率消耗。 
 以下利用 s38584 來做實驗，  
表三為 s38584 電路調整結果之依序增
大製程變異影響的面積並且依序加重
製程變異影響，第一行為加重製程變
異參數的比例，列為製程變異影響的
面積從 10%到 100%，full-chip tuning
跟我們提出的電壓調整演算法動態功
率消耗比率來做比較。(註:圖中的 X 表
示製程變異加重過載已超過調整範
圍，無法進行調整) 
 由數據可發現製程變異影響到的
面積遞增以及製程變異參數加重，動
態功率都會隨之上升。由上數據
full-chip tuning 的動態消耗功率為
4.52%到 49.43%，而我們提出的方法動
態功率消耗為-0.11%到 21.41%，可以
節省 5.63%到 28.02%的動態功率。 
圖四十五是 s38584 固定面積 20%受到
製程變異的實驗結果，每個表的第一
行及第二列是影響製程變異面積各為
10%，變異係數依序加重及減少，第一
個表為模擬經過製程變異後的延遲時
間，第二個表為 full-chip tuning 後時脈
Area 10% 20% 30% 40% 50% 
Variation Full-chip Tuned Full-chip Tuned Full-chip Tuned Full-chip Tuned Full-chip Tuned 
0.1 4.52% -0.11% 6.81% 0.58% 6.81% 0.72% 9.12% 1.05% 9.12% 1.81% 
0.2 6.81% 1.10% 9.12% 1.46% 11.45% 2.85% 16.94% 3.45% 18.60% 5.00% 
0.3 6.81% 1.38% 13.81% 3.60% 18.60% 4.58% 25.97% 7.85% 28.48% 9.53% 
0.4 9.12% 3.12% 16.94% 4.76% 25.97% 7.99% 31.01% 9.95% 38.76% 14.31% 
0.5 11.45% 4.68% 21.04% 6.95% 31.01% 12.85% 41.39% 14.93% X X 
0.6 13.81% 5.86% 23.49% 10.09% 38.76% 13.59% X X X X 
0.7 16.94% 7.90% 28.48% 12.17% 46.72% 21.41% X X X X 
0.8 18.60% 8.28% 38.76% 14.30% X X X X X X 
0.9 25.97% 10.13% 49.43% 19.59% X X X X X X 
1 31.01% 11.79% X X X X X X X X 
1.1 38.76% 12.23% X X X X X X X X 
1.2 X X X X X X X X X X 
Area 60% 70% 80% 90% 100% 
Variation Full-chip Tuned Full-chip Tuned Full-chip Tuned Full-chip Tuned Full-chip Tuned 
0.1 9.12% 1.95% 11.45% 2.08% 11.45% 2.49% 11.45% 2.63% 11.45% 4.88% 
0.2 18.60% 5.32% 21.04% 5.40% 23.49% 6.13% 23.49% 7.15% 25.97% 6.80% 
0.3 31.01% 10.06% 36.15% 10.55% 38.76% 12.07% 38.76% 15.57% 41.39% 16.55% 
0.4 44.04% 16.18% X X X X X X X X 
0.5 X X X X X X X X X X 
0.6 X X X X X X X X X X 
0.7 X X X X X X X X X X 
0.8 X X X X X X X X X X 
0.9 X X X X X X X X X X 
1 X X X X X X X X X X 
1.1 X X X X X X X X X X 
1.2 X X X X X X X X X X 
 
表三 
A. 軟體轉態錯誤模擬器 
在硬體中的轉態錯誤模型描述了
電路中某個信號因為延遲過大而無法
將轉態(邏輯值由 0 變 1 或 1 變 0)傳遞
至輸出的情況。我們詴著延伸硬體中
的轉態錯誤模型的概念來創造出軟體
轉態錯誤模型。我們利用軟體中運算
子的運算結果來描述軟體轉態錯誤的
行為。假設我們手中有一個運行於多
核心系統的應用程式，它被分成數段
程式碼，每一段程式碼分被分配給一
個處理器執行。軟體轉態錯誤定義了
某一段特定程式碼中，某些特定運算
子的運算結果中某一特定的位元會產
生錯誤的結果。這種錯誤行為可以想
像成硬體中的轉態錯誤發生在此特定
程式碼所在的處理器中某個特定功能
元件的輸出端信號的特定位元。例
如，當我們引入了「加法運算子的第
二個位元發生 slow-to-fall」的軟體轉態
錯誤，則每當軟體執行加法運算子
時，它拿這次加法運算的結果和前一
次做比較，當前一次結果的第二個位
元值為 1，而這次為 0 時，產生錯誤模
擬值為 1。為了達成上述的錯誤模擬，
我們利用 C++語言提供自定資料型態
和運算子多載技巧來達成錯誤的運算
子模擬。圖十是產生軟體轉態錯誤模
擬器的流程。我們的輸入是一個運行
於多核心系統的應用程式源始碼，我
們會改寫它的資料型態以支援運算子
多載。改寫後的程式碼和我們寫好的
軟體模擬器函式庫一貣編譯為軟體轉
態錯誤模擬器，此模擬器執行時要輸
入錯誤描述檔案定義欲引入的軟體轉
態錯誤。 
 
 
B. ISS-based 轉態錯誤模擬器 
ISS-based 轉態錯誤模擬器是為了
檢驗上一小節所描述的軟體轉態錯誤
模擬器是否能夠反應出足夠精確的錯
誤行為。我們利用 ArchC 提供的 MIPS
指令集架構模擬器來實作它。圖十一
是此模擬器產生的流程，其概念與軟
體轉態錯誤模擬器類似，差別在於我
們不再用運算子，而是用指令來承載
錯誤行為，因此我們修改了 ArchC 中
用來描述指令集架構的 AC_ISA 檔
案。此模擬器比軟體轉態錯誤模擬器
更低階，反應的細節也更多。例如低
階組語中的位移指令不一定只會從高
階語言中的位移運算子編譯過來，也
可能用來計算高階語言中陣列的位
址。 
Source code of 
JPEG decoder 
Changed
source code
Software 
Simulator
Library
Error 
Description
File
Simulation executed 
file of CMPs with 
JPEG decoderJPEG 
Picture
BMP 
Picture
Revise parallel programs as single-
thread and replace variable type
Compile
 
圖十: 產生軟體轉態錯誤模擬器之流程圖 
和 ISS-based轉態錯誤模擬器的模擬速
度，顯示軟體層錯誤模擬器可以比指
令集轉態模擬器效能平均加快了 310
倍。  
 
接下來我們比較軟體轉態錯誤模
擬器和 ISS-based轉態錯誤模擬器的最
後輸出的圖片是否相似。我們分別計
算兩張圖片RGB三種像素值的皮爾遜
積差相關係數，如果相關性越接近 1，
代表兩張圖片非常相似，如果相關性
趨近於 0 代表兩張圖片差異性很大。
圖十四和圖十五顯示在乘法運算結果
引入錯誤後，兩種錯誤模擬結果的相
關性。橫軸上的 1 到 16 代表引入的錯
誤位於乘法運算結果的哪一個位元。
結果顯示當軟體轉態錯誤發生在乘法
運算時，軟體轉態錯誤模擬器和
ISS-based 轉態錯誤模擬器的結果相當
一致。 
 圖十六則是在位移運算結果引入
錯誤後兩個模擬器結果的比較。顯示
兩者有相當的落差，這是因為低階組
語中的位移指令不一定只會從高階語
言中的位移運算子編譯過來，也可能
用來計算高階語言中陣列的位址。這
個結果顯示高階的軟體轉態錯誤模擬
器為了提升模擬速度而捨棄部分精確
度。 
 
 
 
 
 
 
 
 
圖十六: 軟體轉態錯誤模擬器和 ISS-based
轉態錯誤模擬器的結果之相關性 
 
圖十四: 軟體轉態錯誤模擬器和 ISS-based
轉態錯誤模擬器的結果之相關性 
 
圖十五: 軟體轉態錯誤模擬器和 ISS-based
轉態錯誤模擬器的結果之相關性 
 
圖十三: 軟體層錯誤模擬器相較 ISS-based
轉態錯誤模擬器之加速比 
四、參考文獻 
1. IMAPCAR2 Features, 
“http://www.necel.com/automotive/en/
imapcar/imapcar2/index.html”. 
2. S. Yoo and A. Jerraya, 
“Hardware/software cosimulation from 
interface perspective,” Computers and 
Digital Techniques, IEE Proceedings -, 
vol. 152, 2005, pp. 369-379. 
3. K. Popovici, X. Guerin, F. Rousseau, P. 
Paolucci, and A. Jerraya, “Efficient 
Software Development Platforms for 
Multimedia Applications at Different 
Abstraction Levels,” Rapid System 
Prototyping, 2007. RSP 2007. 18th 
IEEE/IFIP International Workshop on, 
2007, pp. 113-122. 
4. Zhiyi Yu, M. Meeuwsen, R. Apperson, 
O. Sattari, M. Lai, J. Webb, E. Work, 
D. Truong, T. Mohsenin, and B. Baas, 
“AsAP: An Asynchronous Array of 
Simple Processors,” Solid-State 
Circuits, IEEE Journal of, vol. 43, 
2008, pp. 695-705. 
5. Zhibin Xiao and Bevan Baas, “A 
High-Performance Parallel CAVLC 
Encoder on a Fine-Grained Many-core 
System,” In Proceedings of the IEEE 
International Conference on Computer 
Design (ICCD '08), October 2008, pp. 
248-254. 
6. S. Makar, T. Altinis, N. Patkar, and J. 
Wu, “Testing of Vega2, a chip 
multi-processor with spare 
processors.,” Test Conference, 2007. 
ITC 2007. IEEE International, 2007, 
pp. 1-10. 
7. A. Coskun, T. Rosing, and K. 
Whisnant, “Temperature Aware Task 
Scheduling in MPSoCs,” Design, 
Automation & Test in Europe 
Conference & Exhibition, 2007. DATE 
'07, 2007, pp. 1-6. 
8. A. Chandra and andP. Shenoy, 
“Hierarchical Scheduling for 
Symmetric Multiprocessors,” Parallel 
and Distributed Systems, IEEE 
Transactions on, vol. 19, 2008, pp. 
418-431.   
9. C. Johnston, P. Lyons, and D. Bailey, 
“A Visual Notation for Processor and 
Resource Scheduling,” Electronic 
Design, Test and Applications, 2008. 
DELTA 2008. 4th IEEE International 
Symposium on, 2008, pp. 296-301. 
10. F. Latorre and J. Gonzalez, “Efficient 
resources assignment schemes for 
clustered multithreaded processors,” 
Parallel and Distributed Processing, 
2008. IPDPS 2008. IEEE International 
Symposium on, 2008, pp. 1-12. 
11. F. Mulas, M. Pittau, M. Buttu, S. Carta, 
A. Acquaviva, L. Benini, D. Atienza, 
and G. De Micheli, “Thermal 
Balancing Policy for Streaming 
Computing on Multiprocessor 
Architectures,” Design, Automation 
and Test in Europe, 2008. DATE '08, 
2008, pp. 734-739. 
12. T. Sato and S. Watanabe, “Instruction 
Scheduling for Variation-Originated 
Variable Latencies,” Quality 
Electronic Design, 2008. ISQED 2008. 
9th International Symposium on, 2008, 
pp. 361-364. 
13. A. Itradat, M. Ahmad, and A. 
25. S. Huang, Y. Luo, and W. Feng, 
“Modeling and analysis of power in 
multicore network processors,” 
Parallel and Distributed Processing, 
2008. IPDPS 2008. IEEE International 
Symposium on, 2008, pp. 1-8. 
26. R. Ben Atitallah, S. Niar, and J. 
Dekeyser, “MPSoC power estimation 
framework at transaction level 
modeling,” Microelectronics, 2007. 
ICM 2007. Internatonal Conference on, 
2007, pp. 245-248. 
27. G. Beltrame, D. Sciuto, and C. Silvano, 
“Multi-Accuracy Power and 
Performance Transaction-Level 
Modeling,” Computer-Aided Design of 
Integrated Circuits and Systems, IEEE 
Transactions on, vol. 26, 2007, pp. 
1830-1842. 
28. Wonyoung Kim et al., “System level 
analysis of fast, per-core DVFS using 
on-chip switching regulators,” High 
Performance Computer Architecture, 
2008. HPCA 2008. IEEE 14th 
International Symposium on, 2008, pp. 
123-134. 
29. D. Brooks, V. Tiwari, and M. 
Martonosi, “Wattch: a framework for 
architectural-level power analysis and 
optimizations,” Computer Architecture, 
2000. Proceedings of the 27th 
International Symposium on, 2000, pp. 
83-94. 
30. K. Popovici et al., “Efficient Software 
Development Platforms for 
Multimedia Applications at Different 
Abstraction Levels,” Rapid System 
Prototyping, 2007. RSP 2007. 18th 
IEEE/IFIP International Workshop on, 
2007, pp. 113-122. 
31. Tsun-Hsien Wang et al., “Design and 
Implementation of a Real-Time Global 
Tone Mapping Processor for High 
Dynamic Range Video,” Image 
Processing, 2007. ICIP 2007. IEEE 
International Conference on, 2007, pp. 
VI - 209-VI - 212. 
32. Ching-Te Chiu et al, “Design 
optimization of a global/local tone 
mapping processor on arm SOC 
platform for real-time high dynamic 
range video,” Image Processing, 2008. 
ICIP 2008. 15th IEEE International 
Conference on, 2008, pp. 1400-1403. 
33. Chen Kang Lo, Ren Song Tsay, 
“ Automatic Generation of Cycle 
Accurate and Cycle Count Accurate 
Transaction Level Bus Models from a 
Formal Model,” ASPDAC 2009. 
34. W. Cheng and B. Baas, “Dynamic 
voltage and frequency scaling circuits 
with two supply voltages,” Circuits 
and Systems, 2008. ISCAS 2008. IEEE 
International Symposium on, 2008, pp. 
1236-1239. 
35. Ming-Chang Hsieh and Chih-Tsun 
Huang, “An embedded infrastructure 
of debug and trace interface for the 
DSP platform,” Design Automation 
Conference, 2008. DAC 2008. 45th 
ACM/IEEE, 2008, pp. 866-871. 
36. Tai-Ying Jiang, Chien-Nan Jimmy Liu, 
and Jing-Yang Jou, “An observability 
measure to enhance statement 
coverage metric for proper evaluation 
of verification completeness,” Design 
