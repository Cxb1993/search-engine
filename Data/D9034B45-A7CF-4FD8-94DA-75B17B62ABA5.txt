 
 
 2 
outbreak phenomena of worm attacks, i.e., by observing 
abnormal traffic patterns/amount changes and dispersion of 
destination addresses[8][9]. It first establishes the normal profile 
of the monitored network, then collects sufficient amount of 
abnormal traffic that violates the normal profile. They assume 
that if a network’s traffic pattern or volume changes, it is likely 
that there is a worm attack and the attack is in the outbreak phase. 
With different design rationale, each solution focuses on 
different scenario. Although this approach is possible to detect 
unknown attacks with similar infection-spreading pattern, the 
observed phenomena only occur after a sufficient number of 
hosts are infected. Unfortunately, severe damages are already 
made. Hence, this approach is not suitable for early attack 
detection. Further, it may have high false positive rate because 
being different from normal traffic behavior does not necessarily 
imply an attack[10][11]. 
There are some other research works that adopt the 
Susceptible-Infectious (SI) Epidemic model to formulate the 
global spreading of a random scanning Internet worm [1][12][13]. 
It assumes that an individual host is either susceptible or 
infectious; and the spreading over the entire Internet will go 
through three phases: slow start, fast spread and slow finish. 
These works target to infer global infection behavior of worm 
and t he assessment is  on the number of infected host along the 
time line. Among them, in [12], the authors proposed a 
discrete-time model for early detection of global worm 
propagation by identifying an exponential growth trend at its 
early propagation stage. They assume that worm infection rate 
can make the shape of the propagation curve different. A 
recursive estimation method (Kalman filter) is used by keeping 
track of the ingress and egress scan traffic. Once the rate 
stabilizes, a worm is detected. Although their results show that 
the method can detect the present of Code Red when it has 
infected 0.3% of vulnerable population in the Internet, the SI 
model is not suitable for worm detection for most of the 
enterprise networks or small networks which have only a few 
hundreds or thousands of hosts. Before a global trend presents, 
an enormous amount of hosts  may have been comprised. 
While these approaches may have been effective in the 
early days of the Internet, we anticipate that future worms would 
evolve to become more sophisticated and unpredictable to 
outwit existing intrusion detection methods and anomaly 
analysis techniques. For example, future worms may adopt some 
stealthy probing/spreading strategies/techniques without 
detection. For instance, volume-based or entropy-based 
anomaly detection might not work for worms taking slower 
propagation rate [14]. With the passive probing strategy (vs. 
active in the past), a stealthy attacker may wait for potential 
victims to contact him instead of being the initiator of all the 
communications between them. A stealthy worm may as well 
perform selective or intelligent quest for victim hosts, different 
from traditional exhaustive try-and-error probing [15]. Recently, 
a number of research works have started to study the problem of 
detecting polymorphic worms which mutate themselves to 
change the appearance in every replicated instance[11][16]. For 
early detection of these new types of worm attacks, we believe 
behavior-based stateful inspection approach is important. 
Software/service vulnerabilities are fundamentally due to 
design errors and ignorance and programming bugs. Although 
various bug-finding, design verification tools have been 
developed, they are basically static analysis  and cannot be 
useful in tackling increasing worm threads in run-time intrusion 
detection [17][18]. Current practice in new vulnerability analysis 
and protection generation is mostly manual. There has been 
reported of a rise in zero-day attacks [16]. The number of newly 
discovered vulnerabilities reported to CERT/CC continues to 
grow more than double each year [7][19]. Moreover, the 
presence of ever growing new and stealthy attacks and the 
emerging of polymorphic worms  impose unprecedented threats 
and challenges to network security [1][20]. Since software 
vulnerabilities are unavoidable and have been a key target of 
worms, we anticipate new (unknown) worms will keep being 
invented. Therefore, providing network administrators a tool 
that enables early detection of any network anomalies including 
unknown, stealthy and polymorphic worms is important to 
minimize possibly severe damages.  
Besides the characteristics such as invariant bytes and 
scanning rates strategies of worms which are commonly used in 
intrusion detection systems, we observe that a number of 
Internet worms such as Blaster[3], Sasser[4], Welchia[21] and 
Zotob[22], possess sophisticated procedure-based behavior. In 
these attacks, an attacking host undergoes a sequence of 
communication interactions to compromise victim. They include 
execution of protocols for communications, access for service 
exploit (probing, exploiting and compromsing), and possibly 
instabllation of additional other malicious program code. 
Additionally, we notice that there are some important traffic 
patterns that will underline the characteristics of a worm attack. 
They are referred to as the attack symptoms in this paper. For 
example, Fig. 1 depicts the attack procedure of Blaster.  
In this example, we observe that the interaction between 
attacker and victim involves activities at three different levels . 
At the transport protocol level, there are two TCP connections 
(for exploit code and worm code delivery) and one UDP 
Attacker
(Infected host)
Victim
(Target host)
msblast.exe
msblast.exe
Blaster
Worm Code
Thread 2
SYN_flooding
Thread 1
TFTP Server
UDP port 69
bo
ot
in
g
create registry
create/check 
mutex
1
RPC (vulnerable)
TCP port 135
Shell Code
TCP port 4444
TFTP client
exec
msblast.exe
windowsupdate.com
2
probe/connect
(3- way handshake)
4
Bind the interface
and send exploit
 code
handle RPC request
(buffer overflow)
4.1
launch 
shell code
4.2
3
check date
and attack
SYN flooding
with spoofed src
3.1
5
connect
(3-way handshake)6
7
7.1
8
9
create
socket
TFTP Get commandexec msblast.execommand
TFTP download
exec
msblast.exe
 
Fig. 1.  The attack procedure of the Blaster worm 
 
 
 4 
SecMon is responsible for monitoring one or more links. It 
inspects every network packet by extracting relevant data from 
the header and payload of packets and keeping track of the 
states of the protocols and application services the packets are 
associated with. Based on the results, it summarizes and updates 
its assessments of whether there is  any early signs of anomaly or 
suspicious activities on the monitored link(s) according to the 
proposed cross-level, procedure-based behavior inference 
model. The assessment of a possible anomaly is a probability. If 
it exceeds certain warning level, SecMon will send an alert 
message along with the code of suspicious anomaly and the 
assessed probability to a centralized control point for further 
action. The detail assessment procedure is present in Section 4. 
B. Design Goals of SecMon 
The threat of a worm attack highly depends on the spreading 
speed of its propagation. Hence, there are two basic design 
requirements of SecMon. First, the alerts raised by SecMon 
should be as early as possible to minimize damages. Second, the 
detection mechanisms of SecMon must provide high accuracy 
(i.e., low false negative) with low false positive detecting rate to 
avoid misses as well as unnecessary alerts. An early detection 
system aims to notify the central control point (and the 
network/system administrators) in time before the domain of 
interest is compromised. 
III. MODELS FOR COMPLEX WORM ATTACK MONITORING 
In this section, we describe the modeling of complex worm attack 
behaviors. We focus on monitoring the interaction between 
potential attacker and victim hosts at three different levels of 
activities: communication protocols, services and possible 
abnormalilty or attack symptoms; and simultaneously perform 
“cross-level” state correlation and inference. 
Packet stream
Service
Attack
Symptom
Attack
Protocol
à Belief updateBlaster
TCP-
portsweep
Out-of-
order-RPC-
messages
Forced-
session-
termination
Multiple-
TCP-
RSTs
Server-
change-
to-client
SYN-
flooding
RPC TFTP
UDPTCP
 
Fig. 2. A cross-level behavior analysis model using finite state 
machines (e.g., for Blaster). 
 
A. Multi-Level Stateful Network Monitoring 
We take the approach of analyzing packet streams by monitoring 
the states of communication protocols  and application services, 
and identifying suspicious possible attack symptoms. The 
description of attack symptoms can be learned from the past 
worm attacks as well as be derived from the knowledge of 
application services and protocols. Fig. 2 shows the architecture 
of this cross-level behavior tracking and inference model.. The 
components at each level are finite state machines (FSM). The 
protocol FSMs are responsible for keeping tracking of the 
communication contexts of the network activities. The service 
FSMs monitor the interactions from clients to potentially 
vulnerable application services in the network. Each packet is 
inspected and relevant information is extracted which may make 
state changes of corresponding transport protocol-level FSM 
(e.g., TCP) and/or service level FSMs (e.g., RPC). 
As shown in the example of Blaster in Fig. 1, the detailed 
behavior between attacker host and target victim host is 
described as follows. At the attacker host, upon infected, the 
Blaster worm code first creates registry at the local host. It then 
sends out probing messages via TCP to port 135 to check the 
existence of the vulnerable RPC service on the random target 
victim host. If succeeded, the worm code sends a number of 
packets carrying the exploit code to compromise the target 
vulnerable service. Once compromised, the exploit code gets the 
execution right and executes the worm code at the victim host. 
The worm code will spawn a new shell process at the victim host 
waiting for further connection from the attack host to the opened 
TCP port 4444. After waiting for a very short period of time, the 
attack worm code contacts the shell code on the victim host via 
another TCP connection. Meanwhile, it creates a local thread to 
activate a TFTP server and uses TFTP Get command to instruct 
the shell code to launch a TFTP client at the victim host. The 
TFTP client then contacts the attack host to download a 
malicious code (msblast.exe). Finally, the attack host sends a 
command to execute the installed malicious code to replicate 
itself and starts a new round of spreading. 
When looking into the entire procedure of the attack 
activities between the attacker and victim, we notice six abnormal 
behaviors can be identified: Server-change-to-client, 
Out-of-order-RPC-messages, Forced-session-termination, 
Multiple-TCP-RSTs, Horizontal-scan and SYN-flooding. We 
have explained the Server-change-to-client and 
Out-of-order-RPC-message symptoms in Section 1. For the 
Forced-session-termination symptom, we know that an 
application normally completes application layer’s message 
exchanges before terminating the TCP connection. In the case of 
Blaster worm, the program/service in victim (server) cannot 
respond to RPC request due to the buffer overrun by the exploit 
RPC request packet. In order to proceed the scanning and infect 
other hosts, the victim host has to terminate the TCP connection 
and release the resources. For Multiple-TCP-Reset, since the 
attacker sends the RPC REQUEST immediately after the RPC 
BIND and then sends the TCP FIN packet to terminate the 
connection, the RPC BIND_ACK packet from the victim will 
arrive at the attacker after the connection is terminated. The late 
RPC BIND_ACK packet is treated as a strange packet by the 
attack host. It sends one or more TCP RST packets to reset the 
TCP connection. Therefore, we consider that the appearance of 
TCP RST packet is a suspicious abnormal behavior for a 
client-server-based application. In addition, for the 
 
 
 6 
relationship of network packets can be kept and reconstructed 
as a manageable and analyzable form. 
Content matching is considered to be a time-consuming job 
and can degrade the performance of network systems . Hence, we 
implement the Aho-Corasick algorithm [29] in the content 
extraction module to apply string matching algorithm while 
performing content extracting and matching. 
The Stateful Content Inspection Module firstly assigns an 
identical Flow ID according to the five tuples that are extracted 
from the packet headers. A modification of Jenkins hash 
function [30] is applied to generate the Flow ID depend on the 
size of network we monitor. The Flow ID helps SecMons to 
aggregate discrete packets into an abstraction of flow. The 
packet payload then is fed into the content extraction module to 
extract the information that the Protocol-specific Rule Set 
defines. The Protocol-specific Rule Set contains the rules that 
are relative to the communication of protocol, and the rule itself 
contains the knowledge of protocol, including the exchanging 
messages and exchanging sequence defined in the protocol 
standards. 
The output of the content extraction module helps the Stateful 
Content Inspection Module determine which application or 
service the packet belongs to and what the message is carrying 
in the payload. With the knowledge of application layer protocol, 
the “association” of current packet can be determined. The flows 
that belong to same “association” share a same Association ID. 
All of information parsed by Stateful Content Inspection 
Module including header and payload are retrieved and stored in 
layered structures for future use. It’s more efficient to parse the 
packet and store the relative information at a time to prevent 
duplicate retrievals of the raw packet. Afterwards, the 
information about the association, connection, and flow are 
written into a Flow State Table. Flow State Table is a layered 
pointer-based structure that stores information for different 
layers and protocols and could be flexible to different types of 
packets. SecMon supports IPv4, IPv6, TCP, UDP, ICMP, and 
many other application layer protocols. 
B. Content Extraction Module 
The Aho-Corasick String Matching algorithm [29] is proposed 
by Alfred V. Aho and Margaret J. Corasick in 1975. The main idea 
of the algorithm is to construct a finite state machine of all the 
keywords. When a text string is input, the result of all matched 
keywords could be output after traversing the finite state 
machine. The processing time of Aho-Corasick algorithm has 
been proved irrelevant to number of keywords. Only the length 
of input string contributes to the processing time of 
Aho-Corasick algorithm. Therefore, by adopting this algorithm, 
the processing time of string matching is bounded by the length 
of input packet payload no matter how many rules are inserted in 
the rule-base. 
Aho-Corasick string matching algorithm is one of the 
essential components of Content Extraction Module. It reports 
where and what rules the packet is matched to the predefined 
rule-set efficiently. By matching the keywords or specific bytes 
in the packet payload, SecMon can identify the protocol 
(without relying on port number), parse the byte strings to 
semantic meaningful message in payload, and classify the 
association the packet belongs to. 
Due to the performance consideration, we design and 
implement an intellectual peripheral (IP) in hardware description 
language (HDL) on a Field-Programmable Gate Array (FPGA) to 
provide high speed hardware-based Aho-Corasick string 
matching device for SecMon. The algorithm first constructs a 
finite automaton for matching procedure and a reference output 
table to look up what keywords that have matched during the 
procedure. The finite automaton and output table are 
constructed in advance and stored in the Block RAMs (BRAMs) 
with a form of array. The string matching procedure is 
implemented in VHDL to a customized IP core. The 
implementation of hardware module includes the data retrieval of 
BRAMs, the transition of the finite automaton, the handling of 
output results and input data (via BRAMs or registers in FPGA), 
and the control of miscellaneous registers. Two different types 
of device driver is implemented in order to serve the standalone 
application written in HDL without operating system and the 
Linux-based application written in C. 
Moreover, Multi-Dimensional Range Matching algorithm 
(a.k.a. BitVector) [32] is also used to match non-string fields and 
record the result of matching. While matching the rules for an 
incoming packet, each rule has a corresponded bit in the Bit 
Vector to indicate if the rule is matched or not. The 
Multi-Dimensional Range Matching algorithm is appropriate for 
prefix matching, ranging matching, and exact matching on a fixed 
size field, which is appropriate the for fields like IP address and 
TCP port number. The rules of network layer and transport layer 
are usually specified in intervals, for example “source port 
number 1 to 1024” or “subnet 10.10.10.0/24.” 
A good property of this algorithm is the bounded 
computation time. A field (or dimension) with k bits can be 
divided into at most 2k ranges in the worst case. Assume that a 
rule has a value X in this dimension. If an optimal binary search 
algorithm is performed to distinguish which interval of 2k does 
the X belong to, it takes only O(log2 2
k) + 1 = k+1 comparisons to 
locate the X into the corresponding range. For example, 
matching a field of TCP port (16 bit) only takes 17 comparisons to 
get the matching result, no matter how many rules in the system. 
The result of each dimension is recorded in Bit Vctor, and then 
by merging (Boolean operation AND) the bit vectors of each 
dimension, the result of all dimensions are found. Then the result 
of Aho-Corasick String Matching algorithm and 
Multi-Dimensional Range Matching algorithm is merged the 
complete the result of all rules. 
Thus, it can be guaranteed that the processing time of the 
network/transport layer is bounded, and it is depend on the 
dimension selected and the length of the selected dimension. 
The processing time of the application is also bounded. The 
matching process time of network/transport/application layer is 
 
 
 8 
successfully detects every behaviors of the polymorphic attack, 
i.e., all the symptoms are observed. 
C. Detecting Stealth-Scanning Variants 
We consider a stealthy selective scanning strategy. Scan 
volume based detection count the number of distinct connection 
attempts (e.g., TCP SYN) from one host. The attacker is assumed 
to have prior knowledge of the vulnerable hosts/services. Thus, 
it can directly attack targets without the portscan or portsweep. 
All the scanning detection rules in Snort, Bro and SecMon (the 
TCP-portsweep attack symptom) fail to trigger alerts in this case. 
Despite this, SecMon still captures the rest of all abnormalities 
and the final belief score is high enough to raise an alert with 
high confidence. 
D. Unknown Worm Attacks 
We use Sasser [7] to emulate how the systems react to 
unknown attacks. We explicitly remove all the knowledge about 
Sasser from Snort, Bro and SecMon, and only retain the prior 
knowledge based on the Blaster attack. It is evident that 
signature-based detection mechanism is nearly impossible to 
detect an unknown attack. The result shows that SecMon 
successfully detects the unknown worm by using common 
invariant behaviors. (From the post-mortem analysis, Sasser has 
4 attack symptoms that are exactly the same as Blaster.) Since our 
approach is based on the knowledge and experiences of the 
normal behaviors and the attack symptoms exhibited in 
previously known attacks, it has the potential to detect unknown 
attacks. 
E. Detection Accuracy 
In SecMon, an alert is not based on a single symptom, but 
rather on progressive inference and correlation of a sequence of 
attack symptoms. Table I shows the number of occurrences of 
the six attack symptoms of Blaster obtained from seven-hour 
traffic trace with more than 45 million flows and 680 million raw 
packets (within 378GB trace file) of the campus network which 
contains no Blaster attacks. We observe that many of the 
symptoms are in fact quite common in the network and the others 
are rarely seen in this ordinary traffic trace. Table II shows the 
number of occurrences of consecutive observations of two 
attack symptoms. It gives us good confidence that progressive 
inferences and symptom correlation should have very low false 
positive rates. In this specific trace, the assessment never 
exceeds 0.000227 and no alert is issued, showing that the 
SecMon system will have low false positive rates. However, this 
example does not prove that SecMon is false positive-free. 
 
Table I.  The occurrences of attack symptoms of Blaster 
 
Symptom # of occurrences 
TCP-portsweep (T-P) 289,476 
Out-of-order-RPC-messages 
(O-R) 
1,536 
Forced-session-termination (F-T) 81 
Multiple-TCP-RSTs (M-R) 270 
Server-change-to-client (S-C) 0 
SYN-flooding (S-F) 717,170 
 
Table II.  Consecutive attack symptoms attack symptoms of Blaster 
 
Symptom # of occurrences 
(T-P) + (O-R) 31 
(O-R) + (F-T) 3 
(F-T) + (M-R) 3 
(M-R) + (S-C) 0 
(S-C) + (S-F) 0 
 
False positives may arise from imprecise estimates of the 
probabilities used in belief assessment and incomplete attack 
symptom specifications due to insufficient statistical analysis of 
traffic traces and subjective judgments of experts. These can be 
improved through extensive collection of both attack and normal 
traffic traces and through more detailed statistical analysis 
guided by domain knowledge. 
VI. CONCLUSION 
In this paper, we proposed a coordinated architecture of traffic 
monitoring that performs local inspection and anomaly 
assessment. A probabilistic-based inference system is used for 
worm detection with complex behavior. We model the complex 
procedural based behavior of worm by three levels of activities: 
a sequence of attack symptoms, services, and the underlying 
communication protocols. The cross-layer state correlation 
matrices are used to correlate the protocol- and service-level 
observations to attack symptoms. 
In the meantime, each SecMon maintains a list of belief about 
possible worm attacks - probabilities that represent the current 
assessment of the likelihood that such attacks are taking place. 
The inference model considers the sequence of symptoms 
observed and continuously updates the belief accordingly. A 
prototype system is implemented to demonstrate the feasibility 
and effectiveness of the proposed schemes, and illustrate that 
the behavioral approach is robust to to several common 
attack-evasion strategies including polymorphic, slow-scan, 
and selective-scan variants, and previously unknown attack. 
APPENDIX A: A EXAMPLE OF STATEFUL ATTACK SYMPTOM OF BLASTER: 
FORCED TERMINATION IN BNF 
The Blaster worm can be modeled with six semantic meaningful 
stateful symptoms: TCP Scan, Out-of-Order RPC MSG, Forced 
Termination, Multiple RSTs, Server Change to Client, and SYN 
Flooding. We define a user-friendly, flexible script language in BNF. 
The BNF includes the finite state machines of attack symptoms, 
services/applications/protocols. The following is the example of 
stateful symptom (Forced Termination) of Blaster. 
 
FSM FORCED_TERMINATION 
{ 
 EVENTS{ 
