   
Abstract—This paper presents a method of combining the 
design and the implementation of fixed-point FIR filter 
coefficients into one design flow. The proposed method designs the 
fixed-point coefficients in an expanded subexpression space. 
During the design process, the implementation cost is estimated as 
well and it is fed back to the design routine such that the 
algorithm can redesign the fixed-point coefficients iteratively. 
Design examples show that we can obtain better 
hardware-cost-effective FIR filters than the results reported by 
other researchers. 
I. INTRODUCTION 
Digital filters are essential in digital signal processing 
(DSP) or communication systems. To implement a digital filter 
in a DSP or communication system efficiently becomes an 
emerging issue in the research area of digital filter design.  In 
the past two decades, many results of FIR filter fixed-point 
coefficient design and realization have been published [1]-[23]. 
First, the coefficients are designed in binary formats or in 
canonic sign digit (CSD) formats. Since each nonzero digit of 
the fixed-point coefficients costs an adder, many researchers 
try to minimize the number of nonzero digits in the coefficient 
design phase. Next, fixed-point coefficients are realized by a 
common subexpression elimination (CSE) method [12]-[16] or 
by a graph method [17]-[21] to reduce the hardware complexity. 
Fig.1 shows an example of a conventional coefficient 
realization. The same pattern among coefficients, called a 
common subexpression by the CSE researchers or a partial sum 
by the graph method researchers, is detected and is processed 
only once. Thus, the number of adders can be reduced. Since 
the fixed-point coefficients are designed and realized 
separately, the resultant hardware may not be the most cost 
effective one [22], [23]. 
In [22], a method combines MILP and CSE was proposed. 
Their method is optimal in terms of hardware complexity. 
However, the computation complexity is too high such that 
their method is only applicable to very simple FIR filters that 
are not practical in most situations.  
In [23], a new concept of subexpression space was proposed. 
Unlike the conventional flow in which the fixed-point 
coefficients are determined first followed by searching for 
common subexpressions, their method first determines a set of 
subexpressions called a basis set. Next their algorithm 
constructs the fixed-point coefficients only using combinations 
 
 
of the numbers in the basis set. Because the hardware cost of 
implementing each number in the basis set is known a priori, 
their method can calculate the overall hardware complexity at 
the same time as they design the corresponding fixed-point 
coefficients. Therefore, they can find an optimal solution in 
terms of the hardware cost based on the chosen basis set. 
Although a rule of thumb for choosing a basis set is given in 
[23], there is no way to verify if the basis set is truly the best 
one for the desired FIR filter. Although the concept given in [23] 
is a breakthrough, there is still room that we can improve. 
In this paper, we suggest an improved fixed-point coefficient 
design process that considers the implementation complexity at 
the first stage of the design phase. The new concept that we 
propose is the expanded subexpression space that will be 
explained later. We combine two methods: one is using the 
expanded subexpression space to construct the fixed-point FIR 
coefficients; the other is confining our searching range between 
the upper bound and the lower bound of each coefficient to 
accelerate the design process [11]. The architecture we assume 
in this paper is the transposed form symmetrical FIR filter. 
Compared with the previously published results in [11], [16], 
and [23], the proposed method can produce FIR filters with 
reduced number of adders in most cases. In the meantime, the 
limitation of requiring a good basis set as the method in [23] is 
relaxed by using the proposed algorithm. 
On the other hand, since the way of realizing the transposed 
form FIR filters is determined by the proposed method, in order 
to save brainpower and time for writing the RTL code of an FIR 
filter, we develop a C program to generate a Verilog or a VHDL 
code of the FIR filter automatically based on the coefficients 
produced by the proposed algorithm. A comparison of the code 
performance between the proposed design flow and Matlab’s 
fdatool is also given in this paper. 
Fixed-point FIR Filter Design and Implementation in the 
Expanded Subexpression Space 
NSC 97-2221-E-011-139  
Department of Electrical Engineering  
National Taiwan University of Science and Technology  
chyao@mail.ntust.edu.tw 
(a)                                            (b) 
Fig. 1. An example of common subexpression elimination. 
 A branch and bound process employed in the proposed 
method is as follows: 
b&b(i) { 
 if (i–1 < ⎣(N – 1)/2⎦){ 
 if (~(hmin(i–1) ≤ h i–1,0 or h i–1,1 ≤ hmax(i–1))){ 
 Infeasible (mark 1); 
 return; 
 } 
 if (hmin(i–1) ≤ h i–1,0 ≤ hmax(i–1)) { 
 hi–1 = h i–1,0; 
 Expand S = S ∪ {hi–1 >>}; 
 body; 
 Shrink S = S \ {hi–1  >>}; 
 } 
 if (hmin(i–1) ≤ h i–1,1 ≤ hmax(i–1)) { 
 hi–1 = h i–1,1; 
 Expand S = S ∪ {hi–1 >>}; 
 body; 
 Shrink S = S \ {hi–1 >>}; 
 } 
 } 
 else{ 
 for(j = 0; j ≤ 1; j ++){ 
 hi–1 = h i–1,j; 
 if(solution in spec.?) 
 if(Abest > A⎣(N – 1)/2⎦ ){ 
 Save the fixed-point coefficients; 
 Abest = A⎣(N – 1)/2⎦; 
 } 
 else 
 Infeasible (mark 2); 
 } 
 return; 
 } 
} 
where hi–1 >> represents continuously right-shifting hi–1 until it 
becomes odd. The process body is shown as follows： 
body{ 
 if(Ai-1+Aps(i) ≥ Abest or Ai-1 > Aes(i−1)+Mc) { 
 Cut branch; 
 return; 
 } 
 else{ 
 Solve the minimization problem (4). 
 if (δ ≤ δp)  
 b&b(i+1); 
 else { 
 Infeasible (mark 3); 
 return; 
 } 
 } 
} 
It is noted that searching for optimal fixed-point 
coefficients of an FIR filter is an NP-complete problem. The 
size of the binary tree grows exponentially as the filter length 
increases. Therefore, we must have a cut-back strategy such 
that the algorithm can obtain a cost-effective solution in a 
reasonable period of time. The cut-back step is realized in the 
first if-block of the process body. We can see that the algorithm 
checks two things: First, examining Ai-1+Aps(i) ≥ Abest checks 
whether the predicted number of adders exceeds the limit. 
Second, examining Ai-1 > Aes(i−1)+Mc checks whether the 
number of realized adders counted up to the current coefficient 
exceeds a margin plus the corresponding number of realized 
adders that belongs to the up-to-date solution. 
The proposed algorithm invokes linear programming (3) and 
(4) several times. The constraints in (3) and (4) are 
semi-infinite constraints in that they must be satisfied for all 
values of ω. This can be solved by employing the method 
shown in [24] that incrementally includes extreme points from 
the previous iteration to the constraints. Hence, we don’t need 
to sample ω in a very dense manner. 
III. EXAMPLES 
Example 1: We use the proposed method to design five filters. 
L1 and L2 are filters originally given in Examples 1 and 2 of [2]. 
S1 and S2 are the filters originally given in Examples 1 and 2 of 
[3]. “A” is the filter A originally given in [11].  
Table I summarizes the required number of adders of the 
proposed method and the results given in [16], [11], and [23].  
It is noted that the results of [16], which is obtained by 
considering the fixed-point coefficient design and implement- 
tation separately, is used here as a background reference. One 
can see that all three methods (the proposed, [11], and [23]) that 
combine coefficient design and implementation into one flow 
outperform the results in [16].  
On the other hand, the number of adders produced by the 
proposed method is no more than that reported in [11] or [23]. 
Especially in L1 and S2, the number of adders produced by the 
proposed method is 81.8% and 84.2% of the best results ever 
published in [23], respectively. 
Example 2: In spreading rate 1 of CDMA2000 [25], a baseband 
FIR filter of length 48 is employed. The specifications of this 
TABLE I 
Comparisons of the required number of adders of filters in 
Example 1 synthesized by the proposed algorithm and the results 
given in [11], [16], and [23]. 
Filter N Coefficient Word Length Proposed [16] [11] [23]
L1 121 16 36 51 47 44 
L2 63 13 17 19 18 17 
S1 25 9 4 5 NA 4 
S2 60 13 16 24 23 19 
A 56 13 17 NA 18 NA
 
TABLE II 
Spreading rate 1 baseband filter specifications of CDMA2000. 
Sampling rate 4.9152 MHz
Passband edge frequency 590 kHz.
Stopband edge frequency 740 kHz.
Passband ripple δp  1.5 dB
Stopband attenuation δs  40 dB
Filter length 48 tap
