more. This slows down many operations on point primitives. Therefore, an important challenge to point-based 
shape modeling is how to handle the huge number of points efficiently and interactively. 
Free-form shape deformations have been studied extensively in the past [2,3,4]. In this paper we propose a free-
form deformation technique based on the moving least square (MLS) surface [6] and our novel interpolation 
scheme, to manipulate point set models. While the users adjust the grids of the free-form deformation (FFD) [3] 
lattice, we use a novel interpolation method, which is based on a circular arc, to account for the local curvature 
variation during object deformation. The deformed point set model is then generated by re-sampling the curved 
base domain and the MLS surfaces. Our interpolation method is simple and easy to be implemented, but it can 
generate a good surface deformation effect. Additionally, it can generate very flexible deformation effect con-
trolled by users. In comparison with two pioneering techniques [16, 19], our approach has some advantages. For 
example, in [16], this approach requires the execution of a smoothing operator several times on the original 
models to obtain a smooth based model. After this stage, it can easily compute displacement information be-
tween the original model and a smooth based model. Then, after applying a deformation operator to the smooth 
based model, this approach adds displacement, i.e., details, to obtain a deformed model. Note that the number of 
points for the smooth based model and original model is almost equal in [16]. On the other hand, our approach 
does not need to execute a global smooth operation. Furthermore, we only apply deformation operation to some 
of original points instead of all original points in [16]. Therefore, our approach potentially performs efficiently 
than [16]. Muller’s work [19] can efficiently simulate several physical effects like elastic, plastic and melting. 
However, this excellent technique is limited in physical-based domain. In contrast, our technique is more gen-
eral and can create more flexible free-form deformation (FFD) in an intuitive way. Furthermore, our approach 
can be easily integrated with other different deformation technique like radial basis functions or other popular 
FFD techniques [2,4].  
 
1.2 Related Work 
After Levoy and Whitted’s work [1] introduce the points as the rendering primitives, many researchers have 
been involved in the area of rendering and modeling point-sampled geometry. Rusinkiewicz et al. [7] and Pfister 
et al. [8] first develop the good rendering techniques for the point primitives. Then the splatting kernels are 
improved by Zwicker et al. [9] and the point rendering is accelerated by Ren et al. [10]. Kalaiah et al. [11] fur-
ther improve the rendering quality using the normal mapped rectangle that mimics the local differential geome-
try properties. 
After the point rendering techniques become matured, the shape modeling techniques for point primitives have 
mushroomed. Pauly et al. [12] present a framework of spectral methods for processing point-sampled objects. 
This framework can perform several operations on point models, including noise removal, enhancement, resto-
ration, and sub-sampling. Zwicher et al. [13] develop an interactive system for point-based surface editing called 
Pointshop3d, which supports a variety of different interaction techniques to alter shape and appearance of 3D 
point models, including cleaning, texturing, sculpting, carving, filtering, and re-sampling. These two techniques 
[12,13] only perform the shape modeling operations based on model’s local normal displacements, and thus they 
cannot generate large scale surface modeling effects. Alexa et al. [6] use the moving least square (MLS) projec-
tion framework to smoothly approximate a point set surface locally and introduce techniques for re-sampling the 
point set surfaces. Pauly et al. [5,14] propose the simplification and multi-resolution framework for point-
sampled surfaces. These techniques can refine or smooth out the point set surfaces with different scale levels, 
but they cannot perform more flexible user controlled shape modeling operations on point objects. 
Adams et al. [15] propose an efficient technique to test the inside-outside conditions for performing Boolean 
operations on point models. Pauly et al. [16] use a hybrid geometry representation, which possesses the advan-
tages of implicit and parametric surface models, to perform a large constrained deformations as well as Boolean 
operations on point-sampled surfaces. Guo et al. [17] develop a system for haptics-based editing on point set 
surfaces. They use the dynamic implicit volumetric model [18] and the mass-spring system to perform the dy-
namic physics-based modeling on point-sampled objects. Recently, Muller et al. [19] present a physical-based 
method, which is derived using Finite Element Method (FEM), for modeling and animating a wide spectrum of 
point-based volumetric objects with material properties ranging from stiff elastic to highly plastic.  
 
1.3 Overview 
Our method contains two main stages: the preprocessing stage and the deformation stage. In the preprocessing 
stage, we divide the point set models into clusters and fit a MLS surface to each cluster. After the MLS surfaces 
of all clusters have been constructed, we define a valid polygonal area for each cluster and discard all the points 
of the original point set model. In the deformation stage, we use FFD [3] to deform the cluster positions and 
normals. Figure 2 shows the process of the FFD deformation in our system. By adjusting the regular grid verti-
The splitting plane is determined by the centroid of P and the largest eigenvector of the covariance matrix. 
However, in some cases, if  maxn  and  maxσ  are not selected properly, this method could produce wrong clus-
ters consisting of unconnected parts as shown in Figure 4. This phenomenon causes the constructed MLS sur-
face not to fit the original surface properly. Therefore, to make the hierarchical clustering more robust, we rem-
edy it by the following two procedures: 1) cluster checking and 2) cluster merging. The cluster checking is sim-
ply done by a region growing process. If the region growing process can not travel all the points of a cluster, it 
means that these points are not connected inside this cluster. Then we randomly select a point that was not vis-
ited by the previous region growing in the cluster and thereafter we restart the region growing process again to 
form a new sub-cluster. After repeating the above processes several times, we can determine how many uncon-
nected parts, i.e., new sub-clusters, inside the original cluster and the size of each sub-cluster. If the size of a 
sub-cluster is less than a user specified minimum cluster size minn  , this sub-cluster will be merged to its nearest 
cluster. Otherwise, this sub-cluster will be classified to be a new cluster. Finally, for each cluster iC  , we record 
its centroid  , referred as the cluster position in the remaining of this paper, and an enclosing sphere with a radius 
ir  .  
 
(a) (b) 
(c) (d) 
Figure 4: Wrong clustering example. (a) Original point-based model; (b) A close view to a letter ‘G’ after the 
hierarchical clustering and each cluster is colored using a distinct color; (c) The same view as (b), but a cluster 
consisting of unconnected parts is colored, i.e., blue; (d) Wrong reconstructed MLS surface caused by the un-
connected parts. 
 
2.2 Cluster Boundary in the Base Domain of a MLS Surface 
Now, let us assume the model is composed of   clusters. Each cluster   is represented by a local MLS surface [6]. 
For more details to implement a MLS surface, please see [6]. Each   has the following information: 
z cluster position:  ic  
z a local reference domain  { }3,0,| R∈=−= xxnx iii DH ,  3R∈in ,  1=in ,   is called cluster 
normal, and  iD  is a constant. 
z a bivariate polynomial ig   for the MLS surface of each cluster iC  . The base domain iH   of this MLS 
surface passes through ic  . 
　 cluster boundary (a series of lines on base domain of MLS surface). 
 
Figure 6: Local surface interpolation. (a) Samples on clusters  ,   and   before deformation. (b) New sample   
corresponding to   of cluster  . 
 
Figure 7: (a) the 3D view of our interpolation scheme for curving the base domain  , (b) the profile of (a) along 
line  . Note   is the origin of the local coordinate. 
 
  ap npp ′Δ+′=′′ ′   (5) 
The normal of  p ′′  is ( )opn ′−′′=′′ norp  , where ( )nor   is the vector normalization function. 
Next, the point  q′  on the deformed surface corresponding to p′   is computed by adding the scaled local dis-
placement along   to  . 
ple of animating eight feet of a detailed Octopus model (originally 791,992 points) and this example includes a 
close view to the shapes of suckers on the feet that is still maintained well after a local deformation on them. In 
(c), the bunny model acts like a soft elastic model that is gradually melting to the ground. In (d), we show our 
CGVSL logo model (originally 104458 points) that is bended and deformed using a wave function. In (e), 
Michelangelo’s David model (originally 273,097 points) is bended at large scale backwards and forwards, and is 
finally squashed into the ground. Finally, in (f), we twist, stretch and bend the Igea model (originally 297,388 
points) in an animation sequence. For the examples in this paper, the preprocessing stages are done in few sec-
onds and the deformation stages can achieve interactive frame rates of between 0.8 second to 5.7 seconds on 
average. Figure 9 shows a zoomed example before and after deformation to demonstrate the quality of the pro-
posed technique. We can see that the quality of the deformed model is similar to the original one. Figure 10 
shows some statistical data for deforming the Stanford Bunny model. Note that, the label ‘points’ in this figure 
indicates the number of points of the re-sampled point model using our technique. Therefore, in frame 1, the 
statistical data is already different with the number of points of the original model. In this example, it is com-
posed of several local deformations. As you can observe, the number of clusters increases when the deformation 
becomes larger. This is due to our region splitting method to maintain the accuracy of each region’s MLS sur-
face. Figure 11 shows another experimental data for the deformation of the octopus model. In this example, we 
can observe the similar phenomenon. In above three figures, we demonstrate the quality, the adaptive cluster 
splitting and re-sampling of the proposed method. Currently, to render our model, we use a purely software-
based splatting to draw points. In future, other hardware supported renderers such as [7] can be used to further 
speed up rendering cost. 
5  CONCLUSION AND FUTURE WORK 
We present a free-from deformation approach to manipulate the point-set surfaces. This technique provides 
users the powerful free-form deformation directly on point-sampled surface at interactive rates. Experimental 
results show that this new approach successfully free-form deforms point-set models and still retains the details 
of the original models. Although we currently only implement the conventional FFD technique [3], we believe 
that other free-form deformation techniques can be easily integrated into our approach. In future, we plan to 
design a better user interface to alleviate the cumbersome, time-consuming manipulation of individual points in 
a control lattice of FFD. We will like to implement some Boolean operations or local editing, and sculpting to 
enhance the current system. In addition, we also plan to explore the possibility of applying merging [22] or 
progressive approach [23] from mesh morphing to generate the metamorphosis of point-based surface. Finally, 
to render NPR style of point-based surface [24] with deformation will be another challenging topic to be inves-
tigated. 
 
