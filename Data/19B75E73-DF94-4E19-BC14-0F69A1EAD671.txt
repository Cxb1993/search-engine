指紋流方向估計研究 
劉立民 
I. 中文摘要 
正確的估計指紋流方向是指紋影像處理中一個重要的工作。一個成功的演算法可以大
幅的改進指紋影像強化，指紋分類，特徵點擷取的效能。以斜度為基礎的指紋流方向估算
演算法被研究人員大量採用，並發表在學術文獻中。然而，此類的演算法無法保證估算出
來的方向正確性。更嚴重的是，此類演算法甚至會對包含 singular point 的區塊給定方向。
本研究提出一個包含兩步驟的指紋流方向估算演算法。第一個步驟估算可靠的指紋流方
向，該演算法已在之前的研究中提出(Liu and Dai, 2006)。這個演算法可以分辨指指紋中平
行與非平行結構，並指定一個可靠的方向給平行結構。而包含雜訊，singular point，minutiae
區塊的方向則會被標記為未知。然而，方向未知的區塊的比例過高而且大部分方向被標記
為未知的區塊都有一個惟一的方向。第二步驟則針對未知的區塊指紋流的方向作回復。而
指紋流方向回覆的演算法並不會消除 singular point 的存在。本計畫使用 NIST 指紋資料庫
中的指紋影像來驗證本研究理論的效果，成果請見 IV 計畫成果自評。 
 
關鍵字: 指紋; 方向重建; 方向估計. 
 
II. 英文摘要 
Correctly estimating fingerprint ridge orientation is an important task in fingerprint image 
processing. A successful orientation estimation algorithm can drastically improve the 
performance of tasks such as fingerprint enhancement, classification, and singular points 
extraction. Gradient-based orientation estimation algorithms are widely adopted in academic 
literature, but they cannot guarantee the correctness of ridge orientations. Even worse, they assign 
orientations to blocks with singular points. A novel and reliable orientation estimation algorithm 
is proposed in this paper. This algorithm runs in two phases. The first phase assigns reliable 
orientations to blocks with parallel structures and marks other blocks with noise, singular points, 
and minutiae as uncertain. Since most uncertain blocks marked in the first phase do have unique 
ridge orientations, the second phase of our algorithm restores the orientations of these uncertain 
blocks from their neighbor blocks orientations. Different from other orientation estimation 
algorithms, our algorithm leaves the blocks containing singular points and assigns reliable 
orientations to the other blocks. Detailed examples are given in this paper to show how our 
algorithm works. We use NIST-4 fingerprint database in our experiment to verify the superiority 
of our algorithm. 
 
Key words: Fingerprint; Orientation restoration; Orientation estimation; Fingerprint 
enhancement. 
 
 
III. 內容與參考文獻 
（全文如下頁） 
 
A Reliable Fingerprint Orientation Estimation Algorithm 
 
Limin Liu 
 (Department of Applied Mathematics, Chung Yuan Christian University 
Chung Li, Taiwan, ROC. 
lmliu@math.cycu.edu.tw) 
 
Abstract: Correctly estimating fingerprint ridge orientation is an important task in fingerprint image processing. A successful 
orientation estimation algorithm can drastically improve the performance of tasks such as fingerprint enhancement, classification, 
and singular points extraction. Gradient-based orientation estimation algorithms are widely adopted in academic literature, but 
they cannot guarantee the correctness of ridge orientations. Even worse, they assign orientations to blocks with singular points. A 
novel and reliable orientation estimation algorithm is proposed in this paper. This algorithm runs in two phases. The first phase 
assigns reliable orientations to blocks with parallel structures and marks other blocks with noise, singular points, and minutiae as 
uncertain. Since most uncertain blocks marked in the first phase do have unique ridge orientations, the second phase of our 
algorithm restores the orientations of these uncertain blocks from their neighbor blocks orientations. Different from other 
orientation estimation algorithms, our algorithm leaves the blocks containing singular points and assigns reliable orientations to 
the other blocks. Detailed examples are given in this paper to show how our algorithm works. We use NIST-4 fingerprint database 
in our experiment to verify the superiority of our algorithm.  
Keywords: Fingerprint; Orientation restoration; Orientation estimation; Fingerprint enhancement. 
Categories: I.4.3, I.4.9, I.5.4 
 
1. Introduction 
Fingerprints are the most widely applied biometric identifier. With the help of high performance computers, 
Automatic Fingerprint Identification Systems (AFIS) have been widely applied in many fields such as access control 
and criminal investigation. A fingerprint consists of two direction-oriented parts: ridges and valleys, where ridges are 
denoted by the black curves and valleys are the space between two neighbor ridges. These directional patterns form 
various fingerprint features, including a small number of singular points (like delta points and core points) that 
represent regional directional makeup and randomly distributed local discontinuities (like ridge endings and 
bifurcations) called minutiae [1]. A typical fingerprint is illustrated in Fig. 1.  
Developing an efficient and reliable fingerprint orientation estimation algorithm is critical because such 
orientations are used in many fingerprint related algorithms. For example, the orientation estimation algorithm can 
generate the directional image, a popular mediator in AFIS, of a fingerprint. A directional image can be viewed as a 
representation of the local orientation of ridges, usually in square blocks, from the original fingerprint image. It can 
be used in fingerprint classification [2] and singular point detection [3]. However, if the orientation estimation 
algorithm performs poorly, we would obtain incorrect directional images, and then the fingerprints might be 
misclassified or marked with false singular points.  
Fingerprint enhancement algorithms can also benefit from correctly estimated orientations. Fingerprint 
enhancement is a key step in fingerprint image processing. It can remove noise due to dirt, grease, moisture, and poor 
quality of input devices from the raw fingerprint images [4]. Anisotropic filtering approach is widely adopted in 
fingerprint enhancement algorithms [5-11]. These algorithms require correct ridge orientations to remove noise from 
smoothing filter to deal with. Besides, the location of singular points will shift slightly away from the true location 
after filtering [19].  
Unlike the aforementioned approaches that assign unreliable orientations to blocks that should not be assigned, 
our algorithm leaves these blocks unassigned and provides reliable orientations to the other blocks. Our algorithm 
contains two phases: Ridge Orientations Estimations and Verification Algorithm (ROEVA) and Fingerprint 
Orientation Restoration Algorithm (FORA). ROEVA (the first phase) divides a fingerprint into certain and uncertain 
blocks by ROEVA verification rules and then assigns orientations to only certain blocks. A certain block is defined 
as a block with parallel ridge flows; whereas an uncertain block is defined as a block with non-parallel ridge flows 
due to noise, singular points, or minutiae.  
Orientations of the blocks marked as uncertain by ROEVA due to minutiae or slight noise will be restored by 
FORA (the second phase). Unlike Gradient-based orientation estimation algorithms, FORA will not assign 
orientations to uncertain blocks that contain singular points. 
The restoration process of an uncertain block is sketched as follows. In Fig. 4 (a), the center block is marked as 
uncertain by ROEVA due to minutiae, but the orientations of its 8 neighbor blocks are highly similar. In such a case, 
it is reasonable to restore the orientation as the mean of the orientations of its neighbor blocks. For the sake of easy 
communication, the 8 neighbor blocks of a particular block are labeled from 1 (top-left) to 8 (middle-left) clockwise, 
as shown in Fig. 4(a). Note that the reliable orientations input to FORA can be provided by any algorithm, not 
limited to ROEVA. 
Restoring orientations of uncertain blocks by the orientations of their neighbor blocks can be a very complicated 
process. Take the uncertain blocks in Fig. 4 (b) and (c) as examples. The orientations of the 8 neighbor blocks of 
these two uncertain blocks at corresponding locations are very similar (less than 30 degrees) except block #8. In both 
cases, at least 4 of the 8 neighbors, #3~#6, have similar flow orientations, and the orientations of neighbor #3 and 
neighbor #7 in both figures are almost orthogonal. However, only the orientation of the uncertain block in Fig. 4 (b) 
should be restored, whereas the uncertain block in Fig. 4 (c) should not due to a singular point. Similarly, the 
information provided by the blocks around central, uncertain blocks in Fig. 4 (d) and (e) is similar. However, only 
the orientation of the central block in Fig. 4 (d) should be restored, whereas the central block in Fig. 4 (e) should not. 
In other words, the orientation of an uncertain block may not be restorable even when the majority of its rectangular 
neighbor orientations agree on a certain orientation, as shown in Fig. 4 (e). On the other hand, the orientation of an 
uncertain block may be restorable even the majority of its rectangular neighbor orientations do not agree on any 
certain orientation, as shown in Fig. 4 (d). Using hexagonal patterns may overcome such problems; therefore, the 
hexagonal pattern is adopted in the FORA. 
In summary, FORA can properly differentiate cases which should not be assigned with orientations such as Fig. 
4 (c) and (e) from those that should, and it can properly restore the orientations of large uncertain regions as shown 
in Fig. 3. 
The rest of the paper is organized as follows. Section 2 describes how REOVA, the first phase of our algorithm, 
assigns reliable orientations to blocks with parallel ridge flows and marks others as uncertain ones. Section 3 
describes how FORA, the second phase of our algorithm, restores orientations of uncertain blocks marked by 
ROEVA. Experimental results are given in Section 4. Section 5 concludes the paper. 
direction between Lmin and Lmax is 90 degrees. If all of the conditions above are satisfied, mark the block as 
a certain block and set the orientation to be max degrees, the direction of Lmax. Otherwise, mark this block 
as an uncertain block. 
A block will be marked as uncertain due to the presence of minutiae, singular points, or noise. On the other hand, 
if a block is marked as certain, then the orientation assigned to the block must be reliable. For example, six blocks in 
Fig. 2 are all marked as uncertain by ROEVA. Fig. 2(a) and (b) are uncertain due to minutiae, and the orientations of 
these two blocks will be restored in FORA. Note that our algorithm will mark Fig. 2(c) to (f) as uncertain instead of 
assigning approximate orientations and hoping they are correct. In our experiment, ROEVA on average can assign 
orientations to 49% of the blocks in the 4000 fingerprints in the NIST-4 database [24]. More details can be found in a 
previous study [25].  
3. The Second Phase: Fingerprint Orientation Restoration Algorithm (FORA)  
The second phase of our algorithm, Fingerprint Orientation Restoration Algorithm (FORA), restores the orientations 
of uncertain blocks by the orientation information provided by ROEVA. ROEVA divides a fingerprint into blocks 
and assigns one of the four following types, certain (C), uncertain (U), background (B), or border (O), to each block. 
Fig. 7 (a) shows a fingerprint image with these four types: certain in ridge flows, uncertain in gray, background in 
black, and border in white. Background blocks are derived by segmentation process using gray scale variance 
thresholding [26].  
3.1. Initial orientations 
The orientations of a certain block C and border block O are denoted as orn(C) and orn(O). The other two types, 
uncertain and background, do not have orientations initially.  
Generally speaking, fingerprint features are located in the center portion, or pattern area, of a fingerprint image. 
The ridge flows can be very different in the pattern area. On the contrary, borders of fingerprints have similar flow 
patterns where bottom flows are horizontal, top-left flows are around 45 degrees, and top-right flows are around 135 
degrees. This property provides useful information in the orientation restoration process. The border blocks are 
designed to depict this property and can be divided into two types: outer border and inner border.   
The outer border blocks represent blocks outside the image. The ROEVA will slice an image, I, horizontally and 
vertically into Nx and Ny blocks. Then these blocks can be labeled as Ii,j where 1 ≤ j ≤ Nx and 1 ≤ i ≤ Ny. The top-left 
block is labeled as I1,1, and the bottom-right block is labeled as INy,Nx. The top outer border blocks are labeled as O0,0, 
O0,1,…, O0,Nx+1 from left to right, the bottom outer border blocks as ONy+1,0, ONy+1,1,…, ONy+1,Nx+1 from left to right, 
the left outer border blocks as O0,0, O1,0,…, ONy+1,0 from top to bottom, and the right outer border blocks as O0,Nx+1, 
O1,Nx+1,…, ONy+1,Nx+1 from top to bottom. Orientations of outer border blocks are defined based on six anchors: 
top-left anchor Tl (45 degrees), top-right anchor Tr (135 degrees), middle-left anchor Ml (75 degrees), middle-right 
anchor Mr (105 degrees), bottom-left anchor Bl (30 degrees), and bottom-right anchor Br (150 degrees). The 
orientations of outer border blocks are defined as follows: 
orn(Oi,j)  =  ( 180
1
180
+⋅
+
−+
− j
N
TTT
x
rl
l
) mod 180   where i=0 and 0 ≤ j ≤ Nx+1,  (1) 
   ( 180
1
180
+⋅
+
−+
− j
N
BBB
x
rl
l
) mod 180 where i= Ny+1 and 0 < j < Nx+1,   
block can be one of the four types, there will be 16 combinations for deriving the orientation and type of a hexagonal 
block as shown in Table 1 with the following rules:  
 
Rule 1. If the difference between the orientations of these two blocks with the same type, C-C or O-O, is less than 
threshold h1, then return the average of these two orientations with a type identical to those two blocks.  
 
Rule 2. If the two blocks have different types and one of them is certain, then the orientation of the certain block 
orn(C) with type certain is used for the hexagonal block.  
 
Rule 3. If the two blocks have different types and one of them is border, then the orientation of the border block 
orn(O) with type border is used for the hexagonal block.  
 
These three rules apply for 12 of the 16 combinations in Table 1. The orientations of the rest four combinations 
are unknown with type uncertain (U) or background (B) as shown in Table 1. In our experiments, the threshold h1 in 
Rule 1 is 45 degrees.   
3.3. Processing priority  
Orientation restoration focuses on uncertain blocks which can be surrounded by 0 to 8 certain blocks. It is clear that 
a block surrounded by more certain blocks should be processed earlier than one surrounded by less, since more 
certain neighbors provide more concrete information about neighbor ridge flows. Similarly, a block surrounded by 
more border blocks should be processed earlier than one surrounded by less, since more border neighbors provide 
more referential information about neighbor ridge flows. For instance, Fig. 4(a)-(c) have 8 certain neighbors and 
(d)-(e) have only 7 certain neighbors. Therefore, Fig. 4(a)-(c) should be processed before (d)-(e). To implement this 
processing order, every uncertain block is assigned with a priority which equals the number of its certain neighbors 
plus 1/10 of the number of its border neighbors. Since certain neighbors provide more solid information than border 
neighbors, the multiplier 1/10 applied on the number of the border neighbors guarantees that blocks with more 
certain neighbors will be processed first. If the orientation of an uncertain block is restored, then the type of this 
block will become certain and, at the same time, the priority of its uncertain neighbors will be recalculated.   
Since a block can have two directions on hexagonal pattern with 6 neighbor blocks, it is necessary to decide 
which direction to apply in the restoration process. Each block in hexagonal pattern is defined with weights 2, 1.5, 0, 
and 0 for types C, O, U, and B, respectively, based on the idea that blocks which provide more solid information 
should obtain more weights. A block which is both an inner border block and a background block will be considered 
as O. The weight of an uncertain block in hexagonal pattern is defined as the sum of weights of its hexagonal 
neighbors. An uncertain block may have weights from 0 to 12 in hexagonal pattern. If the vertical weight is different 
from the horizontal weight, then the direction with a higher weight is selected for the later restoration process. If the 
vertical weight is identical to the horizontal weight, then both directions will be used for restoration process. Besides, 
if the restoration process concludes with unknown on one direction, the result of the other direction on the hexagonal 
pattern will be disregarded.  
3.4. Restoration algorithm 
The pseudo code of the Reliable Fingerprint Orientation Estimation Algorithm (RFOEA) is listed as follows which 
contains two phases: ROEVA and FORA.  The algorithm takes a fingerprint image I as input and applies the 
orientations (within a range, ±30 degrees in our experiments), then the orientation will be restored as the mean 
orientation of those blocks within the range. Otherwise, the orientation and type of the center block will remain 
unknown and uncertain, respectively. If there is more than one group of similar flow orientations, then the average of 
the mean orientation will be used for restoration.  
If the vertical and horizontal weights are identical, hex_nbr_agreement will examine the neighbor orientations 
of both directions. Let orn(CV) and orn(CH) denote the restored orientation of an uncertain block C in vertical and 
horizontal direction, respectively, with values ranged ≥ 0 and < 180 (the mean orientation of the blocks within the 
range), or unknown. If either orn(CV) or orn(CH) is unknown, the orientation and type of the center block will remain 
unknown and uncertain, respectively. If the difference between orn(CV) and orn(CH) is less than a threshold (30 
degrees in our experiments), then the orientation of the center block will be restored as the average of orn(CV) and 
orn(CH). Otherwise, the orientation and type of the center block will remain unknown and uncertain, respectively.  
As aforementioned, once an orientation is restored, the type of the block will be changed from U to C, and the 
priorities of the blocks in Q will be recalculated (line 22). Otherwise, if the hexagonal neighbors do not agree on a 
particular orientation, the orientation of the center block will remain unknown, and the priority of the block will be 
set temporarily to zero and added back to Q (lines 25 and 26). The block priority is set to zero because it might be the 
block with the highest priority. If we add the block back to Q without setting its priority temporarily to zero, we will 
get the identical block when we retrieve the next element from Q (in line 8). A block whose orientation is not 
restorable from its current neighbors may become restorable later when enough information is gathered after its 
uncertain neighbors are restored. The WHILE loop (lines 7~29) terminates when Q is empty or none of the 
orientation of the elements in Q can be restored (lines 23, 27 and 28).  
Two examples are given below to demonstrate how our restoration process works. The orientations of the blocks 
in Fig. 4(b) are shown in Fig. 9(a) with its vertical and horizontal orientations shown in Fig. 9(b) and Fig. 9(c), 
respectively. The weight of the horizontal direction, 12 (6 certain neighbors), is larger than that of vertical 
direction,10 (5 certain neighbors), since the orientation of the bottom-left block in 9(c) cannot be determined from 
blocks #7 and #8 in 9(a) by Rule 1. The orientation of the horizontal direction is 141º (average of 120º, 135º, 144º 
and 166º) because the differences between the orientations of the top four blocks are within a range of 60 degrees. 
This orientation, 141º, is then designated for the center block with type certain.   
The orientation of the central block in Fig. 4 (c) should not be assigned due to the presence of a singular point. 
The orientations of blocks in Fig. 4(c) are shown in Fig. 10(a) with its vertical and horizontal orientations shown in 
Fig. 10(b) and Fig. 10(c), respectively. In this case, the weights of vertical and horizontal directions are the same, 12, 
and less than four orientations lie within 60 (±30) degrees from any orientation in both directions. Therefore, the 
orientation and type of the center block remain unknown and uncertain, respectively.  
4. Experiments 
The proposed algorithm was verified with the NIST-4 database on a Pentium IV (3.4GHz) personal computer with 1 
GB memory, and the software was developed in C# on Microsoft .Net platform. The average time required to 
process a fingerprint image was less than 1 second, which included image segmentation, histogram equalization, 
ROEVA, and FORA. Among the 4,000 images in the NIST-4, 18 percent (723/4000) were rejected. For the 
remaining 3,277 images, 31.7 percent of the blocks (104,229/328,596) were marked uncertain by ROVEA (the first 
phase of our algorithm). By applying FORA (the second phase of our algorithm), the ratio of uncertain blocks were 
References 
1. Bolle RM, Senior AW, Ratha NK, Pankanti S (2002) Fingerprint Minutiae: A Constructive Definition. Proc. of 
Int’l Eccv Workshop, Copenhagen, Denmark, pp 58-66.  
2. Cappelli R, Lumini A, Maio D, Maltoni D (1999) Fingerprint Classification by Directional Image Partitioning. 
IEEE Trans. PAMI 21:402-421. 
3. Zhang Q, Huang K, Yan H (2001) Fingerprint Classification Based on Extraction and Analysis of Singularities 
and Pseudoridges. Proc. Selected papers from Pan-Sydney Area Workshop Visual Information Processing, 
Sydney, Australia, pp 83-87.  
4. O'Gorman L (1998) An Overview of Fingerprinting Verification Technologies. Elsevier Information Security 
Technical Report 3:21-32. 
5. Cheng J, Tian J (2004) Fingerprint enhancement with dyadic scale-space. Pattern Recognition Letters 
25:1273-1284. 
6. Hong L, Wan Y, Jain AK (1998) Fingerprint Image Enhancement: Algorithm and Performance Evaluation. 
IEEE Trans. PAMI 20:777-789. 
7. Jain AK, Hong L, Bolle R (1989) On-line fingerprint verification. IEEE Trans. PAMI 19:302-314. 
8. Maio D, Maltonim D (1997) Direct gray-scale minutiae detection in fingerprints. IEEE Trans. PAMI 19:27-40. 
9. O'Gorman L, Nickerson JV (1989) An approach to fingerprint filter design. Pattern Recognition 22:29-38. 
10. Yang J, Liu L, Jiang T, Fan Y (2003) A modified Gabor filter design method for fingerprint image enhancement. 
Pattern Recognition Letter 24:1805-1817. 
11. Yao M, Pankanti S, Haas N, Ratha N, Bolle R (2002) Quantifying quality: A case study in fingerprints. Proc. of 
IEEE Conference on Automatic Identification Advanced Technologies (AutoID), Tarrytown, NY, pp 126-131. 
12. Lee S, Lee C, Kim J (2006) Model-based quality estimation of fingerprint images. Proc. of the international 
conference on biometrics (Springer LNCS 3832), Hong Kong, China, pp 229-235. 
13. Ratha N, Bolle R (1999) Fingerprint Image Quality Estimation. IBM Computer Science Research Report RC 
21622. 
14. Park J, Kwon Y (2003) Image quality measure using sliced block distance as a graphical element. Proc. of 5th 
Intl. workshop of graphics recognition: recent advances and perspectives (GREC ’03) (Springer LNCS 3088), 
Barcelona, Catalonia, Spain, pp 211-222. 
15. Lim E, Jiang X, Yau W (2002) Fingerprint quality and validity analysis. Proc. of the Intl. Conf. on Image 
Processing, Rochester, NY, pp 469-472. 
16. Mehtre BM, Murthy NN, Kapoor S, Chatterjee B (1987) Segmentation of fingerprint images using the 
directional image. Pattern Recognition 20:429-435. 
17. Hung D (1993) Enhancement and feature purification of fingerprint images. Pattern Recognition 26:1661-1671. 
  
Fig. 1 Fingerprint features: core point (in circle), delta point (in triangle), minutiae-ridge ending 
(in diamond), and minutiae-ridge bifurcation (in square). 
 
 
(a) 161.3 º 
 
(b) 31.4 º 
 
(c) 175.1 º 
 
(d) 62.1 º 
 
(e) 49.3 º 
 
(f) 60.1 º 
Fig. 2 Six ridge patterns and their orientations calculated by Sobel operator. 
 
 
 
 
 
 
(a) 
 
(b) 
 
(c) 
 
(d) 
 
(e) 
Fig. 4 Orientations of (a), (b), and (d) should be restored, but (c) and (e) should not. 
 
 
 
(a) 
 
(b) 
Fig. 5 (a) A fingerprint ridge flows with ideal corresponding histogram. (b) Six directions for histograms 
examination. 
 
(a) 
 
(b) 
Fig. 3 Fingerprints from NIST-4 containing large noise at (a) bottom-left area and (b) top-left area in 
round rectangles. 
