2 
 
Table of Contents 
 
I. Contents of report……………………………………………………………………………3 
(1) Preface…………………………………………………………………………………3 
(2) Objective………………………………………………………………………………3 
(3) Literature review………………………………………………………………………3 
(4) Methodology .…………………………………………………………………………4 
(5) Findings and discussions ………………………………………………………………6 
 
II. Self Evaluation………………………………………………………………………………9 
  
4 
 
higher rate code. Time-sharing is simple but the problem is that the MIB which corresponds to 
the header part of a packet or image is usually short in length. It is obvious that a short error 
correction code suffers from serious performance degradation. Another scheme is to use 
rate-compatible codes with puncturing (RCPC/RCPT codes). In this scheme, a lower-rate 
mother code can be punctured into a higher rate code to adjust the level of protection. 
RCPC/RCPT is more flexible in terms of code-rate selection for MIB and LIB if compared with 
time sharing. However, the performance of RCPC/RCPT codes also suffers from shortened 
blocklength. 
From the above discussion, we can conclude that a single code that can provide UEP 
property is desirable. It turns out that the irregular LDPC code is a natural fit for UEP 
applications. Rahnavard et al. proposed a partially regular UEP LDPC code where the variable 
nodes are divided into three groups, MIB, LIB and Parity Bits (PB).  
LDPC codes are usually decoded by running an iterative message-passing algorithm over 
the underlying bi-partite graph of the code. This iterative algorithm is also called Belief 
Propagation (BP). The problem of determining the order that the variable nodes and the check 
nodes update their message is called scheduling. Traditional message-passing schedule adopts 
the flooding strategy. Although flooding has almost become the standard LDPC decoder 
scheduling, several studies show that different scheduling strategies can outperform flooding in 
terms of convergence speed and frame error rate (FER). These strategies include Standard 
Sequential Scheduling (SSS) and Informed Dynamic Scheduling (IDS). 
The first IDS algorithm was proposed by Elidean et al. as the Residual Belief Propagation 
(RBP) algorithm. RBP updates the node that has the largest difference between its message in 
the current iteration and its message in the previous iteration. This is a greedy algorithm with 
the intuition of finding the node whose LLR is increasing the fastest such that the iteration can 
be speed up. RBP was found to converge even faster than SSS. However, its performance for a 
large number of iterations becomes worse since the greedy algorithm sometimes converges to 
the wrong codeword. Node-wise RBP (NW-RBP) updates the variable nodes in sequence as in 
RBP but updates the check nodes in parallel. The NW-RBP is less greedy than the RBP and 
turns out to be a good trade-off between convergence speed and error performance. 
 
(4) Methodology  
 
We use C++ to implement a software simulation environment for UEP-LDPC codes. The 
simulator can take the input of any arbitrary LDPC parity check matrix and run simulation over 
AWGN. The simulation environment can use flooding or RBP in the message update and the 
three proposed algorithms will then be implemented. 
The system consists of a binary LDPC encoder followed by a signal mapper and then the 
coded bits are sent over the channel. The channel is additive white Gaussian Noise channel 
(AWGN). At the receiving side, first the received symbols are de-mapped assuming that perfect 
channel side information can be obtained at the receiver. Then the LLRs are passed to the 
6 
 
 
(5) Findings and discussions 
 
Figure 1 shows a set of simulation of a UEP LDPC code using two different LRT 
thresholds. The LDPC code used is rate-1/2 and the code length is 1944 bits. Among the 972 
information, 140 bits are the MIB and the other 832 bits are the LIB. MIB has degree 20 and 
LIB has degree 2 and 3. In LRT case A, we choose the thresholds as LRTMIB=0.25 and 
LRTLIB=1. In LRT case B, LRTMIB=0.15 and LRTLIB=1. From Figure 1, it is observed that 
by skipping the high LLR MIB updates, we are able to maneuver the gap between the BERs of 
MIB and LIB. 
 
Figure 1. With the LRT algorithm, we can adjust the 
BER curves of MIB by setting different ranking 
threshold. The BER curves of LIB virtually remain 
the same. Therefore, the gap between LIB and MIB 
can be maneuvered. 
 
Figure 2 shows the effect of the NQ method on the same UEP LDPC code in Figure 1. The 
Eb/No is 1.4dB. We choose the quotas as TMIB=1822, TLIB=712. It is found that so far the 
NQ algorithm can only slightly change the gap between the BERs of MIB and LIB. However, it 
could slow down the convergence. We think that the NQ algorithm worth more studying since 
it may play a role in the future if we consider a combination of the three algorithms. 
8 
 
 
Figure 3. With the WR algorithm, the BER of MIB 
can move upwards and become very close to the LIB 
curve. Therefore, the gap between LIB and MIB is 
significantly reduced and the UEP LDPC code 
behaves almost like an EEP LDPC code. 
  
無研發成果推廣資料 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無. 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
