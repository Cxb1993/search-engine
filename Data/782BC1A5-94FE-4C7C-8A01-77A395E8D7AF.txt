I 
目錄 
 
 
壹、 報告內容…………………………………………1 
一、 前言…………………………………………..1 
二、 研究目的……………………………………..2 
三、 文獻探討……………………………………..2 
四、 研究方法……………………………………..3 
五、 結果與討論…………………………………..6 
貳、 參考文獻…………………………………………7 
參、 計畫成果自評……………………………………8 
肆、 附件………………………………………………9 
2 
標端測試則專注在測試軟硬體之間的介面與互動，以及整個嵌入式系統是否符合規
格需求。基於嵌入式軟體與硬體和作業系統有密切的相依關係，倘若可以識別嵌入
式軟體與硬體和作業系統核心程式之間的介面關係，將有助於測試人員針對主機端
和目標端測試設計適當的測試案例，以有效測試嵌入式軟體元件，以及元件與硬體
和作業系統之間的介面與互動行為的正確性。因此，本計畫將研發一套「嵌入式軟
體結構化測試」輔助工具，簡稱 ESWST (Embedded Software Structural Testing Tool)，
協助開發人員瞭解嵌入式軟體的控制結構與分析嵌入式軟體與硬體之間的介面資訊，
以系統化推導測試案例來驗證嵌入式軟體的控制邏輯及軟硬體之間的資料互動行為，
同時支援嵌入式軟體測試的自動化，以降低測試成本，提昇測試效率，及改善嵌入
式軟體的品質和可靠性。 
 
二、 研究目的 
有鑑於嵌入式軟體測試的重要性，本計畫的研究目的主要為研發一個開放源碼
的 Eclipse 的外掛(plugin)工具，以協助分析 ARM-based 嵌入式軟體的結構與自動化
嵌入式軟體的測試，降低測試成本和提升嵌入式軟體測試的有效性。此輔助工具主
要的功能如下： 
 自動萃取和建立嵌入式軟體的結構化測試模型，包含函式呼叫圖(call 
graph)、控制流程圖(control flow graph, CFG)和硬體介面資訊等，協助測
試人員瞭解與分析嵌入式軟體的結構。 
 利用測試模型自動產生基礎測試路徑(basis test path)，協助系統化設計測
試案例，以提升嵌入式軟體測試的有效性。 
 支援 C++測試案例的撰寫，以及自動化目標端測試的執行和測試結果的收
集，並提供測試覆蓋率的計算以供測試足夠性(adequacy)的檢視。 
 
三、 文獻探討 
隨著嵌入式系統的普及，以及嵌入式軟體規模與複雜度的增加，嵌入式軟體的
品質亦逐漸受到重視，然而目前大多數的研究主要著重於嵌入式軟體的設計與開發，
關於嵌入式軟體測試的文獻探討仍不多見，以下針對與本計畫相關的研究做簡要的
回顧。 
Sung 和 Choi[2]提出一個測試資料選擇技術(test data selection technique)，可以發
現嵌入式系統軟體與硬體之間互動的錯誤，此技術主要是根據嵌入式系統的需求規
格產生對應的軟體程式來模擬該系統的行為，並將硬體可能產生的錯誤轉換成軟體
錯誤，再透過錯誤注入技術(fault  injection  technique)[3]將這些錯誤注入至模擬程
式中，最後選擇測試資料來偵測這些因軟體與硬體互動所引起的錯誤。作者並透過
實際的案例來驗證此測試資料選擇技術的成效。 
Sung 等人[4][5]提出一個自動化測試嵌入式軟體的架構 EmITM(Embedded 
System’s Interface Test Model)，此架構植基於嵌入式硬體與作業系統介面的分析，以
及模擬(emulation)嵌入式系統的環境。作者將程式中使用到硬體與作業系統介面的
操作行為分類為 test feature，且根據每個 test feature 設計其測試案例樣板，最後根據
這些樣板自動產生測試案例，並透過模擬測試技術(emulation test technique)執行已產
生的測試案例。此技術是結合除錯與監控技術，在介面中插入中斷點(breakpoint)，
4 
為協助開發人員了解嵌入式軟體的控制結構，及分析嵌入式硬體參數資料與控
制結構的相依關係，ESWST萃取嵌入式軟體程式的結構資訊，包含函式呼叫圖、控
制流程圖、函式間控制流程圖(inter-procedure control flow graph, ICFG)與硬體界面資
料流資訊(dataflow artifacts)等。開發人員可透過這些資訊了解函式之間的互動關係、
函式可能的執行路徑、硬體參數資料對程式執行路徑的影響等，以設計測試案例來
驗證嵌入式軟體的控制邏輯與軟硬體之間資料的互動。 
另外，為提升嵌入式軟體測試的自動化，ESWST提供一個測試框架，此框架整
合ECUT[13]、CppUnit[14]、Gcov[15]等開放源碼程式，讓開發人員可以撰寫與編輯
C++的單元測試案例與進行交叉編譯(cross compilation)，並能自動執行目標端(target 
board)之測試、收集與呈現測試執行結果、及計算測試覆蓋率，以減輕測試工作的負
擔，提升測試的效率，達到改善嵌入式軟體品質的目的。 
圖一為ESWST的系統架構圖，主要分為本機端(host-side)與目標端(target-side)
兩個部份，共包含四個子系統：測試控制子系統(Test Controller Subsystem, TCS)、
測試模型子系統 (Test Model Subsystem, TMS)、測試執行子系統 (Test Runner 
Subsystem, TRS)、以及測試套件子系統(Test Harness Subsystem, THS)。各子系統主
要負責的功能簡略說明如下： 
 
ESWST
Host-Side Target-Side
ESWST User
Eclipse
IDE
TRS
TCS
TMS
Repository
ESW Source 
Code
ESWST-PI-01 ESWST-II-01
ESWST-II-02
ESWST-EI-02
ESWST-EI-01
ESWST-II-03
THS
Internal Interface
External Interface
Plugin Interface
ESWST-II-04
User Interface
ESWST-UI-01
 
圖一 ESWST System Architecture Diagram 
 本機端(host-side) 
 測試控制子系統(TCS)：負責Eclipse開發環境與ESWST之間的溝通連接，
以及提供ESWST的使用者操作介面、測試案例編輯器與檔案存取管理。 
 測試模型子系統(TMS)：負責嵌入式程式碼的解析、介面資訊的分析、測
試模型建構、以及測試路徑產生與篩選。 
 測試執行子系統(TRS)：負責測試執行的控制、產生目標端與待測程式及
測試案例溝通之連結程式碼、產生交叉編譯的目標端可執行檔、以及分析
測試記錄檔(test log)以產生測試結果報表。 
 目標端(target-side) 
 測試套件子系統(THS)：負責目標端的初始化、記錄測試覆蓋率的資訊，
並產生測試記錄檔。 
 
圖二為 ESWST 的操作流程，使用者選定待測程式並標記硬體界面變數後，
ESWST 便自動解析程式並萃取該程式的結構資訊，此時使用者可點選特定的函式
6 
 
 
 
五、 結果與討論 
本計畫開發一個嵌入式軟體結構化測試輔助工具 ESWST，可以協助測試人員瞭
解嵌入式軟體的結構，包含函式呼叫圖、控制流程圖、函式間控制流程圖和硬體界
面之資料流資訊等，以協助開發人員了解嵌入式軟體的控制流程結構，分析嵌入式
軟體與硬體介面之間資料的傳遞與相依關係，並能自動產生基本測試路徑，幫助系
統化推導測試案例，以驗證嵌入式軟體的控制邏輯和不同硬體參數資料對嵌入式軟
體的影響。此外，ESWST 工具並提供一個測試框架，可以支援測試案例的撰寫、測
試的執行、測試結果的呈現與測試覆蓋率的計算，以協助嵌入式軟體測試的自動化，
能有效降低測試成本，提升測試效率，並改善嵌入式軟體的品質與可靠性。 
 
 
 
 
 
  
圖七 測試結果  圖八 測試覆蓋率  
8 
計畫成果自評 
 
本計畫主要的研究成果包含(1)嵌入式軟體結構化測試方法的探討；(2)開放源碼之嵌入
式軟體測試工具 ESWST 的開發。在嵌入式軟體結構化測試方法方面，我們嚐試萃取嵌入
式軟體的結構化資訊，建立測試模型，協助待測程式的瞭解與分析，並自動產生測試路徑。
由於嵌入式軟體往往與硬體有密切的關係，因此在本研究中，我們特別萃取硬體介面變數
資料流資訊(dataflow artifacts) ，辨識哪些測試路徑與硬體的設定可能有關，以協助測試硬
體資料改變對嵌入式軟體的影響。 
本計畫另一個主要成果則是開發嵌入式軟體測試工具 ESWST，為確保 ESWST 工具的
品質，本計畫依循 Lightweight-CMMI 的開發流程，並產出需求、設計、系統測試與操作手
冊等相關技術文件。ESWST 為 Eclipse 的外掛(plugin)，開發人員可利用 ESWST 自動萃取
ARM-based 嵌入式軟體的結構化資訊，包含函式呼叫圖(call graphs)、控制流程圖(control 
flow graphs)、硬體介面變數資料流資訊(dataflow artifacts)等，以了解和分析嵌入式軟體的
控制結構，並可利用這些資訊自動產生基礎測試路徑(basis test path)來系統化推導與設計測
試案例，提升待測程式碼之測試覆蓋率(test coverage)。此外，ESWST 亦整合一些開放源碼
的工具，包含 ECUT、CppUnit、Gcov 等，以提供一個測試框架讓開發人員撰寫測試案例、
自動執行 C++單元測試、及檢視目標端的測試結果與測試覆蓋率等。 
ESWST 可應用於自動化嵌入式軟體的測試，以減輕測試工作的負擔和降低測試成本，
這些成果與原先計畫的規劃相符，因此本計畫符合預期的目標。此外，本計畫部分的研究
成果已發表於國內的研討會，其他成果後續將於國內外的研討會和期刊發表。另外，未來
我們亦計畫以輔導廠商改善其測試能力的方式，讓廠商可以利用 ESWST 工具進行嵌入式
軟體的單元測試，改善其測試效率，以推廣本計畫的研究成果。 
 
 1 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                  日期： 100  年 10 月 30 日 
                                 
一、參加會議經過 
The 2011 International Conference on Machine Learning and Cybernetics (ICMLC 2011) 研
討會由 ICMLC 組織委員會主辦，於 7 月 10 日至 7 月 13 日在中國廣西省桂林市喜來登酒店
舉行，會中有來自不同國家的學者參與，並發表機器學習、樣式辨認與人工智慧等不同研究
領域之論文。此次會議大會共舉辦3場Keynote Speech，分別由 IEEE fellow的Seong-Whan Lee
與 Shyi-Ming Chen，以及 IEEE Trans. on SMC 的 Chief Editor Vladimír Mařík 擔任演講者，介
紹目前模糊理論、機器學習等相關技術研究的挑戰與趨勢，內容相當精采。另外，7 月 12
日大會舉辦一場 Panel Discussion，討論的主題為"The Genesis of an Innovative Research 
Topic"，針對如何選擇研究主題、研究方向挑選的準則、可能的預期研究結果等議題，與會
學者提出不少的看法與建議，讓我獲得許多關於進行研究的啟發。 
7 月 12 日晚間為大會的 Banquet，今年為 ICMLC 會議第十週年，大會特地安排廣西少數
民族舞蹈的表演節目，同時在晚宴中也對歷年舉辦本會議的相關學者們致贈紀念禮物，以及
頒發本年度的 Lotfi Zadeh Best Paper Award 與 Best Student Conference Paper。此外，大會中
個別 Session 有不同主題的論文發表與討論，本人的研究論文於 7 月 13 日上午 9:00~10:10 的
Session 發表，此 Session 中有 5 位研究學者發表論文，以及其他對此 Session 有興趣的相關
研究學者參與，並彼此討論和交流研究心得。在 Session 結束後，本人並利用空檔與幾位參
與學者交換意見，而此次 ICMLC 會議亦在 13 日中午圓滿結束。 
二、與會心得 
ICMLC 為包含 IEEE 在內許多組織單位所贊助之國際會議，此次會議雖然在中國舉行，
仍有不少與會學者來至歐美，因此參加此次研討會除了可與其他國家的學者專家分享研究經
驗，有助於個人於研究能力的提升外，亦認識一些國外學者，彼此交流學術經驗。此外，參
與此研討會的學者專家來自於不同的研究領域，包含機器學習、智慧型代理人、樣式辨認與
人工智慧等，而本人此次發表之論文主要與測試基於 OWL-S 之服務有關，而 OWL 語言在
計畫編號 NSC 99-2220-E-027-008 
計畫名稱 嵌入式軟體結構化測試輔助工具之實作 
出國人員
姓名 
 劉建宏 
服務機構
及職稱 
台北科技大學資工系/ 
助理教授 
會議時間 
100 年 7 月 10 日至 
100 年 7 月 13 日 
會議地點 Guilin, Guangxi, China 
會議名稱 2011 International Conference on Machine Learning and Cybernetics  
發表論文
題目 
A Flow Graph-Based Test Model for OWL-S Web Services 
International Conference on
Machine Learning and Cybernetics 2011
Dear Author,
Congratulations. Your paper has been accepted for publication in the proceedings of the
International Conference on Machine Learning and Cybernetics (ICMLC) 2011.
Please verify the following items to ensure their accuracies:
(1) Please confirm the following:
Paper ID: 3983
Title: A Flow Graph-Based Test Model for OWL-S Web Services
Authors: Chien-Hung Liu, National Taipei University of Technology
Please be reminded your paper will be rejected if the title, names of author(s) or
the order of author list of your final version is different from the original version.
(2) If your paper exceeds six pages, you must pay HKD 540 (USD 70 #) per extra
page.
(3) Your paper will NOT be published in the conference proceedings unless you
COMPLETE EVERY STEP of the following tasks by 13-June-2011
a. Register on or before 13-June-2011
The registration fee:
Non-IEEE Member: USD 550 (equivalent to HKD 4270 #)
IEEE Member*: USD 500 (equivalent to HKD 3890 #)
Student*: USD 450 (equivalent to HKD 3500 #)
Please pay in Hong Kong Currency.
* Identification(s) may be required. Please bring your identification(s) to
the conference.
# As of 20-April-2011, the exchange rate is HKD 7.78 for one USD.
The registration fee of each participant should be settled by credit card
payment. For detail, please see the other attachment (creditcardpayment.
doc)
Please be reminded when you settle the registration fee, attach the Paper
ID, Paper Title and the Registrant Name as a remark.
Page 1/2
A FLOW GRAPH-BASED TEST MODEL FOR OWL-S WEB SERVICES 
CHIEN-HUNG LIU1, SHU-LING CHEN2, JONG YIH KUO1, TENG-YI HUANG1 
1Dept. of Computer Science and Information Engineering, National Taipei University of Technology, Taipei, Taiwan 
2Dept. of Management and Information Technology, Southern Taiwan University, Tainan, Taiwan 
E-MAIL: cliu@ntut.edu.tw, slchen@mail.stut.edu.tw, jykuo@ntut.edu.tw, t7598041@ntut.edu.tw 
Abstract: 
OWL-S is a standard for specifying the ontology of web 
services. It enables web services to be discovered, invoked, 
and composed automatically. However, OWSL-S web service 
is difficult to analyze and test as XML-based OWL-S 
description is hard to understand. In addition, OWL-S 
introduces various control constructs to compose multiple 
services and allows describing the preconditions and expected 
effects of the services, which further complicates the analysis 
and testing of web services. This paper proposes a flow 
graph-based test model for OWL-S web services. In 
particular, the model abstracts the structural test artifacts of 
OWL-S web services. It can facilitate testers to understand 
and analyze the control flow of OWL-S web services. Based 
on the test model, test paths can be derived to ensure the 
correctness of OWL-S web services. 
Keywords: 
OWL-S; Semantic web services; Test model; Web 
service testing  
1. Introduction 
Semantic Web Services (SWS) has drawn much 
attention in recent years since it combines both the 
technologies of semantic web and web services and is able 
to automate the service discovery, invocation, composition 
and interoperation, and execution monitoring. Specifically, 
semantic web enables machines to understand the 
semantics of information on the WWW and allows sharing 
data and knowledge of a particular domain across the 
boundaries of applications and web sites automatically. 
Web services is a technology based on the Service-
Oriented Architecture (SOA) that allows self-describing, 
loosely-coupled distributed applications to be published, 
discovered, and invoked across the Web and to be 
composed as an integrated service to satisfy the needs of a 
business process. By combining the semantic web and web 
services technologies, SWS not only can specify the 
syntactic information but also the semantic annotations of 
web services, which can greatly improve the quality and 
robustness of web service discovery, selection, negotiation, 
and invocation [1]. 
Among the specification languages of SWS, OWL-S 
(Web Ontology Language for Service) [2] is a standard 
proposed by W3C and is widely accepted by industry and 
academe. OWL-S is an XML-like programming language 
that can be used to describe a web service and associated 
semantic information, to specify how to access the 
operations of the web service, and to compose multiple 
services into a process for performing a specific task. In 
particular, in OWL-S service ontology, a service consists 
of three parts: service profile, service model, and service 
grounding. The service profile describes what the service 
does. The service model specifies how to use the service 
and the service grounding describes how to access the 
service. Understanding the descriptions of OWL-S web 
services is not a trivial effort. 
Moreover, OWL-S builds on the RDF (Resource 
Description Framework) [3], OWL (Web Ontology 
Language) [4], and SWRL (Semantic Web Rule Language) 
[5] and is extremely complex and hard to understand. 
Further, OWL-S introduces new types of control constructs 
for composing multiple services to perform a task. It also 
allows describing the preconditions required by a service 
and the expected effects that result from the execution of 
the service. This can further complicate the control flow of 
OWL-S web services and make OWL-S web services 
difficult to analyze and test. 
To facilitate the analysis and testing of OWL-S web 
services, this paper proposes a flow graph-based test 
model to abstract the structural test artifacts of OWL-S 
web services.  In particular, the proposed model considers 
the semantic information described in the IOPRs (input, 
output, precondition, and results) of the web services. It 
also takes various control constructs into account to create 
897
2011 IEEE978-1-4577-0308-9/11/$26.00 ©
Proceedings of the 2011 International Conference on Machine Learning and Cybernetics, Guilin, 10-13 July, 2011
of an atomic or a composite process, where atomic process 
is an invocable service that can be executed in a single step 
(by sending and receiving appropriate messages) and 
composite process is composed of other atomic and/or 
compose processes recursively. The intermediate node is 
used to indicate an event, such as an error, that affects the 
flow of the process. The normal node represents a 
primitive activity or control construct of the process, such 
as Perform (used for performing an atomic or a composite 
process), Set (used for setting the variable values), and 
Produce (used for producing output values).  
In addition, the fork/join node is used to split and 
combine the concurrent flow paths. The branch/merge 
node is used to control the divergence and convergence of 
multiple paths. The choice, any-order, precondition, and 
incondition nodes are kinds of special branch nodes in 
which the choice and the any-order nodes do not have 
associated branch conditions while the precondition and 
incondition nodes have associated branch conditions 
corresponding to the precondition and results of the 
process. The normal edge shows the execution order of 
activities in a process. The inter-process edge shows the 
flow paths between interacting processes. 
 
Figure 1. The core graphical elements of the test model 
3.2 The modeling elements of OWL-S control 
constructs 
Moreover, OWL-S introduces a set of control 
constructs that can be used to assemble a composite 
process and control the execution sequences of process 
activities, such as Sequence, Split, Split+Join, Any-Order, 
Choice, If-Then-Else, Repeat-While and Repeat-Until. 
Figure 2 shows the graphical representations of these 
control constructs based on their semantics.  
In Figure 2, the Sequence construct is modeled as a 
sequential execution of process components that are 
control constructs nested in the Sequence. The Split 
construct is modeled with a fork node followed by 
concurrent process components without synchronization. 
The Split+Join construct is similar to the Split construct 
except that the included concurrent process components 
are synchronized with a join node. The Repeat-While, 
Repeat-Until, and If-Then-Else constructs are reminiscent 
of control structures in traditional programming languages.  
Further, the Any-Order construct is modeled by 
multiple execution sequences of process components 
started with an any-order node and ended with a merge 
node, where each sequence represents a possible execution 
order of the components within the Any-Order construct. 
For an Any-Order construct containing n process 
components, it will have n! possible execution sequences. 
Figure 2 shows the model for an Any-Order construct 
containing two process components x and y. The Choice 
construct is similar to the control structure of switch-case 
in programming languages except that any of the 
components within the Choice construct may be chosen 
randomly for execution.  
 
Construct name Graphical model 
Sequence  
Split 
 
Split-Join 
 
Repeat-While 
 
Repeat-Until 
 
If-Then-Else 
 
Any-Order 
 
Choice C
 
Figure 2. The graphical models of OWL-S control constructs  
3.3 Models of preconditions and results 
The execution flow of an OWL-S process basically 
Intermediate 
Node
Start
Start Node
End
End Node
Choice 
Node
Incondition 
Node
Precondition 
Node
Normal Edge
Fork/Join 
Node
Branch/Merge 
Node
Normal Node Inter-process Edge
Any-Order 
Node
A
C P
I
899
Proceedings of the 2011 International Conference on Machine Learning and Cybernetics, Guilin, 10-13 July, 2011
  
Figure 5. The OCFG of the atomic process example in Figure 4 
3.5 Modeling an OWL-S composite process 
An OWL-S composite process is composed of 
atomic and/or other composite processes. Each composite 
process has a compositeOf property indicating the control 
structures of the composite. Particularly, a composite 
process can be considered as a tree whose internal nodes 
are control constructs and leaf nodes are invocations of 
other processes. A composite process has its own IOPR. 
However, unlike atomic process, it does not have an 
associated grounding.  
Figure 6 shows an example of a simple composite 
process CP in which the process CP has an input A, an 
output B, a precondition SWRL PreCon, and a result R 
(with an effect SWRL Effect). In addition, CP is composed 
of a Split+Join control construct that has two concurrent 
components: Perform and If-Then-Else. The If-Then-Else 
construct further contains two “produce” primitive 
activities. If the condition SWRL IFCon is true, Produce1 
will be executed; else Produce2 will be executed. Figure 7 
shows the OCFG for the process CP, the content of CP is 
modeled with the control constructs Split+Join and If-
Then-Else.  
 
< CompositeProcess rdf:ID="CP"> 
   <hasInput rdf:resource="#A"/> 
   <hasOutput rdf:resource="#B"/> 
   <hasPrecondition>SWRL PreCon…</hasPrecondition> 
   <composedOf> 
      <Split-Join> 
         <components> 
             <ControlConstructBag> 
                <list:first rdf:resource="#Perform1"/> 
                <list:rest> 
      <If-Then-Else rdf:ID="IFCC"> 
         <ifCondition>SWRL IFCon…</ifCondition> 
         <then>  
            <Produce rdf:ID="Produce1">…</Produce> 
         </then> 
         <else>  
            <Produce rdf:ID="Produce2">…</Produce> 
         </else> 
      </If-Then-Else> 
   </ ControlConstructBag> 
 </components> 
       </Split-Join> 
   </composedOf> 
   <hasResult> 
      <Result rdf:ID="R"> 
    <hasEffect> SWRL Effect…</hasEffect> 
      </Result>  
   </ hasResult> 
</ CompositeProcess> 
<Perform rdf:ID="Perform1">…</Perform> 
Figure 6. An example of a composite process 
 
 
Figure 7. The OCFG of the composite process example in Figure 6 
Note that the result of CP only has an effect since 
the inCondition and withOutput properties are unspecified. 
Moreover, in OWL-S, the Perform construct can be used 
to invoke a process. In such case, the inter-process edges 
can be used to connect the normal node representing the 
Perform construct to the start/end nodes of the OCFG 
corresponding to the invoked process.  
901
Proceedings of the 2011 International Conference on Machine Learning and Cybernetics, Guilin, 10-13 July, 2011
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/28
國科會補助計畫
計畫名稱: 嵌入式軟體結構化測試輔助工具之實作
計畫主持人: 劉建宏
計畫編號: 99-2220-E-027-008- 學門領域: 自由軟體暨嵌入式系統
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
本研究計畫所發展之自由軟體工具為 Eclipse 的外掛，開發人員在撰寫
ARM-based 嵌入式軟體程式時，可利用本工具自動產生函式呼叫圖、控制流程
圖、硬體介面變數資料流、及基礎測試路徑等資訊，以協助設計測試案例。此
外，開發人員亦可使用本工具撰寫測試案例，自動執行 C++單元測試，及檢視
測試結果與測試覆蓋率，以減輕測試工作的負擔。目前除了已將本計畫相關程
式之原始碼、技術報告、及使用者手冊上傳至國科會的 Open Foundry 網站外，
未來計畫繼續延伸本工具的功能，並將原始碼放置在 SourceForge，以推廣本
計畫的研究成果。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
