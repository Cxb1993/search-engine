 1
 
圖一、Overall Architecture 
 
植基於第一年的計畫成果之上，第二
年執行的重點在於開發 middleware 中 Job 
Scheduling 與 Resource Management 的功
能。如圖五所示，middleware 介於 Portal 
Service 與底層的 Globus 以及 Physical 
Resources 之間，經由 Job Scheduling 與
Resource Management 的運作，將不同種類
的工作適當的分配到不同類型的計算資
源，可以讓工作執行的效率更為提升。 
 
圖二、Middleware Architecture 
 
整體的開發與運算環境如圖三所示。Job 
Broker 是接收使用者工作要求的介面，收
到使用者的工作執行請求後，Broker 會將
此 request 送至 Job Scheduler，Job Scheduler
會根據目前的 Job Scheduling Algorithm，
以及加上查詢 Information Server 後的目前
資源狀態後，決定要將工作分配至哪一台
機器作執行。目前 Job Scheduling Algorithm
有兩種： 
 Random Algorithm 
 Optional Algorithm 
Random Algorithm 會由 Job Scheduler 去
亂數決定一台機器來做工作的執行。而
Optional Algorithm 則是以比較 CPU、
MEMORY、BANDWIDTH、LATENCY、
HardDisk 的大小所得權重不同，考量最高
積分的機器。舉例來說，如果要以 CPU 執
行運算工作 loading 比較重的 job 來說，可
以將 CPU 的權重比例設為 51%，而如果有
 3
 
圖六、Information Service 
 
圖七、Information Service 
 
圖八、NWS 
 
圖九、Web-based Information Service 
 
在如圖三的運算環境下，我們利用矩
陣相乘的工作計算，去評估 Middleware 的
Job Scheduler 效能。我們利用 2350*2350
的矩陣相乘運算，並且以兩種 scheduling 
algorithms 來做測試，圖十的結果是一百次
運算後平均之 Total Job Time 的實驗結
果。此 Optional algorithm 的權重設定為：    
cpu*0.5+mem*0.2+bw*0.1+late*0.1+hd*0
.1。 
由圖十一可以看出，利用 optional 
algorithm 的平均工作時間會縮短。使用者
或是在 job scheduler 可依 job 的特性，去設
定不一樣的權重值，來找到最適合的機器
去分派執行，以縮短整體工作時間，得到
最佳的工作效率。圖十五我們測試兩種不
同權重設定的 optional algorithm 的效能評
估。 
 
Better Weight =  
cpu*0.5+memory*0.2+latency*0.1+bandwi
dth*0.1+HDsize*0.1 
 
AverageWeight = 
cpu*0.2+memory*0.2+latency*0.2+bandwi
dth*0.2+HDsize*0.2 
 
因為矩陣相乘的程式需要大量的 CPU
運算，所以在此 Beter Weight 是對此種運
算較好的權重設定值，因此運算的效能結
