TR
1
TR
4 TR3
TR2
R8
R4
R7
R3
R6
R2
R5
R1
Figure 1. Radar transmitters/receivers layout [4].
on-line algorithms are presented and analyzed in Section 3.
Section 4 provides performance evaluation of the proposed al-
gorithms. Section 5 is the conclusion.
2 System Model and Problem Definition
System Model In many radar system designs, each TR is
capable of transmitting radar beams within a 120◦ arc. When
the surveillance space is of a wide angle, multiple TRs might
be needed to cover the entire space, as shown in Figure 1. As a
result, the surveillance space might be partitioned into regions,
where some regions might be covered by more than one TRs,
referred to as overlapping regions. In order to avoid the wast-
ing of radar resources, it is of paramount importance in avoid-
ing duplications of radar beam transmissions in overlapping
regions by multiple TRs and to have a good workload balance
among TRs. This paper focuses on phased-array radar systems
with four TRs, denoted by TR1, TR2, TR3, and TR4, as shown
in Figure 1. There are eight different regions in the surveil-
lance space. Regions R1, R2, R3, and R4 are only covered by
TR1, TR2, TR3, and TR4, respectively. Moreover, region R` is
covered by both TR`−4 and TR(`−3) mod 4 for ` = 5, 6, 7, 8.
A typical workload of phased-array radar systems consists
of High-Priority Search, Track Conrmation, and Track tasks.
Track tasks could be classied as High Precision Track, Pre-
cision Track, and Normal Track tasks. As shown in [8], we
can model a High-Priority Search task as a periodic real-time
task with a specied period (denoted by P ), a Track Conrma-
tion task as an aperiodic real-time task with a specied relative
deadline (D), and a Track task as a semi-periodic real-time
task with a specied lower bound of the task period (PL).
For a (dwell) task τi, let exi , ewi , eri , and Ai denote the dwell
transmitting time, the dwell round-trip delay, the dwell receiv-
ing time, and the average TR power consumption of τi, re-
spectively. We use the remodeling method proposed in [5] to
satisfy the overheating constraints of TRs. The cooling time
eci of τi could be derived based on exi , ewi , eri , and Ai. When
τi is a High-Priority Search task, its utilization ui is dened as
ui =
eci +e
x
i +e
w
i +e
r
i
Pi
, where Pi is the period of τi. When τi is a
Track Conrmation task, its utilization is ui = e
c
i+e
x
i +e
w
i +e
r
i
Di
,
where Di is the relative deadline of τi. When τi is a Track
task, the utilization of τi is ui = e
c
i +e
x
i +e
w
i +e
r
i
PL
i
, where PLi is
the lower bound of the task period.
Problem Definition Because the radar system does not
know the information about incoming tasks in the future, the
load of each TR in the system must be kept on a lower state
in order to process arrival tasks. If an on-line algorithm can
minimize the maximum load of TRs of the system in run time,
it will have more available resources for incoming tasks in the
future. Therefore, the number of the dropped tasks would be
minimized.
Since an object comes into the radar system in an on-line
fashion, dwell task assignments should be determined by on-
line algorithms, which do not know future events. Suppose
that a dwell task τi arrives the radar system at time ai and de-
parts from the system at time di. The system does not know
dwell task τi before ai. The departure time di of task τi might
be known when τi arrives at ai or might be unknown before
time instant di. Throughout the paper, we focus our discus-
sions on the case in which di is unknown to the system before
di for every task τi, while the algorithms in this paper can be
applied to the other case with the same performance guaran-
tees. Once a dwell task τi has arrived, the track-able TR set,
denoted by Ti, of τi is the set of TRs that can handle τi. For
example, if τi arrives in region R5, Ti is {TR1, TR2}. For an
object moving from a region in the surveillance space to an-
other at time instant t, the corresponding dwell task of the ob-
ject departs at t, and another dwell task is created and arrives
at t. The problem explored in this paper is as follows:
Definition 1 On-line Dwell Task Assignment problem: Given
a set of dwell tasks with unknown arrival times, the problem is
to assign each τi of the dwell tasks at its arrival time ai onto
a TR in Ti so that the maximum (instantaneous) utilization in
the TRs in the system is minimized.
For an on-line problem, the quality of an on-line algorithm
for the problem is evaluated by its competitive ratio [3]. Sup-
pose that the dwell task assignment derived by an on-line de-
terministic algorithm A has the maximum utilization UA,t(I)
of the TRs at time t for an input instance I , where U ∗max,t′(I)
is the maximum utilization at time t′ for an optimal solution
of I with all information of the dwell tasks, including the ar-
rival time and the departure time, in a priori. An on-line algo-
rithmA is said to be an α-competitive algorithm if and only if
UA,t(I) ≤ αU
∗
max,t′(I) + β for any input instance I , where β
is a constant [3].
The following theorem shows the lower bound of the com-
petitive ratio of any deterministic algorithm for the On-line
Dwell Task Assignment problem.
Theorem 1 There does not exist any deterministic (2 − ²)-
competitive algorithm for the On-line Dwell Task Assignment
problem for any ² > 0.
Proof. Consider two different input instances I and I ′, in
which both have only two dwell tasks. For both I and I ′, the
rst dwell task arrives at time 0 with utilization γ in region
R5 covered by both TR1 and TR2, and the second dwell task
arrives at time δ (δ > 0) with utilization γ, too. The second
dwell task for I (I ′, respectively) is in region R1 (R2, respec-
tively) covered by TR1 (TR2, respectively). Any deterministic
algorithm to assign the rst task for both I and I ′ at time 0
would either assign the task to either TR1 or TR2. As a result,
the algorithm would lead to an assignment with maximum uti-
lization of TRs equal to 2γ for input instance I or I ′. The
optimal algorithm with all information of the arrival time of
the two tasks would assign each of the two tasks on TR1 and
2
Algorithm 2 FIXED
Input: τi, t;
Output: an assignment of τi to one of the TRs in Ti;
1: assign τi with Ti = {TRj} or Ti =
{
TRj , TR(j mod 4)+1
}
to TRj ;
Task Execution Time (ms) Average Power Period/
(cx,cw , cr) Consumption (kW) Deadline(ms)
HPS (1, 4, 1) 5 800
TC (1, 4, 1) 5 500
HPT (0.5, 1, 0.5) 4 125
PT (1, 2, 1) 4 300
NT (1, 2, 1) 3 500
Table 1. Task Parameters.
assigns the arriving task τi at time instant t with Ti = {TRj}
or Ti =
{
TRj , TR(j mod 4)+1
}
to TRj . The algorithm is
denoted by Algorithm FIXED and presented in Algorithm 2.
Although Algorithm FIXED looks conservative, the following
theorem shows that Algorithm FIXED is a 2-competitive algo-
rithm for the On-line Dwell Task Assignment problem. Ac-
cording to Theorem 1, Algorithm FIXED is the best on-line
algorithm to defeat crucial adversaries.
Theorem 4 Algorithm FIXED derives a 2-competitive solu-
tion for the On-line Dwell Task Assignment problem.
Proof. Suppose that the dwell task assignment derived by
Algorithm FIXED has the maximum utilization U ∗(I) among
the TRs at time t for an input instance I . To prove the 2-
competitive ratio, we will show that any dwell task assignment
at time instant t for input instance I must has a TR whose
utilization is no less than 12U
∗(I). Suppose that TRj is the TR
with utilization equal to U∗(I) at time instant t in the solution
derived from Algorithm FIXED for I . Distinct from Algorithm
GREEDY, the dwell tasks in TRj at time instant t only have two
types: (1) dwell tasks that can only be covered by TRj , and (2)
dwell tasks that can be covered by TR(j mod 4)+1 and TRj .
Suppose that the total utilization of these two types of dwell
tasks are denoted by U †1 and U
†
2 , respectively. A dwell task
assignment at time t for the input instance must have a TR
whose utilization is at least
max
{
U
†
1 ,
U
†
1 + U
†
2
2
}
≥
1
2
U∗(I),
and the proof is done.
By Theorem 1, the tightness of the analysis of Algorithm
FIXED can be obtained directly.
4 Performance Evaluation
The purpose of this section is to provide evaluation results
to show the capability of the proposed Algorithms FIXED and
GREEDY in Section 3. In the experiments, we consider ve
radar task types: High-Priority Search, Track Conrmation,
High-Precision Track, Precision Track, and Normal Track.
Task parameters are dened based on the parameter setup in
[6, 10]. The energy threshold is dened as 600J , and the en-
ergy look-back period is 200ms. These parameters are shown
in Table 1.
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
 1  2  3  4  5  6  7  8  9  10  11  12  13  14  15
M
ax
im
um
 u
til
iz
at
io
n
Arrival rate
GREEDY
FIXED
(a) ~P1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
 1  2  3  4  5  6  7  8  9  10  11  12  13  14  15
M
ax
im
um
 u
til
iz
at
io
n
Arrival rate
GREEDY
FIXED
(b) ~P2
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
 1  2  3  4  5  6  7  8  9  10  11  12  13  14  15
M
ax
im
um
 u
til
iz
at
io
n
Arrival rate
GREEDY
FIXED
(c) ~P3
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 1
 1  2  3  4  5  6  7  8  9  10  11  12  13  14  15
M
ax
im
um
 u
til
iz
at
io
n
Arrival rate
GREEDY
FIXED
(d) ~P4
Figure 3. The maximum workload.
The layout with four TRs as shown in Figure 1 is consid-
ered. The experiments are done based a similar TR congu-
ration on a ship [4]. In each region of the layout, there are
always four High-Priority Search (HPS) tasks, and at most
one Track Conrmation (TC) task is generated in a random-
ized manner. In the experiments, we reserve a xed ratio
of resources in each TR for handling High-Priority Search
due to the periodic characteristics. The number of track
tasks, i.e., High-Precision Track (HPT), Precision Track (PT),
and Normal Track tasks (NT), varies based on the utiliza-
tion setup of each task set. Experiments are done with dif-
ferent probability settings of the eight regions where a task
is. The probability of a task being in a region is accord-
ing to four pre-determined eight-tuple probability settings,
in which the i-th element denotes the probability of a task
being in region Ri, and these tuples are: ~P1 = ( 18 ,
1
8 ,
1
8 ,
1
8 ,
1
8 ,
1
8 ,
1
8 ,
1
8 ),
~P2 = (0.2, 0.2, 0.2, 0.2, 0.05, 0.05, 0.05, 0.05),
~P3 = (0.05, 0.05, 0.05, 0.05, 0.2, 0.2, 0.2, 0.2), and ~P4 =
(0.2, 0.05, 0.2, 0.05, 0.2, 0.05, 0.2, 0.05). The rst probability
setting ~P1 represents an even distribution for all the regions.
The second and the third probability settings, i.e., ~P2 and ~P3,
are designed for the cases in which most tasks are in non-
overlapping and overlapping regions, respectively. The last
probability setting is designed for the case in which there are
two overlapping regions and two non-overlapping regions are
with higher probability.
10 task sets are evaluated for each simulation algorithm for
each task-set setup. Their results are averaged. In the simula-
tion, the number of arrival track tasks per two seconds ranges
from 1 to 100. The types of newly arrival tasks are randomly
selected among High-Precision Track, Precision Track, and
Normal Track. The duration of each task is randomly dis-
tributed in the range of [3000, 6000] ms. For an incoming task,
the algorithms would determine whether there is an available
TR for it. If not, the task will be dropped. The simulation
time is 100, 000 seconds. The primary performance metrics
are the maximal utilization and the task dropping ratio. The
maximum utilization is the maximum instantaneous utilization
4
