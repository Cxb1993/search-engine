 2
中文摘要 
隨著 IEEE 802.11p標準的制定，車載通訊已被視為實現時尚行動生活的方式之一。本計畫
的目標是探討如何在極少路側單元(roadside units)之情況，在短時間內利用車載之間有限的頻
寬，有效率地將視訊傳播到最近的路側單元或是其他車輛。為連結行動隨意式網路與網際網
路，我們需修改行動隨意式網路(MANET)路由協定，使得在行動隨意式網路中的移動設備可與
有線網路中的主機互相通訊，因此，閘道器或基地台需兼具處理 IP協定組與MANET協定組，
在網路模擬器 NS2中，已針對卡內基美濃大學的無線網路模型作了相對應的擴充，以實現有線
網路與無線網路的互連，以及具有行動 IP功能。然而在 NS2中，目前只有對於 DSDV 協定提
供有線與無線的互連。Hamidian 和 Nilsson 提出一個 AODV協定的修改版本，稱為 AODV+，
具有發現存取網際網路所需路徑的遶送功能。雖然 AODV+所提出的擴充方法是通用的，並可
以應用至其他 MANET 協定，但對於像 AOMDV 協定能需要特殊的考量才能達到存取網際網
路的目的，因為 AOMDV 協定是找到一條路徑而是找到多條路徑。AM-AOMDV、R-AOMDV、
S-AOMDV和 RBVT為最近針對車載網路所提出的路由協定，前三者為 AOMDV的改進版本，
而後者則需要有地圖。鑑於 AOMDV之衍生協定在車載網路上之可行性，我們提出 AOMDV+
協定，擴充 AOMDV 協定，使其能存取網際網路。AOMDV+提供有先行式、反應式與混合式
的閘道發現策略，除了基於 AOMDV 之外，AOMDV+與 AODV+尚有兩個主要差異：
(1)AOMDV+可以根據目的位址判別其是否須經由閘道；(2)在發現閘道過程，AOMDV+允許中
途的無線節點回報路由回應。我們也提出多重路徑路由協定在多閘道情況可能發生路由迴路的
問題與解決方法。 
我們以 NS2實作 AOMDV+協定，以 IEEE 802.11p的實體層與鏈結層參數在假想的高速公路車
載網路上模擬固定速率的視訊封包傳送，與 AODV+進行包括封包遺失率、延遲時間，路由額
外負擔的效能比較。從實驗結果可觀察到對於各種資料負載情形，AOMDV+的封包遺失率與延
遲時間都比 AODV+好，而其路由額外負擔與 AODV+相當。目前進行實驗的 AOMDV+僅擴充
基本的 AOMDV協定，並未使用地理資訊，未來，我們也可以納入 AM-AOMDV和 R-AOMDV
等改良機制以及利用地理資訊，使 AOMDV+的傳送效能更加提昇。 
關鍵字：行動隨意式網路, 車載隨意式網路, AOMDV, 有線網與無線網互連, 多重路徑路由協定 
 4
1. Introduction 
Accompanied with the coming IEEE 802.11p standard, vehicular communications are considered 
as a way to realize a fashion life-style of mobility.  In respect to the success of Wifi devices, it is 
expected that every car will equip with an intelligent traffic system (ITS) using the modified 802.11 
technology in the near future. In face of the high mobility of vehicular ad-hoc networks (VANETs), 
traditional routing protocols for mobile ad hoc networks (MANETs) have encountered the problem of 
poor performance in VANETs. 
The Internet has significantly penetrated our daily activities since it was first released to the 
public in the mid 1980’s. Driven by the user demands, a challenge arises from the integration of 
mobile wireless networks and the Internet.  
In contract to text, video streaming is more reliable and can be understood more instantly. In case 
of displaying emergency accident or ambulance information in a moving car, video streaming is 
mandatory. However, while a car transmitting/receiving the emergency information in an accident, 
road jam usually occurs and many cars are trying to share the limited communication bandwidth 
simultaneously.  Moreover, the VANET may be disconnected temporarily. These situations make it 
harder to transmit the continuous video stream to the destination. 
2. Objective 
The objective of this project is to investigate how to utilize the limited bandwidth to transit video 
streams to roadside units or other car under the environment of few roadside units.  AODV [1] and 
GPSR [2] are two a well-known reactive and position-base MANET routing protocols, respectively. 
Although they outperform many other routing protocols, Naumov et al. [3] has shown that the 
performances of AODV and GPSR protocols are poor when applied to VANETs. 
To interconnect MANETs and the Internet (so-called wired-cum-wireless), we should modify the 
MANET routing protocols so that mobile devices in a MANET and hosts in a wired network can 
communicate each other.  To achieve this goal, gateways (or base-stations) should understand both IP suite 
and MANET protocol stack.  In NS2, extensions made to CMU’s wireless model [4] have been proposed for 
wired-cum-wireless scenarios and mobile IP. However, only DSDV protocol [5] is extended in NS2.  
Hamidian and Nilsson [6][7] proposed a modified version of AODV protocol, called AODV+, with route 
discovery schemes for Internet access. Although these extensions are general and can be applied to other 
MANET protocols, specific considerations are needed for extending multipath routing protocols, such as 
AOMDV [8], for Internet access because these protocols explore multiple paths rather than a single path.  
In this project, we propose the AOMDV+ scheme, which adopts some concepts from AODV+, to extend 
AOMDV scheme for Internet access. We also take the experiments on the effect of heavy packet-traffic load 
such as video streaming in the VANETs. 
3. Previous Work 
Specific routing protocols for VANETs include positions based routing protocols (such as GSR[9], 
A-STAR[10], GPCR[11] and CAR[12]), vehicle-motion-information-based protocols (such as MOVE [13], 
MaxProp [14], MURU [15]), and link-quality-based protocols (such as GPSR-L [16], ACAR [17]). Due to 
high mobility of VANET, most of the routing protocols are reactive.  
AM-AOMDV [18]、R-AOMDV[19]、S-AOMDV[20] and RBVT[21] are routing protocols 
proposed recently for high-mobility ad-hoc networks. RBVT protocols leverage real-time vehicular traffic 
 6
process if needed.  Each route has a lifetime which is prolonged if the route keeps forwarding packets or 
updated by RREQ and RREP messages. When a route expires, it will be purged. 
3.2 AODV+ 
AODV+ introduces a default route for a node to route packets towards destination outside the MANET. 
Accordingly, if the destination is a wired node, the next hop of the route is a default route, which in turn has a 
gateway as its next hop. Therefore, the packets can be sent towards the gateway and reach their destinations. 
There might be several reachable gateways for a mobile node at some point of time. The mobile node has to 
decide which gateway to use in terms of number of hops or other potential criteria that could be used.  In the 
route discovery phase, when a gateway receives a RREQ, it consults its routing table for the destination 
address in the RREQ message. If the address is not found, the gateway sends a RREP with an ‘I’ flag 
(RREP_I) back to the originator of the RREQ to indicate the RREP message is sent from a gateway. If a node 
cannot receive any corresponding RREP after the first network-wide search, AODV+ scheme will think that 
destination is outside the MANET. 
AODV+ provides three different approaches for gateway discovery: (1) proactive, (2) reactive, and (3) 
hybrid. The proactive gateway discovery is initiated by the gateway itself which broadcasts a gateway 
advertisement message periodically. The mobile nodes that receive the advertisement create or update the 
route entry for the gateway and rebroadcast the message.  The reactive gateway discovery is initiated by a 
mobile node that is to find a route to a gateway. The mobile node broadcasts a RREQ with an ‘I’ flag 
(RREQ_I) for this purpose. Intermediate mobile nodes that receive a RREQ_I are not allowed to answer it but 
just rebroadcast it.  When a gateway receives a RREQ_I, it unicasts back a RREP_I. The hybrid approach 
defines an advertisement zone for each gateway to limit the range of gateway advertisements. 
3.3 AOMDV 
Ah hoc On-demand Multipath Distance Vector (AOMDV) routing protocol [8] is an extension of the 
single route AODV protocol. It uses the information available in the RREQ and RREP routing messages of 
the AODV protocol to find multiple disjoint and loop-free routes. In the routing table, an entry to a destination 
may contain multiple disjoint paths. Two paths are called link disjoint only if their first hops and last hops are 
both different. AOMDV protocol uses the same concept of AODV protocol to guarantee loop-free routes by 
checking the destination sequence numbers and the hop counts. But the difference is that AOMDV use the 
advertisement hop counts instead of real hop counts. The advertisement hop count to a specific destination is 
set to the length of the longest available path for the destination at the time of first RREP sent for that 
destination associated with the newly sequence number. Multiple paths can be inserted into the routing entry 
for the same destination as long as they satisfy the loop-free conditions and the disjoint conditions, and the 
number of paths does not exceed the limit.  
For route maintenance, AOMDV use an error flag on each route, instead of precursor lists in AODV 
scheme, to minimize the RERR broadcasting messages upon link failure. AOMDV also includes a mechanism 
to salvage packets forwarded over failed links by re-forwarding them over alternate paths. 
In addition to providing multiple paths for fault-tolerance and load balancing, AOMDV outperforms 
AODV and many multipath MANET routing protocols in many aspects, such as shorter end-to-end delay and 
lower routing overhead. Due to its elegancy, many invariants of AOMDV have been developed in recent years, 
such as AM-AOMDV[18], A2AOMDV[22], CH-AOMDV[23], EAOMDV[24], OAOMDV[25], 
Q-AOMDV[26], R-AOMDV[19], S-AOMDV[20], SPDA[27], ZD-AOMDV[28], etc. 
 8
order of their creation.  However, we observed that routing packets to a farther gateway usually gets more 
losses. If there are multiple available gateway routes for forwarding data packets to a foreign node, the first 
path from the entry of the shortest (primary) gateway route is chosen. 
Type Flags Reserved Hop Count Destination Address 
Destination Sequence Number Source Address Source Sequence Number RREQ ID RREQ first Hop 
(a) RREQ format 
Type Flags  Reserved Hop Count Destination Address 
Destination Sequence Number Source Address Lifetime RREP ID RREP first Hop 
(b) RREP format 
Fig2. Format of RREQ and RREP packets in AOMDV+. 
(3) Route discovery 
When there is a packet without any route to forward, the node starts route discovery for the destination.  
In AOMDV+, the RREQ and RREP packets are same as those in AOMDV except that the RREQ_I and 
RREP_I flags are added into RREQ and RREP packets, respectively, as shown in Fig. 2. If the destination is 
within the same subnet, the node broadcast a RREQ message to find routes.  However, if the destination is 
foreign, the node will broadcast a RREQ_I with DEFAULT as the destination address.  Unlike AODV+, our 
scheme can determine a node foreign either by examining the node address directly or by a network-wide 
search. We deal with RREQ messages in a similar manner as AOMDV. When a node receives a RREQ_I, it 
can unicast a RREP_I back to the source through the reverse path if it is a gateway or its primary gateway 
route is fresh enough (i.e. the destination sequence number of the shortest gateway route is greater than or 
equal to the destination sequence number of the RREQ_I); the destination field of a RREP_I is filled with the 
gateway address. When an intermediate node receives a RREP_I message, it first handles the message like a 
RREP message. The message is accepted for update only if the destination sequence number is higher than 
that of the corresponding gateway route or the destination sequence number is the same and the advertisement 
hop count is shorter than that of the corresponding gateway route and inserting the route will not violates the 
disjoint and capacity constraints. If there is no corresponding gateway route before, the node will accept this 
RREP_I message. If the RREP_I is accepted, the path is inserted into the default route entry and the message 
is forwarded to the source of RREQ_I. Otherwise, the RREP_I message is discarded. As we will discuss 
below, to avoiding routing loop, before forwarding the RREP_I message, the node determines whether the 
newly learned gateway route becomes the primary gateway route or not. If so, it forwards the RREP_I, 
otherwise it forward a RREP message derived from the RREP_I message without the ‘I’ flag. When a node 
receives a RREP message without ‘I’ flag being set, it will not insert the path as a gateway route even thought 
the destination is a gateway. 
Like AOMDV, whenever an intermediate node replies or forwards a RREP (or RREP_I) message, it sets 
the error flag of the route to the destination (or gateway) to indicate that it should send a RERR message once 
the route has been invalid. The error flag of the default route should never be set because the default route is 
changed according to the gateway routes. 
One issue is about the destination sequence number of the RREQ_I message. For any route, the 
destination sequence number always starts from an initial minimum value because a node cannot know the 
sequence number of the destination in prior. When a node needs to send a RREQ message, it looks up the 
routing table for the routing entry to the destination to find the sequence number to use. However, it needs 
 10
the last request-hop-count shorter than the threshold of expanding ring search. 
 
Fig.3.  A routing-loop scenario (arcs: route dependencies; numbers: hop count). 
Another cause of creating transient dead-ends is due to alternate routes. Fig. 4 shows such a scenario.  In 
this scenario, node A is a source sending data to a foreign node. The route to gateway GW1 is the primary 
gateway which are used to forwarding to data packets, while the route to gateway GW2 is an alternate route 
(see Fig. 4(a)). At time t1, the link between nodes B and C is broken. Since the alternate route is not an active 
route, this event cannot be detected by the link layer; it can be detected after missing three HELLO messages, 
which however is a very long time (see Fig. 4(b)). Soon after t1, the link from node A to GW1 is also broken. 
Node A will detect this event quickly by the link layer and take the alternate route as its new primary gateway 
route. Therefore, data packets will be sent to the dead-end node B (see Fig. 4(c)). Node B finally detects the 
adjacent broken link by the link layer. The situation can be worse if node B does not send a RERR message 
immediately because either node B evokes a local repair or the RERR message is lost. 
 
 
Fig. 4. Dead-end problem due to a broken alternate route (arcs: route dependencies; numbers: hop count). 
The problem can also occur in AOMDV in case the destination is a mobile node.  The keep-alive 
messages for alternate routes proposed by AM-AOMDV may alleviate this problem. However, this 
mechanism cannot still solve this problem and requires more routing overheads. We think that accurate 
lifetime estimation can alleviate this problem with little overhead. For space limitation, we will not discuss 
this approach here. 
5. Experiment Results 
We use network simulator NS-2 (version 2.35RC6) to simulate AODV+ and AOMDV+ schemes. The 
 12
Interface queue length Drop/Tail PriQueue of 50 
5.2 Simulation results 
We compare AODV+ and AOMDV+ both with reactive approach without using Hello and Advertisement 
messages because the proactive or the hybrid approach, which broadcasts Hello and Advertisement messages, 
does not perform well with respective to high mobility in VANET. 
(1) Packet loss ratio 
Fig 6 shows the histogram of packets received by the host during the simulation period using AODV+ 
and AOMDV+, respectively, from 30 CBR sources. We can observe that no packets are received during the 
first 3 seconds. The cause is that AODV+ cannot determine the host a foreign node before trying a 
network-wide search. In contract, AOMDV+ can know the host foreign quickly because it can use the same 
direct method as DSDV by checking whether the address of the destination is in different subnets or not. 
 
(a) AODV+ 
 
(b) AOMDV+ 
Fig. 6. The histogram of packets received by the host from 30 CBR sources. 
Fig. 7 shows the packet loss ratio with respective to different traffic load.  We can observe that 
AOMDV+ outperforms AODV+. We also observe that the loss ratio increase near linearly as the number of 
CBR sources increases. 
 
Fig. 7. Packet loss ratio. 
(2) Average end-to-end delay 
For each CBR packet reaching its destination, the end-to-end delay is difference between the sending 
time at the source and the receiving time at the destination. The average end-to-end delay is the total 
end-to-end delay divided by the total number of CBR packets reaching their destinations. Fig. 8 shows the 
average end-to-end delays of the delivered data packets. Since only the delivered packets are taken into 
 14
 
Fig. 9. Average route discovery delay. 
 
Fig.10 Routing overhead. 
In the future, we want to promote the scheme to support mobile IP so that fixed nodes can send packets to 
any mobile node and support route distribution so that two mobile nodes can also communication through the 
wired network more efficiently. 
Reference 
[1] C. E. Perkins and E. M. Royer, “Ad hoc on-demand distance vector routing,” in Proc. 2nd Workshop on Mobile 
Computing Systems and Applications. New Orleans, LA, USA: IEEE, February 1999, pp. 90–100. 
[2]  B. Karp and H. T. Kung, “GPSR: greedy perimeter stateless routing for wireless networks,” in MobiCom ’00: 
Proceedings of the 6th annual international conference on Mobile computing and networking, Boston, MA, USA, 
August 2000, pp. 243–254. 
[3]  Naumov, R. Baumann, and T. Gross, "An evaluation ofinter-vehicle ad hoc networks based on realistic vehicular 
traces," in Proc. 7th ACM International Symposium on Mobile Ad Hoc Networking and Computing (MobiHoc), 
Florence, Italy, 2006, pp 108-119.  
[4]  S. McCanne and S. Floyd. “The network simulator – ns-2,” www.isis.edu/nsnam/ns/. K. Fall, K. Varadhan “The ns 
manual”. 
[5]  C. E. Perkins and P. Bhagwat, “Highly dynamic destination-sequenced distance-vector (DSDV) routing for mobile 
 16
Real-Time Vehicular Traffic Information, IEEE Transactions on Vehicular Technology, Volume: 58 , Issue: 7, 2009. 
[22] Ducksoo Shin, Jonghyup Lee, Jaesung Kim, and Jooseok, “A2OMDV : An Adaptive Ad Hoc On-Demand 
Multipath Distance Vector Routing Protocol Using Dynamic Route Switching,” Journal of Engineering Science and 
Technology Vol. 4, No. 2 (2009) 171 – 183. 
[23] Chen, Xiaoqin and Jones, Haley and Jayalath, Dhammika (2010) Channel aware routing in MANETs with route 
handoff. IEEE Transactions on Mobile Computing. (In Press) 
[24] Sujata V.Mallapur, Sujata .Terdal, Enhanced Ad-Hoc on Demand Multipath Distance Vector Routing Potocol 
(EAOMDV), (IJCSIS) International Journal of Computer Science and Information Security, Vol. 7, No. 3, March 2010. 
[25] YuHua Yuan  HuiMin Chen  Min Jia. An Optimized Ad-hoc On-demand Multipath Distance Vector(AOMDV) 
Routing Protocol, 2005 Asia-Pacific Conference on Communications, 5-5 Oct. 2005,pp. 569 – 573. Location: Perth, 
WA. 
[26] Chunxue Wu, Fengna Zhang, Hongming Yang, A Novel QoS Multipath Path Routing in MANET, JDCTA 
[27] Wesam AlMobaideen, SPDA: Stability Based Partially Disjoint AOMDV, European Journal of Scientific Research, 
ISSN 1450-216X Vol.27, No.3 (2009), pp.342-348. 
[28] Nastooh Taheri Javan, Reza Kiaeifar, Bahram Hakhamaneshi, Mehdi Dehghan, "ZD-AOMDV: A New Routing 
Algorithm for Mobile Ad-Hoc Networks," icis, pp.852-857, 2009 Eigth IEEE/ACIS International Conference on 
Computer and Information Science (icis 2009), 2009, Pine City Hotel, Shanghai, China June 01-June 03. 
[29] Suhua Tang, Bing Zhang, Masahiro Watanabe, Shinsuke Tanaka, A Link Heterogeneity-Aware On-Demand 
Routing (LHAOR) Protocol Utilizing Local Update and RSSI Information, IEICE Trans. on Communications  
Vol.E88-B, No.9, 2005, pp.3588-3597. 
[30] Arijit Khan, Shatrugna Sadhu, and Muralikrishna Yeleswarapu, “A comparative analysis of DSRC and 802.11 over 
Vehicular Ad hoc Networks, in Dept. of Computer Science, University of California, 2008. 
[31] Centre for Applied Informatics (ZAIK) and the Institute of Transport Research German Aerospace Centre, 
“Sumo – simulation of urban mobility,” http://sumo.sourceforge.net/. (version 0.12.0) 
[32] P. Ratanchandani, R. Kravets,  A hybrid approach to Internet connectivity for mobile ad hoc networks, in IEEE 
Wireless Communications and Networking Conference (WCNC) 2003. vol.3, pp. 1522 – 1527, 20-20 March 2003, New 
Orleans, LA, USA. 
[33] O. Abedi, R. Berangi, and M.A. Azgomi, “Improving Route Stability and Overhead on AODV Routing Protocol 
and Make it Usable for VANET”, 29th IEEE International Conference on Distributed Computing Systems Workshops, 
2009. 
[34] Shimin Sun, Jonghyun Kim, Yunho Jung, and Keecheon Kim; “Zone-based Greedy Perimeter Stateless Routing 
for VANET”, International Conference on Information Networking, 2009. 
[35] Yufeng Chen, Zhengtao Xiang, Wei Jian, Weirong Jiang, “A Cross-Layer AOMDV Routing Protocol for V2V 
Communication in Urban VANET”, 5th International Conference on Mobile Ad-hoc and Sensor Networks, 2009. 
[36] 林錦財, 黃建霖 “車載網路實驗之彎道交通模擬”accepted by UHC 2010, Kun Shan University, 2010. 
 18
論，其首先必須能夠模擬交通工具的移動情形，此包括道路拓樸，交通號誌，以及駕駛的習慣等等；另一方面，研究者必
須將交通工具的移動過程納入網路通訊模擬器的節點資料中。 
目前在模擬交通工具動態方面有 DynaChina[19]、DynaTaiwan[7] 、VanetMobiSim[8]、和 Sumo[5][6]等工具，其中 Sumo
和 VanetMobiSim係屬於公開的微觀型車載模擬器，可以模擬個別車輛的移動情形，而 DynaTaiwan和 DynaChina是巨觀型
模擬器，著重在整體車流的即時動態交通分析。在模擬網路通訊方面則有 NS2/NS3[2][3][4]、GloMoSim [9]、 
Jist/SWANS[10][11]、NetSim[12][13]、OMNet++[15]、OPnet[16][17]、Qualnet[18] 等，其中 NS2 是目前在此領域運用最廣
的公開模擬器，其在有線網路及無線網路環境的模擬支援相當完整，提供有實體層(Nakagami 傳播模式等 )、鏈結層(IEEE 
802.3, 802.11, 802.16等)、網路層(DSR、DSDV、AODV、AOMDV等)，以及傳輸層(如 TCP、UDP、 RTP)的各種協定，
以及一些產生封包流量的工具，其圖形介面的網路動畫產生器 NAM(Network Animator)可以用以觀察傳輸的過程及品質。 
Sumo可以真實模擬出交通流量及交通號誌，並達到真實的車輛交通網路模擬環境，其使用方式，我們會在第二節會做
簡要的介紹。 
MOVE [1] 是使用 Java將 Sumo 與 NS2結合的一套工具程式。透過這套工具，使用者可以快速地將交通動態轉換成
NS2所能使用的節點移動描述檔。其實，在 Sumo軟體中亦提供了 TraceExporter進行同樣的轉換。雖然 Sumo支援彎道的
敘述，然而不管是使用 MOVE 的 NetExporter或是使用 TraceExporter，都必須使用許多小段直線道敘述來組成彎道，對於
建構拓樸上都不方便。 
為了克服上述的缺點，我們修改了 Sumo 軟體中的 TraceExporter 工具使其能直接對彎道敘述做轉換。我們也修改了 
TraceExporter 的座標計算，使其能正好符合 NS2 的座標範圍。 
2. 模擬器的使用 
結合 Sumo和 NS2的車載通訊模擬實驗分為兩大步驟：(1)Sumo交通模擬：透過 Sumo建構路網，並得到每輛車的位
置、速度和行進方向；進行步驟如圖一。(2) NS2網路模擬：經由 Sumo路網模擬得到的資料，透過 NS2做通訊模擬以驗證
協定效能；進行步驟如圖二。 
Sumo交通模擬又區分為以下三個部份： 
(1)創建地圖：經由描述路口與道路屬性，使交通路網貼近現實情境。 
(2) 產生車流量：藉由使用者設定車輛流量或是隨機產生流量，配合交通路網，產生出車輛行進路線。 
(3) 產生車輛追蹤記錄：藉由 Sumo交通模擬器，產生出各車輛出現時間、消逝時間、行進路線、及在各個時間點的位
置與車速。此資料可被轉換納入 NS-2模擬網路情境描述檔之中。 
2.1地圖的描繪 
Sumo 以 XML 語法描述道路模型，首先須以節點(Node)描述檔(node.xml)定義各個交接路口，然後，以道路(Edge)描述檔
(edge.xml)定義各條道路。 
在 node.xml檔中，Node的屬性包括識別名稱、座標、以及交通號誌（traffic light）種類，其定義格式如下： 
<nodes> 
<node id="<STRING>" x="<FLOAT>"  
y="<FLOAT>" [type="<TYPE>"]/> 
... 
</nodes> 
 20
 
圖二： TraceExporter在 NS2中的地位 
  
 
圖三： 彎曲道路的範例 
透過數量夠多的中間點 X座標與 Y座標便能繪出近似所需的彎曲道路。注意，使用 shape所定義的道路途中並無 Node 
(路口)。 
設定 Node和 Egde已可繪出我們理想的地圖，但我們必須定義道路的性質，使 Sumo能模擬出符合的車流情況。我們
可以直接對 Edge設定相關屬性，或先定義 Type 物件，再以 Edge的 type屬性設定道路的性質。相關的屬性包括：nolanes
屬性用以設定此道路的線道(lane)數目，如雙線道或是三線道；speed 屬性用以設定車輛行駛道路時的最高速度，速度單位
為公尺/秒；priority屬性則是設定此道路車輛通過的優先權。 
除了 edge.xml與 type.xml之外，Sumo也可以定義 Connection描述檔，限制 Edge與 Edge的連接關係，甚至限制只能
由特定的 Lane進入下一車道的某個 Lane。因為設定 Connection較複雜且非本篇論文的重點，在此不再贅述。 
在建置好 Node描述檔和 Edge描述檔(與 Type描述檔)之後，透過 netconvert程式進行編譯，產生路網描述檔(net.xml)。
netconvert是 Sumo提供的工具之一，其首先根據 Node和 Edge的關係，確定節點的交接處，接著算出車道的基準線和可能
產生的線道(lane)，第三步則是透過 Edge和 Edge連接關係，計算出入口 Lane或是出口 Lane的端點座標。 
2.2車輛移動的描繪 
在交通模擬中，最主要的還是如何精確地模擬車輛移動、車輛的產生及行走路線。Sumo目前對於產生車流提供有五種
方式：a) 明白的指定車輛的行走路徑， b) 使用流量(flows)與轉道率(turn ratio)， c) 隨機產生路徑，d)匯入 OD-矩陣或流
量定義，以及 e) 匯入自訂路徑。我們僅舉第二種與第三種方式為例，提供讀者參考。 
2.2.1 使用隨機方式產生車流 
 22
 
圖六：  Flow表示圖 
 
2.3 產生車輛追蹤記錄 
將 Netconvert 編譯產生的路網資訊，以及由 jtrrouter或 duarouter 所產生的車流資訊，透過 sumo 程式做模擬，並指定
模擬時間 (“b” 開始模擬時間，“e” 結束模擬時間 )，如圖七，則可獲得車輛追蹤記錄檔 (netstate.xml)、車輛路線檔
(vehroute.xml)，以及交通流動模型組態檔(如 sumo.cfg)這三個檔。這時，我們已可藉由 Sumo 提供的圖形介面程式開啟
sumo.cfg檔，觀察每輛車輛在不同道路上的行進速度以及行進路線。 
sumo -n mynet.net.xml -r routes.rou.xml  --netstate-dump netstate.xml –vehroute-output vehroute.xml  
–save-configuration sumo.cfg  –b 0 –e 600 
圖七：執行 sumo.exe程式做車輛行進模擬 
車輛追蹤記錄檔會記錄每一秒中，每部車在道路上的位置和速度，是用以轉換成 NS2所需之移動劇本的主要輸入檔。
例如從圖八的記錄檔範例片段，我們可以看到於第九秒時，車輛“Rand2”在彎曲道路“7fi”的“7fi_1”線道中的“58.65”公尺位
置，正以秒速“12.65”公尺行進，於第 10秒鐘時，則行進至“7fi_1”線道中的“72.74”公尺位置，以秒速“14.09”公尺行進。 
<sumo-netstate> 
... 
<timestep time="9"> 
<edge id="7fi"> 
<lane id="7fi_0"> 
<vehicle id="Rand2" pos="58.65"  
speed="12.65"/> 
                </lane> 
                <lane id="7fi_1"/> 
          </edge> 
... 
    </timestep> 
<timestep time="10">     
     <edge id="7fi"> 
<lane id="7fi_0"> 
<vehicle id="Rand2" pos="72.74"  
speed="14.09"/> 
</lane> 
<lane id="7fi_1"/> 
</edge> 
... 
</timestep> 
 24
} 
接著，修改 MobilityWriter.java檔，修正車輛在各秒中的位置與速度的換算。原本只是做(fromx, fromy)與(tox, toy)之間
簡單的內插法，現在則改成先依據車輛在線道中位置(pos)推算此位置是在哪一個折段，以及在此折段的位置(temp_pos)，
再做內插法，算出其座標與速度向量。修改的部份如下： 
// calculate positons of vehicle 
float temp_pos = pos; 
int i = 0; 
float xfrom = thislane.shape.get(i).x; 
float yfrom = thislane.shape.get(i).y; 
float xto = thislane.shape.get(i+1).x; 
float yto = thislane.shape.get(i+1).y; 
float d = (float) Math.sqrt((xto-xfrom) *(xto-xfrom)+(yto 
-yfrom)*(yto-yfrom)); 
while (temp_pos > d && i < thislane.shape.size()-1){  
temp_pos -= d; 
xfrom = xto; 
yfrom = yto; 
i++; 
xto = thislane.shape.get(i).x; 
yto = thislane.shape.get(i).y; 
d = (float) Math.sqrt((xto-xfrom)*(xto-xfrom)+(yto 
-yfrom)*(yto-yfrom)); 
} 
x = xfrom + temp_pos * (xto - xfrom) / d; 
y = yfrom + temp_pos * (yto - yfrom) / d; 
然後，我們修改計算整個拓樸的邊際座標的程式碼，在 ConfigWriter.java檔中，新增了接點(joint)在 shape中變化的迴
圈 (在程式碼新增一層 for迴圈)。 
// extend of map 
boolean first = true; 
for (Edge edge: edges) { 
for(Lane lane:edge.lanes.values()) { 
for (Joint e:lane.shape){ 
if (first) { 
first = false; 
xmin = e.x; 
xmax = e.x; 
ymin = e.y; 
ymax = e.y; 
} else { 
 26
Joint from=new Joint(Float.parseFloat(vals[0]),  
Float.parseFloat(vals[1])); 
shape.add(from); 
Joint to = new Joint(Float.parseFloat(vals[2]),  
Float.parseFloat(vals[3])); 
shape.add(to); 
} 
edge.lanes.put(id, new Lane(id, shape, length)); 
} 
以上我們已完成納入 shape 屬性所需的所有更改。然而，TraceExporter 在平移座標的程式碼上也有一點瑕玼，因此我
們也順便修改了有關座標平移的程式碼，使得平移後的邊際座標左下角為固定的正值座標(1, 1)，使得其邊際座標正好符合
NS2的要求(不能為負值或零)，因此，我們修正了 NetTranslater.java程式碼如下： 
for (Junction junction:junctions.values()){ 
junction.x -= (xmin-1); 
junction.y -= (ymin-1); 
} 
for (Edge edge: edges) { 
for (Lane lane: edge.lanes.values()){ 
for (Joint e:lane.shape){ 
e.x -= (xmin-1); 
e.y -= (ymin-1); 
} 
} 
} 
最後，我們重新編譯 TraceExporter 的原始碼，產生 bytecode，連同原本所含的 XML parser，以 jar.exe 壓縮成新版本
TraceExporter.jar檔。  
 
4. 實作範例 
我們用修改過的 TraceExporter對事先由 netconvert程式產生的路網描述檔(mynet.net.xml)以及由 sumo程式產生的車輛
追蹤記錄檔(netstate.xml)進行轉換： 
java -jar traceExporter.jar ns2  –n mynet.net.xml  
–t netstate.xml  -a activity.tcl  –m mobility.tcl  
–c config.tcl –p 1 –s 0 –b 310 –e 330 
本例前 300 秒先產生一些車流(參閱圖四)，使其自行行走分佈在車道上，從 310 秒才開啟捕捉車流記錄，至 330 秒結
束追踨。得到的 config.tcl檔內容如下： 
# set number of nodes 
set opt(nn) 132 
# set activity file 
 28
 
 
圖九:  修改前 TraceExporter產生的移動劇本 
 
 
圖十:修改後 TraceExporter產生的移動劇本 
 
 
圖十一:  實驗使用之路網地圖 
 
目前車輛追蹤記錄是每秒取樣一次，因為 TraceExporter的轉換採用簡單的內插法，所以如果前次取樣與下次取樣在不
同路段，則可能出現跳過路口的情況，若想要做出更精確的模擬，此點是值得未來改進的地方。 
 
6. 參考文獻 
[1] Feliz Kristianto Karnadi  Zhi Hai Mo  Kun-chan Lan, “Rapid Generation of Realistic Mobility Models for VANET.”  
[2] S. McCanne and S. Floyd. “The network simulator – ns-2,” www.isis.edu/nsnam/ns/. K. Fall, K. Varadhan “The ns manual”.  
[3] 柯志亨、程榮祥、謝錫雋、黃文祥，「計算機網路實驗─以 NS2模擬工具實作」，學貫出版，民國 94年。 
[4] 柯志亨團隊，「計算機網路實驗─使用 NS2模擬多媒體通訊與無線網路」，學貫出版，民國 96年。 
[5] Centre for Applied Informatics (ZAIK) and the Institute of Transport Research German Aerospace Centre, “Sumo – simulation 
of urban mobility,” http://sumo.sourceforge.net/. (version 0.12.0) 
[6] D. Krajzewicz, G. Hertkorn, C. Rossel, P. Wagner. 2002, SUMO (Simulation of Urban MObility) - An open-sourcetraffic 
simulation”. In: MESM2002 Proceedings. Comingout Okt., 2002. 
[7] 中華民國交通部運輸研究所，DynaTaiwan, http://dynataiwan.tcm.ncku.edu.tw/ 
[8] J. Haerri, F. Filali, C. Bonnet, Marco Fiore, “VanetMobiSim: Generating Realistic Mobility Patterns for VANETs,” in Proc. of 
the 3rd ACM International Workshop on Vehicular Ad Hoc Networks (VANET'06), September 29, 2006, Los Angeles, USA. 
http://vanet.eurecom.fr/. 
[9] Global Mobile Information Systems Simulation Library (GloMoSim), http://pcl.cs.ucla.edu/projects/ glomosim/. 
[10] Java in Simulation Time/ Scalable Wireless Ad hoc Network Simulator, http://jist.ece.cornell.edu/ docs.html 
[11] An efficient, unifying approach to simulation using virtual machines. PhD dissertation, Cornell University, May 2004. 
[12] Kuhne, R.D. and M. B. Rodiger. Macroscopic Simulation Model for Freeway Traffic with Jams and Stop-Start Waves. 1991 
Winter Simulation Conference Proceedings, IEEE, 8-11 December 1991, Phoenix, Arizona, USA, pp. 762-770. 
[13] Shvetsov, V. and D. Helbing. Macroscopic Dynamics of Multilane Traffic. Physical Review E,Vol. 59, No. 6, June 1999. pp. 
6328-6339. 
無研發成果推廣資料 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
提供多重路徑行動隨意網路連結網路提供具體協定方案與注意事項。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
