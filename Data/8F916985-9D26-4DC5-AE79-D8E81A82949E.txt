2 
 
 一、研究計畫中文摘要：  
  點對點網路在最近幾年已被廣泛地應用在分散式資源共享。在無結構化點對點網路
中，資源搜尋(resource locating)是首要的挑戰，包括冗長的搜尋時間、大量的重複訊息與
較低的成功率。既存的文獻提出許多解決之道，然而絕大多數的方法都只適用在熱門資源
的搜尋。另一方面、在不考慮如版權等爭異性的話題下，點對點網路下最受歡迎的應用即
是做檔案分享。由於以片段為主的檔案分享可以加速點對點網路下的檔案分享速度，所以
多數的點對點檔案分享應用程式皆是採用此方法進行分享，如 BT 點對點網路即是使用最
稀有的片段優先來進行檔案片段分享。現今由於異質網路的快速發展使得節點間的傳輸情
況變成多變的，而過去很少研究提及如果根據節點間的傳輸情況來做到有效率的點對點檔
案片段分享。我們提出以支配集合為根據的隨機複製行走者方法使其能同時適用在無結構
化點對點網路中熱門和冷門的資源搜尋，並在搜尋時間、訊息重複量與成功率中，試著去
找出較佳的平衡點。此外，我們將試著提出了二個根據節點間的傳輸時間來做點對點檔案
片段分享的演算法，分別是 (a) 最稀有的片段優先傳，有最小的傳輸時間節點優先收(RPF 
with a STT (Shortest Transmission Time) requesting node first)與(b)有最小的傳輸時間節點優
先傳，最稀有的片段優先傳(a STT requesting node first with RPF)，來提升於異質網路環境
中的點對點網路上，以片段為主的檔案分享機制。 
 
關鍵詞：點對點網路、資源搜尋、隨機複製行走者、支配集合、最稀有的片段優先、以片
段為主的檔案分享、異質網路。 
 
二、研究計畫英文摘要：  
 Peer-to-Peer (P2P) networks have been developed for resource sharing for years. In an 
unstructured Peer-to-Peer network, resource locating is the first and foremost challenge, 
including issues about long searching time, a large amount of query message duplication and a 
lower success rate. The existing literatures have proposed many efficient methods to resolve 
these issues. However, most of the proposals only benefit locating the popular object. On the 
other hand, without consider the controversial issue such as copyright, file sharing is the most 
popular application in a Peer-to-Peer (P2P) network. Piece-based file sharing is an intuitive way 
to speed up the sharing process in a P2P network, such as the BT P2P network, and Rarest Piece 
First (RPF) is the most common way to distribute file pieces. As heterogeneous networks have 
been fast developing, the transmission conditions among nodes therefore become diversified. In 
the past, few studies had ever been made about how to more efficiently distribute the file pieces 
based on the transmission conditions among nodes. The simulation results show that our 
proposed schemes can perform better than RPF in a heterogeneous network environment. In this 
project, we try to propose a Cloning Random Walker with a Dominating Set (CloneRW+DS) 
method to adaptively locate the resources no matter the target object is popular or unpopular in 
an unstructured P2P network. Meanwhile, we try to propose two improved algorithms - (a) RPF 
with a Shortest Transmission Time (STT) requesting node first and (b) a STT requesting node 
first with RPF to improve the RPF file sharing scheme over a P2P network in a heterogeneous 
network environment. 
4 
 
低訊息重複的問題，並保有洪泛式(flooding)大範圍訊息遞送的優點；二相票據洪泛式演算
法[9](two phase ticket-based flooding)則維護一個環狀(ring)子網路重疊結構來降低冷門資
源搜尋的時間。在這個計畫中，我們提出隨機複製行走者(cloning random walkers)演算法
來改善冷門資源搜尋的效率並能相容既存的決策式演算法以供熱門資源的搜尋，同時也維
護了一個支配集合(dominating set)子網路重疊結構來提升點對點網路的強健性(robustness)
以防止因節點加入或離開所造成的搜尋失敗。 
 另一方面，過去很多討論點對點網路的研究主要著重在如何建立與維持重疊架構點對
點網路(overlay P2P network) [32]、定位分享的檔案與複製[33]、節點間的負載平均[34]、
網路的路由與檔案抓取[35]…等，然而以我們的理解，討論在點對點網路下如何有效率的
分享檔案片段相對較少。在[36]中作者提出了最稀有的片段優先(Rarest Piece First，簡稱
RPF)與最大的需求節點優先(Most Demanding Node First，簡稱 MDNF)演算法。BT 採用的
便是最稀有的片段優先(RPF)演算法，依其定義即是對下載者而言，其在選擇下一個要下
載的片段，要優先選擇與本身有連接的所有的節點中，最少被擁有的片段，此種方法雖然
考慮了讓片段稀有度高的優先被傳送，最大缺點在於沒有考慮片段該優先傳給哪一個節
點。根據上述狀況，最大的需求節點優先演算法被提出，其方式為節點要選擇要傳送的片
段以採用最稀有的片段優先，但選擇哪個節點接收則要考慮節點擁有的片段數最少的優
先。然而此兩種方法皆假設在點對點網路中各個節點間的傳送時間是相同的，但現實網路
環境中，各個節點間的傳送時間是不相同的，更由於異質網路(heterogeneous networks)的
快速發展，人們選擇上網的方式可以透過有線電視同軸電纜線的纜線數據機(Cable 
Modem)、電話線的數位用戶迴路(xDSL)、T1 (Trunk Level 1)專線、光世代網路(FTTx)，以
至於無線的無線區域網路(802.11，常被稱為 Wi-Fi)、第三代行動通訊技術(3G)、高速下行
封包接入(High Speed Downlink Packet Access，簡稱HSDPA、3.5G)和無線寬頻接取(WiMAX)
等，因為每個使用者選擇的網路不同，造成每個節點在點對點網路中的傳輸時間差異更
大。由於上述的考量，我們提出了以點對點網路中節點間的傳輸時間當做考量的二種演算
法：(a) 最稀有的片段優先傳，有最小的傳輸時間節點優先收(RPF with a STT (Shortest 
Transmission Time) requesting node first)與(b)有最小的傳輸時間節點優先傳，最稀有的片段
優先傳(a STT requesting node first with RPF)。 
 
五、參考文獻： 
[1] Q. Lv, P. Cao, E. Cohen, “Search and replication in unstructured peer-to-peer networks”, ICS 
2002 
[2] V. Kalogeraki, D. Gunopulos, D. Zeinalipour-Yazti, “A local search mechanism for 
peer-to-peer networks”, CIKM 2002 
[3] A. Crespo, H. Garcia-Molina, “Routing indices for peer-to-peer Systems. ICDCS 2002” 
[4] B. Yang, H. Garcia-Molina, “Improving search in peer-to-peer Networks”, ICDCS “2002” 
[5] D. Menasce, L. Kanchanapalli, “Probabilistic scalable P2P resource location services”, 
SIGMETRICS 2002 
[6] S. Jiang, L. Guo, X. Zhang, “LightFlood: an efficient flooding scheme for file search in 
unstructured peer-to-peer systems”, ICPP 2003 
[7] D. Tsoumakos, N. Roussopoulos, “Adaptive probabilistic search for peer-to-peer networks”, 
P2P 2003 
6 
 
[32] Yatin chawathe, Sylvia Ratnasamy, Lee Breslau, Nick Lanham and Scott Shenker, “Making 
gnutella-like P2P systems scalable,” in ACM SIGCOMM, August 2003 
[33] Qin Lv, Pei Cao, Edith Cohen, Kai Li and Scott Shenker, “Search and Replication in 
Unstructured Peer-to-Peer Networks,” in ACM ICS, June 2002 
[34] Ananth Rao, Karthik Lakshminarayanan, Sonesh Surana, Richard Karp and Ion Stoica, 
“Load Balancing in Structured P2P system,” In Proceedings of the 2nd International 
Workshop on Peer-to-Peer Systems, Feb. 2003 
[35] Zhiyong Xu, Dan Stefanescu, Honggang Zhang, Laxmi Bhuyan and Jizhong Han, “PROD: 
Relayed File Retrieving in Overlay Networks,” in IEEE IPDPS, April 2008 
[36] J. S. K. Chan, V. O. K. Li, and K. S. Lui, “Performance Comparison of Scheduling 
Algorithms for Peer-to-Peer Collaborative File Distribution,” in IEEE Journal on Selected 
Areas in Communications, vol. 25, NO. 1, January 2007, pp.146-154 . 
 
六、研究方法： 
(一) 對點對點網路的資源搜尋改善： 
為了減少洪泛式演算法(flooding)所帶來的大量訊息重複的問題，隨機行走者(random 
walker)[1] 演算法於是被提出來，其概念不像洪泛式演算法全面向目前搜尋結點的所有鄰
居發出尋找訊息，而是隨機選擇幾個鄰居發出尋找訊息，此概念可大幅地減少所產生的訊
息量，不過當欲找尋的資源(resource)是屬於冷門類別(unpopular)時，行走者必須遍歷
(traverse)更多的節點，產生更長的搜尋時間，如此的行為將使得原本的優點不復存在。因
此，我們的概念是令隨機行走者能因應資源普及的程度(population level)做出適當的調整。
如果一個行走者(walker)遍歷一個給定的跳躍點數量(我們設定一個 Cloning Distance)，仍然
無法發現欲找尋的資源時，行走者就複製自己(意即增加產生新的行走者去搜尋)繼續整個資
源搜尋的過程，若再遍歷一個跳躍點數量後還是無法發現資源，便再複製自己一次，依此
類推，直到發現欲尋找的資源或跳躍數量到達最大複製跳躍點(Max Cloning Hop)時。圖一
說明了搜尋、資源普及程度和複製的關係，隨著被搜尋資源的普及程度越低，隨機行走者
與尋找訊息量的產生量才會適時的增加。另一方面，行走者在遍歷點對點網路的搜尋過程
中，可能會因選擇錯誤的鄰居，導致過長的搜尋時間，此時我們可以將決策式的演算法
(informed method)加入到隨機複製行走者中來引導行走者挑選較佳的鄰居。 
Popular 
Objects Unpopular 
Objects
Make 
a 
clone
Make 
a 
clone
Make 
a 
clone
Hop 
Counts
Make 
a 
clone
Max 
Cloning
Hop
Walker
Cloning
Distance
 
圖一：隨機複製行走者 
    在點對點網路中，節點的加入或離開是不可預期的，若行走者目前所到達的節點剛好
8 
 
根據以上的討論，隨機複製行走者可依據資源普及的程度複製不同合宜數量的行走者；輕
量型洪泛式方法則可因應節點非預期離開的情形有效率地增加訊息遞送量避免行走者被阻
擋。我們將這兩種作法的優點結合在一起，預期能得到較短的搜尋時間與較高的搜尋成功
率。我們結合上述這兩種作法，若行走者遍歷到支配集合內的節點，它將遞送查詢訊息至
此屬於支配集合的節點其尚未被遍歷的鄰居，且支配集合內的節點只會執行一次遞送的過
程以降低重覆的訊息產生；若行走者遍歷到的節點不屬於支配集合，行走者就依照隨機複
製行走者的方法來進行，圖四為結合這兩種作法的輕量型洪泛隨機複製行走者演算法。 
 
圖四：輕量型洪泛隨機複製行走者演算法 
    
(二) 具效率的檔案分享機制： 
    在第一年對點對點網路的資源搜尋改善所累積的研究基礎下，我們亦希望對點對點網
路的另一個重要議題進行研究，那就是以片段為主的檔案。首先、我們先簡單的定義此問
題如下，在以片段為主的點對點檔案分享網路中，若一個被分享檔案被分割成大小相等的
N 個片段(例如在 BT 網路中，每個片段可為 256Kbytes)，我們又定義一個 M*N 的矩陣 S
如(1)來記錄網路中的各個節點其各自擁有片段的狀態，其中 M 代表網路中的節點個數。 
， 
其中 i 代表點對點網路中的第 i 個節點  而 j 代表分享檔案的第 j 個片段 
。 
我們再定義二個一維陣列  和 分別去記錄網路
中節點的上傳能力與下載能力(以片段數為單位，例如 ，代表節點 i 目前有上
載一個片段的及下載二個片段的能力)。最後定義一個 M*M 的矩陣 T 來記錄點對點網路
中的每個節點間之傳輸時間，其中 表示節點 i 與節點 j 之間的傳輸時間。 
    在最稀有的片段優先演算法中，如果一個片段只有一個節點擁有，而若該節點離開了
Upon receipt of Query(msg, hop_count, id, ds_sent) by node x 
hop_count := hop_count – 1 
if x owns the requested resource 
 x replies to the requester 
if hop_count > 0 and ds_sent = FALSE 
 if x∈DS and hasn’t forwarded the query 
  x forwards Query(msg, hop_count, id, TRUE) to the all unvisited neighbors 
 else if (hop_count mod CLONING_DIST = 0) AND (hop_count < MAX_CLONING_HOP) 
  x makes a clone of Query 
  x forwards Query(msg, hop_count, id, FALSE) to two unvisited neighbors randomly 
 else 
  x forwards Query(msg, hop_count, id, FALSE) to one unvisited neighbor randomly 
else 
 x discards Query(msg, hop_count, id, ds_sent) 
10 
 
(三)   模擬結果： 
    在對點對點網路的資源搜尋改善方面，圖七中 LightFlood 雖然欲透過展開樹降低訊息
的產生量，但相對於 CloneRW+DS 和 Ticket，仍舊多了 50%～60%的負擔。平均搜尋延遲
的比較，CloneRW+DS所需要的時間只有Ticket的一半，且直逼LightＦlood。而即使CloneRW
沒有支配集合的輔助，所需的時間也比傳統的 RW 低上許多。從這兩張圖可看出
CloneRW+DS 在平均負擔和搜尋時間取得了一個比較好的平衡點。 
0
100
200
300
400
500
600
700
800
Av
g_
Ov
erh
ea
d (
me
ssa
ge
/re
su
lt)
CloneRW
CloneRW+DS
LightFlood
RW
Ticket
0
2
4
6
8
10
12
14
16
18
20
De
lay
 (s
)
CloneRW
CloneRW+DS
LightFlood
RW
Ticket
 
圖七：不同搜尋法之訊息量與找尋時間比較 
 
在圖八中，在具效率的檔案分享機制方面，不同節點數下及不同檔案大小下，我們提
出的演演算法依然比 RPF 演算法與 MDNF 演算法有較佳的效果。 
  
圖八：不同節點數下及不同檔案大小下的 Average complete time 之比較 
其中可看到我們提出的第一個演算法” 最稀有的片段優先傳，有與傳送節點最小傳輸
時間的節點優先收”的最大完成時間會較 MDNF 大，其原因因為 MDNF 演算法主要的精
神在於希望參與點對點網路的所有節點擁有的片段數相近，所以幾乎大部份的節點其下載
時間都接近最大完成時間，故其平均完成時間也較大，而我們的方法主要是根據 RPF 演
算法再改良，所以在最大完成時間雖然較 MDNF 演算法大，但只是少數幾個節點完成下
載的時間很大，大部份的節點下載時間都是較小的，所以 Average complete time 反而較
MDNF 小。 
A Novel Popularity-Independent Resource Locating 
Scheme in a P2P Network 
Jenq-Shiou Leu  
Department of Electronic Engineering  
National Taiwan University of Science and Technology  
Taipei, Taiwan  
jsleu@mail.ntust.edu.tw  
Cheng-Wei Tsai  
Department of Electronic Engineering 
National Taiwan University of Science and Technology  
Taipei, Taiwan 
m9602128@mail.ntust.edu.tw  
 
 
Abstract—Peer-to-Peer (P2P) networks have been developed for 
resource sharing for years. In a P2P network, resource locating is 
the first and foremost challenge, including issues about long 
searching time, a large amount of duplicated query message and 
a small success rate. Many efficient methods have been proposed 
to resolve these issues. However, most of these proposals may 
only benefit searching a popular object. In this paper, we propose 
a Cloning Random Walker with a Dominating Set (CloneRW+DS) 
method to adaptively locate the target resource no matter the 
target resource is popular or unpopular in a P2P network. Our 
simulation results show our proposed scheme can perform a 
better trade-off among message overhead, searching delay, and 
success rate while conducting resource locating in a P2P network. 
Keywords: Peer-to-Peer Networks; Resource locating; Cloning 
Random Walker; Dominating Set; 
I.  INTRODUCTION  
Peer-to-Peer (P2P) networks have been widely applied in 
decentralized resource sharing for years. Resource locating is 
the first and foremost challenge in a P2P network. The overlay 
architectures of P2P can be classified into two categories – the 
unstructured overlay network and the structured overlay 
network. The unstructured overlay networks, such as Freenet, 
Gnutella, FastTrack/KaZaA, BitTorrent, Overnet/eDonkey, and 
Foxy [1-4], do not have prior knowledge about the network 
topology. Therefore, an unstructured overlay P2P network has 
lower overhead for maintaining P2P topologies but higher 
searching time for searching the target resource normally. In 
contrast, the structured overlay networks retaining network 
topology information by some search algorithms, such as CAN, 
Chord, Tapestry, Pastry, and Kademlia, Viceroy [5-8], can 
predominantly control the network topology with higher 
overhead but lower searching time by arranging resources at 
predetermined locations. There exist tradeoffs between 
searching overhead (e.g. searching time, amount of issued 
messages to search resources) and the topology maintenance 
cost. Search schemes in the unstructured P2P networks can be 
further categorized into blind and informed methods. In a blind 
manner [9-13], peers do not hold any object-specific 
information concerning the stored location but just randomly 
forward the query messages to their neighbor peers. However, 
the same query message may be repeatedly sent again to the 
received peer and then cause excessive duplicated messages in 
the network. To lessen duplicated messages, some researchers 
improved the blind methods by keeping additional state 
information. In other words, peers hold some metadata by 
themselves to assist the query message forwarding. Such 
improved search schemes are called informed search methods 
[14-20]. The above mentioned algorithms use either indices to 
objects in the neighborhood or information about searched 
objects to guide the query messages forwarded to proper peers. 
However, only searching popular objects can benefit from 
these cache-based mechanisms. If we want to locate unpopular 
objects with a higher success rate by these existing schemes, 
the problems of forwarding lots of duplicated query messages 
and incurring long response time to find the target resource still 
exist. In this article, we propose an adaptive resource locating 
scheme which can inherit from the existing informed 
mechanisms to efficiently find the popular objects as well as 
significantly reduce the overhead of duplicated query messages 
and lessen long delay to find the unpopular objects.  
The rest of this article is organized as follows. Section II 
illustrates some related works about how to locate resources in 
a P2P network. Section III depicts our Cloning Random 
Walker with a Dominating Set scheme which can adaptively 
locate the target resource efficiently no matter the searched 
object is popular or unpopular. The simulation results of our 
proposed scheme compared to other searching methods are 
shown in Section IV. Concluding remarks are finally drawn in 
Section V. 
II. RELATED WORK 
In the past, many strategies were proposed to find the target 
resource in a gigantic P2P network. Query message flooding is 
the simplest way by advertising the query request. However, 
flooding may introduce the message implosion without a 
termination control. The TTL (Time-To-Live) of a query 
message can be used to control the number of hops that a query 
can be propagated. Nevertheless, how to select a good TTL 
becomes a new issue. If the TTL is set too high, too many 
query messages may burden the network. If the TTL is set too 
low, the search process may not find the object even though the 
target resource exists in the network or only a popular target 
resource can be found. To significantly reduce the query 
messages, Random Walker [10] concept was proposed. Every 
walker in the Random Walker scheme plays an object finder to 
search the target object by randomly choosing one of the 
current visited node’s neighbors as a next hop instead of all of 
its neighbors. However, the major drawback of Random 978-1-4244-5213-4/09/ $26.00 ©2009 IEEE 2807
Authorized licensed use limited to: National Taiwan Univ of Science and Technology. Downloaded on April 18,2010 at 12:24:37 UTC from IEEE Xplore.  Restrictions apply. 
13
1
2
3
1
1
1
1
1
2
1
1
1
 
Figure 2.  An Example of a Lightweight Flooding Assisted by the 
Dominating Set 
Computing a dominating set with a minimal size is a well-
known NP-hard problem. Many existing distributed algorithms 
[21-23] can be used to find an approximate solution to a 
minimum dominating set with a lesser computation cost. 
Authors in [21] propose Local Randomized Greedy (LRG) 
algorithm to construct the dominating set and presents a good 
tradeoff between time complexity and approximation ratio. The 
algorithm considers not only the spans of the nodes but also 
how the nodes which are covered by an individual node are 
also covered by other nodes. The following algorithm describes 
the process in each round for LRG. 
 
C. Proposed Scheme 
Based on the above discussion, cloning random walkers can 
increase the hit rate adaptively and the dominating set 
associated with the P2P network topology can conduct query 
message flooding efficiently. We combine both merits of these 
two methods to achieve a shorter searching time per successful 
hit. The following algorithm presents the process of the 
proposed scheme.  
     If a walker encounters a node in dominating set, the node 
forwards the query to all its neighbors to flood the requesting 
message. Each node in dominating set just floods only in one 
more hop range to reduce the redundant messages. If a walker 
encounters a normal node which does not belong to the 
dominating set, it works like the cloning random walkers do. 
To restrain the significant message increase due to flooding by 
the nodes in the dominating set, each node in the dominating 
set just floods the query message only one time. That means if 
one node in the dominating set receives the query message 
from another node in the dominating set and just floods earlier, 
the node would stop forwarding the query to its neighbor.  
The construction of dominating set may involve much 
message exchange overhead. However, our purpose just 
CloneRW+DS: 
//msg: message about searching the target object  
//hop_count : the hop count of the traversing query message 
//cloning_times: the walker cloning times 
//ds_sent : a flag to keep whether the query message comes from a 
node in the dominating set or not 
On Receiving Query(msg, hop_count, cloning_times, ds_sent) by 
node x 
 
if x is the target object owning the requested resource then 
      x replies a successful hit to the requester; 
end if 
 
hop_count := hop_count + 1; 
 
if hop_count > MAX_TTL then 
      x discards Query(msg, hop_count, cloning_times, ds_sent); 
return; 
end if 
 
if x∈DS then 
if ds_sent = FALSE and x hasn’t forwarded the query message 
then 
// encountering a node, which does not flood before, in DS 
            x forwards Query(msg, hop_count, cloning_times, TRUE) to 
all its neighbors; 
      else  
// the query message comes from one node in DS or x has 
forwarded 
x discards Query(msg, hop_count, cloning_times, ds_sent); 
end if 
else 
if (cloning_times < MAX_CLONING_HOP) and (hop_count 
mod CLONING_DIST = 0) then  
       // cloning random walkers 
cloning_times := cloning_times  + 1; 
x forwards Query(msg, hop_count, cloning_times, FALSE) to 
CLONING_NUM of its neighbors as cloned random walkers; 
      else // forwarding as a normal searching node 
            x forwards Query(msg, hop_count, cloning_times, FALSE) to 
one of its unvisited neighbors; 
end if 
end if
Dominating Set Construction: 
// dominators: nodes in the dominating set 
// covered nodes: dominators’ neighbors 
// uncovered nodes: nodes which are dominators’ neighbors 
// d(u) - “span of u” : the amount of uncovered nodes adjacent to u 
// s(u) - “support of u”: the amount of candidates that adjacent to u 
//med(u) : the median of all supports of uncovered nodes adjacent to 
u  
// u is a candidate if d(u) is maximal within distance 2 of u 
 
while d(u) > 0 do 
 //Step 1: Span Calculation 
     u computes d(u) rounded to the next power of 2; 
     u sends d(u) to all of its neighbors; 
     u computes the maximum span among its neighbors and forwards 
it one more hop; 
 //Step 2: Candidate Selection 
     if d(u) is maximal within distance 2 of u then 
          u sets itself as a candidate for joining the dominating set; 
     end if 
 //Step 3: Support Calculation 
     if u is not a candidate then 
          u sends its support s(u) to each of the neighboring candidates; 
     end if 
 //Step 4: Dominator Selection 
     if u is a candidate then 
         u sets itself as an dominator with probability )(
1
umed ; 
     end if 
end while 2809
Authorized licensed use limited to: National Taiwan Univ of Science and Technology. Downloaded on April 18,2010 at 12:24:37 UTC from IEEE Xplore.  Restrictions apply. 
V. CONCLUSION 
In a P2P network, the pure flooding scheme is suitable for 
searching an unpopular object, whereas the Random Walker 
scheme is good for finding a popular object. However, the pure 
flooding strategy may cause lots of query messages, whereas 
the Random may induce a low success rate to find the target 
resource. Some improved flooding-based schemes like the 
LightFlood scheme can reduce the search delay but still suffer 
a high message overhead or a ticket-based flooding scheme can 
lower the message overhead but still remain a higher search 
delay. This paper proposes a Cloning Random Walker with 
Dominating Set (CloneRW+DS) to perform a better trade-off 
among the searching overhead, search delay and success rate 
no matter the target resource is popular or unpopular. Our 
simulation results also prove that our proposed scheme can 
achieve a high success rate with comparatively low message 
overhead and search delay. 
ACKNOWLEDGMENT 
The authors gratefully acknowledge the support by the 
National Science Council, Taiwan, under grants NSC97-2221-
E-011-085. 
REFERENCES 
[1] Fasttrack http://www.fasttrack.nu/ 
[2] Kazaa media desktop. http://www.kazaa.com/ 
[3] Bittorrent. http://www.bittorrent.com/ 
[4] Limewire http://www.limewire.com/ 
[5] A. Rowstron and P. Druschel, “Pastry: Scalable, distributed object 
location and routing for large-scale peer-to-peer systems,” pp. 329 -350, 
Proc.Middleware, 2001. 
[6] I. Stoica, R. Morris, D. Karger, M. F. Kaashoek, and H. Balakrishnan, 
“Chord: A scalable peer-to-peer lookup protocol for internet 
applications”, IEEE/ACM Transactions on Networking, Vol. 11, Issue 1, 
pp. 17-32 Feb. 2003. 
[7] B. Y. Zhao, L. Huang, J. Stribling, S. C. Rhea, A. D. Joseph, and J. D. 
Kubiatowicz, “Tapestry: A resilient global-scale overlay for service 
deployment,” IEEE Journal on Selected Areas in Communications , Vol. 
22, Issue. 1, pp. 41-53, Jan. 2004. 
[8] P. Maymounkov and D. Mazi`eres, “Kademlia: A peer-to-peer 
information system based on the xor metric,” pp. 53-65, IPTPS 2002. 
[9] Q. Lv, P. Cao, E. Cohen, “Search and replication in unstructured peer-
to-peer networks”, pp. 84-95, ICS 2002 
[10] S. Jiang, L. Guo, X. Zhang, H. Wang “LightFlood: Minimizing 
redundant messages and maximizing the scope of peer-to-peer search”, 
IEEE Transaction on Parallel and Distributed Systems, vol. 19, Issue. 5, 
pp. 601-614 , May 2008. 
[11] C. Gkantsidis, M. Mihail, “Hybrid search schemes for unstructured peer-
to-peer network”, Vol. 3, pp. 1526-1537, IEEE INFOCOM 2005. 
[12] S. Chen, Z. Zhang, S. Chen, B. Shi , “Efficient file search in non-DHT 
P2P networks”, Vol. 31, Issue 2, pp. 304-317, Computer 
Communication, Feb. 2008. 
[13] H. Jiang, S. Jin, “Exploiting dynamic querying like flooding techniques 
in unstructured peer-to-peer networks, pp. 10-19, ICNP 2005. 
[14] V. Kalogeraki, D. Gunopulos, D. Zeinalipour-Yazti, “A local search 
mechanism for peer-to-peer networks”, pp. 300-307, CIKM 2002. 
[15] A. Crespo, H. Garcia-Molina, “Routing indices for peer-to-peer 
Systems”, pp.23-32,  ICDCS 2002. 
[16] B. Yang, H. Garcia-Molina, “Improving search in peer-to-peer 
Networks”, pp. 5-14, ICDCS 2002. 
[17] D. Menasce, L. Kanchanapalli, “Probabilistic scalable P2P resource 
location services”, Vol. 30, Issue 2, pp. 48-58, SIGMETRICS 2002. 
[18] D. Tsoumakos, N. Roussopoulos, “Adaptive probabilistic search for 
peer-to-peer networks”, pp. 102-109, P2P 2003. 
[19] K. Puttaswamy, A. Sala, B. Zhao, “Searching for rare objects using 
index replication”, pp. 1723-1731,   INFOCOM 2008. 
[20] A. Kumar, J. Xu, E. W. Zegura, “Efficient and scalable query routing for 
unstructured peer-to-peer networks”, Vol. 2, pp. 1162-1173, INFOCOM 
2005. 
[21] L. Jia, R. Rajaraman, T. Suel, “An efficient distributed algorithm for 
constructing small dominating sets”, p.p. 193-205, PODC 2001. 
[22] B. Liang and Z. Hass., “Virtual backbone generation and maintenance in 
ad-hoc network mobility management”, p.p. 1293-1302, IEEE 
INFOCOM 2000. 
[23] F. Kuhn and R. Wattenhofer., “Constant-time distributed dominating set 
approximation”, p.p. 25-32, PODC 2003. 
[24] Y. Chawathe, S. Ratnasamy, L. Breslau, “Making Gnutella-like P2P 
systems scalable”, p.p. 407-418, SIGCOMM 2003. 
[25] W. Aiello, F. Chung, L. Lu, “A random graph model for massive 
graphs”, p.p. 171-180, STOC 2000. 
 2811
Authorized licensed use limited to: National Taiwan Univ of Science and Technology. Downloaded on April 18,2010 at 12:24:37 UTC from IEEE Xplore.  Restrictions apply. 
II. RELATED WORK 
In a piece based file sharing P2P network, such as BT, 
each shared file is divided into multiple small pieces (or 
chunks) with an equal size- usually about 256Kbytes or 512 
Kbytes. Many efforts have been made to how to efficiently 
distribute file pieces. The study in [15] analyzes the chunk 
distribution with an ideal application, and shows how this 
distribution is deteriorated when the best scenario changes to 
approach the real situation of present applications. In practice, 
Rarest Piece First (RPF) algorithm is a common way used in 
BT network for piece distribution. For the same shared file, 
the pieces owned by the least nodes are transmitted in a 
highest priority to lower the effect of the node leaving in the 
P2P network. Such a mechanism can increase the lifetime of 
all file pieces staying in the P2P network. The study in [14] 
mentioned the performance of RPF is unsatisfactory since 
RPF algorithm presumes that the pieces owned most by nodes 
should be transmitted first. However, such a mechanism does 
not mention which node should receive these transmitted 
pieces first. The authors therefore proposed the Most 
Demanding Node First (MDNF) algorithm. Same as RPF, the 
sender node chooses the rarest piece to send. Additionally, the 
node which needs the rarest piece and owns the fewest pieces 
is considered as the piece receiver in MDNF. 
 On the other hand, minimizing the download time in 
a P2P network is also important. The authors in [16] prove 
that both spatial heterogeneity and temporal correlations in 
service capacity increase the average download time in P2P 
networks. To minimize the average download time, a simple, 
distributed algorithm is analyzed to effectively remove these 
negative factors. 
Meanwhile, each node in a P2P network may have 
different transmission capacities due to the distance or the 
numbers of hops among nodes that surely affect its 
transmission time, which in turns affects the transmission 
performance. Moreover, as the networks go diversified, the 
nodes in a generic P2P network are located in heterogeneous 
networks, like a fixed xDSL network or a wireless HSDPA 
network. In this article, we base on the RPF concept and add 
transmission time among nodes into consideration when 
scheduling the file piece distribution over a P2P network in a 
heterogeneous network environment. 
 
III. MODEL DEFINITION 
A file sharing P2P network can be modeled as a directed 
graph G=<V, E>, where a set of nodes (V) is composed of 
peers, and a set of edges (E) shows the connectivity among 
peers. For piece-based file sharing, a M*N matrix S is used to 
record the piece owning status for each node where M is the 
number of nodes in the network and N is the number of file 
pieces. The matrix S defines as (1), 
S୧୨
ൌ ൝
2, piece j in node i has been scheduled to receive
1,                                       node i already owns piece j
0,                                                                       otherwise
 ሺ1ሻ 
, where i represents i-th node in the P2P network ሺ0 ൑ i ൑
M െ 1ሻ and j represents j-th piece for the shared file ሺ0 ൑ j ൑
N െ 1ሻ.  
 
We also use two integer vectors U ൌ ሼU଴, Uଵ, ڮ , UMିଵሽ 
and D ൌ ሼD଴, Dଵ, ڮ , DMିଵሽ  to denote the limitation of the 
upload and download capabilities in pieces for each node. A 
M*M matrix T is used to record the transmission time among 
the nodes in the network, where T୧୨ is the transmission time 
per piece between Node i and Node j. An example is 
illustrated in Fig. 1. 
 
Fig.1 An Example about a Piece-based File Sharing P2P Network 
There are four nodes in the network. The shared file is 
divided into eight pieces and U ൌ ሼ1,1,1,2ሽ ,  D ൌ ሼ2,3,2,3ሽ . 
Therefore, we can generate a 4*8 matrix S as (2) and a 4*4 
matrix T as (3). 
S ൌ ൦
0 1 1 1 0 0 1 1
1 1 0 1 1 0 1 0
0
0
1
0
0
0
1
1
0
1
1
0
1
0
1
1
൪     ሺ2ሻ 
T ൌ ൦
0 66.19 10.83 130.63
66.19 0 327.52 37.94
10.83
130.63
327.52
37.94
0
132.32
132.32
0
൪  ሺ3ሻ 
A possible piece distribution scheduling is: 
z Node0 sends piece 1 to Node3。 
z Node1 sends piece 0 to Node0。 
z Node2 sends piece 6 to Node3。 
z Node3 sends piece 4 to Node0 and Node2。 
The matrix S becomes (4) as below. 
S ൌ ൦
2 1 1 1 2 0 1 1
1 1 0 1 1 0 1 0
0
0
1
2
0
0
1
1
2
1
1
0
1
2
1
1
൪     ሺ4ሻ 
Refer to (3), we can find out Node0 is the first to complete 
the job that receives piece0 from Node1 at time 
=66.19ms.Therefore, S଴଴ ൌ 1, uଵ ൌ uଵ െ 1, d଴ ൌ d଴ െ 1  and 
continue to schedule the piece distribution again until S୧୨ ൌ
1, ׊i, j. At last, the process ends when all nodes have all file 
pieces for the shared file. 
IV. PIECE DISTRIBUTION SCHEDULING ALGORITHMS 
In this section, we discuss four piece distribution 
scheduling algorithms in a piece-based file sharing P2P 
network - RPF, MDNF, RPF with a STT requesting node, and 
a STT requesting node first with RPF algorithms. 
This full text paper was peer reviewed at the direction of IEEE Communications Society subject matter experts for publication in the IEEE "GLOBECOM" 2009 proceedings.
978-1-4244-4148-8/09/$25.00 ©2009
Authorized licensed use limited to: National Taiwan Univ of Science and Technology. Downloaded on March 16,2010 at 08:45:58 EDT from IEEE Xplore.  Restrictions apply. 
As the transmission time among nodes in (3), the job that 
Node1 sends piece0 to Node3 need 37.94ms to complete. 
Hence, Sଷ଴ ൌ 1, uଵ ൌ uଵ െ 1, dଷ ൌ dଷ െ 1 . Then continue to 
schedule again till S୧୨ ൌ 1, ׊i, j. 
C. RPF with a STT Requesting Node First 
As the technique of heterogeneous networks is fast 
developing, the evolution of networks varies from the cable 
modem, xDSL, T1 to FTTx series in a fixed network 
environment, and from Wi-Fi, 3G, HSDPA, to the emerging 
WiMAX and 3GPP LTE in a wireless network environment. 
A computation node can have different choices to access 
Internet, so that the networking capability diversifies. On 
facing the heterogeneity of networking capacity in a modern 
file sharing P2P network, RPF with a STT requesting node 
algorithm is presented to shorten the complete time for the 
P2P file sharing in a more realistic way. Similar to RPF, one 
of nodes which own the rarest piece is chosen to send the 
rarest piece out first. Moreover, the destination node is also 
selected based on the shortest transmission time from a sender 
node to all other nodes which lack this piece. The RPF with a 
STT requesting node algorithm is shown in Fig. 4. 
 
Fig.4 RPF with a STT Requesting Node First Algorithm 
For the same example in Fig.1, the piece distribution is 
scheduled as below based on RPF with a STT requesting node 
algorithm: 
z Node0 sends piece2 to Node2 
z Node1 sends piece0 to Node3 
z Node2 sends piece5 to Node0 
z Node3 sends piece4 to Node0 and Node2 
And the array S becomes as below. 
൦
0 1 1 1 0 0 1 1
1 1 0 1 1 0 1 0
0
0
1
0
0
0
1
1
0
1
1
0
1
0
1
1
൪    
ൌ൐   ൦
0 1 1 1 2 2 1 1
1 1 0 1 1 0 1 0
0
2
1
0
2
0
1
1
2
1
1
0
1
0
1
1
൪  ൌ൐ ڮ  
As the transmission time among nodes in (3), the jobs that 
Node0 sends piece2 to Node2 and Node2 sends piece5 to 
Node0 need 10.83ms to complete. Hence, Sଶଶ ൌ 1, S଴ହ ൌ
1, u଴ ൌ u଴ െ 1, uଶ ൌ uଶ െ 1, d଴ ൌ d଴ െ 1, dଶ ൌ dଶ െ 1 . Then 
continue to schedule again till S୧୨ ൌ 1, ׊i, j.  
This algorithm is based on RPF to choose the rarest piece 
to transmit first. However, there exists other choice having a 
shorter transmission time but failed to be chosen. We depict 
one example in the later subsection. 
D. A STT Requesting Node First with RPF 
Based on the above problem, a STT requesting node first 
with RPF algorithm is presented. The shortest transmission 
time among the sender node and all other node which lacks 
this piece is selected to send out the rarest piece in the 
scheduling. The detailed algorithm is shown in Fig. 5. 
 
 
Fig.5 A STT Requesting Node First with RPF Algorithm 
For the same example in Fig.1, the piece distribution is 
scheduled as below based on a STT requesting node first with 
RPF algorithm: 
z Node0 sends piece2 to Node2 
z Node1 sends piece0 to Node3 
z Node2 sends piece5 to Node0 
z Node3 sends piece7 to Node1 and sends piece4 to 
Node0 
And the array S becomes as below. 
൦
0 1 1 1 0 0 1 1
1 1 0 1 1 0 1 0
0
0
1
0
0
0
1
1
0
1
1
0
1
0
1
1
൪ 
k א ሼh|T୧୦ ൌ minሼT୧୸|ሺdሾzሿ ൏ ܦሾzሿሻ, z א ሾ0, M െ 1ሿ, z ് iሽሽ 
j א ሼt|A୲ ൌ MaxሼAୱ|ሺS୩ୱ ൌ 0ሻ, s א ሾ0, N െ 1ሿሽሽ 
Input: S: M*N matrix, A :1*N matrix, T:M*M matrix,  U,D:1*M 
matrixes , 
u: 1*M, // maintain the current upload capability,  
d: 1*M // maintain the current download capability 
Output: file transmission scheduling 
do { 
For ( i=0 to M-1){ 
  While (u[i]<U[i]) { 
    Choose Node k to receive, where 
Choose piece j to send, where 
} 
   } 
One of scheduled jobs is processed 
} Until (S୧୨ ൌ 1, ׊i, j) 
k א ሼh|T୧୦ ൌ min൛T୧୸|ሺdሾzሿ ൏ ܦሾzሿሻANDሺS୸୨ ൌ 0ሻ,
z א ሾ0, M െ 1ሿ, z ് iሽሽ 
Input: S: M*N matrix, A :1*N matrix, T:M*M matrix,  U,D:1*M 
matrixes ,  
u: 1*M, // maintain the current upload capability,  
d: 1*M // maintain the current download capability 
Output: file transmission scheduling 
do { 
 For ( i=0 to M-1){ 
 While (u[i]<U[i]) { 
   Choose piece j to send, where 
    j א ሼt|A୲ ൌ MaxሼAୱሽ, s א ሾ0, N െ 1ሿሽ 
   Choose Node k to receive, where 
 } 
   } 
One of scheduled jobs is processed 
} Until (S୧୨ ൌ 1, ׊i, j) 
This full text paper was peer reviewed at the direction of IEEE Communications Society subject matter experts for publication in the IEEE "GLOBECOM" 2009 proceedings.
978-1-4244-4148-8/09/$25.00 ©2009
Authorized licensed use limited to: National Taiwan Univ of Science and Technology. Downloaded on March 16,2010 at 08:45:58 EDT from IEEE Xplore.  Restrictions apply. 
The results from Fig. 10 to Fig. 13 are similar to the 
previous ones. Since some nodes attach to the network via 
wireless network with a lower transmission rate, the average 
complete time is longer than the previous simulations. Among 
four algorithms, a shortest RTT requesting node first with RPF 
algorithm still performs better than others when the P2P nodes 
are in a heterogeneous network environment. 
 
Fig.10 Comparison for the maximal complete time for all nodes of four 
algorithms with varying node numbers (in a heterogeneous network 
environment)  
 
Fig.11 Comparison for the average complete time for all nodes of four 
algorithms with varying node numbers (in a heterogeneous network 
environment) 
 
Fig. 12 Comparison for the maximal complete time for all nodes of four 
algorithms with varying file sizes (in a heterogeneous network environment) 
 
Fig. 13 Comparison for the average complete time for all nodes of four 
algorithms with varying file sizes (in a heterogeneous network environment) 
VI. CONCLUSION 
In the last decade, P2P networks like BT have been widely 
applied for file sharing. Normally, the shared file would be 
divided in pieces first and these pieces are then spread out in 
the P2P network. Rarest Piece First (RPF) is the most common 
way to distribute file pieces. As the heterogeneous networks 
are developing, the transmission conditions among nodes 
become diversified. To meet a more realistic network situation 
in the P2P file sharing, we propose two improved file piece 
distribution algorithms by referring to the transmission 
conditions among nodes. When selecting either a sender node 
or a transmitted piece, we not only consider the rarity of piece 
but also the transmission time among nodes for piece 
distribution. The simulation results show that our proposed 
algorithms can perform better than the traditional RPF scheme 
in a heterogeneous network. 
ACKNOWLEDGMENT 
    The authors gratefully acknowledge the support by the 
National Science Council, Taiwan, under grants NSC98-2221-
E-011-095. 
REFERENCES 
[1] Napster. http://www.napster.com/ 
[2] Gnutella. http://www.gnutella.com/ 
[3] eMule. http://www.emule-project.net/ 
[4] BitTorrent . http://www.bittorrent.com/ 
[5] The BitTorrent Protocol Specification, v1.0, 2004, Available at: 
http://wiki.theory.org/index.php/BitTorrentSpecification 
[6] EContentMag.com, “Chasing the user: The recenue streams of 2006, ” 
[Online], 
http://www.econtentmag.com/Articles/ArticleReader.aspx?ArticleID=14
532, 2005 
[7] Fedora Project. http://torrent.fedoraproject.org/ 
[8] M. Izal, G. Urvoy-Keller, E.W. Biersack, P.A. Felber, A.Al Hamra, and 
L. Garces-Erice, “Dissecting BitTorrent: Five Months in a Torrent’s 
Lifetime, ” in Springer Berlin / Heidelberg,2004 
[9] Dongyu Qiu and R. Srikant, “Modeling and Performance Analysis of 
BitTorrent-Like Peer-to-Peer Networks, ” in ACM SIGGOMM, August 
2004 
[10] Yatin chawathe, Sylvia Ratnasamy, Lee Breslau, Nick Lanham and 
Scott Shenker, “Making gnutella-like P2P systems scalable,” in ACM 
SIGCOMM, August 2003 
[11] Qin Lv, Pei Cao, Edith Cohen, Kai Li and Scott Shenker, “Search and 
Replication in Unstructured Peer-to-Peer Networks,” in ACM ICS, June 
2002 
[12] Ananth Rao, Karthik Lakshminarayanan, Sonesh Surana, Richard Karp 
and Ion Stoica, “Load Balancing in Structured P2P system,” In 
Proceedings of the 2nd International Workshop on Peer-to-Peer 
Systems, Feb. 2003 
[13] Zhiyong Xu, Dan Stefanescu, Honggang Zhang, Laxmi Bhuyan and 
Jizhong Han, “PROD: Relayed File Retrieving in Overlay Networks,” in 
IEEE IPDPS, April 2008 
[14] J. S. K. Chan, V. O. K. Li, and K. S. Lui, “Performance Comparison of 
Scheduling Algorithms for Peer-to-Peer Collaborative File Distribution,” 
in IEEE Journal on Selected Areas in Communications, vol. 25, NO. 1, 
January 2007, pp.146-154 . 
[15] Martha-Rocio Ceballos and Juan-Luis Gorricho, “P2P File Sharing 
Analysis for a Better Performance,” in ACM ICSE, May 2006 
[16] Yuh-Ming Chiu and Do Young Eun, “Minimizing File Downlad Time in 
Stochastic Peer-to-Peer Networks,” in IEEE/ACM transactions on 
networking, vol.16, NO.2, April 2008 
[17] S. Chen, Z Zhang, S. Chen, B. Shi, “Efficient File Search in non-DHT 
P2P Networks,” Computer Communication, Feb. 2008 
 
This full text paper was peer reviewed at the direction of IEEE Communications Society subject matter experts for publication in the IEEE "GLOBECOM" 2009 proceedings.
978-1-4244-4148-8/09/$25.00 ©2009
Authorized licensed use limited to: National Taiwan Univ of Science and Technology. Downloaded on March 16,2010 at 08:45:58 EDT from IEEE Xplore.  Restrictions apply. 
無研發成果推廣資料 
研討會論文 2 2 100% 
1. J.-S. Leu and C.-W. 
Tsai, "A Novel 
Popularity-Independent 
Resource Locating 
Scheme in a P2P 
Network", The 20th IEEE 
Personal, Indoor and 
Mobile Radio 
Communications 
Symposium 2009 (IEEE 
PIMRC 2009), 
pp.2807-2811, Tokyo, 
Japan, Sep. 13-16, 
2009.  
2. J.-S. Leu and M.-H. 
Huang, "Comparison of 
Piece-based File 
Sharing Schemes over a 
Peer-to-Peer Network in 
a Heterogeneous Network 
Environment", IEEE 
Global Communications 
Conference (IEEE 
GLOBECOM 2009), pp.1-6, 
Honolulu, Hawaii, USA, 
Nov. 30 - Dec. 4, 2009.
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 7 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
其他成果 
(無法以量化表達之
成果如辦理學術活
動、獲得獎項、重要
國際合作、研究成果
國際影響力及其他
協助產業技術發展
之 具 體 效 益 事 項
等，請以文字敘述填
列。) 
將文章延伸成文投稿至 Computer Networks，目前修正版本(Major Revision)正
在審查中 
J.-S. Leu and C.-W. Tsai, "Resource Searching in an Unstructured P2P 
Network Based on Cloning Random Walker Assisted by Dominating Set", 
Computer Networks, Major Revision, July 2010 
 
