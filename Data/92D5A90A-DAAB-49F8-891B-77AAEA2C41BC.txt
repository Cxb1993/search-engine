and Kautz graphs [10, 11], hypercubes [24, 29],
star graphs [23], recursive circulant graphs [27,28]
and multidimensional tori [25]. In this project,
we deal with the IST problem on folded hyper-
stars and hyper-stars. The hyper-stars is a lay-
ered graphs.
The hyper-star HS(n, k) with n > 3 and
1 6 k 6 n−1 is defined as follows: its node set is
the set of binary strings of length n with exactly k
1’s, and two nodes are adjacent if and only if one
can be obtained from the other by exchanging the
first symbol with a different symbol (1 with 0, or
0 with 1) in another position. Hypercubes and
star graphs are widespread topologies of intercon-
nection networks. The class of hyper-stars was
introduced by Lee et al. [19] and Kim et al. [18]
as a new type of interconnection network to com-
pete with both hypercubes and star graphs. In-
spired by the idea of El-Amawy and Latifi [7]
that proposed the so-called folded hypercubes to
strengthen the structure of hypercubes, a varia-
tion of hyper-stars was introduced in [19] as fol-
lows. The folded hyper-star FHS(2k, k) is con-
structed from HS(2k, k) by adding edges to con-
nect pairs of nodes whose binary strings are com-
plements of each other.
Properties of hyper-stars and folded hyper-
stars were discussed in [3, 4, 17, 18] and [19], re-
spectively. Lee et al. [19] showed that HS(n, k)
is isomorphic to HS(n, n − k) and has diameter
n − 1, and FHS(2k, k) has diameter k. More-
over, a result in [19] also showed that hyper-
stars and folded hyper-stars have a lower net-
work cost (measured by the product of degree
and diameter) than that of hypercubes, folded
hypercubes, and other variants with the same
number of nodes. More properties in connec-
tion with the regular hyper-star with n = 2k
have been derived. Lee et al. [19] showed that
HS(2k, k) is maximally fault-tolerant (i.e., the
connectivity equals the regularity in a graph),
and HS(2k, k) can be constructed from HS(2k−
1, k − 1) and HS(2k − 1, k) by adding appropri-
ate edges. They further proposed a routing al-
gorithm for HS(2k, k). Kim et al. [18] showed
that HS(2k, k) is node-symmetric, the wide-
diameter of HS(2k, k) is bounded by the short-
est path length plus 4, and the fault-diameter
of HS(2k, k) is bounded by its diameter plus 2
(i.e., 2k + 1). They further proposed an efficient
broadcasting scheme for HS(2k, k) based on a
spanning tree with minimum height. Stronger
structural properties (such as edge-symmetry,
super-connectivity and orientability) and some
embedding schemes for hyper-stars were provided
in [3, 4] and [17], respectively.
In this project, we study the IST problem
on folded hyper-stars and layered graphs(hyper-
stars). We will propose an algorithm to construct
k+1 ISTs on a folded hyper-star FHS(2k, k) and
k ISTs on a hyper-star HS(2k, k). The rest of
this report is organized as follows. Section 2 pro-
vides some useful notation and structural prop-
erties of FHS(2k, k) including node-symmetry.
Section 3 presents our algorithm for constructing
ISTs on folded hyper-stars and shows its correct-
ness. The final section contains our concluding
remarks.
2 Preliminaries
For each node x ∈ FHS(2k, k) with binary
string x = x1x2 . . . x2k, we define ρi(x) to be
the operation that exchanges x1 with xi provided
that 2 6 i 6 2k and xi = x¯1 (i.e., xi is the com-
plement of x1). In this case, (x, ρi(x)) is called
a normal edge. Also, we define ρ∗(x) to be the
operation that takes the complement for all sym-
bols xi, i = 1, 2, . . . , 2k. In this case, (x, ρ∗(x)) is
called a complement edge. For example, Figure 1
shows the graph FHS(6, 3), where each node is
labeled by its binary representation and its octal
representation. Solid lines indicate normal edges
and dotted lines represent complement edges.
For notational convenience, we also use the nota-
tion x
i−→ y if ρi(x) = y (respectively, x ∗−→ y if
ρ∗(x) = y) to mean that x and y are connected by
a normal edge (respectively, complement edge).
For example, 001110
4−→ 101010 2−→ 011010 ∗−→
100101
5−→ 000111 represents a path connecting
nodes 001011 and 000111 in FHS(6, 3).
next1x(i) =
minH0x(i, 2k) if i 6= ∗, xi = 0, |H0x(k, 2k)|
6= k, and H0x(i, 2k) 6= ∅.
minH0x(k, 2k) if i 6= ∗, xi = 0, |H0x(k, 2k)|
6= k, and H0x(i, 2k) = ∅.
i if i 6= ∗, xi = 0, and
|H0x(k, 2k)| = k.
F1(minH
1
x(i, 2k)) if i 6= ∗, xi = 1, |H1x(k, 2k)|
6 k/2, and H1x(i, 2k) 6= ∅.
∗ if i 6= ∗, xi = 1, |H1x(k, 2k)|
6 k/2, and H1x(i, 2k) = ∅.
F1(i) if i 6= ∗, xi = 1, and
|H1x(k, 2k)| > k/2.
F1(minH
1
x(k, 2k)) if i = ∗ and 0 6= |H1x(k, 2k)|
6 k/2.
∗ if i = ∗ and (|H1x(k, 2k)| >
k/2 or |H1x(k, 2k)| = 0).
For instance, if x = 0101010011, we have H0x =
{1, 3, 5, 7, 8} and H1x = {2, 4, 6, 9, 10}. In this
case, |H1x(5, 10)| = 3 > 5/2. Then, next0x(6) =
6, next0x(7) = F0(8) = 4, next
0
x(8) = F0(7) = 2,
next0x(9) = 9, next
0
x(10) = 10, and next
0
x(∗) =
∗. On the other hand, if x = 1011010010, we
have H0x = {2, 5, 7, 8, 10}, H1x = {1, 3, 4, 6, 9},
and |H1x(5, 10)| = 2 < 5/2. Then, next1x(6) =
F1(9) = 5, next
1
x(7) = 8, next
1
x(8) = 10,
next1x(9) = ∗, next1x(10) = 7, and next1x(∗) =
F1(6) = 2.
Since FHS(2k, k) is a regular graph with de-
gree k + 1 and we would like to construct a set
of k + 1 ISTs rooted at 0k1k, the root of each
IST has only one child. Let Ti denote the span-
ning tree where the root and its unique child
are connected by an edge with label i. We
now design an algorithm to construct the set
T = {Ti : i ∈ J ∪ {∗}} for FHS(2k, k). The
construction can be carried out by describing the
parent of every node in each spanning tree Ti. For
each node x(6= 0k1k) ∈ FHS(2k, k) with binary
string x = x1x2 . . . x2k, we perform the following
procedure:
Procedure Gen-Parents(x)
begin
for each i ∈ J ∪ {∗} do
j = nextbx(i) where b = x1 ∈ {0, 1};
parent(Ti, x) = ρj(x);
enddo
end Gen-Parents
Example 1. We consider the construction of
ISTs in FHS(6, 3). From the procedure Gen-
Parents, all information for calculating the par-
ent of each node x(6= 0313) ∈ FHS(6, 3) in T4 can
be summarized in Table 1.
Table 1: The parent of a node x(6= 0313) ∈
FHS(6, 3) in T4.
x next0x(4) parent(T4, x)
000111 (07) - -
001011 (13) 3 100011 (43)
001101 (15) 4 101001 (51)
001110 (16) 4 101010 (52)
010011 (23) 2 100011 (43)
010101 (25) 4 110001 (61)
010110 (26) 4 110010 (62)
011001 (31) 3 110001 (61)
011010 (32) 3 110010 (62)
011100 (34) * 100011 (43)
x next1x(4) parent(T4, x)
100011 (43) 4 000111 (07)
100101 (45) 2 010101 (25)
100110 (46) 2 010110 (26)
101001 (51) 5 001011 (13)
101010 (52) 6 001011 (13)
101100 (54) * 010011 (23)
110001 (61) 5 010011 (23)
110010 (62) 6 010011 (23)
110100 (64) * 001011 (13)
In what follows, we show the correctness of the
algorithm.
Lemma 2. For each i ∈ J∪{∗}, Ti is a spanning
tree rooted at 0k1k in FHS(2k, k).
next0x(i) =
i if xi = 1.
F0(minH
0
x(i, 2k)) if xi = 0 and H
0
x(i, 2k) 6= ∅.
F0(minH
0
x(k, 2k)) if xi = 0 and H
0
x(i, 2k) = ∅.
For x1 = 1, let next
1
x(i) be a one-to-one map-
ping of J onto H0x given by
next1x(i) =
minH0x(i, 2k) if xi = 0 and H
0
x(i, 2k) 6= ∅.
minH0x(k, 2k) if xi = 0 and H
0
x(i, 2k) = ∅.
F1(i) if xi = 1.
Here we omit the details of the proof to avoid
tedious repetition and/or similarity. As a conse-
quence, all ISTs of HS(2k, k) can be constructed
by using the procedure Gen-Parents.
References
[1] F. Bao, Y. Funyu, Y. Hamada, and Y.
Igarashi, Reliable broadcasting and secure
distributing in channel networks, Proc 3rd
Int Symp on Parallel Architectures, Algo-
rithms and Networks (ISPAN’97), Taipei,
1997, pp. 472–478.
[2] Y.-S. Chen, T.-Y. Juang, and Y.-Y. Shen,
Congestion-free embedding of 2(n−k) span-
ning trees in an arrangement graph, J Syst
Architecture 47 (2001), 73–86.
[3] E. Cheng and L. Lipta´k, Structural proper-
ties of hyper-stars, Ars Combin 80 (2006),
65–73.
[4] E. Cheng and M. Shah, A strong structural
theorem for hyper-stars, Congr Numer 179
(2006), 181–191.
[5] J. Cheriyan and S.N. Maheshwari, Finding
nonseparating induced cycles and indepen-
dent spanning trees in 3-connected graphs,
J Algorithms 9 (1988), 507–537.
[6] S. Curran, O. Lee, and X. Yu, Finding
four independent trees, SIAM J Comput 35
(2006), 1023–1058.
[7] A. El-Amawy and S. Latifi, Properties and
performance of folded hypercubes, IEEE
Trans Parallel Distrib Syst 2 (1991), 31–42.
[8] P. Fragopoulou, Edge-disjoint spanning
trees on the star network with applications
to fault tolerance, IEEE Trans Comput 45
(1996), 174–185.
[9] P. Fraigniaud and C.-T. Ho, Arc-disjoint
spanning trees on the cube-connected-
cycles network, Proc Int Conf on Paral-
lel Processing (ICPP’91), Vol.1: Architec-
ture/Hardware, Austin, Texas, 1991, CRC
Press, pp. 225–229.
[10] Z. Ge and S.L. Hakimi, Disjoint rooted span-
ning trees with small depths in deBruijn and
Kautz graphs, SIAM J Comput 26 (1997),
79–92.
[11] T. Hasunuma and H. Nagamochi, Indepen-
dent spanning trees with small depths in
iterated line digraphs, Discrete Appl Math
110 (2001), 189–211.
[12] S.-Y. Hsieh and C.-J. Tu, Construct-
ing edge-disjoint spanning trees in locally
twisted cubes, Theoret Comput Sci 410
(2009), 926–932.
[13] A. Huck, Independent trees in planar
graphs, Graphs Combin 15 (1999), 29–77.
[14] A. Itai and M. Rodeh, The multi-tree ap-
proach to reliability in distributed networks,
Inform Comput 79 (1988), 43–59.
[15] Y. Iwasaki, Y. Kajiwara, K. Obokata, and
Y. Igarashi, Independent spanning trees of
無研發成果推廣資料 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
成 果 發 表 在 Networks, 篇 名 :Independent Spanning Trees on Folded 
Hyper-Stars. 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
