 1
行政院國家科學委員會專題研究計畫成果報告 
應用最佳化理論及演算法推論人類群體基因組單體型之研究（I） 
Haplotyping population by optimization theorems & algorithms（I） 
計畫編號：NSC 96－2221－E－006－015 
執行期限：96 年 8 月 1 日至 97 年 7 月 31 日 
主  持  人  ：王逸琳 國立成功大學工業與資訊管理學系 
參與人員：馬家宜、陳正楠、劉姿儀、王建傑、李俊賢、陳志偉 
 
一、中文摘要 
 
為了確定人類 DNA 的功能，科學家
們會使用人類每條染色體上被稱為基因
組單體型(haplotype) 的基因鹼基組合來
做進一步的分析。由於直接取得基因組單
體型資料將耗費許多成本及時間，因此科
學家們通常會使用在一對染色體上被稱
為基因型(genotype) 的基因鹼基混合敘
述資料來代替基因組單體型資料以進行
分析。然而，如此一來將無法僅由基因型
資料所含的資訊來加以正確地推論出每
條染色體上基因的鹼基組合，所以我們才
必須求解人類群體基因組單體型推論
(Population Haplotype Inference， 簡稱
PHI) 問題，以從一群人的基因型資料來
推論出其相對應的基因組單體型資料。在
眾多的 PHI 問題相關文獻中，近年來以
應用最大簡約原則(Pure Parsimony)的PHI 
問題(簡稱 HIPP) 之相關研究最受矚目。
HIPP 問題旨在使用最少的不同基因組單
體型，來解讀一個給定的基因型矩陣。由
於其問題本質含有最佳化的目標，因此相
關文獻中通常以作業研究中的線性整數
規劃(Integer Linear Programming，簡稱
ILP)模式來求解 HIPP 問題之最佳解。本
研究擬詳細回顧相關文獻，理解各類解法
的優劣，並選擇重要的文獻實作其演算
法，以初步理解文獻中各演算法的實作效
率。 
關鍵詞：生物資訊；基因組單體型推論；
最大簡約原則；整數規劃；啟發式演算法；  
 
Abstract 
 
In order to understand and analyze the 
function of DNA, researchers have to obtain 
each haplotype of an individual for analysis. 
Nevertheless, collecting the haplotypes 
usually requires significant efforts and costs, 
and thus the genotypes are collected for 
analysis. Since the genotype data contains 
insufficient information to identify the 
combination of DNA sequence in each copy 
of a chromosome, one has to solve the 
population haplotype inference (PHI) 
problem to infer haplotype data from 
genotype data for a population. Previous 
researches require criterions to define the 
objectives for the PHI problem. Among those 
criterions, the pure parsimony criterion 
(HIPP) proposed by Gusfield (2003) has 
received much attention recently. HIPP seeks 
the minimum number of distinct haplotypes 
to resolve a given genotype matrix. Two 
integer linear programming (ILP) models 
have been proposed to solve the HIPP 
problem to optimality. Several heuristic 
algorithms have also been reported to have 
good performance in solving the HIPP 
problem. This research focuses in solving the 
HIPP problem based on the mathematical 
programming methods and heuristic 
algorithms. We will survey the literature, 
analyze pros and cons for different HIPP 
algorithms, and implement several important 
HIPP algorithms to understand their 
empirical performance. 
 
Keywords: Bioinformatics; Haplotype 
Inference; Pure Parsimony; Mathematical 
Programming; Heuristics 
 
 G
3
and the number of distinct haplotypes is 
minimized. See Figure 1 for an example. 
Given the genotype matrix 
={202,021,212}, there are 2, 1, and 2 
candidate haplotype pairs to resolve genotype 
1, 2, and 3, respectively.  Furthermore, there 
are 6, 5, 5, or 4 distinct haplotypes if we 
select 1 3 4( , , )p p p , 1 3 5( , , )p p p , 2 3 4( , , )p p p  
or 2 3 5( , , )p p p
2 3 5, )
 to resolve , respectively.  
Using the pure parsimony criterion, 
G
( ,p p p  will be selected to resolve all 
the genotypes since this combination induces 
the minimum number of distinct candidate 
haplotypes. 
 
三、文獻中主要之PHI演算法 
 
The HIPP problem is APX-hard, as 
shown by Lancia et al. (2004). The HIPP 
solution methods in the literature are either 
based on the mathematical programming 
techniques such as integer linear 
programming (ILP) by Gusfield (2003) and 
Brown and Harrower (2006) and quadratic 
integer programming by Huang et al. (2005) 
and Kalpakis and Namjoshi (2005), or the 
heuristic algorithm by Li (2005). In particular, 
Gusfield (2003) gives the first ILP 
formulation called RTIP to model the HIPP 
problem. For each genotype, RTIP first 
enumerates all the candidate haplotype pairs 
and then gives constraints to ensure that 
exactly one among all the possible pairs for 
each genotype is selected. The formulation 
contains potentially exponential number of 
variables and constraints with respect to the 
number of SNPs. Although RTIP is 
potentially exponential-sized, it is practically 
faster than PolyIP, the polynomial-sized ILP 
formulation proposed by Brown and 
Harrower (2006). Wang and Xu (2003) give 
a branch and bound algorithm called HAPAR. 
HAPAR also takes a lot of computational 
time since it tries out all the combinations to 
solve the HIPP problem. RTIP, PolyIP, and 
HAPAR all calculate the exact optimal 
solution for the HIPP problem, but they 
usually consume a lot of computational 
resources and time, and may not be suitable 
for solving large-scale HIPP problems.  
Recently, Boolean Satisfiability (SAT) 
has been proposed for solving the HIPP 
problem with success. According to Lynce 
and Marques-Silva (2006, 2008), their 
SAT-based method called SHIPs can 
calculate exact optimal solutions for 
large-scale HIPP problems with sizes up to 
50 genotypes and 100 sites, which are often 
unsolvable by RTIP, PolyIP, and HAPAR. 
Techniques such as local search (see Lynce 
et al., 2008) have also been used to improve 
the efficiency of SHIPs. Furthermore, Graca, 
et al. (2007, 2008) propose Pseudo-Boolean 
Optimization (PBO) models called PolyPB 
and its reduced version called RPoly, based 
on the PolyIP model. RPoly has smaller size 
and consistently better efficiency than 
PolyPB. Their experiments indicate RPoly is 
the state-of-the-art method since it can solve 
more large-scale HIPP cases and is also often 
faster than SHIPs. Although these optimal 
HIPP algorithms give the theoretical optimal 
HIPP solutions, whether these optimal 
solutions also have good practical 
effectiveness in terms of small error rates (i.e. 
the proportion of genotypes whose inferred 
haplotype pairs are different from the 
original ones) requires further evaluation. 
Heuristics are important in solving the 
PHI problems since the methodologies for 
obtaining the exact optimal solutions are not 
only theoretically difficult but also 
time-consuming in practice. Based on 
different Integer Quadratic Programming 
formulations, Huang et al. (2005) give an 
approximation algorithm called SDPHapInfer, 
and Kalpakis and Namjoshi (2005) propose 
another heuristic algorithm to solve their 
Integer Quadratic Programming HIPP 
formulation. SDPHapInfer performs well for 
smaller cases but its error rates increase 
dramatically for larger cases (see Section 
Computational Experiments and Discussion 
for details). The heuristic algorithm by 
Kalpakis and Namjoshi (2005) requires 
further evaluation. On the other hand, the 
parsimonious tree growing heuristic 
algorithm called PTG by Li et al. (2005) is 
very fast, but its theoretical effectiveness in 
terms of optimality gap (i.e. the difference in 
the number of distinct candidate haplotypes 
used, compared with the optimal solution) 
remains to be evaluated. 
 
4.1 Experiments on  gene  2β AR
 
We use a sample of the human 2 ARβ  
gene identified by Drysdale et al. (2000) for 
our testing. Similar experiments have also 
been conducted in Stephens and Donnelly 
(2003), Huang et al. (2005), Li et al. (2005), 
and Wang and Xu (2003). It contains 18 
different genotypes and 13 SNPs from 121 
individuals, and should be resolved by the 10 
haplotypes related to asthmatic cohort. 
Among all algorithms we have tested, RTIP 
and HAP all obtain 10 distinct haplotypes on 
human 2 ARβ  gene data, thus they are all 
optimal with respect to the pure parsimony 
criterion. The error rate of HAP is 0. 
However, RTIP has an error rate 6% due to 
the existence of multiple optimal solutions. 
Both SDP and PTG conduct randomized 
mechanism which may result in different 
solutions even for the same genotype matrix. 
Thus we apply SDP and PTG to solve this 
genotype matrix for three times. SDP obtains 
12 haplotypes and has an error rate 11% on 
average. On the other hand, PTG obtains 10, 
11, and 12 haplotypes, which correspond to 
the error rates of 0%, 17%, and 17%, 
respectively. 
 5
 
4.2 Experiments on simulated data  
 
We use the program by Hudson (2002) to 
simulate a  haplotype matrix, and 
then randomly pair two haplotypes from 
these  haplotypes to produce an 
2m n×
2m m n×  
genotype matrix in a way that none of the 
 haplotypes is repeatedly paired. Similar 
simulated techniques can also be found in 
Stephens et al. (2001), Niu et al. (2002), 
Gusfield (2003), Brown and Harrower (2006), 
Huang et al. (2005), and Wang and Xu 
(2003). 
2m
Recombination is a process during the 
formation of gametes where portions from 
the paternal and maternal genome are 
exchanged. Recombination may cause the 
haplotypes in offspring to be different from 
those in their parents, and higher 
recombination rate cause more different 
haplotypes in offspring. We simulate the 
input genotypes and haplotypes with 
different recombination rate r  to evaluate 
the effectiveness for several PHI algorithms. 
In particular, we have tested three 
recombination rates:  (no 
recombination), 
0r =
4r =  and . 16r =
For each tested recombination rate (i.e. r 
= 0, 4, or 16), nine problem sets of different 
genotype matrix sizes (10×10, 20×10, 30×10, 
10×20, 20×20, 30×20, 10×30, 20×30, and 
30×30) are simulated, where 30 random test 
cases for each problem set have been 
generated. The size of the largest genotype 
matrix tested in our experiments (i.e. 30×30) 
is fairly large, compared with the largest 
cases, 40×10 and 25×10, tested in Wang and 
Xu (2003) and Huang et al. (2005), 
respectively. In fact, the number of SNP 
affects the running time more than the 
number of genotypes, especially for some 
algorithms (e.g. RTIP) that require 
enumeration of all candidate haplotype pairs. 
Two parameters, optimality gap and error 
rate, for each algorithm in each test case are 
recorded for evaluation. For each parameter, 
we use their average over the 30 test cases of 
the same problem set to represent its overall 
performance. Note that we do not list the 
optimality gap for the algorithms RTIP and 
HAP, since RTIP is already optimal and 
HAP may not resolve all the genotypes 
which makes its optimality gap meaningless. 
Although the computational time (see 
Table 1, Table 2, and Table 3) in our 
experiments are not for the purpose of 
efficiency comparison, the results indicate 
that PTG solves the HIPP very quickly. 
Among these three heuristics, PTG is the 
most efficient algorithm. On the other hand, 
both RTIP and SDP require much more time 
than the others. For our convenience, we only 
record the cases solvable within two hours 
for each algorithm. Although SDP can be 
terminated in two hours in our tests, RTIP 
may take longer. Thus we list the number of 
cases solvable within two hours by RTIP. For 
example, 10×30 (26/30) in the first column 
of Table 1, Table 4, and Table 7 indicates 
that only 26 out of the 30 test cases for the 
10×30 problem sets are solvable by RTIP 
within two hours for the cases without 
recombination. 
Table 7. Error rates (in %) for cases 
without recombination ( )  0r =
Problem sets GHI PTG HAP SDP
10×10 (30/30) 14.33 14.00 18.67 15.67
20×10 (30/30) 10.83 9.83 15.83 9.33
30×10 (30/30) 5.00 6.11 15.56 9.00
10×20 (30/30) 33.33 28.67 37.00 43.33
20×20 (30/30) 21.67 16.67 23.17 34.83
30×20 (30/30) 15.78 10.56 26.00 30.22
10×30 (26/30) 52.31 48.85 49.23 66.15
20×30 (27/30) 31.30 36.48 33.33 50.19
30×30 (28/30) 28.21 26.90 33.69 50.00
 7
 
Table 8. Error rates (in %) for cases 
without recombination ( )  4r =
Problem sets RTIP PTG HAP SDP 
10×10 (30/30) 26.33 26.67 24.33 24.67
20×10 (30/30) 10.50 13.00 19.67 13.17
30×10 (30/30) 6.33 8.33 18.44 9.56
10×20 (30/30) 39.00 45.33 52.67 48.33
20×20 (30/30) 18.67 28.67 34.00 46.50
30×20 (30/30) 11.67 22.00 24.44 36.11
10×30 (29/30) 38.62 52.76 45.86 66.21
20×30 (28/30) 28.21 34.64 39.82 57.50
30×30 (30/30) 15.11 24.44 30.22 47.22
 
Table 9. Error rates (in %) for cases 
without recombination ( )  16r =
Problem sets RTIP PTG HAP SDP 
10×10 (30/30) 24.33 35.67 29.33 33.00
20×10 (30/30) 20.17 28.67 28.83 24.33
30×10 (30/30) 16.00 28.11 24.78 22.44
10×20 (30/30) 40.00 57.67 59.67 57.67
20×20 (30/30) 24.83 42.50 40.00 50.83
30×20 (30/30) 20.33 36.22 31.89 44.78
10×30 (30/30) 57.00 63.33 59.33 73.00
20×30 (30/30) 35.17 47.50 49.50 58.17
 
For the cases with recombination (i.e. 
 or ), among those non-optimal 
algorithms, the optimality gap in Table 5 and 
Table 6 shows that PTG performs the best, 
whereas SDP has smaller optimality gap for 
cases up to 10 SNPs but the gap increases 
dramatically for larger cases. In terms of 
error rate (see Table 8 and Table 9), RTIP 
again has the smallest error rate than all other 
algorithms in all the cases with 
recombination. For algorithm A and B, let 
represent A has smaller error rate than 
B. In general,  for the 
cases of , and  for 
the cases of . From Table 7, Table 8, 
and Table 9, we also find that the error rates 
are larger for cases with the same number of 
SNPs but fewer genotypes, due to the lack of 
sufficient information to infer haplotypes 
(similar conclusion can also be found in 
Huang et al. (2005) and Wang and Xu 
(2003)).  
4r =
A ;
16r =
4r =
r =
B
PTG HAP SDP; ;
HAP PTG;
16
SDP;
 
Table 10. Comparative performance of six 
PHI algorithms  
Performance 
Index 
RTIP PTG HAP SDP
Time (overall) 3 1 - 2 
Opt gap (r=0) - 1 - 2 
Opt gap (r=4,16) - 1 - 2 
Error rate (r=0) 1 2 3 4 
Error rate (r=4) 1 2 3 4 
Error rate (r=16) 1 3 2 4 
 
PTG performs very well for cases without 
recombination rate, but has consistently 
worse theoretical and practical effectiveness, 
especially when the recombination rate 
increases.  
In summary, Table 10 lists the 
comparative performance for these four PHI 
algorithms, and ranks their relative 
performance along a given parameter (time, 
optimality gap, or error rate); as the relative 
performance worsens, the ranking gets higher. 
From the results, we recommend RTIP for 
researchers who can bear with longer running 
time but seek a solution with the smallest 
error rates. On the other hand, PTG is 
recommended for researchers seeking a very 
quick solution with promising quality.  
 
五、計畫成果自評 
 
The research results of this project are 
well fit with the research purpose of the 
original proposal as follows.  
We have surveyed state-of-the-art PHI 
algorithms and implement them to test their 
performance in both error rates and 
optimality gaps. The results can be used for 
our next-year project, in which we shall give 
our own PHI algorithms and then we can 
compare the performance of our proposed 
algorithms with the algorithms done in this 
project.  This research is suitable for 
publishing and the author is currently writing 
the manuscript for publishing. 
 
 9
of Satisfiability Testing, August 2006, 
Seattle, USA. 
Lynce, I., Marques-Silva, J., 2008. Haplotype 
Inference with Boolean Satisfiability. 
International Journal on Artificial 
Intelligence Tools, 17 (2), 355-387. 
Lynce, I., Marques-Silva, J., Prestwich, S., 
2008. Boosting Haplotype Inference 
with Local Search. Constraints: An 
International Journal, 13 (1-2), 155-179. 
Niu, T., Qin, Z.S., Xu, X., Liu, J.S., 2002. 
Bayesian haplotype inference for 
multiple linked single-nucleotide 
polymorphisms. American journal of 
human genetics 70, 157-169. 
Stephens, M., Smith, N.J., Donnelly, P., 2001. 
A new statistical method for haplotype 
reconstruction from population data. 
American journal of human genetics 68, 
978-989. 
Stephens, M., Donnelly, P., 2003. A 
comparison of Bayesian methods for 
haplotype reconstruction from 
population genotype data. American 
journal of human genetics 73, 
1162-1169. 
Wang, L., Xu, Y., 2003. Haplotype inference 
by maximum parsimony. Bioinformatics 
19, 1773-1780. 
 
In the first two days I have intensive meetings with Prof. Tsai and his Ph.D. student Feng 
Li. We worked on the math formulations for pavement optimization models in which we 
consider the deteriorating rate as a piecewise linear function so that we can use integer 
programming to model it. I also helped Feng understand how to use CPLEX callable lib for 
testing models. In the mean time, I had lunches with several ISyE graduate students from 
Taiwan, including my former students in NCKU. I have dinner with Prof. Sokol and his wife in 
a Japanese restaurant (Umezono) in the first day. In the 2nd day I have dinner with Prof. 
Johnson, together with Yu-Heng Chang, a current Ph.d. student of Prof. Johnson who just 
passed the comprehensive exam on the same day. I invited Prof. Johnson to attend the 
Sino-Japanese Optimization Meeting 2008 (http://www.ncts.ncku.edu.tw/sjom/index.html) that 
is to be held in NCKU this coming August.   
 
Since this INFORMS conference is held in Atlanta, where GA Tech is, there are many 
ISyE former and current students, as well as faculties. Therefore, the Integer Programming (IP) 
and Stochastic Optimization become the main themes of the conference, since these are part of 
the research fields that ISyE faculties are good at. I have met some talented students. For 
example, Doug Altner (http://www2.isye.gatech.edu/~daltner/) from ISyE who is doing 
research in stochastic maximum flow problems. I also met some old friends. For example, 
Jin-Hwa Song (jinhwa.song@exxonmobil.com), an ISyE graduate who is currently working 
for ExxonMobil, is very good at integer programming and VRP. We discussed problems about 
distillation process that I have been doing for these years. Prof. Jay Rosenberger 
(http://ie.uta.edu/index.cfm?fuseaction=professordescription&userid=2842), another ISyE 
graduate, currently teaches in U. Texas at Arlington, presents a paper about routing UAV based 
on IP formulation techniques. My best friend in GA, Prof. Jean Philippe Richard 
(https://engineering.purdue.edu/IE/People/Faculty/profile?resource_id=9237), currently works 
in the IE dept of Purdue University, has presented and chaired many sessions. He is an expert 
in IP.  
 
