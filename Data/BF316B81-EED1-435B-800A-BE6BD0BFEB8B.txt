 2
貳、英文摘要 
In some specific applications, non-conventional arithmetic systems, such as logarithmic 
number system (LNS) , have better computing performance than conventional arithmetic systems 
such as floating-point (FLP). To enhance the performance of computing systems by taking 
advantage of non-conventional arithmetic systems, we propose an approach for automatic 
arithmetic instruction selection and replacement. We have identified four research stages: 
1. Design of an arithmetic coprocessor with FLP and LNS arithmetic units in an embedded 
system. 
2. Design of a compiler tool to construct the data structure that describes the control flow graph 
(CFG) of C program instructions. 
3. Design of an algorithm to identify the program blocks, within which the conventional 
arithmetic instructions should be replaced by the non-conventional arithmetic instructions. 
4. Implementation of an application in an embedded system that can apply and verify our 
proposed arithmetic co-processor and automatic arithmetic selection algorithm to improve the 
computing performance. 
We have completed the following research works: 
1. Design of an arithmetic coprocessor with FLP and LNS arithmetic instructions on an Altera 
DE2 SOPC board. 
2. Construction of the CFG data structure of C programs by utilizing Lex tool.  
3. Design of the algorithm for the automatic selection of arithmetic instructions. 
4. Implementation of an image object tracking system on the Altera DE2 SOPC board to test the 
effectiveness of our instruction selection algorithm. 
 
Keywords: SOPC (system-on-programmable-chip) system, Floating-point arithmetic, 
Logarithmic number system arithmetic, Automatic instruction selection algorithm, 
Image object tracking system 
 4
∑ −= −= 10 2Mi Fiis xxx ，且 { }1,0  ∈ix 。指數 x 用( M  + 1)個位元編碼，包含 x 的正負號 xs ， F
個小數位元以及 IFM =−  個整數位元，對 A  = S rA a0 ，B  = S rB b0 且C  = S rC c0 而言，對
數數字系統的算術是以下的方式計算： 
 
[ ]
[ ]
[ ] ( )
( ) ( ) ( )
[ ]
Multiplication C A B c a b and S S S
Division C A B c a b and S S S
Addition C A B c a v and S S
A B with v a b and v r
Subtraction C A B
C A B
C A B
r C A
r r
v
                 
                            
                    
                                      
       
= × = + = ⊕
= ÷ = − = ⊕
= + = + =
≥ = − = +
= −
−
Φ
Φ
0
0 0
1 0log
( )
( ) ( ) ( )
        
                                      
c a v and S S
A B with v a b and v r
r C A
r r
v
= + =
≥ = − = − −
Ψ
Ψ
0
0 0
1 0log .             
SA 、 S B 及 SC 分別表示 A、 B 及C 的正負號。以上的公式顯示出在對數數字系統中，乘法
和除法分別使用加法器和減法器就可以實現，而這個特性可以用來增加計算複雜函數的效
率[2]。 
非傳統式的算術數字系統，如 LNS 算術與 RNS 算術，大部分是應用在特殊用途 IC 
(ASIC)設計上，較少應用於處理器的算術運算單元的設計上，其原因有二，第一，非傳統
數字系統的算術運算單元在設計上有先天的限制，例如位元長度較長的LNS加減法運算單
元，其硬體成本將很大。而RNS在除法與比較大小的硬體成本與計算延遲上也是很大。第
二個原因，也是最主要的原因，乃在於一般的程式設計人員對非傳統數字系統的不熟悉，
在使用非傳統算術指令於計算系統的設計上，將遭遇極大的困難。 
本計畫的研究動機即在解決上述的第二個問題，我們首先將在可程式化單晶片系統 
(system-on-programmable chip) 上設計一個具有傳統與非傳統算術運算單元的共同處理器 
(co-processor)。在目前的 SOPC (system-on-programmable-chip)系統 (如 Altera 之 Nios 或
Xilinx的microblaze系統)平台上，我們可以指令呼叫此算術 co-processor來執行算術運算。
其次，我們將針對以 C 程式語言所設計的計算系統進行自動化的指令選擇與置換。在 C 程
式進行編譯 (compilation)之前，我們提出的自動指令選擇系統會先偵測出 C 程式中的那些
程式區塊較適於使用非傳統的算術指令，以便達到 C 程式執行的最佳效率。然後，此系統
會在運算元進入此區塊前增加將傳統的算術運算元轉換為非傳統的算術運算元的指令，而
在運算結果輸出此區塊前，插入轉換指令將非傳統運算結果轉換為傳統格式的運算結果。
 6
3. 研究工作與結果 
3.1 算術共同處理器的設計 
對於第一項研究步驟，我們利用先前在 Xilinx 多媒體發展板上設計完成一個混合浮點
數乘加器與 LNS 加減法單元的算術處理器，我們稱為“混合浮點數/LNS 算術處理器＂
[3]，修改成在 Altera DE2 SOPC 發展板的一個 NIOS II 處理器的 Coprocessor。除了原本的
七個指令(浮點數乘加、浮點數乘減、浮點數除法、LNS 加法、LNS 減法、LNS-to-FLP 轉
換、FLP-to-LNS 轉換)，並增加 LNS 乘法與 LNS 除法指令。 
 
3.2 控制流程圖資料結構與演算法的設計 
對於第一項及第二項研究步驟，由於本研究的主要目的在設計一個演算法來針對程式
碼中之算術運算作算術指令選擇的動作，藉由這樣的動作來減少程式之計算時間。因此，
為了要考慮其算術運算及變數是否符合轉換之條件，我們必須紀錄程式碼中每一個變數的
所有算術運算及其發生之順序，並且紀錄每個變數與其有算術運算關係之互動變數，所以
我們將建立一個變數關連性表格來存放變數與互動變數之關係及變數之算術運算之內容。 
而為了要建立出變數關連性表格，我們必須擁有程式碼中之所有的算術運算以及其發
生之順序，因此我們會先建立一個程式碼佇列來將所有的程式碼內容一行一行的依序地放
進去並以指標上下相連接。接著我們就可以從每一行的程式碼中擷取出其算術運算之內容
以及迴圈之範圍與次數，並根據其程式碼的順序來判斷其算術運算之先後關係，另外，將
由擷取出的迴圈之範圍與次數之資訊來得知每筆算術運算執行之次數。 
為了完成對程式碼佇列擷取其算術運算之內容以及迴圈之範圍與次數，我們將使用專
門用來產生 Scanner 的 Lex 工具，建立 Lex 的 Pattern 來產生 C 語言之 Scanner，此 Scanner
會擷取與我們所定義之 Pattern 內容相符合之 token，以及根據算術規則所撰寫的 Parser 來
 8
3.3 影像物體追蹤系統的設計 
 對於第四項研究步驟，我們是以一個利用電腦視覺追蹤移動影像物體的系統，作為驗
證本研究計畫提出的自動指令選擇系統的應用實例，主要是參考論文[4]所提供的理論與設
計方法來開發。我們所要開發的影像追蹤系統主要的實作項目有四項。第一項是影像的前
景和背景的建立。第二項是建立影像物體的樣本，樣本是我們所追蹤的物體，它的形狀可
以根據需求來設定。第三項工作是預測物體的位置，第四項工作是比較物體的相似度。這
四項工作，我們是在 Altera DE2 development board 上完成。 
在第一項工作，我們是以最簡單的手動方式完成。而第二項工作，樣本的建立上，我
們首先建立一個樣本 xt ={ dt ; dt-1 ; st ; st-1 }，dt 為候選範圍的中心座標(xt ,yt)也就是在時間 t
時的候選樣本中心座標， dt-1 為參考範圍的中心座標(xt-1 ,yt-1 ) 也就是在時間 t-1 時的參考
樣本中心座標， st 為候選範圍的大小，st-1 為參考範圍的大小，而 R(xt-1)為參考樣本範
圍，可以用 dt-1+st-1W 表示。色彩空間的樣本是選用 HSV 的色彩空間，影像中每一個像素
可以用 N=NH˙NS＋NV 表示，  qt(n;x)為候選範圍的色彩分佈，如公式 (1) 所示，
}{∈ N 2,3,..., (d)bt 為某像素的顏色向量在時間 t 於影像位置 d 的區段索引，K 為正規化常
數，w(˙) 為權重函數，為了運算方便設為 1，δ(˙)為 Kronecker delta 函數，如果其運算元
之值等於零則其函數值為 1，反之則為零。 
∑
∈
−−=
)(
])([|)(|);(
xRu
tt ndbduwkxnq δ                           (1) 
在第三項工作，預測物體的位置，我們已開發一種快速影像預測方法來加速影像追蹤的速
度。而在第四項工作，我們係利用Kullback-Leibler divergence [4]所提出的方式來計算兩影
像區塊之間的差異係數，也就是兩個影像區塊統計直方圖的差異程度，其數值越大，代表
差異性愈大。我們係以S來表示此差異係數，如公式(2)所示。 
 101
的算術共同處理器以及自動算術指令選擇的演算法。 
  
5. 參考文獻 
[1] E. E. Swartzlander Jr., D. V. S. Chandra, H. T. Nagle Jr., and S. A. Starks, "Sign/logarithm 
arithmetic for FFT implementation," IEEE Transactions on Computers, vol. C-32, pp. 
526-534, June 1983 
[2] Debasish Das, Krishnendu Mukhopadhyaya, and Bhabani P. Sinha, “Implementation of four 
common functions on an LNS co-processor,” IEEE Transaction on Computers, vol. 44, no. 1, 
pp. 155-161, Jan. 1995. 
[3] Chichyang Chen and Paul Chow, “Design of a versatile cost-effective hybrid 
floating-point/LNS arithmetic processor,” Proceedings of ACM Great Lakes Symposium on 
VLSI (GLSVLSI), Stresa-Lago Maggiore, Italy, March 2007, pp. 540-545. 
[4] P. Perez, C. Hue, J. Vermaak, and M. Gangnet,” Color-based Probabilistic Tracking,” 
European Conference on Computer Vision, p. 661-675, 2002. 
 
 
 
 
 
 
出席國際學術會議心得報告 
 
 
 
 
 
 
 
 
 
 
報告人: 陳啟鏘 
 
 
 
 
 
 
逢甲大學資訊工程系 
 
 
 
 
 
中華民國九十七年四月二十三日 
 此次大會安排的Keynote speech皆十分精彩，內容豐富，切和當前SOC 與Embedded 
system 在設計、製造、及輔助設計的問題與潮流，令與會者收獲頗豐。 
 
 在論文發表方面，有如下幾個Session: 
1. Poster short speech: 四月十七日中午，共計有24篇論文發表，筆者的論文發表也是
其中之一。 
2. Low power cache and circuits: 四月十七日13:40—14:50 
3. Special featured processors: 四月十七日15:10—16:00 
4. Multimedia processors: 四月十七日17:20—18:40 
5. Multicore software: 四月十八日11:20—12:10. 
6. Mulicore processors: 四月十八日14:30—16:10 
 
大會並在Regular session之間穿插Coffee break 。並在四月十八日安排Panel discussions
供大家討論之用。此外，在四月十七日晚上，大會並安排晚宴，讓與會者有更多機會互相認識與
討論。 
   
二、與會心得 
 
本次的研討會聚集了許多來自美國、歐洲、中國、臺灣、日本、韓國等國家的學者專家討論，
使筆者收獲甚多。另外，從Keynote speech的演講，也得到許多啟發。 
 
三、攜回資料名稱及內容 
大會論文集壹冊(Proceedings of IEEE Symposium on Low-Power and High-Speed 
Chips, CoolChips XI, Yokohama, Japan, April 16-18, 2008.) 
  
 
 
 
 
 
 
