  2 
計算，而於時脈週期中的第 17 至 21 週期是作修正計
算。 
+/--/+
ix iy
iσ
1+ix 1+iy
2 i−>> 2 i−>>
  
(a)         
-/+i
σ
iz
1iz +
iθ
                    
(b) 
圖 2 遞迴式 CORDIC 架構的 (a) x 以及 y 的微旋轉架
構，以及(b) z 運算的架構 
雖然 CORDIC 具有以上的優點，可是它的架構上具
有以下兩個缺點： 
(1) 在速度上則具有很長的執行週期(execution cycle)
與進位延遲時間(latency time)； 
(2) 在管線化(pipelining)執行上具有循序(sequential)
的特性。 
我們在 96 年度研究計畫(96-2221-E-251-005)當中，已
經針對管線化 CORDIC 旋轉機制已經找到一個有系
統化的方法，以設計出更快速的 CORDIC 旋轉機制的
硬體，同時對於每個階段的微旋轉能夠具有使用冗餘
數字實作上的效能且保有傳統二進位資料的特性，並
且已經設計出高效能的管線化 CORDIC 旋轉機制，並
且將我們所提出的方法推廣到雙曲線模式下的座標
系統。我們已經利用 Verilog 硬體描述語言實作出我
們所提出的新 CORDIC 旋轉架構，並且利用 0.13m 
TSMC 標準元件庫作合成，以實作出硬體以及執行相
關之計算，架構圖如圖 2。 
1σ
2σ
3σ
4σ
1−mσ
mσ
'1 Kxx •= '1 Kyy •=
x′ y ′
0b 1b 2b 1−mb mb Bb
Hθ
1+mb
1e 1−mem−− 2
11 −→ mσσ
mσσ →1
1ˆˆ +→ Bm σσ
Lθ
mσˆ
1ˆ +mσ
Bσˆ
1ˆ +Bσ
x′ y′
0 1 1.
L
mb b bθ −= 
Hθ
1ˆ .
H
m m Bb b bθ −= × × ×   
2ˆ +mσ
3ˆ +mσ
LBBR
predictionAdd
HBBR
2+Bx 2+By
)(mS
)1( +mS
)2( +mS
)3( +mS
)(BS
)1( +BS)( mS
(a) 
iσ
ix
1+ix 1+iy
)( 1isS
)( )(inisS
iy
)( 2isS
)( 1)( −inisS
 
(b) 
圖 2: (a) 我們所提出的平行化 CORDIC 旋轉器架構，
以及(b) 1,...,1),( −= miiR 內部架構圖。 
本研究計畫（自 2009/08/01 到 2010/07/31 止）
即是利用我們先前所完成的新型平行化 CORDIC 旋
轉器[6]當作核心電路，進行高效能之離散旋轉器之電
路設計，本研究動機是要將我們所開發完成的新型平
行化 CORDIC 旋轉器找出更多實際的應用用途，因為
我們已經在先前的研究成果當中完成旋轉器的開
發，預期在第一年的研究計畫中，可以研發出各式高
效能之離散旋轉器電路並且能夠應用在數位信號處
理上面。 
3. 研究方法 
本計畫的研究方法分為以下部分，包括：新型平
行化 CORDIC 旋轉器之誤差分析、低誤差之固定寬度
乘法器與平方器之設計以及修正後之新型平行
CORDIC 旋轉器為基礎之 cell-based 完整設計。 
(1) 新型平行化 CORDIC 旋轉器之誤差分析 
因為先前所提出的平行化 CORDIC 旋轉器之內
容在演算法之推導上面，並沒有對於真正的誤差
作分析。平行化 CORDIC 增加了許多額外的微旋
轉階段，造成修正因子也必須跟著改變，我們很
好奇的是否真正的誤差值能夠也跟傳統的
CORDIC 一樣達到 100%的精確度，因此，我們
  4 
 
圖 7 我們所設計完成的 16 位原新型平行化 CORDIC
旋轉器 layout 圖 
4. 結果與討論 
    本研究計畫以先前的研究成果當作發展核心，繼
續針對新型的平行化 CORDIC 旋轉器之實際誤差分
析作深入的研究，並且開發低誤差之快速固定寬度乘
法器及平方器的電路，還有以 cell-based完整的TSMC 
0.18µm 設計流程，將新型平行化 CORDIC 旋轉器設
計完成，後續研究將可以利用本計畫的研究成果，開
發以新型平行化 CORDIC 旋轉器為核心的轉換器，應
用於數位信號處理上面。 
5. 參考文獻 
[1] J. E. Volder, “The CORDIC trigonometric computing 
technique”, IRE Transactions. on Electronic 
Computers, Vol. 8, pp. 330-334,  Sept. 1959. 
[2] J. S. Walther, “A unified algorithm for elementary 
functions,” AFIPS Conf. Proc., Vol.38, pp. 389-385, 
1971. 
[3] Shen-Fu Hsiao, Yu-Hen Hu and Tso-Bing Juang, “A 
Memory-Efficient and High-Speed Sine/Cosine 
Generator Based on Parallel CORDIC Rotations,” 
IEEE Signal Processing Letters, Vol. 11, No. 2, pp. 
152-155, Feb. 2004. 
[4] Tso-Bing Juang, Shen-Fu Hsiao and Ming-Yu Tsai, 
“Para-CORDIC: Parallel CORDIC Rotation 
Algorithm,” IEEE Transactions on Circuits and 
Systems I – Regular Papers, Vol. 51, No. 8, pp. 
1515-1524, Aug. 2004. 
[5] Shen-Fu Hsiao, Yu Hen Hu, Tso-Bing Juang, 
Chung-Han Lee, “Efficient VLSI Implementations 
of Fast Multiplierless Approximated DCT using 
Parameterized Hardware,” IEEE Transactions on 
Circuits and Systems I, Vol. 52, No. 8, pp. 
1568-1579, Aug. 2005. 
[6] Tso-Bing Juang, "Low Latency Angle Recoding 
Methods for the Higher Bit-Width Parallel CORDIC 
Rotator Implementations," IEEE Transactions on 
Circuits and Systems II, Vol. 55, No. 11, pp. 
1139-1143, Nov. 2008. 
[7] Tso-Bing Juang and Shen-Fu Hsiao, “Low-Error 
Carry-Free Fixed-Width Multipliers with Low-Cost 
Compensation Circuits,” IEEE Transactions on 
Circuits and Systems II, Vol. 52, No. 6, pp. 299-303, 
June 2005. 
[8] 魏麒宗，”低誤差固定寬度乘法器之實作” 國立屏
東商業技術學院資訊工程系專題報告 (指導教
授：莊作彬教授)，2007 年。 
[9] 魏麒宗，”省面積的固定寬度乘法器之矽智產設計
與實作” 國立屏東商業技術學院資訊工程系碩士
論文(指導教授：莊作彬教授)，2010 年。 
[10] 莊作彬、魏麒宗，"高精確度且無進位延遲的固
定寬度乘法器之設計與實作," Proc. Workshop on 
Consumer Electronics and Signal Processing 
(WCESP), pp. 516-520, Nov., 2007. (Taichung, 
Taiwan) 
[11] 李崇漢，”多功能數位轉換之參數化 IP 產生器” 
國立中山大學資訊工程系碩士論文(指導教授：蕭
勝夫教授)，2004 年。 
[12] 莊作彬，” 應用於數位信號處理的高效能固定寬
度乘法器設計與實作” 96 年度教育部推動技專校
院與產業園區產學合作實施計畫成果報告，2007
年。 
[13] C. Loeffler and A. Lightenberg, “Practical fast 1-D 
DCT algorithms with 11 Multiplications,” 
Proceedings of the International Conference on 
Acoustics, Speech and Signal Processing 
(ICASSP ’89), Scotland, May 1989, pp. 988-991. 
[14] Tso-Bing Juang, Chip-Hong Chang and Chi-Chung 
Wei, “Area-Saving Technique for Low-Error 
Redundant Binary Fixed-Width Multiplier 
Implementation,” Proc. of International Symposium 
on Integrated Circuits (ISIC), pp. 550-553, 
December 2009. (Singapore) 
 
 (與 Chang Chip-Hong 教授合影) 
 
 
 
 
(與 Pramod Kumar Meher 教授合影) 
                              ISIC 2009 
Area-Saving Technique for Low-Error Redundant 
Binary Fixed-Width Multiplier Implementation 
Tso-Bing Juang and Chi-Chung Wei 
Department of CSIE 
National Pingtung Institute of Commerce 
Pingtung City, Taiwan 
tsobing@npic.edu.tw 
Chip-Hong Chang  
School of Electrical, Electronic Engineering 
Nanyang Technological University,  
Singapore  
echhang@ntu.edu.sg
Abstract—A recently proposed architecture of redundant 
binary fixed-width multiplier was shown to outperform several 
normal binary fixed-width multipliers in terms of accuracy. 
However, its merit due to the carry-free addition property of the 
binary signed digit (BSD) partial products has been offset by the 
high area overhead of the redundant binary full adder tree. To 
achieve low–error fixed-width multiplication with smaller silicon 
area, we propose a hybrid structure which makes use of dual 
polarity high order column compressors and (3:2) counters to 
parallelly reduce the positive and negative BSD partial products. 
Our proposed technique has led to a fixed-width multiplier 
architecture with the same accuracy and up to 42% area saving 
for 10×10-bit multiplication over the conventional redundant 
binary fixed-width multiplier architecture in 0.18 m CMOS 
standard cell implementation under the same timing constraint. 
Index Terms—Fixed-width multipliers, modified Booth 
encoding, redundant binary signed digit representation. 
I.  INTRODUCTION 
Fixed-width multipliers [1-13] are widely used in 
application specific data paths in multimedia and wireless 
communication applications where some degree of saturation 
error within the dynamic range of interest is tolerable 
depending on the level of perceptual quality and signal-to-
noise degradation it induced. For maximal area reduction, the 
least significant half of the partial products are truncated to 
produce a final product with reduced precision. To achieve a 
lower average error and narrower error spread for all 
legitimate operands within the dynamic range, error-
compensation circuitry with area overhead much lower than 
the truncated part is introduced.  
In [1-3], a constant error compensation technique is used to 
compensate for the truncation errors without considering the 
bit-width of the inputs. Although these methods are attractive 
in terms of their hardware simplicity, they introduce large 
average and mean square errors compared to those techniques 
that use adaptive error compensation [4-13]. Adaptive error 
compensation techniques estimate the error compensation 
values (ECV) from a few most significantly weighted bits of 
the truncated part of the partial products. Fixed-width 
multipliers can be categorized in the similar way as their full-
width counterparts. The partial products can either be 
generated directly by wire-ANDing the corresponding bits of 
the multiplier with the multiplicand [1-5, 8, 11, 13], or via 
modified Booth encoders (MBE) [6-7, 9-10] to reduce the total 
number of partial products. The methods for summing the 
partial products can also be classified into array [1-6, 8, 9, 11] 
and tree structures [7, 10, 12]. Finally, fixed-width multipliers 
can also be distinguished by their partial product 
representation. Two commonly used representations are the 
two’s complement binary [1-9, 11-13] and the binary signed 
digit (BSD) representations [10].  
In [10], we proposed a redundant binary fixed-width 
multiplier by summing the truncated MBE partial products in 
BSD representation in a tree-structured architecture. Very low 
error fixed-width multiplication can be achieved with a very 
simple error compensation circuit. However, the merits of low 
error and carry-free addition are offset by the overhead of the 
summation network of BSD partial products. It incurs higher 
area cost comparing with the array structured summing 
network of two’s complement partial products.  
This paper proposes an area saving technique to overcome 
the above problem. Instead of using the conventional 
redundant binary adders, hybrid original and complementary 
high order column compressors are designed for summing the 
decomposed positive and negative binary partial products. The 
resulting fixed-width multiplier maintains the same advantage 
of low truncation error and structural regularity. A 
conspicuous saving of around a quarter of the area over the 
previously proposed fixed-width multiplier [10] is achieved 
when the design is mapped using TSMC 0.18μm standard cell 
library under the same delay constraint.  
This paper is organized as follows. In Section II, the 
overhead of the redundant binary fixed-width multiplier 
architecture [10] is analyzed. Our proposed area-saving 
technique and the hybrid redundant binary partial product 
summing tree are presented in Section III. The synthesis results 
of the previous and proposed BSD fixed-width multipliers are 
compared in Section IV. Section V concludes the paper. 
II. OVERHEAD OF PREVIOUS REDUNDANT BINARY FIXED-
WIDTH MULTIPLIER  
The statistical error of a fixed-width multiplier based on 
BSD representation is analyzed in [10]. This section provides 
the preliminaries of redundant binary fixed-width multiplier 
architecture and its overheads.  
The signed digit partial products for an n-bit fixed-width 
multiplication, P = A × B can be obtained from its two’s 
550
         
Our carry-saved addition tree consists of three stages. The 
BSD partial product accumulation of an n×n-bit redundant 
binary fixed-width multiplication is illustrated in Fig. 2. For 
ease of exposition, we assume n is even. The partial product 
matrix is divided into two equal halves, PP+ and PP−. Each 
half matrix contains n/2 rows and n columns. The elements in 
the jth column have a weight of 2n+j. Let h(j) be the number of 
partial product bits in the jth column. The ECV in column j = 
−1 of each half matrix consists of the partial product terms, 
2 ,2 1n i i
p
− −
for i = 1, 2, … 4, n"  and a carry-in, cin [10].  From Fig. 
2, it is easy to see that:  
 
( ) ( )
( ) ( )
1 1; 0 ;
4 2
1 2,4, , 2
2
n nh h
n jh j h j j n
− = + =
−
= − = ∀ = −"
 
 (1) 
0,
1, 1, 1 1, 2
2, 2, 1 2, 2 2, 3 2, 4
2, 2,8 2,7 2,6 2,5 2,4 2,3
2 2 2 2 2 2 2
1, 1, 1 1, 2 1,6 1,5 1,4
2 2 2 2 2 2
1 2 3 4 4 3 2 1 0 1
n
n n n
n n n n n in
n n n n n n nn
n n n n n nn n n
j n n n n
p
p p p
p p p p p c
p p p p p p p
p p p p p p p
+
+ + +
− −
+ + + + + +
− − − −
+ + + + + + +
− − − − − − −
+ + + + + +
− − − − − − − −
− − − − −"
$ # # # # # #
"
"
1,3 1,2 1,1
2 2 2
0,
1, 1, 1 1, 2
2, 2, 1 2, 2 2, 3 2, 4
2, 2,8 2,7 2,6 2,5 2,4 2,3
2 2 2 2 2 2 2
1, 1, 1 1, 2 1,6 1,5 1,4
2 2 2 2 2 2
n n n
n
n n n
n n n n n in
n n n n n n nn
n n n n n nn n n
p p
p
p p p
p p p p p c
p p p p p p p
p p p p p p
+ + +
− − −
−
− − −
− −
− − − − − −
− − − −
− − − − − − −
− − − − − − −
− − − − −
− − − − − − − −
$ # # # # # #
"
"
1,3 1,2 1,1
2 2 2
1, 1
2
1,
2
1, 1 1, 1
2 2
1,
2
n n n
n n
n n
n nn n
n n
p p p
p
p
p p
p
− − − −
− − −
+
− −
+
−
− −
− − − −
−
−
• • • • • • •
• • • • • • •
• • • • • • •
• • • • • • •
• • • • • • • • •
• • • • • • • • •
1
1
"
"
"
"
"
"
 Fig. 2: Three-stage summation of partial product matrix of n×n-bit redundant 
binary fixed-width multiplier 
In Stage 1, each PP+ and PP− matrix is independently and 
concurrently reduced to two binary partial product rows using 
a combination of (3:2) counters, (4:2) compressors and (5:2) 
compressors for n ≤ 10. For n > 10, [h(j):2] adders [16] are 
required for some columns. A [h:2] adder reduces h k-bit 
operands to two k-bit operands with the output carries 
independent of its input carries. The optimal k for different h 
to minimize the number of lateral carries has been derived in 
[16] based on a square dot matrix. Due to the unique staircase-
like partial product matrix, the maximum value of the output 
carries of the [h:2] adder can be increased and h can be 
extended to 8 for k = 2 following the same derivation. Thus for 
10 < n ≤ 18, [h(j):2] adders (the solid rectangular blocks in Fig. 
2) are used in the columns, j = 1, 3, …, n−7 to reduce two 
adjacent columns (column numbers j and j+1) in each half 
matrix to produce a sum bit in the jth column and a carry bit in 
the (j+1)th column in the next stage (the sum and carry bits are 
connected by a slash).  For the columns j = −1 and 0, a 
[ 2 1
n
− :2] adder (the dotted rectangular block) can be used by 
transferring one bit from the column j = 0 to two equivalent 
bits in the column j = −1. The remaining columns can be 
reduced using either (h(j):2) counters or compressors. To unify 
all binary vectors in the next stage in two’s complement form, 
the sum and carry outputs generated from the negative partial 
product matrix are complemented and ‘1’s are added to the 
two least significant bit columns, j = −1 and 0. In addition, the 
two most significant negative partial product bits (i.e., 
2 1, 1
n np
−
− −
 
and 
2 1,
n np
−
−
)  that are directly brought forward to the next stage 
need to be complemented and 
2 1, 1
n np
−
− −
needs to be signed 
extended to the leading bit position. 
In Stage 2, since there is no distinction between the sum 
and carry bits generated from the positive and negative partial 
product bits, they can be further compressed using (4:2) 
compressors and (3:2) counters as in the conventional two’s 
complement tree-structured multiplier. In Stage 3, the final 
carry and sum vectors are added using an n-bit carry propagate 
adder to produce the truncated product by discarding the last 
bit.  
A numerical example is shown in Fig. 3 to illustrate our 
proposed method. The multiplicand and multiplier in two’s 
complement representation are a = 10110110 and b = 
10100011, respectively. The multiplier, b is Booth encoded to 
1211 . The four full-width BSD partial products are 
respectively, PP[0] = 010 1 10 1 10 , PP[1] = 0 1011011000 , 
PP[2] = 10 1 10 1 1000000 and PP[3] = 010 1 10 1 10000000 . 
Therefore, PP+[0] = PP−[0] = 0, PP+[1] = 000, PP−[1] = 010, 
PP+[2] = 100000, PP−[2] = 001101, PP+[3] = 01000000 and 
PP−[3] = 00011011. From Fig. 1, 1inc
+
= and 0inc
−
= .  
 
j 7 6 5 4 3 2 1 0 
−1 
         
 
PP+[0]        0  
PP+[1]      0 0 0 1 
PP+[2]    1 0 0 0 0 0 
PP+[3]  0 1 0 0 0 0 0 0 
          
PP-[0]        0  
PP-[1]      0 1 0 0 
PP-[2]    0 0 1 1 0 1 
PP-[3]  0 0 0 1 1 0 1 1 
          
  0 1 1 0 0 0 0 1 
   0 0 0 0 0 0  
          
  1 1 1 0 1 1 0 1 
  1 1 1 0 0 1 0 1 
        1  
  1 0 1 0 1 0 1 1 
 1 1 0 0 0 1 0 1  
 0 0 0 1 1 0 1 0  
Fig. 3: A numerical example of an 8×8 bit fixed-width multiplier 
Stage 1 uses four FAs, two HAs and six simplified (4:2) 
compressors. Each FA and HA is indicated by a solid 
rectangle and each (4:2) compressor is indicated by a dotted 
rectangle with a lateral carry-out connection to its adjacent 
552
無衍生研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
本計畫所產出的會議論文部分貢獻由新加坡南洋理工大學電子電機工程系
Chang Chip-Hong 副教授參與，該教授亦為 IEEE Senior Member，該篇論文奠
定了本實驗室與國際合作之基礎。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
