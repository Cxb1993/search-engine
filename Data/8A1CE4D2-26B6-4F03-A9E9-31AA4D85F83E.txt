 2 
行政院國家科學委員會專題研究計畫成果報告 
模型式 Java 程式測試工具的研製（續） 
計畫編號：NSC 98-2221-E-194-042 
執行期限：98 年 08 月 01 日至 99 年 07 月 31 日 
主持人：林迺衛   國立中正大學資訊工程學系 
計畫參與人員：柯廷諭、胡子凡、何明濱、廖韋勝 
國立中正大學資訊工程學系 
 
一、中文摘要 
 
軟體測試目前依舊是確保軟體品質的
主要方法。這篇論文應用一個黑箱測試的
技術自動產生 Java 程式的測試案例。這篇
論文依據 Design by Contract 軟體開發方法
使用通用模型語言的類別圖及物件限制語
言來定義 Java 物件在方法階層的行為：包
含方法的前條件和後條件，及變數的恆定
條件。這篇論文也使用通用模型語言的狀
態圖及物件限制語言來定義 Java 物件在類
別階層的行為。測試案例的自動執行是奠
基於 JUnit 架構。測試案例的測試輸入及預
期輸出的自動產生則是奠基於限制邏輯程
式語言強大的限制解決能力。這個方法的
一個特色是用一個統一的方法來同時產生
測試輸入及預期輸出。 
 
關鍵詞：黑箱測試、測試案例的自動產生、
限制邏輯程式語言、通用模型語言、物件
限制語言。 
 
Abstract 
 
Software testing is the main activity to ensure the 
quality of software. This article applies a black-box 
testing technique to automatically generate test cases 
for Java programs. This article uses the UML class 
diagrams and the Object Constraint Language to 
specify the method-level behavior of Java classes by 
defining the preconditions and postconditions of 
member methods and class invariants on member 
variables proposed in the Design by Contract 
software development approach. This article also uses 
the UML state diagrams and the Object Constraint 
Language to specify the class-level behavior of Java 
objects. The automatic execution of test cases is 
based on the JUnit framework. The automatic 
generation of the test input and expected output for 
each test case is based on the powerful constraint 
solving capability of constraint logic programming. A 
novel characteristic of this approach is that a test 
input and its corresponding expected output are 
simultaneously generated in a unified way. 
 
1. INTRODUCTION 
According to 2006 CHAOS report of the 
Standish Group, high quality software is still very 
hard to achieve at present [15]. The software testing 
activity still remains one of the main activities to 
assure software quality. The cost of the software 
testing activity usually takes about half of the cost of 
the entire software process. This high cost of the 
software testing activity is the main reason to hinder 
the achievement of high quality software. 
Many software testing techniques have been 
developed during the last several decades. However, 
most of these software testing techniques are still 
performed manually. This is why the cost of the 
software testing activity is so high. The automation of 
the software testing activity should be able to 
significantly reduce the cost of the software testing 
activity. 
The software testing activity consists of the 
design of test cases and the execution of test cases. 
There are two types of techniques for designing test 
cases: black-box testing (or specification-based 
testing) and white-box testing (or program-based 
testing) [3]. The black-box techniques are based on 
the functional specification of a software system and 
focus on the coverage of the specified external 
behaviors of the software system. The white-box 
techniques are based on the source code and focus on 
the coverage of the internal structure of the source 
code. These two types of techniques are 
complementary. The white-box techniques alone may 
fail to reveal that some portions of the specification 
are missed in the source code. On the other hand, the 
black-box testing techniques alone may fail to reveal 
that some portions of the source code are not 
contained in the specification. Therefore, employing 
both types of techniques is necessary to assure high 
quality software. 
Design by Contract is a systematic approach for 
developing bug free software [8]. In Design by 
Contract approach, the functional behaviors of a class 
 4 
post: stack =  
stack@pre->prepend(element) 
 
context Stack::pop() 
pre: stack@pre->size() > 0 
post: stack = stack@pre-> 
subSequence(2, stack@pre->size()) 
 
context Stack::peek(): Integer 
pre: stack@pre->size() > 0 
post: result = stack@pre->first() 
 
context Stack::size(): Integer 
post: result = stack@pre->size() 
 
The type Sequence is a predefined ordered-bag 
collection type in the OCL. The postcondition for the 
constructor Stack() specifies that an empty sequence 
is created and is set to attribute stack. The 
postcondition for the method push(element: Integer) 
specifies that an integer element element is inserted 
into the sequence at the beginning. In the 
postcondition, the expression stack denotes the value 
of attribute stack right after the method invocation, 
while the expression stack@pre denotes the value of 
attribute stack right before the method invocation. 
The OCL predefined operation prepend(x) inserts its 
argument x into the sequence at the beginning. In the 
preconditions for the methods pop() and peek(), the 
OCL predefined operation size() returns the number 
of elements in the sequence. Thus, the preconditions 
specify that the number of elements in the sequence 
must be greater than zero. The OCL predefined 
operation subSequence(n, m) returns the 
subsequence from the nth element to the mth element. 
The postcondition for the method pop() thus specifies 
that the attribute stack is set to the subsequence from 
the second element to the last element. The OCL 
predefined operation first() returns the first element 
of the sequence. The postcondition for the method 
UML CD, SD, and OCL 
specifications 
Test Path Generator 
 
Test Path 
Test Data Generator 
 
Infeasible 
Test Path 
Feasible Test Path + Test Input + Expected output 
N 
Test Class Generator 
 
Java Test Class 
Y 
Figure 1. The structure of a class-level unit testing tool for Java. 
 
Coverage 
Criterion Satisfied 
 
 6 
example, the predicate foo/3 can be queried using any 
of foo(3, 1, 2), foo(3, 1, C), foo(3, B, C), foo(A, B, 
C), and so on. Namely, each argument can be either 
used as an input when it is a constant or used as an 
output when it is a variable. The unification 
mechanism allows us to solve the test input and 
expected output simultaneously. By specifying the 
domains of variables, the constraint solving library 
can find all the solutions satisfying the constraints in 
the predicate. For the example, the ECLiPSe system 
will returns 
A = 3, 
B = 1, 
C = 2, 
and 
A = 3, 
B = 2, 
C = 1, 
as solutions for the query foo(A, B, C). 
For each method method in the class class, the 
test data generator will convert its postcondition into 
an ECLiPSe predicate classMethod(OState, 
Arguments, Result, NState). The argument OState 
is the state of the object right before the method 
invocation. The state consists of the list of attribute 
values of the object. The argument Arguments is the 
list of arguments to the method invocation. The 
argument Result is the returned value of the method 
invocation. The argument NState is the state of the 
object right after the method invocation. 
For the running example, the test data generator 
will generate the following predicates: 
 
stackStack(_, [], [], stack(S)) :- 
sequenceSequence([], S). 
 
stackPush(stack(S),[Element],[],  
stack(NS)) :- 
[Element] :: -32768 .. 32767, 
sequencePrepend(S, Element, NS). 
     
stackPop(stack(S),[],[], stack(NS)) :- 
sequenceSize(S, Size), 
sequenceSubsequence(S, 2, Size, NS). 
     
stackPeek(stack(S), [], Element, stack(S)) :- 
[Element] :: -32768 .. 32767, 
sequenceFirst(S, Element). 
 
stackSize(stack(S), [], Size, stack(S)) :- 
sequenceSize(S, Size). 
 
where the predicates sequenceSequence/2, 
sequencePrepend/3, sequenceSize/2, 
sequenceSubsequence/4, and sequenceFirst/2 
are the CLP implementation of the builtin operations 
of the OCL sequence collection type. 
The test data generator will also convert the 
sequence of method invocations and guards on the 
test paths into an ECLiPSe predicate 
testClass(PathNo, Arguments, Input, Output). 
The argument PathNo is the path identification 
number. The argument Arguments is the sequence of 
arguments in the method invocations. The argument 
Inputs is the list of arguments passed to the object 
state queries. The argument Outputs is the list of 
values returned from the object state queries. We 
should use both query methods peek and size to query 
the state of the object. However, due to the 
comprehension of presentation, we only use the query 
method size in this example. Each test path 
corresponds to a clause of the predicate testClass/4. 
For the running example, the test data generator 
will generate the following clause for the test path 1: 
 
testStack(1, Arguments, Inputs, Outputs) :- 
 % clause for test path 1 
stackStack(_, Arg0, _, S0), 
Arguments = [Arg0 | R1], 
stackSize(S0, In1, Out1, _), % check 
Inputs = [In1 | RIn1], 
Outputs = [Out1 | Rout1], 
stackPush(S0, Arg1, _, S1), 
R1 = [Arg1 | R2], 
stackSize(S1, In2, Out2, _), % check 
RIn1 = [In2 | RIn2], 
Rout1 = [Out2 | Rout2], 
stackSize(S1, Arg2, Res1, S2), % guard 
R2 = [Arg2 | R3], 
Res1 #= 1, 
stackPop(S2, Arg3, _, S3), 
R3 = [Arg3 | R4], 
stackSize(S3, In3, Out3, _), % check 
RIn2 = [In3 | RIn3], 
Rout2 = [Out3 | Rout3], 
stackPush(S3, Arg4, _, S4), 
R4 = [Arg4 | R5], 
stackSize(S4, In4, Out4, _), % check 
RIn3 = [In4 | RIn4], 
Rout3 = [Out4 | Rout4], 
stackSize(S4, Arg5, Res2, S5), % guard 
R5 = [Arg5 | R6], 
Res2 #= 1, 
stackPop(S5, Arg6, _, S6), 
R6 = [Arg6], 
stackSize(S6, In5, Out5, _), % check 
RIn4 = [In5 | RIn5], 
Rout4 = [Out5 | Rout5]. 
 
Query the ECLiPSe system using the following 
query: 
 
testStack(1, Args, Ins, Outs). 
 
The ECLiPSe system will return 
 
Args = [[], [0], [], [], [0], [], []], 
Ins = [[], [], [], [], []], 
Outs = [0, 1, 0, 1, 0]; 
 
 8 
Software,” SOFSEM 2007: Theory and Practice 
of Computer Science, Springer, 2007, pp. 
114-129. 
[11] Object Management Group, Object Constraint 
Language Specification, Version 2.0, 2006. 
[12] Object Technology International Incorporation, 
Eclipse Platform Technical Overview, 2003. 
[13] A. Pretschner and H. Lötzbeyer, “Model Based 
Testing with Constraint Logic Programming: 
First Results and Challenges,” Proceedings of 
Second International Workshop on Automated 
Program Analysis, Testing and Verification, 
2001, pp. 1-9. 
[14] A. Pretschner, O. Slotosch, E. Aiglstorfer, and S. 
Kriebel, “Model Based Testing for Real: The 
Inhouse Card case Study,” International Journal 
on Software Tools for Technology Transfer, 
5(2-3):140-157, March 2004. 
[15] Standish Group, 2006 CHAOS Report, 2007. 
 
無衍生研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
