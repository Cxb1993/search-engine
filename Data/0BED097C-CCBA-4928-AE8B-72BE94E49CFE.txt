 
2是最大的碟子搬移至 C 柱，然後再遞迴地將 B 柱上的 d-1 個碟子搬移至 C 柱。利用此法，
可求出河內塔問題最少的搬移次數是2 1d 次。
四柱河內塔問題是河內塔問題的一個延伸，在此問題中，藉由增加一個柱子，使得
碟子的搬移更有彈性，也因此增加尋找最佳搬移方法的困難度。四柱河內塔問題第一次
出現是在 Henry Dudeney 的著作 The Canterbury Puzzles[7]中提及，書中稱為 The Reve's
Puzzle。Henry Dudeney 在該書的解答篇中給了碟子數為 8、10 與 21 時的最少搬移次數
為 33、49 與 321，並進一步宣稱當碟子數 d 為一三角形數(triangular number)時的最少搬
移次數。其方法如下，令
( 1)
2k
k k
t
 表示第 k 個三角形數，M(d)表示搬移 d 個碟子的最
少搬移次數。則 M(1)=1 且 1( ) 2 ( ) 2 1
k
k kM t M t   。
例如：
2
2 2 1
3
3 3 1
4
4 4 1
( 3) 2 ( 1) 2 1 2 1 3 5,
( 6) 2 ( 3) 2 1 2 5 7 17,
( 10) 2 ( 6) 2 1 2 17 15 49
M t M t
M t M t
M t M t



      
      
        。
然而 Henry Dudeney 並未證明上述推論，且未對當 d 為非三角形數時的最少搬移次數提
出解法。
1939年 J. S. Frame[12]與B. M. Stewart[29]分別同時提出了多柱河內塔問題最短路徑
的解法，當柱子數為 4 時，其解法如下：設有 A、B、C 與 D 四柱，其中 A 柱上有 d 個
穿孔圓碟其尺寸由上至下依序變大。遞迴地將 A 柱上的 d-i 個碟子(1 i d )搬移至 B 柱，
再利用三柱河內塔搬移法將 A 柱上較大的 i 個碟子搬移至 D 柱，然後再遞迴地將 B 柱上
的 d-i 個碟子搬移至 D 柱。
Frame 與 Stewart 都証明了當碟子數 d 恰為三角形數
( 1)
2k
k k
t
 ，則 i 值的最佳解為
k，即在所有可能的 i 值(1 i n )中，i=k 的搬移次數最少。而當碟子數 d 介於 tk-1 與 tk
間時，i 等於 k 或是 k-1 皆會使搬移次數最少(在所有可能的 i 值中)。然而，Frame 與 Stewart
所提出的方法僅證明在上述解法中 i 的最佳值，卻未證明四柱河內塔問題的最佳解必屬
於此種解法，或是必包含此種解法。另一方面，目前也尚未有人提出證明 Frame 與 Stewart
所提出的方法並非最佳解。四柱河內塔問題至今仍然是個未解決的問題，Frame與 Stewart
所提出的解法也被稱為 presumed optimal solution。Donald Knuth 也曾研究四(多)柱河內
塔問題，並認為此問題太難，他曾說過"I doubt if anyone will ever resolve the conjecture; it
is truly difficult;"[24]。
三、研究目的
由於目前尚未有人能提出四柱河內塔最短路徑演算法(presumed optimal solution 尚
未被證明為 optimal solution)，本研究希望利用河內圖的圖論性質，研究河內圖內最短路
徑的性質，推論出最短路徑的遞迴關係，並導出四柱河內塔最短路徑(optimal solution)
的演算法，以期對於四柱河內塔問題研究有所突破。此外，我們也希望利用此一演算方
法來驗證碟子數較多的情況下presumed optimal solution是否仍如目前已經驗證的為四柱
河內塔問題最佳搬移方法。
4的集合，邊集合 E={(v1, v2) | 若由 v1 至 v2 存在一合法的走法(搬移一次碟子)}。圖 2 為
d=2，p=4 的河內圖 H(2, 4)，節點內數字表其狀態。
圖 2、H(2, 4): d=2，p=4 的河內圖(資料來源：[22])
根據河內圖的定義，得知 H(d, 4)={V, E}中節點數|V|=4d，而 Klavzar[17]也在 1998
年求出|E|=3(4d-2d)。此外，河內圖中的邊一對一對應至河內塔的碟子搬移方法，所以河
內塔的最少搬移次數方法也就對應至河內圖中的最短路徑。因此，四柱河內塔問題即為
在 H(d, 4)中求 1111…11(所有 d 個碟子皆在第 1 柱，以下稱河內塔起點)至 4444…44(所
有 d 個碟子皆在第 4 柱，以下稱河內塔終點)的最短路徑問題。圖 3 為 H(3, 4)，由圖 3
中可知由河內塔起點狀態 111 至狀態 444 的所有路徑皆對應至四柱河內塔問題的搬法。
而 111 至 444 的最短路徑即為四柱河內塔問題最少次數搬法。圖 4 將 111 至 444 的所有
最短路徑以及相對應搬移方式列出。
圖 3、H(3, 4)中由 111 至 444 的最短路徑對應四柱河內塔問題最少次數搬法
6圖 5、H(2, 4)包含四個與 H(1, 4)同構的子結構
遞迴關係
我們可將 H(d, 4)(以下稱為母結構)看成是四個 H(d-1, 4)(以下稱為子結構)加上此四
個子結構間的 edge，假設起點 s 在其中 1 個子結構，稱為 H1，而終點 d 在另一個不同的
子結構，稱為 H4。則起點 s 至終點 d 的最短路徑，可分為 H1 內部的路徑、H1 至 H4 的路
徑以及 H4 內部的路徑。因此可以將之歸約(reduce)成子結構內的路徑問題加上子結構間
的路徑問題，如圖 6 所示。
圖 6、母結構內路徑可歸約(reduce)成子結構內的路徑問題加上子結構間的路徑問題
結構內最短路徑性質
若起點與終點在同一子結構中，例如都在 H1，則最短路徑不會經過 H1 以外的節點。
例如圖 7 中，節點 a 與節點 b 同在 H1 中，則由 a 至 b 的最短路徑不會經過 H1以外的節
點。若有一繞出原結構之路徑，則必存在原結構內較短路徑可以取代。
H(1, 4)
8圖 9、河內塔問題可化簡成河內塔起點 s 至 c1, c2, …cn 間最近點問題
兩相鄰邊節點最短路徑性質
因河內圖結構相近於正角椎體，因此我們稱圖 10 中 A ={ai |1≤i≤n }為整個結構體的
一個邊，而 B={bi |1≤i ≤n }為另一邊。此 A、B 兩邊相鄰。同理，A1 ={ai |1≤i ≤n/2 }與
B1 ={bi |1≤i≤n/2 }同為子結構體 H1 的兩相鄰邊。
推論：在母結構體兩相鄰邊上節點間的最短路徑將不會通過第三個子結構體。例
如，圖 10 中 ai(1≤i≤n)與 bj(1≤j≤n)的最短路徑將不會通過包含 ai, bj以外的子結構。
圖 10、ai 與 bj 的最短路徑將不會通過包含 ai, bj以外的子結構，1≤i≤n 且 1≤j≤n
由於河內圖的節點數相當龐大，驗證presumed optimal solution的程式需要強大的計算能
量。因此在演算法中即要避免重複的計算。此外我們將最短路徑長度演算法轉換為矩陣運算，
如此可以利用圖形處理器(Graphic Processing Unit，簡寫為GPU)平行計算[21]以加速運算。由
於圖形處理器中擁有多個核心(例NVIDIA GTX 260即有192個核心)，加上我們所提出的演算法
所需的矩陣運算可平行化，因此我們預計採用NVIDIA的CUDA技術，將矩陣計算交由圖形處
理器執行。
10
a1
a2
an/2
an
e1e2
en/2
en
en/2+1
an/2+1
ai
ej
H1
H2
H4
H3
圖 12、H(d, 4)上之對邊節點
定義：Mskew(d)UL表 Mskew(d)之左上分塊矩陣，Mskew (d)UR 表 Mskew (d)之右上分塊矩陣，
Mskew(d)DL表 Mskew(d)之左下分塊矩陣，Mskew(d)DR 表 Mskew(d)之右下分塊矩陣。即
Mskew(d) = 。
最短路徑遞迴關係
利用上述性質，我們推導出最短路徑遞迴關係如下
 Mskew(d)UL = (Madj(d-1)V+I) x Madj(d-1)D
 Mskew(d)DL = (Mskew(d)UL )V
 Mskew(d)UR = (Mskew(d)UL )H
 Mskew(d)DR = (Mskew(d)UL )D
 Madj(d)UL = Madj(d-1)
 Madj(d)DL = (Madj(d-1)V+I) x Mskew(d-1)
 Madj(d)UR = (Madj(d)DL )T
 Madj(d)UR = (Madj(d-1)+I) x Madj(d-1)
7. 撰寫CUDA程式驗證假定最佳解
I. 程式架構
此驗證程式的核心是利用C++開發，並使用CUDA API來處理平行矩陣計算的部份，GUI
部分則是利用JAVA開發。圖13為系統架構圖，說明如下。JAVA GUI為以Java實作的GUI
介面；Matrix Processing Module為矩陣處理模組，包含兩部份。一是Matrix Transposition
Function，此部份負責處理矩陣轉置運算，另一部分是Parallel Matrix Multiplication
Function，此功能以 CUDA API 實作，負責處理平行化矩陣乘法運算。Data Summarization
Module負責處理各階段運算的矩陣組合，匯整運算用的矩陣數據與結果矩陣數據。Data
12
II. 系統流程
圖15為系統流程圖，由於本研究已將四柱河內塔最短路徑計算方式轉換為矩陣運算，因此
計算流程只要為載入上層的矩陣，經轉置後用以參與計算下層矩陣之運算，然後將運算結
果儲存，參看圖15。
圖15. 系統流程圖
III. 平行化矩陣運算
在演算法中所需要的矩陣運算與一般的矩陣運算不同。例如在遞迴關係中常需要用到的運
算定義為
Initialization：
Prepare interface
Begin
Specified & Load computation
matrices from the storage
Transpose Matrices
Matrix multiplication
Result summarization
Write the result to file
Result Matrices
/2
1
1 min( 2 1 3 )
n
ij il ljl
m m m

 
14
圖 17. 利用 CUDA 進行平行矩陣運算
為將上述概念應用到CUDA運算，實際的運算如下。依據 CUDA 執行緒的機制，一個
block 包含了 n 個 thread，每個 block 包含的 thread 數皆相同，當一 block (即其所包
含的n個thread) 計算完第一輪後，將向前移動 (block數量-1) x (一個block一輪所計算的結
果數量) 個單位繼續計算，直到算完所有結果。圖17說明此一方法。
IV. 程式執行
圖18為程式執行之畫面。輸入目前已計算完成的層數，以及本次計算欲完成的目標層數，
輸入限制為：已完成層數 < 目標層數，輸入完成後點擊 RUN 按鈕進行計算。
圖 18. 程式執行畫面
圖19為輸入參數之畫面。若參數輸入錯誤將出現提示訊息。
圖 19. 輸入參數
圖20為執行結束畫面。計算完成後將出現提示訊息，並生成計算結果：adj[x].dat、
skew[x].dat，如圖21所示。
圖 20. 執行結束畫面
16
[12] J. S. Frame, "Solution to advanced problem 3918," Amer. Math. Monthly, vol. 48, pp. 216–217,
1941.
[13] A. M. Hinz, "The Tower of Hanoi," in Algebras and Combinatorics (Proc. of ICAC '97), 1999, pp.
277-289.
[14] A. M. Hinz and J. Bode, "Results and open problems on the Tower of Hanoi," In Congressus
Numerantium, vol. 139, pp. 113-122, 1999.
[15] A. M. Hinz and D. Parisse, "On the Planarity of Hanoi Graphs," Exposition. Math., vol. 20, pp.
263-268, 2002.
[16] B. Houston and H. Masum, "Explorations in 4-Peg Tower of Hanoi," Carleton University
Technical Report 2004.
[17] S. Klavzar, "Square-Edge Graphs, Partial Cubes and Their Subclasses," 1998.
[18] S. Klavzar, U. Milutinovic, and C. Petr, "On the Frame–Stewart algorithm for the multi-peg Tower
of Hanoi problem," Discrete Applied Mathematics, vol. 120, pp. 141-157, 2002.
[19] R. E. Korf, "Best-first frontier search with delayed duplicate detection," in AAAI, 2004, pp.
650-657.
[20] R. E. Korf and A. Felner, "Recent Progress in Heuristic Search: A Case Study of the Four-Peg
Towers of Hanoi Problem," in IJCAI, 2007, pp. 2324-2329.
[21] Kruger and Westermann, "Linear algebra operators for GPU implementation of numerical
algorithms," in International Conf. on Computer Graphics and Interactive Techniques, 2005.
[22] M.-K. Lee, "The graph for the Tower of Hanoi with four pegs," Pythagoras, vol. 57, pp. 27-31,
2003.
[23] X.-M. Lu, "Towers of Hanoi problem with arbitrary k >=3 pegs," vol. 24, pp. 39-54, 1988.
[24] W. F. Lunnon, "The Reve's puzzle," vol. 29, p. 478, 1986.
[25] J. S. Rohl, "Towers of Hanoi: the derivation of some iterative versions," Computer J., vol. 30, pp.
70-76, 1987.
[26] J. S. Rohl and T. D. Gedeon, "The Reve's puzzle," vol. 29, pp. 187-188, 1986.
[27] D. Romik, "Shortest paths in the Tower of Hanoi graph and finite automata," CoRR
math.CO/0310109, 2003.
[28] T. Roth, "The Tower of Brahma revisited," vol. 7, pp. 116-119, 1974.
[29] B. M. Stewart, "Solution to advanced problem 3918," Amer. Math. Monthly, pp. 217–219, 1941.
[30] M. Szegedy, "In how many steps the k peg version of the Towers of Hanoi game can be solved?,"
Lecture Notes in Comput. Sci., vol. 1563, pp. 356-361, 1999.
99 年度專題研究計畫研究成果彙整表 
計畫主持人：徐盛軒 計畫編號：99-2221-E-034-011- 
計畫名稱：四柱河內塔最短路徑問題之研究與假定最佳解之驗證(II) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
