中文摘要 
本計畫旨在研究設計一個具有安全性並以 Web Services 為基礎的工作流程系統來整合
不同單位組織間因為軟硬體系統不同，造成彼此的資料與服務無法分享，形成資源的浪費
與應用軟體系統重複建置的問題，我們將系統命名為 SWS-WfMS（A Secure Web 
Services-based Workflow Management System）。計畫將完成以下之工作項目：(1)定義及完成
一個具有安全性的 Web Services 工作流程描述語言；(2)完成 security policy database；(3)完
成 SWS-WfMS 的安全認證系統；(4)完成 SWS-WfMS 文件流程管理系統；(5)完成 web 
services object container；(6)完成 SWS-WfMS editor；(7)完成 SWS-WfMS 流程系統的實務
應用測試；(8)完成報告與發表研究成果。 
 
關鍵詞：工作流程, 可擴展標示語言，文件安全語言，安全，資料庫。  
 
 1
1. 前言 
在一個機關或企業中，各單位所使用的應用系統會有多年前所建置的，也可能是近一
兩年才開發的系統；各單位在開發這些系統時為了時效性，可能只考量該單位本身的需求，
所以無論資料庫系統或系統平台都有可能不同，因而造成彼此的系統服務無法互為所用，
若要取得不同單位的資料也常要花很多的人力去做資料的轉換，若要直接使用不同單位的
系統服務，更要邀集各系統負責人來協調雙方應用程式的訊息交換格式，往往耗費許多的
人力與成本。 
上述例子只是一個組織或公司內部所產生的問題，同一組織內的資訊人員可以快速溝
通解決問題，但是不同企業間的資訊分享與系統整合就不是一件容易的事，因為不同組織
的應用系統的差異性可能更大，有些大企業更存在著許多歷史悠久的異質平台應用系統，
造成整合的困難。在現今的時代，為了提供多樣化的服務，在企業活動幕後支援的資訊技
術與資訊系統，必須能迅速配合提供所需的資訊服務，而非傳統大規模修改資訊系統的方
式。目前的解決方案之一是利用以XML（Extensible Markup Language）[1]文件為格式的
SOAP（Simple Object Access Protocol）[2]通訊協定之Web Services[3]技術來進行系統整合。
XML文件已廣泛被應用到各個資訊系統領域，例如出版、文件規格、資料儲存、電子資料
交換（Electronic Data Interchange, EDI）等等。同時XML在Web Services與服務導向架構
（Service Oriented Architecture , SOA）的帶動下，已漸漸成為系統整合的重要角色。由於
XML文件是純文字的型態，不會受限於平台的不同，因此常被用來做為電子資料交換或資
料傳輸協定格式；尤其在Web Services慢慢應用到商業的範圍之後，資料在傳輸過程中的安
全性也漸漸成為重要議題。 
 
2. 研究目的 
網際網路的日漸普及帶動了電子商務的蓬勃發展，企業對於內部作業流程控管的需求
愈來愈高，工作流程管理系統（Workflow Management System, WfMS）[4-9]在最近幾年成
為相當重要的支援性技術。面對日益激烈的商業競爭，企業如何利用網際網路來整合跨組
織和跨企業的工作流程管理系統，以利彼此之間溝通協調商業活動的進行，提升彼此的合
作效率，是工作流程管理系統的首要目標。 
多數企業流程都是由多個參與者共同執行，可能來自不同的地域區域；因此，需要跨
網際網路環境的應用系統支援，以及考量網路環境下的安全性。而大部分的企業流程是多
個業務功能互相協調後的成果；因此，原本獨立支援某項業務運作的應用系統，就必須跟
其他業務的應用系統相互整合。隨著網路上越來越多以 Web Services 提供的服務，整合 Web 
Services 的工作流程管理系統不僅可以與網路上既有的服務做結合，也達到系統資訊整合之
目的。 
本計畫的重點在於研究具有安全性並以 Web Services 為基礎的工作流程系統來整合不
同單位組織間，因為軟硬體系統不同而造成彼此的資料與服務無法分享，形成資源的浪費
與應用軟體系統重複建置的問題。同時也將重點放在如何讓 Web Services 在工作流程系統
於資料傳輸上，能夠同時確保資料安全性的需求。 
工作流程管理系統的發展，應該朝向支援開放性的標準及技術（例如 XML 與 Web 
Services 等），使得系統與外部系統的銜接更為容易；因此，本論文旨在設計一個具有安全
性以 Web Services 為基礎的工作流程管理系統來整合異質應用系統服務資源，並將系統命
名為 SWS-WfMS（Secure Web Services-based Workflow Management System）。 
Human
Component
Application
Database
Document
Key
Database
Native XML Database
…
Key
Database
Client Interface
User
Monitoring Tool
Supervisor
Workflow Engine
Transition Controller
Process
Controller
XPDL
Parser
Status Monitor
Worklist
Handler
Process Definition
Tool
Process Definition
Designer
Web Services
Invoker
Process
Definition
Execution
Log
Service
Workflow
Control Data
 
Figure 2: SWS-WfMS 系統架構 
 
4. 結果與討論 
(1)系統實作 
在本研究中，將SWS-WfMS系統建置在Microsoft Windows XP作業平台的Professional
版本上，並使用Apache Tomcat 5.5 [10]應用程式伺服器（Application Server）作為服務提供
者的平台。Tomcat Server是一個開放性軟體（Open Source），它是Apache Jakarta計畫下的一
個產品，為Servlet/JSP執行的Web容器（Container），本身並附帶一個簡單的Web Server。 
在Web服務的開發，使用同為Apache組織的Axis 1.4[11]，它必須依附在一個Application 
Server上，提供了簡單的服務佈署機制，具備一個能解譯及處理SOAP訊息的SOAP Engine，
它也提供一個工具能方便的對服務程式產生WSDL文件，使得服務開發能夠更有效率。 
後端的資料庫伺服器則使用Apache Xindice 1.1[12]，是原生型XML資料庫，使用Java
程式
ava SE Development Kit（JDK）5.0 作為元件的開發工具，跨
平台
負責Process Instance的產生、
執行
語言進行開發，可透過XML:DB API來呼叫，以XPath為查詢語言，在更新語法上則使
用XML:DB XUpdate。原生型XML資料庫以XML文件為基本的儲存單位，不需進行文件拆
解動作，能保持XML文件的結構，在資料的存取只是結構樹上的一個節點，對XML文件的
操作有較高的彈性。 
在程式的開發，以 Sun J
的特性和豐富的函式庫讓 Java 適用於開發系統，而在程式的編輯使用了 Xinox Software
公司的 JCreator 來輔助程式的撰寫，提升程式開發的效率。 
流程起始時，必須先剖析流程定義，然後由工作流程引擎
與終止，並決定Activity之間執行的方式。Figure 3說明由使用者發出建立流程的要求和
流程運作的過程。 
 3
z 使用者透過用戶端介面向 Worklist Handler 發出 GetWorklist 的訊息，要求取得工
作清單。 
z Worklist Handler 可與 Workflow Engine 作互動，取得此角色未處理的工作。 
z Worklist Handler 會將工作資訊整理成工作清單回傳給使用者。 
 
本系統加入呼叫Web Services的元件以及安全機制。整合Web Services的工作流程系統
可以使用任何網路上現有的服務，增加系統的擴充性，將網路上所有不同的單一服務整合
在一起，達到複合型Web Services的功能，藉由Web Services技術的特點，簡化了跨企業整
合導入的複雜度。Figure 5是XPDL中描述一個Web Services的定義。 
 
An Application that is defined as an operation in a WSDL document: 
<Application Id="placeOrder"> 
<ExternalReference  
location="http://abc.com/PO/services/poService.wsdl" 
xref="PlaceOrder" 
namespace="http://abc.com/services/poService.wsdl/definitions/portType"/> 
</Application> 
Figure 5: XPDL描述Web Services的定義[13] 
為了整合Web Services，而設計出We  Services Invoker元件作為服務Client端，Workflow 
Engine可以在流程執行時透過Web Services Invoker來呼叫指定的Web服務。
b
Figure 6說明
Workflow Engine呼叫Web Services的運作流程。 
Web Services
Invoker
Request
(InvokeWebServices)
2
Workflow Engine
Return
(Executed Result)
3
Interact
1
Service
 
Figure 6: 呼叫 Web Services 的運作流程 
z Workflow Engine 在執行時期可與 Web Services Invoker 作互動，來呼叫指定的 Web 
Services。 
z Web Services Invoker 向遠端的 Web 服務發出呼叫的要求。 
z 目標 Web 服務處理要求後，回傳執行的結果。 
 
在現行的系統中，已經有許多的Web Services提供服務，並且利用Web Services提供服
務的系統範圍也在大幅的成長之中，對於資料傳輸過程中的安全性是極需解決的問題。根
據Gartner Group的研究報告[14]顯示，隨著企業廣泛透過Web Services來建置應用系統，未
來相關應用的市場規模將呈現高度成長狀態。而加入新的安全機制，不論是Client或Server
端均需要修改程式；因此，本論文實作了SWS-WfMS的安全認證，開發出一個WS-Security
的應用框架，可以在不改變現行舊有的Web Services架構下，部署到要實作WS-Security的
 5
 7
程中的參與者有二人。一是售票人員，負責訂票和結帳，另一個是點餐人員，處理
點餐
是否要點餐。 
是否
驗證。 
在工作流程系統中，針對不同角色（Role）設定不同的權限，以限制使用者（User）
可參
售票人員。 
文件內容的流程描述來執行特定的Web Services。以Figure 8來說明流程的步驟。 
流
事宜。以下並對流程中的四個 Activity 所執行的工作做說明： 
• Ticket_Meal：購票與點餐。讓使用者選擇要購買的電影票並決定
• Branch：此為一個 Route Activity，用來做路徑的控制，沒有參與的執行者，根據
要點餐將流程導向 Meal_Place 或 Checkout。 
• Meal_Place：可以在此處選擇所要的餐點。 
• Checkout：使用信用卡付款，對信用卡資料做
 
與處理的工作項目，再將使用者與角色做互相關聯的動作。參與此流程之使用者與角
色，兩者間的關係可如下所述： 
• 使用者 Ticket 對應到流程中的
• 使用者 Meal 對應到流程中的點餐人員。 
 
 
Figure 8: 電影院系統流程圖 
流程執行的實際過程以及  
Setp low來起始該流
Web Services 的安全機制，主要步驟如下：
1:使用者登入後，由於是該流程的第一位執行者，必須透過啟動Workf
程，如此流程才會開始運作，使用者才可以進行自己的工作。使用者選擇所要購買的電影
票後，並決定點餐，Ticket_Meal呼叫TicketService取回執行結果（Figure 9）。利用Axis所提
供的SOAP Monitor來監測SOAP訊息，可以看到被傳送的SOAP訊息內容如Figure 14所示。 
 Figure 11: Meal_Place 的執行畫面 
 
Figure 12: 呼叫 MealService 的 SOAP 訊息 
Step3:使用者以信用卡付款，Checkout呼叫CreditService取得信用授權狀態（Figure 13）。由
於信用卡資料屬重要機密資訊，所以在此例使用Triple DES加密演算法，將傳輸過程中的
SOAP訊息加密，如Figure 14所示。 
 9
 Figure 15: 流程執行結果 
 
5. 參考文獻 
1 W3C, “Extensible Markup Language (XML) 1.0 (Fifth Edition),” 
http://www.w3.org/TR/2008/REC-xml-20081126/, W3C Recommendation, 26 November 
2008. 
2 W3C, “SOAP Version 1.2 Part 0: Primer (Second Edition),” 
http://www.w3.org/TR/2007/REC-soap12-part0-20070427/, W3C Recommendation, 27 
April 2007. 
3 W3C, “Web Services Architecture,” http://www.w3.org/TR/2004/NOTE-ws-arch-20040211/, 
W3C Working Group Note, 11 February 2004. 
4 Georgakopoulos, D., Hornick, M., and Sheth, A., “An Overview of Workow Management: 
From Process Modeling to Workow Automation Infrastructure,” Distributed and Parallel 
Databases, Vol. 3, No. 2, pp. 119-153, 1995. 
5 Shi, M., Yang, G., Xiang, Y., and Wu, S., “Workow management systems: a survey,” Int. 
Conf. Communication Technology, Vol. 2, pp. 22-24, 1998. 
6 Elmagarmid, A., and Du, W., “Workow Management: State of the Art vs. State of the 
Products,” in Proc. NATO Advanced Study Institute on Workow Management Systems, 
1997. 
7 WfMC, “The Workflow Reference Model,” Issue 1.1, The Workflow Management Coalition 
Specification, 1995. 
 11
