 2
一、簡介 
在普及計算(Pervasive computing)、無所不在計算(Ubiquitous computing)或環境智慧
(Ambient intelligence)等研究領域中，情境感知計算(Context-aware computing)是一項相當重
要的研究主題。情境感知系統(Context-aware system)的主要目的是希望達到自動感知使用者
的即時地點、狀況，用以預測或判斷使用者的意圖或需求，然後適時、適地的提供適當可
行的服務。在應用方面，主要的情境感知系統包括有家庭生活(Smart home)、居家安全(Home 
security)、辦公環境(Smart Office)、健康照護(Health care)、購物娛樂、文化藝術展演與欣賞
及行動學習(Mobile e-learning)等諸多領域。 
為了解決系統建構不易，以及避免特定硬體設備與開發軟體的相容性問題，一般化情
境感知系統服務平台(Generalized Service platform)是近年來的主要研究議題之一；而有關情
境感知系統服務平台的問題中，我們發現無論有關情境資料的擷取(Context extraction)與解
譯(Context interpretation)、系統服務的驅動(Service activation)與觸發(Trigger)，或是系統中
情境衝突(Context conflict)的感知偵測與各種情境不一致(Context inconsistency)的認知等研
究子題，均是非常值得深入探討的議題。本計畫於 98 年度計畫中，提出「一般化智慧型情
境感知系統架構」(圖 1)，並提出確實有效改進情境解譯器的建構工具與方法。本年度計畫
延續所提出的架構中未完成的情境管理(Context manager)部份，構建不一致情境的管理模
組。 
 
 
圖 1: 一般化情境感知服務系統平台 
 
二、研究目的 
本計畫為延續 98 年度之計畫案，以用完成所提出的「一般化智慧型情境感知系統架構」
(圖 1)為主要目標；本第二年計畫的主要目的則是研究有關情境協調與管理的主題。情境協
調與管理的必要性在於隨著環境中感知器的類別與數目增加，會造成實際情境與情境資訊
的不一致，導致情境感知系統中情境資訊的正確性及可靠性降低；除此之外，系統同一時
間也可能發生數個情境同時需要觸發相同服務的狀況，此時會發生情境衝突的問題。本計
畫主要提出一分層式情境管理架構，針對不同的情境資訊層次，提出不同的不一致情境資
訊解決策略，用以改善系統可能發生不一致情境時 所導致的系統正確性與可靠性的問題，
提升情境感知服務的品質與改進服務系統的效能，達成智慧型情境感知服務平台的目標。 
 
Service constructor  Context 
Interpreter 
Sensor Actuator Actuator Sensor
Service Provider 
Context constructor 
 
DeviceUsers Location
Domain 
knowledge 
Context 
Database 
Application 
Service 
Context Editor 
Service Editor 
 
 
Context 
Recognizer
Interpreter 
Generator 
Schema 
Mapper 
 
User 
Behavior 
Prediction 
Context Manager 
Context conflict detector
Context inconsistency 
detection/resolution 
 
Service  
Adaptor 
Generic Interpreter
 4
示法，若未來系統遇到相似的案例，即可自動偵測出情境衝突。 
 基於圖形(Graph-Based)的偵測方式：將規則與限制描述成圖形，應用圖型比對的方
式判斷是否有衝突的狀況。 
 情境衝突解決策略(Resolution): 
 權重法(Weight value): 權重法是預先透過機器學習或人為設定每個情境資料的權
重，例如:發生頻率高、取樣間隔小，則可能給予高權重值，並藉此權重來判斷應如
何調整服務的提供。 
 優先權(Priority): 優先權是對感知系統中，每一位受服務的對象設定提供服務的優先
次序，例如: 一個家庭的父母親會比小孩有更高的優先權使用感知系統提供的服務。 
 使用者驅動(User-driven): 當系統無法判斷該如何提供服務時，感知系統會提供使用
者幾個問題選項，讓使用者自行判斷該如何與其他使用者做出協調或以多數決定。 
表 1 與表 2 分別為情境衝突偵測與情境衝突解決方法的優缺點比較。 
 
表 1: 情境衝突偵測方法的優缺點 
情境衝突偵測 優點 缺點 
Rule-Based 
 易於理解與解釋推導出來的答案  耗費時間建立規則 
 耗費龐大運算時間 
 規則庫大小影響系統效率 
Case-Based 
 根據過往的經驗，應用這些經驗
來解決相似問題，類似經驗法則 
 需要有大量的案例 
Graph-Based 
 視覺化 
 易於理解問題 
 需耗費龐大時間建立 Graph
 新增、刪除節點的成本太高
 
表 2: 情境衝突解決策略的優缺點 
情境衝突解決 優點 缺點 
Weight value 
 依據使用者喜好定義 
 具調適性，盡可能最大化分配系統
資源 
 權重值難以拿捏 
 資源必須有所取捨，可能導
致所有使用者都不滿意狀況
產生 
Priority  簡潔 
 有效率 
 缺乏正規的語意表達 
 不具協調能力 
User-driven 
 經過人類溝通協調，可得到最佳結
果 
 違反情境感知系統強調系統
不干預使用者的原則 
 
四、研究方法 
本研究提出一分層式情境管理架構，如圖 2 所示。主要的想法是低階情境資訊未被匯
集成高階情境前，常因訊號干擾或是操作誤失造成低階情境的不一致，因此據此偵測出其
中的不一致情境並予以解決，而非在低階情境資訊被匯集成高階情境後才一併處理。因為
當情境資訊層級愈高，其抽象化程度也愈高，維持一致性需耗費的成本也相對提升。而分
層處理的優點除了前述的部分外，亦可分散傳統集中式規則庫的負擔，減少單一規則庫需
檢查的規則數量。此架構主要包含下列模組： 
 情境資訊解譯器(Context interpreter) 
 低階一致性管理模組(Low-Level consistency module) 
 高階一致性管理模組(High-Level consistency module) 
 衝突避免模組(Conflict-Free module) 
 命令解譯器(Command interpreter) 
上述各模組之運作流程如下： 
 6
 服務層之一致性管理模型：處理對象是以服務情境資訊為主，主要是解決服務情境與
資源發生衝突時的解決方式。 
 
四、實驗結果與討論 
為了驗證所提出分層式不一致情境模型及方法之可行性與效能，我們設計兩個實驗分
別針對感測層情境資訊及事件層情境資訊的一致性管理進行評估與比較。第一個實驗是感
測層情境資訊的一致性實驗。第二個實驗是事件層情境資訊的一致性實驗，此實驗除感測
層情境資訊外，同時考慮事件情境資訊之不一致的解決演算法。 
第一個實驗中使用兩組二元型態資料集，資料集的相關特性說明如下： 
(1) 合成資料集(Synthesized dataset, SD)：此資料集是透過華盛頓州立大學人工智慧實驗室
學者 Cook 撰寫的 Synthetic Data Generator 所產生，內容是模擬一位使用者生活在佈有
10 個狀態感測器的空間中，感測器記錄使用者與環境的互動情形後產生的感測值，同
時，並標記(Annotate)使用者正在進行的活動事件。資料集的取樣時間為 1 分鐘，包含
Breakfast、Leaving home、Dinner、Watching TV、Reading、Sleeping，與 Others 等共 7
個活動事件。每個活動事件均有 28 個情境實例，且各活動事件對整體的時間佔有率均
不相同，模擬期間共 28 天。 
(2) Kasteren 資料集(Kasteren dataset, KD)：此資料集是由阿姆斯特丹大學智慧系統實驗室
學者 Kasteren 所提供，為一真實活動資料，內容記錄一位 26 歲的男性獨自生活在一層
三房的公寓，空間中佈有 14 個狀態感測器記錄使用者與環境的互動情形後產生的感測
值。此資料集的取樣時間為 1 秒鐘，包含有 Leaving、Toileting、Showering、Sleeping、
Breakfast、Dinner、Drink，與 Others 等共 8 個活動事件，每個活動事件的情境實例數
量與對整體的時間佔有率亦不盡相同，資料記錄期間為 28 天。 
我們將分別比較原始資料(Raw data)與使用 ĈR、ĈLP，以及 ĈCP避免方法於 SD 與 KD 資料
集上的精確度，及各避免方法在不同雜訊下的精確度平均值(其中 ĈR 與 ĈLP是取不同參數下
的精確度平均值)。 
 
表 3：實驗 1 之二元型態不一致情境避免方法之參數設定 
Datasets ĈR ĈLP 
SD tmin = 1 sec     tmax = 1~10 secs tleast =1~10 secs 
KD tmin =100 ms   tmax = 100~1000 ms tleast =100~1000 ms 
 
情境資訊的正確性與可靠性的評估方法上，我們採使用時間片段精確度(Time slice accuracy, 
AccT)與類別精確度(Class accuracy, AccC)來估量。其定義如下： 
N
tLtInferred
Acc
N
t
T



 1
|)()(|
,    




C
c c
N
t
c
C N
tLtInferred
C
Acc
c
1
1 )
|)()(|
(1 ; 
N 為時間片段的總數量，Inferred(t)為第 t 個推論活動事件，L(t)為第 t 個正確活動事件；C
為類別數量，Nc為各類活動事件的時間片段數量，Lc(t)為第 c 類的第 t 個正確活動事件。 
 
實驗結果：部分相關實驗的時間片段精確度(AccT)與類別精確度(AccC)結果如圖 3、圖 4、圖
5 所示，而各不同雜訊比的平均值整理如表 4。對於由感知器層之雜訊所產生的不一致情
境，由實驗結果可以發現，無論在 SD 與 KD 資料集中，ĈR、ĈLP，以及 ĈCP在精確度平均
值上的表現以 ĈLP最佳，而 ĈR與 ĈCP的表現僅有些微的差距，原因是 ĈLP能抵抗雜訊，但
ĈR 與 ĈCP 無法抵抗雜訊。若當 SD 與 KD 資料集不包含雜訊時，則以 ĈCP 最佳，而 ĈR 與
ĈLP會直接受取樣時間與活動事件時間長短所影響，導致 ĈR與 ĈLP須分別在 SD 與 KD 上方
能獲得較好的結果。 
 
 8
料有 57,600 筆((24×60×60)/150×100)。每筆資料包含 5 種情境資訊，分別是人員姓名、位置
情境資訊、活動情境資訊、個人資料與環境情境資訊，故總情境資訊數量為 288,000 筆
(57,600×5)。同時也設定 8 種服務情境，如下所示： 
S1：女性使用者晚間 7 點後在回家路上，若經過犯罪率高的區域，則給予一個警告。 
S2：使用者在 pub 遇見朋友，則顯示一個邀請訊息。 
S4：尋找附近是否有名為 Sandy 的使用者。 
S5：尋找附近是否有名為 Josephine 的使用者與使用者正進行的活動情境。 
S6：當使用者 Winifred 在辦公室時，提醒他要寄出年終報告。 
S8：尋找 Office-638.225 辦公室中人的數量。 
S14：若 Dominic 的位置情境是在辦公室，則將鬧鈴轉為震動模式。 
S15：尋找使用者 Ida 目前位置一百公尺內，車上有壅塞警告的人員位置。 
實驗設定如下：為了於以上測試模擬環境中，了解發生不一致事件之時，對服務品質與正
確性的影響，以及使用本論文中的解決方法是否能有效解決不一致情境以提升服務品質與
正確性，假設情境資料集有以下的不一致情境偵測規則： 
C1：使用者不能在工作時間內離開工作場所。 
C2-C4：使用者的活動情境資訊必須符合地點情境資訊 Home、Office 與 Entertainment。 
C5：使用者不能在很短的時間內由一個地點移動到另一地點。 
C6-C12：使用者活動情境資訊的進行的順序：C6 (Asleep to Working)、C7 (Working to 
Walking on the street)、C8 (Walking on the street to Going to work)、C9 (Going to 
work to At home)、C10 (At home to Going to a party)、C11 (Going to a party to At a 
party)與 C12 (At a party to Going home)。 
上述 12 條不一致偵測規則依分層式架構方法，分為感測層與事件層不一致性偵測規則，其
中 C5 至 C12 偵測規則置於感測層；C1 置 C4 則為事件層之不一致偵測。感測層不一致性
偵測規則中，C5 檢查的位置(Location)情境資訊為數值型態，使用 ĈB；C6 至 C12 檢查的活
動(Activity)情境資訊為數值型態，選用 ĈC。而事件層不一致性偵測規則中，C1 至 C4 檢查
的位置與活動情境資訊，採用 ĈFPR，當不一致情境發生時，ĈFPR將取消位置與活動情境資
訊，因為位置與活動情境的持久程度與新舊程度皆相同。 
實驗結果：有關四種不同層次組合的不一致情境偵測與解決策略。表 5 為四種不一致情境
偵測與解決策略在不同服務下 24 小時的服務觸發率。表 6 為四種不一致情境偵測與解決策
略在 24 小時中每三小時為間隔的服務觸發率。表 7 為四種不一致情境偵測與解決策略的召
回率與準確率。我們發現使用感測層不一致避免方法在觸發率、召回率與準確率的評估表
現均比使用事件層與多層式的方法來得好，原因在於感測層不一致避免方法中能修復大量
由感測器造成的不一致情境。然而與傳統方法類似的事件層不一致偵測與解決方法，其表
現則是最差，因為僅能使用取消的方式來解決不一致情境。而多層式的方法與使用感測層
方法在各評估上僅有些微差距，原因亦是因為已修復大量感測器造成的不一致情境，故多
層式方法在事件層的效果則不明顯，但多層式方法能比感測層不一致避免方法觸發更少的
錯誤事件。因此，若是為了確保系統的可靠性，事件層不一致情境偵測與處理仍有其價值
存在。 
表 5：24 小時服務觸發率 
Services No. Noise Sensor Event Sensor + Event 
S1 100.00  96.49 100.00  91.54 
S2 69.54 100.00  70.81  99.96 
S4 94.27 100.00  71.61 100.00 
S5 54.36  95.47  42.20  95.07 
S6 73.96  99.75  73.50  99.83 
S8 73.40 100.00  74.59 100.00 
S14 73.96  99.75  73.50  99.83 
S15 47.97  97.18  36.52  97.23 
Average 73.43  98.58  67.84  97.93 
 
Initiative Prevention Strategy for Context Inconsistency in Smart Home 
 
Been-Chian Chien 
Dept. of Computer Sci. and Information Eng. 
National University of Tainan 
Tainan, Taiwan  
Email: bcchien@mail.nutn.edu.tw 
Yuen-Kuei Hsueh 
Dept. of Computer Sci. and Information Eng. 
National University of Tainan 
Tainan, Taiwan  
Email: ph.study@msa.hinet.net
 
 
Abstract—A context-aware system generally integrates many 
different kinds of information techniques to build a computing 
environment for serving users anytime, anywhere. For a 
complicated context-aware system with large number of users, 
the interference among devices and users usually decreases the 
correctness and reliability of context. The incorrect context 
may cause context inconsistency and lead a context-aware 
system to trigger abnormal reactions and wrong decisions. In 
this paper, the prevention strategy is proposed for resolving 
context inconsistency. The context consistency constraints for 
different sensor data types are proposed and developed to 
prevent the context inconsistency caused by imprecise sensing 
devices and environmental noises. The experimental results 
show that the proposed consistency constraints and resolution 
rules can eliminate incorrect contexts effectively and improve 
the quality of a context-aware system in the application of 
smart living space. 
Keywords-context aware; context inconsistency; inconsisency 
prevention; smart home; 
I.  INTRODUCTION  
The applications from the issue of smart living space 
have drawn much technical investigation in many research 
areas like pervasive computing, context-aware computing 
and ambient intelligence.  A smart living space is basically 
based on a context-aware environment that can provide 
intelligent living services for daily life. The famous research 
projects of smart-living in academic area include Aware 
Home  [2] of Georgia Tech., Aura  [5] of Carnegie-Mellon 
University, Adaptive House  [1] of University of Colorado, 
House_n  [3] and Oxygen  [4] of MIT, and Smart Home  [6] of 
Duke University.  
Though context-aware computing has been studied over 
a decade, most of the research issues focused on system 
frameworks, context representations, context reasoning and 
security of application services.  Many prototypes and tools 
were proposed and developed. Some practical systems have 
also been built in many applications recently. However, the 
performance and reliability of context-aware systems are 
getting low while system components and operating 
environments are getting complicated.  
To improve the effectiveness of a context-aware system, 
recognizing context correctly is an important task. Since 
context-aware systems may cause improper reactions due to 
the incorrect sensing context, the low qualified context will 
decrease the effectiveness of a context-aware system directly. 
Generally, incorrect contexts may cause two main problems: 
context inconsistency and context conflict. If a contradiction 
among the contexts exists while computing services in a 
context-aware system, the situation is called context 
inconsistency. If the resources can not satisfy different 
context services at the same time, it is called context conflict. 
In the previous researches, most of the solutions used the 
strategy of inconsistency detection and resolution for the 
context inconsistency problem. However, it is difficult to 
identify all problematic contexts completely using 
consistency constraints. The inconsistency detection is also 
an extra overhead for the system. 
In this paper, the prevention strategy is proposed and 
discussed for the context inconsistency problem. Instead of 
detecting and resolving inconsistency cases after context 
inconsistency occurring, the prevention strategy involves 
specific constraints and rules for each sensor context. The 
context consistency constraints for different sensor data 
types are proposed and developed to prevent the possible 
context inconsistency caused by imprecise sensing devices 
and environmental noises. The proposed approaches are 
tested on two ADL (Activities of daily living) datasets. The 
experimental results show that the proposed consistency 
constraints and resolution rules can eliminate incorrect 
contexts effectively and improve the quality of a context-
aware system in the application of smart living space. 
The remainder of this paper is organized as follows. 
Section 2 reviews the previous technologies of context 
inconsistency detection and resolution. Section 3 depicts the 
idea of prevention strategy and proposes the consistency 
constraints and prevention rules for different sensor data 
types. The experimental results are shows in Section 4. 
Finally, we give a conclusion for this work in Section 5. 
II. RELATED WORK  
The problem of context inconsistency was firstly 
mentioned by Henricksen et al in 2004. In  [8], the authors 
analyzed and summarized several reasons of mismatching 
between sensed contexts and real-world activities. The 
representation method of describing imprecise context is 
proposed in their article, but the resolution for imprecise 
context was not discussed.  
Context inconsistency is possibly caused by either 
imprecise, incorrect context, or the contradiction of context 
definitions. The related research and solution strategy for 
“ON” is triggered. The consistency prevention rule for the 
least persistence constraint ĈLP(tleast) is described as  
IF [ t – start_time(xsignal = 1) ] ≥ tleast 
THEN xcontext(t)= ON ; 
ELSE xcontext(t) = OFF ; 
The context is kept “OFF” if the raw signal was not sensed 
as “1” for tleast time continuously. Example 2 shows an 
instance of executing the consistency prevention rule for the 
least persistence constraint ĈLP. 
 
Example 2. Let the parameter of constraint ĈLP(tleast), tleast 
be set to be 5 seconds. As shown in Fig. 2, the raw sensor 
signal is triggered between the durations of the 5th and the 
14th seconds, and the 18th and the 20th seconds. The least 
persistence constraint ĈLP(5) will first check if the sensor 
signal is persisted 5 seconds at least before the sensor 
context being triggered. The first duration of “ON” signal 
keeps 9 seconds. It satisfies the constraint ĈLP(5), the 
prevention rule thus triggers the context to be “ON” from 
the 10th second. On the other hand, the second duration of 
“ON” signal keeps only two seconds. It does not satisfy the 
constraint ĈLP(5), the context will not be triggered. 
 
Figure 2.  Example for the least persistence constraint ĈLP. 
(3) The change-point constraint ĈCP: 
The change-point constraint ĈCP  referred to the state 
correction method proposed by Kasteren et al. in 2008 [16]. 
Here, we modified the method to be the consistency 
prevention rule for the change-point constraint ĈCP. The rule 
is described as follows. 
IF [ xsignal(t) XOR  xsignal(t-1) ] = 1 
THEN xcontext(t) = ON ; 
ELSE xcontext(t) = OFF;. 
where xsignal(t) is the raw signal’s value at current sampling 
time t for the sensor x. The context of sensor x is only set to 
“ON” while the signal is changing at the sampling point. 
Example 3 shows the result of executing the consistency 
prevention rule for the change-point constraint ĈCP. 
 
Example 3. As shown in Fig. 3, the raw signal changes its 
state at the time point of the 5th, 14th, 18th, and the 20th 
second. The change-point constraint ĈCP will trigger the 
context to be “ON” until the next sampling time point. The 
sampling points without value changing keep “OFF.” 
 
Figure 3.  Example of Change-Point constraint. 
B. Binary data type 
For numerical sensor data, we propose a context 
inconsistency prevention constraint called the bound 
constraint and denoted as ĈB. 
The bound constraint ĈB(vmax) contains one parameter vmax 
which is the maximal variation of signal values. The rule of 
consistency prevention for the constraint ĈB(vmax) is 
described as 
IF [ xsignal(t) – xcontext(t-1) ] > vmax 
THEN xcontext(t) = xsignal(t-1) + vmax ; 
IF [ xcontext(t-1) – xsignal(t) ] > vmax 
THEN xcontext(t) = xsignal(t-1) – vmax ; 
ELSE xcontext(t) = xsignal(t). 
Since the context returns a value with numerical data 
type, the sensor’s signal exceeding the maximal variation 
vmax is not allowed. The continuous sampling signals 
violates the bound constraint ĈB(vmax) will be restricted by 
the rule of consistency prevention. An example in Example 
4 shows the correcting of the consistency prevention rule for 
the bound constraint ĈB. 
 
 
 
Figure 4.  Example of the bound constraint. 
Example 4. Let the parameter of constraint ĈB(vmax), vmax, 
be set to be 10. As shown in Fig. 4, the raw sensor signal 
value sequence is <29, 38, 13, 20, 45, 42>. The values at the 
second sampling point and the third sampling point are 38 
and 13, respectively. The difference between the two 
neighbor values is larger than vmax=10. The value of the 
third sampling point will be fixed into 28. The fifth 
sampling point is another value in this example needed to be 
fixed. Since the value at the fourth sampling point is 20, the 
value at the fifth sampling point should be corrected to be 
Time 
ON
OFF
1
0
2510 15 
State
0 5 20 
raw
ĈCP
250 5 10 15 20
Time
State
ON 
OFF 
1 
0 raw
ĈLP(5)
out the noise effectively when the noise rate are high and the 
time tleast  is larger. Fig. 10 and Fig. 11 show the time slice 
accuracy and the class accuracy of ĈCP, respectively. This 
constraint is not suitable for the case of large sampling time 
and unstable signals. 
. 
V. CONCLUSION 
In this paper, we initiate the prevention strategy for 
solving the context inconsistency problem. The context 
consistency constraints for different sensor data types 
include binary, numerical, and nominal data types. Five rules 
of consistency constraints, ĈR, ĈLP, ĈCP, ĈB, and ĈC, are 
proposed and developed to prevent the possible context 
inconsistency caused by imprecise sensing devices and 
environmental noises. The experimental results of the 
proposed approaches are show that the proposed consistency 
constraints and resolution rules can eliminate incorrect 
contexts effectively if a proper consistency constraint is 
applied to the corresponding sensor. 
ACKNOWLEDGMENT 
This research was supported in part by National Science 
Council of Taiwan, R. O. C. under contract NSC 99-2221-E-
024-015. 
 
REFERENCES 
[1] The Adaptive House, http://www.cs.colorado.edu/ ~mozer/ 
house/. 
[2] The Aware Home Research Initiative, http://awarehome. 
imtc.gatech.edu/. 
[3] MIT House_n, http://architecture.mit.edu/house_n/. 
[4] MIT Project Oxygen,  http://www.oxygen.lcs.mit.edu/. 
[5] Project Aura, http://www.cs.cmu.edu/~aura/. 
[6] Smart Home, http://smarthome.duke.edu/. 
[7] Y. Bu, S. Chen, J. Li, X. Tao, and J. Lu, “Context 
Consistency Management Using Ontology Based Model,” in 
Proceedings of the 10th Workshops-Current Trends in 
Database Technology, Munich, Germany, pp. 741-755, 
March 2006. 
[8] K. Henricksen, and J. Indulska, “Modelling and Using 
Imperfect Context Information,” in Proceedings of the 2nd 
IEEE International Conference on Pervasive Computing and 
Communications, Orlando, Florida, pp. 33-37, March 2004. 
[9] R. Mayrhofer, “Context Prediction based on Context 
Histories: Expected Benefits, Issues and Current State-of-the-
Art,” in Proceedings of the 1st International Workshop on 
Exploiting Context Histories in Smart Environments, Munich, 
Germany, pp. 31-36, May 2005. 
[10] L. R. Rabiner, “A tutorial on hidden Markov models and 
selected applications in speech recognition,” Proceedings of 
the IEEE, 77, (2), pp. 257-286, February 1989. 
[11] C. Xu, “Inconsistency Detection and Resolution for Context-
Aware Pervasive Computing,” Computer Science and 
Engineering, Hong Kong University of Science and 
Technology, Hong Kong, August 2008. 
[12] C. Xu, and S. C. Cheung, “Inconsistency Detection and 
Resolution for Context-Aware Middleware Support,” in 
Proceedings of the 4th Joint Meeting of the European 
Software Engineering Conference and the ACM SIGSOFT 
International Symposium on the Foundations of Software 
Engineering, Lisbon, Portugal, pp. 336-345, September 2005. 
[13] C. Xu, S. C. Cheung, W. K. Chan, and C. Ye, “On 
Impact-Oriented Automatic Resolution of Pervasive 
Context Inconsistency,” in Proceedings of the 6th Joint 
Meeting of the European Software Engineering 
Conference and the ACM SIGSOFT International 
Symposium on the Foundations of Software 
Engineering, Dubrovnik, Croatia, pp. 569-572, 
September 2007. 
[14] S. Szewcyzk, K. Dwan, B. Minor, B.Swedlove, and D. 
Cook, “Annotating Smart Environment Sensor Data for 
Activity Learning,” Methods of Information in 
Medicine, 48, (5), pp. 480-485, May 2009. 
 
 
 
 
 
 
Figure 6.  Time-slice accuracy for ĈR(1,1) to ĈR(1,5). 
 
 
 
 
 
Figure 7.  Class accuracy for ĈR(1,1) to ĈR(1,5). 
 出席「2010 第 10 屆國際智慧型系統設計與應用學術會議」報告 
The 10th International Conference on Intelligent Systems Design and 
Applications (ISDA 2010) 
 
Nov. 29 –Dec. 1, 2010, Cairo, Egypt 
 
 
計畫編號 NSC 99-2221-E-024 -015 
計畫名稱 整合機器學習方法於情境感知服務平台技術之研究(II) 
出國人員姓名 
服務機關及職稱 
錢炳全  教授 
國立臺南大學資訊工程學系 
會議時間地點 2010 年 11 月 29 日~12 月 1 日，埃及，開羅 (Cairo, Egypt) 
會議名稱 2010 第 10 屆國際智慧型系統設計與應用學術會議 (ISDA2010) 
The 10th International Conference on Intelligent Systems Design and Applications 
發表論文題目 An Intelligent Context Interpreter based on XML Schema Mapping 
 
 國立高雄大學資工系洪宗貝教授在本研討會中受邀為共同議程主席(Technical Program 
Co-Chair)，個人則是擔任宣傳共同主席(Publicity Co-Chairs)，兩人並同時在本研討會中合組
一特別議題，主題名稱為 Data Mining and Learning Techniques in Intelligent Systems，本特別
議題共有 12 篇論文，稿件來自 6 個不同國家，分為兩個場次發表。本研討會論文集蒐錄於 IEEE 
Digital Library 論文集中，為 EI 索引文獻之一。 
 
參加會議經過： 
本次會議地點位於埃及首都開羅，距離遙遠，無直航班機，必須透過第三國轉機前往，
台灣地區雖有多人投稿發表論文，但多因時間緊湊及交通住宿等不易安排等因素，因而最後
決定無法前往。只有個人與台南應用科技大學李俊達教授，由桃園機場搭乘華航經韓國仁川，
轉搭韓航，中間再停機於烏茲別克首都塔什干加油，再接續飛至目的地埃及開羅。總飛行時
數超過 18 小時。 
會場學位於開羅市區的開羅大學國際會議中心舉行，開羅市區交通擁擠複雜，又無交通
號誌，對於慣於交通號誌的國人而言，連過馬路都成問題，實在令人大開眼界。我們因事前
耳聞當地交通狀況，故事先提早約 5 日前抵達。除了解當地狀況外，並順便先到埃及博物館，
與開羅附近的金字塔景點參觀。11 月 29 日正式會議開始，第一天早上安排 Prof. Janusz 
Kacprzyk 做 Keynote speech。下午則安排有三場 Tutorials，但是因為在同一時間，只能擇一参
與。其中一場由 Prof.Vasudha Bhatnagarn 所主講，題目為”Modeling Changes in Evolving Data”， 
討論有關資料串流(Data Stream)的處理與學習模型的概念轉移(Concept Drift)等問題，與我個
人後續計畫具有相當密切的關係，這個問題也是未來相當受到矚目的研究議題。Tutorials 結
束後，大會安排到吉薩(Giza)金字塔區參觀夜晚金字塔燈光表演，晚上的金字塔配上燈光有其
神秘感，也不會那麼炎熱。第二天與第三天上午均安排有一場 Plenary Talk，十時三十分之後
以及下午才開始安排論文發表場次，第二天晚上在論文發表完後的晚宴則被安排在尼羅河遊
輪上舉行。 
個人與洪教授所組的特別議題二個場次安排於最後一天下午，個人所發表的論文題目為 
“An Intelligent Context Interpreter based on XML Schema Mapping＂，安排於第三天下午第二場
次發表，由個人擔任主持人。同一場次總共有六篇論文發表，場次主題為智慧型系統的資料
探勘與學習技術(Data Mining and Learning Techniques in Intelligent Systems)。發表學者來自埃
模型無法有相當好的回應與效率。如何偵測系統資料模式的變化，以及有效率的學習出新
的高準確率資料模型，是本問題的兩大主要議題。在應用層次上，許多的智慧型系統與應
用中，如何應用偵測系統模型的轉變、何時轉變的決策、以及如何因應轉變過程，議是在
應用議題上值得探討的議題。在本次的會議中，也有一些場次討論到應用的議題，個人認
為此一主題在未來數年當中，是很值得期待與投入的研究主題。 
2. 本次會議因為在學期中，且因路途遙遠轉機不變的因素，導致國內學者前往與會人數並不
十分踴躍。但見埃及雖然十分重視觀光，但相對的基礎建設與科技發展並不十分突出，城
鄉差距尤其巨大。然而挾其龐大文化資產，仍能吸引許多歐美人士前往參加，顯見觀光及
國力並非只有經濟或高科技，文化軟實力亦相當重要。在我們開會期間，正是埃及國家議
會改選的時刻，其選舉亂象比之台灣亦不遑多讓。街頭充滿競選旗幟與海報，宣傳車亦絡
繹於途、不絕與耳。回台二週後，埃及驚傳出現反政府反貪污示威，導致機場關閉，政情
動盪，最後使得執政近三十年的穆巴拉克垮台。足見證至之清明也是足以影響國家各項建
設與民生的重要因素。 
 
攜回資料名稱與內容： 
研討會論文集如下： 
1.論文光碟 IEEE Catalog No.:CFP10394-CDR, ISBN: 978-1-4244-8135-4. 
An Intelligent Context Interpreter based on XML Schema Mapping 
Been-Chian Chien 
Dept. of Computer Science and Information Engineering 
National University of Tainan,  
Tainan, Taiwan, R. O. C. 
e-mail: bcchien@mail.nutn.edu.tw 
Shiang-Yi He 
Dept. of Computer Science and Information Engineering 
National University of Tainan,  
Tainan, Taiwan, R. O. C.  
e-mail: tkuchris@hotmail.com 
Abstract—Context-aware computing is one of the attractive 
research topics in pervasive computing. Context-aware systems 
can react to users’ preferences according to context including 
location, time and other environment conditions. Context is 
generated by context interpreters or aggregated by context 
aggregators from the signals of sensors. A traditional context 
interpreter is usually built as an executable hard code called 
widget. It is difficult for the system manager to construct and 
maintain the large collections of context. In this paper, we 
propose an intelligent generic context interpreter using context 
scripts to overcome the hard code dependency between context 
and hardware devices. The generic context interpreter imports 
sensor data from sensor devices as an XML schema. Then, the 
schema matching approach is used to help system manager 
generating context scripts instead of widgets easily. The system 
was built and evaluated by different sensor schemas. The 
results show that the schema matching algorithm can match 
correct sensor types effectively and provide efficient context 
generation and maintenance. 
Keywords-context-aware system; context interpreter; schema 
matching; intelligent system 
I. INTRODUCTION
A context-aware system is a mobile environment in 
which applications can discover and make use of context 
information including user location, time, date, nearby 
devices and other environmental activities to adapt their 
operations and behavior [5]. A number of context-aware 
architectures were proposed and employed for a wide 
spectrum of systems and applications [3]. However, since 
each individual system focuses on its specific application 
domain, current context-aware systems are heterogeneous in 
all aspects, such as hardware, mobile resources, operating 
systems, application software, and platforms [15]. The 
serious heterogeneous characteristics of context-aware 
computing are especially important and become significant 
drawbacks while developing context interpreters for building 
context-aware services [4][14]. 
In general, context-aware systems use context to archive 
the objectivity of controlling services. Context is generated 
by context interpreters or aggregated by context aggregators 
from the signals of sensor devices in the mobile environment. 
A traditional context interpreter is usually built as a type of 
execution codes called widget [8]. Since a widget is usually 
designed by system programmers as a hard code to translate 
sensors data into a semantic representation called context, it 
is dependent upon the sensor devices and the application 
domains of context-aware systems. It is hard to maintain if 
some sensors were upgraded or renewed, and it is difficult 
for the system manager to construct new services for new 
devices. The extendibility of the systems thus will be 
restricted and lack of flexibility. 
In this paper, we propose an intelligent generic context 
interpreter based on XML context scripts generator and 
XML schema matching schemes. The proposed generic 
context interpreter architecture consists of two modules: the 
context script generator and the generic script interpreter. We 
use context scripts to replace hard code widgets for solving 
the dependency problem between context and hardware 
devices. The context script generator imports sensor data 
from sensor devices as an XML schema. Then, the schema 
matching scheme is applied to help the system manager 
generating context scripts instead of widgets easily. The 
generic script interpreter can translate various context scripts 
into the corresponding contexts used in the application. The 
generic interpreter was implemented and evaluated by 
various sensors schemas. The results show that the intelligent 
context script generator can effectively recognize correct 
sensor types by the support of schema matching scheme and 
the context interpreter provides efficient context generation 
and maintenance.  
This paper is organized as follows. In Section 2, we 
introduce the framework of context-aware systems.. The 
generic context interpreter is described in Section 3. Section 
4 presents the schema matching method for an intelligent 
context interpreter. The results of experiments and evaluation 
are shown in Section 5. Finally, conclusion is made in 
Section 6.
II. FRAMEWORK OF CONTEXT-AWARE SYSTEMS
The conceptual framework of context-aware systems 
consists of five layers as shown in Fig. 1 [4]. The contents of 
each layer are described as follows briefly. 
Figure 1 The five-layer conceptual framework.
Application layer 
Storage layer 
Context layer 
Interpretation layer 
Device layer 
1308978-1-4244-8136-1/10/$26.00 c©2010 IEEE
We first introduce and define the symbols used in the 
SYM approach. 
S : Source schema. 
s : an element node in source schema S.
T : Target schema. 
t : an element node in target schema T.
Lsim(s, t): the linguistic similarity between nodes s and t.
DTcom(s, t): the data type compatibility between s and t.
Ssim(s, t): the structure similarity between rooted at s and t.
Wsim(s, t): the weighted similarity between rooted at s and t.
thhigh : the threshold for increasing Wsim(s, t).
thlow : the threshold for decreasing Wsim(s, t). 
thaccept : the threshold for acceptance of valid mapping. 
Cinc : the multiplicative factor for increasing Wsim(s, t).
Cdec : the multiplicative factor for decreasing Wsim(s, t). 
Wstruct : the weight of structure similarity for Wsim(s’, t’).
leaves(s) : the set of leaves in the subtree rooted at s.
level(s) : the depth of node s, the depth of root is 1. 
StrongLink(s, t): the weight similarity Wsim(s, t) t thaccept.
The main similarity measure of matching schemas in SYM is 
the weighted similarity Wsim. For any two element nodes s
and t belonging two schemas S and T, respectively, the 
computation of Wsim(s, t) contains two phases: the linguistic 
matching and the schema structure matching. The goal of the 
linguistic matching phase is to find the linguistic similarity 
Lsim(s, t) between two element nodes s and t. In the schema 
structure matching phase, we first compute the compatibility 
of data type DTcom(s, t) and the structure similarity Ssim(s,
t). Then, the weighted similarity Wsim(s, t) is measured by 
combining Lsim(s, t) with DTcom(s, t) or Ssim(s, t). The 
detailed matching algorithm is described in the following 
subsections. 
B. Linguistic Matching 
The matching of element names in schemas is first step 
for most of the schema matching methods. A good name 
matcher can identify correct linguistic matching of element 
names effectively. An accurate name matching also helps to 
accomplish the element-level matching problem. However, a 
single name matcher with simple similarity measure cannot 
perform effective matching results in general. Here, we 
proposed a linguistic matching method based on four name 
matchers: Levenshtein, 3-grams, Jaro-distance and WordNet.
The computation of linguistic similarity for Levenshtein, 3-
grams, Jaro-distance are listed in [1]. For two strings s and t,
the similarity values between s and t are denoted as simlev,(s,
t), simtri(s, t), and simJaro(s, t), respectively.
WordNet was developed by Miller et al.[18]. The 
relations of words like, hyponyms, synonym and antonym 
are also computed by the levels of semantic hierarchy in the 
groups of words called synsets. Two words s and t are first 
stemmed. Then, the similarity of two words is computed by 
the depth of the different Lexicon’s hierarchies [13], as 
follows: 
2
2
2
1
1
depth
depthdepth
depth
depthdepth
Distance



 
,   (1) 
2-1),( DistancetssimWordnet  
,      (2)
where depth is the common parental depth, depth1 is the 
depth of s and depth2 is the depth of t from the root of the 
hierarchy. 
Although we just introduce the four different name 
matchers, they are usually not used at the same time while 
computing the linguistic similarity Lsim(s, t) of element 
names s and t. One of the reasons not using all name 
matchers is that these name matchers include implicit 
similarity hierarchy of each other. For instance, the 3-grams 
matcher has a high similarity when the Levenshtein matcher 
gets high similarity. Another reason is to reduce the 
computation time. Since the more matchers are operated, 
more computation cost is needed. Especially, WordNet 
spends a lot of time on searching dictionary for computing 
the similarity in their synsets. It is not a great idea to often 
execute WordNet. Hence, a decision tree of combining name 
matchers [10] is designed. The decision steps are listed as 
follows: 
Step 1. For two input element names s and t, we check 
whether the two strings are the same or not. If they 
are identical, the linguistic similarity is set to be one 
and the processing is halt; otherwise, the above 
name matchers are used to compute the linguistic 
similarity as the next step. 
Step 2. The simedit(s, t) are first computed and tested. Then, 
one of the following three cases will happen:  
1) If the value simedit(s, t) is larger than 0.55, the 
linguistic similarity is set to the value simedit(s, t).
2) If the value simedit(s, t) is less than 0.25, WordNet 
is used and the linguistic similarity is set to the 
value simwordnet(s, t).  
3) If the value simedit(s, t) is between 0.25 and 0.5, 
the 3-gram and Jaro-distance matchers are used 
as Step 3. 
Step 3. The average value of simtri(s, t) and simjaro(s, t) are 
computed. If the average of the two matchers is 
larger than 0.15, the linguistic similarity is set to the 
average; otherwise, WordNet is finally used and the 
linguistic similarity is set to the value simwordnet(s, t). 
Since WordNet matcher is time-consuming, it will not be 
started until no proper linguistic similarity is produced by the 
other matchers. 
C. Schema Structure Matching 
The goal of the schema structure matching phase is to 
find the weighted similarity Wsim(s, t) between two nodes s
and t belonging to schema S and T, respectively. The 
weighted similarity is calculated by a combination of the 
linguistic similarity (Lsim) and the structure similarity (Ssim).
Without loss generality, we suppose that a node in a 
schema would be an internal node or a leaf node. Hence, the 
structure matching in schemas may perform on two leaf 
nodes, two internal nodes and one leaf node vs. one internal 
node. We regard matching two leaf nodes as the leaf-
structure similarity matching. By contrast, the nonleaf-
structure matching includes the cases of matching two 
internal nodes and matching one leaf with one internal node.  
1310 2010 10th International Conference on Intelligent Systems Design and Applications
D. Schema Similarity 
After the computation of all values of Wsim(s, t) for the 
source schema S and the target schema T, the match pairs of 
the two schemas are generated by the Wsim(s, t) of the leaf 
nodes s in S and t in T. The match pairs generating algorithm 
is described as follows: 
Step 1. Consider the matching from S to T. For each leaf 
node s in S, the matched node t in T must satisfy the 
conditions of maximizing Wsim(s, t) and Wsim(s, t)
t thaccept. Let the set of selected match pairs be ST.
Step 2. Consider the matching from T to S. For each leaf 
node t in T, the matched node s in S must also 
satisfy the conditions of maximizing Wsim(s, t) and 
Wsim(s, t) t thaccept. Let the set of selected match 
pairs be TS.
Step 3. The final match results are the match pairs in the set 
STģTS.
After generating the matching pairs, the schema similarity 
between two schemas S and T is defined as   
|)(|
),(
),(
,
Sleaves
tsWsim
TSScSim
TtSs
matched¦
 .                 (8) 
V. EXPERIMENTAL RESULTS
The generic context interpreter proposed in this paper 
used Mapforce API to develop the context mapping in the 
context mapping editor. The initial blank system needs build 
context mapping manually. Once more mapping datasets 
were accumulated in the mapping history, Users will be able 
to refer to the existing schema mapping cases and a similar 
sensor schema mapping was selected to modify as a new 
context mapping. 
The test schema sets include seven different sensor 
schemas listed in Table I. The depths of schema structures 
are four levels. The number of leaves is between the range 
four and six. The number of nodes is in the range of seven to 
ten. We first ranked the similarity degree of each schema by 
experts as shown in Table II. Then the proposed schema 
matching algorithms, Cupid [11] and COMA++ [2][8] are 
tested on each schema. To evaluate the schema matching 
performance of ranking, we refer to Rnorm [11] values as the 
criterion of effectiveness. The matching results of similarity 
are evaluated and ranked, as shown in Table III. 
TABLE I. THE STRUCTURE UINFORMATION OF SENSOR SCHEMAS.
Schema Leaves Nodes Depth 
GPSData (GPS) 5 9 4 
HumidityData (Humid) 5 9 4 
IRData (IR) 5 9 4 
LightData (Light) 5 9 4 
RFIDData (RFID) 5 8 4 
SensorData (Sensor) 6 10 4 
Temp2Data (Temp2) 4 7 4 
The two methods SYM and SYM-Dict represents the 
proposed schema matching algorithms. The difference 
between them is that SYM-Dict used the full algorithm of 
the four linguistic matchers, whereas SYM sets the Lsim(s, t)
to be 0.4 instead of using WordNet searching and similarity 
computing.  
The experimental results show that the SYM leads in four 
schemas and COMA++ is generally superior to others in 
three schemas. The Rnorm values of COMA++ are better than 
Cupid for 5 schemas except S5:RFID and S6:Sensor. The 
reason is that the type of value(xs:decimal) in S7:Temp 
matched the type of value(xs:string) in S5 and S6. This 
mistake causes the higher rank of S7:Temp. It shows that 
COMA++ is relatively weak in the matching of types on 
leaves. The SYM-Dict is surprisingly the worst in the four 
methods. The main reason is that the matching of WordNet 
did not perform proper linguistic similarity matching results. 
The WordNet may give relative high similarity for two 
different terms. On the contrary, the SYM directly sets the 
values as 0.4 is a good similarity since the linguistic 
similarity is generally less than 0.5 if the three linguistic 
matchers are not used. The average Rnorm values show that 
the SYM has the best ranking. The COMA++ combines 
different matchers and gains the second place. Generally 
speaking, SYM-Dict and Cupid is not recommended to be 
used in this application. 
VI. CONCLUSION
The main contribution of this paper is to propose an 
intelligent context interpreter to get context independence. A 
context interpretation script is proposed to replace hard code-
based context interpreter. We design a generic context 
interpreter consisting of the context script generator and the 
generic script interpreter. We also design a context editing 
tool for support the context mapping operation and devices 
maintenance. By employing schema matching approaches, 
the generic context interpreter performs a more intelligent 
operating interface for users. The heterogeneity in pervasive 
context-aware computing will gain a graceful solution. 
The proposed schema matching methods also show their 
effectiveness on the matching rank. The SYM method is 
superior to SYM-Dict, Cupid and COMA++. 
The heterogeneity is a series problem while developing 
and extending context-aware applications in an environment 
of pervasive computing. This work is intended as a starting 
point of further investigating on context-aware computing. 
The problems of context management for context-aware 
computing will be paid more attention in the future.  
ACKNOWLEDGMENT
This research was supported in part by the National 
Science Council of Taiwan, R.O.C. under contract NSC 98-
2221-E-024-012. 
REFERENCES
[1] A. Algergawy, E. Schallehn, G. Saake, “A Sequence-based Ontology 
Matching Approach,” in Proceedings of 18th European Conference 
on Artificial Intelligence Workshops, pp 26-30, Patras, Greece, July, 
2008. 
1312 2010 10th International Conference on Intelligent Systems Design and Applications
國科會補助計畫衍生研發成果推廣資料表
日期:2011/09/02
國科會補助計畫
計畫名稱: 整合機器學習方法於情境感知服務平台技術之研究(II)
計畫主持人: 錢炳全
計畫編號: 99-2221-E-024-015- 學門領域: 人工智慧
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
1.於 the 2011 IEEE International Conference on Granular Computing 籌
組特別議程 (Special Session), 擴大國際影響力 
2.第一屆「智慧感知與辨識」領域專題成果表觀摩會，多媒體應用組，第一名；
Apr. 13, 2011 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
