 3
1. INTRODUCTION 
Since the arrival of the Web in early 90’s, more and more information are presented by Web pages. Nowadays a 
variety of information are often represented by diverse topics in Web pages e.g., shopping sites, news sites and 
search results. Therefore, instead of traditional search models which only search Web document containing a 
keyword, a novel retrieval model that finding information in an object view is proposed, e.g., search a product, 
group, or news. Nowadays, the objects are typically generated dynamically from an underlying structured source 
like a relational database, and use a pattern generator defined before by human to embed these objects on the 
Web page automatically, where the pattern is a set of HTML tags. The kind of page generated automatically is 
called systematic Web page, and a group of informative objects are called data objects in this paper. An example 
of such a data object in the systematic pages is shown in Figure 1. In Figure 1, there are three books in the page, a 
full of text content of each book is a data object, and the pattern embedded of each object is distributed over the 
items of each data object. 
1.1 Problem Overview 
In this paper, we focus on the issues of how to develop a wrapper, which can automatically extracting data-
objects in a given systematic Web page. Despite of current Web pages have a variety of information, we still 
observe one important discovery:  
A group of data objects are typically presented in several blocks of a Web page. They are always all adjacent, 
and are formatted using a similar HTML tags.  
We call the kind of blocks informative blocks in the paper. Take for example, in Figure 1, three books are 
presented in one block, and all adjacent. As we see the three data objects, they are formatted using almost the 
same sequence of HTML tags. This assumption also provides us a fundamental method to solve this problem. 
Based on the assumption, there are two main steps in our proposed method: 
Step 1: Mining the informative blocks which contain a set of adjacent data objects. 
Step 2: Extracting each data object in the informative blocks 
 
Figure 1: An example of a systematic Web page in Buy.com. 
1.2 Motivation 
Because the habit of a Web page designer are often placed primary information in a particular alignment and 
order, structured data-objects have become a very important type of information on the Web. They always 
represent their essential or host information in the page, such as a list of products, search results produced by 
search engines and so on, are all in regular and repetitive patterns. Several approach have bee reported in the 
literature by developing wrappers. IEPAD [2] proposes a method by using a Patricia tree to find repetitive strings. 
However, due to the character of Patricia tree, IEPAD will produce a large number redundant repetitive string, 
and must be filter out by selecting desired patterns by human. ViNTs [7] proposes a novel concept based on the 
visual content, but it is only operated in the limited type of Web page, a search engine result. Moreover, 
extracting these data object enables us to do plenty of applications, including information retrieval system, Web 
ecology analysis, network transmission analysis and small display devices applications. 
In this paper, we also implement our proposed extraction algorithm on FireFox to build an open source extraction 
system. There are several advantages to port our algorithms on FireFox, (1) Embedding the extraction system on 
the browser is a convenient way to see the block model and extracted data. (2) FireFox is a popular and open 
 5
3. SYSTEM IMPLEMENTATION 
Our proposed system uses several W3C (The World Wide Web Consortium) technology such as CSS[7], 
DOM[9], RDF (Resource Description Framework) [13], XML[10], and so on. CSS is used to bind XUL (XML 
User Interface Language)[17] element and XBL (XML Binding Language)[16]. When an event is happened, 
XBL will trigger an event function to execute. The Resource Description Framework (RDF) is a general-purpose 
language for representing information in the Web. We use it to describe metadata and data source of FireFox. 
In storage, we use SQLite[15] (an open source embeddable database) as our database. It’s less than 250 kilobytes 
and implements most of SQL92. mozStorage extension[12] making it easy to use the lightweight database engine 
from Firefox is basically an XPCOM[18] wrapper around SQLite. 
 
Figure 3: The program flow of our system. 
3.1 XUL (The XML User Interface Language) 
XUL is a markup language for creating user interfaces. It is a part of the Mozilla browser and related applications 
and is available as part of Gecko. XUL provides a powerful set of user interface widgets for creating menus, 
toolbars, tabbed panels, and hierarchical trees. We use XUL to display widget in Firefox to interact our system. 
  
 
Figure 4: An XUL example and code of our system. 
 7
 
Figure 7: A new button “DOM tree viewer” is created. 
When user watch present web page, this portion can parse page structure and produce tree view of XUL element 
by document object model. Figure 8 and Figure 9 show this situation. As clicking the label of tree element in 
sidebar of Firefox, the main view will show a border around HTML element which corresponds we choose. This 
is done by XBL(XML Binding Language). In the bottom of sidebar, that is the HTML tag information such as tag 
name, depth traversal search order, the distance of the tag on the left, the distance of the tag on the top, the height 
of the tag, the width of the tag, and the innertext of the HTML tag.  
 
Figure 8: Web Page Structure and Content Viewer 
 9
1
10
100
1000
1 6 11 16 21
Page ID
Ob
j C
ou
n
Total Objs MDR Objs IKM Objs
1
10
100
1000
10000
1 6 11 16 21
Total Number of Pages
Ob
j C
ou
n
Total Objs MDR Objs IKM Objs
 
(a)                                 (b) 
Figure 11: Total Extracted Objects by Three Mechanisms. (a) The result of each page. (b) The result of the 
number of pages. 
4.2 Overall performance 
In this section, we measure the overall performance. We use a standard precision and recall measures to evaluate 
the overall performance of our system for extracting informative blocks and data objects. We show some 
experimental results (only show ten URLs for each table) from the representative types of Web sites in Table 1~4. 
The meaning of the column name described as below. 
 IB: check the informative block in the page whether it is extracted by IKM or not. “Y” represents extracted, or “N”, 
otherwise. 
 Objs: the number of data objects in each page. 
 Found: the number of data objects found. 
 Cor: the number of correct data objects found. 
 Topics: the topic of each page. 
Table 1: Performance of Search Engine Result 
URL IB Objs Found Cor
http://www.google.com.tw Y 90 80 80
http://gais.cs.ccu.edu.tw Y 10 10 10
http://wps.openfind.com.tw Y 10 10 10
http://dir.hisearch.hinet.net Y 19 19 19
http://search.msn.com.tw Y 8 8 8
http://tw.search.yahoo.com Y 10 10 10
http://www.gov.tw/ Y 10 10 10
http://google.sina.com.tw Y 10 10 10
http://www.overture.com Y 12 12 12
http://www.dogpile.com Y 20 20 20
 
Table 2: Performance of Shopping Sites 
URL IB Objs Foundd Cor
http://www.costco.com Y 7 98 0 
http://www.bhphotovideo.com Y 15 15 15 
http://browse.barnesandnoble.com Y 10 10 10 
http://www.amazon.com Y 20 20 20 
http://www.drugstore.com Y 15 15 15 
http://www.folica.com Y 8 8 8 
http://www.radioshack.com Y 10 10 10 
http://store.apple.com Y 3 3 3 
http://www.girlshop.com Y 9 9 9 
http://www.hollisterco.com Y 2 2 2 
 
Table 3: Performance of Other Topics 
 11
[10] Extensible Markup Language (XML),http://www.w3.org/XML/ 
[11] Mozilla Firefox, http://www.mozilla.com/firefox/ 
[12] mozStorage Extension, http://hacks.atrus.org/mozStorage/. 
[13] Resource Description Framework (RDF), http://www.w3.org/RDF/ 
[14] Stuart Langridge, DHTML Utopia Modern Web Design Using JavaScript & DOM, sitepoint, 2005. 
[15] SQLite, http://www.sqlite.org/ 
[16] XML Binding Language (XBL),http://www.w3.org/TR/xbl/ 
[17] XML User Interface Language (XUL) 1.0, http://www.mozilla.org/projects/xul/xul.html,2001 
[18] XPCOM, http://www.mozilla.org/projects/xpcom/ 
 
