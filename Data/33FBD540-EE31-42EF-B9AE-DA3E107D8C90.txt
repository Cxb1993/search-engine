 1 
行政院國家科學委員會補助專題研究計畫 █成果報告   
□期中進度報告 
 
在無線感測器網路上行動資料管理系統之跨層設計研究 
 
 
計畫類別：■個別型計畫   □整合型計畫 
計畫編號：NSC 98－2221－E－002－076－MY2 
執行期間： 2009年 08月 01日至 2011年 10月 31日 
 
執行機構及系所：台灣大學資訊工程研究所 
 
計畫主持人：周承復 
 
 
 
 
成果報告類型(依經費核定清單規定繳交)：□精簡報告  ■完整報告 
 
本計畫除繳交成果報告外，另須繳交以下出國心得報告： 
□赴國外出差或研習心得報告 
□赴大陸地區出差或研習心得報告 
■出席國際學術會議心得報告 
□國際合作研究計畫國外研究報告 
 
 
處理方式：除列管計畫及下列情形者外，得立即公開查詢 
            ■涉及專利或其他智慧財產權，□一年■二年後可公開查詢 
 
中   華   民   國    100年  10月  31日 
 
III. INTRODUCTION
Wireless sensors, which combine the programmable functionality with the capability of sensing and
wireless communication, are suitable for lots of applications such as military surveillance, temperature
monitoring, and disaster warning system. In general, sensors are randomly scattered in a interested
field and cooperatively collect the sensing data in order to perform a given task. Since it is difficult
to recharge batteries of thousands of sensors in remote or hostile environments, energy is regarded
as the most critical resource for wireless sensor networks.
In this work, we consider the problem (in [1] and [2]) of data dissemination from multiple sources
to a mobile sink in a large-scale wireless sensor network. A sink, which might be a mobile PDA
carried by the user or may be a static access point, is a monitor terminal for collecting data generated
from sensors. A source refers to a sensor node that detects a target or an interested event and
generates data to describe that target/event. There are many applications for such wireless sensor
networks applications; in the battlefield, the soldiers on the march continuously monitor enemies’ (or
tanks’) movement by collecting information from sensor nodes [1]; the rescuers in a disaster area
can immediately aggregate survivors’ location [3]; a group of mobile decontaminating robots with
wireless computing devices that use the sensor network for monitoring the chemical or radioactive
contamination level of some region [4].
We note that there are two major challenges for such data dissemination problem: (a) the sink
mobility issue, and (b) the hotspot issue oriented from the traditional end-to-end routing. Sink mobility
arises new challenges to design of an energy-efficient routing in a large-scale sensor network. This is
because a sensor node, which detects an interested event and needs to figure out an energy-efficient
routing path to the sink, does not a-priori know the mobile sink’s location, which could vary over
time. Several works [2], [5]–[7] show that the hierarchical structure is able to handle the scalability
issue in managing the information of sink mobility for a large-scale sensor network. However, the
traditional static end-to-end routing associated with the hierarchical structure results in another new
problem: the hotspot issue, i.e., the workload highly concentrates on a small number of nodes (e.g.,
cluster heads). Such imbalanced energy consumption can significantly shorten the lifetime of sensor
networks. Hence, the focus of this work is to design a scalable and energy-efficient (maximizing
network lifetime) framework without the GPS device1 for data dissemination from multiple sources
to a mobile sink in wireless sensor networks. That is, we aim to address (a) the sink-mobility issue,
i.e., the location service and (b) the hotspot issue so a novel routing framework DEAL: Dynamic and
Energy-Aware Landmark routing is proposed and our contributions are as follows:
• A light-weight 2-tier hierarchical structure is used to effectively deal with the scalability issue
for managing the sink mobility with less maintenance overhead.
• We propose an effective end-to-end hierarchical routing associated with the 2-tier hierarchical
structure and it consists of the dynamic landmark routing and the energy-aware multi-paths
routing. The concept of dynamic landmark routing is used in the inter-cluster routing to mitigate
the hotspot problem at the cluster heads (CHs). That is, the inter-cluster routing path is used to
guide the data packet from source to sink in a cluster-by-cluster fashion. So, each CH is regarded
as a landmark of its cluster and the data packet could be relayed by any appropriate sensor node
instead of the CH within the same cluster. The idea of energy-aware multi-paths routing is used
to avoid the shortcomings of the static single-path routing and balance the power consumption
of sensor nodes within a cluster. In traditional packet-forwarding schemes, a node relays packets
to its designated next-hop nodes. In contrast, in DEAL, a node maintains multiple candidates
of next-hop nodes and relay packet to the proper candidate node dynamically. Therefore, the
load-aware multi-paths routing is proposed to dynamically figure out a node-by-node routing
path within a cluster based on the minimal remaining-energy of a path in order to prolong the
network lifetime as long as possible.
1This is because the GPS equipment is expensive and energy-consumption
3
Cv
Tier 1
Tier 2
1 C2
C4 C5
C3
C6
src vsink
v1
v2
Fig. 1. An illustration of two-tier Hierarchical Structure
but they all heavily rely on the sensor’s location-information estimated by GPS devices to build a
single route-discovering structure for each data source. Our previous work HCDD [2] shows that
TTDD could waste much energy or network bandwidth to build all cluster structures for those low-
utilized sensor nodes. Besides, TTDD and SEAD still suffers from the static single-path routing
problem, i.e., given a source and a sink, the traffic load on the static routing path are heavier than
its neighbor nodes. That is, TTDD and SEAD would result in imbalanced energy consumption.
In our previous work HCDD [2], the network performance of a sensor network was characterized
by a hierarchical structure, in which sensors are organized into clusters and cluster heads (CHs) take
the responsibility of forwarding data to the outside sink. In other words, only CHs should maintain
the sink location information. Thus, the location of the sink just is forwarded to CHs rather than all
nodes. The results show that the hierarchical structure is an efficient way to handle the scalability
issue in large-scale sensor networks as well as manage sink mobility, but we note that CHs in HCDD
become hotspots because they needs to maintain the information of the sink location and relays all
the data within its cluster to the sink node. This results in that CHs consume much energy and drain
away first.
V. DESIGN PRINCIPLES IN DEAL
In this section, we introduce the main ideas of the DEAL framework and explain how it works. Not
only does DEAL provide an efficient location service for a mobile sink, but also it could adaptively
figure out the routing path to maximize the network lifetime. Previous research work [22] has shown
that how to find out a maximum lifetime routing path from a source to a static destination is NP-
hard. Furthermore, most maximum lifetime routing algorithms [22]–[28] require global information
or resource-expensive (in term of network bandwidth or energy) path discovery; hence, they are not
suitable for a mobile sink because an end-to-end routing path to a mobile sink could change over time,
and such path is difficult to be efficiently maintained. To cope with this issue, DEAL dynamically
maintains a ”landmark-based” (i.e., cluster-based) routing direction to a mobile sink rather than a
node-by-node routing path.
In addition, multiple-tier hierarchical structure can provide an effective sink location service, but
it might consume lots of energy on some ”leader” nodes when the data is delivered through such
hierarchical structure. To avoid the hotspot problem in the traditional hierarchical structure, DEAL
exploits a two-tier structure to manage sink mobility to efficiently provide the location service and
routing protocol for mobile sinks. Fig. 1 depicts an example of two-tier hierarchical structure for
DEAL. In tier 1, a unit is one sensor node. A dotted ellipse groups nodes into a cluster, in which the
gray nodes are the gateway nodes (packets are forwarded to a adjacent cluster via the corresponding
gateway nodes), and the solid lines represent that the clusters are neighbor. The node-by-node routing
path within a cluster, as the bold arrow in Fig. 1, is decided by the intra-cluster routing. In contrast, a
5
CHsrc
.
.
.
.
.
.
Warmup
Phase
Dissemination
Phase
Updatetimer
expired
W-Req.
W-Reply
Data
time
Source GWsink CHsink Sink
Data
L-Req.
L-Reply
Locating
Phase
Fig. 2. Three phases of data dissemination stage
b c
f
g h
d e
a
20 25
10 15
5
15
10
i j l7 15 5
k 8
Fig. 3. Greedy next-hop selection and MS-path
on (a) the sink location service, and (b) routing path maintenance instead of the cluster formation,
we just group the sensors by an efficient cluster formation algorithm, Max-Min D-Cluster Formation
Algorithm [29], which is able to guarantee each node is at most d wireless hops away from its CH. d
is a parameter of the algorithm. Besides, each cluster just needs to assign all its neighboring clusters
with a locally-unique local cluster ID, which can reduce the size of field (in the routing table and
the packet header) to represent the neighboring cluster. All of these procedures can be done locally
and are suitable for a wireless sensor network.
The cluster formation is done once after network deployment, i.e., a preprocessing procedure. After
that, the sink registers itself under such cluster-based hierarchical architecture as follows. The mobile
sink selects a static sensor node as its sink agent. Once the sink agent is changed, the new sink agent
registers itself by forwarding the IntraReg packets along the path to the corresponding CH. If
the sink moves to a new cluster, the CH of this new cluster receives IntraReg packets and then
generates InterReg packets to propagate registration to its adjacent cluster CHs; otherwise, the
registration procedure is completed within a cluster. When receiving a InterReg packet from
a neighboring cluster, the CH needs to append the local cluster ID of the neighboring cluster to the
inter-cluster routing path of a InterReg packet and then re-generates the InterReg packets
to propagate registration. That is, an InterReg packet includes the list of local cluster IDs to
represent the inter-cluster routing path to the sink cluster. Hence, each CH can individually maintain
the inter-cluster routing path, which roughly guides packets to the sink in a cluster level. Moreover,
if the sink moves out of a cluster, the new sink cluster has to propagate InterReg packets to
update the inter-cluster routing path maintained at each CH.
Recall that, in a cluster level, the inter-cluster routing path determines those clusters, through
which packets should be routed, but does not give an exact node-by-node path. Such clusters can be
viewed as landmarks. That is, based on the inter-cluster routing path, data packets can reach sink
cluster by approaching the landmarks in order, but not always go through the same nodes (e.g., CHs).
Therefore, CHs of clusters would not consume more energy to relay data and reduce the probability
of CHs to become hotspot nodes.
B. Warmup Phase
According to the registration phase, the CH of each cluster stores the inter-cluster routing path to
the sink. Whenever a source node would like to deliver data packets to the sink, it has to acquire the
inter-cluster path from its CH. This request procedure is done by exchanging W-Req./W-Reply
packets. After obtaining the cluster-by-cluster path to the sink cluster, the source node is aware
of next-cluster and then includes the information of the cluster-by-cluster path into the data packets.
Hence, any node receiving data packets knows the next-cluster by parsing the inter-cluster routing
7
To find out the MS-path without local flooding within a cluster, a node must calculate and maintain
the balance-factor of itself. The balance-factor of node u to next-cluster C is defined as equation (2),
where Eng(x) is the residual energy of node x, and P(u, C) represents all paths from node u to
cluster C. Eq. (1) defines the lowest residual energy of a path p.
LRE(p) = min
∀x∈p
(Eng(x)) (1)
BF (u, C) = max
∀p∈P(u,C)
(LRE(p)) (2)
For instance, in Fig. 3, the balance-factor of node b and c are BF (b) = 10 and BF (c) = 5.
To avoid unnecessary overhead for balance-factor calculation and propagation, the information
about residual energy at a node only is exchanged by Beacons (adopted in IEEE 802.15.4 standard
[31]) and ACKs as the indication of successful transmission. In IEEE 802.15.4 standard, each
sensor node could be coordinator or network device. The coordinator needs to periodically broadcast
beacon frame for slotted CSMA/CA, so the beacon and ACK frames can be used to exchange
information; otherwise, the network device does not broadcast beacon, so only ACK is used to
propagate information. Without loss of generality, using both beacon and ACK frame to carry
information can update balance-factor more immediately, but periodically broadcasting beacon would
dry energy fast. Thus, we apply ACK to carry information for balance-factor calculation.
Initially, the balance-factor of each node is set as its residual energy, and each node know all
neighbors’ initial balance-factor after the cluster formation. When node u successfully transmits one
packet to the next-hop node v and receives an ACK, which contains the balance-factor from the
next-hop node. Node u can update its balance-factor based on Eq. 3, where N (u, C) is a set of
next-hop candidates of node u for neighboring cluster C. After the exchange, the calculation of
balance-factor can increase one hop. That is, the balance-factor is propagated gradually. Whenever
a node prepares to send a data packet, it looks for the intra-cluster routing table to select the parent
node with maximum balance-factor as the next-node. Besides, we observe that there might be routing
loops among the calculation process. This is because a node could have stale balance factor of next-
node candidates and the parent node in a tree perhaps is the child node in another tree. The hop
count constraint is applied to MS-path discovery to cope with the loop problem.
BF (u, C) = min
(
max
∀x∈N (u,C)
(BF (x, C)) , Eng(u)
)
(3)
a
e d
c b
f
10
10( )
15
15( )
10
10( )
5
(5)
15
15( )
20
20( )
T=1
g
10
10( )
15
15( )
10
10( )
5
(5)
15
15( )
20
( )5
T=2
10
10( )
15
15( )
10
10( )
5
(5)
15
15( )
20
5( )
T=3
10
10( )
15
15( )
10
10( )
5
(5)
15
( )10
20
5( )
T=4
10
15
10
10( )
15
15( )
10
10( )
5
(5)
15
10( )
20
5( )
T=5
15
5
20 5
5
15 10
10
10
a
e d
c b
fg
a
e d
c b
fg
a
e d
c b
fg
a
e d
c b
fg
Fig. 4. Max-min suffering path finding and routing
Fig. 4 depicts an instance of MS-path discovering, where the number and the number in parenthesis
are residual energy and balance-factor of nodes, respectively. Node a intends to send data packets to
the next-cluster, whose corresponding gateway nodes are node f as well as g. Assume that each node
know all neighbors’ initial balance-factor. When time T = 1, since node b has higher balance-factor
(initial value is the remaining energy of itself), node a will select node b as the next-hop node.
Upon node b receiving data packet (T = 2), it relays data packet to node d and then receives ACK
9
with outdated sink positions of gateway nodes as follows. Suppose there are β nodes in a cluster, and
data packet arrival process is poisson with rate λ. Let p be the probability that a sink agent is changed
per time unit, and p is an i.i.d. variable over time units. Assume that one data packet transmission or
reception costs 1 energy unit of a sensor node, and it spends 0.5 energy unit to send or receive one
control packet, respectively. Our evaluation model focuses on realizing the additional overhead on
the CH of Locating Update and on the relay agent of Trajectory Forwarding. The additional overhead
on the relay agent is the energy consumption when it is not a sink agent no longer; the additional
overhead on the CH of Locating Update is to receive IntraReg packets and send packets to
announce the fresh sink location.
Let t be the time period from when the first change of a sink agent occurs until the time when
the sink is moves out of a cluster, and HTF (i), as shown by Eq. (4), is the additional overhead of a
relay agent in i time units. The additional overhead on the relay agent of Trajectory Forwarding is
to receive a control packet when the sink agent is changed, i.e., 0.5ip of Eq. (4), and to relay data
packets to the new sink agent, i.e., the second term of Eq. (4). The expected value of the additional
overhead of Trajectory Forwarding is obtained by Eq. (5). Note that, in the long term, since the relay
agent of Trajectory Forwarding are expected to be uniformly selected, we suppose each sensor node
in a cluster is picked as a relay agent with probability 1/β.
HTF (i) = 0.5ip+ 2
∞∑
m=0
(λi)m
m!
e−λim = (0.5p+ 2λ)i (4)
E[HTF ] = 1
β
∞∑
i=1
P [t = i] · HTF (i) = 0.5p+ 2λ
β
∞∑
i=1
i · P [t = i] (5)
The additional overhead on the CH of Locating Forwarding is to receive IntraReg packets
and broadcast the sink position when a sink agent is changed, i.e., HLU(i) of Eq. (6). Note that,
due to the broadcast nature of wireless communication, the CH needs to broadcast the sink position
once. Eq. (6) shows the expected value of the additional overhead of Locating Update.
HLU(i) = (0.5 + 0.5)ip
E[HLU ] =
∞∑
i=1
P [t = i] · HLU(i) = p
∞∑
i=1
i · P [t = i] (6)
From Eq. (5) and (6), we define HTF/LU , Eq. (7), as an indicator of whether Trajectory Forwarding
or Locating Update should be applied. The indicator HTF/LU can be calculated by the sink agent
based on the recent data arrival rate λ̂ and the recent change probability p̂ for a sink agent. If
HTF/LU < 1, the new sink agent notifies the previous sink agent to to be a relay agent; otherwise,
a IntraReg packets is forwarded form the new sink agent to the CH of a sink cluster.
HTF/LU = E[HTF ]
E[HLU ] =
0.5p̂+ 2λ̂
βp̂
(7)
Besides, after a data packet is sent from a gateway node or a relay agent, the sink agent might
be changed. That is, the update packets published by Trajectory Forwarding and Locating Update
can not update the destination information on those data packets. Therefore, whenever the sink agent
is changed, the new sink agent has to send its ID to the old sink agent via proactive routing. That
is, while a outdated sink agent receives data packets, it can forward data packets to the up-to-date
sink agent. On the other hand, it is possible that the gateway nodes have on-going routing session
but the sink moves out of the original cluster. Hence, when the CH of the original cluster receives
the InterReg packets from other CHs, it needs to broadcast the up-to-date inter-cluster routing
path twice (due to unreliability of broadcasting), and the gateway nodes having on-going routing
session can receive update message via a multicast tree. That is, these gateway nodes is able to route
data packets to the up-to-date sink cluster.
11
Lemma 7.1: Given the displacement υ of a mobile node per time unit, and two clusters of size α
and β (i.e., the number of sensor nodes in a cluster), we define p˜(υ, α) and p˜(υ, β) as the probabilities
for a mobile node moves out of these two clusters per time unit respectively. The relationship between
these two probabilities is p˜(υ, β) =
√
α/β · p˜(υ, α).
Proof: We prove Lemma 7.1 in detail in Appendix A.
Without loss of generality, we consider the hop count of a path to represent its routing delay.
However, the relationship between Euclidean distance and communication hop count have been widely
discussed in [33]–[35]. The expected distance covered per communication hop, Dhop, is the physical
distance between a pair of sensors divided by the expected shortest-path hop counts. Kleinrock and
Silvester [33] showed that Dhop depends only on radio range r and the expected neighborhood .
Dhop = r(1 + e− −
∫ 1
−1
e−

pi
(arccos t−t·√1−t2)dt) (8)
Given the Euclidean distance between two nodes, d, Eq. (9) expresses the expected hop count.
ta(d) =
{
d
Dhop if d > r
1 if d ≤ r (9)
Therefore, we can exploit the Euclidean distance of a path and ta(d) to analyze its end-to-end delay.
In the following subsections, we describe the analytical model for routing delay, registration delay,
registration hotspot, and routing hotspot, respectively.
B. Routing Delay Analysis
The routing delay is important for mobility management, because the larger end-to-end delay can
result in higher probability of routing packets to the out-of-date position of a sink or making packets
miss their deadline. First, we compute the routing delay of DEAL, and then we do similar analysis
for MLS.
1) DEAL Routing Delay:: Suppose the routing path of DEAL goes through m clusters, including
the source and sink cluster. See Fig. 6 as an example, where m = 11. X and Y represent the number
of clusters along the x-axis and y-axis. Hence, m = X + Y − 1. Moreover, there are C = √N/β
clusters in the horizontal and vertical directions of a network, so there are C4 combinations to select
a source cluster and a sink cluster. The expected value m can be derived by Eq. (10), where (x1, y1)
and (x2, y2) are the coordinate of a source and sink cluster.
E[m] =
1
C4
C∑
x1=1
C∑
x2=1
C∑
y1=1
C∑
y1=1
(|x1 − x2|+ 1︸ ︷︷ ︸
X
+ |y1 − y2|+ 1︸ ︷︷ ︸
Y
− 1) = 2
3
(√
N√
β
−
√
β√
N
)
+1 (10)
Note that the intra-cluster routing of DEAL is a shortest-path based routing, but the farthest gateway
node might be selected to relay packets because consideration of residual energy. We suppose that
a packet would be forwarded to all adjacent clusters with the same probability except the previous
cluster. See Fig. 7 as an example, if a packet is received at s0, the worst cases of intra-cluster paths
to cluster C1, C2, and C3 are s0s1, s0s2, and s0s2 respectively. Thus the expected Euclidean distance
of routing within a cluster is bounded by Dintra, Eq. (11). The first term is the expected hop count
to C1, i.e., s0s1, and the second term is the expected hop count to C2 and C3, i.e., s0s2. Since a
packet would be forwarded to all adjacent clusters with the same probability, the intra-cluster path is
to C1 with probability 1/3 and the intra-cluster path is to C2 or C3 with probability 2/3. Moreover,
Wβ =
√
β/η is the physical width of a cluster. Because the expected neighborhood  and radio range
r is given, network density η = /(pir2).
Dintra = 1
3
·
∫ Wβ
2
0
√
x2 +Wβ2dx
Wβ/2 +
2
3
·
∫Wβ
Wβ
2
√
y2 +Wβ2dy
Wβ/2 = 2.098r
√
β

(11)
13
Appendix B.
Wα =
√
α
η
=
√
αpir2

=
1.772r
√
α√

tu(k, j) ≥
k−1∑
i=1
8 · ta(2i−1Wα)︸ ︷︷ ︸
A
+ ta(
2i
√
2Wα
4
)︸ ︷︷ ︸
B
 + tw(α)
2
+ j · ta(2k−1Wα)︸ ︷︷ ︸
C
=

√
αr√
Dhop
(
7.717 · 2k + 0.886j · 2k − 14.755)+ 
α
(
1− 2r
3Dhop
)
if k > 1

α
+ rDhop
(
0.678
√
α

+ 1.772j
√
α

− 2
3α
)
if k = 1
(14)
After the look-up process finds the level-k cluster which contains the sink, the packets are forwarded
in a down-level direction to the sink. The expected route hop count of a down-level direction, td(k), is
derived in Appendix C. Therefore, the route distance of the MLS lookup procedure is tu(k, j)+td(k),
if a lookup request is propagated to the k-th level and the sink can be found by visiting the j-th
adjacent cluster.
Next, we want to figure out how many routing pairs whose route distance is tu(k, j) + td(k).
Because MLS can visit eight adjacent level-k clusters, we use n(k, j) to indicate the number of
routing pairs whose source is in a specific level-k cluster and the sink is found by visiting the j-th
of the adjacent level-k clusters. Besides, not all level-k clusters have all eight adjacent clusters, e.g.,
those clusters on the border and corner of a network do not. We define σb(k) and σc(k) as the number
of border and corner clusters on the k-th level. Moreover, σf (k) is the number of level-k clusters
that have eight adjacent clusters. We present the calculation of n(k, j), σb(k), σc(k), and σf (k) in
Appendix D
Therefore, based on the definition of tu(k, j), td(k), n(k, j), and σ, the total route distance on the
k-th level can be derived by Eq. (15). Note that, a border cluster and a corner cluster have 5 and 3
adjacent clusters respectively.
Rf (k) = σf (k)
8∑
j=1
n(k, j) · (tu(k, j) + td(k))
Rb(k) = σb(k)
5∑
j=1
n(k, j) · (tu(k, j) + td(k))
Rc(k) = σc(k)
3∑
j=1
n(k, j) · (tu(k, j) + td(k)) (15)
The expected route distance of MLS is shown by Eq. (16).
T routeMLS ≥
1
N2
log4
N
α∑
k=1
(Rf (k) +Rb(k) +Rc(k)) (16)
T routeMLS is computable in closed form, but the expansion result is fairly complex. Due to the limitation
of space, the expanded expression is omitted. As N becomes large, the expected routing delay of
MLS is dominated by 8.016r
√
N√
Dhop . Compared with the expected routing delay of DEAL, i.e., Eq. (13),
both of them have the same order, and DEAL can reduce around 80% routing delay of MLS when
N is large.
15
Eq. (20) shows the registration delay when the sink moves out of a cluster. Since Wβ is the physical
width of a cluster, the length of a routing path between the CHs of two adjacent clusters is ta(Wβ).
Whenever the sink enters a cluster, it needs to send a update message to the CH. The expected value
of this route distance is equal to the average distance from any point on the border of a cluster to the
CH, and the such distance is equal to half of the path length in locating phase, i.e., tl(β)/2 derived
by Eq. (40) in Appendix B. On the other hand, while the sink moves within the same cluster, i.e.,
B of Eq. (20), the update distance is from any position in a cluster to the CH, i.e., tw(β)/2 derived
by Eq. (39) in Appendix B.
T regDEAL =
1√
β
(
(E[m̂]− 1) ta(Wβ) + tl(β)
2
)
︸ ︷︷ ︸
A
+ (1− 1√
β
)
tw(β)
2︸ ︷︷ ︸
B
=
r√
 · Dhop
(
2.659
√
N√
β
+ 0.678
√
β − 1.456
)
+
r
Dhop
(
2
3β
3
2
+
2
3β
)
+

β
− 
β
3
2
(20)
The registration delay of DEAL would be dominated by 2.659r
√
N√
βDhop when N is large. To achieve good
scalability with increasing network size N , the cluster size β should determined by network size N
e.g., β is
√
N . From Eq. (18) and (20), the expected value of the maximum registration delay of both
MLS and DEAL are bounded by O(log4 Nα ) and O(N
1
4 ), respectively. Compared with a traditional
hierarchical structure, DEAL could achieve lower routing delay but have slightly higher registration
delay. That is, two-tier hierarchical structure of DEAL is still able to maintain good scalability in
managing sink mobility with O(N 14 ) registration delay.
D. Hotspot Energy Consumption of Routing
Thus far, we have studied the registration and routing delays for DEAL and MLS. We next turn
our attention to hotspot energy consumption. To calculate the hotspot energy consumption of routing
for different schemes, additional notations are included as follows. Total simulation time is Tsim,
event arrival rate is λ, and each event generates G data packets in T∆ time units. Thus, the hotspot
energy consumption is calculated after transmitting λGTsim data packets.
1) Routing Hotspot of DEAL: There are three potential hotspot energy consumptions during the
routing process of DEAL:
• Warmup phase: the CH of a source cluster replies messages to the source node to notify the
inter-cluster path.
• Dissemination phase: a sensor node needs to relay data packets if it is on the routing path.
• Locating phase: the CH of a sink cluster needs to let the gateway node, which receive packets
and help on relaying, know where the sink is.
Hence, we compute these three hotspot cost individually.
Warmup phase: Given the time period Tsim, there are λβTsimN events whose sources are within a
specific cluster. The warmup phase is performed at the beginning of a routing procedure and whenever
the sink cluster is changed. Let P is the probability for the sink to departure from the communication
range of a sensor node per time unit. Based on the Lemma 7.1, the probability for the sink moving
out of a cluster of size β is P/√β. Since an event can generates data packets continuously in T∆
time units, the warmup phase is performed T∆P√
β
+ 1 times. Thus, the hotspot energy consumption
during the warmup phase is obtained by Eq. (21). Note that δ is the size of the control packet and
it is half of the size of a data packet.
Hw(β) = δ
(
T∆ · P√
β
+ 1
)
λβTsim
N
(21)
17
From Eq. (22), (23), and (26), the expected hotspot routing load in Ch is derived by Eq. (27).
Hd(β) ≤ Hb +He +Hn ∼= rGλTsim√
Dhop
(
3.461√
N
− 0.513
√
β
N
+
2.098β2
N2
− 4.196β
3
2
N2
)
(27)
With Hw(β), Hl(β), and Hd(β), the expected value of hotspot routing load of DEAL can be
expressed by Eq. (28).
HrouteDEAL(β) = Hw(β) +Hl(β) +Hd(β) (28)
q
L( )q
N
q
b
Z(q)
Ch
s
d
1
1
s2
d2
Fig. 9. An illustration of analyzing the hotspot energy consumption
of a dissemination phase.
1 2 3 4
1
2
3
4
C2,1
Cm
l-1
Cx
l-1
Cy
l-1
N
l-2
Fig. 10. An illustration of analyzing the hotspot energy
consumption of MLS routing.
2) Routing Hotspot of MLS: In general, if there are l levels in MLS and level l is the top level, the
CH of a level-(l− 1) cluster would be the hotspot node of routing. To analyze the expected routing
load of this CH, we categorize them into the following cases, where C l−1m is a level-(l − 1) cluster
whose CH’s routing load is our target; (C l−2s )8 is the set of 8 adjacent level-(l−2) clusters of cluster
C l−2s ; and C l−1∗ is the set of all level-(l− 1) clusters in a network.
• Case 1: both the source and sink are within C l−1m .
• Case 2: the source is in C l−1m , but the sink is not in C l−1m .
• Case 3: both the source and sink are in C l−1x ∈ (C l−1∗ \C l−1m ).
• Case 4: the source is in C l−1x ∈ (C l−1\C l−1m ), but the sink is not in C l−1x .
In cases 1 and 3, the CH of C l−1m does not participate the routing. The case 1: both the source s
and sink t are in C l−1m , the sink can be found by visiting (C l−2s )8, where C l−2s is the level-(l − 2)
cluster that contains source node s. That is, we know that C l−2s ∪ (C l−2s )8 ⊇ C l−1m , so data packets
are not propagated to level-(l−1). Similar to the case 1, the sink of case 3 can be discovered before
we visit the CH of C l−1m .
Case 2: the source is in C l−1m , but the sink is not in C l−1m . There are (N− N4 ) · N4 routing pairs in
this case, but some of them can find a sink before they visit C l−1m . Please see Fig. 10 as an example,
if the source is in C l−22,3 and the sink is in C l−21,2 (C l−22,2 , C l−23,2 , C l−23,3 , or C l−23,4 ), the lookup request does
not propagate to the (l− 1)-th level. There exists 9 · (N/16)2 routing pairs in case 2, whose sink can
be found before the (l − 1)-th level. Therefore, the number of routing pairs, which will contribute
the routing load to the C l−1m ’s CH, is derived by Eq. (29).
H2(N) =
GλTsim
N2
(
(N − N
4
) · N
4
− 9 · (N
16
)2
)
= 0.152GλTsim (29)
Case 4: the source is in C l−1x ∈ (C l−1\C l−1m ), but the sink is not in C l−1x . The analysis of case
4 is similar to that of of case 2. H4(N) indicates the number of routing pairs in case 4, and the
analysis detail is explained in Appendix G.
From the case studies, we can obtain the hotspot routing load of MLS as shown by Eq. (30)
HrouteMLS = H2(N) +H4(N) = 0.456GλTsim (30)
19
F. Hotspot Load Discussion
It is worth noting that both the routing and registration hotspot load have impact on the system
lifetime. Hence, we define total hotspot load as the summation of the routing and registration hotspot
load and use it to describe how energy consumption is distributed among all sensor nodes after Tsim
time units.
HMLS = H
reg
MLS +H
route
MLS (34)
HDEAL(β) = H
reg
DEAL(β) +H
route
DEAL(β) (35)
From Eq. (21), (45), and (27), we observe that the hotspot routing load of DEAL becomes large
with increasing cluster size β. This is because, a larger cluster size can result in that the CH needs
to reply more control packets in locating and warmup phases. However, according to Eq. (32), the
hotspot registration load of DEAL is reduced with increasing β. This is because, a larger cluster
size can reduce the probability to do inter-cluster registrations. Due to the tradeoff between the
registration and routing hotspot load, there exists an optimal value of β to minimize the total hotspot
load. Therefore, if the system information, such as, P , G, and λ are given, the analytical model of
DEAL can be exploited to determine the optimal cluster size by finding β∗ such that HDEAL(β∗) is
minimal; otherwise, we can set β =
√
N to obtain better scalability for end-to-end delay.
To understand the theoretical bound of the ratio between the total hotspot load performed by DEAL
and MLS, we would like to derive the upper bound of HDEAL. Assume β =
√
N and a sink agent
is changed at most once per time unit. Moreover, the channel utilization ρ of a sink is the fraction
of time per time unit needed to transmit the data to a sink. Since the channel capacity is 250 kbps
and packet size of 36 bytes for MicaZ nodes, ρ = 36Gλ
250×1024/8 while the unit of time is one second.
Moreover, to simplify the formulation, we consider a large scale network, i.e., N ≥ 100 and multiple
data packets generated by an event, i.e., G ≥ 10. While, the values of some notations are given, such
as,  = 12 and Dhop = 0.748r, HDEAL is bounded by Eq. (36)
HDEAL(
√
N) ≤ Tsim
(
1.308P
N
1
4
+
600ρ
N
1
4
)
(36)
By Eq. (30) and (33), we can obtain Eq. (37) which is an upper bound on the ratio of the total
hospot load performed by DEAL and MLS.
HDEAL(
√
N)
HMLS
≤ N
1
4 (600ρ+ 1.308P)
405.33ρ
√
N + P (37)
From Eq. (37), we observe that the DEAL can achieve significant balanced hotspot load in most
cases, especially in a large network or scenarios with high channel utilization ρ. In contrast, MLS
can perform better performance only when the channel utilization of the sink is fairly low and the
velocity of the sink is high. This is because the CH in MLS plays a important role of routing, i.e., the
hierarchical structure in MLS does significantly increase the routing load of a CH. On the other hand,
the inter-cluster dynamic landmark routing of DEAL can effectively avoid increasing the routing load
of a CH. Moreover, two-tier hierarchical in DEAL can reduce the unnecessary routing overhead that
is caused by level-by-level lookup. Even though we consider the scenario favorable for MLS, such
as, N = 100 and P = 1, MLS can achieve more balanced hotspot load only when channel utilization
is fairly low , i.e., ρ < 0.00145. In such scenario, a large portion of energy consumption is spent to
manage sink mobility but not to deliver data.
21
02
4
6
8
10
0
200
400
600
800
1000
1200
1400
1 2 3 4 5
1
0
0
0
0
/H
D
E
A
L
R
e
c
e
iv
e
d
 D
a
ta
 (
K
B
)
Cluster Radius d
Simulation
Model
(a) Vsink = 15
0
2
4
6
8
10
0
200
400
600
800
1000
1200
1400
1 2 3 4 5
1
0
0
0
0
/H
D
E
A
L
R
e
c
e
iv
e
d
 D
a
ta
 (
K
B
)
Cluster Radius d
Simulation
Model
(b) Vsink = 35
0
3
6
9
0
200
400
600
800
1000
1200
1400
1 2 3 4 5
1
0
0
0
0
/H
D
E
A
L
R
e
c
e
iv
e
d
 D
a
ta
 (
K
B
)
Cluster Radius d
Simulation
Model
(c) Vsink = 50
Fig. 13. Lifetime comparison of DEAL simulation and analysis results under various cluster radius and maximum sink velocities
Vsink .
The cost model analyzes the average end-to-end hop counts of (i) a routing path, e.g., T routeDEAL in Eq.
(13) and T routeMLS in Eq. (16); and (ii) the maximum registration path, e.g., T regDEAL in Eq. (20) and T regMLS
in Eq. (18). They are used to represent the delay times of data routing and registrations, respectively.
In addition, we consider total path length as the summation of the routing and registration hop count
and use them to describe how long on average the sink waits to receive packets after moving to
the new position. Fig. 11 depicts the comparison of total path length between simulation results and
numerical results of our proposed cost model. We can see that our analytic results for DEAL and
MLS are very close to the simulation results. Moreover, there is little deviation between the analytic
result and the simulation result for MLS cases with certain network size. This is because the total
level of MLS in simulation is discrete but is continuous in analytical model, e.g., the total level of
MLS in simulation under N = 529 and 784 both are 4, but they in analytical model are 3.73 and
4.01, respectively.
Next, the cost model analyzes the total hotspot energy consumption, i.e., the summation of routing
and registration hotspot, of MLS and DEAL, e.g., Eq. (34) and Eq. (35). The comparison of total
hotspot load is shown in Fig. 12. Both of the numerical results and simulation results are close and
indicate a similar trend. Since the cost model focuses on deriving the theoretical upper bound of
DEAL’s performance, the result of model is slightly higher than the simulation result. Besides, the
analytical model for MLS is the theoretical lower bound because we do not consider the load of a
sensor node to be a relay node between CHs.
23
1500
1200
DEAL TTDD  =!
HCDD TTDD  =3
MLS
900
a
ta
 (
K
B
)
600
ei
v
ed
 D
a
300R
ec
e
0
5 10 15 20 25 30 35 40 45 50
Maximum Sink Velocity (km/h)
Fig. 16. Lifetime comparison under Random Way Point model.
1500
1200
DEAL TTDD  =!
HCDD TTDD  =3
MLS
900
ta
 (
K
B
)
600
iv
ed
 D
a
t
300R
ec
ei
0
10 15 20 25 30 35 40 45 50
Maximum Sink Velocity (km/h)
Fig. 17. Lifetime comparison under Manhattan Mobility
model.
Different from DEAL, HCDD, and MLS, a source node in TTDD can not obtain sink position; so,
data dissemination is passively triggered by the reception of sink queries. However, the sink queries
are published when the sink moves out of a certain distance (e.g., a cluster size) from its primary
agent. To avoid excessively high data latency, the sink can re-publish query packets when it does
not send query for τ seconds. Fig. 15 compares the data latency performed by DEAL and TTDD,
where the y-axis is in base 20 log scale. The data latency of the original TTDD design (i.e., TTDD
τ = ∞) is significantly high and degrades with increasing sink velocity, because the frequency of
publishing query depends on the distance between the sink and the primary agent. In summary, the
data latency performed by TTDD is much higher than that of DEAL.
D. Effect of Moving Behavior
Fig. 16 and 17 illustrate that the results of received data during network lifetime under the effect of
different moving speeds of Random Way Point and Manhattan Mobility Model. It is intuitive that the
sink moves faster and hence incurs more sink registration overhead. On the contrary, the workload can
be more uniformly shared with different number of clusters. Therefore, the performance of DEAL
in Fig. 16 is slightly increased from sink velocity 5 to 15 km/h, and slightly degrades while the
sink velocity is higher than 15 km/h. The curve performed by DEAL in Fig. 17 has little variation
under various sink speed. This is because the sink agent change rate in Manhattan Mobility Model
is lower than that in Random Way Point model. Besides, since a sink does not need to update its
location in TTDD, the performance of TTDD seems steady in Fig. 16 and 17. That is, TTDD has no
registration overhead. Moreover, we can see the average network lifetime in HCDD, MLS, or DEAL
seems insensitive to different moving speeds of a sink node. This can be explained as follows. Since
all HCDD, DEAL, and MLS adopt the idea of hierarchial structure, they are able to efficiently deal
with the location update issue so that the cost of location update does not consume much resources
in a sensor network.
In general, since DEAL is able to dynamically figure out a maximal-residual-energy path within
a cluster and a minimal-cluster-count (minimal number of intermediate clusters) inter-cluster path,
DEAL performs better than HCDD, MLS, and TTDD no matter what the moving speed is. For
example, in Fig. 16, compared with TTDD τ =∞ and τ = 3, DEAL is able to prolong 36%− 57%
and 175%− 226% network lifetime respectively.
E. Effect of Network Density
In figure 18, we do the network lifetime comparison of HCDD, MLS, TTDD, and DEAL under
different settings of network density which is the average number of neighboring nodes. In general,
25
87
ͪ1
0
3
)
DEAL
HCDD
5
6
m
p
ti
o
n
 (
ͪ
MLS
TTDD  =3
TTDD
3
4
C
o
n
su
m   =!
1
2
E
n
er
g
y
C
0
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1
E
Rank of Energy Consumption
Fig. 20. Workload of sensor nodes.
out that when the event rate increases, TTDD τ = 3 performs better. This is because the periodical
sink query local-flooding is inefficient, and the high event rate can degrades its impact.
G. Energy Usage Study
Since there are several definitions about the lifetime of a sensor network, the motivation is to get
more understanding energy usages of HCDD, TTDD, MLS, and DEAL and see if they are scalable
and energy-efficient solutions. To further investigate the energy usage distribution of sensors, we
run this experiment for three topologies with 15 hours and record the energy consumption of each
sensor node. We sort all nodes according to their energy consumption. Fig. 20 gives the distribution
of energy consumption in HCDD, MLS, TTDD and DEAL. A point (x, y) on the curve means that
the sensor which consumes x-th lowest energy would use y energy unit.
As illustrated in Fig. 20, we observe that the distribution of energy consumption among the sensors
is more balanced in DEAL than in other methods. We can see that the total energy consumption in
DEAL may be slightly higher than that of HCDD. This can be explained as follows. Since DEAL
is able to move around the data locally to avoid the hotspot problem, DEAL might select the longer
routing path, which remains more energy. HCDD always routes packet through the shortest paths
to CHs and this result in that HCDD spends the lowest total energy than DEAL do. On the other
hand, the local-flooding of TTDD incurs a large amount of energy consumption, especially for TTDD
τ = 3. We note that, compared with HCDD which consumes the least total energy, DEAL can reduce
the energy consumption on top 8% nodes having heaviest load, and shift the workload on those 8%
nodes to other nodes to prolong the network lifetime as much as possible.
IX. CONCLUSION
In this paper, we propose the DEAL approach to deal with data dissemination from a number
of source nodes to mobile sinks. The DEAL exploits a light-weight 2-tier hierarchical hierarchical
structure to reduce the registration overhead. Inter-cluster dynamic landmark routing can avoid the
cluster leader to become a hotspot. To prolong the network lifetime, we also design the intra-cluster
load-aware multi-paths routing for load balance. We derive the analysis model to argue that a two-
tier hierarchical architecture does the better performance. Finally, our simulation results show that
the DEAL outperforms the HCDD, MLS, and TTDD in term of network lifetime. In addition, our
approach works efficiently without any location estimation devices, like GPS.
27
[28] Y. Cui, Y. Xue, and K. Nahrstedt, “A Utility-based Distributed Maximum Lifetime Routing Algorithm for Wireless Networks,”
Vehicular Technology, IEEE Transactions on, vol. 55, no. 3, pp. 797 –805, may 2006.
[29] A. D. Amis, R. Prakash, T. H. P. Vuong, and D. T. Huynh, “Max-min D-Cluster Formation in Wireless Ad Hoc Networks,” in
Nineteenth Annual Joint Conference of the IEEE Computer and Communications Societies (INFOCOM’00), 2000, pp. 32–41.
[30] G. Venkataraman, S. Emmanuel, and S. Thambipillai, “Size-restricted Cluster Formation and Cluster Maintenance Technique for
Mobile Ad Hoc Networks,” Int. J. Netw. Manag., vol. 17, no. 2, pp. 171–194, 2007.
[31] “Part 15.4: Wireless Medium Access Control (MAC) and Physical Layer (PHY) Specifications for Low-Rate Wireless Personal
Area Networks (WPANs),” IEEE Std 802.15.4, 2006.
[32] F. Bai, N. Sadagopan, and A. Helmy, “IMPORTANT: A Framework to Systematically Analyze the Impact of Mobility on
Performance of Routing Protocols for Adhoc Networks,” in Twenty-Second Annual Joint Conference of the IEEE Computer and
Communications (INFOCOM’03). IEEE, March-3 April 2003, pp. 825–835.
[33] L. Kleinrock and J. Silvester, “Optimum Transmission Radii for Packet Radio Networks or Why Six is a Magic Number,” in
Proceedings of National Telecommunications Conference (NTC ’78), vol. 1, 1978.
[34] R. Nagpal, H. Shrobe, and J. Bachrach, “Organizing a Global Coordinate System from Local Information on an Ad Hoc
Sensor Network,” in Proceedings of the 2nd international conference on Information processing in sensor networks (IPSN’03).
Springer-Verlag, 2003, pp. 333–348.
[35] S. De, “On Hop Count and Euclidean Distance in Greedy Forwarding in Wireless Ad Hoc Networks,” Communications Letters,
IEEE, vol. 9, no. 11, pp. 1000 – 1002, nov. 2005.
[36] P. Levis, N. Lee, M. Welsh, and D. Culler, “TOSSIM: Accurate and Scalable Simulation of Entire TinyOS Applications,” in
Proceedings of the 1st international conference on Embedded networked sensor systems (SenSys’03). ACM, 2003, pp. 126–137.
APPENDIX A
THE PROOF OF LEMMA 7.1
Suppose that a time unit is short enough so that a mobile node will not change its moving direction
in a time unit. That is, at the beginning of a time unit, a mobile node may be at the intersection of
streets or in the middle between two intersections, and I is the probability that a mobile node is at
the intersection. Since the displacement of a mobile node per time unit is υ and the network density
is η, a cluster of size α5 can be divided into nine areas, as shown in Fig. 21. Hence, the width of the
concentric square area (e.g. the gray area of Fig. 21) is
√
α/η − 2υ and the size of middle areas
(i.e., top, left, bottom, or right areas) is υ × (√α/η − 2υ). The size of corner areas (i.e., top-left,
bottom-left, bottom-right, or top-right areas) is υ × υ. Note that a sink could move out of a cluster
after one time unit only if it is not in a cluster’s concentric area. We respectively discuss two cases:
(a) a mobile node is at the intersection of streets and (b) a mobile node is in the middle between
two intersections.
Eq. (38) indicates the probability for a sink moving out of a cluster of size α after one time unit.
A and B of Eq. (38) are for case (a), i.e., a mobile node is at the intersection of streets. As a mobile
node is in the top area, it can move out of a cluster if (i) its original moving direction is ↑ and it
goes straight; (ii) its original moving direction is ← and it turns right; or, (iii) its moving direction
is → and it turns left, as shown in Fig. 21. Therefore, given a mobile node is at the intersection and
in the top area, the probability to move out of a cluster is 3 · 1
4
· 1
3
= 1
4
. The same idea is used for
other middle areas, thus A of Eq. (38) shows the probability that a mobile node is in the one of
middle areas and moves out of a cluster after one time unit. Moreover, as a sink is in a corner area,
the probability to move out of a cluster is 2
3
· 1
2
+ 1
3
· 1
2
= 1
2
, and the B of Eq. (38) considers that a
mobile node is in the one of four corner areas. On the other hand, the C and D of Eq. (38) are for
case (b), i.e., a mobile node is in the middle between two intersections. C is the probability that a
mobile node moves out a cluster and it is in the one of middle areas, e.g., a mobile node is in the
top area and its current moving direction is ↑. D describes the probability for corner areas, e.g., a
5Recall that α is the average number of sensor nodes in a cluster; so, α/η is the size of a cluster
29
of such distance is the average distance from any point on the border of a cluster to the CH. The
expected round-trip hop count of the locating phase is computed by Eq. (40).
tl(β) = 2
∫ pi
4
0
ta
(
Wβ
2
sec θ
)
dθ
pi/4
=
1.989r
√
β√
 · Dhop (40)
APPENDIX C
MLS ROUTING DELAY IN A DOWN DIRECTION: td(k)
After the look-up process finds the level-k cluster that contains the sink, the packets are forwarded
in a down-level direction to the sink. The expected route hop count of a down-level direction, td(k),
is shown by Eq. (41). While k > 1, A is the route hop count from the CH of a level-l cluster to the
CH of a level-(l− 1) cluster, and B describes the expected route distance from the CH of a level-1
cluster to the sink.
td(k) =

k∑
l=2
ti(
2l−1
√
2Wα
4
)︸ ︷︷ ︸
A
+
tw(α)
2︸ ︷︷ ︸
B
=
√
αr√
Dhop
(
0.627 · 2k − 0.575)+ 
α
(
1− 2r
3Dhop
) if k > 1
tw(α)
2
= 
α
+ rDhop
(
0.678
√
α

− 2
3α
)
if k = 1
(41)
APPENDIX D
CALCULATION OF n(k, j), σb(k), σc(k), AND σf(k)
Here we use Fig. 8 as an example to illustrate n(k, j). Fig. 8 shows a complete lookup from
the (k − 1)-th level to the k-th level. Suppose the lookup procedure is performed from the bottom
neighbor in the clockwise order. Recall that there are 4k−2α sensors in a level-(k − 1) cluster, e.g.,
c4,1 in Fig. 8. Suppose a lookup request is propagated to the k-th level and the sink can be found by
visiting the j-th adjacent cluster. Given a level-k source cluster, there exists (4k−1 ·α)2 routing pairs
whose sources are in a level-k source cluster and whose sinks are in the j-th of the adjacent level-k
clusters. However, some of these routing pairs can find the sink before the k-th level. For instance,
if the source is in C3,3 of Fig. 8 and j = 3, the sink must not be in C2,3 or C2,4. More specifically, if
the source is in the C3,3 cluster, the sink must be in the white areas of Fig. 8, otherwise the sink can
be found before level k. Thus, Eq. (42) represents the number of routing pairs whose source is in a
specific level-k cluster and the sink is found by visiting the j-th of the adjacent level-k clusters. For
example, when j = 1, the sink must not be in C3,5 ∪ C4,5 if the source is in cluster C3,4 or cluster
C4,4.
n(k, j) =

(4k−1α)2 − 4(4k−2α)2 if j = 1, 3, 5, 7 & k > 1
(4k−1α)2 − (4k−2α)2 if j = 2, 4, 6, 8 & k > 1
α2 if k = 1
(42)
Moreover, the value of σ can be computed by Eq. (43), where σb(k), σc(k), and σf (k) are the
number of border clusters, corner clusters, and clusters having eight adjacent clusters in level k.
Moreover,
√
N
4k−1α
is the number of level-k clusters in the horizontal or vertical direction of a
network.
σf(k) =
N
4k−1α
− 4 ·
√
N
4k−1α
+ 4
σb(k) = 4 ·
√
N
4k−1α
− 8
σc(k) = 4 (43)
31
case 4 can be expressed by Eq. (46). Three terms of Eq. (46) respectively indicate the routing load
whenever C l−1m is the first, second, and third place in the lookup procedure from C l−1x .
H4(N) =
GλTsim
N2
(
(N − N
4
)
N
4
− 9(N
16
)2
)
+
GλTsim
N2
(
(N − 2 · N
4
)
N
4
− 5(N
16
)2
)
+
GλTsim
N2
(
(N − 3 · N
4
)
N
4
− 4(N
16
)2
)
= 0.304GλTsim (46)
33
 2 
二、與會心得 
下午我們先參加了由Prof. Ivan Stojmenovic所發表在行動雲端架構下的綠能計算的演講，在可
預期的未來智慧型手持裝置與雲端服務將大大的影響人們的生活，因此由大量智慧型行動裝置所
獲得的資訊，將可被雲端中心利用，作出即時性更佳的決定以改善人類生活。舉例來說，在都市
區塞車的時候，市政府交通管理中心可以利用由每個開車使用者的智慧型手持裝置獲得目前的車
況資訊，作出最佳化的方式去控制交通號誌。在整個過程中包含工作的排程，取得權的控制，傳
輸機制的設計與應用程式的最佳化都是需要深入探討的議題。接著我們參加了FTDCS 中Web 
Services and Cyber-Physical Systems session 以及作我們論文的發表”Striking the Balance between 
Content Diversity and Content Importance in Swarm-Based P2P Streaming ”，期間包含session chair Prof. 
Yaw-chung Chen以及 Prof. Jian Wang 都對我們的論文提出深入且有建設性的問題，相信在他們的
幫助下我們論文的品質將會有更大的提升。 
星期六早上的 Keynote speech是由 UBC的 Victor C.M. Leung 教授發表高品質的演講，針對
發展新一代車陣網路的應用、所可能遭遇到的挑戰、與最新的一些進展。接著我們參加了Wireless 
Networks sessions，在會議中所報告的論文提出利用 progressive sensing的方式去改善在無線偵測
網路的使用壽命問題，都有引人注視的解法與論點。下午我們則選擇去參加有興趣的 Panel由教
授所主持的” Evaluation of High-Performance Computing Systems: How Well Are We Doing?” ，會中
引起熱烈的討論讓人增廣許多見聞。也讓我們有了另一種新的思維方式，聽完之後感覺受益良多。
一天下來雖然身體覺得很疲倦但精神上卻飽食了一頓。晚上我們則參加了會議所提供的餐會活動，
非常值得慶幸得是我們得論文也獲得了 the Best Paper Award of FTDCS 2011。我們最主要的心得
是參加第一次以高效能計算得 HPCC，其中論文的原創性與完整度值得好好學習。 
三、考察參觀活動(無是項活動者略) 
四、建議 
五、攜回資料名稱及內容 
六、其他 
 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/31
國科會補助計畫
計畫名稱: 在無線感測器網路上行動資料管理系統之跨層設計研究
計畫主持人: 周承復
計畫編號: 98-2221-E-002-076-MY2 學門領域: 計算機網路與網際網路
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
於民國 99 年 8 月 24 日在資訊系館以通訊多媒體實驗室名義舉辦年度成果發表
會，23 家廠商，含: 宏達電、鴻海、廣達、圓剛、聯發科、晨星、訊連...等
80 多名主管與 R&amp；D 參與觀看 30 項展示 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
