I 
 
行政院國家科學委員會補助專題研究計畫 
■成果報告   
□期中進度報告 
 
 
行動無線網路安全與惡意程式行為分析跨國產學合作計畫 
(國際合作) 
 
計畫類別：■個別型計畫   □整合型計畫 
計畫編號：NSC 98－2218－E－009－020－ 
執行期間： 98 年 10 月 01 日 至 99 年 10 月 31 日 
 
執行機構及系所：國立交通大學資訊工程學系（所） 
 
計畫主持人：曾文貴 
共同主持人：謝續平、黃育綸 
 
 
成果報告類型(依經費核定清單規定繳交)：□精簡報告  ■完整報告 
 
本計畫除繳交成果報告外，另須繳交以下出國心得報告： 
□赴國外出差或研習心得報告 
□赴大陸地區出差或研習心得報告 
□出席國際學術會議心得報告 
■國際合作研究計畫國外研究報告 
 
 
處理方式：除列管計畫及下列情形者外，得立即公開查詢 
          □涉及專利或其他智慧財產權，□一年□二年後可公開查詢 
 
中   華   民   國  100 年  1 月  5 日 
III 
 
Abstract 
Wireless and mobile networks are widely used in modern life. With the development of smart 
phones and netbooks, providing mobile information services has become a trend of internet 
technology. This situation, however, could cause security problems. 
This project proposes a security inspecting solution for these problems. In this project, four 
outstanding students were sent to UC Berkeley for months for joint research projects focusing on 
heterogeneous networks, malware analysis, program defect detection, and the security management 
of mobile platforms. Based on the research findings, this project also developed prototype systems 
with related paper published. The project also contributed to various cooperation projects with some 
well-known companies, such as Chunghwa Telecom and D-Link. 
This project completed the development of a heterogeneous network testbed, which can 
support the experiments with up to 16 nodes. Users can simulate heterogeneous network topologies 
with the possible network attacks. This testbed can also be integrated with DETER, which is 
developed by UC Berkeley. 
Malicious program codes can not only be hidden in executable files but document files such 
as Microsoft Word, PowerPoint, or PDF files. For this research area, this project developed an 
analyzer for the malicious document files. Using virtual CPU and dynamic memory analyzing 
technology, this system can detect if the target file contains malicious codes or tries to obtain 
sensitive system information. Meanwhile, this system can also detect various abnormal strings to 
determine the technics used by the malwares or malicious programs. 
For the research on program defect detection, this project improved Catchconv, a famous 
open source tool, which is widely used for gray-box testing. The improvement is focused on a loop 
avoiding algorithm and its prototype system. This system can detect and skip unnecessary 
operations result from the loops in the program. This does improve the efficiency of Catchconv. 
Moreover, this project includes an IDS (Intrusion Detection System) on Android and a secure 
cloud storage system to improve the security management for mobile platforms such as smart 
phones. The IDS is a ported version of snort based on Linux system and is the first IDS system for 
Android. It is also optimized for the efficiency, power consuming, and packet capturing rate. We 
believe that it can run on Android applicably. For the secure cloud storage system, it encrypts and 
distributes the data to the cloud storage through Decentralized Erasure Code to achieve the goal of 
security and robustness. The prototype had also been completed with related paper published.  
Besides, this project also follows Light-Weight CMMI and had created four projects on 
OpenFoundry. Two of the prototype systems also opened their source code. This could connect the 
security researches and the community of open source software. Hopefully this could attract the 
interests of the industries and can strengthen domestic potential for information security technology. 
Keywords 
Cloud Security、Mobile Security、Heterogeneous Network、Malware Analysis、Program Defect 
Detection
1 
 
壹、  計畫內容及目的  
一、  前言及背景說明 
隨著智慧型手機裝置（Smart Phone）與行動小筆電（Netbook）的發展，以及無
線網路與 3G/3.5G行動上網的普及，行動資訊服務將是未來資訊服務發展的趨勢。如
何提供使用者安全、可信賴的服務環境，將是重要的關鍵議題。但現今國內資安產業
之關鍵技術仍仰賴國外進口，使得資安產業離技術自主性之目標仍有差距。如能增加
國際合作與人員交流，加速引進關鍵技術，除有助於國內資安產業的發展，更能提升
台灣於國際資安產學界之地位。 
因此，本計畫之目的在於提供一套完善的行動平台安全檢測方案，包含無線異質
網路模擬平台、惡意檔案文件分析、程式漏洞檢測以及行動平台的安全管理機制；大
至整體的網路環境，小至行動裝置的安全保護，期許能夠提供使用者完善、安全的行
動資訊服務環境。以下各節將分別針對各研究子項之相關背景進行介紹： 
 
 
 無線異質網路模擬平台 
近年來，隨著無線網路服務與應用之迅速發展，民眾的生活已與網際網路產生密
不可分之關係。在此國際趨勢下，各國莫不積極規劃具前瞻性的資通訊政策，期望以
完善的無線網路基礎建設與應用服務，帶動資訊產業成長，進而提升國家競爭力。我
國政府於 2004 年研擬「行動台灣計畫」 (M-Taiwan)，規劃台灣行動生活產業科技發
展策略，期望能成為全球領先的行動生活國家。為配合 M-Taiwan 計畫，國內法人單
位、研究學者紛紛切入異質無線網路連通、無縫架構與安全技術之研究領域，以整合
國內使用中的各類無線網路環境，諸如 GPRS (General Packet Radio Service，整合分封
無線服務)、 3G (the Third Generation，第三代行動通訊)、Wi-Fi (Wireless Fidelity，無
線相容認證)等，以及國際間正積極推動之前瞻性技術，包含了 WiMAX (Worldwide 
Interoperability for Microwave Access，全球互通微波存取)、4G (the Fourth Generation，
第四代行動通訊)等技術。 
異質無線網路測試必需涵蓋多種不同的網路型態和特性，研究人員除了考量各基
本網路型態之安全機制外，尚需解決許多存在於不同網路銜接界面之間的安全議題，
例如：無線網路裝置於異質網路交替 (Handoff) 時所需之安全驗證機制等等。因此，
如何建立一套適用於異質無線網路測試的實驗環境成為現今學者們面臨的一大挑戰。
透過建置實體的異質無線網路測試環境，可以迅速且準確的驗證新提出之安全機制；
但由於新興的無線網路設備售價昂貴，建造整合多項無線網路的實體測試環境所費不
貲。另一方面，藉由軟體模擬來評估安全機制，可解決缺乏實體測試環境之困難；然
而，軟體模擬往往只能擷取部分系統屬性進行分析，無法模擬因硬體設計所造成的效
能瓶頸。 
3 
 
眾多的使用者受害，或者是龐大的財產損失。即使業者推出了安全性的更新檔，也因
為無法同步世界各地的更新狀況，無法確保較慢更新的使用者的安全性。而這些攻擊
手法，大多使用夾帶於檔案中的惡意程式，騙取使用者執行該檔，進一步達到攻擊的
目的。如何判斷檔案的威脅性，已經是資安領域中熱門的問題。 
可造成破壞行為不一定要透過可執行檔，由於軟體開發人員的疏失，連同一般常
見的文書檔案，如Microsoft office Word、PowerPoint、PDF等，都可能成為散播惡意程
式的媒介。檔案本身雖無破壞能力，但利用相關軟體的漏洞，可以執行攻擊者事先嵌
入的指令，控制該軟體的行為。甚至，執行遠端的程式碼、或下載遠端惡意程式至本
地端執行來達到攻擊的目的。以近期為例：Microsoft Security Advisory (969136) v2.0修
正檔即為修補PowerPoint允許遠端程式碼執行的漏洞，但早在發布的前一個月，各大資
安論壇卻已廣泛討論此漏洞，從而得知此類攻擊早已是駭客們所重視的攻擊手法。 
我們希望能夠開發出一套偵測檔案安全的系統，對於任何可能隱藏惡意程式的檔
案，加以分析並且產生報告。對於一般的非執行檔，能夠偵測出是否有夾帶惡意程式，
或者檢測其中是否有意圖獲取更多關於系統方面的資訊，過濾不正常的字串，並且找
出該惡意程式利用何種技術來達到攻擊目的。最後，利用評比顯示出該檔案的威脅度，
以提醒使用者是否信任該執行檔。 
 
 
 程式漏洞檢測 
在程式的開發過程中，檢查、驗證程式本身的正確性，是一個相當重要的步驟；
一般來說，約30%左右的開發成本花費在測試和除錯階段。比較輕微的程式錯誤，可
能只是產生錯誤、非預期的執行結果而已；然而，重大的程式漏洞，卻可能會危害到
整個系統的安全。例如：程式漏洞可能會造成系統當機，讓系統不能繼續正常運作；
惡意攻擊者也可能利用此程式漏洞，去嘗試滲透、攻擊系統，進而埋入惡意程式或是
搶奪系統的控制權，竊取使用者的個人隱私資料，造成使用者的損失。程式漏洞的傷
害根據它所影響的範疇及程度而定，有些可能無足輕重，有些卻會造成莫大的傷害。
對於應用在資訊安全領域的軟體程式，例如大數、密碼方面的程式庫以及資訊安全協
定的軟體實作，其正確性及安全性更是重要，若是含有漏洞，將可被利用來攻擊。例
如：在CRYPTO 2008年的研討會上，Eli Biham、Yaniv Carmeli和Adi Shamir三人發表
了論文“Bug Attacks”，提出利用系統硬體的設計錯誤或是密碼軟體實作上的漏洞，去
推測、擷取使用者秘密金鑰的攻擊方法。這讓我們不得不去重視該如何驗證程式本身
的正確性，以及如何更有效地去驗證程式的技術。 
檢查程式的方法有許多種，根據我們對於程式內部運作的了解程度，可以分為以下三
類： 
(1) 有程式碼，對於程式內部運作完全了解，又稱作 White-Box Testing。除了可
以透過程式碼分析進行靜態檢測，來尋找可能的程式漏洞外，也可產生大量
的測試資料來對程式執行檔進行動態檢測，來發現潛在的程式漏洞。然而，
對於大部分的程式要取得其程式碼並不容易，尤其是用來營利的商業軟體；
另外，對於較為龐大複雜的程式，其大量的程式碼更是造成了檢查上的不方
便及麻煩。如果利用軟體來分析程式碼，會產生相當多的 False Warning，需
5 
 
二、  文獻探討與相關研究 
本計畫所涵蓋的範圍包含無線異質網路模擬平台、惡意檔案文件分析、程式漏洞
檢測以及行動平台的安全管理機制等。在此我們將目前各子項之文獻探討以及相關研
究列出並說明，藉此可了解目前其他研究者的研究方向及內容。以下將就本計畫所涵
蓋範圍內的各項相關研究提出分析與說明： 
 
 
 無線異質網路模擬平台 
網路服務的興起增加了開發研究人員對於網路實驗平台之需求。許多專家學者針
對網路實驗的重置性、真實性和擴充性等，設計數套網路測試平台。經過研究，以下
列出幾套現有之知名網路測試平台： 
 Emulab  
Emulab [1] 是美國猶他大學為了分散式系統和網路的研究所設計的有線網路仿真 
(emulated) 平台。使用者以 NS (Network Simulator) 語言描述實驗網路所需之拓
樸，並存放於 NS設定檔中。Emulab 再依據 NS設定檔中的資訊，配置實驗用的
實體節點，並在節點上載入指定的可執行映像檔。Emulab 透過虛擬區網 (Virtual 
Local Area Network，VLAN) 來建立實驗網路拓樸與區隔該平台上所執行的多組
實驗。藉由 VLAN 的區隔，Emulab 可以實現實驗節點之間的溝通性
（connectivity），使位於同一虛擬區網下的實驗節點可以彼此溝通；VLAN  技術
也同時確保實驗之間的隔離性，避免不同實驗彼此互相干擾。然而，Emulab 開
發之初著重於實驗的隔離性、可重複性與擴充性的設計，最初的設計並未考慮到
通訊網路的安全與保護。因此，美國加州大學柏克萊分校繼而研發出基於 
Emulab 的 DETER 有線網路攻擊防禦研究平台。 
 DETER 
DETER [2, 3] 是由美國加州大學柏克萊分校針對有線網路開發的攻擊防禦研究平
台，它以 Emulab 為基礎，提供了具可重複性的網路安全實驗環境。除了防禦機
制外，DETER 亦提供了數組惡意程式，可供使用者測試其新安全機制之強健度 
(robustness)。為建造適合網路安全方法、協定、機制與產品的測試環境，DETER
採用了以下安全機制以確保實驗環境的隔離性和安全性：(1)採用網際網路安全通
訊協定 (Internet Protocol Security，簡稱 IPSec) 的通道模式 (tunnel mode) 連接
實驗節點和控制交換器；(2)以防火牆隔離外部和內部實驗網路。防火牆的設計除
了維持內部實驗網路的單純性，亦可避免在實驗中的惡意程式失去控制時危害公
用網路。 
 ORBIT Radio Grid Testbed 
ORBIT [4] 是以 802.11 實體節點為基礎，針對 3G 和 802.11 網路所設計、具
二層架構的無線測試平台。ORBIT 由密集的 802.11 節點組成網格，網格中的節
點可以動態地連結成所指定的無線網路拓樸。ORBIT 使用者需依照定義的格式
完成實驗腳本格式，以指定網路拓樸、實驗設定和過濾機制等等；透過實驗腳
7 
 
 
圖一：Android架構圖 
 
目前限定所有應用程式都必須以 JAVA語言來撰寫，再以 Dalvik Virtual Machine 
來轉換成DX bytecode，因此程式開發和 JAVA ME 類似，應用程式的介面部分則是由
XML 程式來設計。簡單來說，即是系統由 LINUX 來執行，應用程式則透過 JAVA語
言來開發以及執行。要在 Android 上執行以 C語言所構成的程式，有兩種方法： 
(1) 利用 Android NDK，在 JAVA應用程式中去呼叫以 C語言所構成的 Library 以執
行我們要的功能。  
(2) 將C語言寫成的程式直接編譯成執行檔，然後再從 JAVA應用程式中，去直接執
行該執行檔(如圖二所示)。 
 
圖二：JAVA應用程式端呼叫 C應用程式示意圖 
 
由於 Android 等行動平台的計算能力以及儲存空間通常是受限的，故利用雲端運
算技術取得額外的儲存空間以及計算能量是一個趨勢。雲端計算近年來成為大家討論
的話題，而且逐漸變成下一代人們使用電腦的架構，雲端計算基本上含有一個以上大
型的數據中心，裡面包含了大規模的軟體以及大量的 database，用戶們只需要一個可
以連到網路的可攜式硬體，即可以透過網路享有高品質的服務(如圖三所示)，而這種
獨特模式打破傳統的儲存系統均存放在自己的硬碟裡，隨著網路速度的增加以及現代
人需求愈來愈多樣化的情況下，儲存技術廠商紛紛推出雲端儲存的想法，加上現在的
智慧型行動裝置愈來愈普及的狀況下，許多行動裝置業者紛紛加入雲端服務的功能，
C應用程式 
Ex: Snort 
呼叫 
程式 
處理 
輸出 
輸入 
參數 
顯示於 
螢幕 
JAVA前端應用程式 
9 
 
 
靜態與動態分析 
靜態分析比對惡意程式特徵碼[50]，一直是市面上防毒軟體普遍使用的分析手法。
對已知惡意程式檢測來說，這種靜態的比對方式是快速且有效的方式。但由於缺
乏彈性，卻對於新型的惡意程式攻擊手法無法即時招架。資安人員致力於分析新
型惡意程式行為特徵，盡力縮短惡意特徵碼更新與新型惡意程式釋出的時間差，
以減輕其所造成的危害。但惡意程式發展技術日新月異。常使用加密、加殼的方
式保護其原始碼，防止被分析知曉其攻擊行為與抵抗惡意特徵值檢測，增加資安
人員分析的困難度。 
市面上已開發出檔案分析軟體，例如：PEiD，此工具將其特徵值資料庫與可疑程
式執行檔進行比對，判斷此可疑程式是經由何種工具加殼加密，以提供 相對應之
解碼工具讓使用者參考。尚有另一款軟體 PolyUnpack[54]，採取將可疑程式反組
譯方式，但經過一連串靜態與動態分析流程，造成負擔過重。 
利用動態分析方式解析惡意程式[52,53,55]，是目前的趨勢。由於無論惡意程式如
何包裝自身型態，在執行期間，必定會將其對系統真正有害的程式原始碼與資料
還原，存放於記憶體中。當資安人員以動態分析出惡意程式原始碼執行入口位址
後，即可對惡意程式原始碼採取進一步的行為分析與特徵值取得的工作。 
由於動態分析與靜態分析各有優缺點，本系統希望能夠運用各部份所長，來互補
其分析的不足。以動態分析方式取得程式原始碼，因為無頇先突破惡意程式的加
殼加密防護牆，加速了對新型惡意程式分析的速度，成功縮短惡意特徵碼更新與
新型惡意程式釋出的時間差，增加靜態分析比對特徵碼的可用性，讓資安人員於
檢測可疑惡意程式的準確性大幅提升。 
 
偵測動態取得堆疊記憶體技術 
現在常見的惡意程式攻擊手法，會將惡意程式碼內嵌在檔案中，來逃避偵測，但
它們在進行攻擊的時候，無法事先預測自己會被分配到哪一塊記憶體區塊，對於
一些與記憶體位址有關的變數或要 Jump 的目標位址，如果還是按照最初編譯時
的位址来尋址，必將導致尋址錯誤，使得惡意程式無法正常的運行 。 
因此，惡意程式在攻擊的時候，必頇先得到自己這隻程式現在在記憶體中的位置，
來重新定位那些跟記憶體位址有關的變數或要 Jump 的目標位址。大 多數隱藏於
文件檔案中的惡意程式碼，為了得知自身程式碼所在的記憶體位置，必頇先將目
前的 Program Counter (eip值) 壓入堆疊後，再從堆疊中讀出，這種動作稱之為 
Call/Pop 序列。 
Call/Pop Example1：  
 call getDelta 
getDelta：  
 pop ebp  
 sub ebp，offset getDelta 
...... 
11 
 
資料外，還合併了動態的型別轉換檢查，對於不同型別變數之間的互相轉換，或是
有號數無號數轉換所造成的數值溢位，都能夠做檢查；除此之外，Catchconv特別著
重於尋找記憶體方面的程式漏洞，例如：記憶體緩衝區溢位，以避免這類型的程式
漏洞成為系統上的安全弱點，造成重大的傷害。 
13 
 
System(IDS)，也就是所謂的入侵偵測系統，利用每種攻擊的特徵，對系統
以及網路中的各項資料去進行比對。IDS從偵測方式上可分為兩種，分別為
Anomaly-based detection 以及 Signature-based detection，前者是利用監控作業
系統中的各項資源，去找出資源異常使用的地方，若有某項資源的使用量超
出一般情況很多，則判定為異常，可能是受到攻擊或是使用者有異常行為，
便會發出警告給系統管理員；後者則是利用字串比對的方式，去對要檢查的
內容進行比對，以判斷是否含有會對系統造成危害之字串，從定義上防毒軟
體可以視為被包含在這個分類裡面。從偵測目標上則可分為 Host-based 
IDS(HIDS)以及 Network-based IDS(NIDS)，顧名思義，前者是對主機去進行
監控，而後者則是對網路封包去進行監控。其中 NIDS大多都使用
Signature-based 的偵測方式。 
本計畫預定將 Snort移植到 Android 行動平台，Snort 為 Signature- based 的
NIDS，其為網路上很受歡迎的一款 IDS，不但功能強大而且還是共享軟體，
其良好的軟體設計理念，使得 Snort 到現在還是非常多人使用，並且仍然有
在進行功能更新。我們可利用 Snort 對行動無線網路傳輸做安全檢測與控
管。無可諱言現有 PC 及 NB 平台上的安全機制可以移植到行動平台上，但
是行動平台有其限制(受限於 CPU 計算速度、主記憶體容量、網路頻寬及電
池容量等)，所以在設計相關的安全機制時，我們必須考量特殊的通訊環境
與硬體規格，不能全盤照收，佔用太多資源的系統就不太適合，例如完整的
防火牆。 
 
 安全雲端儲存系統 
本計畫預定設計出一套安全雲端儲存系統，可同時達到高度的安全性以及資
料可靠度。OceanStore在2000年就提出了分散式儲存系統的構想，目的是希
望提供行動用戶們可以隨時隨地透過行動裝置去存取 OceanStore 中的資料。
不過它不像是傳統的系統一樣將資料存放在固定的伺服器中，且每台伺服器
都有防火牆保護。雲端的概念使得使用者能透過網路在任意時間任意地點，
以及任意設備上獲取資料，而且會依伺服器不同的需要在任意時間點將資料
搬動到其他伺服器上。假設資料是以明文儲存的話，這樣安全性上會有很大
問題，另外如果伺服器上的資料有發生損毀的問題，那麼使用者下載完成的
檔案也會發生問題。所以目前的儲存伺服器都必頇要具有檔案的完整性及保
密性的功能。  
儲存系統的目的主要是為了長期保存資料，會有系統資料損毀或是遭人惡意
串改的情況，儲存上如有這些情況都是長期保存資料時所不允許的，早期的
方式是將一份資料複製好幾份存到每台 storage server，或是一台 storage 
server，會有一台相對應的 mirror storage server(簡稱MSS)，當資料毀損或被
串改時，就可以從MSS 上還原回來，但是以上種種方法的 overhead都太
高，所以 Erasure code 是較早提出的方法中具體達到容錯以及低 overhead 的
方法。在 2006年Decentralized Erasure code 被提出，並用在分散式網路儲存
15 
 
四、  研究方法 
本計畫包含了異質無線網路模擬平台、行動平台的安全機制、惡意檔案文件分析
系統、與程式漏洞檢測等四個研究子項，對於本計畫的各子項，我們將分別採用以下
之研究方法： 
 
 
 異質無線網路模擬平台 
本計畫所建置之異質無線網路模擬平台必須具備以下之功能：(1) 實驗之可控性與
可重複性、(2) 無線網路模擬之真實性、(3)無線網路通訊技術之可擴充性與可移植性。
因此，本計畫先以研究現有之網路測試平台為目標，探討現有測試平台架構，以及將
其套用到本計畫之異質無線網路模擬環境的可行性。 
在分析各平台之特性及優缺點後，我們歸納出以下幾點：(1) 採用實體無線網路裝
置的實驗平台 (如：ORBIT Radio Grid Testbed) 雖具有較高之模擬真實性，其模擬之結
果最接近真實世界中異質無線網路之傳輸行為。然而，此類平台擴充性低、建置成本
高，尤其是新興的網路設備往往售價昂貴，欲於平台上測試新的無線網路技術所費不
貲。而且，實驗易受到環境與訊號之干擾，缺乏可控性與可重複性；(2) 模擬無線網路
裝置進行測試的實驗平台 (如 MobiNet) 的優點是具備高擴充性，使用者可於平台上開
發新的模組來模擬新的網路協定與技術，但是藉由軟體模擬的實驗往往因只擷取部分
系統屬性進行模擬而缺乏真實性，且無法考量因硬體設備所造成的效能瓶頸；(3) 現行
之有線網路測試平台 (如 EmuLab、DETER 等) 採用一對一的方式，利用實體主機仿
真有線網中的每個節點，於平台上建立之實驗具備可控性與可重複性，但缺乏無線網
路之支援。 
於上述三類之平台中，本計畫之研究人員認為於 EmuLab 等有線網路測試平台上
擴充無線網路的訊號模擬，能達到所欲建立之異質無線網路模擬平台之所有功能。因
此本計畫提出了虛擬驅動程式和虛擬天線的架構模擬無線網路的訊號傳送方式來補足
有線平台之不足，其中：(1) 虛擬驅動程式負責與作業系統核心溝通，模擬無線裝置的
網路控制層 (MAC layer) 的所有控制以及資料封包的處理工作；(2) 虛擬天線則用以
仿真無線網路底層 (硬體傳輸層) 之介質傳送和資訊交換的工作，將來自虛擬驅動程式
的無線網路封包 (802.11、802.16d) 封裝成有線網路 (802.3) 之 UDP 廣播封包，再傳
送給所有實驗節點。使用虛擬驅動程式和虛擬天線的架構模擬無線網路，可確保進行
中之無線網路實驗不受外界訊號之干擾。底層的有線網路平台使用之防火牆與 VLAN 
技術，除了能保護進行中之實驗不互相干擾外，更可以確保在內部進行的攻擊實驗，
不會擴散至外部公用網路。此外，本計畫模擬無線網路裝置 MAC層與硬體傳輸層之設
計，也可以方便使用者將新型無線網路技術開發成虛擬驅動程式或虛擬天線，移植到
平台上進行協定之驗證與安全機制之測試，以提高異質無線網路測試平台之移植性與
可擴充性。 
本計畫延續和美國加州大學柏克萊分校 (UCB) 之合作，持續發展可提供異質無線
網路模擬之實驗環境。為進一步擴展兩校之合作關係，本計畫透過加入 DETER 
17 
 
分散式密文，就可以結合解回原來的訊息明文。我們將先了解相關密碼工具
homomorphic signature 與 proxy re-encryption scheme 等的最新發展，再針對我們
的系統需求進行客製化設計，最後進行正規的正確性與安全性分析。最後研究
成果將撰寫為技術報告。而當我們有了理論及技術之後，需要建置一個雛形系
統來測試我們的理論及開發相關軟體系統，以便和實際應證，如有不符合的地
方，當檢討模型，然後修正理論，使系統的實際功能及效能達到預定的目標。 
(3) 行動平台的入侵偵測系統： 
在硬體規格上，一般 Android 手機的行動平台受限於 CPU 計算速度、主記憶體
容量、網路頻寬及電池容量等限制，同時其強調隨時隨地上網，除了非常的耗
費電力外，攻擊者可以隨時發動攻擊導致個人資料的外洩或成為攻擊的跳板，
因此理論上在行動平台上的防護必須時時開啟。本研究的主要任務是如何將各
類的防護系統整合放到行動平台上，並以其受限的硬體規格為考量，進而設計
與系統整度高的安全機制。關於防護系統，如防火牆、入侵偵測、弱點掃描、
惡意程式檢測等系統，我們打算用自由及共享軟體為基礎，將其輕量化後放到
行動平台上。 
 
 
 惡意檔案文件分析系統 
本子研究將分成以下三個部分：(1)可疑字串檢驗、(2)檔案格式與副檔名檢驗、(3)
虛擬 CPU 以偵測動態取得記憶體位址。以下將對各項做深入的說明： 
 
(1) 可疑字串檢驗 
在一般文件檔案或可執行檔中，字串會以 ASCI碼方式保留在檔案內容。透過每
個位元組位移的掃描方式，可以確定該檔是否有符合的可疑字串。利用正規表示
法的特徵來找出事先設定的字串。為了往後的擴充性，設定檔是獨立出來的，供
使用者往後可以針對不同的檔案內容特徵做檢查。以下為目前檢驗的字串格式： 
a. IP格式 
b. 網路連結 
c. windows 檔案路徑 
d. unix-like 檔案路徑 
e. iframe tag 
f. embed tag 
g. windows 可執行檔 
由於程式行為很難直接判定是否為惡意。但若檢驗檔案的行為理應簡單而可預
知，例如：影片、Office 文件、小遊戲…等，但卻檢查出有包含可疑的字串格式，
雖有可能本身沒有包含惡意行為，但也有可能為首頁綁架、惡意軟體下載器等間
接的木馬程式。我們實作了可疑字串檢查模組，將能找出類似可疑的字串，協助
我們對檔案的判斷。 
 
(2) 檔案格式與副檔名檢驗 
19 
 
 程式漏洞檢測 
我們計畫以美國加州大學柏克萊分校（UCB）研發的 Catchconv 為基礎平台，進行
關鍵技術的研發與檢測系統的開發。Catchconv 是目前相當優秀、技術先進的程式
檢測系統，同時它也是公開原始碼的，在上面進行技術研發，除了能夠方便取得大
量有益的資源外，也可習得許多先進的檢測技術；更重要的是，能夠推廣公開原始
碼軟體與提升台灣資訊軟體在公開原始碼上的參與度與貢獻度。 
在 Catchconv 的檢測過程中，我們須先提供一個初始的測試資料，用來當作被檢測
程式的輸入。Catchconv 將會監控被檢測程式的執行運作，檢查是否有潛在的程式
漏洞，並產生可引發此程式漏洞的測試資料；Catchconv也會根據目前程式執行過
程中的變數內容與條件執行流程，產生能夠執行到尚未執行過的程式區塊的測試資
料。對於被檢測程式中的程式碼敘述（例如：Buffer[i]=0;），Catchconv 將會嘗試
產生可能的測試資料，使得索引 i超過 Buffer[ ]的大小，企圖引發記憶體緩衝區溢
位；另一方面，對於程式執行中的條件執行流程（例如：if (i>0) OOO else XXX），
如果目前程式執行的是 i>0這一條路徑，Catchconv 將會嘗試產生可能的測試資料，
使得變數 i<=0，企圖讓被檢測程式下次執行另一條路徑。 
我們發現到在 Catchconv 的檢測過程中，迴圈將會造成許多重複的條件執行流程，
這會讓 Catchconv 的檢測變得較無效率。例如：對於迴圈 for (i=0;i<10000;++i)，
Catchconv 將會面對 i<10000這樣的條件執行流程大約一萬次（i=0、i=1、…、
i=10000），然而這些條件執行流程所產生的測試資料，事實上卻只是影響了迴圈
的執行次數，並沒有帶領我們發現、檢測新的程式區塊。根據以上的觀察與發現，
我們希望能夠偵測出被檢測程式中，哪些條件執行流程是由迴圈造成的，這樣我們
便可讓 Catchconv 在檢測程式的過程中，不會陷於迴圈的陷阱。 
我們首先進行 Catchconv 的程式碼修改，使其能夠輸出檢測過程中所遇到的條件分
支資訊，包含目前的條件分支是否被執行以及此條件分支的目標位置。接下來開發
迴圈偵測程式，利用條件分支的資訊，判斷哪些條件分支是由迴圈所造成的，並輸
出可以被省略的 Query清單供 Catchconv 使用。之後我們修改 Catchconv 的主程式
部分，使其在進行檢測的過程中，能夠利用可省略的 Query清單，不用對所有的條
件分支進行 Query，節省 Query Solving 的時間，增進整體效率。 
除了迴圈偵測及 Query最佳化的部分之外，我們注意到 Catchconv 在不同回合的檢
測過程中，有許多是之前的回合中已經被 Query 過，又再度被重複 Query 到的條件
分支，因此我們同樣希望可以辨識出這些重複的 Query，以省略再一次 Query所造
成的浪費。 
我們同樣利用條件分支的資訊，紀錄哪些條件分支是已經被 Query 過的。我們修改
Catchconv 的主程式，使其利用 Prefix Tree 來紀錄目前為止已經被 Query 過的條件
分支，如此便能對目前所遇到的條件分支進行檢查，判斷是否已經被 Query 過而可
以被省略，以達到我們的目的。 
 
21 
 
本平台採納 UCB 的 DETER 團隊所提出 DETER 聯盟架構 (DETER Federation 
Architecture)，與 DETER 平台分享彼此之實驗資源。本計畫目前已完成加入 
DETER Federation 所需之技術分析與測試，已及運行於實驗主機上之作業系統/
虛擬驅動程式/虛擬天線之移植和驗證，確認本計畫所能運行之異質無線網路實
驗皆可於 DETER 平台上進行重置，待本計畫通過 DETER Federation 之審查後
即可正式與其他平台共享實驗資源。 
(5) 異質無線網路模擬平台開發文件和使用者手冊撰寫  (100%) 
為加強推廣本異質無線網路模擬平台予國內產學各單位，本計畫之研究人員亦著
手撰寫本異質無線網路模擬平台之說明文件，包含詳細的軟硬體架構設計與使用
者手冊，並已維基百科的方式公開至本平台之官方網站
(http://www.swoon.cs.nctu.edu.tw)，期望吸引國內外之研究學者於本平台上開發新
的網路協定與驗證其安全機制。 
 
 
 行動平台的安全機制 (完成度：100%) 
本子研究之工作項目之完成度如下： 
(1) 探討行動平台的安全問題   (100%) 
研究現行各種行動平台，並研讀相關的安全議題及相關論文。目前已完成相關
背景研究。 
(2) 安全雲端儲存系統   (100%) 
已完成一套兼顧資料安全性與可靠度的雲端儲存雛型系統，並有相關期刊及會
議論文產出。 
在系統設計理論上的研究中，我們的重點在於如何將訊息明文加密成分散式密
文，然後存入分散式系統的儲存伺服器中，當需要時，只要取出適當伺服器數
內的分散式密文，就可以結合解回原來的訊息明文。更進一步來看，如果解密
金鑰是由一些安全伺服器所共同持有，每一金鑰伺服器擁有一把金鑰持份。當
要取出分散式密文時，我們希望金鑰伺服器利用其金鑰持份作分散式的解密動
作得到訊息明文持份，然後使用者再將訊息明文持份結合成訊息明文。多個訊
息明文經過加密後，送到獨立運作的儲存伺服器中儲存，儲存伺服器將這些資
料作一些特殊的運算後儲存起來，類似網路編碼的功能，以節省儲存的空間，
當使用者要取出資料時，命令她的金鑰伺服器從儲存伺服器取出資料作部分解
密，然後由使用者作最後的計算，得到多個訊息明文。要特別注意的是，儲存
伺服器是獨立運作的，沒有相互聯繫，金鑰伺服器也是獨立運作，每一個金鑰
伺服器隨機從數個儲存伺服器取出儲存的加密資料，然後利用其金鑰持份對資
料作部分解密的動作，得到部分訊息明文。 
在系統的實現的研究中，我們加入控制伺服器來管理使用者存取的權限以及儲
存伺服器的數量，另外還幫忙使用者將一份資料傳給數個儲存伺服器，因為我
們假設使用者端的網路頻寬是相當有限的，不像是 server端的網路那麼好，因此
我們控制伺服器將幫我們決定傳送哪幾個儲存伺服器，我們這樣的方法不僅僅
只有節省了用戶傳輸的流量更是節省遠端儲存伺服器的儲存成本，另外安全方
23 
 
們實作了可疑字串檢查模組，將能找出類似可疑的字串，協助我們對檔案的判
斷。透過檔案指標傳遞，讓此分析模組取得欲檢測之檔案。經過每位元組位移
的掃描方式，可以確定該檔是否有符合的可疑字串。利用正規表示法的特徵來
找出事先設定的字串。為了往後的擴充性，設定檔是獨立出來的，供使用者往
後可以針對不同的檔案內容特徵做檢查。 
此部分將以正規表示式(Regular Expression)檢查檔案中是否含有可疑的字串片
段，檢查項目包括： 
(a) IP Address - 如 140.113.1.1、72.65.11.101 
(b) URI - 如 http://www.hinet.net、ftp://fadsaf.dsafdsaf.dsafdsa 
(c) Windows UNC Path - 如 c:\windows\、d: 
(d) Linux Path - 如/usr/bin、/bin/sh 
(e) iframe tag - 如<iframe…………</iframe> 
(f) embed tag - 如<embed…………</embed> 
(g) Windows 可執行檔名稱 - 如 winword.exe、command.com、autoexec.bat 
(2) 蒐集各類檔案格式資料  (100%) 
目前很多惡意檔案利用使用者對副檔名的誤判，來達到騙取使用者點選或是不
適當的操作。本分析模組將會檢查該檔案的格式，是否和副檔名相同。由於正
常的應用軟體產生檔案，並不會刻意的隱藏或改變該檔案的副檔名，故可利用
此現象來過濾出副檔名與檔案內容格式不符的可疑檔案。對於欲檢測的檔案，
我們整合Linux 的 file 指令來協助檔案判斷，file 可以判斷數千種檔案格式，其
特徵碼達數萬行。由於微軟的檔案系統都會包含副檔名以得知和哪個軟體有關
聯性，而該副檔名也成了騙取使用者執行的幫兇。若一個檔案格式與其副檔名
不同，將有欺騙使用者之嫌。攻擊者可能把惡意執行檔替換成一般文件，以降
低使用者或防毒軟體對該檔的警戒心，但必要的時候讀取該檔內容將成為攻擊
程式。本模組已完成，此系統可檢查該檔案之副檔名是否符合其檔案格式，且
檔案格式與副檔名的對應可由分析者自行增加。  
(3) 模擬 x86 CPU 及虛擬記憶體動態分析模組實作  (100%) 
由於內嵌惡意程式開始對使用者的系統進行攻擊前必頇要先得到它現在在記憶
體中的位址，而目前最常用的方法就是利用Call/Pop序列來取得此記憶體位址。
我們所設計的分析系統首先會掃描目標檔案，利用 x86反組譯器，將目標中每個
位元組當作 x86 的指令碼解析，將其反組譯成 x86 程式碼，分析指令的類型，若
為 Call/Jump這種類型的指令，就停止繼續反組譯。找到第一個 Call 的指令後，
我們會運行一個 x86 cpu 模擬器來去實際執行，第一個先後執行剛剛的 Call指
令，再將剛剛 push進堆疊的 eip值存起來，然後從他跳到的目標在檔案中的位址
開始一直執行。最後再檢查是否曾經去讀取剛剛存的那個 eip值，若有，則表示
有發生Call/Pop這樣去取得自己現在在記憶體中的位址的情況，就極有可能是惡
意程式。在模擬執行的過程中，分析程式將監測所有的記憶體讀取動作，當從
記憶體中讀取出的值符合當初壓入堆疊的特殊值時，即代表偵測出一個 Call/Pop
序列。 
25 
 
度（步數）為 n 時，其對應之 Execution tree大小最大可能為 2n，此時將無法在
系統記憶體中儲存此 Prefix Tree。所幸，我們通常不會也無法去花費 Exponential 
Time 的時間去檢測程式，因此，我們只考量在 Polynomial Time 內的漏洞檢測所
能夠達到的效用，而不考慮花費 Exponential Time去將所有可能的執行狀態做檢
查。 
(2) 開發程式自動檢測雛型系統  (100%) 
以上述程式區塊迴圈處理演算法為主體，本計畫已修改 Catchconv 主程式，使其
能夠輸出所需之條件分支資訊，並且完成迴圈處理演算法之實作，以 tools 的方
式與 Catchconv 完成整合，Catchconv 可於檢測過程中呼叫迴圈偵測程式，偵測
迴圈所產生的條件分支，並省略其對應之 Query。本計畫也已完成於 Catchconv
主程式中，實作了 Prefix Tree結構，以便紀錄已經 Query 過的條件分支，
Catchconv 將會針對目前遇到的條件分支進行檢查，以決定是否該 Query 此條件
分支。 
此程式漏洞自動檢測雛型系統已完成開發，並與 Catchconv專案進行整合，放置
於 Source Forge 網站上：http://sourceforge.net/projects/catchconv/ 
使用者可利用 CVS（Concurrent Versions System）下載最新版本之
Valgrind-Catchconv： 
在欲下載 Valgrind-Catchconv 的目錄下輸入以下指令： 
cvs -d:pserver:anonymous@catchconv.cvs.sourceforge.net:/cvsroot/catchconv login 
按下 Enter鍵，使用空白密碼登入 
輸入以下指令下載 Valgrind-Catchconv： 
cvs -z3 -d:pserver:anonymous@catchconv.cvs.sourceforge.net:/cvsroot/catchconv co 
-P valgrind-catchconv 
 
27 
 
以下將針對本計畫所包含各子項之交流研究內容進行說明： 
 
 異質無線網路模擬平台與 DETER 之相容性分析與技術整合 
DETER 聯盟架構 (DETER Federation Architecture，簡稱 DFA) 為 UCB 的
DETER 開發團隊所提出的有線網路測試平台之間的資源共享方式，使研究人員能夠
同時使用多個基於 Emulab 所開發之網路測試平台的實驗機器，以進行大規模的網路
模擬實驗。DFA 使用兩種不同的控制器來協助跨平台實驗之建立與管理： (1) 實驗控
制器 (Experiment Controller)  提供使用者一個建置與管理跨平台實驗之介面，協助使
用者取得與控制其他網路測試平台之實驗資源；(2) 存取控制器 (Access Controller) 負
責處理遠端實驗控制器所發出之請求與協調本地測試平台之資源，並建立於跨平台實
驗時節點與節點之間的溝通管道。存取控制器會為跨平台之網路模擬實驗在參與實驗
之測試平台上建立連線節點 (Connector Node) ，連線節點間使用 SSH 通道的方式傳
輸實驗的網路封包，如下圖四 所示。圖四 中的 A1 節點傳送封包給 B1 節點時，網
路封包會透過 A 平台的連線節點的 SSH 通道傳送給 B 平台的連線節點，B 平台的
連線節點再將封包送達目的節點 B1。 
 
 
圖四：DETER Federation Architecture 與其 SSH 通道 
 
 
本計畫所設計之異質無線網路模擬平台之底層使用 EmuLab 之有線網路架構，
符合 DETER Federation Architecture 之基本需求。本計畫目前已完成加入 DETER 
Federation 所需之技術分析，並於本計畫平台移植與測試實驗控制器與存取控制器之
運作。此外，為了加快雙方合作之腳步，本計畫研究人員亦將本平台無線網路實驗節
點執行之作業系統移植到 DETER 平台，測試 802.11、 802.16d 的虛擬驅動程式和
虛擬天線，確認本計畫所能運行之異質無線網路實驗皆可於 DETER 平台上進行重
置；待本計畫通過 DETER Federation 之審查後即可正式與其他平台共享實驗節點，
並將本計畫之無線模擬機制推廣到其他平台上，促進與其他各校之學術交流。 
 
 
29 
 
 
圖五：平行運算之物體追蹤與辨識運算流程 
 
 
 行動平台的安全管理機制 - 安全雲端儲存系統設計與實作 
本計畫之交流研究人員已完成一套兼顧資料安全性與可靠度的雲端儲存雛型系
統，並有相關期刊及會議論文產出。在系統設計理論上的研究中，我們的重點在於如
何將訊息明文加密成分散式密文，然後存入分散式系統的儲存伺服器中，當需要時，
只要取出適當伺服器數內的分散式密文，就可以結合解回原來的訊息明文。更進一步
來看，如果解密金鑰是由一些安全伺服器所共同持有，每一金鑰伺服器擁有一把金鑰
持份。當要取出分散式密文時，我們希望金鑰伺服器利用其金鑰持份作分散式的解密
動作得到訊息明文持份，然後使用者再將訊息明文持份結合成訊息明文。以下圖為
例，多個訊息明文經過加密後，送到獨立運作的儲存伺服器中儲存，儲存伺服器將這
些資料作一些特殊的運算後儲存起來，類似網路編碼的功能，以節省儲存的空間，當
使用者要取出資料時，命令她的金鑰伺服器從儲存伺服器取出資料作部分解密，然後
由使用者作最後的計算，得到多個訊息明文。要特別注意的是，儲存伺服器是獨立運
作的，沒有相互聯繫，金鑰伺服器也是獨立運作，每一個金鑰伺服器隨機從數個儲存
伺服器取出儲存的加密資料，然後利用其金鑰持份對資料作部分解密的動作，得到部
分訊息明文。已發表相關論文如下： 
Yi-Ruei Chen, J. D. Tygar, and Wen-Guey Tzeng. “Secure group key management using uni-directional 
proxy re-encryption schemes”. in Proceedings of the 30th IEEE International Conference on Computer 
Communications (IEEE INFOCOM 2011) 
在系統的實現的研究中，我們加入控制伺服器來管理使用者存取的權限以及儲存
伺服器的數量，另外還幫忙使用者將一份資料傳給數個儲存伺服器，因為我們假設使
用者端的網路頻寬是相當有限的，不像是 server端的網路那麼好，因此我們控制伺服
31 
 
須考量到實作上的效率，而在實作方法與偵測準確度上有所妥協；本計畫也透過實
驗，進行偵測演算法的參數調整，找出適合的參數設定。 
本計畫針對 Catchconv所進行的程式檢測最佳化以及參數調整部分，皆已完成開
發及實作，並整合於 Catchconv 計畫中，放置於 Source Forge 網站上，使用者可利用
CVS下載經過最佳化的最新版本之 Catchconv： 
1. 輸入以下指令登入 Catchconv 的 cvs 系統： 
cvs -d:pserver:anonymous@catchconv.cvs.sourceforge.net:/cvsroot/catchconv 
login 
2. 按下 Enter鍵，使用空白密碼登入 
3. 輸入以下指令下載 Catchconv： 
cvs -z3 -d:pserver:anonymous@catchconv.cvs.sourceforge.net:/cvsroot/catchconv 
co -P valgrind-catchconv 
 
 
 
 DNSsec Security Management 
此部分主要的研究成果為論文-“New Threat comes with DNSSEC”。此論文探討
的是 DNSSEC 技術當中，雖然加強了 DNS 的安全性，並有許多先進的安全性技術，然而
其中的一個特性- NSEC3，卻隱含一個可能的安全漏洞。這個 NSEC3的漏洞，可能造成
資訊洩漏的問題，導致使用者的姓名、E-mail 等資訊被揭露，以致有 spam、social 
engineering attack 等後續的問題發生，本論文證明了這個漏洞確實存在，並提出解
決方法。 
此論文在出國前僅有基本構想，然而經過兩個月的交流研究，已完成了架構設
計、程式實作、實驗數據等等。此論文目前草稿已完成，現階段與 Prof. Tygar討論
修改當中，可望在近期內定稿，並擬投稿於國際期刊。 
 
33 
 
合作計畫名稱 合作對象 合約金額 
行動平台資通訊安全問題的研究  中華電信 940,000 
合作計畫內容簡述: 
    智慧型手機和行動小筆電是使用者主要的行動平台，透過高速的電信與資訊網路
系統，使用者將可以在任何時間任何地點取得資訊服務業者提供的服務。 
    本合作研究計畫的主要目地是利用本團隊在本計畫中所累積的行動服務平台相關
背景知識，進行針對行動平台的安全議題探討與研究，並協助中華電信在弱點掃描系
統、入侵偵測與防禦系統、身份認證系統、防毒系統、安全雲端儲存等系統上的開發。 
    整體來說，本計畫將與中華電信合作，以本團隊的研究能量在三年的期間內與中
華電信合作研發行動服務平台的安全及隱私機制與系統。 
 
表五：產學合作-行動平台資通訊安全問題的研究 
 
 
35 
 
四、  系統建置 
本計畫所提出的各項技術為具體可行，且本計畫團隊亦按照計畫書之規畫實做出
四套具高度實用性之系統，以下將分別就異質無線網路模擬平台、行動平台的安全機
制、惡意檔案文件分析系統、與程式漏洞檢測等系統敘述其設計理念、實作方法、以
及其實際執行畫面： 
 
 無線異質網路測試平台 
本計畫之異質無線網路模擬平台由四大元件組成：(1) 控制客戶端 (control 
client)、(2) 伺服器 (servers)、(3) 實驗節點 (experimental node) 以及(4) 虛擬鏈結 
(virtual link)。使用者可藉由控制客戶端設計所需之無線網路實驗拓樸並指定實驗參
數，控制客戶端將實驗網路之拓樸轉為 NS (Network Simulator，簡稱 NS) 設定檔
後，傳送給伺服器。伺服器則依該 NS 設定檔之內容配置實驗節點並建立對應的網
路拓樸。控制客戶端可以透過伺服器傳送實驗參數、指令至實驗節點，實驗節點會依
使用者設定的指令進行實驗。詳細的系統架構如圖六所示：
 
圖六：異質無線網路模擬平台架構 
 
控制客戶端： 
控制客戶端提供使用者一套圖形化的設定工具，用以設置實驗環境、開啟攻防程
式以及觀測實驗結果，其畫面如下圖七所示。使用者可藉由控制客戶端的圖形化
介面規劃所需之無線網路實驗拓樸和指定實驗參數；控制客戶端的分析器 (parser) 
負責解析無線拓樸圖形產生網路參數設定；網路設定程式 (network configurator) 
處理網路參數設定，並產出 NS設定檔。即時顯示畫布 (real-time display) 則負責
接收及動態呈現實驗結果。其中，NS 設定檔為 EmuLab 用來配置實驗機器的設
定檔；伺服器接收到 NS 設定檔後，會依 NS 設定檔所提供之資訊，將有線網路
節點配置為所要求的無線網路架構。NS 設定檔內存放之無線網路設定包含了： (1) 
實驗節點在無線環境中的空間配置、(2) 支援之無線網路介面及其網路卡實體層位
址 (MAC address)、(3) 無線裝置之訊號覆蓋範圍等等。待伺服器將實驗網路建置
37 
 
應用程式包含了本計畫研究人員開發之網路攻擊、防禦程式，如 Wireshark 等網
路封包分析工具、洪水攻擊 (Authentication Flood Attack) 等模組。使用者可於使
用者伺服器上取得所有攻防模組進行無線網路實驗。 
設定客戶端則負責處理控制客戶端傳送之無線網路設定和控制訊號，包含訊號覆
蓋表、無線網路卡實體層位址 (MAC) 等等，設定客戶端亦可於實驗中即時接收
使用者的動態設定，例如使用者在虛擬空間中移動無線裝置所造成之位置變化與
訊號覆蓋範圍更新。 
 
圖八：虛擬驅動程式介面由底層的虛擬天線和上層的虛擬驅動程式所組成 
 
虛擬無線界面提供仿真模擬真實的 Wi-Fi 和 WiMAX 無線網路界面卡之方
式，其設計主要可分為底層的虛擬天線 (virtual antenna) 和上層的虛擬驅動程式 
(virtual driver)。圖八為虛擬無線介面之架構設計。以下茲簡介各元件之設計與
功能。 
a、 虛擬驅動程式 (virtual driver) 
虛擬驅動程式可直接與實驗節點的作業系統核心溝通，負責網路實體層 
(Media Access Control Layer，簡稱 MAC Layer) 的所有控制以及封包的處
理工作。虛擬驅動程式接收到來自系統核心的資料後，會將資料以無線協
定表頭 (header) 進行封裝 (encapsulate)，使其成為無線網路封包後，再交
由虛擬天線進行無線訊號傳遞之模擬。當虛擬驅動程式接收到來自虛擬天
線的封包後，它先解封裝 (decapsulate) 802.3 封包表頭，再將資料轉傳給
作業系統核心及應用程式。本計畫實作了支援 Wi-Fi (IEEE 802.11協定) 和 
WiMAX (IEEE 802.16協定) 的虛擬驅動程式。Wi-Fi 驅動程式的實作參考 
Atheros 公司所生產的 Linux 無線網卡驅動程式修改而成，並重新實做了
硬體抽象層 (Hardware Abstraction Layer，簡稱為 HAL)以提供上層統一的
界面。WiMAX 虛擬驅動程式則為本計畫之研究人員遵循 IEEE 802.16 之
標準，自行開發一套適用於 Linux 作業系統的 WiMAX 虛擬驅動程式。 
b、 虛擬天線 
本計畫是基於有線網路測試平台而設計的無線網路模擬平台，因此原本的
實驗節點僅支援有線網路 (802.3) 之傳輸協定，因此本計畫透過在實驗節
點上運行「使用者資料包通訊協定」 (User Datagram Protocol，簡稱 UDP) 
39 
 
1. 無線網路封包分析工具： 
本計畫之研究人員移植知名的網路封包分析工具 Wireshark [6]至本計畫發展之
無線模擬平台上，讓使用者能夠藉由 SSH X forwarding 的方式將 Wireshark 的
畫面回傳至使用者的電腦端顯示。 Wireshark 能夠擷取無線網路裝置在空氣介
質中傳輸的封包，並協助使用者了解網路之行為或是驗證新的通訊協定。此
外，本計畫之開發人員亦修改了 Wireshark 的程式碼，使其能夠支援本計畫所
模擬之 802.16d 無線網路協定之判別，協助使用者發展 WiMAX 之通訊協定，
其畫面如圖十所示。 
 
圖十：Wireshark 協助使用者分析 WiMAX 網路封包 
 
2. 分散式阻斷服務攻擊模組 
本計畫之研究人員為了驗證 802.11 的無線存取點 (AP) 是否能夠抵擋分散式阻
斷服務攻擊，開發了洪水攻擊 (Authentication Flood Attack) 模組，企圖使 AP 
拒絕正常使用者的連線請求。圖十一-(a) 顯示在洪水攻擊開始前與 AP 連線的
節點數量 (也就是圖中的 Alice 和 Bob 兩個節點)，當 Eve 節點開始對 AP 發
動洪水攻擊後，Eve 會不斷的更換網路卡實體層位址，並偽裝成新的節點和 AP 
進行連線，企圖填滿 AP 的連線紀錄表，如圖十一-(b) 所示。當連線數量超過 
AP 所能容許的上限後，正常的使用者及無法和 AP 進行連線，形成分散式阻斷
服務攻擊。 
41 
 
 GUI：控制客戶端的圖形化設定工具原始碼 
 attack_monitor：本研究團隊開發之網路攻防模組原始碼 
 config_client：設定客戶端的原始碼 
 service_server：虛擬鏈結使用的代理伺服器原始碼 
 wifi_driver：Wi-Fi 虛擬驅動程式原始碼 
 wimax_driver：WiMAX 虛擬驅動程式原始碼 
 
2. 使用者手冊 
使用者手冊則提供完整的異質無線網路平台的使用教學，包含帳號申請與實驗操
作兩部份。 
帳號申請： 
為加強帳號之管理，本計劃採用 EmuLab 的建議，對帳號申請採用嚴格
控管的方式，以免本平台成為駭客網路攻擊之道具。申請新 Project 之使用者必
須為學術計畫或研究之主持人，且須經過本計劃研究團隊之審查方可建立新的
Project，並成為該 Project 之主持人 (Project Leader)；一般使用者只能選擇加入
現有之 Project，且須經由該 Project 的 Leader 之認證才能於該 Project下開始建
立網路實驗。 
實驗操作： 
實驗操作的教學分為以下幾個部份： 
 實驗環境建置 
 設定無線網路實驗拓樸 
 設定代理伺服器 (service server) 
 加入攻防模組和顯示模組 
 使用者介面操作 
 
本計畫之研發團隊已將上述之文件以維基百科的方式公開至本平台所架設之官方
網站上(http://www.swoon.cs.nctu.edu.tw、網站畫面如圖十二與圖十三所示)，期望藉由拋
磚引玉的方式吸引國內外之研究學者於本平台上開發新的安全機制和網路協定，搶得引
領安全技術之先機，並將此平台推廣給更多國內產學單位、尋求更多合作機會。 
 
43 
 
 行動平台的安全管理機制 
為兼顧行動平台的網路安全防護與資料安全儲存，本計畫針對本研究子項共研發
出兩套系統，分別為「安全雲端儲存系統」與「行動平台的入侵偵測系統」，以下將
分別針對此兩套系統提出說明： 
1. 安全雲端儲存系統 
本系統之設計與理論研究內容共分為「問題背景」、「應用情景」、「主要貢獻」、
「論文簡述」與「系統實做」等部分，以下將分別說明： 
 
圖十四：行動上網裝置可透過各種網路媒介使用 Internet 上的各種服務 
 
a. 問題背景 
由於高速網路與多樣隨身上網裝置的普及化，許多服務都透過網路來傳遞(如圖十四
所示)。除了有線網路的基礎建設完備與傳輸速率倍增，無線網路技術的完善與商業
化造就了一個無所不在的網路存取環境。另一方面，隨身上網裝置的多樣性也相輔
相成地使得社會大眾能隨時隨地上網。方便的網路環境，使得許多服務都透過網路
來傳遞。較為常見的有網路信箱，搜尋引擎，網路聊天室，網路文件編輯器，等等。
不僅僅是商務人士或年輕學子，一般民眾透過網路使用搜尋服務或者在咖啡店收發
email 已融入大都會的生活中。由於網路在許多文件中是由一個雲朵圖案來表示，
所以這些透過網路來傳遞的服務，在近幾年被稱為雲端服務。而提供這些服務的硬
體軟體與網路則整體被稱之為雲端(Cloud)。 
 
圖十五：分散式雲端架構 
45 
 
成一個雲端服務的基礎平台，在平台上可以建構網路信箱，網路相簿，網路社交平
台等多種雲端應用服務。 
 
c. 主要貢獻 
研究成果的主要貢獻可以從兩個角度來說明。從學術理論上來看，我們提供了一個
結合了容錯技術與公開金鑰加密系統的密碼學工具，這個工具能夠在一個非集中式
的儲存系統環境中被使用，使得系統同時具有資料可信賴與高度隱私性並且兼顧了
分散式的優點，另外針對系統中資料儲存的取回正確率上，我們亦提供了一個完整
的分析方式並建議了一組通用的系統參數。從儲存系統發展與應用上來看，我們強
調了資料隱私性在雲端儲存系統上的重要性與一個強度上的分野，早期網路儲存系
統的隱私性是建立在完全信任儲存伺服器的假設下，僅對登入的使用者進行身分認
證，我們則是強調資料隱私性的強度應該要能夠消除對儲存伺服器的信任的假設條
件。 
 
d. 論文簡述 
隨著高速網路與行動通訊的普及，雲端儲存服務已融入日常生活中，例如網路
信箱，網路相簿等。使用者可以隨時隨地遠端透過行動裝置存取資料。除了可信賴
的儲存機制之外，雲端儲存系統中的資料隱私性問題已日益被重視。將資料儲存在
雲端系統中意味著將資料放置在第三者的環境中。如何同時保障使用者資料隱私性
與儲存系統功能性是我們研究的主題。我們考慮一個沒有中央控制單位的雲端儲存
系統，結合了公開金鑰加密系統與容錯編碼技術來設計一個同時具有高度隱私性與
容錯能力的雲端儲存系統。我們的儲存系統保障了使用者資料的隱私性，即使是所
有的儲存伺服器都被攻擊者控制，也無法破壞。系統同時具有容錯能力，當儲存系
統中的儲存伺服器無預警離線或關閉，系統服務仍能正常運作。為了非集中式的系
統架構，我們的公開金鑰加密系統經過特殊設計，使得編碼的程序與解密的程序可
以平行地在各伺服器中運作，無須中央控制單位的協助。整體儲存系統除了基本的
容錯能例外，使用者可以享有高度的資料隱私安全。 
我們的系統包含了三種身分，儲存伺服器與金鑰管理伺服器形成雲端系統，使
用者則是可以存取雲端系統。另外我們設定儲存伺服器的數量為 n，以及金鑰管理
系統的數量為 m。系統概況請參考圖十七。 
47 
 
散布的程序 v 次。第二步，每個儲存伺服器針對每筆收到的密文資料隨機挑選一個
係數並且對所有收到的密文資料透過選定的係數進行編碼。最後在單一儲存伺服器
中儲存的資料為一個編碼後的結果與選定的所有係數。資料取回流程有兩大步驟。
第一步(如圖十九所示)，使用者先向金鑰儲存伺服器提出要求，每個金鑰管理伺服
器再隨機向 u 台儲存伺服器詢問資料。第二步(如圖二十所示)，當儲存伺服器回傳
資料給金鑰管理伺服器後，金鑰管理伺服器使用使用者所給予的部分解密金鑰進行
一個部分解密程序， 並將解密結果與係數一併回傳給使用者。使用者在收集來自
於超過 t個金鑰管理伺服器的回覆之後，即可合併這些回傳值得到編碼區段，再透
過解碼程序得到原始資料。 
 
圖十九：資料取回第一步驟之流程圖 
 
 
圖二十：資料取回第二步驟之流程圖 
 
由於資料儲存與取回都使用了隨機程序，使用者在儲存資料進入系統之後，正
確取回資料的事件有一個發生的機率。我們將儲存系統表示為一個隨機圖形，透過
隨機圖學中既有的定理，我們分析出這個正確取回資料事件的發生機率值，並提供
一個適當的 u值與 v值設定，以保障足夠好的資料正確取回機率。這個設定表示如
下: 
49 
 
檔案及資料，我們可以利用 web browser 來查看目前有哪些檔案已經在遠端的
儲存伺服器上並可知道有幾台儲存伺服器已經提供服務。 
 
 
圖二十一：安全分散式儲存系統架構圖 
 
使用者功能:  
使用者可用的功能分別為登入、登出、上傳和下載這四個功能。 
(a) 登入：在登入之前，使用者已經在 database裡註冊了一個帳號，所以我們
只頇在網頁上輸入我們的帳號跟密碼，經過系統確認後，網頁上只
會顯示之前上傳的資料，不會走任何情況而使得使用者可以存取到
別人的檔案。 
(b) 登出：使用者想要離開此系統，則會由手機發出一個離開的訊息，緊接控
制端伺服器會將目前線上清單裡有關於此使用者資訊一一消除。 
(c) 上傳：在上傳之前 Android 手機會將檔名透過一個 hash function 來產生一
個 generator，緊接著利用我們所產生的 generator 將資料以 pairing 來
加密，然後把之前產生的 public key跟我們加密後的資料一併上傳給
控制端伺服器，另外使用者在上傳時為了避免智慧型手機網路無法
負荷上傳，所以我們只需要把加密過後的資料，上傳給控制端伺服
器，由控制端伺服器幫忙將一份資料傳給數個儲存伺服器。(如圖二
十二所示) 
51 
 
能讓使用者一目了然的知道哪些伺服器是有提供服務的。當
storage 關閉時會發出一個關閉的訊號，使得控制端伺服器能從
storage server list裡做修改，萬一儲存伺服器因為某些不確定的因
素而導致不正常關閉，則當控制端伺服器在送訊時給儲存伺服器
時，會發現對方無回應，則我們控制端伺服器也會將沒回應的儲
存伺服器從 storage server list 中清除。 
 (c) 金鑰伺服器列表管理: 當一個金鑰伺服器啟動完成的時候，會發出一個
訊息給控制端伺服器註冊登記，然後我們在瀏覽網頁時除了看得
到name、port、IP外，還提供一項 information讓使用者能知道哪些
伺服器是可被信任的。 
 
軟體開發:  
在系統實作上，首先需要大量的伺服器，所以我們先將大量的伺服器都實作在
同一台機器上面，依據port的不同區分不同的伺服器，另外我們會依據不同資
料夾來區分不同儲存伺服器的儲存空間，所以即使在同一個機器上，我們仍然
有區分出不同的伺服器。在開發環境上，我們所使用的機器為core i7，硬碟容
量為500GB，Operating system為Window vista 的桌上型電腦，日後會將機器逐
步的分散出去，使用者端我們使用的手機為HTC Magic， android SDK的版本
為1.5，另外我們所使用的開發環境為java的JDK 1.6，開發軟體為eclipse 3.4.0，
並使用套件JPBC 1.0.0。圖二十四、圖二十五、圖二十六以及圖二十七為我們
所實作出的系統執行時的相關畫面。 
 
圖二十四：安全雲端儲存系統使用者介面 – 資料原始檔以及功能清單 
53 
 
2. 行動平台的入侵偵測系統 
本系統之研究內容共分為「系統設計」與「系統實做」兩部分，以下將分別針對
這兩部分進行說明： 
 
系統設計 
在Android系統上，目前限定所有應用程式都必須以JAVA語言來撰寫，再以Dalvik Virtual 
Machine 來轉換成DX bytecode，因此程式開發和JAVA ME類似，應用程式的介面部分
則是由XML程式來設計。簡單來說，即是系統由LINUX來執行，應用程式則透過JAVA
語言來開發以及執行。要在Android上執行以C語言所構成的程式，有兩種方法： 
(1) 利用Android NDK，在JAVA應用程式中去呼叫以C語言所構成的Library以執行我們
要的功能。  
(2) 將C語言寫成的程式直接編譯成執行檔，然後再從JAVA應用程式中，去直接執行該
執行檔。  
這裡我們移植 Snort的方法，即是利用方法二，以Cross-Compiler將 Snort編譯成可以在
Android上執行的版本，並將其放進Android file system中的/data資料夾中，再利用前端
的 JAVA應用程式介面，讓我們直接從手機中去執行我們的 Snort 執行檔。這個方法的
好處是程式的功能部分可以像以前在 Linux 上開發一樣，在 JAVA應用程式上只要改寫
如何去設置程式執行參數即可(如圖二十八所示)。 
 
圖二十八： 入侵偵測系統架構圖 
 
在這裡Snort為一個statically compiled的執行檔，所以將它放入Android的file system中
時，便是一個可以獨立執行之指令，但是我們並無法直接在手機螢幕上存取file system
中的執行檔，所以我們需要一個前端控制系統，利用這個前端控制系統去執行放在/data
中的Snort執行檔，並且將回傳的結果存起來，再利用前端控制程式去存取傳回之結果以
顯示在手機螢幕上。前端控制程式的組成，如圖二十九所示，主要的source file共有以下
三個。      
- snort_frontend.java：前端程式的主要進入畫面，定義各元件以及執行動作 
- Api.java：包含Snort執行所需的函數 
- openfile.java：提供記錄檔(Log file)相關功能。  
55 
 
I. 先把手機用fastboot模式開機(同時按著電源以及返回鍵開機，然後就會看到
三個機器人在玩滑板)。fastboot執行檔可以在網路上下載，但是如果找不到
fastboot執行檔的話，可以自行下載Android source code，以進行編譯，編譯
完成之後就會有fastboot執行檔可以使用。(如果電腦上已經編譯過andorid 
source code則可以在[source code directory]/out/host/[安裝平臺]/bin裡面找到
fastboot檔案)。  
II. 在電腦上打入下列指令以便讓手機讀取電腦中的image以進行開機。要先將
當前資料夾移至放置fastboot指令之資料夾，且也要把還原備份用的image放
到同一資料夾內。  
$ ./fastboot boot  
recovery-RA-magic-v1.2.3H.img 
這裡recovery-RA-XXX.img的版本沒有太大的問題，只要可以備份就行了。 
III. 開啟以後可以看到一個命令選單，選擇Nandorid v2.x backup即可備份系統，
備份完可以到sdcard底下去看Nandroid資料夾裡面是否有儲存系統資料，以
檢查是否正確備份完成。在之後進行Rooting動作若覺得Rooting失敗，即可
利用一樣的方法進入recovery image，選取restore恢復至原本內建的Android 
OS即可。  
再來就要開始進行Rooting，原本要進行Rooting需要相當繁瑣的指令，但是現在已
經可以利用Recovery image去進行覆寫了，將前面有提到的CyanogenMod下載下來
解壓縮，可以看到三個image，其中的HTC_ADP_1.6_DRC83_rooted_base.zip以及 
update-cm-4.2.4-signed.zip即是我們要進行複寫的image，利用fastboot進入Recovery 
image之後，選擇覆寫的選項，依序將HTC_ADP_1.6_DRC83_rooted_base.zip以及
update-cm-4.2.4-signed.zip和bc-4.xxxx.zip覆寫，之後約等待10分鐘，即可完成Rooting
之動作。如果在Rooting詳細步驟上有所疑問可以參考CyanogenMod[11]的網站中有
詳細的指引。 
(2) 安裝 Cross-compiler  
這裡我們將Cross-Compiler安裝在Ubuntu 8.10上，並安裝CodeSourcery所開發的要
Sourcery G++ Lite做為我們的Cross-Compiler，安裝檔可由[4]的網址取得。下載完畢
之後點擊，以將其解壓縮並且安裝，建議將Cross-compiler所安裝的資料夾設為指令
預設搜尋路徑，這樣在之後進行Cross-compilation時會方便許多。 
 
(二) 交叉編譯 Snort 至 Android 上 
這裡為避免出現未知問題，首先我們利用編譯BusyBox以測詴Cross-Compiler是否可
以正常編譯出可在Android上執行之程式，再來利用編譯Tcpdump檢查是否有正確編
譯Libpcap，最後則是進行Snort的Cross-Compilation工作。利用此種漸進式的編譯方
法，在出現執行檔無法正常執行的問題時，即可判斷是哪個步驟上出問題，以快速
找出問題之解決方法，並可判斷出Library與執行檔相容性之問題。所以此種方法不
只可以用來編譯Snort至Android上，也可編譯架構類似的程式至Android上執行。 
57 
 
$make install 
最後則是編譯Snort，這裡我們對Snort1.7版本進行compile，將其compile成static 
linking之執行檔。之所以要使用Snort1.7的版本，是因為1.8.6之後的版本即使給定
LDFLAG=”-static”仍然會compile成dynamically linking之執行檔，此為1.8.6之後的
Makefile都會有的問題，dynamically linking之執行檔放到手機中會產生./snort not 
found的執行結果。這裡若編譯出來之結果仍然無法執行，請檢查Makefile中
LDFLAG是否有正確改成”-static”然後再進行compile，因為有時候會有在configure
的時候給定LDFLAG但是Makefile中仍然沒有指定成功的情形，如果有發生這種情
況，請自行打開Makefile進行參數修改。 
由於是編譯Snort1.7的版本，所以可能會發生在compile過程中，出現缺少bpf.h不存
在的情形，這時候要利用 
$ln –sf 
/usr/local/include/pcap-bpf.h 
 /usr/local/include/net/bpf.h  
之指令進行連結以解決此問題。此為標頭檔更名造成之問題。所以我們這裡建立一
個連結讓電腦在編譯時可以找到他需要的標頭檔。然後輸入以下指令以進行
Configure 
$CC=arm-none-linux-gnueabi-gcc  
AR=arm-none-linux-gnueabi-ar  
RANLIB=arm-none-linux-gnueabi-ranlib ./config 
ure --host=arm-linux --disable-shared  
--prefix=/TARGET LDFLAGS="-static" 
CXX=arm-none-linux-gnueabi-g++  
--with-libpcap-libraries=/TARGET /lib/ 
 --with-libpcre-libraries=/TARGET /lib/  
除了之前給定的參數之外，還要另外給定libpcap以及libpcre的位置好讓Snort在進行
linking時知道要去哪裡找libraries。這裡的目的資料夾即為上面libpcap和libpcre產生
的libraries的目錄。  
最後生成的Snort執行檔可以利用Linux上的file指令去檢查其是否為statically 
compiled。  
在確認了執行檔有正確編譯之後，將執行檔放入Android裡面的/data/資料夾底下，
即可執行。 
#adb push 
Snort/data 
#adb shell 
#cd /data 
#./snort –v 
59 
 
一的檢測結果。在記憶體的使用上，Snort前端控制程式的記憶體耗用量和一般JAVA
應用程式沒有太大的差異，只有在/data/snort 也就是利用root去執行Snort的部分會
多耗用約3352KB的記憶體，預計在之後會再進行更加詳細的記憶體耗用和signature
數量關係之測試，這裡我們只有先觀察以上述之單一signature進行檢測時之記憶體
耗用量。 
 
圖三十一：封包檢查結果圖 
 
再來就是在我們進行多次的封包捕捉動作時，即使在不特別指定封包類別的情況
下，且使用上網或者下載應用程式的功能時，封包也不會有漏掉的情況發生，實驗
結果如圖三十二所示。 
 
 
圖三十二：snort 擷取封包結果圖 
61 
 
 
在待機時的測詴由於擔心電量消耗太少，所以將實驗時間延長至1小時，另外上網
時的動作為找數部影片來進行播放，以增加電量消耗的明顯程度，經過五次測詴後
的結果平均即如上表中所示。從實驗結果可知，在持續播放影片20分鐘並且開啟
Snort進行監控的情況下，多消耗的電量也不到1%，可以知道Snort並不會對電源消
耗帶來太大的負擔。 
 
63 
 
Case 2： 輸入一個含有 OLE 漏洞以及內嵌動態取得記憶體位址之 shellcode 的微軟 xls
檔案，其結果為可疑檔案。並且建議不要開啟。 
  
圖三十六：輸入一個含有 OLE 漏洞以及 call/pop 的 xls 檔案之結果 
 
 
圖三十七：輸入一個含有 OLE 漏洞以及 call/pop 的 xls 檔案之報告 
 
 
 
 
65 
 
 
圖四十：檢測結果輸出畫面 
67 
 
Case 5： 輸入一個包含系統檔案路徑以及網路連結之檔案，本系統將會提醒使用者該
檔案具有這些可疑字串，建議不要開啟。 
 
 
圖四十三：輸入含可疑字串的 html 檔案之結果 
 
 
圖四十四：輸入含可疑字串的 html 檔案之報告 
 
 
69 
 
Case 7： 輸入一個帶有未知殼的執行檔，本開發系統利用靜態分析來辨識該檔案為加
殼檔案。 
 
 
圖四十七：輸入一個帶有未知殼的執行檔之結果 
 
 
圖四十八：輸入一個帶有未知殼的執行檔之報告 
 
71 
 
 程式漏洞檢測系統 
Catchconv 以 Unix-Like 作業系統為系統平台，利用 Valgrind 為 instrumented 
framework，STP（Simple Theorem Prover）為 Query Solver，以及本計畫所開發之迴
圈偵測程式為最佳化工具，所開發而成的 Gray-Box Testing 系統，不需要程式原始
碼，只要有程式執行檔跟測試輸入，變能夠利用程式執行時期的資訊，產生觸發程
式漏洞的測試資料。 
 
圖五十一：系統架構圖  
 
Catchconv 在程式檢測上可以大致分為三個步驟：監控受測程式的執行過程，尋找可
能發生的程式漏洞、偵測迴圈位置，省略重複的 Query和程式區塊、呼叫 STP 產生
Query 的答案，進而發掘隱藏的程式漏洞，並自動產生測試資料。 
 
圖五十二：系統執行流程圖 
73 
 
 
圖五十五：迴圈偵測機制  
 
Catchconv 利用 Loop Detection 的結果，得知可被省略的 Query清單，接下來將之前監
控受測程式執行過程所產生的 Query，利用 STP去尋找 Query 的解答，以便利用得到
的解答去發掘潛在的程式漏洞，以及產生後續的測試資料。 
 
圖五十六：取得可被省略的 QUERY清單  
利用 STP求得的解答，Catchconv尋找受測程式中潛在的程式漏洞，同時輸出可引發
此程式漏洞的測試資料；Catchonv也利用 STP 的解答，產生更進一步的測試輸入，將
受測程式導向尚未探索過的程式區塊，以尋找受測程式其他部分所含有的程式漏洞。 
75 
 
使用空白密碼登入 Catchconv 的 CVS 系統，接下來利用指令： 
“cvs -z3 -d:pserver:anonymous@catchconv.cvs.sourceforge.net:/cvsroot/catchconv co -P 
valgrind-catchconv” 
下載最新版本的 Catchconv；  
 
圖五十九：下載最新版本的 Catchconv 
 
CVS系統將會下載Catchconv所有的程式碼，根據網路速度及網路狀態需要花費不定
的時間，通常約在十分鐘到三十分鐘左右；  
 
圖六十：CVS 系統將會下載 Catchconv所有的程式碼  
 
完成 Catchconv 的下載後，使用者可利用 Catchconv 的安裝程式進行安裝，使用者可
利用指令： 
“cd valgrind-catchconv/” 
切換到 Catchconv 的程式碼目錄中，接下來利用指令： 
“chmod u+x bootstrap” 
設定 Catchconv 的安裝程式具有可以被使用者執行的權限，然後利用以下指令： 
“./bootstrap 安裝目錄” 
 安裝 Catchconv 到想要的目錄下；如圖六十一安裝目錄為/vgcc。 
 
77 
 
利用Catchconv進行程式檢測，使用者需要先提供一個測試輸入，並且確定受測程式
能夠執行，使用者可以利用指令： 
“docatchconv 測試輸入 受測程式執行命令” 
進行檢測動作；圖六十四 檢測/hello這支程式，測試輸入為 test.txt，執行/hello 的命
令為/hello test.txt。 
 
圖六十四：進行檢測動作 
 
Catchconv會在安裝目錄下的 tests 資料夾內，建立新的目錄以便存放所有檢測相關的
資料，Catchconv 執行程式檢測的過程中，也會將檢測的狀態和相關資訊上傳到
Catchconv 的資料庫中，以便進行 Catchconv 的效能分析，作為 Catchonv 開發的參
考；圖六十五 錯誤! 找不到參照來源。提供了使用者 e-mail、受測程式、測試資料、等
相關的檢測資訊。 
 
圖六十五：提供使用者 e-mail、受測程式、測試資料、等相關的檢測資訊。 
 
Catchconv 檢測的過程中，會產生很多 Constraint Query，並且利用 STP嘗試求得
Query 的解答；圖六十六為可解的 Constraint Query，STP花費 0.004秒求得此 Query
的解答。 
79 
 
 
圖六十八：測試資料為 12-2-test.txt，程式漏洞種類為可疑的系統呼叫參數 
 
在儲存檢測資料的資料夾中，可以看到目前產生的所有測試資料以及檢測相關資訊，
其下的 results/errors 資料夾內則是儲存了可以引發程式漏洞的測試輸入，見下圖。 
 
圖六十九：可以看到目前產生的所有測試資料以及檢測相關資訊 
 
使用者可以利用 cat指令觀察所產生的測試輸入，因採用 Fuzz Testing 的緣故，測試輸
入產生了很多不可印的字元及符號；見圖七十。 
81 
 
XXX QUERY(JUMPCOND6951e87837c44 ); % TYPE Coverage XXX The destAddr = 0x5BBC7D7 ; 
XXX QUERY(JUMPCOND6943e87855c45 ); % TYPE Coverage XXX The destAddr = 0x819A1B8 ; 
XXX QUERY(JUMPCOND6951e87858c46 ); % TYPE Coverage XXX The destAddr = 0x5BBC7D7 ; 
XXX QUERY(JUMPCOND6943e87876c47 ); % TYPE Coverage XXX The destAddr = 0x819A1B8 ; 
XXX QUERY(JUMPCOND6951e87879c48 ); % TYPE Coverage XXX The destAddr = 0x5BBC7D7 ; 
XXX QUERY(JUMPCOND6943e87897c49 ); % TYPE Coverage XXX The destAddr = 0x819A1B8 ; 
XXX QUERY(JUMPCOND6951e87900c50 ); % TYPE Coverage XXX The destAddr = 0x5BBC7D7 ; 
XXX QUERY(JUMPCOND6943e87918c51 ); % TYPE Coverage XXX The destAddr = 0x819A1B8 ; 
XXX QUERY(JUMPCOND6951e87921c52 ); % TYPE Coverage XXX The destAddr = 0x5BBC7D7 ; 
XXX QUERY(JUMPCOND6943e87939c53 ); % TYPE Coverage XXX The destAddr = 0x819A1B8 ; 
XXX QUERY(JUMPCOND6951e87942c54 ); % TYPE Coverage XXX The destAddr = 0x5BBC7D7 ; 
XXX QUERY(JUMPCOND6943e87960c55 ); % TYPE Coverage XXX The destAddr = 0x819A1B8 ; 
XXX QUERY(JUMPCOND6951e87963c56 ); % TYPE Coverage XXX The destAddr = 0x5BBC7D7 ; 
XXX QUERY(JUMPCOND6943e87981c57 ); % TYPE Coverage XXX The destAddr = 0x819A1B8 ; 
XXX QUERY(JUMPCOND6951e87984c58 ); % TYPE Coverage XXX The destAddr = 0x5BBC7D7 ; 
XXX QUERY(JUMPCOND6943e88002c59 ); % TYPE Coverage XXX The destAddr = 0x819A1B8 ; 
XXX QUERY( NOT JUMPCOND6951e88005c60 ); % TYPE Coverage XXX The destAddr = 0x5BBC7D7 ; 
 
利用 Loop Detection掃描分析條件分支的 Query，提供重複的程式區塊資訊，儲存於
QUERY 檔案中；如下是以上面的 Loop Detection 的輸入資料，偵測到位於程式區塊
6951 的條件分支，當其目的位置為 0x5BBC7D7 時，是由迴圈所產生的條件分支。 
 
0x5BBC7D7 1 
1 2 
JUMPCOND6951e87795c40 
NOT JUMPCOND6951e88005c60 
 
Catchconv 找到的程式漏洞將會存放於 results/errors 資料夾內，包含可引發此漏洞的
測試輸入，使用者可利用 tree指令列出 results/errors 資料夾內包含的所有漏洞清單，
得知受測程式的檢測結果。 
. 
|-- SyscallParam 
|   |-- 1679461208 
|   |   |-- test.txt 
|   |   |-- test.txt-memcheck 
|   |   |-- test.txt-stderr 
|   |   `-- test.txt-stdout 
|   |-- 1793740102 
|   |   |-- test.txt 
83 
 
|-- test.txt 
|-- test.txt-memcheck 
|-- test.txt-stderr 
`-- test.txt-stdout 
 
12 directories, 41 files 
 
為了方便評量 Catchconv 的效能及準確度，需要 Catchconv 執行檢測時的相關狀態和
資訊，Catchconv 在檢測過程中，會自動上除這些狀態和資訊到資料庫系統中，
Catchconv 的開發人員可以連上 http://www.metafuzz.com去檢閱、分析這些資訊與狀
態，提供 Catchconv最佳化的可能性和效能分析與評量。 
 
圖七十二：Catchconv 資料庫系統 
85 
 
 行動平台的安全管理機制 
 
行動平台的安全機制 – 入侵偵測系統 
 為目前已知文獻中首度將入侵偵測系統(IDS)移植至 Android 手機，可加強
行動裝置無線上網的安全性。 
 前端程式和後端執行檔為獨立模組化設計，前後端系統易於抽換或獨立升
級，未來擴充彈性大。 
 支援入侵行為特徵資料庫的擴增，使用者可自行擴充入侵行為特徵以增強其
安全性。 
 電源消耗量低，低耗電量有利於常駐使用。 
 記憶體使用量依據載入之特徵資料庫大小決定，可依行動裝置之硬體條件彈
性決定特徵載入數量。 
 播放網路影音串流之電力消耗 (見表十) 
 
表十：播放網路影音串流之電力消耗 
 
 待機狀態之電力消耗 (見表十一) 
 
表十一：待機狀態之電力消耗 
 
行動平台的安全機制 – 安全雲端儲存系統 
 
(1) 系統理論設計部份 
研究成果的主要貢獻可以從兩個角度來說明。從學術理論上來看，我們提供了一
個結合了容錯技術與公開金鑰加密系統的密碼學工具，這個工具能夠在一個非集
中式的儲存系統環境中被使用，使得系統同時具有資料可信賴與高度隱私性並且
兼顧了分散式的優點，另外針對系統中資料儲存的取回正確率上，我們亦提供了
一個完整的分析方式並建議了一組通用的系統參數。 
從儲存系統發展與應用上來看，我們強調了資料隱私性在雲端儲存系統上的重要
性與一個強度上的分野，早期網路儲存系統的隱私性是建立在完全信任儲存伺服
器的假設下，僅對登入的使用者進行身分認證，我們則是強調資料隱私性的強度
應該要能夠消除對儲存伺服器的信任的假設條件。 
 
 
87 
 
 程式漏洞檢測系統 
驗證程式的正確性及安全性相當重要，但卻是不容易達到的目標，目前的檢測方法可
區分為三類：White-Box Testing、Black-Box Testing以及 Gray-Box Testing，其中
Gray-Box Testing則整合了 White-Box Testing及 Black-Box Testing的優點，是現今最
有效的檢測方式。而本系統即為 Gray-Box Testing，具體的系統優勢如下： 
 
 本系統屬 Gray-Box Test，為近年最受重視的檢測技術之ㄧ。 
 不需程式原始碼即可進行測試，對於無法取得原始碼的程式亦能進行檢測。 
 將 Fuzz testing之測試資料輸入被檢測程式，直接觀察其行為是否正常，不
用花費時間分析複雜的原始碼。 
 合併執行時期取得之資訊，進一步了解程式內部運作，藉此產生有用的測試
資料，改進單純 Fuzz testing無法輕易涵蓋所有執行路徑的問題。 
 自動產生漏洞測試資料，可幫助程式人員找出漏洞所在。 
 迴圈處理機制可跳過重複執行的程式迴圈，將檢測能量集中在不重複的程式
區段。 
 
89 
 
洞，幫助程式設計師快速地發現程式中的 bug，增進軟體的可靠度及開發效率。也希望能
夠有更多的開發人員能夠加入 Catchconv 的開發計畫，使 Catchconv 在使用介面、自動
化、核心最佳化以及支援的程式漏洞種類上，能夠更加完善。 
綜合以上所述，本計畫除了提出一套具有多面向的「行動平台安全檢測方案」之外，
亦已與 UC Berkeley 的相關研究團隊建立長期而穩定的交流研究關係；本計畫亦將部分研
究成果於OpenFoundry上建立專案並開放原始碼，可望能將安全技術研發與自由軟體社群
連結，並引入自由軟體社群的研發能量以吸引產業界投入的意願、厚植國內資訊安全技
術的研發潛力。 
 
91 
 
[18] R. Canetti and S. Goldwasser, “An Efficient �threshold Public Key Cryptosystem Secure against Adaptive 
Chosen Ciphertext At- tack,” Proc. Int’l Conf. Theory and Application of Cryptographic Techniques, pp. 90-106, 
1999. 
[19] D. Boneh, X. Boyen, and S. Halevi, “Chosen Ciphertext Secure Public Key Threshold Encryption without 
Random Oracles,” Proc. Topics in Cryptology (CT-RSA), pp. 226-243, 2006. 
[20] P.S.L.M. Barreto, B. Lynn, and M. Scott, “Efficient Implementa- tion of Pairing-Based Cryptosystems,” J. 
Cryptology, vol. 17, no. 4, pp. 321-334, 2004. 
[21] V.S. Miller, “The Weil Pairing, and Its Efficient Calculation,” J. Cryptology, vol. 17, no. 4, pp. 235-261, 2004. 
[22] Android Developers ,Available 2010年3月at http://developer.android.com/index.html.  
[23] Java.sun.com , Available 2010年3月at http://java.sun.com/.  
[24] Eclipse.org home , Available 2010年3月at http://www.eclipse.org/.  
[25] Erasure code, Available 2010年3月at http://en.wikipedia.org/wiki/Erasure_code.  
[26] Cloud computing , Available 2010年3月at http://en.wikipedia.org/wiki/Cloud_computing  
[27] Java Pairing-Based Cryptography Library , Available 2010年3月at 
http://gas.dia.unisa.it/projects/jpbc/index.html  
[28] Hsiao-Ying Lin, Wen-Guey Tzeng, "A Secure Decentralized Erasure Code for Distributed Networked Storage," 
IEEE Transactions on Parallel and Distributed Systems, 26 Jan. 2010. IEEE computer Society Digital Library.  
[29] 佘志龍、陳昱勛、鄭名傑、陳小鳳、郭秩均，Google Android SDK 開發範例大全，第一版，2009年4月出
版。  
[30] Android - An Open Handset Alliance Project (2010/3/11) , 
http://developer.android.com/guide/basics/what-is-android.html  
[31] Android Open Source Project (2010/3/11), http://source.android.com/  
[32] Eclipse Integrated Development Environment (2010/3/11), http://www.eclipse.org/  
[33] Codesourcery(2010/3/11), http://www.codesourcery.com/sgpp/lite/arm/portal/subscription?@template=lite  
[34] Android Market(2010/3/11), http://www.android.com/market/  
[35] Android中文資源站(2010/3/11) http://android.cool3c.com/  
[36] Android internals(2010/3/11), http://groups.google.com/group/android-internals?pli=1  
[37] Snort(2010/3/11), http://www.snort.org/  
[38] XDA developers(2010/3/11) http://forum.xda-developers.com/index.php  
[39] INSECURE.ORG, “Top 100 network security tools,”2006.[Online].Available:(2010/3/11) http://sectools.org/  
[40] CyanogenMod(2010/3/11) http://www.cyanogenmod.com/  
[41] CyanogenModWiki(2010/3/11) 
http://wiki.cyanogenmod.com/index.php/Full_Update_Guide_-_G1/Dream/Magic32A_Firmware_to_Cyanogen
Mod  
[42] System and Internet Infrastructure Security Lab: Understanding Android's Security Framework  
[43] Leonid Batyuk, Aubrey-Derrick Schmidt, Hans-Gunther Schmidt, Ahmet Ahmet Çamtepe, Sahin Albayrak: 
Developing and Benchmarking Native Linux Applications on Android. MOBILWARE 2009:381-392  
[44] A.-D. Schmidt, H.-G. Schmidt, J. Clausen, A. Camtepe, and S. Albayrak: Enhancing Security of Linux-based 
Android Devices. In: Proceedings of 15th International Linux Kongress. Lehman Verlag, Hamburg (2008)  
  
 
 
行動無線網路安全與惡意程式行為分析
跨國產學合作計畫(國際合作) 
 
 
 
 
 
出國報告書 
 
 
 
 
 
 
 
 
指導單位：行政院國家科學委員會 
撰寫人員：陳毅睿 
 
 
 
 
 
 
日期：中華民國 99 年 5 月 14 日
 
  
－ April/29： 搭機返台 
 
4、行程之內容重點摘述 
    此次行程的時間共計兩個月，目的為學術交流與技術合作，U. C.  
Berkeley 主要由 Prof. Tygar 負責帶領，所有在 U. C. Berkeley 的 iCast
台灣學生每星期固定與 Prof.Tygar 共同會面一次，回報各別的研究進
度與系統發展進度，了解進行中所遇到的種種困難並協助我們克服，
提供必要的軟硬體幫助。另外我們一週也與台灣方便的老師共同使用
網路電話或電子信箱聯絡並回報狀況一次。學術研究方面重點摘述如
下： 
本人與 U.C. Berkeley 教授 Prof. Tygar 固定一週會面一次討論研究內
容，時間約為一小時，並在本行程中完成一篇論文的改寫以及一篇論
文的草稿預計於近期完成並進行投稿。Prof. Tygar 並提供一個辦公室
的位置以利我研究以及與其他學生交流。 
5、結論與建議 
1. 績效評估 
－ 學術研究方面，與 U.C. Berkeley 教授合作即有收穫，並合寫論
文，將於短期內進行投稿。 
－ 此行加深對計畫總體內涵與參與研究人員(教授，學生)、顧問、
辦公室成員之瞭解，對後續計畫之進行頗有助益。 
－ 瞭解美國研究生在美研究的方式與生活文化，並學習其研究方
法，對後續研究與系統發展有深遠影響。  
2. 結論與建議 
    此行圓滿達成與 U.C. Berkeley 教授在學術研究上合作撰寫論
文。我認為在臺灣校內之研究硬體環境普遍並不比 U.C. Berkeley 差
  
 
 
行動無線網路安全與惡意程式行為分析
跨國產學合作計畫(國際合作) 
 
 
出國報告書 
 
指導單位：行政院國家科學委員會 
撰寫人員：彭博群 
 
 
日期：中華民國 99 年 05 月 14 日
  
 
            的程式。 
3/21 - 3/27 柏克萊春假,校園關閉,此週停止與Prof.Tygar meeting。 
3/28 - 4/3  繼續撰寫研究主題需要之程式,Prof.Tygar提供修改的意見。 
4/4  - 4/17 程式接近完成,與Pro.Tygar討論發表論文的可能性,並且討論細節。 
4/18 –4/25 與Pro.Tygar決定論文的方向,並且對於研究的程式作除錯。 
4/26 –4/29 因時間不夠,決定論文回台之後繼續研究,並且開始整頓回台灣。 
 
二、 與會心得 
 
  這次學術交流除了能夠與世界頂尖的學者面對面作討論,親自體驗大師的風範
以及感受到他們對於學術研究的熱情。更難得可貴的是,與柏克萊的學生以及不同國
籍的研究員進行交流以及討論。因為與學生以及研究員的交流,能夠提供我們不同的
角度去看待研究的內容。除此之外,我們還可以像朋友般的閒聊,一起去吃飯,逛校
園。也因次,我們在不同國籍文化的交流下,更碰撞出不同的火花。例如柏克萊的學
生 Shaan,分享美國大學生選擇科系的考量,以及評論近日加州政府要增加大學學費
的感想。西班牙裔的研究員 Dr.Martin 分享歐洲就讀博士班的心得。華裔研究員 Yan
分享他目前所做的研究,以及向我們請教一些台灣中文俚語(slang)的問題,我們也
向他請教美國當地一些俚語的用法,與我們學校學習的英文完全不同,因此在語言方
面也得到的許多心得。 
 
三、考察參觀活動 
   
  除了柏克萊的校園巡禮,華裔研究員 Yan 熱心的帶我們前往附近的舊金山市區
參訪,以及參觀著名的金門大橋(Goldengate bridge)。 
  
  
 
五、攜回資料名稱及內容 
 
無。 
 
六、其他 
 
無。 
  
國科會補助專題研究計畫項下赴國外(或大陸地區)出差或
研習心得報告 
                                  
一、國外(大陸)研究過程 
    此研究開始於 2010/9/1，結束於 2010/10/31，為期兩個月，當
我們到達 San Francisco，安頓好住宿與基本生活需求後，便開始與
UC Berkeley 聯絡上。我們在 Berkeley 主要的接觸對象為 TRUST 
center 執行主任與 computer science department 的 Doug Tygar 教
授。 
    在 TRUST center 這邊安排了我們的座位，我們大部分時間都在
那邊工作，我們也跟 TRUST center 的 Executive Director- Larry 
Rohrbough 針對我們的研究議題做了報告，他對我們的研究很感興
趣，互相討論交流意見。從整個回應來看，我們所做的東西是受到認
同的，也讓我們更有信心繼續做下去。 
   另外我們每週四會參加 TRUST 所舉辦的 seminar，會中邀請業界
的專家或學界的教授演講，演講的主題以資訊安全為主要方向。在
seminar 當中，我們吸取到目前國外主流資安技術發展情況，得到一
些新的研究想法，同時也加強了英文能力。 
    關於研究主題的部份，我的題目為” New Threat comes with 
DNSSEC”，就這個題目在去美國之前我們已經有初步的構想，而在與
Prof. Tygar 討論之後，他也覺得這個題目有實作的價值，並且他建
議說這個內容並不複雜，如果要發論文的話，動作必須要快，避免其
他人先做出了類似的東西，這樣我們就沒辦法公佈。在美國的大部分
時間，我就是針對這個題目研究、寫程式、做實驗等等。而在台灣的
實驗室有另兩位碩士生協助此研究，我也經常透過網路與台灣討論，
並請求部份的實作協助。大約是每一個多禮拜，我會跟 Prof. Tygar
開一次會議，討論階段性的研究成果。而在兩個月之後，我們已完成
所有程式與實驗，並完成論文初稿。 
 
  
 
距離國際化還有段距離；建議國內大學研究所以上課程盡量以英
語授課，並多聘請外國籍教授，多廣納外國籍學生，打造一個國
際化的環境。 
 
四、其他 
本次的研習相當有收穫，不但加強了英文，拓展了人脈與視
野，並做了許多研究，完成一篇論文。如果能持續舉辦的話，將
能栽培更多學生，培植國內資安能量。
  
 
出國報告書  
一、 國外研究過程 
抵達美國加州並於 Richmond 安頓好住、行問題後數日，便前往 Berkeley 大學
TRUST & CHESS Center研究室，進行為期兩個月的短期研究。在Berkeley指導我們
的為 Doug Tygar 教授，首次的會議主要介紹自己所研究的方向，並表示在未來兩個
月內希望可以完成系統實做以及論文撰寫。除了繼續進行在國外已完成部份的研究
外，我們也與教授討論是否有新的想法可以延伸以開展另外一個議題。 
介紹完自己的方向後，教授表示希望看過實際的系統操作以更深入瞭解自己的
研究，因此在之後的會議裡也實際 Demo 於國內完成，仍於測試階段的隱匿式惡意
程式偵測系統。Demo 完畢後正式進入新的開發階段，提出數個論點以及其他現存相
關論文共有的問題解釋為何選定這個研究主題，以及突顯自己論文的貢獻點。經過
評估討論後，確定該方向確實有其研究價值，便開始著手思考並設法解決要完成此
偵測系統所可能遭遇的問題。 
此研究主要是基於虛擬機器內外比對的方法來偵測隱匿式惡意程式，任何程式
都需要硬體資源來運行，惡意程式也不例外，利用虛擬機器技術可以輕易的掌控所
有的虛擬硬體，從中觀察系統的狀態可觀察到所有需要硬體去運行的軟體，其中當
然也包括了惡意程式。因此，不管隱匿式惡意程式用任何手法矇騙系統上層的使用
者，在硬體層仍需暴露自己的資料方可利用硬體資源，將實際運行於硬體上的資料
跟系統上層使用者對系統的觀察兩相比較，若存在差異，表示惡意程式介入其中並
隱藏部份系統訊息，為目前偵測隱匿式惡意程式的主流方法之一。 
為了實做此系統並彌補過去相關論文的不足，與教授討論的兩個重點為語意重
建問題以及為自己的偵測系統加設保護機制。在克服上述兩個重點後，進一步討論
如何去評估此偵測系統，不應只是與其他現存的偵測軟體比較，因可能存在不公平
的因素，自己的偵測系統為後生的系統，比較上來說，較佔優勢。因此，更有特色
的評估比較以突顯自身系統的價值、貢獻是需要的，這部份的討論則持續到回國至
今。 
 
出席 2010 國際密碼會議(CRYPTO 2010)報告 
陳毅睿 
一、時間與地點：99/8/16~8/19，U. C. Santa Barbara 
二、論文：203 篇投稿，接受 39 篇 
三、參加會議經過： 
第 30 屆國際密碼會議 (The 30th Annual Cryptology Conference，簡稱 CRYPTO 
2010) 為國際密碼研究會 (International Association for Cryptologic 
Research，簡稱 IACR) 主辦，今年的會議在美國加州大學的聖塔芭芭拉分校舉
行，與會人數共約 350 人。會議為期五天 (8/16~8/19)，除了第二天以及第五天
下午外，其餘皆為論文發表時間。第一天的早上有大師級的學者受邀演講，講者
分別有 Shafi Goldwasser (MIT and Weizmamnn) 以及 Silvio Micali (MIT)，
講題是 Zero knowledge – 25 Years 。在會議會場內的討論氣氛非常熱烈，休
息時間都可看到許多學者在相互交流與討論。 
 
四、發表論文介紹： 
無論文發表。 
 
五、與會心得： 
本次會議共有 39 篇論文發表，每篇發表的時間為 25 分鐘，分為 12 個 sessions: 
    Day 1 (8/16) 
    Session 1: Leakage 
    Session 2: Lattice 
    Session 3: Invite Talk 
    Session 4: Homomorphic Encryption 
    Session 5: Theory and Applications 
以在證明一個 PKE scheme 的安全時，也應考慮到系統 secret key 會被 
攻擊者得知的情形。 
    (c) Auxiliary-input security.在證明一個 PKE scheme 的安全性中，攻擊 
者除了可以從系統公開訊息中試著取得系統私密資訊之外，可以更進一 
步地推廣成攻擊者還有辦法得知 f(secret key,public key)，其中 f 
是攻擊者任意選定的一個函數。在這樣增強攻擊者能力的 PKE scheme 
所證明的安全性的即是 auxiliary-input security。 
 
在這篇論文中，作者提出了一個 PKE scheme，除了滿足一般常見的 semantic 
security 外，更同時滿足了上述的三種安全性。而這篇論文中所提出的 PKE 
scheme 是基於 quadratic residuosity (QR) assumption (或是 Paillier’s 
decisional composite residuosity (DCR) assumption)。 
 
 
(2) Ali Juma and Yevgeniy Vahlis, “Protecting Cryptographic Keys against  
Continual Lekage”. 
 
在一般現實中應用的加密系統中，side-channel attack 是攻擊者常會使用
的一類攻擊法，其主要的精神是籍由記錄系統運行時的各種狀態來進行系統私密
資訊的分析及偷取，像是 cold boot attacks。所以在設計加密演算法時，需要
將這類攻擊考慮到安全的 model 之中，而以住的加密系統在證明其安全性時大多
都是假設系統在運行時，私密的資訊是不會洩露的，但在現實中攻擊者在系統運
行中利用 side-channel attack 來獲得系統私密的資訊卻是有可能的。而一個能
被證明抵擋 side-channel attack 的加密系統可稱為 leakage-resilient 
scheme。 
在這篇論文當中，作者們提出一種利用”fully homomorphic encryption 
with re-randomizable ciphertexts”來保護系統中的私密資訊免於受到
side-channel attack 的方法。其中作者們在證明安全性時是假設系統只有在進
行運算時，才有可能讓攻擊者利用 side-channel attack 來偷取私密資訊，像是
cold boot attack 就是藉由使用者在解密時，會將解密金鑰 load 到記憶體中才
會讓攻擊者有機會將當時的記憶體狀態記錄下來並進行分析，而其他時候使用者
的私密金鑰都是假設在系統中被安全地保護著。 
 
 
(3) Shafi Goldwasser and Guy N. Rothblum, “Securing Computation against  
Continuous Leakage”. 
 
在現實的密碼系統中，攻擊者可利用 side-channel attack 來偷取系統私密
與安全性非常重要，同時也是一個基礎的功力。以現在的環境來說，要能夠在較
好的國際會議中發表的論文，一定要有著嚴謹的定義和詳盡的證明。而在密碼學
的領域當中，好的國際會議往往是各國學者注目的焦點，發表在這些會議上，才
會受到大家的重視。因此，我們也應該盡量發表在重要的國際會議上，才可以真
正提升我國的密碼學研究層次。另外，各國學者在會議期間積極的討論與交流的
態度，是我們應該學習的。若有足夠的經費補助，無論是學生或是教授，都應該
能多出國吸取國外學者的研究經驗。 
 
七、攜回資料名稱與內容： 
(1) CRYPTO 2010 會議資訊: 記載本次研討會的時間、地點、會議流程、報告人員、
以及報告題目等與研討會相關的會議資訊。 
(2) CRYPTO 2010會議論文集 (proceeding): 收錄本次研討會所接受論文之全文記
錄。
 “Public key cryptosystems with key-dependent message 
security” 
Session 6: Hash functions 
    Session 7: Key management 
    Session 8: Cryptographic constructions 
    Day 3 (10/23) 
    Session 9: Digital signature (I) 
    Session 10: Privacy and algebraic cryptanalysis 
    Session 11: Digital signature (II) and authentication 
    Session 12: System security 
六、心得與建議： 
這次會議看到許多不錯的論文發表，尤其是一些大陸學者及學生的論文，比
以往有很大的進步，他們報告時，有些人的英文很流利，也有些雖然不是很好，
但可以看出他們很努力在學習。 
會議期間，我特別早起來看看上海交大學生上課的情形，大約七點半到八點之
間，一大堆學生騎自行車來，還有走路的，8 點之後就很少有學生在外面，可見
他們都蠻遵守上課的時間，我也到教室外面看他們上課的情形，上課很專心。相
對我們交大學生的生活和學習態度，真是感到憂心。 
 
 2 
此次短期訪問除為了學生出訪前往該校做事先安排外（例如辦公空
間、指導教授、研究主題、住宿、使用設備），並且 藉此機會與
Professor Tygar 與其學生共同研討，意見交流，撰寫論文。 
 
二、參訪期間：  
短期研究訪問期間為九十九年一月二十一日至九十九年二月六
日止，於期間內赴美國舊金山柏克萊加州大學電機與資訊學系國際合
作短期訪問， 
 
三、出國人員： 
謝續平現任交通大學資訊工程系教授暨 TWISC＠NCTU(Taiwan 
Information Security Center at NCTU)主任，曾任交通大學資訊工
程系系主任、交通大學計算機與網路中心主任、中華民國資訊安全學
會理事長，現在擔任 IEEE Tran. On Dependable and Secure 
Computing、 IEEE Trans. On Reliability 副編輯（Associate 
Editor）、IEEE RS Newsletter 總編輯(Editor-in-Chief)、IEEE 
Reliability Society Ad Com Member（議會委員）。同時擔任 ACM 
Symposium on Information, Computer and Communications Security 
（ASIACCS） 推動委員會主席（steering committee chair），2010
年並獲選為 ACM Distinguished Scientist （美國 ACM 卓越科學家）。 
 
 4 
行期間擔任 IEEE Tran. On Dependable and Secure Computing、IEEE 
Trans. On Reliability 副編輯（Associate Editor）、IEEE RS Newsletter
總編輯(Editor-in-Chief)、IEEE Reliability Society Ad Com Member（議
會委員）。同時擔任 ACM Symposium on Information, Computer and 
Communications Security （ASIACCS） 推動委員會主席（steering 
committee chair），2010 年並獲選為 ACM Distinguished Scientist （美
國 ACM 卓越科學家）。 
為瞭解美國網路科技學術研發與技術發展現況，特別安排此次
實地參訪活動，經由密集的實地參訪，深切的瞭解到美國對軟體技
術的重視與投入，尤其在重點大學投資更是驚人，目前美國重點大
學與產業之合作明顯超越台灣重點大學，且經由校內設立研究中
心，使得學術研究已經與產業所需密切的結合，大學的研究真正的
達到提升產業技術的目的，例如柏克萊加州大學設立 CITRIS 
(Center for Information Technology Research in the Interest 
of Society)，其下設立許多研究中心，例如 TRUST Center 為美國
NSF、DHLS 所獎助設立，由 UC Berkeley 領導，參與學校包括 Stanford 
University, Carnegie Mellon University, Cornell University, 
Vanderbilt University,充分展現群體卓越的成果。 
美國目前電腦網路頻寬已經遠超過台灣，網路電話也較台灣更
國科會補助計畫衍生研發成果推廣資料表
日期:2011/01/25
國科會補助計畫
計畫名稱: 行動無線網路安全與惡意程式行為分析跨國產學合作計畫 (國際合作)
計畫主持人: 曾文貴
計畫編號: 98-2218-E-009-020- 學門領域: 資訊安全 
研發成果名稱
(中文) 行動平台安全防護與檢測方案
(英文)
成果歸屬機構
國立交通大學 發明人
(創作人)
曾文貴,謝續平,黃育綸
技術說明
(中文) 本計畫已完成一套行動平台安全防護與檢測方案，包含以下四個子項目： 
●無線異質網路模擬平台 
本平台可支援涵蓋16節點的網路實驗。使用者可在此無線異質網路模擬平台上，
進行異質性無線網路系統的安全測試，以模擬可能的異質網路拓樸與可能存在的
攻擊手法。本系統亦與UC Berkeley所開發之有線網路測試平台DETER相容。 
●惡意檔案文件分析系統 
本系統利用虛擬CPU及記憶體動態分析技術，可偵測出目標文件是否有夾帶惡意
程式或不當獲取系統資訊的意圖。同時本系統亦可過濾各類不正常字串，並找出
該惡意程式利用何種手法來達到攻擊目的。 
●程式漏洞檢測系統 
本計畫針對知名自由軟體Catchconv進行改良，已開發完成的程式碼迴圈處理機
制能偵測重複且可省略的動作，透過將計算能量集中在不重複的分析上增加其執
行效率。 
●行動平台安全管理機制 
本機制包含一套入侵偵測系統以及一套安全雲端儲存系統。其入侵偵測系統為
Android上的第一套入侵偵測系統，並已針對執行速度、耗電量、與封包抓取率
等方面進行最佳化，以確保於Android上保有高度的可用性。其安全雲端儲存系
統將使用者資料加密後利用Decentralized Erasure Code的方式分散在雲端儲存
上，可達到高度安全性及可靠性。 
(英文) This project proposes a Security Insurance and Inspection Solution for Mobile Devices. 
The solution includes the following four sub-systems: 
1. A heterogeneous network emulation testbed with wired and wireless networks: 
Users can emulate heterogeneous network topologies with the possible network attacks. 
2. A detection system against malicious document files: 
Using virtual CPU and dynamic memory analyzing technology, this system can detect if 
the target file contains malicious codes or tries to obtain sensitive system information. 
3. A program defects detection system: 
This project improved Catchconv which is a famous open source tool. The improvement 
is focused on a loop avoiding algorithm. 
4. A security management mechanism for mobile devices: 
This mechanism includes an IDS (Intrusion Detection System) on Android and a secure 
cloud storage system to improve the security management for mobile platforms such as 
smart phones. 
產業別 其他專業、科學及技術服務業
技術/產品應用範圍 無線網路安全、行動資安
技術移轉可行性及
預期效益
由於行動平台與無線網路的廣泛使用是未來的主要趨勢，相關的安全技術與服務一直是
國內外各大網通廠商努力的目標。本計畫所提出之技術內容涵蓋行動平台與無線網路領
域之先進安全議題，且依據本計畫之技術成果，計畫團隊已分別與友訊科技及中華電信
簽訂三項委託研究計畫，足可證明其技術內容具高度的轉移可行性與產業效益。
註：本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
以下論文於 CISC 2010 榮獲 Best Student Paper Award 
Chia-Wei Hsu, Shiuhpyng Shieh, ＇＇＇＇FREE: A Fine-grain Replaying 
Executions by Using Emulation,＇＇＇＇ The 20th Cryptology and 
Information Security Conference (CISC 2010), Taiwan, 2010.  
 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
