2中 華 民 國 97 年 9 月 7 日
可供推廣之研發成果資料表
□ 可申請專利 □ 可技術移轉 日期：97 年 9 月 7 日
國科會補助計畫
計畫名稱：
計畫主持人：
計畫編號： 學門領域：
技術/創作名稱
發明人/創作人
中文：
技術說明
英文：
可利用之產業
及
可開發之產品
技術特點
推廣及運用的價值
※ 1.每項研發成果請填寫一式二份，一份隨成果報告送繳本會，一份送 貴單位
研發成果推廣單位（如技術移轉中心）。
※ 2.本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。
※ 3.本表若不敷使用，請自行影印使用。
附件二
2exchange, electronic signature, and authentication.
In a signed-digit number with radix 2, three symbols {1, 0, 1} are allowed for the digit set, in
which 1 and 1 in bit position i represented 2i and 2i respectively [9]. The recoding
representation is called canonical if it contains no adjacent nonzero digits. The auxiliary carry C0
is set to 0 and subsequently the binary number A is scanned two bits at a time. The canonically
recorded digit Bi and the next value of the auxiliary binary variable Ci+1 for i = 0, 1, 2, …, n are
generated using Algorithm 1.
Algorithm 1: (Signed-Digit Recoding Method)
Input: E = (ene n-1…e2e1)2
Output: ESD = (rn+2rn+1rnrn-1…r2r1)SD2,
where 0 ≤ i ≤n and ei{0, 1,1}
begin
c1 = 0; rn+2=0; rn+1=0
for i = 1 to n+1 do
1
1 2
i i i
i
c e e
c 
    
12i i i ie c e c   
endfor
return ESD
end.
Example 1:
Assume A = 3038, we compute the canonical signed-digit vectors B by using signed-digit
recoding method.
Sol.
We get A = (0101111011110) = (1010000100010) = B by using Algorithm 1.
Note that in this example the number A contains nine zero bits and its canonically recorded
version contains only four nonzero digits. It shows that the average Hamming weight of a k-bit
canonically recorded binary number approaches
3
k
as k   [10-11]. We should note that a
number using the digit {1, 0, 1} is not uniquely represented in binary signed-digit notation [12].
An addition chain of length l for an integer n is a sequence of integers [a0, a1, a2, . . . , al]
such that a0=1, a1=n and ak= ai+ aj, 0≦i≦j<k≦l. The algorithm used to compute the modular
exponentiation modEC T M using a previously obtained addition chain, is specified by
Definition 1. It can be represented by mathematics as Definition 2. Two examples are shown as
Example 2 and Example 3.
Definition 1:
1. The first number is one.
4performing division operations. This algorithm computes the modular multiplication, t ≡ ABR-1
mod N, while avoiding division by N. These three inputs, A, B, and N are n-bit integers. The
output is t with a factor of R-1, where R is 2n. To gain the desired result, t ≡ AB mod of N,
pre-computation and post-computation steps are needed. The pre-computation is to pre-multiply
all inputs, A and B, by the factor of R mod N, where R is 2n and N is an odd n-bit integer. The
post-computation is to multiply the final result by one with the Montgomery multiplication
algorithm to eliminate the factor R mod N. As shown in Algorithm 3, pi is a result of modulo 2 as
can be verified by simply checking the last bit of s[i]+aiB. The shift-to-right operation can be
considered as division by 2. The modular multiplication operation can be used to compute the
modular exponentiation that is presented in the next subsection.
Algorithm 3: (Montgomery Multiplication)
Input: A, B, N
/* AB mod N ≡ tR mod N. That means t ≡ ABR-1 mod N*/.
Output: t /* A and B is the factor of R mod N.*/
{
s[0]=0;
/* R is 2n and N is an odd n-bit integer. */
for (i = 0, l, ..., n-1)
/* t is a factor of R-1.*/
{pi=(s[i]+aiB) mod 2;
/* pi is a result of modulo 2.*/
s[ ]
s[ 1]
2
i ii a B PNi
   }
if s[n]<N then t=s[n]
else t=s[n]-N;
return t;
}
Example 4:
Assume A=(8)10, B=(9)10, and N=(13)10, evaluate (AB) mod N and procedures by using
Algorithm 3.
Sol.
A=(1000)2 → (a3, a2, a1, a0)2 = (1, 0, 0, 0)2
Step 1. s[0] = 0,
Step 2. p0 ≡ (s[0] + a0*9) mod 2 ≡ 0;
s[1] = (s[0] + a0*9 + p0*13)/2 ≡ 0,
Step 3. p1 ≡ (s[1] + a1*9) mod 2 ≡ 0;
s[2] = (s[1] + a1*9 + p1*13)/2 ≡ 0,
Step 4. p2 ≡ (s[2] + a2*9) mod 2 ≡ 0;
s[3] = (s[2] + a2*9 + p2*13)/2 = 0,
6Sol.
Because the sequence in decimal number is 413, it means S3 = 4, S2 = 1, and S1 = 3. We assume
the binary-restoring result of the sequence is the binary number (S5’S4’S3’S2’S1’)2. The following
procedures are described for the binary-restoring method.
S1’: 1
0
1...1
2
S    S1’ = 1,                      (1)
S2’: 2
1
1...0
2
S    S2’ = 0,                      (2)
S3’: 3
1
2...1
2
S    S3’ = 1,                      (3)
S4’: 4
2
1...0
2
S    S4’ = 0,                      (4)
S5’: 5
1
0...1
2
S    S5’ = 1.                   (5)
Then we get the binary-restoring result of the sequence “413” is 10101.
Complement Recoding Method
There are two categories in the complement expressions. One is 1’s complement recoding 
method and the other is 2’s complement recoding method. We describe them respectively as
follows.
1’s complement:
Let W be an integer in binary representation and there are r bits in W. W is indicated as
1 2 1...r rW W W W and the leftmost bit is the most significant one.
We define the symbol of the 1’s complement of W to be W. A way to find the 1’s 
complement is simply to take the complement of the binary number bit by bit. For example: W =
(00000110)2 and W = (11111001)2 (replace “0” with “1” and “1” with “0”). We can use Equation 
(6) to compute the complement of W.
( 1)bits(100...00) 1rW W   , (6)
where 1 1...r rW W W W and iW = 0 if iW = 1, or iW = 1 if iW = 0, for i = 1, 2, 3, …, r.
Example 7:
Let W = (101101)2. Evaluate 1’s complement of W by using 1’scomplement recoding method.
Sol.
According to Equation (6), W = (1000000)2–(101101)2–1 = (010010)2 is obtained.
2’s complement:
Let Q be an integer in binary representation and there are d bits in Q. Q is indicated as Qd
8Example 9:
If we define m = 3, where m is the window size, we partition E = (10341)10 =
(10100001100101)2 as E = 10100001100101, evaluate ME by using sliding window method.
Sol.
The sliding window method first performs the pre-processing multiplications and obtains Ml for
l = 3, 5, and 7. Starting with 5 5QY M M  , it proceeds to compute X10341.
III. COMPLEXITY ANALYSES
In this section, the performance of many methods as above will be compared and other
presented methods in many journals are also compared. As we know, the squaring operations can
be regarded as a case of multiplication operations. In order to measure the speed of the modular
multiplications, modular squarings, and modular exponentiations, etc., we use the number of
modular multiplications to express the speed-up efficiency. By using the presented algorithms
[13-15] to evaluate the modular exponentiation computation m o dEM N for the practical
application to public cryptography where k is the bit-length of binary exponent E. We draw a
table (as follows) to demonstrate the computational complexities among different modular
multiplication methods.
IV. NUMBER THEORIES AND MATHEMATICAL PRELIMINARIES
A. Figures and Tables
Xu Xu-1 Xu-2 … X2 X1  X
－ － － － － －－ －－  Q (new)
Yv Yv-1 Yv-2 … Y2 Y1  Y
Figure 1. The process of inserting a row of spaces for computing the product X*Y.
X5 X4 X3 X2 X1 X
1 1 1 1 1
． ． ． ． ． ．
． ．
－ － － － － － － － － Q(new)
1 0 0 1
Y4 Y3 Y2 Y1 Y
1 1 0 2 2 0 1 1 X*Y
Figure 2. Dots determination for multiplication.
