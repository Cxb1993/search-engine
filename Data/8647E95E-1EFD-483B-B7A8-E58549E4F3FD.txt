 2 
一、中文摘要 
軟體工廠的生產模式早在 70 年代就
被提出，但軟體工廠的概念卻未獲得認
同，究其原因在於軟體的應用領域既廣泛
而複雜，而硬體工廠生產機制卻僅能生產
一定類型的產品。本計劃提出虛擬軟體的
概念，並基於虛擬軟體進一步提出軟體生
產線模型，使得類似工廠生產模式的軟體
工廠能夠實際存在，進而提升軟體生產速
度，並確保軟體品質。 
關鍵字：軟體工程、軟體工廠、虛擬軟體、
軟體生產線 
 
Abstract 
As early as in the 1970’s, the notion of 
software factory that treats software 
development as a kind of factory production 
had been proposed. However, software 
factory has not yet been accepted by the 
software development community. The 
major reason is that factory model is 
restricted to produce fix-type products. In 
this research based on pseudo software, a 
corresponding software product line model 
is proposed. With this model, a software 
factory resembling hardware factory model 
is possible to be build.  
Keywords：software engineering, software 
factory, software product line, pseudo 
software 
 
二、前言 
本計劃中所預計發展的軟體工廠模
式，目標是希望可以模仿硬體生產的工廠
運作機制。以往硬體廠商長久以近似工程
技術來設立一個產品生產線，用以一群生
產外觀、功能相近的產品，並透過大量生
產(Mass Production)來降低生產成本，這
是屬於一種規模經濟。然而，硬體廠商為
符合市場需求，相同的產品再也無法滿足
不同族群的顧客，而逐漸發展出少量多樣
的 生 產 模 式 (High-Mix, Low-Volume 
Production, HMLV Production)，透過市場
區隔來提升產品附加價值而獲利，這是一
種範籌經濟。而少量多樣的生產模式，其
關鍵在於生產的硬體產品，原則上還是屬
於同一種類型的產品。硬體廠商在生產線
上對於同一類型的產品，也可說是屬於同
一種樣式，儘管各有不同，但生產者可以
根據明確的物料清單 BOM 與生產說
明，即能實際生產出這些少量多樣的產
品。因此，我們模仿這樣的概念，於第一
年構想的 SoftBOM，亦即軟體的物料清
單，還須配合一個可以在需求面上描述預
計開發軟體的表達方式。儘管使用案例
(Use case)是一個非常理想的需求定義機
制，然而僅利用使用案例顯然也無法直接
與 SoftBOM 銜接，然後提交軟體工廠付
諸生產。本計劃所發展的虛擬軟體概念，
基本上可以解決上述所提及的困難。當虛
擬軟體概念得以落實後，對應 SoftBOM
精神的需求表達方式也才可以落實。因
此，就像硬體工廠一樣，當一個軟體工廠
可以事先發展出其 SoftBOM，而需求發
展者則利用虛擬軟體中對應該工廠的
SoftBOM 來定義軟體需求時，這個虛擬
軟體描述的軟體需求，就可以被該軟體工
廠接受作為生產依據。而最重要的是，這
樣的生產概念具有以下幾個優點： 
 軟體生產者與需求提供者間，在生產過
程中的耦合度大量降低。 
 需求錯誤與變更大量降低。 
 由於需求定義時已採用自己工廠的
SoftBOM，可以提升軟體生產速度，並
確保軟體品質。 
 類似硬體工廠生產模式的軟體工廠得
以實際存在。 
本計劃今年發展一個適用於軟體工廠之
達交預估(Delivery Forecasting)系統。達交
預估系統在軟體工廠管理中，扮演一個相
當需要且重要的角色。當軟體工廠在接受
以虛擬軟體需求模型作為訂單時，必須如
同硬體工廠一樣，能夠適時地回覆客戶待
開發軟體的預估交期與成本。在軟體工廠
中，達交預估最好能同時包括軟體工廠的
派工與生產排程建議，如此才能作為工廠
真正生產時的依據。因此，本計劃在發展
達交預估系統所需之軟體工廠的預測模
型，再根據所有可用資源與限制條件，預
估達交的日期與成本。 
 4 
 
圖 1. 以虛擬軟體為基礎之軟體工廠生產模式 
 
求的功能。首先，程式撰寫人員可重複使
用 SoftBOM 範例程式中的程式碼來「組
裝」出該 SoftBOM 的基本功能，再依
SoftBOM 虛擬軟體需求模型實作出需要
客製的功能及可執行的測試案例程式，待
所產生的軟體模組通過該 SoftBOM 的功
能測試後，即進入下一個整合階段。當軟
體工廠進入整合階段時，由於各別的生產
線均已完成各個部份所必須達成的功能測
試，我們只需在這個階段針對各生產線所
產生出的成品進行整合測試，而後即發展
出目標軟體。 
 
4.2 軟體工廠達交預估系統之設計 
一般而言，目前有關達交預估的做法，
如 COCOMOII，是以數學模型作為預估基
礎。利用數學模型預估的困難處，其中之
一是在於無法全然將工廠本身的特性，正
確而完整地建立到模型中。在軟體訂單達
交的預估上，不同的工作派工勢必會影響
排程結果。然而軟體工作派工牽扯因素頗
多，並非單一數學模型所能預估。更有甚
者，一個實際在運行的工廠，是一個動態
變化的環境。因此，能將工廠本身的特質
與經驗，例如像工廠本身資源的使用特
性、限制條件、派工法則等，建立到預測
模型中，再經由模擬來預估達交，才能夠
更貼近軟體工廠在達交預估上的實際需
要。同時，透過模擬機制，生產規劃系統
所需的派工與生產排程建議也才能獲得。 
圖 2 為達交預估系統之系統架構圖，同
時，本計劃設計一組語法，以讓軟體專案
團隊能依各軟體工廠的特性，來撰寫符合
本身資源的使用特性、限制條件與派工法
則，並經由本系統模擬產出該軟體工廠的
派工與排程結果，進而完成預估達交及顧
客交期回覆。預估達交系統同時也會產出
符合預估達交的相關派工與排程資訊，進
而作為軟體工廠生產規劃時的重要依據。 
 
圖 2. 達交預估系統之系統架構 
 6 
 
圖 3. 派工語法之設計 
 
4.3 持續發展軟體工廠所需相關工具 
我們希望能透過虛擬軟體來發展及驗
證 Android 應用程式的需求模型，使虛擬
軟體能夠具象化，令使用者能夠透過操作
虛擬軟體來發展及驗證需求。我們針對
Android 應用程式的需求發展工具並實現
虛擬軟體概念性框架，將需求以虛擬軟體
模型保存。透過虛擬軟體需求模型能將需
求具象化以循序的方式播放需求讓關係人
能像真實軟體般地操作，也提供需求導覽
地圖呈現需求靜態結構讓開發團隊掌握需
求全貌。透過本工具讓需求擁有可操作、
可閱讀以及完整之特性，以減少溝通上的
鴻溝並有效萃取出需求以滿足多變的手持
裝置應用程式需求。 
圖 4 為虛擬軟體發展工具的領域模型
圖，Manager 負責管理虛擬軟體，虛擬軟
體 的Presentation由Widget構成。Manager 
藉 著 修 改 Widget 之 屬 性 以 更 改
Presentation；也能描述 Widget 的 Field 
Constraints。當場景繪製完成後，可以在
場景與場景間建立 Navigation，由場景中
Widget 的 Event 所觸發，會導向另一個場
景。然而場景轉換中可能有一些邏輯處理
與資料傳遞是外觀所無法呈現的，因此可
以為 Navigation 撰寫 Business Logic 以描
述這些邏輯等。最後，撰寫 Test Cases 描
述如何驗證 Business Logic 與 Field 
Constraint，作為開發時的參照。 
 
圖 4. 虛擬軟體發展工具之領域模型圖 
 
五、結果與討論 
5.1 達交預估系統之模擬派工法則 
透過本計劃所提出之派工語法中，我
們進一步用來描述符合軟體工廠實際狀況
所需之派工法則。我們以模擬隨機派工法
則與最適派工法則來說明，圖 5 所描述的
是一個完全隨機的派工法則，只要人員能
夠符合該工件之生產資訊與限制條件，即
可派工；圖 6 則是根據目前最適合該工件
的人員作為派工法則，所謂最適合的人員
在此是指可以在最短時間完成該工件的人
員。 
 
圖 5. 模擬隨機派工法則範例 
p = Project; 
Build QueueOfWI(p) from SetOfWI(p); 
Build TeamOfPP(p) from SetOfPP; 
Build ConstrainSetOfPS(p) from TeamOfPP(p); 
Build PrerequisiteOfWI(x) for all x in QueueOfWI(p); 
Build constrainSetOfPW(p) from QueueOfWI(p)  
and TeamOfPP(p); 
Select any wi from queueOfWI(p) and Select any x  
from TeamOfPP(p) where  
PrerequisiteOfWI(wi) is empty, 
([wi, x] is in ConstrainSetOfPW(p)) or  
([wi, _] is not in ConstrainSetOfPW(p)), 
(wi.requiredSkill is in x.skillSet), 
([x, wi.requiredSkill] is in ConstrainSetOfPS(p)), 
CalendarOf(x,_) > 0.5, 
CurrentProgress.cost < p.costUpperBound; 
<assign>::= <var> = <const>; 
<build>::=Build <set> from <set>; 
<build>::=Build <set> from <set> and <set>; 
<build>::=Build <set> for all <var> in <set>; 
<select>::=Select any <var> from <set> and  
select any <var> from <set> where <rule>; 
<set>::=QueueOfWI|SetOfWI|TeamOfPP|SetOfPP| 
ConstrainSetOfPS |PrerequisiteOfWI| 
ConstrainSetOfPW 
<rule>::=<rule> or <rule>, 
<rule>::= expression, 
<var>::= string 
<const>::=string 
 
 8 
有 Aaen 提出的 Eureka Software Factory 
(ESF)[14,15,31]。90 年代則有 HP 的 M. L. 
Griss 所提出的特定應用領域、System 
Reuse 為主的軟體工廠[18]。而近年來隨著
MDA 興起，亦即有以 Model-Driven 類型
的軟體工廠(Model-Based Software Factory)
產生[17,22]; 另一方面也有強調以人為中
心的軟體工廠類型 (Cell-Based Software 
Factory)[43]。我們也參考了許多關於軟體
生產線(Software Product Line)的相關研究
[36, 37, 38, 40, 41, 42]，其生產一群功能相
近但仍屬各自不同的軟體之軟體生產方
式。 
 
參考文獻 
1. W.W. Agresti, “Software Engineering as 
Industrial Engineering,” Software Eng. Notes, 
vol. 6, no. 5, 1981, pp. 11-12. 
2. V.R. Basili, G. Caldiera, and G. Canone, “A 
Reference Architecture for the Component 
Factory,” ACM Transactions on Software 
Engineering and Methodology, Vol. 1, Issue 1, 
1992, pp. 53-80. 
3. B. Blum, “Understanding the Software 
Paradox,” ACM SIGSOFT Software 
Engineering Notes, vol. 10, no. 1, 1985, pp. 
43-47. 
4. B. Boehm, Software Cost Estimation with 
COCOMOII, Prentice-Hall, 2000. 
5. Bemer, R.W., Position papers for Panel 
Discussion: The Economics of Program 
Production, in A. J. H. Morrell (Ed.), 
Information Processing 68, Amsterdam, 
North-Holland (1968) 
6. H. Bratman; and T. Court, "The Software 
Factory," Computer, vol.8, no.5, May 1975, pp. 
28-37. 
7. F.P. Brooks Jr., The Mythical Man-Month: 
Essays on Software Engineering, 
Addison-Wesley, 1975, pp. 47-48. 
8. B. Clark, S.Devani-Chulani, and B. Boehm, 
“Calibrating the COCOMO II 
Post-Architecture Model,” Proceedings of the 
International Conference on Software 
Engineering Workshop, IEEE Computer Soc. 
Press, Los Alamitos, USA, 1998, pp.477–480. 
9. J.O. Coplien, “Reevaluating the Architectural 
Metaphor: Toward Piecemeal Growth,” IEEE 
Software, vol. 16, no. 5, Sep./Oct. 1999, pp. 
40-44. 
10. M. A. Cusumano, Japan’s Software Factories : 
A Challenge to US Management, Oxford 
University Press, 1991.  
11. M. A. Cusumano, “Shifting Economies: From 
Craft Production to Flexible Systems and 
Software Factories,” Research Policy, vol. 21, 
1992, pp. 453-480. 
12. M. A. Cusumano, "The Software Factory: A 
Historical Interpretation," IEEE Software, 
vol.06, no.2, March/April, 1989, pp. 23-30. 
13. M. W. Evans, The Software Factory, Wiley, 
New York, 1989. 
14. C. Fernström, “The Eureka Software Factory: 
Concepts and Accomplishments,” Proceedings 
of the 3rd European Software Engineering 
Conference, LNCS No. 550, pringer-Verlag, 
1991, pp. 23-36. 
15. C. Fernstrom; K.-H. Narfelt; and L. Ohlsson, 
"Software Factory Principles, Architecture, and 
Experiments," IEEE Software, vol.9, no.2, 
pp.36-44, Mar 1992  
16. A. Fuggetta, L. Lavazza, S. Morasca, S. Cinti, 
G., Oldano and E. Orazi, “Applying GQM in 
An Industrial Software Factory,” ACM Trans. 
Softw. Eng. Methodol. 7, 4 (Oct. 1998), pp. 
411-448. 
17. J. Greenfield, K. Short, S. Cook, and S. Kent, 
Software Factories, Assembling Applications 
with Patterns, Models, Framework, and Tools, 
Wiley, 2004. 
18. M. L. Griss, and K. D. Wentzel, “Hybrid 
Domain-Specific Kits for A Flexible Software 
Factory,” In Proceedings of the 1994 ACM 
Symposium on Applied Computing, Phoenix, 
Arizona, United States, March 06 - 08, 1994, 
pp. 47-52. 
19. J.D. Herbsleb, and D. Moitra, “Global Software 
Development,” IEEE Software, Vol. 18, Issue 2, 
2001, pp.16-20. 
20. W. S. Humphrey, “Software and The Factory 
Paradigm,” Software engineering Journal, 
Vol.6, Issue 5, September, 1991, pp. 370-376. 
21. IEEE, “IEEE standard for developing software 
life cycle processes”, IEEE Std 1074 – 1995 , 
April, 1996. 
22. B. Langlois, and D. Exertier, “MDSoFa, A 
Model-Driven Software Factory,” OOPSLA 
2004, MDSD Workshop. 
23. C. Li, H. Li, and M. Li, “A Software Factory 
Model Based on ISO 9000 and CMM for 
Chinese Small Organizations,” Proceedings of 
the Second Asia-Pacific Conference on Quality 
Software, December, 2001, pp.288–292. 
24. N.K. Lim, J.S.K. Ang, and F.N. Pavri, 
“Diffusing Software-Based Innovation with A 
Software Factory Approach for Software 
Development,” Proceedings of the 2000 IEEE 
International Conference on Management of 
Innovation and Technology, Vol. 2, November, 
2000, pp. 549 -555.  
25. M. S. Mahoney, "Finding a History for 
Software Engineering," IEEE Annals of the 
 10 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。 
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
▓ 達成目標 
說明： 
在本計劃中，我們發展軟體工廠所需之相關工具，使得類似於硬體生產的軟體工廠生產方式
成為一種可行的方案。另一方面，本計劃也提出一個軟體生命週期管理的快速導入方法，用
以幫助軟體團隊簡單且快速導入軟體生命週期管理工具。 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：▓已發表 □未發表之文稿 □撰寫中 □無 
 
本計畫執行至今的研究成果已逐一發表在國內外的會議及期刊上： 
國際期刊與研討會論文: 
 論文「Jumpstarting Application Lifecycle Management: a New Approach with Tool Support」
已被國際期刊 Journal of Information Science and Engineering 接受 
 論文「Pseudo Software: a Mediating Instrument for Modeling Software Requirements」 已發
表至國際期刊 Journal of Systems and Software, Volume 83 ,  Issue 4  (April 2010), Pages: 
599-608 
 論文「Rapid Application Lifecycle Management: a new Approach with Tool Support」 已發
表至國際研討會 SoMeT2010。 
 
國內研討會論文: 
 論文「一個以 Pseudo Software 為基礎之 Android 需求發展工具」已發表至第五屆台灣軟
體工程研討會論文集(TCSE2009) 
 論文「一個結合 Problem Frames 與 Pseudo Software 的需求發展方法」已發表至第二十
一屆物件導向技術及應用暨第六屆台灣軟體工程研討會論文集 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以 500
字為限） 
計畫執行至今已獲致如下成果： 
1. 提出 Pseudo Software 新概念：基於 Pseudo Software，將 IKIWISI (I’ll Know It When I See 
It)的困擾得以提前在需求階段解決外，更重要的是需求能夠以 Pattern 的方式記錄下來。
同時 Pseudo Software 也可以與軟體工廠的 SoftBOM 存在相對應關係，如此才能夠使軟體
工廠能夠模仿硬體工廠的生產模式。 
2. 提出一個軟體生命週期管理的快速導入方法，稱為 RALM。RALM 首先提供一個軟體生
命週期管理的參考模型與定義樣版。透過參考模型與定義樣版，中小型軟體團隊可以快
速發展出所需的軟體生命週期管理定義。而發展完成的軟體生命週期管理需求，可進一
步利用 RALM 所提供的工具 ALMTranslator 產出 VSTS 流程範本以及 VSTS 設定指
引，幫助軟體團隊簡單且快速導入微軟公司的 VSTS 軟體生命週期管理工具。 
 2 
者交換意見及研究上的想法。特別是在晚宴期間與 Brian HENDERSON-SELLERS 就本
次發表的研究成果進行討論與意見交換(HENDERSON-SELLERS 為國際軟工學界著名的
學者，發表過許多軟體工程的方法)。HENDERSON-SELLERS認為 RALM的概念與幾年前
他所提出的方法概念上相近，但能夠實現在近年來的主流 ALM工具上，如 Microsoft 
VSTS上，使得研究成果具有打進主流工具的潛力。 
 
(上圖即為 9/30當日宣讀研究成果的照片) 
 
二、與會心得 
近年來，由於行動運算與雲端運算已成為主流趨勢之一，不論學界、產業界均
能感受到巨大的產業變革，像是 APP 與雲端運算服務的興起，均對目前的產業及研
究上產生更多值得討探的議題。然而，在這波變革中，軟體工程(包含軟體技術、軟
體設計、軟體流程、軟體工具等)扮演著極為重要的重要領域之一。而雲端運算服務
 4 
四、建議 
國內學界每年均有相關領域學會舉辦會議，過去，仍少見以二個以上學會聯合
辦理者。因此，關於軟工領域中使應其他領域的方法、或其他領域使用軟工的方法
的研究論文，通常無法在兩個領域學者同時在場的場合下進行宣讀，造成知識交流
上的缺憾。今年 7月，軟工學會與物件導向 SIG第一次將其年會合併辦理(由中大與
北科大共同主辦)，以期擴大交流與參與，可視看為一個開端。往後 貴會資助舉辦
研討會時，不妨鼓勵跨領域的二個（或以上）學會一起辦理會議。 
 
五、攜回資料名稱及內容 
研討會論文集專書一本： 『New Trends in Software Methodologies, Tools, and 
Techniques,』 Hamido Fujita ed. IOS Press，2010. ISBN 978-1-60750-628-7 
 
六、其他 
無。 
 
 
 
 
 
 
 6 
creating new templates from scratch [11]. Kääriäinen J. et al. have defined an ALM framework for 
documenting the company’s ALM solutions and finding improvement for ALM solutions [9]. Pirklbauer G. et 
al. identify key problem areas typically addressed by ALM and provide guidance on how to develop an ALM 
strategy for software development organizations [13]. In this paper, we present an instrumented approach for 
ALM definition, ALM discipline and ALM implementation. The approach is called Rapid Application 
Lifecycle Management (RALM). RALM provides a reference model for ALM that can be used by software 
team to jumpstart the task of ALM definition. The reference model is defined in a number of templates which 
are in Microsoft Excel format. The conversion from templates to platform-specific settings is done by a tool 
named ALMTranslator. The current version of ALMTranslator can be used to implement the defined ALM 
activities on the Microsoft Visual Studio Team System (VSTS) 2005. In addition to the ALM implementation, 
engineering guidelines for carrying through ALM discipline are also automatically published on the project 
portal by ALMTranslator. 
2. State-of-the-art ALM platforms 
The development of ALM platforms and tools (e.g., Microsoft VSTS [16], Borland ALM [5], and IBM Jazz 
[8]) has reached a point that they emphasize the customization of processes and tools to suit the development 
team’s need. No longer are teams forced to accept a specific process, especially one that the team is unfamiliar 
with. As a result, the same ALM platform can support waterfall, unified, agile, or any other home grown 
software processes [15]. The main features of ALM platforms include configuration and change management, 
issue tracking, project management, build management, report management, and so on. As can be seen, 
substantial amount of work is involved in setting the platform for these functions to work correctly. 
State-of-the-art ALM platforms fill the “how-to” gap for organizations that adopt process improvement 
standards such as CMMI [6], which provides a framework for defining “what” to be done. For example, in 
configuration management, a support process area in CMMI, a specific practice says that access control 
should be established. However, until the project has been created and configuration items have been 
determined, such a practice is at best a declaration; access control setting is only possible after project artifacts 
have been defined. For this reason, it can be noted that while an ALM platform such as VSTS supports CMMI, 
customizations such as setting access control rights are still necessary and are performed manually [16].  
3. The RALM Process 
The primary benefit of a comprehensive ALM platform is the provision of all commonly used ALM 
functionalities (or best practices) on a single platform. However, the numerous interdependent ALM activities 
also greatly increase the complexity and difficulty of adopting the ALM platform. To avoid being overly 
general, we propose to look at ALM at the project level. That is, once the project scope, budget, and time are 
known, many activities can be defined down to the specifics, which help eliminating vagueness and avoiding 
misfit. The RALM process is depicted in Figure 1, where VSTS is used as the target ALM platform although 
the process is equally applicable to other ALM platforms including other commercial and open source ones. 
RALM process consists of two phases: ALM definition and ALM platform initiation. 
 8 
4. The design of ALMTranslator  
Figure 2 shows the design class diagram of ALMTranslator, which consists of ALMParser, ALM2VSTS and 
PracticeGenerator. The ALM definitions files are parsed into the ALM-XML model by the ALMParser. The 
ALM-XML model is manipulated by the ALM2VSTS for generating the platform-specific process definition 
files and the configuration guidance. ALM2VSTS also needs to get the configurations of target platform 
through the specific ConfigLoader (VSTSConfigLoader in this case). Finally, the PracticeGenerator generates 
the platform-independent engineering practice from the ALM-XML model.  
 
Figure 2. The design class diagram of ALMTranslator 
5. Observations from field application and discussion 
RALM has been applied to jumpstart the development of a balanced score card (BSC) application in an 
enterprise solution provider. The waterfall process was adopted. The project duration was three months and 
involved 11 developers from both headquarter and an offshore location. Each developer has a different access 
control right to the code repository. The engineering practices adopted included configuration management, 
issue tracking. The reports included bug rates, remaining works, and burn-down charts. Due to space limit we 
will not go into detail. By applying RALM, it was observed that  
 the project initiation phase, which included the ALM definition from the RALM templates, VSTS platform instrumentation, 
and training, was completed in a work week; and  
 the configuration guidance generated by RALM’s ALMTranslator enhanced the built-in guidance provided by VSTS, for 
example, in proving a step-by-step guide for setting the issue types and states in issue tracking and in setting the access 
control rights to the team members. 
According to the classification of ALM tools by Goth [7], RALM can be seen as a combination of consulting 
component and ALM plug-in. Since each team has its own needs, the challenge is to find suitable 
implementations of ALM for complicated, real-life situations. This is has been reported even for teams that 
belong to the same organization, where several case studies involved using VSTS as the platform for running 
Scrum [11]. Medina-Domínguez et al. proposed the adaption of process template based on the project patterns 
and a model to support process improvement by using patterns in a TFS environment [10]. In these works, the 
tailoring of the ALM platform was performed manually. RALM can obviously help by proving a more 
streamlined initiation.  
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/25
國科會補助計畫
計畫名稱: 適用於企業計算之軟體工廠模式(III)
計畫主持人: 周忠信
計畫編號: 99-2221-E-029-017- 學門領域: 程式語言與軟體工程
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
