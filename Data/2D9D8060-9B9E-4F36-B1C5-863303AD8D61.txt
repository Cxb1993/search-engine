web service tasks for large-scale systems.  To solve the problem, they proposed a high-level 
system (Eurasia: Exploring, Understanding, and Recording Analysis Steps in 
Information-Management Applications) to help users quickly exploring and testing various 
web services for large-scale systems.  In their research, they only focused on how to retrieve 
and to assemble web service components.  However, they did not address the combinatorial 
problems when many different service providers are available to provide similar functionality 
component and the question of selecting which combination is most suitable for service 
requestors based on their objectives. The key issues are to develop a composition process that 
can search available UDDI component repositories and to integrate better service 
components for service requests.  The process has not been studied and developed very well 
in the field as specified by Ko and Neches [2].  Hence, the related computing techniques for 
composing better web services are urgently required.   
The process of dynamic composition is to obtain the information of suitable service 
components from many service providers that registered their components in a UDDI registry 
repository.  The next step is to negotiate with variable service providers in order to integrate 
suitable service components.  The success of integration is achieved when multi-objectives 
set by service requesters are met (i.e., the quality of services (QoS) such as reliability, 
functionality, and execution time [3]).  However, such performance measurement is always 
difficult to assess in software system. Same situation applies to web service field.  A 
quantitative analysis study on several possible software architectural options was discussed 
and a classification of web server software architecture was provided in [4].  The 
performance factors (i.e. service time, physical contention, and software contention, and the 
trade-off analysis among these performance factors) were discussed.   Alternatively, to 
evaluate the criteria of constructing web service composition, several specifications 
regarding the quality of service have been proposed, e.g. web service composition – Business 
Process Execution Language for Web Services (BPEL4WS) [5], web service coordination, 
web service transaction, web service security, and web service reliability.  These aspects 
present the critical factors of interacting business processes.   
The research problems we addressed in this research mainly focus on the search of 
better web service components and how to develop a search process that can explore good 
quality and performance service components over different service providers. 
The report is organized in sections that first describe the project objective, followed by 
the research methodology applied in the project. The architecture of the evolutionary 
requirements analysis tool is explained, and then the case study results and discussions 
carried out using the tool. The report summarizes with a brief conclusion. 
Research Objectives 
The research objectives of this project are to apply appropriate algorithms and techniques for 
the solutions of research problems aforementioned.  The solutions include the development 
of processing model, fundamental methods, and techniques that are used to construct the 
 2
Therefore, it is very important to obtain the information of all available components from 
component registration agents.  The information regarding the description of service 
components can be collected from component library as specified in [7].  
2) Modeling component resources from different providers: classifies and constructs 
service components into database tables based on the functionalities and characteristics of 
service applications requested.  The work flow of the service applications can be modeled 
by using a scenario-based method that is used to describe the task steps required to 
accomplish the completion of web service applications.   
3) Applying the sequence of web service composition and chromosome 
encoding/decoding: define the task sequence of web services that are needed to be 
optimized.  A sub-task service in a task sequence can be defined as follow. 
{ }jji tasksubcomponent −,  
Where, we assumed that one sub-task can be completed by a service component.  By 
utilizing the collecting information of component registrants, a web service task sequence is 
transformed into a binary string, i.e. encoding a solution into a chromosome.   The 
chromosome mapping mechanism utilized a hierarchical structure (see Figure 2) to 
encoding/decoding task sequence and chromosome.  
 
Example:     Component (COMP00) is 
used to complete task (ST0)
Phenotype:  {COMP00, ST0}
Genotype :   0001    01
1st level – a service task sequence
Task-1 Task-2 Task-3 ……..1
2
.
.
.
.
.
.
.
N
Population (N)
2nd level  – a task node
Service Component Task – x 
 
Figure 2. The chromosome structure of a service task sequence 
4) Fitness assessment: To evaluate the design quality of software components, 
multi-attributes are used to evaluate the performance and quality.  The measurement focuses 
on different aspects based on what criteria customers required.  Such measurement is a key 
element of evaluating the performance and quality of software applications.  As specified in 
[8], the principles of the measurement are to assist the evaluation of analysis and design 
models, to provide an indication of the complexity of procedural designs and source code, 
and to facilitate the design of more effective testing. According to these principles, several 
 4
  
Table 1.  Components randomly generated by computational model 
Component Task time Reliability Cost 
COMP00 ST0 0.56 0.75 2232
COMP10 ST1 0.21 0.53 575
COMP20 ST2 0.35 0.76 866
Here we assumed each task can allocate 10 service components as the available choices 
from component library.  In total, we generated 100 components for 10 sub-tasks in the 
simulation service task sequence.  
EC-based process parameters 
The chromosome structure (see Figure 2) was designed in two levels.  The top level 
coded a cycle of sub-tasks, while the second level described the component–task type 
combination within a task node.  The binary string for a task node was 6 bits long; with 
component were assigned 4 bits and the task 2 bits.  The chromosome represents a task 
sequence, which contains multiple task nodes.  Hence, the length of chromosome binary 
string is based on how many nodes in a sequence, e.g. the length of chromosome binary 
string is 10 (sub-tasks) * 6 (bits/task) = 60 bits.  The initial population was set to 64 and the 
combinations of component and tasks were generated randomly within the constraints 
imposed by the domain.  The configurations of EC parameters for the experiment were 
based on the literature survey [6].  
Results and Discussions 
The experimental results generated by the EC-based procedure are illustrated in Figure 3. In 
the Figure, all explored chromosomes (web service compositions) were collected through the 
evolutionary process and presented in 3-objectives solution space.  Each point represents a 
combination of service components to complete the web service task sequence.  The fittest 
chromosome is denoted in a red circle (with an arrow pointed) which has fittest fitness based 
on the assessment of DFBMOEA.   
Although the simulation was tested through a set of service components that randomly 
generated by computers, the optimal results demonstrate that the component combinations 
can be easily optimized by the EC-based process proposed in this project. 
In summary, the optimization results presented in previous section illustrated the 
objectives defined in this project, which is to search the optimal component combinations of 
web services from all available components.  Another advantage of using EC-based process 
is that if one of web service component does not fit for some reason, or criteria have changed 
during the composition process, our approach can provide an immediate re-run to re-organize 
the optimal solutions that satisfy new criteria.  
 6
