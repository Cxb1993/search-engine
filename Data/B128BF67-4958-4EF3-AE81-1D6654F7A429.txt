  2
行政院國家科學委員會補助專題研究計畫成果報告 
 
強健且最佳參數設計之進化演算法於機械設計加工與控制系統之研究 
Robust Optimal-Parameter Design Evolutionary Algorithm for Solving Problems in Mechanical 
Design and Machining and Control System 
 
計畫編號：NSC99-2221-E-153-001 
執行期限：自 99 年 8 月 1 日至 100 年 7 月 31 日止 
主持人：蔡進聰 副教授 國立屏東教育大學資訊科學學系 
計畫參與人員：周秉毅、方嘉岑、劉奕鈞、鄭安良 
中文摘要 
本計畫之研究目的在於發展一套工程
最佳參數設計之強健型差分進化演算法，並
解決機械設計加工與控制系統之強健且最
佳參數設計問題。此演算法結合改良型之差
分進化演算法與可變因子水準之實驗設計
法。其中改良型之差分進化演算法具全域搜
尋能力，且所需設定的參數較少，擁有簡單
與快速的進化特性；可變因子水準之實驗設
計法被用來增強強健型差分進化演算法之
交叉演算，以系統化推理取代傳統的隨機機
制，來開發較佳的新子代。本研究以差分進
化演算法為基礎，改良選用交叉向量機制與
子代選擇機制，並結合可變因子水準之實驗
設計法，使其成為具強健型之差分進化演算
法，並以非線性之數學函數最佳化問題，來
證實此演算法之可行性、強健性、與性能。 
 
關鍵詞：差分進化演算法、可變因子水準之
實驗設計法、工程最佳參數設計 
Abstract 
The purpose of this project is to develop 
a robust differential evolutionary algorithm 
(RDEA) to solve engineering 
optimal-parameter design problems in 
mechanical design and machining and control 
system. The RDEA is an approach of 
combining the improved differential 
evolutionary algorithm (IDEA) and the 
variable factor-level design of experiments 
(VFLDOE). The IDEA has a powerful global 
exploration capability and uses fewer control 
parameters. The systematic reasoning ability 
of the VFLDOE is used to enhance the 
recombination operation for RDEA to select 
the better vectors to be potential offspring. 
The DEA in selection mechanisms for 
crossover and offspring would be improved to 
be the IDEA. Then, the IDEA combines with 
the VFLDOE to be the RDEA. It has been 
used to solve optimization problems of 
nonlinear mathematical functions, and been 
evaluated to understand its feasibility, 
capability, robustness, and performance. 
 
Keywords: Differential evolution algorithm, 
variable factor-level design of experiments, 
engineering optimal-parameter design. 
前  言 
近年來進化演算法在工程設計領域之
最佳化參數設計問題上，扮演相當重要的角
色，並成功的應用於不同問題，如：機械元
件參數設計、控制器參數設計、濾波器參數
設計、電路參數設計、IC 參數設計、光學
鏡片參數設計、密碼設計、容差參數設計…
等。傳統解決參數設計最佳化問題的進化演
算法有基因演算法、進化策略法、進化規劃
法、爬山法、模擬退火法、禁忌搜索法、及
混合最佳化法...等。在解決最佳化問題中，
當所遭遇的問題具有很多變數與很多局部
最佳值時，演算法最大的挑戰為陷入局部最
佳值，而無法自拔（Leung and Wang, 2001
）。近年來，很多最佳化演算法被發展出來
，其中基因演算法可同時搜尋多變數與多模
態的空間，並成功的解決複雜與不連續的問
  4
、系統的最佳模式 (Mayer et al., 2005)、數
位濾波器設計 (Karaboga, 2005)、控制器設
計 (Xue et al., 2005; Zhang and Ding, 2006)
、化工反應槽的最佳操作程序 (Babu and 
Angira, 2006)、機械材料表面加工處理參數
的最佳化設計 (Saikumar and Shunmugam, 
2006; Krishna, 2007)、電力系統設計 (Dong 
et al., 2006; Vaisakh and Srinivas, 2008)、系統
之最佳參數鑑別 (Chang, 2007) 等。由上可
知，差分進化演算法是解決最佳化問題的可
行方法之一，且所需要的參數較少，擁有簡
單與快速的進化特性。 
然而，在傳統差分進化演算法之設計理
念，使用多點搜尋、重組（含突變與交叉）
與選擇的機制，然而在重組的機制中採用隨
機產生的機制，並不確定可找到較佳的解與
不利於區域解的搜尋，而且需使用較大的運
算時間，所需呼叫函數評估的次數亦較多。
許多研究者為增加傳統差分進化演算法的
性能，乃引進區域搜尋法的觀念，如：Fan 與 
Lampinen (2003) 採用三角突變操作法來執
行區域搜尋，可在強健性與收斂速度中取得
較好的平衡；Noman 與 Iba (2005) 使用交配
為基礎的區域搜尋來找尋較好的個體；
Rahnamayan et al. (2008) 和 Noman 與 Iba 
(2008) 提出啟發式的策略或系統化的推理
來調整搜尋的空間大小，增加區域搜尋的能
力，來加速傳統的差分進化演算法。 
所以本計畫先改良傳統的差分進化演
算法，再結合具系統化的推理之可變因子水
準之實驗設計法，來增強傳統的差分進化演
算法。本計畫案為證實所提出的強健型差分
進化演算之可行性與性能，將先利用非線性
數學函數的最佳化問題來驗證此演算法的
效能，再解決工程之最佳化參數設計問題，
並與過去研究者所得結果作一完整的比較
，以下將分別描述欲解決問題的特性與遭遇
的困難： 
為驗證一個新的演算法的可行性，多數
研 究 者  (Floudas and Pardalos, 1992; 
Michalewicz, 1996) 常利用多限制條件之非
線性數學函數來測試演算法的可行性與性
能，這些函數通常擁有多變數與多局部最佳
值，且包含二次函數、線性函數、非線性函
數、多項式函數等型態。因此本研究將利用
此類型的非線性數學函數來測試所開發之
演算法的效能與強健性，並與上述所提研究
者所得的結果相互比較。此外，亦將使用此
非線性數學函數來驗證系統化推理之可變
因子水準之實驗設計法的功效，與探討演化
參數對強健型差分進化演算的敏感性，再與
傳統的差分進化演算法和基因演算法所得
的結果作比較。 
 
研究方法 
以差分進化演算法為基礎，改良選用交
叉向量機制與子代選擇機制，並結合系統化
推理之可變因子水準之實驗設計法，使其成
為具強健型之差分進化演算法，並以非線性
之數學函數最佳化問題（具多變數、多函數
型態、多限制條件、與多局部最佳值），來
驗證系統化的推理之可變因子水準之實驗
設計法的效用，與探討演化參數對強健型差
分進化演算法的敏感性，證實此演算法之可
行性、強健性、與性能。以下將描述本研究
計畫的研究重點、方法、步驟與應用問題。 
(一) 改良差分進化演算法 
傳統的差分進化演算法具全域搜尋能
力，且所需設定的參數較少，擁有簡單與快
速的進化特性，然而，所有的運算過程皆採
用隨機的特性，先改良選用交叉向量機制與
子代選擇機制，來增強傳統的差分進化演算
法。以下分別說明改良的差分進化演算法之
步驟與內容： 
產生初始群體 
本 研 究 以 實 數 編 碼  (Real Coding 
Representation) 的方法，來表示每一個解向
量，編碼空間為連續空間，較易搜尋到可能
的解。差分進化演算法是一種平行直接的搜
尋方法，需產生 Ps 組的解向量 (亦即 Ps 條
的個體)，而在每一組解向量中有 n 個變數
。初始向量群中變數值的建立被限制在每個
變數所允許的範圍內，以均勻分佈亂數 
(Uniformly distributed random number) 的方
式來產生每個變數的初始值，以下為產生
Ps 個初始群體的步驟，其中一組向量 ( )1112111 ...,,...,,, ρiijiii xxxxX = 代表一組 ρ 個待決
定的變數： 
步驟 1：任意產生一個均勻分佈的亂數 β
，其中 β ∈[0, 1]。 
  6
所有實驗因子的水準安排與交互作用之間
的平衡分佈。在直交表中，列代表每次實驗
中各因子的水準，行代表參與實驗的因子。
以下將分別介紹二水準與三水準的直交表
，一個二水準直交表的標準格式為 Ln(2n-1)
，其中 n = 2k 表示列與實驗的數目，k 是大
於 1 的整數；2 表示參與實驗因子的水準數
；n−1 表示行與實驗因子的數目。一個三水
準直交表的標準格式為 Lm(3(m-1)/2)，其中 m 
= 3k表示列與實驗的數目，k 是大於 1 的整
數；3 表示參與實驗因子的水準數；(m−1)/2
表示行與實驗因子的數目。這斜體字母 L 是
來自’Latin’，因為早期的實驗設計想法是來
自 Latin 方格設計。二水準直交表常被使用
的有 L4(23)、 L8(27)、 L16(215)、與 L32(231)
。三水準直交表常被使用的有 L9(34) 與
L27(313)。 
實驗設計法中另一個重要的工具為「訊
號對雜訊比」，此工具在通訊工程中，被用
來評估訊號的好壞。這個觀念的主要目的是
在同時考量品質特性的平均值與變異數，也
就是讓品質特性的平均值與目標一致且品
質特性之變異愈小愈好。依據不同數據的型
態或特性（如：連續數據或離散數據；望小
特性、望大特性、或望目特性），有不同型
態的訊號對雜訊比。在此僅針對連續數據之
望小特性（Smaller-the-better）與望大特性
（Larger-the-better）來進行討論，若需了解
較多較詳細的內容，請參閱 Phadke (1989)
、Ross (1989)、Montgomery (1991)、Park 
(1996)、Taguchi et al. (2000)、與 Wu (2000) 
等相關資料。 
在連續數據望小特性的案例中，假設有
一組數據 (y1, y2, …, yn)，其與目標值 0 的平
均均方偏差（Mean Squared Deviation）S 可
被描述為 ∑=
=
n
t
tyn
S
1
2 .1  在通訊領域中常用之
10 為基底的對數來表示訊號對雜訊比，其
單位為 dB；且為了與工程上訊號越大越好
的一致觀念，將望小特性的訊號對雜訊比 η 
形式轉換成 )1(log10
1
2∑
=
−= n
t
tyn
η .同理，在連
續數據望大特性的案例中，其與目標值 0 的
平均均方偏差 S 可被描述為 .11
1 2
∑=
=
n
t tyn
S  
其訊號對雜訊比  η 形式亦被轉換為 
)11(log10
1 2
∑
=
−= n
t
tyn
η .其量測單位亦為 dB。 
實驗設計法之直交表以最少的實驗次
數，來處理大量變數的參數設計，變數中的
最佳組合乃利用直交表與訊號對雜訊比 η 
來產生。在此計畫案中，二水準的直交表將
被用來產生新的子代；假若有 Q 個因子（
變數），每個因子有二個水準，則 Ln(2n-1) 之
直交表將被用來進行實驗，其中 n = 2k 表示
列或實驗的次數，k 是大於 1 的整數，2 表
示參與實驗因子的水準數，n−1 表示行或實
驗因子的數目且 Q ≤ n−1。如果 Q < n−1，只
有前面 Q 行被使用，而其餘的 n−1−Q 行則
被忽略。然而每個因子中哪個水準的貢獻度
較大可依據下式來決定：Efl = sum of ηi for 
factor f at level l, 其中 i 是實驗次數的編號
，f 是因子的代號，以及 l 是水準數。 
在傳統差分進化演算法的交叉運算後
，利用可變因子水準之實驗設計法來進行組
合運算，每次任意選擇二組解向量當成每個
因子有二個水準來進行直交表實驗，目的在
於決定哪個因子應選擇哪個水準，主要的依
據為找出每個因子中貢獻度較大的水準。例
如：Ef1 > Ef2，則因子 f 的最佳水準為水準 1
，也就是來自第一組的染色體，如果 Ef1 < Ef2
，則因子 f 的最佳水準為水準 2。所有因子
的最佳水準被選定後，則產生一個新的子代
。這個經由 n 次實驗所產生的新子代擁有相
當好的適應值，可與執行 2Q 次所獲得的結
果相當，此處之 2Q 次為所有實驗的組合次
數。 
（三）強健型差分進化演算法  
本計畫開發之強健型差分進化演算法
，係利用具全域搜尋能力的差分進化演算法
，並加以改良，再結合具系統性推理能力之
可變因子水準之實驗設計法，以系統化推理
取代傳統的隨機機制，來改善差分進化演算
法的交叉運算，開發較佳的新子代。由於可
變因子水準之實驗設計法的加入，強化差分
進化演算法的能力，使得強健型差分進化演
算法可擁有穩健全域和區域的搜尋能力與
快速收斂的性能。研究開發之進化演算法的
步驟如下：  
  8
7. Dai, X. M., Z. G. Chen, R. Feng, X. F. 
Mao, and H. H. Shao, 2002, “Improved 
Algorithm of Pattern Extraction Based 
Mutation Approach to Genetic 
Algorithm,” J. of Shanghai Jiaotong 
University, Vol. 36, pp. 1158-1160. 
8. Davis, L., 1989, “Adapting Operator 
Probabilities in Genetic Algorithms,” Proc. 
of the International Conference on Genetic 
Algorithms ICGA 89, San Mateo, pp. 
61-69. 
9. Dong, Z. Y., M. Lu, Z. Lu, and K. P. 
Wong, 2006, “A differential evolution 
based method for power system planning,” 
IEEE Congress on Evolutionary 
Computation, Vancouver, Canada, pp. 
16-21. 
10. Fan, H. Y., and Lampinen, J., 2003, “A 
trigonometric mutation operation to 
differential evolution,” J. Global Optim., 
Vol. 27, pp. 105-129. 
11. Floudas, C. A. and P. M. Pardalos, 1992, 
Recent Advances in Global Optimization, 
Princeton University Press, New Jersey. 
12. Gen, M. and R. Cheng, 1997, Genetic 
Algorithms and Engineering Design, John 
Wiley and Sons, New York. 
13. Goldberg, D. E., 1989, Genetic 
Algorithms in Search, Optimization and 
Machine Learning, Addison-Wesley, 
Massachusetts. 
14. Hsieh, C. H., J. H. Chou, and Y. J. Wu, 
2002, “Optimal Predicted Fuzzy PI Gain 
Scheduling Controller of Constant Turning 
Force Systems with Fixed Metal Removal 
Rate,” Int. J. of Advanced Manufacturing 
Technology, Vol. 19, pp. 714-721. 
15. Kaelo, P. and M. M. Ali, 2006, “A 
numerical study of modified differential 
evolution algorithms,” European J. of 
Operational Research, Vol. 169, pp. 
1176-1184. 
16. Karaboga, N., 2005, “Digital IIR filter 
design using differential evolution 
algorithm,” EURASIP Journal on Applied 
Signal Processing, Vol. 8, pp. 1269-1276. 
17. Krishna, A. G., 2007, “Optimization of 
surface grinding operations using a 
differential evolution approach”, J. of 
Materials Processing Technology, Vol. 
183, pp. 202-209. 
18. Leung, Y. W. and Y. Wang, 2001, “An 
Orthogonal Genetic Algorithm with 
Quantization for Global Numerical 
Optimization,” IEEE Trans. on 
Evolutionary Computation, Vol. 5, pp. 
41-53. 
19. Mayer, D. G., B. P. Kinghorn and A. A. 
Archer, 2005, “Differential evolution – an 
easy and efficient evolutionary algorithm 
for model optimization,” Agricultural 
Systems, Vol. 83, pp. 315-328. 
20. Michalewicz, Z., 1996, Genetic 
Algorithms + Data Structures = Evolution 
Programs, Springer-Verlag, Berlin. 
21. Montgomery, D. C., 1991, Design and 
Analysis of Experiments, Wiley, New 
York. 
22. Noman, N., and H. Iba, 2005, “Enhancing 
differential evolution performance with 
local search for high dimensional function 
optimization,” in Proc. 2005 Conf. Genetic 
Evolutionary Computation, Washington, 
D. C., pp. 967-974. 
23. Noman, N. and H. Iba, 2008, 
“Accelerating Differential Evolution 
Using an Adaptive Local Search,” IEEE 
Trans. on Evolutionary Computation, Vol. 
12, pp. 107-125. 
24. Park, S. H., 1996, Robust Design and 
Analysis for Quality Engineering, 
Chapman & Hall, London. 
25. Phadke, M. S., 1989, Quality Engineering 
Using Robust Design, Prentice-Hall, New 
Jersey. 
26. Price, K. V., R. M. Storn, and J. A. 
Lampinen, 2005, Differential Evolution: A 
Practical Approach to Global Optimization, 
Springer-Verlag, Berlin. 
27. Rahnamayan, S., H. R. Tizhoosh, and M. 
M. A. Salama, 2008, “Opposition-Based 
Differential Evolution,” IEEE Trans. on 
Evolutionary Computation, Vol. 12, pp. 
64-79. 
28. Renders, J. and H. Bersini, 1994, 
“Hybridizing Genetic Algorithms with 
Hill-Climbing Methods for Global 
Optimization: Two Possible Ways,” Proc. 
of the First IEEE Conf. on Evolutionary 
Computation, Florida, pp. 312-317. 
29. Ross, P. J., 1989, Taguchi Techniques for 
Quality Engineering, McGraw-Hill, 
Singapore. 
30. Saikumar, S. and M. S. Shunmugam, 2006, 
  10
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價值（
簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適合在學術期刊發
表或申請專利、主要發現或其他有關價值等，作一綜合評估。 
 
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
  達成目標 
說明：建立與改良差分進化演算法、加入可變因子水準之實驗設計法增強差分進化演算法
、加入懲罰函數的設計、探討強健型差分進化演算法進化參數的 Sensitivity 與 Scalability
、完成年度報告、與論文投稿。 
□ 未達成目標（請說明，以 100 字為限） 
□ 實驗失敗 
□ 因故實驗中斷 
□ 其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：□已發表 □未發表之文稿 □撰寫中 □無已投稿 
專利：□已獲得 □申請中 無 
技轉：□已技轉 □洽談中 無 
其他：已將研究成果投稿至 SCI 等級之期刊，內容詳見附錄文章。 
 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價值（簡要
敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以 500 字為限） 
發展一套新的進化演算法，用來解決參數設計最佳化問題，並將此成果發表於國內外
之期刊與會議，分享給世界上相關研究領域之研究者與應用者。提供學術研究者與工程設
計者，另一種高效率與高強健性的工具，可使用於解決學術上之最佳化設計與工程設計上
之最佳化問題。研究過程中訓練參與人員研究與分析能力，這些人員未來將可推廣最佳化
進化演算法，並廣泛應用解決真實工程上的最佳化設計問題。 
 
 
 
 
  2
Abstract 
In the paper, a sliding-level orthogonal differential evolution algorithm (SLODEA) is 
proposed to solve the global design optimization problems. The proposed SLODEA is a 
method of combining the sliding-level orthogonal experimental design method (SLOEDM) 
and the differential evolution algorithm (DEA). The DEA has a powerful global exploration 
capability on macro space and uses fewer control parameters. The systematic reasoning 
ability of the orthogonal array with sliding level and response table is used to exploit the 
better individuals on micro space to be potential offspring. Therefore, the proposed SLODEA 
is well enhanced and balanced on exploration and exploitation. In this study, the sensitivity of 
evolutionary parameters for the performance of the presented SLODEA is explored, and the 
SLODEA shows its effectiveness and robustness compared with both the DEA and the 
real-coded genetic algorithm. The global engineering design problems usually encounter a 
large number of design variables, a mix type of both discrete and continuous design variables, 
and many design constraints. The proposed SLODEA is used to solve these global 
engineering design optimization problems, and demonstrates its capability, feasibility, and 
robustness. From the computational experiments, it can be observed that the introduced 
SLODEA can obtain better results and more prominent performance than the methods 
presented in the literatures. 
 
Keywords: Differential evolution algorithm, Sliding level, Experimental design method, 
Engineering design problem. 
 
 
  4
In many science and engineering disciplines, it is common to encounter a large number 
of optimization problems. In addition, the problems of engineering design optimization 
usually include the different type design variables and many design constraints. Those 
practical engineering design problems frequently involve a mix of integer, discrete, and 
continuous variables. The design constraints (e.g., linear, nonlinear, equality, and inequality 
types) always pose great difficulty in the process of engineering design optimization. The 
problem is called a mixed-discrete non-linear programming (MDNLP) problem, which is 
essentially a complex problem with multiple local optima. Since 1960s, there have been 
considerable interests on MDNLP problems (Arora and Huang, 1994). Sandgren (1990) 
proposed a nonlinear branch and bound algorithm for solving nonlinear and discrete 
programming in mechanical design optimization. Fu et al. (1991) used the penalty function 
approach to solve the MDNLP problems. Recently, the GA-based method was used to solve 
the MDNLP problems and had obtained good results (Coello and Montes, 2002; Coello and 
Cortés, 2004; Lemonge and Barbosa, 2004; Rao and Xiong, 2005; Bernardino et al., 2008). 
In solving the MDNLP problems, the particular challenge is that the methods may be trapped 
in the local optima of the objective functions when there are numerous local optima (Rao and 
Xiong, 2005). For that reason, it is still necessary to further develop and seek an efficient and 
robust algorithm to deal with the MDNLP problems. 
The purpose of the work is to develop a highly efficient evolutionary algorithm to solve 
global design optimization problem. In order to seek the optimal breeding in the DEA such 
that the efficiency of the DEA can be further promoted, a new DEA approach is proposed by 
introducing a systematic reasoning way with considering the influence of the scaling factor. 
This proposed new DEA approach is named to be the sliding-level orthogonal differential 
evolution algorithm (SLODEA). The SLODEA combines the sliding-level orthogonal 
experimental design method (SLOEDM) (Taguchi, 1987) with the DEA (Price et al., 2005). 
The SLOEDM, a robust design approach, uses many ideas from statistical experimental 
  6
2. Problem Statements 
In this section, global numerical optimization problems with continuous variables and 
mixed-discrete-continuous non-linear programming problems are stated. 
The following global numerical optimization problem with continuous variables is 
considered. 
Minimize f(X)                                       
subject to  X  ≤ X ≤ X ,                        (2.1) 
and  gk(X) ≤ 0  (k = 1, 2, …, t),                     
where f(X) is an objective function, X = [x1, x2 .., xj,…, xn] is a continuous value vector of n 
design variables, and X  = [ 1x , ..., jx , ..., nx ] and X = [ 1x , ..., jx , ..., nx ] define the 
feasible solution vector spaces. The domain of xj by ],[ jj xx ( j = 1, 2, …, n ) and the feasible 
solution space as ],[ XX  in a design process are denoted. In general, many design problems 
can be cast as the above optimization problem, but it is hard to solve optimally and efficiently 
due to the high-dimensional, non-differentiable, and multi-modal properties. 
The mixed-discrete-continuous non-linear programming problem is expressed as 
following (Rao and Xiong, 2005): 
Minimize f(X)                                          
subject to  gk(X) ≤ 0  (k = 1, 2, …, t), 
jx ≤ xj ≤ jx   (j = 1, 2, …, n),                (2.2) 
X = [ dX , cX ]T, 
dX = [x1, x2, …, xnq, xnq+1, …, xnd]T,             
and     cX = [xnd+1, xnd+2, …, xn]T,                     
where x1, x2, …, xnq are non-negative discrete variables with permissible values equally 
  8
3. SLODEA Approach for Solving Global Optimization Problems 
The SLODEA approach combines the SLOEDM and the DEA. The systematic 
reasoning ability of the SLOEDM is provided to select the better offspring to achieve the 
crossover, and consequently enhance the DEA. The steps of the SLODEA approach are 
described as follows. 
3.1 Steps of the SLODEA 
Step 1: Parameter settings: the population size ps, the crossover rate pc, two scaling 
factors F1 and F2, the weighting factor wp for the penalty function, and the 
number of generations Ng.  
Step 2: Generate ps initial feasible vectors 1iX  ( spi ,,2,1 K= ) by using Algorithm 1, as 
shown in 3.2.2 of Section 3, and evaluate their fitness value from the objective 
function and the penalty function, as shown in 3.2.1 of Section 3. 
Step 3: Initialize the iteration index G = 1. 
Step 4: Set the initial target index i = 1. 
Step 5: Generate the mutated vector GiV  by using the mutation operation according to 
Eq. (3.5) with F = F1, as shown in 3.2.3 of Section 3.  
Step 6: Obtain the trial vector GiU  inherited from 
G
iX  and 
G
iV , determined by the 
crossover rate pc, and evaluate its fitness value from the objective function and 
the penalty function, as shown in 3.2.1 of Section 3.  
Step 7: Let the target index i = i + 1. If i > ps then go to Step 8. Otherwise, return to Step 
5. 
Step 8: Set the initial target index t = 1 + ps. 
Step 9: Generate the mutated vectors GtV 1  and 
G
tV 2  by using the mutation operation 
according to Eq. (3.5) with F = F1 and F = F2, respectively, as shown in 3.2.3 of 
  10
penalization of the unfeasible individuals in the population. The evolutionary method with 
the penalty function, navigating through unfeasible regions by reducing penalty value to 
feasible regions, offers better opportunity to close to feasible regions of the search space than 
the evolutionary algorithm with constraints, limiting search paths to feasible regions only. 
Therefore, in the constrained optimization problem, the evolutionary algorithm with a penalty 
function is easier to find the feasible individuals in a wide design parameter space than the 
evolutionary algorithm with constraints. To clarify this point, it is important to note the 
distinction between feasible and unfeasible individuals. As for the unfeasible individuals, 
each one of them violates a number of constraints included in the range [1, R], where R is the 
number of design constraints. The higher this index is, the larger the penalty should be. Thus, 
the penalty value P is defined as follows. 
∑ −+−=
=
R
j
jjUjjLp UywyLwwP
1
)()( ,                  (3.2) 
where yj is a calculated value depending on the constraint function; Uj and Lj are the upper 
and lower bounds, respectively, of the constraint function; wp is a value which is to 
distinguish between feasible and unfeasible individuals; wL and wU denote the weights; If yj < 
Lj, then wL = 1 and wU = 0; If yj > Uj, then wL = 0 and wU = 1; If Lj ≤ yj ≤ Uj, then wL = 0 and 
wU = 0. Generally speaking, Eq. (3.2) states that each calculated value yj of the constraint 
function should be restricted between its upper bound (Uj) and lower bound (Lj). It would not 
be punished if it is located among the feasible region; otherwise it would be punished by 
multiplying a large number wp. The penalty value should be equal to 0, as the optimization 
process is finished. This is to imply that the values of the design variables do not violate the 
design constraints. 
In the optimization design problem the design constraints, the evolutionary algorithm 
uses the fitness value instead of the objective function value to evaluate solutions because the 
penalty functions are participated. Therefore, the fitness value F is redefined as: 
  12
3.2.3 Mutation operation 
In every generation, each individual vector GiX  ( )spi ,,2,1 K=  in the population 
becomes a target vector. For target vectors GiX ( )spi ,,2,1 K∈ and the best vector GbestX  in 
the current generation G, DEA applies a differential mutation operation to generate a mutated 
individual ,GiV  according to the following equation: 
( ),GrGqGkGjGbestGi XXXXFXV −−++=                  (3.5) 
where ,GjX  ,
G
kX  
G
qX , and 
G
rX  are randomly selected from the population such that j, k, q, 
and r belong to { }sp,,2,1 K  and rqkj ≠≠≠ . The ps ≥ 4 is required, since they are 
different. GbestX  represents the best individual in the current generation G. F is a mutation 
scaling factor which is a positive real number typically less than two and controls the 
evolution rate. In the event that mutation causes an element Gijv  in the vector 
( )GiGijGiGiGi vvvvV ρ...,,...,,, 21= to shift outside the allowable interval ]  ,[ jj xx , and then Gijv  is 
set to jx  if j
G
ij xv <  and jx  if .jGij xv >  The mutated vector GiV  would be used in the 
DEA crossover and the SLOEDM-based crossover as a donor vector for breeding a better 
offspring or trial vector .GiU  
3.2.4 Generating the better offspring by the SLOEDM 
Since the value of scaling factor F can affect the performance of the DEA, we consider 
simultaneously here two values for the scaling factor F to improve the performance. That is, 
the scaling factor F has two levels, 1F  and .2F  Therefore, from Eq. (3.5), it can be seen 
that the mutated individual vector ( )GiGijGiGiGi vvvvV ρ...,,...,,, 21=  depends on the level 
settings of scaling factor F and is called related. As some of the factors (or individuals) are 
  14
Scaling factor 2F  Set 
G
iV 2  to be level 1 
where GiV 1  denotes the vector 
G
iV  obtained from Eq. (3.5) with ,1FF =  and GiV 2  
represents the vector GiV  gotten from Eq. (3.5) having .2FF =  
The signal-to-noise ratio ( )iη  refers to the mean-square-deviation of the objective 
function. Taguchi defined iη  to be, for the cases of the larger-the-better characteristic and 
the smaller-the-better characteristic, respectively, ⎟⎟⎠
⎞
⎜⎜⎝
⎛ ∑−=
=
τ
τη 1 2
11log10
j ij
i y
 and 
,1log10
1
2 ⎟⎟⎠
⎞⎜⎜⎝
⎛ ∑−=
=
τ
τη j iji y  which are measured in decibels, where ni ,,2,1 K= and n is the 
number of experiments for an OA Ln(2n-1). Let ijy  denote the experimental output value of 
the ith row of OA Ln(2n-1), where ,,,2,1 τK=j  and τ  is the number of experiments for 
the ith row of OA. The effects of the various variables to build the response table can be 
defined as the following: 
lEβ  = sum of iη  for variable β  at level l,               (3.6) 
where i is the experiment number, β  is the variable name, and l is the level number. 
The primary goal in conducting this matrix experiment of two-level OA Ln(2n-1) is to 
choose the element, at each variable, from the two individual vectors GiX  and 
G
iV  to be a 
trial individual vectors .GiU  An element, at each variable, is chosen if the lEβ  has the 
highest value in the experimental region. That is, to determine the best level for each variable. 
The best level for a variable is the level that gives the highest value of lEβ  in the 
experimental region. For the two-level problem, if ,21 ββ EE >  the best level is the level 1 
for the βth variable, where ],1[ Q∈β . Otherwise, level 2 is the best one. After the best level 
for each variable is selected, the new individual GiU  is also obtained by combining the 
  16
Step 5: Calculate the effects of the various variables ( 1βE  and ),2βE  where 
.,...,2,1 Q=β  
Step 6: The element of the βth variable of the new individual comes from 1~U , if 
.21 ββ EE >  Otherwise, it comes from 2~U , where .,...,2,1 Q=β  After the 
process for each element at each variable is implemented, the new better 
individual vector GiU  would be obtained. 
Demonstration example:  
Here the test function ( ) ,3
1
2∑=
=j j
zZg  ,2020 ≤≤− jz  is adopted to illustrate the 
SLOEDM-based crossover operation, where [ ].,, 321 zzzZ =  For simplifying the problem, 
the design constraints is not included in the example. The purpose is to generate a better trial 
individual GiU  from a target vector 
G
iX  and a mutated vector .
G
iV  The test function 
( )Zg  would be minimized. 
First, eight individuals, each comprising three variables which correspond to jz  
( )3,2,1=j  of ( )Zg , are randomly produced to be the target vectors. In addition, the scaling 
factor F has two levels, F1 = 0.4 and F2 = 1. The OA L8(27) as shown in Table 1 has been 
chosen, because four variables (F, ,1z  2z , and )3z  happen to less than seven columns of 
the L8(27) In this case, the front four columns (1, 2, 3, and 4) are used to allocate the four 
variables, while the other three columns are ignored. 
Assume that, in the first generation, eight target vectors [ ] [ ]3211312111 ,,,, zzzxxxX iiii ==  
)8,,2,1( K=i  with their function values of test function are randomly generated as 
following: 
[ ] [ ],4,10,5,, 32111 −== zzzX ( ) ;141=Zg  [ ] [ ],4,4,9,, 32112 −−== zzzX ( ) ;113=Zg  
  18
Level 2 18X  -3 1 -4 26 
Next, Table 2 is developed by assigning the values of the level 1 and the level 2 to the level 
cells in Table 1, where we, firstly, assign 1F  to level 1 and 2F  to level 2 in the first column. 
The function values of g(Z) are then calculated. The iη  for each experiment number i is also 
calculated. Then Eq. (3.6) is applied in Table 2 to determine the best level for each variable. 
Below are the details. 
034.107299.28539.20411.31785.26
4,3,2,1
1 −=−−−−=∑= = iiFE η , 
972.161756.45676.47370.30170.38
8,7,6,5
2 −=−−−−=∑= =i iFE η , 
736.126370.30170.38411.31785.26
6,5,2,1
11 −=−−−−=∑= =i izE η , 
270.142756.45676.47299.28539.20
8,7,4,3
21 −=−−−−=∑= =i izE η , 
628.151756.45676.47411.31785.26
8,7,2,1
12 −=−−−−=∑= = iizE η , 
378.117370.30170.38299.28539.20
6,5,4,3
22 −=−−−−=∑= =i izE η , 
170.133676.47170.38539.20785.26
7,5,3,1
13 −=−−−−=∑= =i izE η , 
and         836.135756.45370.30299.28411.31
8,6,4,2
23 −=−−−−=∑= =i izE η . 
The best level of each variable is decided by the larger value of either 1βE  or ,2βE  
where β = F, z1, z2, and z3. For example, the best level is level 1 (i.e., F1), for variable F, 
owing to ;21 FF EE >  the best level is also level 1, for variable ,1z  whose value is -0.2 
come from z1 of 181V  based on the level F1, owing to .21 11 zz EE >  The best trial individual  
[ ]32118 ,, zzzU = = [-0.2, 1, 0.8] is thus bred, as given in Table 2. Obviously, the function value 
of the best trial individual as generated by the SLOEDM-based crossover operation is 1.68. 
That is much better than the function values for the mutated and target individuals 181V , 
1
82V , 
  20
4. Design Examples and Comparisons 
Firstly, in this section, the evolutionary parameters for the proposed SLODEA approach 
are explored and the performance of the SLODEA is evaluated by using some nonlinear 
programming optimization problems with function constraints and continuous variables. 
Secondly, in order to identify any improvements in the SLODEA approach due to the 
SLOEDM, the DEA and RGA approaches are used to solve those nonlinear problems. Then, 
the results of the proposed SLODEA are compared with those of the DEA and RGA methods. 
Thirdly, the SLODEA approach is used to solve the mixed-discrete-continuous nonlinear 
design problems in engineering design field and the obtained results are compared with those 
reported in the literatures. 
4.1. Solving nonlinear test functions and exploring sensitivity of evolutionary parameters for 
the SLODEA approach 
In this study, the nonlinear programming optimization problems as shown in Table 3 are 
used to test the performance of the proposed SLODEA approach. The types of these test 
functions f1(X), f2(X), f3(X), and f4(X), as shown in Table 3, include quadratic, linear, 
polynomial, and nonlinear forms. The constraints of the test functions have linear inequalities, 
nonlinear equations, and nonlinear inequalities, and dimensions of the test functions are 13, 8, 
7, and 10, respectively. In this manner, these test functions have so many local minima that 
they are challenging enough for performance evaluation (Hock and Schittkowski, 1981; 
Floudas and Pardalos, 1992; Michalewicz, 1996).  
In these test functions f1(X), f2(X), f3(X), and f4(X), there are 13, 8, 7, and 10 variables 
plus a scaling factor F, respectively, so a selected two-level OA needs to have 14, 9, 8, or 11 
columns to allocate these variables and to conduct sliding-level orthogonal experiments. 
Therefore, the two-level OA L16(215) is adopted for experiments in the SLODEA for solving 
the test functions f1(X), f2(X), f3(X), and f4(X), because it has 15 columns. The front 14, 9, 8, 
  22
satisfy the first stopping criterion) for functions f1(X), f2(X), f3(X), and f4(X). The solution 
accuracy of each design variable (x) is set to be 10-6. Each test function was performed in 30 
independent runs and the following results were recorded: 1) the best value, 2) the mean 
function value, 3) the standard deviation of the function values, 4) the number of mean 
function calls, and 5) the standard deviation of the function calls. Therein, the equation of 
gsss Nnppp ×+×++ )]1()10/([ , derived from the Section 3.1, where ps is population size, n 
is the experimental number of the SLOEDM, and Ng is the number of generations, was used 
to compute the number of function calls, as the first stopping criterion had been satisfied. 
Tables 4-10 show the SLODEA performance on function f1(X) at ps = 300, 200, 150, 120, 
100, 80, and 50, respectively, with different combinations on two scaling factors F1 and F2 in 
30 independent runs. Table 11, summarized from Tables 4-10, shows the best performance by 
using the SLODEA on function f1(X) at ps = 300, 200, 150, 120, 100, 80, and 50, respectively, 
with their corresponding combinations of two scaling factors F1 and F2 in 30 independent 
runs. It can be seen from Table 11 that both the best value and the mean function value are 
-15 and the standard deviation of the function values is 0 at ps = 300, 200, 150, 120, 100, 80, 
and 50 with their corresponding combination of two scaling factors F1 and F2. It means the 
SLODEA can satisfy the first stopping criterion of f1(X) in each independent run, as the 
population size ps is 300, 200, 150, 120, 100, 80, and 50 with their corresponding 
combination of two scaling factors F1 and F2. It can be observed that as the population size 
with its corresponding combination of two scaling factors F1 and F2 decreases, the number of 
mean function calls shows a decreasing tendency. This means that the smaller mean function 
calls could be obtained as the smaller population size with its corresponding combination of 
two scaling factors F1 and F2 was adopted. In addition, it can be found from Table 11 that the 
combinations of two scaling factors F1 and F2 are 0.4 and 0.6 for F1 with 1.2 and 1.4 for F2, 
respectively, while other combinations (e.g., 0.2 and 0.8 for F1 with any assigned value of the 
  24
decreasing tendency. This means that the smaller mean function calls could be obtained as the 
smaller population size with its corresponding combination of two scaling factors F1 and F2 
was adopted. In addition, it can be found from Table 19 that the combinations of two scaling 
factors F1 and F2 are 0.4 and 0.6 for F1 with 1.0, 1.2, and 1.4 for F2, respectively, while other 
combinations (e.g., 0.2 and 0.8 for F1 with any assigned value of the scaling factors F2, 
respectively) are not shown in this case study. From above discussion, the better evolutionary 
parameters for finding the optimal value and smaller number of the mean function calls for 
test function f2(X) by using the SLODEA approach are ps = 50, pc = 0.9, F1 = 0.6, and F2 = 
1.4. 
Tables 20-26 show the SLODEA performance on function f3(X) at ps = 300, 200, 150, 
120, 100, 80, and 50, respectively, with different combinations on two scaling factors F1 and 
F2 in 30 independent runs. Table 27, summarized from Tables 20-26, shows the best 
performance by using the SLODEA on function f3(X) at ps = 300, 200, 150, 120, 100, 80, and 
50, respectively, with their corresponding combinations of two scaling factors F1 and F2 in 30 
independent runs. It can be observed from Tables 20-26 that the number of function calls is a 
sizeable number as the scaling factor F1 = 0.2 with any assigned value of the scaling factors 
F2, respectively, at ps = 300, 200, 150, 120, 100, 80, and 50. The SLODEA can satisfy the 
first stopping criterion of f3(X) but not happen in each independent run, and get poor 
performance in the mean function value. It can be seen from Table 27 that both the best value 
and the mean function value are 680.630 and the standard deviation of the function values is 
0 at ps = 300, 200, 150, 120, 100, 80, and 50 with their corresponding combination of two 
scaling factors F1 and F2. This means the SLODEA can satisfy the first stopping criterion of 
f3(X) in each independent run, as the population size ps is 300, 200, 150, 120, 100, 80, and 50 
with their corresponding combination of two scaling factors F1 and F2. It can be also 
observed that as the population size with its corresponding combination of two scaling factors 
F1 and F2 decreases, the number of mean function calls shows a decreasing tendency, except 
  26
combination of two scaling factors F1 and F2. This means the SLODEA can satisfy the first 
stopping criterion of f4(X) in each independent run, as the population size ps is 300, 200, 150, 
120, 100, 80, and 50 with their corresponding combination of two scaling factors F1 and F2. It 
can be also observed that as the population size with its corresponding combination of two 
scaling factors F1 and F2 decreases, the number of mean function calls, which value is 
repeated from large to small, shows a tendency similar to a sine wave. The smaller mean 
function calls could be obtained as the smaller population size with its corresponding 
combination of two scaling factors F1 and F2 was adopted. In addition, it can be found from 
Table 35 that the combinations of two scaling factors F1 and F2 are 0.4 and 0.6 for F1 with 1.0, 
1.2, and 1.4 for F2, respectively, while other combinations (e.g., 0.2 and 0.8 for F1 with any 
assigned value of the scaling factors F2, respectively) are not shown in this case study. From 
above discussion, the better evolutionary parameters for finding the optimal value and 
smaller number of the mean function calls for test function f4(X) by using the SLODEA 
approach are ps = 50, pc = 0.9, F1 = 0.6, and F2 = 1.4. 
In a word, from the detailed experiments, it can be understood that the number of mean 
function calls shows a decreasing tendency, as the population size decreases and the 
combinations of two scaling factors F1 and F2 are 0.4 and 0.6 for F1 with 1.0, 1.2, and 1.4 for 
F2, respectively, by using the SLODEA approach on the test functions f1(X), f2(X), f3(X), and 
f4(X). However, as the combinations of two scaling factors F1 and F2 are 0.2 and 0.8 for F1 
with any assigned value of the scaling factors F2, respectively, at any assigned population size, 
the SLODEA approach cannot have prominent performance. 
4.2. Comparative study on the SLODEA, DEA, and RGA approaches 
In order to identify any improvements in the SLODEA approach due to the SLOEDM, 
the DEA and RGA approaches are used to solve those nonlinear problems and the results of 
the proposed SLODEA approach are compared with those of the DEA and RGA methods.  
  28
number of mean function calls on all test functions than the proposed SLODEA and 
the DEA.  
The proposed SLODEA combines the SLOEDM and DEA. The DEA has a powerful 
global exploration capability on macro space. The SLOEDM is based on the systematic 
reasoning ability of the orthogonal array with sliding level and response table to exploit the 
better individuals on micro space and to accelerate convergence to the global solution. 
Therefore, the SLODEA has a better performance than the DEA and RGA methods, and is 
well enhanced and balanced on exploration and exploitation. We could conclude that the 
proposed SLODEA approach is very feasible in solving the nonlinear programming 
optimization problems. 
4.3 Solving engineering design optimization problems 
The SLODEA approach is used to solve the mixed-discrete-continuous nonlinear design 
problems in engineering design field and the obtained results are compared with those 
reported in the literatures. 
Example 1: Design of a pressure vessel  
The problem of design of a cylindrical pressure vessel is considered here, according to 
the ASME boiler and pressure vessel code. The design vector X with four design variables, 
which are, respectively, the shell thickness Ts, spherical head thickness Th, shell radius R, and 
shell length L, is specified as X = [Ts, Th, R, L]T = [x1, x2, x3, x4]T. The objective function is to 
minimize the total cost of material, forming, and welding of the pressure vessel.  
The first mathematical model of the problem was described as (Sandgren, 1990; Fu et al., 
1991; Shih and Lai, 1995; Rao and Xiong, 2005) 
Minimize 3
2
14
2
1
2
32431 8621.191661.37781.16224.0)( xxxxxxxxxXf +++= ,  (4.1) 
subject to 
  30
50 with the combination of two scaling factors F1 and F2 at 0.6 for F1 with 1.0, 1.2, and 1.4 
for F2, respectively. The best value and smaller number of the mean function calls by using 
the SLODEA approach are obtained on the example of the pressure vessel design, as the 
evolutionary parameters are ps = 50, pc = 0.9, F1 = 0.6, and F2 = 1.2. 
The best design solutions obtained by using the proposed SLODEA approach and the 
methods given by Sandgren (1990), Fu et al. (1991), Shih and Lai (1995), and Rao and Xiong 
(2005) are given in Table 41. It can be seen, from Table 41, that the proposed SLODEA 
approach can give the better result than the methods given by Sandgren (1990), Fu et al. 
(1991), Shih and Lai (1995), and Rao and Xiong (2005). Furthermore, the robustness analysis 
for the SLODEA is shown in Table 42. It can be seen that the SLODEA can satisfy the first 
stopping criterion in each independent run, and even the average function value is better than 
those best values obtained from Sandgren (1990), Fu et al. (1991), Shih and Lai (1995), and 
Rao and Xiong (2005). 
The second mathematical model of the problem was depicted as (Coello and Montes, 
2002; Coello and Cortés, 2004; Lemonge and Barbosa, 2004; Bernardino et al., 2008) 
Minimize 3
2
14
2
1
2
32431 84.191661.37781.16224.0)( xxxxxxxxxXf +++= ,    (4.2) 
subject to 
00193.0)( 311 ≥−= xxXg , 000954.0)( 322 ≥−= xxXg , 
01728750
3
4)( 334
2
33 ≥×−+= ππ xxXg , 0240)( 44 ≥−= xXg , 
1875.10625.0 1 ≤≤ x , 1875.10625.0 2 ≤≤ x , 20010 3 ≤≤ x , and 20010 4 ≤≤ x , 
where x1 and x2 represent discrete values, integer multiples of 0.0625 inches, while x3 and x4 
are defined as continuous variables. The solution accuracy of a continuous variable is set to 
be 10-6. The value of π is assumed to be 3.14159265. 
In the computational experiments for the pressure vessel design using the proposed 
SLODEA, the evolutionary parameters suggested from the Section 4.1 of the study are that 
  32
Table 45. It can be seen that the SLODEA can satisfy the first stopping criterion in each 
independent run, and even the average function value is better than those best values obtained 
from Coello and Montes (2002), Coello and Cortés (2004), Lemonge and Barbosa (2004), 
and Bernardino et al. (2008). In addition, the number, 9871, of mean function calls by using 
the SLODEA is far smaller than the numbers of 150000, 80000, and 80000 given from Coello 
and Cortés (2004), Lemonge and Barbosa (2004), and Bernardino et al. (2008), respectively. 
This means the SLODEA has a prominent ability to get the optimal solution.    
Example 2: Design of a speed reducer 
The discrete design variables for a speed reducer are considered to be the face width (b), 
module of teeth (m), number of teeth on pinion (n), length of shaft 1 between bearings (l1), 
length of shaft 2 between bearings (l2), diameter of shaft 1 (d1), and diameter of shaft 2 (d2). 
Let design vector be X = [b, m, n, l1, l2, d1, d2]T = [x1, x2, x3, x4, x5, x6, x7]T. The objective of 
this example is to minimize the total weight of the speed reducer with the limitation 
constraints on the bending stress and surface stress of the gear teeth, transverse deflections 
and stress on shafts 1 and 2 due to the transmitted force, and stresses in shafts 1 and 2. It was 
mathematically formulated as follows (Coello and Cortés, 2004; Bernardino et al., 2008). 
,)(7854.0)(477.7
)(508.1)0934.439334.143333.3(7854.0)(Minimize
2
75
2
64
3
7
3
6
2
7
2
613
2
3
2
21
xxxxxx
xxxxxxxXf
+++
++−−+=
(4.3) 
subject to 
,0127)( 13
2
2
1
11 ≤−= −−− xxxXg  ,015.397)( 2322112 ≤−= −−− xxxXg  
,0193.1)( 46
3
4
1
3
1
23 ≤−= −−− xxxxXg  ,0193.1)( 473513124 ≤−= −−− xxxxXg  
,01
110
]109.16))/(745[()( 3
6
2/162
324
5 ≤−×+= x
xxxXg  
  34
1.4 for F2, respectively. Additionally, the number of mean function calls is far smaller than 
the number of 36000 preset in the second stopping criterion, as the population size ps is 50 
with the combination of two scaling factors F1 and F2 at 0.4 and 0.6 for F1 with 1.0, 1.2, and 
1.4 for F2, respectively. The best value and smaller number of the mean function calls by 
using the SLODEA approach are obtained on the example of the speed reducer design, as the 
evolutionary parameters are ps = 50, pc = 0.9, F1 = 0.4, and F2 = 1.0. 
The best design solutions obtained by using the proposed SLODEA approach and the 
methods given by Coello and Cortés (2004) and Bernardino et al. (2008) are given in Table 
47. It can be seen, from Table 47, that the proposed SLODEA approach can give the better 
result than the methods given by Coello and Cortés (2004) and Bernardino et al. (2008). 
Furthermore, the robustness analysis for the SLODEA is shown in Table 48. It can be 
observed that the SLODEA can get the final fitness value of 2994.341764 in each 
independent run, and even the average function value is better than those best values obtained 
from Coello and Cortés (2004) and Bernardino et al. (2008). In addition, the number, 5189, of 
mean function calls by using the SLODEA is far smaller than the numbers of 150000 and 
36000 given from Coello and Cortés (2004) and Bernardino et al. (2008), respectively. This 
means the SLODEA has an outstanding ability to get the optimal solution. 
 
 
  36
Acknowledgement 
The author thanks Y. J. Liu and A. L. Zheng for their assistance in implementing some of 
optimization experiments. This work was supported in part by the National Science Council, 
Taiwan, R.O.C., under Grant Number NSC99-2221-E153-001. 
  38
12. Gämperle, R., S. D. Müller, and P. Koumoutsakos, 2002, “A Parameter Study for 
Differential Evolution,” in Proc. WSEAS Int. Conf. Advances Intell. Syst., Fuzzy Syst., 
Evol. Comput., pp. 293–298. 
13. Ho, W. H., J. H. Chou, and C. Y. Guo, 2010, “Parameter Identification of Chaotic 
Systems Using Improved Differential Evolution Algorithm,” Nonlinear Dynamics, Vol. 
61, pp. 29-41. 
14. Hock, W. and K. Schittkowski, 1981, Test Examples for Nonlinear Programming Codes, 
Lecture Notes in Economics and Mathematical Systems, Vol. 187, Springer-Verlag, 
Berlin. 
15. Jiang, L. Q., Y. F. Qiu and G. B. Liu, 2008, “A Modified Differential Evolution 
Algorithm for Linear System Approximation,” Electronics Optics and Control, Vol. 15, 
pp. 35-37. 
16. Karaboga, N., 2005, “Digital IIR Filter Design Using Differential Evolution Algorithm,” 
EURASIP Journal on Applied Signal Processing, Vol. 8, pp. 1269-1276. 
17. Lemonge, A. C. C. and H. J. C. Barbosa, 2004, “An Adaptive Penalty Scheme for Genetic 
Algorithms in Structural Optimization,” Int. J. for Numerical Methods in Engineering, 
Vol. 59, pp. 703-736. 
18. Liu, J. and J. Lampinen, 2005, “A Fuzzy Adaptive Differential Evolution Algorithm,” 
Soft Computing, Vol. 9, pp. 448-462. 
19. Michalewicz, Z., 1996, Genetic Algorithms + Data Structures = Evolution Programs, 
Springer-Verlag, Berlin. 
20. Noman, N. and H. Iba, 2005, “Enhancing Differential Evolution Performance with Local 
Search for High Dimensional Function optimization,” in Proc. 2005 Conf. Genetic 
Evolutionary Computation, Washington, D. C., pp. 967-974. 
21. Noman, N. and H. Iba, 2008, “Accelerating Differential Evolution Using an Adaptive 
Local Search,” IEEE Trans. on Evolutionary Computation, Vol. 12, pp. 107-125. 
22. Peng, B., B. Liu, F. Y. Zhang, and L. Wang, 2009, “Differential Evolution 
Algorithm-based Parameter Estimation for Chaotic Systems,” Chaos, Solitons and 
Fractals, Vol. 39, pp. 2110-2118. 
23. Price, K. V., R. M. Storn, and J. A. Lampinen, 2005, Differential Evolution: A Practical 
Approach to Global Optimization, Springer-Verlag, Berlin. 
  40
 
 
Table 1.  L8(27) OA  
 
 
 
Experiment 
number 
Variables 
A B C D E F G 
Column numbers 
1 2 3 4 5 6 7 
1 1 1 1 1 1 1 1 
2 1 1 1 2 2 2 2 
3 1 2 2 1 1 2 2 
4 1 2 2 2 2 1 1 
5 2 1 2 1 2 1 2 
6 2 1 2 2 1 2 1 
7 2 2 1 1 2 2 1 
8 2 2 1 2 1 1 2 
 
  42
 
 
Table 3. Test functions 
∑−∑−+++=
==
13
5
4
1
2
43211 55555)(
i
i
i
i xxxxxxXf , 
subject to 
,1022,1022 121031111021 ≤+++≤+++ xxxxxxxx  ,08 101 ≤+− xx  
,08,1022 112121132 ≤+−≤+++ xxxxxx  ,08 123 ≤+− xx   
,02,02 11761054 ≤+−−≤+−− xxxxxx  ,02 1298 ≤+−− xxx  
.10,12,11,10,1000,9...,,1,10 13 ≤≤=≤≤=≤≤ xixix ii  
3212 )( xxxXf ++= , 
subject to 
,0)(0025.01,0)(0025.01 47564 ≥−+−≥+− xxxxx  
,0333.8333310033252.833,0)(01.01 146158 ≥+−−≥−− xxxxxx  
,025001250000,012501250 55383442572 ≥+−−≥+−− xxxxxxxxxxx  
.8...,,4,100010,3,2,100001000,10000100 1 =≤≤=≤≤≤≤ ixixx ii  
,8104710
)11(3)12(5)10()(
7676
4
7
2
6
6
5
2
4
4
3
2
2
2
13
xxxxxxx
xxxxXf
−−−++
+−++−+−=
 
subject to 
,05432127 5
2
43
4
2
2
1 ≥−−−−− xxxxx  ,01037282 542321 ≥+−−−− xxxxx  
,08623196 7
2
6
2
21 ≥+−−− xxxx  ,0115234 7623212221 ≥+−−+−− xxxxxxx  
.7...,,1,1010 =≤≤− ixi  
,45)7()10(2)11(75)1(2
)3()5(4)10(1614)(
2
10
2
9
2
8
2
7
2
6
2
5
2
4
2
32121
2
2
2
14
+−+−+−++−
+−+−+−+−−++=
xxxxx
xxxxxxxxxXf
 
subject to 
,09354105 8721 ≥−+−− xxxx  ,0217810 8721 ≥−++− xxxx  
,0122528 10921 ≥++−− xxxx  ,0402)6(85 423221 ≥++−−−− xxxx  
,012072)3(4)2(3 4
2
3
2
2
2
1 ≥++−−−−− xxxx  
,06142)2(2 6521
2
2
2
1 ≥+−+−−− xxxxxx  
,0303)4(2)8(5.0 6
2
5
2
2
2
1 ≥++−−−−− xxxx  
,07)8(1263 10
2
921 ≥+−−− xxxx  .10...,,1,1010 =≤≤− ixi  
 2
非常豐富，包括：智慧型系統與控制、智慧型多媒體應用、智慧服務系統、模
型建模與模擬、模糊理論與方法、數值最佳化、類神經網路、資料探勘、文字
探勘、影像處理、虛擬影音應用、…等等，涵蓋了機器學習、智慧型控制之理
論、技術、和應用等各個層面。 
除論文發表外，會議中也有三場邀請演講，其中由中國大陸的學者 
Seong-Whan Lee 演講，主題針對機器學習對腦科學的挑戰，說明了機器學習未
來的發展，其演講內容提供我未來研究方向上之參考。 
本人與學生周秉毅所共同合作完成的論文 “Solving Japanese puzzles by 
Genetic Algorithms” 被安排在7月11日上午之口頭報告 Intelligent Systems and 
Control 的場次中發表，在會議中有多位學者提出問題和我們討論，並彼此交換
心得，使我們獲益良多。此外，在會議期間，本人參加的論文發表場次以人工
智慧、機器學習等課題為主，在會中聽取演講者報告並參與討論及交換心得，
深感獲益匪淺。 
 
二、與會心得： 
各國的學者專家共聚一堂，彼此交換研究心得，發表新的研究成果，參與
此次國際會議以及在中國桂林的所見所聞，收獲良多，且有下列幾點心得： 
(1) 從各國之論文發表，發現台灣學者的研究相當多樣性，在實務上的應用也越
來越廣泛。 
(2) 人工智慧與機器學習的應用越來越廣泛與純熟，在醫學與生物領域而言，將
是未來研究的一大趨勢，值得台灣學者加以重視此方面之研究。 
(3) 亞洲國家的研究學者參加國際研討會的人數非常多，國內之學者、老師、與
學生充分的參與研討會，不僅增加台灣在世界的知名度，且促進國際合作並
進行國民外交，希望國科會未來能多給予支持與鼓勵。 
 
三、建議： 
1. 此次國內學者與研究生在論文發表量與出席人數方面，均相當踴躍 (包含自
費參加者)，同時也建議國科會與教育部未來能多提供碩、博士生出席國際會
議之名額與經費，培養本國碩、博士生出國參加國際會議的經驗與國際觀，
SOLVING JAPANESE PUZZLES BY GENETIC ALGORITHMS 
JINN-TSONG TSAI, PING-YI CHOU 
Department of Computer Science, National Pingtung University of Education, Pingtung 900, Taiwan. 
E-MAIL: jttsai@mail.npue.edu.tw, em099105mail.npue.edu.tw
Abstract: 
A genetic algorithm (GA) with the condensed encoding 
and the improved fitness function is used to solve Japanese 
puzzles. In this study, the condensed encoding can make sure 
that the chromosome is a feasible solution in rows for 
Japanese puzzles. In the reconstruction process of a Japanese 
nonogram, the numbers in the left column are used as 
encoding conditions, and the numbers in the top row with the 
improved fitness function are employed to evaluate the 
reconstruction result. From the computational experiments, 
the GA is effectively applied to solve a Japanese puzzle. 
Keywords:  
Genetic algorithms; Condensed encoding; Japanese 
puzzles. 
1. Introduction 
Genetic algorithms (GAs) are an important skill for 
solving optimization problems [1-3]. In the past few years, 
the GA has received much attention from the combinatorial 
optimization community, e.g., the travelling salesman 
problem (TSP) [4] and job-shop scheduling problem (JSP) 
[5-9]. In recent days, a Japanese puzzle is a fascinating 
puzzle that can be found in several popular magazines. 
When it is a small set, it is solvable using simple logic rules 
and has a lot of fun. But, it is sometimes not easy to find the 
solution for humans, when it becomes a larger superset, 
because it is a NP-complete and constrained combinatorial 
optimization problem [10-17]. Hence, it is challenging 
enough to solve a Japanese puzzle for any person. The GA 
suggests the condensed encoding, the improved fitness 
function, the modified crossover, and the modified mutation 
for solving a Japanese puzzle. 
2. Problem Statements 
Japanese puzzles, also known as nonograms, are 
popular games, which are the grid of N rows and M 
columns with numbers placed on the left rows and top 
columns, as shown in Figure 1. The numbers represent how 
many blocks must be filled in the grid and the order in 
which they appear. The blocks have to be separated by at 
least one blank block if there are two and more numbers 
[11-13]. For example, (2,2) in the first row means that in 
that row two pairs of two cells need to be painted with one 
or more white spaces between them. 
3. Solving Japanese puzzles by GA 
3.1 Condensed encoding for a Japanese puzzle and 
improved fitness function 
In reconstruction process of a Japanese puzzle, the 
horizontal numbers are used as encoding conditions, and 
the vertical numbers are employed to evaluate the 
reconstruction result. 
We define a line segmentation Li=(li1, li2, …, lij, …, liM), 
corresponding to a row of a Japanese puzzle, where i ∈[1, 
N]. The numbers of line segmentation correspond to the 
alternating black and white segments. The encoding is 
conducted to be lij =0, if it is white, and lij =1, if it is black. 
Then, the black segments are considered to be implicitly 
expressed. Therefore, the condensed encoding only shows 
the actual white pixels and the condensed black pixels. The 
advantage of the condensed encoding makes sure that the 
numbers of the line segmentation are mapped to be a 
feasible solution in all rows. In addition, the search space 
for the GA would reduce to ∏
=
N
i
iR
1
, where Ri is the 
possible solutions in each row. 
 
 
2
 
6
 
8
 
9
 
9
 
9 
 
9 
 
9 
 
9 
 
9 
 
8
 
6
 
2
2, 2              
4, 4              
5, 5              
13              
13              
785
2011 IEEE978-1-4577-0308-9/11/$26.00 ©
Proceedings of the 2011 International Conference on Machine Learning and Cybernetics, Guilin, 10-13 July, 2011
(R1 R2 …Sp Sp+1 … SN) and 
(S1 S2 …Rp Rp+1 … RN), 
where, for example, R1 is the first row condensed encoding 
of one puzzle and S1 is the first row condensed encoding of 
another puzzle. This modified crossover operator does not 
swap genes, thus the feasibility in rows is ensured. 
3.4 Mutation operation 
The mutation operator is also modified to work on the 
row individual. Once a gene of 0s or 1s must be mutated, it 
shifts to another position on its row individual, but each of 
1s does not adjoin. The operation would make sure the 
feasibility in rows. 
4. Computational results 
The GA is applied to solve the Japanese puzzles 
“Heart” and “Bear”, as shown in Figures 1 and 3. It 
includes the condensed encoding, the improved fitness 
function, a roulette wheel for selection, the modified 
crossover, and the modified mutation. Under the condensed 
encoding, the search space sizes in “Heart” and “Bear” are, 
respectively, 1.642×109 rather than 212×13 (=9.134×1046, 
using a binary encoding) and 5.178×1020 instead of 2225 
(=5.392×1067, using a binary encoding). The following 
evolutionary environments are used: the population size ps 
is 100, the crossover rate pc is 0.9, and the mutation rate pm 
is 0.05. The stopping condition is the number of function 
evaluations is 100000. The two Japanese puzzles have been 
solved by the improved GA. Hence, we could conclude that 
the improved GA is an approach for solving the Japanese 
puzzle. 
5. Conclusions 
In this paper, the GA is improved to solve Japanese 
puzzles. The GA includes the condensed encoding, the 
improved fitness function, the modified crossover, and the 
modified mutation. In addition, under the condensed 
encoding, the search space in a Japanese puzzle would 
reduce to ∏
=
N
i
iR
1
instead of 2N×M by using a binary 
encoding. From the computational experiments, the 
improved GA, in general, can be used to solve Japanese 
puzzles.  
 
 
(a) 
 
Figure 3 (a) A Japanese nonogram. (b) Its corresponding solution 
“Bear”. 
 Acknowledgement 
This work is partially supported by the National 
Science Council, Taiwan, Republic of China, under grant 
number NSC99-2221-E153-001. 
References 
[1] D. E. Goldberg, Genetic Algorithms in Search, 
Optimization and Machine Learning, Addison-Wesley, 
Massachusetts, 1989. 
[2] Z. Michalewicz, Genetic Algorithms + Data Structures 
= Evolution Programs, Springer-Verlag, Berlin, 1996. 
[3] M. Gen and R. Cheng, Genetic Algorithms and 
Engineering Design, John Wiley and Sons, New York, 
1997. 
[4] P. Larranaga, C. M. H. Kuijpers, R. H. Murga, I. Inza, 
and S. Dizdarevic, “Genetic algorithms for the 
travelling salesman problem: A review of 
representations and operators,” Artificial Intelligence 
Review, Vol. 13, pp. 129–170, 1999. 
[5] M. Gen, Y. Tsujimura and E. Kubota, “Solving 
787
Proceedings of the 2011 International Conference on Machine Learning and Cybernetics, Guilin, 10-13 July, 2011
國科會補助計畫衍生研發成果推廣資料表
日期:2011/08/05
國科會補助計畫
計畫名稱: 強健且最佳參數設計之進化演算法於機械設計加工與控制系統之研究
計畫主持人: 蔡進聰
計畫編號: 99-2221-E-153-001- 學門領域: 資訊技術及系統整合
無研發成果推廣資料
期刊論文 4 4 100% 
J. T. Tsai, P. Y. Chou, and 
J. C. Fang, ’Learning 
Intelligent Genetic 
Algorithms Using Japanese 
Nonograms,’ IEEE Trans. 
on Education, 2011. (SCI) 
(NSC99-2221-E153-001) 
J. T. Tsai, W. H. Ho, and J. 
H. Chou, and C. Y. 
Guo, ’Optimal 
Approximation of Linear 
Systems Using 
Taguchi-Sliding-Based 
Differential Evolution 
Algorithm,’ Applied Soft 
Computing, Vol. 11, No. 2, 
pp. 2007-2016, 2011. 
(SCI/EI) 
(NSC96-2221-E153-002-MY2) 
J. T. Tsai, ’Robust 
Optimal-Parameter Design 
Approach for Tolerance 
Design Problems,’ 
Engineering Optimization, 
Vol. 42, No. 12, pp.
1079-1093, 2010. (SCI/EI) 
(NSC96-2221-E153-002-MY2)
K, M. Lee, J. T. Tsai, T. K. 
Liu, and J. H. 
Chou, ’Improved Genetic 
Algorithm for 
Mixed-Discrete-Continuous 
Design Optimization 
Problems,’ Engineering 
Optimization, Vol. 42, No. 
10, pp. 927-941, 2010. 
(SCI/EI) 
(NSC96-2221-E153-002-MY2)
國外 論文著作 
研究報告/技術報
告 0 0 100% 
篇 
 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
