 1
報告內容 
一、前言 
個人軟體程序(Personal Software Process，PSP)[1]為卡內基美隆大學軟體工程學院
(Software Engineering Institute，SEI)[2,3]的Watt S. Humphrey所提出，主要是透過計畫、
追蹤、測量與分析等方法來改善個人軟體開發的流程，以期提升個人程式品質與生產力
(productivity)，並促進其軟體流程的可預測性(predictability)。個人軟體程序的觀念與方
法引起業界極大的迴響，其所累積的豐富資料證實，個人軟體程序可以幫助程式開發人
員了解其個人的能力、協助軟體專案的規劃與管理、有效地降低軟體缺陷(defect)的數目
與密度(density)和提升個人生產力，使得程式開發人員能在預計的時間和成本內開發出
高品質的軟體。 
 雖然個人軟體程序對於提升程式的品質與生產力有相當大的助益，然而要改善個人
開發軟體的流程首先必需累積其流程的相關數據(process data)：包含程式大小(size)、各
個流程階段(process phase)所使用的時間、缺陷數目、缺陷型態(type)及缺陷修正時間(fix 
time)等資料，以瞭解其流程的現狀和問題，作為改善個人開發流程的基礎。不過，紀錄
這些流程資料並非一項簡單的工作，即使個人軟體程序提供設計相當良好的各式資料表
格，紀錄這些資料仍需要相當大的恆心與毅力。特別是程式開發人員往往有一個迷思，
認為流程資料的紀錄是額外的負擔(overhead)，只會造成程式開發的延遲，因而不願意
持續和確實地紀錄這些資料，也使得個人軟體程序的好處無法獲得落實。 
 因此，一個能減輕流程資料紀錄的負擔，協助程式開發人員分析其資料的工具，便
顯得相當重要。特別是編譯階段(compile phase)與測試階段(test phase)所需紀錄的缺陷及
其修正時間等資料，不但資料項目較多，逐項紀錄的過程亦較為繁複，經常是程式開發
人員最頭痛的地方[4]。特別是開發人員在進行程式撰寫與除錯工作時，往往專注於眼前
的程式碼或待解的問題上，極易忽略追蹤累計的時間或缺陷，致使資料的紀錄不完整或
不正確。由於程式開發人員一般均使用 IDE工具來開發程式，若能在程式開發的同時，
IDE工具便能自動記錄編譯與測試階段的時間與缺陷等相關資料，不但可以減輕程式開
發人員紀錄資料的負擔，獲得較正確的時間與缺陷資料，也將有助於提高程式開發人員
使用個人軟體程序的意願。 
二、研究目的 
有鑒於自動紀錄程式開發流程相關資料的重要性，本研究計劃提出一個測試時間與
缺陷的紀錄與分析工具−TDAT (Test time and Defect Analysis Tool)，透過與 Java IDE開發
平台的結合，協助程式開發人員在程式撰寫的同時，自動記錄程式的大小、編譯及測試
階段所花費的時間與所排除的缺陷等相關資料，以減輕紀錄流程資料的負擔。同時提供
這些資料的分析，以協助程式開發人員瞭解自己的生產力、程式的品質、常出現的缺陷
和所付出的測試時間成本，作為改善個人軟體流程，提升程式品質的基礎。 
 本研究的主要目的如下： 
z 開發 TDAT以協助程式開發人員記錄其編譯及測試的時間與缺陷等相關資料。 
z 開發 TDAT以協助程式開發人員分析其生產力、程式的品質、常出現缺陷的分佈趨
勢、所花費的編譯和測試的時間和建立檢驗清單(review checklist)。 
z 結合 TDAT至 Eclipse[5]開發平台以減輕記錄資料的負擔，並匯出所記錄的資料，以
 3
件的設計，並且撰寫系統設計報告(System Design Document)。第三階段將以系統開發與
測試為主，進行各子系統的實作，整合與測試、調整、評估與改善，並撰寫系統測試報
告(System Testing Document)。最後撰寫使用者操作手冊(User’s Manual)與完成相關文件
與程式發行(release)的工作。 
  在系統架構設計，TDAT依據專案的需求與功能，分為四個子系統，如圖一所示，
分別為資料收集子系統(Data Collection Subsystem, DCS)、外掛程式子系統(Eclipse 
Plug-in Subsystem, CPS)、資料分析子系統(Data Analysis Subsystem, DAS)、資料管理子
系統(Data Management Subsystem, DMS)等，各子系統描述如下： 
1. 資料收集子系統 
此子系統負責收集開發人員的專案資料、程式碼、缺陷及收集開發過程中各階
段之時間記錄等相關資訊，模組功能描述如下： 
z 收集模組（Collector Module )之功能為將 CPS所傳來的觸發事件進行分析，並
分別通知相關之模組進行收集及記錄等動作。 
z 專案資料模組（Project Info Module）負責收集專案相關資訊。包含專案名稱、
專案建立日期、專案狀態及每千行缺陷產出率等。 
z 程式碼模組（Size Log Module）負責收集程式碼相關資訊。包含程式行數、函
數數量及程式碼再用狀況等相關資訊。 
z 缺陷模組（Defect Log Module）負責收集缺陷資訊，包含缺陷產生的時間、產
出階段、移除階段、修正花費時間、問題描述及問題種類等。 
z 時間記錄模組（Time Log Module）負責收集各階段之時間記錄。包含程式開
發階段、編輯階段和測試階段之起始時間。 
2. 外掛程式子系統 
外掛程式子系統負責 TDAT工具之運作協調，主要工作為接受程式開發人員所
下達之指令、啟動 Eclipse 平台的事件監聽機制、安插監聽之程式碼以及將所收集
之觸發事件通知相關子系統。模組功能描述如下： 
z 控制模組（Controller Module )之功能為將 Eclipse平台所傳來的觸發事件進行
分析，若為開發人員所下達之資料分析指令，則傳遞指令所包含的資料分析項
目至資料分析子系統(DAS)，完成後由 GUI呈現分析後數據；若為所採集之狀
態事件，則交由資料收集子系統(DCS)進行記錄的判斷和後續儲存工作。 
z 外掛模組（Plug-in Module）負責啟動 Eclipse平台事件監聽機制並安插監聽之
程式碼，此模組所集到之事件會統一交由控制模組進行動作研判。 
z 狀態模組（State Machine Module）負責協助控制模組並提供操作模式狀態的資
訊。TDAT提供三種操作模式，不同的操作模式在專案開發過程中的階段變化
也不同，此時就必須靠此模組依據傳入的事件，決定下一階段的狀態資訊。 
3. 資料分析子系統 
資料分析子系統主要負責 TDAT工具所記錄之資料運用，為開發人員提供分析
報表功能，包含專案的流程時間、缺陷記錄以及程式品質、大小、時間和檢驗清單
等項目。模組功能描述如下： 
z 專案彙整分析模組（Project Summary Module )之功能為專案記錄資料之彙整分
析，分析結果藉由畫面輸出呈現方式提供使用者檢視、修改或重新計算，計算
完畢之數據結果，可以透過 DMS 子系統進行資料的儲存或匯出後的相關運
用。 
z 程式品質分析模組（Quality Anslysis Module）主要利用所收集之專案歷史資料
記錄進行程式品質之相關分析，並提供畫面輸出供使用者檢視，計算完畢之數
 5
  在工具實作上，我們採用物件導向設計方法[22]，並使用 Java為程式設計語言，整
個系統除切割為不同功能之子系統外，再依據各子系統負責之功能及特性，以模組化的
方式進行開發及整合。此外，為能快速完成此計劃與提高程式品質，我們運用了一些技
術以及數個開放原始碼的專案來進行工具的實作，在 DCS 子系統，由於該系統必須將
所收集的時間、缺陷、程式大小及專案資訊等資料進行管理與保存，其收集的物件數量
非常龐大，為能自動且快速將物件轉換至實體檔案，本工具使用 XMLBeans[15] XML
資料綁定(Data Binding)的技術來收集各項專案資料，並將這些資料的 Java 物件轉換成
XML 文件，運用 XMLBeans 的物件與 XML 自動對應的功能，增加資料管理的方便性
並有效縮短開發時程。 
在 CPS系統中，為了能支援 PSP 流程階段的時間記錄，我們利用有限狀態機(Finite 
State Machine, FSM)的技術來實現 PSP 流程階段轉換之需求，其設計原理是將開發、編
譯及測試等三個階段的開始與結束視為不同的狀態(state)，並將開發人員不同的操作行
為，如新增類別或啟動 JUnit 等，視為造成狀態改變的觸發事件，藉以控制流程階段的
轉換。同時，每個階段的開始狀態在進入後，此系統會自動記錄狀態的進入時間，即階
段的起始時間。當開始狀態移轉至另一狀態後，則記錄狀態的離開時間，如此使可獲得
開發人員停留在每一階段的時間。 
在 DAS子系統中，我們運用 JFreeChart [16]提供圖型化的輸出界面供開發人員檢視
其各項分析之報表結果，JFreeChart是一個 Java開放原始碼的圖表程式庫，提供快速建
立圖表及支援匯出各種格式，如 HTML, PDF 或圖檔格式等功能。在 DMS子系統中，
我們則運用 HttpClient[17]及 FileUpload[18]來達到專案記錄檔上傳至伺服主機之功能，
HttpClient提供 Java程式師簡單的 API界面，讓程式可以透過 HTTP協定與伺服端主機
直接進行溝通，省去以往必須實作一個 Light-Wieght Browser 的開發時間；FileUpload
元件則運作於伺服端，提供接收 Client端上傳檔案之功能。 
五、結果與討論 
本計劃實作一個以 PSP為基礎之 Eclipse外掛工具，讓使用 Eclipse平台之開發者可
以依據對 PSP熟悉程度選擇不同的模式：在全自動模式下，開發者不須介入選擇目前是
在何種 PSP 階段，只要依照一般開發流程進行即可，適合於對 PSP 完全不熟悉的開發
人員，但此模式只能收集流程資料之近似值；半自動模式，則適合知道 PSP但擔心可能
忘記計時或切換開發階段的使用者，在此模式之下，開發者僅要特別注意幾個階段的開
始或停止，其餘的階段開始或停止均由系統自動判定；全手動模式，適合已有 PSP相關
經驗者，在此模式，流程階段的進行均有賴開發者自行開始或停止，因此可以收集更精
確的流程資訊，同時也可以支援編輯階段相關資料的收集及測試先行(Test-Driven 
Develop, TDD[20])的開發方式。透過與 Eclipse 開發平台的結合，本工具有效減輕開發
者收集流程資料的負擔與降低資料錯誤的機會，分析報表的提供，讓開發者在專案結束
後，能回顧其開發過程是否有程式品質、缺陷、生產力等流程上的問題，以做為未來專
案改善和個人軟體流程修正之參考。 
  由於 TDAT的設計目前仍著重於收集開發、編譯和測試階段的流程資料。未來我們
計劃擴充 TDAT，使其能支援完整的 PSP 流程，包含需求、設計與事後驗證階段之時間
與缺陷資料的收集與分析。另一方面，我們亦計畫透過 client-server的架構，使 TDAT
能支援團隊軟體程序(Team Software Process, TSP)[21]的開發方式，有效收集團隊中所有
開發成員的時間與缺陷資料，提供以團隊為基礎的專案資料分析，以協助團隊開發流程
的改善。 
 7
計畫成果自評 
 
本計劃係參考 CMMI 的軟體流程並採用物件導向設計的方法和數個開放原始碼之
技術，完整實作出一個以 PSP為基礎之 Eclipse外掛工具(plug-in)，提供使用 Eclipse平
台之開發人員在程式撰寫後，分析其個人軟體開發流程。透過本工具提供的不同操作模
式，可以有助於不熟悉 PSP技術的開發人員了解軟體流程的概念；協助其收集與分析個
人的開發流程，減少流程資料記錄的負擔與可能的錯誤。同時，透過本工具所提供之流
程分析報表，讓開發者能改善其軟體流程。 
本工具為免費之開放原始碼專案，提供業界和學界免費使用，針對本工具不足之處
或有興趣在工具上進行加值的程式設計師可自行修改原始碼，期望透過開放原始碼的核
心價值與精神，讓所有程式設計師能彼此能相互分享及成長，也讓 PSP的技術能落實至
每位軟體工程師身上，進而提昇個人軟體生產的品質。此外，本計劃部分的研究結果亦
發表於 2006 年開放源碼研討會(見附錄)。 
 
 9
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
附錄 
 
PSP3)，該工具除可記錄時間、缺陷及程式大小等
資料外，在 PSP1支援程式大小預估及工作規劃；
在 PSP2增加 Review及設計模板功能；PSP3則支
援循環式開發流程，在資料記錄完畢後亦提供專案
彙整報表及流程改善建議等表格，所有專案記錄資
料均儲存於資料庫，增加資料之安全性，但唯一缺
憾是資料必須手動填入該工具之表格。 
    PSP Process Dashboard[7]是一個由 Java 語言
所設計之自由軟體應用程式，提供從計劃階段
(planning phase)到結果審驗階段(postmortem phase)
所需之流程步驟(process script)及相關表格、標準
與各種分析圖表，此工具功能均極為完整，支援個
人軟體程序所定義之 PSP0 至 PSP3 的各項流程，
然而與 PSPS 工具同為獨立(standalone)的應用程
式，資料記錄仍必須以手動的方式輸入。 
    Hackystat[8]則為一 client-server 之架構，其
client 端可以和一些 IDE、測試、組態管理或編輯
工具整合在一起，能自動收集開發過程的即時資
料，如程式大小、時間和缺陷數目等。每隔一段時
間，所收集的資料會自動被傳送至 server端進行分
析，參與之開發人員可登入 Hackystat的 server查
看其資料收集與分析的結果。雖然此工具可以自動
收集部分 PSP 的資料，然而許多資料，如缺陷之
型態、植入與排除階段、修正時間等項目，該工具
並未紀錄，所以也造成資料分析上的不足。 
    PSPA[9]亦為 client-server 架構，server 提供
Web 服務及資料儲存的功能，client 則由 Eclipse 
plug-in 程式負責收集開發人員之程式大小及缺陷
的即時資料。配合 PSPA client 工具連接到 Server
後，可上傳已收集之即時資料，亦可下載 Team 
Schedule及其他開發者之缺陷資料作為參考。PSPA
支援圖形化的 PSP 報表和每日進度檢查等功能。
但 PSPA並未紀錄缺陷的修正時間與型態等資料，
為其不足之處。 
    表一為 TDAT與其他工具之比較表。TDAT在
時間收集部份，支援手動及自動記錄。缺陷資料方
面，則收集編譯與 JUnit測試失敗的錯誤訊息，並
能自動計算缺陷的修正時間及缺陷型態。在分析功
能上則能提供流程分析如：程式品質、缺陷、生產
力等。此外，所有專案記錄及分析資料均以
XML[13]格式儲存，增加資料的可讀性和維護性。
同時 TDAT亦支援流程資料上傳至 Server的功能。 
三、架構設計 
圖一為 TDAT與 Eclipse平台整合的架構圖，
透過Workbench的擴展點(extension point)，TDAT
的使用者介面可以與 Eclipse 的使用者介面緊密地
結合，產生新的視窗(view)，並聽取不同類型的事
件。而透過Workspace的擴展點，TDAT則可以取
得程式、專案和檔案的資源，並可與其互動。因此，
經由這些擴展點，TDAT 便可以擷取專案本身以及
專案開發過程的相關資料，如程式大小、開發與編
譯時間、編譯結果和缺陷訊息等，並將這些資料自
動紀錄下來。 
 
 
圖一 TDAT與 Eclipse平台整合的架構圖 
 
此外，由於 JUnit 已整合至 Eclipse 平台，且
大多數的開發人員也以 JUnit 來進行單元測試，為
了收集測試階段的缺陷資料，TDAT 必需與 JUnit
整合，並透過 JUnit的擴展點來取得其測試案例通
過與否以及相關 Exception的訊息。然後針對每個
測試階段的缺陷，記錄其植入階段、缺陷產生原因
和缺陷型態等資料，並在程式開發人員排除缺陷
後，自動計算所花費的修正時間。 
  圖二為 TDAT系統架構圖，說明 TDAT所包含
的四個子系統、各子系統之間的關連性以及子系統
所包含的模組。各子系統主要的功能說明如下： 
• 資料收集子系統(DCS)負責收集開發人員的專
案資料、程式碼、缺陷及各流程階段時間等記
錄。 
• 外掛程式子系統(CPS) 則負責與 IDE溝通、協
調的工作，其主要功能為接受開發人員在工具
列中所下達之指令、安插監聽程式碼以達到事
件監聽功能以及管理資料記錄視窗等。 
 
表一、TDAT與其他 PSP工具之功能比較表 
System Time  Logging 
Defect 
Logging 
LOC 
Count 
Analysis 
Report 
Support
Upload
PSPS Manual Manual Manual Project Plan Summary (PPS) NO 
PSPPD Manual Manual Auto (but offline) PPS, Graphs (Estimation, Defect) NO 
Hackystat Auto Auto  (Without fix time and Type) Auto 
Summaries and Graphs 
 (But on Server) YES 
PSPA Auto Auto  (Without fix time and Type) Auto PPS, Graphs (Estimations, Defects) YES 
TDAT Manual /Auto 
Auto 
(Support JUnit) Auto PPS, Graphs (Quality, Defect, Size, Checklist) YES 
加了編譯階段。此階段必須透過開發人員手動切換
才能進入，也就是當TDAT收到開發人員手動切入
編譯階段之事件後，狀態才移轉至編譯階段。表三
為TDAT所提供之三種操作模式在階段支援、時間
與缺陷紀錄等功能上的差異。基本上，自動模式所
收集和分析的資料不含編譯階段，同時亦不扣除開
發工作中斷暫停的時間。手動模式允許開發人員調
整流程和修改資料。半自動模式則介於兩者之間。 
 
表三 TDAT三種操作模式的功能差異性 
差異性 自動模式 手動模式 半自動模式 
支援的流程
階段 開發、測試 
開發、編譯、
測試 
開發、編譯、
測試 
流程階段切
換模式 
自動(不允許
手動切換) 
僅提供手動
切換 
自動(允許手
動切換) 
時間計算 
自動計算，但
不考慮開發
過程中斷時
間 
系統自動計
算，使用者可
任意暫停、恢
復或修改時
間計算 
系統自動計
算，使用者可
任意暫停、恢
復或修改時
間計算 
開發工作暫
停/繼續 不支援 支援 支援 
缺陷收集 
自動取得，但
無編譯階段
產生或移除
之缺陷 
自動取得 自動取得 
Class based 
cyclic 
programming 
支援 支援，但須手動切換 支援 
流程分析 
Productivity, 
Quality, 
Defect, Size, 
Checklist，但
沒有編譯階
段資訊 
Productivity, 
Quality, 
Defect, Size, 
Checklist 
Productivity, 
Quality, 
Defect, Size, 
Checklist 
Test-Driven 
Develop 開
發模式 
不支援 支援 不支援 
 
相對於時間資料，缺陷資料的記錄較為繁複且
容易產生錯誤。如何自動收集缺陷資料，降低手動
記錄可能產生錯誤的機率，以及讓開發人員節省資
料記錄的時間，是 TDAT設計的重點。為達到自動
收集的功能，我們利用兩種不同方式來取得缺陷資
料：(一)在 IDE中，插入監聽程式以取得程式編譯
之錯誤訊息；(二)利用 JUnit 所提供的擴充點，插
入監聽碼以取得測試案例執行的結果。第一種方式
取得的缺陷主要為開發或編譯階段的錯誤，後者則
為測試階段的錯誤。 
依據 PSP 所訂定之缺陷記錄格式，資料必須
包含產生時間、缺陷描述、產生階段、移除階段、
修正時間及缺陷型態等。有關缺陷資訊內容的取
得，在缺陷描述的部份，若缺陷發生在開發和編譯
階段，我們收集由 Java Compile 所提供之錯誤原
因。同樣的，若發生於測試階段的失敗測試案例，
我們則記錄由 JUnit提供之錯誤訊息。缺陷型態的
選擇上，由於在開發和編譯階段最常發生之缺陷為
指令語法錯誤，所以在開發和編譯階段之缺陷型
態，我們參考 PSP 所定義之缺陷型態分類(見表
四)，將型態預設為 Syntax Error(ID=20)。不過，開
發人員可以根據缺陷實際錯誤的原因調整缺陷的
型態。 
  
表四 PSP定義之缺陷型態 
 
另外，在測試階段取得的缺陷，由於 JUnit提
供兩種測試案例執行失敗的錯誤狀況：Failure 及
Error。其中 Failure 表示測試結果與預期輸出結果
不符，而 Error則發生在測試案例的執行造成例外
(exception)終止的狀況。由於大多數的測試案例在
驗證程式的功能，所以我們將導致 Failure 之缺陷
的預設型態定為 Function(ID=80)。而造成 Error的
缺陷可能與系統組態或記憶體大小安排有關，所以
將導致 Error 之缺陷的預設型態定為 System 
(ID=90)。若實際缺陷錯誤原因與預設型態不符，
開發人員亦可透過缺陷視窗來調整錯誤型態。 
為能達到自動計算缺陷修正時間(Tfix)，我們
利用 IDE工具所提供之 GoTo功能，做為計算修正
時間的主要依據。Goto 的功能主要是讓開發人員
在點選編譯錯誤之項目後，能迅速開啟該錯誤所發
生之程式碼位置，讓開發人員節省搜尋的時間，以
快速移除錯誤。運用這個功能，我們插入監聽碼於
點選功能當中，在開發人員點選動作的同時，我們
則可以知道開發人員目前欲修正之缺陷項目，同時
記錄開始修正該缺陷的時間(Tstart)。待該缺陷未再
出現於編譯錯誤項目中，即表示該缺陷已被修正，
此時記錄缺陷移除時間(Tstop)。因此，該缺陷的修
正時間可以簡單計算如下： 
 
Tfix = Tstop – Tstart             (1) 
 
此外，針對缺陷修正時間的計算，我們探討三
種可能的缺陷排除方式： 
z 開發人員利用 GoTo功能來移除所有的缺陷 
此狀況下，缺陷修正時間可依公式(1)計算。 
z 開發人員完全未用 GoTo功能來移除任何缺陷 
開發人員在不使用 GoTo功能的狀況下，TDAT
無法得知開發人員目前要修正之缺陷項目以及
何時開始計算其修正時間。此時，個別缺陷修
正時間將為編輯階段移除缺陷之平均時間。若
所有缺陷數量為 Ntotal，編譯階段所花費之總
時間為 Tcompile，則每個缺陷修正時間之計算
公式如下： 
 
Tfix = Tcompile / Ntotal         (2) 
 
z 開發人員使用 GoTo功能來移除部份的缺陷 
此狀況下，使用 GoTo 方式移除之缺陷的修正
時間依公式(1)計算，其餘缺陷之修正時間則按
10  Documentation  60  Checking 
20  Syntax   70  Data 
30  Build, Package  80  Function 
40  Assignment       90  System 
50  Interface            100  Environment 
