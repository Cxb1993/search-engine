摘要 
 
  隨著資訊科技的日新月異，而資訊化的醫療系統因此也不斷的推陳出新，例如：遠距醫療
系統等。因此，居家看護成為資訊化醫療系統中重要的發展目標。本計劃利用感測元件感應需
要看護病人的各種生理訊號再透過感測網路和網際網路，迅速的傳遞至醫療監測系統，而達到
看護病人各種生理狀況的目的。 
  我們在感測元件網路中使用連續偵測的方式。我們首先提出一個有效率且以時間排成為基
礎並可節省能源的排程演算法來將每個感應器節點所定期偵測到的病人生理資訊以週期性的
方式傳回到基地臺。然而，使用這樣的排成傳輸技術所要面臨的一個問題是如何使得網路上的
感測節點可以達到整體的時間同步。本計劃在感測網路的應用中提出一個時間同步的機制，稱
之為時間戳記廣播同步演算法。該技術可以支援多節點時間同步使得網路上的節點可以經由一
個標準的參考時間來達到整體網路時間同步的目的。 
  再者，在追蹤與定位方面，本計劃提出了一個可以提供低計算量、低通信量，並且以三邊
定位演算法為基礎的分散式定位演算法並實做出一套追蹤系統，而使得醫療人員可以透過感測
網路精確並有效的觀測病人在家中的位置與其所移動的路徑。最後，本計劃針對醫療資訊的查
詢，亦實做出一套代理軟體。該軟體可以幫助醫療人員在不需要網路佈建的情況下即可有效的
查詢病患在家中的醫療資訊。 
 
關鍵字：居家看護系統，無線感測網路，時間同步，定位，追蹤。 
ㄧ､前言 
 
  隨著資訊科技的日新月異，人們的日常生活也與資訊科技緊密的結合，而在於醫療系統上
更是顯著，資訊化的醫療系統不斷的推陳出新，例如：遠距醫療系統等。而居家看護成為資訊
化醫療系統中重要的發展目標，如何將醫療看護工作與資訊科技結合是這個計畫的重點。 
  近年來無線通訊科技的蓬勃發展，許多的無線技術經由專家學者的多年研究已經逐漸成
熟，Ad Hoc 通訊技術就是其中之一。利用 Ad Hoc 通訊技術，無線裝置與無線裝置之間不需要
透過基地台便可以互相通訊，並且每一個無線裝置都可能是其他裝置的路由器，因此，Ad Hoc 
Network 可以容易且快速的建立起來。而 Sensor Network 就是 Ad Hoc Network 中的一種特殊應
用，Sensor Network 是由許多的 Sensor Node 與一個或數個 Sink point(s) 所組成，透過 Sensor 
Node 去偵測某個物件或事件，然後在將偵測到的資訊回傳給 Sink [1]。基於其無線傳輸、快速
佈建、和感測的能力，Sensor Network 的技術非常適合應用於醫療照顧，尤其是居家看護上。
需要看護病人的各種生理訊號透過 Sensor Network 和網際網路，可以迅速的傳遞至醫療監測系
統，如有突發狀況醫護人員可以即時取得病人的各種生理狀況的資訊，迅速採取正確的醫療措
施。另外也可利用 Sensor Network 增進居家環境的安全和便利，輔助病人在家裡自由安全的行
動。 
programming interface)的形式將通訊協定的複雜度隱藏起來，讓應用程式的開發與設計更為
順利。因此在底層網路與上層應用的整合方面，本計劃亦提出了一個代理(Agent)軟體架構，
稱為流量控制協同運作代理軟體(Cooperative Operation Agent, COA)。藉由此代理軟體，我
們可以提供上層的使用者區域概念的資訊，藉由此資訊，網路使用者，如醫護人員，不需直接
面對病患所配置或佈置家中的所有感測節點，並且能讓不同類型的應用在同一系統下協同運
作。COA 的特點如下：(1)可以將網路節點的分佈轉為使用者可以理解的地理資訊，(2)可以有
效解決 hotspot 與 traffic storm 的問題，(3)可以預防及處理擁塞的問題，(4)可同時支援查詢
式與事件觸發式的網路應用型態。 
3.2. 94 學年 
  在 94 年度中，本計劃所提出的 TBS 演算法主要是結合傳送端與接收端兩種同步動作的形
式。以下我們將分別探討目前在感測網路中較具有代表性的兩種時間同步機制分別為
Reference Broadcast Synchronization(RBS) [5]與 Lightweight Time Synchronization(LTS)[8]
同步機制。 
論文[5]中的演算法是由 Elson， Girod， Estrin 所提出。RBS 是使用一個特殊參考節點
(R node)讓一群接收節點做同步動作。一開始節點 R 發出了一個參考封包(pulse message)，封
包內並不包含任何資訊，目的是在於使得其他所有的相鄰節點能夠記錄這個 pulse message 收
到的時間。後來所有的相鄰節點便能夠依照剛剛所收到的區域時間紀錄，對周圍的節點進行雙
向(two-way)訊息交換，在進行了這個同步動作後，其時間延遲誤差僅可能為傳輸延遲與接收
時間的延遲。考慮到電子訊號在空氣中的傳輸速度，則在無線感測網路中所有不同距離所產生
的傳輸時間誤差便變的非常小。作者認為此傳輸誤差是可以忽略不計的，因此唯一的時間誤差
便只剩下接收時間的誤差。若探討同步問題，任何兩個節點都必須進行封包交換，此動作則大
大的增加了封包交換的複雜度，但也因此達到了非常精準的時間同步。RBS 需要在一次跳躍內
的相鄰節點，來彼此交換他們的參考封包訊息紀錄，若有 n 個鄰節點，發出了 m 個參考廣播
訊息，則 RBS 的複雜度即為 O (mn2)，因此，當 RBS 想要達到不錯的時間同步精確度，就必
須經常的做交換封包動作。其中必須要注意的是，初始的參考節點因為無法完成同步動作，而
形成所謂的孤兒節點。 
論文[8]中的演算法是由 Greunen，Rabaey 所提出，是一種傳送端與接收端的同步機制。
LTS 主要設計不是為了達到極精準的時間同步，而是為了使得時間同步的複雜度最小化。LTS
針對不同型態多次跳躍網路環境的狀況而有了兩種不同的演算法。這兩種演算法都需要一個參
考節點(sink node)，第一種是屬於集中式的演算法，在進行同步前必須進行網路中的展開樹架
構之建立，而在樹根即為參考點，同步過程是採用 pair-wise 上下層的樹節點來進行同步動作，
從樹根開始至樹葉停止。第二種演算法是採用分散式的形式，每個節點都能夠決定自己何時要
進行同步動作，但不需要進行展開樹的建構。當節點 i 決定要同步的時候，它會送出一個請求
給附近的節點，然後整個路徑到達樹根的節點都會同時進行同步動作。它的優點是有一些節點
不是那麼需要頻繁的進行同步動作，節點可以依照自己的需求來發動演算法，可以藉此省下一
些能源。為了避免重複性的同步過程，在時間同步的過程中需彙整相關資訊，而可以藉此省掉
同一路徑中重複的同步動作。 
  在 RBS 中，其缺點在於進行時間同步動作時，由於節點與節點間都必須進行所謂的封包
交換，其訊息交換所產生的能量損耗將是相當可觀的。然而在 LTS 中，其最大的問題在於時
間同步的精準度，對於距離參考點愈遠的節點而言，其誤差愈大，這樣可能會造成無線感測網
路在進行同步時的一個限制。而且，對於一開始必須建構樹狀的網路結構而言，也必須花費不
少額外的網路成本。因此，本計劃中所提出的演算法，即是結合這上述兩種演算法的優點，並
且有效的改善兩者演算法中所出現的缺陷。 
 
3.3. 95 學年 
 
3.3.1. 追蹤系統相關文獻 
一般而言，室內定位分為 Video-based [43]及 Radio Frequency-based [44]，前者是在欲追
蹤區域中架設視訊設備，並取得該範圍之畫面，透過分析影像，將複雜且動態的背景與前景分
離，取得前景資訊(所追蹤之物件畫面)，再利用線性與非線性分析與預測演算法，計算出物件
 
圖 3.3 三邊定位的誤判情況。 
 
定位失敗 
若是此時產生如圖 3.3 中的情況，則使得三邊定位演算法無法進行運算，則未知節點將無
法得到定位的資訊。圖中 1R 、 2R 為 CAs 與未知節點之間利用 RSSI 所得到的距離資訊，而 1O 、
2O 與未知節點的真實距離分別為圖中的 R1’與 R2’。則從圖中我們很明顯的看出在 RSSI 的測距
誤差底下，原本應該有的交點因此而消失，使得在 CAs 要計算參考位置時即造成失敗的誤失。
不過在三邊定位演算法中，任何一個母節點都擁有當 RA 的能力。若發生圖 3.4 的情況，當原
本設定為 RA 的母節點與其中任意一個 CA 能夠形成交點的話，則將原本無法形成交點的 CAs
改成將能夠形成交點的兩個母節點為 CAs，剩下的一個母節點則轉換為 RA，因此我們依然可
以重新執行三邊定位演算法去得到未知節點的定位位置。但若情形如圖 3.5 的時候，則不論選
取任何一組的 CAs，皆無法得到交點去當作參考位置的資訊，因此也無法進入選取參考位置
的機制，此時即使未知節點擁有三個與其相鄰的母節點，但是依舊產生定位誤失的情況。 
 
 
 
圖 3.4 CAs 發生無交點誤失，但有 RA 可供替換。 
 
 Mires [42] 提出了一種適用於無線感測網路的訊息導向中介軟體（Message-Oriented 
Middleware，MOM）。Mires 的概念改良自傳統固定分散式系統。相較於傳統"要求–回覆
(Request–Reply)"的運作模式，Mires 使用"發佈–訂閱(Publish－Subscribe) [8]"這種非同步的
運作模式，由於只有訂閱的資料項目有更新時才需要進行發佈資料數據的動作，因此可減少感
測網路的資料傳輸量進而減少能源的消耗。雖然 Mires 的架構簡單、容易擴充性，但發佈－訂
閱這種架構比較適合應用在事件觸發型態的感測網路上，比較不適合用於 query-based 的感測
網路應用上。 
 雖然目前感測網路的研究亦趨廣泛，所支援的應用也愈來愈多，但大多只針對查詢應用或
事件觸發應用而設計，並沒有提供一個能同時支援查詢應用及事件觸發應用的共通介面。換句
話說，上層的應用程式無法使用相同的處理模式來參與不相感測網路系統的運作。此外，若有
大量的查詢動作在應用程式之間同時進行時，如何降低無線感測網路的能源消耗也是一個需要
列入考慮的問題。 
我們可以得到印證，對一個全方向性傳送的節點，最佳的傳送必須至少間隔三個單位時間方不
會造成碰撞。因此，網路節點每次傳送型態是(接收-傳送-閒置)或(感測-傳送-閒置)，(其中葉
節點不需閒置)，即為（R-T-\）或（S-T-\）。其中”R”代表節點處於接收狀態，”T”代表傳送狀
態，而”\”代表閒置狀態。 
 
A. 排程分類 
  本計劃所提出的排程演算法將每個節點的排程方式依照其在樹分支(branch)的深度可分為
三種類型分別為： 
  型態一：葉節點及距離葉節點 hop 距離為 3 的倍數的節點(例如 3，6 或 9 等 hop 距離的節
點)。 
  如圖4.2所示，此類節點由時刻0開始且起始狀態為S(圖4.2(a))，於下一時刻(時刻1)將其感
測的事件傳送給父節點，其父節點則在時刻1處於狀態R做相對應的接收，並緊接著於時刻2時
往祖父節點傳送，時刻3處於閒置的狀態(圖4.2(b))。需注意的是，圖4.2(a)若為非葉節點(距離
葉節點為3的倍數之單位距離的節點)，則排程起始為（S-T-\）加上對應於其子節點傳送過來的
封包排程，而傳給父節點的起始暫時性亦須依排程規則做相對的安排。 
 
 
圖 4.2 型態一節點的排程。 
 
  型態二： 距離葉節點3的倍數減2個hop距離之節點(例如1，4，7等等個hop距離的節點)。  
如圖4.3所示，同理於型態1，此類節點由時刻1開始，起始狀態為R，然後於下一時刻(時刻2)，
將其接收的事件傳送給父節點，其傳給父節點的暫時性排程則由時刻2，狀態R做相對應的接
收，並緊接著於時刻3往祖父節點傳送，時刻4處於閒置的狀態。圖4.3(a)為距離葉節點一個hop
距離的節點之起始暫時性排程，圖4.3(b)為其傳給父節點的起始暫時性排程。圖4.3(a)若為距離
葉節點4，7，或(3x-2), (x>=1) hop距離的節點，則兩邊的暫時性排程都必須加上對應於子節點
傳送封包過來的排程。 
 
 
圖 4.3 型態二節點的排程。 
 
  型態三：距離葉節點3的倍數減1個單位距離之節點(例如2，5，8等等個hop距離的節點)。  
如圖4.4所示，相似於型態1或2，此類節點由時刻2開始，起始狀態為R，然後於下一時刻(時刻
3)，將其接收的事件傳送給父節點，不同的是，其傳給父節點的暫時性排程由時刻0起始，其
狀態為S，執行偵測，於時刻1時將偵測結果傳給其父節點，然後在時刻2時進入閒置狀態。接
著於時刻3，調整為接收狀態，以接收其子節點傳送的資料，並於時刻4傳送給自身的父節點，
後，將其暫時性排程表從前指標處至(末指標-3)的排程內容緊接在調整基準分支的暫時
性排程表之下，形成父節點本身新的暫時性排程，並且延遲被調整分支的每個節點的暫
時性排程(L+1)個單位時間，完成此次仲裁(如圖 4.7)。 
 
 
圖4.5. 父節點端的仲裁發生時刻之ㄧ。 
 
(3) 狀態(0, 2)：由於被調整分支的暫時性排程格式與狀態(0, 1)相同，因此仲裁的方式與該
狀態相同。唯一不同處在於被調整分支所有節點的暫時性性排程延遲 L 個時槽時間。 
(4) 狀態(1, 0)與狀態(2, 0)：如圖 4.8(狀態(1, 0))，將被調整分支的暫時性排程延遲(L-4)後，
將其暫時性排程由(前指標+3)處至末指標處，移至並覆蓋調整基準分支暫時性排程的(末
指標-1)處，並且維持暫時性排程-狀態 1 的格式，於下個時刻(L2+1)及下兩個時刻(L2+2)
及(L2+3)分別完成閒置，感測和傳送的動作，形成父節點本身新的暫時性排程，並且延
遲被調整分支的每個節點的暫時性排程(L-4)個單位時間，完成此次仲裁。 
(5) 狀態(1, 1)與狀態(2, 1)：相似於狀態(1, 0)，如圖 4.9(狀態(1, 1))，將被調整分支的暫時性
排程時刻延遲(L-2)後，由前指標處至末指標處，移至並覆蓋調整基準分支暫時性排程
的(末指標-1)處，形成父節點本身新的暫時性排程，並且延遲被調整分支每個節點的暫
時性排程(L-2)個單位時間，完成此次仲裁。 
(6) 狀態(1, 2)與狀態(2, 2)：此型仲裁方法相似於狀態(1, 1)，唯一不同是被調整分支所有節
點的暫時性排程延遲(L-3)單位時間。 
 
B-II. 基地台仲裁 
  如圖 4.10 所示，發生在所有節點都已經排好自身暫時性地排程時，由於在同一時刻，
閘道只能接收一個由子分支傳送過來的封包，所以必須對每條分支做最後的仲裁，藉由對
每條分支發送一個載有必需延遲多久單位時間的 RACK 訊息，除了錯開每個分支的排程，
亦確定了最後真正的排程。基於省電因素，先由深度最深的分支當調整基準分支(不須延
遲，選深度最深的分支可減少了廣播訊息的次數)，然後選其餘分支中，深度次大的分支為
被調整分支，延遲 L 單位時間，之後調整基準分支進入睡眠模式，再由原本當被調整分支
的分支當新調整基準分支，其餘尚未仲裁的分支，選深度次大的分支當被調整分支，一樣
延遲 L 單位時間(對應於新調整基準分支的Ｌ)，如此重複直至所有被調整分支皆被仲裁並
適當的延遲其排程。 
 
 
    
    圖 4.10. 基地台仲裁。        圖 4.11. 十個感測節點網路的排程。 
 
C. 排程結果 
  圖4.11為10個感測網路節點的網路系統完成排程的可能結果之ㄧ。其中綠節點為基地台，
白節點為一般感測網路節點，黑色實線表示兩節點為有父子關係的節點，紅色虛線表示兩節點
間有相鄰的關係。 
  由圖4.11的排程結果可以清楚的發現，本計劃所提出的排程演算法可以有效的分配每個網
路節點的工作時槽時間。因此，節點只須在其所分配到的工作時槽時間甦醒即可，其餘時間可
進入睡眠模式(sleep mode)而達到省電的目的。圖中亦可觀察到，每個節點所分配甦醒的工作
週期為連續的時槽時間，如此可改善文獻[2]中演算法其分配給節點的工作時間為分散的時槽
時間的情況。因此，網路節點只需要ㄧ次甦醒-睡眠的交替即可完成所有的工作。反之，文獻
[6]的演算法不保證分配給節點的工作週期為連續時槽時間，而使得節點可能需要多次甦醒-睡
眠的替換才可完成所有工作，因而額外消耗了節點由睡眠到甦醒狀態所需要的電源。 
 
4.1.2. 穩定狀態階段(The steady state phase) 
 
  節點依據排程來運作，分為傳送,接收,閒置和感測，在每一回合中，節點不用運作時即可
進入睡眠模式，如此經過若干回合後，當有節點故障或能量耗盡時，可能造成部份網路中斷，
為了解決此一問題，可於一段時間後再回到第一步驟，重新建立拓蹼和排程，如此週而復始。 
 
 
4.2. 94 學年 
  在年度所提出的廣播時間郵戳同步技術是一個專為無線感測網路系統而設計的演算法。該
時間同步技術為一種混合接收端與接收端和傳送端與接收端兩種同步形式的演算法。TBS可以
幫助網路完成他們的時間同步動作且能夠省下大部分的能量。與LTS有所不同的是，TBS不需
要基礎的網路架構、拓撲，與LTS所類似的是，TBS可以支援多次跳躍時間同步動作。     
我們假設在TBS中，它所有在無線感測網路中的節點都有支援在MAC層的時間郵戳動作，並
且假設在MAC層的傳輸模式都是相同的。TBS的操作分為兩個Phase:建立階段(Setup phase)
與同步階段(Synchronization phase)。 
R A
P ack e t 1
P ack e t 2
P ack e t 3 ,4 ,5 ...
 
 
圖 4.13. 時間同步進行階段。 
 
4.3. 95 學年 
 
4.3.1. 追蹤系統實做 
  本系統(如圖 4.14)主要功能在於追蹤目標以及目標的身份辨識，為了節省成本和裝設的便
利性，我們將感測器與無線感測模組整合成一個具感測和通訊能力的節點；讓感測器所感測的
資訊經由無線傳輸的方式傳送至伺服器端。伺服器負責分析目標資訊，以特殊演算法分辨目標
角色，並將目標移動軌跡紀錄至資料庫。當有了這套室內追蹤系統後，便可輕易地在居家看護
應用上，偵測病患的移動路徑或所在區域。在本系統中希望實作出身份辨識的功能，如此一來
能針對目標的角色提供更具智慧的服務，例如可為不同目標選擇喜愛的電視頻道、提供不同的
室溫給不同的角色或給予目標不同的光線亮度等等。當定位系統有了身份辨識的能力，更可應
用至保全環境，監控目標的移動路徑。 
 
PIR Sensor 定位功能 
  我們以被動式紅外線感測器(PIR Sensor)作為定位的主要的依據，利用被動式紅外線感測
器的物理特性，感測目標的位置；經過我們的測試，可順利偵測通過感測器下方的目標。當人
員經過 PIR Sensor 下方時，會觸發感測器，此時感測器會發送一個 Pulse 給無線感測模組(Sensor 
Node)，而無線感測模組再將人員所在位置以無線感測模組傳送至後端處理系統。 
 
身份辨識 
  利用我們設計的身份辨識演算法來達成，首要條件人員必須攜帶一個 Tag，利用 Tag 與節
點之間訊息交握的機制來達成身份確認的動作。各個節點必須提供訊息 Relay 的功能，將所接
收的 Tag 資訊回傳到伺服器端，利用伺服器運算人員實際位置。 
 
後端處理系統 
  後端處理系統由一個無線模組與一部電腦組成，兩者以 Serial port (RS232)介面連接，當
定位系統之感測器被觸發後，訊息由被觸發的模組產生並發送至後端處理系統。後端處理程式
由 Java 程式語言撰寫，提供簡單的使用者介面，可顯示目前人員的位置，另外此程式分析出
所接收的模組編號後，便將資訊儲存於 MySQL 資料庫中，並紀錄接收時間，以利查詢之用。 
 
系統相關說明 
  室內定位系統由數個無線感測模組與感測器組成，後端處理系統由一個無線感測模組與一
3. Robustness Evolution Function (REF)：當所選取的母節點群必須使用 I-REEL 的時候，對
所選取的母節點群去進行可靠程度的認證機制。由先前的內容我們可以得知，相關母節點到兩
個由計算母節點所計算出的交點的距離差距過小的話，容易造成巨大的判斷錯誤，因此我們透
過 REF 去判斷我們所選取的相關母節點是否可靠，其運作精神如圖 4.15 所示： 
)
2
1,0( min2 LP −
)
2
1,0( min1 LP
 
圖 4.15. REF 範例。 
 
首先我們定義圖中的參數： 
z minL ： 所能夠容忍的最小誤判長度。 
z ERRRSSI： RSSI的最大測距誤差比率。 
在 REF 的認證機制中，只要相關母節點位在圖中 3O 的區域範圍內，則此相關母節點不會
造成大於 minL 的誤判，則此圓我們稱作可靠圓（Robust Circle），以下我們將證明在此圓內的
相關母節點皆為可靠母節點。假設現有一點 ),( yxp ，其位置位在當 1PP 發生最大測距誤差時恰
好會等於 2PP ，根據此條件我們可以列出相關母節點可靠條件(4-1)的不等式：               
2
min
2
2
min
2
)
2
1(
)1(
)
2
1(
Lyx
ERR
Lyx
RSSI
++<−
−+
               (4-1) 
設 RSSIERRZ −=1 ，將兩邊同時平方可得(4-2)： 
2
min
2
2
2
min
2
2
)
2
1(
)
2
1(
Lyx
z
Ly
z
x ++<
−
+                 (4-2) 
將(4-2)展開整理後可得不等式(4-3)： 
0)11(
4
1)11()11()11( 2min2min2
2
2
2
2
<−++−−+− L
z
yL
z
y
z
x
z
               (4-3) 
將(4-3)除以 11
2
−
z
可得(4-4)： 
其中 11 2XC −= 、 22 2XC −= 、 2121211 RYXE −+= 、 2222222 RYXE −+= ，代入公式(4-3)可解
得兩組或一組的座標值。 
2.判別交點：在可靠的母節點選取機制底下，兩交點到相關母節點的距離會有明顯的差距，因
此我們將相關母節點與未知節點之間的距離做為參考距離，並計算出相關母節點到兩交點之間
的距離，如圖 4.17 所示： 
 
圖 4.17. I-REEL 的判別交點。 
 
設相關母節點到未知節點的量測距離為 Rrefer： 
若 Rrefer < R3 ， 則設 P1為未知節點的位置。 
若 Rrefer > R4 ， 則設 P2為未知節點的位置。 
若 R3<Rrefer < R4，則設 P1 為未知節點的位置。 
 
無交點可靠節能定位演算法 
受到 RSSI 的誤差影響，會形成讓三邊定位演算法發生失效的無交點情況，而無交點的情
況發生的可能條件中，影響最深的便為 RSSI 的誤差範圍，RSSI 的測距誤差越大，則越有可能
發生三邊定位演算法失效的情形。因此，在輕型可靠三邊定位演算法中，我們將提出一個解決
這項問題的演算法，稱為無交點可靠節能定位演算法（No Intersection Robust and 
Energy-Efficient Localization，NI-REEL），在此我們將 RSSI 測距模型預設為以定點測量 RSSI
訊號範圍中的最大值作為 RSSI 轉換成距離的參考距離，而根據 RSSI model 的測距誤差率，
則無交點節能可靠定位演算法的運作精神如圖 4.17 所示：其中 1O 與 2O 為兩個發生無交點情況
的計算母節點， 1R 與 2R 分別為未知節點接收到兩個計算母節點的訊號後所換算出的距離值，
而 1R ’與 2R ’為以假設所測距離與實際距離的差距為最大誤差時而計算出的邊界半徑，而圖 4.18
中兩個同心圓重疊部分的區域即為未知節點可能的所在區域。 
由我們預設的最近測距為主 RSSI 測距模型可知，未知節點與可靠母節點間的距離為測距
範圍中最近距離，其有可能就是正確的距離值，也可能其正確的距離值為最大誤差範圍，在此
種情況底下，我們可以假設在最大誤差條件底下開始進行未知節點位置的可能區域範圍，再藉
由相關母節點與未知節點的距離去進行收斂，如圖 4-19，圖中的 3O 扮演著收斂的角色，如先
前 RSSI 模型所述，未知節點的位置並不會在 3O 的範圍之內，因此可將圖中原本黃色與藍色交
集的部份進一歩再收歛至更靠近未知節點的真實位置，而為了達到節約能源以及精簡計算量的
關係，接下來我們會以可能區域中的代表線去進行演算法的運算。以下我們先說明演算法中所
使用到的參數說明，接著進行無交點演算法的流程，無交點演算法分為兩個步驟：創造邊界條
件與收斂，針對此二步驟分別進行說明。 
 
依據兩個計算母節點之間的半徑比例，在 21OO 上找出一點 INITP ，使得 2121 :: RRPOPO INITINIT = 。 
2. 如圖 4.21 所示： 
將 1R 、 2R 分別除以（1- RSSIERR ）得到 1R ’、 2R ’，再帶入二元二次方程式後求得交點 1B ,， 2B 此
交點即為未知節點的邊界值。 
3. 將 INITP 與 1B ,， 2B 連線，再根據相關位置節點的座標與測距範圍進行收斂。首先判斷相關母
節點位於 21OO 的哪一側，再與該側的 INITP 與邊界座標的連線進行二元二次聯立方程式的運算
進而判斷收斂情況，其收斂的情況有以下次四種情境： 
 
INITP
         
INITP
 
      圖 4.22 收斂情況 1。                                 圖 4.23 收斂情況 2。 
 
  如圖 4.22 所示：假設 3O 為相關母節點與未知節點的測距值所形成的圓， 3O 位在 1B 這一
側，因此便以 3O 的圓方程式與 1BPINIT 的線性方程式進行聯立方程式。由於相關母節點的感測
距離為最小距離，而圖上相關母節點 3O 與相關距離形成的圓方程與 1BPINIT 的兩個交點中其中
一點位在 INITP 與 1B 之間，因此我們便可將未知節點座標收斂在圖上的 Estimated position 上。 
  如圖 4.23 所示： 3O 的圓方程式與 1BPINIT 的線性方程式進行聯立方程式的解皆位在 1BPINIT
之外，可估算出 Estimated position 會落在 1B 附近，此時便可以邊界座標做為未知節點最後的
定位座標。 
 
R1
R2
O1 O2
INITP
R1’
R2’
B1
O3
Estimated position
B2
       
INITP
 
  圖 4.24 收斂情況 3。                            圖 4.25 收斂情況 4。 
 
可靠度模型，在無須任何額外繁雜的數學統計或迴圈計算之下，可以選出最可靠的座標值。以
下便為定位座標可靠度模型： 
 Level 4:NI-REEL 演算法中，K 逼近 ERRRSSI 所計算出的座標可信度最高。 
 Level 3: NI-REEL 演算法中，以兩最長邊作為計算邊，最短邊做為 reference anchor
所定出的位置。因為 reference anchor 在此作為收歛值域之用途，其範圍越小，收斂
範圍也越小，可信度越高。 
 Level 2: I-REEL：以兩個最短邊作為計算邊，而最長邊作為 reference anchor 所定出
的位置。因為 reference anchor 不參與計算，而計算邊越短，絕對誤差越小。 
 Level 1:三邊定位演算法中，使用最短邊作為 reference edge 者以及無交點三邊定位
演算法中，使用最長邊作為 reference edge 者。 
因此當未知節點針對其所選取的母節點群的位置資訊以及距離資訊，去判斷是否適用於
較高 Level 的情況去進行定位演算法，而當未知節點定位完成時也可得知本身所使用的是何種
level 情況下去進行定位，可評估其定位資訊的可信度。 
 
4.3.2. 代理軟體實做 
  感測網路上的應用程式大致上可分為查詢式，事件觸發式以及混合式三種。在本計劃中，
我們以混合式為基礎開發了一個代理軟體；我們所開發的代理軟體可以整合異質性的感測網
路，讓應用程式在開發時不需要考慮低層的感測網路架構。 
我們所提出的系統架構主要由六個元件所組成.  
(1)網路處理元件： 
 網路處理元件具有多重連線的功能，應用程式可透過 Socket 連結內部的感測網路，取得
所需要的感測資料。 
(2)XML 轉譯元件： 
 在實作時，我們採用 XML 作為代理軟體與外部應用程式溝通的訊息格式，主要的目的也
是希望能將感測網路系統延伸成為網路服務的一種型式。 
(3)區域計算元件： 
 區域計算元件負責將感測節點的地理資訊轉換成使用者需要的位置資訊。 
(4)資料聚合元件： 
 資料聚合元件負責將蒐集到的感測資料進行聚合並回傳給使用者的應用程式。 
(5)查詢訂閱整合元件： 
 查詢訂閱元件是 COA 的核心元件。查詢訂閱整合元件主要由查詢佇列集與訂閱清單集兩
個子元件所構成。對查詢佇列集而言，如果不同的應用程式需要查詢的節點是相同的就會被加
入相同的佇列。訂閱清單集的運作和查詢佇列集相仿，不同的是在清單中的應用程式被動地等
待定期回覆的資訊，或等待事件觸發的訊息傳來。 
(6)感測網路通訊元件： 
 這部份是代理軟體與感測網路溝通的元件，主要處理是輸出、輸入的控制，以及針對所使
用的平台特性做不同的控制，例如設定鮑率、資料位元長度、同位檢查、停止位元等。由於無
線感測網路的發展十分快速，在考量設計時必須考慮元件的替換性，例如底層的通訊界面可能
採用 RS232 與感測節點連結，但未來若改以 USB 做連結就必須要能輕易替換此通訊介面而不
影響系統的運作。 
 
擁塞及碰撞減輕用於查詢式應用 
五､結果與討論 
 
5.1. 93 學年 
  本計劃所提出的排程演算法以C語言程式模擬的方式來顯示網路的效能，並與文獻[2]中作
者所提出的Cross Layer(CL)演算法以及經過改良之後的Cross-Layer排程法做比較，以證明本計
劃所提出的演算法其所得到的網路效能較演算法來得優異。依據[12]將原本的Cross-Layer排程
法的基本傳送封包單位動作修改為(接收-傳送-閒置)或(感測-傳送-閒置)，(葉節點不需閒置)，
並修改閘道的排程表以避免有兩個以上的節點對閘道同時傳送的情形，以下將以
Cross-Layer-Fix排程法稱之。 
  圖5.1比較每回合至少需要使用時槽的數量。由圖中可知，雖然三種排程法都是網路節點
越多時每回合所需的最少時槽數量也越多，但本計劃所提出的演算法在每回合所需的最少時槽
數量呈較規律的成長。由於Cross-Layer的排程是經由競爭而成，所需的最少時槽數量呈現較不
規律的變動。當網路系統有300個節點時，本計劃所提出的演算法最少需要800個左右的時槽，
而Cross-Layer排程法至少需要4000個左右的時槽，其相差高達五倍以上。 
  圖5.2顯示出網路節點在每回合發生碰撞的次數。由圖中可以觀察到，無論在任何的情況，
本計劃所提出的演算法完全避免了碰撞的發生。相反的Cross-Layer排程法之基本傳送單位並沒
有處於閒置的狀態，所以在網路系統上有300個節點時，每回合碰撞次數已經接近400次，至於
Cross Layer-Fix排程法，已經幾乎避免了所有的碰撞，但隨著節點數量越多，偶而還是會發生
零星幾次的碰撞。 
  圖5.3比較不同節點數量，每回合整個網路系統的耗電量。由於我們的演算法減少了運作-
睡眠模式地切換次數，因此每回合的整體耗電量較另外兩者為少。當網路上節點數越多，
Cross-Layer排程法的排程運作-睡眠模式地切換次數也越多，因此每回合中，其所消耗的額外
電源也越大。由於Cross-Layer-Fix排程法的傳送單位傳輸多了閒置狀態，所以相較於Cross-Layer
排程法每回合需要更多時槽，故比Cross-Layer排程法更耗電。 
  圖5.4顯示出網路系統中，在不同的節點數量的情況下，第一個節點死亡的時間。由圖中
可以觀察到節點數越多，本計劃所提出的演算法之網路存活時間也相對地越長。這是因為節點
數越多，每回合的時間亦相對地延長，所以相對地處於睡眠狀態的時間也延長，再加上網路上
節點數越多，每條分支深度可能相對地變小，排程表上的動作也就相對的減少。在節點數達到
300個時，本演算法的存活時間已經比Cross-Layer排程法多了105秒，比Cross-Layer-Fix排程法
多了4x106秒。 
   
  
    圖5.1. 每回合至少需要時槽數量。      圖5.2. 每回合造成碰撞的次數。 
個節點間的延遲並不是對稱的，但是當實驗的數據夠多的時候，便能夠去除掉一些不必要的誤
差，而得到更好的實驗結果。 
  圖5.7顯示出了在使用多個時間郵戳的TBS的效能會隨著參考點所發出的pulse次數增多而
有所上升，而同步的時間也會愈精準。 
  圖5.8顯示了三種不同的演算法所花費的能源損耗，其所有參予的封包格式都是依據IEEE 
802.11[7]，對於LTS而言，它會花費更多的能源的原因是因為它必需花費能量在於hop-by-hop
的傳輸路徑上，當一次跳躍的鄰節點增加一倍(y->2y)時，其所花費的能源將會增加兩倍
(2y->4y)，其原因為LTS是採用pair-wise的同步方法。而對於RBS而言，TBS更是大大的節省
了能源，當鄰節點大於三個以上的時候，RBS所需要花費的能量就會大於LTS以及TBS。這是
因為TBS每次在執行時間同步的時候，每兩個鄰節點都會需要進行一次pair-wise的同步動作，
此複雜度為O(n2)，所以從圖7中也可看出，其能量損耗是呈現指數成長。 
 
5.3. 95 學年 
 
追蹤系統實做 
  本系統基本應用環境為有隔間的室內空間，因此非常適用於居家看護的環境當中。由於目
前文獻所提出的方法大多無法解決區域定位的問題，而我們搭配了PIR Sensor，因而改良了此
缺點。所以此系統適合應用在辦公室或一般居家空間中，由於數位生活的大部份應用皆針對上
述兩種環境，所以我們在這之中設計了一套具有身份辨識能力的定位系統，讓各式的數位服務
能更有效地貼近人類。 
本系統具有特色如下： 
1. 快速佈建 
(1) 由於每個節點為一個無線模組和一個感測器模組組成，並且可以電池為電力來源，所以每
個節點體積不大，在程式燒錄後可直接安裝至目標位置，不需拉線或特別的安裝步驟。 
(2) 而定位節點安裝完全後，系統可立即運作，簡單地搭配各項數位服務，亦不需特別的設定。 
2. 身份辨識 
(1) 利用人員身上所攜帶的 Tag，可以分析出目標角色，且能得到該角色所在位置，並給予特
定服務，此功能非一般定位系統所能達成。 
3. 無線模組與感測器 
(1) 本系統有效地結合了無線模組與感測器，未來亦可結合不同的感測器達成不同精確度的定
位。 
(2) 經過我們調校後，降低了無線模組的訊息碰撞程度，並且實作碰撞重送機制，讓訊息遺失
率降至最低，提高系統的準確性。 
 
定位演算法研究 
  為了評估定位演算法的效能，模擬結果我們主要觀察三個部份：1. 當未知節點接收到三
筆以上的母節點定位資訊後，兩種演算法的定位誤失率。2. 分別對 REEL 演算法、Robust 
Triangle 與 ML-Multilateration 定位演算法統計其定位誤差率與測距誤差之間的相對關係。3. 
在不同的母節點密度底下進行定位誤差率的比較。而相關的模擬參數如下：網路大小：
800m*800m；Lmin：50m；母節點個數：200；未知節點個數：1000；ERRRSSI：30%；母節點
通信範圍：150m。在此我們定義 REEL 演算法計算出未知節點的位置為 estiP ，而實際的位置為
initP ，而 estiP 與 initP 的距離為 errorD ，若母節點的感測範圍為 gsenD sin ，則我們定義未知節點的定
Central Sink , query one node
0
2
4
6
8
10
1 2 3 4 5 6 7 8
query packet arrival rate(packet/sec)
av
er
ag
e 
nu
m
be
r o
f
qu
er
y(
pa
ck
et
/s
ec
) none
EWMA(0.125
)
 
圖 5.12 閘道節點位在中央，α=0.125，查詢單點。 
   
Edge Sink , query one node
0
2
4
6
8
10
1 2 3 4 5 6 7 8
query packet arrival rate(packet/sec)
av
er
ag
e 
nu
m
be
r o
f
qu
er
y(
pa
ck
et
/s
ec
)
none
EWMA(0.125)
 
圖 5.13 閘道節點位在邊緣，α=0.125，查詢單點。 
 
  再者，我們探討在不同數目的母節點情況底下對於三種定位演算法定位誤差率的影響。在
不同數目的母節點配置底下，每個未知節點能夠接收到的母節點個數也會受到影響。本章節的
時間分別針對母節點個數為 50、100、150、200、250、300 的情況下進行實驗，而未知節點在
各個不同的母節點個數下所擁有的平均母節點個數分別為 4.67、9.43、13.7、18.67、23.43、28.3，
模擬的結果如圖 5.11 所示。圖中可以發現有趣的現象，在母節點個數只有 50 的情況底下，
Robust Triangle 與 ML-Multilateration 的平均定位誤差率相差無幾，這是因為在母節點個數
只有 50 的情況底下，平均每個未知節點只能收到 4~5 個母節點的定位資訊，在定位資訊不足
的情況底下兩者都無法發揮其演算法的優點，而 REEL 因為擁有無交點情況下利用逼近的方式
去找出未知節點位置的方法，而此實驗也證明 NI-REEL 確實能夠降低定位誤差率，加上定位
Sensor Networks,” Proceedings of the first International Conference on Embedded 
Networked Sensor Systems, November 2003. 
[8]  Jana V. Greunen and Jan Rabaey, “Lightweight Time Synchronization for Sensor 
Networks,” Proceedings of 2nd ACM International Conference on Wireless Sensor 
Networks and Applications, September 2003. 
[9]  W. Heinzelman, A. Chandrakasan and H. Balakrishnan, “Energy-Efficient 
Communication Protocol for Wireless Microsensor Networks”, In Proceedings of the 
IEEE Hawaii International Conference on System Sciences, Hawaii, USA, January 
2000. 
[10]  A. Manjeshwar and D. P. Agrawal, “TEEN: A Protocol for Enhanced Efficiency in 
Wireless Sensor Networks”, In Proceedings of the International Workshop on Parallel 
and Distributed Computing Issues in Wireless Networks and Mobile Computing, San 
Francisco, CA, USA, April 2001. 
[11]  S. Lindsey and C. S. Raghavendra, “PEGASIS: Power Efficient GAthering in Sensor 
Information Systems”, In Proceedings of the IEEE Aerospace Conference, Montana, 
USA, March 2002. 
[12]  Wei Ye, John Heidemann, and Deborah Estrin, “An Energy-Efficient MAC Protocol for 
Wireless Sensor Networks,” INFOCOM 2002, June, pp. 1567 – 1576, vol.3. 
[13]  C´edric Florens and Robert McEliece, “Packet Distribution Algorithm for Sensor Networks,” 
INFOCOM 2003, Mar. 2003, pp. 1063 – 1072, vol.2. 
[14]  
[15]  ISO/IEC. IEEE 802.11 Standard. IEEE Standard for Information Technology, ISO/IEC 
8802-11:1999(E), 1999. 
[16]  H. Kopetz and W. Schwabl, “Global time in distributed real-time systems,” Technical 
Report 15/89, Technische Universität Wien, 1989. 
[17]  John R. Vig., “Introduction to Quartz Frequency Standards,” Technical Report 
SLCET-TR-92-1, Army Research Laboratory, Electronics and Power Sources 
Directorate, October 1992. Available at 
http://www.ieee-uffc.org/freqcontrol/quartz/vig/vigtoc.htm. 
[18]  D. Estrin, et al., http://nesl.ee.ucla.edu/tutorials/mobicom02. 
[19]  R. M. Metcalfe and D. R. Boggs, “Ethernet: Distributed packet switching for local 
computer networks,” Communications of the ACM, 26(1):90-95, January 1983. 
[20]  I. Rubin, “Message Delay in FDMA and TDMA Communication Channels,” IEEE 
Trans. Communin., COM27(5)769-777, May 1979. 
[21]  David L. Mills, “Internet Time Synchronization: The Network Time Protocol,” IEEE 
Transactions on Communications, Vol. 39, No. 10, October 1991. 
[22]  Mihail L. Sichitiu and Chanchai Veerarittiphan, “Simple, Accurate Time 
Synchronization for Wireless Sensor Networks,” IEEE WCNC 2003. 
[23]  An-swol Hu and Sergio D. Servetto, “Asymptotically Optimal Time Synchronization 
in Dense Sensor Networks,” Proceedings of 2nd ACM International Conference on 
Wireless Sensor Networks and Applications, September 2003. 
[24]  Qun Li and Daniela Rus, “Global Clock Synchronization in Sensor Networks,” IEEE 
INFOCOM 2004. 
[25]  G. Asada, M. Dong, T.S. Lin, et al., “Wireless Integrated Network Sensors: Low Power 
Systems on a Chip,” Proceedings of the European Solid State Circuits Conference, 
[42]  W.B. Heinzelman, et al., “Middleware to Support Sensor Network Applications“, IEEE 
Network, vol. 18, no. 1, pp. 6-14, 2004. 
[43]  A.L. Gilbert, M.K. Giles, R.B. Flachs, R.B. Rogers, Y.U. Hsun, A real-time video tracking 
system, IEEE Trans. Pattern Anal. Mach. Intell. PAMI-(1980) 47-56. 
[44]  BAHL, P., AND PADMANABHAN, V. RADAR: An In-Building RF-based User Location 
and Tracking System. In Proc. IEEE INFOCOM (Tel-Aviv, Israel, Mar. 2000). 
路能夠完成時間同步。在廣播時間郵戳的同步技術中有著一系列非常吸引人的特色。第一，利
用廣播時間郵戳來使得在一次跳躍內的所有參考點都能夠完成時間同步的動作，這種作法能夠
大大的節省掉許多能源，這也是目前在無線感測網路相關研究中最重要的一項研究議題。第
二，此方法能夠利用多次發出封包，以達到評估每個節點間不同的時間偏移，而在往後的時間
中，即能使用其時間偏移數據來修正自身節點的本地時間，而不需要太過頻繁的時間同步動
作。此項特性也亦能夠省下許多額外的同步能源。第三，精準的時間同步動作與多次跳躍的時
間轉換可以有效的幫助資料路由，資料收集與分類，系統的定位，資料計算速度的增加等等。
此外，TBS 還達到了避免產生節點孤兒問題，且不需任何基本網路結構，亦不會產生太多的交
換封包，藉此以節省多餘的能量消耗。 
   
研究內容與原計畫相符程度 
  系統要能夠達成具有週期性感測能力的功能，則必須提供一個具有時間同步能力的無線
感測網路環境。且網路上的每個節點，能夠儘可能的在運作時節省電源的消耗。本次計畫所提
出的演算法，可以在週期性感測的無線感測網路環境中，利用廣播時間戳記的方式來達到時間
同步的目的且可降低能源的消耗，因此，大致符合原計畫的所提出之研究方向。 
 
達成預期目標情況 
  本次計畫所提出的時間同步演算法，是應用在同步時槽式的情況，換句話說，可適用於網
路節點經由時間排程來傳輸或接收資料的情況。然而，在實際網路平台模擬的部份，相關的資
料研讀也大致完成，即將進行演算法效能的實際硬體測試。因此，接下來可以將去年計畫所提
出的排程演算法與本次計畫所提出的時間同步演算法相結合，完成建構一具有時間同步與時間
排程的無線感測網路環境，俾利用於居家看護的系統中。 
 
研究成果之學術或應用價值 
  本年度所提出的演算法，在現今需要時間同步的無線感測網路應用環境中，在時間同步方
法上可達使用到消耗最少能源的目的。與過去提出相關研究的文獻相比較，著實在節省電源的
表現上較為突出。本計劃研究成果已發表於2006年數位生活科技研討會(論文內容請見附錄)。
在應用方面，本計劃所提出之演算法除可以應用於居家看護的系統中，還可廣泛使用於各種資
料感測的無線感測網路，如：野生環境的長期觀察，遠距醫療，甚至於軍事偵測等。 
 
7.3. 95 學年 
  在本年度的計劃中，我們所提出的節能可靠定位演算法，特別針對無線感測網路中低耗
電、低計算量、低成本的準則去設計一個可信的定位演算法，透過預先的節點選取機制，避免
傳統上不加選擇母節點進行運算，而是將所有可能的母節點組合計算之後再進行複雜且耗時耗
電的統計工作。而無交點節能可靠定位演算法的加入不但成功解決了傳統三邊定位演算法底下
的誤失情況，更進一步的提升了定位精準度。藉由定位可靠度模型針對各種不同的定位條件
下，去選取一個能讓未知節點有更高的機率去得到準確率較高的定位座標而不透過任何後續大
量的統計運算，達到低耗電、低計算量也能確保選取的定位座標的可信度。再者，我們也實做
出一套室內追蹤系統後。該系統可輕易地與數位生活或醫療應用結合，例如人員行至特定室內
區域時，則啟動該環境的電子產品對其服務；抑或是在醫療用途上，偵測精神病患的移動路徑
或所在區域。目前最常見的應用是室內燈光的控制以及氣溫的控制；另外無線感測網路通常用
於工廠自動化設備。在資料查詢的部份，我們以開發了一套代理軟體(COA)。COA 的運作程
附錄－I 
 
運用於無線感測網路之以時區切割為主的節能傳輸排程法1 
 
林鉅堯 電腦與通信工程所 國立成功大學 E-mail:victor@nsda.ee.ncku.edu.tw 
林輝堂 電機工程系 國立成功大學 E-mail:htlin@mail.ncku.edu.tw 
 
 
摘要 
連續偵測是無線感測網路的眾多應用中之一，網路中每
個感應器節點定期傳輸一個自身偵測到的事件回到閘道
(Base Station)做資料處理，基於省電的大前提之下，如果對
整個網路系統所有節點的資料傳輸與處理運等做適當的排
程，讓節點只在必要的時刻維持運作狀態，其餘時間進入睡
眠模式，便可有效達到省電的效果。 
這篇論文主要針對連續偵測應用提出一個有效率的排
程方法，能夠完全避免封包傳送碰撞(collision)的問題，並且
大大地減少時槽(time slot)的使用。除此之外，每個節點在一
個回合裡，只需切換睡眠(sleep mode)-運作（active mode）
狀態兩次，減少因切換所造成的能源消耗，而達到省電的效
果，進而延長網路系統之存活時間。透過模擬，本論文所提
出的排程方法表現確實優於目前已被提出的方法。 
 
Ⅰ.導論 
近幾年來，隨著無線網路的興起，各式各樣的應用
為人類生活帶來更多的方便，在學術研究上，以無線
網路做基礎的各種應用研究也隨之熱絡起來。無線感
測器網路是目前熱門的研究課題。由於無線感測器網
路應用的環境通常是較為險惡或人類不易到達的。正
因為如此，無線感測器網路的能量來源大多數是來自
電池而且置換不易，因此，在不影響正常運作的前提
之下，如何盡量減少節點在能量上的消耗，使得整個
網路系統的存活時間達到最長，是無線感測器網路研
究的重要議題之一。  
無線感測器網路有各種不同的應用，譬如，可以應
用在野生環境的長期觀察，也可以應用在遠距醫療方
面，甚至軍事偵測等。而不同應用有不同的偵測方式
[1]，較普遍的有分為事件導向的偵測(event driven)和
週期性連續偵測(continuous monitoring)兩種。前者是當
有特殊事件發生時，偵測到此事件的節點才將事件傳
送到閘道做進一步處理。後者則是所有網路中的節點
週期性的將自身偵測到的事件，傳回閘道。 
無疑的，無線感測器網路的實現會依不同的應用有
不同的做法，對應於省電的議題上，也會依照不同的
應用而有不同的設計。為了達到省電的目的，依照實
際的應用不同，目前已經提出的諸多方法中，較常見
的方法有兩種，一是設法找出有效率的傳輸路徑
[2][3]，以減少能源消耗。一是在傳送過程將資料作適
當的處理以減少傳輸的資料量，從而達到節約電源的
消耗[4][5]。除此之外，如果將資料傳輸作適當的安
排，例如運用傳輸排程[6][7]等方式，可有效減少節點
因閒置所消耗的電源，延長整體網路的運作時間。 所
謂排程(schedule)是事先對於網路節點的運作預先做時
間上的安排。例如，當一個節點在傳送封包時，讓需
要接收該封包的節點處於接收狀態即可，其餘的節點
可處於耗電量較低的睡眠模式，如此除了可減少節點
的耗電量外，還可以避免電磁波在傳送時造成的干擾。 
本篇論文將針對週期性連續偵測的應用，提出一套排
程方法以達到省電的目的。目前相關的研究，有Mihail 
L. Sichitiu提出的Cross-Layer排程法[6]，此演算法對於
每個節點的運作進行排程，確實改善了節點在能量上
的消耗以及延長網路系統之存活時間。但此方法的缺
點是，它無法完全避免封包在傳輸時，可能造成碰撞
的問題[6]以及過多無謂之時槽的使用，增長讓閘道收
到所有節點傳送資料所需耗費的整體時間。這兩點在
後面的模擬部分有更進一步的說明。 目前相關的排程
研究，皆無法完全避免電磁波在傳送時造成的碰撞問
題。在傳送封包時若發生碰撞，不僅影響單位時間的
有效傳輸量，並且造成無謂的能量消耗，以及事後的
應對處理可能增加演算法的複雜度。當一網路已進行
排程後，一旦發生碰撞，通常碰撞會連續發生，甚至
使得整個網路系統崩潰。所以，解決碰撞問題對排程
而言非常重要。  
我們提出的排程法不僅對於任意的網路樹狀拓蹼
皆適用，還能完全避免碰撞問題，而且運作模式的時
段高度集中，每個節點只須在每一回合中，切換睡眠-
運作狀態兩次，減少狀態切換時所造成無謂的能量消
耗，並且在時槽的使用上，達到最小需求，如此可支
援更即時性的應用。 
這篇論文在第二部份介紹主要的排程方法，第三部
份是模擬的結果，最後是未來的研究及結論。 
 
II. 提出的方法 
假設環境理想化，沒有雜訊干擾，並且節點與節
點互相的同步亦理想化的前提之下: 
本排程法分為兩部份: 
The setup and reconfiguration phase:  
此步驟發生於網路的起始，在這一步驟節點又分成
1本論文的研究經費補助來源為國科會計畫 
 計劃編號 NSC93-2213-E-006-054 
 
型態2:  
距離葉節點3的倍數減2個hop距離之節點(例如
1，4，7等等個hop距離的節點) 
如圖三所示，同理於型態1，此類節點由時刻1開
始，起始狀態為R，然後於下一時刻(時刻2)，將其接
收的事件傳送給父節點，其傳給父節點的暫時性排程
則由時刻2，狀態R做相對應的接收，並緊接著於時刻3
往祖父節點傳送，時刻4處於閒置的狀態: 
 
 
圖三 節點型態2: 
 
圖三(a)為距離葉節點一個hop距離的節點之起始
暫時性排程，圖三(b)為其傳給父節點的起始暫時性排
程。圖三(a)若為距離葉節點4，7，或(3x-2), (x>=1) hop
距離的節點，則兩邊的暫時性排程都必須加上對應於
子節點傳送封包過來的排程。 
 
型態3:  
距離葉節點3的倍數減1個單位距離之節點(例如
2，5，8等等個hop距離的節點) 
如圖四所示，相似於型態1或2，此類節點由時刻2開
始，起始狀態為R，然後於下一時刻(時刻3)，將其接
收的事件傳送給父節點，不同的是，其傳給父節點的
暫時性排程由時刻0起始，其狀態為S，執行偵測，於
時刻1時將偵測結果傳給其父節點，然後在時刻2時進
入閒置狀態。接著於時刻3，調整為接收狀態，以接收
其子節點傳送的資料，並於時刻4傳送給自身的父節
點，時刻5再次處於閒置的狀態: 
 
 
圖四 節點型態3: 
 
圖四(a)之排程表為距離葉節點兩個hop距離之起
始暫時性排程，圖四(b)之排程表為其傳給父節點的起
始暫時性排程; 圖四(a)之排程表若為距離葉節點5,8,
或(3x-1),(x>=1)個hop距離的節點，則兩邊排程都必須
加上對應於傳送子節點傳送封包過來的排程。 
 
2-4 仲裁 : 分為兩種，一是父節點端的仲裁，一是
閘道的仲裁，以下將一一詳細介紹 
 
 
圖五. 父節點端的仲裁發生時刻之ㄧ 
 
由於本排程法支援的拓蹼形狀是任意擴張樹，圖五
中節點1有兩個子分支，所以節點1會有兩個暫時性排
程，左邊為左子分支暫時性排程表;右邊為右分支的暫
時性排程表，若不加以處理，則左右分支進行傳輸時
會發生碰撞，因此節點1要對此二排程做仲裁，以避免
碰撞發生。  
圖五中節點1的左分支僅有一個節點，右分支有兩
個節點，取分支深度最大者稱之為調整基準分支，所
以右分支為調整基準分支，而左分支則為被調整分
支。同時定義調整基準分支已經使用的時槽值為L (以
圖五為例 L = 9)。節點1對其兩條分支進行仲裁時，以
調整基準分支(右分支)排程表使用的時槽值L為基準，
對另一條被調整分支的排程表進行適當的延遲，將此
二排程結合成一個排程，使此二排程碰撞的情形不再
發生。結合後產生的新排程，會有新的使用時槽值L，
若有多條分支的話，則再以此新的時槽值為基準，與
其他被調整分支循序進行仲裁，直至所有被調整分支
皆完成仲裁為止。 
A. 父節點端的仲裁: 
當父節點收到其所有子節點的暫時性排程後，該父
節點必須對所有子節點的排程分別做出仲裁。若有N
個子分支，就必須執行仲裁(N-1)次，每次仲裁後，發
送給被調整分支一個包含有必須延遲若干單位時間的
ACK訊息，所有屬於該子分支的所有節點依此ACK中
的訊息對原來暫存的排程做適當的延遲。 
假設兩分支皆有前指標指向個別暫時性排程表起
始，末指標指向個別暫時性排程表末端。 
在所有暫時性排程表中，調整基準分支的暫時性
排程表起始時刻若為0，則稱該調整基準分支為狀態
0，若起使時刻為1，則為狀態1，同理若為2，則為狀
態2。同理依被調整分支的暫時性排程表起始時刻，該
分支分別處於為暫時性狀態0，1，或2。因此結合調
整基準分支的狀態與被調整基準分支的狀態，當父節
  
圖九 調整基準分支-狀態1 v.s. 被調整分支-暫時狀態
1之仲裁 
 
 
(7)調整基準分支-狀態2，被調整分支-暫時狀態0:  
由於此型仲裁的暫時性排程表格式與(4)完全相
同，所以仲裁方法與(4)完全相同。 
 
(8)調整基準分支-狀態2，被調整分支-暫時狀態1:  
與(7)相同的解釋，仲裁方法與(5)完全相同。  
 
(9)調整基準分支-狀態2，被調整分支-暫時狀態2: 
與(7)相同的解釋，仲裁方法與(6)完全相同。 
 
B. 閘道的仲裁:  
如圖十所示，發生在所有節點都已經排好自身暫時
性地排程時，由於在同一時刻，閘道只能接收一個由
子分支傳送過來的封包，所以必須對每條分支做最後
的仲裁，藉由對每條分支發送一個載有必需延遲多久
單位時間的RACK訊息，除了錯開每個分支的排程，亦
確定了最後真正的排程。 
 
圖十. 閘道的仲裁發生時刻 
 
方法:基於省電因素，先由深度最深的分支當調整
基準分支(不須延遲，選深度最深的分支可減少了廣播
訊息的次數)，然後選其餘分支中，深度次大的分支為
被調整分支，延遲 L 單位時間，之後調整基準分支進
入睡眠模式，再由原本當被調整分支的分支當新調整
基準分支，其餘尚未仲裁的分支，選深度次大的分支
當被調整分支，一樣延遲 L 單位時間(對應於新調整基
準分支的Ｌ)，如此重複直至所有被調整分支皆被仲裁
並適當的延遲其排程。 
 
2-5 排程完成:  
圖十一為10個感測網路節點的網路系統完成排程
的可能結果之ㄧ，綠節點為閘道，白節點為一般感測
網路節點，黑色實線表示兩節點為有父子關係的節
點，紅色虛線表示兩節點間有相鄰的關係。 
 
 
圖十一 範例-10個感測節點形成之網路排程完成圖 
 
The steady state phase  
節點依據排程來運作，分為傳送,接收,閒置和感
測，在每一回合中，節點不用運作時即可進入睡眠模
式，如此經過若干回合後，當有節點故障或能量耗盡
時，可能造成部份網路中斷，為了解決此一問題，可
於一段時間後再回到第一步驟，重新建立拓蹼和排
程，如此週而復始。 
 
III. 模擬結果 
本論文提出的排程法是以Cross-Layer排程法為基
礎，並且改善其碰撞次數及排程耗費過多的時槽等缺
點。因此模擬的比較對象是Cross-Layer排程法，以及
經過改良之後的Cross-Layer排程法，依據[8]將原本的
Cross-Layer排程法的基本傳送封包單位動作修改為(接
收-傳送-閒置)或(感測-傳送-閒置)，(葉節點不需閒
置)，並修改閘道的排程表以避免有兩個以上的節點對
閘道同時傳送的情形，以下將以Cross-Layer-Fix排程法
稱之。  
與[6]相同，建立拓蹼的方法是距離向量(Distance 
vector)演算法，每個節點選擇父節點是選擇所有候選
點中，擁有最多能量的節點。在環境參數的設定方面，
環境為100Mx100M，傳送範圍為25M，每次傳送或接
 
 
圖十七 網路系統造成一半以上的節點無法傳送封包
至閘道之網路存活時間 v.s. 節點數量 
 
由圖十二可知，雖然三種排程法都是網路節點越多
每回合所需的最少時槽數量亦越多，但是本論文提出
的演算法之表現，每回合所需的最少時槽數量呈較規
律的成長，由於Cross-Layer排程法的排程是經由競爭
而成，所以每次模擬，所需的最少時槽數量呈現較不
規律的變動。相較於網路系統有300個節點時，我們的
演算法最少需要800個左右的時槽，而Cross-Layer排程
法至少需要4000個左右的時槽，其相差高達五倍以上。  
在每回合造成碰撞的模擬方面，由圖十三所示，我
們的演算法完全避免了碰撞，而原本的Cross-Layer排
程法之基本傳送單位並沒有處於閒置的狀態，所以在
網路系統上有300個節點時，每回合碰撞次數已經接近
400次，至於經過改良的Cross Layer-Fix排程法，已經
幾乎避免了所有的碰撞，但隨著節點數量越多，偶而
還是會發生零星幾次的碰撞，還是未能完全避免碰撞。  
由於我們的演算法減少了運作-睡眠模式地切換次
數，由圖十四證明確實是比較省電的。網路上節點數
越多，Cross-Layer排程法的排程運作-睡眠模式地切換
次數越多，每回合中，本論文提出的排程法將相對地
越省電。由於Cross-Layer-Fix排程法的傳送單位傳輸多
了閒置狀態，所以相較於Cross-Layer排程法每回合需
要更多時槽，故比Cross-Layer排程法更耗電。  
此三種演算法省電的效果，可由圖十五、十六、十
七中依據三種不同網路存活時間的定義來比較，很明
顯的是本論文提出的演算法之網路存活時間均較其它
兩種演算法之網路存活時間為長。如圖十五中，在相
同範圍的網路內，節點數越多，本論文提出的演算法
之網路存活時間相對地越長，這是因為節點數越多，
每回合的時間亦相對地延長，所以相對地處於睡眠狀
態的時間也延長，再加上網路上節點數越多，每條分
支深度可能相對地變小，排程表上的動作也就相對的
減少。在節點數達到300個時，本演算法的存活時間已
經比Cross-Layer排程法多了105秒，比coss-Layer-Fix排
程法多了4x106秒。 
相對於第一個節點死亡時間，系統網路造成分割區
域的網路存活時間及當一半以上的節點無法傳送封包
至閘道時的網路存活時間更長了。  
圖十六，系統網路造成分割區域的網路存活時間模
擬中，每種拓蹼的排程運作經過一天後，可能會有節
點耗盡電量或故障，或原本負荷重的節點能量已經偏
低，必須再重新建立新的排程和新的拓蹼，以期達到
最大的網路存活時間，圖十七，造成系統網路中一半
以上的節點無法傳送封包至閘道的網路存活時間的比
較，依照排定的排程運作直至有節點能量耗盡，再於
下個回合重新建立新的拓蹼排程。由於本論文提出的
排程法每個節點的運作-睡眠模式地切換次數變少，使
得每回合都較為省電的情形下，使得節點的存活時間
更長，由於從網路開始運作直至出現第一個節點耗盡
電源的時間增長，因此本論文提出的排程法，不論是
造成分割區域或造成系統網路中一半以上的節點無法
傳送封包至閘道的網路存活時間的比較，都相對地優
於其他兩種演算法的網路存活時間。  
以網路上有300個節點為例，造成系統網路形成第
一個分割區域的網路存活時間和造成系統網路中一半
以上的節點無法傳送封包至閘道的網路存活時間這兩
種模擬，本論文提出的排程法存活時間已經高達
4.3x108秒和 4.5x108秒比Cross-Layer排程法多了 107
秒，比Cross Layer-Fix排程法多了3x107秒。 
 
IV. 結論 
本論文提出一個適用於任意擴張樹狀拓蹼的排程方
法，在不增加複雜度的前提下，與以前提出的舊排程
法比較，本論文提出的排程方法完全解決了碰撞的問
題，並且在時槽的使用上，更為節省有效率，因此能
適用於節點數量更大的網路系統或更即時性的應用。
除此之外，每個節點在每回合中的運作時間高度集
中，避免因多次的運作-睡眠模式切換所造成的能量浪
費。透過模擬，顯示本論文提出的排程法確實能有效
的節省能量，並且延長網路存活運作的時間。未來將
進一步改進本排程演算法，例如將資料聚集的機制加
入排程演算法，使得傳遞的資料量更少，進而達到更
省電的目的。 
 
參考文獻 
 
[1]S. R. Madden, M. J. Franklin, J. M. Hellerstein, and W. Hong,   
“The design of an acquisitional query processor for sensor networks,” 
(SIGMOD’03), San Diego, CA, June 2003. 
[2]Azzedine Boukerche, Xiuzhen Cheng, and Joseph Linus, 
“Energy-Aware Data-Centric Routing in Microsensor Networks” 
MSWiM’03, September 19, 2003, San Diego, California, USA.2003 
ACM. 
[3]D. Braginsky and D. Estrin, “Rumour routing algorithm for sensor 
networks” in First ACM International Workshop on Wireless Sensor 
Networks and Applications, 2002. 
[4]Jim Chou, Dragan Petrovic, Kannan Ramchandran, “A Distributed 
and Adaptive Signal Processing Approach to Reducing Energy 
Consumption in Sensnor Networks, ” IEEE Infocom, San Francisco, 
CA, March 30 - April 3, 2003. 
[5]H¨useyin ¨Ozg¨ur Tan and ˙Ibrahim K¨orpeoˇglu, “Power Efficient 
Data Gathering and Aggregation in Wireless Sensor Networks” ACM 
SIGMOD Record, Volume 32, Issue 4 December 2003 
[6]Mihail L. Sichitiu, “Cross-Layer Scheduling for Power Efficiency in 
Wireless Sensor Networks,” INFOCOM 2004, Mar., pp. 1740 – 1750, 
附錄－II 
 
TBS: Timestamp Broadcasting Synchronization in 
Wireless Sensor Networks 
 
 
Hang-Seok Lo, Hui-Tang Lin, Yi-Fan Chen 
Institute of Computer and Communication Engineering, National Cheng Kung University, Taiwan 
E-mails: victoryman@nsda.ee.ncku.edu.tw , htlin@mail.ncku.edu.tw, echen@nsda.ee.ncku.edu.tw 
 
Abstract—In this paper, we present a time 
synchronization mechanism, named Timestamp 
Broadcasting Synchronization, for wireless sensor 
networks. The proposed scheme is a hybrid protocol 
of sender-receiver and receiver-receiver 
synchronizations. It works in two phases, which are 
Setup phase and Synchronization phase. In Setup 
phase, a reference node estimates the transmission 
delay between itself and its neighbor nodes. In 
Synchronization phase, a reference node sends one or 
more reference timestamp packets to its one-hop 
neighbor nodes to perform synchronization. Hence, it 
is capable of supporting multi-hop synchronization; 
therefore, nodes could synchronize to a standard 
reference time and achieve network-wise 
synchronization. Simulation results have shown that 
the proposed mechanism achieves excellent time 
synchronization while consuming much less energy 
than most current time synchronization mechanisms. 
 
Keywords: Time Synchronization, energy efficient, 
Wireless Sensor Networks 
 
Ⅰ.Introduction 
 
Time synchronization is one of the fundamental 
technologies in distributed systems. The goal of time 
synchronization is to provide a common timescale for 
local clocks of all or some nodes in a network. For years, 
the Network Time Protocol (NTP) [13] has been the de 
facto time synchronization mechanism to keep all the 
systems of Internet in sync. However, the recently 
emerging wireless sensor network has posted great 
challenges on the NTP in terms of the scale of time 
precision and the requirement of energy conservation. 
Like most distributed systems, many applications of 
wireless sensor networks depend on the local clocks of all 
nodes in the network to be synchronized. Example 
applications include object or event tracking, secure 
cryptographic operations, coordination of pre-scheduled 
actions, orderly event loggings, etc. However, these 
applications may demand the worst time offset between 
any node’s local clock and the global clock to be no 
greater than a few micro seconds, much stringent than the 
demands of most applications in current Internet.  Also, 
most of the sensor nodes are powered by batteries and 
have a very tight energy budget. Therefore, the energy 
consumption for synchronizing all nodes within the 
network must be minimized while keeping nodes 
precisely synchronized.  
Many existing time synchronization algorithms have 
focused mainly on minimizing the time offset of 
synchronization and the amount of computation. Energy 
consumption from communication is often not on the top 
of the priority list. However, in wireless sensor networks, 
energy is a highly constrained resource.  It is critical that 
any time synchronization mechanism to be successful in 
wireless sensor networks must be designed with a 
conscious effort on the demanded energy of the time 
synchronization algorithm. 
In this paper, we present a time synchronization 
scheme, called Timestamp Broadcasting Synchronization 
(TBS), for wireless sensor networks. TBS is a hybrid of 
sender-receiver and receiver-receiver synchronizations. It 
is capable of supporting multi-hop synchronization; 
therefore, nodes could synchronize to a standard 
reference time and achieve network-wise synchronization.  
More importantly, TBS is designed to be very energy 
efficient, yet providing good time precision. The 
remainder of this paper is organized as follows. Section II 
describes the current time synchronization mechanisms in 
the literature and the issues of these existed schemes. 
Section III presents the architecture of TBS. Section IV 
evaluates the performance of TBS and analyzes the 
simulation results. Section V addresses the details and 
simulation results of multi-hop synchronization of TBS. 
Finally, Section VI draws some conclusions and points 
out future work. 
 
II. RELATED WORK 
 
Although time synchronization has been the topic of 
research for the past many years in a wide spectrum of 
applications, it has not been studied in the arena of 
wireless sensor networks until recently. Some 
synchronization schemes for wireless sensor networks 
required in TBS. Like LTS, TBS is capable of supporting 
multihop synchronization.  
In TBS, it is assumed that all nodes in wireless sensor 
networks have the capability of hardware timestamping at 
Medium Access Control (MAC) layer. Also assume all 
nodes have similar transmission characteristic from MAC 
layer and below. 
Basically, TBS operates in two phases: Setup phase 
and Synchronization phase. As shown in Figure 1, in 
Setup phase, a node is elected as the reference node, 
called Node R, based on some criteria (e.g. power levels, 
positions, clusters [21, 22, 23 and 24]). Node R sends a 
hello message to its entire one-hop neighbor nodes asking 
for assistance. The hello message informs all its one-hop 
neighbor nodes it is the reference and asks one of them to 
assist in this phase. When the neighbor nodes receive the 
message, they respond in a CSMA/CA way by first 
performing random-backoff before sending responding 
messages. 
Node R may receive one or more responses from its 
neighbors, and the first responded one will be chosen as 
the Assistant Node, called Node A. Node R sends packet 
1 to Node A and Node A responds with packet 2 back to 
Node R, shown in Figure 2. Packet 1 contains the sending 
time of Packet 1 (T1) according to Node R’s local clock. 
Upon receiving Packet 1, Node A records the receiving 
time (T2). Node A then responds by sending Packet 2 
back to Node R. Assume the sending time of Packet 2 is 
T3 according to the local clock of Node A. Packet 2 
contains both T2 and T3. Assume the receiving time of 
Packet 2 at Node R is T4. Similar to LTS, when Node R 
receives Packet 2, it can derive the transmission delay 
between itself and Node A as follows: 
 
     2
)34()12( TTTTD −+−=
           (1) 
 
The estimated transmission delay D is used later in 
Node R’s one-hop neighbor nodes to perform 
synchronization. Once the estimated transmission delay D 
is derived, TBS enters Synchronization phase. As shown 
in Figure 2, Node R broadcasts Packet 3, which contains 
no message but serves as an indication for its neighbors to 
record the receiving time according to their own local 
clock. Later, the reference broadcast Packet 4, which 
contains a timestamp of Packet 3. The timestamp 
contained in Packet 4 is a sum of the Packet 3’s sending 
timestamp (the moment when Node R sending Packet 3 
with respect to its local time) and the estimated 
transmission delay D.  
With the information in Packet 4, one-hop neighbor 
nodes would know at what time they receive Packet 3, 
with respect to the local clock of Node R. Therefore, all 
the one-hop neighbor nodes are synchronized with the 
reference node. To overcome the clock drifting problem, 
the reference node sends Packet 5 a while later to allow 
one-hop neighbor nodes to perform synchronization. Like 
Packet 4, Packet 5 contains a timestamp which is the sum 
of the estimated transmission delay D and the sending 
time of Packet 4. Like RBS, to overcome the clock 
drifting issue, the broadcasting is repeated every once a 
while  to allow all one-hop neighbor nodes to perform 
synchronization and keep time precision within a certain 
range, depending on the time accuracy requirement of the 
application.  
 
IV. Performance Study 
 
To evaluate the performance of TBS, two scenarios of 
single-timestamp and multi-timestamps synchronization 
are simulated and multi-hop synchronization is 
demonstrated later. We compare the single-timestamp 
synchronization of TBS with LTS [6] in the aspects of 
power consumptions and time accuracy. Then we 
compare the performance of the multi-timestamp 
synchronization between TBS and RBS. 
 
A. Assumptions 
In the simulations, transmission range of each node is 
assumed to be 100 meters. Assume the reference node is 
located at the center of its transmission coverage field 
(shown in Figure 3) and two or more one-hop neighbor 
nodes are randomly located within its transmission 
coverage. The oscillators of nodes are assumed to have a 
drift rate of 50ppm,  
R
Transmission Range 
of Reference Node R
Sensor Nodes
 
 
Figure 3. The Simulation Scenario 
 
99% of confidence interval
0
1000
2000
3000
4000
5000
0 20 40 60 80 100 120 140
Reference Time (seconds)
Ti
me
 D
rif
t (
mi
cro
-se
co
nd
s)
 
Figure. 4. Time accuracy of one-hop neighbor nodes in 
regard to reference node, with single pulse 
synchronization by TBS. 99% of confidence interval.  
(130 trials for each data point) 
 
according to the technical report in [9]. Furthermore, the 
synchronization process. 
Note that the time precision achieved by TBS is 
inevitably limited by the non-determinism of sending 
time and the propagation delays between the reference 
node and all nodes within the one-hop neighbor region. 
Since the distance between each node in one-hop 
neighbor region and the reference node is different, the 
propagation delay varies. However, as the propagation 
speed of electronic signals is close to the speed of light, 
the discrepancy between the real propagation delay and 
the assumed propagation delay is negligible, about 0.33 
μs for 100 meters. 
 
V. Multi-hop Time Synchronization 
 
TBS can be used to coordinate time synchronization 
between a set of one-hop neighbor nodes to their 
reference node. However, sometimes having a single 
reference node to synchronize all nodes in an entire 
network is insufficient and multi-hop synchronization is 
necessary. Figure 9 shows an example topology of 
applying TBS in a 
5
6
B
7
3 4
A
1 2
 
Figure 9. A simple topology where multi-hop time 
synchronization is required. Node A and B send 
synchronization pulses, establishing two locally 
synchronized neighborhoods. Receiver 4 will hear both A 
and B, and can relate nodes in either neighborhood to 
each other. 
 
multi-hop scenario. Both Node A and B are reference 
nodes. They send synchronization timestamp packets to 
their one-hop neighbor nodes. Node A and B could not 
hear each other but both of them can be heard by the 
one-hop neighbor Node 4. Nodes with the same reference 
node can relate their clocks to each other. However Node 
1 associated with Node A cannot derive the clock of 
Node 7, which is associated with Node B. But with the 
help of Node 4, which is in a unique position to hear 
synchronization timestamp packets from both reference 
nodes, Node 1 can relate its clock with Node 7’s clock. 
 
A. Multi-hop Clock Conversion 
Similar to RBS, TBS applies the multi-hop clock 
conversion technique for supporting multi-hop 
synchronization. The way multi-hop clock conversion 
works is that suppose we want to compare the times of 
two events that occurred at different nodes of the network. 
Assume that reference nodes A and B in Figure 9 both 
sent synchronization timestamp packets. Suppose that 
Node 1 observes an event E1, and Node 7 observes event 
E2 at different time. These nodes could consult with 
Node 4 which is in the unique  
1 2 3 4 5A B C D
 
Figure 10.The topology used to simulate the multi-hop 
clock conversion 
 
position to learn both of the local clocks of Node A and B. 
Since Node 4 knows both local clocks of reference nodes, 
Node 1 could transform the E1’s timestamp it records to 
the timestamp in the local clock of Node A. Also, Node 7 
could transform the E2’s timestamp it records to the 
timestamp in the local clock of Node B. As a result, Node 
4 knows both of the local clocks of reference nodes; it can 
compare and decide the time difference between the two 
events. 
The example shows the possibility to establish a global 
timescale for events with the helps from the intersection 
between reference nodes. The solution for converting 
time information also has many of benefits for data 
routings, data aggregations and could help the entire 
nodes in the network to synchronize to UTC, GPS, etc. 
Clock conversions can help enhancing the usability of 
data which has limitation of the period of validity, 
especially sensed data packets from critical events and 
critical sensing fields. Multi-hop clock conversions can 
also help localizations and speed determinations in 
wireless sensor networks. 
 
B. Performance Study of Multi-hop Time 
Synchronization 
  Figure 10 shows a simple topology used in our 
simulations to demonstrate the performance of multi-hop 
clock conversions between hops. Assume Nodes A, B, C 
and D are reference nodes and broadcast reference 
timestamps to their one-hop neighbor nodes, which are 
Node 1 to 5. In a multi-hop topology where a series of 
timestamp conversions are required, however each 
conversion step can introduce synchronization error. To 
have better analysis, we will demonstrate the results of 
simulation with single hop (1-2, 2-3, 3-4, and 4-5), 
two-hop (1-3, 2-4, and 4-5), three-hop (1-4, 2-5) and 
four-hop (1-5) results, respectively.  
 
Table 1 shows the simulation results of clock 
conversion with respect to the different number of hops. 
Without considering time offsets between one-hop 
neighbors and reference nodes, clock conversions 
between one-hop neighbor nodes achieve excellent time 
synchronization and low time offset. The clock 
[19]  Alberto Cerpa, Jeremy Elson, Deborah Estrin, 
et al., “Habitat monitoring: Application driver 
for wireless communications technology,” 
Proceedings of ACM SIGCOMM Workshop 
on Data Communications, April 2001 
[20]  Kay Römer, “Time Synchronization in Ad 
Hoc Networks,” Proceedings of 2nd ACM 
International Symposium on Mobile Ad Hoc 
Networking and Computing, October 2001 
[21]  Wendi B. Heinzelman, Anatha Chandrakasan, 
and Hari Balakrishnan, “Energy-Efficient 
Communication Protocol for Wireless 
Microsensor Networks,” Proceedings of the 
33rd Hawaii International Conference on 
System Sciences, 2000 
[22]  Wendi B. Heinzelman, Anatha P. 
Chandrakasan, and Hari Balakrishnan, “An 
Application-Specific Protocol Architecture for 
Wireless Microsensor Networks,” IEEE 
Transactions on Wireless Communications, 
Vol.1, No.4, October 2002 
[23]  Saâd Biaz and Yawen D. Barowski, “GANGS: 
an Energy Efficient MAC Protocol for Sensor 
Networks,” Proceedings of the 42nd Annual 
Southeast regional Conference, April 2004 
[24]  Ossama Younis and Sonia Fahmy, 
“Distributed Clustering in Ad-hoc Sensor 
Networks: A Hybrid, Energy-Efficient 
Approach,” IEEE INFOCOM 2004. 
[25]  Jason Hill and David Culler, “A wireless 
embedded sensor architecture for system-level 
optimization”, Technical report, UC Berkeley, 
2001 
 
 
 
與眾不同的是，他並非要求影像品質高以利用影像處理的方式來追蹤與定
位，相反的是他強調大多數人對於生活空間中有攝影機感到不自在，擔心隱
私受到侵犯，因此他對攝影機取得的影像加以處理，反而設法降低影像品質
但是保留影像的某些特徵來進行處理以達到追蹤與定位的目的，由於影像已
經過處理因此可以大大降低隱私權受侵犯的問題，而且可以迅速有效的達成
人員追蹤與定位的目的。其研究的構想與方法十分具有創意，非常值得參考。
大會第二天與第三天為論文報告與專題演講。第二天的專題演講邀請到
Nokia 資深副總裁也是研究單位的最高主管專題演講 Dr. Bob Ianucci，其
演講主題為 Nokia 認為具有潛力的未來明星科技。專題演講後接著是分成三
個主題的論文發表，本人上午選擇參加聆聽 Scheduling and MAC Layer 這
個主題的論文發表，下午則參加 P2P and overlay networks 這個主題的論
文發表，這些論文都與本人研究領域非常相關，深具參考價值。另外本人也
利用機會與論文發表者進行意見的交換與討論，獲益良多。第貳天節訴束前
的議程為海報的發表與討論，這是針對短篇論文與學術價值未達主題發表的
程度但是能有相當參考與觀摩價值的論文所設定的時間，每位作者將自己研
究的議題與內容製作成海報，對參加的來賓進行介紹並自由的討論，氣氛較
為輕鬆。
大會第三天的專題演講邀請到 Rice University 的 Edward Knightly 教
授，其講題為 Large-Scale Urban Mesh Networks: from Deployment to
Applications。演講的重點是其與學生當初為了幫助貧窮地區家庭的小孩能
夠上網以進行數位學習，透過 Houston 市政府的協助，為這些貧窮家庭提供
免費的網路設備與服務。但是從網路的架設與使用的經驗，他發現了一些與
Mesh Network 有關的學術研究議題值得深入探討。接著上午本人參加
Clustering and Localization 這個主題的論文發表，下午則參加 Optical
Networks 1 這個主題並發表本人的論文。論文發表非常圓滿成功並引起聽
眾的熱烈提問，並於本議程結束後繼續討論。
二、與會心得
IEEE Conference on Local Computer Networks 是國際電機電子工程學會
(Institute of Electrical and Electronics Engineering)計算機協會
(Computer Society)組織下的一個研討會，今年此研討會今年共有一百八十
多篇論文投稿，但是僅有約六十篇論文被接受發表，其論文錄取率僅僅只有
30%。根據大會主席宣佈，此研討會在計算機協會所主辦的一百八十七個研
討會中，排名第八，位在前 5%，所以是一個高學術品質的研討會，同時此
研討會能持續舉辦三十一屆，足見此研討會在全世界的學術界具有很高的聲
譽與評價。
不過本人發現此研討會中，有相當數量的論文來自大陸，台灣的論文僅有
