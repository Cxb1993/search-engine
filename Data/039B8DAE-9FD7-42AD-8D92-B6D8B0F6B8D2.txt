 I 
中文摘要 
隨著晶片製程技術的進步，現今一個晶片上已可以容納超過一億個邏輯閘，因此晶
片系統(system-on-a-chip)的設計將容許涵蓋數量龐大的 IP 核心，然而各個 IP 之
間的訊息交換將會形成一項新的挑戰，因此近年晶片網路(Network-on-chip)架構
被提出，它提供一個具良好延伸性並且可靠的晶片通訊方式。2D 網格(mesh)拓墣
架構在過去的 NoC 設計中被普遍的使用，因為它能使用簡單的路由演算法，並且具
有好的網路延展性。但是由於 2D 網格拓墣有相對較大的網路半徑，造成有些長距
離的封包傳送有較大的傳輸延遲。因此在這篇論文中我們針對傳統 2D 網格拓墣提
出一個簡單的設計方法，概念是讓長距離封包傳送在額外的另一層網格拓墣。實驗
實作一個大小為 12 x12 的雙層網格拓墣 NoC，在分別以 3x3 和 4x4 個節點為群組
的架構下，使用 Uniformly Distributed 流量測試且和一般的網格拓墣比較，結
果顯示最小的平均傳輸延遲分別降低 32%和 27%，而付出的面積成本為 21.5%和
12.1%。 
 
 
 
 
關鍵字：晶片網路、晶片系統、網格、兩層、延遲 
 
  III
CONTENTS 
中文摘要.............................................................................................................................. I 
ABSTRACT........................................................................................................................II 
CONTENTS...................................................................................................................... III 
報告內容............................................................................................................................. 1 
 
 2 
In [6], the authors proposed a new topology named 
multi-level-mesh. Our basic idea of using multi-level mesh 
hierarchy is similar to theirs. But our work is different in 
mechanisms of constructing the second level mesh and the 
routing strategy for transferring packets. They distribute 
constant amount of second level routers, and let packets use 
them if touch these routers by normal routing method. In 
[7], the authors proposed a new hybrid architecture that 
several sub-meshes are globally connected using a 
hierarchical ring interconnecting for replacing a large 2D 
mesh. In [8], the authors proposed express virtual channels, 
with this novel flow control and router micro architecture 
design, some virtual channel lanes can be used to allow 
packets to virtually bypass the intermediate routers along 
their path. In [9], the authors proposed a new architecture 
called Mesh-Tree, which is a multilayered mesh topology 
and using trees to connect adjacent layers. This architecture 
is better than 2D mesh especially for broadcasting and 
large system. 
 
3  Proposed method 
 
3.1   Network topology 
 
Here, we are going to describe how to construct a 2-
level mesh topology for our proposed method. We consider 
the M x N mesh topology, for convenience, we assume M 
= N. At first, we divide the original N x N mesh into some 
uniform smaller groups of nodes, and choose one node of 
each group to form the Level-2 mesh. Note that the nodes 
we mention here are routers or switches. We let each 
smaller group be a n x n sub-mesh, so that n divides N. 
Second, we choose the central node of each sub-mesh for 
constructing the Level-2 mesh, these routers are common 
members of both Level-1 mesh and Level-2 mesh, and we 
can achieve this objective by adding another four ports to 
an original five ports router. Besides, we choose the central 
node because the average distance from each node to the 
central node in a sub-mesh is minimal [10]. 
Figure 3 shows two different cases of choosing the 
central node in a sub-mesh. As this figure shows, the n x n 
sub-mesh is addressed by their 2 coordinates  ii YX ,  in 
the 2-dimensional space. When n is odd, there exits true 
central node; but when n is even, any one of the four nodes 
near central area can be picked. For consistency, we choose 
the     2,2 nn  node in sub-meshes as the central node for 
the above 2 cases in our simulation. 
Table 1. Comparison between the normal mesh 
and 2-level mesh                                              
(Size=N x N) Diameter Bisection width 
Normal 2D mesh )1(2 N  N2  
2-level 2D mesh )1(2)1(2  n
n
N  
n
NN 22   
 
Table 1 shows the diameter and bisection bandwidth of 
the normal mesh topology and the new 2-level mesh 
topology. We assume that original network size is N x N 
nodes, and the sub-meshes of the 2-level mesh are n x n 
nodes, which n divides N. We can see the 2-level mesh has 
smaller diameter, because the traffic can use the longer 
channels of Level-2 mesh instead of going through multiple 
nodes of the level-1 mesh. Besides, it is clear that 2-level 
mesh has larger bisection width due to the additional 
channels of Level-2 mesh. 
As we mentioned above, the Central node routers are 
common routers for both Level-1 mesh and Level-2 mesh. 
We can do this by adding four more ports to an original 
router, those additional ports are for each direction in 
Level-2 mesh (north, east, south, and west), and increase 
the size of the allocators and the crossbar, and slightly 
change some control logics. 
 
3.2  Routing algorithm 
In this paper, we use the XY routing to route data, 
because it is deadlock-free and easy to implementation. 
The XY routing is a deterministic and minimal routing 
algorithm, a packet will be first routed in X direction to the 
position equal to its Y coordinate and then in Y direction to 
its destination. It has been shown in [11] that the XY 
routing outperforms many complex adaptive routing 
methods in many situations, for the medium to large NoCs. 
We should notice that the special routing strategy we 
illustrate later is suitable for XY routing algorithm, the 
routing strategy may need to be modified for other routing 
algorithms. Additionally, Level-2 mesh can use the same 
routing method as original mesh, only different in 
conditions that packet needs to turn or stop. For example, 
the routing algorithm for Level-2 mesh is also XY routing 
 
Figure 3. Choosing the central nodes 
 
Figure 2. A 2-level mesh topology 
 4 
restrictions which are at least use one or two channels of 
Level-2 mesh. Specifically speaking, the third case in 
figure 5, P-routers which are  2n  from the Central router 
have to force the misrouted packets to use at least two 
Level-2 channels. With the exception of this case, the P-
routers have to force the misrouted packets to use at least 
one Level-2 channel.  
 
3.2.4  Deadlock avoidance 
We use the XY routing; it is a deadlock-free routing 
algorithm; it prohibits all the turns come from Y direction 
to X direction, thus it can avoid the circular-wait 
configuration. Moreover, XY routing is a minimal routing; 
the packets can not acquire the output which is the same 
direction as the input port that they come from, hence there 
is no 180 degree turn. 
Although the XY routing is deadlock-free, the routing 
strategy of our design that we previously explained may 
bring in deadlock problems. Here are some figures which 
shows some cases, the red dashed-lines represent the paths 
on Level-1; the blue solid-lines represent the paths on 
Level-2. Figure 6 (a) shows that when the long distance 
packets were routed to the different paths toward the 
Central node, but they return to go through Level-1 mesh 
with the normal XY routing due to congestion, it can be 
seen that the packets is allowed to turn from Y direction to 
X direction in these circumstances. The other figures in 
Figure 6 show that the packets may take the 180 degree 
turn between the Level-1 mesh and Level-2 mesh; Figure 6 
(b) shows the packet comes from the Level-1 north input 
port, and then goes to the Level-2 south output port, the 
Figure 6 (c) shows the packet from Level-2 goes down to 
Level-1 to its destination and takes a 180 degree turn. 
We adopt the routers which have at least two virtual 
channels and use the escape routes technique for deadlock 
avoidance [12]. For example, assuming there are two 
virtual channels per port VC0 and VC1, if a long distance 
packet acquires a different direction of output port between 
normal XY routing and toward Central node routing, the P-
routers can only use VC0 of an output port to route this 
packet to the Central node. Because we can guarantee the 
YX turns and 180 degree turns that shown in Figure 6 (b) 
can only be made by the packets which are located in VC0, 
such that the VC1 always uses normal XY routing for the 
packets in it and will not be blocked forever, all the traffic 
in the network can use this path to break deadlock.  
Note that the VC allocating policy of P-routers for VC0 
in the same direction with Central router needs a 
modification; the normal routed packets can only be 
allocated an empty VC0 while using wormhole routing, in 
other words, these particular VC0s cannot contain flits 
belonging to different packets except the special packets 
being led to the Central node. 
 
4 Experimental results 
 
4.1  Simulation setup 
 
We implemented a hardware-level simulator by Verilog 
HDL to measure the performance of network. At first, we 
implemented a conventional virtual channel router [13]; 
next, we added some extra component to form the Central 
router and P-router of our design. These routers have four 
pipeline stages, so that a packet needs four clock cycles to 
go through it. In addition, the delay of a channel between 
two routers is assumed to a single cycle. All the switch 
configurations of our simulation are summarized in Table 2. 
We assumed that the channel bandwidth is equal to the size 
of one flit. Besides, we used the matrix arbiter [14][15] 
which can provide a “least recently served” priority scheme.  
Table 2. Switch configuration of simulations 
Configuration Experimental sets 
Network size 12 x 12 
Network topology Ideal 2D mesh and 2-level mesh 
Flow control Credit-based 
Virtual channels 2 VCs per physical channel 
Routing algorithm XY routing algorithm 
Scheduling algorithm Least recently served 
Buffer depth 4 flits 
Packet size 8 flits 
Flit size 34 bits 
Buffer type Input buffer 
Switch architecture Wormhole switch 
Delay Router: 4 ; Channel:1 (cycles) 
 
The packets are generated and labeled with timing 
information right away before going into local source 
buffer or network. The source buffer is assumed with 
infinite size. We assume that the flits are consumed 
immediately when they reach the output port at their 
destination nodes. The latency of a flit is calculated from 
the time it is generated to that it is ejected from the network. 
The injection rate is a constant rate of flits generation, and 
the flits can be queued in source buffer until they are able 
to enter the network. For preventing packets of all nodes to 
be injected into the network synchronously, we use the 
geometric distribution, the interval between the generations 
 
Figure 6. Example of packets with turns which 
are not allowed 
