 
目錄     I 
 
 
一、中英文摘要及關鍵詞                                           II 
 
二、研究報告內容     1 
 
1. 前言與文獻探討     1 
2. 研究目的     4 
3. 研究方法     5 
4. 結果與討論(一)                                                              15 
5. 結果與討論(二)                                                              19 
6. 平行計算邏輯設計及模擬結果                                                 21 
7. 結論                                                                       23 
8. 圖表                                                                       24          
9. 畢業學生論文及已發表會議/期刊論文                                           43 
 
三、參考文獻                                                                   44 
四、計畫成果自評    4 7 
五、出席國際學術會議心得報告及論文                                               
六、Journal of Computational Physics 論文                                            
 III
Abstract 
In this two-year project, we have successfully built a new fast Navier-Stoke solver for 2D 
flow simulations based on a resurrected core-spreading vortex method and the multipole method. 
The resurrected core-spreading vortex method was developed via a vortex splitting method and a 
vortex merging algorithm, which were designed to make the solver accurate, efficient, and purely 
Lagrangian. Such a solver has been applied to the study of vortex dynamics with or without solid 
boundaries. The present project aims at speeding up the solver for the sake of simulating highly 
complicated flow fields by taking advantage of the so-called fast multipole method. Two fast 
algorithms, box-to-point and box-to-box approximations, were developed. An adaptive domain 
decomposition method and a based-on-two cell ordering method have been carefully designed in 
order to properly divide particles into groups and identify quickly the relations between pairs of 
groups of particles. A fast velocity summation algorithm is also designed successfully to compute 
the particles’ velocities systematically.   
The so-completed fast vortex method was firstly tested via random velocity fields. The 
effects of relevant parameters on the accuracy and efficiency were examined. For the first time, it 
is found that the ratio of the core size of vortex particles to the size of smallest cells is the most 
important parameter that determines not only the accuracy but also the maximum level of the 
decomposition and the maximum number of vortex particles allowed within each smallest cell. The 
solver is then applied to simulations of two equal vortices in merging and the flow induced by an 
impulsively started circular cylinder. A detailed investigation of the CPU time was performed and 
optimum values of important parameters were found. It was found the CPU time spent by the fast 
solver is reduced by at least an order of magnitude, compared to that spent by a non-fast solver. 
Furthermore, we have also finished the parallization of the solver and speeded up the solver even 
much more.  
  
 
Keywords:  Box-to-point fast vortex method, Box-to-box fast vortex method, Adaptive domain 
decomposition, Cell ordering based on two  
 
 2
的技巧(remeshing technique)，這造成格點內差的必要，亦即方法仍就失去純Lagrangian的特
性，且因此增加相當多的計算量。VRM法則是將每一渦漩粒子的渦量一部份分給鄰近的粒子，
可避開均勻分布之假設；但分配量的統馭方程式為聯立且未必有解，新的粒子必須在適當的位
置上增加以求有解。DVM 定義一「擴散速度」(diffusion velocity)正比於渦漩梯度與黏滯係數、
且反比於渦度，渦漩粒子改以流體速度與「擴散速度」之和移動。雖然「擴散速度」的計算並
不經濟，且當渦度為零時無法定義，但是渦度方程式可改寫為類似無黏性流場的守恆式
(conservative form)，同時在任意一「質面積」(material surface)上環度(circulation)為守恆。DVM
有數個版本[15,16,17,18]，可惜的是未有一個是兼具準確性與效率的，而且渦漩面積雖較慢但
仍隨時間逐漸成長，格點內差終究難以避免。 
本計畫主持人過去曾有兩個相關研究計劃，分析了上述種種方法的優缺點[19]，同時也開
發了創新的方法(DVM的一種)，但研究結果顯示要兼顧準確性與計算效率，且同時考慮數值模
型是否合乎物理意義，Leonard的CES法搭配 Rossi 的分裂/合併(splitting/merging)修正或許才
是最佳的選擇。然而Rossi 的分裂/合併修正仍有很大進步空間，本計畫書主持人乃進而研發
有新的分裂技巧，可將所引致的誤差減少至少一個數量級以上[20]，另外也放棄Rossi選擇合併
夥伴的方法，改利用DSMC中常用的晶包(cell)技巧，巧妙地大量減少了合併相鄰、近似粒子所
需耗的時間[21]。 
然而要使數值工具更具應用價值，無滑移邊界條件的加入是必要的，此部分功能已於計
畫主持人執行的94年度國科會計畫中完成。本計畫的研究目標則是持續加強本數值工具之功
能，以增加流場複雜度為目標。當流場複雜度增加時，計算量勢必激增。為使軟體計算速度加
快，可利用快速渦漩法(fast vortex  methods) [24-34]來加快Biot-Savart law的計算。文獻現有快
速渦漩法大致可分為三類。第一類是採用Eulerian 格點，利用內差法得到格點上之渦度場
(vorticity)，再利用數值差分法解Possion方程式: 
2u kω∇ = −∇ × GG  
先解得格點上之速度值，再利用內差得渦漩粒子位置上之速度大小[24,25]。此類方法雖
然較快速，但內差引起額外誤差，且使用格點使渦漩方法喪失了Lagrangian的特性; 對於已利
用差分法來模擬擴散現象之渦漩方法[4]或需時常進行粒子重新分布(remeshing)之渦漩方法
[4,12-15]，或可搭配此類快速渦漩法。此外，Almgren等人[26]則建議: 相鄰的粒子直接計算其
交互作用，遠方粒子的影響力才利用Poisson solver來計算。 
第二類的快速渦漩法基本上乃以 Legendre quadrature rule 積分 Biot-Savart integral; 其
中積分點隨粒子移動而移動之，因而權重也隨時間改變[27,28]。低階的方法多是將粒子連線形
成三角形元素，再以線性內差求取渦度函數(vorticity)以進行積分 [27]; Strain [28] 則利用高階
Legendre polynomials 發展出高階的積分方法。 
第三類的快速渦漩法主要是將一群相鄰渦漩粒子之總影響力先匯集到該粒子群的中心
點，然後再計算中心點對遠方任一點所引致之速度量，可視為「群對點」的處理方式。Carrier
等人[29]首先提出這樣的想法，提出所謂的 multipole method。其中將一群相鄰渦漩粒子對遠
方任一點所引致之位能對粒子群的中心點作一收斂的mulitpole級數展開; 取到第P項作數值近
似。推導出來的公式有這樣的優勢: 可先利用粒子群資料將一系列係數計算出來，接著利用這
一系列係數可計算這群粒子對遠方任一位置之影響量。當由誤差容忍度所決定之項數P值遠小
於粒子群的粒子數目時，multipole method可大大降低計算所有粒子交互作用之計算量。Carrier
 4
均勻，疏密度差異也可以很大。因此，綜合文獻回顧心得與評量自行研發方法的特性，本計畫
乃依循第三類的快速渦漩法原則，採multipole method，設計搭配邏輯，將計畫主持人原有之
渦漩粒子分裂/合併(splitting/merging)修正過之CES渦漩法發展為高效率之快速CES渦漩法，以
應付高精確度或高複雜度之流場模擬之高計算量。 
在此期中報告中，我們將在第三節中詳細說明mutipole method以及我們所設計用以判斷
何時可以「群對點」方式處理的相關邏輯。接著在第四節中先以隨機速度場為測試對象，研
究方法之準確性與計算效率，並進行參數探討。接著運用前述研究結論來設計真實流場模擬
之程式流程，特別是數值參數的設定準則；接著報告兩漩渦合併過程模擬之初步結果。最後
將總結對本研究方法中出現的參數其選用準則之建議。 
2. 研究目的 
本計畫企圖採用第三類的快速渦漩法中的 mutipole method，開發「群對點」及「群對
群」的計算方式來快速計算 DSMC 中的 Biot-Savart law。計畫希望利用「調整型晶胞切割
法」及「二進位晶胞排序法」(本計畫自行研發之高效率排序法)，適當將流場內之渦漩粒
子分組與排序，並設計一高效率速度加總邏輯，除能快速辨認應以「點對點」或「群對點」
或「群對群」方式計算之粒子群外，也能快速又有系統地完成所有 Biot-Savart law 該有的
計算。計畫並將進行參數探討，以取得在兼顧準確性與計算效率下之最佳參數值。計畫最
後以兩相融合之漩渦流場及瞬間啟動圓柱流做為真實流場測驗，結果相當令人滿意。 
 6
2
4j
d
dt
σ ν=  (3.6b)
( ),j jd x u x tdt =
JJK K JJK
 (3.6c)
其中速度分量可由 Biot-Savart law 求得為 
( ) ( )
2
2 2
1
, 1 exp
2
N jjj
j jj
x xy y
u x t
x xπ σ=
⎧ ⎫⎛ ⎞⎪ ⎪⎟⎪ ⎪⎜ −−Γ ⎟⎪ ⎜ ⎪⎟⎜=− − − ⎟⎨ ⎬⎜ ⎟⎪ ⎪⎜ ⎟⎪ ⎪⎜− ⎟⎜⎝ ⎠⎪ ⎪⎪ ⎪⎩ ⎭
∑
K JJK
K
K JJK  (3.7a)
( ) ( )
2
2 2
1
, 1 exp
2
N jjj
j jj
x xx x
v x t
x xπ σ=
⎧ ⎫⎛ ⎞⎪ ⎪⎟⎪ ⎪⎜ −−Γ ⎟⎪ ⎜ ⎪⎟⎜= − − ⎟⎨ ⎬⎜ ⎟⎪ ⎪⎜ ⎟⎪ ⎪⎜− ⎟⎜⎝ ⎠⎪ ⎪⎪ ⎪⎩ ⎭
∑
K JJK
K
K JJK  (3.7b)
由(3.6b)式知道，渦泡的特徵半徑會隨著時間而增大，而 Greengard[7]發現，由於渦泡乃以其
中心速度做整體位移，也就是說渦泡面積上的速度梯度是被忽略的，因之造成誤差使得渦泡
運動方程式(式 3.6)無法正確的收斂至 Navier-Stokes equations，除非渦泡的特徵半徑持續的夠
小以維持模擬的準確度。因此我們需要利用渦泡分裂的機制，使得渦泡的特徵半徑維持在所
要求的半徑以下。 
3.1.2 渦泡分裂 
渦泡的分裂機制是為了確保在模擬中所有渦泡的特徵半徑小於所要求的特徵半徑 maxσ ，
以確保模擬的準確度。其原理為，當有一母渦泡，強度為 pΓ ，若其特徵半徑 pσ 大於所允許的
最大特徵半徑 maxσ ，則將母渦泡分裂成 M 個子渦泡，其特徵半徑為 pασ ，0 1α< < 。Rossi[8]
建議子渦泡的中心位置應平均放置於距離母渦泡中心 r 處，而 r 值與子渦泡強度 cΓ 應滿足分
裂前與分裂後環量強度與對母渦泡中心之二次渦度矩(second moment of vorticity)守恆。我們
稱此分裂方式為分裂法(I)。Shiels[35]則將(I)中滿足條件之一，分裂前與分裂後對母渦泡中心
之二次渦度矩守恆，改為分裂前與分裂後母渦泡中心渦度值守恆。我們稱此為分裂法(II)。 
Huang[20]則從物理觀點出發，認為為了符合擴散的物理意義，母渦泡分裂後應持續存
在。定義 0σ 與 0Γ 分別為分裂後母渦泡的特徵半徑與強度，Huang 將 0σ 設為 pασ ，並提出兩種
分裂前後的守恆條件以求得 r、 0Γ 與 cΓ 。其一，總環量、對母渦泡之二次渦度矩與母渦漩中
心渦度值守恆，我們稱此為分裂法(III)；其二，總環量、對母渦泡之二次渦度矩與四次渦度
矩守恆，我們稱此為分裂法(IV)。 
表 2.1 為上述四種分裂方式之整理。我們需決定的數值條件有α與 M，兩者愈大，誤差
愈小，但模擬所需時間愈多，根據 Huang[20]的建議，在本論文的模擬中，我們選擇 0.85α= ，
M = 4，此外，Huang[20]已證明，(III)、(IV)的準確度比(I)、(II)好，在本研究中，我們選擇以
 8
於 ( )2maxref eπε ασΓ = Γ 的最大渦泡編號。 
(8)、若 j > i，進行以下步驟，否則跳至步驟(10)。 
(9)、計算集合 C 中渦泡融合後之 0x
JJK
(3.8b)式與 0σ (3.8c) 式(或(3.8d) 式)。若 0 maxσ σ≤ ，以
{ }0 0 0, ,x σΓ
JJK
取代 C 中所有渦泡，並跳至步驟(11)，否則令 1j j= − 並回到步驟(8)。 
(10)、此時 j i= ，表示編號 i 之渦泡不適合與其他渦泡融合。令 1i i= + 並回到步驟(6)。 
(11)、迴圈 k 結束，進行第 k+1 晶胞的渦泡融合。 
 
步驟(7)中，引進條件 ( )2maxref eπε ασΓ = Γ 是為了增進效率，而省略尋找 21 jj MMin σ≤ ≤ 直接以 maxασ 代
替， maxσ 為模擬時所允許的最大特徵半徑，而分裂機制下渦泡可能存在的最小特徵半徑為
maxασ  
在本研究中，我們選擇渦泡融合方式為(a)，以此機制將渦泡融合後，渦泡間最小的特徵
半徑對重疊長度的比值為 / 2α η，依據 Huang[20]的建議，我們設定 0.85α= ， 0.5η= ，最
小比值約為 1.2，確保模擬中渦泡有重疊。 
 
3.2 群對點快速渦旋法 
本節將針對快速渦旋法中的「群對點」計算做詳盡的介紹。「群對點」的處理方式是將一
群相鄰渦漩粒子之總影響力先匯集到該粒子群的中心點，然後再計算中心點對遠方任一點所
引致之速度量，而在數學上我們以勞倫茲集數展開來達成。 
3.2.1「群對點」計算與勞倫茲級數展開 
我們以圖(3.1)為例來說明並推導「群對點」的計算公式。假設選取的區間內(圓內)共有 m
個視為點渦源的渦漩粒子，該粒子群的中心點 0Z ，我們欲計算此粒子群對遠方一點 nZ 處所引
致的速度。根據式(3.4)，這 m 顆渦旋粒子對遠處 nZ 所引致的速度為： 
*
12
m j
n n n j
n j
iV u iv
Z Zπ =
Γ−= − = −∑                                                    (3.10) 
將式(3.10)對 0Z 做勞倫茲級數展開可得， 
1
0* 1
0
1 1 00
1 ( )
2 ( )
P
P m
jk
n j j jk
k j nn
Z ZiV Z Z O m
Z ZZ Zπ
+
−
= =
⎡ ⎤−− ⎢ ⎥= Γ − + Γ −− ⎢ ⎥⎣ ⎦
∑ ∑  
級數收斂條件為 
0
0
1j
n
Z Z
Z Z c
− =−  <1                                                              (3.11) 
 10
判別晶胞的長幼順序以及搜尋他們的「鄰居」與「母鄰居」。然而 Vam Dommelen & 
Rundensteiner 的方法需使用相當多記憶體且效率不佳，在本論文中我們乃設計自己的編號邏
輯來達到相同之目的。本論文中我們自己設計的編號邏輯實為「二進位」的晶胞編號方式，
介紹如下: 
(i) 首先找出所有末代晶胞中最大的階數L，接著將0階的正方形分割成 4L 個L階的最小
方格。 
(ii) 每個L階的最小格子各有一個x編號與y編號，二維編號(x,y)代表此最小格子的左邊
有x個最小格子，上面有y個最小格子，其範圍為0到2 1L − ，並以二進位碼標示之。 
(iii) 將x編號與y編號的二進位編碼交叉形成另一二進位數，並將其轉成十進位數字D。
如圖(3.3)為D編號的示意圖。 
(iv) 建立數列whichlevel(D)來記錄這個最小方格所屬的末代晶胞的階數。 
(v) 根據之前的設計，每個階數為k的晶胞，會包含有 4L k− 個最小格子，我們取其中的
D編號的最小值與晶胞階數k，作為該晶胞的代表號，也就是(D,k)。 
以圖(3.3)為例，黑(藍)線代表實際晶胞切割，紅線代表最小格子的分割，L=3。以藍線圍
起的一階末代晶胞為例，其包含了D編號16~31共16個最小格子，因此我們以符號(16,1)紀錄
這一個晶胞。 
如此的紀錄方法記錄了每個晶胞的階數並隱含了其位置的資訊，可方便我們找出任一 
晶胞之鄰居，尋找方法設計如下: 
(i) 假定目標晶胞的代號為(D,k)。 
(ii) 將D轉換為二進位數字 2d 。 
(iii) 將 2d 之偶位數字取出，形成一新的二進位數字 2xd ，同理對應奇位數之二進位數字
為 2 yd 。 2 2( , )x yd d 即為此晶胞的二維編號。 
(iv) 利用 2xd 及 2 yd 二者或其一加或減去 1 10 0b ≡ "  (共L−k個0)，轉換成十進位後可得8
組二維編號，將這8組二維編號轉換為對應的8個D編號，代表8個最小方格。 
(v) 接著逐一檢查這8個最小方格。若這些最小方格所屬的末代晶胞階數 k≥ ，則代號
為(D,k)之晶胞即為目標晶胞的鄰居之一。反之，若某最小方格所屬的晶胞階數
k k′ < ，將此格子的D的二進位數字的第0~2(L− k′ )−1位數字歸零後，轉回新的十進
位數字D′，則代號為 ( , )D k′ ′ 之晶胞即為目標晶胞之鄰居。 
以下我們以最大晶胞階數L=3的圖3.3為例，搜尋十進位編號D=60，階數k=2的晶胞的鄰居。
首先將60轉成2進位的 2D =111100，將奇數位和偶數位分別取出得 2xd =110， 2 yd =110。接著利
用二進位數字 1 10b ≡ (共L-k=1個0)來運算出8個方格的二維編號分別為(110,1110)，(110,100)，
(1110,110)，(100,110)，(100,100)，(1110,1110)，(1110,100)，(100,1110)，轉換成二進位數字後
分別為1111100,111000,10111100,110100,110000,11111100,10111000,1110100，再換得十進位數
字分別是124,56,188,52,48,252,184,116。其中116,124,184,188,252超出流場範圍可不予理會，
僅記錄在範圍內的48,52,56，而此三晶胞為階數k’=3的末代晶胞，滿足 'k k≥ ，因此最後得到
(48,2)，(52,2)，(56,2)三個晶胞，此即為(60,2)晶胞的鄰居。 
 12
* 0 0
1 00 0
1
( )
1( )
p
jk
n k
k jn n
k jC Z ZV
kZ Z Z Z
∞
= =
+ − ′⎛ ⎞ −= ⎜ ⎟′ ′−− −⎝ ⎠∑ ∑                                           (3.15a) 
令 0 0Z Z dZ′− = ，重新整理式(3.6a)，可得 
'
*
'
1 0( )
p
k
n k
k n
CV
Z Z=
= −∑                                                            (3.15b) 
其中 
'
1
( )
k
k
k j j
j
C m C
=
= ∑                                                               (3.16a) 
1kkm =                                                                      (3.16b) 
1
k k
k l k l
k lm m dZ
l− − +
−= × ×                                                         (3.16c) 
將四手足的 'kC 累加起來即得母親的勞倫茲係數。如此一來，任一非末代晶胞之勞倫茲係數可
直接由其四個子晶胞的勞倫茲係數利用上式求出。 
3.2.6 群對點快速渦旋法程式流程 
    3.2.1~3.2.5 節中已介紹此套方法所需的公式與邏輯，本節將為整套程式流程做總整理，
圖 3.5 為簡易流程圖，流程詳述如下： 
(i) 讀入粒子資訊，包含位置，渦度等。 
(ii) 建立一二進位與十進位數字的轉換表格，如表格大小為 1024×1024，即可提供最大階數
為 10 的晶胞參照。 
(iii) 由選定的 0n 進行晶胞自適切割，得到 L 層的晶胞。 
(iv) 將 L 階晶胞挑出，以式(3.12b)計算晶胞的勞倫茲係數 kC  
(v) 將 L−1 階晶胞挑出計算晶胞的勞倫茲係數 kC ，若為末代晶胞則使用式(3.12b)計算，否則
使用式(3.16)計算。 
(vi) 重複(v)至將第二階晶胞的 kC 算完為止。 
(vii) 將 L 階末代晶胞挑出，將其鄰居挑出以式(3.10) 「點對點」計算速度。 
(viii)將 L−1 末代階晶胞挑出，將其鄰居挑出以式(3.10) 「點對點」計算速度。 
(ix) 重複(viii)至第一階末代晶胞挑出演算完為止。 
(x) 將 L 階晶胞挑出，找出母鄰居，以式(3.12a) 「群對點」計算速度。 
(xi) 將 L−1 階晶胞挑出，找出母鄰居，以式(3.12a) 「群對點」計算速度。 
(xii) 重複(xi)至第二階晶胞挑出演算完為止。 
 
3.3 群對群快速面積渦旋法 
3.3.1「群對群」計算與勞倫茲級數再展開 
在上一節中我們介紹了「群對點」的計算邏輯，本節將介紹「群對群」的概念及數學公
式。「群對群」的概念為：有兩群相距甚遠，各擁有 m1 與 m2 顆的粒子群 A 與 B(圖 3.6)，當
要計算 A 群粒子對 B 群中任一粒子 nZ 所引致的速度時，先將 A 群粒子的影響力匯集到 A 群
粒子中心 0Z ，接著計算 A 對 B 群中心 cmZ 所引致的速度，最後再將速度由 cmZ 轉移到 nZ 上。 
「群對群」計算的公式推導是將「群對點」的計算公式(式 3.12a)再進行泰勒級數展開而
 14
*
,
0
( )
Q
mother h
n h mother n cm
h
V Z Zδ
=
= −∑ ,
0
( )
Q
child l
h child n cm
l
Z Zδ
=
= −∑                                   (3.21a) 
, , ( )
Q
child mother h l
h child h mother cm cm
h l
h
Z Z
l
δ δ −
=
⎛ ⎞= −⎜ ⎟⎝ ⎠∑                                             (3.21b) 
3.3.3 群對群快速渦旋法程式流程 
    本節整理群對群快速渦旋法程式流程，圖 3.8 為流程圖。詳細流程如下: 
(i)~(vi)與群對點快速渦旋法流程相同。 
(vii) 將 L 階晶胞挑出，將其鄰居挑出以式(3.10) 「點對點」計算速度，接著挑出母鄰居，
若母鄰居階數小於 L，則以式(3.12) 「群對點」計算速度，否則以式(3.18b)計算 hδ 係
數。 
(viii)將 k=L−1 階晶胞挑出，若非末代晶胞，則將其母鄰居挑出，對階數小於 k 的母鄰居
以式(3.12) 「群對點」計算速度，其他母鄰居則以式(3.18b) 計算 hδ 係數。若為末代
晶胞，則多挑出鄰居「點對點」計算速度。 
(ix) 重複(viii)至 k=2 階晶胞演算完畢為止。 
(x) 將 k=2 的晶胞挑出，若非末代晶胞，則利用式(3.21b)將 hδ 係數轉遞至其子晶胞。若
為末代晶胞，則利用式(3.18a)計算該晶胞內粒子速度。 
(xi) 重複(x)至 k=L 為止。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 16
點」的時間就少；反之若 0n 太大，則花在計算「群對點」的時間就少，而花在計算「點對點」
的時間就多，也就是說最佳的 0n 值要在「點對點」及「群對點」兩者之間取得平衡。 
4.1.2 高斯渦泡基本測試 
    在第三節我們有提到過，使用點渦源粒子來離散出的渦場會有奇異點，因此為了模擬的
準確，使用能較平滑組成渦場的高斯渦泡有其必要性。而在使用高斯渦泡時，我們將鄰居間
「點對點」計算的部分由點渦源粒子的式(3.3)替換為式(3.7)，而「群對點」的部分則視群與
點間有足夠的距離，可將渦泡近似為點渦源，依然使用由式(3.3)所導出的快速渦旋法公式
(3.12)。測試渦場的產生與上一節相同，而高斯渦泡的半徑σ則令為平均粒子間距的1.5倍，即
21.5 r N= ×σ π ，r=5 為測試圓半徑。 
我們首先來看 0n 的影響，表4.2為為P=13時，在幾個不同N之下，變化 0n 所需的CPU time
與 avgε ，表內的數據一樣為10次計算的平均值，而圖(4.5)為 0n 與R值關係圖。從表中我們發現，
在 0n =50時，會出現較其餘 0n 大一個級數的誤差，但同時在圖中也可看出，除N=2000以外，
0n =50時所得到的計算效率是最高的，這和4.1.1節中的結果有明顯的不同，4.1.1節中最有效率
的 0n 值雖隨N的變化有所不同，但普遍在 0n =100以上，而在此都降為 0n =50，其原因為在「點
對點」計算時，渦泡所使用的式(3.7)遠較點渦源使用的式(3.3)來的複雜，使得「點對點」計
算量增加，所以在此「點對點」及「群對點」兩者之間取得平衡的 0n 要較點渦源時來的低。 
接著我們試著解釋 0n =50產生較大誤差的原因，首先我們從表中注意到 0n =50時所切出的
晶胞是最多層，也就是切的最細的，誤差很有可能是這原因造成的。本節一開始提到了在「群
對點」的計算中視群與點間有足夠的距離，因此可將渦泡視為點渦源，而當晶胞切得愈細時，
群與點間的距離足夠的假設會受到挑戰，誤差也就愈大。此外，距離與高斯粒子的胖瘦是相
對的，為此我們定義一新參數SR值，SR lσ≡ ，其中l為level數最高的晶胞邊長，SR值的大小
決定最細的晶胞與其母鄰居內粒子間的距離是否足夠：SR愈大，距離相對愈短，高斯渦泡愈
不宜假設為點渦源。為了進一步測試，我們設計先由N與 0n 來切割晶胞並得到 l ，再由給定的
SR與 l 來決定高斯渦泡的σ 值。圖(4.6)為N=16000， 0n =50時，不同SR值時的 avgε 與P關係圖。
從圖中可看出，當SR值愈大，誤差就愈早停止收斂，也就是說將高斯粒子視為點渦源所引起
的誤差已大於勞倫茲級數的截斷誤差。圖(4.7)為N=16000， 0n =50，SR=0.6時的CPU time與P
關係圖，可看出CPU time仍與P呈線性關係。綜合圖(4.6)與圖(4.7)，我們在使用高斯渦泡時，
可以先行決定一誤差容忍值，由圖(4.6)選定合適的SR值以及最有經濟的展開項數P。當SR>0.7
時，平均相對誤差已達到萬分之一，因此建議合理的SR範圍為SR≤ 0.6。而前述最經濟的展開
項數與SR相關，建議採用以下數值: 
         = 0.6          6 
0.5 0.6          8
0.4 0.5          10
         0.4          13
SR p
SR p
SR p
SR p
→ =
≤ < → =
≤ < → =
< → =                                                    (4.2)
 
4.1.3 流場測試 
接著我們以轉向相同、大小相同、分佈相同的兩漩渦的融合過程作為測試流場。由於流
場具有黏滯性，因此我們採用第二章所提的的面積擴散渦漩法，合併本研究所研發之快速渦
漩法，來進行模擬。測試的流場 A 資料整理如下: 
i) 起始的渦場為兩半徑為 1a = 的圓盤(disk vortex)，兩漩渦初始連心距為 b= 5 ；由 1080 個棋
盤式分佈的高斯渦漩粒子所組成，每一渦漩粒子的起始 0.2242σ = 。座標原點即連心線中心
 18
0n =100 在 maxSR =0.3 時其實是同樣的切割方式，結果也當然相同。接著表 4.4 內我們將整個模
擬過程中各步驟所花的 CPU time 列出，可發現幾乎所有的運算時間都運用在計算 Biot-Savart 
law 上，也由此可見快速渦旋法的重要性。 
 
4.2 群對群快速渦旋法 
    本節中我們將使用加入「群對群」計算的快速渦漩法，並與僅使用「群對點 」計算的快
速渦漩法比較優劣。 
4.2.1 高斯渦泡基本測試 
    隨著「群對群」計算的加入，便引進了第二次展開的係數Q。我們首先針對Q作測試。使
用與4.1.2基本測試中相同的隨機渦場：將N顆點渦源粒子隨機的平均分佈在一直徑10的圓
內，每顆粒子所帶的環量強度由0~1間的平均亂數給定。由依 0n 決定切出的晶胞大小與給定的
SR值決定σ。圖(4.11)為N=16000， 0n =50，SR=0.3，P=13時，CPU time與 avgε 對Q的作圖， 圖
(4.12)則為N=16000， 0n =50，SR=0.6，P=6時，CPU time與 avgε 對Q的作圖，圖中橫實線為僅
使用「群對點 」時的結果。由圖中我們可發現，當P=13,SR=0.3時，要Q=11以上才能有與僅
使用「群對點 」時有相同的準確度，但在Q=6以上時就會超過僅使用「群對點 」時的計算
時間。當P=6，SR=0.6時，Q要在5以上才能有僅使用「群對點 」時相同的準確值，在Q=7時
才會超過僅使用「群對點 」時相同的計算時間。為保有相同的準確度，建議P=6時搭配Q=5，
而P=13時搭配Q=11。從計算效率來看，似乎在P=13時加入「群對群」的計算並沒有較佳的結
果，而在P=6時能稍微提升一些。但由於以上測試使用 0n 的為僅使用「群對點 」時所得到的
最佳值，並不代表加入「群對群」此 0n 仍是最佳值，仍要對 0n 作測試才能找出 0n 的最佳值。 
    表4.5為不同N與 0n 下，使用與不使用「群對群」計算下的CPU time。從表中我們可看出N
大且 0 100n ≥ 時「群對群 」計算方能發揮功能，減少計算CPU時間 
4.2.2 流場測試 
本節我們先使用無黏滯性流場B來測試快速渦旋法本身的準確性，圖(4.13) 為漩渦中心與
座標原點距離隨時間變化圖，圖中有兩條線分別代表源渦旋法， maxSR =0.3，P=13，Q=11，
0n =50(此二情況線條重合)以及 maxSR =0.6，P=6，Q=5， 0n =50和 0n =100的快速渦旋法(此兩線重
合)。由圖中我們可看出 maxSR =0.3的情況要較 maxSR =0.6來的準確。而在模擬至0.4個周期時，
maxSR =0.6的相對誤差約為0.05%， maxSR =0.3約為2 510−× %(由數據算出)。 
確認快速渦旋法本身的準確性之後，進行黏滯性流場A的測試。圖(4.14)為原渦旋法，
maxSR =0.3，P=13，Q=11，以及 maxSR =0.3，P=13(不使用群對群演算)三種方法模擬出的漩渦中
心與座標原點距離隨時間變化圖。從圖中可看出三種方法至模擬後期才有差別出現。圖(4.15)
為原渦旋法， maxSR =0.6，P=6，Q=5， 0n =50和 0n =100，以及 maxSR =0.6，P=6， 0n =50 (不使用
群對群演算)四種方法模擬出的漩渦中心與座標原點距離隨時間變化圖，可看出四者在模擬初
期就已出現差異，原因同樣為速度誤差，位置誤差，與分裂/合併機制的誤差循環累積所造成
的結果。表4.6為圖(4.14)與圖(4.15)中五種不同方法所花的CPU time。可看出加入「群對群」
方法後，僅 maxSR =0.6時效率較不加入前有些許提升， maxSR =0.3時則無顯著提升。 
 
 20
, ,
2
( ) ( )
( ) x s x sD
I t t I t t
C t
U D t
+ Δ − + Δ= ⋅Δ                                                  (5.4b) 
 
5.2 Re=550 
配合時步大小及每一時步邊界渦度可擴散範圍將圓邊界離散為 522 塊邊界元素，圖 5.2
為本方法與前人[40]利用 Particle Strength Exchange (PSE)法所模擬得到的渦度場之比較，圖
5.3 則是與前人[41]實驗量測結果相比對，可見結果相當吻合，驗證了本方法的準確性。圖 5.4
是計算所得之線性衝量及阻力係數，與前人理論預測值[39]及計算值[40]相比，都相當吻合，
對於初期線性衝量及阻力係數，本方法計算值比 PSE 法甚至還要好。值得一提的是本模擬乃
是在 Intel®CoreTM2 6600@2.4GHz 電腦上進行，整個模擬約耗 CPU 時間為 3.27 小時，模擬
最後流場約存在有十萬顆渦漩粒子，圖 5.5 顯示這些渦漩粒子的瞬間位置，可以看出這些渦
漩粒子皆集中在圓柱附近及尾流中，這正是渦漩法的特有優點：網格只放在該放的地方。  
5.3 Re=3000 
接著我們嚐試挑戰高雷若數 Re=3000，因擴散速度變慢，邊界層變薄，乃採 1722 個邊
界元素，其餘相關數值參數皆相應調整。圖 5.6 為與 PSE 法之渦度場比較，圖 5.7 則為阻力
係數比較。與 PSE 法相比較，本研究所得之主漩渦較為軸對稱，此乃因為加快計算速度，此
處所採粒子合併條件較鬆弛，因此數值擴散較嚴重所致。而阻力係數早期與 PSE 法相吻合，
時間一長差異逐漸出現，猜測此因本研究方法目前採均勻空間解析度，即邊界層內與尾流內
都是採用相同之空間解析度，為控制計算量，空間解析度無法太高，即與粒子分裂及合併相
關之數值參數設定準確度仍嫌不夠，誤差乃隨時間增加而逐漸增加，未來應考慮發展非均勻
空間解析度(non-uniform spatial resolution)以因應邊界層內與尾流內不同解析度之要求。 
 22
(global communication)更新資料時，要傳輸的資料相當龐大。 
6.3 速度加總邏輯 
    在平行化程式中，為求撰寫程式的便利，我們在此使用速度加總邏輯與第三章所使用的
略有不同。以圖(6.1)為例，在第三節中我們對灰色晶胞搜尋鄰居與母鄰居之後，計算灰色晶
胞對鄰居或母鄰居內粒子引至的速度，在此我們改計算鄰居或母鄰居對灰色晶胞內粒子所引
致的速度。但由於晶胞不一定會互為鄰居或互為母鄰居，例如圖(6.1)中，紅色及黃色的晶胞
為灰色晶胞的鄰居，青色與紫色為灰色晶胞的母鄰居，但灰色晶胞是紅色及紫色晶胞的鄰居，
為青色與黃色晶胞的母鄰居。因此在本節中的速度加總為：(1)階數比自身小的母鄰居(紫色晶
胞)對自身(灰色)做「點對點」運算，(2)其餘的母鄰居對自身做「群對點」運算，(3)階數比自
身大的鄰居做距離判別，未直接相鄰(黃色晶胞)則對自身做「群對點」運算，(4)其餘鄰居對
自身做「點對點」運算。 
6.4 平行化邏輯設計 
    在上一節中我們概略提到了設計平行化快速渦旋法的要點，本節將介紹我們的程式邏輯。 
    首先是達成負荷均衡的方式，上節中提到要記錄每個晶胞的計算量以作為分配晶胞的依
據，而本研究中計算晶胞計算量的方法如下： 
i) 首先我們記錄某一晶胞 S 會有多少個粒子(假設 N1 個)對其內 M 個粒子作「點對點」運
算。 
ii) 紀錄晶胞 S 會有多少個母鄰居(假設 N2)個對其內 M 個粒子作「群對點」運算。 
iii) 假設每一次「群對點」運算時間為每一次「點對點」運算的 A 倍。 
iv) 該晶胞 S 的運算量即為 M(N1+AN2) 
 然而我們在程式中做「群對點」運算時，是以一副程式將母鄰居對晶胞 S 內的所有粒子
速度一次算出，並經測試過發現，晶胞 S 內的粒子數 M 與叫用該副程式所花的時間並不成正
比，而是當 M 愈大時，平均花在一顆粒子上的計算時間就愈少。圖 6.2 為該測試結果，縱軸
是每做 1 萬次「群對點」計算所需的 CPU time，橫軸則是晶胞 S 內的粒子數 M，圖 6.3 則為
每一次「群對點」運算時間與每一次「點對點」運算時間的比值 A。 
    在有了晶胞的計算量之後，接著說明我們如何將各晶胞分配到不同的運算單位上。 
i) 首先我們將每層晶胞的計算量分別加總，得到各層晶胞的總計算量 ,level totalCost ，便可算
出每個計算單位應該分配到的計算量 ,level avgCost 。 
ii) 將各層晶胞分別按編號順序分配給第一個計算單位。 
iii) 當第 j 個晶胞使第一個計算單位累積得到的計算量大於 ,level avgCost ，便將第 j+1 晶胞改發
給第二個計算單位，依此類推。 
    將晶胞分配到不同的運算單位後，接著讓各運算單為得知運算所需的所有粒子資訊，便
可開始平行運算，各運算單位就自身所分配到的晶胞作快速渦旋法的運算，待各運算單位皆
結束運算後，再將各單位所算出的結果匯整即可。圖 6.4 為平行程式的簡易流程圖。 
 24
 
 
 
 
8. 圖表 
 26
開始
建立table
切割domain
得L層晶胞
得M個末代晶胞
Input 
data
搜尋鄰居
計算勞倫茲
係數
點對點計算
速度
累加更新速
度
last末代晶胞1st末代晶胞n=n+1
搜尋母鄰居
結束
群對點計算
粒子速度
k>1k=Lk=k-1
累加更新速
度
n=1
n=n+1 n>nmax
 
圖 3.5、群對點快速渦漩法速度加總流程圖 
 
 
圖 3.6、「群對群」方法示意圖 
 28
 
圖 4.1、點渦源基本測試相對誤差分佈圖 
 
圖 4.2、點源粒子隨機渦度場 CPU time 與展開項數 P 關係圖 
 
 
圖 4.3、點源粒子隨機渦度場平均相對誤差與展開項數 P 關係圖 
 30
 
圖 4.7、高斯渦泡時 CPU 與展開項數關係圖 
 
 
 
圖 4.8、流場 A 漩渦中心與座標原點間距隨時間變化圖 1(群對點法) (a)全圖(b) early time (c) 
later time 
 32
 
 
 
 
 
 
圖 4.10、渦場隨時間變化圖(t=0.2,0.4,0.6,0.8,1 由上而下) 
 34
 
 
圖 4.15、流場 A 漩渦中心與座標原點間距隨時間變化圖 3(群對群快速渦旋法，P=6) 
(a) 全圖(b)early time (c) later time 
 36
 
圖 5.3、 Re = 550，對稱軸速度分佈比較圖。Bouard et al. [41]實驗量測結果：▲：tU/D=0.5，
◇：tU/D=1.0，■：tU/D=1.5，△：tU/D=2.0， ：tU/D=2.5，⌂：tU/D=3.0；實線：本方法。 
 
 
 
圖 5.4、線性衝量及阻力係數，與前人理論預測值[39]及 PSE 計算值[40]相比。 
 38
 
圖 5.7、本研究所得之阻力係數(實線)與 PSE 法[40](點線)[35](虛線)及頻譜法[42](點虛線)之比
較。 
 40
開始
輸入資
料 是否分裂
是否合併
分裂
合併
計算勞倫茲
係數
依loading分
配各cpu負責
晶胞
讓各CPU擁
有所有粒子,
晶胞資訊
彙整資料
彙整資料
彙整資料
計算速度
速度積分
(1st step)
計算速度
速度積分
(2nd step)
計算速度
速度積分
(1st step)
計算速度
速度積分
(2nd step)
彙整資料
運算終了?
結束
否
是
是
否
是
否
是
 
圖 6.4、平行程式流程圖 
 42
 
圖 6.7、CPU 閒置時間與 CPU 數量關係圖 
 
 
 
圖 6.8、平行程式資訊溝通時間與 CPU 數量關係圖 
 
 44
 
三、參考文獻 
[1] Hald Ole and Del Prete V.M., “Convergence of vortex methods for Euler’s equations,” Math. 
Of Comput., Vol.32, 1978, pp.791-809. 
[2] Hald Ole H., “Convergence of vortex methods for Euler’s equations. II,” SIAM J. Numer. 
Anal., Vol.16, 1979, pp.726-755.  
[3] Leonard A., “Vortex methods for flow simulations,” J. Comput. Phys., Vol. 37, 1980, 
pp.289-335. 
[4] Chang C. and Chern R., “A numerical study of flow around an impulsively started circular 
cylinder by a deterministic vortex method,” J. Fluid Mech., Vol.233, 1991, pp.243. 
[5] Lu Z.Y. and Ross T.J., “Diffusing-vortex numerical scheme for solving incompressible 
Navier-Stokes equations.” J. Comput. Phys.  Vol. 95, 1991, pp.400-435. 
[6] Chorin A.J., “Numerical study of slighly viscous flow,” J. Fluid Mech., Vol.57, 1973, 
pp.785--796. 
[7] Greengard C., “The core spreading vortex method approximations the wrong equation,” J 
Comput. Phys., Vol.61, 1985, pp.345-348. 
[8] Rossi L., “Resurrecting core spreading vortex methods: A new scheme that is both 
deterministic and convergent,” SIAM J. Sci. Comp., Vol.17, 1996, pp.370-397. 
[9] Rossi L., “Merging computational elements in vortex simulations,” SIAM J. Sci. Comp., 
Vol.18, 1997, pp.:1014-1027. 
[10] Goodman J., Commun. Pure Appl. Math. Vol.60, 1977, pp.189-. 
[11] Long D.-G., J. Amer. Math. Soc., Vol.1, 1988, pp.779-. 
[12] Degond P. and Mas-Gallic S., “The weighted particle method for convection-diffusion 
equations. Part 1: The case of an isotropic viscosity,” Math. Comput., Vol.53, 1989, 
pp.485-507. 
[13] Fishelov D., “A new vortex scheme for viscous flow,” J. Comput. Phys., Vol.86, 1990, 
pp.211-224. 
[14] Shankar S. and Van Dommelen L.L., “A new diffusion procedure for vortex methods.” J. 
Comput. Phys. Vol. 127, 1997, pp.88-109. 
[15] Ogami Y. and Akamatsu T., “Viscous flow simulation using the discrete vortex model – the 
diffusion velocity method,” Computers and Fluids, Vol. 19, 1991, pp.433-441. 
[16] Kempka S.N. and Strickland J.H., “A method to simulate viscous diffusion of vorticity by 
convective transport of vortices at a non-solenoidal velocity,” Sandia Report, Sandia National 
Lab., SAND93-1763.UC-700 (1993). 
[17] Shintani M. and Akamatsu T., “Investigation of two dimensional discrete vortex method with 
viscous diffusion model,” Computational Fluid Dynamics, Vol. 3, 1994, pp.237-254. 
[18] Huang Mei-Jiau, “Circulation Conserved Diffusion Vortex Method,” Transactions of the 
Aeronautical Society of the Republic of China 35, pp.65-72. 
[19] Huang Mei-Jiau and Chen Yu-Yung ”An investigation of the diffusion errors in the diffusion 
 46
Multipole, and Radiosity, ” Journal of Parallel and Distributed Computing. Vol.27, 1995, p.118. 
[39] Bar-Lev, M. and Yang, H.T. 1975, Initial flow over an impulsively started circular cylinder, J. 
Fluid Mech. 72, 625-647. 
[40] Ploumhans, P. and Winckelmans, G.S. 2000, Vortex methods for high-resolution simulations of 
viscous flow past bluff bodies of general geometry, J. Comput. Phys. 165, 364-406. 
[41] Bouard, R. and Coutanceau, M. 1980, The early stage of development of the wake behind an 
impulsively started cylinder for for 40<Re<104, J. Fluid Mech. 101, 583-607. 
表 Y04 48
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                             96 年 6 月 13 日 
報告人
姓名 
黃美嬌 服務機構 及職稱 
台灣大學機械工程系 
教授 
時間 
會議 
地點 
2007/6/3~2007/6/7 
Jeju Island, S. Korea 
本會核定 
補助文號 95-2221-E-002-336-MY2 
會議 
名稱 
 (中文) 第二十六屆國際熱電學術研討會 
 (英文) 26th International Conference on Thermoelectrics 
發表 
論文 
題目 
 (中文) 尺寸效應對薄膜半導體比熱與得拜溫度之影響 
 (英文) The Size Effect on the Specific Heat and Debye Temperature of Thin-Film Semiconductors 
報告內容應包括下列各項： 
一、參加會議經過 
6/3 出發前往南韓濟州島 
6/4~6/7 參與會議 
6/5 論文以海報型式發表 
6/7~6/9 參訪濟州島 
6/9 返回台灣 
 
二、與會心得 
國際熱電學會是一個以開發熱電材料為首要任務的國際學會，此研討會每年一屆輪流於
美洲、歐洲、亞洲、澳洲舉行；與會人員多為材料方面專家，伴有少許能源或熱流方面之專
家。前者多發表新材料之研製與其熱電性質之量測與分析，後者則以應用及奈米結構設計為
主，而奈米熱電元件結構設計正是本人志趣所在。這是本人第二次參加此國際研討會，今年
共有來自 29 個國家的專家學者與會，台灣地區出席學者則有八位。 
雖然本人非材料科班，但基於過去兩年的研究基礎，對於熱電材料本身或製程的研發大
致都可以了解，而因有從事理論分析之經驗，故對於研討會發表中的新材料或應用，其動機
與根據都能深切領悟。最開心的是發現目前有一種材料研發方向稱之為 graded materials，乃
是設計材料從熱端到冷端處擁有不同的熱電性質，以增進熱電效率，這與本人於 2005 年發
表於 International Journal of Heat and Mass Transfer 之見解雷同，相信這方面研究值得再深入
分析探討。 
附錄五之一 
 50
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                               97 年 6 月 27 日 
報告人姓名  
謝嘉聰 
 
就讀校院
（科系所）
 
國立臺灣大學機械工程學博士班研究生 
 
     時間 
會議 
     地點 
97 年 6 月 10 日至 12 日 
挪威 特隆赫姆 
本會核定
補助文號 NSC 95-2212-E-002-336-MY2 
會議 
名稱 
第 6 屆油氣、治金及工業製程計算流體力學國際研討會 
6th International Conference on COMPUTATIONAL FLUID DYNAMICS in the Oil & 
Gas, Metallurgical and Process Industries 
發表 
論文 
題目 
動樑式扁鋼胚加熱爐之爐氣及鋼胚溫度分佈耦合模擬 
A Coupled Numerical Study of Slab Temperature and Gas Temperature in the 
Walking-Beam Type Slab Reheating Furnace 
 
ㄧ. 參加會議經過：  
第六屆油氣、治金及工業製程計算流體力學國際研討會，會議舉行地點位於北歐挪威，特倫
汗市，為挪威第三大城市。總共有來自30個國家，94篇論文及6篇邀請論文發表，會議的主題在
於計算流體力學在工業上的運用，並區分為油氣傳輸及處理現象、礦物處理、金屬製程、化學製
程等工業運用，並希望擴展計算流體力學的運用及新的方向，驗證計算流體力學在工業上計算的
正確性。 
由於實驗量測的設備一般均很昂貴，操作不見得容易且量測點數量有限，量到的數值仍需考
慮到誤差值，因此目前計算流體力學大量運用在工業方面，除了可以減少經費的使用，得到整個
模型的數值外，亦可配合量測所得的資料，驗證計算結果的正確性。 
大會首先是Wisconsin大學的Graham教授的邀請講座，他以直接數值模擬(DNS)針對在層流與
紊流轉換時的現象做了詳細的說明。接下來就是分組的報告，由於投稿的論文數太多，大會分成
三組分別報告，主題分別為 Drag Reduction / Flow Acoustics，Meshfree Methods，Solidification，
Population Balance，Multiphase Pipe Flow，Fluidized Bed，Flotation，Mixing / Separation，Oil/Gas 
Applications，Flashing Flows，Furnace Modelling，Validation/Measurements，Bubble & Droplet 
Dynamics，Particle Tracking，Lattice Boltzmann， Industrial Applications，Bubble Columns，
Metallurgical Applications，Heat & Mass Transfer。 
附錄五之二 
                             Editorial Manager(tm) for Journal of Computational Physics
                                  Manuscript Draft
Manuscript Number: JCOMP-D-08-00293R2
Title: A Fast Resurrected Core-Spreading Vortex Method with No-slip Boundary Conditions
Article Type: Regular Article
Keywords: Core-spreading vortex method; Multipole method; Adaptive domain decomposition; No-
slip boundary condition
Corresponding Author: Prof. Mei-Jiau Huang, Ph.D.
Corresponding Author's Institution: National Taiwan University
First Author: Mei-Jiau Huang, Ph.D.
Order of Authors: Mei-Jiau Huang, Ph.D.; Huan-Xun  Su, MS; Li-Chieh  Chen, MS
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
24 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
61 
62 
63 
64 
65 
 1
A Fast Resurrected Core-Spreading Vortex Method 
with No-slip Boundary Conditions 
Mei-Jiau Huang*, Huan-Xun Su, and Li-Chieh Chen 
Department of Mechanical Engineering, National Taiwan University, Taipei 106, Taiwan 
Keywords: Core-spreading vortex method, Multipole method, Adaptive domain decomposition, 
No-slip boundary condition 
 
ABSTRACT 
In this study, we develop a new vortex method for simulating two-dimensional viscous 
incompressible flows based on a blobs-splitting-and-merging scheme. The fast multipole method is 
employed to speed up the computation of velocities. The diffusion of the vortex sheet induced at the 
solid wall by the no-slip boundary conditions is first modeled by Koumoutsakos’ analytical solution 
and then discretized into blobs in the vicinity of the wall. To prevent the vorticity from entering into 
the solid body, the concept of “residual circulation” is introduced in the sense that only partial 
circulation of the vortex sheet is diffused into the flow field and the rest remains at the wall. Blobs 
very close to the wall are thus avoided. Moreover, near-wall blobs that may cause large fluctuations 
in the strength of the vortex sheet are handled in a similar way. Consequently no grid-based 
remeshing is needed at all in the so-developed solver, which can thus be easily applied to all kinds 
of flows. In the present study, we have successfully applied the solver to simulate the flow induced 
by an impulsively started circular cylinder. The simulation results agree well with previous 
experimental and numerical investigations.  
 
1. Introduction 
The discrete vortex method (see Leonard [1]) has been developed as a numerical simulator for 
two-dimension incompressible flows. In this method, the convection of packets of vorticity (vortex 
elements) is tracked. The compactness of the vorticity field representation compared to that using 
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
24 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
61 
62 
63 
64 
65 
 
 3
In the present work, we are interested in the core-spreading vortex method proposed by 
Leonard [1]. The fundamental vortex elements chosen herein are Gaussian blobs. To correctly 
capture the diffusion phenomenon, the characteristic area of these Gaussian blobs must grow 
linearly in time. Its well-known convergence problem can be fixed by a blob-splitting technique as 
first proposed by Rossi (1996)[15] and improved later by Huang (2005)[16]. In the later, the 
splitting process is viewed as part of the diffusion process. Whenever a vortex blob becomes too fat, 
it throws away some of its circulation, forming child vortices in its surroundings. The strengths and 
the locations of these child vortices are determined by preserving the first few moments of vorticity. 
On the other hand, to control the total number of vortex blobs, one must merge similar and nearby 
vortices into one [17,18]. The simplified merging criteria and the cell technique developed by 
Huang [18] have been shown to be useful and efficient. These resurrected core-spreading vortex 
methods are attractive because it is deterministic, grid-free, and exact for uniform flow fields. It 
does not rely upon operator splitting and therefore it is possible to design methods for constraining 
the flow to satisfy the no-slip and non-penetration boundary conditions simultaneously. 
Furthermore, it is easy to implement and computationally efficient. Among all core spreading 
methods employing axisymmetric Gaussians, Huang’s [16,18] retains all the above advantages and 
has a better accuracy (see [16]). The efficiency of such a viscous solver nonetheless is not high 
because the velocities are evaluated directly by the Biot-Savart law and can be applied only to flows 
without boundaries. In this work, the authors intend to apply the fast multipole method to this 
resurrected core-spreading method and extend its power to be capable of simulating flows with 
solid walls.  
In the literature, there are three kinds of fast vortex methods. The first one maps vorticity 
values between Eulerian and Lagrangian grids and obtains the velocities by solving the Poisson 
equation [19,20,21]. The second one integrates numerically the Biot-Savart law by Legendre 
quadrature rule with time-changing quadrature nodes and weights [22,23]. The last kind of fast 
vortex methods groups the influence of nearby vortex. The so-called multipole method was 
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
24 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
61 
62 
63 
64 
65 
 
 5
efficient in summing the velocities but the associated radii of rings are undetermined or empirical 
and consequently it is hard to estimate the associated numerical errors. For more references, the 
readers are referred to [28,29].  
In the vortex method of interest herein, a domain decomposition has been needed in order to 
merge similar and nearby vortex blobs [18]. To be consistent, we decide to employ the adaptive 
domain decomposition and the group-to-point approximation proposed by Carrier et al. [24]. An 
algorithm similar to the outer-ring approximation and the inner-ring approximation will be 
developed for the velocity summation. In particular, we design a binary numbering system to 
replace the triad system, or to avoid the use of the uncommon 3-based digits [26], to reduce the 
memory requirement and for an even quicker identification. 
When a solid wall is present in the flow, the potential flow theory [30] can be used to 
determine what kind and strength of singularities can be placed at the wall in order to satisfy the 
non-penetration condition. Chorin adopted vortex sheets and the Prandtl boundary layer theory to 
capture the wall effect [5]. The tangential velocity induced by the vortex blobs and any external 
potential flow at the wall is balanced by that induced by the vortex sheet. The circulation of the 
vortex sheet will gradually diffuse into the flow as time goes on. The total circulation of the flow 
nonetheless remains unchanged according to the Kelvin theorem [30]. Anderson et al. [31] 
employed a similar treatment in their finite element solver and Park et al. [19] combined it with a 
vortex-in-cell method. Rossi [32] divided the boundary into finite segments, each imposed with a 
line source to create the potential flow, and added vortex elements near the boundary segments to 
approximate a thin boundary layer. By adjusting the strengths of the line sources and newly injected 
vortex elements, the no-slip and non-penetration flow conditions could be satisfied at the same time.  
In the present study, we choose to place a vortex sheet at the wall and solve its strength by the 
boundary element method with constant panels [33]. Besides, Koumoutsakos’ analytical solution 
[34] will be employed and properly discretized to model the diffusion of the vortex sheet. A fast 
resurrected core-spreading vortex method applicable for flows with solid boundaries is targeted. 
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
24 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
61 
62 
63 
64 
65 
 
 7
( ) ( )
2
2 2
1
, 1 exp
2
N
i j i ji
j
i iji ji j
x x x x
v x t
x x
ω π σ=
≠
⎧ ⎫⎛ ⎞⎪ ⎪⎟− −⎪ ⎪⎜Γ ⎟⎪ ⎪⎜ ⎟= − −⎜⎨ ⎬⎟⎜ ⎟⎪ ⎪⎜ ⎟− ⎪ ⎪⎜⎝ ⎠⎪ ⎪⎩ ⎭
∑
G GG
G G                  (4b)
where ( )2 2 2 2ij i jσ ≡ σ +σ . 
It is known the diffusion process of Eq.(1) is simulated exactly by Eqs.(3abc) but the 
convection process is not. The associated error increases with increasing jσ [10]. To fix it, the core 
size must be kept small. The idea of the blob splitting technique that was first suggested by Rossi 
[15] is to replace a “too fat” blob by some thinner ones. Huang’s splitting technique [16] improves 
the accuracy of Rossi’s and is described below. A threshold for the core size ( maxσ ) is set first. 
Whenever a blob has a core size ( pσ ) greater than maxσ , this blob is replaced immediately by a 
thinner one surrounded with M ones. The core size of these new blobs is chosen to be pασ  and 
their strengths are determined by preserving the zeroth, second, and fourth moments of vorticity. If 
pΓ , p′Γ  and cΓ  are the strengths of the original blob, the thinned blob, and the surrounding blobs 
respectively, the preservation of moments of vorticity results in 
/ 2p p′Γ = Γ                                     (5a) 
 / 2c p MΓ = Γ                                   (5b) 
( )2 2 2/ 2 1pr σ α= −                                   (5c) 
where r is the distance between the original blob and the surrounding blobs. The major difference of 
this splitting method from Rossi’s lies in the survival of the original blob. Leaving a blob of half the 
strength at the original location can significantly reduce the error due to the splitting, particularly 
the error at the original location [16]. Physically, when diffusion is concerned, vorticity at the 
original location decreases but remains always the maximum as time goes on. Huang’s splitting 
method approximates this major part of vorticity by the blob of half the strength and the 
circumferential vorticity by the surrounding blobs. Therefore, it can capture the diffusion process 
more accurately. Figure 1(a) shows the maximum field errors induced by one single splitting event 
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
24 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
61 
62 
63 
64 
65 
 
 9
The sets of similar and nearby blobs to be merged are on the other hand determined in the 
following way. The whole flow domain is first divided into equal square cells of size η maxσ . The 
merging criteria are then examined over blobs in each cell and at most one merging event is allowed 
per cell per time step. The distance between neighboring blobs after the merging process is thus 
about max2ησ  (the diagonal distance of the cell). Consequently, because the minimum core size 
of blobs is maxασ , the overlapping ratio (the ratio of the core size to the distance between 
neighboring blobs) is estimated to be ( )2α η .  
3. Fast vortex method 
3.1 Methodology 
We choose to apply the multipole method proposed by Carrier et al. [24] to the solver. For a 
blob (say blob j) that is far away from a group of nearby blobs, namely ( ){ }, , 1, ,n n nx n WσΓ =G " , 
the latter may be viewed as a set of point vortices and the velocity induced can be approximated as 
*
, ,
12
W
n
j j j
n j n
iV u iv
Z Zω ω =
Γ−= − = π −∑                                  (8) 
where 1i= −  and Z x iy= +  and V u ivω ω= +  are the complex position and velocity 
respectively; the superscript * means the complex conjugate. The multipole method expands the 
velocity, Eq.(8), about some position 0Z  within the area occupied by the group of blobs in a 
Lauries series to the Pth term as follows 
*
1 0( )
P
k
j k
k j
CV
Z Z=
= −∑                                         (9a) 
1
0
1
( )
2
W
k
k n n
n
iC Z Z −
=
−= Γ −∑π                                  (9b) 
Two different kinds of errors are there associated with Eqs.(9ab). The first one arises from the 
approximation of vortex blobs by point sources and the second one is due to the truncated higher 
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
24 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
61 
62 
63 
64 
65 
 
 11
computation. The maximum level (Lmax) of this domain decomposition is three. The finest childless 
subdomains may be as the same as or larger than the cells for merging. They are the same in the 
example. Noticed is the childless subdomains may not be the finest.   
The neighbors of a subdomain are now defined as the subdomain itself and those subdomains 
which are as large as or larger (possible only if the neighboring subdomain is childless) than the 
subdomain of interest and are connected with it by one side or a point. Take the childless 
subdomain 50 in Fig.2 for instance. Its mother is the subdomain consisting of the cells 48, 49, 50, 
and 51 (the light gray ones) and its grandmother is the subdomain consisting of the cells 48 to 63. 
The neighbors of the childless subdomain 50 include the light as well as the deep gray cells. The 
mutually induced velocities among vortex blobs are computed in the following way. The velocities 
induced by blobs within each childless subdomain on blobs in its neighbors are first calculated via 
the point-to-point formula, namely Eq.(4ab). The velocities induced by blobs within each 
subdomain on blobs belonging to its mother’s neighbors excluding its own neighbors are computed 
next by the group-to-point formula, Eq.(9ab). Starting from subdomains of the maximum level, the 
group-to-point calculation is continued level by level until the level one is reached. Not until now, 
the computation of velocities is finished. 
Finally, as suggested by van Dommelen & Rundensteiner [26], the Laurent coefficients of a 
mother subdomain can be computed by taking advantage of the Laurent coefficients of its four child 
subdomains as follows 
   four 1
children
( )
k
k
k n n
n
C m C
=
⎧ ⎫′ = ⎨ ⎬⎩ ⎭∑ ∑                                         (11b) 
1kkm =                                                       (11c) 
1
k k
k l k l
k lm m dZ
l− − +
−= × ×   for 1, , 1l k= −"                     (11d) 
where 0 0dZ Z Z ′≡ −  and 0Z ′  and kC′  are the center and the Laurent’s coefficients of the mother 
subdomain. 
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
24 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
61 
62 
63 
64 
65 
 
 13
numbers are (01,10), (11,10), (10,11), (10,01), (11,11), (01,01), (11,01), and (01,11). The eight 
numbers generated in step (iii) are thus 011000(24), 111000(56), 110100(52), 100100(36), 
111100(60), 001100(12), 101100(44), and 011100(28). Except the first one and the last one, the 
others have levels equal to or greater than 2 (L) and are thus the wanted neighbors of the subdomain 
(48,2). The cells 24 and 28 both have a level of one ( L′ =1). Their corresponding values of r′ ’s  
are the same, namely 010000(16). Consequently, the last neighbor of the subdomain (48,2) is the 
subdomain (16,1). 
3.3 Tests 
We test the accuracy and efficiency of the proposed fast method herein. By randomly 
distributing N Gaussian blobs within a circle of diameter 10 and adjusting the core size σ so that the 
overlapping ratio is 1.5, the average relative error induced by the fast method and the ratio (R) of 
CPU times required by the non-fast and fast methods are shown in Fig.3. In the case of N=16000 
and 0 200n = , the maximum level is 4 (finest subdomain size, lmin, is 0.625) and the core size is 
about 0.105. In the present work, the minimum value of 0jz z−  can be estimated as 1.5lmin (the 
possible minimum distance in the present algorithm). The critical number evaluated by Eq.(10) is 
about 160. Therefore, for P<30, the truncation error dominates and drops exponentially with P as 
seen in Fig.3. Moreover, the more blobs, the larger reduction in the CPU time is observed. Because 
the point-to-point computations increase and the group-to-point calculations decrease with an 
increasing 0n , a best choice of 0n ≈50 seemingly exists. This value is larger than the previous 
investigations [24], probably because modern computers are more powerful in vectoral 
computations, which speeds up the point-to-point calculations significantly. In Fig.4, we attempt to 
control the ratio of the Gaussian core size to the finest subdomain size (SR minl≡ σ ) and measure 
the error associated with the fast algorithm. The total number of Gaussian blobs used is 16000 and 
0n =50. It is seen the error stops decreasing beyond some value of P. When SR=0.6, the critical 
value given by Eq.(10) is 13.5 if 0jz z− =1.5lmin is chosen and 6.5 if 0jz z− =lmin. When SR=0.5, 
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
24 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
61 
62 
63 
64 
65 
 
 15
In remark, we suggest to determine the involved numerical parameters in the following way. 
One first specifies the desired values of SR and 0n , then chooses the optimum value of P 
determined by Eq.(12), and finally sets the allowable maximum level for the domain decomposition 
as ( )2 maxlog L SR⋅ σ , where L is the size of the minimum square that encloses all the existing 
vortex blobs.  
4. No-slip boundary conditions 
The no-slip boundary condition is fulfilled herein by placing a vortex sheet of strength γ 
(circulation per unit length) at the wall. It is known the strength is governed by 
( ) ( ) ( ) ( ) ( )( )1 log 2 ext
S
s x s x s s ds x s
n n
∂∂ ′ ′ ′− − = −∂ ∂∫ ψγ γπ G G Gv             (13a) 
( ) ( ), 0wake
S
s t ds tγ + Γ =∫v                          (13b) 
where extψ  is the stream function associated with the external flow, including the free streams and 
the vortex blobs, wakeΓ  is the total circulation inside the flow, and finally s and n are the tangential 
and normal coordinates along the solid boundary. In the present study, we discretize Eq.(13) by the 
boundary element method with constant panels (panels of constant strength) [33] and solve the 
solution by a least-square-error requirement [38]. Most of all, to avoid fluctuations, the external 
vortex blobs will be treated as point vortices when the right hand side of Eq.(13a) is evaluated. 
4.1 Diffusion of the vortex sheet 
To simulate the diffusion of the vortex sheet, we adopt the approximation solution proposed by 
Koumoutsakos [34], namely 
( )
2
,
1
exp
4 2 2, ,
2 4 4
i iiM
i
i
y l lx xt
x y t t erf erf
t t t=
⎛ ⎞ ⎡ ⎤⎛ ⎞ ⎛ ⎞−⎜ ⎟ − +⎢ ⎥⎜ ⎟ ⎜ ⎟Δ⎝ ⎠+ Δ = +⎢ ⎥⎜ ⎟ ⎜ ⎟Δ Δ Δ⎢ ⎥⎜ ⎟ ⎜ ⎟⎢ ⎥⎝ ⎠ ⎝ ⎠⎣ ⎦
∑γ
γ νω πν ν ν              (14) 
where il  is the length of the ith panel (a total of M panels are employed), iγ  is the constant 
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
24 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
61 
62 
63 
64 
65 
 
 17
2
, 0
, , ,2
,
1
4
j i
j i j i j j j i
ij i
i
rl erf
t
⎛ ⎞ΔΓ ⎡ ⎤⎛ ⎞′ΔΓ = ΔΓ + − − ΔΓ⎜ ⎟⎢ ⎥⎜ ⎟ΔΓ Δ⎝ ⎠⎣ ⎦⎝ ⎠∑∑ γ ν              (16) 
where the second term in the square brackets is the residual circulation. 
4.2 Near-wall vortex blobs 
Sometimes some external vortex blobs, due to convection or splitting/merging processes, may 
move toward the wall and stay so close to the wall that their Gaussian tails extend into the interior 
of the solid body. To avoid it, we examine vortex blobs in the neighborhood of the solid body and 
judge a blob too close to the wall by the following criterion: 
*1rr r< ≡
γσ σ  
where r and σ are the distance from the wall and the core size of the too-close blob. Too-close blobs 
will then be eliminated and their circulations will be distributed to the newly generated vortex blobs 
mentioned in the subsection 4.1, namely the wall blobs. In other words, the circulation of one wall 
blob located at jx
G  will be increased by an amount of 
2
2 2exp
j kk
k k k
x x
h
⎛ ⎞−Γ ⎜ ⎟−⎜ ⎟πσ σ⎝ ⎠
∑
G G
 
where the summation is done over those too-close blobs. Any deficiency in the circulation will be 
treated as part of the residual circulation. 
4.3 Time marching 
In this subsection, we describe the flow chart of the proposed vortex method. Given flow 
details at time tn, we first convect the vortex blobs by the modified Euler method and make the blob 
cores grow according to Eq.(3b). The core sizes are then examined and splitting/merging processes 
are performed if necessary. The strength of the vortex sheet at the solid wall is next solved and 
denoted as *nγ . For a better accuracy, the constant vorticity flux at the solid wall during (tn, tn+Δt) is 
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
24 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
61 
62 
63 
64 
65 
 
 19
The overlapping among blobs is thus controlled to be about 1.2. Those parameters associated with 
the fast method are: P=13 and 0 100n = . Both the panel length and h are chosen to be 2 tνΔ . A 
total of 522 panels ( )2D t≈ π νΔ  are thus employed to approximate the circular boundary and 
the ratio of the panel length to the radius of the cylinder is on the order of 10−2. Finally recall 
2hγσ =  and 0 0.3r h= .  
Shown in Fig.10 are the vorticity contour plots at tU/D=1, 3, and 5. The magnitudes of the 
contours are chosen to be as the same as those in the Fig.12 of the work by Ploumhans and 
Winckelmans [40] (denoted as PW hereafter), who modified the particle strength exchange (PSE) 
method in the vicinity of the solid boundaries to avoid a spurious vorticity flux during the 
convection step. A comparison finds the obtained vorticity structures are nearly identical. In Fig.11, 
we compare the simulated results with the experimental measurements [41]. The calculated velocity 
distributions along the x-axis agree with the measurements very well. We next compute the linear 
impulse (I) and the drag coefficient (CD) as follows 
,
1 1
N M
i i c m m m
i m
I y y l
= =
= Γ + γ∑ ∑                                         (17a) 
( ) ( )
2D
I t t I t t
C
U D t
− Δ − + Δ= Δ                                        (17b) 
where N is the total number of vortex blobs in the flow and M is the number of panels used. The 
results are shown in Fig.12, compared to those of Ploumhans and Winckelmans [40], 
Koumoutsakos and Leonard [42], and the analytic solution derived by Bar-Lev and Yang [39]. In 
the work of Koumoutsakos and Leonard [42] (denoted as KL), the differential operators in Eq.(1) 
were replaced by integral operators which in turn were discretized using a quadrature having as 
quadrature points the locations of the blobs. And like the PSE methods, remeshing is necessary in 
order to fix the problem of Lagrangian grid distortion. As seen, the present results agree better with 
the results of Ploumhans and Winckelmans [40] before tU/D≈2.5 (the drag coefficient of 
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
24 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
61 
62 
63 
64 
65 
 
 21
used (i.e. too many merging events allowed), which enhances the diffusion effect. In spite of it, the 
second vortices attached to the cylinder agree well with theirs [40]. On the other hand, the 
computed drag coefficients coincide at early times but deviate since tU/D≈1. Moreover, it is also 
found this derivation cannot be reduced by decreasing σmax and Δt or changing the numerical 
parameters related to the residual circulation. It is thus conjectured the enhanced diffusion effect by 
the merging errors must take the responsibility. A smaller ε nonetheless results in more surviving 
vortex blobs and thus a tremendous computational amount.  
Compared to 1944 panels and 500,000 particles at tU/D=5 used by Ploumhans and 
Winckelmans [40] as well as 300,000 particles at tU/D=3 used by Koumoutsakos and Leonard [42], 
we herein employ 1722 panels and the total number of vortex blobs at the final time (tU/D=3) is 
about 210,000 as shown in Fig.17. It took about 17.3 CPU hours on a personal computer with 
Intel®CoreTM2 6600@2.4GHz .  
6. Conclusion 
A new vortex method suitable for simulating two-dimensional viscous incompressible flows is 
proposed in the present work. In the proposed method, the vorticity field is composed of Gaussian 
vortex blobs, which core areas grow linear in time. To control the convection error and to control 
the computational amount, the blobs-splitting-and-merging technique is applied. The multipole 
method is employed to speed up the computation of velocities with the help of a carefully designed 
binary numbering system. The no-slip boundary condition is satisfied by placing a vortex sheet at 
the wall and having it diffused into the flow properly. To prevent the vorticity from entering into the 
body, the concept of “residual circulation” is introduced. That is, the circulation that stays too close 
to the wall is put back to the wall.  
 The so-developed solver does not need a grid-based remeshing and thus can be easily applied 
to all kinds of flows. It has been in the present work successfully applied to a simulation of the flow 
induced by an impulsively started circular cylinder. The simulation results agree very well with 
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
24 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
61 
62 
63 
64 
65 
 
 23
References 
[1] Leonard A., Vortex methods for flow simulations, J. Comput. Phys. 37, 289-335 (1980). 
[2] Chang C. and Chern R., A numerical study of flow around an impulsively started circular 
cylinder by a deterministic vortex method, J. Fluid Mech. 233, 243-263 (1991). 
[3] Lu Z.Y. and Shen S.F., Numerical methods in laminar and turbulent flow, edited by C. Taylor, 
et al. (Pineridge Press, Swansea, UK), 5:619 (1987). 
[4] Lu Z.Y. and Ross T.J., Diffusing-vortex numerical scheme for solving incompressible Navier-
Stokes equations, J. Comput. Phys. 95, 400-435 (1991). 
[5] Chorin A.J., Numerical study of slightly viscous flow, J. Fluid Mech. 57, 785-796 (1973). 
[6] Degond P. and Mas-Gallic S., The weighted particle method for convection-diffusion equations. 
Part 1: The case of an isotropic viscosity, Math. Comput. 53, 485-507 (1989). 
[7] Fishelov D., A new vortex scheme for viscous flow, J. Comput. Phys. 86, 211-224 (1990). 
[8] Shankar S. and van Dommelen L.L., A new diffusion procedure for vortex methods, J. Comput. 
Phys. 127, 88-109 (1996). 
[9] Van Dommelen L.L. and Shankar S., Two counter-rotating diffusing vortices. Phys, Fluids A 7, 
808-819 (1995). 
[10] Leonard A., Computing three-dimensional incompressible flows with vortex elements, Ann. 
Rev. Fluid Mech. 17, 523-559 (1985). 
[11] Anderson C. and Greengard C., On vortex methods. SIAM J. Numer. Anal. 22, 413-440 (1985). 
[12] Gustavson K. and Sethian J., Vortex method and vortex motion, SIAM, Philadelphia (1991). 
[13] Beale J.T., Cottet G.H., and Huberson S., Vortex flows and related numerical methods, Kluwer 
Academic Publisher (1993). 
[14] Cottet G.H. and Koumoutsakos P., Vortex methods: theory and practice, Cambridge University 
Press (2000). 
[15] Rossi L., Resurrecting core-spreading vortex methods: A new scheme that is both deterministic 
and convergent, SIAM J. Sci. Comp. 17, 370-397 (1996). 
[16] Huang M.J., Diffusion via vortex splitting and regridding via vortex merging in core spreading 
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
24 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
61 
62 
63 
64 
65 
 
 25
[30] Anderson J.D., Fundamentals of Aerodynamics, McGraw Hill, 4th ed., 2007. 
[31] Anderson C.R. and Reider M.B., Investigation of the use of Prantl/Navier-Stokes equation 
procedures for two-dimensional incompressible flows, Phys. Fluids 6, 2380-2389 (1994). 
[32] Rossi L.F., Vortex computations of wall jet flows, Forum on vortex methods for engineering 
applications, Albuquerque, New Mexico, Feb.22-24 (1995). 
[33] Prem K. Kythe, An introduction to boundary element methods, Boca Raton : CRC Press 
(1995). 
[34] Koumoutsakos, P., Leonard, A., and Pepin, F., Boundary condition for viscous vortex methods, 
J. Comput. Phys. 113, 52-61 (1994). 
[35] Hamilton J.T. and Majda G., On the Rokhlin-Greengard method with vortex blobs for 
problems posed in all space or periodic in one direction, J. Comput. Phys. 121, 29-50 (1995). 
[36] Rossi L.F., Evaluation of the Biot-Savart integral for deformable elliptical Gaussian vortex 
elements, SIAM J. Sci. Comput. 28, 1509-1532 (2006).  
[37] Cruz F.A. and Barba L.A., Characterization of the errors of the fast multipole method 
approximation in particle simulations, preprint submitted to Elsevier (2008).  
[38] Clarke N.R. and Tutty O.R., Construction and validation of a discrete vortex method for the 
two-dimensional incompressible Navier-Stokes equations, Computers Fluids 23, 751-783 
(1994). 
[39] Bar-Lev, M. and Yang, H.T., Initial flow over an impulsively started circular cylinder, J. Fluid 
Mech. 72, 625-647 (1975). 
[40] Ploumhans P. and Winckelmans G.S., Vortex methods for high-resolution simulations of 
viscous flow past bluff bodies of general geometry, J. Comput. Phys. 165, 364-406 (2000). 
[41] Buard R. and Coutanceau M., The early stage of development of the wake behind an 
impulsively started cylinder for 40<Re<104, J. Fluid Mech. 101, 583-607 (1980). 
[42] Koumoutsakos P. and Leonard A., High-resolution simulations of the flow around an 
impulsively started cylinder using vortex methods, J. Fluid Mech. 296, 1-38 (1995). 
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
24 
25 
26 
27 
28 
29 
30 
31 
32 
33 
34 
35 
36 
37 
38 
39 
40 
41 
42 
43 
44 
45 
46 
47 
48 
49 
50 
51 
52 
53 
54 
55 
56 
57 
58 
59 
60 
61 
62 
63 
64 
65 
 
 27
Fig.16: The drag coefficient obtained by the present vortex method (thick solid line), compared to 
the results of Ploumhans and Winckelmans [40] (dash line), Koumoutsakos and Leonard 
[42] (dotted line), and Shiels et al (thin solid line) as well as the spectral-method result of 
Henderson [28](dash dotted line). 
Fig.17: The number of computational elements versus time for an impulsively started cylinder at 
Re=3000 compared to Re=550. 
 
 29 
 
Fig.3: The average relative error and the CPU time reduction by the fast method. 
 
Fig.4: The relative error against the number of terms P used in the Laurent seires under a specified 
ratio of SR=σ/lmin. 
 
 
Fig.5: The time evolution of the distance between two vortices in merging.  
0 200
16000
n
N
=
=
 
 31 
 
Fig.9: The distributions of the strength of the vortex sheet induced on the impulsively-started 
circular cylinder at t=0 (a) and t=Δt=0.01 (b). 
 
 
 
 
 
 
Fig.10: The vorticity contours (increment DΔω/U=2) at tU/D=1, 3, and 5 as Re=550. 
(a) (b) 
 33 
 
 
 
Fig.12: The linear impulse and the drag coefficient of the present simulation result compared with 
those obtained by Ploumhans and Winckelmans [40], Koumoutsakos and Leonard [42] 
(dotted line), and the analytic solution by a perturbation Bar-Lev and Yang [39]. 
 35 
 
 
 
Fig.15: The vorticity contours (increment DΔω/U=4) at tU/D=1, 2, and 3 as Re=3000. 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                               97 年 6 月 27 日 
報告人姓名  
謝嘉聰 
 
就讀校院
（科系所）
 
國立臺灣大學機械工程學博士班研究生 
 
     時間 
會議 
     地點 
97 年 6 月 10 日至 12 日 
挪威 特隆赫姆 
本會核定
補助文號 NSC 95-2212-E-002-336-MY2 
會議 
名稱 
第 6 屆油氣、治金及工業製程計算流體力學國際研討會 
6th International Conference on COMPUTATIONAL FLUID DYNAMICS in the Oil & 
Gas, Metallurgical and Process Industries 
發表 
論文 
題目 
動樑式扁鋼胚加熱爐之爐氣及鋼胚溫度分佈耦合模擬 
A Coupled Numerical Study of Slab Temperature and Gas Temperature in the 
Walking-Beam Type Slab Reheating Furnace 
 
ㄧ. 參加會議經過：  
第六屆油氣、治金及工業製程計算流體力學國際研討會，會議舉行地點位於北歐挪威，特倫
汗市，為挪威第三大城市。總共有來自30個國家，94篇論文及6篇邀請論文發表，會議的主題在
於計算流體力學在工業上的運用，並區分為油氣傳輸及處理現象、礦物處理、金屬製程、化學製
程等工業運用，並希望擴展計算流體力學的運用及新的方向，驗證計算流體力學在工業上計算的
正確性。 
由於實驗量測的設備一般均很昂貴，操作不見得容易且量測點數量有限，量到的數值仍需考
慮到誤差值，因此目前計算流體力學大量運用在工業方面，除了可以減少經費的使用，得到整個
模型的數值外，亦可配合量測所得的資料，驗證計算結果的正確性。 
大會首先是Wisconsin大學的Graham教授的邀請講座，他以直接數值模擬(DNS)針對在層流與
紊流轉換時的現象做了詳細的說明。接下來就是分組的報告，由於投稿的論文數太多，大會分成
三組分別報告，主題分別為 Drag Reduction / Flow Acoustics，Meshfree Methods，Solidification，
Population Balance，Multiphase Pipe Flow，Fluidized Bed，Flotation，Mixing / Separation，Oil/Gas 
Applications，Flashing Flows，Furnace Modelling，Validation/Measurements，Bubble & Droplet 
Dynamics，Particle Tracking，Lattice Boltzmann， Industrial Applications，Bubble Columns，
Metallurgical Applications，Heat & Mass Transfer。 
