they should maintain user privacy and avoid disclosing
information about the identity, whereabouts, or behavior
of the user. This is particularly crucial in environments
in which privacy is of vital importance. It is important
that mechanisms to maintain confidentiality and privacy
be available in ad hoc routing protocols to resist various
security intrusions and provide anonymous interactions
between two communication nodes. To date, only a small
number of papers written on the subject of wireless ad
hoc network have addressed secure routing protocols and
anonymity issues [1, 5, 13, 17, 30]. However, most proto-
cols have adopted PKI solutions to ensure the anonymity
and security of route constructing mechanisms. Due to
hardware constraints, an ad hoc node is usually built
as a small device which has limited power and compu-
tational ability. Motivated by the above-mentioned, in
this paper, a lightweight and secure anonymous rout-
ing protocol for wireless ad hoc networks without public
key en/decryptions is proposed. Besides preventing the
above-mentioned security attacks, the proposed protocol
features several notable properties as follows:
Anonymous routing: The proposed protocol inte-
grates the property of anonymity into a reactive rout-
ing algorithm, and hence it allows anonymous inter-
actions between source and destination node.
Session key agreement: Two communicating nodes
both partial contribute to security and hence both
them can agree on a session key based on their own
contributions. Thus, a session key can be used to
secure later communications between them.
Mutual authentication: The proposed protocol can
achieve mutual authentication between two commu-
nicating nodes and not only can the destination node
authenticate the legal source node, but the source
node can authenticate the legal destination node.
Forward secrecy: Even if an attacker has ability to
compromise a node to obtain the partial contribu-
tions to session keys from previous sessions, she/he
is still unable to derive the correct session keys from
them and this kind of security requirement is so called
forward secrecy.
Group secrecy: All trustworthy members in an ad hoc
network must authenticate all the packets they re-
ceive before forwarding them. Hence, the proposed
protocol can prevent security threats from external
attacks. A simple solution for achieving this goal is
to employ a network-wide group key shared by all
participating members.
Efficiency: All involved nodes in a specific route need
not perform heavy operations to authenticate re-
ceived route packets from their neighbors, and the
proposed protocol only requires a few inexpensive op-
erations for subsequent traffic authentications.
In summary, our proposed protocol has two main ad-
vantages compared with other related works: one is that
it allows communications between source and destination
node to proceed anonymously, and the other one is that
we present the alternative simpler solution to public key
solutions with respect to energy and bandwidth savings
and it reduces the complexity of the computational op-
erations. To the best of our knowledge, none of the re-
cently proposed secure anonymous routing protocols in-
clude non-PKI solutions for authenticating route packets.
As such, we attempt to introduce keep our protocol free of
PKI operations in the belief that it is important to provide
a lightweight anonymous routing protocol for wireless ad
hoc networks.
The rest of this paper is organized as follows. In Sec-
tion 2, we review some previous and related anonymous
routing protocols for ad hoc networks. In Section 3 we
present our two-layer authentication protocol with anony-
mous routing (TAPAR). In Section 4, security and perfor-
mance analyzes are presented; followed by our conclusion
in Section 5.
2 Overview of Related Anony-
mous Routing Protocols
If only two communication nodes exchange confidential
information through insecure networks and nodes, even
though a network might be otherwise secure, outsiders
can discover which node is the source and which node
is the destination. Much researches have been invested
[1, 5, 13, 17, 30] in the anonymity and authentication in
wireless ad hoc communications.
One simple solution that provides anonymity is to
adopt public key cryptography into the routing proce-
dure. Recently, two anonymous routing protocols have
been presented that utilize public key solutions for wire-
less ad hoc networks. In 2005, Boukerche et al. [1] pro-
posed an anonymous routing protocol for wireless ad hoc
networks, basing the security of their protocol on Onion
En/Decryption Routing. In addition, a similar idea was
also presented for the design of anonymous routing of
ad hoc networks, based on designated verifier signatures
(DVS) and public key cryptography, in 2007 by Lu et al.
[17]. They proposed a secure anonymous routing protocol
with authenticated key exchange (SARPAKE) to provide
not only anonymity between two communication nodes
but also to establish session keys over ad hoc networks.
In the following subsection, a brief review of two protocols
is provided.
2.1 A Review of Boukerche et al.’s Pro-
tocol
Boukerche et al.’s protocol consists of three phases: path
discovery phase, path reverse phase, and data transfer
phase. The main task of the first phase is to elucidate
2
When a node receives the packet, it performs the
following steps:
Step 5: Check if (((hop − −) ≥ 0), if it holds, con-
tinue; otherwise, stop.
Step 6: Check if the packet has already been re-
ceived from other nodes within its wireless
transmission range using the unique tag# as the
unique identifier for this route. If it holds, drop
it and stop; otherwise, continue.
Step 7: Check if the node itself is the designated re-
ceiver. (Try to decrypt C0 with the private key
of the node and compare the tag# and the Nn
to the node’s ID. There are two possible out-
comes:
a. If the node is NOT the intended receiver,
then it maintains its local route table
LRTi=(tag#,Ni−1,?,Ti) and forwards the
new packet (tag#||hop||C0) to neighboring
nodes, where hop has been updated.
b. If the node is the destined receiver, then it
verifies whether h0
?
= H(X ||K
0
n) is true or
not, where K0n = y
xn
0 = g
x0xn = yx0n = K
n
0 .
If it does not hold, drop it and stop; other-
wise, Nn stores the entry (tag#,Nn−1,1,Tn)
to its local route table LRTn and the path
discovery phase ends.
• Path Reverse Phase: In this phase, the destination
node would respond to the source node and performs
the following steps:
Step 1: Choose a random number y to compute
Y = gy and hn = H(Y ||K
0
n). Then, the
shared session key can be generated by comput-
ing SK = (X ∗ Y0)
y+xn = g(x+x0)(y+xn).
Step 2: Compute Cn = Epk0 (Mn) and Cn−1 =
Epkn−1(tag#) and send (Cn||Cn−1) to Nn−1,
where Mn = (tag# ||N0 ||Nn ||Y ||hn) and
Epki(.) signifies asymmetric encryption with
node i’s public key.
Upon receiving (Cn||Cn−1) from Nn, Nn−1 uses its
private key skn−1 to recover tag# by computing
Dskn−1(Cn−1) and maintains its local route table
LRTn−1 = (tag#, Nn−2, Nn, Tn−1), where Dski(.)
signifies the asymmetric decryption with node i’s pri-
vate key. Then, Nn−1 forwards (Cn||Cn−2) to its
ancestor node Nn−1, where Cn−2 = Epkn−2(tag#).
Other nodes N1, N2, · · · , Nn−2 along the route per-
form the same operations as the node Nn−1. Fi-
nally, when the source node N0 receives (Cn||C0 =
Epk0(tag#)) from N1, it performs the following steps:
Step 3: Compute Dsk0(C0) to recover tag# and
check whether tag# is in its route table LRT0
or not. If it is found, continue; otherwise, stop.
Step 4: Update its route table LRT0 = (tag#,
0, N1, T0) and compute Dsk0(Cn) to recover
(tag#||N0||Nn||Y ||hn).
Step 5: Verify whether hn
?
= H(Y ||K
0
n) is true or
not. If it holds, continue; otherwise, stop.
Step 6: Compute the shared session key SK = (Y ∗
Yn)
x+x0 = g(x+x0)(y+xn).
Step 7: Finally, the route from the source node
to the destination node is established and the
shared session key between N0 and Nn is also
established.
• Data Transfer Phase: In this phase, the source
node N0 sends a confidential message M to the
destination node Nn securely. First, N0 computes
C = ESK [M ] and h = H(C), where ESK [.] signifies
symmetric encryption with session key SK. Then,
N0 sends (C||CH) to its successor node N1, where
CH = Epk1(tag#||h). Upon receiving (C||CH)
from N0, N1 computes Dsk1(CH) to recover tag#
and h. If tag# is found in LRT1, N1 computes
CH = Epk2(tag#||h) and forwards (C||CH) to its
successor node N2. Other nodes N2, N3, · · · , Nn−1
along the route perform the same operation as the
node N1. Finally, when the destination node Nn re-
ceives (C||CH = Epkn(tag#||h)) from Nn−1, it com-
putes Dskn(CH) to recover tag# and h and verifies
whether h ?= H(C) holds or not. If it holds, Nn uses
the shared session key SK to recover the message M
from C; otherwise, stop.
3 The Proposed Protocol
In our proposed protocol, a sample of system architecture
for anonymous routing over a wireless ad hoc network is
given in Figure 1. In general, a routing protocol consists
of three types of participants, namely: source node N0,
destination node Nn, and intermediate nodes Ni, where
i = 1 to 5 in this sample. The source node initiates a
path discovery phase from itself to the destination node
by sending a PathDiscovery message through a number
of intermediate nodes (depicted in real line). Then, the
destination node responds with a PathReverse message
in the reverse direction until it reaches the source node,
verifying the complete route (depicted by dotted line). In
addition, all messages transmitted between nodes should
be verified and protected in the protocol, and thus even
if an attacker eavesdrops on the communications between
nodes or injects false messages into networks, the protocol
still provides an adequate level of security. Furthermore,
the proposed lightweight protocol also takes into account
the resource constraints of mobile ad hoc nodes by mini-
mizing computational overhead without resorting to PKI
solutions. We largely succeed in ensuring our protocol
maintains low computational overhead as can been seen
in a detailed description of our proposed TAPAR proto-
col.
4
Table 1: Notations
(G, g, p) An element g of large prime order p in a finite cyclic group G.
IDi The identity of node i.
N0 The source node.
Nn The destination node.
Ni The intermediate nodes, where i = 1, 2, · · · , n− 1.
(pki, ski) A public key and private key of node i,
where pki = g
xi = Yi ∈ G, ski = xi ∈ GF (p).
tag# An unique tag number for a route.
SK
j
i A static shared key between node Ni and node Nj ,
where SKji = Y
xi
j = g
xixj = Y
xj
i = SK
i
j.
GSK The group secret key shared among all nodes in the network.
CSK
j
i The common session key established by node i and j.
Ti A timestamp, which node i attaches.
H(.) A public and collision-free one-way hash function.
MAC The message authentication code and is defined by MAC = H(k;m),
where m denotes the message under the protection key of k.
⊕ Exclusive OR operation.
hop The number of hops that a message can transmit.
a||b Concatenation of message a and b.
EK [.] The symmetric encryption function with key K.
DK [.] The symmetric decryption function with key K.
3 shows the format of each entry in the hashed key table.
3.2.2 Path Discovery Phase
In Figure 2, the path discovery phase of an anonymously
routed two-layer authentication is provided. When a node
wants to broadcast a request to neighbors or forward a
message to its next node in an ad hoc network, it can be
accepted only if it has a correct group key GSK and its
transmission time Ti must be within a tolerance period
of current time. At the beginning, when a source node
N0 wants to securely and privately discover an available
route path from itself to the destination node Nn, it first
generates a unique tag# and initiates a path discovery
procedure within the network to find a feasible route by
performing the following operations.
1) Compute A = ga(modp) and set a suitable number
of hop depending on the actual frequency of usage,
where a is a random number.
2) Make a path discovery message MPD as MPD =
{tag#||hop||M0}, where M0 = H(SK
Nn
N0
) ⊕
[tag#||N0||Nn||A||SN0||TN0 ], SN0 is a ancestor-
serial number which is stored in the third field of
LRT0, and TN0 is a timestamp of current time.
3) Broadcast a packet EGSK [MAC0||TN0 ||MPD] to
neighbors within wireless transmission range, where
MAC0 = H(GSK;TN0).
4) Store the entry (tag#, Nn, SN0, ?, ?, LT0) in its local
route table LRT0. Since N0 itself is the source of
this route and no ancestor node exists, the second
field records the identity of Nn. Similarly, the third
field records a serial number which will be shared
with Nn. The fourth and fifth fields are temporarily
unknown and two fields will be added later during
the path reverse phase. The sixth field records the
life-time of an entry in the route. The entry will be
deleted if the timer hits to 0.
When a node Ni receives the packet, it
first reveals (MAC0||TN0 ||MPD) by computing
DGSK [EGSK [MAC0||TN0 ||MPD]]. Then it checks
the validity of MAC0 for fist-layer authentication and
whether TN0 is within a reasonable time delay range or
not. If above conditions are satisfied, Ni checks whether
the packet has already been received from other nodes
by comparing the tag#. If it has been received, drop
it; otherwise, check if ((hop − −) ≥ 0). If it does not
hold, drop it; otherwise, check if the node itself is the
intended destination node by computing H(SKN0Ni )⊕M0,
with all the hashed session keys of its hashed key table,
where 1 ≤ i ≤ N. According to Algorithm 1, one of
two conditions are met by decrypted results, shown
as follows: Condition (i) is satisfied only when the
decrypted results are meaningful; that is, (tag#||N0||Nn)
are correct and the node is the intended destination
node. Otherwise, under Condition (ii), the node is not
the intended destination node.
6
Path discovery phase
N0 N1
A = ga, MPD = {tag#||hop||M0}
M0 = [tag#||N0||Nn||A||SN0||TN0 ]
⊕H(SKNnN0 )
packet = EGSK [MAC0||TN0||MPD]
LRT0 = (tag#, Nn, SN0, ?, ?, LT0) packet
-
Ni Ni+1 (1 ≤ i ≤ n− 1)
packet = EGSK [MACi||TNi ||MPD]
LRTi = (tag#, Ni−1, ?, ?, ?, LTi)
packet
-
Nn−1 Nn
packet = EGSK [MACn−1||TNn−1||MPD]
LRTn−1 = (tag#, Nn−2, ?, ?, ?, LTn−1)
packet
-
(tag#||N0||Nn||A||AN0||TN0) =
M0 ⊕H(SK
N0
Nn
)
LRTn = (tag#, Nn−1, SNn, N0, SN0, LTn)
Figure 2: Path discovery phase.
Algorithm 1. Confirmation of destination node for
receiving MPD packet
1: function Confirm MPD( ){
2: while (MPD message is received by Ni){
3: Retrive hashed session keys from Ni’s
hashed key table;
4: for (j = 1; j <= N; j ++) do
5: C = M0 ⊕H(SK
Nj
Ni
);
// For 2nd-layer authentication //
6: if (C <> [tag#||N0||Nn||A||SN0||TN0 ]) {
7: Discard this message; continue;
8: }
9: if (C == [tag#||N0||Nn||A||SN0||TN0 ]) {
10: Confirmation of node itself is destination
node;
11: return Condition(i);
12: }
13: return Condition(ii);
14: }
15: }
Condition(i): If the node is the intended destination
node Nn, it generates a successor-serial number SNn
and stores the following entry (tag#, Nn−1, SNn,
N0, SN0, LTn) in its local route table LRTn. Since
Nn itself is the destination of this route and has no
successor node, the fourth field records the identity
of N0. Similarly, the fifth field records SN0 which
is generated by N0. The second field records its an-
cestor node Nn−1 and the third field records a serial
number SNn which is generated by itself and will be
shared with its ancestor node Nn−1. The sixth field
records the life-time LTn of an entry in the route.
Upon entry of all necessary records, the path discov-
ery phase ends.
Condition(ii): Under this condition, the process is re-
peated until the entire hashed session keys of the
hashed key table have been tried and no meaning-
ful results remain. Thus, the node Ni (N1 ≤ Ni ≤
Nn−1) can confirm that it is not the destination node
and it forwards EGSK [MACi || TNi || MPD = (tag#
|| hop −− || M0)] to neighbors within its wireless
transmission range, where MACi = H(GSK;TNi).
In addition, Ni stores the entry (tag#, Ni−1, ?, ?, ?,
LTi) in its local route table LRTi.
3.2.3 Path Reverse Phase
Figure 3 illustrates the path reverse phase of our proposed
TAPAR protocol. To initiate a path reverse session, the
destination node Nn first initiates a path reverse proce-
dure in the reverse direction to confirm a complete route
from itself to the source node by performing the following
operations.
1) Select a random number b and compute B = gb( mod
p). Nn can then compute the common session key
CSK0n = A
b = gab = Ba(modp) which is only
shared between N0 and Nn. It then uses the CSK
0
n
to create the message authentication code MAC0n =
H(CSK0n;SN0+1) which includes the serial number
SN0+1.
8
2) Make a path reverse message MPR as
MPR = {Cn−1||Cn}, where Cn−1 =
(Nn||EH(SKNnNn−1 )
[tag#||SNn]), Cn = Mn ⊕ SNn,
SNn is generated by Nn and is shared with
its ancestor node Nn−1, H(SK
Nn
Nn−1
= Y xnn−1 =
gxn−1xn = Y
xn−1
n ) is a hashed static shared
key between node Nn and node Nn−1, and
Mn = [tag#||Nn||N0||B||MAC
0
n||TNn ]⊕H(SK
N0
Nn
).
3) Unicast a packet EGSK [MACn||TNn ||MPR] to its an-
cestor node Nn−1, where MACn = H(GSK;TNn).
4) Maintain its local route table LRTn as LRTn =
(tag#, Nn−1, SNn, N0, SN0 + 1, LTn).
On receiving the path reverse packet from Nn, Nn−1
deals with this message according to following steps.
1) Reveal (MACn||TNn ||MPR) by computing
DGSK [EGSK [MACn||TNn ||MPR]] and verify the
validity of MACn for first-layer authentication. If
above is correct, continue; otherwise, stop.
2) Use the static shared key H(SKNnNn−1) to reveal
(tag#||SNn) and check whether tag# exists in
LRTn−1 or not. If it is found, continue; otherwise,
stop.
3) Use SNn to reveal Mn by computing Cn ⊕ SNn and
create a new MPR packet as MPR = {Cn−2||Cn},
where Cn−2 = (Nn−1 || E
H(SK
Nn−2
Nn−1
)
[tag# ||
SNn−1]), Cn = Mn ⊕ SNn−1, and SNn−1 is a se-
rial number which is generated by itself and is shared
with Nn−2.
4) According to second field of LRTn−1, Nn−1 unicasts
the packet EGSK [MACn−1 || TNn−1 || MPR] to its
ancestor node Nn−2.
5) Maintain its local route table LRTn−1 as LRTn−1 =
(tag#, Nn−2, SNn−1, Nn, SNn, LTn−1).
Algorithm 2. Forward path reverse packet between
intermediate nodes
1: function Forward Path Reverse Packet( ){
2: while (path reverse packet is received by Ni){
3: for (i = n− 1; i <= 1; i−−) do
4: Decrypt EGSK [MACi+1||TNi+1 ||MPR];
5: if (MACi+1 <> H(GSK;TNi+1)) {
// For 1st-layer authentication //
6: Discard this message and stop;
7: }
8: Retrieve H(SK
Ni+1
Ni
) to reveal (tag#||SNi+1);
9: if (tag# is not found in LRTi or LTi hits 0) {
10: Discard this message and stop;
11: }
12: Compute D = Cn ⊕ SNi+1;
13: Generate SNi;
14: Make Ci−1 = (Ni||E
H(SK
Ni−1
Ni
)
[tag#||SNi]);
15: Make Cn = D ⊕ SNi;
16: Unicast EGSK [MACi||TNi ||MPR = (Ci−1||Cn)]
to its ancestor node Ni−1;
17: }
18: }
Other intermediate nodes Ni along the route per-
form the same steps as the node Nn−1, where i =
1, 2, 3, · · · , n − 3, n − 2 (See Algorithm 2). As a re-
sult, the last intermediate node N1 should unicast a
packet EGSK [MAC1||TN1 ||MPR] to its ancestor node N0
and maintain its local route table LRT1 as LRT1 =
(tag#, N0, SN1, N2, SN2, LT1), where MPR = {C0||Cn},
C0 = (N1 || EH(SKN1
N0
)
[tag# || SN1]), and Cn = Mn ⊕
SN1.
Finally, when the source node N0 receives the packet
EGSK [MAC1||TN1 ||MPR] from N1, it performs the fol-
lowing operations.
1) Reveal (MAC1||TN1 ||MPR) by computing
DGSK [EGSK [MAC1||TN1 ||MPR]] and verify the
validity of MAC1 by first-layer authentication. If
above is correct, continue; otherwise, stop.
2) Use the static shared key H(SKN1N0 ) to reveal
(tag#||SN1) from C0 and check whether tag# exists
in LRT0 or not. If it is found, continue; otherwise,
stop.
3) Use SN1 to reveal Mn by computing
Cn ⊕ SN1 and use H(SK
Nn
N0
) to reveal
(tag#||Nn||N0||B||MAC
0
n||TNn) by computing
Mn ⊕H(SK
Nn
N0
).
4) Compute the common session key CSKn0 by com-
puting CSKn0 = B
a = gab = Ab(modp) and ver-
ify the validity of CSKn0 by comparing H(CSK
n
0 ;
SN0 + 1)
?
= MAC
0
n for second-layer authentication.
If above holds, not only has the route from N0 to Nn
been confirmed, but the common session key CSKn0
shared between N0 and Nn has been established by
10
Data transfer phase
N0 N1
M ′ = ECSKn
0
[M ||SN0 + 2], F = H(M
′) Reveal (tag#||F ) from G
Check H(I ⊕ SN1 + 1)
?
= F
G = (N1||EH(SKN2
N1
)
[tag#||F ])
MDT = {I = M
′ ⊕ SN2 + 1||G}
G = (N0||EH(SKN1N0 )
[tag#||F ])
MDT = {I = M
′ ⊕ SN1 + 1||G}
packet = EGSK [MAC0||TN0||MDT ]
packet
-
Ni Ni+1 (1 ≤ i ≤ n− 1)
G = (Ni||E
H(SK
Ni+1
Ni
)
[tag#||F ])
MDT = {I = M
′ ⊕ SNi+1 + 1||G}
packet = EGSK [MACi||TNi ||MDT ]
packet
-
Reveal (tag#||F ) from G
Check H(I ⊕ SNi+1 + 1)
?
= F
G = (Ni+1||E
H(SK
Ni+2
Ni+1
)
[tag#||F ])
MDT = {I = M
′ ⊕ SNi+2 + 1||G}
Nn−1 Nn
G = (Nn−1||EH(SKNnNn−1 )
[tag#||F ])
MDT = {I = M
′ ⊕ SNn + 1||G}
packet = EGSK [MACn−1||TNn−1 ||MDT ]
packet
-
Reveal (tag#||F ) from G
Check H(I ⊕ SNn + 1)
?
= F
Get (M ||SN0 + 2) from M
′ by
computing DCSK0n [M
′]
Figure 4: Data transfer phase.
Proof. During path discovery phase, the source node
sends a path discovery message through a number of
group members until it reaches the destination node, and
the message is encrypted with the group secret key that is
only shared among valid members. Thus, beginning with
the source node, invalid outsiders are unable to partic-
ipate in routing procedures to further decrypt the mes-
sage, and the security of the secret key is ensured based
on MAC and one-way hashing cryptography. Hence, data
confidentiality and integrity are well-protected by first-
layer authentication in our proposed protocol, preventing
passive attacks such as eavesdropping. Moreover, in ac-
tive attacks, an attacker might intercept the authorized
credential message and replay it. However, such attacks
can be prevented by timestamps and MAC, both of which
are used in our protocol to guarantee the freshness of
transmission messages. Furthermore, static shared key
SKNnN0 , that is, the security mechanism of second-layer
authentication, rend it impossible for valid group mem-
bers to be impersonated as some source node N0 to run
the anonymous routing procedure with some destination
node Nn as well.
During the path reverse phase, the destination node
sends a path reverse message along the reverse order path
of a route through a number of intermediate nodes until
it reaches the source node. Additionally, the message is
encrypted with the group secret key as well. Finally, ev-
ery session between two nodes is well-protected by static
shared key SK
Ni−1
Ni
, and thus no one has ability to ac-
quire or derive their communication messages, where Ni
is Ni−1’s successor node. As a result, many passive and
active attacks can be prevented by TAPAR.
Theorem 2. TAPAR ensures anonymous interactions
between the source N0 and the destination Nn through a
number of intermediate nodes, and neither intermediate
nodes nor outsiders can ascribe any session to a particu-
lar source or destination during any session.
Proof. During path discovery phase, if an at-
tacker Eve intercepts N0’s path discovery mes-
sage EGSK [MAC0||TN0 ||MPD] and is able to derive
MPD = {tag# || hop || M0}, she still cannot know which
node is the source and which node is the destination
because she lacks the static shared key SKNnN0 .
Similarly, during the path reverse phase, if an
attacker Eve intercepts Nn’s path reverse message
EGSK [MACn||TNn ||MPR] and is able to obtain MPR =
{Cn−1||Cn}, she is still unable to discover which node is
the destination and which node is the source not only be-
cause she lacks static shared key SKNnN0 , but also because
she lacks the key H(SKNnNn−1), where Nn−1 is Nn’s an-
cestor node in a specific route. As a result, the source
node can anonymously interact with the destination node
without disclosing either’s personal information, and thus
absolute privacy is achieved for wireless ad hoc networks
in our proposed TAPAR.
12
Table 4: Functionality comparisons between our protocol and two related protocols
Ours Boukerche et al.’s [1] Lu et al.’s [17]
Anonymous routing Yes Yes Yes
Session key agreement Yes No Yes
Mutual authentication Yes No No
of session key
Forward secrecy Yes No Yes
Group secrecy Yes No No
Computation cost Low High Medium
Based problem MAC, PKI operations, PKI operations,
Hashing operations, Symm. operations Symm. operations,
Symm. operations, Hashing operations,
Discrete logarithms Discrete logarithms
Table 5: Efficiency comparisons between our protocol and two related protocols
Ours Boukerche et al.’s [1] Lu et al.’s [17]
Path Source node: Source node: Source node:
Discovery 1 Texp+1 Thash+ 2 Tasym+1 Tsym 2 Texp+1 Thash+
Phase 1 Txor+1 Tsym 1 Tasym
Intermediate node: Intermediate node: Intermediate node:
2 Thash+2 Tsym+ 2 Tasym+1 Tsym 1 Tasym
(N-1) Txor
Destination node: Destination node: Destination node:
1 Tsym+1 Thash+ (n+2) Tasym+n Tsym 1 Texp+1 Thash+
(≤ N-1) Txor 1 Tasym
Path Source node: Source node: Source node:
Reverse 1 Texp+2 Thash+ 1 Tsym 2 Tasym+1 Thash+
Phase 2 Txor+2 Tsym 1 Texp
Intermediate node: Intermediate node: Intermediate node:
2 Thash+4 Tsym+ 1 Tsym 2 Tasym
2 Txor
Destination node: Destination node: Destination node:
2 Texp+2 Thash+ n+1 Tsym 2 Texp+1 Thash+
2 Txor+2 Tsym 2 Tasym
Data Source node: Source node: Source node:
Transfer 3 Tsym+2 Thash+ n+1 Tsym 1 Tasym+1 Thash+
Phase 1 Txor 1 Tsym
Intermediate node: Intermediate node: Intermediate node:
3 Tsym+2 Thash+ 1 Tsym 2 Tasym
2 Txor
Destination node: Destination node: Destination node:
3 Tsym+2 Thash+ 1 Tsym 1 Tasym+1 Thash+
1 Txor 1 Tsym
Computation ≈ 3616 Thash ≈ 7110 Thash ≈ 16626 Thash
Costs (n=1)
Computation 1.808 seconds 3.555 seconds 8.313 seconds
Time (n=1)
N: The number of group members in a ad hoc network.
n: The number of intermediate nodes in a specific route.
14
