 1
1. 前言 
 手 持 式 數 位 電 視 (Digital Video 
Broadcasting-Handheld, DVB-H)系統是由歐
洲數位廣播技術發展組織(DVB Project)以地
面數位廣播系統(DVB-Terrestrial, DVB-T)為
基礎開始發展適用於手持式裝置的數位廣播
標準 DVB-H 規範 [1]-[3] ，並且相容於
DVB-T 技術。並在資料鏈結層添加了兩項
新技術，分時切片(Time-Slicing)與多重協定
封 裝 前 向 糾 錯 (Multi-Protocol 
Encapsulation-Forward Error Correction, 
MPE-FEC)兩項關鍵技術。分時切片是將時
域切割成不同的 Time-Slot 來傳送節目，並
使用 MPE-FEC 技術將網際網路之數位內容
寫入記憶裝置中，再進行里德索羅門
(Reed-Solomon, RS) 編碼以產生 FEC 錯誤更
正碼，使得資料能夠在信號傳送過程中提升
了 對 時 變 衰 減 通 道 (Time-variant Fading 
Channel)與脈衝雜訊(Impulsive Noise)效應的
容忍力，讓 DVB-H 手持式裝置接收機具有
低功耗與高移動性之性能。 
 DVB-H 規格除了在資料鏈結層新增
了上列技術外，同時還在 DVB-T 實體層做
了調整，新增了 4k 模式與深度符號內間插
(In-Depth Symbol Interleaver)。採用 4k 模式
提供了 2k 模式之高移動性與 8K 模式之較廣
網路覆蓋範圍的折衷選擇。另外，新增的深
度符號內間插是善用 8K 模式內間插的記憶
體，將 2K/4K 模式符號內間插的深度分別
提高成四倍／二倍，如此可提供 2K/4K 模
式更強的符號交錯能力，並且提升 2K/4K 
模式對於脈衝雜訊的容忍力。 
 
2. 研究目的 
 研究主旨為建立一個標準的手持式數
位電視(Digital Video Broadcasting-Handheld, 
DVB-H) 廣 播 頭 端 之 IP 封 裝 器 (IP 
Encapsulator, IPE)以及行動終端之 IP 解封裝
器(IP Decapsulator, IPD)技術的實作，並以
軟體的方式實現在 Linux-Based 平台。此 IP
封裝器是負責將 IP資料數據進行多重協定封
裝(Multi-Protocol Encapsulating, MPE)以及多
重協定封裝前向糾錯 (MPE-Forward Error 
Correction, MPE-FEC)封裝，再由分時切片
(Time-Slicing)機制將 MPE 數據框架傳送至
傳 輸 串 流 多 工 器 (Transport Stream 
Multiplexer, TS Muxer)，最後再透過 DVB-H
調變器發射。本研究提出一個易於實現且便
於修改與研究的軟體架構，並搭配商用的
DVB-T 接收器以達到研究的目的。 
 
 
圖一 DVB-H 傳輸 IP 服務的傳輸系統 
 
3. 文獻探討 
3.1 手機電視廣播系統核心技術簡介 
 DVB-H 傳輸 IP 服務如圖一所示，此
架構主要以 DVB-T 系統做為基礎。DVB-H
的前端是由 DVB-H IP 封裝器  (DVB-H 
IP-Encapsulator, DVB-H IPE)，和 MPEG-2 傳
輸串流多工器(TS Multiplexer)以及 DVB-T 
調變器所構成。DVB-H IPE 負責將 Internet
上的 IP 數據資料廣播封包擷取下來，透過
IPE 進行 MPE 封裝以及 MPE-FEC 封裝，再
由 Time-Slicing 機制以分時切片方式將 MPE
數據框架傳送至傳輸串流多工器。傳輸串流
多工器則負責將其他 DVB-T 與 DVB-H 的服
務產生的傳輸串流，藉由多工器組合成一個
傳輸串流，最後經由 DVB-T 的調變器調變
成無線信號發射。圖二為 DVB-H 接收端參
考架構圖，其中包含了 DVB-T 解調器
(Demodulator)、分時切片模組與 MPE-FEC
模組所構成的 DVB-H IP 解封裝器(DVB-H 
IP-Decapsulator, DVB-H IPD) 與 DVB-H 終
端(DVB-H Terminal)模組。在接收端接收到
RF 信號後，先經解調變成傳輸串流，再經
由 IPD 解碼輸出 IP 數據資料到 DVB-H 終端
播放。 
 
 
 3
 MPE-FEC 整體技術是架構於一個名
為 MPE-FEC 框架的方型記憶裝置中。如圖
五所示，此框架的架構橫向的行數固定為
255 行(columns)，列向的列數則有四種可供
選擇分別為 256 、 512 、 768 、 1024 列
(rows)，其中每一格的的單位為位元組
(Byte)。當列數被選為 1024 時，則此框架共
佔用了 2M 位元的記憶體，也是此框架最大
的記憶容量。此框架又被定義成兩部分稱
為：Application data table 與 RS data table，
其分別用來存放 DVB-H 中所傳送的 IP 服務
資料與糾錯冗餘編碼資料。 
 
圖五 MPE-FEC 框架 
 
 如圖六所示，當網路層的 IP封包進入
資料鏈結層時，由第一個封包的第一個位元
組開始從 MPE-FEC 框架左側的 Application 
data table 最左上角位置以縱向填入資料。當
第一個 IP封包填完後，接續著輪到下一個 IP
封包開始填裝，如果 IP封包不能在該行末段
全部填完，則會經剩餘封包資料填入隔行的
第一個位元組，如此反覆的填入直到所有 IP
封包資料均填入為止。當 Application data 
table 快被填滿之時，若緊接而來的封包長度
大於剩餘的空間位元組長度，則將此 IP封包
資 料 儲 放 至 緩 衝 區 ， 留 待 在 下 一 個
MPE-FEC 框架再填裝。若是所有 IP 封包資
料均已填入但仍有部分的 Application data 
table 未填入 IP 資料封包時，則進行填塞機
制，將未被填入的位元組以 0 填入，直到完
整填滿 Application data table 為止。 
 
圖六 MPE-FEC 圖框之 IP 封裝示意圖 
 
 
圖七 MPE-FEC 編碼示意圖 
 
 當整個 Application data table 完全填滿
之後，則可開始進行 MPE-FEC 編碼。於是
對每列開始進行橫向的 RS(255,191,64)的里
德所羅門編碼，並將每列進行編碼後所產生
的 64 位元組資料填入框架中每列的 RS data 
table 中。依此類推，依造 MPE-FEC 框架所
選的列數由上而下進行每一列的編碼，如圖
七所示。 
 
 
圖八 MPE-FEC 圖框轉 Section 示意圖 
  
 
 5
Header 之中，最後在經由 Time-Slicing 控制
模組進行節目的傳送。 
 
4.4 Time-Slicing 控制器模組 
 分時切片技術是將時域分割成不同的
Burst，每個 Burst 代表一個服務。也因如
此，每個節目將由 Time-Slicing 控制器安排
傳送時間，此傳送時間之循環週期亦為
Delta-T 時間。整個流程如圖十二所示，首
先控制器將每個服務節目的 Delta-T 設為相
同，然後再以時間排程方式進行每個節目的
MPE-FEC 封 裝 以 及 將 MPE/MPE-FEC 
Section傳送至傳輸串流多工器，由於每個節
目在傳送過程中所花費的時間將不一致。因
此，在每個節目傳送完成到下一個節目封裝
傳送的開始時間內會進行傳輸填塞封包至傳
輸串流多工器。 
 
 
圖十二 Time-Slicing 配置流程圖 
 
4.5 DVB-H 終端系統設計 
 DVB-H 信號是經由頭端調變器發
射，經由 DVB-T 接收器接收並解出傳輸串
流並傳送至 IPD 進行解碼與播放動作。因此
以實作而言整個 DVB-H 終端接收架構包含
了 DVB-H Tuner 控制模組、IPD 解碼模組、
影音播放器，如圖十三所示。而 IPD 解碼模
組又可劃分為 PSI/SI 解碼模組與 MPE-FEC
解碼與糾錯模組，整個設計方法如下小節所
述。 
 
圖十三 DVB-H IP 解封裝器架構 
 
4.6 DVB-H Tuner 控制模組 
 DVB-H Tuner 的控制模組主要是利用
LinuxTV[5]所提供之 API 來控制整個 RF 的
解調變解出傳輸串流，整個 Tuner 模組控制
方式如圖十四所示。首先 Tuner 控制模組會
進行對接收器設定接收頻段以及頻寬與傳輸
調變等等的參數，即可進行在頻道中做搜尋
的動作，當接收器無法在頻道中取得訊號，
則會進行該改其他調變參數一一測試，當搜
尋到頻道後則會進行將該頻道鎖定，再進行
PSI/SI 表單解碼。 
 
 
圖十四 DVB-H Tuner 控制器流程圖 
 
4.7 PSI/SI 解碼模組 
 為了讓接收端能夠撥放 DVB-H 節
目，首先必須解析特定節目資訊(PSI)與服務
資訊(SI)，這些資訊是用來描述傳輸串流中
傳送哪些節目服務。如圖十五所示，首先必
須先解析 Program Association Table (PAT)
表，並由表中得知每一個節目的 Program 
 7
5. 結果與討論 
實驗結果 
 本研究從開發到測試階段都是以
Linux-Based PC 主機做為基礎平台，在整個
軟體開發過程是以 C 語言撰寫而成的，整個
平台環境架構清單如表一所示。 
 
表一 設備環境清單 
 
5.1 正確性驗證 
 實作的 DVB-H IPE 的功能是以 IP 資
料封裝為主，而為了驗證DVB-H IPE之正確
性，本研究使用一套 DVB-SAM 的 DVB-H
分析軟體進行資料分析與比對，如圖十八所
示，MPE Section 的分析，結果是符合
DVB-H 規範之標準。 
 
 
圖十八 DVB-H IP Encapsulator 正確性驗證 
 
 進行 DVB-H IPD 解碼之驗證結果可
由圖十九可得知， IPD 將接收到的傳輸串
流訊號經由解碼而取出的 IP封包並透過電腦
內部網路傳送，最後是經由 VLC 播放軟體
進行撥放。 
 
圖十九 DVB-H IPD 解碼後的播放結果 
 
 
表二 IPE 節目參數資料 
Arguments Value 
IP Service 4 
Delta-T 2000 (ms) 
Delta-T Jitter 7.5 (ms) 
Max Burst Duration 300 (ms) 
MPE-FEC  rows 1024 
Frame per second 15 
Image size CIF (320×240) 
Max average rate 2048 Kbps 
MPEG-2 TS Mux
Bit-rates 8.29 Mbps 
 
 
5.2 效能驗證 
 表二為測試 DVB-H IP 封裝器進行封
裝節目時所設定的參數，每個節目的循環週
期為 2000ms(Delta-T)，Burst 最大持續時間
為 300ms。在這個效能測試過程中，設定
IPE 共分別進行壓制 4 個節目，並且每個節
目的封裝共執行了 1000 次的 MPE-FEC 封
裝，而產生的 Burst 的所需平均時間如圖二
十所示。 
 由圖二十可得知整個 IPE 封裝 4 個節
目中，產生 Burst 所需要的運作時間。其
中，大部分時間都花費在 FEC編碼運算上，
且 FEC 的平均運算時間為 190ms，同時也幾
乎佔用整個 IPE 的運算時間，然而 MPE 轉
Section 與MPE-FEC 轉 Section所運作的時間
將不超過 10ms，剩下的其他時間則是包含
名稱 規格 
VLC Server AMD K8 3000+, 2GB RAM
IPE Pentium 2.4GHz, 512MB
RAM 
Modulator DVBT/H Modulator PT5780
IPD ASUS F3cs 
DVB-T Receiver AverMedia A828[6] 
 9
參考文獻 
[1]  EN 302 304, “Digital Video Broadcasting 
(DVB); Transmission System for 
Handheld Terminals (DVB-H),” European 
Telecommunications Standards Institute. 
[2]  EN 301 192, “Digital Video Broadcasting 
(DVB); DVB specification for data 
broadcasting,” European 
Telecommunications Standards Institute. 
[3]  EN 300 468, “Digital Video Broadcasting 
(DVB); Specification for Service 
Information(SI) in DVB system,” 
European Telecommunications Standards 
Institute. 
[4]  LINUX DVB API Version 3, 
http://www.linuxtv.org/docs.php 
[5]  Cineca DVB software, JustDvb-It 2.0,  
http://www.cineca.tv/labs/mhplab/JustDV
b-It%202.0.html 
[6]  Avermedia, http://www.avermedia.com/ 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
