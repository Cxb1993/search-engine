 
應用遺傳演算法新的效率編碼模式解決資源/生產分配問題 
 
摘 要 
 
本研究提出遺傳演算法新的效率編碼模式來解決概化性資源分配問題。本文提出一
遺傳演算法的效率組合編碼法，以解決資源/生產分配問題，其中資源/生產分配問題主
要是有關於如何分派各工廠的有限產品資源給各個跨國企業公司，以使得在工廠產能和
市場需求的限制下成本最小化，而此效率組合編碼法由於可將一個限制式編入染色體
中，所以可以縮小問題的解答搜尋空間，以提升遺傳演算法的效能。且當活動的個數漸
漸增加時，其只需要增加一些演化代數即可得到足夠好的解答，而最普遍、通用的懲罰
式編碼法，在當活動的個數漸漸增加時，則需要比較多的演化代數，以求得相同的解答。
同時，為了使遺傳演算法能夠正常的進行演化，本研究亦提出與效率組合編碼法相對應
的交配運算和突變運算，並利用數學證明效率組合編碼法確實可以縮小簡單資源分配問
題的解答搜尋空間，並利用許多不同大小實例來評估效率組合編碼法，實驗結果顯示新
的染色體編碼模式可以提升遺傳演算法的演化效能，由此可見縮小解答搜尋空間確實可
以減少遺傳演算法的演化代數。 
 
關鍵字：遺傳演算法、效率組合編碼法、懲罰式編碼法、資源/生產分配問題、組合最
佳化 
 
 
Abstract 
 
This study proposes a novel, efficient means of encoding genetic algorithms to solve 
the generalized plant allocation problem. The problem relates to allocating products 
across plants to minimize a total cost function. The proposed encoding method can 
reduce the search space of solutions more efficiently than the penalty encoding method 
does. The new encoding method thus exhibits higher performance. It need involve only a 
few more generations to yield sufficiently good solutions when the number of plants is 
increased. The penalty encoding method, however, requires many more generations to 
yield the same solutions. Additionally, a new simultaneous crossover and mutation 
operation is proposed to enable the new method of encoding chromosomes to run 
correctly following standard genetic algorithm procedures. In addition to the 
mathematical certification, the performance of this approach is evaluated using some test 
problems of various sizes. It can reduce the number of evolution generations for genetic 
algorithms by narrowing down the search space of solutions. 
 
Keywords: genetic algorithms, efficient encoding scheme, penalty encoding method, 
resource/plant allocation, combinatorial optimization problems 
 
 
 
tt
T
t
t
T
t
ttT
CxQx
xfxxxZmin
≤≤=
=
∑
∑
=
=
0 ,  subject to
)(),......,,( 
1
1
21
 
where  is the nondecreasing cost function for allocating  units of a product to 
the t-th plant, and where  is the capacity of plant t with 
)( tt xf tx
tC QCt ≤ .  is the total 
amount of the product that needs to be allocated. If the product is divisible,  is a 
continuous variable that can take any nonnegative real value. If the product is discrete, 
such as persons, processors, trucks, etc.,  is discrete and can take nonnegative integer 
values. This paper focuses only on the case in which  is a discrete variable [24]. 
Q
tx
tx
tx
Cook’s theorem [37] states that a problem A is NP-hard if there exists another 
NP-hard problem B such that B can be polynomially reducible to A. A well-known 
NP-hard problem is the knapscak problem, which can be polynomially reducible to the 
plant allocation problem. Thus, the generalized plant allocation problem can be proven to 
be NP-hard. This fact strongly implies that no algorithm for the generalized plant 
allocation problem can be solved within polynomial time. Genetic algorithms have a very 
simple architecture. Their evolutionary process can powerfully search for solutions, using 
the operations of evolution. Such a search scheme is very likely to find a globally optimal 
solution with a high probability [20]. These advantages make genetic algorithms suitable 
for solving the generalized plant allocation problem. 
 
3. Genetic Algorithms 
Holland (1975) proposed the theory of genetic algorithms, in which a genetic 
algorithm is a search algorithm based on genetic evolution [20]. The theory relies on the 
contest for survival of natural organisms. Genetic algorithms express each organism’s 
chromosomes by strings. The fitness value of a chromosome decides whether a 
chromosome survives. Chromosomes can crossover and mutate randomly to produce the 
subsequent generation. This evolution continues until satisfactory chromosomes are 
generated. Holland’s (1975) research described the basic algorithm, called the simple 
genetic algorithm (SGA), as follows. 
 
SGA( ) 
{ 
    Randomly set the initial population 
    Calculate the fitness of the chromosomes 
    While (objective not achieved) 
       {     
Selection 
            Crossover and mutation 
            Calculate the fitness of the chromosomes  
} 
} 
 
The genetic algorithm especially suits situations with a large, nonlinear, complex 
be used by the chromosome as shown in Fig.2. 
 
A1 ATA2
000100......0100010......01......
A3
 
Figure 2. New encoding method 
 
The bits with value 0 represent the products allocated to the plant. Bits with value 0 
are grouped together as a unit and are distinguished from the bit with value 1. The i-th 
group of 0-bits is assigned to the i-th plant.  The total number of 0-bits in the i-th group, 
, is the quantity of products or the percentage of products’ quantity allocated to plant 
. Thus, the total number of 0-bits in all the chromosomes is , representing the total 
quantity of products. A 0-bit stands one unit or percent of products. Bit 1 is a delimiter 
that divides the 0-bits (products) into different groups (plants). Hence,  1-bits are 
required to separate the 0-bits since T  plants are considered. Consequently, the total 
length of a chromosome is 
ix
iA Q
1−T
1−+TQ . This new encoding method yields a search space of 
 which is just the combinatorial problem of placing 11
−+
−
TQ
TC 1−T  1-bits into 1−+TQ  
numbered boxes. 
 
Evaluation  
The new method directly codes the constraint ∑  into the chromosome. 
That is, it satisfies the requirement that the total number of allocated units across all 
plants equals , and also satisfies . Now, simply counting the number of 0-bits of 
each plant determines the fitness value of each chromosome. That is by counting the 
number of 0-bits of segment t, it can find the cost of allocating x
=
=
T
t
t Qx
1
Q 0≥tx
t products to the t-th plant. 
If  exceeds the capacity of plant t, then it must reallocate the amount of product until 
it satisfies . This method can enhance the performance of genetic algorithms in 
searching for good solutions. This encoding method can be shown by mathematical proof 
and numerical computation to be able to greatly reduce the cost of searching for good 
solutions in the later sections. 
tx
tt Cx ≤
 
Selection 
Each chromosome is assigned a fitness, which determines the probability of its 
survival in the following generation. A larger fitness value corresponds to a higher chance 
of survival. 
 
Crossover  
A crossover procedure must ensure that the chromosome does not violate the 
constraints after crossover. This new encoding method directly codes the constraint 
 into the chromosome, and ensures that ∑
=
=
T
t
t Qx
1
1−T  bits of value 1 and  bits of 
value 0 are always present in each chromosome. The method employs a two-point 
Q
 0  0  1  0  0  0  1  0  0  1  0  0..............................1 chromosome
1  ′chromosome 0  0  0  1  0  0  1  0  0  1  0  0..............................
block1 block3block2
block1 block3block2
mutation
 
Figure 4. Example of mutation 
 
4.3 Mathematical Certification 
This section presents a mathematical certification to elucidate how the new encoding 
method can reduce the search space of genetic algorithms more than the penalty encoding 
method can. The computational results are presented in the following section. The 
mathematical certification follows. 
Consider  plants. The quantity of products is . If the value of  is not large, 
such as less than 100, then the number of 0-bits can be used to indicate the quantity of 
products. But, when the value of  is large, we use the number of 0-bits to represent the 
percentage of the products’ quantity. The new encoding method uses  bits with 
value 1 and  bits with value 0 in the combination. The number of each group’s 0 bits 
must be a nonnegative integer. Therefore, the size of the solution space generated by the 
new encoding method is . 
T Q Q
Q
1−T
Q
1
1
−+
−
QT
TC
The penalty encoding method must use ⎡ ⎤Q log2  bits to represent the allocated 
units of each plant.  plants correspond to a length of the chromosome of . 
The size of the solution space generated by the penalty encoding method is  
T ⎡ ⎤TQ   log2
⎡ ⎤TQ  log22 .
 
Proposition 1:  ⎡ ⎤ +−+− ∈>≥< ZQT,Q,TC TQQTT   and 2 1for  2  log11 2
Proof: 
Basis Step. The Basis step is in this case obtained by setting 1=T . 
⎡ ⎤ ⎡ ⎤ ,22 is inequality  theof sideright   theand    
1 is inequality  theof sideleft    the
22 log1 log
0
11
11
Q
CC
QQ
QQ
≥=
==−+−Q  
So,  is true. ⎡ QQC 2log0 2< ⎤
Inductive Step. Assume that the statement is true for nT =  for .  1>n
That is, .  ⎡ ⎤ nQQnnC
 log1
1
22<−+−
Now, with , the left side of the inequality is  1+= nT
1
1
1)1(
1)1(  
)(
)!1( ! 
)!1( )(
! !
)!( −+
−
+−++
−+
+=−
−++=+== QnnQnnQnn Cn
Qn
nQn
QnQn
nQ
QnCC   
0
2
4
6
8
10
12
14
16
18
0 20 40 60 80 100
value of Q
log
(si
ze
 of
 se
arc
h s
pa
ce
)
new encoding method penalty encoding method
 
Figure 6. Graph of two search spaces (under the condition of .) 8=T
 
4.4 Comparison of New Encoding and Penalty Encoding 
In this section, we compare the variation in the size of search space between new 
encoding and penalty encoding. Fig. 7 exhibits the size difference of search space 
between these two encoding methods under the conditions of  and 
. When the difference of  and T  is small, as in the left side of this 
figure, we find that the variation of search space is about . In the right side of this 
figure that represents the difference between  and T  is relative larger, the divergence 
of search space is about . Hence, the new method can reduce the search space 
greatly in most conditions. So that  must be very larger than  is not necessary for 
our new method to get superior performance than the penalty method. 
100  to3=Q
20 ..., ,6 ,4 ,2=T Q
1010
Q
2010
Q T
1.E+00
1.E+03
1.E+06
1.E+09
1.E+12
1.E+15
1.E+18
1.E+21
1.E+24
1.E+27
1.E+30
1.E+33
1.E+36
1.E+39
1.E+42
1.E+45
0 20 40 60 80 100
value of Q
Di
ffe
ren
ce
 in
 si
ze
 of
 se
arc
h s
pa
ce
for
 ne
w 
en
co
din
g a
nd
 pe
na
lty
 en
co
din
g T=2
T=4
T=6
T=8
T=10
T=12
T=14
T=16
T=18
T=20
 
Figure 7. Comparison graph for the variation of search space 
 
We also compare the variation of the chromosome’s length between new encoding 
and penalty encoding. The results are given in table 1. The value of  is in the first Q
 
The algorithm was coded in C and run on an IBM compatible PC. The 
computational procedure performed ten trials of the test program for each of the five 
problems. The average generation number and time cost of ten trials was listed for each 
problem. The population size was 100, the crossover rate was 1 and the mutation rate was 
set to 0.1 per chromosome. The programs employ a two-point crossover, roulette-wheel 
selection and terminated when the same fitness value was obtained over 50000 
generations. The performance of the programs was judged by the number of evolutionary 
generations required to produce a sufficiently good solution. And the computation time 
was also supported to do the comparison. Better programs required fewer generations and 
less computation time. 
Table 3 compares the new encoding method, the penalty encoding method and 
integer programming for the test problems. The left half of Table 3 (a) shows the 
computational results for the new encoding method and the right half presents for the 
penalty encoding method. #8 means that the number of plants is eight, and so on. The 
“Generation” column specifies how many generations of the algorithms are needed to 
obtain a relative minimum cost for the test problems. The last three rows show the goal 
value of the problem, the generation and the time cost in which the goal is attained. Table 
3 (b) displays the results from using integer programming. According to the schema 
theorem and the building block hypothesis, smooth, unimodal problems, noisy 
multimodal problems and combinatorial optimization problems have all been 
successfully tackled using virtually the reproduction-crossover-mutation genetic 
algorithm [20]. The goal solutions can be thought of as sufficiently good solutions. 
 
Table 3. Computational results for test problems 
   (a) Results of evolutionary methods 
The new encoding method The penalty encoding method     
Cost 
Generation #8 #9 #10 #11 #12 #8 #9 #10 #11 #12 
1700 1058 1118 1192 1315 1472 1489 5044 6153 6685 7866 
2000  1102 1176 1284 1437 1488 1538 6040 6500 7781 
2500   1138 1258 1383 1444 1514 6038 6477 7669 
3500    1198 1324 1325 1218 5799 6313 7344 
4000     1262 1290 1208 5758 6280 7219 
10000      1058 1102 4241 4255 5079 
50000        1138 1198 1439 
65000          1262 
Goal 1058 1102 1138 1198 1262 1058 1102 1138 1198 1262 
Cov.Gen* 1700 2000 2400 3100 3900 6000 10000 45000 50000 65000
Time 
Cost 
(Unit:sec) 
14.5 19.6 26.6 38.4 51.5 31.2 75.0 391.5 490.0 715.0
* Cov.Gen is the simplified form of “Convergent Generation” 
(b)Penalty Encoding Method
0
1000
2000
3000
4000
5000
6000
7000
8000
9000
10000
100 600 1500 4000 6500 9000 30000 55000
Generation
Cost
#8
#9
#10
#11
#12
 
Figure 8. Trend line from Table 3 
 
6. Conclusions 
The generalized plant allocation problem is an NP-hard, combinatorial optimization 
problem suitable for solving by genetic algorithms. The general penalty encoding method 
may perform inefficiently when used to solve plant allocation problems. This study 
proposed a new encoding method that can not only greatly reduce the search space but 
also improve the performance of genetic algorithms. A new corresponding crossover and 
mutation operation enables the new method of encoding chromosomes to run correctly 
following standard genetic algorithm procedures. 
A mathematical justification is provided to show that the new encoding method 
really can reduce the search space of genetic algorithms and improves their performance. 
Comparing the experiment results of our new encoding method and the penalty encoding 
method have shown that reducing the search space can certainly improve the performance 
of genetic algorithms. Hence, solutions obtained by our new approach are always 
efficient. Future research will apply this efficient encoding method to other real world 
problems. 
 
Reference 
1. R.K. Ahuja, J. B. Orlin and A. Tiwari, “A greedy genetic algorithm for the quadratic 
assignment problem.” Computers and Operations Research, Vol.27, pp.917-934, 
2000. 
2. H. Al-Tabtabai and A.P. Alex, “An Evolutionary Approach to the Capital Budgeting 
of Construction Projects.” Cost Engineering, Vol.40, No.10, pp.28-34, 1998. 
3. R.E. Bellman and S.A. Dreyfus, Applied Dynamic Programming, Princeton 
University Press, Princeton, NJ, 1962 
4. G.H. Bitran and A.C. Hax, “Dissagregation and resource allocation using convex 
knapsack problems with bounded variables.” Management Science, 27, pp.431-441, 
1981. 
5. E.K. Burk and J.P. Newall, “A Multistage Evolutionary Algorithm for the Timetable 
Problem.” IEEE Transactions on Evolutionary Computation, Vol. 3, No.1, pp.64-74, 
1999. 
