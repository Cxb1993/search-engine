Contents
1 Design philosophy 1
1.1 Pipes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
1.2 Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2
1.3 Sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
2 Modules 5
2.1 Documentation . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.2 Logs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.3 Total station control . . . . . . . . . . . . . . . . . . . . . . . 7
2.4 Images . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
2.4.1 Shooting . . . . . . . . . . . . . . . . . . . . . . . . . . 11
2.4.2 Pointing . . . . . . . . . . . . . . . . . . . . . . . . . . 12
2.4.3 Camera calibration . . . . . . . . . . . . . . . . . . . . 14
2.4.4 Rectification . . . . . . . . . . . . . . . . . . . . . . . . 16
2.5 Modelling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
2.5.1 ve screen . . . . . . . . . . . . . . . . . . . . . . . . . . 17
2.5.2 ve canvas . . . . . . . . . . . . . . . . . . . . . . . . . 18
2.5.3 AutoCAD . . . . . . . . . . . . . . . . . . . . . . . . . 20
2.5.4 Shape fitting . . . . . . . . . . . . . . . . . . . . . . . 22
2.5.5 Point cloud, lines and triangle meshes manipulation . . 23
3 Implementation notes 26
3.1 Programming environment . . . . . . . . . . . . . . . . . . . . 26
3.2 Libraries and Programs . . . . . . . . . . . . . . . . . . . . . . 26
4 Dissemination 28
5 Conclusions 30
1
Dr P. Smars, NYUST 2
As can be seen, real-time control, parametric modelling and use of digital
photographs are complementary.
Dr P. Smars, NYUST 2
As modules and program are doing elementary operations, it is important
to facilitate their inter-communication to achieve complex tasks.
1.1 Pipes
Most programs developed are command line programs (often with options
making them more flexible) acting as filters. They read input data from the
’standard input’ and write the processed data to the ’standard output’. This
gives a lot of flexibility and allows the construction of complex ’pipelines’ of
filters.
computer% t r a n s l a t e 1 0 0 < t e s t . pt | r o t a t e 30 0 0 | \
s c a l e 1 1 10 > t e s t 2 . pt
This command line started from the computer shell translates a point
cloud, rotates it, scales it and save the result in a new file.
In our experience, (1) we usually apply transformations step by step,
checking intermediate results. (2) When we are satisfied with the process it
is reproduced using a (possibly long command). (3) Finally, the log file is
edited to only keep the most direct way to produced the desired result.
Note: this is very common practice on Unix-like computers but it also
works on MS Windows.
1.2 Files
Of course, final results are saved in files. But it is also necessary or desirable
to keep intermediate results. With the log files, intermediate files guaranty
the traceability of the results. The documentation process is documented!
Intermediate files can be used for themselves (look at the points measured
one day for instance) but also to re-assess the methodology and give the
possibly to restart the model construction process from a specific step.
This methodology requires that changes in a file are saved to another file.
Note on the type of file used
In the past, we have had bad experience with data from previous works
(produced with software which had disappeared) that could not be recovered
(or required considerable efforts).
All files produced by software tools of this project are plain text files
(with the exception of image files). In this way, the risk to loose access to
the data is minimised.
This is particularly important in the framework of Cultural Heritage Con-
servation where you are working with a long timeframe in mind.
Dr P. Smars, NYUST 4
• Point measurement
computer a% t c r . t c l computer b 9000
computer b% sc r een . t c l 9001 &
computer b% so c k e t i n 9000 | t e e po in t s . l og | \
s c r e en . t c l 9001
Points are measured using a total station linked to computer_a. The
data is send to computer_b where a copy of the data is saved in
geometry.log and sent to a screen server for visualisation.
In some circumstance, it can be useful to send data to more than one
destination. socket_fork.tcl was developed for that purpose.
s o c k e t f o r k . t c l :
s e r v e r used to l i n k one input source with two output
channe l s
syntax : s o c k e t f o r k . t c l [ h | help ] i nput por t output host1
output port1 output host2 output port2
input por t : port accept ing the data
output host1 output port1 : f i r s t d e s t i n a t i on o f
the data
output host2 output port2 : second de s t i n a t i on
o f the data
See an example of use of socket_fork.tcl in 2.5.3.
Dr P. Smars, NYUST 6
keep an eye on the automatic logging facility of the shell. This data is very
useful because often the set of options used
computer% monitor . t c l ˜/ . ba sh h i s t o ry >> \
commands 20080215 . l og &
Logging files is an extremely useful policy.
• They record the succession of operations necessary for the construction
of the model.
• They greatly facilitate changes. From the original files and knowing the
operations applied, it is possible to change one element in the pipeline
of operations and re-generate the dependent information automatically.
• If something goes wrong, they insure that no information and little
time is lost. This is particularly important because laptops are prone
to power failure and because tools under development may crash. This
precaution has already been very useful in the past.
• It is not an expensive policy. Log files are relatively small.
In our experience, it is useful to regularly create new files, copying lines of
commands from the log files and re-organising them in easy sequences of op-
erations (possibly adding some comments) necessary to achieve a particular
task.
A graphical Log window (log.tcl) module was also developed to receive
and record text information. Below, it will be explained how this module
can also be used to buffer data (2.5.3).
l og . t c l :
s e r v e r ready to log text in a window
( can a l s o be used as a bu f f e r )
syntax : l og . t c l [ h | help ] [ i nput por t ] [ command port ]
[ output host output port ]
i nput por t : port wai t ing f o r t ext ( d e f au l t : 9100)
command port : port wai t ing f o r commands ( bu f f e r
mode ; d e f au l t : not a c t i v e )
commands
send : send the data to the remote host
c l e a r : c l e a r the window
f l u s h : ’ send ’ + ’ c l ea r ’
e x i t : stop the s e r v e r
output host output port : d e s t i n a t i on o f the data
Dr P. Smars, NYUST 8
Figure 2.1: Measurements with a total station
Dr P. Smars, NYUST 10
Figure 2.2: tcr.tcl module in action with a screen.tcl window
Dr P. Smars, NYUST 12
Figure 2.3: Pointing with pixelpos
• To correct the radial distortion of images, camera.tcl uses unwarp and
the parameters of the Camera/lens combination (2.4.3)
• To edit the image, camera.tcl can open it in TheGimp [13], a powerful
image manipulation program.
• To pick points on the image, camera.tcl can open it in pixelpos
(2.4.2)
• camera.tcl can also take series of 5 or 20 photographs and average
them, possibly with different settings (to reduce noise and increase
dynamic range, which is useful when working in dark interiors)
2.4.2 Pointing
A module pixelpos (Figure 2.3) was developed to display an image and
precisely measure points on it. The strength of the module is its speed.
It is much faster to navigate in a large image, zoom up to the sub-pixel
level and adjust lightness and contrast than using usual image manipulation
programs. The module existed already but improvements were made in the
framework of this project (possibility to selects points previously defined on
Dr P. Smars, NYUST 14
Figure 2.4: Radial distortion of a lens. Use of radial to compute the dis-
tortion and of view li, pt2tri and cut tri to visualise it.
’ e ’ key : e r a s e s e l e c t e d po int
’x ’ key : export s e l e c t e d po int
’w’ key : wireframe mode
( po in t s are seen more c l e a r l y )
’ s ’ key : s o l i d mode ( the image i s seen )
’q ’ key : qu i t ( and wr i t e the ext rac t ed po in t s on
the standard output )
’1 ’ key : lower con t ra s t
’2 ’ key : h igher con t ra s t
’4 ’ key : lower luminos i ty
’5 ’ key : h igher luminos i ty
’0 ’ key : r e s e t con t ra s t and luminos i ty
2.4.3 Camera calibration
To use photographs for accurate measurements, it is important to know pre-
cisely its characteristics.
A new program radial was written to calculate the radial distortion in an
image produced by a camera/lens combination (Figure 2.4). It uses an image
Dr P. Smars, NYUST 16
to the standard output
syntax : p compute [−?|−h|−−help ] [−nl |−−non−l i n e a r ]
[− i f i l e |−− i n t e r n a l f i l e ] [−hg|−−homogeneous ]
[−sp|−−square−p i x e l s ] [−ns|−−no−skew ]
[−v|−−verbose |−q|−−qu i e t ] [− r |−− r a d i a l ] [−o code ]
< i n p u t f i l e > o u t p u t f i l e
i n p u t f i l e : po int correspondance 3D−2D
>u1 v1 x1 y1 z1
>u2 v2 x2 y2 z2
> . . .
>un vn xn yn zn
o u t p u t f i l e : r e s u l t depending o f the output code
( opt ion −o )
−o code : output type
code : p [P matrix (3 x4 matrix ) , d e f au l t ]
i [ i n t e r n a l o r i e n t a t i o n matrix
(3 x3 matrix ) ]
e [ e x t e rna l o r i e n t a t i o n matrix
(3 x4 matrix ) ]
− i f i l e : impose the i n t e r n a l o r i e n t a t i o n matrix
(3 x3 matrix )
−hg : homogeneous po in t s are entered :
u i v i wi x i y i z i t i
−nl : non−l i n e a r opt im i sa t i on
−sp : squared p i x e l s ( d e f au l t : r e c t angu l a r p i x e l s
a l lowed )
−ns : no skew ( d e f au l t : skew al lowed )
2.4.4 Rectification
Sometimes, elements of decoration are plane and photographs only need to
be deformed by a simple homography to represent the object on scale. Two
programs h_compute and h_remap were developed for that purpose. In that
case, the required input data is again a set of measurements of corresponding
points on the object and on the image. The process used for the calculation of
P (2.4.3) can be used but with some adaptations. The total station measures
points in 3D and the point correspondence needs to be between 2D points.
The process followed is therefore to measure the point in 3D, to fit a plane
to the point cloud (2.5.4), to project the 3D on the plane and to extract the
coordinates of the points in the plane.
Dr P. Smars, NYUST 18
Commands are used to draw elements [points, lines, polylines, triangle
meshes (with some limitations)], navigate the data, manage layers (create,
erase, change colour, thickness. . . ), export and import data (dxf, images)
Most of the code of this module was written in the framework of other
projects. Only the interaction with the window was improved.
A ve_screen is normally used when measurements are taken with the
total station to control
2.5.2 ve canvas
The module ve_screen can be used to visualise point clouds and triangle
meshes but some useful modelling operations are not possible with it. The
change in design which would have been necessary to accommodate new
desired features would have made ve_screen less interesting for its original
use. It was therefore decided to develop a new module: ve_canvas.
ve_canvas is not organised around layers like ve_screen but around
objects which can be put on the 3D window. In the present situation, objects
can be: (1) point clouds, (2) line ’clouds’, (3) triangle ’clouds’ (mesh) and
(4) system of axes. The module was nevertheless designed as to facilitate
integration of new type of objects.
To be visible, objects need to be placed on the canvas. In the following
example, a 3D window of type ve_canvas is created (c), an object of type
ve pointcloud is created (points), filled with points read from file test.pt and
put on the canvas for visualisation.
computer%t c l s h
t c l−s h e l l% load ˜/ l i b / ve canvas . so
t c l−s h e l l% ve canvas c
t c l−s h e l l% s e t po in t s [ v e po in t c l oud ]
t c l−s h e l l% $po int s name po in t s
t c l−s h e l l% $po int s open t e s t . pt
t c l−s h e l l% c ob j e c t add $po int s
Objects and view are manipulated independently.
Objects can be placed, translated, oriented, rotated, scaled, and fit. It is
also possible to change their colour or to project an image on them
View can be specified through specification of focal point, camera point,
azimuth, elevation. . . Images (of required resolution can be exported).
Dr P. Smars, NYUST 20
2.5.3 AutoCAD
In the framework of the present project, we tested the ve_screen module
for the documentation of a traditional house. This experience was very in-
teresting because it helped us identifying a few problems.
1. In our past experience, the module was mainly used inside or in the
shade. Outside, the sun is too bright to allow effective working with a
computer. That problem was anticipated and the purchase of a special
laptop computer was part of the research proposal. Unfortunately, no
budget was allocated for equipment! Other solutions had to be found.
We experimented with a big umbrella and with a screen shade but
without great success or ease.
2. The heat of the sun on a computer outside is also a problem (solved
with an umbrella).
3. In the past (at the occasion of field works of documentation), the num-
ber of software tools available for modelling was more limited and the
model under construction were usually more complex. The ve_screen
module was therefore mainly used to help collecting and controlling
data. In the case of the traditional house, the situation was different:
the model was quite simple (mainly lines) and it was therefore very
desirable to edit the model directly. Our software nevertheless lacked
many of the tools available in a common CAD software like AutoCAD.
In response to problem 1, it was decided to install a laptop computer
inside the house, on a table. The condition was therefore much improved
allowing to work much more effectively.
In response to problem 3, it was decided not to reinvent the wheel (. . . ).
A new module acad.tcl was developed to act as a server waiting for com-
mands to be sent to AutoCAD, From the Measuring module tcr.tcl, this
new module looks exactly like a ve_screen module but points and lines are
directly sent to AutoCAD. Outside, another computer is used to run the mea-
suring module tcr.tcl controlling the total station (a cheap eee-pc, Figure
2.1). The two computers are in a network (cables were used but in other
circumstances, it could be more efficient to use wireless connections).
If two computers are used, two operators are needed: one working with
AutoCAD and the other with the total total station. This is a good news
because measurements and drafting can be made at the same moment. But
this is also the source of a new problem: priority of access. AutoCAD only
accepts one command at a time. First experiments lead to frequent collisions.
In practice, it was not possible to work concurrently. It was aggravated by
Dr P. Smars, NYUST 22
Figure 2.6: Circle fitting: the original point cloud is in red (the bad fit was
produced by least square and the good one using RANSAC)
2.5.4 Shape fitting
A set of new programs was developed to fit specific shapes to a point cloud:
fit_line, fit_plane, fit_circle, fit_sphere and fit_quadric.
fit_quadric is not yet perfectly functional.
The optimisation uses a Levenberg-Marquardt algorithm robustified by
the RANSAC [14] algorithm.
For shapes with more parameters, the situation is more complex. In op-
timisation problems, it is important to start from a good estimate. The
ve_canvas module can be used to provide one, prepositioning a model close
to the point cloud that it is supposed to fit. The model can be scaled (3 differ-
ent factors), translated and rotated interactively. The matrix describing the
transformation can then be used as a first estimate for a better fitting. The
ve_canvas module was developed specifically with that purpose in mind.
The program to improve the fit is still under development.
Dr P. Smars, NYUST 24
In the framework of this projects, changes were made to uniformise the
way they handle options and to ensure that they all can return help no-
tices. Some bugs were eliminated and small changes made to make the pro-
grams also compile on Linux (they were developed under Windows and now
FreeBSD).
The three programs used for visualisation saw a major revision (view_pt,
view_li and view_tri). More options were added.
• Possibility to show points and triangle mesh together (in view_pt and
view_li). This is very useful to see how well a mesh is fitting a point
cloud.
• Possibility to project images on a mesh (in the past, the process was
much more labour intensive)
• Possibility to choose a high resolution setting for the export of snap
shots of the model. This is useful for the production of orthomaps.
• Possibility to colour points using a custom scalar file. This can be used
to visualise the distance between a model and a point cloud.
• Possibility to erase triangles interactively with view_tri.
• New ways to interact with the model
• Possibility to see a smoother triangle mesh
A new program tridist was developed to calculate the distance between
a triangle mesh and the points of a point cloud (to be used with view_pt).
The program cut_tri can now produce sets of iso-lines (before it pro-
duced only triangle meshes)
computer% c u t t r i − l −n 40 −d 4 0 0 15 1 0 15 0 1 15 \
< a . t r i | v i ew l i −t a . t r i − i a . jpg \
−c a . cam −s −m 4
In this example, cut_tri is used with view_li to produce contour lines of a
vault model (Figure 2.8) (every 10 cm between 15m and 18m) and view those
lines supperposed with the model of the vault textured with a photograph.
The programs resample_tri, smooth_tri, project also received new
options.
Chapter 3
Implementation notes
3.1 Programming environment
Languages. The software was written in C++ (most of the programs), C
(2 programs), Tcl (12 programs) and bash (about 10 scripts).
The programs were mainly developed under FreeBSD (from 6.0 to 7.1,
32bit and 64bit). They were also tested under Linux (Debian etch and Debian
Lenny). The modules tcr.tcl was mainly used under MS Windows.
As far as possible, we tried to develop our program in a OS indepen-
dent way (exceptions: socket_in, socket_out). Most of the .tcl programs
should also run under MS Windows. camera.tcl uses the Gphoto software
[12] which only run under on UNIX-like OS (but is is possible to use it with
Cygwin, a Linux-like environment for Windows [15]) Most programs C++
programs should also compile on MS Windows (but we didn’t test it). The
bash scripts would also require Cygwin to work under Windows.
A CVS (concurrent version system) server was set-up to keep track of
the change in the software. It also facilitated the testing of the software on
various computers.
3.2 Libraries and Programs
The main libraries used to develop our programs are VTK [16] and VxL [17]
VTK : “The Visualization ToolKit (VTK) is an open source, freely avail-
able software system for 3D computer graphics, image processing, and visu-
alization used by thousands of researchers and developers around the world.
VTK consists of a C++ class library, and several interpreted interface layers
including Tcl/Tk, Java, and Python.”
26
Chapter 4
Dissemination
• Since the beginning of the project, documents are presenting the project
on the web site of the author.
http://smars.yuntech.edu.tw/projects/survey/ (800 page requests
from 150 visitors)
• On October 25, 2008, intermediate results of the projects were pre-
sented at the “International conference on the Conservation Science
and Reuse of Culture Properties”, held in Chung-Yuan Christian Uni-
versity: Pierre Smars, “Improving the dialogue with our architectural
heritage; hybrid documentation techniques for in-situ conservation”
• Tools developed in the framework of this project were used for a work
of collaboration with a Belgian University (KULeuven). Results of this
collaboration and of our experience with new surveying tools are going
to be presented and published soon: Pierre Smars, Krista De Jonge,
“Geometry and Construction Techniques of Gothic Vaults in Brabant
(Belgium)”, 3rd International Congress on Construction History, to be
held from May 20-24, 2009 at the Brandenburg University of Technol-
ogy (BTU) in Cottbus, Germany
• Our tools were also used in the framework of a research work for Yun-
Lin county government, on the Documentation of Lai-Hui village (Yun-
Lin County). In collaboration with Professor Chen I-Chun (also from
the Dept & Grad. School of Cultural Heritage Conservation at Yun-
tech).
• The 22nd CIPA (International Committee for Documentation of Cul-
tural Heritage) Symposium will be held in Kyoto (Japan). This is the
most important event related to Documentation of Cultural Heritage.
28
Chapter 5
Conclusions
All surveying tools developed in the framework of this project work did not
reach the same level of development.
• The total station control modules are working flawlessly and are ex-
tremely useful.
• The AutoCAD control module is very efficient.
• The communication modules were very useful to send data collected in
the sun to a computer in the shadow. The buffer worked well with Au-
toCAD and the possibility it offers to redirect measurements to various
modelling software is promising.
• The camera control module is working well but the cable connection
is annoying, it should be longer or wireless. USB cables cannot be too
long and so another solution has to be found.
• The radial distortion program is working well but on images which
are taken at relatively short distance. It does not provide parameters
directly useful for measurement of architectural objects. A simple pro-
cess should be found to calibrate accurately the camera from images of
large objects p_compute can also provide radial distortion parameters
but in practice, too many points need to be measured to get repeatable
results.
• With the new software, it is now easy to project images on triangle
meshes and to produce good orthomaps.
• The programs which certainly need further developments are the mod-
elling programs. Fitting simple shapes is working well but the real
30
Bibliography
[1] S.F. El Hakim, J.-A. Beraldin, M. Picard, and A. Vettore. Effective
3D modeling of heritage sites. In 4th international conference 3D digital
imaging and modeling, pages 302–309, Banff (Canada), October 6-10
2003.
[2] A. Wiedermann, J. More´, and Ru¨diger Tauch. Archimedes3D - an
integrated system for the generation of architectural orthoimages. In
New perspectives to save cultural heritage, CIPA 2003 19th International
Symposium, Antalya (Turkey), 30 September – 04 October, 2003.
[3] Ch. Ioannidis, N. Demir, S. Soile, and M. Tsakiri. Combination of laser
scanner data and simple photogrammetric procedures for surface recon-
struction of monuments. In CIPA 2005 20th International Symposium,
Torino (Italy), 26 September – 01 October, 2005.
[4] P. Ortiz, H. Sa´nchez, H. Pires, and J.A. Pe´rez. Experiences about fu-
sioning 3D digitalization techniques for cultural heritage documentation.
In ISPRS, Commission V Symposium, Image Engineering and Vision
Metrology, Dresden (Germany), 25-27 September 2006.
[5] P. Smars and D. D’Ayala. Parametric shape model for conservation
oriented surveying. In World Heritage in the Digital Age, Heritage
Management Mapping: GIS and Multimedia, Alexandria (Egypt), 21-
23 October, 2002.
[6] P. Smars, K. Van Balen, and K. Nuyts. Layered Geometric Information
System. In 18th International Symposium CIPA 2001 (Surveying and
Documentation of Historic Buildings - Monuments - Sites Traditional
and Modern Methods), Potsdam (D), September 18- 21, pages 462–68,
2001.
[7] K. Nuyts, J.-P. Kruth, B. Lauwers, H. Neuckermans, M. Pollefeys,
L. Qiongyan, J. Schouteden, P. Smars, K. Van Balen, L. Van Gool,
32
Dr P. Smars, NYUST 34
[20] SWIG, Simplified Wrapper and Interface Generator, 2007.
http://www.swig.org/.
