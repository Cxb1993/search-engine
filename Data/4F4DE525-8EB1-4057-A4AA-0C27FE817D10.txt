different network attack scenarios to test the safety 
of network virtualization. Due to spamming is not 
only the largest network bandwidth consumption, but 
also an important way to spread malicious software； 
The first year of this project also design and build 
a spam filtering mechanism, with Honeypot, Packet 
Analyzer and Confirmer to detect and analysis e-mail 
transmission packet. In the second year, we improve 
the NIDS by increasing the resources utilization and 
performance of pattern matching. And integration with 
the sub-project four in the second year, providing 
the suspicious bot list which are detected by the 
NIDS and SpamFinder to the sub-projects four’s 
database, they can using those list as the basis of 
flow redirection. 
Compared with software-based NIDS, NetFPGA NIDS take 
advantage on the speed of detect and analysis, it can 
be close to line speed almost without causing delay. 
In the other hand, c compared with hardware-based 
NIDS, the convenience of updating the rules is 
obvious leading. And SpamFinder provides a detection 
mechanism to discover the infected spamming bot. 
Avoid the wastage of bandwidth, and the spread of 
malware. 
 
英文關鍵詞： network security, virtual network, network 
virtualization, NetFPGA, network intrusion detection 
system, Email spam 
 
 I 
 
第 1 章 緒論................................................................................................................................................ 1 
1.1 前言..................................................................................................................................................... 1 
1.2 研究目的............................................................................................................................................. 1 
1.3 章節架構............................................................................................................................................. 2 
第 2 章 文獻探討........................................................................................................................................ 3 
2.1 NetFPGA.............................................................................................................................................. 3 
2.1.1 NetFPGA 基本介紹.................................................................................................................. 3 
2.1.2 Generic Register 模組............................................................................................................... 4 
2.2 OpenFlow 專案與 NOX Controller 專案 ........................................................................................... 5 
2.2.1 Ethane 基本介紹 ...................................................................................................................... 5 
2.2.2 OpenFlow .................................................................................................................................. 5 
2.2.3 NOX Controller ........................................................................................................................ 6 
2.3 Email 架構 ........................................................................................................................................... 6 
2.3.1 SMTP ........................................................................................................................................ 7 
2.3.2 POP3 ......................................................................................................................................... 7 
2.3.3 IMAP......................................................................................................................................... 7 
第 3 章 於 NetFPGA 上之整合性安全測試研究...................................................................................... 8 
3.1 第一期結果及改進方向..................................................................................................................... 8 
3.2 第二期結果......................................................................................................................................... 8 
3.3 系統實作............................................................................................................................................. 9 
3.3.1 系統架構.................................................................................................................................. 9 
3.4 研究方法............................................................................................................................................. 9 
3.4.1 網路惡意封包偵測[14] ......................................................................................................... 10 
3.4.1.1 系統架構.............................................................................................................................. 10 
3.4.2 透過分析郵件封包偵測 botnet[15] ...................................................................................... 11 
3.4.2.1 系統架構.............................................................................................................................. 12 
3.4.2.2 實作..................................................................................................................................... 13 
3.5 實驗與討論....................................................................................................................................... 14 
3.5.1 實驗一：PNSA 演算法資源使用率 ..................................................................................... 14 
3.5.2 實驗二：以 NetFPGA 實作 PNSA 演算法之吞吐量測試 ................................................. 15 
3.5.3 實驗三：正常流量過濾器之誤報率測試............................................................................ 18 
3.5.4 實驗四：SpamFinder 效能測試 .......................................................................................... 20 
3.5.5 實驗五：SpamFinder 有效性測試 ...................................................................................... 21 
3.5.6 實驗六：子計畫五整合實驗................................................................................................ 22 
第 4 章 結論.............................................................................................................................................. 25 
參考文獻.......................................................................................................................................................... 26 
國科會補助專題研究計畫成果報告自評表.................................................................................................. 27 
國科會補助計畫衍生研發成果推廣資料表.............................................................................................................. 28 
 
 III 
 
Abstract 
With the rapid development of network technology, there are many convenient online service burgeon 
and changing people's daily lives. Storing personal data, internet transactions and other services has become 
an integral part of our life. Those personal data and the profits attracted attackers’ focus. Therefore, network 
security issues have become increasingly prominent on the internet technology. 
This project is a two-year program plan. In the first year, using the decision tree to handle the Snort 
header rules, and establish a network intrusion detection system (NIDS), which performs pattern matching. 
The NIDS was implemented on the NetFPGA network development platform, utilizing OpenFlow project to 
construct network virtualization. Based on different network attack scenarios to test the safety of network 
virtualization. Due to spamming is not only the largest network bandwidth consumption, but also an 
important way to spread malicious software; The first year of this project also design and build a spam 
filtering mechanism, with Honeypot, Packet Analyzer and Confirmer to detect and analysis e-mail 
transmission packet. In the second year, we improve the NIDS by increasing the resources utilization and 
performance of pattern matching. And integration with the sub-project four in the second year, providing the 
suspicious bot list which are detected by the NIDS and SpamFinder to the sub-projects four’s database, they 
can using those list as the basis of flow redirection. 
Compared with software-based NIDS, NetFPGA NIDS take advantage on the speed of detect and 
analysis, it can be close to line speed almost without causing delay. In the other hand, c compared with 
hardware-based NIDS, the convenience of updating the rules is obvious leading. And SpamFinder provides a 
detection mechanism to discover the infected spamming bot. Avoid the wastage of bandwidth, and the 
spread of malware. 
 
Keyword: network security, virtual network, network virtualization, NetFPGA, network intrusion detection 
system, Email spam 
 
 2 
 
而在網路型入侵偵測系統方面，以軟體實作之 NIDS 在封包酬載比對時，因受限於軟體比對之效
率不佳，往往成為網路吞吐量之瓶頸，文獻[25]分析了 Snort 在封包比對的每個步驟所佔的時間百分
比，其中的酬載分析的部分主要占了百分之五十一的時間，其效能只能達到網路流量在 60 Mbps 左
右，當比對效能開始跟不上網路流量速度時，就會開始進行放棄封包，酬載比對成為軟體實作之 NIDS 
之比對瓶頸，任何惡意的攻擊者就可以利用此缺陷來躲避封包的比對。然而依據 TWNIC 在 2010 年
4 月網路頻寬調查中[13]，國內有 80 個單位（營利、非營利、資料交換中心）中有 75 單位的網路
頻寬使用已達到或者超過 Gbps 以上，為能夠符合目前及日後的網路環境。 
因此目前，我們將針對網路型入侵偵測系統之封包酬載比對及 botnet 偵測及史丹佛大學所開發
的 OpenFlow Switch，透過採用 NetFPGA 在工作網路上建構一個虛擬網路，提供一個高速且有效的
平台去偵測這些攻擊。 
1.3 章節架構 
 本報告章節規劃如下所述：第二章探討本計畫所涉及之相關背景知識與研究；第三章先介紹本計
畫第一期之結果及改進方向，並詳細解說其系統實作與實驗討論；最後於第六章總結上述章節，予以
一結論並探討其未來之後續發展。 
  
 4 
 
佇列，而傳送佇列和接收佇列相同有分為四個 MAC 佇列和 CPU 佇列因此傳送封包可分為由使用者
定義電路送出或者使用應用程式送出封包。此硬體架構主要做為使用者在定義自訂的模組時主要使用
的架構，模組間主要採 FIFO 的方式控制封包收送。 
 
圖 2 管線化架構 
（資料來源 [1]） 
2.1.2 Generic Register 模組 
NetFPGA 內的模組除了上個小節敘述的模組間溝通外，亦可進行模組與軟體間的暫存器存取，
Generic Register 模組做為模組間管線化處理實資料通訊的介面加速暫存器中數值的更新，此模組將
NetFPGA 中每個模組串起來，在 user_data_path.v 中可發現從 Input Arbiter 到 Output Queues 中每個
模組皆必須引入此模組做為資料通訊介面，並且提供軟體透過經由 PCI 介面的驅動程式存取
NetFPGA 內任何暫存器，因此 NetFPGA 中每個模組必須引入此模組才能將與軟體相互配合。 
 
圖 3 Generic Register 模組 
（資料來源 [23]） 
 6 
 
 
圖 5 理想化的 OpenFlow Switch 架構 
（資料來源 [3]） 
 
一個 OpenFlow Switch 包含三個主要部份： 
 Flow Table：針對每一個 flow entry 去定義行為（action），來告知 switch如何處理每一個 flow。 
 Secure Channel：連結 switch 和遠端的 controller，可以用來下達命令或是傳送封包。 
 OpenFlow Protocol：提供一個標準的方式讓 controller 和 switch 互相作溝通。 
在 Flow Table 之中，每一個 entry 有三個區域： 
 Packet Header：定義了每一個 flow。 
 Action：定義如何對每一個 flow 做的動作。 
 Statistics：對於每一個 flow 去計算有多少 bytes 和 packets 符合，且當中的 time 是計算從最
後一次有符合此 flow 的目前的時間差距，可以幫助移除無用的 flow。 
2.2.3 NOX Controller 
NOX Controller[4]為 OpenFlow 開發小組所建議使用的 OpenFlow 設備之控制端，透過 C/C++或
Python 程式語言撰寫網路設備軟體控制平台。NOX Controller 提供高階 API[5]，當 OpenFlow Switch
面對未知流量時，決定該流量的對應處理方式，並下達如在 flow table 新增規則，或刪除某些特定規
則的指令。目前 NOX Controller 可利用 Command-Line Interface 界面執行之外，亦額外開發了一套圖
型化介面[6]提供使用，降低操作上的門檻 
2.3 Email 架構 
電子郵件是一個在網路上熱門的應用程式。早期的電子郵件提供了兩台主機之間，一台主機發送
電子郵件，和其他接收電子郵件。但在網路普及率在整個非洲大陸乃至全球地區，電子郵件無法保證
交付給對方的時間。因此，有了“郵局”的概念的。 
電郵架構主要由兩部分組成。他們被稱為的 MUA（郵件用戶代理）和 MTA（郵件傳輸代理）。
當用戶要發送電子郵件，他應該打開 MUA 程序來編輯內容的電子郵件，那麼電子郵件將被發送使用
MTA 的計劃。電子郵件發送到對方也收到的 MTA 程序和用戶閱讀電子郵件使用的MUA 程序。MUA 
和 MTA 可以分開運行。但是，為使用方便，大多電子郵件軟件都含有 MUA 及 MTA。 
 8 
 
第3章 於 NetFPGA 上之整合性安全測試研究 
由於垃圾郵件（Spam）不僅是網路上最大的頻寬消耗者，更是惡意程式傳播的重要途徑；本計
畫首先針對垃圾郵件建立過濾機制。另外由於網路封包的流動量非常巨大，必須借助 NetFPGA 的高
速運算能力才能確保封包的流暢，故本計畫以子計畫四的 OpenFlow Switch 為控制中樞，定期分析垃
圾郵件來源，並回報子四惡意 IP 以便重導惡意流量、回收被垃圾郵件所佔用的頻寬。 
對於垃圾郵件的處理，主要可以分為兩個部份：過濾和分析。首先，過濾指的是由眾多的封包之
中，偵測出是否有電腦大量寄送郵件卻鮮少收件，同時，若此電腦又非郵件伺服器，則我們判定此電
腦可能已受到控制、成為殭屍網路（Botnet）的一員。為避免此電腦繼續攻擊他人，此 IP 將會傳送給
子四的 OpenFlow Switch 進行重導分析的動作。換句話說，所有之後由此台電腦送出的封包，將會被
導向子五所設置的 Sebek HoneyPot 進行分析。事實上，許多研究顯示，攻擊者為拓展自己的領土，
通常會經由受控制的 bot 發起新型攻擊；因此，藉由紀錄、分析這些成為 bot 的電腦所發出的封包，
便可得知該殭屍網路的控制方式及影響力，同時得以在最短的時間內修補最新的漏洞。 
此外隨著電腦與網路科技的進步，網路使用頻寬逐漸達到 Gbps 的水平[13]，且基於軟體方式實
作之網路型入侵偵測系統（NIDS）比對特徵之效能有限，因此以 FPGA 的開發平台實作 NIDS 的特
徵比對效能，讓比對效能可以因應網路使用的需求提供完整的保護。 
本計畫將針對第一年度的實作結果加以改進，以期能提供計畫整合更高的安全性。故此本計畫第
二年度著眼於改進先前 NIDS 不足之處，並進行惡意流量偵測實驗進行比較。 
3.1 第一期結果及改進方向 
第一年在 NetFPGA 平台實作 NIDS，主要以決策樹（Decision Tree）處理 Snort 規則標頭，並透
過多個平行的 NFA 比對模組進行特徵字串的比對。以 FPGA 晶片上 Configurable Logic Block（CLB）
之資源成功完成 1202 條 Snort 特徵規則的儲存，並讓比對速度達 Gbps 的比對效能。透過 NetFPGA
具有 4 個實體埠，實作出來的 NIDS 可以將惡意封包轉向到指定的輸出埠，使得關鍵的惡意封包無法
到達目的主機。 
第一年實作結果中發現以下改進的方向： 
 以決策樹處理 Snort 規則標頭及 NFA 進行特徵字串的比對的作法，在運作上主要消耗 FPGA
晶片上 CLB 資源，當規則數到 1202 時資源消耗率達 92%，然而晶片上之 Block RAMs 卻仍
有 50%的儲存資源尚未使用。 
 1202 條規則僅佔 Snort 2861 版中約 25%的規則，若以 NetFPGA 平台實作一具有完整特徵規
則集的 NIDS 有難度。因此必須要改進 FPGA 晶片上資源使用方式，在現有單一 FPGA 晶片
上盡量的儲存更多的規則。 
 
垃圾郵件之分析偵測則以 SpamFinder，將進行垃圾郵件之 Bot 于以鑑別，利用 Honeypot 收集
資訊，透過封包分析元件找出可以的信件寄送封包，交由 Confirmation Host 進行確認其身份為 Mail 
Server 或一般主機，並透過 Credit Number 機制作為判斷門檻，利用 SpamFinder 於實驗中得到僅增
加 4%的效能開銷，可以減少 25%的 e-mail 流量並且平均封包丟棄比例為 0.31。得以在不影響正常
郵件收發下，減低垃圾郵件的散布，並對可疑對象提交于 OpenFlow Controller 進行額外的控管。 
3.2 第二期結果 
針對前述第一期的改進方向，第二期子計畫五提出結合 FPGA 及軟體共同防護的系統架構，當規
 10 
 
3.4.1 網路惡意封包偵測[14] 
本研究以史丹佛大學與 Xilinx 合作開發的 NetFPGA 平台設計網路惡意封包偵測器以達到快速
比對效果，雖然在 FPGA 上設計之 IC 具有快速、平行比對、與快速雛型化之特性，但該平台所能使
用的資源有限，而特徵資料庫需要不斷的更新以達到比對成效，故本研究以決策樹檢測封包之標頭節
省電路資源消耗，再依標頭比對之架構建置多字串比對群組來進行封包酬載之比對，並且在每個字串
群組以布隆過濾器濾掉沒有惡意嫌疑的酬載內容，並以結合 NFA 及 AC 的演算法降低布隆過濾器實
施決策樹-NFA 演算法之資源使用率，本研究經由實驗證明此設計的確可以較少的資源利用達到快速
且有效之比對結果。 
3.4.1.1 系統架構 
 系統架構由高比對效能 IDS 搭配上正常流量過濾器，分別偵測惡意封包及正常封包，再將有嫌
疑的封包轉交軟體 IDS 進行多重內容規則的比對，如下圖 7 所示。 
 
圖 7 網路惡意封包偵測系統架構 
（資料來源 [14]） 
高比對效能 IDS 之架構基於原有 NetFPGA 硬體架構，修改 Output Port Lookup 模組，利用 CLB
存放短字串及長字串的字首，使用 NFA 演算法進行比對。由 Block RAMs 存放長字串的字尾，以 AC
演算法進行字尾的比對。將修改後之模組輸入埠接上 Input Arbiter 的輸出埠，修改後之模組輸出埠接
上 Output Queues 模組之輸入埠，如圖 8 所示。 
 12 
 
收信的主機。並對它們做進一步的檢查，以過濾掉電子郵件伺服器，如此可以準確地辨認出發送垃圾
郵件的 bot。最後 SpamFinder 禁止傳播垃圾郵件，藉由阻斷這些發送垃圾郵件 bot 的電子郵件相關
網路流量，來節省網路頻寬的浪費。我們己在 Linux router 上實作出 SpamFinder 而且實驗結果顯示
SpamFinder 沒有誤判且在最差的情況下只有 4％ 的效能開銷。 
3.4.2.1 系統架構 
 
圖 10 SpamFinder 系統示意圖 
SpamFinder 有兩個最主要的要件所組成，第一個就是 packet analyzer，第二個就是 confirmer，
packet analyzer：主要的工作就監控從 router 經過的封包，分析其是否為一個電子郵件的封包，只要
是電子郵件相關封包，會記錄其來源 IP 位址，並統計其收送郵件的比例，當我們認定他是可疑 IP 位
置，會傳送給 confirmer 去做進一步的確認其是否為一般主機，還是一個 Mail Server。 
 Packet Analyzer：在上一節中，我們所提到的電子郵件相關協定。這些協定，我們歸類到兩大類。
一種是發送郵件協定，的 SMTP、SMTPS、ESMTP，另一種是接收郵件的協定，的 POP3、POP3S 
和 IMAP、IMAPS。我們透過 SpamFinder 這台 router 去計算每個主機的接收送封包比例，使我
們可以找到哪些主機是有 spam bot 的行為。但也有一些主機或用戶，只是一般的使用者收送郵，
並沒有 spam bot 的行為。為了解決這個問題，我們回給予每個 IP 一個 Credit Number。 
 IP Threat Level Table：IP Threat Level Table（IPTLT）是 SpamFinder 最重要的資料結構，由於
SpamFinder 是在 router 上實作，需要要記錄大量的 IP 位置，因此這邊使用雜湊函數去實作
IPTLT，下圖所示，IPTLT 會紀錄 IP address 的 credit number 及 action flag，當 netfilter 收到是一
個傳送郵件的封包，Packet Analyzer 會根據 IPTLT 對這個封包產生對應的動作，如果是一個接
收的郵件封包，會在其對應的 IP 位址的 credit number 減的動作，IPTLT 會定期的更新。 
 Credit Number：Credit Number 是表示一個可疑的 IP 位址其收送郵件的一個判定值，當
SpamFinder 捕捉到郵件相關封包時，如果是他一個發送郵件的封包，其封包的 Source address 的
CreditNumber 會加某個值，反之如果是接收郵件的封包，其目的端的位址的 Credit Number 會減
某個值，而根據我們測試得結果，一般正常收送郵件封包的比例大約是 3：1。封包傳送的方向
不同是會被歸類在不通類別，當是一個傳送的郵件封包，這個封包傳到 SMTP 伺服器作傳送，
因此我們感興趣的是傳送者的來源端 IP 位址，而當是一個接收的郵件封包，這個封包會透過
POP3 或 IMAP 伺服器傳給接收的主機，此時我們感興趣的是這個封包的目的地位址。 
 Filter Action：Confirmer 將可疑的 IP 位址確認為是不是一個SMTP 伺服器的結果傳回給 IPTLT，
此時 packet analyzer 會去決定屬於這個 IP 相關的郵件封包的動作，假設這個 IP 是 SMTP 伺服
器，packet analyzer 會接受跟這個 IP 網路流量，反之如果是個 Spam bot，則進行丟棄的動作。 
 14 
 
3.5 實驗與討論 
3.5.1 實驗一：PNSA 演算法資源使用率 
a. 實驗目的：將 PNSA 演算法實作於 NetFPGA 上資源消耗的程度 
b. 實驗步驟：以 Snort 版本 2861 之規則集，取單一內容規則 2451 條作為實作的規則集，並與第一
年所使用的決策樹-NFA 演算法進行比較。評估方式以總規則數、總字元數、消耗資源數及儲存
單一字元所消耗的資源數。因為同時使用到 CLB 及 BRAMs 資源因此採用 Sourids[18] 的 Area 
Cost 計算，公式如下： 
12
Membytes
LogicCells
AreaCost
Character

  
  
 16 
 
規則欄位名稱 規則定義值 實際封包內容值 
Ruleset specific-threats.rules None 
Protocol TCP 06 
Source IP $EXTERNAL_NET 112.140.80.17 
（Random IP） 
Source Port 110 110 
Destination IP $HOME_NET 140.115.82.50 
Destination Port Any 60481（Random） 
Content <SCRIPT>|0D 
0A|alert|28 22| 
|3c53 4352 4950 543e 
0d0a 616c 6572 7428 22| 
Length 17 None 
 
壓力測試架構如圖 14 所示。使用 SmartBits 600B 依序產生 64、128、256、512、1024、1280 及
1518 bytes 的訊框，不同大小的訊框持續播送 60 秒做為一次的測試時間，並監看封包通過率。 
 
圖 14 壓力測試架構圖 
（資料來源 [14]） 
封包種類分別以三種類型進行測試： 
 正常封包的比對：封包內容不含任何惡意字串，封包酬載部份以亂數產生 
 惡意封包的比對：封包內容具有一個長度小於等於 5 的惡意字串，這類型的短字串只需使用
NFA 進行比對 
 惡意封包的比對：封包內容具有一個長度大於 5 的惡意字串，這類型的字串必須經過 Prefix 
NFA 及 Suffix AC 的比對（PNSA） 
 
 18 
 
3.5.3 實驗三：正常流量過濾器之誤報率測試 
a. 實驗目的：驗證正常流量過濾器是否具備正確過濾封包的能力及封包誤報的狀況 
b. 實驗方法：比對功能之驗證測試依序進行下列流程 
1. 錄製封包：由實驗室錄製約 35,000 個封包 
2. 產生正常封包：除去網路封包內的嫌疑封包 
3. 產生測試資料：由 5 個經 ModelSim 驗證過的特徵規則，分別產生 10 個嫌疑封包共 50 個人
工產生的嫌疑封包，如下表所示 
嫌疑
封包 
Protocol Src IP Dst IP Src port Dst port Contents 
（每個封包內有兩個特徵字串） 
1 TCP External net Home net 80 Any <resource> 
|3B 26 23|8204|3B 26 23|8204 
2 TCP Home net External net 666 Any DIMBUS 
DIMBUS 
3 TCP External net Home net 2600 Any |0D 0A|Current 
/NFO, Registered 
4 TCP External net Home net 80 Any |00 00| 
|04 01 BF 00 08 00 08 00 81 01 
09 00 00 08 83 01| 
5 TCP External net Home net 80 Any Microsoft Interactive Training 
.RMF 
4. 驗證功能：輸入到正常流量過濾器中，觀看漏報率 
誤報率測試進行下列流程 
1. 錄製封包：由實驗室錄製 6/27 至 6/29 不同時間之測試集，每個測試集錄製 2.5 個小時 
2. 誤報率觀測：將測試集輸入到正常流量過濾器中，觀看誤報率 
c. 測試架構：比對功能之驗證測試如下圖 16 所示，將測試資料以 Tcpreplay 工具播送至正常流量過
濾器，由正常流量過濾器將嫌疑封包由 nf2c3 輸出並以 Wireshark 進行監看，共測試 10 次。 
 
圖 16 比對功能之驗證測試架構 
（資料來源 [14]） 
 20 
 
而誤報率實驗結果顯示，在面對 TCP 封包時會產生較高的誤報率，推測是由於 Snort 規則中，
TCP 規則數量佔了 89%可能是導致 TCP 封包誤報率較 UDP 封包誤報率高的原因。 
 
圖 18 誤報率測試結果 
（資料來源 [14]） 
3.5.4 實驗四：SpamFinder 效能測試 
在這實驗中，我們使用了三台電腦，包括終端使用著者（e-mail client）router（SpamFinder ），
SMTP 伺服器，測試情境是由終端使用者發送電子郵件會使用 SMTP 伺服器，但中間一定會經過
SpamFinder ，如下圖。整個環境架設好之後，我們分三種不同的情況去測試，每此發送 10000 封郵
件封包，並分成四種不同的封包大小，分別是 3.3KB、33KB、330KB、3300KB，而根據賽門鐵克的
分析[19]，平均垃圾郵件在沒有附件情況下大約是 3.3KB。 
 
圖 19 SpamFinder 實驗環境 
 第一次 第二次 第三次 
測試情境 發送 e-mail 中間不經過
SpamFinder  
發送 e-mail 中間必須經
過 SpamFinder  
發送 e-mail 中間必須經
過 SpamFinder  
封包樣本率 sample ratio 100% sample ratio 100% sample ratio 0.2% 
在最壞的情況顯示，SpamFinder 只有 4.13%效能的負擔，如下圖 
 22 
 
 
圖 22 Effective Evaluation Result 
 
圖 23 Detected IP 
3.5.6 實驗六：子計畫五整合實驗 
a. 實驗設定：子計畫五特徵型 NIDS 主要以 Snort 規則集為特徵資料庫，網路流量會由 NIDS 的 Port 
nf2c1 及 Port nf2c2 接收或傳送，透過即時的比對網路封包來偵測惡意攻擊。若封包為包含特徵
規則則 NIDS 會將特徵類型及發生時間傳送到子計畫四的資料庫進行記錄。NIDS 會將惡意封包
導向到 Port nf2c3 到 Monitor Center 進行封包資訊的萃取，主要取出的有協定、來源位址、來源
埠、目的位址及目的埠，共五項資訊儲存到子四的資料庫成為黑名單，提供給子計畫四做為流量
導向的依據，並提供統一的資訊呈現介面。 
b. 實驗結果：本系統使用 Netlib[21] 撰寫封包產生器，根據 Snort 規則產生惡意封包。Snort 規則中
TCP 規則佔有 89%因此本實驗主要針對 TCP 的 Snort 規則產生出惡意封包，並將這些封包輸入
到 NIDS 中比對。 
在整合資訊界面上是 JpGraph[22]套件，JpGraph 套件是使用 php 網頁腳本語言開發的 Open source
繪圖套件，本實驗使用此套件將惡意資訊繪製成圖，作為整合於子計畫四的資訊呈現頁面。資訊
呈現頁面分成月報（Monthly Report，圖 25）及日報（Day Report，圖 26）。其中月報乃每個月所
偵測到的攻擊類型，可以呈現各種不同類型攻擊出現的時間及密集程度。日報的的部分主要針對
統計每日偵測到各攻擊類型的惡意封包數，並提供惡意封包之標頭資訊，此資訊提供給子計畫四
進行後續的流量處理。 
 24 
 
 
圖 25 惡意流量整合測試月報 
 
圖 26 惡意流量整合測試日報  
 26 
 
參考文獻 
[1] NetFPGA, http://www.netfpga.org/. 
[2] Nick McKeown, et. al. , “Prototyping Fast, Simple, Secure Switches for Ethane”, 15th IEEE 
Symposium on High-Performance Interconnects 2007, pp.73 –82 
[3] Nick McKeown, et. al., “Openflow : Enabling Innovation in Campus Networks”, Openflow White 
Paper March 14, 2008 
[4] NOX, http://noxrepo.org/wp/. 
[5] NOX API, http://noxrepo.org/~yapkke/doc/. 
[6] NOX GUI, http://noxrepo.org/noxwiki/index.php/NOX_GUI/. 
[7] RFC 821, http://www.ietf.org/rfc/rfc821.txt 
[8] RFC 5321, http://www.ietf.org/rfc/rfc5321.txt 
[9] RFC 1242, http://www.ietf.org/rfc/rfc1242.txt 
[10] Wikipedia.（Upgrading）. Simple Mail Transfer Protocol [Online]. Available: 
http://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol 
[11] Wikipedia.（Upgrading）. Post Office Protocol [Online]. Available: 
http://en.wikipedia.org/wiki/Post_Office_Protocol 
[12] Wikipedia.（Upgrading）. Internet Message Access Protocol [Online]. Available: 
http://en.wikipedia.org/wiki/Internet_Message_Access_Protocol 
[13] TWNIC-台灣網路資訊中心網路使用調查, http://map.twnic.net.tw/,2010. 
[14] 許景涵，“Using NetFPGA to Implement Integrated NFA and AC Algorithms for Network Based 
Intrusion Detection Systems”，國立中央大學資訊管理研究所碩士論文，民 100。 
[15] 顏志豪，“A Spam Mail-based Solution for Botnet Detection and Network Bandwidth Protection”，國
立中央大學資訊工程學系碩士論文，民 99 
[16] netfilter, http://www.netfilter.org/ 
[17] iptables, http://www.netfilter.org/projects/iptables/index.html 
[18] Ioannis Sourdis, “Efficient and High-Speed FPGA-based String Matching for Packet Inspection,” M.Sc. 
Thesis, Technical University of Crete, Greece, July 2004. 
[19] Message Labs Intelligence, Symantec Corp., “Spam Surges in February while message Size 
Shrinks,”Feb. 2010. 
[20] Network Benchmarking Lab（NBL）, http://betasite.nctu.edu.tw/betasite/ 
[21] Netlib, http://www.netlib.org/ 
[22] JpGraph, http://jpgraph.net/ 
[23] 朱彥豪，“以 NetFPGA 實作結合布隆過濾器與改良式 Karp Rabin 演算法之網路惡意封包偵測器
“，國立中央大學資訊管理學系碩士論文，民 99 
[24] 魏雅笛， 「利用決策樹改善以 FPGA 為基礎之入侵偵測系統資源利用」， 國立中央大學資訊管
理研究所碩士論文，民 98。 
[25] Yusuf, S., Luk W., Szeto, M. K. N., and Osborne, W. “UNITE: Uniform hardware-based Network 
Intrusion deTection Engine,” Applied Reconfigurable Computing（ARC）, March, 2006. 
 28 
 
國科會補助計畫衍生研發成果推廣資料表 
日期：2011年 9月 26日 
國科會補助計畫 
計畫名稱：子計畫五：網路虛擬化架構之整合性安全測試研究 
計畫主持人：曾黎明         
計畫編號：NSC 99-2219-E-008-00 
領域：通訊軟體及平台（網通國家型） 
無研發成果推廣資料 
 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：曾黎明 計畫編號：99-2219-E-008-001- 
計畫名稱：網路虛擬化架構之研究與建置--子計畫五：網路虛擬化架構之整合性安全測試研究(2/2)
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 4 4 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
