partitioning mechanism and 
parallel garbage collection algorithms to choose the best core for 
each thread and execute native codes. 
Therefore, the overall performance can be enhanced by these 
techniques. This project is divided into 
three sub-works as following: Embedded Heterogeneous 
Multiprocessor Platform Java Virtual Machine, 
Heterogeneous Multi-Core Static code Optimization and Translation 
system and The Garbage 
Collecting Platform. 
The Embedded Heterogeneous Multiprocessor Platform Java 
Virtual Machine is implemented on 
heterogeneous multicore platform and designed for better power 
efficiency, memory restrictions and 
performance. The Heterogeneous Multi-Core Static code 
Optimization and Translation system is used 
to translate OpenMP programs to OpenCL programs automatically 
and optimizes the kernel function 
which is necessary to translate for better memory access. 
Therefore； OpenMP programmers are 
suggested to develop programs on heterogeneous multi-core 
platform by using this sub-system to 
reduce the development periods. The Garbage Collecting Platform 
is designed for active objectives in 
the distributed system. We proposed a new garbage collecting 
algorithm for active objectives by 
observing the behaviors of them on extant distributed system. 
 
1 
中文摘要 
    由於嵌入式系統在功率消耗上的限制，因此嵌入式系統上的多核心處理器通常採用異質多核心的
架構。使用異質多核心作嵌入式系統硬體平台的架構有越來越普遍的趨勢。 
本計畫整合動態行程管理技術，配合內建於JIT編譯器與自動化記憶體管理器裡的資訊收集及分
析演算法，動態選擇工作適用的處理器，並執行對應的原生碼。至此，不僅經過靜態自動化程式碼分
割及排程技術處理過的程式包括JVM 及二進位轉譯器本身)，自動化記憶體管理器，JIT 編譯器產生
的程式碼，皆可配合動態行程管理技術，充分利用異質多核心提供的所有硬體資源， 提升整體執行
效能。 
    本計畫主要分為三個子工作項目，分別是嵌入式異質多核心平台爪哇虛擬機器(Embedded 
Heterogeneous Multiprocessor Platform Java Virtual Machine)、異質多核心處理器靜態程式碼最佳化與
轉換系統（Heterogeneous Multi-Core Static code Optimization and Translation system）以及垃圾收集平
台( The Garbage Collecting Platform)。嵌入式異質多核心平台爪哇虛擬機器以異質多核心處理器為平
台，依照嵌入式系統中低功耗和記憶體容量受限的需求，設計並實作一個支援動態優化能源消耗，並
兼顧記憶體容量的使用以及執行效率的爪哇虛擬機器。而異質多核心處理器靜態程式碼最佳化與轉換
系統使用OpenMP 撰寫的程式碼自動轉成OpenCL 的程式碼，並對需要進行轉換的核心函式（kernel 
function）進行記憶體存取優化。藉由本計畫所開發的工具，程式開發者可以使用OpenMP 來開發
heterogeneous multi-core 程式，藉以縮短程式開發者在發展heterogeneous multi-core 程式時的時程。
垃圾收集平台主要為分散式平台上主動式物件的記憶體回收。深入觀察現有的記憶體回收演算法在標
示垃圾及清除垃圾步驟中在分散式平台上的行為模式，並進而提出新的主動式物件記憶體回收演算
法。 
關鍵詞 
異質多核心處理器、資訊收集、爪哇虛擬機器、嵌入式系統、記憶體回收、分散式記憶體回收。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
3 
目錄 
中文摘要............................................................................................................................................................ 1 
英文摘要............................................................................................................................................................ 2 
前言.................................................................................................................................................................... 4 
研究目的............................................................................................................................................................ 4 
文獻探討............................................................................................................................................................ 4 
研究方法............................................................................................................................................................ 5 
結果與討論...................................................................................................................................................... 11 
子計畫一成果.......................................................................................................................................... 11 
子計畫二成果.......................................................................................................................................... 17 
子計畫三成果.......................................................................................................................................... 20 
總計畫成果.............................................................................................................................................. 21 
參考文獻.......................................................................................................................................................... 23 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
5 
式的執行期間應該要如何選擇核心。針對這樣的問題，文獻中提出了For IPC和For Cache Miss的兩種
演算法來作為核心選取的依據。 
 
 [4]總結了在執行效能皆不同的異質多核心處理器上，達到程式能源使用效率最大化的形式。主
要分成兩種。一種稱為在Thread Level Parallelism上達到使用效率，程式執行可分為序列化部份和可平
行化部份，將序列化的部分放在較快的核心上執行，而可平行化的部分就交給多個較慢的核心執行。
而另一種型式則是在Microarchitecture上取得效率，程式可分為CPU-bound的程式和Memory-bound的
程式，CPU-bound的程式使用CPU效率較高所以應該要放在效能較高的核心上執行，另一種程式則相
反。 
 
 [6][7][8][9]為模糊邏輯理論，談論模糊理論的設計及運算原理。模糊理論以多方面運用在工程及
控制方面，像是人機互動、機器智慧化……等等。其中[7]則將fuzzy logic controller 運用在Dynamic 
Voltage Frequency Scaling上；我們嘗試將此方法運用在處理器的排程上，使得Java Virtual Machine達
到省電的效果。 
 
 [10]探討Multi-thread Java程式運行在多核心系統上的thread migration的overhead。首先分析
migration overhead 的來源。令人驚訝的是，分析結果顯示java 應用程式並未有顯著的migration 
overhead。 
 
 [11][12]探討如何設計作業系統中的排程演算法，使得有效運用異質多核心資源。本研究文獻顯
示在IPC-driven algorithm中，IPC ratios 通常不夠精準。還有此演算法是實作是模擬器上，並未有相
同的效能在實體機器上。本文獻中所提出的HASS使用 offline-generated architectural signatures 來決定
thread assignment 在異質多核心的平台上。此文獻中的研究屬於static assignment ，而我們的研究傾向
於dynamic assignment。 
 
研究方法 
     本計畫為應用於嵌入式異質多核心平台之系統軟體關鍵技術與開發工具之總計畫，其中包含
多個子計畫，以下分別描述各子計畫內容及整合。  
   本計畫主要分成三個子計畫，分別敘述如下: 
(1) 嵌入式異質多核心平台爪哇虛擬機器(Embedded Heterogeneous Multiprocessor  
Platform Java Virtual Machine, EHMPJVM) 
以異質多核心處理器為平台，依照嵌入式系統中低功耗和記憶體容量受限的需求，設 
計並實作一個支援動態優化能源消耗，並兼顧記憶體容量的使用以及執行效率的爪哇 
虛擬機器，此計畫以修改為主軸，因此只描述修改之項目架構，子項目分別為作業系 
統核心支援(OSKS)、JVM 動態執行核心選取(DECS)以及 JVM 功耗效能測寫(JPPR)， 
子項目架構如圖 1 至圖 3。 
7 
圖 4 是本系統的系統架構圖（不包含 Cetus 的相關模組），主要包含兩個子系統：分
別為 OpenMP 最佳化子系統（OpenMP Optimization subsystem, OO）、核心程式碼最佳化子系
統（Kernel Code Optimization subsystem, KCO）。OO 是針對輸入原始碼中的 DOALL loop 進
行記憶體存取的最佳化。KCO 則是將 OO 最佳化後的 DOALL loop 轉成 OpenCL 的核心
函式（kernel function）、根據 OpenCL 的核心函式的資料相依性分析，移除不必要的資料傳
輸、與安插 OpenCL 程式執行時所需的必要 function，如︰OpenCL Compute Device 的初
始化、資料的傳輸…等。 
 
圖 4：HMCSOT 系統架構圖 
本計畫所開發的HMCSOT主系統與兩項子系統，分別為OO與KCO。底下我們將分別說
明這兩個子系統的架構。 
 
I、OpenMP最佳化子系統（OpenMP Optimization subsystem, OO） 
 
OO用來針對輸入原始碼中被OpenMP #pragma所標示的DOALL loop 進行記憶體存取
的最佳化。首先透過 Cetus 中的前端將輸入的 OpenMP 原始碼轉換成 Cetus IR，經由 IR 
的資訊建立出要處理迴圈的 Polyhedral Model 後，再配合輸入的轉換參數得到具有迴圈最
佳化資訊的 Polyhedral Model，最後再經由 Code Generation 產生Cetus IR或 C 原始碼。圖
6為OO的系統架構圖。OO可以依功能可細分為四個模組： 
1. Cetus 前端模組 
z 子系統讀取 OpenMP 原始碼並藉由 Cetus 的輔助產生 IR。 
2. Polyhedral Model Construction模組 
z 代表本子系統最主要的物件，記錄建立每個迴圈進行最佳化所需要的資訊，並
針對迴圈內的每個statement建立其各自的Polyhedral Model。 
3. Loop Transformation 模組 
z 讀取 Polyhedral Model 資料結構產生原始的 Polyhedron （是進行轉換的基本
單位），再根據使用者輸入的參數將原始的 Polyhedron執行數學轉換及最佳化的動作，
並利用 Data Dependence Test 進行輔助的分析，判斷轉換前後的合法性與正確性，無誤
9 
z 轉換核心區域為核心函式。成為核心函式的要點至少有︰  
1. 核心函式的  specifiers 裡需包含  __kernel 
2. 核心函式的  return type 需為  void，因此函式需要藉由參數來輸
出  
3. 參數的型態若為指標的話，需要加上  __global、__constant、
__local、__private 其中一種  qualifier 來指定該指標指向那個  
OpenCL memory region。  
4. 若核心區域裡包含了函式呼叫，需要適度地轉換修改。  
5. Code Insertion模組  
z 安插初始化、核心執行及清理程式碼。  
z 初始化程式碼，初始化各種資源如︰ context 和  command queue。  
z 核心執行程式碼，設定核心參數、搬移資料、執行核心函式。  
z 清理程式碼，釋放各種資源。  
6. Cetus IR to OpenCL Translation模組  
z 轉換  Cetus IR 為  OpenCL 並產生  OpenCL 原始碼。Cetus IR classes 
裡定義了  method defaultPrint，決定該如何由  Cetus IR 轉換為  
C(OpenCL) 原始碼。  
OpenMP to Cetus IR Translation
KCT
Kernel Regions Identification
Cetus IR to OpenCL Translation
Kernel Regions Outlining
Kernel Regions Transformation
Code Insertion
Programmer
input
OpenMP 
Source Code
OpenCL 
Source Code
get
 
圖6︰KCO 子系統架構圖 
 
 
(3) 垃圾收集平台 ( The Garbage Collecting Platform ,GARCOL ) 
當物件不再被使用時，它所佔用的記憶體空間便需歸還給Java執行環境。Java程式語 
11 
 
   各子系統整合後的架構圖如圖 9 所示： 
 
圖 9： 整合架構圖 
 
 
結果與討論 
子計畫一成果 
(1) 透過自動化的選擇執行核心，在程式不需要大量運算資源供應執行時，轉換執行核心到
較低效能的核心上，使程式更有效率的使用資源。子系統一實作兩種不同的排程器，分
別是 IPC scheduler 與 LLC cache misses scheduler。本研究通過 SPECjvm2008 的完整測
試，共 20 組測試程式(表 1)；並利用能源與執行時間的乘積(Energy  Delay)作為能源使
用效率的指標。 
(2) 實驗結果包括:實施模糊控制管理的爪哇虛擬機器，在 scimark.fft.large 上取得能源使用效
率的好處，而且整體能源的使用是下降的。 
(3) 本計畫實作在 Intel i7-920 多核心機器， 實驗環境如下 
¾ 作業系統： 
    Linux  debian 2.6.32 
¾ 開發程式軟體： 
      GCC、JAVA 2 SDK SE 1.5.x (or later)、gnuplot、sikuli、 labview。 
¾ 異質多核心架構： 
13 
 
 
 
¾ IPC Scheduler decisions for Asym A 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
¾ Reduction in energy-delay product for IPC scheduler in AsymA 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
15 
 
 
 
 
¾ Reduction in energy-delay product for IPC scheduler in AsymB 
0.8
0.85
0.9
0.95
1
1.05
1.1
1.15
co
m
pi
le
r.c
om
pi
le
r
co
m
pi
le
r.s
un
flo
w
co
m
pr
es
s
cr
yp
to
.a
es
cr
yp
to
.rs
a
cr
yp
to
.s
ig
nv
er
ify
de
rb
y
m
pe
ga
ud
io
sc
im
ar
k.
fft
.la
rg
e
sc
im
ar
k.
lu
.la
rg
e
sc
im
ar
k.
so
r.l
ar
ge
sc
im
ar
k.
sp
ar
se
.la
rg
e
sc
im
ar
k.
m
on
te
_c
ar
…
sc
im
ar
k.
fft
.s
m
al
l
sc
im
ar
k.
lu
.s
m
al
l
sc
im
ar
k.
so
r.s
m
al
l
sc
im
ar
k.
sp
ar
se
.s
m
al
l
se
ria
l
xm
l.t
ra
ns
fo
rm
xm
l.v
al
id
at
io
n
EDP
 
 
 
 
¾ Time increase for LLC-miss scheduler 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
17 
(5) 本計畫成果可運用於設計作業系統的排程器，以及 Mobile device 上的 CPU 排程，因嵌
入式系統特別重視能源消耗的問題。 
(6) 本專案所開發的核心排程演算法是專門為 Java 虛擬機器設計的，可有效針對 JVM 內部
的 thread 進行排程，以達到省電的目的。 
未來展望： 
¾ 本研究對於整體效能成長並不明顯，僅對於 scimark.fft.large 有顯著的影響；可採用
別組 benchmark 做實驗。 
¾ 考慮結合兩種 scheduler，設計一套新的 scheduler；根據 IPC 與 LLC miss rate 兩個
因素設計 fuzzy scheduler。 
(7) 論文發表： 
本研究產出一篇碩士論文[12]及一篇研討會論文[13]。 
子計畫二成果 
(1) 本計畫的實驗環境如下列所示： 
z CPU：Intel Core 2 Quad Q6600 (2GB RAM) 
z GPU：NVIDIA GeForce 9800 GT  
 GPU-to-CPU頻寬：1900 MB/s (使用NVIDIA 官方SDK中的oclBandwidthTest程
式測試) 
 CPU-to-GPU頻寬：2330  MB/s (使用NVIDIA 官方SDK中的oclBandwidthTest
程式測試) 
z 測試程式與相關特徵 (如表1所示) 
 
Bench
mark 
Description  # of 
Source  
Lines 
# of 
Kernel  
Lines  
# of 
Omp  
Parall
el  
JACO
BI  
An algorithm for determining the 
solutions of a system of linear equations 
with largest absolute values in each row 
and column  dominated by the diagonal 
elements  
92  14  2  
SPMU
L  
Sparse matrix multiplication, which is an 
algorithm for sparse matrices, where 
most elements of the matrices are zero  
50  44  1  
EP  Embarrassingly parallel, which is an 
algorithm for generating independent 
Gaussian random variates using the 
Marsaglia polar method  
614  79  1  
表 1：使用的測試程式與相關特徵 
 
此外，HMCSOT中主要有支援三項優化技術，分別條列如下： 
z Parallel Loop-Swap (簡稱：PLS)  
 用來改善inter-thread的資料區域性(data locality) 
19 
 
圖 11：SPMUL 的執行時間 
 
 
圖 12：EP 的執行時間 
 
(2) 結論 
本專案開發一套開放原始碼之 OpenMP 到 OpenCL 靜態程式碼轉換器，藉由本專案之程
式碼轉換器，程式開發者可以使用 OpenMP 來開發 heterogeneous multi-core 程式，藉以縮
短程式開發者在發展 heterogeneous multi-core 程式時的時程。 
(3) 本計畫開發一套開放原始碼之 OpenMP 到 OpenCL 靜態程式碼轉換器。藉由本計畫之
程式碼轉換器，程式開發者可以使用 OpenMP 來開發 heterogeneous multi-core 程式，藉
21 
(4) 整合測試結果 
 
(5) 結論： 
z 我們完成 GARCOL 平台 3.1 的開發與建置。 
z GARCOL 3.1 包含八個自動記憶體管理回收機制。 
z GARCOL 3.1 共通過 17 個程式的測試。 
z GARCOL 3.1 通過 5 組整合測試，共 40 個測試個案。 
 
總計畫成果 
(1)  本整合計畫的實驗環境如下列所示： 
z 硬體平台： 
Intel i7 CPU，本實驗採用Intel i7-920，記憶體需求8G以上，使用NVDIA GTX460顯
示卡，下表為硬體平台簡介。 
處理器型號 Intel i7-920 
Number of cores 4 
Number of threads 8 
Clock Speed 2.66GHz 
Max Turbo Speed 2.93GHz 
L1 cache 32KB L1 data, 32KB L1 instruction per 
core 
L2 cache 256KB per core, inclusive 
L3 cache 8MB shared cache 
Lithography 45nm 
Motherboard GIGABYTE GA-EX58-UD3R 
23 
本整合計畫採用 Scimark 做為測試程式，屬於 SPECjvm2008 的其中一個測試群；本整合
計畫的目的為將三個子計畫結合，並要求個子項目能夠正確執行並發揮個子項目的功
能。整合測試僅驗證功能正確性，並未量測效能。 
 
 
參考文獻 
[1] Seyong Lee, Seung-Jai Min, and Rudolf Eigenmann. OpenMP to GPGPU: A Compiler Framework 
for Automatic Translation and Optimization. In PPoPP’09, 2009. 
[2] Uday Bondhugula, A. Hartono, J. Ramanujan, P. Sadayappan. A Practical Automatic Polyhedral 
Parallelizer and Locality Optimizer. In ACM SIGPLAN PLDI, 2008. 
[3] Rangan, Krishna K. and Wei, Gu-Yeon and Brooks, David . Thread motion: fine-grained power 
management for multi-core systems, SIGARCH Comput. Archit. News, 2009   
[4] Fedorova, Alexandra and Saez, Juan Carlos and Shelepov, Daniel and Prieto, Manuel. Maximizing 
power efficiency with asymmetric multicore systems Commun. ACM ,2009 
[5] R. Kumar, D. M. Tullsen, P. Ranganathan, N. P. Jouppi, and K. I. Farkas. Single-ISA heterogeneous 
multi-core architectures: the potential for processor power reduction. In Proceedings of the 36th 
Annual IEEE?ACM International Symposium on Microarchitecture, pages 81–92, Dec. 2003 
[6] [4] Li-Xin Wang. A course in fuzzy systems and control. Prentice-Hall, Inc., pper Saddle River, NJ, 
USA,1997. 
[7] [5] Lotfi A. Zadeh. Fuzzy sets and their applications to cognitive and decision processes. Academic 
Press, pages 1-39, 1975. 
[8] [6] Lotfi A. Zadeh. Fuzzy logic, neural networks, and soft computing. Commun. ACM, 37:77-84, 
March 1994. 
[9] [7]H.R. Pourshaghaghi and J.P. de Gyvez. Dynamic voltage scaling based on supply current tracking 
using fuzzy logic controller. In ICECS '09:Proceedings of 16th IEEE International Conference on 
Electronics, Circuits, and Systems, pages 779 -782, 2009. 
[10] [8] Qiming Teng, P.F. Sweeney, and E. Duesterwald. Understanding the cost of thread migration 
for multi-threaded java applications running on a multicore platform. In ISPASS '09: Proceedings of 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/11/01
國科會補助計畫
計畫名稱: 總計畫(2/2)
計畫主持人: 楊武
計畫編號: 99-2220-E-009-048- 學門領域: 自由軟體暨嵌入式系統
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
獲得 2009 年大專院校嵌入式系統設計競賽設計完整獎。 
主辦 2009 年 CTHPC  WORKSHOP (編譯技術研討會)。 
 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
