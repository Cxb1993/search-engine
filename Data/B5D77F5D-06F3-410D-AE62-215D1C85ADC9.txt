 0 
 
行政院國家科學委員會補助專題研究計畫 
 ■成果報告 
□期中進度報告 
 
以平行化計算方法應用於類比積體電路之佈局圖設計自動化 
 
計畫類別：■個別型計畫   □整合型計畫 
計畫編號：NSC 99－2221－E－155－088－ 
執行期間：99 年 8 月 1 日 至 100 年 7 月 31 日 
 
執行機構及系所：元智大學 資訊工程學系(所) 
 
計畫主持人：曾奕倫 
計畫參與人員：張政源、高永威、張燿麟 
 
 
 
 
成果報告類型(依經費核定清單規定繳交)：■精簡報告  □完整報告 
 
本計畫除繳交成果報告外，另須繳交以下出國心得報告： 
□赴國外出差或研習心得報告 
□赴大陸地區出差或研習心得報告 
■出席國際學術會議心得報告 
□國際合作研究計畫國外研究報告 
 
 
處理方式：本計畫涉及專利或其他智慧財產權，一年後可公開查詢 
 
中   華   民   國  100  年  10  月  29  日 
 
 2 
parameterized layouts, which consist of 
parameterized polygons [5]. Partitioning 
parameterized polygons is an essential process in 
this analog design methodology. 
五、研究目的 
This research project is aimed at using parallel 
algorithms and parallel software tools in solving 
problems arising in the design of physical layouts 
of analog integrated circuits. 
六、文獻探討 
In the design of analog integrated circuits, it is 
essential to consider the effects of layout-induced 
parasitics early in the design flow [1, 2]. Lack of 
considering parasitics early (e.g., in the circuit synthesis 
phase) may result in numerous re-design iterations, 
which include repetitive runs of circuit sizing, circuit 
simulation, physical layout generation, parasitics 
extraction, and post-layout simulation. Moreover, in 
extreme cases, the design may never converge. 
To solve the problem of re-design iterations arising 
in analog integrated circuit design, many layout-aware 
circuit synthesis methodologies have been proposed 
[3-6]. Among them, the methodology based on 
parameterized polygons [5] allows parasitics to be 
estimated automatically and efficiently in the circuit 
synthesis phase. Additionally, in the methodology, 
models of parasitics can be generated automatically and 
systematically. 
In the analog design methodology based on 
parameterized polygons, partitioning algorithms play a 
crucial role since parameterized layouts (which contain 
parameterized polygons) must be partitioned (using 
horizontal cuts only) before they can be stored in either 
rectangular corner stitching [7] or trapezoidal corner 
stitching [8] data structure. An algorithm for 
partitioning parameterized orthogonal polygons into 
disjoint parameterized rectangles has been proposed in 
[9], although it has limited capability in handling 
constraints. 
In order to partition parameterized polygons 
containing complex constraints and to partition 
parameterized 45-degree polygons into disjoint 
parameterized trapezoids, a partitioning algorithm 
which makes use of constraint programming (CP) 
technologies has been proposed [5]. Although the 
algorithm is general and is capable of coping with very 
complex constraints, it is not efficient in worst cases. 
Therefore, it is desirable to use parallel computing 
methods and other approaches to speed up the process 
of partitioning parameterized polygons. 
七、研究方法 
In order to speed up the process of partitioning 
parameterized polygons, we developed and 
implemented a new comparison procedure which uses 
mixed integer linear programming (MILP) 
technologies and can be used in existing partitioning 
algorithms. Experimental results show that more than 
150X speedup can be achieved for partitioning 
parameterized polygons containing very complex 
constraints. 
Our MILP-based partitioning algorithm uses the 
plane-sweep technique. The idea of the 
plane-sweep technique suggests using an imaginary 
scan-line, which scans the input polygon from top 
to bottom of the vertices. This means that the 
scan-line sweeps from those vertices which have 
the largest y coordinates to those which have the 
smallest. For vertices having the same y coordinate, 
the one with the smallest x coordinate is swept first. 
The scan-line can thus be considered as a nearly 
horizontal line which almost parallels the x-axis, 
but tilts counterclockwise slightly. 
In order to simulate the movement of the 
scan-line, we sort all vertices according to their y 
coordinates and then x coordinates. The sorted 
vertices are stored in an event queue Q. Vertices 
are returned from Q in the same order as the 
scan-line sweeps the input polygon. 
When the scan-line touches a vertex, one or 
more new trapezoids may be cut and reported. 
Also, relevant data structures may need to be 
modified. The whole partitioning process finishes 
after all the vertices have been swept and 
processed. 
The O(n log n) time complexity can be 
achieved when the aforementioned plane-sweep 
technique is used in the partitioning of 
fixed-coordinate polygons (i.e., polygons that do 
not contain variables or linear expressions). In the 
partitioning of parameterized polygons, however, 
the time complexity can be higher since there is 
overhead in processing constraints and linear 
expressions. We use a comparison procedure, 
 4 
constraints can be directly specified by API 
functions of an MILP solver package. To further 
improve the performance of the comparison 
procedure, on the other hand, the procedure can be 
parallelized since each invocation of 
HASSOLUTION() can be executed by a single thread 
or process. 
To further speed up the process of partitioning 
parameterized 45-degree polygons, we developed a 
parallel algorithm based on the method of using 
two scanlines. For example, in solving the problem 
of reporting intersections of line segments [10], the 
method of using two scanlines can report 
intersections by using two threads; one scanline 
sweeps the input line segments from left to right 
while the other scanline moves from right to left, as 
shown in Fig. 4. 
八、結果與討論 
We have designed a number of analog circuits 
and have confirmed that the problem of re-design 
iterations does exist. Specifically, in the design of 
an analog circuit, after sizes of transistors have 
been decided and the performance of the circuit 
has been confirmed by using circuit simulations, 
post-layout simulations can indicate that the 
performance of the design does not match the 
figures generated by pre-layout simulations. 
We have implemented the comparison 
procedure based on using parallel MILP 
technologies and have implemented the 
MILP-based partitioning algorithm. The 
comparison procedure and the partitioning 
program were implemented in Java programming 
language, and the Gurobi Optimizer version 3.0.1 
was used to solve formulated MILP problems. 
Experiments were carried out on a workstation 
which had an Intel Core 2 Quad Q9550 2.83GHz 
processor and 8GB of DRAM. Table II shows the 
results of partitioning Polygons 1 and 2 (defined in 
[5]) with different values of k, and Table III shows 
the results of partitioning Polygon A (defined in 
this report). All of these polygons were designed to 
have very complex constraints. For all of these 
parameterized polygons, the new MILP-based 
partitioning algorithm outperforms the CP-based 
partitioning algorithm. Parameterized polygons 
containing only simple constraints can be 
partitioned nearly as fast as partitioning 
fixed-coordinate polygons. 
We proposed the use of an MILP solver in 
solving comparison problems occurring in the 
partitioning of parameterized 45-degree polygons. 
The new MILP-based algorithm [11] is capable of 
TABLE I.  NEGATION OF EACH RELATIONAL OPERATOR 
Relational Operator 
Negation of the Relational 
Operator 
   
    
    
    
    
   
 
(g, c+2d-3e+10-a) 
(g+4d, c-2d-3e+10-a) 
(g+4d, c-6d-3e+10-a) 
(f, c-6d-3e+10-a) 
(f, s) 
(10000, s) 
(10000, c+2d-3e+10-a) 
(10000-a, c+2d-3e+10-a) 
(10000, c+2d-3e+10) 
(10000+4d+a, c-2d-3e+10-a) 
(10000+a, c-6d-3e+10-a) 
(10000+4d+a, c-6d-3e+10-a) 
(10000+4d+a, q) 
(t, q) 
(t, u) 
(10000+3m-3n, u) 
(10000+3m-3n, i) 
(v, i) 
(v, q-c+2d+3e-10+a+q) 
(10000+m-n, q-c+2d+3e-10+a+q) 
(10000+m-n, i-j) 
(w, i-j) 
(w, i-6d) 
(v, i-6d) 
(v, q-c+2d+3e-10+a+q-2a+2d) 
(p-2d+2a, 
q-c+2d+3e-10+a+q-2a+2d) 
(p, q-c+2d+3e-10+a+q) 
(p-2d+2a, q) 
(p, c-2d-3e+10-a) 
(p+4d+a, c+2d-3e+10) 
(p+4d+2a, c+2d-3e+10-a) 
(p-2d+2a, c-4d-3e+10-a) 
(p-2d+2a+q-i, q) 
(p-2d+2a, i) 
(p+4d+2a, i-6d) 
(10000+4m-4n, n) 
(10000+3m-3n, m) 
(2m-2n+10000, n) 
(m+10000-n, m) 
(10000+m-n, n) 
(10000, m) 
(10000, q-c+2d+3e-10+a+q-2a+2d) 
(g+4d, q-c+2d+3e-10+a+q-2a+2d) 
(g+4d, m) 
(h, m) 
(h, q-c+2d+3e-10+a+q-2a+2d) 
(h-k, q-c+2d+3e-10+a+q-2a+2d-k) 
(h-k, i-j) 
(r, i-j) 
(r, i-6d) 
(g+4d+2j, i-6d) 
(g+4d+2j, i) 
(g+4d+j, i-j) 
(g+4d, i) 
(g, i) 
(g, q-c+2d+3e-10+a+q) 
(r, q-c+2d+3e-10+a+q) 
(r, i) 
(g-4d, i) 
(g-4d, q-c+2d+3e-10+a+q) 
(h, q-c+2d+3e-10+a+q) 
(h, q) 
(g+2d, q) 
(g+2d, c-4d-3e+10-a) 
(g, c-2d-3e+10-a) 
(g-4d, c-6d-3e+10-a) 
(g-4d, c-2d-3e+10-a) 
Figure 1.  The contour of a parameterized polygon (Polygon A). 
 6 
for partitioning parameterized polygons into 
rectangles,” In Proceedings of Great Lakes 
Symposium on VLSI (GLSVLSI), pp. 366-371, 2006. 
[10] Jon Louis Bentley and Thomas A. Ottmann, 
“Algorithms for Reporting and Counting Geometric 
Intersections,” IEEE Transactions on Computers, Vol. 
C-28, No. 9, pp. 643-647, September 1979. 
執行本計畫相關之著作 
[11] I-Lun Tseng, Che-I Lee, and Huan-Wen Chen, 
“Efficient Partitioning of Parameterized 45-Degree 
Polygons with Mixed ILP,” In Proceedings of IEEE 
Region 10 Conference (TENCON), pp. 1531-1534, 
November 2010.  (EI) 
[12] I-Lun Tseng, Yung-Wei Kao, Cheng-Yuan Chang, 
and Adam Postula, “Dogleg Channel Routing with 
Parallel Mixed Integer Linear Programming Solvers,” 
In Proceedings of International Conference on 
Parallel and Distributed Processing Techniques and 
Applications (PDPTA), Vol. 2, pp. 533-539, July 
2011. 
[13] Che-I Lee, Huan-Wen Chen, and I-Lun Tseng, 
“Obstacle-Avoiding Switchbox Routing with CP and 
Parallel MILP,” In Proceedings of Annual 
International Conference on Advances in Distributed 
and Parallel Computing (ADPC), pp. 45-50, 
November 2010. 
[14] I-Lun Tseng, Huan-Wen Chen, and Che-I Lee, 
“Obstacle-Aware Longest-Path Routing with Parallel 
MILP Solvers,” In Proceedings of the World 
Congress on Engineering and Computer Science - 
International Conference on Circuits and Systems 
(WCECS-ICCS), pp. 827-831, October 2010.  [Best 
Paper Award Nomination] 
[15] 陳煥文，“以平行化限制規劃解決含障礙物的最長
路徑問題 (Obstacle-Aware Longest-Path Routing 
with Parallel Constraint Programming Solvers),” 
碩士論文，元智大學資訊工程學系(所)，2011 年
10 月。 
[16] 高永威，“以限制規劃與混合整數線性規劃方式為
基 礎 之 線 長 匹 配 繞 線  (Obstacle-Aware 
Length-Matching Routing with Constraint 
Programming and Mixed Integer Linear 
Programming),” 碩士論文，元智大學資訊工程學
系(所)，2011 年 10 月。 
[17] 張政源，“可避開障礙物之直角史坦那樹建構的平
行 化 演 算 法  (Parallel Algorithms for 
Obstacle-Avoiding Rectilinear Steiner Minimal Tree 
Construction),” 碩士論文，元智大學資訊工程學
系(所)，2011 年 10 月。
 
TABLE II.  COMPARISONS OF CPU TIMES FOR CP-BASED AND MILP-BASED PARTITIONING ALGORITHMS 
 CP-Based Partitioning Algorithm [5] MILP-Based Partitioning Algorithm 
Polygon 1 Polygon 2 Polygon 1 Polygon 2 
  k = 1,000 1.66 sec. 1.46 sec. 0.55 sec. 0.69 sec. 
  k = 100,000 1.66 sec. 8.28 sec. 0.55 sec. 0.69 sec. 
  k = 200,000 1.66 sec. 15.47 sec. 0.55 sec. 0.69 sec. 
  k = 500,000 1.66 sec. 38.97 sec. 0.55 sec. 0.69 sec. 
TABLE III.  COMPARISONS OF CPU TIMES FOR CP-BASED AND MILP-BASED PARTITIONING ALGORITHMS 
 
# of Vertices 
# of Trapezoids 
Partitioned 
CP-Based Partitioning 
Algorithm [5] 
MILP-Based Partitioning 
Algorithm 
Speedup 
Polygon A 67 33 872.39 sec. 5.62 sec. 155X 
 
 
Figure 4.  The method of using two scanlines in reporting 
intersections of line segments. 
 
Figure 3.  The geometric structure of a parameterized 
45-degree polygon (Polygon A). 
本人在參與 ADPC’10 期間，仔細地聆聽了許多研究人員所發表的論文，例如，
有一篇論文是發表有關如何平行化的建立 Minimum Spanning Tree 的演算法，還有多
篇論文是探討如何利用  GPU 以便有效地平行化解決所要處理的問題。其中，
Minimum Spanning Tree 的平行化演算法可以應用在解決 VLSI 實體設計自動化的繞
線問題上。而 GPU 則可以提供大量的計算核心，以便加快程式的執行速度，但是，
要能夠有效地利用 GPU 以便平行化地解決問題，並不是很容易的事。在聆聽了研究
人員所發表的論文後，我也提出了幾個問題詢問發表論文的研究人員，並且得到了相
當清楚的回答，我個人感覺參與此會議收穫良多。 
在 ADPC 所發表的論文，都會被收錄在 GSTF digital library (GSTF-DL) 的網站
上。由於此次所發表的論文和口頭報告都有不錯的評價，本研究團隊將會考慮把我們
所提出的方法予以擴充，並且投稿到學術期刊。在未來，我們也會嘗試應用平行化的 
constraint programming (CP) 與平行化的 mixed integer linear programming (MILP) 的
技術於解決其他的問題上 (包含 VLSI design automation 與 analog design automation 
的相關問題)。 
三、攜回資料名稱及內容 
所攜回的資料包含：ADPC-2010 與 RTES-2010 之會議論文集一本 (紙本之論文
集)、與會者之姓名牌、會議報名/註冊之收據、如何自行搭乘大眾運輸工具前往 Marina 
Barrage 之說明紙一頁。 
 
 
 
 
 
 
 
 
 
  
主旨:  ADPC 2010: Acceptance of Full Paper 
從:  "Jackie " <jackie@dpcomputing.org> 
日期:  2010/8/30 下午 12:37 
到:  <akira741231@hotmail.com>, <s976026@mail.yzu.edu.tw>, <iltseng@saturn.yzu.edu.tw> 
副本 (CC):  "'Tony Luo'" <tony@globalstf.org> 
 
Annual International Conference on Advances in Distributed and Parallel Computing 
ADPC 2010 
1 – 2 November 2010, Singapore 
www.dpcomputing.org 
 
Paper Code: 46 
Paper Title: Obstacle-Avoiding Switchbox Router with Constraint Programming and Mixed Integer Linear Programming 
 
Dear Author(s), 
 
We are pleased to inform you that your paper as referenced above has been accepted for presentation at ADPC 2010 and for 
publication in the conference proceedings. Congratulations! 
 
Please upload your camera-ready paper with the author name(s) and affiliation(s) within a week (by September 6, 2010). 
 
In order for your paper to be published, you are required to complete the registration where the instructions are available at 
conference website (visit http://www.dpcomputing.org/ and click on "Registration" on the left panel). Kindly note that the 
Early-bird Registration Deadline is October 4, 2010.  
 
In addition, we would like to share with you some highlights of the conference: 
 The conference proceedings will be indexed by/included in CiteSeerX, SCIrus, Google Scholar, getCITED, and 
EBSCO. In addition, they will be submitted to IEEE xplore, ACM Digital Library, EI Compendex, and ISTP for 
indexing/inclusion subject to acceptance/approval. 
 ADPC 2010 and RTES 2010 will be co-located; by registering for one of the conferences participants will have 
access to both conferences. 
 Selected papers will be published in GSTF International Journal on Computing (JoC) and GSTF associated journals 
subject to extension/acceptance. 
 Best Paper Awards and Best Student Paper Awards will be conferred at the conference (in order to qualify for the 
award, the paper must be presented at the conference). 
 A complementary local tour (tentatively to Singapore Marina Barrage) will be provided to early-registered 
participants. 
 The conference will be held at Mandarin Orchard (Meritus Hotels & Resorts), located at the heart of the Garden City, 
Singapore. You may want to take a look at the official website of the Singapore Tourism Board. 
 If you need any assistance pertaining to Visa application and/or hotel accommodation, etc., we would be happy to 
help you. Please do not hesitate to contact us at: 
 
ADPC Conference Secretariat: 
Email: info@dpcomputing.org 
Tel: +65 6326 1366 
Fax: +65 6327 0162 
 
Yours sincerely, 
Tony Luo, PhD, Organizing Co-Chair 
ADPC 2010: www.dpcomputing.org 
  
Obstacle-Avoiding Switchbox Routing with CP and 
Parallel MILP 
 
Che-I Lee, Huan-Wen Chen, and I-Lun Tseng 
Department of Computer Science and Engineering 
Yuan Ze University 
Tao-Yuan, Taiwan 
 
 
Abstract—Switchbox routing is a type of problems arising in the 
detailed routing phase of VLSI physical design automation. A 
switchbox is a rectangular area and its boundary contains 
terminals; each terminal belongs to a specific net. A switchbox 
router can connect all the terminals belonging to the same net 
and the router must complete the connection of each net. It has 
been proven that a switchbox routing problem containing 
multiple terminals and multiple nets belongs to the class of NP-
complete. In this article, we present a constraint programming 
(CP) formulation and a mixed integer linear programming 
(MILP) formulation to switchbox routing problems. Therefore, 
CP solvers and MILP solvers can be used to find solutions. 
Experimental results show that more than 23X speed-up can be 
achieved by using a parallel MILP solver with 16 threads. The 
execution time can be further reduced when a computer 
containing more processor cores is available. 
Keywords- Obstacle-avoiding switchbox router; VLSI physical 
design automation; constraint programming; parallel mixed integer 
linear programming 
I.  INTRODUCTION 
As the semiconductor manufacturing technology advances, 
transistor feature sizes have been shrinking. As a result, an 
integrated circuit with the same die area can contain many 
building blocks. To implement an integrated circuit containing 
complex functions, a number of building blocks are usually 
required. Since each building block can perform a specific set 
of functions (e.g., NAND, NOR, registers, memory, and 
ALUs), we can combine several building blocks and make 
proper connections between their terminals. Routing 
algorithms, which are capable of making connections between 
building blocks, play a crucial role, especially when the design 
is large or complex [1]. 
Fig. 1(a) illustrates the physical layout structure of a circuit, 
which contains three building blocks and a rectangular routing 
region. By using the approach proposed in [2], the rectangular 
routing region can be partitioned into a number of simpler 
rectangular regions, as shown in Fig. 1(b); each of these 
rectangular regions can be considered as a switchbox. We can 
then use a router to complete the connection in each switchbox 
[3]. Fig. 2 shows an example of a switchbox routing problem 
and one of its solutions; the switchbox contains obstacles, 
which are denoted by black squares in the figure. 
Since a switchbox routing problem containing at least one 
3-terminal net belongs to the class of NP-complete [4], many 
heuristic algorithms have been proposed [3 - 10]. In the 
literature, many switchbox routers do not consider routing of 
all nets at the same time. If one of the nets could not be routed 
successfully, the net may need to be rerouted; this is called the 
“rip-up and reroute” strategy [11]. Our approach formulates a 
switchbox routing problem as a constraint programming (CP) 
problem as well as a mixed integer linear programming (MILP) 
problem. Therefore, CP or MILP solvers can be used to find 
solutions to the original switchbox routing problem by 
considering all the nets at the same time. In addition, our 
approach is capable of generating an obstacle-avoiding 
rectilinear Steiner minimal tree (OARSMT) [12 - 17] if the 
switchbox routing problem contains only one net. Our 
approach can be further extended to consider crosstalk [5] and 
the number of vias [6, 7, 8]. 
          
(a)                                                 (b) 
Fig. 1. A routable region shown in (a) can be partitioned into a number of 
switchboxes as shown in (b). 
 
Fig. 2. A two layer switchbox routing problem and one of its solutions. 
vertex and its neighbor vertices. Note that Fig. 6(l) contains 
only one net while Fig. 6(m) contains two different nets that 
are not connected together. 
Fig. 7(a) shows the 2-dimensional structure and its 
corresponding 3-dimensional structure of two nets; different 
colors are used to represent different nets. As mentioned 
previously, horizontal wire segments are located on one layer 
and vertical wire segments are located on the other layer. The 
net whose color is black must have a via between the net‟s two 
wire segments. Likewise, the net whose color is gray must also 
have a via between its two wire segments. In this case, 
however, the two vias of these two nets will short together. 
Therefore, the routing situation shown in Fig. 7(a) is illegal. On 
the other hand, the routing situation shown in Fig. 7(b) is legal 
since no via is required for each net. 
In our CP and MILP formulations of a switchbox routing 
problem, each net is given a unique integer value. Also, each 
incident edge of internal vertices has a corresponding variable; 
the value of the variable denotes the net that the edge belongs 
to. In the following subsections, the CP and MILP 
formulations to switchbox routing problems are presented. 
Subsequently, we define the routing case of obstacles. Four 
way edges around the vertex cannot be routed with other nets if 
this vertex is an obstacle. Therefore, none of the nets can route 
across the obstacle. 
Since we set up all possible routing cases of each internal 
vertex, we will formulate the constraints and use solvers to 
generate the switchbox routing result. 
A. Constraint Programming 
In our CP-based switchbox routing program, a switchbox 
routing problem can be transformed into a CP problem; 
constraints are generated according to different routing cases. 
The constraints are specified via JaCoP‟s API functions [20]. 
The JaCoP solver can then be invoked to find optimal solutions. 
Fig. 8 illustrates an example of a routing case where e1, e2, 
e3, and e4 are the incident edges of an internal vertex. In this 
case e1 and e3 belong to the same net. Therefore, we can 
express the constraint as: 
e1 = e3 . 
On the other hand, because e2 and e4 are not used in this case, 
we have to add the following constraints: 
e2 = e4 = 0, 
where the value of “0” means that none of the nets will go 
through these edges. Also, since e1 belongs to a net and e2 
does not belong to any net, we need an additional constraint: 
e1 ≠ e2 
in order to avoid the condition of “e1 = e2 = e3 = e4 = 0”. Note 
that “e1 ≠ e2” means “e1 is not equal to e2”. When all of the 
above constraints are specified, the routing case shown in Fig. 
8 can be represented. 
Fig. 9 illustrates another example of a routing case, where 
an obstacle is located at the internal vertex. Since all of the 
four incident edges will not be used by any nets, the following 
constraints are generated: 
e1 = e2 = e3 = e4 = 0. 
Constraints for other routing cases of internal nodes can be 
generated by using similar techniques. 
Since the major objective of our approach is to solve the 
input switchbox routing problem and to minimize the total wire 
length, we have to calculate the total wire length. Simply 
calculating the sum of the values for all edges (ei) will not 
generate the correct total wire length because a switchbox 
routing problem can have many different nets. In order to solve 
the problem, we add a set of variables, Sumi, to represent 
whether the corresponding edges (ei) are passed by nets in the 
final routing solution. Therefore, the following constraints are 
generated: 
If (ei = 0) then (Sumi = 0) else (Sumi = 1) 
By adding the values of Sumi together, the total wire length can 
be calculated. As a result, the total wire length can be 
minimized by using CP solvers. 
B. Mixed Integer Linear Programming 
After transforming a switchbox routing problem into a CP 
problem, the CP problem can be further transformed into an 
MILP problem. Parallel MILP solvers can then be used to find 
optimal solutions. 
 
(a)                                      (b)                                    
Fig. 7. Examples of illegal (a) and legal (b) routing situations. 
  
Fig. 8. An example of a 
routing case. 
Fig. 9. An example of a routing 
case with an obstacle at the 
internal vertex. 
 
Vroot = 1 
V(x2, y2) –V(x1, y1) ≧  1 
where Vroot is the V value of the root vertex, V(x1, y1) is the 
parent vertex of an edge, and V(x2, y2) is the child vertex of the 
same edge, if the net connects from V(x1, y1) to V(x2, y2). Fig. 
12(b) shows a possible assignment of V values to a completed 
net for the routing problem shown in Fig. 12(a). 
Setting the above constraints on all vertices can ensure that 
all terminals with the same net can be connected together. 
Also, the completed net will form a rectilinear Steiner tree. 
IV. EXPERIMENTAL RESULTS 
Our program for transforming a switchbox routing problem 
into a CP problem and an MILP problem was implemented in 
Java programming language. Our program invokes the JaCoP 
solver in order to solve the formulated CP problems and 
invokes the CPLEX [21] solver in order to solve the formulated 
MILP problems. Experiments were carried out on a Linux 
workstation which had two 2.26-GHz Intel Xeon E5520 CPUs 
and 32 GB of RAM. The workstation is capable of running 
programs with up to 16 threads. Table I shows experimental 
results of solving a number of switchbox routing problems with 
minimum total wire lengths. In the table, for each switchbox 
routing problem, columns 1 to 5 list the grid size, the number 
of nets, the number of obstacles, the number of variables in the 
MILP formulation, and the number of constraints in the MILP 
formulation, respectively. The rest of the table shows the 
execution times of solving switchbox routing problems by 
using CP and MILP solvers. Since the CPLEX solver supports 
multi-thread modes, we used it to solve formulated problems 
with different number of threads. Table II shows experimental 
results of solving switchbox routing problems without 
considering minimum total wire lengths. Therefore, the 
execution times can be significantly reduced in most cases. On 
average, in our experiments, the execution times can be 
reduced by using more number of threads. 
In Tables I and II, there is a routing problem which contains 
7*6 routing grid, 3 nets, and 2 obstacles. Fig. 13 illustrates this 
routing problem and the routing result generated by our 
approach. The routing result is optimal since the total wire 
length is the shortest. 
Fig. 14 shows two routing solutions of a switchbox routing 
problem; both solutions are generated by our approach. As can 
be seen in the figure, our approach is capable of finding 
optimal and suboptimal solutions. Notice that the routing result 
shown in Fig. 14(b) is an obstacle-avoiding rectilinear Steiner 
minimal tree (OARSMT). 
V. CONCLUSION 
In this article, we proposed an approach for finding optimal 
and suboptimal solutions of multi-terminal multi-net switchbox 
routing problems. Moreover, the proposed approach can be 
used to solve a subset of rectilinear Steiner tree problems. 
Experimental results have shown that minimum wire lengths of 
switchbox routing problems can be found, and that high 
degrees of scalability can be achieved by using parallel MILP 
solvers. Owing to the properties of MILP problems, it is 
possible to further shorten the execution time if a computer 
containing more processor cores is available. 
 
Fig. 11. An example of illegal routing solution..  
 
(a)                                             (b)                                              
Fig. 12. (a) A routing problem containing four terminals. (b) A possible 
assignment of V values to the routing problem (the leftmost vertex is the 
root). 
 
Fig. 13. Optimal result of a switchbox routing problem. 
 
(a) wire length = 17                           (b) wire length = 15 
Fig. 14. (a) An obstacle-avoiding rectilinear Steiner tree, and (b) an 
obstacle-avoiding rectilinear Steiner minimal tree (OARSMT). 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/23
國科會補助計畫
計畫名稱: 以平行化計算方法應用於類比積體電路之佈局圖設計自動化
計畫主持人: 曾奕倫
計畫編號: 99-2221-E-155-088- 學門領域: 積體電路及系統設計
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
(1) 本研究團隊、劉一宇助理教授之研究團隊、和林榮彬教授之研究團隊一起
獲得美國 Synopsys (新思科技) 公司之一個專題研究計畫的經費補助。 
 
(2) 本計畫主持人擔任 IJCSS (International Joint Conference on Service 
Sciences) 2011 之 Program Committee Member。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
