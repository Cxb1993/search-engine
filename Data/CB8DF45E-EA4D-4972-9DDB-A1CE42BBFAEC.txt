Author's personal copy
Hierarchically organized layout for visualization of biochemical pathways
Jyh-Jong Tsay, Bo-Liang Wu*, Yu-Sen Jeng
Department of Computer Science & Information Engineering, National Chung-Cheng University, 168, University Rd., Min-Hsiung, Chia-Yi 621, Taiwan, ROC
1. Introduction
Visualization of pathways always poses a challenge to bio-
researchers. Though the idea is simple, drawing of complex
pathways is not easy. In the past, pathways were drawn on papers.
Recently, several pathway editors [1–3] have been developed. Such
editors provide graphical interfaces, and graphical components
that match pathway components. However, pathway data is
increasingly large, and frequently updated. That makes drawing
and maintaining of pathway data tedious and time-consuming,
even we use graphical editors. A solution to the problem is to
develop software tools that can automatically layout and visualize
pathways.
One of the main problems in automatic pathway drawing is the
layout problem. We can transform the relation between pathway
components into a directed graph, and the drawing problem then
becomes a graph layout problem. There are twowell-known graph
layout approaches: hierarchical layout [4–6] and forced directed
layout [7,8]. However, both approaches can only handle simple
pathway structures such as hierarchies and cycles. Recently, a
number of approaches [9–12] have been proposed to layout
pathways. In [9], Karp and Paley gave a pioneering work in which
they pointed out that rather than searching for one single, all-
purpose graph layout algorithm, different algorithms should be
applied to parts of the pathway with different topologies. They
devised an algorithm for drawing metabolic pathways which
breaks the graph into cyclic, linear and tree-structured compo-
nents and then applies different layout methods to each of these
individually. Their algorithm has been implemented in MetaCyc
[10] that will be used in this paper as a baseline to evaluate our
approach. In [11], Becker and Rojas presented an algorithm that
combines circular, hierarchical and force-directed layouts. Their
approach is particularly designed for pathways that have a main
cycle. In [12], Li and Kurata proposed a LK-grid layout algorithm
that applies force-directed layout over grid points. They employed
a cost function deﬁned over connection structures in the graph. LK-
grid layout is the ﬁrst algorithm to produce clustered layouts in
which nodes involved in the same functional module are clustered
together. LK-grid layout has been integrated into CADLIVE [13] for
automatic generation of pathway visualization. However, as
observed from the examples in [13], LK-grid layout can induce
Artiﬁcial Intelligence in Medicine 48 (2010) 107–117
A R T I C L E I N F O
Article history:
Received 14 August 2008
Received in revised form 25 June 2009
Accepted 30 June 2009
Keywords:
Pathway layout
Forced-directed layout
Hierarchical layout
Pathway visualization
A B S T R A C T
Objective: Many complex pathways are described as hierarchical structures in which a pathway is
recursively partitioned into several sub-pathways, and organized hierarchically as a tree. The
hierarchical structure provides a natural way to visualize the global structure of a complex pathway.
However, none of the previous research on pathway visualization explores the hierarchical structures
provided by many complex pathways. In this paper, we aim to develop algorithms that can take
advantages of hierarchical structures, and give layouts that explore the global structures as well as local
structures of pathways.
Methods: We present a new hierarchically organized layout algorithm to produce layouts for
hierarchically organized pathways. Our algorithm ﬁrst decomposes a complex pathway into sub-
pathway groups along the hierarchical organization, and then partition each sub-pathway group into
basic components. It then applies conventional layout algorithms, such as hierarchical layout and force-
directed layout, to compute the layout of each basic component. Finally, component layouts are joined to
form a ﬁnal layout of the pathway. Our main contribution is the development of algorithms for
decomposing pathways and joining layouts.
Results: Experiment shows that our algorithm is able to give comprehensible visualization for pathways
with hierarchies, cycles as well as complex structures. It clearly renders the global component structures
as well as the local structure in each component. In addition, it runs very fast, and gives better
visualization for many examples from previous related research.
 2009 Elsevier B.V. All rights reserved.
* Corresponding author. Tel.: +886 5 2720411x23123; fax: +886 5 2720859.
E-mail addresses: tsay@cs.ccu.edu.tw (J.-J. Tsay), wpl@cs.ccu.edu.tw (B.-L. Wu),
cys92@cs.ccu.edu.tw (Y.-S. Jeng).
Contents lists available at ScienceDirect
Artificial Intelligence in Medicine
journa l homepage: www.e lsev ier .com/ locate /a i im
0933-3657/$ – see front matter  2009 Elsevier B.V. All rights reserved.
doi:10.1016/j.artmed.2009.06.002
Author's personal copy
In this paper, we will use hierarchical layout for pathways that
are hierarchies.
Some research [19,20] has proposed to integrate evolutionary
search, such as genetic algorithms. Though this kind of approaches
could intuitively achieve a nice solution, running time is still an
issuewhen drawing large graphs.Wewill not consider them in this
paper.
3. Hierarchically organized layout
In this section, we present our layout algorithm HOLY for
hierarchically organized pathways that are recursively partitioned
into sub-pathways, and represented as trees. HOLY was imple-
mented in Java with Eclipse platform [21]. It is able to run under
both Windows XP and Linux.
3.1. Representation of pathway data
Hierarchically organized pathways are described in two XML
ﬁles as illustrated in Fig. 2. The top part gives data records for
compounds and reactions, and the bottom part gives data records
for pathways. In the top part, each hentryi block gives a data record
for a compound, including compound id, name and nickname. Each
hreactioni block gives a data record for a reaction, including
reaction id, name, EC number, substrates and products. In the
bottompart, each hpathwayi block gives data record for a pathway,
including pathway id, type, name, dlinks, parent pathways and
child pathways. The hdlinki blocks give reactions in the pathway. In
hdlinki block, ‘‘id’’ denotes id of the reaction in hdlinki, ‘‘idfrom’’
denotes primer substrate of the reaction, ‘‘idto’’ denotes primer
product of the reaction and ‘‘rxnid’’ denotes id of the reaction. The
Fig. 3. The hierarchical organization of super-pathway of glycolysis/TCA/Glyox-Bypass.
Fig. 4. Procedure for pathway decomposition.
J.-J. Tsay et al. / Artiﬁcial Intelligence in Medicine 48 (2010) 107–117 109
Author's personal copy
Fig. 7. Joining result for node insertion.
Fig. 8. Illustration of joining layouts.
J.-J. Tsay et al. / Artiﬁcial Intelligence in Medicine 48 (2010) 107–117 111
Author's personal copy
gives a high-level procedure for pathway decomposition. Two
types of grouping are performed: cycle grouping and overlap
grouping. Cycle grouping is to group sub-pathways whose
separation breaks global cycles, and overlap grouping is to group
sub-pathways who are highly overlapped. Note that cycles are
important features that usually form ‘‘backbones’’ of metabolic
processes. We thus group sub-pathways whose separation breaks
cycles to the same group. High degree of overlapping between sub-
pathways implies that they are highly related. We also group
highly overlapped sub-pathways to the same group. We set 30
percent of nodes as the threshold for overlap grouping. Consider
the pathway in Fig. 3. As sub-pathway TCA and Glyox-Bypass
highly overlap each other, they will be assigned to the same group.
The grouping procedure will produce 3 groups: two singleton
groups, one for glycolysis and the other for Pyruvdeh-rxn, and the
group composed of TCA and Glyox-Bypass. Note that global
structures can be naturally preserved as sub-pathway grouping is
performed along hierarchical trees.
Each sub-pathway group identiﬁed in grouping phase deﬁnes a
group pathway that is the union of all sub-pathways in that group.
In the partitioning phase, we examine each group pathway. If the
group pathway contains cycles, we then partition the pathway into
components so that cycles are extracted and preserved. In
particular, we will ﬁrst partition the group pathway into strongly
connected components, and then connect trivial components to
form maximal acyclic components. The stage produces a tree of
component groups. Each component is either strongly connected
or acyclic.
3.2.2. Component layout
In the layout stage, HOLY performs layout on each component.
We use force-directed layout for strongly connected components
to emphasize symmetry and uniform edge lengths, and hierarchi-
cal layout for acyclic components to stress the direction and ﬂow
within a directed graph. With careful selection of algorithms, our
implementation is able to produce layout in real time.
For efﬁciency, we use the force-directed layout developed by
Koren and Harel [22]. Unlike traditional node-by-node optimiza-
tion [16], Koren and Harel use the idea of axis-by-axis optimiza-
tion, which is a one-dimensional optimization and runs much
faster. Their method can be used for two-dimensional graph layout
by interleaving one-dimensional optimizations on x-coordinate
and y-coordinate.
For hierarchical layout, we use the algorithm developed by
Sugiyama et al. [5] that consists of four major steps: cycle removal,
layering, crossing reduction, x-coordinate assignment. We use the
greedy method in [4] to remove cycles and to layer nodes. As for
the crossing reduction, we use the layer-by-layer sweep approach
in [4] that keeps looping until no layer is rearranged. However, the
process to determine a permutation between two layers is very
slow. We thus apply the barycentric (BC) heuristic [5] to ﬁnd a
node ordering within a layer.
3.2.3. Layout joining
Before joining sub-pathways, we need to place junction nodes
that connect components on the boundary of each component
layout; otherwise joining them could cause a large number of edge
crossings. For example, in Fig. 5, the junction node between part (a)
and part (b) is not on their boundaries, and joining them causes a
large number of edge crossings as in part (c). Our solution is to
insert pseudo-nodes to push junction nodes outward to the
boundary of the layout. Our node insertion has two policies: one
for cycles and the other for hierarchies. As in Fig. 6, we insert
pseudo-nodes into both sides of a junction node that is in a cycle.
This will force the path containing the junction node to get ﬂipped
outward while forced-directed layout is performed. For hierar-
chies, we simply insert pseudo-nodes between the junction node
and its parent node. Junction nodes will then be pushed to the
bottom of the layout. Fig. 7 gives the joining result when the
junction node is placed on the boundary.
We next describe details to join component layouts. We
traverse the tree in a bottom-up fashion, and at each node, we join
all layouts from its child nodes. To join layouts, we choose a layout
as the ﬁrst main component, and join other layouts one at a time to
the main component. Fig. 8 gives an explanation of our joining
process. In step (1) we calculate the center of each layout which is
marked as a red crossing in Fig. 8. In step (2), we shift and attach
the new sub-pathway to the main component. Note that attaching
points are junction nodes where pathways split during decompo-
sition. In step (3), we ﬁx the attaching point, and rotate the new
component to maximize the distance between the two centers. To
join the third layout, we attach and rotate the third layout to
maximize the summation of distances from its center to other two
centers.
Let ci denote the center of the ith layout, ni denote the number of
nodes in the ith layout and d(ci, cj).denote the distance between
center ci and cj. To join the kth layout, we place the kth center in the
position that maximizes the summation of distances from the kth
center to other k  1 centers, weighted by the number of nodes in
each layout. Namely, the position of ck is chosen to maximizePk1
i¼1 dðck; ciÞni.
Conceptually, we need to search over all possible joining orders
to ﬁnd the best result. This will take time exponential to the
Fig. 11. Layout of Calvin Cycle by MetaCyc (a) and HOLY (b).
J.-J. Tsay et al. / Artiﬁcial Intelligence in Medicine 48 (2010) 107–117 113
Author's personal copy
Fig. 13. Comparison of layouts by CADLIVE (a) and HOLY (b).
Fig. 14. Layout of pathways comparison of layout by HOLY (a) and KEGG (b).
J.-J. Tsay et al. / Artiﬁcial Intelligence in Medicine 48 (2010) 107–117 115
Author's personal copy
ylate bypass. Part (c) shows that relations among the 4 sub-
pathways, one color for each one. Note that the black cycle and the
red cycle correspond to two different sub-pathways that should be
distinguished in the visualization. However, as in part (a), MetaCyc
draws only a circle. HOLY, as shown in part (b), gives two
connecting bubbles that clearly distinguish both cycles and
preserves the shape of each cycle. This example shows the
signiﬁcant feature of HOLY that is able to render both the global
structures and the local structures of complex pathways.
4.4. Comparison to CADLIVE
We also compare HOLY to CADLIVE for the metabolic pathway
given in [13] that is composed of pentose-phosphate, glycolysis
and TCA cycle. Fig. 13 gives the result. Both HOLY and CADLIVE
successfully produce clustered pathway layouts in which nodes in
the same sub-pathway are clustered together. However, HOLY
producesmuch better layout inside each cluster. In the layout from
CADLIVE, reactions (arcs) are entangled with each other, and the
structure of each cluster is difﬁcult to read. In the layout from
HOLY, the sub-pathway in the red area is drawn as a layout of
multiple hierarchies with long feedback arcs, which reveals the
real inner structure of that sub-pathway. The main structure of the
sub-pathway in the green area is a long path, and the sub-pathway
in the blue area consists of two overlapped cycles.
4.5. Comparison to KEGG
In Kyoto Encyclopedia of Genes and Genomes (KEGG) [23],
pathway maps are drawn by human, and stored in the computer
for retrieval. It is difﬁcult to take several pathways from the
databases, and study their relations in KEGG. In HOLY, it is easy to
join pathways selected from databases, For example, consider a set
of selected pathways that consists of 6 pathways: (1) TCA cycle and
glyoxylate bypass, (2) urea cycle, (3) glycolysis and pyruvate
dehydrogenase, (4) arginine biosynthesis, (5) proline biosynthesis
and (6) creatinine degradation. Note that in KEGG, these pathways
are distributed in several maps as shown in Fig. 14(b). It is difﬁcult
to study their interactions in maps from KEGG. Fig. 14(a) gives the
visualization produced by HOLY. With the joining capability of
HOLY, one can join these pathways, visualize and study their
relations in one map.
4.6. Running times of HOLY
HOLY runs very fast, usually accomplishing layout of a complex
pathway in seconds. For example, for the pathway in Fig. 14(a)
with 62 reactions, HOLY takes only 5 s in a computer with Intel
2.0 GHz CPU and 1024 MB RAMunderMicrosoftWindows XP. This
shows the performance of HOLY is good enough for use in
interactive applications.
5. Conclusion
In this paper, we present a layout algorithm HOLY for
hierarchically organized pathways. Experiment shows that HOLY
is able to give comprehensible visualization for pathways with
hierarchies, cycles as well as complex structures. HOLY renders
clearly both the global structures and the local structures of
complex pathways, is able to join any collection of pathways
selected from databases, and gives better visualization for many
examples from previous related research. In addition, HOLY runs
very fast, and has been used in [24] to develop an interactive
pathway visualization system that provides a graphical navigation
interface, pathway visualization, and access to detailed informa-
tion behind pathways.
Acknowledgements
This research was supported by National Science Council,
Taiwan, ROC, under grant NSC 98-2221-E-194-064-.
References
[1] Salamonsen W, Mok K, Kolatkar P, Subbiah S. BioJAKE: a tool for the creation,
visualization and manipulation of metabolic pathways. In: Paciﬁc symposium
on biocomputing. New Jersey: World Scientiﬁc Publishing Company; 1999. p.
392–400.
[2] Brandenburg FJ, Forster M, Pick A, Raitner M, Schreiber F. Biopath: exploration
and visualization of biochemical pathways. In: Graph drawing software,
mathematics and visualization. Germany: Springer Verlag; 2004. p. 215–36.
[3] Trost E, Hackl H, Maurer M, Trajanoski Z. Java editor for biological pathways.
Bioinformatics 2003;19(6):786–7.
[4] Eades P, Sugiyama K. How to draw a directed graph. Journal of Information
Processing 1990;13(4):424–37.
[5] Sugiyama K, Tagawa S, Toda M. Methods for visual understanding of hierar-
chical systems. IEEE Transactions on Systems Man and Cybernetic SMC
1981;11(2):109–25.
[6] Carmel L, Harel D, Koren Y. Combining hierarchy and energy for drawing
directed graphs. IEEE Transactions on Visualization and Computer Graphics
2004;10(1):46–57.
[7] Gansner ER, North SC. Improved force-directed layouts. In: International
symposium on graph drawing, lecture notes in computer science, 1547.
Germany: Springer-Verlag; 1998. p. 364–73.
[8] Fruchterman T, Reingold E. Graph drawing by force-directed placement.
Software-Practice and Experience 1991;21(11):1129–64.
[9] Karp PD, Paley S. Automated drawing of metabolic pathways. In: The 3rd
international conference on bioinformatics and genome research. New Jersey:
World Scientiﬁc Publishing Company; 1994. p. 225–38.
[10] MetaCyc encyclopedia of metabolic pathways. Available at http://metacy-
c.org/ (Accessed: 15 July 2006).
[11] Becker MY, Rojas I. A graph layout algorithm for drawingmetabolic pathways.
Bioinformatics 2001;17(5):461–7.
[12] Li W, Kurata H. A grid layout algorithm for automatic drawing of biochemical
networks. Bioinformatics 2005;21(9):2036–42.
[13] CADLIVE. Available at http://kurata21.bse.kyutech.ac.jp/cadlive (Accessed: 15
July 2006).
[14] Kato M, Magasaki M, Doi A, Miyano S. Automatic drawing of biological net-
works using cross cost and subcomponent data. Genome Informatics
2005;16(2):22–31.
[15] Pinney JW, Westhead DR, McConkey GA. Petri Net representations in systems
biology. Biochemical Society Transactions 2003;31(6):1513–5.
[16] Kamada T, Kawai S. An algorithm for drawing general undirected graphs.
Information Processing Letters 1989;31(1):7–15.
[17] Friedrich C, Schreiber F. Flexible layering in hierarchical drawings with nodes
of arbitrary size. In: 27th Conference on Australasian computer science. New
York: ACM; 2004. p. 369–76.
[18] Sugiyama K. A cognitive approach for graph drawing. Cybernetics and Systems
An International Journal 1987;18(6):447–88.
[19] Masui T. Evolutionary learning of graph layout constraints from examples. In:
ACM symposium on user interface software and technology. New York: ACM;
1994. p. 103–8.
[20] Barreto AMS, Barbosa HJC. Graph layout using a genetic algorithm. In: VI
Brazilian symposium on neural networks. Los Alamitos, USA: IEEE Computer
Society; 2000. p. 179–84.
[21] Eclipse.org. Available at http://www.eclipse.org/ (Accessed: 5 August 2007).
[22] Koren Y, Harel D. Axis-by-axis stress minimization. In: 11th International
symposium on graph drawing. Germany: Springer Verlag; 2003. p. 450–9.
[23] Kanehisa M, Goto S. KEGG: kyoto encyclopedia of genes and genomes. Nucleic
Acids Research 2000;28(1):27–30.
[24] Jeng Y-S. VisualPathway: biochemical pathway layout and visualization sys-
tem. Master thesis. Department of Computer Science and Information Engi-
neering, National Chung-Cheng University; 2006.
J.-J. Tsay et al. / Artiﬁcial Intelligence in Medicine 48 (2010) 107–117 117
mining, machine learning, pattern recognition, computational biology 以
及其他相關領域.。本人除全程參與會議之外，並發表論文一篇。論
文內容除了受到參與者熱烈討論之外，所提出之方法也頗受相關學者
的肯定。 
 
二、與會心得與建議 
生物醫學工程系統與技術國際聯合會議(BIOSTEC)由四個相關國際研
討會組成，為歐洲重要的國際會議之一，今年首度增加生物資訊國際
研討會，讓生物資訊學者有機會發表論文並同時參加其他相關研討
會，與更多相關學者交流，是一個非常值得參加的國際會議。 
 
98年度專題研究計畫研究成果彙整表 
計畫主持人：蔡志忠 計畫編號：98-2221-E-194-064- 
計畫名稱：生化反應路徑的階層組織佈局視覺化方法設計與實作 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 4 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
