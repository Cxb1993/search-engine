超深次微米數位電路漏電流最佳化軟體系統之建置
Implementation of Leakage Current Optimization System for UDSM Digital Designs
計畫編號：NSC95-2221-E-018-024
執行期間：95 年 8 月 1 日 至 96 年 10 月 31 日
主持人：吳宗益 彰化師範大學電子工程學系助理教授
一、中英文摘要
雖然積體電路的製程技術已進步到超深次微米的時
代，不過使用超深次微米製程所衍生的新問題也為積體
電路設計業者帶來前所未有的挑戰。例如、漏電流變大
造成嚴重的功率消耗問題。
對互補性金屬氧化半導體（CMOS）而言，要減少
數位積體電路的漏電流可從半導體的製程、邏輯閘的設
計與使用等方面著手。在此計劃，我們利用三項主要的
技術來減低晶片內邏輯電路的漏電流。分別為「閘代
換」、「輸入向量控制」與「控制點插入」，其他我們
會使用的次要技術還有邏輯閘的腳位置換（ Pin
Reordering）等。
根據我們在「93 年國科會小產學計畫」的研究成果
得知—利用邏輯閘的代換可以達到減少部分電路的漏電
流。而根據相關學者的研究得知—對睡眠狀態的電路指
定輸入向量與控制點的邏輯值能有效減少該電路的漏電
流。但由於尋找最佳的指定輸入向量與控制點的值是
NP-Hard 的問題， 所以此計畫希望能研發出一個既快速
且結果不錯的新型演算法來解決「指定輸入向量與控制
點」之問題。
在此計畫我們整合先前發展的標準元件漏電流特徵
抽 取 程 式 （ Cell Leakage Current Characterization
Program）、閘代換程式原型、與即將研發的「指定輸入
向量與控制點之程式」成一漏電流最佳化系統，該系統
可以處理以Verilog描述的邏輯電路，並可回報處理前後
電路的漏電流消耗值。
英文摘要
The challenges for UDSM (Ultra Deep Sub-Micron) IC
designers are many, e.g. higher leakage current of transistors.
Obviously, higher leakage current can cause significant
power consumption.
For a CMOS circuit, we can control its leakage current
by adjusting the semiconductor process, the logic gate design,
the logic synthesis, etc. In this project, we will use three
major techniques to reduce the leakage current of a logic
design. They are gate replacement, input vector control, and
control point insertion. Some minor techniques also will be
used in this project, e.g. pin reordering.
Based on the research result of our 2004 NSC’s project
and the related research results of other authors, we know
that gate replacements, input vector control, and control
point insertion are useful to reduce the leakage current of a
logic design operating on sleep mode. However, leakage
current optimization problem is an NP-Hard problem, and
therefore we wish to create a heuristic algorithm that can
quickly find a good solution for this problem.
In this project, we integrate Cell Leakage Current
Characterization Program, Gate Replacement Program, and
Input Vector and Control Point Generation Program to be a
leakage current reduction system. The prototypes of the first
two programs have already been developed by us in our
previous NSC’s project while Input Vector and Control
Point Generation Program will be developed in this project.
The expected leakage current reduction system can process
logic designs described by Verilog hardware description
language, and report the leakage current values of the pre-
processed circuit and the post-processed circuit.
Definition 1 Lkg_of_dsgn(D, CPV) is defined as the
leakage current of D with the control-point vector CPV.
Obviously, Lkg_of_dsgn(D, CPV) is unknown if CPV is
nondeterministic. However, the expected value of the leakage
current for a nondeterministic control-point vector is not
unknown because it can be calculated.
Definition 2 Let E[Lkg_of_dsgn(D, CPV)] be the expected
value of Lkg_of_dsgn(D, CPV).
Definition 3 Lkg_of_gate(gh, D, CPV) is defined as the
leakage current of the gate gh of D with the control-point
vector CPV. Let E[Lkg_of_gate(gh, D, CPV)] be the expected
value of Lkg_of_gate(gh, D, CPV).
Theorem 1 Given any CPV, then E[Lkg_of_dsgn(D, CPV)]
=

m
j 1
E[Lkg_of_gate(gj , D, CPV)]
Proof: Assume FDCPV(CPV) = {DCPV1 , DCPV2 ,…, DCPVk},
and let P(V=DCPVh) be the probability that DCPVh is chosen from
FDCPV(CPV), where V is a random variable. By probability
theorem, we know that
E[Lkg_of_dsgn(D, CPV)]
=

k
i 1
[P(V=DCPVi) * Lkg_of_dsgn(D, DCPVi)] (1)
=

k
i 1
{P(V=DCPVi) *

m
j 1
[Lkg_of_gate(gj , D, DCPVi)]}
=

m
j 1


k
i 1
[P(V=DCPVi) * Lkg_of_gate(gj , D, DCPVi)]
=

m
j 1
E[Lkg_of_gate(gj , D, CPV)]
B. Time Complexity of Computing E+[Lkg_of_dsgn(D, CPV)]
In a design D, the probabilities of logic values of all input
pins of all gates are computable if the probabilities of logic
ONE and logic ZERO of all primary inputs and all flip-flops’
outputs are known. The worst-case time complexity of this
computation is only O(m) if D has m gates and each gate of D
only has probability-independent input pins. The reason is
that the probability of being ONE or being ZERO of the
output pin of each gate can be computed by O(2p), where p is
the number of the input pins of the gate. O(2p) can be
rewritten as O(1) because p is a small constant for each gate
in a typical standard cell library. Therefore, calculating the
probability data of m gates takes O(m) (= O(2p)*O(m)). In our
algorithm, all input pins of each gate are treated as
probability-independent pins for achieving the requirement of
O(m) time complexity. Hence, in our algorithm, the computed
probability data of those gates that have probability-
dependent pins are approximate values rather than exact ones.
Fig. 1 illustrates how to calculate the probability data of net
C. In this figure, let P(C=0) (P(C=1)) be the probability of net
C being logic ZERO (ONE). The probability data of each
primary input (i.e. TEST, A, and B) are given by us. We can
directly calculate the probability data of net C by taking O(1)
(= O(22)) because the probability data of ports A and B are
known. As with the probability data of net C, then, we are
able to calculate the probability data of ports Y and Z. Fig. 2
shows the final result.
Similarly, we can calculate the expected value of leakage
current of a gate by constant time (O(1)) if the probabilities of
logic values of all input pins of the gate are known. By
Theorem 1, we know that the expected leakage current of a
design is the sum of the expected values of all m gates’ 
leakage currents, so the total time complexity of computing
E[Lkg_of_dsgn(D, CPV)] is O(m) (= O(1)*O(m)+O(m),
where the last O(m) is consumed in computing the
probabilities of logic values of all input pins of all gates).
However, if we use (1) rather than Theorem 1 to calculate the
expected leakage current of this design, the time complexity
of the worst case is O(m*2n) rather than O(m), where n is the
dimension of CPV of the design. The reason is that the value
of k in (1) is 2n under the worst case.
E[Lkg_of_dsgn(D, CPV)] is a cost function used in our
algorithm to judge the quality of an explored CPV. Fig 2
illustrates how to compute the value of E[Lkg_of_dsgn(D,
CPV)]. In this illustration, the probability data have been
computed and labelled in each net. The leakage current data
of NAND gate and NOR gate are listed in Table I. Because
E[Lkg_of_dsgn(D, CPV)] used in our algorithm may be an
approximate value rather than an exact one if design D has
any gate that has probability-dependent input pins, we use
E+[Lkg_of_dsgn(D, CPV)] notation instead of
E[Lkg_of_dsgn(D, CPV)] notation in the algorithm in order
to avoid confusion of readers.
C. Algorithm
In this subsection, we propose an algorithm for leakage
current reduction. For an inputted original design DO with a
given CPVI (i.e. Inherent CPV) in the sleep mode,
ALGORITHM 1 tries to find a deterministic CPVM (i.e.
Minimum Leakage CPV) that is used to construct a new
design DN from DO such that E[Lkg_of_dsgn(DN, CPVI)] is as
less as possible. Under the normal mode, DN and DO are
functionally equivalent.
CPVI is given by circuit designers. If the designers know
that some primary input signal is always ZERO (always ONE)
then its corresponding element in CPVI is assigned 0 (1) by
Fig. 1: An illustration of how to calculate the probability data of net C.
A rs
B
u
tTEST
0:100%, 1:0%
0:50%, 1:50%
0:50%, 1:50%
Design D, CPV=(0,X,X)
C
Y
Z
P(C=0) = P(A=1) * P(B=1)
= 50% * 50%
= 25%
P(C=1) = 1–P(C=0)
= 75%
Fig. 2: An illustration of how to calculate E[Lkg_of_dsgn(D, CPV)].
E[Lkg_of_dsgn(D, CPV)] =
E[Lkg_of_gate(gate s, D, CPV)] +
E[Lkg_of_gate(gate t, D, CPV)] +
E[Lkg_of_gate(gate u, D, CPV)] =
[(0.79+5.38+3.03+7.23)*(50%*50%)] +
[(7.71*100%*25%)+(2.38*100%*75%)] +
[(7.71*100%*25%)+(2.38*100%*75%)] = 11.53
A rs
B
u
tTEST
0:100%, 1:0%
0:50%, 1:50%
0:50%, 1:50%
0:25 %,
1:75%
0:75%,
1:25%
Design D, CPV=(0,X,X)
0:75%,
1:25%
the overhead of the controller during solution space
exploration. Ignoring the overhead may bring a side effect
that is misrecognizing a non-optimum solution as an optimum
one. We will give an example in the next paragraph.
Because ALGORITHM 1 can allow circuit designers to input
a CPVI but traditional techniques cannot, our technique
usually can find a better solution than the traditional ones. We
use a very simple design (i.e. a NAND gate) shown in Fig. 5
to explain this fact. The traditional techniques will find a
CPVM = (0, 0) for this design because NAND gate has the
minimum leakage current when A=0 and B=0. However, the
CPVM found by our algorithm is (1, 0) (i.e. CPVM = (1, 0))
rather than (0, 0) because our algorithm has the information
that CPVI is (1, 0). If designers want to implement the simple
design with CPVM = (0, 0), they must insert an AND gate
named g to the original design as shown in Fig. 5. Comparing
the DNs constructed by our technique and by the traditional
techniques, we find that our DN has less area, delay, and
leakage current than their DN.
四、實驗(Experiments)
We have implemented a leakage current reduction system
named Leakage Current Solver on an IBM xSeries 235 server
that has two 3.06GHz Intel Xeon processors. Leakage Current
Solver employs ALGORITHM 1 to construct a new design that
consumes less leakage current than the original one. The new
design nearly does not consume any dynamic power under
sleep mode because the switching signals on the primary
inputs cannot pass through the CPV controller to trigger the
internal gates of the design.
In order to evaluate the quality of our algorithm and
system, some representative MCNC and ISCAS benchmark
circuits are used in the experiments.
A 90nm CMOS standard cell library is used in the
experiments. It is constructed by shrinking TSMC 0.18um
standard cells. BPTM [10] process model is used in the
leakage library characterization program of Leakage Current
Solver. All gate level netlists of the benchmarks used in the
experiments are synthesized by Design Compiler® of
Synopsys, Inc.
In the first experiment, we compare the experimental results
of an Exhaustive Search Program (ESP) with those of our
algorithm. The results are shown in TABLE II. In this
experiment, the functions of pin-reordering (line 18 of
ALGORITHM 1) and controller synthesis (line 17 of
ALGORITHM 1) of ALGORITHM 1 are turned off. In other word,
ALGORITHM 1 is treated as an MLV generator. All benchmark
circuits used in this experiment are small MCNC benchmark
circuits rather than large ones because ESP cannot solve a
large circuit within reasonable CPU time. These benchmark
circuits are also used in the experiment of [14].
Fortunately, our algorithm can find the optimum solutions on
all benchmark circuits except for f51m, 9symml, alu2 and cu
(column 10). If the function of pin-reordering in ALGORITHM
1 is turned on, the total leakage current of all circuits
constructed by our algorithm is less than the total ESP’s
minimum and maximum leakage currents by 7% and 24%,
TABLE II
EXPERIMENTAL RESULTS FOR EXHAUSTIVE SEARCH AND ALGORITHM 1
(†Functions of pin reordering and controller synthesis are turned off.)
Exhaustive Search ALGORITHM 1† Comparison
leakage
(nA)
Bench-
marks #PI
Area
(um2)
min.
(L1)
max.
(L2)
CPU
time
(s)
leakage
(nA)
(L3)
CPU
time
(s)
CPU
time
red.
L3–L1
L1
L2–L3
L2
b1 3 27 2.6 3.6 0.00 2.6 0.00 – 0% 28%
cm42a 4 62 4.7 6.1 0.00 4.7 0.00 – 0% 23%
C17 5 17 1.5 2.3 0.00 1.5 0.00 – 0% 35%
cm82a 5 55 5.6 6.8 0.00 5.6 0.00 – 0% 18%
decod 5 78 4.7 7.0 0.00 4.7 0.00 – 0% 33%
cm138a 6 55 3.4 6.5 0.01 3.4 0.01 0% 0% 48%
z4ml 7 59 6.0 7.1 0.01 6.0 0.01 0% 0% 15%
f51m 8 274 27.3 31.9 0.05 28.0 0.02 60% 2.6% 12%
9symml 9 140 14.7 16.7 0.06 14.9 0.01 83% 1.4% 11%
alu2 10 885 89.9 98.6 0.72 90.0 0.11 84% 0.1% 9%
x2 10 113 8.7 13.7 0.08 8.7 0.01 88% 0% 36%
cm85a 11 121 11.1 16.2 0.18 11.1 0.01 94% 0% 31%
cm151a 12 65 6.4 7.7 0.19 6.4 0.01 95% 0% 17%
alu4 14 2274 222.1 246.3 90.79 222.1 0.44 100% 0% 10%
cm162a 14 111 9.7 13.7 1.31 9.7 0.02 98% 0% 29%
cu 14 126 9.5 15.0 1.40 10.2 0.03 98% 7.4% 32%
cm163a 16 98 8.2 12.2 4.76 8.2 0.01 100% 0% 33%
cmb 16 80 4.7 8.8 3.52 4.7 0.01 100% 0% 47%
parity 16 159 16.4 20.1 9.70 16.4 0.03 100% 0% 18%
pm1 16 100 7.0 12.9 4.55 7.0 0.03 99% 0% 46%
t481 16 88 8.1 11.9 4.08 8.1 0.02 100% 0% 32%
tcon 17 65 6.4 7.7 0.12 6.4 0.01 92% 0% 17%
pcle 19 165 14.8 19.4 66.46 14.8 0.03 100% 0% 24%
sct 19 179 15.4 22.6 69.78 15.4 0.04 100% 0% 32%
cc 21 126 10.4 16.8 192.00 10.4 0.02 100% 0% 38%
cm150a 21 115 11.6 13.7 334.60 11.6 0.03 100% 0% 15%
Average 12 216 20.4 24.8 30.17 20.5 0.04 85% 0.4% 27%
Design DN, CPVM = (0,0)
A
B
g
s
Sleep
Design DN, CPVM = (1,0)
A rsB Y
area = 1.5 um2, delay = 0.02 ns
leakage = 3.03 nA
Fig. 5: An example to illustrate the difference between our algorithm
and the traditional techniques.
A rsB
Design DO, CPVI = (1,0)
Y
Our Algorithm
Traditional
Techniques
Y
area > 1.5 um2, delay > 0.02 ns
leakage > 3.03 nA
CPVI = (value of A, value of B) = (X, 1); CPVM = (0, 1);
Fig. 4: (a) Design DO. (b) Design DN.
(a)
A CKT
B
DO
A
g
(b)
CKT
B
DN
Sleep
CPVI
六、成果(Achievement)
此計畫的研究成果已寫成論文並發表在 2007 年舉辦
的 ASP-DAC 上，論文題目為“A Fast Probability-Based
Algorithm for Leakage Current Reduction Considering
Controler Cost”.
七、參考文獻(References)
[1] N. Jayakumar and S. P Khatri, “An ASIC Design Methodology
with Predictably Low Leakage, Using Leakage-immune Standard
Cels,”ISLPED’03, Aug. 2003, pp. 128–133.
[2] H. Kim and Y. Shin, “Analysis and Optimization of Gate
Leakage Current of Power Gating Circuits,” Proc. of ASP-DAC, Jan.
2006, pp. 565–569.
[3] N. Hanchate and N. Ranganathan, “LECTOR: A Technique for
Leakage Reduction in CMOS Circuits,” IEEE Trans. on VLSI
Systems, 2004, pp. 196–205.
[4] Hyo-Sig Won, Kyo-Sun Kim, Kwang-Ok Jeong, Ki-Tae Park,
Kyu-Myung Choi and Jeong-Taek Kong, “An MTCMOS Design 
Methodology and Its Application to Mobile Computing,” 
ISLPED’03, August 2003, pp.110–115.
[5] L.Wei, Z. Chen, M. Johnson, K. Roy and V. De, “Design and 
Optimization of Low Voltage High Performance Dual Threshold
CMOS Circuits”, Proc. of DAC, June 1998, pp 489–494.
[6] B. H. Calhoun, F. A. Honore and A. P. Chandrakasan, “A
Leakage Reduction Methodology for Distributed MTCMOS,”IEEE
Journal of Solid-State Circuits, May 2004, pp. 818–826.
[7] S. Sirichotiyakul, T. Edwards, Oh Chanhee, R. Panda, and D.
Blaauw, “Duet: an Accurate Leakage Estimation and Optimization
Tool for Dual-Vt Circuits,”IEEE Trans. on VLSI Systems, Apr. 2002,
pp. 79–90.
[8] M. Ketkar and S. S. Sapatnekar, “Standby Power Optimization 
via Transistor Sizing and Dual Threshold Voltage Assignment,” 
Proc. of ICCAD, Nov. 2002, pp. 375–378.
[9] D. Lee, H. Deogun, D. Blaauw and D. Sylvester, “Simultaneous 
State, Vt and Tox Assignment for Total Standby Power
Minimization,” Design, Automation and Test in Europe Conference
and Exhibition (DATE), 2004, pp. 494–499.
[10] http://www-device.eecs.berkeley.edu/~ptm
[11] F. Aloul, S. Hassoun, K. Sakallah, and D. Blaauw, “Robust 
SAT-Based Search Algorithm for Leakage Power Reduction,” 
International Workshop on Integrated Circuit Design, 2002, pp.
167–177.
[12] A. Abdollahi, F. Fallah and M. Pedram, “Leakage Current 
Reduction in CMOS VLSI Circuits by Input Vector Control,”IEEE
Trans. on VLSI Systems, Feb. 2004, pp. 140–154.
[13] F. Gao and J. P. Hayes, “Exact and Heuristic Approaches to 
Input Vector Control for Leakage Power Reduction,” Proc. of
ICCAD, 2004, pp. 527–532.
[14] L. Yuan and G. Qu. “Enhanced Leakage Reduction Technique
by Gate Replacement,” Proc. of DAC, June 2005, pp. 47–50.
[15] J. P. Halter and F. N. Najm, “A Gate-Level Leakage Power
Reduction Method for Ultra-Low-Power CMOS Circuits,” Proc. of
IEEE Custom Integrated Circuits Conference, 1997, pp. 475–478.
[16] D. Lee and D. Blaauw, “Gate Oxide Leakage Curent Analysis 
and Reduction for VLSI Circuits,” IEEE Trans. on VLSI
Systems, Feb. 2004, pp. 155–166.
[17] D. Lee, W. Kwong, D. Blaauw and D. Sylvester, “Analysis and
Minimization Techniques for Total Leakage Considering Gate Oxide
Leakage,” Proc. of DAC, June 2003, pp. 175–180.
[18]R. M. Rao, F. Liu, J. L. Burns and R. B. Brown, “A Heuristic to 
Determine Low Leakage Sleep State Vectors for CMOS
Combinational Circuits,” Proc. of ICCAD, 2003, pp. 689–692.
[19] K. Chopra and S. B. K. Vrudhula, “Implicit Pseudo Boolean
Enumeration Algorithms for Input Vector Control,”Proc. of DAC,
June 2004, pp. 767–772.
[20] M. C. Johnson, D. Somasekhar, and K. Roy, “Models and 
Algorithms for Bounds on Leakage in CMOS Circuits,” IEEE Trans.
on CAD, 1999, pp. 714–725.
