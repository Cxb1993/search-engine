applications require higher and higher data rate and flexible and friendly utilization, the extra high 
speed and low power consumption requirements make the design a very challenge task to conquer. 
With the advance of VLSI technology, the speed requirement is easy to achieve.  However, 
more efforts have to be taken to lower power consumption under the speed requirements.  Thus, 
the low power design has been the focus of FFT implementation.  It can be achieved from 
algorithm, architecture, logic, layout to device level.  Algorithm and architecture levels for the low 
power design will be emphasized in this sub-project.  In FFT processing, most of the power 
consumptions go to the operations of complex multiplications and memory access.  Thus, most of 
the publications discuss how to reduce the number of complex multiplications and memory 
accesses. 
 
三、 結果與討論 
 
Algorithm Factorization and Analysis: 
The vector-matrix form of N-point Discrete Fourier transform (DFT) can be expressed as 
   ˆ ˆ ,l N lX TW x= ⋅               (1) 
where lˆx and ˆ lX are N by 1 linear order input and output column vectors, respectively.  It is 
well-known that the twiddle factor matrix TWN cannot be factorized directly.  Moreover, the VLSI 
oriented algorithm-specific structures such as single-path delay feedback (SDF) [1-2] and 
multi-path delay commutator (MDC) [3] cannot be directly mapped from the matrix TWN.  In 
order to partition the matrix, it has to be pre- or post-multiplied by a bit-reverse or digit-reverse to 
get the decimation-in-frequency (DIF) matrix TN as follows: 
                (2) ,
.N
1
0
. 
N NT DR TW= ⋅
or the decimation-in-time (DIT) matrix QN as follows: 
                (3) N NQ TW DR= ⋅
 If the number N is a product of two arbitrary factors K and R, the DIF twiddle matrix TN can be 
expressed as cascading two smaller DIF twiddle matrices TK and TR with a multiplicative stage 
inserted between them as 
           (4) 
1 1
0 0
n
R R
b
N K R K K R K
n n
T T T T I
− −
×
= =
= =  ⋅  Ω ⋅ ⊗ .    ⊕ ⊕
Similarly, we can derive the Kronecker product [4] recursive factorization equation for the DIT 
twiddle matrix QN as 
          (5) 
1 1
0 0
n
R K K
b
N K R K R R R
n n n
Q Q Q I Q
− − −
×
= = =
= =  ⊗ ⋅  Ω ⋅  ⊕ ⊕ ⊕
Based on (4) and (5), almost all the FFT radix-rx or mixed radix-rx algorithms including 
parallel and pipeline algorithms and architectures can derived and mapped.  The hardware 
structures including the butterfly complex adders, complex multipliers, and memory buffers can be 
individually directly mapped from their associated matrices.  It can be obviously seen from (4) and 
multiplications.  The rounding errors for the red figures come the multiplications of twiddle factors 
.  From these observations, we can see that given an output noise constraint we 
can reduce the overall hardware complexity or power consumption based on the noise contributed 
by multipliers.  The figures shown in Table 1 are based on the theoretic analysis.  The MATLAB 
software simulation results based on the canonic signed digit (CSD) multiplier-less approach are 
very close to theoretic calculations.  The MATLAB simulation results with 8-bit input for 7 
different structures are shown in Figure 1.  IT can be seen that there are about 6dB difference for 
the first two structures shown in Table 1 and all the other structures are placed between them.   
1 2 1
128 128 128, ,W W WL 5
  
8 9 10 11 12 13 14 15 16
28
30
32
34
36
38
40
Multiplier Hardware Complexity (# of Bits) of FFT Structures
E
rro
r E
ne
rg
y 
in
 d
B
FFT Rounding Error vs. Hardware Complexity with 8-Bit Input
2x(2x(2x(2x(2x(2x2)))))
((2x2)x2)x((2x2)x(2x2))
((2x2)x(2x2))x((2x2)x2)
2x(((2x2)x2))x((2x2)x2))
(((2x2)x2))x((2x2)x2))x2
(((2x2)x2)x(2x2))x(2x2)
(((((2x2)x2)x2)x2)x2)x2
  Figure 1. Rounding effects on 8 different FFT structures with 8-bit input 
Table 2. Normalized rounding errors with novel multiplier-less approaches 
for 8 different 129-point FFT algorithms when compared with the theoretic results 
  
  Table 3 shows the simulation results for the multiplier-less twiddle factor .  It is a fully 
testing for a variety of input data widths and hardware complexity.  The column Δ means the 
maximum rounding error and the column "Energy" indicates the accumulated errors.  It can be 
seen that the total errors can be reduced only when non-zero bits associated with (6) are computed.  
This means that the FFT output noise might not be decreased if the hardware complexity is 
increased by one bit.  Therefore, based on the required error performance requirement, the CSD 
multiplier-less approach is not a good candidate to control the hardware complexity for each 
multiplier to get an optimum performance. 
1
8W
  To conquer the problem, we will propose a novel multiplier-less approach that can control the 
hardware complexity and numerical performance.  Table 4 shows the MATLAB simulation results 
for the most frequently used twiddle factors and .  It can 
be seen that the numerical performance for these coefficients is very close and the errors are 
reduced by half as the hardware complexity is increased by one bit.  In general, the number of 
additions or adders required for the new approach is lower than that for the CSD approach. 
1
16 (0.923, 0.382)W = − 216 (0.707, 0.707)W = −
  From Table 1, it can be seen that the twiddle factor in the first stage of 
and structures contributes more than one third of the total output error 
energy.  Similarly, the twiddle factors and in the second multiplicative stage of  
would provide more than half of the total rounding noise.  On the contrary, the 15 twiddle factors 
from toW  at the final multiplicative stage of T andT contribute 
only about 5% of total output noise.  Therefore, under the signal to noise constraint, we should 
have lots of choices to decide the hardware complexity for all the multipliers to reduce the total 
power consumption or the overall hardware complexity. 
1
8W
)))))
2 2 2(2 2 ) (2 2)
T × × ×
1
128W
2 22 ((2 2) (2 2))
T × × × ×
15
8
1
16W
2
16W 2 2(2 2) (2 2 )T × × ×
2 2))×
2
12 2 (2 (2 (2 (2 (2 2× × × × × × 22 ((2 2) (2× × ×
Table 4. Arithmetic performance analysis for the novel multiplier-less approach 
  
Hardware complexity comparison for the twiddle factor is shown in Table 5.  The 
drawback of the proposed approach is that each twiddle factor has to be individually designed and 
optimized based on the specific input length, hardware complexity and arithmetic performance.  
The critical path counts the total gate delays of operand additions and the total error energy is the 
accumulated error energy from the fully testing.  From the 8-bit, 10-bit, and 12-bit input cases, it 
can be seen that if some errors are allowed, the hardware complexity can be reduced and the speed 
can be increased. 
1
8W
