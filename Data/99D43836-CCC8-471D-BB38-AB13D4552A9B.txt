1 
 
行政院國家科學委員會補助專題研究計畫成果報告  
 
Media-To-Go：遠端多媒體資訊系統(3/3) 
 
計畫類別：整合型計畫 
計畫編號：NSC98-2220-E-194-001 
執行期間：98 年 11 月 1 日至 99 年 10 月 31 日 
 
計畫主持人：郭峻因  
共同主持人：朱元三、陳鵬升、羅習五、蘇慶龍、鄭經華 
計畫參與人員：陳慶儒、張智皓、簡呈安、林雨涵、王俊昆、蕭
詣懋、蔡佑慈 
成果報告類型(依經費核定清單規定繳交)：完整報告 
 
本成果報告包括以下應繳交之附件： 
□赴國外出差或研習心得報告一份 
□赴大陸地區出差或研習心得報告一份 
□出席國際學術會議心得報告及發表之論文各一份 
□國際合作研究計畫國外研究報告書一份 
 
處理方式：除產學合作研究計畫、提升產業技術及人才培育研究
計畫、列管計畫及下列情形者外，得立即公開查詢 
          　涉及專利或其他智慧財產權，□一年　□二年後可
公開查詢 
          
執行單位：國立中正大學資訊工程系 
 
中華民國 100 年 01 月 31 日 
3 
 
中文摘要 
對於經常到處商務旅行的電腦使用者而言，攜帶筆記型電腦並且利用遠端桌
面技術透過網路連線回到電腦主機，可以有效進行工作資料之存取與處理。但是
由於旅行地點網路頻寬之限制，目前使用遠端桌面技術對於動態畫面(如Flash 
video、Multimedia video、投影片動畫等) ，因為透過螢幕一張張畫面掃瞄方式
來呈現動畫，由於資料量太高而使得網路頻寬無法負荷，導致其播放效果往往不
理想(Motion 動作不流暢)，若是透過計算資源更缺乏的PDA來進行遠端桌面連
線，效果就更不理想了。除此之外，近端裝置與遠端裝置間也存在著畫面解析度
不同的問題，這些問題限制了透過遠端桌面技術進行多媒體資訊播放之相關應用
發展。 
有鑑於此，本計畫因應國科會晶片系統國家型科技計畫的第二期規劃主軸
Æ創造優質生活之兆級多元化整合技術之發展，朝向推動創新應用系統層級之研
發，並推動跨領域創造優質生活的創新產品開花結果，提升台灣未來於國際市場
競爭中的新核心競爭力來進行研究規劃，整合本校晶片系統研究中心之研究團隊
能量，基於現有於積體電路硬體設計、嵌入式軟體設計與 SOC 雛型系統平台等
研究成果，提出「Media-To-Go：遠端多媒體資訊系統」(如圖 1-1 所示)之目標導
向整合型計畫，擬將現行之遠端桌面技術與即時多媒體資訊編解碼技術
(H.264/SVC)相結合，藉由 H.264/SVC 多媒體編碼技術降低網路傳輸多媒體資料
之頻寬限制問題，同時也透過 SVC 可支援不同畫面解析度與資料頻寬品質之特
性，來讓近端裝置可以支援不同畫面大小之播放，並透過使用者介面來進行放大
/縮小視訊解析度與調整視訊畫質等互動功能(如圖 1-2 所示)，讓使用者可以透過
PDA， Laptop 等個人隨身多媒體裝置進行順暢之遠端多媒體播放，達到媒體帶
著走的設計目標，並因此衍生各種創新之遠端多媒體應用，以創造未來優質生活
之藍圖。同時我們也希望藉由此計畫，逐年完成數項具前瞻性 H.264/SVC 多媒
體 IP/Chip 設計，以提昇國內學術界創新技術之研發能量。 
5 
 
 
圖1-2：「Media-To-Go：遠端多媒體資訊系統」擬支援之互動功能概念 (以E-POD
為例) 
 
 
圖 1-3：Media To Go 系統雛型展示規劃 
 
  
 
7 
 
總計畫成果 
 
 
(一) Media To Go 系統介紹 
 
 為了達到媒體帶著走的目標，總計畫在三年期滿內成功整合各個子計畫，把
Media To Go 系統平台整合完畢，另外，如圖 2-1 所示，Media-to-Go 總計畫把動
態影像偵測系統(D.I.D.S)、平行化 SVC Encdoer，Bit-stream Adaption Unit 結合，
實作出一個可以根據連線者之運算或顯示能力、連線頻寬等資訊來傳送最適合於
連線者的 Bit-stream。如此一來，連線者無論運算能力強弱，都能享受到其連線
等級之最佳串流服務。 
 與期中系統架構相同，動態影像偵測系統首先判斷遠端畫面是動態或是靜態
影像，若為靜態影像，會透過 VNC 之預設 Protocol 傳送資料。若畫面為動態影
像，則會透過本計畫提出之平行化 SVC Encoder 壓縮 Bit-stream，因為 SVC 為
Scalable 之視訊壓縮方法，因此本計畫亦整合頻寬偵測演系統(Iperf)，及 bit-stream 
extractor，在 Multiple clients 的環境下，透過偵測不同 client 各自的傳輸頻寬，再
利用 extractor 來提取最適合於各個 Clients 的不同 level 之 bit-streams. 
  
 
圖 2-1: Media-to-Go 系統架構圖 
 
9 
 
子計畫一成果 
 
SVC 實現在硬體上的瓶頸除了運算量過大以外，就是硬體資源的使用，包
括頻寬及內部記憶體，尤其是 ME 與 MC 這兩個機置上占了大量硬體資源，就頻
寬而言，硬體編碼器必須頻繁地向外部記憶體(SDRAM 或 DDR-SDRAM)存取影
像資料，載入的資料[1]包括原始資料、ME 要使用的參考畫面資料、MC 要預測
的 chrominance 資料[2]，以及跨層要使用的底層 motion data、intra predicted data
及 residual data，除了資料載入編碼器內外，編碼器還要將處理好的資料存回外
部記憶體，否則內部記憶體會不敷使用，存回的資料包括 residual 資料、重建的
資料、預測的資料、motion 和 cost 資料，這些存回的資料是要給下一張或往上
一層 EL 的編碼使用。再來就是內部記憶體使用的問題，前面提到，編碼器會先
將需要處理的資料由外部記憶體載入到內部記憶體存放，如果內部記憶體的容量
小，編碼器重覆載入相同資料的次數就頻繁，也就是頻寬使用量大，相反的，若
內部記憶體有足夠的空間容納外部記憶體大部份的資料，編碼器就不需頻繁由外
部記憶體載入資料，而是向速度較快的內部記憶體存取資料，一來節省頻寬，二
來增加編碼速度，但要付出的代價是較大電路面積，較高的耗電量以及較高的成
本。 
針對上述問題，本計畫參考論文[3][4]提出 SVC 之適用於硬體資料共用與動
態調整搜尋範圍之整數點移動預測演算法，其方法為：找到每張畫面間存取資料
的共同性，讓這些共同的資料載入的次數達到最少，並將可共用的資料載入到內
部記憶體時讓所有相依於這些資料的機制一次處理完。再加上依影像的移動特性
達到動態調整 search range，配合硬體架構的需求，已達到節省頻寬與內部記憶
體的作用。 
 
(一) IME 演算法 
軟體在做 IME 時，是到 reference frame 搜尋和 current MB 做比對，尋找最
相似的 MB，IME 一般用 SAD 做比較，也就是將 current MB 和 reference frame
比對的 MB 相減取絕對值後，再將每一點的絕對值相加，SAD 最小的即為 ME
找到的最佳位置，稱為 motion vector (MV)，而參考畫面的中心點有二種，如圖
3-1~3-2 所示：原點及 PMV，一般都是 PMV，預測編碼效能比較好。但此優勢
卻會對硬體實現造成困難，雖然 PMV 有相似性，卻是沒有規則的相似，對硬體
ME 電路設計而言，很困難去判斷無規則性的相似性，如圖 3-3(b)所示，所有每
個 MB 都要載入一次 reference frame data，以一張 CIF 解析度的圖片來說，共有
99 個 MB，一張 Full HD 圖片則有 8160 個 MB，若每個 MB 都要重新載入一次
參考資料，資料就無共用性，也會耗費大量頻寬，所以硬體在實現 ME 這機制，
11 
 
蓋率均高達百分之八十，便可縮小 search range，使用小範圍的 search window，
再配合下面提出之 GOMB 資料共用演算法及動態調整 search range，減少頻寬及
內部記憶體的使用。 
 
表 3-1：D1(720x480)之 MV 覆蓋率 
Sequence Search center SR=64 SR=32 SR=24 SR=16
coral 
(0,0) 96.65% 89.16% 82.06% 74.95%
PMV 98.35% 96.27% 94.85% 93.43%
dolphins 
(0,0) 95.32% 85.35% 75.81% 66.26%
PMV 97.16% 92.88% 90.19% 87.49%
mountain 
(0,0) 99.42% 95.41% 88.61% 81.81%
PMV 99.67% 99.26% 98.92% 98.58%
stefan 
(0,0) 96.84% 90.68% 84.73% 78.77%
PMV 98.15% 95.29% 93.13% 90.97%
 
表 3-1：HD(1280x720)之 MV 覆蓋率 
Sequence Search center SR=64 SR=32 SR=24 SR=16
coral 
(0,0) 91.14% 79.75% 63.64% 45.72%
PMV 97.34% 94.90% 92.00% 88.63%
dolphins 
(0,0) 88.39% 71.57% 48.47% 29.80%
PMV 93.67% 88.25% 82.24% 76.55%
mountain 
(0,0) 85.06% 74.20% 58.68% 42.13%
PMV 98.65% 98.15% 97.28% 95.71%
stefan 
(0,0) 90.51% 77.22% 59.36% 38.73%
PMV 93.22% 88.66% 82.97% 76.16%
 
(二) GOMB 資料共用演算法 
如上段所提出，想讓 MB 和 MB 間的資料可以共用，每次載入的參考資料
位置是必須要有規律性的，用原點當中心，雖有規律性，但 MV 覆蓋率低，增
加編碼效能，就會增加頻寬及內部記憶體的使用；用 PMV 當中心，雖 MV 覆蓋
率高，但無規則性，硬體架構實現造成困難；針對這二者的優缺，本計畫參考論
文[3]IME 演算法中 group of MB (GOMB)的架構，既包含規律性的優點，MV 覆
蓋率也很高。 
 
(1) 群組化之巨集區塊 
Group of Macroblock (GOMB)：將數個 MB 組合成一個自定的群組，群組內
的 MB 都使用共同 PMV，具有規律性的優點，讓資料可以重疊，減少頻寬的需
求量。組合方式以 MBx ×MBy 代表，M 代表橫軸 MB 的數量，以下簡稱 MBx，
13 
 
SRx+3
SRy+3
SRx+3
SRy+3
2×(SRx+3)+16×MBx
2×(SR
y+3)+16×M
By
 
圖 3-6：GOMB 之 search window 
 
( )( ) ( )( )2 3 16 2 3 16x x y ySR MB SR MB bytes× + + × × × + + ×                             
式 3-1 
 
由於 MBx、MBy 和 SR 大小直接影響到內部記憶體的大小，其中 MBx、
MBy 會影響到一張畫面 GOMB 的數量，以一張畫面橫軸有 framewidth 個 MB，
縱軸有 frameheight 個 MB，若以 MBx×MBy 組合成一 GOMB，橫軸將會有
framewidth/MBx 個，縱軸有 frameheight/MBy，由於 MBy=1，所以一張畫面可以
分成2份的資料：data1和data2，圖3-7為3×1分組的範例，MBwidth為8，MBheight
為 3，圖 3-7(a)為橫軸和縱軸 MB 均能被 MBx 和 MBy 整除的資料，稱為 data1；
圖 3-7(b)橫軸不被 MBx 整除但縱軸能被 MBy 整除的資料，稱之 data2；下列算
式即為一張畫面 data1 和 data2 需要由外部記憶體載入的總參考畫面資料，如公
式 3-2： 
 
( )[ ] ( )[ ] ( ) ( )ywidthxwidthyyxx MB/frameMB/frameMB163SR2MB163SR21data ×××++×××++×=
 
( ) ( )[ ] ( ) ( )[ ]xwidthyxwidthx MB/frame163SR2MB%frame163SR22data ×++×××++×=            
式 3-2 
15 
 
 
所以後面的 IME 41 種 block type 都是使用 16×16 的 PMV 為 search center，
表 3-4 為各種 GOMB 方式和 JSVM9.18[7]的 ME 演算法在一張 P frame 之頻寬需
求比較表，頻寬節省都超過 90%以上。表 3-5 為各種分組方式和 JSVM9.18 之
ME 演算法 PSNR loss 模擬環境設定。表 3-6 為各種分組方式和 JSVM9.18 之 ME
演算法(SR=24)做比較，JSVM9.18 之 ME 演算法的 search 方式是以 PMV 為搜索
中心做 full search，編碼層數為三層(D1-CIF-QCIF)，並使用線性內插來固定 bitrate
比較 PSNR。從表 3-4~3-6 可以發現當 GOMB 越多(例:5×1)節省的頻寬會越多，
但是 PSNR 會 loss 比較多。 
 
表 3-2：各種 GOMB 方式和 JSVM9.18 之頻寬需求比較表(單位：Mbytes/P frame) 
Algorithm Layer 2x1 3x1 4x1 5x1 
JSVM9.18 (PMV) 
QCIF 2.021 2.021 2.021 2.021 
CIF 8.083 8.083 8.083 8.083 
D1 27.556 27.556 27.556 27.556 
Total 37.660 37.660 37.660 37.660 
GOMB 
QCIF 0.196 0.159 0.141 0.141 
CIF 0.748 0.638 0.564 0.527 
D1 2.582 2.090 1.905 1.720 
Total 3.527 2.887 2.610 2.388 
Saving Data(%) 90.63% 92.33% 93.07% 93.66% 
 
表 3-5：模擬設定環境 
Simulation specification 
Reference software JSVM 9.18 
Sequence akiyo、foreman、mountain、stefan 
Group of pictures 16 
Intra period 32 
Frame to be encode 300 
Resolution D1-CIF-QCIF 
Search range 24 
 
17 
 
 
表 3-8：BL 不使用 GOMB 的 PSNR loss 表 
Sequence Layer Bitrate(kbps) 
JSVM9.18 (PMV) GOMB21 GOMB31 GOMB41 GOMB51
PSNR(dB) 
Loss 
PSNR(dB)
Loss 
PSNR(dB)
Loss 
PSNR(dB) 
Loss 
PSNR(dB)
akiyo 
QCIF 60 43.7802 - - - - 
CIF 220 43.3910 -0.0150 -0.0194 -0.0201 -0.0245 
D1 450 45.2103 -0.0271 -0.0316 -0.0309 -0.0354 
foreman 
QCIF 200 39.5167 - - - - 
CIF 800 38.6542 -0.0281 -0.0320 -0.0439 -0.0825 
D1 1700 40.5726 -0.0583 -0.0624 -0.0744 -0.1149 
mountain 
QCIF 200 39.0134 - - - - 
CIF 600 41.7667 -0.0207 -0.0326 -0.0466 -0.0665 
D1 1400 42.1420 -0.0519 -0.0601 -0.0738 -0.0860 
stefan 
QCIF 450 37.0937 - - - - 
CIF 2000 37.3183 -0.0407 -0.0444 -0.0595 -0.0968 
D1 4200 38.9691 -0.0610 -0.0649 -0.0742 -0.1131 
Average 
QCIF   - - - - 
CIF   -0.0261 -0.0321 -0.0425 -0.0676 
D1   -0.0496 -0.0548 -0.0633 -0.0874 
 
(3) PMV 偏移共用搜索視窗 
依據論文[3]提出之 IME 演算法，其為了節省更多頻寬的設計，將 GOMB 
PMV 做 shifting 動作，讓 GOMB 群組內的 MB 可以都共用同一組 search window，
圖 3-9 顯示如何共用同一組 search window。優點就是可以在節省更多的頻寬，
所需要存入內部記憶體的資料，不需如前述方式存取內部記憶體這麼多，缺點是
會影響畫質，由其是當 GOMB 群組越多 MB(如 5×1)，每個 MB 的 GOMB PMV
中心會偏離很嚴重，會影響編碼的畫質，圖 3-10(a)(b)為 2×1 共用與不共用 search 
window 的示意圖，共用 search window 簡稱 CCU；不共用 search window 簡稱
SoC。表 3-9~3-10 為共用 search window 與不共用 search window 的 PSNR 比較，
可以從模擬結果來看，雖然 GOMB 數量，節省的頻寬會越大，但 search center
偏移的越遠，導致 PSNR 會掉比較多，所以決定以部份的頻寬來換取較高的畫
質，後面的演算法開發 GOMB 都是以不共用同一組 search window。 
 
19 
 
 
表 3-10：共用與不共用 search window 的 PSNR loss 表 
Sequence Layer Bitrate (kbps) 
JSVM9.18 (PMV) GOMB21 GOMB31 GOMB41 GOMB51
PSNR(dB) 
Gain 
PSNR(dB)
Gain 
PSNR(dB)
Gain 
PSNR(dB) 
Gain 
PSNR(dB)
akiyo 
QCIF 60 43.7802 -0.0092 -0.0092 -0.0085 -0.0108 
CIF 220 43.3910 -0.0209 -0.0190 -0.0200 -0.0186 
D1 450 45.2103 -0.0135 -0.0134 -0.0137 -0.0166 
foreman 
QCIF 200 39.5167 -0.1782 -0.1969 -0.1795 -0.2006 
CIF 800 38.6542 -0.1531 -0.1539 -0.1504 -0.1680 
D1 1700 40.5726 -0.1118 -0.1156 -0.1159 -0.1278 
mountain 
QCIF 200 39.0134 -0.0390 -0.0316 -0.0420 -0.0328 
CIF 600 41.7667 -0.0535 -0.0541 -0.0579 -0.0551 
D1 1400 42.1420 -0.0817 -0.0801 -0.0872 -0.0928 
stefan 
QCIF 450 37.0937 -0.1822 -0.1922 -0.1764 -0.2255 
CIF 2000 37.3183 -0.1385 -0.1487 -0.1628 -0.1814 
D1 4200 38.9691 -0.1019 -0.1199 -0.1183 -0.1315 
Average 
QCIF   -0.1022 -0.1075 -0.1016 -0.1174 
CIF   -0.0915 -0.0939 -0.0978 -0.1058 
D1   -0.0772 -0.0822 -0.0838 -0.0922 
 
(三) 動態調整搜索範圍演算法 
從前述可發現，影響頻寬重要因素：SRx、SRy、MBx 和 MBy。MBx 和 MBy
就是了 GOMB 資料共用架構的組合方式，當 MBxxMBy越大時，節省頻寬越多，
相對畫質會越差，由前述之模擬結果可驗證；另一項 SRx和 SRy因素對於頻寬越
造成很大的影響，一般而言，search window 皆為正方形，所以 SRx和 SRy就可以
直接簡稱 SR，當 SR 越大時，畫質會越好，但頻寬需求量也會大增，如何在畫
質與頻寬之間取得平衡，是一項很重要的問題，本計畫參考中正大學 H.264/AVC 
IME 演算法[3]之動態改變 SR 的方式，針對影像的移動特性達到動態放大或縮小
搜尋範圍的目的，就可以依影像的特性來決定需要的搜尋範圍，不需要維持相同
的搜尋範圍，可以節省不必要浪費的頻寬。 
 
(1) 重找 PMV 機制 
PMV refind：讓 GOMB 之間也可以擁有共同的 PMV，當數個 GOMB 共用
同一個 PMV 就可以讓 GOMB 部分資料重疊，來節省頻寬。圖 3-11 為 PMV refind
示意圖，虛線範圍是重找的 PMV 的界線，當 GOMB 內 MB 所找到 MV 超過所
訂定的藍色虛線範圍，下一個 GOMB 就要重找 PMV；反之，沒有超過的話，則
前後二個 GOMB 則共用同一個 PMV，藉由這樣的機制，來減少頻寬，圖 3-12
21 
 
 
[ ] ( )[ ] ( ) ( )ywidthxwidthyyx MB/frameMB/frameMB163SR23MB161data ×××++××+×=  
( )[ ] ( ) ( )[ ]xwidthyxwidth MB/frame163SR23MB%frame162data ×++××+×=                   
式 3-3 
 
(a) (b)
 
圖 3-14  GOMB 資料分析 (a)data1  (b)data2 
 
 
表 3-11：不同的 sequence GOMB PMV refind 的情況 
Sequence refind=0 refind=1 
akiyo 94.46% 5.54% 
foreman 49.91% 50.09% 
mountain 61.66% 38.34% 
stefan 39.78% 60.22% 
coral 51.83% 48.17% 
dolphins 43.72% 56.28% 
speed 43.63% 56.37% 
 
表 3-12：使用與不使用 PMV refind 的頻寬需求比較表 (單位：Mbytes/P frame) 
Algorithm Layer 2x1 3x1 4x1 5x1 
不使用 PMV_refind 
QCIF 0.289 0.289 0.289 0.289 
CIF 0.748 0.638 0.564 0.527 
D1 2.582 2.090 1.905 1.720 
Total 3.619 3.016 2.758 2.536 
使用 PMV_refind 
QCIF 0.289 0.289 0.289 0.289 
CIF 0.543 0.519 0.483 0.480 
D1 1.891 1.622 1.609 1.440 
Total 2.722 2.430 2.380 2.208 
Saving Data(%) 24.79% 19.44% 13.69% 12.92% 
 
23 
 
示，本計畫依照 MV 更新頻率來調整硬體三種 SR 大小(24、16、8)來動態改變，
當一列的集合 GOMB PMV refind 次數越高，代表 MV 移動比較大，所以 SR 調
整到最大的範圍(SR=24)讓 ME 可以找到最佳位置。配合硬體架構的需求，本編
碼系統編碼 MB 方式 MBy均設成 1，由於以一列的集合 MB 為動態改變的單位，
所以 GOMB 的 MBy均設成 1。 
表 3-16~3-17 為不同重找 PMV 的範圍共有五種參數，BL 不使用 adaptive 
search range。每個 spatial layer 設定固定範圍(0.1、0.25、0.5)，或是依據解析度
大小，重找 PMV 的範圍也跟著隨之變動(S1_0.25：Spatial layer=1、refind 
level=0.25)。當解析度越小，需要越嚴謹，重找 PMV 的就設定越小。從表 3-16~3-17
模擬結果可以發現(S1_0.25、S2_0.5)這組所需求的頻寬最少，而 PSNR loss 跟其
他四組相比 drop 0.01dB 以下，依據解析度大小，重找 PMV 的範圍也跟著隨之
正比變動具有較高的效率，所以之後的模擬都是以(S1_0.25、S2_0.5)這組來進行。 
GOMB GOMB GOMB
GOMB GOMB GOMB
GOMB GOMB
GOMB GOMB
SR1
SR2
...
...
...... ...
GOMB GOMB GOMB
GOMB GOMB GOMB
GOMB GOMB
GOMB GOMB
...
...
... ...
ROW_1
SR3
ROW_N
SR3
ROW_1
SR1
ROW_N
SR2
SR1 SR2 SR3
0% 25% 50% 100%
SR1=8
SR2=16
SR3=24
Current frame 
Next  frame 
 
圖 3-15：Adaptive search range 
 
表 3-15：模擬環境設定 
Simulation specification 
Reference software JSVM 9.18 
Sequence akiyo、foreman、mountain、stefan 
Group of pictures 16 
Intra period 32 
Frame to be encode 300 
Resolution D1-CIF-QCIF 
Search range 24、16、8 
GOMB 2×1,except BL  
25 
 
快速演算法來取代 Full Search 的搜尋法，既不會影響編碼畫質，並減少運算能量
消耗，加快編碼效能。 
 
(1) 向下取樣搜索模式兩步驟搜索 
Full Search：將 CurrMB 和 reference frame 比對的 MB 相減再個別取絕對值
後，將每一點的絕對值相加，SAD 最小的即為 ME 找到的最佳位置，因為每個
pixel 都會去做比較，所以必能在 reference frame 中找到最佳 MB，缺點是太浪費
運算量，由其是當解析度越大時(Full HD、HD)，當每張 frame 的 MB 這麼多，
其硬體的運算能量消耗會非常大。 
例：解析度為 HD(1280x720)時，以一張 P frame 為單位、SR=24。 
一張 P frame： (24×2+1)2×1280×720/256 (MB 數) = 8.643MBytes 
 
Step 1 (Skipped search)：不隨著每個 pixel 逐點比對，而是藉由跳點的方式，
來找最佳點可能出現之區域，並選取幾個 candidate pixels 當作下一個步驟所搜尋
區域。由於移動向量具有慣性移動的趨勢，一般來說最佳點附近的 MB 經比對
SAD 後，其值大部分也很小，但也有可能發生其他點位置 SAD 值也很小，所以
會多選幾個 candidate pixels，來補償剛剛所提到的狀況。 
 
Step 2 (Full search in candidate pixels)：以 candidate pixels 為中心，開一個小
於 skipped pixel 的 SR，開一個 search window，將 current MB 和 search window
逐點比對 MB，SAD 最小的，即為找到的最佳位置，如圖 3-16 所示。 
 
1st Search Window
Int Pixel
Search Pixel
Candidate 
2nd Search Window  
圖 3-16：Adaptive search range 
 
二個步驟的搜尋快速演算法，它的相關參數 skipped pixel 和 candidate pixels
與運算量有很大的關係，skipped pixel 越小，運算量減少量就相對少；candidate 
pixels 越小，所需運算量就越少，針對運算量而言，二者有成反比關係。但二者
之間的相關，當 skipped pixel 越小，所找到的最佳點可能出現之區域會越準，所
選取的 candidate pixels 就不用很多，反之當 skipped pixel 越大，所找到的最佳點
可能出現之區域會越不準，所選取的 candidate pixelsV 需較多個來補償，這二種
27 
 
S642C221：不管 Spatial layer，SR=24，Skipped pixel=6，candidates=2 
                        ，SR=16，Skipped pixel=4，candidates=2 
                        ，SR=8，Skipped pixel=2，candidates=1 
 
表 3-18：各種方式 Down-sampling ratio 的頻寬需求比較表 
(單位：Mbytes/P frame) 
Algorithm Layer 
S2_S4C2 
S1_S4C1
S2_S6C2 
S1_S4C2 
S422C111 S442C211 S642C221 
Down-sampling 
ratio 
CIF 1.940 1.940 1.940 1.940 1.940 
D1 2.498 2.511 2.496 2.498 2.497 
HD 6.515 6.551 6.512 6.517 6.515 
Total 10.953 11.003 10.949 10.955 10.953 
 
表 3-19：各種方式 Down-sampling ratio 之 ME 運算複雜度(單位：Mbytes) 
Algorithm Layer JSVM9.18 
S2_S4C2 
S1_S4C1
S2_S6C2 
S1_S4C2
S422C111 S442C211 S642C221
Down-sampling 
ratio 
CIF 22.14  22.14 22.14 22.14  22.14  22.14  
D1 150.97  22.81 27.88 24.03  27.52  32.23  
HD 402.58  78.19 94.04 67.93  77.09  90.34  
Total 575.70  123.14 144.06 114.09  126.75  144.71 
Rate 21.39% 25.02% 19.82% 22.02% 25.14% 
 
表 3-20：模擬環境設定 
Simulation specification 
Reference software JSVM 9.18 
Sequence akiyo、foreman、mountain、stefan 
Group of pictures 16 
Intra period 32 
Frame to be encode 300 
Resolution HD-D1-CIF 
Search range 24、16、8 
GOMB 2×1, except BL  
SW sharing no 
Refind level S1_0.25、S2_0.5 
 
29 
 
HD 6600 40.5999  -0.0033 0.0026  -0.0101 0.0090  -0.0079 
stefan 
CIF 1650 37.4170  -0.1978 -0.1978 -0.1978 -0.1978  -0.1978 
D1 3880 39.0177  -0.1454 -0.1361 -0.1452 -0.1359  -0.1459 
HD 8250 39.9596  -0.1114 -0.1054 -0.1136 -0.1060  -0.1146 
Average 
CIF     -0.0815 -0.0815 -0.0815 -0.0815  -0.0815 
D1     -0.0822 -0.0644 -0.0804 -0.0655  -0.0748 
HD     -0.0657 -0.0594 -0.0709 -0.0581  -0.0653 
 
(3) 模式 16×16 經兩步驟搜索 
All mode In Two Steps 有可能會找出 41 組發散位置的 MV 給 FME，就需要
去處理 41 組 interporation data，因為 41 組 MV 並無直接規律性，這樣對於硬體
實現而言，是很難處理的。如果可以將 41 組 MV 集中在同樣的 search window
來搜尋，就能將 41 組 interporation data 變成 1 組，就能減少內部記憶體的存取。
表 3-23 統計除了 mode 16×16 之外其他 block type 所找到的 mv 在 mode 16×16 的
search window 的比率，從表 3-23 可以發現，靜態影像(akiyo)有高達 90%的比率
其他 mode 的 mv 與 mode 16×16 在同塊 search window，動態影像的部分大概
60%~70%之間，平均大約有 80%的比率。 
針對平均 80%其他 mode 的 mv 與 mode 16×16 在同塊 search window，所以
將演算法流程修改成只有 mode 16×16 會經過 two steps search，其他的 mode 依
據 mode 16×16 所找的 candidate pixels 當作 step2 的中心，開一個小於 skipped 
pixel 的 search window 去找尋最佳點，雖然平均有 80%的機率(見表 3-23)，畢竟
還是 20%不在同塊 search window，相較於 All mode in two steps，PSNR loss 會增
加、運算複雜度會減少。 
 
表 3-23：The rate of Matching MB in all modes except mode 16x16. 
Sequence Hit Rate 
Akiyo 0.921 
Foreman 0.752 
Mountain 0.910 
Stefan 0.627 
Average 0.803 
 
Step 1 (Skipped search)：mode 16x16 
Step 2 (Full search in candidate pixels)：All mode 
31 
 
表 3-27：各種方式 Down-sampling 與原點(SR=128)相比之 PSNR loss 表
(HD-D1-CIF) 
Sequence Layer 
Bitrate 
(kbps) 
JSVM9.18 
(0,0) 
S2_S4C2 
S1_S4C1 
S2_S6C2 
S1_S4C2 
S422C111 S442C211 S642C221
PSNR(dB) 
Gain 
PSNR(dB)
Gain 
PSNR(dB)
Gain 
PSNR(dB)
Gain 
PSNR(dB) 
Gain 
PSNR(dB)
akiyo 
CIF 180 43.4767  -0.0646 -0.0646 -0.0646 -0.0646  -0.0646 
D1 400 45.1964  -0.0727 -0.0674 -0.0855 -0.0696  -0.0610 
HD 900 46.2828  -0.0668 -0.0695 -0.0869 -0.0718  -0.0619 
foreman 
CIF 750 39.0765  -0.0305 -0.0305 -0.0305 -0.0305  -0.0305 
D1 1500 40.3479  -0.0709 -0.0507 -0.0755 -0.0553  -0.0674 
HD 3200 41.5431  -0.0956 -0.0748 -0.1102 -0.0895  -0.1019 
dolphins 
CIF 900 39.4027  0.0245  0.0245  0.0245  0.0245  0.0245  
D1 3000 40.0495  -0.2246 -0.1925 -0.2257 -0.1945  -0.1794 
HD 6600 40.5349  -0.1525 -0.1423 -0.1623 -0.1443  -0.1290 
stefan 
CIF 1650 37.1421  0.0771  0.0771  0.0771  0.0771  0.0771  
D1 3880 38.7050  0.0552  0.0683  0.0530  0.0664  0.0652  
HD 8250 39.6656  0.0553  0.0621  0.0477  0.0601  0.0589  
Average 
CIF     0.0016  0.0016  0.0016  0.0016  0.0016  
D1     -0.0782 -0.0606 -0.0834 -0.0633  -0.0606 
HD     -0.0649 -0.0561 -0.0779 -0.0614  -0.0585 
 
表 3-28：各種方式 Down-sampling 與 PMV(SR=64)相比之 PSNR loss 表
(HD-D1-CIF) 
Sequence Layer 
Bitrate 
(kbps) 
JSVM9.18 
(PMV) 
S2_S4C2 
S1_S4C1 
S2_S6C2 
S1_S4C2 
S422C111 S442C211 S642C221
PSNR(dB) 
Gain 
PSNR(dB)
Gain 
PSNR(dB)
Gain 
PSNR(dB)
Gain 
PSNR(dB) 
Gain 
PSNR(dB)
akiyo 
CIF 180 43.4488  -0.0367 -0.0367 -0.0367 -0.0367  -0.0367 
D1 400 45.1942  -0.0705 -0.0652 -0.0834 -0.0675  -0.0588 
HD 900 46.2864  -0.0704 -0.0731 -0.0905 -0.0754  -0.0655 
foreman 
CIF 750 39.1103  -0.0643 -0.0643 -0.0643 -0.0643  -0.0643 
D1 1500 40.4597  -0.1827 -0.1625 -0.1873 -0.1671  -0.1792 
HD 3200 41.6620  -0.2145 -0.1938 -0.2291 -0.2084  -0.2208 
dolphins 
CIF 900 39.4545  -0.0273 -0.0273 -0.0273 -0.0273  -0.0273 
D1 3000 40.1015  -0.2766 -0.2445 -0.2777 -0.2465  -0.2314 
HD 6600 40.5999  -0.2175 -0.2073 -0.2273 -0.2093  -0.1940 
33 
 
子計畫二成果 
(一) Abstract 
圖 4-1 為空間可調視訊解碼流程中兩層間的解碼流程圖，每一層之解碼架構
均相容於 H.264 High Profile 標準。除了基礎層解碼之外，若加強層在編碼中參
考下層的資料時，則解碼時會讀取已儲存的下層資料作為解碼資訊。如圖 4-1 所
示，綠色虛線區塊表示層間預測機制，其中藍色部分代表層間空間性預測，
Prediction data 表示重建完成的紋理預測資料，經過放大之後提供至加強層做紋
理預測解碼；黑色虛線部分表示層間冗餘預測，其中 Residual 為基礎層的冗餘
值，經過放大後供加強層進行補償運算；紅色虛線部分表示層間時間性預測，
Motion data 為基礎層的動態補償資料，提供給加強層作為動態補償之用。因此
本作品不但相容於 H.264 High Profile 標準之視訊解碼，並支援層間預測機制，
實現 SVC 空間可調式視訊解碼器之功能。 
此計畫所設計之 SVC 解碼器系統包含 Bit-Stream Decoder (支援 CABAD、
CAVLD)、Inverse-Quantization、Inverse-Transform、Predictive Pixel Compensator (支
援 I、P 及 B 畫面)解碼技術、Inter-layer Predictor (ILP) 支援層間預測機制、
Prediction Data Store Buffer 預先資料儲存機制、資料傳輸頻寬簡化機制以及
De-blocking Filter 等關鍵性模組設計。每部份皆針對 SVC 解碼標準中各模組提
出降低計算複雜度之演算法、硬體架構平行化等方式，增加系統解碼效能。 
 
NAL
NALEntropyDecodeReorderIQIT+Filter
Rec
MB
Ref
MB MC
Intra 
Pred.
Inter
Intra
NALEntropyDecodeReorderIQIT+Filter
Rec
MB
Ref
MB MC
Intra 
Pred.
Inter
Intra
Motion
data
Motion
data
+
residual
Prediction
data
基礎層
加強層
residualPredictiondata Inter-Layer 
Prediction
H.264 based 
Architecture
H.264 based 
Architecture
 
圖 4-1:  SVC 空間可調層之解碼流程圖 
35 
 
  系統控制端(System controller)經由內部溝通介面(Internal bus interface)所解
析之參數判斷，若解碼之 MB 為層間預測資料型態時，則啟動層間預測系統
(ILP)，並藉由仲裁介面(ARBITER)透過 AHB 傳輸埠向外部記憶體取得層間預測
資料進行解碼，若解碼層不為目標層(最上層加強層)，待模組解碼至得到層間預
測資料後，由 PDSB 控制端向外部記憶體儲存資料，並且不做動態補償重建，繼
續開始下一次新的 MB 解碼流程。若解碼之 MB 非為層間預測資料型態，則於
單層中相容之 H.264 解碼器進行解碼。 
 
(2) Data bandwidth reduction 
  在 SVC 視訊解碼過程中，若使用層間預測機制，則需要大量地參考層與層
之間的資料，因此採用預先讀取機制，將所有可能被參考的層間資料擺放於外部
記憶體，唯有及時需要參考的資料方由外部抓回內部記憶體使用，大幅降低內部
記憶體實際需求量。然而資料擺放於外部將面臨頻繁且大量的資料存取動作，隨
著畫面解析度增加，會造成資料頻寬過大；當解碼層數增加時，資料傳輸量將是
單層 H264 所需資料量的倍數成長。因此提出資料連續擺放機制，藉由連續記憶
體特性，有效降低傳輸埠抓取次數，達到降低資料頻寬。 
 
(a) 層間紋理與層間移動資料 
  在層間預測機制裡，層間紋理預測與層間移動預測並不會同時啟動，當編碼
器選擇層間紋理預測時，此編碼 MB 即不為層間移動預測；反之亦然。因此在層
間資料儲存時，若個別將層間移動資料與層間紋理資料各自擺放於畫面格式儲存
於外部記憶體，則當 MB 為層間紋理預測時，層間移動資料位於該 MB 參考之
位置的記憶體將是空白且無法被利用(已被規劃為儲存層間移動資料)；反之當
MB 為層間移動預測時，則層間紋理資料位於該 MB 位置的記憶體亦將被浪費。 
新的記憶體儲存方式將層間紋理與層間移動資料合併儲存，將兩種資料擺放
至同一畫面格式中，當某一 MB 為層間紋理預測時，該 MB 記憶體位置即擺放
層間紋理預測資料；反之則擺放層間移動資料，兩者並不重疊衝突。如圖 4-4 所
示，將層間移動資料與紋理資料以 MB 格式為單位混合擺放，每 MB 所需記憶
體以層間紋理資料為主(最大記憶體需求)，灰色記憶體標示處表示空白無法使
用。此擺放方式將節省原來層間移動資料所需要之 450Kbytes 記憶體大小，而將
其與層間紋理資料共存。當解碼畫面為 I 畫面時，則將所有層間紋理資料擺放至
原來記憶體區塊，不需額外規劃新的記憶體區塊。 
接著針對外部記憶體配置做進一步配置，基於圖 4-4 混合資料擺放示意圖中，
每一畫面格式中要儲存的資料，無論層間移動資料或紋理資料皆以 MB 單位排
列。每一張畫面中的 MB 採用 Raster scan 方式擺放，其中以每一 MB 為單位將
資料依序擺放。右方為層間資料混合擺放圖，左方為外部記憶體配置情形，上方
為以 MB 單位資料擺放方式。藍色虛線方框表示前三個 MB 在左方外部記憶體
配置關係，層間紋理資料依序擺放亮度(Luma)與彩度(Chroma)資料，MB 中第一
列資料儲存完畢後，往下儲存第二列資料。層間移動資料每一筆資料(64bits)表
37 
 
(b) 層間冗餘資料 
 層間冗餘資料為殘差值，因此為有號數，目前 H.264 硬體設計上，以 16bits
來儲存每一個值，因此 BUS 每一筆(64bits)資料可存取 4 個值，如圖 4-5 所示。
本文提出將層間冗餘資料中每一殘差值以 10bits 來儲存，因此 BUS 每一筆資料
可存取 6 個值，如圖 4-5 所示。 
 
圖 4-5： 不同位元數殘差值存取差異圖 
 
 層間冗餘資料向外部記憶體儲存時，以 6-pixel(即每次儲存 6 個像素)為單位
(如圖 4-5 所示)，將畫面中每一行之像素資料儲存於外部記憶體。如圖 4-6 所示，
將第一行資料(每行寬度為 6-pixel)擺放完成後，接著擺放下一行。此擺放方式有
助於資料讀取時的記憶體連續性。 
 
圖 4-6:  層間冗餘資料外部記憶體資料配置圖。 
 
 透過預先存取機制及連續資料存取機制，簡化資料存於內部記憶體模組大小
情形，由圖 4-7 可知，利用上述機制可以大幅減少 99%之內部記憶體模組大小。 
 
39 
 
 
 在位元流解碼的流程上，RISC 負責發出控制訊號要求 Parser engine 解析
UVLD 中的 ue、se 或是固定位元數的編碼型態。當位元流型態為 CAVLD 編碼
方式時，Parser 負責 UVLD 的解碼與 CAVLD 之資料溝通，以及控制解碼的流程；
而當位元流型態為 CABAD 編碼方式時，因為沒有 UVLD 的編碼方式，因此僅
負責控制的解碼流程。在 UVLD 的解碼方面，除了中的架構會先負責 UVLD 的
前處理外，在 Parser FSM 模組中則有一組 UVLD 的後處理架構（如圖 4-8(b)所
示），可負責處理 se 與 ue 的編碼方式。除了基本的 Syntax 解碼外，此 Parser Engine
還可支援 I_PCM 的解碼，直接將未編碼的資料直接輸出。 
 
2. Hybrid VLD 
 此模組主要的功能為解碼  Residual data 的部份，採用 PNM (Parallel 
Numerical Matching)技術，將硬體成本壓到最低，並提升 Hybrid VLD 的輸出效
能。在 SVC 所相容之 H.264 MP/HP 解碼標準中，Residual data 的部份可能為
CAVLD 或 CABAD 兩者選一項進行解碼。CAVLD 架構如圖 4-9 所示，CABAD
架構如圖 4-10 所示。 
P a r a m e t e r  D a t a
P r e d i c t i o n  D a t a
R / W  m o d u l e
C o e f f _ T o k
e n
D e c o d e r
C o n t r o l l e r
T o t a l Z e r o
D e c o d e r
R u n _ B e f o r
e
D e c o d e r
T 1
D e c o d e r
L e v e l
D e c o d e r
M e m o r y
s h i f t e r a c c
R
E
G
 
圖 4-9:  CAVLD in Hybrid VLD 
 
 
圖 4-10:  CABAD in Hybrid VLD 
41 
 
參考框頁資料存取的 Overhead 降到最低。 
 而 Inter Prediction Generator 核心的架構設計上，首先採用 4 平行化架構設計
來提升效能(如圖 4-12 所示)，但是這樣需要耗費不少的硬體成本，因此我們藉由
分析演算法得知，在運算的過程上有許多計算有重複與共用的特性，因此架構設
計上我們可以利用此計算重複與共用的特性來減少核心的計算量與資料的儲
存，來降低硬體成本。 
Inter_Cr
C_DP1
Memory_L
2
13*104
Extension_Luma
64
104
104
Inter 
prediction
Memory_C
5*80
Extension_Chrom
a
32
80
80
AG
48
8
32
32
Inter
L_DP1
16
8
Inter_Cr
C_DP2
Inter
Luma DP2
Inter
Luma DP3
Inter
Luma DP4 Inter_Cb
C_DP3
Weighted prediction
Data path
Memory
16*32*4
72 24
Padding_ChromaPadding_Luma
104 80
104 80
Memory_L
1
13*104
Memory_C
5*80
DPB
(reference data)
PDSB
(reference data)
Pred_Mod
e
Buffer
WP
controlle
r
Extensio
n 
FSM
IRP
controlle
r
PPC
controller
PPC
wrapper
Inter_Cb
C_DP4
8
24
16
88
WP
Table
CMP
 
圖 4-12:  支援 SVC Inter Prediction Generator 硬體架構圖 
 
(c) Inter-layer Predicting System  
 SVC 層間預測支援三種預測機制：層間空間性預測、層間時間性預測與層
間冗餘預測等機制。其中前者僅支援於 H.264 標準之空間性預測，後兩者則支援
於 H.264 標準之時間性預測，因此針對內部記憶體考量，可將第一與第三種層間
預測機制所使用之內部記憶體共用，以降低硬體成本。 
 本硬體架構之外部記憶體資料傳存取之 BUS 採用 AMBA 傳輸介面，讀取資
料時，需對 BUS 發出記憶體起始位址及讀取筆數此兩筆命令，因此若讀取資料
不連續時，則需重新對 BUS 發出命令等待回應(本作品以 10cycles 為例)，單次
命令可讀取 16 筆連續資料。表 4-1 為每 MB 所需讀取之層間資料 cycle 數比較表。 
每 MB 所需讀取
資料 cycle 數 
層間移動 
資料 
層間紋理 
資料 
層間冗餘 
資料 總和 
原資料存取機制
之讀取 cycle 數 96 448 208 656 
所提機制之讀取
cycle 數 72 312 104 416 
表 4-1：解碼每一個 MB 所需讀取之層間資料 cycle 數比較表 
 
43 
 
+
>>12
*
Decoding MB 
position
<<1
4
-
Reference 
position
<<16 >>1
+
/
<<1
<<14
+
/
+
<<11
refW scaleW
1
ScaleX
AddX
MUX
reg
MUX
reg
 
圖 4-14：Position Search Engine 
 
 層間資料放大模組設計上，透過 16 組四項濾波器點對稱的特性，加上係數
參數的相似性，將所有濾波器參數轉換為共用移位器查表方式，將所有的乘法簡
化為加減器與移位器計算，如表 4-2 所示。資料放大模組架構圖由圖 4-15 所示。 
 
 
表 4-2: 四項濾波器參數轉換表 
45 
 
 
(e) Inverse-Quantization & Inverse-Transform  
 Inverse quantization 的部分可以利用單一的量化參數來調整 Transform 係數
的量化程度。Inverse transform 的部分，經過 Inverse quantization 運算後的係數做
空間轉換，支援了不同的資料型態運算，有 Inverse integer transform、Hadamard 
transform 還有 IDCT(Inverse Discrete Cosine Transform)，同時間只有一個功能在
運作。 
 在本作品設計中我們分別對於不同的轉換做了最佳化設計；我們首先將二維
的 Inverse transform(如圖 4-17 所示)化簡為一維的 Inverse transform以及一個轉置
記憶體 (Transpose memory)；其次提出 Adder-based Inverse Transform 之設計方法
將轉換係數做奇偶分離，並將這些係數所需用到的乘法以 Hardwired 
multiplication 之概念轉換成加法運算，然後利用 Booth algorithm 的原理與
Common sub-expression sharing 的概念，將加法器的個數需求減到最少，並加入
Zero skip，以降低功率之消耗；同時此轉換模組可以同時支援 4x4 方塊與 8x8 方
塊的轉換計算，另外我們使用了多層級的 Pipeline 控制電路，降低電路的複雜度，
來提升其效能表現。 
 
圖 4-17:  SVC 視訊解碼器中的 Inverse Transform 硬體架構圖 
 
(三) FPGA Implementation 
本硬體 IP 架構採用 Verilog 實作，並透過 FPGA 合成軟體 ISE 來進行硬體合
成。進行 FPGA 驗證的平台為智原 Faraday FIE-8100，母板上含有一顆
ARM926-EJS 的 CPU、一個 64 MB 的外部記憶體以及一個最大解析度可播放到
QVGA (320x240)的 LCD 營幕。而上方搭配的子版即為燒錄本時作硬體的
FPGA，其型號為 Xilinx V4-160，而本硬體 IP 在此 FPGA 上更佔有 68%的邏輯
閘使用率。整個驗證的流程可分成四個步驟，首先是透過母板上的 SD 卡設計將
所需要進行解碼的影像串流讀到母板上外部記憶體，接著是透過 ARM CPU 
(RISC)來啟動本硬體 IP 進行解碼，然後是本硬體 IP 將解碼完之 YUV 資料寫回
到外部記憶體存放，最後便是啟動 LCD controller 去播放存放在外部記憶體之影
像資料。圖 4-18 即為整個 FPGA 驗證平台以及結果圖。 
47 
 
 
圖 4-19:  SVC 視訊解碼器中的雙層解碼結果 
 
 
 
 
Power Supply 
LA 
49 
 
PG
mode
Sleep
mode
CKVdd
 Mode
PM 
Mode
0 1 1
0
phi_p
CK
1
0 0
    
0
(3) CKVDD 也可以不需要 level shifter (層級轉換器)，因為 CKVDD 是用資料暫
存的觀念，和 multi supply voltage (多供應電壓源)需要額外加入 level shifter 
(層級轉換器)的元件的觀念不同，也就可以省下因 level shifter (層級轉換器)
所消耗的功率或是面積了。 
˙Power Management Mode 
    利用 C1 和 C2 間的 Charge Sharing 以達到控制 Power Gate 的目的，由 phi_p 
和 CK 輸入調整 C2 的電壓以控制 Power Gate 的工作模式，使 Power Gate 能夠適
時的切換電路的供應電壓源，比起使用一個輸入信號直接控制 Power Gate，使用
Charge Sharing 還能使 Power Gate 出現半開的狀況，也可利用這點讓電路的供應
電壓源能有緩升的效果。 
 
 
 
 
 
 
 
 
 
 
 
˙Post simulation 
donimo 
 
PG mode                       CK mode 
 
 
 
 
 
˙晶片照像圖 
16x16 b it 
h igh speed
 dom ino M ultip lier
vdd
SW Vdd
C 1
C 2
Psw
phi
C K
phi_p
M 1
M 2
M 3
W :13um
   L :130nm
 W :150nm
  L:130nm
 W :150nm
  L:130nm
 W :960nm
  L:130nm
Pow er G tae M anagem ent M odule
X8
C sw
SS
51 
 
機制。當 sleep mode 沒有功率消耗時，PM mode 消耗的功率比 CK mode、PG mode
少。圖 5.6、圖 5.7、圖 5.8 分別為 PG mode、sleep mode 與三種 mode 的波形。
從這些波型可以顯示出電壓控制電路的特性，也得知我們的設計經由晶片得到了
應証。 
1.7
1.9
2.1
2.3
2.5
2.7
2.9
3.1
3.3
25 27.5 30 32.5 35 37.5 40 42.5 45 47 47.5 50 50.5
Frequency(MHz)
C
ur
re
nt
(m
A
new type I new type II
圖 5.3 固定電壓於 1.8v。兩種 PM mode 與原始 domino 電路電流的比較。 
 
  
圖 5.4  PM1 波形圖 
 
 
圖 5.5  PM2 波形圖 
53 
 
1
1.5
2
2.5
3
3.5
4
4.5
10 20 22.5 25 27.5 30 32.5 35 36 37.5 40 42.5 43 43.5 45 47.5 49.5 50 52.5
Frequency(MHz)
C
ur
re
nt
(m
A
)
phi0_CK1 phi0_CK= inverse toggle phi0_CK= inverse toggle slow x 2
-55.0%
-52.5%
-56.7%
-60.7%
-61.8%
-63.4%
-63.6%
-62.4% -61.2%
-59.4%
-55.7%
-58.5% -59.4% -60.3%
-62.2%
-65.6% -67.3% -67.7%
-68.9%
-55.8%
-54.8%
-58.1%
-62.0%
-63.6%
-65.3%
-65.8%
-65.1% -64.2%
-62.8%
-62.4% -63.1%-60.1%
-63.7% -69.6% -71.5%-65.8%
-59.9%
-58.7%
-61.8%
-65.3%
-66.6%
-68.1%
-68.3%
-67.4% -66.6%
 
圖 5.9 電壓為 1.8v 並且固定 phi_p 為 0，CK 信號分別為 always high、inverse 
toggle、inverse toggle 速度慢兩倍狀況下與原始電路的比較。 
 
 
0.4
0.6
0.8
1
1.2
1.4
1.6
1.8
10 12.5 15 17 17.5 20 22.5 25 27 27.5 30 30.5 32.5 34.5 35 37
Frequency(MHz)
Cu
rr
en
t(m
A)
phi_p=0 CK= 1 phi_p=0 CK= inverse toggle slowx2 phi_p=0 CK= inverse toggle
-40.1%
-44.2%
-48.6%
-48.8%
-48.3%
-43.4%
-50.9%
-53.2%
-53.3% -53.8%
-55.9%
-55.9%
-56.1%
-54.8% -54.2%
-50.8%
-46.3%
-50.9%
-55.3%
-55.9% -55.8%
-53.3%
-58.9%
-61.2%
-48.1%
-52.5%
-57.2%
-57.9%
 
圖 5.10 電壓為 1.2v 並且固定 phi_p 為 0，CK 信號分別為 always high、inverse 
toggle、inverse toggle 速度慢兩倍狀況下與原始電路的比較。 
 
    圖 5.9 與圖 5.10 分別為電壓 1.8v 與 1.2v，皆固定 phi_p 為 0，CK 信號分別
為 always high、inverse toggle、inverse toggle 速度慢兩倍狀況下與原始電路的比
較。由以上兩圖表示，不管是 1.8v 或是 1.2v，比起 CK mode(phi_p 與 CK 的數
位信號分別為 0 與 inverse toggle)，PG mode (Phi_p 與 CK 的數位信號分別為 0
與 1)擁有比較高的工作頻率。另外，我們將 CK 的 toggle 信號放慢速度兩倍，雖
55 
 
向，由 High to Low。從數據得知，CK 為 inverse toggle 時的電流較 toggle 時的
高。比起 1.2v，兩個 CK 信號反向的電流差異在 1.8v 的差異較大，尤其頻率在
10MH 至 27MHz 範圍間時，兩者電流的差異在 1.2v 時的範圍為 0.7%~2.7%；在
1.8v 時則為 4.3%~5.8%，另外，當電壓逐漸上升時，兩者電流的差異會逐漸縮小
甚至變向，也就是 CK 為 toggle 時的電流較 inverse toggle 時的高。 
0
0.5
1
1.5
2
2.5
3
3.5
4
4.5
10 20 22.5 25 27.5 30 32.5 35 37 37.5 40 42.5 43.5 45 47 47.5 50 52.5 53.5
Frequency(MHz)
C
ur
re
nt
(m
A
)
phi=1 CK = toggle phi=0 CK = toggle
 
圖 5.13 電壓為 1.8v。固定 CK 為 0，phi_p 分別為 Low、High 與原始電路的比較。 
 
 
0.5
0.7
0.9
1.1
1.3
1.5
1.7
10 12.5 15 17 17.5 20 22.5 25 27 27.5 30 32.5 34.5 35 36.5 37
Frequency(M Hz)
C
ur
re
nt
(m
A
)
phi_p=0 CK=toggle phi_p=1 CK=toggle
 
圖 5.14 電壓為 1.2v。固定 CK 為 0，phi_p 分別為 Low、High 與原始電路的比較。 
 
    圖 5.13 與圖 5.14 為分別在 1.8v 與 1.2v 下。固定 CK 為 0，phi_p 分別為 Low、
High與原始電路的比較。尤曲線圖中，明顯地表示當 phi_p為High時電流較 phi_p
為 Low 時的大。由於 M1 持續關閉，沒有任何電荷儲存於 C1，所以不管 CK 信
號如何切換(toggle)都不影響對 Psw 的關閉才使得 Vdd 對電路持續地供應電源，
故消耗的電流也比較多。而 phi_p 為 Low 與 High 時分別與原始電路比較，兩者
57 
 
 
 
圖 5.16 domino flow              圖 5.17 DP-domino flow 2 Adding latch 
˙ 
    此動作利用 SIS 來完成，會將電路中有用到負向邏輯的電晶體插上 latch 以
避免 internal racing。步驟 1：首先，我們將對電路中每個節點所對應到的 gate
去做標號的動作，由前所提，N-type 的動態 cell 有兩種，輸出是正向的標為 N+，。
反之則為 N-。步驟 2：接下來，必須把每個節點的從 input 到這個節點的 level
都標出來，(當同一個 gate 有兩種不同的 level 時，取最大的)當遇到正向的
gate”N+”的時候 level 不用加 1，因為正向的 gate 接任何的電路都不會有 internal 
racing 的問題發生，而遇到負向的 gate”N-”時候，level 加 1。步驟 3：搜尋每個
節點，當此節點的 level 比它 fanin 節點的 level 大於 1 以上時，加上一個 latch 在
此節點上。 
˙Data Retiming 
    此步驟會將因為加了 latch 以後所產生的資料傳輸不同步的問題加以解決，
也是利用 SIS 來完成。步驟 1：找出每個節點中，它 fanin 的 level 比它自己本身
還要小兩級以上的節點。步驟 2：找出這些節點後，將它的 fanin 插上 latch，此
時需將找出節點的 level 與它的 fanin level 相比，如果大於 1 以上則必需在 fanin 
node 加 lathe(差幾個就要加幾個)。 
˙Clock Assignment 
    將電路的 cell 部分和 latch 部分的 clock 做 assign 的動作，此時會用到兩個不 
同相的 clock。步驟 1：clock assign 的方式是採用一個 level、一個 level 分別去去 
assign 的，這樣才可以保證每個 gate 都能在預定的時間到達。步驟 2：clock assign 
的方式是採用一個 level、一個 level 分別去 assign 的，這樣才可以保證每個 gate 
都能在預定的時間到達，至此，dual phase high speed 的電路已完成。在經過 latch 
59 
 
(7) 使用的製程為TSMC 0.18m CMOS process。 
(8) 完成電荷分享 “ worst case ”測試。 
     
圖 5.18 DP-domino layout 圖        圖 5.19 DP-domino cell library 製作流程圖 
 
圖 5.20 DP-domino 電路結構示意圖 
 
    為了驗證domCompile的flow是否能達到預期效能，我們將先實作tsmc013動
態cell library： 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
and2的 layout  與靜態 cell的 rising delay比較 
61 
 
 
 
˙Tape out chip plan 
    經由 nanosim 模擬我們得知高速雙相動態電路工作最高可到達 500MHz 以
上，由於測試機台的最高工作頻率為 300MHz，為了可以測量出此電路的高速特
性，我們規劃出可以測量電路高速特性的電路架構，如圖 5.21。 
 
 
 
 
 
 
 
 
 
 
 
圖 5.21 高速雙相動態電路自動化設計電路的 tape out chip design. 
 
    這 tape out chip design 的架構主要分為三大塊： 
Block 1：產生高速的 clk 信號供給 Block 2 & CUT。 
    ADPLL 產生高頻 clk 信號(500MHz)，並且經由除頻電路產生較頻的 clk 信
號(250MHz)，此外，還有經由 Extra signal 外部 clk 信號，皆可讓 Block 2 可選
擇工作的頻率。 
Block 2：控制電路是否需提高速度或降低速度。 
     從 Block 1 產生 500MHz 的 clk 信號傳送至此，當 CUT 在該頻率下可正常
or
a-
ct
l-e
nd
63 
 
1
1
9
4
.7
 u
m
1180.7 um
 
\˙APR(Automatic Place and Route) 
 
 
 
 
 
 
 
 
 
 
 
 
圖 5.25  高速雙相動態電路以及 BIST2 電路經由 APR。 
 
 
 
17
06
.2
00
 u
m
65 
 
因為 Android 上的程式設計是以 Java 為基礎，但考量到效能問題，大多數
的 decoder都是以C/C++撰寫，因此將C code寫成的 decoder和Android上的VNC
做結合是首先必須克服的問題。針對此問題，我們採用 JNI（Java Native Interface) 
[4]的方式，將 C 程式編譯成 library，包裝成 Java 程式可以呼叫的 interface，讓
Java 和 C 程式間能夠互相溝通，如此即可在 Android 平台上使用以 C code 寫成
的 decoder 或是相關程式，而在 Android 的官方網頁上有集合了 JNI 的開發工具
NDK[5]，可以使得開發更為方便。 
考量到手機的使用特性，我們必需要從 server 端取得相對應的座標位置和畫
面大小等資訊，為方便使用者能夠直接用觸碰的方式，點選想要觀看的動態畫
面，client 端必須和 server 端建立溝通連線來獲取這些訊息，但是動態畫面可能
會随時地改變位置，因此手機的 client 端也必需一直接收 server 端送來的資訊，
保持更新動態畫面的資訊。此外，由於手持式裝置的 CPU 運算效能遠不如一般
桌上型電腦，為了要使 Android 手機在播放動態畫面時能夠更加順暢，我們適當
的設計 client 端之操作介面，讓使用者透過觸控螢幕，選擇想觀看的動態影像，
並從 VNC client 模式切換至影片播放模式，讓 VNC client 轉而在背景執行，同
時讓 decoder 在前景執行時使用更多 CPU 資源，可節省手機上的運算資源，確
保畫面的播放品質。 
 
(3) Android 手機效能驗證 
我們所採用之 Android 系統的主要硬體規格如下所示： 
 CPU : Qualcomm QSD 8250 1 GHz 
 Memory : 512MB FLASH、512MB RAM 
 Network : WiFi 802.11 b/g transceiver 
 Operating System : Android Mobile Technology Platform 2.1 
 
我們實作 client 端在 Android 系統上，Table 3 為在 Android 手機平台執行的
fps 效能表。相對原本 VNC 在 128Kbytes/s 下的 0.58fps，Android 手機平台下 CIF
有 11.5fps、QCIF 則有 29fps 的效能，足以提供順暢的畫面播放品質。 
 
表 6-1 ：Android 手機平台 fps 效能比較 
Frame Android 
CIF (352x288) 11.5 fps 
QCIF (176x144) 29 fps 
 
(二) SVC Bit-stream Extractor 
 
(1) 系統架構 
如圖 6-4 所示為 Extractor 的系統關係圖。在 Server 端，Extractor 接受來自
67 
 
 
圖 6-5 ：GOP-Level 
 
    不同的解析度、不同的 Frame rate 皆會影響影像在網路中的的傳輸量，所以
在 GOP 的 SEI 中除了存放 Encoder 後分類的各 Layer 屬性外（如：解析度、Frame 
rate），也會記錄各 Layer 的 Bit-rate。下圖為 SEI 中的 Layer 資訊。 
 
圖 6-6：SEI layer information 
 
    當選擇輸出哪一層 Layer 後，針對不同的 Frame 解析度或 Frame rate 必須透
過挑選不同的 NAL 達成，在 SVC 中定義分類的屬性資料被記錄在 NAL-Unit 
header 中的 DID、TID、QID 欄位，並分別對應到 Spatial、Temporal、SNR 特性。 
 
圖 6-7：NAL-Unit header for SVC 
 
(4) 系統設計 
    綜合上節資訊，一個比較完整的作法為，我們先使用頻寬偵測器取得部分可
用頻寬資訊，經過計算取得完整的網路可用頻寬，再與 SEI 中的 Bit-rate 做比對，
取得低於網路頻寬但是最為接近的 Layer Bit-rate，即選擇哪一層 Layer，再後續
的 GOP Bit-stream 只保留所選擇 Layer 的 NAL-Unit，其餘丟棄，則將會傳送與
目前網路頻寬最匹配的 Bit-stream size，以避免網路的壅塞，造成畫面的 delay。
要達成這些目的還有一些細節需要解決。 
(a) 網路資料的傳輸速率 
69 
 
 
 
圖 6-7：在 1Mbps 下所量測出來頻寬。 
 
圖 6-8：在 512Kbps 下所量測出來頻寬。 
 
    Iperf 是透過發送量測用的封包，藉由統計一段時間內的資料傳送量之後，
根據所設定的時間下，進行平均，計算出這段時間內的平均頻寬。使用 Iperf 的
優點是具備多種參數可以讓我們針對不同環境進行設定，例如 TCP window 
size、Packet size、量測時間、使用 UDP 量測、雙向量測等多種設置。使得我們
在實際開發的環境之下，客製化我們的量測設定，來獲得較準確的頻寬資訊。 
 
Reference: 
 
1. 蕭詣懋、葉書瑋、陳嘉祥、陳映瑾、*楊瑞賓、朱元三, “應用於可調式視訊編
碼之具有頻寬可適應性的多媒體閘道器,”  Proc. TANET 2009.  
2. Yi-Mao Hsiao, Feng-Pin Chang, and Yuan-Sun Chu, ”High Speed Multimedia 
Network ASIC Design for H.264/AVC,” Proc. IEEE ICIEA 2010. 
 
 
 
 
71 
 
 
圖 7 – 2：Connection manager 與 client 端之連線處理流程圖。 
  
 Connection manger 負責處理所有 client 端的連線，圖 7 - 2 顯示連線處理
時的五個步驟：(a) server 會由 Connection manger 管理所有的 client 端連線；(b) 
Connection manger 會先建立新的 thread，該 thread 將執行 Protocol service 元
件；(c) Protocol service 開始與 client 進行 protocol 溝通；(d) 透過 Protocol 
service 元件得知 client 的請求後，再產生 Connection thread；(e) Connection 
thread 會負責提供給 client 一切所需的影片、視訊串流、系統資訊等服務。綜
合以上的描述，Connection manger 元件負責管理 server 端所有對外的行為，此
外，為了達到良好的流量控管，我們分配給每個 client 一個特定的 port，將屬
於該特定 client 所要的資料由此 port 進行傳送。 
 
圖 7 – 3 : 系統內部之動靜態畫面偵測、擷取、與整合示意圖。 
 
 動態影像偵測系統（Dynamic Image Detection System，以下簡稱 D.I.D.S.）
73 
 
 
圖 7 - 5：Arbiter 之運作流程圖。 
 
 Arbiter 扮演居中協調者的角色，連結網路連線管理流程與視訊壓縮管理流
程，管理所有需要視訊服務的 Connection thread，圖 7 - 5 顯示 Arbiter 運作的
五個主要步驟：(a) 系統設有 Thread table 及 Trash can 的資料結構，Thread table 
中記載需要服務的 Connection thread，Trash can 則是記載因中斷傳輸或結束服
務的 Connection thread；(b) Arbiter 會去檢查 Thread table 及 Trash can 的資
訊，進行註冊或註銷；(c) 確定發送名單及影片 channel 後，Arbiter 會從 Buffer 
queue 中取出資料；(d) Arbiter 統一將資料傳給 Connection thread；(e) 最後由 
Connection thread 透過網路發送資料給 client。每個 channel 會有各自的 Thread 
table 和 Trash can，例如：當 Connection thread 需要收看 channel 1 時，便將自
己註冊於 channel 1 的 Thread table 中，此時管理 channel 1 的 Arbiter 會依造 
Thread table 的名單統一派送 data。 
 
圖 7 - 6 :  Connection thread 之運作流程圖。 
 
75 
 
 
圖 7 - 8 : SVC encoder 輸入源之解決方法。 
 
(2)  動態影像畫面的不連續性 
 動態影像系統所偵測到的動態影響資料透過 shared memory 機制存放在 
Pool 裡，由於 SVC encoder 所需要的輸入資料是以 GOP 為單位的影像資料，因
此，我們需要持續抓取到一個 GOP 單位的影像資料後，才能給 SVC encoder 做
壓縮，但在壓縮的同時若沒有持續從 Pool 中取畫面資料的話，在 client 端播放
出來的畫面會是不連續的，因此，圖 7 – 9 中，我們將拿取資料的程序和壓縮的
程序分開，並且加上 buffer，以減少拿取動態影像資料程序和壓縮程序之間的時
間差，也就是說，在拿取資料的同時，也會做影像壓縮。 
 
圖 7 - 9 : 動態影像畫面不連續性解決方法。 
 
(3)  decoder 重新初始化的問題 
 在 client 端部分，我們希望系統可以根據目前的網路頻寬狀況，自動選擇高
解析度或低解析度的畫面，但是，decoder 只能被初始化一次，若待解碼的畫面
解析度不同，decoder 就不能解碼，為此我們有下面三種作法：第一種，直接將 
decoder 重起。若收到的畫面解析度不同，就直接重起 decoder ，為此可能會因
為多了重起時間而導致 client 端播出畫面不連續的問題；第二種，建立多個 
decoder ，每個 decoder 負責一種解析度畫面，如圖 7 - 10 所示，有兩種解析
度，高解析度大小寬為 352，高為 288，低解析度大小寬為 176，高為 144，每個 
decoder 將各自解碼後的畫面，經由 manager frame 將 frame 的順序作調整後，
77 
 
附件一: 本計畫詳細成果資料 
 
1. 論文發表(請依 IEEE 論文格式撰寫) 
(1) 期刊論文 
[1] Chih-Da Chien, Cheng-An Chien, Chien-Chang Lin, Ching-Hwa Cheng, 
and Jiun-In Guo,“ A 252Kgates/4.9Kbytes SRAM/71mW  
Multi-Standard Video Decoder for High Definition Video 
Applications,” ACM Transactions on Design Automation of Electronic  
Systems, vol. 14, no. 1, January 2009. (SCI, EI)  
[2] Yao-Chang Yang, and Jiun-In Guo, “A High Throughput H.264/AVC 
High Profile CABAC Decoder for HDTV Applications,” accepted by 
IEEE Transactions on Circuits and Systems for Video Technology, 
January 2009. (SCI, EI)  
[3] Hsiu-Cheng Chang, Jia-Wei Chen, Bing-Tsung Wu, Ching-Lung Su, 
Jinn-Shyan Wang, and Jiun-In Guo, “ A Dynamic Quality-Adjustable 
H.264 Video Encoder for Power-Aware Video Applications,” accepted 
by IEEE Transactions on Circuits and Systems for Video Technology, 
May 2009. (SCI, EI)  
[4] Ching-Hwa Cheng, Chin-Hsien Wang, “CKVdd: A Clock-Controlled 
Self-Stabilized Voltage Technique for Reducing Dynamic Power in 
CMOS Digital Circuits”, IEICE Transactions on Electronics, Vol. 
E92-C, No.4, pp.391-400, April, 2009. 
[5] Yu-Te Lin and Peng-Sheng Chen, “Compiler Support for 
General-Purpose Computation on GPUs”, Journal of Supercomputing. 
Vol. 50, Issue 1, October 2009. (EI, SCI) 
[6] Kuan-Hung Chen and Yuan-Sun Chu, “A Spurious-Power Suppression 
Technique for Multimedia/DSP Applications, IEEE Transactions on 
Circuit and Systems-I: Regular Papers, vol.56, no.1, pp.132-143, Jan. 
2009. (SCI, EI) 
[7] Ke Xu, Tsu-Ming Liu, Jiun-In Guo, and Chiu-Sing Choy, “Methods for 
Power/Throughput/Area Optimization of H.264/AVC Decoding,” 
Journal of Signal Processing Systems, Vol. 60, No. 1, pp. 131-145, 
July 2010. (SCI, EI) 
[8] Yu-Min Lu and Peng-Sheng Chen, “Probabilistic Alias Analysis of 
Executable Code,” accepted by International Journal of Parallel 
Programming, 2010. (SCI, EI)  
[9] Kai-Wei Lin and Peng-Sheng Chen, “An Assistance Tool Employing a 
Systematic Methodology for GCC Retargeting,” accepted by Software: 
Practice and Experience, 2010. (SCI, EI) 
(2) 研討會論文 
79 
 
Coding Standards,” Proc. 2009 IEEE International Symposium on 
Circuits and Systems, May 24-27, Taipei, Taiwan, 2009. 
[12] Elone Lee, Feng-Tso Chien, Ching-Hwa Cheng, and Jiun-In Guo, 
“Dynamic Voltage Domain Assignment Technique for Low Power 
Performance Manageable Cell Based Design,” Proc. IEEE The 15th 
Asia and South Pacific Design Automation Conference" (ASP-DAC 
2010), Taipei, Taiwan, January 18-21, 2010. 
[13] Ping-Tsung Wu, Tzu-Chun Chang, Ching-Lung Su, and Jiun-In Guo, “A 
BU-based Rate Control Design for H.264 and AVS Video Coding with 
ROI Support,” Proc. 2010 International Symposium on VLSI Design, 
Automation & Test (VLSI-DAT), April 26-29, Hsinchu, Taiwan, 2010. 
[14] Chang-Hung Tsai, Kheng-Joo Tan, Ching-Lung Su, and Jiun-In Guo, “A 
Group of Macroblock Based Motion Estimation Algorithm Supporting 
Adaptive Search Range for H.264 Video Coding,” Proc. 2010 IEEE 
International Symposium on Circuits and Systems (ISCAS 2010), May 
30- June 2, Paris, France, 2010. 
[15] Kheng-Joo Tan, Hsin-Yi Li, Bing-Tsung Wu, Dou-Cheng Chang, 
Jia-Wei Gong, Yi-Mao Hsiao, Yung-Chung Chen, Shi-Wu Lo, 
Yuan-Sun Chu, and Jiun-In Guo, “A Remote Thin Client System for 
Real Time Multimedia Streaming Over VNC,” Proc. 2010 IEEE 
International Conference on Multimedia & Expo (ICME 2010), 
Singapore, July 19-23, 2010. 
[16] Chih-Chuan Yang, Kheng-Joo Tan, Yao-Chang Yang, and Jiun-In Guo, 
“Low Complexity Fractional Motion Estimation with Adaptive Mode 
Selection for H.264/AVC,” Proc. 2010 IEEE International Conference 
on Multimedia & Expo (ICME 2010), Singapore, July 19-23, 2010.  
[17] Cheng-An Chien, Ching-Hwa Cheng, and Jiun-In Guo, ”A 
Clock-Controlled Self-Stabilized Voltage Technique with High 
Dynamic Power Reduction for Portable Multimedia Applications,” 
Proc. International Conference on Green Circuits and Systems (ICGCS 
2010), June 21-23, Shanghai, P. R. China, 2010. 
[18] Yap-Chung Phong, Ching-Hwa Cheng, and Jiun-In Guo, “An Efficient 
Peak Current Alleviation Methodology Using Threshold Voltage 
Adjusting with Gate Sizing Techniques,” Proc. International 
Conference on Green Circuits and Systems (ICGCS 2010), June 21-23, 
Shanghai, P. R. China, 2010. 
[19] Cheng-An Chien, Cheng-Yen Chang, Jui-Sheng Lee, Jia-Hou Chang, 
and Jiun-In Guo, “Low Complexity 3D Depth Map Generation for 
Stereo Applications,” Proc. 2010 VLSI Design/CAD Symposium, 
Kaohsiung, Taiwan, August 3-6, 2010. 
[20] Cheng-An Chien, Yi-Chuang Liang, Jia-Wei Chen and, Jiun-In Guo,” 
Low Complexity H.264/AVS Predictive Pixel Compensator for HDTV 
Applications,” Proc. 2010 VLSI Design/CAD Symposium, Kaohsiung, 
Taiwan, August 3-6, 2010. 
[21] Ping-Tsung Wu, and Jiun-In Guo, “Low Compute Complexity 
BU-Based Rate Control Algorithm for H.264/AVC Encoder,” Proc. 
81 
 
 
2. 專利 
專利名稱 發明人 
獲證日期 
（或申請
中） 
專利證號 
所屬 
子計畫 
Device for Video 
Decoding 郭峻因、楊曜彰 2008/03 US 7339507 B1 
總計畫、
子計畫二
Memory Controlling 
Method 
郭峻因、簡志
達、黃家瑞 2008/12 US 7464230 B2 
總計畫、
子計畫二
Design techniques and 
their circuit designs for 
versatile and scalable 
video coding 
郭峻因, 陳冠宏, 
王進賢 2010/05 US 7724975 B2 
總計畫、
子計畫二
視 訊 編 碼 之 演 算
法  
郭峻因, 蘇慶龍, 
陳靖文 2010/05 I 324482 
總計畫、
子計畫二
降低視訊標準中計算
複雜度之演算法 
郭峻因, 王進賢, 
陳嘉偉, 張峻豪, 
歐陽亦垣 
2010/05 I 324484 
總計畫、
子計畫二
多重功能視訊編碼電
路系統 
郭峻因, 陳冠宏, 
陳育民 王進賢, 
朱元三 
2010/05 I 325277 
總計畫、
子計畫二
可調式多媒體視訊編
碼之模式快速預測架
構 
郭峻因,蘇慶龍,
張智皓 
2010/06 
(ROC/USA 申
請中) 
 
總計畫、
子計畫一
多媒體視訊編碼之快
速移動預測演算法 
郭峻因,蘇慶龍,
高祥桔 
2010/06 
(ROC/USA 申
請中) 
 
總計畫、
子計畫一
一種適用於
H.264/AVC Scalable 
Extension 之快速決定
畫面內演算法 
郭峻因,蘇慶龍, 
廖正維 
2010/09 
(ROC/USA 申
請中) 
 
總計畫、
子計畫一
即時視訊編碼晶片之
流量控制方法及其架
構 
郭峻因、吳秉
璁、張子駿、蘇
慶龍 
2008/08 
(ROC/USA 申
請中) 
 
總計畫、
子計畫一
利用攝影機之主體移
動協助影像壓縮 
羅習五, 郭峻
因、張子駿 
2008/11 
(ROC/USA 申
請中) 
 
總計畫、
子計畫四
低記憶體頻寬之影像
移動預測方法 郭峻因、蔡長宏
2009/05 
(ROC/USA 申
請中) 
 
總計畫、
子計畫二
83 
 
CIC 2009/05 
2009 CIC 晶片製作優良設計獎 
數位晶片組第一名 
總計畫、子計畫三 
教育部 2009/10 
九十八年度全國微電腦應用系
統設計製作競賽 
大專組信號處理與通訊類 第三
名 
總計畫、子計畫一 
教育部 2009/10 
九十八年度全國微電腦應用系
統設計製作競賽 
大專組信號處理與通訊類 佳作
獎 
總計畫、子計畫一 
教育部 2009/10 
技專院校國際技藝競賽 數位訊
號處理創思設計競賽  
軟體系統應用組 佳作獎 
總計畫、子計畫一 
教育部 2009/10 
技專院校國際技藝競賽 數位訊
號處理創思設計競賽  
影音訊號處理組 佳作獎 
總計畫、子計畫一 
教育部 2010/07 2010 年教育部嵌入式系統設計競賽創意應用組佳作 總計畫、子計畫二 
教育部 2010/07 2010 年教育部嵌入式系統設計競賽系統軟體組佳作 總計畫、子計畫五 
CIC 2010/05 
2010 年國家晶片系統設計中心
（CIC）優良晶片設計佳作獎 總計畫、子計畫三 
CIC 2010/05 
2010 年國家晶片系統設計中心
（CIC）優良晶片設計佳作獎 總計畫、子計畫三 
教育部 2010/10 
九十九年度全國微電腦應用系
統設計製作競賽 
大專組信號處理與通訊類 佳作
獎 
總計畫、子計畫一 
教育部 2010/10 
九十九年度全國微電腦應用系
統設計製作競賽 
大專組信號處理與通訊類 佳作
獎 
總計畫、子計畫一 
教育部 2010/10 
九十九年度全國微電腦應用系
統設計製作競賽 
大專組嵌入式系統類佳作獎 
總計畫、子計畫一 
ASPDAC 
2011 2011/01 
2011 ASPDAC University LSI 
Design Contest Best Design 
Award 
總計畫、子計畫二 
 
85 
 
計畫成果自評部份 
甲、 本計畫執行產出成果豐碩，計畫執行三年期間，總共發表
國際期刊論文九篇、國際會議論文 22 篇、國內會議論文 8
篇、專利申請 18 件、獲得專利 6 件、、並且獲得國際與國
內相關競賽共 23 件及技術移轉案 4 件與相關之產學合作案
5 件。 
乙、 本計畫所產出之 MPEG-2 MP/H.264 HP video decoder IP 其
計算效能已達到 Full HD 視訊即時處理之目標，此成果獲得
台北 IP/SOC 設計廠商與新竹之 SOC 設計廠商之青睞，已
經分別著手進行技術移轉與產學合作。 
丙、 本計畫所產出之 Low memory bandwidth H.264 quality 
scalable video encoder IP 其計算效能已達到 Full HD 視訊即
時處理之目標，同時支援動態調整視訊品質之特色，此成
果獲得台北 IP/SOC 設計廠商之青睞，已經著手進行技術移
轉合作。 
丁、 本計畫所產出之各相關技術，具備鮮明特色與高度實用
性，已申請 18 件專利，同時也獲得總共 23 件之國際與國
內 IC 設計相關競賽獎項，同時衍生 5 件產學合作計畫案與
4 件技術移轉案，產業效益極高。 
87 
 
可供推廣之研發成果資料表 
□ 可申請專利  J 可技術移轉                 日期：99 年 12 月 31 日 
國科會補助計畫 
計畫名稱：Media-To-Go：遠端多媒體資訊系統(3/3) 
計畫主持人：郭峻因         
計畫編號：NSC98-2220-E-194-001    學門領域：微電子 
技術/創作名稱 Low memory bandwidth quality scalable H.264 video encoder IP 
發明人/創作人 郭峻因、張修誠、陳嘉偉、簡呈安 
技術說明 
本作品提出一項支援可攜式裝置暨高解析度視訊監控應用之
低記憶體頻寬可動態畫質調整之 H.264 視訊編碼器，透過結合演
算法分析及架構效能分析，我們取得一個優異之 H.264 video 
encoder 軟硬體設計平衡，分別針對 Motion Estimation (ME)、Intra 
Coding、Context-based Adaptive Variable Length Coding (CAVLC)、
In-Loop Filtering (ILF) 與外部記憶體存取機制等部分進行設計最
佳化動作。由於採用所提多項最佳化設計，本作品能夠以低硬體
複雜度(i.e. low gate-count and low internal memory size)達到高階
H.264 視訊編碼效能(up to HD720 real-time video encoding)，並同時
具有 Reconfigurable 特性，可根據不同應用之需求選定不同之編碼
模式，以滿足各式手持式與高階多媒體 SOC 應用之需求。採用
0.13um CMOS 製程技術，本作品可於 40MHz/108MHz 分別完成
H.264 D1/HD720 video real-time encoding，並且呈現 61mW/183mW
之低功率消耗效能。相較於現有相關設計(ISSCC2005)，本作品可
以節省超過 50%之硬體成本與功率消耗。 
可利用之產業及 
可開發之產品 
Portable multimedia applications in smart phones, PMP, PDA, mobile 
TV, and son on. 
技術特點 
1. Low hardware cost and low power consumption; 
2. High performance up to Full HD video encoding; 
3. FPGA demonstration; 
4. Performance index: HD1080i @30fps video decoding at 
150MHz 
推廣及運用的價值 z 具有多媒體市場商機; z 可針對多媒體 SOC 系統公司或 IP 設計公司進行推廣; 
※ 1.每項研發成果請填寫一式二份，一份隨成果報告送繳本會，一份送 
貴單位研發成果推廣單位（如技術移轉中心）。 
※ 2.本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容 
※ 3.本表若不敷使用，請自行影印使用。 
表 Y04 2
 
二、 建議 
本人非常感謝國科會此次補助參加第 10 屆台美創新資訊科技研討會議(The 10th 
Emerging Information Technology Conference (EITC-2010)。會中除了學習有關低功率多
媒體 SOC 設計領域之研究技術之外，也同時了解雲端技術、生醫電子技術、SOC 設計
平台技術等之最新發展。 
 
三、 攜回資料名稱及內容 
    參加本次第 10 屆台美創新資訊科技研討會議(The 10th Emerging Information 
Technology Conference (EITC-2010)並無演說論文集之整理，因此只攜回會議議程冊與
參加演討會之滿滿收獲。 
 
 
APPENDIX: 參加 EITC-2010 之行程照片 
  
表 Y04 4
Day Tutorial，其中，Half Day Tutorial 的主題為 Multimedia Signal Processing on Platforms with 
Multiple Cores，從主講者與提問的過程中，獲得了許多寶貴的經驗與專業知識。 
  
以下為學生參與會議的照片記錄: 
 
 
▲學生所正在跟各國研究人員講解所投稿之 Demo 
 
 
▲學生所正在跟各國研究人員講解所投稿之 Demo 
 
國科會補助計畫衍生研發成果推廣資料表
日期:2010/08/25
國科會補助計畫
計畫名稱: Media-To-Go：遠端多媒體資訊系統(3/3)
計畫主持人: 郭峻因
計畫編號: 98-2220-E-194-001- 學門領域: 晶片科技計畫--目標導向型研究
計畫 
研發成果名稱
(中文) 低成本H.264視訊編碼器與解碼矽智財
(英文) Low cost H.264 Video Encoder and Decoder IP
成果歸屬機構
國立中正大學 發明人
(創作人)
郭峻因,張修誠,簡呈安,陳嘉偉
技術說明
(中文) H.264 baseline profile video encoder and decoder IP 
(a) Reference C codes for H.264 video encoder and decoder; 
(b) Synthesizable RTL codes, associated test-benches, and SYNOPSYS 
synthesis scripts; 
(c) A low cost H.264 video decoder architecture; 
(d) A quality scalable H.264 video encoder architecture; 
(e) System verification environments for H.264 video encoder IP and 
Decoder IP; 
(f) Documentation; 
(英文) H.264 baseline profile video encoder and decoder IP 
(a) Reference C codes for H.264 video encoder and decoder; 
(b) Synthesizable RTL codes, associated test-benches, and SYNOPSYS synthesis scripts; 
(c) A low cost H.264 video decoder architecture; 
(d) A quality scalable H.264 video encoder architecture; 
(e) System verification environments for H.264 video encoder IP and 
Decoder IP; 
(f) Documentation; 
產業別 電機及電子機械器材業
技術/產品應用範圍 Portable multimedia SOC
技術移轉可行性及
預期效益
技術移轉倚強科技，授權金新台幣兩百萬元整，衍生產學計畫七十萬元整
註：本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。
件數 2 1 100% 件 
1. 中正郭峻因教
授與倚強科技公
司合作技術移轉
「低成本 H.264 
視訊編碼器與解
碼矽智財」，技術
授權金為新台幣
兩百萬元，並衍生
產學合作計畫共
兩百萬元整。 
2. 雲科大蘇慶龍
教授與倚強科技
公司合作技術移
轉「適用於視訊壓
縮硬體設計之移
動向量快速運算
技術」技術移轉授
權金為伍拾萬元
整。 技術移轉 
權利金 2500 1000 100% 千元 
1. 中正郭峻因教
授與倚強科技公
司合作技術移轉
「低成本 H.264 
視訊編碼器與解
碼矽智財」，技術
授權金為新台幣
兩百萬元，並衍生
產學合作計畫共
兩百萬元整。 
2. 雲科大蘇慶龍
教授與倚強科技
公司合作技術移
轉「適用於視訊壓
縮硬體設計之移
動向量快速運算
技術」技術移轉授
權金為伍拾萬元
整。 
碩士生 24 12 100%  
博士生 13 12 100%  
博士後研究員 0 0 100%  參與計畫人力 
（本國籍） 
專任助理 1 1 100% 
人次 
聘任一位專任助
理協助計畫執行
事宜。 
期刊論文 6 4 100% 
發表含 IEEE 期刊
在內之 SCI期刊論
文。 
國外 論文著作 
研究報告/技術報告 0 0 100% 
篇 
 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
計畫研究成果並鼓勵同學參與 IC 設計相關競賽，詳細資料如下： 
1. 中正大學郭峻因教授指導學生參與並獲得國際競賽 ASP-DAC 2011 
University LSI Design Contest Best Design Award 
2. 中正大學郭峻因教授指導學生參與並獲得 2010 旺宏金矽獎評審團銅獎 
3. 中正大學郭峻因教授指導學生參與並獲得教育部嵌入式系統競賽佳作獎(兩
件)等榮譽。 
4. 逢甲大學鄭經華教授指導兩位碩士生（鍾昰毅、周俊賢）獲得國家晶片系統
設計中心 2009 CIC 晶片製作優良設計獎(數位晶片組第一名) 
5. 逢甲大學鄭經華教授指導兩位碩士生（蔡佑慈、黃翔暉）獲得 2009 旺宏金
矽獎銅牌 
6. 逢甲大學鄭經華教授指導碩士生鍾昰毅獲得 2009 旺宏金矽獎優勝獎 
7. 逢甲大學鄭經華教授指導兩位專題生（賴一丞、許鈞豪）獲得 97 學年度大
學校院積體電路設計競賽全客戶組佳作獎   
8. 逢甲大學鄭經華教授指導學生獲得 2010 Electronic Technology Symposium
最佳海報獎  
9. 逢甲大學鄭經華教授指導學生獲得 2010 年國家晶片系統設計中心（CIC）優
良晶片設計佳作獎兩座。 
雲科大蘇慶龍教授指導學生參與 教育部主辦 九十八年度全國微電腦應用系統
設計製作競賽-大專組-信號處理與通訊類 第三名 吳國暄、俞喬凱、房煥偉 (比
賽日期：2009/10/16 比賽地點：成功大學) 
11. 雲科大蘇慶龍教授指導學生參與教育部主辦 九十八年度全國微電腦應用
系統設計製作競賽-大專組-信號處理與通訊類 佳作 陳怡佑、周芷泰 (比賽日
期：2009/10/16 比賽地點：成功大學) 
12. 雲科大蘇慶龍教授指導學生參與2009 教育部主辦 技專院校國際技藝競賽
數位訊號處理創思設計競賽 軟體系統應用組 佳作 黃龍旺、洪承孺、林子暉
(比賽日期：2009/10/26 比賽地點：南台科技大學) 
13. 雲科大蘇慶龍教授指導學生參與2009 教育部主辦 技專院校國際技藝競賽
數位訊號處理創思設計競賽 影音訊號處理組 佳作 陳怡佑、周芷泰 (比賽日
期：2009/10/26 比賽地點：南台科技大學) 
14. 雲科大蘇慶龍教授指導學生參與 2010 教育部主辦 98 學年度大學校院積
體電路(IC)設計競賽 大學組可程式邏輯設計 優等 吳國暄、房煥偉 
15. 雲科大蘇慶龍教授指導學生參與 2010 教育部主辦 98 學年度大學校院積
體電路(IC)設計競賽 大學組可程式邏輯設計 佳作 蘇緯翔、林耘生 
16. 雲科大蘇慶龍教授指導學生參與 2010 參加 98 學年度 教育部主辦全國大
學校院積體電路(IC)設計競賽得獎對伍獲得全國前十強實驗室 (主辦單位統計
發佈消息) 
17. 雲科大蘇慶龍教授指導學生參與 98 學年度大學校院嵌入式系統設計競賽
嵌入式系統軟體組 設計完成獎 黃瑞竣、朱諺汝、華智豪 (比賽日期：
2010/05/22 比賽地點：成功大學) 
18. 雲科大蘇慶龍教授指導學生參與教育部主辦 九十九年度全國微電腦應用
系統設計製作競賽-大專組-信號處理與通訊類 佳作 江嘉羚、溫航瑞、黃龍聖
(比賽日期：2010/10/15 比賽地點：成功大學) 
19. 雲科大蘇慶龍教授指導學生參與教育部主辦 九十九年度全國微電腦應用
系統設計製作競賽-大專組-信號處理與通訊類 佳作 蘇煒翔、賴柏廷、陳凱萍
(比賽日期：2010/10/15 比賽地點：成功大學) 
20. 雲科大蘇慶龍教授指導學生參與教育部主辦 九十九年度全國微電腦應用
系統設計製作競賽-大專組-嵌入式系統類佳作 黃瑞竣、朱諺汝、華智豪 (比賽
日期：2010/10/15 比賽地點：成功大學) 
 
 
