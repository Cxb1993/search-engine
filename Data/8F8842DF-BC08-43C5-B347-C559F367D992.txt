the fuzzy system. However, the disadvantage of the 
FCM algorithm is that the number of clusters must be 
predetermined. That is, the number of fuzzy rules in 
the fuzzy system designed by the FCM algorithm 
must be predetermined. If the number of clusters is 
given, the clustering results of the FCM algorithm are 
also influence by the choice of initial cluster centers 
and the distance measure. In [10], a method for 
generating the hyperbox regions is proposed to 
determine the premise part of a fuzzy system for the 
identified system. In this approach, the learning 
parameter is very critical, since it directly affects the 
number and position of the resulting hyperboxes. 
Consequently, the above-mentioned approaches to the 
scatter-type fuzzy partitions for the input space suffer 
from a high sensitivity of the accuracy with respect to 
the skill of the user to determine a predefined 
parameter for the number of rules. 
In this paper, a method based on the particle 
swarm optimization (PSO), called a PSO-based 
method, is proposed to automatically determine an 
appropriate number of fuzzy rules for the identified 
system. A fitness function is designed to deal with the 
tradeoff between the number of rules and the 
approximation accuracy. In the PSO-based method, 
each individual corresponds a fuzzy system. The PSO 
is applied to determine an appropriate number of 
rules and the membership functions of the generated 
fuzzy system. Based on the guidance of the defined 
fitness function, the fuzzy system corresponding to 
the individual will satisfy the desired objective as 
well as possible. Consequently, the selected fuzzy 
system has an appropriate number of rules and a 
small mean-squared error for the identified system. 
This paper is organized as follows: Section 2 
describes the structure of the fuzzy system. Section 3 
constructs the fuzzy system with an appropriate 
number of rules using the proposed PSO-based 
method. In Section 4, two nonlinear systems are 
utilized to illustrate the efficiency of the proposed 
approach. Finally, Section 5 concludes the paper. 
 
2. Fuzzy System Structure 
When M  input variables  
and a single output variable  are considered, a 
rule base of a fuzzy system can be expressed as 
follows: 
),,,( 21 Mxxx L
y
,,,2,1
,
:
110
2211
Rj
xaxaayisyThen
AisxandandAisxandAisxIf
rulethj
MjMjjj
jMMjj
L
L
L
=
+++=
−
        (1)
 
where R is the number of fuzzy rules in the rule base, 
  are the fuzzy sets 
of the premise part, and 
,,,2,1, RjAji L= ,,,2,1 Mi L=
,,,1,0,,,2,1, MiRja ji LL ==  are the real numbers 
of the consequent part. In this paper, the membership 
function of the fuzzy set  is described by  jiA
⎪⎪
⎪
⎩
⎪⎪
⎪
⎨
⎧
>⎟⎟
⎟
⎠
⎞
⎜⎜
⎜
⎝
⎛
⎟⎟⎠
⎞
⎜⎜⎝
⎛ −−
≤⎟⎟
⎟
⎠
⎞
⎜⎜
⎜
⎝
⎛
⎟⎟⎠
⎞
⎜⎜⎝
⎛ −−
=
,,exp
,,exp
);,,(
)1,(
2
)3,(
)1,(
)1,(
2
)2,(
)1,(
)3,()2,()1,(
jii
ji
jii
jii
ji
jii
ijijijiA
mxif
m
mx
mxif
m
mx
xmmm
ji
µ
 
        (2)
 
where ,  and  determine the 
center position, the left and right width values of the 
membership function, respectively. Hence, the shape 
of the membership function is determined by a 
parameter vector 
)1,( jim )2,( jim )3,( jim
][ mmmm = )3,()2,()1,( jijijiji . The 
j-th fuzzy rule in the rule base is determined by a 
parameter vector ][ mmmr L= 21 jMjjj . 
Consequently, the set of parameters in the premise 
part of the rule base is defined as ][ rrrr L= 21 R . 
According to (1), the set of parameters in the 
consequent part of the rule base is defined as 
][ aaaaaaaaaa LLLL 102212011110 RMRRMM=
.  
When the input )( 21 Mxxxx L=  is given, 
the firing strength of the premise of the j-th rule is 
calculated by ∏
=
=
M
i
iAj xxq ji
1
)()( µ . By taking the 
weighted average of , the output of the fuzzy 
system with respect to the input 
jy
x  can be 
determined by  
∑
∑
=
=
+++⋅
= R
j
j
R
j
MjMjjj
xq
xaxaaxq
y
1
1
110
)(
)()( L
. (3)
 
According to the above description, each parameter 
set consisting of the premise and consequent 
parameters determines a fuzzy system. Thus, 
different parameter sets determine different fuzzy 
systems so that the generated fuzzy systems have 
different performances. The goal of this paper is to 
find an appropriate fuzzy system to approach an 
identified system where only the input-output data 
are available. Therefore, the mean-squared error 
between the generated fuzzy system and the 
identified system and the number of rules of the 
generated fuzzy system can be viewed as 
Subsequently, the recursive least-squares method is 
applied to determine the parameters in the consequent 
part of the generated fuzzy system. According to the 
above description, each individual corresponds to a 
fuzzy system. In order to construct a fuzzy system 
which has a low number of fuzzy rules and a small 
mean-squared error simultaneously, the fitness 
function is defined as follows: 
)()()( 21 hhhh pgpgpfitf ==    (7) 
where  is the fitness value of the individual hf hp , 
)( pg1 h  and )( pg2 h  are defined respectively as 
follows: 
⎟⎟
⎟⎟
⎟
⎠
⎞
⎜⎜
⎜⎜
⎜
⎝
⎛ −
−=
∑
=
e
N
n
h
nfnN
h
yy
pg σ
1
21
1
)(
exp)(
  (8)
 
and  
⎟⎟⎠
⎞
⎜⎜⎝
⎛−=
r
h
h
r
pg σexp)(2 .     (9) 
Here, eσ  and rσ  are user-defined constants for 
the fitness function. Consequently, the fitness 
function will guide the individual to find a fuzzy 
system with a low number of rules and a small 
mean-squared error. In this way, as the fitness 
function value increases as much as possible based on 
the guidance of the proposed fitness function, the 
fuzzy system corresponding to the individual will 
satisfy the desired objective as well as possible. That 
is, the selected fuzzy system has a low number of 
rules and a small mean-squared error simultaneously. 
Subsequently, a PSO-based method is proposed to 
find an appropriate individual so that the 
corresponding fuzzy system has the desired 
performance. The procedure is described as follows: 
Step 1: Initialize the PSO-based method. 
(a) Set the number of individuals (L), the maximum 
number of rules (B), the number of generations (K), 
the constants for the fitness function ( eσ  and rσ )  
and the constants for the PSO algorithm 
( 2121 ,,, candcddψ ). 
(b) Generate randomly initial population P .  
Each individual of the population is expressed as 
follows: 
][
hhh
grp = ,      (10) 
where
][ )3,()2,()1,()3,1()2,1()1,1()3,1()2,1()1,1()3,11()2,11()1,1(
h
BM
h
BM
h
BM
h
B
h
B
h
B
h
M
h
M
h
M
hhh
h mmmmmmmmmmmmr LLL=  
and ][ 21
h
B
hh
h
gggg L= . 
is 
randomly generated as follows: 
},3,2,1{},,,2,1{},,,2,1{,),( ∈∈∈ kMiBjm h kji LL
)()( min ),(
max
),(
min
),(),( randmmmm kjikjikji
h
kji ⋅−+= , (11) 
where the range of the parameter  is defined 
as  and  is a uniformly 
distributed random numbers in [0,1]. 
 is randomly generated as 
follows: 
h
kjim ),(
],[ max ),(
min
),( kjikji mm ()rand
},,,2,1{],1,0[ Bjg hj L∈∈
)(randg hj = .      (12) 
(c) Generate randomly initial velocity vectors 
.,,2,1, Lhv h L=   
Each velocity vector is expressed as follows: 
][
hhh
v βα= ,      (13) 
where ][ )3,()2,()1,()3,1()2,1()1,1()3,1()2,1()1,1()3,11()2,11()1,1(
h
BM
h
BM
h
BM
h
B
h
B
h
B
h
M
h
M
h
M
hhh
h ααααααααααααα LLL=  
and 
].[ 21
h
B
hh
h
ββββ L=
},3,2,1{},,,2,1{},,,2,1{,),( ∈∈∈ kMiBjh kji LLα  is 
randomly generated as follows: 
)(
20
min
),(
max
),(
),( rand
mm
v kjikjih kji ⋅
−=
.   (14) 
},,,2,1{, Bjhj L∈β  is randomly generated as 
follows: 
20
()randh
j =β .      (15) 
Step 2: Calculate the fitness value of each individual 
and set initial '' , hh fp  for each individual and initial 
bestbest fp ,  for the initial population. 
(a) ,,,2,1),( Lhpfitf
hh
L==  
Set , hh ff =' hh pp =' ,   .,,2,1 Lh L=
(b) Find the index J of the individual with the best 
fitness .  h
L
hJ
ff
1
max
=
=
Set .,
J
best
J
best ppff ==  
(c) Set gen=1. 
Step 3:  Update the vectors 
,,,2,1],[ 21 Lhgggg
h
B
hh
h
LL ==  as follows: 
If ()rand≥ψ , then , where 
. Here, 
h
j
h
j gg ** 1−=
)5.0()(* +⋅= randBroundj
)5.0()( +⋅ randBround  rounds  to 
the nearest integer . 
5.0() +⋅ randB
},,2,1{* Bj L∈
Step 4: Update '' , hh fp  and 
bestbest fp , . 
(a) Update '' , hh fp  in the following: 
Calculate )( hh pfitf = , if , then , 'hh ff > hh ff ='
hh
pp =' , .,,2,1 Lh L=  
(b) Update bestbest fp ,  in the following: 
If , then besth ff >' .,,2,1,, '' Lhppff h
best
h
best L=== . 
Cybernetics and Systems: An International Journal 
(SCI), Vol. 37, No. 7, pp. 707-723, 2006. 
 
Acknowledgement: This research was supported in 
part by the National Science Council of the Republic 
of China under contract 95-2221-E-274-004 
 
References: 
[1] S. Abe and M.S. Lan, "Fuzzy rules extraction 
directly from numerical data for function 
approximation," IEEE Trans. on Systems, Man 
and Cybernetics, Vol. 25, pp.119-129, 1995. 
[2] R. Eberhart and J. Kennedy, “A new optimizer 
using particle swarm theory,” Proc. Int. Sym. 
Micro Machine and Human Science, Nagoya 
Japan, Oct. 1995, pp. 39-43. 
[3] J.S. Roger Jang, “ANFIS: 
Adaptive–network-based fuzzy inference 
systems,” IEEE Trans. on Systems, Man and 
Cybernetics, Vol. 23, No. 3, pp. 665-685, 1993. 
[4] J.S. Roger Jang, C.T. Sun and E. Mizutani, 
Neuro-Fuzzy and Soft Computing (Prentice Hall, 
New Jersey, 1997) 
[5] C.F. Juang, “A hybrid of genetic algorithm and 
particle swarm optimization for recurrent 
network design,” IEEE Trans. on Systems, Man 
and Cybernetics– Part B: Cybernetics, Vol. 34, 
No. 2, pp. 997-1006, 2004. 
[6] J. Kennedy and R. Eberhart, “Particle swarm 
optimization,” Proc. IEEE Int. Conf. Neural 
Networks, Perth, Australia, 1995, pp. 
1942-1948. 
[7] B. Kosko, Fuzzy Engineer, (Prentice Hall, New 
Jersey, 1997) 
[8] S.J. Lee and C.S. Ouyang, “A neuro-fuzzy 
system modeling with self-constructing rule 
generation and hybrid SVD-based learning,” 
IEEE Trans. on Fuzzy Systems, Vol. 11, No. 3, 
pp. 341-353, 2003. 
[9] C.J. Lin and C.T. Lin, “An ART-based fuzzy 
adaptive learning control network,” IEEE Trans. 
on Fuzzy Systems, Vol. 5, No. 4, pp. 477-496, 
1997. 
[10] P.K. Simpson, “Fuzzy min-max neural 
networks- Part 1: Classification,” IEEE Trans. 
Neural Networks, Vol. 3, pp. 776-786, Sept., 
1992. 
[11] M. Sugeno and G.T. Kang, “Structure 
identification of fuzzy model,” Fuzzy Sets and 
Systems, Vol. 28, pp. 15-33, 1988. 
[12] M. Sugeno and K. Tanaka, “Successive 
identification of a fuzzy model and its 
applications to prediction of a complex system,” 
Fuzzy Sets and Systems, Vol. 42, pp. 315-334, 
1991. 
[13] M. Sugeno and T. Yasukawa, “A 
fuzzy-logic-based approach to qualitative 
modeling,” IEEE Trans. on Fuzzy Systems, Vol. 
1, pp. 7-31, 1993. 
[14] T. Takagi and M. Sugeno, “Fuzzy identification 
of systems and its applications to modeling and 
control,” IEEE Trans. on Systems, Man and 
Cybernetics, Vol. 15, no. 1, pp.116-132, 1985. 
[15] Y.W. Teng and W.J. Wang, “Constructing a 
user-friendly GA-based fuzzy system directly 
from numerical data,” IEEE Trans. on Systems, 
Man and Cybernetics- Part B: Cybernetics, Vol. 
34, No. 5, pp. 2060-2070, 2004. 
[16] L.X. Wang and J.M. Mendel, “Generating fuzzy 
rules by learning from examples,” IEEE Trans. 
on Systems, Man and Cybernetics, Vol. 22, No. 
6, pp. 1414-1427, 1992. 
[17] L.X. Wang, A Course in Fuzzy Systems and 
Control (Prentice Hall, New Jersey, 1997) 
[18] C.C. Wong and C.C. Chen, “A hybrid clustering 
and gradient descent approach for fuzzy 
modeling,” IEEE Trans. on Systems, Man and 
Cybernetics- Part B: Cybernetics, Vol. 29, No. 6, 
pp. 686-693, 1999. 
[19] C.C. Wong and C.C. Chen, “A GA-based 
method for constructing fuzzy systems directly 
from numerical data,” IEEE Trans. on Systems, 
Man and Cybernetics- Part B: Cybernetics, Vol. 
30, No. 6, pp. 904-911, 2000. 
[20] R.R. Yager and D.P. Filev, Essentials of Fuzzy 
Modeling and Control (John Wiley, New York, 
1994) 
[21] J. Yen and L. Wang, “Simplifying fuzzy 
rule-based models using orthogonal 
transformation methods,” IEEE Trans. on 
Systems, Man and Cybernetics- Part B: 
Cybernetics, Vol. 29, No. 1, pp. 13-24, 1999. 
 
 
 
 
 
Table 1 Comparison of Performances of the proposed 
method and the binary-coded GA approach in 
Example 1 
The binary-coded GA Approach 
Rule 
Number 
Training 
Mean-squared 
Error 
Checking 
Mean-squared 
Error 
7 210583.7 −×  210423.7 −×  
8 210589.6 −×  210833.4 −×  
9 210712.3 −×  210803.2 −×  
10 210194.2 −×  210506.1 −×  
The Proposed Method 
Rule 
Number 
Training 
Mean-squared 
Error 
Checking 
Mean-squared 
Error 
4 310257.4 −×  310143.4 −×  
 
 
 
 
 
