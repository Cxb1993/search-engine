An Early Detection Algorithm of All-Zero Blocks in H.264/AVC 
through the Vector Operations 
Bo-Jhih Chen and Shen-Chuan Tai 
Institute of Computer and Communication Engineering,  
Department of Electrical Engineering,  
National Cheng Kung University, Tainan, Taiwan 
E-mail: cbj@lily.ee.ncku.edu.tw 
 
 
Abstract - Motion estimation (ME) and discrete 
cosine transform (DCT) are major two parts for 
H.264/AVC, however, these two parts occupy most of 
computational time. Several studies focus on the fast 
motion estimation (FME) algorithm to reduce ME 
computations and then to accelerate the encoding 
process. FME has been optimized but we cannot 
neglect another parts on H.264/ AVC; i.e., 
integer-DCT (I-DCT) / quantization. With this concern, 
we propose an efficient method through the vector 
operations to early detect all-zero block (AZB) before 
the transform and quantization on H.264. Experimental 
results show that the proposed method is superior to 
other algorithms in terms of the hit detection rate and 
the computational complexity reduction at the expense 
of insignificant degradation of video quality.  
 
Keywords: H.264/AVC, DCT, I-DCT, AZB 
 
 
1. Introduction  
Most standard video coding technologies, like 
MPEG series, H.26x series [1]-[4] and H.264/AVC [5], 
are widely applied in various multimedia 
communications. Motion estimation, motion 
compensation, and discrete cosine transformation / 
quantization of H.264 are major processing 
functionalities for these codec standards. H.264/AVC is 
the latest video coding technology released by JVT 
team.  
H.264/AVC outperforms existing video coding 
standards in terms of video coding performances [6], 
however, the considerable amount of computations of 
an H.264/AVC required encoder. A lot of research 
works have been dedicated on optimization of 
H.264/AVC including fast motion estimation and 
low-complexity transform and quantization [7]-[12].  
Several studies concentrated on the optimization of 
motion estimation, but some works did not neglect to 
optimize the other portions to further speed up the 
whole of encoding in H.264. One way to accelerate the 
encoder is to early detect an all-zero block (AZB) prior 
to transform process. Once a block is detected as an 
AZB, then transform/quantization can be skipped. An 
“AZB” block means that a 4×4 block of all sixteen 
transformed coefficients being zeros after quantization. 
Xuan [13] provided a simple method to verify that each 
residual block whether it omits the transform process. 
In [14], Sousa theoretically derived a sufficient 
condition for AZB detection. It based on the sum of 
absolute difference (SAD) and a quantization 
parameter (QP). Moon, et al. [15] proposed an 
approach derived from the theoretical observation of 
distinguish positions of transform coefficients in 
H.264. 
In this paper, the proposed method for AZB 
detection is according to the significant relationship: a 
quantized block relative to multiplication factors (MF). 
Firstly, we use a novel model to form the transform 
signals in vector by the matrix direct product, and 
furthermore three criteria of AZB detection are derived 
by vector resultant. The detection rate and 
computational computations could be better than 
[14]-[15]. These will be presented in the experimental 
results. In addition, it ensures that our proposed method 
could be utilized to enhance the detection ability while 
reducing the computations relatively. 
This paper is organized as follows. Integer DCT 
and quantization of the H.264, and previous works for 
detecting all-zero blocks are briefly introduced in 
Section 2. Our proposed method through vector 
operations is presented in Section 3. Section 4 
introduces the experimental results to verify the 
efficiency of our proposed method for accelerating 
encode in H.264. The conclusions of this paper are 
given in Section 5. 
 
2. Analysis of All Zero Block in encoder 
 
2.1. Integer Discrete Cosine Transform and  
Quantization in H.264 
For a 4×4 transform block Y. Each transform 
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
=
=
33323130
23222120
13121110
03020100
33323130
23222120
13121110
03020100
*.
*.
xxxx
xxxx
xxxx
xxxx
vvvv
vvvv
vvvv
vvvv
w
uv
uv
uv Xv
 
(5)
 Each residual signal (xij) is multiplied by a weight 
value (vij) in the same position in weight matrix 
uv
v  . 
To simplify the implementation later, we use the 
strategy of “matrix direct product” to represent the 
transform process, which can be represented as  
))(()( XHW vecvec ⋅=  (6)
where vec(.) denotes a vector, which size of 16×1, that 
is, vec(X) is a one-dimension vector of 4×4 residual 
block, and a transform block is represented as vec(W). 
( )TX 331003020100)( xxxxxxvec L=  
( )TW 331003020100)( wwwwwwvec L=  
(7)
The matrix H is a 16×16 matrix and is defined as 
CCH ⊗=  (8)
where the operator “⊗ ” denotes the “matrix direct 
product” with element defined by 
klijmn cch =  (9)
where kim += 4 and ljn += 4 . C is a 4×4 matrix 
defined in H.264. H is also equal to p row vectors 
( )
( )
( )
( )⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
=
⎥⎥
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎣
⎡
=
15210
215222120
115121110
015020100
2
1
0
ppppp hhhh
hhhh
hhhh
hhhh
L
M
L
L
L
M
H
H
H
H
H
 
(10) 
and vup += 4 . 
For instance, the transform signal of (0,0)th is given 
by w00 = )(0 XH vec⋅ , transform signal of (0,1)th is w01 
= )(1 XH vec⋅  and so on. Therefore, each element of a 
transformed block can be depicted as 
)(XH vecw pp ⋅=  (11) 
where Hp is a 16×1 row matrix of p. 
 
3.2. Proposed Method of AZB Detection by 
Vector Resultants 
To determine each transform coefficient is equal to 
zero after quantization. It requires the huge amount of 
computations to judge if quantized signal is less than 
TH(QP_rem,idx).  
Given an quantization parameter (QP), we can 
easily get a multiplication factor (MF) listed in Table 1 
to find a TH(QP_rem,idx). The transform block (W) 
and the thresholds (TH) are regarded as two 4×4 
matrices, which specifies the relative coordinate of the 
(u,v)th position. These two matrices are represented in 
Fig. 2. 
(a) 
(0,0) (0,1) (0,2) (0,3)
(1,0) (1,1) (1,2) (1,3)
(2,0) (2,1) (2,2) (2,3)
(3,0) (3,1) (3,2) (3,3)
(b) 
(*,2) (*,1) (*,2) (*,1)
(*,1) (*,0) (*,1) (*,0)
(*,2) (*,1) (*,2) (*,1)
(*,1) (*,0) (*,1) (*,0)
Figure 2. (a) A 4×4 transform signal block of 
wuv , (b) A 4×4 matrix of threshold, TH(*,idx). 
As the QP_rem is fixed, the threshold TH(*,idx) is 
constant on idx={0, 1, 2}. These 16 transform elements 
can be classified into three sets depending on the (u,v)th 
position. Sidx is the set of transform signals according to 
the value of idx.  
If all transform signals of these three sets in this 
transform block are less than threshold TH(QP_rem,idx) 
concurrently, this transform block will be an AZB. 
According to eq.(11), transform signals can be 
represented as follows 
⎪⎩
⎪⎨
⎧
=+⋅=
=+⋅=
=+⋅=
=
}22%2%|)({
}12%2%|)({
}02%2%|)({
0
1
2
vuvecS
vuvecS
vuvecS
S
p
p
p
idx
XH
XH
XH
 
(12)
where 150 ≤≤ p  and vup += 4 . 
In order to reduce the computations of AZB 
detection, find vector resultants to represent these three 
sets respectively. Using the “vector addition” operation, 
an identical vector (e.g. vector resultant) is obtained by 
row vectors Hp in which of Sidx. Three identical vectors 
of Sidx are defined as 
10820)2( HHHHH ⊕⊕⊕=id   
1412119
6431)1(
              HHHH
HHHHH
⊕⊕⊕
⊕⊕⊕⊕=id  (13) 
151375)0( HHHHH ⊕⊕⊕=id   
where Hid(idx) is an identical vector of Sidx, and the 
operator “⊕ “ denotes the “vector addition” operation. 
Eq. (12) can be rewritten as 
Table 3. Comparisons of the false detection 
rate (FDR) of three methods 
QP [14] [15] Proposed [14] [15] Proposed 
 Akiyo News 
24 0 0 7.39 0 0 7.56 
28 0 0 9.64 0 0 8.82 
32 0 0 9.32 0 0 9.39 
36 0 0 11.95 0 0 11.04 
40 0 0 13.23 0 0 12.95 
 Coastguard Silent 
24 0 0 3.58 0 0 4.78 
28 0 0 6.30 0 0 6.82 
32 0 0 9.45 0 0 9.78 
36 0 0 12.91 0 0 12.74 
40 0 0 16.40 0 0 15.09 
 Foreman Table Tennis 
24 0 0 7.65 0 0 5.41 
28 0 0 10.42 0 0 8.19 
32 0 0 11.66 0 0 10.58 
36 0 0 12.14 0 0 12.59 
40 0 0 12.81 0 0 12.73 
The comparative results of HDR are illustrated in 
Fig. 4, the horizontal axis is QP and the vertical axis is 
the HDR, where we can see that our proposed method 
is superior to the others two algorithms because the 
proposed method defines the optimal condition to early 
detect the all-zero blocks. The detection of AZBs of the 
proposed method is more efficient than the others two 
algorithms and thereby mostly all zeros block in the 
video sequence were detected. These blocks 
correspond to approximately 60% - 94% of the total 
AZBs detected by the proposed method.  
Table 3 shows the results of the FDR among our 
proposed method and the others two algorithms. The 
FDR of Sousa[14] and Moon[15] both are equal to zero 
due to they are lossless algorithms that NAZB was not 
classified to be an AZB for these two algorithms. In 
average, the FDR of our proposed method is about 3% 
- 16% in simulation, especially under the higher 
quantization parameter. This result can explain why 
video quality degrades in Table. 2 when applying our 
proposed in the procedure of video coding. 
To further demonstrate the proposed method, we 
can consider the overall computaions required for 
detection of AZB in the whole encoding process. 
Required computations of algorithms for AZB 
detection are shown in Table 4.  
Computation saving rate (CSR) is defined as  
100%1
JM
×−=
C
CCSR method  (17)
where Cmethod is the encoding operations of DCT/Q for 
a method of AZB detection, and CJM is the total 
encoding operations of DCT/Q in original encoder 
(JM). 
 
Table 4. Required computational operations of 
DCT/Q per block 
Algorithms
Transform / 
Quantization 
(Inverse-)Transform / 
Quant. 
ADD / 
MUL 
SHIFT / 
CMP 
ADD / 
MUL 
SHIFT / 
CMP 
4×4 DCT 64 / 0 16 / 0 64 / 32 16 / 0 
Additional operations (Prediction of AZB) 
[14] 15 / 0 0 / 1 0 0 
[15] 18 / 2 0 / 3 0 0 
Proposed 28 / 6 0 / 3 0 0 
 
Fig. 5 shows the comparisons of CSR of methods 
for detecting the AZB. It means how many 
computaions can be reduced over the encoding process. 
In average, it clearly observes that the proposed 
Figure 4. HDR curve of six video 
sequences. (a) Akiyo (b) Coastguard (c) 
Foreman (d) News (e) Silent (f) Table 
Tennis  
(a) (b) 
(c) (d) 
(e) (f) 
出席國際學術會議心得報告 
計畫編號 NSC  96－2221－E－006－014 
計畫名稱 視訊編碼與多媒體低失真傳輸於分散式監控系統之研究 
出國人員姓名 
服務機關及職稱 
戴顯權 國立成功大學電機系 教授 
張蓺英 博士班學生 
王乃慶 碩士班學生 
會議時間地點 May 28-30, 2008, Sanya, Hainan, China 
會議名稱 2008 Congress on Image and Signal Processing (CISP 2008) 
發表論文題目 A Two-Stage Contrast Enhancement Algorithm for Digital Images 
 
一、會議時程 
– POSTER SESSION 4 – , Image Enhancement & Noise Filtering 
10:30-12:00,Thursday, May 29, 2008. 
二、與會心得 
本次參加 Congress on Image and Signal Processing (CISP 2008)，於中國海南島瀋陽的會
議，會議期間是五月28日至30日，為期三天。本人於28日中午抵達會場，全程參與會議，
並於31日一早離開，31日下午回到台灣。 
本篇報告安排於29日上午。論文主題為 ”A Two-Stage Contrast Enhancement Algorithm 
for Digital Images”，並且於中場休息時與國內外參與本會的學者交換研究心得，收穫良多。 
會議上討論到不少影像相關的處理技術，並且與其他國家的教授學生交換意見，本次會議
的主軸範圍很廣，包含兩大主題：VIDEO IMAGE PROCESSING（Coding and transmission,  
Image enhancement & noise filtering, Image representation and transforms）與SIGNAL 
PROCESSING等相關議題，對於了解視訊影像處理或訊號處理相關領域的研究有相當大的
幫助。 
總結此次會議包含了通訊及視訊等各個相關研究領域，既滿足個人研究領域上的需
要，也開拓了研究視野，是非常值得參與的一個會議。本人收穫良多， 也期待未來有機會
再次參與相關的國際會議。 
