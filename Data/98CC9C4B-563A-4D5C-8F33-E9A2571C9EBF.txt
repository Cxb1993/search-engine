 2
行政院國家科學委員會專題研究計畫成果報告 
 
生產線上多部機器流程工廠中工作件具有退化性之研究 
 
A problem on multiple-machine flowshop with deteriorating jobs 
 
計畫編號:NSC 95－2213－E－035－084 
執行期限:2006 年 08 月 01 日至 2007 年 07 月 31 日 
主持人:李文炯  逢甲大學統計系 
計畫參與人員: 何嘉琦，李玲慧，鄭婉琳 逢甲大學統計暨精算研究所 
 
一、中文摘要 
近年來對於製程中的存貨的降低要求提高，工作件
快速運轉率的要求，以及如何有效的穩定使用有限
的資源，使得平均流程時間為準則的最小化問題是
現今動態生產系統下最有意義之指標之一。而多機
流程工廠向來是生產排程領域中最熱門研究主題
之一。但是，在傳統的多機流程工廠排程中，研究
者忽略了工作一旦被耽擱而較慢處理時，其後之加
工處理時間會變得比預定時間還長。譬如，Gupta 
和 Gupta (1988)舉出在煉鋼廠中，鑄塊(ingot)的處
理時間會隨著等待被處理時間拉長而變得更長，又
譬如，Kunnathur 和 Gupta(1990)舉出在火災發生
時，救火的工作會隨著消防車的到來時間的耽擱，
將造成救火的時間亦隨之拉長, 而 Mosheiov(1996)
亦指出在醫療保健方面，當健康狀況惡化後才就
醫，其整個醫治復原的過程將會拖得更久。睽諸以
上種種現象，了解到工作件的加工時間在其等待被
處理的過程中受到拖延時，則拉長了加工的處理時
間。這些相關的問題，一般稱之為”退化工作件排
程問題”。 
    本計畫主要在探討多機流程工廠退化工作件
之總完成時間最小化的問題。本計劃將參考 Ignall
和 Schrage(1965)解雙機流程工廠的情形與 Chung 
et al. (2002) 解多機流程工廠的情形，Ahmadi
和 Bagchi(1990)和 Bansal(1977)所提出之下界值
和相關的刪除性質，提供一些判斷工作件排序之凌
越性質與下界值以來提昇分枝界限法尋找正確解
之效率。同時，也將參考一些近似解演算法，如
Nawaz et al. (1983) 、Ho (1995)、 Rajendran 和 
Ziegler (1997)、  Woo 和 Yim(1998)、 Liu 和
Reeves(2001)以及 Framinan et al.(2005) 尋找一
有效之近似解演算法。此外，本計畫亦提供模擬實
驗來測試正確解求解法之效率與近似解演算法之
準確性；並進一步針對退化率對正確解之效率與近
似解演算法的準確性的影響做進一步探討。 
 
關鍵字：多機流程工廠、平均流程時間、退化工作
件。 
 
Abstract 
Due to the demand of low in-process inventory, 
high turn-around of jobs, and how to maximize the 
usage of finite resources, mean flow time 
minimization problem has become the directions of 
modern dynamic manufacturing systems recently. In 
addition, flowshop scheduling problems play a very 
important role in the area of real production situations. 
However, in the classical scheduling theory, the 
concept of a job that is processed later consumes more 
time than that same job when processed earlier is 
neglected. For instance, Gupta and Gupta (1988) 
provided an example of steel rolling mills where the 
temperature of an ingot, while waiting to enter the 
rolling machine, drops below a certain level, requiring 
the ingot to be reheated before rolling. Kunnathur and 
Gupta (1990) gave a fire fighting example where the 
time and effort required to control a fire increases if 
there is a delay in the start of the fire fighting effort. 
Browne and Mosheiov (1996) pointed out as another 
case the surgical operation for a patient under 
worsening conditions. In all of these cases, 
accomplishing a task may need more time as time 
passes. Scheduling in this setting is known as 
scheduling deteriorating jobs. 
In this project, a multiple-machine flowshop 
scheduling problem with deteriorating jobs is 
discussed. The purpose of the project is to provide 
several dominance properties and lower bounds to 
enhance the efficiency of searching for the optimal 
solution. This might be able to deduce from Ignall and 
Schrage (1965), Bansal (1977), Ahmadi and Bagchi 
(1990) and Chung et al. (2002).Meanwhile, a 
heuristic algorithm is also presented to search for the 
near-optimal solution in order to further facilitate the 
search for the optimal solution and to develop an 
efficient way to obtain a good-quality solution for 
large-size problems. Nawaz et al. (1983), Ho (1995), 
Rajendran and Ziegler (1997), Woo and Yim (1998), 
Liu and Reeves(2001) and Framinan et al.(2005) have 
provided effective heuristic methods. Computational 
results are presented to evaluate the efficiency of the 
branch-and-bound algorithm and the accuracy of the 
heuristic algorithm. In addition, the impact of the 
deterioration rate to the performance of the proposed 
algorithms is investigated 
Keywords: Multiple-machine flowshop; Mean flow 
time; Deteriorating jobs. 
 
 4
和 Chang(1991)等等。 
    至於流程工廠中以平均流程時間為準則之文
獻中，則首推 Ignall 和 Schrage(1965)所提出之分
枝界限法來解決雙機流程工廠的情形。此後
Bansal(1977) 和Ahmadi和 Bagchi(1990)則提出了
下界值來改善分枝界限法的效率。而 Garey et 
al(1976)和 Lenstra et al. (1977) 則指出此問
題是 NP 難解(NP-hard)。因此，之後的學者則提出
各式各樣的啟始演算法來解決此一問題。而近似演
算法最早是由 Gupta(1972)、Miyazaki et al.(1978)
分別針對此問題，提出了他們的近似解。Rajendran
和 Chaudhuri(1992)則提出三個演算法，並且與
Gupta(1972)、Miyazaki et al.(1978)和 Ho 和
Chang(1991)作比較，他們宣稱他們所提之演算法
明顯優於其他方法， Rajendran(1993)又以偏好關
係(preference relation)為基礎提出另一個演算
法。Ho(1995)也提出一個新的近似法，在 2000 多
個測試例子中，顯示誤差在 0.16%明顯優於
Rajendran(1993) 和 Rajendran 和
Chaudhuri(1992)。往後的相關的著作不外乎集中
於發展更好的演算法或評估各式各樣的演算法，如
Rajendran 和 Ziegler (1997) ， Wang et al. 
(1997)，Yamada 和 Reeves (1998)，Woo 和 Yim 
(1998)。Liu 和 Reeves(2001)則提出一個建設性且
混合性(constructive and composite heuristic)
的方法，他們宣稱比以前的方法都有顯著的好。
Allaheverdi和Aldowaisan(2002)也比較一些最近
的方法並提出新之見解，他們所提出的演法則優於
Woo 和 Yim (1998)所提的方法。同年 Chung et 
al.(2002) 則提出分枝界限演算法配合下界值和刪
除性質，以尋找最佳解，不過僅限於 n≦15。
Framinan和Leisten(2003)也針對本問題提出一個
新的演算法。Framinan et al.(2005)就歷年來的
各種解決本問題之近似解進行分類和加以改良推
廣，最後建議出 2 個新的混合演算法(two new 
composite heuristics) 
 
三、研究結果與討論 
本計畫透過計算機的實驗來評估分枝演算法
和啟發式演算法之表現成果。程式是用 Fortran 90
所撰寫和配合 Pentium 4 的個人電腦執行。我們考
慮工作處理時間在 M1、M2、…、Mm是從一個均勻分
配上取整數 1 到 100 生成的整數。Framinan et al.
指出雖然此分配在實務上較不可能發生，但卻是作
為測試近似演算法優劣之最好工具之ㄧ。為了進一
步了解退化率的作用，我們考慮五種變化情況；其
包含了遞增的一個、遞減的一個、常數的一個、V
字型的一個和Λ型的一個。(圖形的趨勢描繪在圖
一和實際值請參考附件)。 
    計算機的實驗包含三個部份。為了求出下界值
的效率，在實驗的第一部份，我們執行分枝節演算
法計算只有一個下界值的每一個時間與節點數。機
器的數目固定在五台機器和兩個工作件數(n=8, 10)
作檢驗，其結果總結在表二，其中「O」表示為包
含下界值且「X」表示不包含下界值。舉例來說，
(O,X,X,X,X)代表只有第一個下界值 LB1 在方程式
(4)中。節點的平均和最大值數目和 CPU 時間(秒)
的平均和最大值是從枝節演算法中呈現。若僅考慮
一個下界值的枝節分析演算法，我們發現到當退化
率的趨勢是一個遞增函數或是一個常數時，下界值
以一個較後面的完成時間的機器作為基礎是比較
早完成的機器更有效率。而當退化率是一個遞減函
數時，第二個下界值看起來比第一個好。然而，當
n=8 時,包含一和五的下界值的節點個數至少九
次，當 n=10 時，則為二十三次。當退化率的趨勢
是Λ型，節點次數為 V 字型，當退化率的趨勢為 V
字型，下界值以最後一台機器的完成時間為基礎最
好。最後，包含五個下界值的枝節分析演算法中，
若以執行時間和節點數目上來看仍然最有效率，因
此，後面之分析皆以所有下界值為分析基礎。 
在 實 驗 的 第 二 部 份 ， 枝 節 分 析 法
(branch-and-bound)和五種啟發式演算法是處理
五種不同的工作數(n=10, 12, 14, 16, 18)和兩種
機器的數目(m=5, 10)作結合。這些測試是被設計
來說明性質、下界值之效果和啟發式演算的正確
性。節點數的平均和最大值的數目和 CPU 時間(秒)
的平均和最大值是從枝節分析演算法來描述。而從
起發式演算法中，記載錯誤百分比的平均和極大
值。錯誤百分比由啟發式演算法製造其計算方式為 
%100/)( ** ×− VVV  
其中V是由啟發式演算法從客觀函數生成來的值和
V*是從分枝界線法獲得到的最佳值。根據這結果，
五十次的試驗性條件被檢測，和 100 個重覆數是由
每一個條件隨機生成。製造 5000 個例子(其結果參
考附件表三)。可以觀察到節點的數目和執行時間
是以指數方式成長，當工作數目遞增。最耗時的情
形為當 n=18 時，花了將近 25 分鐘。在退化率的趨
勢中，遞增函數的問題是最容易找到最佳解，其次
為 V 字型和Λ型，然後是常數的，而遞減的情形是
最難。另外，當工作數目固定和機器數目遞增時，
此時的問題是較難解決的。當有退化現象的呈現，
FL 演算法對於小工作數問題有最佳的現象，其次為
NEH 和 WY 演算法，而 LR(1)和 RZ 是最差的。 
為了說明當有退化現象的問題，對於大工作
數問題的啟發式演算法的現象，用四種不同的工作
數目(n=50, 100, 150, 200)和兩種機器數目(m=5, 
10)作組合，作最後一部份的試驗。對於每一種演
算法都報告相對百分比的誤差之平均和極大值。這
RPD 因對於每個例子的最佳解而得。其結果，40 次
實驗性的條件被測驗，和 100 次重覆數為由每一個
條件隨機生成的。總共 4000 個例子被製造，且結
果總括都在表四。可以看見當退化率的趨勢是遞增
函數，FL 演算法優於其他啟發式演算法，從極大的
PRD 都等於 1。對於其他趨勢，沒有絕對優劣的關
係，從它們的平均數和極大的 PRD 都大於 1 就可知
道。大體上，FL 演算法在所有啟發式演算法中是最
好的，其次為 NEH 和 WY 演算法，而 RZ 和 LR(1)是
最糟糕的兩個。 
 
                                  
 6
Journal of Production Research 
26,1119-1124. 
28. Ignall, E., Schrage, L., 1965. Application of 
the branch and bound technique to some 
flowshop scheduli- ng problems, Operations 
Research 13,400-412. 
29. Johnson. S.M.. 1954. Optimal two-and 
three-stage production schedules with set-up 
times included, Naval Research Logistics 
Quarterly 1, 61-68. 
30. Kononov, A., and Gawiejnowicz, S., 2001. 
NP-hard cases in scheduling deteriorating 
jobs on dedicated machines, Journal of the 
Operational Research Society 52(6), 
708-717. 
31. Kunnathur, A.S., and Gupta, S.K., 1990. 
Minimizing the makespan with late start 
penalties added to processing times in a 
single facility scheduling problem, European 
Journal of Operational Research 47, 56-64. 
32. Lenstra, J.K., Rinnooy Kan, A.H.G. and 
Brucker, P., 1977. Complexity of machine 
scheduling problems, Annals of Discrete 
Mathematics 1, 343-362.. 
33. Liu, Reeves, 2001. Constructive and 
composite heuristic solutions to the 
P//ΣCischeduling problem, European Journal 
of Operational Research 132 439-452 
34. Miyazaki, S., Nishiyama, N., Hashimoto, F., 
1978. An adjacent pairwise approach to the 
mean flowtime scheduling problem, Journal 
of Operations Research Society of Japan 21, 
287-299. 
35. Mosheiov, G., 1994. Scheduling 
deteriorating jobs under simple linear 
deterioration, Computers and Operations 
Research 21, 653-659. 
36. Mosheiov, G., 1995. Scheduling jobs with 
step-deterioration: minimizing makespan on 
single and multi-machine, Computers and 
Industrial Engineering 28, 869-879. 
37. Mosheiov, G., 1996. −Λ shaped policies 
for schedule deteriorating jobs, Journal of the 
Operational Research Society 47, 1184-1191. 
38. Mosheiov, G., 2002. Complexity analysis of 
job-shop scheduling with deteriorating jobs, 
Discrete Applied Mathematics 117(1-3), 
195-209. 
39. Nawaz M., Enscore, E.E., Ham, I., 1983. A 
heuristic algorithm for the m-machine, n-job 
flow-shop sequencing problem, OMEGA 
11,91-95. 
40. Ng, C.T., Cheng, T.C.E., and Bachman, A., 
2002. Three scheduling problems with 
deteriorating jobs to minimize the total 
completion time, Information Processing 
Letters 81(6), 327-333. 
41. Ogbu, F.A., Smith, D.K. 1990. The 
application of the simulated annealing 
algorithm to the solution of the n/m/Cmax 
flowshop problem, Computers and 
Operations Research 17,243-253. 
42. Pinedo, M., 2002. Scheduling: Theory, 
Algorithms, and Systems, Prentice-Hall, 
Upper Saddle River, NJ. 
43. Rajendran, C.,Chaudhuri, D., 1992. An 
efficient heuristic approach to the scheduling 
of jobs in a flowshop, European Journal of 
Operational Research 61,318-325. 
44. Rajendran, C., 1993. Heuristic algorithm for 
scheduling in a flowshop to minimize total 
flowtime, International Journal of Production 
Economics 29, 65-73. 
45. Rajendran, C., Ziegler, H., 1997. An efficient 
heuristic for scheduling in a flowshop to 
minimize total weighted flowtime of jobs, 
European Journal of Operational Research 
103,129-138. 
46. Rajendran, C., Ziegler, H.,2004. Ant-colony 
algorithms for permutation flowshop 
scheduling to minimize makespan/total 
flowtime of jobs, European Journal of 
Operational Research 155, 426-438 
47. Stafford, E.F., 1988.On the development of a 
mixed integer linear programming model for 
the flowshop sequencing problem,Journal of 
Operational Research Society 39, 1163-1174. 
48. Tang, L., Liu, J., 2002. A modified genetic 
algorithm for the flowshop sequencing 
problem to minimize mean flow time, Journal 
of Intelligent Manufacturing 13,61-67. 
49. Van De velde, S.L., 1990. Minimizing the 
sum of job completion times in the 
two-machine flow-shop by Lagrangean 
relazation, Annals of Operations Research 26, 
257-268 
50. Vempati VS, Chen CL, 1993. An effective 
heuristic for flow-shop problems with total 
flow time as criterion,Computers and 
Industrial Engineering 25, 219-22. 
51. Voutsinas, T.G., and Pappis, C.P., 2002. 
Scheduling jobs with values exponentially 
deteriorating over time, International Journal 
of Production Economics 79, 163-169. 
52. Wang, C., Chu, C. and Proth, J.M., 1996. 
Efficient heuristic and optimal approaches 
for n/2/F/∑ iC  scheduling problems, 
International Journal of Production 
Economics 44, 225-237. 
53. Wang, C., Chu, C., Proth, J.-M., 1997. 
Heuristic approaches for n/m/F/ΣCi 
scheduling problems, European Journal of 
Operational Research 96, 636-644. 
54. Woo, D.S., Yim, H.S., 1998. A heuristic 
algorithm for mean flowtime objective in 
scheduling, Computers and Operations 
Research 25,175-182. 
55. Yamada, T., Reeves, C.R., 1998. Solving the 
Csum permutation flowshop scheduling 
problem by genetic local seach, Proceedings 
of 1998 IEEE International Conference on 
Evolutionary Computation, pp. 230-234. 
 8
following aspects: 
1. This paper considers a general 
multiple-machine permutation flow shop 
problem without the restriction of dominating 
machines. 
2. A branch-and-bound algorithm incorporating 
a dominance rule and several lower bounds is 
derived to obtain the optimal solution for this 
NP-hard problem. 
3. Performance of several well-known 
heuristics for the classical problem is 
evaluated with the consideration of 
deterioration. 
4. Since the deterioration rate of the materials 
might be faster or slower as the process goes 
on, it is interesting to study the impact of 
deterioration rate. In this paper, several 
deterioration patterns are evaluated. 
The rest of the paper is organized as follows. In the 
next section we describe the formulation of our 
problem. In Section 3, we introduce an elimination 
rule to speed up the search for the optimal solution. In 
Section 4, several lower bounds of the total 
completion time are derived for this problem. In 
Section 5, some well-known heuristic algorithms for 
the classical problem are also applied to solve the case 
with deteriorating jobs. In Section 6, a computational 
experiment is conducted to evaluate the efficiency of 
the branch-and-bound algorithm and the performance 
of the well-known heuristic algorithms. A conclusion 
is given in the last section. 
 
2. Problem description 
The problem formulation of the m-machine flowshop 
with deteriorating jobs is similar to that of the 
classical one. Suppose that there is a set of n jobs, say 
N= {1, 2, …, n},  to be processed on m machines M1, 
M2, …, Mm.  Each job j consists of m operations 
jO1 , jO2 , …, jmO  where jiO  has to be 
processed on machine Mi, i=1, 2, …, m. Processing of 
operation jiO ,1+  must start only after jiO  has 
been completed. Moreover, we consider a permutation 
schedule which means the job sequence is the same in 
all machines. The actual processing time pijr of job j 
on machine i is a function which depends on its 
starting time in a schedule, i.e., 
 ;...,,2,1      , mitbap iijij =+=  
nrj ...,,2,1,  = , 
where ija  is the normal processing time, ib  is the 
deterioration rate on machine i and t is its starting 
time. 
For a given schedule S, let Cij(S) denote the 
completion time of job j in machine i, while Ci[j](S) 
denote the completion time of a job scheduled in the 
jth position on machine i. The objective of this paper 
is to find a schedule ∗S  such that 
∑∑ ≤∗ )()( SCSC mjmj  for any schedule S . 
 
3. Dominance property 
Lenstra et al. (1977) showed that the total completion 
time minimization problem is NP-hard for 3≥m  
even without the deterioration consideration. 
Therefore, a branch-and-bound algorithm may be a 
viable approach to derive the optimal solution. Chung 
et al. (2002) provided a dominance property for the 
classical total completion time problem. In this section, 
the theorem is modified to take the phenomenon of 
deterioration into account. Let ),( 11 πσ=S  and 
),( 22 πσ=S  be two complete schedules where 1σ  
and 2σ  be two partial schedules which contain a set 
of s jobs. Furthermore, let ∏
=
+=
m
i
ibA
1
)1( . 
Theorem. Sequence 1S  dominates sequence 2S   if 
 
( ) ( ) ( ) ( ){ } )1/()1(max 2][1][11][12][1 −−−>− −≤≤== ∑∑ AAASCSCSCSC snskskmkjmsjjmsj  
.  Proof: First, we want to show 
[ ]( ) −+ 1C Sjsu [ ]( )2C Sjsu +  
[ ]( ) [ ]( ){ } jm
i
iskskmk
bSS ])1([CCmax
1
211 ∏=≤≤ +−≤                 
(1) 
for mu ≤≤1 , and snj −≤≤1 . By definition, 
the completion time of job scheduled on position 
js +  in 1S  on machine u is 
[ ]( )1C Sjsu +
[ ]( ) ⎭⎬
⎫
⎩⎨
⎧ ++++= ∑ ∏∏ −
= +=
++
=
−+≤≤
1
1
][][111
)1()1(Cmax
u
vl
u
li
jsuijsl
u
vi
ijsvuv
ababS  
[ ]( ) ∑ ∏∏ −
= +=
++
=
−+ ++++=
1
1
][][11
11
1
)1()1(C
u
vl
u
li
jsuijsl
u
vi
ijsv ababS  
, 
where uv ≤≤ 11  is the index which actually yields 
the maximum value. Similarly, there is an index 
uv ≤≤ 21  in 2S  which actually yields the 
maximum value. That is, 
[ ]( )2C Sjsu +  
[ ]( ) ∑ ∏∏ −
= +=
++
=
−+ ++++=
1
1
][][21
22
2
)1()1(C
u
vl
u
li
jsuijsl
u
vi
ijsv ababS  
.  
Thus, the difference of the completion times of jobs 
scheduled on position js +  in 1S  and 2S  on 
machine u is 
[ ]( )1C Sjsu + [ ]( )2C- Sjsu +  
[ ]( ) ∑ ∏∏ −
= +=
++
=
−+ ++++≤
1
1
][][11
11
1
)1()1(C
u
vl
u
li
jsuijsl
u
vi
ijsv ababS  
[ ]( ) ∑ ∏∏ −
= +=
++
=
−+ ++++
1
1
][][21
11
1
)1()1(C-
u
vl
u
li
jsuijsl
u
vi
ijsv ababS  
＜ [ ]( ) [ ]( ){ }∏
=
−+−+≤≤
+−
m
i
ijskjskmk
bSS
1
21111
)1(CCmax  
and equation (1) can be derived by an induction 
 10
improvement. Framinan et al. (2005) pointed out that 
some of the heuristics are of a different nature: on one 
hand, the heuristic by Liu and Reeves (2001) consists 
of a first phase where the jobs are sorted according to 
an index, taking into account the idle time followed by 
a local improvement phase. On the other hand, the set 
of the heuristics by Allahverdi and Aldowaisan (2002) 
contains the heuristics by Woo and Yim (1998) and 
by Rajendran and Ziegler (1997). Thus, they classified 
the heuristics into simple and composite heuristics. In 
this paper, we followed their classification and 
conducted a comparison study between the simple 
heuristics, which include Nawaz et al. (1983), 
Rajendran and Ziegler (1997), Woo and Yim (1998), 
Liu and Reeves (2001), Framinan and Leisten (2003), 
and Framinan et al.(2003). Nawaz et al. (1983) 
proposed a heuristic for the makespan problem. Later, 
they modified the procedure for the flow time 
criterion. The complexity of NEH heuristic is 
3( )O n m . Rajendran and Ziegler (1997) proposed an 
efficient heuristic. It first generates several job 
sequences by putting different weights on the 
processing times. It then chooses the sequence with 
minimum mean flow time as the seed sequence, and 
applies an improvement scheme to it. The complexity 
of RZ heuristic is 3( )O n m .  
Instead of fixing the job insertion order in advance, 
Woo and Yim (1998) proposed a heuristic that selects 
a job to be inserted into the current partial sequence 
among jobs that are not included. Whenever a new 
partial schedule is constructed, the algorithm evaluates 
all the possible sequences by inserting the job into slot 
one at a time. The partial sequence with the least mean 
flow time was selected. The complexity of WY 
heuristic is 4( )O n m . Liu and Reeves (2001) 
designed an index function to determine the job order 
based on two characteristics. One is that the function 
should consider not only how well the job to be 
appended fits the last job in the current partial 
sequence, but also the effect of choosing that job on 
other remaining jobs. The other is that the idle time on 
earlier stage machines might cause more delays in the 
completion of the jobs in the remaining jobs than it 
did on later stage machines. When considering the 
total idle time of all the machines, the index function 
should be given different weights to the idle time of 
different machines. Framinan and Leisten (2003) 
proposed an efficient constructive heuristic algorithm 
based on the idea of Nawaz et al. (1983). They further 
performed a general pairwise interchange movement 
to improve the quality of the partial schedules in each 
iteration. The complexity of FL heuristic is 
4( )O n m . 
 
6. Computational experiment 
A computational experiment is conducted to evaluate 
the performance of the branch-and-bound and the 
heuristic algorithms. The programs are coded in 
Fortran 90 and run on a Pentium 4 personal computer. 
The job processing times on M1 , M2 , …, Mm are 
generated from a uniform distribution over the 
integers 1 to 100. Although this distribution is not 
likely to be found in practice, Framinan et al. (2003, 
2005) claimed that it produces difficult type of 
problem instances, and therefore constitutes an 
excellent benchmark for the comparison of heuristics. 
In order to study the impact of the deterioration rate, 
several deterioration patterns, which include an 
increasing one, a decreasing one, a constant one, a 
V-shaped one, and a Λ -shaped one, are investigated. 
The trends of patterns are depicted in Figure 1 and the 
actual values are given in Table 1. 
The computational experiment consists of three 
parts. In order to evaluate the efficiency of the lower 
bounds, we perform the branch-and-bound algorithms 
using only one lower bound each time in the first part 
of the experiment. The number of machines is fixed at 
5 and two job sizes (n= 8, 10) are tested. The results 
are summarized in Table 2, where a “Ο ” means the 
lower bound is included and a “Χ ” means it is not. 
For instance, ),,,,( ΧΧΧΧΟ  represents only the 
first lower bound in equation (4), 1LB , is included. 
The average and maximum number of nodes and the 
average and maximum CPU time (in seconds) are 
presented for the branch-and-bound algorithms. As a 
consequence, there are 60 experimental conditions 
examined, and 100 replications are randomly 
generated for each condition. A total of 6,000 
instances are generated in the first part of the 
experiment. For the branch-and-bound algorithm with 
only one lower bound, it is found that the lower bound 
based on the completion time of a later machine is 
more effective than that based on the completion time 
of an earlier machine when the trend of deterioration 
rate is an increasing function or a constant one. The 
second lower bound seems to be the best one when 
the trend of deterioration rate is a decreasing function. 
However, the number of nodes is at least 6 times of 
the one with five lower bounds included when n=8, 
and 18 times when n=10. The number of nodes is 
V-shaped when the trend of deterioration rate is 
Λ -shaped, while the lower bound based on the 
completion time of the last machine is the best when 
the trend of deterioration rate is V-shaped. Finally, the 
branch-and-bound algorithm with five lower bounds 
included is still the most efficient one in term of the 
number of nodes and the execution time. Thus, the 
branch-and-bound algorithm with all the lower 
bounds included is recommended and used in later 
analysis. 
In the second part of the experiment, the 
branch-and-bound and five heuristic algorithms are 
conducted with five different job sizes (n= 10, 12, 14, 
16, and 18) associated with two number of machines 
(m= 5 and 10). These tests are designed to study the 
effects of the dominance rule and the lower bounds, 
and the accuracy of the heuristic algorithms. The 
average and maximum number of nodes and the 
average and maximum CPU time (in seconds) are 
reported for the branch-and-bound algorithms. For the 
 12
1237-1254. 
Garey, M.R., Johnson, D.S. and Sethi, R.R., The 
complexity of flowshop and job shop 
scheduling. Mathematical Operations Research, 
1976, 1, 117-129. 
Gonzalez, T. and Sahni, S., Flowshop and job-shop 
schedules: Complexity and approximation. 
Operations Research, 1978, 26, 36-52. 
Gupta, J.N.D. and Gupta, S.K., Single facility 
scheduling with nonlinear processing times. 
Computers and Industrial Engineering, 1988, 
14, 387-393. 
Ignall, E. and Schrage L.E., Application of the 
branch-and-bound technique to some flowshop 
scheduling problems. Operations Research, 
1965, 13, 400-412. 
Johnson, S.M., Optimal two and three-stage 
production schedules with setup times included. 
Naval Research Logistic Quarterly, 1954, 1, 
61-68. 
King, J.R. and Spachis, A.S., Heuristics for flowshop 
scheduling. International Journal of Production 
Research, 1980, 18, 345-357. 
Kunnathur, A.S. and Gupta, S.K., Minimizing the 
makespan with late start penalties added to 
processing times in a single facility scheduling 
problem. European Journal of Operational 
Research, 1990, 47(1), 56-64. 
Lenstra, J.K., Rinnooy Kan, A.H.G. and Brucker, P., 
Complexity of machine scheduling problems. 
Annals of Discrete Mathematics, 1977, 1, 
343-362. 
Liu, J.Y. and Reeves, C.R., Constructive and 
composite heuristic solutions to the 
// iP C∑  scheduling problem. European 
Journal of Operational Research, 2001, 132, 
439-452. 
Mosheiov, G., Complexity analysis of job-shop 
scheduling with deteriorating jobs. Discrete 
Applied Mathematics, 2002, 117(1-3), 195-209. 
McMahon, G.B. and Burton, P.G., Flowshop 
scheduling with the branch and bound method. 
Operations Research, 1967, 15, 473-481. 
Nawaz, M., Enscore, E.E. and Ham, I., A heuristic 
algorithm for the m-machine, n-job flow-shop 
sequencing problem. OMEGA: The 
International Journal of Management Science, 
1983, 11, 91-95. 
Pinedo, M., Scheduling: Theory, Algorithms and 
Systems, 2nd ed., 2002 (Prentice-Hall:NJ). 
Panwalker, S.S. and Khan, A.W., An ordered 
flowshop sequencing problem with mean 
completion time criterion. International Journal 
of Production Research, 1976, 14, 631-635. 
Reisman, A., Kumar, A. and Motwani, J., Flowshop 
scheduling/sequencing research: a statistical 
review of the literature, 1952-1994. IEEE 
Transactions on Engineering Management, 
1997, 44(3), 316-329. 
Rajendran, C. and Ziegler, H., An efficient heuristic 
for scheduling in a flowshop to minimize total 
weighted flowtime of jobs. European Journal of 
Operational Research, 1997, 103, 129-138. 
Sahni, S. and Cho, Y., Complexity of scheduling 
shops with no-wait in process. Mathematical 
Operations Research, 1979, 4, 448-457. 
Stern, H.I. and Vitner, G., Scheduling parts in a 
combined production-transportation work cell. 
Journal of the Operational Research society, 
1990, 41, 625-632. 
Wang, J.B. and Xia, Z.Q., Flow shop scheduling with 
deteriorating jobs under dominating machines. 
OMEGA-The international Journal of 
Management Science, 2006, 34, 327-336. 
Wang, J.B., Ng, C.T.D., Cheng, T.C.E. and Liu, L.L., 
Minimizing total completion time in a 
two-machine flow shop with deteriorating jobs. 
Applied Mathematics and Computation, 2006, 
180, 185-193. 
Woo, D.S. and Yim, H.S., A heuristic algorithm for 
mean flowtime objective in scheduling. 
Computers and Operations Research, 1998, 25, 
175-182. 
Zuo, Y., Gu, H. and Xi, Y., Study on constraint 
scheduling algorithm for job shop problems 
with multiple constraint machines. International 
Journal of Production Research, 2007, doi: 
10.1080/00207540701324143. 
 
 
 
 
 
 
 
 
 
 
 
 14
Pattern m=5 
1 2 3 4 5(     b ,    b ,     b ,    b ,    b )
m=10 
1 2 3 4 5 6 7 8 9 10(   b ,    b ,    b ,    b ,   b ,   b ,   b ,    b ,   b ,   b )  
Increasing(1) 
Decreasing(2) 
Constant(3) 
V-Shaped(4) 
Λ -Shaped(5) 
  (0.02, 0.04, 0.06, 0.08, 0.10) 
 (0.10, 0.08, 0.06, 0.04, 0.02) 
 (0.06, 0.06, 0.06, 0.06, 0.06) 
 (0.10, 0.06, 0.02, 0.06, 0.10) 
 (0.02, 0.06, 0.10, 0.06, 0.02) 
  (0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.10)
  (0.10, 0.09, 0.08, 0.07, 0.06, 0.05, 0.04, 0.03, 0.02, 0.01)
  (0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05)
  (0.10, 0.08, 0.06, 0.04, 0.02, 0.02, 0.04, 0.06, 0.08, 0.10)
  (0.02, 0.04, 0.06, 0.08, 0.10, 0.10, 0.08, 0.06, 0.04, 0.02)
 
Table 1. Values of the deterioration rates for m=5 and m=10. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 16
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  X X X X O 323.33 3891 0.01 0.08 
  O O O O O 113.13 618 0.01 0.04 
 2 O X X X X 32439.10 579916 0.49 7.77 
  X O X X X 8208.36 134837 0.15 2.09 
  X X O X X 8612.68 78675 0.15 1.12 
  X X X O X 12816.74 84102 0.21 1.32 
  X X X X O 19983.86 85077 0.31 1.16 
  O O O O O 357.95 1876 0.02 0.09 
 3 O X X X X 53701.98 437396 1.00 7.68 
  X O X X X 14437.03 196705 0.25 2.87 
  X X O X X 6548.72 77791 0.12 1.17 
  X X X O X 3639.07 38273 0.07 0.65 
  X X X X O 2685.25 15127 0.05 0.26 
  O O O O O 270.92 1037 0.02 0.06 
 4 O X X X X 42773.66 536344 0.65 6.45 
  X O X X X 29892.95 368488 0.48 4.67 
  X X O X X 42851.54 308757 0.70 4.23 
  X X X O X 11180.90 95179 0.18 1.46 
  X X X X O 578.06 8795 0.01 0.12 
  O O O O O 160.76 698 0.01 0.04 
 5 O X X X X 14664.81 592703 1.89 11.40 
  X O X X X 25864.30 463711 0.49 6.34 
  X X O X X 826.24 26779 0.01 0.36 
  X X X O X 4477.96 20339 0.08 0.37 
  X X X X O 15816.58 76047 0.26 1.19 
    O O O O O 185.50 1063 0.01 0.06 
 18
 
 
 
Table 3. Performance of the branch-and-bound and heuristic algorithms
    NEH RZ WY LR FL 
   Number of nodes CPU time Error percentages
n m pattern mean max mean max mean max mean max mean max mean max mean max 
10 5 1 113.13 618 0.0064 0.0313 2.3059 8.5207 4.1457 10.5844 1.9664 8.2725 2.8573 14.7509 0.9129 5.6042 
  2 357.95 1876 0.0147 0.0781 2.0151 6.8731 3.0034 11.4569 1.6242 6.8731 2.7253 10.6078 0.9274 5.0475 
  3 270.92 1037 0.0098 0.0313 2.2738 7.2164 3.3265 10.4098 1.9265 6.2861 2.2628 9.9996 0.9373 3.9629 
  4 160.76 698 0.0073 0.0313 2.2023 6.4790 3.6138 11.7189 1.6214 6.5775 3.3586 10.9815 0.9472 5.5239 
  5 185.50 1063 0.0080 0.0469 2.6399 12.1854 3.5913 11.5145 2.0880 7.2407 2.4321 11.6342 1.1379 7.2067 
 10 1 90.14 357 0.0095 0.0313 1.8454 8.3305 3.4125 11.3490 1.5094 7.9307 3.2922 22.4555 0.7141 5.1429 
  2 604.79 2208 0.0533 0.2031 1.8831 7.4601 3.0483 12.6055 1.5791 6.3585 4.0530 15.2421 1.0594 4.5744 
  3 584.62 3595 0.0502 0.2656 1.9541 9.1961 2.7242 9.1648 1.6226 5.3050 2.2777 8.2508 1.0410 7.3181 
  4 187.63 1502 0.0161 0.1094 2.1057 9.1393 3.0423 10.2416 1.8025 8.3059 3.9453 15.2682 0.9783 4.4507 
  5 188.80 969 0.0187 0.0938 1.9942 7.5155 3.1270 8.5525 1.7719 7.6165 3.2186 12.2333 0.9546 4.8894 
12 5 1 316.03 2199 0.0216 0.1250 2.9201 9.1024 6.1860 16.4221 2.3892 9.0028 4.2260 14.1876 1.1977 5.3232 
  2 2362.39 25534 0.1409 1.2656 2.8526 9.4887 3.9398 10.3490 2.5180 9.4887 3.9914 14.4629 1.0607 4.6869 
  3 1792.88 10667 0.1031 0.5312 3.2189 8.9770 4.5508 12.0946 2.6251 7.6712 3.1257 10.8426 1.5776 5.3504 
  4 786.92 4624 0.0452 0.2656 3.1185 10.2047 5.1349 13.2315 2.6665 8.4323 4.9973 13.7170 1.5610 6.0710 
  5 672.18 5505 0.0420 0.2812 3.0801 10.9950 5.1902 15.6881 2.2794 8.7245 3.3012 19.6187 1.2445 5.0506 
 10 1 211.79 1198 0.0327 0.1250 2.3144 8.7662 4.5838 12.4054 1.8954 8.2888 4.3644 13.7934 0.9267 5.6293 
  2 4953.44 44755 0.6092 5.1094 2.6995 6.7175 4.3779 14.3453 2.3636 7.2867 6.0876 16.7321 1.4165 4.1767 
  3 2785.13 9689 0.3575 1.2188 2.7734 7.1367 3.8502 9.4672 2.0053 7.1053 3.6997 12.4293 1.2047 4.1334 
  4 402.04 5159 0.0503 0.5000 2.5775 10.9697 3.9842 11.0145 2.1931 6.8272 5.4273 14.5169 1.1149 4.1545 
  5 654.40 2513 0.0933 0.4062 2.4240 7.1126 4.6645 9.5406 1.9680 7.6137 4.9908 15.4025 1.1695 4.8356 
 20
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
18 5 1 5287.14 114677 0.8881 17.4219 3.7606 10.2712 10.9167 22.7678 2.7033 7.5545 6.5147 18.7305 1.5819 5.7795 
  2 3141047.75 41874876 448.4417 5960.0469 4.2132 12.0522 5.2226 14.7967 3.6080 11.1647 4.8533 10.4768 1.3771 5.3605 
  3 280083.03 3125597 41.0820 441.2188 4.3062 10.7427 7.0237 14.3965 3.3651 9.6526 3.0339 9.4195 2.1465 6.5799 
  4 44220.52 1975238 5.6878 233.2656 4.0710 9.6579 9.1696 20.0254 3.6716 10.4051 9.5714 19.9085 1.7583 5.6079 
  5 40547.70 572171 6.6464 97.5469 4.0335 9.8097 8.5898 19.9702 3.3705 8.9715 3.4259 13.5766 1.5502 5.0812 
 10 1 1630.96 15830 0.6438 4.9844 2.7507 8.2033 8.8737 16.7043 2.1158 7.2174 8.1356 18.6659 1.1685 5.6953 
  2 2879756.75 31993324 933.3419 8914.7656 4.0601 12.2209 7.5411 20.3318 3.4568 8.0868 10.0305 29.6187 1.6866 6.6877 
  3 1212955.50 15217979 389.5289 4391.5000 4.2309 10.6980 6.9876 14.4222 3.2841 10.7032 5.1252 15.4428 2.3249 6.5079 
  4 16310.17 492946 4.8008 137.0469 3.4047 8.9100 8.3189 15.1771 3.0188 9.7895 10.6556 25.1640 1.7990 7.5961 
  5 19771.43 176792 7.5895 67.1562 3.5872 9.2948 8.7200 20.2188 3.1472 7.8846 6.5339 22.4897 1.8698 5.3304 
 22
150 5 1 0.0423 0.1368 0.7327 1.0585 0.0228 0.0901 0.0888 0.5273 0.0032 0.0371 
 2 0.4253 0.9823 1.4016 2.6964 1.3936 2.3764 1.6446 2.7182 0.0000 0.0000 
 3 0.0321 0.0711 0.2624 0.4342 0.0299 0.0685 0.0164 0.1756 0.0027 0.0222 
 4 0.0568 0.1454 0.5923 0.8943 0.0293 0.1008 0.4242 0.8839 0.0023 0.0413 
 5 0.1239 0.2831 0.7009 0.9926 0.1341 0.3189 0.2179 0.4699 0.0000 0.0000 
 10 1 0.0336 0.1165 0.4546 0.6503 0.0208 0.1235 0.2152 0.3749 0.0025 0.0330 
 2 0.2888 0.5698 1.3756 2.2426 1.1287 1.5230 1.7152 2.3673 0.0000 0.0000 
 3 0.0318 0.0841 0.1954 0.3204 0.0253 0.0705 0.0203 0.0843 0.0035 0.0383 
 4 0.0370 0.1348 0.4306 0.5973 0.0310 0.1203 0.5070 0.6864 0.0044 0.0486 
 5 0.0653 0.1488 0.3887 0.6301 0.0551 0.1558 0.1491 0.2647 0.0002 0.0154 
200 5 1 0.0452 0.1362 0.8188 0.1751 0.0217 0.1274 0.0941 0.2664 0.0043 0.0698 
 2 0.4240 1.0188 1.8267 4.4622 1.7873 3.3460 2.1733 3.9638 0.0000 0.0000 
 3 0.0317 0.1101 0.3133 0.5243 0.0316 0.0820 0.0205 0.0716 0.0011 0.0189 
 4 0.0575 0.1358 0.6661 1.0104 0.0389 0.1299 0.4949 0.8792 0.0014 0.0360 
 5 0.1520 0.3410 0.7726 1.2360 0.1775 0.3577 0.2758 0.5985 0.0000 0.0000 
 10 1 0.0355 0.0999 0.4912 0.6288 0.0157 0.0658 0.2170 0.4884 0.0036 0.0608 
 2 0.3576 0.6123 2.1537 3.1436 1.7167 2.4531 2.6372 3.6484 0.0000 0.0000 
 3 0.0304 0.0904 0.2121 0.3372 0.0211 0.0562 0.0212 0.0906 0.0044 0.0371 
 4 0.0382 0.1167 0.4694 0.6495 0.0290 0.1262 0.5568 0.8794 0.0044 0.0649 
 5 0.0758 0.1541 0.4161 0.6363 0.0654 0.1708 0.1598 0.2871 0.0001 0.0075 
 
 
 
