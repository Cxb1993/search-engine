 （一） 計劃中文摘要 
 
關鍵詞：邏輯層次的最佳化，實體層次的最佳化，查詢最佳化，生物關聯式代數運算最佳化，生物關
聯式資料庫最佳化，生物計算。 
 
Codd 提出第一篇文章討論一種關聯式資料庫模式，Adleman 使用生物指令來解決漢米爾頓路徑
問題(著名的組合最佳化問題)，從[2]，在生物的資訊儲存密度是每一個奈米三次方儲存一個位元，
一個磁帶的資訊儲存密度是每 1012 奈米三次方儲存一個位元。這個計畫證明生物指令可以被用來建
構生物關聯式資料庫，在關聯式表格中每一個資料記錄皆可被生物指令加以編碼，為了達到這個目
的，生物指令演算法被提出來完成關聯式資料庫的八個運算，這八個運算包含＂Cartesian product
＂ ， “union＂ ， “set difference＂ ，“selection＂ ， “projection＂ ， “intersection
＂ ， ＂ join＂ 和“division＂。更進一步的說，這個計畫利用生物指令完成(1) 邏輯層次的最佳
化，(2) 實體層次的最佳化，(3) 查詢最佳化， (4) 生物關聯式代數運算最佳化， (5) 生物關聯式
資料庫最佳化，及證明生物計算有能力完成資料存取指令在生物關聯式資料庫上面。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                                            I 
報告內容 
1.   Introduction 
 
In 1970, Codd [1] wrote the first paper regarding a relational database. Adleman [2] succeeded in 
solving an instance of the Hamiltonian path problem in a test tube by handling DNA strands in 1994. Since 
then, many DNA-based algorithms have been offered to solve NP-complete or NP-hard problems such as 
the set-splitting problem [3].  
 
The paper is organized as follows. Section 2 introduces DNA manipulations. Section 3 introduces 
DNA-based algorithms to perform relational operations, which include Cartesian product, union, set 
difference, selection, projection, intersection, join and division. Finally, conclusions are made in Section 4. 
 
2.   Introduction of Background 
 
DNA (deoxyribonucleic acid) is the molecule that plays the main role in DNA- based computing [2]. 
Nucleotides are the structural units of DNA. In the most common nucleotides the base is a derivative of 
purine or pyrimidine, and five-carbon sugar. Purines include adenine and guanine, abbreviated A and G. 
Pyrimidines contain cytosine and thymine, abbreviated C and T. In this section several available DNA 
techniques are used to perform relational operations on bio-molecular relational databases. 
 
2.1.   DNA Manipulations 
 
A (test) tube is a set of molecules of DNA (a multi-set of finite strings over the alphabet {A, C, G, T}) 
that can perform the following operations: 
 
1. Extract. Given a tube P and a short single strand of DNA, S, the operation produces two tubes +(P, S) 
and −(P, S), where +(P, S) is all of the molecules of DNA in P which contain S as a sub-strand and −(P, 
S) is all of the molecules of DNA in P which do not contain S.. 
2. Merge. Given tubes P1 and P2, yield ∪(P1, P2), where ∪(P1, P2) = P1 ∪ P2. This operation is to pour two 
tubes into one, without any change in the individual strands. 
3. Detect. Given a tube P, if P includes at least one DNA molecule we have ‘yes’, and if P contains no 
DNA molecule we have ‘no’. 
4. Discard. Given a tube P, the operation will discard P. 
5. Amplify. Given a tube P, the operation, Amplify(P, P1, P2), will produce two new identical copies, P1and 
P2,of tube P, and then P becomes empty. 
6. Append. Given a tube P containing a short strand of DNA, Z, the operation will append Z onto the end of 
every strand in P. 
7. Append-head. Given a tube P containing a short strand of DNA, Z, the operation will append Z onto the 
head of every strand in P. 
8. Read. Given a tube P, the operation is used to describe a single molecule, which is contained in tube P. 
Even if P contains many different molecules each encoding a different set of bases, the operation can 
give an explicit description of exactly one of them. 
 
1 
(2) For i = 1 to p 
(3) For k = 1 to n 
(4) For j = 1 to Lk 
(4a) T22 = +(T22, vi, k, j) and T22OFF = −(T22, vi, k, j).  
(4b) T22ON = ∪(T22ON, T22OFF). 
EndFor 
EndFor                                
T4 = ∪(T4, T22); T22 = ∪(T22, T22ON). 
EndFor                                   
(5) Discard(T22).                            
EndProcedure 
 
Procedure Difference(T1, T2, T5, q) 
(1) Amplify(T1, T11, T12); Amplify(T2, T21, T22). 
(2) T1 = ∪(T1, T11); T2 = ∪(T2, T21). 
(3) For i = 1 to q 
(4) For k = 1 to n 
(5) For j = 1 to Lk 
(5a) T12 = +(T12, vi, k, j) and T12OFF = −(T12, vi, k, j).  
(5b) T12ON = ∪(T12ON, T12OFF). 
(5c) T22 = +(T22, vi, k, j) and T22OFF = −(T22, vi, k, j).  
(5d) T22ON = ∪(T22ON, T22OFF). 
EndFor 
EndFor 
(3a) If (Detect(T22) = ‘yes’) then Discard(T12) EndIf 
(3c) T12 = ∪(T12, T12ON). 
(3d) T22 = ∪(T22, T22ON). 
EndFor 
(6) T5 = ∪(T5, T12). 
EndProcedure 
 
3.3.   Projection Operator on Bio-molecular Databases 
 
Algorithm JudgeDintinctElement takes amplify, merge, extract and detection to eliminate duplications 
of projection operator on any n-ary relation. 
 
Procedure JudgeDintinctElement(T6, T9, T6>, T6=, T6<). 
(1) Amplify(T6, T6ON, T6OFF); T6 = ∪(T6, T6ON). 
(2) For d = 1 to c 
(3) For j = 1 to Lk 
 
3 
EndProcedure 
3.4.   Selection Operator on Bio-molecular Databases 
 
Algorithm Selection takes amplify, merge, extract, append and detection operations performing 
selection operator on any n-ary relation. 
 
Procedure Selection(T0, T16>, T16=, T16<, T16≠, T16≥, T16≤, D, E) 
(1) Amplify(T0, T13, T14); T0 = ∪(T0, T13). 
(2) For j = 1 to Lk ; Append(T15, ej); EndFor 
(3) For j = 1 to Lk 
(3a) T15ON = +(T15, ej1) and T15OFF = −(T15, ej1). 
(3b) T14ON = +(T14, vi, k, j1) and T14OFF = −(T14, vi, k, j1). 
(3c) If (Detect(T15ON = ‘yes’) then         
T9= = ∪(T9=, T14ON); T9< = ∪(T9<, T14OFF); T15 = ∪(T15, T15ON). 
Else                             
T9> = ∪(T9>, T14ON); T9= = ∪(T9=, T14OFF); T15 = ∪(T15, T15OFF). 
EndIf 
(3d) T14 = ∪(T14, T9=). 
EndFor 
(4) T9= = ∪(T9=, T14). 
(5) Amplify(T9>, T16>, T17>); Amplify(T9=, T16=, T17=); Amplify(T9<, T16<, T17<). 
(6) Amplify(T17>, T18>, T19>); Amplify(T17=, T18=, T19=); Amplify(T17<, T18<, T19<). 
(7) T16>= = ∪(T18>, T18=); T16<= = ∪(T18<, T19=); T16≠ = ∪(T19>, T19<). 
EndProcedure 
 
3.5.   Theta-Join Operator on Bio-molecular Databases 
 
Algorithm CartesianProductTwoRelations takes extract, merge and append operations on any two n-ary 
relations, R1 and R2, to perform R1 × R2 through tubes T51 and T52. The theta-join operator on R1 and R2 is 
performed through the Cartesian product and the selection operator. 
 
Procedure CartesianProductTwoRelations(T51, T52) 
(1) For i = 1 to q 
(2) For k = 1 to n 
(3) For j = 1 to Lk 
(3a) T52ON = +(T52, vi, k, j1) and T52OFF = −(T52, vi, k, j1). 
(3b) If (Detect(T52ON = ‘yes’) then  Append(T51, vi, k, j1) EndIf 
(3c) If (Detect(T52OFF = ‘yes’) then Append(T51, vi, k, j0) EndIf 
(3d) T52 = ∪(T52ON, T52OFF). 
EndFor 
EndFor 
5 
