  I 
目  錄 
第 1章 研究動機   ................................................................................ 1
1.1 動機   ............................................................................................................................................................. 1
1.2 問題描述   ..................................................................................................................................................... 1
1.3 研究目標   ..................................................................................................................................................... 2
第 2章 研究背景   ................................................................................ 4
2.1 VHDL IP STACK   ......................................................................................................................................... 4
2.2 ADESCOM INC. IPAC-E100   ........................................................................................................................... 5
2.3 TCP/IP協定簡化   .......................................................................................................................................... 6
2.3.1 連線重置   ............................................................................................................................................. 7
2.4 AMBA   .......................................................................................................................................................... 9
2.5 TCP/IP OFFLOAD ENGINE（TOE）技術發展   ............................................................................................. 11
2.6 TCP/IP OFFLOAD ENGINE FOR AN SOC SYSTEM   ......................................................................................... 13
第 3章 UTCP設計方法   ................................................................... 15
3.1 UTCP軟硬體協同設計  ............................................................................................................................... 15
3.2 UTCP硬體架構   .......................................................................................................................................... 16
3.3 PICOBLAZE   ................................................................................................................................................. 17
3.4 OUT MODULE   .............................................................................................................................................. 19
3.4.1 Checksum Generator   .......................................................................................................................... 20
3.4.2 TCP Data Buffer   ................................................................................................................................. 20
3.4.3 Packet Generator FSM   ....................................................................................................................... 21
3.5 IN MODULE   .................................................................................................................................................. 24
3.5.1 Header FSM   ....................................................................................................................................... 25
3.5.2 Checksum FSM   ................................................................................................................................... 26
3.5.3 TCB Writer FSM   ................................................................................................................................. 27
3.6 TCB REGISTERS AND CONTROL REGISTERS   ................................................................................................. 29
3.7 UTCP記憶體   .............................................................................................................................................. 30
3.8 DMA   ........................................................................................................................................................... 32
3.9 UTCP韌體架構   .......................................................................................................................................... 33
第 4章 實驗環境與結果   .................................................................. 34
4.1 實驗步驟   ................................................................................................................................................... 34
  III 
圖 目 錄 
圖 1-1 UTCP之應用   ............................................................................................................................................... 3
圖 2-1 VHDL IP STACK 硬體架構   ......................................................................................................................... 4
圖 2-2 EMBEDDED TCP/IP STACK AND IPAC-E100  ................................................................................................. 5
圖 2-3 IPAC-E100之效能與資源利用表   .............................................................................................................. 6
圖 2-4 TCP/IP簡化後狀態   ..................................................................................................................................... 7
圖 2-5拒絕一條連線示意圖   ................................................................................................................................. 8
圖 2-6放棄一條連線示意圖   ................................................................................................................................. 8
圖 2-7 AHB ARCHITECTURE   .................................................................................................................................. 10
圖 2-8 APB FINITE STATE GRAPH   ............................................................................................................................ 11
圖 2-9 TCP/IP OFFLOAD ENGINE   ........................................................................................................................... 12
圖 2-10 TOE FOR A SOC SYSTEM APPLICATION   .................................................................................................... 13
圖 2-11 TOE FOR A SOC SYSTEM HARDWARE ARCHITECTURE   .............................................................................. 13
圖 3-1 UTCP方塊圖   ............................................................................................................................................. 15
圖 3-2 UTCP架構圖   ............................................................................................................................................. 16
圖 3-3 PICOBLAZE ARCHITECTURE  ........................................................................................................................ 18
圖 3-4 PICOBLAZE 合成資源利用表   ................................................................................................................... 18
圖 3-5 OUT MODULE ARCHITECTURE   ..................................................................................................................... 19
圖 3-6 OUT MODULE – CHECKSUM STEP1   ............................................................................................................. 20
圖 3-7 OUT MODULE – CHECKSUM STEP2   ............................................................................................................. 20
圖 3-8 TCP DATA BUFFER DATA PATH   .................................................................................................................... 21
圖 3-9 HEADER FSM DATA FLOW   .......................................................................................................................... 22
圖 3-10 DATA FSM DATA FLOW   ............................................................................................................................. 23
圖 3-11 OUT MODULE SEND FSM   .......................................................................................................................... 24
圖 3-12 IN MODULE ARCHITECTURE   ...................................................................................................................... 25
圖 3-13 HEADER FSM DATA FLOW   ........................................................................................................................ 25
圖 3-14 IN MODULE CHECKSUM MODULE   ............................................................................................................. 26
圖 3-15 CHECKSUM FSM DATA FLOW   ................................................................................................................... 26
圖 3-16 TCB WRITER FSM DATA FLOW   ................................................................................................................ 27
圖 3-17 IN MODULE RECEIVE FSM   ........................................................................................................................ 28
圖 3-18 UTCP MEMORY ARCHITECTURE   ............................................................................................................... 31
圖 3-19 SEQ 定址法   ............................................................................................................................................ 32
圖 3-20韌體架構之有限狀態機   ......................................................................................................................... 33
圖 4-1 CLOSED STATE   ........................................................................................................................................... 35
圖 4-2 SYN-SEND STATE   ..................................................................................................................................... 36
圖 4-3 ESTABLISHED STATE - 1   ......................................................................................................................... 36
圖 4-4 ESTABLISHED STATE - 2   ......................................................................................................................... 37
圖 4-5 UTCP WITH OC GMAC IN SPARTAN3E-1200  ............................................................................................. 38
  V 
表 目 錄 
表 3-1 TCB REGISTERS   ......................................................................................................................................... 29
表 3-2 CONTROL REGISTERS   .................................................................................................................................. 30
表 4-1 合成數據表   .............................................................................................................................................. 37
  2 
第二，利用硬體加速之 TCP/IP解決方案，設計一顆 TCP/IP協定硬體加速器，減緩系統
中 CPU bound的問題，此法雖然能有效提昇 TCP/IP網路傳輸速度，降低 CPU對於 I/O
發出多次中斷以減少 CPU 的負擔，卻造成此類型晶片無法支援新一代的網路協定，導
致設計彈性以及擴充能力不佳等問題。然而，採用何種設計方式，能有效解決上述各項
之缺點，並取其優點，以創造出更好高速 TCP/IP網路傳輸環境，將是設計一顆 TCP/IP
網路晶片之挑戰。影像感測網路需要佈署大量影像感測器，因此 TCP/IP 網路晶片之成
本將會是設計時考量的重點之一。針對此問題，如何有效的降低設計及製造成本，也將
是另一項必需克服的課題之一。 
為了達到高效能網路傳輸效率，又需降低成本，在設計本質上即存在著許多困難之
處，而融合上述各項問題之後。本研究利用軟硬體協同設計，取其上述之軟體設計及硬
體加速設計之優點，希望將設計之成果，能擁有軟體在 TCP/IP 協定上之設計彈性，並
配合硬體能同步搬移大量資料的特性，來達成低成本，高效率之網路傳送目的。雖然採
用軟硬體混合設計，看似具備許多優點，但會產生軟硬體協同設計以及協定正確性驗證
等問題，這是採用軟硬體協同設計過程中將產生的困難點之一。 
 
1.3 研究目標 
本研究提出適合應用於高解析影像感測網路之微型網路晶片之硬體架構，稱為
uTCP[1][2][4]，具備高速傳送封包之能力，無須作業系統支援即能於嵌入式系統之中獨
立執行 TCP/IP封包傳送能力，採軟硬體混合設計方式，設計一顆微型且高效能之 TCP/IP
網路晶片，使高解析影像感測器能將大量影像資料在經過影像壓縮之後，透過網路晶片
將資料封裝成 TCP/IP封包格式後，高速地將封包送至網際網路。如圖 1-1。 
在硬件設計方面，為了讓微型網路晶片能廣泛應用於多種晶片設計之中，因此硬體
架構設計為適合應用於 FPGA 及 ASIC 上之矽智財（Silicon Intellectual Property 簡稱
SIP）。 
  4 
第2章 研究背景 
2.1 VHDL IP STACK 
由澳洲昆士蘭大學的 VHDL XSV Board Interface Projects[5]中，設計一顆 VHDL IP 
Stack（簡稱 IP Stack），如圖 2-1，其具備 IP及 ARP兩種傳輸協定，並擁有 10Mb全雙
工傳送之能力。雖然 IP Stack是針對該研究計畫中所設計之除錯介面，但在整體設計中，
IP Stack提出由 802.3層至 TCP層所需之硬體雛型，相當具有參考價值。雖然該研究中，
尚未提供完整 TCP/IP硬體解決方案，但可經由參考其原始碼以及協定堆疊之硬體架構
之中，一窺 IP Stack在封包流程與協定堆疊設計方面之硬體架構，作為 uTCP初始架構
之想法。 
 
圖 2-1 VHDL IP Stack 硬體架構 
 
由於原設計者目的是將 VHDL IP Stack做為提供 XSV Board網路介面之矽智財，並
讓 XSV Board具有簡易的網路除錯功能介面。以下分別說明封包 Send及 Receive兩種
模型，在 Send時遵從 OSI七層架構而定，圖例中是將 ICMP封包交給 IP層送交給 ARP 
Send模組，ARP Send模組能選擇傳送 Ethernet封包或是 ARP封包，是否需要傳送 ARP
封包直接經由 ARP模組決定，IP層並不知道是否傳送 ARP類型之封包，經由 ARP Send
完成選擇後，最後由 MAC 送出。同樣的，Receive 也是遵從 OSI 七層架構，接收封包
  6 
為了達到高效率低成本之微型 TCP/IP 網路晶片矽智財，針對圖 2-3 所完成之
IPAC-E100硬體使用率以及網路傳輸效率，將是我們邁進的目標。 
 
圖 2-3 IPAC-E100之效能與資源利用表 
 
2.3 TCP/IP協定簡化 
本研究將 uTCP設定為一高速傳送大量影像資料之網路晶片，相對的，在為了提昇
速度的前提下，針對有高速傳輸需求之應用而言，將強化 uTCP單向傳輸能力，例如，
高速將資料送至影像資料伺服器。如此一來，勢必在協定上做出取捨，以其他方法代替
協定原有功能，例如，取消 FIN-WAIT-1、FIN-WAIT-2、CLOSING、TIME-WAIT、
CLOSE-WAIT、LAST-ACK等狀態，以不影響正常 TCP/IP的傳送流程為前提。本研究
參照 TCP/IP之協定簡化方法[2][4]。採行如圖 2-4之簡化方式。 
  8 
 
圖 2-5拒絕一條連線示意圖 
 
放棄一條連線： 
程序可以放棄一條連線，以取代關閉連線的動作。這有可能發生在某個程序失敗了
（或許是陷入一個無窮迴圈中），或是不希望在佇列中的資料被傳送（因為有一些不一
致的資料）。TCP 本身也有可能放棄一條連線，這有可能發生在它接收到一個區段，但
是此區段是屬於先前連線的區段。在這些情況下，TCP 會傳送一個 RST 區段來放棄該
條連線。圖 2-6說明了用戶端程序發出一個放棄命令的情況。 
 
圖 2-6放棄一條連線示意圖 
  10 
●支援 splite傳送模式 
●支援多 master 
 
圖 2-7 AHB architecture 
 
APB 主要是用在連接低速的週邊裝置上面，例如 UART ，jtag 等。它的 bus 架構
不像 AHB 為多 master，在 APB 裡唯一的 master 就是 AHB/APB bridge，其 bridge為
AHB上的 slave之一，但他也扮演 APB中唯一的 master，由於只有一個 master，因此不
需要 arbiter 。APB 協定十分簡單，甚至不是管線操作，利用圖 2-8 來表示 APB 一次
的傳送狀態圖。以下為 APB 的特性： 
●每筆傳送需 2週時間完成 
●無回應訊號 
●無等待週數（no wait cycle） 
  12 
畫質影像傳輸功能之微型高速 TCP/IP協定堆疊模組的 Client端，並且不需作業系統支
援，即可獨立傳送 TCP/IP封包。並將 uTCP整合於晶片設計層級中，設計出一組矽智
財，使用者介面則提供一組 AHB介面，以利於整合進需要高速網路傳送需求之晶片之
中，提供 TCP/IP網路傳輸功能。 
Applications
Operating System
TCP
IP
MAC
PHY PHY
MAC
IP
TCP
TOE Adapter
Traditional NIC
Hardware
Software
 
圖 2-9 TCP/IP offload engine 
 
在 TOE的研究上，大致上可分為三種設計方式[17]。第一，直接將原有網路協定移
植至一特定處理器運行的方式，為三種方式設計思維裡最快速且最具彈性的設計方式，
但其缺點通常伴隨著效能不彰等問題。而相對於軟體的協定卸載，純硬體的協定加速
器，具有其效能與成本優勢，卻也是最不具設計彈性。而第三種方法則融合了上述方式
的優點並減少其缺點的影響，主要是將網路協定的封包處理由一個特定處理器控制協定
部份並配合一個硬體加速器稱負責處理資料流部分。這種設計的優點是具有較短的研發
時程與較高的彈性，而其主要的成本則來自於處理器本身的授權費。 
  14 
圖 2-11 為[8]所提出之硬體架構，將封包搬移設計一組硬體加速器並結合 Nios II 
CPU主管協定流程控制，將其整合於 Avalon Bus上，實做於 Altera所提供之 FPGA上，
協定規格上實現 8條 UDP線程，ARP及 ICMP，以供應用程式使用，硬體上共配置 160k 
bytes記憶空間。 
  16 
3.2 uTCP硬體架構 
uTCP 由三大硬件區塊所組成，如圖 3-2，分別為 PicoBlaze、In module 以及 Out 
module，各自處理 TCP/IP協定流程，以及收送封包等工作，而 Out module與 In module
內部各配置一組 1460 Bytes buffer，其功用將於下文加以介紹。此外，uTCP配置了一塊
資料記憶體以及兩組暫存器組，資料記憶體將存放使用者欲發送之封包，而兩組暫存器
組分別為 Control registers 以及 Transmission Control Block registers（TCB）。Control 
registers（使用者控制暫存器）主要扮演 uTCP 與 host 端之間的溝通橋樑，PicoBlaze、
Out module與 In module則是透過TCB registers來達到模組間溝通之目的，使得 PicoBlaze
於 TCP/IP控制流程之中能透過 TCB registers與 Out module及 In module兩模組間互相
傳遞資料以及控制訊號。 
 
圖 3-2 uTCP架構圖 
 
uTCP 未來將設計一組 AMBA[15] bus，提供 uTCP 於晶片層級整合之用，與 Host 
processor 或是其他 SIP 做為溝通用的介面，使得外部裝置可透過 AMBA bus 對 uTCP
的 Control registers進行參數命令等設定之後，備妥欲傳送資料，透過 uTCP傳送出 TCP
  18 
 
圖 3-3 PicoBlaze architecture 
 
圖 3-4 為 PicoBlaze 與 JTAG 介面整合後的資源利用率，顯示此 8 位元控制器，
PicoBlaze在資源利用方面佔據非常少的資源，由於 PicoBlaze硬體架構已針對 FPGA作
最佳化，在實際應用於 Spartan3 系列 XC3S200FT256 之 FPGA 實驗板測試後，僅佔用
151組 slice以及 167組 LUT共 7％硬體資源，效能可達到 88MHz，44MIPS的速度。 
 
圖 3-4 PicoBlaze 合成資源利用表 
  20 
3.4.1 Checksum Generator 
主要工作為計算 IP header checksum及 TCP data checksum，為了加速 Out module的
運算量，在設計時將 Checksum Generator的資料寬度增加為 32bits寬，其計算流程為兩
個主要步驟，第一步驟如圖 3-6，運算資料需以 32bits為一單位（如運算資料不足 32bits
則造成資料計算錯誤），共執行總資料量除以 32bits，例：總資料量為 1024bits，共需運
算 1024/32次的計算週數。 
 
圖 3-6 Out module – Checksum step1 
 
接著，最後一步則如圖 3-7 所示，將計算結果為 32bits 的資料，拆解成高 16位元
以及低 16位元，相加後取 1’s補數（相同於取 inverse），最後得出 Checksum結果。 
 
圖 3-7 Out module – Checksum step2 
 
 
 
3.4.2 TCP Data Buffer 
TCP Data Buffer主要存放準備傳送資料，為 Out module內部使用之 buffer，當 Out 
  22 
 
圖 3-9 Header FSM data flow 
 
Data FSM： 
如圖 3-10所示，第一步 PicoBlaze設定 TCB表內之 O_semaphore為執行傳送 TCP 
Data封包時，接著 Checksum Generator從 Control registers、TCB registers以及陸續計算
TCP Data Buffer內之 IP、TCP封包標頭資料以及傳送資料，第三步 Data FSM會等待
Checksum Generator將各 checksum計算完成之資料，將 TCP/IP封包標頭和 TCP data封
裝後交由MAC TX FIFO，最後送出。 
  24 
MAC將此一 TCP/IP封包送出。 
 
圖 3-11 Out module send FSM 
 
3.5 In module 
In module主管封包接收，為 uTCP硬體三大元件之一，如圖 3-12。In module專注
於監聽MAC端是否收進一包完整封包，當MAC完成封包接收動作時，In module會將
資料收進 In module Data buffer裡，並進行封包解析。In module將運作流程分為三塊子
區塊進行解析，分別為 Header FSM、Checksum FSM以及 TCB Writer FSM。 
  26 
3.5.2 Checksum FSM 
如圖 3-14，Checksum模組為 In module獨立模組，並非與 Out module共用一組，
此組Checksum模組僅有 16bit資料運算寬度，主要計算 TCP data checksum以及 IP header 
checksum，同樣地，如資料來源沒有對齊 16位元，將造成資料計算錯誤。 
 
圖 3-14 In module Checksum module 
 
計算同時，若資料發生 Checksum 錯誤則將此包封包丟棄，否則送出 true（代表正
確封包）的訊號，告知 In module為正確封包，如圖 3-15所示。 
 
圖 3-15 Checksum FSM data flow 
  28 
data checksum，如上述方法，結果正確之封包送出 true訊號，錯誤封包送出 false訊號，
以告知 TCB FSM。TCB FSM確認封包驗證之相關工作正確無誤後，將 slide window、
sequence number、acknowledgement number 等標頭資料以及資料長度依序寫入 TCB 
registers，最後將 In module Data buffer中資料區塊寫入資料記憶體中。在 In module驗
證封包 checksum的同時，同步計算該封包長度，並將結果填入 TCB registers裡，最後
將 TCB registers的 package arrive bit拉起，告知 PicoBlaze，並等待 PicoBlaze處理此包
封包。 
 
圖 3-17 In module receive FSM 
 
  30 
器，設置 uTCP以及MAC address、IP address以及 TCP port等，uTCP也藉由此暫存器
組告知 user存取之記憶體區段。如表 3-2。 
表 3-2 Control registers 
 
 
3.7 uTCP記憶體 
uTCP配置一組內部記憶體，為資料暫存空間，並透過 AMBA bus與使用者連結，
其中 In module與 Out module各具備一組專屬記憶體控制器及記憶體區段，此內部記憶
體做為傳送資料以及接收資料之暫存記憶體。 
雖然配置內部記憶體會增加一部分的硬體資源，卻能帶給我們巨大的利益，此法不
但降低與外部記憶體存取次數，減低 bus傳遞資及控制訊號所造成的損耗。並且，針對
AMBA[15]設計角度而言，能取消 AMBA Master控制器之角色（發起存取記憶體的控制
訊號），僅需實現 AMBA Slave控制器。因此，uTCP配置內部記憶體，簡化 AMBA記
憶體控制器，為實現速度與成本協調上所提出最佳的設計方法，如圖 3-18。 
  32 
sequence number取模數後，直接映射至記憶體位置，由硬體判斷TCB registers的 sequence 
number，將 sequence number轉址至實際記憶體位置，如圖 3-19所示。例如，記憶體大
小配置為 10K bytes，此時收到一筆 sequence number為 12的封包，那麼將 12 mod 10等
於 2，得到封包起頭位置為 2並從此處開始存放封包，最後，配合 TCB registers裡封包
長度欄位來得知此封包長度。同樣的，當重傳發生時，對方所要求之 acknowledgement 
number 經由轉址機制，能立即得知封包起頭位置，簡化重傳發生時，所帶給 PicoBlaze
之龐大計算量，以利整體效能往上提昇，相對的也降低程式設計之複雜度及程式空間。 
 
圖 3-19 SEQ 定址法 
 
3.8 DMA 
uTCP提供 DMA傳輸功能，以提昇 bus上的傳輸效率。當使用者欲對 uTCP內部記
憶體發起一次傳送或接收時，就可利用 DMA功能發起對連續性記憶體位置進行資料存
取，表示使用者可利用 DMA之功能進行一次傳送或接收超過 1460 bytes之資料，以下
  34 
第4章 實驗環境與結果 
4.1 實驗步驟 
本研究分為兩階段驗證階段，第一階段使用硬體描述語言設計出 In module 及 Out 
module並與 PicoBlaze整合成一個 uTCP驗證雛型架構，接著利用ModelSim結合Verilog 
PLI（Programming Language Interface）之軟硬體協同設計驗證環境，並在一台桌上型電
腦執行 TCP/IP echo server的程式，進行硬體及 TCP/IP協定之間相互驗證其正確性。第
二階段，採用 FPGA 驗證環境，將 PicoBlaze 與硬體描述語言設計出的 In module 以及
Out module整合至 VIRTEX-5 LX50T[16]實驗板上，實驗板具備 1G bits的 PHY介面，
最後將 JTAG整合至 PicoBlaze上，提供軟體下載介面於 PicoBlaze使其能透過 JTAG傳
輸線將設計完成的軟體載入 FPGA板上，欲下載之程式利用 JTAG介面，輕鬆的下載至
PicoBlaze之程式記憶體，以提供韌體更新介面。但目前僅提供第一階段之實驗結果。 
模擬環境中，將 uTCP 設定為 TCP/IP協定中之 Client 角色，TCP Server 則由一台
Linux 桌上型電腦負責，此桌上型電腦具備 1Gbits 的網路晶片，並執行由 C 利用 raw 
packet所撰寫之 TCP/IP echo server程式，進行封包傳送測試，並驗證其連線正確性。 
 
4.2 驗證工具 
 KPicoSim 0.6：IDE for Picoblaze debug. 
 ModelSim 6.0：Simulate hardware behavior and debug hardware architecture. 
 Verilog Programming Language Interface：配合 Modelsim與 TCP server進行協定
測試及驗證。 
 Xilinx ISE design tool：For hardware synthesis, route, place, map and analyze. 
 Wireshark：Internet sniffer tool. 
 
4.3 PicoBlaze模擬程式 
模擬程式方面，由 PicoBlaze以組合語言實現之，PicoBlaze以簡化後之 TCP/IP協
  36 
 
圖 4-2 SYN-SEND State 
 
 
圖 4-3 ESTABLISHED State - 1 
 
  38 
另外，合成結果中，如圖 4-5、圖 4-6、圖 4-7、圖 4-8 所示，分別提供 uTCP 本
身合成數據外，一併附上與 opencores （www.opencores.org）網站上所提供之一顆 GIGA 
Bits Media Access Control所合成之數據。合成結果中，整體速度受限於 PicoBlaze的執
行時脈，導致整體 uTCP 時脈無法向上提昇之原因。但在整體面積使用率上，uTCP 僅
佔用 FPGA小部份的面積，展示 uTCP具備體積小速度快等特性，進而達到低成本且高
速之 TCP晶片的目的。 
 
圖 4-5 uTCP with OC GMAC in Spartan3E-1200 
 
 
圖 4-6 uTCP without OC GMAC in Spartan3E-1200 
  40 
 
圖 4-8 uTCP with OC GMAC in Viretex5-LXT50 
 
4.5 實驗結果 
測試環境中，以時脈 100MHz為頻率單位。並撰寫一組測試程式，利用 uTCP與 TCP
完成三項交握後，以全速向 TCP/IP echo server端發送資料，並藉由ModelSim觀察波形
得出，計算出傳送一包封包需要花費多少週數。如圖 4-9、圖 4-10、圖 4-11、圖 4-12
分別為三相交握以及傳送封包部份波形。 
 
圖 4-9 uTCP發起傳送要求（SYN-SEND STATE） 
 
  42 
 
圖 4-13 Wireshark擷取封包片段 
 
  44 
第6章 未來展望 
目前 uTCP軟硬體架構趨於完整，但在使用者介面及多線程控制仍有改善空間。 
6.1 使用者介面 
目前僅預留暫存器供使用者填寫，並且定義各暫存器之用途，但在韌體撰寫方面，
僅實現 TCP/IP協定，尚未提供一組使用者介面能與 uTCP互動，未來在軟體設計方面，
在配合 uTCP運作流程以及 AMBA bus控制模式的前提之下，設計出一組完善的使用者
溝通介面。 
 
6.2 多線程之展望 
uTCP 設計之初，以高解析影像傳輸應用為導向，在硬體架構以及程式撰寫方面以
支援一組連線埠（one TCP port）為設計假想，無法在同一時間提供多組連線埠。由於
多線程的開發，能使更多應用程式，或是嵌入式系統內有網路傳送需求硬體，藉由多線
程的設計來完成網路傳送之目的，因此，多線程列為將來 uTCP重點發展目標之首。本
研究提出以下三種設計思維作為參考。 
 
6.2.1 uTCP x N 
利用多核心概念，將多顆 uTCP整合於一顆 FPGA內，每顆 uTCP僅支援單一線程。 
架構簡介： 
見圖 6-1採用多組 uTCP設計之思維下，在 uTCP與MAC以及使用者連結介面上，
需予以更新架構。於 uTCP 與 MAC 端，設計一組優先權多工器，達到多顆 uTCP 爭搶
一組 MAC 之目的，例如，欲傳送資料之 uTCP 以先進先出排班法取得 MAC 使用權，
並在結束傳送時，釋出控制權。 
雖然此設計方法具備簡單設計以及快速開發等優點，卻需要投入多顆 uTCP，進而
達成多線程應用之目的，在無法利用最少資源以換取最大效益之設計理念下，並非為最
佳設計方式。簡而言之，成本提高的同時，投入 N顆 uTCP並無法保證提昇 N倍效能，
  46 
number 為哪組執行中之線程所有，並為每一組線程增設一組 TCB 表，以得知此次 In 
module與 Out module為那一線程所需接收或傳送，為了將收送之封包資料告知使用者，
勢必撰寫大量程式來進行判別，如此一來，將遇到程式空間不足，造成計畫失敗，但若
能設計出一種簡易演算法，在有限的空間內，將使用者與封包關係連結起來，並實現之，
使得在應用與成本上取得平衡，達到最佳的設計效益。 
M
ultiplexer
M
A
C
RX FIFO
TX FIFO
PicoBlaze 
multithread
In Module
Out Module
 
圖 6-2 分散式架構 
 
若採用主從式架構，如圖 6-3，優點在於，不需將原韌體架構進行大幅度修改，僅
需設計一顆具備全新使用者介面之處理器，作為使用者以及各 PicoBlaze 之溝通橋樑，
並利用排班演算法等方式，實現一組有效控制各線程之排班法則。因此，如何選擇一顆
高效能處理器（或採用 PicoBlaze）以及選擇適當地排班演算法，將是主從式架構所面
臨之考驗，如設計不當，將導致效能不佳及正確性錯誤等問題。最後，針對硬體架構以
及傳輸速度而言，分散式架構仍比主從式架構較具有優勢。 
  48 
Control 
registers
In Module
Out Module
TCB
registers
RX Data 
Buffer
TX Data 
Buffer
A
M
B
A
|
A 
H
B
M
A
C
Host Interface
RX FIFO
TX FIFO
Host Read
Host Write
NEW Controller
 
圖 6-4 Change new micro controller 
