 2
 
Keywords: Cluster-based Systems, Web 
Clusters, Content-Aware Request 
Distribution, Persistent Connection, Load 
Balance 
 
一、前言 
 
隨著網際網路的快速發展，使用者與服
務需求量也迅速增加，網頁內容亦日趨複雜
與龐大，由於單一伺服器在技術上與成本上
的限制，叢集式系統已成為目前最佳的解決
方案。叢集式系統是一群伺服器的集合，希
望藉由負載平衡(Load Balance)與負載分享
(Load Sharing)的概念，將來自客戶端的服務
需求分散至不同的伺服器來處理，以避免單
一伺服器負載過重。但面對服務需求量劇增
的問題，叢集式系統的架構與其需求封包轉
送的機制，以及服務需求分配機制，皆會影
響叢集式系統整體的系統效能與叢集式系
統的擴充能力(Scalability)。 
同時，隨著網路技術的迅速發展，與電
子商務及企業電子化的影響下，許多網頁類
型轉變為動態的網頁服務，動態網頁(如 
PHP、ASP、或 JSP)所佔的需求比例逐年升
高，大型檔案的數量也漸漸增加，使得網路
服務需求較以往來的消耗網路頻寬、CPU 資
源與記憶體空間，使得伺服器的負載也隨之
加重。由於動態網頁與靜態網頁所消耗的伺
服器資源差異相當大，單純的負載平衡分配
已不足以應付需求，因此叢集式系統需要改
進以往適用於靜態網頁的需求分配方法，針
對動態網頁的特性，以及動靜態混合的網頁
需求加以重新設計。 
 
二、研究目的 
 
本計畫的目的是研究與實作一個具備
Content-ware Request Dispatching 的 Web 
Cluster 的平台，dispatching 的機制是實作於
kernel-level 的 one-way 架構，並能有效率的
支援 HTTP/1.1 持續連線。此平台可以擷取
服務需求的內容加以分析，依照各需求的特
性與系統的負載資訊，以及利用伺服器 disk 
cache 的效果，來選擇負責處理的伺服器，
而使伺服器資源的使用更有效率，避免因需
求分配不當而造成的整體效能下降。而此
Content-ware Request Dispatching 平台亦具
有 File-based 的 Main Memory Web Cache，
使 Web Cache 較符合網頁存取的特性。而於
此平台上可進而研究各種 Content-ware 的
Dispatching Algorithms，如改進 LARD/R 的
研究，結合不同的演算法優點的研究，讓動
態或靜態服務需求進行不同的排程，更有效
率的來處理動靜態混合的服務需求，使伺服
器資源的使用更有效率，使網頁叢集式系統
之整體效能有效地提昇。 
 
三、文獻探討 
 
國內外有許多大學及研究機構致力於
Content-ware Request Dispatching 的 Web 
Clusters 的研究，探討 Web Cluster 的架構、
分配機制、與分配排程法。在分配機制方
面，依客戶端與伺服器間封包轉送的流程，
可分為 one-way 與 two-way 的架構，分配的
機制也有實作在 kernel level 或 user level 的
不同，而支援持續連線的方式亦有不同，亦
有研究致力於 TCP 連線移轉的技術。而分
配排程法主要是利用改善伺服器的 Cache 
Hit Rates，藉以避免不必要的 Disk 存取，或
是將 Request 依據不同服務需求類型均衡的
分配給伺服器的方法。 
在分配機制方面，因 Content-ware 
Request Dispatching 的分配機制需以封包中
的需求內容進行分配排程，故 Web Switch
必 須 先 與 客 戶 端 進 行 Three-way 
Handshaking，取得客戶端的需求封包後再
進行分配排程，並轉送封包至後端伺服器。
由於後端伺服器此時並未與客戶端建立
TCP連線，因此必須將TCP連線資訊由Web 
Switch 轉移至後端伺服器，才能使後端伺服
器正確地完成客戶端的服務需求。 
許多學者提出 TCP 連線移轉技術，將
TCP 的資訊由建立連線的伺服器轉移至負
責服務的伺服器，使其可正確地回應客戶端
的需求。如：TCP Splicing]與 Redirect Flows
是屬於 two-way 的架構，而 TCP Handoff 與
One Packet TCP State Migration 是屬於
one-way 的架構，但這些大都需以額外的封
包進行 TCP 連線移轉，或需對 inbound 或
outbound 封包進行攔截與改寫，會影響系統
的效率。 
 4
Round-Robin演算法好2至4倍。而 extended 
LARD 則 是 考 慮 在 支 援 持 續 連 線 的
Back-end Request Forwarding 架構下，改進
LARD/R 的方法，考慮 forwarding 的額外成
本與 Disk utilization。而 Workload-Aware 
Request Distribution (WARD)，同樣是利用
Disk cache 的效果，定義熱門網頁為 core 
files 且複製於各個後端伺服器的 cache 內，
再依負載與檔案大小的資訊，均衡的分割
Web Files 至各個後端伺服器，希望能同時
減少 Disk 存取，減少 forwarding 或 handoff
的 overhead，及逹到負載平衡。但是其研究
成果只有模擬的實驗，且他們將 distributor 
建立在後端伺服器上，會使原本已經忙碌的
後端伺服器增加 overhead，減低 Cluster 的
效能。 
而Client-Aware Dispatching policy(CAP)
是將需求封包分為 4 種類型：Normal、CPU 
bound、Disk bound、及 CPU 與 Disk bound，
依據不同類型的服務需求，以輪流的方式分
配到不同的後端伺服器，尤其是在動靜態混
合的需求網頁中，依據類別來做輪流分配，
可以有效的均分不同負載程度的服務需求
至各後端伺服器，藉以達成負載平衡。 
 
四、研究方法 
 
Content-ware Dispatching 的 Web Cluster
架構與分配機制 
 
本研究的 Web Cluster 是一群伺服器的
集合，包含一個前端分配主機(稱 Frond-end
或 Web Switch) 負責將來自客戶端的
requests 分 配 給 後 端 伺 服 器 (Request 
Handling Server)來處理。使用 Layer-7 的
Content-aware Routing 的需求封包轉送機
制，即在客戶端與 Web Switch 建立連線後，
分析服務需求封包中的HTTP內容來決定服
務此服務需求的後端伺服器，依服務需求
(per request)而非連線(per connection)的不同
來選擇最適合的伺服器來服務，有效率的來
使用伺服器的資源。 
而其架構依客戶端與伺服器間封包轉
送的流程，採用 one-way 的架構，即是後端
伺服器並不透過 Web Switch 直接回應給客
戶端，比起 two-way 是透過 Web Switch 來
回應給客戶端的架構而言，實作上雖較複
雜，但因 Web Switch 只需處理 inbound 
packets，因此較有效率。而需求的分配機制
是實作於 kernel level，雖比 user-level 的實
作複雜，但較有效率。因此，本研究是以
one-way 的架構，實作於 kernel-level 的分配
機制為主。 
在 Layer 7 routing 與 one-way 的架構
下，必須實作 TCP 連線移轉的機制，將 TCP
的資訊由建立連線的 Web Switch 轉移至負
責服務的後端伺服器，使其可正確地回應客
戶端的需求，且後端伺服器並不透過 Web 
Switch 直接回應給客戶端。 
本研究提出 TCP Rebuilding 的連線移
轉機制，屬於 one-way 的架構，此技術是在
Web Switch 與客戶端建立 TCP 連線獲得客
戶端的需求封包後，即於負責服務的伺服器
上重建連線，特別的是後端伺服器在接收到
前端分配伺服器所發送之需求封包後，直接
重建 TCP 連線資訊成為符合與客戶端間的
連線資訊。一旦連線重建完成，後端伺服器
即可以一般的 TCP 流程處理後續的封包，
不需要再經由任何修改或處理，可以減少封
包重複的多次改寫 TCP 連線資訊，有效地
減少 CPU 資源與網路頻寬的浪費，而此連
線符合客戶端已建立的 TCP 連線狀態，因
此，伺服器不需透過 Web Switch 即可直接
回應給客戶端。。圖 1 為 TCP Rebuilding 的
封包轉送流程圖。 
 
Front-end
Server
Back-end
ServerClient
Time Time Time
5. PSH=1, ACK=1
6. ACK=1
7. PSH=1, ACK=1
8. ACK=1 9. ACK=1
1. SYN=1
2. SYN=1, ACK=1
3. ACK=1
4. PSH=1, ACK=1
a. Check TCP state
b. Rebuild TCP
    connection
 
圖 1. TCP Rebuilding 封包轉送流程圖 
 
 
 6
Content-aware Dispatch 平台中 File-based 
Main Memory Web Cache 機制的研究 
 
在 Arlitt 與 Williamson 等人與 Markatos
的研究皆顯示，網頁的存取具有高度集中的
特性，即是大部份的網頁存取都集中在小部
份的網頁上，而小檔案的存取率會比大檔案
的存取率高。因此，將熱門網頁存在記憶體
中，避免對 Disk 的存取，可以減少網頁存
取的 overhead。另一方面，傳統的檔案系統
以 Block 為單位的 Cache 機制並不適合當做
main memory 的 Web Cache，因為網頁存取
是以 File 為單位，且傳統的檔案系統需要處
理 Read-Only 與 Read-Write 的資料流，而網
頁通常只需考慮 Read-Only 即可。 
因此，在本計畫中，我們於 LVS-CAD
平台上實作一個以 File 為單位的 Main 
Memory Web Cache，並研究依 Client 端的
Request Pattern，動態的調整 Cache，藉以研
究提升 Cache Hit Ratio 的分配策略，此平台
我 們 稱 之 為 LVS-CAD/FC (LVS with 
Content-Aware Dispatching and File Caching) 
Web Cluster。 
同時，我們亦研究在 Web Cluster 使用
Gigabit Ethernet 的網路環境下，透過伺服器
的合作，使各個伺服器的 Web Cache 能達到
最大的效益，呈現 Universal 的 Cooperative 
Main Memory Web Cache，此平台我們稱之
為 LVS-CAD/CFC (LVS with Content-Aware 
Dispatching and Cooperative File Caching) 
Web Cluster。其架構如圖 3。 
 
 
圖 3: LVS-CAD/CFC 架構 
Content-ware Dispatching 分配排程法的研
究 
 
由於網頁的存取具有高度集中的特
性，因此，將存取相同網頁的服務需求分配
至相同的伺服器群，可以提升伺服器的
Cache Hit Ratio，減少對 Disk 的存取，提升
整體系統服務回應的速度。然而，在持續連
線下，當同一連線的不同服務需求內容是
cache 在不同的後端伺服器上時，Web 
Switch 則需要進行連線移轉工作，太頻繁的
移轉工作不但消耗 Web Switch 的資源，也
會影響到後端伺服器的效能，因此，分配排
程演算法需加入 TCP 連線移轉或 TCP 連線
重建成本的考量，以避免過度不必要的 TCP
連線移轉，而影響整體系統的效能。 
同時，分配排程演算法在進行負載平衡
的策略時，亦需考量不同型態的 request 所
消耗的系統資源並不相同。如 CAP 即將需
求封包分為 4 種類型：Normal、CPU bound、
Disk bound、及 CPU 與 Disk bound，依據不
同類型的服務需求，輪流分配到不同的後端
伺服器，在動靜態混合的需求網頁中，依據
類別來做輪流分配，可以有效的均分不同負
載程度的服務需求至各後端伺服器，藉以達
成負載平衡。 
在本計畫中，我們研究改進 LARD/R 的
方法，稱之為 xLARD/R 的演算法如圖 4。 
 
1. while true 
2.   Fetch next r; 
3.   if serverSet[r.request] = 0 then 
4.       n.serverSet[r.target] Å {node with least load B}; 
5.   else 
6.       n Å {serverSet[r.target] node with least load A }; 
7.   if (n is null) || 
8.      (n. load A >n.weight && there is a node l with l. load 
C <l.weight/2) then 
9.           p Å { node with least load B }; 
10.         serverSet[r.target] = p; 
11.         n Å p; 
12.     if  | serverSet[r.target] | > 1 && 
13.              time()- serverSet[r.target] .lastMod > K then
14.         m Å {serverSet[r.target] node with most load C};
15.         remove m from serverSet[r.target]; 
16.  send r to n; 
17.  if serverSet[r.target] changed then 
18.     serverSet[r.target] .lastMod Å time(); 
圖 4. xLARD/R pseudo code 
 
 8
五、結果與討論 
 
本計畫主要是研究及製作 PC-based 叢
集 式 系 統 ， 探 討 其 資 源 管 理 (resource 
management) 、 需 求 分 配 (request 
scheduling)、負載平衡(load balance)、可靠
性(availability)、容錯(fault tolerance)、效能
(performance)等等相關的課題。 
在 Web Cluster 的研究方面，本計畫的
研 究 重 點 在 於 Content-based Request 
Distribution，將來自客戶端的需求，依需求
型態及系統負載，並利用伺服器端的 cache
效果，來進行需求工作之分配，以充分使用
Web Cluster 的系統資源，達到負載共享與
負載平衡的目標。因為考量電子商務及其他
的需求，Web server 處理的不再是簡單的靜
態網頁呈現的 requests，網頁內容將更加的
龐大與複雜，各網頁類型的 requests 對伺服
器所造成的負擔也會出現極大的差異。而真
實服務主機群也可能存在著硬體上的差異
性，導致處理不同型態的 requests 能力有所
不同。 
我們設計且實作一個 content-aware 
dispatching的 platform (LVS-CAD, LVS with 
Content-Aware Dispatching)，將來自 client
端的 requests 分類處理，使整體叢集系統的
資源能有效地被運用。為了建立有效的分配
機制(request dispatching mechanism)，本研究
提出 TCP 連線移轉技術-TCP Rebuilding，不
但可解決叢集式系統於實作 content-aware 
dispatching 所造成的 TCP 連線移轉問題，可
以有效地降低內部網路的負擔並減輕整體
系統的負荷。同時，加上 Multiple TCP 
Rebuilding 技術，此系統平台可以有效的
HTTP 1/1 支 援 持 續 連 線 (persistent 
connection)。 
而基於 TCP Rebuilding 技術來提供
Content-based Request Distribution，我們不
僅開發了 LVS-CAD Web Cluster，我們亦發
展了一個 light-weight 的 Memory-based File 
Caching 技術，開發了 LVS-CAD/FC (LVS 
with Content-Aware Dispatching and File 
Caching) Web Cluster，利用 Memory Caching
的機制來減少 Disk I/O，而我們亦加上了運
用 Cooperative File Caching 的機制，另外開
發 了 LVS-CAD/CFC (LVS with 
Content-Aware Dispatching and Cooperative 
File Caching) Web Cluster，透過網路獲取鄰
近伺服器的資料來更新 Memory Caching 的
內容，以加速更新的速度。 
同時，在 LVS-CAD、LVS-CAD/FC、
LVS-CAD/CFC 等 3 種 Content-Aware 
Dispatching 平台上，我們亦提出許多相關的
content-aware dispatching 排程法來針對不同
類型的 client 的 requests，考量伺服主機群
網頁的 cache hit ratio，考量所存取網頁的特
性(如網頁大小，熱門程度)，以及考量伺服
主機群的功能與負載，依服務要求的型態來
選擇最合適的伺服主機，做有效的負載分
享。 
目前此研究已有 3 篇期刊論文發表於
Journal of Internet Technology (JIT)，5 篇的碩
士論文，另發表了 7 篇的會議論文(NCS＇
2001、DigitalLife＇2002、TANET＇2002、
2* NCS＇2003、TANET＇2004、TANET＇
2005，以及已接受了 1 篇的 ICS’2006 會議論
文。此外，尚有 2 篇期刊論文投稿至 Software 
Practice and Experience (SPE)及 Journal of 
Systems and Software (JSS)，目前在 revised 
paper 的審查階段。列述如下：(本年度計畫
的成果列於第七節的計畫成果自評內) 
 
[1] Yun-Chen Lee, Mei-Ling Chiang, and 
Shi-Chun Tsai, “The Design and 
Implementation of a Load Sharing 
Heterogeneous Cluster,” National 
Computer Symposium (NCS2001), Taipei, 
Taiwan, R.O.C., Dec. 20-21, 2001. (負載
共享的異質性 Web Cluster 之設計與實
作) 
[2] K. H. Leu, The Design and 
Implementation of an Adaptive 
Scheduling Algorithm for Heterogeneous 
Cluster Systems, Master Thesis, 
Department of Information Management, 
National Chi-Nan University, Nantou, 
Taiwan, R.O.C., June. 2002. (異質性叢集
系統之適性排程法的設計與製作) 
[3] K. H. Leu and Mei-Ling Chiang, “The 
Design and Implementation of an 
Adaptive Request Distribution Algorithm 
for Heterogeneous Web Clusters,” 2002 
Symposium on Digital Life and Internet 
Technologies, Tainan, Taiwan, R.O.C. Jun. 
