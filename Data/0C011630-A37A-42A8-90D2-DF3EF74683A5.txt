kernel. With our framework, developers can construct 
an energy-aware operating system quickly and easily. 
Besides processor based dynamic power management 
provided by traditional approach, we hope our system 
can accommodate power-saving control of peripheral 
devices and avoid the contradiction due to the 
diverse power-saving requirements of different tasks.
We built an energy-aware embedded Linux system on 
OMAP 5912 with our framework. Pre-liminary 
performance evaluation shows that our system can 
achieve up to 29.4% improvement in power-saving； the 
extra overhead is less than 1%. 
 
英文關鍵詞： Dynamic Power Management, Operating System Directed 
Power Management 
 
 2 
嵌入式作業系統動態電源管理技術之研究 
 
馮立琪 
長庚大學資訊工程系 
lcfeng@mail.cgu.edu.tw 
 
摘要 
近年來由於技術進步，許多嵌入式電子產品已
普遍地被人們所使用，為了可攜性它們大多以電池
為電能來源，但電池是一項有限的資源，一旦用盡
裝置就無法使用，如何有效地使用電池的電能便成
為一個十分重要的議題。近年來很多軟硬體的省電
技術不斷的被提出，作業系統掌控、分配電腦的資
源，負責管理所有的應用程式並與底層的驅動程
式、硬體抽象層溝通，在作業系統上加入省電的控
制，將可有效的管理系統電能。 
在嵌入式環境中，平台差異性大，在開發時不
同平台會有不同的硬體省電功能。由於沒有統一的
省電標準，在建立省電機制時，顯得較沒有效率，
如何在不同平台間建立一套機制，讓嵌入式作業系
統能夠快速地在不同平台上建立出省電機制，對於
嵌入式系統的開發會有很大的幫助。 
在本計劃中，我們針對作業系統動態電源管理
機制進行研究，設計一套機制讓開發者能快速建立
作業系統中動態電源管理功能以及易於將硬體周邊
所提供的省電功能加入此動態電源管理機制中。 
為了驗證我們的成果，我們在OMAP5912平臺
上實際建置了一個具能量感知能力的嵌入式 Linux
作業系統。依據初步的效能評估顯示，我們的系統
在耗電上可以達到 29.4%的改善，而系統產生的額外
負荷小於 1%。 
關鍵詞: 能動態電源管理、作業系統導向電源
管理 
Abstract 
Fueled by the development of embedded and 
wireless network technology, mobile devices are 
becoming increasingly popular, and extending bat-
tery lifetime is an important issue. As the control 
program and resource allocator of a computer sys-
tem, the operating system is a good place to imple-
ment power management functionality. 
Different hardware platforms provide diverse 
power-saving functions in an embedded environ-
ment. However, due to the lack of a common stan-
dard, it is inefficient and difficult to build an ener-
gy-aware embedded operating system. Developing a 
mechanism to assist the deployment of an operating 
system directed power management is important for 
the embedded systems industry. 
In this project, we design and implementation a 
dynamic power management framework in embed-
ded Linux kernel. With our framework, developers 
can construct an energy-aware operating system 
quickly and easily. Besides processor based dynamic 
power management provided by traditional approach, 
we hope our system can accommodate power-saving 
control of peripheral devices and avoid the contra-
diction due to the diverse power-saving require-
ments of different tasks. 
We built an energy-aware embedded Linux 
system on OMAP 5912 with our framework. Pre-
liminary performance evaluation shows that our 
system can achieve up to 29.4% improvement in 
power-saving; the extra overhead is less than 1%. 
Keywords : Dynamic Power Management, Operat-
ing System Directed Power Management 
1、 前言 
隨著 SoC (System on Chip)技術的進步，造就了
嵌入式環境的蓬勃發展，手機、電子手錶、PDA 
(Personal Digital Assistant)以及數位相機等資訊家
電，都已經普遍出現在人們的生活中，並帶來許多
便利的應用，這些嵌入式硬體平台在提供可攜性的
同時，大都以電池做為主要電源來源，一旦電池用
盡除非再度充電否則裝置便無法使用。 
隨著嵌入式應用愈來愈多元化，舉凡各類多媒
體影音、遊戲軟體等，都已是嵌入式環境中常見的
應用，為了要提供這些應用，嵌入式硬體平台也開
始使用高階的處理器與DSP (Digital Signal Proces-
sor)，各種平台也會因不同應用所需配備了不同的週
邊設備例如螢幕、網路裝置等，高階的處理器與各
 4 
在BIOS層級上提供處理器及周邊設備的電源管
理，但由於BIOS是一個介於硬體與作業系統間的韌
體，所以BIOS所能做的動作及指令有限，對某些新
硬體如USB和 1394的不支援。 
為了彌補APM的缺陷，PC上下一代的電源管
理標準ACPI (Advanced Configuration and Power In-
terface)[5]應運而生。1997年由 Intel、Microsoft 及 
Toshiba 所共同合作訂定出一套標準電源管理系統
介面ACPI (Advanced Configuration and Power Inter-
face)[5]。ACPI與APM最大的不同是將電源管理的
主角色由BIOS轉換成為作業系統，因此可以提供更
大的靈活性以及可擴展性。ACPI電源管理標準仍在
不斷的訂製與改良，至今已趨成熟，雖然電源管理
機制完整，但其主要針對的對象為桌上型電腦，對
於嵌入式平台較為不合適。 
當省電議題被重視時，便有許多硬體技術提供
省電的功能，例如，硬碟轉速的升降、螢幕背光開
關、依不同需求調整處理器速度的「CPU frequency 
scaling」技術[3]來達到省電的效果，然而光有硬體
提供這些功能是不夠的，硬體本身並無法得知什麼
時候該調整處理器速度、什麼時候該關螢幕背光，
因為決定一個平台如何被應用的是軟體，只有軟體
才能決定目前所需的硬體設定。 
軟體的省電方式，通常可以分成三類：編譯器
(Compiler)、應用程式控制、作業系統控制。編譯器
(Compiler)在省電方面可以在目標檔(Object file)中插
入調整硬體的程式碼，達成省電效果，但其功能僅
限制在單一程式本身，且管理的範圍較為有限[1][2] 
[4]。應用程式的電源管理方式，主要依靠類似 ioctl
的方式來達成，然而這些設定通常都是用於設定
後，很少或者不會再變更設定的情況。因為作業系
統掌控、分配資源、管理所有的應用程式並且能與
底層的驅動程式(driver)、硬體抽象層(HAL, Hardware 
Abstraction Layer)溝通，在作業系統上加入省電控制
的程式會比在以上兩者更為合適。 
作業系統導向的電源管理，可分為靜態和動
態。所謂靜態電源管理的作法是完全依照預先訂定
好的省電策略去執行，因此無法反映出系統在執行
時期真實的動態需求。它也包含了一般系統在閒置
狀況下的電源調整，即系統沒有運行應用程式、系
統服務等情形下的電源管理，Window系統中閒置過
久後可進行的休眠模式與 Linux的 suspend/resume 
[11]都是屬於靜態電源管理。 
DVFS的技術在1994年首先由Weiser等人提出
[8]，當作業系統 scheduler被執行時會做出 clock 
scaling的決定。DVFS目前已成為省電技術的主流，
幾乎所有的嵌入式硬體廠商都會考慮到此點，設計
出可調整頻率的 SoC晶片，而在調整的時機則由作
業系統決定，主要可依據系統負載與程式需求來決
定。 
DVFS一般有幾種方法[9]，第一種為依照執行
程式的worst case來決定最低CPU速度需求，第二
種為由程式執行狀態來動態決定CPU的速度。第三
種為在某時間間隔中去偵測CPU的使用率，依照
CPU的使用率來進行動態調整。 
1994年M. Weiser等人提出 PAST演算法[8]，
基於處理器負載來調整處理器的頻率與電壓，當偵
測到處理器的負載為忙碌狀態時，則認定在下一段
時間間隔的處理器負載情形亦為忙碌狀態，並調升
處理器的速度，反之，則調降處理器的速度。 
2000年由D. Grunwald 等人提出AVGn[9] 為
另一種依處理器負載情形來調整處理器頻率與電壓
的DVFS演算法，AVGn演算法在處理器速度的調
控與 PAST的差別主要在於AVGn利用過去的時間
間隔所偵測到CPU使用率的「平均值」，來預測下
個時間間隔的處理器使用率，因此在每個時間間隔
中處理器速度之間的落差較小。 
2002年Vishnu Swaminathan等人提出 LEDF 
[10]，其為一種根據Deadline的DVFS演算法，將原
本的EDF (Early Deadline First) 排程演算法，改成
LEDF (Low Energy Early Deadline First) 排程演算
法，主要是利用在Real-Time環境下其Deadline的限
制要求，也就是在Real-Time環境下的 task須在限定
的時間內完成工作，而非必需執行迅速。 
2002 我們曾提出使用者導向的DVFS技術
[27]，我們認為根據應用程式不同的需求來調整處理
器的速度會最接近實際的情況，對於省電的調整也
會最精準，根據不同的程式需求來調整，可以有效
避免DVFS預測演算法中未判斷正確而喪失的省電
機會。2009年B. Lin等人[26] 也提出類似的看法。 
在一個電腦系統當中，除了CPU外，週邊裝置
也是消耗了許多電能。Jacob Lorch[25]在 1995年的
 6 
的省電標準，缺乏對於週邊設備的管理，也未考
慮系統晶片中硬體主從架構的關係，造成省電設
計困難和效率不彰的問題。因此，我們提出一個
省電作業系統框架，在這個框架下，可快速自由
增減各類硬體省電行為的操作，也包含週邊驅動
程式中的電源操作函式，進而將週邊的控制加入
作業系統的省電管理中，避免在週邊消耗過多的
電量以及應用程式管理省電造成的問題。  
為了達成我們的目標，並能有效處理各類複
雜的省電機能，我們將以三層架構建立我們的動
態電源管理策略架構，如圖一所示，包括 policy、
mode、action三層，他們各有其代表的意義及用
途。 
Policy 
policy為最上層的部分，它決定整個系統在
電源管理上的行為模式，不同的 policy反應出不
同的管理方式，舉例而言，在一台 PDA上具備網
路和多媒體功能，然而使用者有可能同時使用兩
種功能，也有可能只用到其中之一，當使用多媒
體而未使用網路時，如果讓網路也保持正常運
作，勢必就會造成網路裝置對電量的浪費，因此
可以使用 policy來規範平台的行為：網路為主的
policy，則會保持網路設備的運作，但多媒體方面
的設備就會相對的被調整為低效能的狀態，例如
有關音樂、影像的 bus clock將被降低，而一些耗
電元件如螢幕將被關閉，除非使用者真正有需要
使用多媒體功能，否則這些參數將一直保持在低
耗電的狀態；而相反地，以多媒體為主的 policy
也是類似的情形，網路未被使用時，就將網路
clock調低，甚至將網路元件暫時關閉。如此一
來，針對使用者不同的使用情況可套用不同的
policy來管理電源。 
Mode 
每個 policy中，可以包含多種 mode，每個
mode表示系統在不同狀態所需要的省電模式，系
統在閒置時，會需要一個閒置時的 mode，在處理
各種不同 task時，也會依 task的不同需要有不同
的 mode，通常有 CPU intensive 與 I/O intensive 
兩種不同的需求[14]，前者需要較高的運算速度，
後者則偏向 I/O動作不需要太高的運算速度。一
個 task可以有多個 mode，只要此 task有不同的需
求狀況，就可給與不同的 mode，各 mode下則依
task需求訂定不同的省電設定。舉例而言，一個
純數學運算的程式在執行時，則會切換到以 CPU
速度為主的 mode，以提升 CPU速度加速數學運
算，而一個 mp3 player在執行時，CPU速度可以
不用太高，但有關 audio的 bus clock則需要維持
在一定的速度之上，並且 audio硬體元件不能被關
閉，而當一個使用到圖形的程式在執行時，與 mp3 
player類似，CPU與圖形相關的 clock必需維持在
一定的速度之上，但這裡的硬體元件從 audio變成
螢幕，也就是當圖形程式在執行時螢幕必需被打
開，甚至背光也需要做適當的調整。 
running mode idle mode
action 1
action 2
action 3
policy1 policy2
action 1
action 2
 
圖一、 動態電源管理策略架構 
Action 
Action以 action-chain的方式掛載在 mode之
下，每一個 mode只會有一串唯一的 action-chain，
action-chain所代表的意義為進入一個 mode時所
需要完成的各項省電操作，例如，當作業系統進
入 idle thread時，可切換為 idle mode，而 idle mode
中所需要的省電設定可能為調低 CPU速度、關閉
未被使用的週邊等，這些有關省電設定的操作函
式就會被載掛在 idle mode的 action-chain之下。
當切換到 idle mode時，就會將整個 action-chain
執行一次，以完成各 action代表的省電設定。當
action-chain執行完成後，即代表 idle mode需要的
硬體省電設定調整完成，之後作業系統若沒有離
開閒置狀態，則這個省電設定將會一直被採用，
直到作業系統收到中斷與排程的需求才會再度變
更。 
在我們的設計下，action可以再掛接
sub-action。這樣的設計是考量到現今 SoC晶片的
設計概念，現今 SoC晶片中 CPU與 bus常有明顯
 8 
電系統便會為這兩應用程式進行硬體省電設定。
當執行網路程式時，省電系統依其需求做調整，
而此程式的需求為網路裝置，但是它不需要螢
幕。而執行影像程式時，需求則為螢幕，但不需
要網路。在這兩者之間，如果沒有一個協調者，
就會造成當影像程式在執行時，網路被關閉了，
相反的當網路在執行時螢幕卻被關閉了。 
Framework API 
Framework API在整個省電機制中扮演相當
重要的角色，它提供 Policy Manager建立 policy
的函式，它同時也是快速建置特性這個重要功能
的界面，驅動程式的開發者可以透過 Framework 
API所提供的介面函式來進行註冊，如此，驅動
程式所提供的各種硬體功能都能融入省電機制，
讓作業系統來決定何時該採用該項功能。
Constraint Manager中的一些相關的函式也包含在
Framework API裡，例如 Constraint的建立與檢查
等相關功能。 
我們系統也將與 Linux的 DVFS整合。系統
體整運作時，Policy Manager與 Constraint Manager
負責提供 policy和 constraint給 DPM core，DPM 
core便可以根據這些資訊來管理作業系統中各種
不同需求的情況，並且在實際設定硬體操作函式
前，DPM core會根據 Constraint Manager產生的
限制進行必要的檢查，以保護程式正常的運作。 
5、 結果與討論 
為了驗證我們的系統的有效性，我們針對
DPM framework的 overhead及省電能力進行了量
測。我們利用 Agilent 34411A量測電能的消耗，
取樣頻率設為 1秒。 
我們利用 OMAP5912做為一個 multimedia 
PDA，上面執行四個應用程式: video game、 
picture viewer、MP3 player以及 text reader。我們
定義 game、pic、music、doc及 idle等五個 mode，
當系統處於這五個 mode時分別代表 video game、 
picture viewer、MP3 player或 text reader正在被執
行。我們也在 game、doc、pic及 music mode設定
了 constraints，以避免在系統模式切換時發生矛
盾的現像。 
首先我們進行MP3播放測試，我們播放三個
MP3音樂檔案各一分鐘，在有省電機置和沒有省
電機置的情形下測量所消耗的電量。檔案一和檔
案二為流行樂，檔案三為古典樂，測量的結果如
表一所示。我們的省電機置可以達到 29.4%的改
善。 
表一、MP3 play test 
File 
Without power 
savings (mA) 
With power 
savings (mA) 
Average 
savings 
File 1 278 202.62 27.2% 
File 2 287.71 203.23 29.4% 
File 3 286.57 205.12 28.4% 
接著我們進行情境測試。在測試中一個背景
的工作利用無線網路進行傳輸，同時利用MP3 
player播放音樂 1分鐘，實驗結果如圖三所示。依
照實驗結果顯示，我們的系統在耗電上節省了
16.7%。 
 
圖三、情境測試結果此較 
在我們的系統在執行 mode切換時必須執行
action chain，為了評估系統執行 action chain時所
帶來的額外負荷，我們也進行了量測。我們實際
量測了執行一個最複雜的 action chain(pic mode)
所需的時間。另外我們也測量了執行一個 null 
action chain所需的時間，結果如表二所示。 
表二、Action chain overhead 
Test Item 
Difference 
in Jiffies 
Difference in 
Counter  
Overhead 
Complex action chain 0 623.3 1% 
Null action chain 0 91.3 0.15% 
因為時間太短，我們合併了 timer暫存器的
 10 
tion and Power Interface (ACPI) specification Re-
vision 2.0c”, August 25, 2003 
[17] TinyOS, http://www.tinyos.net/ 
[18] H. Liu, T. Roeder, K. Walsh, R. Barr, E. G. Sirer, 
"DESIGN AND IMPLEMENTATION OF A 
SINGLE SYSTEM IMAGE OPERATING SYS-
TEM FOR AD HOC NETWORKS", USENIX 
MobiSys 05, 2005. 
[19] J. Sorber, N. Banerjee, M. D. Corner, S. Rollins, 
"Turducken: Hierarchical Power Management for 
Mobile Devices", USENIX Association ’05, 2005 
[20] L. and N. K. Jha, “Energy Efficiency of Handheld 
Computer Interfaces: Limits, Characterization and 
Practice”, USENIX Association MobiSys ’05, 2005 
[21] 呂俊欣，「Power-Aware作業系統技術之研究」，
長庚大學，碩士論文，民國九十三年 
[22] A.Rubini and J. Cobet, Linux Device Driver, 
OReilly, 2004 
[23] Texas Instruments, Omap5912 Multimedia Pro-
cessor Power Management Reference Guide, 
OMAP Texas Instrument Technology, 2004 
[24] eCos, http://ecos.sourceware.org/ 
[25] Jacob Lorch. A complete picture of the energy 
consumption of a portable computer. Technical re-
port, University of California at Berkeley, 1995 
[26] B. Lin, A. Mallik, P. Dinda, G. Memik, R. Dick, 
“User- and Process-driven Dynamic Voltage and 
Frequency Scaling,” in Proceedings of the 2009 
IEEE International Symposium on Performance 
Analysis of Systems and Software, April, 2009. 
[27] L.C. Feng, J.H. Lu and D.J Lin, “Design and Im-
plementation of a Dynamic Power Management 
Framework for Embedded Linux,” The Third Asia 
Pacific Embedded Systems Education and Research 
Conference, Singapore, Dec. 14-15 2009. 
[28] D. Brodowski et al. CPUFreq web page. 
http://www.brodo.de/cpufreq/ 
[29] Jan Hendrik Schönherr, Jan Riching, Matthias 
Werner, and Gero Mühl, “Event-Driven Processor 
Power Management,” in Proceedings of the 1st In-
ternational Conference on EnergyEfficient Compu-
ting and Networking eEnergy’10, Passau, Germany, 
Apr. 13-15, 2010. 
[30] Martin P. Lawitzky, David C. Snowdon, and Ste-
fan M. Petters, “Integrating real time and power 
management in a real system,” in Proceedings of 
the 4th Workshop on Operating System Platforms 
for Embedded Real-Time Applications, Prague, 
Czech Republic, July 2008. 
[31] David C. Snowdon, Etienne Le Sueur, Stefan M. 
Petters, and Gernot Heiser, “Koala: A platform for 
OS-level power management,” in Proceedings of 
the 4th EuroSys Conference, Nuremberg, Germany, 
April 2009.
 
100年度專題研究計畫研究成果彙整表 
計畫主持人：馮立琪 計畫編號：100-2221-E-182-046- 
計畫名稱：嵌入式作業系統動態電源管理技術之研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 1 100% 已投稿審稿中 
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 3 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
