 
多種不同平衡括弧字串表示法之次序及反次序研究 
A Study of Ranking and Unranking of Balanced 
Parenthesis Strings in Diverse Representations 
 
吳若禹 
龍華科技大學工業管理 
[E-MAIL：eric@mail.lhu.edu.tw] 
 
中文摘要 
 
格式良好括號（Well-formed parenthesis）字串可以不同類型的整數序列表示之，包
括P序列，X序列和T序列。在本研究計劃中，我們介紹一新的序列名為 L-序列；它是來
自可表示多元樹(k-ary trees)之所謂的RD序列。然而，我們探索出這些整數序列表示之間
的關係，在它們不同的表示整數序列以辭彙編纂次序來處理格式良好括號之排序和反次
序排的問題。我們希望對多種不同平衡括弧字串表示之次序及反次序，都可以在O（n）
的時間完成，其中n是平衡括弧的數目。 
 
關鍵字：排序演算法，反次序演算法，格式良好括號，辭彙編纂次序， 
Abstract 
 
Well-formed parenthesis (w.f.p.) strings can be represented by different types of integer 
sequences including P-sequences, X-sequences, and T-sequences. In this project, we introduce a 
new class of sequences called L-sequences which comes from the so-called RD-sequences for 
representing k-ary trees. We then search out the relationships among these representations and deal 
with the problems of ranking and unranking of w.f.p. strings in lexicographic order under these 
diverse representations. We hope the result that shows the ranking and unranking of w.f.p. strings 
which can be done in O(n) time for all such representations, where n is the number of pairs of 
balanced parentheses. 
 
Keywords: ranking algorithms, unranking algorithms, wellformed parenthesis strings, lexicographic 
order,  
2 Diverse representations of w.f.p. strings
Throughout this paper, we use Sn to denote a w.f.p. string with length 2n and let Sn denote its
mirror (i.e., a string produced in the opposite direction of Sn and exchanged all left parentheses
with right parentheses). A w.f.p. string may be regarded as a binary tree T by replacing left
parentheses with internal nodes and right parentheses with leaves (barring the last one leaf), where
scanning the parenthesis string from left to right corresponds to the traversal of T in preorder (i.e.
visit the root and then recursively the left subtree and the right subtree of T ). For example, a
w.f.p. string S6 = “(()(()))()()” and its corresponding binary tree are shown in Figure 1.
(
(
) (
(
(
(
) )
)
)
)
Figure 1: A binary tree corresponds to a w.f.p. string “(()(()))()()”.
Pallo and Racca [11] introduced the P-sequences to characterize all shapes of binary trees with
n internal nodes. A P-sequence of Sn, denoted by p(Sn) = (p1, p2, . . . , pn), is an integer sequence
where pi denotes the number of left parentheses preceded the ith right parenthesis in Sn (equiva-
lently, the number of visited internal nodes before the ith external node in the preorder traversal
of T ). For example, the P-sequence of the w.f.p. string shown in Figure 1 is p(S6) = (2, 4, 4, 4, 5, 6).
Note that there is a connection between P-sequences and the so-called ballot-sequences introduced
by Rotem and Varol [15]. A P-sequence can be obtained from a ballot sequence by replacing inte-
gers 0, 1, 2, . . . , n− 1 with integers n, n− 1, . . . , 2, 1, respectively. For example, the ballot-sequences
of the binary tree shown in Figure 1 is (4, 2, 2, 2, 1, 0). For algorithms of generating P-sequences or
ballot-sequences, the reader can refer to [1, 2, 6, 11,15,21].
There exist other types of sequences to characterize w.f.p. strings. Xiang and Ushijima [25]
naively represented a w.f.p. string Sn by using a position sequence x(Sn) = (x1, x2, . . . , xn), where
xi denotes the position of the ith left parenthesis occurred in Sn. Here we call a position sequence as
an X-sequence for convenience. For example, the X-sequence of the w.f.p. string shown in Figure 1
is x(S6) = (1, 2, 4, 5, 9, 11). Note that every X-sequence satisfies 1 = x1 < x2 < · · · < xn and
xi 6 2i − 1 for 1 6 i 6 n. In fact, the X-sequences are exactly Zaks’ sequences (also called the
Z-sequences) for representing k-ary trees with k = 2 (i.e., the case of binary trees) [27]. Excepting
lexicographic generation in [27], looplees algorithms for generating X-sequences or Z-sequences in
Gray-code order can be found in [13,25,26].
3
Proof. Suppose that xi = k (i.e., the ith left parenthesis is at position k in Sn). Then, there are
i− 1 left parentheses and (k − 1)− (i− 1) = k − i right parentheses before the ith left parenthesis
in Sn. Since Sn is well-formed, i− 1 > k − i. Thus, the number of nested parentheses around the
ith left parenthesis is `i = (i− 1)− (k − i) = (2i− 1)− xi. 
Lemma 2 Let Sn be a w.f.p. string with length 2n such that p(Sn) = (p1, p2, . . . , pn) and `(Sn) =
(`1, `2, . . . , `n). Then, pi − `n+1−i = i for 1 6 i 6 n.
Proof. Suppose that pi = k (i.e., there are k left parentheses before the ith right parenthesis in
Sn). Then, the ith right parenthesis is at position i + k in Sn. From the mirror of Sn, it implies
that the (n + 1 − i)th left parenthesis must be at position (2n + 1) − (i + k) in Sn. That is, if
x(Sn) = (x1, x2, . . . , xn), then xn+1−i = 2n + 1 − (i + k). By Lemma 1, `n+1−i = (2(n + 1 − i) −
1)− (2n + 1− (i + k)) = k − i = pi − i. 
(0, 0, 0, 0)
(0, 0, 0, 1)
(0, 0, 1, 1)
(0, 0, 1, 2)
(0, 0, 1, 0)
(0, 1, 1, 0)
(0, 1, 1, 2)
(0, 1, 0, 1)
(0, 1, 0, 0)
(0, 1, 1, 1)
(0, 1, 2, 0)
(0, 1, 2, 1)
(0, 1, 2, 2)
(0, 1, 2, 3)
(1, 3, 5, 7)
(1, 3, 5, 6)
(1, 3, 4, 7)
(1, 3, 4, 6)
(1, 3, 4, 5)
(1, 2, 5, 7)
(1, 2, 5, 6)
(1, 2, 4, 7)
(1, 2, 4, 6)
(1, 2, 4, 5)
(1, 2, 3, 7)
(1, 2, 3, 6)
(1, 2, 3, 5)
(1, 2, 3, 4)
()()()()
()()(())
()(())()
()(()())
()((()))
(())()()
(())(())
(()())()
(()()())
(()(()))
((()))()
((())())
((()()))
(((())))
(1, 2, 3, 4)
(1, 2, 4, 4)
(1, 3, 3, 4)
(1, 3, 4, 4)
(1, 4, 4, 4)
(2, 2, 3, 4)
(2, 2, 4, 4)
(2, 3, 3, 4)
(2, 3, 4, 4)
(2, 4, 4, 4)
(3, 3, 3, 4)
(3, 3, 4, 4)
(3, 4, 4, 4)
(4, 4, 4, 4)
()()()()
()()(())
()(())()
()(()())
()((()))
(())()()
(())(())
(()())()
(()()())
(()(()))
((()))()
((())())
((()()))
(((())))
4
3
4
2
3
1
2
1
2
3
2
3
4
1
2
1
1
2
2
3
3
4
0/1
0/3
0/5
0/7
0/7
0/7
0/7
0/7
1/6
1/6
1/6
1/6
1/6
2/5
2/5
2/5
3/4
1/2
1/4
0/5
1/4
2/3
￿(S4) x(S4) p(S4)S4 S4
L− sequences X− sequences P− sequencesw.f.p. strings
Figure 2: Coding trees for describing w.f.p. strings S4 with L-sequences, X-sequences, and P-
sequences.
To give a deep impression on the involved relationships, we show L-sequences and other types
of sequences by using the coding tree structures [25]. Note that the concept of coding trees was
independently introduced under various names including the backtracking tree [29] and recursion
tree [9]. Figure 2 shows the coding trees to describe all w.f.p. strings S4. We encode the tree in the
left-hand side, on which every node is labeled by `i/xi where i denotes the depth of the node in the
tree. Thus the full labels along the path from the root to a leaf (e.g. `(S4) or x(S4)) correspond to a
w.f.p. string. From the structure of a coding tree, the relationship of `i and xi stated in Lemma 1 is
5
(1, 1, 1, 1)
(1, 1, 0, 2)
(1, 0, 2, 1)
(1, 0, 1, 2)
(1, 0, 0, 3)
(0, 2, 1, 1)
(0, 2, 0, 2)
(0, 1, 2, 1)
(0, 1, 1, 2)
(0, 1, 0, 3)
(0, 0, 3, 1)
(0, 0, 2, 2)
(0, 0, 1, 3)
(0, 0, 0, 4)
()()()()
()()(())
()(())()
()(()())
()((()))
(())()()
(())(())
(()())()
(()()())
(()(()))
((()))()
((())())
((()()))
(((())))
1
0
1
1 1
1
1
2
0
0
0
0
0
2
2
2
2
1
1
1
0
0
1
1
1
1
3
3
2
2
2
2
3
3
4
(0, 0, 0, 0)
(0, 0, 0, 1)
(0, 0, 1, 1)
(0, 0, 1, 2)
(0, 0, 1, 0)
(0, 1, 1, 0)
(0, 1, 1, 2)
(0, 1, 0, 1)
(0, 1, 0, 0)
(0, 1, 1, 1)
(0, 1, 2, 0)
(0, 1, 2, 1)
(0, 1, 2, 2)
(0, 1, 2, 3)
L− sequencesT− sequences w.f.p. strings
￿(S4)S4t(S4)
Figure 3: A coding tree for describing w.f.p. strings S4 with T-sequences.
problems for diverse representations of w.f.p. strings. Before this, we first consider the structure
properties of the coding trees for w.f.p. strings with L-sequences.
Let Tn denote the coding tree for describing all w.f.p. strings Sn with L-sequences. Recall that
(`1, `2, . . . , `n) is a layer sequence if and only if `1 = 0 and 0 6 `i 6 `i−1+1. Obviously, if two nodes
have the same label in the same level of Tn, then they must have the same number of children.
This further implies that the subtrees rooted at each of the two nodes are the same. For 1 6 i 6 n
and 0 6 k 6 n− i, let ai,k denote a node with label k in the (n + 1− i)th level of Tn and let Ai,k
denote the number of leaves in the subtree rooted at ai,k. By this way, a1,k represents a leaf and
an,0 is the root of Tn. Thus, A1,k = 1 for 0 6 k 6 n − 1. For computing Ai,k with 2 6 i 6 n, we
may separately count the number of leaves in the subtree rooted at each child of ai,k and then sum
up these counts for total, i.e.,
Ai,k =
k+1∑
j=0
Ai−1,j . (1)
Also, we define the following formula for the efficiency of computation:
Ci,k =
{
0 if k = i− 1∑k−i
j=0Ai,j = Ai+1,k−i−1 if i 6 k 6 n
(2)
where 1 6 i 6 n. Note that the term Ci,k indicates the total number of leaves for those subtrees
rooted at nodes with labels from 0 to k− i in the (n+1− i)th level of Tn. Hence, a table built from
Eq. (2) is named as the accumulation table with respect to n. In fact, it has been proved in [24]
7
Indeed, for the efficiency of computing the rank, we don’t need to build the accumulation table.
An alternative way shows that using Eqs. (4) and (6) instead of Eq. (8) can efficiently reduce the
complexity by the following algorithm.
Algorithm L-ranking(`(Sn))
1: i = 1; k = 0; m = n + 1;
2: s = min{i : `i 6= 0 and 1 6 i < m};
3: do
4: t = max{i : `i 6= 0 and 1 6 i < m};
5: h = (n− t + `t)− k;
6: if (i = 1) then
7: Rank = 0; u = n− t;
8: C = k = h; // Set C1,k = k
9: else
10: for j = 1 to h do
11: C = C · (k−i+2)(k+i+1)(k−i+1)(k+2) ; // Refer to Eq. (4), move right
12: k = k + 1;
13: enddo
14: u = m− t;
15: endif
16: for j = 1 to u do
17: C = C · (k+i+1)(k−i)(k−i+1)(k+2) ; // Refer to Eq. (6), move up
18: i = i + 1;
19: enddo
20: Rank = Rank + C;
21: m = t;
22: while (i < n− s);
23: return Rank;
9
Algorithm P-unranking(N,n)
1: `(Sn)←L-unanking(N,n);
2: Convert `(Sn) into p(Sn) by Lemma 2;
3: Output p(Sn).
Algorithm T-unranking(N,n)
1: `(Sn)←L-unanking(Cn −N,n);
2: Convert `(Sn) into t(Sn) by Lemma 3;
3: Output t(Sn).
Theorem 2 Given positive integers N and n, each of the Algorithms X-unanking, P-unanking,
and T-unanking can correctly determine the representations of a w.f.p. string Sn in O(n) time,
where the representations are X-sequence, P-sequence, and T-sequence, respectively.
5 . Conclusions
In this paper, a new type of sequences called L-sequences is introduced for representing a w.f.p.
string. Moreover, relationships of L-sequences and other types of sequences are derived. Based on
the ranking and unranking algorithms proposed in [24] for k-ary trees, we show that ranking and
unranking problems for several representations of w.f.p. strings (or binary trees) can be solved in
linear time. To the best of our knowledge, it seems that the unified approach appeared here is the
first time to deal with the ranking and unranking for multiple representations of w.f.p. strings. We
believe that the technique could easily be imitated in other types of combinatorial objects.
References
[1] H. Ahrabian and A. Nowzari-Dalini, On the generation of P-sequences, Advanced Modeling
and Optimization 5 (2003) 27–38.
[2] H. Ahrabian and A. Nowzari-Dalini, Generation of t-ary trees with ballot-sequences, Interna-
tional Journal of Computer Mathematics 80 (2003) 1243–1249.
[3] B. Bultena and F. Ruskey, An Eades-McKay algorithm for well-formed parentheses strings
Information Processing Letters 68 (1998) 255–259.
[4] M.C. Er, A note on generating well-formed parenthesis strings lexicographically, The Computer
Journal 26 (1983) 205–207.
11
[25] L. Xiang and K. Ushijima, On O(1) time algorithms for combinatorial generation, The Com-
puter Journal 44 (2001) 292–302.
[26] L. Xiang, K. Ushijima, and C. Tang, Efficient loopless generation of Gray codes for k-ary trees,
Information Processing Letters 76 (2000) 169–174.
[27] S. Zaks, Lexicographic generation of ordered trees, Theoretical Computer Science 10 (1980)
63–82.
[28] S. Zaks, Generation and ranking of k-ary trees, Information Processing Letters 14 (1982)
44–48.
[29] D. Zerling, Generating binary trees using rotations, Journal of the ACM 32 (1985) 694–701.
13
 2 
 
二、與會心得 
A t-ary tree is a rooted tree such that every internal node has exactly t  disjoint 
subtrees . Recently, a concise representation called RD-sequences was introduced to 
represent t-ary trees and their generalization called non-regular trees. In part icular ,  
a loopless algorithm has been proposed by Wu et al . (2010) for generating 
non-regular trees (and thus of t-ary trees) encoded by RD-sequences in a Gray-code 
order. In this paper , based on such a Gray-code order, we present an efficient 
unranking algorithm of t-ary t rees wi th n internal nodes. The time complexi ty and 
space requirement in the algori thms are O (max{n2; tn}) and O (tn) , respect ively. 
As a by-product, we have an improvement on unranking t-ary trees encoded by 
z-sequences in a Gray-code order . 
 
三、考察參觀活動(無是項活動者略) 
 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/10/14
國科會補助計畫
計畫名稱: 多種不同平衡括弧字串表示法之次序及反次序研究
計畫主持人: 吳若禹
計畫編號: 100-2221-E-262-019- 學門領域: 計算機理論與演算法
無研發成果推廣資料
Strings: A 
Unified 
Approach, Ro–Yu 
Wu, Jou – Ming 
Chang, An–Hang 
Chen and Chun–
Liang Liu, 
Chiang Mai J. 
Sci. 2012 ；
39(4) : 648-659
研究報告/技術報告 0 0 0%  
研討會論文 3 3 30% An Improving 
Scheme of 
Unranking t-ary 
Trees in 
Gray-code Order, 
Ro–Yu Wu, 
Jou–Ming Chang, 
An–Hang Chen 
and Chun–Liang 
Liu, 
International 
Conference on 
Mechanical, 
Production and 
Materials 
Engineering. 
(ICMPME'2012) 
An Unranking 
Algorithm for 
Loopless 
Generation of 
Non-regular 
T R Y
