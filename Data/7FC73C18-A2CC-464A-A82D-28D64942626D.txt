先進無線通訊系統之低功率高效能低密度奇偶校驗解碼器架構及電路設計(I)
“High-Performance Low-Power Low-Density Parity-Check Decoder IC Design
for Advanced Wireless Communication Systems”
計畫編號：NSC96-2221-E-224-079
執行期間：96年 8月 1日 至 97年 7月 31日
主持人：國立雲林科技大學電子工程系 楊博惠助理教授
一、中文摘要
本研究提出新的低成本高效能低密度奇
偶校驗碼解碼器的架構設計，本新架構是在
Log sum-product algorithm (Log-SPA)解碼演算
法之下採用邏輯或閘運算(OR Operation)取代
傳統二進位加法器。同時提出本論文
pseudo-carry電路，在 OR Operation架構，用
以大幅改善本論文之 OR Operation 架構位元
錯誤率(BER)效能。此外，我們還在新的 OR
Operation架構中，採用全二補數數系的訊息傳
遞的技術，來簡化硬體複雜度，而此更進一步
的降低新解碼電路的硬體成本。
本研究主要有兩款新型低密度奇偶校驗
碼解碼器架構，即 OR Operation 以及 OR
Pseudo-carry Operation的低密度奇偶校驗碼解
碼器架構，與傳統電路相比，在矩陣大小為
504× 1008時，並採用 TSMC 0.18μm標準細胞
元硬體合成，結果顯示可減少硬體成本可以達
到 32%與 26%。在效能比較上和傳統 Log-SPA
解碼器架構上，約只相差 0.1dB ~ 0.3dB BER
效能。若與 Sign-Min架構比較，則改善 0.3dB
~ 0.1dB BER效能。
英文摘要
A low hardware cost LDPC decoder, using
logical OR operation on the check-nodes for Log
sum-product algorithm (Log-SPA) decoding
algorithm, is presented in this project. A
pseudo-carry circuit is proposed for OR
operation architecture in this project, to improve
the Bit Error Rate (BER) performance. In
addition, we had proposed a simplified
messaging passing technique in our OR
operation architecture, using two’s complement
values, that reduced hardware complexity and
decoding efforts. We design two new
architectures in this project to compare with the
traditional LDPC decoder by using the matrix
size 504×1008 and targeting with TSMC 0.18μm
standard cell library, the synthesized results
show that new proposed architectures achieve up
to 32% and 26% total hardware reduction, and
0.1dB ~ 0.3dB BER lose, when comparing with
the traditional Log-SPA decoder architecture,
There is 0.1dB ~ 0.3dB BER improvement while
comparing with the Sign-Min architecture. Our
new LDPC decoder has verified by FPGA,
consisting with AWGN generator, SIPO, PISO,
control unit, in a 102×204 matrix. The
measurement results show that our new LDPC
architecture can decode successfully..
二、計畫的緣由與目的
而本計畫實現的 FEC decoding 是一個被
遺忘了 40 多年的低密度奇偶校驗碼 (Low
Density Parity Check Codes, LDPC Codes)，
它之所以能夠重見天日，進入舞台，其實有其
時空背景的催生元素存在。1962年，當時錯誤
更正碼的主流用途幾乎都是聲音的傳送，其編
decoder 文獻資料來對幾個主要的演算法做整
理，可以分成如下的分類
圖一: 主要 LDPC decoder 演算法分類與其硬
體實現之主要元件。
基於圖一，我們擬在本計畫中分三年來實
現 LDPC decoder。目前，我們初步的文獻探討
已開始著手進行。為了這個跨通訊及微電子學
門，且是產、學界且都重要的研究主題，我們
研擬了三年的研究主軸如下:
本計畫的第一年以 Log-SPA 演算法為主
軸，這個一期研究的主要目標在研發出低硬體
複雜度的修改 Log-SPA 演算法，及電路架
構。同時，它的錯誤更正效能不錯。因為這是
本計畫的第一期，因此我們先從傳統的演算法
著手，再把 Log-SPA的前人研究文獻做深入推
導。而這些初步的研究，我們已有先期的了解
並告一段落。
第二年以 Min-Sum演算法為主與提出低
成本的 Log-SPA 演算法解碼架構，因為經文
獻資料分析發現 Min-Sum 演算法之硬體實現
會比 Log-SPA簡單。但是它的錯誤更正的效能
比 Log-SAP差。在某些應用上，例如可攜式的
無線通訊裝置，則會需要採用。
第三年將 Log-SPA及 Min-Sum演算法之
硬體實現做改善，以作為需要高解碼效能選項
之路，並將以電晶體階層的設計技巧來實現晶
片。其中，我們將運用第一、二年的主要架構
研發成果，進一步讓它更適合當未來我們所建
構的無線通訊系統裡一個嵌入式電路方塊。
本研究提出的 OR Operation 以及 OR
Pseudo-carry Operation的低密度奇偶校驗碼解
碼器是利用邏輯或閘運算的技巧，在此稱 OR
Operation。而 OR Operation的想法主要就是觀
察到原本必須將LLR轉為tanh函數(x)的這些
值會加總出一個值，之後再經過 tanh函數 ( )x
轉為 LLR 的 LUT，來得到往 Variable Node
Update的LLR的值。而我們的技巧是利用LLR
轉為 tanh 函數(x)的這些值將其每個 bit 分
離，單獨作邏輯或閘的運算，如圖二(a)所示，
經過模擬發現其實 OR Operation 的方法
在 Check Node與Variable Node之間訊息的溝
通與使用加法運算的方式是有誤差的，問題就
在於因為我們直接使用邏輯或閘的運算方式
是無法把原本加法器的進位傳遞的部份給計
算出來，也造成 Check Node與 Variable Node
之間訊息的溝通的誤差，所以我們提出一個使
用 OR Operation 的架構再搭配簡單的邏輯電
路即能有效將損失的效能給彌補回來。而一開
始補 Carry的動作的想法，我們所使用的方式
與加法器的原理一樣，兩兩相互做 OR
Operation 的計算，只要出現兩個“1”就會有
Carry產生給下一級，在此稱 OR Pseudo-carry
Operation。而有了此想法，我們也先採取為
802.16e 標準，大小為(1248,624)的矩陣分別去
模擬使用 LUT 3-7 及 LUT 3-4 使用 OR
Pseudo-carry Operation 技巧後的 BER 效能如
圖三所示，架構圖如圖四所示，面積比較圖如
圖五所示。
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
.
 

1
log
1
x
x x
e
e
 

1
log
1
x
x x
e
e
 

1
log
1
x
x x
e
e
 

1
log
1
x
x x
e
e
 

1
log
1
x
x x
e
e
 

1
log
1
x
x x
e
e
 

1
log
1
x
x x
e
e
 

1
log
1
x
x x
e
e
 

1
log
1
x
x x
e
e
 

1
log
1
x
x x
e
e
 

1
log
1
x
x x
e
e
 

1
log
1
x
x x
e
e
5 bits
4 bits
3 bits
OR Operation
Input 2
Input 1
Input 4
Input 3
Input 6
Input 5
Output 1
Output 2
Output 3
Output 4
Output 5
Output 6
.
(a)
