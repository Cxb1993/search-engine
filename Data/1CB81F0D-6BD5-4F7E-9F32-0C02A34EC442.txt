 I
摘要 
 
 
圍棋比賽分為佈局、中盤、官子三個階段。佈局階段所著重的不在於地域，而在於「要
點」和「厚勢」，因此，要從大處著手，自然而然地築成「模樣」，並且佔據角隅和邊上的
星位，以作為攻擊的據點。搜尋程式在開局階段偶爾會因為審局函數偏差或搜尋深度不足
的關係，下出較不恰當的著手，形成電腦棋類遊戲的盲點。在電腦九路圍棋方面，對於棋
局的優劣考量甚為複雜，良好的審局函數能根據棋子特性、棋勢、棋型辨認（Pattern 
Recognition）等，動態決定棋塊的死活來評判盤面的優劣。 
 
本研究計畫設計並製作一個基於主從式網路架構，具備知識蒐集、分析與整理的電腦
九路圍棋開局知識庫系統。而此系統正是目前國內電腦九路圍棋程式所欠缺的。本計畫建
置九路圍棋知識庫的相關系統，並且設計盤面優劣評量機制，調整並修正系統之著手選擇
策略。然後，設計一個透過網際網路大量蒐集棋譜的九路圍棋網路平台，以及知識庫備份
系統，藉由大量加入棋局、棋譜，來調整系統參數、增進系統的效能。 
 
本計畫有三項重大的貢獻。首先，我們以資訊技術的方法來解決九路圍棋的開局問題，
這在人工智慧領域上意義重大。其次，所設計並製作的九路圍棋網路開局知識庫系統，有
助於縮短人們對圍棋的學習曲線，而且也可與傳統棋書上棋局評註相映證。最後，此知識
庫系統可與中局對局程式相結合，將大幅提昇電腦九路圍棋的水準。 
 
 
 
關鍵字：電腦九路圍棋、人工智慧、知識庫、資料探勘、網際網路 
 
 
 III
目錄 
 
 
一、前言 ……………………………………………………………………………….. 1 
1.1  電腦九路圍棋的簡介 ………………………………………………………. 1 
1.2  電腦棋類遊戲開局階段的盲點 ……………………………………………. 1 
 
二、研究目的 …………………………………………………………………………. 3 
 
三、文獻探討 …………………………………………………………………………. 4 
 3.1  電腦圍棋與電腦象棋的發展 ……………………………………………… 4 
 3.2  電腦西洋棋的發展 ………………………………………………………… 4 
 3.3  圍棋規則 …………………………………………………………………… 5 
 3.4  各種棋類遊戲之複雜度 ……………………………………………………. 6 
 
四、研究方法 ………………………………………………………………………….. 7 
4.1  資料結構 …………………………………………………………………… 7 
 4.1.1  知識庫檔案結構 …………………………………………………… 7 
 4.1.2  雜湊表（Hash Table） …………………………………………….. 9 
4.2  著手選擇之策略 …………………………………………………………… 9 
 4.2.1  Metadata …………………………………………………………… 9 
 4.2.2  統計資訊 …………………………………………………………… 11 
4.3  九路圍棋伺服器 …………………………………………………………… 13 
 4.3.1  伺服器架構 ………………………………………………………… 13 
 4.3.2  用戶端架構 ………………………………………………………… 14 
4.4  知識庫備份系統 …………………………………………………………… 15 
 
五、結果與探討 ………………………………………………………………………... 16 
 
六、計畫成果自評 ……………………………………………………………………. 18 
 
參考文獻 ……………………………………………………………………………….. 19 
 
 
 1
一、前言 
 
 
1.1 電腦九路圍棋的簡介 
 
    圍棋起源於中國，相傳是五千年前堯所發明的，不過當時的用途據傳適用於記錄天文
資訊，真正有棋譜傳世大約始於三國時代。傳入日本之後，經日本人的提倡發揚，現今許
多西方國家也蔚為風行，根據中華民國圍棋協會的估計，台灣的圍棋人口約為 30 多萬人，
喜愛圍棋的人口一直不斷地成長。然而，世界級的高手目前仍集中在南韓、日本、大陸及
台灣，這與圍棋本身的哲理與東方人的思維模式有關。因此，圍棋不僅只是一項遊戲，它
所具備的棋理知識和棋藝技術，更被視為一門學問。 
 
    圍棋比賽分為佈局、中盤、官子三個階段。佈局階段所著重的不在於地域，而在於「要
點」和「厚勢」，因此，要從大處著手，自然而然地築成「模樣」，並且佔據角隅和邊上的
星位，以作為攻擊的據點。中盤攻防階段需要敏銳的判斷、精確的計算，盤勢瞬息萬變。
官子階段是指雙方經過中局的盤鬥，地域和死活已經大致確定之後，確立競逐邊界的階段。 
 
    電腦圍棋比賽計有台灣應昌棋圍棋教育基金會於 1985 年開始主辦的「應氏杯」、日本
Fusion of Science and Technology Organization 於 1995 年開始主辦的「FOST 杯」、以及歐洲
International Computer Game Association 所主辦的「Computer Olympiad」。應氏杯為第一個
全世界性的電腦圍棋比賽，主要包括兩部分：電腦對電腦比賽和電腦對人腦比賽，並且為
圍棋修訂一套完整的規則，即俗稱的記點制。FOST 杯比賽則採用日本棋院的圍棋規則。目
前兩者均已停辦，僅有 Computer Olympiad 繼續舉辦，而全世界優秀的圍棋程式、九路圍
棋程式每年也都會參與這些重要的國際比賽。 
 
 
1.2 電腦棋類遊戲開局階段的盲點 
 
    人類下棋通常是透過視覺與推理系統，綜觀棋盤上的各種資訊，作為判斷棋勢與分析
棋步優劣的基礎。因此，可說是採用目標導向搜尋的思考方式來下棋，與電腦的窮盡搜尋
大異其趣，是以高段棋士能在短時間內下出漂亮的棋。我們可以藉由擷取大量高段棋士的
棋類經驗知識，摸索人類的思考路徑，進而加以利用以增進電腦棋力。 
 
    電腦圍棋程式的研究，近年來導入類似電腦西洋棋中局搜尋的概念【30】。也就是將全
局盤面分割為數個較小的局部盤面，然後依照各局部盤面的需要進行搜尋。因此，整個過
程從設定棋串、棋鏈、勢力值、和棋塊開始，到棋串死活狀況分析與棋串攻殺搜尋，再重
新設定棋塊反覆地執行搜尋過程，直到盤面狀況穩定為止。 
 
 
 
 3
二、研究目的 
 
九路圍棋的複雜度介於西洋棋和象棋之間。直觀上，電腦象棋的各種技巧，應可應用
於九路圍棋。我們已經具有豐富的電腦圍棋與電腦象棋發展經驗，然而，欲發展電腦九路
圍棋，其中的對局搜尋的理論與觀念，可採用 19 路圍棋的方式。目前已發展出棋力相當優
異的對局程式—GoKing，並於 2005 年 Computer Olympiad 擊敗冠軍程式 Go Intellect 和 Aya
各一盤，可見得在九路圍棋中局部分已具被良好的架構，只要加強測試以增進程式的穩定
性，將可與世界其它一流九路圍棋對局程式相抗衡。 
 
然而，比較九路圍棋與其它相關棋類程式（包括西洋棋、象棋、黑白棋等）的關係，
除了中局程式之外，尚有開局與殘局知識庫的發展，這部分是目前電腦九路圍棋程式所欠
缺的。此外，此過程通常必須藉助圍棋專家們的專家知識來分析並整理棋局，除了費時費
工之外，並無法達到建立足以提供中局對戰使用的龐大知識庫。因此我們可預期，本研究
計畫對於電腦九路圍棋的棋力提升與系統之完整性，將具有顯著且具體的幫助。 
 
    本研究計畫則專門針對九路圍棋的開局部分。基於電腦象棋的發展經驗，僅靠對局程
式搜尋的技巧，棋力約莫兩、三段，若搭配設計良好、內容豐富的開局知識庫，可將棋力
大幅提昇至五段以上。因此，本計畫對於電腦九路圍棋程式的棋力能否更進一步，甚至擊
敗世界一流程式的目標，關係甚大。 
 
 5
1996 年，開始針對特定對手的開局進行記錄與分析，並設法預測對手在開局階段的下
棋模式【17】。1998 年，出現以中局搜尋技巧，自動產生開局資料庫的方法—乃採用 Best First 
Search 策略以及暴力搜尋法（Brute Force Search）來檢視盤面，然後自動將最佳著手加入開
局資料庫【5、8】。 
 
IBM 公司於 1997 年 5 月，運用超級電腦所完成的西洋棋機器「深藍（Deep Blue）」，
以二勝一負三和的戰績，擊敗世界西洋棋棋王 Gary Kasparov，更是人工智慧領域中重要成
就的里程碑【10】。而深藍的開局資料庫分為 Opening Book 和 Extended Book 兩部分【9】。
Opening Book 由四位西洋棋特級大師人工輸入並且維護，因而僅有 4000 盤面（相當於對局
樹的 4000 個節點）。Extended Book 則由特級大師的對局譜所組成的資料庫，從 1991 年至
1997 年對抗西洋棋棋王 Kasparov 期間，總共蒐集了 700,000 局棋譜。由於兩者的盤面數量
差距甚大，因此，在國內欠缺九路圍棋開局知識庫的情況下，亟需急起直追。 
 
對於開局知識庫的使用方式，也就是如何評判著手的優劣方式，Deep Blue 採取以下策
略： 
 
1. 下此著手的次數。 
2. 相同父節點下的節點之間，彼此相對的著手次數。 
3. 棋手本身棋力的高低。 
4. 棋局的對奕時間。 
5. 棋局的對奕勝負結果。 
6. 大師對此棋局的評註（一般而言，妙著標示「!」，劣著標示「?」）。 
7. 對局時所下的著手通常優於評註建議的著手。 
 
 
3.3 圍棋規則 
 
    九路圍棋的規則與十九路圍棋的規則相同，差異僅在棋盤大小，分別採用 9×9 和 19×
19 的棋盤。基本規則如下： 
 
1. 雙方分持黑棋和白棋，由黑棋先下，一人一手輪流落子於棋盤的交叉點上。 
2. 棋子的鄰接點稱為「氣點」，當氣點全被我方棋子佔據時，就可提取對方該顆棋子。 
3. 若有兩個眼的棋塊則吃不掉，而吃不掉的棋塊所圍到的空點就是地域。 
4. 最後勝負取決於棋局終了時，雙方各自佔有之地域，地域多者為勝。 
5. 存在若干禁著（不能下的位置）。 
 
圍棋規則尚存在若干禁著，比如說，禁止自盡，但如果可以提取對方棋子的話則不在
此限。為了避免在某些提子時，雙方互不相讓所造成同型反覆無法解決的情況（圍棋術語
稱之為「打劫」），棋規規定，當打劫發生棋子被提取時，被提取的一方不得馬上提回，必
須間隔一手棋以上才可以再提回。這樣的規定解決了棋局永無休止的問題。 
 
 7
四、研究方法 
 
4.1 資料結構 
 
開局知識庫必須蒐集大量棋局，並加以分析整理。因此，知識庫的架構必須具有容易
擴充的彈性。同時，個別節點的資料結構必須適當，節點間的關係必須緊密，才能有效利
用知識庫的空間。 
 
 
4.1.1 知識庫檔案架構 
 
    九路圍棋以 9x9 的棋盤來擺譜。基於節省空間的使用，我們針對盤面狀態設計了十分
有效率的編碼方式。盤面的點可分為三種狀態：空白（empty 0）、黑子（black 1）和白子（white 
2），分別編碼為 0、1、2。因而建立以 3 為基底的編碼系統，將 9×9 盤面每兩列為一組，
轉換為 5 組唯一對應之長整數。演算法如下： 
 
    long int  board_status = 0; 
    for (i=0; i<5; i++) 
        for (j=0; j<2; j++) 
            for (k=0; k<9; k++) 
                board_status = board_status + board[2*i+j][k] * pow(3, i); 
 
 
棋盤位址如圖 4-1 所示： 
 
 
圖 4-1 九路圍棋棋盤表示 
        
        
        
        
        
        
        
        
99 989796959493 92 91 
89 888786858483 82 81 
79 787776757473 72 71 
69 686766656463 62 61 
59 585756555453 52 51 
49 484746454443 42 41 
39 383736353433 32 31 
29 282726252423 22 21 
19 181716151413 12 11 
 9
    unsigned long int  win_count; /* 勝局數 */ 
    unsigned long int  loss_count; /* 負局數 */ 
    unsigned short int  minimax; /* 盤面評分 */ 
    unsigned short int  h_num; /* 往下節點總數 */ 
  public : 
    function … （略） 
}; 
 
 
4.1.2 雜湊表（Hash Table） 
 
至於儲存知識庫的架構，則使用雜湊技巧，在棋局對奕的過程之中，常常由於手順不
同而產生相同的盤面，例如，兩棋局經過黑方著手 A、白方著手 B、黑方著手 C 和白方著
手 D 所產生的盤面，如果和經由黑方著手 C、白方著手 D、黑方著手 A 和白方著手 B 所產
生的盤面相同，則應該儲存於知識庫的同一位址，而其統計資訊亦需合計。因此，將知識
庫區分為雜湊區（hash area）和溢流區（overflow area）。透過雜湊函數的使用，將盤面狀
態雜湊到某個位址。如果發生碰撞（collision），表示此位址已被別的盤面使用，則透過橫
向鏈結放到溢流區。如圖 4-2 所示。 
 
    考量知識庫結構的強固性，以及便於日後維護、除錯的彈性，我們在每個節點中，將
橫向鏈結設計為雙向鏈結。此外，關於知識庫的統計資料，我們也提供了三類欄位—minimax
分數、往下的節點數和棋局數，並設計合於邏輯的演算法，以確保統計資料的正確性與執
行效率。 
 
 
 
4.2 著手策略之選擇 
 
    藉由大量蒐集棋譜，我們從中擷取有助於著手策略選擇的資訊，主要包含兩部分－
metadata 和統計資訊。Metadata 是指除了棋局紀錄與結果之外的相關資訊，統計資訊則為
本系統以量化方式統計出該著手獲勝的機率。分別於下兩節詳述。 
 
 
4.2.1 Metadata 
 
    每盤棋局 metadata 包括棋局檔案中的專家評註、對奕雙方棋手、先手、比賽結果、棋
書名稱、比賽時間、比賽地點、註解和推薦此棋局之專家…等。我們以下列格式來記錄： 
 
 
 
 
 11
    我們採用 ELO Rating System【34】和棋局記錄中的勝、負局數來衡量棋手九路圍棋的
程度。ELO Rating System 的衡量方式是以 Logistic Curve 來估量棋手的棋力分佈，假設棋
手 A 和 B 的棋力為 RA和 RB，則雙方期望的分數 EA和 EB為： 
 
  
 
雙方新的 Rating RN則為： 
 
 )( ESKRR ON －×+=  
 
其中，S 為勝一局得 1 分、負一局得 0 分，K 為常數。 
 
另外，每位棋手、推薦者、註解者會有 19 路圍棋的段位、級位程度的紀錄。當對奕雙
方均是高段棋士，或是專家推薦、做註解的棋局，就值得特別收集。因此，我們以這兩項
資料作為棋局品質優劣的衡量方式，作為增加該棋局在統計資訊的權重的依據。 
 
 
4.2.2 統計資訊 
 
    我們參考當前西洋棋、象棋對開局知識庫的使用方式，多採用棋局次數作為統計資訊。
我們參考下列棋局資訊： 
 
1. 下此著手的次數。 
2. 棋局的對奕勝負結果。 
3. 棋手本身棋力的高低。 
4. 專家對此棋局的評註（一般而言，妙著標示「!」，劣著標示「?」）。 
5. 棋局的對奕時間。 
 
    由於我們有將棋手資料儲存於資料庫之中，因此，將棋局中的棋手、推薦者、註解者
與之相互參照，便可將棋局依其品質分類。棋力等級分為八等，如表 4-1 所示。 
 
 
 
 
 
 
 
 
 
400101
1
AB RRA
E －
+
=
400101
1
BA RRB
E －
+
=
 13
4.3 九路圍棋伺服器 
 
在本計畫中，我們設計並製作棋局伺服器，用於透過網際網路棋譜編輯，以及蒐集並
增加對局棋譜，然而，在程式寫作上，亦考慮將來可以適用於相關的棋類遊戲，並對愛好
者提供輔助教學之用，因此，我們以模組介面的設計及回呼函式的方式，預留未來相關計
畫的發展空間。 
 
    整個伺服器採用主從式架構，也就是客戶端—伺服端（Client-Server）架構，作為九路
圍棋平台的基本架構。實作上，以 Berkeley Sockets 製作網路介面，提供的功能包括開局知
識庫網路查詢、知識庫節點的資料和統計資訊更新、以及多台伺服器異地進行知識庫備份
功能。整體架構如下圖所示： 
 
 
圖 4-3 伺服器－客戶端架構 
 
 
4.3.1 伺服端架構 
 
    伺服端採用連結導向並行之多伺服器（connection-oriented concurrent multi-servers）架
構【50】，目的在於降低單一伺服器的負荷，並有容錯和異地備援的功能。分為網路介面模
組、使用者資訊模組、以及知識庫管理模組。 
 
    網路介面模組負責伺服器與用戶端的溝通，是採用多執行緒（multi-threads）的伺服器
架構。 
 
 
 15
4.4 知識庫備份系統 
 
    我們以兩台伺服器來儲存知識庫，因此，在不同機器之間保持知識庫的一致性，是維
持知識庫系統穩定的重要因素。 
 
    當兩位高手對奕結束，客戶端自動將棋局記錄傳回伺服端，或是棋友經由打譜提供九
路圍棋知識給予系統，系統必須將棋局儲存於兩個伺服器上的知識庫之內。也就是使用者
將棋局傳送到某個伺服器之後，此伺服器會自動將棋局轉送到其它伺服器上，並進行更新
節點資訊。倘若某伺服器當掉了，則保留棋局並記錄於日誌檔，待重新啟動伺服器時，接
收所有尚未同步更新的資訊。 
 
伺服器啟動後，知識庫管理模組之完整的步驟如下： 
 
    (1) 根據伺服器清單，查詢其它伺服器之日誌檔，向其要求傳送尚未新增之 
 棋局檔案。 
    (2) 接收所有棋局檔案，並更新統計資訊。 
    (3) 通知其它伺服器「此伺服器已啟動」。 
    (4) 開放用戶端連線。 
    (5) 等待用戶端或其它伺服器傳送棋局檔案。 
 
    (6) 若是接收之棋局檔案來自使用者，則根據伺服器清單，將棋局傳送到其 
 它伺服器。如果某伺服器當掉，則記錄於日誌檔並保留棋局。 
       (6-1) 鎖定知識庫。 
       (6-2) 將棋局加入知識庫。 
       (6-3) 解除鎖定知識庫。 
       (6-4) 返回步驟 (5)。 
 
    (7) 若無使用者連線至伺服器 
       (7-1) 選擇上未更新統計資訊之節點。 
       (7-2) 鎖定知識庫。 
       (7-3) 更新統計資訊。 
       (7-4) 解除鎖定知識庫。 
       (7-5) 返回步驟 (5)。 
 17
    除了使用者直接將蒐集之九路圍棋棋譜傳送至伺服器之外，本系統尚提供兩種方式，
方便使用者編輯棋譜。一是直接點選「新增」→「打譜」進入開局知識庫棋譜編輯介面；
另一是使用者可以藉由查詢知識庫的過程，在開局知識庫之查詢介面點選「打譜」，進入編
輯介面。編輯介面提供編輯棋局之相關資訊，然後將棋局傳送至伺服端，加入開局知識庫，
並更新知識庫之統計資訊。如圖 5-3 開局知識庫棋譜編輯介面所示。 
 
 
圖 5-3 開局知識庫棋譜編輯介面 
 
 
    新增棋譜至開局知識庫之後，會以反向 BFS 的方式更新開局知識庫的勝局數、負局數、
往下棋局數等統計資訊，並記錄所有經過的節點，之後再統計每個節點之往下節點總數，
如圖 5-4 所示。 
 
 
圖 5-4 開局知識庫更新統計資訊介面 
 
 
    目前，本計畫蒐集了約 7,000 局九路圍棋棋譜，共建置了約 210,000 個盤面節點。雖然
當前棋譜蒐集不易，然而，由於開局知識庫已經建置完成，假以時日，必當大幅提昇九路
圍棋軟體的整體棋力。 
 19
參考文獻 Reference 
 
【1】 Berliner H. J. (1974).  Chess as Problem Solving: the Development of a  
Tactics Analyzer.  Ph.D. Dissertation, Carnegie-Mellon University, Pittsburgh. 
【2】 Berliner H. J. (1980).  Computer Backgammon.  Scientific American, Vol. 242, No.6, 
pp.64-72. 
【3】 Brown D.J. H. and Dowsey, S (1981).  The Challenge of Go.  New Scientist,pp. 
303-305. 
【4】 Burmeister J. and Wiles J. (1995).  An Introduction to the Computer Go  
Field and Associated Internet Resources Technical Report 339.  Department of 
Computer Science, University of Queensland. 
【5】 Buro M. (1998).  Toward Opening Book Learning.  Games in AI Research,  
pp. 47-54.  ISBN 90-62106416-1. 
【6】 Comer, Douglas E. and Stevens David L. (1998).  Internetworking with  
TCP/IP (3rd ed.).  Pearson Education.  ISBN 0139738436. 
【7】 Kojima T., Ueda K. and Nagano S. (1997).  An Evolutionary Algorithm  
Extended by Ecological Analogy and its Application to the Game of Go.  Preceedings of 
the 15th International Joint Conference on Artificial Intelligence (IJCAI-97), pp. 684-689. 
【8】 Lincke and Tomas R. (2000).  Strategies for the Automatic Construction of  
Opening Books.  Computers and Games 2000 (CG2000), pp. 74-86. 
【9】 Murray Campbell, A. Joseph Hoane Jr., Feng-Hsiung Hsu (2002).  Deep  
Blue.  Artificial Intelligence, pp. 57-83. 
【10】 Newborn, M. (1997).  Kasparov versus Deep Blue: Computer Chess Comes  
of Age.  Springer-Verlag, New York.  ISBN 0-387-94820-1. 
【11】 Newell A., Shaw J.C. and Simon H. A. (1958).  Chess Playing Programs and  
the Problem of Complexity.  IBM Journal of Research and Development, Vol. 4, No. 2, 
pp. 320-335. 
【12】 Papadimitriou C. H. (1994).  Computational Complexity.  Addison-Wesley,  
ISBN 0201530821. 
【13】 Rosin C. (1997).  Co-evolutionary Search Among Adversaries.  Ph. D.  
Dissertation.  University of California, San Diego. 
【14】 Rydberg H. (1999).  Go Rules: Spectral Equivalence and Mathematical  
Models for Computer Go. 
【15】 Shannon, C. E. (1950).  Programming a Computer for Playing Chess.   
Philosophical Magazine, Vol. 41, No. 314, pp. 256-275. 
【16】 Shi-Jim Yen, Jr-Chang Chen, T-N Yang and Shun-Chin Hsu (2004).   
Computer Chinese Chess.  ICGA Journal, Vol. 27, No. 1. March 2004, pp. 3-18, ISSN 
1389-6911. 
【17】Walczak and Steven (1996).  Improving Opening Book Performance  
Through odeling of Chess Opponents.  ACM Conference on Computer Science, pp. 
可供推廣之研發成果資料表 
□ 可申請專利  █ 可技術移轉                                    日期：97 年 10 月 25 日 
國科會補助計畫 
計畫名稱：電腦九路圍棋開局知識庫之設計與製作 
計畫主持人：陳志昌 助理教授 
計畫編號：95-2221-E-033-099-MY2  學門領域：人工智慧 
技術/創作名稱 電腦九路圍棋開局知識庫之設計與製作 
發明人/創作人 陳志昌 助理教授 
本研究計畫設計並製作一個基於主從式網路架構，具備知識蒐
集、分析與整理的電腦九路圍棋開局知識庫系統。而此系統正是目
前國內電腦九路圍棋程式所欠缺的。本計畫建置九路圍棋知識庫的
相關系統，並且設計盤面優劣評量機制，調整並修正系統之著手選
擇策略。然後，設計一個透過網際網路大量蒐集棋譜的九路圍棋網
路平台，以及知識庫備份系統，藉由大量加入棋局、棋譜，來調整
系統參數、增進系統的效能。 
技術說明 This project is to design and implement a 9*9 Go opening 
knowledge-based system, which is lacked among the programs in 
Taiwan.  The system is based on the client-server structure, and will 
collect and analyze game records from chess books and the Internet. 
In this project, we design an opening database, design the evaluation 
mechanism, and adjust the strategy of the move selection.  Then, a 
network platform for 9x9 Go and a backup system for collecting game 
records massively are constructed.  And therefore, the parameters will 
be tuned for choosing the best move, and the efficiency of the system 
will be improved. 
可利用之產業 
及 
可開發之產品 
遊戲軟體開發、棋奕網站設計公司 
技術特點 九路圍棋開局知識庫、資料庫系統、伺服端－客戶端系統設計 
推廣及運用的價值 1. 擴充為九路圍棋開局教學系統 2. 提供對局搜尋程式使用 
※ 1.每項研發成果請填寫一式二份，一份隨成果報告送繳本會，一份送 貴單位
研發成果推廣單位（如技術移轉中心）。 
※ 2.本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。 
※ 3.本表若不敷使用，請自行影印使用。 
4. A Framework for Accessing Usage of Web-Based e-Learning System 
Chien-Chung Chan 
 
5. A System for Mining Generalized Association Rules with Ontology Using Genetic 
Networking Program 
Guangfei Yang, Kaoru Shimada, Shingo Mabu, Kotaro Hirasawa, and Jinglu Hu 
 
 
 
 
2. Go Game Record Information Retrieval 
System 
The goal of this work was to develop an efficient Go 
game record information retrieval system that uses the 
proposed indexing structure. Figure 1 shows the system 
framework. Ability to process both pattern and text 
queries is a critical feature of the system, as it allows 
users to search information with more query forms. For 
example, a user may wants to identify the winning rate 
when a specific player uses a specific opening pattern, by 
sending a query contenting player name, result, and the 
opening pattern. The related game records will output, 
and the winning rate can be then be computed. It is 
practicable for the system to execute a pattern query with 
a logical operation such as and, or, not, etc. The 
proposed structure increases the speed of these 
operations. 
 
Fig. 1. Go game record information retrieval system. 
Figure 2 presents the procedure and major 
components of the proposed system. This approach is 
based on a sequential matching algorithm, which is used 
when construction the database and during searching. In 
addition to the searching algorithm, two principal factors 
affect system performance: feature patterns, and a feature 
tree.
 
 
Fig. 2. Constructing an index structure. 
 
3. A Go pattern matching algorithm 
Before pattern matching, each game board and n×m 
query pattern is transformed into a 19×19 array and an 
n×m array, respectively. Each item in an array is 
represented by 3 bits. For example, Figure 3 shows a 5×5 
query patterns. Each position denoted by A, B and C can 
be a black stone or empty. Three bits are used to express 
four possible states at every intersection. Bit 1 indicates 
that this point could be empty or not; bit 2 signifies that 
this point could be black stone or not; bit 3 denotes that 
this point could be white stone or not. Each number in 
the array is generated from 3 bits. For example, a number 
3 in the array means that its relative binary number is 
011, indicating that this point could be black stone or 
empty. 
 
   
Fig. 3. Format of a query pattern. 
The KMP string matching algorithm avoids 
unnecessary matching. [10] However, the KMP 
algorithm is a one-dimensional string matching 
algorithm. Hence, a 2-D pattern should be regarded as a 
set of 1-D patterns. The Go pattern matching algorithm is 
processed along following steps. 
 
Step1. Choose one row from the query pattern. 
This row is considered as a row pattern. It is 
a 1-D pattern and suitable for the KMP 
algorithm. Row patterns in the set are ranked 
according to the following criteria: 
 
State:  Choose the row pattern with a 
fixed state. (Patterns may contain elements 
with unfixed state. If each row pattern 
contains unfixed state, then we have to 
generate all possible row patterns. For 
example, a row pattern 14131 will be turning 
it into 14111 and 14121. Because 3 means 
that point can be 1 (empty) or 2 (black) in the 
data structure of patterns.) 
 
Length: If there are more than one fixed 
state row pattern, choose the longest row 
pattern. If the row patterns have the same 
length, then choose the row pattern with the 
highest degree of repetition. That is, 
frequencies of the same substring appearing 
in the pattern. The prefix function of the 
KMP algorithm contains this information.  
 
Step2. Search the row pattern obtained in step 1 on 
the board (row by row) by using the KMP 
algorithm. 
11111 
14131 
21113 
14131 
11111  
