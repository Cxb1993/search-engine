2 
 
中文摘要 
 
我們針對三維模型提出一個有效、高容量的浮水印
方法。我們首先使用表示方法對三維模型來嵌入秘
密訊息。我們的方法成功的結合空間域與表示域技
術。在空間域中，每個三維模型的頂點至少可以使
用 MMLEP 方法遷入 3 個位元秘密訊息。在表示域
中，對於頂點、多面體與多面體拓樸的表示方式，
合計我們可以嵌入至少 6 個位元的秘密訊息。實驗
結果顯示我們的方法極具效率性，具有高容量，低
模型變形度，可以抵抗旋轉、平移、縮放等攻擊。
我們的方法可以證實可以成功的實現在三維模型的
浮水印應用。 
 
關鍵字：浮水印、三維模型、空間域、表示域、資
訊隱藏、偽裝學 
 
Abstract 
 
We present a high-capacity steganographic 
approach for three-dimensional (3D) polygonal 
meshes. It is based on a substitutive blind procedure. 
We first use the representation information of a 3D 
model to embed messages. Our approach successfully 
combines both the spatial domain and the 
representation domain for steganography. In the 
spatial domain, every vertex of a 3D polygonal mesh 
can be represented by at least three bits using a 
Modified Multi-Level Embed Procedure (MMLEP). In 
the representation domain, the representation order of 
vertices and polygons, and even the topology 
information of polygons, can be represented with an 
average of six bits per vertex using the proposed 
Representation Rearrangement Procedure (RRP). 
Experimental results show that the proposed technique 
is efficient and secure, has high capacity and low 
distortion, and is robust against affine transformations. 
Our technique is a feasible alternative to other 
steganographic approaches. 
 
Keywords: Watermarking, three-dimensional models, 
spatial domain, representation domain, information 
hiding, steganography 
 
1. Introduction 
 
Steganography, or information hiding, is the art of 
communicating in a way which hides the existence of 
the communication. Compared with watermarking, 
which is a process for protecting copyright ownership, 
steganography is a technique that conceals messages 
inside other harmless media in a way that does not 
allow any enemy to even detect that there is a second 
secret message present. Steganography algorithms tend 
to require security, high capacity, and low distortion, 
but they can lead to relatively poor robustness [1], [2], 
[3], [4]. Performance is also an important trade-off 
attribute, especially when trying to recover hidden 
messages [5]. 
In computer-based steganography, images, audio 
files, documents, and even three-dimensional (3D) 
models may all serve as innocuous-looking hosts for 
secret messages. With the development of various 3D 
applications and computer animation, many 
steganography and watermarking schemes have been 
presented for 3D models. Unfortunately, most of the 
steganographic methods provide poor capacity. 
Because of the natural differences between 3D 
polygonal models and traditional cover media, such as 
2D images, traditional schemes of steganography are 
not very well suited to 3D polygon files. Finding a way 
to fully exploit the features of 3D polygonal models is 
an important research issue. 
This paper presents a high-capacity steganographic 
approach for 3D polygonal meshes, inspired by the 
concepts proposed by [4], [6]. We first use a Modified 
Multi-Level Embed Procedure (MMLEP) that can 
embed at least three bits per vertex with little visual 
distortion. Furthermore, we propose a new 
Representation Rearrangement Procedure (RRP) based 
on the representation domain to achieve the higher 
capacity with no visual distortion. To the best of our 
knowledge, this is the first 3D polygon model 
steganographic approach that can use the 
representation information to embed messages. This 
procedure efficiently increases the capacity from three 
fixed bits to around nine bits per vertex depending on 
the number of vertices and polygons of a model; this 
increases capacity about 200% compared to [4]. Our 
scheme is simple and can achieve high capacity with 
little or no visual distortion. In addition, a secret key is 
used on the embedding sequence lists for more security. 
Similar to previous 3D steganographic methods, our 
approach is robust against affine transformations 
(which include translation, rotation, uniform scaling, or 
their combined operations). Experimental results show 
significant improvements in terms of capacity with 
respect to the most recent, advanced technique, that of 
Wang and Cheng [4]. 
4 
the traversal lists is also rearranged according to the 
binary symbol it has to convey. Next, the topology 
information of every message set, which is combined 
by two triangles, is modified or not according to the 
binary symbol it has to convey. Finally, the resulting 
stego model is obtained after the embedding step. 
During extraction, the following steps are performed. 
The embedded model is analyzed using the PCA 
technique in the preprocessing step. Then, the traversal 
list of triangles and vertices in the stego model is 
established. Finally, the message is extracted using a 
Modified Multi-Level Embed Procedure (MMLEP) 
and Representation Rearrangement Procedure (RRP).  
Figure 1. An overview of the proposed approach. 
 
3.1. Information embedding 
 
The embedding procedure of our steganographic 
system proceeds in multiple steps as described in the 
next subsections. 
 
3.1.1. Preprocessing. Principal component analysis 
(PCA) determines the initial polygon and the initial 
vertex; it gives three principal axes centered on the 
centroid of the model, whose intersections with the 
mesh lead to a small number of possible initial 
polygons. In addition, we let the first vertex of the 
largest edge of the initial triangle be the initial vertex. 
The next vertex of the list is in counter-clockwise order 
of the initial triangle, and so on.  
 
3.1.2. Traversal List. To embed information, we must 
first choose the traversal list of the triangles and their 
vertices. Here, we use a hierarchical kd-tree, triangle 
neighbor table, and advanced jump strategy to 
efficiently select the next triangles in the list depending 
on the bit value of the binary pseudo-noise sequence 
generator [4]. If the bit value is “0”, then the next 
triangle is the first one of the initial triangle in 
counter-clockwise order; otherwise, the next triangle is 
the second one in counter-clockwise order. 
Furthermore, the next vertices in the list are selected 
depending on the list of triangles. Since the next 
triangle always has at most one untraversal vertex, we 
simply select every untraversal vertex of the triangle in 
the list and skip the vertex which has been traced 
before, without considering the vertex for embedding 
or decoding. 
In short, these strategies effectively create one 
traversal list of triangles and one traversal list of 
vertices. Furthermore, both traversal lists are 
geometrically invariant; they are robust against affine 
transformations. Once both traversal lists are ready, we 
can begin to embed the information. Since all 
procedures of the algorithm are symmetrical, we can 
easily maintain both traversal lists in both the 
embedding and extracting procedures. 
 
3.1.3. Modified Multi-Level Embedding Procedure 
(MMLEP). First, we consider every vertex of a 
triangle as a message vertex. To embed information in 
every vertex, we use a Modified Multi-Level 
Embedding Procedure (MMLEP), which includes 
Sliding, Extending, and Arching. In MMLEP, we 
embed the information by modifying the message 
vertex based on geometrical properties; it guides the 
change of the position of the orthogonal projection of 
the message vertex on the bottom edge, height of the 
triangle, and arc length of the virtual circle. 
In the sliding level, we let the summit vertex of a 
triangle be a message vertex Vm. Each virtual triangle is 
treated as a two-state geometrical object. The position 
of the orthogonal projection of the Vm on the bottom 
edge VaVb is denoted as Ps. Extending the QIM concept 
to triangles, the VaVb interval is divided into two sets, 
and both sets have αs subsets. If Vs∈B0, then we 
consider the triangle is in a ‘0’ state; otherwise, Vs∈B1, 
and the triangle is in a ‘1’ state (see Figure 2). The 
shifting of Vm to Vm' is a symmetry across the closest 
axis orthogonal to VaVb that intersects the border of the 
Figure 2. Sliding level of the MMLEP. 
B1 B0 
Va Vb Vs' Vs 
α α 
2α Vm Vm' 
bottom edge
Cover Model 
Message 
Stego Model 
Embedding Procedure Extraction Procedure
Message 
Stego Model 
Preprocessing 
Traversal List 
MMLEP 
Sliding 
Extending 
Rotating 
RRP 
Vertex Order Rearrangement 
Polygon Order Rearrangement 
Polygon Indexes 
Preprocessing 
Traversal List 
MMLEP 
Sliding 
Extending 
Rotating 
RRP 
Vertex Order Rearrangement 
Polygon Order Rearrangement 
Polygon Indexes 
6 
algorithms. In this way, reversibility is only granted to 
the holder of the recovery key and the secret key. 
 
3.1.4. Representation Rearrangement Procedure 
(RRP). As mentioned previously, the main benefit of 
using the representation information of 3D polygon 
models to embed messages is that the stego model still 
preserves perfect visualization, which means it looks 
exactly the same as the original model. Consequently, 
we first propose a Representation Rearrangement 
Procedure (RRP), which includes Vertex Order 
Rearrangement, Polygon Order Rearrangement, and 
Polygon Indexes Rearrangement, to embed messages 
in the representation domain. In RRP, we embed 
messages by modifying the vertex representation order, 
the polygon representation order, and even the 
topology information of polygons, with respect to the 
traversal orders. Our scheme is simple and can achieve 
high capacity without any visual distortion. 
Three-dimensional polygon models generally 
include topology connectivity information and 
Cartesian coordinate geometry (x, y, z). The geometry 
is defined with three vectors x, y, z that assign 3D 
Cartesian coordinates to every vertex. Furthermore, the 
mesh is composed of the geometry defined over the 
arbitrary connectivity. One can also add other attributes 
to the model like texture coordinates, color, local 
refraction, etc. However, processing of such data is out 
of the scope of this work. Although our approach can 
directly be extended to process such data to achieve 
higher capacity, here we only focus on embedding 
messages by modifying the representation of the most 
necessary vertices and polygons. 
In fact, we propose an “iterative dynamic reassignment 
conveyed message algorithm” to achieve higher 
capacity. To solve this problem, we use the so-called 
global localization technique. The purpose of such a 
technique is to explicitly embed the value of the 
message bit based on a specific traversal order for its 
number. In particular, we embed message values (bits) 
through a vertex representation order rearrangement 
approach with the assistance of the iterative dynamic 
reassignment conveyed message algorithm, along the 
traversal list of the vertices. The message number, 
however, is represented through another geometrical 
invariant, which is the traversal order of the vertices; in 
this way we can reverse affine transformations 
correctly. This approach can exactly embed (V-1) bits; 
it does not need to include any additional overhead, 
which is the information of the number of bits to be 
retrieved. Consequently, we efficiently use the most 
vertices representation to embed messages to achieve 
higher capacity. 
The pseudo code in Figure 6 shows how our 
algorithm can more efficiently use the most vertices 
 
Figure 5. A simple example of the vertex 
representation order rearrangement approach. 
 
representation to embed message. The state of every 
vertex representation order no longer represents a fixed 
‘0’ or ‘1’ state. That is, the state is not decided by the 
order of the numbers, only whether the order is 
represented by an even or an odd number. We prefer to 
use a dynamic reassignment procedure to decide the 
state of every vertex representation order. Every 
representation order of vertices can represent a ‘0’ or 
‘1’ state with respect to the combination of the 
traversal order, the representation order, and even the 
message. Initially, we first set half of the vertex 
representation orders to ‘1’ state, and the remaining 
representation orders are set to ‘0’ state. In fact, the 
initial state is identical to the abovementioned simple  
 
procedure IDRCM (VertexRepresentation (VR), 
TraversalOrder (TO)) 
# initial parameters 
State0Num = / 2V⎡ ⎤⎢ ⎥ ;   //V: number of vertices 
State1Num = / 2V⎢ ⎥⎣ ⎦ ; 
Assign ‘0’/’1’ state to every representation order; 
for (n=0 ; (State0Num + State1Num) > 1 ; ) 
if (State0Num = 0 or State1Num = 0) then 
# reassign parameters 
Remained(R) = State0Num + State1Num; 
State0Num = / 2R⎡ ⎤⎢ ⎥ ; 
State1Num = / 2R⎢ ⎥⎣ ⎦ ; 
Reassign ‘0’/’1’ state to every remained 
order 
rearrangement 
read message 
Stego 
Representation 
order coordinate
0 xT0, yT0, zT0
1 xT2, yT2, zT2
2 xT1, yT1, zT1
3  
4 xT3, yT3, zT3
  
  
  
n  
 
Message 
M0 M1 M2 M3   Mn-1 
0 0 1 0   1 
Original 
Representation 
order coordinate
0 x0, y0, z0
1 x1, y1, z1
2 x2, y2, z2
3 x3, y3, z3
  
  
  
n xn, yn, zn
Traversal 
order
T0
T1
T2
T3
 
 
 
Tn
8 
set by modifying the index representation of both 
triangles. Which eight patterns of the nine 
combinations of a message set should be used to 
represent three bits of message was selected with a 
secret key. The capacity of this approach is defined as 
MPIR, and simply stated by equation 12. 
3 mod 2
2PIR
PM P⎢ ⎥= × +⎢ ⎥⎣ ⎦
 (12)
In other words, we can embed around (3V) bits, 
namely three bits per vertex, by modifying the 
topology information of the messages set without 
creating any visual distortion. 
Since the vertex order rearrangement changes the 
index number of vertices, we first need to embed a 
message by vertex order rearrangement; we then 
embed successive messages by polygon order 
rearrangement. Finally, the remaining message is 
embedded by polygon indexes rearrangement. In sum, 
the proposed approach, which includes MMLEP and 
RRP, is simple and can achieve high capacity with little 
visual distortion. Let M be the maximal number of bits 
actually embedded. The full capacity of our approach 
can be simply stated by equation 13.  
3 ( 3) 2 ( 1) ( 1) 3 mod2
2
PM s V s V P P⎢ ⎥= × × − + × + − + − + × +⎢ ⎥⎣ ⎦ (13)
Consequently, our approach can embed around nine 
bits per vertex based on both the spatial domain and 
the representation domain. 
 
3.2. Information extracting 
 
Since all procedures of the approach are 
symmetrical, we can easily extract the message using 
the method mentioned above if we have the help of the 
secret key.  
 
4. Experimental results 
 
We implemented the proposed technique using C++ 
programming language. The 3D models use the IEEE 
single precision standard for coordinate precision, 
which provides a precision of 6 decimal digits [24]. We 
also performed experiments to validate the feasibility 
of our approach. Results were collected on a personal 
computer with an Intel Pentium IV 2.4GHz processor 
and 512 MB memory.  
In this paper, one of our main goals is capacity. We 
assume no robustness requirements, except basic trivial 
operations of 3D models such as affine transformations, 
which include translation, rotation, uniform scaling, or 
their combined operations. For simplicity, we only hide 
three bits per vertex in the spatial domain using the 
MMLEP. Nevertheless, it is possible for our method to 
hide a message with a capacity of more than three bits 
per vertex; this depends on the data representation 
precision. Furthermore, we also first use the RRP to 
modify the representation information to embed an 
average of six bits per vertex in the representation 
domain.  
Here, we give some of the results that we obtained. 
Model details, distortion, and processing time are 
detailed in Table 1. In a still image, a simple measure is 
used for distortion: the signal-to-noise ratio (SNR). 
This measure is dedicated to regularly sampled signals, 
which is not the case with 3D models. Some proposals 
have been made for 3D polygonal models based on the 
Hausdorff distance [25], [26] and some others to 
handle meshes with different topologies [27]. For our 
purpose, we use the normalized Hausdorff distance, 
which here is given in percentage of the bounding box, 
to evaluate the distortion induced by the embedding 
process for 3D polygonal meshes. Table 1 
demonstrates that our approach works well in 3D 
polygonal meshes. As expected, no errors are found in 
the recovered messages. The normalized Hausdorff 
distances are small, indicating little distortion in 
quality for the stego models. As a result, we exploit the 
features of 3D models more: every vertex of a 3D 
polygonal meshes can now be treated as a message 
point, and each vertex can be represented by at least 
three bits in three dimensional space; in addition, the 
representation order of vertices and polygons, and even 
the topology information of message sets, can also be 
represented by an average of six bits per vertex in the 
representation domain. Furthermore, embedded 
messages using the representation information do not 
distort the visualization of a model, which means the 
model still appears exactly the same. Visual results of 
the cover and stego models are shown in Figure 8 and 
Figure 9. The normalized Hausdorff distances and 
visual appearance of images show insignificant 
distortion for the models. 
From the security point of view, there are three 
challenges for an attacker: finding the initial triangle 
and the initial vertex of the model; getting the traversal 
lists over the model with secret key; and obtaining the 
p value of PRNS, αs, βr and γr. Just by looking at these 
issues, it is clear that our scheme is secure in the 
cryptographic sense. It is resistant against exhaustive 
search. Retrieving the message without the key is 
virtually impossible. This problem is NP-hard with 
respect to the number of vertices in the model. 
Moreover, we embed the message in an 
undeterministic way, which makes any steganalysis 
difficult or impossible [28], [29]. 
We estimate the complexity of our algorithm by 
giving execution times for various models, as shown in 
Table 1. Clearly, the time cost of our approach is very 
low, despite the embedding and extracting processes. 
10 
[10] R. Ohbuchi, S. Takahashi, T. Miyasawa, and A. 
Mukaiyama, “Watermarking 3D Polygonal Meshes in the 
Mesh Spectral Domain”, in Proc. Graphics Interface, pp. 
9-17, 2001. 
[11] R. Ohbuchi, A. Mukaiyama, and S. Takahashi, “A 
Frequency-Domain Approach to Watermarking 3D Shapes”, 
Computer Graphics Forum, 21: 3, pp. 373-382, 2002. 
[12] N. Aspert, E. Drelie, Y. Maret, and T. Ebrahimi, 
“Steganography for Three-Dimensional Polygonal Meshes”, 
in Proc. SPIE 47th Annual Meeting, pp. 705-708, 2002. 
[13] D. Cotting, T. Weyrich, M. Pauly, and M. Gross, 
“Robust Watermarking of Point-Sampled Geometry”, in 
Proc. International Conference on Shape Modeling and 
Applications, pp. 233-242, 2004. 
[14] Y. Maret, and T. Ebrahimi, “Data Hiding on 3D 
Polygonal Meshes”, In Proc. Multimedia and Security 
Workshop, pp. 68-74, 2004. 
[15] R. Ohbuchi, H. Mazuda, and M. Aono, “Watermarking 
Three-Dimensional Polygonal Models”, in Proc. ACM 
Multimedia, pp. 261-272, 1997. 
[16] R. Ohbuchi, H. Masuda, and M. Aono, “Watermarking 
Three-Dimensional Polygonal Models Through Geometric 
and Topological Modifications”, IEEE Journal on Selected 
Areas in Communications, 16: 4, pp. 551-560, 1998. 
[17] S. Zafeiriou, A. Tefas, and I. Pitas, “Blind Robust 
Watermarking Schemes for Copyright Protection of 3D Mesh 
Objects”, IEEE Trans. Visualization and Computer Graphics, 
11: 5, pp. 596-607, 2005. 
[18] A.C. Rencher, Methods of Multivariate Analysis, 2nd 
ed., Wiley, New York, 2002. 
[19] M. Deering, “Geometry Compression”, in Proc. 
SIGGRAPH, pp. 13-20, 1995.  
[20] E. M. Arkin, M. Held, J. S. B. Mitchell, and S. Skiena, 
“Hamiltonian Triangulations for Fast Rendering”, Visual 
Computer, 12: 9, pp. 429-444, 1996. 
[21] F. Evans, S. S. Skiena, and A. Varshney, “Optimizing 
Triangle Strips for Fast Rendering”, in Proc. IEEE 
Visualization, pp. 319-326, 1996. 
[22] M. Chow, “Optimized Geometry Compression for 
Real-Time Rendering”, in Proc. IEEE Visualization, pp. 
347-354, 1997. 
[23] X. Xiang, M. Held, and J. Mitchell, “Fast and Efficient 
Stripification of Polygonal Surface Models”, in Proc. ACM 
Symposium on Interactive 3D Graphics, pp. 71-78, 1999.  
[24] M. Arnold, M. Schmucker, and S. D. Wolthusen, 
Techniques and Applications of Digital Watermarking and 
Content Protection, Artech House, Boston, London, 2003. 
[25] P. Cignoni, C. Rocchini, and R. Scopigno, “Metro: 
Measuring Error on Simplified Surfaces”, Computer 
Graphics Forum, 17: 2, pp. 167-174, 1998. 
[26] N. Aspert, D. Santa-Cruz, and T. Ebrahimi, “MESH: 
Measuring Error between Surfaces Using the Hausdorff 
Distance”, In Proc. IEEE International Conference on 
Multimedia and Expo, pp. 705-708, 2002. 
[27] Z. Karni, and C. Gotsman, “Spectral Compression of 
Mesh Geometry”, in Proc. SIGGRAPH, pp. 279-286, 2000. 
[28] C. Cachin, “An Information-Theoretic Model for 
Steganography”, In Proc. Information Hiding Workshop, pp. 
306-318, 1998. 
[29] J. Zollner, H. Federrath, H. Klimant, A. Pfitzmann, R. 
Piotraschke, A. Westfeld, G. Wicke, and G. Wolf, “Modeling 
the Security of Steganographic Systems”, In Proc. 
Information Hiding Workshop, pp. 345-355, 1998. 
 
 
 
  
cover model stego model cover stego 
Figure 8. The cover and stego model of the teeth model. For a better comparison, we show the close-up views.  
 
 
 
 
 
