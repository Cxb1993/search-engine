Date：10/31/2007
2
內容
英文摘要................................................................................................................................................................. 3
中文摘要................................................................................................................................................................. 4
關鍵詞..................................................................................................................................................................... 4
第一章 前言........................................................................................................................................................... 5
第二章 MODIFIED SPIHT ................................................................................................................................. 6
第三章 MODIFIED SPIHT 的硬體架構 .......................................................................................................... 12
3.1 編碼器的硬體架構............................................................................................................................ 12
3.2 MODIFIED SPIHT 編碼器的硬體設計............................................................................................... 15
第四章結論........................................................................................................................................................... 18
參考文獻............................................................................................................................................................... 18
APPENDIX I ....................................................................................................................................................... 20
APPENDIX II ...................................................................................................................................................... 22
Date：10/31/2007
4
中文摘要
數位影像壓縮是多媒體核心技術之一，應用也越來越廣泛，從個人數位相機，到家
體或公司視訊監控傳輸，甚至到衛星、醫學影像處理等，都需要數位影像壓縮。為了能
在裝置上加速的產生壓縮結果，壓縮技術都往晶片實現發展，因此硬體成本與壓縮品質
兼顧已為目前注意的課題之一。目前影像壓縮的新規格為 JPEG2000，其中使用到
EBCOT 的演算法，但基本上，EBCOT 的演算法複雜度高，SPIHT 編碼法已被證明其壓
縮效能比 EZW 壓縮法好很多，與 EBCOT 壓縮法相當接近。除了影像品質外，SPIHT
皆可達到 EBCOT 的優點，如果沒有外加其他算數編碼技術，此演算法是完全不需要外
加紀錄編碼用的表格，換句話說，SPIHT 可達到低成本與高效能的結果。因此，本計畫
的目的主要是在於發展一以小波轉換為基礎的快速 SPIHT 編碼法，並將整個編碼系統實
作成硬體。在快速 SPIHT 編碼法中，將由原始 SPIHT 編碼法為基礎，發展出適合硬體
實作的編碼法，其出發點在於原始 SPIHT 編碼法中有兩個因素，在硬體實作上有較高的
複雜度與困難度，第一點為此演算法是以二維的樹狀結構表示並搜尋，第二點為此演算
法是以動態的方式調整其編碼次序，然而一維的資料型態是硬體主要的存取方式，而固
定順序的處理模式更是硬體加速的主要因素。因此新發展的演算法將以此兩點為改善目
標，以實作出快速且小面積的 SPIHT 編碼硬體。目前已經證明可以達成低成本與高效能
的結果，並已經完成硬體的實作。
關鍵詞
Multimedia Communication、Discrete wavelet transform、JPEG2000、EBCOT、SPIHT、
Digital IC design
Date：10/31/2007
6
基于以上所述報告，一個適合硬體實作的 Modifed SPIHT 將被提出在此報告書中。
利用特別的排序方式，小波係數可以被儲存在一個一維記憶陣列中。搜尋每個係數的子
孫變得非常簡單。而且，而不是使用動態的鏈結串列的方式，而是使用固定尺寸的表格
取代上述的三種表格來完成運算。這些表格的資料互換是不需要貯存座標的，並且只需
更新特別功能儲存在表中的值。對此三種目錄的內容的檢查變得非常便利。總而言之，
透過此 Modified SPIHT，整體的編碼的程序變得更簡化和有效率。唯一的缺點是平均
PSNR 比原始的 SPIHT 演算法降低大約 0.2 分貝。VLSI 實作 Modified SPIHT 的硬體架
構可以以 100-MHz 的工作頻率編碼至少每秒 30 個 CIF 畫面(352x 288) 4︰2︰0 的影像。
全部的硬體面積只有 2950 和 4kb 的內部記憶體以儲存這些表格與小波係數，此實作是
用 TSMC 0.35-μm的製程技術。因為 SPIHT 能不僅被用於圖像壓縮，更可以應用於聲頻
和視訊壓縮 [23-25]。在一個本報告所提出的硬體模組下，同時處理視訊與音訊位元串
流是可行的。
這篇報告書將說明本實驗所提出的 Modified SPIHT 在第二章。並且其實做的電路將
詳細的說明在第三章。
第二章 Modified SPIHT
目前階層樹分割編碼俱有演算法精簡和壓縮效能佳的優點，但是要應用在矽晶片的
設計上仍有一些缺點。
第一點，小波係數是以二維的形式存放。在演算法中，搜尋子代係數的動作很頻繁，
必須另外設計一個位址計算電路，而且這個電路也需要耗費時脈週期來計算。
第二點，三個用來儲存座標的表格 LIP、LSP、LIS 也需要耗費大量的記憶體來設計。
假設影像大小為 NN ，LIP 和 LSP 各自需要的記憶體空間為 )(log2 NNNN  ，LIS
所需要的記憶體空間為  24/log)4/( 2  NNNN 。三個表格加起來的記憶體空間比
儲存影像所需要的記體空間還要多。
第三點，三個表格的存取適合用 Linking List 的方法實現，因為表格中的座標經常需
要執行插入及刪除的動作。而 Linking List 用任何高階語言實現不會造成困難，因為一
般用途的電腦所用的作業系統都有記憶體管理機制。
Date：10/31/2007
8
圖二 重新排列後的小波係數
從上面的觀察中可以得到一個結論：如果在執行搜尋子代係數的動作時，被搜尋的
子代係數位址如果都是相鄰的位址，可以節省很多的決策判斷。因此，只要找到一種新
的排列方式能將相關的子代係數排列在一起，搜尋子代位址時只要每次將位址加一即
可。假設 yx, 是 16 乘 16 影像的二維座標表示法，儲存在一維記憶體時，位址的換算
公式如下:
xyS  16 (2.5)
圖三是將 S 用二進位表示法表示出來的結果，將 S 的每個位元依照圖一的排列方式
重新排列後可以得到 T。S 和 T 之間的轉換在硬體設計時只要透過線路重新排列就可完
成。圖二是從 T 的觀點來觀察 S 所對應的小波係數。
圖三 原本座標的位元排列方式 S 圖四 新座標的位元排列方式 T
下列公式是在 T 觀點下的直接子代計算公式：
200 PD (2.23)
 1201 PD (2.24)
  2202 PD (2.25)
 3203 PD (2.26)
從 T 的觀點來看，同一層的小波係數位址都是連接在一起，下一層的小波係數位址
只要左移二個位元就可求得。舉例來說，如果我們要搜尋位址 005 的所有係數，它的直
接子代位址為 020~023，第二層子代位址為 080~095。在設計硬體時只需加一器和移位
器，因此決策電路只要決定何時使用移位器即可。
Date：10/31/2007
10
1. Initialization step:
 Output  )max(log
02 iNi
cn

 ;
 Set 0)(
0

 Ni
iLSP ;
 Set 1)( 
Hi
iLIP , and others set to 0;
 Set '')( AiLIS
sdescendantwithi


, and others set to 0
 Set )(HMaxMaxLIP , )(HMaxMaxLIS  , 0MaxLSP
2. Refinement pass:
2.1) For MaxLSPi0
 If 1)( iLSP then
 Output the n-th most significant bit of ic
 Else if 2)( iLSP then
 Set 1)( iLSP
3. Sorting pass:
3.1) For MaxLIPi0
 If 1)( iLIP then
 Output ))((iSn
 If 1))(( iSn then
 Output sign of ic
 Set 2)( iLSP , ),( MaxLSPiMaxMaxLSP 
 Set 0)( iLIP
3.2) For MaxLISi0
 If '')( AiLIS  then
 Output ))(( iDS n
 If 1))(( iDS n then
 For )32()2(  iji
 Output ))(( jSn
 If 1))(( jSn then
 Set 2)( jLSP , ),( MaxLSPiMaxMaxLSP
 Output the sign of jc
 Else
 Set 1)( jLIP , ),( MaxLIPiMaxMaxLIP 
 If Ni  )4( then
 Set '')( BiLIS  , ),( MaxLISiMaxMaxLIS 
 Else
 Set 0)( iLIS
 If '')( BiLIS  then
 Output ))(( iLSn
 If 1))(( iLSn then
 For )32()2(  iji
 Set '')( AjLIS 
Date：10/31/2007
12
一維型態，能有效地適合硬體實作。並在建立壓縮樹中，若是可以固定其壓縮樹的建立
程序，而不再是原 SPIHT 的動態建立壓縮樹，結合適當的修改，應當能在保持影像品質
的條件下，增加硬體實作的優勢，並且發展撰寫以 DWT 為基礎的 Modified SPIHT 的編
解碼程式。接下來我們將詳述 Modified SPIHT 編碼法語 DWT 實作出整體壓縮系統的硬
體，應該可以對數位相機產業提出一套更有利的解決方案。
第三章 Modified SPIHT 的硬體架構
在這篇文章裡，以 16x 16 大小的影像區塊當作一個設計例子。不同區塊大小的硬體
實作可以容易被延伸。編碼器的架構包括一個核心運算模件，一個系統控制器，兩個位
址轉換器，兩個內部緩衝記憶體。如圖五所示。
圖七 本報告所提出的 SPIHT 硬體架構
3.1 編碼器的硬體架構
所提出的編碼器是視為主要 CPU 的周邊 IC。記憶映轉輸入輸出是被採用在此硬體
架構裡以處理輸入輸出。編碼器與內部記憶體公同分享記憶體位址空間並顯示在表二。
Table II. 編碼器硬體架構的定址空間
Address Usage
x000 ~ x0ff The Wavelet Coefficient
x100 ~ x1ff The Output Bit-Stream
Date：10/31/2007
14
圖十 資料選擇器 1
第一個本地端記憶體的資料數據被選用在如圖 8 的電路上，同樣地，產出的 3 個資
料來源的數據選擇透過圖 9 的電路。
圖十 資料選擇器 2
Date：10/31/2007
16
圖十二 基於小波轉會的壓縮流程圖
全部 16 x 16 的區塊平均需要的時鐘週期於表格 III 顯示，而平均每個 PSNR 的停止
階段於表格 IV 顯示。舉例來說，當停止階段為 0 時，一個 16x 16 的區塊所需要的時脈
週期是 5530，且平均為 49.69 分貝，如果所要求的的品質更低，編碼速度將會更高。
Table III. 16x16 區塊的時脈數
Stop_Level Average Clock Cycles
0 5530
1 4735
2 3962
3 3255
4 2573
Table IV. 測試影像的平均 PSNR 效能
Stop_Level PSNR
0 49.69dB
1 48.15dB
2 43.05dB
3 37.84dB
4 33.18dB
Table V. Lena 影像的 PSNR 效能
Stop_Level PSNR
0 49.695dB
1 47.673dB
2 42.946dB
3 38.591dB
4 34.290dB
‘Lena’影像的 PSNR 效能在表格 V 顯示，而這個結果與我們先前的軟體執行得到
的結果相同，一個速率控制會被拿來做為選擇每ㄧ個為了獲得更佳的失真率效能，而適
合編碼區塊的資料速率[9]，為了增進速率失真的性能，區塊的尺寸可增加，且執行可從
現有的設計延伸至很長的直線上，此設計經過先前的模擬和事後的模擬測驗，我們的系
統是用 Verilog-HDL 所設計出來，而為了去除錯誤，使用 Verilog-XL 模擬。本設計的硬
體架構是用 Verilog 硬體描述語言撰寫並用 Synopsys 公司的 Design Analyzer 合成出電路
Date：10/31/2007
18
基於 SPIHT 演算法的兩個硬體實作被發表在[18]，[19]。在[18]中的 SPIHT 編碼器
是使用內容可尋址記憶體執行追蹤關於小波係數的訊息並傳送給每一影像。此設計再演
算法中沒有最佳化或者修改，此設計的的計算將在硬體平台上並相對搭配的軟體平台。
這個設計以一個 8×8 大小的影像作功能驗證。因為此設計只有模擬結果，因此沒有更近
一歩的效能結果。在[19]裡的 SPIHT 編碼器是實作再平行計算架構下並基於固定排序的
SPIHT，必須使用發展特別在適合的硬體內為基礎。對一幅 N×N 影像，固定序列的 SPIHT
來說，它需要 N2/4 的計算時脈。不過，他們的 SPIHT 設計面積需要 98%的 FPGA 面
積在 Xilinx Virtex 2000E FPGA。 如果 Xilinx Virtex 2000E FPGA 可達到 200 萬的設計邏
輯閘[21]。我們的系統需要較少 FPGA 地區並且可能是低成本應用的一種好選擇是明顯
的。
第四章結論
本報告詳述有效率的 Modified SPIHT 編碼器的硬體實作，利用新係數的定址模式，
固定大小的鏈結串列表和直接的編碼程序，達到低成本和簡單的硬體架構。雖然影像失
真程度稍微地增加，但是在原始與本演算法所編碼的圖像之間的差別是難的被察覺的，
特別是在低壓縮率下。此演算法的實作是利用 TSMC 0.35-μm 2P4M製程技術實現的，
硬體的面積是 1.2 × 1.2 mm2，並且其時脈波頻率是 100 MHz。它能再一秒內處理超過
460 萬個圖像象素，此取決於編碼時所設定的影像品質。我們已經結合本設計的 DWT
硬體模組和一個 8 位元的微處理器，並且此設計已經在 Altera APEX 20K FPGA 電路板
上實現。另外，基於此 SPIHT 的方法壓縮率控制是容易的，且不需要建表查表。因此，
我們提出的設計對於嵌入的系統的應用具當然是有吸引力的。
參考文獻
[1] M. Rabbani, and P.W. Hones, Digital Image Compression Techniques, SPIE Opt. Eng.
Press, Bellingham, Washington, 1991.
[2] M. Antonini, M. Barlaud, P. Mathieu, and I. Daubechies, “Image coding using wavelet 
transform,” IEEE Trans. Image Processing, vol. 1, pp. 205-220, Apr. 1992.
[3] M. W. Marcelin, M. J. Gormish, A. Bilgin and M. Boliek, “An overview of JPEG-2000,” 
Proc. Of Data Compression Conference, Snowbird, Utah, pp. 523-541, Mar. 2000.
[4] ISO/IEC 15444-1:2000(E), Information technology–JPEG 2000 Image Coding System–
Part 1: Core Coding System.
Date：10/31/2007
20
[20] Altera Inc. Available:
http://www.altera.com/products/devices/apex/overview/apx-overview.html.
[21] Xilinx Inc. Available: http://www.xilinx.com/bvdocs/publications/ds022.pdf
[22] “Information Technology –JPEG 2000 Image Coding System,” ISO/IEC FCD15444-1:
2000 (V1.0, Mar. 2000), page 31.
[23] C. Dunn, "Efficient Audio Coding with Fine-Grain Scalability," presented at the 111th
Convention of the Audio Engineering Society, New York, 30 Nov.- 3 Dec. 2001.
[24] M. Raad, A. Mertins and I. Burnett, "Scalable to Lossless Audio Compression Based on
Perceptual Set Partitioning in Hierarchical Trees (PSPIHT)," Proc. IEEE Int. Conf. Acous-
tics Speech Sig. Proc (ICASSP), 2003.
[25] Wei-Chen Chang, Jing-Xin Wang and Alvin W. Y. Su, "Harmonic Structure Reconstruc-
tion in Audio Compression Method Based on Spectral Oriented Trees," 120th Convention
of Audio Engineering Society, Paper 6809, Paris, France, May 20-23, 2006.
Appendix I
Assume that 2N is the number of width and height of code block. Thus one can use 2N-bit
symbols to represent 2-D addresses in Fig. 13. The upper N nibble is for y-axis (height) and
the lower N nibble is for x-axis (width). The general form of physical address in a 1-D array is
Addr(yN-1, yN-2, …, y0, xN-1, xN-2, …, x0) = (錯誤! 所指
定的樣式的文字不存在文件中。-1)
2N × (yN-1×2
N-1 + yN-2×2
N-2+ … + y0×20) + (xN-1×2N-1 + xN-2×2N-2+ … + x0×20)
Figure 錯誤! 所指定的樣式的文字不存在文件中。-1 2N-bit symbols of an address.
Therefore, the general form of searching for descendants of the node by using original
address description is shown as follows.
Address of direct off-spring No.0 (錯誤! 所
指定的樣式的文字不存在文件中。-2)
= 2N × (yN-2×2
N-2+ … + y0×20) × 2 + (xN-2×2N-2+ … + x0×20) × 2
= Addr(yN-2, …, y0, 0, xN-2, …, x0, 0).
Address of direct off-spring No.1 (錯誤! 所
指定的樣式的文字不存在文件中。-3)
= 2N × (yN-2×2
N-2+ … + y0×20) × 2 + (xN-2×2N-2+ … + x0×20) × 2 + 1
= Addr(yN-2, …, y0, 0, xN-2, …, x0, 1).
Date：10/31/2007
22
= NewAddr(yN-1, yN-2, …, y0, xN-1, xN-2, …, x0) × 22 + 2
= New address of parent node × 22 + 2.
New Address of direct off-spring No.3 (錯誤! 所指
定的樣式的文字不存在文件中。-10)
= NewAddr(yN-2, …, y0, 1, xN-2, …, x0, 1)
= NewAddr(yN-1, yN-2, …, y0, xN-1, xN-2, …, x0) × 22 + 3
= New address of parent node × 22 + 3.
Because the rule in Eq. (11-14) is always true except at the highest and lowest pyramid
levels [5]. The rule in Eq. (16-19) also does not change by the new addressing method for the
square 2N processed block.
Appendix II
Referring to Fig. 10, the meaning of each state is represented as follows:
1. Idle state: Encode_CORE do nothing and wait for the start signal from the En-
code_Controller module.
2. The SearchMax state: Set the initial value of LIP, LIS and LSP flag and find out the
maximal coefficient in this code block.
3. The CaculateN0 state: Prevent the maximal coefficient from being zero.
4. The CaculateN1 state: Find out the  }){max(log
02 iNi
cn

 .
5. The OutputN state: Output the value n into the local memory and set the threshold.
6. The RefinementPass state: Check if the current node has been significant and update the
threshold. Set the LSP flag of current node being 1 when the LSP flag of current node is
2.
7. The SortingPass0 state: If the current node is insignificant, output the Sn(i). If the coeffi-
cient of the insignificant node is greater than threshold, the LSP flag and LIP flag of the
current node is reset and set MaxLSP being the address of the current node.
8. The SortingPass1 state: Output the sign of the current node.
9. The SortingPass2 state: Find out the first and the last address of the offspring of the cur-
rent node.
10. The CheckD state: Output the result when the current node is greater than threshold or
the search for all descendants is finished. Set the LIS flag being type B when address of
the current node is smaller than the last node, otherwise set the LIS flag being 0.
11. The SortingPass3 state: Output the compared result between the current node and thre-
shold. Besides set the LSP flag being 2 and MaxLSP being the address of the current
node when the coefficient is greater than threshold, otherwise set the LSP flag being 1
and MaxLIP being the address of the current node.
表 Y04
行政院國家科學委員會補助國內專家學者出席國際學術會議報告
年 月 日
報告人姓名 蘇文鈺 服務機構
及職稱
國立成功大學資訊工程系副教授
時間
會議
地點
2006 年 10 月 5 日至 8日
美國舊金山
本會核定
補助文號
會議
名稱
(中文) 2006 年第 121 屆音響工程協會年會
(英文) 2006 121st Audio Engineering Society Convention
發表
論文
題目
(中文)校正重建諧波結構相位運用於可調性音訊壓縮法之音質增強技術
(英文) Quality Improvement of A Scalable Audio Codec Based on A Phase
Estimation Technique For Reconstructed Harmonic Structure
報告內容應包括下列各項：
一、參加會議經過
由於美國舊金山與台灣距離遙遠，為降低時差與旅途不適影響，提前於 10 月 4 日晚間
由桃園國際機場出發，並於美西太平洋時間 10 月 4 日晚間抵達，10 月 5 日為 2006 年第
121 屆音響工程協會年會(Audio Engineering Society Convention)開幕首日，AES
Convention 是 Audio Engineering Society (AES) 的年度重要會議，許多與訊號處理、
音訊壓縮、音響理論設計與設備等相關的研究論文均在此會議中發表。本屆會議共有 131
篇論文被接受發表，而有 20%是由學生完成發表，是相當鼓勵提攜後進的學術社群，另
外有各種專題演講、歷史文獻回顧、現場展示表演等等活動，並有相關產業廠商參展會
場供學術與業界溝通交流。早上先參與二場與音響放大器設計(amplifier design)相關
之論文發表，中午與同行朋友前往舊金山鬧區用餐，午後返回會場，聆聽交通大學劉啟
民教授研究團隊所發表三篇音訊壓縮技術(audio coding)相關論文，傍晚則就近前往舊
金山中國城附近觀光。
10月 6日抽空前往舊金山近郊的 Stanford University 參觀並造訪著名的電腦音樂與音
響研究中心(Center for Computer Research in Music and Acoustics ,CCRMA)，並會
晤主持人 Chris Chafe 等人，相談甚歡。
10 月 7 日上午參加訊號處理(Signal Processing)論文發表，觀摩和吸收相關領域的最
新研究，下午聆聽了一場大師講座，由 Stanford University 的 Julius Smith 教授主
講樂器實體合成法(Physical Modeling)的發展，Julius Smith 教授是波導理論
(Waveguide)的奠基者，而波導理論是樂器合成的重要理論依據，由他來親自講述樂器
實體合成法的發展歷史，讓人有醍醐灌頂之感。
二、與會心得
這次開會讓我覺得收穫最多的是能夠觀察到世界上音訊處理研究的重要趨勢，特別是在
音訊壓縮與合成領域，音訊感知壓縮技術如 MP3 與 AAC，發展至今已逾十年，目前多數
研究者開始將眼光由降低壓縮率與保持音質的研究方向轉向其他新的可能方向，如：音
場的壓縮技術、資料串流的可調性等等。另外音訊合成的技術，多數是音樂合成，也漸
漸被採用來增進音訊的壓縮率，可見此兩大領域有越走越近之趨勢。這開啟了一波新的
研究方向的出現，對有志於相關領域研究的研究者是一項令人振奮的好消息。
附
件
三
