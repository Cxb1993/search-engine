  1
具有自有管理能力之數位家庭多媒體網路服務系統研究(II) 
計畫類別：■ 個別型計畫  □ 整合型計畫 
計畫編號：NSC 96-2221-E-366 -014 - 
執行期間：  96 年 8 月 1 日至  97 年 7 月 31 日 
 
計畫主持人：洪盟峰 
共同主持人：郭耀煌、吳鴻志 
計畫參與人員： 蘇倍豪、張博超 
 
 
中文摘要 
在 96 年度第二年的計畫中，主要研究課題
是有關數位家庭多媒體服務系統對外連線
技術議題的探討。尤其是長距離網路
(RTT>250ms)服務品質的第四層通訊協定
保障技術。本研究的成果主要是採用修正現
有 TCP Vegas 的壅塞控制機制以提供反應
更快也更加穩定的傳輸流量。透過往返時間
(Round-Trip Time, RTT) 的量測的方式來評
估目前網路壅塞情況，並透將原有 TCP 
Vegas 三區段的評估方式提昇為四區段的評
估方法。並藉將後數固定式的 α、β 數值修
改為態調整以因應網路情況。以改進 TCP
的流量控制效能，尤其在長距離傳輸網路
上，可以快速地提升傳輸流量。在經由各種
模擬實驗驗證本文所提出之機制可較目前
TCP Vegas機制效能平均改善15.597倍，證
實本文機制較 TCP Vegas 機制更佳。 
關鍵字：壅塞控制、TCP Vegas、長距離高
速網路、多媒體服務，往返時間 
 
Abstract 
The main purpose of this research is to 
propose a new scheme to improve the 
throughput of long-distance TCP connections. 
The proposed scheme is a variation of TCP 
Vegas. Differing from the current standard 
TCP algorithms (TCP New Reno), the 
proposed scheme uses Round-Trip Time (RTT) 
to derive the actual throughput of the target 
connection. According to the difference 
between the actual throughput and the desired 
throughput, the congestion window size is 
adjusted to either speed op or slow down the 
TCP connection. For efficient response, the 
strategy of window-adjustment is composed 
four parts to meet the requirements of four 
stages of a TCP connection. We improve the 
constant-interval approach of TCP Vegas. In 
the new scheme, dynamic adjustment of TCP 
Vegas α, β value is designated to enhance the 
throughput of the standard TCP Vegas. 
Simulation results show that in various 
conditions of bandwidth and distance, the 
proposed scheme effectively improves the 
throughput of standard TCP Vegas. 
Keywords: Congestion control, TCP Vegas, 
Long-distance Network, Round-Trip Time, 
Multimedia Service. 
 
一、 緒論 
       近年來，由於網際網路的使用普及
率快速增加，如何增進網路效能一直是許
多研究者所熱門的目標，依據「台灣網路資
  3
差值 diff，如(1)式所示。Expected 為此回合
的預期傳輸吞吐量，而 Actual 則為此回合
的實際傳輸吞吐量，前者計算方式由此回
合的壅塞視窗(cwnd)大小除以 BaseRTT 即
目前量測到的最小 RTT，後者則是除以此
回合的 RTT；以此計算方式求得目前佇列
中封包數目量的多寡。 
 
經由(1)式計算出 diff 值後，再根據(2)
式的演算法，求得下一回合 cwnd 的數值為
何。 
⎪⎩
⎪⎨
⎧
>−
<<
<+
=+
β
βα
α
diffkcwnd
diffkcwnd
diffkcwnd
kcwnd
, 1)(
 )(
, 1)(
)1(     (2) 
 
如(2)式所示，當 diff 小於 α時，TCP Vegas
機制認定目前網路處於順暢狀態，cwnd 則
會加 1，diff介於 α、β之間則認為目前網路
處於穩定狀態，cwnd 則不作增減，當 diff
大於 β 則認為目前網路接近壅塞，cwnd 則
減 1。TCP Vegas 機制應用在長距離且高速
傳輸網路上的問題則由(1)、(2)式中的演算
法中可見，cwnd 成長速度太慢以至在高頻
寬時吞吐量過低，且由於長距離造成的高
延遲傳輸，會讓 TCP Vegas 機制在調整上
面的鈍化。 
由於 TCP Vegas 機制有著上段所述之問
題，故目前需多研究學者提出修正 TCP 
Vegas 機制的方式，大致上可分為三類：1. 
修正 RTT 的量測方式，以此提高網路吞吐
量；2. 修正壅塞視窗的成長方式，以提高
壅塞視窗成長速度來提高網路吞吐量；3. 
修正 α、β 數值，透過修正原本 TCP Vegas
機制固定數值的 α、β 值，以提高網路吞吐
量。 
第一種修正 RTT 的量測方式，本文在
此 舉 出 TCP Enhanced Vegas[11] 與
STT-Vegas[12]為例子，此兩種方式皆是修
正原本 RTT 量測為發送端發送封包到發送
端接收到 ACK 的時間，改為發送端發送封
包給接收端的時間記錄為正向傳輸時間，
再將接收端回送 ACK 至發送端的時間記錄
為反向傳輸時間，以此方式修正原本反向
傳輸造成正向傳輸的影響減少以提高網路
吞吐量，但本文機制則不採用此方式作為
修正依據，主要是此方式需修正目前的
TCP 標頭，故不適合應用於目前網路情
況。 
第二種修正 cwnd 成長方式多不勝數，
本文在此以 Quick Vegas[13]機制為例，此
方式透過新增(α+β)/2 的分隔點分隔出新的
區間，以此較 TCP Vegas 機制更能因應實
際網路情況，且透過動態的diff數值去調整
cwnd 大小，經由此兩種方式提高整個網路
吞吐量。 
而第三種修正 α、β 數值的方式，本文
在此舉出 Ada Vegas[14]機制與 Vegas-A[15]
機制為例，此兩種方式皆是用動態的 α、β
數值取代原本 TCP Vegas 機制固定不變的
α、β數值，以此方式拉開 diff 與 α、β比對
的空間，透過此方式提高網路吞吐量。 
綜合上述研究者修正 TCP Vegas 機制的
方式，故本文在此認為要提高 TCP Vegas
機制在長距離且高速傳輸的吞吐量可從下
面兩點：1. 修正 cwnd 的成長速度；2. 調
整 α、β 數值。而本文將以上述兩點作為調
整的依據，修正方式則如第三章節所示。 
 
三、 長距離網路上高速傳輸之動態 TCP 
Vegas 設計 
   從上一章節中得知，要提高網路吞吐量
的方式有二，可從 1. 修正 cwnd 的成長速
度；2. 調整 α、β數值；故本文機制將以此
兩種方式作為修正基礎概念，提出新的修
正方式，希望以此新的機制達到以下幾點
目標：1. 減少頻寬達到頻寬上限的時間；
2. 提高端點間連線鏈路的網路頻寬吞吐
量。 
   為達成上述目標，本文機制修正了原本
  5
值設定為 0，用意是避免下一回合假設又回
到區間一時成長過快而造成網路壅塞，設
定完 P 值後在此區間內 cwnd 成長速度修正
為(α+β)/2 – diff，此方式不但可減緩 cwnd
成長速度，也可依照不同的diff值作更精確
的調整，同樣此區間調整完 cwnd 值後也會
針對 α、β 作一調整，不同的是此區間認定
目前 α 值為增加後的上限，故在此區間不
作增減的設定，而 β 數值則會減 10，以縮
減區間二與區間三的範圍。 
  當diff值座落在第三區間時，本文
機制認定目前網路處於穩定的狀態，故在
此區間內不作 cwnd 的調整，但仍會針對
α、β作一調整，首先會將 α減掉 4，β減掉
8，主要是希望將整個 α、β 往下修正，並
在修正的過程中放大區間二與區間三的範
圍，而參數 P 也將被設回預設值。 
  最後當diff座落在第四區間時，本
文機制認定目前網路接近壅塞狀態，故在
此區間內將減少 cwnd 數值，修正方式將
cwnd 減少 diff –β的大小，以此方式減少目
前網路吞吐量，而修正完 cwnd 後，此區間
不針對 α、β 作一修正，主要是認定目前的
α、β 數值為上限值而不更動，同樣地參數
P 被設定回預設值。 
   為驗證本文所提之機制是否確定達到所
制定之目標，將於下一章節作模擬實驗的
分析。 
 
四、 模擬與分析 
   為了驗證本文機制是否確實可達到上述
目標，透過 NS2 [16]網路模擬工具，建置如
圖三所示，由數個來源端對應到相同的接收
端編號，中間經由兩個路由器，來源端與目
的端連接到路由器間的鏈路頻寬大小為
1Gbps，延遲時間為 10ms， 兩個路由器之
間頻寬與延遲時間根據實驗網路情境不同
時，將會有不同的模擬參數設定。 
為驗證本文機制是否比目前的 Vegas
機制更佳，在模擬一中將兩路由器間頻寬設
定為 622Mbps，延遲時間為 110ms，模擬時
間為 100 秒，模擬實驗結果如圖四所示。 
 
圖三：網路拓樸圖 
 
    
 
圖四：與其它 Vegas 機制之 cwnd 比較圖 
 
由圖四可得知，本文機制在 7 秒左右 cwnd
成長速度即與 Ada Vegas 機制、Vegas-A 機
制與 TCP Vegas 機制拉開，而大約在 11 秒
左右才與 Quick Vegas 機制拉開，主要是由
於 Quick Vegas 修正 cwnd 成長速度比其它
機制來得快，而本文機制大約在 54 秒左右
即達頻寬上限而不再增加。如表 I 所示，本
文機制平均吞吐量較其它Vegas機制平均增
加 16.6 倍，足可驗證本文機制效能比其它
Vegas 機制更佳。 
表 I 
所提機制與其它 Vegas 平均吞吐量比較表 
 
機制名稱 平均吞吐量 
(100 秒內) 
The proposal 412.69 Mbps 
  7
50 秒間，由於接近頻寬上限，故造成 cwnd
成長數值漸緩，而在 60秒至 70秒則由於已
達瓶頸頻寬上限，故 cwnd 則不作增加。且
由表 II 可看出當 CBR 流量加入後，因 CBR
流量與本文機制競爭頻寬後，可確實的搶
奪其所需的頻寬，足見本文機制不會有獨
佔網路頻寬的現象。 
 
結論與未來展望 
經由模擬結果可知，本文機制確實可有效
改善目前 TCP Vegas 機制在長距離且高速
傳輸網路的效能，且應用在不同瓶頸頻寬
鏈路之下皆可正常運作，而背景流量的加
入也確實可公平的與本文機制競爭網路頻
寬。且本文所提出之動態調整 α、β 數值方
式，可確實的因應網路情況作出調整。在
未來工作上，本文所提出之機制在公平性
方面尚待探討，且動態調整 α、β 造成路由
器之間佇列可能過大的問題，尚有可改進
的空間。 
 
計畫成果自評 
承蒙國科會支援，本計劃得以完成。目前本
計劃成果發表於國內外專業學術會議三
篇、期刊論文投稿兩篇、預計申請國內專利
一項。今年的計畫目標是延續去年有關自動
化管理家用多媒體服務系統成果。在前一計
畫中，我們建構一個可以具有自我管理功能
的資訊家電平台，但由於傳統 TCP 的限制
使得長距離傳輸品質不佳影響數位家庭服
務，尤其是多媒體服務的品質。因此，在
96 年計畫中完成長距離網路連線的流量控
制機制研究與開發以及 OSGi-based 具彈性
架構的多媒體服務系統建置，應是符合原訂
計畫的要求。 
 
參考文獻 
[1] 台灣網路中心, 網消會, 資策會FIND/經
濟部技術處「創新資訊應用研究計
畫」, ”2008 年第一季台灣網際網路連線
頻寬調查”, 資策會FIND網站, 2008. 
[2] L. Brakmo and L. Peterson, “TCP Vegas: 
End to End Congestion Avoidance on a 
Global Internet”, IEEE Journal on 
Selected Areas in Communication, vol. 13, 
No. 8, pp.1465-1480, 1995. 
[3] S. Floyd, T. Henderson, and A. Gurtov, 
“The New Reno Modification to TCP's 
Fast Recovery Algorithm”, RFC3782, 
2004. 
[4] S. Floyd, “HighSpeed TCP for Large 
Congestion Windows”, RFC 3649, 2003. 
[5] D. X. Wei, C. Jin, S. H. Low, and S. 
Hegde, “FAST TCP: motivation, 
architecture, algorithms, performance”, 
IEEE/ACM Transactions on Networking, 
vol. 14, pp.1246-1259, 2006. 
[6] T. Kelly, “Scalable TCP: Improving 
Performance in HighSpeed Wide Area 
Networks”, ACM SIGCOMM Computer 
Communication Review, vol. 33, pp.83-91, 
2003. 
[7] R. N. Shorten, D. J. Leith, J. Foy, and R. 
Kilduff, “Analysis and design of 
congestion control in synchronized 
communication networks”, the 12th Yale 
Workshop on Adaptive and Learning 
Systems, 2003. 
[8] J. Semke, J. Mahdavi and M. Mathis, 
“Automatic TCP Buffer Tuning”, 
Proceedings of the ACM SIGCOMM '98 
conference on Applications, technologies, 
architectures, and protocols for computer 
communication, vol. 28, Issue. 4, pp. 
315-323, 1998. 
[9] B. L. Tierney, D. Gunter, J. Lee, M. 
Stoufer and J. B. Evans, “Enabling 
Network-Aware Applications”, 
Proceedings of 10th IEEE International 
