              2 
一、前言 
在最近十年內，資訊技術有了重大的發
展，然而，傳統超級電腦的運算處理速度對
於許多科學應用所需的運算處理速度仍然
無法滿足，例如新型藥物分子結構的模擬、
追蹤大氣中臭氧濃度的變化及預測地震等
等的科學應用。此外，一般來說，一部超級
電腦的儲存能力在某些特殊的應用上也不
足，以高能物理實驗來說，其一年可以產生
1015bytes的資料量[1]。為了解決傳統超級電
腦在運算處理能力以及儲存能力不足的問
題，網格的概念就被提出了，網格最主要的
核心概念就是資源分享[2]，使用者可以透
過網路去使用巨量的運算及儲存能力藉由
整合分散於世界各地的可利用資源。 
許多針對網格的計畫也已經被提出來
探討了，其中網格計算中最有名的計畫之一
為大型粒子碰撞網格(LCG, Large hadron 
collider Computing Grid)[3,4]，LCG主要的目
的為將分散於世界各地的數千個運算節點
整合成一個虛擬超級電腦，針對粒子碰撞實
驗所產生的大量資料進行儲存與分析。另一
個著名的計畫資料網格(Data Grid)[5]，其著
重於提供高效與穩定的資料傳輸服務。在歐
洲針對網格基礎架構最大的研究計畫為
EGEE (Enabling Grid for E-SciencE)[6]。此
計劃整合了LCG、EU-DataGrid、Biomedical 
Grid計畫中的運算節點及其他許多的運算
節點，用於高能物理、天文學、天體物理學、
生物學及地球科學等多方面科學領域的研
究。EGEE計畫中共有32個國家(共計91個組
織)參與其中，使用的CPU數量總計達約
20000餘個，因此，EGEE計劃所整合的運算
能量是遠超過一台超級電腦、一個組織，甚
至是一個國家。 
Globus Toolkit (GT)[7]是一套用於建造
網格環境的開放原始碼軟體套件，它包含了
許多用於資源監測、發現及管理的軟體及函
式庫。其中，GT最重要的一個軟體元件稱
為網路式網格資源分配及管理服務元件
(WS GRAM)。WS GRAM元件提供了於網
格環境中分配、執行、監控、刪除工作等操
作的協定。另一個重要的概念是：WS 
GRAM並不是一個工作排程器，而是研究者
可以透過WS GRAM所提供的各式協定來
設計一套符合研究者們需求的工作排程器。 
 
二、研究目的 
現今已經有許多的工作在網格平台上
執行，舉例來說，投入EGEE計畫的運算節
點平均每日都要處理1500餘個工作，因此，
運用一個有效率的工作排程演算法對於使
網格平台達到高效能是非常重要的。一般來
說，一個工作排程演算法可能為了某種目的
而設計出來，其目的可能是資源利用率的最
大化、使用者平均等待時間的最小化、工作
完成時間的最小化等等。在分散式系統中已
經有許多的工作排程演算法被提出了
[8,9,10,11,12,13,14,15,16,17]，它們大多數是
用於運算節點有一致性(Homogeneous)的環
境，也就是所有運算節點都擁有相通的運算
能量，且當一個工作開始被執行後，該工作
能使用的運算節點不會有變化的情況。然
而，網格運算整合遍及全球的運算節點，這
些運算節點的運算能量彼此之間不會是相
同的，也就是說，運算節點為非一致性的
(Heterogeneous)，此外，網格環境中的運算
節點數量為動態變化的，當一個工作開始被
執行後，該工作能使用的運算節點會隨著時
間而改變，運算節點有可能增加或減少。許
多的靜態排程演算法已經被提出用於網格
環境中[8,9,10,11,12,13,14,15,18,19]，然而在
網格環境中，運算節點數量可以是動態變化
的，所以靜態的工作排程演算法並不全然適
用於網格運算環境，因此，一個可以隨時考
量網格資源可利用性的動態排程演算法是
必要的。 
本研究提出一個稱為AROF的工作排程
演 算 法 ， 其 包 含 了 三 個 主 要 的 模 組
(module)：工作選擇模組(selection module)、
工作評等模組(ranking module)及工作媒合
模組(mapping module)。三個主要模組的原
理如下：(1)工作選擇模組定義選取條件，
被選取出來的工作將可進行媒合，同時符合
選取條件的工作數量可能不只一個。(2)被
選取出來的工作，透過工作評等模組中特定
              4 
圖 1(a) DAG 圖示範例 
圖 1(b) 各類型 rank 值
ranku及rankd代表向上優先值及向下優先
值。ranku(vi)代表工作vexit至vi(包含vi)最常路
徑的權重值，相反地，ranku(vi)代表工作ventry
至vi(不包含vi)最常路徑的權重值。我們用
cmp
iτ 代表工作vi在運算節點的平均執行時
間； bwvvw ji /)),((
cmm
ij =τ 代表工作vi與vj平
均資料傳輸時間，其中bw代表所有運算節
點間頻寬的平均值。根據以上定義，ranku
及rankd的公式如下列所示： 
})({max)(
cmm
ij
)(
cmp
i ττ ++= ∈ juvsuccviu vrankvrank ij  
})({max)(
cmm
ij
cmp
j
)(
ττ ++=
∈ jdvpredvid
vrankvrank
ij
 
另一個重要的參數定義為關鍵路徑 (CP, 
Critical Path)，其定義為從工作ventry至vexit最
長的路徑，CP的長度以|CP|表示之，公式如
下列所示： 
)}()({max jdiuVvi vrankvrankCP += ∈  
在CP路徑上的工作稱為關鍵工作(Critical 
Task)，如果工作vi為關鍵工作，則ranku(vi) + 
rankd(vi)將會等於|CP|[20]，而關鍵工作的判
定可以利用深度優先搜尋法 (depth first 
search)從ventry搜尋至vexit，將每個工作透過
上述公式即可識別，圖1(a)為以簡易DAG圖
形表示的應用程式，其中每個頂點內的數字
代表該工作的 cmpiτ ；而邊上的數字代表兩工
作間的 cmmijτ ，圖1(b)為各工作的各類型rank
值，從圖上可以發現，|CP|值為38，而位於
CP上的各關鍵工作(也就是以加粗線連接的
工作)，該工作的ranku+ rankd值會等於|CP|。 
以下介紹幾個已知著名的工作排程演
算法： 
Hybrid Heuristic[17]：Hybrid Heuristic為一
用於異質性運算環境的list-based工作排程
演算法，其排程演算法包含了三個階段(1)
供作評等階段、(2)工作群組階段及(3)工作
媒合階段。在第一階段中，每個工作的ranku
值被計算出來。在第二階段，每個工作將被
分到某個群組內，其分群的規則如下：首先
所有工作中ranku最高的一個(透過深度優先 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
搜尋法)將被放置群組1內，以圖1為例即是
v0，再者，所有未被置於某個群組內的工作
將被檢視，若該工作與群組1內所有工作均
無相依性，則該工作也被放置於群族1，當
所有可以放置於群族1的工作放置完畢後，
還有工作未被置於群族內，則新的一個群族
(群族2)即產生，一樣先將所有未被置於群
族內的工作中，ranku最高的一個置入，如此
循環的將所有工作分配到群組中，而結果也
將產生數個群組。在工作媒合階段，工作的
以群族為單位 (群族1、群族2、…)依序被 
              6 
predecessors已經執行完畢了)。 
 
四、研究方法 
本篇所提出的AROF的工作排程演算
法，再媒合一個進行中的應用程式的工作時
至有效的運算節點時，因為應用程式執行的
過程中，有效的運算節點因為網格運算系統
的特性可能會發生變化，AROF將工作分為
多個循環(iteration)來處理，每個循環由三個
階段所組成：(1)工作選擇階段、(2)工作評
等階段及(3)工作媒合階段。AROF工作排程
演算法架構如圖2所示，其輸入為一有向圖
G (diagraph)所表示的應用程式，而應用程式
中每個工作的媒合結果將存放至一個分配
陣列A(assignment matrix)，陣列中Aij = t代表
工作vi分配至運算節點pj，而工作的開始執
行時間為t。AROF為了在運算節點變化的運
算環境中，將工作媒合至運算節點，(圖2中
20至31步驟)，若有運算節點被移除了，原
本分配至該運算節點上預執行的工作將會
被轉移(圖2中4至19步驟)。 
演算法開始處理工作之前，應用程式G
透過函式ExtractAvailResource擷取初始可
利用的運算節點資訊。步驟2中，變數vfinish
用來存放最近一個完成的工作資訊，其初始
值被設定為零(nil)。函式ResourceChange- 
Event用於判斷可利用運算節點是否產生變
化(新的運算節點加入或者既有可利用的運
算節點被移除)，若可利用運算節點發生變
化，被移除的運算節點透過步驟5、6及7被
放置在Prevoked集合中，在步驟8及步驟9當
中，如果Prevoked不為空 (NULL)，則函式
CollectScheduledTask將先前分配至欲移除
的運算節點的工作，也就是說媒合(但還未
執行)在Prevoked集合的運算節點內的工作，收
集至L集合中。步驟10中，函式Ranker將L
集合的工作重新評等媒合修先值；在步驟
12，具有最高媒核修先值的工作將透過函式
ExtractMaxPriorityTask被移至vmax。步驟
13及14為偵測vmax先前存放的運算節點，並
將其媒合結果從陣列A移除修正。在步驟
15，函式Mapper為工作vmax決定最適合的可
利用運算節點pbest，而新的媒合結果在步驟
16更新至陣列A。步驟12至16會一直循環執
行，直到L集合為空(即表示所有原先分配至
欲移除運算節點內的工作都已重新媒合完
畢)。 
一般處理工作的程序在步驟20，當某個
工作vi執行完畢或剛開始要接收資料(從
predeceo)時，其判斷為真並進入步驟21至
30，另如果工作vi為執行完畢狀態，工作vi
會在步驟22存至變數vfinish。在步驟24，函式
Selector透過本篇所定義的選擇條件，將符
合條件的工作選出並放置L集合；接著步驟
25為每個被選出的工作計算優先媒合值；在
步驟27，函式ExtractMaxPrioirtyTaskL集
合中，具有最大優先媒合值的工作挑出並存
放至工作變數vmax中；在步驟28，函式
Mapper將工作 vmax 媒合至運算節點 pbest
中，運算節點pbest的定義為使vmax在該運算
節點有最低的完成時間。當找出工作vmax的
pbest後，第29步驟將該筆媒合結果存放至陣
列A中。步驟27至29會循環執行，直至L集
合中已經沒有工作可以處理為止。另如果
vfinish為vexit(步驟3)，則代表該應用程式的所
有工作都已經被媒合了。 
 
五、結果與討論 
AROF工作排程演算法藉由與HEF及GS
工作排程演算法來驗證AROF的效能，實驗
的應用程式模式及網格模式的說明如下︰
(1)|V|為一個應用程式中工作的數量，在實
驗中，|V|為50、100及150。而代表一個應用
程式的有向圖，其圖形高度 (height) 以
| | /V shape⎢ ⎥⎣ ⎦表示，而圖形每一層的平均寬
度(每一層有幾個工作)以 | |V shape⎢ ⎥×⎣ ⎦ 表
示，在實驗中shape的值為0.5、1.0及1.5    
(2)傳輸與運算比值(CCR, Communication to 
computation ratio)為工作的平均傳輸與運算
比例，如果CCR的值較小則代表該應用程式
為運算密集(computation-intensive)的工作類
型；反之則為運算密集 (communication-   
intensive)的工作類型，在實驗中shape的值為
0.5、1.0及2.0。本篇AROF工作排程演算法
與GS及HEFT比較的結果如圖3所示(以變化
              8 
Physics Data Analysis,” IEEE Transcations On Nu-
clear Science, vol. 52, pp. 2823-2826, 2005. 
[5] A. Abdullah, M. Othman, M. N. Sulaiman, H. Ibrahim 
and A. T. Othman, “Towards a scalable Scientific Data 
Grid model and services, Int’l Conference on Com-
puter and Communication Engineering (ICCCE ‘08), 
pp. 20-25, 2008. 
[6] C. Blanchet, C. Combet and G. Deleage, “Integrating 
Bioinformatics Resources on the EGEE Grid Platform, 
“Proceedings of the Sixth IEEE international Sympo-
sium on Cluster Computing and the Grid Workshops 
(CCGRIDW ‘06), vol. 2, pp. 41-48, 2006. 
[7] I. Foster, “Globus Toolkit Version 4: Software for 
Service-Oriented Systems,” IFIP International Con-
ference on Network and Parallel Computing, pp. 2-13, 
2006. 
[8] S. Baskiyar and P. C. SaiRanga, “Scheduling Directed 
A-cyclic Task Graphs on Heterogeneous Network of 
Workstations to Minimize Schedule Length," Pro-
ceedings of the 2003 International Conference on Par-
allel Processing Workshops, pp. 97-103, 2003. 
[9] H. Cao et al.,"DAGMap: Efficient Scheduling for 
DAG Grid Workflow Job," 2008 9th IEEE/ACM In-
ternational Conference on Grid Computing, pp. 17-24, 
2008. 
[10] B.R. Carter et al., "Generational Scheduling for Dy-
namic Task Management in Heterogeneous Comput-
ing Systems," Journal of Information Sciences, vol. 
106, pp.219-236, 1998. 
[11] R. F. Freund et al., "Scheduling Resources in 
Multi-user, Heterogeneous, Computing Environ-
ments with SmartNet," Proceedings of Heterogene-
ous Computing Workshop, pp. 184-199, 1998. 
[12] E. Ilavarasan, P. Thambidurai and R. Mahilmannan, 
"Performance Effective Task Scheduling Algorithm 
for Heterogeneous Computing System," The 4th In-
ternational Symposium on Parallel and Distributed 
Computing, 2005. 
[13] Y.-K. Kwok and I. Ahmad, "Dynamic Critical-Path 
Scheduling: An Effective Technique for Allocating 
Task Graphs to Multiprocessors," IEEE Transactions 
on Parallel and Distributed Systems, vol. 7, pp. 
506-521, 1996. 
[14] F. de O. Lucchese et al., "An Adaptive Scheduler for 
Grids," Journal of Grid Computing, vol. 4, pp. 1-17, 
2006. 
[15] M. Maheswaran et at., "Dynamic Mapping of a Class 
of Independent Tasks onto Heterogeneous Comput-
ing System," Journal of Parallel and Distributed 
Computing, vol. 59, pp. 107-131, 1999. 
[16] T. Rauber and G. RÄunger, "Anticipated Distributed 
Task Scheduling for Grid Environments," Proceed-
ings of the 20th International Parallel and Distributed 
Processing Symposium, 2006. 
[17] R. Sakellariou and H. Zhao, "A Hybrid Heuristic for 
DAG Scheduling on Heterogeneous Systems," Pro-
ceedings of the 18th International Parallel and Dis-
tributed Processing Symposium, 2004. 
[18] H. Topcuoglu, S. Hariri and M.-Y. Wu, "Perform-
ance-Effective and Low-Complexity Task Schedul-
ing for Heterogeneous Computing," IEEE Transac-
tions on Parallel and Distributed Systems, vol. 13, pp. 
260-274, 2003. 
[19] L. Wang et al. "Task Matching and Scheduling in 
Heterogeneous Computing Environments Using a 
Genetic-Algorithm-Based Approach," Journal of 
Parallel and Distributed Computing, vol. 47, pp. 8-22, 
1997. 
[20] M.-Y. Wu and D. D. Gajski, "Hypertool: A Pro-
gramming Aid for Message-Passing Systems," IEEE 
Transactions on Parallel and Distributed Systems, vol. 
1, pp. 330-343, 1990. 
 
七、計畫成果自評 
因為網格系統的資源動態性在發展網
格工作排程演算法過程中鮮少被考慮到。本
研究提出一個稱為AROF的工作排程演算
法，該演算法不僅會考慮到網格系統資源異
質性的性質，最重要的，也會將網格系統資
源動態性的性質納入工作排程時考慮的因
素中。另本計畫也明確指出，在網格運算系
統中，工作被排程的時機對於工作完成時間
的影響是巨大的，本計畫詳細分析了工作排
程的時機，並說明每種不同的時機對工作完
成時間及資源異動性所造成的影響。本研究
對其他有興趣發展網格運算系統動態工作
排程演算法的研究學者而言相當具有參考
價值。目前本計畫的研究成果已經在
ICA3PP2010國際研討會發表，此計畫之執
行成果與預期完成之工作項目相當接近，我
們將對排程演算法分析其時間複雜度與補
足更多數據後，投往國際期刊。 
 
 
二、與會心得 
 
目前在平行與分散式處理的領域最受到矚目的就是雲端運算與 GPU 運算，在 ICA3PP 的研討會中這
兩個研究方向也成為多個 sessions 的主題，雲端運算目前的定義還是很模糊，似乎與網格運算所
需的技術差別不大，若要說需要繼續改進的地方應是人機界面與服務的整合。但此次一個很大的
收獲就是得知 Prof. Rajkumar Buyya 宣稱他已發展出 CloudSim 可用以模擬雲端運算的環境，而
且也歡迎學術界免費下載使用，這對我是一大方便，不需要自行寫模擬器。另外，我對 GPU 運算
也極有興趣，研討會中大部份的論文為將應用平行化，較少發展基礎演算法的平行技術，可能是
目前演算法領域的人較少投入吧，或是認為類似 SIMD 的機器在執行非規則性運算時效能高不到那
裏去，但 GPU 目前是採用 multithread 的觀念，所以效能也許有機會提升到可接受的程度。我對
此很感興趣，未來將是我的研究方向之一。 
 
三、考察參觀活動(無是項活動者略) 
 
無 
 
四、建議 
 
此次會議比較特別的地方是 ICA3PP 2010 與 Future Tech 2010 共同主辦，會場都在釜山樂天大飯
店 42 樓，但因場地夠大，且該樓層的格局可將不同研討會的場地做區格但不影響兩方人員的交流，
兩個研討會的 keynote speech 合辦是一個很好的策略，可讓兩方參與的人員多聽到幾場演說。因
此若相關領域的國際會議在台灣辦，建議各會議的主辦單位可考慮在同一時間舉辦，讓與會者可
參與較多的 keynote speech，且場面會較熱烈。另外交通資訊在 CFP 階段就要寫的很清楚，清楚
的資訊會提昇學者投稿的意願。 
 
五、攜回資料名稱及內容 
 
由 Springer 發行之 ICA3PP 2010 會議之 Lecture Notes in Computer Science 之光碟版。 
 
六、其他 
 
   無 
 
 
98年度專題研究計畫研究成果彙整表 
計畫主持人：林作俊 計畫編號：98-2221-E-197-014- 
計畫名稱：實現具資源重置能力之網格運算平台的研究：新的運算模型與資源配置策略之提出與分析
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 2 2 100% 
另有講師級兼任
研究助理兩名及
大專生兼任研究
助理兩名參與此
計畫 
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
