1 前言 
Low-power 設計對計算機而言相當重要，可減少電能消耗、疏緩散熱問題。從
另一個角度來看，在相同電能消耗或散熱裝備的條件下，可允許系統增加更多的功
能。此外，過去的計算機設計，經常只注重效能考量，而作了許多浪費 power 的設
計；如何將低功率設計的概念，融入計算機設計過程中，是研究上的重大挑戰。 
本計劃已於過去計畫執行三年間期間，探討多項低功率計算機系統中的重要研
究議題，包括 low-power dynamic branch prediction 設計、low-power cache 設計、
low-power task scheduling、low-power bus encoding 設計等。其中，前兩年成果羅列
如下： 
Low-power dynamic branch prediction 方面： 
 Low-power instruction cache based BTB 
 Next Entries Pre-activation for Low Power Drowsy BTB 
 BTB Storage Reduction via Early Target Address Generation 
Low-power cache design 方面： 
 Autonomous Instruction Memory Design 
 A Loop Buffer with Supporting Noncontiguous Instruction Address 
 Reducing Leakage Power for L2 Cache via Drowsy Cache and Pre-activate 
Mechanism 
Low-power task scheduling 方面： 
 ETAHM: Energy-Aware Task Allocation Algorithm for Heterogeneous 
Multiprocessor 
而今年我們將研究主力集中於元件與元件之間的資料傳輸上，針對傳輸資料的
bus，設計了省電的資料傳送機制。本研究計畫結案報告，將說明於本年度中完成的
研究成果。 
1. Low-Power Instruction Bus Encoding 
2. Low-Power Multiplexed Address Bus Encoding 
3. Low-Power Narrow Bus Encoding 
 
effective way. However, the supply voltage is usually determined by the system and 
technology consideration, and decreasing Vdd will accordingly increase the propagation 
delay. By reducing the factor fclk, clock frequency, the computing time will be definitely 
extended. A multitude of techniques for scaling voltage or frequency have been proposed 
[3][4].  
Another important factor that distinguishes power is its dependence on the switching 
activity. There are two ways to cut-down the switching activity on buses in execution 
time:  
1. Reducing transaction counts:  
Reducing requests of memory access is a direct approach to reduce bit 
transitions on buses. Since requests are saved, buses can keep idle and eliminate 
power consumption. To increase the reusability of transmitted values is a common 
example of this idea.  
2. Reducing number of switch activities per transaction:  
Reducing number of switch activities per transaction that make the current 
transmitted bits near previous ones can reduce number of capacitances needed to be 
driven. Bus encoding is a well-known technique to encode the content of bus to 
reduce the switching activities. 
2.2 How CPU request memory data? 
While CPU executing programs in a general computer system, the processor will 
unceasingly access the memory for fetching instructions, reading input data, and write the 
computation results. All these transmissions have to be done by the system Buses. 
Following shows the needed transmissions between CPU and memory, and the behaviors 
of them: 
1.  Instruction Address Stream  
The behavior of instruction address sequence is usually consecutive, and the 
stride of instruction address is equal to the size of instruction words. The instruction 
address is usually consecutive under general condition. However, when the branch 
instructions (goto, if, call, return, etc.) are executed, the next instruction address 
sequence is depend on the branch result. When branch taken, the next instruction 
address will not be sequential to the address of the branch instruction. Though the 
branch target addresses are not sequential to addresses of the branch instructions, the 
target addresses are seldom changed when program executed. As a result, the 
behavior of instruction addresses is quite regular and predictable.  
 In this architecture, instruction address stream is mixed with data address stream, 
and instruction stream is mixed with data stream. The stream individualisms are 
broken because of the intervention of each other. Moreover, the offline optimization 
of instructions might get poor performance here.  
 
 
In this architecture, all the four streams are mixed together. As a result, almost 
all characteristics of these streams are broken now. 
2.4 Some nouns 
Redundant bits:  
The general definition of redundant bits is the additional bits added to the 
original information data for some specific purposes. However, I use this noun here 
as the bits which have the regular property. There may be different regular bits types 
at different kinds of stream. When dealing with different streams, the default regular 
bits type will be different. Followings are some kinds of regular bits types.  
 
※ Type 1: Repeated Bits (The Same Leading Bits with Previous Value):  
This type often occurs at address stream because of the values of successive 
addresses are often close. When the current address is not too far from previous 
address, this two address values will be similar and there will be many identical 
leading bits. Sometimes the data stream has this property because of the relationship, 
too. If two successive accessed data values have relationship, these two values have 
chance to be close and have some identical leading bits. 
 
3 Related Bus Encodings 
The main purpose of here is to provide the related approaches for bus encoding 
methods. These related approaches are separated into following catalogs: 
1. General approaches 
This kind of approach is often applied on patterns without any specific 
characteristic. The Bus-Invert[5] method is in this catalog. 
2.  Approaches for instruction address sequence 
This kind of approach can take use of the characteristics of instruction address 
stream, as mentioned in section 2.2. It is more specific and gets benefits from each 
used individual characteristics. The Zero-Transition (T0)[6], T0-C[7], and 
Discontinuous Address Table Algorithm (DAT) methods belong to this catalog. 
3.  Approaches for instruction stream 
This kind of approach can take use of the characteristics of instruction stream, 
as mentioned in section 2.2. These approaches, being static approaches, are often 
applied on (or after) the program compilations, with complicated encoding 
algorithms as long as the decoders are easy to be implemented. Furthermore, 
dynamic encoders are seldom required. The Peter Petrov’s Instruction Bus 
Encoding[8] and BIBITS Bus Encoding[9] methods are in this catalog. 
 
3.1 Bus-Invert[1] 
Consider an N-bit bus. The idea is that if the hamming distance between two 
consecutive patterns is larger than N/2, then the second pattern can be inverted so as 
to reduce the inter-pattern Hamming distance to below N/2. One extra bit is needed 
to distinguish between the original and inverted patterns that are transmitted on the 
bus. The BI method tends to perform well when transmitting random patterns, which 
is often the case on data busses. 
 
 
0000
9Total Transitions
7FF2
7FF0
0010
b(t)
15
10
1
H(t)
1800D800F
1800F0010
00010init
INV(t)BUS(t)BUS(t-1)
0000
12Total Transitions
7FF2
7FF0
0010
b(t)
7FF27FF0
7FF00010
0010init
BUS(t)BUS(t-1)
Figure 3.1.1a: No Encoding   Figure 3.1.1b: Bus-Invert Encoding 
Figure 3.1.1: Example of Bus-Invert Encoding 
to ‘7FF0’, ‘7FF0’ must be transferred directly and INC must be de-asserted because 
(7FF0 – 0010)≠4. There are 12 transitions in this transfer, including 11 transitions 
on address bus and 1 transition on INC line. In the last 4 transfers (‘7FF2’ ~ ‘7FF8’), 
these value must be transferred through bus even if they are all in sequence. It is 
because that their stride (=2) do not equal to the stride applied by T0 in this example. 
3.3 T0-C 
The T0-C is a modified method of T0. It does some changes to avoid adding the 
extra control line. The main idea of T0-C is that making a one-to-one and onto 
function. There must be existent a corresponding inverter function. Figure 3.1.1 is the 
T0-C function. When current instruction address is equal to previous instruction 
address adds the specific stride value, the sender sends the previous Bus value (fixes 
Bus value) instead. On the other hand, if the current instruction address is equal to 
previous Bus value, sends the previous instruction address adds the specific stride 
value. The other cases will be sent without any change. Because this is a one-to-one 
and onto function, the receiver can easily get the instruction addresses back by the 
inverter function. 
Following Table 3.3.1 illustrate the T0-C algorithm. 
 
Figure 3.3.1: T0-C function 
 
Following Table 3.4.1a and Table 3.4.1b illustrate the DAT algorithm. 
 
Table 3.4.1a is a simple example 
 
Table 3.4.1b is corresponding DAT. 
 
3.5 Peter Petrov’s Instruction Bus Encoding 
Petrov’s bus encoding scheme shown in Figure 3.5.1 is an application-specific 
dynamic customization methodology for power minimization in the instruction buses. 
Fundamentally, it uses application-specific information to identify optimal power 
encoding. This encoding concentrates the effort on the application hot-spots and 
encodes the instructions at static time. The encoded instructions reside in the 
 
Figure 3.5.2: Basic block partitioning example 
 
Figure 3.5.3: Basic concept of Petrov’s encoding 
 
Table 3.5.1: The 16 function of two Boolean variables 
 
 
Figure 3.6.1: Design flow of BIBITS bus encoding scheme 
 
The design issues of BIBITS encoding are instruction partitioning and encoding 
function selection. The objective of these design issues is to use the most suitable 
encoding functions for different instruction partitions. 
An instruction is partitioned into fields according to its format. Using the MIPS 
instruction formats as an example, an instruction is partitioned as in Figure 3.6.2. All 
register fields become individual partitions; bit 6 and 30 are in one partition and not 
to be encoded since they cause bit transitions relatively infrequently, and all the other 
partitions are in 5-bit groups. 
 
Figure 3.6.2: BIBITS instruction partitioning 
 
 
4 Low-Power Instruction Bus Encoding 
4.1 簡介 
The design of our proposed bus encoding scheme to reduce the number of bit 
transitions on instruction bus is introduced in this chapter. The design flow of applying the 
proposed methodology is illustrated in Figure 4.1.1. 
This encoding concentrates the effort on the application hot-spots and encodes the 
instructions at static time. The encoded instructions reside in the program memory, and the 
processor core receives information about transformation residing in additional table 
nearby the processor, either when loading the program or when running the software. The 
processor’s fetch module uses this information to efficiently restore the original bit 
sequence at dynamic time. We will describe each added component in the following 
sections. 
Compiler
and  Linker
Proposed
Encoding
Instruction 
Memory
Decoding 
Signal
CPU
Static Time Dynamic Time
Source Code
Program
Binary
Encoded
binary
DecoderInstructionBus
 
Figure 4.1.1: Design flow of our bus encoding 
4.2 設計方法 
Fundamentally, our encoding scheme uses application-specific information to 
identify optimal power encoding. The encoding scheme is divided as: encoding method 
algorithm and hardware mechanism. The part of encoding method algorithm introduces 
how we encode instructions at static time. Then we discuss the hardware support and the 
overhead in terms of power consumption. 
4.2.1 Encoding method algorithm 
First, an instruction is partitioned into several fields with k-bit size (k=1~32), 
and each field is as an encoding unit. While the bus width is typically 32-bits, for 
When identifying a codeword Y, the mapping τ is also identified for the partition 
to restore the original pattern.  
We proposed two transformation classes as follow, and both of them can easily 
help us to restore the original pattern.  
Type 1: X i = Xi-1 OP Y i  
Type 2: X i = Y i-1 OP Y i  
Where X i and X i-1 represent original pattern of current cycle and of previous 
cycle respectively, Yi and Yi-1 represent encoded pattern of current cycle and of 
previous cycle respectively, and OP represents the Boolean operation. The first class 
of transformations is satisfied if the original pattern can be restored through the 
operation of previous original pattern and current codeword, while the second one is 
satisfied if the original pattern can be restored through the operation of previous 
codeword and current codeword. Both classes of transformations are very efficient to 
compute, since they correspond to simple Boolean operations two variables. The total 
number of such logic operations is 1622
2 =  for each of the two transformation 
types. 
4.2.2 Hardware Support 
The hardware mechanism consists of three main modules: basic-block 
identification table, transformation table and decoding logic. The block diagram of 
the proposed method is shown in Figure 4.2.3. The blocks inside the dotted line are 
our designed circuits, the decoding-control logic, that contain four elements: 
instruction fetcher, basic block identification table, transformation table, and 
decoding logic. This hardware mechanism may be combined with processor core into 
a single chip. 
4. Decoding logic:  
The decoding logic receives the control bits τn from TT and indexing TSIR, and 
selects decoder function to restore each partition of encoded instructions. 
 
Figure 4.2.4: Organization of each decoding component 
4.2.3 Illustration 
Figure 4.2.5 and Figure 4.2.6 are 5-bit partition encoding and decoding 
examples. In this example, 01101 is identified as the most suitable codeword because 
it has fewest bit transitions and also it satisfies one of the transformation equations. 
In figure 4.2.3.2, the codeword 01101 is restored by the transformation function. 
candidates. We find that our encoding can save most energy when the number of 
decoding function candidates is four and the partition size is five bits. 
 
0.00%
10.00%
20.00%
30.00%
40.00%
50.00%
60.00%
Our
_2τ
_2
Our
_4τ
_2
Our
_8τ
_2
Our
_32
τ_
2
Our
_2τ
_3
Our
_4τ
_3
Our
_8τ
_3
Our
_32
τ_
3
Our
_2τ
_4
Our
_4τ
_4
Our
_8τ
_4
Our
_32
τ_
4
Our
_2τ
_5
Our
_4τ
_5
Our
_8τ
_5
Our
_32
τ_
5
Our
_2τ
_6
Our
_4τ
_6
Our
_8τ
_6
Our
_32
τ_
6
Our encoding
En
erg
y s
av
ing
average
 
Figure 4.3.1: Energy saving of our encoding with different number of decoding 
functions and partition size 
 
4.3.2 Bit Transition Reduction of Different Techniques  
Figure 4.3.2 displays the energy saving by applying different techniques in six 
different benchmark programs respectively. There are four techniques applied in the 
figures: BIBITS, Petrov’s bus encoding scheme, our proposed bus encoding scheme, 
and our bus encoding scheme with optimal decoding function selection. All basic 
block in program are encoded and each basic block can have his own small set of 
decoding function candidates. 
5 Low-Power Multiplexed Address Bus Encoding 
5.1 簡介 
CPU
Inst Address
Memory
Inst/Data AddressInst/Data Address
Read/Write
Data Address
M
U
X
MemRequest  
Figure 5.1.1: diagram of general instruction/data mixed address bus 
 
Figure 5.1.1 shows the diagram of general instruction/data mixed address bus. CPU 
multiplex the instruction address stream and data address stream into one stream, and 
transfer this stream via instruction/data mixed address bus. Two control lines, called 
Read/Write and MemRequest, are traditional memory control signals. 
In this case, while instruction fetch sequence, data read sequence, and data write 
sequence each has its own characteristics, as mentioned in section 2.2, these 
characteristics are unfortunately torn apart and severely contaminated due to the 
intervention of these address sequences in a single address trace. How to preserve and 
utilize the individual characteristics of instruction address sequence and each data 
read/write in bus encoding hence becomes an interesting problem. 
5.2 設計方法 
In my design for instruction/data mixed address bus, encoder/decoder is added into 
CPU/memory. The encoder separately receives two address streams: instruction address 
stream and data address stream, and transmit the encoded address to the decoder in the 
memory. The decoder has to output the original addresses to the memory. Needed 
decoding information may be sent through some extra control signals. Figure 5.2.1 is the 
diagram of my instruction/data mixed address bus encoding. 
 
CPU
encoder
Inst Address
Memory
decoder Inst/Data Address
Encoded Address
Control signals
Read/Write
Data Address
MemRequest  
Figure 5.2.1: diagram of my instruction/data mixed address bus encoding 
 
5.2.2 Applying different stride value on each data access (Stride-Table) 
Data addresses are resulted from load/store instructions, and each load/store 
instruction usually generates consecutive address sequence when it is executed more 
than once. While data access of each load/store instruction has its own stride 
characteristics, these stride characteristics are unfortunately torn apart and severely 
contaminated due to the intervention of these data accesses in a single data address 
trace. How to preserve and utilize the stride characteristics of data access of each 
load/store instruction hence becomes an interesting problem. As a result, if individual 
stride value is applied for data access of each load/store instruction, more power 
saving must be gained. 
How to tell which load/store instruction is executed in the instruction/data 
mixed address bus? The main idea is that because the data access is resulted by 
execution load/store instruction, the last instruction address before this data access 
should be the address of load/store instruction. Even if taking the pipelining effect of 
CPU, the real address of load/store instruction should equal to the last instruction 
address minus an offset value. As a result, I take the last instruction address before 
data access as the key information of telling which load/store instructions is executed 
in this design. 
I/D selector
decoder
DAT StrideTable
I D
BUS
INC-DAT/ST
encoder
DAT StrideTable
I D
......
......
Index
Address
......
......
Applied
Stride
......
......
Last
Address
Stride Table
 
Figure 5.2.3: diagram of I/D selector with T0 DAT and Stride-Table 
The Figure 5.2.3 shows the diagram of I/D selector with T0 DAT and 
Stride-Table. This approach adds a “Stride Table” into both encoder and decoder. 
Each entry of Stride-Table records three values: “Index Address”, “Applied Stride”, 
and “Last Address”. The “Index Address” records the address of last instruction 
address before data access; the “Applied Stride” records the stride value to be applied 
when executing this load/store instruction; the “Last Address” records the data 
address accessed by the load/store instruction last time. Moreover, one control signal, 
called ST, is required to indicate which address is not transmitted on the bus but the 
decoder could calculate the address by information in the Stride-Table. Here, this 
control signal can be combined with the INC-DAT line of T0 DAT method. 
How this approach works? While transferring the instruction addresses, the I/D 
Selector is asserted and T0 DAT method works as if it is applied in the instruction 
I  20
D 600
I  24
I  28
D 100
I  32
D 400
I  36
I  40
D 900
I  44
I  48
I  52
I  56
I  60
Address Sequence
I  20
D 604
I  24
I  28
D 104
I  32
D 396
I  36
I  40
D 898
I  44
I  48
I  52
I  56
I  60
I  20
D 608
I  24
I  28
D 108
I  32
D 392
I  36
I  40
D 896
I  44
I  48
I  52
I  56
I  60
Source
Address
Target
Address
DAT
red&italic:   bus frozen
black: transmit value
Index
Address
Applied
Stride
Last
Address
Stride Table
 
Figure 5.2.4: example of I/D Selector with T0 DAT and Stride-Table, At Start 
 
Figure 5.2.4 shows a snapshot at start. The DAT and Stride-Table are both 
empty at this time. 
Snapshot of first iteration: 
I  20
D 600
I  24
I  28
D 100
I  32
D 400
I  36
I  40
D 900
I  44
I  48
I  52
I  56
I  60
Address Sequence
I  20
D 604
I  24
I  28
D 104
I  32
D 396
I  36
I  40
D 898
I  44
I  48
I  52
I  56
I  60
I  20
D 608
I  24
I  28
D 108
I  32
D 392
I  36
I  40
D 896
I  44
I  48
I  52
I  56
I  60
Source
Address
Target
Address
DAT
Index
Address
Applied
Stride
Last
Address
Stride Table
20 4 600
28 4 100
32 4 400
40 4 900
red&italic:   bus frozen
black: transmit value  
Figure 5.2.5: example of I/D Selector with T0 DAT and Stride-Table, Iteration 1 
 
Snapshot of third iteration: 
I  20
D 600
I  24
I  28
D 100
I  32
D 400
I  36
I  40
D 900
I  44
I  48
I  52
I  56
I  60
Address Sequence
I  20
D 604
I  24
I  28
D 104
I  32
D 396
I  36
I  40
D 898
I  44
I  48
I  52
I  56
I  60
I  20
D 608
I  24
I  28
D 108
I  32
D 392
I  36
I  40
D 896
I  44
I  48
I  52
I  56
I  60
Source
Address
Target
Address
DAT
Index
Address
Applied
Stride
Last
Address
Stride Table
20 4 600
28 4 100
32 4 400
40 4 900
4
4
396-4
898-2
8
8
2
6
60 20
red&italic:   bus frozen
black: transmit value  
Figure 5.2.7: example of I/D Selector with T0 DAT and Stride-Table, Iteration 3 
In the third iteration and further iterations, all instruction and data addresses do 
not need to be transmitted via bus. Transmissions of these addresses are just asserting 
INC-DAT/ST line and switching I/D Selector line respect. This situation will be held 
until leaving the loop. 
5.2.4 Integration of Control Lines  
Though Stride-Table avoids the transmission of regular data access, there are 
still some data addresses will be transmitted via bus. While transmitting these data 
addresses, Bus-Invert could be added for additional power saving. The combination 
of Stride-Table and Bus-Invert is shown as diagram in Figure 5.2.8: 
I/D selector
decoder
DAT ST
I D
BUS
INC-DAT/ST-INV
encoder
DAT ST
I D
 
Figure 5.2.8: diagram of Stride-Table combining with Bus-Invert 
The INV control line required for Bus-Invert method is combined with 
INC-DAT/ST line. The keys to identify the meaning of an asserted INC-DAT/ST-INV 
control line are “I/D Selector” status and bus frozen or not. 
40%
50%
60%
70%
80%
90%
100%
audio epic toast jpec Average
% 
of 
Re
du
ce
d T
ran
sit
ion
s
T0-BI T0DAT-T0_BI_1/S/RW T0DAT-ST(32) T0DAT-ST(128) T0DAT-STINV(128)
 
Figure 5.3.2: Results of I/D Selector with T0 DAT and Stride-Table  
 
In figure 5.3.2, it’s easy to find that I/D Selector with T0 DAT and Stride-Table(32) 
achieves 70.8% transition reduction of the un-encoded bus, which is 24.7% more than 
T0_BI method and 7.5% more than that of I/D Selector with T0 DAT and T0_BI_1/S/RW. 
I/D Selector with T0 DAT and Stride-Table(128) achieves 77.4% transition reduction of 
the un-encoded bus, which is 33.8% more that T0_BI method and 16.6% more than that of 
I/D Selector with T0 DAT and T0_BI_1/S/RW. 
 
 
Figure 6.2.1: the coding flow diagram 
6.2.1 VL-Encoder 
The purpose of VL-Encoder is to reduce Bus transactions. There are two 
problems rising here. The first problem is what to be transmitted and what to be 
skipped. The second problem is how the receiver knows the number of Bus 
transactions of a codeword.  
The first problem is what can be skipped without sending and what should be 
transmitted on Bus. The solution is to transmit the effective fragments and skip the 
redundant fragments without sending. The redundant bits type will be different on 
different streams. There will be default redundant type at each stream. Because the 
receiver knows the redundant bits type, it can retrieve the redundant fragments which 
are not transmitted.  
The second problem is how the receiver knows the number of Bus transactions 
of a codeword. If the receiver end wants to know this additional information, the 
sender has to add this information into the codeword. There will be two main 
directions to achieve this purpose. The first method is to add the information of the 
number of Bus transactions at the beginning of first transmission. The second method 
is to inform the receiver whether the total fragments of a codeword are transmitted or 
not at every Bus transaction. Following I will introduce these two methods and do a 
simple comparison to select the suitable method as my VL-Encoder policy at this 
environment. 
except the extra two information bits are (9*n - 2) bits. 
In method two, the extra EB is permanent. The number of bus transactions if 
from 1 to 4. When the bus transactions are n times, the sender sends (8 * n) effective 
bits. 
The comparison of representable effective bits of these two methods is shown in 
Table 6.2.1 
 The effective bit 
represented by method 1 
The effective bit 
represented by method 2 
The number of bus 
transactions is 1 9 – 2 = 7 8 
The number of bus 
transactions is 2 2 * 9 – 2 = 16 2 * 8 = 16 
The number of bus 
transactions is 3 3 * 9 – 2 = 25 3 * 8 = 24 
The number of bus 
transactions is 4 4 * 9 – 2 = 34 (32) 4 * 8 = 32 
Table 6.2.1 
 
The representable effective bits of a method will affect the number of bus 
transactions of a codeword. For example, if the number of effective bits of a 
codeword is 8 bits, method one needs 2 bus transactions because 1 bus transaction 
can only represent 7 effective bits. The main difference of these two methods appears 
when the number of effective bits of a codeword is 8 bits or 25 bits. When the 
effective bits of a codeword is 8 bits, the method one needs 2 bus transactions and 
method two needs 1 bus transaction. When the effective bits of a codeword is 25 bits, 
the method one needs 3 bus transactions and method two needs 4 bus transactions.  
I use instruction address stream and data address stream to compare the effect of 
these two methods. I don’t use instruction stream to evaluate because I will compress 
instruction stream using its statistic property not its numerical property. I don’t use 
data stream to evaluate because there may be multiple redundant types are utilized 
and it need adding other information bits into codeword. Table 6.2.2 is the bus 
transactions ratio to narrow bus without coding (4 bus transactions). 
 IA DA 
Method one 27.49% 50.08% 
Method two 26.81% 49.39% 
Table 6.2.2 
※ Encoder 3: NBDAT (1 extra control line)  
Discontinuous Address Table (DAT) algorithm focuses on the discontinuous 
address behavior of instruction addresses. However, I will propose a modified DAT 
which I call it “Narrow Bus DAT” (NBDAT). This modified DAT has a filter 
mechanism. If a record can reduce Bus transaction, I will record it into NBDAT. 
Otherwise, I won’t record it into NBDAT even if the addresses are discontinuous. 
This will raise the utility of DAT.  
Proposed Methods :  
I will propose several combinational coding methods which have different area 
overhead and different Bus transactions reduction.  
※ Proposed Method 1: (1 extra control line)  
The encoder 1 (T0) can be adopted on narrow Bus independently without the 
assistance of the VL-Encoder. The general T0 on normal Bus will send a signal 
instead of sending the instruction addresses when the instruction addresses are 
sequential. The T0 on narrow Bus uses the same idea. When the instruction addresses 
are sequential, the sender sets the extra control line as 1 and freeze the Bus value. 
The number of Bus transaction will be 1. Otherwise, the sender sets the extra control 
line as 0 and transmits the instruction address byte by byte. The number of Bus 
transaction will be 4. I will use the number of Bus transaction of this method as base 
line to compare with other methods.  
※ Proposed Method 2: (1 extra control line)  
The second method is the combinational method of encoder 2 and EB 
VL-Encoder. The T0 can be used on narrow Bus to reduce Bus transactions 
independently but T0-C can’t. This is because the 32-bit instruction address to the 
8-bit Bus is a multiple to one function. There is no inverter function if there is no 
other extra coding information. Therefore, method 2 combines T0-C encoder and EB 
VL-Encoder together to reduce Bus transactions. The T0-C is a 32-bit to 32-bit 
function which can convert the effective bits of a codeword into the redundant bits. 
EB VL-Encoder decomposes the output of T0-C and puts the effective fragments on 
narrow Bus to transmit.  
※ Proposed Method 3: (2 extra control lines)  
The third method is the combinational method of encoder 2, encoder 3 and EB 
VL-Encoder. The NBDAT and T0-C can be adopted on narrow Bus as encoder at the 
same time and get more Bus transaction reduction.  
below.  
The first case is that the 3-byte-address of transmitted codeword is the same 
with the 3-byte-address of Bus value. In this case, the number of effective bytes of 
the transmitted codeword will be 1 and this codeword needs only 1 Bus transaction. 
The information of extra control line is set to mean “not use record”.  
The second case is that the 3-byte-address of transmitted codeword differ from 
the 3-byte-address of Bus value and this 3-byte-address of transmitted codeword is 
not stored in historical address record. In this case, the number of effective bytes of 
the transmitted codeword will be more than 1 and this codeword needs more than 1 
Bus transactions. The sender will set the information of extra control line as “not use 
record” and store the 3-byte-address of previous Bus value into the historical address 
record as update.  
The third case is that the 3-byte-address of transmitted codeword differ from the 
3-byte-address of Bus value but this 3-byte-address of transmitted codeword has 
been stored in historical address record. In this case, the sender will change the 
leading 3 bytes of the transmitted codeword to be the same with the leading 3 bytes 
of the Bus value, and set the information of extra control line as “index of the 
3-byte-address in historical address record”. In this way, the number of effective 
bytes of transmitted codeword will be 1 and the number of Bus transaction of this 
codeword has been reduced to only 1.  
Table 6.2.3 is a 1-entry 3-byte-address record example. When time is 2 the case 
one happens. When time is 3 the case two happens. When time is 4 the case three 
happens. The case three affects the number of Bus transactions. When time is 4, the 
number of effective bytes of the codeword reduces from 4 to 1 after encoding. This 
reduces the Bus transactions from 4 to 1 at the same time.  
b(t):real value, B(t):bus value, 
Time Sender Bus control state 1 entry Table 
T b(t) B(t) control state Block record 
1 FFFFFF00 FFFFFF00 Not use - - - - - - - - 
2 FFFFFF01 FFFFFF01 Not use - - - - - - - - 
3 EEEEEE00 EEEEEE00 Not use FFFFFFFF 
4 FFFFFF02 - - - - - - 02 Index FFFFFFFF 
Table 6.2.3 
 
At algorithm 3 and algorithm 4, I will propose two modification versions of 
historical addresses algorithm. First modification, 2nd version, is to combine the 
information of EB of VL-Encoder and historical addresses indexes information 
In 2nd version of historical addresses algorithm, one state can indicate one 
historical address index. If a system can tolerate two (Y = 2) extra control lines, it 
can indicate two (22 – 2 = 2) historical address indexes. This 3rd version of historical 
addresses algorithm is modified and can represent two 1-byte-address records, two 
2-byte-address records, and two 3-byte-address records with these two states. This is 
because when I find k-byte-address is utilizable, I will change the first k bytes of 
codeword into redundant bytes and set the historical address index. I have to transmit 
the other (4 - k) effective byte. When the receiver receives these (4 - k) effective byte 
and the historical address index, it will know which size of historical address record 
should be looked up by the number of Bus transactions. Table 6.2.4 is an example 
and Table 6.2.5 is the corresponding change of 2-entry historical address record. 
When the time is 3, the sender utilize the first (index = 1) historical address of 
2-byte-address record. The sender sends the two effective bytes and sets the control 
state as “index = 1”. The receiver receives the second fragment of this codeword and 
finds the control state is set to “index = 1”, it knows that it should look up 
2-byte-address and reload the first historical address of 2-byte-address record back to 
codeword.  
 
B(t):real value, B(t):bus value 
Time Sender Bus Narrow Bus control state 
 b(t) B(t)  index 
1-1 FFFFFF00 FFFFFF00 FF Not End 
1-2   FF Not End 
1-3   FF Not End 
1-4   00 End 
2-1 EEEEEE00 EEEEEE00 EE Not End 
2-2   EE Not End 
2-3   EE Not End 
2-4   00 End 
3-1 FFFF0000 - - - - 0000 00 Not End 
3-2   00 Index = 1 
Table 6.2.4 
 
6.3 實驗結果 
The simulator we use is simple-scalar for ARM instruction. The simulated programs 
are Mibench. Our environment is 8-bit width narrow Bus and 32-bit width data.  
The area overheads include extra control lines, extra coding logic gates, and 
additional table. We assume the area overhead of external extra control lines is much 
severer than extra logic gates. Because of the table size must be limited; We will use 
different size of table to simulate and observe the effects of different size, and then 
suggest a “good enough” size. The main advantage of coding is to reduce Bus transactions. 
This will reduce Bus bit toggles at the same time. However, We won’t consider the power 
advantage of reducing bit toggles. We will put my attention on the Bus transactions only. 
6.3.1 Simulation Result of Instruction Address Streams 
Figure 6.3.1 is the bus transactions ratio of DAT and NBDAT comparing to 
narrow bus without coding. The Y-axis is the bus transactions ratio of the coding 
methods comparing to narrow bus without coding. The X-axis is the table entries of 
DAT and NBDAT. Because NBDAT has a filter to filter the helpless entry not to save 
in table, NBDAT can reach lower bus transactions ratio than DAT. The bus 
transactions ratio of 512-entry NBDAT can reach the same effect with unlimited 
NBDAT. I choose 16-entries NBDAT as “good enough” choice and the effect of 
512-entries NBDAT as the lower bound of bus transactions ratio of NBDAT 
algorithm. 
 
Figure 6.3.1: The bus transactions ratio of DAT and NBDAT in different number of table 
entries 
 Figure 6.3.3: The bus transactions ratio of different number of control lines using in 
block preserving algorithm. 
Figure 6.3.4 is the comparison of the proposed coding methods. The Y-axis is 
the bus transactions ratio of the coding methods comparing to narrow bus without 
coding. The X-axis lists the proposed three coding methods. The last value is the bus 
transactions ratio of normal bus. The bus transactions ratio is 25%. The first method 
is to transplant the normal bus variable stride algorithm (similar to T0) to narrow bus. 
The second is that the variable stride algorithm (similar to T0-C) and EB decomposer 
work together. The third, forth, fifth, and sixth method are that the variable stride 
algorithm (similar to T0-C), block preserving algorithm and EB decomposer work 
together. They are corresponding to 2-bit, 3-bit, 4-bit, and 8-bit (unlimited) extra 
control lines.  
7 References 
[1] A.P. Chandrakasan, S. Sheng, and R.W. Brodersen, “Low-Power CMOS Digital 
Design,” IEEE Journal of Solid-State Circuits, Vol. 27, No. 4, pp. 473-483, Apr.1992. 
[2] A. Chandrakasan, R. Brodersen, “Minimizing Power Consumption in Digital CMOS 
Circuits,” Proceedings of the IEEE, Vol. 83, No. 4, pp. 498-523, April 1995. 
[3] K. Choi, W. Lee, R. Soma, and M. Pedram, “Dynamic Voltage and Frequency Scaling 
Under a Precise Energy Model Considering Variable and Fixed Components of the 
System Power Dissipation,” Proc. of International Conference on Computer Aided 
Design (ICCAD), Nov. 2004. 
[4] Kiran Puttaswamy et al. “System Level Power-Performance Trade-offs in Embedded 
Systems Using Voltage and Frequency Scaling of Off-chip Buses and Memory,” 
ISSS’02, Pages: 225 – 230 Oct.2002. 
[5] M. R. Stan and W. P. Burleson, “Bus-invert coding for low-power I/O,” IEEE 
Transactions on VLSI Systems, Vol. 3, No. 1, pp. 49-58, 1995 
[6] L. Benini, G. DeMicheli, E.Macii, D. Sciuto, and C. Silvano, “Asymptotic 
zero-transition activity encoding for address busses in low-power 
microprocessor-based systems” GLS-VLSI-97: IEEE 7th Great Lakes Symposium on 
VLSI,pp. 77-82, Urbanana-Champaign, IL, March 1997. 
[7] Aghaghiri, Y.; Fallah, F.; Pedram, M., “Irredundant Address Bus Encoding for Low 
Power,” ACM ISLPED ’01, Huntington Beach, California, USA, August 6-7, 2001 
[8] P.petrov and A.Orailoglu, “Low-Power Instruction Bus Encoding for Embedded 
Processors,” IEEE Transactions on VLSI,VOL. 12, NO. 8, Aug. 2004.  
[9] Chin-Tzung Cheng, Wei-Hau Chiao, Jean Jyh-Jiun Shann, Chung-Ping Chung, and 
Wen-Feng Chen, “Low-power BIBITS Encoding with Register Relabeling for 
Instruction Bus,” 2005 IEEE VLSI-TSA International Symposium on VLSI Design, 
Automation, and Test (VLSI-TSA-DAT’05) 
8 計畫成果自評 
本計畫於三年執行期間，針對計畫書中提及之三大方面：Low-Power Dynamic 
Branch Prediction, Low-Power Bus Encoding, Low-Power Cache Design 進行研究，皆有
所斬獲，並且額外提出 Low-Power Task Scheduling 方面設計成果一篇，確實完成本
計畫的目標。截至目前為止發表三篇國際會議論文、一篇國際期刊論文、兩篇專利(審
查中)，並有三篇即將送審之國際會議論文。因此，應當符合本計畫預期達成之目標。 
 
一、 參加會議經過 
 
此次參加的會議為 The 7th IEEE/IFIP International Conference on Embedded and 
Ubiquitous Computing (EUC-09)，與 The 12th IEEE International Conference on 
Computational Science and Engineering (CSE-0)、The 2009 IEEE International Conference 
on Privacy, Security, Risk and Trust (PASSAT-09)、The 2009 IEEE International Conference 
on Social Computing (SocialCom-09)、及 23個 Symposiums/Workshops聯合舉行。由加
拿大St. Francis Xavier University主辦，IEEE and IEEE Computer Society、IEEE Technical 
Committee of Scalable Computing (TCSC) 、 及 IEEE Canada Atlantic Section 
Computational Intelligence Chapter贊助。於 8月 29日至 31日在加拿大溫哥華舉行。 
 
EUC-09投稿論文篇數約 160篇，為其 Main Conference接受的有 50篇，主要分為下
列主題： 
1. Embedded Software and Optimization; 
2. Embedded Systems and HW/SW Codesign; 
3. Multimedia and Data Management; 
4. Power-Aware Computing; 
5. Sensor Networks; 
6. Wireless Communications; 
7. Middleware and P2P; 
8. Pervasive and Ubiquitous Computing; 
9. Dependable, Autonomic, Secure Computing; 
10. Real-Time and Cyber-Physical Systems. 
 
EUC-09除Main Conference外，也包含下列九個 Symposiums/Workshops： 
1. The 2009 International Symposium on Embedded and Pervasive Systems (EPS-09) 
2. The 4th International Symposium on Cloud and convergence Computing (2CCom-09) 
3. The 2009 International Symposium on Trusted Computing and Communications 
(TrustCom-09) 
4. The 2nd International Workshop on Adaptation in Wireless Sensor Networks 
(AWSN-09) 
5. The 2009 International Workshop on Reconfigurable, Multicore Embedded Systems 
(WoRMES-09) 
6. The 2009 international Workshop on Pervasive Multimedia Sensor Networks 
(PMSN-09) 
7. The 3rd International Workshop on Ubiquitous UnderWater Sensor Network 
(UUWSN-09) 
8. The 2009 International Workshop on Ubiquitous Network Computing (UNC-09) 
9. The 2009 International Workshop on Ubiquitous Computing, Management, and 
Embedded Applications in Healthcare: Strategies and Application Case Studies 
(UbiHealth-09) 
 
除論文發表外，聯合會議大會亦精心安排九場 Keynote Speeches、兩場 Panels、和兩場
Tutorials。其中，與 EUC-09直接相關的為：  
1. Keynote: Cache-Aware Scheduling and Analysis for Multicores 
Speaker: Prof. Wang Yi (Uppsala University, Sweden) 
2. Keynote: White Space Networking – Is It Wi-Fi on Steroids? 
Speaker: Dr. Victor Bahl (Microsoft Research Redmond, USA) 
 
