2Introduction
In pathology, a whole view of specimens is required for diagnosis. Pathologists want to navigate
the specimens on computer system and enlarge potions of the sample that they might be
interesting. They wish to exam the specimens in computer system as they can manipulate in
microscope (as a virtual slide microscopic images). To fulfill this purpose, total slide of
specimens must be scanned and digitalized with high resolution microscope. The scanning result
constitutes a very large digital image (up to gigabytes in each slide of specimen). The size of the
scanning result is too large and to handle by convention DICOM viewer. It also constitutes
overhead to transfer such large image through DICOM network protocols. Although DICOM has
defined the object of microscopic images[1], converting the pathology images into DICOM
format and viewing the images in conventional DICOM viewer is not suitable for pathology
diagnosis.
Although the size of the reconstructed pathology images is very large, we can only display a
small portion of the images on computer each time (limited by the size of screen and resolution of
the computer system). It is not necessary to transfer the whole image to client when we want to
exam it through the network. Recently, lots of virtual slide image system demonstrated on the
network uses web solution to handle the interaction between server systems and remote
clients[2-4]. With the systems, we can use browser to navigate the pathology images. Web-based
virtual slide solution is a proper means for viewing pathology image on the network, and HTTP
link is an easy way for system integration. However, most of virtual slide systems using
proprietary protocols and plug in components to transfer and display pathology images. The plug
in components can not handle by other systems. And it is difficult for us to use the proprietary
protocols for accessing pathology images that stores on the server. This constriction has limited
the expansion of the pathology system for other usage, such as integrating with reporting systems
for clinical diagnosis or using virtual slide images as contents in standard learning systems for
medical education. Although DICOM also has defined a protocol [5] (WADO: Web Access to
DICOM persistent Object) for viewing medical images on web, most of the virtual slide systems
do not support the protocol. Currently, we can not using the standard web protocol to access
pathology virtual slide images. In this paper, we will investigate the usage of WADO protocols
for accessing virtual slide image. We try to use standard HTML and HTTP protocol to present
and transmit digital microscope images. We will use pure HTML and JavaScript to construct a
virtual slide image viewing system. We will show the fundamental requirements of a virtual slide
image viewing can be accomplished by using the pure web solution. We will demonstrate that the
pure HTML and JavaScript solution can easily expand its usage with other web system, such as a
web base pathology report system. And the solution can be utilized in various browsers and web
servers, which is very import in a heterogeneous healthcare environment.
Method
4Figure 1. A graphic demonstrates a display canvas moving on a huge background image.
In figure 1, the background is a huge microscope image that was tiled as fix sized
blocks(Bi0j0,Bi0j1â€¦,Bimjn). In a virtual slide system, the display canvas may navigate on the
huge image freely. In a web system, we can use JavaScript that running on browser for displaying
the tiled blocks to achieve the moving effect; As demonstrated in Figure 1, P0, P1, P2 are the
up-left points of the canvas when we move the viewing position. When a mouse move event with
the movement (dX0,dY0) is initiated, the canvas moves from P0 to P1. In this case, the
blocks( Bi0j0, Bi0j1 Bi0j2, Bi0j3, Bi1j0, Bi1j1, Bi1j2, Bi1j3, Bi2j0, Bi2j1, Bi2j2, Bi2j3) that
should be display on the canvas are the same. Only the position of each block will move
(-dX0,-dY0). When canvas moves from P1 to P2, the blocks(Bi1j1, Bi1j2, Bi1j3, Bi2j1, Bi2j2,
Bi2j3 ) are still on the canvas with the position adjustment (-dX1,-dY1). And new blocks (Bi1j4,
Bi2j4, Bi3j1, Bi3j2, Bi3j3, Bi3j4) should be shown on the canvas also. The position of the new
blocks can easily estimate, for example the X value of Bi1j4 is the X value of Bi1j3 plus block
size( that is 256) and the Y values are the same of Bi1j3 and Bi1j4. The position adjustment of
blocks and adding new blocks to canvas can be accomplished in a JavaScript function that
corresponding to the movement event. When canvas moves from P0 to P1, we only have to adjust
the position of blocks. The JavaScript event function would run very quickly in browser. And the
VS image shown in canvas would move smoothly when no needs to show new blocks on canvas.
When canvas moves from P1 to P2, the JavaScript function should initiate HTTP requests and
acquire new blocks form web server. If the block size is small enough(average 40k bytes in our
system) and network bandwidth is acceptable, the process of adding and displaying new blocks to
6column_max = the smallest value of column number >= Rx2 *BlockFactor
row_min = the greatest value of row number <= Ry1*BlockFactor
row_max = the smallest value of row number >= Ry2* BlockFactor
Where BlockFactor = RB/RO/BlockSize. RB is the selected resolution(block resolution). RO is
the original resolution (object lens resolution).
There are two means for displaying the region in a pathology report web page. The first method is
to recombine the blocks into a jpeg image and cut the edge of the image that out of the region.
The reconstruction process shall be done in our web server and post the cut jpeg image with the
pathology report web page to browser. The second method is setting a canvas in the pathology
report web page. The size of the canvas is assigned as the same as the region that we wanted to
display. A metadata that describe the location of each block that should be shown on the canvas is
included in the web page also. When we open the web page, the blocks with in the region will be
loaded to browser. With the metadata and block images, we can redraw the virtual slide region,
using the method similar to the presentation of virtual slide on web.
Results
Pure web based virtual slide viewing system
As the methods described previously, we have constructed a virtual slide microscope image
system. We used the system to assist histology and pathology education for the medical students
in our university. We have scanned hundreds of slides with various organs and potions of samples.
Students can use the system, instead of conventional microscope, to exam the normal and
abnormal cells structure of slide samples. Not as conventional microscope, it is convenient to
identify the location of a specific structure on the digital virtual slides. We have added
annotations of histology and pathology descriptions on each slide. Because it is difficult to
identify the precisely locations on slide samples by real microscope, using the annotated virtual
slide system for students to comprehend the structure meaning of the slide samples (see as
following: figure 2) would be much easier than using a real microscope.
8Figure 3. Pathology report editing interface
We used HTML frames to separate the report into two parts. Frame1(upper parts of the web page)
contains a diagnosis web form for viewing clinical data (patient demographics , illness history,
and impressions) and writing microscope findings. And submit the findings to web server.
Frame2 uses the XML file generated by our virtual slide viewing system and JavaScript to
present evident images. There has a URL link in each evident image. The URL is link to our
virtual slide viewing system. Clicking the image will open the original virtual slide web page.
Pathologist could easily access and navigate the original virtual slide through the linkage.
Because the report is pure web page, it is easy to modify the format and interface of the report for
domain specific requirements. As in this demonstration, Frame1 and Frames2 contain two
separate HTML files. The diagnosis web form in Frame1 can be easily modified according the
requirement of hospitals and departments.
Discussion
Solutions for handling clinical multimedia contents on web
10
environment.
Conclusions
In this paper, we have demonstrated that the well accepted web solution (HTML and JavaScript)
can handle and present huge size digital microscope images on web. There is no need to use
proprietary protocols and plug-in components for constructing a web based virtual slide viewing
system. As demonstrated in our viewing system, the functionalities (adjust display resolution,
move the display canvas, identify navigation location, and show annotations) can be
accomplished by the pure HTML and JavaScript web solution. The solution is easy to integrate
with other web solution. And it also is convenient to adjust the presentation and functionalities of
our HTML web page to fit the various clinical requirements, as the example of pathology report
in this paper. Our pathology viewing and report system might also been used in clinical
environment. The created digital virtual slide images would be parts of digital clinical documents
that should be long term preserved for years. HTML and JavaScript is well accepted in IT
(Information Technology) domain. The presentations of HTML formatted web pages are all the
same in all the browsers. The presentation consistence requirements of clinical documents can
easily achieved by the pure web solution. As parts clinical contents, the pure HTML solution
would be suitable for sharing in the heterogeneous healthcare environment and long term
preserving when system and technology change rapidly.
References
1. DICOM Standard Part 3: Information Object Definitions A.32 Visible Light Image Information
Objects Definitions National Electrical Manufacture Association, USA, 2004
2. XML-Based Virtual Slide Box for Teaching Histology and Pathology. Available:
http://cclcm.ccf.org/vm/virtual_slideboxes.asp
3. MicroBrightField Inc. Available: http://www.mbfbioscience.com/
4. The Virtual Slidebox. Available: http://www.path.uiowa.edu/virtualslidebox/
5. DICOM Standard Part 18: Web Access to DICOM Persistent Object, National Electrical
Manufacture Association, USA, 2004
6. JavaScript Vector Graphics library. Available:
http://www.walterzorn.com/jsgraphics/jsgraphics_e.htm
7. Adobe macromedia flash http://www.adobe.com/products/flash/
8. JPEG 2000 Interactive Protocol (JPIP) http://www.jpeg.org/jpeg2000/j2kpart9.html
9. Microsoft .net 3.0 Windows Presentation Foundation
http://msdn2.microsoft.com/en-us/netframework/aa663326.aspx
10. Moodle course management system (CMS) http://moodle.org/
