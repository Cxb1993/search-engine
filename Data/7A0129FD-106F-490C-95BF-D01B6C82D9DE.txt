 2
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
▓達成目標 
□ 未達成目標（請說明，以 100 字為限） 
□ 實驗失敗 
□ 因故實驗中斷 
□ 其他原因 
說明： 
 
 
 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：□已發表 □未發表之文稿 ▓撰寫中 □無 
專利：□已獲得 ▓申請中 □無 
技轉：□已技轉 □洽談中 □無 
其他：（以 100 字為限） 
 
 
 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
本計畫是研究容錯 EEA 除法器之設計，提出的容錯技術是依據單一檢測碼來
實現交錯式檢測法。由於橢圓曲線密碼系統的特性適合應用於智慧卡、手持
手機上，此新的容錯 EEA 除法器被應用於橢圓曲線密碼系統時，可防止駭客
利用植入攻擊法來破密。 
 
 
 
 4
 
設計可抵抗植入錯誤破解密碼攻擊法之容錯 EEA 除法電路架構 
 
摘要 
植基於同位元檢測法與重複計算法，最近許多學者也開始針對有限場乘法器，研究即時錯誤偵測
的技術。在文獻中，我們發現乘法器植基於同位元檢測法，僅能提供錯誤偵測能力；利用重複計算法，
乘法器能提供錯誤偵測與單一錯誤更正能力。然而在文獻中，存在的有限場除法器設計並未具有即時
錯誤偵測功能，且無法克服駭客用植入攻擊法來破密。本論文提出一個新的交錯式檢測法，來研究容
錯除法器之設計。我們提出的除法器具即時錯偵測能力，很適合應用於橢圓曲線密碼系統防禦駭客利
用植入式錯誤攻擊法。 
 
關鍵詞：除法器、奇偶位元檢查法、歐幾里德延伸演算法。 
 
1. Introduction  
Recently, many researchers have paid much attention to finite field arithmetic because of its use in 
cryptography, especially for elliptic curve cryptosystems (ECC). One of the most important advantages of 
ECC over conventional public-key schemes is that much smaller key sizes are required to achieve the same 
security level [1]. For an example, it is reported in [1] that 160 bits ECC is equivalent to 1024 bits RSA [2]. 
Therefore, ECC is suitable for embedded systems and wireless with low-cost hardware and smaller security 
certificates. Several ECC implementations were reported in the literature at the hardware level [3,4]. The 
efficient implementation of ECC arithmetic is mainly defined over a prime Field GF(p) or binary field GF(2m). 
When elliptic curve points are expressed in a fine coordinate, scalar multiplication plays an important role in 
ECC arithmetic, which includes point-addition and point-doubling. From [1], ECC arithmetic includes 
multiplications and divisions over GF(2m), which are highly time-consuming. Thus, it is desirable to develop 
an efficient division architecture for GF(2m). 
In finite field GF(2m), three schemes are applied for computing division operation, e.g., Fermat’s 
theorem [5], discrete-time Wiener-Hopf equation (DTWHE) [6] and extended Eulid’s algorithm 
(EEA)[7,8,9,10]. For Fermat’s theorem approaches, the division A/B can be represented by repeating 
multiply-square algorithms, such as  ABିଵ ൌ ܣܤଶ೘ିଶ ൌ ܣሺܤሺܤ⋯ሺܤሺܤሻଶሻଶ ⋯ ሻଶሻଶ. This method requires 
m-1 times squarings and m times multiplications for implementing systolic architecture [5]. The second 
method (DTWHE) finds a multiplicative inversion in GF(2m) by solving a system of 2m-1 linear equations 
with 2m-1 unknowns over GF(2). The last method uses the fact GCD(G(x),B)=1, where B is a nonzero 
element in GF(2m) and G(x) is an irreducible polynomial to generate the field. The EEA finds R and S to 
satisfy R ∙ G ൅ S ∙ B ൌ 1. This method can be directly computed by division in GF(2m) [8] and has O(m2) 
space complexity while the first scheme requires O(m3) space complexity. 
 Fault attack is a very powerful side-channel technique to break cryptographic schemes. Boneh et al. [11] 
first introduced how to recover secret keys of RSA and DL-based cryptosystems. This idea is to inject an 
input fault during computations and to use the faulty outputs to deduce information on the secret key stored in 
the secure component. This attack scheme [12] is a recently developed cryptanalysis approach to adopt in 
differential fault analysis, in which faults are injected into cryptosystems. Therefore, the implemented 
concurrent error detection (CED) architecture for ECC is best solution to against fault-based attack scheme. In 
finite field arithmetic architectures, various CED multipliers [13,14,15,16] for polynomial basis and normal 
basis of GF(2m) have been proposed using parity code and RESO schemes. As fore-mentioned architectures, 
 6
10.  ሺR, Uሻ ← ሺୖ୶ , ቀ
୙
୶ቁ௚ሻ; 
11.   β ൌ β െ 1 
12. end for 
 
Observing division algorithm 1, (R,S) and (U,V) in each recursive operation are based on two values  and ݎ଴ 
to determine simple exchange and shift operations. Observing division algorithm 1, each recursive operation 
is satisfied by ݏ௜,଴ ൌ 1. Therefore, from steps 4,7,10, the polynomial Rሺ௜ሻ over GF(2) can obtain as follows: 
Rሺ௜ሻ ൌ R
ሺ௜ିଵሻ ൅ ݎ଴ܵሺ௜ିଵሻ
ݔ  
ൌ 1ݔ ൣ൫ݎ௜ିଵ,଴ ൅ ݎ௜ିଵ,ଵݔ ൅ ⋯൅ ݎ௜ିଵ,௠ݔ
௠൯ ൅ ݎ଴൫ݏ௜ିଵ,଴ ൅ ݏ௜ିଵ,ଵݔ ൅ ⋯൅ ݏ௜ିଵ,௠ݔ௠൯൧ 
ൌ ൫ݎ௜ିଵ,ଵ ൅ ݎ଴ݏ௜ିଵ,ଵ൯ ൅ ൫ݎ௜ିଵ,ଶ ൅ ݎ଴ݏ௜ିଵ,ଶ൯ݔ ൅ ⋯൅ ൫ݎ௜ିଵ,௠ ൅ ݎ଴ݏ௜ିଵ,௠൯ݔ௠ିଵ 
ൌ ݎ௜,଴ ൅ ݎ௜,ଵݔ ൅ ⋯൅ ݎ௜,௠ݔ௠                  (1) 
where 
ݎ௜,௠ ൌ 0 
ݎ௜,௝ ൌ ݎ௜ିଵ,௝ାଵ ൅ ݎ଴ݏ௜ିଵ,௝ାଵ 
ݎ଴ ൌ ݎ௜ିଵ,଴ 
Since the field GF(2m) is generated by the irreducible polynomial G(x), we have 
ݔିଵ ൌ 	 gଵ 	൅ ⋯൅	g୫ିଵx୫ିଶ ൅ ݔ௠ିଵ  
Thus, the polynomial Uሺ௜ሻ is computed as       
Uሺ௜ሻ ൌ U
ሺ௜ିଵሻ ൅ ݎ଴ܸሺ௜ିଵሻ
ݔ 	mod	Gሺxሻ ൌ ݑ௜,଴ ൅ ݑ௜,ଵݔ ൅ ⋯൅ ݑ௜,௠ିଵݔ௠ିଵ              (2) 
where 
ݑ௜,௝ ൌ ݑ௜ିଵ,௝ାଵ ൅ ݎ଴ݒ௜ିଵ,௝ାଵ ൅ ݃௝ାଵሺݑ௜ିଵ,଴ ൅ ݎ଴ݒ௜ିଵ,଴ሻ 
ݑ଴ ൌ ଵ݃ሺݑ௜ିଵ,଴ ൅ ݎ଴ݒ௜ିଵ,଴ሻ 
 
From two steps 5 and 11, we can use two’s complement representation to counting the value , where  is 
needed by ڿ݈݋݃ଶሺ݉ ൅ 1ሻۀ ൅ 1 bits to control GF(2m) division. Assume that ctr ൌ ெௌ஻	&	ݎ଴, the value  
in each recursive division operation is given by the following relationship. 
β ൌ ቊ ߚ െ 1 ݂݅	ܿݐݎ ൌ 0ሺെߚሻ െ 1 ൌ ൫̅ߚ ൅ 1൯ െ 1 ൌ ̅ߚ ݂݅	ܿݐݎ ൌ 1           (3) 
Therefore, the computation of two polynomials S and V in two steps 4 and 7 can obtain the following 
formula. 
S ൌ ctr ∙ R ൅ ctrതതതത ∙ S ൌ MUXሺR, S, ctrሻ             (4)	
V ൌ ctr ∙ U ൅ ctrതതതത ∙ V ൌ MUXሺU, V, ctrሻ             (5) 
As stated above, Fig.1 shows sequential division architecture. Fig.2 shows the detailed circuit for control 
unit. At the initial step, R=B, S=G(x),U=A,V=0,=-1. This division demands 2m-1 latency. 
 8
Based on division algorithm, the key operation is listed in steps 4, 7, and 10. 
3.1.Definition cross parity structure 
Assume that the ith recursive division result is C ൌ ܿ଴ ൅ ܿଵݔ ൅ ⋯൅ ܿ௠ିଵݔ௠ିଵ. And let the result C be 
arranged by the following n ൈ n array structure: 
 
		C ൌ
ۏ
ێێ
ێێ
ۍ c଴c୬cଶ୬⋮
cሺ୬ିଶሻ୬cሺ୬ିଵሻ୬
		
c
c୬ାଵcଶ୬ାଵ⋮
cሾሺ୬ିଶሻ୬ሿାଵcሾሺ୬ିଵሻ୬ሿାଵ
		
⋯
⋰
⋰
⋰
⋰
⋯
		
c୬ିଷ⋰
⋰
⋰
⋰
cሾሺ୬ିଵሻ୬ሿାሺ୬ିଷሻ
		
c୬ିଶc୬ାሺ୬ିଶሻ
⋰
⋰
cሾሺ୬ିଶሻ୬ሿାሺ୬ିଶሻcሾሺ୬ିଵሻ୬ሿାሺ୬ିଶሻ
		
c୬ିଵcଶ୬ିଵcଷ୬ିଵ⋮
c୬ሺ୬ିଵሻିଵcሺ୬ൈ୬ሻିଵ ے
ۑۑ
ۑۑ
ې
                         (8) 
   
 
where m=nଶ. 
According to the defined parity in (7), (8) can define three parity values, e.g. row parity Pେሺ଴ሻ ൌ
ሺPେబሺ଴ሻ, Pେభሺ଴ሻ, … , Pେ౤షభሺ଴ሻ , column parity Pେሺଵሻ ൌ ሺPେబሺଵሻ, Pେభሺଵሻ, … , Pେ౤షభሺଵሻ ሻ, and cross parity Pେሺଶሻ ൌ ሺPେబሺଶሻ, Pେభሺଶሻ, … , Pେ౤షభሺଶሻ ሻ. 
Three parity values are computed as follows: 
   P஼ೕሺ଴ሻ ൌ ∑ c୨ൈ୬ା୩୬ିଵ୩ୀ଴ ，0 ൑ j ൑ n െ 1                  (9a) 
   P஼ೕሺଵሻ ൌ ∑ c୬ൈ୩ା୨୬ିଵ୩ୀ଴ ，0 ൑ j ൑ n െ 1                      (9b) 
      P஼ೕሺଶሻ ൌ ∑ cሺ୬ାଵሻ୩ା୨୬ି୨ିଵ୩ୀ଴ ൅	∑ cሺ୬ାଵሻ୩ା୨ି୬୬ିଵ୩ୀ୬ି୨ ，0 ൑ j ൑ n െ 1        (9c) 
3.2.Prediction parity for “C=C/x mod G(x)” operation 
For computing the parity prediction for C/x mod G(x) operation, three prediction parities are discussed as 
follows: 
(a)  Row parity prediction ෠ܲ஼೔ሺ଴ሻ 
Since g0=1, we have	
ݔିଵ ൌ ଵ݃ ൅ ݃ଶݔ ൅⋯൅ ݃௠ିଵݔ௠ିଶ ൅ ݔ௠ିଵ	
Let Cሺ௜ሻ ൌ ܿ௜,଴ ൅ ܿ௜,ଵݔ ൅ ⋯൅ ܿ௜,௠ିଵݔ௠ିଵ , then Cሺ௜ሻ ൌ Cሺ௜ିଵሻ/x	mod	Gሺxሻ operation could be 
rewritten as 
Cሺ௜ሻ ൌ Cሺ௜ିଵሻ/x	mod	Gሺxሻ 
ൌ ܿ௜ିଵ,଴ݔିଵ ൅ ܿ௜ିଵ,ଵ ൅ ⋯൅ ܿ௜ିଵ,௠ିଵݔ௠ିଶ	mod	Gሺxሻ 
Pୡሺଵሻ 
Pୡሺ଴ሻ 
Pୡሺଶሻ 
 10
where   
W௜ ൌ ݓ௜,଴ ൅ ݓ௜,ଵݔ ൅ ⋯൅ ݓ௜,௡ିଵݔ௡ିଵ 
ݓ௜,௝ ൌ ܿ௜,௡௝, for	0 ൑ j ൑ n െ 1 
W௜ሺିଵሻ ൌ xିଵW௜	݉݋݀	ሺݔ௡ ൅ 1ሻ 
 
Therefore, substituting from (13) into (12), the row parity prediction can obtain the following 
formula. 
	 ෠ܲ஼ሺ೔ሻሺ଴ሻ ൌ ෠ܲ஼ሺ೔షభሻሺ଴ሻ ൅ ܿ௜ିଵ,଴ܲீ ̅ሺ଴ሻ ൅ W௜ିଵሺିଵሻ ൅ W௜ିଵሺ଴ሻ           (14) 
 
(b) Column parity prediction ෠ܲେሺ೔ሻሺଵሻ  
Since the column parity is defined by (9b), two column parities for  Cሺ௜ሻ and Gഥ are represented by 
Pୋഥሺଵሻ ൌ Pୋഥబ
ሺଵሻ ൅ Pୋభሺଵሻݔ ൅ ⋯൅ Pୋഥ೙షభ
ሺଵሻ ݔ௡ିଵ           (15a) 
Pେሺ೔ሻሺଵሻ ൌ Pେబሺ೔ሻ
ሺଵሻ ൅ Pେభሺ೔ሻ
ሺଵሻݔ ൅ ⋯൅ Pେ೙షభሺ೔ሻ
ሺଵሻ ݔ௡ିଵ           (15b) 
where 
Pୋೕሺଵሻ ൌ෍ g୩ൈ୬ା୨ାଵ
୬ିଵ
୩ୀ଴
，0 ൑ j ൑ n െ 1 
Pେೕሺ೔ሻ
ሺଵሻ ൌ෍ c୧,୩ൈ୬ା୨
୬ିଵ
୩ୀ଴
，0 ൑ j ൑ n െ 1 
 
According to (10), assume that the column parity prediction ܲீ ̅ሺଵሻ of Gഥ is previous determined, the 
column parity prediction of Cሺ௜ሻcould be represented by 
	 ෠ܲ஼ሺ೔ሻሺଵሻ ൌ ෠ܲ஼̅ሺଵሻ ൅ ܿ௜ିଵ,଴ܲீ ̅ሺଵሻ              (16) 
Next, from the relation of Cത ൌ େሺ೔షభሻ௫ ݉݋݀	ሺݔ௠ ൅ 1ሻ, Cത is shifting Cሺ௜ିଵሻ cyclically once to the left. 
If P෡஼ሺ೔షభሻሺଵሻ  is calculated in the previous recursive operation, observing the matrix in (8) for computing 
the column parity,  P෡஼̅ሺଵሻ for Cത ൌ େ
ሺ೔షభሻ
௫ ݉݋݀	ሺݔ௠ ൅ 1ሻ has the following relation. 
P෡஼̅ሺଵሻ ൌ
୔෡಴ሺ೔షభሻ
ሺభሻ
௫ 	݉݋݀	ሺݔ௡ ൅ 1ሻ             (17) 
 12
Therefore, the cross parity prediction ෠ܲ஼ሺ೔ሻሺଶሻ  can obtain as follows: 
෠ܲ஼ሺ೔ሻሺଶሻ ൌ ሺݔିଵP෡஼ሺ೔షభሻሺଶሻ ݉݋݀ሺݔ௡ ൅ 1ሻሻ ൅Wഥ௜ିଵሺଵሻ ൅ Wഥ௜ିଵሺ଴ሻ ൅ ܿ௜ିଵ,଴ܲீ ̅ሺଶሻ         (22) 
 
3.3.Parity prediction for “V=MUX(U,V,ctr)” operation 
The key operation Vሺ௜ሻ ൌ MUXሺUሺ௜ିଵሻ, Vሺ௜ିଵሻ, ctrሻ can represent Vሺ௜ሻ ൌ Uሺ୧ିଵሻ ∙ ctr ൅ Vሺ௜ିଵሻ ∙ ctrതതതത. 
That is to say, the value V depends on the value ctr, where ctr is 1 or 0. Assume that ෠ܲ܃ሺ࢏ష૚ሻ and 
෠ܲ܄ሺ࢏ష૚ሻ are the parity prediction of Uሺ௜ିଵሻ and Vሺ௜ିଵሻ, respectively. Thus, the parity prediction of 
Vሺ௜ሻ is performed by 
෠ܲ܄ሺ࢏ష૚ሻ ൌ ෠ܲ܃ሺ࢏ష૚ሻ ∙ ctr ൅ ෠ܲ܄ሺ࢏ష૚ሻ ∙ ctrതതതത ൌ ܯܷܺሺ ෠ܲ܃ሺ࢏ష૚ሻ, ෠ܲ܄ሺ࢏ష૚ሻ, ctrሻ      (23) 
3.4.Error correction scheme 
Assume that the register “C” is one of four registers in the recursive division algorithm. After the ith recursive 
division operation, we use (9) to compute three actual parities Pେሺ଴ሻ, Pେሺଵሻ	 and 	Pେሺଶሻ. And, we use (14),(18) 
and (22) to compute three parity predictions, P෡େሺ଴ሻ, P෡େሺଵሻ	 and 	P෡େሺଶሻ, respectively. In order to correct the result 
C, we firstly define three syndrome values, e.g., row syndrome value Sሺ଴ሻ, column syndrome value Sሺଵሻ, and 
cross syndrome value Sሺଶሻ. Three syndrome values are given by 
Sሺ଴ሻ ൌ P෡େሺ଴ሻ ൅ Pେሺ଴ሻ ൌ ሺs଴ሺ଴ሻ, sଵሺ଴ሻ,⋯ , s௡ିଵሺ଴ሻ ሻ            (24a) 
Sሺଵሻ ൌ P෡େሺଵሻ ൅ Pେሺଵሻ ൌ ሺs଴ሺଵሻ, sଵሺଵሻ,⋯ , s௡ିଵሺଵሻ ሻ            (24b) 
Sሺଶሻ ൌ P෡େሺଶሻ ൅ Pେሺଶሻ ൌ ሺs଴ሺଶሻ, sଵሺଶሻ,⋯ , s௡ିଵሺଶሻ ሻ            (24c) 
Let us define that ܧେ ൌ ݁௖బ ൅ ݁௖భݔ ൅ ⋯൅ ݁௖೘షభݔ௠ିଵ is the error position polynomial of the result C, where 
݁௖ೕ denotes the error value in the jth bit of the result C. According to the matrix in (8), we have the following 
relation between syndrome polynomials and error polynomials as follows:  
 
 s௝ሺ଴ሻ ൌ ∑ ݁ୡౠൈ౤శౡ୬ିଵ୩ୀ଴ ，0 ൑ j ൑ n െ 1                    (25a) 
   s௝ሺଵሻ ൌ ∑ ݁ୡ౤ൈౡశౠ୬ିଵ୩ୀ଴ ，0 ൑ j ൑ n െ 1                      (25b) 
      s௝ሺଶሻ ൌ ൝
∑ ݁ୡሺ౤శభሻౡశౠ୬ିଵ୩ୀ଴ i ൅ j ൏ ݊
∑ ݁ୡሺ౤శభሻౡశౠష౤୬ିଵ୩ୀ଴ i ൅ j ൒ n
                   (25c) 
For clarity, let ܧେ ൌ ∑ ݁ୡ౟x୧ଵହ୧ୀ଴  be the error position polynomial of the result C ൌ ∑ c୧x୧ଵହ୧ୀ଴  , then all 
coefficients of three syndrome values are given by 
s଴ሺ଴ሻ ൌ ݁ୡబ ൅ ݁ୡభ ൅ ݁ୡమ ൅ ݁ୡయ  
sଵሺ଴ሻ ൌ ݁ୡర ൅ ݁ୡఱ ൅ ݁ୡల ൅ ݁ୡళ 
sଶሺ଴ሻ ൌ ݁ୡఴ ൅ ݁ୡవ ൅ ݁ୡభబ ൅ ݁ୡభభ 
sଷሺ଴ሻ ൌ ݁ୡభమ ൅ ݁ୡభయ ൅ ݁ୡభర ൅ ݁ୡభఱ 
s଴ሺଵሻ ൌ ݁௖బ ൅ ݁ୡర ൅ ݁ୡఴ ൅ ݁ୡభమ 
 14
 
Fig. 3. The proposed fault-tolerant division circuit over GF(2m) 
 
Fig.4. The row parity prediction circuit for R and S registers 
 16
 
(b) 
Fig.7. (a) The computing error position polynomial circuit;(b) majority voting(MV) circuit. 
 
5. Conclusion 
This paper is based on parity prediction scheme to derive a new cross parity scheme for correcting division in 
GF(2m). The proposed scheme is used by three parity predictions (row parity, column parity, and cross parity) 
to determine the error in each recursive division operation. The major advantage of our proposed architecture 
can achieve finite field division with concurrent error correction capability. It is to note that traditional parity 
scheme applied in finite field multiplication is only provided by the feature of concurrent error detection. Our 
proposed fault-tolerant division architecture has the feature of modularity and regularity, and is suitable for 
implementing the VLSI technology. 
 
 
References 
[1] I. Blake, G. Seroussi, and N. Smart, Elliptic Curves in Cryptography, Cambridge University Press: New 
York, 1999. 
[2] R. L. Rivest, A. Shamir, and L. Adleman, "A Method for Obtaining Digital Signatures and Public-Key 
Cryptosystems", Communications of the ACM, 21(2), 1978, pp. 129-126 
[3] G. Orlando, C. Paar, "A High-Performance Reconfigurable Elliptic Curve Processor for GF(2m)", 
Workshop on Cryptographic Hardware and Embedded Systems, CHES 2000, LCS, Springer-Verlag, 
1965, pp. 58-56. 
[4] Royo, Moran, Lopez, "Design and implementation of a Coprocessor for cryptography applications", 
European Design and Test Conference Proceedings, 1997, pp.213–217 
[5] S.-W. Wei, “VLSI Architectures for Computing Exponentiations, Multiplicative Inverses, and Divisions in 
GF(2m),” Proc. 1995 IEEE Int’l Symp. Circuits and Systems, pp. 4.203-4.206, London, May 1995 
[6] M.A. Hasan, “Double-Basis Multiplicative Inversion over GF(2m),” IEEE Trans. Computers, vol. 47, no. 9, 
pp. 960-970, Sept. 1998. 
[7] J.H. Guo and C.L. Wang, “Systolic Array Implementation of Euclid.s Algorithm for Inversion and 
Division in GF(2m),” IEEE Trans. Computers, Vol. 47, No. 10, pp. 1161-1167, Oct. 1998 
[8] C.H. Wu, C.M. Wu, M.D. Shieh, and Y.T. Hwang, “High-Speed, Low-Complexity Systolic Designs of 
Novel Iterative Division Algorithms in GF(2m),” IEEE Trans. Computers, Vol.53, No.3, pp.375-380, 
March 2004 
[9] J.H. Guo and C.L. Wang, “Hardware-Efficient Systolic Architecture for Inversion and Division in GF(2m),” 
IEE Proceedings-E, vol. 145, pp. 272-278, July 1998. 
 1
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                 日期：99 年 10 月 31 日 
 
 
 
 
一. 參加會議經過 
 
CASON-2010 於中國/太原科技大學召開，會議日期為 2010 年 9 月 26 日起至
9 月 28 日止，共計 3 天。本次 Conference 共舉辦了 24 個場次，投稿的學者來自歐
美及亞洲國家 10 個國家，錄取 98 篇口頭報告論文。另有安排 3 個演講。這些與
會的專家來自歐美及台灣，本人於本次會議發表論文題目  “Concurrent Error 
Detection in Systolic Array AB2 Multiplier using Linear Codes”，參加與會的方式為口
頭報告，於會議中觀摩同領域學者的研究成果以及發表技巧，獲益良多。 
 
二. 與會心得 
 
此會議由中國大陸太原科技大學所主辦，CASON-2010，參與此會議可以獲得這方
頂尖專家的研究成果，以及相當多的研究情報，因此對於聆聽相關論文發表的期
待與規劃便早早開始。在CASON-2010的會場中大致可將其主要的議題區分為 
 Network evolution  
Network evolution and growth mechanisms 
Online communities and computer networks 
計畫編
號 
NSC-99-2221-E-262-026 
計畫名
稱 
設計可抵抗植入錯誤破解密碼攻擊法之容錯 EEA 除法電路架構 
出國人
員姓名 李秋瑩 
服務機
構及職
稱 
龍華科技大學 資訊網路工程系 
教授 
會議時
間 
99年9月26日至 
99 年 9 月 28 日 
會議地
點 
中國/太原科技大學 
會議名
稱 
  International Conference on Computational Aspects of Social Networks - 2010
發表論
文題目 
Concurrent Error Detection in Systolic Array AB2 Multiplier using Linear Codes
 3
觸與有所應用。從最小的電子電路到嵌入式系統，到資料整合的資料庫設計，都
是我的研究範圍。因此與會期間除了向國外學者學習密碼系統相關研究方法及未
來研究方向，以加強自己的研究深度，並增廣見聞。對於某些較具應用價值之方
法，則於該作者發表完後，利用中場休息時間與作者討論，藉此，除可對某些作
法深一層認識外，亦可利用機會與國外學者建立友誼關係。 
 
其中在會議的第一天，9 月 26 日。由清雲科大邱綺文教授探討正規基底乘法
器的現況及未來挑戰。對於動態的環境中，具有深入探討有限場乘法器之新的設
計概念。在密碼領域認知的研究上包含了乘法器設計、密碼演算法。在這個領域
的研究或許從 60 年代即有學者提出理論的研究，但在相關於密碼系統的植入攻擊
法研究也是近幾年才有。所以在密碼系統的植入攻擊法研究受到重視的今日，相
信在植入攻擊法的認知能力將會引領更多的學者參與相關研究。 
 
會議中，共可歸納為近代計算演算法、影像與訊號處理、類神經網路控制、
模糊控制、家庭照護、安全與保密系統、以及智慧型控制等有關的議題及研究的
成果，對於未來的研究方向，主講者也有諸多建設性的建議及意見。筆者參加之
後的心得，可歸納以下幾點： 
 
1. 在特殊議題上所討論的論文，包含了人工智慧、類神經網路、模糊理論與、密
碼演算法、基因演算法的應用…等。這些議題彼此間都有一些交集，也許將他
們的想法與相關理論的應用做一個深入的分析，應可以做為進階的研究參考。 
 
2. 在密碼系統的錯誤攻擊法探討上則是以橢圓曲線密碼系統為主，每位研究者所
提出的密碼系統架構都不相同，值得我們參考與學習。 
 
3. 在密碼系統的錯誤攻擊法上，這些議題有實作亦有理論上的推演，雖然並不是
所有的研究成果都可應用在我們目前的研究題目上，但也提供了一些想法與方
Concurrent Error Detection in Systolic Array AB2 Multiplier using 
Linear Codes 
 
Chiou-Yng Lee 
Department of Computer Information and Network Engineering 
Lunghwa University of Science and Technology, TAIWAN 
PP010@mail.lhu.edu.tw 
 
 
Abstract 
This investigation is based on a traditional AB2 systolic array 
multiplier [16] to derive a new CED AB2 multiplier using linear 
block codes. A novel linear encoding algebra is derived to 
realize parity-check functionality. It is based on the syndrome 
value, and is adopted to detect errors in the multiplication. 
Altera FPGA with stratix families to simulate our proposed 
CED multiplier. In the field GF(272), the space overhead of the 
proposed circuit is around 9.1%. The latency overhead only 
requires extra two clock cycles. The proposed CED 
architecture can therefore be utilized effectively in 
fault-tolerant cryptosystems.  
Index: Linear code, Concurrent error detection(CED), Finite 
field multiplication 
 
1.  Introduction 
Finite (Galois) field arithmetic is important and has 
practical value in error correcting code and cryptography. In 
cryptographic applications [1], such as public key 
cryptosystems, the field size can be in the range 160 to 2048 
bits. Finite field multiplication the implementation of such 
applications on hardware depends on a significant amount of 
circuits. At least one of the many transistors are likely to 
become faulty as the system operates, potentially yielding an 
incorrect output of the field multiplication. Various works in 
the last few decades have addressed concurrent error detection 
(CED) [2,3] for digital electronic circuits. Unfortunately, 
almost all existing CED multipliers suffer from several 
shortcomings, including large time and/or hardware overhead, 
and severe performance degradation. This investigation will 
develop a CED finite field multiplier to overcome the 
aforementioned problems. 
Recently, Boneh et al. [4] presented the first fault-based 
attack against a device using public-key cryptography. The 
attack was based on the observed errors in the hardware 
devices to leak out information about the implemented 
crypto-algorithm. Following the attack by Boneh et al., Bao et 
al. [5] developed a fault-based attack against tamperproof RSA 
devices. To protect against the fault-based attack, some general 
approaches that monitor the behavior of a circuit during its 
normal operation and to indicate any deviation from the correct 
functionality, are extensively employed. For example, the 
parity prediction technique includes the necessary 
pre-calculation of the prediction parity for an arithmetic 
operation, and compares that with the actual parity of the 
output to detect errors in the results [6,7,8]. Fenn et al. [6] 
developed an on-line method for detecting bit-serial multipliers 
for finite fields GF(2m), using a single parity prediction 
approach. Lee et al. and Lee [7,8] recently suggested dual and 
normal bases CED multipliers, respectively. However, the 
disadvantage of the use of a single parity prediction method is 
the long execution time for computationally predicting parity. 
CED array systolic multipliers that are based on time 
redundancy procedures have also been developed [9,10]. 
Linear block codes [11,12] are well established in the 
theory and practice of error control coding. Linear codes 
generally depend on the minimum distance dmin to determine 
the error-correcting capability t=(dmin-1)/2  and its 
error-detecting capability e=dmin-1. CEC and CED PB 
multipliers that use a single error-correcting (SEC) linear code 
were recently presented [13,14,15]. However, these multipliers 
have a high space overhead. For example, in the CEC PB 
multiplier using SEC linear code [14], the area overhead ranges 
from 50% to 112%.  
The literature reveals that AB2 multiplication in polynomial 
basis of GF(2m) is vital components, especially in computing 
exponentiation and inversion/division [16,17]. By using 
MSB-first scheme, AB2 multiplier can be implemented using 
systolic array architectures. Wang-Gao [16] presented an 
unidirectional systolic array multiplier. Lee et al. exploited the 
interleaved multiplication scheme to develop a low-complexity 
systolic array multiplier [18]. In this study, error decoding 
codes are applied to derive concurrent error detection in the 
systolic array AB2 multiplier over GF(2m) [16]. Altera FPGA 
with Atratix families was used to simulate the proposed CED 
multiplier. The area overhead of the proposed architecture 
declines as the size of the field increases. The proposed scheme 
could be used to yield a fault-tolerant cryptographic 
architecture, even for large fields. 
The rest of the article is organized as follows. Section 2 
discusses the  polynomial basis representation and associated 
multiplication algorithms. Section 3 presents a multiplier and 
adopts uses an error decoding scheme to derive a new CED 
systolic array architecture. In Section 4, the time and space 
overhead of the proposed CED multiplier simulated in the 
Altera FPGA environment. Finally, Section 5 draws 
conclusions. 
 
2.  Preliminaries 
 
This section briefly review AB2 multiplication algorithm 
and its bit-parallel systolic architecture [16]. Based on this 
circuit, the strategy of CED AB2 multiplier with linear block 
code is suggested. 
 
2.1 Bit-parallel systolic AB2 multiplier over GF(2m) 
Figure 1. The PCG module is used by (4) to obtain the 
parity-check digits PC of C=AB2. Both polynomials C and PC 
are combined to form the codeword 
V=(v0,v1,…,vn-1)=PC+xn-mC, where C is the output of the 
combinational circuit module and P is generated from the 
PCG module. The ED module performs the syndrome value 
S= V mod G(x) to detect errors in combinational logic circuit. 
In the following section, we use the suggested functional 
block, shown in Figure 3, employed to derive a new CED AB2 
multiplier. 
 
Figure 3. The functional block of CED AB2 multiplication 
architecture 
 
3. Proposed CED AB2 multiplier using an error-correcting 
code 
This section presents a novel CED systolic array AB2 multiplier 
over GF(2m) that uses error-correcting code. Based on the 
structure in Fig. 3, the following subsections describe the 
modules in detail . 
 
3.1 Parity-check generator (PCG) module 
From Algorithm 1, step 2.1 given by 
)(mod21 xFAbxTT imii −− +=  is the core operation in AB2 
multiplications. In Figure 4, iT  is determined through the 
output of the ith row-cells. The parity-check polynomial iT  is 
derived as follows; assuming iT  is presented by   
1
1,
2
2,
−−−− ++= mmimmiii xtxtTT ,    (5) 
where  
3
3,1,0,
−−+++= mmiiii xtxttT L . 
Applying Eq.(2) enables step 2.1 to be expressed using the 
following equation. 
AbFtFtxT
xFAbxTT
immimii
imii
−−−−−−
−−
+++=
+=
'
)(mod
1,12,1
2
1
2
1   (6) 
Given the message digits to find the corresponding 
parity-check polynomial in Eq.(4), each term in Eq.(6) can be 
obtained that 
)(mod11 xGTxP i
mn
Ti −
−=−       (7a) 
)(mod xGFxP mnF
−=       (7b) 
)(mod'' xGFxP
mn
F
−=       (7c) 
)(mod xGAxP mnA
−=       (7d) 
From (5), we obtain 
1211 1,12,1 −−−− −−−− +++= mmii xmixmiTT PtPtPP    (8a) 
or 
1211 1,12,1 −−−− −−−− +++= mmii xmixmiTT PtPtPP    (8b) 
Applying (7) and (8), the parity-check digits of iT  can obtain 
as 
)(mod)()1(
)(mod
)(
)(mod
'1,12,1
2
'1,12,1
1,12,1
2
'1,12,1
2
1
121
1
xGPbPxtPtPx
xGPbPtPt
PtPtPx
xGPbPtPtPxP
AimFmiFmiT
AimFmiFmi
xmixmiT
AimFmiFmiTT
i
mmi
ii
−−−−−
−−−−−
−−−−
−−−−−
+++++=
+++
+++=
+++=
−
−−−
−
 (9) 
Notably, when the designed linear block code is determined, 
such as Hamming code, )1( FP+  and )( 'FPx +  in (9) are 
constant polynomials. For an example of the (7,4) code 
generated by G(x)=x3+x+1, and the field GF(24) is constructed 
from F(x)=x4+x+1, we can obtain that 21 xPF =+  and 
xPx F +=+ 1' . Thus, iTP  in (9) is easily computed if 1−iTP is 
previously been determined.  
 Based on Eq.(9), Figure 4 shows the structure of the 
PCG module to calculate the parity-check digits of the ith 
computational loop in algorithm 1. This module is consists of 
one x2 module, 3(n-m) AND gates and 3(n-m) XOR gates. The 
x2 module in Figure 4 is performed by )(mod2
1
xGxP
iT − . When 
G(x) is an irreducible trinomial of degree n-m, “⊗” and “⊕” 
denote (n-m)-bit multiplier and adder, respectively. Therefore, 
the time and space complexity of the PCG unit is 
Space complexity: 
           XOR gate: 3n-3m+2 
           AND gate: 3n-3m 
1- bit latch: 8n-8m 
time delay: TA+2TX+TL 
 
 
Fig. 4. The detailed circuit for PCG module 
 
3.2 Error detector (ED) module 
We use an (n,m) cyclic code with generator polynomial 
G(x) of degree n-m to construct a linear code.  Based on this 
code, this subsection derives the structure of the ED module.  
Let V=v0+v1x+…+vn-1xn-1 be a codeword that is 
theoretically encoded from the product C=AB2 to generate the 
codeword V= CPˆ  +xn-mC where CPˆ  is the parity-check 
digits of C. Given our proposed CED architecture in Figure 3, 
assume that R=r0+r1x+…+rn-1xn-1 is the received codeword, 
which is formed by the output of combinational logic circuit 
and parity-check generator.  When the attacker uses the fault 
based attack scheme to intrude the combinational logic circuit, 
R may be different from V. The polynomial sum  
E=R+V=e0+e1x+…+en-1xn-1     (10) 
is an n-tuple polynomial, where ei=1 for ri≠vi and ei=0 for ri=vi. 
This polynomial E is called the error pattern. It follows from 
Eq.(10) that the received polynomial R can be represented by 
the sum of the codeword V and the error pattern E, given by  
R=V+E        (11) 
Since the codeword V is constructed from G(x), we can find 
that the codeword V in cyclic code can be divided by G(x), i.e., 
V=Q(x)G(x). Therefore, dividing R by the generator 
polynomial G(x), we obtain 
 
S=R mod G(x)=V+E mod G(x)    (12) 
 
 
 
Table 2. Area overhead in CED AB2 miltiplier for some 
fields 
 AB2 multiplier in 
Fig.1 
CED AB2 
multiplier in 
Fig. 9 
overhead  
ALUT Reg. ALUT Reg. ALUT Reg. 
GF(236) 2826 12017 3545 13800 25.4% 14.8%
GF(248) 5279 20680 6381 23203 20.9% 12.2%
GF(260) 8261 31682 9143 33967 10.7% 10.6%
GF(272) 11940 45362 13028 48052 9.1% 5.9% 
 
Table 3. Comparison of existed CED multipliers over GF(2m) 
Multiplier [13] [7] Fig.7 
Basis  Polynomial 
basis 
Dual basis Polynomial 
basis 
function AB AB AB2 
structure Bit-serial Bit-parallel 
systolic 
2-bit-parallel 
systolic 
Detection 
scheme 
Linear 
code 
Parity 
code 
Linear code 
Area overhead 52.9% 46% 9.1% 
latency overhead 1.84% Two cycles two cycles 
 
 
4. Conclusions 
Recently, Wang and Kuo in [16] proposed a new method for 
designing a systolic array systolic AB2 multiplier over GF(2m). 
This paper investigates a linear code for concurrent error 
detection in AB2 multiplier. The designed parity check digits 
is using novel encoding scheme to achieve regularity and 
module architecture, which differs from the CEC multiplier 
[14] that exploits matrix-vector scheme. The latency overhead 
of the proposed CED multiplier is shown to be only extra two 
cycles. Simulation results indicate that the proposed CED 
multiplier over GF(272) has an ALUT overhead of 
approximately 9.1% and a register overhead of 5.9%, while 
most existing CED multiplier [13] with linear code requires at 
least 52% area overhead. Although, the proposed architecture 
is considered with CED multiplier. From the characteristic of 
linear code, our multiplier can be extended to develop 
concurrent error correction architecture. The proposed CED 
architecture is therefore effective in fault tolerant 
cryptosystems. 
 
References 
[1] IEEE Standard 1363-2000, "IEEE standard specifications 
for public-key cryptography," Jan. 2000. 
[2] G. Goos, J. Hartmanis, and J. van Leeuwen, “On-line 
Error Detection and Fast Recover Techniques for 
Dependable Embedded Processors,” Springer-Verlag 
Berlin Heidelberg NewYork, 2002.  
 [3] M. Nicolaidis and Y. Zorian, “Online testing for 
VLSI—A compendium of approaches,” J. Electronic 
Testing, Theory and Applications (JETTA), vol. 2, pp. 7-20, 
Feb.-Apr. 1998. 
[4] D. Boneh, R.A. DeMillo, R.J. Lipton, "On the importance 
of eliminating errors in cryptographic computations," J. 
Cryptol. 14 (2001) 101–119. 
[5] F. Bao, R. Deng, Y. Han, A. Jeng, T. Nagir, D. 
Narasimhalu, “A New Attack to RSA on Tamperproof 
Devices,” Fifth International Workshop on Security 
Protocols, vol. 1361, Springer LNCS, Berlin, 1997, pp. 
125–136. 
[6] S. Fenn, M. Gossel, M. Benaissa, D. Taylor, “On-line error 
detection for bit-serial multipliers in GF(2m),” Journal of 
Electronic Testing: Theory and Applications, Vol. 13, 1998, 
pp.29-40. 
 [7] C.Y. Lee, C.W. Chiou and J.M. Lin, "Concurrent error 
detection in a bit-parallel systolic multiplier for dual basis 
of GF(2m)," Journal of Electronic Testing: Theory and 
Applications, vol. 21, pp. 539–549, Sep. 2005. 
 [8] C.Y. Lee, “Concurrent error detection architectures for 
Gaussian normal basis multiplication over GF(2m),” 
Integration, the VLSI Journal, Vol. 43, No. 1, pp. 113-123, 
Jan. 2010. 
[9] C.W. Chiou, C.Y. Lee, A.W. Deng and J.M. Lin, 
"Concurrent error detection in Montgomery multiplication 
over GF(2m)," IEICE Trans. Fund., vol. E89-A, no.2, pp. 
566–574, Feb. 2006. 
[10] C.Y. Lee, C.W. Chiou and J.M. Lin, "Concurrent error 
detection in polynomial basis multiplier over GF(2m)," 
Journal of Electronic Testing: Theory and Applications, 
Vol.22, pp.143–150, Feb. 2006. 
[11] W. C. Huffman and V. Pless, “Fundamentals of 
Error-Correcting Codes,” Cambridge: Cambridge 
University Press, 2003, pp. 121-167. 
[12] J. Cho and W. Sung, “Efficient Software-Based Encoding 
and Decoding of BCH Codes,” IEEE Trans. Computers, 
Vol. 58, No. 7, pp. 878-889, July 2009 
[13] S. Bayat-Saramdi and M. A. Hasan, “Run-time error 
detection in polynomial basis multiplication using linear 
codes,” in Proc. of IEEE Intern. Conf. Application-specific 
Systems, Architectures and Processors (ASAP-2007), 
Canada, 2007, pp. 204-209. 
[14] J. Mathew, A. Costas, A. M. Jabir, H. Rahaman, D. K. 
Pradhan, "Single error correcting finite field multipliers 
over GF(2m)," 21st Intern. Conf. VLSI Design, pp. 33-38, 
2008. 
[15] C.Y. Lee, P.K. Meher, and C.C. Fan, "Fault-Tolerant 
Bit-Parallel Multiplier for Polynomial Basis of GF(2m) ," 
Journal of Electronic Science and Technology, Vol. 7, No. 4, 
pp.343-347, Dec. 2009. 
[16] C.L. Wang and J.H.Guo, “New systolic arrays for 
AB2+C, inversion, and division in GF(2m),” IEEE Trans. 
Comput., Vol. 49, No.10, pp. 1120–1125, Oct. 2000. 
[17] Wei, S.W.: ‘A systolic power-sum circuit For GF(2m)’, 
IEEE Trans. Comput., 1994, 43, (2), pp. 226–229 
[18] C.Y. Lee, C.W. Chiou, A.W. Deng and J.M. Lin, 
“Low-complexity bit-parallel systolic architectures for 
computing A(x)B2(x) over GF(2m),” IEE Proc.-Circuits 
Devices Syst., Vol. 153, No. 4, pp.399-406, Aug. 2006 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/03/26
國科會補助計畫
計畫名稱: 設計可抵抗植入錯誤破解密碼攻擊法之容錯EEA除法電路架構
計畫主持人: 李秋瑩
計畫編號: 99-2221-E-262-026- 學門領域: 資訊安全
無研發成果推廣資料
2010 (SCIE, Impact 
factor:0.732)   
3.Chiou-Yng Lee, Pramod
Kumar Meher and Jagdish 
Chandra 
Patra, ’’Concurrent 
error detection in 
bit-serial normal basis 
multipliers over 
GF(2m),’’ IEEE Trans. 
VLSI, VOL. 18, NO. 8, 
pp.1234-1238, AUGUST 
2010 (SCI, Impact 
factor:1.01)  
4.Liang-Hwa Chen, Po-Lun 
Chang, Chiou-Yng Lee and 
Ying-Kuei 
Yang, ’’Scalable and 
systolic dual basis 
multiplier over 
GF(2m) ,’’(accepted) 
International Journal of 
Innovative Computing, 
Information and Control, 
Volume 7, Number 1, 
January 2011 
研究報告 /技術報
告 0 0 100%  
研討會論文 3 1 100% 1.Chiou-Yng 
Lee, ’Concurrent Error 
Detection in Systolic 
Array AB2 Multiplier 
using Linear Codes,’ 
International 
Conference on 
Computational Aspects of 
Social Networks,CASoN 
2010,September 26-28, 
2010, Taiyuan, China(EI) 
2.Chiou-Yng 
Lee, ’Error-correcting 
codes for concurrent
其他成果 
(無法以量化表達之
成果如辦理學術活
動、獲得獎項、重要
國際合作、研究成果
國際影響力及其他
協助產業技術發展
之 具 體 效 益 事 項
等，請以文字敘述填
列。) 
1. 范家禎、李秋瑩，利用循環碼來設計位移雙重基底 GF (2^m)乘法器具即時錯
誤偵測能力，98 年度龍華科技大學大學生專題製作競賽第三名 
2. 范家禎、李秋瑩，研究 GF(2^m)蒙哥馬利乘法器具即時錯誤偵測能力，98 年度
龍華科技大學大學生創意專題製作競賽第二名 
 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
