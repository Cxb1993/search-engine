 1
動態記憶體規劃之參數式小腦模型控制器 
於車型機器人運動軌跡之設計及實現 
 
計畫編號：NSC 96-2221-E-036-030 
執行期限：96 年 8 月 1 日至 97 年 7 月 31 日 
計畫主持人：呂虹慶 教授 大同大學電機工程研究所 
E-Mail: luhung@ttu.edu.tw 
 
一、 摘要 
應用小腦模型控制器(CMAC)學習一
組快速變動曲線時，若要得到較好的近似
結果，常必須在誤差範圍下降與記憶體需
求限縮二者間做取捨，對此本計劃提出以
參數式小腦模型控制器(Parametric CMAC, 
P-CMAC)作為基本控制器架構，改善傳統
CMAC 的內部映對，使每一個記憶體位置
的安排，經由一個能反應輸入強度的參數
線性方程式完成，進而產生更為平滑的輸
出。同時為了在學習變化較快函數時，同
樣保有一定的準確度，本計劃導入動態記
憶體的規劃方式，以實際的狀況，適當規
劃輸入空間所映對的記憶體需求，發展出
動態記憶體規劃之參數式小腦模型控制器
(P-CMAC with dynamic memory planning, 
P-CMAC-DMP)。另一方面，本計劃應用長
短型記憶式多層感知架構，改善原始多層
感知器的學習效能，配合所提之控制器架
構，達成對未知系統做即時控制的目的。 
 
關鍵詞：參數式小腦模型控制器，動態記
憶規劃參數式小腦模型控制器，多層感知。 
 
Abstract 
It is a trade-off between better accurate 
performance and more memory space as a 
CMAC neural network learns a rapid curve. 
In this project, we adopt P-CMAC as the 
basic controller because of the replacement 
in the internal mapping from CMAC. The 
internal mapping structure is built in such a 
way that each bite-sized memory location 
existing in CMAC is replaced for one linear 
parametric equation of the network input 
strengths. The advantage of P-CMAC 
improves the undesired Boolean mapping 
that exists at the original CMAC algorithm 
and results in a smoother output for smooth 
inputs, as opposed to what occurred before 
with CMAC networks. But, as learning a 
rapid curve, it needs more memory space 
than those in learning a smooth curve at the 
same accuracy. Therefore, the design method 
of dynamic memory planning is introduced 
that the memory size of the controller can be 
adjusted to input space and then derives the 
P-CMAC with dynamic memory planning 
(P-CMAC-DMP). Besides, applying the 
multilayer perceptron with long- and 
short-term memories (MLP with LASTM) in 
the framework of proposed controller can 
accomplish the purpose of on-line control on 
unknown plants. 
 
Keywords: Parametric-CMAC (P-CMAC), 
P-CMAC with Dynamic Memory Planning 
(P-CMAC-DMP), Multilayer Perceptron 
(MLP) 
 
二、背景目的與文獻探討 
參數式小腦模型控制器，其基本想法
是結合 CMAC 演算法和 Takagi Sugeno 
Kang參數模糊推論系統(fuzzy TSK)所延伸
出來的概念，藉由這些演算法的通似性使
它們能恰當地與類神經網路相連結。
P-CMAC 基本上保有一定程度類似由
Albus 所提出的原始 CMAC 觀念，它也是
一個局部的類神經網路，也就是說，對於
一個已知的輸入向量，只有一小部分的神
經元會運作並有效地協助其對應的類神經
網路輸出。不過它改變了傳統 CMAC 的內
部映對，最主要的不同是在於 CMAC 裡每
一個記憶體位置，改由一個能適當反應輸
入強度的參數線性方程式來完成，這相當
於多層感知(multilayer perceptron, MLP)架
構當中的隱藏層，最後這些被激發方程式
的輸出，經由加權與平均後，產生整個網
路的真實輸出，如此一來可以改善原始
CMAC 對於平滑輸入產生不平滑輸出的缺
點。不過當它在學習變化較快的函數時，
若要達到相同的準確度，所需要的記憶體
空間，要比學習變化較慢的函數時來得
大，為了改善此一現象，本計劃導入動態
 3
示學習過程中有衰退跡象，因此原本系統
無法滿足新輸入的映對，所以應該增加輸
入映對的歸屬函數。一旦決定增加輸入映
對的歸屬函數，其歸屬函數的中心與寬度
可選擇如下： 
k
i
new
i xc =                                       { })1()1( ,max +− −−= jinewijinewionewi cccckr                
其中 )1( −jic 與 )1( +jic 是新歸屬函數相鄰兩歸
屬函數的中心， ok 是重疊因子 (overlap 
factor)，通常選取在 1.05~1.2 之間，其相關
的連接權重 newjhw 與記憶體內部P參數可以
用一個預設常數或者隨機產生。輸入變數
對於產生新的輸入映對之歸屬函數其整體
演算法如下： 
假設 ix 是第一個進入的樣本，則 
{產生第一個新的歸屬函數，包括中心點
ii xc =1 、寬度 initi rr =1 、權重 =hw1 隨機， initr
為一個事先設定的正數} 
或者對於每個新進入的 ix  
{ 假設  誤差大於預設值 
則{ 算出馬氏距離 ))(min( jmdMJ = , 
uj ,,2,1 L=  
假設 dkMJ > ， dk 為一個事先設
定的正數 
則{ 產生一個新的歸屬函數，
包括 
中心點 inewi xc = 、 
寬度{ })1()1( ,max +− −−= jinewijinewionewi cccckr 、 
權重 =newjhw 隨機 
其中 )1( −jic 與 )1( +jic 為兩組相鄰
高斯函數的中心點，而 ok  選
擇分配在1.05~1.2間，然後 
做參數學習} 
或者 
{不需要產生新的規則，然後參數
學習} 
} 
或者 
{做參數學習} 
} 
(2) 參數學習階段 
    在此部分，可利用倒傳遞法來修正。
定義成本函數 
22
2
1)(
2
1
rr eyyV =−=  
其中 ry 、 y 代表參考模型輸出與系統輸
出， re 表示兩者之間的誤差。則參數更新
法則為 
))(()()1( NZVNZNZ Z∇−=+ η                 
其中η為預設學習率，Z 包含三部分參數 
],,,,,,,,[ 111111 ijijjh ccwwZ σσ LLL=               
輸出層的誤差傳遞項為 
⎥⎦
⎤⎢⎣
⎡
∂
∂
∂
∂
∂
∂−=∂
∂−=
c
r
r y
y
y
e
e
V
u
Vδ                    
其中
cy 代表控制器輸出。而連接權重的更
新量為 
jw
jh
wjh w
Vw Φ=∂
∂−=Δ δηη  
其中 wη 為學習率， jΦ 為 jΦ 之正規化，連
接權重更新為 
∑
=
Φ
Φ+=Δ+=+ u
i
i
j
wjhjhjhjh NwwNwNw
1
)()()1( δη  
歸屬函數的中心與寬度的更新法則如下 
2
1
)(2
ij
ij
k
i
u
i
i
j
jhr
ij
rij r
cx
w
c
Vc
−
Φ
Φ=∂
∂−=Δ
∑
=
δηη             
3
2
1
)(2
ij
ij
k
i
u
i
i
j
jhr
ij
rij r
cx
w
r
Vr
−
Φ
Φ=∂
∂−=Δ
∑
=
δηη             
其中 rη 為半徑基準激化函數中心與寬度的
學習率。歸屬函數的中心與寬度更新為 
2
1
)(2
)()1(
ij
ij
k
i
u
i
i
j
jrijij r
cx
wNcNc
−
Φ
Φ+=+
∑
=
δη           
3
2
1
)(2
)1(
ij
ij
k
i
u
i
i
j
jrijij r
cx
wrNr
−
Φ
Φ+=+
∑
=
δη              
為了增加參數的即時學習速率，誤差傳遞
項採用 rr eAe Δ+=δ ，其中 A為一個正數。 
    另外，在本計劃中，應用長短型記憶
式多層感知架構來做系統參數偵測的輔助
 5
是所有比較的控制器中最大的。實驗所得
之均方誤差(MSE)、記憶體使用量(MS)以
及收斂時間(CT)整理於(表一)。 
(2)考慮二階混沌電路如 ufx += )(x&& ,其中
)(cos)( 321 wtqxcxcxcf +−−−= &x ， u 是控
制力，w為頻率，t是為時間，c、 1c 、 2c 、
q 是實數常數。根據參數選擇的不同，其
軌跡可能為週期性(exhibit periodic)、近週
期性(almost periodic)或者混沌行為(chaotic 
behavior)。為了觀察零輸入的行為響應，
參數選擇為 4.0=c 、 1.11 −=c 、 0.12 =c 、
8.1=w ，[ ] [ ]TT 00=xx & 。(圖三) (a ～ c)
分別為強健小腦模型控制器(robust CMAC, 
RCMAC)、自我組織適應模糊類神經控制
器 (self-organizing adaptive fuzzy neural 
control, SAFNC)以及所提之具動態記憶體
規 劃 之 參 數 式 小 腦 模 型 控 制 器
(P-CMAC-DMP)的實驗結果。由圖中可
知，所提之控制器的均方誤差在所有比較
的控制器中是最小的，除此之外，似乎也
改善了RCMAC劇烈的切跳現象(chattering 
phenomenon)。 
(3)考慮一個典型的蔡式混沌電路，此電路
之動態方程式可寫成： 
( ) ( )
( )
( )LCL
LCCC
CCCC
iRV
L
i
iVV
RC
V
VVV
RC
V
0
2
1
1
212
1121
1
11
11
−−=
⎟⎠
⎞⎜⎝
⎛ +−=
⎟⎠
⎞⎜⎝
⎛ −−=
&
& λ
                    
電壓
1C
V 、
2C
V 以及電流 Li 為狀態變數， 0R 為
常數， λ 是隨著
1C
V 變化的一個三次方程
式，選取參 710=R 、 11 =C 、 2192 =C 、
1419=L 、 54−=a 、 452=c ， 
( )
1
3
2
1
3
2
1
 
 ,  
1
0
0
  
000
100
010
xy
dguf
x
x
x
x
x
x
=
++
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
+
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
=
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢
⎣
⎡
&
&
&
( ) ( ) ( )
( ) ( ) ( )( )3321
321
3612836128452      
3819025168180514
xxx
xxxf
++−
+−=
，
1=g 、 d 是外部干擾週期為 π2 、振幅為
5.0± 方波。初始條件 )1,0,0(),,( 321 =xxx 。
(圖四) (a ～ c)分別為 RCMAC、SAFNC 以
及所提之 P-CMAC-DMP 的實驗結果。由圖
中可知，所提控制器的均方誤差以及收斂
時間在所有比較的控制器中是最小的，除
此之外，也改善了 RCMAC 劇烈的切跳現
象。 
(4)考慮一個單節剛體機械手臂之動態方程
式： uqgmlqbqml v =++ )cos( 2 &&& ，其中 l為
手臂長度，m 是質量，q為角度位置，初
始值為 1.0)0( =q 、 0)0( =q& 。動態方程式為 
)( 
1
0
 
00
10
2
1
2
1 dguf
x
x
x
x ++⎥⎦
⎤⎢⎣
⎡+⎥⎦
⎤⎢⎣
⎡⎥⎦
⎤⎢⎣
⎡=⎥⎦
⎤⎢⎣
⎡
&
&
 
qx =1 、 )cos()()( 122 xlgxmlbf v−−= 、
qx &=2 、 21 mlg = 、 1==== vgblm 。d 是
外部干擾，假設 d 為週期 π2 、振幅為 1.0±
的方波。參考模型定義為 
)( 
1
0
 
816
10
2
1
2
1 tr
x
x
x
x
d
d
d
d ⎥⎦
⎤⎢⎣
⎡+⎥⎦
⎤⎢⎣
⎡⎥⎦
⎤⎢⎣
⎡
−−=⎥⎦
⎤⎢⎣
⎡
&
&
 
其中 TT21 ]0,0[],[ 　　=dd xx ， )(tr 為一週期 6
秒的矩形訊號。(圖五) (a ～  c)分別為
RCMAC 、 SAFNC 以 及 所 提 之
P-CMAC-DMP 的實驗結果。由圖中可知，
所提之控制器的均方誤差以及收斂時間在
所比較的控制器中是最小的，除此之外也
改善了切跳現象。 
 
綜合評估： 
    本計劃導入動態記憶體的規劃方式，
以實際的狀況適當安排輸入空間所映對的
記憶體需求，發展出動態記憶體規劃之參
數式小腦模型控制器(P-CMAC-DMP)。無
論是與 SC-CMAC、SC-CMAC with GBF、
RCMAC 或是 SAFNC 等諸多控制器，在不
同主題的效能比較實驗上，均能一定程度
兼或保有均方誤差最小、收斂時間最短以
及記憶體使用量最少等效能表現優勢。除
此之外，還改善了 RCMAC 劇烈的切跳現
象，整體說來，其結果的確令人滿意。對
於參與本研究計劃的同學而言，透過實際
應用的經驗，不僅能明白各控制理論間的
差異，思考其相關改善策略，更能為工業
發展升級，奠定深厚的基礎。 
 7
 
(a) SC-CMAC 
 
(b) SC-CMAC with GBF 
 
(c) P-CMAC-DMP 
圖二 
 
 
 
(a) RCMAC with 95.1=q  
 
 
 9
 
 
(b) SAFNC for Chua’s chaotic system 
 
 
 
(c) P-CMAC-DMP for Chua’s chaotic system 
圖四 
 
 
 
(a) RCMAC for one-link rigid robotic manipulator 
 
行政院國家科學委員會補助國內專家學者
出席國際學術會議報告
97 年 3 月 10 日
報告人姓名
呂 虹 慶
服務機構
及職稱
大同大學
電機工程學系
教授
時間
會議
地點
自 97 年 2 月 25日
至 97 年 2 月 29日
美國, 邁阿密
本會核定
補助文號
NSC 96-2221-E-036-030
會議
名稱
(中文) 出席第十二屆智慧工程系統國際會議
(英文) 12th International Conference on Intelligent Engineering Systems, INES2008
發表
論文
題目
(中文) 藉由小腦模型控制器達成線上之學習控制
(英文) On-line Learning CMAC Control System
報告內容應包括下列各項：
一、 參加會議經過
二、 與會心得
三、 考察參觀活動(無是項活動者省略)
四、 建議
五、 攜回資料名稱及內容
六、 其他
附
件
三
On-Line Learning CMAC Control System
Ming-Feng Yeh
Department of Electrical Engineering
Lunghwa University of Science and Technology
Taoyuan County 33306, Taiwan
Hung-Ching Lu
Department of Electrical Engineering
Tatung University
Taipei City 10451, Taiwan
Abstract- This study proposes an on-line learning CMAC
(cerebellar model articulation controller) control system,
which contains only one single-input controller
implemented by a differentiable CMAC. The on-line
learning rules derived by the gradient descent algorithm
are similar to neural control schemes. However, without a
preliminary off-line learning, the proposed CMAC
controller can provide the control effort to an unknown
plant at each time step. Simulation is given to demonstrate
the effectiveness of the proposed controller.
I. INTRODUCTION
The cerebellar model articulation controller (CMAC),
proposed by Albus in 1975 [1], is a kind of neural network, and
it learns input-output mappings based on the premise that
similar inputs should produce similar outputs. Therefore the
CMAC stores information locally as contrast to the multi-layer
feedforward networks. Due to its advantage of fast learning
property, good generalization capability, and ease of
implementation by hardware [2], [3], the CMAC has found
various successful applications in model-free function
approximation [2]-[4], control problems [5]-[9], and data
clustering problems [10]. In addition, the CMAC has been
already validated that it can approximate a nonlinear function
over a domain of interest to any desired accuracy [11].
The traditional CMAC uses a constant basis function as the
association memory selection vector to model the hypercube
structure. Hence the derivative information of input and output
variables cannot be preserved. This will raise a difficulty in
learning when the derivate information is required. Chiang
and Lin [12] developed a CMAC with a non-constant
differentiable basis function and proved the convergence of
learning. This kind of CMACs, termed the differentiable
CMACs hereafter, can take advantage from the output
differentiability to have a better performance [12], [13].
Miller et al [6], [7] proposed to combine the CMAC with a
conventional controller, e.g., the proportional-integral-
derivative (PID) controller, to form a CMAC control system
and reported very good results in the robotics control.
According to their scheme, the control solely governed by the
conventional controller at the early stage of the control process.
As the CMAC gradually learns the inverse dynamics of the
plant, the control is shifted from the conventional controller to
the CMAC, and then the control is precisely achieved.
However, as stated in [8], the conventional controller cannot
be removed even when the magnitude of the conventional
controller is very small compared with that of the CMAC.
Otherwise, the stability cannot be maintained. Although
Miler’s control scheme can be unstable, their method has 
raised much interest in applying it to various control problems.
This study utilizes only one differentiable CMAC to
construct an on-line learning CMAC control system. In the
proposed system, the CMAC controller can solely govern a
plant without the help of any conventional controller as in
Miler’s control scheme [6], [7] or the help of any 
compensating controller as in [9]. Besides, the CMAC table is
on-line updated without a preliminary off-line learning, while
the stability of the system is still maintained.
This paper is organized as follows. Section II presents a
typical CMAC control system. The proposed on-line learning
CMAC control system and its learning strategy are given in
Section III. The simulation result for a nonlinear discrete plant
is shown in Section IV. Finally, Section V contains some
conclusions.
II. TYPICAL CMAC CONTROL SYSTEM
A typical CMAC control system [8] usually accompanies
with a conventional controller, e.g., PID controller, as shown
in Fig. 1, where y is the system output, r is the reference input,
and the control signal u is the sum of the CMAC output uCMAC
and the output of the conventional controller uc. This scheme
could provide precision control for complex dynamical plants
without changing the original control process. Using the
conventional controller in this system is to stabilize the plant
and to help the CMAC learn how to improve the control. The
system is solely controlled by the conventional controller at the
early stage of the control process. Meanwhile, the control
signal u is treated as a desired output to adjust the CMAC
contents. After several learning cycles, the CMAC could learn
the inverse mapping of the plant. At this moment, the CMAC
is applied to the system and then the control is shifted from the
conventional controller to the CMAC. However, the
conventional controller cannot be removed even when the
magnitude of the conventional controller is very small
compared with that of the CMAC. Otherwise, the stability
cannot be maintained.
Initially, the CMAC table is empty. At each time step, say k,
the CMAC involves a recall process and a learning process.
The recall process uses y(k) and r(k+1), the desired system
response for the time step k+1, as the addresses to generate the
control signal from the CMAC table. In the learning process,
u(k) acts as the desired output to adjust the CMAC contents
stored at the locations addressed by y(k) and y(k+1), the actual
system output at the next time step. The corresponding
the system when it learns.
B. Quantization of CMAC Input Space
In the CMAC input space, each state variable is quantized
and the state space is divided into discrete states. Fig. 4
illustrates one possible partition scheme, i.e., the equal-sized
quantization, for the case of a single variable. Note that the
adaptive quantization scheme [16] can also be used to partition
the input space. Assume that the input space is quantized into
Ns discrete states and that si, i= 1, 2, …, Ns, represents the ith
state. Then there exist Ns+1 individual knots, denoted by dj, j =
0, 1, …, Ns, on the ds-axis. We assume that the information for
a quantized state is distributively stored in Ne memory
elements and that Nh represents the entire memory size. Under
this assumption, a complete block will contain Ne elements,
and the block division of the CMAC will consist of Ne different
layers. Look at Fig. 4, again. Blocks A, F and K are complete
blocks and blocks D and E are incomplete blocks in the case of
Ne=3. Each block, complete or not, is regarded as an
association memory index in the one-dimensional CMAC.
There are 12 memory elements to be generated in this partition
scheme.
C. Recall and Learning Processes
Like the typical CMAC control system, all memory
contents are initially set to zero. At each time step, the
differentiable CMAC also involves a recall process and a
learning process. The recall process only uses the signed
distance ds(k) as the address to generate the control signal uc(k)
from the CMAC table. That is,
,))(())(()(
1



hN
i
siisic kdwkdaku  (6)
where ai, i = 1, 2, …, Nh, is the index indicating whether the ith
memory element is addressed by the state involving ds(k), wi is
the ith memory content, and )( si d exp((dsmi)/i)2) is the
ith Gaussian basis function with mean mi and variance .2i
Since each state addresses exactly Ne memory elements, only
those addressed ai’s are 1 and the others are 0.
Since no conventional controller is used in the proposed
system, the differentiable CMAC cannot use (1) or (2) to adjust
its memory contents. With a suitable cost function on error
signal, the gradient descent method can be employed to infer
the learning rules for the parameters in the proposed system.
Define the cost function
)())()(( 22
12
2
1 kekykrE  . (7)
According to the system structure (Fig. 2) and the cost function
(7), the delta termto be propagated is given by
uu
cc
gye
u
u
u
y
y
E
u
E 







 , (8)
where uyyu  represents the sensitivity of the plant with
respect to its input. The learning rules are summarized as
follows.
1) The updating rule for the ith memory content can be derived
as
i
c
c
w
i
wi w
u
u
E
w
E
w





 
)( siwi da   , (9)
wherewi is the updated value of the ith memory content in the
differentiable CMAC andw is the learning rate.
2) The updating rule for the mean and variance of the ith
Gaussian basis function can be derived as
i
c
c
m
i
mi m
u
u
E
m
E
m





 
imi wa   2
)(2
)(
i
is
si
md
d

  , (10)
i
c
ci
i
u
u
EE



  





ii wa   3
2)(2
)(
i
is
si
md
d

  , (11)
wheremi andi are the updated values for the mean mi and
variancei of the Gaussian basis functioni, respectively, and
m andare the corresponding learning rates.
3) The updating rule for the scaling factors can be derived as
u
u
u
uu g
u
u
y
y
E
g
E
g







  c
u
u ug
  , (12)
e
s
s
c
c
e
e
ee g
d
d
u
u
E
g
E
g







 
,
1
)(2
)(
21
2 









  

emd
dwa
hN
i i
is
siiie
(13)
d
s
s
c
c
d
d
dd g
d
d
u
u
E
g
E
g







 
,
1
)(2
)(
21
2 







  

emd
dwa
hN
i i
is
siiid

(14)
wheregu,ge andgd are the updated values for gu, ge and gd,
respectively, andu,e andd are the learning rates.
4) The updating rule for the slope of the switching line can be
that the proposed control scheme achieves a good tracking
performance for the nonlinear plant, which are assumed to be
unknown.
ACKNOWLEDGMENT
This paper was supported by the National Science Council,
Taiwan, Republic of China, under Grant NSC 95-2221-
E-036-007.
Fig. 5. System response.
Fig. 6. MSE for each time step.
TABLE I
NUMERICAL RESULTS OF THE MEMORY CONTENTS
index 1 2 3 4
initial 0 0 0 0
final 0 0.0658 0.0752 0
index 5 6 7 8 9
initial 0 0 0 0 0
final 0 0.0224 0.0288 0.0002 0
index 10 11 12 13 14
initial 0 0 0 0 0
final 0 0.0007 0.0021 0.0219 0
index 15 16 17 18 19
initial 0 0 0 0 0
final 0 0 0.0410 0.0812 0
TABLE II
NUMERICAL RESULTS OF THE MEANS
index 1 2 3 4
initial 0.3500 0.1000 0.1000 0.3500
final 0.3500 0.0850 0.0875 0.3500
index 5 6 7 8 9
initial 0.4250 0.1500 0.0500 0.2750 0.6000
final 0.4250 0.1413 0.0559 0.2750 0.6000
index 10 11 12 13 14
initial 0.5000 0.2000 0 0.2000 0.5000
final 0.5000 0.2000 0.0007 0.1881 0.5000
index 15 16 17 18 19
initial 0.6000 0.2750 0.0500 0.1500 0.4250
final 0.6000 0.2750 0.0589 0.0858 0.4250
TABLE III
NUMERICAL RESULTS OF THE VARIANCES
index 1 2 3 4
initial 0.0750 0.0500 0.0500 0.0750
final 0.0750 0.0624 0.0666 0.0750
index 5 6 7 8 9
initial 0.0875 0.0500 0.0500 0.0625 0.1000
final 0.0875 0.0579 0.0558 0.0625 0.1000
index 10 11 12 13 14
initial 0.1000 0.0500 0.0500 0.0500 0.1000
final 0.1000 0.0500 0.0493 0.0625 0.1000
index 15 16 17 18 19
initial 0.1000 0.0625 0.0500 0.0500 0.0875
final 0.1000 0.0625 0.0582 0.0542 0.0875
TABLE IV
NUMERICAL RESULTS OF THE SCALING FACTORS AND THE SLOPE OF THE
SWITCHING LINE
gp gd gu 
initial 0.6 0.3 1.0 4.5
final 0.6084 0.2999 1.0084 4.5021
REFERENCES
[1] J. S. Albus, “Data storage in the cerebelar model articulation controler 
(CMAC),” Trans. ASME, J. Dyn. Syst. Meas. Control, vol. 97, no. 3,
pp.228-233, 1975.
[2] K. S. Hwang and C. S. Lin, “Smooth trajectory tracking of three-link
robot: A self-organizing CMAC approach,” IEEE Trans. Syst. Man
Cybern. B, Cybern., vol. 28, no.5, pp. 680-692, 1998.
[3] H. Shiraishi, S. L. Ipri, and D. D. Cho, “CMAC neural network controller
for fuli-injection systems,” IEEE Trans. Contr. Syst. Tech., vol .3, no. 1,
pp. 32-38, 1995.
[4] J. C. Jan and S. L. Hung, “Higher-order MS_CMAC neural network,” 
IEEE Trans. Neural Netw., vol. 12, no. 3, pp. 598-603, 2001.
[5] Y. H. Kim and F. L. Lewis, “Optimal design of CMAC neural-network
controler for robot manipulators,” IEEE Trans. Syst. Man Cybern. C,
Appl. Rev., vol. 30, no. 1, pp. 22-31, 2000.
[6] T. W. Miler, F. H. Glanz, and L. G. Kraft, “Application of a general 
learning algorithm to the control of robotic manipulators,” Int. J. Robot.
Res., vol. 6, no. 2, pp. 84-98, 1987.
[7] T. W. Miler, R. P. Hewes, F. H. Glanz, and L. G. Kraft, “Real-time
dynamic control of an industrial manipulator using a
neural-network-based learning controller,” IEEE Trans. Rob. Auto., vol.
6, no. 1, pp. 1-9, 1990.
[8] F. C. Chen and C. H. Chang, “Practical stability issues in CMAC neural 
network control systems,” IEEE Trans. Contr. Syst. Tech., vol. 4, no. 1,
pp. 86-91, 1996.
[9] J. Y. Chen, P. S. Tsai, and C. C .Wong, “Adaptive design of a fuzzy 
cerebelar model arithmetic controler neural network,” IEE Proc.,
Control Theory Appl., vol. 152, no. 2, pp. 133-137, vol. 2005.
行政院國家科學委員會補助國內專家學者
出席國際學術會議報告
96 年 10 月 16 日
報告人姓名
呂 虹 慶
服務機構
及職稱
大同大學
電機工程學系
教授
時間
會議
地點
自 96 年 10 月 7日
至 96 年 10 月 10日
加拿大魁北克蒙特婁市
本會核定
補助文號
NSC 96-2221-E-036-030
會議
名稱
(中文) 2007年IEEE系統、人類和頭腦學國際會議
(英文) 2007 IEEE International Conference on Systems, Man and Cybernetics
發表
論文
題目
(中文) 藉由小腦模型控制器達成感應馬達之速度控制
(英文) Speed Identification Via Cerebellar Model Articulation Controller for Induction
Motor
報告內容應包括下列各項：
一、 參加會議經過
二、 與會心得
三、 考察參觀活動(無是項活動者省略)
四、 建議
五、 攜回資料名稱及內容
六、 其他
附
件
三
 
 
  
Abstract—This article presents a newly developed 
speed-sensorless induction motor drive using 
cerebellar-model-articulation-controller (CMAC). The CMAC 
neural network is trained online by using the gradient-type 
learning algorithm to provide a real-time adaptive identification 
of the motor speed. The estimated speed of the CMAC is then 
fed back in the speed control loop, and the speed-sensorless 
vector drive is realized. The proposed CMAC speed estimator 
forces the estimated speed to follow the actual motor speed 
precisely. The article describes both the theoretical analysis as 
well as the simulation results to verify the effectiveness of the 
proposed method. 
Keywords: CMAC, real-time adaptive identification, 
speed-sensorless 
I. INTRODUCTION 
Accurate speed information is necessary to realize 
high-performance and high-precision speed control of an 
induction motor. The mechanical sensors such as resolvers or 
pulse encoders are used to achieve the speed control loop. 
However, these sensors are usually expensive and bulky. 
Therefore, the cost and size of the induction motor drive 
systems are increased. 
Since the late 1980s, speed-sensorless control methods of 
induction motors using the estimated speed instead of the 
measured speed have been studied. Various control 
algorithms for the elimination of the speed sensor have been 
proposed: algorithms using state equations [1-2], model 
reference adaptive systems [3-4], Luenberger- or 
Kalman-filter observers [5-6], saliency effects [7], 
sliding-mode controls [8-9], sensorless vector control [10-12] 
and direct controls of torque and flux [13-15]. However, an 
induction motor is a highly coupled, nonlinear dynamic plant. 
Therefore, it is very difficult to obtain good performance for 
an entire speed range and transient states using previous 
methods. 
Since 1990, there have been some investigation into the 
application of neural networks to various aspects of induction 
motor control such as adaptive control [16], sensorless speed 
control [17-19], as well as for motor parameter identification 
purposes [20], and flux estimation purposes [21-22]. Neural 
networks show great potential for modeling nonlinear 
 
Manuscript received March 1, 2007.  
C. -H. Tsai. is with the Department of Electrical Engineering, China 
Institute of Technology , Taipei, R. O. C..  (phone: +866-2-27851067 ext. 
140 ext 220; fax: +886-2-26534518; e-mail: chtsai@cc.chit.edu.tw) 
H.-C. Lu is with the Department of Electrical Engineering, Tatung 
University, Taipei, Taiwan (e-mail: luhung@ttu.edu.tw). 
 
systems where this is difficult using traditional techniques, 
owing to their inherent parallel structure and ability to learn. 
In particular, the CMAC [23-24], a particular type of neural 
network, is capable of learning nonlinear functions quickly 
due to the local nature of its weight modification. Such 
networks are also simpler to implement when compared with 
other types of neural network. This makes CMAC a suitable 
candidate for on-line, real-time implementation of modeling 
and controlling induction motor that typically exhibit 
nonlinear behavior. 
In this article, a new speed estimation method of an 
induction motor is proposed. In the new approach, two 
models of state variable estimation are used. One provides the 
desired output, and the other one gives the CMAC output. 
The weights of the CMAC are chosen to be the motor 
parameters, such as rotor speed. The CMAC output is 
compared to the desired value as shown in Fig. 1, and the total 
error between the desired and the estimated state variable is 
then backpropagated to adjust the weights(i.e., rotor speed) of 
the CMAC, so that the output of this model will coincide with 
the desired value. 
This article is structured as follows. In Section 2, the basic 
concept of the CMAC neural network is discussed. In Section 
3, speed estimation method using CMAC is described. In 
Section 4, speed-sensorless vector control drives are 
obtained. In Section 5, the experimental system setup is 
discussed. Sections 6 and 7 provide the experimental results 
and conclusions, respectively. 
 
+
−
e
 
Figure 1. Speed identification using CMAC 
 
 
Speed Identification Via Cerebellar Model Articulation 
Controller for Induction Motor 
Cheng-Hung Tsai, Hung-Ching Lu
 
 
)1( +kY
)(kY CMACU
U
e
 
Figure 4. CMAC learning process 
 
III. SPEED ESTIMATOR USING CMAC 
The state equations of an induction motor in the stationary 
reference frame can be expressed as follows: [25]. 
 
 ),()()( tVBtXA
dt
tdX
s⋅+⋅=
                                             (4) 
 ),()( tXCtY ⋅=                                                           (5) 
 
where 
 X i ids qs dr qr
T
= [ ] ,φ φ  
 Y i ids qs
T
= [ ] ,   
 Tqsdss vvV ][=   
 
















−
−−
−



−
+−




−
+−
=
r
r
r
mL
r
rr
mL
rrLsL
mL
rLsL
mL
r
rsL
sR
rLsL
mL
r
rrLsL
mL
rsL
sR
A
τ
ω
τ
ω
ττ
τσσ
ω
τσ
σ
σ
σ
ω
τστσ
σ
σ
10
10
10
01
 
 
B
L s
L s
=






1 0
0
1
0 0
0 0
σ
σ
                 C =




1 0 0 0
0 1 0 0
 
 [ ]i i is ds qs T=  stator current 
 [ ]Tqrdrr φφφ =  rotor flux 
 R Rs r,   stator and rotor resistance 
 L Ls r,  stator and rotor self inductance 
 Lm  mutual inductance 
 σ  leakage coefficient, σ = −1 2L L Lm s r( )  
 τ r  rotor time constant 
 ω r   motor angular velocity 
 
The state variables are the stator current [ ]i i is ds qs T=  and 
the rotor flux [ ]Tqrdrr φφφ = . The input variable is the stator 
voltage T
qsdss vvV ][= . 
From (4), we can obtain two well known flux simulators. 
One is called the voltage model and the other is the current 
model. Since the induction motor voltages and currents are 
measured in the stationary reference frame, it is convenient to 
express these equations in the stationary frame, and they are 
expressed in (6) and (7) as follows:  
Voltage model: 
)( sssss
m
r
r iLiRVL
L  σφ −−=                                                        (6) 
Current model: 
s
r
m
rr
r
r i
LJI
τ
λω
τ
λ ++−= )1(                                                  (7) 
where the symbol “． ” denotes the time derivative, 
T
qrdrr ][ λλλ =  is the same rotor flux but obtained from (7), and 
the matrices I , J  are defined as: 
 
      

 −
=


=
01
10
,
10
01
JI . 
 
Owing to the equation (6) does not involve the speed rω , it 
is selected to generate the desired value of rotor flux, rφ , and 
(7) which does involve rω  generates the estimated rotor flux, 
rλ . The equation (7) may be regarded as CMAC model with 
adjustable weights. The equation (6) may also be regarded as 
a reference model. Fig. 5 illustrates the structure of the 
proposed speed estimator of an induction motor using 
CMAC. Given complete data of the motor parameters and the 
motor speed, these two model outputs should coincide. 
However, any mismatch between the speed used in the 
CMAC and the motor speed would automatically result in 
error between the output of the two estimators rλ  and rφ . It is 
this error between the desired rotor flux and the actual rotor 
flux that will be used to adjust the weights of the CMAC, in 
other words the rotor speed rω  in (7). 
To obtain the learning algorithm, the discrete-time model 
of (7) is first derived using the backward difference method: 
 
332211)( ZWZWZWkr ++=λ                                         (8) 
 
where TW rω=1 , 
r
TW
τ
−= 12
,  TLW
r
m
τ
=3
,  )1(1 −= kJZ rλ , 
)1(2 −= kIZ rλ , , and T  is the sampling period. 
The model (8) can be represented as a two dimensional 
CMAC model with three index memories, where 
1W , 2W , and 
3W  represent the weights of the networks, si  and )1( −krλ  
are the inputs of the CMAC as shown in Fig. 5. The error 
output between the desired flux and the plant output is 
 
 
 
sR
sL
rR
rL
mL
J
B
Ω
Ω
2smN −−
sradmN −
∆
 
 
between rφ  and rλ  is calculated to adjust the weights of the 
CMAC. Finally, the output of the CMAC )(ˆ krω  is produced 
from the weights variation of CMAC. 
V. EXPERIMENTAL STSTEM SETUP 
The experimental system consists of a 2.2-kW induction, 
voltage-source inverter, a dynamo system for load test, and a 
digital signal processor (DSP) (TMS320F2812) main control 
board. Fig. 8 shows the block diagram of the experimental 
system. The machine under study is a 3-HP, 4-pole 
squirrel-cage induction motor, whose parameters are shown 
in Table I. 
The vector control algorithm and the speed estimation 
algorithm are executed by the control board with a DSP chip. 
The phase currents are also sampled by the A/D converters 
that built in the DSP chip. The real speed of the induction 
motor is measured by a pulse encoder which has 2000 pulses 
per revolution. The speed measurement is also made by the 
DSP. The inverter switching frequency is 4kHz. 
The structure of the CMAC is the same as shown in Fig. 2. 
As described in Section 2, the generalization width and input 
quantization is a measure for the size of local generalization 
ability. Smaller values of the generalization width and input 
quantization will result in better performance for local 
generalization, but poorer performance for global 
generalization. 
The learning rate is a coefficient related to the rate of 
weight adjustment during training. Smaller values usually 
make the training more accurate at the expense of speed. 
Therefore, these parameters have been determined by trial 
and error which show the best result. 
VI. EXPERIMENTAL RESULTS 
Experiments are carried out on the various operating 
conditions to verify the performance of the proposed 
algorithm. Fig. 9-10 show the experimental results of the 
proposed system. Fig. 9 shows the speed-sensorless control 
performance where the load is applied and is released at 4s 
and 8s by using the dynamo system at 1800 rpm speed, 
respectively. The estimated speed coincides with the real 
speed exactly also at the load abrupt change. Fig. 10 shows 
the speed and current of the induction motor at free 
acceleration/deceleration mode with load applied at star-up. 
Similarly, as in Fig. 9, it has high performance at the rated 
speed region. The results show that the proposed speed 
estimator has stable and good variable-speed control 
performance.  
VII. CONCLUSIONS 
A CMAC-based speed identification method for induction 
speed-sensorless vector control drive was proposed. The 
gradient-type learning technique was used to provide a 
real-time adaptive estimation of the motor speed. From 
experimental results, the proposed scheme performs well 
under various conditions and therefore can lead to an 
improvement in the performance of speed sensorless drives. 
As a result, the approach was presented in a way that will 
contribute to a better understanding of the CMAC application 
to motion control. 
 
 
0 2 4 6 8 10 12 
0
300
600
900
1200
1500
1800
2100
0 2 4 6 8 10 12 
0
300
600
900
1200
1500
1800
2100
0 2 4 6 8 10 12 
-15
-10
-5
0
5
10
15
(a)
(b)
(c)
time(sec) 
time(sec) 
time(sec) 
ω rm rpm( )
 ( )ω rm rpm
i Aas ( )
 
Figure 9. Speed and current response of speed-sensorless 
control with load change 1800* =rω  rpm. 
(a) the actual rotor speed 
(b) the estimated rotor speed 
(c) the feedback a -phase current 
 
 
