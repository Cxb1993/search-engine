program code differs from system documents in various 
ways. The identifiers in source code 
are related through data flows rather than positions, 
and an iteration structure expands the 
code within its body in effect. Therefore, we propose 
to apply reverse engineering, data flow 
analysis, static analysis of iterations, and 
information retrieval techniques to extract 
information between system features and components 
from the source code as well as articles 
in the bug tracking system. Feature-component 
correspondences indicate what components 
are related to the implementation of certain 
features. The extracted information will help 
software engineer in assessing the impact of a 
possible change in software features and 
identifying relevant components when trying to 
understand software features. 
英文關鍵詞： information retrieval, static analysis, reverses 
engineering, impact analysis, program comprehension 
 
「匹配」或「不匹配」兩種。這個問題導致了布林
搜尋不能被廣泛的運用。但是，由於布林擷取能夠
給使用者提供更多的可控制性，在現今許多高級的
搜尋引擎中還是會發現布林查詢的蹤跡。目前，最
為常見的模型有向量空間模型 (Vector-Space  
Model, VSM)、機率模型 (Probabilistic Model)、
推理網路模型 (Inference Network Model) 。 
 
A、向量空間模型 
向量空間模型最早由 Gerard提出，在此模型
中，一個文件(Document)被描述成由一系列關鍵詞
(Term)組成的向量。模型並沒有規定關鍵詞如何定
義，但是一般來說，關鍵詞可以是 字，詞或短句。
假設我們用「詞」作為 Term，那麼在詞典中的每
一個詞，都定義向量空間中的一維。如果一篇文檔
包含這個詞，那麼表示這個文檔的向量在這個詞所
定義的維度 上應該擁有一個非 0值（對絕大多數
系統來說，是正值）。 
當提交一個查詢時，這個查詢是由文字構成，
所以也可以被向量空間所表示。模型將對查詢與文
件，運算一個相似度需要注意的是，模型也沒有對
相似度給出確切的定義。它可以使歐氏距離，也可
以是兩個向量的夾角的餘弦。 
假設 表示文檔向量，而 表示查詢向量，文
檔與查詢的相關性可以用餘弦距離表示如下： 
 
如果我們用 和 表示 和 中的第 i維的
值，並且對每個文件向量進行歸一化，即令
， 那麼上式可以表示為 
 
在此， 究竟如何取值是一個重要的問題，其取
值一般被稱為關鍵詞 i在文檔 D中的權重。關鍵詞
權重問題將在隨後進行專門的討論。 
傳統向量空間模型的問題在於各個維度間缺
乏相關性，因而無法對文件中每個詞的相關性提供
資訊。所對應的改進方法為對文件的向量進行降維
度，將維度巨大的文件檔投影到某個較小的空間
中，使得關鍵詞之間即使不完全匹配，也能夠根據
與意發生關連，這就是潛語意索引(Latent 
Semantic Indexing, LSI)，他透過對向量進行奇
異值分解，將高維度的文件向量投射到低維度語意
空間中。 
B、機率模型 
機率模型的基本思想是估計文件與查詢相關
聯機率，並對所有文件根據關聯機率進行排序。這
一模型最早由 Maron和 Kuhn在 1960年提出。[7] 
在給定查詢 Q的情況下，用 P(R | D)表示文件與
查詢相關的機率，而用 表示文件與查詢不相
關的機率。 那麼，就可以用 
 
對文件進行排序。利用貝葉斯公式（Bayes theorem, 
簡稱貝氏），可以很容易的將上面的公式變為產生
式的形式： 
 
由於 P(R)和 同文件無關，上面的公式可以最
終表示為： 
 
機率模型的主要任務就集中在估計 和
P(D|R)上。 
C 、推理網路模型 
推理網路模型是一種較上述兩中模型更為一
般化的模型，上述模型都可以歸結為推理網路模型
的一種實作。在此模型下，僅僅規定文檔以某種 
「力度」產生某個來自查詢的關鍵詞，至於力度如
何定義，則完全沒有規定，即可以是機率，也可以
是關鍵詞權重。 
 
三、 系統設計與實作 
   本研究的雛型系統主要功能如圖 1，共分為三
個部份，分別為資訊擷取跟資料流分析以及控制流
系統。資訊擷取出關鍵字集合與各程式碼內容之相
關性；資料流分析則為個別程式分析後，增添有資
料流關係之變數名稱到關鍵字集合，控制流將程式
碼類型的檔案進行分析，並展開迴圈最佳化數據。 
 
圖 1 系統架構圖 
 
    就由圖二的狀態圖可以將系統的分析模式規
劃為下列步驟： 
1.進入圖形介面。 
2.輸入關鍵字(群)跟開啟文件檔案（群）。 
Bugzilla 儲 存 庫 以 作 為 衝 擊 分 析 (impact 
analysis)[7,8]。Marcus et al.運用現有的語言模式資
訊擷取架構，Latent semantic indexing，在軟體系統
之性能(又稱觀念)定位上[9]。Clearyet al.運用另一
種語言模式資訊擷取架構 Hyperspace analogue to 
language，並以實驗方式驗證其成效[4]。 
 
五、結論與未來發展 
 
在資訊擷取核心套用泊松模型的概念，獲得的
功效不一定來得比其他模型好。但是，以其中心概
念上容易了解，系統上的各項變數也有很高的自由
性可作微調，在維護的過程後續工程師要加入另外
的計算變數也很簡單，在實作上也比較能夠快速地
被接受，大大提高開發上的速度。將來如果還有發
現其他模型的優點足以用來彌補泊松模型的不
足，未來研究也會予以採納，以能夠製作出更好的
文件分析系統。 
又由於資訊擷取分析只是針對關鍵字(原始碼
文件)進行功能的解析，如果程式撰寫者沒有遵照
一般命名規則，資訊泊松模型分析的功效便會銳
減。資料流分析可以增加變數之間的關連性，藉此
找出資料流向，以彌補單純資訊擷取不足的資訊。
使用資料流分析以針對原始碼進行徹底解析，能夠
使資訊擷取結果數據有預期般的提升，因此加入資
料流分析的資訊擷取應能有更準確的功能與元件
之相關性結果。 
而控制流對程式碼類型的文件的分析有著顯著
的幫助，藉由迴圈的展開將文件內容正確化，進行
資訊擷取時的數據才更能計算出關鍵詞的正確詞
頻與文件長度，與資料流在不同的面向上提供資訊
擷取更正確的元件相關性結果。 
 
參考文獻 
[1] 1 Hassan, A.E., "Mining Software Repositories 
to Assist Developers and Support Managers," in 
Proc. Of 22nd IEEE International Conference 
on Software Maintenance (ICSM'06), 2006, pp. 
339-342. 
[2] Hassan, A.E., Richard C. Holt, "Using 
Development History Sticky Notes to 
Understand Software Architecture," in Proc. Of 
12th IEEE International Workshop on Program 
Comprehension (IWPC'04), 2004. 
[3] D. Sullivan(2001),”Document Warehousing and 
Text Mining”, Wiley Computer Publishing. 
Pp.326. 
[4] Cleary, B., Exton, C. et al. “An empirical 
analysis of information retrieval based concept 
location techniques in software 
comprehension.” Empir Software Eng, 14, pp. 
93–130, 2009. 
[5] Hill E, Pollock L., et al. “Exploring the 
neighborhood with Dora to expedite software 
maintenance.” 22nd IEEE/ACM International 
Conference on Automated Software 
Engineering (ASE’07), 2007. 
[6] Shepherd D, Fry Z. et al. ”Using natural 
language program analysis to locate and 
understand action oriented concerns.” 
International Conference on Aspect Oriented 
Software Development (AOSD’07). 
[7] Canfora G, Cerulo L “Impact analysis by 
mining software and change request 
repositories.” 11th IEEE International 
Symposium on Software Metrics, 2005. 
[8] Canfora G, Cerulo L “Fine grained indexing of 
software repositories to support impact 
analysis.” International Workshop on Mining 
Software Repositories, 2006. 
[9] Marcus A, Sergeyev A. et al. “An information 
retrieval approach to concept location in source 
code.” In Proc. Of 11th Working Conference on 
Reverse Engineering (WCRE 2004). Delft, The 
Netherlands.2004. 
TECHNICAL SESSION 2D: INSTRUMENTATION AND CONTROL 
TECHNICAL SESSION 2E: OPTICAL COMMUNICATIONS AND PHOTONICS 
TECHNICAL SESSION 2F: SIGNAL AND IMAGE PROCESSING 
 
Wednesday, 4 July: 
8:40 AM - 10:00 AM 
TECHNICAL SESSION 3A: AD-HOC AND SENSOR NETWORKS 
TECHNICAL SESSION 3B: SATELLITE, SPACE AND WIRELESS COMMUNICATIONS 
TECHNICAL SESSION 3C: NEURAL NETWORKS AND INTELLIGENT SYSTEMS 
TECHNICAL SESSION 3D: NETWORK RELIABILITY AND QOS 
TECHNICAL SESSION 3E: VLSI DESIGN 
TECHNICAL SESSION 3F: SIGNAL AND IMAGE PROCESSING 
10:30-1:00 PM 
Keynote speeches: "Wavelet Modulation for use in Communication and Power Electronics-Experimental 
Performances" by Prof. Dr. M Azizur Rahman 
"A Novel Approach using 3D Self-Organizing Map for Pattern Classification and Clustering" by Professor 
Dr. Marzuki Khalidr 
2:00-3:20 PM 
TECHNICAL SESSION 4A: AD-HOC AND SENSOR NETWORKS 
TECHNICAL SESSION 4B: SATELLITE, SPACE AND WIRELESS COMMUNICATIONS 
TECHNICAL SESSION 4C: MULTIMEDIA AND WEB SERVICES 
TECHNICAL SESSION 4D: INSTRUMENTATION AND CONTROL 
TECHNICAL SESSION 4E: OPTICAL COMMUNICATIONS AND PHOTONICS 
TECHNICAL SESSION 4F: SIGNAL AND IMAGE PROCESSING 
TECHNICAL SESSION 4G: SIGNAL AND IMAGE PROCESSING 
3:40 PM - 5:00 PM 
TECHNICAL SESSION 5A: SOFTWARE ENGINEERING AND AGILE DEVELOPMENT 
TECHNICAL SESSION 5B: SATELLITE, SPACE AND WIRELESS COMMUNICATIONS 
TECHNICAL SESSION 5C: 3G, 4G MOBILE COMMUNICATIONS 
TECHNICAL SESSION 5D: VLSI DESIGN 
TECHNICAL SESSION 5E: OPTICAL COMMUNICATIONS AND PHOTONICS 
TECHNICAL SESSION 5F: SIGNAL AND IMAGE PROCESSING 
TECHNICAL SESSION 5G: GREEN ICT 
 
maintenance; Software architecture 
 
四、建議 
此研討會是時尚與另外兩個研討會一起舉辦，雖然領域各有不同，然而可以分享許
多行政支援的資源，值得參考，然而如何讓與會來賓不至於搞錯地點，需要精心設
計，才不會犧牲會議品質。 
 
五、攜回資料名稱及內容 
IIUM engineering congress 2012 program and abstract 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
六、其他 
 
 
 
 
daunting challenge. Moreover, available 
architectural information are scattered at different 
places without organization and tools to support 
browsing and investigating architectural 
relationships are lacking.  
In this paper, we describe a tool implemented to 
recover the software architecture systematically and 
to solve the missing documentation problem. We 
expect that the recovered architecture information 
could assist maintainer in performing maintenance 
task and provide good references to integrate 
functions and programs and form the basis of 
application re-engineering. In order to keep the 
documents updated all the time, we propose a 
semi-automatic mechanism to request maintainers 
to update software documentation while 
maintaining programs. Our major goal is to build a 
software architecture management system (SAMS) 
to provide useful information to maintainers. We 
hope that this system could be used to evaluate 
change impacts and estimate maintenance cost in 
the future. 
II. ARICHTECTURAL  RECOVERY 
A. Software Architecture 
There are many kinds of artifacts created in the 
SDLC, including system requirements, design 
documents, code, test cases, and so on. Software 
architecture (SA) is the artifact describing the 
architectural design of the system. Bass define 
software architecture as “the structure or structures 
of the system, which comprise software components, 
the externally visible properties of those 
components, and the relationships among them” 
[1][2]. Other definitions are given by Garlan and 
Perry [3][4] and Wong [5]. In general, software 
architecture is regarded as combination of 
interrelated objects, which describe software system 
from multiple views.  Information provided by 
these views is meaningful and helpful for 
performing maintenance works. 
Because of the multi-viewed property of software 
architecture and the differences of application 
domain, there is no ideal structure to hold these 
objects and relationships. The “4+1 View” model 
proposed by Kruchten [6][7] proposes separate 
descriptions of views: conceptual view, module 
view, execution view, code view. The conceptual 
view describes system with major design 
components and their relationships. The module 
view decomposes system into layered modules. The 
code view describes the organization of the source 
code into object code, and the execution view 
describes the mapping from software to hardware 
and distribution of the software components. 
Software architecture abstraction level model 
proposed by Sulaiman [8] describes software 
architecture in a concrete manner. There are a total 
of six levels, from the first level with high-level 
abstract description to the lowest level with pseudo 
code. 
Compared to the aforementioned work, our research 
focuses on maintenance aspect of software 
architecture instead of general software architecture. 
Therefore, we propose a maintenance oriented 
software architecture repository for our HIS as 
shown in Fig. 1. In comparison with Sulaiman’s 
architecture abstraction level, we are more 
interested in detailed information including system, 
function, program/module, screen layout, print 
message, and interrelationship among these objects. 
In addition, we introduce data oriented architecture, 
such as table and file properties, data dictionary, and 
relationship between program module and data. We 
expect to enhance the completeness of software 
architecture description. 
 
 
 
 
 
 
 
Figure 1.  Architecture Repo sitory Database Model 
B. Recovery Process 
Software reengineering tackles with all sorts of 
problems in software evolution. There are some 
researches propose software architecture recovery 
methods [9][10][11][12]. If we review these studies, 
we can find the following major tasks in the 
software architecture recovery process [13][14]. The 
first task is requirements analysis, the second one is 
This work was partially supported by the National Science Council, 
Taiwan, R.O.C. under Grant NSC 99-2221-E-017-009-.  
Application 
Function Program 
Function 
Command 
Maintenance
Log 
Roles 
Role 
Function 
Table/ File Column / 
Attribute 
Program 
Specification 
D. Screen Analysis 
ADS Plus screen provides general user interfaces, including 
labels, textboxes, selection positions for light pen, and so on. In 
order to provide easy browsing capabilities for maintainers, 
these screens are transformed to web pages in html format. The 
coordinates, originally 80 by 24, are mapped to a 800 by 600 
resolution page. Program invocations are represented as 
hyperlinks, and input and output textboxes are distinguished by 
different colors. For example, the screen in Fig. 2 is 
transformed into the page in Fig. 3. 
 
Figure 2. An Example of a screen. 
 
Figure 3. A Transformed Page 
E. Print Form Analysis 
ADS Plus print form defines the format, size, 
fields of a form to be printed. The analysis of print 
form is the same as that of screen. That is, print 
forms are transformed into web pages as well.  
F. Data Dictionary 
The definitions of data tables and data columns 
associated with application programs in the HIS are 
imported into our repository to improve the 
maintenance work since these tables are scattered in 
different files. The process is straightforward. First, 
a batch job on the mainframe is run daily to export 
the definitions to produce two files, 
PDEDA.DSN.PDSYSTAB and  
PDEDA.DSN.PDSYSCOL. Both files are then 
transferred to our repository server. The server runs 
a daily job to read the files and update table and 
column definitions. 
IV. ARICTECTURAL INFORMATION QUERY 
After applying the source code analysis, detailed 
architectural information is stored in the repository. 
Software maintainers then apply the query in SAMS 
to understand the architecture of the HIS so that 
maintenance and reengineering work may proceed. 
SAMS supports queries in various views as 
discussed below. 
A. Application Listing 
There are many applications in the HIS, e.g., 
billing, accounting, drug management, and so on. 
The functionality items are associated with a 
particular application through a coding system. The 
first two codes for an item designate a specific 
application.  After the analysis, all applications can 
be listed out, but their detailed description needs to 
be complemented by the programmer. 
B. Functionality Item Listing 
The user may search for a list of functionality items 
in an application. However, the same functionality 
item may appear more than once because it may be 
coded in several different master screens. Therefore, 
we may restrict our query result on a specific master 
screen.  Or, we may give the name of a program to 
query all the related functionality items in different 
master screens. Note that the coding of the same 
functionality may be different in different screens. 
Lastly, a keyword may be supplied to query 
functionality items whose name contains the 
keyword. 
C. Program/Screen/Form  Listing And Specification 
The user may search for a list of programs, screens, 
and print forms in an application. The list may be 
limited to show a specific type of objects such as 
PL/I programs by specifying types of object. Again, 
a keyword may be supplied to query objects whose 
names contain the keyword. The name, type, size, 
and description (complemented by programmers) of 
each item are all displayed in the list. The 
specification of each item in a list may be displayed 
if the user is interested. The specification is 
[14] Walkinshaw1, N., Bogdanov1, K., Ali, S., Holcombe, M. Automated 
discovery of state transitions and their functions in source code. 
Software Testing, Verification and Reliability, 2008. 18(2): p. 99–121. 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/10/04
國科會補助計畫
計畫名稱: 整合資訊擷取與靜態程式分析技術以評估軟體系統性能與元件關係
計畫主持人: 葉道明
計畫編號: 100-2221-E-017-013- 學門領域: 程式語言與軟體工程
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
