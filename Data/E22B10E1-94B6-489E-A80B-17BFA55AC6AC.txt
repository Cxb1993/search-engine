計畫中文摘要:
隨著時代的進步，電腦已被廣泛應用在許多領域上。在許多場合(如飛行器)，電腦可靠
度日益重要。立即偵測到錯誤 ，並加以修理，可提高系統可靠度。隨著電路日益複雜，我
們渴望讓電路有自我檢查 (self-checking) 的能力。自我檢查系統，在系統無錯時，輸入 Code
word，系統產生 Code output。在系統有錯時，輸入某 Code word，系統產生 Non-code
output。借由觀察系統輸出，我們可知系統有無錯誤。全自我檢查檢查器 (totally self checking
checker, TSC checker) 可作為觀察系統輸出之用。本計畫提出一個用加法器做 m-out-of-n
code 全自我檢查檢查器的電路設計，其中 n≤8m。與先前文獻比較，具有低硬體成本與
delay 小等優點(硬體複雜度由 O(n2)降到 O(n), 時間複雜度由 O(n)降到 O(log2n) )。
計畫英文摘要:
The reliability of computer is critical in many important applications, such
as the computer system on an aircraft. To increase the reliability, it is important
to detect fault immediately and replace faulty modules to avoid crashing data.
It is becoming highly desirable to let circuit have the capability of self-testing.
Totally Self-checking checker plays an important role in a self-checking system.
In this project, we propose a design method using adders for m-out-of-n code
totally self checking checker, n ≤8m. Compared with previous papers, we reduce
the hardware complexity from O(n2) to O(n) and the time complexity from O(n) to
O(log2n)。
其設計步驟如下:
1. 將前 n-2 個輸入 x1, x2,… , xn-2 分成四個 size 大致相同的部分，分別輸入到子電路
Na1, Na2, Nb1, Nb2。
2. 子電路 Na1, Na2, Nb1, Nb2 分別計算輸入中 1 的個數並加一常數 na1, na2, nb1, nb2 做為
輸出。
其中: na1=   2/2/)1( c , na2 =   2/2/)1( c , nb1=   2/2/)1( c , nb2=
  2/2/)1( c ,
c = 2k, k=  1)(log2 mn
3. 子電路 Na3 將 Na1, Na2 的輸出及 xn-1 相加。 子電路 Nb3 將 Nb1, Nb2 的輸出及 xn
相加。
4. 因在 fault free 情況下，Na3 與 Nb3 的輸出會 bit by bit 互補，我們用一個 TRCC (two
rail code checker) 來檢查，並產出最後的輸出 (z1,z2)
在本計畫中，我們將用加法器做 m/n code TSC checker，n≤4m 的方法延伸到做更大 m/n
code 範圍的 TSC checkers, n≤8m。
結果與討論:
與文獻[11] 的硬體複雜度比較如下表 1 (GI 表閘輸入總數):
Table 1: GI and delay comparison
[11] This project
GI
O( )
O(n)
Time Delay O(n)
O( )
與文獻[9] 的硬體複雜度比較如下表 2:
Table 2: Comparison of GI
m n [9] This paper
12 48 1540 516
16 42 1307 342
32 82 4968 816
與文獻[4] 的適用範圍的比較如下表 3:
Table 3: Range comparison
m n
[4] This paper
9 18-36 18-72
10 20-40 20-80
11 22-44 22-88
由上表(Tables 1-3) 可知本計畫提出的 m-out-of-n code (m/n code) 全自我檢查檢查器，
其中 n≤8m，與先前文獻中的 m/n code checker 比較，具有低硬體成本與 delay 小等優點。
與文獻[4]中的 m/n code checker 比較，具有適用範圍較大的優點。
Self-Checking Checker for 1-out-of-N Code with Minimum Gate Delay,” IEEE Trans. 
Computers, vol. 41, no. 7, pp. 881-886, July 1992.
[15] T.R.N. Rao, G.L. Feng, M.S. Kolluru, and J.-C. Lo, “Novel Totaly Self-Checking Berger
Code Checker Designs Based on Generalized Berger Code Partitioning,” IEEE Trans. 
Computers, vol. 42,
no. 8, pp. 1,020-1,024, Aug. 1993.
[16] S.M. Reddy, “A Note on Self-Checking Checker,” IEEE Trans. Computers, vol. 42, no. 8, pp.
1,020-1,024, Aug. 1993.
[17] S.M. Reddy and J.R. Wilson, “Easily Testable Celular Realizations for the (Exactly 
p)-out-of-n and (p or More)-out-of-n Logic Function,” IEEE Trans. Computers, vol. 23, no. 1, 
pp. 98-100, Jan. 1974.
[18] C. Efstathiou and C. Halatsis, “Eficient Modular Design of TSC Checkers for m=2k - 1, k >
2,” Electronics Leters, vol. 21, pp. 1,083-1,084, Nov. 1985.
[19] A.M. Paschalis, D. Nikolos, and C. Halatsis, “Eficient Modular Design of TSC Checker for 
m-out-of-2m Codes,” IEEE Trans. Computers, vol. 37, no. 3, pp. 301-309, Mar. 1988.
[20] T. Haniotakis, A. Paschalis, and D. Nikolos, “Eficient Totaly Self- Checking Checkers for a
Class of Borden Codes,” IEEE Trans. Computers, vol. 44, no. 11, pp. 1,318-1,322, Nov. 1995.
[21] M.A. Marouf and A.D. Friedman, “Design of Self-Checking Checker for Berger Codes,” 
Proc. Int'l Symp. Fault-Tolerant Computing (FTCS), June 1978.
