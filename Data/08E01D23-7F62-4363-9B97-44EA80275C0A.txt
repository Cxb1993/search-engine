可供推廣之研發成果資料表 
□ 可申請專利  ■可技術移轉                                      日期：96 年 10 月 28 日 
國科會補助計畫 
計畫名稱：散佈搜尋法及基因演算法於附有一般上限限制式之多維
裝袋問題之研究(I)。 
計畫主持人：李際偉         
計畫編號：95-2221-E-259-022- 
學門領域：工業工程(作業研究領域) 
技術/創作名稱 以散佈搜尋法求解一般上限限制式之多維裝袋問題。 
發明人/創作人 李際偉，陳佑善。 
中文：這項技術使用散佈搜尋法求解一般上限限制式之多維裝袋問
題。此技術有五項要素包含了(1) 使求解空間多元化，(2) 改進求
解品質，(3) 調整參考集合，(4) 產生子集合，以及(5) 合併有潛
力的參考解。 
 
（100~500 字） 
技術說明 英文：This technique uses scatter search to solve the GUBMKP 
problem. It composes of five different ingredients in the 
search method including (1) diversification, (2) 
improvement, (3) reference-set update, (4) subset generation 
and (5) combination of solutions. 
可利用之產業 
及 
可開發之產品 
This scatter search method is capable to solve 
multidimensional knapsack problems with GUB constraints 
(GUBMKP) very quickly. There are many applications such as 
resource allocation and project selection. 
技術特點 
This technique is an approach of Metaheuristics. It focuses 
on diversification and intensification by an evolutionary 
approach. 
推廣及運用的價值 
This is a very good method to solve the GUBMKP. It can be 
easily extended to solve multidimensional knapsack problems
(MKP).   
※ 1.每項研發成果請填寫一式二份，一份隨成果報告送繳本會，一份送 貴單位
研發成果推廣單位（如技術移轉中心）。 
附件二 
 I
散佈搜尋法於附有一般上限限制式之多維裝袋問題之研究(I) 
摘要 
散佈搜尋法(scatter search)是一種進化式(evolutionary)的萬用啟發式演算
法(metaheuristics)，它利用線性組合(linear combination)的方法從參考解
(reference solutions)的集合中挑出某些候選解去產生一個新的解(在此集合
中之解，皆具備了高品質或多元化的特性)，再改進此新解以期調整參考集合並
持續產生新的線性組合。在本研究中，我們利用散佈搜尋法去求解附有一般上限
(多選一)限制式的多維背包問題(GUBMKP)，此模型可應用於一般資源分配問題。
在此模型中，每一個被選擇的活動都會增加總利潤但是也會消耗某些資源，我們
要在資源有限的情境下選擇某些活動以最大化總利潤。然而所有的活動皆依照其
目的被分散在幾個互斥的組別，在每一組中最多只可選擇一個活動以達成特定目
的。在本研究中我們結合了隨機貪婪搜尋過程(GRASP)去多樣化我們的母體解，
並且運用了短期記憶來防止重複搜尋過的解。本研究發展的方法對解此類問題非
常有效率，我們將於報告中呈現相關的運算結果及研究經驗。 
關鍵詞: 散佈搜尋法，多維背包問題，隨機貪婪搜尋過程，資源分配問題，多選
一限制式 
 
Scatter Search and Genetic Algorithms for Multidimensional Knapsack Problems with 
GUB Constraints (I) 
Abstract 
Scatter search is an evolutionary metaheuristics which utilizes linear combination of 
some solutions from the reference set to generate new solutions (all the solutions in 
the reference set have high quality or high diversity). The generated solution will be 
improved and evaluated to see whether it can replace some elements of the reference 
set such that it can be used to generate new combinations of solutions. The method 
continues in this fashion. In this study, we apply scatter search to multidimensional 
knapsack problems with GUB constraints (GUBMKP). (A typical application of the 
GUBMKP is a variant of the resource allocation problem where we have to choose a 
set of activities to maximize our profit. Each chosen activity will make some 
contribution to the profit but it will also consume a combination of various resources. 
All activities are partitioned into several mutually exclusive groups and at most one 
activity can be chosen from each of the groups.) The GRASP method is used to 
diversify the solutions in the population. The short term memory is used to avoid 
duplications of solutions. The computational results show the method is very efficient 
to handle this problem class. We will present the computational results and share our 
implementation experiences. 
Key Words: scatter search, multidimensional knapsack problems, GRASP, resource 
allocation problems, multiple choice constraint 
 2
combinatorial optimization problems. The objective of this research effort are (1) to 
propose a scatter search approach for the GUBMKP and (2) to compare the results 
obtained from the SS approach to the results obtained from a commercial solver. 
  
2. Literature Review 
 
As mentioned in the previous section, the GUBMKP is a close variant of the MKP. 
There are many well-known applications of multidimensional knapsack problem such 
as cutting stock, project selection, resource allocation, and capital budgeting 
allocation. A variety of methods have been proposed to solve the MKP. For a recent 
comprehensive review for the MKP, we refer to Freville (2004). As this project 
focuses on scatter search (referred to as SS), we will review the methodology next. 
Scatter search is classified as an evolutionary method to generate new solutions by 
combining other solutions. As discussed in Glover (1998), the concepts of the scatter 
search were originated from composite decision rules and surrogate constraints, which 
first appeared on the 1960s. Glover (1998) specified templates of SS and this paper 
has brought up many interesting applications over the years. The essence of SS is to 
combine good and diversified solutions obtained earlier, and this concept had 
developed since its inception in the early 1960s. The processes of searching for new 
solutions are based on controlled randomization, and scatter search can be combined 
with tabu search to use adaptive memory that achieves diversification and 
intensification. This kind of hybrid method is capable of getting better solutions 
(Glover et al., 2003). 
In our study, surrogate constraint (Glover, 1977) is used to evaluate the 
benefit/cost ratios that provide a comparison basis to guide the search. According to 
the templates stated in Glover (1998), SS includes the following five methods: (1) 
diversification generation method, (2) improvement method, (3) reference set update 
method, (4) subset generation method, and (5) solution combination method.  
Hvattum and Løkketangen (2005) used a scatter search approach to solve the 
multidemand multidimensional knapsack problem. By adding a set of demand 
constraints, the MKP is extended to the multidemand multidimensional knapsack 
problem. The demand constraints allow negative constraint coefficients and right hand 
side (RHS) values. These problems can be transformed to the 0-1 integer program. 
This paper implements the standard diversification generation method to generate the 
diverse solution pool. The search then uses a flip-neighborhood and moves to the best 
solution in the current neighborhood until no better move can be found in the 
neighborhood. According to Hvattum and Løkketangen (2005), the flip-neighborhood 
is the neighborhood which consists of all solutions of hamming distances one from 
 4
Step 6: If enough constructed solutions have been found, terminate the heuristics.  
Otherwise, go to Step 1 to construct another new solution. 
 
Here we start from choosing a variable randomly as the initial solution. We then start 
the constructive phase to generate solutions. When we build the restricted candidate 
list (There are r variable candidates that can be put in the restricted candidate list), we 
choose to use the value-based scheme. To explain the generation of RCL, we 
introduce some notations as bellow: 
%α : the parameter of restricted candidate list, where [0,100]α ∈ , 
c : the index of the candidate elements, wherec C∈ , C is the set of {1,2,…,r } 
g  : the maximum greedy function value of all candidate elements, 
g  : the minimum greedy function value of all candidate elements, 
The restricted candidate list is formulated as follows: 
 
{ | ( ) %( )},                                                               (5)RCL c C g c g g gα= ∈ ≥ + −
where  min{ ( ) | },  max{ ( ) | }.g g c c C g g c c C= ∈ = ∈  
 
If the greedy function value of a variable candidate is greater than or equal 
to %( )g g gα+ − , this variable becomes a member of the restricted candidate list. 
Given an RCL, a variable will be chosen randomly in order to construct a solution 
near the feasibility boundary. When constructing the current solution, we need to 
update the restricted candidate list. We eliminate the variables that violate the 
generalized upper bound constraints or the resource constraints from the RCL, so 
adding any variable in the list represents a feasible move. Notice the restricted 
candidate list will be empty if there is no more feasible move in the neighborhood. 
When the RCL is empty, we already obtain a “constructed” solution which is close to 
the feasibility boundary. 
When building the restricted candidate list, we use the benefit/cost ratio 
(Referred to as B/C ratio hereafter) to indicate the attractiveness of variables. For each 
variable, the B/C ratio is determined by dividing the objective function coefficient by 
the surrogate constraint coefficient. We generate the surrogate constraint by using the 
shadow price obtained from solving the LP relaxation of the original problem to be 
the multiplier for each constraint in order to generate the surrogate constraint. We 
continue generating the solutions until solution pool is full. 
 
3.2 Improvement Method 
 6
In scatter search, solutions in the reference set can be grouped into various 
subsets. For each subset, we can use some combinations to generate trial solutions. 
In this study, we implement three types of subsets which are commonly used in 
the literature (Laguna and Marti, 2003). They are described as follows: 
1. Subset type 1: Choose any two different solutions in the reference set b to 
generate a new solution. 
2. Subset type 2: Choose any two different solutions with another solution which 
is the best in the remaining of the reference set. 
3. Subset type 3: Combine each pair of solutions with the other two best 
solutions in the remaining of the reference set. 
 
3.5 Solution Combination Method 
 
We have implemented four different methods to combine solutions. These four 
methods are adapted from Laguna and Marti (2003) to fit the GUBMKP application. 
The first and second approaches are combination by vote. In the first approach, we 
multiply the variable value for all the sort of solutions in the subset. We get the 
intersection of variables in the 1-set to generate a new solution. In the second 
approach, we get the union of variables in the 1-set to yield a new solution.  
In the third approach, we use a score-based combination. We calculate the score 
of the variable by a weighted average of the parents (solutions to be combined) 
objective values. In the fourth approach, we use a “crossover” combination. Suppose 
we are to combine two solutions x and y. For each GUB, we draw a random number r 
(r ~ uniform (0, 1)) when determining the new solution by crossover. Then the 
probability of selecting variable values in solutions x and y are P(x) and P(y) 
respectively. The value of P(x) and P(y) are calculated as follows. 
( )( )                                                                     (6)
( ) ( )
( )( )                                                             
( ) ( )
ObjVal xP x
ObjVal x ObjVal y
ObjVal yP y
ObjVal x ObjVal y
= +
= +          (7)
( ): the objective value of the  
( ): the objective value of the  
ObjVal x solution x
ObjVal y solution y
 
 
4. Computational Results 
 
This section shows the computational results of implementing a scatter search 
heuristic for the GUBMKP. The heuristic was run on a single Pentium 4 processor at 
 8
 
Figure 1. The solution quality vs. diverse variable distance 
  
 
Figure 2. The solution quality vs. diverse group distance 
 
From Figures 1 and 2, we can tell it is justified to use the  value at 94 since a 
good balance between the quality and diversity can be achieved.  
To measure the quality of our heuristic solutions, we calculate the relative 
difference between the optimal LP relaxation value and the best IP solution found by 
the heuristic. This measure is referred to “lpipgap” and is described in Equation (8). 
 
   -     (%) *100%                 (8)
 
LP relaxation value the best IP solutionlpipgap
LP relaxation value
=  
 
To simplify the expression, we will use “gap” for “lpipgap”. We tested these thirty 
instances for our scatter search heuristic with different strategies. The parameters and 
strategies are summarized as follows.  
 =94.  
 10
most of the instances using very short amount of time like one or two minutes.  
 
5. Conclusions and Future Directions 
 
We have proposed a scatter search method to solve for the GUBMKP. A GRASP 
method was implemented to diversify our solutions for entering the reference set. We 
found an  value of 94 can achieve a good balance of quality and diversity. Two kinds 
of diversity measures were used in this study for choosing solutions for the reference 
set, namely, a hamming-distance based measure and a group-based measure. We 
found the two-tier reference set (the one without using the group-based measure) 
outperformed the three-tier reference set (the one including the group-based measure). 
In improving the solutions, the swap movement was used by using the B/C ratio as a 
choice rule. We implemented three different subset generation methods and found the 
type 2 subset performed best in our experiment. Among the four different 
combination methods, we found the score-based method outperformed the other three 
methods in average. 
We have implemented the GRASP method to diversify the solutions. It will be 
interesting to see how critical event tabu search can be used in this context. Instead of 
using GRASP, we can use the diversification approach embedded in the critical event 
method. To improve the method, currently we are using a swap-based method by 
using the static surrogate constraint. It will be intriguing to use other choice rules like 
the feasibility-difference measure used in the tight oscillation method in Li (2005).In 
this study, we use the static way to update the reference set. It will be thrilling to see 
an implementation using the dynamic update method for the reference set as outlined 
in Laguna and Marti (2003). 
   
References 
 
Feo, T. A. and Resende, M. G. C. (1995). “Greedy Randomized Adaptive Search 
Procedures”, Journal of Global Optimization, 6, 109-134. 
Freville, A. (2004). “The Multidimensional 0-1 Knapsack Problem: An Overview”, 
European Journal of Operational Research, 155, 1-21. 
Glover, F. (1998). “A Template for Scatter Search and Path Relinking” in: Artificial 
Evolution, Lecture Notes in Computer Science, J. K. Hao, E. Lutton, E. Ronald , M. 
Schoenauer and D. Snyers, Eds., Springer-Verlag: London, UK, Vol. 1363, 13-54. 
Glover, F. (1999). “Scatter Search and Path Relinking” in: New Ideas in Optimization, 
Corne, D., Dorigo, M., and Glover, F., eds, McGraw Hill: UK, 1999, Chapter 19, 
297-316. 
Post-Conference Report for  
the Seventh  
Metaheuristics International Conference 
Vincent C. Li 
Assistant Professor 
Graduate Institute of Global Operations Strategy and Logistics Management 
National Dong Hwa University 
 
I attended The Seventh Metaheuristics International Conference (MIC) in 
Montreal from June 25-29 in 2007. The conference was taken place in University of 
Montreal. As previous Metaheuristics International Conferences, this conference 
provided the international research community in metaheuristics the opportunity to 
get together, present research results and exchange ideas. Moreover, this conference 
was intended as a forum for exchange of experience and results from practical 
projects, development of algorithms, and implementation of software. Presentations of 
this conference covered all topics in metaheuristics ranging from local search 
techniques to construction methods and population-based approaches, and including 
hybrids and complex search strategies.  
 
On Tuesday, June 26th, I presented an article entitled “Applying Tabu Search and 
Scatter Search to Multidimensional Knapsack Problems with Generalized Upper 
Bound Constraints” in the knapsack problems session. The session chair was Said 
Hanafi, an expert in metaheuristics. There were about 35 audiences for the talks of 
this session. Several researchers discussed with me after the session of my talk and 
gave me some suggestions for future research directions. It was a terrific presentation 
experience. 
 
There were five plenary talks (one for each day) in this conference given by  
 Edmund Burke (University of Nottingham)  
 Fred Glover (University of Colorado at Boulder)  
 Bruce Golden (University of Maryland)  
 Pierre Hansen (HEC Montréal)  
   	
 

	  
	
 
 


 
  	
 	 	 	 	  	
		 
  	   	
   	
 

 

 
  	
 
  		
	 	
 	
	

  	
 
  		
	 	
	
 !
 			
   
! 	  	"  #
 $
	 % # &
	  
 	 
'  			
   
! % & 	 	   	! 
		
 	
  	(
	    
 
 	!  !  	  )
  #  ! '
  '

 *+,-
    !"#
  
 
 
 
 

 
%.&
	
 
 
 

 

 
  

    .     %/&
 
 
 

 
  . 	  
  .      %0&

 
 1 .     .      %2&



 


3 




3 	    
  
3 

 
  
 
 

 1     
  	   
' 	!  	   
'  
	 	 		 

 
 	  

'  4	  # 
	 
	 	 	 
 
 
5  
 
)  
 	 
 5
 ! 
' 	! 	 4		"  
 
5 !6 
  	 
	  

 
$ %$ &
 '()$ 
