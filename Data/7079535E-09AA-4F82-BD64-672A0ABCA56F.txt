 2 
議題進行討論，例如使用原始碼複雜度
(Code Complexity)分析[1,2,3]，學習式評量
標 準 （ Learning-based Metrics ） 分 析
[4,5,6]，或是軟體修改日誌（Change Log）
分析[7,8,9]等方法來預測軟體的錯誤位
置。近年來由於體認到這些軟體指標有其
瓶頸，因此更進一步使用先進的機器學習
（Machine Learning）[12]，文字探勘（Text 
Mining ） 及 資 訊 擷 取 （ Information 
Retrieval）技術[13]，來學習程式錯誤的行
為模式，進而預測軟體錯誤的可能位置 
[4,14,15,16]來協助程式設計師除錯。這個
除錯的過程就被稱之為「軟體錯誤位置定
位」（Software Bug Localization）問題
[15,16]。 
本計畫的研究目標是基於我們過往在
「軟體錯誤位置定位」問題研究中所獲得
的相關經驗，深入探討是否能再進一步萃
取出軟體錯誤報告中所回報的資訊，來提
升「軟體錯誤位置定位」的預測效能。在
過往研究中 [10,11,14]，我們分別利用(1)
錯誤報告的內容相似度與錯誤位置之間的
社群網路關係 [10]，與(2)錯誤報告之間的
共同錯誤位置（Co-location）對應群聚關
係[11,14]，提出不同的機制來改進錯誤位
置定位的準確度表現。然而在這些相關研
究的過程中，我們發現雖然這些特性能一
致的提升效能，但仍有進步的空間。從我
們對一些軟體專案錯誤報告所做的觀察，
發現在同一個目錄下的檔案之間，存有相
互影響的關係，因此本研究探討如何利用
這個模組區域性（Module Locality）來改
良錯誤位置定位機制，使軟體錯誤位置的
預測能有更精確的表現。 
 
三、結果與討論 
 
針對 Hassan 及 Holt 在[8]中所研究的
四種錯誤預測機制：「最常被修改」（Most 
Frequently Modified，MFM），「最近被修
改」（Most Recently Modified，MRM），「最
常被修正」(Most Frequently Fixed, MFF)，
及「最近被修正」（Most Recently Fixed，
MRF），其中 MFF 的平均表現比 MFM，
MRM，MRF 的表現都好。但是在這些方
法中，我們發現若是完全依靠過往歷史資
訊來進行錯誤位置定位，當準確度隨著可
疑 推 薦 模 組 名 單 （ Recommended 
Suspicious Module List）變大而上升到一定
程度之後，就會到達一定的瓶頸。例如在
MFF 所列出的前 50 個軟體位置中，得到
預測命中率  (hit rate) 大約在  49%到 
64% 範圍之間，這是因為在所有被修正的
錯誤報告中，所對應的錯誤位置累積統計
只有大約 2/3 的錯誤位置在新進錯誤報告
之前曾被修正，因此另外 1/3 的錯誤程式
檔案不會出現在 MFF 預測列表中，這也就
表示 MFF 的預測命中率最多只能到達
67%左右。我們在[10,11,14]的研究過程中
也有類似的發現，因此如果要提升錯誤位
置定位的效能，不能只依靠歷史的修正資
訊，而需要加入其他資訊來進一步提升。 
我們在對 SVN、AspectJ 及 AgroUML
等三個開放源碼軟體專案來檢視的時候發
現，一些不在歷史錯誤資料中出現的檔案
位置，其實仍舊與歷史錯誤資料中的檔案
位置有關連：它們若不是在同樣的 C/C++
的程式目錄下，不然就是屬於同一個 Java 
package。我們定義這種屬性為「模組區域
性」（Module Locality）。例如圖一就是這
個屬性的說明，其中檔案 F1 和 F2 屬於
同一個模組目錄 M1，因此 F1 和 F2 之
間存有模組區域性。同樣的，F3 和 F4 屬
於同一個模組目錄 M2。在圖中，每一個
錯誤報告按著時間的進行而排列，在錯誤
報告之上分別是需要修正的錯誤位置（實
線的檔案圖形），以及因為模組區域性而附
帶同時需要考慮的檔案位置（虛線的檔案
圖形）。例如在錯誤報告 BR1 之上，就有
三個實際要修改的檔案位置 F1、F2、F3
以及因為模組區域性而同時考慮的 F4。 
因此在本計畫中，我們首先基於之前
以修改頻率為基礎的四種錯誤預測機制
中，平均表現最好的 MFF 的修改權重計算
BR1 BR2 BR3 BRx
F1
F2
F3 F3
F1
?
F3
F4 F4 F4
Fixed Bug Reports New Bug Report
F2
Prediction List
M2 M2 M2
M1
F1
F2
M1
…..
F3
F4
M2
Module Locality
2F1
3F4
F2
F3
File
2
3
Freq.
 
圖一、利用模組區域性而進行錯誤位置定位。 
 4 
能獲得的改進也有所不同，因此在實際的
運作上，需要看不同專案的特性來運用，
這也造成了模組區域性實際使用上的侷
限。同時，我們也發現在某些模組中的檔
案有較廣的修改涵蓋性時，模組區域性的
改進就不明顯，因此也降低了模組區域性
的實用性。 
我們因此尋找另外不同的方式來改進
錯誤位址預測的準確度。在計畫的後期，
我們發現錯誤報告的相似度能夠對錯誤位
址預測的準確度加以提升。我們將錯誤報
告先經過 TF (Term Frequency) 或 TF-IDF 
(Term Frequency-Inversed Document 
Frequency) 的處理，然後經過相似度的計
算，對於相似錯誤報告利用公式（4）進行
修改次數的加權 
))|(1(' simiii BRRPRR ×+×= α   (4) 
其中，Ri 是檔案 fi 的修改次數，α用來調整
權重，BRsim是相似錯誤報告的集合。圖四
是這部分實驗的一些初步結果。其中 MFF
的表現與之前有一些出入，主要是因為我
們對資料集本身的前處理再進一步修改，
而 MS-tf 表示是用 TF 來處理錯誤報告，
MS-ti 則表示是用 TF-IDF 來處理錯誤報
告。從圖四可以看出，錯誤報告的相似度
不僅有助於錯誤為指定為的預測準確度，
其普遍性亦較模組區域性為佳。 
 
四、計畫成果自評部份 
本年度的計畫中，我們基於錯誤報告
中模組區域性之特性，提出一個軟體錯誤
報告之探勘機制，來找出新進錯誤報告的
可能修改程式碼目標。經由實驗結果顯
 
(a) Subversion 
 
(b) AspectJ 
 
(c) ArgoUML 
圖四、對錯誤報告相似度的準確度實驗結果。 
 
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49
No. of Files
H
it 
Ra
te
MFF MLF
 
(a) Subversion 
0%
10%
20%
30%
40%
50%
60%
70%
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49
No. of Files
H
it 
R
at
e
MFF MLF
 
(b) AspectJ 
0%
10%
20%
30%
40%
50%
60%
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49
No. of Files
H
it 
Ra
te
MFF MLF
 
(c) ArgoUML 
圖三、對模組區域性的準確度實驗結果。 
 
表 Y04 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                        100 年 06 月 08 日 
報告人姓名 楊正仁 服務機構 及職稱 
元智大學資訊工程系助理教授 
     時間 
會議 
     地點 
100 年 5 月 26 日至 100 年 5
月 28 日 
韓國釜山 
本會核定 
補助文號 NSC 99-2221-E-155 -037 - 
會議 
名稱 
(中文) 2011 年高階軟體工程國際會議 
(英文) The 2011 International Conference on Advanced Software Engineering 
(ICASE-11) 
發表 
論文 
題目 
(中文) 利用模組區域性改善軟體錯誤預測 
(英文) Exploiting Module Locality to Improve Software Fault Prediction 
報告內容： 
一、參加會議經過 
 
 ICASE（The International Conference on Advanced Software Engineering）今年由 FTRA 
（The Future Technology Research Association International）在韓國釜山第一次舉辦。在
ICASE 舉辦的同時，還有許多 conferences 及 workshops 聯合舉辦。在這麼多的會議當中，
其中最主要的一個會議是 ISPA 2011（The 9th IEEE International Symposium on Parallel 
and Distributed Processing with Applications）所參與的人數是這次聯合舉辦所有會議當中
人數最多的一個，而 ICASE 所參與的人數大約是 ISPA 的三分之一。這可能是因為 ISPA
已經辦過 9 屆，而且其領域橫跨平行處理與分散式計算，因此參與的人數就相當的多。
這次在會場上就遇到不少國內來參加會議的教授，例如長榮大學資工系的林彥君教授、
中華大學資工系的許慶賢教授等人，他們多數是來參加 ISPA 這個主要的會議。 
  
 相較於 ISPA 會議盛大參與的情況，ICASE 顯的小而美。但是其論文的選擇仍然相
當嚴謹。依照大會的資料，在 48 篇的投稿論文中，這次只有 14 篇論文被接受，這些論
文含括下列幾個熱門的軟體工程研究主題： 
 Requirements engineering  
 SW architecture and design  
 SW evolution, maintenance, and life cycle  
 Verification, testing, and formal methods 
 Processes and methodologies  
 Security, dependability, and performance  
 Emerging issues in SW engineering 
並且會議中邀請了美國柏克萊大學的 C. V. Ramamoorthy 教授，進行一場 keynote 演講，
他的主題是「針對 software ecosystem 環境的科技教育及系統發展中的挑戰，軟體工程的
解決之道」。他介紹了「需求工程」（Needs Engineering）的概念，從這個角度來看不同
的領域當中所要面對的 IT 挑戰。 
 
 我們的論文報告被臨時從第二天下午調動到第二天早上，與原先網路上所公布的議
程稍有不同。然而與會者對我們研究的內容還是有一些深入的討論。而在論文報告的議
附
件
三
 
表 Y04 
 
 
 
 
 
 
 
圖一 本人與林彥君教授在會場報到處之合影 
 
 
 
 
 
3) [Authors Registration]
All attendees should make the registration of ICASE 2011.
And one author per paper MUST be accompanied by one mandatory registration and the 
registration fee must be paid by *March 25, 2011*.
Without a dedicated registration, the paper cannot be included in the proceedings 
and the IEEE Xplore.
The ICASE 2011 registration page is now available at the following URL:
 http://www.ftrai.org/icase2011/Registration.html
4) [No Show Rule]
All registered and uploaded papers should be presented at the conference.
For your information, this is an IEEE Technical Activities Policy (effective 
February 2009):
"IEEE reserves the right to exclude a paper from distribution after the conference 
(e.g., removal from IEEE Xplore) if the paper is not presented at the conference."
5) The web site of ICASE 2011 (http://www.ftrai.org/icase2011) already provided more 
detailed information for conference registration and hotel accommodation.
If you have any questions about final paper upload and authors registrations, please 
contact Program Chair, Sang-Soo Yeo(sangsooyeo@gmail.com) by email (You email 
subject should start with [ICASE]).
If you have any questions about visa, conference venue, accomodation, and 
registration invoice, please contact secretary, busancon@ftrai.org
Best Regards,
General Co-Chairs
SunMyung Hwang, Daejeon University, Korea
T. H. Tse, The University of Hong Kong, Hong Kong
Program Chairs 
Sang-Soo Yeo, Mokwon University, Korea 
Sheikh Iqbal Ahamed, Marquette University, USA
Xiaoying Bai, Tsinghua University, China
=====================================
Reviewer: 1
   Originality : Accept
   Quality : Strong Accept
   Relevance : Strong Accept
[ICASE 2011] Status of Paper ICASE # 72 mailbox:///C|/Documents%20and%20Settings/czyang/Application%20D...
2／4 2011/10/26 下午 07:10
• Compared with MFF, the proposed scheme can 
consistently improve the prediction accuracy and raise 
the performance from 3% to about 14% on three real-
world projects. 
• The proposed scheme can be applied to various 
software projects to predict new faulty files.  
The rest of this paper is organized as follows. Section 2 
reviews the related literature. Section 3 introduces the 
preliminaries. Section 4 presents the proposed prediction 
method with exploiting module locality. Section 5 describes the 
details of data collection and the process of experimental setup. 
Section 6 demonstrates the evaluation results and depicts the 
threats to validity. Finally, Section 7 concludes the paper. 
II. LITERATURE REVIEW 
According to our survey, most of the previous approaches 
are based on the aspects of mining software metrics and 
historical logs. The prediction methods are summarized and 
categorized into three categories by their metric types: code 
complexity, software change history, and hybrid metrics. 
A. Code Complexity 
Using software complexity metrics based on object-
oriented (OO) aspects to predict software development errors 
has been very popular for the past decades [4]. These OO 
metrics rely on accessing both design documents and source 
code to estimate the fault-proneness such as Weighted Methods 
per Class (WMC) and Depth of the Inheritance Tree (DIT). A 
complete survey of the OO design complexity with an 
empirical analysis using a popular suite of OO design measures 
proposed can be found in [5]. 
Meanwhile, Ohlsson and Alberg presented design measures 
to predict potential bugs by counting the number of failures in 
the test and operation phases [6]. Their study reveals that 10% 
of most fault-prone modules account for about 40% of the bug 
reports. Besides considering code complexity, Zimmermann 
and Nagappan investigated the dependencies of Windows 
Server 2003 and observed that the increase in complexity was 
accompanied by the increase in failures [7]. They computed the 
complexity of a subsystem's dependency graph with classical 
graph theory to predict the number of fault-prone binaries. In 
advance, Zimmermann and Nagappan applied network 
measures to the constructed dependency graph and obtained a 
recall rate of 10% higher than simply using the dependency 
graph [8].  
B. Software Change History 
Graves et al. attempted to predict modules that were more 
fault-prone by their changes and ages [9]. The model 
successfully improves the prediction accuracy by giving higher 
weights to recent changes over older ones. Besides utilizing the 
change history of code with age, historical data are used as a 
cache to predict potential faults. Hassan and Holt first proposed 
an approach called the top-ten list to predict fault-prone 
modules [1]. They used a dynamically maintained cache to 
predict the most fault-prone modules. Recently, Kim et al. used 
cached history to predict the locations of faults [2]. In their 
experiment, they used a cache of 10% of the source files to 
predict bug locations from the file level to the entity level. The 
results show that the FixCache approach can be highly 
benefitted from recent software change history data to achieve 
significant prediction improvements at a fine-grain level. 
Mizuno and Kikuno proposed a fault module detection 
technique inspired from spam mail filtering [9]. They adopted 
different machine learning techniques to learn the faulty 
modules with the assumption of having similar pattern of 
words or sentences. In the study, they first identified fault-
prone (FP) and non-fault prone (NFP) modules, and then 
classifiers were used to learn the FP and NFP modules to 
classify new modules. The advantage of such learning-based 
approach is that it does not need extra efforts of translating 
conventional software metrics into meaningful result. 
C. Hybrid Metrics 
Hudepohl et al. proposed a hybrid approach of combining 
both code complexity and software change metrics [11]. They 
aggregated static software attributes from different levels such 
as source files and modules in several releases of a large 
system development to control software quality. Khoshgoftaar 
et al. further combined static software metrics and the amount 
of code changed (development and debug code churns) during 
development to predict fault-prone modules [12]. Afterwards, 
Nagappan and Ball observed that code churns can measure the 
changes made to a component over a period of time and 
quantify the extent of software change [13]. They thus 
proposed an approach using a set of relative code churn 
measures to predict the system defect density instead of using 
absolute code churn measures. At most 89% faults can be 
identified from the non-fault-prone binaries [13].  
Ostrand et al. used a negative binomial linear regression 
model with faults in the current release and the change history 
of files from previous releases to predict the largest number of 
faults to the level of files [3]. With a history of 17 releases, 
their prediction model selects top 20% files in each release of 
two systems for evaluation. The performance with the proposed 
regression model can predict the highest number of faults 
between 71% and 92%, with the overall average of 83%. In 
their case study, they found that simple metrics such as size 
significantly influenced the number of faults and achieved a 
predictive accuracy only about 10% lower than their full model. 
Code complexity metrics, software change history, and 
hybrid models have been studied to be effective to predict bug 
locations in diverse empirical studies. However, most of these 
metrics focuses on testing before a new release, and thus are 
not suitable to locate the bug locations for bug reports. 
III. PRELIMINARIES 
A. Problem Statement 
For bug maintenance, a bug report is supervised and 
managed in different phases before closed [14]. It contains 
failure descriptions and is maintained in a bug report 
management system. Then it will be analyzed by a triager and 
assigned to an appropriate developer to locate bugs. If a bug 
has been fixed or has been reported before, it will be moved to 
most-frequently-fixed property can be obtained to choose files 
with the highest HFMLF value in the recommendation list. The 
MLF-based heuristic function HFMLF for BRx is formally 
defined as: 
∑ ∑
∈
−
=
=
)(
1
1
)()(
FMf
x
i
jiMLF
j
fBRFHF   (2) 
where fj denotes each file in the file set of module locality M(F) 
for the i-th bug report. 
According to the previous example depicted in Figure 3, we 
further illustrate the MLF-based approach with two example 
modules, M1 and M2, in Figure 4. After adding the module 
locality frequency into the bug reports, BR1, BR2, and BR3, the 
most suspect files in the prediction list are changed. By ranking 
the fault-prone files with their occurrence frequency, F3 and F4 
both have the highest occurrence frequency. Here, when 
different fault-prone files have the same occurrence frequency, 
the files having the highest fixed frequency will be ranked first. 
Therefore, the most suspect faulty file for bug report BRx is still 
F3, and then comes F4, F1, and F2 in that order. 
V. EXPERIMENTAL ENVIRONMENT 
A. Data Collection and Processing 
For the experiments described in this paper, we used 
datasets from the following three open-source projects: 
• ArgoUML is a UML diagramming application with a 
graphical editing interface. 
• AspectJ is an aspect-oriented extension for Java aspect-
oriented-programming (AOP). 
• Subversion (SVN) is a version control system aiming 
to be a compelling successor to the concurrent versions 
system (CVS). 
Table I summarizes the descriptive statistics of the collected 
datasets. In the experiments, the bug reports of three open 
source projects, Subversion (SVN), AspectJ, and ArgoUML, 
were collected from Bugzilla [15] and Tigirs [19] for 
evaluation. SVN is developed in C while AspectJ and 
ArgoUML are implemented in Java. For SVN, the module 
locality is decided by matching the files in the same directory. 
On the other hand, for AspectJ and ArgoUML, the module 
locality is determined by coupling the files with the same 
package. These three projects are selected in the experiments 
because their version archives are well integrated with their 
bug report repositories. 
To identify the fixed components in the source files, the 
fixed information was retrieved from CVS/SVN and the bug 
repositories as in previous studies [20],[21],[22]. The fixes in 
version archives are identified by the messages that describe 
changes. The proposed approach first refers to the previous 
method to explore references to bug reports such as “Fixed 
issue # 768”. The links between bug reports and their 
corresponding fixed files are discovered using keywords in 
change logs and bug reports. Hence, the key words in bug 
reports such as “fixed”, “defect”, “bug”, or matched patterns 
like “# and a number” are used to extract the links. However, 
such references are not sufficient to extract the fixed 
information, and employing only this approach may obtain 
many unreliable reference relationships [23]. Accordingly, text 
similarity measures between the bug reports and the change 
logs were applied for discovering more embedded links. 
B. Experimental Setup 
In the experiment, bug reports were chronologically ranked. 
To set up the experiment like the real-world case, the training 
and testing cases were run incrementally by accumulating each 
bug report, where the first bug report was used as the historical 
data for training and the second bug report was regarded as the 
incoming bug report for testing. Then the first and second bug 
reports were accumulated to predict the third bug report, and so 
forth until the last bug report was tested. Consequently, the 
former bug reports were incrementally collected as historical 
data and each latter bug report was tested as the newly coming 
bug reports. The experimental setup ensures that the historical 
data are used to predict future bug locations reported by the 
newly coming bug reports. 
Both the MFF and MLF approaches were implemented in 
the same experimental environment to provide users with a 
recommendation list of 50 potential locations for each 
incoming bug report. This study makes an assessment of hit 
rate that has been mostly used in previous studies [1], [2], [24], 
BR1 BR2 BR3 BRx
2F1
3F4
F2
F3
File
2
3
Freq.F1
F2
F3 F3
F1
?
F3
F4 F4 F4
Fixed Bug Reports New Bug Report
F2
Prediction List
M2 M2 M2
M1
F1
F2
M1
…..
F3
F4
M2
Module Locality
 
Figure 4.   Exploiting module locality for bug prediction. 
TABLE I.  EXPLOITING MODULE LOCALITY FOR BUG PREDICTION. 
Project name SVN AspectJ ArgoUML 
- Languange C Java Java 
- Software Type SCM AOP UML 
- SCM Subversion CVS Subversion 
- Repository Tigris Bugzilla Tigris 
- Start Time 2001-07 2001-06 2000-02 
- End Time 2005-03 2006-10 2007-04 
- # of Fixed BR 211 665 1,024 
- # of Files 188 1,155 1,529 
- # of Modules 30 210 157 
- # of Total Bugs 541 2,497 4,522 
like the result of first 10 searched items provided by a search 
engine. It will be of most help to rapidly and correctly locate 
the bugs [1],[26]. Therefore, improving the prediction accuracy 
of the top 10 locations will be the highest prioritized goal for 
further study. Moreover, data semantics such as the similarity 
between bug reports need to be explored and extracted with 
advanced IR/NLP techniques to discover more semantically 
relevant faulty locations. 
VII. CONCLUSION AND FUTURE WORK 
In software maintenance activities, bug reports are the 
important information source for developers to receive the 
messages of potential errors, reproduce the faults, and then fix 
them. As indicated in previous studies, it is a challenging task 
to automatically predict the fault-prone files from bug reports. 
In this paper, we investigate on directly predicting bug 
locations from mining bug reports with revision frequencies. 
We have addressed a novel mechanism of exploiting module 
locality based on the previously fixed files. Our study has 
indicated that exploiting module locality can achieve the best 
hit rate performance of 52% to 77% and consistently improves 
the accuracy of MFF from 3% to 14%. Although there is much 
room for performance improvement, predicting software faults 
from the first hand error information is a valuable direction 
waiting for more breakthroughs. This study has revealed that 
exploiting module locality is one of the important clues to 
predict where to fix for a new bug report. 
Several lessons are learned from this study, and they also 
indicate the future work. First, for modules of large size, it 
needs a more advanced scheme to choose the fault-prone files     
because they include many non-faulty files. Second, some bug 
reports are semantically related. Simply treating each bug 
report as an individual is less useful since more important 
information is embedded in relevant bug reports to further 
facilitate bug prediction, such as the structural and semantic 
information. Although there is no single metric that can fit all 
projects, mining such semantic information for bug prediction 
is the fundamental goal in the future. 
ACKNOWLEDGEMENTS 
The authors would like to thank the anonymous reviewers 
for their valuable comments and the National Science Council, 
Taiwan, for partially supporting this research under grants NSC 
99-2221-E-155-037. 
REFERENCES 
[1] A. E. Hassan and R. C. Holt, “The top ten list: Dynamic fault 
prediction,” in Proc. of Int’l Conf. on Software Maintenance (ICSM 
2005), 2005, pp. 263–272. 
[2] S.  Kim,  T.  Zimmermann,  E.  J.  Whitehead,  and  A.  Zeller, 
“Predicting faults from cached history,” in Proc. of the 29th Int’l Conf. 
on Software Eng. (ICSE 2007), 2007, pp. 489–498. 
[3] T. Ostrand, E. Weyuker, and R. Bell, “Predicting the location and 
number of faults in large software systems,” IEEE Trans. in Software 
Eng., vol. 31, no. 4, pp. 340–355, 2005. 
[4] T.  M.  Khoshgoftaar  and  C.  Munson,  “Predicting  software 
development errors using software complexity metrics,” IEEE Journal 
on Selected Areas in Communications, vol. 8, no. 2, pp. 73–85, 2002. 
[5] R. Subramanyam and S. Krishnan, “Empirical analysis of ck metrics for 
object-oriented design complexity: Implications for software defects,” 
IEEE Trans. on Software Eng., vol. 29, no. 4, pp. 297–310, 2003. 
[6] N. Ohlsson and H. Alberg, “Predicting fault-prone software modules  in  
telephone  switches,”  IEEE  Trans.  in  Software Eng., vol. 22, no. 12, 
pp. 886–894, 1996. 
[7] T.  Zimmermann  and  N.  Nagappan,  “Predicting  subsystem defects 
using dependency graph complexities,” in Proc. of the 18th IEEE Int’l 
Symp. on Software Reliability Eng. (ISSRE 2007), 2007, pp. 227–236. 
[8] T.  Zimmermann  and  N.  Nagappan, “Predicting defects using social 
network analysis on dependency  graphs,”  in  Proc.  of  the  30th  Int’l  
Conf.  on Software Eng. (ICSE 2008), 2008, pp. 531–540. 
[9] T. L. Graves, A. F. Karr, J. S. Marron, and H. Siy, “Predicting fault 
incidence using software change history,” IEEE Trans. on Software 
Eng., vol. 26, no. 7, pp. 653–661, 2000. 
[10] O. Mizuno and T. Kikuno, “Prediction of fault-prone software modules 
using generic text discriminator,” IEICE Trans. on Information and 
Systems, vol. E91-D, no. 4, pp. 888–896, 2008. 
[11] P.  Hudepohl,  J.  Aud,  T.  M.  Khoshgoftaar,  B.  Allen,  and J. 
Mayrand, “Emerald: Software metrics and models on the desktop,” 
IEEE Software, vol. 13, no. 5, pp. 56–60, 1996. 
[12] T. M. Khoshgoftaar, B. Allen, N. Goel, A. Nandi, and J. McMullan, 
“Detection of software modules with high debug code churn in a very 
large legacy system,” in Proc. of the 7th IEEE Int’l Symp. on Software 
Reliability Eng. (ISSRE 1996), 1996, p. 364. 
[13] N.  Nagappan  and  T.  Ball,  “Use  of  relative  code  churn measures to 
predict system defect density,” in Proc. of the 27th Int’l Conf. on 
Software Eng. (ICSE 2005), 2005, pp. 284–292. 
[14] P. Runeson, M. Alexandersson, and O. Nyholm, “Detection of duplicate 
defect reports using natural language processing,” in Proc. of the 29th 
Int’l Conf. on Software Eng. (ICSE 2007), 2007, pp. 499–510. 
[15] Bugzilla, http://www.bugzilla.org/.  
[16] Subversion (SVN), http://subversion.tigris.org/ 
[17] AspectJ, http://www.eclipse.org/aspectj/ . 
[18] ArgoUML, http://argouml.tigris.org/ . 
[19] Tigris, http://www.tigris.org/ . 
[20] D.  Cubranic  and  G.  C.  Murphy,  “Hipikat:  Recommending pertinent 
software development artifacts,” in Proc. of the 25th Int’l Conf. on 
Software Eng. (ICSE 2003), 2003, pp. 408–418. 
[21] M. Fischer, M. Pinzger, and H. Gall, “Populating a release history 
database from version control and bug tracking systems,” in Proc. of 
Int’l Conf. on Software Maintenance (ICSM 2003), 2003, p. 23. 
[22] J.  ´Sliwerski,  T.  Zimmermann,  and  A.  Zeller,  “When  do changes 
induce fixes? on fridays,” in Proc. of the 1st Int’l Workshop  on  Mining  
Software  Repositories  (MSR  2005), 2005, pp. 1–5. 
[23] R. P. T. Zimmermann and A. Zeller, “Predicting defects for Eclipse,”  in  
Proc.  of  the  3rd  Int’l  Workshop  on  Predictor Models in Software 
Eng. (PROMISE 2007), 2007, p. 9. 
[24] I.-X. Chen, C.-Z. Yang, T.-K. Lu, and H. Jaygarl, “Implicit social 
network model for predicting and tracking the location of faults,” in 
Proc. of the 32nd Annual IEEE Int’l Computer Software and 
Applications Conf. (COMPSAC 2008). 
[25] I.-X. Chen, H. Jaygarl, and C.-Z. Yang, “Information retrieval on bug 
locations by learning co-located bug report clusters,” in Proc. of the 31st 
ACM Conf. on Research and Development in Information Retrieval 
(SIGIR 2008), 2008, pp. 801–802. 
[26] C.  Silverstein,  M.  Henzinger,  H.  Marais,  and  M.  Moricz,  “Analysis 
of a very large altavista query log,” ACM SIGIR Forum, vol. 33, no. 1, 
pp. 6–12, 1999. 
99 年度專題研究計畫研究成果彙整表 
計畫主持人：楊正仁 計畫編號：99-2221-E-155-037- 
計畫名稱：基於軟體模組區域性探勘的軟體錯誤位置定位之研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 2 2 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
