 
171
 Process Reengineering for Virtual Design-Build Project Team 
 
ABSTRACT 
Design-Build (D/B) is considered to be the fastest project delivery system as it 
encourages fast-tracking of design and construction phases. However, the unfamiliarity of 
design-builders in Taiwan with the D/B process has decreased the benefits of the method.  
The collaboration between the architecture/engineer (A/E) and the general constructor (GC) 
has not been simple. The limitations of Taiwan laws and regulations tend to keep A/Es and 
GCs to their own spheres, so that functional intervals between them bring difficulties in 
cooperating as a D/B team. Accordingly, it is desirable to increase the collaboration 
efficiency of fast-tracking in the D/B team. 
This research extended business process reengineering (BPR) philosophy to the 
cross-organizational process to integrate fast-tracking processes between A/E and GC, so 
that the processes used by a D/B team can be integrated across organizational boundaries. 
Combining the fast-tracking mechanism, the cross-organizational process reengineering 
philosophy and the multi-agent system architecture, an Integrated Design-Build 
Framework (IDBF) was developed to implement the fast-track construction through the 
performance of A/E’s and GC’s collaborative processes in a D/B team. 
Summarily, this research proposed a collaborative-process-based mechanism to 
facilitate the flexibility of process collaboration and the feasibility of fast-track 
construction, assessing the alliance of A/E and GC in one design-build project. 
I 
 
173
行協同流程，提供一整合之作業環境，使設計者與營造工程師得以透過
作業資訊共享訊息溝通之方式，進行協同工作。 
綜言之，本研究以快捷施工為前提，建立快捷施工所需之設計/施工
整合流程，進而透過系統之輔助，完成各流程作業。藉由此架構，設計
單位與營造公司間的組織間流程，將可依據各自之流程特性或因應統包
契約內容，彈性結合設計單位與營造廠專案管理流程，達成統包虛擬團
隊之建立。 
 
 
III 
 
175
2.2 Axiomatic Design (AD)................................................................................. 18 
2.2.1 Overview ............................................................................................ 18 
2.2.2 Domains.............................................................................................. 20 
2.2.3 Hierarchies.......................................................................................... 20 
2.2.4 The design axioms.............................................................................. 21 
2.3 Semantic Similarity ....................................................................................... 23 
2.3.1 Overview ............................................................................................ 23 
2.3.2 Basic concepts for semantic similarity analysis ................................. 24 
2.4 Multi-Agent System (MAS) .......................................................................... 27 
2.4.1 Overview ............................................................................................ 27 
2.4.2 Agent Model ....................................................................................... 29 
2.4.3 Agent Interaction ................................................................................ 29 
2.4.4 Agent Application Domains ............................................................... 32 
2.5 Object-Oriented System Development (OOSD) ........................................... 36 
3. INTEGRATED DESIGN-BUILD FRAMEWORK (IDBF) ................................... 39 
3.1 Problem Description of Integrated Design-Build Framework ...................... 39 
3.2 Architecture of Integrated Design-Build Framework.................................... 41 
4. Fast-Tracking Model Creation Method ................................................................... 46 
4.1 Define the First Level FRs ............................................................................ 47 
4.2 Decompose FRs and Design Proposals (DPs)............................................... 48 
4.3 Generate Construction Process Variables (CPVs) ......................................... 53 
4.4 Evaluate the Construction Matrix [B] ........................................................... 54 
4.5 Produce the Concurrent Matrix [C] ............................................................... 55 
4.6 Rearrange Both Design Matrix [A] and [B] .................................................. 59 
4.7 Create the Fast-Tracking Model .................................................................... 59 
5. Cross-Organization Process Re-engineering Method (COPReM) .......................... 63 
V 
 
177
6.4.4 Data Retrieving Agent Test............................................................... 144 
7. Conclusion and Recommendation ......................................................................... 148 
7.1 Review of Objectives................................................................................... 148 
7.2 Summary...................................................................................................... 148 
7.3 Conclusions ................................................................................................. 151 
7.4 Research Contributions ............................................................................... 155 
7.5 Discussions .................................................................................................. 156 
7.6 Recommendations ....................................................................................... 158 
BIBLIOGRAPHY ..................................................................................................... 161 
計畫成果自評……………………………………………………………………....169 
 
VII 
 
179
Symbols 
[A] design matrix 
[B] construction matrix 
[C] concurrent matrix 
a  explicit affinity associated with the relationship rij 
ahj  explicit affinity of nh and nj 
aih  explicit affinity of ni and nh 
aij  explicit affinity of relationship of ni and nj 
aij-R1  explicit affinity of R1 relationship of ni and nj 
aij-R2  explicit affinity of R2 relationship of ni and nj 
aBT/ aNT  explicit relationship affinity of BT/NT 
aRT  explicit relationship affinity of RT 
aSYN  explicit relationship affinity of SYN 
Ahet  heterogeneous semantic affinity 
Ahom  homogeneous semantic affinity 
Aih  name of hth activity of the process i 
Ajk  name of kth activity of the process j 
Aimp  affinity function of the implicit relationship 
AC(ni, nj)  affinity coefficient of two names ni and nj 
AINih  input set of Ahi 
AOUTjk  output set of Ajk 
ASim()  activity similarity function of two analyzed activities 
A(X,Y)  name set affinity parameter of the X and Y name sets 
BT/NT  Broader/Narrow term semantic relationship 
CLij  common concept link of ni and nj in the data semantic hierarchy or in 
IX 
 
181
RT  Related term semantic relationship 
SSij  semantic similarity of ni and nj 
SYN  synonymy semantic relationship 
|Pi|  number of activities of process i 
|Pj|  number of activities of process j 
W2  weight of input data set affinity 
W3 weight of output data set affinity 
WNa weight of activity name affinity in the activity similarity function 
WInput weight of input data set name set affinity in the activity similarity 
function 
WOutput weight of output data set name set affinity in the activity similarity 
function 
α process functional similarity threshold in the process overlapping 
analysis 
β process information similarity threshold in the process overlapping 
analysis 
γ activity similarity threshold in the process overlapping analysis 
δ  initial similarity value for the bottom level concept links 
ζ  name sets derived from the process textual model 
ℜ  explicit relationship  
hom
kℜ   homogeneous multiple explicit relationship 
⇒  implicit relationship 
a   coupling relationship 
hom
k⇒   homogeneous multiple explicit relationship 
 
XI 
 
183
Figure 5.3 Example of the Textual Process Model (derived from Figure 5.2)........ 66 
Figure 5.4 Example of Data Thesaurus. (Partial) .................................................... 70 
Figure 5.5 Example of Data Semantic Similarity Matrix (derived from Figure 5.4)74 
Figure 5.6 Data Semantic Hierarchy of the Case Study. ......................................... 76 
Figure 5.7 Activity Semantic Hierarchy for Creating the Collaborative Detailed Design 
Process . ................................................................................................. 79 
Figure 5.8 the Decision Tree of Overlapping Relationships between Pi and Pj ...... 86 
Figure 5.9 Process Integration Procedure................................................................ 90 
Figure 5.10 the Overlapping/Coupling Relationship Diagram of Case “A” ........... 93 
Figure 5.11 the Collaborative Process of the D/B team in case study..................... 93 
Figure 6.1 Use Case Diagram of DBPCS................................................................ 96 
Figure 6.2 The System Architecture of DBPCS...................................................... 97 
Figure 6.3 Sequence Diagram of DBM Management Module.............................. 100 
Figure 6.4 Process Invoking Algorithm of DBM Manager ................................... 103 
Figure 6.5 Process Invoking Rules for “PP” Overlapping Relationship ............... 104 
Figure 6.6 Examples of Process Invoking/Finished Messages.............................. 105 
Figure 6.7 Architecture of Process Engine ............................................................ 106 
Figure 6.8 Activity Invoking Message Generated by Process Instance of DBM2231107 
Figure 6.9 Collaboration Diagram of the Activity Execution Module.................. 109 
Figure 6.10 Sequence Diagram of Activity Agent Creation.................................. 111 
Figure 6.11 Class Diagram of Activity Agent ....................................................... 112 
Figure 6.12 Activity Information Retrieving Sequence Diagram of Activity Assistant 
Agent ................................................................................................... 114 
Figure 6.13 Message Transport Sequence Diagram of Activity Assistant Agent.. 115 
Figure 6.14 Data Request Sequence Diagram....................................................... 119 
Figure 6.15 Architecture of Data Retrieving Agent............................................... 120 
Figure 6.16 Data Schema of “Subcontractor information table Agent” ................ 122 
XIII 
 
185
Figure 6.42 The Generated Process Instances Corresponding to the Result in Figure 
6.41 in the Process Engine................................................................... 143 
Figure 6.43 Activity Delegation Result of the Test Case in the Assistant Agent Client 
Program ............................................................................................... 144 
Figure 6.44 Three Data Retrieving Agents Running in the DPBCS ..................... 145 
Figure 6.45 Example of Data(m) in the External Information System ................. 146 
Figure 6.46 Example of Query Keyword Input to the Data Retrieving Agent...... 146 
Figure 6.47 XML file Containing the Retrieved Data(m) form the External System in 
Figure 6.39........................................................................................... 147 
 
XV 
 1
Chapter 1 
INTRODUCTION 
1.1 Research Motivation 
Design-bid-build (D/B/B) was the project delivery process of choice for most of the 
twentieth century. By the year 2000, traditional D/B/B was still used in nearly two-thirds of 
projects in the United States (Beard, 2001), and a similar situation prevailed in Taiwan. 
However, due to its linear structure, D/B/B tends to be slower than other delivery systems 
because of its requirement for the production of substantial design before at-risk 
construction pricing and construction work begins. Moreover, several well known 
problems such as differing goals of designer and constructor, defects of lowest bid 
contracting, and segregation between the work of the designers and the input of 
constructors bring anxiety when D/B/B methods are applied in major construction projects 
of greater complexity. For sloving the problems, design-build (D/B) has also been 
considered an appropriate method for contracting in Taiwan. 
Since the design-builder constitutes of both architect/engineer (A/E) and at-risk 
general constructor (GC), the owner who employs D/B has only a single point of contact 
for all questions regarding the design and delivery of the facility. The other great attraction 
of D/B lies in time savings. In today’s rapidly changing business environment, 
fast-tracking delivery methods have received considerable attention over the last decade 
because of time saving possibilities derived from overlapping phases of a project (Beard, 
2001; Huovila et al., 1994; Williams, 1995). D/B is considered to be the fastest project 
delivery system as it encourages fast-tracking of design and construction phases. Still, the 
 3
the fast-track construction through the performance of A/E and GC’s collaborative 
processes in a D/B team. 
1.2 Research Objectives 
The primary purpose of this research is to facilitate fast-tracking construction in D/B 
project through process collaboration of A/E and GC in a D/B project team. The 
sub-objectives required to achieve the primary goal are the followings: 
 
z Follow the fast-tracking mechanism to develop a Fast-Tracking Model Creation 
Method (FTMCM) which decomposes a D/B project to be numbers of design-build 
packages and determines the overlapping relationships between each design-build 
packages. 
z Create a Cross-Organization Process Re-engineering Method (COPReM) to generate 
the collaborative process model for a D/B project team that depicts the interactions 
between A/E and GC’s processes. 
z Apply the multi-agent system architecture to develop a Design-Build Process 
Collaboration System (DBPCS) to automatically implement the generated 
collaborative process model of a D/B project team. 
 
1.3 Scope Definition  
1.3.1 Boundary Identification  
Cross-organizational process collaboration is significant for facilitating the fast-track 
contraction in the D/B projects. The boundary of this research is specified below: 
 
z This research focuses on collaborating A/E’s processes with GC’s processes, but 
 5
I. Problem Formulation:
• Review the interested area
• Specify research objectives
• Define study scope
II. Literature Review:
• Review related concepts and theories
• Review previous research findings
III. Framework Construction:
• Establish framework architecture
• Preliminary plan for advanced development
VI. System Development:
• System analysis
• System design
• System implementation
VII. Assessment:
• Feasibility Validation
• Draw conclusions and recommendations
IV. Fast-Tracking Model Creation
• Model creation method development
• Trial of method
V. Collaborative Process Model Creation
• Model creation method development
• Trial of method
 
Figure 1.1 Research Flow Chart 
 7
1.4.1 Problem Formulation 
Review the Interested Area 
This study is interested in solving construction management problems.  In the 
preliminary research, this study reviews the most difficult parts faced in D/B projects, 
shortcomings of the D/B projects, methods of cross-organizational process reengineering, 
and applications of present process collaboration methods.  This approach relies on two 
main resources: interviews with experts and previous research works.   
Specify Research Objectives 
After reviewing the problem area, primary research objectives are defined to solve 
the addressed collaboration problems of D/B projects.  In order to systematically achieve 
the primary goals, sub-objectives are identified.  In addition, the primary objectives and 
sub-objectives are prioritized to make the study approach more logical and achievable.   
Define Study Scope 
The scope of a study should be achievable with a reasonable time and effort.  
Therefore, research boundary is distinguished.  In this step, requisite assumptions are also 
established to reduce complexity of the process collaboration problems.   
1.4.2 Literature Review 
Review Related Concepts and Theories 
At this junction, the researcher undertakes extensive survey of concepts and theories 
connected to the formulated problem to broaden the knowledge base.  Academic journals, 
conference proceedings, books, websites, published and unpublished reports, etc. are 
tapped depending on the problem.   
 9
in the architecture of IDBF. 
1.4.4 Fast-Tracking Model Creation 
Model Creation Method Development 
At the beginning of model development, the theoretical and conceptual framework is 
established.  A block diagram is used to represent the architecture of the model.  In the 
diagram, relationships, functions, data flow, and control flow are used to assist the 
researcher to depict the architecture of the proposed model.   
Trial of Method 
Apply the method to a small example for the preliminary validation of the developed 
method. Meanwhile, modify the method if necessary. 
1.4.5 Collaborative Process Model Creation 
Model Creation Method Development 
At the beginning of model development, the theoretical and conceptual framework is 
established.  A block diagram is used to represent the architecture of the model.  In the 
diagram, relationships, functions, data flow, and control flow are used to assist the 
researcher to depict the architecture of the proposed model.   
Trial of Method 
Apply the method to a small example for the preliminary validation of the developed 
method. Meanwhile, modify the method if necessary.  
 
 
 
 11
Draw Conclusions and Recommendations 
This research is concluded from reviewing the study objectives and identifying the 
research contributions.  The lessons learned are also discussed.  As well, directions are 
made for further advancement.   
 
1.5 Study Outline 
This research consists of seven additional chapters.  Each chapter is briefly 
described.   
Chapter 2 serves as an introduction to related techniques that promise for achieving 
the study’s objectives.  Fast-track construction, axiomatic design (AD), semantic 
similarity, multi-agent system (MAS), and Object-Oriented System Development (OOSD) 
are introduced for those who are not familiar with these techniques.  Basic concept, and 
applications related to each method are discussed in detail.   
Chapter 3 describes the Integrated Design-Build Framework (IDBF).  The 
framework architecture including three layers, namely (1) the fast-tracking model, (2) the 
collaborative process model and (3) the Design-Build Process collaboration System 
(DBPCS) is proposed and briefly introduced in this chapter.  
Chapter 4 proposes the fast-tracking model creation method for the first layer in the 
IDBF. Method concept, analysis process and method adaptation example derived form the 
case study are discussed. 
Chapter 5 describes the cross-organization process reengineering method (COPReM) 
to create the collaborative process model, the second layer of the IDBF. Similar with 
Chapter 4, concept, creation process and adaptation examples are presented. 
 13
Chapter 2 
LITERATURE REVIEW 
2.1 Fast-Track Construction 
2.1.1 Overview  
Under a rapidly changing business environment, the construction industry has been 
seeking a new method to ensure a faster and more economic project delivery. Among the 
various efforts to meet this change, the fast-tracking delivery method has received 
considerable attention over the last decade (Pena-Mora and Park, 2001), and come success 
stories of fast-tracking with its time saving feature have been demonstrated in the literature 
(Huovila et al., 1994; Williams, 1995). Followings are advantages and shortcomings of 
fast-tracking summarized from the literature. 
Advantages: 
1. Time and Cost Saving: The iterations for design and construction can be 
decreased. Effective fast-tracking in a construction project can help reduce the 
duration and lower the cost wasted in the traditional precise iterative design and 
construction process (Tighe, 1991; Williams, 1995; Pena-Mora and Li, 2001). 
2. Rapid Response: A detailed, up-to-the-minute plan and planning tool are 
essential to make rational decisions about changes in projects (Williams, 1995). 
Since a fast-tracking project can never afford to stop, it must continue on 
through the entire duration of the project. As the information gets better and 
better the schedule shod get more and more detailed. The importance and the 
impact of things changed daily must be aware clearly in the fast-tracking 
 15
z Concurrent Engineering is a ‘systematic approach to the integrated, concurrent 
design of products and their related processes.’ This approach is intended to 
cause the developers, from the outset, to consider all elements of the product life 
cycle form conception through disposal (Winner et al., 1988; Pena-Mora et al., 
2000). 
z Concurrent Engineering is a ‘goal-directed effort, where ownership is assigned 
mutually among the entire group on the total job to be completed, not just pieces 
of it, with the understanding that the team is empowered to make major design 
decisions along the way.’ This definition is more suited to a virtual CE enterprise 
with geographically separated designers as it highlights the importance of 
distributed teams (Winner et al., 1988; Turing, 1992). 
 
The above definitions indicate that most of the basic principles of CE, revolve around 
the notions of teamwork affinity and shared knowledge leveraging. CE strives to create 
teams of people working together to create global optima in their efforts (Huthwaite, 1994; 
Pena-Mora et al., 2000). Cooperative work teams remain the single most important 
component of CE (Prasad, 1996; Maliniak, 1991). There are four primary elements to 
cooperative work teams (Pena-Mora et al., 2000): 
z Communication involves the exchange of information, events and activities in 
any CE effort. Effective communication is a necessary, thought not a sufficient 
condition to meaningful collaboration. 
z Co-location involves dealing with the infrastructure to provide seamless 
communication among distributed designers and engineers. 
z Coordination involves control of the workflow and communication process, 
 17
control methodology (DPM) for discovering the potential problems of fast-tracking 
projects. The CE in Pena-Mora’s study was used to decrease the uncertainty caused by the 
overlapping of design and construction tasks. Following the DPM, Lee (2003) addressed a 
quality and change management framework to scheme out the dynamic project model for 
elaborating on how iterative cycles interact with project performance and makes the project 
uncertain and complex.  
Table 2.1 CE Applications in Construction  
No. Research Topic CE application in construction industry 
1 Concurrent Construction 
and Life Cycle Project 
Management (Jaafari, 1997) 
This paper investigated concurrent construction and its 
potential application in life cycle management of capital 
projects. It has been shown that concurrent construction has 
the potential to reform the project processes in a foundation 
way, and an overall framework for the implementation of the 
concept has been presented also. 
2 A Collaborative Design 
Process Model in the 
Sociotechnical Engineering 
Design Framework (Lu and 
Cai, 2001) 
By using Petri Nets as a process illustration tool, the design 
conflict detection and handling method was addressed to 
manage the collaborative design process.  
3 CAIRO: a Concurrent 
Engineering Meeting 
Environment for Virtual 
Design Teams (Pena-Mora 
et al., 2000) 
The research described CAIRO system, a distributed 
conferencing architecture for managing designers and 
engineers in a distributed design meeting. CAIRO aids the 
concurrent engineering effort by relaxing the synchronization 
and agent synchronization.  
4 Dynamic Planning for 
Fast-Tracking Building 
Construction Projects 
(Pena-Mora and Li, 2001) 
Focusing on the planning and implementation of fast-tracking 
on design/build projects, this research developed a dynamic 
planning and control methodology by combining the 
application of the concepts of axiomatic design (AD), 
concurrent engineering (CE), the graphical evaluation and 
review technique (GERT), and system dynamics (SD). 
Consequently, with a rigorous and systemized methodology, 
potential problems can be addressed early before 
construction. 
5 Quality and Change 
Management Framework for 
Concurrent Design and 
Construction (Lee et al., 
2003) 
A quality and change management framework was presented 
to capture iterative cycles and their impacts during actual 
execution, particularly, in concurrent design and construction. 
Based on this framework, the schema of dynamic project 
model allows users to elaborate on how iterative cycles 
interact with project performance and makes the project 
uncertain and complex. 
6 Assessing the Suitability of 
Current Briefing Practices 
in Construction within a 
Concurrent Engineering 
Framework (Kamara et al., 
2001) 
This paper focused on the briefing stage in the construction 
process, which is used to elicit and represent client objectives 
for a project, and assesses whether the current practice of 
briefing is adequate within a CE framework for design and 
construction. Using case studies and an industry survey, the 
current process of briefing was assessed against pre-defined 
requirements for briefing within a CE context. 
 
Summarily, to implement the fast-track construction, CE provides a collaborative 
 19
 
Figure 2.1 Mapping Relationships in Four Domains in Axiomatic Design 
The mapping process can be expressed in terms of a design equation, which consists 
of the characteristic vectors that define goals and design solutions and a design matrix that 
represents the relationship between goals and solutions. For the mapping between 
functional requirements and design parameters, the design equation can be written as 
{FR}=[A]{DP}: To satisfy the independence axiom, the matrix [A] must be either diagonal 
or triangular so that the design relationships between FRs and DPs can be either uncoupled 
or decoupled. The design equation can be also expressed in terms of its element as FRi = 
AijDPj; where Aij; known as dependency or functional coupling, relates FRi to DPj: 
Although AD provides a systematic framework for guiding design activities and 
decision-making, binary measures of couplings with either ‘á’ (‘related’, a non-zero value) 
or ‘0’ (‘non-related’) offer limited information. For the design of large and complex 
systems, the design matrix may be full of ‘á’s with many weak couplings that lead to a 
heavily coupled design matrix (Steward, 1981). It is not appropriate to discard a design 
without first exploring the strength of couplings by assuming all the non-zero functional 
couplings contain the same degree of coupling strength. To realize a design using AD, 
more information showing various degrees of coupling strength is needed instead of binary 
measures. 
 21
and process-in decomposing the design problem.  
2.2.4 The design axioms 
As described above, designers follow a design process in which decisions are made 
about a design object starting with high-level, system decisions and progressing to levels of 
increasing detail. In following this process to synthesize new designs-at each level of 
detail-the steps through which the designer progresses can be described as problem 
formulation, synthesis, and analysis. The design axioms provide a tool for evaluating 
designs, particularly during conceptual design. Two axioms involved in the AD are 
presented as follows (Suh, 1990): 
 
z Axiom 1. The Independence Axiom 
Maintain the independence of the functional requirements. 
z Axiom 2. The Information Axiom 
Minimize the information content of the design. 
Axiom 1 states that the mapping between FRs and DPs should be such that each 
requirement can be fulfilled without affecting other requirements. This is because the 
requirement dependency (or coupling) will result in a number of iterations in design, and 
does not guarantee a convergence. Among all proposed solutions that satisfy the 
Independence Axiom, Axiom 2 indicates that the best design is the one with the least 
information content. The first axiom facilitates concurrent design without interactions. The 
second axiom is a variation of the old adage ‘keep it simple.’ They represent two quality 
characteristics of the design (Bras and Mistree, 1993). 
This study applies the Axiom 1 to decompose a D/B project into fast-tracking phases. 
 23
coupling strength. To realize a design using AD, more information showing various 
degrees of coupling strength is needed instead of binary measures. 
 
2.3 Semantic Similarity 
2.3.1 Overview 
Semantic similarity is a significant research domain in information retrieval and 
information integration. Several approaches to model semantic similarity compute the 
semantic distance between two words or two documents by definitions within an ontology.  
The study of semantic similarity between words has been a part of natural language 
processing and is a generic issue in a variety of applications in the areas of computational 
linguistics and artificial intelligence, both in the academic community and industry (Li et al. 
2003). Since the first studies on interoperating information systems, progress has been 
made concerning syntactic (i.e., data types and formats) and structural heterogeneities (i.e., 
schematic integration, query languages, and interfaces) (Sheth 1992; Andrea and Egenhofer, 
2003). Because of the increasing of the number of keywords and the complex relations of 
the contexts, the technology needed to deal successfully with these issues must focus on 
the semantics underlying the data used by the interoperating information systems.  
Recent investigations in information retrieval and data integration have emphasized 
the use of ontologies and semantic similarity functions as a mechanism for comparing 
objects that can be retrieved or integrated across heterogeneous repositories (Guarino et al., 
1999; Voorhees, 1998; Smeaton and Quigley, 1996; Lee et al., 1993). An ontology is a kind 
of knowledge representation which describes concepts by definitions that are sufficiently 
detailed to capture the semantics of a specific domain. In other words, an ontology can be 
seen as a view of the real world, and supports intentional queries regarding the content of a 
 25
number of process descriptors with an uncontrolled vocabulary is a difficult task and 
requires techniques for comparing names appearing in different process descriptors 
(Castano and De Antonellis, 1998). Major problems arising with a name-based approach 
are related to the fact that different processes can be characterized by the same or 
semantically similar entities and operations, which do not necessarily have the same name. 
In fact, as pointed out in (Furnas, 1987), the probability of two designers picking the same 
name for a given entity is very low (Castano and De Antonellis, 1998). Following recent 
proposals on semantic heterogeneity in multidatabase systems, a semantic dictionary is 
introduced, where names of semantic similar entities and operations are grouped under the 
same concept (Bright, Hurson and Pakzad 1994; Hammer and McLeod 1993; Castano and 
De Antonellis, 1998). The semantic dictionary provides capabilities to manage duplicate 
descriptors for processes, resulting from using different names for denoting the same entity 
or operation. The dictionary is organized into concept hierarchies by means of the 
generalization and aggregation abstraction mechanisms (Castano and De Antonellis, 1998). 
The architecture of the semantic dictionary is shown in Figure 2.2. A concept 
hierarchy is defined in the dictionary, where the concepts at the top of the hierarchy are 
either more general than the lower level concepts (generalization abstraction) or are 
composed of them (aggregation abstraction). Each concept at the bottom level of the 
hierarchy has associated a cluster of names corresponding to entities and operations that 
are semantically similar (Castano and De Antonellis, 1998). Names contained in clusters 
are entity and operation names used in process descriptors. 
 
 27
function can derived.  
 
2.4 Multi-Agent System (MAS) 
2.4.1 Overview 
Software agent technology has been a very active field of research for more than two 
decades now (Wooldridge, 2002). It started in the early 1980s as a sub-field of artificial 
intelligence, namely as distributed artificial intelligence, focusing its research on aspects of 
multi-agent planning and distributed problem solving (Bond and Gasser 1988). Since then, 
it has constantly attracted more researchers who have expanded to social agenthood 
(Bussmann et al., 2004). Today, even though the research field of agent technology is still 
very heterogeneous and lacks a unifying definition, it has established itself as a major 
stream of computer science and artificial intelligence in particular.  
One stream of agent research, often referred to as multi-agent system, is of particular 
relevance to the domain of production control, Multi-agent systems research investigates 
how to model and implement individual and social behavior in distributed systems. It 
explores on the one hand notions like autonomy, reactivity and goal-directed reasoning in 
order to model and implement individual behavior (O’Hare and Jennings, 1996; Huhns and 
Sigh, 1998; Muller, 1996). On the other hand, it examines aspects of cooperation, 
coordination, negotiation, coalition formation, role assignment and self-organization in 
order to create social behavior (O’Hare and Jennings, 1996; Weiss, 1999). To date, 
multi-agent systems research has already developed theories for social and individual 
behavior, agent architectures, communication and co-operation techniques, as well as new 
programming languages (Bussmann et al., 2004; Meyer and Tambe, 2002). 
Despite the significant amount of research undertaken in multi-agent system, 
 29
interact. 
Definition. A multi-agent system is a collection of interacting agents (Bussmann et 
al., 2004). 
The remainder of this section will review techniques to model and implement 
multi-agent systems. Since multi-agent systems research has produced a large variety of 
techniques, it is not possible within the limits of this work to review all results. This review 
will therefore focus on those aspects of multi-agent systems which are relevant to 
production control. 
2.4.2 Agent Model 
According to the above definition, the first fundamental property of an agent is its 
ability to act autonomously. That is, an agent is situated in an environment, in which it can 
sense and act as Figure 2.3 shows, and has complete control over its own actions in that 
environment (Bussmann et al. 2004) 
 
Figure 2.3 Basic Model of an Agent (Bussmann et al. 2004) 
2.4.3 Agent Interaction 
As defined above, the second fundamental property of an agent is its ability to 
interact with other agents. The environment an agent is situated in is usually not purely 
passive. There are other agents which also act autonomously and pro-actively. To meet its 
goals, an agent may have to avoid negative or be able to exploit positive interactions with 
other agents. In particular, certain goals may not be achievable with the limited capabilities 
 31
or plan. 
z Reciprocal dependence: Two agents are dependent on each other, but for 
different goal and plan. 
Negotiation 
As for coordination, negotiation is a common form of interaction between human 
beings and has therefore been extensively studied in sociology (Pruitt 1981). In sociology, 
any interaction is regarded as a negotiation in which the participants of the interaction, 
usually called parties, have a conflict of interests, but must come to joint decision. Pruitt 
(1981), for instance, defines negotiation as follows: 
Negotiation is a process by which a joint decision is made by two or more parties. 
The parties first verbalize contradictory demand and then move towards agreement 
by a process of concession or search for new alternatives (Pruitt 1981). 
The contract-net protocol (CNP) is a simple, but efficient, protocol for assigning 
tasks to individual nodes in a network (Smith 1980). It assumes that one node has a task 
that needs to be executed by another node and that there are potentially several nodes that 
are able to execute this task. The node with task is called the “Initiator” and the other 
nodes are “Participants” as shown in Figure 2.4. The Initiator initiates the protocol and 
proceeds as follows. First, it announces the “cfp” (call for proposal) to the Participants. The 
Participants answer with a bid. The necessary information provided in the bid was 
specified by the Initiator in the announcement message. The Initiator compares the bids 
and chooses the best bid according to its preferences. The node which has sent the best bid 
than receives an award message and is said to have a contract with the Initiator about the 
execution of the task. The other nodes may or may not receive a reject message. 
 33
z Process Control 
Process control is a natural applications for intelligent agents and multi-agent systems, 
since process controllers are themselves autonomous reactive systems. It is not surprising, 
therefore, that a number of agent-based process control applications should have been 
developed. The best known of these is ARCHON, a software platform for building 
multi-agent systems, and an associated methodology for building applications with the 
platform (Jennings 1995). ARCHON has been applied in several process control 
applications, including electricity transportation management (the application is in use in 
northern Spain), and particle accelerator control. ARCHON also has the distinction of 
being one of the earliest field-tested multi-agent systems in the world. 
z Manufacturing 
Parunak (1987) describes the YAMS (Yet Another Manufacturing System), which 
applies the well-know Contract Net protocol (Smith, 1980) to manufacturing control. A 
manufacturing enterprise is modeled as hierarchy of workcells. The goal of YAMS is to 
efficiently manage the production process at the plants. To achieve the enormously 
complex task, YAMS adopts a multi-agent approach, where each factory and factory 
component is represented as an agent. Each agent has a collection of plans, representing its 
capabilities. The contract net protocol allows tasks to be delegated to individual factories, 
and from individual factories down to flexible manufacturing systems, and then to 
individual workcells. 
The contract net protocol (CNP) is based on the idea of negotiation, and hence 
YAMS views the problem of deciding how best to process a company’s product 
manufacturing requirements as a negotiation problem. A some-what similar approach was 
developed in (Wooldridge et al., 1996), where the problem of determining an optimal 
 35
One important contributing factor to information overload is almost certainly that an 
end user is required to constantly directly the management process. Three such projects are 
listed as follows: 
1. Maxims: (Maes, 1994) describes an electronic mail filtering agent called 
Maxims. The program learns to prioritize, delete, forward, sort, and archive mail 
message on behalf of a user. 
2. Newt: (Maes, 1994) also describes an example of an Internet news filtering 
program called Newt. This program, implemented in C++ on a UNIX platform, 
takes as input a stream of Usenet news articles, and as output gives a subset of 
these articles that it is recommended the user reads. 
3. The Zuno Digital Library: A digital library is an organized, managed collection 
of data, together with services to assist the user in making use of this data. The 
Zuno Digital Library (ZDL) systems is a multi-agent system that enables a user 
to obtain a single, coherent view of incoherent, disorganized data sources such 
as the World Wide Web, a user’s own data, collections of articles on publishing 
house sites, and so on (Zuno, 1997). 
z Electronic Commerce 
Currently, commerce is almost entirely driven by human interactions; humans decide 
when to buy goods, how much they are willing to play, and so on. Some commercial 
decision making can be placed in the hands of agents. As an example, Chavez and Maes 
(1996) describe a simple electronic marketplace called Kasbah. This system realizes the 
marketplace by creating buying and selling agents for each good to be purchased or sold 
respectively. Commercial transactions take place by the interactions of these agents. 
 37
conceptual thing as the objects (Booch 1994).  The OOSD views a system as a collection 
of interacting objects that work together to accomplish tasks (Satzinger et al 2000).  This 
approach is an entirely different approach to traditional methods such as structured 
approach and information engineering approach.  It develops the software applications in 
terms of component objects, classes of related objects, and frameworks of related objects 
and classes.   
The OOSD approach views a system as a set of interacting objects.  In addition, 
these objects are described in an abstract manner.  Therefore, an incremental and iterative 
method is suitable for implementing OOSD (Pittman 1993).  A system development life 
cycle generally includes six phases: plan, analysis, design, implement, test, and 
maintenance.  Developing incrementally means to refine systems in steps, whereas, 
iterative development denotes to grow up systems with looping processes (Firesmith 1993).  
The schematic diagram of the incremental and iterative method is shown in Figure 2.5.  
Unlike the waterfall approach, the incremental and iterative method delivers the whole 
system using several iterations.  Each iteration builds one portion of the system 
(incremental) on previous delivery.  Since the method accomplishes a portion of the 
whole system at a time and each development cycle recovers software errors occurring in 
previous delivery, development risks and complexity are reduced effectively (Caspers 1994; 
Satzinger et al 2000).  This method also cuts down the overall costs and the development 
time.   
 39
CHAPTER 3 
INTEGRATED DESIGN-BUILD FRAMEWORK (IDBF) 
3.1 Problem Description of Integrated Design-Build Framework  
This study aims to create an Integrated Design-Build Framework (IDBF) as the 
architecture to execute a design-build project by combining a fast-tracking mechanism and 
design-build delivery method with the processes reengineering philosophy. Therefore, to 
develop the IDBF, the primary concerns about facilitating the fast-tracking construction by 
process integration are necessary to determined. 
Fast-tracking network is the target of the IDBF 
The purpose of cross-organization process re-engineering in this research is to 
facilitate the fast-track construction in the D/B projects. To achieve this purpose, a 
fast-tracking network needs to be schemed preliminarily so that the re-engineered 
cross-organizational processes of A/E and GC can then be designed for implementing the 
fast-tracking network. Therefore, how to determine the fast-tracking phases and their 
overlapping relationships is the first concern for developing the IDBF. To overcome this 
problem, dividing a D/B project into several design-build packages and identifying their 
sequential relations are two essential tasks. As the fast-tracking phases and overlapping 
relationships are determined, a fast-tracking model depicting the network of fast-tracking 
construction can be created subsequently. 
Collaborative process model of A/E and GC is essential for fast-tracking 
Because design and construction activities respectively executed by A/E and GC are 
both included in the fast-tracking phases, how to cooperate between A/E and GC is the 
 41
useful references for process modeling due to the details they provide on management 
processes and activities; therefore, this study refers to the ISO specifications and applies 
the eEPC diagram of the ARIS modeling language (Scheer, 2000) to depict graphic process 
models providing a visual view of the abstract process model. When process models are 
generated, two processes can then be compared with similarity measures to determine the 
possible collaboration links and information flows between them. 
An information system for managing the execution of the fast-tracking and the 
collaborative process model is the significant infrastructure in the IDBF. 
Unlike the traditional linear design and construction procedure, complexities of 
project execution and potential risks may increase with the overlapping activities in the 
fast-track construction. Besides, the activities within the collaborative process model are 
distributed over A/E and GC’s organizations. Thus, how to manage the execution of the 
collaborative process model to facilitate the fast-tracking is the final concern in the IDBF. 
To overcome this problem, a process management system is significant for executing the 
collaborative processes. The process management system needs not only the capability to 
manage the execution the collaborative processes, but also the function to manage the 
execution of fast-track phases in a D/B project. 
Summarily, to develop the IDBF, the fast-tracking model, the collaborative process of 
A/E and GC, and a process execution management information system are the three 
primary components needed to create. Following this idea, the architecture of the IDBF is 
developed. 
3.2 Architecture of Integrated Design-Build Framework 
The three models encompassed by the IDBF include the (1) fast-tracking model, (2) 
 43
To develop three layers in the IDBF, this study first applied the axiomatic design (AD) 
methodology to map a D/B project into customer, functional, physical and process domains 
by zigzagging decomposition and creating dependency matrices. Figure 3.2 shows AD 
mapping relationships.  Each associated domain consists of specific characteristic vectors 
such as customer need {CN}, functional requirement {FR}, design proposal {DP} and 
construction process variable {CPV}.  Concurrently, the design matrix [A] between {FR} 
and {DP} vectors and the construction matrix [B] between {DP} and {CPV} vectors can 
be evaluated to present DPs and CPVs execution sequences. Further, the concurrent matrix, 
the product of design and construction matrices, can be applied to reveal the overlapping 
relationships among all DBMs. The final fast-tracking model for a design-build project can 
be generated by summarizing the DBMs and their overlapping relationships. 
 
Figure 3.2 Four Domains of Axiomatic Design in This Study 
However, as coordination between design and construction processes are critical to 
DBM implementation, details regarding these processes must be determined in order to 
achieve further process integration. Therefore, this study also develops a 
Cross-Organizational Process Re-engineering Method (COPReM) to create the 
Collaborative Process Model (CPM), which was used as the foundation for design-build 
module implementation. The CPM comprises collaborative design and construction 
processes that cross organizational boundaries, as shown in Figure 3.1.  In other words, 
the generated CPM provides a cooperative mechanism that satisfies all DBMs within the 
 45
In summary, the IDBF offers a process-oriented, fast-tracking execution mechanism 
for D/B projects, in which the collaborative process model provides design-and-build 
processes for DBMs in the fast-tracking model, and the fast-tracking model expresses the 
overlapping relationships between DBMs. With regard to creating the fast-tracking model 
and CPM, a fast-tracking model creation method and the cross-organizational process 
reengineering method (COPReM) are addressed in the following two sections. 
Furthermore, a DBPCS is developed based on the MAS philosophy to implement and 
manage automatically the collaborative processes in the created fast-tracking model to 
increase IDBF feasibility. 
Finally, to demonstrate IDBF feasibility, a real D/B project case “A” involving an 
integrated residence is illustrated. The design-builder in this example is a GC and A/E team, 
with the GC designated as team leader.  Figure 3.3 shows the organizational structure of 
the D/B team in case “A”. The case study aimed to create a fast-tracking model and 
integrated process model for the initially independent cases of GC “A” and DP “A”. 
Design-Builder
General Constructor 
“A＂
Architecture/Engineer 
“A＂
Financial analysis
Purchasing Division
Construction 
management
Construction Department 
Subcontractors
Architecture design Subcontractors
 
Figure 3.3 The Design-Builder’s Organization Structure of Case “A” 
 47
5. Produce the concurrent matrix [C]
Is [A] or [B] changed？
7. Create fast-tracking model
4. Evaluate the construction process 
design matrix [B]
6. Rearrange both matrixes [A] and [B]
Yes
No
2. Decompose  FRs and DPs
3. Generate  construction process 
variables (CPVs)
1. Define the first level FRs 
Start
End
Determine the design proposals and 
concurrent relationships of them.
Determine the construction process 
variables  and concurrent 
relationships of them.
Generate the design-build modules 
and determine the overlapping 
relationships of each modules to 
create the fast-tracking model.
DP Analysis:
CPV analysis:
Fast-tracking model analysis:
 
Figure 4.1 Procedure for creating a fast-tracking model 
 
 
 
4.1 Define the First Level FRs 
The 1st level function requirements (FRs) are the basic functional requirements of a 
D/B project that the construction must satisfy. The 1st level FRs are defined as the 
minimum sets of independent functional requirements that describe project design goals. 
Generally, the FRs in the lst level are derived from customer needs (CNs), which can be 
determined from the request for proposal. In the example of the integrated residence 
project, the following seven CNs were identified. 
 49
procedure shown in Figure 4.3 (Suh, 2001). To reduce interrelationships between 
individual DPs, FRs and DPs were required to satisfy the Independence Axiom (Suh, 2001) 
of axiomatic design methodology during the mapping process. Procedure details are 
described below. 
 
Figure 4.3 The Zigzagging Procedure of Decomposing FRs and DPs 
 
 
1. Mapping FRs to DPs at the current level 
The aim of this step is to determine the most proper design proposals for fulfilling 
current level FRs. Figure 4.4 shows 1st level DPs mapped from the FRs in Figure 4.2. 
Integrated 
Residence
Environment Protection 
Facilities Layout: DP1 Landscape Design: DP4
Water/Power supply 
and air condition 
system design: DP3
Master Design: DP2
 
Figure 4.4 The lst Level DPs of Case Study (corresponding to Figure 4.2) 
 
 51
determined in a proper sequence. Such a design is described as “decoupled”. Any other 
matrix types (as shown in Figure 4.5(1)) are called full matrices and result in coupled 
designs which violate the Independence Axiom. 
 
XOXFR3
OXXFR2
XOXFR1
DP3DP2DP1
XXOFR3
OXXFR2
OOXFR1
DP3DP2DP1
XOOFR3
OXOFR2
OOXFR1
DP3DP2DP1
 
Figure 4.5 Three Types of Design Matrices of Axiomatic Design Method (Peña-Mora, 
2001) 
The 1st level design matrix [A], as derived from 1st level functional requirements and 
design proposals, is shown in Table 4.1. The design matrix [A] shown in the Table 4.1 
represents the original matrix; that is, there is no consideration given to obeying the 
Independent Axiom. If the original matrix is satisfied with the Independence Axiom, either 
the subsequent decomposition level can proceed sequentially or the functional 
requirements and design proposals in the matrix must be modified. Therefore, the matrix 
shown in Table 4.1 should be modified in the next step. 
Table 4.1 The 1st Level Design Matrix [A] (Original) 
En
vi
ro
nm
en
t P
ro
te
ct
io
n
Fa
ci
lit
ie
s L
ay
ou
t
M
as
te
r D
es
ig
n
W
at
er
/P
ow
er
 su
pp
ly
 a
nd
 a
ir
co
nd
iti
on
 sy
st
em
 d
es
ig
n
La
nd
sc
ap
e 
D
es
ig
n
DP1 DP2 DP3 DP4
Environmental Protection
Requirements:  FR1 X X 0 0
General Functions of Building:
FR2 0 X 0 0
Water/power supply and air
condition: FR3 0 X X 0
Landscape: FR4 0 X 0 X
Functional Requirements
(FRs)
Design Proposals
(DPs)
 
 53
requirements at the next level. As next level functional requirements are generated, their 
corresponding design proposals can be determined and the design matrix evaluated to 
ensure elements within the level satisfy the Independence Axiom. FR and DP hierarchies 
can thus be generated following this zigzagging decomposition procedure. Figure 4.6 
shows the zigzagging decomposition and entire FR2 and DP2 hierarchies of the D/B 
project case.  
Master Design
 DP2
Building design
 DP21
Underground 
structure 
DP22
Exterior design
 DP213
Building structure 
design 
DP211
Temporary 
facilities
 DP23
Tabernacle/ storage 
area  layout
DP233
Hurdle layout
 DP232
Temporary water/ 
power supply plan
 DP234
Demolition 
/Leveling plans
DP231
Working platform 
layout
 DP236
Monitoring plan
 DP237
Site pumping 
layout
 DP235
Interior design
 DP212
Interior finishing 
drawings
 DP2123
Windows/ Doors 
detail designs
 DP2122
Building alignment / 
relief map/profile
DP2131 
Roof/ Terrace draining 
and water retaining 
detail design
DP2132
Interior alignments
 DP2121
Ceiling detail 
designs
DP2124 
Building structure 
alignments
DP2111 
Pipeline disposing 
diagrams
 DP2112
Retaining detail 
design
 DP224
Ground support 
design
 DP221
Foundation pile 
design / layout
 DP222
Basement layout
DP223
Basement structure  
alignment
 DP2231
Parking facility 
layout
 DP2232
 
Figure 4.6 The FR2 and DP2 hierarchies of the D/B Project Case 
 
Each DP in the lowest layer of each branch is defined as a “leaf.” “Leaves” of the DP 
hierarchy are design documents, such as design alignments, relief maps, perspectives, 
detail drawings, regulations/specifications, and so on. Therefore, the necessary design 
documents and their concurrent relationships can be determined based on DP hierarchy and 
design matrices. 
 
4.3 Generate Construction Process Variables (CPVs) 
Construction process variables (CPVs) are the primary elements in the process 
domain that characterize the design proposal construction process. Unlike the zigzagging 
decomposition between functional requirements and design proposals, only direct mapping 
from DPs to CPVs is required in this step. According to the DP hierarchy, the DPs’ 
 55
 
The matrix [B] is defined as a construction matrix representing the dependent 
relationship between design proposals and construction process concurrency. In matrix [B], 
not only must the construction contribution between construction process variables of 
design proposals be evaluated, but sequence relationships must also be determined. 
Therefore, the necessary construction processes and their concurrent relationships can be 
determined based on the CPV hierarchy and construction matrices. Table 4.3 shows the 
construction matrix of DP23 and CPV23. 
 
Table 4.3 The Construction Matrix [B] of DP23 and CPV23 
D
em
ol
iti
on
 /
Le
ve
lin
g
Ta
be
rn
ac
le
 / 
st
or
ag
e
se
tu
p
W
at
er
 / 
po
w
er
su
pp
ly
in
g 
fa
ci
lit
y
in
st
al
la
tio
n
Pu
m
p 
se
tu
p
W
or
ki
ng
 p
la
tfo
rm
in
st
al
la
tio
n
D
ril
lin
g 
/ M
on
ito
rin
g
H
ur
dl
e 
in
at
al
la
tio
n
CPV231 CPV232 CPV234 CPV235 CPV236  CPV237 CPV233
Demolition /Leveling plans DP231 X X 0 0 0 0 0
Hurdle layout DP232 0 X 0 0 0 0 0
Temporary water/ power supply plan
DP234 X 0 X 0 0 0 0
Site pumping layout DP235 X 0 X X 0 0 0
Working platform layout DP236 X 0 X 0 X 0 0
Monitoring plan DP237 0 0 X 0 0 X 0
Tabernacle/ storage area  layout
DP233 X 0 0 0 0 0 X
Construction Process Variables
 (CPVs)
Design Proposals
(DPs)
 
 
4.5 Produce the Concurrent Matrix [C] 
To make fast-track possible, this study packages a DP and its corresponding CPV into 
a design-build module (DBM), so that dependency relationships among DBMs can be 
determined based on matrices [A] and [B]. To this aim, the concurrent matrix [C] is applied 
to summarize the concurrency relationships of design proposals and construction process 
variables. As Equation 4.3 shows, matrix [C] is the cross product of matrix [A] and [B].  
 
[ ] [ ][ ] ; ik ij jk
j
C A B C A B= =∑ ……………………...………………………………..(4.3) 
 57
Thus, the mathematical definition of a DBM can be generalized as Equation 4.5.   
 
ji k k i k
i ik ij jk
k j k j ki i i j k i
DPFR CPV CPV FR CPVDBM C A B
CPV CPV CPV DP CPV CPV
∂∂= = = = ∂ ∂∑ ∑∑ ∑∑ …..………..(4.5) 
 
As illustrated in Equation 4.4 and Equation 4.5, DBMi represents the 
interrelationships between all CPVi through the Cik term.  Also, due to the combination of 
interrelationships between DPs and CPVs in the Cik, a DBMi combines not only the direct 
incremental relationship between FRi and CPVi , but also the interrelationships among DPi, 
CPVi and CPVk. That is, if Cik is not zero, the CPVi is dependent on DPi and CPVk. Thus, 
DBMs are capable of summarizing and presenting these interrelationships according to the 
concurrent matrix [C]. Table 4.5 illustrates the dependent relationships of DBMs based on 
the design matrix [A], construction matrix [B] and concurrent matrix [C]. In the Table 4.5, 
the overlapping relationship between DBMi and DBMk can be determined referring to 
matrix type of [A], [B] and [C]. Therefore, the overlapping relationships between DBMs 
can be determined based on the Table 4.5, so that the fast-tracking model can be created by 
clustering DBMs into fast-track phases. 
 59
4.6 Rearrange Both Design Matrix [A] and [B] 
While the type of concurrent matrix [C] is either the types 5 or type 6, the 
design-build modules can not concur, due to the feedback interaction of CPVs (type 5) or 
inter-locking resulting from counter sequences in design and construction phases (type 6). 
Type 5 construction process variables must be regenerated in order to fit Independence 
Axiom design proposals as much as possible. For type 6 matrices, the matrix [C] may be a 
triangular matrix if the order of FRs, DPs, and CPVs are rearranged so that both [A] and [B] 
are lower triangular matrixes, thus making [C] a decoupled matrix. 
 
4.7 Create the Fast-Tracking Model 
A fast-tracking model of a D/B project is composed of DBMs and their sequence 
relationships, thus potentially enabling a D/B project schedule to be fast-tracked due to 
design-build module concurrence. Based on Equation 4.4 and Table 4.5, a “Junction 
structure diagram” can be created to represent junction properties at each level of 
decomposition by referencing the concurrent matrix [C]. An example of a junction 
structure diagram corresponding to a concurrent matrix is shown in Figure 4.8. According 
to the concurrent matrix in Figure 4.8(a), block 1 shows DBM1 and DBM2 as coupled 
modules; block 2 shows DBM3 and DBM4 as decoupled modules; block 3 shows DBM5 as 
uncoupling with block 1 and block 2. Therefore, the concurrent relationships in phases 1, 2, 
and 3 (shown in Figure 4.8(b)) are titled, respectively, “Feedback”, “Continue” and 
“Summary”. 
 
 61
sequence symbols in Table 4.5, the sequence of two design-build modules are described in 
Table 4.6. 
 
Table 4.6 Flow diagrams of Fast-tracking Model 
No. Junction Structure Flow Diagram 
1 
  
2 
 
3 
 
4  
 
5 
 
6 
 
7 
 
 
 
Following the procedure outlined, the fast-tracking model corresponding to FR2 of 
the integrated residence project case was generated in accordance with the design, 
construction and concurrent matrices (as shown in Figure 4.10). 
  63
Chapter 5 
Cross-Organization Process Re-engineering Method (COPReM) 
Since D/B processes flow across two strategic business units, a cross-organization 
process reengineering method (COPReM) is employed to create practical collaborative 
process models for the D/B team. Figure 5.1 shows the procedure for A/E and GC process 
reengineering. As mentioned, process interoperability is the main focus of 
cross-organizational process reengineering. Hence, the purpose of COPReM is to integrate 
A/E and GC business processes from an information processing standpoint based on the 
input-operation-output paradigm. To achieve this goal, this study applies semantic 
similarity analysis to evaluate informational and functional similarities in D/B team 
activities/processes. Degrees of similarity and overlapping and coupling relationships 
between activities/processes between A/E and GC can point to potential areas of 
interoperability. An overlapping relationship expresses duplication between two processes, 
while a coupling relationship expresses shared information flows between two processes. 
An appropriate collaborative process model can be created that reflects actual identified 
relationships. 
 65
integration, a data-oriented process model is necessary to integrate data. Accordingly, an 
additional textual process model needs to be generated sequentially. Figure 5.2 and Figure 
5.3 show the mapping relationships between graphic and textual models. The textual 
process model is simplified from the graphic model in order to name operations and 
present data entities within a process and, therefore, consists of four subsets, which include 
f1:{process name}, f2:{process input data set}, f3{process output data set} and f4{activity 
set}.  Each activity set is composed of activity names and input and output subsets.   
 
  
Figure 5.2 Graphic Process Model of the Detailed Design Process of A/E in Case “A” 
 
 67
 
The semantic hierarchy for similarity analysis can be generated in the next stage 
based on textual model data and activity names. 
 
5.2 Semantic Hierarchy Creation 
Semantic hierarchy is the foundation upon which semantic similarity analysis is 
employed to identify similarities between processes in terms of data and functions. 
Semantic hierarchy depth represents the semantic distance between two analyzed 
entities. Degree of semantic similarity can be calculated by referencing semantic 
distance. 
Semantic hierarchy, when clustered with similar data entities and activity 
functions, provides semantic distances for semantic similarity analysis. Two semantic 
hierarchies for, respectively, data and activity were created. The data semantic 
hierarchy gathers data entities from the represented process models created in the first 
phase of COPReM.  The activity semantic hierarchy groups similar activity names 
within process models into several clusters. The semantic hierarchy clusters 
similarities into groups. The length of the path between two clusters (semantic 
distance) is identified according to hierarchical structure and the similarity of two 
entities is calculated. The steps followed in creating data and activity semantic 
hierarchies are described below. 
 
5.2.1 Data semantic hierarchy creation 
Three steps are involved in the creation of a data semantic hierarchy. 
Step 1. Create process model data thesaurus 
To create a semantic hierarchy, this study used a data thesaurus to gather all data 
 69
comparing sheet in the 4nd column of the detailed design process, incorporates more 
information than does the D21. Inquiry sheet entity in the 5th row of the 
subcontracting management process. Their relationship is thus defined as “BT”. The 
next step is to identify other entities in the detailed design process that share a 
relationship with the price comparing sheet. For example, the Price comparing sheet 
(D10) shares a Related Term “RT” relationship with the Task control table of detailed 
design (D07). The intersection of “D07” and “D21” is defined as an implicit (RT*BT) 
relationship., Relationships in the rest of the table were determined in the same 
manner. 
 
71
It is possible for both explicit and implicit relationships to occur more than once 
between a given pair of names when several processes are analyzed simultaneously. 
Therefore, the following two kinds of multiple relationships must be distinguished 
(Castano and De Antonellis, 1998). 
 
z The homogeneous multiple relationship; i.e., when the same type of semantic 
relationships occur multiple times between two names. An explicit relationship is a 
homogeneous multiple if its occurrence number k > 1. Such is denoted by the symbol 
“ hom
kℜ ”. An implicit relationship is a homogeneous multiple if it involves explicit 
relationships of the same relationship type and at least one of them is multiple. The 
symbol “ hom
k⇒ ” is used. 
z The heterogeneous multiple relationship; i.e., when different types of relationships 
occur multiple times between two names. An explicit relationship is a heterogeneous 
multiple if different explicit types exist for the same pair of names.  Such is denoted 
by the symbol “ khetℜ ”. An implicit relationship is a heterogeneous multiple if it 
involves explicit relationships that are heterogeneous multiples. The symbol “ khet⇒ ” is 
used. 
 
Step 2. Create a semantic similarity matrix 
The corresponding semantic similarity matrix can be transferred from the created 
data thesaurus to cluster data entities in the next step. Equation 5.1 ~ 5.4 show the 
transformation functions corresponding to the relationships within the data thesaurus.  
 
k
ijij aaA
/1
hom )( =  ………………………….…………………………………………….(5.1) 
where Ahom represents the homogeneous semantic affinity; aij represents the affinity of 
 
73
thesaurus. Figure 5.5 shows an example data semantic similarity matrix derived from 
Figure 5.4.  
 
75
Continuing with the previous example, because only one implicit relationship (BT,RT) 
exists between “D07” and “D21” data entities (i.e., no other different relationship exists 
between these two entities), the condition for calculating affinity coefficient is determined 
as 107 hom 21D Dn n⇒ , where nD07 = “D07” data entity and nD21 = “D21” data entity in the 
processes. Accordingly,   
 
AC(nD07, nD21) = hom 07 10 10 21( ( , ))imp D D D DA A a a− −  
= aD07-D10 × aD10-D21j = aBT × aRT = 0.8 × 0.5 
= 0.4 
 
Step 3. Data semantic hierarchy creation 
Based on the semantic similarity matrix, the data semantic hierarchy can be created 
using clustering techniques. Hierarchical agglomerative clustering techniques that may be 
applied include the single linkage agglomerative, complete linkage agglomerative, 
weighted/unweighted arithmetic average, and weighted / unweighted arithmetic average 
clustering techniques. Variances in the distance function of each clustering method 
produces clustering results that are partially different. This study applied each of the 
abovementioned clustering techniques to obtain different cluster results, which were then 
summarized to develop the semantic hierarchy. Figure 5.6 shows the data semantic 
hierarchy for the integrated design process creation of the case study. 
 
77
A semantic hierarchy is composed of a root, branches, and leaves. The root describes 
the abstract concept of the hierarchy. Branches (concept links) present all sub-concepts 
derived from the root concept, while concept link level presented in each branch shows the 
hierarchical depth of each sub-concept. Leaves describe data entity clusters within process 
models. Each leaf corresponds to a specific concept link located at a specific hierarchy 
level. The higher the level, the more general the semantic concept represented. Therefore, 
the semantic similarity of two entities can be calculated based on the semantic similarity of 
their common concept link. Consequently, based on Equation 2.4, this study applied 
Equation 5.5 to calculate the similarity of two entities. 
 
 ijlijSS δ= ………………………………………………………………………….(5.5) 
where SSij represents the semantic similarity of ni and nj; δ represents the initial similarity 
value for bottom level concept links; and lij represents the hierarchical length of the 
common link of ni and nj. 
For data semantic hierarchy, the initial value of δ for bottom level concept links is set 
as 0.8 in accordance with the experimentation of Castano and De Antonellis (1998), and, 
because case study data semantic hierarchy has five levels, the data similarity of two data 
entities is evaluated based on Equation 5.6 
 
0.8  ; 5 1ijlij ij D CL ijSS l l L −= = = − +  ………………………………….……………(5.6) 
where lD represents hierarchy length in the data semantic hierarchy and LCL-ij represents the 
hierarchy level of the common concept link of ni and nj. 
Taking the data entities in the Figure 5.6 as an example, the inquiry sheet within the 
cluster C8 and the qualified subcontractor list within the cluster C10 share a common 
 
79
Table 5.1 Definitions of Activity Functions (De Antonellis and Zonta, 1990) 
Function Type Definition Common Verbs 
Creation 
Creation of resources as operation 
output. 
compile, construct, 
define, draw, institute, 
make, prepare, produce, 
etc.. 
Exchange 
Exchange of resources with the 
outside of the task to which the 
operation belongs. 
communicate, deliver, 
display, distribute, give, 
obtain, present, receive, 
show, ask, inform, etc.. 
Transformation 
Transformation of input resources 
into output resources with a new 
identity. 
compact, compose, cut, 
decompose, divide, join, 
merge, split, etc.. 
Modification/Obser
vation 
Modification/Observation of the 
status of input resources, while 
preserving their identity in the 
output. The modification can be of 
content, classification, addition/ 
subtraction of properties. 
check, choose, dismiss, 
examine, fill in, protect, 
retrieve, select, sign, 
test, update, etc.. 
Deletion Deletion or removal of resources. 
cancel, delete, 
eliminate, erase, throw 
away, undo, etc.. 
 
 
A
ct
iv
iti
es
 
Figure 5.7 Activity Semantic Hierarchy for Creating the Collaborative Detailed Design 
Process . 
 
 
Similar to the data similarity calculation, similarities of activity semantic hierarchy 
are calculated based on Equation 5.5. However, because the activity semantic hierarchy has 
three levels, the similarity of the two activities is evaluated using Equation 5.7, in which 
 
81
because processes are aggregations of activities and data entities, the name set affinity 
parameter denoted by Nsa(X,Y) must be addressed to evaluate the semantic similarity of 
two sets, such as process input or output data sets. Equation 5.9 shows the name set affinity 
function based on name affinity. 
 
| | | |
1 | | 1 | |1 1
( ( , )) ( ( , ))
( , ) ;
| | | |
X Y
i j i jj Y i Xi j
i j
Max Na n n Max Na n n
Nsa X Y n X n Y
X Y
= → = →= =
+
= ∀ ∈ ∀ ∈+
∑ ∑
 ……..(5.9) 
 
Where 0≦Nsa≦1; X and Y represent two name sets, and |X| and |Y| represent numbers of 
elements in, respectively, X and Y. 
By calculating all pairs of name entities belonging to two sets, the value of Nsa(X,Y) 
expresses the similarity of two name sets. 
Based on Equation 5.8 and 5.9, three functions were developed to evaluate activity 
and process similarities. These included the (1) Process Information Similarity, (2) Activity 
Similarity, and (3) Process Functional Similarity functions. 
 
1. Process Information Similarity 
The process information similarity represented by ISim(Pi,Pj) measures similarity of 
input and output information for the analyzed processes Pi and Pj. Equation 5.10 shows the 
process information similarity function. 
 
2 3[ , ]
3 3 2 2
( , ) ( , . )      if  0
( , ) ( , . )                       if   0
x
i j x i x j x i x j x
f f f
i j i j i j
ISim P P W A P f P f P f P f
ISim P P A P f P f P f P f
∈
⎧ = ∧ ≠⎪⎨⎪ = ∨ =⎩
∑  ……………………….(5.10) 
 
where 0 ≦ ISim(Pi,Pj) ≦1.  Pi and Pj represent, respectively, the semantic process model 
 
83
required for a microcosmic analysis of process activities.  Equation 5.11 shows the 
activity similarity function denoted by ASim(Ahi,Akj). 
 
( , )
( , ) ( , ) ( , )
ih jk
Na ih jk Input ih jk Output ih jk
ASim A A
W Na A A W Nsa IN IN W Nsa OUT OUT
=
+ + ………………(5.11) 
 
where 0 ≦ ASim(Aih, Ajk) ≦ 1.  Aih represents the name of hth activity of process i; Ajk 
represents the name of the kth activity of process j; ASim(Aih, Ajk) represents the activity 
similarity of Aih and Ajk; INih represents the input set of Ahi; OUTjk represents the output set 
of Ajk.; WNa, WInput, WOutput represent the respective weights for activity name affinity, input 
data set name set affinity and output data set name set affinity. In this study, WNa=0.2, 
WInput=0.2, WOutput=0.6, which, due to higher output data set similarity, implies higher 
function similarity of the two activities compared. 
Equation 5.11 addresses not only information similarity, presented by Nsa(INih, INjk) 
and Nsa(OUTih, OUTjk)), but functional similarity, presented by Na(Aih, Ajk), as well. High 
activity similarity implies that two activities are highly suited for integration, as they 
duplicate efforts within the two processes. 
 
3. Process Functional Similarity 
Equation 5.12, which summarizes all activity similarities of two processes, allows 
calculation of the Process Functional Similarity of Pi and Pj, denoted by FSim(Pi,Pj). 
Similar to ISim, Process Functional Similarity provides a macroscopic evaluation tool for 
determining the appropriateness of integrating two processes. 
 
 
85
applied to redirect information flows between the two organizations’ activities to ensure 
data consistency.   
Overlapping and coupling relationships are determined through the application of 
semantic similarity analysis to identify duplicative activities and collaborative information 
flows within the two organizations’ processes. An overlapping relationship occurs when 
processes execute activities that show commonalities with one another. A coupling 
relationship indicates the presence of data exchange links between two processes. 
Following these definitions, overlapping analysis is proposed for process mergence and 
coupling analysis method is developed for activity collaboration as well. 
 
5.4.1 Overlapping Analysis 
When multiple processes demonstrate the potential for integration, overlapping 
activities related to execute processes must be identified in order to evaluate the potential 
for unification (Castano and De Antonellis, 1998). Theoretically, overlapping between two 
processes may result in high levels of similarity due to activity duplication. Thus, ISim and 
FSim can be applied to determine the overlapping relationships between two organizations’ 
processes. Figure 5.8 shows a potential decision tree describing the overlapping 
relationships used in this study. Five overlapping relationships are identified as shown in 
Table 5.4, and their corresponding reengineering methods are defined in Table 5.5. 
 
87
Table 5.5 Reengineering Methods 
Reengineering 
Method 
Description 
Process Unification 
Unify two processes into a unique one. The unified process is the same 
as the original from the viewpoint of sequence and data items; however 
the data sources and the executors of each activity should be reassigned 
to ensure the unified process can be performed. 
Activity Fusion 
Two similar activities (ASim≧γ) are merged into a complete one. After 
the activity fusion, the new activity has corresponding input/output data 
sets derived from the two original activities, and specific executor(s). 
Thus, only one effort will be made for the duplicate activities, and the 
unified output can ensure the consistency of information in the process. 
As Usual Retain the analyzed process as usual 
Note: In this study, γ= 0.55. 
 
As an overlapping relationship is determined, a newly merged process model replaces 
overlapping processes, which should eliminate associated duplicated efforts and redundant 
activities. 
 
5.4.2 Coupling Analysis 
To obtain an accurate description of the information flow network, coupling 
relationships are employed to designate data exchange points between A/E and GC 
activities. Based on the input-operation-output paradigm, this study applies the coupling 
analysis method to identify the potential information flows between A/E and GC processes. 
Identified information flows combine activities from different processes into a single, 
unified process in order to improve the global effectiveness of associated design and 
construction management processes. 
Coupling relationships among the activities of different processes are determined by 
analyzing the similarity of input and output entities, as shown in Equation 5.13 shows. An 
activity Aik has a coupling relationship with activity Ajh, denoted by “a”, when the affinity 
of output data nr of Aik and input data ns of Ajh exceed threshold α (A(nr, ns) ≥ α), where α 
 
89
 
91
Case study processes were analyzed and reengineered in accordance with the 
procedure illustrated in Figure 5.9. The threshold of FSim, α, and the threshold of ISim, 
β,were respectively set as 0.45 and 0.5 to distinguish the proper reengineering method. In 
this case, the overlapping relationship of P1 and P2 was defined as “Partial Overlapping” 
(ISim(P1, P2) = 0.546 ≧ 0.5, FSim(P1, P2) = 0.47 ≧ 0.46) and of P1 and P3 as 
“Indefinite Overlapping” (ISim(P1, P3) = 0.58 ≧ 0.5, FSim(P1, P2) = 0.451 ＜ 0.46). 
Therefore, “Activity Fusion” was the reengineering method recommended for P1 and P2 
and either “Activity Fusion” or “As Usual” was the reengineering method recommended 
for P1 and P3. Upon considering the low similarity of P1 and P3 activities, the 
reengineering method recommended for the latter was “As Usual”. For P1 and P2, the high 
FSim obtained was the result of the high similarity of ASim(DA2,DGC11) and 
ASim(DA2,DGC13) activities, as shown in Table 5.3. Therefore, two newly-fused activities, 
namely “DM1. Determine preliminary subcontractor list” and “DM2. Qualified 
subcontractor selection” were created to replace the A/E “DA2. Preliminary coordinate” 
activity and the two GC activities, “DGC11. Collect subcontractor information” and 
“DGC13. Register Qualified subcontractors”. 
Coupling analysis was applied to determine data flow link(s) within the merged 
process model. As P1 and P2 activities had already been fused into a new process, only the 
coupling relationship between the new process and P3 needed to be determined. Equation 
5.13 was used to identify eight coupling relationships, as shown in Table 5.6. Not all 
identified coupling relationships can be utilized because of potential coupling relationship 
conflicts. Using the example provided by coupling relationships in Table 5.6 the 3rd and 4th 
coupling relationships conflict with the other coupling relationships due to their sequential 
logic. Therefore, by applying the 1st, 2nd, 5th, 6th, 7th and 8th coupling relationships, 
 
93
Figure 5.10 the Overlapping/Coupling Relationship Diagram of Case “A” 
 
DA1. Requirement 
confirm with Owner
Confirm table 
created
Development 
design finished
DA8. Design 
Summarizing
Drawings issued
D01.Requirements 
confirm list of 
detailed deign
D12.Results of 
detailed design
DA5. Draft Evaluation
Design result 
confirmed
DA6. Design Task 
Control
Design schedule 
updated
DA7. Budget
Budget approved
D11.Budget 
D10.Price 
comparing sheet
D08.Detailed Design 
Drawings
D07.Task control table 
of detailed design
D09.Confirm list for 
results of detailed 
design
DA4. Detailed Design
Drafts done
D04.Development design 
drawings
DA3. Design Tasks 
Planning
D07.Task control table of 
detailed design
D07.Task control table of 
detailed design
Design task control 
table created
D06. Detailed design 
conference Rec.D06.Detailed design conference Rec.
D08.Detailed Design 
Drawings
D01.Requirements confirm 
list of detailed deign
D08.Detailed Design 
Drawings
D08.Detailed Design 
Drawings
D08.Detailed 
Design Drawings
D11.Budget
D04.Development design 
drawings
D26. Detailed design 
tasks plan table
DM1. Determine 
Preliminary 
Subcontractor List
Subcontractor 
information table Created
D13.Subcontractor 
information table DGC12. Preliminary 
Qualifying
Subcontractor 
evaluation table
Created
D14.Subcontractor 
evaluation table
DM2. Qualified 
Subcontractor Selection
conference Rec.
created
D15. Qualified 
subcontractor list
DGC14.Supply Ability 
Evaluation
Supplier 
evaluation table
Created
D16.Supplier 
evaluation table
D13.Subcontractor 
information table
D14.Subcontractor 
evaluation table
D15. Qualified 
subcontractor list
DGC21. Purchase 
Scheduling
Schedule created
D17.Purchasing 
schedule
DGC22. Purchase 
Propose
Application 
submitted
D20.Purchasing 
request application
DGC23. Verification
Inquiry sheet 
created
D21.Inquiry sheet
DGC25.Price 
Negotiation/ 
Comparison
Detailed prices 
comparing list 
created
D23. Price evaluation 
table
DGC26.Purchasing
Contract created
D25. Purchasing 
contract 
D17.Purchasing 
schedule
D18. Design 
drawings
D19.Purchasing 
specification
D20. Purchasing 
request application
D21.Inquiry sheet
D15.Qualified 
subcontractor list
D22.Quotations
D23.Price 
evaluation table
D22. Quotations
DGC24.Inquire
Price evaluation 
table created
D24.Detail prices 
comparing list
D24. Detail prices 
comparing list
Detailed Design Process (P 1 ) Subcontractor Management Process
(P 2 )
Tendering Process ( P 3 )
Original Process of A/E Collaboration Area Original Process of GC
Collaborative Detailed Design Process
Legend:
Input data class
Output data class
Replaced data class
Potential 
Dataflow
 
Figure 5.11 the Collaborative Process of the D/B team in case study  
 
According to the A/E and GC’s original eEPC diagram, the overlapping/coupling 
 
95
Chapter 6 
Design-Build Process Collaboration System (DBPCS) 
Development 
To implement the created collaborative process model, the design-build process 
collaboration system was developed according to the features of the collaborative process 
model.  
Since the collaborative process model (CPM) was created based on the original A/E 
and GC processes, activities included in the model represent the regular work performed 
by A/E and GC.  This infers that, in following the activity sequence in the model, staffs 
can achieve the collaborative process without changing their working behavior or loadings. 
Therefore, the purpose of the D/B process collaboration system is the integration of 
activity actors to achieve activities with information sharing and communication functions 
rather than the automatic implementation of activities. Based on this concept, the DBPCS 
was developed following the Object-Oriented system development (OOSD) approach. The 
system analysis, system design and the system implementation are presented as follows: 
 
6.1 System Analysis 
The Design-Build Process Collaboration System (DBPCS) is the bottom layer of the 
IDBF which plays the infrastructure of IDBF to perform all collaborative processes 
embedded in DBMs. However, since the collaborative processes flow across two 
independent organizations, the data in the created collaborative processes is distributed 
over heterogeneous information environment. Therefore, the DBPCS not only can 
 
97
 
Figure 6.2 The System Architecture of DBPCS 
By cooperation between modules in Figure 6.2, the DBMs in the fast-tracking model 
can be implemented by DBPCS. The process engine is the core for module cooperation. 
On the one hand, the process engine cooperates with DBM management module to invoke 
the specific collaborative processes of DBMs; on the other hand, the process engine 
cooperates with the activity execution module to implement the invoked collaborative 
processes. 
For the collaboration between the process engine and DBM management module, the 
execution statuses of DBMs in the fast-tracking model will be update by DBM 
management module in accordance with the sequential relationships and the real-time 
process execution status. Subsequently, checking DBMs’ new statuses, DBM management 
module can invoke the specific collaborative processes of DBMs. Moreover, when a 
process is finished, the process engine will return a process finished message to DBM 
management module, so that DBM management module can update DBMs’ statuses and 
invoke new processes. 
 
99
Table 6.1 Function Requirements of DBPCS 
No. Function Module 
Corresponding Requirements
(in use case diagram) 
Function Descriptions 
1 Design Management Module 
UC1. Invoke processes of 
DBMs 
1. import DBMs data of the 
fast-tracking model and activity 
information of the collaborative 
process model to IDBF database 
2. manage the IDBF database 
3. update DBM execution status 
4. invoke corresponding 
collaborative processes of 
DBMs according to DBMs’ 
status 
5. create invoking messages of the 
invoked processes 
2 Process Engine UC2. Perform processes 
1. manage invoked collaborative 
processes of DBMs 
2. invoke activities of processes 
3. create/send process finishing 
messages while processes are 
completed 
3 Activity Execution Module UC3. Execute Activities 
1. providing activity information 
2. providing activity input data for 
activity actors 
3. assign tasks to activity actors 
4. communicate activity actors 
with messages 
5. manage output data submitted by 
activity actors 
6. retrieve external data if 
submitted output data is stored 
in legacy systems 
 
6.2 System Design 
6.2.1 DBM Management Module 
The primary functions of DBM management module are managing the IDBF 
database and announcing the collaborative process invoking messages of DBMs. The 
DBM management module is composed of the IDBF database management UI, the DBM 
manager and the process monitor. The IDBF database management UI provides functions 
to manage the fast-tracking and collaborative process model information within a D/B 
project, and configure the system parameters of DBPCS. The IDBF database not only 
stores the DBM names and relationships in the fast-tracking model, but also records the 
 
101
DBM will be updated. Following these two recurring sequences, all DBMs in a D/B 
project can be invoked by the DBM management module. 
6.2.1.1 DBM Manager 
The function of DBM Manager is to update the DBMs’ statuses according to the 
overlapping relationships in the fast-tracking model as shown in Table 4.5. Therefore, 
according to the overlapping relationship between two DBMs, the sequence of their design 
and construction processes can be determined. Besides, a DBM has four types of status as 
shown in Table 6.2. To modify the DBMs’ statuses, this study applied the overlapping 
relationships to be the rules for determining whether the design and construction processes 
of a DBM can be invoked. 
 
Table 6.2 Status of DBM 
Status 
No. Status Name Description 
0 Not invoked The DBM is not invoked yet. The collaborative design 
process of this DBM can be invoked if the predecessors 
(DBMs) were all finished. 
1 Design process invoked The collaborative design process is invoked. The DBM is 
in the design phase waiting for the process finished 
message of the collaborative design process. 
2 Design process finished The collaborative design process has been finished, and 
the construction process can be invoked if the 
predecessors (DBMs) were all finished. 
3 Construction process invoked The construction process is invoked. The DBM is in the 
construction phase waiting for the construction finished 
message. 
4 DBM finished Both collaborative design and construction process have 
bee completed. The DBM is finished. 
The Figure 6.4 shows the process invoking algorithm of the DBM manager. Since all 
unfinished DBMs in the fast-tracking model need to be evaluated and updated by the 
algorithm, an unfinished DBM set will be created preliminarily to evaluate. For one 
evaluated DBM, the DBM manager will firstly check its current status. Only the DBM 
 
103
1. Create unfinished DBM set: 
{DBMj  | j=1~n}
2. Collaborative design or construction processes 
invoked ?
( Status(j)= 0 or 2 ? )
3. Create DBMj＇s predecessor set:
 {DBMi | i=1~ m}
No
Yes
{DBMi} ≠ null ?
4a-1.Can collaborative design process of 
DBMj be invoked by DBMi ?
4a-3. Set Design 
process Invoke = 
true
4a-2. Set Design 
process  Invoke = 
false
i = n ?
Yes
Yes
Yes
No
No
4a-4. Invoke Design of DBMj & set 
status(j)=1
j = m ?
No
4b-1. Can collaborative construction process 
of DBMj be invoked by DBMi ?
4b-2. Set 
Construction process  
Invoke = true
4b-3. Set 
Construction process  
Invoke = false
i = m ?
4b-4. Create DBMj＇s successor set: 
{DBMk | k=1~ s}
4b-5. Can Construction of DBMj be invoked 
by DBMk ?
4b-6. 
Set Construction 
Invoke = true
4b-7. 
Set Construction 
Invoke = false
4b-8. Invoke Construction of DBMj
& modify status(j)=3
k = s ?
5. Refresh Design-Build Set {DBMj}
Yes
No
No
Yes
Yes
No
Yes
No
k=k+1
i=i+1 i=i+1
j=j+1
Start
j = n ?
No
Yes
4. Collaborative design process invoked ?
( Status(j)= 0 ? )
No
Yes
{DBMk }≠ null ?
Yes
No
{DBMi  | i=1~m} ≠ null ?
Yes
No
6. Are all DBM finished?
(Status(j)=4 for all j)
End
Yes
No
No
Yes
Note:
DBMi: the predecessor of DBMj
DBMk: the successor of DBMj
Status(i) : status of DBMi
Status(j) : status of DBMj
Status(k) : status of DBMk  
Figure 6.4 Process Invoking Algorithm of DBM Manager 
To check if a collaborative process can be invoked or not, the process invoking rules 
are determined corresponding to each overlapping relationship in Table 4.5. The Figure 6.5 
shows the process invoking rules for the “PP” overlapping relationship. For invoking the 
collaborative design process of DBMj, only the predecessor DBMi’s status is concerned, 
but for invoking the collaborative construction process of DBMj, the status of sucessor 
 
105
Project ID
DBM ID
Invoked Process
DBM Name
Current DBM Status
Project ID
DBM Name
Finished Date
Message Head: Process Type
 
Figure 6.6 Examples of Process Invoking/Finished Messages 
 
6.2.2 Process Engine 
The main responsibilities of the process engine are to automate all invoked processes 
and to cooperate with DBM management module and the activity execution module. On 
the one hand, by interacting with DBM management module through the process message 
queue, the process engine drives the invoked processes; on the other hand, in accordance 
with the activity information in collaborative process model, the process engine invokes 
the specific activities in the activity execution module through the activity message queue.    
To drive processes, this study applied a Microsoft BizTalk server to develop the 
process engine. Based on the BizTalk server architecture, three default main objects; i.e., (1) 
BizTalk Server Application Host, (2) process instance and (3) BizTalk message box, are 
included in the process engine. Meanwhile, to facilitate communications with the DBM 
management module and the activity execution module, the process message queue and the 
activity message queues, are created additionally to be the intermediates between them.  
Figure 6.7 shows the architecture of the process engine. 
 
107
communication port is responsible for retrieving/sending necessary data from/to external 
systems. To create a BizTalk orchestration, activity-related data processing methods must 
be developed and communication ports should be assigned. 
In this study, because the process engine is assigned to drive the collaborative process 
and invoke specific activities, the data processing method of an activity within the 
“Orchestration” was developed to generate the activity invoking message as shown in 
Figure 6.8. Also, two communication ports, the “activity invoking message send port” and 
“activity finished message receive port” are assigned to interact with the activity message 
queue as shown in Figure 6.7. Therefore, as a DBM’s collaborative process began, the 
process instance with an identifier of the DBM’s Name will be generated, and subsequently, 
the activities will be invoked based on their activity sequence within the collaborative 
process. Meanwhile, an activity invoking message was generated to the activity message 
queue. Upon completion of activities, their finished messages will also be retrieved via the 
activity receiving port of the “Orchestration”. 
 
Figure 6.8 Activity Invoking Message Generated by Process Instance of DBM2231 
 
Moreover, as the collaborative process is a long-running process, process instances 
will be “dehydrated” to the BizTalk message box when the process instance is suspended 
for a long time in order to release system memory resources. Once suspension of 
activity/activities ends, the dehydrated process instance will be “rehydrated” from the 
 
109
 
Figure 6.9 Collaboration Diagram of the Activity Execution Module 
 
Table 6.3 Object Responsibility Table in the Activity Execution Module 
Server/Agent 
Name Functions Communicate with 
MAS Server 
To register and record the invoked agent’s information, such as ID, 
name, network address and abilities; collaborate with all agents and 
delegate tasks.  
All other agents 
Activity Demon 
1. Acquire the activity invoking message form the activity message 
queue. 
2. Create the corresponding activity agents according to the invoking 
messages. 
1. MAS server 
2. activity message queue 
3. activity agents 
4. IDBF database 
Activity Agent 
1. Providing and manage activity information to activity assistant 
agents. 
2. Be the message intermediate  of activity assistant agent/s. 
1. MAS server 
2. activity assistant agent 
3.  IDBF database 
Activity Assistant 
Agent 
1. Assist actors to receive the invoked activities to implement. 
2. Provide user interfaces for input/output data presentation and 
management. 
3. Send/Receive messages to/from other coworkers. 
4. Manage tasks of the received activities. 
1. MAS server 
2. activity  agent/s 
3. data management agent 
Data 
Management 
Agent 
1. Receive the data requests from activity agents and return the results.
2. Delegate data retrieving tasks to the data retrieving agents. 
3. Store the retrieved data to IDBF database 
1. MAS server 
2. activity assistant agent/s 
3. IDBF database 
Data Retrieving 
Agent Retrieve the specific data from the A/E or GC’s database. 1. data management agent 
 
1. MAS Server 
The MAS server is the host of the activity demon and all created activity agents. That 
is, the activity demon and activity agents reside on the MAS server waiting for activity 
assistant agent clients. Meanwhile, the MAS server is also the name server of the activity 
 
111
Activity Demon activityMessageQueue
DBMi-DAj : activityAgent
IDBF Database
agent(m) : activityAssistantAgent
1: getActivityInvokeMessage()
actvitityInvokingMsg(act(DBMi-DAj))
2: Initiate(DBMi-DAj)
4: Query(act(DBMi-DAj))
activityInformation of act(DBMi-DAj)
5: setupProperty(actInformation)
3: RegistToDatabase(url)
activityFinished(act(DBMi-DAj))
eliminate(DBMi-Daj)
X
 
Figure 6.10 Sequence Diagram of Activity Agent Creation 
 
3. Activity Agent 
Each activity agent is the delegate of a specific invoked activity responsible to 
manage the activity’s runtime information in the DBPCS. After they are initiated by the 
activity demon, activity agents will reside on the MAS server as remote applications 
waiting for the clients of the activity assistant agents. By remote calling activity agents, the 
activity assistant agents can retrieve activity information and deliver messages to other 
assistant agents. 
The class diagram in Figure 6.11 shows the activity information of DBPCS. Each 
activity agent is delegated an invoked activity consisting of several input/output data 
classes, tasks and roles. The input/output data classes and roles correspond, respectively, to 
the input/output data and organization views in the collaborative process model. The tasks 
are the sub-missions assigned by the activity chief dynamically in an activity. 
 
113
output data class, the actor needs to editor the document’s attributes and upload the file/s 
containing the working results, so that all the actors related to the activity can share the 
data within the submitted documents. 
The role in the DBPCS is the correspondence in the collaborative process model, 
which is the working group responsible for implementing the activity. Each role consists of 
D/B team staffs. One activity staff is designated to the activity chief for assigning tasks to 
other staffs and verifying task achievement. 
Meanwhile, for the activity assistant agents’ cooperation, the message-based 
communication methods were developed for the activity agent. In this study, KQML 
(Knowledge Query Manipulation Language) was applied to describe the message content 
packaged in an XML document. Therefore, activity agents and assistant agents are able to 
parse the XML messages to get the KQML syntax and understand message intentions. 
Through message delivering, all agents can communicate with each other in the DBPCS. 
 
4. Activity Assistant Agent 
The function of the activity assistant agent is to provide actors with necessary 
up-to-date activity information and to receive achievements from actors when tasks and 
outputs are complete. Therefore, on the one hand, the activity assistant agent must interact 
with its master, the login actor, to implement the activity; on the other hand, the activity 
assistant agent must communicate with activity agents via remote calls to retrieve/update 
activity information and deliver messages to activity role members. Therefore, the activity 
implementation status can be updated instantaneously and all submitted documents and 
task achievements can be shared with all activity members. 
 
115
sends a message to actor(n), the message will first be packaged into a KQML-formatted 
message by activity assistant agent(m), and then be sent to the activity agent, who will find 
the network address of actor(n)’s activity assistant agent and pass the message to assistant 
agent(m). Based on the messaging mechanism, the actors in the same activity can 
communicate with each other and activity assistant agents can monitor their masters’ 
behavior and announce what they have done for the activity when they submit new 
documents or task achievements to the activity.  
Activity actor(m) : staff
assistant agent(m) : activityAssistantAgent
actAgent(i) : activityAgent
assistant Agent(n) : activityAssistantAgent
Activity actor(n)
1: login(StaffID)
2: login(StaffID)
3: sendMessage(msg, actor(n))
4: transferToKQMLmsg(msg)
5: sendMessage(KQML(msg), actor(n))
6: receiveMsg(msg)
7: readMessage(msg)
 
Figure 6.13 Message Transport Sequence Diagram of Activity Assistant Agent 
Based on activity information retrieving and message communication mechanisms, 
six functions were developed for the activity assistant agent, as shown in Table 6.4. 
Table 6.4 Functions of the Activity Assistant Agent 
Functions Description Operator 
1. Activity Basic Information 
Presentation 
Present the basic information, including the 
activity name, duration, status, task 
information, etc. 
All activity actors 
2. Task Assignment Add tasks to the activity and assign them to 
corresponding actors. Activity Chief 
1. Add and edit diary reports corresponding 
to assigned tasks. All activity actors 
3. Task Diary Report 
2. Report Verification Activity Chief 
4. Input Data Providing Provide actor with the activity’s input data. All activity actors 
5. Output Data Management 1. Data submission: receive the activity’s 
output data documents. All activity actors 
 
117
data, the file’s uniform resource location (URL) must be provided. Comparatively, if a 
dataclass is the “Database Record” type, dataclass data are stored in the database and, 
therefore, database structured query language (SQL) is need to retrieve data records. Each 
dataclass type must be pre-defined by DBPCS system managers through the collaborative 
process model import application as shown in Figure 6.2. The type of each input data and 
output dataclass in the process model must be determined in accordance with actual 
conditions. That is, if the A/E or GC implements the activity via management information 
systems and the related data are stored in the database, the data class of this activity can be 
determined as the “Database Record” type. Taking the data classes in Figure 5.11 as an 
example, the data class “D13. Subcontractor Information Table” of the activity “DM1. 
Determine preliminary subcontractor list” was determined as the “Database Record” type 
because GC manages subcontractors’ information with the “Professional Construction 
Enterprise Management System,” which is the construction management information 
system. All subcontractor-related information was stored in the system database. However, 
the activity “DA4. Detailed design” was determined as the “Digital File” type, as design 
drawings and documents were all stored in the A/E computer file system. 
Therefore, the data management agent can determine the data request method by 
referencing the pre-defined dataclass type. The Figure 6.14 shows the sequence diagram 
for requesting the data file of a dataclass. In block 1, the data management agent retrieves 
the document file of data class(p), which is a “Digital File” type. The data management 
agent can retrieve the file and upload it to the DBPCS database in accordance with the 
file’s URL requested from actor(m). In block 2, the data management agent must retrieve 
document data of data class(k), which is the “Database Record” type. For this case, since 
the data retrieving agent is developed to retrieve data in the external database, the data 
 
119
Activity actor(m) : staff
assistant agent(m) : activityAssistantAgent
1: login
dataManageAgent Data Class(k) : DataRetrievingAgent IDBF Database
2: submitFile(dataClass(p))
4: request(dataClass(p), "Digital File")
3: checkDataType(dataClass(p), "Digitial File")
url
6: retrieveFile(url, file)
5: requestFileRUL()
7: uploadFile(file)
{if data class type= "Digital File"}
8: submitFile(dataClass(k))
9: checkDataType(dataClass(k), "Database")
10: request(dataClass(k), "Database")
11: requestData(dataClass(k))
{if Data Class Type= "Database"}
external database
12: loadDataDescription()13: queryKeyword(keywords{})
14: requestQueryKeywords(keywords{})
keyqords{} keywords{}
15: generateSQLSsentence(keywords{}, sql)
16: sendSQL(sql)
queryResult(xml File)
17: uploadFile(xml File, dataClass(k))
Block 1
Block 2
 
Figure 6.14 Data Request Sequence Diagram 
 
 
6. Data Retrieving Agent 
Data retrieving agents are responsible to retrieve “Database Record” type data from 
A/E or GC legacy databases so that data within A/E and GC management information 
systems can be integrated with the DBPCS. Therefore, the data retrieving agent needs 
functions that will allow it to communicate with the external database and retrieve proper 
data records. This study applied enterprise application integration (EAI) techniques to 
develop the architecture of the data retrieving agent, as shown in Figure 6.15. The data 
retrieving agent is composed of a database adapter and data schema. The database adapter 
provides the channel to communicate with specific external A/E or GC information system 
 
121
agent, (2) Subcontractor evaluation table retrieving agent and (3) Qualified subcontractor 
list retrieving agent. For these three data retrieving agents, the Microsoft SQL server 
database adapter was applied because relevant data was stored on the Microsoft SQL 
database server - the back-end database of the GC legacy system. Meanwhile, three data 
descriptions were generated. Figure 6.16 shows the data schema of the subcontractor 
information table agent. “Professional specialty” and “Project name” represented two 
query keyword description parameters; i.e., when submitting subcontractor information 
stored in the external database to the data class of “D13.Subcontractor information table”, 
an actor would be required to input keywords relevant to these two parameters to direct the 
subcontractor information table retrieving agent to retrieve matching subcontractor data 
records in the external database and parse these records to an XML file in accordance with 
the attribute list and definitions in the retrieved data description. The retrieved XML will 
then be stored in the DBPCS and shared with other actors involved in related activities. 
 
123
Data Management 
Agent
Data Retrieving Agent 
of DataClass(i)
External DatabaseActivity Actor
1.Create Data(m) in the legacy system Data(m)
2. Insert Data(m)3. Submit Data(m) to DataClass(i)
Is DataClss(i) “Database 
Record＂ type?
4. Request the URL of data(m)
6. Request the Query Keywords
5. Read Query Keywords Description
7. Input Query Keywords
8. Create database query statement(m)
database query statement(m)9. execute query statement(m)
XML file(m)
10. Receive Data(m)Data(m)
11. transform data(m) to XML file(m)
12. Store XML file(m) in DBPCS
Yes
No
 
Figure 6.17 Activity Diagram of External Data Retrieval  
In summary, the data retrieving agent has the following features: 
(1) A data retrieving agent is developed for only a specific data class. Therefore, for 
example, the occurrence of a “Database Record” type data class requires the 
development of a unique data retrieving agent. 
(2) The newly-developed data retrieving agent can and must be plugged into the DBPCS. 
 
125
6.3.1 DBM Monitor Server 
The DBM monitor server is the first application server of the DBPCS which 
implements the DBM management module as shown in Figure 6.2. Using Microsoft Visual 
Basic programming language, the DBM manager and the process monitor are developed as 
a window service to manage the execution status of each DBM in the fast-tracking model 
and invoke the collaborative processes of DBMs. Figure 6.19 shows the DBM monitor 
service running in the application server. 
 
Figure 6.19 DBM Monitor Service in the Application Server 
6.3.2 Process Engine Server 
The process engine server is the implementation of the process engine module. 
Following the Microsoft BizTalk architecture, this study used the BizTalk server 2003 to 
implement the process engine server. Figure 6.20 shows the BizTalk server application host 
running in the process engine server which is the process instance container responsible for 
controlling the driven process instance. Figure 6.21(a) shows the process instances and the 
hydration statuses in the process engine server. Each process instance is corresponding to 
an independent collaborative process, and the execution status of the instances is traceable 
 
127
 
Figure 6.22 MAS Service Running in the MAS Server 
 
6.3.3 IDBF Management UI 
The IDBF management UI provides the user interfaces to create and edit D/B 
projects in the DBPCS. To create a D/B project in the system, the basic information, the 
fast-tracking model and the collaborative process model of the project are all needed to 
input. Figure 6.23 shows the project creation procedure of the IDBF management UI. Four 
steps in the procedure are described as follows: 
 
129
Partner Staff management 
 
Figure 6.25 Create Participative Staffs in IDBF Management UI 
Step 2. Add a new D/B project 
As the information of the partner company is created, a new D/B project can be 
created with the D/B project management module in the IDBF management UI. The team 
partner is needed to assign to the newly created project as Figure 6.26 shows, so that all 
staffs in the assigned partner company will be associated with the project.   
Assign Team 
Partner  
Select Project  
Partner Pool
Project 
Partner List
 
Figure 6.26 Select the Partner Company of the Project 
As the partner company in the team was assigned, the project managers can 
 
131
Create DBMs of the 
fast-tracking model
Select a Project 
to create
Created DBMs
Basic information 
of the DBM
Add/Delete DBM
 
Figure 6.28 Create Roles within the Project 
Assign overlapping 
relationships to DBMs
List of the 
created DBMs
The assigned Overlapping 
Relationships
Add/Delete Overlapping 
Relationships
 
Figure 6.29 Assign Overlapping Relationships between DBMs 
 
Step 4. Create the CPM of the D/B project 
Figure 6.30 shows the main form in which the process managers can create the 
analyzed CPM. Four functions were developed for inputting the CPM to the DBPCS: 
 
 
133
(2) Process model import: provides the function to import the graphic process 
model. 
(3) Process information panel: shows the activity information, including the 
roles, input and output data classes. 
(4) Role/Input/Output Assignment: is function to assign roles, activity chief, 
input data classes and output data classes to all activities in the process 
information panel. 
According to the imported information, the DBPSC can implement the process by 
delegating each activity to the corresponding roles. 
 
6.3.4 Assistant Agent Client Program 
This program is the implementation of the assistant agent which provides actors with 
the functional interfaces for activity information presentation, data sharing, message 
communication and work achievements submission to fulfil the invoked activities. Figure 
6.32 shows the function structure of the assistant agent client program. After one actor 
logins the program, the assistant agent will list all invoked activities related to the actor in 
the activity pool. The actor needs to select one activity to operate. Five functional areas, 
namely (1) Activity information, (2) Task Report, (3) Data Pool, (4) Message Board and (5) 
Activity Summary Report, are included in the assistant agent client program to assist actors 
in executing activities. Besides, to manage activities’ executions, some specific functions, 
such as task assignment, verification of the activity’s output data, etc., can be only 
performed by the activity chief who takes the responsibility to manage and verify the result 
of the activity. Accordingly, the actors can generate and submit the activity achievements in 
this program, and the activity chief can verify all the achievements to determine the 
 
135
Activity basic 
information 
Task List of the 
activity 
 
Figure 6.33 Window of Activity Information in Assistant Agent Client Program 
 
2. Task report: 
In this functional area, actors can edit and submit reports to the tasks he/she was 
assigned with. Meanwhile, the submitted reports and task achievements can be referred 
by other actors of the activity. Therefore, actors can collaborate with each other to 
complete or modify the task results. By verifying the submitted task reports, the 
activity chief can determine if a task is completed or not. Figure 6.34 shows the task 
report edition and reviewing frames in the assistant agent client program. 
 
137
Input/Output  
Dataclass List
Basic information of 
Dataclass
Dataclass
Name
Document in 
Dataclass
Basic information of 
Document
Submitted file in the 
document
 
Figure 6.35 Data Pool in Assistant Agent Client Program 
 
4. Message Board: 
Actors can send and receive the messages in this interface. For sending messages, the 
email (shown in Figure 6.36(a)) and the instant message (IM) (shown in Figure 6.36(b)) 
communication functions are provided. Moreover, when someone updates the data of 
the activity, the system message including the updated information will be announced 
to inform all activity actors. Figure 6.37 shows the actor message list and the system 
message list in the message board in the assistant agent client program. 
 
(a) (b) 
Figure 6.36 Email and IM Messaging Functions in the Message Board 
 
139
Activity Summary Report
Report Content
Un-submitted 
data report
Submitted data
report
Task finished 
Report
 
Figure 6.38 Window of Activity Summary Report in Assistant Agent Client Program  
Summarily, the assistant agent client application provides a collaboration platform for 
actors to fulfil the delegated activities. Through the task delegation, data sharing and 
integration, and message communication, the activities can be achieved by the actors.  
6.4 System Test 
DBPCS soundness can be verified by checking the results of main DBPCS execution 
activities as shown in Figure 6.39. Therefore, this study created a D/B project for case 
study “A” within the DBPCS to test (1) DBM and process-invoking results, (2) the activity 
delegation function, and (3) retrieving agent function data. Test results are described as 
follows. 
 
141
Project 
Manager
General 
Constructor Architect/Engineer
Roles in GC Roles in A/E
Architecture Design 
Group
Geology Consultant 
Group Structure Design Group
Electric and mechanical 
system Design GroupChief of Const. Field Tendering Group
Purchasing Group Structure Construction Management group
Finishing Management 
Group
Electric and mechanical 
system Group
Safety Management 
Group
 
Figure 6.40 Role Structure of Case “A” 
6.4.2 DBM and Process Invoking Test 
This test was designed to validate the soundness of activities 2, 3, and 4 (Figure 6.39). 
DBM and DBPCS process invoking functions were tested using the fast-tracking model in 
Figure 4.10. As the fast-tracking model is input into the system, the DBM monitor server 
executes the process invoking algorithm (Figure 6.4) and process invoking rules (Figure 
6.5) to update the execution status of each DBM and invoke the collaborative processes 
within invoked DBMs. 
Taking the inputted fast-tracking model in Figure 4.10 as an example, the execution 
status of DBM231 is set initially to “1” as there is no predecessor within the model. 
Applying the process invoking algorithm, the overlapping “CCb” relationship between 
DBM231 and DBM232 holds the execution status of DBM232 at “0” until the 
collaborative design process of DBM231 is finished, while the overlapping “PC” 
relationship between DBM231 and DBM234 simultaneously updates the execution status 
of the latter to “1”.  Once DBM234’s execution status equals “1”, the execution statuses 
of DBM235, DBM236 and the DBM237 are updated to “1” in the same manner due to 
 
143
The six process instances 
in Process Engine
 
Figure 6.42 The Generated Process Instances Corresponding to the Result in Figure 6.41 in 
the Process Engine 
 
6.4.3 Activity Delegation Test 
The activity delegation test was designed to verify the soundness of activities 5, 6, 7, 
8 and 9 (Figure 6.39). As a process instance is generated in the process engine, process 
instance activities should be simultaneously invoked and delegated to actors by the MAS 
server. Thus, checking activity delegation results in the Assistant Agent Client Program is 
the only way to test the soundness of the DBPCS activity delegation function. Using the 
previous test case as an example, because six collaborative design processes were 
generated in the process engine, the process instances will send activity-invoking messages 
to the MAS server based on the imported CPM. As activity-invoking messages are 
received, the MAS server generates corresponding activity agents responsible to delegate 
activities to specific actors.  Activity delegation results are stored in the Assistant Agent 
Client Program to inform logon actors. Figure 6.43 shows activity delegation results for 
 
145
Three running Data Retrieving Agents in the DBPCS
 
Figure 6.44 Three Data Retrieving Agents Running in the DPBCS 
We took as our test example the D13 data-retrieving agent of the “D13. Subcontractor 
information table”. When an actor wants to submit subcontractor data(m) to the Assistant 
Agent Client Program data class “D13. Subcontractor information table” that he/she has 
generated in the external information system (see Figure 6.45), the D13 data retrieving 
agent will prompt for input query keywords (see Figure 6.46) required to retrieve 
subcontractor data(m) from the external database. Figure 6.47 shows the XML file, 
including retrieved data(m), which replicates the external data shown in Figure 6.45. This 
verifies the soundness of the D13 data retrieving agent. Employing the same methodology, 
we verified the soundness of D14 and the D15 data-retrieving agents as well. 
 
147
The retrieved Data(m) form the external system
 
Figure 6.47 XML file Containing the Retrieved Data(m) form the External System in 
Figure 6.39 
 
149
(DBPCS). 
Apply AD methodology to create the Fast-Tracking Model: 
In line with fast-tracking philosophy, this study applied the AD method to divide a 
design-build project into several DBMs with overlapping relationships. Each DBM, 
composed of a collaborative design process and collaborative construction process, was 
responsible to accomplish a specific construction component. Therefore, unlike the 
traditional linear design and construction mechanism, DBM overlapping has the potential 
to shorten a D/B project delivery time. 
Using semantic similarities to generate the Collaborative Process Model: 
For cross-organization process collaboration within D/B project teams, this study 
focused on the crucial stages of semantic similarity analysis and process re-engineering 
method to develop the Cross-Organization Process Re-engineering Method (COPReM), 
employed to identify the collaborative linkages between original A/E and GC processes. 
The COPReM comprises the four stages of (1) process representation, (2) semantic 
hierarchy creation, (3) semantic similarity analysis and (4) cross-organization process 
reengineering. Reasonable collaborative process models for connecting A/E and GC’s 
processes can be schemed out through a systemic approach. 
Semantic similarity analysis, the core of the COPReM, allows for process 
comparisons to be done easily; the results of which can then be used to evaluate process 
similarities. This study applied the following five process-related similarity measures: (1) 
name affinity, (2) name set affinity, (3) process information similarity (ISim), (4) activity 
similarity (ASim) and (5) function similarity (FSim). Based on these measures, 
overlapping and coupling analyses were applied to determine the process duplications and 
 
151
responsible to accomplish a specific activity can collaborate with other members via data 
retrieval, data sharing, and message communications, and tasking to achieve common 
activity goals. Accordingly, the DBPCS provides a platform to not only integrate the 
distributed efforts of actors within A/E and GC organizations, but also connect actors 
together to accomplish activities that share a common objective.  
7.3 Conclusions 
The IDBF provides a process-collaboration-based mechanism to facilitate fast-track 
construction in D/B projects. Relevant analysis methods were developed to facilitate the 
creation of the IDBF and a semi-workflow system, i.e., the DBPCS, was developed as the 
IDBF infrastructure. Facilitated by the DBPCS, D/B team actors can cooperate with one 
another to accomplish DBM collaborative processes necessary to implement the 
fast-tracking model. Conclusions based on research observations and experience follow 
below: 
The Fast-Tracking Model can be created by decomposing a D/B project into DBMs. 
A D/B project can be divided into DBMs by zigzagging decomposition between 
customer needs (CNs), function requirements (FRs), design proposals (DPs) and 
construction process variables (CPVs), with the design matrix [A], construction matrix [B] 
and concurrent matrix [C] (derived from the zigzagging decomposition) describing the 
design and construction sequences between each DBM. Overlapping relationships between 
DBMs can be identified based on sequence information within the matrices. Thus, a 
fast-tracking model can be created by summarizing the DBMs and overlapping 
relationships. 
The business process similarity can be evaluated by semantic similarity analysis. 
 
153
activities to determine which parts are duplicated in the two processes.  Process coupling 
analysis investigates data affinities of the two activity’s input and output data to determine 
potential information flows. The A/E and GC collaborative process model can be created 
by summarizing the overlapping and coupling analysis results. 
The created Fast-Tracking Model can be automated in the DBPCS based on overlapping 
relationships. 
Overlapping relationships, as defined in the fast-tracking model, are programmed as 
rules in the DBPCS. Therefore, as the created fast-tracking model is imported into the 
DBPCS, the system can execute the model automatically based on overlapping 
relationships between DBMs. 
The CPM can be automated using workflow techniques. 
Using the Microsoft BizTalk Server, the CPM can be mapped to an “Orchestration”, a 
workflow model executed automatically in the DBPCS process engine. As the CPM is 
executed, each activity will be invoked and delegated to actors. Therefore, the DBPCS 
provides a semi-workflow mechanism with which to implement the CPM. 
Distributed architects and engineers of A/E and GC companies can be integrated through 
the multi-agent system architecture. 
This study applies the multi-agent system to assist actors to execute CPM activities. 
As the process engine invokes an activity, a corresponding activity agent is created to 
manage autonomously the execution of that invoked activity. Firstly, the activity agent can 
delegate the activity to those actors responsible for its completion. Actors can then handle 
an activity following their original protocol with the assistance of an assistant agent 
responsible to feed the actor with requisite data and information. After actors finish a 
 
155
re-engineering method. Although processes embedded in DBMs may increase the 
execution complexity of the fast-tracking model, this study applies workflow and 
multi-agent system techniques to develop the DBPCS as the infrastructure for fast-tracking 
model execution. Thus, the DBPCS can implement and manage the fast-tracking model 
with collaborative processes. In summary, the IDBF provides a process collaboration-based 
mechanism to facilitate fast-track construction in D/B projects. 
7.4 Research Contributions 
The contributions of this research include: 
(1) This is the first research to apply a process reengineering mechanism to facilitate 
fast-track construction. 
(2) This research pioneers the application of cross-organization process 
re-engineering in D/B project teams and the promotion of process collaboration 
technologies in the construction industry. 
(3) This research applied AD methodology successfully to identify fast-tracking 
DBMs and the overlapping relationships between them. It proposes a new 
fast-tracking analysis method for the design-builder to create a practical 
fast-tracking model. 
(4) This research redefines original DBM overlapping relationships in the 
fast-tracking model. Six overlapping sequence types are defined to accurately 
describe the fast-tracking between DBMs.  
(5) This research successfully evaluates process similarities along several vectors, 
including function similarity (FSim), information similarity (ISim) and activity 
similarity (ASim), based on semantic similarity philosophy. Process similarities 
 
157
evaluate [A] and [B] based only on qualitative reasoning (i.e., the laws of nature) and 
available facts (e.g., design/construction schedule sequences, constraints, regulations). 
Resource trade-off conditions are improper and difficult to include because of the 
complexity they introduce to analyses. Hence, the created fast-tracking model presents a 
sequence plan without resource allocations. Consequently, overlapping design or 
construction activities may be modified by schedule planners as sequential tasks due to 
resource trade-off considerations. 
Implementation of the Created Collaborative Process Model 
Although, this study proposed a method by which to reengineer cross-organizational 
processes within a D/B team and analyzed a residential building project case study to 
validate the feasibility of COPReM, the feasibility of the created collaborative process 
model was not validated because the model was not actually applied to the D/B project 
team. In order to ensure the feasibility of the proposed collaborative process model, the 
following pre- and post-COPReM implementation issues must be discussed: 
Pre-COPReM Implementation Issues: The requisite collaborative process models for 
a D/B team should be identified prior to implementing COPReM. “What collaborative 
process models are necessary for this D/B team?” is an essential first question requiring an 
answer. The answer can hopefully be found in resolutions and/or responsibility clauses in 
the D/B alliance agreement. Objectives and scopes for collaborative process models being 
created then must be defined based on the answer to the question above and identify where 
overlaps between the two original entities is considered undesirable. Moreover, as different 
collaborative process models have their specific corresponding existing processes, e.g., 
design professional and GC, input processes properties, such as objectives, scopes, and 
primary data items, must be defined precisely prior to analysis. 
 
159
A data thesaurus provides a common linguistic framework essential to sharing and 
integrating information between two independent units (e.g., databases, information 
systems, processes).  It gathers and provides the semantic relationships and the 
corresponding affinity values between data distributed over different units. The data 
thesaurus provides the common framework that allows the examination / assessment of 
relationships and similarities between data items; an activity critical to interpreting the 
semantic meanings of information stored on different systems and facilitating 
communication / interaction across system platforms. The data thesaurus is, therefore, 
essential to further system integration in the construction industry. As creating a uniform 
data thesaurus will demand a significant investment in time and other resources, a 
suggestion would be to use the data dictionary of the construction industry as a starting 
point and reference for development.  This already prepared reference gathers together 
relevant construction industry terminology and assigns corresponding data attributes. 
A workflow system will be critical to process integration 
To integrate cross-organizational processes, an automatic data exchange mechanism 
between processes will be important. However, the low process automation degrees of A/E 
and GC decrease the possibility of implementing automatic data exchange between 
processes. To overcome this problem, this study created the DBPCS to provide a 
semi-workflow infrastructure for implementing a collaborative process model for A/Es and 
GCs. Although data-retrieving agents can integrate data distributed over A/E and GC 
companies into the DBPCS, actors still need to inform the system to retrieve specific data 
from external database. The construction industry in Taiwan still lacks completely 
automated data exchange and message transformations between processes.  
An appropriate solution for this problem will be to develop a workflow system that 
 
161
 BIBLIOGRAPHY 
Albano, L. D., & Suh, N. P. (1992). Axiomatic approach to structural design. Research in 
Engineering Design, 4(3), 171–183. 
Albano, L. D., & Suh, N. P. (1994). Axiomatic design and concurrent engineering. 
Computer-Aided Design, 26(7), 499–504. 
Aldea, A., René Alcántara, B., Jiménez, L., Moreno, A. Martínez-Miranda, J., Riaño, D. 
(2004). “The scope of application of multi-agent systems in the process industry: three 
case studies.” Expert Systems with Applications, 26, 39-47. 
Andrea, M., Egenhofer Max J. (2003). “Determining Semantic Similarity among Entity 
Classes from Different Ontologies.” IEEE Transactions on Knowledge and Data 
Engineering, 15(2), 442-456. 
Beard, J.L. (2001). Design-build: planning through development, New York : McGraw-Hill, 
pp.34-36. 
Bellifemine F., Caire, G., Trucco T., Rimassa, G., Mungenast, R. (2003). JADE 
Administrator’s Guide, TILAB S.P.A. 
”BizTalk Framework 2.0”, http://www.microsoft.com/biztalk/techinfo/ 
BizTalkFramework20.doc 
Bond, A.H., Gasser, L. (1988). Readings in Distributes Artificial Intelligence. Morgan 
Kaufmann: San Mateo, CA. 
Booch, G. (1994a). “Coming of age in an object-oriented world.” IEEE Software, 11 (6), 
33–41. 
Booch, G. (1994b). Object-oriented analysis and design with applications. 2nd ed., 
Benjamin, Redwood City, California.   
Booch, G., Rumbaugh, J., and Jacobson, I. (1999). The unified modeling language user 
guide. Addison-Wesley, Reading, Massachusetts. 
Bradshaw, J.M. (1997). An introduction to software agents. Software Agents, 3-46. 
Bras, B., & Mistree, F. (1993). A compromise decision support problem for axiomatic and 
robust design. Advances in Design Automation, 65(1), 359–369. 
Bright, M.W., Hurson, A.R., and Pakzad, S. (1994). “Automated resolution of semantic 
heterogeneity in multidatabases.” ACM 7kansactions on Database Systems, 19(2), 
212-253. 
Bussmann, S., Jennings, N.R. and Wooldridge, M.J. (2004). Multi-agent systems for 
manufacturing control. Berlin: Springer,c2004.New York, 1-120. 
 
163
d’Inverno, M., Luck, M. (2001). Understanding Agent Systems. Springer-Verlag: Berlin 
Estes, Z. (2003). “A tale of two similarities: comparison and integration in conceptual 
combination. “ Cognitive Science, 27, 911-921. 
Evans, B. (1988). “Simultaneous engineering.” Mechanical Engineering, 110(2), 38-39. 
Favela, J., Wong, A., & Chakravarthy, A. (1993). Supporting collaborative engineering 
design. Engineering with Computers, 9(3), 125–132. 
Fayad, M. E. (2000). “Introduction to the computing surveys’ electronic symposium on 
object-oriented application frameworks.” ACM Computing Surveys, 32(1), 1–9. 
Fazio, P., Moselhi O., Theberge, P., and Revay, S. (1988). “Design impact of construction 
fast-tracking.” Constr. Mgmt. and Economics, 6(3), 195-208. 
Fichman, R. G., and Kemerer, C. F. (1997). “Object technology and reuse: Lessons from 
early adopters.” Computer, 30(10), 47–59. 
Firesmith, D. G. (1993). Object-oriented requirements analysis and logical design: A 
software engineering approach. Wiley, New York, New York, 16–19.  
Franklin, S., Graesser, A. (1997). “Is it an agent, or just a program? A taxonomy for 
autonomous agents.” Intelligent Agents III, 21-39. 
Furnas, G.W., Landauer, I.K., Gomez, L.M., and Dumais, S.T. (1987). “The vocabulary 
problem in human-system communication.” Communications of the ACM, 30(11), 
964-971. 
Galbraith, J.R.(1973). “Designing Complex Organizations”. Addison-Wesley Publishing 
Company. 
Guarino, N., Masolo, C., and Verete, G. (1999). “OntoSeek: Content-Based Access to the 
Web.” IEEE Intelligent Systems, 14, 70-80. 
Hammer, J. and McLeod, D. (1993). “An approach to resolving semantic heterogeneity in a 
federation of autonomous heterogeneous database systems.” International Journal of 
Intelligent and Cooperative Information Systems, 2(1), 51-83. 
Haveliwala, T.H. (2003). “Topic-sensitive PageRank: a context-sensitive ranking algorithm 
for Web search,” IEEE Transactions on Knowledge and Data Engineering, 15(4), 784 - 
796. 
Henderson-Sellers, B., Dué, R., Graham, I., and Collins, G. (2000). “Third generation OO 
processes: A critique of RUP and OPEN from a project management perspective.” 
Proceedings of the Seventh Asia-Pacific Software Engineering Conference, IEEE, 
Piscataway, New Jersey, 428–435.   
Huhns, M.N., Singh, M.P. (1998). Readings in Agent. Morgan Kaufman: San Francisco, 
CA. 
 
165
Kim, K. and Jr. Paulson, B.C. (2003). “Agent-Based Compensatory Negotiation 
Methodology to Facilitate Distributed Coordination of Project Schedule Changes.” 
Journal of Computing in Civil Engineering, 17(1), 10-18. 
Kim, S. J., Suh, N. P., & Kim, S. G. (1991). Design of software systems based on axiomatic 
design. Robotics and Computer-Integrated Manufacturing, 8(4), 243–255. 
Ko, C.H. (2002). Evolutionary Fuzzy Neural Inference Model (EFNIM) for 
Decision-Making in Construction Management. Ph.D. Research, National Taiwan 
University of Science & Technology, 36-40. 
Larman, C. (1998). Applying UML and patterns: An introduction to object-oriented 
analysis and design, Prentice Hall PTR, Upper Saddle River, New Jersey. 
Larson, J. A., Navathe, S.B. and Elmasri, R. (1989) “A theory of attribute equivalence in 
database with application to schema integration.” IEEE Transactions on Software 
Engineering, 15(4), 449-463. 
Lauesen, S. (1998). “Real-life object-oriented systems.” IEEE Software, 15(2), 76–83. 
Lee, D.L., Huei C.; Seamons, K. (1997). “Document ranking and the vector-space model,” 
Software, IEEE , 14(2) , 67 - 75. 
Lee, J., Kim, M., and Lee, Y. (1993). “Information Retrieval Based on Conceptual Distance 
in IS-A Hierarchies.” J. Documentation, 49, 188-207. 
Lee, S.H., Pena-Mora, F., and Park, M. 2003. “Quality and Change Management 
framework for Concurrent Design and Construction.” Construction Research Congress, 
pp.1-8. 
Li, Y., Bandar, Z.A., Mclean, D. (2003). “An approach for measuring semantic similarity 
between words using multiple information sources,” IEEE Transactions on Knowledge 
and Data Engineering, 15(4), 871 - 882. 
Lu, S.C.Y., Cai, J. (2001). “A Collaborative Design Process Model in the Sociotechnical 
Engineering Design Framework.” Artificial Intelligence for Engineering Design, 
Analysis and Manufacturing, 15, 3-20. 
Maliniak, L. (1991). “Teamwork is the key to the concurrent design.” Electronic Design, 
39(1), 41-43. 
Malone, T.W., Crowston, K. (1994). “The interdisciplinary study of coordination.” ACM 
Computing Surveys, 26(1), 87-119. 
Martin, J. (1993). Principles of object-oriented analysis and design. Prentice-Hall, 
Englewood Cliffs, New Jersey. 
Meyer, J.J.C., Tambe, M. (2002). Intelligent Agents VIII, LNAI 2333. 
 
167
Scheer, A. W. (2000). “ARIS-Business Process Modeling”, Springer. Berlin. 
Sciore, E., Siege, M., and Rosenthal, A. (1994). “Using semantic values to facilitate 
interoperability among heterogeneous information systems”. ACM Tbnsactions on 
Database Systems, 19(2), 254-290. 
Sheth, A. and Kashyap, V. (1992). “So Far (Schematically) Yet So Near (Semantically).” 
Proc. IFIP WG2.6 Database Semantics Conf. Interoperable Database Systems, DS-5, 
283-312. 
Shoham ,Y. (1993). “Agent oriented programming.” Artificial Intelligence, 60(1), 51-92. 
Sichman, J.S., Conte, R., Castelfranchi, C., Demazeau, Y. (1994). “A social reasoning 
mechanism based on dependence networks.” In Proceedings of the 11th European 
Conference on Artificial Intelligence, 188-192. 
Sichman, J.S., Conte, R. (2002). “Multi-agent dependence by dependence graphs.” In 
Proceedings of the Fourth International Conference on Multi-Agent System, Berlin, 
Italy, 483-490. 
Smeaton, A., Quigley, I. (1996). “Experiment on Using Semantic Distance Between Words 
in Image Caption Retrieval.” Proc. 19th Int’l Conf. Research and Development in 
Information Retrieval SIGIR’96, 1996. 
Smith, R.G. (1980). “The contract net protocol: high-level communication and control in 
distributed problem solving.” IEEE Transactions on Computers, C-29(12), 1104-1113. 
Song, W. W., Johannesson, P. and Bubenko, J. J. (1996). “Semantic similarity relations in 
schema integration. “ Data and Knowledge Engineering, 19, 65–97. 
Song, W.W., Cheung, D., Tan, C.J. (2000). “A semantic similarity approach to electronic 
document modeling and integration,” in Proceedings of the First International 
Conference on Web Information Systems Engineering, 1(19-21), 116 - 124. 
Steward, D. V. (1981). The design structure systems: A method for managing the design of 
complex systems. IEEE Transactions on Engineering Management, 28(3), 71–74. 
Su, J.C.Y., Chen, S.J., & Lin, L. (2003). “A structured approach to measuring functional 
dependency and sequencing of coupled tasks in engineering design”, Computer & 
Industrial Engineering, 45, 195-214. 
Suh, N. P. (1990). The principles of design. New York: Oxford Press. 
Suh, N.P., Bell, A. C., & Gossard, D. C. (1978). On an axiomatic approach to 
manufacturing and manufacturing systems. Journal of Engineering for Industry, 100, 
127–130. 
Suh, N.P. (2001). Axiomatic Design Advances and Applications, New York: OXFORD, 
pp.11-213. 
 
169
計畫成果自評 
 
根據本計畫之研究目的，本研究已下列四項主要研究內容： 
(1) 根據「營建業 e 化作業流程與資訊元件化研究」所建立之設計單位與營造廠之
核心流程(Core Process)模型，研究設計與施工作業之互動關係；並應用快捷施工
(Fast Track)之理論，結合原則設計方法(Axiomatic Design)，建立設計施工互動流
程模型建構模式(Fast-tracking Model)。此部份成果請參考報告內容第 3、4 章。 
(2) 結合相似度計算、Trend Model 之組織介面分析方法及同步工程理論
(Concurrent Engineering)，建立包含流程作業與資料相似性分析、流程介面分析及
作業同步化分析之跨組織流程整合分析模式 (Cross-Organization Process 
Re-engineering Method, COPReM)。此部份研究成果請參考報告內容第 5 章(Chapter 
4: Cross-Organization Process Re-engineering Method)。 
(3) 針對營造產業之特性，研究合適之軟體代理人系統分析方法；並運用分析方
法，針對設計施工流程整合之可能連結點進行代理人系統功能需求分析。此部份
研究成果請參考報告內容第 6 章。 
(4)針對快捷施工流程，開發軟體代理人雛形系統，提供一資訊交換溝通平台，連
結設計單位與營造廠之設計/施工流程，建立 e 化虛擬團隊之運作環境。此部份研
究成果請參考報告內容第 6 章。 
 上述研究成果共計完成 1 篇國際期刊(SCI 等級)、3 篇國際研討會及 1 篇博試
論文之發表。分列如下： 
期刊論文： 
1. Cheng, M.Y., Tsai, M.H., (2006), “Cross-Organization Process Integration in 
Design-Build Team”, Accepted by Automation in Construction, Reference No.: 
AUTCON 830. (EI/SCI) 
國際期刊： 
1. Cheng M.Y, Tsai M.H. (2006, 09), “SOFTWARE AGENT FOR DESIGN-BUILD 
PROCESS COOPERATION”, The 23th International Symposium on Automation 
and Robotics in Construction, Selected to be the best papers, Tokyo Japan. 
2. Cheng M.Y, Tsai M.H. (2006, 09), “Cross-Organization Process Re-Engineering for 
Design-Build Project Team Using Multi-Agent System”, Proceedings of the Fifth 
International Conference on Engineering Computational Technology, Las Palmas de 
Gran Canaria- Spain. 
3. Cheng M.Y, Tsai M.H. (2005.09), “Cross-Organizational Process Integration in 
Design-Build Team”, The 22th International Symposium on Automation and 
Robotics in Construction, Selected to be the best papers, Ferrara Italy. 
4. 蔡明修、鄭明淵, (2005.09), “統包團隊跨組織流程整合模式之研究”, 電子計算
機於土木水利工程應用論文研討會, 中國土木水利工程學會, 台南, 台灣。 
5. 蔡明修、鄭明淵,（2004.06）,”虛擬統包團隊流程再造之研究”, 第八屆營建工
程與管理研究成果聯合發表會, pp. 53-54, 台灣大學土木工程系, 台北, 台灣。 
博士論文： 
1. Tsai M.H., (2007), “Cross-Organization Process Re-engineering for Design-Build 
Project Team”, Ph.D. Dissertation, Dep. Of Construction Engineering, National 
Taiwan University of Science & Technology, Taiwan. 
 
1 
報告人姓名 中文：鄭明淵 
英文：Min-Yuan Cheng 
服務單位 國立台灣科技大學營
建系 
會議時間及地點 2006 年9 月12 日至2006 年9 月15 日 
Las Palmas de Gran Canaria, Spain 
會議名稱 中文：第五屆國際工程計算機技術研討會 
英文：The Fifth International Conference 
on Engineering Computational Technology (ECT2006) 
發表論文題目 (中文) 多代理人統包團隊跨組織流程整合系統之研究 
(英文) Cross-Organization Process Re-
Engineering for a Design-Build Project Team Using a Multi-
Agent System 
 
一、參與會議經過 
此次參加的國際會議名稱為The Fifth International Conference  on Engineering 
Computational Technology (ECT2006)，會議於2006 年9 月12 日至2006 年9 月15 
日，在西班牙的Las Palmas de Gran Canaria舉行，為期共4天，此會議中本人以口頭發表論
文 ； 題目 ： 多代理人統包團隊跨組織流程整合系統之研究(Cross-Organization Process 
Re-Engineering for a Design-Build Project Team Using a Multi-Agent System)。 
E C T 0 7  會議包含下列 2 8項主題： 1 . Mesh Generation & Adaption; 2 . Polymer 
Processing; 3 . Orthogonal Functions; 4 . Cellular Automata; 5 . Evolutionary 
Methods; 6.GAs & Neural Networks; 7.Construction Management; 8.Numerical 
Linear Algebra; 9.Environmental Engineering; 10.Contact, Forming & Rolling; 11.
Software Development; 12.KBS & CBR; 13.Computer Aided Design; 14.Image 
Processing & Analysis; 1 5 . Parallel & Distributed Computing; 1 6 . Traffic & 
Environmental Engineering; 17.Geotechnical Engineering; 18.SSI & FSI; 19.
Computational Fluid Dynamics; 20.Nanotechnol gy; 21.Biomechanics; 22.Crash 
Simulation; 23.Stochastic Simulation; 24.Meshfree Methods; 25.Fuzzy Methods; 
2 6 . Iterative Methods; 2 7 . Design Sensitivity & Optimization; 2 8 . Fractional 
Differential Equations.，其充分包含了工程自動化發展的重點方 向，經由觀摩各國最新的
工程電子計算機應用及理論之研究，可有效掌握未來國際工程界目前應用電腦及自動化之趨
勢與成功的關鍵因素。 
每日會議結束後，也讓本人有機會認識西班牙這個國家。 
 
二、與會心得 
本人口頭報告被大會排定於第二天Session 7: a MODELLING OF DECISION MAKING 
AND RISK ANALYSIS IN CONSTRUCTION MANAGEMENT，經由口頭報告，可將我們
的研究成果和意念完整的表達 ， 也讓別人有很好的機會來檢視我們的研究方法與理論。報告
完畢之後，經由與主持人及與會人士熱烈的交換意見後，除了更肯定營建業流程再造論文的
方向正確外，也產出了許多未來發展方向的具體建議。此外，主持人亦給予正面的評價並提
出重要之具體建議。另外，會後亦有機會與 Miroslaw Skibniewski 等教授進行討論，主要
探討未來人工智慧應用於工程設計及規劃之研究經驗、未來研究與應用方向，此可謂此行之
最大收穫。 
 
三、攜回資料名稱及內容 
攜回會議論文摘要集一本，光碟片一張，並有相關人工智慧軟體廠商的展覽資訊。 
 
 
 
3 
features derived from overlapping phases of a project [1]-3]. Thus, D/B is considered to be the fastest 
project delivery system as it encourages fast-tracking of design and construction phases. However, 
the design-builders’ unfamiliarity with the D/B process has decreased the benefits of the D/B method 
in Taiwan. Not only the front-end problem of defining user needs and translating those needs into a 
facility program and technical performance requirements has proved a wrinkle for owners, but also 
changing adversarial processes to collaborative ones for professional designers and general 
constructors is critical for the design-build team. Furthermore, due to the limitations of Taiwan laws 
and regulations, A/E and GC keep to their own spheres, so that functional intervals between them 
bring difficulties in cooperating as a D/B team. For these reasons, it is desirable to increase the 
efficiency of cooperation and fast-tracking by the D/B team, and toward that end this study aims to 
reengineer the business processes across professional design (PD) and GC, so that processes within a 
D/B team can be integrated into more cooperative processes spanning organizational boundaries. 
Hence, this research applies the Business Process Reengineering (BPR) philosophy and extends it to 
the cross-organizational process to integrate fast-tracking processes between PD and GC. 
 
Accordingly, by combining the fast-tracking mechanism with the process reengineering philosophy, 
Cheng [7] addressed the Integrated Design-Build Framework (IDBF) to serve as the mechanism for 
executing a design-build project. Since the integrated design-build framework is a long-term project, 
the early addressed IDBF was two-layer framework which aimed at fast-tracking model creation (the 
top and middle layers as shown in Figure 1). However, to implement the concept of IDBF, this study 
extended the IDBF to a three-layer framework. Three models are included in the extended IDBF, 
namely (1) the fast-tracking model, (2) the integrated process model and (3) design-build multi-agent 
system (DBMAS) as shown in Figure 1. The fast-tracking model is constituted of design-build 
modules (DBMs) derived from axiomatic design (AD) method analysis. Each DBM is assigned a 
project sub-goal, to be achieved by the collaborative design and construction processes gathered in 
the integrated process model. Based on the sequential relationships of DBMs, the fast-tracking phases 
of a D/B project can be determined. The integrated process model is composed of the collaborative 
design processes and the collaborative construction processes. Both are generated with the cross-
organizational process reengineering method. Moreover, to perform the collaborative processes in the 
integrated process model, the DBMAS is developed finally, which is treated as the infrastructure of 
the IDBF. Summarily, the extended IDBF addresses a process-oriented fast-tracking execution 
mechanism for a design-build project performed by the design-build multi-agent system, in which the 
integrated process model provides design and build processes for design-build modules in the fast-
tracking model, and the fast-tracking model expresses concurrent relationships between design-build 
modules. 
 
DBM1 DBM2
DBM3
DBM4
DBM5
Collaborative Design Process set Collaborative Construction Process set
Designer ConstructorCooperation Links Designer ConstructorCooperation Links
DBM Management Module
Design activity 1
Design activity 2
Design activity i
Planning activity 1
Planning activity 2
Planning activity j
Cooperation 1
Cooperation 2
Cooperation k
CM activity 1
CM activity 2
CM activity i
CM activity 1
CM activity 1
CM activity j
Cooperation 1
Cooperation 2
Cooperation k
XLANG Process Engine
Activity Execution Module
 
Figure 1: Integrated design-build framework. 
 
5 
subsets. Based on the data and activity names in a textual model, the semantic relationships can then 
be analyzed in the next phase. 
 
2.2 Semantic Hierarchy Creation 
 
Semantic hierarchies clustered with similar data entities and activity functions provide semantic 
distances for semantic similarity analysis. Two semantic hierarchies need to be created, namely, (1) a 
data semantic hierarchy, and (2) an activity semantic hierarchy. To create semantic hierarchies, the 
affinities between two entities are evaluated for similarity and similarities clustered into a group. 
Thus, the length of the path between two clusters (semantic distance) can be determined according to 
the hierarchial structure, and the similarity of two entities can calculated. The steps for creating data 
and activity semantic hierarchies are described in the following. 
 
2.2.1   Create data thesaurus of process models 
 
To present the semantic relationships between data entities, a data thesaurus is organized as an 
associative network composed of nodes and linkages. The nodes are names of the data entities, and 
the linkage between two nodes presents their terminological relationship. Figure 3(a) shows an 
example of the data thesaurus based on the design process of the case study. The symbols ni and nj 
are names of data entities, and lij is the linkage of ni and nj. A linkage is a triplet lij=(rij, aij, k), where 
rij is the type of semantic relationship; aij is the affinity associated with the relationship, and k is the 
number of occurrences of the relationship type for the considered pair of names. Three types of 
semantic relationships, namely Synonymy (SYN, aSYN = 1), Broader/Narrow Terms (BT/NT, aBT = 
aNT = 0.8), and Related Terms (RT, aRT = 0.5), are applied in this study.  
 
These three relationships are defined as explicit relationships, denoted by the symbol “ℜ”, because 
they can be identified subjectively. However, when two processes are analyzed, some affinities may 
be found to exist between entities within two different processes due to their participation in a 
relationship with the same third entity. Thus, the implicit relationship, denoted by the symbol “⇒”, 
between any two entities may be necessary to determine affinity.  
 
2.2.2   Calculate the semantic affinity coefficient 
 
Based on defined semantic relationships, their corresponding affinity functions are addressed as 
Equation (1) ~ (3). 
 
1/
hom( , ) ( )
k
i j ij ijS n n A a a= =         
  (1) 
were S(ni,nj) is the similarity of ni and nj, Ahom is the homogeneous semantic affinity function; aij is the 
affinity of relationship of ni and nj, and k is the number of occurrence of the involved relationship. 
 
According to Equation (6), the more occurrences k of the same relationship between two data entities 
that are discovered, the higher their total affinity proves to be. 
 
1 2 1 2 1 2
( , ) ( , ) ( )i j het ij R ij R ij R ij R ij R ij RS n n A a a a a a a− − − − − −= = + − ×      
  (2) 
where Ahet is the heterogeneous semantic affinity function; aij-R1 is the affinity of R1 relationship of ni and nj, and 
aij-R2 is the affinity of R2 relationship of ni and nj. R1, R2 ∈{SYN, BT/NT, RT} 
 
( , ) ( , )i j imp ih hj ih hjS n n A a a a a= = ⋅        
  (3) 
where A imp is the a f f i n i t y  function of the  implicit relationship; aih is the explicit 
relationship strength of ni and nh; ahj is the explicit relationship strength of nh and nj. 
7 
 
0.8  ; 5ijlij ij D CL ijSS l l L −= = = −        
  (4) 
where lD is the hierarchy length in the data semantic hierarchy, and LCL-ij is the hierarchy level of the common 
concept link of ni and nj. 
 
2.2.4   Activity semantic hierarchy creation 
 
For functional similarity analysis, not only data semantic hierarchy needs to be created, but also 
activity semantic hierarchy must be identified. However, unlike the data semantic hierarchy, in this 
case activities of all analyzed processes can be classified into general categories according to their 
essential functional concepts based on the operational concepts addressed by De Antonellis and Zonta 
(1990) [6]. Only functions acting on resources are considered in this study; i.e., “Creation,” 
“Exchange,” “Transformation,” “Modification” and “Deletion”. Figure 5 shows the example of the 
activity semantic hierarchy derived from a case study. 
 
A
ct
iv
iti
es
Figure 5 Example of Activity Semantic Hierarchy  
 
2.3 Similarity Analysis 
 
In this stage, the process similarity can be calculated according to the data and activity semantic 
hierarchies. To this end, the affinities of data and activity names of different process models should 
be determined based on the semantic hierarchies. Applying the Equation (1) ~ (3), the name affinity 
of two entities, denoted by NA, can be determined according to Equation (5). 
 
( )1
( , ) ( ) ( , )
0
i j
i j ij i j i j ij
if n n
NA n n SS if n n n n CL
otherwise
=⎧⎪= ≠ ∧ ∈⎨⎪⎩
      
  (5) 
where NA(ni,nj) is the name similarity of entities ni and nj; SSij is the semantic similarity of ni and nj; CLij is the 
common concept link of ni and nj in the data semantic hierarchy or in the activity semantic hierarchy.  
 
Moreover, the name set affinity parameter denoted by A(X, Y) can be derived from name affinity 
parameter. Equation (6) shows the function of name set affinity parameter.  
 
| | | |
1 | | 1 | |1 1
( ( , )) ( ( , ))
( , ) ;
| | | |
X Y
i j i jj Y i Xi j
i j
Max NA n n Max NA n n
A X Y n X n Y
X Y
= → = →= =
+
= ∀ ∈ ∀ ∈+
∑ ∑
   (6) 
9 
2.4.1   Overlapping Analysis 
 
Theoretically, overlapping between two processes may cause high similarity due to their duplicative 
activities [4]. Accordingly, the overlapping between processes can be determined according to the 
process similarities. Following these concepts, the PISim and the PFSim can be applied to determine 
the overlapping relationships between two organizations’ processes. Figure 6 shows the possible 
decision tree of overlapping relationships used in this study. Five overlapping relationships are 
determined according to six criteria sets. 
 
 
Figure 6 The Decision Tree of Overlapping Relationships between Pi and Pj  
(α and β are the similarity thresholds) 
 
(1) Entirely Overlapping Relationship: means Pi and Pj operate on the same involved data entities 
and perform the same functions. Therefore, the reengineering measure is to unify these two 
processes into a unique one.  
(2) Precisely Overlapping Relationship: implies two processes perform functions via the same 
input/output data entities and have similar activities. Accordingly, two processes might be almost 
the same, if PFSim(Pi, Pj) is very close to 3, for process unification, or just be similar, due to 
their few duplicative activities, for activity fusion.  
(3) Indefinitely Overlapping Relationship: implies that two processes have similar input/output data 
entities but dissimilar activities. Accordingly, the overlapping between these two processes is 
obscure.  
(4) Partially Overlapping Relationship: indicates Pi and Pj execute activities that have a number of 
commonalities with each other. Therefore, all similar activities are considered for activity fusions. 
(5) No Overlapping Relationship: indicates that two processes have few commonalities with each 
other. Accordingly, the process planer can retain them as usual. 
 
2.4.2   Coupling Analysis 
 
To understand the information flow network, coupling relationships are required to indicate the data 
exchange points between professional design and GC activities. Based on the input-operation-output 
paradigm, this study applies coupling analysis to determine the semantic similarities between input 
and output data entities and discover the possible information flows between activities.  
 
The coupling relationship among activities of different processes can be determined by the similarity 
analysis of input and output entities as Equation (10) shows. An activity Aik has a coupling 
relationship with the activity Ajh, denoted by “a ”, when the affinity of output data nr of Aik and 
input data ns of Ajh is bigger than threshold α (A(nr, ns) ≥ α), where α is set as 0.8. 
 
11 
 
Figure 8 The Design Collaborative Process of the D/B team in case study  
2.5 Reengineered Process Applying 
 
Because the collaborative processes are abstract models, it is necessary to endow the abstract 
processes with specific data items or additional operations to fully realize them for execution in 
different design-build modules.  
 
Summarily, the cross-organizational process reengineering provides a method to create an abstract 
collaborative process model across the design professional and GC organizations. The newly created 
abstract collaborative process model is a pattern process which can perform in each DBM by 
endowing it with specific data items. Through the individual process in each DBM, the fast-tracking 
among all design-build modules can be implemented. 
 
3  Design-Build Multi-Agent System Development 
 
The bottom layer of the IDBF is addressed as the Design-Build Multi-Agent System (DBMAS) 
which is the infrastructure for IDBF implementation. The created fast-tracking model and the 
integrated process model, respectively in first layer and middle layer, are both concept models but 
difficultly implemented due to their complexities. That is, the distributed processes embedded in all 
design-build modules will increase the complexity and decrease the feasibilities. To overcome this 
problem, the DBMAS needs to be developed for automatic implementation of the fast-tracking model 
and integrated process model. 
 
13 
module. This study developed the activity execution module based on the multi-agent system 
philosophy due to its delegation and autonomy characteristics. Thus, in the activity execution 
module, activity agents and collaboration agents are responsible for assisting the actors with the 
necessary information; the data providing agent and the data acquiring agents are assigned to acquire 
the necessary data from the existing information systems or databases to activity agents. 
 
Summarily, on the one hand the DBM management module cooperates with the XLANG process 
engine to manage the execution of the fast-tracking model and the integrated process model; on the 
other hand the activity execution module fulfills activities within the XLANG processes of an 
activated DBM. The DBMAS can be implemented upon the original information environment 
without interference with the original information systems. 
 
3.1 DBM Management Module 
 
The DBM management module is the control center of the DBMAS. The primary target of this 
module is to manage the execution statuses of the all design-build modules within the fast-tracking 
model. That is, activating design-build modules and modifying their execution statuses are main 
responsibilities of the DBM management module. As Figure 9 shows, the management module is 
composed of a DBM manager, a process monitor and a DBM database. The DBM database not only 
stores the DBM names and relationships determined in the fast-tracking model, but also records the 
execution statuses during the runtime of the system. Therefore, the DBM manager can control the 
statuses of design-build modules of a D/B project according to records within the DBM database. 
Moreover, when a DBM is determined to activate, its collaborative design process and construction 
process are needed to be invoked subsequently. To this aim, the process monitor is assigned in the 
DBM management module. The details about the DBM manager and the process monitor are 
addressed following. 
 
3.1.1   DBM Manager 
 
Figure 10 shows the controlling algorithm of the DBM manager. The DBM manager needs to create a 
DBM execution set by querying the DBM database. All the activated design-build modules will be 
involved in the DBM execution set, and the DBM manager, then, can search the database for all the 
related design-build modules to generate the related DBM set corresponding to the current DBM 
execution set. The related DBM set is composed of the candidate design-build modules for being 
activated. The manager needs to check the execution status of the DBM one by one. Four execution 
statuses are applied for the DBM; namely, (1) design-activated, (2) design-finished, (3) construction-
activated and (4) DBM-finished. The DBM manager can activate a DBM’s collaborative design or 
construction process according to the execution statuses of the predecessor and the successor design-
build modules and their fast-tracking relationship. Completing the activation task, the DBM manager 
finally modifies the execution statuses of all design-build modules according to their collaborative 
processes achievement statuses which are provided by the process monitor. 
 
3.1.2   Process Monitor 
 
The process monitor is the bridge between XLANG process engine and the DBM management 
module. Two functions are assigned to the process monitor; namely, (1) gathering the proceeding 
statuses of the processes in the XLANG process engine and (2) generating the corresponding 
XLAGN files of the activated DBM. 
 
First, by calling the XLANGProcessManager container of the XLANG process engine, the process 
manager can receive the proceeding status of an activated process and pass the status information to 
the DBM manager to be the reference for the DBM status checking. Second, as the collaborative 
process sets of a DBM needed to be activated, informed by the DBM manager, the process monitor 
has to generate the corresponding XLANG files and input the files to the XLANG process engine. 
 
15 
 
In this research, the XLANG process file is applied to send an activity’s starting information to the message 
queuing center and receive its finishing information from the message queuing center. Therefore, each activity in 
the integrated process model will be mapped to two activities in the XLANG process; i.e., one activity sends the 
starting information, and the other receives the finished information. Figure 11(a) shows the example of the “A1. 
Confirm with the owner” activity. Following the XLANG diagram, the XLANG process file can be generated as 
shown in the Figure 11(b).  
 
3.2 XLANG Process Engine 
 
The XLANG process engine is the core of the DBMAS, which is developed to drive XLANG processes. The 
primary responsibilities of the XLANG process engine are scheduling the executions of all activated processes 
and persisting the long-running process. Therefore, seven objects are involved in the XALNG process engine. 
Figure 12 shows the logic architecture of XLANG process engine. 
 
 
Figure 12 The Logic Architecture of XLANG Process Engine 
 
1.  XLANGProcessManager 
XLANGProcessManager is core object of the XLANG process engine, and it provides the following functions: 
 
(1) Parsing the XLANG process to an executable instance in the run time of the system. 
(2) Managing the process execution status, such as activating process and dehydration/rehydration of 
process. 
(3) Invoking the message queue for an executing activity or a dehydration process to wait for the messages 
from the activity execution module. 
(4) Communicating to the process monitor for sending the execution statuses of all activated processes. 
 
2.  XLANGProcessCollection container and XLANGProcess instance 
An XLANGProcess represents a process instance in the run-time system. The XLANGProcessManage can parse 
XLANG files and create the corresponding XLANGProcess instances to be executed in the process engine. All 
the executing XLANGProcess instances need to be stored in the XLANGProcessCollection container. An 
XLANGProcess instance will be persisted to the persistence database when it receives a timeout message, which 
is called “Dehydration”. On the contrary, as receiving the waiting message, the dehydration XLANGProcess will 
be recovered by the XLANGProcessManager, which is called “Rehydration”. 
 
3   ActivityMSMQCollection container and ActivityMSMQ 
Microsoft Message Queuing (MSMQ) is a COM service in the windows environment that provides for the 
passing of messages between applications. This study applies the MSMQ technique to be the message gateway 
between the XLANG process engine and the software agents in the activity execution module. The 
ActivityMAMQ is responsible for passing the starting and the finished messages of activities. On the one hand, 
as an activity within an XLANGProcess is started, the XLANGProcessManager will inform the ActivityMSMQ 
to send a “activityStarted” message to the MAMQ server and request the “activityFinished” message while the 
17 
distribute over different locations, the Agent Name Server is developed to gather the agent information, such as 
agent ID, name, network address, communication protocol, capability, etc. Therefore, when an agent needs to 
communicates with other agents, the information about the destination agent can be provided by the agent name 
server. Table 1 shows the responsibilities of the objects in the activity execution module. 
 
Table 1 Object Responsibility Table in The Activity Execution Module 
Server/Agent 
Name Responsibility Communicate with 
MAS Server Collaborate with all agents and delegate tasks.  All other objects 
Agent Name 
Server 
Register and record the invoked agent’s information, such as ID, name, 
network address and abilities. 1. MAS server 
Activity Demon 
1. Acquire the activity starting message form the activityMASQ of the 
XLANG process engine. 
2. Assign the activated activity to its actor and invoke the 
corresponding activity agent or collaboration agent. 
1. MAS server 
2. activityMSMQ 
3. activity agents 
4. collection agents 
Activity Agent 
1. Provide a GUI for actors to interact with the actors. 
2. Provide the necessary data items corresponding to one activity. 
3. Submission of achievements of activities  
1. MAS server 
2. activity demon 
3. data providing agent 
Collaboration 
Agent 
Similar with the activity agent, but collaboration is corresponding to the 
collective activities in collective design processes.  
1. MAS server 
2. activity demon 
3. data providing agent 
Data Providing 
Agent 
1. Receive the data requests from activity agents and return the results.
2. Delegate data acquiring tasks to the data acquiring agents. 
1. MAS server 
2. activity agents 
3. collaboration agents 
Data Acquiring 
Agent 
Acquire the specific data from the existing information systems or 
databases of professional design and GC. 1. data acquiring agent 
 
4  Conclusion  
 
The Integrated Design-Build Framework (IDBF) provides a process-oriented mechanism for performing fast-
tracking construction. Three models are necessarily created in the IDBF, namely, (1) the fast-tracking model, (2) 
the integrated process model and (3) design-build multi-agent system. Following the IDBF architecture, this 
study purely aims at the integrated process model creation and design-build multi-agent system development. 
 
To realize design-build modules in the top layer of IDBF smoothly, the integrated process model needs to be 
generated. This study followed the process reengineering philosophy to integrate the processes of the 
professional design and the GC by the “process mergence” and the “activity collaboration” reengineering 
measures. For this aim, the semantic similarity analysis was applied to evaluate the activities’ and the data 
entities’ similarities. Based on the similarity analysis results, the duplicative activities and similar data entities 
between professional design and GC organizations can be identified; therefore, the collaborative processes of 
integrated process model can then be generated. In short, the integrated process model integrates the professional 
design and GC’s processes into a set of collaborative processes which can serve as a reference model for 
members of a design-build team to cooperate with each other. In this way, the double-waste efforts and 
redundant activities of overlapping processes can be decreased. 
 
However, the collaborative processes embedded in all design-build modules will increase complexity in practice 
and in management. This study finally developed the design-build multi-agent system to support the cooperation 
called for by integrated process model and the fast-tracking model. To drive processes and exchange data 
between two organizations, the design-build multi-agent system is basically composed of a process driving 
engine called “XLANG process engine” and an activity execution module consisting software agents. On the one 
hand the XLANG process engine is responsible for activating the collaborative processes to be executed, which 
was developed following the Microsoft’s BizTalk Framework; on the other hand the activity execution module is 
responsible for executing activities within the activated processes via interacting with actors and acquiring data 
from the existing information systems and databases. 
 
Summarily, this research finalized the development of the IDBF by extending a design-build multi-agent system 
to the IDBF. Thus, the abstract fast-tracking model with its collaborative processes can be implemented by the 
design-build multi-agent system, and the feasibility of IDBF can consequently be increased.  
 
References 
 
