                1 
 
   
  行政院國家科學委員會專題研究計畫  
   
 
嵌入式系統之特定應用架構研究(III)   
研究成果報告(精簡版)  
 
 
    
計畫類別： 
 
個別型 
計畫編號： NSC 100-2221-E-035 -102 - 
執行期間： 100年 08 月 01日至 101年 07月 31日 
執行單位： 逢甲大學資訊工程學系（所） 
   
計畫主持人： 王益文 
共同主持人： 陳德生 
計畫參與人
員： 
博士班研究生-兼任助理人員：洪秋韻 
碩士班研究生-兼任助理人員：林炘毅 
碩士班研究生-兼任助理人員：何雅雯 
碩士班研究生-兼任助理人員：陳睿騏 
助教-兼任助理人員：黃曼玲 
 
   
備註： 本計畫可公開查詢 
中 華 民 國 101 年 10 月 31 日  
   
 
 
 
  
                3 
研究目的 
Embedded systems present a tremendous opportunity to customize designs by exploiting the 
application behavior. Shrinking time-to-market, coupled with short product lifetimes create a critical need 
for rapid exploration and evaluation of candidate Application Specific Instruction-set Processors (ASIPs). 
System architects critically need tools, techniques, and methodologies to perform rapid architectural 
exploration for a given set of applications to meet the diverse requirements, such as better performance, low 
power, smaller silicon area etc.  
The total number of custom instructions (CIs) of an ASIP is limited by the instruction encoding space 
as a global constraint when the data sharing among dependent CIs is profitable to performance speedup as a 
local constraint. The data sharing among CI candidates should be aware ahead to process the CI selection. 
However, the information cannot be known until CIs are finally selected when the encoding space constraint 
is applied. In this paper, integer linear programming formulations are proposed such that the data sharing 
and the encoding space constraint can be applied during CI selection to release micro-architectural I/O 
limitation but obtain optimal performance speedup. 
The focus of this project is to customize a set of applications along with all aspects of a hardware 
architecture such as the datapath, control path, instruction set, interconnect, and instruction/data memory 
subsystems to achieve the balance among performance, energy, and flexibility as well as to reduce both cost 
and complexity of implementations. 
 
文獻探討 
Most research on automatic custom instructions is based on graph theory [5]. A subset of nodes is 
executed by a general purpose processor while another subset benefits from accelerated dedicated hardware. 
This choice is often modeled as an optimization problem, which many different variables affect the 
complexity of searching effective custom instructions: for example, the size of the candidates, the evaluation 
of a candidate’s gain, and the number of CIs constrained by instruction coding space. Past literature in 
general considered only a subset of these factors, leading in general to solutions that are only valid for 
simplified cases of the problem.  
For example, [6] proposes an exact algorithm to find the best custom instructions in a basic block, but 
uses a greedy methodology when finding more than one CI and does not take recurrence into account. In [7] 
also did not consider recurrence in the evaluation of a candidate; however, since some treatment of 
recurrences is necessary in order to achieve significant speedups, it suggested ways to collect isomorphism 
tests in a nonrecurrence-aware search algorithm.  
Other literature achieves better reuse of the instructions or covering of the basic block, but restricts the 
search to simpler custom instructions. In particular, in [8] considering only single-output candidates reduces 
the problem complexity substantially. They solved the problem by using “binate covering” method. In [9] 
defines a method based on dynamic programming to select the best occurrences under area constraints. The 
work presented in [10] takes into account constraints of a NIOS2 processor paired with an extension. The 
method tries to determine an optimal pattern selection that minimizes application’s execution time.  
Incremental algorithms are also used for CIs selection. In [11], they propose an iterative algorithm 
based on a conflict graph. In [12] proposes three algorithms for this purpose. The first one is a greedy 
algorithm that determines, during each iteration, the best candidate in a graph that to be covered. It takes into 
account a number of occurrences of each selected candidates. The second algorithm is also incremental but 
provides optimal solutions. The last one is a heuristic algorithm that analyses a subset of solutions explored 
in the previous algorithm. Unfortunately, state register data sharing between custom instructions were not 
considered.  
The speed-up obtainable by custom instructions is limited by the available data bandwidth between the 
base processor and AFU. A multi-ported register file can increase the data bandwidth. However, additional 
                5 
 
   Figure 2. The design flow to generate ASIPs and the corresponding application codes. 
The overview of ASIP design flow is presented in Figure 2. The input of the proposed design flow is 
application specific programs in C code. We have relied on the Altera NIOS2 compiler infrastructure to 
generate the assembly code of the applications and to obtain the profiling information for each basic block 
which corresponding to the occurrence of each primitive instruction. Therefore, the control/data flow graph 
(CDFGs) are generated for the analysis of the data dependencies among the primitive instructions. Then, the 
most profitable CIs will be selected according to the proposed algorithm to meet the architectural constraints. 
Our main contribution is to propose an integer linear programming formulations in which the selection of 
custom instructions interacts with the SRs data sharing consideration by minimizing data transfers within 
base processor and AFU under the encoding space constraint in order to achieve optimal speedup solutions. 
The selected CIs will be used to conduct the graph covering on the CDFGs. The matching code segments on 
the CDFGs will be replaced with new opcodes representing the CIs. Then, the primitive instructions and CIs 
are scheduled as well as registers are allocated to generate the corresponding executable code to demonstrate 
the correctness and performance of the proposed approach. 
The main custom selection solution includes three phases: template generation, isomorphism checking, 
custom instruction selection. The problem is solved optimally if exact algorithms are employed in all cases. 
However, heuristics can be used in any of the phases to reduce complexity.  
The template generation can be loosely described as a process of identifying a valid subgraph as a 
template from the application data-flow graph (DFG) to form a single CI in order to maximize performance. 
A set of templates is generated based on two basic constraints. First, there are no load, store, jump or branch 
instructions include in the valid subgraph, due to the architectural limitation or designer’s decision. Second, 
a valid subgraph, S, is convex if, for every pair of vertices u, v ∈ S, there is no path from u to v that involves 
an outside vertex w ∉ S. Note that only convex subgraphs can be implemented as custom instructions 
because non-convex subgraphs cause cyclic dependency between the custom instructions and other 
instructions. We consider only connected subgraphs. If we consider disconnected subgraphs (disjoint 
components), both subgraph enumeration and custom instruction selection become much more significantly 
                7 
reduced. Thus, the cycle saved by this template is 1 (3-1-1) cycle. 
 
Figure 4. An example shows the IPi and OPi of Ti 
Encoding Space Formulation 
For each candidate Ck, a Boolean variable ck is introduced to identify the corresponding candidate is chosen 
as a CI or not.  Obviously, if any template Ti within candidate Ck is chosen, then   ki CT ix 0
 and ck = 1.  
If no template within candidate Ck is chosen, then   ki CT ix 0
 and ck = 0.  The following two inequalities 
are used to obtain the value of ck, where |Ck| is the total number of templates within candidate Ck: 
𝑐𝑘 − ∑ 𝑥𝑖 ≤ 0𝑇𝑖∈𝐶𝑘           (3) 
|𝐶𝑘| ∗ 𝑐𝑘 −∑ 𝑥𝑖𝑇𝑖∈𝐶𝑘 ≥ 0         (4) 
If the total number of CIs, N, is limited by the instruction encoding or hardware implementation cost, the 
following inequality is used to constrain the total number of CIs. 
∑ 𝑐𝑘 ≤ 𝑁𝑘=1              (5) 
Objective Function 
The software execution time of a template Ti, SW(Ti), is estimated as the sum of the software latencies of all 
instructions in Ti. As an example, for RISC processor SW(Ti) can be calculated as following where SWu 
represents the cycle time of instruction u.  
  (𝑇𝑖)   ∑     ∈𝑇𝑖               (6) 
The hardware execution time of a template T, HW(Ti), is dependent on the specific AFU synthesis. CST(Ti) 
is defined as the cycle saved of the template Ti that estimates the reduction in the schedule length of the 
application program by replacing the template Ti with a CI, multiplied by the occurrences of the template Ti, 
Occ(Ti).  
Formally:
  
iiiiiii xOPIPTHWTSWTOccTCST *))()((*)()(  (7)
 
The following expression is used to realize the non-overlapping templates constraint, because the 
overlapping nodes can only be executed in exactly once: 
𝑥𝑖 + 𝑥𝑗 ≤ 1, ∃𝑇𝑖 ∩ 𝑇𝑗 ≠ ∅            (8) 
Our objective is to maximize the cycle savings of candidates under the total number of chosen CIs constraint, 
N. The objective function of the ILP formulation of ASIP is defined as follows: 
∑ 𝐶 𝑇(𝑇𝑖)𝑎𝑙𝑙𝑇𝑖                (9) 
 
結果與討論 
We have implemented our algorithm as a point tool in C++. Our tool takes the description of a CDFG which 
is obtained from gcc 3.4.6 and the parameters of the base processor architecture as input and then generates 
                9 
performance and encoding constraint in our flow. We set the maximal number of custom instructions to be 8. 
Performance can be improved by increasing the number of custom instructions included in the processor; 
more code segments of code can be accelerated. Figure 6 shows that the speedup can be increased at SRs 
data sharing, if encoding constraint is considered in custom 
Our approach is based on integer linear programming model that integrates the SRs data sharing and 
encoding space constraint to guide the custom instructions selection process. For an embedded processor 
with GPRF only two read ports and one write port, our methodology can maximize the potential data sharing 
instructions to achieve the performance up to 1.75 speedup. We are now investigating a wide range of 
applications involving speed, area and power consumption trade-offs. 
Figure 6. The performance speedup 
 
參考文獻 
[1] R. E. Gonzalez. Xtensa: a configurable and extensible processor. IEEE Micro, 20(2):60–70, 2000. 
[2] Synopsys DesignWare Configurable Cores. http://www.synopsys.com/ip/configurablecores/. 
[3] Altera Nios II Processor. http://www.altera.com/products/ip/processors/nios2/. 
[4] Stretch. http://www.stretchinc.com/.  
[5] Galuzzi. The instruction-set extension problem: A survey.  In International Workshop on Applied Reconfigurable 
Computing (ARC), pp. 209-220, London (UK), March 2008.  
[6] K. Atasu, L. Pozzi, and P. Ienne. Automatic application-specific instruction- set extensions under microarchitectural 
constraints. In Proc. 40th Design Autom. Conf., Anaheim, CA, Jun. 2003, pp. 256–61.  
[7] N. Clark, H. Zhong, and S. Mahlke. Processor acceleration through automated instruction set customization. In 
MICRO 36: Proc. 36th Annu. Int. Symp. Microarchitecture, San Diego, CA, Dec. 2003, pp. 129–140.  
[8] J. Cong, Y. Fan, G. Han, and Z. Zhang. Application-specific instruction generation for configurable processor 
architectures. In FPGA ’04: Proceedings of the 2004 ACM/SIGDA 12th international symposium on Field 
programmable gate arrays, 2004, pp. 183–189.  
[9] N. Clark, H. Zhong, and S. Mahlke. Automated custom instruction generation for domain-specific processor 
acceleration. Trans. on Computers, vol. 54, no. 10, pp. 1258–1270, 2005.  
[10] K. Martin, C. Wolinski, K. Kuchcinski, A. Floch, and F. Charot. Constraint-driven instructions selection and 
application scheduling in the DURASE system. In 20th IEEE International Conference on Application-specific 
Systems, Architectures and Processors (ASAP), Boston, USA, July7-9, 2009. 
[11] Y. Guo, G. J. Smit, H. Broersma, and P. M. Heysters. A graph covering algorithm for a coarse grain reconfigurable 
system. In LCTES ’03: Proc. of the ACM SIGPLAN conference on Language, compiler, and tool for embedded 
systems, 2003, pp. 199–208.  
[12] P. Bonzini and L. Pozzi. Recurrence-aware instruction set selection for extensible embedded processors. IEEE Trans. 
Very Large Scale Integr. Syst., vol. 16, no. 10, pp. 1259–1267, 2008. 
[13] J. Cong, Y. Fan, G. Han, A. Jagannathan, G. Reinmann, and Z. Zhang. Instruction set extension with shadow registers 
for configurable processors. In FPGA 2005, Feb. 2005. 
[14] R. Jayaseelan, H. Liu, and T. Mitra. Exploiting forwarding to improve data bandwidth of instruction-set extensions. In 
43rd DAC, Anaheim, CA, July 2006. 
[15] L. Pozzi and P. Ienne. Exploiting pipelining to relax register file port constraints of instruction-set extensions. In 
CASES 2005, San Francisco, CA, Sept. 2005. 
[16] Kubilay Atasu, Robert G. Dimond, Oskar Mencer and Wayne Luk. Optimizing Instruction-set Extensible Processors 
under Data Bandwidth Constraints. In DATE 2007.  
[17] Kubilay Atasu, Can Ö zturan and Günhan Dündar. CHIPS: Custom Hardware Instruction Processor Synthesis. IEEE 
Trans. on Computer-Aided Design of Integrated Circuits and Syst., VOL. 27, NO. 3, March 2008. 
[18] ILOG CPLEX. http://www.ibm.com/software/integration/optimization/cplex-optimizer/ 
[19] MiBench. http://eecs.umich.edu/mibench 
[20] 林炘毅, " ASIP Instruction Scheduling and Register Allocation" 逢甲大學資訊工程學系碩士論文, 2012. 
[21] 吳俊雄, " ASIP on Multi-Processor Architectures for Deblocking Filters" 逢甲大學資訊工程學系碩士論文, 2012. 
[22] Chiuyun Hung, Hsin I Lin, Desheng Chen, and Yiwen Wang, “Application Specific Instruction set Processor with 
Implicit Registers to Improve Register Bandwidth,” in 2012 International Workshop on Highly-Efficient Accelerators 
and Reconfigurable Technologies (HEART 2012) 
[23] Ginhsuan Li, Chiuyun Hung, Desheng Chen, and Yiwen Wang, “Application Specific Instruction set Processor with 
Implicit Registers to Improve Register Bandwidth,” in World Academy of Science Engineering and Technology, June 
24-26, 2011. 
RDT05 
行政院國家科學委員會補助國內研究生出席國際學術會議報告 
101年  6  月  4  日 
報告人 
姓  名 
洪秋韻 就讀校院 
（科系所） 
逢甲大學  資電學院  資訊工程系(所) 
■博士班研究生 
□碩士班研究生 
會議時間 
及地點 
101年 5月 31日至 101年 6月 1 日 
國別：日本 
城巿：沖繩 
本會核定 
補助文號 
年  月  日臺會合字第          號 
會議名稱 
(中文) 2012國際高效能加速與可重組式技術研討會 
(英文) 2012 International Workshop on Highly-Efficient Accelerators and 
Reconfigurable Technologies (HEART 2012) 
發表論文 
題目 
(中文) 在編碼空間限制下的高效能客製化指令選取 
(英文) ASIP Instruction Selection with the Encoding-Space Constraint for High 
Performance 
報告內容應包括下列各項： 
一、參加會議經過 
今年 HEART研討會議時間是在 2012年 5月 31至 6月 1日期間展開，其地點為日本沖繩。 
我選擇了直航的中華航空。並於 5月 30日搭乘華航班機 CI120於早上 8點 15分由桃園機場第二航
廈起飛，經過一小時半左右，即當地時間 10點 45分抵達沖繩那霸機場。於 31號早上 9 點前往會
場報到註冊，並展開為期兩天的研討會。 
 此次會議我們發表一篇海報論文，其論文被安排在 5月 31日下午 4點至 5點 40分期間第七位
口頭報告者，在 Session 3 Poster Short Presentations，上台報告五分鐘的 presentation以及
一小時的海報展示。會議回程搭乘華航班機 CI121回到台灣，結束此次的會議行程。 
 
二、與會心得 
國際高效能加速與可重組式技術研討會(International Workshop on Highly-Efficient 
Accelerators and Reconfigurable Technologies)是一個主要研討方向有關高效能加速和可重組
化技術研究的會議，所接受的論文相當專業，例如系統軟體、應用、加速器的平台及架構與創新的
加速裝置。這次首度參加 2012 HEART 會議之中透過口頭與海報展示的問答方式，可以快速了解目
前不同領域的研究成果，並藉此吸取他人與我們的相關研究領域的建議與經驗，除了獲益良多之外
也感謝國科會在經費上的補助。 
 
三、建議 
參加此類國際知名大型研討會，不僅可以了解世界上相同領域的研究方向以及研究深度之外， 
並且能提升研究水準與拓展國際視野，因此有志於長期研究的學者或是研究生更應鼓勵多參與國際
性的研討會。所以，若能夠持續在經費上得到國科會的適當補助，對於研究學者或是研究生將會有
極大的幫助。 
 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/09/19
國科會補助計畫
計畫名稱: 嵌入式系統之特定應用架構研究(III)
計畫主持人: 王益文
計畫編號: 100-2221-E-035-102- 學門領域: 積體電路及系統設計
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
The SoC or VLSI design engineers were trained with the best analysis and 
design capability. 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
