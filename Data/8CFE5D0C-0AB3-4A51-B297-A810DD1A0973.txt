行 政 院 國 家 科 學 委 員 會 專 題 研 究 計 畫 成 果 報 告 
 
機率化可執行碼之別名分析之研究 
Probabilistic Alias Analysis for Executable Code 
 
計畫編號：NSC94-2218-E-194-014- 
執行期限：94 年 10 月 1 日至 95 年 7 月 31 日 
主 持 人：陳鵬升 
執行機構及單位名稱：中正大學資訊工程學系 
 
 
1. 中文摘要 
近年來，由於嵌入式系統與先進硬體架構
的蓬勃發展，相關研究顯示許多分析上的
盲點（ex: 函式庫的原始碼是未知的）無
法於 compile-time 完全解決，單純使用編
譯器最佳化無法完全發揮硬體架構的效
能，link-time optimizer 是解決這問題的方
法 之 一 ， 它 的 應 用 包 含 了 program 
compaction、 speed optimizations、 power 
consumption optimizations 、 size 
optimizations 、 program obfuscation and 
watermarking、instrumentation 等等，現階
段的研究結果顯示 link-time optimizer 確實
能從最佳化編譯之後的執行碼中進一步改
善程式執行的效能、縮減程式碼的大小與
降低程式執行的耗電量，例如：針對受測
程式，Squeeze++ [11]可以減少程式碼大小
約 31%~70%、Alto [10]由 SPECINT-95 可
得到約 24.7%的效能增加。因此 link-time 
optimizer 將在嵌入式系統與先進硬體架構
系統中扮演著重要的角色。 
 
本計畫將針對低階執行碼，發展一機率化
的別名分析方法。在高階原始碼的別名分
析上，已經有許多研究與成果，由於低階
執行碼反組譯後已經喪失原先在高階原始
碼的語意相關資訊，因此高階原始碼的分
析方式無法適用於低階執行碼。目前在低
階執行碼的研究非常少，其所提供的資訊
也僅有 may-alias 與 must-alias，本計畫所
研發的機率化別名分析方法將量化別名的
資訊，我們將得到 instruction I1 與 I2 參考
到相同記憶體位址的機率很高或很低的資
訊，此資訊將提供 link-time optimizer 進行
進階程式分析與最佳化的轉換，例如：
speculation optimizations 、 architecture 
specific optimizations 等等，故本計畫所研
發的機率化別名分析方法在 link-time 
optimizer 中佔有極重要的地位，提供
link-time optimizer 更多完成進階最佳化的
機會。 
 
關鍵詞：link-time optimizer、program 
compaction、別名分析、speculation 
 
2. Abstract 
Recently, many emerging technologies on 
embedded system and advanced architecture 
are proposed. Some researches figure out that 
compiler optimizations can’t fully exploit the 
performance of architecture by itself because 
of some information can’t be obtained at 
compile-time, ex: source code of libraries. 
The link-time optimizer is one of solutions for 
this kind of problems. The application of 
link-time optimizer includes our focus 
program compaction, speed optimizations, 
power consumption optimizations, size 
optimizations, program obfuscation and 
watermarking, instrumentation, etc. The 
 2
b) Intra-procedural analysis︰我們設計研發
新 的 flow sensitive 演 算 法 做 單 一
procedure 的 alias 分析與機率的計算。這
部分包含指令的分析、if-the-else 與 loop
結構的分析。 
c) Inter-procedural analysis ︰ 我 們 採 用
context-insensitive的方式進行整個程式的
分析。 
d) Evaluation︰我們提出機率化的 alias 分析
方式，實作在 Diablo (link-time optimizer) 
[2]上，並將分析的資訊跟真正執行的結果
做比較，以驗證我們所提出的方法。 
 
4. 研究方法 
首 先 ， 我 們 延 續 residue-based address 
descriptor 的表示法，並加入機率資訊，如下
Definition 2.1 所示︰ 
Definition 2.1 
A probabilistic address descriptor (PAD) is a 
pair <I, {Mn, Pn}>. Where I is either an 
instruction or one of the distinguished values 
{NONE, ANY}, Mn is a set of mod-k residues, 
Pn is probability for Mn. 
為了減少在程式分析時的負擔，我們將機率
分成 5 等分，P1 介於 0 到 0.2 之間，P2 介於
0.2 到 0.4 之間，依此類推。 
 
在 PAD 中，機率指的是某個暫存器指到這個
address 的可能性，其定義入下所述：  
 
Definition 2.2 
A probability P(< I, M >, B) is computed for 
each address descriptor < I, M > at each 
program point B by this equation 
)(
),,(),,(
BE
BMIEBMIP ><=><  
此方程式表示說，在程式點 B，某個暫存器
指到 address descriptor 為< I, M >的機率計算
式。其中 E ( B )表示某個程式點 B 的執行次
數，E ( < I, M >, B )表示在程式點 B 中，該
暫存器真的指向 address descriptor< I, M >的
執行次數。 
 
 
B1 
B meet 
B2 
   Fig.1  Meet operation 
 
接著，我們定義分析中的 meet operation，並
針對 loop structure 和 if-then-else structure，提
出計算機率的方法。 
Definition 2.3 
meet operation Λ︰ 
)()(
),,()(),,()(
),,(    ),,(
),,(
21
2211
21
BEBE
BmiPBEBmiPBE
BmiPBmiP
BmiP meet
+
><×+><×=
><Λ><=
><
 
在 Fig.1 中，可以看出 B1 and B2 的資訊都流
到 B-meet 這 block，因此要做 meet 的動作。
在 Debray et al. [1] 的演算法中，對於在 meet
的情況下，會做 widening operation ▽，即保
守的假設。如果 address descriptor 的 base 
address I 不同的話，會造成資訊的流失，降
低精確度。而我們會經過 meet operation 把全
部的可能機率資訊記錄下來，進而更精確的
去做分析。 
 
 4
     } else if (instruction is LEA) { 
 
    } else if (instruction is INC) { 
 
    } 
End For 
 
Inter-procedure algorithm 
 
Do { 
For each procedure p in the call graph 
 Do for each basic block in p { 
 do intra-procedure analysis 
IF (instruction n is a call, calling procedure r) { 
 compute OUTn using r.Exit and Inn 
       } 
    Until, each INn, OUTn in CFG converge 
             
    Update p.Exit 
    For each procedure r called by p 
      update r.Entry using INn 
    End For 
} Until, each p in CG, p.Entry and p.Exit converge 
 
5. 結果與討論 
本計畫建構一個針對低階執行檔的機率
式指標分析的 framework 與 algorithm，完成
了定義新的 probabilistic address descriptor，
並且設計了 flow-sensitive / context-insensitive 
inter-procedural probabilistic alias analysis 
algorithm。實驗部分，我們將此演算法實作
於 Diablo 的平台上，初步實驗結果顯示我們
所提出的方式有不錯的精確度，這是非常有
利於程式最佳化，此機率資訊的進一步應用
是我們下一個後續研究的目標之一。 
本計畫包括理論的探討，程式的實作以
及實驗與分析，此機率的資訊，對於日趨重
要的 post-link optimizer 而言，提供了更多積
極最佳化的機會。在計畫進行的過程中雖然
遇到了許多的困難，但我們還是提出 analysis 
framework，將其實作於 Diablo framework
上，目前正在整理相關數據與資料，準備發
表於相關的研究期刊。因此不管是學術上的
貢獻、實作或未來先進處理器上 post-link 
optimizer 最佳化的應用方面我們都有不錯的
研究成果。 
 
6. 文獻探討 
關於 alias analysis已經有許多研究發表 [3, 4, 
5, 6, 7, 12, 13, 15, 17]，對於 compiler 
optimization 也有相當的貢獻，這些研究都是
以分析高階程式語言之原始碼為主，低階執
行碼的 alias analysis 的研究甚少，分述如下： 
 Saumya Debray [1]首先提出低階執行碼
的 alias analysis，他使用 address descriptor 來
表示記憶體位址，每個 address desccriptor 由
 6
