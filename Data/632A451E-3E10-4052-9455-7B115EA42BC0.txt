Reﬁnements of Miller’s Algorithm
over Weierstrass Curves Revisited
Duc-Phong Le1 and Chao-Liang Liu2
1Information Security Group, Temasek Laboratories, National University of Singapore.
Level 9, 5A Engineering Drive 1, S117411, Singapore
2Department of Information Science and Applications, Asia University.
No.500, Lioufeng Rd., Wufeng, Taichung County 41354, Taiwan
Email: jliu@asia.edu.tw
In 1986 Victor Miller described an algorithm for computing the Weil pairing in his
unpublished manuscript. This algorithm has then become the core of all pairing-
based cryptosystems. Many improvements of the algorithm have been presented.
Most of them involve a choice of elliptic curves of a special forms to exploit a
possible twist during Tate pairing computation. Other improvements involve a
reduction of the number of iterations in the Miller’s algorithm.
For the generic case, Blake, Murty and Xu proposed three reﬁnements to Miller’s
algorithm over Weierstrass curves. Though their reﬁnements which only reduce
the total number of vertical lines in Miller’s algorithm, did not give an eﬃcient
computation as other optimizations, but they can be applied for computing both
of Weil and Tate pairings on all pairing-friendly elliptic curves. In this paper we
extend the Blake-Murty-Xu’s method and show how to perform an elimination
of all vertical lines in Miller’s algorithm during Weil/Tate pairings computation
on general elliptic curves. Experimental results show that our algorithm is faster
about 25% in comparison with the original Miller’s algorithm.
Keywords: Miller’s algorithm; Weil pairing; Tate pairing; Eﬃcient Computation; Weierstrass
Curves.
Received 02 Jul 2010; revised 14 Oct 2010
1. INTRODUCTION
In recent years, the Weil/Tate pairings and their
variants have become extremely useful in cryptography.
The ﬁrst notable application of pairings to cryptology
was the work of Menezes, Okamato and Vanstone [1]
who showed that the discrete logarithm problem on
a supersingular Elliptic Curve can be reduced to the
discrete logarithm problem in a Finite Field in 1991 due
to the Weil pairing. Frey and Ru¨ck [2] also consider
this situation using the Tate pairing. However, the
applications of pairings in constructing cryptographic
protocols has only attracted attention after Joux’
seminal paper describing an one-round 3-party Diﬃe-
Hellman key exchange protocol [3] in 2000. Since then,
the use of cryptosystems based on pairings has had
a huge success with some notable breakthroughs such
as the ﬁrst practical Identity-based Encryption (IBE)
scheme [4], the short signature scheme [5] from Weil
pairing.
The eﬃcient algorithms for Weil/Tate parings
computation thus play a very important role in pairing-
based cryptography. The best known method for
computing Weil/Tate pairings is based on Miller’s
algorithm [6] for rational functions from scalar
multiplications of divisors. The Weil pairing requires
two Miller loops, while the Tate pairing requires
only one application of the Miller loop and a ﬁnal
exponentiation.
Consequently, many improvements on Miller’s algo-
rithm presented are based in some manner on it. Bar-
reto et al. [7] pointed out that we can ignoring all terms
that are contained in a proper subﬁeld of Fpk dur-
ing the computation of Tate pairing when the elliptic
curves chosen have the even embedding degree3. An-
other approach of improving the algorithm is to reduce
the Miller-loop length by introducing variants of Tate
pairings such as Eta pairing [8], Ate pairing [9, 10], and
optimal pairings [11, 12].
For a more generic approach, Blake, Murty
and Xu [13] proposed three reﬁnements to Miller’s
algorithm. Their reﬁnements allowed to reduce the
total number of vertical lines in Miller’s algorithm
thanks to an elegant observation involving conjugate of
a linear function h(x, y) = k(x−a)+b−y4. Though this
3A subgroup G of the group of points of an elliptic curve E(Fq)
is said to have embedding degree k if its order n divides qk − 1,
but does not divide qi − 1 for all 0 < i < k.
4The equation of the conjugate of h, denoted h¯(x, y) is
The Computer Journal, Vol. ??, No. ??, ????
Refinements of Miller’s Algorithm over Weierstrass Curves Revisited 3
The twist of a curve. Let d be a factor of k, an
elliptic curve E′ over Fqk/d is called a twist of degree d
of E if there exists an isomorphism ψ : E′ → E deﬁned
over Fqd .
A twist of E is given by E′ : y2 = x3 + aβ4x + bβ6
for some β ∈ Fqk . The isomorphism between E′ and E
is ψ : E′ → E : (x′, y′) → (x′/β2, y′/β3).
2.2. The Miller’s Algorithm
The pairings over (hyper)elliptic curves are computed
using the algorithm proposed by Miller [6]. The
main part of the Miller’s algorithm is constructing
the rational function fr,P and evaluating fr,P (Q) with
div(fr,P ) = r(P )− (rP )− [r− 1](O) for divisors P and
Q. Let GiP,jP be a rational function with
div(GiP,jP ) = (iP ) + (jP )− ([i+ j]P )− (O)
Miller’s algorithm is based on the following relation
describing the so-called Miller’s formula, which is
proved by considering divisors.
fi+j,P = fi,P fj,PGiP,jP .
Let LiP,jP be equation of the line passing through iP
and jP (or the equation of the tangent line to the curve
if i = j). Let ViP+jP be equation of the vertical line
passing through (iP + jP ) and −(iP + jP ). In the case
of elliptic curves, then
div(LiP,jP ) = (iP ) + (jP ) + (−[i+ j]P )− 3(O), and
div(V[i+j]P ) = ([i+ j]P ) + (−[i+ j]P )− 2(O).
Thus, we have
GP,Q =
LP,Q
VP+Q
.
We say that in the case of elliptic curves, GiP,jP is
the line passing through the points iP and jP divided
by the vertical line passing through the point [i+ j]P .
Notice that div(f0) = div(f1) = 0, so that f0 = f1 =
1. Let the binary representation of r be r =
∑t
i=0 bi2
i,
where bi ∈ {0, 1}. Using the double-and-add method,
Miller’s algorithm is described as in Algorithm 1.
2.3. Blake-Murty-Xu’s method
Blake et al. achieved three reﬁnements to Miller’s
algorithm in [13] thanks to the following observation:
Lemma 2.1 (Lemma 3.1, [13]). If the line h(x, y) = 0
intersects with E at points P = (a, b), Q = (c, d) and
−(P +Q) with P +Q = (α, β), then
h(x, y)h¯(x, y) = −(x− a)(x− c)(x− α).
Input: r =
∑t
i=0 bi2
i with bi ∈ {0, 1},
P,Q ∈ E[r];
Output: f = fr(Q);
T ← P , f ← 1;
for i = t− 1 to 0 do
1 f ← f2 LT,T (Q)V2T (Q) , T ← 2T ;
if bi = 1 then
2 f ← f LT,P (Q)VT+P (Q) , T ← T + P ;
end
end
return f
Algorithm 1: Miller’s Algorithm (P,Q, r)
The proof was proven in [13]. From this lemma, they
gave the following equation:
LT,T (Q)
V 2T (Q)V2T (Q)
= − 1
LT,T (−Q) , (1)
where LT,T (−Q) = L¯T,T (Q).
The way of Blake et al. to apply this observation
to Miller’s algorithm is simple. They delay a vertical
line (V2T in a doubling step or VT+P in an addition
step) in the denominator at each iteration for the next
iteration. Two vertical lines can thus be eliminated
as we can see in Eq. (1). When most bits in the
binary representation of r =
∑t
i=0 bi2
i are 1, the author
described the algorithm as in Algorithm 2.
Input: r =
∑t
i=0 bi2
i with bi ∈ {0, 1}, P,Q ∈ E
where P has order r;
Output: f = fr(Q);
if bt−1 = 0 then
f ← LP,P ; T ← 2P ;
else
f ← LP,P (Q)L2P,P (Q)V2P (Q) ; T ← 3P ;
end
for i = t− 2 to 0 do
if bi = 0 then
f ← f2 V2T (Q)LT,T (−Q) ; T ← 2T ;
else
f ← f2 L2T,P (Q)LT,T (−Q) ; T ← 2T + P ;
end
end
return f
Algorithm 2: Improved Miller’s Algorithm of
Blake et al. in [13]
The Blake et al.’s algorithm eliminated all (two)
vertical lines if the bit bi is 1. When the bit bi is
zero, the computation cost is the same as in Miller’s
algorithm. Thus, the rest number of vertical lines that
has to be computed is the number of bits 0 in binary
The Computer Journal, Vol. ??, No. ??, ????
Refinements of Miller’s Algorithm over Weierstrass Curves Revisited 5
where the function g(i) is deﬁned as follows:
g(i) =
⎧⎪⎪⎨
⎪⎪⎩
L r
2i
P, r
2i
P ·L2 r
2i
P,bi−1P
V2 r
2i
P
if mi+1 = 0
L
bi−1
2 r
2i
P,P
L− r
2i
P,− r
2i
P
if mi+1 = 1,
(7)
If bi−1 = 0, then L2 r
2i
P,bi−1P = L2 r
2i
P,O =
V2 r
2i
P . In this case, there is no more vertical lines
in Eq. 7. Otherwise, bi−1 = 1 we will show in
the following subsection how to apply the Eisentra¨ger-
Lauter-Montgomery’s trick [16] to eliminate the vertical
line V2 r
2i
P in the equation
L r
2i
P, r
2i
P ·L2 r
2i
P,P
V2 r
2i
P
.
In the above equation, mi is deﬁned as follows:
mi =
{
0 if i > t
¬mi+1 or bi−1 if 1 ≤ i ≤ t. (8)
Unlike as the Blake-Murty-Xu’s reﬁnement, we
accept that maybe there is not any line delayed in some
steps. If mi = 1, there is a line delayed for the next
step and otherwise. For 1 ≤ i ≤ t, mi become 0 if and
only mi+1 = 1 and the bit bi−1 = 0.
3.3. Our Algorithm
We use a memory variable m to note that there is still
a vertical line delayed in the current step or not. At
each step, we will apply Eq. (3) if m = 1. Without loss
of generality, we assume that f1 = 1 and VrP = 1.
The algorithm is described by the pseudocode in
Algorithm 3.
Input: r =
∑t
i=0 bi2
i, bi ∈ {0, 1}.
Output: f
T ← P , f ← 1, m ← 0;
for i = t− 1 to 0 do
1 if bi = 0 and m = 0 then
f ← f2 · LT,T ; T ← 2T ; m ← 1;
end
2 if bi = 0 and m = 1 then
f ← f2 · 1L−T,−T ; T ← 2T ; m ← 0 ;
end
3 if bi = 1 and m = 1 then
f ← f2 · L2T,PL−T,−T ; T ← 2T + P ; m ← 1;
end
4 if bi = 1 and m = 0 then
f ← f2 · LT,T ·L2T,PV2T ; T ← 2T + P ; m ← 1;
end
end
return f
Algorithm 3: Improved Reﬁnement of Miller’s
Algorithm for any Pairing-Friendly Elliptic Curve
Remark 1. As the original Miller’s algorithm, our
algorithm cannot avoid divisions needed to update f .
But we can reduce them easily to one inversion at the
end of the addition chain (for the cost of one squaring
in addition at the each step of the algorithm).
We can see that the algorithm eliminated all of
vertical lines except the case of line 4 of the Figure 3.
Now, we will show how to use the Eisentra¨ger, Lauter
and Montgomery’s trick in [16] to replace the quotient
by a parabola equation.
Eisentra¨ger-Lauter-Montgomery’s trick In [16],
the authors gave signiﬁcant and useful application for
computing f(2i+j),P directly from fi,P and f(i+j),P
instead of traditional double-and-add method. They
constructed a parabola, whose formula can be
used to replace
LiP,jPL[i+j]P,iP
V[i+j]P
, through the points
iP, iP, jP,−2iP − jP as follows.
Let iP+jP = (x3, y3) and 2iP+jP = (x4, y4). Then,
LiP,jPL[i+j]P,iP
V[i+j]P
=
(y + y3 − λ1(x− x3))(y − y3 − λ2(x− x3))
x− x3 (9)
We simplify the right half of Eq. (9) by expanding it
in powers of x−x3 and obtaining the following parabola.
y2 − y23
x− x3 − λ1(y − y3)− λ2(y + y3) + λ1λ2(x− x3)
= x2 + x3x+ x
2
3 + a4 + λ1λ2(x− x3)−
− λ1(y − y3)− λ2(y + y3)
= x2 + (x3 + λ1λ2)x− (λ1 + λ2)y + constant
= (x− x1)(x+ x1 + x3 + λ1λ2)−
− (λ1 + λ2)(y − y1).
Clearly, this substitution parabola needs less eﬀort
to evaluate at a point than to evaluate the quotient
LiP,jPL[i+j]P,iP
V[i+j]P
at that point. Additionally, the parabola
does not reference y3, so we can save one multiplication
for calculating 2T +P by using the double-add trick of
Eisentra¨ger et al.
Now, we apply the Eisentra¨ger, Lauter and Mont-
gomery’s method to construct a parabola replacing for
LT,TL2T,P
V2T
. Similarly, let 2T = (x3, y3), then
PT,P (x, y) =
LT,TL2T,P
V2T
=
=
(y + y3 − λ1(x− x3))(y − y3 − λ2(x− x3))
x− x3
= (x− x1)(x+ x1 + x3 + λ1λ2)−
− (λ1 + λ2)(y − y1), (10)
where λ1 is the slope of the line passing through T twice
and −2T , λ2 is the slope of the line passing through 2T ,
P and −2T −P . The quotient also has zeros at T twice
The Computer Journal, Vol. ??, No. ??, ????
Refinements of Miller’s Algorithm over Weierstrass Curves Revisited 7
Doubling Doubling and Addition
Miller’s algorithm [6] 2S + 2M 2S + 4M
= 3.6M = 5.6M
Blake-Murty-Xu’s algorithm [13] 2S + 2M 2S + 2M
= 3.6M = 3.6M
Barreto et al.’s algorithm [7] 1S + 1M 1S + 2M
= 1.8M = 2.8M
Lin et al.’s algorithm [17] 1S + 2M 1S + 4M
= 2.8M = 4.8M
Our algorithm (Algorithm 3) 2S + 1M 2S + 2M = 3.6M(line 3)
= 2.6M 2S + 1M = 2.6M (line 4)
TABLE 1. Comparison of the cost of updating f of Algorithms. “Doubling” is when algorithms deal with the bit “bi = 0”
and “Doubling and Addition” is when algorithms deal with the bit “bi = 1”.
embedding degrees of the form 2i3j , where i ≥ 1, j ≥ 0
is that the corresponding extensions of F can be written
as composite extensions of degree 2 or 3, which allows
faster basic arithmetic operations [18].
In this subsection we construct a variant of
Algorithm 3 in the case of k even.
Let v = (a+ ib) be a representation of an element of
Fqk , where a, b ∈ Fqk/2 , and i is a quadratic non-residue
and δ = i2. The conjugate of v over Fqk/2 is given by
v¯ = (a+ ib) = a− ib. It follows that, if v = 0, then
1
v
=
v
a2 − δb2
where a2 − δb2 ∈ Fqk/2 . Thus, in a situation where
elements of Fqk/2 can be ignored,
1
v can be replaced by
v, thereby saving an inversion in Fqk [19].
We exploit this fact in the following modiﬁcation
of the algorithm, where we replace the denominator
L−T,−T by its conjugate L−T,−T .
The new algorithm is given in Algorithm 4
The factor PT,P (x, y) in the case of line 4 of the above
algorithm is the parabola equation described in Eq. 10.
Table 2 give a comparison between the modiﬁed
algorithm and the original Miller’s algorithm and
Barreto et al.’s algorithm.
From Table 2, we can see that our algorithm needs
no more eﬀort to update the function f than Barreto
et al.’s algorithm. When the complexity of operations
in Fqk dominate the complexity of the operations that
occur in the lower degree subﬁelds, the total cost of
Algorithm 4 is only about 50% of that of the original
Miller’s algorithm (Algorithm 1).
6. EXPERIMENTS
We implemented our algorithms and ran some
experiments comparing the original Miller’s algorithm
(Algorithm 1) with the variant of Algorithm 3 on elliptic
curves described in [21] for k = 17, k = 18 and k = 19.
Our programs used the NTL library [22], a library for
doing number theory, and implemented the algorithms
without any optimization. Timings are measured on an
Intel(R) Pentium(R) M 1.7Ghz, 1 GB of RAM under
Input: r =
∑t
i=0 bi2
i, bi ∈ {0, 1}.
Output: f
T ← P , f ← 1, m ← 0;
for i = t− 1 to 0 do
1 if bi = 0 and m = 0 then
f ← f2LT,T ; T ← 2T ; m ← 1;
end
2 if bi = 0 and m = 1 then
f ← f2L−T,−T ; T ← 2T ; m ← 0 ;
end
3 if bi = 1 and m = 1 then
f ← f2L2T,PL−T,−T ; T ← 2T + P ; m ← 1;
end
4 if bi = 1 and m = 0 then
f ← f2PT,P (x, y); T ← 2T + P ; m ← 1;
end
end
return f
Algorithm 4: Improved Reﬁnement of Miller’s
Algorithm for Even Twisted Curves during Tate
pairing computation
Windows XP. The experimental results are summarized
in Figure 1.
k Original Miller’s algorithm Our variant
17 0.50s 0.38s
18 0.52s 0.39s
19 0.62s 0.48s
FIGURE 1. Timings
7. CONCLUSION AND OPEN PROBLEMS
In this paper we extended the Blake-Murty-Xu’s
method to propose a further reﬁnement to Miller’s
algorithm which is at the heart of all pairing-based
cryptosystems. Our algorithm can eliminate all of
vertical lines in the original Miller’s algorithm, and so
it is generically more eﬃcient than the reﬁnements of
The Computer Journal, Vol. ??, No. ??, ????
Refinements of Miller’s Algorithm over Weierstrass Curves Revisited 9
[18] Koblitz, N. and Menezes, A. (2005) Pairing-Based
Cryptography at High Security Levels. In Smart, N.P.
(ed.), Cryptography and Coding, Proceedings of the
10th IMA International Conference, Cirencester, UK,
December 19-21, pp. 13–36, Springer-Verlag, London.
[19] Scott M. (2006) Implementing Cryptographic Pairings.
Dublin City University, Glasnevin, Dublin 9, Ireland.
[20] Freeman, D. and Scott, M. and Teske, E. (2010)
A Taxonomy of Pairing-Friendly Elliptic Curves. J.
Cryptology, 23(2), pp. 224–280.
[21] Boxall, J., El Mrabet, N., Laguillaumie, F. and
Le, D.-P. (2003) A Variant of Miller’s Formula and
Algorithm (accepted). In Pairing 2010: Proceedings
of the 2nd international conference on Pairing-Based
Cryptography, Japan, December 13-17.
[22] Shoup, V. (2009) NTL: a library for doing number
theory. http://www.shoup.net/ntl/.
The Computer Journal, Vol. ??, No. ??, ????
98年度專題研究計畫研究成果彙整表 
計畫主持人：劉兆樑 計畫編號：98-2221-E-468-012- 
計畫名稱：雙線性配對計算效能提升之研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 1 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 2 2 100%  
博士生 1 1 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 3 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
