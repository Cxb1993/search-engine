2 
 
Karner 所提出之 Use Case Point 來分析整體專案的成本[7][8]，透過將專案中各項不同變因量
化，再加以計算出整體專案的成本，其中 Use Case Point 包含以下各項變因 
 Unadjusted Actor Weight(UAW) 
針對專案中所使用到之開發方式進行量化，可分為 Simple、Average、Complex 三種，
(1)Simple：只使用到 API；(2)Average：除了 API 外，還使用了其他 protocol，以及 data 
stores；(3)Complex：除了以上兩種有用到外，還用了 GUI。針對複雜度的不同分配不同
的 UAW，藉此來將專案的複雜度做區別，如圖 1 所示： 
 
圖  1  根據 Actor Type 分配比重 
 Unadjusted Use Case Weight(UUCW) 
針對 Use Case 中 scenario 和 transaction 的數目來定義 Use Case 的 weight factor，如圖
2 所示，以數目的不同來定義出 Simple、Average、Complex 等複雜度的 Use Case 
 
圖  2  根據 Transaction 的數目分配比重 
 Unadjusted Use Case Point(UUCP) 
將 UAW 與 UUCW 加總，便可得到整個專案中的 Use Case Point 
 Technical Factor(TF) 
TF 為專案中所包含的技術性變因，根據專案的大小，會包含一個至多個的 TF，如圖 3
中為 TF 量化表。 
 
圖  3  專案包含的技術性變因 
在計算上必須考慮專案中所包含之各項技術變因，公式如下 
• Tfactor = SUM(T1....T13) 
• TCF = 0.6 + (0.01 * Tfactor) 
 Environmental Factor(EF) 
4 
 
3. 本計畫以 Use Case Pint 來計算專案 AUCP，而在實際工作分配上，較難以 AUCP 來分配，因
此在計算出專案之 AUCP 後，來預估專案所需時數，針對專案成員之能力來分配時數，Gustav 
Karner 所提出的 Use Case Point 中，完成每單位的 AUCP 所需的人力數約 20 人/時，因此在
計算上，參考 Gustav Karner 所用之 20 人時，乘上 AUCP 來計算出專案總時數，再根據專案
成員 EF 值加以分配，計算方式如下： 
在專案中，人員的 EF 值代表著專案人員的能力，而數值越高代表著能力越高，在分配到的
AUCP 皆相同的情況下，能力越高的人員所需花費的時間會越少，因此在分配時數上將以各
專案人員的 EF 為基準，計算出專案人員在總 EF 中所佔的反比例，再將專案總時數乘上計
算出來的反比例，即為該專案人員必須參與的總時數，相關計算方式如下： 
為了使管制圖服務能針對專案進行控管，因此須先整理出控管專案所需的資訊，其中包含四
個部分： 
 令 S 為專案中所有人員的 EF 乘積，則 S= nAAAAA **** 4321 K  
 專案人員 EF 所佔反比例 
¾ ∑
=
=
n
i A
SSA
1 1
11 //A所佔反比例專案人專案人員員  
 專案人員參與時數 
¾ 所佔反比例參與時數 11 A*20*AUCPA =  
 專案人員完成一小時 AUCP 所花費的時間 
¾ 所佔反比例所需時間完成一點 11 A*20AUCP =A  
 專案總時數 
¾ 80020*4020* === AUCP專案總時數  
 
在後續的管制圖服務中，將以上述資料作為依據，再加以判斷出專案中所有不穩定以及未受
控管的因素，因此必須將上述資料一一計算出來才能對專案進行控管，而在專案結束後，由
於在估計的部分會存在誤差，為了建立較為精確的估計值，還需記錄專案完成時的資料，由
於預估時數的部分是由各人員的 EF 計算後所得出，在修正上將會由資料修正服務來修正各
專案人員的 EF 值，以便專案人員在參與未來其他的專案時，專案管理人員能夠計算較準確
的預估值，因此，在資料記錄上，須記錄下列資訊： 
 實際專案完成的總時數 
 各專案人員每日參與時數 
在記錄上述資訊後，便可由資料修正服務針對專案人員的 EF 值進行調整。 
以某專案為例，專案之 AUCP 為 40，專案成員有 321 AAA 、、 而各自的 EF 為 9、8、7，計算
321 AAA 、、 之反比例公式如下 
 
191
567)*87*98*7/9/(9*8*9//A
1
11 =++== ∑
=
n
i iA
SSA 所佔反比例  
 
191
637)*87*98*7/9/(9*8*9//A
1
22 =++== ∑
=
n
i iA
SSA 所佔反比例  
 
191
727)*87*98*7/9/(9*8*9//A
1
32 =++== ∑
=
n
i iA
SSA 所佔反比例  
6 
 
依照使用資料的不同分為異常狀況判定服務以及資料修正服務，Source Data 為管制圖及專家
系統所需之資料，詳細服務說明如下： 
 
圖  7 Control Chart Tools 之架構 
 管制圖服務：以 JfreeChart 來實作出 Control Chart，根據專案中各階段的不同，在管制
圖上所採用的資料也不同，而本計畫中主要以專案進度做為控管的對象，在管制圖的
選擇上，便以平均值和標準差圖(Average and standard deviation chart)作為呈現的方式，
如圖 8，透過平均值和標準差圖來幫助專案管理者在開發階段察知專案是否穩定，再由
異常狀況判定服務來判斷專案中存在何種不穩定因素，並將不穩定點標示於管制圖服
務中，如圖 9 管制圖服務將異常狀況判定服務所察知的點標示於管制圖中，並回報專
案中的異常狀況。 
 
圖  8  管制圖服務 
 
 
圖  9  異常狀況標示於管制圖上 
8 
 
 資料修正服務：由於在計算專案所花費的成本以及專案人員的工作量時，會因實際狀況
而有誤差，因此在資料修正上，將會以專案實際成本以及花費的時間來修正專案成員
的 EF，修正的 EF 值會隨著人員參與的專案數量而越來越準確，而相關修正方式如先
前所述，先求得專案 EF 誤差再將人員 EF 中加入誤差的修正，以求在下一次的專案中，
估計得更為準確。 
四、 結論 
本研究提出以管制圖控管專案的方法，並以 Use Case Point 預估專案所需之成本，在管制圖方面
實作出 Control Chat Tool 其中包含管制圖服務、異常狀況判定服務、資料修正服務，在管制圖服
務中以平均值和標準差圖來呈現，並將專案中各項資料計算出 UCL、CL 以及 LCL，使用者可透
過管制圖觀察專案中的不穩定情況，而針對專案中不容易察覺的部分可透過異常狀況判定服務來
判定，藉此即使管制圖呈現穩定的情況，亦可藉由異常狀況判定服務告知專案管理者目前所潛在
的異常狀況， 
五、 參考文獻 (References) 
[1] G. Britz, D. Emerling, L. Hare, R. Hoerl, and J. Shade. How to Teach Others to Apply Statistical Thinking. 
Quality Progress (June 1997):67-78. 
[2] D. Card. Statistical Process Control for Software? IEEE Software, May 1994, pp. 95-97. 
[3] D.N. Card. Statistical Techniques for Software Engineering Practice. Proceedings of the 26th 
International Conference on Software Engineering, May 2004, 
[4] N. Eickelmann and A. Anant. Statistical Process Control: What You Don’t Measure Can Hurt You! IEEE 
Software, March 2003, pp. 49-51. 
[5] W. Electronic. Statistical Quality Control Handbook. Indianapolis: AT&T Technologies, 1985. 
[6] W.A. Florac, A.D. Carleton. Measuring the Software Process: Statistical Process Control for Software 
Process Improvement. Addison Wesley, 1999.  
[7] Karner, G.,Resource Estimation for Objectory Projects, White Paper, Objective Systems, 17 September 
1993.   
[8] Karner, G., Metrics for Objectory. Diploma thesis, University of Linköping, Sweden. No. 
LiTHIDA-Ex-9344:21, 1993. 
[9] Hongyu Zhang , Sunghun Kim. “Monitoring Software Quality Evolution for Defects” IEEE 
Software,July 2010 ,pp. 58-64 . 
[10] Ong Hong Choon , Poh-Ying Lim . Effects of Heavy Tailed Distribution on Statistical and Neural 
Network Based Control Charts, 2009 International Conference on Computer Technology and 
Development ,November 2009 ,pp. 232-236  
[11] Q. Wang, N. Jiang, L. Gou, X. Liu, M. Li, and Y. Wang. BSR: a statistic-based approach for 
establishing and refining software process performance baseline. Proceedings of the 28th international 
conference on Software engineering, May 2006, pp. 585-594. 
[12] D.J. Wheeler and D.S. Chambers. Understanding Statistical Process Control, 2nd ed., Knoxville, Tenn.: 
SPC Press, 1992. 
[13] D.J. Wheeler. Advanced Topics in Statistical Process Control. Knoxville, Tenn.: SPC Press, 1995. 
 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/01/12
國科會補助計畫
計畫名稱: 應用統計流程管制與規則推論於軟體流程改善之研究
計畫主持人: 徐國勛
計畫編號: 98-2221-E-142-001- 學門領域: 程式語言與軟體工程
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
