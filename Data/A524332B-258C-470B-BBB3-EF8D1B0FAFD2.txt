中文摘要
本計畫三年的目標﹕(1) 為排序佳化模擬設計削減
搜尋空間的新方法，(2) 將方法開發成工具模組，作為
整合系統佳化平台的一部份，(3) 將模擬進行排序佳化
應用在次世代半導體廠的有效生產排程。第一年中我們
以平穩(Stationary)馬可夫決策問題為載具，提出模擬排
序策略疊代(OOBPI) 的構想，利用策略疊代的架構，以
模擬排序佳化來估算每一狀態的cost-to-go 函數值與最
佳決策。初步模擬結果顯示這個構想的計算效能較傳統
模擬為基礎的策略疊代法可快十倍。
第二年中我們完成OOBPI演算法的設計，包括方法
理論、收斂分析、數值驗證及推展至一般動態規化的初
探。在半導體晶圓生產模擬器方面，我們加入產品優先
序之考量，以模擬半導體廠具有不同優先次序之生產排
程。
第三年中我們結合OO方法與半導體晶圓生產模擬
器進行生產排程組合選擇的研究，包含五項成果:
1. 以供應鍊導向選取出週期時間/X-因子、產出率為
晶圓生產績效指標;
2. 建立半導體晶圓廠優先順序派工之排隊網路模型，
以模擬、分析變異與優先序組合對生產績效的影
響;
3. 完成半導體晶圓廠優先序組合影響週期時間/X-因
子目標設定的模型;
4. 完成半導體晶圓廠間工作競標演算法與模型;
5. 生產排程模擬.
關鍵詞: 排序佳化、演算法設計、半導體晶圓廠、變異
性、優先序排隊網路模型 生產模擬、產品優先序、生
產排程
Abstract
The three-year research objectives of this project are
(1) to design search space reduction methods for simulation-
based ordinal optimization (OO), (2) to develop these
methods into tool modules as part of an integrated system
optimization platform, and (3) to apply simulation-based
OO to effective production scheduling of 300mm foundry
fabs. In the first year, we considered the class of Stationary
Markov decision problems as the conveyer problem. We
proposed an idea of OO-Based Policy Iteration (OOBPI) to
handle the combinatorial complexity of decisions over the
time axis. Utilizing the framework of policy iteration, we
approximate the optimal cost-to-go and optimal decision of
each state by simulation-based OO. Preliminary numerical
studies indicated one order of speed-up of OOBPI over the
traditional simulation-based policy iteration.
In the second year, we have completed the design of
OOBPI algorithm, including the theories for the method,
convergence analysis, simulation study and exploration of
possible extension to general dynamic programming. In
developing a simulator of semiconductor wafer fabrication
with differentiated services, we have incorporated priority
service discipline into the simulator.
The third year combines OO with fab simulators to
study dynamic composition of production schedules for
fabs. There are five deliverable items:
I. Identification of cycle time/X-factor and throughput as
key to performance for semiconductor supply chain
management.
II. Design and development of a decomposition
approximation-based queueing network modeling
methodology capturing operation priority and variations in
fabs.
III. Model construction for differentiated X-xactor target
(XFT) setting with a focus on the relation between priority
XFT and capacity allocation.
IV. Reverse auction-based decision models are developed
for order assignment/scheduling among fabs with a focus
on the gaming behavior.
V. Preliminary OO-based simulation studies for
optimization of fab scheduling.
Key words: Ordinal Optimization, Algorithm design,
semiconductor manufacturing service, Fab Simulator,
Priority, Production Scheduling, performance simulation
一、研究動機與目的
Ordinal optimization (OO) is an emerging approach for
efficient optimization of complex systems. Instead of
finding the optimal solution, ordinal optimization selects a
good enough solution from a subset of options from the
design space based on a certain criteria and a specified
confidence level. The principle investigator (PI) of this
proposal has conducted research on applying simulation-
based OO and optimal computing budget allocation
(OCBA) to scheduling semiconductor wafer fabrication.
Motivated by the findings of previous research and based on
the foundation established, the PI considers simulation-
based OO of good potential for good enough and efficient
production scheduling/dispatching of next generation fabs,
where the problem complexity and the need for optimization
are much higher than those of current fabs.
The PI has been performing a research under NSC
support on search space reduction by combining design of
experiment (DOE) and simulation-based OO (OODOE). In
this three-year research project, the PI will adopt the salient
production scheduling/dispatching problems of 300mm
foundry fab as the conveyers and continue to advance his
research in both design of new methods and applications
to production. Specific objectives are
(1) to design search space reduction method for simulation-
based OO, (2) to develop these methods into tool modules
as part of an integrated system optimization platform, and to
apply simulation-based OO to effective production
scheduling of 300mm foundry fabs.
In the second year, we have completed the design of
OOBPI algorithm, including the theories for the method,
convergence analysis, simulation study and exploration of
possible extension to general dynamic programming. In
developing a simulator of semiconductor wafer fabrication
with differentiated services, we have incorporated priority
service discipline into the simulator.
In the third year, our goal is to combine OO with fab
simulators to study dynamic composition of production
schedules for fabs, including
O1. to indentify key fab performance metrics for
The modeling methodology then combines the single
priority node model with the open queueing network (OQN)
that Hu and Chang, 2003, developed into a priority OQN
model for a fab with multiple part types, multiple priorities,
failure prone machines, and re-entrant process flows. Hu
and Chang’s OQN models a no-priority fab as a failure-free
and re-entrant OQN of single aggregated part type. They
adopted a class of approximate decomposition methods to
decompose the OQN into independent network nodes and
use two types of parameters to characterize the stochastic
arrival, service and departure processes of each node: one
describing the rate and the other describing the variability.
Given nodal parameters () and process flow routing
matrix Q, relations among mean rates and inter-event time
SCVs of processes at individual nodes are summarized by
two sets of linear equations: traffic rate and traffic
variability equations.
In our methodology, there is an OQN network for
each priority. Individual priority networks are actually
coupled through competition of service nodes. The
coupling is handled by application of SDA procedure to
sequentially solving the equivalent service times of the
OQN models starting from the highest priority. Figure 3
gives an outline of the algorithm for baseline modelling of
the priority fab network. To fit the network model to
empirical fab behaviour data, one parameter is associated to
the right-hand-side (RHS) of a traffic variability equation as
the tuning parameter. Figure 4 depicts the model fitting
procedure, which is similar to that of fitting a single node
model.
To evaluate the hybrid priority network model, we
consider the small example of Figure 5. Figure 6 contrasts
the cycle times obtained by hybrid SDA+QNA and
simulation and there are good fits. Although there exists
some difference in standard deviation for priority 2, the
difference does not increase as the number of nodes
increases.
2.1.3 Model evaluation using fab example
Numerical experiments are also conducted on simple but
full-scale fab models [6] to examine the efficiency, accuracy
and application potential of hybrid decomposition
approximation-based queueing network modeling. Also
discrete event simulations are developed for validation of
the fab behavior model. These fab models have two parts
with two priorities classes, and the numbers of processing
steps of P1 and P2 are 32 and 60, respectively shown in
Figures 7 and 8. In a special fab model (SFM), all the
service times of a node have exponential distributions.
Other service node data is the same that shown in Table 1.
Node and system level cycle times of the SFM are listed in
Figure 9 and Table 2 respectively. The differences of mean
cycle times of two priorities and the cycle time standard
deviation of P2 are mostly within 3%. Although the
difference of cycle time standard deviation of P1 is high (up
to 45%), the absolute error is only 1.627.
In a general fab model (GFM), the service times of
individual nodes have general distributions, such as
uniform, erlang and exponential (see Table 1). Node and
system level cycle times of the GFM are given in Figure 10
and Table 3 respectively. The differences of mean cycle
times of two priorities and the cycle time standard deviation
of P2 are mostly within 10%. The cycle time standard
deviation of P1, has a high relative error of 55%. But again,
the absolute error, 1.214, is still very small as compared to
the mean.
Comparisons of numerical results with simulation in these
two fab models show that our network modeling
methodology has good approximations in most nodal and
system performances. However, application of hybrid
decomposition approximation to each model (listed in Table
4) only requires less than 4 seconds of CPU time on a 2.8
GHz personal computer. This leads to fast calculation with
respect to changes of system input options. Consequently,
both the accuracy and computing efficiency of hybrid
decomposition approximation-based network modeling
support its potential for applications of real fab with service
differentiation.
2.2.4 Remarks on applications
Responding to rapidly changing complex SSC requirements,
SSC planners/managers need an effective performance
evaluation/prediction tool to do what-if analysis between
SSC inputs and outputs. Given a set of priority mix,
capacity, mean and variability of wafer release, mean
service time and variability of tools, the hybrid
decomposition approximation-based network model allows
very quick evaluation of mean and variability of nodal and
fab performance metrics with good accuracy.
Effective evaluation of various input options in terms of
capacity allocation, priority mix, wafer release policy, tool
adjustment, etc. may serve as a behavior model for SSC
performance optimization. For example, the mean and
variability statistics at individual tool groups may also be
utilized by six-sigma management for on time and quick
delivery, where the mean values can be used to derive
control targets while variability values for calculation of
control limits.
2.3 Model for differentiated X-factor target setting
How to set differentiated X-factor targets to
production of various priorities poses a significant
application of our behavior models, where
=
( )
( _ , _ , _ ).
 average cycle timeX factor XF
raw process time
prod mix prio mix cap alloc
Namely, given a fab, the XF of the fab is a function,(.), of
product mix, priority mix and tool capacity allocations to
products and priorities. Detailed behavior models of(.) is
developed as follows.
2.3.1 Behavior models of XFs
D. P Martin, 1998, derived a contribution theory that
describes the contribution by XFs of individual processing
stage/tools to fab XF:
contract manufacturers (CMs) such as foundry fabs. We
choose reverse auction to model the decision behavior,
where the job order owner is the auctioneer while fabs are
the bidder. The auction process is depicted in Figure 6,
where the job order owner only has to offer a reward to job
processing, know the bidder-offered discount from the
reward and the beginning time/delivering time of each job;
there is no need for the auctioneer to know the objective
function and the capacity of the contract manufacturers.
In the reverse auction model, the auctioneer’s
objective is to minimize the cost of job processing (reward
minus bidder-offered discount) plus the fines of unassigned
jobs. Penalties of early and late deliveries are covered in
bidders’ contracts. The autioneer’s assignment problem is
nested with bidders’ bidding decisions. A bidder’s
objective is to maximize the profits by completing jobs
minus earliness and tardiness penalties of jobs. There are
two versions of the objective function, one with risk
consideration and the other without. For simplicity of
conveying ideas, it is assumed that a job has only single
operations. Given the offered discounts of individual jobs,
each bidder needs to solve a job scheduling problem and
determine the new bids (discounts on selected jobs) based
on the bidder’s scheduling results.
To model the decision processes, a simple greedy-
based assignment algorithm is designed for the auctioneer.
For bidders, both a Lagrange relaxation-based scheduling
algorithm and heuristic based simulation are developed. We
define the concept of an equilibrium solution to evaluate the
result, where an equilibrium solution is one that no single
bidder can benefit from changing the bidder’s bids given the
other bidders’bids. Numerical experiments show that the
auction will converge to an equilibrium solution in finite
iterations as designed.
Properties of the reverse auction model such as the
existence of an equilibrium and convergence in finite rounds
are analyzed. The reverse auction model is then used to
assess the effects of problem formulation and scheduling
algorithm. The study compares job assignments obtained by
using three different combinations of formulation and
scheduling algorithm: LR-based algorithm for the
deterministic formulation (D-LR), simulation and heuristic-
based scheduling algorithm for the deterministic formulation
(D-SH), and simulation and heuristic-based scheduling
algorithm for the stochastic formulation (S-SH). Numerical
experiments (Figures 19 and 20) with the three
combinations demonstrate that S-SH leads to lower discount
offers and higher bidder profits than the other two. Such
results imply that consideration of uncertainties in bidder’s
decision has a larger impact on performance of both bidders
and the auctioneer than optimality of the mean value-based
scheduling algorithm that a bidder adopts.
2.4 Conclusions
The third year combines OO with fab simulators to
study dynamic composition of production schedules for
fabs. We identified cycle time/X-factor and throughput as
key to performance for semiconductor supply chain
management. We Designed and developed a decomposition
approximation-based queueing network modeling
methodology capturing operation priority and variations in
fabs. We constructed a model for differentiated X-factor
target (XFT) setting with a focus on the relation between
priority XFT and capacity allocation. We also built reverse
auction-based decision models are developed for order
assignment/scheduling among fabs with a focus on the
gaming behavior. Preliminary OO-based simulation have
been conducted for optimization of fab scheduling.
三、參考文獻
[1] Y. C. Ho, R. S. Sreenivas, and P. Vakili, "Ordinal
Optimization of DEDS," Journal of Discrete-event Dynamic
Systems, Vol.2, No.2, pp. 61-88, 1992.
[2] B.-W. Hsieh, C.-H. Chen, S.-C. Chang, “Scheduling 
Semiconductor Wafer Fabrication by Using Ordinal
Optimization-based Simulation,” IEEE Trans. on Robotics
and Automation, Oct ,2001.
[3] B.-W. Hsieh, S.-C. Chang, C.-H. Chen, “Eficient Selection of 
Scheduling Rule Combination by Combining Design of
Experiment and Ordinal Optimization-based Simulation,” 
Proceedings of ICRA2003, Taipei, Sept., 2003.
[4] C.H. Chen, H. C. Chen, and E. Yucesan,”Computing Efforts
Allocation for Ordinal Optimization and Discrete Event
Simulation,”IEEE Transactions on Automatic Control, May
2000.
[5] Averill M. Law, and W. David Kelton, Simulation Modeling
and Analysis, McGraw-Hill, 1991.
[6] S. H. Lu, D. Ramaswamy, and P. R. Kumar, "Efficient
Scheduling Policies to Reduce Mean and Variance of Cycle-
Time in Semiconductor Manufacturing Plants, " IEEE
Transactions on Semiconductor Manufacturing, Vol. 7, No. 3,
August 1994.
[7]Bitran, G. R. and D. Tirupati, “Multiproduct queueing 
networks with deterministic routing: decomposition
approach and the notion of interference,” Management
Sci., 34 (1988), 75-100.
[8] G. Horvath, “Approximate Waiting Time Analysis of
Priority Queues”.
[9] M.-D. Hu, S.-C. Chang,“Translating Overall Production
Goals into Distributed Flow Control Parameters for
Semiconductor Manufacturing,” Journal of
Manufacturing Systems, Vol. 22, No. 1, 46-63, 2003.
[10]Amy H.I. Lee, He-Yau Kang, Wen-Pai Wang
“Analysis of priority mix planning for the fabrication of
semiconductors under uncertainty,”Int. J. Adv. Manuf.
Tech. (2006) 28: 351–361.
[11]W. Hopp, M. Spearman, Factory Physics, 2nd ed.,
MacGraw-Hill Higher Education, 2000.
[12]D. P. Martin,”The Advantage of Using Short Cycle
Time Manufacturing (SMC) Instead of Continuous Flow
Manufacturing (CFM),”Proc. of ASMC, 1998, pp.89-94.
[13]M. Kishimoto, K. Ozawa, K. Watanabe, and D. Martin,
“Optimized Operations by Extended X-Factor Theory
Including Unit Hours Concept”IEEE Transactions on
Semiconductor Manufacturing, vol. 14, no. 3, Aug.
2001.
[14] J. Robinson and F. Chance,” Dynamic X-Factor
application for Optimizing Lot Control for Agile
Manufacturing,”Proceedings of ISSM, Tokyo, Oct.
2002.
[15]P. Clarke, “Foundry broker sets up shop with 1st
Silicon, Tower, ZMD,” EE Times,
Figure 6: Mean and standard deviation of cycle time for
multi-nodes (2~5) with reentrant line
Enter 1  2  10
1  2  3  8 
1  2  10
1  2  11 5  2  3  8 
1  2  3  8  10
1  2  3  8 
1  2  6  2  9  12 Exit
Figure 7: Process Flow of P1 in 2-PR fab model
Enter 1  2  3  8  10
1  2  6 
1  2  3  8  9 
1  2  3  8  10
1  6  11 1  2  5 
1  2  3  8  9 
1  2  3  8  10
1  6  11 1  2  5 
1  2  3  8  9  10 11
1  2  4  8  3 
1  2  7  8  10
1  2  12 Exit
Figure 8: Process Flow of P2 in 2-PR fab model
Table 1: Service processes of nodes for general fab model
Node # ofMachines
Service Time
Distribution
MPT
(hr/lot)
Utilization
%*
1 1 Erlang Order 4 0.125 88.38
2 1 Exponential 0.125 85.23
3 1 Uniform 0.25 91.54
4 1 Erlang Order 3 1.8 68.18
5 1 Erlang Order 2 0.9 90.91
6 1 Erlang Order 4 0.6 83.33
7 1 Exponential 1.8 68.18
8 1 Erlang Order 3 0.2 80.81
9 1 Uniform 0.6 83.33
10 1 Erlang Order 2 0.3333 88.38
11 1 Exponential 0.6 83.33
12 1 Uniform 1.25 78.91
* Utilization % =
0.2525(# 1 )( )
#
100
0.3788(# 2 )( )
#
of P Visits MPT
of Machines
of P Visits MPT
of Machines
 
 
 
   
Figure 9: Mean & std. dev. of nodal cycle times (SFM)
Table 2: System level performance comparisons (SFM)
Mean Cycle Time Cycle TimeStandard Deviation
SDA+QNA 18.613 5.190
Simulation 18.572±0.014 3.5622±0.008
Absolute Error 0.041 1.627
1
Relative Error 0.22 % 45.68 %
SDA+QNA 172.78 54.674
Simulation 174.695±1.159 53.088±0.899
Absolute Error -1.915 1.586
2
Relative Error -1.10 % 2.99 %
Figure 10: Mean & std. dev. of nodal cycle times (GFM)
Priority 1 Mean Cycle Time
0
0.5
1
1.5
2
2.5
3
1 2 3 4 5 6 7 8 9 10 11 12
Node Index
Hours
SDA+QNA
Simulation
Priority 2 Mean Cycle Time
0
2
4
6
8
10
12
14
1 2 3 4 5 6 7 8 9 10 11 12
Node Index
Hours
SDA+QNA
Simulation
P1 Cycle Time Standard Deviation
0
0.5
1
1.5
2
2.5
1 2 3 4 5 6 7 8 9 10 11 12
Node Index
Hours
SDA+QNA
Simulation
P2 Cycle Time Standard Deviation
0
2
4
6
8
10
12
14
1 2 3 4 5 6 7 8 9 10 11 12
Node Index
Hours
SDA+QNA
Simulation
Priority 1 Mean Cycle Time
0
0.3
0.6
0.9
1.2
1.5
1.8
2.1
2.4
1 2 3 4 5 6 7 8 9 10 11 12
Node Index
Hours
SDA+QNA
Simulation
Priority 2 Mean Cycle Time
0
1
2
3
4
5
6
7
8
9
10
1 2 3 4 5 6 7 8 9 10 11 12
Node Index
Hours
SDA+QNA
Simulation
P1 Cycle Time Standard Deviation
0
0.2
0.4
0.6
0.8
1
1.2
1.4
1 2 3 4 5 6 7 8 9 10 11 12
Node Index
Hours
SDA+QNA
Simulation
P2 Cycle Time Standard Deviation
0
1
2
3
4
5
6
7
8
9
10
1 2 3 4 5 6 7 8 9 10 11 12
Node Index
Hours
SDA+QNA
Simulation
Mean Cycle Time
0
100
200
300
400
500
600
2 3 4 5
Number of Nodes
Unit Time
SDA+QNA 1
SDA+QNA 2
Simulation 1
Simulation 2
Cycle Time Standard Deviation
0
40
80
120
160
200
240
280
2 3 4 5
Number of Nodes
Unit Time
SDA+QNA 1
SDA+QNA 2
Simulation 1
Simulation 2
Cost at Each Stage
0
2
4
6
8
1 2 3 4 5 6 7 8 9 10 11 12
Machine Group
C
os
t(
$$
)
Figure 17: Cost at each node
Figure 18: Reverse auction-based order assignment
Figure19: The flowchart of a reverse auction
high loading intensity
0
2
4
6
8
10
12
1 8 15 22 29 36 43 50 57 64 71 78 85 92 99
job
di
sc
ou
nt
D-LR D-SH S-SH
Figure 20: Discount for each job under high loading
intensity
MASM2005, Oct. Singapore
result can then be communicated to the coordination mechanism as a “bid”. The coordination mechanism or an
“auctioneer”is a bid processor that makes resource allocation based on an iterative auction process using the
bidding information.
Karabuk and Wu [9] examined issues of a decentralized coordination scheme between capacity reservation by
marketing managers and capacity allocation to competing marketing managers by manufacturing managers. The
authors compared the gap between a centralized and decentralized allocation models, evaluated the price of
decentralization and proposed an information exchange principle. Jin and Wu then [10] performed asymmetric
information analysis and a third-party intermediary design over a two-supplier, one-buyer system, where the DMs’ 
costs are private information while each supplier’s cost is knownprobabilistically. Channel coordination can be
achieved with a two-part contract auction where the buyer announces a price-sensitive order function, and the
suppliers compete in an ascending-bid side-payment auction. the third-party intermediary prevents the buyer from
manipulating the order function and truthfully transferring the market demand function to the suppliers.
In this paper, we consider the modeling of job order assignment from a job owner to a few qualified foundry fabs
and adopt a reverse auction-based mechanism [2, 7] for modeling the job competition and assignment decisions. A
job order owner announces job requirements and payments for fabs to bid on while qualified fabs bid on a job by
offering the discount to payment and the processing schedule of the job. This model aims at capturing the non-
cooperative gaming among the job owner and the fabs because of the private information such as objectives,
valuation of jobs, available capacity and constraints. In addition to a mathematical formulation of the reverse
auction problem for job assignment by the job order owners to individual fabs, this paper will also develop the
corresponding decision algorithms for individual DMs as part of the model. Properties of the solution to the reverse
auction algorithm will also be analyzed.
The remainder of the paper is organized as follows. Section 2 first gives an integer programming problem
formulation of the reverse auction problem. Section 3 then develops the complete and iterative solution algorithms,
which includes three parts: (1) a Lagrange relaxation-based scheduling algorithm for individual fabs to select and
schedule their jobs-to-bid, (2) a simple fixed increment scheme of discount offers for jobs-to-bid and (3) the best-bid
job assignment by the job owner. Section 4 then presents preliminary analysis and evaluation of the reverse auction
model. Finally, section 5 gives some concluding remarks.
II. Problem Formulation
A. Problem Description
Consider a contract manufacturing environment, where there is a job provider who offers a set of jobs and calls for
bids from a few fabs to process the jobs. This paper assumes a simplified problem, where each job has only one
operation and requires a certain processing time of a unit capacity from a foundry service provider. The job
processing is non-preemptive; that is, once a job is started, no interruptions are allowed until completion. A job can
only be assigned to one fab at a time. Each job has a
time window for processing between its release date
and due date. If a job is started before the release
date or delivered after the due date, there will be a
penalty incurred on the foundry service provider. We
assume that jobs under consideration are already
available for processing.
The job provider out-sources the job processing to
qualified fabs and sets for the processing of each job
a maximum payment. The fabs are competitive to
each other. Each fab has its own private information
such as the actual capacity, the job processing cost,
the valuation of getting a job and its objective
function. Without knowing such private information
of fabs, the job provider cannot do centralized job
scheduling. Auction-based job scheduling
mechanisms are therefore frequently adopted.
In this paper, we consider a reverse auction-based
mechanism. The objective of the job provider
(auctioneer) is to minimize its payment cost of
completing all the jobs in hand plus the penalty cost
of unassigned jobs, if any. By distributing job
start
Auctioneer announces all the
job information to the bidders.
According to the job information, each bidder computes its
objective function and sends the offers to the auctioneer.
According to the offers from each bidder, auctioneer computes
its objective function and makes a temporary assignment.
Each bidder receives the current assignment and sees whether
it can get larger profit by bidding more jobs.
Stop bidding.
end
N
Y
Figure 1: Flowchart of a Reverse Auction
MASM2005, Oct. Singapore
The objective function consists of the payment cost of completing all the jobs in hand plus the penalty cost of
unassigned jobs. Combined with the constraints above, the auctioneer’s decision problem (ADP) is
(ADP) ( ) (1 )ik i i ik ix
i k i k
Minimize X v X f     (6)
Subject to constraints (1) to (5).
C. Bidder’s Decision Problem Formulation
When bidders receive the job and bid information, they must decide which jobs to bid on at what discount offer,
when to begin and end. Bidders compete for jobs by offering discounts to the payment of job processing; the higher
the discount, the lower the job processing cost to the auctioneer but the lower the profit margin to the bidder. Once
a bidder is assigned a job, the bidder is responsible for delivery within the desired time window and has to take the
penalty for earliness or tardiness in delivery by contract. A bidder’s objective is to maximize the bidder’s profit,
which equals to the payments from processing the winning jobs minus earliness/tardiness penalties if any.
Let the decision variable of a bidder be { , , }iktB k t as defined in (2) and { , }ktC t be the capacity over time, which
is private information of bidder k. Assume that a fab bids within its capacity, that is the number of jobs bid does
exceed the capacity at any time. A bidder bids on a job at most once.
Capacity Constraint
1
, , .
i
t
ikt kt
i t p
B C k t
 
  (7)
One Beginning Time per Job Constraint
1, .ikt
t
B i  (8 )
In order to be accepted by the job provider, a new discount offer on bidding a job must be higher than the currently
announced discount for the job.
Increasing Offer Constraint
, .ik i i   (9)
As a job i is not available before its earliest starting date iES , the bid on a job cannot go before the available time
of the job. So,
Earliest Starting Time Constraint
, .ikt i
i
B ES t t   (10)
In our problem, we assume that the earliest starting date is one for all the jobs.
The objective function of a bidder consists of two terms. The first is from processing a job and equals the maximum
payment minus the offered discount and the cost of job processing. The second term corresponds to the earliness and
tardiness penalty as shown in Figure 3 [11]. Note that there is a jump in the tardiness penalty once the delivery is
late. A bidder’s decision problem (BDP) is then
(BDPk) k=1,…,K
,,
2
max ( ) [ ( )]
{ max(0, ) max(0, ( )) ( )}
ikt ik
k ikt ik ikt i ik ikB
t i
ikt i i i ik i i ik i
t i
U B B v
B r D t d t p D Step t p D

  


   
       


(11)
Subject to (2) and (7)-(10).
III. Solution Methodology
In the problem formulation above, the bidder’s problem has both scheduling and“pricing”decisions in (BDP). The
decisions are made in two stages. A bidder first decides which jobs to bid on by solving for the scheduling decisions
of BDP based on the currently announced discounts, { }i , of individual jobs. A bidder would schedule as many
MASM2005, Oct. Singapore
(D)
{ } 0
max
t
t t i
t i
L C L



   .
The solution method of the dual problem then follows that of [13] as sketched in the following descriptions.
1) Initialize 0,t t  , and set an iteration counter n=0. Solve (JSPi) i=1,…,I, by searching through the
admissible values of ib . The optimal beginning time of job i, ib
, is the one yielding the lowest value of iL . The
computational complexity of this search procedure is linear in T. Note that the earliest starting date constraint
can be easily accommodated by requiring ib to lie between the earliest starting date of job i and T-pi+1.
2) Once { ib
, i=1,…,I} is obtained, the Lagrange multipliers { , }t t   are then updated according to a sub-
gradient method [13] for solving the dual problem (D),
1 ( ),n n n ng     
where g(i) is the sub-gradient of L with respect to the Lagrange multipliers and the step sizen at the nth
iteration is calculated by
( ) ( )
n
n
n T n
L L
g g
 
 
 0 2  ,
where L is an estimation of the optimal solution, and nL is the value of L at the nth iteration.
Although this method converges to the dual optimal [13], there is no guarantee of feasibility, i.e., some capacity
constraints may be violated in the dual solution. The value of the dual problem Lis a lower bound on J.
To construct a feasible schedule from the optimal dual solution, a greedy heuristic is adopted. The feasibility
adjustment is done sequentially over time. If the capacity constraint is violated at time t, the heuristic calculates, for
jobs with beginning time at time t, the individual weighted tardiness penalties if their beginning time is delayed to
time t+1. The heuristic then assigns jobs to the available capacity of time t in the descending order of their tardiness
penalties. The remaining jobs are delayed by one time unit and are considered together with those jobs originally
scheduled to start at time t+1. Such a procedure repeats over the whole time horizon and leads to a feasible
schedule. Once a feasible solution is obtained, the corresponding value of the objective function J is an upper
bound on the optimal objective function J.
Note that a job may not be profitable after the feasibility adjustment of the schedule. Once a feasible schedule is
obtained, the bidder keeps only profitable jobs as the jobs-to-bid. The discount offer of each job-to-bid must
increase from one round to the next. We assume a least quantum increase, , uniformly across all the jobs and
bidders. So a bidder will offer a new discount for a job-to-bid i by
' , if is a job-to-bid,
0, otherwise.
i
i
i  

.
Let '{ , }ik i  be the discount offer by bidder k.
The auctioneer decides on the new temporary job assignment by
'1, if arg max{ , '}; , .
0, otherwise
ik
ik
k k
X i k
  

If the assignment of the previous round belongs to the solution set of this round, the auction terminates. If not,
further rounds are needed. When there is a tie in discount offers among bidders for an object, a random selection is
used to break the tie. The discount offers { , }i i  are then updated based on the offers of the assigned bidders.
Multi-operation jobs can be included into the problem formulation and algorithmic framework by replacing the
bidder’s single-operation job scheduling problem (JSPi) with multi-operation job scheduling [12, 13].
IV. Performance Analysis and Evaluation
We now investigate the properties of the reverse auction algorithm. We first analyze if the solution algorithm
terminates in finite steps and the property of the solution. We then perform numerical study to evaluate the the
reverse auction algorithm.
A. Convergence Analysis
To examine the termination of the algorithm, let us consider the profit of bidder k by bidding on job i
2[ max(0, ) max(0, ( )) ( )].ik i ik ik i i i ik i i ik ipf v r R t d t p D Step t p D            
MASM2005, Oct. Singapore
possibility of counter biddings (the number of bid options) increases and leads to the increase of auction rounds.
Interested readers may refer to [14] for detailed data set and results.
C1) Number of bidders
In this case, we change the number of bidders but fix the number of jobs. We compare a 2-bidder and a 4-bidder
examples, both with 25 jobs. The 2 bidders of the 2-bidder example have the same parameters as bidder 3 and 4 in
the 4-bidder example. In the 4-bidder auction, it takes 12 rounds to complete the auction while it takes 6 rounds in
the 2-bidder auction. Results of C1 match our conjecture.
C2) Number of jobs
In this case, we consider 13 and 25 jobs for the same 4 bidders. The 13 jobs is a subset of the 25 jobs. The bidder
and job data is the same as that of C1. In the 25-job auction, it takes 12 rounds to complete the auction while it
takes 7 rounds in the 13-job auction. Results of C2 also match our conjecture.
V. Concluding Remarks
Motivated by foundry service provisioning in the semiconductor industry, this paper adopted a reverse auction-
based mechanism to model job order assignment between an job owner and a few qualified fabs, i.e., foundry
service providers. The model captures the non-cooperative gaming due to private information among the job owner
and the fabs such as objectives, valuation of jobs, available capacity and constraints. In addition to a mathematical
formulation of the reverse auction problem for job assignment, solution algorithms for both bidder and auctioneer
are proposed to model the job assignment decision of the job order owner and the production scheduling decision of
the fabs. A simple analysis has shown that the auction algorithm converges to an equilibrium, where no single
bidder would unilaterally deviate from the auction result. Preliminary numerical study demonstrates that the bidder
scheduling finds near optimal and the number of auction rounds increases with respect to the number of jobs and the
number of bidders respectively.
References
1. Y.-H. Su, R.-S. Guo, and S.-C. Chang, “Virtual fab: an Enabling Framework and Dynamic Manufacturing
Service Provision Mechanism,” Information & Management, 42(2), pp.329-348, January 2005.
2. M. Fan, J. Stallaert, and A. B. Whinston, “Decentralized Mechanism Designfor Supply Chain Organizations
Using an Auction Market”, Information Systems Research, Vol. 14, No. 1, p.1-22, March 2003.
3. P.-B. Luh, M. Ni, H. Chen, and L. S. Thakur, “Price-Based Approach for Activity Coordination in a Supply
Network,”IEEE Transactions on Robotics and Automation, Vol. 19, No. 2, p.335-346, April 2003.
4. D. P. Bertsekas, “The Auction Algorithm fo Assignment and Other Network Flow Problems: A Tutorial,”
Interfaces, Vol. 20, pp. 133-149, 1990.
5. D. Sarne, M. Hadad, and S. Kraus, “Auction Equilibrium Strategies for Task Allocation in Uncertain
Environments,”Proceedings of ECAI 2004.
6. P. R. Milgrom and R. J. Weber,“A Theory of Auctions and Competitive Biddings,”Econometrica, 50(5):1089-
1122, 1982.
7. S. de Vries, R. V. Vohray, “Combinatorial Auctions: a Survey,”INFORMS Journal on Computing, 2001.
8. E. Kutanoglu and S. D. Wu, “On Combinatorial Auction and LagrangeanRelaxation for Distributed Ressource
Scheduling”, IIE Transactions, 31,813–826, 1999.
9. S. Karabuk and S.D. Wu, "Decentralizing Semiconductor Capacity Planning via Internal Market Coordination,"
IIE Transactions; September 01, 2002.
10. M. Jin and S.D. Wu,"Coordinating Supplier Competition via Auctions," http://www.lehigh.edu/ ~sdw1/jin1.pdf,
August 2004.
11. D. Yu, P. B. Luh, S.-C. Chang, “Achieving Six Sigma Deliveries in Supply Chains,”Proceedings of the 16th
IFAC World Congress, Prague, July 4-8, 2005.
12. D. J. Hoitomt, P.-B. Luh, and K. R. Pattipati,“A Practical Approach to Job- Shop Scheduling Problems,”IEEE
Transactions on Robotics and Automation, Vol.9, No.1, p.1-13, February, 1993.
13. X. Zhao, P. B. Luh, J. Wang, “The Surrogate Gradient Algorithm for Lagrangian Relaxation Method,” Journal
of Optimization Theory and Applications, 100(3), March 1999, pp. 699-712.
14. M.-M. Hsieh, “Reverse Auction-based Job Scheduling for Contract Manufacturing,”MS Thesis, Dept. of
Electrical Engineering, National Taiwan University, Taipei, Taiwan, June 2005.
MASM2005, Oct. Singapore
result can then be communicated to the coordination mechanism as a “bid”. The coordination mechanism or an
“auctioneer”is a bid processor that makes resource allocation based on an iterative auction process using the
bidding information.
Karabuk and Wu [9] examined issues of a decentralized coordination scheme between capacity reservation by
marketing managers and capacity allocation to competing marketing managers by manufacturing managers. The
authors compared the gap between a centralized and decentralized allocation models, evaluated the price of
decentralization and proposed an information exchange principle. Jin and Wu then [10] performed asymmetric
information analysis and a third-party intermediary design over a two-supplier, one-buyer system, where the DMs’ 
costs are private information while each supplier’s cost is knownprobabilistically. Channel coordination can be
achieved with a two-part contract auction where the buyer announces a price-sensitive order function, and the
suppliers compete in an ascending-bid side-payment auction. the third-party intermediary prevents the buyer from
manipulating the order function and truthfully transferring the market demand function to the suppliers.
In this paper, we consider the modeling of job order assignment from a job owner to a few qualified foundry fabs
and adopt a reverse auction-based mechanism [2, 7] for modeling the job competition and assignment decisions. A
job order owner announces job requirements and payments for fabs to bid on while qualified fabs bid on a job by
offering the discount to payment and the processing schedule of the job. This model aims at capturing the non-
cooperative gaming among the job owner and the fabs because of the private information such as objectives,
valuation of jobs, available capacity and constraints. In addition to a mathematical formulation of the reverse
auction problem for job assignment by the job order owners to individual fabs, this paper will also develop the
corresponding decision algorithms for individual DMs as part of the model. Properties of the solution to the reverse
auction algorithm will also be analyzed.
The remainder of the paper is organized as follows. Section 2 first gives an integer programming problem
formulation of the reverse auction problem. Section 3 then develops the complete and iterative solution algorithms,
which includes three parts: (1) a Lagrange relaxation-based scheduling algorithm for individual fabs to select and
schedule their jobs-to-bid, (2) a simple fixed increment scheme of discount offers for jobs-to-bid and (3) the best-bid
job assignment by the job owner. Section 4 then presents preliminary analysis and evaluation of the reverse auction
model. Finally, section 5 gives some concluding remarks.
II. Problem Formulation
A. Problem Description
Consider a contract manufacturing environment, where there is a job provider who offers a set of jobs and calls for
bids from a few fabs to process the jobs. This paper assumes a simplified problem, where each job has only one
operation and requires a certain processing time of a unit capacity from a foundry service provider. The job
processing is non-preemptive; that is, once a job is started, no interruptions are allowed until completion. A job can
only be assigned to one fab at a time. Each job has a
time window for processing between its release date
and due date. If a job is started before the release
date or delivered after the due date, there will be a
penalty incurred on the foundry service provider. We
assume that jobs under consideration are already
available for processing.
The job provider out-sources the job processing to
qualified fabs and sets for the processing of each job
a maximum payment. The fabs are competitive to
each other. Each fab has its own private information
such as the actual capacity, the job processing cost,
the valuation of getting a job and its objective
function. Without knowing such private information
of fabs, the job provider cannot do centralized job
scheduling. Auction-based job scheduling
mechanisms are therefore frequently adopted.
In this paper, we consider a reverse auction-based
mechanism. The objective of the job provider
(auctioneer) is to minimize its payment cost of
completing all the jobs in hand plus the penalty cost
of unassigned jobs, if any. By distributing job
start
Auctioneer announces all the
job information to the bidders.
According to the job information, each bidder computes its
objective function and sends the offers to the auctioneer.
According to the offers from each bidder, auctioneer computes
its objective function and makes a temporary assignment.
Each bidder receives the current assignment and sees whether
it can get larger profit by bidding more jobs.
Stop bidding.
end
N
Y
Figure 1: Flowchart of a Reverse Auction
MASM2005, Oct. Singapore
The objective function consists of the payment cost of completing all the jobs in hand plus the penalty cost of
unassigned jobs. Combined with the constraints above, the auctioneer’s decision problem (ADP) is
(ADP) ( ) (1 )ik i i ik ix
i k i k
Minimize X v X f     (6)
Subject to constraints (1) to (5).
C. Bidder’s Decision Problem Formulation
When bidders receive the job and bid information, they must decide which jobs to bid on at what discount offer,
when to begin and end. Bidders compete for jobs by offering discounts to the payment of job processing; the higher
the discount, the lower the job processing cost to the auctioneer but the lower the profit margin to the bidder. Once
a bidder is assigned a job, the bidder is responsible for delivery within the desired time window and has to take the
penalty for earliness or tardiness in delivery by contract. A bidder’s objective is to maximize the bidder’s profit,
which equals to the payments from processing the winning jobs minus earliness/tardiness penalties if any.
Let the decision variable of a bidder be { , , }iktB k t as defined in (2) and { , }ktC t be the capacity over time, which
is private information of bidder k. Assume that a fab bids within its capacity, that is the number of jobs bid does
exceed the capacity at any time. A bidder bids on a job at most once.
Capacity Constraint
1
, , .
i
t
ikt kt
i t p
B C k t
 
  (7)
One Beginning Time per Job Constraint
1, .ikt
t
B i  (8 )
In order to be accepted by the job provider, a new discount offer on bidding a job must be higher than the currently
announced discount for the job.
Increasing Offer Constraint
, .ik i i   (9)
As a job i is not available before its earliest starting date iES , the bid on a job cannot go before the available time
of the job. So,
Earliest Starting Time Constraint
, .ikt i
i
B ES t t   (10)
In our problem, we assume that the earliest starting date is one for all the jobs.
The objective function of a bidder consists of two terms. The first is from processing a job and equals the maximum
payment minus the offered discount and the cost of job processing. The second term corresponds to the earliness and
tardiness penalty as shown in Figure 3 [11]. Note that there is a jump in the tardiness penalty once the delivery is
late. A bidder’s decision problem (BDP) is then
(BDPk) k=1,…,K
,,
2
max ( ) [ ( )]
{ max(0, ) max(0, ( )) ( )}
ikt ik
k ikt ik ikt i ik ikB
t i
ikt i i i ik i i ik i
t i
U B B v
B r D t d t p D Step t p D

  


   
       


(11)
Subject to (2) and (7)-(10).
III. Solution Methodology
In the problem formulation above, the bidder’s problem has both scheduling and“pricing”decisions in (BDP). The
decisions are made in two stages. A bidder first decides which jobs to bid on by solving for the scheduling decisions
of BDP based on the currently announced discounts, { }i , of individual jobs. A bidder would schedule as many
MASM2005, Oct. Singapore
(D)
{ } 0
max
t
t t i
t i
L C L



   .
The solution method of the dual problem then follows that of [13] as sketched in the following descriptions.
1) Initialize 0,t t  , and set an iteration counter n=0. Solve (JSPi) i=1,…,I, by searching through the
admissible values of ib . The optimal beginning time of job i, ib
, is the one yielding the lowest value of iL . The
computational complexity of this search procedure is linear in T. Note that the earliest starting date constraint
can be easily accommodated by requiring ib to lie between the earliest starting date of job i and T-pi+1.
2) Once { ib
, i=1,…,I} is obtained, the Lagrange multipliers { , }t t   are then updated according to a sub-
gradient method [13] for solving the dual problem (D),
1 ( ),n n n ng     
where g(i) is the sub-gradient of L with respect to the Lagrange multipliers and the step sizen at the nth
iteration is calculated by
( ) ( )
n
n
n T n
L L
g g
 
 
 0 2  ,
where L is an estimation of the optimal solution, and nL is the value of L at the nth iteration.
Although this method converges to the dual optimal [13], there is no guarantee of feasibility, i.e., some capacity
constraints may be violated in the dual solution. The value of the dual problem Lis a lower bound on J.
To construct a feasible schedule from the optimal dual solution, a greedy heuristic is adopted. The feasibility
adjustment is done sequentially over time. If the capacity constraint is violated at time t, the heuristic calculates, for
jobs with beginning time at time t, the individual weighted tardiness penalties if their beginning time is delayed to
time t+1. The heuristic then assigns jobs to the available capacity of time t in the descending order of their tardiness
penalties. The remaining jobs are delayed by one time unit and are considered together with those jobs originally
scheduled to start at time t+1. Such a procedure repeats over the whole time horizon and leads to a feasible
schedule. Once a feasible solution is obtained, the corresponding value of the objective function J is an upper
bound on the optimal objective function J.
Note that a job may not be profitable after the feasibility adjustment of the schedule. Once a feasible schedule is
obtained, the bidder keeps only profitable jobs as the jobs-to-bid. The discount offer of each job-to-bid must
increase from one round to the next. We assume a least quantum increase, , uniformly across all the jobs and
bidders. So a bidder will offer a new discount for a job-to-bid i by
' , if is a job-to-bid,
0, otherwise.
i
i
i  

.
Let '{ , }ik i  be the discount offer by bidder k.
The auctioneer decides on the new temporary job assignment by
'1, if arg max{ , '}; , .
0, otherwise
ik
ik
k k
X i k
  

If the assignment of the previous round belongs to the solution set of this round, the auction terminates. If not,
further rounds are needed. When there is a tie in discount offers among bidders for an object, a random selection is
used to break the tie. The discount offers { , }i i  are then updated based on the offers of the assigned bidders.
Multi-operation jobs can be included into the problem formulation and algorithmic framework by replacing the
bidder’s single-operation job scheduling problem (JSPi) with multi-operation job scheduling [12, 13].
IV. Performance Analysis and Evaluation
We now investigate the properties of the reverse auction algorithm. We first analyze if the solution algorithm
terminates in finite steps and the property of the solution. We then perform numerical study to evaluate the the
reverse auction algorithm.
A. Convergence Analysis
To examine the termination of the algorithm, let us consider the profit of bidder k by bidding on job i
2[ max(0, ) max(0, ( )) ( )].ik i ik ik i i i ik i i ik ipf v r R t d t p D Step t p D            
