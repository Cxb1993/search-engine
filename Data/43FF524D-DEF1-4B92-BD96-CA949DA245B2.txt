1 
 
摘要 
當今台灣在硬體製造業已經相當有成就，但嵌入式系統設計與發展製程將會是我們台灣
ICT 產業下一個重要的方向。而重點將關注於如何建立嵌入式系統的高階抽象設計，以及運
用模型的塑造與組合來開發更複雜的系統，這提供了我們研究方向的參考。而計畫中也顯示出
許多成果作為我們計劃在建立理論與實務上的良好基礎。我們藉各子計劃確認了目前重要的技
術與標準，涵蓋了塑模、軟體開發流程、嵌入式系統平台、系統設計與模擬等方面，也將在此
子計畫探討整合之重要性。 
本子計劃實作出支援多核心嵌入式軟體設計之多重觀點整合模型與可再用元件庫
(VMC_MUM)，分析了XML-based Unified Model 在嵌入式系統中之限制及元件再利用，以O.O. 
Technologies 作為基礎，主要原因是目前OO 分析及設計語言如UML 及相關OO 程式語言，
如Java，C++已被廣泛的接受與使用，本子計劃分析了重觀點整合模型與可再用元件庫： 第一
是使用先前在XML為基礎的軟體標準整合模型研究的成果，定義出一個以模型為基礎之XML 
系統文件描述模型，稱為XML-based Unified Model Metamodel。 二是使用Reusable Design 
Component Repository，藉由元件式資料庫之再利用性來提高軟體品質及產能。最後透過本子
計畫的Unified and Integration Model 作各子計劃之間的銜接與資訊交換。將各子計畫所採用不
同之標準整合後，透過一致的表現方式以及整合鏈結(Integration Links)的串接，有效達到跨階
段、觀點間相關連資訊的串接與再用。 
在這個子計畫中，我們實作出一個支援多核心嵌入式軟體設計之多重觀點整合模型與可再
用元件庫(VMC_MUM)及與物件分析、設計、程式之整合及維護的議題。這個子計畫已初步達
成： 
I. 設計Unified Model 支援整個VMC 計畫之軟體生命週期 
II. 從實務中來設計多核心嵌入式軟體設計(VMC)之限制、實作、衝突及分析 
III.設計及開發支援Repository 及Unified Model Schema 之Editor 
IV. Multi-view 支援各階段之模型及整合 
關鍵詞: 嵌入式系統,元件再利用,統一塑模語言,系統塑模語言,統一塑模,自由軟體,工具,多重觀
點,整合 
3 
 
一、 前言  
近幾年來，有感於目前在嵌入式系統開發流程(Software Process)是屬於土法煉鋼型，在
每一個階段(Phase)，並無科學量化的標準，所以當開發時雖然看似容易做到，卻因為沒有
一套標準存在，且階段之前也無連貫及整合的考量機制存在，因而浪費許多時間在整合及
驗證上。本計劃希望能從需求分析 (Requirement Analysis)、規劃設計 (Design)、實作
(Implementation)一直到測試(Testing)、維護(Maintenance)各階段來建置一套標準一致且完整
的標準流程，並且使用重用(Reuse)技術，減少往後嵌入式系統開發之時程。 
軟體的生命週期一般而言包含了需求、設計、實作、測試及維護五個階段，在這些階
段裡可以利用許多的軟體標準以降低軟體開發本身的複雜度。然而當我們使用某個標準於
某階段時所造成的改變，可能會帶來其他階段所使用的標準也連帶的需要作改變的問題。
在整個軟體開發週期裡，開發團隊裡的成員會根據特殊的需求或個人的經驗法則導入不同
的軟體標準。但是所引發的結果卻是標準與標準之間的不相容(Incompatibility)，這樣的結
果往往會帶來許多問題，若使用的軟體輔助開發系統工具互相整合有難處，彼此間無協調
整合機制，所帶來的不確定因素讓開發者之發展環境持續在改變而使其無所適從，軟體開
發方法、軟體開發流程與軟體輔助開發工具無法相互整合，以致於不能發揮整體功效。軟
體的開發與維護相當的不易，也因此至目前為止已有許多的組織及相關領域的專家制定並
提出了軟體標準，其目的就是提昇軟體的品質。但沒有一種軟體標準及模型可以涵蓋軟體
開發過程中的每個階段，因此我們必須要開發一套專屬於嵌入式系統的軟體工程方法來處
理上述可能發生的問題。綜觀目前整個嵌入式系統軟體設計方面各個階段之間的關係，在
整合技術方面並無一套標準步驟以及應用的工具，會在開發的過程中將會產生許多不必要
的成本，就有可能導致產出功能與原始需求不盡相同的產品仍勉強上架。並且也須考慮到
跨各階段間的連續性與一致性，往往以人工方式檢視並協調整合來自不同的標準、方法及
應用及工具之來源資料，更因為開發經驗難以學習累積，使得嵌入式系統開發的成本居高
不下且品質浮動。並且，不同設計之間的統合、細部分工等作業程式，使得嵌入式系統開
發與研究者無法以一個一致性、協同性的開發方式進行軟體系統的開發作業。此外因為系
統會因不同硬體、不同 OS、不同平台而有所變化，功能亦因價格、硬體資源問題有所增減
及不同，而使得整個軟體開發及維護困難重重。 
目前自由軟體相關學者都認為嵌入式應用技術需要一個很方便使用的開發平台，然而
在此方面人才還是相當缺乏，嵌入式系統並非要求全能，但必須能夠依據系統設計規格，
有效率的發揮出硬體的運算功能，使得產品達到效率/價格比的最佳化。大多數的學者都是
應用免費授權的 Embedded Linux 作業系統來開發新的系統，但他們著重在於嵌入式系統
軟體實作(Implementation)的功能方面。整體來考量，像是整合(Integration)的問題，例如怎
麼讓嵌入式系統符合軟體工程生命週期中的產物 (Artifact)做整合及產物之間之追蹤
(Traceability)及一致性(Consistency)。因此，實際上大多數的嵌入式系統採取的方式為土法
煉鋼，依照客戶之需求開發系統，較無一套流程規範。且使用自然語言(Natural Language)
的文字格式撰寫需求檔，此類需求文件檔案會充滿模擬兩可 (Ambiguity)、不一致
(Inconsistency)、不精確(Imprecision)及不完整(Incompleteness)的情形，造成整合的困難。除
此之外，由於缺少精確的模型能力(Modeling)，使得想要整合或追蹤其他階段的產物只能倚
賴人工(Manual Effort)，而造成時間上的浪費以及容易發生錯誤。為了讓軟體工程能夠有效
的應用在實際的嵌入式系統之案例上，多核心嵌入式系統程式設計之整合模型(Model)需要
做深入的探討與研究。 
近年學者 Elvinia Riccobene 及 Alberto Rosti 提出針對嵌入式系統的統一流程(Unified 
Process for Embedded Systems, UPES)，這份研究主要定義出一套以統一塑模語言 UML 2.0 
5 
 
資訊交換。將各子計畫所採用不同之標準整合後，透過一致的表現方式以及整合鏈結
(Integration Links)的串接，有效達到跨階段、觀點間相關連資訊的串接與再用。 
1 MCES Unified Model Description 
本子計畫的理論基礎是在 XML 為基礎的軟體標準整合模型(XUM)研究成果
之上。在此，本子計畫建立一個新的 XML-Based Unified Model(XUM)，它較原
XUM 新增了幾個針對多核心嵌入式軟體項目： 
1. 建立多重觀點間一致性確認(Consistency Checking)的機制，並透過在模
型資訊中新增前置條件(Pre-Condition)與後置條件(Post-Condition)等項目
做為支援。 
2. 處理硬體限制與軟體開發之間的衝突，透過限制衝突解決資訊加以處理。 
3. 利用硬體平台相依(Platform Dependent)與非相依(Platform Independent)
來做為各種觀點的主要分類特性。 
為了建立這樣的一個XUM，我們定義了一個以模型為基礎之XML系統
文件描述模型，稱之為XML-Based Unified Model Metamodel(XUMM)。它描
述出Unified and Integration Model的輪廓(Schema)，同時讓我們可以合併
(Consolidate)、協同(Coordinate)在軟體週期各階段中，以不同軟體標準建置
的模型圖的模型資訊。 
 
2 MCES Reusable Design Component Repository 
針對VMC_MUM各相關功能進行模組化之關聯性探討、模組分析與設計、整
合分析、原型發展後，設計一套具轉換性質的平台。VMC_MUM中前述各模組間
之關係整體而言，其本架構之組織運作功能與設計目的，可區分為二個階段(Stages)
相互銜接，概略說明如下：在第一階段－產生出再使用軟體元件 (Reusable 
Components，RC)，與蒐集程式的知識並產生原始述語(Primitive Predicate)，我們
用來替Reusable Components建立正規化的知識，使其成為正規化軟體元件(FRC)
及定義相關之推理規則，並將程式Artifacts及FRC存入相對的Reuse Component 
Library中，藉由搜尋樹產生Artifacts，並且完成正規化之再使用元件 (Formal 
Reusable Components, FRC)，然後儲存至再使用程式庫中，並以一有效率的元件
存取機具(Library Retrieving Tool, LRT)，提供後續擷取所需；第二階段－XUM之
轉換及傳遞，在XUM裡的整合鏈結提供了各類模型的整合機制，如果模型間存在
著抽象關係，XUM會記錄該模型間的抽象鏈結，而接收此XUM資訊之子計畫將
會建立跨階段之相關聯資訊分析與連結，並支援跨階段相關聯資訊間的追蹤需求。 
 
3 Modeling Traceability & Integration Management 
在XUM的理論中提出一個方法用以整合所有的標準於一個基礎於XML的整
合模型。在該方法中描述軟體模型如何整合以達成彼此的對映關係及交換性。而
經過整合的軟體模型即XML-Based Unified Model(XUM)。本子計畫利用此理論方
法並實作出一個統一模型軟體工具(XUM Software Environment)以達成軟體開發
及維護中可追蹤性(Tractability)。而其他子計劃與本計劃的銜接方面，則是需要考
慮到每一個子計劃所規劃、分析、實作出的Model及Source Code，利用XMI(XML 
Metadata Interchange)一種基於XML的資料交換格式，將Model及Source Code經過
7 
 
能確保滿足使用者的所有需求。第二部份為資訊分類，我們透過使用者介面接收到的資料
分類，可依資料格式與類型分成 Classification Document, XML Document 與 Description 
Document 三部份，各部份將儲存不同的資訊： 
1. Classification Document：由使用者介面中接收到有關分類的資訊皆會儲存至此部
份，如專案名稱、階段選擇與圖形類型等。 
2. XML Document：由使用者上傳的 XML 檔案內容將會儲存於此部份。 
3. Description Document：使用者會對於專案與圖型檔案以自然語言進行描述，我們
將這些自然語言分類為此部份進行儲存。 
Classification 
Document
Description 
Document
XML Document
User Interface
XML Document 
Generator
XML Document 1
XML Document 2
XML Document 3
XML Document 4
XML Document Repository
Database
Embedded System 
Software Data 
 
圖 1、系統架構圖 
第三部份為 XML 文件產生，由使用者介面所接收到的資料，包含專案名稱、檔案名稱等，
透過第二部份的分析並將資料分類為 Classification Document, XML Document 與 Description 
Document 三部份後，依照資料庫的設計 XML Tag 儲存，最後資料整合成一個 XML 檔案存到
資料庫。而第四部份即為資料庫，資料庫的部份藉由使用者透過我們設計的使用者介面輸入在
各階段所產出以 XML 檔案以及其說明與相關資訊，我們接收到許多 XML 檔案與資訊，為了
整合所有資訊並以統一的方式儲存，我們制定了 XML 標籤(Tag)將接收到的資訊進行統一儲
存。 
在XML標籤的制定，我們將其分成三個部份：Classification Document, XML Document與
Description Document。Classification Document為描述分類相關的資訊，如階段與專案名稱，
9 
 
能。第三步驟則透過 XML 轉換器作文件的轉換，將使用者所輸入的再利用元件內容轉換成
XML 文件的格式以便儲存。第四步驟是透過 XML 產生器得到 XML 文件，透過 XML 文件的
擴展、結構、描述及確認等特性制定符合系統的 Tag 做結構性的描述。最後一個步驟是將產生
出的 XML 文件儲存至再利用元件庫，在本系統所使用的元件庫為原生型 XML 資料庫，透過
原生型 XML 資料庫的方便直接存取及配合許多 API，以提供查詢、檢索、更新資料庫等功能，
在整合時比較方便。 
 
圖 2、RCR Editor 系統架構圖 
 
 
再利用元件主要考量到類型、管理控制、系統架構圖、UML 圖、程式碼、程式語言、使
用的系統及硬體的限制等，其欄位對 XML 產生對應的 Element 及 Tag 如 Table 1 中所示：  
 
Table 1. 元件對應 XML 表 
XML Element XML Tag 
Type <type> 
ID <id> 
Name <name> 
Management Author <management_author> 
e-mail <management_e-mail> 
Version <management_version> 
Intent <intent> 
Structure <structure> 
UML <uml> 
Code <code> 
Programming Language <programming_language> 
Programming OS <programming_os> 
Hardware 
Constraint 
Power <hardware_constraint_power> 
Weight <hardware_constraint_weight> 
Cost <hardware_constraint_cost> 
Memory <hardware_constraint_memory> 
Screen size <hardware_constraint_screen_size> 
Bandwidth <hardware_constraint_bandwidth> 
Other <hardware_constraint_other> 
Note <note> 
 
11 
 
 
四、相關發表論文:  
I. 期刊 
1. P.A. Hsiung, S.W. Lin, Y.R. Chen, C.H. Huang, C.H. Shih and C.W. Chu, “Modeling and 
verification of real-time embedded systems with urgency”, The Journal of Systems and 
Software, Vol. 82, pp. 1627-1641, October 2009 (EI) 
II. 研討會 
1. H.Y. Tung, C.H. Chang, C.W. Chu, H.J. Yang, and C.W. Lu, "From Applications, to 
Models and to Embedded System Code: A Modeling Approach in Action," to appear in the 
Proceedings of the 10th International Conference on Quality Software (QSIC 2010), July 
14-15, 2010 (EI) 
2. N.L. Hsueh, P.H. Chu, P.A. Hsiung, M.J. Chuang, C.W. Chu, C.H. Chang, C.S. Koong, and 
C.H. Shih, "Supporting Design Enhancement by Pattern-based Transformation," to appear 
in the Proceedings of the 34th IEEE Computer Software and Applications Conference 
(COMPSAC2010), July 19-23, 2010 (EI). 
3. C.H. Chang, C.W. Lu, William C. Chu, C.H. Shih, P.A. Hsiung , C.T. Yang, N.L. Hsueh, 
C.S. Koong, "SysML-based Requirement Modeling Environment for Multicore Embedded 
System," The 25th ACM Symposium on Applied Computing (SAC2010), Sierre, 
Switzerland, March 22-26, 2010 
4. C.H. Chang, Y.W. Chen, J.J. Chen, William C. Chu, C.W. Lu and T.Y. Chao , 
“SysML-based Modeling Environment for Multicore Embedded System”, The 20th 
Workshop on Object-Oriented Technology and Applications (OOTA 2009) , Taichung, 
Taiwan, pp.76-84, November 20, 2009 
5. C.H. Chang, W.B. Liao, William C. Chu, C.Q. Xu and C.Q. Tong “XML-based Embedded 
Software Reusable Component Library System” The 20th Workshop on Object-Oriented 
Technology and Applications (OOTA 2009) , Taichung, Taiwan, pp.115-121, November 20, 
2009 
6. M.U. Zhuang, N.L. Hsueh, P.H. Chu ,P.A. Hsiung, William C. Chu , S.C Hwang, C.H. 
Chang, C.H. Shih , C.S Ko , “Using MDA Approach in Design Pattern Specification and 
Transformation” The 20th Workshop on Object-Oriented Technology and Applications 
(OOTA 2009) , Taichung, Taiwan, pp.345-353, November 20, 2009 
7. H.Yu. Tung, C.H. Chang, William C. Chu , “Using UML to Implement Application on 
Different Embedded System”, The 20th Workshop on Object-Oriented Technology and 
Applications (OOTA 2009), Taichung, Taiwan, pp.1-6, November 20, 2009 
8. J.Q. Wei, C.H. Chang, Y.L. Huang, William C. Chu, “再使用程式庫-以自動化倉管系統
為例”, The 20th Workshop on Object-Oriented Technology and Applications (OOTA 
2009), Taichung, Taiwan, pp.122-129, November 20, 2009 
9. C.H. Chang, C.W. Lu, C.W. Chu, Y.W. Chen, R.E. Ger "A SysML-based System 
Requirement Modeling Process" accepted by the 3rd Information Education and 
Technological Applications Conference, Taichung, Taiwan, November 6, 2009 
