A Self-guided Genetic Algorithm with Dominance Properties for
Single Machine Scheduling problems
Abstract
The implementation period of this project is from 98/01/01 to 99/07/31. The first term is during the 98/01/01 to 98/07/31
which focuses on the combination of dominance properties (DPs) and the Self-Guided GA to solve single machine and parallel
machine scheduling problems. Dominance properties are derived by the mathimatical method so that we can determine the job
position from a given sequnence. Bcause the computation of DPs is of its efficiency, we are able to apply it into the metaheuristic
to improve the solution quality. DP is thus integrated with Self-Guided GA. Self-Guided GA is the latest algorithm in the category
of Evolutionary Algorithm with Probabilisitic Models. This prject has finished the developments of DPs and Self-Guided GA,
named DP-Self-Guided GA, which solves the single machine scheduling problems with the objective of tardiness/earliness cost.
This proposed algorithm is compared with ACGA, EA/G, MGGA, and the original version of Self-Guided GA. The results
show DP-Self-Guided GA outperform all these algorithms statistically significant. Since the result is optmisitc, the result has
been published to 2009 IEEE Symposium on Computational Intelligence in Scheduling. These results were also submitted to an
international jounral and it is under the review now. After that, this researcher continues the derivations of dominance properties
for parallel machine. scheduling problems and it will be combined with Self-Guided GA as well.
Keywords: Evolutionary Algorithms with Probabilistic Models, Dominance Properties, Scheduling Problem
I. INTRODUCTION
Evolutionary algorithms based on probabilistic models (EAPMs) has attracted a lot of attentions in recent years ([1],
[4], [11], [13], [3], [10], [14], [12]). EAPMs explicitly build a probabilistic model of the parental distribution. EAPM also
generate solutions by sampling from the probabilistic model, whereas GA employs the crossover and mutation operators.
This is the most important characteristic that distinguishes EAPM from GA. There were some EAPMs, such as EA/G [16],
ant-miner [1], and ACGA [6], were used to generate new solutions by sampling from the probabilistic model in solving the
combinatorial problems. However, we have discovered that proportional selection causes a higher computational cost in solving
machine scheduling problems. As a result, our previous proposed algorithm is termed as the Self-guided Genetic Algorithm
[8], which attempts to employ the probabilistic model to guide the evolutionary process in solving scheduling problems instead
of generating new solutions by sampling from probabilistic models.
The idea is that the probability of each item is further interpreted as a figure of merit of an item in a position of a
solution, i.e., the probabilistic model serves as a fitness surrogate. Then we can evaluate the goodness of modified solutions
by their probabilities depending on the probabilistic model. After we summarize the new probabilities and differentiate them
from the original probabilities, the differentiated values represent the prediction of a new solution. By using the idea that the
probabilistic model is a fitness surrogate, we can embed this concept in different kinds of genetic operators to further evolve
the existing solutions. Self-guided Genetic Algorithm prevents GA from working as a blind search while retaining the local
information. In addition, Self-guided GA works more efficiently than previous EAPMs.
In [17], they stated when an appropriate heuristic is incorporated into an EAPM, the performance of the EAPM is
improved. Consequently, we consider a heuristic approach to enhance the solution quality of Self-guided GA by employing
dominance properties when we studied the single machine scheduling problems which is the strongly NP-hard single-machine
scheduling problem to minimize the total earliness and tardiness costs. In our previous study [7], dominance properties of (the
conditions on) the optimal schedule are developed based on the switching of two adjacent jobs i and j. These dominance
properties are only necessary conditions and not sufficient conditions for any given schedule to be optimal. Because DPs are
good at generating solutions efficiently, this study attempts to integrate the dominance properties with Self-guided GA and the
proposed algorithm is named DP-Self-guided GA. Thus the probabilistic model is able to capture useful parental distribution
in the beginning. It might be helpful for Self-guided GA to obtain better solution quality.
The rest of the paper is organized as follows: Section II is the introduction of DPs. Section III provides detailed explanations
of the Self-guided GA. Section IV presents the experimental results on the performance of the proposed algorithm in solving
the single-machine scheduling problems. Section V provides discussions and conclusions of this research.
II. DOMINANCE PROPERTIES OF SINGLE MACHINE SCHEDULING PROBLEMS
In this paper, a deterministic single machine scheduling problem without release date is investigated and the objective is
to minimize the total sum of earliness and tardiness penalties. A detailed formulation of the problem is described as follows:
A set of n independent jobs {J1, J2, ..., Jn} has to be scheduled without preemptions on a single machine that can handle
at most one job at a time. The machine is assumed to be continuously available from time zero onwards and unforced idle
Possibility.(i). Here in the schedule Πx jobs i and j (in positions k and k + 1) are early jobs. After interchange, in the
schedule Πy , the jobs j and i (in positions k and k + 1) are also early jobs. This means that di > (A+ pi), dj > (A+ pj),
di > (A+ pi + pj) and dj > (A+ pi + pj). The total absolute deviation Z(Πx), Z(Πy) for the schedules Πx, Πy are
Z(Πx) = G1 + G2 + αi(di −A− pi) + αj(dj −A− pi − pj) (4)
Z(Πy) = G1 + G2 + αj(dj −A− pj) + αi(di −A− pj − pi) (5)
We now derive the condition under which Z(Πx) ≤ Z(Πy). Let X = Z(Πy)− Z(Πx) and is given by
X = − αipj + αjpi (6)
From the above expression, we see that X ≥ 0 when the following condition is satisfied.
pi
αi
≥ pj
αj
(7)
We see that if X > 0, then the schedule Πx is better than the schedule Πy; i.e., Z(Πx) < Z(Πy). If X = 0 then
Z(Πx) = Z(Πy). For this case, job i will come before job j only when piαi ≥
pj
αj
. Based on this analysis, we state the
following property.
Property.1: In the schedule Πx, for two adjacent early jobs i (in position k) and j (in position k+1), and if di > (A+pi+pj),
then the schedule Πx is better than the schedule Πy , only when piαi ≥
pj
αj
.
The other possibility of Status 1 and other dominance properties can be proved in the same manner. For the further
explanations, please refer to our work in [7].
III. DP-SELF-GUIDED GENETIC ALGORITHM
After we introduced the DPs, this section describes the detail procedures of the Self-guided GA. Because Self-guided
GA originally uses random solutions as an initial population, DPs will replace it and generate good initial solutions for Self-
guided GA. In other words, the whole procedures are identical to the original Self-guided GA except the initialization of the
population.
EAPMs extract the gene variable structure from the population distribution and express it in a probabilistic model [11].
This research embeds the probabilistic model in the crossover and mutation operators to guide the evolution progress towards a
more promising solution space. The probabilistic model serves as a fitness surrogate and the probabilistic model evaluates the
figure of merit of a new solution beforehand. This means that the probabilistic model will calculate the probability difference
between two selected genes located in different positions to guide the movement of genes decided by the crossover and
mutation operators. As a result, the proposed EAPM algorithm will guide the searching direction instead of blindly searching
the solution space since it does not rely on proportional selection to generate solutions.
The benefits of the proposed method are preserving the salient genes of the chromosomes, and exploring and exploiting
good searching directions for genetic operators. In addition, since the probabilistic difference provides good neighborhood
information, it can serve as a fitness function surrogate. The detailed procedure of the DP-Self-guided GA is described as
follows:
Population: A set of solutions
Generations: The maximum number of generations
P (t): Probabilistic model
t : Generation index
1: Initialize Population by Dominance Properties
2: t← 0
3: Initialize P (t)
4: while t < generations do
5: EvaluateFitness (Population)
6: Selection/Elitism(Population)
7: P (t+ 1)← BuildingProbabilityModel(Selected Chromosomes)
8: Self-Guided Crossover()
9: Self-Guided Mutation()
10: t← t+ 1
11: end while
Fig. 1. Algorithm1: MainProcedure of DP-Self-guided GA()
B. Mutation Operator with Probabilistic Model
Suppose two jobs i and j are randomly selected and they are located in position a and position b, respectively. pia and
pjb denote job i in position a and job j in position b. After these two jobs are swapped, the new probabilities of the two jobs
become pib and pja. The probability difference ∆ij is calculated as Eq. 12, which is a partial evaluation of the probability
difference because the probability sum of the other jobs remains the same.
∆ij = P (X ′)− P (X)
≈
n∏
p/∈(aorb),g=[p]
Pt+1(Xgp)[(pibpja)− (piapjb)]. (12)
Now that the part of
∏n
p/∈(aorb),g=[p] Pt+1(Xgp) is always ≥ 0, it can be subtracted and Eq. 12 is simplified as follows:
∆ij = (pibpja)− (piapjb). (13)
We have observed that the probability values appear to be zero frequently in solving combinatorial problems. The reason
is that certain items converge to specific locations and the probability values of the other jobs in these positions will be zero.
When there is a zero probability value in Eq. 13, it causes the multiplied probabilities such as pibpja and piapjb to become
zero and the model becomes insensitive. To overcome this problem, Eq. 13 is slightly modified from (pibpja) and (piapjb) to
(pib + pja) and (pia + pjb), respectively. The new equation is Eq. 14, which restores the idea of probability differences in Eq.
13.
∆ij = (pib + pja)− (pia + pjb). (14)
If ∆ij is positive, it implies that one gene or both genes might move to a promising area. On the other hand, when ∆ij
is negative, the implication is that at least one gene moves to an inferior position.
On the basis of the probabilistic differences, it is natural to consider different choices of swapping points during the
mutation procedure. A parameter TM is introduced for the self-guided mutation operator, which denotes the number of
tournaments in comparing the probability differences among the TM choices in swap mutation. Basically, TM ≥ 2 while
TM = 1 implies that the mutation operator mutates the genes directly without comparing the probability differences among
the different TM choices.
When TM = 2, suppose the other alternative is that two jobs m and n are located in position c and position d, respectively.
The probability difference of exchanging jobs m and n is:
∆mn = (pmd + pnc)− (pmc + pnd). (15)
After ∆ij and ∆mn are obtained, the difference between the two alternatives is as follows:
∆ = ∆ij −∆mn. (16)
If ∆ < 0, the contribution of swapping job m and n is better, so we swap job m and n. Otherwise, jobs i and j are
swapped. Consequently, the option of a larger probability difference is selected and the corresponding two jobs are swapped. By
observing the probability difference ∆, the self-guided mutation operator exploits the solution space to enhance the solution
quality and prevent destroying some dominant genes in a chromosome. Moreover, the main procedure of the self-guided
mutation is Eq. 16, where the time-complexity is only a constant after the probabilistic model is employed. This approach
proves to work efficiently.
About the setting of TM , a design-of-experiment (DOE) was conducted for the different kinds of problems that were
used to conduct the computational experiments. The results show that TM is generally set as 2.
Extending from the probabilistic model to the mutation operator, we continue to apply the idea of utilizing probability
differences by embedding them in the crossover operator in the next section.
∆2 = (
n∏
p∈(CP1 to CP2),g=[p]
P (Candidate2gp)−
n∏
p∈(CP1 to CP2),g=[p]
P (Parent1gp)).
(21)
The last step is to compare whether Offspring1 or Offspring2 is better. As a result, ∆1 minus ∆2 in Eq. 22 and we can
determine which new offspring should be adopted, which depends on the expected fitness of the two offspring.
∆ = ∆1 −∆2 =
n∏
p∈(CP1 to CP2),g=[p]
P (Candidate1gp)−
n∏
p∈(CP1 to CP2),g=[p]
P (Candidate2gp). (22)
To conclude, the DP-Self-guided GA is obviously different from the previous EAPM algorithms. Firstly, the algorithm
utilizes dominance properties to generate good initial solutions. Secondly, the proposed algorithm explicitly samples new
solutions without using the crossover and mutation operators. The Self-guided GA embeds the probabilistic model in the
crossover and mutation operators to explore and exploit the solution space. Most important of all, the algorithm works more
efficiently than previous EAPM in solving the scheduling problem because the time-complexity is O(n) whereas EAPM needs
O(n2) time.
IV. APPLICATION AND EXPERIMENTAL RESULTS
We conducted extensive computational experiments to evaluate the performance of the combination of dominance properties
and Self-guided GA in solving the single-machine scheduling problem to minimize the total weighted earliness and tardiness
costs [15]. We compared it with some algorithms in the literature. We implemented the algorithms in Java 2 (With JBuilder
JIT compiler) on a Windows 2003 server (Intel Xeon 3.2 GHZ). In all the experiments, we replicated each instance 30 times.
The proposed algorithm was compared with SGA and some other algorithms from the literature, including GADP [7],
ACGA [6], ACGADP [6], ACGA with evaporation method [5], and EA/G [16]. Table V in Appendix I show the results of
the basic statistical information on these algorithms. For more detailed results, please refer to our website1.
Since there were significant differences in the results produced by the different algorithms under test (see Table I), we
conducted Duncan pairwise comparisons of the performance of the algorithms and show the results in Table II.
TABLE I
ANOVA RESULTS ON THE OBJECTIVE VALUES OF THE SINGLE-MACHINE SCHEDULING PROBLEM PRODUCED BY DIFFERENT ALGORITHMS
Source DF SS Mean Square F Value P Value
instances 213 7.98E12 37457591062 1.94E7 <.0001
method 5 1214063.08 242812.62 125.66 <.0001
instances*method 1065 34492090.87 32386.94 16.76 <.0001
Error 37236 71952837.87 1932.35
Corrected Total 38519 7.9785746E12
When Duncan grouping is used, it shows that there are significant differences between/among subjects if they are given
different alphabets. Otherwise, there are no differences between/among the subjects. In Table II, the results of Duncan grouping
indicate that the DP-Self-guided GA outperforms any other algorithms. In addition, Self-guided GA performs as well as ACGA
and EA/G. Finally, GADP is the worst in solving the single-machine scheduling problem in this Duncan comparison.
After performing ANOVA on the objective values of the single-machine scheduling problem produced by different
algorithms, we examined the differences in their computational times in solving the scheduling problem. Table III and Table
IV show the ANOVA and Duncan grouping results on CPU time comparisons, respectively. There were significant differences
in the CPU times required by the different algorithms to solve the scheduling problem. Self-Guided GA works more efficient
than DP-Self-Guided GA and it is not surprised because the generation of good solutions by DPs needs time. Then, ACGA and
EA/G worked particularly longer because they require a running time of O(n2) to generate a new solution and use proportional
selection in solving the scheduling problem. Consequently, these results show that the DP-Self-guided GA and Self-guided
GA are very attractive because they perform well and not time-consuming in comparison with ACGA, EA/G and GADP.
1http://mail.nhu.edu.tw/˜shihhsin/publications/sourceCodes/InjectionArtificialChromosomes/Results.htm
TA
B
L
E
V
O
B
JE
C
T
IV
E
V
A
L
U
E
S
O
F
T
H
E
S
IN
G
L
E
-M
A
C
H
IN
E
S
C
H
E
D
U
L
IN
G
P
R
O
B
L
E
M
:J
O
B
S
20
,3
0,
40
A
N
D
50
SG
A
A
C
G
A
E
A
/G
Se
lf
-G
ui
de
d
G
A
D
P-
Se
lf
-G
ui
de
d
G
A
in
st
an
ce
M
in
A
vg
.
M
ax
M
in
A
vg
.
M
ax
M
in
A
vg
.
M
ax
M
in
A
vg
.
M
ax
M
in
A
vg
.
M
ax
sk
s2
22
a
52
86
54
01
.7
56
43
52
86
52
88
.8
52
98
52
86
52
89
.8
52
98
52
86
52
90
.2
52
98
52
86
52
90
52
98
sk
s2
25
a
39
58
41
73
.5
43
89
39
58
39
58
39
58
39
58
39
59
.3
39
77
39
58
39
58
39
58
39
58
39
58
39
58
sk
s2
28
a
20
85
21
55
.6
27
49
20
85
20
85
20
85
20
85
20
85
20
85
20
85
20
85
20
85
20
85
20
85
20
85
sk
s2
52
a
40
52
41
95
.3
45
08
39
47
39
79
40
67
39
47
39
91
40
67
39
47
39
59
40
67
39
47
39
47
39
47
sk
s2
55
a
23
88
24
88
.5
27
87
23
72
23
80
23
88
23
72
23
80
.4
23
88
23
72
23
82
.7
23
88
23
72
23
81
.1
23
88
sk
s2
58
a
11
84
12
49
.9
13
71
11
84
12
00
.4
12
48
11
84
11
86
.1
12
48
11
84
11
98
.9
12
48
11
84
11
84
11
84
sk
s2
82
a
43
48
44
35
46
95
43
48
43
50
.8
43
55
43
48
43
50
.1
43
55
43
48
43
49
.9
43
55
43
48
43
53
.1
43
55
sk
s2
85
a
44
52
46
42
.6
48
95
44
52
44
52
44
52
44
52
44
52
44
52
44
52
44
52
44
52
44
52
44
52
44
52
sk
s2
88
a
34
21
35
17
.6
38
47
34
21
34
21
34
21
34
21
34
21
34
21
34
21
34
21
34
21
34
21
34
21
34
21
sk
s3
22
a
11
62
3
12
06
6
12
91
6
11
56
8
11
57
7
11
62
2
11
56
8
11
57
6
11
62
2
11
56
8
11
57
5
11
62
2
11
56
8
11
57
1
11
60
9
sk
s3
25
a
76
15
81
51
.8
96
50
75
87
75
87
75
87
75
87
76
42
.3
79
29
75
87
75
97
.6
79
04
75
87
75
87
75
87
sk
s3
28
a
31
95
35
56
.2
48
10
31
64
31
64
31
64
31
64
31
64
31
64
31
64
31
64
31
64
31
64
31
64
31
64
sk
s3
52
a
75
88
82
03
.2
90
63
73
92
73
93
.8
73
95
73
92
73
98
.4
74
16
73
92
73
93
.8
73
95
73
92
73
94
.2
73
95
sk
s3
55
a
62
02
68
49
.2
76
93
60
56
60
65
.4
61
93
60
56
60
62
.1
62
12
60
56
60
60
.7
61
68
60
56
60
56
.6
60
58
sk
s3
58
a
31
04
32
82
.6
37
87
30
69
30
73
.4
30
76
30
69
30
74
.8
31
06
30
69
30
73
.2
30
76
30
69
30
71
.8
30
76
sk
s3
82
a
11
15
7
11
31
9
11
55
8
11
14
0
11
14
9
11
22
2
11
14
0
11
15
2
11
22
2
11
14
0
11
14
7
11
16
0
11
14
0
11
15
1
11
15
7
sk
s3
85
a
91
57
92
12
.1
93
89
91
48
91
48
91
48
91
48
91
48
91
48
91
48
91
48
91
48
91
48
91
48
91
48
sk
s3
88
a
11
32
1
11
49
9
11
78
9
11
31
7
11
31
7
11
31
7
11
31
7
11
32
0
11
34
0
11
31
7
11
31
7
11
31
7
11
31
7
11
31
7
11
31
7
sk
s4
22
a
25
65
6
26
21
1
27
46
2
25
65
6
25
65
9
25
70
4
25
65
6
25
66
1
25
71
2
25
65
6
25
66
4
25
70
4
25
65
6
25
66
0
25
70
4
sk
s4
25
a
12
72
5
13
59
2
15
19
8
12
60
1
12
60
6
12
66
8
12
60
1
12
61
3
12
68
2
12
60
1
12
61
1
12
66
8
12
60
1
12
60
9
12
66
8
sk
s4
28
a
72
37
77
41
.1
87
61
71
29
71
29
71
29
71
29
71
34
.1
71
46
71
29
71
31
.3
71
46
71
29
71
29
71
29
sk
s4
52
a
11
80
4
12
63
4
14
05
3
11
36
7
11
40
6
11
58
1
11
36
7
11
39
6
11
58
1
11
36
7
11
38
2
11
42
5
11
36
7
11
39
9
11
52
8
sk
s4
55
a
65
73
75
66
94
35
64
05
64
26
.7
66
66
64
05
64
24
.6
65
45
64
05
64
21
.7
65
45
64
05
64
28
65
45
sk
s4
58
a
44
24
55
87
83
31
42
94
43
20
.5
43
91
42
94
43
19
.3
43
81
42
94
43
21
43
91
42
94
43
25
.3
43
91
sk
s4
82
a
19
65
6
20
12
2
20
60
5
19
55
9
19
57
3
19
73
5
19
55
9
19
56
8
19
59
3
19
55
9
19
56
7
19
57
2
19
55
9
19
56
6
19
57
2
sk
s4
85
a
15
45
9
16
02
3
16
57
6
15
25
6
15
33
8
15
48
0
15
25
6
15
31
6
15
48
0
15
25
6
15
35
0
15
48
0
15
25
6
15
29
7
15
43
0
sk
s4
88
a
17
37
4
17
99
9
18
66
8
16
86
2
16
86
3
16
88
8
16
86
2
16
86
3
16
88
8
16
86
2
16
86
4
16
90
6
16
86
2
16
86
4
16
88
8
sk
s5
22
a
29
48
5
30
62
3
32
34
0
29
30
9
29
31
2
29
39
6
29
30
9
29
32
6
29
39
8
29
30
9
29
32
0
29
39
8
29
30
9
29
31
3
29
39
6
sk
s5
25
a
25
69
3
26
11
3
26
71
3
25
43
3
25
43
8
25
46
9
25
43
3
25
44
4
25
49
6
25
43
3
25
44
1
25
47
1
25
43
3
25
43
7
25
46
9
sk
s5
28
a
11
15
4
12
03
7
13
12
1
10
79
8
10
83
8
11
12
9
10
79
8
10
82
4
10
86
0
10
79
8
10
84
7
11
12
9
10
79
8
10
85
1
11
12
9
sk
s5
52
a
23
49
1
24
82
7
26
24
1
22
86
3
22
89
4
23
14
8
22
86
3
22
90
6
23
14
3
22
86
3
22
88
7
23
13
9
22
86
3
22
88
9
23
13
9
sk
s5
55
a
10
87
7
12
23
3
14
62
6
10
18
7
10
21
6
10
29
9
10
18
7
10
22
4
10
29
9
10
18
7
10
21
9
10
30
1
10
18
7
10
21
4
10
30
1
sk
s5
58
a
57
76
73
45
93
58
52
69
52
69
52
69
52
69
52
69
52
69
52
69
52
69
52
69
52
69
52
69
52
69
sk
s5
82
a
28
37
5
29
15
4
30
55
1
27
93
9
27
94
7
28
05
6
27
93
9
27
95
9
28
16
7
27
93
9
27
95
2
28
16
7
27
93
9
27
96
5
28
28
4
sk
s5
85
a
25
20
0
25
86
2
26
44
7
24
82
8
24
83
9
24
85
3
24
82
8
24
83
6
24
85
3
24
82
8
24
84
2
24
85
3
24
82
8
24
83
7
24
85
3
sk
s5
88
a
25
45
3
26
42
2
28
19
7
24
84
4
24
84
5
24
86
1
24
84
4
24
84
9
24
87
0
24
84
4
24
84
7
24
87
0
24
84
4
24
84
4
24
84
4
表 Y04 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                           98 年 5  月 24 日 
報告人姓名 陳世興  
 
 
服務機構
及職稱 
南華大學電子商務管理學系 
助理教授 
 
     時間 
會議 
     地點 
May 18-21, 2009 
Trondheim, Norway during  
本會核定
補助文號
NSC 98-2218-E-343-001-MY2，
98/01/01 ～ 99/07/31 
會議 
名稱 
 (中文) 2009 IEEE 演化式演算法研討會 
 (英文) 2009 IEEE Congress on Evolutionary Computation (IEEE CEC 2009) 
發表 
論文 
題目 
 (中文) 自指引基因演算法解決流程型機台排程問題 
 (英文) A Self-guided Genetic Algorithm for Flowshop Scheduling problems 
附件
三
 
表 Y04 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                             年    月    日 
報告人姓名 陳世興  
 
 
服務機構
及職稱 
南華大學電子商務管理學系 
助理教授 
 
     時間 
會議 
     地點 
May 18-21, 2009 
Trondheim, Norway during  
本會核定
補助文號
NSC 98-2218-E-343-001-MY2，
98/01/01 ～ 99/07/31 
會議 
名稱 
 (中文) 2009 IEEE 演化式演算法研討會 
 (英文) 2009 IEEE Congress on Evolutionary Computation (IEEE CEC 2009) 
發表 
論文 
題目 
 (中文) 自指引基因演算法解決流程型機台排程問題 
 (英文) A Self-guided Genetic Algorithm for Flowshop Scheduling problems 
附件
三
 
