快整體系統的執行效率。 
 
中文關鍵詞： 效能監測、效能分析、軟體、匯流排、取樣技術 
英 文 摘 要 ： Nowadays SoC involves both software and hardware 
designs, performance bottleneck may occur either in 
software/hardware or even both. But present 
performance monitoring tools usually evaluates one of 
software/hardware performance, which is not quite 
enough for nowadays SoC designs. Furthermore, due to 
increasing complexity of user requirements, embedded 
OS, such as Linux is introduced to manage the limited 
hardware resources for complicated applications. 
However, it also makes performance monitoring harder 
since the memory addressing space is divided into 
user space and kernel space with different capability 
to access system resources, which makes user space 
application impossible to retrieve system performance 
information without kernel or hardware supports. In 
this work, we propose a performance monitoring tool 
suite which is capable of analyzing the performance 
of user pace application, kernel space device driver 
and AMBA AHB bus for SoC running under Linux. We 
develop Performance Monitoring Tool Suite (PMTS) 
which includes: Program Monitor (PM) to monitor the 
execution time of software； Bus Utilization Monitor 
(BUM), Bus Contention Monitor (BCM) and Bus Global 
Monitor (BGM) to monitor the bus utilization, 
contentions⋯etc. PMTS can help user to find out the 
performance bottleneck of both software and hardware 
more easily. We have applied PMTS to FPGA develop 
board and find out the hardware/software performance 
bottlenecks of the designs. From the experimental 
results we can know that adding PMTS won＇t impact 
the critical path of SoC. 
英文關鍵詞： Performance monitoring, Performance analysis, 
Software, Bus, Sampling Techniques. 
 
I 
中文摘要 
現今的系統單晶片同時牽涉了軟體及硬體的設計，效能瓶頸有可能會發生在軟體端或硬體端或甚
是兩者，但現有的效能監測工具通常只能監測軟體或硬體其中一端的效能，這對於我們現今的系統單
晶片設計已經有所不足。此外，由於使用者對於系統單晶片的所需的功能日益複雜，嵌入式作業系統，
如：Linux，已越來越常被使用在系統單晶片系統中來管理有限的硬體資源。然而，由於記憶體位址
空間被嵌入式作業系統切割為使用者空間及核心空間，而這兩空間擁有完全不同的系統資源存取權
限，因此也導致了效能監測上的困難，一般執行在使用者空間的應用程式，若是沒有核心及硬體的支
援，基本上是很難去取得完整的系統效能資訊的。因此，在本計畫中，我們提出了一個足以針對使用
Linux作業系統的系統晶片，同時分析使用者空間的應用程式、核心空間的驅動程式及AMBA AHB匯
流排效能的量測套件。我們開發了Performance Monitoring Tool Suite (PMTS)，其中包含了：Program 
Monitor (PM)來監測軟體的執行時間；Bus Utilization Monitor (BUM)、Bus Contention Monitor (BCM)
及Bus Global Monitor (BGM)來監測匯流排之使用率及不同Masters之間匯流排的競爭。PMTS可以幫助
使用者更容易的找出軟硬體之間的效能瓶頸。我們也將PMTS應用在FPGA開發版上，並找出了我們
設計上的軟硬體效能瓶頸。由實驗結果我們也可以知道，加入PMTS並不會對於SoC造成critical path
的產生。 
 
關鍵詞：效能監測、效能分析、軟體、匯流排、取樣技術。 
I 
Introduction 
 
Nowadays SoC involves both software and hardware designs; software/hardware partition is also a 
major factor which may influent the overall performance, for instance, if the processor we used in our 
embedded system doesn’t have high performance output, then if we decide to execute the critical 
algorithm which may influent the entire system performance. On the other hand, if we design an 
additional hardware to execute the program which doesn’t require to be accelerated by the hardware, 
such as JPEG encoding/decoding, then it would not only waste the hardware gate counts without the 
necessary performance improvement in return, but also increase the cost of the product. Therefore 
under such a circumstance, we need to take consideration of the entire system performance outcome 
after integrating both software and hardware, to find out the real bottlenecks which cause the 
performance insufficiency. 
Take a example, Geometry Module (GM) running on the standalone testing platform can achieve 
4.17 M triangle/sec = 12.51 M vertices/sec processing performance [1]; Rendering Module (RM) in the 
standalone testing environment could achieve 333 M pixels/sec processing performance [2], but after 
integrating to a 3D graphics SoC, which includes OpenGLES testbench, library and on-chip bus. The 
processing performance of GM reduces to 8.63M vertices/sec, and RM reduces to 278 M pixels/sec [3]. 
However, it’s hard for us to determine the problem that causes the performance bottleneck of GM/RM . 
The problem could be the insufficient execution speed of OpenGL-ES, which can’t keep up with the 
hardware processing speed, or the bus contentions between GM and RM or other IPs, so that GM and 
RM couldn’t reach their 100% performance. In order to identify the problem, this work proposes a 
performance monitoring tool suite with four monitoring hardware modules: Program Monitor (PM), 
Bus Utilization Monitor (BUM), Bus Contention Monitor (BCM), Bus Global Monitor (BGM) to 
monitor the performance of both software and hardware for 3D graphics SoC.  
 
2. Related Work 
 
There are three major methods to monitor the software performance: (a) Static Instrumentation, (b) 
Dynamic Instrumentation and (c) Sampling. Static instrumentation stands for the instrumentation codes 
which are added to the monitored program in a static way. The advantage of Static instrumentation is 
that since these instrumentation codes are compiled as part of executable file at compile time, therefore 
the performance overhead would be significantly reduced compared with the dynamic instrumentation 
method. Currently there are source code-level performance monitoring tools such as: LTTng [4], and 
Moduletracer [5], which the instrumentation codes are added as part of source codes by designers 
themselves; Compiler-level performance monitoring tools such as: gprof [6] and Ftrace [7], which the 
instrumentation codes are added by compiler automatically. 
Unlike static instrumentation, dynamic instrumentation allows the designer to adjust the block of 
codes to be monitored or the monitored contents without recompiling the program Dynamic 
Instrumentation is mostly implemented by modifying a piece of the instruction, such as the entry point 
I 
Fig.1. Architecture of the Performance Monitoring Tool Suite. 
4. Research Result 
4.1 Program Monitor 
PM is a monitor module used to monitor the execution time of the program executed by the CPU. 
PM has a set of monitor address registers (monitor addr 0 to monitor addr 31) for the user to define the 
addresses they want to monitor, which could be the starting/ending addresses of a function or any block 
of codes. There is a timestamp counter (timestamp counter) in PM which will increase the timestamp 
value every clock cycle. PM is connected to SYS32TM - an ARM7-like CPU [11], this can also be 
replaced by other architecture’s CPU as long as the PC addresses executed by CPU can be retrieved and 
monitored by PM. PM monitors the PC addresses executed by SYS32TM, and a comparator in PM will 
compare the PC value with the addresses set by user, if PC address match any of the monitor addresses 
set by user, then PM will save the current timestamp and the corresponding index of the address to PM’s 
on-chip memory via FIFO, at the same time, PM also sends a trigger signal to BUM, BCM and BGM. 
From Fig 1, an additional leading zero detector (LZD) [12] module is implemented to eliminate the 
leading zeros of the timestamp to reduce the data size before sending the data to on-chip memory. 
 
4.2 Bus Utilization Monitor (BUM) 
TABLE I.  BUM monitor events. 
I 
4.4 Bus Global Monitor (BGM) 
 
BGM is a global bus activities monitor module used to monitor the overall bus performance. It 
monitors two major events: bus active and bus idle. Once the events occur, the corresponding counter 
will increase its value. When receiving the trigger signal from PM, BGM will also save the current 
values of event counters to its on-chip memory. The Additional LZD modules are also implemented to 
reduce the data size before sending the data to on-chip memory. BGM provides the global bus activities 
performance information so that user can find out whether the bus is active or idle. By using this 
information, we can calculate the bus utilization, if bus utilization is low, which means that bus can 
handle more transactions, and then we might be able to double some modules of our design to increase 
its parallelism for better performance. 
  
4.5 Relay Daemon 
Fig. 2. Relationship between the device driver, relay and relay daemon. 
 
Although we have implemented LZD to reduce the monitor data size, once the monitoring is too 
long, the on-chip memory spaces will still be insufficient to save the rest of monitoring data, no matter 
how high the compression rate is. Therefore, we set our PM, BUM, BCM, BGM to trigger IRQ when 
their on-chip memories are full. In ISR, we dump the onchip memory data to kernel buffers by using 
relay [13]. Relay is a set of per-cpu kernel buffers, which is suitable for a large amount of data to be 
dumped to kernel buffers. We also designed a relay user space daemon to co-work with the relay in Fig. 
2. When any kernel buffer is full, the daemon will be awaked and dump the kernel buffer data to a file. 
Once all the data in the kernel buffer have dumped to the file, this daemon will be blocked again (i.e. 
set to sleep state) by calling poll() to poll the data to be dumped next time. Therefore, the performance 
overhead can be minimized as small as possible. 
I 
6. Conclusion 
 
This work implements a performance monitoring tool suite which is capable for both software and 
hardware performance monitoring. It consists of the four hardware modules: PM, BUM, BCM and 
BGM. PM is utilized to monitor the execution of the program. With PM, the software designers do not 
need to add any of instrumentation codes into original designs for software performance monitoring. 
BUM, BCM and BGM are used to monitor the bus utility, transactions, bus contentions, and so on. By 
applying the proposed tool suite to the 3D Graphics SoC application, we find out that OpenGL-ES API 
1.0 spends lots of time to process, device driver spends unnecessary time to do the clear buffer 
operations, there are quite amount of waiting cycles between the transactions of 3D graphics SoC and 
external memory and there are so many bus contentions between GM and TD. The developers can 
identify the performance bottlenecks occurred in both software and hardware of their designs. 
  
7. Future Work 
 
For performance monitoring, there are few works and subjects which are worth discussing: 
 Support multithread program performance monitoring: 
Our performance monitoring tool can’t determinate the exact self time nodes for multithread 
program. However, multithread or multi-core programming are getting more popular, therefore, 
how to improve our performance monitoring tool to support multithread and multi-core program 
will be our key considerations in the future. 
 Migrate to AXI-based environment: 
AXI-based environment provides better bus architecture than AHB-based one. How to migrate our 
tool to AXI-based environment will be our next stage’s goal. 
 Improve the tool’s operate conveniences for user: 
Although we’ve develop a GUI tool to provide user with much easier way to use our tool, but 
there’re still some inconveniences, for example: user has to first: observed the monitored 
addresses by using GDB, and then: configure the monitored addresses to our tool manually by 
themselves. We hope that we can integrate GDB and DDD with our tool in the future to allow user 
to set up the monitoring addresses to our tool as easy as using GDB and DDD. 
 Adopt better data compression techniques: 
In spite of differential compression and LZD modules are very easy to be implemented in the 
designs, however it takes too large of area to be synthesized since we may need to shift hundred of 
the bits to remove the leading zeros. We can choose to implement other general data compression 
techniques, such as LZW (Lempel-Ziv-Welch) in the future to reduce the required area cost. 
I 
9. Achievements 
International Conference： 
[1] Yi-Hao, Chang, and Ing-Jer Huang, “A Performance Monitoring Tool Suite for Software and SoC    
on-chip Bus,” The 17th Workshop on Synthesis And System Integration of Mixed Information  
Technologies(SASIMI), Japan, March 8-9, 2012 
[2] Y.-H. Chang, C.-T. Yeh, I.-J. Huang and S.-Y. Tsengz, "A Performance Monitoring Tool Suite for 
3D Graphics SoC Application", IEEE Asia Pacific Conference on Circuits and Systems, Taiwan, 
Dec 2-5, 2012 
 
Student Contests : 
1. 100年度全國微電腦應用系統設計製作競賽 (10/26 進行複賽) 
2. 2012 International SoC Design Conference November 4-7, 2012 Chip Design Contest (11/5 進行
複賽) 
I 
國科會補助計畫衍生研發成果推廣資料表 
日期：   年  月  日 
國科會補助計畫 
計畫名稱：用於系統單晶片效能偵測及分析之軟/硬體套件：以 3D 
          Graphics 系統晶片為例                                                                                                                                                                 
計畫主持人： 黃英哲 
計畫編號：             領域： 
研發成果名稱 
（中文）用於系統單晶片效能偵測及分析之軟/硬體套件：以 3D 
Graphics 系統晶片為例 
（英文）A Performance Monitoring Tool Suite for Software and SoC       
on-chip Bus: Using 3D Graphics SoC as an example 
成果歸屬機構 國立中山大學 
發明人 
(創作人) 
張逸豪 
技術說明 
（中文）現今的系統單晶片同時牽涉了軟體及硬體的設計，效能
瓶頸有可能會發生在軟體端或硬體端或甚是兩者，但現有的效能
監測工具通常只能監測軟體或硬體其中一端的效能，這對於我們
現今的系統單晶片設計已經有所不足。此外，由於使用者對於系
統單晶片的所需的功能日益複雜，嵌入式作業系統，如：Linux，
已越來越常被使用在系統單晶片系統中來管理有限的硬體資源。
然而，由於記憶體位址空間被嵌入式作業系統切割為使用者空間
及核心空間，而這兩空間擁有完全不同的系統資源存取權限，因
此也導致了效能監測上的困難，一般執行在使用者空間的應用程
式，若是沒有核心及硬體的支援，基本上是很難去取得完整的系
統效能資訊的。因此，在此計畫中，我們提出了一個足以針對使
用 Linux作業系統的系統晶片，同時分析使用者空間的應用程式、
核心空間的驅動程式及 AMBA AHB匯流排效能的量測套件。我們
開發了 Performance Monitoring Tool Suite (PMTS)，其中包含了：
Program Monitor (PM)來監測軟體的執行時間；Bus Utilization 
Monitor (BUM)、Bus Contention Monitor (BCM)及 Bus Global 
Monitor (BGM)來監測匯流排之使用率及不同 Masters之間匯流排
的競爭。PMTS可以幫助使用者更容易的找出軟硬體之間的效能瓶
頸。我們也將 PMTS 應用在 FPGA 開發版上，並找出了我們設計
上的軟硬體效能瓶頸。由實驗結果我們也可以知道，加入 PMTS
並不會對於 SoC造成 critical path的產生。 
（200-500字） 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/09/21
國科會補助計畫
計畫名稱: 用於系統單晶片效能偵測及分析之軟/硬體套件：以3D Graphics系統晶片為例
計畫主持人: 黃英哲
計畫編號: 100-2221-E-110-054- 學門領域: 計算機結構與計算機系統
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
1. 100年度全國微電腦應用系統設計製作競賽 (10/26 進行複賽) 
2. 2012 International SoC Design Conference November 4-7, 2012 Chip 
Design Contest (11/5 進行複賽) 
 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
