 2
行政院國家科學委員會專題研究計畫成果報告 
 
發展在具有學習效果的多部機器生產環境下之平均流程時間極小化的演算法 
 
The development of solutions to minimize the mean flow time on multiple-machine 
flowshop with learning consideration 
 
計畫編號:NSC 94-2213-E-035-020 
執行期限:2005 年 08 月 01 日至 2006 年 07 月 31 日 
主持人:吳進家  逢甲大學統計系 
計畫參與人員:鐘愉翔  溫健智 劉威麟 逢甲大學統計暨精算研究所 
 
一、中文摘要 
多部機器流程工廠(multiple-machine flowshop)
以平均流程時間(mean flow time)為準則的最小化
向來是生產排程領域中一直是在排程領域中最熱
門研究主題之一。而近年來對於製程中的存貨的降
低(in-process inventory)要求提高，工作件快速
運轉率(turn-around of jobs)的要求，以及如何
有效的穩定使用有限的資源，將是對於現今動態生
產系統下最有意義之指標。但是，在傳統的多部機
流程工廠排程中，研究者忽略到工作人員會經由不
斷重複的操作相同或相似的動作，累積了經驗之
後，後序的工作將會駕輕就熟，而越作會越快，此
一現象稱之為學習效果(learning effect)。相關
學者在多機流程工廠平均流程時間的問題研究
上，卻將所有的工作的加工時間(job processing 
time)設為固定的常數。很顯然的，此種假設與很
多的實際的生產情況並不吻合。因此，本計畫嘗試
將學習效果(learning effect)的概念應用在多部
機流程工廠排程之中，來找出最佳化的排序使得平
均流程時間達到最小化。 
在傳統的多部機流程工廠排程的問題，不考慮
具有學習效果的因素時，Lenstra et al.(1977)已
証明出此問題為一個非常難解的問題(strong 
NP-hard)。很顯然的，本計劃所題的問題也是一個
非常難解的問題。因此，本計畫將著眼於如何快速
來找出最佳解(optimal solution)以及最佳近似解
(near-optimal solution)兩個方向之研究。在最
佳解方面；文獻上將參考 Ignall 和 Schrage(1965)
解雙機流程工廠的情形(two-machine) 與 Chung et 
al.(2002) 解 多 機 流 程 工 廠 ， Ahmadi 和
Bagchi(1990)和 Bansal(1977)所提出之下界值
(lower bound)和相關的刪除性質來提昇分枝界限
法(branch-and-bound algorithm)為主。在最佳近
似解方面；將參考最近一些好的近似法作為依據，
譬如，Nawaz et al. (1983) 、Ho (1995)、 Rajendran 
和 Ziegler (1997)、 Woo 和 Yim(1998)、 Liu 和
Reeves(2001)以及 Framinan et al.(2005)一些傳
統的多部機流程工廠等相關的近似方法。 
最後，將特別針對所推導出或發展的啟始演算
法加以模擬測試。在最佳解方面；將測試分支界限
法配合刪除的相關定理或下界值之下可解的工作
件數。在最佳近似解方面；將將測試近似演算法的
解和最佳解比較下的品質和效果。同時也將考慮到
改變不同的學習效果的情況下對於解題的品質和
解題的時間所帶來的影響。 
關鍵字：多機流程工廠、平均流程時間、學習效果。 
 
Abstract 
Flowshop scheduling problems play a very 
important role in the area of real production situations. 
In particular, the mean flow time minimization is one 
of the popular criteria on multiple-machine flowshop 
problem. Recently, the demand of low in-process 
inventory, high turn-around of jobs, and how to 
maximize the usage of finite resources have become 
the directions of modern dynamic manufacturing 
systems. However, in literature of the classical 
multiple-machine flowshop with the objective of 
minimum mean flow time or total completion time, 
most researchers assumed that job processing time is 
constant and fixed. But it can be found in real 
production situation that people and organizations 
become better at their task as the task are repeated. 
The process of improvement can be represented by a 
learning effect. 
In this project, thus, we attempt to explore a 
multiple-machine flowshop scheduling problem with a 
learning effect where the aim is to find a sequence that 
minimizes the mean flow time. The problem even 
without the learning effect has been shown to be a 
strong NP-hard problem by Lenstra et al. (1977). In 
this proposed project, therefore, we will develop an 
efficient way to derive the optimal solution, as well as 
the near-optimal solution. 
  In the previous literature for the mean flow time 
minimization on multiple-machine flow shop, Ignall 
and Schrage (1965), and Chung et al. (2002) used the 
branch-and-bound method to search for the exact 
solution, while Ahmadi and Bagchi (1990), Bansal 
(1977) presented the lower bounds. As to search for 
the near-optimal solution, Nawaz et al. (1983), Ho 
(1995), Rajendran and Ziegler (1997), Woo and Kim 
(1998) Liu and Reeves (2001), and Framinan et al. 
(2005) developed several best heuristics. 
  Based on the above constructive methods and ideas, 
 4
四. 計劃成果自評 
本計畫引用學習效果(learning effect)的概
念在傳統的多機模型排程(mutliple-machine 
scheduling flowshop)之中，來找出一個最佳化的
排序使得總完工時間的和(total completion time)
達 到 最 小 化 。 我 們 應 用 分 支 界 限 法
(branch-and-bound algorithm)配合刪除性質和下
界質找到的最佳解。並且應用傳統著名的六種演算
法在不同的學習效果下透過模擬將這些結果加以
比較分析。同時將結果撰寫成一篇文章(見附件)，
也將本篇文章投稿到相關的期刊。本計劃大致上與
原計劃是吻合. 
 
 
五、參考文獻 
1. Biskup, D., 1999, Single-machine scheduling with learning 
considerations, European     Journal of Operational Research 
115, 173-178. 
2.  Lee, W.C. and Wu, C.C., 2003, Minimizing total completion 
time in a two-machine flowshop with a learning effect, 
International Journal of Production Economics. 
3.  Lee, W.C., Wu, C.C., and Sung, H.J., 2003, A bi-criterion 
single-machine scheduling problem with learning considerations, 
Acta Informatica. 
4.  Mosheiov, G., 2001, Scheduling problems with a learning effect, 
European Journal of Operational Research 132, 687-693. 
5.  Mosheiov, G. and Sidney, J.B., 2003, Scheduling with general 
job-dependent learning curves, European Journal of Operational 
Research 147, 665-670. 
6.  Mosheiov, G. and Sidney, J.B., 2005, Note on scheduling with 
general learning curves to minimize the number of tardy jobs, 
Journal of the Operational Research Society 56, 110-112. 
7.  Pinedo, M., 2002, Scheduling: Theory, Algorithms, and Systems, 
Prentice Hall, Upper Saddle River, New Jersey. 
8.  Wright, T.P., 1936, Factors affecting the cost of airplanes, 
Journal of Aeronautical Science 3, 122-128. 
9.  Wu, C.C. and Lee, W.C., 2003, Single-machine makespan 
minimization with learning effect and an availability constraint, 
Information Processing Letters, 87, 89-93. 
10.  Wu, C.C., (2004), A makespan study of  the two-machine 
flowshop scheduling problem  with a learning effect, Journal of  
Statistics & Management Systems (accepted). 
11. Wu, C.C., (2004), The development of a solution to the 
single-machine total weighted completion time problem with a 
learning effect, International Journal of Management. 
(accepted).  
(4)其他相關之參考文獻 
1. Adiri, I., Pohoryles, D., (1982), “Flowshop/no-idle or no-wait 
scheduling to minimize the sum of completi-on times”, Naval 
Research Logistics Quarterly 29,495-504. 
2. Ahmadi, R.H., Bagchi, U., (1990), “Improved lower bounds 
for minimizing the sum of completion times of n-jobs over 
m-machines in a flowshop”, European Journal of Operational 
Research 44, 331-336. 
3. Allahverdi, A., Aldowaisan, T., (2002) “New heuristics to 
minimize total completion time in m-machine flo- wshops”, 
International Journal of Production Economics 77,71-83. 
4. Bansal, S.P., (1977) ”Minimizing the sum of completion times 
of n jobs over m machines in a flowshop a Branch and Bound 
Approach”, ALLE Transactions 9, 306-311. 
5. Beasley, J.E., (1990) “OR-Library: Distributing Test Problems 
by Electronic Mail”, Journal of the Operational Research 
Society 41,1069-1072 
6. Brown, A.P.G., Lomnicki, Z.A., (1966), “Some application of 
the branch and bound algorithm to the machine scheduling 
problem”, Operational Research Quarterly 17,173-186. 
7. Campbell, H.G., Dudek, R.A., Smith, M.L. (1970), “A 
heuristic algorithm for the n-job, m-machine sequencing 
problem”, Management Science 16,630-637. 
8. Dannenbring D.G., (1977), “An evaluation of flowshop 
sequencing heuristics”, Management Science 23, 1174-1182. 
9. Dudek, R.A., (1964), “Development of M-stage decision rule 
for scheduling n jobs through m machines”, - Operations 
Research 12,471-479. 
10. Framinan, J.M.; Leisten R., (2003), “An efficient constructive 
heuristic for flowtime minimisation in permutation flow 
shops”, 31,311-317. 
11. Framinan, J.M., Leisten, R.,Rajendran, C., (2003), “Different 
initial sequences for the heuristic of Nawaz, Enscore and Ham 
to minimise makespan, idletime or flowtime in the static 
permutation flowshop”, International Journal of Production 
Research 41,121-148. 
12. Framinan, J.M.; Leisten, R., Ruiz-Usano, R., (2002), “Efficient 
heuristics for flowshop sequencing with the objective of 
makespan and flowtime minimisation”, European Journal of 
Operational Research 141,559-569. 
13. Framinan, J.M., Leisten, R., Ruiz-Usano, R.,(2005), 
“Comparison of heuristics for  flowtime minimizsation in 
permutation flowshops”, Computers and Operations Research 
32,1237-1254. 
14. Garey, M.R., Johnson, D.S., Sethi, R., (1976), “The complexity 
of flowshop and jobshop scheduling”, Mathematics of 
Operations Research 1,117-129. 
15. Gupta, J.M.D. (1972),“Heuristic algorithms for multistage 
flowshop scheduling problem”, AIIE Transactions 4, 11-18. 
16. Gupta, J.N.D, Chen, C.L., Yap, L.Y., Deshmukh, H., 
(2000),“Designing a tabu search algorithm to minimize total 
flow time in a flow shop”, The Arabian Journal for Science 
and Engineering 25:79-93. 
17. Ho, J.C., Chang, Y.L., (1991), “A new heuristic for the n-job, 
m-machine flowshop problem”, European Journal of 
Operational Research 52,194-202. 
18. Hundal, T.S., Rajgopal, J., (1988), “An extension of Palmer’s 
heuristic for the flowshop scheduling problem”, International 
Journal of Production Research 26,1119-1124. 
19. Ignall, E., Schrage, L., (1965), “Application of the branch and 
bound technique to some flowshop scheduli- ng problems”, 
Operations Research 13,400-412. 
20. Lenstra, J.K., Rinnooy Kan, A.H.G. and Brucker, P., 1977, 
Complexity of machine scheduling problems, Annals of 
Discrete Mathematics 1, 343-362. 
21. Miyazaki, S., Nishiyama, N., Hashimoto, F., (1978), “An 
adjacent pairwise approach to the mean flowtime scheduling 
problem”, Journal of the Operations Research Society of Japan 
21,287-299. 
22. Nawaz M., Enscore, E.E., Ham, I., (1983), “A heuristic 
algorithm for the m-machine, n-job flow-shop sequencing 
problem”, OMEGA 11,91-95. 
23. Ogbu, F.A., Smith, D.K. (1990), “The application of the 
simulated annealing algorithm to the solution of the n/m/Cmax 
flowshop problem”, Computers and Operations Research 
17,243-253. 
24. Page, E.S. (1961), “An approach to the scheduling of jobs on 
machines”, Journal of the Royal Statistical Society 
23,484-492. 
25. Palmer, D.S., (1965), “Sequencing jobs through a multi-stage 
process in the minimum total time--a quick method of 
obtaining a near optimum”, Operational Research Quarterly 
16,101-107. 
26. Rajendran, C., (1992), “Heuristic algorithm for scheduling in 
flowshop to minimize total flowtime”, International Journal of 
Production Economics 29,65-73. 
27. Rajendran, C.,Chaudhuri, D., (1992), “An efficient heuristic 
approach to the scheduling of jobs in a flowshop”, European 
Journal of Operational Research 61,318-325. 
28. Rajendran, C., Ziegler, H., (1997),“An efficient heuristic for 
scheduling in a flowshop to minimize total weighted flowtime 
of jobs”, European Journal of Operational Research 
103,129-138. 
29. Szwarc, W., (1983), “The flowshop problem with mean 
compietion time criterion”, IIE Transactions 15,172 –176. 
30. Taillard, E., (1990) “Some Efficient Heuristic Methods for the 
Flow Shop Sequencing Problem”, European Journal of 
Operational Research 47,65-74. 
31. Taillard, E., (1993), “Benchmarks for basic scheduling 
problems”, European Journal of Operational Research 
1 
A total completion time minimization problem in a permutation flowshop with 
learning effect 
 
Chin-Chia Wu and Wen-Chiung Lee* 
Department of Statistics, Feng Chia University, Taichung, Taiwan 
August, 2006 
 
 
 
 
 
 
 
 
 
 
 
 
*Corresponding author: wclee@fcu.edu.tw. 
 
3 
1. Introduction 
Scheduling problems have received considerable attention for many years. Most 
researches assume that job processing times are constant from the first job to be 
processed until the last job to be completed. In particular, job processing times are 
independent of their position in the schedule sequence. However, this assumption 
might not be realistic in many situations. Recent empirical studies in several industries 
have demonstrated that unit costs decline as firms produce more of a product and gain 
knowledge or experience (Heizer and Render 1999, Russell and Taylor 2000). For 
instance, repeated processing of similar tasks improves the worker skills; workers are 
able to perform setup, to deal with machine operations or software, or to handle raw 
materials and components at a greater pace (Biskup 1999). This phenomenon is 
known as the “learning effect” in the literature. The impact of learning on productivity 
in manufacturing in the aircraft industry was first found by Wright (1936) and it was 
subsequently discovered in many industries in both manufacturing and service sectors 
(Yelle, 1979). 
Although the learning effect has been investigated in a variety of industries, it is 
relatively unexplored in the scheduling fields. Biskup (1999) was the first author to 
bring the concept of learning effect into scheduling problems. He proposed a model 
that the actual processing time of a job is a function of its position in the schedule 
5 
polynomially solvable. Moreover, Mosheiov and Sidney (2005) studied a special case 
where all jobs have a common due-date. They showed that the problem of minimizing 
the number of tardy jobs has a polynomial time solution even when the learning 
process is assumed to be general and job-dependent. Kuo and Yang (2006) introduced 
the time-based learning model which the employees learn more if they perform a job 
with longer processing time. 
    However, the concept of learning process is relatively unexplored in flowshop 
environment. To the best of our knowledge, only Wang and Xia (2005) studied the 
flowshop problems when the learning effect is present. They provided the worst-case 
bound of the shortest processing time first (SPT) rule for the makespan and the total 
completion time problems. They then showed that two special cases remain 
polynomially solvable for the makespan and the total completion time problems. In 
this paper, we study the total completion time problem in the multiple-machine 
flowshop. The rest of the paper is organized as follows. In the next section we 
describe the formulation of our problem. In Section 3, we introduce an elimination 
rule to speed up the search for the optimal solution. In Section 4, several lower bounds 
of the total completion time are derived for this problem. In Section 5, several 
well-known heuristic algorithms are also applied to solve this problem. In Section 6, a 
computational experiment is conducted to evaluate the efficiency of the 
7 
we want to find a schedule ∗S  such that ∑∑ ≤∗ )()( SCSC mjmj  for any schedule 
S . 
 
3. Dominance property 
The problem under consideration is NP-hard since it is NP-hard even without the 
learning effect (Lenstra et al. 1977). Therefore, a branch-and-bound algorithm may be 
a viable approach to derive the optimal solution. In order to facilitate the searching 
procedure for the optimal solution, dominance rules of sequences are vital for node 
elimination. In this section, we will prove the dominance rule derived from Chung et 
al. (2002) still hold when there is a learning effect. 
Definition 3.1. Let 1σ  and 2σ  be two partial schedules for the same set of jobs B. 
If ( ) ( )∑∑ ≤ σσσσ 21 mjmj CC  for every permutation σ  of the jobs in N – B, then it 
is said that 1σ  dominates 2σ ,. Moreover, dominance is strict if the inequality is strict. 
Theorem 3.1 Let 1σ  and 2σ  be two partial schedules for a set B which contains s 
jobs. If 
( ) ( ) ( ) ( ) ( ){ }2][1][11][2][ max σσσσ skskmkjmjm CCsnCC −−≥− ≤≤∑∑                   (1)  
then 1σ  dominates 2σ . Moreover, dominance is strict if inequality (1) is strict. 
Proof: Let S1 and S2 be two complete schedules derived from 1σ  and 2σ by 
appending the unscheduled jobs in the same order as follows 
9 
≤ [ ]( ) [ ]( ) ⎥⎦
⎤⎢⎣
⎡ ++ ∑
=
+−+
u
vr
a
isrisv ispS
1
1 11
C  – [ ]( ) [ ]( ) ⎥⎦
⎤⎢⎣
⎡ ++ ∑
=
+−+
u
vr
a
isrisv ispS
1
1 21
C  
= [ ] ( )111C Sisv −+  – [ ] ( )211C Sisv −+  
≤ [ ]( ) [ ] ( ){ }21111 CCmax SS iskiskmk −+−+≤≤ − . 
Therefore, we can derive equation (2) by an induction argument. Finally, we have 
∑∑
==
−
n
i
im
n
i
im SCSC
1
2][
1
1][ )()(  
={ [ ] ( ) [ ] ( )∑∑ −
=
+
=
+
sn
i
ism
s
i
im S
1
1
1
1 CC σ }－{ [ ] ( ) [ ] ( )∑∑ −
=
+
=
+
sn
i
ism
s
i
im S
1
2
1
2 CC σ } 
= [ ]( ) [ ]( )⎥⎦
⎤⎢⎣
⎡ −∑∑
==
s
i
im
s
i
im
1
1
1
2 CC σσ – [ ] ( ) [ ] ( )[ ]⎭⎬⎫⎩⎨⎧ −∑
−
=
++
sn
i
ismism SS
1
21 CC  
≥ [ ]( ) [ ] ( )⎥⎦
⎤⎢⎣
⎡ −∑∑
==
1
11
2 CC σσ
s
i
im
s
i
im – ( )sn − [ ]( ) [ ] ( ){ }211 CCmax SS skskmk −≤≤  
≥ 0. 
Thus, it implies that 1σ  dominates 2σ . 
Theorem 3.1 can be further reduced to the special case of two adjacent jobs 
provided as follows, which is useful to curtail the branching tree without excessive 
use of memory. 
Corollary 3.1 Let σ  be a partial schedule for a set of jobs B which contains s jobs, 
and let i and j be two distinct jobs in N– B. If 
( ) ( )∑∑ − jiCijC mvmv σσ ( ) ( ) ( ){ },max2 ]2[]2[1 ijCjiCsn skskmk σσ ++≤≤ −−−≥           (3) 
Then jiσ  dominates ijσ . Moreover, dominance is strict if inequality (3) is strict. 
 
4. Lower bounds 
11 
Thus, it is derived that the completion time for the (k+1)th job on machine m  is 
a
m
ui
kikukm kpSCSC )1()()( ]1[,][,]1[, ++≥ ∑
=
++ .                                  (4) 
Using the same argument, the completion times for the (k+2)th job on machines 
1, +uu , and m  are 
{ } akukuakukuku kpSCkpSCSC )2()(,)2()(max)( ]2[,]1[,]2[,1]1[,1]2[, ++++= +++−+−+  
       akuku kpSC )2()( ]2[,]1[, ++≥ ++  
a
ku
a
kuku kpkpSC )2()1()( ]2[,]1[,][, ++++≥ ++ , 
{ } akukuakukuku kpSCkpSCSC )2()(,)2()(max)( ]2[,1]1[,1]2[,]1[,]2[,1 ++++= ++++++++  
         aku
a
ku
a
kuku kpkpkpSC )2()2()1()( ]2[,1]2[,]1[,][, ++++++≥ ++++ , 
and 
a
m
ui
ki
a
kukukm kpkpSCSC )2()1()()( ]2[,]1[,][,]2[, ++++≥ ∑
=
+++ .                    (5) 
Similarly, it is derived from equations (4) and (5) that 
a
m
ui
jki
a
iku
j
i
kujkm jkpikpSCSC )()()()( ][,][,
1
1
][,][, ++++≥ ∑∑
=
++
−
=
+  for knj −≤≤1 . 
Therefore, the total completion time for S  is 
∑∑
+==
+=
n
kj
jm
k
j
jm SCSCSTC
1
][,
1
][, )()()(  
      ∑ ∑∑∑
+= =
−
+==
+−+−+≥
n
kj
a
m
ui
ji
n
kj
ju
a
km
k
j
jm jppjjnSCknSC
1
][,
1
1
][,][,
1
][, }{)()()()( .   (6) 
It is observed that the first two terms in equation (6) are determined, and a lower 
bound is obtained by minimizing the last two terms. It is noted in the third term that 
ajjn )( −  is a decreasing function of j, and thus, it is minimized by arranging the 
13 
(2003), and Framinan et al.(2003). The algorithms are briefly described as follows. 
NEH heuristic: 
Nawaz et al. (1983) proposed a NEH heuristic for the makespan problem. Later, 
they modified the procedure for the flow time criterion. The steps are as follows.  
Step 1. Arrange the jobs in decreasing order according to the total processing time on 
each machine. Let S denote the resulting sequence and set k=1. 
Step 2. Set k=1, select the first job in S to create a partial sequence π . 
Step 3. Update k=k+1. Select the kth job from S and insert it in k possible positions in 
the current partial sequence π . Among k sequences, select the one with the 
minimum partial mean flow time as the current partial sequence π . 
Step 4. If nk = , then stop, else go to Step 3. 
NEH-A heuristic: 
Framinan et al. (2003) extensively investigated the performances of the NEH heuristic 
by analyzing 177 different approaches for ranking the jobs in the first step of the NEH 
heuristic. They found that the best results are obtained by ranking the jobs according 
to decreasing order of the sum of the absolute differences of job processing time on 
every machine with all other jobs, that is ∑ ∑= =′ ′−= mi nj jiijj ppP 1 1 . We refer this 
adaptation as NEH-A in the following section. 
RZ heuristic: 
15 
a partial sequence π . Store the remaining n-1 jobs into U. 
Step 2. Update k=k+1.  
Step 3. Select a job from U and insert it into k possible positions in π . Select the 
sequence with the minimum partial mean flow time among k sequences and 
set it as a candidate solution. Remove the job from U. 
Step 4. If U is not empty, go to Step 3. Else, go to Step 5.  
Step 5. Select the sequence with the minimum mean flow time among n-k+1 
candidate solutions, and set it as the current solutionπ . Store jobs expect the 
ones in π  into remaining set U.  
Step 6. If k= n, stop, else, go to Step 2. 
LR heuristic: 
Liu and Reeves (2001) designed an index function to determine the job order based 
on two characteristics. One is that the function should consider not only how well the 
job to be appended fits the last job in the current partial sequence but also the effect of 
choosing that job on other remaining jobs. The other is that the idle time on earlier 
stage machines might cause more delays in the completion of the jobs in the 
remaining jobs than it did on later stage machines. When considering the total idle 
time of all the machines, the index function should be give different weights to the 
idle time of different machines. The procedure of the algorithm is as follows: 
17 
Step 4. If 2>k , then for all ),1(, kjikiji ≤<<≤ , obtain all possible sequences 
by interchanging jobs in positions i and j of the partial sequence π . If, among 
all 2/)1( −⋅ kk  partial sequences, one sequence π ′  holds a lower partial flow 
time than S, then set π ′=S . 
Step 5. If the remaining set φ=U  (or, alternatively, if nk = ) then stop, else go to 
Step 2. 
 
6. Computational experience 
A computational experiment is conducted to evaluate the performances of the 
branch-and-bound and the heuristic algorithms. The programs are coded in Fortran 90 
and run on a Pentium 4 personal computer. The job processing times on M1 , M2 , …, 
Mm are generated from a uniform distribution over the integers 1 to 99. Although this 
distribution is not likely to be found in practice, Framinan et al. (2005) claimed that 
but it produces difficult type of problem instances, and therefore constitutes an 
excellent benchmark for the comparison of heuristics. In order to study the impact of 
the parameters, the values of the learning effect are taken to be 90%, 80%, and 70%, 
which correspond to a＝－0.152, －0.322, and －0.515, respectively, according to 
Biskup’s (1999) model. 
The computational experiment consists of four parts. In the first part, the job size is 
19 
bounds and the dominance property are more powerful when the learning effect is 
80%. 
In order to evaluate the efficiency of the lower bounds, we perform the 
branch-and-bound algorithms with only one lower bound in the second part. The 
number of machines is fixed at 5 and two job sizes (n= 8, 10) are tested. The results 
are summarized in Table 2, where “Ο ” means the lower bound is included and “Χ ” 
means it is not. For instance, ),,,,( ΧΧΧΧΟ  represents only the first lower 
bound, 1LB , is included. The average and maximum number of nodes and the average 
and maximum CPU time (in seconds) are presented for the branch-and-bound 
algorithms. As a consequence, there are 30 experimental conditions examined, and 
100 replications are randomly generated for each condition. A total of 3,000 instances 
are generated in the second part of the experiment. For the branch-and-bound 
algorithm with only one lower bound, it is found that the lower bound based on the 
completion time of a later machine is more effective than that based on the 
completion time of an earlier machine. It is also observed that the branch-and-bound 
algorithm with five lower bounds included is still the most efficient one in term of the 
number of nodes and the execution time. Thus, the branch-and-bound algorithm with 
all the lower bounds included is recommended and used in later analysis. 
In the third part of the experiment, the branch-and-bound and six heuristic 
21 
proposed by Rajendran and Ziegler (1997) performs the best for small-job-sized 
problems, followed by the heuristic algorithm presented by Framinan and Leisten 
(2003). 
In order to study the performance of the heuristic algorithms for the large job size 
problems when the learning effect is present, four different job sizes (n＝ 50, 100, 
150, and 200) combined with four different job sizes (m= 5, 10, 15, and 20) are used 
in the final part of the experiment. The average and the maximum relative percentage 
deviation (RPD) are reported for each heuristic. The RPD has been obtained with 
respect to the best known solution for each instance. As a result, 48 experimental 
conditions are examined, and 100 replications are randomly generated for each 
condition. A total of 4,800 instances are generated and the results are summarized in 
Table 4. It is seen that there is no absolute dominance relation between the heuristics, 
since their mean relative percentage deviations are all greater than 1. It is surprisingly 
seen that the heuristic algorithm proposed by Rajendran and Ziegler (1997) has the 
largest mean RPD, although it has the best performance when the job size is small. 
Overall, the heuristic algorithm proposed by Framinan and Leisten (2003) performs 
best among all heuristics. The trend becomes more significant as the job size, or the 
number of machines increases, or the learning effect is stronger. 
 
23 
International Journal of Production Economics 79, 185-196. 
4.  Framinan, J.M., Leisten, R., 2003. An efficient constructive heuristic for flowtime 
minimization in permutation flow shops. OMEGA: The International Journal of 
Management Science 31, 311-317. 
5. Framinan, J.M., Leisten, R., Rajendran, C., 2003. Different initial sequences for the 
heuristic of Nawaz, Enscore and Ham to minimize makespan, idletime or 
flowtime in the static permutation flowshop. International Journal of Production 
Research 41,121-148. 
6. Framinan, J.M., Leisten, R., Ruiz-Usano, R., 2005. Comparison of heuristics for 
flowtime minimization in permutation flowshops. Computers and Operations 
Research 32, 1237-1254. 
7. Heiser, J., Render, B., 1999. Operations management, 5th edition, Prentice Hall: 
Englewood Cliffs, NJ. 
8. Kuo, W.H., Yang, D.L., 2006. Minimizing the makespan in a single machine 
scheduling problem with a time-based learning effect. Information Processing 
Letters 97, 64-67. 
9. Lee, W.C., Wu, C.C., 2004. Minimizing total completion time in a two-machine 
flowshop with a learning effect. International Journal of Production Economics 88, 
85-93. 
25 
18. Russell, R., Taylor, III.B.W., 2000. Operations management: multimedia version, 
3rd edition. Prentice Hall: Upper Saddle River, NJ. 
19. Wang, J.B., Xia, Z.Q., 2005. Flow-shop scheduling with a learning effect. Journal 
of the Operational Research Society 56, 1325-1330. 
20. Woo, D.S., Yim, H.S., 1998. A heuristic algorithm for mean flowtime objective in 
scheduling. Computers and Operations Research 25, 175-182. 
21. Wright, T.P., 1936. Factors affecting the cost of airplanes. Journal of Aeronautical 
Science 3, 122-128. 
22. Yelle, L.E., 1979. The learning curve: historical review and comprehensive survey. 
Decision Science 10, 302-328. 
27 
Table 2. Comparison results of the lower bounds on the branch-and-bound algorithm (m=5) 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
   Branch-and-bound algorithm 
    Number 
of nodes 
 CPU time  
n a ( 54321 ,,,, LBLBLBLBLB ) mean max mean max 
 O X X X X 3350.82 9508 0.18 0.55 
 X O X X X 1957.58 7417 0.11 0.44 
 X X O X X 1154.18 4978 0.06 0.27 
 X X X O X 612.10 2243 0.03 0.12 
 X X X X O 360.13 1722 0.02 0.08 
90 
 O O O O O 258.95 1217 0.02 0.08 
 O X X X X 54.68 303 0.00 0.02 
 X O X X X 43.40 404 0.00 0.02 
 X X O X X 29.88 111 0.00 0.02 
 X X X O X 26.06 65 0.00 0.02 
 X X X X O 22.86 57 0.00 0.02 
80 
 O O O O O 19.61 41 0.00 0.02 
 O X X X X 1748.49 5811 0.05 0.16 
 X O X X X 1050.78 4088 0.03 0.12 
 X X O X X 632.10 4205 0.02 0.12 
 X X X O X 246.25 2919 0.01 0.08 
 X X X X O 82.43 369 0.00 0.02 
8 
70 
 O O O O O 60.82 256 0.00 0.02 
 O X X X X 95378.97 502771 6.53 39.11 
 X O X X X 47529.49 294547 3.06 18.77 
 X X O X X 20484.88 126087 1.29 8.56 
 X X X O X 8714.33 69742 0.54 4.27 
 X X X X O 4808.22 45614 0.29 1.73 
90 
 O O O O O 2537.57 30099 0.20 2.28 
 O X X X X 1124.22 13579 0.06 0.64 
 X O X X X 436.55 4709 0.02 0.25 
 X X O X X 164.96 3639 0.01 0.20 
 X X X O X 91.15 2288 0.00 0.12 
 X X X X O 57.47 182 0.00 0.02 
80 
 O O O O O 36.15 117 0.00 0.02 
 O X X X X 40030.08 174227 1.52 5.78 
 X O X X X 19845.66 131167 0.77 4.55 
 X X O X X 9254.68 109026 0.37 3.89 
 X X X O X 3401.7 34135 0.16 1.47 
 X X X X O 607.70 4045 0.03 0.19 
10 
70 
 O O O O O 439.86 2241 0.03 0.14 
29 
  70 5838.34 78646 0.24 3.22 1.015 1.079 1.030 1.130 1.000 1.011 1.053 1.208 1.017 1.108 1.016 1.070 
 3 90 149386.53 1813646 10.49 118.17 1.016 1.079 1.023 1.091 1.004 1.027 1.040 1.189 1.012 1.085 1.014 1.079 
  80 192.07 1487 0.02 0.16 3.697 11.090 3.724 11.433 3.633 11.09 3.788 11.307 3.681 11.061 3.683 11.09 
  70 12557.82 111376 0.72 5.31 1.018 1.087 1.032 1.129 1.004 1.065 1.064 1.234 1.022 1.221 1.021 1.071 
 5 90 352470.44 7897868 41.72 887.94 1.022 1.077 1.018 1.049 1.007 1.040 1.041 1.115 1.020 1.096 1.015 1.072 
  80 243.95 2403 0.04 0.42 2.546 5.426 2.544 5.354 2.494 5.344 2.593 5.367 2.560 5.408 2.537 5.452 
  70 53085.88 1622444 3.75 97.62 1.020 1.12 1.022 1.075 1.004 1.006 1.063 1.154 1.064 1.227 1.015 1.109 
16 2 90 282467.66 3047114 18.46 186.52 1.010 1.04 1.031 1.178 1.001 1.015 1.041 1.159 1.007 1.077 1.009 1.042 
  80 386.61 4714 0.03 0.34 9.011 41.108 9.158 40.344 8.905 38.966 9.257 40.064 9.000 39.263 9.019 41.242 
  70 38879.05 710577 2.01 33.44 1.014 1.083 1.038 1.171 1.001 1.017 1.056 1.240 1.017 1.163 1.015 1.062 
 3 90 1034383.81 19341402 89.02 503.75 1.021 1.106 1.030 1.106 1.004 1.017 1.046 1.134 1.012 1.083 1.017 1.060 
  80 1121.96 28232 0.15 3.73 4.652 14.957 4.696 14.688 4.575 14.505 4.802 14.807 4.642 15.455 4.628 14.567 
  70 119070.01 1585569 8.85 103.08 1.028 1.147 1.034 1.138 1.003 1.073 1.068 1.202 1.026 1.250 1.022 1.153 
 5 90 6143167.00 81183255 831.24 9705.36 1.023 1.115 1.019 1.072 1.006 1.045 1.049 1.114 1.026 1.118 1.016 1.071 
  80 1534.03 29526 0.35 6.53 2.734 5.986 2.757 5.821 2.692 5.831 2.834 5.840 2.757 6.043 2.719 5.876 
  70 663043.38 19454919 57.66 1639.70 1.027 1.183 1.027 1.158 1.002 1.026 1.069 1.180 1.063 1.279 1.018 1.079 
 
 
 
 
 
 
 
 
 
 
31 
80 1.0215 1.0689 1.0225 1.0529 1.1091 1.1613 1.0127 1.0350 1.0853 1.1771 1.0003 1.0143 
70 1.0164 1.0806 1.0278 1.0603 1.1390 1.1909 1.0119 1.0804 1.1224 1.2965 1.0009 1.0147 
90 1.0209 1.0409 1.0602 1.0860 1.1231 1.1888 1.0150 1.0316 1.0033 1.0217 1.0016 1.0152 
80 1.0257 1.0594 1.0709 1.1069 1.1573 1.2641 1.0206 1.0414 1.0065 1.0321 1.0011 1.0149 
5 
70 1.0273 1.0622 1.0717 1.1134 1.2089 1.2824 1.0253 1.0549 1.0143 1.0714 1.0010 1.0151 
90 1.0256 1.0594 1.0347 1.0577 1.1163 1.1588 1.0146 1.0405 1.0127 1.0948 1.0029 1.0208 
80 1.0305 1.0648 1.0413 1.0731 1.1390 1.2449 1.0201 1.0523 1.0138 1.0722 1.0020 1.0236 
10 
70 1.0269 1.0983 1.0495 1.1296 1.1863 1.2821 1.0204 1.0644 1.0388 1.1403 1.0012 1.0338 
90 1.0252 1.0593 1.0205 1.0411 1.1122 1.1566 1.0117 1.0438 1.0198 1.0922 1.0012 1.0327 
80 1.0251 1.0675 1.0267 1.0541 1.1270 1.1922 1.0166 1.0478 1.0413 1.1134 1.0003 1.0100 
15 
70 1.0222 1.0818 1.0359 1.0747 1.1671 1.2538 1.0178 1.0595 1.0810 1.2342 1.0006 1.0145 
90 1.0264 1.0604 1.0153 1.0354 1.1037 1.1448 1.0123 1.0364 1.0251 1.0806 1.0009 1.0144 
80 1.0326 1.0624 1.0239 1.0476 1.1196 1.1590 1.0139 1.0487 1.0694 1.1412 1.0008 1.0196 
150 
20 
70 1.0194 1.0775 1.0324 1.0616 1.1526 1.2652 1.0128 1.0502 1.1008 1.2694 1.0009 1.0221 
90 1.0177 1.0333 1.0679 1.1000 1.1274 1.2086 1.0138 1.0263 1.0027 1.0165 1.0018 1.0145 
80 1.0211 1.0375 1.0753 1.1179 1.1629 1.2578 1.0191 1.0370 1.0057 1.0225 1.0007 1.0108 
5 
70 1.0286 1.0624 1.0830 1.1356 1.2144 1.3166 1.0258 1.0627 1.0139 1.0619 1.0015 1.0406 
90 1.0243 1.0421 1.0379 1.0591 1.1212 1.1633 1.0145 1.0337 1.0061 1.0342 1.0033 1.0225 
80 1.0294 1.0657 1.0450 1.1029 1.1467 1.1966 1.0182 1.0532 1.0066 1.0297 1.0030 1.0233 
10 
70 1.0269 1.0733 1.0509 1.0986 1.1893 1.2605 1.0216 1.0624 1.0277 1.1580 1.0006 1.0145 
90 1.0244 1.0507 1.0238 1.0519 1.1115 1.1669 1.0122 1.0354 1.0148 1.0634 1.0009 1.0101 
80 1.0274 1.0553 1.0326 1.0628 1.1316 1.1847 1.0167 1.0459 1.0246 1.0909 1.0009 1.0179 
15 
70 1.0224 1.1135 1.0428 1.0776 1.1798 1.2680 1.0174 1.0610 1.0631 1.1712 1.0003 1.0113 
90 1.0251 1.0484 1.0155 1.0374 1.1083 1.1506 1.0102 1.0341 1.0244 1.0783 1.0006 1.0140 
80 1.0235 1.0503 1.0267 1.0551 1.1245 1.1804 1.0141 1.0407 1.0533 1.1224 1.0004 1.0085 
200 
20 
70 1.0190 1.0762 1.0335 1.0725 1.1606 1.2240 1.0155 1.0573 1.0878 1.2317 1.0018 1.0442 
