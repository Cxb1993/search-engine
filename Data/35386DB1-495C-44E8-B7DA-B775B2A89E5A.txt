a well-known existing algorithm. Therefore, this project contributes 
manufacturing green network equipment.  
 
 
2 
 
一、中文摘要 
近年來，網路不止是個人娛樂與學習之重要媒介，更成為商業運作與政府行政系統運作
之重要核心，越來越多重要的資訊需倚靠網路系統傳遞，因此，網路安全技術已成為現今重
要之研究領域。因網路入侵偵測系統能夠在不干擾終端使用者下，自動偵測網路系統中之入
侵事件或不當使用行為，提升網路管理上的效率，因此，網路入侵偵測/防禦系統(Intrusion 
Detection System/Intrusion Prevention System, IDS/IPS)是一個重要的新一代網路設備，預期未
來將會被更普及運用。然而，現今的網路入侵偵測系統大多使用 TCAM 或 Bloom Filter 架構，
已有研究指出現有設計架構的耗電量高且造價昂貴。 
因此，本計畫提出一個高效能省電之封包檢測演算法，此演算法可運用於省電且高效能
之網路入侵偵測系統，本設計不採用耗電量高之模組，相反地，將採用低耗電量之架構，且
不使用特殊硬體，同時降低開發成本。本計畫所提出之演算法可採用小型嵌入式系統 NetLogic 
XLS408 實做此設計雛型，實驗結果顯示，此系統平台耗電量僅需 46W ~ 51.2W，比一般設
備小很多(一般約 125W)，且所提出之演算法執行速度比現行大眾熟知之方法快約 65%。此計
畫成果能被用於未來小型入侵偵測系統參考模型，並對推動網路設備踏入綠色電器產業有所
貢獻。 
關鍵字：入侵偵測系統、網路安全、省電、封包檢測、綠能產業 
二、英文摘要 
In the recent years, network is not only an important media for entertainment and learning, but 
also a main interconnecting system for businesses, and for the departments of the government. 
More and more critical information is transmitted by the network systems. Therefore, the network 
security becomes an essential research issue. Network-based intrusion detection system can 
automatically detect intrusions or misuses in the network without disturbing end-users. Thus results 
in improving the efficiency of network management. Consequently, network-based intrusion 
detection / prevention system (IDS/IPS) has become one of the most important next-generation 
network equipment, which would also be generally deployed in the near future. However, most 
intrusion detection systems are built based on the architecture of TCAM or Bloom Filter. Some 
research results have pointed out that theses architectures are power-consuming and expensive.  
  Therefore, in this project we propose a power-efficient and high-performance network-based 
intrusion detection system. We use a small embedded system NetLogic XLS408 as a platform to 
implement our proposed algorithm. Our design does not adopt power-consuming modules, and on 
the other hand use power-efficient architectures and general modules to reduce the cost. The 
experimental results shows that the platform requires only 46W ~ 51.2W, which is much smaller 
than the general platform. Additionally, the proposed algorithm is about 65% times faster than a 
well-known existing algorithm. Therefore, this project contributes manufacturing green network 
equipment.    
Keyword: Intrusion Detection System, Network Security, Power-efficient, Packet Inspection, Green 
IT 
4 
 
string matching algorithm to verify a match. Furthermore, this Bloom Filter based algorithm can be used 
only in the case that all patterns are longer than a certain length. Lu et al. used several binary CAMs and 
BFs to implement parallel compressed deterministic finite automata (DFAs), and Dharmapurikar et al. 
combined AC with BFs for packet inspection [19], [20]. Both approaches utilize parallel BFs, and 
assume that a BF can execute one query every clock cycle. However, these architectures and 
assumptions are only valid in specific hardware implementations. BFs are inefficient in software 
implementations, because one BF is composed of several hash functions, which generally have long 
computation times in software [20], unless hash functions are carefully selected for different CPUs. 
However, the previous methods do not consider reducing the power consumption of the IDS. Green 
computing (or Green IT) has become an important issue recently, and there is no doubt that it will 
become more important in the future. Therefore, in this study we would like to design a power-efficient 
multiple-pattern matching algorithm for IDSs. 
  
 
Figure 1. The power consumption per read access to Static Random Access Memory (SRAM) and 
Dynamic Random Access Memory (DRAM) [4]. 
 
II. Method 
Most hardware-based IDSs use TCAMs as the core of the IDSs to obtain good performance. However, 
TCAM does not scale well in terms of power consumption [1]. The power consumption per bit of 
TCAM is about 3 micro-Watts, which is 150 times more than Static Random Access Memory (SRAM) 
needs [2]. The BF-based methods are also not suitable for low-power designs, as four BFs require about 
5 Watts [3]. Moreover, the traditional Boyer-Moore-based algorithms and Aho-Corasick-based 
algorithms generate large index tables or shift tables for fast searching. Due to the large table, a large 
external memory has to be used in the implementation. However, frequently accessing the external 
memory (to read patterns or tables) significantly decreases the matching efficiency due to the long and 
indeterminable access latency of the external memory, and additionally external memory access requires 
more power. For example, Intel IXP2x00 needs about one cycle for one basic instruction, but about 150 
cycles for one access from SRAM (or 250–300 cycles from DRAM) [5]. The memory latency strongly 
6 
 
Since, Goto(0, s) = 1, the machine goes to state 1 and read the next character ‘i’. Because ‘i’ is not an 
expected character in the state 1 (Goto(1, i) = fail), the Fail function is called and get Fail(1) = 0. Then 
the machine goes to the state 0, and read the next character ‘h’. As Goto(0, h) = 4, and with the same 
steps as before we get Goto(4, e) = 5, the state machine goes to state 5 and have a valid output value: 
Output(5) = {he}. As a result, we can know that the input T contains one pattern ‘he’. This example 
illustrates how the AC matching algorithm works. 
 
Figure 3. A parent-child set. 
 
Aho et al mentioned that the Goto and Fail functions could be combined into one Next function: 
( , )st codeδ  to eliminate all fail transitions. Figure 3 illustrates the Next function using the same example 
as Figure 2. The Next function is from combining the results of Goto function, and the results of 
precomputing every sequence of possible Fail functions. Using the Next function as the transition 
function in the AC algorithm in place with the Goto and Fail function, the AC algorithm becomes a 
deterministic finite automaton. 
A simple data structure to implement automata is to save all pointers of child nodes in the parent 
node. When the branch size is four (where the input is 2-bit coding), it means every node in automata 
needs four pointers to indicate its four child nodes while using the simple structure. The space 
complexity of the simple structure is O(2n), where n is the bit-width of the input code.  
According to the Next function of the AC algorithm, the basic original data structure ACO for a node 
is shown as follows.  
struct ACO{ 
struct ACO *next_state[| Λ |]; 
struct Result *pattern_list; 
}; 
 
The pointer next_state will indicate the address of the next state directly and the pointer pattern_list is 
the memory block storing corresponding patterns of this state. Since every next pointer is saved in a 
state, the address of the next state can be obtained directly and only one memory reference is required 
8 
 
Using the Next function of the AC algorithm, there is only one pointer, next_state, to indicate the 
address of the first valid next state. To obtain the address of a valid next state with a given character a, 
we have to scan every bits in the bitmap next_flag prior to a and accumulate the number of valid prior 
bits. The accumulation routine is called “popcount”. The matching procedure using the ACB structure is 
shown as follows.  
  
We can see that the accumulation routine in lines 4-5 of the ACB_matching procedure is very time 
consuming. In the worst case, it costs | Λ | bit-access and | Λ | adds for each input character. Tuck et al 
admitted that the popcount is very expensive for software implementation. Although in the hardware 
implementation the popcount may have the opportunity to be optimized, the complexity and cost are still 
high. 
Therefore, an efficient function to calculate the address of the next node is required. Consequently, we 
will focus on providing an efficient data structure which requires compact memory without sacrificing 
processing time. 
B. The AC Algorithm with Enhanced Structure 
Observing the architecture of an automaton, it is obviously that a parent node has several paths to its 
child nodes. Since the next node only depends on the current node and the current input while traversing 
the graph, here simply consider only one pair at a time: one parent and all of its child nodes (Figure 3). 
Assume the input is drawn from a set }2,..,2,1|{ ni ia ==Λ , where 2n is the number of paths and n is the 
bit-width of the input code (the stride size of automata). Therefore, an efficient function to calculate the 
address of the next node is required. Therefore, we assume there is a magic number χ  and define the 
magic function ℜ  as 
,)(%: kaf ii =ℜ χ  
where f is a function that maps the code set Λ  into a numerical set, n % m returns the remainder when 
n is divided by m, and k is the index number of a child node (Ck). In other words, ℜ  acts as a path 
decoder that returns the correct next node for each input. The magic number χ  can be obtained by 
Chinese Remainder Theorem (CRT) [6]. 
Consequently, we will focus on providing an efficient data structure which requires compact memory 
without sacrificing processing time. Modifying the original ACO structure and adding some required 
fields, the data structure for AC, named ACE, is proposed as shown as follows. 
struct ACE{ 
bitmap next_flag[| Λ |];   
struct ACE *fail_ptr;   
struct ACE *next_start;  
struct Result *pattern_list;  
long_int MagicNum;      
};  
10 
 
where Ncache, NDRAM and NI refer the number of accessing cache, the number of accessing DRAM, and 
the number of instructions for matching algorithm; where Pcache, PDRAM, and PI mean the power 
consumption per access or per instruction for accessing cache, for accessing DRAM, and for performing 
one instruction. The number of memory access per input code for AC-based algorithms is at most two. 
Therefore, in the case of using ACE, Ncache = 2 and NDRAM = 0; while using ACO, Ncache = 0 and NDRAM 
= 2. According to Figure 1, when the size of SRAM (cache) is 512KB, Pcache is about 0.21nJ; and when 
the size of DRAM is 8 MB, PDRAM is about 1.2nJ. Because ACE uses a simple magic function, the NI for 
ACE is just a little larger than ACO. Consequently, ACE is a power-efficient solution.  
 
Figure 4. The block diagram of the embedded platform XLS408. [21] 
 
IV. Experimental Results and Discussions 
  In order to verify that the ACE algorithm can be used on a small power-efficient embedded platform 
and can perform well, the ACE algorithm is implemented on the NetLogic XLS408 development board 
[21]. The XLS408 development board has XLS408 processor integrates up to 8 fine-grain processing 
threads (using single-clock thread context switching) from two MIPS64 CPUs, 1.2 GHz operation, 32 
KB L1 data cache, 32 KB L1 instruction cache, 1 MB L2 cache, 1 GB Dual DDR2 DRAM, and eight 
10/100/1000 Ethernet MACs. The block diagram of XLS 408 is shown in Figure 4, and the picture of 
the development board is shown in Figure 5. Embedded Linux is installed in the system and the 
proposed ACE algorithm is programmed in C language.  
  To compared with the embedded platform, a personal computer with Intel(R) Pentium(R) 4 CPU, 
12 
 
 
(a)                    (b) 
Figure 6. (a) The power consumption when seven ACE processes are running in the XLS408 platform.   
(b) The power consumption when seven ACE processes are running in a general PC. 
 
Table 1. The power consumption of XLS408 and PC in idle mode and when running ACE processes. 
Platform Number of processes CPU usage Power consumption 
XLS 408 0 - 42.4 W 
1 12.5%  45.5 ~ 46 W 
2 24.9% 46.5 ~ 46.7 W 
7 86.5% 51.3 ~ 51.6 W 
PC 0 - 71.3 W 
1 99% 124.8 ~ 125.1 W 
2 99% 125.8 ~ 126.2 W 
7 99% 125.8 ~ 126.2 W 
 
Table 2. The total power consumption when varying the ratio of idle period to busy period. 
Idle period Busy period PC XLS408 
80% 20% 81.8W 43.9W 
60% 40% 92.6W 45.8W 
40% 60% 103.4W 47.7W 
20% 80% 114.2W 49.6W 
 
 
 
14 
 
[17] Sarang Dharmapurikar, Praveen Krishnamurthy, Todd Sproull, John lockwood, "Deep Packet 
Inspection using Parallel Bloom Filters," 11th Symposium on High Performance Interconnects, pp. 
44–51, August 2003 
[18] Christopher Kruegel, Fredrik Valeur, Giovanni Vigna, and Richard Kemmerer, "Stateful Intrusion 
Detection for High-Speed Networks," Proceedings of IEEE Symposium on Security and Privacy, pp. 
285, May 2002. 
[19] Sarang Dharmapurikar and John Lockwood, "Fast and Scalable Pattern Matching for Network 
Intrusion Detection Systems," IEEE Journal on Selected Area in Communications, Vol. 24, No. 10, 
pp. 1781–1792, Oct. 2006. 
[20] Intel Network Processors, http://www.intel.com/design/network/products/npfamily/index.htm 
Ozgun Erdogan and Pei Cao, "Hash-AV: Fast Virus Signature Scanning by Cache-Resident 
Filters," Proceedings of IEEE Global Telecommunications Conference, Vol. 3, pp.1-5, St. Louis, 
MO, Nov. 28, 2005. 
[21] NetLogic XLS 408, 
http://www.netlogicmicro.com/Products/ProductBriefs/MultiCore/XLS408B.htm  
[22] Nathan Tuck, Timothy Sherwood, Brad Calder, George Varghese, “Deterministic Memory –
Efficient String Matching Algorithms for Intrusion Detection,” IEEE Infocom2004, Hong Kong, 
March 2004. 
 
  
16 
 
A Hybrid and Auto-adjusted Spam Filter 
 
Shu Bin Chen 
Department of Computer Science and 
Communication Engineering 
Providence University 
Taichung, Taiwan, R.O.C. 
g9873007@pu.edu.tw 
 
          
 
 
Hsiao Ping Lee 
Department of Applied Information 
Sciences 
Chung Shan Medical University, 
Taichung, Taiwan, R.O.C. 
ping@csmu.edu.tw 
 
Tzu-Fang Sheu* 
Department of Computer Science and 
Communication Engineering 
Providence University 
Taichung, Taiwan, R.O.C. 
fang@pu.edu.tw 
 
Abstract—The spam E-mail problem has become more 
and more serious today.  Enterprises and users have to spend 
lots of time on filtering out useful messages from spam. A 
variety of spam filtering mechanisms had been proposed, 
including list-based method, behavior-based filter, 
content-based method, and cocktail filtering mechanisms. In 
order to improve the accuracy of spam filters, this paper 
proposes a novel spam detection system, which combines a 
behavior-based method and a blacklist method. The proposed 
system will  analyze spam behaviors and then generate 
behavior patterns.  Additionally, the propose system will use 
an auto-updated blacklist mechanism which collects the 
updates from anti-spam organizations. The proposed system 
also uses a feedback mechanism that adjusts the behavior 
patterns based on users’ responses. Therefore, the proposed 
spam detection system can perform more efficiently and 
accurately.  
Keywords- spam; list-based method; behavior-based filter; 
content; Internet. 
I.  INTRODUCTION  
Spam (unsolicited bulk mail, or spam mail) was defined 
as sending a lot of E-mail without recipients’ authorization 
[1]. A large number of spam mails always waste not only 
users’ time but also network/system resource. With the 
rapidly growing Internet, spam problem has become more 
and more critical. According to the security report from 
Symantec MessageLabs in 2010, it says that the average 
ratio of the global volume of spam E-mail is up to 89.1% [2]. 
Spam has become a critical research issue. A variety of spam 
filtering mechanisms had been proposed, including list-based 
method, behavior-based filter, content-based method, and 
cocktail filtering mechanisms. 
II. BACKGROUND  
A. List-based filter 
The common list-based methods are based on blacklists 
and white-lists [6]. Blacklist spam filter blocks the messages 
based on senders’ IP addresses or domains that listed in the 
database. Some anti-spam organizations release free 
blacklists, e.g. open relay blacklist. Contrarily, white-list 
filter only accepts the messages which senders’ IP addresses 
or domains are listed in the database. The list-based spam 
filters have to update and maintain the lists regularly to keep 
the lists correct.  However, the sender of spam E-mails are 
mostly fake, and thus the accuracy of list-based spam filter is 
not good. In general, list-based spam filters usually cooperate 
with other kind of filtering mechanisms [6].  
B.  Content-based filter  
   Content-based spam filters define keywords or 
signatures of the spam, and search the keywords in the 
E-mail content. While the keyword is found in message 
content, the message will be marked as spam. Content-based 
filter are divided into two categories based on the generation 
of keywords and the decision methods: heuristic filter and 
statistical filter. The heuristic-based filter defines the 
keyword manually. The statistical-based filter divides E-mail 
content into many small tokens, and uses statistical formulas 
to calculate the probability that the message is a spam based 
on the tokens. The content-based spam filter has good 
detection rate. However, content-based filter has to scan the 
entire message that results in low performance and high 
latency.  
Jiansheng et al. [8] proposed a statistical-based Bayesian 
filter for spam detection. This method collects a large 
number of spam and non-spam messages, and then analyzes 
the messages. After the preprocessing and training phase, 
two spam token databases are constructed based on the level 
of damage of spam: ordinary spam database (including 
commercial and educational) and malignant spam database 
(including religious, political and pornography). The 
appearance probability of each token is calculated and stored 
in three hash tables: hash_good for non-spams, hash_bad for 
ordinary spam and hash_very_bad for malignant spam. For 
each incoming message, it has to be divided into small 
tokens. Then, based on Bayes Theorem and the appearance 
probability of pre-sampled tokens in the hash tables, the 
probability of the incoming message being a spam can be 
calculated.  
Jungsuk et al. [10] used heuristic feature selection 
method to artificially measure the availability of each feature. 
This system was composed of several phases. Firstly, it 
collects E-mail content and then extracts URLs in the content. 
Then, the URLs are forwarded to a crawler machine and a 
feature extractor. The crawler machine will download html 
content based on the URLs’ locations. Then a cluster 
recognizer will calculate the similarity between the extracted 
URLs and the downloaded html content from the crawler 
18 
 
 
 
Figure 1.  THE ARCHITECTURE OF THE HYBRID SPAM FILTER.
 
Phase 2: Using behavior model to detect the rest of the mail. 
Based on the behavior model and suspicious probability, 
each message will get a score. If the score is higher than a 
preset threshold, the incoming message is treated as a spam. 
Phase 3: For the messages that passes the behavior-based 
filter, it will be put into a URL filter to check whether the 
message contains any URL that often considered as a spam 
URL, to determine whether the message is a spam. If its 
score is higher than the threshold, it is considered as a spam. 
On the contrary, it is considered as a normal message. 
Phase 4: When users receive the message, they can check 
whether the decision is correct or not. The system provides a  
feedback mechanism for the users to respond their 
corrections. Base on the feedbacks from users, to the system 
will modify the behavior pattern to improve the accuracy of 
the filtering system. 
IV. Expected Results 
This study still works in progress. The proposed system 
will be implemented based on an open-source spam filter in 
the Apache SpamAssassin project [11]. The training data 
will be collected from the Providence University campus 
network and then used to establish the behavior model. 
While the blacklist-based filtering technique and 
behavior-based filtering do not require to scan full message 
and thus have the advantage of fast detection speed, and the 
feedback mechanism used in the proposed system can 
automatically adjust the behavior model to improve the 
detection accuracy, the proposed hybrid spam filter would 
have efficient detection speed and better accuracy.   
 
ACKNOWLEDGEMENTS 
The authors would like to thank the National Science 
Council of the Republic of China, Taiwan, R.O.C, for 
financially supporting this research under Grants 
98-2218-E-126-001-MY2. 
REFERENCES 
[1] The Definition of Spam, 
http://www.spamhaus.org/definition.html. 
[2] Symantec Announces MessageLabs Intelligence 2010 Annual 
Security Report, 
http://www.symantec.com/about/news/release/article.jsp?prid
=20101207_01. 
[3] Meizhen W, Zhitang L, and Sheng Z , “A Method for Spam 
Behavior Recognition Based on Fuzzy Decision Tree,” IEEE, 
Ninth International Conference on Computer and Information 
Technology, pp. 236-241, 2009. 
[4] Meizhen W, Zhitang L, Ling X, and Yunhe Z, “Research on 
Behavior Statistic Based Spam Filter,” IEEE, First 
International Workshop on Education Technology and 
Computer Science, pp. 687-691, 2009. 
[5] Hassan, Y., and Tazaki, E, “Rule Extraction Based on Rough 
Set Theory Combined with Genetic Programming and Its 
Application to Medical Data Analysis,” IEEE, Intelligent 
Information Systems Conference, the Seventh Australian and 
New Zealand, pp. 385-390, 2001. 
[6] Chen Zhi Chen, “A Two Stage Spam Mail Filtering Method 
Based on Personal Mail,” National Taiwan University of 
Science and Technology, Department of Computer Science 
and Information Engineering, 2007. 
[7] Shih Neng Su, “Design and Implementation of A 
Personalized Chinese Spam E-mails Filtering System,” 
National Dong Hua University, Department of Computer 
Science and Information Engineering, 2005. 
[8] Jiansheng W, and Tao D, “Research in Anti-Spam Method 
Based on Bayesian Filtering,” IEEE, Computational 
Intelligence and Industrial Application,  pp. 887-891, 2008. 
[9] Gert Vliek, “Detecting spam machines a Net-flow data based 
approach,” Faculty of Electrical Engineering Mathematics 
and Computer Science, 2009. 
 20
輕量化網站應用程式防火牆 
薛向程                許慈芳＊ 
靜宜大學              靜宜大學 
資訊傳播工程學系      資訊傳播工程學系 
                          g9873002@pu.edu.tw              fang@pu.edu.tw 
 
摘要 
 
隨著網路使用的普遍、網站的大量增加及 web 
2.0 的演進，越來越多的個人資料與商業資訊可經由
網路擷取，其中的商業與政治利益使得惡意的網站攻
擊案件越來越頻繁，因此，針對網站及其應用程式的
安全防護越來越重要。目前的網路入侵偵測系統可用
於全面性的防護區域網路，然而，此系統卻過於龐大，
為達到一定的效能需較大的系統資源，使得架設成本
過高；而一般的網站防火牆雖有較小架設成本，但其
防護能力又顯不足。因此，本研究提出輕量化的網站
應用程式防火牆，將針對單純的網站伺服器環境加以
防護，使架設資源與成本降低，並有效提昇其防護能
力，除能達到綠色節能科技的目標外，更可令其能普
遍且有效地被運用於網站防護。此外，本系統也提供
網站管理員方便的網站分析與管理介面。 
 
關鍵詞：入侵偵測系統、網站防火牆、輕量化、綠色
節能科技。 
 
Abstract 
With the increasing number of Internet users and web 
sites, and the evolution of web 2.0, more and more 
personal data and commercial information can be 
retrieved through the Internet. In order to obtain the 
business and political benefits, malicious attacks on 
web sites occur frequently today. Therefore, enabling 
data protection on web sites and web applications is 
more and more important. Current network intrusion 
detection system can be used for comprehensive 
protection on local area network. However, this system 
is too heavy. When we need this intrusion detection 
system achieves a moderate performance, it usually 
requires more system resources, and that results in high 
costs to build this system; although general web firewall 
needs only small construction cost, its protection 
capabilities are not good enough. Therefore, this study 
proposes a lightweight web application firewall, which 
will focus on protecting simple web server environment. 
The proposed system can reduce the construction costs 
and resource, and also improve the protection 
capabilities. This will not only achieve the goal of green 
technologies, but also can be generally applied to the 
web servers of small businesses or schools. Furthermore, 
the system also provides a convenient administrator tool 
for web site analysis and management. 
 
Keyword: Intrusion detection system, Application 
firewall, Lightweight, Green IT. 
 
1. 研究背景與動機 
 
在 Web2.0 的盛行下，社群網站(Social Network)
已是當紅，例如：Facebook(臉書)、Plurk(噗浪)，已
成為現代人線上互動的一種橋梁。由於網際網路的普
遍，人們可以在網頁上留下個人資料便可使用各種網
路應用資源，例如：網路購物、網路算命(紫微斗數、
星座…等)。藉由人們使用網路點選未知網頁，病毒
已可能悄悄進入使用者之系統。以 OWASP 的創辦者
Jeff Williams 於 2010 年公布網頁十大攻擊手法(表 1)
來觀察[6]，十大攻擊之首注入弱點風險 Injection 已
經是目前網頁安全問題的重大議題，真實的反應出至
今網路釣魚與詐欺攻擊濫用 XSS 的情形。 
網頁應用程式的多元化，相對的也受到許多使
用者的青睞，也因為使用者眾多而使得部分人士覬覦
使用者的私人資訊，因此防不勝防。網頁服務是帶給
大眾的方便，卻也因方便而引受到攻擊造成使用者的
不便，安全性的問題也延伸甚多。 
系統最基本的防護機制是電腦內部的系統防火
牆，例如 Windows 防火牆，但是 Windows 防火牆的
防護安全機制卻相當有限。AV Comparative 於 2010
年八月測試以提供了最新的防毒軟體檢測報告(表 2、
表 3 )，在我們常見的幾家防毒軟體，例：G DATA、
AVRIA、McAfee、Avast，在對防毒軟體偵測、精確
與消滅能力、與網路病毒偵測上皆有亮眼的表現，但
是在提供網頁偵測的部分卻是不盡理想[10]。 
 
[1] 表 1、2010 十大網頁安全漏洞。(資料來源：[6]) 
1 注入弱點風險 
2 跨站腳本攻擊 
3 身分驗證缺陷與連線階段管理 
4 不安全的直接物件參考 
5 跨站請求偽造 
6 錯誤或不安全的系統組態 
7 網址存取控制失當 
8 未驗證的轉址與傳送 
9 不安全的加密儲存方式 
10 傳輸層保護不足 
 
 22
效的方法來改善上述所欠缺的部分加以改進。 
 
2.2.1 Snort 規則說明 
 msg - 在紀錄中印出一個訊息。 
 logto -把封包記錄到用戶指定的文件中而不是記
錄到預設標準輸出。  
 id -檢查 IP header 的 id 值。 
 ipoption - 查看 IP 選項段落的特定編碼。 
 fragbits - 檢查 IP header 的段落位置。 
 content - 在封包的傳輸中搜索指定的樣式。 
 session - 記錄指定會話的應用層訊息的內容。 
 reference - 外部攻擊所參考之編號(id)。 
 sid - snort 規則編號。 
 tag - 規則裡的高級記錄行為。 
 ip_proto - IP header 的協議段落值。 
 sameip - 判定原始 IP 和目的 IP 是否相等。 
 stateless - 忽略狀態的有效性。 
  
 範例規則 1： 
alert tcp any any -> any 7070 
(msg:"IDS411/dos-realaudio"; \ 
flags:AP; content:"|fff4 fffd 
06|";reference:arachnids,IDS411;) 
 當有 tcp 封包目標為 7070 port，產生警告(alert)
並存記錄檔 
 TCP flag 為 ACK+PSH 
 payload 包含:「fff4 fffd 06」便觸發 rule 
 顯示「IDS411/dos-realaudio」 
 Reference 到 arachnids 的 IDS41 
 
範例規則 2： 
alert tcp any any -> any 5432 (msg:"someone access 
PSQL command:SELECT"; content:"select"; nocase;) 
 
 alert ：警示 
 any any：任何的 IP 的任何一 port  
 ->：到 
 any 5432：任一個 IP 的 5432 port  
 msg：出現在 alert 檔案中的訊息 
 content：比對封包內容是否有 content 中指定的
字 
 nocase：不管 content 字元的大小寫 
 
3. 輕量化網站應用程式防火牆 
 
隨著各式網站與網頁應用系統的大量增加，網 
 
[4] 圖 1 系統架構圖。 
 
[5] 圖 2、 管理者 Web 介面。 
[6]  
圖 3、 Splunk 分析圖介面。 
站安全防護越來越重要，為使各網站都有能力架設網
站安全防護系統，一個架設資源與成本低且具備高效
能、能達到綠色節能目標的輕量化網站應用程式防火
 24
 
圖 7、輕量化網頁應用程式防火牆 CPU 使用率。 
 
 
由於在 ModSecurity 官方所提供之更新項目有限，
以及使用者不清楚規則如何撰寫下，本系統將使用目
前被廣泛使用的 Snort 官方所提供的網頁偵測規則，
並將其自動轉換成 ModSecurity 規則格式，以提高偵
測能力。 
 
(3) Splunk(Log 圖表分析) 
 
Splunk 是一種 IT 搜尋引擎。它能讓您即時搜尋
及瀏覽所有記錄檔及 IT資料，並可從任何應用程式、
伺服器或網路設備中記錄檔或其他資料製作索引，方
便您即時搜尋及瀏覽這些資料。 
本功能主要是提供給予使用者能夠快速搜尋與
觀察所有紀錄和分析項目，次要是能夠將其所記錄的
舊有 log 檔讀入 ModSecurity 核心規則再次分析，方
便觀察舊有 log 檔的威脅性，將結果圖形化顯示給管
理者以便於觀察。 
 
3.2 系統效能與結果 
本研究採取 windows xp(sp3)兩部電腦進行研究
工作，網路採取實體 IP 的方式以方便實驗攻擊之狀
態，攻擊採取自行攻擊之方式進行實驗以利蒐集到相
關資料。 
圖 2 是系統的管理者介面上半部的連結主要
為各網站連結，可連結至本研究所參考之資訊的各官
方主網，左半部為核心規則和偵測規則的檔案連結，
在使用者介面的右半部則為偵測分析的介面，這裡使
用 Splunk 進行分析，圖 3 分析了 5 月份以及 8 月份
的 DDOS 的攻擊分析次數表，可當下得知該月份被
進行攻擊的頻率，且可警訊告知管理者主機正被進行
攻擊中。規則部分，在原始 ModSecurity 規則和 Snort 
網頁攻擊偵測規則底下比對規則發現其相同處只有
23%，所以當 Snort 網頁攻擊偵測規則加入系統將增
加相當多比對規則並且提升相當大的防護能力。 
本研究發現在安裝 Snort 搭配 ACID 運作時， 
CPU 使用率為 32%，而 CPU 與記憶體的使用率長時
間下來將提高(圖 4、圖 5)，因 ACID 會與資料庫作
連結，每筆紀錄將會存入資料庫再將其顯示，時間一
久將會降低電腦記憶體空間，造成電腦的延遲。反觀
改良之輕量化網頁應用程式防火牆在 CPU 使用率
只有 5%(圖 6、圖 7)，比 Snort 的需求小許多，記憶
體使用量則相差不大。 
 
4. 結論 
 
本研究更改 ModSecurity 系統，運用其輕量級引
擎及高彈性規則的特性，結合更新頻率較高且較完整
之 Snort 網頁攻擊規則資料庫，並利用 Splunk 的高效
能 Log 分析能力，建立起輕量化網站應用程式防火
牆，可有效保護網站系統及其網頁應用程式，並具有
低耗能低資源需求之特性，使各網站系統能以少量架
設成本，即可完成完整之網站安全防護。 
 
5. 致謝 
本 研 究 感 謝 國 科 會 計 畫 ( 計 畫 編 號 ：
98-2218-E-126-001-MY2)經費之補助。 
 
參考文獻 
 
[1] Ryan Barnett, “WAF Virtual Patching Challenge: 
Securing WebGoat with ModSecurity,” Breach    
Security(www.breach.com), rbarnett@breach.com 
Revision, 1 (January 20, 2009). 
[2] Meisam S.A. Najjar and Mohammad Abdollahi 
Azgomi, “Distributed Multi-Approach Intrusion 
Detection System for Web Services,” Performance 
and Dependability Eng. Lab., School of Computer 
Engineering, Iran University of Science and 
Technology and  Research Centre of Intelligence 
Signal Processing Tehran, Iran. 
[3] 沈宗享,結合 ModSecurity Core Rule 以提供 Snort
偵測網頁攻擊能力 ,International Conference on 
Advanced Information Technologies(AIT),高雄師
範大學資訊教育所,2009. 
[4] 沈文吉(2001) 。網路安全監控與攻擊行為分析與
實作。國立台灣大學資訊管理研究所論文，未出
版，台北市。 
[5] 蘇建郡、方鵬喜(2003)。Snort 於網站管理之應用。
南台科技大學計網中心、南台科技大學資訊管理
所碩士論文。未出版，台南縣。 
[6] OWASP 
http://www.owasp.org/index.php/Main_Page   
[7] Modsecurity  http://www.modsecurity.org/   
[8] Snort  http://www.snort.org/   
[9] Splunk  http://www.splunk.com/ 
[10] AV Comparative 
http://www.av-comparatives.org/ 
 
 
 2
 
圖 1：研討會會場 
 
圖 2：於會場前之留影 
表 1、會議時程 
6/19   14:00  
tutorial I 
16:45  
tutorial II 
 
6/20 9:15  
keynote 
10:30  
paper 
13:45  
paper 
15:45  
paper 
17:30 paper 
6/21 9:15  
keynote 
10:30  
paper 
13:45  
paper 
15:45  
paper 
17:30 paper 
6/22 9:15  
paper 
11:15  
paper 
14:30  
paper 
16:30  
paper 
 
6/23 9:15  
keynote 
10:30  
paper 
   
6/24 Daytrip     
 4
 
ICCGI 2011 會議之 tutorial、keynote speech 以及 paper presentation 時程
如表 1所列，圖 3為主要演講室之一，圖 4為本人在會場中與大會海報之合影，圖 5
則是和與會老師、同學於會場之合影。在會議進行的過程中，除針對我們之研究成
果與來自全球多個國家的專家、學者進行討論、交換彼此意見外，同時亦關注與研
究方向相關的研究論文及議題之討論，對於研究計畫之進行與未來應用方向有更多
瞭解與創新想法，收穫頗豐。 
 
二、與會心得 
 
ICCGI 是資訊領域相當重要的國際研討會，會中所發表的論文具有一定的學術水
準，以 2010 年為例，投稿論文被接受發表的比例僅約 30%上下，故而，研究成果能
被此高水準學術研討會所接受發表，對於本研究團隊在學術研究方面所付出的時間
與心力給予了最直接、正面的肯定。 
 
本次參與研討會，帶領了幾位學生一同前往，學生多半是第一次出國並且第一
次參加國際型研討會，藉由參加研討會的準備、與國際學者學術交流與文化交流，
相信不僅在於其學術研究上的精進，更擴展其視野，增進了國際觀與民族自信。對
於培養學生成為具有國際化鴻觀視野，將有長期的影響。 
 
而在聆聽各場論文發表，並與與會學者進行交流討論後，我們更清楚的掌握了
目前資訊科技的最新進展與趨勢，有助於本研究計畫之後續進行與未來延伸發展之
構想；另外，會議所舉辦的數場有關網頁與多媒體服務之專題演講，讓我們對於網
站、多媒體技術在各領域的應用現況及未來趨勢有了進一步的了解，對於網路安全
延伸於其他技術領域的合作更是此行非常重要的收穫。在此研討會中交流研習所得
之心得，除了有助於研究計畫後續之進行外，也增加了個人在學術研究領域中的廣
度與深度，對於未來之研究將有所助益。 
 
綜觀而論，此次參加 ICCGI 2011 研討會之收穫可歸納如下： 
(1) 學習到國外在網路、多媒體資訊系統相關領域的最新知識與技術 
(2) 進一步了解網路安全延伸於其他技術領域之可行性 
(3) 增加了國際交流與合作機會 
(4) 有助於擬定未來研究方向 
(5) 瞭解各國最新資訊重點發展方向 
 
三、建議 
此次出國參加研討會發現，與會的中國大陸學者遠多於我們台灣的學者，而國
外人士對於台灣的了解與熟悉度相對於對中國大陸而言，可說是相當低，此現象對
於我們在未來的發展極為不利，因此，在強調國際化、與國際接軌的趨勢下，應訂
定更完善的獎勵措施，積極鼓勵研究人員參與國際研討會並發表研究成果，尤其是
在歐美國家所舉辦的研討會，增加與國外相關學者進行交流、研討的機會，促進國
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/29
國科會補助計畫
計畫名稱: 省電型網路入侵偵測系統之設計與開發
計畫主持人: 許慈芳
計畫編號: 98-2218-E-126-001-MY2 學門領域: 資訊安全
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
協助辦理 Workshop on Understanding Botnets of Taiwan 2010 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
