 在的階層越高則影響結構相似度的判斷將
越大。然而其綱要元素名稱是已定義好的
資料內容，並沒有考慮綱要元素名稱在進
行對映時是否將產生語意相異之問題。針
對上述問題，本研究期望開發出一個 XML
綱要對映模組，運用可判斷兩 unordered 
trees 結構相似程度的對映方法，再加入綱
要元素名稱的語意相關性分析，以輔助解
決各階層產品名稱的語意相異問題。 
圖 3 替換操作 
最後得到兩樹之間最小的校正成本，此成
本則稱為校正距離。本研究令此三種校正
操作成本皆為1。 三、限制式校正距離演算法 
Zhang [5]提出的限制式校正距離演算
法，假設 M 為所有的(i, j)對映關係的集
合，i 表示在 T1 樹中的第 i 個節點，j 表示
在 T2 樹中的第 j 個節點。所有的對映關係
皆需符合下列限制： 
Wagner & Fischer[4]將校正操作(Edit 
Operations)的最小成本應用在字串的對映
上，並以校正距離表達字串間的相似度。
而在樹的對映上，Tai[2]藉由定義插入操作
(Insert operation) 、 刪 除 操 作 (Delete 
operation)與替換操作(Change operation)成
本，計算來源樹節點與目標樹節點之間的
操作成本，並假設樹為ordered tree，以下
為各操作的樹狀結構變化圖： 
 
1.  1≦i≦|T1|， 1≦J≦| T2| 
2.  在 M 裡的任兩組對映組合(i1, j1)與(i2, 
j2)唯有在 j1 = j2 的情況下，i1 = i2。唯
有在 T2[j1]為 T2 [j2]的父節點之情況
下，T1[i1]為 T1[i2]的父節點。  
 
3. 在M裡的任三組對映組合(i1, j1)、(i2, j2) 
與(i3, j3)，假設 t1[I]是 t1[i1]與 t1[i2]的 
    least common ancestor(LCA)，t2[J]是
t2[j1] 與 t2[j2] 的 least common 
ancestor。則唯有在 t2[J]是 t2[j3]一個
proper ancestor 之情況下， t1[I]才是
t1[i3]一個 proper ancestor。 
     
在限制式(2)中，由於限制式校正距離即為
計算兩 unordered trees 之間的校正距離，因
此對映時無須考慮配對節點之間是否遵從
兄弟關係，僅考量整體樹狀結構以及上下
節點之間是否遵從父子關係 (ancestor 
nodes)；在限制式(3)中，以圖 4 為例，節
點 D 與節點 E 的父節點包含節點 B 與節點
A，節點 B 與根節點 A 距離最遠，在 T 樹
中亦有最深的深度，故節點 B 為節點 D 與
節點 E 的 LCA。表 1 為以圖 4 為例整理出
的 LCA 關係表。 
圖 1 插入操作 
 
 
圖 2 刪除操作 
 
 
圖 4 範例說明 LCA 
 
2 
結果，圖 12 為 XML 綱要對映模組運行結
果。 
 
（a）來源綱要樹形結構 
4 
 
（b）目標綱要樹形結構 
圖 9 來源與目標 BOM 展開式綱要 
 
 
（a）來源綱要樹形結構 
 
（b）目標綱要樹形結構 
圖 10 來源與目標 BOM 未展開式綱要 
 
 
圖 11 限制式校正距離運算結果 
 
圖 12 模組運行結果 
 
圖 11 代表來源與目標 BOM 各節點之
間的校正距離運算結果，此結果包含來源
不同的階層節點與目標 BOM 節點之間所
需的校正距離。ComputerCase 結構需經過
一次校正操作方可與目標結構相同，表示
運用限制式校正距離運算其結構是有差異
的，這是因為在限制式校正距離演算法
中，會判斷ComputerCase與Computer_Case
是不同的節點，可由圖 11 得知校正距離為
1。而透過本研究所開發 XML 綱要對映模
組 進 行 判 斷 後 ， 由 圖 12 得 知 ， 
ComputerCase 與目標 Computer_Case BOM
的結構相似度為 100%。再經人工驗證圖
10 的綱要樹形結構後證實 Computer 產品
結構中應用了零組件 Computer_Case 模
組。此結果對企業來說，經由對映並找出
的零組件 Computer_Case 可隨即置入生產
流程中，等待其他零組件生產完成後再組
成產品 Computer。 
六、結論 
本計畫整理出相關結論如下： 
1. 本計畫主要提出因應企業間協同開發
產品時的動態設計改變，所要變更之
資料是否能與原來的資料做正確銜接
與交換。 
2. 本計畫開發一個 XML 綱要對映模組
並加入新產品開發設計與製造流程
中，幫助企業從現有產品 BOM 資料庫
中找出相似的模組化產品 BOM 來重
用，以避免重複開發的現象。 
3. 以 XML 資料格式設計模組化產品
BOM 並輸入 XML 綱要對映模組中，
有助於模組運行。  
4. 限制式校正距離演算法不僅可以比較
兩份模組化產品 BOM 之間的結構相
似程度，亦可比較出來零組件結構之
間的相似性。 
5. 企業可透過此模組，尋找出相似的設
計來使用並可隨即置入製造程序中，
使生產程序將更有彈性。 
 
七、參考文獻 
[1] Madhavan Jayant, Bernstein Philip A. & 
Rahm Erhard. Generic Schema Matching 
with Cupid. (2001). 
[2] Kuo-Chung Tai. The tree-to-tree 
correction problem. Journal of the 
Asso-ciation for Computing Machinery, 
26:422–433.(1979). 
[3] Tsai Chieh-Yuan, Tien Fang-Chin and 
Pan Tsung-Yu. Development of an 
XML-based structural product retrieval 
system for virtual enterprises. Taylor & 
Francis, Vol. 42, NO. 8, 1505-1524. (2004). 
[4] Wagner Robert A. & Fischer Michael J. 
The String-to-String Correction Problem. 
ACM Computing Surveys, Vol.21, No.1, 
168-173. (1974). 
[5] Zhang Kaizhong. A Constrained Edit 
Distance Between Unordered Labeled Trees. 
Algorithmica, 15: 205-222. (1996) 
 
 
 
  
Abstract— In order to adapt to a dynamically changing world, 
business organization focuses on its core competencies and 
collaborates with other companies to develop new products. The 
information systems in this kind of enterprises need to quickly 
response to the changes and dynamically change workflows 
accordingly. This paper proposed a systematic way to deal with 
designing a collaborative design workflow built upon the SOA 
reference model. The most critical part is to identify services in 
the model, and this paper proposes and applies several 
techniques to generate proper services for collaborative design. 
These services could fulfill the business requirements, they were 
aligned to the information technology, and they could be 
developed in later stage or be mapped to associated service 
components. A real world case was investigated to identify 
services for collaborative design workflow, and some services 
were derived by using multiple complimentary analyses. In such 
a case, the workflow of a collaborative design will be flexible for 
modifications as the environment changes. 
I. INTRODUCTION 
OLLABORATIVE design has been recognized as a proper 
way for product development in this dynamically 
changing environment. Business organization focuses on 
its core competencies and collaborates with other companies 
to develop new products. This strategy is supposed to bring 
flexibility and adaptability into the design process, and to 
make companies successful in the market. The management 
of collaborative design should emphasize not only on the data 
communication but also on the process flow. Many 
collaborative design researches focused on data-centered 
engineering application integration rather than 
process-centered integration. Reference [5] argued that the 
full potential of collaborative design would be achieved only 
when applications and design processes were able to 
seamlessly integrate their complex interactions together. 
Workflow Management Coalition defined workflow as 
“The automation of a business process, in whole or part, 
during which documents, information or tasks are passed 
from one participant to another for action, according to a set 
of procedural rules.” According to the definition, 
collaborative design can be viewed as a business process 
during which participants collectively reach the goal of 
developing successful products. Design information and 
 
Manuscript received October 15, 2008. This work was supported in part 
by the National Science Council of Republic of China under the grant NSC 
97-2221-E-033-042.  
Wei-Jung Shiang and Hsin Rau are with the Industrial and Systems 
Engineering Department, Chung Yuan Christian University, 200 Chung Pei 
Road, Chung-Li, 32023 Taiwan, (e-mail: wjs001@ cycu.edu.tw).  
Yu-Hsin Lin is with the Department of Industrial Engineering and 
Management, Ming-Hsin University of Science & Technology, 1 Hsinhsin 
Rd., Hsinfong, Hsin-Chu, 304 Taiwan. 
activities in a collaborative design workflow need to be 
integrated and managed with the support of workflow 
software. It is not very hard to statically define a workflow for 
tracking the design progress, but the workflow application 
should have the capability to update workflows easily while 
process regulations or participants frequently change. 
As Web service technology became popular, the 
requirement of fitting workflow applications into Web 
service architecture has arisen. Therefore, automated tasks of 
a workflow have been required to be capable of invoking and 
linking to Web services. On the other hand, workflows also 
need to be made available as Web services. Workflow now is 
required to have the ability to control the flow of a set of Web 
services for making up an internet application. 
 The idea of making workflow directly invoke Web services 
is not a proper solution for collaborative product design, since 
the business environment constantly changes. Once the 
process definition changed due to any reasons, the coupling 
between the process and Web services might be the hindrance 
to the modification of process. There are at least two ways to 
integrate workflows and Web services, one is starting from 
the workflow end to include Web service specifications (such 
as Wf-XML and ASAP), and the other one is from the Web 
service side to become compatible with the workflow (such as 
BPEL4WS). Introduction of an intermediate layer between 
process and active components might be another solution to 
decouple the direct relationships between workflow and Web 
services. Thus, the service layer proposed by service oriented 
architecture is a proper alternative.  
 Service oriented architecture (SOA) can be regarded as a 
model in which automatic logic is decomposed into smaller, 
distinct units of logic, and units can be distributed. These 
units could comprise a larger piece of business automation 
logic [3]. SOA crosses both business and information 
technology domains, and tries to align these two domains 
with each other in business applications. By analogy, the 
whole logic is like the workflow and the smaller logic is like 
the activity in the workflow. Right now, most workflow 
platforms based on the service-oriented solutions from major 
vendors support the Web service technology, and they claim 
that workflows and Web services are not coupled in their 
architectures. Therefore, this paper proposes to design 
collaborative design workflow built upon the SOA reference 
model. However, there are some details about analyzing and 
designing a workflow within SOA, the most critical part is to 
identify services in the service layer, and these issues are 
going to be discussed in following sections. 
Service Identification of a Collaborative Design Workflow in a 
Dynamically Changing Environment 
Wei-Jung Shiang, Hsin Rau, and Yu-Hsin Lin 
C
 
 
 
change to the system, such as replacing a service provider or 
modifying a business process. 
Service could be the junction point between business and 
technology, the identification of services may be more 
business driven, and it may start from high level (large 
grained) activities. Service-Oriented Modeling and 
Architecture (SOMA) identify the appropriate services based 
on service concepts [1]. There are at least three approaches to 
identify services, through which business processes can be 
transformed into IT models and existing software 
applications can be reused. They are 
1) Top-down approach: 
Domain decomposition is often used in this approach [1]. 
The top-down approach is about decomposing business 
domains into functional areas (functional area analysis) and 
further decomposition is performed to reach a set of loosely 
coupled subsystems as logical boundaries for carrying 
services. It also decomposes business processes relevant to 
the business goals into sub-processes and process activities. 
The advantage of this approach is that the identified services 
are business aligned  
2) Bottom-up approach 
Existing asset analysis is often used in this approach [1]. 
The asset may include existing information systems, 
application services, and other IT assets available to this 
approach. The bottom-up approach is about to identify those 
assets which are capable of supporting the functionality that 
meets the business needs. This approach can preserve 
services reusability 
3) Meet-in-the-middle approach 
Goal-service modeling combines the top down and bottom 
up approaches and it maintain the alignment of services with 
business goals [1]. The business goal is decomposed until it 
reaches actionable sub-goals, and then this leads to 
identifying services that can fulfill the requirements. The 
other way to interpret this approach is about reconciling 
business needs and what is already provided by existing IT 
assets. It suggests that service identification starts with the 
top-down approach and decomposition of one or more 
business process as service candidates. Then, bottom-up 
approach is applied to find matches for those service 
candidates.  
Based on these three approaches, a set of services could be 
identified, and then grouped into logical categories by 
business functional areas.  
About the integration of workflow and Web service, 
Business Process Execution Language for Web Services 
(BPEL4WS) is mostly used in SOA applications. BPEL4WS 
is the combination of two previously competing standards: 
XML business process language (XLANG) from Microsoft, 
and Web Services Flow Language (WSFL) from IBM. 
BPEL4WS are run, controlled, and orchestrated on a 
Business Process Management System (BPMS). BPEL4WS 
is based on XML and applies WSDL to invoke Web services. 
By BPEL4WS, new workflow can be composed of related 
Web services that have been found during semantic matching 
of WSDL [5]. 
D.  Attribution analysis 
Mapping business requirements to software components 
could be obtained by identifying various attributes of the 
proposed business processes [2]. Attributes are simple 
descriptions of the high level goals. The major objectives of 
attribution analysis are to study and understand the business 
requirements, to break down the proposed business ideas, 
and to define core attributes of the project. This 
decomposition of enterprise ideas may simplify the 
complicated requirements in which they were originally 
presented for transformation. This analysis can identify 
various attributes that services must possess, and the 
attribution analysis yields a set of core attributes that will be 
utilized to identify services.  
In order to identify a set of core attributes, an attribution 
model, shown in Fig. 2, is constructed to visualize these 
attribute associations. This network graphic model expands 
the analysis to various combinations of core attributes, and it 
covers the whole problem domain. 
 
 
 
Fig. 2. Attribution model [2] 
 
Several approaches may be applied to find proper attribute 
nodes in the attribution model [2]. Forward attribute 
collection is starting from the top core attributes and 
proceeding downward to select the proper attributes node 
that best matches business requirements. Backward attribute 
elimination technique is starting from the lower levels of the 
attribution model and moving up toward level 1 to eliminate 
attributes from the combinations. The combined approach 
can move horizontally to reach nodes that would have not 
been accessible with only one search method. 
III. SERVICE IDENTIFICATION METHOD 
This paper proposes to design a collaborative design 
workflow built upon the SOA reference model. The most 
critical part is to identify services for the collaborative design 
workflow. Intuitively, the activities of the collaborative 
design workflow can be regarded as services, and then it is 
straightforward to develop or reuse associated service 
components for implementation. However, from the 
discussion in Section II, more thoughts and methods should 
 
 
 
 
Fig. 4. Workflow of a collaborative product design 
 
Fig. 5. Goal service modeling 
 
Fig. 6. Domain decomposition example 
 
Since there was no existing service, reusability was not the 
issue in this project. After the service identification 
procedures, a list of possible services was generated and they 
were ready for further development such as service 
specification and service realization. 
I. CONCLUSION 
This paper proposed to develop collaborative design 
