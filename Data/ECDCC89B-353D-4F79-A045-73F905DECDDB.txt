2 
行政院國家科學委員會專題研究計畫成果報告 
蟻群最佳化之創新應用 - 線上即時排程(I) 
A New Application of Ant Colony Optimization - Online Scheduling 
中文摘要 
傳統之蟻群最佳化演算法在處理排程問題時，一般皆假設輸入資料為事先已知，導致其
應用往往侷限於離線（off-line）問題；本計畫中，我們特別針對單機線上即時（on-line）排
程問題發展一蟻群最佳化演算法架構，在此即時排程問題中，訂單之到期日須於訂單抵達時
決定，且訂單需排定其加工順序以最佳化總加權前置時間，並同時滿足所有訂單之到期日。
因應此問題之特性，我們亦發展一到期日訂定規則，而於蟻群最佳化演算法中，每隻螞蟻皆
代表一待加工訂單之排序，與各訂單所訂定之到期日；每當有新的訂單抵達時，此排序即被
即時更新，而當機器結束前一訂單之加工時，最佳螞蟻的排序之第一順位訂單即被安排接受
加工。在此更新過程中，若有部分螞蟻會因違反到期日限制，而無法更新時，這些螞蟻將會
從群體中遭到刪除。本計畫所提出之蟻群最佳化演算法在與文獻中方法相比較時，明顯可獲
得更佳之結果，且實驗結果亦觀察到，適當結合局部搜尋法（如最早到期日優先法則），可進
一步改善蟻群最佳化演算法之求解品質與求解效率。 
關鍵詞：萬用啟發式演算法、蟻群最佳化、到期日、前置時間、即時排程 
 
Abstract 
The Ant Colony Optimization (ACO) method uses input data that is assumed to be given at the 
beginning, which limits its application to off-line problems in the scheduling field.  In this project, 
we develop an on-line framework, where jobs arrive over time, and at any time we lack knowledge 
concerning future jobs.  A due date is determined upon job arrival, and jobs are sequenced on the 
machine to optimize the sum of weighted lead times with all due dates met.  We also present a due 
date setting rule, and propose that each ant represents a sequence of waiting jobs with quoted due 
dates.  This waiting sequence is constantly updated over time (whenever a job is selected to be 
processed or a new job arrives).  The on-line schedule is constructed by selecting the first job in 
the waiting list of the “best” ant to process (along with its due date) as the machine becomes 
available.  However, processing this job may be infeasible according to the sequence of waiting 
jobs in the list for some other ants; then these ants will be eliminated  Our ACO algorithm is 
shown to outperform existing effective on-line algorithms.  With local search incorporated using 
the EDD (Earliest Due Date) rule, improvements can be obtained in both computational outcome 
and time. 
Keywords: metaheuristics; ant colony optimization; due date; lead time; on-line scheduling 
4 
Scheduling considered as one of the key applications in production management has also attracted 
ACO researchers’ attention in recent years [1, 2, 3, 4, 8, 9].  However, to our knowledge, ACO 
applications have been limited to situations in which all input data is provided at the beginning.  
The use of ACO in on-line scheduling has not yet been explored. 
The main goal of this project is to demonstrate a novel approach concerning how ACO can be 
incorporated into on-line sequencing and due date setting.  We start with the ACO framework and 
related results for on-line sequencing, where in particular the methods for large-scale scheduling are 
discussed.  Then, based on our model, an ACO procedure of job sequencing and due date 
determination is presented.  Further, we conduct computational testing in comparison with 
available effective on-line algorithms.  The results show the effectiveness of our ACO procedure, 
and are a valuable addition to the existing studies in the areas of ACO metaheuristic and on-line 
scheduling. 
 
2 THE ON-LINE HEURISTIC PROCEDURE 
For each randomly generated instance, the following probabilistic assumptions hold: 
A1.  Processing times and inter-arrival times (i.e., irr ii  1 ) are generated from stationary 
distributions, respectively. 
A2.  The inter-arrival times are drawn from independent identical distributions bounded above 
by some constant. 
A3.  The processing times are drawn from independent identical distributions bounded above 
on some interval [pmin, pmax]. 
A4.  Weights are generated from stationary independent identical distributions bounded above 
by some constant. 
A5.  Processing times, inter-arrival times and weights are independent of each other. 
Note that in terms of scheduling rules, we are restricted to the non-preemptive assumption.  In 
addition, we assume the total number of jobs n (instance size) is known at the beginning.  
Several parameters must be set up and pheromone trails should be initialized before the ACO 
algorithm starts.  These parameters include 
0  = the initial amount of pheromone,  
  = the persistence coefficient of pheromone,  
0AN  = the initial number of ants,  
  = the parameter that controls the magnitude of ij  (the parameter for an ant to represent the 
pheromone intensity for job j being sequenced right after job i in the queue),  
  = the parameter that controls the magnitude of ij  (the parameter for an ant to show the 
relative importance of sequencing job j right after job i compared to right after other waiting 
jobs), and 
0q  = the parameter that stands for the relative importance of exploitation to exploration  
According to the existing ACO framework, if applied to an off-line version of our model, each 
6 
End 
A two-phase operation takes place to update the sequence and due dates of the jobs in the 
waiting list for each ant when a new job arrives.  The first phase (Phase I) determines where the 
new job should be inserted in the waiting list using the standard ACO method (this new job may be 
put at different positions in the lists for different ants).  If the machine is currently available, this 
job will be processed immediately; if the machine is unavailable but there is no waiting job, the new 
job clearly becomes the first one in the list.  In the second phase (Phase II) a due date assignment 
strategy is employed.  We find the temporary completion time for the new job based on its position 
in the waiting list determined in Phase I, and then a temporary due date longer than or equal to this 
completion time (allowing for future “better” jobs to be sequenced before the new job).  The 
details of each step is described as follows: 
STEP 1: As job 1j  is finally sequenced and assigned a due date 1jd  at time 1 jrt , we 
have the information of the number of available ants, )( 1jrAN , and the lists and due dates of 
the waiting jobs )( 1jrS  represented by each of these available ants. 
STEP 2: Identify the best ant – the ant that has the waiting list with the least 


)(
1
1
)(ˆ
jrSk
jkk rCw . 
STEP 3: Find the set of the waiting jobs for the best ant,  jjk rrCk  )(ˆ| 1 , and the waiting 
order for these jobs in this best ant’s list.  If the above set is empty, skip to STEP 4.  
Otherwise, for each ant, sequentially select these jobs in the above order from the waiting list to 
process on the machine (thus these jobs are removed from )( 1jrS ).  Delete the ants where due 
date violations occur. 
STEP 4: Consider time  jrt  (  jr , 0  and is arbitrarily small), the time immediately 
prior to the arrival of job j.  There are 1|)(| jrS  possible positions for j to slot into in the 
waiting list of each ant from the end to the beginning, and )( jrAN  available ants.  Construct 
an initial pheromone trail.  Let 1p . 
STEP 5: Consider the pth ant.  Identify the positions that job j may be sequenced at without 
violating the due dates of other waiting jobs (i.e., feasible positions).   
STEP 6: Calculate ij  at each feasible position for job j, where job i stands for the job right 
before the feasible position. 
STEP 7: Use the state transition rule to choose the position for job j in the waiting list from 
8 
STOP. 
Steps 5 through 10 form a loop that simulates the mechanism of ants’ communication using 
pheromone as well as their exploration and exploitation behaviors (Step 7).  Step 10 is called local 
search, and is optional.  We later demonstrate its impact via computational results.  For the next 
arrival of job 1j , we start from Step 1 again by letting 1 jj .  The above steps continue 
over time until the last job arrives. 
 
3 COMPUTATIONAL TESTING 
The proposed ACO algorithm is coded in Borland C++ Builder 5.0 and run on an Intel Core 2 
CPU 6320 1.87GHz PC with 2GB RAM.  We firstly compare the performance of our heuristic on 
ni iidw1  with the WSPTA schedule in which WSPTAiWSPTAi Cd   for all i, because this WSPTA 
schedule provides an asymptotically optimal solution and may serve as an asymptotic lower bound 
for on-line algorithms of our model.  This comparison is also done on the on-line algorithm 
developed by Lee [5] (denoted by iH ), which has been shown to be very effective, especially for 
large instances. 
As for minimizing  ni iiii rpdw1 )( , since polynomial sequencing algorithms that are 
able to provide an asymptotically optimal solution for  ni iiii rpCw1 )(  are not yet explored, 
Lee [5] uses the simplest and most naïve on-line scheduling rule – FCFS (the due date can be 
quoted to match the completion time upon job arrival) and compares it with iH .  The result shows 
that iH  is much more effective than the FCFS schedule.  Thus, for  ni iiii rpdw1 )( , we 
directly compare our on-line ACO method with iH  to test its effectiveness. 
Through a set of comprehensive experiments, we observe the influence of other parameters 
and choose to set up 0.9,   1  and 3,   in addition to 0 0.9.q    As for 0 ,AN  we have 
found that performance seems to be better when 0 0.8 to .AN n n   Thus, we choose 
2000,400,1000 AN  for 100, 500, 2500,n   respectively. 
 
3.1 Instances for testing and performance measure 
Problem instances are randomly generated under assumptions A1 through A5 (Section 2).  
The probability distribution for weight follows the uniform distribution on the interval of ]1,0[ .  
Processing times and inter-arrival times will be randomly generated from either exponential or 
uniform distributions, where three sets of instances (Set I, Set II and Set III) are constructed (Table 
1).  Also, there are five types of instances (C1, C2, C3, C4 and C5), where each type has a 
different utility ratio. 
Two ratios are tested: 
10 
Table 3   1R  and the ratio of iH  to WSPTA on ni iidw1  for Set II instances 
 100n  500n  2500n  
1R  
iH  to 
WSPTA 
1R   
iH  to 
WSPTA
1R   
iH  to 
WSPTA
ACO w/o 
local 
search 
ACO w/ 
local 
search
ACO w/o 
local 
search 
ACO w/ 
local 
search 
ACO w/o 
local 
search 
ACO w/ 
local 
search 
C1 1.3168 1.2695 1.3541 1.2570 1.2249 1.3215 1.1977 1.1731 1.2046
C2 1.3259 1.2809 1.3660 1.2111 1.1656 1.2475 1.2093 1.1529 1.2145
C3 1.2390 1.2248 1.2790 1.2017 1.1601 1.2155 1.1746 1.1327 1.1844
C4 1.0163 1.0163 1.0163 1.0045 1.0045 1.0045 1.0007 1.0007 1.0007
C5 1.0032 1.0032 1.0032 1.0005 1.0005 1.0005 1.0001 1.0001 1.0001
 
Table 4   1R  and the ratio of iH  to WSPTA on ni iidw1  for Set III instances 
 100n  500n  2500n  
1R  
iH  to 
WSPTA 
1R   
iH  to 
WSPTA
1R   
iH  to 
WSPTA
ACO w/o 
local 
search 
ACO w/ 
local 
search
ACO w/o 
local 
search 
ACO w/ 
local 
search 
ACO w/o 
local 
search 
ACO w/ 
local 
search 
C1 1.5078 1.4498 1.5564 1.4327 1.3884 1.5638 1.3830 1.3538 1.4380
C2 1.3541 1.3061 1.3796 1.3109 1.2409 1.3460 1.2917 1.2584 1.3113
C3 1.1743 1.1567 1.1736 1.1219 1.0784 1.1300 1.1117 1.0662 1.0884
C4 1.0186 1.0187 1.0186 1.0063 1.0062 1.0063 1.0017 1.0017 1.0017
C5 1.0122 1.0122 1.0122 1.0012 1.0012 1.0012 1.0003 1.0003 1.0003
 
Next, we directly compare ACO with iH  on  ni iiii rpdw1 )(  and show the results in 
Table 5. 
Table 5    ACO compared to iH  on  ni iiii rpdw1 )(  ( 2R ) 
 100n  500n  2500n  
ACO w/o local 
search 
ACO w/ local 
search 
ACO w/o local 
search 
ACO w/ local 
search 
ACO w/o local 
search 
ACO w/ local 
search 
 
 
 
Set I 
C1 0.9664 0.9370 0.9589 0.9374 0.9860 0.9437 
C2 0.9519 0.9289 0.9185 0.8925 0.9976 0.9411 
C3 0.9676 0.9197 0.9861 0.9219 0.9934 0.9165 
C4 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 
C5 1.0000 1.0000 1.0000 1.0000 1.0000 1.0000 
12 
 
 
 
Set I 
C1 0.1075 0.1344 26.242 8.716 1605.30 1027.77 
C2 0.1204 0.1501 21.722 21.444 913.18 832.84 
C3 0.1001 0.1327 11.412 9.777 351.38 1414.00 
C4 0.0111 0.0107 1.116 1.139 131.21 134.01 
C5 0.0063 0.0079 0.712 0.720 77.39 78.31 
 
 
 
Set II 
C1 0.1393 0.1624 25.061 17.148 4498.82 955.22 
C2 0.1095 0.1420 21.738 11.392 554.55 980.54 
C3 0.1220 0.1142 15.333 9.442 1358.89 478.88 
C4 0.0157 0.0203 1.572 1.628 175.99 181.52 
C5 0.0126 0.0094 1.066 1.086 124.17 126.76 
 
 
 
Set III 
C1 0.0905 0.0907 16.889 7.359 2756.61 388.51 
C2 0.0720 0.0717 7.497 4.786 399.61 233.68 
C3 0.0375 0.0451 3.658 2.995 331.79 199.43 
C4 0.0158 0.0171 1.534 1.599 179.51 187.49 
C5 0.0141 0.0140 1.102 1.128 127.83 131.31 
 
4 CONCLUDING REMARKS 
The ACO framework has been successfully applied to a wide range of combinatorial 
optimization problems.  To our best knowledge, the applications to the static and dynamic versions 
thus far are limited to when all data are given in advance (i.e., off-line).  The main purpose of this 
project is to propose an ACO framework for on-line due date setting and sequencing.  Our study 
may be considered as the first ACO application to on-line scheduling problems.  Due to the 
characteristics of on-line scenarios, iteration-based search cannot be conducted in the same way it 
has been used in traditional ACO algorithms.  However, we incorporate on-line pheromone 
updating and ant elimination into the procedure so that the ACO approach can be extended to 
on-line scheduling. 
Unlike most metaheuristic methods, ACO is a constructive algorithm and its effectiveness and 
efficiency generally depend on the selection of parameters, the state transition rule, the pheromone 
trail update rule, and other supplemental devices such as local search.  The computational results 
show that local search can improve the performance of ACO.  As far as the computational time is 
concerned, our results indicate that for small instances of 100 jobs, the time required to determine 
the due date and the processing start time for a single job is no more than 0.002 seconds on average.  
Even when the instance size grows up to 2500 jobs, the computational time is less than 1.8 seconds 
on average, which is a good indication that the proposed ACO algorithm could be employed in a 
real world application.   
To sum up, this project has successfully shown the potential of ACO algorithms in terms of 
solving on-line due date scheduling problems.  The proposed ACO algorithm can be directly 
extended to other types of scheduling problems such as parallel machine, job shop, and flowshop 
problems.  Further, a better due date assignment strategy and additional more advanced local 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                  日期：100 年 06 月 16 日 
一、參加會議經過 
The IIE Asian Conference 2011 is the first international conference held in Asia by the Institute of 
Industrial Engineers, a non-profit international association for the industrial engineers.  The IIE Asian 
Conference 2011 took place in the Chiao-Tung University and the Longemont Shanghai, Shanghai, China, 
10-12 June, 2011.  The focus of this conference is to stimulate the dissemination of knowledge and 
information relating to Industrial Engineering and Management, and to promote mutual interaction and 
cooperating among professional organizations and staff related to this discipline in the Asia.  For such 
purpose, the IIE Asian Conference 2011 has served as a good platform for the industrial engineering 
community to present their research findings and exchange ideas.  As well, this conference has also 
stroke a balance between theoretical and application development.  The IIE Asian Conference 2011  
began by inviting keynote speakers, Dr. Way Kuo, City University of Hong Kong, on a topic titled 
“Reliability of the Nuclear Power System,” Dr. Gregory H. Watson, IIE, on a topic titled “Rebirth of 
Scientific Management in the Internet Age,” Dr. Candace Arai Yano, University of California, Berkeley 
on a topic titled “Educating the Next Generation of Industrial Engineering Scholars,” and Dr. Zhongtuo 
Wang, Dalian University of Technology on a topic of “From Traditional Systems Engineering to Complex 
Systems Engineering.”  This year conference program is carried out in 12 parallel sessions for a total of 
over 70 papers accepted.  I served as the session chair of Session 8: Others.  All three presentations in 
this session attracted people’s attention and lots of interesting ideas were brought up for discussion and 
計畫編號 NSC 99－2628－E－155－054 
計畫名稱 蟻群最佳化之創新應用 - 線上即時排程(I) 
出國人員
姓名 梁韵嘉 
服務機構
及職稱 元智大學工業工程與管理系副教授 
會議時間 
100年 06月 10日
至 
100年 06月 12日 
會議地點 
The Longemont Shanghai, Shanghai, 
China 
會議名稱 
(中文)工業工程學會亞洲區學術研討會 
(英文) IIE Asian Conference 2011 
發表論文
題目 
(中文) 
(英文) 
1. Virus Optimization Algorithm for Curve Fitting Problems 
2. Optimizing Portfolio Selection Using Harmony Search 


99 年度專題研究計畫研究成果彙整表 
計畫主持人：梁嘉 計畫編號：99-2628-E-155-054- 
計畫名稱：蟻群最佳化之創新應用 - 線上即時排程(I) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 3 100%  
博士生 1 1 100%  
博士後研究員 1 1 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 1 100% 
成 果 已 投 稿 至
Journal of 
Heuristics，現為
第二階段審稿中。
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
