一個於軟體維護過程中
維持軟體可靠度之系統 - 
及其在開放源碼社群中之驗證
摘要
近年來, 開放原始碼的概念與基於社群的軟體開發流程, 獲得了諸
多重要的成功案例. 軟體業界也逐漸開始引入部份的開放原始碼社
群經營方法. 然而在諸多成功案例之外, 其實有更多的開放原始碼
專案, 最終是走向失敗的結果. 過往許多的相關研究即在於探討, 
導致開放原始碼專案成功與失敗的關鍵因素. 這些因素包含了開放
原始碼軟體開發的品質控管, 社群管理政策與社群結構, 社群貢獻
分析, 社群人力資源分析等等. 其中較少受到關注的是由資訊分享
觀點, 對於開放原始碼專案的分析與提出改善方案. 在現今的開放
原始碼環境中, 不同開放原始碼軟體的社群彼此是獨立的. 不同社
群有各自的資訊分享媒介與論壇, 開放原始碼使用者與開發者必須
嘗試去參與各個獨立的媒介與論壇, 以獲得他們想要的資訊以及幫
助. 這樣的情況使得資訊的取得與分享, 以及不同社群之的合作較
為困難. 此研究之目的即在於透過社群溝通的數據來探討此一現象, 
分析可能原因, 並針對目前獨立的開放原始碼溝通媒介與論壇, 提
出一個中介軟體, 用以改善開放原始碼社群之間的資訊遞送與整合. 
同時也透過選取三個開放原始碼計畫作為實驗對象, 探討所提出的
中介軟體, 可以如何增加三個社群之間分享的資訊量, 同時協助測
試跟改正錯誤, 以維持及提高軟體可靠度.
i
Table of Contents
Chapter
1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
2 Current Communication Media . . . . . . . . . . . . . . . . . . . . . . . . . . 7
3 Middleware Architecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
3.1 Information Collection Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
3.2 Information Flow Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
3.3 User Space Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15
4 Experiment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
5 Conclusion and Future Works . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
iii
List of Figures
1.1 Current communication scenario through OSS portals. . . . . . . . . . . . . . 2
1.2 New communication scenario through middleware. . . . . . . . . . . . . . . . 5
2.1 The middleware layered architecture. (a) Structural layer view. (b) Information
flow view. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
4.1 The ontology used in experiment. . . . . . . . . . . . . . . . . . . . . . . . . 18
v
public discussions and investigated their applicability to the growth of OSS projects. In addi-
tion, Yamauchi et al. [7] discussed the usage of various communication media, including CVS,
to-do lists, and mailing lists, in implementing and maintaining effective communication chan-
nels between OSS users and developers, and in ensuring a smooth growth of an OSS project.
Bird et al. [8] highlighted the requirements of the communication and coordination in OSS
projects, and performed mining on email social networks. Baysal and Malton [9] also per-
formed mining to discover the correlation between emails among developers and the changes
in the release. Jiau and Kao [4] confirmed that user participation and communication by de-
velopers have efficacy on OSS project development. Besides, Aberdour [10] claimed that sus-
tainable community and community participation could achieve better quality in OSS projects.
Finally, the quantitative analysis of OSS development community [11, 12] suggested that the
communication of users and developers is an important factor in OSS project development.
Figure 1.1: Current communication scenario through OSS portals.
In this work, the term Communication Media refers to facilities provided by OSS portals
to help communication among users and developers. Those facilities include code reposi-
2
nication between project spaces distributed in different OSS portals. It causes the limitations
when users of specific OSS projects need OSS information about related OSS projects.
Third, the OSS information within an OSS community is limited to the particular OSS
project space in OSS portal. OSS users and developers who participate in one OSS project
can only find the OSS information they want through current communication media. Unfortu-
nately, most communication media in current OSS portals provide poor information retrieval
services. It means that potential OSS users and developers may not discover OSS information
which is important and useful to their tasks. In addition, good OSS projects may not be found
and get suitable attention from these potential OSS users and developers. Due to the limita-
tions of current communication media, many OSS users just download and use the OSS, and
are not willing to share their experience and knowledge through OSS portals. Christley and
Madey [13] revealed that 89% of OSS users are classified as passive users who make no ob-
servable contributions in the distribution of SourceForge.net population, and only 11% of OSS
users participate in OSS projects through the SourceForge.net [14]. Meanwhile, if most of the
OSS users are not willing to give any feedback through the OSS portals, it is difficult for OSS
developers to collect and extract valuable information from these OSS users. The OSS project
would not evolve stably without the continuous community participation and growing.
In this work, a middleware for OSS community communication is introduced. As shown
in Figure 1.2, the middleware masks the underlying different OSS portals and provides OSS
information management services to facilitate the establishment of communication channels
within OSS communities. Through the OSS information management services brought by
the OSS middleware, the availability of the OSS information can be enhanced, which brings
significant benefits to OSS users and developers. With OSS middleware, OSS information
4
projects. It will result in the continuous participation and growing of the OSS community, that
will provide the fundamental support for any OSS project under development.
The rest of the paper is organized as follows. Section 2 presents current communication
media of OSS projects. Section 3 describes the layered architecture of the middleware. Section
4 presents an experiment of the middleware. Finally, Section 5 draws the conclusions and future
works.
6
• OSS portals: The growing of OSS stimulates the development of OSS hosting and man-
agement websites. Famous OSS portals, such as Apache Foundation [15], CodePlex [16],
OpenFoundry [17], SourceForge.net [14], provide several services for OSS users and de-
velopers in OSS projects. These services include file release system, source code man-
agement service, communication tools, publicity service, and project web services.
Different kinds of communication channels can be found on the above services provided
by OSS portals (see Table 2.1). The first column under “Intra-Project” in Table 2.1 is “De-
velopers”, which represents the communication channels within OSS developers in the
same OSS project. Two major activities include project task assignment and development
decision discussion on trackers or mailing lists. According to Jiau and Kao [4], 65.80%
OSS projects were found to have no tracker discussions, and 81.69% OSS projects were
found to have no mailing list messages. The second column “Developers/Users” under
“Intra-Project” in Table 2.1 represents the communication channels between OSS users
and developers in the same OSS project. Through the usage of OSS, OSS users may
encounter some problems and bugs, or have new requirements about the OSS. They can
submit the related OSS information through the communication media provided by the
OSS portals. Hence, OSS developers can collect and gather the OSS information from
OSS users and make plans to fix bugs, perform patch, or release new version for OSS
users. The third column under “Intra-Project” in Table 2.1 is “Users” which represents
the communication channels within OSS users in the same OSS project. OSS users may
discuss or share their experiences on the public forums provided by OSS portals. How-
ever, 82.21% OSS projects were found to have no articles posted by OSS developers, and
77.58% OSS projects were found to have no article posted by OSS users [4]. It means
8
nities. For example, OSS users may give their OSS evaluations in the social networking
sites or blogs that they are familiar with. Meanwhile, more and more software developers
build their own blogs and share their opinions on the blogs. The generated OSS infor-
mation highly depends on individuals’ preferences and working context, and will attract
others that have the similar requirements to form a particular communication group. Ad-
ditionally, large amounts of usage problems, discussions, comparisons and evaluations
of various OSS projects can also be found in the knowledge sharing community. Slash-
dot [19] is one of the important knowledge sharing communities, which contains knowl-
edge contributed by many developers, engineers, and users all around the world. Large
amount of communication channels between community members occur frequently. Al-
though the OSS information in these virtual communities is more general than the OSS
information in OSS portals or project official websites, the high inter-project communi-
cation degree is still so valuable to OSS users and developers.
10
Chapter 3
Middleware Architecture
In this section, the architecture of OSS middleware is introduced. Figure 2.1 depicts the struc-
tural layer view and information flow view of middleware architecture. In the structural layer
view, the middleware is designed as a layered architecture shown in Figure 2.1(a). There are
three layers in OSS middleware, including Information Collection Layer, Information Flow
Layer, and User Space Layer. The Information Collection Layer provides mechanisms and
tools to collect OSS information from various OSS portals and user spaces. The Informa-
tion Collection Layer filters, organizes and dispatches OSS information. The top layer, User
Space Layer, provides widgets to represent and evaluate the routed OSS information.
3.1 Information Collection Layer
The Information collection layer contains the OSS Information Repository and three collectors,
OSS Monitors, Website Subscribers, and Website Crawlers. The collectors are responsible for
collecting OSS information from various OSS portals and other quantitative sources sites. All
OSS information retrieved by collectors will be preserved in the OSS Information Repository.
12
be implemented to grab reliable data from quantitative sources, such as FLOSSmole [20]
and CVSAnalY [21].
3.2 Information Flow Layer
The Information flow layer filters, aggregates and routes OSS information retrieved both from
OSS portals and other websites. It contains Information Transition Nodes, Core Ontology, and
Information Routing Manager. The information flow layer receives OSS information from the
information collection layer. The collected information is then delegated to the information
transition nodes for information filtering, aggregation, and routing.
• Information transition nodes: There are three different kinds of information transi-
tion nodes: OSS information filter, OSS information aggregator, and information dis-
patcher. The OSS information filter reduces information flow in subject-oriented or
content-oriented manner [22]. Opposite to the OSS information filter, OSS information
aggregator integrates information flow by similar subject or content. The correlated sub-
ject and content are defined in core ontology. Both OSS information filter and OSS in-
formation aggregator are extensible. Advanced middleware users can extend existing
filters or aggregators to make their own customized information flow. The aggregated
OSS information will finally be dispatched to users by information dispatcher.
• Information routing manager: The routing table is maintained by information routing
manager. When new filters or aggregators are added to the middleware, the routing table
may also be updated. Information routing manager is responsible in consistency and
redundancy checking while updating the routing table.
14
of communication channels within the OSS community. Recent micro blog platforms,
such as Facebook [23] or Twitter [24], are excellent candidates to implement the user
spaces. Their design allows users and project communities to have unique spaces. All the
messages, once posted on the unique space, can be delivered automatically to friends by
embedded message transporting services.
• Information widget and information evaluation widget: The information widget ac-
cepts aggregated OSS information and displays the aggregated OSS information to the
OSS users. Depending on the volume of OSS information to be displayed in a period
of time, alternative information widgets can be developed for users to better visualize
the OSS information. Users can freely adopt information widgets in their personal user
spaces. Despite accepting OSS information passively, users can express their evaluation
on interested information through information evaluation widget. The evaluation can be
further utilized by the middleware to improve routing paths.
• User profile: The user profile preserves evaluation record of a specific user to received
information through information evaluation widget. The evaluation record reflects the
evaluation of the user to specific routing path. It helps information widget arrange aggre-
gated information to the user according to the priority of the information.
16
Figure 4.1: The ontology used in experiment.
tology. Filters are used to examine the key terms in each posts, and then compare the key
terms in each posts to the ontology. If an OSS information contains more than two key terms
which can be associated to other project communities, that OSS information will be routed
to corresponding project communities. For example, a post from PMD community with both
“IDE” and “possible bug” key terms will be associated to JRefactory through “bug finding”.
Therefore that post will be routed to JRefactoring community.
Table 4.1: Experiment Result
Project NIori NIout Rout NIin Rin
jEdit 20045 1812 9.04% 1254 5.89%
PMD 6757 2487 36.81% 940 12.21%
JRefactory 738 73 9.76% 2177 74.68%
The routing result is shown in Table 4.1. NIori represents the amount of original OSS
information in a project community. NIout refers to the amount of routed-out OSS information
which are generated inside that project community, and routed to other project communities.
18
Chapter 5
Conclusion and Future Works
The communication media provided by current OSS portals focus on serving OSS develop-
ers alone, and usually confine the communication channels to corresponding OSS projects. In
addition, OSS users usually discuss or evaluate OSS through other websites or virtual com-
munities distributed all around the Internet. Although OSS information is useful for both OSS
users and developers, the OSS information can not be used and shared efficiently by current
communication media. Hence, due to the limitation of current communication media provided
by the OSS portals, a middleware for OSS community communication is introduced in this
work. The middleware aims to facilitate and gather OSS information from OSS users and
developers, and to dispatch necessary and appropriate OSS information to them. With the
services and tools provided by the middleware, OSS users can have more OSS information
from interested OSS projects, obtain the latest OSS information, and share their evaluations
and experiences on the user spaces. On the other hand, OSS developers can be benefited from
the OSS information collected and managed by the middleware to improve their OSS projects.
In this work, an experiment is represented to show the benefits of employing the middleware.
20
References
[1] T. O’Reilly, “Lessons from Open-Source Software Development,” Communications of the
ACM, vol. 42, no. 4, pp. 32–37, Apr. 1999.
[2] D. M. German, “Using Software Distributions to Understand the Relationship among Free
and Open Source Software Projects,” Proceedings of the 4th International Workshop on
Mining Software Repositories, pp. 24–31, May 2007.
[3] T. Madanmohan and R. De’, “Open Source Reuse in Commercial Firms,” IEEE Software,
vol. 21, no. 6, pp. 62–69, Nov./Dec. 2004.
[4] H. C. Jiau and C. H. Kao, “Assessing the Efficacy of User and Developer Activities in
Facilitating the Development of OSS Projects,” Journal of Software Maintenance and
Evolution: Research and Practice, vol. 21, no. 5, pp. 287–314, Sept./Oct. 2009.
[5] F. van der Linden, B. Lundell, and P. Marttiin, “Commodification of Industrial Software:
A Case for Open Source,” IEEE Software, vol. 26, no. 4, pp. 77–83, July/Aug. 2009.
[6] M. B. Twidale and D. M. Nichols, “Exploring Usability Discussions in Open Source
Developments,” Proceedings of the 38th Hawaii International Conference on System Sci-
ences, pp. 198c–198c, Jan. 2005.
[7] Y. Yamauchi, M. Yokozawa, T. Shinohara, and T. Ishida, “Collaboration with Lean Me-
dia: How Open-Source Software Succeeds,” Proceedings of the 8th ACM Conference on
Computer Supported Cooperative Work, pp. 329–338, Dec. 2000.
[8] C. Bird, A. Gourley, P. Devanbu, M. Gertz, and A. Swaminathan, “Mining Email Social
Networks,” Proceedings of the 3rd International Workshop on Mining Software Reposi-
tories, pp. 137–143, May 2006.
[9] O. Baysal and A. J. Malton, “Correlating Social Interactions to Release History during
Software Evolution,” Proceedings of the 4th International Workshop on Mining Software
Repositories, pp. 7–14, May 2007.
[10] M. Aberdour, “Achieving Quality in Open-Source Software,” IEEE Software, vol. 24,
no. 1, pp. 58–64, Jan./Feb. 2007.
[11] D. Hinds and M. R. Lee, “Social Network Structure as a Critical Success Condition for
Virtual Communities,” Proceedings of the 41st Annual Hawaii International Conference
on System Sciences, pp. 323–332, Jan. 2008.
22
國立成功大學 
國科會出國案報告書 
 
 
 
出國期間：2009/9/11 – 2009/9/14 
經費來源：國科會計畫經費 
國科會計畫： 
ㄧ個於軟體維護過程中維持軟體可靠度之系統及
其在開放源碼社群中的驗證 
單位：國立成功大學電機系 
職稱：博士研究生 
姓名：李明倫 
聯絡電話：06-2754536 
 
 
 
 
 
 
 
目次 
參加目的 ...............................................................................................................4 
會議內容與流程 ....................................................................................................5 
參與議程 ...............................................................................................................6 
會議心得 ...............................................................................................................8 
日本社會之觀察 ....................................................................................................9 
結論.................................................................................................................... 10 
參考文獻 ............................................................................................................ 10 
 
 
會議內容與流程 
會議活動自 2009/9/11 開始，至 2009/9/14 結束。參與報告的論文作者或者參與
會議的報名者可以自 2009/9/11 日下午開始報到，也可以在會議活動期間報到。
報到後可以領取以下物件： 
1. 會議名牌，代表參與會議之身份識別。 
2. 會議論文集，內容為會議宗旨、會議組織、會議地點資訊、會議流程資訊、
Keynote Speech 作者與內容簡介、會議議程與參與論文列表資訊，但不包
含論文內容。 
3. 會議論文光碟，內容為會議資訊、會議收集之論文本文 (pdf files)。 
4. 會議期間午餐餐卷和 Reception/Banquet 入場卷。 
5. 會議註冊收據。 
6. 會議周邊觀光與交通資訊。 
7. 會議主辦學校簡介。 
8. 印有會議字樣的黑色斜背帆布公事包，用來裝載以上內容。 
 
會議三天，每天於當地時間早上 9:00 開始進行 Keynote Speech，由會議邀請該
領域重要的學者進行演講，分享最新的研究成果。10:00 結束後可以取用一些點
心飲料，準備上午的各領域的議程，同一時間通常有 5 個議程同時進行，我選
擇最有興趣的議程去參與。至中午各議程結束後，於會議招待的餐廳憑餐卷享用
12. Ubiquitous Multimedia Services and Applications for Residential Users(II) 
13. Advanced Multimedia Processing and Retrievals 
14. Advances in Biometrics(II) 
15. Recent Technologies and Applications of Audio Data Hiding 
16. Coding and Protocols in Security and Applications 
17. Intelligent Image and Signal Processing 
18. Intelligent Document Processing and Management Systems 
19. Protection and Authentication for Multimedia Information 
20. Behavior Analysis and Abnormal Event Detection 
21. Intelligent Watermarking Techniques, Image Authentication and Visual 
Cryptography(I) 
22. Digital Archives and Digital Heritages(I) 
23. Human Information Processing and Its Applications 
24. Statistical Image Processing and Application 
25. Image Processing and VLSI Implementation 
26. Intelligent Watermarking Techniques, Image Authentication and Visual 
Cryptography(II) 
27. Digital Archives and Digital Heritages(II) 
28. Advanced Reversible Data Hiding and Steganalysis 
29. Intelligent Image fusion and Its Application 
30. Application of Intelligent Computing to Signal and Image Processing 
31. Industry Trends in Information Hiding and Multimedia Signal Processing 
32. Advanced Data Hiding and Coding Techniques for Audio Signals 
33. Intelligent Video Processing 
34. Internet Multimedia Technology and Applications 
35. Advances in Multimedia Signal Processing and Communications 
的過程裡，也認識了其他參與會議的朋友。有會議負責的同學，也有許多同是前
來進行報告的同學，彼此分享經驗彼此交流。 
我認為如國內要舉辦國際性會議，好的論文議題與好的講者能夠吸引與留下有素
養的聽眾，使得會議在實質面上有活絡的活動，讓研究彼此激盪知識彼此交流，
我期許自己能夠參與更大型的國際會議，並觀摩相關的做法。 
 
日本社會之觀察 
此行參與會議，在日本生活數日，觀察日本國人的都市建設與生活習慣，尤其是
日本的古都 – 京都。綜觀來說，京都地區普遍環境整潔，車站周邊的行人都穿
戴得宜，對待外國人也相當的親切。細部地觀察，我發現以下幾點值得台灣效法： 
1. 人民的品德教育：京都地區四處可見抽菸的人，但是抽菸的人都聚集在規劃
的有排煙系統之區域，或者室外，即使抽菸的人相當多，卻不見地上有殘
留的菸蒂。可見日本國人重視”規定”，並確實遵守。 
2. 公共設施考量周全：印象深刻的是在京都區域的十字路口，除了有導盲磚之
外，更設有蜂鳴裝置，提醒盲胞現在紅綠燈的狀態，在樓梯的入口也設置
有類似裝置告知阻礙。以聲音提醒盲胞點字位置，使得盲障設施不會變成
空有其表的建設。 
3. 豐富的旅遊資訊：目前，台灣也逐漸的推廣觀光產業，充足的旅遊資訊與地
