 1 
行政院國家科學委員會專題研究計畫期末報告 
具效率與隱私保護的社會網路分析演算法- 
以分割為基礎的社群偵測方法 
  
 計畫編號：NSC 98-2221-E-194-027-MY3 
執行期限：98 年 8 月 1 日至 101 年 7 月 31 日 
主持人：吳邦一   國立中正大學資訊工程系 
 
一、中文摘要 
此為本三年計畫(98/8/1~101/7/31)之期末報告，在第一年的計畫執行中，我
們主要進行下列研究：「廣義 CLUB問題的演算法」、「Similarity in 2-Mode social 
networks」以及「non-separating paths and connected bipartition problem」
等研究。在第二年的計畫中，我們延續第一年的主題進行下列研究：廣義 CLUB問
題的演算法、random 2-Mode social networks、 non-separating paths and 
connected bipartition problem。在第三年的計畫執行中，我們主要進行下列研
究：balanced graph 的相關演算法、在 Social Network中判斷真假朋友、On the 
maximum disjoint paths problem on edge-colored graphs、以及一些其他圖形
演算法的研究，這些工作均已獲得初步成果並達成參與學生的訓練目標，部分內
容已發表；部份則在準備投稿發表中。 
 
 
關鍵詞：社交網路分析、演算法 
 
二、緣由與目的 
隨著計算機科學的發展，各個跨領域的研究越來越蓬勃，舉凡機械、建築、
生物、傳播、甚至藝術，無一不在，計算機科學與社會行為的交集領域稱為Social 
computing，依據[Wiki]的解釋：「Social computing is a general term for an area of 
computer science that is concerned with the intersection of social behavior and 
computational systems. 」。近年來，social computing越來越受到產業界與學術界的
重視，除了例如email, blog, wiki, 即時通訊等社交軟體（social software）受到極大
 3 
常是採取以由上而下切割(top-down partition)或是由下而上整合(bottom-up merge)
兩種策略之一。基本社群偵測可以簡單分成兩類，一類是只要抓出一個群體；另
一類是要將網路區分成若干群體。前者例如找k-clique, k-club, k-clan, k-plex以及
maximum density subgraph等問題均屬之；在後者中，幾個傳統問題包括clique 
partition, balanced connected partition, maximum ratio partition, data (graph) clustering, 
k-center/median problem 等等。本計劃將著重在後者，是研究以top-down的approach
來進行社群偵測，這將不可避免的涉及圖形上的分割問題，我們將探討這些分割
問題如何運用到社交網路的社群偵測上。我們的研究不僅會包括理論上的探討，
也會著重在實用軟體工具的開發，對於目前時間複雜度高的社群偵測問題提出實
用的演算法，以提供社會科學研究者之用。 
本研究計畫將專注於大型部落格社交網路之分析，在此類演算法之研究上，對
於實際計算效率與理論上的複雜度同等重要，因此，本研究計畫將不只限於理論
分析，也包括實際資料的效率測試，研究目的包括： 
1 以網路擷取資料進行大型社交網路分析 
2 探索社交網路軟體之現況與問題並嘗試改進行 
3 了解大型社交網路所涉及之演算法問題並提出解決方法。 
 
【註】本計劃與「大型社交網路分析之演算法研究」(NSC 97-2221-E-194-064-MY3)
以及「多重關係社會網路之演算法問題研究」(NSC 100-2221-E-194-036-MY3)性質
相近，且計畫執行期程部分重疊，故部分計劃成果亦有重複。 
三、結果與討論 
在第一年的計畫執行中，我們主要針對community detection、2-mode 
similarity以及connected bipartition問題進行演算法的研究。以下就目前成果
分述之 
【第一年】 
1. Generalized club problem:  
A. Flow-club: 我們研究如何從社會網路中找出子群體，而在這子群體
 5 
3. Connected bipartition and non-separating path:  
A. For two vertices in a graph, a path between them is 
non-separating if the remaining graph is connected. A previous 
work shows that a non-separating path always exists if the 
connectivity is more than two. We show that to determine if 
there is a non-separating path is NP-complete for graphs of 
connectivity one or two. Sufficient conditions for the 
existence of a non-separating path on biconnected graphs are 
given, as well as polynomial time algorithms for finding such 
a path whenever the condition holds. 
B. For two vertices s and t in a connected undirected graph G with 
positive weights on vertices, the maximum remaining component 
is the maximum weight component of G-P for any st-path P. In 
this paper, we show a 2-approximation algorithm for the problem. 
We also reduce the problem to finding a non-separating path in 
a biconnected graph. The reduction also implies a sufficient 
condition for the existence of a non-separating path. It is also 
shown that solving the problem is helpful for improving the 
approximation ratio of the maximum balance connected 
bipartition problem. Particularly, for interval graphs, we 
show a linear time algorithm for the minimum non-separating 
path problem and thereby improve the approximation ratio of the 
maximum balance connected bipartition problem from 4/3 to 5/4. 
C. A node-weighted grid graph can be thought of as a two 
dimensional matrix, in which there exists an edge between two 
consecutive nodes in the same row or the same column. The 
balanced connected bipartition (BCP_2) problem looks for a way 
to bipartition a graph into two connected subgraphs with their 
 7 
random graphs is an important issue in social network analysis. 
In this paper, we propose a new generative model for random 
bipartite social networks in which group effect is considered. 
Several scenarios of network growth are considered. Different 
from previous models in the literatures, we focus on group effect. 
The simulation results show that there are significant 
differences between grouping and ungrouping cases. The new model 
also explains an interesting phenomenon in real social networks 
that a famous member can pull up the popularities of the ones with 
less popularity in his/her group. 
3. On the maximum locally clustered subgraph and some related 
problems: (two results) 
甲、 Motivated by detecting false friend links in online social 
networks, we define two optimization problems based on the 
balance theory for structural transitivity in social networks. 
We give a polynomial time algorithm for one problem and show 
the NP-hardness of the other. For the NP-hard problem, we show 
some polynomial time solvable cases and give a 2-approximation 
algorithm for a restricted version. We also propose a heuristic 
algorithm for a more general version of the problem. 
乙、 A Structural Approach for Finding Real-Friend Links in 
Internet Social Networks： We propose a method of structural 
analysis for detecting true/false friend links in Internet 
social networks. By the balance theory in social science and 
observed user behaviors, we define two graph optimization 
problems. We examine the computational complexities and 
develop algorithms. We show that one of the problems can be 
solved in polynomial time while the other is NP-hard. For the 
 9 
st-paths strictly longer than the shortest path length. In this 
paper we show that the problem can be solved in linear time if 
the distances from s and t to all other vertices are given. 
Particularly our new algorithm runs in O(|V|\log |V|+|E|) time 
for general graphs, which improves the previous result of O(|V|^2) 
time for sparse graphs, and takes only linear time for unweighted 
graphs, planar graphs, and graphs with positive integer edge 
lengths.   
3. A 7/6-approximation algorithm for the max-min connected 
bipartition problem on grid graphs: For a given graph with 
nonnegative weights on nodes, the max-min connected bipartition 
problem looks for a way to partition the graph into two connected 
subgraphs such that the minimum weight of the two subgraphs is 
maximized. In this paper, we give a 7/6-approximation algorithm 
with time complexity O(N\log N) for grid graphs, in which N is 
the number of nodes. The approximation ratio is currently the best 
result achieved in polynomial time. 
4. A note on approximating the min-max vertex disjoint paths on 
directed acyclic graphs: This paper shows that the FPTAS for the 
min–max disjoint paths problem on directed acyclic graphs by Yu 
et al. (2010) can be improved by a rounding and searching 
technique. 
5. Detecting Real Friends in a Social Network Based on Strong Links:  
We propose a method of structural analysis for detecting 
true/false friend links in an Internet social network. By the 
balance theory in social science and observed user behaviors, we 
define a graph optimization problem. We examine the computational 
complexities and develop heuristic algorithms. More importantly, 
 11 
We also design a branch-and-bound algorithm and show the 
worst-case time complexity is O(n 2min{n,k}), in which n=|V| and k 
is the number of changing edges. By experiments on random graphs, 
we show that our branch-and-bound algorithm is much faster than 
a trivial one. 
8. Algorithms for the Maximum Balanced Subgraph Problem: Let G=(V,E) 
be an undirected signed graph in which each edge is marked a sign: 
either positive sign '+' or negative sign '-'. A signed graph is 
balanced if every cycle has even number of negative edges. In this 
thesis, we study the maximum balanced subgraph problem, whose goal 
is to find a maximum subset F of edges such that the subgraph 
induced by F is balanced. We present polynomial-time algorithms 
for graphs with a special constraint and for planar graphs, a 
2-approximation algorithm, and a branch-and-bound algorithm for 
general graphs. By experiments on random graphs, we show that our 
branch-and-bound algorithm is much faster than a trivial one. 
四、計畫成果自評 
在三年的計畫中，我們進行社會網路分析之研究工作並已獲得多項成果，同
時也進行相關人員的訓練工作並撰寫論文。除了本計畫直接產生的研究成果外我
們在這段期間也完成了一些前期研究計畫的延續工作（論文發表），茲將此段期
間的工作成果總結如下： 
已發表之 Journal Papers: 
1. H.-L. Wang, B.Y. Wu and K.-M. Chao* (2009/1), The Backup 2-Center and Backup 2-Median 
Problems on Trees, Networks, 53(1), pp.39-49.  [SCI, EI] 
 NSC95-2221-E-366-003 
2. B.Y. Wu (2009/8), An optimal algorithm for the maximum-density path in a tree, Information 
Processing Letters, 109(17), 975-979.  [SCI, EI] NSC97-2221-E-366-001-MY3 
3. L.-H. Yen*, B. Y. Wu and C.-C. Yang (2010/7), Tree-based object tracking without mobility 
statistics in wireless sensor networks, Wireless Networks, 16(5): 1263-1276. [SCI] NSC 
96-2221-E-366-003 
 13 
11. P.-S. Wei, B.Y. Wu (2012/4), Balancing a Complete Signed Graph by Changing Minimum 
Number of Edge Signs, in Proceedings of the 28th Workshop on Combinatorial Mathematics and 
Computation Theory, Taiwan. 
12. C.-H. Bai, B.Y. Wu (2012/4), Finding the Maximum Balanced Vertex Set on Complete Graphs, 
in Proceedings of the 28th Workshop on Combinatorial Mathematics and Computation Theory, 
Taiwan. 
13. Y.-T. Huang, B.Y. Wu (2012/8), Extracting Strongly Connected Friend Networks, in Proceedings 
of the 5th IET International Conference on Ubi-Media Computing (U-Media 2012), Xining 
China. [EI] 
Under-review Works: 
1. B.Y. Wu, On the minimum non-separating connector and the maximum remaining component 
problems, (under review) 
2. A-C. Chu, B.Y. Wu and K.-M. Chao*, A linear-time algorithm for finding an edge-partition with 
max-min ratio at most two, (under revision) 
3. B.Y. Wu, J.-L. Guo, Y.-L. Wang, A linear time algorithm for the next-to-shortest path problem 
on undirected graphs with nonnegative edge lengths 
4. B.Y. Wu, Solving 2-cluster vertex deletion by vertex cove 
 
    在人員的訓練上，參與計畫的中正大學資工系同學都已對社交網路有了初步
了解，也或得演算法的相關訓練，部分同學以順利或得碩士學位並在 IT 科技業從
事相關的工作，對計畫的進展也都有實質的幫助。因此，本計畫已充分達成目標。 
 
 2 
三、考察參觀活動(無是項活動者略) 
四、建議 
無。 
五、攜回資料名稱及內容：會議論文集 
六、其他 
On the Maximum Locally Clustered Subgraph
and Some Related Problems
Bang Ye Wu
National Chung Cheng University, ChiaYi, Taiwan 621, R.O.C.
bangye@cs.ccu.edu.tw
Abstract. Motivated by detecting false friend links in online social net-
works, we deﬁne two optimization problems based on the balance theory
for structural transitivity in social networks. We give a polynomial time
algorithm for one problem and show the NP-hardness of the other. For
the NP-hard problem, we show some polynomial time solvable cases and
give a 2-approximation algorithm for a restricted version. We also pro-
pose a heuristic algorithm for a more general version of the problem.
Keywords: algorithm, social network analysis, time complexity,
NP-hard, approximation algorithm.
1 Introduction
A social network is a social structure between actors. The nodes in the network
are the actors, while the links show some kind of social ties, such as friend-
ship, co-working or message ﬂow. Social network analysis (SNA) focuses on the
analysis of patterns of relationships among actors. Due to the rapid growth of
Internet, many social networking platforms are provided and become more and
more popular. These platforms provide users to interact with friends and even
make friends with others. Nowadays hundreds of million people have registered
in many social networking websites, such as Facebook, Twitter, and Plurk [17].
However, due to several reasons, the number of friend-links in such online social
networks (OSN) are much more than that in real-life. Today, a user with hun-
dreds or even thousands of friend-links in Facebook is a common phenomenon.
One of the reasons is that building a friend-link is much easier than making a
friend in real life. Also many people like adding celeblogs as friends (hub-eﬀect).
Another reason is that many social networking websites, for example Facebook,
provide online games and encourage users to invite others joining the games to-
gether. As a result, there are many false-friend links in an OSN, and therefore
how to identify real-friend links becomes an important issue in SNA.
In this paper, we study the following two graph optimization problems arising
in structural analysis of detecting false links. The formal deﬁnitions and their
reasons are delayed to the next section. An edge is non-triangular if its two end-
points have no common neighbor. The ﬁrst problem is the Maximum Constrained
Non-triangular Edges (MCNE) problem, in which we want to ﬁnd a maximum
W. Wang, X. Zhu, and D.-Z. Du (Eds.): COCOA 2011, LNCS 6831, pp. 234–246, 2011.
c© Springer-Verlag Berlin Heidelberg 2011
236 B.Y. Wu
For a graph G, V (G) and E(G) denote the node and edge sets, respectively.
Two nodes u and v are neighbors of each other if (u, v) ∈ E. The neighborhood
of a node Nv is the set of nodes adjacent to v, i.e., Nv = {u ∈ V |(u, v) ∈ E}. Let
Nuv = Nu ∩ Nv denote the co-neighbors of u and v. For a node subset U , the
subgraph of G induced by U is denoted by G[U ]. Also the subgraph induced by
an edge set F is denoted by G[F ]. The degree of a node v in a graph G, denoted
by d(G, v) is the number of its neighbors in G. When there is no confusion, we
shall simply use d(v). We shall also use d(F, v) to denote d(G[F ], v) for short.
A clique is complete subgraph. A k-clique is a clique of k nodes. A k-clique
is a trivial clique if k < 3. A 3-clique is also called as a triangle. A clique is
maximal if it is not properly contained in another clique. Two cliques are dis-
joint if they have no common node, and non-overlapped if they do not share a
common edge. An edge (u, v) is a triangular edge if it belongs to some triangle;
or a non-triangular edge otherwise. The sets of all triangular, and non-triangular
respectively, edge sets of a graph G are denoted by T (G) and T¯ (G), respectively.
More formally, T¯ (G) = {(u, v) ∈ E(G)|Nuv = ∅}, and (T (G), T¯ (G)) is a bipar-
tition of E. When there is no confusion, we shall use T and T¯ instead of T (G)
and T¯ (G). By Tv we denote the set of all triangular edges incident to a node
v, and T¯v is deﬁned similarly. In the remaining paragraphs, the input graph is
always G = (V,E) and we use n = |V | and m = |E|.
The local clustering coeﬃcient, or CC in short, of a node v in a graph G is
a basic measurement which quantiﬁes how close the neighborhood of node v is
[6,16]. The formal deﬁnition is given by
CC(G, v) =
{
2η(v)
d(v)·(d(v)−1) if d(v) ≥ 2
1 otherwise
(1)
in which η(v) = |E(G[Nv])| is the number of edges between the neighbors of v.
For our convenience we deﬁne CC(v) = 1 if d(v) < 2. In this paper we shall only
discuss local CC but not the CC of a group or a entire graph, so we only use “CC”
instead of “local CC” in the remaining paragraphs. We shall use CC(v) if we
need not specify the graph from the context, and use CC(F, v) = CC(G[F ], v)
for an edge set F . Similarly we shall use η(F, v) if the neighbors are taken from
an edge set F , i.e., η(F, v) = |{(s, t) ∈ F |(s, v) ∈ F ∧ (t, v) ∈ F}|.
2.2 Problem Modeling
According to the balance theory for structural transitivity [3,6,16] in social net-
works, a real-friend link is usually an edge in some triangle — as in common
parlance, “the friend of my friend is also my friend”. So, to detect the false
links, the ﬁrst thought is to ﬁnd all non-triangular edges in the social network.
But regarding all non-triangular edges as false links may be overkilled. Since a
more active actor usually has more true and false links simultaneously, we deﬁne
the following optimization problem. The reason of using d(F, v) + 1 instead of
d(F, v) as the bound is to allow the existence of pending nodes which have no
any triangular edge.
238 B.Y. Wu
Algorithm 1
Input: a graph G = (V,E) and a positive real γ < 1;
Output: an optimal solution F of the MCNE problem;
1: ﬁnd T (G) and T¯ (G);
2: compute b(v) by Eq. (2) for each node v;
3: ﬁnd an edge subset of F by solving a UDCS problem with input G[T¯ ] and b;
4: output T (G) ∪ F .
Lemma 1. T (G) and T¯ (G) can be computed in O(mn) time.
Proof. To ﬁnd T (G) is equivalent to determining if Nuv = ∅ for all edges (u, v) ∈
E. If the graph is stored in an adjacency matrix, it can be easily done in O(n3)
time. For a sparse graph stored in an adjacency list, determining if Nuv = ∅
can be done in time linear to d(u) + d(v). Therefore the total time complexity
is
∑
(u,v)∈E(d(u) + d(v)) = 2
∑
(u,v)∈E d(v) = 2
∑
v∈V d(v)
2 ∈ O(mn) since∑
d(v) = 2m and d(v) ≤ n− 1 for any v ∈ V . 	unionsq
By [4], the UDCS problem can be solved in O((
∑
v b(v))
1/2m). In this application
b(v) < n, and therefore (
∑
v b(v))
1/2 < n. Together with Lemma 1, we obtain
the next theorem.
Theorem 1. The MCNE problem can be solved in O(mn) time.
4 The MLCS Problem
We discuss the MLCS problem in this section. We show the NP-hardness in
Section 4.1. Then we give some polynomial time algorithms for some special
cases in Section 4.2. In Section 4.3, we ﬁrst give a 2-approximation algorithm for
the non-overlapped case and θ = 1, and then extend it to a heuristic algorithm
for general θ.
4.1 The NP-Hardness
In this subsection we show the next theorem.
Theorem 2. The MLCS problem is NP-hard even when all maximal cliques are
non-overlapped.
We ﬁrst show the NP-hardness of a restricted version of the partition into tri-
angles (PIT) problem, and then the theorem is shown by transforming from the
restricted PIT problem. The restricted PIT problem is as follows.
Restricted Partition Into Triangles (Restricted PIT) problem
Instance: A graph G = (V,E) with |V | = 3q for some integer q, in
which any two triangles in G are non-overlapped.
Question: Can the nodes of G be partitioned into q disjoint sets V1, V2, ..., Vk
such that the subgraph induced by each Vi is a triangle?
240 B.Y. Wu
Theorem 3. When G contains no 3-clique, the optimal solution of the MLCS
problem is a maximum cardinality matching of G and therefore can be solved in
O(
√
nm) time.
Proof. Since there is no 3-clique, for any node in any subgraph of G, its CC is
either 0 or 1. Therefore any feasible solution can only consist of disjoint edges
and isolated nodes, i.e., a matching of G. The result follows from that a maxi-
mum cardinality matching is the one with as many edges as possible. The time
complexity comes from [12]. 	unionsq
Next we aim at generalizing the above theorem to the case that all non-trivial
maximal cliques are disjoint. We ﬁrst show some properties. Suppose that the
current degree of a node v is dv and ηv is the number of edges between these
neighbors. Consider fv(k, ηv) as the CC(v) when we attach an additional (k+1)-
clique to v for k ≥ 1. Note that fv is deﬁned only for k ≥ 1.
fv(k, ηv) =
ηv +
(
k
2
)
(
dv+k
2
) = 2q + k(k − 1)
(dv + k)(dv + k − 1) (3)
Lemma 3. fv(k + 1, ηv) ≥ fv(k, ηv) when k ≥ 2ηv/dv.
Proof. By Eq. (3), fv(k + 1, ηv)/fv(k, ηv) ≥ 1 iﬀ(
2ηv + k(k + 1)
2ηv + k(k − 1)
)(
dv + k − 1
dv + k + 1
)
≥ 1 ⇔ k ≥ 2ηv
dv
	unionsq
The next corollary immediately follows from the above lemma.
Corollary 1. fv(k, 0) is increasing as k increases.
Lemma 3 also implies that fv(k, ηv) is bitonic, i.e., it ﬁrst decreases and then
increases. For a preexisting edge set F and a node v, the size of a clique which
can be attached to v without violating the requirement of CC can be determined
by its current degree and ηv, and importantly the range of feasible sizes has the
form as shown in the next corollary.
Corollary 2. The range of k such that a k-clique can be attached to a node
to satisfy the CC requirement has the form [0, l] ∪ [u,∞], in which l ≤ u are
determined by ηv and dv.
Next, the number b(v) of non-triangular edges incident to a node v, which can
be added without violating the requirement of CC, can be easily computed by
2ηv
(dv + b(v))(dv + b(v)− 1) ≥ θ (4)
Lemma 4. If all maximal non-trivial cliques are disjoint, there exists an optimal
solution of the MLCS problem containing all the non-trivial cliques.
242 B.Y. Wu
measurement is the number of removed edges. When θ is ﬁxed to 1, the problem
is called by MLCSN1. First we give a 2-approximation algorithm for the dual
MLCSN1 problem.
Algorithm 3. A 2-approximation algorithm for the dual MLCS problem with
non-overlapped maximal cliques and θ = 1
1: S ← ∅;
2: ﬁnd all non-trivial maximal cliques and store them in a list L;
3: while cliques in L are not disjoint do
4: extract a clique C with maximum cardinality from L;
5: S ← S ∪ E(C);
6: for all clique Q in L do
7: V (Q)← V (Q)− V (C);
8: if |V (Q)| < 3 then remove Q from L;
9: end for
10: end while
11: let V ′ be the set of nodes not in S;
12: ﬁnd an optimal solution M of G[V ′] by Algorithm 2;
13: return S ∪M .
To simplify the performance analysis, we analyze the simpler version of Algo-
rithm 3, in which we put all maximal cliques into L (including maximal 2-cliques)
initially and the while-loop is continued until all cliques in L are singleton (the
while-condition and the if-condition at Step 8 are modiﬁed). Algorithm 3 per-
forms better than the simpler version because their behaviors are the same before
exiting the while-loop, and after that, Algorithm 3 ﬁnds an optimal solution of
the remaining graph.
Let F ∗ be an optimal solution for the MLCSN1 problem. For any node v,
let Cˆv denote the maximum clique containing v and cv = |V (Cˆv)| − 1, i.e., the
number of neighbors of v in Cˆv.
Lemma 5. |E − F ∗| ≥ (1/2)∑v∈V (d(v) − cv).
Proof. When θ = 1, any feasible solution is a set of disjoint cliques. By the
deﬁnition of cv, for any node v ∈ V , d(F ∗, v) ≤ cv. That is, the minimum degree
decrement of v is at least (d(v) − cv) and therefore the total degree decrement
is at least
∑
v∈V (d(v) − cv). 	unionsq
Lemma 6. Algorithm 3 drops at most
∑
v∈V (d(v) − cv) edges.
Proof. The edges are dropped at Step 7 when we put a clique C to S and remove
V (C) from any other clique joint to C. Consider any node v ∈ V (C). Some
neighbors of v may have been removed before this step. Let d′(v) be the current
degree of v and c′v the number of neighbors of v in Cˆv which have not been put
into S yet. Since C is a largest remaining clique, we have |V (C)| − 1 ≥ c′v. The
number of edges incident to v and removed at this iteration is
d′(v)− (|V (C)| − 1) ≤ d′(v) − c′v ≤ d(v)− cv.
244 B.Y. Wu
The situation at Step 8 is that there is a preexisting edge subset S and a
clique C such that S ∩ E(C) = ∅ (by the assumption that non-trivial cliques
are non-overlapped). We want to ﬁnd a largest sub-clique C′ of C such that, for
each v ∈ V (C′), attaching C′ to v does not violate the requirement of CC, i.e.,
η(S, v) +
(|V (C′)| − 1
2
)
≥ θ ·
(
d(S, v) + |V (C′)| − 1
2
)
By Corollary 2, there exist two integers b1(v) ≤ b2(v) for each node v such
that the size of a clique which can be attached to v without violating the CC
requirement is in the range [0, b1(v)]∪ [b2(v),∞]. It is possible that b1(v) = 0 or
b2(v) ≥ |V (C)|, and the range degenerates into one interval or even ∅. For the
latter case we can simply ignore the node. Anyway, the problem can be simpliﬁed
as follows:
Given two integers b1(i) and b2(i) satisfying 0 ≤ b1(i) ≤ b2(i) for i from
1 to k, ﬁnd a maximum cardinality subset R of {1..k} such that, for each
i ∈ R, |R| ≥ b2(v) or |R| ≤ b1(v).
We shall call it the Maximum Subset with Range Constraint (MSRC) problem.
A naive algorithm for this problem works as follows. For i from k down to one,
check if there are i elements satisfying the range constraint. The time complexity
is obviously O(k2). The problem can also be thought of as follows. Given at most
2k intervals [li, ri] in which the endpoints are all integers between 0 and k, we
want to know, for each integer i between 1 and k − 1, the number of intervals
containing i. The following simple algorithm works in linear time. First we sort
the endpoints and then scan these endpoints from small to large. When a right
endpoint is encountered, the number of intervals is decreased by one; and when
a left endpoint is encountered, the number of intervals is increased by one. The
scan process can be done in linear time since there are at most 4k endpoints.
Besides, since all endpoints are integers in the range [0, k], the sorting process
also takes only linear time. We have the next lemma.
Lemma 7. The MSRC problem can be solved in linear time.
Lemma 8. The time complexity of Algorithm 4 is O(mn).
Proof. Similar to Theorem 5, the total edge number of all cliques are linear to
m, and all the maximal cliques can be found in O(mn) time. At each iteration
of the loop, we extract a maximum clique from L, solve an MSRC problem, then
delete some node from the clique, and put the remainder back into L. Using
a priority queue to implement L, the total time complexity for the extracting
step is O(m logm) since total edge number of all cliques in L is decreased by
at least three at each iteration. Suppose that initially the number of nodes of
the maximal cliques are ki, 1 ≤ i ≤ c. An initial ki-clique may consume up
to O(k2i ) time since in worst case its node number is decreased by three each
time chosen from L and solving the corresponding MSRC problem takes time
linear to its node number. Therefore The total time complexity of the loop is
246 B.Y. Wu
7. Java, A., Song, X., Finin, T., Tseng, B.: Why we twitter: An analysis of a mi-
croblogging community. In: Zhang, H., Spiliopoulou, M., Mobasher, B., Giles, C.L.,
McCallum, A., Nasraoui, O., Srivastava, J., Yen, J. (eds.) WebKDD 2007. LNCS,
vol. 5439, pp. 118–138. Springer, Heidelberg (2009)
8. Kuan, S.T., Wu, B.Y., Lee, W.J.: Finding friend groups in Blogsphere. In: Proc.
of the 22nd International Conference on Advanced Information Networking and
Applications, pp. 1046–1050 (2008)
9. Li, Q., Xu, M., Hou, J., Liu, F.: Web classiﬁcation based on latent semantic index-
ing. Journal of Communication and Computer 3(1), 24–27 (2006)
10. Liben-Nowell, D., Novak, J., Kumar, R., Raghavan, P., Tomkins, A.:
Geographic Routing in Social Networks. Proc. of the National Academy of Sci-
ences (PNAS) 102(33), 11623–11628 (2005)
11. Lin, J., Halavais, A., Zhang, B.: Blog network in America: blogs as indicators of
relationships among U.S. cities. Connections 27(2), 15–23 (2007)
12. Micali, S., Vazirani, V.V.: An O(
√|V ||E|) algorithm for ﬁnding maximum match-
ing in general graphs. In: FOCS, pp. 17–27 (1980)
13. Mislove, A., Marcon, M., Gummadi, K.P., Druschel, P., Bhattacharjee, B.:
Measurement and analysis of online social networks. In: Proc. of the 5th
ACM/USENIX Internet Measurement Conference (IMC 2007), San Diego, CA
(2007)
14. Mislove, A., Koppula, H.S., Gummadi, K.P., Druschel, P., Bhattacharjee, B.:
Growth of the ﬂickr social network. In: Proc. of WOSN, Seattle, WA (2008)
15. Shen, D., Sun, J.T., Yang, Q., Chen, Z.: Latent friend mining from blog data. In:
Sixth IEEE International Conference on Data Mining (ICDM 2006), pp. 552–561
(2006)
16. Wasserman, S., Faust, K.: Social Network Analysis. Cambridge University Press,
Cambridge (1994)
17. Wikipedia, http://en.wikipedia.org/wiki/.
18. Yang, C.-P., Liu, C.-Y., Wu, B.Y.: Inﬂuence clubs in social networks. In: Pan, J.-S.,
Chen, S.-M., Nguyen, N.T. (eds.) ICCCI 2010. LNCS, LNAI vol. 6422, pp. 1–10.
Springer, Heidelberg (2010)
 2 
狂的現象，這情形好似當年資訊化的情形，不過我後來發現會中也有人提出了類似的觀點。 
本次為 IEEE舉辦，會議的論文已納入 IEEE Xplore收錄。 
三、考察參觀活動(無是項活動者略) 
四、建議 
無。 
五、攜回資料名稱及內容：會議摘要論文集光碟 
六、其他 
A Structural Approach for Finding Real-Friend Links in Internet Social Networks
Yao-Ting Huang, Kuan-Hung Lin and Bang Ye Wu∗
National Chung Cheng University, ChiaYi, Taiwan 621, R.O.C.
∗Email: bangye@cs.ccu.edu.tw
Abstract—We propose a method of structural analysis for
detecting true/false friend links in Internet social networks.
By the balance theory in social science and observed user
behaviors, we deﬁne two graph optimization problems—One
can be solved in polynomial time while the other is NP-hard.
Exact and heuristic algorithms are proposed for the NP-hard
problem. To show the efﬁciency of the algorithm, experiments
on random graphs were performed. More importantly, to show
the effectiveness of the new model, experiments were performed
on random graphs which simulate the behavior on Internet
social networks. By examining the precisions and recalls of
both true and false edges, it is shown that our algorithms are
efﬁcient for moderate data and the new models are effective.
Keywords-social network analysis; algorithm; optimization
problem; structural analysis; Internet social network
I. INTRODUCTION
A social network is a social structure between actors. The
nodes in the network are the actors, while the links show
some kind of social ties, such as friendship, co-working or
message ﬂow. Social network analysis (SNA) focuses on the
analysis of patterns of relationships among actors. Due to
the rapid growth of Internet, various social network services
(SNS) are provided by Internet service providers, such as
E-mail, instant messenger, blog, and so on. The increasing
main stream of SNS at the present time is many kinds of
micro-blogs which provide users to interact with friends and
even make friends with other users. Nowadays hundreds of
million people have registered in many social networking
websites, such as Facebook, Twitter, and Plurk. Comparing
with the real-life social ties, the relationship in SNS can be
much more easily to obtain, and thus the SNS provide an
opportunity to study large human social networks.
However, due to several reasons, the number of friend-
links in such Internet social networks are much more than
that in real-life. Today, a user with hundreds or even thou-
sands of friend-links in Facebook is a common phenomenon.
One of the reasons is that building a friend-link is much
easier than making a friend in real life. Also many people
like adding celeblogs as friends (hub-effect). Another reason
is that many social networking websites, for example Face-
book, provide online games and encourage users to invite
others joining the games together. As a result, there are many
False links in an Internet social network, and therefore how
to identify real-friend links becomes an important issue in
SNA.
In this paper, we propose methods of structural analy-
sis for detecting True/False friend links, i.e., our methods
use only the structure data but not contents or any other
data. By the balance theory in social science and observed
user behaviors, we deﬁne two graph optimization problems.
We examine the computational complexities and develop
algorithms. We show that one of the problems can be
solved in polynomial time while the other is NP-hard. For
the NP-hard problem we also designed exact and heuristic
algorithms for it. To show the efﬁciency of the algorithm,
experiments on random graphs were performed. The random
graphs includes two well-known models: Poisson networks
and Price’s model for network growth [13]. Besides and
more importantly, to show the effectiveness of the new
model, we performed experiments on random graphs which
simulate the behavior on Internet social networks. We show
the precisions/recalls of both true and false edges. The
experimental results show that the new model is effective
and our algorithm is efﬁcient for moderate data. However,
it is not hard to realize that one cannot precisely determine
all true/false links by only structural data. Our experiments
indeed exhibit such a restriction and we make some discus-
sions and suggestions on how to use these algorithms.
We mention some other related previous works in the
following. The emergency of blogs provides us a oppor-
tunity to analyze a huge social network involving millions
of people. Analyses of several blogs and micro-blogs on
social networking websites were reported, for example [1],
[6], [11], [12]. All their studies conﬁrm some important
features of social networks such as power-law and fat-tail
distribution, small-world and local-clustering phenomena.
The correlation between friendship and geographic location
in social networks was also studied and found to be strong
[8], [9], and it is also another reason that a real-life social
network is more locally clustered than an Internet social
network. Structure analysis has been used to detect cohesion
groups [7], [15]. Another approach to identify real-friend
links is by data/text mining, i.e., analyzing the contents.
The rest of the paper is organized as follows. In Section 2,
after deﬁning some notations and deﬁnitions, we deﬁne the
two optimization problems and explain the reason. We also
show the NP-hardness for one of them. In Section 3, we
propose algorithms for the two problems. The experimental
results, as well as the discussions, are shown in Section 4
Finally concluding remarks are given is Section 5.
2011 IEEE International Conferences on Internet of Things, and Cyber, Physical and Social Computing
978-0-7695-4580-6/11 $26.00 © 2011 IEEE
DOI 10.1109/iThings/CPSCom.2011.35
305
for some integer q
QUESTION: Can the nodes of G be partitioned into
q disjoint sets V1, V2, ..., Vk such that the subgraph
induced by each Vi is a 3-clique?
Supposed G = (V,E) is an instance of the restricted PIT
problem. The corresponding instance of the MLCS problem
is G, θ = 1 and B = 3q. For any node v, CC(v) = 1 iff
its neighborhood forms a clique or d(v) < 2. It is trivial
that the answer of the MLCS problem is “yes” if the graph
can be partitioned into triangles. Conversely suppose that
there exists a subgraph with 3q edges and CC(v) = 1
for each node v, i.e., the neighborhood of each node is a
clique. Since there is no 4-clique, the total number of edges
in the subgraph is at most 3q and the equality holds when
each maximal clique contains 3 nodes. Therefore G can be
partitioned into triangles.
Intuitively, for a node v with CC(v) < θ, removing edges
incident to it is the only way to increase CC(v). But the
removal of an edge (u, v) may increase or decrease CC(u),
depending on d(u) and |Nuv|. Also it decreases CC(x)
for each x ∈ Nuv . The interaction makes it not easy to
determine which edges we should remove. We shall focus
on the maximization version of the MLCS problem.
III. ALGORITHMS
In this section we develop algorithms for the MCNE and
the MLCS problems.
A. The MCNE problem
Recall that, in the MCNE problem, we look for a max-
imum cardinality edge subset F such that the number of
the non-triangular edges incident to v is at most γd(F, v)
for every node v. Since the constraint is only on the
number of non-triangular edges, any triangle in G should
be included in an optimal solution. Furthermore adding
non-triangular edges cannot form any triangle. Therefore
|Tv(G[F ∗])| = |Tv(G)| for any optimal solution F ∗. For
any feasible solution F , we have
|T¯v(G[F ])| ≤ γ · d(F, v)
= γ(|T¯v(G[F ])|+ |Tv(G[F ])|)
|T¯v(G[F ])| ≤ γ1− γ |Tv(G[F ])| (2)
After ﬁnding T (G), we can easily determine the upper
bound, named b(v), of the number of non-triangular edges
incident to every node v by Eq. (2). The MCNE problem can
be reduced to ﬁnd a maximum subgraph of G[T¯ ] such that
the degree of any node v is upper bounded by b(v). This
problem is known by the name upper degree-constrained
subgraph (UDCS) [3] which is a generalization of graph
matching problem (b(v) = 1 for all nodes v) and can be
solved by reducing to the maximum matching problem. The
algorithm for solving the MCNE problem is as follows.
Algorithm 1
Input: a graph G = (V,E) and a positive real γ < 1;
Output: an optimal solution F of the MCNE problem;
1: ﬁnd T (G) and T¯ (G);
2: compute b(v) by Eq. (2) for each node v;
3: ﬁnd an edge subset of F by solving a UDCS problem
with input G[T¯ ] and b;
4: output T (G) ∪ F .
Lemma 2:: T (G) and T¯ (G) can be computed in O(mn)
time.
Proof: To ﬁnd T (G) is equivalent to determining if
Nuv = ∅ for all edges (u, v) ∈ E. If the graph is stored in
an adjacency matrix, it can be easily done in O(n3) time.
For a sparse graph stored in an adjacency list, determining
if Nuv = ∅ can be done in time linear to d(u) + d(v).
Therefore the total time complexity is
∑
(u,v)∈E(d(u) +
d(v)) = 2
∑
(u,v)∈E d(v) = 2
∑
v∈V d(v)
2 ∈ O(mn) since∑
d(v) = 2m and d(v) ≤ n− 1 for any v ∈ V .
By [3], the UDCS problem can be solved with time com-
plexity O((
∑
v b(v))
1/2m). In this application b(v) < n,
and therefore (
∑
v b(v))
1/2 < n. Together with Lemma 2,
we obtain the next theorem.
Theorem 3:: The MCNE problem can be solved in O(mn)
time.
B. The MLCS problem
In this section, we show two heuristic algorithms and one
exact algorithm for the MLCS problem. We ﬁrst show in
the following theorem a special case for which the MLCS
problem can be easily solved. But it seems only theoretically
interesting because it rarely happens in a real social network.
Note that it does not matter what value θ is.
Theorem 4: : When G contains no triangle, the optimal
solution of the MLCS problem is a maximum cardinal-
ity matching of G and therefore can be computed in
O(
√|V ||E|) time.
Proof: Since there is no triangle, for any node in any
subgraph of G, its CC is either 0 or 1. Therefore any feasible
solution can only consist of disjoint edges and isolated
nodes, i.e. a matching of G. The result follows from that
a maximum cardinality matching is the one with as many
edges as possible. The time complexity comes from [10].
1) Heuristic algorithms: We propose two heuristic algo-
rithms. The ﬁrst one, named DEC, iteratively removes edges
one by one until all CC are satisﬁed. At each iteration, we
ﬁrst ﬁnd the node v with smallest CC, and the edge to
be removed is the one incident to v and having least co-
neighbors with v.
The second heuristic algorithm uses a two-stages ap-
proach. First we use Algorithm 2 to ﬁnd a heuristic solution
on the triangular edges, and then adding the non-triangular
edges by solving a UDCS problem (as shown in the previous
section).
307
A. Test data
1) Poisson random graphs: A Poisson random graph is
deﬁned as follows. For a given number of nodes n and a
probability p, edges between the nodes are created with
independent probability p for each node pair. The expected
number of degree is (n − 1)p and the expected density,
deﬁned by |E|/(|V |2 ), of the graph is p.
2) Price random graphs: This model simulates the
growth of a social network by the steady addition of nodes,
one at a time. Each node is added with an edges emerging
from it, and the other end of this edge connects to preexisting
nodes with probability proportional to those nodes’ current
degree. It is known that this rich-get-richer phenomenon is
plausible in many network contexts and has the features of
power-law and big-tail in degree distribution as in many
social networks.
3) Simulation random graphs: To simulate the friend
links in an Internet social network, we generate simula-
tion networks as follows. First we assign each node v
a independent random weight w(v) from 0.60 to 0.99,
which is used to represent how active a node is. Then,
we generate some cliques, overlapped or non-overlapped,
of some various sizes. For any two nodes in each generated
clique, an edge (u, v) is created with independent (relatively
high) probability pc(w(u) + w(v))/2 for each node pair in
the clique. These edges present the real-friend links and form
the underlying graph Gr in our test. An observed graph
Go is generated from Gr by adding false links as follows.
For any two nodes, an edge between them occurs in Go
with probability p0(w(u)+w(v))/2. Also we generate some
nodes as hubs and any other node v connect to a hub with
probability phw(v) independently.
B. Efﬁciency
1) Experiment Environment: We tested the efﬁciency
of the branch-and-bound algorithm on Poisson and Price
random graphs. First, we measured the running time for
different threshold θ. On graphs with the same density,
we compare the running time of algorithm with the tighter
upper bound for different node sizes. The results on Poisson
and Price random graphs are shown in Figures 1 and 2,
respectively.
Next, we compare the efﬁciency of the algorithm with the
three different bounding functions. Since the solution space
depends on the edge size of the graph, we did experiments on
graphs with the same number of edges. On graphs with the
same edge size on average and the same density, we compare
the running time for different threshold θ. The results on
Poisson random graphs are shown in Figures 3 and 4, in
which B0 indicates the branch-and-bound algorithm with
the currently best solution as the lower bound, and B1 and
B2 are with the ﬁrst and the second upper bound functions,
respectively.
Figure 1. Running time (in branch counts) on Poisson random graphs
with |E| = 30 and density = 0.3
Figure 2. Running time (in branch counts) on Price random graphs with
|E| = 30 and density = 0.3
Figure 3. Branch counts on Poisson random graphs with |E| = 30 and
density = 0.3
309
Table I
EFFECTIVENESS OF THE MCNE PROBLEM
True Edge Measure False Edge Measure
True edge ratio Precision Recall F-measure False edge ratio Precision Recall F-measure
γ = 0.05 0.624 0.724 0.991 0.796 0.376 0.965 0.370 0.529
0.716 0.767 0.995 0.790 0.284 0.965 0.237 0.376
0.775 0.803 0.996 0.844 0.225 0.931 0.160 0.270
0.812 0.826 0.997 0.894 0.188 0.920 0.096 0.170
γ = 0.15 0.624 0.706 0.993 0.824 0.376 0.968 0.310 0.462
0.716 0.754 0.996 0.858 0.284 0.957 0.178 0.296
0.775 0.792 0.997 0.882 0.225 0.919 0.095 0.170
0.812 0.821 0.999 0.901 0.188 0.847 0.063 0.115
Figure 7. Precision/Recall of true edges for different θ.
Figure 8. F-measure of true edges for different θ.
For the MLCS problem, the precisions, recalls and F-
measures of solutions found by our heuristic algorithms are
shown in Figures 7, 8, 9 and 10.
2) Discussion: For the MCNE problem, we observe the
following from Table I. It performs very good on true-edge
precision/recall and false-edge precision but has a poor false-
edge recall. The reason is that, in the MCNE problem, we
only remove some non-triangular edges but do nothing to
those triangular edges. So almost all true edges remain and
the removed edges are really false-edges. However, many of
the false edges appear in triangles and there is no any chance
to detect them by solving this problem. This also conﬁrms
Figure 9. Precision/Recall of false edges for different θ.
Figure 10. F-measure of false edges for different θ.
our motivation to deﬁne the MLCS problem.
By the experimental results, we observe the following for
the MLCS problem.
• The two heuristic algorithms perform similarly.
• The heuristic algorithms ﬁnd solutions near to the
optimal solutions, especially for small θ (Figure 5).
Also, the F-measures of true edges of the solutions
found by the heuristic algorithms are near to optimal
solutions (Figure 6).
• As θ increases, the solution sizes (numbers of edges
in the solution) decreases since more edges need to be
deleted to achieve the larger CC requirement. The true-
311
國科會補助計畫衍生研發成果推廣資料表
日期:2012/09/24
國科會補助計畫
計畫名稱: 以分割為基礎的社群偵測方法
計畫主持人: 吳邦一
計畫編號: 98-2221-E-194-027-MY3 學門領域: 計算機理論與演算法
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
