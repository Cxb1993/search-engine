 I
目  錄 
1. 緒論 .............................................................................................1 
1.1. 電玩遊戲市場趨勢 ...............................................................1 
1.2. 電玩遊戲平台硬體 ...............................................................2 
1.3. 電玩遊戲視覺特效技術 ........................................................3 
1.3.1. 擬真化著色技術 .......................................................3 
1.3.2. 非擬真化著色技術....................................................6 
1.3.3. 物理力學模擬技術....................................................9 
1.4. 研究動機與目的.................................................................12 
2. 流體運動特效技術......................................................................13 
2.1. 水面外形與波紋.................................................................13 
2.2. 水面浪花............................................................................17 
2.3. 電腦動畫用之流體特效技術 ...............................................21 
2.3.1. 網格型模擬方法 .....................................................21 
2.3.2. 粒子型模擬方法 .....................................................23 
3. 研究方法 ....................................................................................25 
3.1. GPU 計算...........................................................................25 
3.2. PhysX 物理引擎 .................................................................27 
3.3. 平順粒子流體力學 .............................................................28 
3.4. OGRE 繪圖引擎 .................................................................29 
4. 執行細節 ....................................................................................30 
4.1. 系統框架............................................................................30 
4.2. 場景建置............................................................................34 
4.3. PhysX 物理屬性 .................................................................36 
4.3.1. PhysX 初始化 .........................................................36 
4.3.2. 物體包覆寬度之設定 ..............................................37 
4.3.3. 設定場景的描述資訊 ..............................................39 
4.3.4. 物理碰撞外型設定..................................................40 
4.3.5. 物理碰撞之材質設定 ..............................................41 
 III
表 目 錄 
表 01：流體參數 ..............................................................................48 
 
 V
圖 31：流體粒子間的影響 ................................................................43 
圖 33：OGRE 與 PhysX 物件同步.....................................................45 
圖 34：流體容器的規格（單位：公尺）...........................................47 
圖 35：計算結果－物體進入流體粒子之瞬間 ...................................49 
圖 36：計算結果－物體向流體粒子擠壓...........................................50 
圖 37：計算結果－流體粒子內部產生壓力 .......................................50 
圖 38：計算結果－壓力朝上方釋放 A ..............................................51 
圖 39：計算結果－壓力朝上方釋放 B ..............................................51 
圖 40：計算結果－壓力朝上方釋放 C ..............................................52 
圖 41：工程用模擬軟體的計算結果..................................................53 
圖 42：Screen Space Fluid Rendering 概念 .........................................56 
圖 43：高階著色語言透過 GPU 繪製的水面 .....................................56 
 
 
 2
1.2. 電玩遊戲平台硬體 
在全球的電玩市場中，電視遊樂器的市場占有率遠遠大於其他平台，包
含 PC 平台、掌上型遊樂器（Sony 的 PSP 與任天堂的 NDS）、手機平台與遊
樂場用大型機台。隨著次世代電視遊樂器（PlayStation 3、XBOX 360 與 Wii）
的上市，在過去這幾年之中，電視遊樂器市場產生了革命性的變化。為了吸
引大家拋棄舊有的 PlayStation 2 與 XBOX 主機，購買 PlayStation 3 與 XBOX 
360 兩款次世代主機，所以現今的電玩遊戲產業，都致力於開發高娛樂性的
次世代電玩遊戲。這些次世代的電玩遊戲，必須能夠發揮次世代主機的強大
運算能力，呈現出舊有主機所無法達到的聲光娛樂效果，方能夠吸引大家購
買次世代主機。一款不需要強大運算能力，或是不具有大量聲光娛樂效果的
電玩遊戲，並不需要在次世代主機上發售。換句話說，在次世代電玩遊戲主
機普及的今天，次世代的電玩遊戲將會以聲光娛樂特效為主。 
除了電視遊樂器平台之外，PC 平台的遊戲發展趨勢也大致雷同。NVIDIA
與 ATI 兩大顯示卡廠商，不斷地開發出運算能力更強大的繪圖處理器
（graphics processing unit，簡稱為 GPU）。同時，也不斷地開發出更驚人的
視覺特效技術，讓 PC 平台的電玩遊戲，能夠具有過去所沒有的娛樂效果。
因此，在電玩遊戲之中，視覺特效的地位愈來愈重要，未來更將可能成為許
多電玩遊戲的主角。 
 4
  
圖 01：電玩遊戲「刺客教條」之逼真人物外形 
 
圖 02：NVIDIA 所開發的皮膚著色技術 
 
 6
1.3.2. 非擬真化著色技術 
上述的特效技術讓電玩遊戲畫面變得栩栩如生，另一類的特效技術則完
全相反，以非擬真著色方法（non-photorealistic rendering），呈現出具有獨特
風格的電玩遊戲畫面。在 2006 年所發售的電玩遊戲「大神」（Okami）中，
採用了水墨畫風格的非擬真著色方法（圖 05），使得這款遊戲成為近幾年之
中，極具特色的知名作品。於 2008 年所推出的電玩遊戲「快打旋風 4」（Street 
Fighter 4），則是採用了水彩風格的非擬真著色方法，使其比同系列的作品
更具有特色。 
 
圖 05：電玩遊戲「大神」的水墨畫風格 
 
 8
者」的電玩遊戲「火影忍者疾風傳：終極風暴」（Naruto: Ultimate Ninja: 
Storm，圖 08）之中。 
 
圖 07：呈現特定畫風的著色技術（七龍珠 Z 爆發極限） 
 
圖 08：呈現特定畫風的著色技術（火影忍者疾風傳：終極風暴） 
 
 10
 
圖 09：電玩遊戲「Nurien」中的衣服飄動特效 
 
圖 10：利用大量粒子模擬汽車的煙霧飄動 
 
 12
1.4. 研究動機與目的 
全球的電玩市場是以美國、歐洲與日本三者為主體，由於許多歐美人士
喜愛水上運動，所以水上運動的電玩遊戲（如賽艇、衝浪、風帆、水上滑板
與水上摩托車）具有一定的地位。對於水上運動的電玩遊戲而言，流體（水）
動作的模擬是一大重點。對於這些遊戲而言，能否產生逼真的水面波浪，和
遊戲的銷售量之間具有絕對的關聯。不光是水上運動遊戲，一般的電玩遊戲，
也經常需要呈現刺激的流體動作特效。因此，希望藉由本文，來研究先進的
電玩遊戲流體動作模擬技術，以利於在未來的電玩遊戲中，開發出更逼真且
刺激的流體物體特效。 
 
 14
( ) ( ) ( )( )∑ +−⋅×−=
i
iiii
i
i tzxkA
k
kzxzx ϕω0000 ,sin,,
rr
         (2) 
( )( )( )∑ +−⋅×=
i
iiii tzxkAy ϕω,cos
r
            (3) 
其中的(x0, z0)代表無位移的網格點位置，而(x, z)與 y 分別代表位移後的位置
與高度。 
 
圖 12：Gerstner 波浪外形 
 
除了實際去移動水面網格之外，較不強調水面特效的遊戲通常會採用材
質貼圖技術，來呈現水的流動與水面波浪效果。常使用的材質貼圖技術有三
種，分別是材質紋理捲動（texture scroller）、凹凸貼圖與動態材質。所謂的
材質紋理捲動，是隨著時間的變化，修改水面網格頂點的 UV 貼圖座標值，
 16
據一張材質貼圖上各點的亮度，產生一個皺折函數（wrinkle function），並
加入原本的表面法向量中，獲得一個具有擾動量的表面法向量分佈函數。這
個具有擾動量的表面法向量分佈函數，將會導致物體表面產生明暗不同的效
果，藉此模擬出物體表面的細微凹凸現象，產生比較明顯的立體感。在圖 14
之中，水面波浪的細微紋理，應該就是以凹凸貼圖技術所產生。 
 
圖 14：利用凹凸貼圖產生水面細節（Virtual Skipper 4） 
 
 18
 
圖 16：加入粒子之落水浪花（薩爾達傳說：風的律動） 
 
除了垂直落水之外，物體在水面橫向移動也是遊戲中經常出現的場景。
當物體於水面橫向移動時，會產生八字形的擴散波（divergent wave）與圓弧
狀的橫向波（transverse wave）。對於高速物體而言，擴散波較為明顯，因此，
在電玩遊戲中，一般只會模擬擴散波的部分。當產生波浪之時，水面高度會
略為升降，在波高處會產生白浪。相較於白浪的部分，水面的升降在視覺效
果上並不顯著，且移動水面外形的網格極耗計算資源，因此在部分的電玩遊
戲之中，並不會移動水面外形的網格，僅呈現白浪的部分。在擴散波的呈現
上，一般也是利用材質貼圖的技術，在電玩人物的前方或後方加上一塊八字
形的材質貼圖，跟隨著物體一起移動，如圖 18 與圖 19 所示。 
 20
 
圖 19：以貼圖呈現水面移動之波浪（Virtual Skipper 4） 
 
 22
果，如圖 21 所示。 
 
圖 20：以網格方式分割流體運動的計算空間[5] 
 
圖 21：以網格方式之流體運動計算結果[5] 
 
 24
移動粒子法（Moving Particle Semi-Implicit Method，簡稱為 MPS）。兩種方
法最大的差異，在於 SPH 是採用外顯式（explicit）的計算方法，而 MPS 是
採用內隱式（implicit）的計算方法。採用內隱式計算方法的 MPS，必須要利
用矩陣運算，求解聯立方程組。這種方法是工程與科學領域常用的方法，計
算過程較為穩定，不容易發散，是較為穩健的數值方法。但是在平行計算的
效率上，需要求解聯立方程組的內隱式方法，將會遜於外顯式的計算方法。 
 
 
 26
因此，越來越多的程式，透過 GPU 計算來提升其運算速度。 
在本文之中，就是利用 GPU 計算，將流體運動特效的計算工作，由 CPU
移轉到 GPU 之上。藉此提升運算速度，讓原本用於電腦動畫中的流體計算方
法，可以達到即時運算的效果，能夠用於製作電玩遊戲中的流體運動特效。 
 
 28
3.3. 平順粒子流體力學 
SPH 是近 20 多年來逐步發展起來的一種無網格方法，該方法的基本思想
是將連續的流體（或固體）用相互作用的質點組來敘述。各個物質點上承載
各種物理量，包括質量、速度等，通過求解質點組的動力學方程和跟蹤每個
質點的運動軌道，求得整個系統的力學行為。從原理上說，只要質點的數目
足夠多，就能精確地描述力學過程。雖然在 SPH 方法中，計算結果的精度也
依賴於質點的排列，但它對點陣排列的要求遠遠低於網格的要求。此外，由
於質點之間不存在網格關係，因此它可避免極度大變形時網格扭曲而造成的
精度破壞等問題，並且也能較為方便的處理不同介質的交界面。 
由於 SPH 採用外顯式的計算方法，具有極高的平行運算效率，因此，特
別適合擁有龐大核心數量的 GPU。基於此一原因，在粒子型模擬方法中，SPH
逐漸成為主流。PhysX 中的流體運動計算模組，就是採用 SPH 之計算方法。
廣為好萊塢電影所採用的流體特效計算程式 RealFlow，也是建構在 SPH 之
上。由於本文採用了 PhysX 引擎，因此，也是利用 SPH 來產生電玩遊戲的流
體運動特效。 
 
 30
4. 執行細節 
4.1. 系統框架 
在程式實作上以 OGRE 為主要的遊戲應用程式，將重點分為兩個部分，
一個是視覺上看的到的部分，另一個部分則是物理計算。OGRE 提供使用引
擎的必要方法跟流程（圖 23），使用者只需要繼承範例框架中的類別並作需
要的變動即可。這個框架有兩個類別可以使用（圖 24 ），其中
ExampleApplication 負責設定並提供 OGRE 基本的使用，可以認為是程序的
系統層。而 ExampleFrameListener 在每一個畫面由引擎進行更新，再執行相
對應的邏輯處理。ExampleApplication 可做以下工作： 
A. 產生並維護 Root 類別的生命週期。 
B. 產生並維護攝影機。 
C. 產生並維護 SceneManager。 
D. 產生並維護 RenderWindow 及 Viewport。 
E. 載入遊戲所需要的資源。 
F. 設定渲染相關參數。 
G. 調度遊戲的循環迴圈。 
ExampleFrameListener 主要作用如下： 
A. 處理輸入外掛所提供輸入消息（如鍵盤、滑鼠和手把）。 
B. 處理 2D 或 3D 介面數值的互動訊息。 
C. 提供每個渲染畫面前後的設定事件給其他函數使用。 
 32
標，如 SceneManager、RenderSystem 及 ResourceManagers 等。 
RenderSystem 實際上是一個抽象類別，定義了 3D API，負責設置所有的
渲染參數並傳送渲染指令給底層的 API(如 DirectX 的 D3DRenderSystem)。但
一般不會直接操作 RenderSystem，只有需要產生多的獨立的渲染視窗或者需
要其他高級的特性時才會操作它。 
SceneManager 在 OGRE 應用程式裡經常用到的類別，它控制由 OGRE
引擎繪製的場景中所有的內容，主要負責以下任務： 
A. 在場景中產生與放置可移動物體、燈光及攝影機。 
B. 載入布置場景地圖（與可移動物體不同，是很巨大可延伸通常不能移動物
件，圖 25）。 
C. 可以查詢場景包含哪些物體。 
D. 將不可見的物件剔除並將可見物件放入渲染佇列中（圖 26）。 
E. 根據和渲染物件的透視圖，組織和按由近到遠排列無方向的光源。 
F. 設定並且渲染場景中的影子。 
G. 渲染場景中其他物件，如背景和天空方塊。 
H. 將組織好的內容送到渲染系統執行渲染。 
 34
4.2. 場景建置 
本文先利用 SceneManager 直接設定環境光讓場景有基本的顏色，再產生
一個點光源放置在設定的位置上。創造新的實體上場景時必須都要命名唯一
的名稱且將自己連結到 SceneNode（圖 27）上。首先產生不需要跟物理物件
同步的地板，再來為了方便同時產生實體的物件以及物理運算用的物件，另
外創造出函式 MyOgrePhysXModelCreate，輸入的參數如下： 
A. SceneManager* m_scene_mgr：OGRE 的場景管理。 
B. char *characterName：OGRE 的實體物件名稱。 
C. char *meshFileName：OGRE 的模型檔案名稱。 
D. NxScene* gScene：PhysX 的場景管理。 
E. char *objFileName：用來做 PhysX 的碰撞物件模型檔名。 
F. NxVec3& _pos：PhysX 指定碰撞物件位置，預設為零。 
G. NxReal _Density：PhysX 角色物件描述的密度。 
H. NxReal _StaticFriction：PhysX 物理材質描述的靜態摩擦係數。 
I. NxReal _DynamicFriction：PhysX 物理材質描述的動態摩擦係數。 
J. NxReal _Restitution：PhysX 物理材質描述的恢復係數。 
 
圖 27：OGRE 的 SceneNode 管理架構 
 
 36
4.3. PhysX 物理屬性 
4.3.1. PhysX 初始化 
為了把 PhysX 的初始化與 OGRE 的部分分開，本文開發 InitNx 這個函
數，用於放置所有有關 PhysX 初始化的部分。使用者必須由 NxPhysicsSDK
這個抽象類別創造出實體（圖 28），透過 NxPhysicsSDK 的設定，可以影響
整個物理環境，必須呼叫 NxCreatePhysicsSDK 函數，設定的參數如下： 
A. NxU32 sdkVersion：目前所用的 PhysX SDK 版本。 
B. NxUserAllocator* allocator：Physx SDK 的記憶體管理器。 
C. NxUserOutputStream* outputStream：輸出錯誤報告和顯示資訊給使用者。 
D. const NxPhysicsSDKDesc& desc：硬體限制和場景之間資料共享的描述訊
息。 
E. NxSDKCreateError* errorCode：錯誤碼輸出參數。 
 
圖 28：PhysX 核心類別與關聯 
 
 38
 
圖 30：物體穿透之示意圖 
 
 40
4.3.4. 物理碰撞外型設定 
由於前面在 OGRE 提到過 MyOgrePhysXModelCreate 這個自訂函數，它
除了產生出在 OGRE 所看的見的實體外，再來就是看不見的物理碰撞外型。
由 MyOgrePhysXModelCreate 函數傳進來的參數，可以得到一個.obj 的檔名，
再透過 PhysX 的 NxCookConvexMesh 組織.obj 檔裡記載的頂點成網格後，再
回傳給 NxConvexShapeDesc 外型描述的網格資料。 
 42
4.3.6. 物理碰撞的角色描述資訊 
NxActorDesc 主要是負責描述一個角色所有的資訊，包括前兩節提到的
碰撞外型與碰撞材質還有這個角色的密度以及所在位置。這些位置訊息本研
究將用來取代 OGRE 模型的位置。在密度的設定等於零，角色就會成為靜態
物件不受立場的影響及碰撞，而密度的設定大於零則為動態物件。 
 44
4.3.8. ParticleFX 
ParticleFX 一個包在 OGRE 的粒子系統外掛，提供一些粒子的效果器和
發射器用來製作一些基本的特效。粒子系統是一種特殊用途的佈告欄技術
（billboard），佈告欄是一種依靠攝影機確定方向的簡單四邊形，指的是佈
告欄的角度會根據攝影機的位置而去調整角度（圖 32），使佈告欄的正面總
是接近朝向攝影機的方向。為了方便使用，本文將利用 OGRE 的粒子系統來
繪製流體粒子。 
 
圖 32： (a)正朝向攝影機，(b)攝影機移動後佈告欄自動朝向攝影機 
 
 46
5. 實驗結果與討論 
5.1. 實驗硬體 
在本章將呈現以OGRE為繪圖引擎和 PhysX物理引擎為即時流體計算在
各場景中之效果。在實作上，我們採用的 OGRE 繪圖引擎以及 PhysX 物理引
擎使用 C++語言來做開發。測試平台如下： 
A. 中央處理器： QuadCore Intel® Core2 Quad Q6600 2400MHz。 
B. 記憶體：DDR2 4GB。 
C. 圖形顯示晶片：NVIDIA GeForce GTX 480，1536MB GDDR5。 
D. 作業系統：Microsoft® Windows XP SP3。 
 48
 
表 01：流體參數 
參數名稱 設定值 
kernelRadiusMultiplier 12 
restParticlesPerMeter 1.8 
motionLimitMultiplier 3 
stiffness 50 
viscosity 22 
restDensity 1000 
damping 0 
restitutionForStaticShapes 0.162 
dynamicFrictionForStaticShapes 0.146 
restitutionForDynamicShapes 0.5 
dynamicFrictionForDynamicShapes 0.5 
 
 50
 
圖 36：計算結果－物體向流體粒子擠壓 
 
 
圖 37：計算結果－流體粒子內部產生壓力 
 
 52
 
圖 40：計算結果－壓力朝上方釋放 C 
 
 54
第二個原因則是因為本文使用了 OGRE 繪圖引擎，導致流體粒子數量受到很
大的限制。有別於一般的物體，鄰近的流體粒子會互相結合，成為一個較大
的流體物件。然而，現今的電玩遊戲繪圖引擎尚無法處理能夠互相結合的粒
子，包含本文所使用的 OGRE 在內。因此，當本文使用 5,000 流體粒子進行
計算時，繪圖程式就必需繪製 5,000 個物件，而不是一灘水。在本文的硬體
系統上，僅能夠即時繪製 5,000 顆流體粒子，所以也只能夠依據 5,000 顆粒子
的規模，進行物理模擬。在關閉繪圖功能之後，即便是將粒子數量增加到
60,000 顆，仍然可以保持每秒 60 個畫面的運算速度。受到這項功能上的限
制，程式效能的瓶頸出現在繪圖部份，而非物理模擬部份。由於流體粒子數
量受到限制，無法縮小流體粒子的尺寸，以至於無法模擬出比較細微的流體
運動特性。為了獲得更好的流體運動特效，有必要採用新的 3D 繪圖技術，
將所有流體粒子結合成一個單獨的物件，進行繪製工作。 
 
 56
 
圖 42：Screen Space Fluid Rendering 概念 
 
 
圖 43：高階著色語言透過 GPU 繪製的水面 
 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/02/14
國科會補助計畫
計畫名稱: 電玩遊戲與虛擬實境用多核心平行運算技術
計畫主持人: 陳彥均
計畫編號: 98-2622-E-262-008-CC3 學門領域: 平行與分散處理 
研發成果名稱
(中文) 電玩遊戲用即時流體計算方法之研究
(英文) Study on Real-time Flow Computation for Computer Games
成果歸屬機構
龍華科技大學 發明人
(創作人)
陳彥均,呂以聰
技術說明
(中文) 本文採用先進的流體運動模擬方法，根據真實的物理屬性與運動方程式，在繪圖
處理器上進行即時的物理運算，產生電玩遊戲中的互動性流體運動特效。並且同
步將計算結果進行著色工作，顯示於電腦螢幕之上。受限於3D繪圖技術，在本文
所採用的個人電腦硬體架構上，只能夠進行5,000顆流體粒子的即時運算。若不
考慮繪圖部分，可以將即時運算的流體數量提升至60,000顆。由於能夠進行運算
的粒子數量有限，以及物理屬性設定的問題，所以尚無法產生精緻的流體特效畫
面。在3D繪圖的瓶頸得以突破之後，應該可以獲得更好的流體特效。
(英文) In the past, science and engineering computations are performed on CPU. Due to the 
rapid development of GPU in recent years, its performace surpasses CPU already. The 
computations will be speed up by performing them on GPU instead of CPU. This makes 
real-time flow computation becomes possible. In this paper, computations based on 
simplified smooth particle hydrodynamics are performed on GPU. The calculated results 
are also real-time presented on the monitor. 
產業別 休閒、娛樂服務業
技術/產品應用範圍 電玩遊戲程式
技術移轉可行性及
預期效益
可提升廠商的程式視覺效果
註：本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
