1 
報告內容 
一、前言 
近幾年網際服務(Web services)的技術與應用受到廣泛的矚目，被認為是未來網際網路
應用解決方案的前瞻技術與標準。透過服務導向架構(Service-Oriented Architecture，SOA)
及 SOAP[1]、WSDL[2]和 UDDI[3]等技術規範，提供不同的整合應用與服務給顧客使用。
除了網際服務的普及外，商業流程管理(Business Process Management，BPM) 與商業流程管
理系統 (Business Process Management Systems，BPMS)亦逐漸成為企業間的新興議題。BPM
及BPMS的目標都是希望將耦合鬆散的一群獨立服務藉由明確的流程定義以Web service的
方式串聯成新的商業流程，並讓不同的BPMS能相互溝通與執行企業流程。目前有許多BPM
的相關標準，其中又以 OASIS 制定的網際服務商業流程執行語言(Web Service Business 
Process Execution Language，簡稱 WS-BPEL)[4] 最廣為企業界所採用。 
WS-BPEL 流程是以 XML 語法撰寫而成，並且可以定義操作變數及多種結構化活動，
如分支(switch)、迴圈(while)、循序(sequence)及平行處理(flow)等等，因此可將 WS-BPEL
視為一種結構化的程式語言，藉由嚴謹的測試確保 WS-BPEL 流程的正確性，以及滿足商
業流程的需求。 
目前已有一些關於網際服務的測試工具[5][6]，這些工具能針對單一網際服務進行測
試，使用者能夠瀏覽 WSDL 內容等資訊，擷取 SOAP 封包，並且以視覺化的方式建立及編
輯測試案例。然而此類工具對需要組合多個網際服務之 WS-BPEL 流程測試無法提供有效
的協助。另外，有些 BPM 解決方案的開發廠商，在其流程設計工具中附加了若干測試功能
[7]，經由簡易的功能性測試或系統模擬來檢驗設計中的流程是否正確。然而此類的工具並
無法協助測試人員了解待測的流程和設計有效的測試案例，且 WS-BPEL 網際服務組合有
許多不同的測試問題和挑戰，例如跨越邊界、死亡路徑排除、平行處理以及錯誤補償機制
等，使測試案例的設計複雜度上升，造成測試的困難度增加。因此，有必要對 WS-BPEL
流程的測試做進一步探討，以提升 WS-BPEL 流程的品質。 
二、研究目的 
網際服務的特性和技術帶來許多新的測試問題，而XML所定義的WS-BPEL商業流程不
容易了解與分析，使得網際服務組合測試變得更加困難。因此，本研究著重於分析WS-BPEL
流程的控制和組成結構，並開發相關的測試工具，以協助測試WS-BPEL流程定義以及網際
服務組合的行為是否合乎預期。主要的研究目的如下： 
z 分析 WS-BPEL 的流程定義，提出結構和流程兩個面向的測試模型來萃取 WS-BPEL 流
程的元件相依關係和內部邏輯控制結構。 
z 透過圖形化的測試模型協助測試人員瞭解與分析流程的定義，進而推導流程的可能執
行路徑，產生測試案例來驗證流程的邏輯結構是否正確。 
z 開發一個 WS-BPEL 的測試工具，自動化建立測試模型，並可讓測試人員編輯、佈署測
試案例，以協助測試的進行。 
3 
次；連續涵蓋度(Sequence coverage criterion)：活動圖內每一個轉換的組合順序至少被測試
一次。 
四、研究方法 
由於網際服務的 WSDL 文件和 WS-BPEL 商業流程定義均是以 XML 格式呈現，雖然
XML 文件具有格式明確、可以人工閱讀的優點，但實際上大量且複雜的 XML 標籤卻使得
WSDL 和 WS-BPEL 文件難以瞭解和分析。本研究計畫擷取 WSDL 文件和 WS-BPEL 定義
中對測試有用的資訊，從結構與流程兩個面向建立圖形化的測試模型，協助測試人員瞭解
網際服務與 WS-BPEL 流程的組成和控制結構，並藉由測試模型推導測試案例，以驗證網
際服務與 WS-BPEL 流程的正確性。其中結構面向測試模型主要是以 UML 類別圖呈現
WS-BPEL 流程定義中組成元件之間的結構關係，包含夥伴的連結(partnerLink)、資料變數
(variable)、活動(activity)、以及例外或事件處理器(fault and event handlers)等，並以圖形化
的方式呈現，協助測試人員找出合適的測試案例以測試網際服務組合的正確性。圖一為
WS-BPEL 結構面向模型的 meta-model，此 meta-model 顯示 WS-BPEL 流程定義主要的元件
與元件之間的關係。 
 
圖 一 Process 的 meta-model 
 
流程面向測試模型主要是萃取 WS-BPEL 流程定義中的控制結構，此模型考量流程活
動的執行順序、邏輯判斷結構以及同步(synchronization)、跨越邊界與死亡路徑排除等語意，
並用 BPMN 符號以圖形化的方式呈現 WS-BPEL 流程活動的執行流程(execution flow)。透
過此結構面向測試模型，測試人員可以分析 WS-BPEL 流程的可能執行路徑，並從可能的
執行路徑中推導測試案例，來驗證 WS-BPEL 流程的邏輯結構正確性。圖二為流程面向測
試模型的範例，以及其對應的 WS-BPEL 流程定義和透過該模型所推導而得的測試路徑。 
5 
 
 
圖 四 WSTT 使用者操作介面 
五、結果與討論 
本研究計畫提出基於 WS-BPEL 定義的結構與流程面向測試模型，此測試模型可以呈
現 WS-BPEL 流程服務組合結構和控制結構的資訊，協助測試人員瞭解流程的組成元件與
元件之間的關係，以及流程內部的控制邏輯。透過此測試模型，測試人員可以推導 WS-BPEL
流程的執行路徑和計算執行路徑的條件，有助於測試案例的設計來驗證 WS-BPEL 流程的
邏輯結構是否正確。此外，本研究亦開發一個流程測試工具，可自動建立 WS-BPEL 的測
試模型，並能協助測試案例的編輯與執行，以減輕流程測試的負擔。 
由於所提出的測試模型並未考量 WS-BPEL 的錯誤補償機制，如錯誤處理(Error 
Handler)、補償處理(Compensation Handler)、事件處理(Event Handler)和終結處理(Termination 
Handler)等。因此，本研究計畫未來將延伸測試模型，以萃取這些錯誤補償機制，協助推導
測試案例來驗證流程在錯誤發生時是否可正確地執行各種錯誤補償動作。另外，我們亦計
畫將 WSTT 測試工具整合至 Eclipse 開發平台上，以整合網際服務的開發和測試工具，方便
工程師開發與測試網際服務與商業流程。 
7 
計畫成果自評 
 
本研究計畫提出一個基於 WS-BPEL 規範的結構化測試方法，此方法從 WS-BPEL 的流
程定義中抽象萃取出對測試有用的流程控制邏輯、結構和語意來建立測試模型，以圖形化
的方式呈現一個 WS-BPEL 的流程，協助使用者瞭解流程控制結構以及流程活動組合方式，
並進而從這些模型來推導測試案例，測試流程的內部邏輯結構，確保流程的品質。此外，
本計畫並實作一個網際服務組合的測試工具 WSTT，依據流程定義建立 WS-BPEL 的測試
模型，協助使用者推導和執行測試案例，以驗證 WS-BPEL 流程的邏輯結構是否正確。基
本上，所提出的測試模型與 WSTT 所提供的功能大致與原先規劃的需求相符，因此本計劃
符合預期目標。 
由於計畫時程與預算的限制，原本計畫中所提出的虛擬網路服務間平行(concurrent)、
同步(synchronous)與非同步(asynchronous)控制部份，目前還在開發階段，尚未完成，將於
後續的研究計畫中繼續進行探討。此外，本計畫部分的研究結果已發表於 2008 年的第四屆
軟體工程研討會[14]，其他的研究成果在整理完成後，將於國內外的期刊發表。 
9 
 
 
 
 
 
 
 
 
 
 
 
 
 
附錄 
 
 
“一個基於 WS-BPEL 的結構化測試方法” 
2008 年的第四屆軟體工程研討會, June 13-14, 2008, pp. 129-134. 
試模型包含了物件與結構模型兩部份。其中物件模
型主要顯示BPEL活動組成的關係；而結構模型則
顯示BPEL流程的控制流程圖，以協助測試人員推
導測試路徑，並實作一個雛形工具[5]檢驗流程的
正確性。 
Li等人 [6] 提出了一個BPEL的單元測試框
架。此框架共包含簡單的BPEL流程組合模型、測
試架構、生命週期管理綱要及測試流程設計大綱等
四個部份以協助測試的進行與測試案例的推導。此
方法排除網路的因素只針對問題、方法及技術提出
討論，並可適用在其他的商業流程語言。 
Mayer等人[7]提出了一個適用於BPEL單元測
試的測試框架並改以白箱測試的方法測試BPEL中
彼此流程間的複雜關係，解決以往進行BPEL單元
測試時僅使用黑箱測試的不足。此測試框架的架構
包含了測試規格 (Test Specification)、測試組織 
(Test Organization)、測試執行(Test Execution) 及測
試結果(Test Results)等四個階層。在測試規格中標
明每一個測試案例的資料和測試邏輯，測試組織則
將測試案例組合成更複雜的測試案例組，並在測試
執行中決定採用模擬或是實際測試的方式測驗流
程，最後則決定採用何種量測指標來表達最後的測
量結果。此測試框架除可將現行的測試方法與策略
做有效的分類外，並可協助發展產生測試案例以及
制定測試策略。 
Yan等人[8]提出一個以圖形化方式，分析現行
測試路徑產生BPEL 測試案例的方法。該方法先以
擴展控制流程圖 (Extended Control Flow Graph; 
XCFG)表達BPEL流程，再透過現行的測試路徑找
出一連續相關的測試路徑，並以限制(Constraint)
當作額外的參數算出該一連續測試路徑中較可行
的路徑做為測試案例。此方法除可結合其他現有的
測試技術，如測試覆蓋率(test coverage)等等。更可
拓展應用在其他商業流程語言。 
Yuan等人[9]以圖形化的方法產生BPEL的測
試案例並有效地解決BPEL平行處理的問題。該方
法先延伸定義一個控制流程圖(BPEL Flow Graph; 
BFG)，以圖形化的方式表達BPEL的活動架構，並
透過該模型找出測試路徑。由於根據流程的語義關
係，測試路徑不一定可執行，因此藉由找出滿足該
測試路徑上所有條件、限制的測試資料以確保該條
路徑是可執行的。若無法找出，則表示該條路徑無
法執行。最後將可執行的測試路徑及測試資料組合
成測試案例。該方法可分別提供測試路徑、測試資
料與測試案例以滿足測試人員不同的需求，協助測
試人員進行測試。 
Zhang等人[10]提出了一個BPEL的模型化測
試方法。這個方法以UML2.0 活動圖 (activity 
diagram)描述BPEL流程內部的商業行為及其語
意，並分析流程路徑產生測試案例。並為了能夠有
效地減少測試案例的數量，此方法也提出了四種測
試覆蓋率 (test coverage)，分別為活動覆蓋率
(Action)、過渡覆蓋率(Transition)、基本路徑覆蓋
率(Basic path)和連續覆蓋率(Sequence)。 
除上述Li[6]、Mayer[7]提出的BPEL單元測試
的測試框架，以及Liu[4]、Zhang[10]、Yan[8]和
Yuan[9]以圖形化的方式產生BPEL的測試案例
外，許多驗證BPEL規格的研究皆是以Model 
Checking的方法來驗證流程的正確性。例如：Zheng 
等人 [11][12]提出一個以SPIN 和NuSMV model 
checkers 產生 BPEL測試案例的測試框架，
Garcia-Fanjul, J. 等人
來
[13]則以SPIN model checker
來產生BPEL測試案例、Dong等人[14]以high-level 
Petri nets來驗證BPEL的網際服務組合、Cao等人
[15]結合UML 活動圖 (activity diagram)和Model 
Checking的方法，提出了一個以模型為基礎的
BPEL流程驗證框架、Qian等人[16]提出一個適用於
ActiveBPEL Engine[17] 的模型驗證工具，以
UPPAAL [18] model checker engine來產生測試案
例，驗證ActiveBPEL上的BPEL流程。 
 
3. WS-BPEL 的測試挑戰 
如同其他的軟體一般，在SOA架構下利用
WS-BPEL組合網際服務的BPM系統必須通過許多
測試，以確保其可靠性與正確性。然而，相對於傳
統軟體，SOA架構的特性和技術不但帶來許多新的
測試問題，也增加測試的困難度，因此有必要進行
深入的研究以確保網際服務組合的品質。Hong[19]
提出了一些測試網際服務組合應用系統可能遭遇
的困難與挑戰如：使用外部提供的網際服務時，測
試人員僅可透過網際服務的WSDL文件或簡易的
描述進行測試，增加設計測試案例的困難度。且使
用外部提供的網際服務，使用者將無法掌控外部服
務的主控權，服務提供者可隨時修改或取消提供服
務，這將導致之前的測試經驗無效。 
除上述問題外，由於 WS-BPEL 是以 XML 為
基礎定義商業流程，閱讀性不佳的問題，將間接造
成設計測試案例的困難度，而 WS-BPEL 具有的平
行處理及錯誤補償機制也相對增加測試上的難
度。因此以下將針對這些問題特別提出討論。 
 
3.1 跨越邊界 
由於 WS-BPEL 使用連結(link)語意讓在平行
結構(flow)內的基本活動可以達到同步化的目的，
因此允許 flow 內屬於子結構活動的基本活動，跨
越子結構的邊界與子結構外的基本活動連結，這樣
的行為稱之為跨越邊界(Boundary-Crossing)。雖然
WS-BPEL允許 flow內的基本活動可以跨越子結構
的邊界連結，但仍有一些限制必須遵守，如不能跨
越<compensationHandler>或是重複 (repeatable)結
構；而<catch>、<catchall>、<terminationHandler>、
<faultHandler>內的基本活動只可以往外連結出
去；不可以連結語意形成一個控制迴圈等等。 
 
3.2 死亡路徑排除 
平行處理的流程活動在同步化之後，要執行下
一個流程活動之前，需先行評估該流程活動的結合
The Fourth Taiwan Conference on Software Engineering, June 13-14, 2008 
130
 
圖 4 產生測試案例流程圖 
 
5.1 建構 BCFG 
本 方 法 第 一 步 就 是 將 以 XML 敘 述 的
WS-BPEL 流程轉換成 BCFG，以圖形化的方式呈
現流程的邏輯結構。在轉換的過程中共有九個步驟
需要遵守。圖六為例一的 BCFG。 
I. 以 start node 和 end node 表示流程的起迄。 
II. 每一個normal node即表示流程內的基本活動。 
III. 依據流程語義以 normal edge 描繪流程活動的
執行順序。 
IV. 根據結構化活動的語意繪出其結構圖，如圖二
所示。若該活動包含子結構化活動則先以
sub-process 取代該子結構化活動。 
V. 描繪連結(Link)語意關係。 
z 若該流程活動在平行結構中為多個連結的
來源活動，即可以圖三 b 表示並移除原先與
join node 相連的 normal edge。 
z 若該流程活動在平行結構中為多個連結的
目標活動，即可以圖三 c 表示並移除原先與
fork node 相連的 normal edge。 
z 以圖三 c表示該流程活動在平行結構中為多
個連結的目標活動與來源活動。 
z 以具有狀態表示的 conditional edge 代表連
結語意，連接來源活動和目標活動。 
VI. 將原先以 sub-process 取代的子結構化活動轉
換成圖形，若該結構化活動仍包含其它子結構
化活動，則該子結構化活動將以 sub-process 取
代。 
VII. 重複步驟四至步驟六，直到全部的巢狀式結構
化活動皆轉換成圖形。 
VIII. 描繪 DPE 情況。以判斷結合條件的 branch 
node 為起點，沿著現有路徑找到第一個遇到的
fork/join node，並在此 node 前新增一個 merge 
node，將原先連結的 inter-mediate node 移除
掉，改以連接至此新增的 merge node。 
IX. 移除只有一條輸出的 fork node 和只有一條輸
入的 join node。 
 
5.2 找出測試路徑 
BCFG 為一具有方向性的圖形，可以用寬度優
先搜尋(BFS)或是深度優先搜尋(DFS)的方式找出
測試路徑，但仍有其特定的規格必須遵守。 
I. 所有路徑開始於 start node。 
II. 若下一個參訪的節點為 normal node 或 merge 
node, 加入該節點至搜尋路徑中。 
III. 若下一個參訪的節點為具有 n 條分支的分支節
點且尚未參訪，則加入該節點至搜尋路徑中並
複製 n 條現有路徑。 
IV. 若下一個參訪的節點為已參訪的分支節點，將
該節點加入至搜尋路徑中且下一個參訪的節
點須為未參訪過的節點。 
V. 若下一個參訪的節點為 fork，搜尋所有子路
徑，並將該節點及子路徑加入至搜尋路徑中。 
VI. 若下一個參訪的節點為 join，在所有進入路徑
都搜尋過後將該節點加入至搜尋路徑中。 
VII. 所有路徑結束於 end node 或 inter-mediate 
node。 
 
 
圖 5 範例內容 
 
 
圖 6 BCFG 
 
表 1 測試路徑列表 
路徑編號 執行順序 
1 Start‧1‧(2∥3∥4)‧5‧6‧7‧8‧9‧10‧End 
2 Start‧1‧(2∥3∥4)‧5‧6‧8‧9‧10‧End 
The Fourth Taiwan Conference on Software Engineering, June 13-14, 2008 
132
路徑 
編號 執行順序 
15 
Start‧1‧2‧7‧9‧10‧( (11‧12‧13) ∥(3‧4‧6) )‧
14‧15‧17‧End 
16 
Start‧1‧2‧7‧9‧10‧( (11‧13) ∥(3‧4‧6))‧14‧
15‧17‧End 
 
7. 結論與未來研究方向 
在這篇論文中，我們提出了一個基於
WS-BPEL 的結構化測試方法。此方法遵從 OASIS
公佈的第一版及第二版的 WS-BPEL 規格定義書，
將 WS-BPEL 流程內的大量 XML 標籤轉換成由
BPMN 所構成的控制流程圖，以圖形化的方式協助
測試人員瞭解流程的活動組成及流程結構等資
訊，進而從圖形中推導流程的可能執行路徑，產生
測試案例驗證流程的邏輯結構是否正確。 
本方法與其它以圖形方式產生測試案例方法
的不同之處在於：本方法產生的 BCFG 可解決
WS-BPEL 的連結語意、死亡路徑排除與跨越邊界
的問題，並且透過 BPMN 建構測試模型將可讓測
試人員在不需額外學習的情況下就可輕易地了解
圖形的意義，減輕測試人員的負擔。由於 WS-BPEL
定義了許多錯誤補償機制，因此未來我們將計畫針
對這些錯誤補償機制進行測試，以確保流程在錯誤
發生時可正確的執行各種錯誤補償機制。 
 
參考文獻 
[1] Web Service Business Process Execution 
Language Committee Specification, version 2.0, 
http://docs.oasis-open.org/wsbpel/2.0/OS/wsbp
el-v2.0-OS.html 
[2] Business Process Execution Language for Web 
Services Specification, version 1.1, 
http://www-128.ibm.com/developerworks/librar
y/specification/ws-bpel/ 
[3] Business Process Modeling Notation 
Specification, version 1.0, 
http://www.bpmn.org/ 
[4] C.-H. Liu, H.-S. Lin and S.-L. Chen, “A BPEL 
Test Model for Testing Web Services 
Composition”, In Proceedings of Taiwan 
Conference on Software Engineering, June 
2006, pp. 242-248. 
[5] C.-H. Liu, X.-Y. Li, H.-S. Lin and S.-L. Chen, 
“A BPEL-Based Web Service Composition 
Testing Tool”, In Proceedings of Taiwan 
Conference on Software Engineering, June 
2007, pp. 113-119. 
[6] Z. Li, W. Sun, Z.-B. Jiang, and X. Zhang, 
“BPEL4WS Unit Testing: Framework and 
Implementation”, In Proceedings of the IEEE 
International Conference on Web Services 
(ICWS'05), 2005, pp. 103-110.  
[7] Philip Mayer and Daniel Lübke, “Towards a 
BPEL unit testing framework”, In Proceedings 
of the 2006 workshop on Testing, analysis, and 
verification of web services and applications, 
2006, pp. 33- 42. 
[8] J. Yan, Z. Li, Y. Yuan, W. Sun, and J. Zhang, 
“BPEL4WS Unit Testing: Test Case Generation 
Using a Concurrent Path Analysis Approach”, 
In Proceedings of the 17th International 
Symposium on Software Reliability Engineering 
(ISSRE '06), 2006, pp.75-84. 
[9] Y. Yuan, Z. Li, W. Sun, “A Graph-Search 
Based Approach to BPEL4WS Test 
Generation”, In Proceedings of the IEEE 
International Conference on Software 
Engineering Advances (ICSEA '06), 2006, 
pp.14-14. 
[10] G. Zhang, M. Rong, and J. Zhang, ”A Business 
Process of Web Services Testing Method Based 
on UML2.0 Activity Diagram”, Workshop on 
Intelligent Information Technology Application, 
Dec. 2007, pp. 59-65. 
[11] Y. Zheng, J. Zhou, and Paul Krause, “A Model 
Checking based Test Case Generation 
Framework for Web Services,” In Proceedings 
of The Fourth International Conference on 
Information Technology (ITNG’07). April 2007, 
pp. 715-722. 
[12] Y. Zheng, J. Zhou, and Paul Krause, “Analysis 
of BPEL Data Dependencies,” In Proceedings 
of The 33rd EUROMICRO Conference on 
Software Engineering and Advanced 
Applications, Aug. 2007, pp. 351-358. 
[13] José García-Fanjul, Claudio de la Riva, and 
Javier Tuya, “Generation of Conformance Test 
Suites for Compositions of Web Services Using 
Model Checking,” In Proceedings of The 
Testing: Academic and Industrial Conference - 
Practice And Research Techniques, 2006, 
pp.127-130. 
[14] W.-L. Dong, H. Yu, and Y.-B. Zhang, “Testing 
BPEL-based Web Service Composition Using 
High-level Petri Nets,” In Proceedings of The 
10th IEEE International Enterprise Distributed 
Object Computing Conference(EDOC’06), Oct. 
2006, pp. 441-444. 
[15] H. Cao, S. Ying, and D. Du, “Towards 
Model-based Verification of BPEL with Model 
Checking,” In Proceedings of The 6th IEEE 
International Conference on Computer and 
Information Technology (CIT’06),2006, pp. 
190. 
[16] Y. Qian, Y. Xu, Z. Wang, G. Pu, H. Zhu, and C. 
Cai, “Tool Support for BPEL Verification in 
ActiveBPEL Engine,” In Proceedings of The 
18th Australian Software Engineering 
Conference(ASWEC’ 07), 2007, pp. 90-100. 
[17] ActiveBPEL Designer, http://www.active- 
endpoints.com/active-bpel-designer.htm 
[18] UPPAAL, 
http://www.docs.uu.se/docs/rtmv/UPPAAL/xml 
[19] Hong Zhu, “A Framework for Service-Oriented 
Testing of Web Services”, In Proceedings of the 
30th International Annual Computer Software 
and Applications Conference (COMPSAC'06),  
Sept. 2006, pp. 145-150. 
The Fourth Taiwan Conference on Software Engineering, June 13-14, 2008 
134
