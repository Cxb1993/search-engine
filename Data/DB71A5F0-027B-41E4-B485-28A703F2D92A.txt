目錄 
一、中文摘要 ................................................................................................................................... 3 
二、報告內容 ................................................................................................................................... 3 
研究目的 ................................................................................................................................... 3 
文獻探討 ................................................................................................................................... 4 
研究方法 ................................................................................................................................... 5 
結果與討論（含結論與建議） ............................................................................................... 9 
參考文獻 ................................................................................................................................. 11 
三、計畫成果自評 ......................................................................................................................... 12 
 2
會放在功能性、穩定度以及效能面上，功能性的測試上就必須要去搜集大量的病毒、攻擊樣
本，將這些樣本放在各種協定上去測試待測物，檢驗待測物是否可以正確地偵測出這些有害
流量，穩定度的測試就要利用一些可以自動化的測試程式持續不斷地測試待物，通常用是商
業版的測試軟體才能打出大量的流量，加上這些商業版工具也在努力支援各種不同的應該層
協定，因此其所製造出的流量也說是有相當的複雜度，至於效能面的測試現在的工具不僅是
有 packet-level 的數據可看，還可以展現 connection、session 以及 transaction-level 的資料，
並且是在各種不同的應用層協定上展現出。當一間公司的測試部門依照上述程序完成一連串
的測試，並有沒測出問題之後，由於 UTM 產品的複雜性，造成往往放到使用者端後，又會
發生一些與內部測試結果截然不同的狀況，例如: 在功能面就會發生一些誤擋或漏擋的情
形、在穩定度上可能會發生當機的窘境、在效能面上有時就會聽到使用者抱怨：“為什麼連
網頁變慢了、為什麼收發 E-mail 變慢了＂等等聲音接二連三的出現，這些都是說明了在公司
內部測試時所產生的流量還是不足以符合使用者端的需求。基於上述情況，我們開始尋找解
決之道，最後認為目前最好的方法，就是將使用者端的流量錄製下來，拿到內部測試使用，
如此便可以有最真實的流量又不會影響到使用者的日常運作。 
 
文獻探討 
由於 P2P 流量幾乎都會加密，若用特徵值比對的方式較會產生漏擋或誤擋的情形，因此在設
計 P2P 流量的分類方法時，即是朝向以 P2P 的行為分析為主軸，在我們所 survey 到的相關
方法中主要是以 transport layer 的資訊如 protocol、port 來決定是否為 P2P，第一種方法稱作
P2P flow pattern，其演算如下圖一所示，先檢查兩 peer 之間是否同時存在 TCP 及 UDP 連線，
接下來去除掉一些 well-known 應用的連線(ex. HTTP, SMTP, FTP)，若兩 peer 之間的連線數目
等同於 port pair 的數目的話，即將這些連線當作是 P2P 流量。此方法的限制在於現行的 P2P
流量很多都是跑在 well-known port。 
 
圖 1: P2P flow pattern演算法則 
第二種方法稱作 Combined method，將特徵值比對的方法與 transport layer 資訊結合起來使
用，其演算則如圖 2 所示，此法先將流量分為兩種，一種是連線中已含有 well-known 的 P2P 
port(M1)，另一種是不含有 well-know P2P port 而靠特徵值比對成功的部分 M2，M1 的部分
就直接認定為 P2P 流量，而 M2 的部分再細分為 UDP 與 TCP 兩類，UDP 的部分就認定為
P2P 流量、TCP 的部分去除掉一些 well-known 應用的連線(ex. HTTP, SMTP, FTP)後認定為
P2P 流量。 
 4
3. 用bit-level的樹狀結構儲存所有的IP資訊。 
4. 利用一套“不可逆＂的bit-level random mapping演算法，將錄製得到的public IP 
addresses space轉換到private IP addresses space。 
5. 轉換到private IP addresses space後維持與public IP addresses space下相同的
subnet hierarchy架構。 
在完成上述步驟以後，封包的IP位址資訊已經受到保護，而資料部份我們則採用AES 128bits
加密，資料內容的隱私性獲得保障。 
 
 
圖 4: bit-level random mapping algorithm 
 
點對點應用之流量偵測與抽取 
對於 P2P 流量的辨識，我們採取的是以「非特徵值比對」的方式來進行，因為 P2P 流量愈來
愈會保護自己，例如: 加密、走 well-know port、甚至是透過 HTTP 協定等等，若是用傳統特
徵值比對的方式會有準確度(False-Positive、False-Negative)及效能的問題出現，我們先對各
種 applications 進行分析，發現封包大小分布的差異有足夠的辨識度，圖五是們作實驗後得
到的結果，BT、eMule、HTTP、MSN、FTP 等五種 applications 的封包大小變化過程，y 軸
為封包大小、x 軸為封包順序。 
 6
代表該 application。第二步驟稱之為 Classification，可以參考圖 6，對於未知的流量裡要判斷
它包含哪些 application 並分類出來，第一件事是先把流量中的每條連線分出來(假設有 i 條連
線)，接著對於每條連線都算出 MV 值，最後透過 Clustering algorithm 就可以知道每條連線是
屬於哪一種 application，這裡的 clustering algorithm 我們採用簡化的 K-mean clustering 
algorithm，依照我們所得到的 MV 值，與已知的 Center 們作 Euclidean Distance 運算，若是
行為與某個 Center 相似，則其 Euclidean Distance 一定會與其接近，故可利用此方法得知一
個 connection 所代表的 MV 最接近哪種 application 的行為。 
 
圖 6: Phase 2 Classification 
我們利用上面的方法可以去判斷出某一條 connection 是否屬於某一種 application，如此便
可以達到辨認某種 application 的 session 是否存在於 real traffic 中的目的。而如何去
對 Session 中其他的 connections 做 association，我們引入 ports association 的觀念，
首先我們知道 application 或許具有 randomize port 的機制，但是一旦決定好使用的 port
之後，若該 application 有需要開多條 connection，則會從已選定好的 port number 向下依
照順序使用；並且一個 host 中有 65535 個 ports 可供使用，且作業系統在 assign ports 時
非常不容易產生兩種 application 使用重疊 port number 範圍的狀況。 
我們可以假設一條被認出的 connection 以一個 pair 代表<SrcIP, DstIP, SrcPort, 
DstPort>，依照下列步驟做其他 connection 的關聯性動作： 
1. 知該 SrcIP 與 DstIP 的 host 有使用我們辨認的 application。 
2. 將其 SrcPort, DstPort 記錄於 Ports association table 中。 
3. 若有某條 connection 符合<SrcPort, SrcPort+1>或是<DstPort, DstPort+1>的情況，
則認定該 connection 亦為該種 application 
綜合上述的session detection機制與session association機制，我們可以將整個辨識方法
的流程以圖 7解釋，在real traffic進入偵測點以後，會依照connection為單位將size與其
5-tuple資訊記錄在connection table中，從table中的第一個entry開始計算其metrics 
vector，接著利用簡化的k-mean clustering algorithm計算得知是屬於某種application的
connection。接著填入connection table中的application資訊，並且接下來的connection
 8
 
點對點應用之流量偵測與抽取 
在分析 P2P 流量行為時，首先需要收集”純”的 application 流量，收集方法為建構一個 In-Lab 
Pure Traffic Recording 環境，我們分析的 application 如下表 2 所示，每種 application 收集了
約 40 個 samples，分別為不同時間、不同 host 組合、不同的頻寬、不同的設定各十種，我們
針對這些 samples 利用我們撰寫的程式分析其 packet size distribution，並且依據上述的特徵計
算方式算出各 application 在 Ethernet 上的代表 center 如表 3，並且將對應用程式的 packet size 
distribution 發現歸納如下： 
1. 不同應用程式會丟入不同的 data size 進入 kernel buffer 中，所以造成差異。 
2. 不同 OS 在打包 kernel buffer 中的資料成為封包時會有差異。 
3. 不同的 network link type會造成最大 frame size的差異，自然會改變 packet size distribution。 
 
App. name Class Version Samples Protocol 
Bittorrent P2P 0.81 40 TCP 
eMule P2P 0.47c 40 TCP/UDP 
Skype P2P 3.0 40 TCP/UDP 
MSN P2P 8.1 40 TCP 
Apache Http 2.2.4 40 TCP 
zFTP server FTP 7.4.4 40 TCP 
Exchange server SMTP 2003 40 TCP/UDP 
ShoutCast Streaming 1.9.7 40 TCP 
WorldofWarcraft Gaming 2.0 40 TCP 
表 2、收集的 application samples 
App Name DS DSP CC Variance VarofDS 
Bittorrent 377 79% 13.3 51297 54398 
eMule 1180 51% 3.61 12122 191941 
Skype-File 54 92% 1.51 14650 14898 
Skype-Voice 84 33% 2.46 19463 46312 
Msn-File 1388 45% 1.22 172539 186461 
Msn-Voice 136 48% 1.74 64413 10732 
Apache(Http) 1216 97% 230.41 786.26 790 
zFTP server 688 87% 14.494 45674 50768 
Exc. Server 1420 46% 112.4 143776 160426 
ShoutCast 41 4% 1.48 83834 437631 
表 3、各種 application 之 center 
 
 10
