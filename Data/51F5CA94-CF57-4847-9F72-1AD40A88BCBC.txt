Abstract
The importance of modular (compositional) specification and verification has steadily
grown in the wake of component-based designs. For supporting such formal development
activities, a highly automated tool is desirable. As an initial step, we mechanize within
the Coq proof assistant a variant of the compositional framework that we have developed
earlier based on temporal logic. The variant uses QPTL (Quantified Propositional Temporal
Logic) instead of the full LTL (Linear Temporal Logic). It is expressively restrictive, but
practically more useful when automation is the main concern. Though model-checking of
QPTL specifications is decidable, it is of extremely high complexity due to the existence of
quantifiers. The Coq mechanization of the QPTL-variant of our compositional framework
allows the possibility of leveraging the advantages of combining deductive and algorithmic
verification methods. Coq was chosen for its sound type-theoretical foundation, robust
implementation, and special feature of program extraction.
Keywords: Assumption-Guarantee, Bu¨chi Automata, Compositional Verification, Coq, LTL,
Model Checking, Modular Verification, Proof Assistants, QPTL, Specification, Temporal Logic,
Theorem Proving, Verification.
1 Introduction
A large system is typically composed of several modules. The idea of modular (compositional)
verification is to deduce properties of a system from properties of its constituent modules, which
intuitively should be simpler. A compositional approach is needed in two situations: One is
when the system is too large to be handled in its entirety [2]; the other is when only the prop-
erties (requirement specifications), not the code, of some modules of the system are available.
The latter is exactly what formal verification of component-based designs [19] confronts. A
compositional framework should at least consist of a formalism for specifying modules and a
mechanism for composing such specifications. The formalism for module specifications dictates
the composition mechanism.
Properties of a system may be represented by assertions on computations of the system and
so may properties of a module. Computations of a (closed) system are the sequences of states
produced when the system is executed in isolation. In contrast, computations of a module are
the sequences of states produced when the module is executed in parallel with an arbitrary but
(syntactically) compatible environment, i.e., the computations of an imaginary system obtained
from composing the module with the arbitrary environment. A system or module satisfies a
certain property if the corresponding assertion holds for each of its computations.
A module is meant for particular contexts or environments and will behave properly only if
its environment does. When specifying properties of a module, one should therefore include
(1) assumed properties about its environment and (2) guaranteed properties of the module if
the environment obeys the assumption. This type of specification is essentially a generalization
of pre and post-conditions for sequential programs [5]. The generalization was adopted in
the early 1980’s by Misra and Chandy [15], Jones [8], and Lamport [13] and became the so-
2
We have also been exploring, as the main subject of a previous NSC project, the use of a
variant of our compositional framework wherein QPTL is used instead of LTL. The variant
is expressively restrictive, but practically more useful when automation is the main concern.
Though model-checking of QPTL formulae is decidable, it is of extremely high (in fact, non-
elementary) complexity. The high complexity is due to the existence of quantifiers, which can be
removed by deductive methods. This provides a very good example of how deductive methods
can help reduce the complexity of model checking tasks.
The importance of modular (compositional) specification and verification has steadily grown
in the wake of component-based designs. For supporting such formal development activities, a
highly automated tool is desirable. As an initial step, we mechanize within the Coq proof as-
sistant the QPTL-variant of our compositional framework. We did not use PVS for the reasons
that we have just explained earlier. Coq is chosen for its sound type-theoretical foundation,
robust implementation, and special feature of program extraction. We are also partially moti-
vated by a possible collaboration with the Coq development team under planning. This is part
of our long continuing effort in extending the line of research on applications of temporal logic.
2 Modular QPTL Specification and Verification
We review the basic formalisms that will be used in this research, namely Quantified Proposi-
tional Temporal Logic (QPTL) and a temporal logic-based formulation of assumption-guarantee
specification adapted for QPTL.
2.1 QPTL
The Quantified Propositional Temporal Logic (QPTL) is a restriction of Linear Temporal Logic
(LTL) to the boolean domain or, equivalently, an extension of the Propositional Temporal
Logic (PTL) with quantification over atomic propositions. PTL is simple yet strong enough for
expressing many common, interesting safety and liveness properties. However, situations had
arisen that called for a more expressive but still decidable logic. For example, PTL is incapable
of expressing the fact that a proposition holds exactly at every other state of a sequence [23]
and, more importantly for our purposes, it is incapable for treating abstraction. QPTL is one
of the (decidable) extensions to PTL, which was originally introduced by Sistla [17] and further
studied by Sistla et al. [18] and by Kesten and Pnueli [11].
As an extension of PTL, QPTL formulae are constructed by applying boolean connectives and
temporal operators to atomic propositions (boolean variables) drawn from a predefined universe.
QPTL additionally allows quantification over atomic propositions. Temporal operators are
classified into future operators and past operators. While it is possible to give a small set
of primitive temporal operators and define others in terms of the primitives, most temporal
operators can be easily understood on their own. Equivalence relations can then be stated
reflecting the facts that some operators could be defined in terms of others. Another reason for
4
• (σ, i) |= −©p ⇐⇒ i > 0 and (σ, i− 1) |= p.
• (σ, i) |= ∼©p ⇐⇒ i = 0 or (σ, i− 1) |= p.
first ∆= ∼©false, which is true only at position 0.
• (σ, i) |= −3p ⇐⇒ for some k, 0 ≤ k ≤ i, (σ, k) |= p.
• (σ, i) |= −2p ⇐⇒ for every k, 0 ≤ k ≤ i, (σ, k) |= p.
• (σ, i) |= p S q ⇐⇒ for some k, 0 ≤ k ≤ i, (σ, k) |= q and for every j, k < j ≤ i, (σ, j) |= p.
The following derived forms of formulae are convenient to have:
p↔ q ∆= (p→ q) ∧ (q → p)
p W q ∆= (p U q) ∨2p
p B q ∆= (p S q) ∨ −2p
A sequence of states σ′ is called a x-variant of σ if σ′ differs from σ in at most the interpretation
given to x in each state.
• (σ, i) |= ∃x : p ⇐⇒ (σ′, i) |= p for some x-variant σ′ of σ.
• (σ, i) |= ∀x : p ⇐⇒ (σ′, i) |= p for every x-variant σ′ of σ.
Intuitively, this means that the truth of ∃x : p for a boolean variable x depends on the existence
of an infinite sequence of boolean values for x (one for each state, rather than just a single value)
such that p can be satisfied; analogously, for ∀x : p. Like in classical logic, quantified variables
are internal (local) to a formula and their values are inaccessible from outside of the formula.
We say that a sequence σ satisfies a formula p if (σ, 0) |= p, often abbreviated as σ |= p. A
formula p is valid, denoted |= p, if p is satisfied by every sequence.
As far as behavioral properties are concerned, a system can be modelled as consisting of a set of
variables, an initial condition on the variables, and a set of actions that specify how the system
may change the values of its variables in an execution step. Semantically, a system is associated
with a set of computations or sequences of states, each of which represents a possible execution
of the system. For our purpose, we distinguish two kinds of specification: system specification
and requirement specification.
The system specification of a system or module gives a full characterization of the module in
the sense that the sequences satisfying the specification are exactly those produced from open
execution of the module. Assuming a single local variable, its safety part can be put in the form
of 2(∃x : −2((first → Init)∧N)), where x is the local variable, Init is a state formula, and N is
the disjunction of transition formulae (including the stuttering transition that changes nothing)
that relate the current values of the variables to their previous values. We omit the formula for
fairness.
6
says that ∃z : −2HM (x, y, z) holds at least one step longer than ∃w : −2HE(x, y, w) does.
The following lemma states that A/G specifications can be composed in a straightforward way:
Lemma 2.1 (Simple Composition) Assuming that w1, . . ., wn, z1, . . ., zn are distinct and
no free variables become bound,
|=
n∧
i=1
(2(∃wi : −2HEi)  2(∃zi : −2HMi))
→ 2(∃w1 . . . wn : −2
n∧
i=1
HEi)  2(∃z1 . . . zn : −2
n∧
i=1
HMi).
Below is a more general rule for composition.
Theorem 2.2 (Composition) Assuming that w, z, w1, . . ., wn, z1, . . ., zn are distinct and
no free variables become bound,
1. |= 2
[
(∃w : −2HE) ∧ (∃z1 · · · zn : −2
n∧
i=1
HMi)→ (∃w1 · · ·wn : −2
n∧
i=1
HEi)
]
2. |= 2
[
∼©(∃x : −2HE) ∧ (∃z1 · · · zn : −2
n∧
i=1
HMi)→ (∃z : −2HM )
]
|=
n∧
i=1
(2(∃wi : −2HEi)  2(∃zi : −2HMi)) → (2(∃w : −2HE)  2(∃z : −2HM ))
Intuitively, Premise 1 of the above composition rule says that the assumption about the envi-
ronment of a module should follow from the guarantees of other modules and the assumption
about the environment of the entire system; while, Premise 2 says that the guarantee of the en-
tire system should follow from the guarantees of individual modules and the assumption about
its environment.
Our A/G formulation also permits expression of liveness properties in the guarantee part. The
compositional framework may be applied in different contexts (Note: (true  G) ≡ G):
• Compose modules to get a new one:
n∧
i=1
(Ai  Gi)→ (A  G)
• Combine modules to get a (closed) system:
n∧
i=1
(Ai  Gi)→ G
• Correctly implement a module: G′ → (A  G)
• Substitute a module for another: (A′  G′)→ (A  G)
• Correctly reuse a module: G1 ∧ (A2  G2)→ G
3 Formalization in Coq
Coq [20, 6] is a proof assistant for higher-order logic that allows the development of computer
programs consistent with their formal specification. The logical language of Coq is based on a
8
| s_and p’ p’’ => s_models s p’ /\ s_models s p’’
| s_or p’ p’’ => s_models s p’ \/ s_models s p’’
| s_impl p’ p’’ => s_models s p’ -> s_models s p’’
| s_iff p’ p’’ => s_models s p’ <-> s_models s p’’
end.
Notation "~ p" := (s_not p) (at level 75, right associativity): qptl_scope.
Notation "p /\ q" := (s_and p q) (at level 80, right associativity): qptl_scope.
Notation "p \/ q" := (s_or p q) (at level 85, right associativity): qptl_scope.
Notation "p --> q" := (s_impl p q) (at level 90, right associativity): qptl_scope.
Notation "p <--> q" := (s_iff p q) (at level 95, no associativity): qptl_scope.
Notation "s ||= p" := (s_models s p) (at level 150, no associativity): qptl_scope.
Inductive QPTL_formula: Set :=
| s_t :> State_formula -> QPTL_formula
| not : QPTL_formula -> QPTL_formula
| and : QPTL_formula -> QPTL_formula -> QPTL_formula
| or : QPTL_formula -> QPTL_formula -> QPTL_formula
| impl : QPTL_formula -> QPTL_formula -> QPTL_formula
| iff : QPTL_formula -> QPTL_formula -> QPTL_formula
| next : QPTL_formula -> QPTL_formula
| sometime : QPTL_formula -> QPTL_formula
| always : QPTL_formula -> QPTL_formula
| until : QPTL_formula -> QPTL_formula -> QPTL_formula
| previous : QPTL_formula -> QPTL_formula
| before : QPTL_formula -> QPTL_formula
| once : QPTL_formula -> QPTL_formula
| sofar : QPTL_formula -> QPTL_formula
| since : QPTL_formula -> QPTL_formula -> QPTL_formula
| t_exists : Var -> (Var -> QPTL_formula) -> QPTL_formula
| t_forall : Var -> (Var -> QPTL_formula) -> QPTL_formula.
Definition Sequence: Set := nat -> St.
Definition variant (x: Var)(s: Sequence)(s’: Sequence): Prop :=
forall (y: Var)(i: nat), y<>x -> (s’ i) y = (s i) y.
(* s’ is an x-variant of s *)
Fixpoint models (s: Sequence)(i: nat)(p: QPTL_formula) {struct p}: Prop :=
match p with
| s_t p’ => s_models (s i) p’
10
Notation "p ’W’ q" := (p U q \/ [] p) (at level 78, right associativity): qptl_scope.
Notation "p ’B’ q" := (p S q \/ [-] p) (at level 78, right associativity): qptl_scope.
Notation "p ==> q" := ([] (p --> q)) (at level 95, right associativity): qptl_scope.
Notation "p <==> q" := ([] (p <--> q)) (at level 95, no associativity): qptl_scope.
Definition valid (p: QPTL_formula): Prop :=
forall s: Sequence, s |= p.
Notation "|= p" := (valid p) (at level 105, no associativity): qptl_scope.
Definition equivalent (p q : QPTL_formula) : Prop :=
|= p <--> q.
Notation "p ~ q" := (equivalent p q) (at level 95, right associativity).
Definition congruent (p q : QPTL_formula) : Prop :=
|= p <==> q.
Notation "p ~~ q" := (congruent p q) (at level 95, right associativity).
Definition first : QPTL_formula := (~) s_false.
3.2 Formalization of A/G Formulae and Proof Rules
The formal definition of a basic A/G formula is as follows.
Definition ag (p q: QPTL_formula): QPTL_formula :=
[]((~)[-]p --> q).
Definition ags (p q: QPTL_formula): QPTL_formula :=
[]((~)[-]p --> [-]q).
Notation "p |> q" := (ag p q) (at level 100, no associativity): qptl_scope.
Notation "p ||> q" := (ags p q) (at level 100, no associativity): qptl_scope.
Below is a sample of the rules that have been formalized.
Require Import Arith.
Lemma ag_ags:
forall p q: QPTL_formula,
12
sequent calculus. The foundational theory of Coq is quite sophisticated and needs a long time
to digest.
We are further developing the reported Coq mechanization of the QPTL-variant of our compo-
sitional framework. In particular, we are still seeking to leverage the advantages of combining
deductive and algorithmic verification methods, which we had planned. We will also investigate
how the program extraction feature of Coq can be utilized. The work should become mature
and ready for publication soon.
References
[1] Y. Bertot and P. Caste´ran. Interactive Theorem Proving and Program Development.
Springer, 2004.
[2] E.M. Clarke, D.E. Long, and K.L. McMillan. Compositional model checking. In Proceedings
of the 4th IEEE Symposium on Logic in Computer Science, pages 353–362, 1989.
[3] J. Crow, S. Owre, J.M. Rushby, N. Shankar, and M. Srivas. A tutorial introduction to
PVS. Technical report, Computer Science Laboratory, SRI International, Menlo Park, CA,
June 1995.
[4] J. Dingel and T. Filkorn. Model checking for infinite state systems using data abstrac-
tion, assumption-commitment style reasoning and theorem proving. In P. Wolper, editor,
Computer-Aided Verification, CAV ’95, LNCS 939, pages 54–69. Springer-Verlag, June
1995.
[5] C.A.R. Hoare. An axiomatic basis for computer programs. Communications of the ACM,
12(8):576–580, 1969.
[6] G. Huet, G. Kahn, and C. Paulin-Mohring. The Coq Proof Assistant: A Tutorial, 2004.
[7] H. Hungar. Combining model checking and theorem proving to verify parallel processes.
In C. Courcoubetis, editor, Computer-Aided Verification (CAV ’93), LNCS 697, pages
154–165. Springer-Verlag, June 1993.
[8] C.B. Jones. Tentative steps towards a development method for interfering programs. ACM
Transactions on Programming Languages and Systems, 5(4):596–619, October 1983.
[9] B. Jonsson and Y.-K. Tsay. Assumption/guarantee specifications in linear-time temporal
logic. Theoretical Computer Science, 167:47–72, October 1996. An extended abstract
appeared earlier in TAPSOFT ’95, LNCS 915.
[10] Y. Kesten and A. Pnueli. Verification by augmented finitary abstraction. Information and
Computation, 163(1):203–243, November 2000.
14
Workshop/Conference Trip Report
Formal Methods in the Teaching Lab
A Workshop at FM 2006, Hamilton, Ontario, Canada
August 21–27, 2006
(NSC 94-2213-E-002-089.»j.ºÈTÿ ×)
Yih-Kuen Tsay
|Ç
Department of Information Management
National Taiwan University
1 Workshop/Conference Overview
The Formal Methods in the Teaching Lab Workshop (FMEd, standing or Formal Methods Ed-
ucation), held on August 26, was a one-day workshop affiliated with and following the main
conference of Formal Methods 2006. There were other workshops and a special track called
“industry day”. I estimated the total number of participants to be between 100 and 120 peo-
ple. The FMEd workshop had 14 papers, while the technical program of the main conference
consisted of 5 invited talks and about 35 contributed papers. The main conference proceedings
also include several papers from the industry day, but does not include workshop papers. For
FMEd, a post-workshop proceedings has been organized and currently the full versions of the
presented papers are under review.
The technical contents of the papers presented in the conference or workshops were very diverse,
encompassing such areas as theorem proving, model checking, programming languages, etc.
Even within the same area, the papers would talk about very different topics. It was therefore
only possible to fully understand some of the talks. “Interface Input/Output Automata” by
Kim G. Larsen, Ulrik Nyman, and Andrzej Wasowski (presented by Wasowski) and “PSL Model
Checking and Run-time Verification via Testers” by Aleksandr Zaks and Amir Pnueli (presented
by Zaks) were the two most interesting papers to me. My group has now applied the idea of
temporal testers in our tool.
As usual, among the most interesting talks, are the invited ones. In his invited talk entitled “The
Embedded Systems Design Challenge”, Thomas A. Henzinger argued that Computer Science
is in need of a new foundation for embedded systems design. Ernie Cohen gave the second
invited talk which emphasized much on the importance and impact of multi-core architectures.
He tried to explain the intricacy of the Microsoft Hypervisor, a sophisticated low-level program
1
Tool Support for Learning Bu¨chi Automata
and Linear Temporal Logic?
Yih-Kuen Tsay, Yu-Fang Chen, and Kang-Nien Wu
Dept. of Information Management, National Taiwan University, TAIWAN
Abstract. Automata and logics are intimately related, and understanding their relation is instrumen-
tal in discovering algorithmic solutions to formal reasoning problems or simply in using those solutions.
This applies to Bu¨chi automata and linear temporal logic, which have become fundamental compo-
nents of the model-checking approach to formal verification of concurrent systems. Translation of a
propositional temporal formula into an equivalent Bu¨chi automaton is routinely performed in many
model-checking algorithms and tools. Albeit the possibility of mechanical translation, a temporal for-
mula and its equivalent automaton appear to be two very different artifacts and their correspondence
is not easy to grasp.
In this paper, we introduce a graphical interactive tool, named GOAL, that can assist the user in
understanding the relation between Bu¨chi automata and linear temporal logic, and suggest possible
usages and benefits of the tool in courses where model-checking techniques are covered. GOAL builds
on the successful JFLAP tool for classic theory of automata and formal languages. One main function
of GOAL is translation of a propositional temporal formula into an equivalent Bu¨chi automaton that
can be visually manipulated, for example, running the automaton on some input. GOAL also supports
various standard operations and tests, including equivalence test, on Bu¨chi automata. We believe that,
with an easy access to temporal formulae and their graphically presented equivalent Bu¨chi automata,
the student’s understanding of the two formalisms and their relation will be greatly enhanced.
1 Introduction
The model-checking approach to formal verification of concurrent systems seeks to automatically verify if the
given system represented by an abstract model satisfies its specification. Because of its proven effectiveness
and ease of use, model checking has become a viable alternative to simulation and testing in industry. Model
checkers are also increasingly exploited by verification tools based on deductive (theorem proving) methods,
as the work horses for decidable verification subtasks.
In one school of model checking, a concurrent system is equated semantically with a set of infinite
computations and its desired behavioral properties are then specified in terms of those computations. The
specification of a behavioral property typically asserts temporal dependency between occurrences of certain
events (represented by propositions) and linear temporal logic has thus become a particularly popular class
of languages for specification. Temporal dependency between events may also be expressed with Bu¨chi
automata, which are finite automata operating on infinite words.
Indeed, automata and logics are intimately related, as we all have learned from classic theory of compu-
tation. Understanding their relation is instrumental in discovering algorithmic solutions to formal reasoning
problems or simply in using those solutions. This applies to Bu¨chi automata and linear temporal logic. It has
been shown that Bu¨chi automata and a variant of linear temporal logic called quantified propositional tem-
poral logic are expressively equivalent. For the pure propositional temporal logic (PTL), practically feasible
algorithms exist for translating a PTL formula (which is usually short as a specification) into an equivalent
Bu¨chi automaton.
As Bu¨chi automata are also suitable as abstract system models, many researchers have advocated a
unified model-checking approach based on automata. In this approach, the negation of the specification
? This work was supported in part by the National Science Council of Taiwan (R.O.C.) under grant NSC 94-2213-
E-002-089.
~pq ~pq
pq ~p~q
~p~q
pq
p~qq0 q1
p~q
~pq
pq
~pq
pq
~p~q
p~q
q0 q1
(a) 2(p→ −3q) (b) 2(p→ p U q)
Fig. 1. Two PTL formulae and their respective equivalent Bu¨chi automata, where the darker states are accepting
states.
A PTL formula can be translated into an equivalent Bu¨chi automaton (but not vice versa) in the sense that
every infinite sequence satisfying the formula corresponds to an infinite word accepted by the automaton [19,
5, 6]. As an illustration, we exam the Bu¨chi automata equivalent to the two example temporal formulae. The
alphabet for both automata is {pq, p~q, ~pq, ~p~q}. The Bu¨chi automaton in Figure 1(a) is equivalent to
the formula 2(p → −3q). From state q0, there is no transition for p~q, ensuring that “the first p does not
occur before the first q”. The Bu¨chi automaton in Figure 1(b) is equivalent to the formula 2(p→ p U q). An
occurrence of p~q brings the automaton from q0 to q1, where no transition is possible for ~p~q. So, once p
becomes true, it has to remain true until q becomes true. In addition, as q1 is not an accepting state, either
pq or ~pq must occur, bringing the automaton to the accepting state q0.
Another variant of LTL called Quantified Propositional Temporal Logic (QPTL) [15] additionally allows
quantification over atomic propositions. QPTL are equivalent to Bu¨chi automata in expressive power, though
the translation from formula to automaton involves a non-elementary blow-up of number of states [16].
Model Checking. Model checking seeks to automatically verify if a given system satisfies its specification [2].
The system is typically modeled as a Kripke structure, which is essentially a state-transition graph where
each state is labeled with those propositions that hold in that state; fairness may be imposed on how the
transitions should be taken. When the specification is given by a PTL formula, the model checker determines
if every computation (sequence of states) generated by the system satisfies (or is a model of) the formula.
The system may also be modeled as a Bu¨chi automaton; in fact, every Kripke structure (with or without
the usual fairness conditions) corresponds to some Bu¨chi automaton. As the PTL formula can also be trans-
lated into a Bu¨chi automaton, this results in a uniform treatment of both the system and its specification [18].
Suppose A is the automaton modeling the system and Bϕ the automaton representing the specification ϕ.
Let L(A) and L(Bϕ) denote respectively the languages of the two automata. The problem of model checking
translates into that of language containment L(A) ⊆ L(Bϕ). Let L(Bϕ) denote the complement of L(Bϕ).
The problem is then equivalent to checking if L(A) ∩ L(Bϕ) = ∅. As Bu¨chi automata are closed under
intersection and complementation, this reduces to the emptiness problem of Bu¨chi automata.
However, complementation of a Bu¨chi automaton is expensive. A better alternative is to first negate the
given PTL formula ϕ and obtain the equivalent automaton B¬ϕ such that L(B¬ϕ) = L(Bϕ). Now, to check
if L(A) ∩ L(B¬ϕ) = ∅, one only needs to construct the intersection of A and B¬ϕ and complementation is
avoided.
3 The GOAL Tool
In this section, we describe the functions of GOAL (Graphical Interactive Tool for Omega-Automata and
Temporal Logic) and their implementation. The current version of GOAL provides the following functions:
– Drawing and Running Bu¨chi Automata: The user can easily point-and-click and drag-and-drop
to create a Bu¨chi automaton; the automata in Figure 1 were drawn using GOAL. After an automaton
is created, the user can run it through some input to get a feel of what kind of inputs the automaton
accepts, as shown in Figure 2.
3
(a) A Bu¨chi automaton translated from GFp (or 23p) (b) The intermediate generalized Bu¨chi automaton
Fig. 3.More screen shots of the GOAL tool. The PTL formula GFp is translated into an equivalent Bu¨chi Automaton.
If the translation is followed step by step, the user can also see the intermediate generalized Bu¨chi automaton.
is good for educational purposes). The steps can be easily divided and their intentions clearly illustrated.
Some published translation algorithms are indirect, e.g., the translation in [5] used a very weak alternating
automaton as the intermediary, while some combine multiple steps into one, e.g., the translation in [6] con-
structed states and established transitions in the same step. To reduce the number of states, we implemented
several methods for state reduction, for example, removing redundant states detected by simulation [3].
4 GOAL in Classroom and More
As the implementation of its main functions has just recently been completed, we have yet to use the GOAL
tool in an actual classroom setting. However, an analogy can be drawn from the use of JFLAP [13], a visual
interactive tool for teaching and learning classic theory of automata and formal languages that inspired
GOAL. The first author has used JFLAP for several years in his Theory of Computation course for junior
and senior undergraduate students. Both the students and the instructor have enjoyed the illuminating visu-
alization that the tool provides. It helps to be able to see how an automaton, particularly a nondeterministic
one, runs on an input. A convenient tool for drawing automata also encourages the students to do more ex-
ercises. It was a delight to find that a visual tool has breathed life into an important foundational computer
science course that would otherwise be dull to most students. Moreover, as the diagrams can be exported
with a PDF printing support, the tool has also saved the instructor’s time when preparing handout material
and the students’ when writing up their homework. We believe the same will apply for GOAL.
The GOAL tool should be useful as teaching and learning support for courses on model checking, formal
verification, or even advanced automata theory where ω-automata and temporal logic are essential topics.
Our immediate plan is to use GOAL in a course of this Fall titled Software Development Methods, which
aims at improving students’ ability in designing quality software. The course covers three topics: software
modeling, design patterns, and formal verification. In the verification part, we will cover model checking
techniques and tools where GOAL can help. Though the emphasis is not on translation algorithms, the
student will be asked to write the same specifications with Bu¨chi automata and temporal formulae. With the
help of GOAL (particularly the equivalence test), they will be able to quickly validate their answers. They
can try out a few inputs on a Bu¨chi automaton to get a better understanding of what its language is. For
the more aspiring students, GOAL can provide them with guidance on how a Bu¨chi automaton is obtained
systematically from a PTL formula (though not necessarily in an optimal way).
5
