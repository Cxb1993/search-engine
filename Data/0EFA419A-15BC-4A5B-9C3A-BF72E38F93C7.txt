雙環圖之點搜尋問題 
NSC-94-2213-E-309-001 
Hsin-Hung Chou 
 
Abstract 
The node-searching problem, 
introduced by Kirousis and Papadimitriou, 
is equivalent to several important 
problems, such as the interval thickness 
problem, the gate matrix layout problem, 
the path-width problem, the vertex 
separation problem, and so on. It is well 
known that the node-searching problem is 
NP-complete on general graphs and that 
node-search number is identical to 
pathwidth + 1 and to vertex separation + 1. 
Bodlaender et al. gave a polynomial time 
algorithm for computing the pathwidth of 
a partial k-tree for a fixed k ≥ 1. However, 
its time complexity is Ω(n11) for the 
graphs with treewidth 2. Ellis et al. gave 
an O(n log n) algorithm for computing 
both the vertex separation and an optimal 
layout of a unicyclic graph. Later, Chou et 
al. improved the time complexity of Ellis’ 
algorithm to O(n). 
A double-cyclic graph is a graph with 
exactly two cycles and the cycles contain 
no chords, which is also a partial 2-tree. 
In this project, we propose the concept of 
general avenue system whereby the types 
of the rooted unicyclic graphs are defined. 
We first divide a double-cyclic graph into 
two unicyclic graphs with only one 
common vertex. Then the types and the 
search numbers of the unicyclic graphs 
are computed individually. Finally, the 
types and the search numbers are 
combined by a linear-time algorithm we 
designed to obtaining the search number 
of the double-cyclic graph. 
This result will be the base to study the 
graphs with more complicated structure, 
such as cactus graphs, outerplanar graphs, 
series parallel graphs, and so on. 
 
Keywords: node-searching problem; 
pathwidth; double-cyclic graphs; avenue; 
search number; optimal search strategy. 
 
摘要 
點 搜 尋 問 題 是 由  Kirousis 與 
Papadimitriou所提出的。該問題和許多
重要的問題等價，例如區段厚度問題、
邏輯匣矩陣陳列問題、路徑寬度問題、
和點分隔等問題。眾所周知，點搜尋問
題在一般圖上屬於NP-complete。另外，
點搜尋數等於路徑寬度加 1，也等於點
分隔數加 1。Bodlaender 等人曾經提出
一個多項式時間的演算法用來計算偏k-
樹 ( k固定且 ≥ 1)的路徑寬度。然而，
當樹寬度為 2，該演算法的時間複雜度
為Ω(n11)。單環圖也是屬於偏 2-樹。Ellis
等人提出了一個O(n log n)時間複雜度
的演算法用來計算單環圖的點分隔數和
最佳陳列。後來，Chou等人改進了Ellis
的演算法使其成為線性時間。 
一個圖形只包含兩個環並且這兩個環
 1
partial k-trees for a fixed k≥1, we need to 
discover the inference of the cycles to the 
node-searching numbers. 
 
In [16], Ellis et al. proposed an O(n log 
n)-time complicated algorithm for the vertex 
separation problem on unicyclic graphs. 
Later, Chou et al. [20] improved the time 
complexity of their algorithm to O(n). 
A double-cyclic graph is a graph with 
exactly two cycles and the cycles contain no 
chords, which is also a partial 2-tree. In this 
project, we investigate the node-searching 
number of a double-cyclic graph in linear 
time.  
This result will be the base to study the 
graphs with more complicated structure, 
such as cactus graphs, outerplanar graphs, 
series parallel graphs, and so on. 
3 研究方法 
3.1 Terminology 
 
For a simple, finite, and undirected graph 
G, we use V(G) and E(G) to denote the 
vertex set and the edge set of G, respectively. 
The union of graphs G1,…,Gr, written G1 
∪…∪Gr, is the graph with vertex set 
 and edge set . For a 
vertex subset V
∑
=
r
i
iGV
1
)( ∑
=
r
i
iGE
1
)(
0 of V(G), we use G − V0 to 
denoted the subgraph induced by V(G) − V0. 
For a vertex x ∈ V (G), a connected 
component of G − {x} is called a branch at 
x in G. The branch at x containing a vertex y 
is denoted by (G)x,y. The fork at x containing 
y, denoted by [G]x,y, is the subgraph induced 
by V((G)x,y)∪{x}. 
A path of G is a sequence of vertices v1, 
v2,…, vr in which (vi, vi+1) ∈ E(G) for 1≤ i ≤ 
r−1. For a path P of G, a branch (fork resp.) 
at a vertex x ∈ V(P) is called a path branch 
(fork resp.) of P at x if it contains at least 
one vertex in V(P) − {x}; otherwise it is 
called a non-path branch (fork resp.) of P at 
x. 
A vertex of G whose removal increases 
the number of connected components is 
called a cut vertex of G; otherwise it is 
called a non-cut vertex of G. A block of G is 
a maximal connected subgraph of G that has 
no cut vertex. Analogous to a path, a block 
branch (fork resp.) and a non-block branch 
(fork resp.) of a block K at a vertex y∈V(K) 
are defined. We use (G)K,y and [G]K,y to 
denote the set of the non-block branches of 
K at y and the set of non-block forks of K at 
y, respectively. Notice that (G)K,y may be a 
disconnected subgraph. 
The enclosed subgraph of G at any pair 
of vertices x and y∈V(G) is defined as the 
subgraph [G]x,y ∩ [G]y,x, denoted by {G}x,y. 
 
In a search strategy, a guarded vertex is a 
vertex with a searcher, and a cleared edge is 
recontaminated if there exists a path 
connecting this edge to a dirty one and none 
of the vertices along the path is guarded. A 
search strategy is progressive if there is no 
edge recontamination occurs during the 
search strategy. Kirousis and Papadimitriou 
showed that there exists an optimal 
progressive search strategy for any graph [1]. 
Thus, in the following we only consider 
progressive search strategies. 
 
 3
avenue vertex (avenue edge resp.). A block 
containing avenue edges is called a critical 
block. The set of the critical blocks is 
unique. 
 
3.3 Types of rooted unicyclic graph 
 
We depict a unicyclic graph G as a cycle 
C in which each cycle vertex is the root of a 
tree, referred to as a tentacle. Tentacles with 
search numbers k and of type other than H 
are called k-heavy tentacles. Let u be a 
vertex of G, we classify G[u] into five types, 
denoted by τ (G[u]), as follows. 
 
Definition 5 Let G[u] be a rooted unicyclic 
graph. 
(1) If u is a hub of G, then G[u] is of type H. 
(2) If (i) G has a hub but u is not a hub of G, 
or (ii) G has no hub and u is located in 
a non-block fork of a critical block at an 
outlet vertex, then G[u] is of type E. 
(3) If u is a critical vertex of G, then G[u] is 
of type I. 
(4) If u is located in a branch at a critical 
vertex without any avenue vertex, then 
G[u] is of type Mv. 
(5) If u is located in a tentacle of a critical 
block which belongs type i defined later, 
then G[u] is of type . ibM
In the following, we assume that ns(G) = 
k and there exists an avenue passing two 
cycle vertices x and y of C, i.e., C is a 
critical block. Let T1 and T2 be the disjoint 
trees in {G}x,y – {x,y}. Normally, T1 and T2 
are not empty. However, either one may be 
empty, but not both. For i = 1,2, let (  
resp.) denote the tree induced by V(T
x
iT
y
iT
i)∪{x} 
(V(Ti)∪{y} resp.). Without loss of 
generality, we assume that ns(T1) ≥ ns(T2) 
and os( ,x) ≥ os( ,y). xT1 yT1
From [20], we classify C into four types: 
(1) os( ,x) = os( ,y) = k and TxT1
yT1 2 has no 
(k-1)-heavy tentacle. 
type A: T1 has two (k-1)-heavy tentacles 
of type E; 
type B: T1 has one (k-1)-heavy tentacle 
of type other than E; 
(2) type C: os( ,x) = os( ,y) = k and  xT1
yT2
os( ,y), os( ,x) < k. yT1
xT2
type D: os( ,x) = k and os( ,y), 
os( ,y), os( ,x) < k. 
xT1
yT2
yT1
xT2
(3) type E: os( ,x) < k. xT1
 
We classify the location of u on C into 
following types: 
(1) C is of type A. 
   type A-1: u is located in T1. 
   type A-2: u is located in T2. 
(2) C is of type B. 
type B-1: u is located in T1. 
type B-2: u is located in T2. 
(3) C is of type C. 
type C-1: u is located in T1. 
type C-2: u is located in T2. 
(4) C is of type D. 
type D-1: u is located in T1. 
type D-2: u is located in T2. 
(5) C is of type E. 
 
3.4 Merging algorithm 
 
Algorithm NodeSearch (G: double-cyclic 
graph) 
1. Divide G into two unicyclic graphs G1, 
G2 and T such that G1∩G2={u}. Assume 
 5
