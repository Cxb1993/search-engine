電腦學刊  第十七卷第二期（Journal of Computers, Vol.17, No.2, July 2006） 
 
20 
In the sender (compression) end, the codeword search process looks for a “nearest” codeword, iC , from the 
codebook for the given input vector tX . Euclidean distance was used in the search process to measure the dis-
tance between two vectors as indicated in Equation (1). 
1,...,0),,(minarg −== NjCXDi jtj  . (1) 
where ∑
=
−=
K
k
kk
VVVVD
1
2
2121 )(),( is the Euclidean distance between two K-dimensional vectors 1V and 2V , and 
kV  is the k-th component of vector V. 
The index of selected codeword is then transmitted to the receiver end. With the same codebook, the decom-
pression process can easily reconstruct vector 'tX  by simple table look-up. Of course, there will be distortion 
introduced by the compression-decompression process, since 'tX  is only an approximated version of the original 
tX . If we work on 8-bit gray-level image, using a block size of 44×  pixel and a codebook of 256 code words, 
then the compression ratio is up to 16
256log
844
2
=
××
. 
 
 
 
 
 
 
 
 
 
Fig. 1. A block diagram for vector quantization 
The codebook plays an essential role in vector quantization. The codebook size, i.e. the number of code words 
in a codebook, is a tradeoff between compression quality and compression rate. The code words in the codebook 
decide the resultant compression distortion. A dedicated procedure is required for the generation of appropriate 
codebook. One may regards the problem of codebook generation as a problem of finding N most representative 
vectors, 1,...,0, −= NiCi , from M given training vectors, 1,...,0, −= MjX j . The located iC ’s serve as code 
words used to partition the M given data into N mutual exclusive clusters, 1,...,0, −= NiSi . A given vector jX  
is considered to belong to cluster iS  if iC  is the nearest codeword to jX . Among other alternatives, LBG algo-
rithm [12] is widely used in various applications. The following pseudo code illustrates the operation of LBG 
algorithm: 
 
Pseudo Code for LBG Algorithm 
Randomly pick up N vectors from M training vectors as initial code words 
DO 
  Conduct clustering using the current code words 
  Calculate new centers iC  for each cluster iS  
UNTIL Improvement falls bellow threshold ε  
 
Vector quantization had been distinguished for its high compression rate in lossy data compression applica-
tions. To be of practical significance, a digital watermarking technique should take into account the effect of 
vector quantization compression. Recently, several researchers pay much attention to explore the hiding scheme 
based on vector quantization [13]-[15]. In Section 2, we will review these representative works, and point out 
their relative merits and potential limitations. We will discuss the details of using genetic algorithms for index 
assignment in Section 3. Such an approach will reduce the possibility of information leakage. An improved 
scheme based on the results of Sections 3 is presented in Section 4. Experimental results are given in Section 5, 
followed by some conclusions in Section 6. 
Codeword 
Search 
Code words 
C0,…,CN-1 
Code words 
C0,…,CN-1 
Table 
Look Up 
Xt X’t 
Index i 
電腦學刊  第十七卷第二期（Journal of Computers, Vol.17, No.2, July 2006） 
 
22 
the development of our scheme on index assignment using genetic algorithms. The proposed scheme is capable 
of retaining the virtue of vector quantization without scarifying the robustness against common attacks. 
3   Index Assignment by Genetic Algorithms 
Inspired by Darwin’s theory of evolution, J. Holland [16] introduced the genetic algorithm [17] as a powerful 
computational model for optimization. Genetic algorithms work on a population of potential solutions, in the 
form of chromosomes, and try to locate a best solution through the process of artificial evolution, which consists 
of repeated artificial genetic operations, namely evaluation, selection, crossover, and mutation. Genetic algo-
rithms maintain a population of candidate solutions and conduct stochastic search via information selection and 
exchange. With genetic algorithms, near-optimal solutions can be obtained within justified computation cost. A 
pseudo code for the operation of genetic algorithms is given bellows: 
Pseudo Code for Genetic Algorithms 
Randomize initialize population P(0) 
WHILE terminate condition is not met 
  Evaluate P(t) using object function 
  Select P(t+1) from P(t) based on fitness value 
  Conduct genetic operators, crossover and mutation, on P(t+1) 
Although the operation of genetic algorithms is quite simple, it does have some important characteristics pro-
viding robustness: 1. Search from a population of points rather than a single point. 2. Use object function directly, 
not their derivative. 3. Use probabilistic transition rule, not deterministic one, to guide the search toward promis-
ing region. In effect, genetic algorithms maintain a population of candidate solutions and conduct stochastic 
search via information selection and exchange. It is well recognized that, with genetic algorithms, near-optimal 
solutions can be obtained within justified computation cost. However, it is difficult for genetic algorithm to pin 
point the global optimum. In practice, hybrid approach is recommended by incorporating gradient-based or local 
greedy optimization techniques. In such integration, genetic algorithms act as course-grain optimizers and gradi-
ent-based method as fine-grain optimizers. 
Genetic algorithm is used in our scheme to find out a suitable index assignment such that nearby indices are 
assigned to similar code words. To encourage the formation of chromosomes fulfilling these criteria, the object 
function is defined as follows:  
( )∑∑
−
=
+
−=
=
1
0
,
L
i
si
sij
ji ccDf  . 
(7) 
where ( )ji ccD ,  is the Euclidian distance between code words ic  and jc ; s is the range of comparison. 
The first design issue in applying genetic algorithms is to select an adequate coding scheme to represent poten-
tial solutions in the form of chromosomes. For our problem, each chromosome is a permutation of indices repre-
senting a possible index assignment. In the initial population, all chromosomes are randomly set. During the 
course of evolution, each chromosome is subject to fitness evaluation according to Equation (7). Fitness values 
are then used in the process of roulette wheel selection to generate next population. The crossover operator plays 
an essential role in combing good genes. A modified version of the crossover operator, as illustrated in Fig. 2, is 
developed to ensure the legality of newly generated chromosomes. Mutation operator acts as a background op-
erator against the premature phenomenon. In our work, mutation is done by swapping the indices of two ran-
domly selected code words in a chromosome. 
 
 
 
 
 
 
 
 
Fig. 2. Modified crossover operator 
 
ck 
ck+1 
i 
j 
i 
j 
i 
電腦學刊  第十七卷第二期（Journal of Computers, Vol.17, No.2, July 2006） 
 
24 
( ) ( ){ }nmYIAinmy ,, ′==Y  . (13) 
 The process diagram for watermark extraction is given in Fig. 4. For watermark extraction from a given im-
age X ′′ , mY′  can be obtained from IAY′ with the help of 3Key . We then have mP′  by incorporating 4Key . 
pW′ can be evaluated by applying an exclusive-OR operation on mP′  and 2Key . 
2mp KeyPW ⊕′=′  . (14) 
Finally, W′  can be arrived at by an inverse disturbing based on 1Key . 
 
 
 
Fig. 4. Process diagram of watermark extraction 
5   Experimental Results 
A series of experiments was made to verify the feasibility and effectiveness of our approach. Key experiment 
setting is given below: 
 
 Test image: 512512∗  8-bit, gray-level Lena 
 Watermark: 128128×  binary Rose 
 Generation limit of GA: 10,000 generations 
 Population size of GA: 20 chromosomes 
 Crossover rate of GA: 70% 
 Mutation rate of GA: 0.1% 
 Range of comparison s: 4 
 Size of neighborhood K: 6 
 
We also implemented the algorithm by Huang et al. [13] for comparative study. For possible information leak-
age, experiments were made to extract watermark from non-watermarked images, including Baboon, Goldhill, 
and Peppers. The result is given in Fig. 3. It is clear that the potential problem with Huang et al. [13] ceases to 
exist with our scheme. Fig. 4 reports the watermarks extracted using our scheme under various kinds of attacks.  
Table 1 summarizes the bit correct rate for the two approaches under consideration. We can see that there is 
comparable performance between them.  
6   Conclusions 
A new scheme, in the domain of vector quantization, is developed and presented in this article. The proposed 
approach use genetic algorithms to reassign the indices of code words. As a result, embedded information will be 
diffused more evenly across the image to be protected, and then possible security leakage can be avoided. Ex-
perimental results reveal that the proposed scheme is free from the potential limitations in previous approaches, 
while maintaining the robustness against various kinds of attacks. 
 
 
 
 
 
VQ NMI Polarization 
IA 
C 
C’ 
Key3 
X” 
YIA’ Ym’ Pm’ 
Key2 
Wp’ 
