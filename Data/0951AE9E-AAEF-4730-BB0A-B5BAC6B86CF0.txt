spanning tree problem, respectively. For single-fault situations, the worst-case stabilization times
of these three algorithms are Θ(1) moves, Θ(∆) moves and Θ(∆2) moves, respectively, where ∆
is the maximum node degree in the system. In [10, 11], Ghosh et al. took a general approach
and acquired a transformer that can transform any nonreactive self-stabilizing algorithm into
a nonreactive fault-containing self-stabilizing algorithm. The result of this attempt was not
completely satisfactory because for single-fault situations, the worst-case stabilization time of
any transformed algorithm is Ω(n2), where n is the number of nodes in the system. Recently,
Lin and Huang [21] proposed a fault-containing self-stabilizing algorithm for finding a maximal
independent set, and Huang [15] proposed a fault-containing self-stabilizing algorithm for the
shortest path problem. For both algorithms, the worst-case stabilization times for single-fault
situations are Θ(∆) moves.
In [17], which is the preliminary conference version of this report, we modified the self-
stabilizing center-finding algorithm in Karaata et al. [20] and obtained a fault-containing self-
stabilizing algorithm for the same problem. In the development process, we investigated the
behavior of the center-finding algorithm in [20] in single-fault situations, and discovered three
conditions (called C1(i), C2(i) and C3(i) here, for brevity) such that in any single-fault situation,
an internal node i is the faulty node if and only if it satisfies C1(i), C2(i) or C3(i). We then
replaced the rule G(i) → A(i) for internal nodes in [20] by three rules G(i) ∧ C1(i) → A(i),
G(i) ∧ C2(i) → A(i) and G(i) ∧ C3(i) → A(i). (Here, for notational convenience, we use
G(i) → A(i) to denote the unique rule for internal nodes in [20].) By so doing, any non-faulty
node is prohibited from executing A(i) even if it satisfies G(i), and, as a consequence, the purpose
of fault-containment can be achieved. Since each of C1(i), C2(i) and C3(i) involves variables of
2-hop neighbors of i, and since, being in a distributed system, i can only access the data of its
direct neighbors, auxiliary variables q (question) and a1, a2 (answers) were used to help collect
information about 2-hop neighbors for i. As a matter of fact, in [17], an interrogative rule and an
answering rule (both involving q, a1 and a2) were added into the algorithm so that any internal
node i that satisfies G(i) can ask its neighbors about information regarding its 2-hop neighbors
by executing the interrogative rule, and the neighbors of i can answer the question by executing
the answering rule. Because in any single-fault situation, there could be at most ∆+1 nodes (i.e.,
the faulty node and possibly some of its neighbors) that satisfy G(i), the worst-case stabilization
time for single-fault situations, of the algorithm in [17], ended up with O(min(∆2, n)) moves.
In this report, we shall improve upon the results in [17]. In order to reduce the worst-case
stabilization time for single-fault situations, we come up with a condition G′(i) that involves
only the variables of node i and its neighbors. It can be shown that in any single-fault situation,
only the faulty node and at most two of its neighbors can satisfy both conditions G(i) and
¬G′(i). By modifying the interrogative rule so that only those internal nodes i that satisfy both
G(i) and ¬G′(i) can execute the modified interrogative rule, the worst-case stabilization time
for single-fault situations, of the proposed algorithm in this report, is reduced to O(∆) moves.
Some related works are briefly described as follows: Antonoiu and Srimani introduced a
self-stabilizing algorithm for finding a center of a tree in [1]. Karaata et al. presented a self-
stabilizing algorithm for finding center(s) of trees in [20]. (The journal version of the same result
was later published in Bruell et al. [2].) Blair and Manne [4] proposed a self-stabilizing generic
rooting algorithm for trees, which can instantiate a self-stabilizing center-finding algorithm for
trees. For single-fault situations, the worst-case stabilization times of these three algorithms are
Ω(n2), Ω(n2) and Ω(n), respectively. Based on the center-finding algorithm in [2, 20], Huang et
al. [18] proposed a self-stabilizing algorithm which finds a 2-center of a tree. All of the above
four papers assume the central demon model. Also based on the center-finding algorithm in
2
Legitimate states are defined to be all those global states in which the following condition holds:
For every leaf node i, h.i = 0, and for every internal node i, h.i = maxN−h (i) + 1.
It can be shown that there is actually a unique legitimate state for Algorithm 1, and the system
reaches the legitimate state if and only if no node in the system is privileged. It can also be
shown that whenever the system is in the legitimate state, the following four properties hold:
Lemma 1 If the system has a unique center i, then ∀x ∈ N(i), h.x < h.i.
Lemma 2 If the system has two centers i and j, then h.i = h.j, ∀x ∈ N(i)−{j}, h.x < h.i and
∀y ∈ N(j)− {i}, h.y < h.j.
Lemma 3 If i is an internal node which is not a center, then ∃!j ∈ N(i) s.t. h.j > h.i and
∀x ∈ N(i)− {j}, h.x < h.i.
Lemma 4 If i is a leaf node and j is the unique neighbor of i, then h.j > h.i.
It follows from these four lemmas that whenever the system T is in the legitimate state, a
center of T is a node whose h-value is greater than or equal to the h-values of all its neighbors.
As mentioned previously in the introduction, the worst-case stabilization time for single-fault
situations, of Algorithm 1, is Ω(n2).
2.2 Our fault-containing algorithm
In this subsection we will present a fault-containing self-stabilizing algorithm for the center-
finding problem. In order for the reader to follow the idea behind this algorithm, we demonstrate
the design process. First, we introduce the following modified version for Algorithm 1. For ease
of presentation, we use G(i) to denote the predicate h.i 6= maxN−h (i)+1 and A(i) to denote the
action h.i := maxN−h (i) + 1.
Algorithm 2
[For each leaf node i]
R1 : h.i 6= 0→ h.i := 0
R2 : h.i = 0 ∧ p.i = ⊥ → p.i := j, where j is the unique neighbor of i
[For each internal node i]
R3 : G(i)→ A(i)
R4 : ¬G(i) ∧ (∀j ∈ N(i), h.j ≤ h.i) ∧ p.i 6= ⊥ → p.i := ⊥
R5 : ¬G(i) ∧ (∃!j ∈ N(i) s.t. h.j > h.i) ∧ p.i 6= j → p.i := j
Note that in this algorithm, p.i takes values in N(i) ∪ {⊥}. Legitimate states for Algorithm 2
are defined to be all those global states in which the following condition holds:
For every leaf node i, (h.i = 0 ∧ p.i = j, where j is the unique neighbor of i), and
for every internal node i, {¬G(i) ∧ [[(∀j ∈ N(i), h.j ≤ h.i) ∧ p.i = ⊥]∨
[(∃!j ∈ N(i) s.t. h.j > h.i) ∧ p.i = j]]}
One can easily deduce that there is actually a unique legitimate state for Algorithm 2, and the
system is in that legitimate state if and only if no node in the system is privileged. The following
two lemmas can also be easily deduced.
4
Proof. By Lemmas 1, 2 and 3, there is at most one neighbor x of u such that h.x ≥ h.u at
t−0 , and it is obvious that there is at most one neighbor y of u such that p.u = y at t
+
0 . Thus,
to prove this lemma, it suffices to show that aside from these two possible neighbors of u, any
other internal neighbor i of u cannot satisfy both G(i) and ¬G′(i) at t+0 . So we assume G(i)
at t+0 and will show G
′(i) at t+0 . Since x is the only possible neighbor of u such that h.x ≥ h.u
at t−0 , we have h.i < h.u at t
−
0 . By Lemma 4, p.i = u at t0, and, since ¬G(i) at t
−
0 , we have
maxN−h (i) = h.i − 1 < h.i < h.u at t
−
0 . Hence max
j∈N(i)−{u}
h.j = maxN−h (i) at t
−
0 . Suppose, after
the change of h.u, h.u ≥ max
j∈N(i)−{u}
h.j at t+0 . Then
maxN−h (i) at t
+
0 = max
j∈N(i)−{u}
h.j at t+0
= max
j∈N(i)−{u}
h.j at t−0
= maxN−h (i) at t
−
0 .
Thus,
h.i at t+0 = h.i at t
−
0
= maxN−h (i) + 1 at t
−
0
= maxN−h (i) + 1 at t
+
0 ,
that is, ¬G(i) at t+0 , which contradicts the assumption that G(i) at t
+
0 . Therefore h.u <
max
j∈N(i)−{u}
h.j at t+0 , and thus h.u < max
j∈N(i)−{u}
h.j = maxNh(i) at t
+
0 . On the other hand,
maxNh(i) at t
+
0 = max
j∈N(i)−{u}
h.j at t+0
= max
j∈N(i)−{u}
h.j at t−0
= maxN−h (i) at t
−
0
= h.i− 1 at t−0
= h.i− 1 at t+0 .
In the above, it has been shown that p.i = u, p.u 6= i and h.u < maxNh(i) = h.i− 1 at t
+
0 , i.e.,
G′(i) at t+0 . Thus the lemma is proved.
With the help of the above two lemmas, in any non-trivial single-fault situation, we only
need to distinguish the faulty node u from at most two non-faulty neighbors of u that also
satisfy G(i) ∧ ¬G′(i). This crucial observation will help us acquire an even more efficient fault-
containing self-stabilizing algorithm for the center-finding problem. In the following classification
of G(i)∧¬G′(i) as well as in the rest of the report, L denotes the set of all leaf nodes, I denotes
the set of all internal nodes, L(i) = N(i) ∩ L, and I(i) = N(i) ∩ I.
Classification
1. G(i) ∧ ¬G′(i) ∧ ∃j ∈ L(i) s.t. h.j 6= 0 (This case will be referred to as Case 1 in the rest
of the report.)
2. G(i) ∧ ¬G′(i) ∧ ∀x ∈ L(i), h.x = 0
2.1. ∃j, k ∈ I(i) s.t. [j 6= k ∧G(j) ∧G(k)] (Case 2)
2.2. ∀x ∈ I(i),¬G(x) (Case 3)
2.3. ∃!j ∈ I(i) s.t. G(j)
2.3.1. h.i < h.j
2.3.1.1. ∃v ∈ N(j)− {i} s.t. h.v ≥ h.i (Case 4)
2.3.1.2. ∀x ∈ N(j)− {i}, h.x < h.i (Case 5)
2.3.2. h.i > h.j
6
R3 : a1.i 6= 1 ∧ q.j = 1, where j is the unique neighbor of i → a1.i := 1
R4 : a1.i 6= 0 ∧ q.j = 0, where j is the unique neighbor of i → a1.i := 0
R5 : q.i = 1→ q.i := 0
R6 : a2.i = 1→ a2.i := 0
[For each internal node i ]
R7 : G(i) ∧ ¬G′(i) ∧ ∀x ∈ N(i), a1.x = a2.x = 0 ∧ q.i = 0→ q.i := 1
R8 : [∃j ∈ N(i) s.t. q.j = 1] ∧ ¬G(i) ∧ a1.i 6= 2→ a1.i := 2
R9 : [∃j ∈ N(i) s.t. q.j = 1] ∧G(i) ∧ a1.i 6= 3→ a1.i := 3
R10 : [∃!j ∈ N(i) s.t. q.j = 1] ∧ ∃k ∈ N(i)− {j} s.t. h.k ≥ h.j ∧ a2.i = 0→ a2.i := 1
R11 : G(i) ∧ ¬G′(i) ∧ q.i = 1 ∧ ∀x ∈ N(i), [a1.x = 1→ h.x = 0]∧
∃j, k ∈ N(i) s.t. [j 6= k ∧ a1.j = a1.k = 3]→ A(i)
R12 : G(i) ∧ ¬G′(i) ∧ q.i = 1 ∧ ∀x ∈ N(i), [a1.x = 1→ h.x = 0]∧
∀x ∈ N(i), [a1.x = 1 ∨ a1.x = 2]→ A(i)
R13 : G(i) ∧ ¬G′(i) ∧ q.i = 1 ∧ ∀x ∈ N(i), [a1.x = 1→ h.x = 0]∧
[∃!j ∈ N(i) s.t. a1.j = 3] ∧ h.i < h.j ∧ a2.j = 1→ A(i)
R14 : G(i) ∧ ¬G′(i) ∧ q.i = 1 ∧ ∀x ∈ N(i), [a1.x = 1→ h.x = 0]∧
[∃!j ∈ N(i) s.t. a1.j = 3] ∧ h.i > h.j ∧ ∀x ∈ N(i)− {j}, h.x < h.j → A(i)
R15 : G(i) ∧ ¬G′(i) ∧ q.i = 1 ∧ ∀x ∈ N(i), [a1.x = 1→ h.x = 0]∧
[∃!j ∈ N(i) s.t. a1.j = 3]∧ h.i = h.j ∧ [a2.j = 1 ∨ ∀x ∈ N(i)− {j}, h.x < h.j]→ A(i)
R16 : ¬G(i) ∧ q.i = 1→ q.i := 0
R17 : ∀x ∈ N(i), q.x = 0 ∧ a1.i 6= 0→ a1.i := 0
R18 : ¬[(∃!j ∈ N(i) s.t. q.j = 1) ∧ ∃k ∈ N(i)− {j} s.t. h.k ≥ h.j] ∧ a2.i = 1→ a2.i := 0
R19 : ¬G(i) ∧ ∀x ∈ N(i), h.x ≤ h.i ∧ p.i 6= ⊥ → p.i = ⊥
R20 : ¬G(i) ∧ [∃!j ∈ N(i) s.t. h.j > h.i] ∧ p.i 6= j → p.i = j
R21 : G(i) ∧G′(i) ∧ q.i = 1→ q.i := 0
R22 : G(i) ∧G′(i) with p.i = j ∧ ∃k ∈ N(i)− {j} s.t. q.k = 1→ A(i)
R23 : G(i) ∧ ∃j, k ∈ N(i) s.t. [j 6= k ∧ q.j = q.k = 1]→ A(i)
R24 : G(i) ∧ ¬G′(i) ∧ ∃j, k ∈ N(i) s.t. [j 6= k ∧ q.j = 1 ∧ a1.k 6= 0] ∧ q.i = 0→ q.i := 1
Note that in the above algorithm, the variable q takes values in the set {0, 1}, a1 takes values
in the set {0, 1, 2, 3}, and a2 takes values in the set {0, 1}. Legitimate states are all those global
states in which the following condition holds:
∀i ∈ V, [q.i = 0 ∧ a1.i = 0 ∧ a2.i = 0]∧
∀i ∈ L, [h.i = 0 ∧ p.i = j, where j is the unique neighbor of i]∧
∀i ∈ I, {¬G(i) ∧ [[(∀j ∈ N(i), h.j ≤ h.i) ∧ p.i = ⊥] ∨ [(∃!j ∈ N(i) s.t. h.j > h.i) ∧ p.i = j]]}
It is obvious that there is a unique legitimate state and when the system is in that legitimate
state, no nodes are privileged.
To help readers comprehend the relationship between Algorithm 3 and Prototype 1, as an
example, we explain how rules R3, R7, R8 and R12 in Algorithm 3 are derived from rule R4 in
Prototype 1. When an internal node i satisfies the guard condition for R4 in Prototype 1 (i.e.,
G(i) ∧ ¬G′(i) ∧ ∀x ∈ L(i), h.x = 0 ∧ ∀x ∈ I(i),¬G(x)), according to R7 of Algorithm 3, it set
q.i = 1 to ask. Then according to R3 of Algorithm 3, every x ∈ L(i) set a1.x = 1 to answer
i that it is a leaf node, and according to R8 of Algorithm 3, every x ∈ I(i) set a1.x = 2 to
answer i that it is an internal node and satisfies ¬G(x). Then the guard condition of R12 holds,
and hence i can make a move to change its h-value. Thus rule R4 of Prototype 1 is faithfully
implemented. Note that in rule R7 of Algorithm 3, condition ∀x ∈ N(i), [a1.x = a2.x = 0] is
8
Proof. One can argue in the same fashion as in the proof of Theorem 2 in [15] to get that
the system will eventually reach a state in which no node is privileged. Then by the no-deadlock
property just obtained above in Theorem 1, one can conclude that the state reached is the
legitimate state.
In the following two lemmas, we assume that the system starts in the legitimate state and
incurs a single fault at a certain time instant t0 with the faulty node being u. As defined
previously, if h.u changes at t+0 , then the single fault at t0 is called a non-trivial single fault,
otherwise, it is called a trivial single fault.
Lemma 10 Suppose the system incurs a trivial single fault at t0. Then from starting with the
single-fault state till reaching the legitimate state, the system never changes any h-value.
Proof. Since ∀i ∈ L, h.i = 0 ∧ ∀i ∈ I,¬G(i) at t+0 , the system never executes R1, R11,
R12, R13, R14, R15, R22 or R23 in (t0,∞). Therefore the system never changes the h-value in
(t0,∞).
Lemma 11 Suppose the system incurs a nontrivial single fault at t0. Then from starting with
the single-fault state till reaching the legitimate state, the system changes the h-value exactly
once, i.e., only the faulty node changes its h-value back to normal.
Proof. By the self-stabilization property of the system (i.e., Theorem 2), the system must
change the h-value in (t0,∞). Let t1 be the first instant at which the system changes the h-value.
For every i ∈ L−{u}, obviously h.i = 0 at t+0 and thus at t
−
1 . Thus, for every i ∈ L−{u}, i
cannot execute R1 at t1. On the other hand, for every i ∈ I − N(u) ∪ {u}, obviously ¬G(i) at
t+0 and thus at t
−
1 . Thus, for every i ∈ I − (I(u) ∪ {u}), i cannot execute R11, R12, R13, R14,
R15, R22 or R23 at t1. Moreover, we can prove that for every i ∈ I(u), i cannot execute R11,
R12, R13, R14, R15, R22 or R23 at t1.
Therefore, the faulty node u must execute R1,R11, R12, R13, R14, R15, R22 or R23 at t1.
Then for every x ∈ L, h.x = 0 and for every x ∈ I,¬G(x) at t+1 . So the lemma is proved.
Lemmas 10 and 11 combined give us the following theorem.
Theorem 3 (Fault-containment) Starting with any single-fault state, the system changes the
h-value at most once before it reaches the legitimate state.
4 Stabilization times for single-fault situations
We now compute the worst-case stabilization time for single-fault situations for the proposed
algorithm.
Lemma 12 For trivial single-fault situations, the worst-case stabilization time of the algorithm
is O(△), where △ is the maximum node degree.
Proof. Let the system incur a trivial single fault at t0 and let u be the faulty node.
(1) For the number of moves by R1, R11, R12, R13, R14, R15, R22 and R23:
From Lemma 10, the system never changes the h-value in (t0,∞). Hence the system never
executes R1, R11, R12, R13, R14, R15, R22 or R23 in (t0,∞). It follows that ∀i ∈ L, h.i =
0 ∧ ∀i ∈ I,¬G(i) in (t0,∞).
(2) For the number of moves by R2, R19 and R20:
10
(4.3.1.3) Since a2.i = 0 at t
+
0 and no rules can change a2.i from 0 to 1, we see that
a2.i = 0 in (t1,∞). Hence i never executes R6 in (t1,∞).
(4.3.2) Consider i ∈ I(u).
(4.3.2.1) If q.u = 0 in (t0,∞), then ∀j ∈ N(i), q.j = 0 in (t0,∞) in view of (3.1) and
(3.2) above. Hence i never executes R8, R9 or R10 in (t0,∞). Since a1.i = a2.i = 0 at t
−
0 and i
is not the faulty node, we have a1.i = a2.i = 0 at t
+
0 . It follows that a1.i = a2.i = 0 in (t0,∞).
Thus i never executes R17 or R18 in (t0,∞).
(4.3.2.2) If ∃t1 ∈ (t0,∞) s.t. q.u = 1 in (t0, t1) and q.u = 0 in (t1,∞), then ∃!j ∈
N(i), q.j = 1 in (t0, t1) and ∀j ∈ N(i), q.j = 0 in (t1,∞) in view of (3.1) and (3.2) above. Hence
i never executes R17 in (t0, t1) and i never executes R8 in (t1,∞). From (1) above, ¬G(i) in
(t0,∞). Thus i never executes R9 in (t0,∞). Thus i executes R8 at most once in (t0, t1) and i
executes R17 at most once in (t1,∞). If ∃k ∈ N(i) − {j} s.t. h.k ≥ h.j in (t0, t1), then i never
executes R18 in (t0, t1), and hence i executes R10 at most once in (t0, t1). If ∀k ∈ N(i)−{j} s.t.
h.k < h.j in (t0, t1), then i never executes R10 in (t0, t1), and hence i executes R18 at most once
in (t0, t1). Since ∀j ∈ N(i), q.j = 0 in (t1,∞), i never executes R10 in (t1,∞). Thus i executes
R18 at most once in (t1,∞).
From all the above in (4), we see that the system executes R3, R4, R6, R8, R10, R17 or R18 at
most 4△+ 2 times in (t0,∞).
From all the above, the system makes at most 0+1+1+(4△+2) = 4△+4 moves in (t0,∞).
Therefore the lemma is proved.
Lemma 13 For non-trivial single-fault situations, the worst-case stabilization time of the algo-
rithm is O(△), where △ is the maximum node degree.
Proof. Let the system incur a non-trivial single fault at t0. We can prove that
(1) the system executes R1, R11, R12, R13, R14, R15, R22 or R23 exactly once in (t0,∞),
(2) the system executes R2, R19 or R20 at most 2△+ 1 times in (t0,∞),
(3) the system executes R5, R7, R16, R21 or R24 at most 7 times in (t0,∞), and
(4) the system executes R3, R4, R6, R8, R9, R10, R17 or R18 at most 33△ + 4 times in
(t0,∞).
Therefore, the system makes at most 1 + (2△ + 1) + 7 + (33△ + 4) = 35△ + 13 moves in
(t0,∞), and the lemma is proved.
Lemmas 12 and 13 combined give us the following main result.
Theorem 4 For single-fault situations, the worst-case stabilization time of the algorithm is
O(△), where △ is the maximum node degree.
5 Concluding remarks
In the above, we have proposed a fault-containing self-stabilizing algorithm for the center-finding
problem for tree networks, which is a sophisticated modification based on the center-finding
algorithm in [2, 20]. This fault-containing algorithm improves upon the results of its preliminary
version in [17] with respect to the worst-case stabilization time for single-fault situations.
The crucial step that enables this version to have a further-reduced worst-case stabilization
time for single-fault situations is due to the discovery of Lemmas 7 and 8, which provide us
with a “filter” (i.e., the condition G(i) ∧ ¬G′(i)) to prune away most of those non-faulty nodes
12
