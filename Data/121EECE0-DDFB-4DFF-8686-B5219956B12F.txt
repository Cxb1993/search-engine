二、緣由與目的
由於多部機器的加工環境是相當實際的生產情況，所以在排程文獻上多有探討。常見
的多部機器的生產型態有：流程型工廠(flowshop)、平行機(parallel machines)與混合流程型
工廠(hybrid flowshop)。其中混合流程型工廠是相當實務且常見的生產環境型態，我們可在
彈性製造系統、紡織工業、玻璃工業、半導體工業、紡織工業、鋼鐵工業…等，甚至計算
機的計算應用，都可以看到相關的情況 (Soewandi 與 Elmaghraby，2003)。而且混合流程
型工廠為同時具有流程型工廠與平行機的特性，是一種更廣義的生產型態。
本研究討探討兩階段混合流程型工廠的總完成時間問題，其中一個階段有 m 部等比率
平行機(uniform parallel machines)可進行加工；另一個階段僅有一部機器。所謂等比率平行
機，是指這些機器具備相同的功能，但有著不同的加工速率。舉例來說，若工件需要 p 單
位處理時間，經過加工速率 v的機器，則需花費 /p v 單位時間完成加工。而每個工件 i 的加
工順序為，先在第一階段加工 1,ip 單位時間，才到第二階段加工 2,ip 單位時間。本研究探討
的準則為總完成時間(makespan)最小化，也就是最後一個工件離開的時間，這是常用來評估
機器利用率的重要指標。以三欄式排程符號表示法(Soewandi 與 Elmaghraby，2003)來描述，
本研究所討論即是 max2( ,1)F Qm C 的問題。
三、文獻回顧
雖然這是一個相當實務的問題，但也因為問題本身的複雜（相較單機、平行機、流程
型工廠等問題），所以討論相關議題的文獻較少，並多以啟發式演算法來求解。當兩階段都
僅有一部機器時，Johnson (1954) 提出此問題的最佳解演算法。在雙階段混合流程型工廠總
完成時間的文獻中，大多數會引用此最佳解演算法。在文獻中，討論同一階段中的多部機
器，大多是指相同平行機的情況。所以我們先回顧第一階段單機與第二階段多機的情況。
針對 max2(1, )F Pm C 問題，Sriskandarajah 與 Sethi (1989)曾討論表列演算法的最差情
況，當在表列開始的工件具有較大 1,ip (第一階段的處理時間)或表列末端的工件具有較大的
2,ip (第二階段的處理時間)時，都會使得表列演算法的結果不理想。Gupta 與 Tunc (1991) 所
發展的啟發式演算法，不僅求取總完成時間的最小化，也考量到儘量減少第二階段中的機
器數目。他們先是運用 Johnson 演算法決定工件次序，再依序分派至加工機器上。稍後，
他們進一步考慮工件有設置時間(setup time)與移除時間(remove time)的情況(Gupta 與
Tunc，1994)，並發展出四個啟發式演算法。他們也討論到當第二階段的機器數目大於等於
工件數時，可發展出一個多項次複雜度的最佳解演算法。Hoogeveen 等人(1996) 討論工件
加工時，允許有插件的情況發生，也證明這問題還是個 NP-hard 問題。而 Li (1997) 討論到
工件有主要與次要設置時間的考量，並提出向前分配方法(forward allocation approach)與反
推分配方法(backward allocation approach)，他們發現在在批量可分割的情況下，多數的例子
中反推分配方法是優於向前分配方法。
另一方面，針對 max2( ,1)F Pm C 問題討論的文獻如下，Arthanary 與 Ramaswamy (1971)
及 Mittal 與 Nagga (1973) 曾分別討論這問題的分枝界限(Branch and Bound) 演算法。Gupta
(1988) 證明這是一個 NP-Hard 問題，也發展一個有效率的啟發式演算法，不僅求取總完成
時間的最小化，也考量到減少第一階段中的機器數目。他先運用 Johnson 演算法安排工件
次序，並將具有 1,ip 最小值的工件，移至工件次序的第一個位置。在不增加第二階段機器閒
置時間下，安排至第一階段的機器上。Chen (1995) 針對在階段中有單機情況的問題(包含
max2( ,1)F Pm C 與 max2(1, )F Pm C )，將發展的啟發式演算法分成三大類，並進行最差情況
分析，最後提出各分類演算法的求解結果與最佳解的比值範圍。Gupta 等人(1997)證明出
1 2 max2( , )F Pm Pm C 與 2 1 max2( , )F Pm Pm C 問 題 是 對 等 的 ， 所 以 max2(1, )F Pm C 與
max2( ,1)F Pm C 兩問題也是對等的。所以，他們延伸 Gupta (1988)及 Gupta 與 Tunc (1991)
的研究，針對 max2( ,1)F Pm C 問題，新增加以 Johnson 演算法處理 1, /ip m 與 2,ip 來安排工件
時間的最小值，也可作為另一個下界限。
2 1, 2 2,1
/ min { }
n
j j jj
LB p v p 
所以，下界限為兩者的最大值 1 2max{ , }LB LB LB 。
相關演算法
在兩階段的流程工廠總完成時間最小化的問題，有ㄧ最佳解演算法，即是 Johnson 演
算法。在文獻中的討論，也多以 Johnson 演算法來發展相關演算法。所以，我們先介紹這
Johnson 演算法的步驟：先將工件依照第一與第二階段處理時間大小來區分，若第一階段處
理時間小於第二階段，歸為第一類；反之，歸為第二類。將第一類工件按照第一階段處理
時間遞增次序安排；接下來安排第二類工件，則是按照第二階段處理時間遞減次序安排。
而本研究依照 Johnson 演算法的精神提出兩個相關演算法，一是演算法 A，另一是演算法 B。
演算法 A
將工件的第一階段處理時間( 1, jp)修改為，原處理時間除以該階段機器加工速率的總
和，即是 1, 1, 1 2/( )j jp p v v  。接著，將此問題視為工件 j 以 1, jp與 2, jp 的兩階段流程工廠，
再按照 Johnson 定理，來決定工件次序。將工件的依序派入第一階段系統中，使得工件的
完工時間最小，也就是愈快加工愈好。求解步驟介紹如下：
步驟 1:重新計算所有工件的 1, jp。
步驟 2:依照 Johnson 定理，依照 1, jp與 2, jp 決定安排工件的次序。
步驟 3:工件依序排入第一階段的機器中，使得其完工時間最小。
步驟 4:工件再排入第二階段中完成加工，直到所有工件分派完畢。
演算法 B
另一解題概念為直接先將問題視為 1,2M (第一階段較大的加工速率的機器)與 2M (第二
階段機器)的流程工廠的問題。所以，將第一階段的處理時間修改為在 1,2M 上的處理時間，
即是 1, 1, 2/j jp p v 。在計算上，當 2M 發生閒置時間 (idle time) (即 1, 2, 1j jC C  ) 時，再將該
工件移往第一階段另一部機器( 1,1M )，來檢討閒置時間是否能得到改善，以縮短總完成時
間。求解步驟介紹如下：
步驟 1:重新計算所有工件的 1, jp。
步驟 2:依照 Johnson 定理，依照 1, jp與 2, jp 決定安排工件的次序。
步驟 3:當 1, 2, 1j jC C  時，工件 j 分派至 1,2M ；否則，重新計算工件 j 分派至 1,1M 的新完
工時間 1, jC。
步驟 4:若 1, 1,j jC C ，則設定 1, 1,j jC C 並將工件 j 分派至 1,1M ，否則工件 j 分派至 1,2M 。
步驟 5:工件再排入第二階段中完成加工，直到所有工件分派完畢。
演算法 C
當一開始(或沒有合乎條件的工件時，R)，我們選擇尚未分派具有 1, jp 最小的工件，
放在第一階段中的機器中。而所謂合乎條件的工件是將工件放入第一階段機器後，並不會
使得第二階段機器上發生閒置的情況。若有數個合乎條件的工件可供選擇時，我們選擇 2, jp
最大的工件來分派。求解步驟介紹如下：
步驟 0:設定集合R， 2, 1 0jC  。
步驟 1:若R，則選擇未分派工件中 1, jp 最小的工件；否則選擇集合 R 中 2, jp 最大的
工件。
即第一階段處理時間( 1, jp )是抽取自一 (1, ( 2) )v b  均勻分布，而第二階段的處理時間( 2, jp )
仍然抽取自一 (1, )b 均勻分布，其中 b 為 50、250、1000 的整數。例如：當 3v ， 50b 時，
1, jp 抽取自(1, 250)的均勻分布，而 2, jp 抽取自(1, 50)的均勻分布。
表二 數值計算第二部分結果
2, jp v Alg.A Alg.B Alg.C
SPT
( 1, jp )
LPT
( 2, jp )
符合 LB 比例 與 LB 誤差
(1,50) 3 42.00% 46.84% 24.32% 13.79% 27.89% 14.84% 17.69%
6 52.63% 55.16% 35.89% 16.95% 26.42% 25.05% 15.27%
9 56.42% 58.95% 45.05% 23.26% 24.53% 31.26% 12.91%
(1,250) 3 45.16% 49.37% 27.26% 13.37% 27.05% 17.68% 19.14%
6 51.89% 54.95% 34.53% 18.42% 28.63% 24.32% 15.91%
9 55.37% 54.84% 38.53% 19.05% 27.58% 27.79% 13.47%
(1,1000) 3 50.21% 51.79% 24.63% 16.32% 23.79% 16.63% 18.75%
6 52.11% 53.58% 34.63% 16.32% 25.58% 22.95% 15.20%
9 55.89% 57.26% 41.37% 22.42% 31.05% 29.68% 13.53%
以表二來看，由於 1, jp 的範圍加大，使得 2M 發生閒置的機會增大，如此最佳解就會大
於下界限值，所以計算結果也就更不易與下界限值相吻合。在第一部分計算，演算法 B 的
結果幾乎會成為最小的結果。在第二部份的計算表現，也是優於其他演算方式，但詳細檢
查其結果，以與最小值相差的總和(結果與各題最小值的差値)，則會較演算法 A 為大。
六、參考文獻
Arthanari, T.S. and Ramamurthy, K.G. (1971) An extension of two machines sequencing problem.
Opsearch, 8, 10–22.
Chen, B. (1995) Analysis of classes of heuristics for scheduling a two-stage flow shop with
parallel machines at one stage. Journal of the Operational Research Society, 46, 234–244.
Gupat, J.N.D. (1988) Two-stage, hybrid flowshop scheduling problem. Journal of the
Operational Research Society, 38, 359–364.
Gupta, J.N.D., Hariri, A.M.A. and Potts, C.N. (1997) Scheduling a two-stage hybrid flow shop
with parallel machines at the first stage. Annals of Operations Research, 69, 171–191.
Gupta, J.N.D. and Tunc, E.A. (1991) Schedules for a two-stage hybrid ﬂowshop with paralel 
machines at the second stage. International Journal of Production Research, 29, 1489–1502.
Gupta, J.N.D. and Tunc, E.A. (1994) Scheduling a two-stage hybrid flowshop with separable
setup and removal times, European Journal of Operational Research, 77, 415–428.
Hoogeveen, J.A., Lenstra, J.K. and Veltman, B. (1996) Preemptive scheduling in a two-stage
multiprocessor ﬂow shop is NP-hard. European Journal of Operational Research, 89,
172–175.
Huang, W. and Li, S. (1998) A two-stage hybrid ﬂowshop with uniform machines and setup times. 
Mathematical and Computer Modeling, 27, 27–45.
Johnson, S.M. (1954) Optimal two and three-stage production schedules with setup time included.
Naval Research Logistics Quarterly, 1, 61–68.
Li, S. (1997) A hybrid two-stage flowshop with part family, batch production, major and minor
setups. European Journal of Operational Research, 102, 142–156.
