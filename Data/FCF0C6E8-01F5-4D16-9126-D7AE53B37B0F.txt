different length of patterns is fixed in 
fixed FT-pattern mining. A new graph 
structure, FT-association graph, is 
proposed to help us filtering out 
impossible candidates with high 
efficiency. The experimental results show 
that the proposed algorithms of our 
approach are highly efficient for mining 
both proportional and fixed FT-patterns. 
Keywords 
Data mining, Item support, FT 
support, Fault-tolerant frequent pattern, 
FT-association graph. 
緣由與目的 
隨著電腦技術之蓬勃發展，資料
庫技術的成熟與普及，在自動化資料
收集工具的幫助下，大量的資料數位
化後存在資料庫中，產生了數量巨大
的資料，也使得我們的世界進入電子
化的時代。在這個資料(data)爆炸的年
代，如何從廣大的資料中找出有用的
資訊(information)以及知識(knowledge)
即成為一個十分重要的議題。而能快
速以及有效的找出真正”有用””有趣”
的資訊並善加利用，成為在這個電子
化世代中致勝的關鍵。 
本計劃的研究方向定位於在大型
資料庫中探勘高頻容錯式樣。相較於
傳統絕對符合的高頻式樣，高頻容錯
式樣能找出更一般性、更有趣且更有
用的知識。 
研究方法 
首先，我們針對容錯高頻式樣作
出定義如下： 
Definition 1 (Proportional fault 
tolerant frequent pattern) 
Let P be a pattern. A transaction T 
= (tid, X) is said to FT-contain pattern P 
with respect to a given FT parameter δ 
(0.5 < δ ≤ 1) iff there exists P’ ⊆ P such 
that P’ ⊆ X and 
'P
P
δ≥ . The number 
of transactions in a database 
FT-containing pattern P is called the 
FT-support of P, denoted as supFT (P). 
Let B(P) be the set of transactions 
FT-containing pattern P. Given a 
frequent item-support threshold 
min_supitem
 
and a FT-support threshold 
min_supFT, a pattern P is called a 
frequent FT-pattern iff 
1. supFT (P) ≥ min_supFT; and 
2. for each item p∈P, supitemB(P)(p) ≥ 
min_supitem, where supitemB(P)(p) is 
the number of transactions in B(P) 
containing item p. 
根據我們的定義，一個高頻式樣
能夠容許的錯誤項目個數會隨著式樣
的 長 度 不 同 而 變 化 。 另 外 ， 透 過
min_supitem的限制能夠解決在之前的
研究中會產生稀疏式樣的問題。經由
定義，我們觀察出式樣長度及容錯個
數 (#fault(|X|)= ( )1 Pδ⎢ − × ⎥⎣ ⎦ )的關係如
下圖所示： 
Algorithm 1 (FT-BottomUp algorithm)  
Input: Transaction database DB  
     Frequent item-support threshold: min_supitem
     Frequent FT support threshold: min_supFT
     FT parameter: δ 
Output: FT patterns  
/* Fi,j
 
is the set of FT patterns with length i and containing j faults */  
Method:  
1. Scan DB to find the set of frequent 1-patterns, denoted as F1,0;  
  Let DB' = DB ∩ frequent 1-patterns;  
2. MaxPattern = min(length of longest transaction in DB'/δ, | F1,0|);  
  MaxFault = #fault(MaxPattern);  
3. for(int i = 2; i < MaxPattern; i++){  
j = #fault(i)  
generate Ci,j by Fi-1,j;  
/* Ci,j
 
are the candidate patterns for Fi,j
 
*/  
Fi,j
 
= FT_frequent(Ci,j, min_supFT, min_supitem);  
/* FT_frequent(Ci,j, min_supFT, min_supitem) returns the set  
  of patterns in Ci,j
 
that comply with the two support thresholds*/  
  }  
  output Fi,j;  
 
Algorithm 2 (FT-LevelWise algorithm)  
Input: Transaction database DB  
     Frequent item-support threshold: min_supitem
     Frequent FT support threshold: min_supFT
 
     FT parameter: δ  
Output: FT patterns  
Method:  
1. Scan DB to find the set of frequent 1-patterns, denoted as F1;  
Let DB' = DB ∩ frequent 1-patterns;  
2. MaxPattern = min(length of longest transaction in DB/δ, | F1|);  
MaxFault = #fault(MaxPattern);  
3. Construct MaxFault+1 groups: Gi, i = 0 to MaxFault;  
For each group Gi{  
headi: generate candidate by F1;  
Check whether candidates are frequent FT patterns;  
 其中每個節點代表一個資料項
目，節點會紀錄其代表的資料項目的
支持度。若項目x與項目y曾在同一交易
中出現過，就將它們以一個連結相
連，表示為exy。每個連結會紀錄兩個
端點所代表的資料項目出現在同一交
易 的 次 數 ， 表 示 為 wxy 。 我 們 利 用
FT-association graph及下列三個特性來
產生及修剪候選式樣： 
Lemma 3 If an item y is away from x 
for the distance greater than 2 in the 
FT-association graph, then a pattern P 
which contains both x and y can not be a 
frequent FT-pattern. 
兩個資料項目x, y在FT-association 
graph中的距離超過2，代表它們非但沒
有一起出現過，甚至沒有共同的鄰
居。所以在一個同時包含x, y的式樣P
中，因為 δ 必須大於0.5的限制之下，
x和x的鄰居與y和y的鄰居都必須在該
式樣P中過半，然而這兩個條件並無法
同時成立，故同時包含x, y的式樣不會
是一個容錯高頻式樣。 
Lemma 4 If P is a frequent FT-pattern, 
for each item x of P, there must exist 
1Pδ⎡ × ⎤ −⎢ ⎥  items which are neighbors 
of x in the FT-association graph in P. 
包含項目x的交易，只有在包含
Pδ⎡ × ⎤⎢ ⎥ 個式樣P也包含的項目時，才
能提供式樣P一個支持度。所以若式樣
P 是一個容錯高頻式樣，則必定有
1Pδ⎡ × ⎤ −⎢ ⎥ 個項目和x曾同時出現在同
一筆交易。 
Lemma 5 Given a pattern P, the upper 
bound of supFT(P), denoted as 
max_supFT(P), is equal to 
' , | '|
( ').
P P P P
max_sup P
δ∀ ⊆ = ×⎡ ⎤⎢ ⎥
∑ And if 
max_supFT(P) < min_supFT, then P can 
not be a frequent FT-pattern. 
在對資料集進行探勘之前，我們
必須先將資料集轉換為bitmap，這項作
業可以加速之後探勘的效能。下列
Table 2所示是將Table 1中的資料集轉
換後的bitmap： 
 
另 外 還 要 建 立 FT-association 
graph，並將支持度未達到 min_supitem 
的資料項目從bitmap及FT-association 
graph 中 移 除 。 接 著 演 算 法 會 利 用
將用來計算此候選式樣支持度的變數
supFT(P) 加 1 。 最 後 若 supFT(P) < 
min_supFT，表示候選式樣P的支持度不
足，不是一個容錯高頻式樣。否則，
演算法會繼續計算每一行的總和，若
有其中一行的和小於min_supitem，代表
該行所屬的資料項目在B(P)中的個數
不足，則候選式樣P也不會是一個容錯
高頻式樣。相反，若每一行的總和皆
大於min_supitem，則候選式樣P就是一
個容錯高頻式樣。 
以上介紹用來探勘比例式容錯高
頻式樣的方法，只要針對固定式容錯
高頻式樣的特性，經過些微的修改就
可以用來探勘固定式容錯高頻式樣。 
以下我們分別列出探勘比例式及
固定式容錯高頻式樣的演算法： 
Algorithm 3 (Proportional FT-pattern Mining, PFM) 
Input: Transaction database TDB 
  Frequent item-support threshold: min_supitem
  Frequent FT support threshold: min_supFT
  FT parameter: δ 
Output: frequent FT-patterns 
Method: 
1. Scan TDB to a. transform TDB to bitmap; 
              b. construct the FT-association graph; 
c. Find F1; 
2. Remove items not in F1 from the bitmap and FT-association graph; 
3. MinPattern = 1
1 δ
⎡ ⎤⎢ ⎥−⎢ ⎥ ; 
4. MaxPattern = min( /L δ⎢⎣ ⎥⎦ , |F1|);  
5. for (i = MinPattern; i ≤ MaxPattern; i++) { 
6.   if (#fault(i) = #fault(i-1)) 
7.     Generate Ci = { | ,  , ,  ( , )P P i x y P d x y= ∀ ∈ ≤ 2 , n(x), n(y) ≥ 1Pδ⎡ × ⎤ −⎢ ⎥ , 
max_supFT(P) ≥ min_supFT } from Fi-1; 
8.   else { 
9.     for each node x of FT-association graph { 
10.       Load columns which belong to x and all y where d(x, y) ≤ 2 from the bitmap; 
11.       Ci = Ci + { | ,  ,  ,  ( , )P x P P i y P d x y∈ = ∀ ∈ ≤ 2 ,  
n(x), n(y) ≥ 1Pδ⎡ × ⎤ −⎢ ⎥ , max_supFT(P) ≥ min_supFT }; 
12.     } 
13.   } 
14.   for each candidate P of Ci { 
15.     Extract bitmap(P); 
14.       else remove T; 
15.     } 
16.     if supFT(P) ≥ min_supFT 
17.       for each column of x of bitmap(P) { 
18.         supitemB(P)(x) = the number of 1s in the column of x; 
19.         if supitemB(P)(x) < min_supitem then discard P; 
20.       } 
21.     if P is not discarded, add P to Fi; 
22.   } 
23.   if (Fi is not empty) 
24.     Generate Ci+1 = { | ,  , ,  ( , )P P i x y P d x y= ∀ ∈ ≤ 2 , n(x), n(y) ≥ 1P δ− − ,  
max_supFT(P) ≥ min_supFT } from Fi; 
25.   i = i + 1; 
26. } while (Fi-1 or Ci is empty) 
 
在這項研究中，我們提出了一個
架構，可以同時解決探勘比例式及固
定式容錯高頻式樣的問題。相較於傳
統的研究，我們透過檢查一小部分的
bitmap來避免檢查候選式樣時掃瞄整
個資料庫，這也大幅提升了我們的效
能。 
研究成果  
本計劃的研究成果，我們於國際會議
及期刊的發表如下: 
1. Guanling Lee and Yuh-Tzu Lin, “A 
study on Proportional Fault-tolerant 
Data Mining”, In Proc. 2006 Int. 
Conf. Innovations in Information 
Technology, 2006, Dubai, Nov. 2006, 
pp. 1-5. 
2. Guanling Lee and Yuh-Tzu Lin, “An 
Efficient Algorithm for Proportional 
Fault-tolerant Data Mining”, 
submitted to INFORMATION 
SYSTEMS FRONTIERS Journal. 
3. Jhih-Jie Zeng, Guanling Lee and 
Chung-Chi Lee, “Mining 
Fault-tolerant Frequent Patterns 
Efficiently with Powerful Pruning”, 
In Proc. 2008 Int. Conf. ACM 
Symposium on Applied Computing, 
2008, Ceará, Brazil, March. 2008. 
表 Y04 
報告內容應包括下列各項： 
一、參加會議經過 
於 2006/11/19參加了早上的會議開幕典禮，並聽了兩場由開幕 keynote speakers Prof.Bill 
Thomas 以及 Prof. Peter Freeman 探討資訊技術的開幕演講，並於演講後參加一場由
Mohamed Baka (IT Advisor to the Chairman, ADWEA), Peter Freeman (Assistant Director of 
National Science Foundation), Bill Thomans (Executive Vice President, EDS), Hanns Windele 
(Vice President Europe, Mentor Graphics), Yervant Zorian (Vice President and Chief 
Scientist, Virage Logic; Vice President, IEEE Computer Society) 以及 Mitra Jay (Founding 
Professor of Business Enterprise and Innovation at the University of Essex)所主導之
discussion Panel “Technology Production in the Middle East: Barriers & Opportunities”覺得
獲益良多。於 2006/11/19下午參加了三個 session，分別探討 Wireless Sensor Networks, 
Information Systems以及Web Applications，了解各國學者在這些領域目前的研究議題以
及趨勢脈動。於 2006/11/20參加了早上 Software Applications以及 Invited VIP Session，
而在 invited Vip session中，資訊，溝通技術以及對世界可能造成的影響議題被廣泛的探
討，獲益良多。除此之外，於下午的會議中除了參加 Data  Mining, E-Business等 sessions
外 , 並於 data mining session 中報告了我們發表的 paper “A study on Proportional 
Fault-tolerant Data Mining”，並與與會學者有豐富的討論，而透過這樣的討論，更能了解
自己 work的優缺點。2006/11/21參加了 multimedia session外，還聽了一場由 Prof. Dr. 
Ahmad Jaffar以及 Prof. Mulhim Al-Doori所演講的” E-Business Walkthrough using an ERP 
portal”。並於下午參觀了 UAE university。 
 
二、與會心得 
在參加會議的過程中，與與會的學者討論資料探勘以及軟體發展的問題，並交換研究心
得，收穫良多。除此之外，藉由參加國際會議，發表我們的研究成果，並認識國外優秀
學者，藉著彼此討論，更擴展了研究方向，並讓國際學者知道我們所做的研究，是一個
很好的經驗。 
 
三、考察參觀活動(無是項活動者省略) 
 
 
 
 
四、建議 
國內學者參加國際會議，除了讓國內學者擴展研究視野外，更能讓國外學者了解我國的
研究成果，這種學術交流是十分值得鼓勵的。 
 
五、攜回資料名稱及內容 
(Electronic version) Proceeding of The 28th Annual International Computer Software and 
Applications Conference  
 
六、其他 
 
 
 
 
T = (tid, X) is a 2-tuple record, where tid is the 
transaction-id and X is a pattern. Transaction T = (tid, 
X) is said to contain pattern Y iff . The number 
of transactions in a transaction database(TDB) 
containing pattern X is called the support of X, denoted 
as sup(X). Given a transaction database TDB and a 
user-defined support threshold min_sup > 0, pattern X 
is a frequent pattern iff . 
Moreover, a frequent pattern with length k is denoted a 
frequent-k pattern. Moreover, in the process of 
frequent-pattern mining, possible patterns are generated 
as candidate patterns, and these are later tested to 
determine whether they are frequent.  
XY ⊆
min_supsup(X) ≥
Extending the problem of mining frequent patterns, 
the FT frequent-pattern-mining problem relaxes the 
definition of containing to FT-containing.  
 
Definition 2.1 (Proportional FT frequent pattern) 
 
Let P be a pattern. A transaction T = (tid, X) is said to 
FT-contain pattern P with respect to a given FT 
parameter δ ( 10 ≤< δ ) iff there exists  such 
that 
PP'⊆
X P'⊆  and δ≥
|P|
|P'| . The number of transactions in a 
database FT-containing pattern P is called the FT-
support of P, denoted as supFT(P). 
Let B(P) be the set of transactions FT-containing pattern 
P. Given a frequent item-support threshold min_supitem 
and an FT-support threshold min_supFT, a pattern P is 
called a FT frequent pattern iff 
1. ; and FTFT supmin_)P(sup ≥
2. for each item , , 
where sup
Pp∈ itemB supmin_)p(sup )P(item ≥
item
B(P)(p) is the number of transactions in B(P) 
containing item p.                                                       ■
Definition 2.1 mostly extends [2], except the FT 
parameter and the definition of FT-containing. Our new 
definition of FT-containing releases the constraint that 
the number of fault items tolerable in a pattern is 
fixed – instead, the number of tolerable fault items 
increases with the length of the pattern. Figure 2.1 
shows the relation between the length of pattern X and 
#fault(|X|), where #fault(|X|) denotes the number of 
fault items tolerable in pattern X. According to 
Definition 2.1, we have the following equation: 
⎣ ||)1(|)(|# XXfault ×−= ⎦δ . In the horizontal 
parts of the stair shown in Figure 2.1, our problem can 
be simplified to previous works; i.e., FT-Apriori 
[PTH01] can be extended as the following lemma to 
solve part of our problem. 
 
gap 
gap
 
Figure 2.1 Relation between |X| and #fault(|X|) 
 
Lemma 2.1 (Extended FT-Apriori) If X is not an FT 
pattern, then none of its superset that tolerates the 
same number of faults will be an FT pattern. 
 
However, we have a challenge where the gaps occur 
in Figure 2.1, since these areas do not comply with the 
nonmonotonicity property. Therefore, solutions from 
previous studies cannot solve our problem. 
However, observation of the properties of patterns 
separated by the gap produces the following lemma: 
 
Lemma 2.2 Let set(Xsubpattern) denote the set of X’s 
subpatterns whose length is one less than the length 
of X. Moreover, let #fault(|X|)–1 = #fault(|X|–1) (i.e., 
X and the considered subset are separated by the 
gap). If X is not a frequent FT pattern, then we have 
the following two conditions: 
case 1. if supFT(X) < min_supFT, then for all 
)set(XP subpattern∈ , P cannot be an FT pattern. 
case 2. else if supitemB(X)(xj) < min_supitem, where xj 
denotes the item contained by X, then none of the 
patterns in set(Xsubpattern) that contains item xj can be 
an FT pattern. 
 
proof:  
Let the set of subpatterns of X with length |X|–k be S, 
where k = #fault(|X|), and the set of subpatterns of 
Xsubpattern ( )set(XX subpatternsubpattern ∈ ) with length 
|X|–1–(k–1) be S'. Because 
)set(XX subpatternsubpattern ∈ , we know that . 
Suppose X is not a frequent FT pattern: 
SS'⊂
case 1: supFT(X) < min_supFT : if there exists a frequent 
 
4. Experimental Results 
 
As mentioned in Section 2, the solutions used in 
previous studies on mining FT patterns cannot be used 
to solve the proportional FT-patterns mining problem. 
Therefore, our basic FT-BottomUP algorithm is used to 
show the improvement of the FT-LevelWise algorithm. 
The experimental datasets were generated using an IBM 
synthetic-data generator. Each dataset contained 1000 
different items and 10,000 transactions. The parameters 
used in our simulation are listed in Table 4.1.  
In the first simulation, the relation between the FT 
parameter and the number of FT patterns was 
considered. It is trivial that a larger δ results in the 
extraction of fewer FT patterns. This situation is 
especially obvious in the range of δ from 0.7 to 0.9, as 
shown in Figure 4.1. Figure 4.2 presents the total 
execution time of FT-BottomUp and FT-LevelWise, 
which clearly shows that the latter algorithm 
outperforms the former one.  
In second set of simulations, δ  was set to the 
default value and the reciprocal effect of the two 
support thresholds was investigated. Figure 4.3 shows 
the variation in the number of FT patterns when 
min_supFT and min_supitem change. The scalabilities of 
FT-BottomUp and FT-LevelWise with respect to the 
two support thresholds are presented in Figure 4.4. The 
performance of FT-LevelWise is still universally better 
than that of FT-BottomUp. Moreover, with a constant 
min_supitem, a larger min_supFT results in a longer 
execution time. 
 
Table 4.1 Parameters considered in the experiments. 
Parameter Symbol Range of 
values 
Default 
value 
FT 
parameter 
δ 0.7~0.99 0.8 
Minimum 
FT-
support 
threshold 
min_supFT  0.06~0.1 0.1 
Minimum 
item-
support 
threshold 
min_supitem  0.04~0.09 0.075 
 
0
2000
4000
6000
8000
10000
12000
14000
0.7 0.75 0.8 0.85 0.9 0.95 0.99
fault tolerant parameter (δ)
nu
mb
er 
of
 FT
-p
att
ern
s
 
Figure 4.1 Number of FT patterns vs the FT parameter. 
0.0
50.0
100.0
150.0
200.0
250.0
300.0
350.0
400.0
0.7 0.75 0.8 0.85 0.9 0.95 0.99
fault tolerant parameter (δ)
ex
ec
uti
on
 tim
e (
se
c.)
FT-LevelWise
FT-BottomUp
 
Figure 4.2 Execution times. 
 
0.0
2000.0
4000.0
6000.0
8000.0
10000.0
12000.0
14000.0
16000.0
0.04 0.05 0.06 0.07 0.08 0.09
minimum item support
nu
mb
er 
of
 pa
tte
rn
s
min_FT_sup = 10%
min_FT_sup = 8%
min_FT_sup = 6%
 
Figure 4.3 Number of FT patterns vs min_supFT and 
min_supitem. 
 
