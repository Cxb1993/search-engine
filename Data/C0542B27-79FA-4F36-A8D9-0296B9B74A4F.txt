I 
 
1   Introduction.................................................................................................................... 1 
1.1  Multilevel Database Systems............................................................................... 1 
1.2   Issues in Multilevel Database Systems ............................................................... 1 
2  Research Goals ............................................................................................................... 3 
3  Related Research............................................................................................................. 4 
3.1  Cryptography Approach....................................................................................... 4 
3.2  Database Approach .............................................................................................. 5 
3.2.1  Security Models ........................................................................................ 5 
3.2.2  Data Integrity Protection........................................................................... 5 
3.2.3  System Implementation ............................................................................ 5 
3.2.4  Inference Control ...................................................................................... 6 
4  Research Methods........................................................................................................... 7 
4.0  Database vs. Cryptography .................................................................................. 7 
4.1  Research Results .................................................................................................. 7 
4.1.1  Multilevel Relational Data Model ............................................................ 7 
4.1.2  Initial (Default) classification level Assignment .................................... 14 
4.1.3  Classification Rule Specification Language ........................................... 15 
4.1.4  Classification Rule Management ............................................................ 16 
4.1.5  Detection and Resolution of Rule Confliction........................................ 17 
5  Conclusion and Discussion........................................................................................... 20 
References......................................................................................................................... 21 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
III 
 
Abstract 
 
A multilevel database system is a database system in which each piece of data is assigned 
a classification level and it also provides data to users with different clearance levels. 
Only when the clearance level of the user dominates the classification level of the data, 
the user can then access the data. In this research we investigate the technologies and 
propose a foundation to develop a multilevel relational database system with an 
intelligent data security level assignment system associated with it. Specifically, we 
modify and add some features to the MLR data model and will use it as our underline 
implementation basis. Also we tackle the data classification issues. We propose to use 
SQL to specify data security level requirements. Our design can automatically generate 
security levels for data stored in a multilevel database. In summary, the design can detect 
level assignment conflictions; eliminate covert channel due to polyinstantiation and data 
dependency inference threats. It also provides in-time classification updates, ensure data 
confidentiality and data integrity, and improving data availability. 
 
 
Keywords 
 
Information Security, Multilevel database system, Poly-instantiation, Security Level 
Assignment, Logic Programming, Inference Control, data confidentiality, data integrity, 
data availability. 
2 
 
of information will occur. That is, users at lower levels will know that such an entity 
exists at some higher level. If the insertion is allowed, this will cause primary key 
violation, i.e., multiple tuples (records) with the same key. 
 
To illustrate the poly-instantiation issue, let’s look at Figure 1.2. The table SOD in Figure 
1.1 is repeated here but the contents are different. The primary key of SOD is the attribute 
“Starship”. Now assume the ship “Enterprise” is going on a secret mission. Users at 
different clearance levels would have different knowledge about the mission of 
Enterprise. A user at secret clearance level can create a tuple (record) about the mission 
of Enterprise (as shown in the first tuple in SOD table which shows Enterprise is on a 
“Spying” mission). Now, if a user at the unclassified level tries to create a record for the 
Enterprise mission, he might create a record like the second tuple in SOD. A regular 
database system would reject the creation operation from the unclassified user since 
Enterprise record already exists in the table. This rejection would reveal some knowledge 
about the Enterprise mission to the unclassified user, i.e., he would know that Enterprise 
is on a secret mission than he knows about. If the database system allows this creation 
operation, then it is a major violation of database primary key principle. 
Table SOD  
Starship CS Objective CO Destination CD  TC 
Enterprise S Spying S Talos S  S 
Enterprise U Exploration U Talos U  U 
Figure 1.2   Example of poly-instantiation 
 
 Security Threats from Inference 
 
Evan we can properly assign security levels to data stored in the database, we still cannot 
guarantee that the database is safe and free from any compromise. One major threat to 
database security is called inference. Inference is a mechanism to derive unknown 
information from existing knowledge and authorized queries to the database system. 
Consider the following example. 
 
Example 1.1 Assume employee salaries in a company are based on an evaluation factor, 
called rank, of every employee. That is, employees who have the same rank get the same 
salary. Let the salary information is classified as TOP SECRET and the rank SECRET. 
Now a user with clearance level SECRET can infer the TOP SECRET salary information 
if he also knows the mapping between rank and salary. 
 
 Dynamic nature of data 
 
A database reflects the part of real world of some application. The real world will keep 
changing its state, thus, data stored in a database, to truly reflect the world, must be kept 
changing. As a result, the data and its associated classification level in a multilevel 
database would need to be updated according to the real world state. As a consequence, 
even a small change in the data classification level might cause large impact on the 
originally “stable and secure” database. 
4 
 
a secure multilevel relational database system for the defense organizations in some 
country some time ago. As far, most works in this area are concentrating on the creation 
of databases; very few researches have been taking the issue of data classification level 
assignment due to the difficult and complex nature of the problem. With all of these in 
mind, we set our research goal to create a multilevel relational database system and find a 
policy-based data classification scheme to resolve those issues described in Section 1.2. 
More specifically, the database system should be able to support/work together with the 
security level assignment system and the classification system should automatically 
assign proper security levels to data stored in the database system such that  
 
1. there is no conflict level assignments. 
2. there is no covert channel due to poly-instantiation. 
3. there is no data dependency inference threats 
4. in-time classification updates is provided. 
5. data confidentiality is ensured. 
6. data integrity is enforced. 
7. data availability is improved. 
 
3  Related Research 
One of the newest access control approach is called Role Based Access Control (RBAC). 
In RBAC, roles are created for various job functions inside an organization. The 
permissions to perform certain operations are assigned to specific roles. Members of staff 
(or other system users) are assigned particular roles, and through those role assignments 
acquire the permissions to perform particular system functions. With the concepts of role 
hierarchy and some constraints, one can control RBAC to create or simulate lattice-based 
access control (LBAC) which basically is the foundation of multilevel security. As our 
goal focuses on the multilevel database systems, we would refer readers to [30, 31] for 
more details. 
 
The research work related to multilevel database system can be divided into two main 
categories: cryptography approach and database approach as described below. 
 
3.1  Cryptography Approach 
 
With cryptography approach, an organization management hierarchy is modeled as a set 
of partially ordered classes. Information is encrypted and divided into classes based on 
that partial ordered set. A member of the organization who obtains access (a key) to some 
certain information class can also obtain access to all descendant information classes of 
his class through key derivation.  
 
In [32], Denning proposed to encrypt the data elements stored in a database to protect the 
information. Akl and Taylor [33] first proposed a cryptographic key management 
approach to control access in a hierarchical structure. Since then a number of articles 
have been published to improve the key generation and management scheme. We list 
some for reference [33-38]. 
6 
 
for a multilevel secure relational database system. The requirement for a near-term 
implementation suggests that the design should utilize existing technology to the extent 
possible. Thus the design used an existing database management system ported to an 
existing trusted code block (TCB) environment. A preprocessor translates key constructs 
of the SeaView multilevel relational data model to those of the standard relational model 
used by the commercial database system. The underlying security reference monitor 
enforces mandatory and basic discretionary controls with assurance. Discretionary 
controls on relations and views as well as the enforcement of data consistency are 
provided by the commercial database system. The key technology introduced in this 
project is that by combining single-level data into a multilevel view, we can use a 
commercial database system and classify data at the relation level to implement the 
SeaView model, with element-level classification. 
 
3.2.4  Inference Control 
 
The most difficult security issue in a multilevel database system is the inference problem 
since unauthorized information can be derived through authorized access and pre-
knowledge.  
 
In [16], the author suggested that the problem of user inference can be solved with the 
concept of a commutative filter that ensures that the result returned to a user is equivalent 
to one that would have been obtained had the query been posed against an authorized 
view of the database. The technique allows query selections, some projections, query 
optimization, and sub-query handling to be performed by the database system. It does not 
solve the Trojan Horse leakage problem. 
In [18] and [20], the author did some analysis on the inference problem. The potential for 
logical inference of high level information based upon lower level visible data presents 
an interesting and challenging threat to multilevel security. Such compromises of security 
are rather novel since they circumvent traditional security mechanisms and rely on a 
user's knowledge of the application, which is external to the security layers of the system. 
The potential for such inferences, and the multiple consequences of a corrective action, 
substantially complicate the task of classifying the data in a secure manner. Computer-
based tools will be needed to assist in this process, especially when multilevel databases 
of substantial size and complexity are considered. Heretofore, the problems of inference 
and security have been amorphous and difficult to circumscribe. Thus, the author 
proposed a framework for studying these inference control problems, describes a 
representation for relevant semantics of the application, develops criteria for safety and 
security of a system to prevent these problems, and describes the functionality of the 
proposed classification tool in terms of a scenario for its use. 
 
In [21], [22] and [23], the authors investigated the most popular inference mechanism in 
a database system, i.e., functional dependency (FD) and multi-value dependency (MVD).  
The inference problems due to functional dependencies and multi-valued dependencies in 
a multilevel relational database with attribute and record classification schemes, 
respectively. The set of functional dependencies to be taken into account in order to 
prevent FD-compromises is determined. It is proven that incurring minimum information 
8 
 
Due to the security nature of a multilevel relational database, the data model it uses 
should have differences from a traditional relational database. We have investigated 
several data models [2-13] by comparing their simplicity, expression power, problem 
solving capability. [12] and [13] are the two standing out with a fine modeling ability.  
After carefully studying these two models, we believe that both have the same modeling 
power. The only difference is the classification granularity, [12] uses element level 
classification while [13] uses tuple level. Our work is based on [12] because the element 
level classification is more flexible in real world applications (although a bit complicated 
to go into element level). 
 
4.1.1.1  Database Definition 
 
We first give the database definition used in this research. The database definition gives 
the structure template of all tables existing in the database. Based on the element level 
classification assignment scheme, our multilevel relational database system can be 
defined in the following definitions. 
 
Definition 4.1 A multilevel relation scheme is denoted by R(A1, C1, A2, C2, …, An, Cn, TC), 
where each Ai is a data attribute over domain Di, each Ci is a classification attribute for Ai, 
and TC is the tuple-class attribute. The domains of Ci are specified by a range [Li, Hi], Hi 
≥  Li, The domain of TC is U
n
i 1=
([Li, H]), where H is system high. 
 
Definition 4.2 A multilevel relation instance, denoted by r (A1, C1, A2, C2, …, An, Cn, TC), 
is a set of distinct tuples of the form (a1, c1, a2, c2, …, an, cn, tc), where each ai ∈ Di and ci 
∈  [Li, Hi] or ai = null and ci  ∈  [Li, Hi] ∪null, and tc ≥  lub {ci | ci≠ null ,i = 1…n}. Here 
lub denotes the least upper bound. 
 
The only difference between the above definitions and the traditional database is the 
addition of classification attributes (those Ci  ) and tuple classification attribute (TC ).  To 
illustrate the above definition, please refer to Figure 4.1 below. 
 Table  SOD 
Starship CS Objective CO Destination CD TC 
Enterprise U Exploration U Talos U U 
Voyager S Spying S Mars S S 
Apollo S Mining T Russia T T 
Figure 4.1   Multilevel Relation SOD 
 
Table SOD contains three data attributes: Starship, Objective, and Destination. Also 
contained in Table SOD are the classification levels of data elements. For example, CS    
attribute contains the data elements’ classification level for attribute Starship and the 
starship “Enterprise” is classified as “U”(Unclassified), the starship “Voyager” is 
classified as “S”(Secret). “TC” at the last column represents the tuple/record 
classification level, e.g., the record of starship “Voyager” is classified as “S”(Secret). 
 
10 
 
To support multilevel database applications, we have to store all records believed at all 
classification level in a single table (combining all three believed tables) because users at 
different classification levels have different believing information about the same real 
world entity. Thus, in multilevel database applications, the meaning or semantics of an 
“entity” should be combined with the classification level it exists.  We will call entities 
formed in this way “multilevel entity”.  
 
A property derived from the above arguments is that the primary key of a multilevel 
entity is the combination of the primary key of the corresponding real world entity and 
the classification level of the multilevel entity. For example, in table EMPLOYEE, the 
primary key is (ID, TC). We can state the property as follows. 
 
Property 4.1 A multilevel relation scheme is denoted by R (A1, C1, A2, C2, …, An, Cn, TC), 
where A1 is the primary key of the real world entity that this record represents, and TC is 
the classification level of this record. We can use (A1  , TC) as the primary key of R to 
differentiate between the entities believed to exist (or created/owned) by different levels. 
One of immediate results from Property 4.1 is that every real world entity can have at 
most one representing record for every classification class. 
 
Table EMPLOYEE 
 
 
Table EMPLOYEE-C 
 
 
 
 
 
 
 
 
 
 
 
 
ID NAME PERFORMANCE 
RANK 
SALARY TC 
0211          S Brad Pitt                      
U 
A                    C 800,000            S S 
0555          U John Travolta              
U 
B-                   C 20,000              S S 
0211          U Brad Pitt                      
U 
A                    C NULL                NULL C 
0211          U Brad Pitt                      
U 
NULL             NULL NULL                NULL U 
0555          U John Travolta              
U 
B-                   C NULL                NULL C 
0555          U John Travolta              
U 
NULL             NULL NULL                NULL U 
ID NAME PERFORMANCE 
RANK 
SALARY TC 
0211         U Brad Pitt                 U A                    C NULL              NULL C 
0555         U John Travolta         U B-                   C NULL              NULL C 
12 
 
To ensure every relation in the database satisfies this polyinstantiation requirement, we 
put this as one of the database integrity constraints in our data model. 
 
4.1.1.2.3  Sharing Data between Tuples of the Same Entity 
 
As described in Section 4.1.1.2.1, an entity could have its tuples existing in different 
security levels. Since these tuples are representing the same entity, they could share some 
information of the entity. Consider the multilevel relation AMP in Figure 4.4 below.  
Relation  AMP 
Agent CA Mission CM Place CP TC 
007 U Bombing TS China U TS 
007 S Spying S China U S 
007 U Touring U China U U 
Figure 4.4   Multilevel Relation AMP 
In Figure 4.4, the “U” tuple share information about “Place” with the “TS” tuple and “S” 
tuple. Data sharing between tuples sometimes is necessary if the real world connection 
between these tuples exists. Refer to Figure 4.5. 
Relation  AMP 
Agent CA Mission CM Place CP TC 
007 S Spying S China U S 
007 U Touring U China U U 
Figure 4.5 (a)   Original Relation AMP 
Relation  AMP 
Agent CA Mission CM Place CP TC 
007 TS Bombing TS China TS TS 
007 S Spying S China U S 
007 U Touring U China U U 
Figure 4.5 (b)   Insertion without Sharing in Relation AMP 
Relation  AMP 
Agent CA Mission CM Place CP TC 
007 U Bombing TS China U TS 
007 S Spying S China U S 
007 U Touring U China U U 
Figure 4.5 (c)   Insertion with Sharing in Relation AMP 
Figure 4.5 (a) shows a multilevel relation AMP. If a “TS” user want to insert a tuple 
representing a mission of agent 007, e.g., (007, Bombing, China), into AMP, he actually 
has two choices to do it. First, he may decide that the mission is totally independent from 
other missions and he can make him the owner of the tuple by specifying all 
classification levels to “TS”. On the other hand, this mission may be considered part of 
the mission that users at “U” and “S” levels believe. In that case, he can choose to share 
information from tuples in “S” or “U” levels. Figure 4.5 (c) shows he decide to share 
14 
 
 
 
 
 
 
Figure 4.6 Original Multilevel Relation NPS 
 
A Classified user who has the right to access the attribute “PERFORMANCE RANK” 
tries to update tuple 0211. In order to hide his operation to those Unclassified users, a 
new tuple has to be created (insert operation) at Classified level as shown in Figure 4.6 
below. 
 
 
 
 
 
 
 
   Figure 4.6 Relation NPS after Insertion 
 
The above example only illustrates the update operation. Actually, all basic traditional 
database operations have to be modified in order to ensure the security in a multilevel 
database system. We include insert, delete, update, select, and uplevel as the basic 
database operations needed in our data model. Among them, insert , delete, update, and 
select are operations from the regular database  systems with modifications to support the 
multilevel databases. The uplevel operation is a new one used to support data sharing 
between tuples of the same entity as described in Section 4.1.1.2.3.  
 
4.1.2  Initial (Default) classification level Assignment 
 
Initial or default classification level assignment refers to how classification levels of data 
elements and tuples are assigned when they are created. A natural way to do level 
assignment is to assign the classification level of the user who first creates these data and 
that is exactly our data model supports. 
 
 
 
 
 
   Figure 4.7 (a) Original Relation NPS 
 
 
 
 
          
     Figure 4.7 (b) 
ID NAME PERFORMANCE 
RANK 
SALARY TC 
0211         U Brad Pitt                 U NULL               NULL NULL              NULL U 
0555         U John Travolta         U NULL                NULL NULL              NULL U 
ID NAME PERFORMANCE 
RANK 
SALARY TC 
0211         U Brad Pitt                 U NULL               NULL NULL              NULL U 
0555         U John Travolta         U NULL                NULL NULL              NULL U 
0211         U Brad Pitt                 U A                     C NULL              NULL C 
ID NAME PERFORMANCE 
RANK 
SALARY TC 
0211         U Brad Pitt                 U NULL               NULL NULL              NULL U 
ID NAME PERFORMANCE 
RANK 
SALARY TC 
0211         U Brad Pitt                 U NULL               NULL NULL              NULL U 
0555         S John Travolta         S B                      S 120,000          S S 
16 
 
Normally we can consider a rule consisting of two parts: condition and action. It can be 
expressed by using an “if” statement as follows. 
 
  If <condition>  then  <action> 
 
The condition part has conditions like “PERFORMANCE RANK <= D” and the action 
part might have action like “SALARY level = CLASSIFIED”. We will assume both 
condition and action only involve database attributes. 
 
To specify a classification rule, a language is needed. This language has to support the 
specification of condition-action style’s rules as shown above. We choose SQL for our 
classification rule specification language because of its popularity and simplicity. Other 
than that reason, since we are designing a database system, using SQL to specify 
classification levels give a uniform treatment in the design.  
 
In order to explain how we used SQL to specify policies, consider the simple policy 
examples described above.: “Change the department number to 001, if the location of 
staff is in Taiwan.” In these simple instances, we specify the policy though SQL in figure 
3.7. The policy condition can be specified after the “where” token. Only while the policy 
condition is true, the policy action is executed in the database. However, there are still 
many policies more complex than the above instances. In order to specify this kind of 
policies, we can use the concept of procedure provided by SQL. In this way we can 
specify policies and also reuse them by calling them later. 
 
UPDATE EMPLOYEE 
SET CS = ‘S’ 
 
UPDATE EMPLOYEE 
SET SS = ‘C” 
WHERE PERFORMANCE < ‘D” 
 
    Figure 4.8 Classification Rules in SQL 
 
4.1.4  Classification Rule Management 
 
Classification rule management is also a critical part of multilevel database application as 
it decides the security level assignment to every piece of data. The rules need to be 
managed include the following categories: 
 
 
 Classification rules from outside the database, like the two listed in Section 4.1.3. 
 The data integrity rules listed in Section 4.1.1.3, for example, in the Entity Integrity, 
it says that all apparent key attributes must have the same security level. 
 The special rules associated with various database operations in Section 4.1.1.4, for 
example, in the update operation, the classification level of the updated data should 
be set to the tuple class. 
18 
 
4.1.5.1  Detection of Rule Confliction 
 
Detecting conflictions from a set of rules involves deriving knowledge from all existing 
rules. To deal with this type of learning (or inference) process, we need to have a tool 
which can support logical inference. It goes without saying that the choice goes to 
languages belonging to the logic programming paradigm.  
 
Prolog is the most famous language in logic programming area and is our choice. As our 
research concerns, we don’t need too many language features besides the rule 
specification. Also, we need the language tightly coupled with database applications. 
Figure 4.9 below shows a high level design of the detection process. 
 
 
4.1.5.2  Resolution of Rule Confliction 
 
In general, most rule conflictions can not be detected until rules involved are evaluated. 
Also, resolving rule conflictions requires human intervention, that is, security 
administrator has to decide which security level to apply. Therefore, we choose using 
database trigger feature to solve this problem. 
 
A trigger in a database system is an implementation of event-condition-action rules. It has 
the following properties. 
 
 
Classification 
policies in SQL 
Policy 
depository 
PROLOG 
Inference  
Engine 
Result of Confliction 
Detection 
Figure 4.9 High Level View of Confliction Detection 
20 
 
 
 
5  Conclusion and Discussion 
As the interactions between businesses arise, the need of multilevel database system 
technology arises. Our research addresses this need with results contributing to improve 
information security.  We have set up a foundation to build a multilevel relational 
database system. We define the data model of the multilevel database system, propose a 
security level assignment scheme, and find an approach to detect the conflictions of 
security level assignment. 
 
We adopt some good features from several data models proposed before. We address the 
security level assignment issue which is never discussed before. Specifically, we allow 
dynamic security level changes to fulfill the practical requirement. The approach used to 
detect security level conflictions actually can be applied to several other areas like policy-
based network management systems to detect policy conflictions. 
 
As we entering the second year of this project, we have set up the development 
environment on the open foundry. The goal is to share our results/products with all who 
need it. We believe some advertisements from NSC to business world is always good for 
the adoption of good technologies. 
 
 
Evaluate Rules for Confliction 
EXIT 
START 
Confliction 
 Happen? 
NO 
YES 
Trigger Fired 
Request for 
Resolution 
Figure 4.10 Conflictions Resolution 
22 
 
Society, 1988, pp. 234-244. 
[20]  M. Morgenstern, “Controlling Logical Inference in Multilevel Database Systems”, 
Proceeding of 1988 IEEE Symposium on Security and Privacy, IEEE Computer 
Society, 1988, pp. 245-255. 
[21]  G. Ozsoyoglu, and T. A. Su, "Data Dependencies and Inference Control in 
Multilevel Relational Database Systems",  Proc. of the 1987 IEEE Symposium on 
Security and Privacy, IEEE Computer Society, Oakland, CA, Apr. 1987. 
[22]  T. A. Su, and G. Ozsoyoglu,  "Multi-valued Dependency Inferences in Multilevel 
Relational Database Systems", Database Security III: Status and Prospects - 
Proceeding, Third IFIP Working Conference on Database Security, edited by D. 
Spooner and C. Landwehr, North-Holland 1990, ISBN 0-444-88701-6. 
[23]  T. A. Su, and G. Ozsoyoglu, "Controlling FD and MVD Inferences in Multilevel 
Relational Database Systems", IEEE Transactions on Knowledge and Data 
Engineering, Vol. 3, No. 4, December 1991. 
[24]  S. Rizvi, A. Mendelzon, S. Sudarshan, P. Roy, “Extending query-rewriting 
techniques for fine-grained access control”, In SIGMOD Conf., 2004 
[25]  H. Garcia-Molina, J. D. Ullman, and J. Widom, “Database Systems: The Complete 
Book”, Prentice Hall, 2002. 
[26]     P.D. Stachour and B. Thuraisingham, “Design of LDV: A Multilevel Secure 
Relational Database Management System”, IEEE Transactions on Knowledge and 
Data Engineering, Vol.2, No.2, June, 1990 
[27]  Claudia Marcus, Arity Corporation “Prolog Programming: applications for Database 
Systems, Expert Systems, and Natural Language Systems”, Addison-Wesley, 
1986 
[28]  H. Gallaire and J. Minker, “Logic and Databases”, Plenum Press, New York, 1978 
[29]  M. Liu, “Deductive database languages: problems and solutions”, ACM   
Computing Surveys, Vol. 31, No. 1, Mar 1999. 
[30]  D. Ferraiolo and D. Kuhn, “Role Based Access Control”, Proceeding of the 15
th
 
National Computer Security Conference, 1992 
[31]  R. Sandhu, E. Coyne, H. Feinstein, and C. Youman, “Role-Based Access Control 
Models”, IEEE Computer, Vol. 29, No. 2, 1996 
[32]  D. Denning, “Field Encryption and Authentication”, Advance in Cryptology, 
Proceeding of Crypto 83, Plenum Press 
[33]  S. G. Akl and P. D. Taylor, “Cryptographic Solution to a Problem of Access Control 
in a Hierarchy”, ACM Transaction on Computer Systems, Vol. 1, No. 3, Aug, 
1983 
[34]  L. Harn and H. Y. Lin, “A Cryptographic Key Generation Scheme for Multilevel 
Data Security”, Computer & Security, Vol. 9, No. 6, Oct. 1990 
[35]  H. Liaw, S. Wang, and C. Lei, “A Dynamic Cryptographic Key Assignment Scheme 
in a Tree Structure”, Computers and Mathematics with Applications, Vol. 25, No. 
6,  1993 
[36]  H. M. Tsai and C.C. Chang, “A Cryptographic Implementation for Dynamic Access 
Control in a User Hierarchy”, Computer and Security, Vol. 14, No. 2, 1995 
[37]  T. S. Chen and J. Y. Huang, “A Novel Key Management Scheme for Dynamic 
Access Control in a User Hierarchy”, Applied Mathematics and Computation, Vol. 
162 , Issue 1, March 2005 
  
 
無研發成果推廣資料 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 ■洽談中 □無 
其他：（以 100字為限） 
