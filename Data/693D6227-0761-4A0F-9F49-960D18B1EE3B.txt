expected quality-of-service, these products start to 
use the multi-core processors in their architecture. 
The issues of power consumption or thermal reduction 
on a multi-core processor, however, are very 
challengeable than ever before. Most previous studies 
have proposed the task scheduling algorithms with the 
dynamic voltage scaling technique to reduce a multi-
core processor｀s power consumption while satisfy the 
real-time requirements. Most of them, however, 
focused on periodic task scheduling, which belong to 
the studies of static task scheduling, or ignored the 
side-effects of voltage transition overheads when 
performed the DVS scheduling. 
  In this project, we focus our research on designing 
the run-time aperiodic task scheduling algorithms for 
multi-core real-time systems. We first model the task 
scheduling problem as an Integer Linear Programming 
(ILP) problem, and use the ILP solver to find the 
optimal scheduling results, given a set of 
architectural models. These optimal scheduling 
results can be considered as an ideal case of the 
task scheduling. Considering the time complexity of 
finding the optimal results, we design another 
heuristic task scheduling algorithms to find the 
approximation solutions. In our study, we also 
consider the voltage transition overheads which 
include the voltage transition energy and transition 
time when the system uses multiple supply voltages to 
perform task execution. 
In this one-year project, we implement an 
experimental simulation platform to 
simulate a multi-core real-time system with a multi-
voltage DVS module. In this platform, we also 
generate different task sets of different workloads 
for integrated evaluation. By 
realizing this project, we expect that all members 
which join this project can learn much 
knowledge and experiences on designing low-power 
multi-core processors. 
英文關鍵詞： energy-aware task scheduling algorithm, dynamic 
voltage scaling, power stabilization, multi-core 
 1 
1. Introduction 
The multi-core processors improve much more computing power than the single-core processors, but 
they also bring much higher power consumption than usual. As a result, the low-power designs become as 
important as the performance improvements for most multi-core processors. One of the most important low 
power designs is to use the task-level scheduling. Many previous studies have proposed the energy-aware task 
scheduling algorithms to schedule the tasks in multi-core [1-5]. These approaches evaluated the worst-case 
utilization of tasks and tried to arrange the task execution in an energy-saving sequence. The utilization of a 
task can be defined as the ratio of the time that the task spends on executing its work in a time period. If we 
allocate a task to a core, its utilization will increase the total workloads on that core. By evaluating the 
utilization of total tasks, we can predict if there will be idle time (slack) occurred on the cores. Assume that 
each core can be supplied by different voltage levels. If a task is predicted that it will cause the idle occurred 
on a core after its execution, then we can schedule the task with a lower voltage to perform more 
power-saving execution. Since assigning a lower voltage to a task will delay its execution time, a scheduling 
algorithm has to ensure that each task can be finished on time with minimized total energy consumption.  
In recent years, many energy-aware task scheduling algorithms mainly focus on scheduling the periodic 
tasks [1-6] or the frame tasks [10-11]. A periodic task contains a number of task instances and each instance 
will arrive sequentially in a fixed period. Also, each instance has to finish the execution before the deadline, 
which is usually defined as the end of the period. Because of the periodic characteristics, the performance 
demands of the tasks can be estimated by their worst-case execution time (WCET). Therefore, we can develop 
a static task scheduler, which lists the execution order of all tasks based on their periods and the WCET to 
meet the real-time performance and the minimized energy consumption by limited resources. However, in a 
run-time system, the slack time of tasks may be underestimated, which causes the energy saving and the task 
schedulability cannot be achieved easily. To resolve this problem, the studies [9-10] proposed the dynamic 
slack reclamation algorithms, which consider not only task utilization but also the core workloads 
dynamically in the runtime.  
A real-time system, however, contains not only periodic tasks, but also aperiodic tasks [7-8]. Aperiodic 
tasks often arrive at arbitrary times like exceptional interrupts or user requests. For most real -time systems, 
periodic tasks and aperiodic tasks will exist simultaneously. For example, a smart phone not only has  to 
receive periodic synchronization signals from the base stations but also has to handle user requests appeared 
randomly. The other example is the telemetric system or the flight control system. The system not only has to 
receive the geographic information or automatic control of vehicles periodically, but also has to accept the 
driver’s requests or handle the exception events. Network packet processing is another obvious example, 
because each incoming packet is just like an aperiodic task for a network processor. Scheduling such kind of 
tasks is a big challenge for most well-known scheduling algorithms, especially when our goal is to design a 
 3 
and energy overheads. Also, the analysis and the determination of task migrations by the dynamic repartition 
will increase the scheduling complexity, which makes the approach not completely suitable for a runtime 
scheduler.  
The study of [2] proposed another energy-saving DVFS (dynamic voltage/frequeincy scaling) approach 
for multi-core processors. Different from the most of previous scheduling studies [14][15-18], the work of [2] 
focused on lightly loaded multicore processors. In a lightly loaded multicore processor, they can use some 
overabundant cores to execute a task in parallel with lower frequency or lower voltage for energy saving. This 
approach can utilize the energy-saving capability of parallel execution in a multicore processor, but there are 
some questions. First, this approach needs to exploit task-level parallelism. Second, this approach is suitable 
for only the lightly loaded multicore processors; e.g., when the core number is very large. For most modern 
applications, task loadings are always very heavy. A multicore processor may not have so many overabundant 
cores for parallel execution. The most important is, when a task is executed in parallel of different cores, 
many unpredictable overheads, like task migration, preemption, or synchronization, will occur. By the way, 
their approach still did not consider the voltage transition overheads during task acheduling.  
The study of [19] was the first work that accounts for transition overheads (both time and energy) and 
discrete voltage levels in the process of deriving voltage schedules for real-time applications. Without 
considering these practical limilations of current processors, a voltage schedule could cause deadlines to be 
missed [19][9]. The study of [20] illustrated the source of the transition overheads in a DVS processor. The 
phase-locked loop and the voltage regulator are the most common circuits to be used in adjusting the 
frequencies and the voltages. The phase-locked loop receives the input frequency (which is the desired 
frequency for the processor), and compares it with the current processor clock freqruency. It then generates 
the difference of comparing result, and adjusts the processor clock frequency to the desired one. Similarly, the 
voltage regulator detects the signals from the processor and finds the corresponding voltage level . The 
transition overheads, including the transition time and the transition energy, are generated from above two 
circuits. In this project, we also take acount of the transition overheads (both time and energy) into our 
scheduling algorihm. Different from the work of [9], our design is aimed at shortening the gap of voltage 
levels between sequential tasks to reduce the transition overheads. Also, we focus more on developing the 
online scheduling algorithm for real-time tasks, instead of the off-line scheduling approach as addressed in 
[19]. 
3. Integer Linear Programming Modeling 
In this section, we show how to transfer the aperiodic task scheduling problem in a multicore system to 
an integer linear programming problem.  
A. Assumptions 
1) Input task model 
 5 
where ei is the worst case execution time of task ki, and s is the ratio of the extended execution time when 
performing different supply voltages. Table 1 summarizes the parameter notations which will be used in the 
following sections. 
Table 1 Parameter notations 
K aperiodic task set, K={k1,k2,k3…,kN}. 
Ri release time of task ki. 
Di deadline of task ki. 
ei worst case execution time of task ki. 
Core core set, Core={Core1, …, CoreL}. 
si execution starting time of task ki. 
fi execution finishing time of task ki.  
Etotal total task energy 
Gtran total task transition energy  
B. Problem modelling 
To represent a feasible scheduling result, we use an identity variable 
iilji fsvCorek
x ,,,, , where ki K, Corej 
Core, and vl V. This variable can be defined as: if task ki is scheduled to Core j by voltage vl for execution 
between starting time si and finishing time fi, then 
iilji fsvCorek
x ,,,, =1. Otherwise, iilji fsvCorekx ,,,, =0. 
According to this definition, we can obtain the total task execution energy (Etask): 
    
  

 Kk CoreCore
M
l
D
Rs
j
D
sf
itask
i j
i
ii
i
ii
freqCvE
1
1
2 ])[( ,,,, iilji fsvCorekii xsf   (Eq. 3) 
where  , C, and freqj are the switching probability, the load capacitance and the frequency, respectively. 
Recall that the voltage transition energy is proportional to the difference of voltage squares before and 
after transition [9]. We can define the function Gtran to represent the total transition energy, i.e., 
  
),(
221
ji kk
ijtran vvC-η G ,                          (Eq. 4) 
where task Kkk ji , , task k j is scheduled next to task ki on the same core, vj and vi are their voltages before and 
after transition, and C and η are constants. 
Given a task set, our goal is to find an optimal solution (i.e., best
iilji fsvCorek
x ,,,, ) to minimize the total 
execution energy and the total transition energy. This is an Integer Linear Programming problem, which can 
be resolved by finding the optimal solutions through a well-defined objective function and a set of constraints.  
The objective function in our scheduling problem thus can be defined as: 
)( trantask GEMinimize  , subject to: Kki    ii Df  , Ni 1 .   (Eq. 5) 
The scheduler may find lots of solutions for scheduling. Some situations, however, must be avoided, like 
deadline misses, task overlap, etc. Thus we define the following constraints to find the solutions which make 
the schedule valuable. 
1) Unique constraint 
Each task will be scheduled once only. In other words, the scheduler must guarantee that each task is 
non-preemptive. The constraints can be expressed as: Kki  , 
 7 
scheduler has to reduce the transition overheads as well as preventing the possible deadline misses, the 
voltages of any two sequential tasks should not differ too large. In other words, we need a common voltage 
level to let the voltage of each task be assigned around this voltage level. 
The variable vbound is used for this purpose. It represents a “logical” voltage bound which can let all tasks 
be scheduled into an available time space for execution without violating their deadlines. The vbound is defined 
as:      
 
high
Core
jf
task
i
bound v
ttD
e
v
j
i *
 

 ,   (Eq. 10) 
where ei is the worst case execution time of task ki using the highest supply voltage, Df is the farthest deadline 
among the current waiting tasks, tj is the time Core j finishes its previous scheduled tasks, and t is the time 
overhead of the voltage switching. In Eq. 10, the summation of ei represents the minimum requirement of time 
to finish all waiting tasks, and the divisor (i.e.,   
jCore
jf ttD  ) represents the total free time space among 
cores offered for task scheduling. Therefore the division result of these two terms represents the common ratio 
to extend the execution time of all waiting tasks.  
To setup each task’s execution voltage around vbound, we compare jcoreiv ,  with vbound for task ki. If 
jcorei
v , is larger than or equal to vbound, it means that task ki has a tighter deadline than other tasks. Therefore the 
execution voltage of task ki should be set to the high voltage level, i.e., jcoreiv , , to catch up the deadline. 
Conversely, if 
jcorei
v ,  is less than vbound, it means that task ki has a loose deadline. In this case, we can raise the 
execution voltage of task ki up to vbound. Using a higher voltage level (i.e., vbound ) for ki would not let it miss 
the deadline, but can reduce the gaps between the voltage of ki with others; thus the voltage transition 
overheads can be reduced. 
5. Experimental results 
We implement a task generator to generate aperiodic tasks for the following experiments. The task 
generator will generate a task sequence composed of 100 tasks. The release times of all tasks follow the 
Poisson distribution with an arrival rate λ. To evaluate the performance of the proposed scheduling algorithm 
under different task arriving behaviors, we vary the value of λ from 0.1 to 0.9. We assume that the core 
numbers are 2, 4, and 8. Each simulation will run about 100,000 times to obtain the average results and we 
skip the cases of which the tasks cannot be scheduled.   
We implement four scheduling approaches in the experiments for comparison. The first approach is to 
use the ILP modeling to find the optimal scheduling for each given task list. The second approach is to use the 
proposed heuristic algorithm to find the runtime scheduling for the same task list, assuming each task arrives 
sequentially by the generated order. The third approach is to use the EDF policy to schedule the tasks but 
without the DVS mechanism. The final approach we implemented is to use the same EDF policy, but within 
 9 
schedulable. For the runtime algorithms, inserting the DVS mechanism in the scheduling not only reduces the 
total energy consumption, but also increase the average core utilization. The problems of the on-line 
scheduling are the task voltage transition overheads and the task deadline miss rates. These problems come 
from that any one of the runtime schedulers cannot forecast or determine the best scheduling policy for the 
incoming tasks. In order to reduce these effects, we design the proposed heuristic algorithm, in which the 
voltage assignment of each task should be considered with the overall requirements of waiting tasks. The 
experimental results show that this consideration will not sacrifice the energy savings, and can achieve the 
comparable performance with the ILP algorithm. 
6. Conclusion 
In this project, we propose an energy- and transition-aware task scheduling algorithm for multi-core 
processors. We first construct an ILP model to find the optimal solutions for off-line scheduling. We then 
propose a heuristic algorithm for run-time scheduling. Currently our work is based on the assumption of the 
homogeneous multi-core structure. In the future we plan to apply the energy-aware algorithm to the 
heterogeneous multi-core processors, which have become the design trend in many emerging digital signal 
processing applications.  
7. Reference 
[1] Jian-Jia Chen, et al., “Energy-Efficient Real-Time Task Scheduling in Multiprocessor DVS Systems,” Asia and South Pacific 
Design Automation Conference, 2007, Pages 342-349. 
[2] W. Lee et al, “Energy-Saving DVFS Scheduling of Multiple Periodic Real-Time Tasks on Multi-core Processors,” 
Proceedings of the 2009 13th IEEE/ACM international Symposium on Distributed Simulation and Real Time Applications, 
Pages 216-223, October 2009. 
[3] Euiseong Seo, et al., “Energy Efficient Scheduling of Real-Time Tasks on Multicore Processors,” IEEE Transactions on 
Parallel and Distributed Systems, Vol.19, No.11, Nov. 2008, Pages 1540-1552. 
[4] Reinaldo Bergamaschi, et al., “Exploring Power Management in Multi-Core Systems,” Asia and South Pacific Design 
Automation Conference, 2008. ASPDAC 2008, Pages 708-713.  
[5] Qi Yang et al, "Energy-aware partitioning for multiprocessor real-time systems," Parallel and Distributed Processing 
Symposium, 2003. Proceedings. International , April 2003 
[6] J. Zhou, et al., “Energy-Efficient Dynamic Task Scheduling Algorithms for DVS System,” ACM Transactions on Embedded 
Computing System, Vol. 7,No. 2, Article 17 
[7] Dongkun Shin, et al., “Dynamic Voltage Scaling of Mixed Task Set in Priority-Driven Systems,” Proceedings of the 2004 Asia 
and South Pacific Design Automation Conference (ASP-DAC)'04. 
[8] Haken Aydin, Qi Yang, “Energy-Responsiveness Tradeoffs for Real-Time System with Mixed Workload,” The 10th IEEE 
Real-Time and Embedded Technology and Applications Symposium, 2004. Pages 74-83. 
[9] B. Mochocki, X. Hu, G. Quan, “Transition Overhead-Aware Voltage Scheduling for Fixed-Priority Real-Time Systems,” ACM 
Transactions on Design Automation of Electronic Systems , Vol. 12, Issue 2, Article No. 11, 2007. 
[10] G. Quan, X. Hu, “Energy Efficient DVS Schedule for Fixed-Priority Real-Time Systems,” ACM Transactions on Embedded 
Computing Systems, Vol. 6, Issue 4, Article No. 29, 2007 
[11] R. Jejurikar, R. Gupta, “Dynamic Slack Reclamation with Procrastination Scheduling in Real-Time Embedded Systems,” 
 1 
 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                   日期：2012年 02月 26  日 
                                 
一、參加會議經過 
此項會議係由日本千葉大學、新加坡資通訊研究中心（I2R）及上海交通大學共同舉
辦，會議重點為探討如何運用資訊(Information)、通訊(Communication)及媒體(Media)等
三種技術(3T) ，進行生物(Biology)、醫學(Medicine)及健康照護(Healthcare)等三項應用
(3A)之研究成果分享。會議地點為日本千葉大學校本部國際會議廳(圖一)。本次會議是
由日本千葉大學申請該國之國家科學推廣會 JSPA (Japan Society of Promotion of Science)
計畫，希望建立亞非地區(Asia-Africa region) 之研究機構合作平台，以推動復健醫療照
顧技術之發展；本次會議係以邀請投稿方式，共有新加坡、大陸、日本、台灣、以色列
等國家之學、研界相關學者專家參加。會議內容包括邀約專家演講 (Keynote Speech)、
邀請與互動演講(Invited/Interactive Talk)、技術綜合討論(Panel Discussion) 及學生專題競
賽(Student Project Competition)海報展示等。 
 
計畫編號 NSC 100-2221-E-182 -052 -  
計畫名稱 多核心即時系統中節能工作排程演算法之研究 
出國人員
姓名 
謝萬雲 
服務機構
及職稱 
長庚大學資工系/醫電所 
會議時間 
2012年 2月 20日
至 
2012年 2月 24日 
會議地點 
日本千葉大學 
會議名稱 
2012 International Symposium on InfoComm & Media 
Technology in Bio-Medical & Healthcare Application 
發表論文
題目 
Smart Belt – Using Two Accelerometers For Gait Detection 
 3 
博士(IEEE Fellow) 及本校李明義教授等五位擔任引言人。 
 
 
 
 
 
圖二、大會徵稿文件 
 5 
二、與會心得 
(1) 邀請 Prof. Ito 為 2012 SETBHA (CGU-NTU Symposium) Keynote speaker：本校參訪團
一行人於研討會晚宴中正式邀請 Prof. Ito 參與本校在今年四月舉辦之 2012 SETHA 研
討會，並擔任 Keynote speaker; Prof. Ito 雖然公務繁忙，但仍欣然接受我們的邀請，預
訂在 2012 年 4 月 10 日前來本校三天，除了給予專題演講外，也將進一步洽談千葉
大學與長庚大學在生醫工程領域之合作機會。 
 
 
圖四、本校參訪團一行人與 Prof. Ito 合影 
(2) 與日本千葉大學 Research Center for Frontier Medical Engineering (CFME)簽訂合作備
忘錄(MOU)：由於 Prof. Ito 為千葉大學前瞻醫工研究中心的主任，該中心成立於 2003
年，研究教授共 19 位，該中心研究方向與長庚大學工學院生醫中心、健康老化中心
研究有高度相關性，如果雙邊有進一步合作機會，相信可以激盪出更多研究的火花，
產出更好的研究成果。 
(3) 上海交通大學 Med-X 研究中心之後續合作規畫：本次研討會第一個 keynote speaker
是上海交通大學的戴尅戎教授，他骨科醫師也是生物力學的專家，目前是中國國家工
程學院的院士。戴院士是大陸第一位將形狀記憶合金用於醫學研究領域之醫師，被譽
為大陸形狀記憶合金醫學應用先驅。他目前積極與上海交通大學機械學院合作，為中
國最早將 CAD/CAM、逆向工程與快速原型等技術應用於訂製型(個人化)人工關節之
 7 
send packet, (2)When to send, (3)Which power level to be used for Transmission, (4) How 
to recover failed transmission 等問題。 今年 I2R 在今年 3T-in-3A 研討會中分別展示了
他們在穿戴式資料收集器的硬體設計以及資料分析 data-mining 的研究進展，很多觀
念都跟鍾院長於健康老化會議中指導我們的方向很接近，因此我們必須謹慎面對這樣
的良性競爭，畢竟我們要比的是看誰做的好、做的快。 
 
三、考察參觀活動 
會議第一天由大會安排貴賓拜訪千葉大學校長 Prof. Saito，並由該校先進醫學工程研
究中心主任 Prof. Ito、國際交流中心主任 Mr. Gomita, 工學院醫學系統工程系前任系主任
Prof. Yu 以及Prof. Igarashi等人陪同。會中Saito校長表達歡迎之意，國際交流中心Gomita
主任則介紹了千葉大學概況。千葉大學是在 1949 年成立，目前有 9 系 13 所，教職員 2888
位(教授 459、副教授 428、助理教授 320)，學生 15089 人(大學部 11185、研究生 3796)，
其中國際學生共 1025 人(含台灣留學生 20 名) 。該校在全球 500 大排名 298 名(生醫領
域排名 157 名) ，其姊妹校共有 13 所(包括台灣大學在內)。 
 
 
 
 
圖六、日本千葉大學接見與會貴賓(前排右一為大會主席伊藤教授, 右二為 Prof. Saito   
校長, 左二為新加坡 I2R 陳志寧博士, 左一為本校李明義所長;後排左二為本人) 
國科會補助計畫衍生研發成果推廣資料表
日期:2012/09/26
國科會補助計畫
計畫名稱: 多核心即時系統中節能工作排程演算法之研究
計畫主持人: 謝萬雲
計畫編號: 100-2221-E-182-052- 學門領域: 計算機結構與計算機系統
無研發成果推廣資料
專任助理 0 0 100%  
期刊論文 0 1 100% 
本計畫之研究成果已完成期
刊論文的撰寫，並投稿於
Journal of Parallel and 
Distributed Computing 國
際 期 刊 ( 稿 件 編 號 : 
JPDC-12-239； 5-year IF: 
1.116)，目前進度仍在審稿
中。 
研究報告 /技術報
告 0 0 100%  
研討會論文 1 1 100% 
篇 研究成果已發表之國外研討會: 
Wann-Yun Shieh, Hsin-Hong 
Cho, ＇Smart Belt – Using 
Two Accelerometers For 
Gait Detection,＇ 2012 
International Symposium 
on InfoComm & Media 
Technology in Bio-Medical 
& Healthcare Application, 
2012 (2012 IS-3T-in-3A in 
Chiba, Japan) 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次
 
其他成果 
(無法以量化表達之
成果如辦理學術活
動、獲得獎項、重要
國際合作、研究成果
國際影響力及其他
協助產業技術發展
之具體效益事項
等，請以文字敘述填
列。) 
本計畫開發之多核心即時系統低電耗工作排程演算法，應用於隨身生理訊號感測
收集系統相關成果，在參加由新加坡 Institute for Inforcomm Research 團隊、
日本 Chiba University 團隊、上海交通大學團隊、與本校長庚大學團隊共同合作
的 2012 International Symposium on InfoComm & Media Technology in 
Bio-Medical & Healthcare Application, 2012 (2012 IS-3T-in-3A)跨國研討會
中，與新加坡的 IIR(類似台灣的工研院)隨身嵌入式系統研發團隊曾有熱烈的討
論，並相約於 2013 年互訪參觀研發成果。本校長庚大學並已爭取到 2013 
IS-3T-in-3A 於台灣舉辦之主辦權。 
 成果項目 量化 名稱或內容性質簡述 
科 測驗工具(含質性與量性) 0  
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100字為限） 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500字為限） 
隨著微處理器朝向多核心架構發展，許多低電耗的多核心工作排程演算法(multi-core 
energy-aware task scheduling algorithms)在學術界上的討論也非常熱烈。然而我們發
現大部分的現行研究，都以即時系統(real-time systems)中的週期性工作(periodic 
tasks)作為工作排程的對象。而即時系統中，非週期性工作(aperiodic tasks)，例如使
用者的隨機命令、例外處理、I/O 插斷等，的重要性與週期性工作一樣，都是影響系統效
能與電能消耗的關鍵。在學術界探討＇非週期性工作排程＇議題的研究並不多見，僅有者
也以單核心微處理器的架構為主。因此本計畫的首要課題即是設計低電耗的多核心非週期
性工作排程演算法。此外，本計畫的另一課題是探討晶片在調整電壓以進行低電耗模式執
行工作時，所帶來的額外電能消耗(overheads)效應。過去此效應通常被忽略不計。然當
晶片製程進入 20nm 之際，此效應已在許多研究中被報導。本計畫即對此效應做一探討，
並在設計低電耗工作排程演算法中加以考量。 
本計畫經執行後，共產出兩項理論與技術創新之研究成果： 
(1)Energy-Efficient Tasks scheduling Algorithm for Dual-core Real-time Systems: 
本本研究成果設計了一個雙核心微處理器的工作排程模型，並利用該模型實作了一個非週
期性工作的排程器執行我們設計的排程演算法。該演算法會動態地對等待中的非週期性工
作計算其效能需求(utilization)與可能造成處理器核心的工作負擔(workload)，以計算
出最佳的排程時間與供應電壓。本研究成果除了以實驗模型驗證效能外，特別的是，我們
將本技術應用於實際的嵌入式即時系統的開發中，包括支援行動通訊的微處理器工作排程
