 1
一、 摘要 
隨著網路的發達及企業的全球經營方式，檔案資料大部分儲存在不同的區域網路，所
以檔案管理系統將面臨檔案的存取效率以及確保取得的檔案內容一致的問題。針對檔案分
散儲存與檔案存取的問題，一般解決方法是將檔案集中儲存管理或檔案集中管理後，透過
備份或複製檔案系統與資料到其他區域網路。雖然檔案集中管理可以確保檔案一致性，卻
造成外部網路的使用者須付出更多時間與網路頻寬來存取檔案資料。而採取異地備援或檔
案複製的方法將造成不必要的資料儲存空間與頻寬浪費，且此方法須搭配複雜的資料同步
機制。本論文提出一個透過階層式邏輯檔案索引與快取的設計建立於分散式文件管理系統
中的檔案存取機制，在現有網路頻寬與架構下，提供更有效率的檔案傳輸與文件管理。 
關鍵詞 : 分散式文件存取、階層式索引、適應性檔案管理、檔案快取、集中管理、分散儲
存。 
Abstract 
More and more documents are stored dispersedly in geographically distributed branches. How to 
keep the consistency of document states, and how to guarantee the performance of document 
accesses are the major problems for most enterprise, especially for the administrator of 
information management departments. To satisfy enterprises’ needs, this paper is proposed to 
provide an efficient and high performance distributed document access system for geographically 
separated users. With our proposed method, enterprises can upgrade the document management 
efficiency based on currently existent network topology and architecture. 
The high performance distributed document management system (DMS) is composed of two 
major modules, and they are the logic document index management module, and the file server 
module. Logic document index management module serves the adaptive distributed document 
access mechanism and meta-data management which is independent of physical document 
storages, and guarantees the consistency of document states. Besides, it supplies cache 
management functions with the same performance as local document access no matter where 
users are physically located. 
Keywords：distributed document access, hierarchical index, adaptive document management, 
document cache, control management, distributed storage. 
二、 前言 
現今文件管理系統的檔案資料大部分儲存在不同的區域網路，且文件檔案存放越來越
分散，如何做到有效率的管理十分重要。對於此種情況，使用者取得檔案資料的存取效率
以及確保使用者取得的檔案內容一致的問題變得更加複雜與繁瑣。 
目前企業存取檔案都是透過使用比區域網路(LAN)還要慢的網路環境，即使透過寬頻
的網際網路(Internet)，也只能達到 Mbit/sec 的頻寬，何況大部分企業分公司之間幾乎都只
有 T1 的頻寬。所以如何讓所以檔案系統使用者能在現有的架構下，還能有效率的存取分散
於各地的大量文件或大型檔案，是目前企業應該積極解決的課題[1][2]。 
以上所面臨的問題可分為：(一)文件內容一致性問題：由於檔案內容可能不斷持續在更
 3
完整的知識文件樹，以保證資料的一致性。另外一個嚴重的缺點則使用者必須與檔案儲存
系統在相同網域才能使用[8]。 
4. 集中管理、分散儲存： 
為了提供企業一致性的知識地圖，企業需要有統一的文件樹，同時，為了文件傳輸的
效率，也必須將文件分散儲存在各地。因此，文件集中管理、分散儲存是目前企業對於知
識文件管理的首要目標[14]。本論文目的就是設計與實做一個有效率的分散式文件管理系統
來滿足企業的需求，同時希望透過多層次的邏輯文件索引的設計以及快取的設計，來免除
複雜的資料同步問題[9][17]，如圖四所示，客戶端透過本身的文件樹發送一個文件請求至文
件伺服器(Document Server)，文件伺服器會找尋該客戶端要求的文件所儲存的文件存儲器，
並傳送該客戶端資訊至此文件存儲器，而每一個文件存儲器提供文件給文件伺服器所請求
的客戶端，且客戶端各自有不同的文件系統。 
分散式儲存管理使用備份或複製檔案系統與資料以確保文件內容一致性，其中除了完
整備份外，映射(Mirror)方法也是常用的[15]，映射的運作可分為同步跟非同步，映射同步
為當發生在資料更新變動同時系統會做備份更新動作，而映射非同步為系統週期性的依照
記錄檔來更新變動資料[9][11]。此方法固然可保持資料可用性，但確會造成大量的傳輸負
荷，系統一再做更新資料，但不見得每筆資料都是重要且使用率高，所以常造成系統運作
頻繁[16]。 
四、 適應性檔案存取機制 
本論文主要在不改變企業現有的網路架構與頻寬的情況下，大量提升文件管理與存取
效率，提供跨國企業完整的文件管理解決方案。此方法的重點在於設計透過集中管理的知
識地圖，提供使用者一個一致性的存取介面，透過這個介面，使用者可以從任何地方進行
文件存取的動作，而做到文件集中管理、分散儲存的管理機制。另一重點則是實體文件分
散儲存，也就是說，使用者在存取文件之前不需要知道實體檔案的儲存位置。而為了整個
檔案存取的效率，系統必須能自動適應使用者所在位置，並且動態的調整回復實體檔案的
檔案伺服器。 
透過快取機制(Cache)的設計、多層邏輯檔案索引等使用者適應性機制的建立，所有的
使用者將只透過本地端的檔案伺服器存取文件，如此可讓 99%以上的文件存取效率與本地
文件存取效率幾乎一樣快。系統如果固定使用者存取實體檔案的伺服器路徑，對使用者來
說，將是非常沒有效率的設計，其方法的系統架構如圖五所示，各個客戶端的文件樹透過
中間層的分散式檔案伺服器(Distributed File Server)，對應至各個不同地區儲存器的實體文
件。黃色部分為檔案伺服器之間互相快取(Cache)的實體檔案[13]。 
此系統的軟體架構如圖六所示，整個適應性分散式文件存取系統大致上可以分為兩個
主要子系統，分別為 DMS 伺服器(Document Management System)以及 DMS 檔案伺服器。
一個DMS可以連接多個DMS檔案伺服器，每DMS檔案伺服器也會藉由內部的Cache Policy
模組連接到其他DMS檔案伺服器或透過索引分割樹(Index Partitioner)來與下一階層的DMS
檔案伺服器互動。以下將敘述本架構的內部設計。 
 DMS 伺服器 
DMS 伺服器主要負責接收所有的使用者的請求。對於 Metadata 的相關請求，則於
DMS 伺服器直接回應，如果是對於遠端文件的上傳或下載請求，則會透過 Adaptive File 
 5
 Index Partitioner 模組 
此模組主要的目的是建構階層式 DMS 檔案伺服器的管理模組。當有特殊或機
密的資料需要特別保護或儲存、備援時，或當分公司所屬地區地理範圍比較廣泛
時，可以透過這個模組將 DMS 檔案伺服器負責的文件，在委由另一個可用度
(availablility)以及可靠度(reliability)比較高的 DMS 檔案伺服器負責管理。如同文件
索引分割樹一般，DMS 檔案伺服器的索引分割樹將自己負責的部分文件地圖再細
分成幾個更小的子地圖，而將該子地圖對應的實體檔案委由其他 DMS 檔案伺服器
儲存管理。 
 Cache Policy 模組 
Cache Policy 模組負責管理當地使用者存取文件時，發生 Cache miss 的文件實
體檔案。目前我們規劃的 Cache Policy 如下： 
1. Cache in policy 
我們預計將文件快取的模式分為以下三種：要求模式(On-Demand)、定期
模式(Periodical)以及手動模式(Manual)。要求模式是指當使用者有文件下載，
但發生 Cache miss 時，立刻啟動快取機制(Cache)，將檔案從遠端的 DMS 檔
案伺服器快取到目前的 DMS 檔案伺服器。定期模式則是每天固定時間將其他
DMS 檔案伺服器的檔案快取到目前的 DMS 檔案伺服器。手動模式則是管理
者隨時可以決定要快取那個檔案到 DMS 檔案伺服器中，可以提供臨時的檔案
傳輸需求。至於系統將採用哪種模式的 Cache 策略則由管理者自行決定。 
2. Cache 管理演算法 
我們針對分散式文件存取的特性，設計更有效率的演算法。以下是我們
設計 Cache 管理的概念如圖八，使用者若調閱文件，系統將配置一個最近的
檔案伺服器，並查詢該文件是否儲存於此檔案伺服器，如果有直接下載文件，
否則確認 Cache 是否有該檔案；如 Cache 有該檔案則下載文件，否則 DMS
伺服器會傳送該檔案被儲存最近的檔案伺服器資訊並複製目標檔案，且 Cache
該檔案。使用者調閱文件，透過此演算法決定出下載路徑與系統是否啟用快
取機制。 
3. Cache out policy 
我們將依照管理者設定的 Cache Size，在 Cache Size 剩下不到管理者設定
的 threshold 時，於半夜啟動 Cache out 機制。而 Cache out 的演算法則採用 LRU 
（Least Recently Used）的方式[12]，將最少用到的快取檔案清除。 
 Data Transmission 
此模組主要負責檔案的傳輸，需要特別獨立此模組是因為部分產業的檔案
Size 非常大，需要特別管理上傳的檔案格式、以及傳輸時間。尤其當透過 Web 的
方式上傳、下載檔案時，常會發生暫停(timeout)的問題，必須透過資料傳送(Data 
transmission)模組專責處理相關問題。 
 Index Bridge 
此模組負責將邏輯的檔案索引，對應到實際的檔案儲存位置。例如可以將
DMS 伺服器的\root\SOP\請假標準程序，對應到 DMS 檔案伺服器 FS1 的\SOP\請
假標準程序，再對應到 FS1 的 d:\00000001\00000002.doc。或當 FS1 後端的檔案系
統是 NFS 時，則必須對應到/user/home/files_server/001/003.doc。透過這個模組的
 7
六、 結論 
目前企業多屬跨國公司，企業最重要的智慧資產就是文件，往往會因為文件維護單位
的設立地點不同而導致文件散落在各個地區，此外台灣資訊部門對於關連式資料庫的技術
依賴性太高，導致有很多新的系統功能無法被快速開發，多層次的邏輯檔案索引，以及適
應檔案伺服器的 Cache 即是最好的解決辦法。 
本論文設計的適應性的分散式文件存取系統，提供自動化的適應能力，根據使用者來
源，調整文件資料回復的檔案伺服器，以及設計邏輯檔案索引與 Cache 來加強文件存取的
效能，期望能有助於建構適用於目前企業網路架構與頻寬的高效能分散式文件管理系統。 
參考文獻 
[1] A.Muthitacharoen, B. Chen, D. Mazieres, “A Low-bandwidth Network File System,” in 
Symposium on Operating Systems Principles, pp. 174-187, 2001. 
[2] C.I. Lee, H.H. Lin, B.S. Luo, and Y.G. Wang, “System and Method for Synchronizating 
Documents between Multi-Nodes,” Patents of Chinese Taipei, No. 2330713, Sept. 2004. 
[3] P. Biswas, Nashua, “Issues in Cache Management Algorithms for Commercial Software 
Systems,” in Proc. of 1st Workshop on Software and Performance, pp. 76-77, 1998 
[4] A. Chankhunthod, P. B. Danzig, C. Neerdaels, M. F. Schwarts, and K.J. Worrell, “A 
Hierarchical Internet Object Cache,” in USENIX Annual Technical Conference, pp. 153-164, 
1996 
[5] M. B. Blake, P. Liguori, “An Autonomous Decentralized Architecture for Distributed Data 
Management and Dissemination,” in IEICE Trans. on INF. & SYST. Vol. E84-D, No 10, Oct. 
2001. 
[6] G. Chen, C. Wang and F. Lau, ”Building a Scalable Web Server with Global Object Space 
Support On Heterogeneous Clusters,” in Proc. of IEEE International Conf. on Cluster 
Computing, pp.313-320, Oct.2001. 
[7] M. G. Baker, J. H. Hartman, M. D. Kupfer, K. W. Shirriff and J.K. Ousterhout, 
“Measurements of a Distributed File System,” in Proc. of 13th Symp. On Operating Systems 
Principles, pp. 198-212, Oct. 1991. 
[8] J. H. Howard, M.L. Kazar, S. G. Menees, D.A. Nichols, et al., ”Scale and Performance in a 
Distributed File System,” ACM Transactions on Computer Systems, 6(1): 51-81, Feb. 1988. 
[9] T.Y. Huang, T.Y. Chen, P.Y. Chuang, “Constructing a Scalable Universal File Cache in a 
Heterogeneous High-Speed Distributed System,” in Proc. of Symp. on Operating Systems 
Design and Implementation(OSDI’04), Dec., 2004. 
[10] Euthimios Panagos, Alex Delis, “Selective Replication for Content Management 
Environments, ”IEEE Internet Computing, Vol.9, No.3, pp45-51, June, 2005. 
[11] Thomas C. Jepsen, ”The Basics of Reliable Distributed Storage Networks,” IT Pro, June, 
2004. 
[12] S.J. Lee, and C.W. Chung, “VLRU: Buffer Management in Client-Server Systems,” in IEICE 
Trans. on Information and Ssytems, Vol. 83-D, No. 6, pp. 1245-1254, June 2000. 
[13] T.D.N. Francisco, “Cooperative Caching Middleware for Cluster-Based Servers,” in 10th 
IEEE Int’l Symposium on High Performance Distributed Computing, IEEE Press, pp303-314, 
Aug. 2001. 
[14] Jianliang Xu; Jiangchuan Liu; Bo Li; Xiaohua Jia, “Caching and Prefetching for Web 
Content Distribution,”  Computing in Science & Engineering, Vol. 6, No. 4, pp. 54-59, Jul. 
2004. 
[15] M. Wiesmann, F. Pedone, A. Schiper, B. Kemme, and G. Alonso, “Understanding Replication 
in Databases and Distributed Systems,” Proc. 20th Int’l Conf. Distributed Computing 
 9
 
圖三、分散管理、分散儲存的文件管理系統架構 
 
圖四、集中管理、分散儲存的文件管理系統架構 
Client C
Doc. Tree
Client B
Doc. Tree
Client A
Doc. Tree
Distributed File Server
Japan America Taiwan
Yellow Color: File Cache
White Color: Original File  
圖五：具快取機制的分散式文件管理系統架構圖 
