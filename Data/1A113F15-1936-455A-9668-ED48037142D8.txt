 2 
亟需一個整合性的開發以及測試環境，如
此將有助於在無線感測網路上發展和普及
運算相關的應用。 
 
二、研究目的 
 
針對上述問題, 本計畫將開發一個針
對無線感測網路設計的整合性開發環境
(Integrated Development Environment, 
IDE)，主要包含程式開發工具，無線感測
網路模擬環境以及整合式圖形介面開發環
境三大部分： 
1. 程式開發工具：針對無線感測網路的硬
體架構研發下列系統軟體工具，供無線
感測器作業系統及應用軟體開發之
用。主要包含編譯器（Compiler）、組
譯 器 （ Assembler ） 及 反 組 譯 器
(Disassembler)、連結器 (Linker)，以及
除錯器（Debugger）。 
2. 無線感測網路模擬環境：包含無線感測
器仿真器 (Sensor processor emulator)、
作 業 系 統 模 擬 器  (SensorOS 
simulator)，以及無線感測網路模擬器 
(Sensor network simulator)。 
3. 整合式圖形介面開發環境：包含程式開
發環境、圖形化程式編輯及除錯工具，
以及網路模擬環境。 
本計畫為通用無線感測器平台研發計畫(A 
General Wireless Sensor Platform Design) 
的子計畫之一，和其他子計畫的關聯性如
圖一所示。本計畫將依據其他子計畫所開
發的無線感測處理器指令集，作業系統
(SensorOS)及中介軟體提供的應用程式介
面(API)，分別設計程式開發工具，感測器
模擬器，以及無線感測網路的模擬及測試
環境。透過這些工具的整合，能夠簡化程
式開發的流程，並能根據不同的應用需
求，迅速開發出供無線感測網路使用的應
用程式。 
本計畫所要完成的整合開發及測試環
境除了提供其他子計畫使用外，由於採取
開放式的架構，因此能夠移植到不同的硬
體架構，有效節省此類工具的開發成本。
此外無線感測網路模擬器將能夠使用於目
前現存的無線感測網路架構，提供了一個
客觀的環境來進行本計畫所提出無線感測
網路架構的測試，而模組化的設計使其能
夠滿足未來各種無線感測網路架構的需
求。 
 
三、文獻研討 
 
1. CGEN (CPU tools GENerator) 
CGEN[7]是由 Red Hat 主導開發的程
式開發工具產生器， 它提供了一個發展架
構用來產生和 CPU相關的系統發展工具，
例 如 組 譯 器 (assembler) ， 反 組 譯 器
(disassembler)，以及模擬器(simulator)等。
CGEN 提供了一個描述語言用來定義 CPU
的組織架構，並藉由描述檔案來產生上述
的工具。CGEN 本身是由 Scheme 語言(衍
生自 LISP)[29]寫成，透過 GNU Guile直譯
器執行。 
2. SimpleScalar 
SimpleScalar[30]是由一系列工具所組
成，提供一個軟體架構用來進行程式的效
能分析，硬體架構的模擬及分析，以及軟
硬體的整合驗證(co-verification)等功能。其
中模擬器可以進行不同精確度的模擬，並
且被許多和計算機硬體架構相關的論文用
來評估他們所提出的硬體架構。除了模擬
器之外，SimpleScalar包含了視覺化的效能
評估工具以及除錯和驗證工具。目前
SimpleScalar能夠模擬Alpha，PISA(Portable 
Instruction Set Architecture)，ARM，以及
x86指令集，並透過定義硬體架構的方式讓
模擬器的實作不會受到不同硬體架構的影
響。由於採用開放原始碼授權，使用者得
以自行擴充功能或支援新的硬體架構。 
3. ATEMU ： Sensor Network 
Emulator/Simulator/Debugger 
Atemu[1]是由 Maryland 大學研發，供
以AVR處理器架構為基礎的感測器使用的
網路模擬器及除錯器，主要包含 atemu 模
擬器核心以及 xatdb 圖形除錯環境兩大部
分，並且支援MICA2感測器平台所使用的
周邊裝置。Atemu 能夠對於大型的感測網
路進行高精確度的模擬，並且能夠加入對
其他感測器平台的支援，讓異質系統能並
存於同一個感測網路環境之下。因此 atemu
能夠節省購置實體感測器的高昂成本，同
時解決了進行測試時所面臨的感測器部署
 4 
式 碼 轉 換 成 由 RTL(Register Transfer 
Language)[27]構成的中間碼，經過對RTL 
中間碼的處理及最佳化後，再將RTL 中間
碼轉換為目標平台使用的組合語言程式
碼。由於RTL 本身和硬體架構及程式語言
無關，因此相同的RTL 中間碼處理過程可
以套用在不同平台上，也就是每個程式語
言必須將所產生的語法解析樹(Parse Tree)
轉換成RTL 語言來表示；而對於各種硬體
架構，也必須負責將RTL 轉換成組合語
言，這也是GCC 具有跨平台特性的原因。
由於編譯器具有連結GCC 前端及後端的
作用，因此本計畫將利用子計畫一提供的
無線感測處理器指令集架構制定指令集描
述檔，進而開發出編譯器產生器(compiler 
generator)。 
2. 組譯器／反組譯器 
 對於組譯器，本計畫將利用先前獲得
的指令集描述檔透過組譯器產生器
(assembler generator)輸出組譯器原始碼。產
生的主要檔案為encode.c，透過將指令集依
照其功能及語法分群，每一群指令將由相
同的編碼函式(encode function)處理。至於
反組譯器也是透過組譯器產生器以類似的
方式產生，主要的差異在於產生出的
decode.c 是將機器碼轉成組合語言指令。 
3. 連接器 
 由於CGEN 本身並未產生連接器，但
由於GLD(GNU Linker)為GNU Binutils 的
成員之一，因此就像GAS(GNU Assembler)
一樣具有跨平台的特性。本計畫將開發連
接器產生器，能夠根據指令集描述檔產生
出所需的連接器原始碼。 
4. 除錯器 
 和連接器一樣，CGEN 並無法產生除
錯器，但是能產生指令集模擬器(instruction 
set simulator)，因此本計畫將擴充其功能，
利用先前產生的反組譯器，並以 GDB 
(GNU Debugger)作為基礎產生出除錯器。
由於 GDB 也是 GNU Binutils 的工具之
一，同樣也具備跨平台的特性，因此提供
了理想的除錯器發展基礎。本計畫所要發
展的除錯器將包含 GDB 提供的除錯功
能，像是遠端除錯，任意數目中斷點
(breakpoint)以及監視點(watch point)的設定
等等。 
II. 第二年 
本計畫所開發的無線感測網路模擬器
目前支援Linux-based的感測器，模擬器包
含以下六大元件： 
一、使用者介面 (User Interface) 
二、模擬器核心 (Simulator Kernel) 
三、協定堆疊 (Protocol Layer) 
四、通道模型 (Channel Model) 
五、環境模型 (Environment Model) 
六、模擬器模組 (Simulation Module) 
使用者介面提供設定模擬參數與監控模擬
的功能。模擬參數的設定包括感測網路節
點屬性設定、事件觸發設定、節點位置部
署、協定設定與通道設定。 為了使設定的
參數能夠在異質平台上交換，所以將設定
的參數轉換成XML型態傳送到模擬器核
心，當模擬器核心接收到XML文件，將會
使用XML剖析器讀取所有參數以完成初始
化設定。 在模擬器開始進行模擬時，節點
所產生的資訊與狀態也會即時呈現在使用
者介面上，並且可以將某些特定節點暫停
執行或者重新執行，以達到模擬監控的效
果。 
模擬核心負責整個模擬器的監控。此
模擬器具有模擬真實應用程式的功能，使
用者能夠將實體裝置上的應用程式在不經
修改下直接載入模擬器上執行。 原先使用
的虛擬機器是採用開放原始碼專案
Skyeye，但是在舊版的Skyeye具有執行效率
上的缺陷，所以對模擬器造成相當大的負
載；因此目前採用執行速度較快的Qemu作
為虛擬機器的核心，明顯大幅地提升執行
效能。 藉由Qemu採用動態指令轉換的技
巧，將Qemu上執行的指令會轉換到PC的
X86指令集，以達到高速仿真的效果。 因
此在模擬器上能夠執行編譯器所產生的二
元碼，此外還提供Linux系統呼叫的轉換機
制以執行真實的Linux系統呼叫。 
在協定堆疊中，目前只支援簡單的廣
播傳送機制(Broadcast)，但是在設計上，將
以網路分層的方式來建構，在各層具有不
同的協定可供選擇，使用者也可以自行撰
寫模組載入到適當的層級。 當模擬執行
時，會根據所設定的協定來進行模擬，使
用者透過模擬器來驗證其協定演算法的正
確性，以及進行效能評估。 
 6 
本計畫對於無線感測網路模擬環境的研究
重心，將專注於如何讓 RTI 達到即時模擬
以及高精確度的要求，同時又維持模擬效
能。並以提升 RTI在超高速網路(如Myrinet
以及 Infiniband)的執行效能及發展高效能
RTI作為研發目標。 
 
五、結果與討論 
 
下面我們歸納本計畫在這三年的主要成果: 
I. 第一年 
研究及擴充CGEN的硬體描述語言，成
為本計畫使用的平台描述語言。並且定義
指令集描述檔以及硬體資源描述檔的格
式。完成各項程式開發工具產生器的模
組：針對ARM處理器架構，建構出一套整
合開發平台的雛形。主要包含以Eclipse[10]
為基礎的圖形介面開發環境、適用於ARM
處 理 器 架 構 的 GCC cross compile 
toolchain，並整合了 GDB除錯器以及
ARMulator指令模擬器。 
II. 第二年 
開發支援Linux-based感測器的無線感
測網路模擬器，具備真實程式碼模擬、支
援Linux POSIX API，以及可擴充性，延展
性，模組化的模擬器架構。開發無線感測
網路模擬器的圖形介面，用以設定模擬環
境與監控模擬執行。 
III. 第三年 
有關無線感測網路模擬器(SEMU)的
研究，則是進一步延伸第二年的成果，提
出如圖一之階層式架構，包含虛擬機器
(VM)、通訊(Communication)、虛擬作業系
統(Virtual OS)、模組(Module)、 原生作業
系統(Native OS)等五個層次。 
1. VM Layer 
虛擬機器層建構於Linux平台之上，提
供快速且真實的感測器節點模擬。每一個
虛擬節點(Virtual Node)模擬一個真實節點
(Real Node)，一個虛擬節點可包含多個虛擬
機器，並執行多個程式；不同虛擬節點間
則須經由通訊層(Communication Layer)溝
通。為了達到快速模擬，SEMU藉由Qemu
所採用的Dynamic Binary Translation (DBT)
以及Linux System Call之轉換技術，讓感測
器應用程式可以直接執行而不需模擬整個
感測器作業系統。 
2. Communication Layer 
通訊層包含三個部份︰通訊器
(Communicator)、閘道器(Gateway)以及連結
器 (Connector)。通訊器提供VM Layer與
Virtual OS Layer之間的溝通。閘道器負責
Virtual OS Layer與Real Node之間溝通，主
要是收送Real Node的封包以及感測資料。
至於連結器則是建立連線到GUI。 
3. Virtual OS Layer 
此層次扮演控制中心的角色，負責協
調整個模擬過程。BootLoader負責初始化模
擬的前置動作，接著啟動SIM Kernel。BLR 
Shell提供BootLoader的命令列界面。SIM 
Kernel啟動之後會監控整個系統運作，主要
是協調數個Virtual Node和模擬狀態。此
外，SIM Kernel要負責將虛擬節點的要求傳
送到Module Layer或Native OS Layer。透過
OS Shell可供使用者動態控制模擬過程，例
如暫停模擬。 
4. Module Layer 
提供SIM Kernel使用的功能，目前提供
以下元件： 
SIMState：記錄整個模擬之狀態與管理
各個物件。 
Configer：初始與設定整個模擬系統之
參數。 
Logger：記錄Virtual Node所產生的訊
息，並且將之分類。 
Scheduler：控制多個Virtual Node同時
進行模擬。 
Time Manager：管理Virtual Node的時
間，確保模擬依照事件發生順序進行。 
Node Model：描述Virtual Node所包含
的裝置，例如：通訊裝置、感測裝置。 
Environment：提供描述模擬環境的元
件，包含Virtual Node之位置、障礙物之設
置。 
5. Native OS Layer 
SEMU的最底層是Native OS Layer，當
應用程式需要某些服務時可經由Native OS 
Layer來處理。 
6. Distributed GUI 
我們以JAVA實作圖形化介面來顯示
模擬的情況，並提供設定檔編輯器讓使用
者設定模擬環境，例如設定Virtual Node的
 8 
許虛擬節點完成其所要求的動作。 
總計在三年的時間內，基於本計畫研
究成果所提出的學術論文統計如下：碩士
論文 4篇 [9][18][19][35]，會議論文 4篇
[20][21][32][33]，期刊論文1篇[34]。 
 
六、計劃成果自評 
 
本計畫三年來的研究成果，大致達到
計劃預期之目標。對於無線感測網路模擬
環境，目前已完成的模擬器可支援以ARM
為核心的感測器架構，並支援以Linux為運
作環境的感測器程式模擬。該模擬器能有
效節省感測器硬體的開發成本。原因如
下：第一、在實體平台未完成之前便能在
根據硬體規格所開發的模擬器上進行軟體
開發，不但節省軟體開發時間，也藉此達
到Hardware/Software Co-design的目的。第
二、針對已開發完成的硬體，模擬器仍可
讓程式設計師迅速地測試應用程式的正確
性，省去製作及載入韌體的時間。第三、
由於模擬器的架構具有很高的可擴充性，
一旦有新的硬體架構設計出現，便能迅速
開發出對應的硬體模擬器。而模組化之設
計也方便使用者加入新的功能至整合開發
環境中。而在整合式圖形介面開發環境方
面，此外也完成無線感測網路模擬器的圖
形介面，用以設定模擬環境與監控模擬執
行。而具可延展性的設計，使模擬器能支
援大量感測節點的模擬。 
 
七、參考文獻 
 
[1] Atemu, 
http://www.isr.umd.edu/CSHCN/researc
h/atemu/ 
[2] J. Agre, L. Clare, “An integrated 
architecture for cooperative sensing 
networks”, IEEE Computer Magazine 
(May 2000) 106–108. 
[3] F. Akyildiz, W. Su, Y. 
Sankarasubramaniam, E Cyirci. 
“Wireless Sensor Networks: A Survey”, 
Computer Networks, 38(4): 293-422, 
2002. 
[4] R. Bagrodia, “Parallel Languages for 
Discrete-Event Simulation Models”, 
IEEE Computational Science and 
Engineering, Apr-Jun 1998, pp. 27-38. 
[5] R. Bagrodia, R. Meyer, M. Takai, Y. 
Chen, X. Zeng, J. Martin, B. Park, H. 
Song, “Parsec: A Parallel Simulation 
Environment for Complex Systems”, 
Computer, Vol. 31(10), October 1998, 
pp. 77-85. 
[6] Lokesh Bajaj, Mineo Takai, Rajat Ahuja, 
Rajive Bagrodia, “Simulation of 
Large-Scale Heterogeneous 
Communication Systems”, To appear in 
Proceedings of MILCOM'99, November 
1999. 
 
圖三  協同模擬架構 
 10 
architecture”, International Workshop 
Conference IEEE-EMBS, Hong Kong, 
1998, pp. 1170–1173. 
[32] Chun-Hsien Wu and  Yeh-Ching 
Chung, “Heterogeneous Wireless Sensor 
Network Deployment and Topology 
Control Based on Irregular Sensor 
Model,” Proceedings of International 
Conference on Grid and Pervasive 
Computing (GPC), Lecture Notes in 
Computer Science (LNCS) 4459, France, 
May 2007, pp. 78-88. 
[33] Chun-Hsien Wu, Kuo-Chuan Lee, and 
Yeh-Ching Chung, "A Delaunay 
Triangulation Based Method for 
Wireless Sensor Network Deployment," 
Proceedings of IEEE International 
Conference on Parallel and Distributed 
Systems (ICPADS), USA, July 2006, pp. 
253-260.  
[34] Chun-Hsien Wu, Kuo-Chuan Lee, and 
Yeh-Ching Chung, "A Delaunay 
Triangulation Based Method for 
Wireless Sensor Network Deployment," 
Accepted by Computer Communications 
special issue on Network Coverage and 
Routing Schemes for Wireless Sensor 
Networks. 
[35] Ching-Wen Yu, "SPE –  A 
Programming Environment for Wireless 
Sensor Networks," Master Thesis, 
NTHU, June 2006. 
[36] Xiang Zeng, Rajive Bagrodia, Mario 
Gerla, “GloMoSim: a Library for 
Parallel Simulation of Large-scale 
Wireless Networks”, Proceedings of the 
12th Workshop on Parallel and 
Distributed Simulations -- PADS '98, 
May 26-29, 1998 in Banff, Alberta, 
Canada 
 
Heterogeneous Wireless Sensor Network Deployment 
and Topology Control Based on Irregular Sensor Model 
Chun-Hsien Wu1 and Yeh-Ching Chung1 
 
1
 Department of Computer Science, National Tsing Hua University, 
Hsinchu 30013, Taiwan, R.O.C. 
{chwu, ychung}@cs.nthu.edu.tw 
Abstract. Heterogeneous wireless sensor network (heterogeneous WSN) 
consists of sensor nodes with different ability, such as different computing 
power and sensing range.  Compared with homogeneous WSN, deployment 
and topology control are more complex in heterogeneous WSN.  In this paper, 
a deployment and topology control method is presented for heterogeneous 
sensor nodes with different communication and sensing range.  It is based on 
the irregular sensor model used to approximate the behavior of sensor nodes.  
Besides, a cost model is proposed to evaluate the deployment cost of 
heterogeneous WSN.  According to experiment results, the proposed method 
can achieve higher coverage rate and lower deployment cost for the same 
deployable sensor nodes. 
Keywords: Wireless sensor network, heterogeneous sensor deployment, 
topology control, sensor coverage, irregular sensor model. 
1   Introduction 
Wireless sensor network (WSN) is a key element of the pervasive/ubiquitous 
computing.  With the advancement of manufacturing and wireless technologies, 
many feasible applications are proposed such as industrial sensor networks [4], 
volcano-monitoring networks [10], and habitat monitoring [11], etc.  The 
heterogeneous WSN consists of sensor nodes with different abilities, such as various 
sensor types and communication/sensing range, thus provides more flexibility in 
deployment.  For example, we can construct a WSN in which nodes are equipped 
with different kinds of sensors to provide various sensing services.  Besides, if there 
are two types of senor nodes: the high-end ones have higher process throughput and 
longer communication/sensing range; the low-end ones are much cheaper and with 
limited computation and communication/sensing abilities.  A mixed deployment of 
these nodes can achieve a balance of performance and cost of WSN.  For example, 
some low-end sensor nodes can be used to replace high-end ones without degrading 
the network lifetime of WSN.  Many research works have been proposed to address 
the deployment problem of heterogeneous WSN [3] [5]. 
To achieve a satisfying performance, the deployment of heterogeneous WSN is 
more complicated than homogeneous WSN.  Deployment simulation is essential 
senor node.  In [2], He et al., propose a model with an upper and lower bound on 
signal propagation.  If the distance between a pair of nodes is larger than the upper 
bound, they are out of communication range.  If within the lower bound, they are 
guaranteed to be within communication range.  The parameter DOI (degree of 
irregularity) is used to denote the irregularity of the radio pattern.  It is the maximum 
radio range variation per unit degree change in the direction of radio propagation.  
When the DOI is set to zero, there is no range variation, resulting in a UDG model.  
Zhou et al. [12] extended the previous DOI model as radio irregularity model (RIM) 
based on the empirical data obtained from the MICA2 and MICAZ platforms. 
3 Preliminaries 
3.1   Irregular sensor model 
In this paper, an irregular sensor model is proposed based on the radio propagation 
model inspired from Radio Irregularity Model (RIM) [12] and degree of irregularity 
(DOI) [2].  The irregular sensor model assumes that the sensor node use the same 
radio propagation model for communication and sensing.  For each sensor node, a 
radio propagation range is pre-defined and denoted as Rdef, and the effective radio 
propagation range (Reffective) is decided by the normal (Gaussian) distribution with a 
mean of Rdef and a standard derivation of DOI, where DOI represents for the degree of 
irregularity of Reffective. 
Figure 1 illustrates the radio propagation range under different DOI.  According 
to the “68-95-99.7 rule”, about 99.7% of the values are within three standard 
derivations away from the mean (Rdef) [9].  Thus we define the Reffective is ranged 
from Rdef – 3*DOI (Rmin) to Rdef + 3*DOI (Rmax), and the relationship between Rdef, 
Rmin, and Rmax is illustrated in Figure 2. 
After the effective radio propagation range is calculated, we can use it to derive the 
radio strength model based on the simple transmission formula for a radio circuit 
made up of an isotropic transmitting and a receiving antenna in free space [1]: 
 
Pr / Pt = Ar At / d2 λ2 . (1) 
 
where Pt is the power fed into the transmitting antenna at its input terminals, Pr is the 
power available at the output terminals of the receiving antenna, Ar (or At) is the 
effective area of the receiving (or transmitting) antenna, d is the distance between 
antennas, and λ is the wavelength.  Suppose that Pt, Ar, At, and λ are constants, then 
the received radio power (Pr) is proportional to 1/d2.  Thus, we define the radio 
strength of senor node n at point p as follows: 
 
R(n, p) = (Reffective / d(n, p))2 . (2) 
  
 
Fig. 3.  The relationship between R(n, p) and d(n, p). 
3.2   Some definitions of heterogeneous wireless sensor network 
In this paper, we define a heterogeneous WSN that consists of three types of nodes: 
sink node, high-end senor node (NH), and low-end senor node (NL).  Each node has 
the same communication model and two types of sensor nodes have the same sensing 
model.  The difference between NH and NL is that the pre-defined communication 
and sensing range are different.  The default communication and sensing range of NH 
are defined as RCH and RSH, respectively.  Similarly, RCL and RSL are denoted as the 
default communication and sensing range of NL, where RCH > RCL, and RSH > RSL. 
To evaluate the results of sensor node deployment, we define a deployment cost 
model as: 
 
deployment_cost = (Num(NH)* NH_cost + Num(NL)) / total_coverage_rate . (3) 
NH_cost = (RCH + RSH2) / (RCL + RSL2) . (4) 
 
where deployment_cost is calculated as the total cost of deployed sensor nodes 
divided by the total_coverage_rate produced by these sensor nodes, and NH_cost is 
the difference of sensor node cost between NH and NL.  The sensor node cost is 
determined by two factors: communication distance and coverage area of sensor, 
represented by Rc and Rs2 respectively.  The calculation of total_coverage_rate is 
Thus, the effective communication distance of high-end sensor node fits a normal 
distribution ranged from 24 to 36. 
4.2   Neighbor-info collection step 
At first, a center node for deployment is selected.  The selection of eligible center 
node is starting from sink node, and then expanding to all deployed sensor nodes.  
The criterion of eligible node is based on the available quota for node deployment, 
which is limited by the degree of node defined in the configuration file.  The number 
of deployed high-end and low-end sensor nodes within minimum effective 
communication distance is denoted as Neighbor(NH) and Neighbor(NL).  They will 
be used to decide the deploy ratio of high-end and low-end sensor nodes.  Suppose 
the number of deployable high-end and low-end nodes is denoted as Remain(NH) and 
Remain(NL), respectively.  Then the limit numbers of deployable high-end and low-
end senor node are represented as Equation (6) and (7): 
 
Deploy(NH) = limit degree of center node * Remain(NH) / (Remain(NH) 
+ Remain(NL)) . 
(6) 
Deploy(NL) = limit degree of center node – Deploy(NH) . (7) 
 
If Deploy(NH) ≦ Neighbor(NH), then Deploy(NH) = 0, means that the number of high-
end sensor nodes is sufficient.  At last, if Deploy(NH) + Deploy(NL) > 0, then the 
following deployment step will be processed, otherwise, the deployment process for 
current center node will be terminated and restarted on the next eligible node. 
4.3   Candidates generation step 
In this step, the candidate positions for each type of the sensor node will be generated 
separately.  In heterogeneous sensor node deployment, the symmetric connection 
must be maintained.  It means that the distance between two sensor nodes cannot 
larger than the maximum communication distance of the low-end one.  Besides, the 
overlap of sensor coverage area between two senor nodes has to be considered to 
prevent the sensor coverage area of low-end node to be fully covered by the high-end 
node, which means no coverage gains.  In the following, we will discuss the 
requirement to produce coverage gains while maintaining symmetric connection 
under different conditions: 
− Case I: RCH > RSH and RCL > RSL 
In this case, the communication distance is larger than sensing range.  Figure 4(a) 
illustrates the condition when a low-end node NL is added to a high-end sensor node 
NH.  For NL, if d(NH, NL) < RCL, then the symmetric connection is established, and we 
said that these two nodes are communication-connected.  If d(NH, NL)  (≦ RSH - RSL), 
then the sensor coverage area of NL is fully covered by NH, which means no coverage 
2. If a NL is selected for node deployment, then the candidate positions of two types 
of sensor nodes must be within the minimum effective communication distance of 
low-end senor node.  That is, d(NH, candidate position of high-end/low-end node) 
 min(≦ RCL). 
3. If d(NH, candidate position of low-end node)  (≦ RSH - RSL), then this candidate 
position is discard because the sensor coverage area will be fully covered by NH. 
4. The minimum distance between candidate position and deployed nodes is defined 
as Rmin/sqrt(max_strength), where Rmin = min(RCH) or min(RCL) is the minimum 
effective communication distance of sensor node.  It can prevent the deployed 
sensor nodes are too closed. 
4.4   Scoring step 
After candidate positions are generated for different types of sensor nodes, a scoring 
mechanism to each position is defined as follows: total_score = connection_score + 
coverage_score.  The connection_score is the distance between candidate position 
and center node.  The coverage_score of candidate position is defined as the 
coverage gains when a sensor node is deployed at the candidate position.  The 
calculation of coverage gains is described as follows: At first, a square around center 
node with edge length = 2*max(RS) is filled with grid points.  Based on Equation (5) 
in Section 3.2, the total coverage rate produced by deployed sensor nodes is denoted 
as base_coverage_rate.  Next, the total coverage rate with the contribution of 
candidate position is denoted as target_coverage_rate.  Thus the coverage_score of 
candidate position = target_coverage_rate - base_coverage_rate. 
4.5   Sensor addition step 
After all candidate positions are scored, the candidate with the highest score is 
selected to deploy a new sensor, which has the most coverage gains while maintaining 
the communication connectivity to center node.  If the deploy quota of current center 
node is reached, the next deployed sensor node with available quota will be selected.  
The deployment process will be repeated until the upper bound of deployable sensor 
nodes is reached or no suitable place available to add a sensor node. 
5   Experiments 
In this section, we evaluate the performance of the proposed sensor deployment 
method by comparing sensor coverage rate and deployment cost with several sensor 
node configurations.  A simulation tool written in C++ language is running on an 
IBM eServer 326 (AMD Opteron 250 * 2 and 1GB memory).  The deployment area 
is a 2-D square with 500 × 500 units.  A sink node is deployed at (200, 200).  The 
total number of deployable sensor nodes is ranged from 60 to 360.  Other parameters 
are defined as follows: DOI = 2.0, max_strength = 1.2 and min_strength = 0.8. 
 
  Fig. 7.  Coverage rate of Test Case II        Fig. 8.  Deployment cost of Test Case II 
6   Conclusions 
In this paper, we propose a heterogeneous WSN deployment method based on 
irregular sensor model.  It aims to deal with the deployment problem of 
heterogeneous sensor nodes with different communication and sensing range.  In 
addition, an irregular sensor model is proposed to approximate the behavior of sensor 
nodes.  The deployment process is starting from sink node, and new nodes are 
deployed to the region centered with it.  In neighbor-info collection step, the 
information of adjacent sensor nodes is used to decide the deployment ratio of 
different types of sensor nodes.  In the scoring step, a scoring mechanism based on 
the irregular sensor model is applied to candidate positions.  At least, a new sensor 
node is placed to the position with the most coverage gains while maintaining the 
communication connectivity to center node.  Above process is running repeatedly 
until all eligible sensor nodes are processed. 
According to experiment results, the proposed method can achieve higher coverage 
rate under the same deployable sensor nodes.  Besides, the deployment cost is much 
lower with different configurations of sensor nodes.  In the future work, a sensor 
node model considering environmental factors and individual behavior is needed.  
Besides, considering the interactions between different types of sensors is important.  
At least, the proposed method will be extended as the topology control protocol for 
heterogeneous WSN. 
 
Acknowledgments.  The work of this paper was partially supported by National 
Science Council and Ministry of Economic Affairs of the Republic of China under 
contract NSC 95-2221-E-007-018 and MOEA 95-EC-17-A-04-S1-044. 
出席國際學術會議心得報告 (2/2) 
                                                             
計畫編號 NSC 95-2221-E-007-019 
計畫名稱 
通用無線感測器平台的研發 
子計畫二：無線感測器程式開發工具設計(3/3) 
出國人員姓名 
服務機關及職稱 
羅世翔   國立清華大學資訊工程研究所博士班學生 
會議時間地點 
May 2-4, 2007 
Paris, France 
會議名稱 
(中文) 國際格網與普及運算研討會 
(英文) International Conference on Grid and Pervasive Computing 
發表論文題目 SEMU : A Framework of Simulation Environment for Wireless Sensor Networks with co-
simulation model 
 
三、 參加會議經過 
本年度 GPC 於 2007 年 5 月 2 日至 4 日，為期三天，在法國巴黎舉辦，而研討會的內容也相當豐
富，workshop及 session都相當多。 
GPC 是一個一年一度的格網及普及運算的國際研討會，議題主要在探討如何建立一個有效的平台提
供隨時(all the time) 、隨地(everywhere)的服務。 
本人於此次會議的論文為“SEMU : A Framework of Simulation Environment for Wireless Sensor 
Networks with co-simulation model”，於 5月 4日上午之 Session 17發表。 
而我也以學習的心情，參加了數個自己感興趣的會議。也了解各國對於格網及普及運算目前的研究
情形。 
 
四、 與會心得 
格網與普及運算研究趨勢為如何有效協調大量且分散的異質性資源的分享、管理及相關的議題等，
而日漸成熟的網際網路或高速的區域網路架構也提供了各種不同條件的研究平台，相關的研究更是不勝
枚舉。 GPC 研討會所探討的議題，主要也著重在此方向上。 
今年在此研討會中出現的相關主題包含了叢集運算、高效能運算、格網運算、語意網及語意格網、
服務導向運算、點對點運算、普及運算、行動計算、網路儲存、格網及普及運算相關應用等。 
此次參加研究會，是本人第一次在國際研討會上報告，報告過程略顯緊張，不過也從此次報告中獲
得不少。報告完之後也與其它研究者交流，獲得國際學術交流的機會。國內的學生應該多投稿到國外研
討會，除了可以學習專業知識，還可了解國際化的脈動。 
參與國際會議可以讓國內的研究人員了解目前國際上相關研究的發展現況與未來趨勢，也可以拓展
其國際視野，對於國內的研究人員幫助相當大，因此國內研究人員應該積極參與大型的國際會議。 
格網與普及運算及相關應用領域，目前正蓬勃發展，可以研究的東西相當多，值得我們再多多深入
研究。本次參與的 GPC 研討會，大會不管在場地的或與會人員的規劃上都很不錯，值得台灣其他同領域
的研究人員做為投論文的考慮。 
 
 
Consequently, our first implementation version of SEMU supports the virtual nodes 
to directly run the real Linux applications on the Linux platform. 
For the extension of SEMU, co-simulation model, this paper has addressed two 
problems when SEMU uses pure software simulation models.  One problem is that 
software sensing channel models are difficult to be built the same as real sensing 
channels, and furthermore they fail to interact with physical environments.  The 
other problem shows that the pure software simulation needs a considerable amount 
of effort to model the behavior of real communication devices and real 
communication protocol.  By the co-simulation model, SEMU can further satisfy the 
requirement of WSN development, and collect more realistic profiling information 
and physical environment conditions during simulation. 
This rest of paper is organized as follows. In the next Section, we state the related 
work to compare different approaches of real code emulation and co-simulation 
model.  Section 3 clearly illustrates the overall design of the simulation framework.  
Then Section 4 introduces the hardware and software co-simulation model based on 
SEMU.  In Section 5 provides our evaluation results.  Finally, Section 6 concludes 
this paper. 
2   Related Works 
In the literature, several WSN simulators have been proposed to support real 
applications targeted on different platforms.  These approaches can be divided into 
two categories.  One is static translation which maps the real code into the 
simulation platform before run time.  The other is dynamic translation which 
interprets the real code during simulation.  Besides, related works about co-
simulation in WSN simulators are also described here. 
TOSSIM [7] is a notable example to represent the static translation technique.  
TOSSIM is a discrete event simulator which can directly run a TinyOS [6] application 
through compilation support.  This method is an excellent way to reduce the runtime 
overhead for code translation with advanced compiler supports.  Nevertheless, the 
supported languages highly depend on the modified compiler. 
There are some simulators using the dynamic translation technique [1], [3], [5].  
Atemu [3] is a fine grained sensor node emulator for AVR processor based systems.   
Although the low-level emulation of the sensor node hardware can acquire the high-
fidelity results, the run time interpretation overhead makes the emulation speed much 
slower than other approaches. 
EmStar [5] is an environment for developing wireless embedded systems software 
in Linux-based software framework.  EmStar provides a pure simulation, a true 
distributed deployment, and two hybrid modes.  The software stack of Emstar is 
composed of several components, and each of them presents a Linux process with its 
own address space.  However, it can not emulate the real binary codes which run on 
the real platform. 
Embra runs as part of the SimOS simulation system [1].  To achieve high 
simulation speed, Embra uses dynamic binary translation (DBT) technique to generate 
code sequences which simulate the workload. 
integrate their protocol algorithms into the Protocol Stack.  Environment will 
provide several models to reflect real conditions in physical environment. 
The bottom layer of SEMU is Native Operating System (Native OS) layer.  For 
system emulation, SEMU takes native operating system as the foundation of 
framework. 
 
Figure 1: The architecture of SEMU.  
4 Co-simulation Model 
In this section, we discuss the extension model of SEMU, co-simulation model, and 
address the synchronization problem when hardware and software run together. 
The co-simulation model supports the real communication and sensing channel by 
cooperating with real node devices.  The co-simulation model consists of three 
components including Communication Agent, Sensing Agent and Environment 
Recorder.  Communication Agent helps SEMU make use of real communication 
device and real communication protocol to gather more realistic communication 
latency and to support more accurate model than pure software simulation.  Then 
Sensing Agent can provide real sensing channels for collecting raw data from 
physical environment.  By Environment Recorder, packets and sensing information 
with timestamp can be recorded in the buffer, which is similar to Digital Video 
Recorder.  SEMU can use Environment Recorder to track the real time events and 
make the events re-present. 
We propose a WSN co-simulation model to extend the SEMU design.  In our co-
simulation model, SIM Kernel serves all virtual nodes to request actions, such as 
sending, receiving and sensing.  SIM Kernel will choose an agent which can 
represent the realistic behavior of the node.  When an agent is chosen for the request, 
