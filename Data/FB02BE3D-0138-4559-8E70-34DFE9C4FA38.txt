  
technologies, we are to develop an object-oriented 
approach that helps to scrutinize and organize project 
documented contents for an effective reuse and 
tailoring.  
In the entire research action, this paper serves 
as the preliminary part of the approach. Thus in this 
paper we aim in presenting the application of single 
sourcing and introducing the concept of the 
approach. To illustrate the proposed work, we use an 
example and a walk-through analysis. For the rest of 
this paper it is organized as follows. Section 2 
surveys the single sourcing concept. Section 3 
introduces the approach. Section 4 presents the 
example. Section 5 discusses the findings of this 
paper and describes our future work of the entire 
study. 
 
2. REVIEW OF SINGLE 
SOURCING 
 
2.1 What is Single Sourcing?  
Traditionally, documentation is written in files 
that consist of chapters or sections. These files are 
then assembled in creating a document such as a user 
guide or reference manual. Single source materials, 
however, are created from one single location or file. 
All information types required by a particular project 
(e.g., product brochures, user guide, training 
materials, online Help) are created from the single 
file, hence the name-single sourcing [11]. 
In single sourcing, rather than assembling files 
to create documentation, writers break information 
down to the element level (e.g., section, paragraph, 
sentence), then identify which element is required for 
each information type [12]. For example, conceptual 
information and exercises may be identified as 
training materials, whereas procedural information 
may be identified as the training, the user guide, and 
the online help. However, all this information resides 
in one source. 
 
2.2 Process for single sourcing 
Single sourcing involves identifying all 
information requirements up front, then developing 
them from a single source. Rockley and her group 
(The Rockley Group) defined the process of single 
sourcing as followings [12]:   
1. The Information Audit: The information, 
audiences, and the processes are examined 
currently in place to create documentation. That 
helps them to identify where information can be 
reused, what the audiences needs are, and how 
processes need to change to accommodate single 
sourcing. 
2. The Customized Information Blueprint: Base on 
step 1, tools are selected to support the single 
sourcing requirements, and then design the ways 
to use the tools and information models. The 
“big picture” that will guide the rest of the 
project is designed. 
3. Proof of Concept: Working model and prototype 
are built, then usability test to be ensured by 
correct design decisions correct and the single 
sourcing blueprint they developed in step 2. 
4. Full Implement: The rest of the information 
products are developed for the project, followed 
the information models and the prototype. 
Methodologies are in place and usability testing 
has been completed. The rest of documentation 
is developed by the processes.  
5. Knowledge Transfer: The last step, The Rockley 
Group teaches clients to maintain their single 
source documentation on their own. They 
provide methodology, information models, 
templates, style guides and key information to 
everyone who will be involved in maintaining 
the single source file and producing the various 
outputs. 
 
2.3 Benefits of Single Sourcing  
Single sourcing requires more up-front 
planning, but once implemented it can result in 
consistent information and significant cost savings. 
Several function-related projects with information 
developed from a single source have shown savings 
of 25-60% [10] [12]. Translation costs are a 
significant area of savings as “core” information is 
translated once, then reused everywhere it appears 
rather than being retranslated in each document. 
Additionally, it will require fewer people to create 
the materials since less original material is developed 
[11]. Therefore, we are to explore its applicability in 
software project documentation. 
 
3. TOWARD SINGLE 
SOURCING: AN OO APPROACH 
 
3.1. Definition 
The word “document” shares multiple 
connotations. The fundamental point in this paper is 
that, a document is designed to carry confirmed and 
validated data/information in certain predefined 
format. The content of a document should be able to 
be shared, disseminated, stored and acted upon for 
future reference. Specifically, we base on [13] to 
define a project document as a collection of a set of 
metadata and data: 
 
Document = {Metadata; Data}, where 
 
Metadata = {Ownership; Authorization; Status; 
Procedures; Links} 
 
Data = the content inside a document. 
  
single sourcing is elaborated and enabled by this 
approach. 
 
3.3. Conceptualized functions of the approach 
There are three functional aspects of the 
project documentation work featured in the proposed 
approach: 
1. Visualizing the documents flow of a software 
project. Due to the interrelations, i.e. the 
overriding, reuse and tailoring of section objects, 
documents are interconnected. This connectivity 
indicates the evolving the project codified 
information sets in a flow-like representation. 
The consistency and integrity of project 
documented contents can then be 
institutionalized through the OO mechanisms 
and the flow. 
2. Establishing and sustaining group effort in 
project documentation work. The document 
itself and its revisions follow the featured 
authoring, reviewing, and approving QA 
mechanisms, thus ensuring a continual group 
effort regarding the correctness of project 
documented content. This is particularly 
important as documents are often revised or 
reworked through times of changes. In the 
following section we will illustrate such a 
mechanism by an example. 
3. Providing a workplace for online document 
editing. Once sections are created and stored in 
the object repository, they become available for 
the editing of ad-hoc documents/views. The user 
(editor) can compose a view by selecting a list of 
section objects from the repository. The section 
objects should available versions for the user to 
choose from. In this regard, the approach should 
provide a definition of composition regarding a 
view and its associated sections (See Table 1 for 
an example). 
In brief, the aforementioned functionalities in 
the proposed project documentation approach enable 
an effective work upon the creation and managing of 
project's sections and documents/views. In the 
following section we use an example to illustrate the 
proposed concept. 
 
4. AN ILLUSTRATIVE 
EXAMPLE 
 
4.1 Defining software development project 
documentation 
 Owing to various types of project 
documentation standards that might be adopted by a 
software development project, we utilize CMMI 
[14], IEEE/EIA Std. 12207 [15] to illustrate the 
concept of the approach. In their hierarchical 
relationship, CMMI is a framework-like reference 
model that recommends what documents (work 
products) need to be rendered in a software project. 
IEEE/EIA 12207 further suggests the standard 
content that should be included in these documents.  
 We apply the proposed approach in modeling 
the content of these documentation contents in a 
software project example. To be simple, as Table 1 
shows, we present the project example's three major 
plan-type documents, RFP, project proposal, and 
project plan, which are recommended by CMMI. The 
RFP refers to the document issued by the software 
customer to acquire possible suppliers and their 
proposals. In RFP, the customer outlines the expected 
dateline and deliverables as well as offered monetary 
and other supportive resources regarding the project 
and the product. Project proposal refers to the plan 
that is based on RFP and is submitted to the customer 
for earning the project. The project plan is an internal 
action plan based on the RFP and the proposal. The 
content elements (i.e. the items in the most left 
column in Table 1) of the three documents are further 
specified according to the IEEE/EIA standard. Also 
in the table, the OO mechanisms, i.e. overriding, 
reuse, and tailoring, are defined as the interrelations 
of these sections and documents. The 
interrelationship assignments may differ according to 
different organizations. 
 
Table 1: The interrelation of the three plan-based 
project documents in the example 
View 
Section 
Document type: Plan 
RFP 
Project 
Proposal 
Project  
Master Plan 
A
d
m
in
 sectio
n
s 
Date of issue & 
Status ○ ○ ○ 
Issuing organization ○ ◎ ◎ 
Approval authority ○ ○ ○ 
Revision & version 
history ○ ○ ○ 
T
o
p
ic-related
 sectio
n
s 
Macro references ● ● ● 
Micro references ◎ ◎ ◎ 
Project Mission & 
Objective ● ● ● 
Planed activities & 
tasks 
◎ ◎ ◎ 
Schedules ◎ ◎ ◎ 
Resources & their 
allocation n/a ● ● 
Responsibilities& 
authority 
n/a ● ● 
Risks n/a ● ● 
Quality control ● ● ● 
Budget & Costs ● ● ◎ 
Interfaces among 
parties n/a ● ● 
Environment/infrastr
ucture ● ● ● 
Training (for team 
members) n/a ◎ ◎ 
  
Project Master
Plan
Test
Plan
V&V Plan
QA
Plan
PMC
Report
QA
Report
VER &VAL 
Report
Test
Report
Review Report
Training 
Plan
User Manual
SD
Report
SA
Report
Statement of 
Work
Project 
Proposal
SRS
PMC
Plan
S
ectio
n
-O
rien
ted
 P
ro
ject D
o
cu
m
en
ta
tio
n
A Software 
Development 
Project
Project 
Mission & 
Objective
Problem 
Statement
Customer 
Introduction
Team 
Introduction
WBS
Risk Lists
Configuration 
Management
Data 
Management
Terminology & 
Glossary
Group 
Communication
Cost
Schedule
Responsibilities
& authority
Training
Interfaces 
among parties
DFDs Use Cases
ERDs
Static 
diagrams
Software 
Architecture
Program 
Specfication
System 
Deployment
Problem & 
Issue Lists
Requirement 
Interview
Program Flows 
& Sequences
Behavior 
Diagrams
 
Figure 3: A holistic software development project documentation 
 
In addition to the holistic presentation of the 
approach in the example, we further address the 
authoring and reviewing (abbreviated as AR) 
mechanism that help sustain group effort in 
maintaining these View and Section objects.  
The AR function has to be user-friendly and 
easy to learn. We also want an environment that 
allows authors, reviewers, editors and approvers to 
be more efficient in rendering and compiling project 
documents. Our goals are to increase project 
efficiency by reducing the bureaucracy effort on 
maintenance and overhead in the project 
documentation. As Figure 4 illustrates, we further 
present the relationships between the project 
documentation and associated collaborative roles 
regarding authoring and reviewing. 
During the process of relevant stakeholder 
assignment, the issue of mutual exclusion should be 
addressed. Normally a project stakeholder may play 
multiple roles in a project, and it is often to see 
someone not only authors but also reviews certain 
documented content due to his multiple project roles. 
For example, the author of a section is assigned to 
the SA role while the reviewer of the same section is 
assigned to the SD role. When a member who takes 
both the SA and SD role, he may violate the mutual 
exclusion rule. The approach resolves this issue by 
including not only the project members, but also 
other out-side personnel who used to take the roles 
into the Reviewer stakeholder pool. In other words, a 
reviewer may not be a member of the project, as long 
as she or he is qualified in taking the role for the 
review job. 
 
Author 
Editor 
Reviewer 
Approver 
Section 
Document 
Document 
Section 
Document 
Mutually
Exclusive 
Mutually
Exclusive 
 
Figure 4: Stakeholders of project documentation 
 
5. CONCLUSION 
 
This paper is part of the entire research for 
developing the single sourced, object-oriented 
approach in managing project documentation work. 
In this paper, we have surveyed the single sourcing 
literature and presented the applicability of single 
sourcing to project documentation work. Besides, 
due to the introductory nature of this paper, we 
  
 
陳仲儼、蔡文隆* 
國立中央大學資訊管理學系 
中壢市中大路 300號 
 
摘要 
 
專案文件化( Project documentation)在軟體發展專案是不可缺少的工作任務。專案文件
化具有串起整個軟體發展專案的脈絡的重要功能。然而，對於文件化的工作例如準
備、撰寫及維護文件資料而言，常被視為一項繁重的工作，尤其是在有時間壓力下的
快速發展的專案。本文研究目的是在於探索專案文件內容予以單一來源化(single 
sourcing)之可能性，並嘗試以物件導向(object- oriented)的方法詳究軟體開發專案的內
容。本文為作者在專案內容管理全程研究中的一部分，整體目標期能協助專案更有效
率地進行專案文件化的工作。 
 
關鍵詞：Project documentation, Object-oriented, Single sourcing 
(*聯絡人：974403007@cc.ncu.edu.tw) 
 
 
無研發成果推廣資料 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
目 前 成 果 已 發 表 在 International Journal of Electronic Business 
Management(EI)，屬於先導研究成果的發表，我們已著手進行將完整的研究成
果嘗試發表在 SCI 國際學術期刊(目前是以 IIE Transactions 為目標)。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
