dependent data. We will not only design 
the strategies but also implement such a 
system. Finally, we will also evaluate 
the performance of the overall design. 
 
Keywords: mobile data management, 
mobile computing, data placement, 
database management systems, 
mobile agent, mobility 
management, location-dependent 
data, caching/ prefetching in 
mobile computing. 
 
二、 緣由與目的 
Internet 的蓬勃發展，讓全世界的
資料全部都可以透過網路串連起來。
面對這種龐大的資料，我們經常都是
透過搜尋引擎在 Internet 上找尋適合
的資料。在有線平台上的資料查詢，
通常是透過個人電腦（PC），經由 
Internet 到各個搜尋引擎查詢所需要
的資料。而搜尋引擎在收到使用者 
query 後，經由一連串的運算後，將
查詢的結果回傳給使用者。 
隨著無線通訊的蓬勃發展，使用
者將可以在任何時間任意地點存取所
需的資料，資訊的交流也越來越容
易。因此有越來越多的應用程式逐漸
往無線的平台發展，搜尋引擎也不例
外。但是無線網路的特性之一就是頻
寬狹小，因此若是 MU 透過無線網路
使用現有的搜尋引擎找 Internet 的時
候，常常會發生找到的答案對於 MU 
而言是需要十分龐大的傳輸量。在本
計畫中，我們主要就是針對行動客戶
大量存取網際網路資料的議題作分析
和探討，以便提供行動客戶可以快速
地經由搜尋引擎找尋適合的資料。 
大致上來說，這整個的環境可以
被分成有線網路的伺服器、無線網路
的客戶端，以及行動客戶端的行動代
理人三大部份，分別介紹探討如下： 
1. 有線網路的伺服器：扮演提供客
戶端資料的角色。然而無線網路
的特性之一就是頻寬狹小，因此
若是 MU 透過無線網路使用現有
的搜尋引擎找 Internet 的時
候，常常會發生找到的答案對於 
MU 而言是需要十分龐大的傳輸
量。另外，既然使用無線網路上
網，MU 的硬體設備通常也會是具
備較差的資源。因此，過多的答
案對於 MU 不但無益，反而是種
沉重的負擔。也就是，對於使用
無線網路上網搜尋網路資料的使
用者，他們需要的搜尋引擎必須
具備比現有的搜尋引擎要有更高
的準確率，這樣才能符合具備狹
小頻寬以及資源不足的 MU 的需
求。目前搜尋引擎所遭遇到最大
困難便是查詢的結果的精確度
（Precision）[YN98]不是很高，
因而造成搜尋引擎會傳回大量的
冗餘結果。會造成查詢結果資料
太多也不夠精確的原因可以歸納
為 「Internet 上資料量以極快的
速度成長」和「文件比較策略的
不足」兩點。前者是肇因於實際
環境，並非目前任何資訊及科技
上的技術可以克服，故本計畫中
不擬做任何的討論；本計畫將目
標放在後者，希望能提出改良網
頁文件比對的相關技術，進而減
少資訊大量冗餘資料的回傳，提
昇文件搜尋的效率與精確度。除
代理人要執行哪些任務，然後將
行動代理程式送到網路上的代理
程式伺服器執行它的任務，當行
動代理人完成任務之後，再將結
果回報給使用者。在本計劃中，
我們希望藉由行動代理人來解決
這些無線網路所遇到的困難，其
中包含了無線網路的低頻寬、常
斷線、及高延遲性造成許多傳統
有線網路所沒有的問題。另外，
無線通訊的使用者所攜帶的電腦
設備記憶體容量較小，電池使用
時間較短所具由的計算能力以及
可利用的資源都比較不適合處理
大量由網路下載的資料。在本計
畫中，我們主要把 MA 當成中介
軟體，用來克服 client 端的硬體
限制以及無線傳 輸的問題：頻寬
狹小以及經常斷線。因此在本計
畫中，MA 被當成 “virtual server” 
應用在無線的通訊環境來代替 
MU 執行與 server 端互動與資
訊擷取的工作。在概念上， MA 
在有線網路扮演 MU 代理人的 
角色，一個直覺的想法是將 MA 
隨時都置於最接近 MU 的位置 
[BBIM93，FB96，ZD97]， 因此
每當 MU 移動，MA 也必需跟著
移動。 但是這種方式很明顯不適
用於當 MU 具有高度移動性
（high mobility）的情況，因為
MA 太多的移動將造成大量的
communication overhead。因此在
過去的研究也有把 MA 放在連線
的另一端，也就是 fixed server 端 
[MDW99，PS98]，然而這種極端
當要將結果傳回給 MU 時必須經
由多個站點轉送才能送到 MU。
因 此 仍 然 造 成 大 量
communication overhead。為了避
免 這 兩 種 極 端 帶 來 大 量 的 
overhead 的弱點，我們提出一個
置放 MA 在最適當位置的控制
機制。我們根據 MU 的移動性
（mobility）與 MU 要求資料的頻
率（request rate）等相關特性，
設計一套有效計算置放 MA 位置
的方法。同時我們發展一套分析
的模式去評估 MA 置放位置的
距離對整體效能的影響。有了這
個核心的控制 MA 的最適位置的
機制，我們繼續進一步架構出實
體的支援行動代理人的無線網
路。並且利用我們擁有的軟硬體
技術，再設計兩種行動代理人的
應用程式。 
三、計劃進度與成果報告 
 在今年的計劃進度裡，我們著重
在下列幾點的工作項目： 
(一) 設計無線使用者的網頁搜尋伺
服器：這項工作的目地乃在設計
一個可以增進網頁搜尋精確度且
速度的 web page comparison 的演
算法。提高精確度意味著我們的
查詢結果是少量的，而且在這些
少量的資料中又都是使用者十分
感興趣的資料。為了處理網頁的
比對，我們先設計一套機制用來
儲存網頁的文字與 style 的 data 
model，將網頁表達成可以快速搜
尋的形式以利於比較。接下來，
為了能比較出網頁之間的相似
度，我們提出一個公式計算來表
達兩個網頁之間的相似度。在這
裡，我們分析由其中一個網頁轉
讓開發者在裝有  Java Virtual 
Machine 的機器上發展以及管理
行動代理人的架構。Concordia 主
要分成 server 和 client 兩部
份。Concordia server 是一套原作
者提供的程式；而 agent 是程式設
計者可以自己撰寫的代理人程
式。通常，在一個區域網路或是
廣 域 網 路 上 會 有 許 多 裝
Concordia server 的機器，而利用
Concordia 發展的 Mobile Agent
可以在這些機器上面遷徙並且被
執行。在本計劃，我們主要把行
動代理人拿來當成克服行動客戶
端斷線的一個工具。因此，在這
裡，行動代理人可以說是 MU 在
有線網路的一個代理人。本研究
接著探討在無線網路環境，利用
行動代理人來代替行動客戶端與
server 進行互動與資料存取等活
動時，行動代理人應該置放在整
個網路架構的何處才是最佳位
置。最後，利用所研發的適合行
動代理人運作的網路價架構，進
一步設計架構在行動代理人上 
Personal Search Engine Agent 
(PSEA) 和  Finding Fastest 
Arrival Path in Mobile 
Communication Environments 的
兩個應用程式。PSEA 主要是在
解決無線行動客戶端的斷線問
題，讓無線行動客戶端發出查詢
要求後即可斷線，直到伺服器準
備好資料時才需要連線取回所需
資料。而 Finding Fastest Arrival 
Path in Mobile Communication 
Environments 是為了以最找尋最
快到達路徑的行動代理人應用程
式。其他可以繼續延伸發展的應
用程式包括了例如，兩地之間的
交通工具的行程安排應用程式。
這些都是適合使用行動代理人來
設計的應用程式，而且這些應用
程式對行動使用者也是十分的實
用。 
(四) 行動客戶端的位置相關資料之
研究：在這方面我們著重在三
點。首先，在有限的 cache storage 
限制下，有效率的預取 (prefetch) 
行動客戶端所需要的 LDD。在這
一部份，我們最需要的是一個良
好的原則選擇行動客戶端未來最
有可能使用到的資料。在這部
份，我們分析了所有可能的作法
以及他們所可以得到的利益，決
定了最佳的預取策略。再來，在
考慮行動客戶端的查詢情況下，
有效率的管理 cache 中的 LDD 
資料。我發現到 cache 的儲存機
制會影想到無線客戶端查詢時的 
hit 和 miss 的機率。然而，傳統
的 cache 儲存組織中，資料和其
相關位置的資訊往往是被忽略
的。因此為了能夠增加行動客戶
端查詢處理的效率以及能夠獲得
更多的成果，我們改良以往的儲
存架構讓  cache 具有  location 
dependent 的特性並且加快資料
處理的速度。最後，根據 LDD 的
資料語意或是行動客戶端的移動
行為，利用 Semantic Caching 的
觀念有效率地管理  cache 中的
資料。讓 cache 的儲存裝置內新
資料替換舊資料時有一定的準
則，刪除已經不再需要的資料。 
四、計劃進度自評 
