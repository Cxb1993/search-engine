Admission Control of a Service Station when the Arrivals are
Internal
Yarlin Kuo
Department of Industrial Engineering and Management
Yunlin University of Science and Technology, Yunlin, Taiwan, 640
Abstract
All studies in the admission control of a service station make decisions at arrival
epochs. When arrivals are internal and are rejected from a queue, the rejected jobs have
to be routed to other stations in the system. However the system will not know whether
a job will be admitted to a queue or not until its arrival epoch to that queue. Thus, the
system has to react dynamically and agilely to the decisions made at a speciﬁc queue and
may try several queues before ﬁnding a queue that admits the job. This paper remedies
these diﬃculties by changing the decision epochs of the admission control from arrival
epochs to departure epochs with the actions of switching (keeping) the arrival stream on
or oﬀ. Thus upstream stations will have information on the admission status of their
downstream stations all the time. It is proved that the optimal policy for this revised
admission control system is of control limit type for an M/G/1 queue. Comparisons of
the optimal values and optimal policies for the admission controls made at arrival epochs
and at departure epochs are included in the paper.
Keywords: Admission control, Queue control, Semi-Markov decision process.
1 Introduction
Proper admission control of a service station can eﬀectively reduce the system congestion
level and jobs ﬂow times. Researches on the admission control of a queue are abundant
(Yechiali 1971, 1972; Lippman and Stidham 1977; Stidham 1978; Johansen and Stidham
1980; Ormeci and Burnetas 2004; Lin and Ross 2004). They all choose decision epochs to
be arrival epochs and the optimal admission control policies are proved to be of control-limit
type: accept the arriving job when number of jobs in the target service station is less than
some control-limit and reject the arrival otherwise. When an arrival is rejected, it leaves the
target service station. This will not cause any trouble to the system if sources of arrivals are
external to the system. When sources of arrivals of the target service station are internal,
such as departures from queues upstream the target service station, under the arrival control
at arrival epochs mechanism, upstream stations have to compete for service/waiting positions
in the target service station and they will not know whether their jobs will be admitted to
the target service station until their arrival epochs. If their job is rejected from the target
station, say station 1, they have to route it to another station, say station 2 and if the job
is rejected from station 2, and then they route it to station 3 and so on. A job may need to
try several stations before ﬁnding a station that admits it. Thus, managing the job routings
and tracking job locations are more diﬃcult in such a system. To remedy these diﬃculties,
we propose to move decision epochs of admission control of the target service station from
1
where α is discount rate and N (t) is number of arrivals in an interval of length t. Let Vn(m)
be the optimal value function when there are n decision epochs remaining and the system
state is m. Then, the dynamic programming recursion of this SMDP is
Vn(m) = max{In(m), On(m)} m ≥ 1, n = 1, 2 . . . , L
Vn(0) = E[e−αTIn−1(N (X))] n = 1, 2 . . . , L
V0(m) = 0 m ≥ 0
where
In(m) = E(R(X))−Ci(m) + Un(m +N (X))
On(m) = −Co(m) + Un(m)
Un(m) = E[e−αXVn−1((m− 1)+)]
Un(m+ N (X)) = E[e−αXVn−1((m+N (X)− 1)+)]
E(R(X)) : The expected total discounted rewards received during a service time, X
Deﬁne C(m) = Ci(m)−Co(m) = E{
∫X
0 e
−αth(m +N (t))− h(m)dt}. Since h(m) is convex,
C(m) is nondecreasing in m (m ≥ 1).
Proposition 1 Suppose h(m) is convex, nondecreasing and C(m)−E[e−αXC((m− 1)+)] is
nondecreasing for all m ≥ 1. Then, there exists a number m∗n ≥ 0 such that
Vn(m) =
{
On(m) ∀ m ≥ m∗n
In(m) ∀ m < m∗n
proof : See appendix. 
Thus, the optimal admission control policy at departure epochs of an M/G/1 queue is of
control limit type: When there are n decisions epochs remaining, switch (keep) the arrival
stream on when number of jobs left behind by the departure is less than m∗n and switch(keep)
the arrival stream oﬀ otherwise.
2.2 Discounted reward - infinite horizon
The SMDP considered here has countable state space, ﬁnite action space and unbounded one
stage cost. Conditions needed for the existence of the optimality equations for this inﬁnite
horizon discounted SMDP and the extension of the result of the ﬁnite horizon problem to
the inﬁnite horizon problem are the assumptions 1 and 3 of Sennott (1989). Assumption 1
ensures that there is no inﬁnite number of transitions occuring in any ﬁnite interval. When
P (T = 0) < 1 and X > 0, assumption 1 is satisﬁed. To prove assumption 3, which is
Vα(m) > −∞ for all m and α, consider the policy, π which keeps the arrival process oﬀ
always. Then, the value function under policy π, 0 ≤ Vα,π(m) > −∞ for all m. Since
Vα(m) ≥ Vα,π(m), assumption 3 is satisﬁed. Hence, there exists a Vα(m), the optimal value
function of the inﬁnite horizon discounted problem, satisfying
Vα(m) = max{Iα(m), Oα(m)} ∀ m ≥ 1
Vα(0) = E[e−αTIα(N (X))]
3
3 Comparisons on the optimal admission controls at arrival
epochs and at departure epochs
3.1 Comparison on optimal values
To compare the optimal values of admission control at arrival epochs and at departure epochs,
we proceed as follows. Assume that at each arrival epoch, besides the information of number
of jobs in the queue, the controller is also given the information of whether the current arrival
epoch is the ﬁrst arrival epoch after a service completion. Note that at each arrival epoch, we
do not have information on when a service starts and when it ends. Since service time and
interarrival time are independent, thus information on whether the current arrival is the ﬁrst
arrival epoch after a service completion will not improve the optimal value of admission control
at arrival epochs, and the optimal policy remains the same. We will use this information to
identify the third set of decision epochs. The third set of decision epochs are the ﬁrst arrival
epochs after service completions. At such epochs, the controller chooses between (1) to accept
the current arrival and all future arrivals that arrive before next such decision epoch, and
(2) to reject the current arrival and all future arrivals arrive before next such decision epoch.
Observe that, for each admission control policy at departure epochs, there is an equivalent
policy for decisions made at the ﬁrst arrival epochs after service completions with the same
time sequence of rewards inﬂow and costs outﬂow , and vice versa. Hence, their cost functions
are the same and the admission control at departure epochs is equivalent to the admission
control at the ﬁrst arrival epochs after service completions. Figure 1 depicting a sample path
of a policy made at departure epochs and its corresponding sample path and policy made at
the ﬁrst arrival epochs clearly illustrates this observation. Since the set of feasible policies for
Figure 1: Equivalence of departure epochs and First Arrival Epochs
decision made at ﬁrst arrival epochs after service completions is a subset of feasible policies
when the decisions are made at arrival epochs, the optimal value obtained when decisions are
made at arrival epochs is better than that of decisions made at the ﬁrst epochs after service
completions. Thus, we have
Proposition 5 The optimal value of the admission control of an M/G/1 queue at arrival
epochs is greater than or equal to that of admission control at departure epochs.
5
ak =
(λX)ke−λX
k!
k = 0, 1, 2, . . .
By
∑∞
n=0 πn = 1, we can ﬁnd π1. Let βn be the steady state distribution of number of jobs in
system at any arbitrary point of time, then from the result of semi-Markov processes (Cinlar
1975 Theorem 5.2.2) we have
β0 =
π0(1/λ)
π0(1/λ) +X
∑∞
n=1 πn
βn = =
πnX
π0(1/λ) +X
∑∞
n=1 πn
∀n ≥ 1
Mean idle time is 1/λ. Let Y be the mean busy time. By β0 = (1/λ)/(1/λ+ Y ), we can
ﬁnd Y = (1 − β0)/λβ0 and the average number of jobs served during busy period is Y/X .
The average reward per unit time is [(Y/X)E(R)]/[(1/λ)+Y ] = (1−β0)E(R)/X . Thus, the
average proﬁt of this system , AV G(D), is
AV G(D) = (1− β0)E(R)/X −
∞∑
n=0
h(n)βn
Figure 3 presents the graph of average proﬁt for control at arrival epochs and departure
epochs: AVG(A) and AVG(D) when h(n) = hn. From the graphs, AVG(A) and AVG(D)
have unique maximum value, thus we use sequential search to ﬁnd the optimal rejection
limits, m ∗ A and m ∗D of controls at arrival epochs and at departure epochs, respectively.
Numerical comparison of optimal rejection limits and optimal values are presented in Figure 4
which depicts how the optimal rejection limit changes as utilization rate, ρ = λX increases,
and the eﬀects of changes in the system service time X , arrival rate λ and reward R. The
holding cost rate h is kept at a ﬁxed value, 1.
The observations we have from our numerical comparisons are (1) In most cases, the
optimal control limit at the departure epochs is less than or equal to that at the arrival
epochs. (2) The optimal value of control at arrival epochs is greater than or equal to that of
control at departure epochs, but the diﬀerence is very small. From the observation (1), we
deduct that the system controller is more conservative when decisions are made at departure
epochs. Proposition 5 tells us that the optimal value of control at arrival epochs is greater
than or equal to that at departure epochs. Observation (2) indicates that their diﬀerences
are very small. Thus moving the decision epochs from arrival epochs to departure epochs will
not decrease the optimal value much. Besides these, we also observe that for both controls
(1) The optimal control limit is not monotonic in utilization rate. Very often it increases
to a maximum than decreases as utilization rate increases, but sometimes it decreases in
utilization rate. (2) For ﬁxed arrival rate, the optimal value decreases as utilization rate
(processing time ) increases. (3) For ﬁxed processing time, the optimal value increases as
utilization rate (arrival rate ) increases.
4 Conclusion
In this paper we study admission control of an M/G/1 with internal sources of arrivals. To
give the upstream stations information on the admission status downstream stations and
to alleviate the system controller’s load in tracking the locations of jobs, we move decision
7
epochs of admission control from arrival epochs to departure epochs. We prove that the
optimal policy of control at departure epochs is of control limit type and the optimal value of
controls at arrival epochs is always greater than or equal to that at departure epochs. Thus
if only the system congestion cost (holding cost of jobs) is considered, admission control
at arrival epochs is superior to admission control at departure epochs. However, when the
arrivals are internal, the management cost of control at departure epochs is expected to be
less than that of control at arrival epochs and management of the jobs routing and tracking
at such systems are easier. Thus, for such systems the total cost (jobs holding cost and
control management cost ) of admission at arrival epochs may not be better than that of
admission at departure epochs. Numerical studies on M/D/1 indicate that the diﬀerence
in optimal values (jobs holding cost) of controls at arrival epochs and departure epochs is
small. Thus, when cost and easiness of management of control are also included in selecting
the control model, admission controls at departure epochs outperforms admission control at
arrival epochs when the arrivals are internal.
5 Appendix
Proof of Proposition 1: Deﬁne un(m) = Un(m)− Un(m + N (X)) + C(m) then Vn(m) =
Un(m) + E((R(X)− un(m))+) − Co(m). Note that On(m) − In(m) = −Co(m) + Un(m) +
Ci(m)−EU(m+N (X))+ER(X) = ER(X)+C(m)+Un(m)−EU(m+N (X)) = ER(X)+
un(m). If un(m) is increasing, we have the result. To prove that un(m) is increasing,
we apply the technique proposed by Johansen and Stidham (1980). For all m ≥ 1 deﬁne
vn(m) = Vn(m)−E(Vn(m +N (X))) +C(m) and consider the following statements:
(A1): Un(m) is nonincreasing in m.
(A2): un(m) is nondecreasing in m
(B1): Vn(m) is nonincreasing in m.
(B2): vn(m) in nondecreasing in m.
(C1): Un+1(m) is nonincreasing in m.
(C2): un+1(m) is nondecreasing in m
We will show that (A1) and (A2) imply (B1) and (B2), and (B1) and (B2) imply (C1) and
(C2). To start the induction, at n = 0, U0(m) = 0 and u0(m) = C(m) (nondecreasing in m).
Thus, (A1) and (A2) are true at n = 0. Assume that (A1) and (A2) are true at n. Since for
all m ≥ 1 Vn(m) = Un(m)+E((R(X)−un(m))+)−Co(m), by (A1) (A2) and nondecreasing
property of h(m), we have (B1). To prove (B2), note that
vn(m) = Vn(m)−E(Vn(m +N (X))) +C(m)
= [Un(m) + E((R(X)− un(m))+)−Co(m)]
−E[Un(m +N (X)) + E((R(X ′)− un(m +N (X))+)− Co(m+ N (X))]+ C(m)
= {Un(m)− E(Un(m +N (X)) +C(m) +E((R(X)− un(m))+)}
−E[E((R(X ′)− un(m + N (X)))+)] +E[Co(m+ N (X))−Co(m)]
where variables X and X ′ are two consecutive service times and are iid. The terms in
{} can be combined into max{E(R(X)), un(m)} which is nondecreasing in m. The term
−E[E((R(X ′)− un(m +N (X)))+)] is nondecreasing in m by (A2). The last term is nonde-
creasing in m by the convexity of h(m). Hence, vn(m) is nondecreasing in m.
Now we prove (B1) and (B2) implies (C1) and (C2). Un+1(m) = E[e−αXVn((m− 1)] is
nonincreasing in m for all m ≥ 1 by (B1). Thus, (C1) is proved. To prove (C2), note that
9
Hence, Vn+1(m) ≥ Vn(m) 
6 References
Cinlar, E. (1975). Introduction to Stochastic Processes. Prentice-Hall.
Johansen, S.G., S. Stidham Jr. (1980). Control of Arrivals to a Stochastic Input-Output
System. Advance Applied Probability 12 ,972-999.
Lippman, S.A., S. Stidham Jr. (1977). Individual versus Social Optimization in Expo-
nential Congestion Systems. Operations Research 25 (2) ,233-247.
Lin, K.Y.; Ross, S.M. (2004) Optimal Admission control for a single-server loss queue
Journal of Applied Probability, 41(2) 535-546.
Ormeci, E. L, A. Burnetas, (2004). Admission control with batch arrivals Operations
Research Letters 32 (5) 448-454.
Sennott, L. J. 1989. Average Cost Semi-Markov Decision Processes and the Control
of Queueing Systems. Probability in the Engineering and Informational Sciences 3
247-272.
Stidham Jr, S. (1978). Socially and Individually Optimal Control of Arrivals to a
GI/M/1 queue. Management Science 24(15) ,1598-1610.
Takagi, H. (1993). Queueing Analysis Volume 2: Finite Systems. Elsevier Science
Publishers.
Yechiali, U. (1971). On Optimal Balking Rules and Toll Charges in a GI/M/1 Queueing
Process. Operations Research 19 349-370.
Yechiali, U. (1972) Customers’ Optimal Joining Rules for the GI/M/s Queue. Manage-
ment Science 18 434-443.
11
asg
dfg
dfds
dfsf
0 1 2 3 4 m-1 m m+1
1
0a 0a 0a 0a 0a 1 1 1
1a 1
a
2a 2a
3a
3a
3a
2a
m
a
1ma  
1a 1
a 1a
Figure 2: State Transition Rate Diagram of M/D/1 with Rejection Limit m at   Departure Epochs
Figure 4 
 
  
 
 
Comparison of controls at arrival epochs and at  departure epochs
二、與會心得 
It has been years since last international conference attended, thus the impact of most updated 
researches areas and approaches on the future research direction is more profound this time.  
During this conference, several presentations give me some idea of future research problems 
for my master students.  Furthermore, the research area in European countries seem more 
focus on topics related to environment and humanity which is very different from conferences 
held by organizations in US.  Under the shadow of global warming, their researches move the 
objective from traditional cost minimization, profit maximization toward something that are 
more difficult to quantified but have more impact globally.  I think this is the right direction 
to take in the future.  Past objective functions are often local from the global point of view 
and environmental impact of the decisions chosen on the earth warming, air/water pollutions 
are seldom considered.  I think its time we start to focus and conduct research on green 
problems and change our profit oriented objectives to earth friendly ones. 
 
Besides, during the conference banquet, I have the chance to sit with a group of scholars from 
Algeria.  Students study status and educational system in both countries are interchanged and 
discussed.  I am very surprised to find out the 1/2 to 2/3 of their graduate students in OR 
department are female and the performance of female students outpace their male counterparts 
a lot.  Furthermore, it seems that their researches are more theoretic oriented and they do hard 
mathematical problems.  It was very impressive. 
 
 
Integration of production scheduling and shipment batching
Yow-Ru Wang, Yarlin Kuo
Department of Industrial Engineering and Management
Yunlin University of Science and Technology, Yunlin, Taiwan, 640
Abstract
This paper studies the integrated production scheduling and shipment batching be-
tween one manufacturer and one distribution center which consolidates orders in its neigh-
borhood. The objective is to ﬁnd a production and delivery schedule to minimize total
system cost which includes tardiness penalties, shipping cost and holding costs of jobs
waiting for shipment. Since the problem is NP hard, several heuristics are proposed.
Numerical studies indicate that these heuristics are quite good.
1 Introduction
How to eﬃciently utilize and allocate limited resources for orders of diﬀerent sizes and due
dates has always been a challenging problem for a company. In the past, allocation of
production resource and transportation resource to orders are often treated separately to
simplify problems. When solving production resource allocation (production scheduling)
problem, it is not uncommon to assume that orders are delivered to customers as soon as they
are produced and shipping cost is often considered as a ﬁxed small cost term and is ignored
in decision making. However, with the formation of the global market, it is not uncommon
for a company to receive orders from far away places and shipping cost can be so large that
it can not be neglected. Under limited transporter capacity constraint, to reduce shipping
cost, it will be cost eﬀective if we can load the transporter up and closer to it capacity. This
can be achieved by consolidating shipments of several orders into one transporter. However,
an order can be shipped to a customer only after it completes its production process. With
limited production capacity, release times of orders for shipment are determined by production
schedule. Thus, production scheduling and shipment scheduling are interrelated.
1
customer locations, we need to take into account of the impact of routing decision on shipment
schedule and the problem thus becomes ever more complex. In this study, our focus is
on the integration of shipment batching and production scheduling, and how production
scheduling and shipment batching are aﬀected by due dates and order sizes. Thus, we assume
that all orders of the company are from the same location. This assumption holds when
the customer is a distribution center which consolidates demands in its neighborhood or
customers are close to each other and the location of the manufacturer is far away from
its customers. Thus, shipping cost in this study depends on shipment quantity only and
is independent of shipping distance. Pundoor and Chen (2005) studied a problem that is
very similar to ours. They assumed that orders have diﬀerent processing time but have the
same size. Their objective was to minimize shipping cost and a weighted sum of maximum
tardiness. Thus, they considered a worst case service measure for meeting due dates and we
considered an average service measure for meeting due dates. Yuan (1996) proved that a
single machine scheduling problem with a common due date and the objective of minimizing
earliness-tardiness and batch delivery cost is NP hard. Our problem is similar to Yuan’s but
has orders of diﬀerent due dates and thus is NP hard as well. Our goal for this paper is to
ﬁnd good heuristics to solve the problem.
The rest of the paper is organized as follows. Section 2 formulates the problem and sets
up an integer program model of the problem. Section 3 develops three heuristics to solve the
problem. Section 4 conducts numerical analysis and compares the performance of heuristics.
Section 5 concludes the paper.
2 Problem formulation and modeling
Consider a manufacturer producing a single type of continuously divisible product and re-
ceiving orders from a single customer, say, a distribution center. Assume that there are n
orders in the system at time zero and there is no future orders from the customer. Orders
are of diﬀerent sizes and due dates and processing time of an order is proportional to its
size. It is assumed that customers are willing to receive goods earlier but not later. Tardy
orders are charged with a tardy penalty of rate β per unit size per day by the customer.
Besides, the manufacturer incurs a holding cost rate of α per unit size per day for orders
completing their processing and waiting to be delivered to the customer. This holding cost
3
Decision variables:
Sj : processing starting time of order j .
Cj : completion time of order j.
Dj : delivery time of order j.
Tj : tardiness of order j, Tj = (Dj − dj)+
T−j : earliness of order j, T
−
j = (dj −Dj)+
Yij =
⎧⎪⎨
⎪⎩
1 if order i is scheduled before order j.
0 otherwise.
Xij =
⎧⎪⎨
⎪⎩
1 if Di = Cj i.e., order i is delivered at the completion time of order j.
0 otherwise.
Qj : number of transporters used to ship order j and all other orders that are in the
same delivery batch as order j when order j is the last processed job in the batch.
where (y)+ = y if y ≥ 0 and (y)+ = 0, otherwise. Next we formulate a mathematical
programming model of this integrated production and shipment scheduling problem:
min
n∑
j=1
αvj(Dj − Cj) + βvjTj + cQj
s.t.
Yii = 0 ∀i = 1, 2, . . . , n (1)
Yij + Yji = 1 ∀i, j = 1, 2, . . . , n (2)
Si ≥ Sj + vj −MYij, ∀i < j; i = 1, 2, . . . , n; j = 1, 2, . . . , n (3)
Sj ≥ Si + vi −M(1− Yij), ∀i < j; i = 1, 2, . . . , n; j = 1, 2, . . . , n (4)
Cj = Sj + vj ∀i = 1, 2, . . . , n (5)
Dj + T−j − Tj = dj ∀i = 1, 2, . . . , n (6)
Dj ≥ Cj ∀i = 1, 2, . . . , n (7)
n∑
j=1
Xij = 1 ∀i = 1, 2, . . . , n (8)
n∑
i=1
Xij ≤ n ∀j = 1, 2, . . . , n (9)
5
3 Heuristics
It is obvious that when determining the optimal production schedule one should consider its
impact on the shipment schedule and vice versa. Since the problem studied is NP hard, in this
section we develop several heuristic to solve the problem. In designing heuristics, our idea is to
separate the problem into two subproblems: production scheduling subproblem and shipment
scheduling subproblem. The production scheduling subproblem determines the production
schedule and sequence. In shipment scheduling subproblem, we ﬁnd a shipment schedule
given the production schedule or ﬁnd a production and shipment schedule simultaneously
given a production sequence. In the rest of this section, we give a detailed description of
heuristics.
3.1 Production sequencing and production and shipment scheduling
This heuristic decomposes the integrated production and shipment scheduling integer pro-
gram in Section 2 into two integer programs. The ﬁrst integer program, termed as the
production scheduling program (PSP), assumes that orders are delivered to the customer at
their completion epochs and ﬁnds the optimal production sequence of all orders to minimize
total holding and tardiness cost:
∑n
j=1 αvj(Cj −Cj) + βvj(Cj − dj)+ =
∑n
j=1 βvj(Cj − dj)+
(Since we assume that Dj = Cj). Deﬁne T sj = (Cj − dj)+ and Esj = (dj −Cj)+. The PSP is
as follows:
min
n∑
j=1
vjT
s
j
s.t.
Yii = 0 ∀i = 1, 2, . . . , n
Yij + Yji = 1 ∀i, j = 1, 2, . . . , n
Si ≥ Sj + vj −MYij, ∀i < j; i = 1, 2, . . . , n; j = 1, 2, . . . , n
Sj ≥ Si + vi −M(1− Yij), ∀i < j; i = 1, 2, . . . , n; j = 1, 2, . . . , n
Cj = Sj + Pj ∀i = 1, 2, . . . , n
Cj + Esj − T sj = dj ∀i = 1, 2, . . . , n
Cj ≥ 0, Cj ∈ Z , ∀j = 1, 2, . . . , n
Sj ≥ 0, Sj ∈ Z , ∀j = 1, 2, . . . , n
7
T−j ≥ 0, T−j ∈ Z , ∀j = 1, 2, . . . , n
Qj ≥ 0, Qj ∈ Z , ∀j = 1, 2, . . . , n
Xij ∈ {0, 1} ∀i < j; i = 1, 2, . . . , n; j = 1, 2, . . . , n
Note that in the PSSP, Yij are parameters not decision variables. This heuristic is termed
as PSP+PSSP in this paper. Note the PSP part of this heuristic is still an NP hard problem.
When the number of orders is large, we will adopt the approach commonly used in solving
large size dynamic programming ( Wong(1970), Kleywegt et. al. (2002)) : Decompose a large
size problem (problem with many orders) into several smaller size subproblems, which can be
solved within acceptable time. The ﬁrst step of PSP+PSSP is to sequence orders according
to some simple dispatching rule. Then, decompose this initial sequence into several subse-
quences (subproblems) of small size. The optimal schedules/sequences of the subproblems
are obtained by solving the PSP one by one. Then the optimal schedules/sequences obtained
from all subproblems are combined to be the production schedule/sequence. When we solve
subproblems one by one, except for the ﬁrst subproblem, the manufacturing center is not
empty at the scheduling times of subproblems and the starting times of orders in one sub-
problem must be larger than the completion times of orders in the previous subproblem. To
include these features into our model, after the schedule of one subproblem has been found,
we ﬁnd the completion times of the last order processed in the manufacturing center, say, C
and solve the subsequent PSP subproblems with extra constraints Sj ≥ C for each order j
in the subproblem .
3.2 Production scheduling and backward batching algorithm (PSP+BB)
The ﬁrst part of this heuristic ﬁnds order completion times, Cj, j = 1, 2, . . . , n by PSP. After
sequence completion times Cj , j = 1, 2, . . . , n in increasing order, and the shipment sched-
ule is obtained by batching orders backward in times based on whether it is cost eﬀective
to include another order into the current batch. The cost eﬀectiveness criteria are given in
Theorem 1 and the ﬂow chart of backward batching algorithm is given is Figure 1
9
or 0, we have two cases:
(1)
(⌈
v1
V
⌉
+
⌈
v2
V
⌉
−
⌈
v1+v2
V
⌉)
c = 0. Then ∆ ≥ 0 and orders 1 and 2 should be shipped
separately
(2)
(⌈
v1
V
⌉
+
⌈
v2
V
⌉
−
⌈
v1+v2
V
⌉)
c = c, then ∆ = αv2(C1−C2) +βv2[(C1− d2)+− (C2− d2)+]− c.
Thus ∆ < 0 if and only if H = αv2(C1 − C2) + βv2[(C1 − d2)+ − (C2 − d2)+] < c. Next, we
consider the following cases:
(i) d2 ≤ C2 < C1 then H = (α + β)v2(C1 −C2) < c.
(ii) C2 < d2 ≤ C1 then H = αv2(C1 −C2) + βv2(C1 − d2) < c.
(iii) C2 < C1 < d2 then H = αv2(C1 − C2) < c.
Thus, the result holds for n = 2. Assume that when n = k the result holds. When n = k+1
(Ck+1 < C1), we either ship order k+1 with orders 1, 2, . . . , k (i.e., Dk+1 = Dk = · · · = D2 =
D1 = C1) and incur cost
α
k∑
i=1
vi(C1 −Ci) + β
k∑
i=1
vi(C1 − di)+ + βvk+1(Ck+1 − dk+1)+ + (
⌈∑k
i=1 vi
V
⌉
+
⌈vk+1
V
⌉
)c
or ship order k + 1 by itself and ship orders 1, 2, . . . , k together (i.e., Dk+1 = Ck+1, Dk =
· · · = D2 = D1 = C1) and incur cost
α
k+1∑
i=1
vi(C1 −Ci) + β
k+1∑
i=1
vi(C1 − di)+ +
⌈∑k+1
i=1 vi
V
⌉
c
Let ∆ be the diﬀerence of these two costs. Then
∆ = αvk+1(C1 −Ck+1) + βvk+1[(C1 − dk+1)+ − (Ck+1 − dk+1)+]
−(
⌈∑k
i=1 vi
V
⌉
+
⌈vk+1
V
⌉
−
⌈∑k+1
i=1 vi
V
⌉
)c
Now follow the same steps as we did in n = 2 case , we can prove that the result holds when
n = k + 1. 
3.3 ATC and backward batching algorithm (ATC+BB)
In this heuristic, we use a simple and widely used dispatching rule, the apparent-tardiness-
cost (ATC), to ﬁnd the production schedule and then use the backward batching algorithm
to set up a shipment schedule based on order completion times obtained by dispatching rule.
We term this approach as ATC+BB. At each scheduling epoch t, ATC indexes order j by
11
When the number of orders is small (less than or equal to 9), we use the following measures
to determine the absolute performance of a heuristic:
solution quality =
Total cost obtained by the heuristic
Minimum cost
computation quality =
computation time of the heuristic
Minimum computation time
where the minimum cost is obtained by solving the optimal model in Section 2. For each τ, R
combination, we tested 10 sets of data with α = 1, β = 5, c = 3000 and V = 50. Figure 2
gives the results of two of the test data. From Figure 2 and other test results, we found that
production schedules of PSP+PSSP and PSP+BB were very diﬀerent from that of the opti-
mal one and their system costs were often diﬀerent from the optimal cost. This indicates that
to achieve a lower system cost, one needs to integrate production scheduling with shipment
scheduling. Table 1 summarizes the mean solution quality and computation quality (time)
of heuristics under diﬀerent τ, R combinations. To see whether there are performance diﬀer-
ences among heuristics and optimal solution,we conducted ANVOA (Table 2) . At level of
0.05, ANVOA indicates that diﬀerences are signiﬁcant, hence, we perform Tukey test (Table
3) for further comparison. At 0.05 level, Tukey test indicates that for all τ, R combinations
the performance of PSP+PSSP, PSP+BB and optimal solution are not diﬀerentiable and the
performance of ATC+BB are always the worst. Thus when the computation time factor is
included into consideration, we conclude the for the small size problem (less than 9 orders),
PSP+PSSP and PSP+BB are better choices.
(insert ﬁgure 2 here)
Figure 2: Production and shipment schedule
13
computation time. Thus we use relative performance to compare performance of heuristics.
We take the approach that is commonly used in practice in processing orders and shipping
ﬁnished goods to customers as a benchmark approach for measuring performance of heuristics:
Schedule orders according to some simple dispatching rule and then ship ﬁnished orders to
customers as soon as they come out from the manufacturing process. The dispatching rule
we adopt here is ATC rule. This dispatching rule is easy to use and performs well in practice.
solution quality =
Total cost obtained by the heuristic
Total cost obtained by the benchmark approach
Since PSP is NP hard, for large size problem, we could not ﬁnd the solution within an ac-
ceptable computation time. As mentioned earlier when the number of orders is less than
or equal to 9, we can ﬁnd solution within acceptable computation time. Thus, in the PSP
part, we ﬁrst sequence the orders by ATC and then decompose orders into 3 subproblems
of sizes 9 , 8 and 8. Table 4 summarizes the mean solution quality of heuristics under
diﬀerent τ, R, β combinations. The result indicates that PSP+PSSP has the best perfor-
mance measure. ANOVA in Table 5 indicate that at β = 5, when R = 0.25, τ = 0.25
and R = 0.25, τ = 0.75, and at β = 20, when R = 0.25, τ = 0.25 there are diﬀerences in
performance measures . Conducting Tukey test (Table 6) for these combinations, we found
that PSP+PSSP has the best performance, and the next best is PSP+BB. From the test
experience, the computation time for ATC+BB is less than 1 second and that of PSP+BB
is around one minute. PSP+PSSP requires longest computation time and the most memory
space. Since the computation time of ATC+BB is much shorter than those of PSP+PSSP
and PSP+BB, thus when R = 0.75, τ = 0.25 and R = 0.75, τ = 0.75 (i.e., when range of
due dates is large), ATC+BB is the best choice. When the range of due dates is small, we
recommend the PSP+BB.
(insert table 4 here)
15
Figure 3: Production and shipment schedule
ture, and under limited transporter capacity, shipment scheduling depends only on the order
size and the problem becomes a shipment batching problem. Three easily codable heuristics
are proposed to solve the problem. Numerical test results indicate that production schedules
with and without shipment batching can be very diﬀerent. When the number of orders is
small, the numerical tests indicate that PSP+PSSP and PSP+BB are quite good. When
number of orders is large, we are unable to ﬁnd the optimal solution within an acceptable
computation time, thus we resort to compare the relative performance of heuristics. From
the test results, we recommend to use ATC+BB when the range of due dates is large and
to use PSP+BB when range of due dates is small. The extension of this problem, which is
now under study, is to study systems with one manufacturer and multiple customers. The
integrated production scheduling and shipment scheduling problems are much more complex
for such systems, since shipment scheduling depends also on how ﬁnished goods is routed
from the manufacturer to the customer.
6 References
Chen,Z. 1996, Scheduling and common due date assignment with earliness-tardiness
penalties and batch delivery costs European journal of operational research 93 pp. 49-
60.
Fisher, M. L., 1976, A dual problem for the one machine scheduling problem. Mathe-
matics Programming 11 , pp.229-251.
Hall, N.G., C.N. Potts 2003, Supply chain scheduling: batching and delivery , Opera-
tions Research 51, pp.566-584
Herrmann, J. W., Chun-Yee Lee 1992, On scheduling to minimize earliness-tardiness
and batch delivery costs with a common due date, European Journal of Operational
Research 70 pp. 272-288
Kleywegt, A.I., V.S. Nori, M.W. Savelsbergh 2002, The stochastic inventory routing
problem with direct deliveries, Transportation Science 36 pp.94-118
17
Input  , , , 1, 2,...,j j jd v C j n=Start
Relabel the orders such that 1 2n nC C C C− 1< < ⋅⋅⋅ < <  
1 1{ , ,..., }, , 1, 2,...,n n iJ J J J B i nφ−= = ∀ =  
min{ }, 0k ii k J J K= ∈1i =  ?J φ=
 
 
Figure 1 
{ }, { }i i iJ J J B J= − =  
=
min{ };km k J J L= ∈ J=  0?iK =
min{ }km k J= ∈ L
Include order 
 into mJ
( )?i iB J  
{ }mL L J= −
1 ?m n+ >
1i iK K= +
{ }, { }, { }m i i m mJ J J B B J L L J= − = ∪ = −
Shipment schedule 
and total cost 
end 
YESNO 
YES 
NO 
NO 
YES 
NO 
YES 
Figure(s)
 R=0.75 τ =0.75 
order          1 2 3 4 5 6 7 8 9
dj 28 85 -28 66 88 -1 121 67 48 
vj 7 22 63 25 1 94 68 41 27 
 
OPT (1)
PSP+PSSP (1)
PSP+BB (1.0006)
ATC+BB (1.0016)
 
 (days) 
 
 
( ): solution quality.  Orders that are connected by lines are shipped together 
 
 
R=0.25 τ=0.75  
n 1                2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
dj 249 213 253 396 359 305 461 296 336 371 264 241 409 166 306 275 173 457 416 481 443 269 254 212 451 
vj 1             72 55 7 30 90 84 37 85 67 68 31 18 83 4 86 71 65 58 7 84 25 43 89 25
β=5 
 
ATC+BB(1.000737) 
PSP+BB (1.000085) 
PSP+PSSP (1) 
 
β=20 
ATC+BB(1.00076) 
PSP+BB (1.000076) 
PSP+PSSP (1) 
 
 
Table 2  
 
 
  Sum of Squares df Mean Square F Sig.
R=0.25、τ=0.25 Between Groups .102 3 3.403E-02 8.999 .000
  Within Groups .136 36 3.782E-03   
  Total .238 39    
R=0.25、τ=0.75 Between Groups 5.950E-06 3 1.983E-06 6.857 .001
  Within Groups 1.041E-05 36 2.893E-07   
  Total 1.636E-05 39    
R=0.75、τ=0.25 Between Groups 7.435E-02 3 2.478E-02 5.030 .005
  Within Groups .177 36 4.928E-03   
  Total .252 39    
R=0.75、τ=0.75 Between Groups 1.025E-05 3 3.418E-06 3.994 .015
  Within Groups 3.081E-05 36 8.558E-07   
 Total 4.106E-05 39    
 
Table(s)
Table 4 
 
  PSP+PSSP PSP+BB ATC+BB 
β=5 1.000398775 1.004251368 1.010344792 R=0.25 
τ=0.25 β=20 1 1.000758297 1.007033021 
β=5 1 1.000418405 1.001664082 R=0.25 
τ=0.75 β=20 1 1.00003861 1.000939618 
β=5 1.001011022 1.010932533 1.017515076 R=0.75 
τ=0.25 β=20 1.00127674 1.011186233 1.0163855 
β=5 1.00005129 1.000810086 1.000498809 R=0.75 
τ=0.75 β=20 1.000001972 1.000137546 1.000232203 
 
Table(s)
