 2
 
3.1 實作 IBuilder介面 
 
參考圖 2，要建立自己的 Builder必須
繼承 IBuilder 介面，在這裡我們以建立一
個新的 AntJUnitBuilder為例子，來說明如
何建立 Builder。該 Builder會呼叫 ANT來
執行單元測試。 
為了簡化 Builder 的撰寫，我們提供
了 AbstractBuilder 物件，由該物件實作若
干共同的程式碼。因此，新的 Builder只需
繼承自 AbstractBuilder 並 override 幾個
method 即 可 。 我 們 在
AbstractBuilder.execute()套用了 Template 
Method [GOF95]，所以 execute()會另外呼
叫 兩 個 Abstract Method ：  run() 與
setPreferenceStore() 。 這 兩 個 Abstract 
Method就是 Hook Method，我們必須在繼
承 AbstractBuilder 的子類別去 override 它
們。圖 3是 AntJUnitBuilder實作 run ()的
程式碼內容，其主要功能在以執行外部程
式的方式呼叫 Ant。 
至於 setPreferenceStore()的功用則是
要去設定 Builder所需的特別資料，例如產
生 Report與 Derived Resource的位置。圖
4是AntJUnitBuilder在 setPreferenceStore()
的實作內容。93-101 行是建立一個新的
PreferenceStore 的實體，之後再從系統內
取得設定資料，以Map形式顯示。這些資
料會以 XML存放在系統內。103-111行則
是為了設定此 Builder所需的特別資料，在
此我們設定了 Report 的放置目錄 (103
行)，Report 要被外界讀取的 url 路徑(106
行)，還有這個 Builder要紀錄 Report的專
屬Newshawk類別名稱(109行)。Newshwak
在是格式化 Builder內輸出訊息的物件。 
 
IBuilder
+setWorkspaceRoot(  : IWorkspaceRoot )
+getPreferenceStore() : IPreferenceStore
+getReport() : IReport
+getName() : String
+execute()
AbstractBuilder
-preferenceStore : IPreferenceStore
-IReport : IReport
+setPreferenceStore()
+execute()
+run()
AntJUnitBuilder
+setPreferenceStore()
+getName() : String
+run()
 
圖 2 AntJUnitBuilder的繼承關係 
 
3.2 註冊 Builder 
 
我們建立好新的 Builder 後，要在
Builder Factory註冊，才可以使用。Builder 
Factory 會 參 考 一 個 設 定 檔
（workspace.xml），以傳回不同的 Builder
實體。每個 Workspace都有這樣一個設定
檔，存放於Workspace內的_metadata目錄
中 workspace.xml。如圖 5所示，第 19-20
行就是我們新增的 AntJUintBuilder 的設
定，並在 Builder Tag內的 className屬性
設定完整的類別名稱。 
 
 
圖 3 run()程式列表 
 
 4
工作，我們將一個建構工作稱之為
Builder，不同專案將可依據其需要使用不
同的 Builder。圖 10 顯示子計畫三所採用
的建構工具設定畫面，其中包含了 statsvn
（可以分析與統計 source code repository 
異動情形）、GCCCompiler （GCC 編譯
器）、RATS（C++原始碼靜態分析工具）、
CppUnit（C++單元測試程式）。 
當建構活動執行完畢之後，JCIS會產
生一個執行成果報表；圖 11為子計畫三之
持續整合結果報表。該報表記載專案中所
使用之 Builder的執行時間、報表、建構結
果。圖 12顯示其中一項整合活動－編譯
C++程式－之詳細報表。由圖 12我們可以
發現該專案程式（通常是由學生所撰寫的
程式）宣告了例如 y、j等變數，但卻未使
用。此資訊可提供給專案主持人（老師）
在 code review 階段，作為審視程式碼的
一個檢查方向。 
 
 
圖 9：子計畫三「WiMAX實體層通道編
碼軟體模擬平台」之專案概觀畫面 
 
 
圖 10：子計畫三「WiMAX實體層通道編 
碼軟體模擬平台」所採用的建構工具畫面 
 
圖 11：子計畫三「WiMAX實體層通道編
碼軟體模擬平台」持續整合結果報表 
 
圖 12：子計畫三「WiMAX實體層通道編
碼軟體模擬平台」之 C++ 程式編譯結果
報表 
 
五、相關研究 
 
我們檢視了四個知名的開放原始碼持
續 整 合 系 統 ， 分 別 為 CruiseControl 
[CruiseControl]、Anthill [Anthill]、Gump 
[Gump]、Continuum [Continuum]，並與
JCIS做比較分析，其結果顯示於表 1。以
下我們說明表 1中各項功能特色的意義： 
 
z 分配測試至不同平台執行：專案內的測
試案例，可自動傳送到遠端異質平台上
進行測試。 
z 專案相依性：當 A專案參考到 B專案
時，A專案進行整合之前，自動先整合
B 專案，如此 A 專案才可參考到最新
版本的 B專案。 
z 程式庫相依性：當專案參考已經包裝好
的程式庫檔案(如 jar 檔)，每當進行整
合時，會使用此程式庫的功能進行整
合。 
z 同時建構多個專案：當持續整合系統內
有多個專案時，同時間可以執行多個專
案的整合。若未支援此功能，代表雖然
系統可以管理多個專案，但同時間只能
有一個專案執行整合。 
z 提供管理專案的Web介面：可以在Web
介面上進行建立、維護與刪除專案資
料。 
z 產生程式異動統計：可以在系統上直接
透過整合的介面察看程式經過時間異
動的統計報告。 
z 產生模組相依性資料：可以在系統上直
