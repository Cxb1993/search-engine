 1. 前言 
近十幾年以來，由於許多新興應用層面的需求，資料庫系統使用者必須能夠管理移動物件(mobile 
objects)並進行行動查詢(motion query)；許多相關的新興應用例子如:行動無線裝置的追蹤(wireless 
communication)[4]、地理位置定位(geographical positioning)[2]、交通運輸監控(traffic monitoring)、氣象形
態追蹤(weather pattern tracking; 追蹤暴風雨雲層前鋒)[1]、衛星影像追蹤綠色植被覆蓋面積、甚至
戰爭模擬時軍隊陣式推測(military formation in a war simulation)。許多研究和方法將空間與時間的資料
模式(data model)以及資料庫系統(database system)加以整合，由於移動物件在空間與時間交互作用
下，物件的時空特性呈現較為複雜的資料屬性，空間-時間資料庫必須在資料表示模式(data 
representation model)、資料分類技術(data classification)、索引方法(indexing scheme)、以及查詢方式(query 
type)方面，突破許多傳統方式無法解決的問題，這些問題包括：資料保存的準確性與時效性
(accuracy & expiration)、資料更新的效能與效率(efficiency & efficacy)、資料查詢的精確度與速度
(correctness & performance)、甚至資料查詢結果的推理能力(data reasoning)。一套好的空間-時間資料庫
應該同時架構在兩個重要的基礎上，第一是完整的時空資訊保存能力，第二是高效能的索引系
統。 
 
2. 研究目的 
本計畫首先致力於發展空間-時間資料(spatio-temporal data)的資料處理與索引技術，並將研究成果
應用至地籍資訊系統 Land information system (LIS, 亦稱為 cadastral systems)。一套優良的空間-時
間資料庫(spatio-temporal database)必須能夠同時有效且精確地處理物件的空間與時間資料，並且提
供資料庫使用者快速、正確、多樣化的查詢功能與結果。空間資料庫(spatial database)處理空間性
或非空間性(aspatial)物件，此類系統統稱為空間資料系統(spatial information system; SIS)，傳統空間資
料庫處理靜態物件，由於靜態物件的資料屬性值不會因為時間的改變而變動，因此資料更新在
空間資料庫中較不常使用，一般常見的操作為資料新增(data insertion)與資料刪除(data deletion)；另
一方面，時間資料庫 (temporal database)通常用來處理事件 (或物件 )的歷史性資訊 (historical 
information)，歷史性資訊應包括：事件的發生時間、事件的持續時間以及事件的結束時間，一個
功能完整的時間資料庫應該可以同時處理過去(past)、現在(present)、以及可預期的未來(anticipated 
future)的時間資料；在眾多的空間-時間資料庫應用例子中，地籍資訊系統是其中的一項重要應
用，一套完善的地籍資訊系統必須在時空資料的準確處理與有效的索引技術結合之下才能達成。 
 
3. 文獻探討 
許多研究 [5, 8, 9]使用線性時間函數(linear time function)來描述動態物件的位置與時間的關係，因
此在空間-時間的座標平面中，物件的移動軌跡便成為無方向性的延伸線段，使用MBR為基本物
件的傳統索引方法(R-tree、R*-tree、STAR-tree [7]、REXP-tree [9])立即遭遇三個主要問題： 
(1) 如果物件不斷地改變移動速度(移動方向或速率)，代表物件的時間函數也必需不斷地更新函
數的參數值。 
(2) 物件的移動軌跡可能隨著時間一直持續下去，因此造成無法判定MBR終點的窘境。 
(3) 用MBR表示線段時，容易導入大量的無效區域(dead space)與重疊區域(overlapping areas)。 
另外一種方式將整個資料空間以非重疊的 cell進行切割，再將線段切為許多小的段落處
理，R+-tree[11]、cell-tree、PMR-quadtree[10] 可以進行 cell 的索引處理；線段大量複製(line 
replication)與長線段造成的頻繁更新(update overhead)是採用cell的缺點。Wolfson [5]提出了移動性物
件的空間-時間模型(moving objects spatial-temporal data model；MOST)與 language FTL 用於查詢移動性
物件的現在與未來位置的方法，他們對移動物件的位置子屬性(包含起點時間、路徑、x起點位置、
y起點位置、移動方向、移動速度與移動策略)進行探討與解析，提供可能的研究方向。 
行政事務高效率需求；使用傳統管理方式於圖籍資料或文字資料管理，不但需要耗費大量儲存
空間，且圖紙經多次翻折容易破損。近年因國內土地使用變化加快，早期國土利用調查之相關
資料多與現狀不符，因此需要快速確實的掌握土地利用現況，來滿足土地管理的需求，而航空
遙測與太空遙測(space and remote sensing)[12]的影像解析度日益提升，使得土地利用調查、分類工
作成為可普遍執行的業務，因此未來可配合地籍資料，建立完整的土地資料庫，以充實國土資
訊系統應用需求。隨著時間的演進，地籍物件的所在位置(location)與空間範圍(extent)可能不斷地
變化，地籍物件亦可能於某些特定時間出現或消失，記錄地籍物件的變化必須同時考慮資料在
空間與時間維度上的變化，除了資料新增與資料刪除外，在地籍資訊系統或類似應用中，資料
更新是最重要的操作方法；傳統資料庫中經常使用的資料新增與資料刪除操作無法達成資料更
新的目的，運用新的資料處理與索引處理技術，我們將對地籍物件的管理議題進行研究分析與
評估。 
依照物件所佔據的空間範圍可分為點物件(point objects)與區域物件(region objects)，點物件所佔
據的空間範圍為零(zero-size extent)，因此點物件移動時產生的時空資訊呈現線性變化(linear 
movement)，然而區域物件移動時影響的空間範圍較為廣大，所以產生的資訊呈現形體變化
(morphological movement)；我們首先處理點物件在一維空間中的移動，圖一顯示四個在一維空間中
移動的物件(O1、O2、O3與O4)，物件O1產生3個軌跡線段(trajectory segments) C、E以及H；物件O2從
時間t1始終維持靜止不動，它的軌跡線段記為D；物件O3的軌跡由F、J 以及K構成；物件O4的軌
跡線段為G與I，這9條軌跡線段在空間-時間平面(space-time plane)上共產生11個端點(endpoints)，這
些端點在時間軸上有7個不同的時戳值(timestamp)，在位置軸上有8個不同的數值，利用97年度研
究成果中的索引結構compressed B+-trees[17] 將7個不同的時戳值與8個不同的數值分別組織起
來，圖二顯示時戳值的時間索引結構(temporal compressed B+-tree；TCB+-tree)，圖三顯示位置值的空
間索引結構(spatial compressed B+-tree；SCB+-tree)。 
 
 
圖一、一維空間移動物件的空間-時間示意圖。 
 
 圖三、由空間資料構成的 compressed B+-tree (SCB+-tree)。 
 
在圖二 TCB+-tree 中，由於時間資料值是不斷在遞增的，所以資料的加入一直都發生在樹
狀結構的右側，然而刪除過時的資料(expired temporal data)則總是發生在樹狀結構的左側，因此不
論單一資料或是批次資料的新增或刪除，在 TCB+-tree中都不需要先進行樹狀結構的搜尋動作，
局部資料項(keys or tuples)與指標(pointers)的調整是TCB+-tree結構主要的維護操作。另外，在圖二 
SCB+-tree 中，資料的新增與刪除可能發生在索引結構中的任何位置，所以樹狀結構的搜尋必須
先進行以確認資料變動的所在位置，值得一提的，在我們的 TCB+-tree或 SCB+-tree進行資料搜
尋時，搜尋路徑(search path)為單一性(single)，不像許多傳統樹狀結構(R-tree、R*-tree)，它們的搜
尋路徑是多重性(multiple)，因此在 SCB+-tree中進行資料的新增與刪除還是可以快速地完成。 
Compressed B+-trees 採用一套「節點變異數比較(comparison of node variance)」的機制，此機制
可以將索引結構底層的資料經過變異數的計算與比較後，進行局部資料微調 (local data 
redistribution)，以確保樹葉節點內的資料得以更準確地被分類，同時由於資料經過更集中的分類
與更緊密的安排後，使得索引結構的使用效能大幅提升，以圖二與圖三為例，它們的索引結構
空間使用率分別為 %75%100)34(9 =××  與 %3.83%100)34(10 =×× ，與傳統 B
+
-trees的50%~70%空間
使用率比較起來，compressed B+-trees更有效地壓縮索引結構的空間，其產生的效果將直接改良
資料庫的查詢效率。以下扼要描述如何利用「節點變異數的比較」達到索引結構壓縮的目的：
資料在樹葉節點內完全依照順序由小排到大(totally ordered)，假設兩個前後相鄰的樹葉節點 A與 B
分別存放資料 },,,{ 21 naaa L 與 },,,{ 21 mbbb L ，A與 B的節點變異數 )(2 Asn 與 )(2 Bsm 可以經由下列運算
求得： 
2
1
2 )()1(
1)( ∑
=
−
−
=
n
i
nin aa
n
As
         
2
1
2 )()1(
1)( ∑
=
−
−
=
m
i
nim bb
m
Bs
 
我們將 −RA 記作節點 A經過移除最後一項資料(an)的修改， )(2 1 −− Rn As 可以利用下面運算進行評估， 
22
1
2
1
22
1
1
1
2
1
1
1
22
1
1
1
1
22
1
1
2
1
2
)())(1()()2(                    
)()()(                    
)()(                    
)()()()()1(
nnnnRn
nn
n
i
nn
n
i
ni
nnnn
n
i
ni
nn
n
i
ni
n
i
nin
aaaanAsn
aaaaaa
aaaaaa
aaaaaaAsn
−+−−+−=
−+−+−=
−+−+−=
−+−=−=−
−
−
−
−
=
−
−
=
−
−
−
=
−
−
==
∑∑
∑
∑∑
 
因此， ])())()()(1[()2(
1)( 22122 1 nnnnnRn aaaaAsn
n
As −−−−−
−
=
−
−
−
；另外， −LA 是節點 A經過移除第一項資料(a1)
的修改，同理，我們利用 ])())()()(1[()2(
1)( 212122 1 nnnnLn aaaaAsn
n
As −−−−−
−
=
−
−
−
。在另一方面， +RB  與
+
LB
分別代表節點 B 在最右側與最左側加入一筆新資料， )(2 1 ++ Rm Bs 與 )(2 1 ++ Lm Bs 的計算方式如下： 
])()()()1[(1)( 2112122 1 +++++ −+−+−= mmmmmRm bbbbmBsm
m
Bs  
])()()1()[(1)( 2122112 1 ++++ −+−+−= mmmmLm bbmBsmbb
m
Bs
 
then |T| can be approximated as  
λλ −−
=−−=>× NeeNYN 2)]1(1[2)0Prob(2                              ( 9 ) 
On average, the number of entries collected in a bucket is λλ eNeN =−22 .  
The number of leaves allocated by a CB+-tree is thus approximated as 




 −
α
λ
M
Ne2
. Similar space 
utilization ( =× %1002ln 69.3%) [23] to that of traditional B+-tree is imposed on the internal structure 
of CB+-tree. By taking both internal and external structures into account, the amount of nodes 
generated by SCB+-tree (or TCB+-tree) can be approximated as 
)
12ln
2ln(2)
2ln
11(2
−
⋅





≈++




 −−
α
α
α
λ
αα
λ
M
M
M
Ne
MM
Ne
L                       (10) 
On the other hand, the amount of nodes generated by TPR-tree can be approximated as 
)
12ln
2ln(
2ln
)
2ln
11(
2ln
2
−
⋅








≈++







 −
β
β
βββ
λ
M
M
M
N
MM
Ne
L                     (11) 
The depths of SCB+-tree (or TCB+-tree) and TPR-tree can be evaluated as 
  1
2log 2ln +




 −
α
λ
α M
Ne
M and   12ln
log 2ln +








β
β M
N
M , respectively. The ratio between them is calculated 
as follows: 
 
 
 
β
αλ
β
α
λ
β
α
λ
α
β
β
α
λ
β
α
MN
M
eN
M
N
M
Ne
M
N
M
Ne
M
M
M
N
M
Ne
M
M
log2lnloglog
2logloglog
2ln
log
2log
                                 
2ln
log
2log
)2lnlog(
)2lnlog(
2ln
log
2log
2ln
2ln
−−
−−
≈<
×≈














−
−
−
  
Since 2ln>λe and βα M
M
≈2 , this ratio is less than 1. This reveals that the depth of SCB
+
-tree or 
TCB+-tree is always shorter than that of TPR-tree.  
For the completeness of this analysis, N=105 and λ =1 are employed to generate the practical 
statistics as listed in Table 1. Two SCB+-trees and one TCB+-tree are constructed to complete all the 
indexing work. The resulting CB+-tree with a smaller total number of nodes than the TPR-tree verifies 
the efficient storage requirement entailed by our method. The ratio of total number of nodes generated 
between triple CB+-tree and TPR-tree is about 77.0
3473
8923
≈
×
. 
  
Table 1. The simulated results of SCB+-tree (or TCB+-tree) and TPR-tree. 
Indexing scheme Maximum capacity Number of total leaves Number of total nodes Depth 
factor satisfying 2ln1 βMc ≤≤  and H is the depth of TPR-tree. The experimental results of query 
performance are presented in subsection 6.2. Note that the proposed method is more efficient than 
TPR-tree due to the complexities of index hierarchy, data entry comparison, and number of search 
paths. 
C programming language was employed to simulate the motions of moving points on the 
underlying two-dimensional space with a resolution of 10001000 × . We used the proposed method to 
construct two SCB+-trees and one TCB+-tree. One TPR-tree was also constructed for comparison. All 
indexing structures ran on a 1.73 GHz Pentium IV Personal Computer with 1Gbyte of memory. 
Synthetic datasets containing various trajectory segments were generated by simulating the 
vehicles moving in an area of heavy traffic. These segments can connect or disconnect. In other words, 
they can share endpoints in common or not in geometric appearance. As explained in Section 3, the 
vertical segments on the space-time plane for one-dimensional moving objects are meaningless. Hence, 
any vertical segments on the plot with x-axis or y-axis vs. time were not included in our datasets. For 
every trajectory segment, the generation of the start position is based on the uniform distribution U(0, 
999)×U(0, 999). Then the horizontal and vertical extents in one time unit are obtained from the 
uniform distribution U(-100, 100). The negative extent means that object is moving backwards. 
Consequently, every object’s velocity at every moment is explicitly specified in our simulation. The 
Poisson’s parameter λ varied from 0.2 to 2. The distance and time units in our simulation could be 
denoted by meters and seconds when practical situations are considered. Dataset sizes vary from 104 to 
105. We illustrate one of our datasets as follows. In the scenario that every single segment occurred to 
the dataset per five time units on average, i.e., 2.0=λ , the dataset will collect about 104 segments after 
a lapse of estimated time 4
4
105
2.0
10
×=  passed. Our indices and TPR-tree are built as soon as the first 
segment is generated. All indexing works are finished when the estimated time is over.  
 
5.3 Index performance 
As well known, the major ingredients of a balanced indexing structure are terminal nodes. The 
internal structure is created for organizing all terminal nodes so that the total number of leaves 
dominates the derivation of non-leaf nodes. The compression mechanism of CB+-tree targets on 
admitting data as far as possible, thus reducing the total number of leaves. Hence, we investigate only 
the number of generated leaves in the first experiment. As shown in Fig. 5(a), with growth in data size, 
the leaves generated by TPR-trees increase more rapidly than those by CB+-trees. The effect of various 
λ values on generation of leaves is also investigated. As shown in Fig. 5(b), in a scenario that dataset 
size is equal to 5×104, CB+-trees can allocate less and less leaves when λ increases. This is because the 
extracted critical timestamps and locations have increasing repetitions when λ grows. As for space 
utilization performance, Figs. 5(c) and 5(d) show wider gaps between CB+-trees and TPR-trees. 
Increasing data size degrades space utilization of TPR-tree while this has no significant effect on those 
of CB+-trees. Similarly, variation in λ has no significant effect on space utilization of CB+-tree. The 
stable index performance is essential to query performance. 
  
                  (a)                              (b) 
Fig. 6 The experimental results for point queries. 
 
In regard to interval queries, both time-slice and location-slice queries are applied in this 
experiment. The issued time and the start position of this query type are randomly selected from [0, 
4999] and [0, 1000]×[0, 1000]. The spatial lengths of time-slice queries and the temporal lengths of 
location-slice queries are selected from the uniform distribution of U(10, 500). All generated time-slice 
and location-slice queries are stores in separated query files. Similarly, all experimental results with 
respect to nodes involved and key comparisons triggered are averaged and shown in Fig. 7. The wider 
query ranges can incur rectangle comparisons so frequently that they degrade seriously the query 
performance of TPR-trees. As shown in Figs. 7(a) and 7(b), the gulfs continue to expand as compared 
with Fig. 6. 
      
 
(a)                              (b) 
Fig. 7 The experimental results for interval queries. 
 
For the query files used in the experiment of interval queries, we extend the time intervals of 
time-slice queries and spread the spatial ranges (x- and y-directions) of location-slice queries for 
generating the window queries in the final experiment. The extension lengths are selected from U(10, 
50). Once again, Fig. 8 verifies that efficient query performance is attainable and remains at a stable 
level throughout our indexing structures. 
    
 
(a)                              (b) 
Fig. 8 The experimental results for window queries. 
 
 
Service Systems and Service Management (ICSSM’08), June 30- July 2, 2008, Melbourne, Australia. 
[22] Hung-Yi Lin & Shih-Ying Chen, "High Indexing Compression for Spatial Databases", IEEE 8th International 
Conference on Computer and Information Technology (IEEE CIT 2008), Sydney, Australia, July 8-11, 2008. 
[23] A. Yao, Random 2-3 trees, Acta Informatica 2(9) (1978) pp. 159-170. 
 
計畫成果自評 
研究執行成果與計畫預定目標完全相符，並達成預期的效果，本研究已在國際學術研討會發表。
未來研究方向將著重在高維度移動物件(high dimensional moving objects)的處理，持續目前研究並提出
一種架構將多個索引結構進行整合或簡化的處理；另一可行的研究方法是選取較具代表性的空
間維度用於有效的索引處理，空間維度的選取可以根據使用者的主觀認定，也可以基於目前物
件資料進行空間維度探勘(dimension mining)。 
 
 
hand, the critical positions on the extracted frames are 
collected into Dx. The elements in Dt and Dx are collected 
according to following formulae. 
}.D20,|| ,dimension          
  timeon the  ofendpoint   theis |{
ST
t
kk
t
SS
SttD
∈∀>
=
                    (1) 
}.D2dimension,          
position  on the  ofendpoint   theis |{
ST
kk
x
S
SxxD
∈∀
=
            (2) 
A vertical segment on the plot is improper since this 
means an object’s position is indefinite at a specific frame. 
However, a horizontal segment is proper that standards for 
an object keeping still at a specific position during a period 
of time. One segment without joints with others contributes 
two elements to Dt and Dx. Other segments can contribute 
none or at most two elements to Dx and Dt. Following the 
example as Fig. 1, we have Dt={t0, t1, t2, t3, t4, t5, t6} and 
Dx={40, 30, 50, 60, 15, 70, 90, 10}. 
 
 
(a)  TB+-tree                                           (b) SB+-tree 
Figure 2.   
  In the sequel, two compressed B+-trees are built based 
on the insertions of the elements of datasets Dt and Dx. They 
are temporal and spatial B+-trees and respectively 
abbreviated as TB+-tree and SB+-tree. Fig. 2(a) depicts TB+-
tree. Every bucket at the bottom structure of the TB+-tree 
preserves those identifiers of segments which have spatial 
involvements in the corresponding time interval. Besides, 
TB+-tree is more compact than conventional B+-tree in the 
aspect that insertion to a full leaf is treated by a dispersion 
mechanism instead of node splitting. This mechanism is 
activated at time t5 when t5 is going to insert into the full leaf. 
The leftmost entry t2 is shifted to the left sibling and this 
allows the target leaf can accommodate the new insertion. 
For trajectory S with departure and arrival positions 
xx SS 21  and , SB
+
-tree uses S, S’, and S in distinguishing the 
onward, backward, and still motions. Following three criteria 
classify the object identifiers into the corresponding buckets 
at the bottom structure of the SB+-tree (Fig. 2(b)). 
} where,                  
 and 0|| and 0],[|{)( 21
STDBS
SSSSxxSx xxtxiii
∈∀
<>≠=Γ + I
(3)
} where,                 
 and 0|| and 0],[|'{)( 21
STDBS
SSSSxxSx xxtxiii
∈∀
>>≠=Γ −− I
(4)
} where,                 
0|| and 0||and 0],[|{)(
STDBS
SSSxxSx xtxiii
∈∀
=>≠=Γ + I
                 (5) 
Terms −ix and 
+
ix are defined as the values immediately 
before and after xi in Dx. The same argument is also applied 
on the time dimension. 
III. TWO DIMENSIONAL DATA INDEXING 
Minimum bounding rectangles are used to enclose the 
objects with non-zero size. The task of indexing becomes to 
handle the boundary variation of the MBRs. Fig. 3(a) 
sketches the movement of one object on the xy-plot. Four 
frames extracted during [t1, t4] 
  
(a)                                      (b) 
Figure 3.  Two-dimensional moving objects. 
MBR projections on the x-dimension are first considered 
at different timestamps. The starting endpoints and final 
endpoints of these projections are respectively marked as 
dots and circles. Then, directed segments are employed to 
represent moving trajectories of dots and circles in the time-
position plot. In Fig. 3(b), si and ei reveal the MBR 
trajectories along the x-axis from ti to ti+1. As well, MBR 
trajectories are classified into three types according their 
motion direction. The following sets explicitly identify the 
proper types for each segment. 
Set I：
} and 0|| and 0],[|{
} and 0|| and 0],[|{
2121
2121
ii
t
iii
ii
t
iii
eeeexxe
ssssxxs
<>≠
<>≠
I
UI
             (6) 
Set II：
} and 0|| and 0],[|'{
} and 0|| and 0],[|'{
2121
2121
ii
t
iii
ii
t
iii
eeeexxe
ssssxxs
>>≠
>>≠
I
UI
            (7) 
Set III：
} and 0|| and 0],[|{
} and 0|| and 0],[|{
2121
2121
ii
t
iii
ii
t
iii
eeeexxe
ssssxxs
=>≠
=>≠
I
UI
           (8) 
Terms || tis and || tie stand for the length of the projections. 
Terms si1 and si2 (ei1 and ei2) are the starting and end x-values. 
The same arguments are applied on the y-axis as well. 
A. Regional Queries 
Sample query 1: “List all regions where the ball appears 
between twentieth and twenty-fifth minutes”. 
This is a rather simple 2D query in our model. We first 
search the TB+-tree according to the indicated time interval 
and check whether the indicated objects appear in this during. 
Then, we search the bottom structure of the SB+-tree for the 
indicated objects and execute the upward tracking to find the 
positions involved by the indicated objects. The algorithm is 
as follows: 
1. Search the TB+-tree for the target leaves containing the 
starting and end time of the query time. 
2. At the bottom structure of TB+-tree, retrieve a list of 
buckets which are referred by those leaf entries preserved 
between the first and second targets. 
3. Find the interested objects in the list of buckets and back 
refer the corresponding positions preserved in the leaves of 
SB+-trees (SBx+-tree and SBy+-tree). 
 
Sample query 2: “List all time intervals during which a 
person appears in a given area”. 
The calculation is very similar to the previous 2D one, 
since the SB+-trees (SBx+-tree and SBy+-tree) are first searched 
for the consistent output of indicated objects. Then, the 
objects are used in the back tracking on the TB+-tree for 
retrieving the corresponding valid time intervals. Here is the 
algorithm: 
1. According to the given positions, search the SBx+-tree and 
SBy+-trees for the target leaves containing the starting and 
end positions of the query area. 
2. At the bottom structure of SBx+-tree and SBy+-tree, 
respectively retrieve the objects referred by those leaf entries 
preserved between the first and second targets. 
3. Interact the contents retrieved from SBx+-tree and SBy+-tree 
to output the common objects. 
4. Find the interested objects in the output of step3. Execute 
the back tracking in the TB+-tree and output the qualifying 
time intervals. 
B. Fuzzy Sptial Relationship Queries 
Sample query 3: “Find all time intervals, in which object 
A is at the left of object B with threshold value of 12”. 
We compare the contents of every two consecutive 
buckets in the bottom structure of TB+-tree. If there are more 
than two objects found in two consecutive buckets, it means 
that these objects continue moving during a period of time. 
Then, these objects at the bottom structure of SB+-tree(s) are 
tracked upwardly. In the case that the tracked positions are 
within the threshold value, then answer is found in this query.  
We take Fig. 2 to illustrate this query processing 
throughout. Objects {D, E} are obtained by examining the 
bottom structure of TB+-tree between t2 and t3. Similarly, {D, 
F}, {D, H}, and {D, H, I} are obtained by examining the 
time pairs (t3, t4), (t4, t5), and (t5, t6). Then, the bottom 
structure of SB+-tree is checking for their spatial 
relationships. Objects D and E can not be found in the same 
bucket in SB+-tree so that {D,E} is not qualified as an answer. 
In addition, {D, F} and {D, H} are not either. Since {D, H} 
are not qualified, only the partial subsets {D, I} and {H,I} of 
the candidate dataset {D, H, I} are checked in the next. 
Objects H and I do appear in the same bucket referred by 
position 60 and are outputted as the answer. Object H does 
not appear in the bucket referred by position 50 so it starts to 
move onward from position 60. The apostrophe over object I 
tells that object I moves backward from position 70. As a 
result from the above reasoning, object H is at left of object I 
within the threshold value at the time t5. Onward H and 
backward I are moving closer and closer to each other from 
that on. 
C. Fuzzy Spatial-Temporal Queries 
Sample query 4: “Find all trajectories of object A, starting 
from position P1 and ending at position P2, with a threshold 
value of 10”. 
The leaves of SB+-tree are examined for the positions P1 
(if P1 is not found, min(P1-10, P1-) is taken) and P2 (if P2 is 
not found, max(P2+10, P2+) is taken). The buckets referred 
by the leaf entries between P1 and P2 are retrieved. Then, we 
find the common objects in all retrieved buckets. If the 
common object(s) are found, tracking the bottom structure of 
TB+-tree upwardly based on these object(s). The results of 
interested objects with their exact travel time are achieved. 
Again, we take P1=60, P2=80, and threshold=10 to 
search the indexes in Fig. 2. An interval [60, 90] is applied 
on searching the SB+-tree and two buckets {E, H, I′} and {G′, 
H} are fetched. The common object H in these two buckets 
reveals that object H keeps its movement in the interval [60, 
80]. After compare this information with TB+-tree, the 
system answers that object H keeps moving from position 60 
to 80 during the time interval [t4, t6]. 
VI. CONCLUSIONS 
An efficient framework for preserving the spatial and 
temporal information of visual modality of multimedia data 
is addressed in this paper. Due to B+-trees exhibit simplicity, 
robustness, and stability in their hierarchical structures. Our 
method utilizes modified B+-trees and thus reduces the 
complexity of index building. Furthermore, this indexing 
strategy facilitates the performance of data retrieving.                              
Our study has pushed B+-trees into a new level with non-
diminishing popularity in multimedia database applications. 
REFERENCES 
[1] K. El-Maleh, M. Klein, G. Petrucci, and P. Kabal, “Speech/music 
discrimination for multimedia applications”, IEEE International 
Conference on Acoustics, Speech, and Signal Processing, pp. 2445-
2448, Istanbul, Turkey, 2000. 
[2] H.Y. Lin, “Efficient and Compact Indexing Structure for Processing 
of Spatial Queries in Line-based Databases”, Data & Knowledge 
Engineering, 2008, 64(1), pp. 365-380. 
[3] H.Y. Lin, R.C. Chen and S.Y. Chen, “Enhancement of Data 
Aggregation Using A Novel Point Access Method,” WSEAS 
Transactions on Computers, 12(7), December 2008, pp. 2001-2010. 
[4] A.K. Peker, A.A. Alatan, and A.N. Akansu, “Low-level motion 
activity features for semantic characterization of video”, IEEE 
International Conference on Multimedia & Expo, New York City, 
USA, 2000. 
無衍生研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
1. 中區技專校院校際聯盟 2009年研發成果網路聯合發表會管理類佳作 
2. 臺中技術學院 98年度論文優良獎 
3. 中山醫學大學醫療產業科技管理學系專題演講 98 年三月 
4. 99年度學界協助中小企業科技關懷計畫 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
