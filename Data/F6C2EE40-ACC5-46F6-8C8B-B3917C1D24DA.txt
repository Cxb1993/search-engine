2行政院國家科學委員會專題研究計畫成果報告
以量子類神經網路求解滿足限制問題
Solving Constraint Satisfaction Problems Using
Q'tron Neural Networks
計畫編號：NSC 90-2213-E-036-001
執行期限：94 年 8 月 1 日至 95 年 7 月 31 日
主持人：虞台文 大同大學資工所 twyu@mail.cse.ttu.edu.tw
計畫參與人員：李作中 張循鋰 陳美靜 薛宇良
一、中文摘要
本研究以量子類神經網路來解決滿足限
制問題（Constraint Satisfaction
Problems, CSPs）。此網路模式為霍普菲爾類
神經網路（Hopfield Neural Network）之延伸，
有效地解決了類神經網路常停滯於局部最低
能量狀態（Local Minima）的問題。模
擬退火（Simulated Annealing）常被用於解決
此問題，該演算法根據系統目前溫度來控制
注入類神經元之雜訊強度之機率分配。只要
溫度非為零，注入極強雜訊於類神經元中機
率恆不為零。故，在溫度非為零時，即使類
神經網路已抵最佳解之狀態，該狀態非為穩
態，故極有可能跳脫此最佳解狀態。此現象
肇因於一般建構之能量函式所對應到的系統
為一非知能系統（Unknown-Energy System）。
量子類神經網路是採用知能系統
（known-energy）的觀念來解決問題。要言
之，吾人可訂定所謂的解品質界定子
（Solution Qualifier）來規範解之品質。藉
此，吾人可獲知系統能量抵某一特定低能量
範圍內時必對應於一有效解，故稱之為知能
系統。根據解品質界定子，注入各類神經元
之雜訊強度範圍是受限制的，並可以簡單的
公式求出。持續將此強度範圍內之雜訊注入
於量子類神經元中，當該網路抵達穩態時，
必對應於一有效解。這是求解滿足限制問題
時的必要條件。除此之外，知能系統具有自
動可逆（auto-reversible）的特性，使得我們
與網路可以問答方式互動。本期研究我們成
功的完成了N-皇后（N-queen Problem）問題
之求解。其效能遠高於其他演算法。
Abstract
This research focuses on solving the constraint
satisfaction problems using the Q'tron neural network
(Q'tron NN) model, which is an extension of the Hopfield
NN model. Due to a vast number of local minima, a
Hopfield NN usually will pathologically report an
unsatisfactory solution. To alleviate the symptom, a
Hopfield NN is usually equipped with a noise-injection
mechanism based on simulated annealing. Although
simulated annealing usually is able to improve a certain
degree of solution quality, it doesn't guarantee that the
final solution is optimal unless the system temperature is
cooled down extremely slow. Moreover, the strength of
random noise injected into each neuron is possibly
unbounded at any time unless the system temperature has
reached zero. This may lead the system to move toward a
wrong direction, e.g., to depart from an optimal state. In
fact, the systems controlled by simulated annealing are
unknown-energy systems. The Q'tron NNs, on another
hand, solve problems in a known-energy sense. That is, the
lower energy range specified using the so-called solution
qualifier, corresponding to a set of satisfactory solutions is
known a priori. With such a piece of knowledge, the
bounded noise spectra for Q'trons can be systematically
determined. Injecting such random noises into Q'trons, the
NN, as a result, will only settle down on a state whose
energy is sufficiently low, i.e., the solution quality satisfies
the criterion described by the solution qualifier. Therefore,
the Q'tron NN will never report a false solution when it
settles down. This is particularly important for solving
constraint satisfaction problems. Besides, the
known-energy property will render the NN intrinsically
auto-reversible and, hence, enable the NN to be operated
in a question-answering mode. A Q'tron NN is built to
solve N-queen problem to highlight the concept, and
experiments verified that its performance is surprisingly
good.
二、研究成果
如附件之論文
(b)(a)
FullMode
NRS = 1:3:1
1
Full Mode
NRS = 1:0:1
1
Prob. Prob.
i
N
-
i
N
-
i
N
+
i
N
+
Figure 1. (a) The Q’tron model. (b) Sample
noise spectra of Q’tron NNs.
such that one can tell whether or not a state of the Q’tron
NN corresponds to a feasible solution by knowing the en-
ergy level of that state. Accordingly, we are able to deter-
mine the bounded noise spectra3 for Q’trons in the NN.
Furthermore, the random noises for Q’trons will be persis-
tently existent, meaning that none schedule is ever needed
to control the distribution of noise strength for Q’trons. In
the paper, we will apply the concept to solve a benchmark
CSP, say N -queen problem. The problem solving strategy
of this novel approach is considerably different from rele-
vant approaches using Hopfield-like NNs, e.g., (Douligeris
and Feng 2002, Mandziuk 1995, Tambouratzis 1997).
The organization of this paper is as follows: Section 2
gives a brief overview of the Q’tron NN model. Section 3
describes the general scheme to solve CSPs by building
a Q’tron NN as a known-energy system. To manifest the
known-energy concept, Section 4 describes two methods to
build Q’tron NNs to solve N -queen problem. One is based
on the method in Section 3, and the other is by considering
the problem nature. Section 5 demonstrates some experi-
mental results. Finally, we will reach a conclusion in Sec-
tion 6.
2. The Q’tron NN Model
The basic processing element of a Q’tron NN is called
a Q’tron, a shorthand of a quantum neuron. The number of
output-level of each Q’tron can be greater than two. Specif-
ically, let µi represent the ith Q’tron in a Q’tron NN, where
the output of µi, denoted as Qi, takes up its value in a finite
integer set {0, 1, ..., qi− 1} with qi (≥ 2) being the number
of output-level. In addition, Qi is also weighted by a spe-
cific positive value ai called active weight, which stands for
the unit excitation strength of that Q’tron. The term aiQi is
thus referred to as the active value of µi, which represents
the total excitation strength of that Q’tron. In a Q’tron NN,
for a pair of connected Q’trons µi and µj , there is only one
connection strength, i.e. Tij = Tji. In Q’tron NN model,
3 If the maximal magnitude of random noise injected into a Q’tron is
bounded, the the Q’tron has a bounded noise spectrum.
each Q’tron in the NN is allowed to be noise-injected. Thus,
noise-injected stimulus Hˆi for the Q’tron µi is defined as:
Hˆi = Hi +Ni =
n∑
j=1
Tij(ajQj) + Ii +Ni, (1)
where Hi denotes the noise-free net stimulus of µi,
which apparently is equal to the sum of internal stimuli,
namely,
∑n
j=1 Tij(ajQj), and external stimulus Ii. The
term Ni denotes the piece of random noise fed into µi, and
n denotes the number of Q’trons in the NN. The schematic
diagram for a Q’tron is shown in Figure 1(a). In case that
P (Ni = 0) = 1, i = 1, . . . , n, the Q’tron NN is said to run
in simple mode; otherwise, it is said to run in full mode.
At each time step only one Q’tron is selected for level
transition subject to the following rule:
Qi(t+ 1) = Qi(t) + ∆Qi(t), (2)
with
∆Qi(t) =
 +1 Hˆi(t) >
1
2
|Tiiai| and Qi(t) < qi − 1;
−1 Hˆi(t) < − 12 |Tiiai| and Qi(t) > 0;
0 otherwise,
(3)
where assuming that the ith Q’tron is selected at time t+1.
Apparently, if we let each Q’tron, say µi have qi = 2, ai =
1 and Tii = 0, and let the NN run in simple mode, then the
Q’tron NN model is reduced to the original Hopfield model
(Hopfield and Tank 1985).
2.1. System Energy — Stability
The system energy E embedded in a Q’tron NN, called
Liapunov energy, is defined as
E = −1
2
n∑
i=1
n∑
j=1
(aiQi)Tij(ajQj)−
n∑
i=1
Ii(aiQi) +K; (4)
where n is total number of Q’trons in the NN, andK can be
any suitable constant. It was shown that, to run a Q’tron NN
in simple mode, the energy E defined above will monoton-
ically decrease with time (Yue 1992). Therefore, if a prob-
lem can be mapped into one which minimizes the function E
given in the above form, then the corresponding NN will au-
tonomously solve the problem after E reaches a global/local
minimum. This reveals that a Q’tron NN performs associa-
tion, in fact, by ‘releasing’ its internal energy.
2.2. Known-Energy Systems
A Q’tron NN is called a known-energy system if it can,
in probability one sense, settle down onto a state whose en-
ergy lying range is known a priori. For example, if a Q’tron
NN settles down on a state, say, s, then it is true that
0 ≤ E(s) ≤ 1
2
(
∆
2
)2
, (5)
output levels for each Q’tron can be determined immedi-
ately from Eq. (12). That is, letQj represent the output level
of the jth Q’tron. Using Qj as the representative of xj , then
we need Qj ∈ {0, . . . , vi}, i.e., qj = vj + 1. Now, con-
sider the following energy function
Eunknown = Ecost + λEconstraints (13)
with
Ecost =
n∑
j=1
cjQj , (14)
Econstraints = 1
2
m∑
i=1
n∑
j=1
(bijQj − di)2, (15)
where λÀ 0. It can be easily seen that finding the optimal
solution of the integer program is equivalent to minimiz-
ing Eunknown. However, the minimal value of Eunknown, in
general, is unknown in advance unless the solution space
has been exhausted. The so-built Q’tron NNs are unknown-
energy systems because we are not sure whether the energy
of a stable state where the NN settles is the lowest or low
enough.
3.3. Goal-Directed Energy Function
Now, let’s provide a target cost. Let it be G. Then, the
goal-directed version of energy function becomes
Eknown = Ediff + λEconstraints (16)
with
Ediff = 1
2
(
n∑
j=1
cjQj −G
)2
. (17)
The minimization of Eknown now, in fact, serves to re-
duce the violation between the solution cost and the tar-
get cost. Clearly, Eknown = 0 if and only if the given goal
is reached. The energy function defined in this fashion is
called in an integer-programming type in (Yue 1992). Com-
paring Eq (17) with Eq (15), one can see that the resulting
solution cost now becomes another constraint.
To tolerate a certain amount of goal violation, the solu-
tions which satisfy the criterion
−∆
2
≤
n∑
j=1
cjQj −G ≤ ∆
2
(18)
now are considered feasible. Then, the energy range cor-
responding to feasible solutions can then be known exactly.
That is
0 ≤ Eknown ≤ 1
2
(
∆
2
)2
(19)
provided λ in Eq. (16) is positive, and its value is set suf-
ficiently large. Because the value of ∆2 is correlated with
solution quality to solve problems, it is then called a solu-
tion qualifier. (Yue 1992, Yue and Chiang 2002) described
the general method to build Q’tron NNs for combinatorial
optimization using integer-programming-type energy func-
tions. There, the method to incorporate with a solution re-
fining scheme to obtain the true optimum for the problems
was also sketched.
3.4. The Q’tron NN Construction
For pure constraint satisfaction, i.e., it is not the goal-
directed version of optimization problems, the energy func-
tion to solve the problems will be
ECSP = Econstraints = 1
2
m∑
i=1
n∑
j=1
(bijQj − di)2. (20)
Accordingly, the Q’tron NN parameters can be determined
as follows:
1. qj = vj + 1 if xi ∈ {0, . . . , vj}, j = 1, . . . , n.
2. aj = 1 for j = 1, . . . , n.
3. Tij , 1 ≤ i, j ≤ n: obtained by mapping Eq. (20) to
Eq. (4).
4. Ij , 1 ≤ j ≤ n: obtained by mapping Eq. (20) to
Eq. (4).
5. N+j = 12 |Tjj | = −N−j , 1 ≤ j ≤ n: We here have as-
sumed that ∆2 = 0. If
∆
2 6= 0, their values must be de-
termined using Eq. (8).
3.5. The Q’tron NN Operations
The Q’tron NN constructed above usually runs in full
mode. To obtain an arbitrary feasible solution, the output
levels of all Q’trons are randomly initialized, and all are
free. The NN, as a result, will settle down on a feasible state
with probability one provided such a state does exist. The
detail proof can be found in (Yue and Chiang 2002).
We now describe how the Q’tron NN can be operated
in a question-answering manner. Suppose that the NN is
in a stable state, and we now want to find a solution with
x1 = u1, . . . , xm = um,m < n, which is different from
the current one. To that, one can clamp the firstmQ’trons to
output-levels u1, . . . , um, correspondingly, and let all other
Q’trons free. Such an operation usually will pull the NN up
to a extremely high energy state. Therefore, the free Q’trons
will become unstable immediately. Furthermore, due to per-
sistently existent noises, the NN finally is able to settle
down to a desirably feasible state with probability one pro-
vided such a state does exist.
E| = 1
2
N∑
j=1
(
N∑
i=1
Qij − 1
)2
(30)
E\ = 1
2
N∑
i=1
N∑
j=1
N∑
k=1
N∑
l=1
QijQkl (31)
k − i = l − j
ij 6= kl
E/ = 1
2
N∑
i=1
N∑
j=1
N∑
k=1
N∑
l=1
QijQkl (32)
k − i = j − l
ij 6= kl
where Qij ∈ {0, 1} for all i, j ∈ {1, . . . , N}. It can be eas-
ily seen that the minima of the above energy sub-terms are
all zero, and a feasible state is reached if and only if all these
sub-terms are zero. Total energy function to solve the prob-
lem is then defined as:
En-queen = E− + E| + E\ + E/. (33)
It is clear that E possesses the known-energy property.
Based on Eq. (33), the parameters of the Q’tron NN can
be determined using the method described in Section 3.4.
This Q’tron NN will be denoted as Q2(N).
4.3. Discussions
In the above, we have constructed two Q’tron NNs Q1
and Q2 to solve the same problem. Both of them possess
known-energy property, and, hence, both are local-minima
free. Our empirical studies revealed that the one without
hidden Q’trons usually will be computationally more effec-
tive, (Yue and Chiang 2001, Yue and Chiang 2004). How-
ever, not all problems can be solved in known-energy sense
without hidden Q’trons being added. Typical examples were
given in (Yue and Chiang 2001, Yue and Lee 2002). From
Section 4.1, one then see that reformulating the given prob-
lem as an integer program is a good guideline for finding
the needed hidden Q’trons.
5. Experiments
Figure 4 shows two common stable states for Q1(8) and
Q2(8) running in simple mode, i.e., noise free. As a mat-
ter of fact, running in this mode is hardly to obtain a fea-
sible solution especially when N is large. In the following,
we demonstrate the experimental results for runningQ1 and
Q2 in full mode.
Some advance experiments revealed that the convergent
speed is most effective, both for Q1 and Q2, by choosing
NRS = 1 : N : 1. Therefore, NRS = 1 : N : 1 was
chosen in the following experiments. Figure 5(a) is a re-
sult for Q2(50) obtained by randomly initializing the NN
and letting all Q’trons free, and Figure 5(b) is obtained in a
question-answering fashion. Both of these results were ob-
tained within one minute in a Pentium IV machine.
(a) (b)
Figure 4. The infeasible local-minima for
Q1(8) and Q2(8).
(a) (b)
Figure 5. The results of Q2(50) obtained by
(a) letting all Q’trons free; (b) running the
NN in question-answering mode; the circled
Q’trons are clamped to level 1, and all other
Q’trons are free.
Figure 6(a) and (b) show the average convergent speeds
for Q1 and Q2 with respect to different N ’s, respectively.
For Q1, the time needed for convergence seems to expo-
nentially grow with respect to N . For Q2, it seems linear.
This is consistent with our empirical studies described pre-
viously.
6. Conclusions
This paper proposes the methods to solve the constraint
satisfaction problems (CSPs) using the Q’tron NN model.
To achieve local-minima free, the NNs to solve the prob-
lems must be endowed with known-energy property. This
property allows us to determine the bounded noise spectra
for Q’trons systematically. Injecting noise into Q’trons per-
sistently based on the spectra renders the NN will never re-
port a infeasible solution, and, hence, the NN can serve as
a question-answering machine. To highlight the idea, two
methods to built known-energy systems to solve N -queen
problem were described. One is based on integer program-
ming, and the other is by considering the problem nature
Sudoku Solver by Q’tron Neural Networks
Tai-Wen Yue and Zou-Chung Lee
Dept. of Computer Science and Engineering, Tatung University
Taipei, Taiwan, R. O. C.
twyu@mail.cse.ttu.edu.tw and zzlee.tw@msa.hinet.net
Abstract. This paper presents a Sudoku solver based on the energy-
driven neural-network (NN) model, called the Q’tron NN model. The
rules to solve Sudoku are formulated as an energy function in the same
form as a Q’tron NN’s. The Q’tron NN for Sudoku can then be built
simply by mapping. Equipping the NN with the proposed noise-injection
mechanism, the Sudoku NN is ensured local-minima free. Besides solving
Sudoku puzzles, the NN can also be used to generate Sudoku puzzles.
1 Introduction
Sudoku, also known as Number Place, is a logic-based placement puzzle. The puzzle is
most frequently a 9 × 9 grid made up of 3 × 3 subgrids (called “regions”). To resolve
a Sudoku puzzle successfully, each cell finally will contain a number from 1 through
91 subject to the constraints described below. Initially, some cells already contain
numbers, known as “givens”. The goal is to fill in the empty cells, one number in each,
so that each column, row, and region contains the numbers 1 through 9 exactly once.
Figure 1 gives an instance of Sudoku puzzle.
The Sudoku was published anonymously by Garns (1979), who created the puzzle at
age 74, and then promptly relegated to obscurity. It became popular in Japan starting
somewhere between 1984 and 1986 under the name “nanpure,” or Number Place. (Even
today, in many Japanese publication, the puzzle is called Number Place, written in
English.) The puzzle received a large amount of attention in the United States and
Europe in 2005 after a regular Sudoku puzzle began appearing in the London Times.
Sadly, Garns died in 1989 before getting a chance to see his creation as a worldwide
phenomenon [10].
The general problem of solving Sudoku puzzles on n2 × n2 boards of n× n blocks
is known to be NP-complete [11]. This gives some indication of why Sudoku is difficult
to solve, although on boards of finite size the problem is finite and can be solved by
a deterministic finite automaton that knows the entire game tree. The popularity of
Sudoku stimulated many Sudoku solvers to be born [17, 18]. Most of Sudoku solvers
were developed using ‘algorithmic’ approaches. For examples, it can be solved graph
theoretically by translating the problem into a graphic search problem [4, 19, 20], or
solved logically by reducing the problem into SAT [9]. Besides, building a Sudoku
puzzle is another challenge. A proper Sudoku puzzle should contain a unique solution.
Ironically, we found no neural network (NN) in this wonderland. Does solving Su-
doku go beyond the capability of neural networks? The answer would be true if an
1 Each cell can also be filled with one from nine different symbols, e.g., a through i.
Q’tron in a Q’tron NN. The output-level of µi, denoted as Qi ∈ {0, 1, ..., qi − 1} with
qi (≥ 2). The actual output of µi, called active value, is aiQi, where ai > 0 is the
unit excitation strength, called active weight. In a Q’tron NN, for a pair of connected
Q’trons µi and µj , there is only one connection strength, i.e. Tij = Tji, and Tii < 0
usually. The noise-injected stimulus Hˆi for the Q’tron µi is defined as:
Hˆi = Hi +Ni =
n∑
j=1
Tij(ajQj) + Ii +Ni, (1)
where Hi denotes the noise-free net stimulus of µi, which apparently is equal to the
sum of internal stimuli, namely,
∑n
j=1
Tij(ajQj), and external stimulus Ii. The term
Ni denotes the piece of random noise fed into µi, and n denotes the number of Q’trons
in the NN. In case that P (Ni = 0) = 1, i = 1, . . . , n, the Q’tron NN is said to run in
simple mode; otherwise, it is said to run in full mode.
At each time step only one Q’tron is selected for level transition subject to the
following rule:
Qi(t+ 1) = Qi(t) +∆Qi(t), (2)
with
∆Qi(t) =
+1 Hˆi(t) >
1
2
|Tiiai| and Qi(t) < qi − 1;
−1 Hˆi(t) < − 12 |Tiiai| and Qi(t) > 0;
0 otherwise
(3)
The Application Model
To make a Q’tron NN versatilely accessible, each Q’tron can either be operated in
clamp mode, i.e., its output-level is clamped fixed at a particular level, or in free mode,
i.e., its output-level is allowed to be updated according to the level transition rule
specified in Eq. (2). Furthermore, the Q’trons in an NN are categorized into two types:
interface Q’trons and hidden Q’trons, see Figure 2(b). The former provides an interface
for user’s interaction, whereas the latter is functionally necessary to make the NN
to a known-energy one3. We will assume that hidden Q’trons are always free unless
otherwise specified. Interface Q’trons operated in clamp-mode are used to feed the
available or affirmative information (a question) into the NN. The other free-mode
interface Q’trons, on the other hand, are used to perform association to retrieve the
missing or uncertain information (an answer).
System Energy — Stability
The system energy E embedded in a Q’tron NN, called Liapunov energy, is defined by
the following form:
E = −1
2
n∑
i=1
n∑
j=1
(aiQi)Tij(ajQj)−
n∑
i=1
Ii(aiQi) +K; (4)
where n is the total number of Q’trons in the NN, and K can be any suitable constant.
It was shown that, to run a Q’tron NN in simple mode, the energy E defined above will
3 The Sudoku solver does not need any hidden Q’tron. An example that needs hidden
Q’trons can be found in [16]
3 The Sudoku Solver
In this section, we describe how to build a Q’tron Sudoku solver based on the known-
energy concept. Let’s start with the puzzle representation.
Puzzle Representation
We will use a 9 × 9 × 9 Q’tron cube to represent the Sodudo puzzle, and use µijk to
denote its ijkth Q’tron, where i, j, k ∈ {1, . . . , 9}. Let Qijk ∈ {0, 1} (hence, qijk = 2)
represent the output of µijk, and let Qijk = 1 (=0) represent that the cell in the i
th
row and the jth column of the puzzle is (not) filled with the kth symbol. Since this is a
pure constraint satisfaction problem, we don’t associate with each Q’tron with a cost.
Hence, let aijk = 1 for all i, j, k ∈ {1, . . . , 9}.
Sudoku as an Integer Program
Based on the Q’tron representation defined above, the Sudoku rules can be described
as the following integer program:
9∑
j=1
Qijk = 1, for all i, k ∈ {1, . . . 9} (7)
9∑
i=1
Qijk = 1, for all j, k ∈ {1, . . . 9} (8)
3∑
i=1
3∑
j=1
Q3m+i,3n+j,k = 1, for all m,n ∈ {0, 1, 2} and k ∈ {1, . . . 9} (9)
9∑
k=1
Qijk = 1 for all i, j ∈ {1, . . . 9} (10)
where Eq. (7) to (9) require that each of the nine symbols must appear in each row,
each column and each 3 × 3 subregion of the puzzle exactly once, respectively, and
Eq. (10) requires that each cell must be filled with exactly one symbol.
Energy Function
By above, the Sudoku solver can then be one that minimizes the following energy
function:
ESudoku = Erow + Ecol + Ergn + Esym (11)
Erow = 1
2
9∑
i=1
9∑
k=1
(
9∑
j=1
Qijk − 1
)2
(12)
Ecol = 1
2
9∑
j=1
9∑
k=1
(
9∑
i=1
Qijk − 1
)2
(13)
Sudoku Solver as an Associative Memory
Suppose that the Sodudo solver is now in an arbitrary stable state. Now, consider a
simple recall case. Suppose that we now want to recall a valid configuration of Sodudo
puzzle with a single cell being set to a particular symbol, e.g., we need the cell in
the ith row and the jth column to contain the kth symbol. A lazy method is to just
clamp µijk to level one, and set all other Q’trons free. Due to persistent noise, such an
action will pump the system energy to very high and, hence, will render the system to
become unstable immediately unless that the ijth cell already has the kth symbol in
it. Consequently, Sodudo solver will settle down (with probability one) if and only if a
successful recall has been done (refer to [14] for rigorous proof).
Although the lazy method is workable, its convergent behavior will be also lazy. A
more effective method, called the diligent method, is to clamp all available information
relative to that clamped cell to the solver. For example, we can set Q’trons µ·jk’s,
µi·k’s and µij·’s, where · ∈ {1, . . . , 9}, and µi′j′k’s such that (i′ − 1)/3 = (i− 1)/3 and
(j′− 1)/3 = (j− 1)/3, to clamp mode. Among them, only µijk is clamped to level one,
and the others are clamped to level zero. And, all the other Q’trons are set free. In the
following, the diligent method will be used to feed cells’ information into the Sudoku
solver.
Puzzle Resolution
Sudoku puzzle resolution is a straightforward implication of the above discussion. Given
a Sudoku puzzle, we can solve it by clamping all of the given symbols diligently as was
described in the last subsection. The solver will then respond with a legal solution
when it settles down provided that the given puzzle is not unsolvable.
Puzzle Generation
There are 6, 670, 903, 752, 021, 072, 936, 960 valid Sudoku configurations for the stan-
dard 9 × 9 grid [21]. Any valid Sudoku configuration can become a proper Sudoku
puzzle, i.e., its solution is unique, by masking some of its cells blank conscientiously.
First of all, we can generate a valid Sudoku configuration by freeing all Q’trons of the
Sudoku solver, initializing its state arbitrarily and, then, running it in full mode. A
valid Sudoku configuration will then be resulted when the solver settles down. Without
losing the randomness nature, one can also arbitrarily select a row, a column or a 3×3
region and clamp the nine Q’trons in it diligently with nine different symbols for speed
up, as shown in Figure 3.
After a valid Sudoku configuration is generated, any Sudoku construction algorithm
that ensures properness of the puzzle [21] can then be applied to determine the cells of
‘givens’ and, hence, the blanks. This final task can also be done by interacting with our
Q’tron Sudoku solver iteratively. Specifically, we can determine whether a given Sudoku
puzzle is proper by running the Sudoku solver under different initial conditions on free
Q’trons multiple times, e.g., 10 times. If all of the tests get the same solution, then
the given puzzle has high probability to be proper. There are two possible approaches
based on the above such a properness test. One is in forward sense, while the other is
in backward sense. The former starts from a small number of blank cells, which are
randomly selected, and then marks more cells as blanks iteratively until it fails in the
properness test. Contrarily, the later starts from a larger number of blank cells, and
then changes some of them as givens iteratively until it passes the properness test.
