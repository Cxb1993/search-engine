行政院國家科學委員會專題研究計畫成果報告 
以 3D 模型形體為基礎的非擬真筆觸成像系統 
計畫編號：NSC-94-2213-E-260-021 
執行期限：94 年 8 月 1 日至 95 年 7 月 31 日 
主持人：陳履恆   國立暨南大學資訊工程學系 
計畫參與人員：藺心皓 國立暨南大學資訊工程研究所 
 
 
計畫中文摘要 
 
非擬真筆觸成像技術 (NPR)在電腦圖學的
領域中由來已久，相較於正常的電腦圖
學—追求精確且正確的成像，NPR 著重於
強調生成影像其本身的風格特性，採用誇
張的手法來呈現目標本身的特性，進而呈
現出各種風格的影像生成結果。在本篇論
文中，我們提出一種新的 NPR 影像生成
法，藉由抽取三維模型自身的特性如輪廓
以及骨架結構等，生成以此為參照基礎所
產生的連續筆觸影像，以及動畫。藉由我
們所提出的方法，我們可以利用讀入的三
維場景以及動畫資訊，生成模擬出具有強
烈畫風特性如梵谷、高更等獨特性質的繪
畫影像。同時，實驗結果也證實我們可以
利用連續的影像，生成出連貫的繪畫風格
動畫影片。 
 
 
 
Abstract 
 
Non-photorealistic rendering (NPR) has been an 
important topic in the research field of Computer 
Graphics. Instead of pursuing the photo-realism of 
images, researchers of NPR focus on the 
representation of painting style, such as the 
exaggeration expression over the subjects and the 
visual effects of brush strokes. 
In this paper, we propose a new model-based NPR 
method to simulate and synthesize continuous brush 
strokes by utilizing the auxiliary bone structure of 
models and other necessary information which is 
extracted from the shapes of three-dimensional models. 
Furthermore, painting techniques of artists are 
considered and simulated in our system. By applying 
our methods, images of scenery, that consists both of 
moving and still objects, with the painting styles of 
great impressionists, C’ezanne and Van Gogh, are 
synthesized. The experiment results show that our 
method successfully generates interesting NPR 
animation with continuous brush strokes. 
 
1. Introduction 
 
Non-photorealistic rendering (NPR) has been an 
important topic in the research field of Computer 
Graphics. Instead of pursuing the photo-realism of 
images, researchers of NPR focus on the representation 
of painting style. Painting style consists of many 
different elements, such as brush strokes, coloring, 
texture, composition, subjectivity, intention, 
exaggerating expression (, i.e. freedom from rigid 
formalism), and so on. Among these elements, brush 
strokes and coloring are the most specific, personal 
and identifiable characteristics for computer graphics. 
Therefore, simulation and synthesis methods for brush 
strokes and coloring are one of the mainstreams of 
NPR research. 
According to the types of input resources, 
approaches of NPR can be roughly divided into two 
categories, image-based NPR and model-based NPR. 
Image-based NPR processes two-dimensional images 
directly by using image-processing techniques mainly. 
On the other hand, the input data of model-based NPR 
is three-dimensional models of objects and scenes. 
Based on the principles of computer graphics including 
3D-translation, curvature of model, lighting and 
shading, the later synthesizes images with NPR effects.  
Though there are many methods developed for 
brush stroke generation, no matter whether it belongs 
to 2D or 3D approach, most of these conventional 
methods failed to represent art-based directions of 
brush strokes. 
In this paper, by utilizing the information that is 
extracted from the shapes, we propose a model-based 
NPR system to simulate several types of brush strokes 
on a modified z-buffer. The rest of this paper is 
organized as follows. 
In section 2, we briefly introduce the related 
research work about non-photorealistic rendering. In 
section 3, we introduce our system architecture 
including the core of our system, modified z-buffer. 
Lighting and shading are described in section 4. 
Methods for generating different types of vector fields, 
such as 2D projection-oriented and 3D model-oriented 
vector fields are explained in section 5. In section 6, 
generation and behaviors’ simulation of brushstrokes 
As shown in figure 2, our system consists of five 
parts: X-File loader, Modified Z-Buffer, shading and 
vector calculator. Original 3D model data and pre-
defined scene parameters are loaded into system via X-
file loader. X-file loader reclassifies model data, and 
then constructs the linkage between triangle and pixel 
structure. 
After loading, at the rest parts of system, the flat-
shading colors in the scene are calculated, and all kinds 
of stroke vector are created by applying different 
methods. Then, color and vector field are combined by 
line integral convolution (LIC) method. 
In following sections, we first describe the X-file 
loader and the core of system: modified z-buffer. 
 
3.2 X-file Loader 
In our system, in order to control the bone structure 
and animation frame parameters, we adopt Direct3D 
X-file as our input format of 3D models. 
By adopting X-format, we can acquire more 
information, such as the hierarchical relationships of 
object, in comparison with the object-based format. 
Each object contain its own mesh name, vertex list, 
index list, normal, texture UV and bone matrix, etc. 
Besides, we can export X-file format from several 
popular model constructing software like MAYA and 
3Ds-MAX. With this advantage, creating animation 
will be easier. 
Due to the non-unique characteristic of vertex, if we 
use these vertices list without any adapting, it will 
consume the resource and slow down the performance 
of entire system. To avoid this problem and rearrange 
these input data, we implement a data adapter in the 
pre-processing part of the system, to adapt these input 
data to our own data structure and reduce those 
redundant vertices. 
After adapting, we divide our data into three main 
groups: 
1. Mesh group, which is designed to store parameter 
like name and material of each mesh;  
2. Triangle list group, includeing all triangles in the 
scene. This part is arranged for the insertion of vertex 
shader.  
3. Bone group, which stores the matrix and the 
hierarchical relationship of bone. 
 
Figure 3: X-file loader and Adapter. 
3.3 Modified Z Buffer 
 
We customize the format of z-buffer as mentioned 
above. This modified z-buffer is the core of our system, 
because all computation and layer blending are 
performed upon it 
 
Figure 4: modified Z-buffer. 
As shown in figure four, the modified Z-buffer 
consists of expanded pixel units, each pixel unit 
contains the pixel depth value, and other information 
like intensity, color, link pointer to TRIANGLE 
structure list, and one array including several vector 
fields using to generate stroke. Another important 
structure, TRIANGLE, contains the indices 
information after adapting. Through these indices, any 
pixel unit linked to this triangle can access its vertex 
data both of 3D model and 2D shape. This linkage is 
necessary to perform the vector calculation. 
 
4. Creating Color Palette: Light and 
Shadow. 
 
Now we have the basic object data and other 
necessary information. The next step is to synthesize 
the NPR image. 
In this section, we first discuss some methods that 
are used in impressionism painting, and then we 
describe how to implement our shading model. 
 
We will describe this in following figures: 
 
Figure 5: (a): two similar vector take average value, 
the length won’t decrease much; (b): two vector that 
have big angle, length decrease. (c): multiple line cross 
point, length decrease much more. 
As shown in figure 5, if all points vector in filter 
are similar, the length won’t decrease much. On the 
other hand, if these point vectors are disordered, they 
will cause the calculated length decrease severely. In 
figure 5, type (a) is usually an outline point; type (b) is 
most like the vertex of outline; and type (c) is the cross 
point of multi outline 
 
After we collected all the HWP in the buffer, we 
begin to assign the weighting values to each outline 
point. As shown in figure6, each outline point will 
only be effect by the most close HWP and the cross 
angle between vector of outline point and vector of 
HWP to outline point. 
 
Figure 6: In the figure, the correspond HWP of outline 
point (P) is (A) , because the length L is smallest, and 
HWP A is in the threshold of angle X. 
 
Once the HWP is selected, we can determine the 
weight of (p) via the length 
 
 
Figure 7: (a)-Original outline result image. (b)-HWP in 
this image. (c)-Result. 
 
5.3 2D shape-based vector 
 
During painting, we use stroke to emphasize the 
characteristic of shape. Usually, this type of stroke 
appears when the curvature of surface is relatively un-
smooth. 
Generally speaking, this type of vector stroke is 
always parallel with the most closed outline. As shown 
as figure8. 
 
Figure 8: 2D shape based vector. 
In order to simulate this property, first, we collect 
all outline points of image, and group them according 
to the original object group, to accelerate the search 
speed. Grouping is an important step, because this 
A bone structure is hierarchical. For example, if we 
have a hand object, then palm is root, and thumb and 
other fingers are children, as shown as figure12. 
 
Figure 12: hierarchical sample. (Software: 3DS-MAX) 
Each bone has the influence range, to control part of 
vertices on the object. With this information, we know 
relation between bone and triangle. Therefore, we 
calculate the corresponding 3d model-based vector via 
calculating dot product of vector of bone and normal 
of triangle. The calculating of 3d-model based vector 
is shown as follows. 
 
Figure 13: Flow of generating 3d-model based vector. 
 
Once bone information is loaded, we can animate 
our object easily. This is essentially for animation. 
 
Figure 14: hand model, (a)-result. (b)-After moving 
one finger. 
 
 
6. Stroke blending 
 
Now we have all necessary vector fields. In this 
section, we discuss how to generate stroke via these 
vector fields and shading color. 
6.1 Line Integral Convolution (LIC) 
 
We use LIC method to generate our stroke. A 
simple LIC is composed by a noise image and a vector 
field. For each pixel in noise image, LIC trace a fixed 
distance along the direction of vector field. After 
completing trace, it averages all color value on the 
tracing path and assigns this average color to this orbit. 
With the vector field, we can find obvious direction 
property after LIC calculation. Figure15 illustrates the 
main concept of LIC. 
(b)-Deformation: This is the most ambiguous situation. 
For models with the auxiliary skeleton structure, the 
solution to this problem is simple, because all strokes 
are oriented with the direction of skeleton. However, in 
the case of 2D-based mode, it is very difficult to keep 
the continuity of existed stroke. Thus, in the prototype 
system, we make them be painted as close as possible 
between frames. 
(c)- Horizontal viewing. There is no need to change 
the property of strokes, because the stroke is relatively 
unchanged to the object. 
 
7.2 Bone moving, matrix. 
 
Since we use X-file as our object format, we can 
make contact with MAYA, 3DS-MAX indirectly. First 
we setup the scene and animation information in 
MAYA, then loading these into our system, with key 
matrix we controlled; it is easy to make animation. 
 
8. Conclusions and future work 
 
We have proposed a new model-based NPR method 
to simulate and synthesize continuous brush strokes. 
We create a modified z-buffer as a virtual canvas. With 
the flexibility of accessing both 3D-model and 2D-
shape information, we successfully create lots of visual 
effects of brush stroke. 
By integrating with LIC, skeleton technique and 
multi-layer application, vivid and free brush strokes 
are simulated and synthesized in our system.  
The two core parts of our approach for vector 
generation, 3D model-based and 2D shape-based 
stroke synthesizing methods, have their own advantage 
and disadvantage. Therefore, according to the property 
of object, the above two methods have different 
performance. For example, when object has strong 
silhouettes characteristic, it is better for us to apply 
3D-model-based skeleton method to simulate the 
stroke; on the other hand, when the object consists of 
wide and complicated surfaces, the 2D-shape based 
method will be preferred. The purpose of multi-layer 
application is to simulate the overlapping effects of 
painting. It is one of the common painting techniques. 
In order to create the shadow effect, we adopt volume 
shadow method into our system. 
The future works of this research are explained as 
follows. 
1.   Stroke generation of particle system. Particle 
system is a powerful way to create many effects. 
We hope we can deal with this part in near future. 
2.   Representation for more complicated 
illumination effects. We use flat shading as our 
basic illuminating method. For the current version 
of our prototype system, there are lots of effects 
can’t be generated such as transparent phenomena, 
global illumination, etc. For these problems, more 
research effort is necessary. 
3.   Automatic skeleton generation. Today, there are 
many methods reported for automatically or semi-
automatically generating the skeleton of object. In 
the near future, we hope to include this part into 
our system. 
4.   Automatic extraction of stroke parameter. Some 
useful stroke parameters such as width, length are 
fixed. We believe that the material of object can 
provide the clues for finding these attributes.  
 
9. Acknowledgement  
 
This research project is supported by National 
Science Council, Taiwan. NSC-94-2213-E-260-021. 
 
10. Reference 
 
[1] Daeuk Kang, Donghwan Kim, Kyunghyun Yoon, 
"A Study on the Real-Time Toon Rendering for 3D 
Geometry Model," iv, p. 0391,  Fifth International 
Conference on Information Visualisation 
(IV'01),  2001. 
 
[2] Appel, FJ Rohlf and AJ Stein. The haloed line 
effect for hidden line elimination. ACM Computer 
Graphics (Proc. of SIGGRAPH '79), 13(2):151--157, 
August 1979.  
 
[3]. Lake, A., Marshall, C., Harris M., and Blackstein, 
M. Stylized Rendering Techniques for Scalable Real-
Time 3D Animation. In Proceedings of NPAR 2000: 
First international symposium on Non-photorealistic 
animation and rendering, Annecy, France, pp. 13-20, 
June 2000. 
 
[4] P. Haeberli. Paint by numbers: Abstract image 
representation. SIGGRAPH Conf. Proc., pages 573--
580, 1990. 
 
[5] Michael A. Kowalski, Lee Markosian, J. D. 
Northrup, Lubomir D. Bourdev, Ronen Barzel, Loring 
Holden, John F. Hughes:  
Art-based Rendering of Fur, Grass, and Trees. 433-438 
Electronic Edition (ACM DL) BibTeX 
 
[6] Oliver Deussen, Thomas Strothotte. Computer-
Generated Pen-and-Ink Illustration of Trees. 
