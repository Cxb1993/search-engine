reduce simulation time. Similar portions of a program’s execution 
are grouped into phases. Samples classified as the same phase 
exhibit homogeneous behavior. The basic idea of simulation 
sampling is to perform cycle-accurate simulation on one 
representative sample for each phase, and use the result of this 
sample to represent the entire phase. Conventionally, in single-
threaded applications, code signatures have been examined to 
extract information about the phases. Unlike in single-threaded 
applications, in multi-threaded applications, the interactions 
between threads that can affect program behaviors should also be 
taken into consideration. 
 
In this project, we develop a toolset which is called Application 
Annotation and Characterization System (AACS). AACS is a useful 
utility for computer architecture research, since it provides the 
ability for fast program behavior observation and it exploits the 
behavior of shared resource contention and data sharing pattern 
between threads in multi-threaded applications to generate 
simulation points for target applications. 
 
 
 I 
 
一、 中英文摘要: 
中文摘要： 
週期精確的架構模擬(cycle-accurate architectural simulation)在計算機結構的研究裡
扮演了重要的角色，它允許計算機架構研究者在不同的計算機結構中評估程式的行為及
效能表現。然而，週期精確軟體模擬器，其模擬速度相當緩慢，完整模擬一個單執行緒
程式就可能花費數週至數月的時間。隨著多核心處理器的普及化，模擬多核心處理器架
構需同時模擬許多處理器及其周邊架構，其模擬速度更加緩慢，所以改善多核心系統模
擬器的效能變得極為重要。 
過去的研究中已知程式裡存在重複出現的程式行為，這些重複出現的行為能被利用
來減少程式模擬的時間。模擬取樣(simulation sampling)是一種利用程式中重複行為來減
少程式模擬時間的技術，它把程式中相似行為的區間聚集成一個稱為相位(phase)的集
合，模擬取樣的基本概念是只週期精確地模擬程式中每一個相位裡具有代表性的區間，
以此來減少程式模擬的時間，這些具有代表性的區間稱為程式的特徵點(simulation 
point)。傳統上在單一執行緒的程式中，程式碼簽章(code signature)被利用來偵測程式的
相位，然而對於平行程式，程式的行為並不只受執行的指令影響，執行緒間的互動也會
影響程式的效能行為表現。 
在本計畫中，我們深入了解模擬取樣的技術，並基於此技術開發了一個實用的工
具，AACS (Application Annotation and Characterization System)。AACS 提供快速程式行
為觀察的功能，它能幫助使用者了解程式在多核心架構下之行為，而且它也能自動紀錄
執行緒間共享資源競爭情形及資料共享情形來進行多執行緒程式的相位偵測，並產生出
使用者選定之目標程式的特徵點，此特徵點能被利用來加速多執行緒程式在多核心處理
器系統之模擬。 
 
中文關鍵字 － 多核心模擬、模擬取樣、相位偵測、特徵點 
 III 
 
目錄 
一、  中英文摘要: ................................................................................................................................. I 
二、  報告內容： ................................................................................................................................... 1 
1.  Introduction .................................................................................................................................. 1 
2.  First Year: Application Annotation and Workload Characterization .................................... 1 
2.1 Monitoring Subsystem (MS) ................................................................................................... 2 
2.2 MS Subsystem User Interface ................................................................................................. 3 
2.3 Workload Characterization ...................................................................................................... 5 
3.  Second Year: Profile-driven Simulation Sampling ................................................................... 7 
3.1 Related Work ........................................................................................................................... 8 
3.2 Communication Count Vector ............................................................................................... 10 
3.3 Memory Footprint Vector ...................................................................................................... 11 
3.4 Experiment ............................................................................................................................. 12 
3.5 Characterization Subsystem (CS) .......................................................................................... 15 
3.6 CS Subsystem User Interface ................................................................................................ 16 
4.  Conclusion .................................................................................................................................. 18 
參考文獻： ................................................................................................................................................. 19 
計畫成果自評： ......................................................................................................................................... 21 
可供推廣之研發成果資料表 ..................................................................................................................... 22 
附錄 ............................................................................................................................................................. 23 
 
 MS 的功能及程式行為觀察結果。 
2.1 Monitoring Subsystem (MS)  
本子系統負責執行並監控使用者選擇之待觀測程式，並將結果以繪圖方式顯示，
依功能可分成負責觀察的部份及負責繪圖的部份。 
   觀察部份可分為以下三個模組(Module)： 
(1) 程式執行模組 ( Execution Module )  
主要功能為依據使用者之需求，執行相對應的應用程式並輸入該程式應接收
的輸入資料 (Input Data) ，以及指定程式的平行度等。 
(2) 監看模組 ( Monitoring Module )  
負責呼叫Perfmon來監看被執行的應用程式，依據使用者需求，收集特定硬
體計數器(hardware counter)的資料來紀錄特定事件(e.g., Instruction Retired, Cache 
Access Times, Cache Miss Times, etc )，在固定的週期將計數器的內容讀出並且清
空。 
(3) 解析模組 (Parsing Module )  
解析監看模組產生的結果，計算出使用者欲監看的事件(e.g., IPC, Cache 
Miss Rate )，將其轉換成繪圖模組所接受之格式。   
下圖為 MS 取樣時的整個狀態流程圖:  
 
No  
6.將結果送至繪圖模組 
1.使用者選擇欲觀察之程式
2.使用者選擇欲觀察之行為 
3.使用者輸入取樣頻率  Yes  
5.再觀察新的程式? 4.進行觀察及取樣 
圖 1. MS 取樣狀態流程圖 
2 
 
 
 圖 3.  MS 子系統觀察部份的使用者互動介面 
 
 
圖 4 為 MS 子系統中繪圖部份的使用者介面圖，依照功能的不同分成四個部份，
分別以 A、B、C 跟 D 稱之。A 部份為一個樹狀圖的檔案結構，MS 觀察部份的輸出檔
會在此以樹狀圖呈現，此檔案結構各層為檔名、程式行為、執行緒 id、已儲存完成的
圖檔。B 部份提供三個控制 A 部份樹狀圖的功能，以左開始分別是重新讀取樹狀結構、
存下圖片、刪除已選擇的圖片。C 部份則是將已選擇的圖檔重繪於 MS 中，圖中可以
看到該程式單一執行緒的程式行為。 
4 圖 4.  MS 子系統繪圖部份的使用者互動介面 
 
 
  
 
Xeon Itanium II  
 
 
 
 
 
6 
 
表 1. Xeon Configuration 表 2. Itanium II Configuration
 
 
          2.3.3 Application Analysis 
下圖為程式 equake 在 Xeon 的架構上，以四個執行緒平行執行與以單一執行
緒執行的情況： 
 
 
 
 
 
 
 
 
 
 
 
 
 
我們有以下重要的發現： 
圖 6. equake 單執行緒與四執行緒之程式行為 
Processor  Number E5320 
Clock speed  1.86GHz 
L2 cache 8MB 
FSB speed  1066 MHz 
Instruction set  64 bit 
Processor Number 9140M  
Clock speed  1.6GHz 
L2 cache 256KB 
FSB speed  533 MHz 
Instruction set  64 bit 
equake on Xeon E5320 
 
 
(a) equake 平行成四執行緒執行之程式行為 
 
(b) equake 單一執行緒執行之程式行為     
1. 以四個執行緒同時執行時，由於在資料層級的平行化下，各個執行緒執行
相同的工作量，所以相位的組成及變化都相同。並且因為設置在程式執行
之中的許多同步化點（synchronization point），造成所有執行緒在同時間
發生相位轉換。 
2. 同樣的程式以單一執行緒執行時，相位的組成依然相同，但是因為負責的
工作量相對加重，每個相位持續時間也隨之拉長。 
 8 
 
  3.1 Related Work 
在本節中，我們會仔細介紹針對單執行緒程式(single-threaded applications)以及多
執行緒程式(multi-threaded applications)的特徵驅動模擬取樣機制。 
   3.1.1 針對單執行緒程式的特徵驅動模擬取樣機制 
針對單執行緒程式，在[10]中，Sherwood 等人提出了一個基於程式碼簽章的
取樣機制，並將此機制包裝成軟體，SimPoint，這個機制模擬取樣的過程可以被
整理為以下幾個步驟： 
1. 把程式的執行過程切成許多區間 
一個區間是程式執行時一段連續的時間片段，在這步驟裡，程式的執行
過程會基於相同的指令個數切割而成許多相同大小且沒有互相重疊的區
間。 
2. 記錄程式行為 
在這個步驟中，每個區間會把該區間裡程式的行為以頻率向量(frequency 
vector)的方式記錄下來。在他們的機制中，每個區間都有一個代表它們
的基本區塊向量(Basic Block Vector)。一個基本區塊是程式中一段一進一
出的程式片段，而基本區塊向量是一個一維向量，其中向量裡的每個值
都代表在程式中的基本區塊在該區間被執行的次數。他們利用基本區塊
向量來捕捉每個區間裡程式碼被執行的情形。 
3. 進行相位分類 
一個相位是由相同行為區間所組合而成的集合，SimPoint 使用 k-means
分類演算法依各區間的基本區塊向量來將各區間分類成許多相位。屬於
相同相位的一組區間，其基本區塊向量維度為 n，則該組區間之基本區
塊向量可視為 n 維空間中的一組點。 
4. 選擇要進行週期精確模擬之特徵點 
SimPoint 會在各相位中，選擇該組區間之基本區塊向量在 n 維空間中最
接近中心點，最具有代表性的點來代表這個相位，稱為特徵點。每個特
徵點有相對應的權重，所有特徵點的模擬結果搭配它們的權重便可估計
出整個程式執行結果。 
 程式行為機制。在本計畫中，我們將以 SBBV 方法為我們機制比較的基準。 
    3.2 Communication Count Vector 
在多執行緒程式中，各執行緒接觸到的資料集合相同與否也可能會影響到程式執
行時的行為。如圖 8 所示，這兩個情境中執行緒均執行相同的基本區塊，但是執行緒
間的共享資料量不同，執行緒間共享資料較少的情境其溝通量也較少，而共享資料較
多的情境其溝通量也會比較多，執行緒間不同的溝通量可能會導致不同的程式效能，
則此兩種情境應該分屬兩種不同的相位。所以捕捉多執行緒程式中執行緒間共享資料
情形，並推測執行緒間溝通量的多寡，對於偵測程式相位來說很重要。 
 
 圖 8. 平行程式中資料共享情形 
在本計畫中，我們提出了一個捕捉執行緒間共享資料量及溝通量的技術，
Communication Count Vector (CCV)。CCV 是一個一維的頻率向量，每個 CCV 中的數
值代表了每個區間中各個相對應的核心產生的快取一致訊息 (cache coherence 
message)數量，這種訊息是回應其他核心要存取共享資料而產生的，也稱為監聽回應
(snoop response)，因此可用來幫助捕捉共享資料的情形進而推測執行緒間的溝通量。
藉由 CCV，我們便可利用偵測執行緒間的溝通量來進行程式相位分類，並挑選出各
個相位中最具代表性的區間來當作特徵點。 
圖 9 表示了 CCV 的形成過程，若執行緒 1 想要存取共享資料 A，而執行緒 3 有
這筆資料，則執行緒 3 所在核心便會發出一致訊息來回應這個要求，CCV 便會把這
個訊息在 CCV 中執行緒 3 相對應的位置記錄下來。 
10 
 
 程式的記憶體存取位址。在每個區間中，我們利用取樣 1000 個指令來產生 MFV，對
於每個指令，如果指令內包含有記憶體寫入或讀取的資訊，則我們會將其讀寫的記憶
體位址收集起來，最後便完成了在該區間內記憶體存取位址的記錄。然後我們會將記
憶體存取位址記錄對應回 MFV 中，我們將記憶體位址空間分成 100 個連續的區段，
MFV 中的每個數值就代表每個區段中被存取的次數。我們事先嘗試了將記憶體位址
分成 10、100、1000 個區段的實驗，而實驗結果顯示分成 100 個區段可以產生最好的
結果。 
 圖 10. Memory Footprint Vector (MFV) 
 
    3.4 Experiment 
在本章中，我們藉由實驗來評估我們提出的特徵驅動模擬取樣機制，我們在真實
機器上做實驗。首先，我們先在取樣機器上對目標的多執行緒程式進行程式執行行為
收集，並偵測該程式中的相位，最後產生具代表性的特徵點。然後我們在評估機器上
進行我們機制的效果評估，我們在評估機器上執行目標程式並記錄下各特徵點的程式
效能，接著將每個特徵點的程式執行結果乘上其對應的權重，並將各特徵點乘完的結
果加總，進而估算出整個程式的完整執行結果。我們以比對我們估算的程式執行結果
正的執行結果所產生的錯誤率來評估我們提出的機制。 與真
        3.4.1 實驗設定 
    3.4.1.1 測試程式 
我們選定 SPEC OMP 程式組裡的三隻程式：wupwise、equake、swim，
及PARSEC程式組裡的三隻程式：dedup、x264、ferret來進行測試。SPEC OMP
程式組裡的程式是利用 OpenMP API 所平行的程式，其程式具有資料層級平
行(data-level parallel)的特性，而選定的 PARSEC 程式則是具有任務層級平
12 
 
 向量對於偵測多執行緒程式相位之精確度。圖 11 為利用此三種方法在評估
機器上只考慮在取樣機器上找到的特徵點而推估出來的整體程式效能結果
與實際程式執行結果比對之錯誤率，Y 軸是錯誤率，X 軸是我們選定之目標
程式，其中 wupwise、equake、swim 是選自 SPEC OMP 的程式，而 dedup、
x264、ferret 則是選自 PARSEC 的程式。圖 12 [15]顯示了一些與我們選定的
SPEC OMP 程式共享資料量有關的資訊，可以看到執行緒間有關共享資料
的互動幾乎不存在在 equake、wupwise、swim 中，因此可以看到 equake、
wupwise、swim 程式的 SBBV+CCV 結果並沒有什麼幫助。然後在任務平行
層級的程式 dedup、x264、ferret 中，除了 x264 因為有一半的執行緒沒有什
麼溝通外，dedup 及 ferret 均有明顯的錯誤率下降。由實驗結果可以得知我
們提出的 CCV 結合 SBBV 能夠有效地幫助執行緒間共享資料較多的程式。 
 
 圖 11. CCV 之實驗結果 
 
圖 12. OMP 程式中資料共享情形 [15]  
14 
 
 且要執行記憶體存取指令的記憶體存取位址。 
(3) 解析模組 (Parsing Module )  
解析側錄模組產生的結果，將每個區間取樣到的指令位址對應到基本區
塊產生該區間之SBBV，將每個區間收集到的溝通訊息數量組成該區間之
CCV，以及將每個區間收集之記憶體存取位址對應到MFV的元素中並產生
該區間之MFV，最後將此區間之SBBV、CCV、MFV串接起來成為代表此區
間之頻率向量。  
    (4) 分類模組 (Classifying Module ) 
此模組利用 SimPoint 之 k-means 演算法對各區間之頻率向量進行分
類，並在分類完成後產生選定之特徵點及各特徵點之權重。 
    下圖為 CS 的狀態流程圖: 
 
1.使用者選擇目標程式 
2.Perfmon 及 Pin 工具對目
標程式進行行為記錄 
No   Yes  
5.選擇新的目標程式? 
4. 對各區間之頻率向量執行 k-means
分類演算法，及產生特徵點 
3.將各區間之程式行為轉換
成目標頻率向量並合併 
圖 14. CS 的狀態流程圖 
3.6 CS Subsystem User Interface 
圖 15 為 CS 子系統的使用者互動介面，依照功能的差異分成兩個部份，分別以
A、B 稱之。若使用者是第一次使用 CS 子系統的話，使用者需要在 A 部份選擇 Pin
工具的所在處，B 部份讓使用者能在此選擇目標之多執行緒程式，並依我們提出的相
位偵測方法進行相位偵測及產生特徵點。 
16 
 
 18 
 
 
4. Conclusion 
在本計畫中，我們深入了解了模擬取樣的技術並提出了一個針對多執行緒程式的相位
偵測方法。我們專注在觀察多執行緒程式裡執行緒間的互動，針對共享資料產生的溝通量
及共享快取記憶體資源的競爭，提出了 Communication Count Vector (CCV)及 Memory 
Footprint Vector (MFV)來幫助傳統的相位偵測方法 Sampled Basic Block Vector (SBBV)，實
驗結果顯示我們提出的方法能夠精確的進行程式的相位偵測。另外我們還開發了一個實用
的工具 Application Annotation and Characterization System (AACS)，AACS 讓使用者能夠方
便地進行程式行為觀察及自動產生能被利用來加速模擬的特徵點。使用者能在 AACS 的
MS 子系統中，觀察程式的單一執行緒行為或是同時觀察多個執行緒的行為。使用者能透
過 AACS 的 CS 子系統，對目標程式進行相位偵測並自動產生出該程式之特徵點。 
 20 
 
[14] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace, V. J. Reddi, and K. 
Hazelwood. Pin: building customized program analysis tools with dynamic instrumentation. In 
Proceedings of the 2005 ACM SIGPLAN conference on Programming language design and 
implementation, PLDI ’05, pages 190–200, New York, NY, USA, 2005. ACM. 
[15] V. Aslot, Performance characterization of the SPECOMP benchmarks, 2002 
 22 
 
可供推廣之研發成果資料表 
□ 可申請專利  ■ 可技術移轉                                      日期：100年10月20日 
國科會補助計畫 
計畫名稱：在多核平台上之多核虛擬環境研發— 
子計畫四：以取樣為基礎之多核心模擬架構 
計畫主持人： 楊佳玲 
計畫編號：NSC99-2220-E-002-027 學門領域： 
技術/創作名稱 多核心處理器之共同合成設計 
發明人/創作人 楊佳玲 
技術說明 
中文： 
本計畫中所開發之 AACS 工具為能觀察多核心系統中程式之行為並產生目標程
式特徵點的工具。AACS 有兩個主要子系統：MS 及 CS。MS 利用 Perfmon 工具，
收集程式在多核心平台上執行時的行為並利用 Gnuplot 工具，把觀察到的數據圖
表化，並提供使用者調整觀察結果的功能。CS 則是利用程式在多核環境中執行
時的行為，將程式的執行分類成許多相位，並產生可供模擬加速用的特徵點。
經過測試，本軟體能為使用者提供一個便利的程式行為觀察環境，以及為多核
心架構模擬產生精確的特徵點。 
英文： 
The Application Annotation and Characterization System (AACS) developed in this 
project is a tool for observing program behavior under multi-core systems and 
generating the simulation points of multi-threaded applications. AACS is composed 
of two major components, Monitoring Subsystem (MS) and Characterization
Subsystem (CS). MS adopts Pfmon tool to observe program behavior. CS detects 
program phases based on the interactions between threads and generates simulation 
points of target programs. 
可利用之產業 
及 
可開發之產品 
本計畫所開發之工具軟體，可以加速多核心架構中多執行緒程式的模擬，適用
於幫助多核心中央處理器之設計及開發，可應用於開發各式包含多核心處理單
元的消費性電子，及個人電腦產品。 
技術特點 
能夠針對多核心處理器架構加以觀察、分析，協助多核心中央處理器運算單元
之設計，並利用多執行緒程式特性產生程式之特徵點，幫助程式模擬加速。 
推廣及運用的價值 
多核心架構已成為市場發展的主流，透過此工具在研發初期可幫忙設計高複雜
度之多核系統之主要架構。並能夠順應需求，及早開始進行系統各方面之最佳
化，以利於市場上搶得先機。 
※ 1.每項研發成果請填寫一式二份，一份隨成果報告送繳本會，一份送貴單位研發成果推
廣單位（如技術移轉中心）。 
※ 2.本項研發成果若尚未申請專利，請勿揭露可申請專利之主要內容。 
※ 3.本表若不敷使用，請自行影印使用。 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/29
國科會補助計畫
計畫名稱: 子計畫四:以取樣為基礎之多核心模擬架構(2/2)
計畫主持人: 楊佳玲
計畫編號: 99-2220-E-002-027- 學門領域: 自由軟體暨嵌入式系統
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
本計畫主要目標為開發一套開放原始碼工具，可觀察多核心平台中程式執行行
為，並同時考慮執行程式片段、執行緒間通訊量以及執行緒在共享資源之競爭
情況，產生目標程式的特徵點，用以加速多核心平台的週期精確模擬。透過此
一開放原始碼工具，平台開發者可藉此觀察系統執行狀況，或者透過模擬快速
了解系統瓶頸。此工具亦可協助平行程式設計者了解程式在多核平台上執行之
行為，找出執行緒間通訊及資源共享之瓶頸。透過對多核平台與程式執行狀況
的分析，平台開發者與程式設計者皆可對其設計進行最佳化。因此本工具可加
速台灣軟硬體產業在多核平台及平行程式之開發與最佳化。使台灣軟硬體產業
在多核時代更具競爭力。此外，同時考慮執行緒間通訊量及共享資源競爭情況
之分析亦是平行程式在多核平台上相位偵測的新技術，可使相位偵測與模擬取
樣更為精確，亦可幫助相關學術研究達成多核平台上平行程式之精準快速的模
擬。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
