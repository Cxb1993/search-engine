  
行政院國家科學委員會專題研究計畫成果報告 
計畫編號：NSC 95-2221-E-259-005-MY2 
執行期限：95 年 8 月 1 日至 97 年 7 月 31 日 
主持人：吳秀陽   執行機構及單位名稱 : 國立東華大學資訊工程學系 
 
摘要 
RFID (Radio Frequency IDentification) 無線射頻辨識技術愈來愈成熟，可以應用在各種不同領域。企業在引
進 RFID 技術的過程中，中介軟體能夠管理底層的資料，並提供一個方便的介面，給不同領域的應用軟體使用，
其重要性不言而喻。 
傳統 RFID 中介軟體對於資料管理的支援未臻完善，我們針對 RFID 應用特色，設計方便的查詢語言，並提
出空間時間資料之有效管理方法，透過動態資料處理技術，來持續滿足使用者要求的服務品質。首先，我們設
計一個分散式中介軟體架構，分為企業端與本地端中介軟體兩部分。接著我們提出一個簡潔易使用，類似 SQL 
(Structured Query Language)的 RFID 查詢語言，增加能清楚表達 RFID 資料空間時間特性的語法，讓使用者方便
地查詢資料。在 RFID 資料管理部分我們將資料依地點存在不同的資料表中，使和地點相關的查詢更有效率；
另外加上 ID 和時間索引加快查詢的速度。最後在 RFID 動態資料整合系統上根據資料變動的情形以及使用者服
務品質參數的要求，做動態資料整合(Dynamic Aggregration，簡稱 DA)、查詢處理和服務品質感知(QoS-aware)
資料管理，提供使用者一個即時且滿足個人需求的資料管理系統。 
RFID 資料管理技術和實作上，我們將 RFID 查詢語言改寫成標準 SQL 語言，整合現有的 MySQL 資料庫處
理，利用程式模擬實驗顯示我們的設計能大幅提升RFID空間時間資料查詢效能。對於RFID動態資料整合需求，
我們針對 RFID 資料處理特性，提出服務品質參數概念，讓使用者可以清楚表達服務品質要求。為了在變動快
速的 RFID 資料處理環境，能夠持續滿足使用者的服務品質要求，我們設計了動態整合表示式(DA expression)，
方便表示階層中多個查詢點彼此的關係，以及動態資料整合運算子(DA operators)，可以針對查詢內容做不同粗
細程度(granularity)的調整。最後我們將服務品質參數、查詢語言、動態整合表示式以及動態整合運算子做結合，
提出一個動態調整查詢處理，以滿足使用者服務品質要求的完整方法。為了檢測我們提出的方法是否能有效根
據資料變化作即時調整，以及測試不同的調整選擇方式的效果如何，是否能滿足使用者在服務品質上的要求，
我們開發模擬程式來進行實驗，成功地證明我們所提出的方法，可以較少的時間和花費，找出足以與窮舉法所
挑選之運算子相當的動態整合方式，持續滿足使用者的資料管理和服務品質要求。 
 
關鍵詞：無線射頻辨識技術，查詢語言，查詢處理，空間時間資料管理，服務品質、動態資料整合、中介軟體 
 
Abstract 
With the maturing of RFID hardware and EPC network technologies, RFID boosted ecommerce application 
development is becoming one of the most promising direction for enterprise computing. There is hardly any doubt that 
RFID is about to drive the next wave of change in business applications.  However, the most important pieces are still 
missing. We need flexible and effective RFID middleware, data management and enterprise integration technologies. 
Our goal is exactly to answer the challenges and to develop RFID data management middleware for the truly 
proliferation of RFID technologies.  We investigate into the characteristics of RFID applications. Based on the 
analysis, we propose convenient query language, effective spatiotemporal data management techniques, QoS 
specification mechanisms, and dynamic data aggregation schemes to continuously satisfy user’s demand and the desired 
level of service quality.   
More specifically, we propose a distributed middleware architecture consisting of enterprise and local data 
management components. An SQL-like query language with spatiotemporal constructs is designed for easy 
specification of RFID data management queries.  For efficient query processing, RFID data is stored based on spatio 
partitioning with ID and time indexes.  We further propose QoS specification mechanism for users to describe the 
desired level of service quality.  An innovative technique named dynamic aggregation (DA) is proposed to 
dynamically adjust the granularity of query processing in response to fast changing RFID input data stream for 
continuous maintenance of QoS level. 
  
 
圖 1、典型 RFID 統架構 [1] 
 
RFID 資料管理越來越受到重視。 Chawathe 等人對 RFID 資料管理所面臨的挑戰和可能的解決方向，提出
了非常初步但是可行的方向[1] 。Mark Harrison 則整理了一些 RFID 資料的特性，並提供了一些表示 RFID 資料
的參考資料[5] 。Shaorong Liu, 則是針對 RFID 的時間相關、變動快速特性，提出一個 temporal data model 作為
RFID 資料管理的基礎[9] 。Ying Hu 等人利用現有的 Oracle DBMS，延伸一個 bitmap datatype，處理 RFID 資料
和 EPCs[11] 。利用 bitmap segment 可以共用 ID 的 prefix 節省空間，再把這些 segment 分別透過 bitmap 的演算
法來轉換成真正儲存的形式，再連接起來變成一個 EPC Bitmap datatype。著名的學者 Michael J. Franklin 和他的
UC Berkeley 研究團隊，將類似 RFID 大量資料流入的情形，稱之為 high fan-in systems，並提出了一個叫做 HiFi
的架構進行資料管理[7] 。Fusheng Wang 等人提出 temporal data model 作為 RFID 資料管理的基礎[4] ，查詢資
料的方式，使用標準的 SQL 語言，例如:”找出賣場中所有的養樂多其所在位置”： 
SELECT o.epc, l.name  
FROM  OBJECT as o, OBJECTLOCATION as s, LOCATION as l  
WHERE o.epc = s.epc  
AND  s.location_id = l.location_id  
AND  s.tend = ‘UC’  
AND  o.name = ‘養樂多’ 
由例子發現，一個簡單查詢，需要 object，objectlocation，location 三個資料表做結合，才能得到結果，使
用相當不方便。 
服務品質(Quality of Service)，可以視為一種判斷服務有多少價值的衡量方式。根據[12] 的解釋，服務品質
主要是用於電腦網路與封包交換電通網路環境下，判斷在預期能提供的資源之下所能得到服務多寡的方式，而
近期除了在多媒體串流上有許多關於服務品質處理的研究之外，近幾年來漸漸有人把服務品質與資料流的處理
作結合研究，Tu 等人提出在資料串流資料庫中分散減輕資料庫運作時負荷的方法，並且希望能夠減少資料傳輸
中的延遲時間[13] ；Sharaf 等人則提出根據回覆時間及資料傳輸速率等服務品質參數來去對連續性查詢做排程
(scheduling continuous queries)[14] [15] ，但其主要設計的方式是以滿足整體最佳的平均服務品質狀況為主，所
以沒有辦法根據使用者獨立的需求作改變。其實早在幾年前，Ye 等人便提出一個根據使用者檔案與服務品質參
數的基本分散式查詢處理方式[16] ，如圖 2。但是並未有接續研究提出更詳細的做法。 
所以，根據上述的一些相關研究我們可以知道，在資料串流的處理上也可如同多媒體串流一樣使用服務品
質作為一個控制調整的機制，但是，目前服務品質相關研究尚未針對 RFID 串流資料的應用上作設計，我們希
望透過我們提出的方法可以在這部分的研究有所貢獻。 
  
 
圖 3、RFID 中介軟體架構圖 
 
圖 4、本地端 RFID 中介軟體架構 
讀取器管理部門最重要的任務就是對讀取器管理和協調，還有產生基本事件。經過分析 RFID 的環境，我
們認為基本事件，只有兩種，一種是進入事件，就是標籤進入到讀取器範圍時產生，另一種則是離開事件，標
籤離開讀取器範圍時產生，有了這兩種基本事件，加上運算子，就可以得到許多符合各種需要的複雜事件。 
本地端 RFID 資料管理部門最主要的目的，是將從下層得到的 RFID 資料儲存起來，並提供一個介面讓應用
軟體來使用，所以也要能夠將儲存好的資料，快速的取出。下面分別說明各部分角色與功能。 
  
BETWEEN   B  on  S  
FROM   R1, R2,…, Rm  
WHERE    “time window”   
LOCATION  L  
RETURN   R  
以 SQL 語法為基礎加以擴充，加上 WITHIN、BETWEEN、LOCATION 和 RETURN 關鍵字。結構中除了 SELECT
之外，都是可自由選擇的。單筆 RFID 資料格式為( ID,讀到時間,停留時間,地點)。因大部分查詢都和時間相關，
我們設計 WITHIN 來指定一個時段，表示查詢的範圍限定在這段時段內。LOCATION 用來指定發生的地點。
BETWEEN 則是在 SELECT 之前設定資料的數目，而 RETURN 則是在做完 SELECT 後設定輸出結果的數目。
SELECT 的語法和 SQL 一樣，用來挑選欄位。Query_type 是指定查詢的類型，分為立即性查詢、週期性查詢和
連續性查詢。NOW 為立即性查詢，只會執行一次。EVERY 為週期性查詢，後面接時間分量，指定每隔一段時
間就執行一次。ALWAYAS 為連續性查詢，一經指定後，會一直持續的存在，而且系統一直維持著正確的結果，
當使用者需要時，可以馬上檢視結果，不用重新查詢。 
WITHIN定義了一個 time window，語法為 “WITHIN(t1, t2)”，可以是兩端固定，或是滑動的 sliding window。
前者明確指定兩端時間，只有在這時段內的資料才是查詢範圍，例如 2007-01-01 十點到十一點表為
FIXED(‘2007-01-01 10:00:00’, ‘2007-01-01 11:00:00’)，或是 FIXED(‘2007-01-01 10:00:00’, 1h)。Sliding window 分
成兩種，一端固定一端滑動和兩端都滑動，一端固定一端滑動既然是為了連續性的查詢而滑動，例如表示 2007
年 1 月 1 日到現在五小時前這段時間，SLIDING(‘2007-01-01 10:00:00’, 5h)。兩端點都是滑動的，t1 和 t2 都是
填入時間分量，例如代表兩小時前到一小時前這段時間，SLIDING( 2h, 1h)。即時性是 RFID 的一個重要特色，
我們對於目前的資料最感興趣，若不指定時段，則預設值為 (NOW)。 
WHERE 的用法和 SQL 一樣，也可以使用系統提供的函式。SQL 支援巢狀查詢，我們的設計並沒有抵觸，
巢狀查詢仍然是符合語意，不過本篇論文實作部份還沒有做到支援巢狀查詢。 
查詢語言是以 SQL 為基礎的，因此 SQL 已有的語法也可以指定。較常用的有 GROUP BY 和 ORDER BY，
使用的方式跟 SQL 的語法完全一樣，指定的位置則在 LOCATION Clause 和 RETURN Clause 的中間，GROUP 
BY 在前，ORDER BY 在後。  
 
3.3 空間時間資料管理 
我們提出了時間索引、 ID 索引再配上位置切分的概念，如圖 7 所示。我們將收到的基本事件先放在一個
緩衝區中，再存入資料庫，緩衝區的目的是因為資料不斷流入，無法下查詢。我們利用緩衝區，每隔一個時間
間隔處理基本事件，更新資料表。 
 
圖 7、資料管理示意圖 
RFID 的資料分為兩類來儲存，一類是當本地端 RFID 管理部收到進入事件和離開事件時的資料，另一類是
存放複雜事件的資料。對於基本型事件的資料，我們以地點來區分，相同地點資料存成一個資料表如圖 8，因
為地點是固定的，較為單純，資料表也不會增加太多，而時間相關資料，則另外設計時間索引再配合資料庫中
的索引來讓查詢變得有效率。 
  
料庫查詢。周期性的查詢是每隔指定時間，就重行執行一次查詢，方式如同立即性查詢。連續性查詢必需要一
直維持著最新的結果，使用者在需要時可以直接看到查詢的結果，而不是在使用者需要時才下查詢。 
3.5 服務品質感知動態 RFID 資料整合架構 
在前述基本 RFID 資料處理架構之上，我們另外設計一個對於階層式架構下的 RFID 資料，透過服務品質感
知來做分散式查詢處理，並根據不同時間的資料變化情形，動態的調整查詢對象，以滿足使用者的服務品質需
求，進一步強化本計畫所設計的 RFID 資料管理中介軟體功能。我們的目標有以下幾點： 
z 利用 RFID 資料與階層的組織特性，在資料快速變動環境下，即時處理資料。 
z 將在階層式環境下的 RFID 資料與服務品質評估方式作結合。 
z 讓使用者可以使用服務品質陳述來表達自己的需求。 
z 利用動態資料整合(dynamic aggregation, 簡稱 DA)來持續滿足使用者服務品質的要求。 
組織階層中的 RFID 資料有一個特性：資料是由底層一路往上層傳送與處理，越上層的點包含越多資料，
在查詢資料時，上層的資料無法滿足查詢，便需要將查詢往下延伸如圖 9 所示。此一運作特性可能會因為資料
突然大幅增加或減少的震盪情況，讓傳輸與處理資料的時間與花費不固定，而無法即時得到滿足使用者要求服
務品質條件的查詢結果。我們的研究即是針對這個問題提出方法，讓使用者有效率而持續地得到資料。 
 
圖 9 、階層式 RFID 資料分布與查詢示意圖 
 
我們主要提出要解決問題的概念，就是針對資料變動環境下，當使用者提出自己在服務品質的要求後，我
們會透過動態的資料整合，讓資料整合在不同的組織階層之上，以滿足使用者的要求。舉例而言：當使用者在
2008 年 7 月 20 日~7 月 22 日每天的八點整，希望可以得到在花蓮地區的壽豐與太魯閣兩點的銷售資料，並指定
在服務品質上的條件。如圖 10 所示，當每一天的資料量有所變化時，我們可以依據資料的變化來選擇資料動
態整合的階層，如從 7/21 至 7/22 日時壽豐及太魯閣兩點的資料量大增，於是我們可以利用較上層的花蓮作查詢
的回應的點，以滿足使用者在服務品質上的要求，或是當從 7/22 至 7/23 日壽豐及太魯閣兩點的資料量又變的足
以滿足使用者的服務品質條件時，我們就可以再對低層的壽豐及太魯閣兩點作查詢的處理。藉由動態整合的階
層不同以及對資料做部分的整合，來達到根據使用者服務品質要求，以及資料的即時變化程度，來作分散點的
資料及查詢處理。 
  
 
圖 11、整服務品質感知動態 RFID 資料整合系統架構 
 
3.6 階層式組織架構 
z 位置階層 
RFID 環境中每筆資料都是和位置有關[17] ，位置存在階層關係，許多小地點組成一個區域，許多區域組
成一個更廣的區域，層層往上組合，最後會形成整體的一個大概念。如同一間大型企業中，許多分店組成一個
區域銷售中心，許多銷售中心組成大型區域銷售中心，最後至上層形成大型企業總部。如圖 12。 
 
圖 12、位置階層範例 
 
  
 
圖 15、階層中點的資料示意圖 
z 準確度(Precision)：經過資料處理的資料與未處理結果的比例。 
[單點] 
 i 若為最底層點，從讀取器接收到的資料 ni；若為非最底層的點，其資料量為該點所有子節點的處理
後資料筆數 mi值的加總。該點的資料準確度為：mi/ni 。 
[整體] 
假設我們的查詢中相關的點有 P 個，作完資料整合後回覆查詢的點有 Q 個，且 Q൑P。而做過整合處
理後的每一個點 j，其作完整合處理的資料量為 nj，所以可推得： 
ە
ۖ
۔
ۖ
ۓ 原始查詢資料量 ൌ ෍࢔࢏
ࡼ
୧ୀଵ
做整合動作處理後資料量 ൌ෍࢔࢐
ࡽ
୨ୀଵ
 
其整體資料準確度為：
∑ ࢔࢐
ࡽ
ౠసభ
∑ ࢔࢏
ࡼ
౟సభ
 
z 反應時間(Response Time)：查詢開始至得到查詢結果所花費的時間。 
階層式組織中每一個點在資料處理過程中必需花費在接收、處理及傳送資料。我們假設資料讀取時
間為 r，資料處理時間為 p，資料傳送所時間為 t，單點與整體反應時間計算公式如下。  
 [單點] 
  每個點 i 所需花費的處理時間為：ni *(r+p)+ mi*t 
 [整體] 
要計算查詢完成的時間，需根據查詢針對的對象有哪些來決定，若查詢是對某一層中的多個點，則上
層的點要等待下層的點處理完才能夠繼續處理，而在同一層的點是可以同時處理資料，把每一層所需花費
最多的那一點時間相加，即為查詢花費的時間。假設組織階層有 L 層，將每一階層 j 所要花費最大的時間
相加，便可以得到整體的時間花費，計算公式如下： 
ܴ݁ݏ݌݋݊ݏ݁ ݐ݅݉݁  ൌ෍ max
୧א୪ୣ୴ୣ୪ ୨
ሺ࢔࢏  כ ሺ࢘ ൅ ࢖ሻ ൅࢓࢏ כ ࢚ሻ
ࡸ
୨ୀଵ
 
z 成本(Cost)：下查詢後至得到查詢結果，在接收與處理上的成本。 
屬於不同層的點可能因為硬體設計的不同，在處理與接收資料上的成本不同，假設組織階層有 L 層，
對應各層的點所需成本為 c1～cL，得到單點與整體的成本計算如下： 
[單點] 
在第 j 層的某一點 i，其成本為：cj * ni + cj* mi 
[整體] 
  
舉例而言，如圖 16，假設現在 node 5 有 4 個子節點，node1~4，而假設其各自的服務狀態矩陣為：P1 
= {0,1,0,1}，P2 = {1,1,1,1}，P3 = {0,1,0,0}，P4 = {1,1,0,0}，門檻值為 0.5，而 S5 = {1,0,0,1}，則我們可以知
道 P5’計算如下 
t1  t2 t3 t4 
      P1   0 1    0 1 
      P2 1    1 1 1 
      P3  0    1 0    0 
      P4   1    1 0    0 
      ------------------------------- 
      P5’  1    1 0    1 
 得到 P5’之後，將其與 S5 作交集，得到 P5 = {1,0,0,1}，接著便可根據 P5 得到 node 5 的可靠性
Availability(5) = 2/4 =0.5。 
[整體] 
利用上述對單點的可得性判斷方式，由最底層的點開始計算，一路往上層計算點的可得性，最終得到
整個階層中 root 點可得性的值，最後便以 root 點的可得性的值視為目前這整個系統可以提供資料的能力。 
 可靠性(Reliability)：在系統正常運作前提下，能正確提供資料的程度。 
 [單點] 
對於最底層的點 i 其可靠性為： 
ࡾ࢏  ൌ點 i所讀到的正確資料筆數
點 i所讀到的資料總筆數
 
對於非最底層點 i，若有 k 個子節點，根據子節點可靠性 Ri得到整體子節點可靠性為： 
ࡾࢋ࢒࢏ࢇ࢈࢏࢒࢏࢚࢟ሺܑሻ  ൌ
∑ ࡾ࢏ כ ࢔࢏
௞
୧ୀଵ
∑ ࢔࢏௞୧ୀଵ
 
 根據子節點占整體提供資料的比例多寡作為權重，以該點比例乘上該點可靠性，將所有子節點作此
動作並加總，除以整體的資料量，可以得到整體子節點可靠性。 
對於非最底層的點 i，可靠性根據自己的可靠性 Qi與整體子節點可靠性計算得到： 
Ri = Qi * Reliability(i) 
 將兩者相乘是因為二者同時有可靠資料才視為可靠的，如有任何一個部份可靠度很低，則該點得到
資料的可靠度也會變低，除該點與子節點都是可靠的，這一點的資料我們才會視為可靠。 
 
圖 17 、可靠性計算範例 
  
SELECT   S UNIT 單位名稱 
WITHIN   W 
FROM   RFID 
WHERE   CONDITION 
LOCATION   L 
 
3.10 動態整合表示式(DA Expression) 
我們針對階層組織作分散式查詢，為了處理查詢中地點的部分，可以很快的知道每個點位於階層中哪一個
位置，其父節點為何？有哪幾個子節點？我們設計動態整合表示式(Dynamic Aggregation Expression)來表達組織
階層在查詢中被挑選中的點，在做查詢處理時，可以透過動態整合表示式快速的得到處理時所需的相關資訊。 
我們透過範例來介紹動態整合表示式寫法的表示方法如圖 18。左邊的圖，為一個階層組織，總共 4 層，最
頂端 root 點為 R，背景為深色的點表示我們查詢中想要資料的地方，我們先透過查詢處理把被選的點標示出來，
接著針對被標示的點寫出對應的動態整合表示式，在這個例子中最左邊的圖對應的式子為：[R/(A/*|B|C/(G|H/*))]。
其中”/”符號接著該點的子節點，用以表示一整個子樹的路徑為何，”*”則表示該層的所有點，而”|”則表示或的意
思，而使用()括弧起來的，表示該子樹(sub-tree)有相同的父節點。所以透過上述的動態整合表示式，我們可以得
到其對應的意義是查詢中要查詢的對象有 R 的子節點中：A 點的所有子節點、B 點、C 點中的子節點 G 與 H 的
所有子節點。 
 
圖 18 動態整合表示式範例 
3.11 動態整合運算子(DA Operators) 
針對使用者服務品質的要求與其查詢條件，我們針對 RFID 階層資料上使用的一些特性，歸納並設計了一
組動態整合運算子(Dynamic Aggregation Operator)，希望透過運用這些運算子的動作，來對原始的查詢作改寫，
將原始的查詢作查詢點或是資料量的調整動作，分為以下 7 大類型： 
z Reader turn on/off 
在 RFID 的環境中，資料都是透過 reader 來讀取的，有時候為了增加資料讀取的準確度與正確性，會
使用兩台以上的讀取器來讀取資料，所以 reader turn/off 代表的即是把我們在各個點的讀取器，選擇性的
關掉某一個點的一台 reader 降低資料量，因而降低資料準確度，但能減少資料傳輸的時間與花費，而可對
已被關起來的讀取器重新打開，增加資料量以及其準確度，相對的也增加一些時間與花費。 
z Sampling 
Sampling 這個動作主要目的是希望得到的是資料取樣(sampling)後的結果，因為當資料量很龐大的時
候，若要能夠較為快速得到資料，可以透過資料取樣，來達到資料減量的目的，縮短傳輸資料的時間與花
費，但是相對的就會犧牲掉資料的準確度。我們透過以下幾個方式來做不同的資料取樣： 
(1) sampling K%筆資料 
(2) 取前面 K 個 QoS 綜合分數較佳的點的資料 
(3) 根據資料的分類各自 sampling K 筆 
  
 
圖 20 、 de-aggregate node example 
 
3.12 服務品質感知整合階層動態調整演算法 
演算法設計目標 
我們希望可以藉由服務品質感知整合階層動態演算法，讓查詢結果的服務品質分數盡量滿足使用要求，由
一組動態整合運算子可以有效的達到或是盡量接近使用者的要求。我們會透過利用使用者服務品質分數與預估
的服務品質參數，根據不同的演算法來挑選每一回合合適的動態整合運算子，希望可以透過利用不同的運算子
逐步的做調整，最後找到一個可以調整至使用者要求的服務品質分數接近的調整步驟，設法讓最後的查詢是接
近使用者一開始的要求。演算法設計目標示意圖如圖 21。 
 
 
圖 21 、服務品質感知整何階層動態調整演算法設計目標示意圖 
 
我們根據上述的目標設計了 QoS 參數最大差異量優先演算法、整體趨勢最大符合度優先演算法，及最接近
服務品質分數優先演算法，前兩者是我們希望可以比較有效率得到理想結果所設計的方法，第三個演算法則是
我們用來得到最佳結果的一個方法，希望可以透過前兩者與第三個演算法的比較，判斷我們的演算法與最佳結
果彼此的效果差異與時間花費。 
 
QoS 參數最大差異量優先演算法 
這個演算法中，主要的作法是利用我們的五項服務品質參數，先判斷使用者要求的與我們預估出來的服務
品質綜合分數差異是否在我們設定的門檻值中，若沒有滿足，就會進入我們 QoS 參數最大差異量優先演算法來
做調整，我們會有一個動態整合運算子影響表 process_table，記錄該回合不同的動態整合運算子作用之後對於
服務品質各項參數的影響量，而我們會從原來的跟預估的兩個服務品質參數陣列去找到二者是在哪一項參數上
的差異量最多，找到動態整合運算子影響表中，可以調整最多該項服務品質參數最明顯的那一個運算子來對查
  
 
圖 23 、QoS 參數最大差異量優先演算法 
 
1. 計算 SQ 
2. 計算 SQ’ 
3. 由 1.2 得 Sdiff 
4. while(|Sdiff | > T and count < k) 
     //假設各 operator 中的變數 k是固定的(即固定的 operators 可以選) 
5.   計算各 operator 針對此 Query 動作後的影響，得到 ops_table 
6.   計算得到目前的差異陣列 D 
7.    r =0 
8.    If (Sdiff >0) // SQ - SQ’ >0；SQ - SQ’ = 0 不會進入 if-else 中 
9.     α = D 中值大於 0 的參數個數 
10.    do 
11.    r++ 
12.      找出 D 中正值第 r 大的 D[i]，得到 i 
13.    判斷這一個 i的 QoS 參數有沒有任何一個 op 可以使用 
14.   while (r <α and 目前這一個 i 沒有任一個 op 可以有辦法調整) 
15.   if(r >α) 
16.      告訴使用者找不到任一可再調整，break 
17.    else 
18.         ׊jאO, 找出 ops_table[j][i] 前 k 大個，計算每個的 Sj 
19.    end if 
20.   else 
21.     α = D 中值小於 0 的參數個數 
22.     do 
23.     r++ 
24.      找出 D 中負值第 r 小的 D[i]，得到 i 
25.     判斷這一個 i的 QoS 參數有沒有任何一個 op 可以使用 
26.    while(r <α and 目前這一個 i 沒有任一個 op 可以有辦法調整) 
27.    if(r >α) 
28.      告訴使用者找不到任一可再調整，break 
29.    else 
30.      ׊jאO, 找出 ops_table[j][i] 最小的 k 個，計算每個的 Sj 
31.    end if 
32.  end if 
33.  選出| SQ - Sj |最小的那一個，得到 j 
34.   對目前的 DA expression 使用 O[j]，並得到實際運作後的 Sj 及更新 Q’ 
35.      紀錄本次使用的 operator 在 operation_table 
36.   Q’ = Qj 
37.   count++ 
38.   Sdiff = SQ - Sj 
39.end while 
40.最後得 operation_table 及 Goal DA expression 
  
圖 25 、整體趨勢最大符合度優先演算法參數定義 
 
 
 
圖 26 、整體趨勢最大符合度優先演算法 
 
<Definition> 
i = 0~4 
Q：Q[i] = 目標 QoS 值的第 i 個參數 
Q’：Q’[i] =實際狀態 QoS 值的第 i 個參數 
SQ：目標 QoS 值的綜合計算分數 
SQ’：實際狀態的 QoS 綜合計算分數 
Sdiff：實際 QoS 與目標 QoS 的分數差異，計算方式： SQ - SQ’ 
T：自訂的一個門檻數值 
count：初始為 0，用來計算 loop 做幾個回合。 
k：自訂的一個門檻數值，用以限制至多做幾回合停止。 
D：QoS 差異陣列，D[i]=Q[i]-Q’[i] 
ࢉ࢕࢙ࣂ：計算兩個 1*5 陣列的相似度，假設現有兩個陣列為 a 及 b，ࢉ࢕࢙ࣂ =ቀ ܉·܊
|܉|·|܊|
ቁ  
 ࢉ࢕࢙ࣂ介於-1~1 之間，值越大代表越相似。 
Similarity：ࢉ࢕࢙ࣂ*ሺ૚ െ ห|܉|ି|܊|ห
√૞
ሻ ，結合陣列長度與角度的因素，作為兩陣列相似度的判斷，值越大
代表越相似。 
O：一個 operator set，是一個一維陣列，O[j]表第 j 個 operator 
Qj：Qj[i] =第 j 個 operator 的 QoS 值的第 i 個參數 
Sj：使用 O[j]作動作後的 QoS 綜合分數 
ops_table：各個 operator 改變 QoS 參數量值紀錄表，用二維陣列表示 
ops_table[j][i]表示第 j 個 operator 作用後對第 i 個 QoS 參數的影響量。 
operation_table：記錄每回合所使用的 operator 
1. 計算 SQ 
2. 計算 SQ’ 
3. 由 1.2 得 Sdiff 
4. while(|Sdiff| > T and count<k) 
//假設各 operator 中的變數 k是固定的(即固定的 operators 可以選) 
5.   計算各 operator 針對此 Query 動作後的影響，得到 ops_table 
6.   計算得到目前的差異陣列 D  
7.     ׊jאO，計算 D 與 ops_table 第 j 列的 Similarity 值 
8.      找到使 Similarity 值最大的那一列，得到 j 
9.   對目前的 DA expression 使用 O[j]，得到 Sj，並更新 Q’ 
10.   記錄本次使用的 operator 在 operation_table 
11.   Q’ = Qj     
12.    Sdiff = SQ - Sj  
13.   count++ 
14. End while 
15. 最後得到 operation_table 與 Goal DA expression 
  
 
圖 29、QoS 綜合分數差異量最小優先演算法 
 
圖 30 是這個方法在挑選合適的動態整合運算子的動作表示，我們會將目前的查詢及動態整合表示式使用
每一個運算子去作用，並得到新的查詢之後，下查詢得到目前的服務品質分數，接著，再選擇所有運算子中作
用後會最接近使用者要求服務品質分數的那一個，作為我們這一回合使用的運算子。 
 
圖 30、QoS 綜合分數差異量最小優先演算法動作示意圖 
 
4. 系統模擬與效能分析 
我們將 RFID 資料依位置不同，分成不同資料表儲存如圖 31，和傳統 RFID 資料表不依位置分開來比較，
我們的方法有更好的效能。 
1. 計算 SQ 
2. 計算 SQ’ 
3. 由 1.2 得 Sdiff 
4. while(|Sdiff| > T and  count<K) 
5.    j O 
6.    利用 O[j]對 query 動作後，計算出新的 QoS 綜合分數 Sj 
7.    選擇| SQ –Sj|分數最高的 operator O[j]作本次使用 operator 
8.    紀錄本次使用的 operator 在 operation_table 
9.    Q’ = Qj     
10.   Sdiff  =  SQ  -  Sj 
11.   count++ 
12. End while 
13. 最後得 operation_table 及結果的 QoS 分數 
  
 
 
 
圖 33 是
結果，我們在
已經無法承受
夾擊的，所以
效果非常差
由圖 34
多，就像我們
於一些範圍性
個基本位置會
圖 35 所
和 semicolo
出現過商品
資料量就減了
很多，而且在
料量最大，因
四種類型的查
資料表增加的
所以查詢的時
 join with p
實驗中發現
，有時候還
不像自然結
。我們的方法
我們可以發
和傳統方法
的查詢效能
有較好效果
列的查詢時
n-typed 較久
，資料庫中至
不少，譬如
資料庫變大
為這類是將
詢在資料量
沒有想像中
間緩慢的上
Withou
With id
Join wit
Use tim
tuplesW
圖 32
roductDB 和
傳統方式在
會當機，其原
合是用=運算
雖然不快，但
現在基本位置
的比較結果
變差了，導致
。 
間是總時間，
，這是因為單
少有幾萬筆
限制為“F1A
時，查詢時
位置切分 R
增加時，都
的多，每多兩
升，而不是
表 4、各類
query 
t id-index 
-index 
h productDB
e-index 
ith( )-typed
、without id-
use time-inde
處理 join wit
因是和產品
子，而必需
還是能夠得
為 25 個時
一樣。而 50
結果不再變
為改寫時間加
一地點的限
會符合，而
 and F1B”同
間只微微增加
FID 資料表做
沒有明顯的變
百萬筆，因
急劇的。 
查詢改寫花
資
200 40
0.075 0.16
0.06725 0.0
0.08595 0.0
0.1727 0.2
0.29445 0.6
index & with
x 的結果，和
h productDB
資料表結合時
使用 >=和<
到結果，在
，明顯的比
個基本位置和
好了，由實驗
上查詢時間
制單純，所以
and-typed 或
時去過這兩個
。而 or-typ
 outer join 因
慢，這是因
為有 50 個基
費的時間 
料數目 
0 600 
475 0.1703
195 0.1524
352 0.05225
586 0.29125
672 1.04385
 id-index 實驗
產品資料表
這類查詢，平
，我們的 id
=來夾擊 id
600 萬筆以下
50 個要慢，
 75 個基本
數據可看出
。我們可以看
查詢的資料
 semicolon-t
地方的商品
ed 這類的查
此資料當然
為資料是總
本位置，所
800 
0.10475
0.15725
0.0233
0.43365
1.0173
結果 
結合的查詢
均時間超過
是被產品資
的範圍，這使
的資料量，查
原因是因為每
位置效能差不
，在設計位置
出單一地點
就多，比如我
yped 類型的查
不會有幾萬件
詢會比較慢和
是最多的，
量增加的快
以一張資料表
 
，傳統方式幾
30 分鐘，而
料表的 start
得索引部分
詢時間還算
個資料表的
多，我們認
階層時，大約
的位置查詢較
們找出一個
詢，因限制
，因此這兩
上面理由一
所以查詢就變
，而每個位置
不過增加四
乎無法得到
且電腦似乎
ID 和 endID
失效，於是
能夠接受。
資料數目較
為原因是對
切分成 50
 and-typed
地點的所有
較多，所以
類的查詢快
樣，它的資
的最慢。這
切分 RFID
萬筆而已，
 
  
 
 圖 35、不同類型的位置表示式查詢速度 
 
針對整服務品質感知動態 RFID 資料整合系統的實驗，我們依照圖 36 的步驟，先輸入使用我們定義的服務
品質感知查詢語言下的一組查詢，我們會依照每一個實驗的目的不同，去設計對應的測試用查詢；針對這一組
查詢中的每一筆來作分析與處理，判斷進入的這一筆資料是不是存在我們的查詢歷史資料庫，如果是不存在資
料庫中，便視作一個新的查詢，然後利用查詢後得到的查詢條件，往前作原時段百分之五的時段下查詢，得到
查詢時的前一小段時間的資料量為多少，利用外插法來預估我們如果實際下達查詢會得到多少資料量，並且根
據查詢計算對應的各個服務品質參數，原始查詢在準確度、反應時間與花費上都會是最多的值 1，而其可靠性
與可得性則根據查詢資料的對象點計算得到。接著我們會先將預估的查詢資料量、服務品質參數與原始查詢時
使用者的條件做第一次的比較，如果查詢條件是無法滿足使用者的需求，我們便會開始利用 3.12 節中所介紹的
三種演算法，作動態的調整希望可以使用一連串的動態整合運算子，想辦法達到使用者查詢時的服務品質參數
目標；之後利用作完演算法後得到的動態整合表示式資訊，以及動態整合運算子運作歷史，對原始查詢做改寫，
得到每一個要查詢對象中對應的 SQL 查詢；接著對我們建立好的分散式資料庫，對包含查詢點資料表的資料庫
下該點的 SQL 查詢，並得到結果與查詢後對應的服務品質分數，並存入我們的歷史查詢資料庫中。而如果我們
在查詢的時候，查詢與存在在歷史資料庫中的服務品質參數、條件相同的話，我們會先去查詢目前這一個查詢
的時間之前的一段資料，同樣去預估目前這個時間大概的資料量與存在在資料庫中的資料量是不是相近的，如
果相近的話代表他們有一樣的查詢情形，僅差異在時間不同，則可以直接從歷史資料庫中的資料去得到對應的
動態整合表示式以及對應各點的查詢，再加上目前這查詢的時間段，對分散資料庫做真正的查詢。而若是比對
之後查詢的環境是不相同的，會和當查詢不存在查詢歷史資料庫中的情況一樣，去分析資料量與服務品質參數，
再透過服務品質整合階層動態調整演算法來作調整，得到接近使用者查詢中服務品質參數目標的動態整合表示
式以及動態整合運算子運作記錄，來作查詢的改寫，得到最後的結果與服務品質分數。 
 
  
參數選擇實驗 
我們要測試演算法之中會使用到的服務品質參數差異的 threshold、演算法挑選運算子做幾回合的 count，以
及 QoS 最大差異量優先演算法中要取出前 k 大/後 k 小的分別設定為多少較為合適。我們會給予一組有 20 筆查
詢在條件與地點較為單純，但是在服務品質的要求上會從合理到非常不合理的變化，想要測試針對平均情況下，
我們挑選參數為多少是比較合適的。我們會根據 threshold 設定為 0.005/0.01/0.02，各自表示只要調整到與使用
者查詢中指定的服務品質分數差異在 0.005/0.01/0.02，就達成我們的要求，可以停止再做調整的動作；count 設
為至多做 5/7/10 回合的調整就會停止，避免無法再做調整的情形出現；以及 k 設為選 5/7/10 個最大或最小的候
選人。來分別調整三項中的某一項，想要觀察這些參數間對於得到服務品質的參數以及花費時間有沒有影響。 
我們可以由這三個圖中發現，隨著回合數越作越多或是選擇的 k 越來越大，代表要處理計算的時間花費會
增加，而在不同的 threshold 上，我們可以發現當門檻值給的越大，所花費的時間會越短，我們覺得可能是因為
差異標準變寬鬆了，所以，比較容易在回合次數還沒全部跑完前便找到合適的調整辦法滿足使用者的服務品質
要求，提前完成造成時間較短。而在服務品質的影響上，我們發現直接看平均值並沒有很直覺的關係，但是我
們發現做越多回合平均的服務品質分數反而不好，所以猜測是因為服務品質平均值的計算之中，包含了反應時
間這一項目造成我們花費的時間會影響到整體的表現，因此，在扣除了反應時間項目的那個參數之後，我們可
以觀察到一個比較明顯的趨勢，就是在 4~6 的參數設定時，平均分數會略好，但整體上的參數對服務品質平均
分數的影響不是非常的明顯。 
 
 
圖 37、參數測試實驗 threshold=0.005 
0
1000
2000
3000
4000
5000
6000
7000
8000
0.4
0.5
0.6
0.7
0.8
0.9
1
1 2 3 4 5 6 7 8 9
時間
(毫秒)
QoS Score
參數變化
(#:count,k) :(1:5,5)(2:5,7)(3:5,10)(4:7,5)(5:7,7)(6:7,10)(7:10,5)(8:10,7)(9:10,10)
threshold=0.005
avg. Time
avg. QoS
avg. Qos 
(excluding 
response time )
user's avg QoS 
  
 
圖 40、動態調整正確性測試--QoS 參數最大差異優先演算法 
 
 
圖 41、動態調整正確性測試—整體趨勢最大差異度優先 
0
2000
4000
6000
8000
10000
12000
14000
16000
18000
20000
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
資料量QoS Score
時間
QoS參數最大差異量優先演算法
data volume
user QoS
c1
c2
c3
0
2000
4000
6000
8000
10000
12000
14000
16000
18000
20000
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
資料量QoS Score
時間
整體趨勢最大符合度優先演算法
data volume
user QoS
c1
c2
c3
  
不同查詢處理方式的效能比較 
在這一節我們會針對我們提出的兩個方法，與我們用來對照的 QoS 綜合分數最小差異量優先演算法作服務
品質改進效果與處理時間花費的比較。這裡我們用來測試用的查詢一共有 4 組 p1~p4，他們在於服務品質的要
求上是相同的，但是不同的在於 p1 是在 Where 與地點的要求最為單純，我們只有指定一個 Where 條件以及針
對兩個地點；p2 則是在 Where 部分便為兩個條件，地點條件同 p1；p3 則是 Where 條件同 p1，但是查詢的地點
增加為 5 個；p4 則是最複雜的情況，有兩個 where 條件以及對五個地點做查詢。 
我們可以由圖 44 與圖 45 發現：我們提出的整體趨勢最大符合度優先演算法效果比較不好且花費時間也比
QoS 參數最大差異量優先演算法的方式來的長，可能因為整體趨勢最大符合度優先演算法在挑選合適的動態整
合運算子時需要作較多的計算與比較，造成時間的花費較高，而其是針對整體的趨勢來挑選合適的調整動作，
因此當只有某幾項參數視需要調整的，便可能會較難找到合適的調整運算子去做較調整的比較近；而 QoS 參數
最大差異量優先演算法，與窮舉挑選動態整合運算子的方法在服務品質分數的調整結果，效果是很接近的，且
在時間的花費上卻可以大幅的減少許多，說明我們的 QoS 參數最大差異量優先演算法是一個可以較為有效率作
階層組織動態資料調整的方式。 
 
 
圖 44、不同方法處理後平均服務品質分數的結果   
0.45
0.47
0.49
0.51
0.53
0.55
0.57
0.59
0.61
0.63
0.65
p1 p2 p3 p4
Avg. QoS    Score
查詢複雜度(由簡至繁)
QoS綜合分數最小差異量
優先演算法
QoS參數最大差異優先演
算法
整體趨勢最大符合度優
先演算法
使用者要求
  
5. 結果與討論 
我們的研究提出一個 RFID 中介軟體的架構，針對 RFID 空間時間的特性，設計了查詢語言與資料管理的方
法，將兩者做連結，提出了查詢處理的方法。利用查詢改寫的方式來處理 RFID 查詢，將 RFID 查詢改寫為標準
的 SQL 語言。  
經過理論分析與設計後，我們也以程式來模擬實驗，由實驗可以看出我們的做法和傳統做法相比，可以有
效的提昇 RFID 查詢處理的速度，證明我們的設計在 RFID 環境下是相當適合的。 
我們的設計只是中介軟體的一部分，未來還有許多工作需要完成，在這列出下列幾點，作為未來改進的方
向。時間索引整理，時間愈久的資料其時間的粗細程度愈粗，如此一來應該能帶來效率的改善。我們的 ID 索
引有 path 這個欄位，當時間一久，裡面的資料可能會愈來愈來，未來可以想個方式將這移動軌跡適當的壓縮。
我們用資料庫的方式可以適用大部分 RFID 系統，但若是真的資料湧入的速度實在太快，我們應該要改以 Data 
Stream Management System 來處理與儲存資料較好。 
依照使用者對於資料，在服務品質上的要求，來作有效的資料整合與查詢調整處理。最後我們彙整出幾項
研究結論： 
z 我們善用 RFID 資料、查詢與組織的階層特性作資料的處理。 
z 設計了一組適合用來評估階層式 RFID 資料的服務品質參數。 
z 我們衍生設計了一套方便管理階層使用者，在階層的 RFID 環境下，容易指定使用的查詢語言。 
z 根據階層的環境下，設計了動態整合表示式，除了能讓使用者方便理解之外，更重要的是能夠在做資料整
合處理動作的時候，有效的做對應動作的表示，方便在調整前後作資料服務品質狀態的評估。 
z 我們根據 RFID 資料的特性、階層式的環境，設計了一組對應的動態整合運算子，簡單的表示對資料及查
詢的整合調整動作。 
z 我們利用階層特性、服務品質參數、查詢語言、動態整合表示式以及動態整合運算子，設計了對應的兩個
服務品質感知整合階層動態調整演算法，有效的依據使用者在服務品質上的要求，來作動態的資料整合及
調整，達成分散式的查詢處理。 
經由實驗證明，我們的方法在資料快速大量變動的環境下，仍然可以使用者要求的服務品質為依歸，作資
料動態的整合處理，並且透過對應的運算子窮舉搜尋方法方法的結果，知道我們的方法是可以較為快速的調整，
並且可以調整到距離使用者要求的服務品質參數差異很小的地方。 
 
 
參考文獻 
[1]  B. S. Prabhu, Xiaoyong Su, Harish Ramamurthy, Chi-Cheng Chu, Rajit Gadh, “ WinRFID – A Middleware for the 
enablement of Radio Frequency Identification (RFID) based Applications,”  UCLA - Wireless Internet for the 
Mobile Enterprise Consortium (WINMEC), http://wireless.ucla.edu/techreports2/UCLA-WinRFID.PDF. Visited 
on July, 2007. 
[2]  Christian Floerkemeier, Matthias Lampe, “ RFID middleware design – addressing application requirements and 
RFID constraints,”  Proceedings of the 2005 joint conference on Smart objects and ambient intelligence: 
innovative con-text-aware services: usages and technologies, Grenoble, France, pages: 219 – 224, 2005.  
[3]  EPCglobal, “EPCglobal Architecture Framework” 
http://www.epcglobalinc.org/standards/architecture/architecture_1_2-framework-20070910.pdf Visited on July, 
2007.  
[4]  Fusheng Wang and Peiya Liu. “Temporal Management of RFID Data,” Proceedings of the 31st VLDB 
Conference, Trondheim, Norway, pages: 1128-1139, 2005.  
[5]  Mark Harrison, “EPC Information Service - Data Model and Queries,” Technical report of Auto-ID Center, 
October 2003.  
[6]  Mark Palmer, “Seven principles of effective RFID data  management,” 
http://www.progress.com/realtime/docs/articles/7principles_rfid_mgmnt.pdf , Visited on July, 2007.  
[7]  Michael J. Franklin, Shawn R. Jeffery, Sailesh Krishnamurthy, Frederick Reiss, Shariq Rizvi, Eugene Wu, Owen 
Cooper, Anil Edakkunni, and Wei Hong, “Design Consideration for High Fan-in Systems: The HiFi Approach,” 
Proceedings of the 2nd CIDR Conference, Asilomar, California, pages : 390-304, 2005.  
[8]  Renee Boucher Ferguson, “Microsoft’s RFID ‘Momentum’ Includes Middleware Platform, Apps,” 
