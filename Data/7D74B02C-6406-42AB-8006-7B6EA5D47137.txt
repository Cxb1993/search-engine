目錄 
中文摘要 ...............................................................................................錯誤! 尚未定義書籤。 
ABSTRACT .........................................................................................錯誤! 尚未定義書籤。 
壹、研究背景與目的 ...........................................................................錯誤! 尚未定義書籤。 
貳、Web-Service .................................................................................錯誤! 尚未定義書籤。 
SOAP ( Simple Object Access Protocol ) ...................................錯誤! 尚未定義書籤。 
WSDL ( Web Service Description Language ) ..........................錯誤! 尚未定義書籤。 
UDDI ( Universal Description Discovery and Integration ) ....錯誤! 尚未定義書籤。 
Shell Script ...................................................................................錯誤! 尚未定義書籤。 
JUDDI ( Java Universal Description Discovery and Integration ) .錯誤! 尚未定義書
籤。 
參、UDDI伺服器系統架構實作.........................................................錯誤! 尚未定義書籤。 
服務註冊功能實作 .......................................................................錯誤! 尚未定義書籤。 
使用者註冊 ...................................................................................錯誤! 尚未定義書籤。 
BusinessEntity註冊......................................................................錯誤! 尚未定義書籤。 
Service註冊 ..................................................................................錯誤! 尚未定義書籤。 
Binding註冊 .................................................................................錯誤! 尚未定義書籤。 
服務查詢功能實作 .......................................................................錯誤! 尚未定義書籤。 
Service Search by Name..............................................................錯誤! 尚未定義書籤。 
Service Search by Type ...............................................................錯誤! 尚未定義書籤。 
肆、自動化服務驗證功能設計...........................................................錯誤! 尚未定義書籤。 
半自動化Web Service驗證功能（semi-automatic） .................錯誤! 尚未定義書籤。 
伍、驗證功能測試 ...............................................................................錯誤! 尚未定義書籤。 
全自動WSDL驗證功能測試（automatic） ...............................錯誤! 尚未定義書籤。 
半自動化Web Service驗證功能測試（semi automatic） .........錯誤! 尚未定義書籤。 
測試程式的建立（Test program） ............................................錯誤! 尚未定義書籤。 
陸、結論 ...............................................................................................錯誤! 尚未定義書籤。 
參考文獻 ...............................................................................................錯誤! 尚未定義書籤。 
致謝 .......................................................................................................錯誤! 尚未定義書籤。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
UDDI伺服器功能增進設計與實作
徐偉智，簡仲楷  
國立高雄第一科技大學 電腦與通訊工程系  
weichih@ccms.nkfust.edu.tw  
 
中文摘要 
JUDDI（ Java implementation of the 
Universal Description, Discovery, and 
Integration (UDDI) specification for Web 
Services）是一個自由軟體，提供 Web 
Service 開發者實現刊登服務的註冊平台。
但是 JUDDI 還有一些缺陷，例如：已註冊
的使用者取得認證碼(authentication token)
只需要輸入帳號而不需要密碼驗證即可取
得認證碼；進行 business Entity （business 
Entity 是表示提供 Web Service 的企業或提
供者之描述資訊）各項資料修改時，
business Entity所有的的web service註冊資
訊會被全部刪除。本篇論文除了改善這些
缺點，主要研究重點在於 Web Service 有效
性驗證功能的開發：  功能一、全自動
WSDL(Web Service Description Language)
文件有效性驗證，WSDL 文件有效性可以
利用 Linux Shell 排程指令與 wsdl2java
（wsdl2java是用來透過剖析WSDL來建立
Java client 介面）工具來進行驗證。功能
二、半自動 Web Service 有效性驗證功能，
藉由 wsdl2java 解析 WSDL 文件所得到的
Java client 介面，來撰寫呼叫 Web Service
的測試程式。從測試程式執行的結果成功
與否，系統便可以知道該 Web Service 是否
正常運作；最後將測試程式的執行指令加
入 Shell 的排程中，便完成了半自動 Web 
Service 有效性驗證功能的開發。系統環境
為 Linux Fedora core 3，web server 為
tomcat5.5，Java 執行環境為 JDK1.5，Juddi
版本為 0.9rc4。 
 
關鍵詞：UDDI、JUDDI、SOAP、WSDL、
全自動、半自動 
 
ABSTRACT
JUDDI is an open source Java 
implementation of the Universal Description, 
Discovery, and Integration (UDDI) 
specification for Web Services. It creates a 
standard interoperable platform that enables 
companies and applications to quickly, easily, 
and dynamically find and use Web services 
over the Internet. As we know, The Apache 
Software Foundation still has some 
drawbacks on designing the JUDDI. For 
example, user who has registered can obtain 
the authentication token without verifying 
password; The material information of the 
service under the business Entity could be 
completely deleted when doing modification 
on business Entity. Business Entity is the 
description of Web Service business or 
provider. In this paper, besides improving 
these drawbacks , our major objective is to 
design the validation of Web Service. The 
first function implemented is automatic 
verification of the validation of WSDL 
document. It is achieved by using linux 
system shell schedule and wsdl2java.The 
wsdl2java is a tool to create java client 
interface by prasing WSDL document. The 
second one is semiautomatic verification of 
the validation of Web Service. We implement 
a test program to request the service of Web 
Service and the result will show if this 
service is still working or not. Then, we set 
the test program into system shell schedule 
and complete the validation of Web Service. 
 
Keywords：UDDI、JUDDI、SOAP、WSDL、 
automatic、semiautomatic 
 
 
 
 
 
 
 
 
 
 
 
 
 I
案。WSDL可識別所提供的服務是怎樣的
服務外，還描述了每個服務所提供的操作
方法。針對每個方法WSDL描述了用戶端
要求服務時要遵守的事項以及傳輸資料的
格式等等。 
 
 
圖二、WSDL架構圖 
 
UDDI ( Universal Description Discovery 
and Integration )  
UDDI定義了Web-Service發佈和發現
的方法。利用XML以及SOAP技術，讓提供
Web-Service的服務提供者可以註冊自己本
身所提供的服務到提供UDDI服務註冊的
機構。當服務需求者需要某種網路服務
時，也可以到提供UDDI服務的地方查詢所
需要的服務。  
 
Shell Script 
 Shell 是用來與 kernel(Linux 系統核心)
溝通，來控制硬體設備的一項工具，藉由
Shell Script，我們可以完成一連串的指令，
甚至可以撰寫像程式語言般的判斷式以及
迴圈，在後續的設計章節會提到我們是如
何利用 Shell Script 來完成自動化 Web 
Service 驗證功能。 
 
 
圖三、Web Service 發布叫用運作流程 
箭頭【尋找服務】的工作流程，在「目
錄 UDDI」layer 進行透過使用者介面來執
行查詢服務的 api，然後「通訊格式 SOAP」
layer 透過 soap 將物件封裝，在「資料格
式 XML」layer 用 XML 的方式來表示，
最後在「網路協定 HTTP」layer 跟我們的
uddi server 溝通。箭頭【到服務的連結】
的工作流程，是作反序列化的工作來取得
uddi server 回傳的 response 訊息。在得知
服務所在位址之後，箭頭【要求服務描
述】，透過「描述 WSDL」layer，讓 web 
service 呈現我們可以了解的資訊（圖四）。
箭頭【取得服務描述文件】，有了 WSDL
文件後，client 端就可以設計服務叫用的方
法，進行【要求服務】以及取得【服務結
果】。一般來說 WSDL 文件位址不見得要
刊登在 uddi server 上（uddi spec 中 tModel
規範），但是本系統由於必須要驗證 WSDL
的有效性，所以會要求服務刊登者必須也
刊登 WSDL 所在位址。 
 
 
 圖四、.NET 開發的 Web Service 位址 
 
 
 
 圖五、Web Service 發布叫用運作流程 
是一個 SOAP 請求的訊息，在其目的
是 向 UDDI server 取 得 認 證 碼
(authentication token)。此訊息採用 XML
的格式，元素(element) “get_authToken”
及 參 數 (arguments) ”generic” 、 
“xmlns” 、 “userID”之意義或作用則定義
在「目錄 UDDI」的規範中。”generic”指
 2
 
圖七、JUDDI 內建介面 
 
 
圖八、UDDI API 架構示意圖 
businessEntity、service、binding 以及
tModel 關係我們可以從圖八看的出來，
Provider 就是代表 businessEntity，因為
UDDI 是以企業使用為導向的註冊平台，
所以他的註冊內容比較偏向 business 的設
定，那這邊也可以把它當成是一個個人的
相關資訊，而且一定要有 businessEntity
才能進行 service 的發佈，圖八的關係圖，
Provider（businessEntity）可以有 0~n 個
service ，每個 service 可以有 0~n 個
binding，而每個 binding 必須要有 1~n 個
tModel，這邊 binding 之所以必須要有
tModel，是因為 Binding 包含對 tModel 的
參照，相關的技術規範都包含在 tModel
裡面。 
 
參、UDDI 伺服器系統架構實作 
UDDI 系統架構 
uddi Server 提供處理 uddi Clinet 的管
理服務要求，包括（一）服務註冊、（二）
服務查詢、（三）服務變更以及（四）WSDL
有效性檢驗。 
uddi Clinet 提供使用者管理服務的瀏
覽器操作介面，包括（一）服務註冊介面、
（二）服務查詢介面、（三）服務變更介面
以及（四）服務有效性確認介面 
最後，我們將功能需求分配到 2 個子
系統，它們分別是（一）uddi 伺服器子系
統(uddi Server)、（二）uddi 客戶端系統(uddi 
Client) 
 
 
圖九、UDDI 系統架構圖 
 
服務註冊功能實作 
服務註冊功能分為四階段，分別是使
用者註冊、BusinessEntity 註冊、Service 註
冊以及 Binding 註冊，透過這四個註冊階段
即可以完成服務的註冊流程。 
 
使用者註冊 
提供欲使用 Juddi 註冊平台的 Web 
Service 開發者進行帳號註冊，在使用者送
出註冊的資料時，系統會先產生一組具有
管理者權限的的認證碼 (authentication 
token)，接著將註冊資料以及該認證碼填入
save_publisher 的 SOAP 請求訊息後，就可
以向 Juddi server 進行註冊要求。  
圖十說明了使用者註冊流程。從首頁
【我要註冊】的連結進入 registy.jsp，輸入
使用者申請的帳號密碼以及個人資料後，
會送到 UserDataProcess.jsp 進行檢驗資料
與格式是否正確無誤，並且向 Juddi server
申請一組具有管理者權限的認證碼（具有
管理者權限的認證碼才能註冊使用者）接
著會把註冊資料以及該認證碼加入在
save_publisher SOAP 訊息中後，再送到
crontrollerx.jsp 進行處理，當 crontrollerx.jsp
收到 SOAP 訊息時，會先依據該 SOAP 所
屬的請求 Type（由參數為 admin、inquiry
以及 publish 來判斷），由於這邊是要註冊
使用者，所以採用的請求 Type 為 admin。
crontrollerx.jsp 會將 Juddi server 處理好之
 4
 
圖十三、businessEntity 註冊流程 
 
 
 
圖十四、businessEntity 註冊 SOAP request
架構 
 在此 SOAP 訊息中「save_business」
為主要根元素，是表示此 SOAP 是要進行
businessEntity 註冊請求，「businessEntity」
元素底下的子元素就是 businessEntity 的
註冊資料，對照到圖十五的註冊欄位，其
中 useType 對照到 BusinessType，這邊分
為 company（公司）、SOHO（個人工作室）
以及 ResearchTeam（研究團隊）等三種。 
 
 
圖十五、businessEntity 註冊資料填寫 
 
Service 註冊 
透過 BusinessEntity 的成功註冊之後，
我們取得了 BusinessKey，BusinessKey 是
作為 Service 的對應依據，在 service 註冊
的流程上是必要的，在進行 service 註冊的
時候，先決條件必須要有 businessKey 以及
認證碼，在註冊流程上與 businessEntity 的
註冊大同小異。 
 
 
圖十六、service 註冊流程 
 
 6
 
圖二十一、binding 註冊資料填寫
（binding.jsp） 
 
 
圖二十二、binding 註冊資料完成
（bindingShow.jsp） 
 當 binding 註冊完成之後，會先將
WSDL 驗證狀態設定為 wait_check 表示等
待 驗 證 中 ， service_testprogram 與
service_testprogram_check 要在半自動
service 有效性驗證功能過後才會改變。 
 
 圖二十三是完成所有流程後的服務註
冊資訊 
 
 
圖二十三、註冊完成後的 businessEntity
詳細內容 
 
服務查詢功能實作 
服 務 查 詢 此 處 分 為 三 類 ：
BusinessEntitySearch、ServiceSearch 以及
PublisherSearch，其中 BusinessEntitySearch
以及 ServiceSearch 又分為依據名稱或類型
來進行搜尋，因此搜尋的類型分為五種，
結合了 Juddi原先所提供的Search API加以
改良，將回傳的訊息剖析以表格呈現。這
邊介紹 ServiceSearch 部分。 
 
 
圖二十四、query.jsp 工作流程 
主要是負責傳遞使用者欲查詢的項目
資訊到對應的網頁進行查詢處理 
 
Service Search by Name 
 Service Search by Name 是說送出要搜
尋的 Servie 的名稱後，將會接收到對應的
SOAP 訊息，然後將接收到的 SOAP 訊息
剖析作成表格得到我們要的結果，畫面結
果會顯示所查詢到的 Service 有哪些，以及
在其底下的 Binding，這部分的結果畫面在
系統測試會進行展示。，原有的 Find API
只有回傳 Service Name 以及所屬的
BusinessKey與ServiceKey完全沒有其他資
訊，那在這邊設計在查詢到的服務名稱還
多建立了「詳細內容」按鈕，供使用者了
解更多資訊。 
 
 
 8
 
圖二十八、WSDL 全自動有效性驗證流程 
 
 
圖二十九、wsdl_check.sh 執行流程 
 
半自動化 Web Service 驗證功能
（semi-automatic） 
 由於全自動化 Web Service 驗證功能
仍有驗證正確與否的疑慮，畢竟 WSDL 文
件僅記載著 Web Service 的 Binding 方式以
及所屬的服務所接收與回傳參數值類型。 
 所以我們要更精確的知道該 Web 
Service 是否有在正常運作，就要對註冊的
Web Service 所提供的功能進行驗證，驗證
的方式就是針對該 Web Service 設計一個
測試程式，透過執行該測試程式的成功與
否為判斷依據，將結果與驗證時間存入對
應的資料表中。(圖三十) 
 進行半自動化驗證的 Shell Script 有以
下幾個部份：(圖三十一) 
 
1.CLASSPATH 設定： 
 參照全自動化 Web Service 驗證功能
之 CLASSPATH 設定部份。 
 
2.進行 Web Service 測試程式驗證判斷： 
 在執行測試程式後，儲存判斷結果與
驗證時間到對應的資料表中。 
  
 
圖三十、半自動服務有效性驗證流程 
 
 
圖三十一、WebServiceCheck.sh 執行流程 
 
伍、驗證功能測試 
全自動 WSDL 驗證功能測試（automatic） 
 WebService 的全自動驗證，在【參、
自動化服務驗證功能設計】中有提到其驗
 10
 
圖三十七、Service之詳細內容(驗證後) 
 進行驗證後的service會將測試程式以
及驗證結果記錄到資料庫中，並且進行資
料更新。
 
測試程式的建立（Test program） 
透過 Java 建立 Web Service Binding 
Program 來使用 Web Service 
 首先要先設定好 CLASSPATH 路徑，
在 本 例 中 在
CLASSPATH=/usr/local/axis-1_4/webapps
下來撰寫，接著到這個 CLASSPATH 目錄
底下執行以下指令「/usr/java/jdk15/bin/java 
-Djava.ext.dirs=lib 
org.apache.axis.wsdl.WSDL2Java 
http://163.18.62.48/WebServiceTest/Servicet
est.asmx?WSDL 」， 之 後 會 產 生
Service1.java 、 Service1Locator.java 、
Service1Soap.java 以 及
ServiceSoapStub.java，這是由於 Axis 中的
WSDL2Java 的 class 檔會將接收到的
WSDL 文件作解析而產生的，其中畫面上
看到的 ServiceTest.java 就是我們要編輯用
來使用 Web Service 的 Test Program。 
 
 
圖三十八、建置 Java Web 
ServiceApplication（1） 
 
 
 
圖三十九、建置 Java Web 
ServiceApplication（1） 
 
 圖四十就是 ServiceTest 的程式內容，
首 先 要 匯 入 剛 剛 解 析 出 來 的
Service1Locator 以及 Service1Soap，先建構
一個 Service1Locator 為_Locator，再將取得
Web Service 的方式建構為_localService，接
著透過_localService 我們就可以取得剛
剛.NET 所撰寫的 Web Service 功能，接著
回到/usr/local/axis-1.4/webapps 編譯 javac 
ServiceTest.java 後，執行 java ServiceTest，
圖四十為執行結果，編譯的時候會出現很
多的 Waring，這是由於我們透過.NET 所產
生的 WSDL 文件，再經由 WSDL2Java 轉
換後，中文會有亂碼的顯示，不過那大多
數都是註解，並不影響程式的執行結果，
到這邊為止，就算完成了透過 Java 來使用
Web Service 所提供的功能。 
 
 
圖四十、建置 Java Web ServiceApplication
（2） 
 
 
圖四十一、建置 Java Web 
ServiceApplication（3） 
 
 
陸、結論 
 這次的研究可以分成兩部分，首先，
是使用Open Source Juddi來加以修改，並且
作適當的功能調整，在進行SOAP的訊息解
析方面，雖然AXIS的函式庫提供了解析方
式，但是還是要做過相當的調整才能剖析
取出所需要的值。 
其次就是本次研究的重點部份自動化
Web Service有效性檢驗，而在JSP的環境中
要送出Linux的command line會有部分指令
無法執行的問題，造成透過JSP操作自動化
檢測的困難性，但是經由系統管理者來管
理Web Service有效性檢測是比較恰當的，
 12
