several experiments with real-world programs to prove 
our method is feasible.  
 
 
2摘要
由於資訊領域的快速發展與應用，各類安全威脅日趨嚴重，而這些威脅都根源於軟體的缺陷，軟體安
全性的探討因此成為重要的議題。這些議題中，最大的威脅來自 於軟體缺陷經常性地被揭露、使得駭
客的攻擊事件層出不窮，其中零日攻擊(zero-day attacks)更造成系統及經濟上的重大危害。我們以
軟體發展過程的角度分析，瞭解到安全漏洞的修補過程，是一場與零日攻擊的時間競賽，若能儘早修
補漏 洞，將可大幅降低其威脅性。為了快速掌握漏洞，我們運用在軟體測試領域中，已被廣泛研究運
用、自動尋找程式錯誤的方法。然而如何分析眾多的程式錯誤，優先 尋找出安全性威脅的漏洞，仍是
一個很困難的研究領域。在此研究中，我們轉換角色，以攻擊者的角度來試圖產生攻擊程式碼、並將
過程自動化，以此證明程式中 存在安全性漏洞。我們提出基於符號執行的軟體測試方法，實作攻擊程
式產生器，可任意攔截控制流程。此概念已實驗在多個真實的程式，證明此方法實際可行。
有關自動攻擊產生器的報告已經撰寫成三篇碩士論文，並將投稿於會議與期刊中，列在成果自評。
關鍵詞：軟體測試、程式安全、攻擊產生器、符號運算、零日攻擊
4Introduction
Software security is an important issue in computer security field. It is due to that the software vulnerability
has been the root of a variety of computer security threats. The threats are mostly induced by misuse of syntax
or carelessness of logic during software development. With the inherent vulnerabilities, attackers can reason
out an ``exploit, which is a crafted program input and can result in arbitrary program execution of malicious
code, to intrude into computer systems and cause system damage.
On the other hand, exploits are very good test cases for software developers. In order to fix a large number of
bugs, programmers have to set priority for bugs according to the degree of security threats. However, there
are currently few effective ways to identify bugs as security vulnerabilities. Exploit generation is a possible
way to prove a bug exploitable. Moreover, exploits can help programmers fix vulnerabilities quicker by
reproducing the attack behavior.
Motivation
Manual exploit generation is a difficult and time-consuming process because it requires not only the related
low-level knowledge of computer systems, such as operating system internals and assembly language, but
also analyzes the control and data flow of program execution by hand. If the program under test is large or
uses complex algorithms, the analysis work will be extremely difficult.
In software testing filed, many research and techniques aim to find bugs[1][2] in a program and generate test
cases[3] to trigger those bugs. However, those test cases are meaningless and only to cause the program to
crash. On the other hand, the techniques of attack skills and exploit designs are multifarious, but the exploit is
still very difficult to be generated manually. For this reason, this thesis tries to bridge the gap between bug
finding and exploit techniques and to generate exploit automatically.
Objective
We have observed that many applications will crash by feeding a certain unexpected data. A program crashes
means that control flow of the program execution is changed to invalid execution paths, and the program is
very likely exploitable. In a program, many data may influence control flow of program execution, such as
return address of functions, and Global Offset Table(GOT). If these sensitive data are corrupted, the intended
attackers can hijack the program control. However, in most of the cases, these control sensitive data cannot be
touched in normal behavior of program execution. The challenge in this thesis is to generate inputs to corrupt
these control sensitive data through vulnerabilities so that the program will execute in invalid control flow.
6updated with a symbolic data. The exploit generation will search memory to find usable memory regions to
inject shellcode and NOP sled, and redirect EIP register to shellcode. The process of EIP register corrupted
detection and exploit generation is shown in the following figure.
Exploit generation
Shellcode injection
For shellcode injection, the first thing is to find all memory blocks tainted by user input and large enough to
hold payload. Even if a tainted block consists of many different variables, it still could be used to inject
shellcode as long as the block is contiguous. It is very difficult to analyze source code manually to find a
contiguous memory region tainted by user input and combined with variables. In addition, compiler often
changes the order or allocation size of variables for optimization, and makes it more difficult to find a
shellcode buffer manually.
The main regions data stored in memory are stack, heap and data segment. The data segment is the best region
for shellcode injection because its address is decided at compile time, i.e.~it is unaffected by ASLR. Stack and
heap both are affected by ASLR, but the heap is more suitable than stack for shellcode injection. The primary
reason is that there are more protections for stack than for heap, and the second is that the stack stores not
only local variables but also other sensitive data for exploitation, such as environment variables. The locations
of some variables in stack may differ on different systems. Therefore, the search order for shellcode injection
is followed by data segment, heap ,and finally stack.
8Concolic-mode simulation determines whether a path is exploitable rapidly because it focuses on only one
path. To cooperate with Fuzzer tools on getting an input crashing the program under test automatically, it is a
very powerful technique to generate exploits. The process is shown in the above figure.
Experimental Results
Testing method and environment
In this chapter, we demonstrate the results of automatic exploit generation for vulnerable sample code and
real-world programs. All experiments were performed on a 2.66 GHz Intel Core 2 Quad CPU with 4 GB of
RAM, and the host environment is Ubuntu 10.10 64-bit. The guest environment is Debian 5.0 32-bit with
default settings of QEMU, which is a 266MHz Pentium II (Klamath) CPU with 128 MB of RAM.
10
In this experiment, the source input of all code is argument and its length is 100 characters. We experiment on
concolic mode and traditional symbolic execution to compare the exploring time and wall time. In symbolic
execution, depth-first search (DFS) is used to explore a symbolic execution tree. The heap overflow code is
executed on Glibc 2.3.2, because since version of Glibc 2.3.6 includes the protections that check pointer
consistency. In addition, exploit generation cooperate with libfmtb library to build format strings to exploit
format vulnerabilities.
In the Return-to-libc experiment, we aim to use system() function to execute ``/bin/sh command. The run-time
information at exploit generation are shown in the Table. The values of location where ESP register point to
and where ESP register plus 4, which is the address to insert argument, are all symbolic and the potential
shellcode buffers are large enough to insert the string ``/bin/sh, so this tested program satisfies the condition
of Return-to-libc exploit generation. The wall time of the experiment is 3.25 seconds, in which the time spent
on exploring path is 2.91 seconds.
The above table shows the information at Jump-to-register exploit generation. The ``call \%eax instruction is
found at 0x0804839f and EAX register point to the start location of a symbolic region exactly, so this tested
program can generate Jump-to-register exploit to bypass ASLR. The wall time of this experiment is 3.16
seconds, in which the time spent on exploring path is 3.10 seconds.
Real programs
In the final part of experiments, we generated exploit for real programs. Because real programs are more large
and complex than the sample code, this experiment demonstrated the effectiveness of our method by
generating exploits for real-world applications.
We chose 7 programs from benchmarks of AEG and found 3 new vulnerability programs released in recent
years to as the benchmarks of our experiments. The 10 real programs are evaluated by end-to-end approach,
i.e.~all programs are tested in binary form, and the vulnerabilities of programs are all stack buffer overflow.
Concolic-mode is used to perform exploit generation on all programs, and code selection intercept functions
associating with files or output, such as fopen() and perror(). The following table shows the results.
12
Conclusion
In this thesis, we implement the automatic exploit generation and build it on S2E, which is a new platform for
symbolic execution. We aim at all control flow hijacking attacks instead of any special case, and propose an
easy and precise method to achieve these goals. In contract with AEG, EIP register corruption is a
comprehensive idea that reason about exploit more precise and deal with all control flow hijacking attacks. In
addition, we implement concolic simulation and code selector on S2E to explore paths more efficiency on
symbolic execution.
In order to test our method, we experiment on a variety of sample vulnerability programs to prove that it can
address all kind of control flow hijacking attacks, and real-world programs to prove that it is feasible to deal
with real program. In addition, we season about other type of exploit to attack protection to prove it is useful.
References
1. ↑Wang, T.; Wei, T.; Lin, Z.; Zou, W. (2009). "IntScope: Automatically Detecting Integer Overflow
Vulnerability in X86 Binary Using Symbolic Execution". Ndss09.
2. ↑Molnar, D.; Li, X.C.; Wagner, D.A. (2009). "Dynamic test generation to find integer bugs in x86
binary linux programs". Proceedings of the 18th conference on USENIX security symposium (Berkeley,
CA, USA): 67-82.
3. ↑Cadar, C.; Engler, D. (2005). Execution generated test cases: How to make systems code crash
itself..
4. ↑P\vas\vareanu, C.S.; Visser, W. (2009). "A survey of new trends in symbolic execution for software
testing and analysis". Int. J. Softw. Tools Technol. Transf. (Berlin, Heidelberg) 11 (4): 339-353.
doi:10.1007/s10009-009-0118-1. ISSN 1433-2779..
5. ↑Schwartz, E.J.; Avgerinos, T.; Brumley, D. (2010). "All you ever wanted to know about dynamic
taint analysis and forward symbolic execution (but might have been afraid to ask)". 2010 IEEE
Symposium on Security and Privacy: 317-331..
6. ↑Cadar, C.; Godefroid, P.; Khurshid, S.; Pasareanu, C.; Sen, K.; Tillmann, N.; Visser, W. (2011).
"Symbolic Execution for Software Testing in Practice Â–Preliminary Assessment". International
Conference on Software Engineering, Impact Project (ICSE Impact 2011) (Honolulu, Hawaii, USA)..
7. ↑Godefroid, P.; Klarlund, N.; Sen, K. (2005). "DART: directed automated random testing".
Proceedings of the 2005 ACM SIGPLAN conference on Programming language design and
implementation (New York, NY, USA): 213-223. ISSN 1-59593-056-6..
8. ↑Sen, K.; Marinov, D.; Agha, G. (2005). "CUTE: a concolic unit testing engine for C". Proceedings of
the 10th European software engineering conference held jointly with 13th ACM SIGSOFT
14
23.↑Caballero, J.; Poosankam, P.; McCamant, S.;Babi Ä‡, D.; Song, D. (2010). "Input generation via
decomposition and re-stitching: finding bugs in Malware". Proceedings of the 17th ACM conference
on Computer and communications security (New York, NY, USA): 413-425.
ISSN 978-1-4503-0245-6..
24.↑Ciortea, L.; Zamfir, C.; Bucur, S.; Chipounov, V.; Candea, G. (2010). "Cloud9: A software testing
service". ACM SIGOPS Operating Systems Review 43 (4): 5-10..
25.↑Brumley, D.; Poosankam, P.; Song, D.; Zheng, J. (2008). "Automatic Patch-Based Exploit
Generation is Possible: Techniques and Implications". Proceedings of the 2008 IEEE Symposium on
Security and Privacy (Washington, DC, USA): 143-157. doi:10.1109/SP.2008.17.
ISSN 978-0-7695-3168-7..
26.↑Avgerinos, T.; Cha, S.K.; Hao, B.L.T.; Brumley, D. (2011). "AEG: Automatic Exploit Generation".
Network and Distributed System Security Symposium..
27.↑Heelan, S. (2009). Automatic generation of control flow hijacking exploits for software
vulnerabilities..
28.↑Chipounov, V.; Kuznetsov, V.; Candea, G. (2011). "S2E: a platform for in-vivo multi-path analysis of
software systems". Proceedings of the sixteenth international conference on Architectural support for
programming languages and operating systems (New York, NY, USA): 265-278.
ISSN 978-1-4503-0266-1..
29.↑Bellard, F. (2005). "QEMU, a fast and portable dynamic translator". Proceedings of the annual
conference on USENIX Annual Technical Conference (Berkeley, CA, USA): 41-41..
16
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限）
本計畫已經成功自動產生攻擊程式，將改變未來軟體開發的模式。目前如微
軟每週一次的安全 patch，或許可能變成每天或即時，同時所謂駭客攻擊不
再是駭客的專利，而是可自動產生。我們的研究是將軟體安全的威脅突顯出
來，目前正在進行大型軟體如 office, mysql, IE 等系統之自動攻擊產生，
我們將證明只要有足夠能力的超級電腦，將能自動進行大規模與大範圍之攻
擊。
99 年度專題研究計畫研究成果彙整表 
計畫主持人：黃世昆 計畫編號：99-2221-E-009-120- 
計畫名稱：操控程式輸入測試以自動產生系統攻擊資料 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 3 3 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 8 8 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
