簡介 
Advances in IC technologies have enabled embedded systems to use multi-processor system-on-
chip (MPSoC) to meet the increasing performance demands. Since power is critical in mobile em-
bedded systems, such as mobile phones, GPS navigation systems, digital cameras, and handheld 
DVD players, it is important to understand how power is consumed at the design stage of MPSoC-
based embedded systems. Then, the power bottleneck of the design may be identified and improved 
for prolonged battery operations. In this paper, we present a system-wide power estimation system 
for designing MPSoC-based embedded systems. This system can collect and accumulate hardware 
events of different system components, such as CPU, BUS, and memory, and then by coupling with 
related system power models, report the power consumption of application software. This system can 
be integrated into FPGA-based MPSoC design for fast power and performance evaluations. We will 
demonstrate the implementation of the system and show how it helps to collect power profile of an 
MPSoC system design. 
 
前言 
Advances in IC technologies allow us to place millions of transistors in a single chip, which can 
form a complete system to meet design requirements. We often call this system SoC (system on chip). 
SoC will integrate different components such as CPU, system bus, I/O interface and special ASIC for 
different applications. Recently, SoC is used widely in our life. We can find them in a lot of devices 
such as cell phones, televisions, digital camera, etc. 
Nowadays, for more performance requirements and more complex application designs, MPSoC 
has been development. MPSoC is an extension of SoC. The architecture of MPSoC is an SoC with 
multiple processors or computation units. Components of MPSoC are connected by different kinds of 
interconnections. Cell processor [1] used in PS3 is an example of MPSoC. Cell processor has 8 com-
putation unit (SPE) and one control unit for heavy graphical computations and real-time video dis-
play. These units are integrated by a special ring bus.  
MPSoC design is more difficult than SoC due to increasing number of components and more 
complex software design. These cause evaluation and tuning of MPSoC application more difficult 
and slower. In addition, since SoC systems are usually used in battery-based embedded systems, we 
must ensure the design meet the power constraints; or we should reduce the power consumption of 
the application for longer battery-life.  
 
Figure 1: An example of MPSoC (Cell processor). 
 
 
is translated to behavior input of the SoC hardware. The simulator will accumulate power consump-
tion of the gates to the final result. A common tool kit is provided by Synopsys [7]. 
Because these tools simulate very detail behavior in the design, they can reach very high accura-
cy. The results are very close to real power consumption. But the simulation speed is too slow to 
measure larger application. Abhishek Bhattacharjee [8] and Sérgio J. Filho [9] have presented the 
time-consuming bottleneck of gate-level simulators. 
2) Architecture-level Simulator 
These kinds of tools simulate hardware architecture behavior such as different instructions or 
simple access. And then integrate the result with power model of the architecture. The most common 
tool is Wattch [10] and SimplePower [11]. Wattch, for example, used capacitance-based power mod-
els for modules such as arrays, CAMs, combinational logic, and clocking components. A proposed 
hardware design is created within the simulator environment. And some estimation modules must be 
added into the simulator for measurement. After simulating the architecture behavior, result can be 
obtained from the estimation module. Although these tools have fast speed because simply simula-
tion, it’s still hard to simulate operating system and real-time behavior. And estimation module also 
spends other simulation time. The available architecture also may be bound in simulators. 
There are also some works designing their own simulator for their hardware design. Kristian 
Hildingsson [12] use sparc-architecture simulator and their calculation tool for power estimation on 
leon3 SoC design. Sérgio J. Filho [9] designs a simple instruction simulator and bus traffic simulator 
for mips MPSoC. These simulator also not fast enough and cannot simulate operating system or 
complex application. Real-time behavior cannot be captured in the simulation environment too. In 
addition, simulation-based techniques might not be able to faithfully model the real hardware beha-
vior. Measuring the power consumption directly on real hardware is a way to avoid the aforemen-
tioned problems. But it cannot be used in hardware prototyping. So using system profiling hardware 
record real-time behavior can be a good solution. 
C. Power estimation using system profiling hardware 
There are lots of works using system profiling hardware. Here we present two works for exam-
ple. Karan Singh [13] use exist profiling hardware in AMD processor and corresponding power 
model. The result is the integration of profiling data and power model. The estimation is under real 
system run-time. This work demonstrates these methods not only can estimate the power consump-
tion but also can use this information to do run-time optimization such as power-aware scheduling. 
Although this work only focuses on CPU because of hardware limitation, we can extend this concept 
on hardware prototyping phase.   
The work [8] presented by Abhishek Bhattacharjee uses the concept above for hardware proto-
typing phase. They define power model for leon3 processor, and add corresponding hardware event 
counters on the FPGA emulation board. The profiling result can be obtained on kernel layer. They 
also present a power–aware scheduling by using this method. But there still some disadvantage of 
this work. They still mainly consider CPU but not the system-wide power consumption. The inter-
face for application layer user is still rough and not general. 
 
系統架構 
In this section, we will introduce the approach that we propose to do power estimation on hard-
ware prototyping phase. We will show the framework of our system and describe each layer of this 
system. We also propose the flow of implementation and usage of this system. 
A. Basic Concept and System Framework 
then send these data to a profiling data transmission network. A module on the other side which also 
attach to the network is responsible for collecting, recording, compressing, or analyzing the informa-
tion.  
In our implementation, because the information we record are events represent behavior of soft-
ware execution, such as different instruction, usage of cache and memory, we do not need lots of de-
tail hardware information. We design the detect circuit as a simple signal sender. It only sends a 
pulse when event occur. The transmission network also replace into signal wire to send pulses to the 
colleting module. There are some hardware counters record the number of events by detect pulse 
signal. Because we need provide system-wide information, the components we detect events form 
are include CPUs, system bus, and memory. We choose these components because they are the basic 
components in MPSoC and play an important role. As a matter of course, events of these compo-
nents are based on their power model. All of the hardware can be synthesized and emulated in the 
hardware platform. For achieving some flexibility, our hardware can automatically generate by feed-
ing some parameters. If no new components be added in the platform, the hardware does not need to 
revise. During the emulation, the hardware will record both user space and kernel space events be-
cause we want to know the power consumption of the whole system operation. 
C. Description of Software Layer 
Purpose of the software inside our system is providing interfaces to application designer for 
convenience. These interfaces are divided into two categories, one is working in operating system 
and the other is functioning in the application layer. The first kind of interface in our design is device 
driver. This driver is responsible for initialing, controlling, and accessing the hardware device direct-
ly. In addition, interfaces on software layer can access the hardware via this driver. The main advan-
tage of using driver is easy to install on different OS and less overhead compare to system call. 
The second kind of interfaces in our design is software API. The API we implemented called 
PAPI [18]. PAPI is a very general interface specification for users accessing hardware performance 
counters. There is several profiling software [19] [20] build based on PAPI. Implementation by PAPI, 
we can provide a common and convenient interface to the designers. 
D. System Flow 
We provide a set of processes to use our methods. The flow chart is shown in Figure 4. The first 
step is to design the MPSoC hardware architecture. Then we define the power models. The required 
events are defined by these models as well. After events are defined, we can design the profiling 
hardware and software interface. The hardware is synthesized and the whole system is emulated after 
design of the estimation tool is completed. Finally, we can get the estimation result using the soft-
ware API, which can be used for revision of the application or changes in the MPSoC design.  
 
Figure 4: Estimation flow. 
The power models we used are CPU, AHB BUS, and external SDRAM. We introduce CPU 
power model first. Generally, CPU can be modeled by different instruction in the pipeline [9][21]. 
Sometimes, cache model or other part in CPU also include in CPU model [8][12]. In addition, data 
variation, Bypass Paths, operand value, etc., can be considered. After comparison with some power 
models, we choose CPU power model in [8] because it modeled different parts of CPU and it consid-
ers data snoop, which is important in MPSoC. Advance behavior such as data variation ae not mod-
Table 2: CPU and Bus power model. 
CPU power model 
Power equation: Pcomponent = Pidle + Σ ( Eini f )/cycles 
Enegy: Ecomponent = Pidle × cycles / f  + Σ ( Eini ) 
Pidle: static power 
Ei : energy per event 
ni : event count 
f :frequency 
Pipeline Idle: 19.47mW    
Br/Jmp: 2.83nJ   
Add: 7.44nJ   
Shift: 5.06nJ   
Logical: 2.51nJ   
Mul: 20.17nJ   
Div: 79.16nJ   
Dep Stall: 0.82nJ   
Other: 0.89nJ  
Register file Idle: 27.68mW  
Read Single: 0.42nJ  
Read Double:0.57nJ  
Write: 0.78nJ 
Instruction Cache Idle: 120.34mW   
Hit: 2.24nJ    
Miss: 1.64nJ    
Streaming: 2.72nJ  
Data Cache Idle: 150.42mW  
Snoops: 1.53nJ   
Read Miss: 3.07nJ  
Read Hit: 2.77nJ  
Write Miss: 2.81nJ   
Write Hit 3.50nJ  
AHB bus 
Idle 0.87pJ/cycle 
Busy (data transfer ) 2.6pJ/cycle 
 
Table 3: SDRAM power model. 
Power equation for SDRAM :  
ESDRAM =Σ (Number of operation-i) × Eoperation-i + Pidle × time 
Eoperation=( Inom × Vnom / fnom) × ( V /Vnom ) × ( V /Vnom ) 
Inom ,Vnom , fnom  :  Nominal current, voltage, frequency are given in datasheet 
V : operating voltage 
Idle(background) 72.8mw 
Read 1466pJ 
Write 826pJ 
Refresh 22.5pJ 
ACT 925pJ 
 
MPSoC to collect these signals form signal wires. This module connect with AHB BUS so that the 
operating system can control and access device via bus. Figure 7 illustrates the detail design of this 
distinct hardware module. 
In this module we put in a lot of 32bits counters to record these signals coming from the wires. 
Basically, a counter records a specific incidence, for example, number of add instructions of CPU0. 
These counters are managed by the counter controller. Counter controller receive signals and in-
crease the number of the specific counter. This controller is also responsible for the operation of the 
entire module. The user can set the control register (see Figure 8) to determine the device switches 
and to obtain the required information from counters. The same events of each component share one 
output port and can be chosen by control register. There is a memory mapping circuit between con-
troller and AHB interface. This circuit can do conversion from output ports or control register to 
physical memory address. And then these memory addresses can be used for accessing hardware via 
AHB bus.  
There is a mechanism for data overflowing. When a counter is full, the controller will detect this 
situation and stop the entire device. An interrupt will be send form controller to suspend execution of 
all CPU via AHB BUS. And we design a software routine for resolving this problem and recording 
data. Bus interrupts may occur too frequently. Since events cannot occur twice in one clock, Data in 
clock counter will be the biggest value. So we can only detect clock counter is full or not. After the 
interrupt be resolved, data of all counters are reset. 
C. Implementation of Driver and PAPI 
We implement a Linux device driver for controlling the profiling hardware by operating system. 
This driver uses memory map mechanism to convert the physical memory address defined by hard-
ware to a special memory address defined by the driver. Then the application layer can access or 
control hardware just via this special memory address. There is an interrupt handler in our driver for 
resolving data overflowing interrupt. Figure 9 describes the detail control flow of the driver.  
In normal execution, the driver is responsible for address translating. When interrupts occur, the 
 
Figure 8: Hardware control register. 
 
Figure 9: Operation and control flow of the driver. 
 
In Figure 11, we can simply insert the test program between these APIs for estimation. The re-
sult will contain events in user-space and kernel-space. Our API also ask driver there is interrupt or 
not and integrate the overflow data automatically. As a result, the result also includes overflow data. 
 
效能評估 
In this section, we show the overheads caused by our system. We also present a simple compari-
son of gate-level simulation and our system. Finally we use a case study to demonstrate the use of 
our system for MPSoC software power consumption analysis.  
A. System Overhead 
Table 4 shows some performance overheads for accessing our system. Table 5 shows event count 
overhead when turning on or off the estimation device. We can see that the performance overheads 
for accessing hardware are small. There is less than 1 microsecond delay for obtaining data. And 
Table 4: Performance overhead of the estimation system. 
Operation Cycles Sec (80mhz) 
Pure control 5 0.0625us 
Pure read 20 0.25us 
PAPI start 116 1.45us 
PAPI read 30803 385us 
PAPI stop 30772 384.65us 
PAPI read with irq  45794 572.43us 
PAPI read with irq  45762 572.03us 
Irq handler 321907 4023.84us 
 
Table 5: Hardware turn-on and -off overhead. 
CPU events 
Branch :  2  
Add:  5  
Logic: 1  
Other:  7 
Dep: 1 
Read 2 register:  0 
Read 1 register:  3 
Write register:  5 
Data cache hit:  1 
Data cache miss:  1 
Instruction cache hit: 11 
Bus 
Bus idle cycle :  23 Bus busy cycle:  47 
Memory 
Read: 3 Act : 3 
 
Table 6: Result of verification. 
Component Difference (%) 
CPU 7.85% 
BUS 14.13% 
 
Figure 12: Performance results of Case 1 
We found that there is less energy consumption with performance optimization. But when too 
many optimizations are applied, the execution slows down. The maximum opt Imation eliminate the 
usage of CPU as well. But maximum opt Imation causes long idle state. So if the hardware can pow-
er down the system or there are other energy saving mechanisms, maximum opt Imation may still be 
useful. The code size is the worst case. It consumes much dynamic energy and needs lots of execu-
tion time.  
2) Case 2 
The second case study is choosing an MPSoC software implementation with less energy con-
sumption. We extend the previous algorism to perform different program partition methods. We im-
plement a functional partition version and a parallel partition version of the intra-prediction. Each 
version will have two threads on each processing core. One thread in functional partition version 
send predicted micro-block to a buffer, and another thread get data from buffer and modify them 
 
(a) Static energy of different optimizations. 
 
(b) Dynamic energy of different optimizations 
(CPU0). 
 
(c) Dynamic energy of different optimizations 
(CPU1). 
 
 
(d) Static energy of different multithread software. 
 
 
(e) Dynamic CPU energy of different multithread 
software. 
結論 
We design a power estimation system for MPSoC program on hardware prototyping. This sys-
tem can do system-wide power analysis for different kinds of MPSoC software application. The real-
time behavior or events cause the operating system to be recorded by our system. We also provide a 
widely-used interface for user accessing the information. The evaluation result also shows that our 
system does not waste time for control and access. The estimation speed will almost as fast as hard-
ware emulation speed. Since the design of MPSoC is more complex, FPGA will become more po-
werful for evaluation. By building our system on hardware emulation platform, power bottleneck of 
the software can be found on this design phase. Appropriate application with more power-saving can 
be decided while hardware evaluation complete and the design time can also decrease.  
Since our system recorded events include user-space and kernel-space information, separate 
these events will be more helpful. Power consumption cause by pure application or operation system 
can be found and more precise tuning of the design can be performed. Since our power of bus and 
memory are not very detail, more precise model can be developed for more accurate estimation. 
More power model of other components can be integrated such as DSP, DMA and so on. The detail 
hardware design is composed of signal wires and counters. More flexible architecture should be im-
plemented for measuring different MPSoC hardware design, for example, reconfigurable profiling 
hardware. Kernel-level PAPI can be implemented for power management by operating system. 
Software power analysis tool providing graphical or other convenient interface also need to be im-
plement or integrate for advance usage. 
 
參考文獻 
[1] M. Kistler, M. Perrone, F. Petrini, “Cell Multiprocessor Communication Network: Built for 
Speed,” Micro, IEEE, 2006 
[2] http://www.gaisler.com  
[3] http://www.opencores.org 
[4] Dongkun Shin, Hojun Shim, Yongsoo Joo, Han-Saem Yun, Jihong Kim, and Naehyuck Chang, 
“Energy-Monitoring Tool for Low-Power Embedded Programs,” Design & Test of Computers, 
IEEE, 2002 
[5] ARM Inc., http://www.arm.com/. 
[6] W. Lloyd Bircher and Lizy K. John, “Analysis of Dynamic Power Management on Multi-Core  
Processors” ICS’08, June 7.12, 2008, 
[7] http://www.synopsys.com  
[8] Abhishek Bhattacharjee, Gilberto Contreras and Margaret Martonosi, “Full-System Chip Multi-
processor Power Evaluations Using FPGA-Based Emulation”, ISLPED’08, August 11–13, 2008 
[9] Sérgio J. Filho, Alexandra Aguiar, César A. Marcon, Fabiano P. Hessel, “High-Level Estima-
tion of Execution Time and Energy Consumption for Fast Homogeneous MPSoCs Prototyping”, 
19
th
 Intl Symp on RAPId System Prototyping, 2008 
[10] D. Brooks et al., “Wattch: A Framework for Architectural-level Power Analysis and Optimiza-
tions”, Proc. 27th Intl. Symp. On Computer Architecture, June 2000.  
[11] N. Vijaykrishnan et al., “Energy-driven Integrated Hardware-sotware Optimizations Using 
SimplePower”, Proc. 27th Intl. Symp. on Computer Architecture, 2000. 
[12] Kristian Hildingsson, Tughrul Arslan, and Ahmet T. Erdogan, “Energy Evaluation Methodolo-
gy for Platform Based System-On-Chip Design”, Intl Symp. on VLSI Emerging Trends in VLSI 
Systems Design, 2004 
 1
教師出國報告 
                                             報告繳交日期： 99年 7月 5日 
出差人 金仲達 單位系所 資訊工程系 職稱 教授 
起迄日期 99.6.14~99.6.20 出國地點 美國洛杉磯安訥漢 
出國目的 參與 DAC 2010 
參加會議
名稱 The 47th Design Automation Conference  
發表論文
題目 NTPT: On the End-to-End Traffic Prediction in the On-Chip Networks 
一、 經過 
The Design Automation Conference (DAC) 是國際上電子設計自動化領域最重
要、最受注目的研討會。本會議至今已舉辦到第 47 屆，非常有歷史，也是電子設計
自動化相關領域教授每年都會參加的會議。今年的會議由 6月 13日至 18日在美國洛
杉磯安訥漢會議中心 (Anaheim Convention Center) 舉行。該會議中心與迪斯尼樂園相
鄰，附近非常熱鬧。 
今年的會議一如往年，有許多活動，包括 keynotes, research papers, User Track 
presentations, tutorials, panels, workshops, exhibitor forum, 及許多 colocated events。廠
商的展覽佔地很廣，幾乎主要廠商都有參加，而且用盡各種方法吸引參觀人潮。幾家
台灣大廠如 TSMC、SpringSoft也都有參與。 
大會的主要活動安排在 15日至 17日，每天都有一場 keynote speech，是所有與會
人員參加的，三天的 keynote speech分別為： 
 From Contract to Collaboration: Delivering a New Approach to Foundry 
Speaker: Douglas Grose - GLOBALFOUNDRIES, Sunnyvale, CA 
8:30 AM - 10:15 AM, Tuesday, June 15, 2010 
 Echoes of DACs Past: From Prediction to Realization, and Watts Next? 
Speaker: Bernard Meyerson - IBM Corp., Yorktown Hts., NY 
11:30 AM - 12:30 PM, Wednesday, June 16, 2010  
 Designing the Motorola Droid 
Speaker: Iqbal Arshad - Motorola, Inc., Libertyville, IL 
11:15 AM - 12:30 PM, Thursday, June 17, 2010 
只可惜這幾個演講都比較偏商業性，技術內容較少。 
本人此次在 DAC有一篇論文發表：“NTPT: On the End-to-End Traffic Prediction in 
the On-Chip Networks”，共同的作者包含 Yoshi Shih-Chieh Huang, Kaven Chun-Kai 
Chou, Chung-Ta King, Shau-Yin Tseng。前二位分別為我的博士及碩士學生，最後一位
是工研院的曾紹崟博士。本篇論文是我們和工研院晶片中心的學研合作計畫共同完成
的。我們的論文是在 Session 27: Application-Driven Design, Wednesday, 2:00 PM - 4:00 
PM, June 16, 2010發表。顯示 Network-On-Chip的研究在電子自動化領域正方興未艾，
尤其考慮應用特性來達到優化的效果。論文發表之後，作者還需要用走廊上用海報說
明，並與其他參與者有更多的討論。我們也因此有機會和其他人討論我們的成果，也
和其他同場次的講員有更多的互動及討論。目前看來，一個合適的 NOC模擬/仿真工
國科會補助計畫衍生研發成果推廣資料表
日期:2010/12/28
國科會補助計畫
計畫名稱: 子計畫一：多核心嵌入式系統硬體設計(2/2)
計畫主持人: 金仲達
計畫編號: 98-2220-E-007-019- 學門領域: 晶片科技計畫--整合型學術研究
計畫
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
＊與工研院衍生合作多核心嵌入式系統之設計與程式開發。 
＊與聯發科衍生合作 Android 手機之 power profiling 技術。 
＊已爭取到主辦 2011年 ESWeek 在台北舉行，由金仲達教授及台大資工系郭大
維教授主辦。 
 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
