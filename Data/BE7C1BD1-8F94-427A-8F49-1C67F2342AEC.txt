 1 
一、前言 
隨著網際網路技術的快速發展，網路使用人口亦快速成長，多樣化的網路應用與數量
龐大的使用者成為近年來網際網路發展的特色。在傳統的主從式(client/server)架構中，伺服
器端(server)負責提供服務或分享資源，當客戶端(client)數量增加時，伺服器的負載也隨之
增加。一但客戶端數量超過伺服器能處理的上限時，便會造成服務品質下降，甚至發生服
務中斷的情況，因此主從式架構的延展性(scalability)較差。另外一方面，伺服器容易成為
網路攻擊的目標，降低服務的可用性(availability)。為了解決上述的問題，學者們提出了點
對點(Peer-to-Peer，簡稱 P2P)或另稱為對等式網路架構 [1]、[2]。不同於主從式架構，點對
點網路中的每一個節點(peer)同時兼具服務提供者(伺服器端)與服務使用者(客戶端)的角
色，節點之間互相分享儲存空間、計算能力、網路頻寬與其他資源。很明顯地，點對點網
路在本質上提供較佳的延展性與服務可用性，也帶來其他值得深入研究的議題。在點對點
網路中一項重要的應用為檔案分享，本計畫即針對如何提高檔案分享效率進行研究，並且
提出一個檔案散佈協定，透過節點資訊彙整與減少傳送不必要訊息的方式，縮短節點下載
檔案所需之時間，並且有效減少訊息數量。 
 
二、研究目的 
針對點對點網路中的檔案分享服務而言，我們稱提供完整檔案的節點為種子(seed)，種
子會將一個完整的檔案分割成數個檔案片段(block)，並負責將檔案片段散佈給予需要的節
點。網路上的節點可以從種子獲得需要的檔案片段，但並不限定從種子取得，亦可以從其
他的節點互相交換彼此缺乏的檔案片段。對於下載的節點來說，這樣的分享機制可以同時
從種子與其他節點獲得檔案片段，提高下載檔案的速度，而且不會受限於種子的傳輸頻寬。
因此，只要是存在這個系統上的節點，每一個節點都會與其他節點交換訊息以及傳輸檔案，
每一個節點除了由其他節點下載檔案片段之外，同時還可以上傳檔案片段給予其他的節
點，也就是多點平行下載(mulit-source parallel downloading)的基本概念；讓檔案片段分享與
散佈的速度加快，增加檔案的複本數，進而提高檔案的可用性(file availability)。而這種分
享模式最著名的有 eMule [3] 以及 BitTorrent [4] 等。 
雖然將檔案以片段的方式分享可以加快檔案下載的速度，但因為網路上的節點可以隨
時加入或離開，導致部分檔案片段在網路上的複本數很少，甚至僅有原始的檔案提供者擁
有。一但檔案提供者離開網路或停止分享，將造成網路上的節點再也無法抓取到一個完整
的檔案。此種無法下載完整檔案且降低檔案可用性的現象，即稱為斷頭問題(the last block 
problem)。只要在檔案分享系統上發生斷頭的問題，節點很難取得完整的檔案片段以拼湊成
原始檔案，使得檔案可用性降低，因此提早結束系統的生命週期(lifetime)，同時也會造成
無法下載完整檔案的節點在頻寬上的浪費。為了防止系統的生命週期過早結束，讓每一個
節點皆可以取得完整的檔案，並且讓檔案可以一直分享在網路上，如何降低斷頭問題發生
的機率以及提高檔案可用性是一項重要且值得研究的議題。 
 3 
Tian [6] 為了避免擁有稀有檔案片段且完成度較高的節點取得缺乏的檔案片段即離
線，造成斷頭問題發生，提出了限制擁有較多檔案片段的節點較慢取得的缺乏檔案片段的
方法。然而限制檔案下載完成度比較高的節點拿到想要的檔案片段的作法，會導致節點下
載檔案的平均時間變長；而且強迫這些節點多停留在網路一段時間上是非常不公平，有失
整體的公平性。 
 基於稀有檔案片段優先的檔案散佈演算法 
為了避免斷頭發生，BitTorrent [4] 使用最稀有優先演算法(rarest first algorithm)散佈檔
案片段。此演算法是讓網路上的每一個節點都盡量分享網路上比較少節點擁有的檔案片
段，但是 BitTorrent所採用的最稀有優先機制，只能算是區域性的最稀有優先機制；因為每
一個節點都只知道本身與鄰居之間的區域性群組資訊，以區域不完整的資訊進行最稀有優
先的演算法，並無法達到全局判斷的效果，對稀有檔案的散佈也無法很有效的執行。除此
之外，網路上節點都是動態加入或是離開，若是種子或是已下載完整檔案節點離開系統，
則斷頭的問題將會很容易發生。 
Fan [7] 提出增強檔案可用性(File Availability Enhancement，簡稱 FAE)的方法，將檔案
片段依據稀有度高低值計算出被取得的機率值，稀有度越高被取得機率值越大，所以節點
取得檔案片段的時候，不一定只會獲得最稀有檔案片段，也有可能獲得次稀有檔案片段。
此方法的目的在於降低次稀有檔案片段散佈速度較慢，而發生斷頭問題的機率。FAE 的方
法雖然可以提高檔案的可用性，但同樣地，存在只能取得節點本身以及鄰居的區域性資訊
的缺點，使得節點依然無法得到最有效的資訊，讓檔案片段的散佈接近全局最佳化。 
Chan [8] 指出在點對點網路環境裡，節點之間散佈檔案的速度取決於檔案散佈演算
法，優良的檔案散佈演算法，可以縮短下載者取得完整檔案的時間，反之則會增長，下載
時間增長則容易發生斷頭問題。因此，作者提出了動態權重值最大流量演算法(dynamic 
weight maximum-flow algorithm)。動態權重值最大流量演算法的優點在於能讓每一個節點都
盡其所能的上傳檔案片段給予其他節點，讓整體的上傳效率達到最大，加快檔案下載的速
度。但是此方法假設所有節點會同步運作，而且各節點可以即時取得其他節點的資訊，並
無法應用於實際的網路上。 
 
四、研究方法 
本章將說明本研究所提出之群組式檔案散佈協定 (Cluster-based File Distribution 
Protocol，簡稱 CFDP)。首先，我們將描述本研究的假設條件；接著我們將分別說明 CFDP
的兩項機制：資訊壓縮與訊息抑制機制。 
 5 
(time to live, 簡稱 TTL) 、是否為群組訊息} ，群組內的訊息傳遞只會散佈在群組內，不會
發生群組節點收到不同群組節點的情況；而群組之間的訊息傳遞格式則為{檔案 ID、群組
編號、首領節點 ID 、群組檔案片段位元向量、代表多數數值群聚的數值、代表少數數值
群聚的數值、TTL 、是否為群組訊息} 。群組之間的訊息傳遞方式是透過群組內的節點轉
傳，將首領節點統計的資訊轉送到不同的群組，讓不同的群組能得到其他群組的資訊，以
作為判斷稀有檔案片段的參考依據。接著我們將解釋增加代表多數數值群聚的數值和代表
少數數值群聚的數值的原因及其功能。 
當群組的首領節點收到群內節點的訊息後，必須將所有的資訊彙整成一組群組資訊。
群組資訊一樣是以位元向量表示，但是位元向量只能以 1和 0表示，如果只將群組內最稀
有的檔案片段表示為 0 ，數量最多的檔案片段表是為 1 ，則節點收到某一群組的位元向量
資訊後，無法判斷標示為 0的檔案片段對於整個網路是不是真的最稀有的；而標示為 1的
檔案片段是不是整個網路上數量很多，因此容易造成收到訊息的群組誤判目前稀有的檔案
片段數量。所以如何適當的表示群組內稀有的檔案片段，又不會讓其他群組誤判，是值得
深入探討的問題。 
為了讓位元向量能夠表示更精確的數值，我們可以將首領節點統計的數值分割成為多
數和稀有兩個數值群聚，並從中挑選最大和最小的數值代表兩個數值群組，並將兩個數值
一併告之其他群組。增加兩筆數值能幫助節點判斷稀有的檔案片段，而且不會大幅增加訊
息所佔用頻寬；但是這兩筆數值是代表散播訊息的群組最稀有和數量最多的檔案片段，當
節點總和了許多群組的數值後，亦會發生數值判斷錯誤的情況。如果整個網路上很稀有的
檔案片段因為群組的數值統計因素，被判斷成屬於多數的數值群聚而導致數值變大，容易
使收到群組訊息的節點判斷錯誤，導致節點沒有優先下載稀有檔案片段，使得檔案片段散
佈不平均，增加斷頭發生的機率。 
為了改善數值判斷誤差的問題，我們使用 k平均(k-mean)數值分群演算法[11] 。使用 k
平均演算法可取得一群聚數值中最接近中心的數值，以此特性改善代表多數和稀有數值群
聚的最大值和最小值太過於極端。以一群組的檔案片段的數值為例，假設此組數值為{5, 2, 
3, 3, 4, 1, 4, 1}，從 5個不同數值中隨機挑選出較為中間數值的 2和 3 ，分別代表多數群和
稀有群，再來計算每一個數值與 2和 3的差值。以數值 5為例，5與中心點 2的差值為 3 ；
與中心點 3的差值為 2 ，因此數值 5是屬於多數群。剩下的數值以此類推，最後會得到多
數群的數值群聚為 3、4 和 5 ，而稀有群聚為 1 和 2 。在根據此群聚數值資料將數值為 1
和 2的檔案片段以位元向量 0表示，而剩下的數值則以位元向量 1表示。群組的首領節點
將位元向量加上兩組數值中心點發送給其他群組，而其他群組的節點收到訊息後可以將位
元向量還原為 2和 3 ，再將此數值加總所屬群組的數值，即可計算出哪些檔案片段數值較
少，也就是稀有檔案片段而優先取得。 
利用 k 平均演算法可以減少節點因為數值加總的差異而誤判稀有檔案片段的情形。由
於 k 平均值演算法是將數值經過壓縮，所以與全局檔案片段稀有數值比較起來仍然存在某
種程度的誤差；但與最原始的極大和極小值方法比較起來已經改善許多。 
 7 
群組的檔案片段並不會被判斷為多數群組，所以不容易散播出訊息。反之，當群內α 值與
群外α值設定較低時，經過一段時間後，次稀有的檔案片段因為檔案片段數值變異量不大，
而被群外α 值判斷至非稀有的群組，而此變化會變得有意義需通知其他節點，使得節點容
易散播訊息。但是並非所有α 值設定越高越好，因為若值設定太高，則節點容易送出無意
義的訊息而提高訊息量，無法達到此參數的原始目的，只能小幅縮短檔案下載完成時間。
因此建議的設定值為群內α值可以設定較高，群外α值可以設定較低。根據圖 1至圖 4的
數據來看，群內α值為 0.9 和群外α值為 0.5，或是群內α值為 0.9 和群外α值為 0.7 皆為
不錯的選擇，此設定值可在平均下載完成時間與訊息量之間取得平衡。 
接下來我們比較 CFDP 與其他演算法的效能。根據前述實驗所得出的結果，我們將
CDFP的群內與群外α值分別設為 0.9與 0.5；群內與群外更新時間分別設為 5與 10個週期。
與 CFDP 相比較的演算法包含全域最佳化與區域最稀有優先演算法，結果如圖 5所示。由
於全域最佳化演算法將每一個節點的資訊散佈至其他所有的節點，因此具有最短的平均下
載完成時間，但是也會產生最多數量的訊息。相反的，區域最稀有優先演算法由於限制節
點資訊的傳遞範圍，因此具有最低的訊息數量。CFDP 演算法的平均下載完成時間雖然比
較長，但是能提供接近全域最佳演算法的效能，比區域最稀有優先演算法的下載完成時間
縮短許多。從圖中也可以發現 CFDP 使用群內與群外α值來避免過多的訊息量，但如果不
定期更新(圖中標示為 CFDP 0.9 0.5)將延長平均下載完成時間，甚至比區域最稀有優先演算
法的下載完成時間還長，因此加入資訊定期強制更新是必須的。此外，由圖中也可以看出
資訊定期強制更新(圖中標示為 CFDP 0.9 0.5 5 10)並不會增加太多的訊息量，也能有效縮短
下載平均下載完成時間，雖然時間略長於無α值設定及定期更新的CFDP(圖中標示為CFDF 
original)，但是與區域最稀有優先演算法的下載完成時間相比，CFDP縮短了 40%的下載完
成時間，而且只提高 5%的訊息量。 
我們最後討論第一個節點完成時間與最後一個節點完成時間的差距，此差距越小表示
節點越容易快速取得完成檔案，使得節點不易在尚未下載完成檔案時便離開；如果節點容
易中途終止檔案分享離開網路，容易導致節點一併帶走稀有檔案片段而造成斷頭。從圖 5
可以看出，固定回合更新訊息的 CFDP 演算法，並不會提高此差距，也讓節點不容易中途
放棄下載檔案而離開，也減少斷頭發生的機率。 
表 1 模擬參數表 
網路環境 
節點個數 500 
網路結構 隨機拓樸 (節點平均分支度為4) 
初始種子數量 1 
檔案片段分割數 500 
檔案片段大小 512 KB 
CFDP參數 
群組TTL 3 
群內α值 0.9, 0.7, 0.5 
群外α值 0.7, 0.5, 0.3 
群內定期更新時間 5, 10 
群外定期更新時間 5, 10, 20 
 9 
 
 
 
圖 3不同群內/群外α值的平均下載完成時間與訊息量 (群內 10回合，群外 10回合) 
 
 
 
圖 4不同群內/群外α值的平均下載完成時間與訊息量 (群內 5回合，群外 20回合) 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/10/31
國科會補助計畫
計畫名稱: 點對點網路中檔案分享效率之研究
計畫主持人: 李春良
計畫編號: 99-2221-E-182-053- 學門領域: 計算機網路與網際網路
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
