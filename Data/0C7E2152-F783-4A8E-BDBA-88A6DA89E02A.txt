印刷電路板生產排程決策系統之開發(3/3)
Development of PCB Production Scheduling Decision System (3/3)
計畫編號：NSC 94-2213-E-155-008
執行期限：94 年 8 月 1 日至 95 年 7 月 31 日
主持人：梁韵嘉 副教授 元智大學工業工程與管理系
摘要
過往有關於平行機台排程的文獻，大都是針對單一目標式求取其最佳解，但是實際的生產
環境中應該是多個目標列入考量，而且各目標彼此之間存在相互衝突的現象。因此本研究
分別針對單機以及平行機台多目標排程問題進行研究，單機問題所考慮之目標函數為總加
權延遲時間 (Total Weighted Tardiness)與總加權提前完工時間 (Total Weighted Earliness)，在
平行機台環境下則以最大完工時間(Makespan)與總延遲時間(Total Tardiness)為目標。近年
來，蟻群最佳化演算法已成功應用在 NP-Hard 組合最佳化問題，因此本研究採用蟻群最佳
化演算法(Ant Colony Optimization；ACO)進行求解。本研究提出多種不同蟻群數、不同費
洛蒙更新方式及不同局部搜尋機制的蟻群最佳化演算法分別求解單機以及平行機台多目標
排程問題，期望能得到多組可行的方案，以供管理者執行決策之參考依據。
一、 計畫緣由與目的
許多排程的文獻都是根據單一目標來
求解，但是此舉並不符合現實的製造系統，
生產排程問題不是單一目標就可解決，必須
要以多目標的觀點來衡量整個製程，而多個
目標之間又常相互衝突，舉例來說，為了提
高顧客滿意度，訂單必須在交期日之前完成
並且送交給顧客，但是提早完工卻可能造成
過多的庫存導致存貨成本提高，如何在不延
遲交貨及減少因為提前完工所增加的額外
存貨成本兩個決策中取得取得一平衡點，使
得整各生產系統能得到最大的效益，即為本
研究多目標規劃之目的。
二、 文獻探討
Negar 等人於 1995 年將雙目標與多目
標排程問題的文獻發展整理出來，並依照機
台的結構與特性將其分類：若依問題性質來
看，如果訂單在機器上的加工時間為固定，
這 樣 的 排 程 問 題 則 具 有 確 定 性
(Deterministic)；若是訂單在機器上的加工時
間不固定，可能依某種機率分配，則稱之為
具有隨機性(Stochastic)；若是訂單的數目以
及作業內容均為固定且已知，此種排程問題
為靜態(Static)排程問題；若是訂單的數目或
作業內容會隨時間變動而改變，則為動態
(Dynamic)排程問題。
Ruiz-Torres 等人於 1997 年提出一模擬
退火演算法求解平行機台平均流程時間與
延遲工件數最小化之問題。作者將 SA 與鄰
域搜尋法 ( neighborhood search；NS ) 做比
較，並且改變其局部搜尋 (local search) 為
快速式 ( quick ) 或漸進式 ( gradual )，使其
變為四種方法 (G-NS、Q-NS、G-SA 與 Q-SA)
做比較，結果發現 SA 的表現優於 NS，但
是當到期日 ( due date ) 越緊縮時，SA 與
NS 之間的差異則越小。
Almeida與 Centeno 於 1998 年針對單一








0
)1(
,
,])()()[(maxarg
qqV
qq
v
o
EN
il
TD
ililUl
  (1)
V 之值由轉換機率





Ul
EN
il
TD
ilil
EN
ij
TD
ijij
ijP 



)1(
)1(
)()()(
)()()(
來決定
值為一變動的數， = (第 s 個排序 /
總螞蟻數 m)，藉由的改變來控制螞蟻搜
尋解時的方向；假設單一蟻群的螞蟻數為
20 隻，第一隻螞蟻的值為 201 ，第二隻螞
蟻的值為 202 ，以此類推。所有螞蟻均建
構完排序之後，從中各別選出總加權延遲時
間、總加權提前完工時間最好的排序，以這
兩個排序分別做局部搜尋，在局部搜尋的過
程中將所求出的每個排序與其他已求出的
排序以兩個目標值做比較，求解品質較佳者
留下做為此蟻群的不可支配解集合，再以不
可支配解集合做全域費洛蒙更新。單一蟻群
之蟻群演算法的全域費洛蒙更新方式是將
所有最終之不可支配解集合都用來做全域
費洛蒙更新，
 方法 2 (M2)：單蟻群三區局部搜尋法
在狀態轉換法則與方法 1 相同，不同點
在於方法 2 除了找出總加權延遲時間、總
加權提前完工時間最好的排序外，另外再
以一正規化加權公式所計算出的目標值來
選出另一最佳排序，因所計算出的兩個目
標值，很明顯的差距過大，為了平衡兩個
目標式的影響性，所以以正規化加權公式
來計算，值越小越好，並以選出的三個排
序分別做局部搜尋。之後再利用不可支配
解集合進行單一蟻群的全域費洛蒙更新，
全域費洛蒙更新方式與方法 1 相同，得到
以不可支配解集合所建立之柏拉圖最佳前
緣。
 方法 3 (M3)：三蟻群雙區局部搜尋 -
重疊全域更新法
依照這兩個目標式分別建立兩個蟻
群，各自具有獨立之費洛蒙矩陣，並各自對
不同的目標做路徑的建構，另外新增第三個
蟻群，用來做為前兩個蟻群之間溝通的橋
樑，第三個蟻群在狀態轉換法則上考慮所有
目標式的貪婪法則(值)，並使用三個蟻群
所建構出的最終不可支配解集合利用重疊
的全域費洛蒙更新方式，以中間 50%的不可
支配解集合來更新，期能求得柏拉圖最佳前
緣中間部份的解。
前兩個蟻群的狀態轉換法則均為使用
針對負責的主要目標之貪婪法則 (值)，公
式如下，以總加權延遲時間為例：





 
0
1
,
,])()[(maxarg
qqV
qq
v
o
TD
ililUl

(2)
V 之值由轉換機率 


Ul
TD
ilil
TD
ijij
ijP 



)()(
)()(
1
1
來決
定
總加權提前完工時間：





 
0
2
,
,])()[(maxarg
qqV
qq
v
o
EN
ililUl

(3)
V 之值由轉換機率 


Ul
EN
ilil
EN
ijij
ijP 



)()(
)()(
2
2
決定
第三個蟻群則是同時考慮到所有目標式的
貪婪法則 (值)：









0
)1(3
,
,])()()[(maxarg
qqV
qq
v
o
EN
il
TD
ililUl
  (4)
V 之值由轉換機率





Ul
EN
il
TD
ilil
EN
ij
TD
ijij
ijP 



)1(3
)1(3
)()()(
)()()(
在第三個蟻群的狀態轉換法則中，值
為一變動的數，假設第三個蟻群的螞蟻數為
20 隻，第一隻螞蟻的值為 201 ，第二隻螞
蟻的值為 202 ，以此類推。前兩個蟻群建
構出的所有排序，從第一與第二個蟻群中分
別選出總加權延遲時間、總加權提前完工時
間最好排序做局部搜尋，將第一、第二個蟻
群的不可支配解集合與第三群蟻群自行建
構出的所有路徑，經過相互比較後，記錄最
後不可支配解集合的結果，並利用不可支配
ACO-III 亦為一兩階段式方法，但是以
五群蟻群求解多目標平行機台問題，其方法
與 3.1 節中 M6 方法雷同。
四、 模型測試與分析
4.1單一機台排程問題之結果分析
ACO 中所要考慮到的參數非常多，像
是螞蟻數(m)、狀態轉換法則中所預設之參
數值( 0q )、費洛蒙殘留比例()、及等。
在 Liang [2001]博士論文中使用的參數=
1，= 2，= 0.9， 0q = 0.9，用來求解單機
總加權延遲時間的問題上表現良好，因此本
研究將參考 Liang [65]博士論文中使用的參
數來做為蟻群演算法的參數設定。另外在 0
值的設定，之前的初步研究發現， 0值對於
蟻群演算法的結果並無太大影響，因此本研
究將 0值設為一極小值， 0 = 0.00001。程
式停止條件為蟻群演算法總共搜尋 25 萬個
解即停止整個程式，每一測試例題程式執行
次數為 10 次，最終不可支配解為程式執行
10 次的結果相互比較之後所取得。
本研究的測試例題是依據國際測試題
庫 (OR-Library, http://people.brunel.ac.uk/
~mastjjb/jeb/info.html)所提供的排程題型。
由於 OR- Library 上關於單機排程問題僅提
供總加權延遲時間方面的測試例題，並未提
供總加權提前完工時間的相關題庫，故本研
究將統一使用總加權延遲時間的測試例題
來分別針對兩個目標式求解。此測試題庫的
例題產生方式是每個工件的交期 (due date)
為 隨 機 產 生 的 均 等 分 配 ， 公 式 為
)]
2
1(),
2
1([
RDD
TFP
RDD
TFP  ，其中
RDD 代表到期時間區域，TF 表示延遲因
子，在 RDD 越大時，其到期時間之範圍將
越大；TF 越大，其到期時間越小，亦即延
遲工作的情形越容易發生；P 為所有工件處
理時間之和，各工件處理時間 p，由介於 1
到 100 之均等分配所產生，權重 w 亦由均等
分配所產生，其範圍介於 1 到 10 之間。本
測試例題使用RDD (related range of due date)
及 TF (Tardiness Factor) 的值均為 0.2、0.6
及 1.0，因此 RDD 與 TF 值的組合共有 9 種，
而每一組 RDD 與 TF 值的組合產生 5 組測
試例題，亦即共產生 45 組測試例題，每組
測試例題的工件數為 100。本研究以 Visual
C++撰寫程式，執行環境為 Pentium 4
1.6GHz，RAM 為 256MB。
研究中發現 M1 及 M3 較差， 因此表 1
中將僅以其餘四種方法進行比較。
在 TF 值固定為 0.2 時，當 RDD 值增
加，求解效果為方法 6 最佳；隨著 RDD 值
越來越大，方法 5 的表現也較方法 4 來得
好。當 TF = 1.0 時，方法 2 的求解品質是四
種方法中最差的，而隨著 RDD 值越大時方
法 6 的求解結果亦相當穩定。若將方法 4 與
方法 5 相比較，方法 5 在 RDD = 0.2 時表現
最好，而 RDD 值增加，方法 4 的表現也隨
著變好。若以 RDD 值固定為 0.2、0.6、1.0，
TF 值增加，方法 2 表現隨著 TF 值越大而越
差，方法 4 的求解效果隨 TF 值增加而越來
越好；方法 5 與方法 6 的求解品質均較為穩
定，因此，蟻群數越多，求解品質越穩定，
收斂速度也較快。整體而言，使用五蟻群的
方法 6 之求解結果是較為穩定。
從表 1 之 E 值與 RD1 指標亦可看出，若
以 RDD 值固定為 0.2、0.6、1.0，TF 值增加，
方法 2 的 E 值與 RD1 指標在同組測試例題
中，求解品質隨著 TF 值越大而越差。而方
法 6 平均表現的結果是四種演算法中最佳
的，而方法 4 與方法 5 則是不相上下。雖方
法 6 所產生的不可支配解集合在九組測試
例題中不是最多的，但卻在大部份例題的最
終不可支配解集合中佔最大比例，且求解品
質優於其他演算法。
在使用不同的全域費洛蒙更新方式
上，分別使用重疊全域更新法(M4)或是端點
全域更新法(M5)的求解效果相差不大，若是
使用同時考慮重疊與端點全域更新的混合
式方法(M6)，以各區域中所留下之不可支配
解來做費洛蒙矩陣濃度的更新，讓好的排序
上之費洛蒙濃度能增加，以提高該排序下次
被螞蟻選取的機率，其效果較重疊全域更新
法及端點全域更新法佳。
加工順序若有所異動，各工件就需要重新指
派至機台加工，導致其求解時間較 ACO-I
長。ACO-III 的求解效果沒有 ACO-I 好，由
於是以搜尋解個數達到一百萬個為停止條
件，ACO-III 在演算過程中，五群蟻群均要
找出最好的一組加工順序進行局部搜尋，因
此執行了過多沒有幫助改善求解品質的局
部搜尋，導致求解的擴散性佳但是收斂性卻
不夠好。而 ACO-II 僅在求解的擴散性上優
於 ACO-I 與 ACI-III，但是求解品質與執行
時間均劣於前兩種演算法。
4.2.2實例驗證及與其它演算法之比較
根據 4.2.1 節的結果顯示 ACO-I 與
ACO-III 整體求解效果優於 ACO-II，而
ACO-I 與 ACO-III 的表現相當，因此本節將
ACO-I 與 ACO-III 方法與 sub-population
genetic algorithm ( SPGA ) [林昆霖，2005]、
multi-objective genetic algorithm (MOGA)
[Fonseca 和 Fleming，1993]、non-dominated
sorting genetic algorithm-II (NSGA-II)
[Srinivas 和 Deb，1994]與 strength Pareto
evolutionary algorithm-II (SPEA-II) 等演算
法進行比較，並採用一實際案例作為測試的
例題，主要探討印刷電路板鑽孔作業之生產
排程，相關資料取自國內某印刷電路板廠之
生產現場，其規模設定有 3種類型（工件數
x 機台數）：(35 x 10)、(50 x 15)以及(65
x 18)；各演算法求解不同問題規模之表現
將於下面作更進一步分析：
 問題規模：35 工件於 10 台機台
表 3 為各演算法求解 35 工件於 10 台機
台問題的結果，從表中可以看出 SPGA 的
RD1 表現優於 ACO-I 與 ACO-III，表現次優
者為 ACO-III，至於 ACO-I、NSGA-II 與
SPEA-II，三者的平均 RD1 值相近，NSGA-II
與 SPEA-II 的最小 RD1 比 ACO-I 好，但是其
最大值卻高於 ACO-I，表示此兩種演算法的
求解品質沒有 ACO-I 穩定。表現最差的則
是 MOGA。一般而言，ACO-I 的非支配解
非常貼近參考柏拉圖前緣，但是多集中在最
大完工時間為2300之前，此情形影響 RD1 的
表現，而 ACO-III 的收斂性與 ACO-I 相近，
但是非支配解較為擴散，也因此計算
ACO-III 的 RD1 值會比 ACO-I 好。執行時間
以 ACO-IIII 最快，ACO-I 所需要時間則比
ACO-III 稍微慢一點，SPEA-II 則是最耗時
之演算法。
表 3 各演算法之結果比較（35 工件於 10 台
機台）
RD1
演算法
Min. Avg. Max.
非支
配解
個數
執行時間
（秒）
SPGA 3.6 5.8 9.3 29.9 22.6
MOGA 8.1 16.4 29.8 20.5 14.3
NSGA-II 5.2 11.8 22.2 26.7 30.9
SPEA-II 4.8 10.4 22.5 26.8 84.6
ACO-I 6.7 10.4 16.4 9.5 12.7
ACO-III 6.0 9.0 14.4 17.2 11.9
 問題規模：50 工件於 15 台機台
表 4 則為各演算法求解 50 工件於 15 台
機台問題之表現。從表中可以看出 ACO-I
的最小及平均 RD1 值皆低於 SPGA，僅在最
大的 RD1 值表現略高於 SPGA，而執行時間
則是六種演算法中最快的，整體來說 ACO-I
的求解效果是六種演算法表現最好的；其次
為 SPGA 與 SPEA-II，SPEA-II 的最小 RD1 值
低於 SPGA，而平均與最大 RD1 值卻高於
SPGA，表示 SPGA 求解品質比 SPEA-II 穩
定；隨著問題規模增大，問題難度隨之增
加，此題中可以看出 ACO-III 的收斂效果並
不好，以 RD1 值來衡量各演算法的求解品質
時，ACO-III 的表現是最差的，但是其執行
時間則與 ACO-I 一樣快。此問題規模執行
時間以 SPEA-II 最慢。
 問題規模：65 工件於 18 台機台
各演算法求解 65工件於 18台機台問題
的表現如表 5 所示。表中顯示不論是 RD1 之
最小值、平均值及最大值， ACO-I 的表現
均明顯優於其他的演算法，表現其次者為
SPGA 與 SPEA-II，但是 SPGA 的執行時間
顯著的低於 NSGA-II。ACO-III、NSGA-II
與 MOGA 表現則略遜一籌，但是 NSGA-II
