 2
/
Fast Converter Algorithm and Hardware Design for  
Double Base Number System  
NSC94 2215 E 224 004  
94 08 01 95 07 31
     
I
DBNS (Double-Base Number 
System) 2 3
Binary-to-DBNS
4
(Radix-4)
Binary-to-DBNS
100
Binary-to-DBNS 
Low-Power 
VLSI
: 
II
DBNS (Double-Base Number 
System) is a new number representation 
which can be used for low-power and 
high-speed logic system. This project 
presents a fast Binary-to-DBNS 
conversion approach and hardware 
design. In DBNS system, the input 
binary number is firstly converted into 
Radix-4 form. Then the accurate DBNS 
representation is obtained by simple and 
fast logic simplification. Compared to 
the exhaustive search approach which is 
the only one conversion method up to 
now, our proposed algorithm can 
achieve more 100 times faster than the 
exhaustive method. For hardware design, 
the proposed converter can be 
implemented by simple logic circuit 
instead of large LUT tables. This makes 
that the proposed converter is suitable to 
efficient VLSI chip implementation.  
III
(Non-zero term)
[1-3] 1997 V. S. Dimitrov
[4]
2 3 x
 4
(Step(1) Step(2)
Step(3)) 
121
0121
020
3243
3242
3242
ii
ii
ii
(3) Radix-4 to DBNS
78(D) 
2630+2231+2130 = 64 + 12 
+ 2 =78(D) (4) 
Example  78(D) = 1   00   11   10(B)  =  01   00   11   10
01         00         11         10
Step(1) 43 42 41 40
Step(2) 20 31unable
Step(3 )
06
30
32
42
12
11
32
43
01
01
32
42
21
(4) Radix-4 to DBNS
DBNS
[4] (7) (8) (1)
(2)
DBNS
2i3j+1=2i3j+2i+13j               (7) 
2i3j+4=2i3j+2i+43j+2i+63j          (8) 
                         .1,0,     
1,,1  ,1,   
: Rule(1)
joddifor
ijiIANDjiIjiI ZZz 
1,0,......2,1,0     ),,6(  
),4(   ),()4,(
:Rule(2)
jniforjiI
ANDjiIANDjiIjiI
Z
ZZZ
(6) 3 0
1 (8) rule(2)
3
0,1,4,5 (Simplification 
for Nonzero Term): 
Step 1:
rule(2)
rule(2) 3
Step 3 2
Step 2:
rule(1) rule(1) 
3 3
Step 3: DBNS 
Step 4: Step 1
(5) (6)
Initial 4-BASE  
DBNS 
Transformatio
n
Condition 
checked 
circuit of 
rule(2)
Condition 
checked 
circuit of 
rule(1)
Check(1)
Weight
adjust
Controller
Input[7...0
]
3_index[0]
Input[7...4][1...0]Input[3...0]
3_index adjust
Circuit
Of rule(1)
Check(2
)
3_index 
adjust
Circuit
Of rule(2)
Register
(8bit)
unable[1]
3_inde
x
unable[3][2]
3_inde
x3_index[0]3_index[1][2
]
unable[3][2]
unable[1]
unable[0]
Input[0]
Data_reques
tData_achiev
e
Transfer 
end
accept 
check
Data_input
unable[3...0]
2
[3...0]3_index[3...
0]
[n...0]2_index[3...0
] 
(5) Block Diagram of Serial Input  
Processing 
(6) Block Diagram of Parallel Input   
Processing 
1
 6
[1] A. Borodin, P. Tiwari, ¨ On t he
Decidability of Sparse Univariate 
Polynomial Interpolation, Compute. 
Complexity, 1 pp. 67-90, 1991. 
[2] P. Montgomery, A Survey of 
Modern Integer Factorization 
Algorithms , ¨ C WI Quart erl y, vol. 7,
no. 4 , pp. 337 -366 , 1994. 
[3] M. D. Ercegovac, T. Lang, J. G. 
Nash, and L. P. Chow, ¨ An
Area-Time Efficient Binary 
Divider, ¨ I EEE I nt er nati onal Conf.
Computer Design, pp. 645 648 Rye 
Brook, N.Y., Oct 1987. 
[4] V. S. Dimitrov, G. A. Jullien and W. 
C. Miller, ¨ Theor y and Appli cati ons
of the Double-Base Number 
System, ¨ I EEE Trans. Co mput ers,
vol. 48, no. 10, pp. 1098-1106, Oct. 
1999. 
[5] J. Eskritt, R. Muscedere, G. A. 
Jullien, V. S. Dimitrov, W. C. 
Miller, A 2-Digit DBNS filter 
architecture ¨ IEEE Workshop on 
Signal Processing Systems, pp. 
447  456, Oct. 2000. 
[6] V. S. Dimitrov, G. A. Jullien and W. 
C. Miller, § An Al gorthm for 
Modular Exponentiation, § I nf or m.
Process. Lett. 66, pp. 155-159, 
1998. 
[7] , , , , 
, 2005
, p. O18-6, Nov. 2005. 
[8] C. C. Lin, M. H. Sheu, H. K. Chiang, 
C. S. Liaw, C. T. Tsai, § An Effi ci ent
Video De-interlacing with Scene 
Change Detection, ¨ I EEE5th Int. 
Conf. on Information, 
Communications and Signal 
Processing, pp. 36 - 40, Dec. 2005. 
[9] C. C. Lin, M. H. Sheu, H. K. Chiang 
and C. Liaw, § Moti on Adapti ve
De-interlacing with Horizontal and 
Vertical Motions Detection,  The 6th 
Pacific Rim Conf. on Multimedia, 
pp. 291 302, Nov. 13-16, 2005.  
(a) Serial Input Converter Layout  
(b) Parallel Input Converter Layout 
8 Radix-4 to DBNS 
 
(3) DBNS Chip data analysis  
Area( m2) Power(mw) f(MHz)
16bits 
Parallel 48729.17 1.0089 125 
Serial 16006.49 0.3745 125 
32bits 
Parallel 50446.66 1.1057 125 
Serial 16952.64 0.3902 125 
64bits 
Parallel 55581.10 1.1900 125 
Serial 17682.19 0.4595 125 
128bits 
Parallel 59874.00 1.2882 125 
Serial 19731.14 0.4993 125 
256bits 
Parallel 65008.44 1.3886 125 
Serial 20647.29 0.5215 125 
512bits 
Parallel 69562.00 1.4764 125 
Serial 22872.90 0.5525 125 
1024bits 
Parallel 74309.76 1.5819 125 
Serial 25643.78 0.6060 125 
 8
 10
 12
happen in video sequences, it is highly possible to 
retrieve wrong messages from the interfield 
information and produce artifacts effect or 
blurring effect.  
In this paper, an efficient video de-interlacing 
technique from interfield information with scene 
change detection [8] and its VLSI architecture are 
presented. Our proposed algorithm provides a 
simple hardware architecture design, low 
computation cost and being easy to implement in 
real-time hardware. The core consists of scene 
change detection, background index, and 
intrafield interpolation, 2D-ELA [2].  
II. THE PROPOSED ALGORITHM 
An efficient motion adaptive de-interlacing 
technique from interfield information is presented. 
The first stage of de-interlacing is scene change 
detection, which is to ensure that the interfield 
information can be used correctly. The interfield 
information is invalid if scene change detected; 
then all interpolated pixels are taken as intrafield 
de-interlacing interpolation. If there is no scene 
change, then the motion adaptive de-interlacing 
procedure proceeds. Moreover, in order to 
improve the stability of interfield information, the 
situation is observed for a period of time to assure 
it is non-motion; afterward, it is classified as a 
background area and proceeds to interfield 
interpolation. 
A. Scene Change Detection 
Within the same shot, a scene change may 
cause a frame to differ from its consecutive frame 
due to one or more factors, such as camera 
movement, focal length change, large object 
movement, and scene fade. To detect a scene 
change between two consecutive frames, a 
dissimilarity measure between two frames must 
be defined, which is mainly based on pixel-based 
method [12,13] and histogram-based method [12]. 
We explored several types of pixel-based and 
histogram-based algorithms and find their 
dissimilarity measures. We found that the 
pixel-based method provides a simple measure 
and low cost hardware implementation for scene 
change detection. 
We now start from the first stage, scene 
change detection, of our method. Let Fn-1(x,y), 
Fn(x,y) and Fn+1(x,y) denote as the previous, 
current, and the forward field, respectively, where 
the two-dimensional spatial indices (x,y) are 
x=1, ,W and y=1, ,H, and W and H are the 
width and height of the frame, respectively. The 
absolute pixel difference value of two adjacent 
even or odd fields, FDn, is obtained from the 
absolute difference value between Fn+1 and Fn-1 
fields. Thus, FDn, is defined as 
)()(),( 11 yx,F-yx,FyxFD -nnn ,                    
(1) 
FDn is used to define the similarity pixels. The 
Similarity Pixels Statistics Value, CNTn, for frame 
number n is obtained by  
otherwise,    CNT
Th  y)(x,FD     1 CNT 
CNT
n
nn
n
0
if
         
(2) 
Where a threshold parameter Th needs to be set in 
advance. Eq. (2) is used to detect the condition of 
scene change between two adjacent even or odd 
fields Fn and Fn-2. The value of CNTn will present 
a value less than half of total pixels of a field 
when scene changes. Percentage of non-motion 
pixels versus two adjacent even or odd fields on 
some video sequences are shown in Fig. 1. We 
find that the percentage of non-motion pixels is 
less than 50% while scene change in difference 
video sequences. 
B. The Proposed De-interlacing Method  
The proposed motion adaptive de-interlacing 
method is to decompose videos into foreground 
and background. The absolute pixel difference 
value of two adjacent even or odd fields is set for 
less than a threshold as non-motion pixels, and 
the previous field and next field are examined for 
a period of time. If the values of pixels remain 
unchanged, then we would assume it as 
background, and the remaining pixels are 
classified as foreground.  
The FDn defined in (1) is also used to define 
the non-motion pixels. The Field Difference Index, 
FDIn, for frame number n is obtained by 
 14
COMP1 to examine whether it is greater than or 
equal to Th. The output of the COMP1 controls 
the status of increment, hold, or clear of two 
counters, FDIn_Reg and CNTn_Reg [14].  
Summing the similarity pixels of all field, the 
value of Count_Reg is used to determine whether 
scene changed. Scene change occurs between Fn 
and Fn-2 if the value of CNTn_Reg is less than a 
half of pixels of a field in COMP2. In this case, 
FDIn is clear to zero. The data of FDIn is provided 
by memory. The contents of the 2-bit shift-left 
register SC_Reg shown in Fig. 5 are set to High 
when the value of CNTn_Reg is less than a half of 
total pixels in a field. According this result the 
multiplexer will read 0 in the next field; otherwise, 
the two-bit register will shift left one bit and 
insert 0 in the least significant bit if the value of 
CNTn_Reg is greater than or equal to a half of 
total pixels in a field. 
B. The architecture of 2D-ELA  
The architecture of 2D-ELA, shown in Fig. 6, 
includes data input FIFO, the circuits of absolute 
difference, the minimum value sorting circuit and 
the mean value sorting circuit [15]. The field 
input FIFO includes 8-bit registers a, b, , f, p, 
q, , t, and u. In the operation of 2D-ELA, the 
average of two pixels with the minimum 
directional difference have to be obtained as (5); 
then the mean value can be found according (4). 
The operation results of 2D-ELA are obtained 
after two sorting processes. It would be 
impractical if the hardware design in this way 
because of the higher hardware cost and the 
longer operation time. In order to decrease the 
operation time, it calculates the average of two 
pixels with the minimum directional difference, 
the mean value, and sorts the medium value 
simultaneously. The circuit of absolute difference 
calculates the directional difference. The absolute 
difference is inputted to the comparator; then the 
directional difference in each direction is obtained 
by subtracting small number from large number. 
The comparator is located in front of the circuit of 
absolute difference and as a result, it reduces a 
stage of comparison while sorting medium values. 
Thus, it reduces the cost of hardware. The data 
format of the comparator in the circuit of sorting 
the minimum values is defined that the upper 
three bits are decoded number and the other eight 
bits are the directional difference. All the 
directional differences are inputted to the 
minimum value sorting circuit. While the 
minimum directional difference is found then the 
decoded number will be sent to the multiplexer 
MUX5 to find the average of two pixels with 
minimum directional difference.  
The frame boundary interpolation hardware 
is used if the interpolation data is frame boundary 
while 2D-ELA is proceeding. The operation is 
similar to the normal process for interpolation. 
The best interpolation results are obtained 
through the circuit of the absolute different value, 
the sorting circuit of minimum value, and the 
sorting circuit of mid-value. Finally, the operation 
result of 2D-ELA is determined by the 
multiplexer MUX4, shown in Fig. 6, to select the 
interpolation data from the frame boundary 
interpolation hardware or from the normal 
processing hardware.  
Figure 3.  The timing diagram of scene change detection and interpolation 
Figure 4.  The block diagram of the proposed hardware architecture 
 16
Figure 6.  The architecture of 2D-ELA 
TABLE I.  PSNR OF TEST VIDEO SEQUENCES WITH TYPES OF SCENE 
CHANGES  
PSNR (dB) 
Video Sequence 
Typical 
scene 
change 
Frame 
number Chen[6] Proposed 
130 33.56 27.50 
131 15.54 26.33 Table Tennis  
camera 
movement 
132 34.77 35.67 
25 41.67 41.09 
26 16.70 39.91 The Matrix focal length 
change 27 20.87 42.67 
311 24.74 26.74 
312 24.10 27.18 
World Rally 
Championship 
part2 
large object 
movement 313 24.22 30.90 
637 30.47 29.76 
638 19.83 29.86 
World Rally 
Championship 
part2  
scene fade  
639 28.41 32.26 
TABLE II.  AVERAGE PSNR OF THE VARIOUS DE-INTERLACING 
METHODS ON SOME VIDEO SEQUENCES AVERAGE 
Average PSNR (dB) 
           
Method  
Video Sequence 
Number 
of 
frame ELA Chen[6] Proposed 
Akiyo 300 35.00 47.58 47.97 
Coastguard 300 26.23 32.30 33.56 
Hall Monitor 325 27.06 42.88 44.51 
Mother and 
Daughter 300 33.79 44.34 45.78 
Weather 300 24.21 37.85 39.35 
Table Tennis 300 26.4 31.56 33.94 
News 300 27.55 39.08 41.21 
Silent 450 31.58 38.88 42.13 
World Rally 
Championship part1 960 28.93 32.21 33.44 
World Rally 
Championship part2 919 26.06 29.01 30.91 
The Matrix 67 39.52 40.27 43.39 
(a)    
(b)    
(c) 
Figure 7.  Camera movement on Table Tennis (a)Original (b)Chen[6] 
(c)Proposed 
