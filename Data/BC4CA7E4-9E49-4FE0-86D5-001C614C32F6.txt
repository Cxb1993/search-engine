2 
 
點周期性地交換彼此擁有哪些資料的訊息，並依此向對方發出資料的請求。亦
可使用 FEC（Forward Error Correction）來使資料重複的機率降至極低 [4]；或
者採用Network Coding [6]方式，允許中途的節點也再次進行編碼，如 rStream [5]。
Gossip-based 協定使得節點可以同時從多個來源節點獲得資料，並同時向多個
節點送出資料，相較於樹狀結構，這更加提升了資源有效利用度與負擔平衡度，
且這樣的覆蓋式結構更加具有強韌性。然而，依選擇合作同伴方式的不同，服
務品質與時間延遲可能無法有好的保證，如 Fig. 1所示，Pull-based的資料傳遞
方式使得每一步的資料轉送需要經過數個等待與控制訊息交換的過程，使得時
間延遲相對於 Push-based協定要大。 
 
 
Fig. 1: Delay of a packet transmitted in one hop using pure pull method 
 
在上述的研究之中，並無任何一個研究是有關如何提供一個有效的機制用以改進
當網路環境不好時如何改進使用之收訊品質。具體上來說，本計畫將著重於設計
一個優先權封包排班的機制用以改善使用者之視訊品質。 
 
 
 
 
 
 
 
 
4 
 
研究方法: 
  給定重要的視訊封包較高的優先權，這是一個相當直覺的方式，用以提供非對
稱性資料的保護機制。然而此研究發現，不同於過去傳統 client-server streaming
的方式，Server擁有所有的 video content，所以這種直覺的方式可以直接改善使
用者的收訊品質。然而，在 P2P streaming直接給定重要的封包較大的優先權將
導致系統上的 content bottleneck。也就使說，即使使用者周遭的頻寬充足，但是
由於 content 不足的窘境。這是起因於，大家太過自私，每個人都希望最佳化自
己的收訊品質，因此系統中將充斥著相似比較重要的 video content，所以較不重
要的 content 就會大家彼此看不到。這將大大的降低系統中可用頻寬的使用率。
本計畫將此研究的結果逐一的發表在以下的 conference: 
ICME’09 (oral), SIGCOMM’09 (poster), ICME’11 (submitted) and 
ICIP’11(submitted)。簡述如下: 
 
ICME’09 (oral):在小規模的使用者數下，探討優先權封包的好處。 
SIGCOMM’09 (poster):首次確定優先權封包將帶來 content bottleneck 的問題。 
ICME’11 (submitted):建立數學模型以了解 content bottleneck。 
ICIP’11(submitted):實際設計一個 strategy-switch scheduling用以紓緩 content 
bottleneck problem。 
 
 
 
 
 
 
 
 
 
 
 
functionality is to store the video chunks to be requested by other 
peers and to provide the media player with video chunks. Upon 
reception of a chunk, each received chunk will be stored in the 
streaming buffer. If the sequence number of the received chunk is 
the newest one, the streaming buffer window and the display 
pointer, at a distance Δ from the newest received chunk as depicted 
in Fig. 1, will slide forward simultaneously. Then, video chunks 
before display pointer are delivered to the media player for play 
out. The second one is the request window, which is used to keep 
synchronization with supplying neighbors. The request window 
will slide forward when the newest chunk is notified by the 
exchange of BM from its neighbors. Accordingly, the desired 
chunks2 in its request window will be subscribed from neighbors 
every request period.  
 
 
 
Fig. 1. Streaming Buffer, Request Window and Display Pointer 
 
3. IMPROVED MIN-COST FLOW SCHEDULER 
 
3.1. Min-Cost Flow Scheduler 
 
In this subsection, we give a brief review of the min-cost flow 
scheduler in [6]. As [1] shown, a chunk with less supplying peers 
is more difficult to meet the playback deadline. Hence, most 
existing scheduling algorithms [3][5][6] take the “rarest-first” 
strategy into their scheduling algorithm. The basic idea of the 
distributed min-cost flow scheduler in [7][8] is to maximize the 
rarity sum of the desired chunks in the request window so as to 
further increase the overall throughput. However, the rarity sum 
has to be subject to the data availability of surrounding supplying 
peers, maximum available bandwidth each supplying peer can 
provide, and itself download bandwidth. Accordingly, the schedule 
problem can be model as follows: 
ܯܽݔ݅݉݅ݖ݁ ෍ ܴ൫ߨ௜,௞൯
గ೔,ೖא௽೔
ೃಶೂ
 
subject to 
ሺaሻ  ߎ௜
ோாொ ൌራ ܳ௝,௜
௝אே஻ோ೔
, ܳ௠,௜ځܳ௡,௜ ൌ ׎, ׊݉, ݊ א ܰܤܴ௜,݉ ് ݊ 
ሺbሻหߎ௜
ோாொห ൑ ܫ௜ 
ሺcሻ ห ܳ௝,௜ห ൑ ܯܤ ௝ܹ,௜, ׊݆ א ܰܤܴ௜ 
ሺdሻ ܳ௝,௜ ك ܤ௝, ׊݆ א ܰܤܴ௜                                                          (1) 
, where ߨ௜,௞ is the desired chunks in the request window of peer 
i ; ܴሺ·ሻ is the rarity function of video chunk;  ߎ௜
ோாொ denotes the set 
of chunks to be requested by peer i; ܳ௝,௜, ܤ௝ and ܰܤܴ௜ denote the 
set of chunks peer  ݅  requests from peer  ݆ , the set of chunks 
available in the streaming buffer of peer ݆, and the set of neighbors 
of peer  ݅ , respectively;  ܫ௜ ,   ௝ܱ , and  ܯܤ ௝ܹ,௜  are the inbound 
                                                 
2 Chunks, which have been requested but not received, could be regard as desired 
chunks if the elapsed time is more than a threshold  
bandwidth of peer ݅, the outbound bandwidth of peer ݆, and the 
maximum capability the supplying peer j can provide to the 
requesting peer i, respectively.  
Specifically, the constraints in Eq. (1) are: (a) a chunk can only 
be requested from at most one neighbor at a time (avoiding waste 
of resource) (b) the number of requested chunks cannot overwhelm 
the peer’s inbound bandwidth (c) the number of requested chunks 
assigned to ݆ cannot exceeds its maximum capability the supplying 
peer j can provide to the requesting peer i, ܯܤ ௝ܹ,௜  (d) a peer only 
accepts requests for chunks in its streaming buffer. This problem 
can be translated into a classic min-cost problem [6] and can be 
solved by the “CS2” library [7]. According to the solution to the 
problem, node i can optimally request desired chunks from 
neighbors.  
However, we note that maximizing the throughput is not equal 
to maximizing received video quality. The configuration of 
received chunks has deterministic impact on received video quality 
[8] instead. Hence, we advocate maximizing the sum of the rate-
distortion impact, denoted as ܴܦ൫ߨ௜,௞൯, to improve received video 
quality. Following, we develop a quality-gain function to label 
each video chunk a rate-distortion score to achieve this. 
On the other hand, we have to note that over-estimation of 
ܯܤ ௝ܹ,௜ could lead to request congestion at the supplying peer j (i.e. 
receive too many requests) and losing opportunity of requesting to 
other supplying peers at the same time (this is because a chunk can 
only be requested from at most one neighbor at a time). Conversely, 
under-estimation of ܯܤ ௝ܹ,௜ could cause that the requesting peer i 
to be unable of competing outbound bandwidth of peer j against 
other requesting peers of peer j (poor link utilization occurs). 
Therefore, the mis-estimation of ܯܤ ௝ܹ,௜  will result in poor 
utilization of outbound bandwidth of all peers. Following, a hybrid 
available bandwidth prober is proposed to cope with this problem. 
 
3.2. Rate-Distortion Scores 
 
In our previous work [7], we have adopted ∆ெௌா
∆ோ
 to measure the 
importance of a MB for rate control. In this work, we also use the 
similar concept to label the importance of a video chunk. We note 
that in most P2P streaming systems video stream is partitioned into 
equal-sized video chunks. A video chunk could contain more than 
one frame. Once such a chunk gets lost, the number of un-
decodable frames might increase. Therefore, this kind of chunk is 
more important than the chunks that just contains one frame. 
Following, we use the above observation to label each video chunk 
a rate-distortion score. 
First, for each frame j of size ∆ܴ , we calculate its impact 
∆ܴܲܵܰതതതതതതതത  on the average reconstruction quality of the GOP it 
belongs to. The impact on the quality can be simplified as the 
PSNR difference between the two reconstructed GOP image 
sequences with and without the frame (concealed by frame-copy 
[12]). Therefore, the rate-distortion score of a frame ௝݂ is defined 
as ∆ܴܦሺ ௝݂ሻ ൌ
∆௉ௌேோതതതതതതതത
∆ோ
. Then, to differentiate the chunk contains 
more than one frame, ܴܦ൫ߨ௜,௞൯  is computed by the sum of 
∆ܴܦሺ ௝݂ሻ : 
                            ܴܦ൫ߨ௜,௞൯ ൌ ∑ ∆ܴܦሺ ௝݂ሻ௙ೕא௙ሺగ೔,ೖሻ                          (2) 
, where ݂ሺߨ௜,௞ሻ is the set of frames (partially) contained in chunk 
ߨ௜,௞. 
[4] V. Pai, K. Kumar, and et al, “Chainsaw: Eliminating trees from overlay 
multicast,” in IEEE INFOCOM 2005, Conell, US, Feb. 2005. 
[5] X. Zhang, J. Liu, B. Li, and T.-S. P. Yum, “CoolStreaming/Donet: A data-
driven overlay network for efficient media streaming,” in IEEE INFOCOM 
2005, Miami, US, Mar. 2005.  
[6] M. Zhang, Y.-Q. Xiong, Q. Zhang, and S.-Q. Yang. “ On the Optimal 
Scheduling for Media Streaming in Data-driven Overlay Networks,” In Proc. 
IEEE GLOBECOM 2006, November 2006 
[7] C. Y. Chang, M. H. Chen, C. F. Chou and D. Y. Chan, “A Two-Layer 
Characteristic-based Rate Control Framework for Low Delay Video 
Transmission," IEEE International Conference on Communications, ICC'07, Jun. 
24-27, 2007. 
[7] A. Goldberg, “Andrew goldberg’s network optimization library.” 
[Online]. Available: http://www.avglab.com/andrew/soft.html 
[8] S. Tao, J. Apostolopoulos and R. Gu´erin, ”RealTime Monitoring of Video 
Quality in IP Networks,” ACM NOSSDAV’05 
[11] H. Schwarz, D. Marpe and T. Wiegand, Overview of the Scalable Video 
Coding Extension of the H.264/AVC standard, IEEE Transactions on Circuits 
and Systems for Video Technology,  17 ( 9) (2007) 1103-1120.  
[12] C. Ying, J. Boyce and X. Kai, “Frame Loss Error Concealment for SVC,” 
Joint Video Team (JVT) of ISO/IEC MPEG &ITU-T VCEG, 17th Meeting: Nice, 
FR,14-21 Oct, 2005. (JVT-Q046) 
 
 
(a) 
 
(b) 
Fig. 3 Rate-Distortion Benefit 
 
(a) 
 
(b) 
Fig. 4 Testing video trace  
 
Fig. 5 Average PSNR over Time 
 
TABLE 1 NETWORK CAPACITY DISTRIBUTION AMONG PEERS 
Inbound Capacity (kbps) Outbound Capacity (kbps)  Ratio (%)
3000  1000  10 
1500  384  50 
768  128  40 
 
TABLE 2. COMPARISON OF DR VALUES BETWEEN AGGRESSIVE HISTORY-
BASED BANDWIDTH PROBER WITH DIFFERENT  AND OUR METHOD 
 
Aggressive history‐based 
OurCBR
1.8 2 2.2 2.4  2.6  2.8  3α
SC
0.8 0.5728 0.7323 0.7379 0.7346  0.7372  0.7335  0.7355 0.7380
0.9 0.6144 0.8315 0.8298 0.8322  0.8298  0.831  0.8289 0.8328
0.95 0.6233 0.7242 0.8774 0.8794  0.5947  0.872  0.8757 0.8818
1.02 0.6349 0.7197 0.7312 0.6591  0.6413  0.6704  0.6055 0.9413
1.1 0.6527 0.9112 0.9302 0.6701  0.651  0.8643  0.7612 0.9887
1.2 0.6716 0.9868 0.9999 0.6892  0.6555  0.6421  0.9997 0.9876
VBRሺaሻ
1.8 2 2.2 2.4  2.6  2.8  3 Ourα
SC
0.8 0.6790 0.6915 0.6928 0.6931  0.6983  0.6835  0.6952 0.7097
0.9 0.7417 0.7497 0.7156 0.7470  0.7648  0.7512  0.7577 0.7784
0.95 0.7848 0.7673 0.7755 0.7642  0.7709  0.7809  0.7652 0.8130
1.02 0.8136 0.8120 0.8153 0.8000  0.8280  0.8232  0.8362 0.8456
1.1 0.8428 0.8242 0.8461 0.8381  0.8357  0.8578  0.8634 0.8771
1.2 0.8583 0.8241 0.8879 0.8458  0.8335  0.8880  0.8695 0.8967
VBRሺbሻ
1.8 2 2.2 2.4  2.6  2.8  3 Ourα
SC
0.8 0.7141 0.7208 0.7239 0.7264  0.7194  0.7252  0.7306 0.7388
0.9 0.7718 0.7717 0.7777 0.7761  0.7748  0.7939  0.7896 0.7994
0.95 0.7722 0.7995 0.7880 0.7915  0.7851  0.7938  0.7782 0.8283
1.02 0.8116 0.8003 0.8234 0.8142  0.8190  0.8420  0.8200 0.8603
1.1 0.8532 0.8654 0.8515 0.8628  0.8511  0.8577  0.8836 0.8915
1.2 0.8228 0.8631 0.8773 0.9247  0.8895  0.9121  0.8886 0.9077
 
them are based on the distributed min-cost flow framework 
[3]. We use three types of nodes (500 nodes) whose 
outbound capacities are 1Mbps, 384kbps and 128kbps 
respectively and inbound capacities are greater than 
300kbps. The capacity supply ratio is used to represent the 
system capability, which is defined as the ratio of average 
outbound capacity to the raw streaming rate (300 kbps). 
Buffer maps are exchanged periodically to notify new 
available chunks among peers. Each peer contacts with 15 
neighbors. Term system throughput is defined to represent 
the number of chunks arrival before playback deadline. In 
all experiments, the outbound capacity of each peer is 
uniformly allocated to its neighbors. Each experiment is 
running for 1,000 seconds. We classify the system 
throughput according to 10 importance levels as shown in 
Fig. 1. Level 1 is the most important one for the 
reconstruction quality. We can see that the system 
throughput for importance-first strategy is mostly 
contributed by chunks of importance level 1 and level 2. 
On the contrary, the distributions of the system throughput 
for rarest-first and deadline-first scheduling strategy appear 
quite uniform. Moreover, the system throughput of both 
importance-first and deadline-first are much lower than the 
case of rarest-first strategy. This is because the rarest-first 
strategy is to let each peer request the rarest duplication to 
adaptively balance the distribution of each chunk. Thus, the 
rarest-first strategy can provide more diverse chunk 
configuration for streaming than others. So, such a strategy 
can increase the opportunity for playing a load balancing 
role in the system. Further, the whole system bandwidth 
can be leveraged. On the contrary, directly using 
importance-first strategy in data-driven P2P streaming 
could exacerbate inherent content bottleneck phenomenon 
in P2P streaming system [6]. This is because all peers 
aggressively request the most important chunks for 
themselves. Such a distributed strategy might induce that 
all duplication in the streaming system appear similar, i.e. 
concentrating on the same level, as shown in Fig. 1. Thus, 
the newly generated chunks are exactly invisible and could 
not be scheduled into each chunk subscription process. 
Consequently, all peers lose the opportunity for 
contributing its own outbound bandwidth. Note that the 
similar observation could be made for the deadline-first 
strategy. Unlike the importance-first strategy, on 
performing the rarest-first or deadline-first strategy, no 
prior importance is associated to each chunk. Each chunk 
gets the same request precedence statistically with others 
before its playback. This also explains why the throughput 
distributions of rarest-first and deadline-first scheduling 
strategy are uniform. 
From the above discussion, we note that the importance-
first strategy could maximize the throughput of important 
chunks but it has a poor system throughput. Here comes the 
challenging issue: how can we maximize the throughput of 
important chunks without degrading the system throughput? 
To cope with this issue, we adopt the strategy-switching 
approach [2]. For example, 1:1 interlaced rarest-first and 
importance-first strategy is used for the P2P streaming 
system. Surprisingly, the system throughput, as shown in 
Fig. 1, is significantly upgraded. In addition, the throughput 
of level-1 chunks just degrades little. With the increase the 
ratio of the percentage using the rarest-first strategy to the 
percentage using the importance-first strategy, we can see 
that the system throughput is getting closer to that of the 
original rarest-first strategy. This observation indicates that 
there exists tradeoff between rarest-first and importance-
first strategy. In addition, the system throughput can be 
reshaped by simple switching between rarest-first and 
importance-first strategy without degrading the system 
throughput, which is very useful for quality-oriented P2P 
streaming system. Therefore, we are motivated to drive the 
rate-distortion optimization in data-driven P2P system. 
Rate-Distortion Hint Track [5] is a very efficient but 
simple importance-labeling approach. By this approach, 
each chunk can be easily classified into different RD 
clusters with a weighting coefficient α୧ , which is an 
average statistic rate-distortion benefit. Hence, our 
proposed strategy-switching approach can be jointly 
designed with this video coding technique. That is, we 
formulate the system rate-distortion optimization as follows: 
ߨכ ൌ argగ Max ෍ ߙ୧ · ୧ܰ
୧
 , s. t. ෍ ୧ܰ
୧
൑ ܵ 
, where ୧ܰ  is the throughput of level i, ܵ  is the system 
capability upper bound and ߨ א ሾ0,1ሿ is the percentage of 
using the importance-first strategy. This rate-distortion 
optimization is to figure out a  ߨכ such that best system 
video quality can be achieved. In the future, we will 
provide a theoretical analysis for our observation and try to 
develop a dynamic switching approach for each peer to 
adapt network conditions, e.g. (1) the location in overlay (2) 
peer churn (3) heterogeneous peer capability, so as to 
further improve playback quality. 
3. REFERENCES 
[1] X. Zhang et al. CoolStreaming/DONet: A Data-Driven 
Overlay Network for Efficient Media Streaming.   IEEE 
INFOCOM 2005. 
[2] Y. P. Zhou et al. A Simple Model for Analyzing P2P 
Streaming Protocols. IEEE ICNP 2007.  
[3] M. Zhang et al.  On the Optimal Scheduling for Media 
Streaming in Data-driven Overlay Networks. IEEE 
GLOBECOM 2006. Grimedia: 
http://media.cs.tsinghua.edu.cn/~zhangm/ 
[4] Z. Liu et al. Using Layered Video to Provide Incentives in 
P2P Live Streaming. Proc. Workshop on Peer-to-Peer 
Streaming and IP-TV, SIGCOMM 2007 
[5] J. Chakareski et al. Rate-Distortion Hint Tracks for Adaptive 
Video Streaming.  IEEE Trans. on CSVT 2005. 
[6] D. Stutzbach et al. PRIME: Peer-to-Peer Receiver-drIven 
MEsh-based Streaming. IEEE/ACM Trans. on Networking 
2009.
the server is distributing in the current time slot; () is 
reserved for playback. As shown in the Fig. 1, in each time 
slot all peers shift the buffer contents by one position toward 
the playback deadline and playback the position (). The () could belong to  or ℎ. Different from the client-server 
model, peers in the P2P streaming protocol collaborate to 
each other to diffuse the video content. Each peer selects 
one peer randomly, and tries to issue a request to it. If the 
selected peer cannot provide any desired content to the 
selecting peer, content bottleneck problem occurs, which 
causes that the selecting peer loses the chance to download 
anything in a time slot. A peer may be selected by multiple 
peers. In fact, when population size is large, the probability 
that a peer is selected by multiple peers is quite low [3]. 
Therefore, it is reasonable to assume that the selected peer’s 
upload capacity is large enough to satisfy all requests in the 
same time slot. This assumption can let us ignore request 
congestion problem and make model tractable. Each buffer 
space is initially empty, and get filled by the P2P streaming 
protocol, either from the server or other peers. If the buffer 
position   is empty, the chunk will be regarded as the 
missing chunk that cannot meet the playback deadline. The 
probability that buffer position  is filled is denoted as (), 
which directly relates with playback continuity and system 
throughput. 
Let us denote the probability that the -th buffer space of 
peer  is filled with the correct chunk at time  as (). 
Note that when  is sufficiently large, the buffer occupancy 
probabilities tend to be a steady-state distribution. Therefore, 
index   can be removed. On the other hand, to make the 
stochastic model tractable, the distribution is assumed to be 
is identical and independent across peers. Therefore, () is 
rewritten as (). Under the independence assumption, the 
steady state probabilities of buffer occupancies can be 
specified as follows: 
 ( + 1) = () + 1 − ()()()   
   = 1, … ,  − 1 and (1) =  ! (1) 
 
In the above, since the buffer position ( + 1) is filled 
by a shift from (), the probability of buffer occupancy at 
the beginning of the time slot  + 1 is the probability that the 
probability () was filled at the beginning of the time slot  
plus the probability that ( ) was filled by the P2P 
streaming protocol during the time slot . The right term is 
the probability that a peer does not have  but the selected 
peer dose, and  is selected to download. () is regarded as 
the probability that using a chunk selection strategy, a peer 
cannot find a more preferred chunk than that of () that 
satisfies the 1 − ()() condition.  
 
3. IMPORTANCE-FIRST STRATEGY 
 
By intention, a peer using importance-first strategy will 
first pull the chunk with highest priority. Since we only 
calssify all the chunks into two classes, we consider the 
rarity among the same class of chunks with higher priority 
to be scheduled first. That is, the rarity of chunks is used to 
do the tie break when they belong to the same class.  
Based on Eq. (1), we know () is an increasing function 
of  . This implies that the expected number of copies of 
chunk in ( + 1) is greater than or equal to the expected 
number of copies of chunk in () . Hence, conceptually 
rarest-first strategy is equivalent to selecting chunks with 
priority (2) > (3) > ⋯ > (). So, the chunk selection 
function of rarest-first strategy at the position () can be 
expressed as follows: 
 
&'/() = )1 − 1* ∙ , )&'/(-) + .1 − &'/()/0*1234  5  ;1214 ;
 
   = 2, … ,  − 1 and &'/(1) = 1 −  ! (2) 
 
In the above, the left term is the probability that the 
server select other peers to upload; the right term is the 
probability that the chunk selection does not occur for all 
positions (-)  belonging to the range from ( − 1)  to (1) . The probability that the chunk selection does not 
occur at (-) is the probability that the peer has the (-) 
plus the probability that the peer does not have the chunk for (-) and the selected peer does not have the chunk either. 
Since the chunk selection function at the position () is not 
different, we can get the result &' () = &' (). 
Unlike the pure rarest-first strategy, the chunk selection 
function of importance-first strategy at position ()  for 
different chunk type is different, i.e. 7' () ≠ 7' () . For 7' (), the selection at position () is not affected by the 
chunks with lower priority. Therefore, 7' ()  can be 
expressed as follows: 
 
7' () = )1 − 1* ∙ , (7' (-) + (1 − 7' (-))0)12340 5  ;12140;
 
 
  
 
 
Fig. 1 Simple Model Architecture 
importance-first strategy hurt the system-wide throughput 
compared with rarest-first strategy?  
 
Proposition 3: TUVW 3TUVX 30  M &'/, when  N 2 
 
This proposition answers the above question. This can be 
understood by following explanation. The rarest-first 
strategy is to let each peer request the rarest duplication in 
the system, which can balance the distribution of each chunk. 
That is, the rarest-first strategy can provide quite diverse 
chunk configuration for swarming. Therefore, the system-
wide available bandwidth can be leveraged. On the contrary, 
a peer using importance-first strategy will first pull the 
chunk with highest priority. Therefore, the content 
availability of each peer tends to be concentrated on high 
priority chunks. This would hurt the system-wide content 
diversity and could reduce the collaboration among 
participant peers. Therefore, the system-wide available 
bandwidth cannot be leveraged. To grasp the property of 
importance-first strategy more, we further study the 
correlation between 7'   7' ⁄  and &'/ 7'   7'  2⁄ R  for   in Fig. 2(b). We can 
observe that the more 7'   7' ⁄  is, the more &'/ 7'   7'  2⁄ R  is. This indicates that 
importance-first strategy would suffer from more serious 
content bottleneck when 7'   7' ⁄  is large. 
In fact, the content bottleneck would be getting serious 
with the increase of population size. To understand this, we 
set   40 and plot the results of 7'   7' /2 and &'/ for  in Fig. 2(c). We can see that the performance 
of the two strategies degrades with the increase of 
population size. This is because when population size is 
large, the number of peers that each chunk needs to traverse 
becomes large. Note that the waiting time of each chunk that 
each peer can be tolerant is limited, i.e.  is fixed, for the 
real time constraint of a streaming system. Once the 
growing speed of the diffusion tree of the chunk c cannot 
timely meet most peers’ playback deadline, the chunk loss 
would appear on most peers, which in turn causes peers 
cannot leverage its outbound bandwidth even if the available 
bandwidth is sufficient.  
It is interesting to note that the gap between 7'  7' /2 and &'/ is also getting large with increase of 
population size. This is because when peer population is 
large, the growing of diffusion tree would no more be 
bounded by peer population. Therefore, the ratio of 7'  to 7'  would be getting large with increase of  and no more 
be bounded by peer population. This system-wide content 
configuration is quite not favorable for the collaboration 
among participant peers. Therefore, the importance-first 
strategy would suffer from more serious content bottleneck 
than rarest-first strategy does when population size is large. 
From the above discussion, we know peer population is 
a quite important indication of the system dynamic. When 
population size is large, the system-wide sustainable 
streaming rate becomes small. Therefore, the probability of 
chunk loss would increase. Once the chunk loss appears on 
the high priority one (e.g. the chunks with the property of 
resynchronization or as a part of high-motion/redundancy 
frame), peers could experience very poor video quality. 
Although the importance-first strategy can provide better 
throughput for high priority chunks, it incurs the serious 
content bottleneck for low priority chunks, particularly 
when the population size is large. Here comes the 
challenging issue: How can we embed an unequal content 
protect mechanism into the P2P streaming system without 
degrading the system throughput? 
 
3. PROPOSED SCHEME 
 
   
 
Fig. 3 (a) The variation of  with   10P (b) The variation of 40 for  
strategy can provide to tail part of buffer. Therefore, 
searching for a maximal Y such that !7Z  ` 7'  can 
demonstrate the maximal improvement that the mixed 
approach can achieve. Results are shown in Fig. 4. It is 
amazing that such a mixed approach can provide 
comparable performance with rarest-first strategy can do. 
Even when population size is large, the performance just 
degrades a little. This indicates that there is an unequal 
content protection mechanism can be embedded into swarm-
based P2P streaming system without degrading the system 
throughput. 
 
6. CONCLUSION 
 
In this work, we try to understand and analyze the trade-
off between content diversity and content importance based 
on an abstract simple model. Based on those useful insights, 
a mixed approach that combines the advantages of rarest-
first and importance-first scheduling strategy is studied. 
Numerical results indicate that such a mixed approach not 
only can effectively reshape the system-wide system 
throughput but also can provide comparable performance 
with rarest-first strategy can do, even when population size 
is large. In reality, the peer population size is unknown and 
is likely to change over time. Hence, it is necessary to 
adaptively adjust the demarcation Y  to accommodate the 
network dynamic. In the near future, we realize our mixed 
approach in adaptive fashion to accommodate the network 
dynamic. 
 
7. REFERENCES 
 
[1] X. Zhang, J.C. Liu, B. Li, and P. Yum, 
“CoolStreaming/DONet: A Data-Driven Overlay Network for 
Efficient Media Streaming,” IEEE INFOCOM 2005. 
[2] M. Zhang, Q. Zhang, and S. Q. Yang. “Understanding the 
Power of Pull-Based Streaming Protocol: Can We Do Better?”  
IEEE JASC 2007 
http://media.cs.tsinghua.edu.cn/~zhangm/ 
[3] Y. Zhou, D. M. Chiu, and J. C. S. Lui, “A Simple Model for 
Analyzing P2P Streaming Protocols,”  IEEE ICNP 2007 
[4] N. Magharei and R. Rejaie. “PRIME: Peer-to-Peer Receiver-
drIven MEsh-based Streaming,” IEEE INFOCOM 2007. 
[5] B. Li, G. Y. Keung, S. Xie, F. M. Liu Y. Sun and H. Yin, “An 
Empirical Study of Flash Crowd Dynamics in a P2P-based 
Live Video Streaming System,” in Proc. of IEEE Globecom 
2008, Nov. 2008. 
[6] J. Chakareski, J. Apostolopoulos, S. Wee, W. Tan, and B. 
Girod, “ Rate-Distortion Hint Tracks for Adaptive Video 
Streaming,” IEEE Trans. on CSVT 2005. 
 
  
Fig. 4 Optimal demarcation Y 
chunks the peer currently has in the streaming buffer are 
exchanged periodically with  = 500   to each other. The 
buffer map is in form of a sliding window with the limited size 
. By doing so, the system can be forced to slide in time. After 
that, each peer conducts a scheduling process and waits for the 
first chunk from the surrounding peers to start the pre-buffering 
procedure. After a startup delay, each peer searches for an 
anchor I-frame (i.e., the I-frame with minimal seq_num) to start 
the playback. The playback speed keeps synchronized with the 
same frame rate of the source peer. Any chunk arrives after 
playback deadline is regarded as useless (or lost). 
Each peer maintains a request window for chunk scheduling. 
The request window begins with the chunk with the minimal 
chunk_id of the second incoming Group of Picture (GOP) with 
respect to the playback deadline. The maximum chunk_id 
within the request window is updated by the received buffer 
map packets. Each peer asks its neighbors for all the absent 
chunks within the request window periodically with  
500 . Each desired chunk is randomly assigned to a peer 
who possesses the chunk. When a chunk does not arrive after 
the request has been sent out for a while       , and 
it is still in the request window, the chunk will be requested 
again at the next scheduling process. Any absent chunk that 
gets out of the request window will not be requested further. 
The scheduled chunks are encapsulated into several request 
packets. Each request packet could contain several requested 
chunks. Before these request packets are sent out, the requested 
chunks within each request packet are ordered by the index of 
importance, rarity or emergency for the prioritized scheduling. 
A peer could receive multiple request packets. Those request 
packets will be stored in a sending queue according to their 
s and wait for delivery in random fashion. After a request 
packet is chosen, the chunk with highest priority gets served 
first. 
We implement the above system model on an event-based 
packet-level simulator, which is developed in GridMedia 
project [2]. To simulate the bandwidth heterogeneity of the 
peers, we use three different typical DSL nodes. Their upload 
capacities are 1Mbps, 384kbps and 128kbps and download 
capacities are 3Mbps, 1.5Mbps and 768kbps, respectively. The 
fraction of different types of peers is set to 0.15, 0.39 and 0.46, 
respectively. Average upload capacity and download capacity 
are 358.64kbps and 1.388Mbps, respectively. There are two 
types of packets in our experiment. They are TCP and UDP, 
respectively. Signaling packets (e.g. buffer map packets, 
request packets and connection packets) are delivered by using 
TCP. Video chunks are delivered by using UDP. 
We concatenate different types of CIF video sequences to 
generate a roughly 1,000 second test video sequence by using 
IBBP….IBBP… encoding structure supported by JM 16.0 [8]. 
The video stream is generated, roughly 328kbps. The video 
quality is 31.4 dB on average. The percentage of I-chunk, P-
chunk and B-chunk are 18.3%, 41% and 40.7%, respectively. 
The following metrics are used to do the performance 
evaluation: (1) Delivery Ratio: the ratio of the number of 
chunks that arrive before playback deadline to the number of 
chunks that should arrive before playback deadline. (2) PSNR 
(dB): the rendered video quality compared with the raw video 
sequence. The FFmpeg is used as our decoder. When frame 
loss occurs, FFmpeg will drive its default error concealment 
tool to reduce the drift effect. 
 
3. OBSERVATIONS AND ANALYSIS 
 
In this section, we would like to study two scheduling 
strategies, which are conceptually conflict. One is the rarest-
first strategy (RF). This approach is to let each peer first serve 
the rarest duplications so as to adaptively balance the 
distribution of each chunk. Therefore, the rarest-first strategy 
can provide quite diverse chunk configuration to make each 
peer swarm to each other. The rarest-first strategy is also 
regarded as one of most powerful scheduling for available 
bandwidth utilization. The other one is importance-first strategy 
(IF), which is to let each peer first serve the chunks that have 
the most impact on video quality. Therefore, the system-wide 
content configuration tends to be similar and concentrates on 
high priority chunks. This approach is a quite direct way to 
protect the video content. 
We first examine the chunk-level delivery ratio of the 
importance-first strategy (IF) and rarest-first strategy with 
different population sizes in Fig. 1 (a). We can see that both 
rarest-first strategy and importance-first strategy suffer from 
the same scalability problem, i.e., the delivery ratio degrades 
 
 
Fig. 1 (a) Delivery ratio and the degree of content bottleneck with different peers (b) Delivery ratio with different frame type 
diversity, which in turn upgrades the utilization of available 
bandwidth. Otherwise, the scheduling mode is conservatively 
switched to the importance-first strategy for graceful video 
quality degradation. When an inadequate decision is made, the 
saturation of the streaming buffer would react immediately and 
help to make a remedy decision at the next time. Since the 
saturation of the streaming buffer also can be an indication to 
reflect the variation of population size, such an approach may 
make each peer self-configure a proper trade-off between 
content importance and content diversity even if the population 
size is varied. 
Here, the saturation of the streaming buffer is measured as 
the I-frame and P-frame delivery ratio within the request 
window. At each scheduling process, we pick up a single GOP 
and inspect its saturation to judge the scheduling mode. The 
decision process is shown as follows: 
 
If ?=. ABC  D and ?= . HBC  I  
Rarest-first 
Else 
Importance-first 
 
(1) 
, where ?=. ABC and ?= . HBC are the I-frame delivery ratio and P-
frame delivery ratio of the i-th incoming GOP in the request 
window with respect to playback deadline; D  and I  two 
parameters that specify the target content distribution for 
playback. 
 
D and I are set to 0.99 and 0.96, respectively. i is set to 11 in 
the following experiment. 
 
5. PERFORMANCE EVALUATION 
 
We compare our adaptive strategy-switching with the static 
utility-like approach (UL) [7]. Due to page limitation, we only 
conduct experiments in static environment. In static 
environment, all peers join the session in bursty fashion and do 
not quit after they join the session. We get the average of 
several simulation results with different random seeds for each 
data point on the figure. First, we examine the delivery ratio for 
different approaches in Fig. 1(a). Obviously, our approach can 
provide comparable delivery ratio to the rarest-first strategy can 
do. Even when population size is large, the delivery ratio just 
degrades a little. We further check the delivery ratio with 
respect to different type in Fig. 1(b). We can see that our 
approach also can provide comparable delivery ratio to the 
rarest-first strategy can do. This indicates that our approach can 
support better video quality than pure rarest-first strategy or 
importance-first strategy can do. It is interesting to notice that 
although utility-like approach can enjoy excellent delivery ratio 
for I-frame and P-frame in small-scale scenario, since the 
weight for importance index is relatively larger than the weight 
for other two indexes, the content bottleneck phenomenon 
would still exacerbate with the increase of the population size. 
As shown, the delivery ratio of B-frame is poor when the 
population size exceeds 4,500 peers. Therefore, such an 
empirical setting is not suitable for large-scale scenario. By 
contrast, our approach can self-configure a better trade-offs 
between content diversity and content importance in an 
adaptive fashion. Therefore, our approach outperforms the 
utility-like approaches. 
 In Fig. 2, we demonstrate the average PSNR of two GOPs 
over time in the case of 7,500 peers, which can be regard as a 
large-scale scenario. We can see that our approach can well 
accommodate the variation of the source streaming rate and 
provide excellent objective video quality compared with other 
approaches. In this case, on average our approach can 
substantially improve video quality to 1.11(dB), 1.52(dB) and 
6.59 (dB) on average compared with IF, RF and UL, 
respectively. 
 
6. CONCLUSION 
 
In this work, we try to understand and analyze the 
challenges of designing Quality-of-Experience-oriented 
scheduler via a simulation study. After that, we propose an 
adaptive strategy-switching approach that combines the 
advantages of rarest-first and importance-first scheduling 
strategy to cope with the challenges. Although currently our 
approach can outperform existing approaches, it is not the 
optimal solution yet. In the future, we do our best to achieve the 
objective. 
7. REFERENCES 
 
[1] X. Zhang, J.C. Liu, B. Li, and P. Yum, 
“CoolStreaming/DONet: A Data-Driven Overlay Network for 
Efficient Media Streaming,” IEEE INFOCOM 2005. 
[2] M. Zhang, Q. Zhang, and S. Q. Yang. “Understanding the 
Power of Pull-Based Streaming Protocol: Can We Do Better?”  
IEEE JASC 2007 
http://media.cs.tsinghua.edu.cn/~zhangm/ 
[3] Y. Zhou, D. M. Chiu, and J. C. S. Lui, “A Simple Model for 
Analyzing P2P Streaming Protocols,”  IEEE ICNP 2007 
[4] N. Magharei and R. Rejaie. “PRIME: Peer-to-Peer Receiver-
drIven MEsh-based Streaming,” IEEE INFOCOM 2007. 
[5] B. Li, G. Y. Keung, S. Xie, F. M. Liu Y. Sun and H. Yin, “An 
Empirical Study of Flash Crowd Dynamics in a P2P-based 
Live Video Streaming System,” in Proc. of IEEE Globecom 
2008, Nov. 2008. 
[6] J. Chakareski, J. Apostolopoulos, S. Wee, W. Tan, and B. 
Girod, “ Rate-Distortion Hint Tracks for Adaptive Video 
Streaming,” IEEE Trans. on CSVT 2005. 
[7] Z. Liu, Y. Shen, S. Panwar, K. Ross, and Y. Wang, “Using 
Layered Video to Provide Incentives in P2P Live Streaming,” 
Proc. Workshop on Peer-to-Peer Streaming and IP-TV, 
SIGCOMM 2007 
[8] http://iphome.hhi.de/suehring/tml/ 
 
Fig. 2 PSNR over time 
單一領域是不具備解決這樣問題。所以需要新理論，新模型和更大量的研究和分
析的能力來自全世界科學家和工程師。 
下午我們則選擇去參加有興趣的 sessions 包含了: Sensor Networks 與 MAC 
Protocols. 在會議中所報告的論文提出利用機率式傳輸的方式去改善在水底無線
偵測網路上的延遲大的問題、以及如何利用 Network Coding 來幫忙最佳傳輸頻
帶的選擇方式都有引人注視的解法與論點。在傍晚時間及參加歡迎會的活動，認
識來自世界各國與會的學者。 
 星期四的上午的 Keynote speech 是由 KDDI R&D Laboratories Inc. 總裁 
Dr.Shigeyuki Akiba 針對下世代網路發展的目的是為了促進區域技術與產業交流
合作，並如何建設下世代網路的發展平台。內容主要深入探討全 IP (All-IP) 寬
頻網路時代，實現多元服務所面對的挑戰，以及如何透過創新的商業模式，實現 
ICT (Information and communication technologies) 與電信、內容、電視等產業進
一步的融合。下午同樣我們選定自己所有興趣論文的 sessions 去參加，而我所參
加的是關於 Disruption-tolerant Networks 與 Secure 技術方面：會議中所報告的論
文皆引起熱烈的討論，也讓我們有了另一種新的思維方式，聽完之後感覺受益良
多。一天下來雖然身體覺得很疲倦但精神上卻飽食了一頓。晚上我們則參加了會
議所提供的餐會活動 
 我們最主要的心得是在今年超過170篇的投稿論文裡只有31篇論文得以 full 
paper 的型式發表，其中論文的原創性與完整度值得好好學習。另外此次會議也
攜回在會議現場發放會議光碟。 
97 年度專題研究計畫研究成果彙整表 
計畫主持人：周承復 計畫編號：97-2221-E-002-139-MY2 
計畫名稱：無線同儕多媒體串流應用之服務品質保證跨層設計--子計畫六:異質性網路下之同儕式情境
感知多媒體視訊串流技術 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 3 0 100%  
博士生 2 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
