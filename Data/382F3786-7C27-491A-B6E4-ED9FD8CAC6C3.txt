 I 
中文摘要 
 
 本計劃的研究目的乃是依據軟體代理人導向之工作流程系統能夠優於一般傳統工作流程系統之概
念，進而提出利用「述句描述技術(scripting)」提供一個述句描述語言(scripting language)以利於軟體工
程師能夠便於快速地編輯工作流程，進而快速建立出工作流程系統。在研究成果中，我們成功地讓軟
體工程師利用述句語言實現在執行階段進行任務配置(task allocation)，並且使用述句語言描述軟體代理
人的工作執行排程，使得軟體代理人能夠接受工程師的任務委託完成整個工作流程。本計劃實作出一
個可支援述句描述語言的多代理人系統架構，並且軟體代理人能夠具有自主性與協同合作的能力完成
述句式語言所描述的工作流程。本研究利用 JADE 平台之相關技術建置多代理人架構，而為了驗證本
研究計畫之可行性，本研究成功實做出一個 IC design cycle協助系統，在此系統中支援 IC 設計師採用
述句語言描述 IC 設計的工作流程，爾後在利用多代理人架構中，交付任務給多代理人自動化執行 IC 
design cycle。 
 
Keywords: 工作流程系統, 軟體代理人, 述句語言, 行動代理人, IC 設計, ICDCAS 
 
英文摘要 
 
Agent-based workflow systems are considered to have more benefits than traditional ones. In this paper, 
a scripting approach is proposed to build an agent-based workflow system. In order to allow task allocation in 
execution time and rapid composition of workflow agents, the internal workflows of agents are represented by 
using scripting language instead of system programming language. In the design of script syntaxes, task 
allocation, agent cooperation and dynamic adaptation are considered to support autonomy and cooperation in 
the agent systems. For workflow execution, a multi-agent architecture is also proposed based on JADE 
platform. Finally, to demonstrate the feasibility, an IC Design Cycle Assistant System (ICDCAS) is 
implemented based on the proposed approach to assist IC designers in handling design cycle. 
 
Keywords: Workflow System, Software Agent, Script Language, JADE, Mobile Agent, IC design 
 
 3 
around network nodes. They are able to access the 
services or resource provided by other agents to 
accomplish their tasks without human intervention. 
Scripts are used to support the dynamic task 
allocation for the mobile agents. To support the 
autonomy and cooperation in an agent-based 
workflow, the design of the script syntax considers 
the task allocation for the mobile agents, the 
dynamic adaptation of workflow and the cooperation 
among the mobile agents. To demonstrate the 
feasibility of the proposed methodology, the 
run-time environment is implemented on JADE 
platform, and an experimental system for assisting in 
IC design is also presented in this paper. By using 
the system, IC designers are convenient to handle 
the IC design cycle. 
 
2. The proposed scripting approach for agent 
workflow 
 
Figure 1. The concept of scripting approach 
 
Figure 1 is the concept diagram of the proposed 
scripting approach. In the proposed scripting 
approach, the workflows of agents for achieving the 
global goal are specified in scripts. The script 
triggers the system to create two instances of task 
agents. Each task agent owns the individual 
workflow that consists of several tasks. For 
performing the responsible tasks, a task agent is a 
mobile agent able to migrate to external agencies to 
access services autonomously. The following 
describes the participators in the approach. 
 Dispatcher. The preprocessing of a script is 
performed by a dispatcher. It separates a script 
to several sub-scripts according to the content 
of the script. Dispatcher creates enough task 
agents and delegates these sub-scripts to them. 
 Task agent. The created task agents 
accomplish their responsible workflows 
according to individual sub-scripts. The 
responsibility of a task agent is to access the 
services provided by external service agents. A 
task agent can also cooperate with other task 
agents to provide the coordination among 
sub-workflows. 
 Service agent. A service agent is designed to 
own reactivity. It provides the service interface 
for task agents to access the activities, and 
performs the activities at the local agency to 
solve the problems of task agents. 
Based on the concept mentioned above, the script 
designed in this study is used to support the 
autonomy and cooperation of the task agents in 
workflows. In order to coordinate the task agents to 
perform their tasks appropriately, the design of script 
syntaxes will consider the task allocation, agent 
cooperation and dynamic adaptation. 
 
2.1 Task allocation 
A script is major to identify relevant task agents in 
the workflow and to describe their tasks. Therefore, 
the basic description in a script should consider the 
life cycle management and task allocation of task 
agents. Table 1 shows the syntaxes related to the life 
cycle management of task agents. 
Table 1. The syntaxes related to agent life cycle 
management 
Command Parameter Description 
task-agent [agent name] Define an agent block with 
an agent name 
 -ttl [time] Specify the life time of the 
 5 
def-data statement. Moreover, if several files are 
produced during the processing of service, some of 
them can also be added to the file resource of the 
task agents with the “-outfile” parameter of do-task 
statement.  
2.2 Agent cooperation  
To accomplish the tasks corresponding to the whole 
workflow, the task agents may need to cooperate 
with each other. In multi-agent systems, there have 
been existed communication mechanisms to 
facilitate the cooperation among agents. Blackboard 
communication is a common communication 
architecture used in dynamic and large agent 
systems for information sharing [17]. It uses a public 
information space to share the information offered 
by agents. By referring to blackboard mechanism, 
task agents do not directly communicate with each 
other. The data flows of several sub-workflows are 
combined by exchanging the individual workflow 
data of task agents through the space. In our design, 
the information shared in the cooperation between 
sub-workflows includes the result data and file 
resource. 
Several task agents share the result data and file 
resource produced in individual workflows through 
the information space. Task agents can output the 
result data of service invocations to the reserved data 
space. Other task agents can also retrieve the data 
from the space. By using the blackboard mechanism 
on information sharing, several task agents can also 
share the produced files without disturbance 
occurred in the access while performing their 
internal workflows in parallel. In order to be 
compliant with blackboard mechanism, our script 
syntaxes are designed as the statements in Table 3. 
Table 3. The syntaxes related to information 
sharing 
Command Parameter Description 
reserve-space [variables] Reserve the data space 
for one or more global 
data 
share-file [files] Share one or more files 
owned by the task agent 
obtain-file [files] Obtain one or more files 
in information space 
In our script, the “reserve-space” statement is 
designed to let the dispatcher reserve the data space 
on the information space for global data variables. 
The statement must be declared before all task agent 
blocks. That lets relevant task agents be aware of the 
global data in the workflow before accessing the 
result data in the information space. The global 
result data will also be accessed with the –indata 
parameter and –outdata parameter of do-task 
statement. In addition to the result data, we design 
the “share-file” statement to share the file resource 
of task agents and the “obtain-file” statement to let a 
task agent obtain the relevant file resource offered 
by other task agents.  
In agent cooperation, there may be dependence on 
the global data access and task operations of task 
agents. A task agent may need to wait for another 
task agent to accomplish a certain task or share 
specified resources. Thus, the synchronization issues 
must be considered. The statements listed in Table 4 
are designed to handle the synchronization between 
the internal workflows of task agents. 
Table 4. The syntax related to the workflow 
synchronization 
Command Parameter Description 
def-sync [sync events]  Define one or more 
synchronization events 
joint [sync events]  Let the task agent wait for 
some specified 
synchronization events 
do-task -sync [sync 
event] 
Trigger a specified 
synchronization event after 
the task has been finished 
share-file -sync [sync 
event] 
Trigger a specified 
synchronization event after 
some shared files are 
available 
 
 7 
A
g
en
t C
o
m
m
u
n
icatio
n
 In
terface
A
g
en
t 
C
o
m
m
u
n
ica
tio
n
 
In
terfac
e
A
g
en
t C
o
m
m
u
n
icatio
n
 
In
te
rfa
ce
 
Figure 2. Proposed multi-agent architecture 
 AMS (Agent Management System). According 
to the FIPA Agent Management Specification 
[23], only one AMS agent exists in an agent 
platform to manage the operations on the 
platform and provide the white-page service. 
Through the service, the naming of agents can 
be supported, and the network address of agents 
can also be maintained on the agent platform. 
 DF (Directory Facilitator). In the FIPA Agent 
Management Specification, the DF is an agent 
responsible for providing the yellow-page 
directory service. Through the service, the 
mapping between the services existing on the 
platform and the agents providing the services 
can be maintained by the DF. 
 RMA (Remote Monitoring Agent). The RMA 
agent is a particular component in the JADE 
platform to provide a GUI for monitoring and 
controlling agents and their life cycle from a 
remote host. Although the RMA agent is not 
necessary to the proposed syntaxes, the 
graphical console is useful in a workflow 
management system for monitoring the agent 
status.  
In addition to the JADE default agents, we need 
an information space to support blackboard 
mechanism. For the information sharing and 
workflow synchronization in the proposed syntaxes, 
a public information space in the environment is 
used for storing global data, sharing produced files, 
and maintaining synchronization events. Therefore, 
we design a Repository Agent to provide and 
maintain this kind of space. For the internal structure, 
the repository agent contains two modules, ACI and 
AC. 
 Agent Communication Interface (ACI). In our 
multi-agent environment, each proposed agent 
needs an ACI module to communicate with 
other agents. The ACI module is used to send 
and receive FIPA ACL messages via JADE 
asynchronous message passing. It can also 
generate and parse the ACL messages encoded 
in the string format defined by FIPA. Through 
the interface, an agent is able to communicate 
with other FIPA-compliant agents on JADE 
platform.  
 Access Control (AC). There are three kinds of 
data, including global data, shared files and 
synchronization events, maintained by the 
repository agent. The repository agent serves as 
the single entrance to access these data. 
Therefore, each task agent in the platform is not 
allowed to directly operate the data without 
relying on the repository agent. In the 
repository agent, the AC module is the control 
center that gathers the external access requests. 
All the requests from the ACI module are 
recognized by the AC module, and translated to 
corresponding operations on the data. 
 
The JADE framework provides a distributed agent 
platform that enables agents on different hosts to 
expose services on the platform. In our design, there 
is at least one Service Agent enacting the service 
provider at each agency. In order to manage services, 
a service agent contains the SR and SI modules 
besides ACI.  
 Service Registration (SR). In the JADE 
platform, an agent can publish provided 
services by registering the service descriptions 
 9 
The termination will be performed after the 
current task is accomplished by the TE.  
 
4. Experimental system 
 
An ICDCAS (IC Design Cycle Assistant System) 
was implemented to support automation in IC design 
cycle. After IC designers have used VHDL as the 
design entry language to design a FPGA, the system 
will handle the VHDL files to perform the function 
simulation, synthesis and P&R phases. In order to 
support the functionalities, two EDA tools, Mentor 
Graphic ModelSim [25] and Xilinx ISE (Integrated 
Software Environment) [26] design suite, are 
encapsulated. We encapsulate ModelSim to provide 
the service of function simulation, and Xilinx ISE to 
provide the services of synthesis and P&R. 
According to the proposed scripting approach, these 
services will be managed by dedicated service 
agents. Task agents will be used to access these 
services autonomously for completing these phases. 
IC designers will take less time on manual 
operations, and also not need to monitor the 
processing of tools by themselves. 
In ICDCAS system, the services supported by 
ModelSim 6.1f and Xilinx ISE 9.2i tools are 
implemented and deployed at different agencies. 
Because an IC design usually includes several IC 
components, we construct two Simulation services 
in the environment to concurrently support 
functional simulation for different IC components. 
Moreover, the synthesis and P&R processing are 
more complex, and probable to take a long time. 
Therefore, the Synthesis and PAR services serve on a 
computer with higher system performance. Besides 
of the services supported by the EDA tools, a 
HomeReport service is also registered to DF by the 
dispatcher program for gathering the reports from 
task agents. Figure 3 shows an example script used 
to assist in IC design. 
 
def-sync vhdl_ready 
task-agent TA01 
{ 
attach Component01.vhd, test_bench01.vhd 
def-data sim01_exec 
  do-task Simulation01 -infile Component01.vhd, 
test_bench01.vhd -outdata sim01_exec 
  if sim01_exec neq ‘error’ then 
    share-file Component01.vhd -sync vhdl_ready 
  end-if 
} 
task-agent TA02 
{ 
attach IC001.vhd, Component02.vhd, test_bench02.vhd, 
constraints.txt 
def-data sim02_exec, syn_exec 
do-task Simulation02 -infile Component02.vhd, 
test_bench02.vhd -outdata sim02_exec 
joint vhdl_ready 
obtain-file Component01.vhd 
  if sim02_exec neq ‘error’ then 
    do-task Synthesis -indata ‘id:IC001,device:XA3S50’ 
-outdata syn_exec -infile 
IC001.vhd,Component01.vhd,Component02.vhd,constrai
nts.txt -outfile IC001.syr 
  end-if 
  if syn_exec neq ‘failed’ then 
    do-task PAR -indata ‘id:IC001,effort:Standard’ -outfile 
IC001.par 
    do-task HomeReport -infile IC001.syr, IC001.par 
  end-if 
} 
start TA01, TA02 
Figure 3. Example script for assisting in IC 
design 
In this example, an IC001 that consists of two IC 
components is performed the function simulation, 
synthesis and P&R. The VHDL files of 
Component01 and Component02 are assigned to 
TA01 and TA02 for requesting the Simulation01 and 
Simulation02 services respectively. By inputting 
VHDL files and a test bench, the Simulation service 
will respond the result of function simulation for the 
IC components. Therefore, TA01 inputs the 
Component01.vhd and test_bench01.vhd to 
Simulation01 service, and then store the result to 
 11 
phases in IC design cycle. By using the system, IC 
designer will not need to pay attentions on EDA 
tools. The IC design cycle will be handled by agents 
automatically based on scripts. It could provide 
convenience to IC designers, especially when the 
processing in each IC design phase may take a long 
time. In the proposed approach, users can write 
scripts to describe the internal workflows of agents 
in detail. However, a graphical representation of 
workflows may be friendlier for users. Therefore, in 
our future research, we will provide a graphical tool 
for modeling the workflows and generating the 
corresponding scripts automatically. User will be 
able to easily create a workflow through the tool. 
They will need to modify the scripts only when fine 
tuning is necessary. Besides, we will also measure 
related metrics of execution performance, and apply 
the scripting approach to different application 
domains. Through experience, we are able to refine 
the script syntaxes and agent architecture. 
 
References 
 
[1] Yu Zhen, Wu Zhaohui, “A Mobile-Agent Based 
Interorganizational Workflow Management 
System,” The 8
th
 International Conference on 
Computer Supported Cooperative Work in 
Design, May 2004, pp.389-395 
[2] Youtian Qu, Xianliang Sheng, Wenping Jiao, 
“A Multi-Agent Based Model of Workflow 
Management,” Proceeding of the 10
th
 
International Conference on Computer 
Supported Cooperative Work in Design, May 
2006, pp.1-5 
[3] Dickson K.W. Chiu, “A Script Language for 
Generating Internet-bots,” The 12
th
 
International Workshop on Database and 
Expert Systems Applications, Sept. 2001, 
pp.667-671 
[4] Jong-Wih Kuo, “A Document-Driven 
Agent-Based Approach for Business Processes 
Management,” Information and Software 
Technology, Vol.46, Issue 6, May 2004, 
pp.373-382 
[5] N. R. Jennings, T. J. Norman, P. Faratin, P. 
O’brien, B. Odgers, “Autonomous Agents for 
business Process Management,” Journal of 
Applied Artificial Intelligence, 14 (2), 2000, 
pp.145-189. 
[6] IBM Aglet, 
http://www.trl.ibm.com/aglets/index_e.htm?ori
gin=wa 
[7] Fabio Bellifemine, Giovanni Caire, Agostino 
Poggi, Giovanni Rimassa, “JADE: A software 
framework for developing multi-agent 
applications. Lessons learned,” Information and 
Software Technology, Vol.50, Issue 1-2, Jan. 
2008, pp.10-21 
[8] Rafael Bordini, Lars Braubach, Mehdi Dastani, 
Amal El Fallah Seghrouchni, Jorge 
Gomez-Sanz, Joao Leite, Gregory O'Hare, 
Alexander Pokahr, Alessandro Ricci, “A Survey 
of Programming Languages and Platforms for 
Multi-Agent Systems,” Informatica, Vol.30, 
2006, pp.33-44 
[9] Xiaocong Fan, John Yen, Mishael Miller, 
Thomas R. loerger, Richard Volz, “MALLET – 
A Multi-Agent Logic Language for Encoding 
Teamwork,” IEEE Transactions on Knowledge 
and Data Engineering, Vol.18, No.1, January 
2006, pp.123-138 
[10] Nicholas R. Jennings, Michael Wooldridge, 
“Agent-Oriented Software Engineering,” 
Proceedings of the 9th European Workshop on 
Modeling Autonomous Agents in a Multi-Agent 
World, 2000 
[11] John K. Ousterhout, “Scripting: Higher Level 
Programming for the 21
st
 Centrury,” IEEE 
Computer, Vol.31(3), March 1998, pp.23-30 
[12] Robert S. Gray, David Kotz, and Ronald A. 
Peterson, “Mobile-Agent versus Client/Server 
Performance: Scalability in an 
 1 
 
 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                     日期：   年   月   日 
一、參加會議經過 
2009 年『第 5 屆網路計算、資訊管理與服務、數位內容暨多媒體技術應用國際聯合研討會 
(NCM2009)』(The 5th International Joint Conference on INC, IMS and IDC)今年是在韓國首爾市所舉辦
的，從 8 月 25 日至 8 月 27 日為期三天。此次國際會議之大會主席為韓國 Sogang大學的 JinHwa Kim
教授所擔任，會議乃是由三個國際研討會所組成，分別是 International Conference on Networked 
Computing (INC)、Information Management and Service (IMS)以及 Digital Content and, Multimedia 
Technology and its Applications。此次 NCM2009 所收錄之論文範圍以三個國際會議的主題為止，旨在收
錄相關的技術以及在工業界上的應用，為具有先驅領導地位的國際學術會議，同時獲得 IEEE收錄其發
行會議論文。 
二、與會心得 
在此次會議，本校資訊工程學系陳興忠教授接受大會主席之邀請組織一個 invited session，其主題
為無線網路計算與相關應用，並且收錄有本人與朝陽大學陳忠信教授所合作之論文外，同時與會的有
計畫編號 NSC  98－2221－E－468   －007 
計畫名稱 應用述句語言提供自主性與互動性於代理人為基礎的 
工作流程系統之研究 
出國人員
姓名 洪振偉 
服務機構
及職稱 亞洲大學資訊工程學系助理教授 
會議時間 
 98年 8月 25日
至 
 98年 8月 27日 
會議地點 韓國首爾 
會議名稱 
(中文)2009第 5屆網路計算、資訊管理與服務、數位內容暨多媒體技
術應用國際聯合研討會 (NCM2009) 
(英文)2009 the 5th International Joint Conference on INC, IMS and IDC 
(NCM2009) 
發表論文
題目 
(中文)用於階層式無線感測網路之任務導向協調式選擇方法 
(英文) Efficient Mission-Oriented Coordination Selection Methods for 
Hierarchal Wireless Sensor Networks 
無研發成果推廣資料 
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
