Abstract
The NP-hard multi-state two-terminal reliability is a practical and important system
performance index for analyzing the real world systems. Since all the exact methods solve
the multi-state two-terminal reliability problem in terms of two and/or three NP-hard
problems, excluding the impractical complete enumeration method and Doulliez and
Jamoule’s popular but incorrect decomposition method, development of an exact, direct
and practical algorithm is thus worthwhile. This paper 1) presents a direct and correct
decomposition method for solving the multi-state two-terminal unreliability, and 2) does
not require the multi-state minimal paths/cuts of the system a priori. The decomposition
principal of the proposed algorithm is based on critical states of critical arcs which are
searched according to the renowned max-flow min-cut theorem. An example illustrates the
proposed algorithm.
1. Introduction
In the past decades, network models have been explored for analyzing the real world
systems, such as computer and communication systems and transportation systems. With
increasing emphases on improved and more reliable services, many systems have
incorporated reliability analysis as an integral part in their planning, design, and operation
[1]. For designated source node s and sink node t, analysis of network reliability can be
classified into three categories; two-terminal reliability, capacity-related reliability, and
multi-state two-terminal reliability. Two-terminal reliability concerns the existence of at
least one path from s to t [2]-[4]. The capacity-related reliability, defined as the probability
of successfully transmitting a specified flow requirement from s to t, combines path
connection, arc capacity, and flow demand [5]-[9]. Both the two-terminal reliability and
capacity-related reliability assume the arcs in the network can be in either of two states:
operating or failed. Recently, the multi-state extension of binary-state has received
considerable attention [10]-[18]. For this extension, multi-state two-terminal reliability at
demand level d (MS2TUd) is defined as the probability that a demand of d units can be
supplied from s to t through multi-state arcs.
Exact and approximation algorithms have been proposed to solve the NP-hard
MS2TUd. The complete enumeration method solves this problem in an exact and
straightforward manner. It enumerates all possible combinations of arc states and it is
computationally expensive. The popular exact method, proposed by Doulliez and Jamoulle
[12], applies the Ford and Fulkerson [19] labeling scheme to decompose the state space
into a set of reliable states, a set of unreliable states, and disjoint and unspecified sets of
states. A state is reliable (unreliable) if d units of demand can (cannot) be supplied from s to
t. An unspecified set of states consists of both reliable and unreliable states. Each
unspecified set of states is decomposed repeatedly until no unspecified sets remain.
However, Alexopoulos [10] points out that the sets of unreliable states and disjoint and
unspecified sets of states attained may be incorrect. That it, this well-known decomposition
method may yield an incorrect answer. In short, the only way to solve the MS2TUd directly
and correctly is to enumerate all possible system states completely.
Based on all binary-state minimal paths/cuts, several authors [11],[13],[14],[15] have
presented exact but indirect approaches to search for all multi-state minimal paths/cuts. The
Pr(C) probability of set C of state vectors
F(c) the maximum flow from s to t in case the state vector is c
d demand requirement at sink node t
Ud the multi-state two-terminal unreliability,
S the storage for storing sets of state vectors
*
ic a specific state of ai satisfies (1) dciXXAai


*
),(
and (2) for any aiA(X, X ), if *jc <cj
 Cju , then *),( iXXAa ci + cj -
*
jc d
Ad(C) Ad(C)={ai|aiA(X, X ) and *ic < Ciu }
q the number of arcs in Ad(C)
xi index for arcs in Ad(C), 1iq
3. Multi-state Network Model
The following renowned max-flow min-cut theorem of network flows is fundamental
for developing the proposed algorithm.
Theorem 1 (Max-Flow Min-Cut Theorem). The maximum value of the flow from s to t
equals to the minimum capacity among all s-t cuts, i.e., }{min)(
cutcut is-tas-t
ccF
i
 .
Useful properties can be drawn from the max-flow min-cut theorem as the following.
Property 1. The maximum flow from s to t can be obtained in O(m3) time.
Property 2. The moment F(c), the maximum flow from s to t in case the state vector is c, is
computed, node set N can be divided into X and X satisfy sX, tX , XX =, XX =N,
A(X, X ) is an s-t cut, and iXXAais-tas-t cccF ii ),(cutcut
}{min)(

 .
Property 3. The subset X of N can be obtained in O(m) time.
For specified demand d, a state vector c is reliable if F(c)d, and is unreliable in case
F(c)<d. A set of state vectors C is reliable (unreliable) if all state vectors in it are reliable
(unreliable). When C is neither reliable nor unreliable, it is unspecified. Consider the
smallest and largest state vectors Cl and Cu in set C. If F( Cl )d, then all state vectors in
C are reliable, and C is reliable. If F( Cu )<d, then all state vectors in C are unreliable, and C
is unreliable. Otherwise, for F( Cl )<dF( Cu ), C is unspecified.
Theorem 2. For unspecified set of state vectors C, if node set N is divided into X and X at
the moment the maximum flow F( Cl )<d is computed, then dlCiXXAai  ),(
 C
iXXAa
u
i ),(
 .
Proof. According to property 1, )(
),(
CC
iXXAa
lFl
i


. It follows dlCiXXAai

 ),(
. On the other hand,
F( Cu ) CiXXAa ui ),(
holds due to the max-flow min-cut theorem. Since C is unspecified,
dF( Cu ) C
iXXAa
u
i ),(
 holds. 
For simplicity, the subsets X and X mentioned in the following are derived from N
according to Theorem 1. It is noted here that in network G=(N,A,C), A(X, X ) is an s-t cut
for any state vector cC. In particular, for the smallest state vector Cl , A(X, X ) is a
minimum s-t cut, i.e., C
iXXAa
C
is-tas-t
C lllF
ii ),(cutcut
}{min)(

 . Since A(X, X ) is always an s-t cut,
the proposed algorithm searches for a specific state of ai, say *ic , for each aiA(X, X ) such
Proof.
1. Arc aiAd(C) means that Cil  *ic < Ciu . By definitions of Cil* , it has Cil  *ic < Cil*  Ciu . As
a result, { Cil ,
*
ic }
C
iK and {
C
il
* , Ciu }
C
iK , though it may happen that Cil =
*
ic and/or
C
il
* = Ciu . It is concluded that
C
iK and
C
iK are non-empty and disjoint.
2. By definition of Cil
* , there is no state x of arc ai, such that *ic <x<
C
il
* . It follows that
C
iK =
C
iK 
C
iK . 
For each aiAd(C)={ai|aiA(X, X ) and *ic < Ciu }={ax1,ax2,…,axq}, Theorem 4 divides
C
iK into
C
iK and
C
iK . Similarly as in the proof of Theorem 4, the proposed algorithm
decomposes unspecified C into q+1 non-empty disjoint subsets C1, C2,…,Cq, and C0 by
pivoting on critical arcs ax1,ax2,…,axq one by one as follows:
1) Pivot on arc ax1 : C
1={(c1,c2, …,cn) | cx1
C
xK 1 , ci CiK for aiA\{ax1}},
2) Pivot on arc ax2 : C
2={(c1,c2, …,cn) | cx1 CxK 1 , cx2
C
xK 2 , ci CiK for aiA\{ax1,ax2}},
. . .
q) Pivot on arc axq : C
q={(c1,c2, …,cn) | ci CxiK for ai{ax1,ax2,…,axq-1}, cxq
C
xqK , ci CiK
for aiA\{ax1,ax2,…,axq}},
q+1) Let C0= {(c1,c2, …,cn) | ci CiK for aiAd(C), ci CiK for aiA\Ad(C)}.
Theorem 5.
1. Subsets C1, C2,…,Cq and C0 are non-empty and disjoint,
2. C0 is unreliable, i.e., F(c)<d for all cC0.
Proof.
1. We first note that C = C1(C\C1) = C1C2(C\1j2Cj)= …
= C1C2…Cq(C\1jqCj) =0jqCj.
According to Theorem 4, C1 and (C\C1) are non-empty and disjoint, C2 and (C\1j2Cj)
are non-empty and disjoint, …, Cq and C0=(C\1jqCj) are non-empty and disjoint. As a
result, C1, C2,…,Cq and C0 are non-empty and disjoint.
2. Let’s focus on arcs ai in s-t cut A(X, X ). For cC0, state ci of arc ai depends on aiAd(C),
or aiA(X, X )\Ad(C). If aiAd(C) then ci CiK . According to the definition of CiK , ci *ic .
Otherwise aiA(X, X )\Ad(C) indicates that ci CiK and ci Ciu . According to the definition
of Ad(C), Ciu =
*
ic . As a result, capacity of s-t cut A(X, X ) for state vector c is iXXAa ci ),(
 
*
),( iXXAa
c
i
 . Since states *ic satisfy dciXXAai 
*
),(
, C0 is an unreliable set consists of
unreliable state vectors c due to the max-flow min-cut theorem. 
Theorem 5 shows that an unreliable subset C0 can be derived from C. However, state
vectors in C1, C2,…,Cq are not guaranteed to be reliable and/or unreliable. In the proposed
algorithm, each Ci (1iq) is further classified as reliable, unreliable or unspecified. An
unreliable Ci contributes to the MS2TUd, a reliable Ci is suspended, and an unspecified Ci
is similarly decomposed so that an unreliable subset C0 is derived from Ci. The algorithm is
terminated whenever there is no unspecified set of state vectors left. Since all of the subsets
1 4
a2
a6
a1
a5
a3
a4
2
3
Figure 1. A multi-state computer network [18]
Table 1. States and state probabilities of arcs of Figure. 1
Arc States State Probabilities
a1 0 1 2 3 0.05 0.10 0.25 0.60
a2 0 1 2 - 0.10 0.30 0.60 -
a3 0 1 - - 0.10 0.90 - -
a4 0 1 - - 0.10 0.90 - -
a5 0 1 - - 0.10 0.90 - -
a6 0 1 2 - 0.05 0.25 0.70 -
The proposed decomposition algorithm is illustrated by solving Figure 1 and Table 1
step by step as follows. For simplicity, the set of state vectors C is denoted as [ Cl , Cu ].
Input: N={1,2,3,4},A={a1,...,a5,a6}, s=1, t=4, d=3.
Step 1 S={collection_1}, collection_1={(0,0,0,0,0,0),(3,2,1,1,1,2), (0,0,0,0,0,0),,0,0}
Step 2 U3 =0.
Step 3 S.
Step 3.1 C=C=[ Cl , Cu ]=[ l , u ]
=[(0,0,0,0,0,0),(3,2,1,1,1,2)].
Step 3.2 S=
Step 3.3 F( Cl )=F((0,0,0,0,0,0))=0,
F( Cu )=F((3,2,1,1,1,2))=4.
Step 3.4 F( Cu )=4>d=3
Step 3.5 F( Cu )=4>d=3 and F( Cl )=0<d=3
Step 3.5.1 A(X, X )= {a1,a5}, (c1*,c5*)=(2,0),
A3(C)={a1,a5}, I=2.
Step 3.5.2 Cl*1 =3,
CK1 ={c1|0c12},
C
K1 =
{c1|3c13}, Cl*5 =1,
CK 5 =
{c5|0c50},
C
K 5 ={c5|1c51}
C1=[(3,0,0,0,0,0),(3,2,1,1,1,2)]
C2=[(0,0,0,0,1,0),(2,2,1,1,1,2)].
C0=[(0,0,0,0,0,0),(2,2,1,1,0,2)].
Step 3.5.3 S={collection_1}={{(0,0,0,0,0,0),
(3,2,1,1,1,2),(2,0),{a1,a5},2,1}}
Step 3.5.4 U3=U3+ Pr(C0)=0.04.
Step 3 S.
Step 3.1 C=C1=[(3,0,0,0,0,0),(3,2,1,1,1,2)].
Step 3.2 Since 1<2, S={collection_1}=
{{(0,0,0,0,0,0),(3,2,1,1,1,2),(2,0),
expansion diagrams using OBDD,” IEEE Trans. Reliability, vol.48, pp. 234-246, 1999.
[5] M.O. Ball, J. Hagstrom and J.S. Provan, “Threshold reliability of networks with smal 
failure sets,” Networks, vol. 25, pp. 101-115, 1995.
[6] C.-C. Jane and Y.-W. Laih, “Algorithms to determine the threshold reliability of flow
networks,”IIE Transactions, vol. 36, pp. 469-479, 2004.
[7] C.-C. Jane and J. Yuan, “A sum of disjoint products algorithm for reliability evaluation 
of flow networks,” European Journal of Operational Research, vol. 131, pp. 664-675,
2001.
[8] W.J. Rueger, “Reliability analysis of networks with capacity constraints and failure at 
branches & nodes,”IEEE Trans. Reliability, vol.35, pp. 523-528, 1986.
[9] S. Soh and S. Rai, “An eficient cutset approach for evaluating 
communication-network reliability with heterogeneous link-capacities,”IEEE Trans.
Reliability, vol.54, pp. 133-144, 2005.
[10] C. Alexopoulos,“Note on state-space decomposition methods for analyzing stochastic
flow networks,” IEEE Trans. Reliability, vol.44: pp. 354-357, 1995.
[11] A. Aven, “Reliability evaluation of multistate systems with multistate components,”
IEEE Trans. Reliability, vol.34, pp. 473-479, 1985.
[12] P. Doulliez P and E. Jamoulle,“Transportation networks with random arc capacities,”
RAIRO, vol. 3, pp. 45-60, 1972.
[13] C.-C. Jane, J.-S. Lin and J. Yuan,“On reliability evaluation of a limited-flow network
in terms of minimal cutsets,” IEEE Trans. Reliability, vol. 42, pp. 354-361, 1993.
[14] J.-S. Lin, C.-C. Jane and J. Yuan, “On reliability evaluation of a capacitated-flow
network in terms of minimal pathsets,” Networks, vol. 25, pp. 131-138, 1995.
[15] S. Patra and B. Misra, “Evaluation of probability mass function of flow in a 
communication network considering a multistate model of network links,” 
Microelectron Reliability, vol. 36, pp. 415-421, 1996.
[16] J.E. Ramirez-Marquez and D.W. Coit, “A Monte-Carlo simulation approach for
approximating multi-state two-terminal reliability,”Reliability Engineering & System
Safety, vol. 87, pp. 253-264, 2005.
[17] C.M. Rocco and S.M. Muselli, “Approximate multi-state reliability expressions using
a new machine learning technique,” Reliability Engineering & System Safety, vol. 89,
pp. 261-270, 2005.
[18] W.C. Yeh, “A novel method for the network reliability in terms of capacitated-
minimum-paths without knowing minimum-paths in advance,”Journal Operational
Research Society, vol. 56, pp. 1235-1240, 2005.
[19] L.R. Ford and D.R. Fulkerson, Flows in Networks, Princeton University Press:
Princeton; 1962.
[20] C.C. Jane, “Viewpoints: A novel method for the network reliability in terms of
capacitated- minimum-paths without knowing minimum-paths in advance,”Journal
Operational Research Society, vol. 58, pp. 1394, 2007.
[21] W.C. Yeh, “Reply to Jane,”Journal Operational Research Society, vol. 58, pp. 1395,
2007.
[22] R.K. Ahuja, M. Kodialam, A.K. Mishra and J.B. Orlin,“Computational investigations 
of maximum flow algorithms,” European Journal of Operational Research, vol. 97, pp.
509-542, 1997.
[23] R.E. Tarjan, Data Structures and Network Algorithms. Society of Industrial and
