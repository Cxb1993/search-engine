propose a state of art design for the UWB 128-point FFT including algorithm, hardware structure, 
and performance analysis, parallel and pipeline FFT derivation and mapping, and a novel 
multiplier-less approach to get extremely low power complex multiplications. 
 
三、 結果與討論 
In the final year of the project, lots of new research results from the algorithms, architectures to 
the circuit level designs are obtained and discussed in the following: 
 
Novel FFT I/O environment: 
 More than thousands of papers have been published to discuss the FFT/IFFT designs based on 
the requirement of speed, chip area, and power consumption. However, the I/O module of the FFT 
processor has not been thoroughly investigated.  The pipeline architecture is appropriate for the 
real-time application.  Nevertheless, most of the designs employ the decimation-in-frequency (DIF) 
instead of decimation-in-time (DIT) FFT algorithm.  Lack of an efficient input module for the DIT 
is the main reason.  The project will conquer the problem. 
A novel input data module to efficiently support the highly parallel-pipeline FFT/IFFT 
processors will be presented.  Fig. 1 shows the input data module to support the 4 data.-path 
parallel-pipeline FFT system.  There are some advantages for the proposed approach.  First, for 
the FFT of size N, only N buffers are required instead of 2N buffers for the traditional ping-pong 
approach systems.  Second, the control and addressing circuits are very simple.  Third, the 
multibank memory is adopted to enhance the data bandwidth and reduce the system power 
consumption.  The complexity of the 1-D multi-bank structure as shown in Figure 1 can be further 
reduced if the modified 2-D memory structure is employed. 
 The reintroduce of fast Fourier transform [7] were described at the scalar level with 
complicated index expressions.  It is not easy to map the algorithm into the specific architecture 
directly.  The situation changes and becomes more amenable to automation when the FFT is 
related to a factorization of the discrete Fourier transform matrix with factors that are Kronecker 
products of diagonal matrices, or permutation matrices, or smaller transform matrices [8]. 
 
             (3) k r N k r k r k rQ TW B TW B× × ×= ⋅ = ⋅ ×
×
)I
Q
or 
  .           (4) k r k r N k r k rT B TW B TW× × ×= ⋅ = ⋅
 The DIF and DIT twiddle matrices both can be factorized into cascading of a multi-block 
radix-r twiddle matrix, a diagonal multiplying matrix and then a multi-block radix-k twiddle matrix 
as 
              (5) 
1 1
0 0
(n
r r
b
k r k k r k
n n
T T T
− −
×
= =
= ⋅ Ω ⋅ ⊗⊕ ⊕
or 
              (6) 
1 1
0 0
n
k k
b
k r k r r r
n n
Q Q I
− −
×
= =
= ⊗ ⋅ Ω ⋅⊕ ⊕
 The DIF twiddle matrices Tk and Tr and the DIT twiddle matrices Qk and Qr can be further 
partitioned.  A matrix-vector representation of the radix-2 16-point DIF FFT is shown in Eq. (7).  
To derive this equation, we will get the DIF twiddle matrix  from Eq. (4) and then factorize the 
matrix recursively in the order of 
42
T
32 2
T × , 2(2 2) 2T × × , and (( 2T 2 2) 2)× × × .  Given a radix-2 DIF twiddle 
matrix , we can directly find the required information for the FFT recursive matrix factorization 
including all the twiddle factor multiplier matrices and all the DIF sub-twiddle matrices.  
Moreover, it also provide the information for all the radix-2 based FFT algorithms including radix-2, 
radix-22, radix-23, radix-24, split-radix, and mixed radix.  
2n
T
l 4
2 2 3
7 3 1 3 1 1 1 1
2 2 2 2 2 2 22 2 2
0 0 0 0 0 0 0 0
 [ ] (  ) [ ]  (  )  [ ] (  ) [ ]k k kb b bb l
n n k n n k n k
32
X T T I T I T
= = = = = = = =
= ⋅ Ω ⋅ ⊗ ⋅ Ω ⋅ ⊗ ⋅ Ω ⋅ ⊗⊕ ⊕ ⊕ ⊕ ⊕ ⊕ ⊕ ⊕ I x⋅   (7) 
 Fig. (2.a), (2,b), and (2.c) show the DIF pipeline structure, factorized matrices, and the signal 
flow graph of the 16-point FFT, respectively.  It can be seen that there are some strong connection 
or equivalent relationship among the structures, signal flow graphs, and factorized matrices.  The 
identity matrix of Kronecker product indicates the required buffers for the hardware structure and 
the stride distance for the signal flow graph.  It is very helpful for the designer to understand all 
the three representations because each form has its strength.  For the short length FFT, the signal 
flow graph can show clearly all the interconnections of the data flow.  For the long-length FFT, it 
might be much easier to employ the properties of permutation matrices to derive the new algorithm 
or architecture. 
implementation of the 128-point FFT with radix-23 butterflies followed by radix-24 butterflies.  
The interconnection is also quite simple as shown in Fig. 3.  Since the output vectors are in the 
bit-reverse order, there is as output memory for data reordering to get the vectors in linear order.  
It should be noted the pipeline FFT modules in Fig. 3 are novel PP-MDC structures with two 
block data in the parallel-in parallel-out order.  Thus, the arrangement for all the vector data 
can be very efficient and simple. 
(2) Time-Multiplexer/Parallel-Array:  This is a bit-reverse-input linear-output structure as shown 
by Eq. (6).  The matrices Qk are computed in the sequential order and Qr are employed by the 
parallel arrays.  This is also a register-based parallel-pipeline structure with simple 
interconnection.  The interconnections between the front-end and back-end stages are also very 
simple and similar to the first type.  It can be seen from Table 1 that the data buffers required 
for the first two types are less than the last two types because there are no data reordering 
between two butterfly stages.   The input module as shown in Figure 1 is required to reorder 
the scalar input data into the bit-reverse vector form. 
 
Fig. 3. Block diagram of 8-path parallel 128-point radix-23 by radix-24 FFT implementation 
based on parallel-array/time-multiplexer structure. 
(3) Parallel-Array/Parallel-Array: The FFT has linear inputs and linear outputs.  The equation for 
this type can be derived from Eq. (5).  The data transferred from one parallel array to the other 
parallel array cannot be in the right place and right time.  Therefore, extra memory buffers are 
required for data reordering..  The first three types need only one extra memory at different 
location.  However, the number of registers required for this type is higher that that of the other 
two types because the structure of parallel-array needs more registers than that of 
time-multiplex. 
(4) Time-Multiplexer/Time-Multiplexer:  Both input and output vectors to and from the parallel 
FFT are N-cycles.  The latency is defined as cycles required from the first data in to the first data 
out of the block.  The second type is that two blocks of data enter the processor at the same time 
and leave in the serial order.  The advantage is that the adder utilization is enhanced from 50% to 
100% and the throughput of the FFT is doubled.  However, it cannot be applied to some 
applications where the two data streams have to appear at the same time.  The problem is resolved 
in the proposed novel parallel-pipeline structure identified as the type three.  In the final novel type, 
the even and odd sequences of one data block are entered simultaneously. 
  
Fig. 4. Categories of FFT pipeline computation structures: (a) traditional SDF structure with 
serial-in serial-out FFT (b) traditional PS-MDC structure with parallel-in serial-out FFT (c) novel 
PP-MDC structure with parallel-in parallel-out (d) novel P2-MDC structure for a FFT with 
parallel-in parallel-out. 
 
The disadvantages of the traditional pipelined FFT architectures are that the hardware 
including adders, multipliers and memory buffers is not efficiently implemented as shown in Table 
3.  The algorithm-architecture mapping study can conquer the problem and lots of higher hardware 
utilization and lower control complexity FFT architectures can be derived.  The throughput and 
latency for the traditional pipelined approaches can achieve N cycles for an N-point FFT.  With 
almost the same hardware complexity, the proposed new architectures can get the same throughput 
and latency performance with only N/2 cycles required.  Table 2 compares the hardware 
complexity and performance of the four parallel-pipeline types.  It can be seen that both type-4 
parallel-parallel and type 1 serial-serial MDC structure have the same hardware complexity.  
However, the throughput is doubled and the latency is halved for the novel structure.  If the 
