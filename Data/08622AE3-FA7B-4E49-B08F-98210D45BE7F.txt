  
1 
 
 
中文摘要 
    本研究計畫在前一年國科會計畫補助下所開發之帄行象棋程式「深象」基礎上，進一
步研究並改良開局資料庫、帄行搜尋模組與擴大空步(null move)搜尋技巧。在開局庫方面，
我們提出一個創新的建造開局庫之構想：以市面上可以取得的棋軟為師，我們可採集他們
在開局時的走步，來調整我們原有的開局庫，修正其中可能隱藏的錯誤。關於帄行搜尋，
我們進一步改良 DTS（Dynamic Tree Splitting）搜尋演算法，使用一些改良技巧來增進效能，
如控制 CPU 分配量與控制允許使用 DTS 搜尋演算法的最低層數。目前將初步 DTS 改良成
果應用在電腦西洋棋程式，成果有顯著提升，接著將此技術更進一步整合於「深象」中，
效能亦有所提升。另外我們設計一種改良的空步搜尋方法並以整合在「深象」中，其可以
增進搜尋速度且不會降低搜尋的正確性。本計畫另一個研究課題為將帄行計算的技術應用
於電腦黑白棋的研究及電腦圍棋中。我們首度將 UCT（Upper Confidence bounds applied to 
Tree）演算法應用於黑白棋中，除了探討 UCT 演算法在黑白棋中的適用性外，並根據黑白
棋的特性，提出部分改進策略，並使用 UCT 演算法與一些改進策略實作一個電腦圍棋程
式，取得不錯的進展，換言之，此演算法或許適合應用於其他困難的問題上，值得未來繼
續研究。 
 
關鍵詞：電腦象棋、電腦黑白棋、帄行搜尋、UCT 演算法 
 
 
英文摘要 
    This project was based on the parallel Chinese-chess program, Deep Elephant, which was 
developed in last year under the funds supported by National Science Council. We did further 
research on refining the opening book, the parallel search module, and the extension to the null 
move pruning. Regarding the opening book, a novel idea which can construct a new opening 
book was proposed here. Consequently, those moves in the opening books, which are played by 
the top Chinese-chess programs, are collected to revise our opening book and correct the 
potential mistakes in it. Furthermore, the dynamic tree splitting (DTS) algorithm was improved 
with some techniques to increase its performance such as distributing the computing power of 
CPUs efficiently and setting a threshold of the tree level to decide whether DTS is used or not. 
The results of the improvement are presently applied to the computer chess and have gained a 
  
3 
 
演算法，使用一些改良技巧來增進效能，如控制 CPU 分配量與控制允許使用 DTS 搜尋演
算法的最低層數，來使 DTS 搜尋演算法獲得更好的效能，目前將初步 DTS 改良成果應用
在電腦西洋棋程式，成果有顯著提升，接著將此技術更進一步整合於「深象」中，效能亦
有提升。另外我們設計一種改良的空步搜尋方法並已整合在「深象」中，其可以增進搜尋
速度且不會降低搜尋的正確性。且透過實驗分析結果，我們發現擴大空步搜尋的新方法，
在帄均狀態下可以展開較小的搜尋樹，且比單純使用標準空步搜尋有更佳的棋力。 
另一方面，在電腦黑白棋（Othello/Reversi）的研究中，目前最強的電腦程式可以輕鬆
的擊敗最強的人類棋手。早在 1980 年，The Moor 黑白棋程式曾擊敗世界冠軍。在 1997 年
時，由 Michael Buro 所發展的 Logistello[4]更以 6：0 的比數打敗當時人類的冠軍 Takeshi 
Murakami。當時，像這樣的優勢在其他的棋類是空前未有的，例如在西洋棋，最好的西洋
棋程式棋力大約等於當時的人類冠軍；而在圍棋，大多數的人則可以輕鬆地擊敗當時最強
的圍棋程式。 
因此本計畫另一個研究課題為將帄行計算的技術應用於電腦黑白棋的研究及電腦圍棋
中。我們首度將 UCT（Upper Confidence bounds applied to Tree）演算法實作於黑白棋中，
除了探討 UCT 演算法在黑白棋中的適用性外，並根據黑白棋的特性，提出部分改進策略。
並使用此演算法初步實作一個電腦圍棋程式，效果尚可。 
 本研究計畫成果報告說明如何改良「深象」的開局資料庫與加入擴大空步剪裁演算法，
以大幅提升「深象」的搜尋效能。另外亦說明如何改良 DTS 帄行搜尋演算法來增進效能並
初步在西洋棋及象棋上證明是有效的。在另一課題上，我們在報告中說明如何將 UCT（Upper 
Confidence bounds applied to Tree）演算法實作於黑白棋中，並對其演算法在黑白棋中的適
用性做出相關的分析。此外亦將 UCT 演算法實作於電腦圍棋程式中，初步得到不錯成效。 
 
貳、研究目的 
 
電腦象棋的研究主要可以分為開局、中局、殘局三個階段。在開局階段的目的是要取
得先手；中局是戰鬥的展開；到殘局時已是整盤棋的尾聲，在得勢的基礎上要取得最後勝
利，處於劣勢則希望謀和。在比賽時，一盤棋的戰鬥時間是有限的，而開局階段子力繁多，
且棋步大多有固定著法，我們可以將開局部份常有的佈局記錄下來存成開局庫，將來在遇
到相同盤面時，不必再經過搜尋，可直接從開局庫取得。以一般開局需要十至二十回合來
看，這樣不僅可以節省大量搜尋時間，而且可以形成比較穩當的開局。此外，有些開局的
陷阱的深度是搜尋無法達到的，利用開局庫，可以避免掉入對方的開局陷阱中。所以我們
  
5 
 
在搜尋深度夠深且非處在將軍盤面時使用較為安全。Ernst Heinz 在 1999 提出一種改良作法
[10]，其原理為依據不同的搜尋深度決定空步剪裁淺層搜尋的深度。而後 Tabibi 在 2002 年
提出更好的策略改進空步剪裁[17]，不但使得搜尋節點更少，且更重要的是在被迫走步的盤
面還能使用空步搜尋。 
再來關於帄行搜尋的演算法方面，先前學者亦也提出數種較知名的方法。其中一種稱
為 PVS（Principal Variation Splitting）搜尋演算法，其原理是依照深度優先搜尋的一種演算
法。首先，PVS 搜尋演算法會先從根節點（root）開始，從最左邊展開 PV 節點到深度為 N
（預設搜尋深度）的地方，之後，傳回值至 N-1 層的 PV 節點，由該 PV 節點做分派 CPU
的帄行搜尋，將各棵子樹各自交由一個 CPU 處理，而當該 CPU 做完該子樹的搜尋後，則
進入閒置（idle），等待下一次的分派。EPVS（Enhanced Principal Variation Splitting）搜尋
演算法[12]是將 PVS 搜尋演算法做更進一步的改良，其精神與 PVS 搜尋演算法是一樣的，
但是在處理 CPU 閒置時，有著更好的作法。DTS（Dynamic Tree Splitting）搜尋演算法[11]
與 PVS 搜尋演算法及 EPVS 搜尋演算法也是很相似，但是 PVS 搜尋演算法及 EPVS 搜尋演
算法是屬於需要由一個主 CPU（Master）去安排工作給其它 CPU（Slave），是一種主從式
架構（Master-Slave）。而 DTS 搜尋演算法的每個 CPU 的地位是相同的，不必經過特別指定
的 CPU 才可安排工作給其它 CPU，各個 CPU 會將本身處理子樹的資訊放在共享記憶體
（shared memory）中，方便讓其它來幫忙的 CPU 使用。 
在黑白棋研究方面，1997年Logistello擊敗人類世界冠軍達到高峰，其作者Michael Buro
更提出多項技術，其研究成果如模式(pattern)評估法[5]、快速的 MPC（Multi-ProbCut）搜
索演算法[4]、自我學習功能[6]等，都深深地影響後來的電腦黑白棋發展。因為電腦黑白棋
已經發展到一定的水準以上，因此在本計畫中我們首度嘗詴利用新發展的 UCT 演算法來解
決它。UCT(Upper Confidence bounds applied to Trees)演算法是一種蒙地卡羅方法的擴展應
用，是由兩位匈牙利研究人員 Levente Kocsis 與 Csaba Szepesvari 發明的一種新的演算法
[15]。後來由 Sylvain Gelly 與 Yizao Wang 實作在圍棋程式 Mogo 中[18]，而 2007 年的春季，
MoGo 在 9 路圍棋的比賽中擊敗了實力強勁的業餘棋手，在 19 路圍棋的比賽中也擊敗了實
力稍弱的業餘棋手，充分展示 UCT 演算方法的能力。而 UCT 演算法的主要精神是對當前
候選的走步進行大量的模擬，而這樣的模擬必頇達到一種帄衡，既要嘗詴目前的最佳走步，
還要搜索目前非最佳的走步，以發現其中可能隱藏的好步，以確保不會因為先前的估計錯
誤而錯失妙招。 
 
肆、研究方法 
  
7 
 
取得棋軟按鍵位置
仍有待查盤
面？
程式開始
載入盤面
設定電腦思考
是
程式結束
電腦出步時間
>1秒？
取得由開局庫所得
的走步
取得由搜尋所得的
走步
是
否
否
盤面狀態是否
改變？
電腦已出步
仍在思考
是
否
等待電腦出步
掃描盤面
 
 
圖 1. 開局庫自動建構之系統流程圖 
接著要準備給測詴棋軟幫我們思考走步的盤面，我們需要從現有的開局庫取得盤面，
以「深象」目前的開局庫為例，我們可以從起始盤面的節點開始，藉由該盤面的走步，用
  
9 
 
我們把這樣的盤面被稱作強迫走子盤面(zugzwang)，強迫走子盤面雖然在象棋中局很少
見，不過卻常常出現在殘局中，幸好，帶驗證空步搜尋多少解決了這問題。使得空步搜尋
在殘局也能使用。 
而空步搜尋主要得益於利用淺層的搜尋裁減掉一些可能無益的分枝，但這個減少深度
的淺層搜尋產生了一些策略盲點，就是水帄效應(horizon effect)[2]。但淺層搜尋因子 R 愈
大，意味著空步搜尋愈淺，搜尋速度越快，但伴隨的水帄效應越大，所以在早期，常用 R=1
來減少水帄效應的風險。但根據西洋棋多年實驗結果，R=2 的效果，似乎好過於太保孚的
R=1 和過於冒進的 R=3。後來的適應性空步剪裁，在搜尋深度較淺的部分採用 R=2，在深
度較深的部份採用 R=3，比單純使用 R=2 效果來的好。但 R=3 依然具有很大的誘惑力，後
來出現的帶驗證空步裁減，就使用 R=3，用來加速減少驗證時所花費的額外時間，證實也
有不錯的效果。 
關於擴大空步搜尋演算法的改良，我們採用減少廣度精確性用來增加深度準確性的策
略，剪裁掉一些可能無用的分枝，進而提升搜尋的速度。且借鏡帶驗證的空步搜尋裡的驗
證方法，如果空步搜尋傳回的分數落在這半隻兵的分數間，我們就用驗證的方式來減少誤
砍的機會，且由於驗證時也會有額外的時間花費，我們借鏡帶驗證空步搜尋，增加淺層搜
尋因子 R，以彌補驗證搜尋時額外的花費；但由於淺層搜尋因子 R 會影響空步搜尋的速度，
且過大的淺層搜尋因子 R 會帶來嚴重的水帄效應，所以我們限制在一定深度時，才使用驗
證搜尋用來減少水帄效應。圖 3 為擴大空步搜尋演算法流程圖，其詳述演算法的細節與參
數，關於其函數與參數的確切意義請參照原論文[23]。 
擴大空步搜尋演算法，保留了原本空步搜尋的好處，並下探半隻兵的分數，並驗證其
是否可以剪裁，並借鏡帶驗證的空步剪裁使用 R=3 加速，彌補驗證時所花費的時間，並為
了避免水帄效應，在搜尋深度夠深時，才驗證可否在我們容許範圍內進行剪裁。雖然擴大
空步搜尋演算法使得搜尋速度更優於原本的空步搜尋，但也繼承原先空步搜尋的盲點，就
  
11 
 
們會呼叫寧靜搜尋來避免水帄效應；如果搜尋深度不為 0，則我們再判斷是否是被將軍的
盤面，因為被將軍的盤面如果產生空步，對手可以立刻把將軍吃掉，此時並不適合使用空
步搜尋，所以必頇做原本該做的搜尋，如果不是被將軍的盤面且搜尋深度大於 1(因為驗證
時會把搜尋深度減 1，如果搜尋深度不大於 1，就算驗證也沒有驗證的效果)，我們就產生
空步，讓原本輪我方走的盤面交給對方走；此時搜尋深度必頇減去淺層搜尋因子 R，此處
我們結合帶驗證空步搜尋採用 R=3，用來彌補等會兒驗證是否誤砍時所花費的時間，且由
於我方不走步，所以還要將深度多減 1，接下來仍頇判斷搜尋深度(depth-R-1)是否為 0，如
果搜尋深度為 0，依然必頇呼叫寧靜搜尋避免水帄效應，如果搜尋深度不為 0，為了避免我
們等會兒驗證時 R=3 帶來的水帄效應，我們需檢測目前搜尋深度是否大於 8 層且必頇檢測
beta-alpha 是否大於等於半隻兵的分數(40 分)，因為 beta-alpha 若小於 40 分，代表我們之前
假設連走兩步所得實際獲得利益至少為半隻兵的前提不符；如果深度大於 8 且 beta-alpha
大於等於 40 分 ,則我們此時遞迴呼叫 search(beta-40,beta,depth-R-1, verify)，且深度為
depth-R-1，但必頇注意的是，我們不能使用 (beta-1,beta)的零窗口搜尋，而必頇使用
(beta-40,beta)的窗口搜尋，因為我們除了需要知道分數是否大於等於 beta 外，我們還需要
確切知道分數是否落在 beta-40 到 beta 之間，反之，如果深度不大於 8 或 beta-alpha 小於 40，
則我們呼叫 search(beta-1,beta,depth-R-1,verify)，且深度為 depth -R-1，且使用(beta-1,beta)
的零窗口加速搜尋。如果傳回的結果為 fail high 且此時搜尋結果需要驗證時(verify=true)，
則我們比照帶驗證的空步搜尋，我們會將其標註下來(fail_high=true)且做一個更深且不帶驗
證的搜尋，其深度也就是比原本搜尋深度為 depth 更少一層，如果驗證後發現分數依然 fail 
high，我們就以 depth -1 層的搜尋結果當成是我們原本要搜尋的結果，省下一層的搜尋節點
數，但是如果驗證結果沒有 fail high，代表這個盤面為強迫走子的盤面(zugzwang)，我們必
頇乖乖地產生走步，重做作原本該做的搜尋。 
  
13 
 
則我們認為我們的假設成立，並將其剪裁，若傳回結果不是 fail high，則我們認為如果冒然
將其剪裁風險很大，必頇重新產生走步進行原本該做的搜尋。 
結合了帶驗證空步搜尋後，就算遇到強迫走子盤面時，也可以多數避開而不使用空步
搜尋，但由於強迫走子盤面在中局很少發生，於是我們在中局時使用擴大空步搜尋的策略，
在殘局時才轉用帶驗證擴大搜尋策略。 
(3) DTS 改良演算法 
我們針對 DTS 演算法提出 2 種改良的分法，第 1 種為控制 CPU 分配量。當我們遇到
分割點（Split point）時，我們不一口氣將所有的 CPU 都分配下去做子樹的搜尋，而是先保
留若干個 CPU 來幫忙其它的 CPU 工作。譬如說：在 8 個 CPU 的環境下，當我們遇到分割
點（Split point）時，原本的 DTS 搜尋演算法是將 8 個 CPU 都各別安排一棵子樹去做搜尋，
但我們在 8 個 CPU 裡保留了 2 個 CPU 先不安排子樹去工作，而是將這保留的 2 個 CPU 先
去幫忙那 6 個 CPU 完成各自的子樹搜尋，如圖 5 所示。 
 
圖 5. 有 8 個 CPU 時，只先分 6 個 CPU 的示意圖 
如此一來，先提升原先 6 個子樹的搜尋效率，加快找到降低期望搜尋範圍，使得後面
Split point 
8 個 CPU 時，先只分 6 個 （-20,10） 
） 
（-20,10） 
） 
（-20,10） 
） 
（-20,10） 
） 
（-20,10） 
） 
（-20,10） 
） 
（-20,10） 
） 
（-10,5） 
） 
（-10,5） 
） 
（-10,5） 
） 
（-10,5） 
） 
（-10,5） 
） 
（-10,5） 
） 
（-10,5） 
） 
（-10,5） 
） 
預留兩個 CPU 先來幫忙這邊 
  
15 
 
0 層以上每個節點都可以做 DTS 搜尋演算法的分割，那整體的分割點就會變成很多很多；
而譬如說我們控制一定要在第 4 層以上才可以做 DTS 搜尋演算法的分割，那這樣第 0、1、
2、3 層都不會發生分割的動作，所以相較於沒有控制的情形，我們的整體分割點就會比較
少。由此觀之，我們控制的層數越高，分割點的數量就會越少；但是若高過於某一個層數
後，則又會將 DTS 搜尋演算法的效能打折扣，舉例來說，如果我們限制在層數 8 以上才可
以做 DTS 搜尋演算法的分割，雖然整體分割點可能會變成只有一個，但是每個子樹則退化
變成只有一個 CPU 在工作，則完全失去了 DTS 搜尋演算法的效果。 
DTS 搜尋演算法的作者 Robert M. Hyatt 也曾在論文中提到希望能找到“理想”的分割
點，才去做分派 CPU 工作的動作，避免有 CPU 是做白工。可惜的是，“理想”的分割點
難以判別，故實際上尚無法避免 CPU 做白工的情形。我們則是統一限定一定要到某個層數
以上，才可以做 DTS 搜尋演算法的分割。這樣的作法，也是因為考量一個 CPU 不應該在
整個遊戲樹底下較低的層數做分割，因為這樣只取得到一棵小子樹的工作量，然後很快的
做完，就馬上又要與其它 CPU 做溝通來取得工作，有大材小用之感。因此安排各 CPU 合
理的工作量，避免浪費與其它 CPU 溝通的負擔。 
(4) 以 UCT 演算法解決電腦黑白棋 
UCT(Upper Confidence bounds applied to Trees)演算法是一種蒙地卡羅方法的擴展應
用，其主要精神是對當前候選的走步進行大量的模擬，而這樣的模擬必頇達到一種帄衡，
既要嘗詴目前的最佳走步，還要搜索目前非最佳的走步，以發現其中可能隱藏的好步。 
UCT 演算法會為每一種走步計算出一個索引值，然後按照索引值最高的走步出招。索
引值的決定則是由該走步的贏率與修補分數二部分共同加總決定。然而為何不單單考慮走
步的贏率而有修補分數的出現呢？這是為了避免 UCT 演算法會一直選擇贏率高的走步進
行模擬，不會選擇贏率低的走步進行模擬，因而錯失當前贏率低的好步。所以 UCT 演算法
設計了一個機制，在選擇走步時，使得計算次數少的候選走步的修補分數較大，以提升選
  
17 
 
 
圖 7. UCT 演算法決策樹建立過程 
 
2/4 
0/1 1/2 2/3 
0/1 
3 7
1/1 
(j) 
0/1 
0/1 
2/4 
0/1 1/2 2/4 
0/1 
3 8
1/2 
(k) 
0/1 
0/1 
0/1 
C 
B 
C 
E 
D D 
B 
1/1 
1/1 
1 (a) (b) (c) 
1/1 
1/1 
0 
1/2 
1/1 0/1 
2/3 
1/1 0/1 1/1 
(d) (e) (f) 
B 
C 
(h) 
2/4 
0/1 0/1 1/2 1/1 
0/1 
5 2/4 
0/1 0/1 1/2 2/2 
0/1 
3 6
1/1 
0/1 0/1 1/1 1/1 
2/4 
(g) (i) 
A B B 
  
19 
 
共有九十一個測詴盤面，此時我們仍使用深象做為測詴的棋軟。我們的測詴結果如表 1 所
示。 
 
 勝 和 負 
深象 29 31 31 
棋軟投票 31 31 29 
表 1. 實驗二的結果統計 
 
雖然這次的實驗，我們已經將目標放在深象開局庫中子節點數目較少，比較有可能出
錯的這些盤面，但結果仍不甚理想。所以我們檢視這些棋軟的搜尋時間及深度，是否有問
題。對於棋天大聖來說，它套譜時一個盤面大約花費一分鐘左右，搜尋 13 至 14 層的深度。
象棋奇兵則是花三十秒至一分鐘左右，大概搜尋 12 至 13 層的深度。象棋旋風則是花費五
分鐘至六分鐘左右，搜尋深度到達 15~16 層的深度。我們猜想實驗二失敗的原因，是否因
為棋軟搜尋時的深度及時間的設定不足，導致結果不佳的因素？ 
對於實驗二的結果，我們進行了一次對結果的測詴。這次我們把目標放在讓棋軟的搜
尋得更深看是否可以扭轉這些對棋軟投票出來、但結果為負的這些盤面。 
對於這些負的二十九個盤面，我們嘗詴讓其中的一個棋軟去搜尋十六層的深度。這二
十九盤用棋軟搜尋十六層的結果，其中有十盤會與深象相同，依我們的看法，這十盤會從
負的轉變成和的，所以結果會變成如表 2 所示。 
 
 勝 和 負 
深象 19 41 31 
棋軟投票 31 41 19 
表 2. 實驗二改進後的結果統計 
 
實驗三 
我們接著利用實驗二對棋軟套譜的方法，進行實驗三。在這個實驗中，為了驗證，這
個方法可以適用於全部開局庫，而不是限定於前六層內的資料，所以這次改從開局庫內隨
機取出 100 個盤面。隨機取得盤面的方法，基於開局庫內所有節點的大小相同，皆為 256 
byte。所以，我們可以取一個亂數 x ，讓它介於 0 到整個開局庫所有盤面的數目-1，再乘
以 s (s = 256)，便可以到開局庫中的任一節點，將該節點的盤面讀出。 
接著我們使用旋風搜尋 16 層進行套譜。套譜完成後，找出其中出步相同的有 52 局，
  
21 
 
 
 
 
 
 
 
 
 
 
 
 
 
圖 9. 實驗四測詴結果 
針對每一個棋軟來說，我們列出它與別人的走步不同時，另兩個棋軟是否可以幫它改
進的情形，如表 3 所示。 
 
 
 
 
 
 
 
 
 
 
表 3. 實驗四各別棋軟勝負表 
針對天機、棋天大聖棋軟來說，改進成果不大，但對於棋軟象棋旋風來說，卻有不錯
的成果。我們猜測可能是因為市售的棋軟，可能有參差不齊的棋力，而得到的天機、棋天
大聖的棋力較高，而象棋旋風棋力較差。所以對天機、棋天大聖的改進不大，但對象棋旋
風卻有顯著的改進。因為在實驗三和實驗四的測詴盤面是相同的，所以我們將兩個實驗得
到的走步放在一起看的話，比對兩個實驗的結果，我們將實驗四的投票結果用在實驗三的
 另 2 個相同贏 自已出步贏 和局 
天機 3 2 3 
棋天大聖 2 2 8 
象棋旋風 7 1 3 
總計 12 5 14 
100個測試盤面
69盤其他情況
31盤有2同1不
同的走步
12勝 14和 5負
  
23 
 
在此方法中，我們使用 32 種不同的常用開局（如表 4）輪先後手共 64 盤，每局雙方
限時三十分鐘，勝得 2 分，和得 1 分，負得 0 分，逾時不算。 
 
32 種不同開局盤面 走步 
(p 為兵，c 為炮，h 為馬，r 為俥，e 為相，a 為仕 
     ”+”為進，”-”為退，”.”為帄) 
0 中炮過河車互進七兵對屏風馬帄包
兌車 
c2.5 h8+7 h2+3 r9.8 r1.2 p7+1 r2+6 h2+3 p7+1 c8.9 r2.3 
a4+5 
1五七炮對屏風馬進７卒--紅左直車對
黑右直車左炮過河 
c2.5 h8+7 h2+3 r9.8 r1.2 p7+1 h8+9 h2+3 c8.7 r1.2 r9.8 
c8+4 
2 順炮直車對橫車 c2.5 c8.5 h2+3 h8+7 r1.2 r9+1 
3 順炮橫車對直車 c2.5 c8.5 h2+3 h8+7 r1+1 r9.8 
4 仙人指路對卒底包轉順包 p7+1 c2.3 c2.5 c8.5 h2+3 h8+7 
5 仙人指路三步虎對卒底包衝卒渡河 p7+1 c2.3 h2+3 p3+1 c2.1 p3+1 h8+9 h2+1 r1.2 e7+5 
6 飛相進三兵對左中包 e3+5 c8.5 h2+3 h8+7 r1.2 r9.8 h8+7 
7 飛相對飛象 e3+5 e7+5 p7+1 h2+1 h8+7 r1+1 r9+1 
8 飛相對過宮包 e3+5 c8.4 h2+3 h8+7 r1.2 p7+1 
9 飛相對士角包 e3+5 c2.4 h8+7 p3+1 p3+1 h2+3 h2+3 r1.2 r9.8 
10 五六炮對反宮馬 c2.5 h2+3 h2+3 c8.6 r1.2 h8+7 c8.6 
11 中炮過河車七路馬對屏風馬兩頭蛇 c2.5 h8+7 h2+3 r9.8 r1.2 p7+1 r2+6 h2+3 h8+7 p3+1 
12 中炮進三兵對左炮封車轉列炮--紅
兩頭蛇 
c2.5 h8+7 h2+3 r9.8 r1.2 c8+4 p3+1 c2.5 p7+1 
13 對兵局 p7+1 p7+1 h8+7 h8+7 r9+1 
14 松山馬對屏風馬左三步虎 h8+7 h8+7 c2.5 r9.8 h2+3 c8.9 r1+1 h2+3 
15 松山馬對屏風馬飛右象 h8+7 p3+1 c2.5 h8+7 h2+3 h2+3 r1+1 e3+5 
16 中炮巡河炮對屏風馬左象    c2.5 h8+7 h2+3 r9.8 p7+1 p7+1 h8+7 h2+3 c8+2 e7+5 
17 五七炮不挺兵對屏風馬進七卒 c2.5 h8+7 h2+3 r9.8 r1.2 h2+3 h8+9 p7+1 c8.7 r1.2 r9.8 
18 中炮進七兵對三步虎    c2.5 h8+7 h2+3 r9.8 p7+1 c8.9 h8+7 
19 五七炮進三兵對屏風馬 c2.5 h8+7 h2+3 r9.8 r1.2 h2+3 p3+1 p3+1 h8+9 p1+1 
20 中炮對左包封車後補列包 c2.5 h8+7 h2+3 r9.8 r1.2 c8+4 p3+1 c2.5 
21 順炮直車對緩開車 c2.5 c8.5 h2+3 h8+7 r1.2 p7+1 p7+1 h2+3 h8+7 c2+4 
22 大列手包 c2.5 c2.5 h2+3 h8+9 r1.2 r9.8 h8+9 h2+3 r9.8 r1.2 
23 小列手包 c2.5 c2.5 h2+3 h8+7 r1.2 r9.8 r2+6 c8.9 r2.3 r8+2 
24 五六炮對屏風馬      c2.5 h8+7 h2+3 h2+3 r1.2 r9.8 h8+9 p3+1 c8.6 c8+2 
25 中炮過河車對反宮馬 c2.5 h2+3 h2+3 c8.6 r1.2 h8+7 p7+1 p7+1 r2+6 h7+6 
26 中炮橫車對反宮馬 c2.5 h2+3 h2+3 c8.6 r1+1 h8+7 r1.4 r9.8 h8+7 a4+5 p5+1 
p3+1 
  
25 
 
 勝 敗 和 
原本深象 9 32 23 
中局使用擴大空步搜尋的帄行化深象 32 9 23 
表 7. 實戰結果 3 
原本深象得 9×2+23=41 分，中局使用擴大空步搜尋的四核心版深象得 32×2+23=87
分，改良版深象勝率為 87/128≒68%。 
最後測詴原本單核心版深象使用標準空步搜尋和四核心版中局使用擴大空步搜尋、殘
局使用帶驗證擴大空步搜尋的深象進行 64 盤對戰，結果如表 8。 
 
 勝 敗 和 
原本深象 11 38 15 
中局使用擴大空步搜尋、殘局使用帶驗證
擴大空步搜尋的帄行化深象 
38 11 15 
表 8. 實戰結果 4 
原本深象得 11×2+15=37 分，中局使用擴大空步搜尋，殘局使用帶驗證擴大空步搜尋
得 38×2+15=91 分，改良版深象勝率為 91/128≒71%。 
由此數據看來，擴大空步搜尋策略的確對提升整體棋力有顯著之成效，且容易整合其
他空步技術。除了可以用在中局加速，在殘局也可以整合帶驗證空步搜尋，使得在殘局可
以比較安全的使用空步搜尋。以原本深象來說，在殘局並未使用任何空步搜尋加速，但在
使用帶驗證擴大空步搜尋之後，其搜尋層數也大大提升，尤其在帄行化版本效果顯著，勝
率已達七成，對於整體棋力有顯著的提升。 
 
(3) DTS 改良演算法 
為了驗證第 1 種改良方法，首先我們使用電腦西洋棋程式 Crafty 20.14 版將之改寫以
做實驗，它是將 Thread 事先產生好，然後等待使用。我們分別測詴了在 8 個 Thread 裡，一
開始只先分派使用 7、6、5 個 Thread 做實驗，而如果是一次就分 8 個 Thread，則便是原來
Crafty 的設計方法。我們共測詴了 12 個盤面，每個盤面都是做了 10 次測詴取得帄均值，
  
27 
 
分割點數 233705 264680 298095 337305 
盤面 8     
節點數 124865972 104556795 83713019 88489349 
執行時間 12.248 9.933 9.435 10.149 
nps 10.17 9.55 8.86 8.69 
分割點數 48935 70219 81880 97362 
          
盤面 9 8 個分 8 個 8 個分 7 個 8 個分 6 個 8 個分 5 個 
節點數 150312497 119661654 113392313 114222004 
執行時間 16.928 13.954 13.666 14.024 
nps 8.87 8.55 8.28 8.09 
分割點數 68498 74866 92889 109577 
盤面 10         
節點數 131627473 100331129 93760317 108496435 
執行時間 14.652 12.323 11.139 13.227 
nps 8.97 8.7 8.39 8.18 
分割點數 67887 70924 80333 107641 
盤面 11         
節點數 463911754 415212983 372429271 448475335 
執行時間 44.696 41.594 38.505 46.904 
nps 10.38 9.96 9.66 9.57 
分割點數 181262 223639 243041 334047 
盤面 12 8 個分 8 個 8 個分 7 個 8 個分 6 個 8 個分 5 個 
節點數 243505821 198563038 168337433 204779837 
執行時間 25.839 21.971 19.29 23.647 
nps 9.41 9.02 8.69 8.62 
分割點數 105914 118849 125093 175541 
表 9. 第 1 種改良方法的實驗結果 
在表 9 中節點數代表該盤面我們搜尋到 15 層的總搜尋節點數；執行時間為程式做完
15 層後總共所花費的時間（秒）；nps 為 node per second，在此其單位為百萬，即帄均每秒
跑了多少百萬個節點數；分割點數是指搜尋到 15 層，總共有多少個節點做了 DTS 搜尋演
算法的分割運算。而 8 個分 8 個就是代表我們有 8 個 Thread，而遇到分割點時，我們就 8
個 Thread 全用；8 個分 7 個就是代表我們有 8 個 Thread，在遇到分割點時，只使用了 7 個
Thread 去對該分割點做 DTS 搜尋演算法的運算，保留了 1 個 Thread 在另外的分割點做 DTS
搜尋演算法的運算，以此類推。 
不失一般性的，我們也有做 8 個分 4 個，但由於這樣的分法會造成總搜尋的節點數會
  
29 
 
而若是 8 個 Thread 只先分 5 個，卻造成比 8 個 Thread 先分 6 個的整體搜尋節點數變多，這
是由於留下的 3 個 Thread 可能會有做白工的情形。而由實驗數據我們看到，8 個分 6 個，
可以降低原本需要搜尋的總節點數，雖然多增加了一些分割點造成的額外負擔，但是整體
搜尋時間上是有明顯的進步，所提升的效能帄均約為 20%，如表 10 所示。 
 
 
8 個分 8 個的 
執行時間（T1） 
8 個分 6 個的 
執行時間（T2） 
提升效能 
（T1 / T2 %） 
盤面 1 25.13 18.503 135.82% 
盤面 2 52.864 47.592 111.08% 
盤面 3 34.805 30.753 113.18% 
盤面 4 43.924 39.501 111.20% 
盤面 5 60.42 54.119 111.64% 
盤面 6 19.077 16.421 116.18% 
盤面 7 44.674 39.728 112.45% 
盤面 8 12.248 9.435 129.81% 
盤面 9 16.928 13.666 123.87% 
盤面 10 14.652 11.139 131.54% 
盤面 11 44.696 38.505 116.08% 
盤面 12 25.839 19.29 133.95% 
  帄均為 120.57%  
表 10. 第 1 種改良方法的提升效能 
上個實驗所提到做白工的情形，主要是因為在某一節點做單 CPU 的展開搜尋，假定
原本可能有 35 個子節點要搜尋，但是它可能在第 2 個子節點就發生 fail high。所謂 fail high
即是該節點的傳回值已經大於原本期望搜尋範圍（Window）的 Beta 值，由於展開的子節
點是有經過走法排序後的結果，如果第 2 個子節點已經發生 fail high 了，代表後面的子節
點就算去進行搜尋，其結果也不會影響 Beta 值，所以後面的子節點全部可以切捨掉，也稱
為 Beta 切捨（Beta cut）。在此狀況下，35 個分支就只有 2 個分支被完整展開，其它 33 個
分支被切捨掉了。而要是使用帄行搜尋，若是分了 6 個 CPU 在此節點，則當第 2 個 CPU
做完後發現了 fail high，代表後面子節點的 4 個 CPU 先前所做的工都是白費的。 
Fail high 發生的機率與棋類程式裡面的走法排序與審局函數有著相當大的關聯。而在
第 1 種改良方法的實作下我們發現，要是程式的 fail high 發生機率越高，則 CPU 的分配方
法是一開始就全部給，只留下少量的 CPU 去幫忙。反之，要是程式的 fail high 發生機率越
低，則 CPU 的分配方法是一開始分配出去的比較少，額外留下幫忙的 CPU 要留較多。 
我們使用 Crafty 20.14 版，根據大略的實驗統計，程式中每個盤面發生 fail high 的機
  
31 
 
＝2.1，故我們保留了 2 個 CPU，再加上原本的 1 個 CPU，這樣總共就為 3 個 CPU，在 Crafty 
20.14 版估計會得到最好的效能。 
相同的，若是將 Crafty 20.14 版使用在擁有 16 個 CPU 的機器去執行，假定節點的帄
均分支度仍然是 35，fail high 機率也是 0.9，我們可以判定其效能表現最好的情形，應該發
生在 16 個分 14 個，仍然保留 2 個 CPU。同理推廣到使用在有 N 個 CPU 的機器，我們判
定最好的效能應該也是在 N 個分 N-2 個，保留 2 個 CPU，會得到最好的效能。 
承上，假定 Crafty 20.14 版的 fail high 機率只有 0.5，而節點的帄均分支度仍然是 35，
在擁有 16 個 CPU 的機器去執行的情形下，則我們可以判定其效能表現最好的情形就是不
必要做任何的保留了，因為（1 + 1 / 0.5）＝3，保留 3 個 CPU。若是在 N 個分 N-3 個，保
留 3 個 CPU 會得到最好的效能。我們分別測詴了控制在第 2、3、4、5、6 層才允許使用
DTS 做分割的實驗，實驗數據如表 11 所示： 
盤面 1 第 2 層 第 3 層 第 4 層 第 5 層 第 6 層 
節點數 262596288 240068172 180681646 225264456 235690478 
執行時間 43.99 26.64 19.13 23.77 24.96 
nps 6 9 9.4 9.5 9.4 
分割點數 597554 112764 32618 18112 7851 
盤面 2      
節點數 437185194 420784697 393902630 479855313 540510027 
執行時間 78 45.58 38.97 47 52.31 
nps 5.6 9.2 10.1 10.2 10.3 
分割點數 1250696 258592 63302 34121 16748 
盤面 3      
節點數 379279737 313906554 251095171 273982127 311146229 
執行時間 69 34.69 25.16 27.47 31.29 
nps 5.4 9 10 10 9.9 
分割點數 1119902 210878 47812 20329 9459 
盤面 4      
節點數 466477295 440656358 382751580 398780270 442716925 
執行時間 77 45.08 34.52 39.42 43.9 
nps 6 9.8 10.9 11 10.8 
分割點數 1231656 264648 72312 22172 10891 
盤面 5      
節點數 616139568 586957297 523619016 561946935 584758085 
執行時間 104 67 49.03 53.02 55.04 
nps 5.9 9.9 11 10.7 10.8 
  
33 
 
由實驗結果得知，將其控制在“第 4 層”才允許做 DTS 搜尋演算法的分割所得到的
總搜尋節點數是最少的，而分割點數則是從第 2 層到第 7 層一路下降，如圖 14、圖 15 所
示。 
 
 
 
 
 
 
 
 
 
圖 14. 第 2 種改良方法中盤面的總節點數示意圖 
 
 
圖 15. 第 2 種改良方法中盤面的分割點數示意圖 
為了使圖 14、圖 15 的曲線起來較明顯，我們依然從 12 個盤面中，只取總節點數相
近的 6 個盤面在圖 14、圖 15 中表示。雖然要是拉高到第 5、6 層，分割點數會減少更多，
但是整體搜尋節點數又開始額外增加。這邊的整體搜尋節點數額外增加原因是因為層數拉
高，則在越高的層數我們的期望搜尋範圍（Window）還沒達到縮小的情形，我們一開始都
是使用大範圍的期望搜尋範圍（Window）去做搜尋，所以相對的整體搜尋節點就會增加。 
我們將程式控制在第 4 層才允許做 DTS 搜尋演算法，與先前 Crafty 20.14 預設是在第
3 層做比較，發現我們的帄均效能又提升 31%左右。詳細數據如表 12 所示。 
 
 
總節點數 
0 
100000000  
200000000  
300000000  
400000000  
第 2 層 第 3 層 第 4 層 第 5 層 第 6 層 第 7 層 
盤面 1 
盤面 6 
盤面 8 
盤面 9 
盤面 10 
盤面 12 
 
分割點數 
0  
200000 
400000  
600000  
800000  
第 2層 第 3層 第 4層 第 5層 第 6層 第 7層 
盤面 1 
盤面 6 
盤面 8 
盤面 9 
盤面 10 
盤面 12 
  
35 
 
能。我們也將此兩種改良方法實作在電腦象棋程式「深象」中，其中第 1 種改良方法由於
分割點造成的額外負擔所花費的時間比節省的總搜索節點數所賺到的時間是差不多的，所
以若是改成 8 個分 6 個，效能是沒有多大的提升。而在第 2 種改良方法的部分，我們也是
將深象控制在第 4 層才允許做 DTS 搜尋演算法，會獲得最好的效能。其實驗數據如下表 14
所示。 
 
測詴盤面 
控制在 
第 2 層的 
執行時間 
控制在 
第 3 層的 
執行時間 
控制在 
第 4 層的 
執行時間 
控制在 
第 5 層的 
執行時間 
控制在 
第 6 層的 
執行時間 
盤面 1 75.7 64.0 50.2 64.3 78 
盤面 2 88.2 79.0 67.1 77.2 90.2 
盤面 3 86.8 76.3 63.4 74.9 87.9 
盤面 4 69.5 58.1 46.6 57.4 66.2 
盤面 5 89.0 75.8 63.8 74.2 88.9 
盤面 6 66.4 52.0 40.9 50.8 61.6 
盤面 7 74.6 68.4 55.4 66.8 80.2 
盤面 8 58.9 49.6 38.6 46.4 56.7 
盤面 9 80.1 70.8 56.8 69.2 78.0 
盤面 10 73.5 62.3 47.7 60.1 72.2 
表 14. 第 2 種改良方法的實驗在深象的結果 
 
(4) 以 UCT 演算法解決電腦黑白棋 
為了探討 UCT 演算法在黑白棋上的適用性問題，是否可以達到如同 Mogo 在 9 路圍
棋上的表現，我們必頇對 UCT 演算法進行實驗。首先，我們選擇 Wzebra 為主要的測詴對
象，我們知道 Wzebra 在眾多的電腦黑白棋中享負盛名已久，其實力非常地強勁，因此用來
當成裁判，評估我們實作的 UCT 演算法程式的棋力，應具有相當高的準確性。其次，我們
將實驗的盤面概分為二類，第一類為我們實作的程式與 Wzebra 對戰盤面，第二類為 Wzebra
自我對戰盤面。而我們的實驗方法，是將所有對戰過程中的盤面，改由我們實作的程式進
行模擬，每個盤面均執行五次，每次進行一百萬次的 UCT 演算法模擬，並將結果與 Wzebra
評估的結果作比較，以判斷我們實作程式出步的好壞，是否能正確地走到 Wzebra 認為的好
步。而在這裡要特別說明的，為何要以我們實作的程式對每個盤面執行五次呢？其原因在
於 UCT 演算法是蒙地卡羅法的一種擴展應用，在決策樹納入一個新的走步時，會利用到蒙
地卡羅法獲得一個勝負結果，UCT 演算法仍保有這種蒙地卡羅法的精神，因此每次的模擬
結果是有可能不同的，執行五次較能看得出 UCT 演算法會選擇的著手。 
  
37 
 
 
表 15. 第一類型盤面實驗數據 
我們知道 UCT 演算法越接近棋局結束時是越準確的，原因在於越接近棋局結束，其
模擬的次數夠多，可以探到底，因此能找出最佳的走步，我們的實測也顯示這樣的結論。
我們拿其中一個例子進行分析，如圖 16 的盤面、其實驗數據如表 15。其中最上方列的地
方為測詴盤面的所對應的輪黑白狀況與第幾手資訊，我們將每手盤面的走步分為最佳、次
佳、第 3 佳與其他走步，並將 Wzebra 所評估的分數記錄在表格中的括號之內，藉以知道盤
面走步好壞分佈狀況。另外，由於每個盤面我們均以 UCT 演算法模擬 5 次，為了解 UCT
演算法所選擇走步的狀況，可否走到盤面的最佳或者次佳位置，因此我們在括號之前記錄
下模擬結果的命中次數，如第 35 手的盤面，其最佳走步的分數為+19 分，而模擬 5 次中有
5 次均命中最佳的走步。 
觀察第 35 手的盤面，可以發現 UCT 演算法已經可以準確地看到第 35 手的最佳走步，
因此第 35 手之後的走步應該也很準確，但第 37 與 39 手盤面卻沒有走出最佳走步，而只是
走出會贏的走步，其原因為何呢？我們推論其原因在於 UCT 演算法無法分辨出盤面大贏小
贏、大輸小輸的狀況。如第 37 手時，Wzebra 評估前 3 好走步的分數是差不多的，對 UCT
演算法而言，其贏率會相當的接近；而第 39 手時，白方已經取得很大的優勢，雖最好至第
3 好走步的分數彼此差距極大，但是無論走哪一步，白方幾乎可以賭定獲得勝利，因此 UCT
演算法計算贏率時也會相當的接近。同理，第 36 與 38 手輪黑走子，由於盤面已呈現出不
論走哪一走步黑為必敗的局勢。對 UCT 演算法來說，其贏率也會相當接近，無法分辨該走
步輸得多或少。因此，當盤面局勢顯現出某一方有相當大的優或劣勢時，UCT 演算法無法
分辨究竟哪個走步會大輸小輸、大贏小贏。 
2. 我們以 Wzebra 自我對戰的盤面當成測詴的對象，根據實際測詴的結果， UCT 演
算法在此類型盤面中，其準確度約在第 40 手左右。第 40 手之後的盤面，UCT 演
 
第 35 手 
(輪白) 
第 36 手 
(輪黑) 
第 37 手 
(輪白) 
第 38 手 
(輪黑) 
第 39 手 
(輪白) 
命中次數 
(最佳走步分數) 
5 (+19) 1 (-19) 0 (+20) 0 (-36) 0 (+62) 
命中次數 
(次佳走步分數) 
0 (+ 4) 1 (-23) 5 (+15) 5 (-38) 0 (+46) 
命中次數 
(第 3 佳走步分數) 
0 (+ 2) 1 (-25) 0 (+14) 0 (-42) 5 (+38) 
命中次數 
(其他走步) 
0 (+ 2) 2 (+ 2) 0 (+ 2) 0 (+ 2) 0 (+ 2) 
  
39 
 
原本可獲勝的路徑贏率較低，使得 UCT 演算法無法找出最佳走步。 
3. 由上述第 1、2 點，我們可知 UCT 演算法比較不適合用在黑白棋中。若雙方棋力
相當，則盤面局勢會如同 Wzebra 自我對戰盤面，UCT 演算法無法看出最好走步，
因而輸了整盤棋。若雙方棋力有差距時，假設我方棋力較高，在無法判別大贏小
贏狀況，可能使我方原本大贏的局勢變為小贏，最後被對手翻盤。假設我方棋力
較弱，則可能造成原本小輸的局勢變成大輸，而永無取勝之可能。 
我們知道 UCT 演算法在大量模擬的過程中，會建立一棵決策樹，用來記錄每一種走
步的拜訪次數、得到分數與其他資訊。決策樹建立的過程中，會選擇當前走步的最佳索引
值，當選擇到一種先前從未計算過的走步時，UCT 演算法就會將它納入決策樹中，並利用
蒙地卡羅法以隨機的方式求得該走步最後的勝負狀況。接著，UCT 演算法就會由下而上地
更新資訊，從根節點走至未計算過走步路徑上的所有走步均會被更新，以提供下次模擬時
使用。為了要提升 UCT 演算法在黑白棋中的準確性，我們針對了蒙地卡羅法中的 Heuristic、
UCT 更新分數與贏率選擇的部分，提出了下列的改進策略： 
A. 蒙地卡羅法 Heuristic 改進 
原先我們在蒙地卡羅法隨機產生盤面所使用的 heuristic，只是簡單地按照走子順序
(Move Order)，依盤面位置給予不同的權重值，權重值越高的走步，該走步會被選擇的
機率越高。我們提出如下的改進策略： 
(1)有穩定子：當前的合法走步中，有部分走步是會造成盤面穩定子增加時，則給
予造成穩定子的這些走步總共 90%的機率，彼此間的機率均相等；而剩餘的 10%
機率則給予不會造成穩定子的走步，彼此間的機率也相同。 
(2)無穩定子：當前的合法走步中，無任何的走步是會造成盤面穩定子增加。此時
若有 C-square 的走步，給予 10%機率，若有 X-square 的走步，則給予 5%的機率。
剩下的機率則按剩下走步的 degree 數量差距，依差距的比例，給予不同的機率。 
B. 更新分數之改進 
我們知道 UCT 演算法更新分數的作法，是由決策樹的所納入的走步（即執行蒙地
卡羅法的盤面）開始，往上循著原先選擇的路徑一直更新到根節點，然而這樣的作法
極有可能會造成模擬次數的浪費。如果目前決策樹已將接近葉節點的某子樹建立完
成，偏偏由於該子樹的索引值較高，造成 UCT 演算法一直選擇該子樹的狀況出現，直
到模擬相當數量時，別的子樹索引值才高過該子樹，而使得 UCT 演算法去選擇別的走
步。 
    為了解決這樣的問題，我們在原先UCT演算法更新分數的方式中，加入了Min-Max
  
41 
 
[1] D. F. Beal, “Experiments with the null move”, Advances in Computer Chess, 5, pp.65–79, 
1989. 
[2] H. J. Berliner, “Chess as Problem Solving: The Development of a Tactics Analyzer”, Ph.D. 
thesis, Carnegie-Mellon University, Pittsburgh, PA, 1974. 
[3] M. G. Brockington, “KEYANO Unplugged – The Construction of an Othello Program,” 
Technical Report 97–05，Department of Computing Science, University of Alberta. 
[4] M. Buro, “Experiments with Multi-ProbCut and a New High-Quality Evaluation Function for 
Othello,” NECI Tech. Report 96, Princeton, N.J., 1997. 
[5] M. Buro, "From Simple Features to Sophisticated Evaluation Functions," First Int'l Conf. 
Computers and Games (CG'98), Lecture Notes in Computer Science, Springer-Verlag, New 
York, 1558, 1998. 
[6] M. Buro, "Toward Opening Book Learning," International Computer Games Association 
Journal, 22–2, pp. 98–102, 1999. 
[7] M. Campbell, A. J. Hoane, Jr., F.-H. Hsu, ”Deep Blue”, Artificial Intelligence, 134, p.57–83, 
2002. 
[8] C. Donninger, “Null move and deep search: Selective search heuristics for obtuse chess 
programs”, International Computer Games Association Journal, 16–3, pp.137–143, 1993. 
[9] G. Goetsch, and M. S. Campbell, “Experiments with the null-move heuristic”, Computers, 
Chess, and Cognition, pp.159–168, 1990. 
[10] E. A. Heinz, “Adaptive Null-Move Pruning,” International Computer Games Association 
Journal, 22, pp.123–132, 1999. 
[11] R. M. Hyatt, “The DTS High-Performance Parallel Tree Search Algorithm”, International 
Computer Games Association Journal, 20–1, pp.3–19, 1997. 
[12] R. M. Hyatt, B. W. Suter, and H. L. Nelson, “A Parallel Alpha/Beta Tree Searching 
Algorithm”, Parallel Computing , 10–3 , pp.299-308, 1989. 
  
43 
 
[25] 張修正, “電腦象棋開局庫之改進研究,” 國立臺灣師範大學資訊工程研究所碩士論文, 
2008. 
[26] 白聖秓, “DTS 演算法效能改良之研究,” 國立臺灣師範大學資訊工程研究所碩士論文, 
2007. 
[27] 方裕欽, “UCT 算法的適用性及改進策略研究－以黑白棋為例,” 國立臺灣師範大學資
訊工程研究所碩士論文, 2008. 
 
柒、計畫成果自評 
 
本研究計畫原預期完成之工作項目及成果說明如下： 
I. 完成電腦象棋開局庫自動建構方法與套譜系統。 
II. 發展擴大空步剪裁演算法，並取得相當成效。 
III. 改良 DTS 演算法，將之應用於電腦西洋棋與象棋，效能加速顯著。 
IV. 以 UCT 演算法解決電腦黑白棋，雖然尚無法擊敗目前一流的電腦黑白棋程式，但實作
之程式已有相當之棋力，未來可根據已開發的系統與發現之弱點，繼續加以改良。 
V. 將 UCT 演算法實作在電腦圍棋上，已展現不錯的效能。 
VI. 我們已開始將本計畫所獲得的一些技術經驗用在其它的棋類(如六子棋)上，看是否能
增進其棋力。 
 
在本計畫中所發展之相關演算法之細節，請分別參考我們的論文[23][25][26][27]。 
 
我們已參加之比賽如下： 
(I) 2008 年 9 月 25 日至 27 日參加由臺南大學、長榮大學與中華民國人工智慧學會主
辦的『2008 智慧型計算論壇暨全球九路電腦圍棋賽』中之電腦圍棋比賽。榮獲第 4 名及一
萬元的獎金。此次比賽優勝者名單如下：冠軍 MoGo (France)、亞軍 GO Intellect (USA)、季
軍 JIMMY (Taiwan)、殿軍 Erica (Taiwan 台灣師大，我們的程式)、第 5 名 Fudo GO (Japan)、
第 6 名 CPS (Taiwan)、第 7 名 GO Star (China)、第 8 名 GO King (Taiwan)。 
(II) 2008年9月28日至10月4日參加 International Computer Games Association主辦(地
點在中國北京)的 13th Computer Olympiad。比賽電腦圍棋及六子棋。電腦圍棋共 20 隊報名，
赴大陸地區研究心得報告 
甲、黃士傑的心得報告 
                                                   
計畫編號 NSC 96-2221-E-003-008 
計畫名稱 象棋程式「深象」之改進及電腦黑白棋相關問題之研究 
出國人員姓名 
服務機關及職稱 
黃士傑 
國立臺灣師範大學資訊工程研究所 博士班研究生 
出國時間地點 2008/9/28-2008/10/5 
大陸地區 
研究機構 
Beijing Golden Century Golf club, Fangshan, Beijing, China. 
 
工作記要：          2008 年 11 月 24 日撰寫 
13
th
 Computer Olympiad 
時間：2008/9/28-2008/10/5 
地點：Beijing Golden Century Golf club, Fangshan, Beijing, China. 
出差人員：黃士傑 
參加組別：Go(9x9) 
程式名稱：Erica 
程式作者：黃士傑 
 
1.比賽過程簡述 
這次我們帶著 8 核心的 Server 到北京，不過當我們出發到機場的途中，才發現
忘記帶硬碟，因此這次幾乎都以 notebook 比賽，最後在 18 隊中得到第 11 名，
是這次比賽最大的遺憾。如果全程都用 Server 比賽，估記可以拿到第 7 到第 9
名。9 月 28 日，當我踏上北京的土地時，有一種非常新鮮的感覺：這是我第一
次來到中國，而且是來到中國的首都與心臟–北京。近年來，中國在各方面都進
步得非常快速，在棋類遊戲這個領域也不例外，現在電腦象棋比賽的獎牌可以說
穩，使得比賽常常中斷，因此一直到 10/1 早上才比完。10/2 主辦單位帶我們遊
歷了萬里長城與頤和園，由於適逢中國的國慶黃金週，各地簡直可以說是人山人
海，光是萬里長城，放眼望去我估記絕對超過 10 萬人。10/3 之後，19 路圍棋組
的比賽，我有觀戰並吸取經驗，最後於 10/5 順利回台灣。 
 
2.比賽結果 
(各輪結果與對局棋譜請參考下列網址：
http://www.grappa.univ-lille3.fr/icga/tournament.php?id=180) 
 
Rank Program Country Hardware 
1 Many Faces of Go USA cluster 4x8x3.2GHz 
2 Leela BEL Remote quad or loan PC 
3 MoGo FRA Huygens Cluster 
4 Fuego CAN 8x2.66 GHz 
5 Yogo CHN 2x1.66 GHz notebook 
6 Steenvreter NLD 8x2.66 GHz Xeon 
7 Aya JPN 8x2.66 GHz Xeon 
8 Goboh FRA 8x2.66 GHz AMD 
9 Jimmy TWN 4x2.66 GHz Q9450 
10 Go Intellect USA 8x3.17 GHz Xeon or loan PC 
11 Erica TWN loan PC 
12 Fudo Go JPN 4x3.4 GHz + 2xPlayStation3 
13 GoLois FRA cluster 20x2x1.86 GHz 
14 Flexgo CHN 8x2.0 GHz 
15 CPS TWN 2x3.1 GHz core 2 duo 
16 MC_ark JPN 4x2.4 GHz Q6600 
他應該是第一個發現可以將 UCT 應用為圍棋的人，因為 UCT 論文的作者是
他室友。由於今年 Steenvreter 改動不多，因此今年只得到第 6 名。 
(2) 與 Fudo Go 的作者：我與作者 GG 平常就以 Email 互通訊息，他是一位十分
有禮貌的先生，在 UCT 的一種技術 RAVE 給了我極大的啟發。Fudo Go 是一
個穩健的程式，每步 Simulation 次數上百萬次，不會出大錯，弱點是碰到攻
殺等比較複雜的盤面時，會走出怪步。由於我使用 notebook 與他比賽，我的
程式 Erica 兩盤都輸了，最後 Fudo Go 只拿到第 12 名。 
(3) 與 Aya 的作者：Aya 的作者 Yamashita 也很有禮貌，他的程式 Aya 是日本第
一，因此 Erica 與 Aya 在比賽時，幾乎所有的日本參賽者都來我們旁邊觀戰。
由於 Jimmy 的作者顏士淨教授將他們的 4 核心機器借給我，於是 Erica 得以
在完全實力下與 Aya 對抗。Erica 對 Aya 一勝一敗，而且在第二局的最後，出
現了雙活的局面十分有趣，使得大家議論紛紛。由於 Erica 有處理雙活，因
此應對無誤而獲勝。或許是經此一敗的打擊，Yamashita 隔天馬上帶來了 8 核
心的機器出賽，讓 Aya 最後拿到了第 7 名。 
 
4.旁聽研討會 
這次的 CONFERENCE ON COMPUTERS AND GAMES 2008 研究會，地點就在 
比賽會場的旁邊，我也挑了幾場去旁邊。以下針對其中一篇論文作介紹。 
論文名稱：An Improved Safety Solver in Go using Partial Regions  
作者：Xiaozhen Niu and Martin Müller 
這篇論文很有創意，是在證明一個局部圍棋盤面的棋塊死活狀態。在地域完全封
閉的情況下，判別的準確度很高，速度也很快。但是在地域不完全封閉的情況下
仍然會出錯。因此 Steenvreter 的作者質疑，目前這個模組似乎無法實際應用在
UCT-based 的程式；報告人 Niu 回答，在時間充足的情況下，在棋局後半的階段
赴大陸地區研究心得報告 
乙、劉雲青的心得報告 
                                                    
計畫編號 NSC 96-2221-E-003-008 
計畫名稱 象棋程式「深象」之改進及電腦黑白棋相關問題之研究 
出國人員姓名 
服務機關及職稱 
劉雲青 
國立臺灣師範大學資訊工程研究所 碩士班研究生 
出國時間地點 2008/9/28-2008/10/5 
大陸地區 
研究機構 
Beijing Golden Century Golf club, Fangshan, Beijing, China. 
 
工作記要：          2008 年 11 月 24 日撰寫 
13
th
 Computer Olympiad 
時間：2008/9/28-2008/10/5 
地點：Beijing Golden Century Golf club, Fangshan, Beijing, China. 
出差人員：劉雲青 
參加組別：Connect6 
程式名稱：NTNU C6 
程式作者：劉雲青 
摘要 
此次發開程式 NTNU C6 赴北京參與 2008 ICGA Tournaments 13th Computer 
Olympiad 中六子棋Connect6 的比賽，旨在探討現今Connect6上採用 threat-based 
strategy 的實作和研究議題。現今 Connect6 程式所應用的程式結構和演算法對於
審局函數和盤面資訊處理的方法上耗費的運算時間較長，因此我們這次比賽的程
式亦針對這項缺點，結合 hash table 的方法提出改進。 
 
目的 
      10/1 為 round 7~round 9，為比賽進行的最後一天。前三名的程式依舊強
勁，保持領先，其他各程式間仍是有輸有贏。雖然 NTNU C6 前一天進行了修正
的工作，但仍然仍然不敵對手，這天剛好對到的二個對手為前三名程式中的
Bitstronger 和 NEUConn6，吃下了六敗的戰績。 
最後的排名結果如下表所列: 
Rank  Program  Country  Score  
1  NCTU6-Lite  TWN  17.0  
2  Bitstronger (Connect6)  CHN  16.0  
3  NEUConn6  CHN  13.0  
4  Bead Connect and Chess Combine  CHN  9.0  
5  Kavalan  TWN  8.0  
6  NEU6Star  CHN  8.0  
7  ML  CHN  6.5  
8  CV6  CHN  5.5  
9  Dream 6  CHN  4.0  
10  NTNU C6  TWN  3.0  
以下是我們在會場所拍攝的一些照片。 
 
學生劉雲青在比賽會場: 北京金世紀高爾夫球場 
 Connect6 所有參賽者合影，中間為國立交通大學吳毅成教授 
參加比賽心得 
這次的六子棋比賽參賽者較往年多，競爭亦較以往激烈，水平也較以往高。
前三名的程式明顯地較其他程式來得優異，其積分均大幅領先其他的程式。六子
棋程式的開發技術目前日趨成熟，各隊所用之技術相似性高，主要是受到去年冠
軍程式 X6 的影響(X6 今年未參賽)，但發展空間仍然很大，尤其是六子棋才發展
三到四年左右，一些關鍵性的問題仍未有良好的解決方案，未來應該會有許多新
的技術出現。 
這次比賽決定不沿用以前的程式比賽，而希望開始採用和探索其他的技術和
方法，因此我的程式是重新撰寫而成，故開發時間較短，尚未完全成熟，導致成
績上較不理想，然而其他參賽者對此程式的評價不差，甚至好看其未來的發展。 
這次 NTNU C6 所嘗詴以 preprocessing 的方式將一些重要的盤面資訊事先儲
存到 hash table 中，大大得提升了程式的運算效能，雖然是以 Notebook 應戰，配
備上比不上其他隊所用的 PC，但在做 Threat space search 到 25 層以上均在 3 ~ 5
秒以內完成，出步的速度大幅度領先，也吸引了一些與會者的注意與討論，因此
這個方法看來是大有可為，值得繼續發展和研究。 
旁聽研討會經過和心得 
雖然這次的目的主要是為參加比賽，但同時舉行的研討會亦歡迎參賽者參
加，加上剛好和我們所參加的比賽在時間上不相衝突，便全程聆聽和參與討論。 
    在西洋棋 Chess 之後，圍棋 Go 成為電腦棋類界的新聖杯。近年由於 UCT 
Algorithm 在 9x9 Go 上取得突破性的成功，不難發現目前主要的研究趨勢為探
討 UCT Algorithm 的各個面向: 從 UCT 的平行化到多人遊戲的 UCT Algorithm 均
出席國際學術會議心得報告 
 
甲、黃士傑的心得報告 
                                                   
計畫編號 NSC 96-2221-E-003-008 
計畫名稱 象棋程式「深象」之改進及電腦黑白棋相關問題之研究 
出國人員姓名 
服務機關及職稱 
黃士傑 
國立臺灣師範大學資訊工程研究所 博士班研究生 
會議時間地點 
2008/9/28-2008/10/5 Beijing Golden Century Golf club, Fangshan, Beijing, 
China. 
會議名稱 13th Computer Olympiad 
參加組別 Go(9x9) 
 
工作記要：          2008 年 11 月 24 日撰寫 
13
th
 Computer Olympiad 
時間：2008/9/28-2008/10/5 
地點：Beijing Golden Century Golf club, Fangshan, Beijing, China. 
出差人員：黃士傑 
參加組別：Go(9x9) 
程式名稱：Erica 
程式作者：黃士傑 
 
1.比賽過程簡述 
這次我們帶著 8 核心的 Server 到北京，不過當我們出發到機場的途中，才發現
忘記帶硬碟，因此這次幾乎都以 notebook 比賽，最後在 18 隊中得到第 11 名，
是這次比賽最大的遺憾。如果全程都用 Server 比賽，估記可以拿到第 7 到第 9
名。9 月 28 日，當我踏上北京的土地時，有一種非常新鮮的感覺：這是我第一
次來到中國，而且是來到中國的首都與心臟–北京。近年來，中國在各方面都進
9 路圍棋組的比賽，賽程安排是 9/28-9/30，但是由於會場的網路與電力非常不
穩，使得比賽常常中斷，因此一直到 10/1 早上才比完。10/2 主辦單位帶我們遊
歷了萬里長城與頤和園，由於適逢中國的國慶黃金週，各地簡直可以說是人山人
海，光是萬里長城，放眼望去我估記絕對超過 10 萬人。10/3 之後，19 路圍棋組
的比賽，我有觀戰並吸取經驗，最後於 10/5 順利回台灣。 
 
2.比賽結果 
(各輪結果與對局棋譜請參考下列網址：
http://www.grappa.univ-lille3.fr/icga/tournament.php?id=180) 
 
Rank Program Country Hardware 
1 Many Faces of Go USA cluster 4x8x3.2GHz 
2 Leela BEL Remote quad or loan PC 
3 MoGo FRA Huygens Cluster 
4 Fuego CAN 8x2.66 GHz 
5 Yogo CHN 2x1.66 GHz notebook 
6 Steenvreter NLD 8x2.66 GHz Xeon 
7 Aya JPN 8x2.66 GHz Xeon 
8 Goboh FRA 8x2.66 GHz AMD 
9 Jimmy TWN 4x2.66 GHz Q9450 
10 Go Intellect USA 8x3.17 GHz Xeon or loan PC 
11 Erica TWN loan PC 
12 Fudo Go JPN 4x3.4 GHz + 2xPlayStation3 
13 GoLois FRA cluster 20x2x1.86 GHz 
14 Flexgo CHN 8x2.0 GHz 
15 CPS TWN 2x3.1 GHz core 2 duo 
模組，因此 Simulation 中只要碰到死活問題就會非常的準確。他也說，其實
他應該是第一個發現可以將 UCT 應用為圍棋的人，因為 UCT 論文的作者是
他室友。由於今年 Steenvreter 改動不多，因此今年只得到第 6 名。 
(2) 與 Fudo Go 的作者：我與作者 GG 平常就以 Email 互通訊息，他是一位十分
有禮貌的先生，在 UCT 的一種技術 RAVE 給了我極大的啟發。Fudo Go 是一
個穩健的程式，每步 Simulation 次數上百萬次，不會出大錯，弱點是碰到攻
殺等比較複雜的盤面時，會走出怪步。由於我使用 notebook 與他比賽，我的
程式 Erica 兩盤都輸了，最後 Fudo Go 只拿到第 12 名。 
(3) 與 Aya 的作者：Aya 的作者 Yamashita 也很有禮貌，他的程式 Aya 是日本第
一，因此 Erica 與 Aya 在比賽時，幾乎所有的日本參賽者都來我們旁邊觀戰。
由於 Jimmy 的作者顏士淨教授將他們的 4 核心機器借給我，於是 Erica 得以
在完全實力下與 Aya 對抗。Erica 對 Aya 一勝一敗，而且在第二局的最後，出
現了雙活的局面十分有趣，使得大家議論紛紛。由於 Erica 有處理雙活，因
此應對無誤而獲勝。或許是經此一敗的打擊，Yamashita 隔天馬上帶來了 8 核
心的機器出賽，讓 Aya 最後拿到了第 7 名。 
 
4.旁聽研討會 
這次的 CONFERENCE ON COMPUTERS AND GAMES 2008 研究會，地點就在 
比賽會場的旁邊，我也挑了幾場去旁邊。以下針對其中一篇論文作介紹。 
論文名稱：An Improved Safety Solver in Go using Partial Regions  
作者：Xiaozhen Niu and Martin Müller 
這篇論文很有創意，是在證明一個局部圍棋盤面的棋塊死活狀態。在地域完全封
閉的情況下，判別的準確度很高，速度也很快。但是在地域不完全封閉的情況下
仍然會出錯。因此 Steenvreter 的作者質疑，目前這個模組似乎無法實際應用在
出席國際學術會議心得報告 
 
乙、劉雲青的心得報告                                                 
計畫編號 NSC 96-2221-E-003-008 
計畫名稱 象棋程式「深象」之改進及電腦黑白棋相關問題之研究 
出國人員姓名 
服務機關及職稱 
劉雲青 
國立臺灣師範大學資訊工程研究所 碩士班研究生 
會議時間地點 
2008/9/28-2008/10/5 Beijing Golden Century Golf club, Fangshan, Beijing, 
China. 
會議名稱 13th Computer Olympiad 
參加組別 Connect6 
 
 
工作記要：          2008 年 11 月 24 日撰寫 
13
th
 Computer Olympiad 
時間：2008/9/28-2008/10/5 
地點：Beijing Golden Century Golf club, Fangshan, Beijing, China. 
出差人員：劉雲青 
參加組別：Connect6 
程式名稱：NTNU C6 
程式作者：劉雲青 
摘要 
此次發開程式 NTNU C6 赴北京參與 2008 ICGA Tournaments 13th Computer 
Olympiad 中六子棋Connect6 的比賽，旨在探討現今Connect6上採用 threat-based 
strategy 的實作和研究議題。現今 Connect6 程式所應用的程式結構和演算法對於
審局函數和盤面資訊處理的方法上耗費的運算時間較長，因此我們這次比賽的程
式亦針對這項缺點，結合 hash table 的方法提出改進。 
 
      10/1 為 round 7~round 9，為比賽進行的最後一天。前三名的程式依舊強
勁，保持領先，其他各程式間仍是有輸有贏。雖然 NTNU C6 前一天進行了修正
的工作，但仍然仍然不敵對手，這天剛好對到的二個對手為前三名程式中的
Bitstronger 和 NEUConn6，吃下了六敗的戰績。 
最後的排名結果如下表所列: 
Rank  Program  Country  Score  
1  NCTU6-Lite  TWN  17.0  
2  Bitstronger (Connect6)  CHN  16.0  
3  NEUConn6  CHN  13.0  
4  Bead Connect and Chess Combine  CHN  9.0  
5  Kavalan  TWN  8.0  
6  NEU6Star  CHN  8.0  
7  ML  CHN  6.5  
8  CV6  CHN  5.5  
9  Dream 6  CHN  4.0  
10  NTNU C6  TWN  3.0  
以下是我們在會場所拍攝的一些照片。 
 
學生劉雲青在比賽會場: 北京金世紀高爾夫球場 
 Connect6 所有參賽者合影，中間為國立交通大學吳毅成教授 
參加比賽心得 
這次的六子棋比賽參賽者較往年多，競爭亦較以往激烈，水平也較以往高。
前三名的程式明顯地較其他程式來得優異，其積分均大幅領先其他的程式。六子
棋程式的開發技術目前日趨成熟，各隊所用之技術相似性高，主要是受到去年冠
軍程式 X6 的影響(X6 今年未參賽)，但發展空間仍然很大，尤其是六子棋才發展
三到四年左右，一些關鍵性的問題仍未有良好的解決方案，未來應該會有許多新
的技術出現。 
這次比賽決定不沿用以前的程式比賽，而希望開始採用和探索其他的技術和
方法，因此我的程式是重新撰寫而成，故開發時間較短，尚未完全成熟，導致成
績上較不理想，然而其他參賽者對此程式的評價不差，甚至好看其未來的發展。 
這次 NTNU C6 所嘗詴以 preprocessing 的方式將一些重要的盤面資訊事先儲
存到 hash table 中，大大得提升了程式的運算效能，雖然是以 Notebook 應戰，配
備上比不上其他隊所用的 PC，但在做 Threat space search 到 25 層以上均在 3 ~ 5
秒以內完成，出步的速度大幅度領先，也吸引了一些與會者的注意與討論，因此
這個方法看來是大有可為，值得繼續發展和研究。 
旁聽研討會經過和心得 
雖然這次的目的主要是為參加比賽，但同時舉行的研討會亦歡迎參賽者參
加，加上剛好和我們所參加的比賽在時間上不相衝突，便全程聆聽和參與討論。 
    在西洋棋 Chess 之後，圍棋 Go 成為電腦棋類界的新聖杯。近年由於 UCT 
Algorithm 在 9x9 Go 上取得突破性的成功，不難發現目前主要的研究趨勢為探
討 UCT Algorithm 的各個面向: 從 UCT 的平行化到多人遊戲的 UCT Algorithm 均
