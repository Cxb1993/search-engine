I行政院國家科學委員會專題研究計畫期末精簡報告
計畫名稱：k-分割距離問題之研究
計畫編號：NSC 98-2221-E -133-002 執行期限：98 年 8 月 1 日 至 99 年 7 月 31 日
主持人：陳彥宏 (Yen Hung Chen) Email：yhchen@tmue.edu.tw
一、中文摘要
本計畫是探討兩個k分割距離〔k partition-distance〕問題，分別為(1) k partition-distance(k-PD)
問題 (2) k partition-clustering(k-PC)問題。這兩個問題可以廣泛的被應用在生物資訊、資料
探勘及作業研究上。給定一個集合內有n個元素，一個分割(partition)是指將此n個元素分給
多個互斥的群(cluster) (每群包含的元素都不同)，最多可分成n群。對於相同的元素集合，
不同的分割方法將會產生不同的分割，所以在計算不同分割之間的距離並找出一致性分割
(consensus partition) 將會是一項重要的研究。本計畫介紹兩個不同的分割距離
(partition-distance)。兩分割P1及P2是一致(identical)定義為在P1（P2）中的每個群都會在P2
（P1）中找到一個相同的群。第一個分割距離可定義為移除元素的個數使得移除後兩個分
割會是一致的。當有k>2個分割時，分割距離為移除元素的個數使得移除後所有分割會是一
致的。k partition-distance問題定義為移除最少的元素個數，使得k個分割會變成一致的。如
果每個分割有相同個數的群，將兩個分割對齊(alignment)是指將每個在P1中的群對應到一個
P2中唯一的群。對於每一對群，我們可以計算這兩群的對稱差集(symmetric difference)的元
素個數。第二個分割距離定義為加總所有對稱差集的元素個數，對於每個在P1中的群及它
在P2中所對齊的群。當有k>2個分割時，分割距離為將所有k取2對分割的分割距離加總。k
partition-clustering問題是尋找最小分割距離使得k個分割會同時對齊。當k=2，這兩個問題
是一樣的且有時間複雜度為O(c3)的演算法可解決，c是2個分割中群的個數加總。當k>2，
這兩個問題為NP-complete。在此計畫中，當k>2，對於k-PD問題我們成功的設計了一個近
似演算法及一個啟發式演算法(heuristic algorithms)，對k-PC問題我們成功的設計1個啟發式
演算法，並對一些生物上的資料進行模擬。當k=2時，我們將設計一些時間複雜度在O(cn)
的有快速演算法來解 2-PD 問題。最後 , 我們時做所有的演算法在兩個網頁中
http://mail.tmue.edu.tw/~yhchen/KPDP.html 和 http://mail.tmue.edu.tw/~yhchen/kpc.html。
關鍵詞：
生物資訊、資料探勘、近似演算法、啟發式演算法、分群、分割、分割距離
1二、計畫內容
1. Introduction
Clustering is an interdisciplinary and fundamental research. The clustering problem involves
collecting data (elements) into some groups such that data in the same group will be similar to
one another and different from data in other groups [13]. Given a set of elements N, a partition
(or partition-based clustering) of N consists of dividing the set of elements into two or more
disjoint clusters (non-empty subsets of N) such that each element belongs to exactly one cluster
[11, 20]. The partition-based clustering is one type of major clusterings. In contrast to the
partition-based clustering, the hierarchical clustering is concerned with constructing a
hierarchical series of nested clusters of the given set of elements [11, 20].
Motivated by the reconstruction of the family structure from a set of individuals in biology,
many partitioning (clustering) algorithms have been well studied [1, 2, 4, 14, 15, 17]. Almudevar
and Field (1999), Konovalov et al.2 (2005), and Konovalov (2006) provided some reconstructing
full sibling clustering algorithms in order to deduce the family relationships of a set of organisms
based on DNA markers. Konovalov et al. (2004) implemented a java program for reconstructing
clusters of pedigree relationships by estimating an overall likelihood for alternative partitions.
Beyer and May (2003) developed a graph-theoretic approach to group a set of individuals into
full-sib families using single-locus co-dominant markers. Bagirov and Mardaneh (2006) designed
a modified global k-means algorithm applied to analysis of gene expression data.
Different partitioning algorithms will produce different partitions from the same set of
elements. How to assess the partitions (partitioning algorithms) and find a goodness partition are
important and interesting problems after some partitions have been generated. Hence, to compare
and validate cluster method consensuses have been widely studied in [1, 3, 6, 9, 10, 12, 15, 19, 21,
22]. Different distance functions between two or more partitions usually need to be computed by
different algorithms. In this project, we focus two the partition-distance function which had been
introduced by Almudevar and Field (1999), Gusfield (2002) and Konovalov et al.1 (2005), and
Berman et al (2007). Now, we describe the first partition-distance as follows. For two partitions
Pu and Pv, the two partitions are identical if and only if every cluster in Pu maps to the same
cluster in Pv (the converse is then forced) [10]. A partition-distance between two partitions is
defined as the number of elements that need to be deleted from both partitions such that the
remaining partitions are identical [1]. Given a set of elements N with two partitions of N, we use
n to denote the number of elements in N. The partition-distance problem is to delete the minimum
number of elements from each partition such that both remaining partitions become identical. For
this problem, Almudevar and Field (1999) gave an exponential-time exact algorithm in order to
find a good partition of the individuals (fisheries actually) into sibling groups. Butler et al. (2004)
used Almudevar and Field's algorithm to compare four partitions (partitioning algorithms) for
reconstructing full-sib pedigrees from DNA marker data. Gusfield (2002) proposed an
O(c3+n)-time algorithm by reduction of this problem to the maximum weighted assignment
problem [18], where c is the sum of the number of clusters of both partitions. Konovalov et al.1
(2005) also designed an O (c3+n)-time algorithm by reduction of this problem to the minimum
weighted assignment problem [18]. Note that both algorithms run in O (n3)-time because c=O (n)
3In this section, we describe a 2-approximation algorithm and a heuristic algorithm to solve the
k-PD problem and a heuristic algorithm to solve the k-PC problem. First, we present a fast
2-approximation algorithm when k=2. Then, we generalize it to any k > 2. Moreover, we
modify the 2-approximation algorithm to improve the correctness of the partition-distance. Final
we describe a heuristic algorithm for the k-PC problem.
The next lemma was shown by Gusfield (2002).
Lemma 1: [10] For any pair of elements in N and two partitions Pu and Pv, if the two elements
are together in one cluster of Pu (or Pv) but not together in any cluster of Pv (or Pu), then at least
one of the two elements need to be deleted from both partitions to make them identical.
2.1 On the 2-PD Problem
Given a set of elements N with two partitions Pu and Pv of N, a partition-distance between Pu
and Pv is defined as the number of elements that need to be deleted from Pu and Pv such that the
remaining partitions are identical. Let {Cu,1, Cu,2,…, Cu,} be clusters of Pu containing clusters
and{Cv,1, Cv,2,…, Cv,} be clusters of Pv containingclusters. For brevity, for any pair of clusters
Cu,iPu and Cv,jPv, 1iand 1j, we use the ( Cu,i,Cv,j) to denote symmetric difference of
both clusters Cu,i and Cv,j (i.e., {(Cu,i\ Cv,j)(Cv,j\ Cu,i) }) and(Cu,i,Cv,j) to denote intersection of
this pair of clusters (i.e., (Cu,iCv,j) ), respectively. For each pair of clusters Cu,iPu and Cv,jPv,
we first find all elements in symmetric difference and intersection of both clusters Cu,i and Cv,j,
respectively. Then, we perform the following Algorithm 1 to delete elements from Pu and Pv such
that the remaining partitions become identical. Let SAPX be the set of elements that are deleted by
Algorithm 1. Initially, SAPX has an empty set.
Algorithm 1: Method of elements deletion
For each Cu,iPu and Cv,jPv do
1. Find all elements in symmetric difference and intersection of both clusters Cu,i and Cv,j,
respectively.
2. If (|( Cu,i,Cv,j)|-|( Cu,i,Cv,j)|0) then
choose all elements in (Cu,i,Cv,j) to SAPX, and arbitrarily choose |( Cu,i,Cv,j)| elements in
( Cu,i,Cv,j) to SAPX
else
choose all elements in (Cu,i,Cv,j) to SAPX, and arbitrarily choose |(Cu,i,Cv,j)| elements in
( Cu,i, Cv,j) to SAPX.
3. Delete these elements that are chosen by step 2 for all clusters of Pu and Pv, respectively.
4. If | SAPX|=n then quit the algorithm.
Note that Step 4 is to speed up Algorithm 1 in practice. For any pair of clusters Cu,iPu and
Cv,jPv, a pair of elements are together in Cu,i (or Cv,j) but only one element in Cv,j (or Cu,i), that is,
one of these two elements belongs to(Cu,i, Cv,j) and the other belongs to(Cu,i, Cv,j). Hence, at
least one element of these two elements must be deleted from Pu and Pv so that the two partitions
are identical by Lemma 1. Clearly, for each pair of clusters Cu,iPu and Cv,jPv, Step 2 is to
5Algorithm APX-k-PD
Input: A set of elements N and a set of k partitions P={P1, P2,…, Pk}of N, k>1.
Output: A set of elements SAPXN.
1. SAPX.
2. For each cluster C in Pi , 1ik, sort elements in C.
3. For each pair of partitions PuP1 and Pv, 2vk, do
3.1. Use Algorithm 1 to choose some elements to SAPX and delete these elements from Pu and
Pv such that Pu and Pv are identical.
3.2. Delete the elements in SAPX for all clusters of other partitions.
End for
For each 2vk, we make the remaining partitions P1 and Pv identical after running Step 3.1.
Then, we delete these elements in SAPX for all clusters of other partitions to make remaining
partitions {P1, P2,…, Pv} identical in Step 3.2. Hence, after running Algorithm APX-k-PD, all
remaining partitions in P become identical.
Theorem 2. Algorithm APX-k-PD finds a 2-approximation solution of the k-PD problem in
O(kpn) time, where p is the maximum number of clusters of these k partitions.
Proof. We first analyze the time-complexity of Algorithm APX-k-PD as follows. Step 2 can be
done in O (kpn). Then, there are (k-1) iterations in Step 3. Step 3.1 runs in O (pn) time. Clearly,
Step 3.2 can be done in O (kn) time. As a result, the time-complexity of Algorithm APX-k-PD is
O (kpn) since kp.
Next, we prove the performance ratio of Algorithm APX-k-PD. Similarly, let SOPT be the
optimal solution of the k-PD problem. For any pair of partitions Pu and Pv with any pair of cluster
Cu,iPu and Cv,jPv, let a pair of elements in SAPX be one element in (Cu,i,Cv,j) and the other in
(Cu,i,Cv,j). We choose all such pairs of elements to SAPX in Step 3.1, and then delete them from
all partitions in Step 3.2. Moreover, all pairs of elements in SAPX are disjoint. However, for each
such pair of elements in SAPX, SOPT should include at least one of the two elements by Lemma 1.
Therefore, the performance ratio of Algorithm APX-k-PD is 2.
Now, we describe a simple heuristic algorithm to improve the correctness of the
partition-distance. This heuristic algorithm is modified by Algorithm 1. For the completeness, we
show this algorithm as follows.
Algorithm 2: Method of elements deletion
For each Cu,iPu and Cv,jPv do
1. Find all elements in symmetric difference and intersection of both clusters Cu,i and Cv,j,
respectively.
2. If (|( Cu,i,Cv,j)|-|( Cu,i,Cv,j)|0) then choose all elements in(Cu,i, Cv,j) to SAPX
else choose all elements in(Cu,i,Cv,j) to SAPX.
3. Delete these elements that are chosen by step 2 for all clusters of Pu and Pv, respectively.
4. If | SAPX|=n then quit the algorithm.
7we let D(,Nmax) denote that a partition has clusters and the maximum number of elements
per cluster is Nmax. We use two simulated data sets [6, 15]. The first data set is to test one
partition D(,1) and others are random creating partitions. The second data set is to test one
partition D(,10) and others are random creating partitions. These algorithms run on the same
workstation Sun Microsystems Sun4u Sun Ultra 5/10 UPA/PCI, cpu type is UltraSPARC-III
300MHZ, and the operating system is Solaris 7.
3.1 Simulation Test D(,1)
The first data set comes from the unrelated individuals with insufficient genetic information
(i.e., small number of loci and/or alleles) [6, 15]. Hence, we construct the first partition D(,1).
Other partitions are constructed byelements and randomly assign each element to a cluster. The
maximum number of clusters of each random partition is less than or equal to and the number
of elements per cluster is also less than or equal to. In this case, Gusfield's algorithm [10] runs
in O(n3) time but our approximation algorithm runs in O(n2) time for the 2-PD problem in the
worst case. Figure 1 presents a few experimental comparisons of expected performance
measurements for our approximation algorithm and Gusfield's (2002) algorithm. For example,
Butler et al. (2004) reconstructed 50 unrelated individuals described by four loci, each with four
alleles per loci. Hence, an instance of the first partition is D(50,1). In the case, an expected time
of our approximation algorithm runs in 2.6ms and Gusfield's (2002) algorithm runs in 15ms for
k=2. We also simulate our approximation algorithm for k=5 and k=10, respectively. It is clear
that our approximation algorithm runs faster than Gusfield's (2002) algorithm from Figure 1.
Moreover, the partition-distance of our approximation solution is at most twice the
partition-distance of the optimal solution. Table 1 shows the performance ratios that are the
2-approximation solution over the optimal solution and the heuristic solution over the optimal
solution on the simulation set D(,1) and a random partition for k=2. It is clear that Table 1
shows that the partition-distances of our solutions are at most twice the partition-distances of the
optimal solutions.
9Figure 2. The same as in Figure 1 but for the simulation set D(,10) and random partitions
for k=2, k=5 and k=10. Each value is an average over 100 instances 0.005 stand
deviation.
3.3 Web Versions
This section presents web sites to implement Gusfield's (2002) and our algorithms at
http://mail.tmue.edu.tw/~yhchen/KPDP.html and http://mail.tmue.edu.tw/~yhchen/kpc.html for
k-PD problem and k-PC problem, respectively. In the web of the k-PD problem, we have four
input types (1) user mode (2) random mode (3) D(,1) mode (4) D(,10) mode and three
algorithms (a) 2-approximation algorithm (b) heuristic algorithm (c) Gusfield's (2002)
algorithm (i.e., an exact algorithm for the 2-PD problem). First step, you need to fill in the
number of partitions k, the maximum number of clusters of these k partitions p, the maximum
number of elements per cluster Nmax, the number of elements n, and select an input
type. If you select the user mode, you need to fill in each element to its cluster for each partition
Pi, 1ik sequentially. If you choose (3) and (4) modes, you need to fill in each element to its
cluster for the first partition P_1, sequentially. Other partitions are generated by Section 3.1 and
3.2. Second step, you only select one algorithm. Finally, enter "Run" button. For the web of the
k-PC problem, we provide the two algorithms (a) heuristic algorithm (b) Gusfield's (2002)
algorithm. Other operations are the same with the web site of the k-PD problem.
4. Conclusions
In this project, we had shown the first known heuristic and approximation algorithms with
performance ratios 2 and a heuristic algorithm for the k-PD problem. Then, we had shown a
11
[17] Konovalov, D.A., Manning, C., and Henshaw, M.T. 2004. KinGroup: a program for
pedigree relationship reconstruction and kin group assignments using genetic markers.
Molecular Ecology Notes 4, 779-782.
[18] Kuhn, H.W. 2005. The Hungarian method for the assignment problem. Naval Research
Logistics 52, 7-21.
[19] Swift, S., Tucker, A., Vinciotti, V., et al. 2004. Consensus clustering and functional
interpretation of gene-expression data. Genome Biology 11, R94.1-R94.16.
[20] Tan, P.-N., Steinbach, M., and Kumar, V. 2006. Introduction to Data Mining.
Addison-Wesley.
[21] Yeung, K.Y., Haynor, D.R., and Ruzz, W.L. 2001. Validating clustering for gene
expression data. Bioinformatics17, 309-318.
[22] Yu, Z., Wong, H.-S., and Wang, H. 2005. Graph-based consensus clustering for class
discovery from gene expression data. Bioinformatics 21, 2463-2468.
四、計畫成果自評
In this project, We have presented the first known heuristic and approximation algorithms with
performance ratios 2 to solve the k partition-distance problem in O(kpn) time, where p is the
maximum number of clusters of these k partitions, a heuristic algorithm for the k
partition-clustering problem in O(k2n+kplogp) time and a heuristic algorithm for the 2
partition-distance problem in O(pn) time. Then, we perform our algorithms for simulation of
random data with the actual sets of organisms based on DNA markers. It show that our
algorithms can improve the computational speed of the exact algorithm for the two
partition-distance problem in practice if the maximum number of elements per cluster is less
than p. It also show that our solutions are at most twice the partition-distance of the optimal
solution. Finally, we implement our algorithms on web sites
http://mail.tmue.edu.tw/~yhchen/KPDP.html and http://mail.tmue.edu.tw/~yhchen/kpc.html. The
result of the k partition-clustering problem had been published in The 27th Workshop on
Combinatorial Mathematics and Computational Theory, 2010, 149-154. The other results had
been submitted in Journal of Computational Biology whose SCI impact factor is now 1.694.
Polynomial time approximation schemes for the
constrained minimum spanning tree problem
Yen Hung Chen∗ Cheng-Ying Yang †
Abstract
Motivated by the applications of Quality of Service (QoS) routing and multi-
casting, many multiple criteria problems had been studied. Given an undirected
graph G = (V,E) and two different minimization objective functions with a bound
on the first objective function, a generic bicriteria network design problem involves
the minimization of the second objective function but satisfies the bound on the
first objective function among all possible subgraphs from G. Let G = (V,E) be an
undirected graph with a positive integer B. Two different nonnegative functions,
cost and weight associate on edges in E, respectively. The constrained minimum
spanning tree (CMST) problem is concerned with the determination of a minimum
total cost spanning tree T in G subject to the constraint that the total weight in
T is at most B, where the total cost (respectively, weight) of a spanning tree is
defined to be the sum of the costs (respectively, weights) of all edges in the tree.
The CMST problem had been shown to be weakly NP-hard and some approxi-
mation algorithms had been proposed. The previous approximation algorithm for
the CMST problem achieves a best-known performance ratio of (1 + 5ε) within
O((1
ε
)O(
1
ε
)|V |3) time, for any given parameter ε > 0. This approximation algo-
rithm is based on Lagrangian relaxation and the matroid intersection strategies.
In this paper, we present two polynomial time approximation schemes (PTASs)
for the CMST problem. Both approximation algorithms are based on the round-
ing and scaling strategy. Applying the second PTAS and the matroid intersection
strategy, the previously best-known performance ratio can be improved to (1+4ε)
with the same time complexity.
Keywords: combinatorial optimization problem, approximation algorithm, bicri-
teria network design problems, polynomial time approximation scheme, rounding
and scaling, matroid intersection
∗Corresponding author: Department of Computer Science, Taipei Municipal University of Education,
No.1, Ai-Guo West Road, Taipei 10048, Taiwan, R.O.C. Email: yhchen@tmue.edu.tw
†Department of Computer Science, Taipei Municipal University of Education, No.1, Ai-Guo West
Road, Taipei 10048, Taiwan, R.O.C. Email: cyang@tmue.edu.tw
1
98年度專題研究計畫研究成果彙整表 
計畫主持人：陳彥宏 計畫編號：98-2221-E-133-002- 
計畫名稱：k-分割距離問題之研究 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 0%  
研究報告/技術報告 0 0 0%  
研討會論文 1 1 100% 
篇 
已發表到The 27th 
Workshop on 
Combinatorial 
Mathematics and 
Computational 
Theory, 2010, 
149-154 
論文著作 
專書 0 0 0%   
申請中件數 0 0 0%  專利 已獲得件數 0 0 0% 件  
件數 0 0 0% 件  
技術移轉 
權利金 0 0 0% 千元  
碩士生 2 2 50%  
博士生 2 2 20%  
博士後研究員 0 0 0%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 0% 
人次 
 
期刊論文 0 1 100% 
投稿到Journal of 
Computational 
Biology, SCI 
if:1.694 
研究報告/技術報告 0 0 0%  
研討會論文 0 0 0% 
篇 
 
論文著作 
專書 0 0 0% 章/本  
申請中件數 0 0 0%  專利 已獲得件數 0 0 0% 件  
件數 0 0 0% 件  
技術移轉 
權利金 0 0 0% 千元  
碩士生 0 0 0%  
博士生 0 0 0%  
博士後研究員 0 0 0%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 0% 
人次 
 
 
