摘要 
 
XML 近年來已經成為資料儲存的標準格式，也逐漸的被視為資料交換的標準格
式。當網路應用愈來愈多樣化之後，XML 資料不再只是以單一文件的形式傳送，而往往
是以一種連續性的資料串流（data stream）形式傳輸。因為輸入的資料是不斷地在變
動，所以傳統的資料庫系統已經無法支援此種串流形式的新資料型態。如何有效地儲
存、索引、查詢 XML 串流資料及串流 XML 文件版本管理是值得深入研究的課題。本計
畫發展出一套 XML 資料串流的聚集查詢處理系統和串流環境下 XML 文件的版本管理技
術。 
 
關鍵詞：可擴展標識語言、資料串流、索引、時間戳記、查詢處理、聚集查詢、版本
管理 
 
Abstract 
 
XML (eXtensible Markup Language) has become a standard format for data represen-
tation and exchange on the Internet. As more and more various XML applications appear, 
XML data are not just transferred as single documents but also sent as continuous data 
streams. Since the input data change all the time, the traditional databases cannot support this 
new type of data. How to effectively store, index, and query XML streaming data and to man-
age versions of continuously changing XML data are important research topics. This project 
develops aggregate query processing and version management techniques for XML streaming 
data. 
 
Keywords: XML, data stream, index, timestamp, query processing, aggregate query, version 
management. 
 
1 Introduction 
 
XML (eXtensible Markup Language) [23] has become a standard format for data rep-
resentation and exchange on the Internet. XML uses a tree-structured model to store data. 
When querying XML data, patterns are specified to identify the structural relationships be-
tween the elements in the tree structure. For example, query path expression “//book//title” 
indicates that element book has a descendant element title. In the path expression, “//” repre-
sents ancestor-descendent relationship and “/” represents parent-child relationship [24]. In 
order to find all elements that satisfy the query, many strategies have been proposed to evalu-
ate XML data against the pattern specified in the query [1, 4, 5, 14, 15, 20, 25].  
 
Most of the query processing methods return the final results that satisfy the pattern 
specified in the query. However, in many situations we only need the size of the result of a 
path expression instead of the final results. In other words, the aggregate value over the result 
set is desirable. An example of such aggregate queries is “count(//Book//Author)”, which re-
turns the number of “Author” under “Book” in the XML data input. The simplest method to 
evaluate an aggregate query is to find the final results for the query pattern first and then ap-
ply the aggregate function to the resulting set. Obviously, this approach is inefficient. 
 
A better solution would be using an XA-tree index structure, which indexes the aggre-
gate value for each necessary XML element [17]. For example, in order to process the aggre-
ment sets to get the desired aggregation value. The count operation is a fundamental aggre-
gate operation. It can be expressed as count(pattern), in which the pattern is an XPath expres-
sion. In order to process this operation, we need to find out the number of element sets that 
satisfy the query pattern. However, because the actual structural join results are not required 
in the answer, we may use simplified structural join algorithms to get the aggregate value. 
 
We use start tags and end tags (e.g., <A> </A>) in the XML data to direct the aggre-
gate query processing. The input XML data are first processed by an XML parser with SAX 
[21] and the resulting nodes are used as input data for our algorithm. As shown in Figure 1, 
algorithm AggrStack reads in nodes and checks whether the nodes can satisfy the query pat-
tern. This algorithm is similar to the holistic twig algorithm in the sense of using a chain of 
linked stacks to store partial results. However, instead of storing structural relationships be-
tween elements in the stacks we store the count numbers of each node in the corresponding 
stacks. More importantly, we do not use index to decide parent-child and ancestor-descendent 
relationships. Start tags and end tags are used to guide the pop or push operations of the 
// Input: An XML document. 
// Output: aggregate value 
for (each newnode in the SAX Parser) { 
   if (newnode is a query node) { 
       if (newnode is open) { 
         node’s count = count  + 1; 
          if (newnode is a pivot node) checkStack(node’s value); 
          if (AVG) sum = sum / totaltime; 
     } 
       else { 
          if (node’s count != 0)  node’s count = count －1; 
         else { 
             Pop count from the node’s stack; 
             node’s count = count – 1; 
    } 
          node = newnode; 
   } 
 } 
   else { 
       if newnode is open { 
          if (node’s count != 0) { 
             push count to the node’s stack; 
             if (previous stack satisfies the query and isn’t empty) 
      add to the pointer; 
          } 
    node’s count = 0;   
    node = newnode;   
    node’s count = count + 1; 
          if (node is a pivot node) checkStack(node’s value); 
          if (AVG) sum = sum / totaltime; 
       else { 
          node = newnode; 
          pop count from the node’s stack; 
         node’s count = count – 1; 
   } 
 } 
} 
 
Figure 1. Algorithm AggrStack 
document is obtained by deleting the subtree rooted at node addr from Version 2 and then 
inserting a subtree rooted at node profile. The tree structure of Version 3 and the differences 
between Version 2 and Version 3 are shown in Figure 3 (a) and (b), respectively. 
 
 
 
Figure 3. Version 3 and differences. 
 
 We use a version numbering scheme to indicate the valid version interval of each node. 
Each node in the tree is augmented with a version interval (begin:end), where begin and end 
are the beginning and ending versions of the valid version interval, respectively. Note that the 
word now represents the present version.  
 
 
 
3.2 Range and Level Numbers 
 
 In addition to the temporal relationships defined by the version numbering scheme, we 
need another numbering scheme to index the structural relationships among the nodes in the 
multi-version XML document so that the ordered nodes can be decomposed into unordered 
records. The numbering scheme augments each node with a number pair (min:max, level), 
where min and max define a range and level is the level number of the node in the tree. In 
order to distinguish between leaf and nonleaf nodes, only min values in leaf nodes are used 
and max values in leaf nodes are set to Null. The range numbers are assigned following a pre-
min max level begin end element 
1 180 1 1 now people 
20 160 2 1 now name 
40 80 3 1 now f_name  
60 Null 4 1 now Heth 
100 140 3 1 now l_name  
120 Null 4 1 now Tsai 
170 177 2 2 2 addr 
171 173 3 2 2 city 
174 176 3 2 2 zip 
172 Null 4 2 2 Tainan 
175 Null 4 2 2 709 
161 168 2 3 now profile 
162 164 3 3 now gender 
165 167 3 3 now age 
163 Null 4 3 now male 
166 Null 4 3 now 25 (175:Null,4,2:2)
people 
name 
f_name l_name 
addr
city zip
profile 
gender age 
(60:Null,4,1:now) 
(120:Null,4,1:now) 
(163:Null,4,3:now) 
(166:Null,4,3:now)
(172:Null,4,2:2)
(20:160,2,1:now) 
(161:168,2,3:now) (170:177,2,2:2)
(1:180,1,1:now) 
Heth Tsai Tainan 709male 25 
(40:80,3,1:now) 
(100:140,3,1:now
(162:164,3,3:now) (165:167,3,3:now)
(171:173,3,2:2)
(174:176,3,2:2)
<Position XPath="/people/addr"> 
< Subtree Operation="delete" /> 
</Position> 
<Position XPath="/people"> 
<Subtree Operation="insert"  Child="2"> 
<profile> 
<gender>male</gender> 
<age>25</age> 
</profile> 
</Subtree> 
</Position> 
(b) Differences 
people 
profilename
f_name l_name gender age 
Heth Tsai male 25
(a) Version 3 
(a) Range, level, and version numbers  (b) Relation 
Figure 4. Version 1-
3. 
References 
 
1. S. Al-Khalifa, H.V. Jagadish, N. Koudas, J.M. Patel, D. Srivastava, and Y. Wu, “Struc-
tural Joins: A Primitive for Efficient XML Query Pattern Matching,” Proc. of the 18th 
Int’l Conf. on Data Engineering (ICDE’02), February, 2002. 
2. B. Babcock, S. Babu, M. Datar, R. Motwani, and J. Widom, “Models and Issues in Data 
Stream Systems,” Proc. of 21st ACM SIG-MOD-SIGACT-SIGART Symposium on Prin-
ciples of Database Systems, pp. 1-16, 2002. 
3. S. Babu and J. Widom, “Continuous Queries over Data Streams,” ACM SIGMOD Re-
cord, vol. 30, issue 3, pp.109-120, September, 2001. 
4. N. Bruno, N. Koudas, and D. Srivastava, “Holistic Twig Join: Optimal XML Pattern 
Matching,” Proc. of the 2002 ACM SIGMOD Int’l Conf. on Management of Data, 2002. 
5. N. Bruno, L. Gravano, N. Koudas, and D. Srivastava, “Navigation- vs. Index-Based 
XML Multi-Query Processing,” Proc. of the 19th Int’l Conf. on Data Engineering 
(ICDE’03),  March, 2003. 
6. C.Y. Chan, P. Felber, M. Garofalakis, and R. Rastogi, “Efficient Filtering of XML Docu-
ments with XPath Expressions,” Proc. of the 18th Int’l Conf. on Data Engineering 
(ICDE’02), February, 2002. 
7. S. Chien, V. J. Tsotras, C. Zaniolo, and D. Zhang, “Storing and Querying Multiversion 
XML Documents Using Durable Node Numbers,” Proc. of the 2nd Int’l Conf. on Web 
Information Systems Engineering, 2001. 
8. S. Chien, V. J. Tsotras, and C. Zaniolo, “Efficient Management of Multiversion Docu-
ments by Object Referencing,” Proc. of the 27th Int’l Conf. on Very Large Data Bases, 
2001. 
9. S. Chien, V. J. Tsotras, C. Zaniolo, and D. Zhang, “Efficient Complex Query Support for 
Multiversion XML Documents,” Proc. of the 8th Conf. on Extending Database Technol-
ogy, EDBT 2002. 
10. Y. Diao and M.J. Franklin, “High-Performance XML Filtering: An Overview of YFilter,” 
Bul-letin of the IEEE Computer Society Technical Committee on Data Engineering, vol. 
26, number 1, pp. 41-48, March, 2003. 
11. Y. Diao, M. Altinel, M.J. Franklin, H. Zhang, and P. Fischer, “Path Sharing and Predicate 
Evaluation for High-Performance XML Filtering,” ACM Transactions on Database Sys-
tems, vol. 28, issue 4, pp. 467-516, December, 2003. 
12. A.L. Diaz and D. Lovell, XML Generator, 
http://www.alphaworks.ibm.com/tech/xmlgenerator, 1999. 
13. T.J. Green, G. Miklau, M. Onizuka, and D. Suciu, “Processing XML Streams with Deter-
ministic Automata,” Proc. of the 9th Int’l Conf. on Database Theory, pp. 173-189, Janu-
ary, 2003. 
14. R. Kaushik, R. Krishnamurthy, J.F. Naughton, and R. Ramakrishnan, “On the Integration 
of Structure Indexes and Inverted Lists,” Proc. of the 2004 ACM SIGMOD Int’l Conf. 
Management of Data, pp. 779-790, 2004. 
15. F. Lam, W.M. Shui, D.K. Fisher, and R.K. Wong, “Skipping Strategies for Efficient 
Structural Joins,” Proc. of the 9th Int’l Conf. on Database Systems for Advanced Appli-
cations (DASFAA 2004), pp. 196-207, March, 2004. 
16. Q. Li and B. Moon, “Indexing and Querying XML Data for Regular Path Expressions,” 
Proc. of the 27th Int’l Conf. on Very Large Data Bases, 2001. 
17. K. Liu and F.H. Lochovsky, “Efficient Computation of Aggregate Structural Joins,” Proc. 
of the 4th Int’l Conf. on Web Information Systems Engineering (WISE’03), December, 
2003. 
計畫成果自評 
 
本研究內容與原計畫相符，已完成串流 XML 資料的聚集查詢處理及版本管理技
術之研發，達成預期目標。研究成果適合在學術期刊發表，目前正在進行整理及撰寫
的工作。 
