Service Discovery Protocol (SSDP). Step 2 in UPnP 
networking is description. When a device is 
discovered by the UPnP control point, control point 
may retrieve the device and service description from 
the URL provided by the discovery message. The 
description for device and service is expressed in 
XML language. Step 3 in UPnP networking is 
control. Control point may send actions to device’s 
service. The control URL in the device description is 
where control messages are sent. Control messages 
are expressed in XML using Simple Object Access 
Protocol (SOAP). And service returns the action 
results to control point. Step 4 in UPnP networking 
is eventing. To get events, control points subscribe to 
eventing for a specific service within a device. Then 
when the service has an event, it sends that event to 
all current subscribers. UPnP uses General Event 
Notification Architecture (GENA) to define 
subscriptions and event notifications. Step 5 in UPnP 
networking is presentation. A URL for presentation 
page is given in the device description. In summary, 
UPnP is a Web-based communication protocols 
between control point and devices. 
Recently, our daily life is rife with networks and 
online services. People would enjoy the benefits 
brought by these Web services. Web services use 
Universal Description, Discovery, and Integration 
(UDDI) for discovery, Web Services Description 
Languages (WSDL) for description and Simple 
Object Access Protocol (SOAP) for communication. 
As Web services become more and more prevalent, 
many Web service composition technologies are 
proposed and developed. Business Process 
Execution Language for Web Services (BPEL4WS) 
[5] developed by IBM, Microsoft, SAP and Siebel 
supports process-oriented service composition. It 
only represents a specific process composition flow 
and dynamic service composition is not supported. 
So there are many research projects propose 
dynamic service composition technologies. CoSMoS 
[6] presents a dynamic service composition system 
using semantic information. CoSMoS can integrate 
the services to construct a semantic graph. Given a 
user request, CoSMoS can check the semantics and 
generate an execution path. A template-based 
composition system is proposed in eFlow [7], in 
which a composite service is designed by a template 
which defines an order of execution of the services. 
User can choose an application template from the 
repository or by creating a template by himself. The 
request application is composed through selecting 
the services specified in the template and combining 
them according to the structure described in the 
template. Users can replace the default services with 
the one that best suit their needs. There are some 
other works [8][9] focused on service selection 
issues. Dynamic service selection is an important 
issue in Web service composition. Since the Web 
environment changes frequently, there are many 
similar services for users to choose so that the total 
quality is the best. For example, users may choose 
the best suit service depending on the network traffic, 
server loading etc. 
In this paper, we aim at designing and 
implementing a dynamic service composition system 
and create a virtual device in home network 
environment. We propose data type ontology to 
define a communication interface for a service. And 
we show how to use semantic descriptions to aid in 
the dynamic service composition system. Also, we 
present a method called Virtual Application Probing 
(VAP) which allows home virtual applications can 
be dynamically and semantically composed from the 
individual services of home networked devices. We 
design and implement the dynamic service 
composition system using existing technologies such 
as UPnP, ontology, and XML. Then our system 
could create a virtual device that was composed 
from the primitive devices in home network 
environment. 
The rest of this paper is organized as follows. 
Section 2 describes the design for our virtual device 
creation system. In Section 3, we describe the 
implementation technique. Section 4 presents the 
demonstration of the proposed system. Finally, 
conclusion remarks are drawn in Section 5. 
2 SYSTEM ARCHITECTURE 
In this section, we present data type ontology and 
interface matching method for home appliances so 
as to accomplish the virtual device creation. We also 
present how to use a directed service graph to aid for 
finding composite execution paths for virtual 
devices. Figure 1 describes the concept of dynamic 
service composition. From figure 1, we could see 
that there are many independent UPnP devices, such 
as Microphone, Speaker, Media player, TV, Xbox, 
Camcorder, etc. Through our dynamic service 
composition system, these useful services could 
cooperate with each other to create a virtual device 
or a novel application. For example, virtual Karaoke 
device is composed from Microphone, Speaker, 
2 
service can hold two sorts of interfaces: input 
interface and output interface. Traditionally, UPnP 
service description only has data type and 
input/output information to describe a service 
interface, but in our view point, it is not enough to 
perform dynamic service composition. For example, 
the data type of Microphone’s output interface is the 
same as the printer’s input interface. Only with data 
type information, we might think that Microphone’s 
output could be fed to printer’s input. But the output 
of a Microphone is an audio stream and the input of 
a printer is a text file. Although their data types are 
the same, but Microphone’s output can not be fed to 
printer’s input. 
With the support of data type ontology, 
semantics of a service can be freely defined, thus 
providing high extensibility. The matching of two 
services is using the information in the service 
interface. If service A’s output interface is exactly 
the same with service B’s input interface. Then 
service A and service B can be composed together. 
2.3 Create Semantic Interface 
After defining the data type ontology, we use the 
data type and semantic information to describe the 
service interfaces. Every service has two interfaces, 
one is input interface and the other is output 
interface. With interface matching method, we could 
know whether the service’s output can be fed into 
the next service’s input. 
Suppose that a TV has four services: SetPower, 
GetPower, SetChannel, and Visual. SetPower 
service can switch the TV to power on or power off. 
SetChannel service can select TV programs. And 
Visual service can play a movie from Media player 
or display a TV program. The input interface of 
SetPower has two variables, its data type is Boolean 
and its semantic is On/Off. Device_Status is the data 
type and TV is the semantic for SetPower’s output 
interface. The input interface of SetChannel has two 
variables, its data type is Integer and semantic is 
Channel. Device_Status is the data type and TV is 
the semantic for SetChannel’s output interface. The 
input interface of Visual service has two variables; 
its data type is Bin.base64 and its semantic is Video. 
Device_Status is the data type and TV is the 
semantic for output interface. 
2.4 Service Graph Construction 
Service graph is an intuitive way to represent 
composition concepts. Two types of nodes are 
defined in service graph: DataSemanticNode and 
ServiceInfoNode. The links between these nodes 
represents their associations. The service graph 
clearly represents the composition information. The 
benefit of using service graph for dynamic service 
composition is its understandability for users. Also, 
the service graph is easy to maintain and handle for 
generator and designer. Before describing the 
construction of service graph, we first introduce the 
two type of nodes used in service graph. 
y DataSemanticNode: With the aid of data type 
ontology, we can create several kinds of 
DataSemanticNode. Each DataSemanticNode 
represents a pair of data type and semantic defined 
by the data type ontology to represents the service’s 
interface. In the later discussion, we briefly write 
(Data Type, Semantic) to represent 
DataSemanticNode. 
y ServiceInfoNode: Every device may have many 
services and each service has input and output 
interfaces. We take down the device and service 
information in the ServiceInfoNode, which has two 
kinds of information, the device name and the 
service name. We simply write (Device name, 
Service name) for later discussion. 
To construct a directed service graph, we first 
create links between the DataSemanticNodes and 
ServiceInfoNodes. When a UPnP device is 
discovered by control point in home networks, our 
system first check the service interface's data type 
and semantics of the added device. If the 
DataSemanticNode's data type and semantics are the 
same with the service input interface's data type and 
semantics, then a link is directed from 
DataSemanticNode to ServiceInfoNode. Otherwise, 
if the DataSemanticNode's data type and semantic 
are the same with the service output interface's data 
type and semantics, then a link is directed from 
ServiceInfoNode to DataSemanticNode. Each time 
when a device is discovered by UPnP control point 
in home networks, our system would make links 
between DataSemanticNode and ServiceInfoNode in 
service graph automatically. 
Figure 3 represents the directed service graph. 
After constructing the directed service graph, we can 
find an execution path of virtual device which is 
composed from the primitive services.If an input 
interface of a virtual service is (Bin.base64, File) 
and its output interface is (Device_Status, Speaker). 
From the directed service graph, we can easily find a 
composite execution path: (Bin.base64, File) → 
(CyberGarage Player Device, PlayFile) → 
(Bin.base64, Audio) → (CyberGarage Speaker 
Device, PlaySound) → (Device_Status, Speaker). 
4 
 Figure 5: Control flow and data flow. 
sequentially. Here we describe two types of flows: 
control flow and data flow. Control flow is used to 
trigger the required service in execution path. Then 
the control point has the ability to integrate two 
primitive services to establish a direct data flow. 
Figure 5 describes the two flows between control 
point and real services. If we invoke the virtual 
service, the control point would invoke the primitive 
services automatically with the control flow. And 
data is exchanged between services without going 
through the control point. 
3 SYSTEM IMPLEMENTATION 
Many existing service composition technologies are 
short of enough information, so matching processes 
rely on expert’s intervene. Our device model is 
refined from CyberLink for UPnP. CyberLink for 
Java is a development package for UPnP developers. 
CyberLink controls these protocols automatically, 
and supports to create your devices and control 
points quickly. To use the package, we copy the 
package clink170.jar from CyberLink Website into 
JDK and JRE library directory. The current package 
needs Apache Xerces and KXML2 packages to 
parse the XML and SOAP requests. CyberLink uses 
the Xerces package as the default parser. 
To do dynamic service composition, we append 
some classes and methods to implement our 
dynamic service composition system. Figure 6 
shows that we added DeviceAdded(), 
DeviceRemoved(), getDateType(), getSemantic() 
methods and VirtualDevice class, SemanticType 
class and LinkedList class from the class diagram of 
CyberLink for UPnP. The implemented classes are 
described as follows. 
y ControlPoint Class: We can create an instance 
of ControlPoint Class to create a UPnP control point. 
Use ControlPoint::start() to activate the control point. 
The control point multicasts a discovery message 
 
Figure 6: Class overview of service composition system. 
searching for all devices to the UPnP network 
automatically when the control point is active. The 
control point can send action or query control 
messages to the discovered devices. To send the 
action control message, use 
Action::setArgumentValue() and 
Action::postControlAction(). In ControlPoint class, 
we implement ControlPoint::DeviceAdded() and 
ControlPoint::DeviceRemoved() methods. UPnP 
control point receives notify events from devices in 
the UPnP network, and the devices are added or 
removed from the control point automatically. The 
expired device is added or removed from the device 
list of the control point automatically. When a UPnP 
device is discovered by control point, 
ControlPoint::DeviceAdded() would check whether 
the service can be composed with other service by 
interface matching. If the added service’s interface 
exactly matches another service’s interface then we 
connect the two service nodes in service graph. On 
the other hand, if a UPnP device is leaving the UPnP 
network, ControlPoint::DeviceRemoved() removes 
the links between the service nodes in service graph. 
We implement ControlPoint::DeviceAdded() and 
ControlPoint::DeviceRemoved() methods to 
maintain the service graph. 
y SemanticType Class: This class is used to 
describe the data structures of service graph. In 
SemanticType domain, we define the two nodes in 
service graph. One is DataSemanticNode and the 
other is ServiceInfoNode. DataSemanticNode 
represent the interfaces of a service. And 
ServiceInfoNode records the service information 
including device name and service name. 
SemanticType class defines data type and semantics 
to represents services’ interface. For example, Audio, 
Video and Text can be defined as semantics. With 
the aid of semantics, we use “interface matching” 
6 
