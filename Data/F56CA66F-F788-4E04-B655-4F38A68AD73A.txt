1














cbbc
aaaa
bccb
aaaa
A , (2)
在 此 a=1/2,  8/cos2/1 b , 及
 8/3cos2/1 c 。
然而為了減化計算量及避免使用乘法，在 H.264
中所採用的是下列的 4x4 整數轉換。
ECXCY  )( T , (3)
在此 CXCT稱為轉換的核心, E 是尺度因子(scaling
factors)矩陣，而符號表示轉換核心中的每個元素將乘
以尺度因子矩陣中相對位置的元素。為了減少計算，E
的動作將會吸收至接下來的量化中。C 的每個元素定義
如下：















1221
1111
2112
1111
C . (4)
2.2 H.264中的量化
在 H.264 中的量化為基本的純量量化，每個係數值
的量化定義如下：
)/( sijij QYroundZ  (5)
在此 Zij 是量化後的係數，’round’將小數點直接捨去，
Yij 是(3)中 Y 矩陣位置(i,j)的係數值，而 Qs 是量化步階
值，由量化參數 QP 所決定。QP 的值介於 0-51. 令
W=CXCT, 則每個量化後的係數可由下式得到：
)(
s
ij
ijij Q
E
WroundZ  , (6)
為了避免除法的動作，(Eij/Qs)是用(Mij/2
qbits)來取代，且
(6)式是以下列方式來實作
)()( ijij WsignZsign  (7)
  qbitsfMWZ ijijij  (8)
在此 Mij 是一個乘法因子，f 是一個常數，符號>>表示
一個二位元的右移動作，而 qbits=15+QP/6。在參考軟
體中，f 的值分別是 2qbits/6 針對在之間區塊(inter block)
或是 2qbits/3 針對在內區塊(intra block)。Mij 的值隨著 QP
的值而變動，且由一個週期性的表格來決定，其值如下
[15]





















728245592893
819252433355
936258253647
1008265544194
1191674904660
1310780665243
),6%( rQPMM ij (9)
在此 r=2-(i%2)-(j%2) 且 % 是模數運算。明確地說,
r=0 相對於位置(i,j)={(1,1), (1,3), (3,1), (3,3)}; r=2 相對
於位置(i,j)={(0,0), (2,0), (2,2), (0,2)}; r=1 相對於其他的
位置。將方程式(8)重寫成 QP 及 r 的函數，可得量化後
係數的絕對值為
)6/(152
),6%(
),(
QP
ij
ij
frQPMW
rQPZ 

 , (10)
對所有的(i,j)而言，只要(10)式右邊的值都小於 1，則此
區塊即為全零區塊 AZB。
3. 之前的偵測演算法
3.1 Sousa的方法
根據在[13]中 Sousa 的觀念，在[15]中的作者發現下
列的不等式將成立：
)6/(15
3
0
3
0
2
)0,6%(4
),(
QP
i j ij
ij
fxQPM
rQPZ 
  
 
for all i, j. (11)
因此，AZB 的充分條件如下：
)0,6%(4
2 )6/(153
0
3
0 QPM
f
x
QP
i j ij 


   (12)
在此等號左邊等於 4x4 區塊的 SAD 值。為了簡化表示
式，我們令
   3 0 3 0i j ijxS . (13)
因為(12)式是根據 Sousa 的觀念而來，我們稱為(12)式
的條件為 Sousa_4x4 的方法。
3.2 Wang的方法
根據在[14]中所提出來的指導方針，此篇文章的作
者利用下式來偵測 AZB：
)2,6%(
2 )6/(16
QPMG
S
QP



(14)
在此 G 取 C 矩陣列的最大平方 norm，我們稱此方法為
30 10 20 30 40 50 60 70 80 90 100
0
1000
2000
3000
4000
5000
6000
sum of absolute difference
nu
m
be
r
of
bl
oc
ks
Foreman
AZB
nonAZB
T(0) T(1) T(2)
0 10 20 30 40 50 60 70 80 90 100
0
1000
2000
3000
4000
5000
6000
7000
8000
sum of absolute difference
nu
m
be
r
of
bl
oc
ks
Mother
AZB
nonAZB
T(0) T(1) T(2)
0 10 20 30 40 50 60 70 80 90 100
0
500
1000
1500
2000
2500
sum of absolute difference
nu
m
be
r
of
bl
oc
ks
Silent
AZB
nonAZB
T(0) T(1) T(2)
0 10 20 30 40 50 60 70 80 90 100
0
1000
2000
3000
4000
5000
6000
sum of absolute difference
nu
m
be
r
of
bl
oc
ks
News
AZB
nonAZB
T(0) T(1) T(2)
圖 2. AZB 與非 AZB 在 QP=28 的數目分佈圖. (a) Foreman (b)
Mother (c) Silent (d) News.
經由分析核心轉換 W=CXCT 以及方程式(4)，我們
可以得到
       


































2
13
32
3
02
32
3120
3
01
10
2
10
10
3120
44444444
33
33
S
SSSSSSS
SSSSSS
SSSSSSSS
S
SSSSSSS
SSSSSS
SSSSSSSS
CxCw T
xijxijxijxij
(19)
在此
333003000 xxxxS  (20)
323102011 xxxxS  (21)
232013102 xxxxS  (22)
222112113 xxxxS  . (23)
注意 S 可以表示成下式
     3 03 0 3 0 i ii j ij SxS (24)
這表示我們不需要額外的運算在 S0, S1, S2及 S3上，因為
只要我們改變取得 S 的值的順序，即可得到這四個值。
根據(19)式，我們可以得到下列的三個不等式
1) For r=0,  i
i
ij SSw max5 . (25)
2) For r=1,  i
i
ij SSw max2 . (26)
3) For r=2, Swij  . (27)
55. 實驗結果
我們將所提出來的演算法應用在圖 1 中的 4 個
QCIF(176x144)測試視訊當中，其中 Foreman 有 300 張
畫面，其它的三個視訊皆為 225 張畫面。我們採用的是
JVT 參考軟體 8.6 版[17]。I 畫面的週期設為 3，搜尋範
圍設成 16 且參考畫面數設成 1。畫面播放率固定在每
秒 10 張且 QP 設成 28, 32, 36 及 40 以方便比較。
表 II 列出採用不同方法所偵測出來的 AZB 數目。
很明顯地，我們所提出來的方法不管在那一種情況下都
可以偵測到最多的 AZB。這些被偵測到的 AZB 並不需
要執行轉換及量化的運算，甚至於這些區塊的重建值皆
為已知並不需要執行反量化及反轉換的運算，因此，我
們可以節省許多不必要的運算在這些區塊上。
表 II
不同方法在所偵測到的AZB數目之比較
Sequence QP
Wang_dct2
method
[14]
Sousa_4x4
method
[13]
Moon
method
[15]
Proposed
method
28 12085 78758 122667 148739
32 24664 134406 184322 214401
36 49951 188029 244892 273959
Foreman
40 82613 233732 290216 330438
28 35563 105535 134730 156132
32 56460 132007 168774 195955
36 68932 172962 219680 245388
Mother
40 96684 221370 265597 291916
28 5739 34004 51627 66307
32 11342 55481 83980 106345
36 20907 90158 137293 165036
Silent
40 29367 127900 180944 221377
28 27766 99460 128698 149293
32 42999 120295 152649 176098
36 62592 154177 191333 211926
News
40 86957 186605 222830 245080
表 III
不同偵測方法在總計算量下的比較
Sequence QP
Wang_dct2
method
[14]
Sousa_4x4
method
[13]
Moon
method
[15]
Proposed
method
28 59753920 51219776 45986420 43298876
32 58143808 44096832 38192508 35055638
36 54907072 37233088 30542549 27456027
Foreman
40 50726336 31383104 24783854 20385168
28 41423536 32467120 29040669 26725699
32 38748720 29078704 24762541 21860997
36 37152304 23836464 18357738 15610478
Mother
40 33600048 17640240 12511130 9646792
28 45241008 41623088 39525206 37963688
32 44523824 38874032 35483276 33134131
36 43299504 34435376 28824383 25865370
Silent
40 42216624 29604400 23317476 18914764
28 42421552 33244720 29808405 27582496
32 40471728 30577840 26786374 24272131
36 37963824 26240944 21903753 19694739
News
40 34845104 22090160 17897306 15508195
我們將全部所需要的計算量計算出來，並將結果
列於表III中。由此表我們發現計算量已經大大地降低
了。
定義計算量減少百分比如下：
%100),( 


j
ij
TC
TCTC
jiCRP . (39)
從表III中，我們可以同時得到CRP(3,0), CRP(3,1)及
CRP(3,2)的值。表IV顯示在不同QP值及不同視訊下的
這些值。在所有的情況下，我們提出來的方法都勝過先
前的所有方法。與wang_dct2的方法比較，所提出來的
方法可以節省16.1%~71.3%。即使與Moon的方法比較，
所提出來的方法也可以節省4%~22.9%的計算量。此
外，QP值愈大，則節省的計算量愈多，因此，所提出
來的方法將更適用在低位元率編碼的場合中。
表 IV
所提出來方法之計算量降低百分比
Sequence QP CRP(3,0) CRP(3,1) CRP(3,2)
28 27.5% 15.5% 5.8%
32 39.7% 20.5% 8.2%
36 50.0% 26.3% 10.1%
Foreman
40 59.8% 35.0% 17.7%
28 35.5% 17.7% 8.0%
32 43.6% 24.8% 11.7%
36 58.0% 34.5% 15.0%
Mother
40 71.3% 45.3% 22.9%
28 16.1% 8.8% 4.0%
32 25.6% 14.8% 6.6%
36 40.3% 24.9% 10.3%
Silent
40 55.2% 36.1% 18.9%
28 35.0% 17.0% 7.5%
32 40.0% 20.6% 9.4%
36 48.1% 24.9% 10.1%
News
40 55.5% 29.8% 13.3%
6. 結論
在本計畫中，我們成功的提出了一個增強型
的 AZB 偵測演算法，以適用在 H.264 當中。此
演算法可以使編碼過程所需要的計算量大大地
降低。整個演算法的核心在於一個比較的高的門
檻值。由於此門檻值的決定是經由理論的推導而
得來，因此並不會造成視訊品質的任何損失。對
未來的研究而言，我們計劃將它與一些快速的搜
尋演算法作結合，以進一步地將計算量降低，並
且試著將此演算法移植至快速的 DSP 平台當中。
