行政院國家科學委員會專題研究計畫成果報告 
多重視訊格式解碼器之低複雜度後處理技術研發 
計畫編號：99-2218-E-005-006- 
執行期限：100 年 05 月 01 日至 101 年 04 月 30 日 
計畫主持人：吳崇賓 助理教授  國立中興大學電機系 
I. Introduction 
Video compression systems are widely used in many modern products such as digital 
camera, mobile phone, video conference, and remote monitoring system. Along with internet 
television and smart phone are more and more popular around the world, watching YouTube 
or making a video teleconferencing call by Skype on internet television or smart phone has 
been much more convenient and popular now a day.  
Block based video standards including MPEG-4, AVC/H.264 [1], VC-1, VP6/7/8[2], and 
AVS are widely used in mobile video compression. Currently, AVC/H.264 is one of the most 
commonly used video compression standard. Recently, the latest video codec VP8 also 
known as WebM project is now released by Google. Not only YouTube but also Skype 
announced that VP8 will be used for the video codec on their latest version. In addition, VP8 
will also be involved in HTML5 standard in the future. 
In highly compressed video, the blocking artifact is easily to be noticeable as the 
discontinuities between homogeneous regions since high quantized processing. To reduce the 
degradation caused by blocking artifact, block based video compression system usually 
performs deblocking filter in encoding/decoding flow. However, the existing video codecs 
have their own deblocking filter to prove the quality advantage. To reduce the computation 
complexity, Chien et al. [4] introduced a multi-standard in-loop deblocking filter aiming at 
the sharing of data path. Liu et al. [5] presented a hybrid filtering schedule for in/post-loop 
deblocking filter to share the mode decision. Chang et al. [6] and Lee et al. [7] proposed a 
parallel strategy of deblocking filter. However, no sharing units are used for the overall 
arithmetic operation. Thus, in this project, we develop a hardware sharing architecture to 
reduce the overall arithmetic units. Furthermore, we simplify the kernel of the loop filter in 
VP8 to be a low complexity deblocking filter which can be applied to portable devices and 
low power applications. 
The rest of this project is organized as following. The deblocking filter of AVC/H.264 
and VP8 are briefly reviewed in Section II. Section III describes the presented hardware 
sharing algorithm. The proposed deblocking filter architecture is adopted in Section IV. The 
Table I: Boundary strength parameter 
Conditions BS 
One of the blocks is intra and the edge is a macroblock 
edge 4 
One of the blocks is intra 3 
One of the blocks has coded residuals 2 
Motion compensation from difference reference frame or 
difference of block motion is larger than one luma sample 1 
Else 0 
 
| q0 - p0 | < α
| q0 - q1 | < β
&
| p0 - p1 | < β
Bs = 4
Yes strong filteringnormal filtering
small_gap = 
( | q0 - p0 | < ((α >> 2) + 2))
| p0 - p2 | < β
&
small_gap
p0’ = 
    ( p2 + 2p1 + 2p0 + 2q0 + q1 + 4 ) >> 3
p1’ = 
    ( p2 + p1 + p0 + q0 + 2 ) >> 2
p2’ = 
    ( 2p3 + 3p2 + p1 + p0 + q0 + 4 ) >> 3
p0’ = 
( 2p1 + p0 + q1 + 2 ) >> 2
| q0 - q2 | < β
&
small_gap
q0’ = 
    ( p1 + 2p0 + 2q0 + 2q1 + q2 + 4 ) >> 3
q1’ = 
    ( p0 + q0 + q1 + q2 + 2 ) >> 2
q2’ = 
    ( 2q3 + 3q2 + q1 + q0 + p0 + 4 ) >> 3
q0’ = 
( 2q1 + q0 + p1 + 2) >> 2
Δ = Clip3( -c0, c0, 
( p1 – 4p0 + 4q0 – q1 + 4 ) >> 3 )
| p0 - p2 | < β
p1' = p1 + Clip3( -C0,  C0, 
(p2 – 2p1+ ((p0 + q0 + 1) >> 1 ) ) >> 1 )
p0' = 
    Clip1(max_value, p0 + Δ )
q0' = 
    Clip1(max_value, q0 – Δ )
| q0 - q2 | < β
q1'= q1 + Clip3( -C0,  C0, 
(q2 – 2q1 + ((p0 + q0 + 1) >> 1 ) ) >> 1 )
YesNo
YesNo
No
Yes
YesNo
Yes
 
Fig. 2. Flowchart of H.264 deblocking filter 
Fig. 2 shows the flowchart of H.264 deblocking filter. A group of filtering samples from 
the set (p2, p1, p0, q0, q1, q2) are filtered only if BS > 0 and (1) is satisfied. Where α and β 
are derived thresholds depending on quantization parameters. 
 0 0 0 1 0 1,  ,  .q p q q p pα β β− < − < − <  (1) 
For BS=4, the deblocking filter is applied to be a strong filter. (2) shows the deblocking 
filter in strong filtering mode, where p and q denote the pixels before filtering, and p’ and q’ 
denote the pixels after filtering. If the condition (3) is not satisfied, a 3-tap filter will be used 
to replace the value of p0 and q0. 
 ( )1 1' 8 _ ,p p vp filter= +  (11) 
where 
 8 _ ( 1) 1,vp filter c= + >>  (12) 
and 
 ( ( 4)) 3.c clamp a= + >>  (13) 
On the other hand, the deblocking filter is applied to be a normal filter when (14) and 
(15) are satisfied, where “E” denotes the limit at the edge and “I” denotes the limit on interior 
differences. The normal filter shown in (16) is similar to the strong filter in H.264, which 
modify six pixels on both sides of the edge. 
 0 0 1 1*  2 / 2 E.p q p q− + − ≤  (14) 
 
3 2 2 1 1 0
3 2 2 1 1 0
 &   &   &
 &   &  .
p p I p p I p p I
q q I q q I q q I
− ≤ − ≤ − ≤
− ≤ − ≤ − ≤  (15) 
 
0 0
1 1
2 2
' 0,  
' 1,  
' 2,
p p a
p p a
p p a
= +
= +
= +
 (16) 
where 
 
0 ((27* 63) 7),
1 ((18* 63) 7),
2 ((9* 63) 7),
a clamp w
a clamp w
a clamp w
= + >>
= + >>
= + >>
 (17) 
where 
 1 1 0 0( ( ) 3*( )).w clamp clamp p q q p= − + −  (18) 
III. Proposed Simplified Algorithm 
A. Deblocking Filter Reorganization 
In this project, we propose a hardware sharing algorithm of deblocking filter for 
AVC/H.264 and VP8 video codec. To simplify the algorithm, we classify the overall filters 
into three types: two points, four points, and six points filtering. 
The two point filters are denoted as normal filter for H.264 in (4) and simple filter for 
VP8 in (8), respectively. Ignore the clip function of the filter in (4) and (5), we rewrite the 
normal filter of H.264 into (19). In terms of outer taps filter of VP8, the simple filter is 
simplified and shown in (20). 
IV. Proposed Deblocking Filter Architecture 
To reduce the total arithmetic units, we design a hardware-sharing architecture that 
spends less arithmetic units than using two sets of deblocking filters in different standards. 
Fig. 3 shows the sharing architecture, named processing unit (PU) of regular form in terms of 
p1 – 4p0 + 4q0 – q1 and p1 + 3q0 – 3p0 – q1. From this architecture, the blocking filter can 
be easily switched to H.264 or VP8 by the multiplexer. The architecture with regular items 
can be reused for the whole filtering. 
<< 1 Mux
<< 1
<< 1
<< 1
+
+
+
Mux
p1
p0
q0
q1
T
+
+
PU
 
Fig. 3. Processing unit (PU). 
The overall hardware sharing architecture is shown in Fig. 4. In this block diagram, the 
blocks with gray color represent shared units. The parameter controller gives a parameter for 
the two-point filters and decides a parameter for fine tuning the VP8 filtering. 
As shown in Fig. 4, the filter coefficient is given by selecting the multiplexer instead of 
having two sets of arithmetic units. Moreover, all of the multipliers of our architecture are 
replaced into shifters. To further reduce the computation complexity, another proposed 
hardware sharing architecture for low complexity is shown in Fig. 5. Different to Fig. 4, this 
architecture is designed as similar as possible of the two filters between H.264 and VP8. The 
normal filter of VP8 is designed by the formulas we have reorganized in (23). 
<< 3 +
<< 4
<< 1
+
<< 4 +
<< 3
<< 1
+ +
Mux
Mux
Mux
+
+
+
Parameter
Controller
Clip
Clip
Clip
>> 7
>> 3
>> 7
>> 3
>> 7
>> 3
+
+
+
Mux
Mux
Mux
P3
P2
P1
P0
Parameter
Controller
Parameter
Controller
PU
p1
p0
q0
q1
p2
p3
PU
PU
 
Fig. 4. Hardware sharing architecture of H.264/VP8 deblocking filter. 
VI. Conclusion 
In this project, a highly hardware sharing architecture for H.264/AVC and VP8 of 
multi-standard deblocking filter has been presented. The loop filters between H.264 and VP8 
with common items which can be reused has been first analyzed. The common design further 
used in whole filtering architecture has been presented. Moreover, simplified architecture 
suitable for low complexity applications has been also adopted. The proposed design overall 
saves 36.7% of shifters, 64.5% of adders and 100% of multipliers. The experimental results 
demonstrate the overall PSNR drops less than 1.47% on the VP8 decoder; therefore, this 
algorithm is suitable for low power application in VP8 multimedia communication systems. 
Foreman,                        (b) Stefan,
Coastguard,                         (d) Bus, 
Fig. (6). PSNR of results. 
VII. Reference 
[1] ISO/IEC 14496-10, “Information technology – coding of audio visual objects – part 10: 
advanced video coding,” December 2003. 
0 50 100 150
32
34
36
38
40
42
44
46
48
Frame Number
P
S
N
R
 (d
B
)
 
 
Original
Proposed
0 50 100 150
30
32
34
36
38
40
42
44
46
48
Frame Number
P
S
N
R
 (d
B
)
 
 
Original
Proposed
0 50 100 150
30
32
34
36
38
40
42
44
46
48
Frame Number
P
S
N
R
 (d
B
)
 
 
Original
Proposed
0 50 100 150
28
30
32
34
36
38
40
42
44
46
48
Frame Number
P
S
N
R
 (d
B
)
 
 
Original
Proposed
國科會補助計畫衍生研發成果推廣資料表
日期:2012/02/22
國科會補助計畫
計畫名稱: 多重視訊格式解碼器之低複雜度後處理技術研發
計畫主持人: 吳崇賓
計畫編號: 99-2218-E-005-006- 學門領域: 積體電路及系統設計
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
