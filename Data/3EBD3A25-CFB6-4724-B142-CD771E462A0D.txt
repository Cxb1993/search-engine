 2
中文摘要 
 
關鍵詞： 人工智慧、機器學習、電腦圍棋、九路圍棋、回溯分析演算法、
組合對局理論、自動擷取知識、智慧型代理人 
 
1997 年西洋棋程式「深藍」擊敗人類世界冠軍之後，電腦圍棋成為人工
智慧學界下一個重要課題之一。目前世界最強的十九路圍棋程式棋力只有六
級左右，而在九路圍棋方面，其複雜度約與象棋相當，但由於圍棋的規則相
當獨特，導致其評估函數特別複雜，且九路電腦圍棋較少人投入研究，所以
目前最強的程式也只有四級。但在經過審慎的研究與評估之後，以我們在電
腦圍棋和電腦象棋的發展經驗，加上近年來硬體進步的速度，九路圍棋程式
是有可能到達高段的水準。 
本計畫以三年的時間來研製一個具有高段棋力的九路圍棋程式。我們以十
餘年來在電腦圍棋及電腦象棋的研究結果為基礎，首先參考電腦象棋中的開
局知識庫、回溯分析演算法、對局樹搜尋演算法等各種理論，配合電腦圍棋
特有的設計方式，如組合對局理論、劫爭處理方法等。研究人員包括具有資
訊工程背景的業餘高段棋士，也研究如何以機器學習的方式，用自我學習和
從棋譜資料學習等方法，以智慧型代理人在圍棋對奕網站上自動擷取並學習
專家知識。 
本計畫有以下貢獻：首先下圍棋為一種公認高智慧的行為，以資訊技術的
方法來解決，在人工智慧上有相當大的意義。發展此系統時，也開發出一些
搜尋演算法及機器學習理論，目前已經有四篇以上的相關論文發表。所製作
出的九路圍棋程式，對圍棋學習者會有很大的幫助。每年固定參加的電腦奧
林匹亞棋類比賽的成績也都有很好的表現，可說是已經達成了本計劃的預期
目標。 
 4
 
一、前言....................................................................................................................................5 
二、研究目的............................................................................................................................5 
2.1. 圍棋簡介....................................................................................................................6 
2.2. 電腦圍棋的基本理論................................................................................................7 
2.3 本計畫的目的.............................................................................................................9 
三、研究方法與成果................................................................................................................9 
3.1. 完成一九路圍棋的雛形，並將重點放在開局資料庫的研究與設計..................10 
3.1.1 研究九路圍棋的資料結構應的表示方式..............................................10 
3.1.2 完成一九路圍棋的雛形................................................................................11 
3.1.3 完成可自動到圍棋網站下棋的智慧型代理人，此代理人下棋的戰績，可
作為即時評估本系統效能之用。..........................................................................12 
3.1.4 開局資料庫的研究與設計.............................................................................12 
3.2. 研究對局樹搜尋方式如何應用在九路圍棋，包括搜尋架構以及評估函數......14 
3.2.1 研究九路圍棋的攻殺系統.............................................................................14 
3.2.2 研究可以處理劫爭的攻殺系統....................................................................16 
3.2.3 設計特有的搜尋架構，以配合九路圍棋的特性.........................................17 
3.2.4 研究出一簡單而有用的評估函數.................................................................17 
3.1. 研究如何以回溯分析法處理官子，並研究如何以機器學習方式增進棋力......18 
3.3.1 研究如何以回溯分析法處理官子，建立九路圍棋的殘局資料庫.............18 
3.3.2 將上一階段所產生的殘局資料庫與搜尋系統結合.....................................18 
3.3.3 以機器學習方式增進棋力，從高段棋士棋譜及自己的棋譜擷取知識，增
進棋力......................................................................................................................18 
3.3.4 以資料探勘的方式，自大量的棋譜中找出特定棋型與著手之間的關係與
序列，建立一套可半自動產生有用棋型的系統..................................................19 
四、結果及討論......................................................................................................................19 
五、計畫期中成果自評..........................................................................................................19 
參考文獻..................................................................................................................................20 
中文..................................................................................................................................20 
英文..................................................................................................................................21 
 6
對局發展至二十一世紀的今天，所有在
現實世界有廣大愛好群眾，而電腦程式
尚未達到業餘專家水準(master level)
的，僅有圍棋一項，由此可知電腦圍棋
的困難和其重要性。[許 1989][Chen 
2001][Bouzy and Cazenave 2001][顏 
1997b 1999a] 
而在九路圍棋方面，其複雜度約與
象棋相當，但由於圍棋的規則與一般棋
類大不相同，在對戰戰術(tactical)方
面，其困難度並不亞於十九路的圍棋
[Chen 1999]，而且一般比賽皆以十九
路為主，九路電腦圍棋較少人投入研
究，所以目前最強的程式也只有台灣業
餘四級的水準。但我們在經過審慎的評
估之後，以我們目前在電腦圍棋和電腦
象棋的研究經驗，加上近年來硬體進步
的速度，九路圍棋程式是有可能到達高
段的水準的。 
以下我們將簡介圍棋，並說明電腦
圍棋的困難性，最後說明本計劃的目
的。 
 
2.1. 圍棋簡介 
 
圍棋是起源於中國的一種棋戲，相
傳是數千年前由堯所發明。雖然發明圍
棋的確實日期已不可考，但可以確定的
是早在西元前十世紀，圍棋已經廣為流
行。目前圍棋在許多東方國家都很盛
行，而且也漸漸推廣到全世界。事實
上，圍棋在許多人的心中，不僅僅是娛
樂，由於其本身的許多特質，早已被看
做是一種藝術。 
圍棋吸引人的地方除了是因為它的
規則簡單及變化複雜，可供人們發揮最
大的自由想像創造空間外，另一方面也
是由於它已被研究了數千年，許許多多
的戰術觀念及思考方法已被研究開發
出來，人們可經由學習這些東西而迅速
地進入圍棋的世界。 
下圍棋主要的工具，有棋盤和棋
子： 
棋盤：現代最常使用的棋盤為十九
路棋盤和九路棋盤，十九路棋盤的直
線、橫線各有十九條，線和線的交叉點
共有三百六十一點。九路圍棋一般是做
為圍棋初學者在剛學棋後六個月內練
習之用，許多圍棋高手也常用九路圍棋
來練習攻殺以及計算能力之用，日本棋
院棋週刊每週均有一盤職業九段在九
路圍棋的對局棋譜及討論，可見九路圍
棋有其價值和重要性。 
棋子：分為黑色和白色兩種，分別
為下棋的雙方持用。 
下圍棋要注意下列的基本規則： 
對奕的人數：每次下棋，通常有持
白棋和持黑棋各一人。 
著手：除了讓子對局為白棋先下
外，通常為黑棋先下。雙方開始下棋
後，輪流各下一子於棋盤上，凡下一子
稱為一著或一手，可連續輪流至終局為
止。 
終局：一局下到最後，已能分出勝
負，無須再下子時，由雙方同意即告終
局。 
地域：任何一方用棋子在棋盤上圍
住的空點，對方已無法攻入佔據或破
壞，這個所圍的區域就是該方的地域，
即所謂成地。 
禁止著手：依照中國圍棋協會在民
國六十四年十月所公佈的圍棋規則第
七條的規定，使”全局同形再現”的著
手，一律禁止，稱為禁止著手，提吃單
一棋子所造成的循環盤面狀況稱為”劫
爭”，處理循環盤面狀況和禁止著手為
電腦圍棋對局樹搜尋時的一大難題，需
發展出特殊的架構才能處理 [Müller 
1995]。 
活棋：擁有兩個以上禁止著手點的
一塊棋子，一般稱為兩眼，對方無法提
吃，因此這塊棋子永遠沒有危險，叫做
活棋。 
死子：凡被對方包圍，無法做成兩
個”禁止著手點”的死棋，或少數幾個顆
子無法和己方棋相連，尚未被提出的，
都叫做死子。 
圍棋棋士在對奕的過程中，大致可
分為三大階段：佈局、中盤、官子，
 8
勝負定義也很明確，這些都和電腦本身
的特性相符合。另一方面由於它已被古
今中外的許多專家研究了數千年，許許
多多的戰術觀念及思考方法已被開發
出來，這些都是可以在發展電腦圍棋時
去應用或參考的。 
但是電腦圍棋的發展過程，卻沒有
想像中順利，雖然圍棋規則很簡單，但
是由於盤面廣大（一般的對局棋盤是
19×19），對局時的變化卻比其它的棋
戲複雜得多。例如西洋棋或象棋，已能
藉由一些簡單的推理與深度的搜尋思
考而達到相當高的棋力，但這種方法卻
不太適合應用在圍棋這種高複雜度的
棋 戲 中 。 理 論 上 ， 以 計 算 理 論
(computational theory)來分析圍棋可以
得到 N×N 的圍棋複雜度為 P-space 
hard[Lichtenstein 1980] 與
exponential-time complete[Robson 
1983]。 
對於固定棋盤大小的圍棋之複雜
度，我們可分析如下：圍棋可以歸類於
具有兩人對奕、完全透明資訊和零和的
特 質 的 棋 類 中  [Allis, Herik and 
Herschberg 1991]。此方面棋類的複雜
度可以所有狀態的數目(state space)及
對局樹大小(size of game tree)來表示，
表 2.2.1 為六種代表性棋類的複雜度比
較，其中 E 為所有狀態的數目，A 為
對局樹大小  [Bouzy and Cazenave 
2001] 。 
由上圖可知九路圍棋雖然複雜度大
致與西洋棋相當，但事實上九路圍棋設
計的困難度卻很高[Chen 1999]，最強
的程式棋力約在台灣業餘四級左右，一
般是認為九路圍棋靜態形勢評估函數
中，隱藏著很大的常數，導致九路圍棋
程 式 不 易 設 計 [Bouzy 2001] 
[Chen2001][Yen et.al. 2004]。 
 
 
棋類名稱 log10(
E) 
log10(
A) 
與人類最強
棋士比較 
Checkers 17 32 Chinook>H 
Othello 30 58 Logistello>H
9×9 Go 40 85 <<H 
Chess 50 123 Deep 
Blue>=H 
Chinese 
Chess 
48 150 ELP<H 
15×15 
Go-moku
100 80 weak solved 
19×19 Go 160 400 <<H 
 
表 1 六種代表性棋類的複雜度比較 
 
我們可以歸納圍棋程式棋力進步緩
慢的原因有以下兩點： 
圍棋的搜尋分支較大、深度較深。
十九路圍棋的盤面為 19×19 比起西洋
棋的 8×8 或象棋 9×10 都要大很多，而
且完成一場對局所需的手數通常也是
圍棋較多。所以圍棋需要更多的搜尋資
源，諸如運算速度與記憶體空間等。目
前的電腦硬體尚不足以滿足這些需
求，有待電腦硬體的發展來配合。 
即使縮小盤面為 9×9 大小，其困難
度仍然很高，因為圍棋的靜態形勢評估
通常很複雜，就以判斷勝負而言，西洋
棋與象棋只要吃掉對方的「王」就可以
獲勝。反觀圍棋，需要在最後階段計算
雙方所圍得的領土大小來決定勝負，而
何謂領土、以及如何有效地圍取領土都
是抽象複雜的概念，這些概念都需要發
展新的資料結構及技術來表示。以對局
時判斷形勢而言，圍棋只有一種棋子。
 10
用棋型的系統 
以下我們詳細說明這幾個階段的研
究方法與成果。 
 
3.1. 完成一九路圍棋的雛形，並將重
點放在開局資料庫的研究與設計  
 
3.1.1. 研究九路圍棋的資料結構應的表
示方式 
 
圍棋是一個複雜而抽象的問題。為
了解決這個問題，我們除了使用各種搜
尋技巧之外，更希望能運用到人類長久
以來下圍棋所累積的龐大知識。為了將
這些抽象知識對映到電腦中，讓數位化
的程式能夠利用，我們需要一套清楚而
明確的定義來描述圍棋的各種知識。首
先我們介紹幾個描述棋局進行現況的
用詞。 
盤面: 棋盤上的棋子分布狀況。有時
也明確稱呼其為「原始盤面」。傳統上
盤面是以一個二維陣列來表示，陣列中
的元素只能是三種值的其中一個：「黑
棋」、「白棋」、或「空點」。在對局的過
程之中，盤面是最原始的資料型態，其
他一切資料與物件都必須透過解析盤
面而得。 
盤面資訊: 針對某一特定盤面的所
有圍棋知識的總合。它是一組龐大的資
料結構，由各式各樣的物件所組成，這
些物件彼此間有複雜的階層關係與交
互作用。當然，盤面也是盤面資訊中的
一筆資料，並且可以作為存取盤面資訊
時的唯一鍵值。盤面資訊中的所有物件
與資料，理論上都可以直接由盤面推算
而得。 
著方: 圍棋的對局過程是由兩人交
互放置棋子（又稱著子）。著方是指在
當對局進行到某個特定盤面時具有著
子權力的一方，其值只可能是黑棋或是
白棋。 
棋步: 下棋的動作，通常是指黑棋或
白棋於棋盤上的某一空點放入棋子，經
過氣盡提取等處理過程之後產生出新
的盤面。不過圍棋規定對局雙方在必要
時也可以「虛手」，而一個虛手棋步並
不會改變盤面。 
接下來是現今各種圍棋程式普遍使
用的階層式物件，包括了棋子、棋串、
棋塊等。[Chen 2000] [Yen and Hsu 
1999b, 2001] 
a. 棋子或空點: 這是棋盤
上所放置的最基本物件。如果是棋子
的話，除了記錄棋色還必須記錄所屬
的棋串編號。如果是空點的話，則會
記錄用於棋形比對的棋形碼。 
b. 棋串: 棋串由同色且
互相連接的棋子所構成。圖 3.1.1 右下
角標示為Ｂ而互相連接的黑子就是一
個棋串，其特質包含氣數及氣點等資
訊。當兩個以上的棋串互相連接時，
即合併為一個棋串。每個棋串可用一
個結構變數來表示。內含此棋串的顏
色、氣數、第一個棋子的位置，以及
棋塊狀態等資料。較複雜的結構還包
含氣點及相鄰接的棋串等資訊。 
c. 棋塊: 同顏色的棋串
以某種關係位置互相接近但未連接，
而且不易被對方切斷時，這些棋串便
構成棋塊(Group)。圖 2 中標示為 A、B、
Ｃ的棋子分別形成三個棋塊，關於棋
塊詳細的定義可參考[Yen 2001]，棋塊
是圍棋戰術運用上最基本的結構。大
部分的圍棋戰術就建立在棋塊的攻防
上。在佈局時，尤其是拆邊要點的選
擇，必須考慮如何拆邊圍地、防守自
己的棋塊，或是考慮如何打入對方的
地，予以破壞，並攻擊對方的棋塊。
因此我們的佈局系統必須有正確的棋
塊資訊，方可正確運作。每個棋塊可
用一個結構變數來表示。因為棋塊的
資訊直接被戰術系統所使用，所以結
 12
個缺點。第一，棋子被提取的時候，
每提取一個棋子都相當於作一次更
新，所以若提取的棋子數量很多（例
如十幾個），漸進式更新反而會比較
慢。第二，圍棋程式在實用上經常會
從檔案中讀取事先儲存的盤面。有時
盤面上已經有百餘手棋了，對每次重
新產生盤面資訊的方式而言，盤面上
有一顆棋子或一百顆棋子的差距可能
不大，但漸進式更新則恰恰要多花一
百倍的工夫。還好以上兩種情況在死
活問題的搜尋中極為少見，所以並沒
有太大的影響。 
如果程式中存在有棋塊等級的複雜
物件，我們的策略分成兩個部份，即
簡單物件採取漸進式更新，而複雜物
件每次重新產生，會是比較好的選擇。 
 
3.1.3 完成可自動到圍棋網站下棋的智
慧型代理人，此代理人下棋的戰績，可
作為即時評估本系統效能之用。 
 
目前世界上最大的圍棋對奕網站為
IGS 及 LGS 網 站 [NKB 1992][ 謝
1996]，IGS 原本為韓國人所創立，後
由日本企業買下經營，尖峰上網人數約
在 1500人左右，常態上網人數也有 800
人左右，而 LGS 網站則是台灣人所經
營尖峰上網人數約在 1200 人左右，常
態上網人數有 700 人左右，每月產生的
高段棋士對局棋譜約有六千譜左右。這
些網站的設計方式及原始程式碼都是
由 NNGS 修改而來 [TalentSoft Web 
1994]，所以其通訊規格大致相同。由
於在台灣連結上這兩個網站使用均為
免費，所以我們的智慧型代理人針對此
網站的通訊規格來設計。 
此智慧型代理人的功能有兩個，首
先可以讓我們的九路圍棋程式在這些
網站上下棋，而下棋所得到的分數，可
顯示程式的棋力，此棋力作為即時評估
本系統效能之用。我們也註明此程式為
國科會計畫，為國科會所贊助，顯示國
科會計畫的研究成果。另一方面，此智
慧型代理人可幫助我們收集九路圍棋
棋 譜 ， 由 於 網 路 上 的 棋 譜 是 以
SGF[ Hollosi 2000]格式記錄，我們下一
階段的開局資料庫可直接讀取此格
式，這也是此智慧型代理人的設計重
點。 
 
3.1.4 開局資料庫的研究與設計 
 
我們在象棋及黑白棋(Othello)上的
開局資料庫的研究，都已經有了相當好
的研究結果[陳 1998,2001,2002]。象棋
開局資料庫的基本設計方式如下所述： 
我們所設計的知識庫節點儲存棋譜
的盤面狀態、走步關係及相關統計資
料。在架構上，以起始盤面為根節點、
第幾手走步為深度、父子走步為鏈結，
往下延伸成有向樹狀結構，如圖 4 所
示。整個知識庫大致是成為榕樹形之樹
狀結構，此乃加入大量開局棋譜之外，
又從網路加入完整棋局的結果。 
 
起始盤面
... 下第二手後盤面  ply=2
下第一手後盤面  ply=1
紅方著手
. . .
...
黑方著手
紅方著手
起始盤面  ply=0
 
圖 4 樹狀知識庫結構 
 
開局知識庫以盤面雜湊方式存取每
個資料節點，開局知識庫分為雜湊區與
溢流區︰ 
雜湊區︰16MB。依著手數分為 4
區，每區大小 4MB 可容納 215 個節點。 
溢流區︰無限擴展。當盤面狀態的
雜湊位址相同時，會產生碰撞，此時節
 14
2.盤面所在的 address 與 address 中
的盤面一樣(即此盤面已在知識庫中) 
3.盤面所在的 address 與 address 中
的盤面不一樣, (但此盤面已在知識庫
中) 
4.盤面所在的 address 與 address 中
的盤面不一樣, (但此盤面不在知識庫
中) 
這幾種狀況的設計重點為，決定好
address 的盤面後, 必須要更新上一個
盤面的 son address 及下一個盤面的
parent address。 
最後我們可建立一九路圍棋樹狀知
識庫，再以 minimax 決定盤面的分數。 
此階段的九路圍棋開局資料庫如上
所述。而九路圍棋中節點資訊表示方
式，顯然與象棋有所不同，例如圍棋最
後的勝負與貼目有關（貼目為先下者讓
後下者的目數），而象棋只是看誰先吃
到將或帥，勝負方式計算的不同，也會
影響節點資訊的設計。 
 
3.2. 研究對局樹搜尋方式如何應用
在九路圍棋，包括搜尋架構以及評估
函數 
 
3.2.1 研究九路圍棋的攻殺系統 
 
攻殺(semeai)系統是圍棋程式不可
或缺的系統，攻殺系統是圍棋程式強弱
的關鍵之一，我們研究攻殺系統已有相
當長的時間，十九路圍棋的攻殺系統如
下所述。[Hsu and Liu 1991] [顏 1999b] 
[嚴、許 2001] 
棋串攻殺系統主要的功能是用來測
試某一特定棋串的安危狀態，即其是否
會被吃掉，若會被吃掉的話，則還會算
出如何去吃它，或如何逃脫，或說明此
棋串一定會被吃掉而無法逃脫等等。我
們的棋串攻殺系統包括兩個子程式：一
個稱為 Killer，它可以計算出一個棋串
是否會被吃，以及如何去吃。另一個稱
為 Defender，可以計算出一個棋串是否
會是安全的，以及如何去逃脫。此兩個
子程式彼此互相呼叫而形成一顆搜尋
樹，如圖 5 和圖 6 所示。 
 
        Killer 的節點 
 
        Defender 的節點 
 
 
 
 
 
 
 
 
圖 5 一棵 Killer 搜尋樹 
 
        Killer 的節點 
 
        Defender 的節點 
 
 
 
 
 
 
 
 
圖 6 一棵 Defender 搜尋樹 
 
要決定這顆搜尋樹何時結束搜尋，
共有兩個條件，一個是確定被處理的棋
串會被吃，另一個則是確定它是安全
的。第一個條件很容易確定，當一棋串
沒有氣時，它就被吃了，故若棋串無氣
時，則搜尋終止，並宣告 Killer 成功，
Defender 失敗。 
第二個條件就比較難判斷了，對於
 16
6. 攻擊周圍敵方棋串氣數小於我方
者。 
7. 做眼。 
以下為 Killer 與 Defender 的演算法 
Killer 的演算法： 
 
procedure multi_kill( level , brd , pos ) 
begin 
 SafeLib = k = 0 ; 
 while ( SafeLib++ < MaxSafeLib && k != 
0 ) 
 begin 
 k=killer(SafeLib , level , board , pos); 
end 
end 
 
procedure killer(SafeLib , level,board,pos) 
begin 
 if (level>Maxlevel) return Failure ; 
 if (node > Maxnode ) return Failure ; 
 if (library > SafeLib) return Failure ; 
 Generate_kill_moves; 
 node++ ; 
 for every moves do 
 begin; 
  Make this move; 
  Ans = defender( level+1 , brd , 
pos ) ; 
  recover board ; 
  If ( ans == Failure ) return Success ; 
 end; 
 return Failure ; 
end ; 
 
Defender 的演算法 
 
procedure defender( SafeLib , level , brd , 
pos ) 
begin ; 
 if ( liberary == 0 )   return 
Failure ; 
 if ( level > Maxlevel )  return success ; 
if ( node > Maxnode )  return success ; 
if ( library > SafeLib )  return success ; 
generate_defend_moves ; 
node++ ; 
for every move do 
begin; 
 Make this move on board; 
 ans = multi_killer(level+1,brd,pos) ; 
Recover board ; 
If ( ans == Failure ) return Success ; 
end ; 
return failure ; 
end 
 
九路圍棋程式由於盤面較小，攻殺
系統與十九路圍棋將有所不同，我們歸
納以上的攻殺系統，可發現發展一個有
效率的攻殺系統有三個要關鍵點，首先
是搜尋演算法必須正確而快速，我們之
前的演算法並無法處理打劫（處理重複
盤面）的問題，導致正確率無法提高，
必須改進之。其次是搜尋樹終止條件，
由於九路圍棋盤面較小，我們設計更嚴
格的終止條件，增快效率。最後殺步和
逃步的產生順序，也必須以九路圍棋的
特性改進。 
 
3.2.2 研究可以處理劫爭的攻殺系統 
 
在上一階段的基礎演算法之中，如
果候選棋步所指向的節點已經存在於
搜尋過程中，則為了避免造成循環指
向，只得刪除此候選棋步。這個刪除的
處理方式是否合理呢？我們是否能保
證：刪除這些候選棋步並不會對搜尋的
結果造成任何影響？ 
如果從全盤的角度來考慮，現今所
使用的幾種圍棋規則，例如應式制、日
本制等，都有針對盤面重複的狀況制定
明確的規則，從簡單的提劫、禁止自
殺，到複雜的長生劫、三劫、四劫等狀
況，或是規定「判定和棋」、或是定義
出循環手數超過一手的「超劫」，皆為
旨在防止盤面重複的狀況出現。因此就
全盤搜尋角度來說，刪除循環棋步恰好
能使得搜尋內容和現實對局的狀況相
匹配，確實是合理的做法。 
但是在攻殺死活問題之中，搜尋棋
步的選取範圍僅止於目標棋鏈周圍，屬
於局部盤面的搜尋。在此搜尋過程之中
難免會出現打劫的狀況，但由於所謂
「找劫材」的動作時常是在局部盤面以
外的區域進行，並沒有改變局部盤面，
因此雖然有打劫禁著的規定，在攻殺做
活問題的搜尋中立即的盤面重複依然
是存在的。 
 18
勳九段的理論[Cho 1989] ，趙九段認
為在判斷形勢時，必須考慮以下三個因
素：佔地、厚勢和模樣。一般來說，在
棋局進行中，計算實際佔地（又稱實空）
的能力是很重要的，尤其是在中盤結束
前，計算雙方實空的差距，才能夠決定
下一步的策略。在佈局時，模樣是形成
大空的最主要原因，因此，必須隨時偵
測模樣，以決定戰略。而厚勢的大小對
於棋塊的攻防和厚勢的形成都有絕對
的影響，也是必須考慮的因素。在這個
例子中，判斷形勢必須包括三種能力:
計算實空、計算厚勢和計算模樣。對於
九路圍棋來說，因為棋盤較小，計算實
空為最重要，而計算模樣方面則可以忽
略，而厚勢我們可將之定義為味道好的
棋型，如此才能適合九路圍棋之用。。 
在研究出圍棋專家棋士的形勢評估
方式之後，我們必須將其修改為現有電
腦硬體架構及效能所可以計算的形勢
評估函數方法。因為人類下棋，通常是
透過視覺與推理系統，歸納盤面上的各
種資訊，作為判斷形勢及分析棋步優劣
的基礎。高段的棋士，更能憑藉豐富的
經驗知識，迅速掌握其中重要的因素，
從而推算出理想的著手。但是對於電腦
來說，就視覺反應思考而言，還無法模
擬人類的能力，而由視覺反應所產生的
跳躍性思考方式，也是現今電腦所難以
達成的。 
 
3.1. 研究如何以回溯分析法處理官
子，並研究如何以機器學習方式增進
棋力 
 
3.3.1 研究如何以回溯分析法處理官
子，建立九路圍棋的殘局資料庫 
 
回溯分析法(retrograde analysis)在
下棋的程式上面，最有名的應用是建立
西 洋 棋 的 殘 局 資 料 庫 [Stiller 
1996][Thompson 1986,1996]，此殘局資
料庫對於西洋棋程式能擊敗人類世界
冠軍，有很大的幫助。回溯分析法的概
念為找出最後的局面，給予每個盤面
Won, Lost, 或 Drawn，再根據這些推算
回去，產生大量的殘局盤面到這些最後
的局面的最短路徑。 
回溯分析法在圍棋的應用，目前已
經 應 用 在 詰 棋 上 [Berlek 1994] 
[Cazenave 2000]，但實用性仍偏低，要
將此方法用在十九路圍棋上，是一件很
困難的事。但是對於九路圍棋，由於盤
面較小，若是我們根據圍棋的規則，對
最後盤面的條件加以限制，我們可以產
生某些限制條件下的終止盤面，而進行
回溯分析，進而產生殘局資料庫。 
 
3.3.2 將上一階段所產生的殘局資料庫
與搜尋系統結合 
 
產生九路圍棋的殘局資料庫後，最
重要的工作就是此資料庫與搜尋系統
結合，如此才能充分應用此資料庫。在
象棋中，將殘局資料庫與中盤搜尋系統
結合，並不是一件容易的事，這也是目
前象棋程式無法到達人類冠軍水準的
原因之一。但由於九路圍棋在不考慮評
估函數的複雜度之下，其搜尋複雜度比
象棋及西洋棋都要低。而且圍棋的棋子
具有不能移動的特性，因此，此結合的
過程，比象棋及西洋棋要簡單的多。 
 
3.3.3 以機器學習方式增進棋力，從高段
棋士棋譜及自己的棋譜擷取知識，增進
棋力 
 
以大量的圍棋專家知識來解決電腦
對局的問題，是現今的趨勢之一 
[Burm2000] [Werf and Herik 2001][顏
2002a][ Herik, Uiterwijk and Rijswijck 
2002] 。而對於電腦圍棋來說，這似乎
是突破目前圍棋程式瓶頸的唯一方
法。近十年來，由於硬體的進步以及機
器學習各種新技術的開發，已經有很多
人嘗試以機器學習，類神經網路和模糊
系統等的方法來進行電腦圍棋的研究
[Abramson and Wechsler 
2001][ Burmeister 2001][ Tristan 
 20
尋演算法及機器學習理論，目前已經有
四篇以上的相關論文發表。所製作出的
九路圍棋程式，對圍棋學習者會有很大
的幫助。每年固定參加的電腦奧林匹亞
棋類比賽的成績也都有很好的表現，對
於參與的人員，對人工智慧中的電腦對
局、各種搜尋方式和機器學習方法有更
深入的瞭解及產生相關的研究成果。可
說是已經達成了本計劃的預期目標。 
 
參考文獻 
中文 
 
1. 李敬訓(1990)，圍棋課本入門篇，
台灣台北，世界文物出版社。 
2. 許舜欽(1989)，電腦圍棋在台灣的
回顧與前瞻，中國工程師學會，日
本分會，1989年學術研討會論文
集。 
3. 郭奕宏(1997)，電腦圍棋的經驗法
則之研究，台灣工業技術學院電機
工程研究所，碩士論文，1997。 
4. 陳文鋕(1999)，電腦圍棋詰棋程式
搜尋技巧之研究，國立台灣大學資
訊工程研究所，碩士論文。 
5. 陳志昌(1998)，“電腦象棋開局知識
庫系統之設計與製作”， 國立台灣
大學資訊工程研究所碩士論文。 
6. 陳志昌、許舜欽(2001)，電腦象棋
開局資料庫網路查詢應用系統之
研製”，第六屆人工智慧與應用研
討會論文集，2001年11月16日，高
雄，pages 588-592。 
7. 陳志昌、徐明煒、顏士淨(2002)，
“Othello開局資料庫系統之研製 ,"  
第七屆人工智慧與應用研討會，
2002年11月15日，台中，台灣。 
8. 陳再興(1995)，“電腦象棋停著殺之
研究”，元智工學院電機與資訊工
程研究所，碩士論文。 
9. 過百齡(明)、陶式玉(清)編注，吳清
源解說、陳憲輝翻譯(1984)，官子
譜，世界文物出版社，台灣台北。 
10. 謝豐陽 (1996)，傳奇圍棋網站(The 
Legend Go Server). 
http://www.lgs.hinet.net/. 
11. 顏士淨、許舜欽(1997a)，”電腦圍
棋佈局系統之設計與製作”，1997
年全國計算機會議，台中市東海大
學。 
12. 顏士淨、許舜欽(1997b)，”電腦圍
棋的發展概況”，Communications of 
the Institute of Information and 
Computing Machinery，Vol. 3, NO. 
2, April, pages 21 -- 28。 
13. 顏士淨、許舜欽(1999a)，”電腦圍
棋 近 兩 年 來 的 發 展 概 況 ” ，
Communications of the Institute of 
Information and Computing 
Machinery，Vol. 1, NO. 2, April, 
pages 23 -- 30。 
14. 顏士淨 (1999b) ，電腦圍棋程式
Jimmy 5.0之設計與製作，國立台灣
大學資訊工程研究所，博士論文，
1999。 
15. 顏士淨、嚴礽麒、許舜欽(2002a)，
“電腦圍棋中盤著手策略," 第七屆
人工智慧與應用研討會，2002年11
月15日，台中，台灣。 
16. 顏士淨(2002b)，國科會研究報告：
一個可自動擷取專家知識的象棋
知 識 開 發 系 統 ，
90-2218-E-259-008-。 
17. 應昌期(1995)，應昌期圍棋教育基
金會，計點制圍棋規則，台灣台
北，1995年版。 
18. 劉東岳(1989)，電腦圍棋程式之設
計與製作，國立台灣大學資訊工程
研究所碩士論文。 
19. 黃永杰(1994)，圍棋形勢判斷系統
與搜尋系統之設計與製作，國立台
灣大學資訊工程研究所碩士論文。 
20. 嚴 礽 麒 (1992) ， 電 腦 圍 棋 程 式 
Archmage 1.0 之設計與製作，國立
台灣大學資訊工程研究所碩士論
文。 
21. 嚴礽麒、許舜欽 (2001) ， Killer 
Moves Generator 之 研 究 與 設
 22
20. Ken Chen(2000). “Some practical 
techniques for global search in 
Go,” ICGA J. 23(2) pages 67-74. 
21. Ken Chen(2001). “Computer Go: 
Knowledge, Search, and Move 
Decision,” ICGA J. 24(4) pages 
203-215.  
22. Chikun Cho (1989). Positional 
Judgment High-speed Game 
Analysis. The ISHI. Press, INS. 
Tokyo. 
23. Fayyad, U., Piatetsky-Shapiro, G. 
& Smyth, P.(1996). "The KDD 
Process for Extracting Useful 
Knowledge from Volumes of 
Data," Communications of the 
ACM, 39(11), 1996, pages 27-34. 
24. David Fotland(2000). “World 
Computer Go Championships,” 
World-Wide-Web page, 
http://www.mth.kcl.ac.uk/~mreiss/
bill/comp/. 
25. A. Hollosi(2000). SGF FF4-Smart 
game Format, 2000. 
http://www.red-bean.com/sgf. 
26. S.C.Hsu and D.Y. Liu(1991). 
“Design and construction of the 
computer Go program Dragon 2," 
Computer Go, No. 16, pages 3--14. 
27. S.C.Hsu, J.C. Yan, and H. 
Chang(1994). “Design and 
implementation of a computer Go 
program Archimage 1.1,” Journal 
of Information Science and 
Engineering 10, pages 239--258. 
28. Y.J.Hwang and S.C. Hsu(1994) 
“Design and implementation of a 
position judgment system for 
computer Go programs,” Bulletin 
of the College of Engineering, 
N.T.U., No. 62, Oct. 1994, pages 
21--33. 
29. S. Hu, P. Lehner(1997). 
Multipurpose strategic planning in 
the game of Go, IEEE Transactions 
on Pattern Analysis and Machine 
Intelligence 19(9), pages 
1048-1051. 
30. NKB Inc. (1992). The Internet Go 
Server, 
http://www.pandanet.co.jp/English/
. 
31. H. Jaap van den Herik, Jos W.H.M. 
Uiterwijk, Jack van Rijswijck 
(2002). Games solved: Now and in 
the future, Artificial Intelligence 
134 pages 277-311. 
32. D. E. Knuth(1975). An analysis of 
alpha-beta pruning, Artificial 
intelligence, 6(4). pages 293-326. 
33. R. Korf (1985). Depth-first 
iterative deepening: an optimal 
admissible tree search,Artificial 
Intelligence, 27, (1985), pp. 
97-109. 
34. Remus, H. (1962). Simulation of a 
Learning Machine for Playing Go, 
Proc. IFIP Congress 62, Munich, 
North Holland Publishing 
Company, Amsterdam, 1962, pages 
192—194. 
35. Ryder, J. L. (1972). Heuristic 
Analysis of large Tree as Generated 
in the Game of Go, AIM-271, 
Stanford Univ., 1972. 
36. K. Kao (2000), Mean and 
Temperature Search for Go 
Endgames, in Information Sciences, 
122, pages 77-90. 
37. K. Kao (1998). Mean and 
Temperature Search for 
Combinatorial games, in 
Proceedings of Joint Conference on 
Information Sciences, October 
23-28, 1998, Research Triangle 
Park, NC, vol. 1 pages389-391. 
38. K. Kao (1997). Sums of Hot and 
Tepid Combinatorial Games, Ph.D. 
Dissertation, University of North 
Carolina at Charlotte. 
39. Walter Reitman and Bruce Wilcox 
(1978). Pattern recognition and 
pattern-directed inference in a 
program for playing Go, 
Pattern-Directed Inference Systems, 
pages 503--523. 
40. Takuya Kojima (1996). Kazuhiro 
Ueda, and Saburo Nagano, A case 
study on acquisition of pattern 
knowledge in Go using ecological 
