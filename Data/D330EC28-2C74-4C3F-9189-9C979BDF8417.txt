行政院國家科學委員會專題研究計畫期中報告 
 
適應性前向錯誤更正在無線網路的影像傳輸研究 
計畫編號：NSC 97－2218－E－507－001 
執行期間：97 年 01 月 01 日至 97 年 10 月 31 日 
主持人: 柯志亨 國立金門技術學院資工系助理教授 
Email: smallko@kmit.edu.tw 
 
摘要 
在這個計劃中，我們提出了一個新的適應性前向錯誤更正機制，以用來提升多媒體影
像在無線網路上的傳輸品質。所以提出來的方法跟之前研究不同的地方在於傳統機制是由
接收端會提供資訊給傳送端，傳送端再調整冗餘封包數量；而所提出來的新方法則是直接
在無線網路基地台根據無線網路負載量和無線網路傳輸通路品質等因素直接動態調整冗餘
封包數量來保護多媒體影像。經由模擬實驗結果顯示我們所提出的方法能有效的提升多媒
體影像在無線網路上的傳輸品質。 
關鍵詞: 無線網路, 多媒體通訊 
Abstract 
In this project, we propose a novel Enhanced Adaptive Forward Error Correction (EAFEC) 
mechanism to improve the quality of video delivered over a lossy wireless network. Unlike the 
previous AFEC schemes where the determination information is fed back from the receiver side, 
the determination information in the EAFEC scheme is directly calculated by the FEC encoder 
(wireless AP). Without the feeding back, the information is more accurate for determining the 
proper FEC rate. In the determining process, the EAFEC algorithm considers both the network 
traffic load, as indicated by the queue length at the access point, and the wireless channel state, as 
indicated by the packet retransmission time. The numerical results show that the EAFEC 
algorithm obtains a significant improvement in the quality of the transmitted video data. 
Significantly, the EAFEC algorithm achieves this performance improvement without injecting 
unnecessary redundant packets into the network.  
 
Keyword: Wireless network, FEC, Video quality, Multimedia communication. 
 
The remainder of this project report is organized as follows. Section 2 reviews the basic 
concepts of FEC protocols, while Section 3 outlines the proposed EAFEC mechanism. Section 4 
presents the experimental settings and topology and develops the current wireless error model. 
Section 5 presents the simulation results and analyzes the performance of the EAFEC algorithm 
relative to that of traditional SFEC schemes. Finally, Section 6 presents some brief conclusions. 
 
2. FEC protocols 
The basic principle of FEC involves injecting redundant data into the original transmission 
data such that any loss data can be recovered without the need for retransmission. Figure 1 shows 
the general case where a block of k packets is encoded at a sender using FEC as k + h packets. 
Provided that no more than h packets are dropped, the original transmission data can then be 
successfully recovered at the receiver, irrespective of whether the dropped packets are original 
packets or FEC redundant packets. 
 
  
Figure 1. (a) Static FEC and (b) Adaptive FEC. 
 
2.1 SFEC and AFEC techniques 
In Figure 1(a), the SFEC algorithm generates a fixed number (h) of redundant packets. The 
SFEC technique has the advantage of a simple implementation, but is unable to adapt 
dynamically to changing network conditions. As a result, when the error rate is low, SFEC 
induces a relatively higher overhead. Conversely, when the error rate is high, SFEC may result in 
a poor loss recovery rate. In other words, the failure of SFEC to adequately match the overhead 
incurred by transmitting additional packets to the degree of underlying channel error, can result in 
a degradation of the network performance, particularly when the channel path rate fluctuates 
widely. Figure 1(b) illustrates the AFEC technique. AFEC has the advantage that it dynamically 
determines the appropriate number of redundant packets in accordance with the current network 
status. Previous proposals for AFEC techniques [8-14] used the network condition parameters, 
such as the transmission delay, the packet loss rate, the TCP window size, and so forth, as the 
basis for determining the number of redundant packets necessary to achieve the desired loss 
recovery rate. In general, the results showed that AFEC techniques provide a better system 
performance than do the SFEC mechanisms. 
 
3. Enhanced Adaptive Forward Error Correction (EAFEC) 
The IEEE 802.11 standard defines two configuration modes for an 802.11 wireless network, 
calculated by the FEC encoder (wireless AP). Without the feeding back, the information is more 
accurate for determining the proper FEC rate. 
 
3.2 EAFEC algorithm 
Table 1 presents the pseudocode for the proposed EAFEC algorithm. Table 2 summarizes the 
notations used in this pseudocode. When a block of video packets is received at the AP, the AP 
responds by calculating the queue length to determine the appropriate number of redundant FEC 
packets. In the EAFEC algorithm, the assumption is that the maximum number of redundant 
packets for a block of video packets is set as Max_FEC. The AP then compares the calculated 
queue length against a set of threshold values, as described in the following. If the queue length is 
less than the lower threshold value (threshold_1), the AP generates the Max_FEC FEC packets. 
However, if the queue length is greater than the upper threshold value (threshold_2), the AP 
generates no FEC packets. Finally, if the queue length falls within the lower and upper threshold 
values, the AP determines the number of FEC packets based on the data size fraction in the queue. 
The number of FEC packets is obtained by scaling down the maximum number of FEC packets 
according to the extent to which the calculated queue length exceeds the lower threshold value.  
 
Table 1. EAFEC pseudocode. 
Initialization: 
qlen = 0; rT = 0; 
When a block of packets arrive: 
 
/* use queue length to determine number of redundant FEC packets */ 
qlen = (1 – q_weight ) * current_q + q_weight * qlen 
if (qlen < threshold_1) 
  no_FEC = Max_FEC; 
else if (qlen < threshold_2)  
  no_FEC = Max_FEC * (threshold_2 – qlen) / (threshold_2 – 
threshold_1); 
else 
no_FEC = 0; 
 
/* use retransmission time to tune the no_FEC */ 
rT = (1 – rt_weight) * current_rT + rt_weight * rT 
if (rT < threshold_3)  
no_FEC = 0; 
else if (rT < threshold_4) 
  no_FEC = no_FEC * ( 1 – ((threshold_4 – rT) / (threshold_4 – 
threshold_3)));   
else  
no_FEC = no_FEC; 
 
The value of FEC packets calculated in “Step 1” (based on the queue length) is then tuned 
over the Internet and was received at a video receiver via a wireless link. The video traffic trace 
used in the simulations was the “NEWS” video, encoded using H.264 video coding with a JM 1.7 
codec [17]. “NEWS” has a QCIF format and an IPPPPPPPPPPPPPP GOP structure (Simple 
Profile), and comprises 300 frames. During the simulations, “NEWS” was transmitted with a 
video frame rate of 30 (frames/sec). Each frame is divided into transmission slices of 
approximately 500 bytes and is transmitted via RTP/UDP/IP packets by unicasting transmission. 
A total of 674 video packets was transmitted. As shown in Figure 4, two additional traffic flows 
were considered, namely FTP traffic, transmitted using TCP packets, and exponential traffic, 
transmitted using UDP packets. The exponential traffic was transmitted at a rate of 1 Mbps and 
the burst and idle time were both specified as 0.5ms. Finally, the link between the wireless AP 
and the video receiver was IEEE 802.11b 11Mbps, the link between the Internet and the AP was 
100Mbps, and the link between the traffic sources and the Internet was 10Mbps. 
 
Video 
receiver
Video server
FTP traffic
Exponential traffic
Wireless
Access Point
Internet
802.11b
(11 Mbps)
FTP and exponential 
traffic receiver
 
Figure 4. Simulation topology. 
 
4.2 Comparison of EAFEC with static FEC  
In the present simulations, the performance of the EAFEC mechanism was compared against 
two SFEC schemes, designated as case SFEC_0 and SFEC_4. In SFEC_0, when video packets 
are transmitted through the AP, no FEC packets are generated. The SFEC_0 technique delivered 
the video stream with “best-effort” service. However, in SFEC_4, for every eight video packets 
(i.e. one video block) transmitted through the AP, four FEC packets are generated to facilitate 
video recovery. The EAFEC settings are specified as the lower threshold value of queue length: 
ten packets; the upper threshold value of queue length: forty packets; the lower threshold value of 
packet retransmission time: five; and the upper threshold value of packet retransmission time: ten. 
Additionally, the weighted values of the queue length and the retransmission time are both 
specified as 0.1, and the Max_FEC is set as four. Finally, the AP queue size of all the FEC 
mechanisms, i.e. SFEC and AEFEC, was limited to a maximum of fifty packets. In the 
simulations, it is assumed that if the sum of the number of original video packets in a block and 
the number of FEC redundant packets in the same block is greater than, or equal to, eight, the 
original eight video packets can be successfully restored. Otherwise, video packets alone were 
sent to the receiver applications and the FEC packets were useless. 
 
4.3 Wireless error model 
The wireless error model implemented in the present simulations was based on the random 
uniform model, which assigns the distributed packets an error rate p. In wireless networks, there 
Figure 5. Variation of packet loss rate with number of redundant packets in SFEC and EAFEC 
schemes. 
 
Figure 6. Variation of PSNR with number of redundant packets in SFEC and EAFEC schemes. 
 
5.2 EAFEC performance  
In the second set of experiments, the performance of the EAFEC mechanism was evaluated 
and compared with that of the SFEC techniques (cases SFEC_0 and SFEC_4) in terms of the 
number of redundant packet numbers, the packet loss rate, the video transmission quality, and the 
recovery efficiency. 
Figure 7 plots the variation of the number of redundant FEC packets generated by the EAFEC 
and SFEC schemes with the packet error rate. Note that the packet error rate is specified in the 
range 0.1 to 0.7, with intervals of 0.1, and the Peffective is determined from the wireless error model 
to be 0.0001, 0.0016… 0.2401, respectively. As expected, the number of redundant FEC packets 
remains constant in the two SFEC mechanisms. However, in the EAFEC mechanism, the number 
of redundant FEC packets increases as the packet error rate increases. This is due to the fact that a 
high packet error rate leads to a higher probability of packet retransmission. The results depicted 
by Figure 8 confirm that the number of redundant packets generated by the EAFEC mechanism 
varies in accordance with the network conditions. Figures 8 and 9 illustrate the variation in the 
packet loss rate and the PSNR, respectively, with an increasing packet error rate for the EAFEC 
algorithm and the two SFEC schemes. It is apparent that the EAFEC algorithm achieves a similar 
video transmission quality to that of SFEC scheme SFEC_4. Significantly, however, the EAFEC 
algorithm achieves this enhanced video transmission quality without using unnecessary FEC 
packets. 
 Figure 10. Variation of recovery efficiency with packet error rate. 
Figure 10 illustrates the variation of the Recovery Efficiency (RE) with the packet error rate. 
Here, RE is defined as the ratio of the number of recovered packets to the total number of 
redundant packets sent in the transmission. For example, when Peffective is 0.0625, SFEC_4 
recovers 42 lost packets by sending 336 redundant packets. Hence, the RE value is 0.125. 
However, for the same value of Peffective, EAFEC sends 213 redundant packets and recovers 39 
lost packets. Therefore, the RE value is 0.184. In other words, EAFEC provides a better loss 
recovery performance than SFEC_4. 
Figure 11 presents a visual comparison of the video transmission quality of the three FEC 
schemes considered in the simulations. The packet error rates in the three FEC schemes are all 
0.5 (Peffective= 0.0625). Figure 11(a) shows a video sequence delivered using the SFEC_0 
mechanism. As shown, the average PSNR is 31.19. Figures 11(b) and 11(c) show that the 
proposed EAFEC algorithm and the static FEC scheme (SFEC_4) obtain average PSNR values of 
38.66 and 39.12, respectively. It is apparent that the quality of the video delivered using the 
EAFEC scheme is significantly better than that of SFEC_0 and rivals that of SFEC_4.  
 
(a) SFEC_0: average PSNR = 31.19 
 
(b) EAFEC: average PSNR = 38.66 
