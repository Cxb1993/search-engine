  2
 
ameliorate the impact of channel impairments by 
utilizing neighboring information in order to 
provide subjectively acceptable restoration of 
damaged picture regions. On the other hand, using 
a deblocking filter for improving visual quality is 
more or less helpful in the block-based video 
transmission over an error-prone environment. 
The reason is that the functionalities of deblocking 
filters are similar to that of error concealment 
since both modules smooth the block boundaries 
by a pre-defined interpolating procedure. In 
particular, the error concealment will be disabled 
when the bit-streams are of error-free. On the 
contrary, the deblocking filter can be turned off 
when the error has been detected. Therein, 
deblocking filter can be replaced with error 
concealment module for improving visual quality. 
In other words, both deblocking filter and error 
concealment will not activate simultaneously. 
Hence, the second task of this proposal is to 
realize an area-efficient design to combine both 
deblocking filter and error concealment units. 
 
三、研究方法與成果：  
 
(A). Soft CALVC 錯誤偵測機制 
 
This paragraph addresses an introductory 
overview of soft-input H.264/AVC decoder. 
Because a soft-input stream retains the data 
reliability and informs the decoder about channel 
behaviors, it provides a reliable estimator to detect 
or correct corrupted video. To apply a soft-stream 
into the video decoding system, a soft 
context-adaptive variable length decoder (CAVLD) 
has been newly designed and is capable of 
detecting erroneous positions. Figure 1 
summarizes the soft-input video decoding system 
based on our previous work [1]. First, the stream 
input is determined by the number of 
de-quantization levels (hard: 2-level; soft: 
N-level). Through the data partition and unequal 
error protection, the header stream is strongly 
protected, and residual coefficients are less 
protected and decoded by soft CAVLD. The soft 
CAVLD notifies error concealment that whether 
the corrupted macroblock (MB) occurs or not. 
Therefore, the corrupted data can be correctly 
concealed and the objective and subjective visual 
quality can be improved. In the following, we 
focus on the soft error detection algorithm on 
CAVLC decoder. 
 
D
is
pl
ay
 I
n
te
rf
ac
e
 
Figure 1: Soft-input H.264/AVC decoding block 
diagram. 
 
 We modify a soft-input soft-output (SISO) 
algorithm to improve the capabilities of error 
detection instead of correction. In general, the 
SISO decoding technique [2] is considered as an 
exhaustive decoding procedure to resist the error 
disturbance in a noisy channel. It estimates and 
searches on the tree-like path in the existence of 
additive white Gaussian noise (AWGN). However, 
a main drawback of this approach is that many 
states have to be kept for correcting errors. It 
needs a great deal of memory storage and 
computational complexity. Hence, it is 
inappropriate for VLSI implementation. To avoid 
the large computation penalty, we concentrate on 
the error detection since there is no need to keep 
many states for correcting errors in trace-back 
procedures. We only keep present states to detect 
that whether this video data is correct or not. In 
the following, we show the modified SISO 
algorithm to improve the error detection 
capabilities. 
 Before we address a general algorithm of 
modified SISO, we use a graph representation to 
help the understanding of soft VLC decoding. We 
give a simple example to illustrate the behavior of 
soft VLC algorithm. Firstly, assume we have a 
simple VLC table with only 3 symbols {0,10,11} 
and a packet that includes 3 bits (and equivalently 
2 symbols) with content as ‘0 10’. After BPSK 
modulation, the modulated sequence is {-1,+1,-1}. 
When the packet is transmitted over the AWGN 
channel, the received soft bit-stream may become 
{-0.8, -0.05, -0.2} (i.e. an error occurred in the 
second bit). Figure 2 depicts the graph 
representation of this example. The path metric 
PM(i,j) denotes the cumulative square difference 
of i-th symbol and j-th bit in each decoded symbol. 
The branch metric BM(i,j) is the square difference 
between the received soft-stream and decoded 
