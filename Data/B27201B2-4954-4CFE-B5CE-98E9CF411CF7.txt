1Abstract
This paper examines the problem of scheduling two-machine no-wait job shops to
minimize makespan.  The problem is known to be strongly NP-hard.  A two-phase
heuristic is developed to solve the problem.  Phase 1 of the heuristic transforms the
problem into a no-wait flow shop problem and solves it using the well known Gilmore
and Gomory algorithm.  Phase 2 of the heuristic improves the solution obtained in
phase 1 using a simple tabu search algorithm.  Computational results show that the
proposed heuristic performs extremely well in terms of both solution quality and
computation time. It finds an optimal solution to about 90 percent of the problem
instances and the average deviation from the lower bond for the other problem
instances is infinitesimal.
Keywords: scheduling, no-wait, job shop, tabu search, heuristic.
3another to prevent degradation.  Other examples include chemical and
pharmaceutical industries [2], food processing industries [3], and semiconductor
testing facilities [4].  The reader may refer to the papers by Hall and Sriskandarajah
[3] and Goyal and Sriskandarajah [5] for a detailed discussion of the applications and
research on no-wait scheduling problems.
Due to its practical applications and theoretical issues, no-wait scheduling has
received an increasing amount of research attention in recent years.  However, as
shown in the survey paper by Hall and Sriskandarajah [3], most of the work on
no-wait scheduling with makespan as the objective has been focused on flow shop
problems.  Gilmore and Gomory [6] propose an O( nn log ) algorithm for the
problem max2 // CnwtF .  Rock [7] proves that the problem max3 // CnwtF  is
strongly NP-hard.  Piehler [8] shows the equivalence of the problem max// CnwtFm
to a traveling salesman problem.  Many heuristics have been developed for the
problem max// CnwtFm .  Reddi and Ramamoorthy [9], Wismer [10], Gangadharan
and Rajendran [11] and Rajendran [12] present simple constructive heuristics, while
Aldowaisan and Allahverdi [13], Shyu, Lin and Yin [14], Grabowski and Pempera [15]
and Grabowski and Pempera [16] propose metaheuristics.
For the case of job shop no-wait scheduling with makespan as the objective, Mascis
and Pacciarelli [17] model the problem using an alternative graph formulation and
5procedure is presented.  In section 3, computational experiments are conducted to
evaluate the performance of the proposed heuristic.  Finally, our conclusions are
given in section 4.
2.  A Two-phase Heuristic
In this section we present a heuristic that produces a near-optimal solution quickly for
the problem max2 // CnwtJ .  Note that the makespan ( )(max SC ) of a feasible
schedule S is equal to the value },max{
1 21 1 åå == ++
n
i i
n
i i
IbIa  where 1I ( 2I ) is the
total idle time on machine 1M ( 2M ) in S.  Hence, minimizing the value of maxC  is
equivalent to minimizing the total idle time on each machine.  Based on this
rationale, we propose a two-phase heuristic procedure for max2 // CnwtJ .
2.1 Phase 1
We first introduce the idea of job pairing.  Consider two jobs i and k, where job i has
its first operation to be performed on 1M and job k has its first operation to be
performed on 2M .  Define (i, k) to be an ordered job pair consisting of jobs i and k,
and job i immediately precedes job k on machine 1M .  As shown in Figure 1, job
pair (i, k) can be viewed as a super job with three operations, where the first operation
is to be performed on machine 1M  with length a (head), the second operation
requires both machines for an uninterrupted period of g (body), and the third
7pair to the makespan of a schedule is independent of the position of the job pair within
the schedule, and hence can be treated separately.  Consider a feasible schedule S
consisting of job pairs in the order 1, 2,…, K.  Note that some of the job pairs may
actually be single jobs.  With a slight abuse of notation, let ia , ig  and ib  be the
head, body and tail of job pair i, i =1, 2,…,K.  Define 010 == +Kab .  The
makespan of schedule S can be computed in O(n) time as åå == +=
K
i i
K
i i
SC
01max
)( dg
where
ï
ï
î
ï
ï
í
ì
³<-
<<--
³³
<³-
=
++
++
++
++
0,0
0,0),max(
0,0),max(
0,0
11
11
11
11
iiii
iiii
iiii
iiii
i
if
if
if
if
abba
abab
abab
abab
d
a
b
g
a b-
g
a- b
g
a-
b-
g
Figure 2    Four possible types of a job pair (i, k).
91M ( 2M ).  In this paper we assume that 12N ³ 21N .  The case 12N < 21N  can
be managed similarly.  In phase 1, 12N  job pairs are generated, where 21N  of
them are formed by two jobs with different route and the rest of them are actually
single jobs.  We now describe how these 12N  job pairs are generated in details.
When two jobs are paired, the absolute values of the resulted head and tail can be
viewed in some sense as potential idle time on the machines.  Hence, the objective of
minimizing makespan is realized by minimizing the sum of the absolute values of
heads and tails of the job pairs.  In order to generate job pairs for which the absolute
values of heads and tails are as small as possible, jobs with comparable length should
be paired together.  Based on this rationale, we formulate the job pairing problem as
an assignment problem.   Each job in 12N  is to be paired with a job in 21N .
Since 12N ³ 21N , 12N - 21N  dummy jobs are first added to the set 21N .   For
each dummy job 21Ni Î , we have 0== ii ba .  Define the ‘cost’ of pairing jobs i
and k as ikikikc ba += , where 2112 and NkNi ÎÎ .  That is, the sum of the
absolute values of head and tail of job pair (i, k) is given by ikc .
The assignment problem (AP) can be solved by the Hungarian method due to Kuhn
[23] and Munkres [24].  The complexity of this method is O( 312N ).  Since the
Gilmore and Gomory algorithm has a complexity of O( 1212 log NN ), the overall
complexity of phase 1 is O( 312N ).
11
problems.  More refined versions and a large number of successful applications of
TS can be found in [26-28].  TS employs a neighborhood search procedure to
iteratively move from a solution s to a solution s' in the neighborhood of s, until some
stopping criterion has been satisfied.  The overall approach is to pursue
neighborhood search whenever it encounters a local optimum by allowing
non-improving moves; cycling back to previously visited solutions is prevented by the
use of memories, called tabu lists, that record the recent history of the search.  Three
commonly used stopping criteria are: (1) stop if the best solution found is close
enough to a lower bound of the optimum value; (2) stop if the number of iterations
without any improvement exceeds a specified limit; and (3) stop if the total number of
iterations performed exceeds a specified limit.
We shall define in the following subsections the structural elements that have been
used in our implementation of TS.
2.2.1 Neighborhoods
A solution to the problem is encoded into a permutation of the job numbers, including
dummy jobs, in the set 21N .  The ith element in a permutation denotes the job in the
set 21N  to be paired with the ith job in the set 12N .  For example, consider a
problem with 8 jobs {1,2,…,8} where 12N ={1,2,3,4,5} and 21N ={6,7,8}.  After
adding two dummy jobs 9 and 10 to the set 21N , we have 21N ={6,7,8,9,10}.  The
13
contribute to the efficiency and success of TS.  Here, an | 12N |´ | 12N |
two-dimensional matrix is used to record the tabu status.  For each swap move in
which jobs in positions l and r are exchanged, the matrix stores in the position of row
l and column r the iteration number after which the jobs in positions l and r can be
exchanged.  That is, when TS exchanges the jobs in positions l and r, the value
iter+TL is stored in the position of row l and column r, where iter is current iteration
count.  In our implementation, a fixed tabu length strategy is adopted.  Also,
whenever a move yields an objective function value less than the best one found so far,
the aspiration criterion is invoked and the tabu status of such a move is overridden.
2.2.3 Stopping Criterion
In our implementation, TS terminates whenever the best solution found is equal to a
lower bound of the optimum value (to be discussed in section 3), and hence is proved
to be an optimal solution, or the number of iterations without any improvement
exceeds a specified limit, max_non_imp.
3.  Computational Experiments
In this section we describe our experiments to evaluate the performance of the
proposed heuristic.  The two-phase heuristic is coded in C and implemented on a
Pentium 4 3.0GHz personal computer.  Test problems with n equal to 40, 80, 120,
15
by the heuristic equals the lower bound, and hence is proved to be the optimal value.
avgT  = Average CPU time in seconds.
maxT  = Maximum CPU time in seconds.
Table 1 Results of the proposed heuristic
n (%)avgD (%)maxD optN avgT maxT
40 0.090 0.694 24 0.021 0.139
80 0.017 0.287 28 0.114 1.154
120 0.003 0.033 27 0.465 5.042
160 0.004 0.051 27 1.559 13.160
200 0.003 0.057 27 3.483 27.213
Average 0.023 0.224 26.6
As shown in Table 1, the proposed heuristic performs extremely well in terms of both
solution quality and computation time.  The average percentage deviation from the
lower bound ranges from 0.003% to 0.090%, while the maximal percentage deviation
from the lower bound ranges from 0.033% to 0.694%.  The overall average and
maximum percentage deviation of the lower bound is 0.023% and 0.224%,
respectively.  The heuristic actually finds an optimal solution in 133 (out of 150)
problem instances.  The CPU time required by the heuristic increases as problem
size increases, however, the rate of increase seems to decrease as problem size
increases.  The average and maximal CPU time required for problem instances with
200 jobs is 3.483 and 27.213 seconds, respectively.
17
Table 3  Performance evaluation for different ratio of R=|N12|/|N21|
R=1.0 R=2.0 R=4.0
n (%)avgD avgT (%)avgD avgT (%)avgD avgT
40 0.061 0.012 0.192 0.040 0.448 0.088
80 0.018 0.497 0.047 0.520 0.114 0.838
120 0.000 0.068 0.002 0.987 0.020 3.583
160 0.009 1.334 0.028 6.006 0.059 17.677
200 0.005 1.994 0.025 16.358 0.048 45.060
Average 0.019 0.059 0.138
As the proposed heuristic is a two-phase method, it is interesting to see how much
phase 2 (TS) of the method contributes with respect to solution quality.  To evaluate
the improvement in solution quality achieved by TS, we compare the final solution
value (Z) with that obtained at the end of phase 1 (Z1).  The results are reported in
Table 4, where (%)avgI = the average percentage improvement in solution quality
achieved by TS, and impN = the number of problem instances (out of 30) for which an
improved solution is found by TS.  For each problem instance, the percentage
improvement in solution quality achieved by TS is defined by 100×(Z1-Z)/ Z1.   As
shown in Table 4, both the average percentage improvement in solution quality and
the number of problem instances for which an improved solution is found tend to
decrease as problem size increases.  Overall, the average percentage improvement in
solution quality achieved by TS is 0.554%, and the average number of problem
instances (out of 30) for which an improved solution is found is 19.2.  It can be seen
19
quality.  It finds an optimal solution to about 90 percent of the problem instances and
the average deviation from the lower bond for the other problem instances is
infinitesimal.
For future research, it is desirable to further extend the approach to solve problems
with other performance criteria, such as total completion time and total tardiness.
21
[9] Reddi S.S. and Ramamoorthy C.V. On the flowshop sequencing problems with
no wait in process. Operational Research Quarterly 1972;23:323-331.
[10] Wismer D.A. Solution of the flowshop sequencing problem with no intermediate
queues. Operations Research 1972;20:689-697.
[11] Gangadharan R. and Rajendran C. Heuristic algorithms for scheduling in the
no-wait flowshop. International Journal of Production Economics
1993;32:285-290.
[12] Rajendran C. A no-wait flowshop scheduling heuristic to minimize makespan.
Journal of the Operational Research Society 1994;45:472-478.
[13] Aldowaisan T. and Allahverdi A. New heuristics for no-wait flowshops to
minimize makespan. Computers & Operations Research 2003;30:1219-1231.
[14] Shyu S.J., Lin B.M.T. and Yin P.Y. Application of ant colony optimization for
no-wait flowshop scheduling problem to minimize the total completion time.
Computers & Industrial Engineering 2004;47:181-193.
[15] Grabowski J. and Pempera J. Some local search algorithms for no-wait
flow-shop problem with makespan criterion. Computers & Operations Research
2005;32:2197-2212.
[16] Grabowski J. and Pempera J. Sequencing of jobs in some production system.
European Journal of Operational Research 2000;125:535-550.
