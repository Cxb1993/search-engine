 I
目錄 
目錄 .............................................................................................................................................. I 
一. 中英文摘要 ...................................................................................................................II 
摘要 ......................................................................................................................................II 
Abstract ............................................................................................................................. III 
二. 報告內容 ....................................................................................................................... 1 
(一) 前言 ............................................................................................................................ 1 
(二) 研究目的 .................................................................................................................... 1 
(三) 文獻探討 .................................................................................................................... 1 
(四) 研究方法 .................................................................................................................... 2 
4.1  Background ........................................................................................................... 2 
4.2  Many-to-One Routing Algorithm.......................................................................... 5 
4.3  Upper Bound of the Strong Rabin Number......................................................... 14 
(五) 結果與討論.............................................................................................................. 15 
三. 參考文獻 ..................................................................................................................... 15 
四. 計畫成果自評 ............................................................................................................. 17 
 
 III
Abstract 
The (n, k)-star networks were proposed by Chiang and Chen in 1995. An (n, k)-star network is a generalized 
n-star network and preserves many attractive properties of it, but relieves the restriction of the number of 
nodes in an n-star network must satisfy n!. Some of the basic properties of the (n, k)-star networks such as 
diameter, connectivity, and simple shortest routing have been computed or derived by Chiang and Chen in 
1995. Those results show that (n, k)-star networks have very good topological properties. The problem of 
node-disjoint path is an important problem in an interconnection networks to study the efficiency and 
reliability of message transmission between node(s) and node(s), because the high efficiency and reliability 
transmission can be achieve by the parallel paths. Additionally, the transmission bottleneck between any node 
pair can be avoided by the parallel paths. Three kinds of well-known researches about the message 
transmission in an interconnection network; they are one-to-one, many-to-one, and many-to-many 
communications, respectively. Since the node connectivity of an (n, k)-star network is n1, by Menger's 
theorem and its variant, there are n1 node disjoint paths from any node to the other node (one-to-one), from 
n1 nodes to a distinct node (many-to-one), and from any n1 nodes to the other n1 nodes (many-to-many), 
respectively. The problem of one-to-one node-disjoint paths of an (n, k)-star network has already proposed in 
our previous project and we have approached 100% of our goal. This project is continuously to investigate 
many-to-one parallel transmission problem in an (n, k)-star network. This work develops a routing algorithm 
to construct n1 node disjoint paths from any n1 nodes (not necessarily distinct) to any other distinct node 
based on its topological structure and then compute the upper bound of the length of each constructed path. 
Then, an upper bound of the strong Rabin number of an (n, k)-star network is obtained. Future work will 
shorten the constructed paths by the modified many-to-one routing algorithm and compute the strong Rabin 
number of an (n, k)-star network. Notably, the maximum transmission delay depends on the longest path(s) of 
the constructed n1 node disjoint paths. For minimizing the transmission delay, our future work is to shorten 
the longest path(s) constructed by the proposed algorithm and minimize the gap between the upper and lower 
bounds of the length of the longest path(s) such that the strong Rabin numbers of an (n, k)-star network can be 
determined. Based on the construction of n1 node disjoint paths, the strong -Rabin numbers of an (n, 
k)-star network can be further determined by building  node disjoint paths, where 1n1, from any  
nodes (not necessarily distinct) to any other distinct node and the length of the longest path is minimized. 
Keywords: (n, k)-star networks, star networks, node-disjoint paths, Rabin number, strong -Rabin number, 
interconnection networks. 
 2
hypercube. Rabin studied the one-to-many vertex-disjoint paths problem in hypercubes and showed that given 
a source vertex and n destination vertices in an n-dimensional hypercube (Qn for short), there exist 
vertex-disjoint paths of length at most d(Qn) from the source vertex to each of the n destination vertices [22]. 
Rabin number can be adopted in many kinds of communication patterns, particularly in many-to- one. 
Let x, d1, d2, …, d be +1 distinct vertices in G. According to Merger’s theorem, at least  vertex-disjoint 
paths exist between di and x for i=1, …,κ [2]. The Rabin number, denoted by r(G), is defined as the minimum 
number l, such that  vertex-disjoint paths from di to x have length at most l for i=1, …, . 
An Sn,k refers to a generalized version of an Sn, where Sn,n1 and Sn are isomorphic [6] and Sn,1 is 
obviously a complete graph of n vertices (Kn). An Sn has a regular and hierarchical structure, and has been 
recognized as an attractive alternative to an n-cube for building massively parallel computers [1], [8]. An Sn 
has significant advantages, including low degree, small diameter, scalability and symmetry [1]. Additionally, 
many advantageous properties of an Sn, such as parallel paths [4], [10], spanning trees [23] and a high degree 
of fault tolerance [11], [12], [18], [24], have been investigated. However, an Sn has a rigorous restriction, i.e., 
the number of vertices must satisfy n!. Thus, additional (n1)(n1)! vertices are required to expand an Sn1 to 
an Sn. To eliminate this restriction, the new graph Sn,k has been presented [6]. An Sn,k retains many of the 
attractive properties of an Sn, but only additional vertices of (n1)(n1)!/(nk)! are utilized to expand an 
Sn1,k1 to an Sn,k. 
The Sn,k, where 1kn1, were devised by Chiang and Chen [6]. The structure of an Sn,k is formally 
defined in Section 2. Some basic properties of an Sn,k, such as diameter [6], connectivity [6], average distance 
[7], Hamiltonicity [15], spanning connectivity [16], broadcasting [5], embedding [3], optimal spanning tree 
[19], lower bound of freeback vertex sets [25], have recently been computed or derived. These measurement 
results demonstrate that an Sn,k has excellent topological properties. 
Since the connectivity of an Sn,k is n1 [6], this work attempts to construct n1 many-to-one 
vertex-disjoint paths, whose lengths are as short as possible, in an Sn,k. A set of many-to-one vertex- disjoint 
paths is a star-container. The length of the longest star-container among all constructed star-containers serves 
as the upper bound of the Rabin number of an Sn,k, denoted by rn1(Sn,k). Additionally, after constructing n1 
node disjoint paths from any n1 nodes (not necessarily distinct) to any other distinct node, a upper bound of 
the strong Rabin number of an Sn,k, denoted by rn1* (Sn,k), can be obtained. 
(四) 研究方法 
The remainder of this report is organized as follows. Section 4.1 formally describes the topological 
structure of an Sn,k. Section 4.2 presents a many-to-one routing algorithm for any set of n distinct vertices in 
an Sn,k for 2kn1 to construct a star-container from n1 vertices to one vertex. Section 4.3 determines the 
upper bound of rn1(Sn,k) for 1kn1. After modifying the original many-to-one routing algorithm to 
construct n1 node disjoint paths from any n1 nodes (not necessarily distinct) to any other distinct node, a 
upper bound of rn1* (Sn,k) can then be determined. Finally, conclusion and discussion are drawn in Section 
(五). 
 
4.1  Background 
An Sn,k is an undirected-regular and vertex-symmetrical graph. Parameters n and k, where 1kn1, are 
applied to determine the topological properties, such as the number of vertices in an Sn,k is n!/(nk)!, the 
connectivity of an Sn,k is n1 and the diameter of an Sn,k is 2k1 if 1kn/2 or k+(n1)/2 if n/2+1kn1 
[6]. A vertex ρ in an Sn,k can be represented as a label p1p2...pk. The vertex set V(Sn,k) is defined as {p1p2...pk | 
pipj, for ij and pi, pj in <n>}. Each element in <n> is referred to as a symbol. Symbol  <k> ( <n><k>) is 
an internal (external) symbol. Moreover, symbol pi in label p1p2...pk is as follows: (1) fixed if pi=i (notably, 
position i is the desired position for symbol i); (2) misplaced if pii and pi is an internal symbol, and (3) inner 
external if pi is an external symbol. A symbol not in the label p1p2...pk is desired if it is an internal symbol, and 
outer external if it is an external symbol. For instance, with ρ=369482 in S9,6, p4=4 is a fixed symbol. 
Additionally, p1=3, p2=6 and p6=2 are misplaced symbols; symbols 1 and 5 are desired symbols; p3=9 and 
p5=8 are inner external symbols, and symbol 7 is an outer external symbol. Vertex ρ is adjacent to ρpi and ρx 
by the following adjacent rules. 
 4
p2, …, pk}. Obviously, u and v are 1-neighbors to each other, since only the first symbols of u and v are 
different.   
Lemma 5. In an Sn,k, a simple cycle has a length at least 6 if it contains one i-edge, 2  i  k. 
Proof. Without loss of generality, let ρ=p1p2…pk, and ρpi=pip2... pi1p1pi+1...pk be two vertices joined by an 
i-edge ei in an Sn,k. Note that Φ1(ρpi)=pi. Suppose that a simple cycle contains ρ and ρpi. By the adjacent rules 
of an Sn,k, a misplaced symbol pi should be moved to position 1 and then can be moved to position i. In order 
to form a path from ρpi to ρ excluding the i-edge ei, a vertex ρ 'piρpi with Φ1(ρ 'pi)=pi should be contained in the 
path. Thus, the cycle containing ρ and ρpi should include ρ 'pi. Since Φ1(ρpi)=Φ1(ρ 'pi)=pi, d(Sn,k; ρpi, ρ 'pi)3 
according to Lemma 3. Therefore, the cycle containing the i-edge ei has a length at least 6.   
Lemma 6. 1d(Sn,k)d(Sn1,k1)2. 
Proof. Chiang and Chen showed in 1995 that d(Sn,k)=2k1 if 1≤k≤n/2 and d(Sn,k)=k+(n1)/2 if 
n/2+1≤k≤n1 [6]. Because 1≤k≤n/2 and (n1)/21≤k1≤n2 are impossible, three cases are considered as 
follows. 
Case 1. (1≤k≤n/2 and 1≤k1≤(n1)/2): d(Sn,k)d(Sn1,k1) = 2k1(2(k1)1) = 2. 
Case 2. (n/21≤k≤n1 and (n1)/21≤k1 ≤(n1)1): If n is even, d(Sn,k)d(Sn1,k1) = (kn/21)  
((k1)(n/21)) = 1. If n is odd, d(Sn,k)d(Sn1,k1) = (k(n1)/2)((k1)((n1)/21)) = 2. 
Case 3. (n/21≤k≤n1 and 1≤k1≤(n1)/2): If n is even, then n/21k and kn/2. It is a contradiction. If 
n is odd, then k=(n1)/2+1. Hence, d(Sn,k)d(Sn1,k1) = (k(n1)/2)  (2(k1)1) = (n1)/2k3 = 
(n1)/2(n1)/213 = 2. Thus, the proof is completed.   
Let m and e be the number of misplaced and inner external symbols of vertex ρ, respectively. The cycle 
representation comprises m+2e symbols in total and implies that m+2e symbols are not in their desired 
positions. Interestingly, Chiang and Chen showed in 1995 that d(Sn,k; ρ, ) is c+m+2e if p1=1 or c+m+2e2 if 
p11, where c denotes the number of cycles. Moreover, they also revealed that d(Sn,k)=2k1 if 1kn/2 or 
k+(n1)/2 if n/2+1kn1. 
The vertex =12...k is an identity vertex whose pi=i for all 1ik. Due to vertex symmetry of an Sn,k, any 
vertex can be mapped to the identity vertex  by a one-to-one mapping function by renaming the symbols. 
Therefore, without loss of generality, considering the routing problem between any two vertices in an Sn,k, one 
of them is always assumed to be the identity vertex . 
The following first describes the two simple routing rules used to construct a path from ρ to  in an Sn,k. A 
symbol sequence is then defined and adopted to construct a shortest path from ρ to . The length of the 
constructed path can be calculated based on the frequency of applied rules. 
To construct a shortest routing path  from ρ to  in an Sn,k, all misplaced, desired and inner external 
symbols of ρ should be corrected one by one to transform the label ρ into label . The following 
shortest-routing rules are applied to correct symbol s. Each rule can join 1 or 2 edges (vertices) in a path. 
R1. If symbol s is at position 1, then 
 If s is an internal symbol, then move it to its desired position. (The symbol residing at position s is 
automatically moved to position 1 when s is corrected.) 
 If s is an external symbol, then replace s with a desired symbol. (Symbol s is removed from the 
label.) 
R2. If symbol s is not at position 1, then 
 Exchange s with the symbol in position 1, then apply rule R1. 
One edge contributes to path   if R1 is applied, and two edges contribute to path  if R2 is applied. For 
example, let ρ=369482 in S9,6. If symbol 3 at position 1 is to be corrected, then apply R1 and hop to vertex 
963482. If symbol 2 at position 6 is to be corrected, then apply R2 and first hop to vertex 269483 and then 
reach to vertex 629483. Clearly, all symbols can be corrected in different orders, such that different paths from 
ρ to  can be constructed. 
Assume that vertex ρ=p1p2…pk and its cycle representation is C1C2...Cc. If cycle C1 contains symbol 1, 
 6
i-neighbor of u1, where i{2, …, t1, t+1, …, k}. Clearly, u2 has an i-neighbor u2=pip2…pi1ypi+1…pk, and 
Φ1(u1) = Φ1(u2) = pi. Therefore, u1 and u2 are distinct and the SGt(pi) is the associated-subgraph of u1 and u2.  
The main idea of the many-to-one routing algorithm can be introduced by a conceptual model. This 
model points out three problems to be resolved. 
Let D={d1, d2, …, dt1, dt+1, ..., dn} denote the set of source vertices and SGt(j), j=1, 2, …, n, be the 
decomposed subgraphs of an Sn,k. Also let u1 be the destination  and U={u1, u2, …, ut1, ut+1, ..., un} denote 
the vertex set in the SGt(t), where each vertex ui in U{u1} is a neighbor of . Each vertex in U joins to its 
t-neighbor gi in SGt(i), where i=1, 2, …, t1, t+1, …, n. The gi is the gateway of the SGt(i). Therefore, n1 
vertex-disjoint paths from gi via ui to  can be built as illustrated in Figure 3. Each path has a length at most 2. 
 
Figure 3. The n1 vertex-disjoint paths from each gi via ui to . 
The subsequence is to assign one subgraph other than SGt(t) to one source for constructing 
vertex-disjoint paths between D and . Without loss of generality, assuming SGt(i) is assigned to di. If di is in 
SGt(i) then construct a path from di via gi and ui to  directly. This path is represented by (di : gi, ui, ). If di is 
not in SGt(i) then construct a path from di to a vertex oi in SGt(i) and then from oi via gi and ui to . This path 
is represented by (di : oi : gi, ui, ). The subpath from di to oi is called front-path of di. Suppose that all 
front-paths are vertex-disjoint, the constructed n1 paths between D and  are also vertex-disjoint as 
illustrated in Figure 4. In other words, our goal is to build n1 vertex-disjoint front-paths. 
 
Figure 4. The n1 vertex-disjoint paths between D and . 
Every gateway is initially annotated as “enabled” and every subgraph SGt(i), i<n>{t}, is initially 
annotated as “unmarked”. Subgraph SGt(t) is annotated as “marked”. If ux is a source dxD, then the edge 
connecting ux and  can be a constructed path from dx to , as shown in Figure 5. In this case, 
associated-subgraph of dx, SGt(x), cannot be assigned to any source, and gateway gx is annotated as “disabled” 
 8
adjacent to a1 (or a2). If more than one source is not adjacent to a1 (or a2), the source adjacent to a2 (or 
a1) has precedence over the others. 
AR3. The SGt(z) is assigned to a source in the SGt(t) or an SGt(x). 
The assigning rules allow a neighbor of a1 (or a2) to have the first priority to adopt the unmarked SGt(z)
≠SGt(Φ1(a1)) (or SGt(z)≠SGt(Φ1(a2))). The consideration is to avoid constructing a shortest front-path which 
contains a1 or a2. 
Constructing a front-path is described in the following. Suppose that the SGt(z) is assigned to dz. If dz is 
an associated-vertex of the SGt(z), the front-path from dz to oz only has 1 edge. If dz is not an associated-vertex 
of the SGt(z), the following lemma shows that dz has a neighbor vz which is an associated-vertex of the SGt(z). 
Notably, vz can be adopted for constructing a front-path from dz via vz to the SGt(z). 
Lemma 9. If dz is not an associated-vertex of an SGt(z), then dz contains a neighbor vz which is an 
associated-vertex of the SGt(z). 
Proof. Since dz is not an associated-vertex of the SGt(z), Φ1(dz)z. By adjacent rules, dz has a neighbor vz and 
Φ1(vz)=z. Therefore, vz is an associated-vertex of the SGt(z).    
A vertex is available if it is not a source and not included in a constructed path. If dz is not an 
associated-vertex of the SGt(z), by Lemma 9, a front-path of length 2 can be constructed from dz via vz to oz 
when vz is available. Suppose that vz is not available, adopt another neighbor v of dz. Similarly, by Lemma 9, 
vertex v has a neighbor wz which is an associated-vertex of the SGt(z). A front-path of length 3 can be 
constructed from dz via v and then wz to oz when v and wz are available. A longer front-path should be 
constructed if no available vertices v and wz can be found. Indeed, no front-paths of length longer than 3 are 
built in this work, which will be shown later. Figure 6 depicts these three paths. 
 
Figure 6. The different kinds of front-paths from dz to a vertex oz. 
Let (dz : oz : gz, uz, ) represent a path from dz to  containing vertices oz, gz and uz, where symbol “:” 
(“,”) indicates a subpath (edge). The subpath from dz to oz can be constructed as the construction of a 
front-path. The subpath from oz to gz can be constructed by two shortest-routing rules R1 and R2. Obviously, 
to verify the n1 constructed paths from D to  are vertex-disjoint, only the paths constructed in each 
subgraph are needed to be verified. 
This algorithm contains two phases. Phase 1 copes with every source ui in Uu1} for building a path 
from ui to . Phase 2 proceeds with five steps for each subgraph containing some sources. Step 1 finds an 
anchor and constructs an anchor-path in each SGt(y). Step 2 constructs a front-path of length 1 from a dz in an 
SGt(t), SGt(x) or SGt(y) to oz in an unmarked SGt(z). Step 3 builds a front-path of length 2 from a dz chosen by 
AR2 in an SGt(y) to oΦ1(a) in an unmarked SGt(Φ1(a)), where a = a1 or a2. Step 4 builds a front-path of length 
2 from a dz in an SGt(t), SGt(x) or SGt(y) to oz in an unmarked SGt(z), where z  a1 and a2. Notably, no 
front-paths can be established in Step 4, if dz is adjacent to a1 or a2 and no unmarked SGt(z)s exist. Step 5 first 
constructs a front-path of length 3 from a dz is adjacent to a is in an SGt(y) to oΦ1(a) in an unmarked SGt(Φ1(a)), 
where a = a1 or a2. Second, if any vertex of the path is included in any other path constructed, then these two 
paths should be reconstructed such that they are vertex-disjoint. 
Let Di  D denote the source set in an SGt(i), i<n>. Also let Dzi  Di contain the associated- vertices of 
 10
Step 5. When Di. 
Let SGt(Φ1(a)) be an unmarked subgraph, where a=a1 or a2. Also let v in SGt(i) be not a source and 
adjacent to a dz in SGt(i). 
If at least one of v and a is not an 1-neighbor of dz, then construct a path from dz to ε as follows. 
1. Assume vΦ1(a) is an associated-vertex of SGt(Φ1(a)) and adjacent to v. 
2. Construct a front-path of length 3 from dz via v and vΦ1(a) to oΦ1(a), then augment the path from oΦ1(a) to 
gΦ1(a) by two shortest-routing rules and then from gΦ1(a) via uΦ1(a) to . The output path is (dz, v, vΦ1(a), 
oΦ1(a) : gΦ1(a), uΦ1(a), ). 
3. Mark SGt(Φ1(a)) and remove dz from Di. 
When both v and a are 1-neighbors of dz, then construct a path from dz to ε as follows. 
1. Choose a source dy is a y-neighbor of dz, where y{2, …, k}{t}, and dy has a constructed path (dy, 
oy, …, gy, uy, ) from dy to ε. 
2. Assume yΦ1(a) is an associated-vertex of SGt(Φ1(a)) and adjacent to the dy. 
3. Reconstruct a front-path of length 2 from dy via yΦ1(a) to oΦ1(a), then augment the path from oΦ1(a) to 
gΦ1(a) by two shortest-routing rules and then from gΦ1(a) via uΦ1(a) to . The output path is (dy, yΦ1(a), 
oΦ1(a) : gΦ1(a), uΦ1(a), ). 
4. If v is available, then construct a path from dz to  as follows. 
Construct a front-path of length 3 from dz via v and vy to an oy, where vy is an associated-vertex of 
SGt(y) and adjacent to the v, then augment the path from oy to gy by two shortest-routing rules and then 
from gy via uy to . The output path is (dz, v, vy, oy : gy, uy, ). 
If v is not available, then construct a path from dz to  as follows. 
(1) There exists a source dr is a 1-neighbor of dz, that dr has a constructed path (dr, v, oΦ1(v) : gΦ1(v), 
uΦ1(v), ) from dr to ε.  
(2) Reconstruct a front-path of length 2 from dr via ry to an oy, where ry is an associated-vertex of 
SGt(y) and adjacent to the dr, then augment the path from oy to gy by two shortest-routing rules and 
then from gy via uy to . The output path is (dr, ry, oy : gy, uy, ).  
(3) Construct a front-path of length 2 from dz via v to oΦ1(v), then augment the path from oΦ1(v) to gΦ1(v) 
by two shortest-routing rules and then from gΦ1(v) via uΦ1(v) to . The output path is (dz, v, oΦ1(v) : 
gΦ1(v), uΦ1(v), ). 
5. Mark SGt(Φ1(a)) and remove dz from Di. 
} 
The constructed many-to-one vertex-disjoint paths are illustrated in Figure 7. The rest of this section is to 
prove the correctness of this algorithm. 
Since an anchor-path is constructed by two shortest-routing rules in Step 1, two lemmas in the following 
are obtained. 
 
Figure 7. The constructed many-to-one vertex- disjoint paths in an Sn,k. 
Lemma 10. Let a be the vertex a1 or a2, and v1, v2 be two distinct vertices in SGt(i). Assuming v1 is not lying 
on the anchor-path. If d(SGt(i); a, v2)> d(SGt(i); v1, v2), v1 is not a source or v2 is not lying on the anchor-path. 
Proof. Suppose that v1 is a source and v2 is lying on the anchor-path. According to anchor selection rule, 
 12
Lemma 16. If SGt(Φ1(aj)) is unmarked, dz is adjacent to aj, where j=1 or 2. 
Proof. Suppose that dz is not adjacent to aj. In Step 3, SGt(Φ1(aj)) should be assigned to a source which is not 
adjacent to aj. This implies that SGt(Φ1(aj)) has marked after Step 3, and yields a contradiction as SGt(Φ1(aj)) 
is unmarked after Step 4.    
Lemma 17. If k=2, Di=. 
Proof. Because SGt(i) and Kn1 are isomorphic when k=2, all sources in Di are adjacent to each other, and the 
anchor-path is joined at most two vertices a1 and a2 in SGt(i). Suppose that SGt(Φ1(a1)) is unmarked, the 
associated- subgraph of each source is also unmarked according to anchor selection rule. A front-path of 
length 1 can thus be constructed in Step 2 for each source, and Di= after Step 2. On the other hand, 
SGt(Φ1(a1)) is marked, the following cases are proved that SGt(Φ1(a2)) also is marked. 
Case 1. (gi is the anchor). All vertices in SGt(i) except gi are not lying on the anchor-path, no SGt(Φ1(a2)) 
should be discussed.  
Case 2. (gi is not the anchor). That gi=a2, and SGt(Φ1(a2))=SGt(t) is marked in the initialization of the 
many-to-one routing algorithm. 
Since SGt(Φ1(a1)) and SGt(Φ1(a2)) have been marked in both cases, by Lemma 14, Di=.   
Lemma 18. Let source dy in SGt(i) and dydz. If dy is not adjacent to a1 and a2, then dy has a front-path of 
length 1. 
Proof. Suppose that front-path of dy has a length at least 2. i.e., the associated-subgraph of dy, denoted by 
SGt(y), is not assigned to dy. This proof shows that there exists no SGt(h)SGt(y) which can be assigned to dy:  
Case 1. (SGt(h)=SGt(Φ1(a1))). It indicates that SGt(Φ1(a1)) is unmarked in Step 1 and is marked after Step 3. 
Moreover, the associated-subgraph of dz, denoted by SGt(z), is marked in Step 1, because dz has the first 
priority to apply SGt(z) rather than other source in Step 2 if SGt(z) is unmarked. Notably, an unmarked 
SGt(Φ1(a1)) and a marked SGt(z) is contradicting to anchor selection rule. Therefore, SGt(h)SGt(Φ1(a1)). 
Case 2. (SGt(h)=SGt(Φ1(a2))). Subgraph SGt(Φ1(a1)) should still be unmarked after Step 4. Moreover, the 
associated-subgraph of dz, denoted by SGt(z), is marked in Step 1, because dz has the first priority to apply 
SGt(z) rather than other source in Step 2 if SGt(z) is unmarked. Notably, an unmarked SGt(Φ1(a1)) and a 
marked SGt(z) is contradicting to anchor selection rule. Therefore, SGt(h)SGt(Φ1(a2)). 
Case 3. (SGt(h)SGt(Φ1(a1)) and SGt(h)  SGt(Φ1(a2))). Source dz has the first priority to apply SGt(h) 
rather than dy in Step 4. This yields a contradiction as that SGt(h) is assigned to dy. 
Therefore, dy has a front-path of length 1.   
Lemma 17 indicates that only k3 should be considered in Step 5. Lemma 15 indicates |Di|=1. Hence, let 
dz be the only one source in Di, and SGt(z) be the marked associated-subgraph of dz. Also let aj denote a1 or a2 
with unmarked associated-subgraph SGt(Φ1(aj)). By Lemma 16, source dz is adjacent to aj. Notably, in SGt(i), 
all associated-vertices of SGt(Φ1(aj)) are not a vertex in a constructed front-path, and all associated- vertices 
of SGt(Φ1(aj)) are not a source, except a1 if j=1. 
Lemma 7 indicates that SGt(i) has at most n2 sources in it, dz thus has at least one neighbor in SGt(i), 
which is not a source and denoted by v. Accordingly, Step 5 is adopted for assigning a subgraph to dz by some 
refining methods as follows. (Step 5. Di and all subgraphs are marked except one of SGt(Φ1(a1)) and 
SGt(Φ1(a2)).) 
Case 1. (aj or v at least one is not an 1-neighbor of dz). Constructing a front-path is as the illustration of 
Figure 8. 
 14
of length 1. This indicates that subgraph SGt(y) would be assigned to vy rather than dy in step 2. Therefore, vy 
is not a destination and is available. 
Assuming v is also available, a front-path (dz, v, vy, oy) of length 3 can thus be constructed as the 
illustration of Figure 10. 
 
Figure 10. The front-path of source dz. 
On the other hand, assuming v is lying on a constructed front-path from a source dr via v and oΦ1(v) to 
SGt(Φ1(v)), a refinement is adopted to assign SGt(y) to dr and SGt(Φ1(v)) to dz. The refinded paths are (dz, v, 
oΦ1(v)) and (dr, ry, o"y). The illustration of the refinement is shown in Figure 11. 
 
Figure 11. The refined front-paths of source dr and the front-path of source dz. 
Since SGt(Φ1(v)) in Step 4 rather than SGt(Φ1(aj)) in Step 3 is assigned to dr, this indicates dr adjacent to 
aj. By Lemma 4, dr, aj, dz and v are 1-neighbors each other. Source dz has an y-neighbor dy, by Lemma 8, dr 
also has an y-neighbor ry, both dy and ry are the associated- vertices of SGt(y). 
Vertex ry is available, because, (1) By Lemma 5, d(SGt(i); aj, ry)=2, and by Lemma 10, d(SGt(i); aj, 
ry)>d(SGt(i); dr, ry) such that ry is not lying on the anchor-path. (2) According to Lemma 5, vertex ry is not 
adjacent to a1 and a2. Suppose that ry is a source, by Lemma 18, ry has a front-path of length 1, this implies 
that SGt(y) should be assigned to ry rather than dy in Step 2. Accordingly, the front- path of dr can be refined as 
from dr via ry to SGt(y), and the front-path of dz can be constructed from dz via v and oΦ1(v) to SGt(Φ1(v)). 
According to Lemma 12, n1 vertex-disjoint paths between D and  are constructed. 
 
4.3  Upper Bound of the Strong Rabin Number 
An upper bound of rn1(Sn,k) is computed in this section. Each path constructed by the many-to-one 
routing algorithm consists of at most three subpaths. These are the front-path, the shortest routing subpath in a 
subgraph and the subpath from a gateway to . The length of the shortest routing subpath is at most d(Sn1,k1). 
The length of the subpath from a gateway to   is at most 2. If k3 (or k=2), the front-path constructed in 
Step 5 (or Step 4) has length of at most 3 (or 2). Totally, the length of each constructed path is at most 
d(Sn1,k1)+5 (or d(Sn1, 1)+4). Therefore, rn1(Sn,k)d(Sn1,k1)+5 (or d(Sn1, 1)+4) if k3 (or k=2). 
 16
of Foundations of Computer Science, vol. 9, no. 2, pp. 235–248, 1998. 
[8] K. Day and A. Tripathi, "A comparative study of topological properties of hypercubes and star 
graphs," IEEE Transactions on Parallel and Distributed Systems, vol. 5, no. 1, pp. 31–38, 1994. 
[9] D.R. Duh and G.H. Chen, "On the Rabin number problem," Networks, vol. 30, no. 3, pp. 219–230, 
1997. 
[10] Q.P. Gu and S. Peng, "Vertex-to-set disjoint paths problem in star graphs," Information Processing 
Letters, vol. 62, no. 4, pp. 201–207, 1997. 
[11] S.Y. Hsieh, G.H. Chen, and C.W. Ho, "Longest fault-free paths in star graphs with vertex faults," 
Theoretical Computer Science, vol. 262, pp. 215–227, 2001. 
[12] S.Y. Hsieh, G.H. Chen, and C.W. Ho, "Longest fault-free paths in star graphs with edge faults," 
IEEE Transactions on Computers, vol. 50, no. 9, pp. 960–971, 2001. 
[13] D.F. Hsu, "On container width and length in graphs, groups, and networks," IEICE Transactions on 
Fundamentals of Electronics Communications and Computer Sciences, vol. E77-A, no. 4, pp. 
668–680, 1994. 
[14] D.F. Hsu and Y.D. Lyuu, "A graph-theoretical study of transmission delay and fault tolerance," 
International Journal of Mini and Microcomputers, vol. 16, no. 1, pp. 35–42, 1994. 
[15] H.C. Hsu, Y.L. Hsieh, J.M. Tan, and L.H. Hsu, "Fault hamiltonicity and fault hamiltonian 
connectivity of the (n, k)-star graphs," Networks, vol. 42, pp. 189–201, 2003. 
[16] H.C. Hsu, C.K. Lin, H.M. Hung, and L. H.Hsu, "The spanning connectivity of the (n, k)-star 
graphs," International Journal of Foundations of Computer Science, vol. 17, pp. 415–434, 2006. 
[17] M.S. Krishnamoorthy and B. Krishnamirthy, "Fault diameter of interconnection networks," 
Computers and Mathematics with Applications, vol. 13, no. 5/6, pp. 577–582, 1987. 
[18] S. Latifi, "On the fault-diameter of the star graph," Information Processing Letters, vol. 46, no. 3, pp. 
143–150, 1993. 
[19] J.I. Li, Y.H. Xiang, M.L. Chen, and Y.H. Yong, "An optimal spanning tree in (n, k)-star graph 
networks," Microelectronics and Computer, vol. 23, no. 9, pp. 168–170, 2006. 
[20] T.C. Lin, D.R. Duh, H.C. Cheng, "Wide diameters of (n, k)-star networks," Proc. Int. Conf. Comput. 
Commun. Control Technol., pp. 160-165, 2004. 
[21] T.C. Lin, D.R. Duh "Wide diameters of (n, k)-star graphs," Proceedings of the 25th Workshop on 
Combinatorial Mathematics and Computation Theory, pp. 87-100, 2008. 
[22] M.O. Rabin, "Efficient dispersal of information for security, load balancing, and fault tolerance, " 
Journal of the ACM, vol. 36, pp. 335–348, 1989. 
[23] A.A. Rescigno, "Vertex-disjoint spanning trees of the star network with applications to 
fault-tolerance and security," Information Sciences, vol. 137, pp. 259–276, 2001. 
[24] Y. Rouskov and P. K. Srimani, "Fault diameter of star graphs," Information Processing Letters, vol. 
48, no. 5, pp. 243–251, 1993. 
[25] Y.H. Xiang, D.H. Zhang, Z.H. Xiang, and Y.L. Liu, "On lower bound of freeback vertex set of (n, 
k)-star graph," Journal of Yunnan University, vol. 28, no. 5, pp. 384–387, 2006. 
 18
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■ 達成目標 
□ 未達成目標（請說明，以 100 字為限） 
□ 實驗失敗 
□ 因故實驗中斷 
□ 其他原因 
說明： 
 
 
 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：□已發表 ■未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100 字為限） 
 
 
 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500 字為限） 
互連網路之平行傳輸最重要的是平行度、傳輸時間及容錯能力，強 Rabin 數
為評量互連網路傳輸平行度、傳輸時間及容錯能力的重要指標之ㄧ。本研究
求得(n, 1)-星狀網路之強 Rabin 數為 2，(n, k)-星狀網路當 k=2 之強 Rabin 數的
上限為其直徑加 3，(n, k)-星狀網路當 k3 之強 Rabin 數的上限為其直徑加 5 
(4)，如果n/2+1kn1 及 n 是偶數(2k n/2或 n 是奇數)。 
 
 
 
 
 
 
附件二 
 20
國外的文化與風俗習慣，來提升自己的國際觀。當然事前的準備也是很重要的，如果沒有完善的規畫
可能會趁興而去敗興而歸。 
五、攜回資料名稱及內容 
WORLDCOMP `10 Conference Schedules 
Proceedings of ICWN’10 Vol. I 
Proceedings of ICWN’10Vol. II 
會議論文光碟 
小背包 
六、其他 
無。 
 2
可能會趁興而去敗興而歸。 
五、攜回資料名稱及內容 
WORLDCOMP `10 Conference Schedules 
Proceedings of ICWN’10 Vol. I 
Proceedings of ICWN’10Vol. II 
會議論文光碟 
小背包 
六、其他 
無。 
 
98年度專題研究計畫研究成果彙整表 
計畫主持人：杜迪榕 計畫編號：98-2221-E-260-015- 
計畫名稱：(n, k)-星狀網路之 w-寬強 Rabin數 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 4 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 1 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
