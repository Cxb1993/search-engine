研究計畫之背景及目的 
本計劃擬對第一年成果進行以兩年時間完成以下研究: 
第二年 
1. LOW Delay 音樂廳殘響實現方法研究。 
2. 快速LOW Delay 音樂廳殘響實現研究。 
3. 各種音樂廳實現方法計算精準度分析。 
4. 即時系統規劃。 
第三年 
1. 專利地圖研究。 
2. 各種音樂廳音場規劃 
3. 各種客觀與主觀聽覺測試實驗。 
4. 即時軟體設計。 
本計劃已完成目標並發表論文於下。 
1. W.J. Lee, C.H. Yang, C.M. Liu, and J.I. Guo, “Perceptual Convolution for Reverberation,” 
115th AES Convention New York, USA, Oct. 10-13, 2003. 
2. W.J. Lee, C.H. Yang, C.M. Liu, and J.I. Guo, “Fast Perceptual Convolution for the Room 
Reverberation,” Proc. of the 6th Int. Conference on Digital Audio Effects (DAFX-03), 
University of London, September 8-11, 2003.  
 
 The objective of the project is to introduce the theoretical formulation on the FIR-based 
reverberation. This project will consider the fast algorithm based on the FFT method through the 
overlap-and-add method and the overlap-and-save method. We will derive the formula required. 
Also, we will consider the implementation of real-time FIR-based reverberation and the IIR-based 
reverberation for comparison. Then, this project intends to propose the perceptual convolution 
method. The method has been published in AES convention papers and the patents. However, there 
are some issues not investigated yet. This project intends to consider the issues. Another 
consideration is the applications to real-rtime ineracactive applications. In the application, the 
delay or the latency need to be very short. This project extends the result and derivation for the 
low-delay perceptual convolution. The forth objective of the project is on the real-time 
demonstration system. The project intends to put into the realization through several reverberators. 
The real-time system will analyz the computing complexity, memory required, and the computing 
speeds. The fifth topic is on the objective and subjective test measurement to prove the quality of 
the reverberators. We collect the reverations and consider the test data base used to test the 
reverberators.  
1.1 Reverberation 
 Reverberation is a complicated echo system. The listener in a room hears not only the direct 
signal from the source, but also other reflected sounds from the walls, floor or some other objects 
in the room. As shown in Figure 0.1, the signal heard by the listener is a summation of all reflected 
signals. 
 Figure 0.3: Early reflections and late reverberation 
1.2 FIR-based Approach and IIR-based Approach 
 Artificial reverberation can be implemented by two approaches. The first one [4][17] is 
through the convolution of the impulse response and source signals which is referred to as the 
FIR-based approach. The second one [6][7][8][9][11] combines the various filters like all-pass 
filter, comb filters, and FIR filters to establish the reverberation effect, which is referred to as the 
IIR-based approach. The first approach usually leads to a better effect with higher computing 
complexity compared to the second approach. There are some researches [15] trying to take the 
advantages of both approaches by developing hybrid algorithms. This section will introduce those 
approaches. 
 This FIR-based approach records the environment response, such as a concert hall or a church, 
as the impulse response and then applies the direct convolution to have the reverberation effect. 
The environment response can be recorded from real environments using a loud speaker and 
microphones. Figure 0.2 is an example of environment response. The length of a natural 
environment response might be varying from 1 to several seconds depending on the size of the 
room, the material of the walls and other surfaces in the room. For 2 seconds of impulse response, 
the length will be 88,200 samples in terms of 44,100Hz sampling rate. By direct convolution, 
convolving a stereo input signal with such impulse response needs 7.8G multiplications per second. 
 Figure 0.4: Block diagram of direct convolution 
1.3.2 Block Convolution 
 Because we need to process segmented input signal, methods to recombine the processed 
segments into final signal are needed. There have been two approaches: overlap-and-save [14] 
method and overlap-and-add [16] method. 
 For overlap-and-add method, we will do the convolution on each input segment. If the input 
segment size is N and the impulse response length is L, it will produce N+L−1 samples of output 
for each segment. The later L−1 samples of each output segment will affect its following output 
segments. For example, let us consider about the signals shown in Figure 0.5. 
 
Figure 0.5: Overlap-and-add example (input signal x[n] and impulse 
response h[n]) 
 The length of the input signal x[n] is 9 and the length of the impulse response h[n] is 3. As 
shown in Figure 0.6, if we choose the input block size of 3, the input signal will be separated into 
 , (2) 
and 
 , (3) 
where M is the smallest integer larger than L divided by N, i.e.  
 , (4) 
and 
  (5) 
Substituting (2) and (3) into (1) yields  
  (6) 
Because convolution is linear time-invariant, it follows that  
 ,  (7) 
where 
   (8) 
 The overlap-and-save method is very similar to the overlap-and-add except the input blocks 
are overlapped, and the output blocks are not overlapped. By overlap-and-save method, when the 
input block size is N, for each input block, it will combined with previous L−1 samples to a new 
block with N+L−1 samples. Then we perform circular convolution or linear convolution on each 




0
][][
r
r rNnxnx




1
0
][][
M
s
s sNnhnh







N
L
M
otherwise
10
,0
],[
][



 

NnrNnx
nxr
otherwise
10
,0
],[
][



 

NnsNnh
nhs













 




1
00
][][][
M
s
s
r
r sNnhrNnxny










0
1
0
,
0
1
0
][][][][
r
M
s
sr
r
s
M
s
r sNrNnysNnhrNnxny
120for           ][][][,  Nnnhnxny srsr
 ,  (9) 
Define 
 ,  (10) 
where  
  . (11) 
(9) can be represented as  
 ,  (12) 
y'r'[n − r'N] is the summation of all blocks in time interval [r'N, (r'+2)N−1]. The form required in 
the overlap-and-save should be to separate the output into yr[n] be the non-overlapping blocks; that 
is,  
   (13) 
where 
  (14) 
Substituting (12) into (14) yields 
  (15) 
Since each yr'[n − pN − r'N] represents the values at time interval 2N, there is only two terms in the 
intervals [0, N−1]; that is  







0
1
0
, ][][
r
M
s
ssr Nrnyny
][][
1
0
, NrnyNrny
M
s
ssrr
 



120for           ][][][,   Nnnhnxny ssrssr



 
0'
][][
r
r Nrnyny




0
][][
p
p pNnyny
otherwise
10
,0
],[
][



 

NnpNny
ny p
10         ,]'['][
0'
' 


NnNrpNnyny
r
rp
indistinguishable from real reverberation. Most reverberation algorithms in perceptual approach 
are implemented by combining some small DSP blocks such as inverse comb filters, comb filters, 
all-pass filters and low-pass filters. Different combinations are attempted to simulate the 
reverberation effect of various rooms. This section will introduce these filters and their 
characteristics. The reverberation of this approach is trying to match the general characteristics of 
the impulse response for natural environments, such as exponentially decay late reverberation as 
shown in Figure 0.3. 
1.4.1 Inverse Comb Filter 
 The inverse comb filter is to produce one echo to the input signal. This can be accomplished 
by adding a feed-forward path with delay to the signal path. The block diagram of inverse comb 
filter is illustrated in Figure 0.8. The absolute value of the gain g in the feed-forward path is a 
coefficient less than 1. 
 
Figure 0.8: Block diagram of inverse comb filter 
 The difference equation of inverse comb filter is as follow: 
  (21) 
The z-transform is 
  (22) 
and the impulse response is 
][][][ mngxnxny 
mgzzH 1)(
implemented by adding a feed-backward path with delay to the signal path. The block diagram of 
comb filter is shown in Figure 0.10. The absolute value of the gain g should be less than 1 to make 
the system stable. 
 
Figure 0.10: Block diagram of comb filter 
 This filter can work alone to be a reverberator in some low requirement applications, such as 
the “echo” effect used in many applications. In other reverberation designs, they will not need to 
have the direct signal, because the comb filters may be placed in parallel. The comb filter will be 
modified to the one shown in Figure 0.11 to be more suitable for reverberation designs. The one 
shown in Figure 0.11 is similar to the one shown in Figure 0.10, however, the delay line and 
attenuation gain of this design are located at the direct path. Note that the impulse response 
produced by these two designs will be similar to each other, but one is smaller than the other by a 
factor of g, and delayed m samples. 
 
Figure 0.11: Block diagram of comb filter (delayed) 
The difference equation of the comb filter is shown as follows: 
  (26) 
The z-transform of the comb filter is 
][][][ mngymngxny 
 When the echo density of comb filter is not enough, it causes fluttering sound on transient 
inputs. Reducing the delay length m can increase the echo density. However, from Figure 0.12, 
there are m/2 frequency peaks between 0 to π. Reducing the delay length will also decrease the 
number of the peaks in frequency domain. This will make a sound that resonates at specific 
frequencies. 
1.4.3 All-Pass Filter 
 To avoid resonation of comb filter, Schroeder [6] suggested to use the all-pass filter which 
adds a feed-forward path to the comb filter. The block diagrams of two all-pass filters are shown in 
Figure 0.13 and Figure 0.14. Although, some will use the one shown in Figure 0.14 instead of the 
one shown in Figure 0.13, the properties of both designs are equivalent. 
 
Figure 0.13: Block diagram of all-pass filter 
 
Figure 0.14: Block diagram of all-pass filter (different version) 
The difference equation of all-pass filter is given by 
  (32) ][][][][ mngymnxngxny 
similar to each other. Except the first pulse, the impulse response of all-pass filter is smaller than 
that of the comb filter by a factor of (1−g2). Because of this property, outputs of both filters sound 
similar. The resonation effect like comb filter does can still be heard. This is because the flat 
frequency response can be true only when the analysis window size is big enough. However, the 
perceptive window size is limited in short period. 
 The complexity of IIR filters can be calculated by summing up the complexity of its blocks. 
The number of multiplications needed per sample for comb filters and all-pass filters is 1 and 2, 
respectively. 
1.4.4 Reverberation Filters 
 Using comb filter or all-pass filter alone may not be able to increase the density of echoes and 
the density frequency peaks together. However, it can be accomplished by combining those blocks 
together. To increase the density of echoes, Schroeder cascaded all-pass filters as shown in Figure 
0.16. The frequency response of this reverberator is also all-pass, since the all-pass filter is a linear 
time-invariant system. 
. 
Figure 0.16: Schroeder’s series all-pass reverberator. 
 By this combination, the echoes generated by the first all-pass filter will be used to generate 
more echoes in next all-pass filter. But the reverberation generated by this reverberator will sound 
unnatural, especially when the input is transient. 
 Instead of using all-pass filters, Schroeder suggested combining comb filters in parallel and 
cascade all-pass filters to give the reverberator shown in Figure 0.17. 
Comparing to the impulse response of a natural environment shown in Figure 2.5, the energy of 
higher frequency part will decay faster than that of the lower frequency part. It is because the 
energy of higher frequencies in natural environment will be absorbed by air, walls or other objects 
in the room. To solve this problem, Moorer [8] proposed a reverberator shown in Figure 0.18. The 
reverberator looks similar to Schroeder’s. It is combined with 6 parallel comb filters and cascaded 
with one all-pass filter. The major difference is that Moorer inserted a first order IIR low-pass filter 
in the feedback path of each comb filter to simulate the environment absorption. The absorbent 
comb filter is shown in Figure 0.19. This makes the reverberation time a function of frequency 
(shorter reverberation time for higher frequencies). 
 
Figure 0.18: Moorer’s reverberator 
other delay units. This property helps to generate higher echo density, and removes resonation of 
the original parallel comb filters. As in Moorer’s reverberator, low-pass filters can be inserted to 
obtain frequency dependent reverberation time. The number of multiplications per sample for 
n-level general delay network is 3n+n
2
+2. For 5-level general delay network, it needs 42 
multiplications per sample. 
1.5 Hybrid Reverberators 
 Besides the reverberators in those two approaches introduced in previous sections, Browne 
[15] raised a hybrid algorithm that combined a truncated impulse response convolution and a 
IIR-based reverberator to tradeoff the two approaches. The block diagram of this algorithm is 
shown in Figure 0.21. The convolution phase uses only the earlier reflection part of the impulse 
response which is about 50ms to 150ms. This can significantly reduce the convolution filter length. 
The block convolution phase is implemented with 8192-point FFT without partitioning the 
impulse response. The recursive filter is implemented by using Moorer’s design to provide 
frequency dependent reverberation time. 
 
Figure 0.21: Hybrid reverberator proposed by Browne[15] 
Step 3: Multiply M pairs of FFT data according to (42). The number of multiplications and 
additions for each input sample are 2M and 0, respectively. Because the input signal and 
the impulse response are both real signals, the negative frequency part data will be the 
complex conjugate of the positive frequency part. By this property, we can calculate only 
N+1 multiplications for each block. This will reduce the number of multiplications for each 
input sample to M+M/N. 
Step 4: Perform M times the inverse FFT to have the segmented data yr,s[n] for different s. 
Step 5: Overlap and add all the segmented yr,s[n] to have the final y[n] according to (7). The 
number of additions is 2(M−1) for each input sample.  
 The number of complex multiplications needed per input sample is 
(1+M)FFT(2N)/N+M+M/N = (1+M)(log2N+1)/2−1/N+M. The algorithm has reduced the 
complexity of multiplications from L to 2(1+M)(log2N+1)−4/N+4M. The block diagram for this 
algorithm is shown in Figure 2.1. 
 
Figure 2.1: Block diagram of FFT convolution (Algorithm 1) 
 To reduce the complexity of Algorithm 1, we can change the order of calculations in 
Step 5: Overlap and add all the segmented yp[n] to have the final y[n] according to (45). The 
overlapping factor is 1 and hence has the complexity one.  
 The block diagram of the fast convolution is illustrated in Figure 2.2. The complexity of 
multiplications in Algorithm 2 is 2FFT(2N)/N+M+M/N, which has a factor up to M times reduction 
than Algorithm 1. 
 
Figure 2.2: Block diagram of FFT convolution (Algorithm 2) 
2FFT(2N)/N+M+M/N. We know that for N-point real FFT, the number of complex multiplications 
needed is (N/4)(log2N + 3) −1. let M be approximated as L/N. The complexity equation is  
  (48) 
Differentiating C(N) with respect to N leads to   
  (49) 
The optimum block length Nopt can be obtaining through C'(N) = 0; that is  
  (50) 
Hence 
  (51) 
In other words, the block length with best computation efficiency can be obtained if the filter 
length or the reverberation length is known. For example, when L = 88200, Nopt ≈ 61140. Since N 
should be limited to be the power of two and the most often reverberation length is in the range 
2-3 seconds. Another important issue is the length of the filter is directly proportional the block 
length. Furthermore, from Figure 2.3, the reduction complexity difference for N above 4000 is less 
than 10%. The block length considering all the above tradeoff is 4096. 
2.3 Latency 
Since the FFT needs to collect a segment to process for an output segment, the FFT-based 
convolution system have a latency with the same length of the FFT. In some applications like 
karaoke, the latency of reverberation may not be allowed. To solve this problem, FFT-based 
21
2 )2(4log)C(
  LNNLNN
32 2)2(
2ln
1
)(C   LNNL
N
N
02)2(
2ln
2
 LNL
N
opt
opt
2
2ln
2ln
8
)2(2 2 






L
LLNopt
 Know that a direct convolution of N-point impulse response needs N multiplications for each 
output sample. Thus after this modification, the computational power requirement increases. For 
example, using Algorithm 2 with 4,096 block size for 88,200 samples of impulse response, it 
originally needs about 100 multiplications to compute an output sample. After this modification, it 
may need more than 8,000 multiplications to calculate an output sample. 
2.4 Perceptual Convolution 
The threshold in quiet is the threshold to characterize the minimum amount of energy needed 
in pure tone detected by human hearing system in a noiseless environment. Figure 2.4 shows the 
threshold by Painter and Spanias [3]. 
 
Figure 2.4: The threshold in quiet (by Painter and Spanias [3]) 
 If we do the frequency analysis on an impulse response of a natural environment as shown in 
Figure 2.5, we can see that the higher frequency part will decay faster than lower frequency part. 
After partitioning the impulse response, the magnitude of higher frequency part of later blocks will 
be very small. In FFT convolution, the multiplications for those frequencies that its magnitude is 
Figure 2.6 shows the same impulse response as that in Figure 2.5 after removing ignored 
frequencies. 
Table 2.1: Cutoff frequency point of each block of each impulse response 
when the block size is set to 4,096 
Impulse 
Response 
St John 
Lutheran 40 
Foellinger 
Great Hall 80 
Bethel 
Church 50 
Meyerson 
Concert Hall 
Block count 17 17 17 15 
B
lo
ck
 I
n
d
ex
 
1 3052 3000 2992 2996 
2 2956 2964 2976 2892 
3 2896 2904 2900 2784 
4 2812 2812 2828 2632 
5 2716 2708 2680 1708 
6 2512 2544 1692 1548 
7 1652 1644 1476 1312 
8 1468 1544 1332 1244 
9 1264 1336 1244 1104 
10 1156 1220 1140 1088 
11 1088 1136 1024 996 
12 976 1104 992 920 
13 928 1048 956 876 
14 788 948 856 760 
15 568 860 800 0 
16 0 544 732   
17 0 0 544   
Eliminated 
Percentage 
61.47% 59.33% 60.99% 62.79% 
 
2.6 Real-Time Reverberators Analysis and Implementation 
 Assuming that we can remove 60% of multiplications in frequency domain, we can calculate 
the number of multiplications needed for fast perceptual convolution by modifying the complexity 
from Algorithm 2 as illustrated in Figure 2.7. From the result, the fast perceptual convolution 
requires about 98 real multiplications per sample to convolve with 88,200 samples of impulse 
response. 
 To evaluate the improvement in real-time systems, we built an experiment application to help 
us finishing the test. The application will use two methods, the fast perceptual convolution method 
and Algorithm 2, to process some samples for comparison. The input block size is set to 4,096. 
And the test is to process single channel, 4,09620,000 = 81,920,000 samples of input, which is 
about 30 minutes of samples with 44,100Hz sampling rate. The test is run on a PC with 1GHz 
Pentium!!!. The result is listed in Table 2.2.  
 
Figure 2.7: Comparison of fast perceptual convolution and Algorithm 2 
when the length impulse response is 2 seconds (88,200 samples) 
 
convolution methods. Because the perceptual quality of fast perceptual convolution will not 
always worse than generic convolution methods, the ODG will vary from −4 to 4. 
2.9 Comparison with Generic Convolution Methods 
 To measure the reverberation quality of fast perceptual convolution, we use ODG to compare 
the reverberation generated by generic convolution methods and fast perceptual convolution. The 
result of is listed in Table 2.3. 
Table 2.3: ODG results of the fast perceptual convolution compared to 
generic convolution methods 
  
St John Lutheran 
40 
Foellinger Great 
Hall 80 
Bethel Church 50 
Meyerson Concert 
Hall 
  ODG ODG ODG ODG 
'69.wav 0 0 -0.01 0.01 
1k+5k.wav 0.03 0.02 0.03 0.04 
60.wav 0.03 0.04 0.05 0.03 
9_1.wav -0.02 -0.03 -0.03 -0.02 
9_2.wav -0.02 -0.03 -0.03 -0.02 
9_3.wav -0.02 -0.03 -0.03 -0.02 
applaud.wav 0 -0.01 -0.01 -0.01 
A_DAY_FOR_YOU.wav 0 -0.01 -0.01 0 
BlackBird.wav 0 0 0 0 
butter1.wav 0.03 0.03 0.03 0.03 
castanets.wav -0.02 -0.02 -0.02 -0.01 
cello1.wav -0.01 -0.01 -0.01 -0.01 
coco.wav -0.01 -0.01 -0.01 0 
dance1.wav 0.02 0.02 0.02 0.02 
else3.wav -0.01 -0.01 -0.01 -0.01 
fatboy.wav 0.01 0.01 0.01 0.01 
flute.wav -0.01 -0.01 -0.01 -0.01 
Fools.wav 0 0 0 0 
ftb_samp.wav 0 -0.01 -0.01 0 
goldc.wav 0 -0.01 -0.02 0 
gong.wav -0.01 -0.01 -0.01 -0.01 
wvoice.wav 0.03 0.03 0.03 0.03 
youcantdothat.wav 0 -0.01 -0.01 0 
MEAN ABSOLUTE ODG 0.01217 0.01483 0.017 0.01383 
STANDARD DEVIATION 0.0119071 0.0109583 0.011424 0.0112997 
  
 
Figure 2.8: Distribution of ODGs for fast perceptual convolution with 
different impulse responses 
As shown in Table 2.3 and Figure 2.8, the mean absolute ODG for each impulse response are 
smaller than 0.015 and the maximum ODG are all 0.04. These results show that the differences 
between the outputs of the proposed method and the original method are not perceptually 
noticeable. The result shows that the fast perceptual convolution has a speedup 30% over the 
FFT-based convolution without scarifying the reverberation quality. 
2.10 Measurement of Different Levels of Thresholds 
 To reduce more the multiplications, we can use higher level of perceptual threshold curve. In 
the following, we will measure the ODG results for the fast perceptual convolution with different 
levels of perceptual threshold. In this test, we use the impulse response of St. John Lutheran 
Church. The result is listed in Table 2.4. 
Table 2.4: ODG results of the fast perceptual convolution using different 
levels of perceptual threshold 
0
0.005
0.01
0.015
0.02
0.025
0.03
0.035
0.04
0.045
St John Lutheran 40 Foellinger Great Hall 80 Bethel Church 50 Meyerson Concert Hall
impulse response
O
D
G
Minimum
Maximum
Average
memory.wav 0.03 0.03 0.03 0.03 0.03 0.03 0.03 0.03 0.04 0.04 0.04 
mist.wav 0.03 0.03 0.03 0.03 0.03 0.03 0.06 0.06 0.06 0.06 0.05 
Moonly.wav -0.03 -0.02 -0.02 -0.02 0 -0.04 -0.01 0.01 0.03 -0.12 -0.17 
mstest.wav -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 
mvoice.wav 0.04 0.04 0.04 0.04 0.07 0.07 0.07 0.05 0.05 0.03 -0.04 
pipes.wav -0.01 0 0 0 0 -0.01 0 -0.01 0 0.01 0.05 
point1.wav -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 0.02 0.03 0.03 0.07 0.06 
spahm.wav 0.02 0.03 0.02 0.02 0.02 0.02 0.02 0.02 0.03 -0.03 -0.06 
st_jacob.wav 0 0.01 0.01 0.01 0.01 0 0.01 0.01 0.01 0.02 0.06 
summer.wav -0.01 0 0 0 0.01 0 0.01 0.02 -0.13 0 0.04 
t1.wav 0 0 0 0 -0.02 -0.04 -0.05 -0.51 -0.56 -0.35 -0.42 
testsignal2.wav 0.03 0.03 0.03 0.03 0.03 0.03 0.04 0.03 0.04 -0.09 -0.18 
testsignal4.wav -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 0.04 0.04 
The_red_Sorghum.wav 0 0 0 0 0 0 0.01 0.01 0.05 0.06 0.07 
This_Land_short.wav 0 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.05 
This_Land_.wav 0 0.01 0.01 0.01 0.01 0.01 0.01 0.01 0.02 0.02 0.07 
tpd.wav -0.01 0 0 0 0 0 0 0 0 0.01 0.06 
Track07.wav -0.02 -0.02 -0.02 -0.02 -0.01 -0.02 -0.01 -0.19 -0.13 -0.12 -0.13 
track7.wav -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 0 -0.07 0.01 
tsai.wav -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 0 0.02 0.01 0 0.03 
vbrtest.wav -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 -0.01 0 -0.09 -0.08 
velvet.wav 0.01 0.03 0.03 0.03 0.03 0.03 0 -0.04 -0.08 -0.2 -0.3 
WINTER.wav -0.01 0 0 0 0 0 -0.02 0.02 0.03 0.02 0.02 
wvoice.wav 0.03 0.04 0.04 0.04 0.07 0.07 0.06 0.08 0.07 0.05 0 
youcantdothat.wav 0 0 0 0 0 0 0.01 0.06 0.04 0.08 0.07 
MEAN ABSOLUTE 
ODG 
0.0122 0.0132 0.0143 0.0223 0.0275 0.034 0.0342 0.0642 0.0732 0.0952 0.1197 
STANDARD 
DEVIATION 
0.011 0.01214 0.0191 0.0587 0.0493 0.0621 0.059 0.1263 0.1378 0.1883 0.2309 
 
3 預期完成之工作項目及成果 
 3.3 具體結果： 
(1) 由於音樂廳對未來音效產業界有相當影響，因此，本計畫對累積此方面技術有其未
來市場潛力及前瞻性。 
(2)  本計畫有許多子題都有近年來學術研究焦點，相信學術上是值得研究的。 
(3)  參與本計畫對人員，可獲得音訊處理經驗，對人才培育及技術累積有許多助益。 
[10] W. G. Gardner, “The virtual acoustic room”, MS proposal, MIT Media Lab, 1992. 
http://alindsay.www.media.mit.edu/projects.html.  
[11] J. Dattorro, “Effect Design Part 1: Reverberator and Other Filters”, J. Audio Eng. Soc., vol. 45, 
pp. 660-684, September 1997.  
[12] H. V. Sorensen, D. L. Jones, M. T. Heideman, and C. S. Burrus, “Real-Valued Fast Fourier 
Transform Algorithms”, IEEE Trans. Acoust., Speech, Signal Process., vol. ASSP-35, June 
1987. 
[13] W. C. Sabine, “Reverberation”, in Lindsay, R.B., editor, Acoustic: Historical and 
Philosophical Development, Stroudsburg, PA: Dowden Hutchinson, and Ross, 1972. 
Originally published in 1990. 
[14] T. G. Stockham, Jr., “High-Speed Convolution and Correlation”, in Spring Joint Computer 
Conf., AFIPS Conf. Proc., vol. 28, pp. 229-233, 1966; reprinted in Digital Signal Processing, 
Selected Reprints, L. R. Rabiner and C. M. Rader, Eds. (IEEE Press, New York, 1972). 
[15] Sean Browne, “Hybrid Reverberation Algorithm Using Truncated Impulse Response 
Convolution and Recursive Filtering”, MS proposal, Music Engineering Technology, 
University of Miami, June 2001. 
[16] A. V. Oppenheim and R. W. Schafer, “Digital Signal Processing”, Prentice-Hall, Englewood 
Cliffs, NJ, 1975 
[17] K. Iida, K. Mizushima, Y. Takagi, and T. Suguta, “A New Method of Generating Artificial 
Reverberant Sound”, 99th AES Convention 1995 October 6-9, 1995. 
[18] Anders Torger and Angelo Farina, “Real-Time Partitioned Convolution for Ambiophonics 
Surround Sound”, IEEE Workshop on Applications of Signal Processing to Audio an 
