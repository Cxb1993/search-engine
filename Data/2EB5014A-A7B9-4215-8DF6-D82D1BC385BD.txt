1 
行政院國家科學委員會專題研究計畫成果報告 
粒子群最佳化於多目標排程問題之應用 
A Particle Swarm Optimization for Multi-Objective 
Scheduling Problems 
計 畫 編 號：NSC 96-2221-E-216-052MY3 
執 行 期 限：96 年 8 月 1 日至 99 年 7 月 31 日 
主 持 人：沙永傑   中華大學工業工程與管理學系 
 
一、中文摘要 
粒 子 群 最 佳 化 (Particle Swarm 
Optimization, PSO)是一種以群體搜尋為基礎
的最佳化演算法，其群體是由各自獨立的粒子
所組成。PSO 模擬空間中的粒子運動，以搜
尋空間(search space)表達出問題的解集合空
間(solution space)。每個搜尋空間中的位置
(position)對應到一個該問題解集合空間中的
解。粒子群於搜尋空間中(解集合空間中)合作
搜尋出最佳位置(最佳解)。PSO 最初應用於求
解連續性最佳化問題。然而近年來也被應用於
求解組合最佳化問題。 
多數與排程問題有關的研究都只探討如
何使單一目標最佳化，如：總完工時間、總延
遲成本、延遲工件數…等。在現實情況下，決
策者必需作出能夠將這些目標最佳化的決
策，卻又面臨這些目標之間互相衝突的問題。
若只追求單一目標的最佳化排程，則會造成另
一目標的損失。本研究的主要目的在架構出能
求解多目標排程問題之 PSO，幫助決策者在
面對如此複雜排程問題時能夠做出合理決策。 
本研究以三年時間分階段進行。第一年以
流程型排程問題(flow shop scheduling problem)
為研究對象；第二年以零工式排程問 
題(job shop scheduling problem)為研究對象；
第 三 年 以 開 放 型 排 程 問 題 (open shop 
scheduling problem)為研究對象。在這三種最
基本的排程問題中，  我們以完工時間
(makespan)、總流程時間(total flow time)、總
延遲時間(total tardiness)作為目標函數。本研
究所提出的 PSO，應用於標竿測試問題與過
去的啟發式演算法，在求解的速度與品質上有
較佳的表現。 
關鍵詞：：粒子群最佳化、流程型排程、零工
型排程、開放型排程、多目標排程 
Abstract 
Particle Swarm Optimization (PSO) is a 
population-based optimization algorithm. Each 
particle is an individual and the swarm is 
composed of particles. PSO mimics the particle 
movement in a space. In PSO, the problem 
solution space is formulated as a search space. 
Each position in the search space is a 
correlated solution of the problem. Particles 
cooperate to find out the best position (best 
solution) in the search space (solution space). 
The original intention of PSO is to solve 
continuous optimization problems. However, it 
has been implemented to solve many 
combinatorial optimization problems in recent 
years. 
In most previous research about scheduling, 
3 
(inertia)、個體最佳位置(pbest position)、群體
最佳位置(gbest position)。慣性(inertia)為粒子
於上一循環 (iteration) 所殘留下來的速度
(velocity)，它能夠由慣性權重(inertia weight)
控制。慣性(inertia)的用意在於防止粒子停留
在同一範圍內，而能跳出區域最佳解(local 
optima)。個體最佳位置(pbest solution)為粒子
本身到目前為止所搜尋出的最佳位置(或最佳
解)，因此每個粒子有它自已的個體最佳位置
(pbest position)。群體最佳位置(gbest position)
則是到目前為止群體(swarm)所搜尋出的最佳
位置(最佳解)，而整個群體(swarm)只會有一個
群體最佳位置(gbest position)。 
在 PSO 中粒子速度(velocity)由一向量表
示，而在每個循環(iteration)中粒子根據它所擁
有的速度移動它的位置。在每個循環(iteration)
裡，粒子朝著個體最佳位置(pbest position)以
及群體最佳位置(gbest position)移動，而其速
度也是根據個體最佳位置(pbest position)及群
體最佳位置(gbest position)隨機求得。 
四、研究成果 
本研究已完成求解流程型排程問題
(Flow-shop Scheduling Problem)之 PSO，為了
證明所發展的 PSO 的適用性、求解品質與效
率 ，  我 們 將 本 研 究 的 PSO 與
TSP-GA(Ponnambalam, 2004)同時測試 21 個
問題進行比較。目標式有三個，分別為最小完
工時間(Makespan)、平均流程時間(Mean Flow 
Time)與機器閒置時間(Machine Idle Time)。運
算的結果顯示，以平均相對誤差而言，針對最
小完工時間，PSO 有 17 個問題表現優於
TSP-GA；平均流程時間，PSO 有 18 個問題
表現優於 TSP-GA；機器閒置時間，PSO 有
19 個問題表現優於 TSP-GA。綜合而言，PSO 
在 21 個案例中的 19 個，同時達到三個目標
且優於 TSP-GA 。此結果已發表於 The 38th 
International Conference on Computers and 
Industrial Engineering (2008). 
另一方面，亦將 PSO 與傳統的啟發式演
算法 CDS 與 NEH 進行比較。同樣以最小完
工時間(Makespan)、平均流程時間(Mean Flow 
Time)與機器閒置時間(Machine Idle Time)作
為目標式。此次共測試 161 個標竿問題，包
含 Rec01 至 Rec41，Tai20×5 至 Tai500×20。
求解的結果顯示 PSO 比傳統的啟發式演算法
CDS 與 NEH 具備明顯的優勢。結果發表於
The 9th Asia Pacific Industrial Engineering & 
Management Systems Conference (2008). 
PSO 應用於求解多目標流程型排程問題
的結果 已發表 於 International Journal of 
Advanced Manufacturing Technology Vol. 45, 
No. 7, pp. 749-762. Vol. 37, No. 2, pp. 
1065-1070, 2009 (SCI)(如附錄一). 
本研究已完成求解零工式排程問題
(Job-shop Scheduling Problem)之 PSO，同樣
的，我們選擇三個目標式，最小完工時間
(Makespan)、總延遲時間(Total Tardiness)與機
器閒置時間(Machine Idle Time)。比較的對象
則是 MOGA (Ponnambalam, 2001)，在 23 個
標竿問題中，PSO 在最小完工時間與總延遲
時間，完全領先 MOGA；至於機器閒置時間
則於 22 個問題中具競爭力。 
PSO 應用於求解多目標零工型排程問題
的 結 果 已 發 表 於 Expert Systems with 
Applications, Vol. 37, No. 2, pp. 1065-1070, 
2010 (SCI) (如附錄二). 
對於開放式排程問題，本研究亦完成 PSO
設計，我們以最小完工時間(Makespan)、總流
程時間 (Total Flow Time)與機器閒置時間
(Machine Idle Time) 作為目標式。由於開放式
排程問體文獻相對較少，本研究另外設計並撰
寫基因演算法作為比較，並以 Guéret and Prins 
(1999)標竿問題進行測試，求解結果顯示本驗
就提出的 PSO 整體績效大於 GA。此結果已投
稿於 Journal of Industrial and Management 
Optimization. 
 
ORIGINAL ARTICLE
A particle swarm optimization for multi-objective
flowshop scheduling
D. Y. Sha & Hsing-Hung Lin
Received: 5 September 2008 /Accepted: 6 February 2009
# Springer-Verlag London Limited 2009
Abstract The academic approach of single-objective flow-
shop scheduling has been extended to multiple objectives to
meet the requirements of realistic manufacturing systems.
Many algorithms have been developed to search for optimal
or near-optimal solutions due to the computational cost of
determining exact solutions. This paper provides a particle
swarm optimization-based multi-objective algorithm for
flowshop scheduling. The proposed evolutionary algorithm
searches the Pareto optimal solution for objectives by
considering the makespan, mean flow time, and machine
idle time. The algorithm was tested on benchmark problems
to evaluate its performance. The results show that the
modified particle swarm optimization algorithm performed
better in terms of searching quality and efficiency than
other traditional heuristics.
Keywords PSO .Multi-objective . Flowshop scheduling .
Pareto optimal
1 Introduction
Production scheduling in real environments has become a
significant challenge in enterprises maintaining their com-
petitive positions in rapidly changing markets. Flowshop
scheduling problems have attracted much attention in
academic circles in the last five decades since Johnson’s
initial research. Most of these studies have focused on
finding the exact optimal solution. A brief overview of the
evolution of flowshop scheduling problems and possible
approaches to their solution over the last 50 years has been
provided by Gupta and Stafford [5]. That survey indicated
that most research on flowshop scheduling has focused on
single-objective problems, such as minimizing completion
time, total flow time, or total tardiness. Numerous heuristic
techniques have been developed for obtaining the approx-
imate optimal solution to NP-hard scheduling problems. A
complete survey of flowshop scheduling problems with
makespan criterion and contributions, including exact
methods, constructive heuristics, improved heuristics, and
evolutionary approaches from 1954 to 2004, was offered by
Hejazi et al. [7]. Ruiz et al. [24] also presented a review and
comparative evaluation of heuristics and meta-heuristics for
permutation flowshop problems with the makespan criteri-
on. The NEH algorithm [17] has been shown to be the best
constructive heuristic for Taillard’s benchmarks [28] while
the iterated local search [27] method and the genetic
algorithm (GA) [23] are better than other meta-heuristic
algorithms.
Most studies of flowshop scheduling have focused on a
single objective that could be optimized independently.
However, empirical scheduling decisions might not only
involve the consideration of more than one objective, but
also require minimizing the conflict between two or more
objectives. In addition, finding the exact solution to
scheduling problems is computationally expensive because
such problems are NP-hard. Solving a scheduling problem
with multiple objectives is even more complicated than
solving a single-objective problem. Approaches including
meta-heuristics and memetics have been developed to
reduce the complexity and improve the efficiency of
solutions.
Int J Adv Manuf Technol
DOI 10.1007/s00170-009-1970-6
The English in this document has been checked by at least two
professional editors, both native speakers of English. For a certificate,
see: http://www.textcheck.com/cgi-bin/certificate.cgi?id=emRe2r
D. Y. Sha
Department of Industrial Engineering and System Management,
Chung Hua University,
Hsinchu, Taiwan, Republic of China
H.-H. Lin (*)
Department of Industrial Engineering and Management,
National Chiao Tung University,
Hsinchu, Taiwan, Republic of China
e-mail: hsinhung@gmail.com
& Machine idle time, and
& fMIT ¼ fC p1; j 1ð Þ þ
Pn
i¼2
max C pi; j 1ð Þ  C pi1;ðff
jÞ; 0ggjj ¼ 2:::mg
3 Basic PSO concept
PSO is an evolutionary technique (Kennedy et al. [10]) for
solving unconstrained continuous optimization problems.
The PSO concept is based on observations of the social
behavior of animals. The population consisting of individ-
uals (particles) is assigned a randomized initial velocity
according each individual’s own movement experience and
that of the rest of the population. The relationship between
the swarm and the particles in PSO is similar to the
relationship between the population and the chromosomes
in the GA.
The PSO problem solution space is formulated as a
search space. Each position of the particles in the search
space is a correlated solution of the problem. Particles
cooperate to determine the best position (solution) in the
search space (solution space).
Suppose that the search space is D-dimensional and there
are m particles in the swarm. Each particle is located at
position Xi={xi1, xi2, …, xiD} with velocity Vi={vi1, vi2, …,
viD}, where i=1, 2,…, m. In the PSO algorithm, each particle
moves toward its own best position (pbest) denoted as
Pbesti={pbesti1, pbesti2,…, pbestin}. The best position of the
whole swarm (gbest) denoted as Gbest={gbest1, gbest2, …,
gbestn} with each iteration. Each particle changes its position
according to its velocity, which is randomly generated toward
the pbest and gbest positions. For each particle r and
dimension s, the new velocity vrs and position xrs of particles
can be calculated by the following equations:
vtrs ¼ w vt1rs þ c1  rand1  pbestt1rs  xt1rs
 þ c2
 rand2  gbestt1s  xt1rs
  ð1Þ
xtrs ¼ xt1rs þ vt1rs ð2Þ
where t is the iteration number. The inertial weight w is
used to control exploration and exploitation. A large value
of w keeps particles at high velocity and prevents them
from becoming trapped in local optima. A small value of
w maintains particles at low velocity and encourages them
to exploit the same search area. The constants c1 and c2 are
acceleration coefficients that determine whether particles
prefer to move closer to the pbest or gbest positions. The
rand1 and rand2 are independent random numbers uni-
formly distributed between 0 and 1. The termination
criterion of the PSO algorithm includes the maximum
number of generations, the designated value of pbest, and
no further improvement in pbest. The standard PSO process
outline is as follows.
Step 1: initialize a population of particles with random
positions and velocities on D dimensions in the
search space.
Step 2: update the velocity of each particle according to
Eq. (1).
Step 3: update the position of each particle according to
Eq. (2).
Step 4: map the position of each particle into the solution
space and evaluate its fitness value according to
the desired optimization fitness function. Simulta-
neously update the pbest and gbest positions if
necessary.
Step 5: loop to Step 2 until an exit criterion is met, usually
a sufficient goodness of fitness or a maximum
number of iterations.
The original PSO was designed for a continuous solution
space. We modified the PSO position representation,
particle velocity, and particle movement as described in
the next section to make PSO suitable for combinational
optimization problems.
4 Formation of the proposed PSO
There are two different representations of particle position
associated with a schedule. Zhang [31] demonstrated that
permutation-based position representation outperforms
priority-based representation. While we have chosen to
implement permutation-based position representation, we
must also adjust the particle velocity and particle movement
as described in Sections 4.2 and 4.3. We have also included
the maintenance of Pareto optima and local search
procedures to achieve better performance.
4.1 Position representation
In this study, we randomly generated a group of particles
(solutions) represented by a permutation sequence that is an
ordered list of operations. The following example is a
permutation sequence for a six-job permutation flowshop
scheduling problem, where jn is the operation of job n.
Index : 1 2 3 4 5 6
Permutation : j4 j3 j1 j6 j2 j5
An operation earlier in the list has a higher priority of
being placed into the schedule. We used a list with a length
Int J Adv Manuf Technol
– For j4, since vk4 ¼ 1, then xk4  xk4 þ vk4, i.e., xk4 ¼ 1:6.
– For j5, since vk5 ¼ 0, the generated random number
rand1=0.85. Since c1 < rand1  c1 þ c2, the generat-
ed random number rand2=0.7. Since gbest5  xk5,
set vk5  1. Then xk5  gbest5 þ rand2  0:5, i.e.,
xk5 ¼ 1:2.
– For j6, since vk6 ¼ 0, the generated random number
rand1=0.95. Since rand1 > c1 þ c2, xk6 and vk6 do not
need to be changed.
Therefore, after particle k moves, the Vk and Xk are
Vk ¼ ½1 1 0 1 1 0
X k ¼ ½1:6 0:8 1:8 1:7 1:2 3:9
In addition, we use a mutation operator in our PSO
algorithm. After moving a particle to a new position, we
randomly choose an operation and then mutate its priority
value xki in accordance with v
k
i . If x
k
i  ðn=2Þ, we randomly
set xki to a value between (n/2) and n, and set v
k
i  1. If
xki > ðn=2Þ, we randomly set xki to a value between 0 and
(n/2), and set vki  1.
4.4 Pareto optimal set maintenance
Real empirical scheduling decisions often involve not only
the consideration of more than one objective at a time, but
also must prevent the conflict of two or more objectives.
The solution set of the multi-objective optimization
problem with conflicting objective functions consistent
with the solutions so that no other solution is better than
all other objective functions is called Pareto optimal. A
multi-objective minimization problem with m decision
variables and n objectives is given below to describe the
concept of Pareto optimality.
Minimize F xð Þ ¼ f1 xð Þ; f2 xð Þ; . . . ; fn xð Þð Þ
where; x 2 <m;F xð Þ 2 <n
A solution p is said to dominate solution q if and only if
fk pð Þ  fk qð Þ 8k 2 1; 2; . . . ; nf g
fk pð Þ < fk qð Þ 9k 2 1; 2; . . . ; nf g
Non-dominated solutions are defined as solutions that
dominate the others but do not dominate themselves.
Solution p is said to be a Pareto optimal solution if there
exists no other solution q in the feasible space that could
dominate p. The set including all Pareto optimal solutions is
referred to as the Pareto optimal or Pareto optimalPareto
optimal set. A graph plotted using collected Pareto optimal
solutions in feasible space is referred to as the Pareto front.
The external Pareto optimal set is used to produce a
limited size of non-dominated solutions (Knowles et al.,
[11]; Zitzler et al. [32]). The maximum size of the archive
set is specified in advance. This method is used to avoid
missing fragments of the non-dominated front during the
search process. The Pareto optimal front is formed as the
archive is updated iteratively. When the archive set is
sufficiently empty and a new non-dominated solution is
detected, the new solution enters the archive set. As the
new solution enters the archive set, any solution already
there that is dominated by this solution will be removed.
When the maximum archive size reaches its preset value,
the archive set must decide which solution should be
replaced. In this study, we propose a novel Pareto archive
set update process to preclude losing non-dominated
solutions when the Pareto archive set is full. When a new
non-dominated solution is discovered, the archive set is
updated when one of the following situations occurs: either
the number of solutions in the archive set is less than the
maximum value, or if the number of solutions in the
archive set is equal to or greater than the maximum value,
then the one solution in the archive set that is most
dissimilar to the new solution is replaced by the new
solution. We measure the dissimilarity by the Euclidean
distance. A longer distance implies a higher dissimilarity.
The non-dominated solution in the Pareto archive set with
the longest distance to the newly found solution is replaced.
For example, the distance (dij) between X
1 and X2 is
calculated as
X 1 ¼ 2:7 5:2 1:8 0:6 6:3 3:9½ 
X 2 ¼ 1:6 0:8 1:8 1:7 1:2 3:9½ 
dij ¼
ﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃﬃ
2:7 1:6ð Þ2þ 5:2 0:8ð Þ2þ 0:6 1:7ð Þ2þ 6:3 1:2ð Þ2
q
¼ 6:91
The Pareto archive set is updated at the end of each
iteration in the proposed PSO.
4.5 Diversification strategy
If all the particles have the same non-dominated solutions,
they will be trapped in the local optimal. To prevent this, a
diversification strategy is proposed to keep the non-
dominated solutions different. Once any new solution is
generated by the particles, the non-dominated solution set is
updated according to one of three situations.
1. If the solution of the particle is dominated by the gbest
solution, assign the particle solution to gbest.
2. If the solution of the particle equals any solution in the
non-dominated solution set, replace the non-dominated
solution with the particle solution.
3. If the solution of the particle is dominated by the worst
non-dominated solution and not equal to any non-
dominated solution, set the worst non-dominated
solution equal to the particle solution.
Int J Adv Manuf Technol
Table 2 Comparison of total flow time (TFT) for different heuristics
Problem size NEH [17] CDS [1] RAJ [20] GAN-RAJ [6] Laha [13] PSO
n m ARPD MPD ARPD MPD ARPD MPD ARPD MPD ARPD MPD ARPD MPD
20 5 0.65 0.17 1.71 0.27 1.70 0.31 1.88 0.34 4.43 0.61 1.28 0.20
10 0.70 0.10 1.43 0.18 1.29 0.19 1.47 0.23 3.43 0.51 0.95 0.12
20 0.59 0.14 1.23 0.18 1.27 0.21 1.31 0.24 2.29 0.30 0.82 0.12
50 5 0.11 0.07 2.48 0.56 2.56 0.51 2.58 0.53 5.86 0.94 2.48 0.44
10 7.87 7.53 11.33 9.62 10.91 9.24 11.27 9.50 14.49 10.87 10.78 9.19
20 0.39 0.09 1.55 0.20 1.58 0.20 1.60 0.19 3.18 0.40 1.44 0.17
100 5 0.27 0.27 2.24 2.24 3.59 3.59 3.00 3.00 5.56 5.56 2.60 2.60
10 0.87 0.87 1.86 1.86 1.91 1.91 1.80 1.80 4.02 4.02 1.93 1.93
20 1.39 1.39 1.65 1.65 1.73 1.73 1.65 1.65 2.83 2.83 1.59 1.59
(NEH Nawaz et al. [17], CDS Campbell et al. [1], RAJ Rajendran C [20], GAN-RAJ Gangadharan and Rajendran [6], Laha Laha and Chakraborty
[12, 13], PSO proposed PSO)
Table 3 Comparison of machine idle time (MIT) for different heuristics
Problem size NEH [17] CDS [1] RAJ [20] GAN-RAJ [6] Laha [13] PSO
n m ARPD MPD ARPD MPD ARPD MPD ARPD MPD ARPD MPD ARPD MPD
20 5 4.54 2.94 43.56 20.33 3.20 1.03 5.04 1.38 10.79 4.70 1.50 0.43
10 3.87 0.83 15.03 1.94 8.07 1.48 7.93 1.42 9.92 1.76 0.00 0.00
20 11.37 1.55 19.19 2.40 14.88 2.01 14.46 1.85 15.29 2.10 0.00 0.00
50 5 67.77 26.95 208.65 108.95 17.11 11.76 17.08 11.76 52.70 23.48 2.95 2.82
10 1.92 0.56 10.59 1.74 4.74 0.68 4.91 0.70 6.92 1.24 0.26 0.18
20 2.26 0.36 8.02 0.97 5.75 0.83 5.80 0.87 7.47 0.96 0.00 0.00
100 5 18.18 4.94 40.24 7.65 4.41 1.40 2.00 0.76 15.47 3.34 3.51 1.69
10 1.96 0.43 9.54 1.38 1.92 0.38 1.65 0.41 5.47 0.98 0.15 0.09
20 1.03 0.26 4.26 0.52 2.79 0.40 2.64 0.35 3.77 0.45 0.00 0.00
(NEH Nawaz et al. [17], CDS Campbell et al. [1], RAJ Rajendran C [20], GAN-RAJ Gangadharan and Rajendran [6], Laha Laha and Chakraborty
[12, 13], PSO proposed PSO)
Table 4 Summation of MS, TFT and MIT for different heuristics
Problem size NEH [17] CDS [1] RAJ [20] GAN-RAJ [6] Laha [13] PSO
n m ARPD MPD ARPD MPD ARPD MPD ARPD MPD ARPD MPD ARPD MPD
20 5 7.04 3.35 46.03 20.75 5.34 1.46 7.56 1.86 16.77 5.52 2.78 0.63
10 6.36 1.16 17.18 2.25 10.21 1.83 10.23 1.79 14.85 2.46 0.95 0.12
20 13.23 1.86 20.86 2.64 17.03 2.36 16.60 2.22 18.63 2.54 0.82 0.12
50 5 69.12 27.19 211.96 109.65 19.93 12.33 20.03 12.37 59.84 24.64 5.45 3.28
10 11.08 8.28 22.51 11.44 16.13 10.00 16.71 10.30 22.70 12.29 11.04 9.38
20 3.72 0.62 9.64 1.19 7.68 1.10 7.79 1.13 11.68 1.52 1.50 0.20
100 5 19.49 5.41 42.93 10.01 8.37 5.06 5.23 3.82 22.08 9.06 6.18 4.35
10 3.11 1.36 11.87 3.32 4.12 2.35 3.69 2.25 10.38 5.13 2.08 2.02
20 3.08 1.77 6.07 2.21 4.73 2.19 4.47 2.04 7.33 3.38 1.60 1.60
(NEH Nawaz et al. [17], CDS Campbell et al. [1], RAJ Rajendran C [20], GAN-RAJ Gangadharan and Rajendran [6], Laha Laha and Chakraborty
[12, 13], PSO proposed PSO)
Int J Adv Manuf Technol
ARPD and MPD. Table 1 show that the proposed PSO
outperforms for almost all problem instances in the make-
span object. The comparison of TFT object is revealed in
Table 2. It shows the ARPD and MPD of six heuristics and
the Laha’s algorithm performs better. We have given the
comparison of MIT in Table 3 that indicates the proposed
PSO can get better solution. At last, we aggregate the
results of three objects in order to show the performance of
the proposed PSO to solve the multi-objectives problems.
We observed that the PSO performed better than other five
heuristics. Table 4 shows the superior performance of the
proposed PSO in terms of the three simultaneous objec-
tives. The computation cost is demonstrated on Table 5.
The proposed PSO spends more CPU time than other
construct heuristic because of the proposed PSO is an
evolutionary algorithm.
In addition, we compare TFT of benchmarks by more
algorithms—Liu and Reeves[16] (LR), Chakravarthy-
Rajendran [3], simulated annealing-bases approach (SA)
and Laha and Chakraborty [12] (H-1 and H-2). The results
are shown in Table 6 for ARPD and Table 7 for MPD. We
can observe that the H-1 and H-2 perform better than other
algorithms while only one object TFT is considered.
6 Conclusion
Many flowshop scheduling problem studies have been
conducted in the past. However, the objective of most of
these has been the minimization of the maximum comple-
tion time (i.e., the makespan). In the real world, there exist
other objectives, such as minimization of machine idle time
that might help improve efficiency and reduce production
costs. PSO, which was inspired by the behavior of birds
and fish, has certain advantages, including simple structure,
easy implementation, immediate accessibility, short search
time, and robustness. However, there has been limited study
of PSO to address the multiple objectives found in the
flowshop scheduling problem. We have therefore presented
a PSO method for solving a flowshop scheduling problem
with multiple objectives, including minimization of make-
span, mean flow time, and machine idle time.
PSO was originally proposed for continuous optimiza-
tion problems. We modified the representation of particle
position, particle movement, and particle velocity to make
PSO suitable for flowshop scheduling, which is a combi-
national problem. In addition, we used a mutation operator
in our PSO algorithm. We also incorporated the concept of
Pareto optimality to measure the performance of multiple
objectives rather than using a weighted fitness function.
Another necessary adjustment to the original PSO, required
to maintain the Pareto optimal solution, was the external
Pareto optimal set used to produce a limited size of non-
dominated solutions. We also used a diversification strategy
in our PSO algorithm. The results demonstrated that the
proposed PSO could produce more optimal solutions than
other heuristics (CDS, NEH, RAJ, GAN-RAJ, and Laha).
The ARPD and MPD of each problem scenario in our PSO
algorithm were less than those methods. The results of our
performance measurement also revealed that the proposed
PSO algorithm outperformed the heuristics in minimizing
the makespan, mean flow time, and total machine idle time.
In future research, we will attempt to apply our PSO to
other shop scheduling problems with multiple objectives.
Possible topics for further study include modification of the
particle position representation, particle movement, and
particle velocity. Issues related to Pareto optimality, such as
a solution maintenance strategy and performance measure-
ment, are also topics worthy of future study.
References
1. Campbell HG, Dudek RA, Smith ML (1970) A heuristic
algorithm for the n-job m-machine sequencing problem. Manage
Sci 16:B630–B637. doi:10.1287/mnsc.16.10.B630
2. Carlier J (1978) Ordonnancements à contraintes disjonctives.
RAIRO Rech Oper. Oper Res 12:333–351
3. Chakravarthy K, Rajendran C (1999) A heuristic for scheduling in
a flowshop with the bicriteria of makespan and maximum
tardiness minimization. Prod Plann Contr 10:707–714. doi:
10.1080/095372899232777
4. Eren T, Güner E (2007) The tricriteria flowshop scheduling
problem. Int J Adv Manuf Technol 36:1210–1220. doi:10.1007/
s00170-007-0931-1
5. Gupta JND, Stafford JEF (2006) Flowshop scheduling research
after five decades. Eur J Oper Res 169:699–711. doi:10.1016/j.
ejor.2005.02.001
6. Gangadharan R, Rajendran C (1993) Heuristic algorithms for
scheduling in no-wait flow shop. Int J Prod Econ 32:285–290.
doi:10.1016/0925-5273(93) 90042-J
7. Hejazi SR, Saghafian S (2005) Flowshop- scheduling problems
with makespan criterion: a review. Int J Prod Res 43:2895–2929.
doi:10.1080/0020754050056417
8. Heller J (1960) Some numerical experiments for an MxJ flow
shop and its decision- theoretical aspects. Oper Res 8:178–184.
doi:10.1287/opre.8.2.178
9. Jarboui B, Ibrahim S, Siarry P, Rebai A (2008) A combinational
particle swarm optimisation for solving permutation flowshop prob-
lems. Comput Ind Eng 54:526–538. doi:10.1016/j.cie.2007.09.006
10. Kennedy J, Eberhart R (1995) Particle swarm optimization. Proc
IEEE Int Conf Neural Netw 1995:1942–1948. doi:10.1109/
ICNN.1995.488968
11. Knowles JD, Corne DW (1999) The Pareto archived evolution
strategy: a new baseline algorithm for multi-objective optimiza-
tion. In: Congress on Evolutionary Computation, Washington,
DC, IEEE Service Center, 98–105
12. Laha D, Chakraborty UK (2008) An efficient heuristic approach
to total flowtime minimization in permutation flowshop schedul-
ing. Int J Adv Manuf Technol 38:1018–1025. doi:10.1007/
s00170-007-1156-z
13. Laha D, Chakraborty UK (2009) A constructive heuristic for
minimizing makespan in no-wait flow shop scheduling. Int J Adv
Manuf Technol 41:97–109. doi:10.1007/s00170-008-1545-0
Int J Adv Manuf Technol
A multi-objective PSO for job-shop scheduling problems  
D. Y. Shaa and Hsing-Hung Linb*  
aDepartment of Industrial Engineering and System Management, Chung Hua University,, Hsin Chu, Taiwan R.O.C.;  
bDepartment of Industrial Engineering and Management, National Chiao Tung University, Hsin Chu, Taiwan R.O.C. 
 
 
Abstract 
Most previous research into the job-shop scheduling problem has concentrated on finding a single optimal 
solution (e.g., makespan), even though the actual requirement of most production systems requires 
multi-objective optimization. The aim of this paper is to construct a particle swarm optimization (PSO) for an 
elaborate multi-objective job-shop scheduling problem. The original PSO was used to solve continuous 
optimization problems. Due to the discrete solution spaces of scheduling optimization problems, the authors 
modified the particle position representation, particle movement, and particle velocity in this study. The 
modified PSO was used to solve various benchmark problems. Test results demonstrated that the modified PSO 
performed better in search quality and efficiency than traditional evolutionary heuristics. 
 
 
Keywords: job-shop scheduling; particle swarm optimization; multiple objectives 
 
 
 
 
____________________________________________  
*Corresponding author. Email: hsinhung@gmail.com 
(ii) multi-recombination helps to speed the search and to find a larger set size when seeking the Pareto 
optimal set, and 
(iii) operation-based representation is better than priority-list and job-based representation  selected for 
contrast under  recombination methods.  
The Pareto archived simulated annealing (PASA) method, a meta-heuristic procedure based on the SA 
algorithm, was developed by Suresh to find non-dominated solution sets for the JSP with the objectives of 
minimizing the makespan and the mean flow time of jobs[25]. The superior performance of the PASA can be 
attributed to the mechanism it uses to accept the candidate solution. Candido et al. addressed JSPs with numbers 
of more realistic constraints, such as jobs with several subassembly levels, alternative processing plans for parts 
and alternative resources of operations, and the requirement for multiple resources to process an operation [3]. 
The robust procedure worked well in all problem instances and proved to be a promising tool for solving more 
realistic JSPs. Lei first designed a crowding-measure-based multi-objective evolutionary algorithm (CMOEA) 
that makes use of the crowding measure to adjust the external population and assign different fitness for 
individuals [14]. Compared to the strength Pareto evolutionary algorithm, CMOEA performs well in job-shop 
scheduling with two objectives including minimization of makespan and total tardiness. 
One of the latest evolutionary techniques for unconstrained continuous optimization is particle swarm 
optimization (PSO) proposed by Kennedy et al. [11]. PSO has been successfully used in different fields due to 
its ease of implementation and computational efficiency. Even so, application of PSO to the combination 
optimization problem is rare. Coello et al. provided an approach in which Pareto dominance is incorporated into 
PSO to allow the heuristic to handle problems with several object functions [4]. The algorithm uses a secondary 
repository of particles to guide particle flight. That approach was validated using several test functions and 
metrics drawn from the standard literature on evolutionary multi-objective optimization. The results show that 
the approach is highly competitive. Liang et al. invented a novel PSO-based algorithm for JSPs[16]. That 
Job-shop scheduling problem 
A typical JSP can be formulated as follows. There are n jobs to be processed through m machines. Each job must 
pass through each machine once and only once. Each job should be processed through the machines in a 
particular order, and there are no precedence constraints among the different job operations. Each machine can 
perform only one job at a time, and it cannot be interrupted. In addition, the operation time is fixed and known in 
advance. The objective of the JSP is to find a schedule to minimize the time required to complete all jobs, that is, 
to minimize the makespan Cmax. In this study, we attempt to attain the three objectives (i.e., minimizing 
makespan, machine idle time, and total tardiness) simultaneously. We formulate the multi-objective JSP using 
the following notation: 
n is the total number of jobs to be scheduled 
m is the total number of machines in the process 
t(i, j) is the processing time for job i on machine j (i=1,2,…n), (j=1,2,…m) 
Li is the lateness of job i 
{π1, π2, …, πn} is the permutation of jobs 
The objectives considered in this paper are formulated as follows: 
Completion time (makespan) ),( jC pi  
  )1,()1,( 11 pipi tC =          (1) 
nitCC iii ,...,2  )1,()1,()1,( 1 =+= − pipipi        (2) 
mjjtjCjC ,...,2  ),()1,(),( 11 =+−= pipipi        (3) 
mjnijtjCjCjC iiii ,...,2  ;,...,2  ),()}1,(),,(max{),( 1 ==+−= − pipipipi    (4) 
Makespan, ),(max mCf nC pi=         (5) 
Total tardiness, ] ,0max[
1
 
∑=
=
n
i
itardinesstotal Lf      (6) 
In Eqs. (8) and (9), τ is the iteration number. The inertial weight w is used to control exploration and exploitation. 
A large w value keeps the particles moving at high velocity and prevents them from becoming trapped in local 
optima. A small w value ensures a low particle velocity and encourages particles to exploit the same search area. 
The constants c1 and c2 are acceleration coefficients to determine whether particles prefer to move closer to the 
pbest or gbest positions. The rand1 and rand2 are two independent random numbers uniformly distributed 
between 0 and 1. The termination criterion of the PSO algorithm includes a maximum number of generations, a 
designated value of pbest, and lack of further improvement in pbest. The standard PSO process is outlined as 
follows:  
 
Step 1: Initialize a population of particles with random positions and velocities in a D-dimensional search space.  
Step 2: Update the velocity of each particle using Eq. (8).  
Step 3: Update the position of each particle using Eq. (9).  
Step 4: Map the position of each particle into the solution space and evaluate its fitness value according to the 
desired optimization fitness function. Simultaneously update the pbest and gbest positions if necessary.  
Step 5: Loop to Step 2 until the termination criterion is met, usually after a sufficient good fitness or a maximum 
number of iterations.  
 
The original PSO was designed for a continuous solution space. We must modify the PSO position 
representation, particle velocity, and particle movement so they work better with combinational optimization 
problems. These changes are described in next section.  
(i,j) is the operation of job j that must be processed on machine i 
S is the partial schedule that contains scheduled operations 
Ω is the set of operations that can be scheduled 
s(i,j) is the earliest time at which operation (i,j) belonging to Ω can be started. 
p(i,j) is the processing time of operation (i,j). 
f(i,j) is the earliest time at which operation (i,j) belonging to Ω can be finished, f(i,j) = s(i,j) + p(i,j) . 
 
G&T algorithm: 
 
Step 1: Initialize φ=S ; Ω to contain all operations without predecessors. 
Step 2: Determine }{ min ),(),(* jiji ff Ω∈=  and the machine m* on which f* can be realized. 
Step 3:  
(1) Identify the operation set Ω∈′′ ) ,( ji  such that ) ,( ji ′′  requires machine m*, and *),( fs ji <′′  
(2) Choose (i, j) from the operation set identified in Step 3(1) with the largest priority. 
(3) Add (i, j) to S. 
(4) Assign s(i,j) as the starting time of (i, j). 
Step 4: If a complete schedule has been generated, stop. Otherwise, delete (i, j) from Ω, include its immediate 
successor in Ω, and then go to Step 2. 
 
Table 1 shows the mechanism of the G&T algorithm using a 2×2 example. The position of particle k 
is 





=
21
12kX . 
 
The proposed PSO differs from the original PSO in the information stored in the pbest and gbest solutions. 
While the original PSO keeps the best positions found so far, the proposed PSO maintains the best schedule 
generated by the G&T algorithm. In the previous example, the schedule Sk rather than the position Xk is retained 
in the pbest and gbest solutions, where Sk is 





12
12
. The movement of particles is modified in accordance with 
the representation of particle position based on the insertion operator. 
 
Particle velocity 
The original PSO velocity concept assumes that each particle moves according to the velocity determined by the 
distance between the previous position of the particle and the gbest (pbest) solution. The two major purposes of 
the particle velocity are to keep the particle moving toward the gbest and pbest solutions, and to maintain inertia 
to prevent particles from becoming trapped in local optima. 
In the proposed PSO, we concentrate on preventing particles from becoming trapped in local optima rather 
than moving them toward the gbest (pbest) solution. If the priority value is increased or decreased by the present 
velocity in the current iteration, we keep the priority value increasing or decreasing at the beginning of the next 
iteration with probability w, which is the inertial weight in PSO. The larger the value of w, the more the iteration 
priority value keeps increasing or decreasing, and the more the difficult it is for the particle to return to its 
current position. For an n-job problem, the velocity of particle k can be represented as 
 . particle of  of velocity  theis   where},1,0,1{ ], ...  [ 21 kjvvvvvV ikikiknkkk −∈=  
The initial velocity of particles is generated randomly. Instead of considering the distance from kix  to 
)( iki gbestpbest , our PSO considers whether the value of kix  is larger or smaller than )( iki gbestpbest . If kix  
decreases in the present iteration, this mean that )( iki gbestpbest  is smaller than kix  and kix  is set moving toward 
Step 3: If the random number rand < c1 then seek the position of Λ1 in kipbest ; otherwise, seek the position 
of Λ1 in igbest . Denote the position that has been found in kipbest  or igbest  by ζ′, and the job in 
position ζ′ of kix  by Λ2. 
Step 4: If Λ2 has been denoted, 0
1
=
k
iJv , and 02 =
k
iJv , then swap Λ1 and Λ2 in 
k
ix , 11 ←
k
iJv . 
Step 5: If all the positions of kix  have been considered, then stop. If not, and if ζ < n, then ζ←ζ+1; 
otherwise, ζ←1. Go to Step 2. 
 
For example, consider the 6-job problem where kix =[4 2 1 3 6 5], kipbest =[1 5 4 2 6 3], igbest =[3 2 6 4 5 1], 
k
iv =[0 0 1 0 0 0], c1=0.6, and c2=0.2.  
Step 1: The position of kix  is randomly chosen: ζ=3. 
Step 2: The job in the 3rd position of kix  is job 1, i.e., Λ1=1. 
Step 3: A random number rand is generated; assume rand=0.7. Since rand > c1, we compare each position 
of igbest  with Λ1 and the matched position ζ′=6. The job in the 6th position of kix  is job 5, i.e., 
Λ2=5.  
Step 4: Since 04 =kiv  and 05 =kiv , swap jobs 1 and 5 in kix  so kix =[4 2 5 3 6 1]. Then let 14 ←kiv  and 
k
iv =[0 0 1 1 0 0].  
Step 5: Let ζ←4 and go to Step 2. Repeat the process until all positions of kix  have been considered. 
 
based on the machine-wise priority dispatching rule (pdr) and the G&T procedure [8]. The each gene represents 
a pdr code. The G&T procedure was used to generate an active feasible schedule. The MOGA fitness function is 
the weighted sum of makespan, total tardiness, and total idle time of machines with random weights. 
The computation results showed that the relative error of the solution for Cmax and total idle time 
determined by the proposed MOPSO was better in 23 out of 23 problems than the MOGA. In 22 of the 23 
problems, the proposed PSO performed better for the solution considering total tardiness. Overall, the proposed 
MOPSO was superior to the MOGA in solving the JSP with multiple objectives.  
 
Conclusion 
While there has been a large amount of research into the JSP, most of this has focused on minimizing the 
maximum completion time (i.e., makespan). There exist other objectives in the real world, such as the 
minimization of machine idle time that might help improve efficiency and reduce production costs. PSO, 
inspired by the behavior of birds in flocks and fish in schools, has the advantages of simple structure, easy 
implementation, immediate accessibility, short search time, and robustness. However, few applications of PSO 
to multi-objective JSPs can be found in the literature. Therefore, we presented a MOPSO method for solving the 
JSP with multiple objectives, including minimization of makespan, total tardiness, and total machine idle time. 
The original PSO was proposed for continuous optimization problems. To make it suitable for job-shop 
scheduling (i.e., a combinational problem), we modified the representation of particle position, particle 
movement, and particle velocity. We also introduced a mutation operator and used a diversification strategy. 
The results demonstrated that the proposed MOPSO could obtain more optimal solutions than the MOGA. The 
relative error ratios of each problem scenario in our MOPSO algorithm were less than in the MOGA. The 
  Move particle k 
Evaluate Xk 
Update gbest, pbest, and S 
 end for 
until maximum iteration limit is reached 
 
References 
[1]Bean, J., 1994. “Genetic algorithms and random keys for sequencing and optimization,” Operations Research Society of America 
(ORSA) Journal on Computing, 6, 154–160. 
[2]Beasley J.E., 1990. "OR-Library: distributing test problems by electronic mail", Journal of the Operational Research Society 41(11) 
pp1069-1072. 
[3]Candido, M. A. B., Khator, S.K. & Barcia, R.M., 1998. “A genetic algorithm based procedure for more realistic job shop 
scheduling problems,” International Journal of Production Research, 36(12), 3437–3457. 
[4]Coello, C.A., Plido, G.T. & Lechga, M.S., 2004. “Handling multiple objectives with particle swarm optimization,” IEEE 
Transactions on Evolutionary Computation, 8(3), 256–278. 
[5]Esquivel, S.C., Ferrero, S.W. & Gallard, R.H., 2002. “Parameter settings and representations in Pareto-based optimization for job 
shop scheduling,” Cybernetics and Systems: An international Journal, 33, 559–578. 
[6]Fisher, H. & Thompson, G. L., 1963. Industrial Scheduling, Englewood Cliffs, NJ: Prentice-Hall. 
[7]Garey, M. R., Johnson, D. S. & Sethi, R., 1976. “The complexity of flowshop and jobshop scheduling,” Mathematics of Operations 
Research, 1, 117–129. 
[8]Giffler, J. & Thompson, G. L., 1960. “Algorithms for solving production scheduling problems,” Operations Research, 8, 487–503. 
[9]Gonçalves, J. F., Mendes, J. J. M. & Resende, M. G. C., 2005. “A hybrid genetic algorithm for the job shop scheduling problem,” 
European Journal of Operational Research, 167(1), 77–95. 
[22]Sha, D.Y. & Hsu, C.-Y., 2006, “A hybrid particle swarm optimization for job shop scheduling problem,” Computers & Industrial 
Engineering, 51(4), 791–808. 
[23]Sha, D.Y. & Hsu, C.-Y., 2008. “A new particle swarm optimization for the open shop scheduling problem,” Computers & 
Operations Research, 35, 3243–3261. 
[24]Sun, D., Batta, R. & Lin, L., 1995. “Effective job shop scheduling through active chain manipulation,” Computers & Operations 
Research, 22(2), 159–172. 
[25]Suresh R.K. & Mohanasndaram, K.M. 2006., “Pareto archived simulated annealing for job shop scheduling with multiple 
objectives,” International Journal of Advanced Manufacturing Technology, 29, 184–196. 
[26]Taillard, E.D., 1993. “Benchmarks for basic scheduling problems,” European Journal of Operational Research, 64, 278–285. 
[27]Wang, L. & Zheng, D.-Z., 2001. “An effective hybrid optimization strategy for job-shop scheduling problems,” Computers & 
Operations Research, 28, 585–596. 
[28]Xia, W. & Wu, Z., 2005. “An effective hybrid optimization approach for multi-objective flexible job-shop scheduling problems,” 
Computers & Industrial Engineering, 48, 409–425. 
[29]Zhang, H., Li, X., Li H., Hang F. 2005. “Particle swarm optimization-based schemes for resource-constrained project 
scheduling,” Automation in Construction 14(3), 393–404. 
 
 
 
 
 
 
 
 
 
la16 10 10 1452 1040 0 9169 2718 0 1127 1417 0.25732 
la17 10 10 1172 889 0 7044 3365 0 1779 53 0 
la19 10 10 1251 938 0 7164 2796 0 1581 733 0 
la20 10 10 1419 985 0 8745 2883 0 1451 407 0 
 
 
The English in this document has been checked by at least two professional editors, both native speakers of English. For a 
certificate, see:  
 
http://www.textcheck.com/cgi-bin/certificate.cgi?id=LbNsng  
 2
  本屆計算機與工業工程國際會議，主題涵蓋近年來學術與產業界的研究與發展，包含的主軸
有：Applied Operations Research、Probabilistic and Statistical Models、Communications & Networking、
Data Mining, Knowledge Discovery and Computational Intelligence、Multi-Criteria Decision Making and 
Decision Analysis、System Simulation and Forecasting、Information Technology、Supply Chain Management 
& Logistics、Web-based Applications, E-Business and E-Commerce、Quality Management/Engineering, 
Reliability and Maintenance 、 Facilities Layout Design, Warehousing, Material Handling 、
Production/Manufacturing Systems and Processes; Agile Manufacturing; ERP/APS 、 Design for 
Manufacturing, Robust Design, Reverse Engineering、Group Technology & Cellular Manufacturing、
Environmentally Conscious Manufacturing、Human Factors, Industrial Ergonomics and Safety、Project 
Development & Management、Global Economy Engineering & IE、Manufacturing、 Technologies、Artificial 
Intelligence & Expert Systems、Industrial Engineering Education and E-learning、Systematic Innovation、
Ethics in IE Education Research & Practice。從上述的主題中不難發現，工業工程領域除了傳統的範疇之
外已逐步拓展到科技管理與服務業管理等非傳統工業工程的領域。 
此次會議中，針對每位演講者/論文發表者的講題，各場聽眾皆有相當熱烈的回應與討論，於
此當中，不僅瞭解目前國外學者的研究方向，亦學習到如何與國外聽眾作互動，同時也更深刻了解到
學術溝通的重要性。透過此次會議的參與，讓我吸收了許多寶貴的經驗，也藉由與國外學者的密切互
動，讓自己更加瞭解未來工業工程發展的趨勢，並對工業工程領域相關的學術研究有更全盤性的認識
與了解。 
 
三、攜回資料名稱及內容 
1.大會手冊一本   
2.大會論文摘要集一本  
3.大會論文光碟一片   
4.環保背包一只紀念品(雷射指引筆)一份   
5.與在場學者交流之名片 
 
 
 
 
 
 4
本屆亞太工業工程與管理系統研討會，主題涵蓋近年來學術與產業界的研究與發展，包含的
主題有：Applied Statistics & Data Mining, CAD/CAM, Computational Intelligence in IE, Decision Making Models,  
Decision Support Systems, Enterprise Information Systems/ERP, Facilities Design and Location, Green 
Design/Green Manufacturing, Healthcare Management, Human Factors/Industrial Ergonomics, Human Resource 
Management, Industrial Engineering Education, Inventory Systems and Management, Lean Manufacturing/Logistics, 
Manufacturing/Industrial Automation, Operations Research/Optimization, Product Design/Development, Production 
Systems Design, Planning and Control, Productivity and Business Strategies, Project Management, Quality 
Engineering, Research Methods in IE, Safety Management, Service Systems and Management, Soft 
Computing/Meta-Heuristics, Supply Chain and Logistics, Systems Engineering and Management, Systems 
Simulation, Technology Management, Total Quality Management。除了工業工程的主題外，尚包括健康管理、
服務系統與管理、系統工程與管理、科技管理等領域。 
 透過參與此次會議，對於演講者/論文發表者的講題，不僅可以瞭解到目前國外學者的研
究方向，於此當中，亦強化與國外學者間的互動，同時也更深刻體認到學術交流的重要性，當然，參
與的場次中聽眾皆有相當熱烈的回應與討論。透過此次會議的參與，吸收了更多寶貴的經驗，也藉由
與國外學者的密切互動，讓自己更加瞭解未來工業工程與管理發展的趨勢。 
 
三、攜回資料名稱及內容 
1.大會手冊一本   
2.大會論文摘要集一本  
3.大會論文光碟一片   
4.環保背包一只 
5.與在場學者交流之名片 
 
 
 
 
 
 
 
 
 6
Engineering, Reliability and Quality Control, Engineering Experimental Design, Integrated Product Engineering, 
Engineering Risk and Decision Analysis, Computer Supported Collaborative Engineering, Human Factors and 
Ergonomics, Computer-Aided Design, Computer Aided Manufacturing, Computer Simulation MethodsFacilities 
Design and Logistics, Manufacturing Processes and Methods, Information Systems for the Manufacturing, Quality 
and Productivity Management, Optimization Methods, Intelligent Engineering Systems, Engineering Management 
and Leadership 等。由於會議是由多領域組成，從上述的主題中不難發現，工業工程領域除了傳統的範
疇之外已逐步拓展到科技管理與服務業管理等非傳統工業工程的領域。 
此次會議中，針對每位演講者/論文發表者的講題，聽眾皆有相當熱烈的回應與討論，不僅能夠瞭
解目前國外學者的研究方向，亦學習到如何與國外聽眾作互動，同時也更深刻了解到學術溝通的重要
性。透過此次會議的參與，吸收了許多寶貴的經驗。 
 
三、攜回資料名稱及內容 
1.大會手冊一本   
2.大會論文摘要集一本  
3.大會論文光碟一片   
4.背包一只  
5.與在場學者交流之名片 
 
 
96年度專題研究計畫研究成果彙整表 
計畫主持人：沙永傑 計畫編號：96-2221-E-216-052-MY3 
計畫名稱：粒子群最佳化於多目標排程問題之應用 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 2 2 100%  
研究報告/技術報告 0 0 100%  
研討會論文 5 3 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
