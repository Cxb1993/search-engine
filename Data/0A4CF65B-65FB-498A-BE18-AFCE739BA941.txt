2 
2 
?????? 
 
????????????????
??????????????????
??????????????????
??????????????????
??????????????????
?????????????????? 
?????????????
(Commercial Off-The-Shelf COTS)???
?????????????? (???
? Word)???????????????
??????????????????
???????? 
????????(????)????
???????????????????
??????????????????
???????????????? 
     
???????????????????
??????????????? 
 
Abstract 
 
    In this project, we investigated the 
mimicry attacks that give several 
challenges to signature-based IDS. We  
described how to conquer several issues on 
signature-based IDS, and follow that by the 
description of the system architecture of 
our approach. We use our experimental  
and evaluation results to show the 
detection capability and the system 
efficiency of our method. 
Based on system call interception 
technique, we have developed a prototype 
of real-time intrusion detection and 
prevention system. In our prototype system, 
we did intercept those important system 
calls invoked by application and tries to 
match any penetration scenarios. Once 
there is an evidence showing some 
penetration is undertaking, the system can 
terminate the penetration process before 
injury. This wrapper system can also 
wrapping COTS ( Commercial 
Off-The-Shelf) component to provide 
robustness and security. 
    
 
Keywords: Network Attack, System call 
interception, real-time IDS, Mimicry Attacks, 
Human-immunity 
 
 
??????? 
 
????????????????
???? (Intrusion Prevention System usi
ng Wrapper; IPSW)??????????
??????????????????
???????????????????
???????????????????
????????????(system call)
???????????????????
???????????????????
???????????????????
???????????????????
?????????? “?????? (I
ntrusion Detection System ? IDS) ” 
????????? 
?????????????????
???? “?? (Detection)”?????
? “?? (Prevention)”????????
??????????????????
???????????????????
???????????????????
??????????????? “??
4 
4 
 
 
 
????????????????
?(Loadable module)????????
??(1)????????(Normal 
Behavior collector) ???????
???????(pattern)??????
???(2) Wrapper Driver (WD). ???
? Wrapper Manager ???????
(bridge)?(3) Wrapper Manager (WM).
?????????????????
???????? WIC(????)??
??(4) Wrapper Information Center 
(WIC).?????????? penetration 
template table, ???????????
????(state machine)? penetration 
table.(5) ?????? State-based Rule 
Configuration Interface (SRCI).???
?????????????(scenario)
??????(FSM) ??????
WIC????????????????
? 2006 ? International Computer 
Symposium ????? 2006 ? 12 ??
?? 
 
?????? 
?????????????????
??????????????????
???????????????????
??????????????????
???????????????????
2004 ???????? 2005 ??????
?????? 2006 ????????? 
????????????? 2006 ?
12 ???? ICS2006 ???? 
6 
6 
checking, it is quite practical to examine the 
system calls invoked by suspected processes. 
Many IDS systems are designed with this 
concept, such as STBIPW [1] and N-Gram 
[8][9]. Furthermore, there are two ways to 
inspect system calls requested by applications. 
One way is to use user level system call 
interception mechanisms, such as the ptrace 
system call provided by OS to transfer 
execution from the monitored process to the 
monitoring process [23]. In this manner, 
security system programmers have the benefit 
of simplicity since modifying kernel code is 
not necessary. But high overhead is the fatal 
wound since each execution transfer requires 
two context switches. The other way is to 
intercept system calls via kernel level 
mechanisms [5][6][7]. This kind of security 
systems is resident mostly in the kernel and 
hijacks system calls directly from the system 
call table. Only jump instructions are needed 
to do this hijacking and thus little overhead 
penalty are produced compared to user level 
mechanisms.  
N-gram used system call tracing 
technology to build the IDS system, and 
finally evolved into the pH-IDS in [10]. The 
pH-IDS verifies each system call invoked by 
the process and determine its status. The "N" 
in N-gram means that N continuous system 
calls are examined. Each fragment of system 
call sequence is matched against a database to 
detect intrusion. In this way, N-gram is simple 
and efficient, but the detection rate is 
dependent on the window size N. When N is 
large, the comparison result is more precise. 
However, the detection rate is also decreased. 
The other drawback of N-gram is that only 
system call sequences are checked, and system 
call parameters are not inspected. Some 
attacks can be carried out with valid system 
call sequences but harmful arguments to 
achieve the purpose of attacking. Furthermore, 
valid system call fragments can be chosen 
from normality database and inserted into 
intrusion sequence. In this way, the intrusion 
system calls are scattered within each fragment 
and beyond the scope of window size, thus 
successfully escaping the N-gram’s check. 
Another system call based IPS is the 
STBIPW [1]. The STBIPW was proposed and 
designed by the security research lab led by 
Wen-Nung Tsai in National Chiao Tung 
University. It is an Intrusion Prevention 
System (IPS) that uses the kernel level 
wrapper mechanisms to provide real-time 
prevention. 
 
2.2: FSM-based Detection Methods 
 
The STAT (State Transition Analysis Tool) 
[11][12][13] is one well-known IDS system 
that uses FSM to analyze intrusion behaviors. 
It has a modeling language that is used to 
describe penetration as a finite state machine. 
The STAT is a log investigation system, which 
uses FSM to describe attack scenarios and then 
feeds system logs into intrusion detection 
engine to determine whether the system has 
been attacked or not. However, attackers can 
stop being offensive and leave without being 
aware of.  
There are many researches that use the 
concept of STAT. For example, in the work on 
STBIPW, a security platform is provided to 
allow users to define their own intrusion 
templates and to load them into system to do 
real-time detection. This system combines 
both the concepts of STAT and kernel level 
system call tracing mechanisms. It 
decomposes a penetration event into many 
states linked with critical system call 
transition.  
 
2.3: Immunity-based Detection Methods 
 
Human body is always being in contact 
with external materials. All these foreign 
materials may contain harmful invaders to 
human bodies. Fortunately, we have biological 
immune system that would detect and 
eliminate those foreign intruders. The major 
player in our immune system is the 
lymphocyte, which is more commonly known 
as the antibody.  
To produce antibodies, the immune 
system first picks a random segment from the 
gene pool. However, not every gene segment 
is capable of being a lymphocyte. The gene 
segment is fitered with both positive selection 
8 
8 
the system will warn users of this event. With 
the testing procedure inspired from human 
immune system, we can diminish the loss 
caused by improper template detectors. 
 
3.2: Prevention of Collaborative and Inherited 
Attacks 
 
When a process is being 
monitored, one FSM instance is 
created for each possible intrusion 
path to trace the process’s status. All 
these related instances will be updated 
according to their execution situations. 
If this process issues a fork system 
call, its set of instances is duplicated 
to monitor its child. These newly 
created instances would all be in the 
initial state and the execution of child 
processes are traced independently. To 
prevent collaborative attack, our 
system will create another instance 
called the family instance. Each 
family instance will be in the same 
state the parent is in at the time the 
fork system call is issued. An example 
isshown in Figure 2. 
 
 
Figure 2. Example of family instance 
 
After the fork system call, both 
the parent and child processes will 
have an individual set of monitoring 
instances to prevent them from 
launching independent attacks. In 
addition, the family instance is used 
instead to prevent collaborative attack. 
The instance will be updated when 
either the parent or the child requests 
a system call. In this way, no matter 
how this family divides their intrusion 
steps, the intrusion will be detected by 
our system. 
 
4: System Architecture 
 
Extending from STBIPW, our system is divided into 
two segments; one is the user level components and the 
other is the kernel-level components. We use a device 
driver to act as a bridge between these two segments. On 
one side, the driver passes commands and data to the 
underlying core engine for user configuration. On the 
other side, it also returns execution information back to 
users.  
 
Figure 3. System Architecture. 
 
4.1: User Level Components 
 
The main user level module other than 
STBIPW is the Template Testing Module. The 
purpose is to make sure that no inappropriate 
attack templates are defined by the State-based 
Rule Configuration Interface that may cause a 
high false positive alarm rate.  
The Template Testing Module first selects 
the normal system call sequence from the 
Normal Behavior Database, and then tests to 
see if it could transform the attack template to 
the template’s ultimate condition. The flow is 
shown in the figure below. The template will 
be inserted into the Wrapper Driver after it is 
verified. Then the kernel modules will execute 
10 
10 
transition. The critical number of key events 
that would change the status of the FSM 
instance when running in real situation should 
be relatively small compared with the total 
amount of invoked system calls of the 
monitored process. Therefore, in the second 
evaluation experiment, the program behaves 
the same as in the first experiment, but some 
extra behaviors are added to reduce the 
fraction of the key system calls that cause the 
state-transition in attack templates. Figure 6 
shows the result, which allows us to claim that 
the runtime overhead is approximately 0 while 
the ratio of the system calls causing the 
state-transition in attack templates is kept 
under 8%. 
 
0.0%
10.0%
20.0%
30.0%
40.0%
50.0%
0 10 20 40 60 80 100
state transition percentage(%)
ru
nt
im
e 
ov
er
he
ad
.
 
Figure 6. Percentage of critical system calls vs. 
overhead. 
 
Next, the file-copying program is used 
again but we increased the number of 
monitoring templates to measure the variation 
of the runtime overhead against the number of 
monitoring templates. As shown in Figure 7, 
the runtime overhead remains roughly constant 
as the number of FSM instances increases. 
This is because even though the program is 
being monitored by many monitoring FSM 
instances, not many instances transit states 
simultaneously if the program is normally 
executed since different templates describe 
different intrusion behaviors and thus 
constitutes  different system call sequences.  
 
0.00%
20.00%
40.00%
60.00%
80.00%
100.00%
10 20 30 40 50
Number of active templates used for testing process
R
un
ti
m
e 
O
ve
rh
ea
d
 
Figure 7. Number of monitored templates vs. 
overhead. 
 
In the third experiment, we study the 
overhead variation due to the number of 
concurrently running processes and give the 
result in Figure 8. Each process is monitored 
by a single FSM instance derived from an 
identical template. We can see that while many 
processes are running simultaneously, the 
runtime overhead can also remain stable since 
only one system call is invoked by one process 
at any given time and the ratio of critical 
system calls for certain monitored process is 
fixed. Therefore, the overall runtime overhead 
is nearly fixed. 
 
0.00%
20.00%
40.00%
60.00%
80.00%
100.00%
1 2 3 4 5 10
Number of processes being monitored
Ru
n
t
i
m
e
 O
v
e
r
h
e
a
d
 
Figure 8. Number of concurrent monitored 
processes vs. overhead. 
 
5.2: Experiments on Intrusion Detection of 
Collaborative Attacks 
 
To detect collaborative attack, we assume 
that one simple attack template is defined as 
the figure below. 
 
 
Figure 9. Original experiment template on 
collaborative attack. 
 
We use one forged program to launch the 
following attacking system call sequence 
intended to test the anti-collaborative module. 
 
