known solutions and update 4 best known solutions in 
85 instances. Our MACO can solve CFLP efficiently, in 
terms of solution quality and computational time, and 
it is competitive with other well-known algorithms. 
英文關鍵詞： Logistics System, Location Routing Problem, Multiple 
Ant Colony Optimization 
 
2 
分，即長期策略面所探討的設施區位決
策，以及即時作業面為滿足顧客需求所考
量的車輛途程規劃。其中，設施區位問題
(facility location problem, FLP)探討的是物
流場站設置的選擇以及顧客與設施間的分
派，而車輛途程問題 (vehicle routing 
problem, VRP)則是決定貨物配送的路徑
規劃。 
圖 1 為兩年期計畫架構關係圖，其中
容量限制設施區位問題(capacitated facility 
location problem, CFLP)已在先前研究中
完成，第一年期計畫也已完成針對具時窗
限制多場站車輛途程問題(multiple depot 
vehicle routing problem with time windows, 
MDVRPTW)之探討研究，本年度計畫是以
設施區位問題第一年計畫的研究為基礎，
延伸至求解物流配送系統中區位途程問
題。問題目標為決定最佳的設施數與區
位，並且同時規劃各區位的車輛配送路
徑，使得系統總成本最小化。系統總成本
包括設施的建構成本（隨著每個候選區位
的不同，其建構成本亦有所不同）、設施
的使用成本（所有設施的使用成本皆為一
固定常數值）與產品配送之運輸成本。
CFLP 與 VRP 雖可採用兩階段分開求解，
但僅能獲得個別問題的局部最佳，因此，
本研究將探討具容量限制的區位途程問題
(capacitated location routing problem, 
CLRP)，透過將此兩問題進行整合求解，
以達到整體最佳化的目的。 
近年來 VRP 為實體物流研究中一個
重要的管理議題，而 MDVRPTW 問題為
VRP 的延伸。實務上，物流系統中往往具
有多個物流中心，且須在給定的時窗限制
下對顧客進行服務。因此多場站車輛途程
問題(multiple depot vehicle routing problem, 
MDVRP) 與 時 窗 限 制 車 輛 途 程 問 題
(vehicle routing problem with time windows, 
VRPTW)同為 VRP 中兩個重要的變形問
題。在 MDVRP 的網路中顧客可由數個物
流中心場站進行服務，每個場站有各自的
車隊，車隊由所屬場站出發，服務多個顧
客後再回到原場站。另一方面，VRPTW
中，每個顧客有其時窗的限制，顧客須在
最早開始服務時間(earliest start time)與最
晚開始服務時間(latest start time)的區間內
開始被車輛服務。此兩類變形問題的研究
多是採分別求解方式，因此，本研究計畫
同時將場站的分配、車輛途程及時窗限制
規畫等問題，一併納入演算法求解，已期
望達到更好的求解品質。 
 
圖 1. 計畫架構關係圖 
MDVRPTW 問題可定義為一個運輸
網路中，由一個物流中心(場站)提供具相
同車容量的配送車隊對已知需求量的顧客
群進行服務。透過決定每輛車的服務顧客
與配送路線，達到總配送成本最小的目
標。此外，每條路線僅由一輛車進行服務，
每輛車須從場站出發，最後再回到場站；
每輛車所服務顧客的需求量總和不得超過
車容量限制，亦或採用每輛車總服務時間
必須小於時間上限的限制；每一需求點皆
必須被服務，且僅能被一輛車服務一次，
再者，車輛到達需求點之開始服務時間，
須在顧客所提出的時窗區間內。若車輛比
最早開始服務時間還早到達顧客點，則須
等待至最早開始服務時間，始可進行配送
服務；反之，若晚於最晚開始服務時間到
達顧客點，則違反時窗限制為不可行解。 
MDVRPTW 屬於 NP-hard 的問題，確
4 
optimization, MACO)求解 MDVRPTW，此
演算法為兩階段解建構法的蟻群演算法，
每一個階段即為一組蟻群，而每個蟻群擁
有各自獨立的費洛蒙矩陣與費洛蒙更新公
式。第一階段建構法則是決定如何將顧客
指派給場站，第二階段則是採用蟻群演算
法來求解 VRPTW。演算法將依兩階段的
順序重複計算，直到滿足終止條件為止。 
在本研究的 MACO 演算法中，啟發
式訊息(heuristic information)在顧客指派
法則中，以某一個顧客 i 與任一場站 k 和
被指派給場站 k 的顧客中路徑最短者為基
礎，其費洛蒙訊息即代表節線(i, k)的費洛
蒙濃度。另一方面，啟發式訊息在第二階
段則是代表顧客 i 與場站 j 或顧客 i 與顧客
j 之間的距離，而費洛蒙訊息即為節線(i, j)
的費洛蒙濃度。本研究求解 MDVRPTW
的 MACO 架構係如圖 2 所示，其一般化
流程說明如下： 
Step 1: 初始化設定： 
 a. 演算法參數設定。 
 b. 初始化費洛蒙矩陣濃度。 
 c. 令g = 1、h = 1。 
Step 2: 建構解步驟： 
 a. 指派顧客至各自場站  (式 (1) 
與式(2))。 
 b. 以ACS求解被指派的場站與顧
客所構成之VRPTW問題 。 
 c. 以區域費洛蒙更新法則(式(10))
進行 MACO 費洛蒙更新。 
 d. h = h+1 
Step 3: 若 h < b (b 為 MACO 蟻群數量)，
則至 Step 2；否則，至 Step 4。 
Step 4: 應用區域搜尋法改善螞蟻建構的
可行解。 
Step 5: 在全域費洛蒙更新法則(式(11)與
式 (12)) 中 ， 以 全 域 最 佳 解
(global-best) 以 及 迭 代 最 佳 解
(global-best)進行 MACO 費洛蒙更
新。 
Step 6: 更新全域最佳解。 
Step 7: 若已達到最大迭代數(G)則終止演
算法並輸出最佳解；否則令 g = 
g+1, h = 1，至 Step 2 繼續搜尋。
顧客指派階段
以ACS 求解 VRPTW
車輛途層建構階段
費洛蒙區域更新
局部搜尋法改善螞蟻之可行解
費洛蒙全域更新
是否所有螞蟻完成建構解 ?
是否滿足終止條件 ?
輸出最佳解
否
否
是
是
 
圖 2. MACO 整體求解架構 
3.1 第一階段－顧客指派 
在顧客指派階段，MACO 採用公式(1)
的指派法則將顧客 i 指派給場站 v。 
  

 
 
0
0maxarg
qqV
qqv ikikWk

 (1)
 
 


Wk
ikik
ikikh
ikPV 


:  (2)
其中W 為場站的集合，ik代表顧客i與場
站k之間的費洛蒙濃度，且為費洛蒙訊息ηik
為Dik的倒數，Dik如式(3)所示。 
ilkAlik
cD
k
 min

  (3)
其中 Ak 為需求節點的集合中被指派給場
站 k 的需求點集合，cil則為節點 i 與 l 之間
的距離，是決定ik 與ik 兩者相對影響程
度之參數( > 0)，q 是符合均勻分配且介
於[0, 1]之間的隨機亂數；q0 為控制參數(0 
 q0  1)，當 q  q0 時，指派給顧客 i 的最
6 
點數量， Lnn 代表由最鄰近法 (nearest 
neighbor)所得到的初始距離。 
在 ACS 的全域費洛蒙更新法則的部
分，僅有全域最佳解(Tb’)與迭代最佳解(Tl’)
被用於全域更新。其概念是透過全域最佳
解(Tb’)增加解空間的開發(exploitation)，同
時考量迭代最佳解(Tl’)擴展解空間的探索 
(exploration)，進而達到深度與廣度搜尋兩
者的平衡(Chen and Ting, 2006)。以 ACS
求解 VRPTW 的全域費洛蒙更新法則如下
述公式(8)所示： 
''1' ')'1( gij
g
ij
g
ij    (8)
其中 






otherwise          0
}''),( edge{ if      
'/)]''()''[(
'
lb
wlwbw
g
ij TorTji
LLLLL
 (9)
其中 Lb’ 與 Ll’ 分別代表全域最佳解與迭
代最佳解的路徑長度；Lw’則為目前迭代中
最差解的路徑長。若某兩節點間的路徑不
包含於全域最佳解中，亦不屬於迭代最佳
解，則此路徑費洛蒙濃度以’比率遞減，
模仿路徑上費洛蒙因蒸發而遞減。此全域
費洛蒙更新機制可使蟻群搜尋全域與迭代
最佳解兩者間的鄰域解，而不會因為僅考
量全域最佳解而太快陷入局部最佳解
(local optimum)。 
3.2.4 ACS 於 VRPTW 之求解流程 
本研究所提出的ACS於VRPTW一般
化求解流程說明如下： 
Step1: 設定參數與初始化費洛蒙矩陣，令
g’ = 1, h’ = 1。 
Step2: 利用公式(4)與(5)建構途程解，並以
公式(7)進行區域費洛蒙更新。令 h’
= h’ + 1。 
Step3: 若 h’ < b (b 為 ACS 蟻群數量)，則
至 Step 2；否則，至 Step 4。 
Step4: 應用區域搜尋法(包含 2-opt、交換
法與插入法)改善螞蟻建構之迭代
最佳解。 
Step5: 利用公式(8)與(9)以全域與迭代最
佳解進行全域費洛蒙更新。 
Step6: 更新全域最佳解。 
Step7: 若終止條件的迭代數 (G)已被滿
足，則停止演算法並輸出最佳解；
否則令 g = g+1, h = 1，至 Step 2 繼
續搜尋。 
3.3 MACO 區域搜尋法 
每次產生建構解後，MACO 採用兩種
區域搜尋法來改善建構解，第一種為兩場
站間的插入法：將一顧客點從原本的場站
的途程中移除插入至另一個場站的途程
中；第二種為兩場站間的交換法：將兩個
屬於不同場站的顧客點彼此交換至對方的
途程中。為節省計算成本，ACS 於求解
VRPTW 之區域搜尋法將只應用於迭代最
佳解上，然而 MACO 的建構解步驟中包含
ACS 演算法，計算較為耗時。因此，本研
究的 MACO 將只使用較少數量的蟻群以
節省計算時間，而對每組建構解皆進行區
域搜尋法改善，進一步提升求解品質。 
3.4 MACO 費洛蒙更新法則 
MACO 包含兩組蟻群與費洛蒙，
MACO 費洛蒙更新指的是主架構下(第一
階段)顧客指派時的費洛蒙更新，不同且獨
立於 3.2.3 節中 ACS 費洛蒙更新法則。
MACO 中，若顧客 i 指派給場站 k，則以
公式(10)進行區域費洛蒙更新。 
0
1 )1(   gikgik  (10) 
其中0    1費洛蒙遞減參數，0 為一個
極小值，代表費洛蒙矩陣初始值。 
全域費洛蒙更新步驟與 ACS 的全
域更新法則相似，根據 MACO 之全域最佳
解(Tb’)與迭代最佳解(Tl’)進行更新，以
MACO 求解 MDVRPTW 採用的全域費洛
8 
圖 3 SH-MACO-SA 之求解架構 
  
圖 4 EH-MACO-SA 之求解架構 
 
在 SH-MACO-SA(圖 2)中，MACO 先
寬廣地探索解空間，再以 SA 對目前的解
進 行 更 深 入 地 開 發 與 改 善 。 在
EH-MACO-SA(圖 3)中，每一組螞蟻所建
構的解皆透過 SA 進行改善，SA 改善後解
將在費洛蒙矩陣中留下痕跡，進一步地影
響後面迭代，每次建構解的品質。藉由
MACO 與 SA 彼此間的資訊傳遞，MACO
提供 SA 更好且更多樣的初始解，SA 亦提
供它的開發能力改善 MACO 的解，據此達
到品質更優良的解。 
 
5. 結果與討論 
本研究提出三種演算法：MACO、
SH-MACO-SA 和 EH-MACO-SA 求解
MDVRPTW 問題，演算法以 Borland C++ 
Builder 5.0 編譯器環境下撰寫，執行環境
為 Athlon XP 2500+ (1.83 Ghz) 的 CPU、
512 MB 的 RAM 和 Windows XP 的作業系
統。經參數分析後本研究提供以下各演算
法的建議參數，三種演算法皆包含的
MACO 與 ACS 共 5 組(每組 2 個)參數，除
總 迭 代 數 G 中 MACO 不 同 於
SH-MACO-SA 和 EH-MACO-SA 外，其餘
9 個參數皆相同： 
(i) MACO 蟻群數量 b=4、ACS 蟻群數量
b’= nk/5，其中 nk表指派給場站 k 的
顧客數、 
(ii) β=1 與 =4 分別代表在 MACO 與 ACS
中費洛蒙濃度對啟發式訊息之相對影
響參數、 
(iii) q0=0.5 與 q0’=0.5 分別為 MACO 與
ACS 中控制搜尋開發深度與探索廣度
相對比重參數、 
(iv) ρ=0.1 與 ρ’=0.1 為費洛蒙遞減參數、 
(v) G’ =n/5為 ACS 終止迭代數，其中 n
表顧客節點總數。而 G 為顧客指派階
段的終止迭代數，G 在 MACO 中設定
為 50，在另外兩個混合演算法設定為
25。 
另 外 ， SH-MACO-SA 及
EH-MACO-SA尚包含兩階段的SA參數共
4 組，兩個演算法在總回溫次數 R 不同外，
其餘參數設定皆相同： 
(vi) T=10 為初始溫度、 
(vii) =0.99 與’=0.99 為降溫速度參數、 
(viii) m= n2表同溫度下跌代次數和 M=100
表回溫後迭代次數，其中 n 表顧客節點總
數、 
(ix)在 SH-MACO-SA 和 EH-MACO-SA
中，總回溫次數分別為 R=25 和 R=1。 
5.1 演算法實驗結果 
本研究採用由 Cordeau et al. (1997)提
出的 20 個 MDVRPTW 的測試例題。在例
題 1-10 中，時窗的最早開始時間 ei在[60, 
10 
5.2 本研究與文獻其他演算法比較 
本研究提出的 MACO、SH-MACO-SA
與 EH-MACO-SA 三種演算法與文獻演算
法的比較如表 2 所示。比較的文獻演算法
包括 Cordeau et al.(2001)與 Cordeau et al. 
(2004) 所 提 出 的 禁 制 搜 尋 法 (Tabu 
search)，及 Polacek et al. (2004)提出變動鄰
域搜尋法 (variable neighborhood search, 
VNS)等三個演算法，分別以 TS-CLM1、
TS-CLM2、及 VNS 表示之。表 2 結果顯示
MACO 求解品質勝過 TS-CLM1，但略差於
TS-CLM2 和 VNS；其原因在於 TS-CLM2
和 VNS 兩個方法中採用「前置寬鬆時間
(forward slack times)」的概念去評估途程
所需時間，對改善求解品質有所助益。另
一方面，本研究所提出的混合演算法中，
SH-MACO-SA 可有效改善求解效果，致使
可與 TS-CLM2 and VNS 匹敵，至於
EH-MACO-SA 更可得到優於文獻的差異
百分比(gap)平均值，其平均求解品質可改
善目前文獻方法達 0.04%。 
 
表 2 本研究演算法與其他文獻演算法比較 
No. BKS TS-CLM1 TS-CLM2 VNS MACO SH-MACO-SA EH-MACO-SA
pr1 1074.12 0.92 0.00a 0.00 0.00 0.00 0.00 
pr2 1762.21 0.05 0.00 0.00 1.54 0.15 0.00 
pr3 2373.65 1.46 0.00 0.00 1.11 1.61 0.34 
pr4 2815.48 5.07 1.31 0.00 0.13 1.06 -0.48 
pr5 2993.94 4.68 1.19 0.00 0.67 0.45 -0.76 
pr6 3627.18 7.63 0.00 0.07 -1.49 0.85 -2.31 
pr7 1418.22 0.36 0.00 0.00 0.84 0.76 0.00 
pr8 2096.73 2.55 0.28 0.00 1.97 0.88 0.35 
pr9 2730.54 3.78 0.27 0.00 1.11 1.22 -0.44 
pr10 3499.56 6.22 0.16 0.00 0.78 1.15 0.10 
pr11 1005.73 2.56 0.00 0.00 0.67 0.00 0.00 
pr12 1472.76 1.88 0.39 0.00 3.11 2.11 0.15 
pr13 2001.83 0.94 0.47 0.00 1.17 0.23 0.23 
pr14 2202.08 2.07 0.00 0.61 1.18 1.07 0.05 
pr15 2465.25 1.81 1.19 0.00 4.01 2.12 1.37 
pr16 2896.03 1.65 0.17 0.00 0.01 0.86 0.23 
pr17 1236.24 1.12 0.00 0.00 2.69 0.00 0.00 
pr18 1792.61 0.93 0.00 0.20 3.72 2.06 0.62 
pr19 2285.10 1.13 0.00 0.32 0.81 0.92 -0.60 
pr20 3076.37 1.81 0.09 0.00 3.50 -0.03 0.27 
Avg. gap(%)  2.43 0.28 0.06 1.38 0.87 -0.04 
a: 粗體數值代表所有演算法中最佳結果 
 
由於本研究所採用的運算環境與文獻
相異，為比較各個演算法的求解速度，尚
須考量不同環境下運算速度的轉換。在
此，我們採用 Dongarra (2009)時提出的電
腦效能比較表，作為電腦速度轉換的比較
依據，但由於 Dongarra 的校能比較表不盡
完整，無法完全包含所有電腦種類，所以
我們採用近似的運算環境做概略估計。本
研究與文獻的運算環境比較係如表 3 所
示，其中運算速度比較單位為每秒百萬浮
點數(Mflop/s)。為比較求解時間，須依照
運算速度比率轉換後的定比時間(scaled 
time)進行比較；若令 Ta 代表 a 演算法求解
時間、Pa 為 a 演算法運算環境之速度
(Mflop/s)、而 g 代表比較基準的演算法，
則定比時間可用公式 (Ta/Tg)×(Pa/Pg) 計
算。在此採用 MACO 為比較基準，故其運
算時間為基準時間，定比時間為 1.00。從
12 
3. Chen, C. H. and Ting, C. J. (2006) "An 
Improved Ant Colony System 
Algorithm for the Vehicle Routing 
Problem", Journal of the Chinese 
Institute of Industrial Engineers, Vol. 
23, No. 2, pp. 115-126. 
4. Colorni, A., Dorigo, M. and Maniezzo, 
V. (1991) “Distributed Optimization by 
Ant Colonies,” In F. Varela and P. 
Bourgine (Editors), Proceeding of the 
European Conference on Artificial Life, 
Elsevier, Amsterdam.  
5. Cordeau, J. F., Gendreau, M. and 
Laporte, G. (1997) “A Tabu Search 
Heuristic for Periodic and Multi-Depot 
Vehicle Routing Problems,” Networks, 
Vol. 30, pp. 105-119. 
6. Cordeau, J. F., Laporte, G. and Mercier, 
A. (2001) “A Unified Tabu Search 
Heuristic for Vehicle Routing Problems 
with Time Windows,” Journal of the 
Operational Research Society, Vol. 52, 
pp. 928-936. 
7. Cordeau, J. F., Laporte, G. and Mercier, 
A. (2004) “Improved Tabu Search 
Algorithm for the Handling of Route 
Duration Constraints in Vehicle 
Routing Problems with Time 
Windows,” Journal of the Operational 
Research Society, Vol. 55, pp. 542-546. 
8. Dongarra, J. (2009) “Performance of 
Various Computers Using Standard 
Linear Equations Software,” Report 
CS-89-85, University of Tennessee. 
9. Dorigo, M. and Gambardella, L. M. 
(1997) “Ant Colony System: A 
Cooperative Learning Approach for the 
Traveling Salesman Problem,” IEEE 
Transactions on Evolutionary 
Computation, Vol. 1, 53-66. 
10. Dorigo, M., Maniezzo, V. and Colorni, 
A. (1996) “Ant System: Optimization 
by a Colony of Cooperating Agents,” 
IEEE Transactions on Systems, Man 
and Cybernetics Part B, Vol. 26, 29-41. 
11. Ellabib, I. M. (2005) “Design and 
Analysis of Ant Colony System Based 
Approaches for Vehicle Routing 
Problem with Time Windows,” Ph.D. 
dissertation, Department of Systems 
Design Engineering, University of 
Waterloo, Waterloo, Canada. 
12. Garey, M. R. and Johnson, D. S. (1979) 
Computers and Intractability: A Guide 
to the Theory of NP completeness, W.H. 
Freeman & Co., New York.  
13. Golden, B. L., Wasil, E. A. Kelly, J. P. 
and Chao, I-M. (1998) “Metaheuristic 
in Vehicle Routing,” In T. G. Crainic 
and G. Laporte, editors. Fleet 
Management and Logistics, Kluwer, 
Boston, pp. 33-56. 
14. Ho, W., Ho, G. T. S., Ji, P. and Lau, H. 
C. W. (2008) “A Hybrid Genetic 
Algorithm for the Multi-depot Vehicle 
Routing Problem,” Engineering 
Applications of Artificial Intelligence, 
Vol. 21, pp. 548–557. 
15. Kirkpatrick, S., Gelatt, C. D. and 
Vecchi, M. P. (1983) “Optimization by 
Simulated Annealing,” Science, Vol. 
220, pp. 671-680. 
16. Kolahan, F., Abachizadeh, M. and 
Soheili, S. (2006) “A Comparison 
between Ant Colony and Tabu Search 
Algorithms for Job Shop Scheduling 
with Sequence-dependent Setups”, 
WSEAS Transactions on Systems, Vol. 
12, pp. 2819-2824. 
17. Pisinger, D. and Ropke, S. (2007) “A 
General Heuristic for Vehicle Routing 
Problems,” Computers & Operations 
Research, Vol. 34, pp. 2403-2435. 
18. Polacek, M., Hartl, R. F., Doerner, K. 
 1
 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                日期：100 年 10 月 20 日 
                             
一、參加會議經過 
2011/10/13 
本人於早上九點二十分與江行全及蔡篤銘二位教授及多位博、碩士生搭乘長榮航空班機，於
中午十二點三十分左右抵達北京首都國際機場，出機場後再轉搭接送巴士至北京市內，於下
午二點多抵達下榻之飯店安置行李。 
2011/10/14 
至會場進行註冊手續並領取收據，並與大會洽詢本報告之實際時間議程。 
2011/10/15 
用完早膳後，至會場參加開幕及聽取專題演講，而本次上午有兩位演講者，分別為國立清華
大學簡禎富教授，報告關於生產半導體之決策分析與模式解決方案的應用，及來自日本的
Mooyoung Jung 教授，報告主題關於高等科學技術學校之科學學術決策。中午與多位台灣學
者共進午餐，並討論會議的進展及主辦單位的優缺點。下午則在兩個場次分別發表此次投稿
的論文，在場的與會人士相當多，並於發表後及場次結束後與多位學者討論相關的議題。 
計畫編號 NSC 100－2221－E－155－022－ 
計畫名稱 以蟻群最佳化法求解具容量及時窗限制的多物流中心與多車輛區位途程問題(II) 
出國人員
姓名 丁慶榮 
服務機構
及職稱 元智大學工管系副教授 
會議時間 
2011 年 10 月 14 日
至 
2011 年 10 月 16 日 
會議地點 中國北京 
會議名稱 
(中文) 
(英文) The 12th Asia Pacific Industrial Engineering & Management Systems 
Conference 
發表論文
題目 
(中文) 
(英文) A Hybrid Algorithm for Multi-compartment Vehicle Routing 
Problem 
附件四 
 ________________________________________ 
† : Corresponding Author. 
    
A Hybrid Algorithm for Multi-compartment Vehicle Routing Problem 
 
Wen-Chueh Yen†1, Kuo-Rui Lu2 and Ching-Jung Ting3 
Department of Industrial Engineering and Management, Yuan Ze University 
135 Yuan Tung Road, Chung-Li, Taiwan 32003  
Email: s995435@mail.yzu.edu.tw1  
s995428@mail.yzu.edu.tw2 
ietingcj@saturn.yzu.edu.tw3 
 
 
Abstract – Multi-compartment vehicle routing problem (MCVRP), an extension of the classical vehicle 
routing problem (VRP), is to serve customers with a demand for different products and transport them in 
different compartments in the vehicle with minimum total cost. MCVRP is a NP-Hard problem which is 
difficult to solve. In this research, we solve the problem using a route-first, cluster-second procedure 
embedded within a hybrid metaheuristic based on a greedy randomized adaptive search procedure (GRASP), 
and a simulated annealing (SA). We use GRASP to generate the initial solution. In the local search we use SA 
algorithm to improve the initial solution. Our proposed algorithm is tested with benchmark instances from the 
literature. The results show that the hybrid algorithm can obtain solutions with gap below 9% to the best 
known solutions. Therefore our algorithm is appropriate in solving the MCVRP. 
 
Keywords: Vehicle Routing Problem, Multi-compartment, Simulated Annealing, GRSAP 
 
 
1. INTRODUCTION 
 
The classical vehicle routing problem (VRP), first 
introduced by Dantzig and Ramser (1959), has received a 
lot of attention in both academia and practical applications. 
The VRP is to find a set of total minimum cost routes 
visiting customers such that each route starts and ends at 
the depot, each customer is visited exactly once, the vehicle 
cannot exceed its capacity and length limitation. In this 
paper, we study the multi-compartment vehicle routing 
problem (MCVRP), an extension of the VRP.  
In the MCVRP, customers’ demands are multiple 
(inhomogeneous) products which need to be kept 
segregated during delivery. Vehicles with multiple 
compartments (not necessary equal capacity for different 
compartments) are available at the depot. The objective is 
to find routes of minimum total cost to serve all customers. 
While many extensions of the classical VRP were studied 
extensively in the literature, published research regarding 
compartments is quite rare.  
Most of the published papers concern fuel distribution 
to petrol stations using tank trucks with compartments. 
Brown and Graves (1981) and Brown et al. (1987) 
developed real-time dispatching system for distribution of 
light petroleum products for a major US oil company. 
Avella et al. (2004) studied a multi-period fuel delivery 
problem where each compartment has to travel either 
completely full or empty. They proposed a greedy-like 
heuristic and a set partition-based method to solve the 
packing and routing problem. Cornillier et al. (2008) 
developed a heuristic approach for the multi-period petrol 
station replenishment problem, considering trucks with 
multiple compartments.  
Chajakis and Guignard (2003) discussed optimization 
models and proposed a Lagrangean relaxation heuristic for 
dairy deliveries in a vehicle with compartments at different 
temperatures. El Fallahi et al. (2008) studied the 
distribution of animal feed to farms, where every 
compartment is dedicated to one product to avoid 
contamination. They proposed a memetic algorithm and a 
tabu search heuristic to solve the problem. Muyldermans 
and Pang (2010) discussed the benefits of using multiple 
compartments over single compartment in waste collection. 
They apply a guided local search algorithm for solving the 
multi-compartment vehicle routing problem. Derigs et al. 
(2010) developed a solver suite with different 
neighborhood search moves for delivering customer’s 
orders which considering the incompatibility between 
products. Caramian and Guerriero (2010) proposed a 
multistart local search procedure for collecting raw milk 
from farmers.  
Our research is motivated by the demand for 
delivering frozen and dry goods to different convenient 
stores for a company. In delivering goods to convenient 
  
beneficial to apply a local search to attempt to improve 
each constructed solution. Our hybrid heuristic includes SA 
as the local search component. Figure 1 shows the overall 
flowchart of the proposed hybrid algorithm. The two phases 
are described in the following sections. 
Generate U 
Compue U by (11)
U≤ U’
Construction phase:
GRASP (X0)  
Iter =1
t =1
i =0
Xtemp=σ(Xi)
f(Xtemp)≤ f(Xi)
Xi+1=Xtemp
Xi+1=Xi
f(Xi+1)≤ f(XB)
XB =Xi+1
Yes
No
Yes
No
Yes
No
i = S -1
t = M
Iter = G
No
No
No
Yes
Yes
Yes
Initialization
Stop
Iter = Iter +1
Tt+1=αTt
t = t+1
i=i+1
Local Search:SA
Figure 1. Flowchart of the hybrid algorithm 
 
3.1 Construction Phase 
 
The construction phase generates a feasible solution 
one element at a time using one greedy randomized 
heuristic. To determine the next element to be added to a 
partial solution, the incremental cost is evaluated for each 
candidate element using a greedy function. The candidates 
are sorted in increasing cost order and one of them is 
randomly selected in a restricted candidate list (RCL). The 
probabilistic component of a GRASP is characterized by 
randomly choosing one of the best candidates in the RCL, 
but not necessarily the top candidate. There are two 
mechanisms to build the RCL: a cardinality-based and a 
value-based mechanism. In our research, we use the value-
based mechanism. 
In selecting a candidate, the RCL is associated with a 
parameter   [0, 1] and a threshold value. In our research 
we use cij(1 + ) as the threshold value when we locate at 
node j to select the next node, where node j is the closest 
node to node i among unvisited nodes. Then, all candidate 
elements (unvisited nodes) whose distance is no greater 
than the threshold value are inserted into the RCL. For 
example, at first we start from the depot(0) by scanning 
from the unvisited customers to find the nearest customer j 
with the distance c0j and the threshold value equals to c0j(1 
+ ). Those nodes that have distance away from the depot 
less than the threshold value are included in the RCL. Once 
the RCL is built, each element in the list has equal 
probability to be chosen. In our paper, we use bias 
probability that uses the roulette wheel concept by using 
the reverse the distance to compute the probability. Thus 
the shorter the distance is the higher the probability that the 
node in the RCL will be selected. 
 
3.2 Local Search Phase 
 
The simulated annealing algorithm (SA), which was 
first proposed by Metropolis et al. (1953) and later was 
applied in optimization problems by Kirkpatrick et al. 
(1983), is a local search strategy that tries to avoid local 
optimum by accepting worse solutions with some 
probability. A standard SA begins with an initial feasible 
solution and repeatedly generates a neighbor solution. 
When a neighbor solution has improvements on objective 
function value, it will be accepted. If the neighbor solution 
is worse, it may be accepted by a certain probability. The 
temperature corresponds to the probability accepting a 
worse solution.  
The parameters of our SA includes: T0 (Starting 
temperature), Tt (Temperature at state t), M (Number of 
states), S (Number of moves), σ: Move operator, X0: Initial 
solution, XB (best found solution), f(xi) (objective function 
value of Xi), α (Cooling parameter)After constructing the 
feasible solution (X0) in the construction phase, SA is used 
in the local search phase. Two move operators are 
implemented in each iteration of the neighborhood of the 
current solution: move within a route and moves between 
routes. After implement the move operator (Xtemp=σ (Xi)) if 
the objective function value of the new solution f(Xtemp) is 
less than the current one then the new solution will be 
  
instances vrpnc3, 6, 7 and 8. These instances are small and 
medium instances with up to 100 customers. However, our 
results are not as good as those in El Fallahi et al. (2008) in 
largest instances with 199 customers. 
 
Table 2.Result of Hybrid process 
Instance n BKS  Cost Gap  Time 
vrpnc1 50 524.61 524.611 0.00% 93.895
vrpnc2 75 835.26 856.689 2.57% 148.996 
vrpnc3 100 826.14 848.368 2.69% 293.858 
vrpnc4 150 1028.42 1086.97 5.69% 546.422 
vrpnc5 199 1291.29 1391.45 7.76% 854.835 
vrpnc6 50 555.43 555.43 0.00% 80.762 
vrpnc7 75 909.68 926.848 1.89% 134.737 
vrpnc8 100 865.94 886.058 2.32% 257.306 
vrpnc9 150 1162.55 1231.05 5.89% 479.202 
vrpnc10 199 1395.85 1516.31 8.63% 785.54 
vrpnc11 120 1042.11 1058.37 1.56% 431.044 
vrpnc12 100 819.56 823.417 0.47% 271.566 
vrpnc13 120 1541.14 1585.02 2.85% 347.678 
vrpnc14 100 866.37 866.95 0.07% 257.495 
Average    3.03% 355.953
 
Table 3. Comparison with El Fallahi et al. (2008) 
Instance n Cost El Fallahi (2008) Gain (%)
vrpnc1 50 524.611 524.6 0.00% 
vrpnc2 75 856.689 842.7 1.66% 
vrpnc3 100 848.368 853.2 -0.57% 
vrpnc4 150 1086.97 1070.9 1.50% 
vrpnc5 199 1391.45 1330.3 4.60% 
vrpnc6 50 555.43 559.3 -0.69% 
vrpnc7 75 926.848 928.1 -0.13% 
vrpnc8 100 886.058 892.2 -0.69% 
vrpnc9 150 1231.05 1199.86 2.60% 
vrpnc10 199 1516.31 1461.2 3.77% 
vrpnc11 120 1058.37 1044.65 1.31% 
vrpnc12 100 823.417 819.6 0.47% 
vrpnc13 120 1585.02 1541.2 2.84% 
vrpnc14 100 866.95 866.8 0.02% 
Average    1.19% 
 
We also provide the figure to illustrate the 
convergence of our hybrid algorithm in Figure 3. In the 
figure, it shows that it converge fast around 8000 iterations. 
Iterations corresponding to the number of solutions 
evaluated in the local search (SA) phases. At first, SA 
converges very fast at high temperature, but improvement 
is gradually reduced at later iterations.  
 
Figure 3. Solution convergence in instance vrpnc1 
 
5. CONCLUSION 
 
In this paper we presented a hybrid algorithm for the 
multi-compartment vehicle routing problem (MCVRP). 
The hybrid algorithm is based on the GRASP algorithm and 
the simulated annealing was embedded as the local search. 
The algorithm starts the construction phase in GRASP 
mechanism to obtain the initial solution, which is 
subsequently improved by the SA as the local search phase. 
We have tested the algorithm on 14 benchmark instances 
from the literature. The average gap is about 3.03% and 
CPU time is not fast at current experiment. Compared with 
the memetic algorithm of El Fallahi et al. (2008), we can 
reach comparative results within shorter running times. 
However, there are still some rooms for improvement.  
 
REFERENCES 
 
Avella, P., Boccia, M. and Sforza, A. (2004) Solving a 
fuel delivery problem by heuristic and exact approaches. 
European Journal of Operational Research, 152, 170-179. 
Brown, G. G. and Graves, W. G. (1981) Real-time 
dispatch of petroleum tank truck. Management Science, 27, 
17-31. 
Brown, G. G., Ellis, C. J., Graves, W. G. and Ronen, 
D. (1987) Real-time, wide area dispatch of mobile tank 
truck. Interfaces, 17, 107-120  
Caramia, M. and Guerriero, F. (2010) A milk 
collection problem with incompatibility constraints. 
Interfaces, 40, 130-143. 
Chajakis, E. and Guignard, M. (2003) Scheduling 
deliveries in vehicles with multiple compartments. Journal 
of Global Optimization, 26, 43-78. 
500
520
540
560
580
600
620
640
660
680
700
1
77
33
80
32
84
54
91
62
94
36
99
72
10
53
4
11
19
5
11
81
8
12
53
0
19
28
8
19
63
3
36
39
9
36
97
6
37
38
0
44
61
6
45
87
2
50
20
0
53
03
2
54
03
2
55
03
2
56
03
2
V
al
ue
s
Iterations
 1
 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                日期：101 年 7 月 4日 
                              
一、參加會議經過 
2012/6/24-6/25 
本人於晚上十一點十分搭乘荷蘭航空班機，經荷蘭阿姆斯特丹轉機，於 6/25 上午十一點二十
分左右抵達馬賽機場，出機場後再轉搭巴士至普羅旺斯，於下午一點多抵達下榻之飯店安置
行李。稍作休息後就先到處看看普羅旺斯，看到許多早期留下的水池噴泉，以及至旅遊資訊
中心了解附近的景點。晚上參加歡迎餐會，與其他與會專家學者交流。 
2012/6/26 
用完早膳後，搭乘巴士至會場參加開幕及聽取專題演講，為來自德國的 Prof. Stefan Voss，其
為貨櫃場站專家，之前本人曾參考其發表之論文。接著為 Poster 場次，有 8 篇論文發表，每
位作者均會與多位學者溝通意見，中午與多位學者共進午餐。下午則有一場分組討論及另一
場 Poster 場次，每組討論的題目均不同，主要是在物料處理的各議題。 
2012/6/27 
用完早膳後，搭乘巴士至會場再至半導體公司 STMicroelectronics 參訪，主要是由公司人員介
紹其廠內的自動化物料系統。下午則有第二場分組討論及另一場 Poster 場次，每組討論的題
目均不同，主要仍是在物料處理的各議題。晚上參加在馬賽舉行的晚宴，與其他的專家學者
計畫編號 NSC 100－2221－E－155－022－ 
計畫名稱 以蟻群最佳化法求解具容量及時窗限制的多物流中心與多車輛區位途程問題(II) 
出國人員
姓名 丁慶榮 
服務機構
及職稱 元智大學工管系副教授 
會議時間 2012 年 6月 25 日至 2012 年 6 月 28 日 會議地點 法國艾克斯普羅旺斯 
會議名稱 
(中文) 
(英文) 2012 International Material Handling Research Colloquium  
發表論文
題目 
(中文) 
(英文) Dock Assignment and Truck Scheduling Problems at Cross-docking 
Terminals 
附件四 
DOCK ASSIGNMENT AND TRUCK SCHEDULING PROBLEMS AT 
CROSS-DOCKING TERMINALS 
 
Ching-Jung Ting 
Department of Industrial Engineering and Management, Yuan Ze 
University, Taiwan 
ietingcj@saturn.yzu.edu.tw 
Amanda G. Rodríguez López 
Parque Tecnológico, Universidad Nacional de Ingenieria, Nicaragua 
amandaguadaluper@gmail.com 
 
 
Abstract 
In this paper, we consider the integration of dock assignment and truck 
scheduling problem at cross-docking terminals. The problem is first 
formulated as a 0-1 integer programming model. Since both dock 
assignment and truck scheduling problems are NP-hard, its integration is 
more difficult to solve. Thus we propose reduced variable neighborhood 
search (RVNS) algorithms to solve the problem. Computational 
experiments are carried out on four set of instances. The results show that 
RVNS is capable of finding good solutions in a much shorter computation 
time when it is compared with optimization solver Gurobi’s solutions. 
 
1. Introduction 
Cross-docking is the process of receiving product and shipping it out the same day or 
overnight without putting it into storage [5][6]. Therefore the storage and retrieval cost, 
the two most expensive among those five warehousing operations (receiving, sorting, 
storing, retrieving and shipping), are removed. Nowadays, cross-docking has become an 
increasingly popular distribution strategy implemented by organizations to improve 
supply chain efficiency and minimize distribution cost [30]. A December 2010 survey of 
219 logistics professionals conducted by Saddle Creeks [42] showed that more than two 
thirds (68.5%) of respondents currently cross dock and 15.1% plan to begin in the next 18 
to 24 months. Cross-docking is not a new practice, it has seen a resurgence of interest in 
recent years due to the benefit provided by the cross-docking systems, such as improving 
service levels, reducing transportation costs, etc. It requires advanced knowledge of the 
inbound product, its destination, and a system for routing the product to the proper 
and a single receiving dock. Truck scheduling problem reduces to the sequencing 
problem in such an assumption. Yu and Egbelu [41] addressed a truck scheduling 
problem where the product assignments from inbound trucks to outbound trucks are 
determined simultaneously with the docking sequences of the inbound and outbound 
trucks. Chen and Lee [14] studied the truck scheduling problem as a two-machine flow 
shop scheduling problem and showed that the problem is strongly NP-hard. Vahdani and 
Zandieh [35] presented an exhausted analysis of the performance of five metaheuristic 
algorithms for the truck scheduling problem. According to their results variable 
neighborhood search algorithm (VNS) is recommended to solve truck scheduling in 
cross-docking system problems. Boloori Arabani et al. [8] also presented five 
metaheuristics to tackle same problem. Boysen et al. [11] introduced a base model for 
scheduling trucks at cross-docking terminals, where a “one inbound dock serves one 
outbound dock” problem is considered, the problem was also solved through a stochastic 
approach by Baptiste and Maknoon [4] and through a graph based model by Larbi et al. 
[20]. Boloori Arabani et al. [7] addressed another particular case of truck scheduling 
problem with just-in-time approach that outbound trucks have a due date. Larbi et al. [21] 
considered on the outbound truck scheduling problem that outbound trucks are available 
at any time and preemption is allowed.  
McWilliams and his coworkers conducted studies devoted to the parcel hub 
scheduling problem (PHSP) involving the scheduling of a set of inbound trailers loaded 
with a batch of heterogeneous parcels to a set of shipping docks, with the objective of 
minimizing the time span of the transfer operation. McWilliams et al. [24] proposed a 
simulation based scheduling algorithm utilizing a genetic algorithm (GA) to guide the 
search. It was assumed that the batch sizes of the inbound trucks are equal, while this 
assumption was relaxed in McWilliams et al. [25]. McWilliams et al. [25] proposed a 
simulation-based scheduling approach with an embedded genetic algorithm to solve the 
problem. To reduce the demand for simulation evaluations, McWilliams [26] proposed a 
minimax programming model resembling a multi-knapsack problem, and used a genetic 
algorithm to solve the large-scale PHSP. McWilliams [27] developed local search and 
simulated annealing algorithms and showed that both algorithms outperformed GA. The 
results show that the new approach is superior to the GA. 
Miao et al. [28] considered a truck dock assignment problem with an operational 
time constraint in cross-dockings where the number of trucks exceeds the number of 
docks available. Wang and Regan [37] compared the performance of different strategies 
for processing trucks at a cross-docking facility through dynamic simulation models. 
Boysen [10] also worked in a real world scheduling setting for the food industry 
considering zero-inventory cross-dockings in the food industry. Chen and Song [15] 
extended Chen and Lee [14] to the two-stage hybrid cross-docking scheduling problem 
which at least one stage has more than one parallel machine. Li et al. [22] considered a 
multiple dock cross-docking where all docks are the same and could be used either as 
inbound or outbound, the problem is formulated as a parallel machine scheduling 
problem, where there is no differentiation between inbound and outbound operations. 
1. One side of the dock is exclusively designated to inbound trucks and the other side to 
outbound trucks. 
2. The number of inbound/outbound trucks is larger than the number of 
inbound/outbound docks. Such a configuration is quite common and realistic in the 
real world. 
3. No preemption of trucks is allowed. Once docked, trucks will not leave the dock until 
their loading or unloading operations is finished.  
4. Unit loading time for a unit pallet is identical to any outbound truck, same for the unit 
unloading time for any inbound truck.  
5. Transshipment time between docks depends on the distance between the inbound 
dock and the outbound dock. That is, the transshipment time between each pair of 
docks is given. 
6. Each outbound truck has a predetermined departure time.  
7. The flow between inbound and outbound trucks is known. The flow is dedicated to a 
specific outbound truck and is not interchangeable. 
8. Each outbound dock is capable to storage the outbound truck’s freight. 
Based on these assumptions, a mixed integer programming will be formulated to 
minimize the total delay times by considering the scheduling and assignment on both 
inbound and outbound trucks simultaneously. Since the dock assignment is a NP-hard 
problem, consider both scheduling and assignment problem is NP-hard. An exact solution 
approach is difficult to find solution within reasonable time for real world large problem. 
We propose a reduced variable neighborhood search algorithm to solve this problem. 
 
2.2 Mathematical Formulation 
 
Following notations are used for the model. 
Input 
ai: Arrival time of inbound truck i 
bk: The starting available time of receiving dock k 
d: Dummy last truck 
fij: Flow between inbound truck i and outbound truck j 
gl: The starting available time of shipping dock l 
I: Set of inbound trucks  
J: Set of outbound trucks 
K: Set of inbound docks 
L: Set of outbound docks 
M: A large number 
o: Dummy starting truck 
pj: Planned departure time of outbound truck j 
Si: Associated outbound trucks to inbound truck i 
Sj: Associated inbound trucks to outbound truck j 
k
k
o
k
o bFc  Kk  (13)
l
l
o
l
o gEh  Ll  (14)
i
k
i ac  KkIi  ,  (15)



jSi
ij
l
j
l
j fhE   LlJj  ,  (16)
MyEh ljn
l
j
l
n )1(   LldoJnj  },{}{,  (17)
ij
kl
ijkl
k
i
l
j fztcE )()(    LlKkSiJj j  ,,,  (18)
0, kiki Fc  KkIi  ,  (19)
0, lhlj Eh  LlJj  ,  (20)
1,0kimx  KkImi  ,,  (21)
1,0ljny  LlJnj  ,,  (22)
1,0klijz  LlKkJjIi  ,,,  (23)
The objective function (1) sums up the delay time for all outbound trucks and the 
waiting time of all inbound trucks. Constraint (2) ensures the flow conservation for all the 
inbound trucks. Constraint (3) states that each inbound truck must be assigned to exactly 
one receiving dock k. Since a dock can be left unused, constraint (4) enforces that every 
receiving dock serves at most one truck at a time. Constraint (5) ensures the flow 
conservation for all the outbound trucks. Constraint (6) guarantees that each outbound 
truck is assigned to exactly one shipping dock l. Constraint (7) enforces that every 
shipping dock serves at most one truck at a time. Constraints (8), (9) and (10) jointly 
define variable z which represent the logic relationship among x and y. zijkl is set to 1 if 
both inbound truck i is assigned to receiving dock k and outbound truck j is assigned to 
shipping dock l. Constraint (11)-(12) make a valid sequence for arriving and departing 
times for the inbound trucks assigned to the same dock. Constraints (13) and (14) ensure 
the start and end time of the first truck at each dock should be larger than the dock’s 
starting available time. Constraints (15) states that the inbound truck can only be served 
after its arrival time. Constraints (16)-(17) function in a similar manner for the outbound 
trucks. Constraint (18) connects the departure time for an outbound truck to the arrival 
time of an inbound truck if a flow must be transferred from that inbound truck. 
Constraints (19)-(20) are the nonnegativity constraints. Constraints (21)-(23) are the 
integrality constraints.  
 
3. Reduced Variable Neighborhood Search Algorithm 
 
Variable neighborhood search (VNS) algorithm initiated by Mladenović and Hansen [29] 
is a top-level methodology for solving combinatorial and global optimization problems. 
Its basic idea is to successively explore a set of predefined multi-neighborhoods to 
truck to a dock and a position in the sequence to be served. Docks are separated from 
each other by a zero. It is important to notice that in a feasible solution each dock serves 
at least one truck, therefore the solution cannot contain a zero in the beginning or at the 
end of the permutation, neither have two zeros in a row. The trucks assigned to the same 
dock will be served based on the sequence in the solution. 
Figure 1 shows an example for six trucks and 3 docks. The solution represents that 
trucks 1 and 2 are assigned to dock 1 and truck 1 precedes truck 2. Trucks 4 and 6 are 
assigned to dock 2 and truck 4 immediately precedes truck 6. Trucks 3 and 5 are assigned 
to dock 3 and truck 5 will be served right after truck 3 is processed. 
 
 
Figure 1. Scheme of a solution 
 
3.2 Neighborhood Structures 
 
In a local search algorithm a neighborhood structure is designed by introducing moves 
from one solution to another. The neighborhood structures with which the neighboring 
solutions are determined to move to is one of the key elements of algorithms that use 
neighborhood structures. Therefore the performance of the algorithm significantly 
depends on the efficiency of the neighborhood structures. For permutations representing 
sequencing and scheduling problems position-based neighborhoods are largely used. Two 
position-based neighborhood structures were selected: swap and modified insert. In the 
case one of the neighborhood structures is about to make a violation, then the move is 
forbidden and a new neighbor out of the same neighborhood structure is generated. 
When applying a neighborhood structure two possible effects in the permutation can 
be seen, one is if the movement involve merely trucks (not dock separators), then the 
dock and/or position trucks occupy are interchanged, in this case, any change in the 
number of trucks a dock serves is performed. On the other hand, if the movement 
involves trucks and dock separators, then the number of trucks a dock serve can be 
decreased or incremented, having the possibility of having some docks idle meanwhile 
others are busy. 
 
3.2.1 Swap  
 
In the swap operator two random positions are generated, and then the corresponding 
trucks (or docks separators) associated to those positions are exchanged. This 
neighborhood structure is illustrated in figure 2. 
 
 
Figure 2. Swap operator 
Before 
After
respective, and c and d represent the number of inbound docks and outbound docks, 
respectively. The number of inbound and outbound trucks ranges from 8 to 48, while the 
number of receiving and shipping docks ranges from 4 to 16. The number of iterations for 
the RVNS is 10000 and the number of neighborhoods is 2.  
Table 1-4 show the results for three different RVNS algorithms in different sizes of 
instances. Table 1 presents the results for the smallest size instances. The column 
headings are the instance number n, the optimal solution and CPU time in seconds of 
Gurobi, the best result and average CPU time for each RVNS algorithm out of 30 runs. 
All three RVNS can find 19 optimal solutions out of 20 instances. RVNS2 provide the 
best average solutions. The computational times are much smaller than the time used by 
Gurobi. This indicates that the RVNS can be an efficient and effective algorithm to find 
good solutions. 
 
Table 1. Results for the 8844 
n 
Gurobi  RVNS1 RVNS2 RVNS3 
f(x) CPU (Sec) 
 Best CPU (Sec) Best 
CPU 
(Sec) Best 
CPU 
(Sec)
1 310 11946  315 0.11 310 0.19 315 0.09 
2 456 10438  456 0.11 456 0.19 456 0.09 
3 489 11836  489 0.13 489 0.16 489 0.09 
4 268 10655  268 0.08 268 0.20 268 0.09 
5 352 8779  352 0.09 352 0.19 352 0.11 
6 439 8319  439 0.09 439 0.17 439 0.09 
7 436 10432  436 0.09 436 0.19 436 0.09 
8 431 8167  431 0.09 431 0.17 431 0.09 
9 463 9201  463 0.11 463 0.20 463 0.09 
10 377 10288  377 0.13 377 0.2 377 0.09 
11 537 8153  537 0.13 541 0.16 537 0.08 
12 471 10525  471 0.09 471 0.19 471 0.09 
13 827 11635  827 0.09 827 0.19 827 0.09 
14 878 8115  878 0.09 878 0.20 878 0.08 
15 282 8379  282 0.09 282 0.22 282 0.09 
16 579 8290  579 0.09 579 0.19 579 0.09 
17 535 9449  535 0.11 535 0.19 535 0.09 
18 367 11459  367 0.11 367 0.17 367 0.09 
19 528 9969  528 0.11 528 0.19 528 0.09 
20 305 10316  305 0.09 305 0.20 305 0.08 
Avg 466.50 9817.55  466.75 0.10 466.70 0.19 466.75 0.09 
test was performed among the three frameworks (RVNS1 vs. RVNS2, RVNS1 vs. 
RVNS3, and RVNS2 vs. RVNS3). Where the null hypothesis (H0) states that there is no 
significant difference between the means of the samples under comparison. It is 
important to notice that H0 is accepted when the P-Value is greater or equal than 0.05. 
 
Table 3. Results for the 32321616 
n 
RVNS1 RVNS2 RVNS3 
Best CPU (Sec) Best 
CPU 
(Sec) Best 
CPU 
(Sec) 
1 1583 0.75 1601 1.45 1591 0.75 
2 1202 0.78 1201 1.47 1198 0.77 
3 2560 0.80 2560 1.70 2560 0.77 
4 2200 0.69 2187 1.28 2198 0.77 
5 1574 0.70 1574 1.47 1579 0.72 
6 1922 0.70 1926 1.45 1923 0.72 
7 1608 0.69 1605 1.38 1605 0.72 
8 18310 0.80 18310 1.61 18309 0.84 
9 1743 0.75 1743 1.50 1743 0.77 
10 1813 0.75 1812 1.36 1805 0.69 
Avg. 3451.50 0.74 3451.90 1.47 3451.10 0.75 
 
 
Table 4. Results for the 48481616 
n 
RVNS1 RVNS2 RVNS3 
Best CPU (Sec) Best 
CPU 
(Sec) Best 
CPU 
(Sec) 
1 3924 1.03 3889 2.28 3948 1.00 
2 3792 1.05 3718 2.03 3800 1.06 
3 3329 1.06 3255 2.02 3306 1.03 
4 4756 1.03 4656 1.98 4712 1.03 
5 4461 1.14 4407 1.95 4458 1.05 
6 3417 1.05 3378 2.31 3409 1.09 
7 3887 1.06 3781 2.16 3859 1.08 
8 5306 1.14 5147 2.00 5312 1.03 
9 3665 1.08 3621 2.23 3648 1.08 
10 4734 1.20 4671 2.20 4740 1.06 
Avg. 4127.10 1.08 4052.30 2.12 4119.20 1.05 
[2] Alpan, G., Ladier, A. L., Larbi, R. and Penz, B., “Heuristic Solutions for 
Transshipment Problems in a Multiple Door Cross Docking Warehouse,” Computers 
& Industrial Engineering, 61, 402-408 (2011). 
[3] Alpan, G., Larbi, R. and Penz, B., “A Bounded Dynamic Programming Approach to 
Schedule Operations in a Cross Docking Platform,” Computers & Industrial 
Engineering, 60, 385-396 (2010). 
[4] Baptise, P. and Maknoon M. Y., “Cross-docking: Scheduling of Incoming and 
Outgoing Semi Trailers,” 19th International Conference on Production Research-
ICPR, (2009). 
[5] Bartholdi, J. J. and Gue, K. R., “Reducing Labor Cost in an LTL Crossdocking 
Terminal,” Operations Research, 48, 823-832 (2000). 
[6] Bartholdi, J. J. and Gue, K. R., “The Best Shape for a Crossdock,” Transportation 
Science, 38, 235-244 (2004). 
[7] Boloori Arabani, A. R., Fatemi Ghomi, S. M. T. and Zandieh, M., “A Multi-criteria 
Cross-docking Scheduling with Just-in-time Approach,” International Journal of 
Advanced Manufacturing Technology, 49, 741-756 (2010). 
[8] Boloori Arabani, A. R., Fatemi Ghomi, S. M. T. and Zandieh, M., “Meta-heuristics 
Implementation for Scheduling of Trucks in a Cross-docking System with 
Temporary Storage,” Expert Systems with Applications, 38, 1964-1979 (2011). 
[9] Boysen, N., Fliedner, M. and Scholl A., “Scheduling Inbound and Outbound Trucks 
at Cross Docking Terminals,” OR Spectrum, 32, 135-161 (2010). 
[10] Boysen, N., “Truck Scheduling at Zero-inventory Cross Docking Terminals,” 
Computers & Operations Research, 37, 32-41 (2009). 
[11] Boysen, N. and Fliedner, M., “Cross Dock Scheduling: Classification, Literature 
Review and Research Agenda. Omega, 38, 413-422 (2009).   
[12] Bozer, Y. A. and Carlo, H. J., “Optimizing Inbound and Outbound Door 
Assignments in Less-than-truckload Crossdocks,” IIE Transactions, 40, 1007-1018 
(2008). 
[13] Carlo, H. J., Door Assignment and Sequencing Problems in Crossdocks and 
Container Terminals, Ph.D. dissertation, Industrial and Operations Engineering 
Department, University of Michigan, MI, USA (2007). 
[14] Chen, F. and Lee, C. Y., “Minimizing the Makespan in a Two-machine Cross-
docking Flow Shop Problem,” European Journal of Operational Research, 193, 59-
72 (2009). 
[15] Chen, F. and Song, K., “Minimizing Makespan in Two-stage Hybrid Cross Docking 
Scheduling Problem,” Computers & Operations Research, 36, 2066-2073 (2009). 
[16] Cohen, Y. and Keren, B., “Trailer to Dock Assignment in a Synchronous Cross-
dock Operation,” International Journal of Logistics System and Management, 5, 
574-590 (2009). 
[17] Forouharfard, S. and Zandieh, M., “An Imperialist Competitive Algorithm to 
Schedule of Receiving and Shipping Trucks in Cross-docking Systems,” 
[32] Stalk, G., Evans, P. and Shulman, L. E., “Competing on Capability: The New Rules 
of Corporate Strategy,” Harvard Business Review, 70, 57-69 (1992). 
[33] Tsui, L. Y. and Chang, C. H., “A Microcomputer Based Decision Support Tool for 
Assigning Dock Doors in Freight Yards,” Computers & Industrial Engineering, 19, 
309-312 (1990). 
[34] Tsui, L. Y. and Chang, C. H., “An Optimal Solution to a Dock Door Assignment 
Problem,” Computers & Industrial Engineering, 23, 283-286 (1992). 
[35] Vahdani, B. and Zandieh, M., “Scheduling Trucks in Cross-docking Systems: 
Robust Meta-heuristics,” Computers & Industrial Engineering, 58, 12-24 (2010). 
[36] Van Belle, J., Valckenaers, P. and Cattrysse, D., “Cross-docking: State of the Art,” 
Omega, 40, 827-846 (2012). 
[37] Wang, J. F and Regan, A., “Real-time Trailer Scheduling for Crossdock Operations,” 
Transportation Journal, 47, 5-20 (2008). 
[38] Witt, C. E., “Crossdocking: Concepts Demand Choice,” Material Handling 
Engineering, 53, 44-49 (1998). 
[39] Yu, F. T., Door Allocation Problem at Intermediate Consolidation Terminals of 
Less-than-Truckload Motor Carriers, Ph.D dissertation, Industrial and Operations 
Engineering Department, University of Michigan, MI, USA (2004). 
[40] Yu, V. F., Sharma, D. and Murty, K. G., “Door Allocations to Origins and 
Destinations at Less-than-truckload Trucking Terminals,” Journal of Industrial and 
Systems Engineering, 2, 1-15 (2008). 
[41] Yu, W. and Egbelu, P. J., “Scheduling of Inbound and Outbound Trucks in Cross 
Docking Systems with Temporary Storage,” European Journal of Operational 
Research, 184, 377-396 (2008). 
[42] 2011 Cross-Docking Trends Report. Whitepaper series. Saddle Creek Corporation. 
 
100年度專題研究計畫研究成果彙整表 
計畫主持人：丁慶榮 計畫編號：100-2221-E-155-022- 
計畫名稱：以蟻群最佳化法求解具容量及時窗限制的多物流中心與多車輛區位途程問題(II) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 1 1 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 4 4 100%  
博士生 1 1 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
