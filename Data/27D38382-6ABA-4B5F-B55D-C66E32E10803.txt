報告內容 
1.   Introduction 
Diffie & Hellman [1] in 1976 proposed their key exchange protocol. The security of this protocol 
depends on the discrete logarithm problem. Like the factoring problem, the discrete logarithm problem is 
believed to be difficult and also to be the hard direction of a one-way function. These two are the basis 
for public cryptography. The purpose of the algorithm lets two parties that have no prior knowledge of each 
other to jointly establish a shared secret key over an insecure communications channel. This key can then be 
used to encrypt subsequent communications using a symmetric key cipher.  
 
Public-key cryptography based on elliptic curve over finite fields was proposed by Miller and Koblitz in 
1985. Elliptic curves over finite fields have been used to implement the Diffie-Hellman key passing scheme 
and also the elliptic curve variant of the Digital Signature Algorithm. The security of these cryptosystems 
relies on the difficulty of solving the elliptic curve discrete logarithm problem. If P is a point with order m 
on an elliptic curve, and Q is some other point on the same curve, then the elliptic curve discrete logarithm 
problem is to determine an l such that Q = lP where l is an integer and 0 ≤ l≤ m-1. If this problem can be 
solved efficiently, then elliptic curve based cryptosystems can be broken efficiently. 
 
Feynman [2] first proposed bio-molecular computations in 1961, but his idea was not experimented with 
for several decades. In 1994 Adleman [3] succeeded in solving an instance of the Hamiltonian path problem 
in a test tube by handling DNA strands. Lipton [4] demonstrated that the Adleman techniques could be used 
to solve the satisfiability problem (the NP-complete problem). Adleman and his co-authors [5] proposed 
sticker for enhancing the error rate of hybridization. 
 
Through advances in molecular biology [6], it is now possible to produce roughly 1018 DNA strands that 
fit in a test tube. Those 1018 DNA strands can also be applied to represent1018 bits of information. In the 
future (perhaps after many years) if biological operations can be applied to deal with a tube with 1018 DNA 
strands and they are run without errors, then 1018 bits of information can simultaneously be correctly 
processed. Hence, in the future, it is possible that bio-molecular computation can provide a huge amount of 
parallelism for dealing with many computationally- intensive problems in the real world. 
 
The fastest supercomputers can execute approximately 1012 integer operations per second. This implies 
that (128 × 1012) bits of information can be simultaneously processed in a second. The fastest 
supercomputers can process (128 × 1015) bits of information in 1000 seconds. The extract operation is one of 
basic biological operations of the longest execution time. It could be approximately done in 1000 seconds 
[10]. In the future (perhaps after many years) if an extract operation can be used to deal with a tube with 1018 
DNA strands and it is run without errors, then 1018 bits of information can simultaneously be correctly 
processed in 1000 seconds. If it becomes true in the future, then basic biological operations will perhaps be 
faster than the fastest super computer in the future. In [9], it was pointed out that storing information in 
molecules of DNA allows for an information density of approximately 1 bit per cubic nm (nanometer). 
Videotape is a kind of traditional storage media and its information density is approximately 1 bit per 1012 
cubic nanometers. This implies that an information density in molecules of DNA is better than that of 
 
Fig.1. Bio-molecular logic computing model 
3.   Bio-molecular Logic Computing Solution for NP Problem: Discrete Logarithm 
3.1.    Introduction of Discrete Logarithm Problem 
For any integer d and any positive integer n, there are unique integers s and r such that 0 ≤ r < n and d = 
s ∗ n + r. The value s = d / n is the quotient of the division. The value r = d mod n is the remainder of the 
division. We have that n | d if and only if d mod n = 0. Given a well-defined notion of the remainder one 
integer when divided by another, it is convenient to provide special notation to indicate equality of 
remainders. If (d mod n) = (b mod n), we write d ≡ b (mod n) and say that d is equivalent to b, modulo n. In 
other words, d ≡ b (mod n) if d and b have the same remainder divided by n. The integer can be divided into 
n equivalence classes according to their remainders modulo n. The equivalence class modulo n containing an 
integer d is [d]n = {d + h * n, where h is an integer}. The set of all such equivalence classes is Zn = {[d]n : 0 
≤ d ≤ n − 1}. One often sees the definition Zn = {0, 1, … n − 1} [7]. 
The greatest common divisor of two integers d and n, not both zero, is the largest of the common 
divisors of d and n; it is denoted gcd(d, n). Two integers d and n are said to be relatively prime if their only 
common divisor is 1, that is, if gcd(d, n) = 1. Because the equivalence class of two integers uniquely 
determines the equivalence class of their product, thus, we define multiplication modulo n, denoted *n, as 
follows: [d]n *n [h]n = [d * h]n. Using the definition of multiplication modulo n, we define the multiplicative 
group modulo n as (Zn*, *n), where Zn* = {[d]n ∈ Zn: gcd(d, n) = 1}. 
 
Just as it is natural to consider the multiples of a given element d, modulo n, it is often natural to 
consider the sequence of power of d, modulo n, where d ∈ Zn: d0, d1, d2, …, modulo n. Indexing from 0, its 
value in this sequence is d0 mod n = 1, and the ith value is di mod n. We denote <d> as the subgroup of Zn* 
generated by d, and we also denote ordn(d) (the “order of d, modulo n”) as the order of d in Zn*. For example, 
<2> = {1, 2, 4} in Z7*, and ord7(2) = 3. 
 
If ordn(M) is equal to the number of elements in Zn*, then every element in Zn* is a power of M, modulo 
n, and we say that M is a primitive root or a generator of Zn* [7]. For example, there is a primitive root, 
modulo 7 and <3> = {1, 3, 2, 6, 4, 5}. If Zn* possesses a primitive root, we say that the group Zn* is cyclic. If 
M is a primitive root of Zn* and C is any element of Zn*, then there exists an e such that Me ≡ C (mod n). 
This e is called the discrete logarithm of C, modulo n, to the base M. No method in a reasonable amount of 
(5a) ModularMultiplication(T0, Tn, (2 * (k − 1 − j) )*  
       (4 * k + 1) + 1, 2 * (k − j), C, C). 
(5b) T0 = +(T0, ej1) and T1 = −(T0, ej1). 
(5c) ModularMultiplication(T0, Tn, (2 * (k − 1 − j)+ 1)  
       * (4 * k + 1) + 1, 2 * (k − j) + 1, C, M). 
(5d) For r = 0 to 4 * k 
(5e) ReservedValue(T1, (2 * (k − 1 − j) + 1) * (4  
       * k + 1) + r). 
EndFor 
(5f) AssignmentOperator(T1, (2 * (k − 1 − j) + 1) * (4  
       * k + 1) + 1 + 4 * k, 2 * (k − j) + 1). 
(5g) T0 = ∪(T0, T1). 
EndFor 
EndAlgorithmOfDiscreteLogarithm 
Fig.4. Algorithm of Discrete Logarithm 
Theorem 1: From those steps in Algorithm of Discrete Logarithm, the problem of discrete logarithm can 
be solved. 
Proof:  
From the execution of Step (0), tubes T0, Tθ, Tn, and T1 are set to empty tubes. On the execution of Step 
(1), it calls Init(T0, k) to construct solution space for 2k possible discrete logarithms. This means that tube T0 
includes strands encoding 2k possible discrete logarithms. Next, the execution of Step (2) calls 
SelectDiscreteLogarithm(T0, Tθ) to perform selection of legal discrete logarithms with its range is from 0 to 
n − 2. This implies that those legal discrete logarithms are encoded in tube T0. On the execution of Step (3), 
it calls MakeValue(Tn) to encode a prime number, n. This indicates that tube Tn contains a strand encoding 
it. Next, the execution of Step (4) calls InitialValue(T0) to finish the execution of Step (2) in the procedure, 
Encryption(M, e, n). This is to say that the initial value for C is set to one. 
Step (5) is a loop and is mainly used to finish the function of the only loop (Step (3)) in the procedure, 
Encryption(M, e, n). Next, the first execution of Step (5a) calls ModularMultiplication(T0, Tn, (2 * (k − 1 
− j) )* (4 * k + 1) + 1, 2 * (k − j), C, C) to perform Step (3a) in Encryption(M, e, n). On the first execution 
of Step (5b), it employs the extract operation to form two tubes: T0 and T1. The first tube T0 includes all of 
the strands that have ej = 1. The second tube T1 consists of all of the strands that have ej = 0. This indicates 
that the execution of the step finishes Step (3b) in Encryption(M, e, n). Because the jth bit of e encoded in 
tube T0 is one, next, the first execution of Step (5c) calls ModularMultiplication(T0, Tn, (2 * (k − 1 − j)+ 1) 
* (4 * k + 1) + 1, 2 * (k − j) + 1, C, M) to perform Step (3c) in Encryption(M, e, n). Since the jth bit of e 
encoded in tube T1 is zero, Step (5d) is the loop and is mainly used to maintain the consistency of the 
intermediate value for Y. On the first execution of Step (5e), it calls ReservedValue(T1, (2 * (k − 1 − j) + 1) 
* (4 * k + 1) + r) to copy the current intermediate value of Y to the next intermediate value of Y. Repeat to 
execute Step (5e) until the value of r reaches (4 * k). Next, the first execution of Step (5f) calls 
AssignmentOperator(T1, (2 * (k − 1 − j) + 1) * (4 * k + 1) + 1 + 4 * k, 2 * (k − j) + 1) to perform updating 
of the value for C. Because the jth bit of e encoded in tube T1 is zero, the updated value of C is still equal to 
the previous value. 
On the first execution of Step (5g), it uses the merge operation to pour tube T1 into T0. Repeat execution 
other represents the value “1” for nj. For the sake of convenience in our presentation, assume that nj 1 
denotes the value of nj to be 1 and nj 0 defines the value of nj to be 0. The following algorithm, 
MakeValue(Tn), is proposed to construct a DNA strand for encoding n. 
Procedure MakeValue(Tn, k) 
(1) For j = 0 to k − 1 
(1a) Append-head(Tn, n j). 
EndFor 
EndProcedure 
Fig.6. Procedure MakeValue(Tn, k) 
3.6.   Solution Space for a Primitive Root M and the Result of an Exponential Modular Operation C 
Suppose that the length of a primitive root M for Zn* is k bits. Also assume that M is represented as a 
k-bit binary number, mk − 1 … m0, where the value of each bit mj is either 1 or 0 for 0 ≤ j ≤ k − 1. The bits mk − 
1 and m1 represent the most significant bit and the least significant bit for M, respectively. From [9, 10], for 
every bit mj, two distinct 15 base value sequences are designed. One represents the value “0” for mj and the 
other represents the value “1” for mj. For the sake of convenience in our presentation, assume that mj 1 
denotes the value of mj to be 1 and mj 0 defines the value of mj to be 0. 
Assume that the length of C, the result of an exponential modular operation denoted in Subsection A, is k 
bits. From the procedure Encryption(M, e, n), C is finally obtained after at most updating (2 * k + 1) times 
of the value for C. Therefore, suppose that C is represented as a k-bit binary number, ca, k − 1 … ca, 0, where 
the value of each bit ca, j is either 1 or 0 for 1 ≤ a ≤ (2 * k + 1) and 0 ≤ j ≤ k − 1. The bits, ca, k − 1 and ca, 0, 
represent the most significant bit and the least significant bit for C, respectively. The first k-bit binary 
number, c1, k − 1 … c1, 0, is used to represent the initial value to C. The last k-bit binary number, c(2 * k + 1), k − 1 
… c(2 * k + 1), 0, is used to represent the final result of C. For other k-bit binary numbers, they are applied to 
represent the intermediate computed form of C. From [9, 10], for every bit ca, j, two distinct 15 base value 
sequences were designed. One represents the value “0” for ca, j and the other represents the value “1” for ca, j. 
For the sake of convenience in our presentation, assume that ca, j 1 denotes the value of ca, j to be 1 and ca, j 0 
defines the value of ca, j to be 0. The following algorithm is used to construct solution space for the initial 
value for C and the primitive root M. 
Procedure InitialValue(T0, k) 
(1) For j = 0 to k − 1 
(1a) Append-head(T0, mj). 
EndFor 
(2) Append-head(T0, c1, 0 1). 
(3) For j = 1 to k − 1 
(3a) Append-head(T0, c1, j 0). 
EndFor 
EndProcedure 
Fig.7. Procedure InitialValue(T0, k) 
3.7.   Algorithm of a Modular Multiplication 
The procedure, Encryption(M, e, n), denoted in Subsection A, is used to finish computation of an 
exponential modular operation. In the procedure, it uses successive operations of square and multiplication 
− 1. The bits, yf, k − 1 and yf, 0, represent the most significant bit and the least significant bit for Y, respectively. 
If updating of fth time for Y is finished through an adder, then two binary numbers yf, k − 1 … yf, 0 and yf + 1, k − 1 
… yf + 1, 0 represent the augend and the sum of the fth updating, respectively. If updating of fth time for Y is 
finished through a subtractor, then two binary numbers yf, k − 1 … yf, 0 and yf + 1, k − 1 … yf + 1, 0 represent the 
minuend and the difference of the fth updating, respectively. 
 
From [9, 10], for every bit yf, g, two distinct 15 base value sequences were designed. One represents the 
value “0” for yf, g and the other represents the value “1” for yf, g. For the sake of convenience in our 
presentation, assume that yf, g 1 denotes the value of yf, g to be 1 and yf, g 0 defines the value of yf, g to be 0. The 
following algorithm is used to construct solution space for the initial value to computation of a modular 
multiplication. 
Procedure InitialSet(T0, f) 
(1) For g = 0 to k − 1 
(1a) Append-head(T0, yf, g 0). 
EndFor 
EndProcedure 
Fig.9. Procedure InitialSet(T0, f) 
3.9.   Reserving the Result to Intermediate Computation of a Modular Multiplication 
The procedure, Encryption(M, e, n), denoted in Subsection A, is applied to perform computation of an 
exponential modular operation. The following DNA-based algorithm, ReservedValue(T2, f), is employed to 
reserve the result to intermediate computation of a modular multiplication. 
Procedure ReservedValue(T2, f) 
(1) For j = 0 to k − 1 
(1a) T3 = +(T2, yf, j1) and T4 = −(T2, yf, j1). 
(1b) Append-head(T3, yf + 1, j 1). 
(1c) Append-head(T4, yf + 1, j 0). 
(1d) T2 = ∪(T3, T4). 
EndFor 
EndProcedure 
Fig.10. Procedure ReservedValue(T2, f) 
3.10.   Construction of Assignment Operator 
An assignment operator is an instruction of the first operand of k bits and the second operand of k bits 
that the value of the first operand is set to the value of the second operand. The following algorithm is 
applied to construct an assignment operator. This implies that the assignment operator can be used to update 
the value of C denoted in Subsection G. The third parameter, a, in the algorithm is used to represent the ath 
updating for C. 
Procedure AssignmentOperator(T0, f, a) 
 (1) For j = 0 to k − 1 
(1a) T1 = +(T0, yf, j1) and T2 = −(T0, yf, j1). 
(1b) Append-head(T1, ca, j1). 
(1c) Append-head(T2, ca, j0). 
 4.   Bio-molecular Solution for NP Problem: Elliptic Curve Discrete Logarithm Over GF(2n) 
 
4.1.   Introduction of Elliptic Curve Public-Key Cryptosystem Over GF(2n) 
A elliptic curve is defined to be the set of solutions (x,y)∈GF(2n) ×GF(2n) to the equation 
y2 + xy = x3 + ax2 +b  
where a,b∈ GF(2n) and b ≠  0, together with the point on the curve at infinity (with homogeneous 
coordinates (0, 0)), O. The points on an elliptic curve form an abelian group under a well defined group 
operation. The identity of the group operation is the point O. For P = (x1, y1) a point on the curve, we 
define –P to be(x1, y1+x1), so P + (–P) = (–P) + P = O. Now suppose P and Q are not O, and P ≠  –Q. Let P 
be as above and Q = (x2, y2), then P + Q = (x3, y3), where 
x3 = μ2 + μ + x1 + x2 + a  
y3 = μ(x1 + x3) + x3 + y1  
and 
    μ
⎪⎪⎩
⎪⎪⎨
⎧
=+
≠+
+
=
QPif
x
ax
QPif
xx
yy
1
2
1
12
12
 
In this section, let E be an elliptic curve defined over GF(2n), and let G∈E be a fixed and publicly known 
point. The receiver B chooses a randomly and publishes the key aG, while keeping a itself secret. To 
transmit a message m to B, user A chooses a random integer k and sends the pair of points (kG, Pm+k(aG)). 
To read the message, B multiplies the first point in the pair by his secret a, and then subtracts the result from 
the second point in the pair. So, if a breaker can compute a from public key G and aG, he can decrypt any 
encryption sent to B. 
 
4.2.   Breaking the Elliptic Curve Cryptosystem 
 
We have constructed the algorithm above for parallel computing the point of the sum of two points. 
Then we can solve elliptic curve discrete logarithm problem as follows: consider point P and Q are given, 
and l is what we want to get which match Q = lP. First, we amplify P into two tubes and add P in one tube. 
Check if 2P is equal to Q: if not, note down the value of 2P and pour two tubes together. Then amplify the 
tube into two tubes and add 2P in one tube. Check if there is any point equals to Q: if not, note down the 
value of 4P and pour two tubes together, or we get the value of l. Then amplify the tube into two tubes and 
add 4P in one tube, …, while this loop executes n times, the value from 1 to 2n for l have been checked. The 
following algorithm SolveECDLP(T0, n) can be applied to solve the elliptic curve discrete logarithm 
problem. 
 
EndFor 
(16g) For j = 1 to 2n 
(16g1) Tm = +(T1, x1(2+k)n+V+(2n+V)(k-2)-2n+j ) and Ts = –(T1, x1(2+k)n+V+(2n+V)(k-2)-2n+j) 
(16g2) Append(Tm, x1(2+k)n+V+(2n+V)(k-2)-2n+j) and Append(Tn, x0(2+k)n+V+(2n+V)(k-2)-2n+j) 
(16g3) T1 = ∪(Tm, Ts) 
EndFor 
(16h) For j = 1 to n 
(16h1) Tm = +(T1, x1n ) and Tn = –(T1, x1n) 
(16h2) Append-head(Tm, x1) and Append-head(Tn, x0) 
(16h3) T1 = ∪ (Tm, Ts) 
EndFor 
(16i) T0 = ∪ (T1, T2) 
EndWhile 
EndProcedure 
Fig.13. Procedure SolveECDLP(T0, n) 
 
The following procedure is used to append the bits which represent current value of l of each strand to 
the head of each strand. 
 
Procedure ParallelAdd(T0, n, 2k) 
(1) Tm = +(T0, x1n-k) 
(2) For j = 1 to k + 1 
(2a) Append-head(Tm, x0) 
EndFor 
(3) Append-head(Tm, x1) 
(4) For j = k + 3 to n 
(4a) Append-head(Tm, x0) 
EndFor 
(5) Ts = –(T0, x1n-k ) 
(6) For j = 1 to k 
(6a) T1 = +(Ts, x1n ) and T2 = –(Ts, x1n ) 
(6b) Append-head(T1, x1) and Append-head(T2, x0) 
(6c) Ts = ∪(T1, T2) 
EndFor 
(7) Append-head(Ts, x1) 
(8) For j = k + 2 to n 
(8a) Append-head(Ts, x0) 
EndFor 
(9) T0 = ∪(Tm, Ts) 
EndProcedure 
Fig.14. ParallelAdd(T0, n, 2k) 
 
(1) T1 = T0 
(2) For j = 0 to n – 1 
(2a) T2 = +(T1, x0x2+j ) 
(2b) T0 = ∪ (T0, T1 ) 
(2c) T1= T2 
EndFor 
(3) For j = 0 to n – 1 
(3a) T2 = +(T1, x0y2+j  ) 
(3b) T0 = ∪ (T0, T1 ) 
(3c) T1 = T2 
EndFor 
(4) T12 = T1 
EndProcedure 
Fig.16. Procedure Picking02(T0, n, x1, y1, x2, y2, T12) 
 
The following procedure called by the algorithm AddTwoNode(T0, n, x1, y1, x2, y2, r) is used to pick 
out the strands that one point is the inverse of the other one and store them in tube T2. 
 
Procedure PickingInverse(T0, n, x1, y1, x2, y2, r, T2) 
(1) ParallelAdder(T0, x1, y1) 
(2) ParallelCom(T0, n, x1, x2, Tm) 
(3) ParallelCom(Tm, n, r, y2, Tm) 
(4) T0 = ∪ (T0, Tm ) 
EndProcedure 
Fig.17. Procedure PickingInverse(T0, n, x1, y1, x2, y2, r, T2) 
 
The following procedure called by the algorithm AddTwoNode(T0, n, x1, y1, x2, y2, r) is used to pick 
out the strands that one point is equal to the other one and store them in tube T3. 
 
Procedure PickingEqual(T0, n, x1, y1, x2, y2, T3) 
(1) ParallelCom(T0, n, x1, x2, Tm) 
(2) ParallelCom(Tm, n, y1, y2, T3) 
(3) T0 = ∪ (T0, Tm ) 
EndProcedure 
Fig.18. Procedure PickingEqual(T0, n, x1, y1, x2, y2, T3) 
 
The following procedure is used to compare the bits from x-th to x+n-1-th with the bits from y-th to 
y+n-1-th of each strand and pick out the strands in which they are the same and store them in Tm. 
 
Procedure ParallelCom(T0, n, x, y, Tm) 
(1) For j = 0 to n – 1 
(1a) T1 = +( T0, x1x+j ) and T1 = –(T0, x1x+j) 
(23) ParallelMultiplier(T0, r+n+n+M +n+D–n, r+n+n+M +n+D+M+n+n+n+n+n) 
(24) ParallelLeftShifter(T0, r+n+n+M +n+D+M+n+n+n+n+n+nxn) 
(25) ParallelAdder(T0, r+n+n+M+n+D+M+4n, r+n+n+M+n+D+M+6n+M) 
(26) ParallelAdder(T0, r+n+n+M+n+D+M+6n+M, y1) 
(27) For j = 0 to n – 1 
 (27a) Tm = +( T0, x1r+n+n+M+n+D+M+n+n+n+j  ) and Ts = –(T0, x1r+n+n+M+n+D+M+n+n+n+j ) 
(27b) Append(Tm, x1r+n+n+M+n+D+M+6n+M+2n+j) and Append(Ts , x0r+n+n+M+n+D+M+6n+M+2n+j) 
(27c) T0 = ∪(Tm , Ts ) 
EndFor 
(28) For j = 0 to n – 1 
(28a) Ts = +( T0, x1r+n+n+M+n+D+M+6n+M+j) and Ts = –(T0, x1r+n+n+M+n+D+M+6n+M+j) 
(28b) Append(Tm, x1r+n+n+M+n+D+M+6n+M+3n+j ) and Append(Ts, x0r+n+n+M+n+D+M+6n+M+3n+j  ) 
(28c) T0 = ∪ (Tm, Ts ) 
EndFor 
(29) For j = 0 to 3n + M + D + M + 6n + M + 2n – 1 
(29a) Append(T11, x0r+j) 
(29b) Append(T12, x0r+j ) 
EndFor 
(30) For j = 0 to n – 1 
(30a) Tm = +( T11, x1x2+j ) and Ts = –(T11, x1x2+j) 
(30b) Append(Tm, x1r+3n+M+D+M+6n+M+2n+j) and Append(Ts, x0r+3n+M+D+M+6n+M+2n+j ) 
(30c) T11 = ∪ (Tm, Ts) 
EndFor 
(31) For j = 0 to n – 1 
(31a) Tm = +( T11, x1y2+j ) and Ts = –(T11, x1y2+j ) 
(31b) Append(Tm, x1r+n+n+M+n+D+M+6n+M+3n+j  ) and Append(Ts, x0r+n+n+M+n+D+M+6n+M+3n+j ) 
(31c) T11 = ∪ (Tm, Ts) 
EndFor 
(32) For j = 0 to n – 1 
(32a) Tm = +( T12, x1x1+j  ) and Ts = –(T12, x1x1+j  ) 
(32b) Append(Tm, x1r+3n+M+D+M+6n+M+2n+j) and Append(Ts, x0r+3n+M+D+M+6n+M+2n+j) 
(32c) T12 = ∪ (Tm, Ts ) 
EndFor 
(33) For j = 0 to n – 1 
(33a) Tm = +( T12, x1y1+j  ) and Ts = –(T12, x1y1+j ) 
(33b) Append(Tm, x1r+n+n+M+n+D+M+6n+M+3n+j  ) and Append(Ts x0r+n+n+M+n+D+M+6n+M+3n+j  ) 
(33c) T12 = ∪ (Tm, Ts ) 
EndFor 
(34) For j = 0 to 2n + M + D + M + 6n + M + 2n + 2n – 1 
(34a) Append(T2, x0r+n+j ) 
EndFor 
(35) T0 = ∪ (T11, T12 , T2, T0) 
M. Adleman, “A sticker based model for DNA computation,” 2nd annual workshop on DNA Computing, 
Princeton University. Eds. L. Landweber and E. Baum, DIMACS: series in Discrete Mathematics and 
Theoretical Computer Science, American Mathematical Society, 1999, pp. 1-29. 
[6]  J. Watson, N. Hoplins, J. Roberts, A. Gann, M. Levine, and R. Losick, Molecular Biology of the Gene, 
Benjamin/Cummings Menlo Park CA, 1987. 
[7] Koblitz N., “A course in number theory and cryptography,” Springer-Verlag, 1987, ISBN 0387942939. 
[8]  Rivest R. L., Shamir A., and Adleman L. 1978. “A method for obtaining digital signatures and 
public-key cryptosystem,” Communication of the ACM, Volume 21, pp. 120-126. 
[9]  Braich R. S., Johnson C., Rothemund P. W. K., Hwang D., Chelyapov N., and Adleman L. M., 
“Solution of a satisfiability problem on a gel-based DNA computer,” Proceedings of the 6th 
International Conference on DNA Computation in the Springer-Verlag Lecture Notes in Computer 
Science series, 2000, pp. 27-41. 
[10] Adleman L. M., Braich R. S., Johnson C., Rothemund P. W.K., Hwang D., and Chelyapov N., 
“Solution of a 20-variable 3-SAT problem on a DNA computer,” Science, Volume 296, Issue 5567, 
2002, pp. 499-502. 
[11] Blakley G. R., “A computer algorithm for calculating product AB modulo M,” IEEE Transaction on 
Computer, Vol. c-32, No. 5,1983,  pp 497-500. 
[12] Yu-Ying Shi, Michael(Shan-Hui) Ho, Yu-Jen Wang, and Chun-Yu Huang, “Constructing bio-molecular 
parallel adder and multiplier with basic logic operations in the Adleman-Liption model (Submitted for 
publication),” in ICSC &ISIS, 2008, submitted for publication. 
[13] Yu-Ying Shi, Michael(Shan-Hui) Ho, Chun-Yu Huang, and Yu-Jen Wang, “Constructing bio-molecular 
parallel subtractor and divider with basic logic operations in the Adleman-Liption model (Submitted for 
publication),” in ICSC &ISIS, 2008, submitted for publication. 
計畫成果自評 
本計畫內容的第一部分: Based upon the 2008 NSC research project of Optimal Bioinformatics Logic 
Computing: Bio-molecular Optimization Solutions for Discrete Logarithm and Elliptic Curve Discrete 
Logarithm Problems (最佳化生物資訊邏輯計算：離散對數及橢圓曲線離散對數問題最佳化分子解), 
several developed articles are accepted and to appear in the international known conferences and journals. 
They are: 
1) Michael (Shan-Hui) Ho, Yu-Ying Shih, “Fast Parallel Bio-Molecular Logic Computing Algorithms of 
Discrete Logarithm,” published in BioInformatics and BioEngineering, 2008, (IEEE BIBE 2008). (EI). 
2) Michael Shan-Hui Ho, Jyhjong Lin and Chaochang Chiu, “Constructing Bio-logical Molecular Parallel 
Adder and Multiplier Using the Adleman-Liption Model,” accepted and to appear in the year of 2009 
International Journal of Innovative Computing, Information and Control. (SCI). 
 
Other related papers to be published in the years of 2008 and 2009 are: 
3) Yu-Ying Shih, Michael (Shan-Hui) Ho, “Fast Parallel Bio-Molecular Logic Computing Algorithms: 
Protein Folding,” published in BioInformatics and BioEngineering, 2008, (IEEE BIBE 2008). (EI). 
4) Chaochang Chiu, Michael Jien-Jarn Wu, Yaow-Tsarn Tsai, Nan-Hsing Chiu and Michael Shan-Hui Ho, 
“Constrain-based Particle Swarm Optimization (CBPSO) for Call Center Scheduling,” accepted and to 
appear in the International Journal of Innovative Computing, Information and Control. (SCI). 
出席國際學術會議心得報告 
                                                   
計畫編號 NSC 97-2221-E-130-010-   
計畫名稱 
(中文) 最佳化生物資訊邏輯計算：離散對數及橢圓曲線離散對數問題最佳
化分子解 
(英文) Optimal Bioinformatics Logic Computing: Bio-molecular Optimization 
Solutions for Discrete Logarithm and Elliptic Curve Discrete Logarithm 
Problems 
出國人員姓名 
服務機關及職稱 
何善輝 銘傳大學資訊管理學系(所)- 教授 
台北大學資訊管理研究所 – 兼任教授 
會議時間地點 
October 8-10 of 2008 
IEEE BIBE 2008  
Athens, Greece 
會議名稱 
(中文) 第八屆IEEE國際會議有關於生物資訊和生物工程 (BIBE 2008)
(英文) The 8th IEEE International Conference on BioInformatics and 
BioEngineering (BIBE 2008) 
發表論文題目 
(中文 1) 快速平行生物分子邏輯運算演算法的離散對數 
(英文 1) Fast Parallel Bio-Molecular Logic Computing Algorithms of Discrete 
Logarithm 
(中文 2) 快速平行生物分子邏輯運算演算法：蛋白質折疊 
(英文 2) Fast Parallel Bio-Molecular Logic Computing Algorithms: Protein 
Folding 
 
一、參加會議經過 
 
Bioinformatics and Bioengineering are complementary disciplines that hold great 
promise for the advancement of research and development in complex medical and 
biological systems, agriculture, environment, public health, drug design, and so on. 
Research and development in these two areas are impacting the science and technology of 
fields such as medicine, food production, forensics, etc. by advancing fundamental 
concepts in molecular biology and in medicine, by helping us understand living 
organisms at multiple levels, by developing innovative implants and prosthetics, by new 
medical image technologies, and by improving tools and techniques for the detection, 
prevention and treatment of diseases. The IEEE BIBE conference provides a common 
platform for the cross fertilization of ideas, and to help shape knowledge and scientific 
achievements by bridging these two very important and complementary disciplines into 
an interactive and attractive forum. Keeping this objective in mind, IEEE BIBE solicits 
original contributions in the following non exclusive lists of areas. 
 
IEEE BIBE 2008 included submissions in all areas of bioinformatics, bioengineering, 
二、與會心得 
 
Dr. Michael (Shan-Hui) Ho has attended many international known conferences and 
presented many sounding papers in these conferences. The BIBE 2008 conference is very 
special to him. It is his first time to present one of his sounding researches on articles 
entitled “Fast Parallel Bio-Molecular Logic Computing Algorithms of Discrete 
Logarithm” and “Fast Parallel Bio-Molecular Logic Computing Algorithms: Protein 
Folding” in one of international known conferences in Athens, Greece. He also presented 
his country, Taiwan, in front of many famous international leading researchers, medical 
doctors, and engineers. Not only he enjoyed sharing his abundant knowledge and 
discussing research with people, but also he liked to made friends in the conference for 
Taiwan. 
 
 三、發表論文題目 
  
     Two Articles are published. 
  
Abstract I: Fast Parallel Bio-Molecular Logic Computing Algorithms of Discrete 
Logarithm 
 
Abstract (Oral presentation) 
Author: 
Michael(Shan-Hui) Ho, Ming Chuan University 
 
Co-author(s) 
Yu-Ying Shih, National Taipei College of Business 
 
The discrete logarithm problem is one of the well-known NP problems. It has important 
applications in such fields as cryptography. The discrete logarithm problem is the basis 
for the security of many cryptosystems including the Elliptic Curve Cryptosystem and 
Diffie-Hellman protocol. In this paper, we proposed newly developed parallel 
bio-molecular logic computing algorithms based on bio-molecular logic computing 
model to solve discrete logarithm problem 
 
 
Abstract II: Fast Parallel Bio-Molecular Logic Computing Algorithms: Protein 
Folding 
 
Abstract (Oral presentation) 
Author: 
Michael(Shan-Hui) Ho, Ming Chuan University 
