中文摘要 
 
本研究報告第一部分說明一個座標旋轉原理(CORDIC)為基礎之分離式基底快速傅利葉轉
換(split-radix fast Fourier transform)核心用於正交頻分複用技術(OFDM)，例如超寬頻無線
網絡(UWB)，非對稱數位用戶線路(ADSL)，數位音訊廣播(DAB)，數位視訊廣播–陸上系
統 (DVB-T)，高速數位用戶線路 (VHDSL)以及全球互通微波存取 (WiMAX) 。高速
128/256/512/1024/ 2048/4096/8192點快速傅利葉轉換處理器於本研究中以台積電製程 0.18微米
(1p6m)完成晶片設計，所有控制電路均集成於單一晶片上。所完成之快速傅利葉轉換處理
器在功率消耗上以及晶片面積上，均獲得較佳之效率。 
關鍵詞-矽智產權(Intellectual Property)，快速傅利葉轉換，分離式基底，座標旋轉原理，
正交頻分複用技術。 
 
本研究報告第二部分說明一個超大型積體電路架構之二維順向及反向 88× 正弦轉換處理
器，此一處理器的架構具備平行及疊流結構，其中包含 64 位元之靜態隨機記憶體，6 個位
元的唯讀記憶體置放參數，與傳統演算法之架構相比較，節省記憶體空間。此一處理器中
的乘法器悉數被座標旋轉原理處理器取代，節省許多硬體，同時減少功率消耗，增加多效
率。 
關鍵詞-順向及反向正弦轉換，平行及疊流結構，低功率，座標旋轉原理。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
I 
 1
報告內容: 
一、可重組式快速傅利葉轉換之超大型積體電路架構 
1   Introduction 
High-performance fast Fourier transform (FFT) processor is needed especially for real-time 
digital signal processing applications. Specifically, the computation of discrete Fourier transform 
(DFT) ranging from 128 to 8192 points is required for the orthogonal frequency division 
multiplexer (OFDM) of the following standards: Ultra Wide Band (UWB), Asymmetric Digital 
Subscriber Line (ADSL), Digital Audio Broadcasting (DAB), Digital Video Broadcasting – 
Terrestrial (DVB-T), Very High Bitrate DSL (VHDSL) and Worldwide Interoperability for 
Microwave Access (WiMAX) [1]-[8]. Thompson [9] proposed an efficient VLSI architecture for 
FFT in 1983. Wold and Despain [10] proposed pipelined and parallel-pipelined FFT for VLSI 
implementations in 1984. Widhe [11] developed efficient processing elements of FFT in 1997. 
To reduce the computation complexity, the split-radix 2/4, 2/8, and 2/16 FFT algorithms were 
proposed in [12]-[15]. 
As the Booth multiplier is not suitable for hardware implementations of large FFT, we 
propose the CORDIC-based multiplier. Moreover, we develop a ROM-free twiddle factor 
generator using simple shifters and adders only [1], which obviates the need to store all the 
twiddle factors in a large ROM space. As a result, the proposed CORDIC-based split-radix FFT 
core with the ROM-free twiddle factor generator is suitable for the wireless local area network 
(WLAN) applications. In this report, a high-performance 128/256/512/1024/2048/4096/8192- 
point FFT processor is presented for the European and Japanese standards. The remainder of this 
report proceeds as follows. In Section 2, the split-radix 2/8 FFT algorithm and the CORDIC 
algorithm are reviewed briefly. In Section 3, the reusable IP 128-point CORDIC-based split-radix 
FFT core is proposed. In Section 4, the hardware implementations of FFT processors are 
described. The performance analysis is presented in Section 5. Finally, the conclusion is given in 
Section 6. 
2   Review of Split-Radix FFT and CORDIC Algorithm 
2.1 Split-Radix FFT 
The idea behind the split-radix FFT algorithm is to compute the even and odd terms of FFT 
separately. The even term of the split-radix 2/8 FFT algorithm is given by 
  ))
2
()(()2( 2/
12/
0
nk
N
N
n
WNnxnxkX ∑−
=
++=                       (1) 
where 2/
2
2/
N
j
N eW
π−=  and .1)2/(,....,2,1,0 −= Nk  The odd term is as follows: 
nk
N
nl
N
lll
ll
N
n
ll
WWWWNnxWNnx
WNnxNnxWNnx
WNnxWNnxnxlkX
8/84
2
4
44
18/
0
2
44
)))
8
7()
8
5(
)
8
3()
8
(())
8
6(
)
8
4()
8
2()((()8(
−−
−
−
=
++++
++++++
++++=+ ∑
            (2) 
where 1)8/(,....,2,1,0 −= Nk  and .7,5,3,1=l  The split-radix 2/8 FFT algorithm, which 
 3
The pipelined CORDIC arithmetic unit can be obtained by decomposing the CORDIC 
algorithm into a sequence of operational stages. In [17], we derived the error analysis of 
fixed-point CORDIC arithmetic, based on which, the number of the CORDIC stages can be 
determined effectively. For example, the number of the CORDIC stages is 12 if the overall 
relative error of 16-bit CORDIC arithmetic is required to be less than 310− . The pipelined 
CORDIC arithmetic unit with 12 stages and an additional pre-scalar stage. In which, the 
pre-calculated scaling factor 64676.1≈cK  and the Booth binary recoded format leads to 
1.101001. The main concern for the design of the CORDIC arithmetic unit is throughput rather 
than latency. The proposed CORDIC arithmetic unit in terms of gate counts is less than 4 real 
multipliers significantly. In addition, the power consumption can be reduced significantly by 
using the proposed CORDIC arithmetic unit; it has been reduced by 30% according to the report 
of PrimePower® distributed by Synopsys. 
 As the twiddle factors: 18W  and 
3
8W  are equal to )1(2
2 j−  and )1(
2
2 j+− , 
respectively, a complex number, say )( bja + , times 18W  or 38W  can be written by 
))()((
2
2))1(
2
2()( bajbajbja +−++=−×+                  (10) 
))()((
2
2))1(
2
2()( bajbajbja ++−−=+−×+             (11) 
where 
2
2  can be represented as 0101010.1  using the Booth binary recoded form (BBRF). 
Thus, the CM unit can be implemented by using simple adders and shifters only. Figure 3 shows 
the pipelined CM architecture, which uses three subtractions/additions and therefore improves on 
the computation speed significantly. 
Based on the above-mentioned CORDIC arithmetic unit and CM unit, the computational 
circuit and hardware architecture of the CORDIC-based split-radix 2/8 FFT butterfly 
computation are realized. As one can see, the pipelined CORDIC arithmetic unit aims at 
increasing the throughput of complex multiplications..  
3.2 ROM-Free Twiddle Factor Generator 
In the conventional FFT processor, a large ROM space is needed to store all the twiddle factors. 
To reduce the chip area, a twiddle factor generator is thus proposed. Figure 4 shows the 
ROM-free twiddle factor generator using simple adders and shifters for 128-point FFT. In which, 
the 16-bit accumulator is to generate the value πn2  for each index n; 12 3log2 −= −Nn , the 16-bit 
shifter is to divide πn2  by N, and the 16-bit shifter/adder is to produce the twiddle factors: nN1θ , 
n
N
3θ , nN5θ  and nN7θ . By using the twiddle factor generator, the chip area and power consumption 
can be reduced significantly at the cost of an additional logic circuit. Table 1 shows the gate 
counts of the full-ROM storing all the twiddle factors, the CORDIC twiddle factor generator [1] 
and the ROM-free twiddle factor generator. 
 5
[2] J. C. Kuo, C. H. Wen, A. Y. Wu, “Implementation of a programmable 64/spl sim/2048-point FFT/IFFT 
processor for OFDM-based communication systems,”  Proceedings of the 2003 International 
Symposium on Circuits and Systems, Volume 2, 25-28 May 2003 pp.II-121 - II-124. 
[3] L. Xiaojin, Z. Lai, C. J. Cui, “A low power and small area FFT processor for OFDM demodulator,” 
IEEE Transactions on Consumer Electronics, Volume 53, Issue 2, May 2007, pp. 274 – 277. 
[4] J. Lee, H. Lee, S. I. Cho, S. S. Choi, “A high-speed, low-complexity radix-216 FFT processor for 
MB-OFDM UWB systems,” Proceedings of the 2006 IEEE International Symposium on Circuits and 
Systems, May 2006. 
[5] A. Cortes, I. Velez, J. F. Sevillano, A. Irizar, “An approach to simplify the design of IFFT/FFT cores 
for OFDM systems,” IEEE Transactions on Consumer Electronics, Volume 52, Issue 1,  Feb. 2006, 
pp.26 – 32. 
[6] Y. H. Lee, T. H. Yu, K. K. Huang, A. Y. Wu, “Rapid IP design of variable-length cached-FFT 
processor for OFDM-based communication systems,” IEEE Workshop on Signal Processing Systems 
Design and Implementation, Oct. 2006 pp.62-65. 
[7] C. L. Wey, W. C. Tang, S. Y. Lin, “Efficient memory-based FFT architectures for digital video 
broadcasting (DVB-T/H),” 2007 International Symposium on VLSI Design, Automation and Test, 
25-27 April 2007, pp.1-4.  
[8] Y. W. Lin, H. Y. Liu, C. Y. Lee, “A 1-GS/s FFT/IFFT processor for UWB applications,”  IEEE 
Journal of Solid-State Circuits, Volume 40,  Issue 8,  Aug. 2005, pp.1726-1735. 
[9] C. D. Thompson, “Fourier transform in VLSI,” IEEE Transactions on Computers, Vol.32, No. 11, 
1983, pp.1047-1057. 
[10] E. H. Wold, A. M. Despain, “Pipelined and parallel-pipelined FFT processor for VLSI 
implementation,” IEEE Transactions on Computers, Vol.33, No. 5, 1984, pp.414-426. 
[11] T. Widhe, “Efficient implementation of FFT processing elements,” Linkoping Studies in Science and 
Technology, Thesis No. 619, Linkoping University, Sweden, 1997. 
[12] P. Duhamel, H. Hollmann, “Implementation of "split-radix" FFT algorithms for complex, real, and 
real symmetric data.” IEEE International Conference on Acoustics, Speech, and Signal Processing, 
Volume 10, April 1985, pp.784 – 787. 
[13] A .A. Petrovsky, S. L. Shkredov, “Automatic generation of split-radix 2-4 parallel-pipeline FFT 
processors: hardware reconfiguration and core optimizations,” 2006 International Symposium on 
Parallel Computing in Electrical Engineering, pp.181-186. 
[14] S. Bouguezel, M. O. Ahmad, M. N. S. Swamy, “A new radix-2/8 FFT algorithm for length-q/spl 
times/2/sup m/ DFTs,” IEEE Transactions on Circuits and Systems I: Fundamental Theory and 
Applications, Volume 51, Issue 9,  2004, pp.1723- 1732. 
[15] W. C. Yeh, C. W. Jen, “High-speed and low-power split-radix FFT.” IEEE Transactions on Acoustics, 
Speech, and Signal Processing, Volume 51, Issue 3,  March 2003, pp.864 – 874. 
[16] M. D. Ercegovac, T. Lang, “CORDIC algorithm and implementations.” Digital Arithmetic, Morgan 
Kaufmann Publishers, 2004, Chapter 11. 
[17] T. Y. Sung, H. C. Hsin, “Fixed-point error analysis of CORDIC arithmetic for special-purpose signal 
processors,” IEICE Transactions on Fundamentals of Electronics, Communications and Computer 
Sciences, Vol.E90-A, No.9, Sep. 2007, pp.2006-2013. 
 7
Reg. Memory128*32 Reg.
Modify Split-
Radix 2/8 FFT 
Architecture
Controller
8*32 8*32
32 3216
16
16
16
-1
-1
-1
-1
-1
-1
-1 -1
)(nx
)8/( Nnx +
)4/( Nnx +
)8/3( Nnx +
)2/( Nnx +
)8/5( Nnx +
)4/3( Nnx +
)8/7( Nnx +
j−
j−
n
NW
n
NW
3
n
NW
5
n
NW
7
)18( +kX
)38( +kX
)58( +kX
)78( +kX
CM
8(1)
CM
8(3)
CORDIC
CORDIC
CORDIC
CORDIC
)8( ka
)28( +ka
)48( +ka
)68( +ka
A d d S u b
]R e [X ]I m [ X
S h i f te r  2 /  S u b
L a t c h L a t c h
L a t c h L a t c h
M u x
]'I m [
2
2_]'R e [
2
2 XX
S h i f t e r  2 /  S u b
S h i f te r  4 /  S u b S h i f t e r  4 /  S u b
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Fig. 1 The proposed 128-point CORDIC- based split-radix FFT processor  
Fig. 2 Data flow of the butterfly computation of the modified split-radix 2/8 FFT 
Fig. 3 Constant multiplier (CM) architecture for the modified split-radix 2/8 FFT
 9
F u l l - T w i d d l e  F a c t o r  R O M
C O R D I C  T w i d d l e  F a c t o r  G e n e r a t o r
R O M - f r e e  T w i d d l e  F a c t o r  G e n e r a t o r  ( S u n g ,  H s i n  a n d  C h e n g ,  2 0 0 8 )
8 1 9 2 - P o i n t  R O M
b i t 1 6K4 ×
1 1 - b i t  A d d e r 1 1 - b i t  S h i f t e r1 6 - b i t  C O R D I C 1 6 - b i t  S h i f t e r 1 6 - b i t  A d d e r
b i tK  1 8~ g a t e s 2 0 0~g a t e s 09~g a t e s 05~g a t e s 051~
1 6 - b i t  A c c u m u l a t o r 1 6 - b i t  S h i f t e r 1 6 - b i t  S h i f t e r / A d d e r
g a t e s 22 0 029 0~ ×+×g a t e s 09~2 0 0 g a t e s~
1 6 - b i t  R e g i s t e r
g a t e s 3 2~
1 b i t ~ 1 g a t e
( T .  Y .  S u n g ,  2 0 0 6 )  [ 1 ]
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
FFT Size Core 
Area 
Power 
Consumption
Clock 
Rate 
128-point  228.2 mm 80mW 200MHz 
256-point  237.2 mm 84mW 200MHz 
512-poiint 249.2 mm 88mW 200MHz 
1024-point 262.2 mm 94mW 200MHz 
2048-point 281.2 mm 99mW 200MHz 
4096-point 210.3 mm 106mW 200MHz 
8192-point 262.3 mm 117mW 200MHz 
Fig. 7 Log-log plot of the CORDIC computations versus the number of FFT points
Table 1 Hardware requirements of the full-ROM, the CORDIC twiddle factor 
generator [1], and the ROM-free twiddle factor generator 
Table 2 Core areas, power consumptions, clock rates of 128-, 256-, 512-, 1024-, 2048-, 
4096- and 8192-point FFT processors 
 11
∏∏∏ −
=
−−
=
−−
=
+=σ+==
1
0
2
1
0
22
1
0
1 2121
n
i
i
n
i
i
i
n
i
ikK                      (5) 
One may take the iteration sequence: {0, 0, 0, 1, 2, …., n } for the CORDIC algorithm in the circular 
coordinate system to expand the convergence range of angles as follows. 
oo 18018931413
2222
0
0
>≅
∑+⋅+=
=
−−
)(.
arctan)arctan()arctan(θ
n
j
jn
max
          (6)  
Thus, the convergence range of angles is expanded to cover a whole plane of }180,180[ oo− , in other 
words, the input angle is unconstrained [28]-[29].  
3 The CORDIC-Based DCT and IDCT Algorithm 
The N-point 1-D DCT is defined as 
)n(x
N
m)n(cosK
N
)m(Y
N
n
m ⋅⎥⎦
⎤⎢⎣
⎡ π+= ∑−
=
1
0 2
1221             (7)  
where ,N,....,m 10 −=  
2
1=mK  for 0=m , and 1=mK  for 0>m . 
For image applications, a separable 2-D DCT can be obtained by using the tensor product of two 1-D 
DCTs. Specifically, the NM × -point 2-D DCT is defined as 
⎥⎦
⎤⎢⎣
⎡ π+⋅⎥⎦
⎤⎢⎣
⎡ π+⋅
⋅⋅
⋅=
∑∑−
=
−
= N
v)n(cos
M
u)m(cos)n,m(x
NM
)v(c)u(c)v,u(Z
M
m
N
n 2
12
2
12
2
1
0
1
0
           (8)  
where 1010 −=−= N,....,v,M,....,u , 
2
1=)k(c  for 0=k , and 1=)k(c  for 0>k . Equation 
(8) can be rewritten by 
⎭⎬
⎫
⎩⎨
⎧ ⋅⎥⎦
⎤⎢⎣
⎡ π+⋅⋅⎥⎦
⎤⎢⎣
⎡ π+⋅= ∑∑ −
=
−
=
1
0
1
0 2
1221
2
1221
N
n
M
m
)n,m(x
N
v)n(cos)v(c
NM
u)m(cos)u(c
M
)v,u(Z       (9) 
For 88×  DCT, let 
 
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢
⎣
⎡
−−−−
−−−−
−−−−
−−−−
−−−−
−−−−
−−−−
⋅=
fdcaacdf
ebbeebbe
dafccfad
cfaddafc
beebbeeb
acdffdca
11111111
11111111
8
1T
          (10) 
where ⎟⎠
⎞⎜⎝
⎛ π=
16
2 cosa , ⎟⎠
⎞⎜⎝
⎛ π=
8
2 cosb , ⎟⎠
⎞⎜⎝
⎛ π=
16
32 cosc , ⎟⎠
⎞⎜⎝
⎛ π=
16
52 cosd , 
⎟⎠
⎞⎜⎝
⎛ π=
8
32 cose , and ⎟⎠
⎞⎜⎝
⎛ π=
16
72 cosf .  
The transform coefficients ),( vuZ  of 88×  DCT can be grouped into an array denoted by Z, which can 
be written by 
 13
⎥⎥
⎥⎥
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢⎢
⎢⎢
⎢
⎣
⎡ −
⎥⎥
⎥⎥
⎥
⎦
⎤
⎢⎢
⎢⎢
⎢
⎣
⎡
−−
−−
−−−−−
−−−−
=
⎥⎥
⎥⎥
⎦
⎤
⎢⎢
⎢⎢
⎣
⎡
)(Y
)(Y
)(Y
)(Y
)(Y
)(Y
)(Y)(Y
afdcbe
facdbe
facdbe
afdcbe
)(x
)(x
)(x
)(x
5
3
1
7
6
2
40
1
1
1
1
6
2
5
1
         (19) 
Figure 3 shows the data flow of 8-point IDCT, where the blocks named R0 and R2 are 
constructed by the same structure with rotation angles 16/π  and 16/5π , and block R1 involves 
a rotation of angle 16/6π . The details of blocks R0 and R1 are shown in Figure 4. 
3.3 CORDIC-Based 2-D DCT and IDCT Architectures 
The demanding operation of both DCT and IDCT, i.e. multiplication can be simplified 
significantly by using CODIC. Specifically, multipliers required for the implementation of both 
DCT and IDCT can be replaced by simple shifters and adders through the use of CORDIC 
processor. In which, each CORDIC operates in the circular coordinate system with some fixed 
angle that can be pre-decomposed into a sequence of micro-rotations, { }iσ , and can be stored in 
ROM. Based on constant-rotation CORDIC [30]-[31], multiplier involved in DCT and IDCT can 
be implemented by using two shifters and two adders. Figure 5 depicts a constant-rotation 
CORDIC in the circular coordinate system. It is noted that each CORDIC processor used as the 
arithmetic unit (AU) in the proposed fast DCT/IDCT architectures can save hardware by one 
third to achieve low-power consumption. 
4 The Proposed 2-D DCT and IDCT Processors 
Based on equations (11) and (15), an efficient pipelined architecture has been developed for 2D 
DCT/IDCT. Figure 6 shows the proposed architecture for 88×  DCT and IDCT processors, 
where one 64-word SRAM bank, two 8-point DCT/IDCT processors and a control unit are used. 
The 8-point 1-D DCT/IDCT input-processor denoted by P1 writes the intermediate result into the 
row and column of SRAM bank alternately. P2 denotes the 8-point 1-D DCT/IDCT 
output-processor, which first reads data from the column and raw of SRAM bank alternately and 
then outputs the final result. Figure 7 shows the finite state machine (FSM) of the control unit, 
which manages data flow and timing for 2-D DCT/IDCT operations. 
4.1 Implementation of 1-D DCT/IDCT Processor 
Constant-rotation CORDIC processors are used to implement 8-point DCT and IDCT processors, 
which are shown in Figure 8 and Figure 9, respectively. Note that the transform matrices of DCT 
and IDCT are column symmetry and row symmetry, respectively, the shuffle structures are 
simplified and no multipliers are utilized. 
4.2 Implementation of 2-D DCT/IDCT Processors 
One of the crucial issues using the conventional DCT/IDCT architectures with single processor is 
long latency and low throughput [6]-[8]. Moreover, the conventional DCT/IDCT architectures 
with single memory bank can not be pipelined [21]-[25], [29]. In [18]-[20], Sung proposed a 
pipelined architecture with dual memory banks to double the throughput of DCT/IDCT at the cost 
of increasing memory space. To save memory space while increasing throughput, we propose 
 15
performances, area and power consumption trade-offs. The proposed 2-D DCT and IDCT 
processors are much suited to the applications of JPEG, MPEG-4 and H.264 standards. 
References: 
[1] D. F. Elliott, K. R. Kao, Fast Transforms Algorithms, Analysis, Applications, Chapter 8, 
Walsh-Hadamard Transform, Prentice-Hall, 1982, pp.301-303. 
[2] R. J. Clarke, Relation between the Karhenen Loeve and Cosine Transform,” IEEE Proceedings, Part F, 
vol. 128, no. 6, Nov. 1981, pp.359-360. 
[3] M. J. Narasimha, A. M. Peterson, On the Computation of the Discrete Cosine Transform, IEEE 
Transactions on Communications, vol. 26, no. 6, June 1978, pp. 934-936. 
[4] R. M.Haralick “A  Storage Way to Implement the Discrete Cosine Transform,” IEEE Transactions on 
Computers, July 1976, pp.764-765. 
[5] W. H. Chen, C. H. Smith, S. C. Fralick, “Fast Computational Algorithm for the Discrete Cosine 
Transform,” IEEE Transactions on Communications, vol. 25, no. 9, Sept. 1977, pp.1004-1009. 
[6] T. Y. Sung, VLSI Parallel and Distributed Computation Algorithms for DCT Processors, Proceedings 
IEEE International Phoenix Conference on Computer and Communications, Scottsdale, Arizona, USA, 
1990, pp.121-125. 
[7] T. Y. Sung, VLSI Parallel and Distributed Processing Algorithms for Multidimensional Discrete 
Cosine Transforms, 1990 A Two-Track International Conference on Databases, Parallel Architectures, 
and their Applications, Miami Beach, Florida, USA, March 1990, pp.36-39. 
[8] T. Y. Sung, Novel Parallel VLSI Architectures for Discrete Cosine Transforms, Proceedings IEEE 
International Conference on Acoustics, Speech and Signal Processing, Albuquerque, New Mexico, 
USA, April 1990, pp.998-1001. 
[9] Y. P. Lee, T. H. Chen, L. G. Chen, C. W. Ku, A Cost-Effective Architecture for 8×8 two-dimensional 
DCT/IDCT Using Direct Method, IEEE Transactions on Circuits Systems for Video Technology, vol. 7, 
no. 1, June 1997, pp.459-467. 
[10] Y. T. Chang, C. L. Wang, New Systolic Array Implementation of the 2-D Discrete Cosine Transform 
and Its Inverse, IEEE Transactions on Circuits Systems for Video Technology, vol. 5, no. 1, April 1995, 
pp.150-157. 
[11] S. F. Hsiao, W. R. Shiue, A New Hardware-Efficient Algorithm and Architecture for Computation of 
2-D DCTs on a Linear Array, IEEE Transactions on Circuits and Systems for Video Technology, vol. 
11, Nov. 2001, pp.1149-1159. 
[12] S. F. Hsiao, J. M. Tseng, New Matrix Formulation for Two-Dimensional DCT/IDCT Computation 
and its Distributed-Memory VLSI Implementation, IEE Proc.-Vis. Image Signal Process, vol. 149, no. 
2, April 2002, pp.97-107. 
[13] S. F. Hsiao, Y. H. Hu, T. B. Juang, C. H. Lee, Efficient VLSI Implementations of Fast Multiplierless 
Approximated DCT Using Parameterized Hardware Modules for Silicon Intellectual Property Design, 
IEEE Trans. Circuits and Systems, Part-I: Regular Papers, vol. 52, no. 8, Aug. 2005, pp.1568-1579. 
[14] V. Srinvasan, K. J. R. Liu, VLSI Design of High-Speed Time-Recursive 2-D DCT/IDCT Processor 
for Video Applications, IEEE Transactions on Circuits Systems for Video Technology, vol. 6, no. 1, 
Feb. 1996, pp.87-96. 
[15] T. Kuroda, A 0.9-V, 150-MHz, 10-mW, 4mm2, 2-D Discrete Cosine Transform Core Processor with 
Variable Threshold-Voltage(VT) Scheme, IEEE Journal of Solid-States Circuits, vol. 31, no. 11, Nov. 
 17
[32] TSMC 0.18 mμ CMOS Design Libraries and Technical Data, v.3.2, Taiwan Semiconductor 
Manufacturing Company, Hsinchu, Taiwan, and National Chip Implementation Center (CIC), 
National Science Council, Hsinchu, Taiwan, R.O.C., 2006. 
[33] Synopsys products, http://www. synopsys.com/ products. 
[34] Xilinx FPGA products, http://www. xilinx.com /products. 
[35] T. Y. Sung, C. W. Yu, Y. S. Shieh, A High-Efficient and Cost-Effective LCD Signal Processor, 7th 
International Conference on Computer Vision, Pattern Recognition and Image Processing, Taiwan, 
2006, pp.939-942. 
 19
 
-1
-1
-1
+1+1
+1
-1
+1
-1
+1
R_u
R_d
R_u
R_d
+1
+1
+1
+1
-1
-1
+1 -1
Y(0)
Y(4)
Y(3)
Y(5)
Y(2)
Y(6)
Y(7)
Y(1)
x(0)
x(6)
x(7)
x(1)
x(4)
x(5)
x(3)
x(2)
R0
R2
R1
Fig.3. Data flow of 8-point IDCT 
 21
S1
Rst
S2
Ready
Ready
Column  read enable
Column   write  enable
Task finish
Column  read enable
Column   write  enable
Row read enable
Row  write  enable
S0
Row write enable
Full
Row read enable
Row  write  enable
Task finish
Fig.7. The finite state machine (FSM) of the control unit  
x
(A D D /S U B )S  &  S H U F F L E S
(A D D /S U B )S  &  S H U F F L E S
A D D /S U B
Y (0 ) Y (4 ) Y (2 )Y (6 )
S U BA D D A D D
Y (1 ) Y (7 ) Y (3 )Y (5 )
C O R D IC (1 )
C O R D IC (2) C O R D IC (3) C O R D IC (4) C O R D IC (5)
A D D
Fig.8. The proposed 1-D 8-point DCT processor 
Y
R0 R2R1
(ADD/SUB)S&
SHUFFLES
(ADD/SUB)S&SHUFFLES
(ADD/SUB)S&
SHUFFLES
(ADD/SUB)S&
SHUFFLES
x(0)x(3)x(2) x(5) x(4) x(1) x(7) x(6)
Fig.9. The proposed 1-D 8-point IDCT processor 
 23
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Fig.14  Original image Fig.15  Reconstructed image 
Xilinx 
XC2V6000 
FPGA
8051 Microcontroller 
SRAM Extension Socket 
USB 2.0 
PCI Bus 
Fig.13. The architecture development and verification board  
 25
計畫成果自評： 
本研究之第一部分預期能完成一個充分利用座標旋轉原理演算法的特性以簡化FFT的架
構，增加晶片之性能，並且節省參數儲存之記憶體。研究報告中已經報告完成一個改良式
重組式超大型積體電路架構FFT，運算因子記憶體也完全省略，所增加之產生器電路非常
精簡，晶片面積充分得以減少，晶片耗電也得以節省。運算速度在架構改進下得以增快，
已充分達到預期目標。從報告之成果比較表，如下所示中： 
 
 
 
 
 
 
 
 
 
 
可充分得知本研究已獲得相當優良的成果。 
本研究之第二部分也能達成預期之目標完成一個以座標旋轉原理演算法為基礎之高效
率超大型積體電路架構之順向及反向二維正弦轉換處理器。在記憶體及速度上均有特別的
改進，在功率削好上也得到很低的功耗。報告之成果比較表中得以充分的說明，比較表如
下圖所示： 
 
 
 
 
 
 
The conventional architectures  The proposed pipelined architectures  
8×8 2-D DCT/IDCT The 
single-processor 
architectures [6]-[8] 
The parallel 
architectures with single 
memory-bank [21]-[25] 
The pipelined 
architectures with dual 
memory-bank 
[18]-[20] 
 
This work 
Processors 1 8 5 (Complete 
CORDIC) 
5  
(Reduced 
CORDIC)   
Real-multipliers 2 16 0 0 
Real-Adders 3 18 18 18 
RAM 64 64 134 64 
ROM 6 6 6 6 
Hardware 
complexity (AUs) 
)1(O  )1log( 2 +− NNO )log( 2 NNO −  )log( 2 NNO −
Computation 
complexity )(
2NO  )2( NO  )(NO  )(NO  
Latency 64 16 8 8 
Throughput 
(outputs/cycle) 
1 4 8 8 
Hardware utilization 
(100%) 
yes no yes yes 
Pipelinability no no yes yes 
Power consumption poor poor good better 
bit 16K4 ×
bitK 18~ gates 200~gates 09~gates 05~gates 051~
gates 2200290~ ×+×gates 09~200gates~ gates 32~
Table 1 Comparison between the proposed architectures and the conventional architectures 
 27
可供推廣之研發成果資料表(一) 
█ 可申請專利  █ 可技術移轉                                      日期：98 年 7 月 20 日 
國科會補助計畫 
計畫名稱：快速座標旋轉原理演算法應用於特殊數位信號處理之晶片
設計與製作 
計畫主持人：宋志雲         
計畫編號：NSC 97－2221－E－216－044            
學門領域：積體電路及系統設計 
技術/創作名稱 可重組式快速傅利葉轉換之超大型積體電路架構 
發明人/創作人 宋志雲、辛錫進    
中文： 
本研究第一部分報告說明一個座標旋轉原理(CORDIC)為基礎之分離
式基底快速傅利葉轉換(split-radix fast Fourier transform)核心用於正交
頻分複用技術(OFDM)，例如超寬頻無線網絡(UWB)，非對稱數位用戶
線路 (ADSL)，數位音訊廣播 (DAB)，數位視訊廣播–陸上系統
(DVB-T)，高速數位用戶線路 (VHDSL)以及全球互通微波存取
(WiMAX)。高速 128/256/512/1024/ 2048/4096/8192 點快速傅利葉轉換處理
器於本研究中以台積電製程 0.18 微米(1p6m)完成晶片設計，所有控制
電路均集成於單一晶片上。所完成之快速傅利葉轉換處理器在功率消
耗上以及晶片面積上，均獲得較佳之效率。 
關鍵詞-矽智產權(Intellectual Property)，快速傅利葉轉換，分離式基
底，座標旋轉原理，正交頻分複用技術。 
 
技術說明 The first part of report presents a Coordinate Rotation Digital Computer 
(CORDIC)-based split-radix fast Fourier transform (FFT) core for 
Orthogonal Frequency Division Multiplexing (OFDM) systems, for 
example, Ultra Wide Band (UWB), Asymmetric Digital Subscriber Line 
(ADSL), Digital Audio Broadcasting (DAB), Digital Video Broadcasting – 
Terrestrial (DVB-T), Very High Bitrate DSL (VHDSL), and Worldwide 
Interoperability for Microwave Access (WiMAX). High-speed 
128/256/512/1024/ 2048/4096/8192-point FFT processors have been 
implemented by 0.18 mμ (1p6m) at 1.8V, in which all the control signals 
are generated internally. These FFT processors outperform the 
conventional ones in terms of both power consumption and core area. 
Key-Words: - Intellectual Property (IP), FFT, split-radix, CORDIC, OFDM.
 29
可供推廣之研發成果資料表(二) 
█ 可申請專利  █ 可技術移轉                                      日期：98 年 7 月 20 日 
國科會補助計畫 
計畫名稱：快速座標旋轉原理演算法應用於特殊數位信號處理之晶
片設計與製作 
計畫主持人：宋志雲         
計畫編號：NSC 97－2221－E－216－044           
學門領域：積體電路及系統設計 
技術/創作名稱 高效率以座標旋轉演算法為基礎之二維順向及反向正弦轉換處理器
發明人/創作人 宋志雲、辛錫進    
中文： 
本研究報告第二部分說明一個超大型積體電路架構之二維順向及反
向 88× 正弦轉換處理器，此一處理器的架構具備平行及疊流結構，
其中包含 64 位元之靜態隨機記憶體，6 個位元的唯讀記憶體置放參
數，與傳統演算法之架構相比較，節省記憶體空間。此一處理器中
的乘法器悉數被座標旋轉原理處理器取代，節省許多硬體，同時減
少功率消耗，增加多效率。 
關鍵詞: - 順向及反向正弦轉換，平行及疊流結構，低功率，座標旋
轉原理。 
技術說明 
Two-dimensional discrete cosine transform (DCT) and inverse discrete 
cosine transform (IDCT) have been widely used in many image 
processing systems. In the second part of report, efficient architectures 
with parallel and pipelined structures are proposed to implement 88×
DCT and IDCT processors. In which, only one bank of SRAM (64 
words) and coefficient ROM (6 words) is utilized for saving the memory 
space. The kernel arithmetic unit, i.e. multiplier, which is demanding in 
the implementation of DCT and IDCT processors, has been replaced by 
simple adders and shifters based on the CORDIC algorithm. The 
proposed architectures for 2-D DCT and IDCT processors not only 
simplify hardware but also reduce the power consumption with high 
performances. 
Key-Words: - DCT, IDCT, parallel and pipelined architecture, low-
CORDIC. 
可利用之產業 
及 
可開發之產品 
影像處理之晶片組 
 31
附錄: 
附件一:研究發表之論文 
附件二:出席國際學術會議心得報告及發表之論文 
High-SFDR and Multiplierless Direct Digital Frequency Synthesizer 
 
Tze-Yun Sung 
Department of 
Microelectronics Engineering 
Chung Hua University 
Hsinchu City 300-12, Tawan, 
R.O.C. 
bobsung@chu.edu.tw 
Hsi-Chin Hsin 
Department of Computer 
Science and Information 
Engineering 
National United University
Miaoli 36003, Taiwan, R.O.C.
hsin@nuu.edu.tw 
Lyu-Ting Ko 
Department of Electrical 
Engineering 
Chung Hua University 
Hsinchu City 300-12, Tawan, 
R.O.C. 
m09601049@chu.edu.tw  
 
 
Abstract: - This paper presents a hybrid CORDIC (COordinate Rotation DIgital Computer) algorithm for 
designs and implementations of the direct digital frequency synthesizer (DDFS). The proposed multiplier-less 
architecture with small ROM ( 164× -bit) and pipelined data path provides a spurious free dynamic range 
(SFDR) of more than 84.4 dBc. A SoC (system on chip) has been designed by   1P6M CMOS, and then emulated 
on the Xilinx FPGA. It is shown that the hybrid CORDIC-based architecture is suitable for VLSI 
implementations of the DDFS in terms of hardware cost, power consumption, and SFDR. 
 
Key-Words: - DDFS, hybrid CORDIC, SoC, FPGA, SFDR. 
 
1   Introduction 
The direct digital frequency synthesizer (DDFS) 
plays a key role in many digital communication 
systems. Fig. 1 depicts the conventional DDFS, 
which consists mainly of phase accumulator, 
sine/cosine generator, digital-to-analog converter, 
and low-pass filter. The sine/cosine generator as the 
core of DDFS is usually implemented by using a 
ROM lookup table; with high spurious free dynamic 
ranges (SFDR) comes a large ROM lookup table [1]. 
In order to reduce the size of the lookup table, many 
techniques were proposed [1]-[4]. The quadrant 
compression technique can reduce the ROM size by 
75% [2]. The Sunderland architecture is to split the 
ROM into two smaller ones [3], and its improved 
version known as the Nicholas architecture results in 
a higher ROM-compression ratio (32:1) [4]. In [5], 
the polynomial hyperfolding technique with high 
order polynomial approximation was used to design 
DDFS. In [6] and [7], the angle rotation algorithm 
was used to design quadrature direct digital 
frequency synthesizer/complex mixer (QDDSM). 
COordinate Rotation DIgital Computer (CORDIC) is 
a well known arithmetic algorithm, which evaluates 
various elementary functions including sine and 
cosine functions by using simple adders and shifters 
only. Thus, CORDIC is suitable for the design of 
high-performance chips with VLSI technologies. 
Recently, the CORDIC algorithm has received a lot 
of attention to the design of high-performance DDFS 
[8]-[11], especially for the modern digital 
communication systems. 
This paper is organized as follows. In section II, the 
hybrid CORDIC algorithm is proposed. In section III, 
hardware implementation of DDFS is described. The 
performance analysis is presented in section IV. 
Finally, the conclusion is given in section V. 
 
2   The Hybrid CORDIC Algorithm 
In this section, the hybrid CORDIC algorithm is 
proposed, and based on which, a low-power and 
high-SFDR DDFS can be developed.  
 
2.1 Modified Angle Recoding Method for 
CORDIC Algorithm 
In order to reduce the number of CORDIC iterations, 
the input angle can be divided into encoded angles by 
using the modified Booth encoding (MBE) method 
[12]. Specifically, let ψ  denote the input angle 
represented by 
)1()1( 2)1(....2)1(2)0( −−+−− −+++= wpp wfffψ            (1) 
where }1,0{)( ∈if , w  is the word length of 
operands, and 1
3
)585.2( −≤≤=⎥⎥
⎤⎢⎢
⎡ − wipw . The MBE 
decomposition of ψ  is as follows. 
∑−
=
=
2/)1(
2/
)(
w
pi
iβψ                                                             (2) 
where the encoded angle: 
iii −= 2)()( ρβ with }2,1,0,1,2{)( −−∈iρ . As )(sin iβ  
and )(cos iβ  can be approximated by 
iiii −=≅ 2)()()(sin ρββ                                      (3) The National Science Council of Taiwan, under GrantNSC97-2221-E-216-044, and the Chung Hua University, Hsinchu, Taiwan, 
under Contract CHU-NSC97-2221-E-216-044 supported this work. 
Proceedings of the 8th WSEAS International Conference on Instrumentation, Measurement, Circuits and Systems
ISSN: 1790-5117 41 ISBN: 978-960-474-076-5
⎪⎪⎩
⎪⎪⎨
⎧
+=+
+=+
+=+
+=+
=
34 if ,32
24 if ,12
14 if ,12
04 if ,12
nwn
nwn
nwn
nwn
u                 (23) 
Based on the above equation, the minimum iteration 
number of the proposed hybrid CORDIC algorithm 
can be obtained as shown in Fig. 4. The computations 
of )(ix  and )(iy  are therefore as follows. 
For ⎥⎥
⎤⎢⎢
⎡<≤
22
uip , 
)(2)()(2)()()1( 2)14(2 iyiixiixix ii −+− −−=+ ρρ        (24) 
)(2)()(2)()()1( 2)14(2 iyiixiiyiy ii −+− +−=+ ρρ       (25) 
For ⎥⎥
⎤⎢⎢
⎡ −+⎥⎥
⎤⎢⎢
⎡<≤⎥⎥
⎤⎢⎢
⎡
342
uwwiu , 
⎡ ⎤ )(2)()()1( )14/(31 iyiixix wiu +−⋅+−−=+ ϕ              (26) 
⎡ ⎤ )(2)()()1( )14/(31 ixiiyiy wiu +−⋅+−+=+ ϕ              (27) 
 
 
3   Hardware Implementation of the 
Proposed DDFS 
In this section, the DDFS implemented by using the 
hybrid CORDIC algorithm is presented. Fig. 5 shows 
the 16-bit DDFS architecture consisting mainly of 
phase accumulator, phase calculator, and sine/cosine 
generator, which is different from the conventional 
architecture. It is noted that the accumulated error in 
the sine/cosine generator is to be corrected by using 
the 164× -bit correction table. Take into account 
DAC technology, hardware cost and practical 
applications, the word length of the propose DDFS is 
set to 16-bit. 
The hybrid CORDIC-based sine/cosine generator 
with recursively accumulated angle inϑ  is given by 
⎥⎦
⎤⎢⎣
⎡⎥⎦
⎤⎢⎣
⎡ −=⎥⎦
⎤⎢⎣
⎡
+
+
)(
)(
cossin
sincos
)1(
)1(
iy
ix
iy
ix
inin
inin
ϑϑ
ϑϑ
                      (28) 
where 
162
2πϑ accin Δ= , and accΔ is an integer number. 
(29) 
For convergence, the input angle of the scale-free 
CORDIC algorithm is restricted as follows: 
8
12
1
4
≅<∑− −w iinϑ                                                      (30) 
From the above two equations, we have 
1304
2
216 <⋅=Δ inacc ϑπ                                                (31) 
The architecture for the sine/cosine generator is 
shown in Fig. 5. In which three modified scaling-free 
CORDIC arithmetic units (MCORDIC-Type A) and 
two modified scaling-free radix-8 CORDIC 
arithmetic units (MCORDIC-Type B) are used. 
According to equation (23). 
The chip is synthesized by the TSMC 0.18 mμ 1P6M 
CMOS cell libraries [14]. The layout view of the 
proposed DDFS is shown in Figure 6. The core size 
obtained by the Synopsys® design analyzer 
is 2612612 mμ× . The power consumption obtained by 
the PrimePower® is 6.05 mW with a clock rate of 
100MHz at 1.8V. The tuning latency is 8 clock cycles. 
All the control signals are internally generated 
on-chip. The chip provides both high throughput and 
low gate count. 
 
 
4   Performance Analysis of the 
Proposed DDFS 
The number of correcting points versus the SFDRs 
with different )/( os FF ’s in the proposed DDFS is 
shown in Fig. 7. Due to trade-off between hardware 
cost and system performance, the correcting circuit 
with 16 points is implemented in the proposed DDFS. 
Thus, the SFDR of the proposed DDFS is more than 
84.4 dBc. Table 1 shows various comparisons of the 
proposed DDFS with other methods in [6] and [10]. 
As one can see, the proposed DDFS is superior in 
terms of SFDR, hardware cost, and power 
consumption. 
 
 
5   Conclusion 
The hybrid CORDIC-based multiplier-less DDFS 
architecture with small ROM and pipelined data path 
has been implemented. A SoC designed by    1P6M 
CMOS has been emulated on Xilinx XC2V6000 
FPGA. For 16-bit DDFS, the SFDR of sine and 
cosine using the proposed architecture are more than 
84.4 dBc. Simulation results show that the hybrid 
CORDIC-based approach is superior to the 
traditional approach to the design and 
implementation of DDFS, in terms of SFDR, power 
consumption, and hardware cost. The 16-bit DDFS is 
a reusable IP, which can be implemented in various 
processes with efficient uses of hardware resources 
for trade-offs of performance, area, and power 
consumption. 
 
 
References: 
[1] J. Vankka, “Methods of mapping from phase to 
sine amplitude in direct digital frequency 
synthesis,” IEEE Proceedings of the Frequency 
Control Symposium, June 5-7 1996, pp.942-950. 
Proceedings of the 8th WSEAS International Conference on Instrumentation, Measurement, Circuits and Systems
ISSN: 1790-5117 43 ISBN: 978-960-474-076-5
12 −→i 12 +→i
CSA
CLA
CSA
CLA
inx iny
outx outy
Latch Latch
MUX
i→ 12 −→i 12 +→i
MUX
i→
MUX MUX
1−→i1−→i
2−→i i→1−→i
CSA
CLA
CSA
CLA
inx iny
outx outy
Latch Latch
i→1−→i2−→i
R
e 
g
R
e
g
R
e
g
Phase
Accumulator
Phase
Calculator
Operation
Radix
Generator
Pipeline
CORDIC
Array
M
U
X
R
e 
g
16
[15:12]
16 16
4
16 3*7 3*7
16
16
16
16
16
16
16
16
Sin
output
Cos
output
accΔ
Sine/Cosine Generator
4
16
16
4
accΔ
Accumulator
accΔ
16
16
Correc-
tion
Table
16*2
2 2.5 3 3.5 4 4.5 5 5.5 6 6.5 7
-220
-200
-180
-160
-140
-120
-100
-80
-60
X: 4
Y: -89.69
X: 4
Y: -168.6
X: 4
Y: -84.42
Correction Points log2(N)
S
FD
R
 (d
B
c)
Fs/Fo=32768
Fs/Fo=16384
Fs/Fo=128
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
inϑ
 
 
 
 
 
 
 
 
 
 
 
 
Fig. 2 The proposed architecture of 
modified scaling-free CORDIC 
arithmetic for computing Hθ  
(MCORDIC-Type A)
Fig. 3 The architecture of modified 
scaling-free radix-8 CORDIC arithmetic for 
computing Lθ  (MCORDIC-Type B) 
Fig. 4 The 16-bit DDFS 
architecture 
Fig. 5 The architecture of 
sine/cosine generator (The inϑ is an 
accumulated angle) 
Fig. 6 The layout view of the proposed DDFS
Fig. 7 Plot of the number of correcting points 
versus SFDRs with different )/( os FF ’s 
Proceedings of the 8th WSEAS International Conference on Instrumentation, Measurement, Circuits and Systems
ISSN: 1790-5117 45 ISBN: 978-960-474-076-5
nk
N
nl
N
lll
ll
N
n
ll
WWWWNnxWNnx
WNnxNnxWNnx
WNnxWNnxnxlkX
8/84
2
4
44
18/
0
2
44
)))
8
7
()
8
5
(
)
8
3
()
8
(())
8
6
(
)
8
4
()
8
2
()((()8(
−−
−
−
=
++++
++++++
++++=+ ∑
(2) 
where 1)8/(,....,2,1,0 −= Nk  and .7,5,3,1=l  The 
split-radix 2/8 FFT algorithm, which combined with 
radix-2 and radix-4 proves effective to develop a 
reusable IP 128-point FFT core. 
 
2.2   CORDIC Algorithm  
The CORDIC algorithm in the circular coordinate 
system is as follows [16]. 
)(2)()1( iyixix ii
−−=+ σ                  (3) 
)(2)()1( ixiyiy ji
−+=+ σ                (4) 
)()()1( iiziz iασ−=+                  (5) 
ii −−= 2tan)( 1α                 (6) 
where ))(( izsigni =σ  with 0)( →iz  in the rotation 
mode, and ))(())(( iysignixsigni ⋅−=σ  with 
0)( →iy  in the vectoring mode. The scale factor: 
)(ik  is equal to ii
22 21 −+σ . After n micro-rotations, 
the product of the scale factors is given by 
∏∏ −
=
−
−
=
+==
1
0
2
1
0
1 21)(
n
i
i
n
i
ikK               (7) 
Notice that CORDIC in the circular coordinate 
system with rotation mode can be written by 
⎥⎦
⎤⎢⎣
⎡⎥⎦
⎤⎢⎣
⎡
−=⎥⎦
⎤⎢⎣
⎡
0
0
00
00
cossin
sincos
y
x
zz
zz
K
y
x
c
n
n ,              (8) 
where ⎥⎦
⎤⎢⎣
⎡
0
0
y
x
 and ⎥⎦
⎤⎢⎣
⎡
n
n
y
x
 are the input vector and the 
output vector, respectively, 0z is the rotation angle, 
and Kc is the scale factor. In [1], the circular rotation 
computation of CORDIC was used for complex 
multiplication with θje− , which is given by 
⎥⎦
⎤⎢⎣
⎡⎥⎦
⎤⎢⎣
⎡
−=⎥⎦
⎤⎢⎣
⎡
]Im[
]Re[
cossin
sincos
]Im[
]Re[
'
'
X
X
X
X
θθ
θθ
              (9) 
 
3   Reusable IP 128-Point 
CORDIC-Based Split-Radix FFT Core 
Figure 1 shows the proposed 128-point 
CORDIC-based split-radix FFT processor, which can 
be used as a reusable IP core for various FFT with 
multiples of 128 points. Notice that the modified 
split-radix 2/8 FFT butterfly processor and the 
ROM-free twiddle factor generator are used. In 
addition, an internal (128 32-bit) SRAM is used to 
store the input and output data for hardware 
efficiency, through the use of the in-place 
computation algorithm [1] 
 
3.1 CORDIC-Based Split-Radix 2/8 FFT 
Processor 
For the butterfly computation of the proposed 
CORDIC-based split-radix 2/8 FFT processor, 
sixteen complex additions, two constant 
multiplications (CM), and four CORDIC operations 
are needed, as shown in Figure 2. The CORDIC 
algorithm has been widely used in various DSP 
applications because of the hardware simplicity. 
According to equation (9), the twiddle factor 
multiplication of FFT can be considered a 2-D vector 
rotation in the circular coordinate system. Thus, 
CORDIC in the circular coordinate system with 
rotation mode is adopted to compute complex 
multiplications of FFT. 
The pipelined CORDIC arithmetic unit can be 
obtained by decomposing the CORDIC algorithm 
into a sequence of operational stages. In [17], we 
derived the error analysis of fixed-point CORDIC 
arithmetic, based on which, the number of the 
CORDIC stages can be determined effectively. For 
example, the number of the CORDIC stages is 12 if 
the overall relative error of 16-bit CORDIC 
arithmetic is required to be less than 310− . The 
pipelined CORDIC arithmetic unit with 12 stages and 
an additional pre-scalar stage. In which, the 
pre-calculated scaling factor 64676.1≈cK  and the 
Booth binary recoded format leads to 1.101001. The 
main concern for the design of the CORDIC 
arithmetic unit is throughput rather than latency. The 
proposed CORDIC arithmetic unit in terms of gate 
counts is less than 4 real multipliers significantly. In 
addition, the power consumption can be reduced 
significantly by using the proposed CORDIC 
arithmetic unit; it has been reduced by 30% 
according to the report of PrimePower® distributed 
by Synopsys. 
 As the twiddle factors: 18W  and 
3
8W  are equal to 
)1(
2
2 j−  and )1(
2
2 j+− , respectively, a 
complex number, say )( bja + , times 18W  or 38W  can 
be written by 
))()((
2
2
))1(
2
2
()( bajbajbja +−++=−×+          (10) 
))()((
2
2
))1(
2
2
()( bajbajbja ++−−=+−×+   (11) 
Proceedings of the 9th WSEAS International Conference on Multimedia Systems & Signal Processing
ISSN: 1790-5117 80 ISBN: 978-960-474-077-2
Reg.
Memory
128*32
Reg.
Modify Split-
Radix 2/8 FFT 
Architecture
Controller
8*32 8*32
32 3216
16
16
16
pipelined CORDIC rotations,” IEE Proc.-Vis. 
Image Signal Procss., Vol. 153, No. 4, Aug. 2006, 
pp.405-410. 
[2] J. C. Kuo, C. H. Wen, A. Y. Wu, 
“Implementation of a programmable 64/spl 
sim/2048-point FFT/IFFT processor for 
OFDM-based communication systems,”  
Proceedings of the 2003 International 
Symposium on Circuits and Systems, Volume 2, 
25-28 May 2003 pp.II-121 - II-124. 
[3] L. Xiaojin, Z. Lai, C. J. Cui, “A low power and 
small area FFT processor for OFDM 
demodulator,” IEEE Transactions on Consumer 
Electronics, Volume 53, Issue 2, May 2007, pp. 
274 – 277. 
[4] J. Lee, H. Lee, S. I. Cho, S. S. Choi, “A 
high-speed, low-complexity radix-216 FFT 
processor for MB-OFDM UWB systems,” 
Proceedings of the 2006 IEEE International 
Symposium on Circuits and Systems, May 2006, 
pp.  
[5] A. Cortes, I. Velez, J. F. Sevillano, A. Irizar, “An 
approach to simplify the design of IFFT/FFT 
cores for OFDM systems,” IEEE Transactions on 
Consumer Electronics, Volume 52, Issue 1,  Feb. 
2006, pp.26 – 32. 
[6] Y. H. Lee, T. H. Yu, K. K. Huang, A. Y. Wu, 
“Rapid IP design of variable-length cached-FFT 
processor for OFDM-based communication 
systems,” IEEE Workshop on Signal Processing 
Systems Design and Implementation, Oct. 2006 
pp.62-65. 
[7] C. L. Wey, W. C. Tang, S. Y. Lin, “Efficient 
memory-based FFT architectures for digital video 
broadcasting (DVB-T/H),” 2007 International 
Symposium on VLSI Design, Automation and Test, 
25-27 April 2007, pp.1-4.  
[8] Y. W. Lin, H. Y. Liu, C. Y. Lee, “A 1-GS/s 
FFT/IFFT processor for UWB applications,”  
IEEE Journal of Solid-State Circuits, Volume 40,  
Issue 8,  Aug. 2005, pp.1726-1735. 
[9] C. D. Thompson, “Fourier transform in VLSI,” 
IEEE Transactions on Computers, Vol.32, No. 11, 
1983, pp.1047-1057. 
[10] E. H. Wold, A. M. Despain, “Pipelined and 
parallel-pipelined FFT processor for VLSI 
implementation,” IEEE Transactions on 
Computers, Vol.33, No. 5, 1984, pp.414-426. 
[11] T. Widhe, “Efficient implementation of FFT 
processing elements,” Linkoping Studies in 
Science and Technology, Thesis No. 619, 
Linkoping University, Sweden, 1997. 
[12] P. Duhamel, H. Hollmann, “Implementation of 
"split-radix" FFT algorithms for complex, real, 
and real symmetric data.” IEEE International 
Conference on Acoustics, Speech, and Signal 
Processing, Volume 10, April 1985, pp.784 – 
787. 
[13] A .A. Petrovsky, S. L. Shkredov, “Automatic 
generation of split-radix 2-4 parallel-pipeline FFT 
processors: hardware reconfiguration and core 
optimizations,” 2006 International Symposium on 
Parallel Computing in Electrical Engineering, 
pp.181-186. 
[14] S. Bouguezel, M. O. Ahmad, M. N. S. Swamy, 
“A new radix-2/8 FFT algorithm for length-q/spl 
times/2/sup m/ DFTs,” IEEE Transactions on 
Circuits and Systems I: Fundamental Theory and 
Applications, Volume 51, Issue 9,  2004, 
pp.1723- 1732. 
[15] W. C. Yeh, C. W. Jen, “High-speed and 
low-power split-radix FFT.” IEEE Transactions 
on Acoustics, Speech, and Signal Processing, 
Volume 51, Issue 3,  March 2003, pp.864 – 874. 
[16] M. D. Ercegovac, T. Lang, “CORDIC algorithm 
and implementations.” Digital Arithmetic, 
Morgan Kaufmann Publishers, 2004, Chapter 11. 
[17] T. Y. Sung, H. C. Hsin, “Fixed-point error 
analysis of CORDIC arithmetic for 
special-purpose signal processors,” IEICE 
Transactions on Fundamentals of Electronics, 
Communications and Computer Sciences, 
Vol.E90-A, No.9, Sep. 2007, pp.2006-2013. 
[18] “TSMC 0.18 CMOS Design Libraries and 
Technical Data, v.3.2,” Taiwan Semiconductor 
Manufacturing Company, Hsinchu, Taiwan, and 
National Chip Implementation Center (CIC), 
National Science Council, Hsinchu, Taiwan, 
R.O.C., 2006. 
[19] Cadence design systems: 
http://www.cadence.com/products /pages/ 
default.aspx. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Fig. 1 The proposed 128-point CORDIC- based split-radix 
FFT processor  
Proceedings of the 9th WSEAS International Conference on Multimedia Systems & Signal Processing
ISSN: 1790-5117 82 ISBN: 978-960-474-077-2
Full-Twiddle Factor ROM
CORDIC Twiddle Factor Generator
ROM-free Twiddle Factor Generator (Sung, Hsin and Cheng, 2008)
8192-Point ROM
bit 16K4 ×
11-bit Adder 11-bit Shifter16-bit CORDIC 16-bit Shifter 16-bit Adder
bitK 18~ gates 200~gates 09~gates 05~gates 051~
16-bit Accumulator 16-bit Shifter 16-bit Shifter/Adder
gates 2200290~ ×+×gates 09~200gates~
16-bit Register
gates 32~
1bit~1gate
(T. Y. Sung, 2006) [1]
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
FFT Size Core Area Power 
Consumption 
Clock 
Rate 
128-point  228.2 mm  
80mW 
 
200MHz
256-point  237.2 mm  
84mW 
 
200MHz
512-poiint 249.2 mm  
88mW 
 
200MHz
1024-point 262.2 mm  
94mW 
 
200MHz
2048-point 281.2 mm  
99mW 
 
200MHz
4096-point 210.3 mm  
106mW 
 
200MHz
8192-point 262.3 mm  
117mW 
 
200MHz
Table 1 Hardware requirements of the full-ROM, the CORDIC 
twiddle factor generator [1], and the ROM-free twiddle factor 
generator 
Table 2 Core areas, power consumptions, clock rates of 
128-, 256-, 512-, 1024-, 2048-, 4096- and 8192-point FFT 
Proceedings of the 9th WSEAS International Conference on Multimedia Systems & Signal Processing
ISSN: 1790-5117 84 ISBN: 978-960-474-077-2
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                         98 年 05 月 26 日 
報告人姓名  宋志雲 
 
服務機構
及職稱 
中華大學微電子工程學系 
副教授 
 
     時間 
會議 
     地點 
98.05.20~98.05.22 
 
中國  杭州市 
本會核定
補助文號
計畫編號: NSC 97-2221-E-216-044 
會議 
名稱 
(英文) 9th WSEAS International Conference on Multimedia Systems & Signal 
Processing 
        8th WSEAS International Conference on Instrumentation, Measurement, 
Circuit and Systems 
發表 
論文 
題目 
(英文) High-SFDR and Multiplierless Direct Digital Frequency Synthesizer, 
       A Simple Rate Distortion Estimation for Embedded Block Coding, 
       Reconfigurable VLSI Architecture for FFT processor. 
報告內容應包括下列各項： 
一、參加會議經過 
發表論文三篇，分別發表於 9th WSEAS International Conference on Multimedia Systems & Signal 
Processing, 8th WSEAS International Conference on Instrumentation, Measurement, Circuit and 
Systems 並與與會人士討論及聽取議程主席之意見。 本研討會為 WSEAS 之重要研討會，
歷史悠久，至少有二十年以上之歷史。本人發表之論文接獲選為最佳論文，並邀請增加
篇幅在其期刊(EI)登出。本人發表之論文，引起大家極大興趣，會中廣泛討論內容。 
 
二、與會心得 
此一研討會為 WSEAS 重要研討會，與會人士均為一時之選。會中可認識相關領域的領
導人物，機會難得。論文如獲最佳論文，延伸後將獲得該學會之期刊(EI)刊登。 
 
三、考察參觀活動(無是項活動者省略) 
無 
 
四、建議 
鼓勵在教學之學校教師投稿此一研討會，因為有指標性意義。同時爭取 WSEAS 類似權
威性研討會之主辦權，以增加台灣之國際學術地位。 
 
五、攜回資料名稱及內容 
研討會之論文光碟及紙本論文集。 
 
 
 
六、其他 
 
 
 
 
)12(2
2
2)(1
2
)(1)(cos +−−=−≅ iiii ρββ                 (4) 
we have 
⎥⎦
⎤⎢⎣
⎡
⎥⎥⎦
⎤
⎢⎢⎣
⎡
−−
−=⎥⎦
⎤⎢⎣
⎡
+
+
+−−
−+−
)(
)(
2)(12)(
2)(2)(1
)1(
)1(
)12(2
)12(2
iy
ix
ii
ii
iy
ix
ii
ii
ρρ
ρρ
 
        (5) 
iiiziz −−=+ 2)()()1( ρ               (6) 
Fig. 2 shows the proposed architecture for the 
modified scaling-free CORDIC arithmetic, in which, 
eight shifters, two CSAs, two CLAs, two latches, and 
four MUXs are used; the shifters and MUXs are to 
determine )(iρ . 
 
2.2 The modified scaling-free radix-8 
CORDIC Algorithm 
By using the modified angle recoding method 
[12]-[13], the input angle ψ  can be divided as 
follows. 
∑−
=
−−=
1
1 2tan)(
w
pi
iiφψ                                           (7) 
where }1,0{)( ∈iφ , and w is the word length. The 
CORDIC iteration is therefore represented as 
⎥⎦
⎤⎢⎣
⎡
⎥⎥⎦
⎤
⎢⎢⎣
⎡
−=⎥⎦
⎤⎢⎣
⎡
+
+
−
−
)(
)(
12)(
2)(1
)1(
)1(
iy
ix
i
i
iy
ix
i
i
φ
φ                  (8) 
iiiziz −−−=+ 2tan)()()1( 1φ                  (9) 
Let { }2,1,0;3 ∈−= ccni . By using the Taylor series 
expansion, the absolute difference between 
)2(tan )3(1 cn−−−  and )2(tan2 31 nc −−  is given by 
Λ+⋅=−= −−−−−−− )3(331)3(1 2
3
12tan22tan cnnccnς   
        (10) 
where Λ is the remaining terms of the difference 
between )2(tan )3(1 cn−−− and )2(tan2 31 nc −− . Thus, we 
have 
3
2
3
2 3)3(3 icn −−− =≅ς                                          (11) 
For w -bit operands, ς  can be ignored in the 
following sense 
w−≤ 2ς                                       (12) 
Based on equations (11) and (12), we have 
w
i
−
−
≤ 2
3
2 3
                       (13) 
wi ≥+ 3log3 2                            (14) 
33
3log
3
3log 22 wwwi ≅⎥⎥
⎤⎢⎢
⎡ −=−≥                    (15) 
As a result, when 
3
wi > , three consecutive terms of 
equation (7) can be integrated into a single term as 
follows: 
)2(tan)3(
)2(tan)13()2(tan)23(
)3(1
)13(1)23(1
n
nn
n
nn
−−
−−−−−−
+
−+−
φ
φφ  
)2(tan)2)3(2)13(2)23(( 31012 nnnn −−⋅+⋅−+⋅−= φφφ  
)2(tan)( 31 nn −−= ϕ                 (16) 
where }1,0{)( ∈⋅φ , and therefore }7,,2,1,0{)( L∈nϕ . It 
follows that the resulting radix-8 CORDIC algorithm 
is represented as 
⎥⎦
⎤⎢⎣
⎡
⎥⎥⎦
⎤
⎢⎢⎣
⎡
⋅
⋅−=⎥⎦
⎤⎢⎣
⎡
+
+
−
−
)(
)(
12)(
2)(1)(
)1(
)1(
3
3
8 iy
ix
i
iiK
iy
ix
i
i
ϕ
ϕ     (17) 
iiiziz 31 2tan)()()1( −−−=+ ϕ               (18) 
2/162
8 )2)(1()(
iiiK −+= ϕ                                       (19) 
The scaling factor 8K  is given by 
⎡ ⎤
)(
13/
88 iKK
wi
pi
∏−=
=
=                (20) 
It can be shown that the scaling factor turns out to be 
equal to 1 when the input angle is less than 2/2 w− , 
and moreover, if the input angle is less than 3/2 w− , 
equation (18) can be rewritten as [19] 
iiiziz 32)()()1( −−=+ ϕ                 (21) 
 Fig. 3 depicts the proposed architecture for the 
modified scaling-free radix-8 CORDIC arithmetic. In 
which, six shifters, two CSAs, two CLAs, and two 
latches are used; the shifters and switches are to 
determine the radices for computations. Note that the 
number of processors is reduced, and system 
throughput is increased at the cost of hardware 
complexity. 
 
 
2.3 The proposed hybrid CORDIC Algorithm 
The input angle Ω  can be decomposed into a 
higher-angle HΩ  and a lower-angle LΩ  represented 
as 
⎡ ⎤ ⎡ ⎤
⎡ ⎤
⎡ ⎤ ⎡ ⎤∑∑ −−+
=
−⋅+−−
=
− +=Ω+Ω=Ω
13/)(2/
2/
)4/(31
12/
0
2 2)(2)(
uwu
ui
wiu
u
i
i
LH ii ϕρ      (22) 
where w is the word length with the first u bits being 
the most significant bits; HΩ  and LΩ  are computed 
by using the modified scaling-free CORDIC 
algorithm and the modified scaling-free radix-8 
CORDIC algorithm, respectively. For computation 
efficiency, the determination of u is as follows: 1) u 
must be an odd number to satisfy the MBE method, 
and 2) 
2
wu ≥  under the scaling-free constraint. Thus, 
we have 
Proceedings of the 8th WSEAS International Conference on Instrumentation, Measurement, Circuits and Systems
ISSN: 1790-5117 42 ISBN: 978-960-474-076-5
Table I Comparison with previous works
Phase 
accumulator + sin/cos generator Low pass filiter
Digital to analog 
converter
Phase increment
Fig. 1 The conventional DDFS architecture 
[2] S. C. Yi, K. T. Lee, J. J. Chen, C. H. Lin, "A low 
power efficient direct digital frequency 
synthesizer based on new two-level lookup 
table,” IEEE Canadian Conference on Electrical 
and Computer Engineering 2006, May 2006, 
pp.963-966. 
[3] D. A. Sunderland, R. A. Srauch, S. S. Wharfield, 
H. T. Peterson, C. R. Cole, "CMOS/SOS 
frequency synthesizer LSI circuit for spread 
spectrum communications,” IEEE Journal of 
Solid-State Circuits, Vol.19, No.4, August 1984, 
pp.497-506. 
[4] H. T. Nicholas, H. Samueli, B. Kim, "The 
optimization of direct digital frequency 
synthesizer performance in the presence of finite 
word length effects," IEEE 42nd Annual 
Frequency Control Symposium, June 1-3 1988, 
pp.357-363. 
[5] D. D. Caro, E. Napoli, A. G. M. Strollo, ”Direct 
digital frequency synthesizers with polynomial 
hyperfolding technique,” IEEE Transactions of 
Circuits and Systems-II: Express Briefs, Vol.51, 
No.7, July 2004, pp.337-344. 
[6] D. Fu, A. N. Willson, Jr. “A high-speed processor 
for digital sine/cosine generation and angle 
rotation” in Proc. 32nd Asilomar Conf. Signals, 
Systems and Computers, Vol.1 1998, pp.177-181 
[7] A. Torosyan, D. Fu, A. N. Willson, Jr, “A 
300-MHz quadrature direct digital 
synthesizer/mixer in 0.25-μm CMOS”  IEEE 
Journal of Solid-State Circuits, Volume 38, Issue 
6, June 2003 pp. 875 - 887 
[8] A. Madisetti, A. Y. Kwentus, A. N. Willson Jr, 
"A 100-MHz, 16-b, direct digital frequency 
synthesizer with a 100-dBc spurious-free 
dynamic range,” IEEE Journal of Solid-State 
Circuits, Vol.34, No.8, August 1999, 
pp.1034-1043. 
[9] E. Grayver, B. Daneshrad, “Direct digital 
synthesis using a modified CORDIC,” IEEE 
International Symposium on Circuits and Systems 
(ISCAS '98). Vol.5, May 1998, pp.241-244. 
[10] C. Y. Kang, E. E. Swartzlander Jr., 
“Digit-pipelined direct digital frequency 
synthesis based on differential CORDIC,” IEEE 
Transactions on Circuits and Systems I: Regular 
Papers, Vol.53, No.5, May 2006, pp.1035-1044. 
[11] T. Y. Sung, H. C. Hsin, “Design and simulation 
of reusable IP CORDIC core for special-purpose 
processors,” IET Computers & Digital 
Techniques, Vol.1, No.5, Sept. 2007, pp.581-589. 
[12] Y. H. Hu, S. Naganathan, “An angle recoding 
method for CORDIC algorithm implementation,” 
IEEE Transactions on Computers, Vol.42, No.1, 
January 1993, pp.99-102. 
[13] T. B. Juang, S. F. Hsiao, M. Y. Tsai, 
“Para-CORDIC: parallel CORDIC rotation 
algorithm,” IEEE Transactions on Circuits and 
Systems-I: Regular Papers, Vol.51, No.8, August 
2004, pp.1515-1524. 
[14] “TSMC 0.18 CMOS Design Libraries and 
Technical Data, v.3.2,” Taiwan Semiconductor 
Manufacturing Company, Hsinchu, Taiwan, and 
National Chip Implementation Center (CIC), 
National Science Council, Hsinchu, Taiwan, 
R.O.C., 2006. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CORDIC Based 
DDFS 
Madisetti 
[8] 1999 
Swartzlander 
[10] 2006 
This 
work 
2009 
Process ( mμ ) 1.0 0.13 0.18 
Core Area (mm2) 0.306 0.35 0.375 
Maximum 
Sampling Rate 
(MHz) 
80.4 1018 100 
Power Consumption 
(mw) 40.602 350 6.056 
 Power 
Consumption 
(mw/MHz) 
0.505 0.343 0.06 
SFDR (dBc) 81 90 84.4 
Output Resolution 
(bits) 16 16 16 
Tuning Latency   
 (clock cycles) 16 --  8 
Proceedings of the 8th WSEAS International Conference on Instrumentation, Measurement, Circuits and Systems
ISSN: 1790-5117 44 ISBN: 978-960-474-076-5
A Simple Rate Distortion Estimation for Embedded Block Coding
HSI-CHIN HSIN TZE-YUN SUNG
Department of Computer Science and Department of Microelectronics
Information Engineering Engineering
National United University Chung Hua University
1, Lien-Da, Miao-Li, 36003, Taiwan 707 Wu-Fu, Hsinchu 30012, Taiwan
hsin@nuu.edu.tw bobsung@chu.edu.tw
Abstract: - The embedded block coding with optimized truncation (EBCOT) algorithm has been adopted by the
JPEG2000 standard. In which, the post compression rate distortion (PCRD)optimization needs a large memory
space to store all the code streams of code blocks; however, code blocks of less importance might not be used for
the optimal decoded image at a bit rate. To avoid waste of computational power and memory space, a simple
context based rate distortion estimation (CBRDE) is proposed to arrange the scanning order of code blocks in an
adaptive manner. CBRDE is based on the MQ table, which is available at both encoder and decode. Thus, there
is no need to store and transmit the rate distortion information of code blocks. Experimental results show that the
rate distortion curves are almost convex; this demonstrates the benefit of the proposed CBRDE.
Key-Words: - image coding; wavelet transform; JPEG2000; EBCOT; CBRDE
1 Introduction
Wavelet transform offers many desirable properties,
e.g. progressive transmission and embedded coding,
which are suitable for image coding [1]-[3]. In
general, embedded code streams of an image are
organized in decreasing order of information
importance. The embedded block coding with
optimized truncation (EBCOT) algorithm has been
adopted by JPEG2000 [4], which is preferable to the
JPEG standard at the cost of increasing complexity
[5]. For real-time applications, dedicated hardware is
required to implement JPEG2000.
In EBCOT, the tier-1 algorithm applies
embedded block coding with an arithmetic coder to
each code block of the transform coefficients; the
tier-2 algorithm performs rate distortion control by
the post compression rate distortion (PCRD)
algorithm. One of the crucial implementation issues
of EBCOT is the design of PCRD, which requires a
large amount of memory space to store all the code
streams of code blocks with their respective rate
distortion information. As all the code blocks of an
image must be processed before PCRD, however,
some code blocks may not be needed to reconstruct
the optimal decoded image at a bit rate; this surely
leads to waste of computational power. In [6], Fang et
al. proposed a precompression rate distortion
optimization algorithm to reduce the memory space
by ignoring the unused code streams.
In this paper, we propose a context based rate
distortion estimation (CBRDE) to arrange the
scanning order of code blocks so that the available
coding bits can be allocated for the most significant
code block. The proposed CBRDE is based on the
MQ table of EBCOT, which is available at both
encoder and decoder. As a result, the scanning order
of code blocks can be also obtained at decoder, and
therefore transmission of the contributions of each
code block can be omitted. The remainder of this
paper proceeds as follows. In Section 2, wavelet
transform and EBCOT are reviewed briefly. Section
3 presents the proposed CBRDE algorithm to arrange
the code blocks of an image in an adaptive manner.
Experimental results are given in Section 4, and
conclusion can be found in Section 5.
2 Wavelet Transform and EBCOT
Wavelet transform provides many desirable
properties such as multiresolution analysis, subband
decomposition with orientation selectivity, joint
space-spatial frequency localization, self similarity
across subbands of the same orientation, and energy
clustering within each subband. In this section,
wavelet transform and the EBCOT algorithm are
reviewed briefly.
2.1 Wavelet transform
The wavelet transform of a signal, )(nS , at
resolution is as follows.






k
k
kngkSnD
knhkSnS
)2()()(
)2()()(
1
1


(1)
Proceedings of the 9th WSEAS International Conference on Multimedia Systems & Signal Processing
ISSN: 1790-5117 43 ISBN: 978-960-474-077-2
to decoder. Is there any simple way to solve the
above-mentioned questions?
As one might expect, the first question can be
solved effectively by using the rate distortion curve
of code blocks. The optimal scanning strategy turns
out to take the code block with the steepest rate
distortion slope as the first to be coded. In other
words, the available coding bits should be first
allocated for the code block with the largest amount
of distortion decrease per coding bit. Take the second
question into consideration; estimated rate distortion
slope is preferable to the true one for arranging the
scanning order of code blocks. Since the MQ table of
probabilities of more probable symbol (MPS) and
less probable symbol (LPS) is available at both
encoder and decoder, an efficient, context based rate
distortion estimation (CBRDE) is therefore proposed
to estimate the rate distortion slope of code blocks,
which is given in the following subsection.
3.2 Proposed CBRDE
For each bit-plane, code blocks with significant rates
of distortion decrease per coding bit should be coded
as early as possible. In order to avoid transmitting the
scanning order of code blocks from encoder to
decoder, the estimated rate distortion slope of a code
block is thus adopted, which is given by
 
 RE
DE
S

 (3)
where D and R denote the amount of distortion
decrease and the number of coding bits, respectively,
and E is an expectation operator. Though most of
correlation between images pixels can be removed by
wavelet transform, there may still be residual
correlation between neighboring wavelet coefficients.
To incorporate with the framework of EBCOT, the
proposed CBRDE for code blocks is based on the
MQ table, which is available at both encoder and
decoder. Specifically, let iB denote the
thi code
block (in wavelet domain), ),( nmbij the
thj
significant bit of a coefficient at position: ),( nm in
iB , and  ),(
,
nmbB ij
nm
ij  . The proposed CBRDE
for ijB is as follows.
))n,m(b(H
))n,m(b(prob
S
ij
n,m
n,m
ij
ij 
 

1
(4)
where )),(( nmbH ij denotes the entropy of
),( nmbij given by
))0((log)0(
))1((log)1()(
2
2


bprobbprob
bprobbprobbH
(5)
The numerator of equation (4) is proportional to
the amount of distortion decrease; and the
denominator is proportional to the number of coding
bits. It is noted that probability models of ),( nmbij
can be obtained directively from the MQ table, and
therefore the computational complexity is nothing
but one lookup table operation.
Take the commonly used Lena image as an
example, the true distortion: D and coding bits: R ,
and their respective estimates  DE  and  RE  (for
a given bit-plane) are shown in Fig. 2. As one can see,
the nearly proportional relationship between the
horizontal axis (true values) and the vertical axis
(estimated values) demonstrates the potential of the
proposed CBRDE.
3.3 Embedded block coding with CBRDE
Figure 3 depicts the proposed image encoder using
embedded block coding (EBC) with adaptive block
ordering (ABO). In which, the EBC algorithm is the
same as the first tier of EBCOT; however, ABO with
CBRDE replaces the second tier of EBCOT, i.e.
PCRD. With the adaptation of the MQ table, the code
blocks of an image can be arranged according to their
respective estimated rate distortion slopes and then
coded in an adaptive manner. Figure 4 depicts the
image decoder. Recall that the rate distortion slopes
of code blocks can be also estimated at decoder. Thus,
the overhead of transmitting the scanning order of
code blocks from encoder to decoder is unnecessary;
this is beneficial to the communication applications.
4 Experimental Results
The proposed CBRDE for arranging the scanning
order of code blocks is valuated on grayscale images.
The test images, namely Barbara and Fingerprint are
shown in Fig. 5. The biorthogonal Daubechies
wavelet with 9/7-tap filters is used. The compression
rate is measured in bits per pixel (bpp). The distortion
is defined as mean squared error (MSE). The
compression rates and MSE values are used to plot
the rate distortion curves. To avoid the overhead of
transmitting the contributions of code blocks, the
second tier of EBCOT, i.e. PCRD is replaced by the
CBRDE-based ABO. For comparison, as most of
images’ energies are concentrated in the low
frequency subbands, the first tier of EBCOT
incorporated with a fixed scanning order starting
from the lowest frequency subband is evaluated.
Proceedings of the 9th WSEAS International Conference on Multimedia Systems & Signal Processing
ISSN: 1790-5117 45 ISBN: 978-960-474-077-2
0 50 100 150 200 250
0
20
40
60
80
100
120
140
true
bit plane 7
(a)
0 50 100 150 200 250 300 350 400 450 500
0
50
100
150
200
250
300
350
true
bit plane 7
(b)
Fig. 2 Performance of CBRDE applied to Lena
image; (a) horizontal axis: true D , vertical axis:
estimated  DE  ; (b) horizontal axis: true R ,
vertical axis: estimated  RE  .
Fig. 3 Proposed image encoder using EBC with ABO
Fig. 4 Proposed image decoder using EBC with ABO
(a)
(b)
Fig. 5 Test images (a) Barbara (b) Fingerprint
DeQBPCMQ
CBRDE ABO
EBC
IDWT
Decoded
image
Q BPC MQ
CBRDEABO
EBC
DWT
Image Bit-stream
Bit-stream
Proceedings of the 9th WSEAS International Conference on Multimedia Systems & Signal Processing
ISSN: 1790-5117 47 ISBN: 978-960-474-077-2
Reconfigurable VLSI Architecture for FFT Processor 
 
Tze-Yun Sung 
Department of Microelectronics 
Engineering  
Chung Hua University 
707, Sec. 2, Wufu Road 
Hsinchu City 300-12, Tawan 
bobsung@chu.edu.tw 
Hsi-Chin Hsin 
Department of Computer Science 
and Information Engineering 
National United University 
Miaoli 36003, Taiwan 
hsin@nuu.edu.tw 
 
 
Abstract: - This paper presents a CORDIC (Coordinate Rotation Digital Computer)-based split-radix fast 
Fourier transform (FFT) core for OFDM systems, for example, Ultra Wide Band (UWB), Asymmetric Digital 
Subscriber Line (ADSL), Digital Audio Broadcasting (DAB), Digital Video Broadcasting – Terrestrial 
(DVB-T), Very High Bitrate DSL (VHDSL), and Worldwide Interoperability for Microwave Access (WiMAX). 
High-speed 128/256/512/1024/ 2048/4096/8192-point FFT processors have been implemented by 0.18  (1p6m) 
at 1.8V, in which all the control signals are generated internally. These FFT processors outperform the 
conventional ones in terms of both power consumption and core area. 
 
Key-Words: - IP, FFT, split-radix, CORDIC, OFDM. 
 
1   Introduction 
High-performance fast Fourier transform (FFT) 
processor is needed especially for real-time digital 
signal processing applications. Specifically, the 
computation of discrete Fourier transform (DFT) 
ranging from 128 to 8192 points is required for the 
orthogonal frequency division multiplexer (OFDM) 
of the following standards: Ultra Wide Band (UWB), 
Asymmetric Digital Subscriber Line (ADSL), Digital 
Audio Broadcasting (DAB), Digital Video 
Broadcasting – Terrestrial (DVB-T), Very High 
Bitrate DSL (VHDSL) and Worldwide 
Interoperability for Microwave Access (WiMAX) 
[1]-[8]. Thompson [9] proposed an efficient VLSI 
architecture for FFT in 1983. Wold and Despain [10] 
proposed pipelined and parallel-pipelined FFT for 
VLSI implementations in 1984. Widhe [11] 
developed efficient processing elements of FFT in 
1997. To reduce the computation complexity, the 
split-radix 2/4, 2/8, and 2/16 FFT algorithms were 
proposed in [12]-[15]. 
As the Booth multiplier is not suitable for hardware 
implementations of large FFT, we propose the 
CORDIC-based multiplier. Moreover, we develop a 
ROM-free twiddle factor generator using simple 
shifters and adders only [1], which obviates the need 
to store all the twiddle factors in a large ROM space. 
As a result, the proposed CORDIC-based split-radix 
FFT core with the ROM-free twiddle factor generator 
is suitable for the wireless local area network 
(WLAN) applications. In this paper, a 
high-performance 
128/256/512/1024/2048/4096/8192-point FFT 
processor is presented for the European and Japanese 
standards. The remainder of this paper proceeds as 
follows. In Section II, the split-radix 2/8 FFT 
algorithm and the CORDIC algorithm are reviewed 
briefly. In Section III, the reusable IP 128-point 
CORDIC-based split-radix FFT core is proposed. In 
Section IV, the hardware implementations of FFT 
processors are described. The performance analysis 
is presented in Section V. Finally, the conclusion is 
given in Section VI. 
 
 
2   Review of Split-Radix FFT and 
CORDIC Algorithm 
2.1 Split-Radix FFT 
The idea behind the split-radix FFT algorithm is to 
compute the even and odd terms of FFT separately. 
The even term of the split-radix 2/8 FFT algorithm is 
given by 
  ))
2
()(()2( 2/
12/
0
nk
N
N
n
WNnxnxkX ∑−
=
++=             (1) 
where 2/
2
2/
N
j
N eW
π−=  and .1)2/(,....,2,1,0 −= Nk  
The odd term is as follows: 
The National Science Council of Taiwan, under Grant
NSC97-2221-E-216-044, and the Chung Hua University, Hsinchu, Taiwan, 
under Contract CHU-NSC97-2221-E-216-044 supported this work. 
Proceedings of the 9th WSEAS International Conference on Multimedia Systems & Signal Processing
ISSN: 1790-5117 79 ISBN: 978-960-474-077-2
where 
2
2
 can be represented as 0101010.1  using 
the Booth binary recoded form (BBRF). Thus, the 
CM unit can be implemented by using simple adders 
and shifters only. Figure 3 shows the pipelined CM 
architecture, which uses three subtractions/additions 
and therefore improves on the computation speed 
significantly. 
Based on the above-mentioned CORDIC arithmetic 
unit and CM unit, the computational circuit and 
hardware architecture of the CORDIC-based 
split-radix 2/8 FFT butterfly computation are realized. 
As one can see, the pipelined CORDIC arithmetic 
unit aims at increasing the throughput of complex 
multiplications..  
 
3.2 ROM-Free Twiddle Factor Generator 
In the conventional FFT processor, a large ROM 
space is needed to store all the twiddle factors. To 
reduce the chip area, a twiddle factor generator is 
thus proposed. Figure 4 shows the ROM-free twiddle 
factor generator using simple adders and shifters for 
128-point FFT. In which, the 16-bit accumulator is to 
generate the value πn2  for each index n; 
12 3log2 −= −Nn , the 16-bit shifter is to divide πn2  by 
N, and the 16-bit shifter/adder is to produce the 
twiddle factors: nN
1θ , nN3θ , nN5θ  and nN7θ . By using 
the twiddle factor generator, the chip area and power 
consumption can be reduced significantly at the cost 
of an additional logic circuit. Table 1 shows the gate 
counts of the full-ROM storing all the twiddle factors, 
the CORDIC twiddle factor generator [1] and the 
ROM-free twiddle factor generator. 
 
4   Implementation of FFT Processors 
The 128/256/512/1024/2048/4096/8192- point FFT 
processors. In which, the radix-2 and split-radix 2/4 
butterfly processors [1] using the pipelined CORDIC 
arithmetic units and twiddle factor generators are 
implemented; and moreover, two memory banks 
(4096/2048/1024/512/256/0 × 32-bit and 
8192/4096/2048/1024/512/256/128 × 32-bit) are 
allocated for increased efficiency by using the 
in-place computation algorithm [1]. Hardware 
architecture is shown in Figure 5. 
 The hardware code written in Verilog® is running on 
a workstation with the ModelSim® simulation tool 
and Synopsys® synthesis tool (design compiler). The 
chips are synthesized by the TSMC 0.18 mμ  1p6m 
CMOS cell libraries [18]. The physical circuit is 
synthesized by the Astro® tool. The circuits are 
evaluated by DRC, LVS and PVS [19]. 
 The layout view of the8192-point FFT processor is 
shown in Figure 6. The core areas, power 
consumptions, clock rates of 128-point, 256-point, 
512-point, 1024-point, 2048-point, 4096-point and 
8192-point FFT processors are shown in Table 2. All 
the control signals are internally generated on-chip. 
The chip provides both high throughput and low gate 
count. 
 
5   Performance Analysis of The 
Proposed FFT Architecture 
FFT processors used to compute 128/256/512/1024/ 
2048/4096/8192-point FFT are composed mainly of 
the 128-point CORDIC-based split-radix 2/8 FFT 
core; the computation complexity using a single 
128-point FFT core is )6/(NO  for N-point FFT. The 
log-log plot of the CORDIC computations versus the 
number of FFT points is shown in Figure 7. As one 
can see, the proposed FFT architecture is able to 
improve the power consumption and computation 
speed significantly. 
 
6 Conclusion 
This paper presents low-power and high-speed FFT 
processors based on CORDIC and split-radix 
techniques for OFDM systems. The architectures are 
mainly based on a reusable IP 128-point 
CORDIC-based split-radix FFT core. The pipelined 
CORDIC arithmetic unit is used to compute the 
complex multiplications involved in FFT, and 
moreover the required twiddle factors are obtained by 
using the proposed ROM-free twiddle factor 
generator rather than storing them in a large ROM 
space. 
 The CORDIC-based 
128/256/512/1024/2048/4096/8192- point FFT 
processors have been implemented by 0.18 mμ  
CMOS, which take 395 sμ , 176.8 sμ , 77.9 sμ , 
33.6 sμ , 14 sμ , 5.5 sμ  and 1.88 sμ  to compute 
8192-point, 4096-point, 2048-poin, 1024-point, 
512-point, 256-point and 128-point FFT, 
respectively. 
 The CORDIC-based FFT processors are designed by 
using the portable and reusable Verilog®. The 
128-point FFT core is a reusable intellectual property 
(IP), which can be implemented in various processes 
and combined with an efficient use of hardware 
resources for the trade-offs of performance, area, and 
power consumption. 
 
 
References: 
[1] T. Y. Sung, “Memory-efficient and high-speed 
split-radix FFT/IFFT processor based on 
Proceedings of the 9th WSEAS International Conference on Multimedia Systems & Signal Processing
ISSN: 1790-5117 81 ISBN: 978-960-474-077-2
-1
-1
-1
-1
-1
-1
-1 -1
)(nx
)8/( Nnx +
)4/( Nnx +
)8/3( Nnx +
)2/( Nnx +
)8/5( Nnx +
)4/3( Nnx +
)8/7( Nnx +
j−
j−
n
NW
n
NW
3
n
NW
5
n
NW
7
)18( +kX
)38( +kX
)58( +kX
)78( +kX
CM
8(1)
CM
8(3)
CORDIC
CORDIC
CORDIC
CORDIC
)8( ka
)28( +ka
)48( +ka
)68( +ka
A d d S u b
]R e [X ]I m [ X
S h i f t e r  2 /  S u b
L a t c h L a t c h
L a t c h L a t c h
M u x
]'I m [
2
2
_]'R e [
2
2 XX
S h i f t e r  2 /  S u b
S h i f te r  4 /  S u b S h i f t e r  4 /  S u b
16-bit Accumulator
16-bit Reg.
16-bit Shifter
16-bit Shifter/Adder
n
N
1θ nN3θnN5θ nN7θ
Control
π2
4
8 16
16
16
16 16 16 16
2
2
                                                                                     8192-point FFT Processor
                                                                      4096-point FFT Processor
                                                        2048-point FFT Processor
                                           1024-point FFT Processor
                           512-point FFT Processor
            256-point FFT Processor
128-point
FFT Processor
IP
R
a
d
i
x
2
S
P
l
i
t
2/4
P/SS/P
S
P
l
i
t
2/8
S
P
l
i
t
2/8
S
P
l
i
t
2/8
S
P
l
i
t
2/8
4096/2048/1024/512/256/0*32
Internal Memory
8192/4096/2048/1024/512/256/128*32
External Memory
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Fig. 2 Data flow of the butterfly computation of the modified 
split-radix 2/8 FFT 
Fig. 3 Constant multiplier (CM) architecture for the 
modified split-radix 2/8 FFT 
Fig. 4 Proposed ROM-free twiddle factor generator for 128-point 
FFT 
Fig. 5 Hardware architecture of the 128/256/512/1024/2048 
/4096 /8192-point FFT processor 
Fig. 6 Layout view of the 8192-point FFT processor 
Fig. 7 Log-log plot of the CORDIC computations versus 
the number of FFT points 
Proceedings of the 9th WSEAS International Conference on Multimedia Systems & Signal Processing
ISSN: 1790-5117 83 ISBN: 978-960-474-077-2
表 Y04 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                         98 年 05 月 26 日 
報告人姓名  宋志雲 
 
服務機構
及職稱 
中華大學微電子工程學系 
副教授 
 
     時間 
會議 
     地點 
98.05.20~98.05.22 
 
中國  杭州市 
本會核定
補助文號
計畫編號: NSC 97-2221-E-216-044 
會議 
名稱 
(英文) 9th WSEAS International Conference on Multimedia Systems & Signal 
Processing 
        8th WSEAS International Conference on Instrumentation, Measurement, 
Circuit and Systems 
發表 
論文 
題目 
(英文) High-SFDR and Multiplierless Direct Digital Frequency Synthesizer, 
       A Simple Rate Distortion Estimation for Embedded Block Coding, 
       Reconfigurable VLSI Architecture for FFT processor. 
報告內容應包括下列各項： 
一、參加會議經過 
發表論文三篇，分別發表於 9th WSEAS International Conference on Multimedia Systems & Signal 
Processing, 8th WSEAS International Conference on Instrumentation, Measurement, Circuit and 
Systems 並與與會人士討論及聽取議程主席之意見。 本研討會為 WSEAS 之重要研討會，
歷史悠久，至少有二十年以上之歷史。本人發表之論文接獲選為最佳論文，並邀請增加
篇幅在其期刊(EI)登出。本人發表之論文，引起大家極大興趣，會中廣泛討論內容。 
 
二、與會心得 
此一研討會為 WSEAS 重要研討會，與會人士均為一時之選。會中可認識相關領域的領
導人物，機會難得。論文如獲最佳論文，延伸後將獲得該學會之期刊(EI)刊登。 
 
三、考察參觀活動(無是項活動者省略) 
無 
 
四、建議 
鼓勵在教學之學校教師投稿此一研討會，因為有指標性意義。同時爭取 WSEAS 類似權
威性研討會之主辦權，以增加台灣之國際學術地位。 
 
五、攜回資料名稱及內容 
研討會之論文光碟及紙本論文集。 
 
 
 
六、其他 
 
 
 
 
附件三
 
)12(2
2
2)(1
2
)(1)(cos +−−=−≅ iiii ρββ                 (4) 
we have 
⎥⎦
⎤⎢⎣
⎡
⎥⎥⎦
⎤
⎢⎢⎣
⎡
−−
−=⎥⎦
⎤⎢⎣
⎡
+
+
+−−
−+−
)(
)(
2)(12)(
2)(2)(1
)1(
)1(
)12(2
)12(2
iy
ix
ii
ii
iy
ix
ii
ii
ρρ
ρρ
 
        (5) 
iiiziz −−=+ 2)()()1( ρ               (6) 
Fig. 2 shows the proposed architecture for the 
modified scaling-free CORDIC arithmetic, in which, 
eight shifters, two CSAs, two CLAs, two latches, and 
four MUXs are used; the shifters and MUXs are to 
determine )(iρ . 
 
2.2 The modified scaling-free radix-8 
CORDIC Algorithm 
By using the modified angle recoding method 
[12]-[13], the input angle ψ  can be divided as 
follows. 
∑−
=
−−=
1
1 2tan)(
w
pi
iiφψ                                           (7) 
where }1,0{)( ∈iφ , and w is the word length. The 
CORDIC iteration is therefore represented as 
⎥⎦
⎤⎢⎣
⎡
⎥⎥⎦
⎤
⎢⎢⎣
⎡
−=⎥⎦
⎤⎢⎣
⎡
+
+
−
−
)(
)(
12)(
2)(1
)1(
)1(
iy
ix
i
i
iy
ix
i
i
φ
φ                  (8) 
iiiziz −−−=+ 2tan)()()1( 1φ                  (9) 
Let { }2,1,0;3 ∈−= ccni . By using the Taylor series 
expansion, the absolute difference between 
)2(tan )3(1 cn−−−  and )2(tan2 31 nc −−  is given by 
Λ+⋅=−= −−−−−−− )3(331)3(1 2
3
12tan22tan cnnccnς   
        (10) 
where Λ is the remaining terms of the difference 
between )2(tan )3(1 cn−−− and )2(tan2 31 nc −− . Thus, we 
have 
3
2
3
2 3)3(3 icn −−− =≅ς                                          (11) 
For w -bit operands, ς  can be ignored in the 
following sense 
w−≤ 2ς                                       (12) 
Based on equations (11) and (12), we have 
w
i
−
−
≤ 2
3
2 3
                       (13) 
wi ≥+ 3log3 2                            (14) 
33
3log
3
3log 22 wwwi ≅⎥⎥
⎤⎢⎢
⎡ −=−≥                    (15) 
As a result, when 
3
wi > , three consecutive terms of 
equation (7) can be integrated into a single term as 
follows: 
)2(tan)3(
)2(tan)13()2(tan)23(
)3(1
)13(1)23(1
n
nn
n
nn
−−
−−−−−−
+
−+−
φ
φφ  
)2(tan)2)3(2)13(2)23(( 31012 nnnn −−⋅+⋅−+⋅−= φφφ  
)2(tan)( 31 nn −−= ϕ                 (16) 
where }1,0{)( ∈⋅φ , and therefore }7,,2,1,0{)( L∈nϕ . It 
follows that the resulting radix-8 CORDIC algorithm 
is represented as 
⎥⎦
⎤⎢⎣
⎡
⎥⎥⎦
⎤
⎢⎢⎣
⎡
⋅
⋅−=⎥⎦
⎤⎢⎣
⎡
+
+
−
−
)(
)(
12)(
2)(1)(
)1(
)1(
3
3
8 iy
ix
i
iiK
iy
ix
i
i
ϕ
ϕ     (17) 
iiiziz 31 2tan)()()1( −−−=+ ϕ               (18) 
2/162
8 )2)(1()(
iiiK −+= ϕ                                       (19) 
The scaling factor 8K  is given by 
⎡ ⎤
)(
13/
88 iKK
wi
pi
∏−=
=
=                (20) 
It can be shown that the scaling factor turns out to be 
equal to 1 when the input angle is less than 2/2 w− , 
and moreover, if the input angle is less than 3/2 w− , 
equation (18) can be rewritten as [19] 
iiiziz 32)()()1( −−=+ ϕ                 (21) 
 Fig. 3 depicts the proposed architecture for the 
modified scaling-free radix-8 CORDIC arithmetic. In 
which, six shifters, two CSAs, two CLAs, and two 
latches are used; the shifters and switches are to 
determine the radices for computations. Note that the 
number of processors is reduced, and system 
throughput is increased at the cost of hardware 
complexity. 
 
 
2.3 The proposed hybrid CORDIC Algorithm 
The input angle Ω  can be decomposed into a 
higher-angle HΩ  and a lower-angle LΩ  represented 
as 
⎡ ⎤ ⎡ ⎤
⎡ ⎤
⎡ ⎤ ⎡ ⎤∑∑ −−+
=
−⋅+−−
=
− +=Ω+Ω=Ω
13/)(2/
2/
)4/(31
12/
0
2 2)(2)(
uwu
ui
wiu
u
i
i
LH ii ϕρ      (22) 
where w is the word length with the first u bits being 
the most significant bits; HΩ  and LΩ  are computed 
by using the modified scaling-free CORDIC 
algorithm and the modified scaling-free radix-8 
CORDIC algorithm, respectively. For computation 
efficiency, the determination of u is as follows: 1) u 
must be an odd number to satisfy the MBE method, 
and 2) 
2
wu ≥  under the scaling-free constraint. Thus, 
we have 
Proceedings of the 8th WSEAS International Conference on Instrumentation, Measurement, Circuits and Systems
ISSN: 1790-5117 42 ISBN: 978-960-474-076-5
Table I Comparison with previous works
Phase 
accumulator + sin/cos generator Low pass filiter
Digital to analog 
converter
Phase increment
Fig. 1 The conventional DDFS architecture 
[2] S. C. Yi, K. T. Lee, J. J. Chen, C. H. Lin, "A low 
power efficient direct digital frequency 
synthesizer based on new two-level lookup 
table,” IEEE Canadian Conference on Electrical 
and Computer Engineering 2006, May 2006, 
pp.963-966. 
[3] D. A. Sunderland, R. A. Srauch, S. S. Wharfield, 
H. T. Peterson, C. R. Cole, "CMOS/SOS 
frequency synthesizer LSI circuit for spread 
spectrum communications,” IEEE Journal of 
Solid-State Circuits, Vol.19, No.4, August 1984, 
pp.497-506. 
[4] H. T. Nicholas, H. Samueli, B. Kim, "The 
optimization of direct digital frequency 
synthesizer performance in the presence of finite 
word length effects," IEEE 42nd Annual 
Frequency Control Symposium, June 1-3 1988, 
pp.357-363. 
[5] D. D. Caro, E. Napoli, A. G. M. Strollo, ”Direct 
digital frequency synthesizers with polynomial 
hyperfolding technique,” IEEE Transactions of 
Circuits and Systems-II: Express Briefs, Vol.51, 
No.7, July 2004, pp.337-344. 
[6] D. Fu, A. N. Willson, Jr. “A high-speed processor 
for digital sine/cosine generation and angle 
rotation” in Proc. 32nd Asilomar Conf. Signals, 
Systems and Computers, Vol.1 1998, pp.177-181 
[7] A. Torosyan, D. Fu, A. N. Willson, Jr, “A 
300-MHz quadrature direct digital 
synthesizer/mixer in 0.25-μm CMOS”  IEEE 
Journal of Solid-State Circuits, Volume 38, Issue 
6, June 2003 pp. 875 - 887 
[8] A. Madisetti, A. Y. Kwentus, A. N. Willson Jr, 
"A 100-MHz, 16-b, direct digital frequency 
synthesizer with a 100-dBc spurious-free 
dynamic range,” IEEE Journal of Solid-State 
Circuits, Vol.34, No.8, August 1999, 
pp.1034-1043. 
[9] E. Grayver, B. Daneshrad, “Direct digital 
synthesis using a modified CORDIC,” IEEE 
International Symposium on Circuits and Systems 
(ISCAS '98). Vol.5, May 1998, pp.241-244. 
[10] C. Y. Kang, E. E. Swartzlander Jr., 
“Digit-pipelined direct digital frequency 
synthesis based on differential CORDIC,” IEEE 
Transactions on Circuits and Systems I: Regular 
Papers, Vol.53, No.5, May 2006, pp.1035-1044. 
[11] T. Y. Sung, H. C. Hsin, “Design and simulation 
of reusable IP CORDIC core for special-purpose 
processors,” IET Computers & Digital 
Techniques, Vol.1, No.5, Sept. 2007, pp.581-589. 
[12] Y. H. Hu, S. Naganathan, “An angle recoding 
method for CORDIC algorithm implementation,” 
IEEE Transactions on Computers, Vol.42, No.1, 
January 1993, pp.99-102. 
[13] T. B. Juang, S. F. Hsiao, M. Y. Tsai, 
“Para-CORDIC: parallel CORDIC rotation 
algorithm,” IEEE Transactions on Circuits and 
Systems-I: Regular Papers, Vol.51, No.8, August 
2004, pp.1515-1524. 
[14] “TSMC 0.18 CMOS Design Libraries and 
Technical Data, v.3.2,” Taiwan Semiconductor 
Manufacturing Company, Hsinchu, Taiwan, and 
National Chip Implementation Center (CIC), 
National Science Council, Hsinchu, Taiwan, 
R.O.C., 2006. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
CORDIC Based 
DDFS 
Madisetti 
[8] 1999 
Swartzlander 
[10] 2006 
This 
work 
2009 
Process ( mμ ) 1.0 0.13 0.18 
Core Area (mm2) 0.306 0.35 0.375 
Maximum 
Sampling Rate 
(MHz) 
80.4 1018 100 
Power Consumption 
(mw) 40.602 350 6.056 
 Power 
Consumption 
(mw/MHz) 
0.505 0.343 0.06 
SFDR (dBc) 81 90 84.4 
Output Resolution 
(bits) 16 16 16 
Tuning Latency   
 (clock cycles) 16 --  8 
Proceedings of the 8th WSEAS International Conference on Instrumentation, Measurement, Circuits and Systems
ISSN: 1790-5117 44 ISBN: 978-960-474-076-5
A Simple Rate Distortion Estimation for Embedded Block Coding
HSI-CHIN HSIN TZE-YUN SUNG
Department of Computer Science and Department of Microelectronics
Information Engineering Engineering
National United University Chung Hua University
1, Lien-Da, Miao-Li, 36003, Taiwan 707 Wu-Fu, Hsinchu 30012, Taiwan
hsin@nuu.edu.tw bobsung@chu.edu.tw
Abstract: - The embedded block coding with optimized truncation (EBCOT) algorithm has been adopted by the
JPEG2000 standard. In which, the post compression rate distortion (PCRD)optimization needs a large memory
space to store all the code streams of code blocks; however, code blocks of less importance might not be used for
the optimal decoded image at a bit rate. To avoid waste of computational power and memory space, a simple
context based rate distortion estimation (CBRDE) is proposed to arrange the scanning order of code blocks in an
adaptive manner. CBRDE is based on the MQ table, which is available at both encoder and decode. Thus, there
is no need to store and transmit the rate distortion information of code blocks. Experimental results show that the
rate distortion curves are almost convex; this demonstrates the benefit of the proposed CBRDE.
Key-Words: - image coding; wavelet transform; JPEG2000; EBCOT; CBRDE
1 Introduction
Wavelet transform offers many desirable properties,
e.g. progressive transmission and embedded coding,
which are suitable for image coding [1]-[3]. In
general, embedded code streams of an image are
organized in decreasing order of information
importance. The embedded block coding with
optimized truncation (EBCOT) algorithm has been
adopted by JPEG2000 [4], which is preferable to the
JPEG standard at the cost of increasing complexity
[5]. For real-time applications, dedicated hardware is
required to implement JPEG2000.
In EBCOT, the tier-1 algorithm applies
embedded block coding with an arithmetic coder to
each code block of the transform coefficients; the
tier-2 algorithm performs rate distortion control by
the post compression rate distortion (PCRD)
algorithm. One of the crucial implementation issues
of EBCOT is the design of PCRD, which requires a
large amount of memory space to store all the code
streams of code blocks with their respective rate
distortion information. As all the code blocks of an
image must be processed before PCRD, however,
some code blocks may not be needed to reconstruct
the optimal decoded image at a bit rate; this surely
leads to waste of computational power. In [6], Fang et
al. proposed a precompression rate distortion
optimization algorithm to reduce the memory space
by ignoring the unused code streams.
In this paper, we propose a context based rate
distortion estimation (CBRDE) to arrange the
scanning order of code blocks so that the available
coding bits can be allocated for the most significant
code block. The proposed CBRDE is based on the
MQ table of EBCOT, which is available at both
encoder and decoder. As a result, the scanning order
of code blocks can be also obtained at decoder, and
therefore transmission of the contributions of each
code block can be omitted. The remainder of this
paper proceeds as follows. In Section 2, wavelet
transform and EBCOT are reviewed briefly. Section
3 presents the proposed CBRDE algorithm to arrange
the code blocks of an image in an adaptive manner.
Experimental results are given in Section 4, and
conclusion can be found in Section 5.
2 Wavelet Transform and EBCOT
Wavelet transform provides many desirable
properties such as multiresolution analysis, subband
decomposition with orientation selectivity, joint
space-spatial frequency localization, self similarity
across subbands of the same orientation, and energy
clustering within each subband. In this section,
wavelet transform and the EBCOT algorithm are
reviewed briefly.
2.1 Wavelet transform
The wavelet transform of a signal, )(nS , at
resolution is as follows.






k
k
kngkSnD
knhkSnS
)2()()(
)2()()(
1
1


(1)
Proceedings of the 9th WSEAS International Conference on Multimedia Systems & Signal Processing
ISSN: 1790-5117 43 ISBN: 978-960-474-077-2
to decoder. Is there any simple way to solve the
above-mentioned questions?
As one might expect, the first question can be
solved effectively by using the rate distortion curve
of code blocks. The optimal scanning strategy turns
out to take the code block with the steepest rate
distortion slope as the first to be coded. In other
words, the available coding bits should be first
allocated for the code block with the largest amount
of distortion decrease per coding bit. Take the second
question into consideration; estimated rate distortion
slope is preferable to the true one for arranging the
scanning order of code blocks. Since the MQ table of
probabilities of more probable symbol (MPS) and
less probable symbol (LPS) is available at both
encoder and decoder, an efficient, context based rate
distortion estimation (CBRDE) is therefore proposed
to estimate the rate distortion slope of code blocks,
which is given in the following subsection.
3.2 Proposed CBRDE
For each bit-plane, code blocks with significant rates
of distortion decrease per coding bit should be coded
as early as possible. In order to avoid transmitting the
scanning order of code blocks from encoder to
decoder, the estimated rate distortion slope of a code
block is thus adopted, which is given by
 
 RE
DE
S

 (3)
where D and R denote the amount of distortion
decrease and the number of coding bits, respectively,
and E is an expectation operator. Though most of
correlation between images pixels can be removed by
wavelet transform, there may still be residual
correlation between neighboring wavelet coefficients.
To incorporate with the framework of EBCOT, the
proposed CBRDE for code blocks is based on the
MQ table, which is available at both encoder and
decoder. Specifically, let iB denote the
thi code
block (in wavelet domain), ),( nmbij the
thj
significant bit of a coefficient at position: ),( nm in
iB , and  ),(
,
nmbB ij
nm
ij  . The proposed CBRDE
for ijB is as follows.
))n,m(b(H
))n,m(b(prob
S
ij
n,m
n,m
ij
ij 
 

1
(4)
where )),(( nmbH ij denotes the entropy of
),( nmbij given by
))0((log)0(
))1((log)1()(
2
2


bprobbprob
bprobbprobbH
(5)
The numerator of equation (4) is proportional to
the amount of distortion decrease; and the
denominator is proportional to the number of coding
bits. It is noted that probability models of ),( nmbij
can be obtained directively from the MQ table, and
therefore the computational complexity is nothing
but one lookup table operation.
Take the commonly used Lena image as an
example, the true distortion: D and coding bits: R ,
and their respective estimates  DE  and  RE  (for
a given bit-plane) are shown in Fig. 2. As one can see,
the nearly proportional relationship between the
horizontal axis (true values) and the vertical axis
(estimated values) demonstrates the potential of the
proposed CBRDE.
3.3 Embedded block coding with CBRDE
Figure 3 depicts the proposed image encoder using
embedded block coding (EBC) with adaptive block
ordering (ABO). In which, the EBC algorithm is the
same as the first tier of EBCOT; however, ABO with
CBRDE replaces the second tier of EBCOT, i.e.
PCRD. With the adaptation of the MQ table, the code
blocks of an image can be arranged according to their
respective estimated rate distortion slopes and then
coded in an adaptive manner. Figure 4 depicts the
image decoder. Recall that the rate distortion slopes
of code blocks can be also estimated at decoder. Thus,
the overhead of transmitting the scanning order of
code blocks from encoder to decoder is unnecessary;
this is beneficial to the communication applications.
4 Experimental Results
The proposed CBRDE for arranging the scanning
order of code blocks is valuated on grayscale images.
The test images, namely Barbara and Fingerprint are
shown in Fig. 5. The biorthogonal Daubechies
wavelet with 9/7-tap filters is used. The compression
rate is measured in bits per pixel (bpp). The distortion
is defined as mean squared error (MSE). The
compression rates and MSE values are used to plot
the rate distortion curves. To avoid the overhead of
transmitting the contributions of code blocks, the
second tier of EBCOT, i.e. PCRD is replaced by the
CBRDE-based ABO. For comparison, as most of
images’ energies are concentrated in the low
frequency subbands, the first tier of EBCOT
incorporated with a fixed scanning order starting
from the lowest frequency subband is evaluated.
Proceedings of the 9th WSEAS International Conference on Multimedia Systems & Signal Processing
ISSN: 1790-5117 45 ISBN: 978-960-474-077-2
0 50 100 150 200 250
0
20
40
60
80
100
120
140
true
bit plane 7
(a)
0 50 100 150 200 250 300 350 400 450 500
0
50
100
150
200
250
300
350
true
bit plane 7
(b)
Fig. 2 Performance of CBRDE applied to Lena
image; (a) horizontal axis: true D , vertical axis:
estimated  DE  ; (b) horizontal axis: true R ,
vertical axis: estimated  RE  .
Fig. 3 Proposed image encoder using EBC with ABO
Fig. 4 Proposed image decoder using EBC with ABO
(a)
(b)
Fig. 5 Test images (a) Barbara (b) Fingerprint
DeQBPCMQ
CBRDE ABO
EBC
IDWT
Decoded
image
Q BPC MQ
CBRDEABO
EBC
DWT
Image Bit-stream
Bit-stream
Proceedings of the 9th WSEAS International Conference on Multimedia Systems & Signal Processing
ISSN: 1790-5117 47 ISBN: 978-960-474-077-2
Reconfigurable VLSI Architecture for FFT Processor 
 
Tze-Yun Sung 
Department of Microelectronics 
Engineering  
Chung Hua University 
707, Sec. 2, Wufu Road 
Hsinchu City 300-12, Tawan 
bobsung@chu.edu.tw 
Hsi-Chin Hsin 
Department of Computer Science 
and Information Engineering 
National United University 
Miaoli 36003, Taiwan 
hsin@nuu.edu.tw 
 
 
Abstract: - This paper presents a CORDIC (Coordinate Rotation Digital Computer)-based split-radix fast 
Fourier transform (FFT) core for OFDM systems, for example, Ultra Wide Band (UWB), Asymmetric Digital 
Subscriber Line (ADSL), Digital Audio Broadcasting (DAB), Digital Video Broadcasting – Terrestrial 
(DVB-T), Very High Bitrate DSL (VHDSL), and Worldwide Interoperability for Microwave Access (WiMAX). 
High-speed 128/256/512/1024/ 2048/4096/8192-point FFT processors have been implemented by 0.18  (1p6m) 
at 1.8V, in which all the control signals are generated internally. These FFT processors outperform the 
conventional ones in terms of both power consumption and core area. 
 
Key-Words: - IP, FFT, split-radix, CORDIC, OFDM. 
 
1   Introduction 
High-performance fast Fourier transform (FFT) 
processor is needed especially for real-time digital 
signal processing applications. Specifically, the 
computation of discrete Fourier transform (DFT) 
ranging from 128 to 8192 points is required for the 
orthogonal frequency division multiplexer (OFDM) 
of the following standards: Ultra Wide Band (UWB), 
Asymmetric Digital Subscriber Line (ADSL), Digital 
Audio Broadcasting (DAB), Digital Video 
Broadcasting – Terrestrial (DVB-T), Very High 
Bitrate DSL (VHDSL) and Worldwide 
Interoperability for Microwave Access (WiMAX) 
[1]-[8]. Thompson [9] proposed an efficient VLSI 
architecture for FFT in 1983. Wold and Despain [10] 
proposed pipelined and parallel-pipelined FFT for 
VLSI implementations in 1984. Widhe [11] 
developed efficient processing elements of FFT in 
1997. To reduce the computation complexity, the 
split-radix 2/4, 2/8, and 2/16 FFT algorithms were 
proposed in [12]-[15]. 
As the Booth multiplier is not suitable for hardware 
implementations of large FFT, we propose the 
CORDIC-based multiplier. Moreover, we develop a 
ROM-free twiddle factor generator using simple 
shifters and adders only [1], which obviates the need 
to store all the twiddle factors in a large ROM space. 
As a result, the proposed CORDIC-based split-radix 
FFT core with the ROM-free twiddle factor generator 
is suitable for the wireless local area network 
(WLAN) applications. In this paper, a 
high-performance 
128/256/512/1024/2048/4096/8192-point FFT 
processor is presented for the European and Japanese 
standards. The remainder of this paper proceeds as 
follows. In Section II, the split-radix 2/8 FFT 
algorithm and the CORDIC algorithm are reviewed 
briefly. In Section III, the reusable IP 128-point 
CORDIC-based split-radix FFT core is proposed. In 
Section IV, the hardware implementations of FFT 
processors are described. The performance analysis 
is presented in Section V. Finally, the conclusion is 
given in Section VI. 
 
 
2   Review of Split-Radix FFT and 
CORDIC Algorithm 
2.1 Split-Radix FFT 
The idea behind the split-radix FFT algorithm is to 
compute the even and odd terms of FFT separately. 
The even term of the split-radix 2/8 FFT algorithm is 
given by 
  ))
2
()(()2( 2/
12/
0
nk
N
N
n
WNnxnxkX ∑−
=
++=             (1) 
where 2/
2
2/
N
j
N eW
π−=  and .1)2/(,....,2,1,0 −= Nk  
The odd term is as follows: 
The National Science Council of Taiwan, under Grant
NSC97-2221-E-216-044, and the Chung Hua University, Hsinchu, Taiwan, 
under Contract CHU-NSC97-2221-E-216-044 supported this work. 
Proceedings of the 9th WSEAS International Conference on Multimedia Systems & Signal Processing
ISSN: 1790-5117 79 ISBN: 978-960-474-077-2
where 
2
2
 can be represented as 0101010.1  using 
the Booth binary recoded form (BBRF). Thus, the 
CM unit can be implemented by using simple adders 
and shifters only. Figure 3 shows the pipelined CM 
architecture, which uses three subtractions/additions 
and therefore improves on the computation speed 
significantly. 
Based on the above-mentioned CORDIC arithmetic 
unit and CM unit, the computational circuit and 
hardware architecture of the CORDIC-based 
split-radix 2/8 FFT butterfly computation are realized. 
As one can see, the pipelined CORDIC arithmetic 
unit aims at increasing the throughput of complex 
multiplications..  
 
3.2 ROM-Free Twiddle Factor Generator 
In the conventional FFT processor, a large ROM 
space is needed to store all the twiddle factors. To 
reduce the chip area, a twiddle factor generator is 
thus proposed. Figure 4 shows the ROM-free twiddle 
factor generator using simple adders and shifters for 
128-point FFT. In which, the 16-bit accumulator is to 
generate the value πn2  for each index n; 
12 3log2 −= −Nn , the 16-bit shifter is to divide πn2  by 
N, and the 16-bit shifter/adder is to produce the 
twiddle factors: nN
1θ , nN3θ , nN5θ  and nN7θ . By using 
the twiddle factor generator, the chip area and power 
consumption can be reduced significantly at the cost 
of an additional logic circuit. Table 1 shows the gate 
counts of the full-ROM storing all the twiddle factors, 
the CORDIC twiddle factor generator [1] and the 
ROM-free twiddle factor generator. 
 
4   Implementation of FFT Processors 
The 128/256/512/1024/2048/4096/8192- point FFT 
processors. In which, the radix-2 and split-radix 2/4 
butterfly processors [1] using the pipelined CORDIC 
arithmetic units and twiddle factor generators are 
implemented; and moreover, two memory banks 
(4096/2048/1024/512/256/0 × 32-bit and 
8192/4096/2048/1024/512/256/128 × 32-bit) are 
allocated for increased efficiency by using the 
in-place computation algorithm [1]. Hardware 
architecture is shown in Figure 5. 
 The hardware code written in Verilog® is running on 
a workstation with the ModelSim® simulation tool 
and Synopsys® synthesis tool (design compiler). The 
chips are synthesized by the TSMC 0.18 mμ  1p6m 
CMOS cell libraries [18]. The physical circuit is 
synthesized by the Astro® tool. The circuits are 
evaluated by DRC, LVS and PVS [19]. 
 The layout view of the8192-point FFT processor is 
shown in Figure 6. The core areas, power 
consumptions, clock rates of 128-point, 256-point, 
512-point, 1024-point, 2048-point, 4096-point and 
8192-point FFT processors are shown in Table 2. All 
the control signals are internally generated on-chip. 
The chip provides both high throughput and low gate 
count. 
 
5   Performance Analysis of The 
Proposed FFT Architecture 
FFT processors used to compute 128/256/512/1024/ 
2048/4096/8192-point FFT are composed mainly of 
the 128-point CORDIC-based split-radix 2/8 FFT 
core; the computation complexity using a single 
128-point FFT core is )6/(NO  for N-point FFT. The 
log-log plot of the CORDIC computations versus the 
number of FFT points is shown in Figure 7. As one 
can see, the proposed FFT architecture is able to 
improve the power consumption and computation 
speed significantly. 
 
6 Conclusion 
This paper presents low-power and high-speed FFT 
processors based on CORDIC and split-radix 
techniques for OFDM systems. The architectures are 
mainly based on a reusable IP 128-point 
CORDIC-based split-radix FFT core. The pipelined 
CORDIC arithmetic unit is used to compute the 
complex multiplications involved in FFT, and 
moreover the required twiddle factors are obtained by 
using the proposed ROM-free twiddle factor 
generator rather than storing them in a large ROM 
space. 
 The CORDIC-based 
128/256/512/1024/2048/4096/8192- point FFT 
processors have been implemented by 0.18 mμ  
CMOS, which take 395 sμ , 176.8 sμ , 77.9 sμ , 
33.6 sμ , 14 sμ , 5.5 sμ  and 1.88 sμ  to compute 
8192-point, 4096-point, 2048-poin, 1024-point, 
512-point, 256-point and 128-point FFT, 
respectively. 
 The CORDIC-based FFT processors are designed by 
using the portable and reusable Verilog®. The 
128-point FFT core is a reusable intellectual property 
(IP), which can be implemented in various processes 
and combined with an efficient use of hardware 
resources for the trade-offs of performance, area, and 
power consumption. 
 
 
References: 
[1] T. Y. Sung, “Memory-efficient and high-speed 
split-radix FFT/IFFT processor based on 
Proceedings of the 9th WSEAS International Conference on Multimedia Systems & Signal Processing
ISSN: 1790-5117 81 ISBN: 978-960-474-077-2
-1
-1
-1
-1
-1
-1
-1 -1
)(nx
)8/( Nnx +
)4/( Nnx +
)8/3( Nnx +
)2/( Nnx +
)8/5( Nnx +
)4/3( Nnx +
)8/7( Nnx +
j−
j−
n
NW
n
NW
3
n
NW
5
n
NW
7
)18( +kX
)38( +kX
)58( +kX
)78( +kX
CM
8(1)
CM
8(3)
CORDIC
CORDIC
CORDIC
CORDIC
)8( ka
)28( +ka
)48( +ka
)68( +ka
A d d S u b
]R e [X ]I m [ X
S h i f t e r  2 /  S u b
L a t c h L a t c h
L a t c h L a t c h
M u x
]'I m [
2
2
_]'R e [
2
2 XX
S h i f t e r  2 /  S u b
S h i f te r  4 /  S u b S h i f t e r  4 /  S u b
16-bit Accumulator
16-bit Reg.
16-bit Shifter
16-bit Shifter/Adder
n
N
1θ nN3θnN5θ nN7θ
Control
π2
4
8 16
16
16
16 16 16 16
2
2
                                                                                     8192-point FFT Processor
                                                                      4096-point FFT Processor
                                                        2048-point FFT Processor
                                           1024-point FFT Processor
                           512-point FFT Processor
            256-point FFT Processor
128-point
FFT Processor
IP
R
a
d
i
x
2
S
P
l
i
t
2/4
P/SS/P
S
P
l
i
t
2/8
S
P
l
i
t
2/8
S
P
l
i
t
2/8
S
P
l
i
t
2/8
4096/2048/1024/512/256/0*32
Internal Memory
8192/4096/2048/1024/512/256/128*32
External Memory
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Fig. 2 Data flow of the butterfly computation of the modified 
split-radix 2/8 FFT 
Fig. 3 Constant multiplier (CM) architecture for the 
modified split-radix 2/8 FFT 
Fig. 4 Proposed ROM-free twiddle factor generator for 128-point 
FFT 
Fig. 5 Hardware architecture of the 128/256/512/1024/2048 
/4096 /8192-point FFT processor 
Fig. 6 Layout view of the 8192-point FFT processor 
Fig. 7 Log-log plot of the CORDIC computations versus 
the number of FFT points 
Proceedings of the 9th WSEAS International Conference on Multimedia Systems & Signal Processing
ISSN: 1790-5117 83 ISBN: 978-960-474-077-2
