Abstract
During software maintenance, software developers are responsible to change the software
for fulfilling the change of user requirement and for fixing the design flaw. Software
refactoring provides developers a behavior preserving way to enhance software structure.
With proper refactoring, the refactored software would be more extendable for further
change. However, during refactoring, the overall effect of refactoring on software structure
is often unclear for the developer. The lack of information about the effect of refactoring
makes the process of applying refactoring inefficient. In this work, a mechanism that
provides developers to preview the refactoring effect is presented. The refactoring effect
is represented as a set of software metrics that can reflect the structure of software. To
assess the effect of refactoring, the structure changes made by refactoring is decomposed
to a series of atomic changes. The effect of refactoring on software metrics is then
induced from these atomic changes. A tool: Refactoring Previewer that helps developer
preview refactoring effect is implemented. The metrics change information provides by
Refactoring Previewer can help developer understand the refactoring impact on software
structure and make refactoring decision in more efficient way.
ii
List of Figures
3.1 Example of using Atomic Change to represent the structural changes made by Push Down
Field refactoring . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18
4.1 Design of relation among induction rules, atomic changes and program model . . . . . . . 26
5.1 The usage flow of Refactoring Previewer . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
iv
Chapter 1
Introduction
1.1 Motivation
During software maintenance phase, the software developers are responsible to change
software for fulfilling the change of user requirements and for fixing the design flaw. The
software refactoring provides developer a external behavior preserving way to enhance the
structure of object-oriented software source codes. With proper refactoring, the design
quality of object-oriented software would be enhanced and thus the effort in changing
software during maintenance phase would be reduced.
When developer applies refactoring on software, the refactoring effect on the software
is often unclear for the developer. The developer often uses the trail and error strategy in
applying refactoring: the developer really applies some refactorings to the software and
then examines the refactored result. If the refactored result does not fulfill developer’s
expectation, he has to revert the refactored code and applies another refactoring. The
lack of refactoring effect information during applying refactoring leads developer very
difficult to make right refactoring decisions and increases the time and effort of applying
1
refactoring method and need not worry about whether the observable behavior remains
the same after refactoring.
The general refactoring process consists of following sequential activities:
1. Identify refactoring target and refactoring method
In the first activity, the developer has to find the potential problematic code location
in the source code, and then decides which refactoring method should be applied
to the located code. A common approach to find the potential problematic code
location is bad smell detection. In [1], Kent Back defined bad smell as “structures in
the code that suggest (sometimes even scream for) the possibility of the refactoring”.
Twenty-two bad smells are defined in [1] as well as their relations to the possible
refactoring methods. The bad smell is viewed as the symptom that is needed to
be removed from source code. The developer could determine which refactoring
method should be applied to the source code with the help of the possible refactoring
suggestion to remove the bad smell.
2. Apply the refactoring
After the problematic code is identified and the refactoring method is chosen, devel-
oper can apply the refactoring on the problematic code according to the guideline of
the refactoring method. Currently, there are many automated refactoring tools that
can help developer automatically apply refactoring on source code [2] [3] [4] [5] [6].
3. Assess the effect of the refactoring
Once the program is refactored, the developer needs to assess the overall effect of
the refactoring. The developer applies specific refactoring method on specific code
3
Chapter 2
Issues On Previewing Refactoring
Effect
2.1 Refactoring Effect Representation
There are related works that attempt to provide developer information about the refactor-
ing effect on the software before applying refactoring to help developer make refactoring
decision. The open source automated software refactoring tool: rope [5], has provided
refactoring preview mechanism in applying refactoring. When developer uses rope in
applying refactoring, the rope would first use the diff syntax to show the source code
difference before and after refactoring to inform developer what on source code would
be differed after the refactoring. The developer could observe the changed source code
and then decide whether to apply the refactoring. In rope, the changed source code is
directly used as refactoring effect representation. Though the developer could under-
stand what the source code would be changed, he can’t directly investigate what is the
5
quantitative evaluation method to observe the software coupling metrics evolution to
investigate effect of refactoring on maintainability of the software. The coupling metrics
in KataoKa’s work are also viewed as indicators of external software quality attribute.
In the research works about identifying where to be refactored, the software metrics
are also often used as indicators for finding design flaws needed to be refactored. In [10],
Simon et. al viewed methods and fields in classes as basic entities. A cohesion metric is
defined for measuring the cohesion of these methods and fields. The measured cohesion
metric value between basic entities are then interpreted to the distance between these
entities (entities with higher distance are less cohesive and vice versa). The geography
location of the entities is then visualized in a 3-D space. Based on the software visual-
ization, the developer can identify where should be applied specific refactoring method
(move method, move field, extract class, and inline class). In [11], Munro used a set of
software metrics to identify the characteristics of bad smell. Then the identified char-
acteristics of bad smell are translated to set of interpretation rules. The input of the
interpretation rules is the software metrics values measured from software source code.
By giving the software metrics, the developer would get the possible bad smell locations
on the software from interpretation rules. In [12], Crespo et al. presented a case study
on the use of metrics in detecting bad smell. They selected a set of language indepen-
dent software metrics for detecting bad smells. The bad smell is detected by finding the
abnormal metrics value of the software. The refactoring method suggestion of each bad
smell is also provided in their work to ease the abnormal metrics value of software.
From the research works described above, it is shown that the software metrics play
important role in investigating refactoring effect on software external quality attributes
7
series of smaller structural changes. There are also composite refactoring methods whose
source code change is composed from smaller structural changes as well as other refactor-
ing methods, which is also composed from smaller structural changes. It is observed that
source code change made by both atomic refactoring method and composite refactoring
can be decomposed to a series of smaller structural changes. It is also observed that these
smaller structural change are often common among different refactoring methods. The
observations indicate that it is appropriate to define a common set of structural change
elements in describing the source code change made by the refactoring method. Based
on these structural change elements, the metrics changes affected by refactoring can be
inducted.
In automated refactoring tools, it is common to decompose source code change made
by refactoring method into a series of structural change elements. The decomposition
mechanism of five automated refactoring tools: JavaRefactor [3], Jrbx [13] [14], rope [5],
and bicycle repair man [6], are surveyed to get the insight of related works about refac-
toring decomposition to structural change elements. The focuses of the analysis are:
1. The representation of the source code while modification
2. If different refactoring method share common set of structural change elements
3. The difficulty of implement (new) refactoring method
The survey summary of the five tools is listed below:
1. JRefactory
JRefactory is an automated refactoring tool for Java. The Java source code is first
parsed into abstract syntax tree (AST). The structural changes made by refactoring
9
there is a specific transformer for each refactoring method. All the transformer
are inherited from class RefactoringTransformer. In class RefactoringTransformer,
there are many model modification methods that can change the XML format source
code in Sapid model. The specific transformer uses the inherited model modification
methods to update the change. Like JavaRefactor, the Jrbx is also highly depended
on Sapid model.
4. Rope
Rope is an automated refactoring tool for Python. In rope, refactoring methods with
similar behavior are implemented together. These different but similar refactoring
methods share the same set of source code modification methods. The source code
modification methods directly modify the source code line by line. This implemen-
tation mechanism not only directly couples to the programming language but also
takes great effort to implement new refactoring method.
5. Bicycle repair man
Bicycle repair man is an automated refactoring tool for Python. Each refactoring
method in bicycle repair man is independent and different refactoring methods do
not share any common modification method. The refactoring method directly mod-
ifies the source code line by line. This implementation mechanism is similar with
rope and may face the same problems.
The comparison of these five automated refactoring tools about target language, source
code representation, construction of refactoring, the reused structural change element
with its reusability is summarized in table 2.1.It is observed that both JavaRefactor
11
quality and finding the bad smell. These research works have shown that software met-
rics changes information provides developer organizable view about effect of refactoring
on program. The software metrics changes information is chosen as refactoring effect
representation. To induce the metrics changes information, the source code change made
by specific refactoring has to be decomposed to a series of structural change elements.
The metrics changes information are then induced from these structural change elements.
The structural change elements of five popular automated refactoring tools are analyzed.
Three tools of them do not have considerate reusable structural change elements in de-
scribing refactoring. All of these tools shows strong programming language dependency.
In this work, the atomic changes [17] are used as structural changes elements and the
metrics changes information is induced from the atomic changes. In chapter 3, the use of
atomic changes as structural change elements is explained. The metrics induction from
atomic changes is explained in chapter 4.
13
software versions. These atomic changes are then used for further change impact analysis.
The usage of atomic changes in representing software structural changes hides the detail
of code change and provides proper abstraction for further change impact analysis.
In this work, the concept of atomic changes is used in different context. The atomic
changes in this work represent the structural change elements made by refactoring method
on the source code. In [17], the atomic changes are used passively for recording what
is changed during software evolution. In this work, the atomic changes could actively
update the program status while applying refactoring method.
There are several reasons for choosing atomic changes as structural change elements:
1. The interpretation of atomic changes are straight forward in the context of object-
oriented programming. The transformation effect of atomic changes on source code
is very clear and well understood.
2. The representation of atomic changes is language independent, the use of atomic
changes in representing structural changes made by refactorings can be applied to
different object-oriented programming languages.
3. Atomic changes are suitable in representing steps of applying refactoring method.
The refactoring decomposition example in the later part of this thesis would show the
direct mapping between atomic changes and structural changes made by refactoring.
4. Atomic changes provide common basis about representing structural changes made
by refactoring. The same set of atomic changes is used in describing structural
changes made by different refactoring methods.
15
Table 3.1: The type of atomic changes used in representing structural changes made by refactoring
Atomic Change Description
AF(a, modifier, A) Add field a with assigned modifier in class A
DF(a, A) Delete field a in class A
CV(a, modifier, A) Change visibility of field a in class A to assigned modifier
AM(a, [para1 ], modifier, A) Add method a(para1) with assigned modifier in class A
CM(a, modification, A) Change method body of a in class A according to
the guideline of modification
DM(a, A) Delete method a in class A
AC(A, Parent) Add empty class A which extends Parent in program
DC(A) Delete empty class A from program
mapping relation, a simplified refactoring example is proposed. Figure 3.1 demonstrates
the program structure before and after the execution of Push Down Field refactoring as
well as the usage of atomic changes during execution of refactoring method. The left side
of figure 3.1 is the original program class diagram before refactoring. Class B, C and D
are inherited from class A. Each class has corresponding method and only class A has field
a1. During investigating the program structure, The developer finds that only method b
in class B and method c in class C use the field a1 inherited from A. So the developer
hopes to use Push Down Field refactoring method to push field a1 down to class B and
C. The class diagram of the program after refactoring is shown in the right side of figure
1. According to mechanics of Push Down Field (page 266 in [1]), the structural changes
made by Push Down Field refactoring consist of (1) declared field in subclasses that need
the field (can be represented as Add Field) and (2) remove the field from superclass (can
be represented as Delete Field). In this example, the corresponding atomic changes of
the structural changes made by Push Down Field refactoring are AF(a1, ‘public’, B),
AF(a1, ‘public’, C) and DF(a1, ‘public’, A).
17
structural changes made by refactoring to corresponding atomic changes. During de-
composing, the refactoring decomposer would first use the precondition checking logic to
make sure if the refactoring is applicable. If the refactoring is applicable, the decomposer
would further use the decomposing logic to output a series of atomic changes.
To construct the refactoring decomposer, the precondition checking logic and the de-
composing logic about specific refactoring method must be defined. The precondition
checking logic is defined for checking the correctness of refactoring target on program
model and for confirming the refactoring method is applicable to the refactoring target.
The precondition checking logic would return boolean value which represents if the refac-
toring method can be applied to the target on program model. The decomposing logic
can be directly derived from “mechanics” of each refactoring method described in [1]. A
series of atomic changes would be output from decomposing logic.
The construction of Push Down Field refactoring decomposer is used for explaining
the construction of refactoring decomposer. The refactoring target of Push Down Field
refactoring method consists of the superclass, the subclasses, and the target field to be
pushed down. To confirm the correctness of the refactoring target, the precondition
checking logic of Push Down Field refactoring decomposer has to check (1) all the su-
perclass and the subclasses are existed in the program model, (2) the superclass is the
parent of subclasses and (3) the target field is the public field of superclass and is not
existed in any of all subclasses. For confirming the Push Down Field can be applied
to the refactoring target, the precondition checking logic must also confirm that all the
other descendent of the superclass and all classes that associated with superclass must
not use the target field of superclass.
19
28 # have not used targetField of superclass
29 relatedClasses = (all Classes that use rTarget[‘superclass’])
30 otherRelatedClasses = relatedClasses - rTarget[‘subclasses’]
31 for klass in otherRelatedClasses:
32 if klass use rTarget[‘targetField’] of rTarget[‘superclass’]:
33 return False
34 return True
35
36 decompose():
37
38 atomicChanges = []
39
40 # Add targetField in all subclasses in rTarget
41 for subclass in rTarget[’subclasses’]:
42 atomicChanges.append( AF(subclass, rTarget[’targetField’]) )
43
44 # delete targetField in superclass in rTarget
45 atomicChanges.append( DF(subclass, rTarget[’targetField’]) )
46
47 return atomicChanges
Currently the decomposing logic can only describe change at atomic change level,
this reduce the expressiveness of decomposing logic in describing composite refactoring
method, which may contains the refactoring method level changes in the modification
steps of the mechanics. In the future the decomposing logic would be extended to enable
the description of change at refactoring method level. That is, the decomposing logic of
specific refactoring method could directly reuse other refactoring method’s decomposing
logic in constructing the decomposer of composite refactoring method.
21
that trigger the change of metric value are evaluated. After understanding the impact
scope and change condition of each atomic change on the metric value, the induction rule
of the specific metric change is defined. Induction rule of specific metric defines the change
impact scope as well as the overall condition that may change the metric. While inducing
metric, the induction rule may need to check the status of program for determining the
change impact scope and for checking the condition. The program status can be accessed
from the program model while inducing metrics. It is noted that the induction of metrics
happens before the atomic change is really apply to the program model. That is, during
inducing metrics from specific atomic change, the accessed program status has not been
changed by the specific atomic change. After the metrics are induced from specific atomic
change, the atomic change would update the corresponding change to the program model
for further metrics induction from following atomic changes.
Two metrics are used as example for explaining how to construct the induction rule
to induce metrics from atomic changes.
NOA Induction: The NOA (Number Of Attribute/Field) metric counts the number of
fields of specific class. During investigating the atomic changes impact on NOA metric, it
is first found that AF and DF would impact the value of NOA (AC and DC do not change
NOA value but only add/delete the metrics of specific classes). For the AF change, the
impact scope is the target class that apply AF itself and the NOA value of the target
class would be increased by one. For the DF change, the impact scope is the target class
where DF applies; the NOA value of that target class would be decreased by one. The
pseudo code of summarized NOA metric induction rule is shown as following:
1 induceNOA(atomicChange):
2 # if the type of atomic change is AF
23
6 # Impact on targetClass
7 if targetField is inheritedField of targetClass:
8 metricsChanges[targetClass][‘NIA’] = -1
9
10 # Imapct on descendent classes of targetClass
11 if atomicChange.modifier == ‘public’:
12 descendentClasses = programModel.get_descendent_classes_of(targetClass)
13 for descendent in descendentClasses:
14 if targetField not in inherited field of class and field of class:
15 metricsChanges[descendent][‘NIA’] = 1
4.2 Relations among Atomic Changes, Induction Rules and
Program Context
The relations among induction rules, atomic changes and program model is shown in
figure . The AtomicChange is parent class of all atomic changes. The apply change
method of each AtomicChange’s subclass describes the corresponding program status
update mechanism. The MetricInducter is the parent of all metrics induction rules. The
induction rule of each metric is defined in the induce metrics changes method of the
MetricsInducter ’s subclass. The ProgramModel which contains the program status infor-
mation is aggregated to AtomicChange (for updating program model) and MetricInducer
(for querying the program status while inducting metrics).
When the source code change made by specific refactoring method is decomposed into
a series of atomic changes, the metrics induction rules are sequentially applied to these
atomic changes. For each atomic changes, the method get metrics changes is called to get
the induction result. The detailed code of method get metrics changes is in the bottom of
figure 4.1. The get metrics changes method first calls the method induce metrics changes
25
Table 4.1: The example sequence of metrics induction of refactoring in figure 1
sequence action consequence
1 induce metrics changes of AF(a1, B, ’public’) mChange[‘B’][‘NOA’] = 1,
mChange[‘B’][‘NIA’] = -1
2 apply AF(a1, B, ’public’) to program model the field a1 is added in class B
3 induce metrics changes of AF(a1, C, ’public’) mChange[‘C’][‘NOA’] = 1,
mChange[‘C’][‘NIA’] = -1
4 apply AF(a1, C, ’public’) to program model the field a1 is added in class C
5 induce metrics change of DF(a1, A) mChange[‘A’][‘NOA’] = -1,
mChange[‘D’][‘NIA’] = -1
6 apply AF(a1, A) to program model the field a1 is deleted from class A
7 summarize the overall metrics change the mChanges of refactoring is summarized
the induction, the structural change made by AF(a1, B, ‘public’) is updated to program
model(field a1 is added into class B). The metrics change impacted by AF(a1, C, ‘pub-
lic’) are then induced according to the updated program model and so on. After metrics
changes are inducted from all these atomic changes. These metrics changes would be
summarized and the metrics changes information of PushDownField(a1, A, [B,C]) refac-
toring would be get. Table 4.1 illustrates the flow sequence of metrics induction of this
example.
27
Code
Analysis
Refactoring
Plan
Construction
Refactoring 
Decomposition &
Metrics Induction
Metrics
Display
source code
induction rules
metrics changes
information
refactoring plan
refactoring 
decomposer
user inputs 
source code
user investigates 
refactoring effect
user defines 
refactoring planundo or 
continuing other refactorings
refactored 
source code
export
create
query & update
program model
Figure 5.1: The usage flow of Refactoring Previewer
In this chapter, the tool Refactoring Previewer is introduced. In following sections
of this chapter, the overall usage flow(section 5.1,), the file input(section 5.2) and the
metrics changes information visualization of Refactoring Previewer(section 5.3) would be
sequentially introduced.
5.1 Tool Usage Flow
The usage flow of Refactoring Previewer is shown in figure 5.1. The user of Refactoring
Previewer first inputs the Python module file into Refactoring Previewer. The source code
of the module file would be transformed to program model by the Code Analyzer. The
program model is then visualized to the user. The user can interact with program model
visualization while making up refactoring plan, which describes where to be refactored
and what refactoring method should be applied. When the refactoring plan is made
up, the refactoring method decomposer would decompose structural changes made by
29
Table 5.1: List of selected software metrics in Refactoring Previewer
Metrics Name Metrics Description Reference
NOA Number of attributes in class [18]
NIA Number of inherited attributes in class [18]
NOM Number of methods in class [18]
NMI Number of methods inherited in class [18]
NMO Number of method overriden in class [18]
CBO Coupling between object classes: the number of collaborations for a class [19]
RFC Response for a class: the number of both defined and inherited methods [19]
of a class, including methods of other classes called by these methods
LCOM Lack of cohesion among methods: the number of pairs of methods [19]
in a class having no common attribute references
WMSG Number of messages in class [18]
WLOC Number of line of code in class [18]
5.3 Metrics Changes Display
Currently 10 software metrics is provided for observing the impact of the refactoring
method on the program. The chosen metrics and their corresponding meaning are listed
in table 5.1. The granularities of these 10 metrics are at the same level: class level. The
reasons for choosing the class level granularity metrics in this work are:
1. It provides developer a consistent view for observing different metrics changes.
2. The class level is at the same granularity of developer’s concern in applying refac-
toring methods defined in [1].
Though only the metrics at granularity level of class are provided, but metrics with
different granularities (ex. metric of package level or method level) can also be induced
from atomic changes with the same concept.
After the refactoring plan is made up, the Refactoring Previewer would induct the
metrics change and provide metrics change information on the main user interface. The
metrics abstraction would be produced above each affected class block in the model
31
yellow color is the source class of the refactoring target, and the classes with green color
are the destination classes. The classes of gray color are the indirectly affected classes.
The different composition of metrics axis on the Kiviat diagram may provide different
meaning to the user. In advanced metrics display widget, user can use the buttons on the
right side to choose the metrics axis they want to observe on the Kiviat diagram. This
functionality provides user flexibility in observing the metrics change with specific view.
For example, the user may focus on observing the corresponding method/field change of
the class. So he can choose the NOA, NIA, NOM, NMI metrics as the axis of the Kiviat
diagram and others metrics axis can be removed from the Kiviat diagram.
At the bottom of the metrics display widget, the metrics change information of dif-
ferent versions are listed as an metrics change table. Each row of the table presents the
click-able version number, the refactoring method and refactoring target of that version,
the metrics value, and the trend of the metric (increase as red color and decrease as green
color). The metrics change table also interacts with Kiviat diagram. The user can press
the click-able version number and the corresponding enclosed lines of the chosen version
on the Kiviat diagram would be highlighted.
33
specific metric and the atomic changes is investigated and defined in induction rule. The
metrics changes information of refactoring is derived from its atomic changes with the
help of induction rules.
A prototyped tool: Refactoring Previewer is implemented based on the concept of this
work. The Refactoring Previewer has support preview of six refactoring methods and ten
metrics changes. Two easy to be used refactoring target selection modes interactively
provide developer guideline in choosing refactoring target of the six refactoring methods.
The Refactoring Previewer also provides flexible kiviat diagram in displaying metrics
changes information of refactoring with evolution viewpoint.
The development of Refactoring Previewer is still ongoing. The functionality of Refac-
toring Previewer would be further extended in following directions.
6.1 Design/Implementation of Composite Refactoring Method
Currently, all six implemented refactoring methods are the atomic refactoring methods.
Besides continuing constructing more atomic refactoring methods, the refactoring method
composing mechanism would be further developed. With the composing mechanism, the
existed refactoring method decomposer could be reused in defining decomposer of new
(composite) refactoring methods and the effort of constructing composite refactoring
method decomposer would be reduced.
35
References
[1] M. Fowler, Refactoring: Improving the Design of Existing Programs. AddisonWesley,
1999.
[2] “Eclipse.” http://www.eclipse.org/, 2007.
[3] “Javarefactor.” http://plugins.jedit.org/plugins/?JavaRefactor, 2007.
[4] “Jrefactory.” http://jrefactory.sourceforge.net/, 2007.
[5] “Rope.” http://rope.sourceforge.net/, 2007.
[6] “Bicycle repair man.” http://bicyclerepair.sourceforge.net/, 2007.
[7] B. D. Bois and T. Mens, “Describing the impact of refactoring on internal program
quality,” Proceedings of the International Workshop on Evolution of Large-scale In-
dustrial Software Applications, pp. 37–48, September 2003.
[8] L. Tahvildari and K. Kontogiannis, “A metric-based approach to enhance design
quality through meta-pattern transformations,” Proceedings of the Seventh European
Conference On Software Maintenance And Reengineering, pp. 183–192, 2003.
37
[17] B. G. Ryder and F. Tip, “Change impact analysis for object oriented programs,”
Proceedings of PASTE ’01, pp. 46–53, June 2001.
[18] M. Lanza and S. Ducasse, “Beyond language independent object-oriented metrics:
Model independent metrics,” Proceedings of International Workshop on Quantitative
Approaches in Object-Oriented Software Engineering, pp. 77–84, 2002.
[19] S. Chidamber and C. Kemerer, “A metrics suite for object oriented design,” IEEE
Transactions on Software Engineering, vol. 20, no. 6, pp. 476–493, June 1994.
[20] M. Pinzger, H. Gall, M. Fischer, and M. Lanza, “Visualizing multiple evolution
metrics,” Proceedings of the 2005 ACM symposium on Software visualization, pp. 67–
75, 2005.
39
 
 
 
 
 
 
 
目次 
摘要...............................................................................................1 
目次...............................................................................................2 
中心...............................................................................................3 
主旨...............................................................................................3 
心得報告.......................................................................................4 
建議事項.......................................................................................5 
參考文獻.......................................................................................5 
 
 
 
 
 
 
 
 2
 過程與心得 
在此專業裡 PIMRC 是一個非常重要的大型學術會議，每年都有上
千篇的會議論文投稿，有將近五百篇的論文利用口頭或展示的方式發
表，參與人員包括產業界及學術界都非常熱絡。而且各個不同國家的
人齊聚一堂，像這樣的大型會議，如何能辦的成功，以及面面俱到，
實在不是件簡單的事情。這次的參與，剛好可以讓我觀摩與學習，如
何掌握會議的進行、人員的調度、晚宴的事項等，對於以後辦理大型
國際會議有相當好的經驗。 
與會人士都相當知名與專業，而這次的報告安排在最後一天的早
上，因此前幾天可以輕鬆的參與其他的研討主題，比較有意思的包括
目前非常熱門的 sensor networks, mobile ad hoc networks, routing 
protocols, cellular networks, location based services and positioning, 
mobility control, heterogeneous networks, mobile IP and TV, future 
wireless technologies, etc., 聽了這些論文發表, 得到相當多的啟發，
對目前的研究頗有幫助。 
報告當天進行非常順利，與會學者都熱烈發表意見，並建議我們
的工作機制可以考慮容錯 (fault tolerance) 的概念，經過討論之
後，已將此方案列為目前的研究計畫中。 
 4
