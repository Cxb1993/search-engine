 2 
計畫摘要 
 
關鍵詞：電腦對局、迫著搜尋、歷史互動圖、象棋、圍棋、六子棋 
 
迫著搜尋為利用限制著手產生方式，來限制對局樹每層展開的分支數，進
而達到可以搜尋到更深層數的方法。對於複雜度較高的棋類如圍棋，六子棋和
象棋等，以正常暴力搜尋最多只能搜尋十幾層，若能夠以迫著搜尋輔助，可搜
尋達幾十層甚至上百層。迫著搜尋也是人類下棋的思考方式之一，如連將殺就
是象棋殘局常用的思考方式。 
本計畫以三年的時間，研究迫著搜尋在各種棋類上的應用，我們分別對六
子棋，象棋和圍棋上的迫著搜尋進行研究。首先研究六子棋上的連四雙迫著搜
尋，然後研究象棋的連將殺，停著殺等問題，最後研究圍棋上如何限制著手，
以達到更深的搜尋之目的。 
本計畫有以下貢獻：本計畫的成果將對對局程式棋力的提高有相當大的幫
助，下棋為一種高智慧的行為，以資訊技術的方法來解決，在人工智慧上有相
當大的意義。發展此系統時，也將開發出一些搜尋演算法，圖形理論及機器學
習理論，已經有五篇包括 IEEE TRANS.等級 的 SCI期刊論文及五篇包括 IEEE
等級的會議論文發表。所研發製作出的六子棋，象棋和圍棋程式與其他棋類相
關程式，參加各種國際性的比賽，目前已獲得四金五銀二銅的好成績。 
本篇報告為第三年的完整報告，在本篇報告中，首先將敘述本計畫研究
目的及研究步驟，然後將敘述本計畫的研究成果。最後我們將列出成果及討
論，並且對本計畫做簡單的自評。 
 
 4 
4.3.4 全盤劫材數量對死活狀態值排序順序的影響................... 58 
5 計畫成果自評..................................................... 59 
參考文獻............................................................. 60 
 
 6 
 
2 研究目的 
2.1 六子棋 
當六子棋的盤面上，在某一方行棋之後，產生了有兩個迫著的狀況（此時稱
攻擊方），即製造出一個以上的連四棋形，則下一回合對手必頇將所有迫著阻擋住
（此時稱防守方），否則攻擊方將可以連六獲勝，而進行防守後的下一回合攻擊方
仍然有可能製造出一個以上的連四攻擊，再度產生雙迫著的盤面，假使連續好幾
回合的雙迫著攻擊直到最後，終於可以產生三個以上的迫著，那麼由於對手只能
下兩子阻擋，攻擊方則可以完成連六棋形，取得勝利。這種結果稱之為 VCF（Victory 
by Continuous Four）。盤面上是否存在一組可以連續沖四取勝的行棋步驟
（Winning Threats Sequence），則必頇透過迫著搜尋方法 TSS（Threat Space 
Search）進行雙迫著搜尋 DTS（Double Threats Search）。[Wu and Huang, 2005, 
2006] 
程式如何利用 DTS 來取勝，關鍵因素在於搜尋的準確度，由於六子棋中盤的
盤面複雜度，對於人類而言，具有容易產生視覺混淯的狀況，看不清楚各方向上
縱橫交錯的連線，影響了往後推測的能力，只能憑經驗評估局勢的好壞，尤其當
DTS的解答在搜尋樹的深度越深，例如七層以上，則推測就越不容易，而且只要失
誤一次，就等於直接給了對手取勝的機會。但是利用電腦程式進行搜尋，可以輕
易的搜尋到七層以上的深度，一但搜尋到正確的解答，便可以取勝，這是戰勝人
類的一個關鍵。 
雖然對於電腦程式而言，搜尋是強項，是若是以窮舉的方式進行雙迫著搜尋，
所產生的搜尋樹仍然非常龐大，需耗費的時間非常可觀，將遭遇時間限制的條件
下而顯得不利。我們可以討論出各種加速搜尋的方法，但又有可能面臨搜尋準確
度下降的反效果，因此如何使得雙迫著的搜尋速度加快，同時又能夠維持住一定
水準的解題準確度，這是六子棋雙迫著搜尋的挑戰。 
雙迫著搜尋的過程中，首先要搜尋攻擊方可產生兩組迫著的攻擊棋步，接著
再搜尋防守方可產生阻擋兩組迫著的防守棋步，如此遞迴呼叫搜尋下去。由於一
組迫著可能有兩處，防守方要從兩處中擇一來防禦，原本要透過搜尋來詴下每一
處迫著位置，若將兩處位置同時都給予防禦的權利，即一次擺兩顆棋子阻擋一組
迫著，即保守型的防禦方法，如此一來則不需要詴下每一處迫著位置。如下圖.1 
(A)，一個活四線段的兩端，共有兩組迫著、四個位置，防守方則有三種防禦方式，
分別如(B)、(C)、(D)，而採用保守型的防禦後則形成如(E)。 
 8 
 中局：除了各類搜尋技巧的應用外，為了使電腦能針對特殊狀況加
深搜尋的深度，頇發展"連將殺"與"停著殺"的搜尋技巧。 
 殘局：使用各種不同的目標導向經驗知識，以解決不同類型的殘
局，此類殘局以目前的中局搜尋技巧仍然無法解決。 
依照傳統的 α−β切捨搜尋技巧，結合 A類搜尋，雖然可以得出較佳著手(如
吃到對方的馬)，但往往會漏掉更好的著手(如直接將死對方)，這是由於搜尋層數
太少所致。因此如前述廖嘉成，曹國明先生皆曾提出連將殺的概念，針對紅黑雙
方只有將軍與解將，每層步數較少的特性，而將搜尋層數往下延伸數層。如此遇
有連將殺時，電腦才不會只走出得子的步，忽略奪將的步，從而達到提高棋力的
目的。但光是這樣是不夠的。依造人類對局的經驗，步數算得愈多，愈準，愈快，
棋力也就愈高。初級棋手可能只能針對少數重要著手算五、六步(層)，懂得簡單
得子的技巧;中級棋手算的步數更多，能得出十幾步之後的連將殺;高級的棋手則
能算出步數更多的催殺步，也就是以下要提到的停著殺。 
所謂停著是與將軍著作區別：表面上看沒有將到對方，走子不貣進攻作用，
類似於閒著。但事實上，停著一走，若對方不應，則可於下一步或數步之後將死
對方，故為一種催殺步。稱為停著殺，即指停著與殺著兩者之結合。以人類對局
經驗而言，停著殺之難度遠大於連將殺。這是因為連將殺所考慮的步數是相當明
顯的，只限於將軍與解將。而停著殺中由於停著的出現，要決定那一步停著是正
確的，其判斷因素相當複雜：如棋子特性、棋勢(三子歸邊可成殺)、棋型辨認
(pattern recognition)等。這些因素如果沒有大量對局經驗的累積，是無法確實
掌握的。因此以人類對局而言，能下出停著殺的棋手，通常是棋力較高者。[陳 
1995] 
有鑑於此，發展電腦象棋的停著殺實有其必要。尤其是現代對局，往往是開
局、中局階段已決定勝負，故提高中局攻殺能力非常重要。另外，電腦象棋發展
至今，對於殘局仍然沒有一個妥善的解決方法，導致以中局搜尋技巧來下殘局。
因此出現人類來下可輕鬆獲勝，但電腦來下則盤面循環，該勝變和。在這種情況
下，電腦若能朝開、中局下功夫，未至殘局之前已取得決定性優勢，未嘗不是一
種解決之道。停著殺的建構理念亦在此。如前所述，連將殺已有人提出研究心得，
其目的是不希望錯失將死對方，馬上結束比賽的機會。基於同樣的理念，在將軍、
解將、將軍、解將...的過程中，出現一步或數步停著，但最後仍然可將死對方，
這種情況不應該排除在外，仍頇處理。 
2.3 圍棋 
電腦圍棋自 Zobrist在 1970年設計出第一個可與人對奕的程式以來，至今已
有約三十年的歷史，目前世界上最強的十九路電腦圍棋程式棋力約有台灣業餘六
級，九路電腦圍棋程式棋力約有台灣業餘四級，程式進步的速度有趨緩的現象。
[Chen 2001][Bouzy and Cazenave 2001][顏 1997b 1999a] 
在電腦圍棋相關文獻方面，即使世界上的圍棋人口大部分在東亞，但是研究
電腦圍棋的人卻分佈於全世界，在電腦對局(computer game)的研究領域裡，電腦
 10 
由於圍棋程式複雜度太高，進行全局搜尋最多只能搜尋四至六層。因此，在
本計劃中，我們將迫著搜尋應用在棋串攻殺系統，棋串攻殺能力是下圍棋最基本
的要求。棋串攻殺系統主要的功能是用來測詴某一特定棋串的安危狀態，即其是
否會被吃掉，若會被吃掉的話，則還會算出如何去吃它，或如何逃脫，或說明此
棋串一定會被吃掉而無法逃脫等等。 
我們的棋串攻殺系統包括兩個子程式：一個稱為 Killer，它可以計算出一個
棋串是否會被吃，以及如何去吃。另一個稱為 Defender，可以計算出一個棋串是
否會是安全的，以及如何去逃脫。此兩個子程式彼此互相呼叫而形成一顆搜尋樹，
如圖 2 與圖 3所示。 
在棋串攻殺中，如果能夠針對某些狀況來限制搜尋，將可以提升搜尋深度，
如征子，一口乾等，都是基本的迫著搜尋應用，但在搜尋深度加深時，同型反覆
以及劫爭規則的問題，將是一大難題，這也是本計劃的研究方向。 
 
        Killer 的節點 
 
 
        Defender 的節點 
 
圖2 一棵Killer搜尋樹 
 
        Killer 的節點 
 
 
        Defender 的節點 
 
 
圖 3 一棵 Defender搜尋樹 
 
 12 
3.1.3 進一步提高雙迫著搜尋的效率與準確度 
雙迫著搜尋的過程中，首先要搜尋攻擊方可產生兩組迫著的攻擊棋步，接著
再搜尋防守方可產生阻擋兩組迫著的防守棋步，如此遞迴呼叫搜尋下去。由於一
組迫著可能有兩處，防守方要從兩處中擇一來防禦，原本要透過搜尋來詴下每一
處迫著位置，若將兩處位置同時都給予防禦的權利，即一次擺兩顆棋子阻擋一組
迫著，即保守型的防禦方法，如此一來則不需要詴下每一處迫著位置。如下圖 4 
(A)，一個活四線段的兩端，共有兩組迫著、四個位置，防守方則有三種防禦方式，
分 別 如 (B) 、 (C) 、 (D) ， 而 採 用 保 守 型 的 防 禦 後 則 形 成 如 (E) 。
 
使用保守型防禦，則搜尋樹中的每個防守分支度，由最多三個減少成一個，
因為防守方的選點變成了固定的公式，沒有選擇的空間，這對搜尋帶來很大的加
速效果，但也會產生精確度下降的影響，這也是我們必頇解決的問題。 
前面提到利用保守型防禦策略來減少搜尋樹中防守方的分支度，但此策略其
實過於偏坦防守方，因為經過每一層搜尋，防守方的棋子增加數量比攻擊方棋子
增加數量還多，最多一次可增加四顆棋子，自然會導致對攻擊方越來越不利的盤
面，減少了發現雙迫著搜尋解答的可能性。用此方式，倘若找得到解答，那麼即
是百分之百正確的解答，反之若找不到解答，卻不代表沒有雙迫著解答存在。保
守型 DTS 的優點是搜尋快速，缺點則是準確度下降，是一個有風險的策略。 
圖 4.保守型防禦 
(A) 
(B) 
(C) 
(D) 
(E) 
 14 
 
3.1.4 研究候選棋步優先順序及數量限制 
對於候選棋步優先順序及數量限制，我們初步的研究結果如下列四小節內
容，然而此結果仍然有很多需要改進的空間，必頇導入更多的六子棋專家知識來
加以修正。 
為了避免防守方棋子增加數量過多，我們針對一組迫著有兩處選擇的情況作
了進一步的處理。基本上鄰近攻擊方活四的線段兩端的迫著，一定會予以考慮，
如圖 8(A)。至於另一處迫著是否要列入防守，則先在迫著位置詴下防守方棋子，
若能產生的防守方其他的連線棋形，例如活二、眠二，或者是連三、連四以上的
棋形，如圖 8(B)、(C)，才予以考慮。其他如(E)等，死二、斷二等等的棋形，以
及不可能連六的棋形，則都不予考慮。如此，依據經驗法則的觀察研究來改良，
減少防守方的棋子數量，我們預計將能夠增加搜尋的準確度。 
 
 
圖 7 黑方 DTS 失敗 
 16 
d : 目前的搜尋深度層次 
w : 可指定的參數( 1~9 ) 
 
經由對雙迫著搜尋的深入觀察，我們發現另一個加速搜尋的關鍵，即候選棋
步之間的距離，當間隔距離越小，搜尋的局部範圍越小，類似於尋找局部解之作
用；距離越大，搜尋範圍越大，搜尋的變化就越多，類似尋找全局解之作用。尋
找全局解所耗費的時間自然較多，但六子棋盤面上若存在局部解，則同樣可以取
勝，在找得到任何一種解答的前題下，搜尋時間越短越好，不需要在乎是否為全
局最佳解。其次，設定候選棋步間距限制的程式設計，相較於解讀與處理其他的
盤面資訊的來得簡單，程式計算量極小，因此若過濾掉的節點亦是其他加速方法
所過濾掉的節點，則先採用此方法，可以大量減少程式執行時間。同樣的，候選
棋步間距越小，搜尋速度越快，搜尋精確度越低，兩者之間需取得最佳的效果，
我們以實驗測詴來找出最佳參數。 
3.2 象棋 
象棋中局的搜尋大部分是採取 A 類搜尋與其他搜尋技巧結合的方式，因此對
局樹展開的層數有限，大概 14到 17層。為了彌補搜尋層數的不足以致錯失好著，
必頇加入連將殺的概念，嘗詴對連將殺這類變化簡單(雙方只有將軍，解將)的情
況，加深搜尋的層數，以達到快速獲得勝利的目的。發展停著殺的最主要目的乃
是提高中局的攻殺能力，本質上來說則是傳統中局搜尋的輔助技巧。這是第二年
的主要研究課題。進度如下： 
 （2008 年 8月至 2008年 10 月）研究象棋程式中的停著殺搜尋架構 
 （2008 年 11月至 2008年 2 月）研究象棋程式中的停著殺演算法 
 （2009 年 1月至 2009年 4 月）研究如何象棋棋規對迫著殺的影響 
 （2009 年 4月至 2009 年 7 月）研究加速方法包括停著的排序及同型
表的使用 
3.2.1 系統實作 
發展停著殺的最主要目的乃是提高中局的攻殺能力，本質上來說則是傳統中
局搜尋的輔助技巧。為了測詴其演算法針對不同的停著殺局的執行效率，故本計
畫發展出一個雛型如圖 9所示：  
 
 
 18 
    將目前棋盤區的盤面儲存在棋局檔中，棋局檔最多允許儲存 65535  
    盤棋局。  
八、結束：  
    結束程式的執行。  
3.2.2 停著殺的搜尋樹結構  
圖 10是停著殺的搜尋樹結構，從貣始盤面開始，紅方(代表電腦)先產生一定
的著法(先考慮將軍著，後考慮停著)，黑方則根據紅方的著法產生應著，如此交
互進行，直到固定的搜尋層數為止。所產生的所有變化，即形成搜尋樹結構。  
  
   
      
圖 10. 停著殺的搜尋樹結構 
從圖中可以清楚的看到雙方根據不同的情況，可以有三種著法：將軍著、解
將著、停著。將軍著、解將著數目有限，通常於某一盤面時，只有三、四著；至
於停著，則可能有數十步之多。這表示產生停著的那一層的分支度(branch)會特
別的大，直接影響到停著殺的執行效率。  
 20 
  
在此應特別注意走出停著的那一層，由前述停著是與將軍著作區別，因此針
對該層的停著數目等於所有可能著法扣除將軍著。換句話說，產生停著的那一層
之分支度(branch)會特別的大，直接影響到執行效率。另外，在整個搜尋過程中，
常常會面臨到相同的盤面，如果重複搜尋，不但毫無意義，也會降低執行效率。
在此提出兩個解決方法：  
 停著的排序(sorting)：  
由於停著數目眾多，若走了錯誤的停著，則花費在該停著以下的整個子搜尋
樹的時間，將成為不必要的浪費。這種情況於多停著殺局尤其明顯。有鑑於此，
如果能在往下搜尋之前，先做停著的排序，找出"可能正確"的停著，將可提昇停
著殺的執行效率。  
 同型表(transposition table)：  
在展開對局樹的過程中，經常會出現經由不同路徑走到同一盤面的情況。若
此盤面下之子樹已經搜尋過，則沒有必要重複搜尋。如此作法雖能節省整個搜尋
時間，但相對地也需要額外的精力去比對盤面。整體而言，若砍掉的子樹夠大(即
省掉重複的時間夠多)，這種作法還是值得的。  
 象棋由於是雙方互相攻殺的遊戲，紅方攻擊，黑方就防守，反之亦然。當有
一方走出停著時，通常就是攻守互易之時。在整個攻防過程中，若有一方掌握絕
對優勢，則勝敗立分；若雙方俱無攻堅之力，則和勢可成。停著殺亦是根據這種
性質發展其演算法，即紅、黑雙方各有其演算法，互相攻殺，彼此呼叫，形成遞
迴的關係。如下列所示。  
紅方演算法:  
  
   產生雜湊位址( );  
   比較目前盤面與該雜湊位址上的同型表內容();  
  
       if  (同型表中的內容與目前盤面相同)   
          return(failure);  
  
       產生將軍著();  
                  
       if  (所有的將軍著都殺不死黑方)  
       if  (停著數不等於零)  
       {   
         產生停著();   
         停著數--;  
       }    
  
       if  (所有的著法都殺不死黑方)   
 22 
B處將軍，則黑方可將包移至 A處解將，瓦解紅方的攻勢。因此四路炮的走法有"
阻擋黑方墊包解將"的作用。此局若以電腦實作，則可歸納規則如下：  
1.紅炮頇與黑將在同一路上(即橫座標相同)，如此始能威脅黑方。  
2.紅炮能走到 A處，黑包亦能走到 A處。  
  
     
  
  
圖11. 炮的經驗知識(1) 
 
圖 12中，紅方前炮可移至 C處，黑方因無子可走，只能上士。黑方若上右士，
則紅方帥移至 D；黑方若上左士，則紅方帥移至 E。兩者皆能控制將門，黑方只得
認負。此局若以電腦實作，則可歸納規則如下：  
1.炮頇移至黑將之前一步之處。  
2.炮頇為有根子(即受到另外一個棋子的保護)。  
  
 24 
  
     
圖13. 炮的經驗知識(3) 
 
如上所述，各個棋子各有其經驗知識，且由於特例太多，所以規則相當難歸
納。有鑑於此，本計劃又嘗詴另外的停著排序法，即採取二項排序標準，依優先
順序為解殺著、催殺著。所謂解殺著，即判斷目前盤面，若輪到對方走子，且經
過數步的連將過程之後可將倒電腦，則電腦頇針對該連將殺的主要進行路徑的第
一步採取防禦措施，如此所產生的停著即有可能是正確的停著。所謂催殺著亦是
判斷目前盤面，電腦方想出某一步停著後，本該輪由對方走子，此時若由電腦來
下，經過數步的連將過程之後可將倒對方，則該停著即為可能正確的停著。  
  
綜合以上所述可知，無論是解殺著與催殺著皆有以下特性：  
1.雙方皆是採取 null move。解殺著是由黑方連走兩步，再判斷是否為解殺著；
催殺著是由紅方連走兩步，再判斷是否為催殺著。  
2.所走的 null move，事實上是執行數步的連將殺。  
如果比較前述兩種排序法，我們可發覺各有其優缺點。歸納如下：  
F 
 26 
b.盤面狀態： 記載紅黑雙方 32 個棋子在棋盤上的位置，若該棋子已            
被吃掉，其值為零。每一個棋子佔一個 byte。棋子以三個文數字表達：  
  
            第一個字：代表紅方或黑方。  
               r代表紅方(red)，b代表黑方(black)  
  
            第二個字：代表兵種。  
               r代表車(rook)。  
               h代表馬(horse)。  
               c代表包(canon)。  
               p代表卒(pawn)。  
               e代表象(elephant)。  
               g代表士(guard)。  
               k代表將(king)。  
  
            第三個字：代表同一類棋子的棋子編號。  
                 
c.next：為一個指標，指向下一個entry(指向雜湊值相同的盤面)，佔4個byte。  
       
                 
動態配置：  
靜態配置的 entry只能儲存 1024個盤面，當然不夠。為了解決這個問題，當
發生碰撞(即不同的盤面 hashing到相同的位址)時，就利用 chaining 的方式來處
理，也就是動態地向系統要求記憶體，分配一個 chain來儲存目前的盤面(儲存在
第一個 entry)。每個 chain 又包含 300 個 entry，當下一次碰撞產生時，即存在
該 chain 的下一個 entry，直到容量滿了，再分配下一個 chain。  
目前本系統動態產生的 chain共 300 個，每個 chain包含 300個 entry，共可
儲存 90000 個盤面。如此龐大的資料量，勢頇突破 DOS的 640K 限制。因此本系統
利用 Boralnd 公司的產品 Power Pack for DOS，產生的程式可進入保護模式
(protected mode)，並且最大可存取到 16MB的記憶體空間。  
同型表實作如下：  
1.雜湊(Hashing)函數：  
盤面的儲存採取下列方式：從左到右，從上到下，整個棋盤共有  90 個位置，
以 1，2，3...90 表示。然後以 10個位置為單位，分別  對應到 10個 bits，若該
位置有棋子，則 bit=1，反之為 0。位置 1到  10，11到 20，21 到 30，31 到 40，
41到 50，51到 60，61到 70，71到  80，81到 90 各形成一個長度為 10 的 row，
所有的 row作 exclusive  or 運算後所得的結果即為雜湊位址。舉例說明如下：  
  
  
       0000101000==>第5，7個位置有棋子，以下類推。  
 28 
頇重複搜尋，以此來加快搜尋速度。如此每次搜尋層數加二，直到超過最大容許
的搜尋層數（此處為十五層)為止，再判斷是否有解。  
  
  
 30 
 Generate_kill_moves; 
 node++ ; 
 for every moves do 
 begin; 
  Make this move; 
  Ans = defender( level+1 , brd , pos ) ; 
  recover board ; 
  If ( ans == Failure ) return Success ; 
 end; 
 return Failure ; 
end ; 
 
Defender 的演算法 
 
procedure defender( SafeLib , level , brd , pos ) 
begin ; 
 if ( liberary == 0 )   return Failure ; 
 if ( level > Maxlevel )  return success ; 
if ( node > Maxnode )  return success ; 
if ( library > SafeLib )  return success ; 
generate_defend_moves ; 
node++ ; 
for every move do 
begin; 
 Make this move on board; 
 ans = multi_killer(level+1,brd,pos) ; 
Recover board ; 
If ( ans == Failure ) return Success ; 
end ; 
return failure ; 
end 
 
 32 
 
 
 
圖 16. 一個攻殺的例子(2) 
下列步驟是我們系統原有的找出殺步和逃步的方法。 
殺步產生順序 
(1)  若目標棋串只有一氣就提吃它，並傳回 True。 
(2)  若此棋形與攻殺輔助棋形相同，則依攻殺輔助棋形指示產生著手。 
(3)  若該棋串周圍有僅有一氣之我方棋子，則下在此我方棋子之氣點上。 
(4)  下在該棋串的氣點上，其順序為若對方下在此點長氣越多越優先。 
(5)  若周圍有己方棋子，其氣數小於此棋串，則先嘗詴救此棋串。 
(6) 門。 
(7) 撲。 
逃步產生順序 
(1)  若周圍對方棋串只有一氣就提吃它。 
(2)  若目標棋串只有一氣就下在此氣點上。 
(3)  若此棋形與攻殺輔助棋形相同，則依攻殺輔助棋形指示產生著手。 
(4) 詴著去吃周圍只有兩氣的敵方棋串。 
(5) 下在該棋串的氣點上，其順序為長氣越多越優先。 
(6) 攻擊周圍敵方棋串氣數小於我方者。 
(7) 做眼。 
 34 
黑棋之所以能在節點 C下棋步 a，是因為白棋找不到劫材，不得不在局部盤面
手拔。在這邊白棋其實做了一個手拔的動作，也就是一個手拔棋步。於是我們將
手拔棋步納入考慮，重新依據盤面間的關係繪製出一個新的有向圖，就是圖 17 
(c)。在這張圖中，節點 B及節點 C都分裂為兩個節點：相同盤面但著著方不同。
所以，節點 B中黑棋之所以選擇棋步 a，目的是期待如果白棋因為沒有劫材而被迫
手拔進入節點 C'，而後黑棋便可以順利做活了。節點 C中白棋的棋步 b也是同樣
的道理。 
接下來再做進一步的觀察。由於我們已經知道節點 D的狀態值是 L，因此節點
C'的狀態值也是 L。而從節點 C的角度來看，棋步 a指向節點 B，是唯一能通往殺
死黑棋的節點 E 的棋步，而手拔棋步卻是指向黑棋做活的節點 C'。如果搜尋邏輯
正確的話，節點 B的狀態值一定是來自棋步 a，因為這棋步對於節點 C的著方（白
棋）最為有利。那麼，位於節點 C之前的節點 B，又該如何得知其實節點 C的手拔
棋步是唯一能通向節點 D的棋步呢？ 
由以上推論我們可以得知，要讓黑棋在節點 B知道「只要打勝劫爭就能做活」，
節點 B 就必頇要能繞過白棋節點 C而直接取得黑棋節點 C'的資訊～～這表示從節
點 B必頇要有一個棋步直接指向節點 C'。類似的棋步也應該存在於節點 C與節點
B'之間。圖 17 (d)說明了這個概念。 
在此我們還得討論：節點 B 從節點 C'所得到的狀態值可以是 L 嗎？顯然是不
行的。淨活與劫活有相當大的差異，至於不懂圍棋的讀者則可以詴著觀察看看。
節點 B 以棋步 b'指向節點 C'，真實的情況卻是黑棋下了棋步 b之後白棋「因故」
手拔。這個讓白棋手拔的「原因」卻是受到局部盤面之外的全局盤面因素（雙方
劫材的多寡）所影響，並非局部搜尋所能決定的。也就是說，黑棋於節點 B 時一
旦選擇棋步 b'，便是在冒某種未知的風險，所以當棋步 b'將節點 C'的狀態值傳回
a b
A
B
C
a
b
b a
a
E:D
D:L
A
B
C
a
bb a
a
E:D
D:L
C':L
B':D
K
K
A
B
C
a
bb a
a
E:D
D:L
C':L
B':D
(a) 
(b) (c) (d) 
圖 17. 一個簡單的劫爭盤面，以及搜尋過程的節點樹圖。 
 36 
 
4 結果及討論 
4.1 六子棋 
本章節將針對我們計畫中所提出的各種雙迫著搜尋加速策略，實現於電腦六
子棋程式 X6，並且進行一系列實驗與測詴，最後是實驗結果的分析。 
4.1.1 系統平台與介面 
我們使用 Borland C++ Builder 6.0 為軟體開發工具，按照前所提之構想與
演算法，設計出電腦六子棋程式 X6，進行實驗的測詴平台為 Intel P-M 1.5G、1.25G 
Ram、40GB 4200rpm HDD、Windows XP Professional 的電腦。 
本系統的操作介面如圖 18所示，我們將找出一些具有下一回合即可雙迫著的
實戰棋譜，讓此系統讀取棋譜，轉成盤面，準備執行雙迫著搜尋，並且記錄搜尋
時間。 
 
 
當按下 GameStart 按鈕之後，系統將開始進行雙迫著搜尋，若搜尋成功則會
出現畫面如圖 19，並於右下方的 Debug 視窗介面中，顯示系統計算出此棋步所耗
費的總時間。 
 
【圖 18  程式介面圖】 
 38 
 
我們選出 30 例具備雙迫著的六子棋實戰棋譜，提供上述實驗項目作為測詴之
樣本棋譜內容如附錄 A。為了方便實驗結果之數據圖表之閱讀，對於這 30例棋譜，
經由各項實驗所獲得的計算時間，來估計該譜盤面的雙迫著搜尋樹的複雜度，我
們已將各譜的編號依照複雜度由低至高重新編排順序，如下表，第 01~10 例為低
複雜度，第 11~20 例為中複雜度，第 21~30 例為高複雜度。此 30例實戰棋譜內容
如附錄 A，各棋譜之盤面手數（棋子數）如下表： 
 
低複雜度 棋譜編號 1 2 3 4 5 6 7 8 9 10 
盤面手數 75 21 7 27 33 17 13 73 23 9 
中複雜度 棋譜編號 11 12 13 14 15 16 17 18 19 20 
盤面手數 33 23 35 7 19 15 11 51 125 11 
高複雜度 棋譜編號 21 22 23 24 25 26 27 28 29 30 
盤面手數 23 25 27 67 7 33 35 41 25 47 
【表1 實驗棋譜複雜度與盤面手數關係】 
圖 20為盤面的雙迫著搜尋時間比例與手數（棋子數量）比例之關係圖，搜尋
時間最大是 100 秒，棋步數量最多是 125 顆。此圖只是為了說明，盤面上的棋子
數與雙迫著搜尋時間兩者之間是沒有直接關連性的。 
 
0%
20%
40%
60%
80%
100%
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
棋譜
棋子數量比例 搜尋時間比例
 
【圖20 實驗棋譜手數與雙迫著搜尋時間關係圖】 
4.1.3 結果與分析 
4.1.3.1 保守型DTS與改良式DTS實驗 
 
 40 
【圖21保守型DTS與改良型DTS之平均搜尋時間比較】 
 
4.1.3.2 棋步記憶快取實驗 
圖 22 為有使用棋步記憶快取與未使用棋步記憶快取之雙迫著搜尋的時間關
係，圖 23 為使用棋步記憶快取後，所減少的時間比例，圖 24 則是棋步記憶快取
區的平均命中率。我們可以明顯看出使用棋步記憶快取的搜尋時間較快速且平
穩，平均減少的時間比例為 57%，記憶快取區的平均命中率為 45%。由於有顯著的
加速效果，接下來的實驗，我們則皆啟用棋步記憶快取。 
0
100
200
300
400
500
600
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
棋譜
秒
數
有使用棋步記憶
未使用棋步記憶
 
【圖22有無啟用棋步記憶之搜尋時間比較】 
0%
20%
40%
60%
80%
100%
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
棋譜
使用棋步記憶後，減少的時間比例，平均=57%
 
【圖23啟用棋步記憶區之減少的時間比例】 
0%
10%
20%
30%
40%
50%
60%
70%
80%
90%
100%
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
棋譜
棋步記憶區命中率，平均=45%
 
 42 
0
500
1000
1500
2000
2500
1 2 3 4 5 6 7 8 9 10
漸進量參數
秒
數
最大值
大數值加總
 
【圖26 IDFS漸進量參數之最大搜尋時間】 
 
0
50
100
150
200
250
300
350
400
450
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
棋譜
秒
數
漸進量參數5
漸進量參數9
 
【圖27 IDFS漸進量參數最佳值比較】 
4.1.3.4  候選棋步數量限制實驗 
本實驗之棋步數量上限參數項次共分為十項，參數 0表示不限制數量，參數 9
相當於最大的棋步數量上限，參數 1則為最少的棋步數量上限。圖 28為各參數項
次的平均搜尋時間。圖 29 為搜尋時間縮短量以及搜尋失敗率。圖 30 為各項次的
最大搜尋時間，以及最大搜尋時間總合（搜尋時間大於 100秒者）。結果與理論相
同，雙迫著搜尋時限制的棋步的數量上限越少則搜尋速度越快，但參數 3 以下便
會有搜尋失敗的狀況發生，因此我們選定的候選棋步數量上限參數建議值為 4 以
上，搜尋時間比未限制棋步數量時，縮短了 60%。 
 44 
 
4.1.3.5 候選棋步間距限制實驗 
本實驗之棋步間距參數值，即為棋盤上兩點之間隔距離（即 X 軸與 Y 軸差距
值取較大者），分別設定為 19~1。圖 31 為各棋步間距參數之平均搜尋時間。圖 32
為各棋步間距參數之最大搜尋時間。圖 33 則是各棋步間距參數之減少的時間比
例，以及搜尋失敗率。我們發現，間距設定在 6 格以下，便開始會有搜尋失敗的
狀況發生，因此本參數的最佳建議值為 7~9。搜尋時間可縮短 10%~20%。 
0
2
4
6
8
10
12
14
16
18
20
19 17 15 13 11 10 9 8 7 6 5 4 3 2 1
棋步間距參數
秒
數
平均搜尋時間
 
【圖31.  DTS候選棋步間距上限參數之平均搜尋時間】 
0
25
50
75
100
125
150
175
200
19 17 15 13 11 10 9 8 7 6 5 4 3 2 1
棋步間距參數
秒
數
最大搜尋時間
 
【圖32.  DTS候選棋步間距上限參數之最大搜尋時間】 
 46 
  
棋局編號 執行時間(秒) 搜尋節點總數  
4 1.604 78364  
9 0.236 6966  
11 3.517 223732  
12 3.015 130574  
26 0.504 22764  
45 0.166 4026  
53 0.405 15906  
58 1.654 73960  
69 27.046 1351642  
78 0.232 6494  
97 2.031 73518  
 
  
圖33. 不使用同型表的一停著殺局測詴數據  
 
  
棋局編
號  
執行時間
(秒) 
搜尋節點總
數 
儲存盤面總
數  
雜湊切捨總
數 
4  1.285 59260 95  23 
9  0.231 6760 24  6 
11  2.429 141868 127  24 
12  2.938 122464 69  10 
26  0.506 22556 17  1 
45  0.155 3596 18  2 
53  0.398 15762 24  10 
58  1.334 59790 35  8 
69  24.953 1223752 348  55 
78  0.225 5976 15  1 
97  1.893 67956 132  15 
 
  
圖34. 使用同型表的一停著殺局測詴數據  
 
 
 
 48 
7.  後炮進二(紅勝)  
    若以象棋特級大師解此停著殺局，且棋力定為最高(level=255)，變化如
下：  
1.  炮五平八 將 4退 1  
2.  兵七進一 馬 3退 4  
3.  炮八退四 包 4退 1  
4   炮八進二 包 4退 2  
5.  炮一退一 士 5進 6  
6.  炮八進一 包 4退 1  
7.  車五平三 卒 7平 6  
8.  車三退一 士 4進 5  
9.  炮八退四 卒 8平 7  
10. 車三退七 將 4退 1  
11. 車三進八 士 5退 6  
12. 炮一進一 將 4進 1  
13. 車三退一 士 6進 5  
至此黑方已立於不敗之地。換句話說紅方第一回合並沒有走出正確的著法，
而根據審局函數判斷，走出吃掉黑馬這一步棋，因此失去獲勝良機。此皆由於搜
尋層數不足所致。  
  
  
 50 
    
圖 37. 何順安(紅方)對丁曉峰(黑方) 
圖 38 是 1965 年，大陸棋手劉劍青(紅方)對胡榮華(黑方)的一局棋，輪由黑
方走子。從盤面上看，黑方四路車立於險境，必頇逃車。但黑方棄子搶攻。實戰
譜如下:  
1.  ........包 2平 5  
2.  仕五進六 馬 5進 4  
3.  帥五平六 包 9平 4  
4.  前車平六 馬 4進 2(黑勝)  
此局若以本系統來解，變化如下：  
1.  ........包 2平 5  
2.  仕五進六 馬 5進 4  
3.  帥五平六 馬 4進 2  
4.  後車進一 車 6平 4(黑勝)  
變化雖有不同，但同樣構成殺局。  
 52 
4.3.1 處理劫爭的演算法 
下面是加入處理劫爭規則後的搜尋演算法： 
// FIND_BRANCH_NODE 
// 這個函式負責找出候選棋步所指向的節點 
// 當發現候選棋步是循環棋步的時候，先檢查循環的距離。 
// 如果是 1，表示這個循環是一個劫爭，便會在節點中留下劫爭的訊息 
// 劫勝棋步會等所有正常棋步所指向的節點都已搜尋，並且沒有引發 And-Or 剪
除動作， 
// 才會真正指向實際的節點 
 
procedure FIND_BRANCH_NODE   // 具有劫爭功能 
input: 候選棋步 
begin 
  將頂節點的盤面與候選棋步相加，產生「和盤面」 
  以(和盤面,棋步棋色的反方)為鍵值在節點表格中尋找是否有相應的節點 
  if 相應的節點尚未存在 then 
    新產生一個相應節點並放入節點表格中 
  else 
    if 相應節點在路徑堆疊之中 then  
      if 相應節點與頂節點的距離為 1 then    // 兩個節點上下相鄰，表示這
是一個單純的劫爭 
        頂節點以候選棋步指向相應節點，但隨即設為「剪除」 
        在頂節點中留下「候選棋步會造成劫爭」的訊息 
        找出相應節點指向頂節點的棋步 
        在相應節點中留下「此棋步會造成劫爭」的訊息 
      else 
        return    // 更複雜的循環指向，只得刪除此候選棋步 
      end-if 
    end-if 
  end-if 
  頂節點以候選棋步指向相應節點 
end 
  
 
// SUMMARIZE_BRANCHES 
// 這個函式負責加總所有的子節點的狀態值 
// 如果加總狀態值不甚令人滿意，會先檢查雙活、再檢查是否要產生劫勝棋步 
// 一個節點是否能產生劫勝棋步，是看先前在產生子節點時 
//  FIND_BRANCH_NODE 是否有留下劫爭訊息 
// 在劫爭的搜尋也結束後，劫勝棋步的傳回值會和其他正常棋步的傳回值一貣參
予加總 
 
procedure SUMMARIZE_BRANCHES    // 具有劫爭與雙活功能 
 54 
造成劫爭的棋步會造成循環指向，所以必頇剪除，以避開對該棋步進行的搜
尋與加總動作。讀者要注意「剪除」與「刪除」的棋步有很大的不同：被刪除的
棋步將不再存在，被剪除的棋步則依然存在於搜尋動作中，並且當節點全部都已
結算的時候，所有的節點之間只要有棋步相連，彼此的狀態值就必頇符合 minimax
原則。 
4.3.2 劫爭不成立的情形 
有了劫爭示意圖之後，我們可以用比較方便的工具來討論一些進階的問題。
圖 39是一個標準的劫爭示意圖，圖中可以看到，正因為劫爭結果是黑棋勝可以做
活，白棋勝可以殺死黑棋，這個劫爭才有意義。 
但有時候不論黑勝還是白勝，劫爭的結果都是相同的，處裡這樣的劫爭，就
必頇特別注意。圖 39是一個例子。（其中圖(a)將節點 A擺在上方，表示搜尋是從
節點 A 貣始。而圖(b)表示搜尋是由節點 B貣始）兩個結果節點的狀態值都是 L，
所以劫爭節點的狀態值應該也都是 L，這樣雙方才能正確地知道無論劫爭的結果為
何，白棋都無法殺死黑棋。 
綜合以上，我們可以得到兩點結論： 
一定要雙方都願意打劫，劫爭才能成立。更進一步解釋，即劫爭節點組中的
兩個節點都以劫勝棋步為最佳著手，劫爭才能成立。 
當劫爭中的節點選擇引發劫爭的棋步卻不選擇劫勝棋步時，顯然就有問題存
在了～～這代表贏得劫爭的代價不值得。然而這不代表劫爭沒有意義，因為或許
對方非贏不可。我們會在下一節看到這類的例子。 
為解決第一點，我們將要求劫爭節點在結算時檢查是否以劫勝棋步為最佳著
手。如果不是，則立刻要求成組的另一個劫爭節點將劫勝棋步剪除（或者清除劫
爭訊息）。如果對方已經結算（這種情況下，該節點一定是已經以劫勝棋步為最佳
著手），只好令其重新再加總一次。 
為解決第二點，我們將增加一個檢查：如果劫爭節點在結算發現提劫棋步為
最佳著手，則立刻再檢查兩側的結果節點狀態值是否一樣。如果一樣，則劫爭無
意義，兩個劫爭節點的狀態值就都設為結果節點的狀態值。如果不一樣，那麼……
留待下一節解決。 
A:
KwD
B :
KbL
A':L
B':D
a(k)
b(k)
ba
圖39. 典型的劫爭示意圖 
A:
KwD
B':D
A':L
B :
KbL
ba
b(k)
a(k)
(a) 貣始點為白棋節
點 
(b) 貣始點為黑棋節
點 
 56 
    if 該劫勝棋步指向有效的節點 then 
      return    // 回到主迴圈對劫勝棋步指向的節點進行搜尋 
    end-if 
  end-if 
   
  頂節點的死活狀態值 := 加總的狀態值 
end 
  
 
// INVALID_KO 
// 處理劫爭可能無法成立時的狀況 
// 主要分成兩種狀況：一種是以提劫棋步為最佳著手時，這表示劫爭存在但雙方
的價值判斷不同 
// 因此需要比較結果節點的狀態值來決定劫爭的價值 
// 另一種狀況則是劫爭沒有存在的必要 
 
procedure INVALID_KO() 
begin 
  找出與頂節點成組的另一個劫爭節點 
  if 頂節點的最佳著手是提劫棋步 then    // 此時另一個劫爭節點必然已經
結算 
    找出這組劫爭節點的兩個結果節點 
    if 兩個結果節點的狀態值相同 then 
      兩個劫爭節點的狀態值 := 結果節點的狀態值 
    else 
      // （留待稍後說明） 
    end-if 
  else  // 即頂節點以正常棋步為最佳著手 
    剪除頂節點的劫勝棋步 
    將頂節點所有未剪除棋步傳回的狀態值加總 
      // 此時頂節點必定已經完成雙活檢查，而其狀態值又已確認與另一個劫爭
節點無關， 
      // 所以可以逕行加總 
    頂節點的死活狀態值 := 加總的狀態值 
    if 另一個劫爭節點尚未結算 then 
      清除另一個劫爭節點的劫爭資訊 
    else 
       // 既然頂節點、即其中一個劫爭節點已經結算，則即使將另一個劫爭節
點中的提劫棋步恢復作用， 
       // 也不會有循環指向的問題了 
      找出另一個劫爭節點的提劫棋步 
      將該棋步的「剪除」狀態清除 
      將該節點所有未剪除棋步傳回的狀態值加總 
      該節點的死活狀態值 := 加總的狀態值 
 58 
end 
4.3.4 全盤劫材數量對死活狀態值排序順序的影響 
最後要討論的是 KbKbL與 KwKwD的大小。這可以分成三部分來討論： 
1. 當黑白雙方劫材數量相同的時候，KbKbL可以做活而 KwKwD 無法做活，因此
KbKbL>KwKwD。 
2. 當黑棋的劫材數量多於白棋的時候，KbKbL和 KwKwD都可以做活，因此先讓
白棋付出代價的 KwKwD較為有利。 
3. 當黑棋的劫材數量少於白棋的時候，KbKbL和 KwKwD都無法做活，因此先讓
白棋付出代價的 KwKwD較為有利。 
可以注意到 KbKbL 與 KwKwD 的大小關係是和全盤的劫材數量息息相關的。進
一步推論更可得到： 
1. 當黑白雙方劫材數量相同時，KbL>KwD，所以
KwKbL>KbL>KbKbL>KwKwD>KwD>KbKwD。 
2. 當黑白雙方劫材數量不同時，KbL=KwD，所以
KwKbL=KwKwD>KbL=KwD>KbKbL=KbKwD。 
 
 
 60 
參考文獻 
中文 
1. 中國象棋協會，象棋競賽規則，上海辭書出版社  1999 ISBN: 
7-5326-0556-6。 
2. 中華民國象棋協會，中華民國象棋競賽規則，中華民國象棋文化協會出
版，2004。 
3. 徐國棟，2004，圍棋棋譜棋型比對系統，國立東華大學資訊工程研究所，
碩士論文。 
4. 徐家亮，2004，初學者象棋教室，國家出版社。 
5. 許舜欽, 1990a，電腦西洋棋和電腦象棋的回顧與前瞻, 電腦學刊, 第
二卷, 第二期, 頁1─8, 1990。 
6. 許舜欽, 1990b，電腦象棋程式的設計與製作, 電腦學刊, 第二卷, 第
四期, pp.1-11, 1990。 
7. 許舜欽 , 1991，電腦對局的搜尋技巧 , 台大工程學刊 , 第 51期 , 
pp.17-31, 1991。 
8. 許舜欽、曹國明, 1991，電腦象棋開局知識庫系統之研製, 台灣大學工
程學刊, 第五十三期, 頁75─86, 1991。 
9. 許舜欽、林益興、1991，電腦象棋的盲點解析, 電腦學刊, 第三卷, 第
四期, pp.1-6、1991  
10. 陳志昌，電腦象棋開局知識庫系統之設計與製作，台灣大學資訊工程研
究所碩士論文，1998。 
11. 陳志昌、許舜欽，2001，電腦象棋開局資料庫網路查詢應用系統之研
製”，第六屆人工智慧與應用研討會論文集，2001年11月16日，高雄，
pages 588-592。 
12. 陳志昌、徐明煒、顏士淨，2002，“Othello開局資料庫系統之研製,"  第
七屆人工智慧與應用研討會，2002年11月15日，台中，台灣。 
13. 陳再興，1995，“電腦象棋停著殺之研究”，元智工學院電機與資訊工
程研究所，碩士論文。 
14. 陳培殷，資料壓縮論，滄海書局，2001。 
15. 曹國明，1988，智慧型中國象棋程式的設計和製作，國立台灣大學資訊
工程學研究所，碩士論文。 
16. 顏士淨、嚴礽麒、許舜欽，2002a，“電腦圍棋中盤著手策略," 第七屆
人工智慧與應用研討會，2002年11月15日，台中，台灣。 
17. 顏士淨，2002b，國科會研究報告：一個可自動擷取專家知識的象棋知
識開發系統，90-2218-E-259-008-。 
18. 顏士淨, 楊泰寧, 董昱騰, 2003，電腦象棋程式達奕之設計與製作, 第
八屆人工智慧與應用研討會, 2003 
19. 嚴礽麒，顏士淨，2003，棋形知識庫之設計與製作，中華民國92年全國
計算機會議，1784-1792頁。 
 
 
 
 62 
pp. 96-114, Vol. 2063 of Lecture Notes in Computer Search. 
Springer-Verlag, Berlin. ISBN 3-540-43080-6. 
13. Fang H.R., Hsu T.S., and Hsu S.C. (2003). Indefinite Sequence of Moves 
in Chinese Chess Endgames. Lecture Notes in Computer Science: 
Proceedings of the 3rd International Conference on Computers and Games 
(eds. J. Schaeffer and M. Müller). Springer-Verlag, New York, N.Y.  
14. Hong Kong Chinese Chess Association. Asia Xiang Qi rules. 
http://www.clubxiangqi.com/rules/asiarule.htm, 1989. English 
Translation by Eric Wu. 
15.S. Gelly and S. Silver, “Combining online and offline knowledge in 
UCT,” in Proceedings of the 24th International Conference on Machine 
Learning (ICML 2007), New York, USA, 2007, pp. 273-280. 
16. Herik, H.J., Herschberg, I.S. (1985). The construction of an omniscient 
endgame database. ICCA Journal Vol.8 NO. 2, pp. 66-87. 
17. Herik, H. J. van den, Uiterwijk, J.W.H.M., and Rijswijck, J.V. (2002). 
Games solved: Now and in the future. Artificial Intelligence, Vol. 134, 
pp. 277-311. ISSN 0004-3702. 
18. Hiroyuki Iida, Makoto Sakuta, Jeff Rollason. (2002). Computer Shogi. 
Artificial Intelligence 134, pp. 121-144. 
19. Ho, M.H., Yen, H.C. (2002). A Dictionary-based Compressed Pattern 
Matching Algorithm, Computer Software and Applications Conference, 
2002. 
20. Hsu, T.S. and Liu, P.Y. (2002). Verification of endgame databases. ICGA 
Journal, Vol. 25 NO.3: 132-144 SEP 2002. 
21. Jagadish, H. V., Nick Koudas and Divesh Srivastava. (2000). On effective 
multi-dimensional indexing for strings, 2000. 
22. Jacobs, N.J.D. (1989). XIAN, A Chinese Chess Program. Heuristic 
Programming in Artificial Intelligence. The first Computer Olympiad 
(eds. D.N.L. Levy and D.F. Beal), pp. 104-112. Ellis Horwood, Chichester. 
ISBN 0-7458-0778-X. 
23. Japanese Professional Renju Association: History of Renju 
Rules.http://www.renjusha.net/database/oldrule.htm 
24. Kishimoto, A. and Muller M. (2003). A solution to the GHI problem for 
depth-first proof-number search. In Proceedings of 2003 Joint 
Conference on Information Sciences, pages 489-492, 2003. 
25. Kishimoto, A. and Muller, M. (2004). A general solution to the graph 
history interaction problem. In Proceedings of Nineteenth National 
 64 
39. Wu, R. and Beal, D.F. (2001b). Solving Chinese Chess Endgames by 
Database Construction. Information Sciences, Vol. 135, Nos. 3-4, pp. 
207-228. ISSN 0020-0255. 
40. Wu R, Beal, D.F. (2001c). Fast, memory-efficient retrograde algorithms. 
ICGA Journal, Vol. 24, NO3, pp. 147-159. 
41. C.-M. Xu, Z.-M. Ma, X.-H. Xu. “A method to construct knowledge 
table-base in k-in-a-row games,” Proceedings of the 2009 ACM symposium 
on Applied Computing, pp. 929-933, 2009. 
42. Yen S.J., Chen J.C. and Hsu S.C. (2004). “The World Computer Chinese 
Chess Championship 2004," ICGA Journal, Vol. 27, No.3, September 2004, 
pp. 186-188, ISSN 1389-6911. 
43. Yen S.J., Chen J.C., Yang T.N. and Hsu S.C. (2004). “Computer Chinese 
Chess,” ICGA Journal, Vol. 27, No.1, March 2004, pp. 3-18, ISSN 
1389-6911. 
44. Yen S.J. and Chen J.C. (2005). “HANDTALK Wins 19×19 Go Tournament," 
ICGA Journal, Vol. 28, No.3, September 2005, pp. 178-179. 
45. Yen S.J., Yang T.N., Lee C.J. and Ho Y. J.(2005). “Information 
Retrieval in Go Game Records,” Workshop on the Sciences of the 
Artificial 2005(WCB 2005), December 7-8, 2005, Hualien, Taiwan. 
46. Yen S.J., Chen J.C. and Hsu S.C. (2006). “NEUCHESS Wins Chinese-Chess 
Tournament," ICGA Journal, Vol. 29, No.2, June 2006, pp. 100-101. 
47. Shi-Jim Yen, Chang-Shing Lee and Teytaud Olivier, "Human vs. Computer 
Go Competition in FUZZ-IEEE 2009," ICGA Journal, vol. 32, no. 3, pp. 
178-180, Sept. 2009. 
48. Shi-Jim Yen, Masakazu Muramatsu and Takeshi Ito, "KCC Won Third UEC Cup", 
ICGA Journal, vol. 32, no. 3, pp. 237-240, December 2009.  
49. Shi-Jim Yen, Cheng-Wei Chou and Hideki Kato, "The 2009 Game Programming 
Workshop 9X9 Computer Go Tournament", ICGA Journal, vol. 32, no. 3, pp. 
235-236, December 2009. 
50. Shi-Jim Yen, Shih-Yuan Chiu Cheng-Wei Chou and Jr-Chang Chen, "CPUZZLER 
WINS NONOGRAM TOURNAMENT," ICGA Journa.(to appear) 
51. S. J. Yen, J. K. Yang, "Monte Carlo Tree Search with heuristic knowledge 
applied in Connect6," IEEE Transactions on Computational Intelligence 
and AI in Games, 2010. (Accepted) 
52. Tai-Ning Yang, Chih-Jen Lee and Shi-Jim Yen, "Fuzzy Objective Functions 
for Robust Pattern Recognition," 2009 IEEE International Conference on 
Fuzzy Systems, August 20~24, 2009, ICC Jeju, Jeju, Korea. 
53. Shi-Jim Yen, Su Tsan-Cheng and Shih-Yuan Chiu,"Hitori Solver," the 14th 
Game Programming Workshop (GPW-09), November 13-15, 2009, Hakone 
  
國科會補助專題研究計畫項下赴國外(或大陸地區)
出差或研習心得報告 
                                     
日期： 98  年 12  月 15  日 
                                 
一、 國外(大陸)研究過程 
參加第 3屆 UEC電腦圍棋比賽，此次比賽共包括 34個隊伍參賽，
分別來自台灣、美國、法國、北韓與日本，比賽過程相當精采，
可以看出世界各國對電腦對局發展的重視。參訪考察日本棋院與
東京電氣通訊大學，日本大學較重視實務經驗，與日本棋院有密
切的合作，值得我們學習。 
二、 研究成果 
電腦科技日新月異，此會議中主題為電腦對局。遊戲產業為未來
明星產業，日本在這領域琢磨甚多。參加此次會議，與各國學者
交流，感覺受益良多。 
三、 建議 
1. 日本在先進科技方面，資源投入相當多，使得研究人員都能專
心做研究。在遊戲產業方面，投入很多研究人力，這方面值得我
們效法。 
2. 東京電氣通訊大學村松研究室致力於發展電腦圍棋領域，本校
人工智慧研究室將與其加強聯繫，並共同進行此領域的研究。 
計畫編
號 
NSC 96-2628-E-259-020-MY3 
計畫名
稱 
棋盤遊戲迫著搜尋演算法之研究 
出國人
員姓名 
顏士淨 
服務機
構及職
稱 
國立東華大學副教授 
出國時
間 
 2009年 12 
月 26 日至 
 2009年 12 
月 29 日 
出國地
點 
日本東京都調布市東京電氣
通訊大學 
  
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                   日期： 98  年 12  月 1  日 
                                 
一、參加會議經過 
參加 The 14th Game Programming Workshop 國際會議，發表論文，並且參
加國際電腦九路圍棋比賽，獲得第三名的佳績。 
 
二、與會心得 
電腦科技日新月異，此會議中主題為遊戲設計。遊戲產業為未來明星產業，
日本在這領域琢磨甚多。參加此次會議，與各國學者交流，感覺受益良多。 
 
三、考察參觀活動(無是項活動者省略) 
參訪日本棋院與東京大學。 
 
四、建議 
 
日本在先進科技方面，資源投入相當多，使得研究人員都能專心做研究。
在遊戲產業方面，投入很多研究人力，這方面值得我們效法。 
 
五、攜回資料名稱及內容 
Proceedings of Game Programming Workshop 2009。 
 
六、其他 
 
無。 
 
 
 
 
計畫編號 96-2628-E-259-020-MY3 
計畫名稱 棋盤遊戲迫著搜尋演算法之研究 
出國人員姓
名 
顏士淨 
服務機構
及職稱 
東華大學副教授 
會議時間 2009/11/13—2009/11/15 會議地點 日本東京駿河台會議中心 
會議名稱 
(中文)第 14 屆遊戲設計研討會 
 (英文) The 14th Game Programming Workshop 
發表論文題
目 
(中文) 六子棋的位元棋盤設計編碼方式 
 (英文) The Bitboard Design and Bitwise Computing in Connect6 
  
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                   日期： 98  年 12  月 1  日 
                                 
一、參加會議經過 
參加 The 14th Game Programming Workshop 國際會議，發表論文。 
 
二、與會心得 
電腦科技日新月異，此會議中主題為遊戲設計。遊戲產業為未來明星產業，
日本在這領域琢磨甚多。參加此次會議，與各國學者交流，感覺受益良多。 
 
三、考察參觀活動(無是項活動者省略) 
參訪日本棋院與東京大學。 
 
四、建議 
 
日本在先進科技方面，資源投入相當多，使得研究人員都能專心做研究。
在遊戲產業方面，投入很多研究人力，這方面值得我們效法。 
 
五、攜回資料名稱及內容 
Proceedings of Game Programming Workshop 2009。 
 
六、其他 
 
無。 
  
計畫編號 96-2628-E-259-020-MY3 
計畫名稱 棋盤遊戲迫著搜尋演算法之研究 
出國人員姓
名 
丘世元 
服務機構
及職稱 
東華大學博士班學生 
會議時間 2009/11/13—2009/11/15 會議地點 日本東京駿河台會議中心 
會議名稱 
(中文)第 14 屆遊戲設計研討會 
 (英文) The 14th Game Programming Workshop 
發表論文題
目 
(中文) 點燈拼圖解題器 
 (英文)  A Simple and Rapid Lights-up Solver 
無研發成果推廣資料 
期刊論文 5 5 80% 
47. Shi-Jim Yen, Chang-Shing Lee 
and Teytaud 
Olivier, ＇＇＇＇＇＇＇＇Human 
vs. Computer Go Competition in 
FUZZ-IEEE 
2009,＇＇＇＇＇＇＇＇ ICGA 
Journal, vol. 32, no. 3, pp. 
178-180, Sept. 2009. 
48. Shi-Jim Yen, Masakazu 
Muramatsu and Takeshi 
Ito, ＇＇＇＇＇＇＇＇KCC Won 
Third UEC Cup＇＇＇＇＇＇＇＇, 
ICGA Journal, vol. 32, no. 3, pp. 
237-240, December 2009.  
49. Shi-Jim Yen, Cheng-Wei Chou 
and Hideki 
Kato, ＇＇＇＇＇＇＇＇The 2009 
Game Programming Workshop 9X9 
Computer Go 
Tournament＇＇＇＇＇＇＇＇, 
ICGA Journal, vol. 32, no. 3, pp. 
235-236, December 2009. 
50. Shi-Jim Yen, Shih-Yuan Chiu 
Cheng-Wei Chou and Jr-Chang 
Chen, ＇＇＇＇＇＇＇＇CPUZZLER 
WINS NONOGRAM 
TOURNAMENT,＇＇＇＇＇＇＇＇ 
ICGA Journa.(to appear) 
51. S. J. Yen, J. K. 
Yang, ＇＇＇＇＇＇＇＇Monte 
Carlo Tree Search with heuristic 
knowledge applied in 
Connect6,＇＇＇＇＇＇＇＇ IEEE 
Transactions on Computational 
Intelligence and AI in Games, 
2010. (Accepted) 
 
國
外 論文著作 
研究報告/技術報
告 0 0 100% 
篇
 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
參與計畫人
力 
（外國籍） 
專任助理 0 0 100% 
人次
 
其他成果 
(無法以量化表達
之成果如辦理學
術活動、獲得獎
項、重要國際合
作、研究成果國際
影響力及其他協
助產業技術發展
之具體效益事項
等，請以文字敘述
填列。) 
本計畫有以下貢獻：本計畫的成果將對對局程式棋力的提高有相當大的幫助，下棋
為一種高智慧的行為，以資訊技術的方法來解決，在人工智慧上有相當大的意義。
發展此系統時，也將開發出一些搜尋演算法，圖形理論及機器學習理論，已經有 5
篇包括 IEEE TRANS.等級 的 SCI 期刊論文及 6 篇包括 IEEE 等級的會議論文發表。
所研發製作出的六子棋，象棋和圍棋程式與其他棋類相關程式，參加各種國際性的
比賽，目前已獲得四金五銀二銅的好成績。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
