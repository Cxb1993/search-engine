 2
需的時間也逐漸增加，因而導致程式開發
人員等待前端迴歸測試完成的時間變長；
我們將此時間稱為前端迴歸測試等待時
間。若在每次執行前端迴歸測試時，只選
擇部份相關的測試案例來執行，則可有效
地降低每次執行前端迴歸測試的等待時
間，並增進軟體開發的生產力及提昇軟體
品質。 
傳統後端迴歸測試採用以原始程式碼
為基礎的選擇技術 (source code based 
regression test selection) [8, 12]，其基本精
神如下：首先探討測試案例涵蓋原始程式
的程度，其次計算修改後的程式與原始程
式的異動範圍，最後選擇出可涵蓋該異動
範圍的測試案例並加以執行。此方法可應
用在後端迴歸測試的執行環境中，例如在
整合機器（integration machine）[2] 上執
行整合測試，但卻不適合應用於前端迴歸
測試。其主要原因為： 
 
z Lack of Controllability: 在 IDE 中，程
式開發人員應該能夠控制測試案例的
執行順序、數量以及每次的執行時間，
並且可以隨時終止迴歸測試的執行。此
外，迴歸測試選擇技術應該要避免某些
特定的測試案例永遠或鮮少被執行的
現象(test case starvation)。 
z Lack of Context: 在採用測試驅動開
發（test-driven development）[3] 的情
況之下，程式開發人員經常需要來回修
改原始程式與測試程式。此時若採用傳
統的 source code based regression test 
selection 技術，將由於並未考慮程式開
發的實況（context），而使得測試案例
選擇演法的設計與實作變的更加複
雜，可能會選擇出許多沒有必要的測試
案例而增加測試等待時間，造成生產力
降低。 
z Inversion of Coverage: 與 code-based 
regression-test-selection 技術相反，在軟
體開發過程中，程式開發人員經常是因
為修改測試程式或是修改測試資料而
執行前端迴歸測試，並非因為修改原始
程式而執行前端迴歸測試。在此條件之
下，我們所關注的是，如何一併選擇出
與本次所修改之測試案例相關的其他
測試案例。也就是說儘可能找出所有被
此次修改之測試案例所影響的其他測
試案例，而非傳統的測試案例涵蓋原始
測試的程度。  
對於一個實行 XP 或其他 agile 
software process 的軟體開發團隊而言，為
了支援重構（refactoring）與測試驅動開發
（test-driven development, TDD），能夠在
開發環境中自動、快速且有效地頻繁執行
測試案例將是極為重要的一項先決條件[3, 
6]。因此，Saff 提出了持續測試（continuous 
testing）的概念 [13, 14]。藉由利用 CPU
閒置的時間在背景模式下持續執行迴歸測
試，則可降低批次執行迴歸測試的等待時
間。然而由於 Saff 在研究中所使用的測試
案例其執行時間均非常之短，因此其持續
測試之作法與批次測試之比較效益並非十
分明顯。此外，Saff 的作法持續執行全部
的測試案例，因此當特定測試案例需要耗
費大量計算資源時，將會顯著地降低電腦
反應時間，影響程式開發人員之工作。 
本論文考量前端迴歸測試選擇模式之
特殊性與實用性，提出一個前端迴歸測試
選擇參考模型  (front-end regression test 
selection reference model)。此模型將同時
討論以原始程式以及測試程式作為選擇測
試案例的參考依據，並可讓程式開發人員
依據測試案例與原始程式的相依性、原始
程式本身的相依性、測試案例執行時間、
測試案例執行結果、最大可忍受之迴歸測
試等待時間、測試案例執行頻率、測試案
例或原始程式修改次數與時間等條件來選
擇測試案例。程式開發人員並可自行設定
前端迴歸測試選擇方法，達到客製化的目
的。此外，我們將以 Java 語言實做一個可
支援上述模型的前端迴歸測試選擇工具－
Reg4J。為了驗證本模型之有效性並增加其
實用性，我們將 Reg4J 設計為 Eclipse [5] 
整合開發工具的一個外掛程式(plug-ins)。
Eclipse是一個廣為使用的開放原始碼 Java 
IDE 環境與工具整合平台，藉由將 Reg4J
整合進 Eclipse 的平台中，將使得前端程式
 4
link），也就是說 Test Selection 可以透
過 And、Or、Not 關係運算來產生一個
更大的 Test Selection。我們將 And、
Or 、 Not 關 係 運 算 稱 之 為
TestCombination。Test Selection 與 Test 
Combination 可用 Composite pattern [7] 
來表示。 
z Test Constraint：選擇測試案例的限制
條件，用以限制 Test Selection 的參數。
例如，我們以 FailCount（測試失敗次
數）當作 Test Selection 方法，然後限
制只選擇出失敗次數大於 3 次的測試
案 例 ， 其 表 示 方 法 為
FailCount(Greater(3))。表 2 列出所有的
Test Constraint 篩選條件。 
z Test Ordering：當使用 Test Selection 與
Test Constraint 篩選出測試案例之後，
我們可進一步地安排這些測試案例的
執行順序。例如，先測試最常出現錯誤
的測試案例（Frequently Failed First）
或是先測試最近有更動的測試案例
（Recently Changed First）。設計此功能
的目的在於讓使用者能夠決定不同性
質測試案例的執行優先順序，以便於可
在錯誤發生時決定是否提前終止迴歸
測試的執行，以縮短前端迴歸測試等待
時間並儘早修復程式錯誤。表 3 為所有
Test Ordering 之列表。 
 
接下來我們以一個範例說明 Test 
Selection 與 Test Combination 的組合用
法。假使我們想要選擇出符合下列條件的
圖 2 測試案例選擇策略概念圖 
 
測試案例： 
 
(1) 測試案例執行失敗次數超過 3
次，且 
(2) 執行日期在 2005 年 10 月 12 日之
後，或 
(3) 測試案例的檔案名稱以 Copy 開
頭，或 
(4) 測試案例之執行時間小於 1 秒
（1000 毫秒） 
 
於是我們可如表 3 中的四種選擇條
件，以找出前述(1)、(2)選擇條件的測試案
例交集，以及與(3)、(4)選擇條件的聯集，
即為我們所要執行的測試案例。圖 4 為
Test Selection 與 Test Combination 採用
Composite pattern 所表示的樹狀結構圖，
反應出上述選擇條件的組合關係。 
 
 
圖 1 前端迴歸測試選擇模型 
Project History Test Case Selector
Test Constraint
Test Ordering
Test Selection
<and, or, not>
 6
 
表 3：Test Ordering 方法列表 
排序方法 說明 
Frequently Failed 
First 
最常出錯誤的測試最
優先執行 
Recently Failed 
First 
最近有出現錯誤的測
試先執行 
Recently Changed 
First 
最近有更動過的測試
先執行 
Shortest Running 
Time First 
測試執行時間最短的
測試先執行 
Random Order 隨機執行測試 
Longest Running 
Time First 
測試執行時間最長的
測試先執行 
 
表 4：測試案例組合範例 
Test Selection Test Relation 
FailCount Greater(3) 
RunDate Greater(“2005/10/12”) 
IncludedPattern StringStartsWith(“Copy”)
ExecutionTime Lesser(1000) 
 
 
圖3 Test Selection與Test Combination展開
後的樹狀結構範例 
 
五、使用範例 
 
5.1 選擇測試某函式的所有測試案例 
 
假設程式開發人員撰寫 IntOracleTest
測試案例用以測試 IntOracle 函式。假設該
測試案例執行失敗，以下為程式開發人員
使用 Reg4J 來執行迴歸測試的步驟： 
 
 
ResourceMonitor
ProjectHistoryManager DeltaVisitor TestSelector
TestSelection TestRelation
TestRunListener
HTMLGenerator
TestLauncher
SearchRequestor
JDT Plugin
JUnit Plugin
Workbench Plugin
Resource Plugin
Workspace Plugin
Views Actions
SearchEngineNatureBuilder
TestCaseSelector
SelectionData
TcsResultView
TcsActions
TcsNatureTcsBuilder
Eclipse
TCS
TestOrdering
延伸點
 
圖 4 Reg4J 系統概念圖 
 
1. 程式開發人員依據錯誤訊息，開啟測試
程式碼，發現錯誤發生於測試案例的第
25 行，如圖 5 所示。如果 IntOracle 函
式所接受的參數相等，應該要傳回 
“-1”。 
2. 程式開發人員開啟原始程式碼，將第
22 行的傳回值改為“-1”，如圖 6 所示。 
3. 由於程式開發人員修改了 IntOracle 的
原始碼，因此所有用來測試 IntOracle
函式的測試案例都應該被執行。此時程
式開發人員選擇 Reg4J 的「Run test 
cases testing the selected method」功
能。此時 Reg4J 會找出所有測試
IntOracle 函式的測試案例，並執行之。
執行結果如 8 所示，顯示測試執行成
功。 
 
 
圖 5 測試原始碼中的產生錯誤行數 
 
 8
支援所提出的測試案例選擇方法。藉由將
工具整合進 Eclipse 平台中，使得程式開發
人員的程式撰寫與測試流程更加緊密的結
合在一起，以期提高其生產力與軟體品質。 
未來發展方向包含擴充新的篩選條
件，如依據測試程式與待測程式的行數、
程式異動程度等。此外，本工具與測試驅
動開發方法的互動關係亦是另一個研究的
重點。 
 
 
圖 10 觀看自定篩選測試執行的結果報表 
 
致謝 
 
本 研 究 由 國 科 會 計 劃
NSC95-2221-E-027-047 補助，特此致謝。 
 
參考文獻 
 
[1] S. W. Ambler and R. Jeffries, Agile 
Modeling: Effective Practices for 
Extreme Programming and the Unified 
Process, Wiley, 2002. 
[2] K. Beck, Extreme Programming 
Explained, Addison-Wesley, 1999. 
[3] K. Beck, Test-Driven Development: By 
Example, Addison-Wesley, 2002. 
[4] A. Cockburn, Agile Software 
Development, Addison Wesley, 2002. 
[5] Eclipse.org, http://www.eclipse.org. 
[6] M. Fowler, Refactoring: Improving the 
Design of Existing Code, 
Addison-Wesley, 1999. 
[7] E. Gamma, R. Helm, R. Johnson, and J. 
Vlissides, Design Patterns: Elements of 
Reusable Object-Oriented Software, 
Addison-Wesley, 1995. 
[8] M. J. Harrold, A. Orso, J. A. Jones, M. 
Pennings, T. Li, S. Sinha, D. Liang, S. 
A. Spoon, and A. Gujarathi, 
“Regression Test Selection for Java 
Software,” OOPSLA, ACM, 2001. 
[9] T. Husted and V. Massol, JUnit in 
Action, Manning, 2003 
[10] JUnit, http://www.junit.org/. 
[11] S. McConnell, Rapid Development, 
Microsoft Press, 1996. 
[12] G. Rothermel, M. Harrold, J. Dedhia, 
“Regression Test Selection for C++ 
Software,” Journal of Software Testing, 
Verification, and Reliability, vol. 10, no. 
2, June 2000. 
[13] D. Saff, M. D. Ernst, “Reducing wasted 
development time via continuous 
testing,” Proceedings of the 14th 
International Symposium on Software 
Reliability Engineering, 2003. 
[14] D. Saff, M. D. Ernst, “An Experimental 
Evaluation of Continuous Testing 
During Development,” Proceedings of 
the 2004 International Symposium on 
Software Testing and Analysis, 2004. 
 
計畫成果自評 
 
我們已經成功設計並實作在 Eclipse 中支
援前端回歸測試選擇工具的軟體，達成了
原本計畫書中所規劃的目標。在前端開發
工具中支援回歸測試選擇目前尚屬創新的
作法。我們正在整理本計劃的成果並準備
發表期刊論文。 
 
