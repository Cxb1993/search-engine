 1 
行政院國家科學委員會專題研究計畫期中報告 
 
具易測試及除錯特性之智慧型低功率多核心系統之設計技術研發：從電子系
統層級至矽晶片層級 
子計畫ㄧ: 具自我測試特性之低功率處理器設計與其多核心全系統平台開發
(2/3) 
計畫編號：NSC 100-2220-E-006 -002 – 
執行期限：100年 8月 1日至 101年 7月 31日 
主持人：陳中和 成功大學電機系暨電腦與通信工程研究所教授 
共同主持人：蘇文鈺 成功大學資訊工程學系與資訊工程所教授 
E-mail: chchen@mail.ncku.edu.tw , alvinsu@mail.ncku.edu.tw  
 
一、中文摘要 
本期中報告敘述本計畫第二年之研究進度與目前所獲得之成果。具體成果包括：(1)
建構VM系統平台成果、(2)適用於多核心平台之函式庫與測試程式移植、(3)建構NOC系
統平台以及(4)Co-Simulation Framework整合。 
在VM的部份我們成功讓Hypervisor管理四個Guest OS，並且順利執行。在函式庫的
移植方面我們移植Pthread與Splash2。在NOC的部份我們建構了20- Nodes Mesh System。 
 
關鍵詞：虛擬機器、多核心、函式庫、晶片網路。 
 
二、緣由及目的 
現今單一核心處理器的發展在效能方面遭遇到瓶頸，故目前處理器的相關研究逐漸
由單一核心轉往多核心的領域。多核心處理器即是將多個單一核心的處理器封裝在同一
晶片上，透過特定的資料傳輸介面與通訊協定，讓每一個核心平行地執行運算。本計畫
分為節能設計與多核心系統兩個主要的部份。我們的目標就是由 ESL層級開始著手設計
多核心系統之相關軟硬體，並且逐步將設計修改至 RTL層級。而單一核心處理器在多核
心系統應用之前，會先以架構設計的觀點出發，加入節能設計架構，並且加入多核心系
統必需的相關指令與功能，最後再經由電路層的設計更進一步改善功率消耗。 
其第二年度之目的是以系統高階模擬平台為主，其中包括 NOC 系統架構以及 ESL
平台在 VM 上的成果。在系統開發過程作業系統的加入通常是較後段，所以我們會移植
多核心程式用函式庫與測試程式來驗證我們的平台。最後還會介紹我們的 Co-Simulation 
Framework平台。 
    
三、 年度計畫進度、成果與討論 
本計劃的目的是建置一個多核心處理器系統與其節能架構設計。因應不同設計層次
的需求，我們在第二年的成果主要分為以下四個方向：(1)建構 VM系統平台、(2)適用於
多核心平台之函式庫與測試程式移植、(3)建構 NOC 系統平台以及(4) Co-Simulation 
 3 
 
圖 2 Virtual Machine Hardware System Overview 
 
在處理器核心的部份，因應 VM 的需要，其記憶體管理單元也有重大的修改。其主
要的差別為MMU所轉譯出來的地址由 PA變成 IPA，需要再經過 Hypervisor再做一次的
轉換才會變成真實的記憶體位址。其架構如圖 3所示。如果發生的 abort的處理，也和一
般的系統架構處理流程不同。需要另外將 abort的資訊提交給 Hypervisor處理。 
 
 
圖 3 Memory Address Translation 
 
3.1.4 Hypervisor Traps 
系統在 VM的環境下，原先由作業系統負責管理的事件，都要轉由 Hypervisor來控
制，而這樣的動作我們就稱之為 Trap，如圖 4所示。 
 
 5 
 
圖 4 VM系統執行情形 
 
3.2適用於多核心平台之函式庫與測試程式移植 
為了驗證的多核心系統內中央處理器的正確性，我們必須將具有公信力的平行測試
程式移植至我們的平台上執行，並且由執行結果來判斷多核心系統是否能夠正確運行。
在測試程式的選用部分，我們採用 Splash-2 這套平行測試程式集。Splash-2 的應用程式
包含了 Barnes, Cholesky, FFT, FMM, LU, Ocean, Radiosity, Radix, Raytrace, Water-Nsq, 
Water-Sp等 11支平行程式。由於是程式是採用多線程(Multi-thread)執行，故其同步機制
的正確性將會影響程式執行結果。 
這 11支程式支援使用 Linux OS的 Pthread來完成同步的功能，但是由於多核心平台
開發初期，並沒有 Linux OS支援，因此如何使我們的程式具有支援 pthread-like的功能就
成為整個測試程式移植的重要問題。首先，我們觀察 Splash-2所需要使用的 pthread函示
包含了 Barrier 與 Condition wait，而這兩個程式又建構在 Mutex之上，因此我們首先以
swp指令實現了 mutex lock的功能。 
有了互斥鎖的功能後，在 Linux OS系統中，先執行完進入 barrier的線程(Thread)，
將會被 OS 安排進入休眠狀態，等待所有其他線程也進入 barrier 後才被喚醒繼續往下執
行。因此原本 Pthead的做法是讓最後一個進入 barrier的線程直接喚醒其他進入休眠狀態
的線程後，直接往下繼續執行。但是我們的平台並沒有作業系統的支援，因此我們讓線
程進入 barrier後就以 busy waiting的型態進入等待，而最後一個進入 barrier的線程再解
除 busy waiting後完成一次 barrier的同步作業。 
而另外一個Condition wait的目標是由某線程通知其他線程已做完某件特定的事情來
達到同步的功能。這部份我們就設定一個全域變數已代表特定事件的完成與否，再由各
線程針對此變數做修改，完成 condition wait的功能。 
除了同步的機制之外，Pthread可以透過 pthread_create來增加執行的線程，這部分也
是需要作業系統支援的，所以同樣的，在我們的平台上，必須新增這個功能才能正常執
 7 
8
12 13
5
10
4
0
9
1
14
6
2
MC0
MC1 MC2
MC3
MI1 MI2 MI3
MI4
MI5
MI6
MI7
3
7
11
15
19181716
MI8
MI9 MI10 MI11
MI12 MI13 MI14 MI15
 
圖 5 Mesh-connected NOC 
 
上述的問題在使用通用處理器核心建構的系統平台，是個必需面對的問題。一般以
Vector Processor為主的多核心系統平台，都是用以執行平行度非常高的程式，依靠軟體
解決資料一致性的問題。而在我們的平台上目前擬定兩種解決方法，第一種為混合式
interconnect架構，如圖 6所示，讓 2到 4顆 CPU透過 bus共享同一個 L1 cache，而這些
L1 cache再透過 NoC存取 L2 cache，藉此分享這一段同時執行的指令區間，以減少到 L2 
cache的 traffic，第二為增加 L2 cache的 bank數，以達到分散 traffic的效果。 
 
Cache
CPU
Memory 
Controller
 
圖 6 混合式架構設計 
 
3.3.2 記憶體架構 
記憶體的階層如圖 7 所示。記憶體的架構為分散式共享記憶體(Distributed shared 
memory)，將Memory Controller中共享的 L2 cache分為 4個部份。 
為了相容於原本處理器的記憶體存取(Memory access)模式，因此在 NI與 Bus之間加
上了MI，去取代原有的第一層快取(L1 cache)。MI從 Bus收到存取的指令以後，會判斷
 9 
traffic，所以一般都是採用這種 protocol去達到 cache coherency。然而在 NoC中，訊息是
以封包的方式傳輸，假設 NoC上有 n個 node，則每次為 cache coherence都需要廣播給其
他 n-1 個 node，並且每個 node 都要回傳資訊給廣播者，所以需要 2n-2 個封包，即使使
用區域網路中 routing交換的 flooding機制，也是需要超過 n個封包，overhead相當大。
因此 cache coherency的部分我們使用MESI Directory-based cache coherence protocol，它
的概念類似於 snoop-based MESI protocol，兩者的最大不同是前者另外將 cache line 的
cache coherence state儲存在L2 cache所在的Memory Controller，因此不用進行 snoop-based 
coherence protocol所必須的 broadcast，只要到 directory去查詢即可，這樣可以大大的減
少 cache coherence traffic帶來的 overhead，增加 NoC的 scalability。 
 
3.3.4 Switch 
負責接受由 NI或是其他 Switch來的封包，根據 destination address將封包往下一個
switch傳送。Switch主要有以下四個部分： 
1.Routing logic：在 fully-connected network中，送到比自己大 1的要用最右邊的 port，
比自己大 2的要用右 2，依此類推，如果比自己小的則是再加上 5以後再去比較。因此可
以推導出 destination port number與 source port number的差值 modulo 5就是要送出的 port 
number。 
2.Input demultiplexer：根據 routing logic的結果決定 output port。 
3. Output arbiter：為了避免 starvation，我們使用了 Round Robin的方式，每個 port
輪流擁有這個 path的使用權。 
4. Output multiplexer：根據 Output arbiter仲裁的結果決定哪一個 port輸入的封包要
被送到下一個 switch。 
 
3.3.5 NI 
負責MI與 network之間的訊息格式的轉換，並且設計 buffer讓兩者可以非同步的運
作。NI主要有以下四個部分： 
1.DataIn：將從 MI 來的 data 儲存到 Tx buffer，這樣可以解決傳送到 network 與從
MI端接收的非同步問題 
2.Tx：把 Tx buffer的資料封裝成封包以後傳送到 network 
3.Rx：把從 network接收的封包解封裝以後儲存到 Rx buffer 
4.DataOut：和 DataIn類似，不過是把 Rx buffer的資料傳送到MI 
 
3.4 Co-Simulation Framework 
本整合型計畫在 ESL部份的成果包括各子計畫在於 ESL層的設計與 Tool的開發。
因此本子計畫也肩負整合 ESL開發平台的任務。因為設計當中有類比與數位電路的不同，
所以在 ESL層級也使用了 SystemC與 System-AMS開發。而且我所提供的平台就是為了
處理讓類比與數位的溝通與模擬順暢。其架構如圖 8所示。 
因為類比模擬的速度較慢，因此我們的平台也試著對 System-AMS 進行平行化與加
 11 
 Hsu-Yao Huang, Chi-Yuan Huang, and Chung-Ho Chen, "Tile-Based GPU Optimizations 
through ESL Full System Simulation, " IEEE International Symposium on Circuits and 
Systems (ISCAS), May 20-23, 2012, Seoul, Korea. 
 Chen-Chieh Wang, Sheng-Hsin Lo, Yao-Ning Liu, and Chung-Ho Chen, "NetVP: A 
System-Level NETwork Virtual Platform for Network Accelerator Development, " IEEE 
International Symposium on Circuits and Systems (ISCAS), May 20-23, 2012, Seoul, 
Korea. 
 Yi-Ying Tsai and Chung-Ho Chen, Energy-efficient Trace Reuse Cache for 
Embedded Processor, IEEE Transactions on Very Large Scale Integration 
Systems,  Vol. 19, No. 9, pp. 1681-1694, September 2011. (SCI, EI). 
2 
 
一、 參加會議經過 
  本次會議為2012 IEEE International Symposium on Circuits and Systems 
(ISCAS)，於5月20日至5月23日在韓國首爾COEX會議中心舉行。此系列會議每年舉辦
一次，包含了電子、電機、IC設計、電力等領域。每年皆吸引大批國內外專家學者
前來參與。由於是我第一次到韓國，為了提早熟悉會場附近的交通路線與地理位置，
所以提前一天(5/19)出發，並在當天順利確定交通與會場位置。 
  會議第一天(5/20)，我於八點抵達會場，並前往報到。註冊完畢後，前往參與當天
的 tutorial，中午就近在 COEX會議中心用餐，順便了解報告場地所在。當天晚上在
COEX會議中心舉辦了 welcome reception，提供了國內外專家學者一個交流的時間。 
  會議第二天(5/21)，由於我在當天下午一點四十分報告，所以提早至會場準備，下
午一點四十分會議準時開始。這次的 section主題主要是在探討對 VLSI設計時所需
要的開發環境，如何能夠提供使用者一個方便、全面且容易除錯與驗證的開發環境。
在報告期間，底下的聽眾專心聆聽，並提出問題，而我也一一的回答他人的疑問。
晚上參加了 Ph.D./GoLD_WiCAS所舉辦的 banquet。 
  會議第三天(5/22)參加早上的 keynote speech，由 Chen-ming Hu教授主講，主題
為”FinFET and the New Scaling Path to Small Size and Low Power”，下午參加了
cryptographic engine design的 section，晚上參加由大會主辦的 banquet，席間邀請了
韓國知名團體 “4 minute”演唱與韓國傳統舞蹈表演。 
  會議第四天(5/23)參加早上由 Roland Thewes教授所主講的”CMOS Devices for 
Smart Biomedical Purpose-The Next Big Thing”，下午參加 VLSI相關的 section，晚上
4 
 
  本次會議讓我了解到國際學術交流與國際視野開拓的重要性，也見識到了韓國與
台灣的不同。在會場中有 Samsung、LG等韓國知名企業所設立的攤位，其中展示了
display與手機相關的最新技術與產品。韓國在 IT產業中的整體實力突飛猛進，投入
於前瞻性技術研究的資金與人力更是驚人。台灣應更注重於前瞻技術研發，訂定健
全且長遠的研究計畫，讓未來台灣的科技產業能在世界上佔有一席之地。 
 
 
 
 
 
四、 攜回資料名稱及內容 
1. 會議的詳細議程 
2. 大會論文光碟。 
3. 紀念品：T-shirt與手提包。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
五、 與會相片 
6 
 
 
報告結束後與 Section Chair合照 
 
Farewell Party結束後於 National Museum of Korea合照 
 
 
100年度專題研究計畫研究成果彙整表 
計畫主持人：陳中和 計畫編號：100-2220-E-006-002- 
計畫名稱：具易測試及除錯特性之智慧型低功率多核心系統之設計技術研發：從電子系統層級至矽晶
片層級--子計畫一：具自我測試特性之低功率處理器設計與其多核心全系統平台開發(2/3) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 1 1 100%  
研究報告/技術報告 0 0 100%  
研討會論文 2 2 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 1 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 8 6 100%  
博士生 2 3 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
