 Title:   Parallel Scheduling for Buffer-Requirement Estimates and Processor 
Load Balancing    
 
   Query plans produced by conventional query optimizers may yield poor performance 
due to inaccurate assumptions. This work describes methods to extend a conventional query 
optimizer to yield multiple plans per query, and to schedule the resulting multiple plans. This 
research focuses on one run-time resources: the buffer pool and processors. A set of 
scheduling methods at run-time are used to choose one among the plans produced at 
optimize-time according to buffer availability , disk and processor load balancing. In 
addition, a way paralleling an intra query plan and across query plans is added at run-time to 
enhance system throughput. 
 
 I 
Key words: Query Plans, Optimizer, Scheduling, Buffer, Processor 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
1. Introduction 
 
Traditional query optimisers [Ramakrishnan, 2005] assume certain ranges of resource 
availabilities when producing the best query plan (or simply, plan) for a given query. In reality, 
these assumptions are often inaccurate at run-time. This work focuses on multiple plans per 
query and one run-time resource: the buffer pool and processor. In addition, new scheduling 
policies are proposed to enhance system throughput. This is an attempt to demonstrate how to 
generate multiple plans at optimize-time, and schedules the selected plan among these 
multiple plans at run-time according to actual buffer availability and processors.    
In our proposed environment, multiple plans per query are kept at optimize-time and sent 
to the ready queue in the form of packages of plans at run-time. The scheduler admits one of 
the plans in a package according to buffer availability.  However, conventional query 
optimisers often output plans that are poor matches with resources available at run-time.   
 
2. Related Work 
 
Inaccurate Assumptions at Optimise-Time To resolve the cost estimates inaccurate at 
optimize-time, Bouganim et al. (2000) dynamically scheduled queries to handle irregular data 
delivery rate. To deal with the same issue unjustified decision at optimize-time, Ng et al. 
(1999) described a novel approach to re-optimize suboptimal query plan configurations for 
dynamic query optimiser considering reconfiguration cost to choose the best query plan 
configuration. In addition, Stocker et al. (2001) and Davis et al. (2001) used the ideas of 
semi-join operations and rewrite tree to yield query plans for more option at optimize-time. 
 
Dealing with Varying Availability of Resources In order to efficiently solve multiple-query 
environment, Davison and Graefe (1995) described the difficult problems of managing 
resources comprised of queries with widely varying resource requirements. They proposed a 
broker framework for dynamic resource allocation based on concepts from microeconomics 
ideas, and described a slowdown admission policy to reduce response time. Simelyanskiy et 
al. (2003) proposed a technique to overcome the problem of resource utilization in processors. 
The technique is to schedule operations on the same processor for the operations assigned at 
compile-time. In addition, considering tertiary storage devices may be another idea [Moon & 
Kang, 2001] for database management systems to enhance the system performance when 
using massive amount of large query execution plans. However, the devices usually cause 
long latency in I/O.  
 
Scheduling Query Plans Babcock et al. (2003) proposed the chain scheduling to minimizing 
buffer requirements for single-stream queries and the queries with sliding-window joins. In 
the paper [Sieg, Pinkney, Lamoureaux, 1995], Sieg et al presented research on the 
collaboration between database system schedulers and buffer managers. In this paper, a 
package consists of a single plan with multiple hot-points.  During the process of scheduling 
packages, the scheduler selects the plan contained in the first package, which is in the front of 
the ready queue. When packages arrive in the system, they request data page and CPU time 
for scheduling queries.  Eventually, the packages are completed and leave the system. 
Sutherland et al. (2005) proposed an algorithm minimizing buffer requirements to enhance 
system performance. In addition, Gupa et al. (2001) generalized an ordering algorithm to 
schedule query plans in an appropriate order for complex queries. 
 
3. Pruning Method at Optimise-Time 
 
This section describes how this work extends a conventional optimiser [Wang, 2005; 
Wang, 2006] to determine which appropriate plans for a single query. Our pruning method 
eliminates plans that are dominated by other plans illustra. The component of the optimiser 
that eliminates dominated plans is called the OSL pruner. Unlike conventional optimisers, 
ours frequently outputs more than one non-pruned plan.  
function of the OSL compiler is to translate the optimiser specification into C code, which is 
linked with the rule engine. Thus, we can compile the C code and the rule engine into an 
executable optimiser.  
     Our optimiser prunes out dominated plans according to pruning methods described in 
the OSL pruner. The detailed code of pruning method is defined in the C code scope within 
the corresponding cost functions to yield appropriate plans. As illustrated in Figure 1, the 
pruner has a set of scan operators (e.g. btree_scan), each of which has a cost function. Figure 
1 is part of the OSL pruner for IMP_SCANS and IMP_JOINS respectively:  The two 
modules implement two set of scan and join methods for queries. Module IMP_SCANS 
defined scan operators such as sequential scan (seq_scan) and btree scan (btree_scan) shown 
in line 4 and 5. Module IMP_JOINS defined join operators such as sort, nested-loop, and 
merge join described in line 12, 13, and 14. Line 3 and 11 describe what type of method the 
optimiser uses. The term, NC, following Multiple_Plans is a policy name.    
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
               Fig. 2 The OSL Pruner 
      
 
5. Scheduling at Run-time 
 
This work aims at exploiting hot-point within a single query, common sub-expressions 
across queries. This section explores scheduling policies that adapt to different resource 
bottleneck. In addition, an expression prediction algorithm is presented to predict disk 
utilization for improving system performance. As mentioned in Section 2, Sieg et al. (1995) 
characterized policy quadruples to explore a variety of scheduling strategies in database 
systems. In this section, we present scheduling policies with five coordinates for multiple-plan 
packages generated by our optimiser. In our simulator, the scheduler uses scheduling policies 
to choose the plan in an admitted package according to the current resource availabilities.  
   In our work, packages, each containing a set of plans, await scheduling in the ready queue. 
The load controllerâ€™s task is to admit packages into the set being processed.  Then, the 
scheduler accesses a set of scheduling policies when the package is about to be scheduled, and 
chooses the best plan depending on resource availabilities. The set of scheduling policies with 
five coordinates are package ordering policy, package admission policy, step ordering policy, 
step admission policy, and plan selection policy. Below just list a step policy named, BPF, to 
explain in details: 
 
 
1   module  IMP_SCANS 
2                 pruner   
3                 policy  Multiple_Plans   NC   
4                 cost     (seq_scan)        { /* C code */ } 
5                 cost     (btree_scan)     { /* C code */ } 
6                 end      pruner 
7   end        IMP_SCANS 
8 
9   module  IMP_JOINS  
10               pruner   
11               policy  Multiple_Plans   NC 
12               cost     (sort)              {/* C code */ }  
13               cost     (nl_join)         {/* C code */ }  
14               cost     (merge_join)  {/* C code */ }  
15               end       pruner 
16  end       IMP_JOINS 
 
 
   
Policy  Pruning Policy Scheduling policy tuple 
S1 NC use BPF  
S2 NC use BPF without buffer cost 
S3 NC use BPF without processor cost 
S4 NC use BPF without buffer and processor cost  
 
 
 
 
                        Fig. 3 Results for 10 processors 
 
In the experiment, we find that the load controller can obtain a good performance when 
using BPF as a package-ordering policy and step-ordering policy as compared to other 
package policies. Hence, this work uses BPF in the first two policy tuples to analyze the 
system performance when using other scheduling policies for remaining policy tuples. The 
experimental results as shown in Figure 3 the four best scheduling policies when using the 
NC pruning policies.   
 
7.  Discussion   
 
Like Sieg (1995) and Gupta (2001), this work describes our method in two phases: 
optimize-time and run-time.  However, we designed a new optimiser to produce appropriate 
packages of plans via the OSL pruner, and schedule them based on sub-expression utilization 
for performance issues.  The purpose of generating multiple plans for a given query is to find 
a good plan that is compatible with available buffers for distinct query loads at run-time.    
The experimental results verified that a single plan is generated by a query optimiser is not 
the best one when run-time resources are considered.  A best one has to be determined at 
run-time. That is why the optimiser produces multiple plan for a given query at optimize time. 
We believe that this study is a step forward towards database system research that critically 
improves run-time performance when considering more resource availabilities for multiple 
plans for a given SQL query. 
 
 
 
 
[References] 
 
Babcock, B., Babu, S., Datar, M., & Motwani, R. (2003)  Chain : Operator Scheduling for 
Memory Minimization in Data Stream Systems. The SIGMOD Conference.  pp. 253-264. 
Bouganim, L., Fabret, F., Mohan, C., Mohan, c., & Valduriez, p. (2000) Dynamic query 
