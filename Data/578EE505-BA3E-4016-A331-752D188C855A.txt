摘要 
 
對等電腦網路是一種利用分散在網路上的許多參與電腦的計算能力、頻寬或者是其他資
源所組成的資源共享網路。對等電腦網路可分成結構式及非結構式兩種類型，但不論是
在結構式或者是非結構式對等電腦網路中搜尋資源時都必須透過繞送的方式逐漸搜
尋，才能判斷此資源是否存在於網路中。為了提昇搜尋的效率，結構式對等電腦網路可
採用平衡樹狀索引機制以增進效率。樹狀對等電腦網路需要負載平衡的機制，然而目前
的負載平衡機制卻無法有效處理極端不平衡的高負載情形。本計畫為樹狀對等電腦網路
提出更有效的負載平衡策略，包括加區域平衡及虛擬群組等，並以模擬實驗的方式驗證
成果。 
 
關鍵詞：對等電腦網路、負載平衡、樹狀索引、搜尋 
 
 
 
 
Abstract 
 
A peer-to-peer computer network (or P2P network) is a computer network that shares the 
computing power, bandwidth, and other resources of the computers participating in the 
network. There are two types of P2P networks: Structured and unstructured P2P networks. 
In either type, it is necessary to route messages to many different sites when searching a 
specific resource in the P2P network. In order to increase the search efficiency, structured 
P2P networks can use balanced tree index to improve the performance. Tree structured P2P 
networks need load balancing mechanisms but existing balancing strategies cannot 
effectively handle skewed heavy load situations. This project developed new load balancing 
strategies for tree structured P2P networks, including local balancing and virtual grouping. 
We incorporated the proposed load balancing strategies into some existing P2P computer 
networks and evaluated their performances in simulation experiments. 
 
Keywords: P2P network, load balancing, tree index, search 
 2
而近幾年才較多學術研究採用相關架構，主要原因在於一般使用的樹狀結構在較接近
根部節點訊息繞送的數量會比起末端的節點多上許多，這樣的特性並不適合使用在對
等電腦網路上。而 BATON 則提出一種可以避免此問題的樹狀結構。 
BATON是一種基於二元平衡樹的完全分散式對等電腦網路，網路中每個節點代
表一台電腦，而分享的資源分別由各個參與電腦索引其中一部份，每個節點所負責的
索引都為一個連續範圍值如 11-20, 21-30，整個網路用中序(inorder)的方式分配索引。
當參與電腦需要從對等網路中利用索引尋找資料時，就可以使用BATON搜尋索引的演
算法，找到資料是由哪個節點提供索引。每個節點都儲存了父節點、左、右子節點、
左、右鄰接節點（adjacent node），與在同階層節點中與本身距離 2i的鄰居節點。如圖 11
所示，節點 12 儲存了左邊的同階層節點 11（距離 20）、節點 10（距離 21）、節點 8（距
離 22）的路由資訊。鄰接節點(adjacent node)是依照中序(inorder)訪問節點的順序，在
本身節點前一個被訪問到的節點為左鄰接節點，在本身節點後一個被訪問到的為右鄰
接節點。 
 
圖 1：BATON 對等網路示意圖 
 
搜尋資料索引時 BATON 網路利用同階層的鄰居節點與本身距離 2i 的特性來轉送
訊息，使得即使傳送跟自己相距遙遠的節點依然可以有效率的傳遞。比起 DHT 技術，
採用樹狀結構的 BATON 網路優勢在於因為鍵值沒有透過雜湊（hashing）打亂順序，
故可以使用範圍搜尋。也因為沒有使用雜湊函數，實作範圍搜尋演算法與一般精確搜
尋演算法幾乎相同，僅需要修改搜尋的數值改為範圍值即可達成。 
在對等電腦網路中，我們希望每個節點的負載能夠平衡。而樹狀結構中每個節點
的負載程度會隨著其資料的涵蓋範圍或者資料的熱門程度改變。若一個節點的涵蓋範
圍過大時其負載就會加大，當節點所儲存的資料變得熱門時亦然。而這種情況就需要
負載平衡的機制來讓每個節點之間的負載維持平衡。負載平衡機制並不僅限於對等網
路，各種領域都有負載平衡機制的應用，如平行運算、分散式運算亦或對等網路，都
 4
節點，用來分散重負載節點的負擔。如圖 2 所示，當節點i負載升高後，將搜尋系統中
輕負載的葉節點。當找到節點j後，節點j將離開原本的位置並且加入節點i的子節點。 
使用此種方法由於強制輕負載節點離開原本的位置，所以有可能造成樹狀網路結
構上
3. 負載平衡機制 
之所以設計區域負載平衡方法的原因，在於 BATON 原有方法沒有辦法順利的在
高負
兩個負載平衡方法都
只針
選擇參與節點 
進行之前要先選擇節點來參與負載平衡，而在參與節點的選擇上，由
於必
的不平衡，此時必須啟動網路重構機制，讓樹狀網路恢復原本結構平衡的狀態。
若高負載造成需要連續執行多次負載平衡機制時，此方法需要花費極多的成本在重新
讓網路結構平衡。 
載時有效的進行負載平衡。而我們提出的方法『區域負載平衡』主要的概念有二：
(1)平行的傳遞訊息，減少依序(sequential)的訊息傳送方式。(2)整合目標相同的訊息，
避免重複傳送訊息給相同目標。我們的方法解決了在高負載時原有負載平衡機制效能
不彰的情況。區域負載平衡的好處在於不需要修改任何演算法，完全與原本的架構相
容。而我們並不需要捨棄 BATON 原有的負載平衡機制，在非高負載的狀況下，原有
方法依然可以有效的平衡負載。以下介紹我們所提出的方法。 
區域平衡在執行時不同於 BATON 網路原本的方法，原本的
對單一節點，當節點負擔高負載時，僅針對單一節點平衡的方法需要多次才能分
攤重負載，造成許多冗餘的訊息在網路中傳遞。區域負載平衡機制是針對此問題設計
的負載平衡機制，可單次讓足夠數量的節點參與負載平衡機制，並且重新分配負載。
區域負載平衡機制分成二個階段：選擇參與節點以及傳送更新訊息至目標節點。 
區域平衡在
須連續資料索引範圍的節點才可正確的重新分配資料索引範圍，所以必須選擇連
續的鄰接 (adjacent) 節點，下圖為 BATON 網路的示意圖，此圖中粗線代表著每個節
 
圖 3：鄰接節點示意圖 
 6
 圖 5： 通知順序 
 
選擇參與節點的演算法如下： 
 
01: def invite(notify_node, interval, end_node=False): 
02:     children = elf.get_children()  s
03:     for in children: child 
04:         invite(child, 0) 
05:  
06:     if interval >= 4: 
07:         invite(self['left_table'][0], 0) 
08:         pow = th.log(value=interval, base=2) ma
09:         for i in (from 0 to pow): 
10:             next_interval = (2i+1 - 2i) 
11:             invite(self['right_table'][i], next_interval) 
12:  
13:     if end_node == True: 
14:         invite(self['left_table'][0]) 
 
在選擇參與節點方法中有兩個細節需要注意，其一是有子節點的狀況，另外則是
路由表中節點不存在的狀況。當有子節點時，必須將訊息傳遞給子節點，當路由表中
節點不存在時，則必須傳遞訊息到其節點之父節點。 
用平行的方式選擇節點其中一個困難是要判斷訊息什麼時候該停止傳送。不同於
依序的傳送資訊時可以由最後一個節點判斷是否要停止選擇節點，因為平行傳送資訊
時，會同時有不同的節點傳送資訊，所以需要有節點負責蒐集資訊，並且判斷是否該
結束，而 BATON 中決定參與節點的範圍又必須為連續的節點，所以每單一次執行都
需要指定範圍，其演算法如下。 
 
1: def trigger_region_balance(): 
2:     round = 2 
3:     while Not Balance: 
4:         for i in from 0 to round):   (
5:             invite(start_node['right_table'][i], 2i+1 - 2i ) 
6:  
7:         invite(start_node['right_table'][round], 0, end_node=True) 
8:         start_node = start_node['right_table'][round]     
9:         round += 1 
 8
01: def precompute_msg(node_list): 
02:     for i in (from 1 to node_list maximum level) 
03:         nodes_set = get_same_level(node_list, i) 
04:         nodes_set sort by 'LowerBound' 
05:  
06:          []b =  
07:         for in 0 to len(nodes_set): j 
08:             if j == 0: 
09:                 b.append(nodes_set[j]) 
10:                 continue 
11:             else if nodes_set[j-1]['right_table'][0] == nodes_set[j]: 
12:                 b.append(nodes_set[j]) 
13:             else: 
14:                 buckets.append(b) 
15:                 b = new list and append nodes_set[j] 
16:         buckets.append(b) 
17:     return buckets 
 
如下圖所示，precompute_msg 演算法的目的為把同階層連續的節點組成一個
bucket。由於節點 4 沒有右子節點，造成第四階層的節點不連續，則將同階層分為多
個 bucket 存放。在此例中節點 7, 8, 9 存放在一個 bucket，節點 11, 12, 13, 14 存放在另
一個。 
 
圖 7：precompute_msg 演算法範例 
 
將參與節點依照階層以及是否為鄰居節點的條件分群後，接下來必須依照參與節
點分群決定整合後的訊息要傳給哪個目標節點，以及此目標節點需要傳送幾次給鄰居
節點。在此階段必須考慮的問題是：雖然參與節點連續時其每個參與節點路由表第 i
個必然連續，但是如果其中一個參與節點路由表中的第 i 的節點不存在時，則會造成
目標節點的不連續。而以下的演算法考慮此問題，決定目標節點以及必須傳送幾次給
鄰居節點。首先必須取出上面演算法中每個節點集的第一個節點，並且將此節點路由
表中的節點定為目標節點，這邊我們稱這些節點為種子節點，並且開始尋找此目標節
點右邊第 j 個節點是否存在，若存在則將訊息傳遞的範圍值加一，若此節點不存在則
結束計算此種子節點的訊息傳遞範圍值。並且繼續向下搜尋，如果接下來的節點存在，
就新增一個種子節點，並且重新計算其範圍值。當找出所有種子節點以後，就可將更
新訊息傳遞給這些種子節點，並由他們傳遞給鄰居節點。 
 10
介紹過我們提出的方法後，以下利用實際的例子來觀察我們所提出的方法以及
BATON 原有方法的差異。每個節點中都有許多產生負載的原因，如索引產生的負載
及幫忙轉送節點的負載。而每個資料索引都提供了節點一部份的索引負載，加總起來
後就是每個節點因為索引機制所產生的負載。而當資料索引分配到其他節點時，此負
載也會轉移到其他節點上。以下範例為了將議題聚焦於每個節點因為索引產生的總負
擔，故下例僅標示每個節點的總負擔，而不完整標示每個索引的個別負擔。舉例來說，
節點的資料索引範圍為 1-3，索引 1 提供 0.2 的負載，索引 2 提供 0.3 的負載，索引 3
提供 0.5 的負載。我們在標示時僅標示索引的總負載 1.0 (0.2+0.3+0.5)而不分開標示，
分配索引範圍時也僅分配負載以簡化細節。實際的情況下必須考慮每個索引值所承擔
的負載進行分配負載。 
如下圖所示，每個節點上面代表節點編號，下面代表節點負載，此例中重負載的
門檻值是 1.2，超過就會開始執行負載平衡機制，圓圈中的數字代表執行的步驟。此例
中區域平衡機制利用平行的方式選擇參與節點，可減少執行時間。當重新分配負載後，
節點 13 將會負責傳送更新訊息給需要更新路由表的節點。而我們的方法更新訊息時採
用平行的方式傳送訊息，並且在一整個區域執行負載平衡完畢後再傳送更新訊息，避
免傳遞重複的更新訊息。 
 
圖 9：區域平恆方法範例 
 
而下圖為 BATON 原有負載平衡機制在相同的狀況中的處理方式。首先節點 1 與
節點 9 重新分配負載，此時必須更新節點 1 與節點 9 路由表中節點的路由資訊，此例
中必須更新節點 2, 7, 8, 10, 11, 13 的路由資訊。分配負載時則先將節點 1 的負載分配至
門檻值 1.2 以下，節點 9 則分配 2.2 的負載。接下來節點 9 在與節點 4 重新分配負載，
同樣的又要再次更新節點 3, 5, 6, 7, 8, 10, 11, 13 的路由資訊，以下過程依此類推。
BATON 原有負載平衡方法由於逐次的重新分配範圍，所以也必須不斷的更新路由資
訊，但有許多更新訊息傳送到重複的節點，造成訊息量的增加。 
 12
0200
400
600
800
1000
1200
1400
1600
1800
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
重負載節點初始負載
訊
息
量 BATON 原本負載平衡機制
區域負載平衡
 
圖 11：平均訊息量實驗 
 
上圖中橫軸為高負載節點的初始負載，縱軸為系統訊息數量平均。由於我們的方
法許多更新路由資訊的訊息都被整合在一起傳送，而因為一次負載平衡就可以將重負
載的情形解決所以訊息量比 BATON 原本方法較少。區域性平衡會有階梯狀的情況，
是因為參與負載平衡的節點會以 2 的次方的數量成長。 
0
50
100
150
200
250
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
重負載節點初始負載
單
位
時
間 BATON 原本負載平衡機制
區域負載平衡
 
圖 12：花費時間實驗 
 
花費時間實驗與訊息量實驗相同的實驗環境，但改為測量各種方法所花費的時
間。在本次實驗中，我們假設每次傳送訊息都需要一個單位時間，當多個訊息同時傳
送時則僅計算一次單位時間。橫軸為高負載節點的初始負載，縱軸為執行一次負載平
衡所花費的時間。由於我們提出的方法將許多訊息整合在一起，相同的節點要更新路
由訊息時，原本的方法會因為循序性的負載平衡方式，一次次的通知此節點，而我們
 14
參考文獻 
1. J. Aspnes and G. Shah, “Skip Graphs,” Proceedings of the 14th Annual ACM-SIAM 
Symposium on Discrete Algorithms (SODA 2003), 2003. 
2. H.V. Jagadish, B.C. Ooi, and Q.H. Vu, “BATON: A Balanced Tree Structure for 
Peer-to-Peer Networks,” Proceedings of the 31st International Conference on Very 
Large Data Bases (VLDB ’05), 2005. 
3. H.V. Jagadish, B.C. Ooi, Q.H. Vu, R. Zhang, and A. Zhou, “VBI-Tree: A Peer-to-Peer 
Framework for Supporting Multi-Dimensional Indexing Schemes,” Proceedings of the 
22nd International Conference on Data Engineering (ICDE ‘06), 2006. 
4. S. Ratnasamy, P. Francis, M. Handley, R. Karp, and S. Shenker, “A Scalable 
Content-Addressable Network,” Proceedings of the 2001 Conference on Applications, 
Technologies, Architectures, and Protocols for Computer Communications (ACM 
SIGCOMM ’01), 2001.  
5. I. Stoica, R. Morris, D. Karger, M.F. Kaashoek, and H. Balakrishnan, “Chord: A 
Scalable Peer-to-Peer Lookup Service for Internet Applications,” Proceedings of the 
2001 Conference on Applications, Technologies, Architectures, and Protocols for 
Computer Communications (ACM SIGCOMM '01), 2001. 
6. M. H. Willebeek-LeMair and A. P. Reeves, “Strategies for Dynamic Load Balancing on 
Highly Parallel Computers,” IEEE Transactions on Parallel and Distributed Systems, 
1993. 
 
 16
出席國際學術會議心得報告 
                                                             
計畫編號 NSC 97-2221-E-415-006- 
計畫名稱 樹狀對等電腦網路的負載平衡策略 
出國人員姓名 
服務機關及職稱 陳耀輝 國立嘉義大學資訊工程系副教授 
會議時間地點 2-4 April, 2009, Suzhou, China 
會議名稱 The Joint International Conferences on Asia-Pacific Web Conference (APWeb) and Web-Age Information Management (WAIM) 
發表論文題目 Parallel Load Balancing Strategies for Tree-Structured Peer-to-Peer Networks
 
一、參加會議經過 
 
本次 APWeb-WAIM 2009會議於 4月 2日至 4月 4日在中國蘇州市的蘇州會議中心舉行。
本人於 3月 31日由桃園機場搭乘澳門航空 NX627班機抵達澳門，再換乘澳門航空 NX108班
機於當天晚上 9 點多抵達上海浦東機場，出海關後乘坐磁浮列車及地鐵進入上海市區並住宿
一晚。第二天（4月 1日）早上於旅館周邊徒步遊覽，並於 11點多退房後搭地鐵至上海火車
站轉乘動車組到蘇州市。抵達蘇州火車站後為了預購回程車票，來回跑了三個不同的地方後
才發現不同時段的預購票要在不同的地方購買，但因為後來找到更方便的直達機場巴士，回
程並未乘坐動車組。幾經周章，等最後坐計程車抵達蘇州會議中心旅館並辦好住宿手續時，
也已經是傍晚時分了。 
 
4月 2日進行Workshop Sessions，包括 RTBI、WCMT、DBIR-ENQOIR、PAIS等；晚上
為 Conference Reception，席間與北京大學楊冬青老師及四川大學段磊老師等學者進行交流。
我們的論文被安排在 4 月 3 日下午 15:15 - 17:00 的 Session 3 發表。Session 主持人是來自
Swinburne University of Technology的 Chengfei Liu教授。我們的論文是該 Session第四篇報告
的論文，而前一篇報告的論文是由來自國立成功大學的博士生黃淵科先生報告。由於這個
Session被安排在主會場報告，場地很大再加上講台較高，剛站上講台時令人有些不太習慣。
但等開始報告後就專注於論文內容並能順利完成報告，然後聽眾及主持人有提出一些問題討
論。除了報告論文外，今天本人也聆聽了三場精彩的 Keynote Talks: Distributed XML Processing 
by Prof. Tamer Ozsu、Towards Multi-modal Extraction and Summarization of Conversations by 
Prof. Raymond Ng、以及 Semantic Computing by Prof. Phillip C.-Y. Sheu。晚上參加 Conference 
Banquet，席間與東北大學王國仁老師及成大黃淵科先生等學者愉快交流。本人於 4月 4日參
加 Session 5聆聽國立海洋大學張雅惠教授發表之論文，並於會後與張教授進行短暫交流。 
 
本人於 4月 5日早上搭乘巴士由蘇州經昆山及虹橋機場抵達上海浦東機場。下午乘坐澳
門航空 NX115班機抵達澳門，再換乘澳門航空 NX620班機於當天晚上 8點多抵達桃園機場，
等出關後至停車場取車，再開車回到嘉義家中也已經接近午夜時分。 
Q. Li et al. (Eds.): APWeb/WAIM 2009, LNCS 5446, pp. 468–479, 2009. 
© Springer-Verlag Berlin Heidelberg 2009 
Parallel Load Balancing Strategies  
for Tree-Structured Peer-to-Peer Networks 
Yaw-Huei Chen and Yu-Ren Ju 
Department of Computer Science and Information Engineering 
National Chiayi University, Chiayi, Taiwan, ROC 
ychen@mail.ncyu.edu.tw, yurenju@gmail.com  
Abstract. A logical balanced tree structure can be overlaid on a peer-to-peer 
(P2P) network to support both exact match and range queries. Load balancing 
mechanisms are needed for handling skew problems in a tree-structured 
network. Traditional load balancing operations, such as sequentially probing for 
helper nodes and readjusting the tree structure after moving a node, may incur 
high costs. This research develops two new parallel load balancing strategies: 
vicinity load balancing and virtual group load balancing. The former adopts 
parallel transmission techniques to distribute the load of an overloaded node 
over a set of neighboring nodes, and the latter redirects the load of an over-
loaded node to a lightly loaded region. Simulation results indicate that these 
strategies are efficient not only in time and message, but also in the work load 
of participant nodes. 
Keywords: Peer-to-peer network, load balancing, balanced tree, parallel  
transmission. 
1   Introduction 
A peer-to-peer (P2P) network is an internet communication model which allows a 
group of users to share the computing power, bandwidth, and other resources of 
participant computers. These autonomous computers form a self-organizing overlay 
network on the internet so that they can share resources without centralized control. 
There are two classes of P2P overlay networks: unstructured and structured [11]. In 
an unstructured P2P system, the overlay network does not form any particular 
topology and the peers can freely join the system by following some simple rules [5], 
[7]. Because of the unstructured nature, flooding is the most feasible mechanism for 
sending a query in the network. However, if there are a large number of peers in the 
system, the costs of locating an unpopular item using flooding are very high.  
On the other hand, various topologies, including mesh [14], [16], ring [4], [15], 
multi-dimensional space [13], XOR metric [12], list [1], and tree [2], [3], [8], [9], 
[10], have been proposed to organize the peers in a structured P2P overlay network. 
Because every data item stored in the network is assigned a unique key and the key is 
mapped to a peer according to the overlay topology, a data item can be easily found 
using the key. Many of the structured P2P network systems use a distributed hash 
table (DHT) as a substrate to support a hash-table based insertion and retrieval of data 
470 Y.-H. Chen and Y.-R. Ju 
nodes participated in this step. Similarly, parallel propagation of range and routing 
information reduces the costs of load distribution. In this step, the time complexity is 
in the order of O(log2 N) and the message complexity is in the order of O(N), where N 
is the number of tree nodes. In addition, we intentionally simplify the role played by 
the initiator of the algorithm so that the overloaded node does not need to pay too 
much attention to the load balancing process. Simulation results indicate that the pro-
posed strategies perform well and are better than the BATON load balancing methods 
in most cases. 
The rest of the paper is organized as follows. Section 2 provides necessary back-
ground information about BATON. Section 3 presents the two new parallel load  
balancing strategies. Section 4 describes the simulation results. Finally, Section 5 
concludes this paper. 
2   BATON Network 
BATON (BAlanced Tree Overlay Network) is a balanced tree structure overlay net-
work designed for P2P networks [8]. Each node in the tree handles a range of index 
values, which are assigned to the nodes according to an inorder traversal of the tree. 
In addition to the basic parent-child link information, each node in the tree structure 
also maintains links to its adjacent nodes in the inorder traversal sequence and some 
selected nodes at the same level. Links to the selected nodes at the same level are 
stored in a left routing table and a right routing table, which contain the links to nodes 
that are 2i nodes away from the node (i = 0, 1, 2, …). An example of the BATON tree 
structure is shown in Fig. 1.  
Because BATON is a balanced tree structure, we can search for an exact index 
value in O(log N) steps, where N is the number of tree nodes. A node is free to join or 
leave a P2P system, which may cause imbalance in a BATON tree. Therefore, we 
need to balance the tree after node addition or deletion by adjusting the tree structure 
and updating the routing tables. It takes O(log N) messages for performing both of 
these operations on a BATON tree.  
Each node in a BATON tree manages a range of index values. The computational 
load on a node is the number of queries issued against the data items managed by the 
node. Therefore, we can share the load of an overloaded node with its adjacent nodes 
by adjusting the data range between them. However, if the adjacent nodes are also 
heavily loaded, this range adjustment operation may propagate to other nodes. This 
sequential load balancing process will incur high costs. An alternative way of doing 
load balancing is to use a helper node. We first try to find a lightly loaded helper node 
using neighbor routing tables. Then we pass the load of the helper node to its adjacent 
node, remove the helper node from its original position, and insert it as a new adjacent 
node of the overloaded node. Finally, we split the load of the overloaded node be-
tween the node and its newly inserted empty adjacent node. Because moving the 
helper node may cause imbalance in the tree structure, we need to adjust the tree 
structure and update the routing tables. If the load is too heavy to be balanced using 
only one helper node, we need to repeat this process. Although the costs of each op-
eration are in the order of O(log N), repeatedly readjusting the tree structure may 
incur very high costs. Neither sequentially propagating load through neighboring  
 
472 Y.-H. Chen and Y.-R. Ju 
but the algorithm can be extended to search both sides with similar costs and results. 
Sending messages to all nodes in the right routing table of the overloaded node can 
probe a large number of nodes. However, this is wasteful of resources if only a few 
neighboring nodes are needed. We propose a round-based probing approach, which 
will double the total number of nodes searched at the same level after each round.  
Probing Phase. Probing nodes in the routing table cannot cover every node because 
the routing table only contains links to nodes that are 2i nodes away from the node. In 
order to probe 2i nodes, we send messages to the first (i +1) nodes in the right routing 
table in parallel. Among these nodes, we dedicate the last one as a leader node, which 
will collect all response messages and decide whether the next round of probing is 
necessary. When the jth node in the routing table receives the probing message, if 
j > 2 and the node is not the last node, it will send probing messages to the first (j - 1) 
nodes in its own right routing table. In addition, the node will send a probing message 
to the first node in its left routing table if j > 2. Fig. 2 illustrates the three steps of 
probing 16 nodes. In the first step, node 0 sends probing messages to the first five 
nodes in its right routing table: node 1, node 2, node 4, node 8, and node 16, and noti-
fies them that node 16 is the leader node of this round. Because node 4 is the 3rd node 
in node 0's routing table and it is not the last node in this round, node 4 needs to send 
probing messages to the first 2 nodes in its own right routing table. Similarly node 8 
needs to send probing messages to nodes 9, 10, and 12 as shown in step 2. In addition, 
nodes 4, 8, and 16 also send probing messages to nodes 3, 7, and 15, respectively. 
This process continues until every node receives the probing message. In the mean 
time, node 16 will receive response messages from all nodes participated in this round 
and decide whether it should initiate the next round of probing.  
 
 
Fig. 2. Probing 16 nodes at the same level 
This probing process only propagates messages among nodes at the same level. Since 
index values are assigned to nodes according to the inorder traversal sequence, we need 
to consider nodes at other levels in the probing phase. Note that at least one of the two 
adjacent nodes of any internal node in a BATON tree is a leaf node [8]. Therefore, if the 
overloaded node is an internal node, we can use its right adjacent leaf node to initiate the 
probing process. On the other hand, if the internal overloaded node does not have a right 
adjacent node, we can initiate the probing process from the overloaded node itself. 
Thus, the probing messages are propagated at a level that is mainly composed of leaf 
nodes. However, some nodes at this level may still have child nodes. In this case, we 
need to probe these child nodes, too. For probing internal nodes, it is necessary to probe 
474 Y.-H. Chen and Y.-R. Ju 
shown in Fig. 4, the bucket of nodes 11, 12, 13, and 14 is divided into five groups of 
consecutive nodes. Nodes 12, 13, 15, 19, and 21 become seed nodes of these five 
groups. This arrangement makes sure that each node will receive only one update 
message. Thus, the first node in the bucket sends messages to all seed nodes, and then 
the seed nodes initiate the updating process in its own group. This process of the ex-
ample bucket is illustrated in Fig. 5. Because the group length is in the order of O(N) 
and the message can be transmitted to all nodes in a group in O(log N) steps, the time 
complexity of this process is in the order of O(log N). On the other hand, because 
each node receives only one message, the message complexity of this process is in the 
order of O(N), where N is the number of tree nodes. 
 
Fig. 4. Seed nodes and corresponding consecutive groups in an example bucket 
 
Fig. 5. Updating affected nodes through seed nodes 
3.2   Virtual Group Load Balancing 
Virtual group load balancing strategy moves the heavy load to another lightly loaded 
region. The main advantage of this approach is that the neighboring nodes of the over-
loaded node do not share the heavy load, so they can continue to work on their tasks. 
Redirecting the heavy load to a virtual group is very efficient if we have an over-
loaded area instead of a single overloaded node. However, the drawback of this ap-
proach is that we need to modify the original query processing and index updating 
algorithms to incorporate the existence of the virtual group.  
In the first step of the virtual group load balancing process, the overloaded node 
sends messages to all nodes in its routing table and finds out the node that has the 
lightest load. Then, the lightly loaded node will establish a virtual group to share the 
heavy load by going through the above mentioned probing phase and updating phase 
of the vicinity load balancing process. For example, as shown in Fig. 6, node 9 is the 
overloaded node and node 73 is the lightest loaded node in node 9’s routing table. 
Node 9 redirects its load to node 73, and node 73 forms a virtual group marked by the 
dotted rectangle to share the load.  
476 Y.-H. Chen and Y.-R. Ju 
0
200
400
600
800
1000
1200
1400
1600
1800
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
Load of the overloaded node
N
u
m
be
r 
o
f m
es
sa
ge
s 
  
Sequantial adj
Vicinity
Virtual group
 
Fig. 7. The total number of messages sent in a single overloaded node system 
0
50
100
150
200
250
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
Load of overloaded node
Ti
m
e 
u
n
its
 
 
 
Sequential adj
Vicinity
Virtual group
 
Fig. 8. Time units used in a single overloaded node system 
0
20
40
60
80
100
120
140
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
Load of the overloaded node
N
u
m
be
r 
o
f p
ar
tic
ip
an
t n
o
de
Sequential adj
Vicinity
Virtual group
 
Fig. 9. Number of participant nodes in a single overloaded node system 
478 Y.-H. Chen and Y.-R. Ju 
4.1   Working Load 
We use the number of messages sent by each node to represent the working load of 
the node that participates in a load balancing process. This experiment assigned a 
single 5 units overloaded node and measured the number of messages sent in each 
node using the three strategies. It is shown in the following table that the sequential 
adjusting method causes more nodes to send larger number of messages. Another set 
of experiments indicated that the overloaded node and its neighboring nodes sent 
more messages using the sequential adjusting strategy. Note that we did not include 
the costs of data migration in the experiments because they are similar in the three 
strategies after readjusting the index ranges.  
Table 1. Number of nodes at different levels of working load 
Number of messages sent per node 
 Low (1 to 10) Medium (11 to 20) High (21 to 30) 
Sequential adj 99 5 8 
Vicinity 46 4 0 
Virtual group 53 6 0 
5   Conclusions 
In tree-structured P2P networks, traditional load balancing operations either use an 
existing adjacent node or insert a helper node as an adjacent node to share the heavy 
load of the overloaded node. This approach is adequate for handling the data skew 
problem caused by data insertion and deletion, but this sequential approach may trig-
ger a sequence of load balancing operations in case of execution skew. In order to 
handle both skew problems, we propose two parallel load balancing strategies for 
tree-structured P2P networks. The vicinity load balancing strategy, which consists of 
a probing phase and an updating phase, tries to find enough neighboring nodes to 
share the load in a round-based fashion. On the other hand, the virtual group load 
balancing strategy moves the heavy load to a lightly loaded region instead of moving 
helper nodes to the overloaded node. Because we combine all the messages that are 
intended to be sent to one node into a single message and send the messages in paral-
lel, the time complexity and message complexity of the proposed strategies are lower 
than the sequential load balancing strategies. Furthermore, in order to reduce the work 
load of the overloaded node, we assign leader nodes to collect response messages and 
initiate next round of probing if necessary. Simulation results indicate that the over-
loaded node is relieved from the work of the load balancing process in the proposed 
strategies.  
Moving indexes instead of moving nodes can save the costs of readjusting the tree 
structure, but we need to modify query processing and index updating algorithms for 
redirecting the query to the virtual group. We will further study issues about imple-
menting these algorithms and evaluating their performance in the future work. 
Acknowledgments. This research is supported in part by the National Science Coun-
cil of ROC under grant NSC97-2221-E-415-006.  
