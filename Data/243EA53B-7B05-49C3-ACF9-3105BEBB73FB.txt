21.報告內容
1.1 前言
近年來的繪圖處理器除了在市場上有大量需求外，為了進一步滿足高速高效能的環
境，其相關繪圖處理技術與硬體功能亦持續不斷地在迅速演進中。從 2001 年的第一個可程
式化繪圖硬體問示，到 2010 年的繪圖功能器功能，其著色器的數量已從數核的 Multicore
多核心發展到上千核的 Manycore 架構，其除了專為繪製 3 D 圖形的硬體加速而設計之外，
目前的繪圖硬體亦可開始支援大量資料平性的一般應用程式。如︰CUDA,OpenCL 目前都可
使用繪圖硬體來執行具大量資料平行性的一般應用程式。此外，近來應用於手持式裝置的
繪圖功能需求亦不斷地增加，然而，面對著資源、供電能力受限的環境下，繪圖特性的設
計則有不同的考量。
儘管繪圖硬體相關技術的研究，以迅速且多樣化的方式展開，本研究仍基於 3D 繪圖的
基本特性，進行高效能架構的優化設計，並著手瞭解嵌入式應用的繪圖硬體背景-Tiling
Architecture 與其可能遭遇的問題與所需的解快的相關課題，做為即將被廣泛採用的嵌入
式繪圖硬體設計之基礎研究。目前所完成之研究題目，已有數項實際產出，包括︰1.完成
二件中華民國專利及二件美國專利之申請，且校內審核結果皆為通過；2.完成五篇國際會
議論文之投稿，並皆為通過；3.準備即將投稿的期刊數件。完成之各相關研究主題說明如
下。
1.2 各研究主題 (內含研究目的、文獻探討、研究方法與設計、結果與討論)
1.2.1 A Run-Time Reconfigurable Fabric for 3D Texture Filtering
 研究目的
設計一個具低面積速度乘積的可動態重組之材質過濾單元
 文獻探討
在國外，有 IEEE Mid West Symposium On Circuits and Systems 2002 上發表的論
文的研究[Chitta02]，主要在 CPU 端，藉由物體移動速度以及物體與觀察者的距離這兩個
參數，套用在 HVP(Human Visual Perception) 模型而得到一個 criteria，來決定重組硬
體使用 bilinear 和 trilinear 兩種模式中的其中一種，以達到 real-time 3D graphics
texture mapping 硬體的省電。雖然提到一個 trilinear filter 可以轉換成二個 bilinear
filters，但未提供 logic level 的可重組式設計。另外在，Computers & Graphics 24 (2000)
上也有發表論文研究[Ewins00]，是以 low cost 為訴求所設計的 anisotropic filter，利
用現有的 trilinear filters 及儘量少的額外成本，來實作出 anisotropic filter，並且
對於運算分析部分和硬體區塊圖有詳細說明。
 研究方法
首先，我們針對在單一材質處理單元內的材質過濾單元提出一個類似
4個雙線性材質過濾器於第二個工作週期內整合以完成之。請參考第一圖，其為本設計之雙
線性材質過濾器取代三線性材質過濾器之電路結構圖。由圖中可以觀察出，兩個雙線性材
質過濾器 Bi 透過分工訊號 TF，可以容納一個三線性材質過濾器 Tri 的輸入頻寬。圖中電
路，係利用分工訊號 TF 的兩種邏輯組態，亦即 TF0 與 TF1 來達成分工之目的，而圖中之雙
線性材質過濾器 Bi 實際上亦是由三個線性材質過濾器 Li 所組成。值得注意的是，由於三
線性材質過濾器 Tri 實際上需要 7個線性材質過濾器 Li 來組成，所以在實際運作中，兩個
雙線性材質過濾器Bi雖然可以於第一個工作週期中涵蓋一個三線性材質過濾器Tri的輸入
頻寬，但是仍需要於第二個工作週期中提供第七個線性材質過濾器 Li。同理，請繼續參考
第二圖，其為本設計之雙線性材質過濾器取代異向性材質過濾器之電路結構圖。從圖中可
以觀察出，一個 n：1的異向性材質過濾器 Ani，在執行浮點數運算時，可透過若干異向性
邏輯 AL 將之拆解成 n個三線性材質過濾器 Tri 來涵蓋其輸入頻寬，並透過加法樹 adders
tree 來整合。
因此，本設計首先根據上述原理，提出一種泛用型材質過濾器。請參考第三圖，其係
為本設計之泛用型材質過濾器的結構示意圖。圖中，本設計之泛用型材質過濾器 180 可由
一雙線性材質過濾器 161 與一過濾器邏輯單元 181 來組成。請繼續參考第四圖，其係為本
設計一實施例之泛用型材質過濾器的電路結構圖。圖中，過濾器邏輯單元 182 係電性連接
於雙線性材質過濾器 161，並接收了待處理畫素的非均值比例 AR 以及一合併參數 LF，此合
併參數 LF 之由來請參考上列公式(4)，係為合併兩個雙線性材質處理器時，調整權重所產
生的。為了達成於兩個工作週期內，以雙線性材質處理器取代三線性材質處理器之目的，
過濾器邏輯單元 182 包含了一個額外的線性材質過濾器 Li。為了於 2n 個工作週期內，以
三線性材質處理器取代n：1異向性材質處理器，過濾器邏輯單元182包含一個額外的16-bit
計數器 R1 來儲存三線性材質處理器所輸出的結果。此外，過濾器邏輯單元 182 也包含了一
個額外的異向性邏輯 AL 來切割每個三線性材質處理器所輸出的結果，以及一個加法器＋來
整合所有三線性材質處理器所輸出的結果。過濾器邏輯單元 182 中的材質過濾格式 FT 係利
用兩個位元來代表各種材質過濾格式，亦即 FT(00)代表雙線性材質處理器，FT(01)代表三
線性材質處理器，FT(10)代表異向性材質處理器。多工器 MUX0 是用來區別材質過濾格式是
否為雙線性材質處理格式，多工器 MUX1 是用來區別材質過濾格式是否為三線性材質處理格
式。最後，一個 1-bit 的計數器 R2 是用來計算工作週期是奇數週期還是偶數週期。第四圖
中所繪示的 16-bit 計數器 R0 並未被包含於此過濾器邏輯單元 182 之中，因為它本身即是
材質單元做管線化(Pipeline)輸出時所必備的計數器。
請參考第五圖，其係為本設計之泛用型材質過濾器的另一結構示意圖。圖中，泛用型
材質過濾器 183 可由兩個雙線性材質過濾器 161 與一過濾器邏輯單元 184 來組成。藉此，
泛用型材質過濾器 183 可用以取代三線性材質過濾器。請繼續參考第六圖，其係為本設計
另一實施例之泛用型材質過濾器的電路結構圖。圖中，過濾器邏輯單元 185 各構件之功用
與第四圖所示之過濾器邏輯單元 183 各構件的功用相同，在此不予贅述。此處，當像素之
材質過濾格式為雙線性材質過濾處理時，像素可選擇從兩個雙線性材質過濾器 161 其中之
ㄧ進入，再由 16-bit 計數器 R0 或 R1 其中之ㄧ輸出。當像素之材質過濾格式為三線性材
質過濾處理時，像素可選擇從兩個雙線性材質過濾器 161 進入以符合三線性材質過濾處理
所要求的輸入頻寬，通過線性材質過濾器 Li 之後，由 16-bit 計數器 R0 輸出。當像素之
材質過濾格式為異向性材質過濾處理時，像素可於每個工作週期內，由兩個雙線性材質過
濾器 161 輸入，經過線性材質過濾器 Li、異向性邏輯 AL 與加法器＋後，從 16-bit 計數器
6使用率，並縮短執行時間。
 文獻探討
在國外，Nokia Research Center 的相關研究[Chen05]，是以編譯時期資源分配的方
式，解決 vertex 及 pixel 工作量不平衡的問題，並利用 StreamIt 高階語言，在 parallel
tiled RAW 處理器上實作，並驗證結果。然而不足處在於：使用的處理單元過大，並不考
慮可重組單元的運算能力，同時也不考慮繞俓的問題。在沒有動態支援的配置條件下，處
理過程運算量差異大的問題仍無法克服。另外，在 Universitat Politecnica de Catalunyau
的相關研究[Moya05]，是結合vertex shader 與pixelshader 的功能於一個通用的unified
shader 中 ，並使用此種 shader 去處理 vertex 與 pixel。然而不足處在於：硬體成本過
大。通用型單元雖好用，但此兩者運算也有相當的差異
 研究方法
首先分析處理器的架構，決定可動態重組處理器中，各元件是否能讓兩種組態所共用。
其中我們利用最小繞線代價、最多共用邏輯以及最佳面積與時間三種演算法，幫助我們決
定運算邏輯是否應作共用設計，以組合成運算單元。並且設計工作量監測邏輯，根據工作
量的變化控制各可動態重組處理器之組態。
 結果與討論
得到於速度上有60%之提昇，以及30%使用率提昇。
設計說明︰
在異質多功能處理器環境中，融合兩個功能不同的處理器(Type A/B processor)，型成一個可
共用之動重組態硬體(Dynamically Reconfigurable Processor)。配合工作量監測及組態控制元
件(Load monitor/Reconfiguration Controller)之使用，令硬體資源可依實際的工作需求，彈性
配置資源給工作量需求較大的一方使用。
其中步驟包含
1. 先分析各處理器之指令運算需求，以設計可共用之基本單元:
依據處理器之運算需求以及動態重組之時機，決定出可共用與不可共用部分。其中，
以運算元件之共用為核心目標，使不同功能之處理器，得以共用一運算單元以減少硬
體需求，為本專利關鍵之ㄧ。
8方式為，將資料傳遞暫存區之飽和度，直接對應於硬體分配，利用靈敏之硬體調配，
減少硬體資源之分配不符合各處理器工作量之情況。
If Diff >0 ?
FDRM = Job endM ∩
(Configuration ?=
pixel shader type)M
yes
no
SFDRM = Sort( FDRM)
Diff = EDRP - CDRP
Mask = 1|Diff| 0N-|Diff|
FDRM = Job endM ∩
(Configuration ?=
vertex shader type)M
ReconfN =
SFDRM 0N-M ∩MaskN
SReconfN =
Sort -1( ReconfN )
NCDRP = CDRP +
(# of 1 in Reconf)
EDRP CDRP Job endM
SReconfM NCDRP
1.2.3 Fast Indexing for Variable Length Data Compression
 研究目的
設計出一個有效的索引方法，此方法能配合目前各種 variable length coding 技術可
以快速的索引到所要的資料且只需 O(log)時間的快速搜尋法
 文獻探討
目前材質壓縮法的研究都是採用固定壓縮比在 4:1 的壓縮技術。其原理是將原始的
texture image 分成很多個以 4x4 為基本 block 的壓縮單位，然後再對每個 block 進行壓
縮的動作。其壓縮後所需要的空間是原始基本 block 所需要空間的四分之一。所以很多研
究都是基於壓縮比在 4:1 的條件下提出不同的壓縮方法。而可變長度壓縮法並不被材質壓
縮法採用，是因為要在可變長度壓縮檔中快速地找到所要的資料是很困難且耗時的，因為
通常要先把壓縮檔全部解壓縮後，才能再去抓取所要的資料。因此目前的研究中並沒有發
現如何針對此問題提出有效的解決方法。
 研究方法
經由 search tree 及 index table 就可以快速的索引到特定的位置並將資料取出。將
取出後的特定資料解壓縮即可。
 結果與討論
可以大大的節省解壓縮的時間及記憶體空間。
設計說明︰
對於尚未壓縮的原始資料，我們可以看成是 2維排列的資料，同時假設所選用的壓縮
法其最小的壓縮單位是 8x8，如圖(a)所示。在本設計中把圖(a)依照本設計提出的象限分
法，可以看成是ㄧ個 4-ary 樹，如圖(b)所示。同時將壓縮後所需要儲存單位的值利用本設
計所提的公式累計存放在索引表內，如圖(c)所示。
10
方法，也就是材質 Row-major 的方法，此法直覺，且座標位址轉換邏輯簡單，但由於 texture
filtering 有 spatial locality 存在，用 Non-blocked 的方法會造成所需要的材質像素在
記憶體中分隔很遠，材質快取記憶體效能下降，於是提出 tile-based 的 4D 方法，其主要
概念就是將材質切成一塊塊的 tile，inter tile 與 intra tile 均為 Row-major 的放置方
法，理由在於因為有 spatial locality 存在，鄰近區域的材質像素在記憶體中應緊密擺放，
藉此達到材質快取記憶體效能上升。6D 為 4D 法的延伸，概念為 two level tile-based 的
方法，inter tile 與 intra tile 亦為 Row-major，能夠將所需要的材質像素點放得更緊密，
因此材質快取記憶體效能亦提升。
 研究方法
由觀察得知，在做 Texture filtering 所需的材質像素點，有空間相關性。 另外所需
材質像素點於材質記憶體中是否放得緊密，除影響快取記憶體效能外，亦會影響到對快取
記憶體存取的次數，也就是 Filtering 所需要的材質像素點有可能會因為材質像素放置不
佳而散落在四條、兩條或是一條材質快取記憶體中。
設計一個 multi-level tile-based 的放置方式-Recursive Z，可視作為 multi-level
row-major，其方法能夠將 Filtering 所需要的材質像素點於記憶體中緊密放置，藉此達到
材質快取記憶體效能的提昇，也降低 multiple cache lines access 的情形發生。
最後利用位元邏輯運算與其本身遞迴的特性，來達到材質座標位址快速轉換。
設計方法︰
 結果與討論
在材質快取記憶體效能測試下，Recursive Z 於 Direct , Set associative , Fully
associative 的快取記憶體下，均優於 Non-blocked、4D、6D 的放置法。尤其是在 Direct
mapping 下，RZ 可以有效降低 Conflict miss 發生的狀況。在 multiple cache lines access
的情況下，Recursive Z 在各種 cache line size 下，至少不輸。在材質座標轉換所花時
間測試下，由於 Recursive Z 的座標轉換，除材質初始位址的加法以外，沒有使用算數運
算，故所花的時間與 Non-blocked、4D、6D 比較至少縮短 40%的時間。
設計說明︰
Figure.1 RZ placement with memory indexing
12
Table 3.1 Summary of the difference of translated address among placements
1.2.5 Texture cache 與 Texture unit 效能提昇設計
 研究目的
根據 Texture Filtering 所需的 texels 所在位址之特性，設計出合適的 Banked Cache
的資料配置，讓filtering所需的texels都落在不同的banked上。如此，在沒有 cache miss
的情況下，texture unit 可以在一次 cache access 就拿到所需的 texels，以達到減少 texld
指令的執行時間。
 文獻探討
此設計中，在 texture placement 我們首先採用 Recursive Z placement 的方式。因為這種
placement 方式是根據現今 filtering 所需的 texels 的特性(一次是 2x2 個 texels)，而且經過比
較他有較低的 cache miss rate。Banked cache 是將原本的 cache 分成幾等分小 cache，在 access
cache 時可以同時去存取多份 bank。若所需的資料在不同 bank 上，就可以一次 cache access
拿到所需要的多筆資料。同時，也會針對 4 D、6D 在 Banked cache 的運作，探討其合適之
配置原則。
 研究方法
首先觀察從 memory 來的資料要怎麼放到 cache 裡，可以讓每一次 access 2x2 的 texel
時可以都在不同 banked 上。設計一塊額外的電路將 address translation 產生出來的 texel
address 送到正確的 banked cache 上。為了保證不因為把 cache bank 開而導致原本把 cache
miss rate 變高，我們考慮幾種 cache 的 configuration。由於一次 access 可能會造成多個 bank
發生 cache miss。所以也需設計好發生 cache miss 時的 replacement 機制。
 結果與討論
可做到一次 filter 可以只需一次 cache access 就可以在沒有 cache miss 的情形下，
讀取到所需的 texels，可以降低一般 GPU 做 texture mapping 的 latency。
設計說明︰
Fig. 1 banked texture cache
14
Fig. 3-5(a)
Fig 5(b)
Fig. 5 Example of address mapping in data bank: (a) Texel mapped address with RZ placement (b)
address mapping in data bank
Fig. 6 Data bank design v2: interleaved data bank
Fig. 7 Data bank id and offset in data bank field in address with 2×2 tile size
Fig. 8 Texel mapping in interleaved data bank which tile size is 2×2 and cache line size is 64 byte
16
Fig. 14 Tag index field and tag bank id in address
1.2.6 順序獨立透明繪圖架構下像素資料管理系統
 研究目的
隨著對 3D 繪圖場景的畫質與處理速度之要求愈來愈高的情況下，3D 繪圖硬體加速處
理器的角色亦漸重要，其功能要求也愈來愈高，如何能夠即時繪製擬真之透明度效果，則
是其中重要的一環。目前硬體架構下來處理順序獨立透明計算的方法中，皆需要龐大的儲
存空間來暫存具有透明度之像素的資料(包括顏色資訊，透明度及深度值)。如果能夠降低
這些透明度像素所需的暫存空間，並針對順序獨立透明繪圖架構而設計一套有效率的像素
儲存方式，將會減輕系統記憶體的負荷，降低於順序獨立透明繪圖中所需記憶體存取時間，
以達到效能上改善的目的。
 文獻探討
目前與順序獨立透明計算有關的研究有下：
1. 軟體(應用程式端)方式處理之研究
a. A-buffer software algorithm [3]：在應用程式端對於透明度像素做順序排序後，
再將像素由後至前(距觀察者)透明度混色渲染處理。
b. Multipass algorithms [4]：對透明度像素依其深度由後至前排序，再進行混色渲
染處理。
c. Depth peeling technique [2]：不需要對透明像素先做深度排序處理，但需花費
多次的繪圖混色渲染處理。
2. 硬體架構設計處理之研究
a. R-buffer [5] ： R-buffer 硬體架構是一個實現 A-buffer 演算法[3]的硬體架
構，其目的是希望在不經由應用程式對透明物體事先排序的情形下，藉由 3D
繪圖晶片處理器的支援，亦能得到正確混色的結果。
b. WF hardware oriented algorithm [6]：提出一演算法，在不需要對像素做深度排
序的情況下，針對具有透明度的像素，做一個加權的計算，算出每個像素所
具有的顏色比例，最後再將所有對應至螢幕上同一位置的像素色彩資料加總
起來，得其最終混色結果，並配以一有組織之儲存空間，來存放透明度像素
資料。
其中，硬體架構設計方面的相關研究中所需用來存放透明像素之儲存空間設計，
將會是此研究設計的重點所在：如何能夠更有效率節省透明像素的資料量，以及
如何能夠更有系統存放透明像素，是此研究之中心目標。
 研究方法
此研究的基本想法有二：(1)由於具有透明度的像素，其用來表示顏色的有效數值
不見得需要全部的位元數，由於具有透明度的關係，將會使其顏色飽和度降低，相對
地有效數值位數亦減少。因此，若能對像素色彩資訊進行前置零消除(leading 0s
18
集地存放在記憶體空間中，如圖一中所示，T-Buffer用來存放這些透明相素，每個Section
中存放具有相同座標的像素；SA table 紀錄存放(X,Y)座標像素第一個 section 的位址；
Record Table 紀錄每個像素經過前置零消除後的長度(length)，以及下一個存放具有相
同座標像素的 section 位址(Nxtaddr)，以便之後做順序獨立透明計算時，能有效率地得
到所需的像素資料。
圖二至圖五主要是針對記憶體使用空間的探討。
圖二是此研究設計中前置零消除可以節省的記憶體空間比例，平均而言可以節省
5%~18%左右的記憶體使用空間。圖三至圖五為本研究設計與先前相關研究
(R-Buffer[5]、WF algorithm[6])於記憶體使用空間之比較，對於 R-Buffer 而言，本研究
平均可以節省 8%~18%左右的記憶體使用量；對於 WF algorithm 而言，本研究平均可
以節省 70%~80%左右的記憶體使用量。
Memory reduction ratio by leading 0s elimination
0.00%
5.00%
10.00%
15.00%
20.00%
fra
me
13
0
fra
me
15
0
fra
me
16
5
fra
me
18
4
fra
me
20
0
fra
me
22
5
AV
ER
AG
E
Frame
Pe
rc
en
t(
%
)
(2,8) (2,13) (3,13) (3,16) (3,20)
圖二 前置零消除之記憶體空間節省比率
Required memory size of each method
0
2000000
4000000
6000000
8000000
10000000
fra
me
13
0
fra
me
15
0
fra
me
16
5
fra
me
18
4
fra
me
20
0
fra
me
22
5
AV
ER
AG
E
Frame
m
em
or
y
si
ze
(B
yt
e) Rbuffer
WF(Davg=3)
WF(Davg=2)
FDMS(3,13)
FDMS(3,20)
FDMS(3,16)
FDMS(2,13)
FDMS(2.8)
圖三 各方法所需記憶體空間之比較
20
file 以利猜測性執行。上述許多技術，並已實際應用於商用設計中。然而我們的研究目標︰
使暫存器檔具可彈性共享及彈性擴充能力，與上述多項設計均無直接相關。因此，以上資
料雖有參考價值，但無法取代我們的研發目的。
 研究方法
擬以架構設計的方法，配合控制電路設計，完成暫存器檔可分割、共享的目標。並假
設可彈性增加的暫存器數為一給定的任意小正整數，來進行彈性增加暫存器數目的架構設
計。最後擬以硬體設定的方式來設計多執行緒間作為參數傳輸的暫存器。研究設計之步驟
依序為︰1.暫存器檔可分割、共享的設計，2.可彈性增加暫存器數目的設計及 3.具若干個
硬體設定的多執行緒間參數傳輸暫存器的設計
 結果與討論
在相同的執行效能下，可延伸的共享暫存器檔設計僅需多增加原來暫存檔的一半空
間，即可達到使用二個傳統暫存器檔的效能。因此，與二個獨立的暫存器檔相比，我們可
省下約 21.6% 暫存器晶片面積的成本。
設計說明︰
1.2.8 可動態調控之透明繪圖像素中間值管理系統
 研究目的
增加透明像素中間值之儲存空間的使用率。3D 場景中，不同的畫面或同一畫面中的不
同位置，其透明像素數量之分布可能因場景之特性而造成極大的差異。若僅依固定設
定好的平均透明數量來使用儲存空間，很容易造成 fragmentation 和 overflow 的問
題。利用可動態調控設計，依觀察實際需求，可彈性地使用儲存空間，降低
fragmentation 與 overflow 的問題，以提高空間使用率。
 文獻探討
[1]是第一個以硬體解決透明度混色需要依畫面深淺度之順序做混色處理之限制，但此
方法只能夠針對所有畫面座標上有限個數的透明圖素做排序，因此最後混色出來的結果有
可能跟最後應該要呈現在畫面上的顏色有誤差。[2]同樣提出了一個用來解決透明度混色順
序限制的暫存硬體，並且能夠針對所有畫面座標上任意個數的透明圖素做排序，但缺點是
從硬體中依深淺度取出透明圖素時相當的耗時。[3]解決了相類似技術 5.在取出透明圖素
22
第一圖
第二圖
第二圖為歷史基礎部份的結構示意圖。其中 SSA(start section address) table 共
有 W(畫面寬)xH(畫面高) 項目(entry)，且每一個畫面上的座標都會對應到一個項目。每
個項目各有三個欄位，SSA 欄位是存放該對應像素其在 H-buffer 內使用的記憶體區段起始
位置，若該像素未使用任何 H-buffer 之記憶體區段，則 SSA 欄位為空；TF amount 欄位在
SSA 欄位為空時，是用來指定在 H-buffer 內的新記憶體區段長度，一旦指定完新記憶體區
段長度，則該欄位便會馬上開始記錄該對應畫面座標上的透明圖素個數。Section full bit
欄位則是用來指出 start section 是否已經滿了。H-buffer 為用來存放透明圖素屬性的記
憶體空間，其每一個項目都可以用來儲存一個透明圖素之屬性，而 Start section address
accumulator則是用來指出從H-buffer的頂端，第一個尚未被指定為某一畫面座標之start
section 的項目其記憶體位置。
一旦任一畫面座標其第一個需要儲存的透明圖素進入，新的 start section 會被指
定來儲存該透明圖素，且起始位置便是由 Start section address accumulator 的值來決
定，同時，此起始位置會被記錄在 SSA table 中對應的 SSA 欄位內，以便該畫面座標第一
個之後的透明圖素能夠找到對應的記憶體區段做儲存。而新的記憶體區段長度則是由 SSA
table 內對應的 TF amount 欄位之值來決定。等到透明圖素存進 start section 後，我們
會去檢查 start section 是否已經滿了，若滿了，則會將 section full bit 標示為 1。之
後的操作，只要先去確認 section full bit 是否為 1；若不為 1，則可用 SSA 欄位所存的
記憶體位置，並且以 TF amount 欄位的值做為 offset，以用來做為即將被儲存的透明圖素
將被存在 H-buffer 的位置；若為 1，則此即將被儲存的透明圖素則會被儲存到 overflow
section。
第三圖
第四圖
24
2.2 已申請專利
[1] 壓縮/解壓縮裝置及其方法
[2] 動態可重組化的材質過濾系統 (中, 英)
[3] 具有負載平衡的可動態重組異質處理器架構設計方法 (中,英)
2.3 各研究主題參考文獻
1. A Run-Time Reconfigurable Fabric for 3D Texture Filtering
[1] J. Chittamuru, J. Euh, and W. Burleson, "An Adaptive Low Power Texture Mapping
Architecture," IEEE Mid West Symposium On Circuits and Systems, 2002.
[2] Jon P. Ewins, Marcus D. Waller, Martin White, Paul F. Lister, “Implementing an Anisotropic
Texture Filter,” COMPUTER GRAPHICS (PERGAMON) , 2000.
2. A dynamically reconfigurable shader unit for vertex and pixel
[1] Jiawen Chen, Michae I. Gordon, William Thies, Matthias Zwicker, Kari Pulli, Frédo Durand
“A Reconfigurable Architecture for Load-Balanced Rendering,” Proceedings of SIGGRAPH
on Graphics Hardware, 2005.
[2] Victor Moya, Carlos González, Jordi Roca Agustín Fernández, Roger Espasa “A Single
(Unified) Shader GPU Microarchitecturefor Embedded Systems,” HiPEAC, 2005.
3. Fast Indexing for Variable Length Data Compression
[1] Jacob Ström1, Tomas Akenine-Möller2, “iPACKMAN High-Quality Low-Complexity
Texture Compression for Mobile Phones”, Graphics Hardware, 2005.
[2] Ström J., Akenine-Möler T., “PACKMAN: Texture Compression for Mobile phones”, In 
Sketches program ar SIGGRAPH, 2004.
4. Texture memory system design for texture mapping
[1]“The design and analysis ofa cache architecture for texture mapping”.ISCA, 1997.
[2]“Multi-level texture caching for 3D graphic hardware”. ISCA, 98.
[3]“Prefetching in a texture cache architecture”. ACM SIGGRAPH/Eurographics Workshop on
Graphics Hardware. 1998.
[4]“Parallel texture caching”. ACM SIGGRAPH/Eurographics Workshop on Graphics Hardware.
1999.
[5]“Design and evaluation of a multimedia computing architecture based on a 3D graphics
pipeline”. ASAP, 2002.
[6] Magnified texture-mapped pixel performance in a single-pixel pipeline, US patent , patent
no.:6847372 , 2005
[7] Computer architecture: a quantitative approach, 3rd edition.2003.
[8] 3D Computer Graphics, 3rd edition. 2000.
26
Aug. 2005.
8. 可動態調控之透明繪圖像素中間值管理系統
[1] N. P. Jouppi and C.-F. Chang. Z3: an Economical hardware Technique Rendering for
High-quality Antialising and Transparency. In Proceesings of Graphics Hardware, pp. 85-93,
ACM/Eurographics, 1999.
[2] Craig M. Wittenbrink. R-buffer: a Pointerless A-buffer Hardware Architecture. In
Proceedings of the ACM SIGGRAPH/EUROGRAPHICS workshop on Graphics hardware,
pages 73–80. ACM Press, 2001
[3] M. Amor, M. Boo, E.J. Padron and D. Bartz. Hardware Oriented Algorithms for Rendering
Order-Independent Transparency. The Computer Journal, vol. 49, issue 2, 2006.
[4] Hui-Chen Lin. Transparent Fragment Storage System for Order-Independent Transparency in
GPU. Institute of Computer Science and Engineering, National Chiao-Tung University,
Master degree thesis, 2008
28
4. 行政院國家科學委員會補助國內專家學者出席國際學術會議報告
98 年 9 月 24 日
報告人姓名
鍾崇斌
服務機構
及職稱
國立交通大學資訊工程學系
教授
時間
會議
地點
2009 年 8 月 29 ~ 31 日
Vancouver, Canada
本會核定
補助文號
計畫編號：
NSC 95-2221-E-009-066-MY3
會議
名稱
(中文) 第七屆嵌入式暨遍佈式計算國際會議
(英文) The 7th IEEE/IFIP International Conference on Embedded and
Ubiquitous Computing (EUC-09)
發表
論文
題目
一、(中文) 嵌入式圖形處理之可平衡負載的動態可重組著色器（由職作口頭
發表）
(英文) Dynamic Reconfigurable Shaders with Load Balancing for Embedded
Graphics Processing
二、(中文) 可減少細線化、深度測試及著色工作負擔的區塊深度測試（由學
生陳浤偉作口頭發表）
(英文) Blocked-Z Test for Reducing Rasterization, Z Test and Shading
Workloads
三、(中文) 用於區塊式顯像之階層式三角形名單結構（由學生蕭之傑作口頭
發表）
(英文) A Hierarchical Primitive Lists Structure for Tile-Based Rendering
四、(中文) 在區塊式顯像中準確偵測錯誤重疊區塊之方法（由學生謝秀青作
口頭發表）
(英文) Methods for Precise False-Overlap Detection in Tile-Based Rendering
五、(中文) H 緩衝器：有效率的基於歷史以及共享滿溢區的透明圖素儲存方
法（由學生呂東霖作口頭發表）
(英文) H-Buffer: An Efficient History-Based and Overflow Sharing
Transparent Fragment Storage Method
30
3. Keynote: Trust Mechanisms and Their Applications in Dynamic and Mobile Computer
Systems
Speaker: Prof. Jie Wu (Temple University, USA)
4. Keynote: From Reconfigurable Architectures to Self-Adaptive Autonomic Systems
Speaker: Dr. Marco D. Santambrogio (Massachusetts Institute of Technology, USA)
5. Panel: Vision and Challenges for Embedded and Ubiquitous Computing
Chair: Marco Avvenuti (University of Pisa, Italy)
其他較有關者為：
1.Privacy, Security, Risk and Trust in Service-Oriented Environments
Speaker: Prof. Stephen S. Yau, Arizona State University, USA
2.Elections with Practical Privacy and Transparent Integrity
Speaker: Dr. David Chaum, Board of Directors of DigiCash Inc., USA
3. Network Analysis and Visualization for Understanding Social Computing
Speaker: Prof. Ben Shneiderman, University of Maryland, USA
4. Social Computing Applications and Trends
Speaker: Dr. Fei-Yue Wang, the Institute of Automation, CAS, China
5.Computational Science and Engineering in Emerging Cyber-Ecosystems
Speaker: Prof. Manish Parashar, Rutgers University, USA
演講者強調：嵌入式與無所不在的計算將成為 21 世紀計算機科學領域的重要研究之一。其
中在多核心平台下發展的即時應用程式，其共享資源的技術確保了重要的資源需即時地配置
給重要的執行工作。計算技術能朝向多核心嵌入式應用方面發展，可促使全人類可在嵌入式
平台上，開發出許多創新之服務，使生活更便捷且安全，進而使社會更理想。
會議中，有來自各國的專家學者發表論文、提出問題、交換意見。台灣方面有十多位學
者和研究生參與，分別來自台大、交大、清大、成大、中山、逢甲、高苑等校。
二、 與會心得
由 EUC-09 中發表的論文，可歸納出以下嵌入式與遍佈式系統的重點研發方向：
1. 軟硬體協同設計的理論及技術對系統平台的開發日形重要。
2. 利用系統軟體(如：編譯器)最佳化技術來減少程式碼大小或降低耗能，對系統的資源
運用是重要研究議題。
3. 強調應用與設計的結合，最受矚目的應用當屬通訊、網路、及多媒體等方面。可採用
Reconfigurable Computing 硬體設計技術來達到提高效能與多重應用的目標。
4. 注重 Sensor Networks、Wireless Communications 等網路與通訊理論的研究。
5. 系統可靠度與安全性的改善，是系統服務品質的再提升。
6. 系統的設計不再侷限於單一專長領域，而需要結合應用、作業系統、編譯技術、硬體
架構等知識。亦即研究者必須具備跨領域的知識，或是必須整合多種領域的研究者以
形成完整的研究團隊。
此次聯合會議吸引了眾多計算機相關不同研究領域的學者參與。三天的會議期間，大會共
分十個場地做論文之發表，每個場次約為 100 分鐘。本次會議之議題頗多，即使是同一場
次，各篇論文之內容仍偶有相當之差異。每一場次各佔 100 分鐘，約發表 4 篇論文。安排
的時間恰當，休息時亦可讓與會人員做充份的溝通。與會者有機會選擇出席不同會議的論
文發表場次，觀摩其議題、內容、及討論。同時，大會亦提供多場 Keynote speeches、Panels、
及 Tutorials，促進專家學者們間的溝通與認識，交流並激發新研究議題，可謂獲益良多。
32
一、 參加會議經過
此次參加的會議為 The 7th IEEE/IFIP International Conference on Embedded and Ubiquitous
Computing (EUC-09)，與 The 12th IEEE International Conference on Computational Science and
Engineering (CSE-0)、The 2009 IEEE International Conference on Privacy, Security, Risk and
Trust (PASSAT-09) 、 The 2009 IEEE International Conference on Social Computing
(SocialCom-09)、及 23 個 Symposiums/Workshops 聯合舉行。由加拿大 St. Francis Xavier
University 主辦，IEEE and IEEE Computer Society、IEEE Technical Committee of Scalable
Computing (TCSC)、及 IEEE Canada Atlantic Section Computational Intelligence Chapter 贊
助。於 8 月 29 日至 31 日在加拿大溫哥華市的 Renaissance Vancouver Hotel 舉行。
EUC-09 投稿論文篇數約 160 篇，為其 Main Conference 接受的有 50 篇，主要分為下列主
題：
1. Embedded Software and Optimization;
2. Embedded Systems and HW/SW Codesign;
3. Multimedia and Data Management;
4. Power-Aware Computing;
5. Sensor Networks;
6. Wireless Communications;
7. Middleware and P2P;
8. Pervasive and Ubiquitous Computing;
9. Dependable, Autonomic, Secure Computing;
10. Real-Time and Cyber-Physical Systems.
EUC-09 除 Main Conference 外，也包含下列九個 Symposiums/Workshops：
1. The 2009 International Symposium on Embedded and Pervasive Systems (EPS-09)
2. The 4th International Symposium on Cloud and convergence Computing (2CCom-09)
3. The 2009 International Symposium on Trusted Computing and Communications
(TrustCom-09)
4. The 2nd International Workshop on Adaptation in Wireless Sensor Networks (AWSN-09)
5. The 2009 International Workshop on Reconfigurable, Multicore Embedded Systems
(WoRMES-09)
6. The 2009 international Workshop on Pervasive Multimedia Sensor Networks (PMSN-09)
7. The 3rd International Workshop on Ubiquitous UnderWater Sensor Network (UUWSN-09)
8. The 2009 International Workshop on Ubiquitous Network Computing (UNC-09)
9. The 2009 International Workshop on Ubiquitous Computing, Management, and Embedded
Applications in Healthcare: Strategies and Application Case Studies (UbiHealth-09)
除論文發表外，聯合會議大會亦精心安排九場 Keynote Speeches、兩場 Panels、和兩場
Tutorials。其中，與 EUC-09 直接相關的為：
1. Keynote: Cache-Aware Scheduling and Analysis for Multicores
Speaker: Prof. Wang Yi (Uppsala University, Sweden)
2. Keynote: White Space Networking–Is It Wi-Fi on Steroids?
Speaker: Dr. Victor Bahl (Microsoft Research Redmond, USA)
三、 考察參觀活動 (無是項活動者省略) 無
四、 建議
會議中有許多來自各國的研究生參加，他們未來都有可能成為學界新血或業界先鋒。近
年來，國科會和教育部也非常支持研究生參與各項國際學術活動。因此，應
該積極鼓勵研究生參與這類國際學術盛會，不僅磨練其發表個人或團隊的研
究成果的能力，並可拓展視野。
五、 攜回資料名稱及內容
1. 會議議程一本。
2. CD-ROM 一片：內含聯合會議各 Conference/Symposium/Workshop 之議程、論文等
所有相關資料。
六、 其他 無
