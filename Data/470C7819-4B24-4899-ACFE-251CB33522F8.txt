 2
訊與服務，已然成為 e 世代人們生活中不可
或缺的一部份。但是相對的，網路技術的發
達，也造就了網路攻擊的成長與普及；因
此，網路安全已成為目前網際網路上一項重
要的議題。阻斷服務 (Denial of Service) [16]
泛指駭客試圖癱瘓某種服務，進而使一般的
使用者沒有辦法去存取、使用該服務，對於
一個以商業網站為主要收入的公司來講，一
旦該公司網站遭受阻斷服務的攻擊使得顧
客無法存取該網站的資源，將使得該公司承
受巨大的損失。 
然而分散式阻斷服務的攻擊到目前為
止，並還沒有可以完全防治的方法。目前的
入侵偵測技術也都無法保證可以百分之百
的正確偵測所有的攻擊行為，有些正常的封
包也會被入侵偵測系統誤認為帶有攻擊行
為的封包，而通知防火牆將其阻絕在企業網
路外。目前已知的一些防禦機制，仍有可能
被老練的攻擊者利用一些手法繞過防禦機
制，則此防禦機制則完全沒有效用。因此在
本計畫中，我們提出一個系統架構，將入侵
偵測系統與網路流量控制等兩個技術結合
在一起。以降低因入侵偵測系統的誤判所帶
來的影響。 
在我們所提出的系統中，流量控制模組
利用流量控制技術將流入企業內部網路的
資料流區分成兩個虛擬資料流：一般資料流
與惡意資料流。假設一個封包被入侵偵測模
組判定為帶有阻斷服務攻擊的特徵，該模組
將會通知流量控制模組將該封包所屬的資
料流導向到惡意資料流的虛擬通道中。由於
惡意資料流虛擬通道的頻寬受系統所控
制，我們所提出的系統將控制此一虛擬通道
的頻寬使正常網路的頻寬或伺服器的資源
並不會因為阻斷服務或分散式阻斷服的攻
擊而癱瘓。 
本計畫的架構如下，第二章先回顧相關
的研究及其結果，第三章我們討論我們所提
出的研究方法，第四章提出實驗結果，第五
章為結論。 
二、 文獻探討 
2002 年美國國防部先進研究計畫機構
(DARPA)進行了分散式阻斷服務防禦之研
究，將分散式阻斷服務攻擊的特性分下列四
種: 
頻寬消耗(Bandwidth consumption) 
此種攻擊通常是攻擊者發送大量的網
路封包到一被攻擊對象，消耗該被攻擊
對象的頻寬資源讓該頻寬資源耗盡，導
致網路癱瘓。 
系 統 資 源 消 耗 (System resource 
starvation) 
此一種類的攻擊方式是將伺服器主機
所提供服務的資源耗盡。 
例外情況開發 (Exceptional condition 
exploitation) 
此種攻擊方式，主要藉由系統(應用程
式、作業系統、硬體)程式無法處理例
外情況來進行其攻擊。 
路由和網域名稱系統的操控(Routing 
and Domain Name Service (DNS) 
manipulation ) 
此種類的攻擊包括攻擊者惡意操縱路
由表，將流量錯誤的引導到其他主機。 
一般 DDoS 常見的攻擊手法如下： 
1.UDP 洪 水 型 攻 擊  (UDP Flood 
Attack)：  
攻擊者藉由送出極大量的 UDP 封包給
被攻擊者，讓被攻擊者的網路資源完全
被佔用，以達到擁塞及中斷服務的攻擊
目的。此外，攻擊者可能會偽造這些惡
意封包的來源位址，以防止被進行逆向
追蹤。 
2.TCP SYN 洪水型攻擊  (TCP SYN 
Flood Attack)[21]：  
 4
系統架構 
 
圖 2、系統示意圖。 
我們所提出的系統包含流量控制模組 
(Traffic Control Module) 與網路入侵偵測模
(Network IDS Module)，如圖 2 所示。 
當一個正常的封包流經網路入侵偵測
模組時，該模組並不會偵測到帶有 DoS 攻
擊的特徵，於是該封包所屬的資料流 
(Connection 或 Traffic Flow) 將會被流量控
制模組導向到頻寬較大的 Normal Traffic 
Flow(圖中實線箭頭所示)中。假如一個帶有
DoS 攻擊特徵的封包流經網路入侵偵測模
組，於是該模組將會通知流量控制模組將該
封包所屬的資料流導向到頻寬較小的 
Malicious Traffic Flow 中(圖中虛線箭頭所
示)。由於 Malicious Traffic Flow 僅占有整
個頻寬的很小的一部份，所以網路的頻寬或
伺服器的資源並不會因為 DoS 或 DDoS 
的攻擊而癱瘓，畢竟只有極少部份的攻擊封
包會通過系統而到達 Intranet 或伺服器。 
本系統設計主要包含兩個部分：入侵偵
測模組-入侵偵測系統及入侵回應模組-流量
管理模組。 
 
系統流程 
入侵偵測模組主要在於攻擊的偵測，流
量控制模組則主司入侵回應，當攻擊發生時
我們所對應的方法。有了入侵偵測與流量管
理模組，我們還需要一個機制，可以為我們
整合上述兩模組，順利達到入侵偵測與入侵
回應相互配合，整個系統架構如圖 3 所示。
當系統啟動時，入侵偵測系統會監控網路上
所有的封包，並偵測是否有攻擊發生，若偵
測出攻擊，則發出警告通知，系統則依照攻
擊的類型與條件，產生相對應的防禦事件規
則，並通知流量控制模組來產生回應機制。 
 
圖 3 系統架構圖 
 
為了串接 Snort 與 TC ，我們修改 Snort 
Output Plug-ins 裡的模組，當攻擊或入侵被
Snort 偵測到時，產生相對應的警告，並使
用修改後的 Output Plug-ins 其中的一個部
份，來啟動 TC 模組，產生相對應的流量控
制規則。 
四、 實驗結果 
在前一章中所提出的系統有些參數需
實驗來確定，本章中我們則進行實驗找出相
關參數。一般來說，入侵偵測系統通常都會
有誤判率的發生，於[3]實驗可得知入侵偵測
系統誤判率最高為 33％。本計畫防禦模組
下，當攻擊未發生時若入侵偵測系統發生誤
判，正常的資料流仍可正常存取服務。實驗
分析最主要分為兩個部份，第一個部分為求
出惡意資料流頻寬佔全部頻寬的比例的α值
(Malicious Traffi 占全部頻寬的比值)，另一
個部分則是將α值實際帶入我們的防禦模組
內，並觀察其結果。 
 6
http://packetstormsecurity.org/distributed
/TFN2k_Analysis-1.3.txt 
[3] V. Broucek, and P. Turner, 2003, 
“Intrusion Detection: Forensic 
Computing Insights arising from a Case 
Study on SNORT”, In U. E. Gattiker 
(Ed.), EICAR2003 Conference. 
Copenhagen, Denmark. 
[4]  K. Fall and K. Varadhan. The ns manual.  
http://www.isi.edu/nsnam/ns/ns-documen
tation.html. 
[5]  J. Lemon, 2002, “Resisting SYN flood 
DoS attacks with a SYN cache”. In 
Proceedings of the BSDCon 2002 
Conference. 
http://citeseer.ist.psu.edu/lemon02resistin
g.html 
[6] L. Limwiwatkul, A. Rungsawang, 2004, 
“Distributed denial of service detection 
using TCP/IP header and  
[7] Roesch, Martin, 1999, "Snort - 
Lightweight Intrusion Detection for 
Networks", Proc. USENIX Lisa '99, 
Seattle: Nov. 7-12. 
[8]  Hardaker, W. et al. Justification and 
Requirements for a National DDoS 
Defense Technology Evaluation Facility. 
Network Associates Laboratories Report 
02-052, July 26, 2002 
[9] S. Zhang and P. Dasgupta, 2003, 
“Denying denial-of service attacks: a 
router based solution.” International 
Conference on Internet Computing. 
七、 計畫成果自評 
研究成果與原計畫是否達成預期目標 
本計畫提出一個使用入侵偵測與流量
控制的架構，構成一可偵測攻擊系統並且當
攻擊發生時可即時啟動防禦機制來減緩攻
擊。利用流量控制模組，將攻擊的流量做限
制，將攻擊壓制在主機能夠承受的狀態下，
且還能夠正常的提供服務。本架構最大的貢
獻即在減少入侵偵測系統誤判時所造成的
傷害，因我們將入侵偵測系統所判定的攻擊
封包導向到一頻寬極低的通道。當誤判發生
時，這些封包還是有機會可到達伺服器，只
是頻寬較低。 
根據我們所建立的實驗環境以及模擬，可以
成功地將攻擊流量做減緩，保護伺服器的正
常運作。 
本研究之學術成果或應用價值 
主要發表一篇碩士論文及一篇國際會
議論文。 
 
碩士論文 
劉博瑋，Using Intrusion Detection System 
and. Traffic Control for DDoS Attack 
Mitigation. 逢甲大學資訊工程學系。 
 
國際會議論文 
Hsiang-Lun Huang, Tzong-Jye Liu, Kuong- 
Ho Chen, Chyi-Ren Dow, Lih-Chyau Wuu, "A 
Polymorphic Shellcode Detection Mechanism 
in the Network," Proceedings of The Second 
International Conference on Scalable 
Information Systems, Jun. 2007. Suzhou, 
China. 
 
 
本次大會安排一個邀請演講議題：由 Professor Jiawei Han 所主講的” Warehousing and 
Mining Massive RFID Data Sets”。這一個演講主題主要在介紹 RFID 最新的研究成果和未來的
應用前景，演講中 Professor Jiawei Han 並指出 RFID 這一個研究領域可以進一步研究探索的
多個方向，讓與會者可以得知 RFID 相關的最新研究議題與發展趨勢。而本次會議分三天舉
行，總共分 18 個 Technical Sessions 來進行。 
本次國際會議聚集世界各地從事有關可延展性議題的各方面研究，例如格網計算、平行
與分散式處理技術、點對點網路傳輸與其他相關網路應用研究。相關專家學者齊聚於一堂，
共同切磋，並交換各類議題的研究心得以及最新知識。此次的國際會議理論與實務並重。這
次研討會的討論議題包括了各種新的技術、觀念或是應用等。經由與會學者的報告與討論，
可得知現在世界各地學者所研究的方向及趨勢。對於我自己或是陪同前往的學生皆有莫大的
助益。因此，建議學校能夠多多鼓勵學生參與國際研討會並上台報告。這樣不只能夠培養學
生的國際觀，增加學生的英文報告能力，對於學校在國際舞台上的地位也十分重要。 
參與本次的國際會議，攜回資料名稱及內容如下: Proceedings of The Second International 
Conference on Scalable Information Systems。 
三、與會照片 
 
與學生在會場合影 
modified. RAD is also operated on the compile-time. So, pro-
grammers do not modify the source code; they just have to re-
compile the source code. 
2.2 Network-based Solutions 
Network-based solutions are mostly signature-based. Signature-
based network intrusion detection system (NIDS) detects attacks 
by comparing the packet strings with a signature database that 
describes the known attacks. If a sequence of bytes match the 
signature, an alert is generate. 
Buttercup [23] is a network-based solution. It attempts to detect 
polymorphic buffer overflow attacks by identifying the ranges of 
the possible return addresses for existing buffer overflow vulner-
abilities. 
Some existing detecting mechanisms focus on detecting sled 
component. A sled is a string of bytes that are either NOP instruc-
tions or NOP-equivalents instructions. Toth and Kruegel proposed 
the Abstract Payload Execution (APE) [27] method and P. Akriti-
dis et al. proposed the STRIDE [2]. These methods rely on disas-
sembling the IA-32 CPU instructions to check the existence of a 
NOPs sled or a NOP-equivalents sled. 
In addition, some approaches employed emulation technique to 
detect the buffer overflows attacks. For example, Michalis Poly-
chronakis et al. [24] describe a network-level polymorphic shell-
code detection engine by emulating general IA-32 CPU instruc-
tions to run the shellcode. This method is to set a payload reads 
threshold (PRT) to check if the number of memory accessing is 
greater than PRT or not. 
In [4], [5], [6], the authors proposed the network-based code in-
jection attacks by using sandboxing technique. This method traces 
the system call by using ptarce and Detours on Linux and Win-
dows respectively to detect if the packets have the buffer overflow 
attacks or not. 
3. BACKGROUND OF BUFFER 
OVERFLOW ATTACK 
This section discusses the technique to cause the stack buffer 
overflow attacks and the layout of the shellcode. We also discuss 
the techniques to evade the intrusion detection system. 
3.1 The Concept of Stack Buffer Overflow 
Attacks 
If a programmer declares a buffer and accesses it without check-
ing its boundary, a bug is generated such that attackers can exploit 
it to attack and change the normal execution flow to execute at-
tackers’ code. Shown in Figure 1 are the memory maps that are 
before and after the attack. 
Since programmers did not check the boundary of the buffer, at-
tackers can inject code into the buffer. Since the size of the inject-
ing code is larger than the buffer size, overflow is guaranteed to 
be caused, and injected code will overwrite local variables in 
higher memory addresses that contain the stack pointer frame and 
the return address which, if modified, will change the normal 
execution. Since the return address will be pop to change the pro-
gram counter register after the function call is finished, the pro-
gram counter will point to the address that is overwritten by the 
attacker. This attack is called the Buffer Overflow Attack. A tuto-
rial for the buffer overflow attacks was provided by Aleph One 
[3]. 
argument 2
argument 1
return address
SPF
local variables 
vulnerable 
buffer 
argument 2
argument 1
return address
SPF
local variables 
vulnerable 
buffer 
after 
attacking
low memory 
address
high memory 
address
attack code
Before buffer overflow attack After buffer overflow attack  
Figure 1.  Memory maps of buffer overflow attack. 
3.2 The Architecture of Attack Codes 
Figure 1 is the actions that attackers want to perform after attack-
ing. An attack code attempts to spawn a shell (hereby called shell-
code) to gain the complete control of the target system. Attackers 
can construct a shellcode to perform arbitrary actions under the 
privileges of the buggy service. Figure 2 shows the layout of 
shellcode. Although the location of the code injection, relative to 
the start of the vulnerable buffer, is known to the attackers, it is 
only approximately known because the location varies between 
systems, even for identical executable programs. So attackers 
need to place a sequence of NOP (no-operation) instructions to 
increase the probability of the execution of the shellcode. This 
sequence is usually called a sled. The length of a sled is usually 
ranged around a few hundred bytes. 
address of attack codeshellcodesled
low memory address high memory address
 
Figure 2. The layout of shellcode. 
After the overwritten return address is popped, if attackers do not 
place the sled, the probability of error is very high because the 
overwritten return address is unable to jump to the accurate loca-
tion to execute the shellcode. If attackers append the shellcode 
fragment to the sled, the overwritten return address may jump to 
execute NOP instruction. After executing a sequence of NOP 
instructions, the program counter will go to the start of shellcode 
and then perform the actions of attacks. We will describe tech-
niques for sled component in the following subsection. 
to exploit some function that terminates until encountering a ter-
minating character such as strcpy, strcat, strncpy, strncat, etc. 
Therefore, shellcode cannot contain terminating character. It is 
because that the null-termination byte make the shellcode cannot 
completely send to vulnerable program. Second, the plain shell-
code may be detected by intrusion detection system. 
Experienced attackers may use some tricks to solve the challenges 
of shellcode. Most popular ways are to encrypt the shellcode. It is 
called the Polymorphic Shellcode. Attackers can select one value 
and use this value to exclusive-or (XOR) each byte of shellcode to 
eliminate the null-termination byte or encrypt the shellcode. 
Therefore, using this way can cause NIDS obfuscate because the 
pattern of the malicious code are encrypted. 
Figure 5 shows an example of polymorphic shellcode. Line 0005 
and line 0007 are FPU instructions. When line 0007 is executed, 
the FPU instructions pointer will be saved and this pointer points 
to the last FPU instruction before fsetenv/fnsetenv [18] instruction. 
This pointer stores the value 0005 after executing fnsetenv in-
struction. A series of actions in Figure 5 are to get the program 
counter to be the base address to relocate address. The detail is 
discussed in “History and Advances in Windows Shellcode＂ [26]. 
0000    33 C9                             xor ecx,ecx
0002    83 E9 DD                       sub         ecx,0FFFFFFDDh 
0005    D9 EE                            fldz
0007    D9 74 24 F4                   fnstenv [esp-0Ch] 
000B    5B                                  pop         ebx
000C    81 73 13 F1 F1 59 06    xor dword ptr [ebx+13h],659F1F1h 
0013     83 EB FC                       sub         ebx,0FFFFFFFCh 
0016     E2 F4                             loop        000C 
0018
． ． ． < encoded payload >  
Figure 5. An example of decrypt part of shellcode. 
4. THE PROPOSED APPROACH 
The proposed approach detects the malicious code in packet 
streams by attempting to execute the network packets in a virtual 
environment, in which executable codes, if any, would be detected. 
There are many kinds of virtual environment, e.g., Xen [29], 
QEMU [25], Bochs [7], and VMware [28], which are standalone 
virtual machine environment. In this paper, we develop a simple 
emulator to emulate some general IA-32 CPU instructions. This 
way, malicious codes can be executed safely on the detector and 
do not affect the target operating system. Figure 6 shows the pro-
posed detection algorithm. 
01 for ( pos = Buf_Start ; pos < Buf_Len; pos++ )
02 {
03 reset_register( );
04 Init( );
05 ExecutedCount = 0;
06 for ( IP = pos ; IP < Buf_Len && ExecutedCount < 2048; IP += Len )
07 {
08 Len = Disasm_and_Emulate( buf [ IP ] );
09 if ( CodeReuse && MemoryAccess && ExecutedCount >= 5 )
10 return TRUE;
11 else if ( MemoryAccessViolation )
12 {
13 ExecutedCount = 0;
14 break;
15 }
16 }
17 }
18 return FALSE;  
Figure 6. Pseudo-code for the detection algorithm. 
Since register spring technique was presented by dark spyrit [16], 
the solutions that detect sled component may be bypassed. As the 
polymorphic engines are gaining their popularities, here the pri-
mary focus is on the detection of polymorphic shellcode. We aim 
at decrypt component of shellcode to analyze its behavior. 
Network packet streams are sequences of hexadecimal signs 
which cannot be intuitively distinguished between data and code; 
since the entry of shellcode is unknown, the system will emulate 
the instruction from the start of buffer. Line 1 in Figure 6 is a loop 
to select a position to be the entry of shellcode. In first loop, the 
reset_register function is to assign the negative one to all general-
purpose registers. The Init function is to initiate all state of the 
virtual process. Line 2 is the second loop to perform a series of 
actions of fetching, decoding and emulating. The Dis-
asm_and_Emulate function in line 8 is implemented to disassem-
ble and emulate the packet stream. It will return the length of cur-
rent instruction. Emulator will break and shift to next byte from 
original entry to be a new entry and fetch and decode instructions 
from new entry again if hex signs are data instead of code because 
hex signs that are data may cause memory access violation. The 
MemoryAccessViolation is set nonzero if it execute from a wrong 
entry. Therefore, we shift each byte to be the entry of shellcode 
could find the correct entry accurately if the network stream con-
tains the polymorphic shellcode. 
The layout of polymorphic shellcode is to place a decoder before 
the shellcode. The decoder decrypts the encoded shellcode. There 
are two signatures in decryption process. First, in order to decrypt 
the encoded shellcode, the decoder will execute the same code 
repetitively, called code reuse. Second, the decoder will access 
memory in decryption process. Therefore, we get these two signa-
tures to be detection condition. 
In Disasm_and_Emulate function, we emulate IA-32 instructions 
to execute the contents of the received packet streams. Code that 
is written by attackers can be executed correctly. In contrast, data 
cannot disassemble and will get error when it executes. So, we 
will check if the behavior of code is a code reuse or not. The pro-
posed system will alert an alarm if the detector detects a code 
reuse or a loop behavior. 
However, common data maybe has the code reuse behavior as 
same as the real code. So, we set a threshold to decrease false 
positive. The threshold is the counter of continuous executable 
instructions. The minimal number of executable decryption in-
structions is 7 in Figure 7. 
 
Figure 7. Numbers of executed decryption instructions of 
each encryption engines. 
 
Figure 9. The performance of the detection algorithm. 
6. CONCLUSION 
The proposed system focuses on polymorphic shellcode. The pro-
posed system detects the shellcode before executing actual pay-
load. Currently, the proposed system cannot detect plain shellcode 
because it may uses some techniques to get address of system 
dynamic link library or call system API address directly. The pro-
posed system is a network-based solution. It cannot get the operat-
ing system information. 
In addition, the performance is not good due to shift each byte to 
check whether contain the polymorphic shellcode or not. Al-
though most shellcode has no terminating character, the shellcode 
contains the terminating character in special case. In order to de-
tect all types of shellcode, we need to survey and find the signa-
ture to increase performance. We will combine the network intru-
sion detection system with our algorithm to detect real network 
data. 
In this system, we propose a network-based solution to analyze 
the behavior of polymorphic shellcode. The proposed detection 
algorithm is simple and clear. It detects accurately whether con-
tain the shellcode or not. In addition, we can solve the problems of 
self-modify that bypass some previous solutions. 
7. REFERENCES 
[1] Advances in Exploit Technology. Go online to 
http://www.metasploit.com/confs/core05/core05_metasploit.
pdf, 2005. 
[2] Akritidis, P., Markatos, E. P., Polychronakis, M., and 
Anagnostakis, K. G. Stride: Polymorphic sled detection 
through instruction sequence analysis. In 20th IFIP 
International Information Security Conference. 
[3] Aleph One. Smashing the stack for fun and profit. Phrack 
Magazine, vol. 14, no. 49, Go online to 
http://www.phrack.org/archives/49/P49-14, Nov. 1996. 
[4] Andersson, S., Clark, A., and Mohay, G. Network based 
buffer overflow detection by exploit code analysis. In 
Proceedings of AusCERT Asia Pacific Information 
Technology Security Conference (AusCERT2004): R&D 
Stream, Gold Coast, Australia, 2004. University of 
Queensland. ISBN: 1-86499-774-5. 
[5] Andersson, S., Clark, A., and Mohay, G. Detecting network-
based obfuscated code injection attacks using sandboxing. In 
Proceedings of AusCERT Asia Pacific Information 
Technology Security Conference (AusCERT2005): Refereed 
R&D Stream, Gold Coast, Australia, 2005. University of 
Queensland. ISBN: 1-86499-799-0. 
[6] Andersson, S., Clark, A., Mohay, G., Schatz, B., and 
Zimmermann, J. A framework for detecting network-based 
code injection attacks targeting Windows and UNIX. In 
Proceedings of the 21st Computer Security Applications 
Conference, Dec. 2005. 
[7] Bochs: the Open Source IA-32 Emulation Project (Home 
Page). Go online to http://bochs.sourceforge.net/. 
[8] CERT Coordination Center. CERT Incident Note IN-2001-
08 Code Red Worm Exploiting Buffer Overflow in IIS 
Indexing Service DLL. Go online to 
http://www.cert.org/incident_notes/IN-2001-08.html, June 
2001. 
[9] CERT Coordination Center. CERT Coordination Center 
Advisories for 2002. Go online to 
http://www.cert.org/advisories/#2002, 2002. 
[10] CERT Coordination Center. CERT Coordination Center 
Advisories for 2003. Go online to 
http://www.cert.org/advisories/#2003, 2003. 
[11] CERT Coordination Center. CERT Advisory CA-2003-20 
W32/Blaster worm. Go online to 
http://www.cert.org/advisories/CA-2003-20.html, Aug. 2003. 
[12] Chiueh, T. C. and Hsu, F. H. RAD: a compile-time solution 
to buffer overflow attacks. In Proceedings of the 21st 
International Conference on Distributed Computing Systems, 
pp. 409-417,  Apr. 2001. 
[13] Cowan, C., Pu, C., Maier, D., Walpole, J., Bakke, P., Beattie, 
S., Grier, A., Wagle, P., Zhang, Q., and Hinton, H. 
StackGuard: Automatic Adaptive Detection and Prevention 
of Buffer-Overflow Attacks. In Proceedings of the 7th 
USENIX Security Conference, San Antonio, Texas, pp. 63–
78, Jan. 1998. 
[14] Cowan, C., Beattie, S., Johansen, J., and Wagle., P. 
PointGuardTM: Protecting pointers from buffer overflow 
vulnerabilities. In Proceedings of the 12th Usenix Security 
Symposium, Aug. 2003. 
[15] Crandall, J. R., Wu, S. F., and Chong, F. T. Experiences 
using Minos as a tool for capturing and analyzing novel 
worms for unknown vulnerabilities. In Proceedings of GI 
SIG SIDAR Conference on Detection of Intrusion and 
Malware and Vulnerability Assessment (DIMVA), 2005. 
[16] Dark spyrit AKA Barnaby Jack. Win32 Buffer Overflows. 
Go online to http://www.phrack.org/archives/55/P55-15, Sept. 
1999. 
[17] F-Secure Corporation. F-Secure Virus Descriptions: Sasser. 
Go online to http://www.f-secure.com/v-descs/sasser.shtml, 
May 2004. 
[18] Intel® 64 and IA-32 Architectures Software Developer's 
Manuals vol. 1-3. Go online to 
http://www.intel.com/products/processor/manuals/index.htm. 
[19] K2. ADMmutate. Go online to 
http://www.ktwo.ca/ADMmutate-0.8.4.tar.gz. 
[20] Metasploit project. Go online to http://www.metasploit.com/. 
