 1
行政院國家科學委員會補助專題研究計畫期末報告 
 
連續播放式多媒體呈現的物件排程最佳化 
 
 
計畫類別：個別型計畫   
計畫編號：NSC 96-2221-E-260-020-MY3 
執行期間： 2007/08/01 ~ 2010/07/31 
 
計畫主持人： 洪政欣 
共同主持人： 
計畫參與人員：林鋒正，賴建穎，呂承諭，陳昱叡 
 
 
成果報告類型(依經費核定清單規定繳交)：期末完整報告   
 
本成果報告包括以下應繳交之附件： 
□赴國外出差或研習心得報告一份 
□赴大陸地區出差或研習心得報告一份 
■出席國際學術會議心得報告及發表之論文各一份 
□國際合作研究計畫國外研究報告書一份 
 
 
處理方式：公開查詢 
                    
 3
buffer-constrained problems, (3) branch and bound solutions for buffer and due-date constrained 
problems. In addition, a web-based platform has been implemented. The platform incorporates 
the scheduling algorithms developed to order the sequence of multimedia objects in response to 
user queries to multimedia digital libraries. 
 
研究目的 
理想上而言，如果能夠以較為自動化的機制可以挑選典藏物件加以組合成一個超媒體展
示，數位圖書館/博物館的展示將可以相對多量的生產，同時也可以依據使用者偏好及環境
設定來做到 adaptive 的展示。超媒體展示的方式十分多樣化，不同的使用偏好及環境可能
使用到不同的展示方法，一般的數位博物館是將由資料庫擷取的多媒體物件排列在一頁，
再由使用者一一挑選有興趣的物件來瀏覽，這種方式較不適用在使用類似 PDA 或無限上網
手機的環境中，我們的興趣則是在產生 sequential 的方式來連續播放擷取的多媒體物件(類
似電視播放的方式 TV-like Presentation)，藉由自動依序播放媒體物件的方式，免除了使用
者一再重複下載與播放的動作。但如何排出最佳的 sequence 牽涉到諸多因素包括媒體物件
相關性(由 metadata 而來)及媒體物件相對種要程度，同時在慢速網路環境下，不同的順序
往往也會造成不同的使用者等待時間 (Presentation Latency)，爲減少使用者的等候時間，
Server 端必須有能力來決定一個好的排程的順序，將使用者們所需要的媒體物件有效率的
一一傳到不同使用者端媒體播放上。為了減少使用者端的播放延遲問題，預載機制(prefetch)
是常用的方法。本計畫的主要目的就在探討在各類限制與真實需求之下，利用 Prefetch 機
制時，媒體傳輸及播放順序的最佳化技術。 
 
研究方法與現有結果討論 
暫且撇開網路層的一些細部資料流量變異量不談，多媒體資料的呈現排程多半牽扯到以下
兩個重要因素: 1.server 端的資料傳輸時間， 2. 使用者端播放播放時間，這是最基本的兩
大要素。每一種媒體有他們的檔案大小與特色，有些媒體檔案小但卻需要較長的播放時間，
有些媒體檔案大但卻需要較短的播放時間。基於此點，在發表論文著作- Minimize 
Presentation Lag by Sequencing Media Objects for Auto-Assembled Presentations from Digital 
Libraries (發表在 Data and Knowledge Engineering期刊)，我們詳細分析了在各式各樣的條件
限制下，此排程問題的計算複雜度(complexity)及相關解法，也首先提出了利用 two-machine 
flow shop scheduling problem 的相關排程技術來解決其中的問題。本計畫中我們解了幾個重
要的技術問題，包括: 
 
 
 5
active的預載策略則是先預測現有物件播放完畢的時間，並提前一個時段開始預載下一個物
件，這樣將會更為縮減整體播放時間，提高較好的服務。我們目前的進度已經完成的相關
的問題複雜度的分析並提出一個簡易的 variable neighbourhood search heuristic解法成果發
表在 13th IFAC Symposium on Information Control Problems in Manufacturing研討會中。 
 
同時計畫也完成的多媒體播放平台的實做(如圖示)，將研發出的排程演算法應用的多媒體數
位資料傳輸的排序。 
 
圖：多媒體播放平台的實做，將研發出的排程演算法應用的多媒體數位資料傳輸的排序 
 
計畫成果自評 
本計畫的研究進展順利且成果豐碩，截至目前為止已有下列三篇期刊論文及兩篇國際研討
會論文被接受發表，有一篇期刊論文在審稿階段。所發展的排程演算法包括 optimal solutions 
for buffer and precedence constrained problems, Heuristic sub-optimal solutions for 
buffer-constrained problems, Optimal solutions for buffer and due-dates constrained problems ，
也實作在多媒體傳輸平台中，以實驗證明了計畫所發展理論的正確性。整體而言計畫的成
果完全符合計畫書內容。 
 
 
Minimize presentation lag by sequencing media objects for
auto-assembled presentations from digital libraries
Feng-Cheng Lin, Chien-Yin Lai, Jen-Shin Hong *
Department of Computer Science and Information Engineering, National ChiNan University, Taiwan
a r t i c l e i n f o
Article history:
Received 20 September 2007
Received in revised form 27 March 2008
Accepted 22 April 2008
Available online 22 May 2008
Keywords:
Multimedia scheduling
Presentation lag
Auto-assembled presentation
Digital libraries
Sequence optimization
a b s t r a c t
When delivering and presenting a multimedia document through a high-delay network,
presentation lag is a major and critical factor affecting the service quality of the presenta-
tion. A dynamically generated multimedia document from a digital library often includes
sets of both unconstrained objects and temporally-constrained objects. The order of the
objects in a prefetch-enabled presentation environment has an impact on the overall pre-
sentation lag. This study explores techniques for optimizing the object sequence for an
auto-assembled multimedia presentation to minimize the overall presentation lag. We
adapt techniques developed in conventional two-machine ﬂowshop research for comput-
ing or approximating the optimal sequences. We extensively discuss a variety of settings
for commonly found applications with auto-assembled multimedia presentations. For each
problem setting, the formulation and solutions were explored. We implemented a proto-
type system with which a number of problems have been evaluated. The numerical simu-
lations and real-life experiments with 3G wireless networks show clearly that a computed
optimal or near-optimal sequence signiﬁcantly reduces the presentation lag as compared
to random sequences.
 2008 Elsevier B.V. All rights reserved.
1. Introduction
For years there has been much interest in automatically composing multimedia presentations from digital repositories. In
particular, given the proliferation of communication and multimedia technologies, a signiﬁcant example application is the
automatic construction of customized multimedia news programs [72]. It is expected that in the future one important news
delivery paradigm will be to allow personalized on-demand news programs, streaming at the time of the user’s choice, and
with content that speciﬁcally matches the user’s interests. In such a scenario, the multimedia news program must be com-
posed automatically from daily news archives based on the user’s proﬁles. Other applications requiring auto-assembled mul-
timedia presentations include query result presentations from a typical multimedia database, adaptive educational lectures,
personalized TV-program delivery services, and many others [38,39,72,78,84,101,113].
Auto-assembled multimedia presentations ﬁt particular well with applications using a portable device as the client de-
vice. With better processing power, portable computing devices, such as pocket PCs, organizers, cell phones, etc., are becom-
ing more multimedia compatible. There is a demand to deliver multimedia information to such portable devices. For
example, various standardized protocols such as Multimedia Messaging Service (MMS) have been proposed to send/receive
multimedia messages with mobile devices. A subset of the W3C SMIL has been proposed for use in the MMS player (i.e.,
‘‘SMIL in MMS”, http://www.w3.org/AudioVideo/). MMS can be used by companies to send MMS messages (e.g., weather
reports, news, sport bulletins, marketing clips, etc.) to subscribers. In addition, many commercial media players (e.g., light
0169-023X/$ - see front matter  2008 Elsevier B.V. All rights reserved.
doi:10.1016/j.datak.2008.04.010
* Corresponding author. Tel.: +886 49 2915225.
E-mail address: jshong@ncnu.edu.tw (J.-S. Hong).
Data & Knowledge Engineering 66 (2008) 382–401
Appendix 1
Author's personal copy
developed in past decades for optimizing certain manufacturing processes. Different problem settings for online multimedia
applications were mapped to potential ﬂowshop scheduling problem counterparts. A prototype system was implemented to
evaluate the performance of the proposed techniques.
This paper is organized as follows. Section 2 contains an extensive review of research related to various aspects of the
issues discussed in this study. In Section 3, we illustrate the use of techniques developed in ﬂowshop scheduling studies
for solving the unconstrained problem. Section 4 discusses different problem settings for applications with various con-
straints. Section 5 presents a prototype implementation for a playback system incorporating certain scheduling strategies
developed in this paper. Numerical simulations and real-life experiments using wireless networks will be presented. Finally,
Section 6 concludes the study and provides future research directions.
2. Background and related work
A multimedia document for a presentation includes various temporal relations among the media objects. To present a set
of media objects in a coordinated way, it is essential that these temporal constraints be considered. The following ﬁrst brieﬂy
reviews various common temporal constraints in auto-assembled multimedia presentations. Conventional methodologies
for automatic temporal formatting will then be discussed. We are interested in investigating whether existing approaches
ﬁt well with real-life applications using auto-assembled presentations delivered through bandwidth-limited communication
channels.
2.1. Common temporal constraints for auto-assembled presentations
Many models for representing temporal speciﬁcations for multimedia presentations have been proposed. The most com-
mon of these include hard timing relationship-based, interval-based, control ﬂow-based, state-based, and point-based ap-
proaches [13,16]. While manually programmed presentations usually have detailed temporal relations between objects
(for example, object A should be presented at least 10 s after the completion of object B), the temporal relations associated
with auto-assembled presentations are limited. Previous studies on automatic presentation assembly considered only
coarse-grained interval-based temporal relations between objects. For example, Hakkoymaz et al. [39] considered sequential,
parallel, split, andmerge constraints among objects, with an upper bound on the presentation time serving as the document-
level global constraint. Celentano and Gaggi [18] considered sequential, parallel, end with, replaced by, and have priority over.
Mulhem and Martin [78] considered sequential, parallel, seq-meet, par-start, par-ﬁnish, and par-during. These existing models
are mainly based on interval-based temporal relations [4,70,18] for expressing time information. These studies assumed that
the temporal relations were annotated a priori, by either manual annotation or certain automatic techniques. In real-life
applications, a question to ask is how these temporal relations can be annotated in large-scale digital libraries. In scenarios
where it is necessary for a human to annotate the media objects piece by piece, the provision of temporal constraints is costly
since the desired presentation style is typically not the major concern of most content experts at the data entry stage.
Other than annotating the inter-object temporal relations manually, a more conceivable approach for assigning the inter-
object temporal constraints in an auto-assembled presentation is to automatically map certain structure/semantic attributes
of the objects into corresponding coarse-grained presentation constraints (e.g. [69,100,101,84]). Such methodologies can be
used to automatically specify the inter-object temporal relations so that the ﬁnal presentation is more semantically coher-
ent. With such approaches, the variety and granularity of the inter-object temporal relations are strongly contingent on the
available metadata of the objects in a digital library and thereby are often limited, as compared to that in a typical manually
programmedmultimedia presentation. In such a context, the commonly found temporal relations can be classiﬁed into three
categories: (1) concurrency constraints, (2) contiguity constraints, and (3) precedence constraints. The concurrency and con-
tiguity constraints are widely considered in conventional multimedia temporal formatting studies. The contiguity and pre-
cedence constraints are two different ways of sequentially ordering two objects. The precedence constraint plays a
prominent part in auto-assembled multimedia presentations in which the temporal constraints are established based on
the semantic/structured attributes of objects. For example, in an educational lecture video of a math course, a video object
illustrating the ‘‘proof” of a theorem must be preceded (but not necessarily immediately) by the video deﬁning the theorem
itself. In such a case, other objects (such as application examples or historical remarks about the theorem) are allowed to be
present between the two objects. We refer to this kind of temporal relation as a ‘‘precedence constraint” (here we adopt the
terminology used in the conventional scheduling research community [14]). We will elaborate on these temporal constraints
in the following. Beyond the above three categories of temporal constraints, an auto-assembled presentation often includes a
bag of unconstrained objects in which no temporal relations are speciﬁed.
2.1.1. Concurrency constraints
A concurrency constraint requires that two objects be presented in parallel. Their exact positions in the presentation
timeline overlap. The equal and co-start in Allen’s work [4] belongs to this category. A previous study [106] shows that hu-
man perception of media synchronization is rather sensitive. For example, a skew in audio and video playout beyond 160 ms
or a skew for pointer synchronization beyond 1250 ms is considered annoying to humans. Therefore, objects related to each
384 F.-C. Lin et al. / Data & Knowledge Engineering 66 (2008) 382–401
Author's personal copy
studies is to search for a consistent schedule with which the temporal constraints are satisﬁed. Our study instead intends to
further consider unconstrained objects and precedence-constrained objects in the optimization process. Our goal is to ﬁnd an
optimal schedule, which satisﬁes the temporal constraints, for online objects in a high-delay network environment, in order
to minimize the total presentation lag.
2.2.1.2. Issue of transmission delay. Most existing general temporal formatter techniques are applicable to scenarios where
the media objects and the player reside on a single machine. Transmission delay for retrieving the objects was not considered
in the scheduling process. Layaïda et al. [62] proposed a solution to deal with uncertain durations (which might be caused by
a slight transmission delay) in synchronized multimedia presentations. Our work explores the optimization techniques for
the ordering of media objects that reside on a remote server in environments where the end-to-end bandwidth between the
server and the client-side player is rather limited, which often causes a signiﬁcant transmission delay. In such a case, min-
imization of the presentation lag is one of the major concerns for providing satisfactory QoS. In Buchanan and Zellweger [16],
the media delay of an object is considered to be a unpredictable behavior, which is managed in the ‘‘run-time scheduler”. In
the literature, various run-time strategies, such as playback suspension/blocking, presentation rate or duration alteration,
packet dropping, repeating frames, or showing only key frames, have been proposed to lessen possible out-of-sync condi-
tions in a presentation involving objects with concurrency constraints [105,89,15,58,65]. However, for cases where the
end-to-end available network is considerably limited, the presentation is often chopped into a sequence of disrupted seg-
ments with high presentation lag. How to minimize the total presentation lag in such a case was not addressed in these
studies.
2.2.2. Prefetch techniques
One common approach to coping with the transmission delay is the use of prefetch techniques [17,96,49,10,53–
57,97,98,114,45,6,21]. Prefetch techniques transmit objects before their presentation time arrives. A prefetch plan is required
to coordinate the preloading of the objects. The major focus of these existing studies on prefetch techniques was to ﬁnd a
feasible prefetch plan to lessen the out-of-sync situations for a multimedia document where the object ordering is pre-deter-
mined. In an auto-assembled multimedia presentation, the object ordering is however not completely pre-determined. For
scenarios where the network bandwidth is very limited, even a ‘‘best-effort” prefetch strategy may fail to prevent the pre-
sentation lag for a given presentation. Our work focuses on techniques for ﬁnding an optimal solution for the ordering of
objects in a prefetch-enabled setting, in order to minimize the total presentation lag.
To sum up, in Table 1, we list the main differences between our study and existing related studies. The objective of our
work is to ﬁnd the best ordering of the media objects to minimize the total presentation lag for an auto-assembled presen-
tation delivered through a high-delay network. At run-time, the prefetching is considered to be performed in a best-effort
manner. We attempt to answer the question: ‘‘Given a set of unconstrained objects and temporally-constrained objects with
concurrency, contiguity, and/or precedence constraints, what is the best ordering of objects to ensure that the total presen-
tation lag perceived in a client is minimized?” To accomplish this, we adapted techniques from two-machine ﬂowshop
scheduling research on optimizing certain manufacture processes. The study by Allahverdi and Al-Anzi [1] also applied
two-machine ﬂowshop scheduling techniques for multimedia object scheduling problems. The aim is to schedule the data-
base access for a set of objects with pre-determined concurrency and/or contiguity constraints so as to avoid an out-of-syn-
chronization state. In their study, no consideration was given to unconstrained objects. In addition, they assumed that the
end-to-end delay was solely attributable to the database processing time. In contrast, our study assumes that the data down-
load time dominates the end-to-end delay.
In the following section, we ﬁrst investigate a sample case where only unconstrained objects are to be ordered. The case is
used to illustrate the process for mapping the addressed problem into the corresponding two-machine ﬂowshop problem.
3. Unconstrained sequence optimization using Johnson’s rule
In this demonstration case, we assumed that the end-to-end bandwidth was constant. In addition, we did not take into
account the buffer limitation in the client for caching the prefetched media objects. We introduce the following notations
that will be referenced in the problem formulations throughout the paper (refer to Fig. 2).
Notation
M = {m1,m2, . . . ,mn} a set with n media objects
mi a media objects in M
S a sequence of a media set
SM a sequence of M
ai download time of mi
bi playback time of mi
Ci completion time (ﬂow time) of the playback of mi
idlei playback idle time for a media object mi
Cmax maximum completion time of a sequence SM (makespan)
di due date of object mi
386 F.-C. Lin et al. / Data & Knowledge Engineering 66 (2008) 382–401
Author's personal copy
First, we partition the media objects inM into two sets. Let A be the set of objects with aj 6 bj (i.e., transmission time smal-
ler than playback time), and B be the set of objects with aj > bj. Johnson’s rule is to ﬁrst order all the media objects in set A by
non-decreasing aj values, and then all the objects in set B by non-increasing bj values. Table 3 illustrates in detail the pro-
cedure of Johnson’s rule using an example case with ﬁve media objects to be ordered.
In the evaluation section, we will present real-life experiments to compare the playback idle rates between an optimal
sequence by Johnson’s rule and randomly generated sequences. Overall, the results showed that a signiﬁcant reduction in
presentation lag could be achieved if the media ordering in a multimedia document was optimized. While Johnson’s rule
can be directly applied in unconstrained problems, there are many other scenarios with different constraints that require
more sophisticated algorithms to compute or approximate the optimal sequences. Much research has been devoted to
the use of complexity theory to classify a scheduling problem as ‘‘polynomially solvable” or ‘‘NP-hard”. Two-machine ﬂow-
shop problems with different constraints are in general NP-hard [64,14]; for details of the complexity theory, refer to the
books by Garey and Johnson [28], and Papadimitriou [85]. In the following section, we discuss a number of common scenar-
ios for applications using auto-assembled multimedia presentations. The possible mapping of each problem to correspond-
ing two-machine ﬂowshop counterparts will be discussed.
4. Constrained sequence optimization
This section discusses various common constraints in online multimedia applications, including inter-object temporal
relations, object priorities, object due dates, and client-side buffer limitations. To standardize the terminologies and anno-
tations used to describe the problem settings, we use the classiﬁcation scheme for ﬂowshop scheduling problems proposed
by Lawler et al. [61]. This scheme allows the presentation of a wide spectrum of two-machine ﬂowshop problems under the
notation ‘‘F2jbjc” where F2 refers to a two-machine ﬂowshop problem; b refers to the characteristics of the jobs; and c refers
to the optimality criterion of the problem, such as makespan, total tardiness, or total ﬂowtime. The following ﬁrst elaborates
on a subset of ﬂowshop problems with different job characteristics and optimality criteria that are relevant to the multime-
dia applications addressed in this study.
(a) Job characteristics (b): In a manufacturing process, a job in a ﬂowshop scheduling problem may often be given with
certain pre-determined characteristics, such as release dates, due dates, precedence constraints, and grouping. When jobs
are subjected to certain release dates before which they cannot be started, the string ‘‘ri” is added to b. When jobs are
subject to certain due date constraints before which they must be completed, the string ‘‘di” is added. When jobs are sub-
ject to certain precedence constraints, the string ‘‘prec” is added. Depending on the ﬁnal constraint graph structure, the
precedence constraint can be further classiﬁed into ‘‘chain”, ‘‘tree”, or ‘‘prec”, meaning that the precedence graph is a
chain, a tree, or an arbitrary graph. In some two-machine ﬂowshop problems, the start-time lag and stop-time lag of a
job are enforced (e.g., [73]). In such cases, a job may not be started or completed on machine two until at least a certain
time has elapsed since starting (completing) the job on machine-one.
(b) Optimality criterion (c): In ﬂowshop scheduling problems, Ci denotes the completion time of the job Ji; di denotes the
due date of a job. The tardiness of the job Ji refers to the time past its due date di and is denoted as Ti = max{0,Ci  di}. An
Table 2
Corresponding elements between the object ordering problem and the ﬂowshop problem
Media object scheduling Two-machine ﬂowshop scheduling Notation
A set of media objects A set of jobs M
A media object A job mi
Server First machine Server
Client Second machine Client
Download time for a media object Processing time on the ﬁrst machine ai
Playback time for a media object Processing time on the second machine bi
Playback completion time Makespan Cmax
Minimization of total playback idle time Minimization of makespan
Table 3
An example for illustrating the principle of Johnson’s rule
Media object i 1 2 3 4 5
ai 13 1 5 8 100
bi 11 4 2 9 5
If ai 5 bi, mi 2 A B A B A B
If ai > bi, mi 2 B
Sorting A and B, respectively B1 A1 B3 A2 B2
A: ascending based on ai
B: descending based on bi
Final optimal sequence 2–4–1–5–3
388 F.-C. Lin et al. / Data & Knowledge Engineering 66 (2008) 382–401
Author's personal copy
4.1.1. Contiguity constraints
A contiguity constraint (i.e., the ‘‘meet” in Allen’s work [4]; case 3 in Table 4) between two objects requires that the second
object be presented consecutively to the ﬁrst with no other object in-between. Objects subject to a series of consistent con-
tiguity constraints can be concatenated as an ‘‘ordered cluster”. The counterpart two-machine ﬂowshop problem is one in
which the jobs need to be clustered into disjointed job sets. This problem was solved by Kurisu [59]. In the algorithm, each
job set is regarded as a composite object with its ‘‘equivalent” start-lag and stop-lag. The optimal sequence for ordering all
these composite objects can be computed using the algorithm developed by Mitten [73].
For a streaming-based media object, a data chunk of the size of the playout buffer can be considered as a ‘‘playback unit”
that behaves like a small object, with ai and bi given as the transmission time and playback time (Fig. 3). The entire media
object can then be considered a combination of sub-objects (i.e., the playback units) subject to a series of contiguity con-
straints (Fig. 3b; case 2 in Table 4). Each sub-object should be downloaded and presented one after the other without inter-
ruptions. Thereby, the algorithm described by Kurisu [59] can be directly applied to ﬁnd the optimal schedule. Alternatively,
if a disjointed choppy presentation is undesirable, a streaming object should be fully downloaded before its playback. In such
a case, the presentation time and download time are identical to that of a non-streaming object.
4.1.2. Concurrency constraints
A concurrency constraint (e.g., the ‘‘co-start” and ‘‘equal” in Allen’s work [4]) between two objects requires that the second
object be started and presented simultaneously with the ﬁrst. When delivering through high-delay networks, both objects
should be downloaded before their presentation to ensure synchronization. In such a case, the two constrained objects, say
mp and mq, can be considered as a composite object with an equivalent processing time given as sum{ap,aq} and max{bp,bq}
(case 4 in Table 4).
4.1.3. Precedence constraints
If two media objects, say mp and mq, are temporally related by a precedence constraint (case 5 in Table 4, denoted as
mp?mq), mp must precede mq but it is not necessary for it to be immediately next to mq. Note that there are two different
interpretations of the precedence constraint in the ﬂowshop problems [107,32]. Assuming that the job Ji precedes job Jk, in
the ﬁrst interpretation, Jk cannot be started on machine one until Ji is completed on machine two. A two-machine ﬂowshop
problem for minimizing makespan with jobs subject to such a precedence constraint has been shown to be NP-hard [64,63].
In the second interpretation, Jk cannot be started on the ﬁrst machine or the second machine unless Ji is completed on that
machine. However, Jk can start on the ﬁrst machine before Ji is completed on machine two. The precedence constraint con-
sidered in multimedia delivery/presentation applications refers to the second interpretation. By concatenating the con-
straints, the overall precedence constraints for a multimedia presentation form a general graph. The two-machine
ﬂowshop problem for minimizing makespan in applications with arbitrary precedence constraints (F2jprecjCmax) has been
proven to be NP-hard [76]. However, a number of simpliﬁed versions of the precedence constraints, as described below,
can be solved in polynomial time.
4.1.3.1. Chains-based precedence constraints. For a multimedia document where only rather sparse object precedence rela-
tions are speciﬁed, the overall precedence constraints are concatenated into a number of disjointed chains. The counterpart
problem in the two-machine ﬂowshop studies is the F2jchainsjCmax problem. This problem was solved by Kurisu [59].
4.1.3.2. Tree-based precedence constraints. This situation occurs when the precedence constrains can be concatenated into an
in-tree or out-tree. The counterpart in the two-machine ﬂowshop problem is the F2jtreejCmax problem. The F2jtreejCmax prob-
lem is actually a special case of the F2jsp-graphjCmax problem, which can be solved by polynomial-time algorithms as de-
scribed below.
4.1.3.3. sp-Graph-based precedence constraints. This situation occurs when the precedence constrains can be assembled into a
series–parallel graph (sp-graph). The counterpart in the two-machine ﬂowshop problem is the F2jsp-graphjCmax problem. A
number of polynomial-time solutions for this problem have been proposed by Monma [75], Sidney [103], Monma and Sidney
[77], and Gordon and Shafransky [33].
a a a
b b
download time
for a playback unit
b
a
b
a
b
a
b
a b
playback time
for a playback unit
playback idle time
for a playback unit
Fig. 3. (a) A streaming media object is a chain of ‘‘playback units” with contiguity constraints. (b) In a delay-prone environment, a playback idle time occurs
after the presentation of each playback unit.
390 F.-C. Lin et al. / Data & Knowledge Engineering 66 (2008) 382–401
Author's personal copy
Such a constraint is referred to in conventional scheduling research as a job due date constraint, denoted as di. There are two
major approaches to formulate this problem:
Case 1: aCmax + bTmaxThe Cmax and the maximum tardiness, given as Tmax = max{max{Ci  di,0}, for i = 0,1, . . . ,n}, are con-
sidered in the objective function to measure the optimality of a sequence. Lenstra et al. [64] proved that F2k
P
Tmax is strongly
NP-hard. Daniel and Chambers [25], Chakravarthy and Rajendran [20], and Allahverdi [3] proposed various heuristic algo-
rithms for approximating the solution of this bi-criteria problem.
Case 2: aCmax + b
P
TiThe Cmax and the total tardiness of all jobs, given as
P
Ti = sum{max{Ci  di,0}}, i = 1,2, . . . ,n, are used
in the objective function. Lenstra et al. [64] proved that F2k
P
Ti is strongly NP-hard. We found no solution in the literature for
this bi-criteria problem.
4.5. Client-side buffer constraints
When small devices, such as a PDA, are used for playback, the maximum allowed buffer size for keeping the prefetched ob-
jects needs to be considered.With respect to theplayer-side buffer constraint,wedidnotﬁnd any existingﬂowshop scheduling
studies that have addressed this problem. A few existing studies have been conducted to solve ﬂowshop problemswhere there
is a limitation on the ‘‘number of jobs” that can be allocated in the intermediate storage buffer before being sent to the nextma-
chine. For a casewithout this buffer limitation, the optimal solution can be obtained byusing Johnson’s rule. For a case inwhich
onlyone job is allowed tobekept in the intermediate storagebuffer,GilmoreandGomory [31]proposedapolynomial algorithm
for computing the optimal solution.Other than the above two cases, buffer-constrainedmachineﬂowshopproblemshave been
shown to be strongly NP-hard by Papadimitriou and Kanellakis [86]. To obtain the exact solution of this NP-hard scheduling
problemwith a ﬁnite intermediate job-number buffer, a number of strategies have been proposed [26]. In these ﬂowshop stud-
ies, the ‘‘numberof jobs” allowed tobekept in thebuffer areﬁxed throughout theprocess. In theonlinemultimedia applications
addressed in this paper, we ﬁx the ‘‘buffer size” instead of the ‘‘number of objects” allowed in the player-side buffer. For a given
buffer size, thenumberof objects allowed in thebuffer actually dependson theﬁle sizes of the current playingobjects andother
unscheduled objects. Since, under an environmentwith a constant transmission rate, the download time of an object is propor-
tional to its ﬁle size, the number of objects allowed in the buffer is actually ‘‘processing-time dependent”. We denote the ad-
dressed buffer-constrained problem by F2jai-bufferjCmax. In Lin et al. [67], we proved that the F2jai-bufferjCmax is NP-hard. We
proposed a branch andbound algorithm for the problemaswell as for the F2jai-buffer,chainjCmax problem,where a single-chain
precedence constraint is further enforced beyond the buffer constraints.
4.6. Network bandwidth variations
In the above cases, we assumed that the end-to-end transmission rate was deterministic. This assumption can be re-
garded as an acceptable approximation for applications in which the end-to-end transmission delay is mainly subject to
the last mile bottleneck without signiﬁcant bandwidth variations. However, in reality, many Internet applications only pro-
vide best-effort data delivery and cannot guarantee a rather consistent transmission rate during a presentation session. In
such cases, the stochastic variation in the network transmission rate (or the download time of a media object) should be
Table 5
Different settings for online multimedia applications with their two-machine scheduling problem counterparts
Constraints Objective
functions
Counterpart in two-machine
ﬂowshop problem
Complexity Solution and references
1 Cmax F2kCmax Polynomial
solvable
Johnson [50]
2 Chain precedence Cmax F2jchainsjCmax Polynomial
solvable
Kurisu [59]
3 sp-Graph precedence Cmax F2jsp-graphjCmax Polynomial
solvable
Sidney [103], Monma [75]
4 General graph precedence Cmax F2jprecjCmax NP-hard [75] Hariri and Potts [43], McMahon &
Lim [71]
5 Contiguity Cmax F2jseqjCmax Polynomial
solvable
Section 4.1
6 Concurrency Cmax F2jparjCmax Polynomial
solvable
Section 4.1
7 Group Cmax F2jgroupjCmax Polynomial
solvable
Baker [9]
8 sp-Graph + group Cmax F2jsp,groupjCmax Polynomial
solvable
Sekiguchi [102]
9 Buffer Cmax NA NP-hard Lin et al. [67]
10 Buffer + single chain
precedence
Cmax NA NP-hard Lin et al. [67]
11 Buffer + due dates aCmax + bTmax NA NP-hard NA
12 Buffer + due dates aCmax + b
P
Ti NA NP-hard NA
392 F.-C. Lin et al. / Data & Knowledge Engineering 66 (2008) 382–401
Author's personal copy
(1) Distributed object archives. The media object archive manages the objects and provides mechanisms for accessing the
objects based on a user’s query. Each object has metadata describing its content, ﬁle size, playback duration, and various
constraints.
(2) Bandwidth estimation module. The main function of this module is to estimate the available end-to-end bandwidth in a
presentation session. The estimated bandwidth is used to estimate the transmission time for each media object in a pre-
sentation. In the past, researchers have been tried to develop accurate end-to-end measurement algorithms for available
bandwidth (refer to [88] for a survey on different approaches). In principle, an accurate estimation of the bandwidth is
crucial to provide the exact optimal schedule for a given presentation. Nevertheless, an optimal schedule computed based
on a rough estimation of the bandwidth could still signiﬁcantly reduce the overall presentation lag as compared to ran-
dom sequences. In the initial evaluation studies, we provide results showing such a situation.
(3) Scheduling engine. The Scheduling Engine computes the optimal sequence based on the estimated bandwidth, the
given constraints, the ﬁle sizes, and playback durations of the selected media objects. Depending on the response time
requirements of the service, the ﬁnal sequence could be the optimal solution for problems with a very small number
of objects, or a computationally efﬁcient near-optimal solution when the server needs to serve a large number of clients
in real time. The ﬁnal sequence is a ‘‘playlist” that is sent to the client.
(4) Object prefetcher. Based on the playlist, the Object Prefetcher requests the media objects from the Distributed Object
Archives. For applications with a client-side buffer constraint, the presentation progress and buffer space usage detected
from the Media Presenter are used to decide the exact time to prefetch the objects.
(5) Media presenter. The major function of the Media Presenter is to integrate and continuously present the retrieved
media objects in sequence. In addition, during a presentation, it reports the playback and buffer status to the Object Pre-
fetcher. In the current web environment, there are various technologies providing prefetchable presentations that inte-
grate many modalities of media objects. The most popular ones include SMIL, Macromedia Flash, Quicktime, and Real
Player. With these players and a standard web server, a typical prefetch-enabled media presentation service can be easily
realized.
Based on the framework, this study provided a prototype system implementation for conducting real-life experiments.
The media player in the client was implemented with Adobe Flash technology (Flash Professional 8 with Actionscript
2.0). The web server was IIS 6.0 under Microsoft Server 2003 on an IBM xSeries x206m computer. The Bandwidth Estimation
Module was implemented using Javascript and C# under the ASP.NET 2.0 framework. We applied an algorithm with a naive
approach where the server sends a small ﬁle to the media player, and the player sends an acknowledgment signal once the
ﬁle is completely downloaded. The bandwidth was roughly given as the ratio of the ﬁle size to the corresponding transmis-
sion time.
The Scheduling Engine was implemented using C++ and pre-compiled into an executable application ﬁle. Once the server
obtained the information for the set of media objects and the estimated bandwidth, the server invoked the Scheduling En-
gine through the ‘‘Process component” in ASP.NET, which provides interfaces for starting and stopping a typical executive
application. From the online course management systems in our campus, we collected a number of multimedia objects of
different modalities, including video, audio, Flash-based animation, images, and text. The objects were compressed and for-
matted in a Flash-compatible format (for example, the video ﬁles were in the ﬂv format while the audio ﬁles were in the mp3
format). The maximum size of the objects was below 5 MB. Each object was annotated with the anticipated presentation
time. The objects were deposited and managed in a database of Microsoft SQL Server 2000.
In the following we report a number of numerical simulations and real-life experiments with wireless network environ-
ments for a number of different problem settings. Section 5.1 discusses a case where only unconstrained objects were in the
presentation. Section 5.2 discusses problems with precedence and buffer constraints. Finally, Section 5.3 discusses the buf-
fer-constrained problems with a network with certain bandwidth ﬂuctuations.
Fig. 5. Average playback idle rates of presentations with random sequences and Johnson’s sequences for problems without constraints. Each data set
contains 10 media objects.
394 F.-C. Lin et al. / Data & Knowledge Engineering 66 (2008) 382–401
Author's personal copy
5.2. Problems with precedence and buffer constraints
In Lin et al. [67], we developed a branch-and-bound algorithm for searching for the optimal sequence. This section pre-
sents experiments using numerical simulations, as well as real-life experiments with 3G wireless network environments, to
evaluate the effectiveness and efﬁciency of the proposed branch and bound algorithm. In the numerical simulations, for each
data set, the download and presentation times of each media object were randomly generated from the uniform interval
[1,100]. Such a problem generation procedure yields test problems encompassing a wide variety of the formats used for
the real-life multimedia objects transmitted over the Internet. The transmission rate was set to 160 KB/s. We conducted a
series of simulations with different problem sizes, using from 10 to 15 media objects. In each data set, we randomly assigned
certain precedence constraints to 0%, 20%, or 40% of the objects. For each problem size, 50 different data sets were used to
investigate the average idle rates. Two buffer size constraints, 16,000 KB and 30,720 KB, respectively, were given.
Table 6 lists the average playback idle rates of the optimal sequences obtained by the proposed branch and bound algo-
rithm for the different data sets. In addition, for each data set, the average idle rate of 10 randomly generated sequences that
satisfy the given precedence constraints was computed and listed in Table 6. For problems with a 16,000 KB buffer con-
straint, the average idle rates for the random sequences and optimal sequences were about 73.94% and 48.76%, respectively.
For problems with a 30,720 KB buffer constraint, the average idle rates for the random sequences and optimal sequences
were about 26.54% and 10.51%, respectively. Since the relaxation of the buffer constraint generally improves the effective-
ness of the prefetch mechanism, the average idle rates in the problems with larger buffer constraints are generally signiﬁ-
cantly lower than for those problems with smaller buffer constraints. Both results show a clear reduction in the average
playback idle rates when the obtained optimal sequences were adopted in the presentations.
With the implemented prototype system, we conducted a series of real-life experiments with different problem sizes,
using from 10 to 15 randomly selected media objects from our collected educational digital archives. The media objects
in the server were downloaded through the 3G wireless network as described in Section 5.1. For each problem size, we con-
ducted 10 runs with 10 randomly generated sequences (satisfying the given precedence constraints) and an additional 10
Table 7
The idle rates (%) of the optimal and random sequences in the 3G wireless network experiments; buffer = 8000 KB
Precedence Media items (n)
10 11 12 13 14 15 Average
0% NEH 1.05 1.53 0.85 1.85 0.97 0.50 1.13
Random 12.64 14.58 12.95 5.13 21.59 5.57 12.08
20% NEH 1.86 1.48 0.97 1.44 0.85 0.51 1.19
Random 36.54 10.03 23.29 15.59 2.44 13.83 19.95
40% NEH 2.49 3.34 0.85 2.32 0.94 0.39 1.72
Random 21.01 27.34 12.03 5.32 4.42 3.26 12.23
a b
Fig. 7. Idle rates (%) for heuristic sequences and random sequences in problems with a 22,400 KB buffer size. Stochastic transmission time ﬂuctuation: (a)
10%, (b) 30%.
396 F.-C. Lin et al. / Data & Knowledge Engineering 66 (2008) 382–401
Author's personal copy
backward), and most problems with a client-side buffer constraint have never been solved and deserve more in-depth inves-
tigations into their complexities and possible solutions. The future work of this paper is to explore the complexities and solu-
tions for these problems by incorporating the above-mentioned issues.
Acknowledgement
This study is supported by Taiwan NSC grant NSC-96-2221-E-260-020-MY3. Lin is partially supported by the Intelligent
Web-enabled Service Research and Development Project of the Institute for Information Industry which is subsidized by the
Ministry of Economy Affairs of the Republic of China.
References
[1] A. Allahverdi, F.S. Al-Anzi, Using two-machine ﬂowshop with maximum lateness objective to model multimedia data objects scheduling problem for
WWW applications, Computers and Operations Research 29 (8) (2002) 971–994.
[2] A. Allahverdi, The two- and m-machine ﬂowshop scheduling problems with bicriteria of makespan and mean ﬂowtime, European Journal of
Operational Research 147 (2) (2003) 373–396.
[3] A. Allahverdi, A new heuristic for m-machine ﬂowshop scheduling problem with bicriteria of makespan and maximum tardiness, Computers and
Operations Research 31 (2) (2004) 157–180.
[4] J.F. Allen, Maintaining knowledge about temporal interval, Communications of the ACM 26 (11) (1983) 832–843.
[5] O. Bruijn, R. Spence, Rapid serial visual presentation: a space–time trade-off in information presentation, in: Proceedings of theWorking Conference
on Advanced Visual Interfaces, 2000, pp. 189–192.
[6] B. Bachelet, P. Mahey, R. Rodrigues, L. Soares, Elastic time computation in QoS-driven hypermedia presentations, Multimedia Systems 12 (6) (2006) 461–
478.
[7] T.P. Bagchi, J.N.D. Gupta, C. Sriskandarajah, A review of TSP based approaches for ﬂowshop scheduling, European Journal of Operational Research 169
(3) (2006) 816–854.
[8] P.C. Bagga, N-job, 2-machine sequencing problem with stochastic service times, Operations Research 7 (1970) 184–197.
[9] K.R. Baker, Scheduling groups of jobs in the two-machine ﬂow shop, Mathematical and Computer Modeling 13 (3) (1990) 29–36.
[10] N.H. Balkir, G. Ozsoyoglu, Delivering presentations from multimedia servers, VLDB Journal 7 (4) (1998) 294–307.
[11] R. Bellman, Dynamic Programming, Princeton University Press, Princeton, NJ, 1957.
[12] R. Bellman, S.E. Dreyfus, Applied Dynamic Programming, Princeton University Press, Princeton, NJ, 1962.
[13] G. Blakowski, R. Steinmetz, A media synchronization survey: reference model, speciﬁcation and case study, IEEE Journal on Selected Areas in
Communications 14 (1) (1996) 5–35.
[14] P. Brucker, Scheduling Algorithms, third ed., Springer-Verlag, Berlin, 2001.
[15] M.C. Buchanan, P.T. Zellweger, Automatically generating consistent schedules for multimedia documents, Multimedia Systems 1 (2) (1993) 55–
67.
[16] M.C. Buchanan, P.T. Zellweger, Automatic temporal layout mechanisms revisited, ACM Transactions on Multimedia Computing, Communications and
Applications 1 (1) (2005) 60–88.
[17] K.S. Candan, B. Prabhakaran, V.S. Subrahmanian, CHIMP: a framework for supporting distributed multimedia document authoring and presentation,
in: Proceedings of ACM Multimedia’96, 1996, pp. 329–340.
[18] A. Celentano, O. Gaggi, Template-based generation of multimedia presentation, International Journal of Software Engineering and Knowledge 13 (4)
(2003) 419–445.
[19] U.K. Chakraborty, D. Laha, An improved heuristic for permutation ﬂowshop scheduling, International Journal of Information and Communication
Technology 1 (1) (2007) 89–97.
[20] K. Chakravarthy, C. Rajendran, A heuristic for scheduling in a ﬂowshop with the bicriteria of makespan and maximum tardiness minimization,
Production Planning and Control 10 (7) (1999) 707–714.
[21] V. Charvillat, R. Grigora, Reinforcement learning for dynamic multimedia adaptation, Journal of Network and Computer Applications 30 (3) (2007)
1034–1058.
[22] C.-L. Chen, R.L. Bulﬁn, Complexity of multiple machine, multi-criteria scheduling problem, in: Third Industrial Engineering Research Conference,
1994, pp. 2257–2264.
[23] F.-D. Chou, C.-E. Lee, Two-machine ﬂowshop scheduling with bicriteria problem, Computers and Industrial Engineering 36 (3) (1999) 549–564.
[24] A.A. Cunningham, S.K. Dutta, Scheduling jobs with exponentially distributed processing times on a ﬂow shop, Naval Research Logistics Quarterly 16
(1) (1973) 69–81.
[25] R.L. Daniel, R.J. Chambers, Multiobjective ﬂow shop scheduling, Naval Research Logistic Quarterly 37 (6) (1990) 981–995.
[26] S.K. Dutta, A.A. Cunningham, Sequencing two-machine ﬂow-shops with ﬁnite intermediate storage, Management Science 21 (9) (1975) 989–996.
[27] S. French, Sequencing and Scheduling: An Introduction to the Mathematics of the Job-shop, John Wiley& Sons, New York, 1982.
[28] M.R. Garey, D.S. Johnson, Computers and Intractability: A Guide to the Theory of NP-Completeness, Freeman, San Franciso, CA, 1979.
[29] M.R. Garey, D.S. Johnson, R. Sethi, The complexity of ﬂowshop and jobshop scheduling, Mathematics of Operations Research 1 (2) (1976) 117–
129.
[30] L.F. Gelders, N. Sambandam, Four simple heuristics for scheduling a ﬂow shop, International Journal of Production Research 16 (1978) 221–231.
[31] P.C. Gilmore, R.E. Gomory, Sequencing a one state-variable machine: a solvable case of the traveling salesman problem, Operations Research 12 (5)
(1964) 655–679.
[32] A.A. Gladky, Y.M. Shafransky, V.A. Strusevich, Flow shop scheduling problems under machine-dependent precedence constraints, Journal of
Combinatorial Optimization 8 (1) (2004) 13–28.
[33] V.S. Gordon, Y.M. Shafransky, Optimal sequencing under series–parallel precedence constraints, Doklady Akademii Nauk BSSR 22 (1978) 224–247 (in
Russian).
[34] R.L. Graham, E.L. Lawler, J.K. Lenstra, A.H.G. Rinnooy Kan, Optimization and approximation in deterministic sequencing and scheduling: a survey,
Annals of Discrete Mathematics 5 (1) (1979) 287–326.
[35] J.N.D. Gupta, V.R. Neppalli, F. Werner, Minimizing total ﬂow time in a two-machine ﬂowshop problem with minimum makespan, International
Journal of Production Economics 69 (3) (2001) 323–338.
[36] J.N.D. Gupta, N. Palanimuthu, C.-L. Chen, Designing a tabu search algorithm for the two-stage ﬂow shop problem with secondary criterion, Production
Planning and Control 10 (3) (1999) 251–265.
[37] J.N.D. Gupta, K. Hennig, F. Werner, Local search heuristics for two-stage ﬂow shop problems with secondary criterion, Computers and Operations
Research 29 (2) (2002) 123–149.
[38] V. Hakkoymaz, G. Özsoyoglu, A constraint-driven approach to automate the organization and playout of presentations in multimedia databases,
Multimedia Tools and Applications 4 (2) (1997) 171–197.
[39] V. Hakkoymaz, J. Kraft, G. Özsoyoglu, Constraint-based automation ofmultimedia presentation assembly, Multimedia Systems 7 (6) (1999) 500–518.
398 F.-C. Lin et al. / Data & Knowledge Engineering 66 (2008) 382–401
Author's personal copy
[90] S.F. Rad, R. Ruiz, N. Boroojerdian, New high performing heuristics for minimizing makespan in permutation ﬂowshops, Omega. doi:10.1016/
j.omega.2007.02.002.
[91] C. Rajendran, Two-stage ﬂowshop scheduling problem with bicriteria, Journal of the Operational Research Society 43 (9) (1992) 871–884.
[92] C. Rajendran, Heuristic for scheduling in ﬂowshop with multiple objectives, European Journal of Operational Research 82 (3) (1995) 540–555.
[93] C. Rajendran, H. Ziegler, An efﬁcient heuristic for scheduling in a ﬂowshop to minimize total weighted ﬂowshop of jobs, European Journal of
Operational Research 103 (1) (1997) 129–138.
[94] D. Ravindran, S.J. Selvakumar, R. Sivaraman, A. Noorul Haq, Flowshop scheduling with multiple objective of minimizing makespan and total ﬂow time,
International Journal of Advanced Manufacturing Technology 25 (9-10) (2005) 1007–1012.
[95] A. Reisman, A. Kumar, J. Motwani, Flowshop scheduling/sequencing research: a statistical review of the literature, 1952–1994, IEEE Transactions on
Engineering Management 44 (3) (1997) 316–329.
[96] D. Revel, C. Cowan, D. McNamee, C. Pu, J. Walpole, An architecture for ﬂexible multimedia prefetching, in: Workshop on Resource Allocation Problems
in Multimedia Systems, 1996.
[97] R.F. Rodrigues, L.F.G. Soares, A framework for event-driven hypermedia presentation systems, Multimedia Modeling Conference (2001) 169–185.
[98] R.F. Rodrigues, L.F.G. Soares, A framework for prefetching mechanisms in hypermedia presentations, in: IEEE Fourth International Symposium on
Multimedia Software Engineering, 2002, pp. 278–285.
[99] R. Ruiz, C. Maroto, A comprehensive review and evaluation of permutation ﬂowshop heuristic, European Journal of Operational Research 165 (2005) 479–494.
[100] L. Rutledge, B. Bailey, J.V. Ossenbruggen, L. Hardman, J. Geurts, Generating presentation constraints from rhetorical structure, in: Proceedings of the
11th ACM conference on Hypertext and Hypermedia, 2000, pp. 19–28.
[101] L. Rutledge, J. van Ossenbruggen, L. Hardman, Structuring and presenting annotated media repositories, CWI Technical Report INS-E0402, 2004.
[102] Y. Sekiguchi, Optimal schedule in a GT-type ﬂow-shop under series–parallel precedence constraints, Journal of the Operations Research Society of
Japan 26 (3) (1983) 226–251.
[103] J.B. Sidney, The two-machine maximum ﬂow time problem with series parallel precedence relations, Operations Research 27 (4) (1979) 782–
791.
[104] F. Sivrikaya-Serifoglu, G. Ulusoy, A bicriteria two-machine permutation ﬂowshop problem, European Journal of Operational Research 107 (2) (1998) 414–
430.
[105] R. Steinmetz, Synchronization properties in multimedia systems, IEEE Journal of Selected Areas in Communications 8 (3) (1990) 401–412.
[106] R. Steinmetz, C. Engler, Human perception of media synchronization, Technical Report, 43.9310, IBM European Networking Center, Heidelberg, 1993.
[107] V.A. Strusevich, Shop scheduling problems under precedence constraints, Annals of Operations Research 69 (1) (1997) 351–377.
[108] T.T. Talwer, A note on sequencing problems with uncertain job time, Journal of the Operations Research Society of Japan 9 (1967) 93–97.
[109] V. T’kindt, J.-C. Billaut, Multicriteria scheduling problems: a survey, RAIRO Operations Research 35 (2) (2001) 143–163.
[110] V. T’kindt, J.-C. Billaut, Multicriteria Scheduling: Theory, Models and Algorithms, Springer, Berlin, 2006.
[111] V. T’kindt, J.N.D. Gupta, J.-C. Billaut, Two-machine ﬂowshop scheduling with a secondary criterion, Computer and Operations Research 30 (4) (2003) 505–
526.
[112] S. Wirag, Modeling of adaptable multimedia documents, in: Proceedings of the Interactive Distributed Multimedia Systems and Telecommunication
Services, 1997, pp. 420–429.
[113] Y. Xia, D. Tse, Survey of single machine scheduling with application to web object transmission, UC Berkeley, Tech. Rep. UCB/ERL M00/54, 2000.
[114] C.C. Yang, Y.Z. Yang, Design and implementation of the just-in-time retrieving policy for schedule-based distributed multimedia presentations,
Journal of Systems and Software 71 (1) (2004) 49–63.
[115] W.-C. Yeh, A new branch and bound approach for the n/2/ﬂowshop/aF + bCmax ﬂowshop scheduling problem, Computers and Operations Research 26
(13) (1999) 1293–1310.
[116] W.-C. Yeh, An efﬁcient branch-and-bound algorithm for the two-machine bicriteria ﬂowshop scheduling problem, Journal of Manufacturing Systems
20 (2) (2001) 113–123.
[117] C. Zhao, Q. Zhang, H. Tang, A ﬂowshop scheduling algorithm to minimize total weighted completion time, in: Proceedings of IEEE of the Fourth World
Congress on Intelligent Control and Automation, 2002, pp. 1485–1488.
Feng-Cheng Lin received his Ph.D. degree in Computer Science and Information Engineering from National Chi Nan University,
Taiwan, in 2008. Currently he works in Innovative Digitech-Enabled Applications and Services Institute (ideas) of Institute for
Information Industry (III), Taipei, Taiwan. His research interests include scheduling theory, algorithms, andmultimedia applications.
Chien-Yin Lai received his Master degree in Computer Science and Information Engineering from National Chi Nan University in
2006. He is currently a Ph.D. student at the Digital Museum Lab at the same university. His current research interests include
aesthetic computing, image processing and hypermedia authoring systems.
400 F.-C. Lin et al. / Data & Knowledge Engineering 66 (2008) 382–401
UN
CO
RR
EC
TE
D P
RO
OF
ARTICLE IN PRESS
Computers & Operations Research ( ) –
www.elsevier.com/locate/cor
1
A two-machine ﬂowshop problem with processing time-dependent
buffer constraints—An application in multimedia presentations3
Feng-Cheng Lina, Jen-Shin Honga,∗, Bertrand M.T. Linb
aDepartment of Computer Science and Information Engineering, National Chi Nan University, Nantou, Taiwan5
bDepartment of Information and Finance Management, Institute of Information Management, National Chiao Tung University, Hsinchu, Taiwan
Abstract7
To have a quality multimedia presentation through networks, its presentation lag needs to be controlled. One way to reduce the
lag is to prefetch the media objects before their due dates. This paper explores techniques for optimizing the object sequence in9
a prefetch-enabled TV-like presentation. An optimal solution is the one with which the presentation lag is minimized. We map
the problem to a two-machine ﬂowshop scheduling problem with a single chain precedence constraint and a player-side buffer11
constraint. The player-side buffer is “processing time-dependent” and distinguished from the conventional item-based intermediate
buffer constraints discussed in previous ﬂowshop studies. We prove the problem to be strongly NP-hard. A branch and bound13
algorithm equipped with four lower bounds and an NEH-based upper bound is developed. The simulation results show that the
average gaps between the overall lower bounds and the NEH-based upper bound are less than 3% for problems with a large buffer15
size, and less than 13% for problems with a small buffer size and high density of precedence constraints. For applications where
the media objects are delivered through extremely busy servers with which only very restricted CPU resources can be allocated for17
computation, the CDS-based algorithm provides better sequences than the NEH-based algorithm.
 2008 Elsevier Ltd. All rights reserved.19
Keywords: Multimedia presentation; Object sequence optimization; Buffer constraint; Two-machine ﬂowshop
1. Introduction21
Rapid advances in technologies for media capture, storage and transmission have contributed to an exponential
growth of multimedia objects on the Internet. A common way to present the archived media objects in online multime- Q123
dia communication applications is by a TV-like presentation which continuously plays the media objects in sequence.
Applications that prefer a TV-like presentation can originate from any systems that need to combine multiple separate25
media objects into a continuous presentation. Examples include assembling a TV-like documentary based on queries to
multimedia databases, continuously showing the media items in an online multimedia album, presenting a personalized27
multimedia daily news delivery service, or presenting a multimedia message (MMS) in a mobile phone, etc. A TV-like
29
 This research was partially supported by the National Science Council of Taiwan, under grant NSC 96-2221-E-260-020-MY3. Lin was also
partially supported by the National Science Council of Taiwan under grant NSC-95-2416-H-009-033.
∗ Corresponding author. Tel.: +886 49 2915225; fax: +886 49 2915226.
E-mail address: jshong@ncnu.edu.tw (J.-S. Hong).
0305-0548/$ - see front matter 2008 Elsevier Ltd. All rights reserved.
doi:10.1016/j.cor.2008.01.002
Please cite this article as: Lin F-C., et al. A two-machine ﬂowshop problem with processing time-dependent buffer constraints—An application
in multimedia.... Computers and Operations Research (2008), doi: 10.1016/j.cor.2008.01.002
Appendix 2
UN
CO
RR
EC
TE
D P
RO
OF
CAOR2129
ARTICLE IN PRESS
F.-C. Lin et al. / Computers & Operations Research ( ) – 3
the objective. However, the player-side buffer constraint, as described below, appears to be a new type of constraint1
which has never been explored in existing two-machine ﬂowshop problems.
In general, two types of constraints are commonly encountered in online multimedia applications, namely, the3
inter-object precedence constraint, and the player-side buffer constraint. A precedence constraint (here we adopt the
terminology used in conventional scheduling research as described in Brucker [1]) requires one media object to precede5
the second object without precluding other objects from coming between them. For example, in an educational lecture
video of a math course, a video object illustrating the proof of a theorem must be preceded (but not necessarily7
immediately) by the video deﬁning the theorem itself. In such a case, other objects (such as example applications or
the historical remarks of the theorem) are allowed to be presented between the two objects. Beyond the precedence9
constraints, for online multimedia applications with which certain portable devices such as PDA are used for the
playback, the maximum buffer size allowed for keeping the prefetched objects needs to be considered in the schedule11
optimization process.
If two jobs (i.e., media objects), Ji and Jj are temporally related by a precedence constraint (denoted by Ji → Jj,),13
Ji must precede Jj but not necessarily next to Jj . Note that there are two different interpretations of the precedence
constraint addressed in the ﬂowshop problems (refer to [2,3]). Assuming that job Ji precedes job Jj , in the ﬁrst15
interpretation, Jj cannot be started on the ﬁrst machine until Ji is completed on the second machine (all machines).
The two-machine ﬂowshop scheduling problem with the ﬁrst type of precedence constraint is NP-hard even if given17
graph contains only one arc [4,5].
In the second interpretation, Jj cannot start on the ﬁrst machine unless Ji is completed on the same machine, that19
is, Jj can start on the ﬁrst machine while Ji is being processed on machine two. The precedence constraint considered
in the multimedia presentation applications refers to the second interpretation. In general, by a series of concatenation21
on the constrained objects, the overall precedence constraint for a multimedia presentation might be presented by a
general graph. Two-machine ﬂowshop scheduling of makespan minimization in applications with arbitrary precedence23
constraints (i.e., the F2|prec|Cmax problem) has been proved to be NP-hard [6]. To efﬁciently compute a near-optimal
solution using numerical approaches, Hariri and Potts [7] and McMahon and Lim [8] developed a variety of branch25
and bound algorithms where various lower bounds, upper bounds, and dominance rules were proposed to speed up the
enumerative procedure. The two-machine ﬂowshop problem with a number of simpliﬁed versions of the precedence27
constraint, including chain, tree, sp-graph, can be solved in polynomial time. Kurisu [9] gave an algorithm for the case
of parallel-chain precedence constraints. A tree-based precedence problem F2|tree|Cmax is actually a special case of29
the series-parallel precedence problem (F2|sp-graph|Cmax) which was solved by polynomial algorithms in Monma
and Sidney [10], Sidney [11] and Gordon and Shafransky [12]. Valdes et al. [13] presented a linear-time algorithm31
to recognize series-parallel digraphs. In this paper, we consider only the multimedia presentations where the overall
precedence constraint is in the form of a single chain. Problems with more complicated forms of precedence constraint33
is currently under investigation.
With respect to the player-side buffer constraint, we did not ﬁnd any existing ﬂowshop scheduling studies that have35
addressed the problem. In the literature, there are a few studies investigating ﬂowshop problems with limitation of
“number of jobs” that can be allocated in the intermediate storage buffer before ﬂowing to the next machine. For the37
case without any buffer limitation (denoted as the problem ∞-buffer problem in [14]), an optimal solution can be
obtained by Johnson’s rule [23]. For the case in which no any job is allowed to be kept in the intermediate storage39
buffer (denoted as the zero-buffer or no-wait problem in [14]), the polynomial algorithm developed by Gilmore and
Gomory [15] for a speciﬁc TSP can be used to produce optimal solutions. Other than the above two cases, the buffer-41
constrained machine ﬂowshop scheduling problem has been shown to be strongly NP-hard by Papadimitriou and
Kanellakis [14]. To obtain the exact solution of this NP-hard scheduling problem with a ﬁnite intermediate buffer,43
a number of strategies have been proposed; for example, Leisten [16], Smutnicki [17], Dutta and Cunningham [18],
Brucker et al. [19], Tang and Xuan [20], Wang et al. [21], etc. In these ﬂowshop studies, the number of jobs allowed45
to keep in the buffer is ﬁxed throughout the process. In the online multimedia applications addressed in this paper,
we ﬁx the “buffer size” instead of number of objects allowed in the player-side buffer. For a given buffer size, the47
number of objects allowed in the buffer actually depends on the ﬁle sizes of the current playing objects and other
unscheduled objects. Since, under an environment with a constant transmission bit rate, the download time of an49
object (i.e., the processing time on M1) is proportional to its ﬁle size, the number of objects allowed in the buffer is
actually “processing time-dependent”. Hence, the media scheduling problem we want to solve is more complicated51
than the above-mentioned buffer-constrained ﬂowshop scheduling problems. Another unique feature our buffer model
Please cite this article as: Lin F-C., et al. A two-machine ﬂowshop problem with processing time-dependent buffer constraints—An application
in multimedia.... Computers and Operations Research (2008), doi: 10.1016/j.cor.2008.01.002
UN
CO
RR
EC
TE
D P
RO
OF
CAOR2129
ARTICLE IN PRESS
F.-C. Lin et al. / Computers & Operations Research ( ) – 5
Fig. 2. Gantt chart of the optimal schedule with Cmax = Y in Theorem 1.
3-Partition: Given an integer B and a set of A of 3t positive integers {x1, x2, . . . , x3t }, B/4<xi <B/2,1
1 i3t , such that
∑3t
i=1 xi = tB, does there exist a partition A1, A2, . . . , At of the set A such that
∑
xi∈Al xi = B,
1 l t?3
Theorem 1. The F2|ai-buffer|Cmax problem is strongly NP-hard.
Proof. It is not hard to see that the decision version of F2|ai-buffer|Cmax is in the NP class. We next perform a5
polynomial-time reduction from3-Partition.Given an instance of 3-Partition,we construct a job setN={1, 2, . . . , 4t+1}
as follows:7
Ordinary jobs:
ai = xi, bi = Bxi, 1 i3t ,9
Enforcer jobs:
a3t+i = B2, b3t+i = B, 1 i t + 1,11
Y = (t + 1)(B2 + B),
Buffer capacity = B2 + B.13
The network bit rate, BR is assumed to be one unit, i.e., si = ai for all jobs.
With the above instance, we claim that there is a partition for the set A as speciﬁed in 3-Partition if and only if there15
exists an optimal schedule of F2|ai-buffer|Cmax whose makespan is no greater thanY. Before proceeding to the proof,
we assume t < xi for all elements of A. If it is not the case, we can scale the numerical values in polynomial time to17
meet the inequality.
If part: Let subsets A1, A2, . . . , At be a partition as speciﬁed for the set A in 3-Partition.We schedule job J3t+1 ﬁrst,19
followed by the jobs corresponding to the elements ofA1. Next, we schedule job J3t+2 and then the jobs corresponding
to the elements of A2. Continuing the arrangement, we have a schedule as shown in Fig. 2. Inspecting the Gantt chart,21
we can easily see that the constructed schedule has a makespan Y.
Only if part: Suppose that there is an optimal schedule of F2|ai-buffer|Cmax with a makespan no greater than23
Y = (t + 1)(B2 + B). We ﬁrst note that, without loss of generality, we can assume the enforcer jobs are scheduled
in increasing order of their indices. Due to the buffer constraint, no two enforcer jobs are allowed to stay in the25
buffer at the same time. This implies that for any two enforcer jobs, say for example J3t+1 and J3t+2, the machine-
two operation of J3t+1 and the machine-one operation of J3t+2 cannot overlap. This can be illustrated by the Gantt27
chart given in Fig. 2. With this property and the fact that
∑4t
i=3t+1 ai +
∑4t
i=3t+1 bi = (t + 1)(B2 + B) = Y , no
ordinary job can be scheduled before enforcer job J3t+1 for otherwise the makespan will be greater than Y. That is,29
the ordinary jobs need to be allocated to fully ﬁll up the intervals in between any two consecutive enforcer jobs.
Moreover, no idle time on machine one is allowed and no idle time between any two machine-two operations is31
allowed.
Let N1 be the set of ordinary jobs scheduled between jobs J3t+1 and J3t+2. We analyze two disjoint cases.33
Please cite this article as: Lin F-C., et al. A two-machine ﬂowshop problem with processing time-dependent buffer constraints—An application
in multimedia.... Computers and Operations Research (2008), doi: 10.1016/j.cor.2008.01.002
UN
CO
RR
EC
TE
D P
RO
OF
CAOR2129
ARTICLE IN PRESS
F.-C. Lin et al. / Computers & Operations Research ( ) – 7
Fig. 3. Lower bound LB1.
Fig. 4. Lower bound LB2.
previously downloaded to the buffer), and buffered jobs waiting for playback onM2. The following two lower bounds,1
LB1 and LB2, are based on certain characteristics of the precedence constraint.
3.1.1. LB13
Referring to Fig. 3, a lower bound at a nodemust be larger than the total ai for allJi (i.e.,
∑
Ji∈NSD ai+
∑
Ji∈{N\NSD} ai
in Fig. 3) plus the processing time for the ﬁnal job on M2. Given NS as the set of scheduled jobs, the last job5
in a sequence should be either JPk (i.e., the last one to be played in JP ) or the job with the smallest bi in NNSDP
(NNSDP =(N\NSD)∩(N\NP ), i.e., the unscheduled jobs that are not subject to any precedence constraint), whichever7
has a smaller playback time bi . Based on the above consideration, a lower bound LB1 can be given as
LB1 =
∑
Ji∈N
ai + min
{
min
Ji∈NNSDP
{bi}, bprec-last
}
. (1)
9
3.1.2. LB2
At a node in the search tree, a lower bound must be larger than the total processing time for all unscheduled jobs11
on M2 (i.e.,
∑
Ji∈{N\NSD} bi in Fig. 4), plus the time elapsed before these jobs starting on M2. The earliest job to be
scheduled at this stage should be the one with the highest priority in (N\NSD), or the one with the smallest ai in13
NNSDP , whichever has a smaller ai . Therefore, the time elapsed can be given by min(minJi∈NNSDP (ai), aprec-ﬁrst).
Given CSD as the ﬂowtime of sequence SNSD of job set NSD , a lower bound can be calculated as15
LB2 = max
⎛
⎝CSD, ∑
Ji∈NSD
ai + min
(
min
Ji∈NNSDP
(ai), aprec-ﬁrst
)⎞⎠+ ∑
Ji∈N\NSD
bi . (2)
3.2. Lower bounds based on the buffer constraint17
We further propose two more sophisticated lower bounds that exploit certain general characteristics of a buffer-
constrained sequence.At any instant during the presentation, if there is certain vacancy in the buffer, more unscheduled19
Please cite this article as: Lin F-C., et al. A two-machine ﬂowshop problem with processing time-dependent buffer constraints—An application
in multimedia.... Computers and Operations Research (2008), doi: 10.1016/j.cor.2008.01.002
UN
CO
RR
EC
TE
D P
RO
OF
CAOR2129
ARTICLE IN PRESS
F.-C. Lin et al. / Computers & Operations Research ( ) – 9
Fig. 6. Calculation of TR .
starts its playback is given as1
Tﬁll = BUFfreeBR . (4)
There are two different scenarios for calculating the duration allowed for further download during the processing of3
a job Ji onM2 (denoted by Tduring_i ). In the ﬁrst case (step 1, Fig. 5(a)), bp is larger than Tﬁll. So, during the processing
of Jp onM2, the download process onM1 will be suspended once the buffer is full. The maximum allowable download5
time is equal to Tﬁll. Hence, Tduring_p = Tﬁll.
In the second case (step 2, Fig. 5(b)), the buffer will not be fully occupied before Jq completes on M2. The buffer7
has a free space for downloading the next job, say Jr . In such a case, Tduring_q = bq .
By combining the above two scenarios, we compute the allowable download time Tduring_i during the playback of a9
buffered job Ji as
Tduring_i = min(Tﬁll, bi). (5)11
The total allowable download time for all buffered jobs at that node can then be given as
Tduring_buffer =
∑
Ji∈NBUF
Tduring_i . (6)
13
We now propose a lower bound based on Tduring_buffer. GivenCSD as the current makespan of the scheduled jobs, the
makespanof the complete sequenceNSD should be larger than a presumed ideal sequencewithwhich all the unscheduled15
jobs can be processed on M1 during the playback of all the buffer jobs on M2 (i.e.,∑Ji∈N\NSD ai < Tduring_buffer). In
such a case, a lower bound can be given by summing CSD and the total processing time of the unscheduled jobs on17
M2. That is, a lower bound is given as CSD +∑Ji∈N\NSD bi .
In the case where the total processing time on M1 of the unscheduled jobs is larger than Tduring_buffer (i.e.,19 ∑
Ji∈N\NSD aiTduring_buffer), the makespan should then be the sum of the following values: (1) the current makespan
CSD , (2) the remaining time required to process all the unscheduled jobs on M1 after the playback of current buffered21
jobs and (3) the total download idle time (the time that cannot be allocated for downloading) when an unscheduled job
is under playback on M2. In the following, we elaborate the general idea of this lower bound.23
During the playback of the currently buffered jobs onM2 (i.e., withinCSD), therewill be a time slot ofTduring_buffer for
possible download of the unscheduled jobs onM1. Theminimum remaining time required to download the unscheduled25
jobs after the completion time of current buffered jobs is given as TR =∑Ji∈N\NSD ai − Tduring_buffer.
Referring to Fig. 6(b), due to the buffer constraint, the time span for downloading all the unscheduled jobs could be27
larger than TR . When a job Ji is processed on M2, the buffer is at least occupied by Ji itself. Hence, the maximum
Please cite this article as: Lin F-C., et al. A two-machine ﬂowshop problem with processing time-dependent buffer constraints—An application
in multimedia.... Computers and Operations Research (2008), doi: 10.1016/j.cor.2008.01.002
UN
CO
RR
EC
TE
D P
RO
OF
CAOR2129
ARTICLE IN PRESS
F.-C. Lin et al. / Computers & Operations Research ( ) – 11
Fig. 8. Maximum allowable download time.
Fig. 9. Calculation of Tduring_i by dynamic programming.
By combining the above two cases, we can compute the allowable download time during the playback of a buffered1
job Ji by
If Tﬁll >bi (Fig. 9(a)), Tduring_i = bi ,
Else Tduring_i = Tduring_Knapsack_i (Fig. 9(b)). (9)3
The total allowable download time for all buffered jobs in the partial schedule is given as
Tduring_buffer =
∑
Ji∈NBUF
Tduring_i . (10)
5
The minimum remaining time required to download the unscheduled jobs after the playback of the currently buffered
jobs is7
TR = max
⎧⎨
⎩
∑
Ji∈N\NSD
ai − Tduring_buffer, 0
⎫⎬
⎭ . (11)
Under the buffer constraint, for any sequences, the time span for downloading all unscheduled jobs should be no9
less than TR due to the possible idle time in the download process. When Ji is being played, the buffer is at least
occupied by Ji . Hence, the maximum of allowable download time during its processing is Tbuffer − ai . When Tﬁll >bi Q211
(Fig. 9(a)), Tdi_i = 0. When Tﬁllbi (Fig. 9(b)), Tduring_i can be computed by using the dynamic programming
algorithms for solving the Knapsack problem. The download idle time for Ji can then be given as13
Tdi_i = bi − Tduring_Knapsack_i (12)
Please cite this article as: Lin F-C., et al. A two-machine ﬂowshop problem with processing time-dependent buffer constraints—An application
in multimedia.... Computers and Operations Research (2008), doi: 10.1016/j.cor.2008.01.002
UNCORRECTED PROOF
C
A
O
R
2129
A
R
T
IC
L
E
IN
P
R
E
S
S
F
.
-C.Lin
et
al./Com
puters&
O
perationsResearch
(
)
–
13
Table 2
Buffer = 30, 720KB
Deviation (%)
n LB = UB UB vs. Opt Opt vs. LB UB vs. LB LB4 LB3
Avg. Max. Avg. Max. Avg. Max. avg_nodes max_nodes avg_time Unfound avg_nodes max_nodes avg_time Unfound
8 29 1.04 7.34 0.46 5.52 1.45 10.09 191 2288 0.000 0 337 8293 0.000 0
10 27 0.74 5.89 0.16 3.02 0.87 8.42 5083 99,002 0.008 0 8965 219,171 0.003 0
12 28 0.80 5.08 0.21 2.92 0.98 5.05 8.43E + 04 3.67E + 06 0.037 0 84701 3.67E+06 0.036 0
14 26 0.50 3.12 0.12 1.78 0.61 3.58 2.15E + 07 1.07E + 09 9.930 0 2.19E + 07 1.09E + 09 9.695 0
16 32 0.61 3.94 0.03 0.87 0.62 4.61 NA NA NA 1 NA NA NA 1
18 26 0.74 5.31 0.07 0.90 0.79 5.04 NA NA NA 3 NA NA NA 4
No precedence constraint. UB vs. Opt = UB−OptOpt × 100%, Opt vs. LB =
Opt−LB
Opt × 100%, UB vs. LB = UB−LBUB × 100%.
Table 3
Buffer = 30, 720KB
Deviation (%)
n LB = UB UB vs. Opt Opt vs. LB UB vs. LB LB4 LB3
Avg. Max. Avg. Max. Avg. Max. avg_nodes max_nodes avg_time Unfound avg_nodes max_nodes avg_time Unfound
8 27 1.33 10.67 0.68 7.62 1.93 10.54 162 2606 0.000 0 205 2606 0.000 0
10 22 1.15 10.07 0.39 5.73 1.49 9.96 7683 136,248 0.004 0 9012 136,259 0.004 0
12 21 0.91 8.88 0.19 2.92 1.07 8.15 7.49E + 04 2.95E + 06 0.032 0 7.56E + 04 2.96E + 06 0.032 0
14 21 0.64 4.60 0.14 2.04 0.77 4.40 1.27E + 07 6.07E + 08 8.528 0 1.29E + 07 6.17E + 08 8.637 0
16 25 1.14 7.62 0.06 1.40 1.15 7.08 NA NA NA 1 2.83E + 07 1.18E + 09 12.666 0
18 23 1.10 6.73 0.04 0.90 1.10 6.72 NA NA NA 4 NA NA NA 4
Precedence constraint = 20%.
Table 4
Buffer = 30, 720KB
Deviation (%)
n LB = UB UB vs. Opt Opt vs. LB UB vs. LB LB4 LB3
Avg. Max. Avg. Max. Avg. Max. avg_nodes max_nodes avg_time Unfound avg_nodes max_nodes avg_time Unfound
8 22 1.68 10.64 1.55 12.33 3.11 14.47 273 2956 0.000 0 284 2956 0.000 0
10 13 2.84 14.10 1.31 12.36 3.93 14.03 2956 31,294 0.001 0 2996 31,294 0.001 0
12 14 2.25 11.13 0.48 4.21 2.60 12.17 6.51E + 04 1.01E + 06 0.022 0 6.56E + 04 1.01E + 06 0.022 0
14 10 1.68 8.38 0.34 3.84 1.95 7.73 1.06E + 06 1.84E + 07 0.580 0 1.08E + 06 1.87E + 07 0.557 0
16 11 1.94 11.45 0.46 10.10 2.29 11.11 1.77E + 07 2.08E + 08 6.658 0 1.81E + 07 2.14E + 08 6.159 0
18 13 2.53 9.10 0.19 2.65 2.59 8.34 NA NA NA 3 NA NA NA 3
Precedence constraint = 40%.
Please
cite
this
article
as:Lin
F-C.,
et
al.A
tw
o
-m
achineﬂo
w
shop
problem
w
ith
processing
tim
e-dependentb
uffer
co
n
straints—
A
n
application
in
m
ultim
edia....Com
puters
and
O
perationsR
esearch(2008),doi:10.1016/j.cor
.2008.01.002
UNCORRECTED PROOF
C
A
O
R
2129
A
R
T
IC
L
E
IN
P
R
E
S
S
F
.
-C.Lin
et
al./Com
puters&
O
perationsResearch
(
)
–
15
Table 6
Buffer = 16, 000KB
16, 000KB Deviation (%)
n LB = UB UB vs. Opt Opt vs. LB UB vs. LB LB4 LB3
Avg. Max. Avg. Max. Avg. Max. avg_nodes max_nodes avg_time Unfound avg_nodes max_nodes avg_time Unfound
8 3 1.96 10.93 5.67 17.00 7.45 17.00 5073 29630 0.010 0 11735 81880 0.005 0
10 1 2.28 6.89 5.26 13.46 7.36 14.25 1.75E + 05 2.06E + 06 0.322 0 4.56E + 05 3.38E + 06 0.194 0
12 1 1.95 8.54 6.57 22.75 8.34 22.75 6.48E + 06 9.44E + 07 15.915 0 2.14E + 07 1.69E + 08 9.833 0
14 0 1.94 6.28 6.84 17.83 8.62 17.83 NA NA NA 18 NA NA NA 13
16 0 1.39 5.22 6.93 15.62 8.21 15.62 NA NA NA 46 NA NA NA 45
No precedence constraint.
Table 7
Buffer = 16, 000KB
16, 000KB Deviation (%)
n LB = UB UB vs. Opt Opt vs. LB UB vs. LB LB4 LB3
Avg. Max. Avg. Max. Avg. Max. avg_nodes max_nodes avg_time Unfound avg_nodes max_nodes avg_time Unfound
8 3 2.68 11.04 5.91 16.00 8.32 19.50 3376 16,248 0.007 0 7356 48,819 0.002 0
10 0 2.87 7.49 5.76 14.69 8.37 16.87 5.17E + 04 5.53E + 05 0.090 0 1.14E + 05 5.53E + 05 0.047 0
12 1 3.52 9.50 6.86 22.75 9.99 23.57 2.02E + 06 2.50E + 07 4.555 0 5.87E + 06 4.11E + 07 2.595 0
14 0 2.77 10.13 6.99 17.83 9.48 17.83 NA NA NA 10 NA NA NA 7
16 0 2.62 7.65 7.36 15.62 9.71 15.69 NA NA NA 36 NA NA NA 29
18 1 1.98 6.97 6.51 13.69 8.31 15.16 NA NA NA 46 NA NA NA 44
Precedence constraint = 20%.
Table 8
Buffer = 16, 000KB
16, 000KB Deviation (%)
n LB = UB UB vs. Opt Opt vs. LB UB vs. LB LB4 LB3
Avg. Max. Avg. Max. Avg. Max. avg_nodes max_nodes avg_time Unfound avg_nodes max_nodes avg_time Unfound
8 1 3.25 19.96 8.11 17.83 10.88 22.88 1007 2549 0.002 0 1747 5788 0.001 0
10 1 3.68 14.38 7.36 16.28 10.53 21.40 1.07E + 04 3.56E + 04 0.018 0 1.98E + 04 6.03E + 04 0.007 0
12 0 4.30 12.54 8.00 22.75 11.71 27.06 3.03E + 05 1.72E + 06 0.686 0 7.23E + 05 3.45E + 06 0.285 0
14 0 4.15 13.75 8.72 18.72 12.27 21.63 6.38E + 06 6.81E + 07 25.982 0 1.97E + 07 3.09E+08 11.254 0
16 0 4.08 15.29 8.75 14.60 12.24 21.16 NA NA NA 9 NA NA NA 6
18 0 4.33 14.78 7.35 17.44 11.12 25.39 NA NA NA 28 NA NA NA 20
Precedence constraint = 40%.
Please
cite
this
article
as:Lin
F-C.,
et
al.A
tw
o
-m
achineﬂo
w
shop
problem
w
ith
processing
tim
e-dependentb
uffer
co
n
straints—
A
n
application
in
m
ultim
edia....Com
puters
and
O
perationsR
esearch(2008),doi:10.1016/j.cor
.2008.01.002
UN
CO
RR
EC
TE
D P
RO
OF
CAOR2129
ARTICLE IN PRESS
F.-C. Lin et al. / Computers & Operations Research ( ) – 17
Fig. 10. Snapshot of a prototype prefetch-enabled media player that incorporates the scheduling algorithms discussed in this paper.
Acknowledgments1
The authors are grateful to the anonymous referees for their constructive comments that have improved the presen-
tation of this paper.
References
[1] Brucker P. Scheduling algorithms. 3rd ed., Berlin: Springer; 2001.3
[2] Strusevich VA. Shop scheduling problems under precedence constraints. Annals of Operations Research 1997;69(1):351–77.
[3] Gladky AA, Shafransky YM, Strusevich VA. Flow shop scheduling problems under machine-dependent precedence constraints. Journal of5
Combinatorial Optimization 2004;8(1):13–28.
[4] Lenstra J, Rinnooy Kan AHG, Brucker P. Complexity of machine scheduling problem. Annals of Discrete Mathematics 1977;1:343–62.7
[5] Lenstra J, Rinnooy Kan AHG. Complexity of scheduling under precedence constraints. Operations Research 1978;26(1):22–35.
[6] Monma CL. Sequencing to minimize the maximum job cost. Operations Research 1980;28(4):942–51.9
[7] Hariri AMA, Potts CN. Algorithms for two-machine ﬂow-shop sequencing with precedence constraints. European Journal of Operational
Research 1984;17(2):238–48.11
[8] McMahon GB, Lim CJ. The two-machine ﬂow shop problem with arbitrary precedence relations. European Journal of Operational Research
1993;64(2):249–57.13
[9] Kurisu T. Two-machine scheduling under required precedence among jobs. Journal of the Operations Research Society of Japan 1976;19(1):
1–13.15
[10] Monma CL, Sidney JB. Sequencing with series-parallel precedence constraints. Mathematics of Operations Research 1979;4(3):215–24.
[11] Sidney JB. The two-machine maximum ﬂow time problem with series parallel precedence relations. Operations Research 1979;27(4):782–91.17
[12] Gordon VS, Shafransky YM. Optimal sequencing under series-parallel precedence constraints. Doklady Akademii Nauk BSSR 1978;22:
224–47 (in Russian).19
[13] Valdes J, Tarjan RE, Lawler EL. The recognition of series parallel digraphs. SIAM Journal on Computing 1982;11(2):298–313.
Please cite this article as: Lin F-C., et al. A two-machine ﬂowshop problem with processing time-dependent buffer constraints—An application
in multimedia.... Computers and Operations Research (2008), doi: 10.1016/j.cor.2008.01.002
國科會補助出席國際會議報告 
                                           98  年   10   月   19   日 
報告人姓名 洪政欣 服務機關名稱及職稱 國立暨南國際大學資訊工程系教授 
會議期間及地點 
自 2009年 08月 9日 
至 2009年 08月 14日 
中國北京 
國科會核定 
補助計畫編號 
   
 96-2221-E-260-020-MY3  號 
會議名稱 
（ 中文 ）第 17 屆 IEA 工效學大會研討會 
（ 英文 ）17th Congress of the IEA International Ergonomics Association (IEA 
2009)  
發表論文題目 
（ 中文 ）利用影像物件顯著圖估算合成圖文的視覺平衡 
（ 英文 ）Using image saliency map for computing visual balance of 
text-overlaid images 
報告內容應包括下列各項： 
一、參加會議經過 
二、與會心得 
三、建議 
四、攜回資料名稱及內容 
五、其他 
 
一、參加會議經過 
 
國際人類工效學（International Ergonomics Association, IEA）聯合會每三年召開
一次學術年會，是工效學界的盛會。本(十七)屆國際工效學大會（IEA 2009）於
2009年 8月 9日-14日，由國際人類工效學聯合會主辦，中國人類工效學學會承
辦，在北京九華山莊召開。本次大會有來自世界各地 60個國家和地區共 1000
多人參加了此次盛會。 本次大會以“變化、挑戰、機遇（changes, challenges and 
opportunities）” 為主題，關注國際金融危機條件下，工效學的研究與實踐考量 
 
圖：發表之論文提出以 image saliency map 來計算帶文字圖像的 visual balance。 
  
在發表的論文中，我們提出以 image saliency map 來計算帶文字圖像的 visual 
balance，並進而實驗歸納出 visual aesthetic 與 估算出的平均視覺平衡呈現相當
程度的正相關，一個自動圖文合成系統可以以這個現象來估算文字擺放的較佳位
置。 
 
    二、與會心得 
    首先，感謝國科會預算支助教師出國參加國際研討會，才能有機會參與這次
IEA 2009會議。由於目前台灣資訊界進行計算美學研究的學者極少，本人研究團
隊在國內可以切磋的機會較為缺乏，本人這次特別選擇參加工業設計領域的 IEA
研討會，有機會得與較多具設計基礎的學者進行討論，對於我們的計算美學相關
研究的助益相當大，是這次會議本人最大的收益。這次會議本人發表論文的研究
主題在於智慧型圖文自動合成的計算美學基礎研究，與會學者中與本人相關研究
最直接相關的為 Professor Yili Liu 教授 , 其發表多篇有關  computational 
無研發成果推廣資料 
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是否適
合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評估。
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■達成目標 
□未達成目標（請說明，以 100字為限） 
□實驗失敗 
□因故實驗中斷 
□其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：□已獲得 □申請中 ■無 
技轉：□已技轉 □洽談中 ■無 
其他：（以 100字為限） 
3. 請依學術成就、技術創新、社會影響等方面，評估研究成果之學術或應用價
值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）（以
500字為限） 
本研究在探討產生 sequential 的方式來連續播放多媒體物件時的排序問題。在慢速網路
環境下，不同的排序往往會造成不同的使用者等待時間 (Presentation Latency)，本計
畫探討在各類限制與真實需求之下，利用 Prefetch 機制時，媒體傳輸及播放順序的最佳
化技術。我們詳細分析了在各式各樣的條件限制下，相關排程問題的計算複雜度
(complexity)及相關解法。計畫的研究進展順利，已有下列三篇期刊論文被接受發表。所
發展的排程演算法包括 optimal solutions for buffer and precedence constrained 
problems, Heuristic sub-optimal solutions for buffer-constrained problems, 
Optimal solutions for buffer and due-dates constrained problems ，也實作在多媒
體傳輸平台中，以實驗證明了計畫所發展理論的正確性，將研發出的排程演算法應用的多
媒體數位資料傳輸的排序。 
