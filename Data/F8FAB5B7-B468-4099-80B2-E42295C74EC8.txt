 I
中英文摘要 
 
無線感測網路（wireless sensor network）是目前正蓬勃發展的一項新興技術。
藉由提供無所不在（ubiquitous）的感應能力、計算能力以及通訊能力，無線
感測網路大大便利了人類的生活。此類的環境可能包含許多價廉的無線節點
（wireless node），其中每個節點都能夠提供收集、處理及儲存環境資訊的能
力，並能與相鄰的節點溝通。透過這種新興的技術，不管我們到什麼地方，都
能夠更密切地與環境進行互動。由於大部分的感測器都是以電池為主要的電
源，因此，如何節省電能的耗費，即為感測網路成功與否的重大課題之一；根
據文獻上的研究結果，感測器在通訊時所消耗的能量遠大於在感測事件時所消
耗的能量，而我們觀察到，由於地域上的重疊，或是感測資料相似性的緣故，
很多感測資料是重覆或是類似的，如果沒有適當的機制先進行處理，而直接將
所有的感測資料都傳送到後端，勢必會造成許多無謂的資料傳送，進而造成電
能的浪費。在本計畫中，針對上述的問題，我們可分別從媒體存取層(MAC 
Layer)和應用層(Application Layer)兩個不同角度來探討。 
 
首先，在媒體存取層的部分，由於感測器經常是以隨機的方式布建的，也因此
造成感測器和感測器之間，感測區域經常有大量的重疊，而當在重疊區域的部
分有事件發生時，若所有偵測到此事件的感測器都做回報的動作的話，勢必造
成無謂的浪費。因此，我們設計了一個媒體存取層協定，此協定考慮了感測資
料的空間相關性(Spatial Correlation)，使得感測器能動態地決定是否要做資料
的回報，進而達到省電的目的。 
 
在另一個方面，以應用層的角度來看，我們發現在無線感測網路中，鄰近節點
的偵測值會相當接近，因此提出利用資料覆蓋(data coverage)的觀念，在此架
構中位於覆蓋範圍內的節點之觀測值和代表點之觀測值的差距都在使用者能
容許的誤差範圍內，我們發展了兩個演算法，在我們提出的方法中，我們首先
將整個網路切割成數個分割，每一個分割都是由一個代表點以及其覆蓋範圍組
成，因此傳輸上只需由少數代表點負責回答使用者查詢，如此整個無線感測網
路可以提供使用者良好的資料精確度，同時仍能維持長時間的運作。 
 
此外，由於本計畫是與美國 Ohio State University 資訊系的 Anish Arora 教授與
Steve Lai 教授合作，兩位教授在感測網路上的物件追蹤問題與追逐者逃脫者問
題有相關的研究成果發表，因此我們也在物件追蹤問題上提出了一個物件位置
 III
partitions that consist of a representative node and sensor nodes. When the data 
query is injured in wireless sensor networks, only representative nodes have to 
answer user queries. Therefore, extending the network lifetime is achieved while 
still guaranteeing data precision. 
 
Besides, we cooperated with Prof. Anish Arora and Prof. T.-H. Steve Lai 
(Department of Computer Science and Engineering, Ohio State University.) Both of 
them have done some research on the object tracking problem and the 
pursuer-evader problem in wireless sensor networks. Thus, we also proposed a 
location management mechanism for object tracking sensor networks. Our goal is 
to reduce the number of location updates and location queries in order to achieve 
power saving. We also published a paper regarding this issue. 
 
Keywords: Wireless Sensor Network, Power Saving Protocols, Medium Access 
Control Protocols, Data Coverage, Coverage Problem, Location Management 
Mechanisms 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 1
一、前言 
無線感測網路（wireless sensor network）是目前正蓬勃發展的一項新興技術。
藉由提供無所不在（ubiquitous）的感應能力、計算能力以及通訊能力，無線
感測網路大大便利了人類的生活。此類的環境可能包含許多價廉的無線節點
（wireless node），其中每個節點都能夠提供收集、處理及儲存環境資訊的能
力，並能與相鄰的節點溝通。透過這種新興的技術，不管我們到什麼地方，都
能夠更密切地與環境進行互動。由於大部分的感測器都是以電池為主要的電
源，因此，如何節省電能的耗費，即為感測網路成功與否的重大課題之一；根
據文獻上的研究結果，感測器在通訊時所消耗的能量遠大於在感測事件時所消
耗的能量，而我們觀察到，由於地域上的重疊，或是感測資料相似性的緣故，
很多感測資料是重覆或是類似的，如果沒有適當的機制先進行處理，而直接將
所有的感測資料都傳送到後端，勢必會造成許多無謂的資料傳送，進而造成電
能的浪費。 
 
在本計畫中，針對上述的問題，我們提出了幾個省電的協定與機制，首先在媒
體存取層(MAC Layer)方面，我們提出了一個適用於以事件驅動為基礎的感測
器網路(event-driven sensor networks)下的媒體存取層協定，在這個協定了為了
達到省電的目的，我們將感測器間的空間資料相關性(Spatial Correlation)考慮
進去，所謂空間資料相關性是指在感測器網路中，鄰近的感測器間其讀數會具
有一定的相關性，因此當我們善加利用此相關性時，我們可以允許只讓某些感
 3
成果可分成三部份來探討，因此接下來我們針對此三部份的研究目的做更詳細
的討論。 
 
首先我們對媒體存取協定這個問題討論其研究目的，我們觀察到在以事件驅動
為基礎的感測器網路(event-driven sensor networks)中，事件發生的區域，往往
有許多的感測器會同時偵測到此事件，並同時地想做回報，從媒體存取層的角
度來看，這會造成許多的碰撞，而且通常感測資料是有空間上的相關性，亦即
空間上鄰近的感測器，其讀數不會相差太多，或有一定的關聯性，當我們能善
加利用此空間相關性時，我們可允許只讓少部份的感測器做回報即可，如此也
可降低在媒體存取層發生碰撞的機率。因此為了要解決此問題，我們的研究目
的是要發展出一個媒體存取層協定，此協定並會將空間相關性考慮進去，進而
達到省電的目的。 
 
在第二部份，我們從應用層的角度去考慮感測器讀數的空間相關性，我們提出
了資料覆蓋(data coverage)的概念，首先我們會將整個網路切割成數個分割，
每一個分割都是由一個代表點以及其覆蓋範圍組成，因此傳輸上只需由少數代
表點負責回答使用者查詢，我們正式地定義出資料覆蓋問題，並證明其為
NP-Complete，因此我們的研究目的就是要設計出演算法能快速地解出資料覆
蓋問題，同時其解與最佳解不會差距太大，亦即所選出的代表點數量和最佳解
的代表點數量不會相差太多，在利用我們提出的演算法而選出適當的代表點
後，藉著較少的點做回報，我們便能達到省電的目的。 
 
 5
如此便能達到省電的目的，然而 B-MAC 只是一個輕量(lightweight)的媒體存取
協定，它只提供了最基本的媒體存取功能，如果需要更進一步的功能需要利用
其提供的介面去發展。Z-MAC[4] 就是一個建構在 B-MAC 之上的協定，它結
合了 TDMA (Time Division Multiple Access)與 CSMA (Carrier Sense Multiple 
Access)的技術，當感測器發現網路的碰撞與競爭非常嚴重時，感測器會採用
TDMA模式進行傳輸，以減少競爭與干擾，然而其缺點是可能會造成延遲(delay)
的增加，因此對於資料量不多的感測器而言，採用 CSMA 會是一個比較好的
選擇，然而 Z-MAC 並沒有考慮感測資料的空間相關性。Funneling-MAC [5] 也
是一個結合 TDMA/CSMA 的協定，然而其是針對感測器網路所呈現的漏斗效
應去提出解決的方法。CC-MAC [6]是跟我們所要提出的協定最為接近的一個
協定，其考慮了感測資料的空間相關性，然而它有幾個缺點，首先 CC-MAC
是一個純 CSMA 的協定，為了避免無線網路上隱藏節點問題(Hidden Terminal 
Problem) ，CC-MAC 採用了傳統的 RTS/CTS 機制，然而由於感測器網路上傳
送的封包其長度通常都很小，使用 RTS/CTS 反而可能造成很大的負擔，此外
我們發現 CC-MAC 在感測資料相關性的利用上也還有改善的空間，因此我們
設計了一個新的媒體存取協定使其能更適用於事件驅動為主的感測網路。 
 
在資料覆蓋這個議題上，由於一個感測器可能需要去預測鄰近感測器的讀數，
以便判斷那個感測器是否在其資料覆蓋範圍內，一些預測的方法已經在文獻中
提出，例如在[7]中作者提出了一個中控式機率模型，其在收集了適當的感測
器讀數後，之後便可用預測的方法估算感測器的讀數，然而在[7]中作者只使
 7
考量感測資料空間相關性的媒體存取協定 
 
在此議題中，我們是考慮以事件驅動為主的感測器網路。首先我們以下圖來說
明這類的網路會有什麼問題，在圖一(a)我們可以發現當感測器做事件回報時，
如果能好好利用感測資料空間相關性，選出適當的感測器做回報，則我們不僅
可只讓少量的感測器做回報且資料收集端也可盡可能地收集到事件的資訊，反
觀圖一(b)我們發現若沒善加利用感測資料空間相關性，有可能我們要使用較
多的感測器做回報，資料收集端也無法掌握事件的資訊，因此在如何善加利用
感測資料空間相關性是我們要面對的第一個問題。 
 
圖一、問題描述 
 
此外如何有效地傳送封包給資料收集端也是一個問題，例如在圖一(a)中若只有
三個感測器的資料成功傳回給資料收集端，則資料收集端就無法正確掌握事件
 9
Data-covering problem，進而證明 Data-covering problem 為 NP-Complete，最後
我們提出了兩個 Heuristic 演算法去計算出哪些感測器需要當代表點。 
 
為了要正式定義出 Data-covering problem，我們先定義一些名詞，兩個感測器
(i 與 j)的讀數差異性(d(i, j))我們利用下面的公式來表示： 
 
藉著此讀數差異性的公式，我們可再定義出一個感測器被另一個感測器所資料
覆蓋是什麼意思： 
 
接著我們就可以定義出何謂 Data-covering Problem： 
 
我們也分別的提出了兩個 Heuristic 演算法去解 Data-coverage problem，由於我
 11
 
 
物件追蹤應用的位置管理機制 
 
在此議題中我們發展了一套可適用於多重資收集端(multi-sink)環境的位置管
理機制，此機制是建構在樹狀基礎上，首先我們用圖三來說明若網路上只有單
一個資料收集端，此樹狀結構如何運作，我們假設每個感測器都是此樹狀結構
的一個樹節點，當一個物件由一個感測器(如圖三中的 H)移動到另一個感測器
(如圖三中的 C)時，這兩個感測器需要發送物件位置更新(update)以便讓資料收
集端知道物件位置已經改變，然而封包並不需要真的送到資料收集端，只需要
送到感測器 H 與感測器 C 在樹中的最低共同父節點，以圖三為例即感測器 B，
而使用者在查詢時會延著此樹狀結構，當查詢封包傳送到感測器 B 時，感測
器 B 就知道如何正確的將查詢封包繼續往下傳。 
 13
¾ 最後一個多重樹需要討論的議題就是，要多少的樹會比較好，我們發現當
樹的數目越多時，位置更新的封包數會增加，然而位置查詢的封包可以減
少，因為查訊的路徑可縮短，由此可能樹的多寡可能要依據查詢的頻率、
物件移動的頻率來決定。 
 
根據上面討論，我們首先發展了一套位置更新(update)與查詢(query)的策略，
在位置更新上，我們提出了更新聚集(update aggregation)的概念，使用一個更
新封包可以同時更新多數個樹狀結構，以避免傳送過多的更新封包，而在位置
查詢上，我們也提出了避免循環(cycle)的方法，此外我們也提出了兩個建構多
重樹的演算法，最後我們也用程式的模擬去評估樹的數目該怎麼選擇，詳細的
演算法說明與模擬結果可參考本報告的附錄。 
五、國際合作方式 
在這本計畫中，我們有透過人員的訪問來執行計畫，其中計畫參與人員黃啟富
博士與林致宇於民國九十五年九月初赴美至 Ohio State University (Columbus, 
OH) ，黃啟富博士於民國九十五年十一月下旬返台，而林致宇於民國九十六
年一月初返台，詳細日期可參閱附錄三「赴國外出差或研習心得報告」。赴
美期間主要是透過下面幾種方式來達成合作： 
¾ 與 Prof. Anish Arora 的討論。剛到美國的那一週，兩位人員就分別與 Prof. 
Anish Arora 討論其研究內容，並確定之後的研究方向，之後也有數次的當
面討論或是透過電子郵件的討論。 
 15
論彼此在此領域上的研究進展，藉著這次的合作，我們針對三個主要議題做了
討論：(1) 我們發展了一個適用於事件驅動感測器網路的媒體存取協定，在其
中我們考量了感測資料的空間相關性，(2) 我們提出資料覆蓋的概念，藉著讓
感測器網路較少的感測器(代表點)做回報，我們可達到省電的目的，(3) 我們
針對物件追蹤感測網路提出了一套適用於多重資料收集端的位置管理機制。 
 
本計畫目前的研究成果如下： 
1. Chih-Shao Lee and Wen-Chih Peng, “Exploiting Data Coverage for 
Approximate Query Processing in Wireless Sensor Networks”, Technical 
Report  
 
2. C.-Y. Lin, Y.-C. Tseng, W.-C. Peng, and T.-H. Lai, “Message-Efficient 
In-Network Location Management in a Multi-sink Wireless Sensor Network”, 
accepted by IJSNet (the spatial issue of Large-Scale Wireless Sensor Networks: 
Challenges and Applications). Accept Date: 2006/10/12 
 
本計畫目前仍在進行中的研究成果如下： 
3. Y.-C. Tseng, T.-H. Lai, and C.-Y. Lin, “Exploiting Spatial Correlation on the 
Link Layer for Event-driven Sensor Networks”, Technical Report 
 
除了在學術成果的發表之外，藉著這次人員赴美合作的機會，我們也參與了
Anish Aora 教授所開授的課程並參加其實驗室的定期討論會，與其學生有不少
的互動，讓我們在除了學術的研究成果之外也體驗了他們做研究的方法，是另
一項無形的收穫。 
 
七、參考文獻 
[1] W. Ye, J. Heidemann, and D. Estrin. An energy-efficient mac protocol for wireless sensor 
附錄一、C.-Y. Lin, Y.-C. Tseng, W.-C. 
Peng, and T.-H. Lai, “Message-Efficient 
In-Network Location Management in a 
Multi-sink Wireless Sensor Network”, 
accepted by IJSNet (the spatial issue of 
Large-Scale Wireless Sensor Networks: 
Challenges and Applications). Accept Date: 
2006/10/12 (論文全文) 
1 Introduction
The emerging wireless sensor network (WSN) technology
may greatly facilitate human life. A WSN may consist
of many inexpensive wireless nodes, each capable of col-
lecting, processing, and storing environmental information,
and communicating with other nodes. A lot of research
efforts have been dedicated to WSNs, including deign of
physical and medium access layers (Shih et al., 2001; Ye
et al., 2002) and routing and transport protocols (Ganesan
et al., 2001; Intanagonwiwat et al., 2000). Applications of
WSNs have been studied in Akyildiz et al. (2002), Burrell
et al. (2004), and Mainwaring et al. (2002).
Object tracking is an important application of WSNs
(e.g., military intrusion detection and habitat monitoring).
The key steps involved in tracking include event detection,
target classification, and location estimation (Aslam et al.,
2003; Blackman and Popoli, 1999; Li et al., 2002; Mechitov
et al., 2003). In a WSN, when the locations of objects are
successfully determined, a location management scheme
for reporting objects’ locations and disseminating users’
queries is required (Kung and Vlah, 2003; Lin and Tseng,
2004). The main theme of this paper is location manage-
ment. In particular, we explore the in-network data pro-
cessing capability of WSNs by executing distributed loca-
tion updates and queries inside the network. Updates are
initiated when an object moves from one sensor to another.
Queries are invoked to find out objects’ locations. Loca-
tion updates and queries are tradeoffs and may be done in
various ways. A naive way for delivering a query is to flood
the whole network. The sensor who knows the location of
the queried object will reply to the query. This is clearly
inefficient and not scalable. Alternatively, if all location in-
formation is stored at a designated sensor (e.g., the sink),
no flooding is required. However, any movement has to be
updated to that sensor. The cost is not justified when ob-
jects move frequently or when the query rate is low. The
purpose of this work is to strike a balance between these
two extreme approaches.
The in-network location management problem has been
studied in Kung and Vlah (2003) and Lin and Tseng
(2004). In Kung and Vlah (2003), sensors are organized as
a logical tree. When an object moves from one sensor to
another, update messages are only forwarded to the lowest
common ancestor of these two sensors in the tree. Further,
queries are only forwarded along the path from the sink to
the sensor containing the queried object. This work fails to
consider the physical structure of the WSN. Lin and Tseng
(2004) further takes the physical structure of the network
into consideration while constructing the logical tree. This
results in further reduction of the overall update and query
cost.
In Lin and Tseng (2004), it is assumed that there is
only one sink in the network. In this paper, we explore
the possibility of having multiple sinks in the network.
One advantage of having multiple sinks is to reduce the
Copyright c© 200x Inderscience Enterprises Ltd.
response time of queries. In addition, using multiple sinks
can also relieve the traffic congestion problem associated
with a single-sink system (i.e., using multiple sinks can
achieve load balance more easily). In order to support lo-
cation management in a multi-sink WSN, we can extend
the tree structure used in the single-sink system (Lin and
Tseng, 2004) by constructing a logical tree for each sink.
However, this implies that updating multiple trees is re-
quired when a movement event is detected. Assuming that
there are m sinks coexisting in the network, if each tree is
updated independently, the update cost will become ap-
proximately m times. It is desirable to further reduce the
update cost when multiple trees coexist in the network.
In this paper, by exploring the concept of data aggrega-
tion, we propose an algorithm to efficiently update multi-
ple trees. With proper design, we show that the update
cost increases only slightly when the number of trees (i.e.,
the number of sinks) increases from 1 to 64. Based on the
foregoing update algorithm, we formulate the update cost
that gives us hints to develop efficient tree-construction
algorithms. Two distributed multi-tree construction algo-
rithms are presented in this paper. Experimental results
show that the increased update cost with multiple trees
can be compensated by lower query cost and the query
cost also depends on m, the number of sinks. This al-
lows us to further investigate how to choose the value of
m under different scenarios.
A significant amount of research effort has been elabo-
rated upon issues of object tracking problems. The authors
in Xu and Lee (2003) explored a localized prediction ap-
proach for power efficient object tracking by putting unnec-
essary sensors in sleep mode. Techniques for cooperative
tracking by multiple sensors have been addressed in Aslam
et al. (2003), Chen et al. (2003), Mechitov et al. (2003),
and Zhang and Cao (2004). In Chen et al. (2003), a dy-
namic clustering architecture that exploits signal strength
observed by sensors is proposed to identify the set of sen-
sors to track an object. In Zhang and Cao (2004), a convoy
tree is proposed for object tracking using data aggregation
to reduce energy consumption. To the best of our knowl-
edge, prior works neither address the problem of tracking
objects in a multi-sink environment, nor explore maintain-
ing multiple trees to achieve location management. These
features distinguish this paper from others.
The remainder of this paper is organized as follows.
Sec. 2 formally defines the multi-sink object-tracking prob-
lem. The proposed in-network update and query mecha-
nisms are discussed in Sec. 3. Sec. 4 presents two dis-
tributed multi-tree construction algorithms. Performance
studies are given in Sec. 5. This paper concludes with
Sec. 6.
2
pendently, the update cost will increase approximately
m times, where m is the number of trees. This is
apparently inefficient. Therefore, update aggregation
should be done to reduce the update cost in a multi-
sink system. Further, the query mechanism should be
designed carefully. We will show later that the query
paths from sinks to the target sensor may cause a cy-
cle. The cycle problem should be avoided.
2. Multi-tree construction: Our proposed update
and query mechanisms can be applied to any multi-
tree system. However, different multi-tree construc-
tion algorithms will cause different update costs. We
will formulate the update cost and point out the fac-
tors that affect the update cost. Then, we propose
two efficient distributed multi-tree construction algo-
rithms.
3. The number of trees used: Obviously, using mul-
tiple trees will increase update cost; however, the in-
crease can be compensated by lower query cost (this
will be verified further through simulation). Because
both the update cost and the query cost are affected
by the number of trees used, we will investigate the
proper value of m under various scenarios.
3 Update and Query Mechanisms
3.1 Notations and Data Structures
We consider a WSN with n sensors, m of which (denoted
by σi, i = 1, · · · ,m) are designated as sinks. For each
sink σi, we assume that a tree Tσi rooted at σi has been
constructed from G. Table 1 summaries the notations used
in this paper. Then, we introduce the data structures used
in this paper. Moreover, each sensor x will keep two tables
in order to process updates and queries:
• Subtree Member Sx: It is an m × n table to indicate
whether another sensor is a descendant of x in a cer-
tain tree. Specifically, Sx(Tσi , j) = 1 if sensor j is a
descendant of x in tree Tσi ; otherwise, Sx(Tσi , j) =
0. For example, in Fig. 3(a), SD(TB , F ) = 1 and
SD(TA, F ) = 0. All values in this table will not change
after all trees are through with construction.
• Detected List DLx: It is a table with k + 1 entries,
where k is the number of neighbors of x. Each en-
try maintains a set of objects. For sensor x itself,
DLx(x) contains the objects currently being tracked
by x. For each neighbor y of x, DLx(y) contains
all objects that are currently being tracked by the
subtrees of some Tσi , i = 1, · · · ,m, rooted at y,
i.e., DLx(y) = {o|∃z, i s.t. o ∈ DLz(z), Sy(Tσi , z) =
1, and x = pi(y))}. This implies that if o is tracked
by sensor z currently and y is an ancestor of z in a
certain tree, then x can know how to find o by asking
y. For example, in Fig. 3(a), D is a neighbor of A.
A
B
C
D
E
F
G
H
I
J
K
(a)
Car1
Car3
Car2
DLD(G)={Car2})
DLA(A)={Car3},
DLA(B)={Car1},
DLA(D)={Car2}
DLB(A)={Car3}, DLB(D) ={Car2},
DLB(C)=DLB(E)={Car1},
DLE(H)={Car1}
DLG(G)={Car2}
DLC(H)={Car1}
DLH(H)={Car1}
TA
TB
A
B
C
D
E
F
G
H
I
J
K
(b)
Car1
Car3
Car2
DLD(F)={Car2}
DLA(A)={Car3},
DLA(B)={Car1},
DLA(F)={Car2}
DLF(I)={Car2}
DLB(A)={Car3}, DLB(C)={Car1},
DLB(D)={Car2} DLC(C)
={Car1}
DLI(I)={Car2}
Up
da
 te
 (C
a r
2 ,
G
,I)
U p
da
 te
(C
 ar
2 ,
G
 ,I)
Up
d a
te
(C
ar
2 ,
G
,I)
Update(Car1,H,C)
Update(Car1,H,C)
Update(Car1,H,C)
Up
dat
e(C
ar2
,G,
I)
Upda
te(Car
2,G,I)
Figure 3: (a) The DLs stored in sensors. Entries with
empty set are not shown. (b) An example where Car2
moves from G to I and Car1 moves from H to C.
Table 1: Summary of notations.
distG(u, v) The minimum hop count between
u and v in G.
nei(v) The neighbors of v in G.
distTσi (u, v) The hop count of the path con-
necting u and v in Tσi
wG(u, v) The event rate between u and v.
lcai(u, v) The lowest common ancestor of u
and v in Tσi .
pi(v) The parent of v in Tσi .
σi The root of Tσi .
Because SD(TA, G) = 1 and Car2 is tracked by G,
Car2 ∈ DLA(D). Detected List is a dynamic table.
When an object moves from one sensor to another,
some sensors’ Detected Lists have to be modified ac-
cordingly.
4
broadcast an update message to its neighbors for updat-
ing tree Tσj and this broadcast message can update these
i (=f(s, t, v)) trees simultaneously; therefore, (i− 1) mes-
sages are saved. This leads to Eq. 4.
However, the packet transmission is unreliable in the
broadcast scheme. Once the update messages are lost
during the transmission, Detected Lists may not contain
up-to-date information, resulting in the failures of queries.
Thus, one also can adopt the unicast scheme to forward
update messages in which each update message has a des-
ignated destination. In this case, SC(v) can be formulated
as
SC(v) =
∑
u∈nei(v)
 m∑
i=2
(i− 1)× ∑
(s,t)∈EG∧
g(s,t,v,u)=i
wG(s, t)

 ,
(5)
where nei(v) denotes the neighbors of v in G and
g(s, t, v, u) represents the number of trees, each of which,
say Tσj , makes the following statement true (u = pj(v)) ∧
((s, t) 6= (v, u))∧ ((Sv(Tσj , s)∧¬Sv(Tσj , t))∨ (Sv(Tσj , t)∧
¬Sv(Tσj , s))). Eq. 5 is similar to Eq. 4 except that each of
v’s neighbors is considered separately. Though the uni-
cast scheme can provide reliable transmission using ac-
knowledgement mechanisms, the number of saved pack-
ets is smaller than that in the broadcast scheme. We will
compare the performances of the broadcast scheme and the
unicast scheme through simulation in which packet loss will
be simulated. Eq. 3, Eq. 4 and Eq. 5 will give us hints for
constructing message-efficient multiple virtual trees.
3.3 The Location Query Mechanism
Now, we describe our location query mechanism. We as-
sume that a user can issue a query from any sensor. When
a sensor x receives a query for object o, there are two sce-
narios: (1) o does not appear in any of the entries of DLx,
and (2) o appears at least in one of the entries of DLx.
In the first scenario, x will forward the query to the
closest sink, say σj , in order to inquire o’s location. The
reason for doing so is that, for each sink σi, it can be
easily shown that all objects tracked by the network will
be contained in DLσi . However, on the query’s way to sink
σj , if an intermediate node y finds that o appears in DLy,
then the second scenario will be initiated immediately.
In the second scenario, we will show how x can for-
ward the query to locate o. We can model the WSN re-
sponsible for tracking object o as a directed query graph
G
′
o = (VG, EG′o), where a directed edge (u, v) ∈ EG′o if and
only if o ∈ DLu(v). Our location update mechanism guar-
antees that if x forwards the query along the query graph
G
′
o, then o is always reachable. For example, Fig. 4(a)
shows the query graph G
′
Car1 of Fig. 3(a) for Car1, where
A and B are sinks. It means that x can simply forward
the query to any y such that o ∈ DLx(y). This is repeated
until a sensor z such that o ∈ DLz(z) is reached. However,
the fact that o is reachable via y from x in G
′
o does not
necessarily imply that G
′
o is cycle-free when multiple trees
coexist in the network. For example, Fig. 4(b) shows two
trees TA and TB and Fig. 4(c) shows the query graph for
Car1, which have a cycle containing D, F , and G. A query
forwarded as above may loop infinitely.
A simple way to solve the infinite loop problem is to
force a query to always travel along a designated tree. In
order to achieve this, we can add a field tree index to the
query request. Once the tree index is set by a certain
sensor, the following sensors can follow the tree designated
by tree index. Here, we propose an alternative solution
which imposes that all trees be shortest-path trees. If so,
not only the query and update paths can be shortest, but
also the corresponding G
′
o for each object o is always cycle-
free. Thus, our query mechanism will work correctly.
Theorem 1. If all trees are shortest-path trees, the query
graph G
′
o for each object o tracked by the network must be
cycle-free.
Proof. Without loss of generality, we assume o is tracked
by sensor x currently. For the purpose of contradiction,
we assume that all trees are shortest-path trees but a cycle
< c0, c1, ..., ck, c0 > exists in G
′
o. Let cj be the vertex in the
cycle with minimum distG(x, cj). The fact that (cj , cj+1)
is an edge in the cycle implies that o ∈ DLcj (cj+1).
This means that there exists a tree, say Tσi that con-
tains the edge (cj , cj+1), which can lead to x. Because
distG(x, cj+1) ≥ distG(x, cj), Tσi must not be a shortest-
path tree. This contradicts our assumption that all trees
are shortest-path trees. Therefore, G
′
o must not contain a
cycle.
After the query reaches the sensor currently tracking the
queried object, the sensor can reply to the sensor initiating
the query through a shortest path. In the case that the
user is capable of mobility, the user should update with
the initiating sensor its position until a reply is received.
This would solve the mobility problem.
4 Multi-Tree Construction Algorithms
The above derivations have suggested that trees rooted at
sinks should be shortest-path trees to avoid the cycle prob-
lem. In addition, following the derivation of Eq. 2, these
trees should be constructed carefully to reduce communi-
cation costs. Below, we propose two distributed multi-tree
construction algorithms, given σ1, σ2, ..., σm as the sinks.
4.1 The MT-HW Algorithm
From Eq. 3, we observe that when an edge (u, v) becomes
an edge of Tσi , the events occurring on (u, v) do not cause
any message to be reported for updating Tσi . Therefore,
in MT-HW (multi-tree construction with the high-weight-
first property) algorithm, an edge (u, v) with higher weight
will be considered for being included into a tree earlier.
First, we define the term candidate parents. A sensor
y is called a candidate parent of x for sink σi, if y is x’s
6
Table 2: Parameters used in our simulation.
Buffer Size 10
The length of DATA 30 Bytes
The length of ACK 17 Bytes
Bit rate 250 kb/s
Symbol rate 62.5 ksymbol/s
aUnitBackoffPeriod 20 symbols
aTurnaroundTime 12 symbols
macMinBE 3
aMaxBE 5
macMaxCSMABackoffs 4
The maximum number of 5
retransmission
Simulation Time 1 hour
Number of Objects 128
location information of the object is sent to all sinks. In
this scheme, any query only needs to be sent to its nearest
sink. Based on the tree construction algorithms and the
forwarding schemes, four schemes proposed by us are com-
pared with the QF and the MC schemes. Specifically, in
the HW-B scheme, the MT-HW algorithm and the broad-
cast forwarding scheme are used. In the HW-U scheme,
the MT-HW algorithm and the unicast forwarding scheme
are used. In the EO-B scheme, the MT-EO algorithm and
the broadcast forwarding scheme are used. Finally, in the
EO-U scheme, the MT-EO algorithm and the unicast for-
warding scheme are used.
As mentioned above, when an object moves from one
sensor to another, if no packet loss arises and the up-
date procedure can be completed within a period during
which the object does not move again, our proposed update
mechanism can ensure that the Detected Lists of sensors
are fresh. However, packet loss is a common phenomenon
in a wireless network and transmission delay should also
be taken into consideration. In order to investigate the im-
pact of packet loss, we develop an event-oriented simulator
using C language in which the unslotted CSMA defined in
IEEE 802.15.4 (IEEE Std 802.15.4, 2003) is implemented.
Because we observe that the collision phenomenon is very
severe, we assume that a node has to wait 10 ∼ 60 millisec-
onds to start a new transmission after it successfully trans-
mits a packet in order to avoid multiple sensors transmit
packets at the same time. Finally, we assume each sensor’s
sending buffer is limited such that for a sensor, if there are
too many packets to be sent simultaneously, some of pack-
ets will be discarded. The related parameters are shown
in Table 2.
5.1 Impact of Objects’ Speeds
First, we consider the scenario in which the update cost
dominates the overall communication cost. To achieve
this, we compare all schemes under various objects’ speeds.
Higher the speed is, more events are generated; thus, the
update cost will dominate the performance. In Fig. 5, sen-
sors are deployed regularly and four sinks are deployed.
The query rate is set to be 1 query/second in this exper-
iment. Fig. 5(a) shows the communication cost (i.e., the
number of packets transmitted in the network) of these
schemes with the value of object speed varied. As can
be seen in Fig. 5(a), the update cost is constant in the
QF scheme because no update packet has to be sent.
The update costs of all other schemes will grow when the
speed becomes higher since more update packets have to
be sent. The update cost of the MC scheme grows enor-
mously, because no in-network processing technique is ap-
plied. Our proposed schemes outperform the QF scheme
and the MC scheme when the speed is lower than 10
units/second. Since the sensing radius of a sensor is 4
units, 10 units/second is relatively high. We further give an
insight into our proposed scheme. Obviously, the broadcast
forwarding scheme has lower update cost than the unicast
scheme has. However, as can been seen later, the unicast
scheme has higher query success rate than the broadcast
scheme has. Besides, we can see that the MT-EO scheme
outperforms the MT-HW scheme slightly, because more
packets are saved due to the overlap of tree edges.
Fig. 5(b) shows the query response time of these
schemes, where the query response time is defined as the
time elapsed between the time at which the query issued
and the time at which the query result returned. The
MC scheme is the best because any query only has to be
forwarded to the sink. Our proposed schemes are slightly
worse than the QF scheme because two phases are required
in our schemes. Although the MC scheme has the best
performance in terms of query response time, the query
result may not be the most up-to-date one. This prob-
lem becomes further severe when packet loss happens. A
measurement, query error, is defined as the number of
hops between the real location of the object and the lo-
cation carried by the query reply at the time at which
query is returned to the user. In Fig. 5(c), it can be
seen that the MC scheme suffers from higher query er-
rors. Finally, Fig. 5(d) shows the query success rates un-
der different schemes. Note that a query may fail due to
packet collision, packet loss, buffer overflow and contam-
inated Detected Lists. More packets transmitted in the
network usually means more collision. Thus, our proposed
scheme and the MC scheme perform worse than the QF
scheme does eventually, but all schemes have similar per-
formance under reasonable speed. Note that the broadcast
forwarding scheme has the worst performance due to the
contaminated Detected List problem; however, the unicast
forwarding scheme can be used to solve this problem.
Since the number of sinks is an important issue in this
paper, the scenario used in Fig. 5 is applied again in Fig. 6
except that 256 sinks are deployed now. It is observed that
if the number of sinks is large, a considerable amount of up-
date messages will be generated. Thus, when the update
cost dominates the communication cost, using less sinks
is better. Finally, experiments with the random deploy-
ment model is investigated in Fig. 7, where the number
of sinks is 4. We can see that the success rates under
8
the random deployment model are lower than that under
the regular deployment model, because the collision phe-
nomenon is very severe in the random deployment model.
When a node has many neighbors, this node usually suffers
severe collision due to the contention and the hidden ter-
minal problem. Therefore, we further compute the average
number of neighbors of a sensor. The average numbers of
neighbors of a sensors under the regular deployment model
and the random deployment model are 3.875 and 5.666 re-
spectively. Thus, we conjecture that the severe collision
phenomenon in the random deployment model is caused
by the hidden terminal problem and the higher contention
between sensors. We further give an insight into our pro-
posed scheme. We can find that the performance of the
unicast forwarding scheme is very bad due to the buffer
overflow problem. The reason can be explained as follows:
when an event occurs, there are averagely 5.666 update
packets will be injected into the sending buffer and the
length of sending buffer is 10 only. Thus, the length of the
sending buffer should be designed carefully. Other most
observations made under the regular deployment model
could be applied to the random deployment model. In the
following experiments, we only show the results under the
regular deployment model.
5.2 Impact of Query Rates
Now we consider the scenario in which the query cost dom-
inates the overall communication cost. To achieve this, we
compare all schemes by adjusting query rates. When the
query rate is high, the query cost will dominate the per-
formance. The object’s speed is set to be 1 unit/second
in this experiment. 4 and 256 sinks are deployed in Fig. 8
and Fig. 9 respectively. First, we compare the communica-
tion costs under different schemes. As shown in Fig. 8(a)
and Fig. 9(a), the QF scheme is the worst one, because
queries are disseminated by flooding. On the contrary, in
our proposed schemes, queries are disseminated by uni-
casting. Thus, our proposed schemes have the best per-
formance. We can further observe that when the num-
ber of sinks increases from 4 to 256, the communication
cost of the MC scheme also grows due to higher update
costs. However, our proposed schemes can achieve almost
the same cost when the number of sinks increases. This is
because using multiple sinks can reduce the query cost by
a shorter query path and the saved query cost can be used
to compensate the increased update cost. Thus, the ad-
vantage of using multiple sinks can be achieved when the
query cost dominates the performance. In addition, when
the number of sinks increases (i.e., from 4 in Fig. 8 to 256
in Fig. 9), it can be seen that the query response time of
our proposed schemes in Fig. 9(b) is slightly smaller than
that in Fig. 8(b) due to shorter query paths. As shown in
Fig. 8(c) and Fig. 9(c), although the MC scheme is the best
one in terms of query response time, it is the worst one in
terms of query error. Finally, in Fig. 8(d) and Fig. 9(d),
we can see that the QF scheme is the worst one in terms
of success rate, because of the collision incurred by the
flooding.
5.3 Impact of the Number of Sinks
From the previous experimental results, it can be seen
that when the query cost dominates the communication
cost, using multiple sinks can achieve better performance.
Thus, we further investigate the impact of the number of
sinks on the performance. The query rate is set to be 10
queries/second and the objects’ speed is set to be 0.333 and
0.111 respectively. In Fig. 10(a) and Fig. 11(a), it can be
seen that the communication costs almost do not increase
when the number of sinks increases, because the increased
update cost can be compensated by lower query cost. As
can be seen in Fig. 10(b) and Fig. 11(b), using multiple
sinks can reduce the query response time slightly due to
shorter query paths. Fig. 10(c) and Fig. 11(c) show the
values of the standard deviation of the number of packets
transmitted by each sensor. It is observed that when the
number of sinks increases, the values of the standard de-
viation are reduced. This is because queries are dispersed
to multiple sinks rather than a single sink. Thus, load bal-
ance can be achieved by using multiple sinks. Finally, in
Fig. 10(d) and Fig. 11(d), it can be seen that using multiple
sinks is able to increase the success rate, because shorter
query paths could result in less collision.
5.4 Multi-Sink Systems with Partial Storage
As mentioned above, using multiple trees will increase the
update cost. A simple way to reduce the update cost while
achieving the advantage of load balance at the same time
is to explore the partial storage technique. The partial
storage technique is motivated by GHT (Ratnasamy et al.,
2002). The basic idea is that each object’s location will be
stored in only some of the sinks. In our simulation, the
partial storage technique is implemented as follows.
First, we evenly divide the sensing field into m zones,
each of which has an unique ID. For each zone, the sensor
closest to the center of the zone is designated as the sink.
Then, each object is hashed into l zones, where l (< m) is
a predefined number, and an object only needs to update
its location with the sinks of these l zones.
Now, we demonstrate the benefit of the partial stor-
age technique by simulation. The query rate is set to
be 2 queries/second and the objects’ speed is set to be
1 unit/second. We compare the EO-B and the EO-U
schemes with α sinks against the EO-B-PS and the EO-U-
PS schemes (which mean the EO-B and the EO-U schemes
extended with the partial storage technique) with 1024
zones and α hashed zones per object. Fig. 12 shows the
results with the value of α varied. It can be observed that,
although the communication costs of the EO-B-PS scheme
and the EO-U-PS scheme are higher, the values of the
standard deviation of the numbers of packets transmitted
by each sensor are lower. Thus, using the partial storage
technique can achieve better load balance.
10
(a)
0.E+00
1.E+07
2.E+07
3.E+07
4.E+07
5.E+07
6.E+07
0.00 5.00 10.00 15.00 20.00
Query Rate (query/second)
N
um
be
r o
f p
ac
ke
ts
QF MC HW-B
HW-U EO-B EO-U
(b)
0.00
0.20
0.40
0.60
0.80
1.00
1.20
1.40
1.60
1.80
2.00
0.00 5.00 10.00 15.00 20.00
Query Rate (query/second)
R
es
po
ns
e 
Ti
m
e 
(se
co
nd
)
QF MC HW-B
HW-U EO-B EO-U
(c)
0.0
0.1
0.1
0.2
0.2
0.3
0.3
0.4
0.4
0.00 5.00 10.00 15.00 20.00
Query Rate (query/second)
Qu
ery
 E
rro
r (
ho
ps
/qu
ery
)
QF MC HW-B
HW-U EO-B EO-U
(d)
0%
20%
40%
60%
80%
100%
0.00 5.00 10.00 15.00 20.00
Query Rate (query/second)
Su
cc
es
s R
at
e 
(%
)
QF MC HW-B
HW-U EO-B EO-U
Figure 9: Performance study with query rates varied, where sensors are deployed regularly and 256 sinks are deployed.
(a)
0.E+00
2.E+05
4.E+05
6.E+05
8.E+05
1.E+06
1.E+06
1.E+06
2.E+06
2.E+06
2.E+06
1 2 4 16 64
Number of sinks
N
um
be
r o
f p
ac
ke
ts
HW-B HW-U EO-B EO-U
(b)
0.00
0.20
0.40
0.60
0.80
1.00
1.20
1.40
1.60
1 2 4 16 64
Number of sinks
R
es
po
ns
e 
Ti
m
e 
(se
co
nd
)
HW-B HW-U EO-B EO-U
(c)
0
500
1000
1500
2000
2500
3000
1 2 4 16 64
Number of sinks
St
an
da
rd
 D
ev
ia
tio
n
HW-B HW-U EO-B EO-U
(d)
0%
20%
40%
60%
80%
100%
1 2 4 16 64
Number of sinks
Su
cc
es
s R
at
e 
(%
)
HW-B HW-U EO-B EO-U
Figure 10: Performance study with the number of sinks varied, where the objects’ speed is set to be 0.333 unit/second.
12
6 Conclusions
In this paper, we have proposed an in-network update and
query algorithm for a multi-sink WSN. This algorithm
strikes the tradeoff between the update and query costs.
Having multiple sinks is important when the network scale
is large or when the query rate is high. The corresponding
update cost is formulated formally. Based on the formu-
lation, we have presented two distributed algorithms to
construct multiple trees. We have verified the benefits of
using multiple sinks in a WSN from different aspects, in-
cluding the total (update plus query) cost, the number of
sinks, query response time, query success rate, and load
balance factor. Our simulation results show that when the
query cost dominates the communication cost, using mul-
tiple sinks can achieve better performance. In addition,
through the usage of multiple sinks, loads of sensors are
easily balanced.
Acknowledgment
Y. C. Tseng’s research is co-sponsored by Taiwan’s MoE
ATU Program, by NSC under grant numbers 93-2752-E-
007-001-PAE, 95-2623-7-009-010-ET, 95-2218-E-009-020,
95-2219-E-009-007, 94-2213-E-009-004, and 94-2219-E-
007-009, by MOEA under grant number 94-EC-17-A-04-
S1-044, by ITRI, Taiwan, and by Intel Inc.
REFERENCES
Akyildiz, I. F., Su, W., Sankarasubramaniam, Y., and
Cayirci, E. (2002). Wireless sensor networks: a survey.
Computer Networks, 38(4):393–422.
Aslam, J., Butler, Z., Constantin, F., Crespi, V., Cybenko,
G., and Rus, D. (2003). Tracking a moving object with
binary sensors. In Proc. of ACM SenSys. ACM Press.
Aurenhammer, F. (1991). Voronoi diagrams - a survey of a
fundamental geometric data structure. ACM Computing
Surveys, 23(3):345–405.
Blackman, S. and Popoli, R. (1999). Design and Analysis
of Modern Tracking Systems. Artech House.
Burrell, J., Brooke, T., and Beckwith, R. (2004). Vineyard
computing: sensor networks in agricultural production.
IEEE Pervasive Computing, 3(1):38–45.
Chen, W.-P., Hou, J. C., and Sha, L. (2003). Dynamic
clustering for acoustic target tracking in wireless sen-
sor networks. In Proc. of IEEE Int’l Conf. on Network
Protocols (ICNP).
Ganesan, D., Govindan, R., Shenker, S., and Estrin, D.
(2001). Highly-resilient, energy-efficient multipath rout-
ing in wireless sensor networks. ACM SIGMOBILE Mo-
bile Computing and Communications Review, 5(4):11–
25.
IEEE Std 802.15.4 (2003). IEEE standard for infor-
mation technology - telecommunications and informa-
tion exchange between systems - local and metropoli-
tan area networks specific requirements part 15.4: wire-
less medium access control (MAC) and physical layer
(PHY) specifications for low-rate wireless personal area
networks (LR-WPANs).
Intanagonwiwat, C., Govindan, R., and Estrin, D. (2000).
Directed diffusion: A scalable and robust communica-
tion paradigm for sensor networks. In ACM Int’l Conf.
on Mobile Computing and Networking (MobiCom).
Kung, H. T. and Vlah, D. (2003). Efficient location track-
ing using sensor networks. In Proc. of IEEE Wireless
Communications and Networking Conference (WCNC).
Li, D., Wong, K., Hu, Y., and Sayeed, A. (2002). Detec-
tion, classification, and tracking of targets. IEEE Signal
Processing Magazine, 19(2):17–29.
Lin, C.-Y. and Tseng, Y.-C. (2004). Structures for in-
network moving object tracking in wireless sensor net-
works. In IEEE Int’l Conf. on Broadband Networks
(Broadnets), pages 718–727.
Mainwaring, A., Culler, D., Polastre, J., Szewczyk, R., and
Anderson, J. (2002). Wireless sensor networks for habi-
tat monitoring. In Proc. of ACM Int’l Workshop on
Wireless Sensor Networks and Applications (WSNA),
pages 88–97.
Mechitov, K., Sundresh, S., and Kwon, Y. (2003). Coop-
erative tracking with binary-detection sensor networks.
University of Illinois at Urbana-Champaign, Technical
Report UIUCDCS-R-2003-2379.
Ratnasamy, S., Karp, B., Yin, L., Yu, F., Estrin, D.,
Govindan, R., and Shenker, S. (2002). GHT: A ge-
ographic hash table for data-centric storage. In Pro-
ceedings of the First ACM International Workshop on
Wireless Sensor Networks and Applications (WSNA),
Atlanta, GA.
Shih, E., Cho, S.-H., Ickes, N., Min, R., Shnha, A., Wang,
A., and Chandrakasan, A. (2001). Physical layer driven
protocol and algorithm design for energy-efficient wire-
less sensor networks. In ACM Int’l Conf. on Mobile
Computing and Networking (MobiCom), pages 272–287.
Xu, Y. and Lee, W.-C. (2003). On localized prediction for
power efficient object tracking in sensor networks. In
Proc. of Int’l Workshop on Mobile Distributed Comput-
ing (MDC).
Ye, W., Heidemann, J., and Estrin, D. (2002). An energy-
efficient mac protocol for wireless sensor networks. In
Proc. of IEEE Infocom, pages 1567–1576.
Zhang, W. and Cao, G. (2004). DCTC: Dynamic con-
voy tree-based collaboration for target tracking in sensor
networks. IEEE Transactions on Wireless Communica-
tion, 3(5):1689–1701.
14
	
  
   
	
 	  	 
  ! 	" 	  	
#
	   	
	  $	
 %	
&	 ' $	' ()
 *+,-	-"-' 	
,-	-"-.
#$ 	"	
    -
	
 

	 	  "   
 	1  	 	"'   "" 	"
 	  		" - 	  ""    	1' 	   

	4 	"  - 6   	 	"  
	4	
 1'
	 	 "   2	   	 
  		   1
1  " 1- $ 		
 	 	" 		 	
	' 1
		
 7#89' 	" 13" 	- $ 	
 		 	 	' '  	
	   		
 	 	     	  " 	"
1- $'  "
	 "  	     		
0	  "
		
 	-
	  	 	 	 1 "   "1" "1 7:9'   
" " !  0  	1   0  		 1 
	 
 	
 0   	 7#;97#<9- $1 #-#   0  

  
  	  	" 
	- $   	   0'
 	 ="  0   	 	  	' 	"  	   
	 	  		
 "	
   	  	
  	- )1' 

  
     	   0- &' 	 	 "1
 ' 1   
 	  
 	" 	  ="	
'  	
 
#
BC
A D
F G J
H
E I L
K
24.4 24.6
24.4
24.9 25
25.2
25.3
25.5
25.5
25.6 25.6
25.4
E
 #-#* 	    	 	-
B
C
A D
F G J
H
E I L
K
B
C
A D
F G J
H
E I L
K
B
C
A D
F G J
H
E I L
K
(a) 3 sensors are selected to represent others. (b) 4 sensors are selected to represent others.
(c) 5 sensors are selected to represent others.
E
 #-8* $   1		  	 	-
:

 	
 		K   	" 	' 
 @	"	
  
   

 1  
 		A'    "1" 
 "  
	' 3   1	" 1   	
 2	- $ 	   	"
 "	
   	  	 -
	   
   	4" 	" 	 	 	
 ' 	"	
  	1    	  	
 "	
 	 '
  "' 	"  "
   	  	""- 	 
  1 	
    " '     	 	 
	""- E' "   "1" 	  '   1  
"  	1  
-
 
	3	 	    0 	
 	 	 	  1	 "	-
 		 	 	
    	 7B9 "  " "	  	 
 	4" 11 "  "    "	
  	 1 
		

	 1	 	    "	
  	- /	 7C9'   "
	 		  " 0 	 	 	' " 	 0- $ 	
0 	 1 	" 
  " "	  1 	
  	 
	 " 
"  "	
  #  	
1-   	
 "	 	0   
 0 	
' 	   0 	
  	 	 " 


	
  " 
 		 7#L9- /	 7#;9'  " !  0   
" 	"  "  


" 	  	 - '   	 7#<9 "
	    " 0 1 
		
  0 	   1 "
  	  	 	 0 	
-
	   	 1	 	  	 " 	   	
1"' 
  " 	  	 0  	
1   "	
  
'  	 	 #  	
1 	 7C9- 
  	
   	
  
' " 1	  "	 	  - $' 	" 
M
	
 
 !
/	  	'  3 	"  	
  
 
1 	"  	
	 8-#-   
   "3		   " 	
 1 	"   
   1 "	
    	
 1 	  1	-
"  ! #$
/	  "'   	     0 	
 	 	 	- 
1"   "	
  	 	 	  
 "- $  "	
 
  	'     	   "	
 
 	" 
 	  	  	"   -
$1 8-#   "	  1 " 	  
- $   	 
"	"  ' 	"  "	     	"- %'  	1   	"   	
  	- $'     - $ " 
 @ A   	 
 "	"  - E  	   '      	   "  	  	"- 	
 "  	"   "    	'  


  - ! 
"	  "	
   	  "   - E  	'  	 "	
 
"    	- /	 "  4   	'  
<
' 	"  	1   	"  	4"-
6 "	
  	
    " 	
 1'     " 
	
 1   - $  	
 1  1= "1"  *
'()  !& ?	    	 '     1  ' 	"
 	   1	
    	 1 	  ' --

	

  - $ 1
 	
  	4 1     1    ' -- 
	
  ' 
  7M9-

! & $ " 	
 1   -
 ?	 	 		      	
 1'  	   	 	 		
   " 	
 1- 3	  	 	   1 	   	- E
 1  	  ' "3	    " 
  	 	 	 	"	
  
1 " 1 - "  	  1 	   1 
	    	- E
	  	 " 
 
	"' "3	   " 
  	 -
E  1 	
'  	         	'     	-
E'   	  " 	
 1 '  	 1 3" 	 	 -

	  " 	
 1   '      
 
      	 	1   	"   1  "   
	 	-
C
 )
!  
1*  (	 " 1 ?"  	

& '     	   "	
K 
'   "-
& '    	"    -
#* ,  	    
8* ,  	
1  
:* ,     
 

J*  ""    " 
 -
M* -
   	  
B* E	"  	   " 
  4 -
<* ,  	    
L* (    	"  		
 " 
-
C* ""  	 -
#;* (	 
E 	   	   
 
1'  	  "	
    	
	"   " 
   	 "	
    " 
- 	 
" 
 		  	  "' 
1  1
	     	"
	 "	   
 		- E 	 	  	 
' 
 
1 
 	  " 
   
 	1  	" 	  	  	"-
 	 1 	 	 	  	" '  	 " 1  	 "  	"  "
  " 
  		
 	- /	 	 '  	 ""  "  	" 	
    	" -   	  
1'  	 1"  		
    	 	  	- ! 	'  	 1	
	
    	 0
 	 	  " 
- $  	 	 	  			 	" 
 "	
    	" "- 6'  1  	   	


 	 7M9  
 
1-  	 "    1	  	1
  	" " 1 
1 	"     	  1	""-

! & ?	  	  " 
  	 '      	"
" 1 
1 1 '     @--' 	 	1A  	" 1 ' 	
   
 	 '    




-
  7M9-

##
/ ("	
 
 (	

  +'6''.
6  +'6'''.
  +'6''.
  +'6''''E'?.
 	 +6'''E'?'&'/'!.
E 	 +''E'?'&'/'F'G'!.
? 	 +''E'?'&'/'F'G'!.
& 		 +'E'?'&'/'F'G'!.
/ 		 +'E'?'&'/'F'G'!.
F 	 +E'?'&'/'F'G'!.
G 	 +E'?'&'/'F'G'!.
! 	 +'E'?'&'/'F'G'!.
$1 :-#* $ "	
 	" " 
  	 	  -
	 "    	"     	 0-
*"  )
! #	  
/	  1	  "  "1" 
    " 	
 1 
- /	 	 :-8-#' 
   	"- /	 	 :-8-8'   	4
 " 	 
 -
*"" #) ,  )
! #	  
	
   " 
 		  	  
1' 	  
 
1 	"  3	"  	  
1  
 4- /	  "1"
			' ' 	
  " 
 		  - I' "  
 	  	 	 	'  "	
   	     
"	
  	1 	  	  "	
   	- $'  0	
 
1 
 4 	   1 "- ) 1D     	"
1" 	  		  	'  		
  
1 " 
 		-
$ " 
1 	
 
 4' 	 
 ' 	  

#:
	   " 	  "1" '  	    	   "
  	 
- $ 	
   	
  	    1 0   
	""  	 	 
    - 
   	 1-
 )
!  *  (	 " 1 !  	

& 
'   "-
& '     	"-
#* 
8* ,  	" 	  
:* 	
 
 4 	" 		  	" 	
1  	   	
1 
"-
J* ,    
 " 
 4 	
  	
1 

M*  1  	" 	" D	 
B*  1" D	 
  	 	  " 
-
<* ,  	    	" 	"  	  " 
   
L*  D	    -
C*  "  		 	  D	 
   	
1-
#;*  
##* -
    	" 	"  	 
  	
1 
#8*  "  / 	  	 
   " 
 -
#:*    	  "-

  	  	  	 	  	  "- !	 
0  	  	
  " 
 4  	
1 	   	
1"-
 	
  " 
 4'   	   " 
 4   

	    	
1"'  ""  1 	  	"'  	 	 	 	- /	 ""	'
	 	 '    1" D	 
  	 	  " 
- $ D	 

		  /  	" 	 	 N " 
- E  	   	 1
	  	"'    	 	 
'  "  	  / 	
 	 
	 
   " 
- /     	 	" 	  	"
 	"'  		
 	" 	 
	 	
  "" " 
 4
	"  	  	"-
	"    	 E
 :-8@A'    -   ' 
"" 
 4   	  	 	 " 	1- /	  3 	"' 1 	
6 	"    
 
 4 	
    	
1- $' 6 	"  ""
#M

! *& ?	  	  " 
  	 '      	"
" 1  1 '     @--' 	 	1A  	" 1 ' 	
   





	 
	
'     	1    	 	
	

"	
 	 -
 E    		'     	   	
  
-     	 7M9'  
	       " 
    	"
" 1 ' 	" "1   	   	 "   3 -
(   	  	   	"- ! 	 "	    	" " 	
  	"  ' 	" 	  	 	  "	  	   	" " 1
 	   	"-     	    	 " 1   	"
	 	-
/ 	   "   3  1 	  	" 	'   
	"    "	"
 - E  "3		  '  	     ' 	"

  -
!  "	   	'   
	"    

	

	 - I'
	  	  	   	 " 
    	" 	   	' 

 

 

	

	
 

	
	-
 	 

	  


	
 	" 




  


      

-
   
  	    " 
   	" 	 	

  	

'
  1 "3		  	'   	 







	





 ' 	  
    
- 	  	1  " 	        	1   	"'
 
	
 	
  	  -   	"' 	    
#<
	 	  "   	
 	
 	" 		 1 		
    -
$ ""     '  "   	     	  
	 
"  
	 1	3-
$   	
 "	'    	* @#A  	1 
	   	  
   ' 	" @8A  "H	 1	 
"	
   "D	 	  	 	"	"	 "	 "1" @--"-A ?	
	" 1  	 
 	" 	 -       "H 	 "H	
			-
	      	"      '  ""	    	 
 ""	 	1  
 		   	    	  
   	
1- $ 
    	    	     
 	
1    -  "3	   ""	 
 		 " 
		
       
	 -  
   "3		   
	 
	  	
-
#$ .& !  "	  
 	1    	
1   	' 	"
 "	  
	   		
         ' 	
   
   @:-#A
/	  "3		   	 '  	1  	 	 	     - !
	 "	   		 	
   	' '   "	  
	 	"    	
1  	-  "   	1  	
1 	  
"	  
 ! 	- $'  
 	1     	
1 
  
 !   	  
 !	
  !	-
#C
	"    	
1 - (  
 	   3"  "'  
   
 % $  
-
"	
     ?	 "1	' % $    ?	 "1 
	  	 
 	" 	 - $'    "1	   "H	 1	
 "	
   	  	"    	
1 - (    "3	"  2	
	"	  	   "   1  	0 	 1*

             
- @:-8A
/  	 "  11 "	 		   " 1	 	  	" '
 	 
  11  	  	 "  -
! $    ' --'  "H	 1	  & "	
  	  	"  
  &  - $' @:-8A 1*
$  $


  $	  
- @:-:A
6 	4	
  	" 1 $'  "3	  	 	"" ?	 	" 1
' 


 	 
 	" 	 - $'  	  @:-:A  *
'  '


  '	 



-
$   "	'  "3	  	 	" 1 (  '  '


   '	-
"	
     	"" ?	 "1	'  "1	  (    
0 "1	  "
  " - $' % $  
  0  %

(  

	

"3		  	 1*
%

(  




 




 


)



 


	





 ' @:-JA
8#
 - $'  	"   	
 		   	   1" 

   	
1 	   "	         - 	 	  	
"1	'  	1  	
1 	   "	   	   
 !	' 
	 "	   		 	
   	'             !	-
	  	" 	     
 4    	 	
1' 
  	1  	" 	  "   	"  - $ 	1
 	" "  1	"" 1   	"  
 	1  
 		
	 1 	 
    !	 

	
 



     !	 

	



     !	-
$'  
 	1  
 		   	    	1
 	
1 	     "	- 	    '  	1  	
1
	     "	   	 - $'  	 	"  

   	
 2	 	 
1-
(   " 	  	    1	  	1   	"
" 1 
1   	"     	  1	"" 	- ! 
    	" 1 '     	" " 1 
1  ' 	"   
 	" " 1   - $       
  	 '
   




- $       





	 
	
- 6
 "3		   '      - $'  	 	"   	1 
 	" " 1  	"   
1   1	""' 	"   
  	" 	 
1 "- E  	  
1 	"  	 
 	
 		 	"  	1  "  	"'  	 	"  

    	" 	 
1 "'  	
 		    
	   
1-
8:
 	   	  	- $ "	
  	  
	" 	
  	"
 	- $ 	4" "	
   	  "   	 "1	
 	 	 
 	" 	""  
 
- $  11   	"   
 
       "	
  ' 	"   4    
 
- $ 11   	 "	
  	  "  
	- $ "	
  
	  H" 1   	 	  	- $ "	
   	     

" 
   "	
  	   - $ 
  	 	   	 
 0   "	 1	  	 	"  	-
0" )% 	!
/	  1	  3 	" 	 	  	
 		 	" "H	
	  	
 0 	
  	"    	- $ 0 	 
	" 
	" 	  	- $ 0 	   0    
  	
    	" 	   	  	 
 - $ 0
	
   0   

 
 
	- 

 0  1" 	  	-
/	 E
 J-#'    	
 		  
 
1' ' 	"
  	" 		
 0 @" P A- $ 	 	
   
	    1 0   "   	

 
 		-   
	 
  	" 	  
 - /	  	'    	 
 

  	- 
 
1 	"   "  

  	 
 	  	"' - $  "  
	 
  1 
1 	" -
/	 '  	1     	  "  " 
    -
/	 
1  '   0'  "  	"   "	
   	
  	 	  " 
  	  0 	"- /	 P '  
	 	  0 	"   "	
   	-  	  		

8M
010
20
30
40
50
60
70
80
1 2 3 4 5 6
k
N
u
m
b
e
r 
o
f 
R
e
p
re
se
n
ta
ti
v
e
s
DCglobal
DClocal
Snapshot
Max-Min
E
 J-8* $    	 "H	 
-
 ' 	"   		 	  	- 0	'  	1   	" " 1

1   		 	  	- E  	" I I	'  	 1 
 
   '  	1  	 " 1   
 "'
	"  	1  	    
   -
 	   	     
- /	  	'  
 "3		 	 7#C97<97L97J9 	" "3	   	       3
	 "- E  		  " 1	'       	 -
/	 E
 J-:'  1"     I I	 	 "   	 
     
 	  		- /	 I I	' 	  
 
 /  "   "- /  "   	  
 /
  " 	"   	
  1 	  	- 	 
1' '
	" 	 "  " 1" 	   1	 	'   	
H  "1- $   	   1   " 	 
 	"     	
1' '   	" 	 
1 	"  	" 
	
1 	   "	-
8<
050000
100000
150000
1 2 3 4 5 6
k
T
o
ta
l 
R
e
m
ai
n
in
g
 E
n
e
rg
y
DCglobal
DClocal
E
 J-J* $       	   		
 	
-
0
5
10
15
20
25
30
35
40
1 2 3 4 5 6
k
N
u
m
b
e
r 
o
f 
R
e
p
re
se
n
ta
ti
v
e
s
DCglobal
DClocal
E
 J-M* $       	  	1   	"-
8C
02
4
6
8
10
12
14
16
18
10 20 30 40 50
Standard Error
N
u
m
b
e
r 
o
f 
R
e
p
re
se
n
ta
ti
v
e
s
DCglobal
DClocal
E
 J-<* $    	""  	  	1   	"-
/	  	" 	'  "  	""    "	
   	 	
 	 - $ 	""  	     "	
  	
	  "	
  	   
" 
   	 	  	- $ 
		
 	
  "H	 	   	"   	  	 	 E
 J-B-
/	  	'        '   1 	
    

 	   
1  "H	   	"" - /	 E
 J-B'  1

1 	" '  1 	
 "   	""  	- $
 1     			'   	"  "   " 
  	- $ 	1   	" " 1 
1 	"  	 1 	 	
E
 J-<- $  	
 		   	 	   			 

- 	 	  	"  " 	 P '  1 	
  P  
  	-
/	  " 	'  "      "- $ 1 	

   "H	    	" 
1  	 	 E
 J-L-  	 1 	 	 
3
'  1 	
   
  	 	    "-
:#
010
20
30
40
50
60
0.1 0.3 0.5 0.8 1
Error Threshold
N
u
m
b
e
r 
o
f 
R
e
p
re
se
n
ta
ti
v
e
s
DCglobal
DClocal with k = 1
DClocal with k = 3
DClocal with k = 5
E
 J-C* $     " 	  	1   	"-
::
1 )
%
7#9 /- E- "4' - ' Q- 	1	' 	" - -  	 	*
 - 	 	' :L@JA*:C:RJ88' 8;;8-
789 - - ' (- ' - &	' 	" $- >	
- I 	 "  	 	
 "  	- /	  !!"' 
 :8RJ#' 8;;;-
7:9 - 6		' F- ?' 	" - "- $" 	 "1 - /	 " 	
"	' 
 :R#J' 8;;#-
7J9 - 6
	' - 
' 	" - -   	
  	 "1- /	

' - 8C 8;;J-
7M9 $- 	' - !	' 	" (- (- 	
	 	 #	$' 
 #;::R#;:L-
$ I/$ ' #CLC-
7B9 - 	"' - ?	' - I""	' F- I- &	' 	" - &	
- I" "	
" 0	 	 	 	- /	 
  	$ %$		$ 		 

  & ' 	 () %	) ) #	 *+  ,	 * -../' 

MLLRMCC' 8;;J-
7<9 Q- $- &' Q- ' 	" &- - - ( 	 	  	 	 
	  0	- /	 "0
' 
 B<R<<' 8;;J-
7L9 /- G	
 	" (- 	"	- I4	
 	   1"	
  
	 "  	- "!1%' #;@BA*L<CRLCB' 8;;M-
7C9 Q- G"- 	 0* $" " 	 	 	- /	 
  	$
-+	 		 
  	 1) 1 -..2) 23 # -..2) %)
4' 
 #:#R#J8' 8;;M-
7#;9 - I""	' I- F- E		' F- I- &	' 	" - &	
- $
*  	 


	
  "  	 	- /	 !,' 8;;8-
7##9 - I""	' I- F- E		' F- I- &	' 	" - &	
- $ "
	  	 0 
	 0   	 	- /	 
  	$ -..* #" ,5"!
		 
  "	  	) , ) ) 6,#) 4
7+-) -..*' 
 JC#RM;8' 8;;:-
7#89 - I- I		
' - - ' F- ' (- 44' 	" F- 	"	- 
	 	  1 		
- /	 8,#' 
 LLRC<' 8;;8-
7#:9 - I 	" - G- 	
- 1"  	
 	 	 	- /	 1(%'

 CL;R#;;;' E1- :# 8;;B-
7#J9 - (	' 6- G' !- Q	' E- Q' - 	' (- ?	"	' 	" - 	- ?&$*
 

  1  " 	 
- /	 
  	$  	 #" 
		 8$  8 , 	  #
	 98,#.-:' 

<LRL<'  Q' - 8L 8;;8- I -
:M
附錄三、赴國外出差或研習心得報告 
 在此次的過程中，計畫成員和 Anish Arora 教授的團隊成員身
處於同一實驗室中，實際參與他們的研究過程，並參加其實驗室每
週定期舉行的 Research Seminar，了解其目前正在進行的研究計
劃，以及正在規劃中的未來計劃。此外計畫成員定期和 Anish Arora
教授進行個別討論，討論本計劃所研發演算法與機制，以及相關的
研究主題，進行深入的探討，聽取其建言，可謂獲益良多。另一方
面，參與成員也旁聽 Anish Arora 教授所開設和感測網路課程「CSE 
788: Introduction to Wireless Sensor Networks  (Fall 2006)」，深
入了解感測網路相關基礎技術，以及最新的發展。 
三、建議與結語 
在本計畫中，透過人員的互訪，與 Anish Arora 研究團隊互相
交流合作，並將共同發表論文。透過本計劃，參與人員在學理上和
實務上都受到紮實而有效的訓練，進而發掘更前瞻之研究議題。整
體而言，我們深感這是一個非常適時且同時具研究與實用價值之計
劃。 
 
路的簡介，Anish Arora從較為底層的東西，例如訊號的處理，無線電波的特性等教起，
這部份也是我以前較不熟悉的地方，收穫不少。同時我也參與了Anish Arora教授實驗
室每個星期兩次的討論會，與實驗室的學生有不少的交流，在我赴美期間，他們也正
在執行一個計劃，其計劃是要在佈置許多海報的現場架設無線感測網路，我們會給每
個海報的參觀者配置一個感測器，之後藉著定位的技術，我們去統計出哪一個海報有
最多人觀看，我也試著去幫忙他們執行此計劃，而幫忙的過程也有不少的收穫。 
 
三、結語與建議 
 
這次的赴美除了上述研究成果的收穫之外，也有不少非研究成果上的收穫，例如了解
了他們做研究的態度與方法，在生活方面，除了語言的學習外，也了解了不少美國的
文化，這些無形上的收穫，對於以後的研究或出國參加會議應該會有不少正面的幫助。
 
藉著這次的國際合作計劃，學習到了不少的東西，也有一定的成果發表，如果政府能
夠提供較多如此的計劃，應該對國內的學術研究有不少的幫助，且像我這樣在國內唸
博士班的學生，藉著這樣的機會，可以體驗不少國外做研究的方法。 
 
國際合作計畫赴國外研究心得報告 
                                                             
計畫編號 NSC 95 – 2218 – E – 009 – 020 
計畫名稱 大型無線隨意感測網路上的覆蓋及省電協定設計及實測 
出國人員姓名 
服務機關及職稱 
黃啟富 
國立交通大學資訊工程學系研究助理敎授 
出國時間及地點 美國俄亥俄州哥倫布，民國九十五年九月一日至民國九十五年十一月二十一日 
合作研究機構 Ohio State University 
合作計畫名稱 HDCCSR: Scalable Dependability in Componentized Software via Self-Stabilization 
合作計畫主持人 Prof. Anish Arora 
出國事由 執行計畫的合作 
 
一、經過 
於民國 95 年 9 月 1 日由桃園中正國際機場出發，經由美國洛杉磯轉機，抵達哥倫布；回
程在同年 11 月 20 日由哥倫布出發，經由辛辛那堤及洛杉磯轉機，於 11 月 21 日晚間返抵國
門。 
二、心得 
本次行程的主要目的在執行國科會雙邊國際合作研究計畫「大型無線隨意感測網路上的覆
蓋及省電協定設計及實測」，合作對象為美國 Ohio State University 資訊系 Anish Arora 教授。 
在本計畫中，我們從不同的網路層面，提出無線感測網路之節省電源機制。然而欲驗證我們
所提出的機制是否具有可行性，極需有建構大型的無線感測網路環境經驗者的參與，將所研
發演算法與機制是否可實作於實際環境，進行評估及建言，以作為修正或是研發更有效之演
算法之依據。建構此一大型無線感測網路，需要龐大的經費，且將面臨無線感測網路實作上
的挑戰，因此尋求與 Anish Arora 教授合作。Anish Arora 教授所執行的 ExScal 計畫，已建構
一大型無線感測網路平台，透過此一無線感測網路之建置，Anish Arora 所領導之研究群，已
從實作與實測中發掘極具前瞻之研究議題並已發表至國際期刊與國際研討會。透過與 Anish 
Arora 之合作，對於我們所提出之機制，進行面對面的討論與交流，將我們所研發機制與協
定實作於大型感測網路平台的可行性，提出充分且極具價值的建言，並建議如何實測與效能
分析，驗證所研發之機制與協定之具體可行方案。 
在此次的過程中，計畫成員和 Anish Arora 教授的團隊成員身處於同一實驗室中，實際參
與他們的研究過程，並參加其實驗室每週定期舉行的 Research Seminar，了解其目前正在進行
的研究計劃，以及正在規劃中的未來計劃。此外計畫成員定期和 Anish Arora 教授進行個別討
論，討論本計劃所研發演算法與機制，以及相關的研究主題，進行深入的探討，聽取其建言，
國際合作計畫赴國外研究心得報告 
                                                             
計畫編號 NSC 95 – 2218 – E – 009 – 020 
計畫名稱 大型無線隨意感測網路上的覆蓋及省電協定設計及實測 
出國人員姓名 
服務機關及職稱 
林致宇 
國立交通大學資訊工程學系博士班學生 
出國時間及地點 美國俄亥俄州哥倫布，民國九十五年九月一日至民國九十五年十二月二十二日 (詳細日期可參閱下面的報告內容) 
合作研究機構 Ohio State University 
合作計畫名稱 HDCCSR: Scalable Dependability in Componentized Software via Self-Stabilization 
合作計畫主持人 Prof. Anish Arora 
出國事由 執行計畫的合作 
 
一、經過 
 
這次赴美執行計劃，是於民國95年9月1日晚間由桃園國際機場搭中華航空公司的班機於同日
抵達洛杉磯後，再搭乘美國國內線班機於當地時間9月2日抵達目的地哥倫布，在9月2日至12
月22日期間，於俄亥俄州州立大學跟Anish Arora教授與T.-H. Steve Lai教授從事計劃相關討論
與研究，期間並參與Anish Arora教授所開設的課程，計劃執行結束後，於12月22至12月31日
安排了私人行程，此部份行程無申請任何差旅費補助，之後於12月31日由洛杉磯搭乘中華航
空公司班機返台，於民國96年1月2日抵達桃園國際機場。 
 
二、內容及成果 
 
在這次赴美行程中，於研究方向，主要有兩個議題需要探討，一是物件追蹤，而是發展一個
適用於事件驅動感測器網路的媒體存取協定。在物件追蹤方面，由於在T.-H. Steve Lai教授於
交大進行訪問時，曾有過短暫的討論，因此在赴美前已經有一部份的成果，而赴美後，也和
Anish Arora教授討論此議題，Anish Arora教授提出了Distance Sensitive的概念，也就是說物件
位置的更新與查詢，其代價應該要和物件移動的距離以及物件與查詢者的距離成一正比的關
係，這樣的想法也給我下一步的方向，在與兩位教授的討論中，我發現物件追蹤這議題還有
發展的空間，而如何將物件追蹤變成一個可用的系統也是我接下來的目標之一。而在此物件
追蹤議題上，我們也共同發表了一篇期刊論文，細節可參考計劃精簡報告。 
 
在此赴美中，另一個研究的議題為適用於事件驅動感測器網路的媒體存取協定設計，同樣地，
這議題我也分別地和兩位教授討論過，在討論的過程中我們不斷地進行方法的修改，同時也
進行論文草稿的撰寫，在這期面，T.-H. Steve Lai教授也給予我不少寫作上的指導，那些寫作
上的指導也是我這次赴美收穫不少的地方，而Anish Arora教授也給了我一些相關的研究資
訊，例如赴美期間，於11月舉辦的SENSYS會議中有一篇是討論針對感測器上的漏斗效應 
(Funneling Effect) 而提出的媒體存取協定，稱為Funneling-MAC，有了Anish Arora教授的幫
忙，我了解了目前感測器網路上媒體存取協定的發展進度。 
