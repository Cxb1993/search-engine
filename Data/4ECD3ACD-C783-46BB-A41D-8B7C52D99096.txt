FPGA 系統分割與驗證工具之設計與實現 (I)  
“Design and Implementation of Partitioning and Verification Tool for FPGA Systems (I)” 
計畫編號：NSC 95-2221-E-027-131 
執行期限：95 年 8 月 1 日 至 96 年 7 月 31 日 
主持人：李宗演 國立台北科技大學電子系暨電腦與通訊研究所副教授 
 
 
 
 
一、中文摘要 
本計畫除完成基因演算法及硬體導向演
算法之軟硬體分割設計外，並進一步完成GHO 
(Genetic with Hardware Oriented)演算法來達成
軟硬體分割最佳化的目標，GHO 演算法能有
效整合基因演算法及硬體導向演算法的優點
後而獲得一組執行時間較短、記憶體較少及較
高的 slice 使用率之軟硬體分割解，為了驗證
GHO 的可行性，本計畫除了開發一個圖形化
的軟硬體分割工具平台給設計者進行系統參
數設定及演算法分析外，並進一步藉由 Xilinx 
ML310 FPGA 實驗平台進行 GHO 在自適應差
分脈衝編碼調製系統(ADPCM)的仿真驗證，
GHO 的實驗結果分別與基因演算法及硬體導
向演算法比較後顯示本計畫完成的 GHO 分割
演算法在執行時間、記憶體及 FPGA 硬體使用
資源(slice)參數上能獲致較佳的結果。 
英文摘要 
Partitioning of genetic algorithm (GA) and 
hardware-oriented partition algorithm (HOP) are 
finished individually in this research. For gaining 
a better partitioning result of faster execution 
time, less memory size and more slice utilization 
from a huge space solution, we develop a 
Genetic with Hardware Oriented (GHO) 
algorithm which profit the advantages of genetic 
algorithm and hardware oriented partition to 
solve the partitioning issues for embedded 
multiprocessor FPGA systems. In order to 
demonstrate the feasibility of GHO, we not only 
design a graphical user interface (GUI) tool to 
set system constraints and perform partitioning 
algorithm for designer but also emulate GHO 
with an adaptive pulse code modulation 
(ADPCM) example on Xilinx ML310 FPGA 
platform. Experiment results show that the 
execution time and memory size in designing a 
FPGA system are improved by GHO which are 
compared with GA and HOP algorithm. 
1. Introduction 
Nano-Meter technology is gradually being 
applied after deep sub-micron technology due to 
the rapid progress of VLSI fabrication process. 
Recently, system-on-a-chip (SoC) based products 
gain more advantages such as lower cost and 
power and high performance but the new 
challenges are spending effort on 
hardware-software codesign, co-verification and 
reusable intelligent property (IP). Moreover, new 
fabrication process enhances transistor capacity 
greatly that built-in multiprocessor 
system-on-a-chip (MPSoC) such as Xilinx [1] 
Virtex series FPGA platform is possible. 
Unfortunately, SoC’s challenges are not solved 
completely, therefore MPSoC era is coming. 
Why technology is toward MPSoC? The reason 
is that the characteristic of MPSoC is simpler 
and more flexible than other architecture. For 
example, MPSoC based architecture is easier for 
floating operation than re-design hardware 
architecture. For computing mass and complex 
data, MPSoC is also more flexible by running 
software in parallel as opposed to hardware. 
Hardware-software codesign methodology had 
been used in the field of SoC and MPSoC [2]-[6]. 
In traditional FPGA system design process, 
hardware-software partition usually depends on 
engineer’s experience [7][8]. However, system 
integration is a major challenge in this way 
because high level synthesis and compilation in 
hardware and software are developed separately. 
satisfaction  
Fig. 1: Design flow for GHO 
Start 
No 
Yes 
Input system constraints
Input FE specification by CDFG 
Perform genetic partition
Satisfy system 
constraints? 
Output partitioning result with 
maximum fitness value 
Modify partitioning result by 
hardware oriented method 
Processor allocation 
Output partitioning result
End 
Genetic 
partition 
HOP 
Reducing 
communication 
time 
 
the constraints of system power consumption and 
FPGA slices. Thirdly, we deploy the same path 
of FE to a processor in order to decrease the 
communication time between FEs. Finally, a 
better partitioning result by GHO is reported to 
developer. 
3.2. GHO partitioning algorithm 
Table I displays GHO algorithm which 
consists of genetic partition, step 1 to 10, and 
hardware-orient method, step 11 to 30. In step 1, 
an original set of SE, namely parent SE (SEpg), is 
randomly generated and  encode randomly 
correspond to FE as 1 or 0 where hardware and 
software are represented, respectively. i.e. 
SE={FEa FEb, …, FEv}, FEi∈{1, 0}. Next, each 
SE is checked for meeting system constraints and 
without concurrency conflict. Moreover, some of 
SE will be recorded if it unmeet system and 
concurrency constraints. In step 3, a best SE of 
SEpg will be found and recorded by calculating 
fitness value for each SE. In step 4 to 5, 
according to crossover and mutation rate to 
execute crossover and mutation which result in a 
set of SE, namely child SE (SEcg), is generated. 
Then, GHO find a best SE and record from SEcg 
by calculating fitness value for each SE. In step 7, 
we compare SEpg with SEcg for fitness value and 
record a better one. After iterating such 
procedure until GHO reach the population size, 
we obtain a best SE by genetic partition.  
A partitioning result of meeting all constraints 
can be obtained by genetic partition. In order to 
use FPGA efficiently to improve the execution 
time and utilization of memory, we modify the 
result of genetic partition by HOP. In step 11, we 
mark hardware FE with fixed and locked label 
which stand for FE implementation by hardware 
GHO Partitioning Algorithm 
Input： CDFG function elements (FEs), System 
constraints, Processor numbers 
Output： Mapping K of function elements into 
hardware components and software components 
/* Genetic partition */ 
1 Generate N of System Element Sets (SEs), SE = 
{FE1, FE2, …, FEK}and encode randomly FEi of SE 
into 0 as software or 1 as hardware 
2 While (1) do 
3 Fitness(); 
4 Crossover(); 
5 If (reach the mutation ratio) Mutation(); 
6 Fitness(); 
7 Compare(); 
8 If (reach the maximum number of generation)  
9 Output the best SE, SEbest, which is recorded and exit 
10 end While 
/* Modify partitioning by HOP  */ 
11 If the FEi in SEbest equal to 1, then mark fixed and set 
locked else mark unfixed and set unlocked 
12 If the FEi in SEbest equal to 0, find out the level l 
which FEi located in the CDFG 
13 While (1) do 
14 If the FEi had longer execution time and is unlocked 
and marked unfixed in SEbest   
15 assign the FEi to 1   
16 If the total power consumption and slices of SEbest 
are satisfying system constraints  
17 FEi mark fixed 
18  Else  
19 assign FEi to 0 and FEi mark fixed 
20  locked all FE in level l 
21 If don’t exist a unfixed and unlocked FEi then exit 
22 end While 
23 While (the SEbest had FE which marked unfixed) do
24 If the FEi had longer execution time and marked 
unfixed in SEbest  
25 assign the FEi to 1 
26 If the total power consumption and slices of 
SEbest are satisfying system constraints 
27  FEi mark fixed 
28 Else 
29  assign FEi to 0 and FEi mark fixed 
30 end While  
31 Processor allocation  
Terminate the algorithm 
End of GHO partitioning algorithm 
TABLE I:  GHO PARTITIONING ALGORITHM
The constraints limit in 31mW for power 
dissipation and one processor in this experiment. 
We set GA parameters as following: α= 0.2, β
= 0.2, γ= 0.6, con_pen= 1, sys_pen= 100, 
crossover and mutation probability as 1 and 0.5, 
respectively. Experiment result lists in Table III 
and GA gets the best to power dissipation but 
others are not. From utilization of slices of view, 
HOP is best but GHO is also near HOP. For 
overall constraints, GHO is better than GA and 
HOP where gains minimum execution time and 
memory and maximum utilization rate of slices. 
TABLE III:  PARTITION RESULT FOR ADPCM 
Partitioning 
Results 
Exec. 
Time 
Memory Slice 
(Used rate) 
Power 
Consum. 
abcdef
GA 5.997μs 150.85 KB 0.2% 6.859mW 010000
HOP 4.027μs 112.06 KB 1.5% 29.901mW 100100
GHO 3.555μs 103.44 KB 1.4% 29.325mW 110001
Remark: abcdef are the function elements in ADPCM 
system. 
5. Conclusion and future work 
Hardware-software partitioning method is a 
major issue on development embedded 
multiprocessor FPGA system. In this research, 
we not only present GHO methodology and 
algorithm but also design a GUI tool for designer 
to solve the partitioning problem in embedded 
multiprocessor FPGA system. Experiment results 
illustrate that GHO is better than GA and HOP 
where gains minimum execution time and 
memory and maximum utilization rate of slices. 
Currently, we are working on verification among 
user defined specification, simulation and 
emulation for embedded multiprocessor FPGA 
systems  
References 
 
[1] Xilinx wedsite, http://www.xilinx.com/. 
[2] W. Wolf, “A Decade of Hardware/Software Codesign,” IEEE 
Computer, Vol. 36, pp. 38-43, 2003.. 
[3] R. Ernst, “Codesign of Embedded Systems: Status and 
Trends,” IEEE Design and Test of Computers, Vol. 15, No. 2, 
pp. 45-54, Apr.-Jun. 1998. 
[4] N. S. Woo, A. E. Dunlop, and W. Wolf, “Codesign from 
Cospecification,” IEEE Computer, Vol. 27, pp. 42-47, Jan. 
1994. 
[5] R. K. Gupta and G. D. Micheli, “System Synthesis via 
Hardware-Software Co-design,” Technical Report 
No.CSL-TR-92-548, Computer System Laboratory, Standford 
Univ., pp. 1247-1263, 1993. 
[6] R. K. Gupta, N. C. Claudionor and G. De Micheli, “Program 
Implementation Schemes for Hardware-Software Systems,” 
IEEE Computer, Vol. 27, No. 1. pp. 48-55, Jan. 1994. 
[7] G. F. Marchioro, J. M. Daveau, and A. A. Jerraya, 
“Transformational Partitioning for Co-Design of 
Multiprocessor Systems,” Proceeding of IEEE International 
Conference Computer Aided Design, pp. 508-515, Nov. 1997. 
[8] M. Srivastava and R. Brodersen, “SIERA: A Unified 
Framework for Rapid-Prototyping of System-Level Hardware 
and Software,” IEEE Trans. on Computer-Aided Design of 
Integrated Circuits and Systems, pp. 676-693, Jun. 1995. 
[9] C. J. N. C. Jr, D. C. D. S. Jr and A. O. Fernandes, 
“Hardware-Software Codesign of Embedded Systems,” 
Proceedings of the XI Brazilian Symposium on Integrated 
Circuit Design, pp. 2-8, 1998. 
[10] R. Ernst, J. Henkel and T. Benner, “Hardware-software 
Cosynthesis for Microcontrollers,” IEEE Design & Test of 
Computer, Vol. 10, pp. 64-75, Dec. 1993. 
[11] V. Srinivasan, S. Govindarajan and R. Vemuri, “Fine-Grained 
and Coarse-Grained Behavioral Partitioning with Effective 
Utilization of Memory and Design Space Exploration for 
Multi-FPGA Architectures,” IEEE Transactions on Very 
large Scale Integration (VLSI) Systems, Vol. 9, pp. 140-158, 
Feb. 2001. 
[12] D. Saha, R. S. Mitra and A. Basu, “Hardware Software 
Partitioning using Genetic Algorithm,” Proceedings of the 
10th International Conference on VLSI Design, pp. 155-160, 
Jan. 1997. 
[13] Y. Zou, Z. Zhuang and H. Cheng, “HW-SW Partitioning 
based on Genetic Algorithm,” Proceedings of Congress on 
Evolutionary Computation (CEC2004), Vol. 1, pp. 628-633, 
Jun. 19-23, 2004. 
[14] H. Kanoh, M. Matsumoto and S. Nishihar, “Genetic 
Algorithms for Constraint Satisfaction Problems,” IEEE 
International Conference on Man and Cybernetics Systems, 
Vol. 1, pp. 626–631, Oct. 22-25, 1995. 
[15] A. L. Buczak and Henry Wang, “Optimization of Fitness 
Functions with Non-Ordered Parameters by Genetic 
Algorithms,” Proceedings of the Congress on Evolutionary 
Computation, Vol. 1, pp. 199–206, May 27-30, 2001. 
[16] K. Deb and S. Agrawal, Understanding Interactions among 
Genetic Algorithm Parameters: Foundations of Genetic 
Algortihms 5, Morgan Kaufmann Publishers, Inc., San 
Francisco, CA, 1999. 
[17] S. Palaniappan, S. Zein-Sabatto and A. Sekmen., “Dynamic 
Multi-Objective Optimization OF War Resource Allocation 
Using Adaptive Genetic Algorithms,” IEEE Southeast 
congress Proceedings. pp. 160–165, Apr. 30, 2001. 
[18] T. Y. Lee, P. A. Hsiung, and S. J. Chen, “Hardware-software 
Multi-Level Partitioning for Distributed Embedded 
Multiprocessor Systems,” IEICE Transactions on 
Fundamentals of Electronics, Communications and Computer 
Sciences, pp. 614-626, 2001. 
[19] L. Pomante, “Co-Design of Multiprocessor Embedded 
Systems: an Heuristic Multi-Level Partitioning 
Methodology,” Proceeding of the IFIP International 
Conference on Chip Design Automation, pp. 421-425, 2000. 
[20] C. Brandolese, W. Fornaciari, L. Pomante and F. Salice and 
D. Sciuto, “Affinity-Driven System Design Exploration for 
Heteregenerous Multiprocessor SoC,” IEEE Ttrans .on 
Computer, Vol. 55, No. 5, pp. 508-519, 2006. 
[21] D. Sciuto, F. Salice, L. Pomante and W. Fornaciari, “Metrics 
for Design Space    Exploration of Heterogeneous 
Multiprocessor Embedded Systems,” IEEE/ACM 
International Workshop on Hardware Software Co-Design, 
pp. 55-60, 2002. 
[22] Tzong-Yen Lin, Yu-Ting Hung, and Rong-Guey Chang, 
“Efficient Hardware/Software Partitioning Approach for 
Embedded Multiprocessor Systems,” International 
Symposium on VLSI Design, Automation and Test 
(VLSI-DAT), pp. 231-234, Apr. 26-28, 2006. 
出席國際學術會議心得報告 
                                                             
計畫編號 95-2221-E-027-131- 
計畫名稱 FPGA系統分割與驗證工具之設計與實現(I) 
出國人員姓名 
服務機關及職稱 
李宗演 
國立台北科技大學 副教授 
會議時間地點 時間: 96年 3月 21日至 23日 地點:香港 
會議名稱 International MultiConference of Engineers and Computer Scientists 2007(IMECS 2007) 
發表論文題目 An Efficiently Hardware-Software Partitioning for Multiprocessor FPGA Systems 
 
一、參加會議經過 
這次參加 IMECS 2007國際會議時間在 3月 21日至 23日於香港舉行，因此我與本
人指導學生范揚興一同前往。我們 20傍晚從台北出發前往桃園國際機場並搭乘華航班機
前往香港。我們的論文被安排在第一天 21日的第一場發表，發表過程中也引起許多熱烈
的討論。22日至 23日我們仍然繼續參加會議並選擇與自己研究相關的論文去討論以及
學習他人之長處。23日傍晚從香港搭乘華航班機回台灣，完成一次成功的國際會議論文
發表。 
 
 
 
二、與會心得 
本人與范揚興學生參加 IMECS 2007國際會議收穫很多，以下將心得分別整理如下： 
1. 從參加國際會議中可以發現研究的走向以及重點。在 FPGA系統中以可重組系統之結
構、作業系統、分割技術以及排程問題為最熱門。而利用 FPGA作為 SOC之實現系
統雛型也是目標之一，不過目前仍有許多問題待克服，如 IP之使用及整合。國內的
研究其實已經漸漸跟上國際腳步並有超越的趨勢，這應該歸功於國家政策以及國科會
在研究上正確的規劃與經費的支持。 
2. 從會議中的討論過程，可以學習到來自不同國家在問題觀點上的不同。 
3. 可以將台灣介紹給其他國家的會議參與者，同時參加台灣在國際上的能見度。 
4. 本論文候選為 The Best Paper Award，但是由於競爭劇烈，所以最後結果未獲得這項
殊榮，不過有候選就已經是得到肯定。 
5. 本論文被選改寫為 Book Chapter，表示本研究已經獲得肯定與接受。 
 
 
三、發表之論文 
請參考下一頁。 
algorithm is proposed by many researchers [11]-[17]. In 2001, 
Srinivasan et al. [11] categorized vary specification size into 
fine-grained and coarse-grained behavioral partition. Then, 
they performed their optimal algorithm in some FPGA platform. 
Saha et al. [12] and Zou et al. [13] also proposed optimal 
algorithm for hardware-software partition in 1997 and 2004, 
respectively. Saha et al. used genetic algorithm (GA) to transfer 
initially hardware-software partition into constraint 
satisfaction problem (CSP). Next, they solved CSP to obtain 
partitioning result that incorporated cost, execution time and 
concurrency constraints. On the other hand, Zou el al. stated 
that executing mutation in GA should depend on fitness 
function rather than mutation rate. Moreover, data 
communication time between hardware and software in a 
system was also taken into account whereas it carried out 
hardware-software partition. 
MPSOC is one of the solutions for solving complex 
functionalities that are required to built-in consumer electronics. 
In 2001, Lee et al. [18] proposed a multi-level partitioning
(MLP) method to solve the hardware-software partitioning in 
distributed embedded multiprocessor systems (DEMS). They 
used a gradient metric on cost and performance for getting a 
better partitioning result. Pomante [19] proposed multi-level 
heuristic partitioning method which is consisted of system and 
function level partitioning phases. First, functional clustering 
phase aimed at reduction the number of communication among 
processors and checked system time constraint. Second, the 
authors performed classic hardware-software partition 
algorithm to decompose system into sub-systems. 
Heterogeneous multiprocessor architecture design is another 
issue in MPSOC. Brandolese et al. [20] proposed a design flow 
and cost function for heterogeneous multiprocessor. Four 
constraints such as affinity index, load index, communication 
index and physical index were taken into account in their 
research. In 2002, Sciuto et al. [21] also proposed a design flow 
and described each phase objective. Moreover, they used a 
metric in functional blocks for analysis to determine general 
purpose processor (GPP), digital signal processor (DSP) or 
application specific integrated circuits (ASIC) and field 
programmable gate array (FPGA). In 2006, Lin et al. [22] used 
partitioning and scheduling phases corresponded to recursive 
spectral bisection (RSB) algorithm and scheduling on 
embedded multiprocessor systems. 
III. HW-SW PARTITIONING 
Powerful computing functionality and complex system 
promote consumer electronics functionality such as embedded 
wireless communication and multimedia system. Nowadays, 
powerful architectures such as embedded multiprocessor 
FPGA systems are implemented for developing multimedia or 
real-time system. In general, the components of embedded 
multiprocessor FPGA systems consist of multiprocessor, 
memory, high speed bus and a lot of input-output port result in 
highly complex system. As we know, designers always trade 
off issues among system area, cost, power consumption, and 
execution time but the approach is extremely lack of use to 
construct best system architecture for developing embedded 
multiprocessor FPGA systems. Therefore, we propose GHO 
partitioning method to solve hardware-software partitioning 
issues in embedded multiprocessor FPGA systems. 
In this Section, we will introduce the system model and 
constraints that are taken into account in embedded 
multiprocessor FPGA systems. Secondly, we propose a GHO 
partition methodology and a new fitness function that is used to 
assess partitioning result. Thirdly, we profit the advantages of 
GA and hardware oriented partitioning (HOP) to obtain an 
efficiently partitioning result. Finally, we describe GHO 
partitioning algorithm that can gain a better partitioning result 
with reduced memory size and execution time. 
A. System Model 
A control and data flow graph (CDFG) is an acyclic graph 
which composes of nodes and edges that is often used in high 
level synthesis. It can easily model data flow, control steps and 
concurrent operations because of its graphical nature. Thus, we 
use a node of CDFG to represent a system hardware or software 
component for developing GHO. A CDFG example is shown in 
Fig. 1 which consists of control flow graph (CFG) and data 
flow graph (DFG). Also, node a, b, c, d, e and f represent a set 
of function element (FE). In this paper, we use CDFG to 
construct system model for the input model of 
hardware-software partition. 
a
c
e
Control step 2 
Control step 1 
b d
f
level 1
level 2
level 3 
Fig. 1: A simple example of FPGA 
B.  System Constraints 
The limitations of hardware-software partition are execution 
time, cost, power consumption and the number of processors in 
a system design. Execution time represents the longest 
execution time of the path in CDFG such as a to f or a to e in Fig. 
1. The system cost constraint consists of hardware and software 
cost which are corresponding to the usage of FPGA slices and 
memory size, respectively. The constraint of power 
consumption denotes the limitation of total power dissipation 
after hardware-software partition. The last constraint discusses 
about the number of processor inside a system. Under single 
processor environment, node e and node f in Fig. 1 can not 
assign as software simultaneously for a processor because one 
job can only be executed in single processor at a time. Similarly, 
node b, c and d can not assign simultaneously as software in 
two processors environment. i.e., node b, c, and d can not be 
over two nodes assign as software. But if node b, c, and d assign 
as software at the same time, then concurrency will happen. For 
IMECS 2007 347
chromosomes are. Hence, the lower fitness value of 
chromosome is gradually eliminated by evolutional process. 
Next step is crossover that selects randomly chromosome from 
crossover pool. We adapt single point crossover method that 
exchanges individually each gene to form new chromosome. 
Crossover probability is another factor for crossover operation 
which represents crossover operation rate. We set crossover 
probability equal to 1 which produces a new offspring by 
crossover operation. On the contrary, if crossover probability is 
0, we do only copies chromosome from old population. 
Mutation operation is finally step in genetic partition that uses 
mutation probability to determine chromosome mutation rate. 
If designer plans to mutate chromosome in every time, the 
mutation rate must set to 1 as oppose to 0 that set for the 
mutation process will not be performed. In our case, mutation 
probability is set to 0.5 for once every two times. After 
performing previous steps, GHO obtains a partitioning result 
such as {101000111} that satisfies all system constraints as 
stated in Section B. 
C.3  Hardware Oriented Partition 
The number of FPGA slice depends completely on 
developing FPGA architecture. In developing embedded 
multiprocessor FPGA systems, the whole of slices within a 
FPGA is regarded as a hardware cost by designer. If a design 
only uses 5% slices, the cost of hardware still refers to all slices 
rather than 5%. As a result, up to 95% slices are waste in such 
case. In contrast, if a partitioning result could re-assign the FE
of software to hardware as much as possible, it is very helpful 
for improving execution time and memory size due to that the 
final design use more hardware. From the point of view 
hardware cost, the more slices are used, the fewer cost are 
required. Therefore, GHO aims at increase the slices utilization 
for getting more efficiently hardware-software partitioning 
result with minimum execution time and memory size. GHO 
strategy is similar to HOP method but concurrency is taken into 
account.  
Concurrence also needs to be solved by re-assign process. As 
a result, re-assign process is a significant issue in maximizing 
the utilization of FPGA slices and concurrence. But, what are 
the best rules of re-assign process in HOP? The rules of GHO 
are summarized: Firstly, we define the execution time (ET) as 
the maximum execution time of FE in each CDFG level. 
Secondly, we search each level for concurrence then record it. 
Thirdly, we re-assign software of ET to hardware to improve 
the execution time and the slice utilization. Fourthly, we check 
the new partitioning result whether meet system constraints and 
without concurrency conflict. Above procedures will be 
iterated until without concurrent. Finally, GHO decreases the 
communication time by allocating as a processor as the same 
path of FEs.  
C.4  GHO Partitioning Algorithm 
We will describe the detail of our propose GHO partitioning 
algorithm in this subsection. Table I displays GHO algorithm 
which consists of genetic partition, step 1 to 10, and 
hardware-orient method, step 11 to 30. In step 1, an original set 
of SE, namely parent SE (SEpg), is randomly generated and 
GHO Partitioning Algorithm
InputΚ CDFG function elements (FEs), System constraints, 
Processor numbers 
OutputΚ Mapping K of function elements into hardware components 
and software components 
/* Genetic partition */
1 Generate N of System Element Sets (SEs), SE = {FE1, FE2, …, 
FEK}and encode randomly FEi of SE into 0 as software or 1 as 
hardware 
2 While (1) do 
3 Fitness(); 
4 Crossover(); 
5 If (reach the mutation ratio) Mutation(); 
6 Fitness(); 
7 Compare(); 
8 If (reach the maximum number of generation)  
9 Output the best SE, SEbest, which is recorded and exit  
10 end While 
/* Modify partitioning by Hardware Oriented Method */
11 If the FEi in SEbest equal to 1, then mark fixed and set locked else 
mark unfixed and set unlocked 
12 If the FEi in SEbest equal to 0, find out the level l which FEi located 
in the CDFG 
13 While (1) do 
14 If the FEi had longer execution time and is unlocked and marked 
unfixed in SEbest
15 assign the FEi to 1   
16 If the total power consumption and slices of SEbest are satisfying 
system constraints  
17 FEi mark fixed 
18  Else  
19 assign FEi to 0 and FEi mark fixed 
20  locked all FE in level l
21 If don’t exist a unfixed and unlocked FEi then exit 
22 end While 
23 While (the SEbest had FE which marked unfixed) do 
24 If the FEi had longer execution time and marked unfixed in
SEbest
25 assign the FEi to 1 
26 If the total power consumption and slices of SEbest are 
satisfying system constraints 
27 FEi mark fixed 
28 Else 
29  assign FEi to 0 and FEi mark fixed 
30 end While 
31 Processor allocation  
Terminate the algorithm 
TABLE I. GHO PARTITIONING ALGORITHM
encode randomly correspond to FE as 1 or 0 where hardware 
and software are represented, respectively. i.e. SE={FEa
FEb, …, FEv}, FEi {1, 0}. Next, each SE is checked for 
meeting system constraints and without concurrency conflict. 
Moreover, some of SE will be recorded if it unmeet system and 
concurrency constraints. In step 3, a best SE of SEpg will be 
found and recorded by calculating fitness value for each SE. In 
step 4 to 5, according to crossover and mutation rate to execute 
crossover and mutation which result in a set of SE, namely child 
SE (SEcg), is generated. Then, GHO find a best SE and record 
from SEcg by calculating fitness value for each SE. In step 7, we 
compare SEpg with SEcg for fitness value and record a better one. 
IMECS 2007 349
