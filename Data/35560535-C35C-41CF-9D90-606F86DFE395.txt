 （一） 計劃中文摘要 
 
關鍵詞：組合問題，最佳化，生物計算，和RSA 公鑰密碼系統。 
 
在這個研究計劃中，我們展示 RSA 公鑰密碼系統並藉由生物計算使用本文密文攻擊法破解 RSA 
密碼系統提出一個最佳生物計算突破解答。密碼系統是轉換輸入資料成無法辨認的加密形式和轉換無
法辨認的資料回來成它原來解密形式一個演算法。為達到這目的，我們提出五個全面的、新的最佳化
生物計算演算法--平行加法器、平行減法器、平行乘法器、平行比較器和平行模數的數學—這正式地
驗證我們對任何一組在 RSA 公鑰密碼系統本文密文設計的最佳化生物計算解答。在這個研究計劃
中，我們所開發的 RSA 生物計算模組在面臨不確定動態的設定時支持最佳化生物計算決策。我們也證
明使用生物計算電腦來完成數學運算，布爾數學(邏輯)的電路是不需要的。此外，這個研究計劃指出
使用公鑰密碼系統是可能不安全的並且對所有 NP-complete 或 NP-hard 許問題並包括組合問題使用
最佳化生物計算能力來完成複雜數學運算也提出明顯的證據。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
                                            I 
報告內容 
1.   Introduction 
The RSA algorithm [1] is the primary cryptosystem used for security on the Internet and the World Wide 
Web. Adleman [2] succeeded in solving an instance of the Hamiltonian path problem in a test tube by 
handling DNA strands in 1994. One potential significant area of applications for DNA algorithms is the 
breakthrough of encryption schemes [3]. 
 
2.   DNA Manipulations 
A (test) tube is a set of molecules of DNA (a multi-set of finite strings over the alphabet {A, C, G, T}) 
that can perform the following operations: Separate(T, s, T1, T2), Merge({Ti}), Discard(T), Amplify(T, 
{Ti}), Concatenate(s1, s2), Appendhead(T, s), Detect(T), and Read [2, 3]. 
 
3.   DNA-based Algorithm for the Encryption Function in RSA 
Algorithm 1: Implementing the procedure, Encryption(M, e, n) 
(1) MakeValue(Tn).   (2) Init(T0, Tn). 
(3)  MakeInitialValue(Te).   (4) InitialEncryptedForm(T0). 
(5)  For i = k down to 1 
InitialSum(T0, ((2 * (k − i + 1) − 1) − 1) * (k + 1) + 1); 
BinaryParallelMultiplier(T0, 2 * (k − i + 1) − 1, 2 * (k − i + 1) − 1, C, C). 
AssignmentOperator(T0, 2 * (k − i + 1) − 1). 
BinaryParallelDivider(T0, 2 * (k − i + 1) − 1). 
TruncatedAssignmentOperator(T0, 2 * (k − i + 1) − 1, 2 * (k − i + 1)). 
Separate(Te, ei − 11, TeON, TeOFF). 
If (Detect(TeON) = = true) then 
InitialSum(T0, (2 * (k − i + 1) − 1) * (k + 1) + 1). 
BinaryParallelMultiplier(T0, 2 * (k − i + 1), 2 * (k − i + 1), C, M). 
AssignmentOperator(T0, 2 * (k − i + 1)). 
BinaryParallelDivider(T0, 2 * (k − i + 1)). 
TruncatedAssignmentOperator(T0, 2 * (k − i + 1), 2 * (k − i + 1) + 1). 
Else 
TruncatedAssignmentOperator(T0, 2 * (k − i + 1) − 1,2 * (k − i + 1) + 1). 
EndIf 
Te = Merge(TeON, TeOFF). 
EndFor 
EndAlgorithm 
4.   Algorithm 1 Modules that Implement procedure Encryption(M, e, n) 
 
Procedure BinaryParallelMultiplier(T0, a, u, α, β) 
For f = 1 to k 
Appendhead(T0, z(u − 1) * (k + 1) + f, 00); Separate(T0, βf1, T3, T4). 
1 
(1) Separate(T3, yf, g1, T1ON, T2OFF).  (2) Separate(T1ON, ca, j1, T3ON, T4OFF). 
(3) Separate(T2OFF, ca, j1, T5, T6).   (4) Separate(T3ON, zf, g − 11, T7, T8). 
(5) Separate(T4OFF, zf, g − 11, T9, T10). (6) Separate(T5, zf, g − 11, T11, T12). 
(7) Separate(T6, zf, g − 11, T13, T14). 
If (Detect(T7) = true) then Appendhead(T7, yf + 1, g1); Appendhead(T7, zf, g1) EndIf 
If (Detect(T8) = true) then Appendhead(T8, yf + 1, g0); Appendhead(T8, zf, g1). EndIf 
If (Detect(T9) = true) then Appendhead(T9, yf + 1, g0); Appendhead(T9, zf, g1). EndIf 
If (Detect(T10) = true) then Appendhead(T10, yf + 1, g1); Appendhead(T10, zf, g0). EndIf 
If (Detect(T11) = true) then (Appendhead(T11, yf + 1, g0); Appendhead(T11, zf, g1). EndIf 
If (Detect(T12) = true) then Appendhead(T12, yf + 1, g1); Appendhead(T12, zf, g0). EndIf 
If (Detect(T13) = true) then Appendhead(T13, yf + 1, g1); Appendhead(T13, zf, g0). EndIf 
If (Detect(T14) = true) then Appendhead(T14, yf + 1, g0); Appendhead(T14, zf, g0). EndIf 
 (8) T3 = Merge(T7, T8, T9, T10, T11, T12, T13, T14). 
EndProcedure 
 
The following binary parallel adder is used to finish the arithmetic sum for two k-bit binary numbers. 
Procedure BinaryParallelAdder(T3, f, g, a) 
For j = 1 to k;  ParallelOneBitAdder(T3, f − 1, g + j − 1, a, j);  EndFor 
EndProcedure 
 
An assignment operator is an instruction of two operands of (2 * k) bits that the value of the first operand is 
set to the value of the second operand. 
Procedure AssignmentOperator(T0, u) 
For q = 1 to 2 * k 
Separate(T0, yu * (k + 1), q1, T1, T2); Appendhead(T1, p(u − 1) * (k + 2) + 1, q1); 
Appendhead(T2, p(u − 1) * (k + 2) + 1, q0); T0 = Merge(T1, T2); 
EndFor  
EndProcedure 
 
A binary parallel divider is a function that finishes the arithmetic division for a dividend of (2 * k) bits and a 
divisor of k bits. 
Procedure BinaryParallelDivider(T0, u) 
For o = 1 to k + 1 
Appendhead(T0, b (u − 1) * (k + 2) + o, 00);  
ParallelComparator(T0, Tn, T0>, T0=, T0<, u, o); T0>= = Merge(T0>, T0=). 
If (Detect(T0>=) = = true) then 
For q = 1 to (2 * k) − (o − 1) − (k − 1) − 1 
Separate(T0>=, po + (u − 1) * (k + 2), q1, T1, T2). 
If (Detect(T1) = = true) then 
Appendhead(T1, po + (u − 1) * (k + 2) + 1, q1); Appendhead(T1, bo + (u − 1) * (k + 2), q0). 
EndIf 
3 
For j = 1 to k 
OneBitComparator(T0, Tn, T0>, T0=, T0<, u, o, j). 
If (Detect(T0=) = = false) then Terminate the For loop. EndIf 
EndFor 
EndIf 
EndProcedure 
 
Procedure ParallelOneBitSubtractor(T0>=, o, q, j) 
(1) Separate(T0>=, po, q1, T1ON, T2OFF). (2) Separate(T1ON, nj1, T3ON, T4OFF). 
(3) Separate(T2OFF, nj1, T5, T6). (4) Separate(T3ON, bo, q − 11, T7, T8). 
(5) Separate(T4OFF, bo, q − 11, T9, T10). (6) Separate(T5, bo, q − 11, T11, T12). 
(7) Separate(T6, bo, q − 11, T13, T14). 
If (Detect(T7) = = true) then Appendhead(T7, po + 1, q1); Appendhead(T7, bo, q1). EndIf 
If (Detect(T8) = = true) then Appendhead(T8, po + 1, q0); Appendhead(T8, bo, qo). EndIf 
If (Detect(T9) = = true) then Appendhead(T9, po + 1, q0); Appendhead(T9, bo, q0). EndIf 
If (Detect(T10) = = true) then Appendhead(T10, po + 1, q1); Appendhead(T10, bo, q0). EndIf 
If (Detect(T11) = = true) then Appendhead(T11, po + 1, q0); Appendhead(T11, bo, q1). EndIf 
If (Detect(T12) = = true) then Appendhead(T12, po + 1, q1); Appendhead(T12, bo, q1). EndIf 
If (Detect(T13) = = true) then Appendhead(T13, po + 1, q1); Appendhead(T13, bo, q1). EndIf 
If (Detect(T14) = = true) then Appendhead(T14, po + 1, q0); Appendhead(T14, bo, q0). EndIf 
T0>= = Merge(T7, T8, T9, T10, T11, T12, T13, T14). 
EndProcedure 
 
BinaryParallelSubtractor finishes a subtraction for two binary numbers. 
Procedure BinaryParallelSubtractor(T0>=, o, q, u) 
For j = 1 to k;  ParallelOneBitSubtractor(T0>=, o + (u − 1) * (k + 2), 2 * k − (o − 1) − (k − j), j);    
EndFor 
For j = (2 * k) − (o − 1) + 1 to 2 * k 
Separate(T0>=, po +  (u − 1) *  (k + 2), j1, T1, T2). 
Separate(T1, bo +  (u − 1) *  (k + 2), j − 11, T3, T4). 
Separate(T2, bo +  (u − 1) *  (k + 2), j − 11, T5, T6). 
If (Detect(T3) = = true) then Appendhead(T3, po + (u − 1) * (k + 2) + 1, j0); Appendhead(T3, bo + (u − 1) * (k + 2), j0). 
EndIf 
If (Detect(T4) = = true) then Appendhead(T4, po + (u − 1) * (k + 2) + 1, j1); Appendhead(T4, bo + (u − 1) * (k + 2), j0). 
EndIf 
If (Detect(T5) = = true) then Appendhead(T5, po + (u − 1) * (k + 2) + 1, j1); Appendhead(T5, bo + (u − 1) * (k + 2), j1). 
EndIf 
If (Detect(T6) = = true) then Appendhead(T6, po + (u − 1) * (k + 2) + 1, j0); Appendhead(T6, bo + (u − 1) * (k + 2), j0). 
EndIf 
T0>= = Merge(T1, T2, T3, T4, T5, T6). 
EndFor 
5 
計畫成果自評 
 
  本計畫內容的第一部分: Correspondence between a Plain-text and a Cipher-text in the RSA 
public-key cryptosystem發表於The 10th Joint International Conference on Information Sciences 
(JCIS2007) and the corresponding website is http://www.jcis.org/ ，標題為Constructing the RSA 
Public-key Cryptosystem on a DNA-based Computer 一篇。本計畫內容的第二部分: 本文密文攻擊
法破解 RSA密碼系統 發表於 in the chapter 13 of a Harward Medical School published Bioinformatics 
book entitled “Systems Bioinformatics: An Engineering Case-Based Approach” (edited by Dr. Gil 
Alterovitz whose address is Harvard Medical School, Bioinformatics, New Research Building 250, 
Cambridge, MA 02115 (Fax: 617-525-4488)) in the March of 2007. The title of Chapter 13 is “Application 
of bimolecular computing to breakthroughs in RSA public-key”. 
 
本計劃藉由生物計算使用本文密文攻擊法破解 RSA密碼系統，完成:(1) 建置五個全面的、新的最
佳化生物計算演算法--平行加法器、平行減法器、平行乘法器、平行比較器和平行模數的數學，(2) 
Correspondence between a Plain-text and a Cipher-text in the RSA public-key cryptosystem，(3) 本文密文
攻擊法破解 RSA密碼系統，(4) RSA生物計算模組在面臨不確定動態的設定時支持最佳化生物計算決
策， (5) 證明使用生物計算電腦來完成數學運算，布爾數學(邏輯)的電路是不需要的，(6) 這個研
究計劃指出使用公鑰密碼系統是可能不安全的，(7) 對所有NP-complete 或NP-hard 問題並包括組合
問題使用最佳化生物計算能力來完成複雜數學運算提出明顯的證據。 
 
Based upon the new developed DNA logic computing, Systems Bioinformatics的DNA平行加法器、平行
減法器、平行乘法器及平行除法器 that can be enhanced是新趨勢。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
7 
