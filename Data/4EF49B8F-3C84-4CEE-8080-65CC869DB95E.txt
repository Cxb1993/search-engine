Bus Description Language is proposed to describe the 
bus component behavior using FSM model. Bus Protocol 
Checker checks the error when bus is running. Test 
Case Generation generates all the possible transfer 
cases that are legal on bus protocol. Coverage 
Metrics creates a metric that can evaluate the 
coverage of test patterns. Bus Tracing can capture 
the bus behavior that help designer to debug or 
analyze. Designers can create some performance rules 
in Bus Performance Evaluation that we can find out 
the inefficient transfers. The first feature of our 
SOC infrastructure is automated. We can automated 
generate all the left five components refer to Bus 
Description Language. The second feature is cross-
protocol. We can describe all the advanced bus 
protocol by using Bus Description Language, and it 
can generate required components. The third feature 
is synthesizable. In order to achieve lower level 
verification and evaluation, all the SOC 
infrastructure hardware modules are synthesizable RTL 
code. 
英文關鍵詞： cycle level、transaction level、 all signals、bus 
related signals、master related signals、
branch/target filtering、differential approach、
signal encoding、power-on 
 
2 
 
中文摘要 
    當現今系統單晶片的設計越來越複雜，且
為符合市場需求，研發時間勢必越來越短的時
候，一個以匯流排為基礎架構的系統設計是相
當重要的，因為這樣的設計可以縮短研發的時
間。另一方面，如何驗證及評估單晶片系統上
各元件在匯流排之間的傳輸行為，變成是一個
相當重要的課題，因此我們提出一個系統單晶
片的基礎建設來加速硬體設計和評估的時
間。這個基礎建設主要包含六個元件：匯流排
描述語言、匯流排協定檢查器、自動產生測試
實例、測試涵蓋測量器、匯流排追蹤器以及匯
流排效能評估。匯流排描述語言藉由有限狀態
機(FSM)來描述匯流排元件傳輸的行為；匯流
排協定檢查器會動態監控匯流排是否違反了
匯流排的協定；自動產生測試實例會藉由匯流
排的 FSM 產生所有合法的傳輸實例；測試涵
蓋測量器提供一個測量的基準可以用來評估
測試向量的涵蓋率；匯流排追蹤器會即時追蹤
並擷取匯流排的行為來幫助設計者除錯與分
析；設計者可以制定一些與效能相關的規範來
分析匯流排行為是否有效率並改進之。我們的
基礎建設第一個特點是我們只需要描述好匯
流排描述語言就可以全自動化，第二個特點是
經由匯流排描述語言我們可以延伸到各種不
同的匯流排協定，第三個特點是所有產生的硬
體都是可合成的，這樣可以將我們的基礎建設
延展到更低階的階段。在實作上我們將 AHB
匯流排協定檢測器與追蹤器整合至 CIC 的
MorPACK環境與 GUC的 Janus-I環境進行偵
錯；另一方面我們建立了 AXI 環境並且掛上
檢測器與追蹤器實際監控匯流排傳輸；接著針
對單晶片系統從上電到設定完成階段所發生
的檢測空窗期進行改良。本研究在國內外學術
研討會及期刊論文各有一篇，另外本研究也跟
先前的研究成果做整合，並參加了國內及國際
的設計競賽，且得到獎項。 
英文摘要 
 When designs become more complex and the 
shorten Time-to-Market, a bus-based SOC is 
needed for reducing the development time. How 
to verify and analyze the transaction of bus 
behavior of the SOC designs is now a critical 
problem. Thus a SOC infrastructure is proposed 
to speedup verification and evaluation. The SOC 
infrastructure we proposed include six 
components: Bus Description Language, Bus 
Protocol Checker, Test Case Generation, 
Coverage Metrics, Bus Tracing and Bus 
Performance Evaluation. Bus Description 
Language is proposed to describe the bus 
component behavior using FSM model. Bus 
Protocol Checker checks the error when bus is 
running. Test Case Generation generates all the 
possible transfer cases that are legal on bus 
protocol. Coverage Metrics creates a metric that 
can evaluate the coverage of test patterns. Bus 
Tracing can capture the bus behavior that help 
designer to debug or analyze. Designers can 
create some performance rules in Bus 
Performance Evaluation that we can find out the 
inefficient transfers. The first feature of our SOC 
infrastructure is automated. We can automated 
generate all the left five components refer to Bus 
Description Language. The second feature is 
cross-protocol. We can describe all the advanced 
bus protocol by using Bus Description Language, 
and it can generate required components. The 
third feature is synthesizable. In order to achieve 
lower level verification and evaluation, all the 
SOC infrastructure hardware modules are 
synthesizable RTL code. 
 
 
4 
 
料量，根本不適用於嵌入式系統中，以現今的
儲存體技術，要儲存這麼龐大的資料根本不可
能；所以將資料在輸入記憶體單元前做好適當
的壓縮處理，成為位址追蹤技術所要面臨的挑
戰與課題。另外我們在與創意公司合作的案子
中也發現到一個特殊的案例，即使將我們的匯
流排檢測器與追蹤器掛載上單晶片系統，我們
發現仍然會有一些隱形的錯誤發生，經過追查
後我們觀察到，當系統從上電到設定檢測器與
追蹤器之間會有一段時間為監控的空窗期，其
中發生的錯誤由於我們的監控硬體尚未準備
好，以至於無法整卻檢測與分析到其錯誤的根
源，因此我們做了一些硬體修改，將追蹤器能
夠在系統上電時就馬上追蹤匯流排上的信
號，但此時記憶體空間也面臨到相同的挑戰，
因此決定那些信號該追蹤也是我們研究的課
題之一。 
綜合以上各種除錯環境所面臨的議題，歸
納出單晶片系統除錯環境所要達到的需求。
一、除錯環境須支援使用者足夠的觀察訊號以
進行除錯。二、能在不停止系統的前提下達到
即時除錯的功能。三、提供使用者對整個系統
進行除錯的能力，讓使用者能在複雜的設計中
迅速掌握到自己想要的資訊，並找到問題點所
在。為了達到上述的幾個目標，採用位址追蹤
技術是個不錯的方向，可是一般的位址追蹤技
術大都是針對單一微處理器做訊號追蹤，對於
一個複雜的系統除錯而言，這樣的資訊似乎不
夠。在眾多的追蹤訊號中如何提供使用者最低
限度的信號量以進行除錯也是挑戰之一。再
者，因為在複雜系統匯流排晶片上會包含許多
IP，每個IP可能個別驗證過，但IP之間的訊號
在匯流排上還是可能會違反匯流排協定，這時
候就會需要一個匯流排協定檢測器，所以本研
究的目的是希望能提供一個以系統匯流排為
架構的動態即時匯流排追蹤分析器及匯流排
協定檢測器以達到上述的目標。 
 
 
三、 文獻探討 
我們的研究目標是要實作出一個動態的
位址追蹤分析器，有關這方面的技術已有許多
研究者做了很豐富的研究成果，所以在進行研
究之前我們先對這方面的技術做一番探討，藉
此訂定我們改進的方向與目標。在這一個章節
裡我們把和動態位址追蹤器有關的研究大致
分成三大類， (1)監測技術方面，2001 年
Mohammed El Shobaki和Lennart Lindh提出的
MAMon Monitor 系統[1]，提供了一個事件觸
發的軟硬體除錯架構。在系統晶片上根據想要
監測的 IP Core掛上MAMon除錯裝置，並且
透過監測過濾不同狀態下的訊號達到除錯的
功能。Monitor 的觀念除了應用在真實硬體上
的除錯功能外，在 2004 年也有研究利用
Monitor 的觀念對於 On-Chip Bus 行為和
Coverage分析作更進一步的利用[2]。首先，必
須針對 On-Chip Bus的行為建立一個有限狀態
機(Finite State Machine)，再利用這個 Bus 的
FSM 作為監控比對的基準。在(2)位址追蹤壓
縮技術方面，在 2001年 Eric E. Johnson, Jiheng 
Ha和M.Baqar Zaidi提出的一個針對位址和時
間郵戳進行壓縮的 PDATS方法[3]。這個方法
針對存取型態(Reference type)、指令位元址
(Instruction address)、資料位址(Data address)
和時間郵戳(Time stamp)四個追蹤後的資料進
行壓縮編碼。PDATS 利用空間的區域性
(Spatial Locality)的特性作壓縮，屬於 One-Pass
的壓縮法。而 Locality-Based Online Trace 
Compression (LBTC)的追蹤壓縮法在 2004 由
Yue Luo 和 Kurian John提出[4]。這個追蹤壓
縮法除了記錄一般追蹤的資料，像是存取型
態、指令位元址、指令、資料位元址之外，還
記錄了額外的 Attributes(mode、memory type、
CR3 register…)，能夠為程式開發者提供更多
的系統執行時的資訊，進而達到更有效率的除
錯。最後在(3)無失真演算法 參考了[5] [6] [7]
三種不同的無失真演算法。 
6 
 
固定的，也許在某個時間點一次傳出很大的
資料量，也有可能在某個時間點沒有任何的
訊號改變而沒有資料產生，所以利用在資料
接到Host端時利用FIFO作為緩衝。 
 
II. 第三年 : AXI驗證環境 
A.匯流排訊號追蹤器(Tracer) 
    同AHB追蹤器，為了避免過高的追蹤資料
量，我們需要先將資料透過硬體做適當的壓
縮。如Figure 2所示，我們透過抽象模組
(Abstraction Module)將資料依其特性分類成
Address、Data及Control訊號，接著再將資料依
使用者的需求抽象成各個不同的階層，每種階
層所要追蹤的資料都不相同，接著把抽象處理
過訊號送至壓縮模組(Reduction Module)，此模
組依訊號種類和抽象階層不同而採用不同的
壓縮法來將訊號壓縮，以達到更高的壓縮率。
經壓縮處理後，每個周期的壓縮量依訊號特性
會有不同，故須先透過封裝模組 (Packing 
Module)將壓縮過的資料加上標頭(Header)，並
以週期為單位包裝成封包，最後透過緩衝模組
(FIFO Module)將資料緩衝後，統一成固定的長
度後輸出。 
 
Figure 2 AMBA AXI Tracer Hardware Architecture 
    以 AXI Tracer的架構圖為例，整個系統由
三級管線組成，主要由抽象模組(Abstraction 
Module)、壓縮模組(Compression Module)和封
裝模組(Packing Module)這三個區段組成。在接
下來的章節中，我們將針對這三個主要的模組
做更詳細的硬體功能描述與介紹。 
Abstraction Module 
 
我們所追蹤的信號首先會經過抽象化模
組，在這個模組我們會將追蹤到的訊號作初
步的訊號分類處理，提供給之後的壓縮模組
使用，所以在這個模組中主要的兩個功能
為，一、資料的分類，二、資料的抽象化。 
Bus Signals Classification 
AXI主要訊號有31種共192個Bits，如果直
接對這31種訊號做壓縮，則每個週期追蹤到的
訊號相關聯性將非常低，為了得到更好的壓縮
品質，我們在壓縮之前會先依據訊號的屬性將
其分成四個類別為ADDRESS、DATA、ACS、
PCS。 
Bus Signals Abstraction 
在抽象化模組的部分，前面有提到追蹤到
的資料，除了資料的分類之外另外一項重點是
抽象化，主要的目的在提供使用者一個多重解
析的環境。因為使用者在追蹤系統行為時，未
必會需要所有的資訊，有些分析只需要部份資
訊即可，因此我們提供的抽象化等級，可依使
用者需求決定，避免記憶體紀錄了不必要的資
訊而造成不必要的浪費；所以我們期望可以因
應使用者需求而調整所需追蹤的詳細度。 
 
Figure 3 Signal/timing abstraction and trace modes 
Reduce module 
資料經過抽象模組後，將依其屬性分成四
類，分別為 ADDR、DATA、Access Control 
Signals和 Protocol Control Signals。當壓縮模
組收到這些分類過的資料以後會採用適當的
壓縮方式進行壓縮，而為了達到更高的記憶體
使用率，我們使用反向編碼壓縮演算法來實作
壓縮模組的部分。其中 ADDRESS壓縮模組因
8 
 
 依據我們的匯流排檢測器的 rule分析
出，無論AHB或AXI匯流排的控制信號都是
判斷系統整體狀況的重要憑據，故控制信號
都是必須追蹤的； 
AHB檢測器其中有9個rule為位址相關的
rule，只有1個是資料相關的rule，因此這裡我
們只選擇位址信號去追蹤；每周期追蹤控制
信號與位址信號共有60-bit，AHB追蹤器壓縮
率可達80%，故可確實避免FIFO的overflow。 
 AXI匯流排較為複雜，因此光是追蹤控制
信號就要76-bit，且AXI檢測器當中只有3個
rule為資料和位址相關，故我們只選擇控制信
號去追蹤，以避免FIFO的overflow。 
 
五、結果與討論 
由上面的說明可以知道本計劃實現了
AHB與AXI兩種版本的匯流排追蹤器 (bus 
tracer)與匯流排檢測器(bus checker)，並且新
增了一些新的針錯機制，可針對某協定錯誤
對晶片做特定的追蹤，以加速使用者對整個
系統的監控，另一方面也對系統剛上電時的
偵錯空窗期進行了改進與討論；本實驗室利
用Designware的IIP建立了AXI環境，並讓AXI
匯流排追蹤器與檢測器實際監控AXI架構的
晶片系統。 
實驗環境(Janus-I 發展版) 
此環境為本實驗室跟創意電子之合作計
畫所使用的發展平台，此環境的主要目的是利
用本實驗室發展的匯流排訊號追蹤器(Tracer)
即時追蹤匯流排上的訊號，並透過 PCI-AHB
之轉換界面將AMBA AHB之匯流排訊號轉換
為 PCI匯流排訊號，並將轉換完的 PCI訊號即
時的存進個人電腦之儲存裝置中，在系統模擬
完後我們可進一步針對這些追蹤到的匯流排
訊號做效能之分析，而分析完的結果則有利於
系統晶片之效能改進。 
    Figure 6是整個 Janus-I的整合環境。在
Janus-I Mother Board 方面主要包含了一顆
ARM926EJ-S 處理器以及 SDRAM的資源，
ARM926EJ-S 會讀取儲存在 SDRAM 的指令
來執行，及依使用者需求存取 FPGA Board 上
元件的資料。 
 
Figure 6 Janus-I development environment 
    以下對 Janus-I 發展環境之主要元件做簡
單的介紹 
 Static Memory Controller(SMC) 
    控制 SRAM的存取,若匯流排上之 master
欲存取 SRAM則須經由 static memory 
controller。 
 Local Memory Controller(LMC) 
    控制ROM的存取,若匯流排上之master欲
存取ROM則須經由static memory controller。 
 Tracer及Trace Memory(On-chip memory) 
    Tracer模組能夠Real-time追蹤Janus-I發
展平台之匯流排訊號，並將其訊號儲存到
Tracer附屬之trace memory內。Tracer在SoC中
能夠扮演追蹤內部訊號的腳色，以供測試晶
片測試上所需。透過Tracer，我們就可以使用
軟體設定Tracer之控制暫存器來控制Tracer，
進而記錄晶片內部運作的情形。 
 Protocol Checker(HPChecker) 
    HPChecker是一個可以偵測AHB匯流排
上溝通協定是否符合AHB匯流排規格的模
組。並且是以Rule-based為基礎開發的監控硬
體，當匯流排溝通協定與AHB規則相違背
時，則HPChecker會發出Error的訊息告知錯
誤。 
 我 們 在 Janus-I 環 境 進 行 power-on 
debugging的實驗，並觀測到了數筆錯誤違反
了協定，如Table 1，證明我們能在系統上點
時就立即偵錯，Figure 7為追蹤器在power-on
到設定追蹤器這段時間所追蹤到rule18相關
的錯誤信息，這個錯誤表示GUC所設計的
ARM9 wrapper並未完成與HBURST相對應的
第4筆資料，只完成3筆資料就直接執行下一
個傳輸；GUC工程師最後發現它們所設計的
wrapper有專為提升效能所設計的電路，雖然
10 
 
Compression in SoC" IEEE Transactions on 
Computers,Vol. pp, Issue 99, page 1, 28 Sept. 
2010. (SCI). 
 Liang-Bi Chen, Jiun-Cheng Ju, Chien-Chou 
Wang, and Ing-Jer Huang "HPChecker: An 
AMBA AHB On-Chip Bus Protocol Checker 
with Efficient Verification Mechanisms" IEICE 
Transactions on Information and Systems, 
Vol.E93-D, No.08, Aug. 2010. (SCI). 
 Fu-Ching Yang, Cheng-Lung Chiang, and 
Ing-Jer Huang "A Reverse-Encoding-Based 
On-Chip Bus Tracer for Efficient 
Circular-Buffer Utilization" IEEE 
TRANSACTIONS ON VERY LARGE SCALE 
INTEGRATION (VLSI) SYSTEMS, VOL. 18, 
NO. 5, MAY 2010. Page(s): 732 - 741 (SCIE) 
 Chien-Hung Chen, Jiun-Cheng Ju, and Ing-Jer 
Huang "A Synthesizable AXI Protocol Checker 
for SoC Integration" 2010 IEEE International 
SoC Design Conference (ISOCC'10), Incheon, 
Korea, Nov. 2010. 
 Chun-Hung Lai, Fu-Ching Yang, Chung-Fu 
Kao, and Ing-Jer Huang "A trace-capable 
instruction cache for cost efficient real-time 
program trace compression in SoC" 
Proceeding of the 46th Design Automation 
Conference (DAC 2009), Jul. 26-31, 2009. 
(EI) 
 Fu-Ching Yang, Cheng-Lung Chiang, and 
Ing-Jer Huang "A reverse-encoding-based 
on-chip AHB bus tracer supporting both 
Post-T and Pre-T trace" In Proceedings of 
International Symposium on Circuits and 
Systems (ISCAS 2009), Taipei, Taiwan, May 
24-27, 2009. (EI) 
 Fu-Ching Yang, Cheng-Lung Chiang and 
Ing-Jer Huang "A Reverse-Encoding-based 
on-chip AHB Bus Tracer for EfficientCircular 
Buffer Utilization" In Proceedings of the 2009 
14th IEEE/ACM Asia and South Pacific 
Design Automation Conference 
(ASP-DAC'09) , Yokohama, Japan, Jan. 2009. 
(EI) 
 Ing-Jer Huang, Fu-Ching Yang, Yi-Ting Lin, 
Chung-Fu Kao "An On-Chip AHB Bus Tracer 
With Real-Time Compression and Dynamic 
Multiresolution Supports for SoC" IEEE 
Transactions on VLSI Systems,Vol. 19, Issue 
4,Page 571, April 2011. (SCI). 
 Ing-Jer Huang, Chien-Hung Chen, 
Cheng-Lung Chiang, Jiun-Cheng Ju and Alan 
P. Su "A Bus-based Protocol Checker and 
Tracer for Hybrid ESL with SoC Platform 
Debug" DAC Workshop on Diagnostic 
Services in Network-on-Chips, June 5, 2011. 
 Ing-Jer Huang, Ping-Chung Lee, Shou-Jay 
Hou , Cheng-Lung Chiang, Jiun-Cheng Ju " 
Power-On Bus Tracing and Checking for SoC 
Verification" Proc. 2th VLSI Design/CAD 
symposium (2011), Taiwan, Aug 2011. 
 
相關競賽 
 黃英哲老師帶領學生侯少杰參加
2011德國紐倫堡國際發明展，題
目為本計劃所產生的三項技術，
分別為切片轉換式資料壓縮方法
與系統、反向壓縮系統及方法、
應用於循環記憶體之壓縮資料管
理系統及方法，在此榮獲金牌。 
 
 
 
六、參考文獻 
[1] Mohammed El Shobaki and Lennart Lindh,    
    “A Hardware and Software Monitor for   
    High-Level System-on-Chip Verification,”  
    Proc. of International Symposium on  
    Quality Electronic Design, 26-28 March   
    2001, pp.56-61 
[2]  Hue-Min Lin, Chia-Chih Yen, Che-Hua 
Shih and Jing-Yang Jou, “On 
Compliance Test of On-Chip Bus for 
SOC,” Proc. of ASP-DAC, Jan. 2004, pp. 
328-333 
[3]  Eric E. Johnson, Jiheng Ha, and 
M.Baqar Zaidi, “Lossless Trace 
Compression,” IEEE Trans. on 
Computers, vol. 50, no. 2, Feb. 2001, pp. 
158-173 
[4] Yue Luo and Kurian John, “Locality-Based 
Online Trace Compressoion,” IEEE Trans. 
on Computers, vol. 53, no. 6, June 2004, 
pp. 723-731 
[5]  Gallager, R.G., “Variations on a Theme by 
12 
 
國科會補助專題研究計畫成果報告自評表 
請就研究內容與原計畫相符程度、達成預期目標情況、研究成果之學術或應用
價值（簡要敘述成果所代表之意義、價值、影響或進一步發展之可能性）、是
否適合在學術期刊發表或申請專利、主要發現或其他有關價值等，作一綜合評
估。 
1. 請就研究內容與原計畫相符程度、達成預期目標情況作一綜合評估 
■  達成目標 
□ 未達成目標（請說明，以 100字為限） 
□ 實驗失敗 
□ 因故實驗中斷 
□ 其他原因 
說明： 
2. 研究成果在學術期刊發表或申請專利等情形： 
論文：■已發表 □未發表之文稿 □撰寫中 □無 
專利：■已獲得 ■申請中 □無 
技轉：■已技轉 ■洽談中 □無 
其他：（以 100字為限） 

 2
   
圖 1 廠商聯合參展 
   
圖 2 Korea Advanced Institute of Science and Technology 所設計的 32bit RISC 
 
大會當天晚上免費提供晚宴，菜色佳餚非常豐盛，並且在用餐過程當中，精緻的安排當地的
表演。 
 
   
圖 3 晚宴上所安排的表演 
 
這是我第一次自行參與國際性的研討會，出國前的準備到回國均是自行安排，從訂購飛機票、
住宿地點、參加會議註冊費用…等。記得上一次出國是碩士班時，是跟前實驗室一同出國，很多
手續都是學長及老師協助處理，不必擔心出國手續。但是經過這一次的經驗，讓我體會到出國前
的準備工作及規畫的重要性，例如機票上的名字、旅館的確認、如何轉乘巴士等。看似很容易的
食、衣、住、行，但是在不同國家及語言，沒有事先規畫好或小疏失，而錯過時間或交通工具之
班次，而造成無法順利出國參加研討會，是非常大損失。另外在研討會的第二天，剛好發生北韓
轟炸南韓延平島，造成四人死亡，兩韓戰爭一觸即發。幸好原本的回國行程規畫，就在會議結束
的隔天回國，機票早已經訂好，這讓台灣的親人及朋友都非常擔心，我們是不是可以順利回國。
最後，很高興能順利出國參加研究會，並且能平安回國，也見識到國際性研討會的規模以及學術
交流的價值。 
 
二、與會心得 
  -1- ISOCC 2010 
A Synthesizable AXI Protocol Checker for SoC 
Integration 
Chien-Hung Chen, Jiun-Cheng Ju, and Ing-Jer Huang 
Department of Computer Science and Engineering 
National Sun Yat-Sen University 
Kaohsiung, Taiwan, R.O.C. 
{d953040019, m953040070}@student.nsysu.edu.tw; ijhuang@cse.nsysu.edu.tw 
 
 
Abstract—System-on-a-Chip (SoC) design has become more and 
more complexly. Because difference functions components or IPs 
(Intellectual Property) will be integrated within a chip. The 
challenge of integration is “how to verify on-chip communication 
properties”. Although traditional simulation-based on-chip bus 
protocol checking bus signals to obey bus transaction behavior or 
not, however, they are still lack of a chip-level dynamic 
verification to assist hardware debugging. We proposed a rule-
based synthesizable AMBA AXI protocol checker. The AXI 
protocol checker contains 44 rules to check on-chip 
communication properties accuracy. In the verification strategy, 
we use the Synopsys VIP (Verification IP) to verify AXI protocol 
checker. In the experimental results, the chip cost of AXI 
protocol checker is 70.7K gate counts and critical path is 4.13 ns 
(about 242 MHz) under TSMC 0.18um CMOS 1P6M Technology.  
Keywords-AMBA AXI; Protocol Checking; VIP; debugging; 
Rule-based 
I. INTRODUCTION 
In recent years, the improvement of the semiconductor 
process technology and the market requirement increasing. 
More difference functions IPs are integrated within a chip. 
Maybe each IPs had completed design and verification. But the 
integration of all IPs could not work together. The more 
common problem is violation bus protocol or transaction error. 
The bus-based architecture has become the major integrated 
methodology for implementing a SoC. The on-chip 
communication specification provides a standard interface that 
facilitates IPs integration and easily communicates with each 
IPs in a SoC.  
To speed up SoC integration and promote IP reuse, several 
bus-based communication architecture standards have emerged 
over the past several years. Since the early 1990s, several on-
chip bus-based communication architecture standards have 
been proposed to handle the communication needs of emerging 
SoC design. Some of the popular standards include ARM 
Microcontroller Bus Architecture (AMBA) versions 2.0 and 
3.0, IBM CoreConnect, STMicroelectronics STBus, Sonics 
SMARRT Interconnect, OpenCores Wishbone, and Altera 
Avalon[1]. On the other hand, the designers just integrate their 
owned IPs with third party IPs into the SoC to significantly 
reduce design cycles.  However, the main issue is that how to 
efficiently make sure the IP functionality, that works correctly 
after integrating to the corresponding bus architecture. 
There are many verification works based on formal 
verification techniques [2]-[6]. Device under test (DUT) is 
modeled as finite-state transition and its properties are written 
by using computation tree logic (CTL) [7], and then using the 
verification tools is to verify DUT’s behaviors [8]-[10]. 
Although formal verification can verify DUT’s behaviors 
thoroughly, but here are still unpredictable bug in the chip-
level, which we want to verify them.  
Kanna Shimizu et al. [11] proposed an early rule-based 
monitor to check PCI bus protocol. Oliveira and Alan J. Hu [12] 
proposed a high-level specification style that can generate a 
hardware monitor. Interface-monitor-based methodologies to 
watch the interface between a block and the rest of the system 
[13][14]. The DUT is checked cycle by cycle during simulation 
to make sure the DUT obeys all these rules. Therefore, this 
approach is very efficient when we integrate several IPs. 
However, many errors may occur in real-time that the 
monitored-based approach often cannot find errors in 
simulation environment. The simulation-based verification IP 
is non-synthesizable code; they cannot be used in FPGA or 
chip-level. There are still need more efficient way verify the 
system, only violated rules cannot help designer to find errors 
rapidly. To overcome this problem, an AMBA AHB on-chip 
bus protocol checker with an efficient mechanism called 
HPChecker, is proposed in [17]. In recent years, for high-
performance SoC requirements, the AMBA AXI on-chip bus 
protocol is defined [18] that targets at high-performance, high-
frequency system design and includes a number of features that 
make it suitable for a high-speed submicron interconnects.  
The benefits of using rule-based design include   improving 
observability, reducing debug time, improving integration 
through correct usage checking, and improving communication 
through documentation. In the final purpose, increasing design 
quality while reducing the time-to-market and verification costs 
[19]. We anticipate that the AMBA AXI protocol checking 
technique will be more and more important in the future. 
Hence, we propose a synthesizable AMBA AXI protocol 
checker with an efficient verification mechanism based on rule 
checking methodology. There are 44 rules to check the AMBA 
AXI protocol that provide AXI master, slave, and default slave 
protocol issues. 
This work was partially supported by National Science Council (NSC) of
Taiwan, R.O.C. under contract NSC-97-2221-E-110-076-MY3. 
  
  -3- ISOCC 2010 
6) Exculsive: This sub-module is to check exclusive lock 
related rules. The exclusive access mechanism enables master 
that can lock particular slave without lock the whole bus.  
7) LOCK: This sub-module is to check lock related rules. 
The locked transfer is provided that if a master performs a 
locked transfer. The behavior that assert/de-assert the 
AWLOCK/ARLOCK signal is very serious to the system. If a 
master does not obey the rule to perform the locked transfer, 
the system may be locked and cannot work correctly. 
8) Surprise data: The sub-module is to check there have 
some surprise data receive by master/slave or not. 
9) Cache: This sub-module is to check CACHE signals 
related rules.  
10) Handshake: This sub-module is to check handshake 
signals related rules. The two-way flow control mechnism 
enables both the master and slave to control the rate at which 
the data and control information moves.  
11) ORDER: This sub-module is to check the data or 
address order. The AXI protoocl enables out-of-order 
transaction completion and issuing of multiple outstanding 
address, the data transfer will more complicated, so we must 
to check the data/address tansfer order.  
12) WDATA: There is only one rule to check the write data 
related signals. The transfer size must be lower or equal to the 
data bus width.   
13) Concurrency: This sub-module is to check concurrency 
related rules. Each master or slave transfer data must go 
through the complicated interconnect, there can be some 
transfer delays, let the data order mismatch.  
14) ID: This sub-module is to check the ID related rules. 
The AXI protocol provides an ID field to enable a master to 
issue a number of separate transactions, each of which must be 
returned in order. 
15) Resetn: This sub-module is to check some signals status 
during the system reset. According to AXI spec, some AMBA 
AXI signals are recommended when the system is reset.  
16) WSTRB: This sub-module is to check WSTRB signal 
related rules. Each writing strobe signal corresponds to one 
byte lane of write data bus. When asserted, a write strobe 
indicates that the corresponding byte lane of the date bus 
contains valid information to be updated in memory. 
B. Configuration Registers 
The configuration register can let the designer to set some 
parameters, including mask, and protocol checker enable. The 
enable bit can enable or disable the AXIChecker. The designer 
can base on the requirement of the system to mask some 
unnecessary rule checked. For example, if we integrate one 
master IP into pre-verified AXI platform, we just need to check 
master-related rules and disable all other rules. If we modified 
a master, we only need to check master related rules.  
As shown in Figure 1, the rule configuration register will 
mask the ERROR outputs. If we disable some rules, the 
corresponding ERROR bits will be mask. Another applicable 
debugging method is that if we want to focus on one target IP 
we want to debug, we can enable corresponding rules and 
disable irrelevant rules, which we can narrow down the 
problem region. 
C. Error Reference Table (ERT) 
Traditional protocol checkers will assert error signals or a 
printout error message for every error occurs, but this way is 
very inefficiently for early debugging in long simulation 
period. In early debugging period, there may have many errors, 
especially when test bench or real case application has very 
long execution time. Such large amount of log messages or 
error signals waveform could help designer to debug limitedly, 
because that will be hard to read or analyze. Moreover, we do 
not care about the timing information when error occurred in 
most case. Thus, we provide an error reference table that can 
summarize what errors have been occurred. 
 
Figure 2.  Verification in Synopsys bus monior VIP environment. 
Figure 1 shows the concept of error reference table, which 
the rows are corresponding to every error; the columns are 
Corresponding to every ID of master or slave. We total support 
16 masters and 16 slaves, thus the number of column is 32. We 
total have 31 master-related rules, 12 slave-related rules, and 
one default-slave-related rule. Each master-related and slave-
related error needs one row due to that every 32 master/slave 
may be happen this error. Each error consumes one row of the 
ERT. Thus, ERT total has 32 columns and 44 rows. 
III. VERIFICATION STRATEGY 
We use two methods to verify our proposed AXIChecker. 
One is the RTL trigger to generate bus signals and another is 
by using Synopsys VIP. The first verification strategies are 
buggy verification plans. We construct the wrong condition 
case by case. If the rule case is constructed, the protocol 
checker module will observe these signals. While the protocol 
checker module detects that it is a protocol violation then it will 
assert a corresponded error flag to tell the reference table. 
A. RTL Trigger to Generate Bus Signals 
Behavioral buggy masters and slaves connect to the bus and 
then the AXIChecker will observe these signals. 
B. Synopsys VIP 
Figure 2 shows AXIChecker verification architecture in 
Synopsys VIP environment. The software is available from the 
Synopsys. It can also verify the IP protocol and also can 
generate the correct behavior of IP. We use the generated 
correct behavior to correct our AXIChecker. This step is used 
to avoid misunderstanding on AMBA AXI protocol or some 
unconsidered conditions. 
 1
 
國科會補助專題研究計畫項下出席國際學術會議心得報告 
                                   日期： 100 年 6 月 25 日 
一、參加會議經過 
本次出國主要的目的是去參加 2011 在美國 San Diego 舉辦第 48 屆 DAC 國際論文發表會，該
會議議題是針對 SoC 設計及應用為討論主軸，所有與會人員都必須在 6 月 4 日早上，到達舉辦的
場地做報到的手續，因為是第二次自己處理出國手續，選擇提前一天到美國住宿。本次投稿類型
是 Workshop 並且已經被安排為 Poster 展出，論文題目為 A Bus-based Protocol Checker and Tracer for 
Hybrid ESL with SoC Platform Debug，平均每位可以報告 15 分鐘，其中包含提問討論 3 分鐘。在
參加會議過程中，也去觀摩國際間在 SoC 上的研究及其應用領域上的趨勢、方法及發展的現況。 
同時在會場週邊有相關 SoC 及自動化設計廠商進行展示，展示內容大多以軟、硬體開發平台
及 ESL 發展工具為主，光是參加展覽的廠商就遠遠超過 200 家以上，其中知名世界大廠有 ARM、
TSMC、Synopsys、Cadence 等等，看到如此規模可猜想，不論學術或業界都非常重視這一年一度
的研討會。能夠參加本次會議，很感謝實驗室及指導老師所提供的相關協助及資源。這是我第二
次自行參與國際性的研討會，出國前的準備到回國均是自行安排，從訂購飛機票、住宿地點、參
加會議註冊費用…等。前一次是到韓國仁川參加 ISOCC，入境韓國是免簽證，所以簽證手續上會
比較簡便。但是這一次是到美國，在簽證手續上就比較麻煩及嚴僅，因為時間上沒有掌控好，差
一點就沒有辦法完成美簽面試，經過這一次的經驗，讓我體會到出國前的準備工作及規畫的重要
計畫編號 NSC 97-2221-E-110-076-MY3 
計畫名稱 基於匯流排驗證和評估之系統晶片基礎建設自動化產生器(3/3) 
出國人員
姓名 陳建宏 
服務機構
及職稱 國立中山大學資訊工程學系博士生 
會議時間 100 年 6 月 5 日至 100 年 6 月 9 日 會議地點 美國聖地牙哥 
會議名稱 
(中文)2011 年第 48 屆設計自動化會議 
(英文)2011 48th DAC (Design Automation Conference) 
發表論文
題目 
(中文)針對混雜電子系統層級系統晶片平台之匯流排基礎協定檢測器
及追踨器 
(英文) A Bus-based Protocol Checker and Tracer for Hybrid ESL with SoC Platform 
Debug 
附件四 
 3
 
Taiwan & Canada Cooperation Poster Session talk 
Poster on WIP(Work in Progress) Poster on WIP(Work in Progress) 
 
二、與會心得 
參與本次會議令人大開眼界，堪稱世界一流 DAC 研討會，不僅吸引世界相關領域的研究人
員，同時也吸引業界及設計應用大廠共同參展，光是參加展覽的廠商就遠遠超過 200 家以上，其
中知名世界大廠有 ARM、TSMC、Synopsys、Cadence 等等，看到如此規模可猜想，不論學術或業界
都非常重視這一年一度的研討會。 
這是我第一次個人獨自前往美國，從桃園國際航線直飛美國洛山機，再由美國國內線轉機至
聖地牙哥，在轉機過程當中令我印象深刻的是機場大到無法想像，因為國際線轉國內線是在不同
Terminal 並且有點距離，要由機場內的接駁巴士，轉接到另一個 Terminal，大概要四到五分鐘的
車程，可見機場規模之大。 
本次的論文研討會會場中，準備有咖啡、汽水、可樂、茶等等，完全免費招待給與會人員，
另外，在不同的 poster 展出時，會有免費的冰棒招待。每到中場休息時也會有小點心，直到傍晚
會議結束時有酒會及水果、蛋糕招待。 
1戈麗安
 寄件者: 陳建宏 <chchen.nsysu@gmail.com>
寄件日期: 2012年1月5日星期四 下午 1:00
收件者: 戈麗安
主旨: 麗安姐這是去年美國DAC研討會的論文接受信函
 
---------- Forwarded message ---------- 
From: Thilo Pionteck <pionteck@iti.uni-luebeck.de> 
Date: 2011/4/20 
Subject: Your submission to DAC Workshop on "Diagnostic Services in Network-on-Chips 
(DSNoC)" 
To: "\"Chien-Hung Chen(陳建宏)\"" <d953040019@student.nsysu.edu.tw> 
Cc: Thilo Pionteck <pionteck@iti.uni-luebeck.de>, Lily p <lili@nju.edu.cn>, "Pande, 
Partha" <pande@eecs.wsu.edu> 
 
 
Dear Chien-Hung Chen, 
 
We are happy to inform you that your paper entitled "A Bus-based Protocol Checker and 
Tracer for Hybrid ESL with SoC Platform Debug", submitted to DAC Workshop on 
"Diagnostic Services in Network-on-Chips (DSNoC) 2011" has been accepted for poster 
presentation at the workshop. 
 
Please prepare an A0-sized (84.1 cm x 118.9 cm or 33.11 inches x 46.81 inches) poster 
and bring it to the workshop. For the camera-ready manuscript please use the IEEE 
conference style and send it via email to submissions@dsnoc.org. The manuscript should 
not exceed 2 pages. Please note that the deadline for submitting the final camera-
ready manuscript for the handout is May 8. We will distribute the handout with all 
accepted papers at the workshop. 
 
As a participant to the technical program you are required to register for the 
Workshop by May 6. You should have already received an email from DAC office with 
registration information. In the case you didn’t get this email, please contact me. 
 
We thank you again for your contribution and we look forward to meeting you in San 
Diego on June 5, 2011. 
 
Sincerely, 
 
Thilo Pionteck - General Chair 
University of Lübeck, Germany 
Email: pionteck@iti.uni-luebeck.de 
 
Li Li - Program Co-Chair 
Nanjing University, China 
Email: lili@nju.edu.cn 
A Bus-based Protocol Checker and Tracer for Hybrid 
ESL with SoC Platform Debug
Chien-Hung Chen, Cheng-Lung Chiang, Jiun-Cheng Ju, Ing-Jer Huang, and §Alan P. Su 
Department of Computer Science and Engineering, National Sun Yat-Sen University, Kaohsiung, Taiwan, R.O.C. 
 
Abstract—System-on-Chip (SoC) design is more and more com-
plexity. The complex system integrated hardware and software 
functions. The system level integration challenge is focused on 
verification and debugging from the ESL down to gate level. The 
hybrid platform supported ESL and emulator environment. But, 
the down to gate level lacked of controllability and observability 
that hard to debug system. We propose a synthesizable bus-based 
protocol checker and tracer that support a dynamic debugging for 
hybrid co-emulation platform. The protocol checker not only sup-
ported automation detection protocol error but also event trigger 
tracer for start or stop monitoring. The bus trace had real-time 
data compression and dynamic multi-resolution monitor. We 
dumped the monitor result and used software to analysis result 
from the error reference table and trace memory.  In the experi-
mental results, we had corrected some errors of the hybrid proto-
type platform. 
I. INTRODUCTION 
In modern SoCs design are increasing more and more com-
plexity. In the system level integration used co-simulation and 
co-verification that crossed difference virtual platforms or si-
mulation environments. The hybrid virtual platform provided a 
suitable co-simulation or co-emulation environment for system 
level integration. In the figure 1 shows hybrid ESL virtual IP 
with FPGA, RISC and peripherals.  However, in the FPGA or 
physical SoC lacked of automatically controllability and obser-
vability for debugging.  
Based on the above mentioned, a complexity SoC design 
adopt bus-based architecture for integration difference IPs.  In 
this paper, we present a bus-based protocol checker and tracer 
for hybrid platform co-emulation debugging. The implemen-
tation debug mechanism is synthesizable and reconfigurable 
hardware. 
 
 
Figure 1 Hybrid Virtual IP with SoC Platform 
II. PROPOSED BUS-BASED DEBUG  MECHANISM 
In the hybrid platform, the host side could run a SystemC or 
C++ programs, the target board with FPGA and physical IPs 
to run emulation.  We proposed a bus-based protocol checker 
and bus tracer assisted in system level verification and debug-
ging.   
A. Protocol Checker 
The protocol checker is a dynamic verification method and 
a synthesizable hardware for AHB Bus. In the figure 2 shows 
the protocol checker contains a rule-based checker module 
and an error reference table (ERT) module. There are 77 rules 
to check the AMBA AHB protocol. The ERT is formed by a 
matrix. The rows of ERT input detected errors from the rule-
based checker module, and the columns stored the master and 
slave ID. Any one error was detected and stored in the ERT. 
At the same time the error message could be configured into 
trigger source for the tracer.  The configuration register could 
let user select specific rule or ignore some errors [1]. 
B. Bus Tracer 
The AHB bus tracer consisted of abstraction module, com-
pression module, packing module, and trace memory. The ab-
straction module classified bus signals into Address, Data, 
PCS (Protocol Control Signals), and ACS (Access Control 
Signals) groups. The compression module reduced the trace 
data size. The packing module received difference length 
compression data. The packing module generate a header as 
packet for isolate each one compression data. Because trace 
memory size is fixed length, but packing module receives is 
variable length. We used FIFO buffer to adjust variable length 
data to fix length for trace memory [2].  
C. Reconfiguation control registers  
The protocol checker and bus tracer are reconfigurable 
hardware. We used memory map registers method to approach 
reconfigurable functions.  The user could through any one mas-
ter port to read/write specific memory space to control registers. 
For example, the user could use commercial debug tools as 
RVDS to handle ARM9 to read/write specific memory. Anoth-
er one method, the user could through host PCI to control mas-
ter port of FPGA inside to access control registers. In the figure 
3 shows user space wants to access FPGA hardware request. 
The device drive will translate user space data address to con-
trol PCI2AHB signals.  
§This work was partially supported by Global Unichip(GUC) Gorp. Hsin-
chu, Taiwan, R.O.C.  
國科會補助計畫衍生研發成果推廣資料表
日期:2012/01/05
國科會補助計畫
計畫名稱: 基於匯流排驗證和評估之系統晶片基礎建設自動化產生器
計畫主持人: 黃英哲
計畫編號: 97-2221-E-110-076-MY3 學門領域: 積體電路及系統設計
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
本計劃所產生的三項技術參加 2011 德國紐倫堡國際發明展，分別為切片轉換式
資料壓縮方法與系統、反向壓縮系統及方法、應用於循環記憶體之壓縮資料管
理系統及方法，榮獲金牌。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
