1 
行政院國家科學委員會專題研究計畫成果報告 
總計畫：電子系統層級設計技術開發及其在多格式系統晶片的應用 
子計畫五 : 
電子系統層級功率評估與連接功率最佳化於 
多格式系統單晶片應用之研究 
 ESL Power Estimation and Optimization of Communication Channels for 
Multi-Format SoC 
計畫編號：NSC 96-2220-E-006-010、NSC 97-2220-E-006-006、NSC 98-2220-E-006-006 
執行時間：96年8月1日至99年7月31日 
主持人：邱瀝毅 國立成功大學電機系副教授 
電子信箱：lihyih@mail.ncku.edu.tw 
 
 
 
 
 
 
 
 
目錄： 
一、摘要  ......................................................... 2 
二、前言  ......................................................... 5 
三、研究目的與文獻探討  ........................................... 7 
四、研究方法、結果與討論  ......................................... 9 
五、計畫成果自評  ................................................ 31 
六、相關文獻  .................................................... 32 
3 
ABSTRACT 
 As various applications are integrated into a chip, designers require an efficient communication 
architecture to meet the demands of a large amount of data exchanges among intellectual properties 
(IPs), and achieve lowest possible power consumption while satisfying performance constraints. 
Communication architecture exploration (CAE) algorithms at electronic system level (ESL) can bring 
significant improvement in the speed and quality of design trade-offs. CAE algorithms at ESL adopt 
an abstraction language for system modeling and efficiently evolve the architectures based on a fast 
and effective performance and power estimation to reduce the design time. Furthermore, for the 
emerging multiple configurations (or standards), a versatile system capability of switching among 
these configurations becomes crucial. Several reconfigurable intellectual properties (IPs) that 
implements multiple functions with low hardware cost have been proposed and developed to alleviate 
the cost problem.  Thus, the design of communication architecture for multi-mode systems is more 
complex than that of single-mode system because multi-mode systems must consider more than one 
set of data paths and constraints. In this 3-year project, we address all these issues in academia and 
collaborate with ITRI to apply one part of our research approaches into use.  
Our accomplishments for the 3-year project are summarized as follows: 
(1) Bus architecture exploration algorithm at system level (BAES): BAES adopts a modified 
simulated annealing algorithm that stochastically selects one bus transformation strategy and 
probabilistically accepts the candidate architecture. The experimental results demonstrate that the 
algorithm can generate near-to-optimal solutions and the simulation time is faster than the 
exhaustive approach by 189 times on average. 
(2) Pseudo parallel method for bus architecture exploration at the system level (PBAES): 
PBAES adopts a probabilistic meta-algorithm to find solutions in each dynamic simulation, and 
presents a pseudo parallel method to speedup power and performance co-exploration time. The 
pseudo-parallel approach applying to an image processing system shows an average power gain 
of 11.6% over the original algorithm without pseudo-parallel method, while also offering an 
average 6.25× speedup in exploration time, with solutions of similar quality. 
(3) Bus architecture exploration algorithm for multi-mode systems (BAEMs): Repeatedly 
performing power-performance communication exploration N times may seem practical. 
However, none of the N individually optimized solutions may meet all respective requirements at 
the same time. BAEMs can overcome the difficulty and explore communication architecture 
effectively. Experimental results show that the proposed approach can generate close-enough 
energy minimized solutions under these multiple constraints. 
(4) Three electronic system level communication architecture estimation approaches: Three 
performance and power estimation approaches namely fast trace-driven communication 
architecture power estimation (F-TPE), architectural performance analysis using a dynamic 
trace-based method (APDT) and Cycle-timed SystemC Communication Power Monitor (CTPM) 
were presented. Designers can adopt these estimation approaches in an exploration algorithm and 
5 
二、 前言 
Integrating various standards, especially for modern multi-media applications, into a chip is 
increasingly important for meeting versatile consumers’ demands [1–4]. These standards may consist 
of several similar functions and distinct data paths, and designers usually realize these functions on 
the same hardware to further reduce the hardware cost [5-7]. For example, the video compression 
standards, H.264/AVC and Moving picture experts group (MPEG) uses the DCT (Discrete cosine 
transfer) compressing the image. Various multi-mode IPs have been provides by EDA venders and 
design houses. The design problem is shifting into the development of effective communication 
architecture for the multi-mode system. 
As complexity of a system goes up, power consumption is becoming an important factor, 
especially those of communication architecture [8, 9]. System-level power exploration plays a 
crucial role in helping algorithm developers to examine power consumption of their designs. 
Therefore, an early systematic analysis of communication architectures before system-level 
designers begin to perform detailed modeling in the ESL design flow would curtail the exploration 
of solution space. 
This research project is the subproject of the three-year “Development of Electronic System 
Level (ESL) Design Methodology and its Applications to Multiple-format System Design.” Figure 1 
shows the architecture design flow. We mainly focus on issues related to power at ESL and develop 
power estimation approaches and power-aware optimization methods for communication channels. 
During these three years, we accomplished 1) bus architecture exploration at system level (BAES); 2) 
pseudo parallel bus architecture exploration at system level (PBAES); 3) bus architecture exploration 
algorithm for multi-mode systems (BAEMs); 4) fast power estimation algorithm (F-TPE); 5) 
architectural performance analysis using a dynamic trace-based method (APDT); and 6) 
cycle-accuracy power monitor on CoWare platform (Monitor Approach). Figure 2 illustrates the 
architecture exploration design flow when integrating our proposed approaches into the top project. 
The exploration design flow consists of two phases, exploration phase and modeling phase.  
At the exploration phase, designers can effectively search the interesting architectures from a 
huge solution space using the fast estimation approach and the proposed exploration algorithms. 
BAES explores the solution space and generates the low power communication architecture under 
performance constraint. PBAES further improves the exploration time when the power and 
performance co-exploration. BAEM generates the satisfying communication architecture for the 
multi-mode system. F-TPE is the fast and effective estimator, and is used to estimate attributes of 
architecture as the basis for comparison in the exploration algorithm. APDT approach uses the 
concurrent execution traces to ensure the proper order of task executions, and allows designers to 
explore architecture with various resource partitions, data allocations and communication designs 
without remodeling the system for trace reconstruction. 
At the modeling phase, designers start to model the interesting solutions using high level 
7 
三、 研究目的與文獻探討 
Decisions on communication architecture play a significant role for the success of 
system-on-a-chip (SoC). As modern systems become larger and more sophisticated, designers are 
forced to adopt a new approach that integrates many reusable intellectual properties (IPs) and applies 
multiple bus hierarchies to handle the increasing complexity. When interactions among IPs in SoC 
increase significantly, it is likely to encounter commensurate drop in performance and increase in 
power if the system is not carefully redesigned. Hence, modern SoC design requires an effective 
approach to deal with the bus system to communicate with IPs and memory. 
Recent progress in transaction-level modeling (TLM) has enabled designers to investigate 
system designs at architecture level. Notably, TLM defines the abstraction of a modeling approach at 
electronic system level (ESL) [10, 11]. Designers can use an appropriate abstraction to describe the 
system behavior of an architecture under development; perform simulations to validate the 
functionality of the architecture, and track system performance [12-14]. Few works have developed 
approaches that facilitate rapid design space exploration by improving the speed of each simulation 
run [15]–[17]. The accuracy and speed of a simulation-based approach depend on the abstraction of 
the model. However, the requirements for simulating a complete system limit simulation efficiency. 
An analytical approach that predicates the influence of system performance on communication 
latency without performing a detailed functional simulation aids fast estimation during 
communication exploration. A group of study focuses on static trace-based estimation for 
architecture exploration to speedup the estimation time [18, 19]. They use a communication analysis 
graph that was obtained from a functional simulation, and gradually traced the vertices on the 
configured communication architecture to estimate computation and communication latency. 
However, designers must develop various architectural models during exploration and generate 
traces for the simulation when system behavior and resources change. 
Exploration-based algorithms can search the design space, likely improving the solution quality 
found by synthesis-based approach. Synthesis-based approach can fast generate communication 
architecture by a serious of decision on the bus parameters and topology [20-22], however, their 
synthesis-based approach would unduly limit the exploration and obtain a less satisfactory solution 
in performance or power. A communication architecture exploration approach considering the 
communication behavior can overcome the drawbacks of the synthesis approach and evolve the 
communication architecture toward a better design. A bus merge strategy using static communication 
analysis is thus proposed for use in hierarchical bus architecture to minimize the data transfer 
between two buses [23]. Some researches improve the architecture by considering the dynamic 
traffic. The method of Pandey et al. determines the bus width and bus topology by modeling the 
communication behavior of components as integer linear programming problem, assuming that the 
amount of data and data dependence are known [24]. Lahiri et al. developed a communication 
exploration methodology based on the bus limitation and the statistics about the access frequency 
9 
四、 研究方法、結果與討論 
Communication architecture plays a significant role in a successful system-on-a-chip (SoC). 
Increased numbers of interactions among IPs in MPSoC leads to significant performance drops and 
power consumption increases in the communication architecture. Therefore, the communication 
exploration algorithm and effective performance and power estimation approach at system-level is 
very useful for helping designers to implement a successful chip. In the project, we present three 
communication architecture exploration algorithms and three system-level performance and power 
estimation approaches. We accomplished the following tasks during these three years.  
 
(1) Low power communication architecture exploration 
  We present a bus architecture exploration algorithm at system level (BAES) that optimizes bus 
architecture by observing the dynamic behavior on the transfers to obtain a more practical solution. 
BAES adopts a modified simulated annealing algorithm that stochastically selects one bus 
transformation strategy and probabilistically accepts the candidate architecture. In the end, BAES 
will generate power efficient communication architecture under performance constraints.  
A. Approach 
BAES optimizes the bus architecture iteratively and avoid local minimum by accepting a less 
satisfactory intermediate solution by probability. The core of BAES adopts the concept of Simulated 
Annealing Algorithm (SA) [30], and the exploration flow is as shown in Figure 3. The inputs are a 
trace file, SA parameters and performance constraints. Initially all of the components are assumed to 
be connected on a bus.  
In the first step, BAES estimates the power factor and execution cycle of the initial architecture 
which is considered as the current accepted architecture, Si. Next, a perturbation task is performed in 
which a candidate would be generated by randomly selecting a bus transformation strategy and 
applying the strategy to Si. Bus transformation is one strategy to alter communication architecture by 
changing one or more attributes of a bus. 
In the third step, BAES utilizes the F-TPE to estimate power and performance of the candidate 
architecture. The power factor, PF, is represented for the communication power consumption as 
follows. 
FCTPF *)/(         (1) 
 
where T is the switching count, C is the execution cycle and F is the scaling ratio of bus frequency. 
BAES then determines whether to accept the candidate as Si or not according to three subsequent 
rules. In the first rule, BAES will accept the candidate when its performance is better than Si and the 
performance of Si is worse than the given performance constraint. Under this decision rule, local 
optimal solutions may be obtained, and so the random transformation is used to provide opportunities 
to escape these.  
11 
Trace file
1.Estimate the initial 
architecture
Markov chain 
length is satisfied
2.Perturbation
3.Estimation
4.Accept decision
5.Cooling
N
Y
N
Stop  
temperature 
is met
Generate communication 
architecture
Y
 
Fig. 3. BAES exploration flow 
 
Execution Cycle
P
o
w
er
 F
ac
to
r
PC
S0
S2
S3
S4
 
Fig. 4. Probability decision with BAES 
 
B. Experimental Results 
We apply BAES to an image processing application and focus on exploration architecture when 
the cooling rate is varied from 0.95 to 0.75 and the Markov chain length from 10 to 5. In addition, the 
performance constraint is varied from 5,500 to 195,000 and the BAES will search for a power 
efficient solution under the performance constraints. The experimental results are shown in Figure 5. 
The maximum number of iterations in Case 1 is 770, in Case 2 is 385, and in Case 3 is 70. More 
number of explored solutions denotes a longer exploration time. 
As shown in Fig. 5, the Markov chain in Case 1 is larger than in Case 2. The chances of getting a 
solution with a smaller power factor are higher because more solutions are explored. In addition, the 
cooling rate in Case 2 is larger than in Case 3, showing that the exploration in Case 3 would quickly 
become stable and not accept a new candidate. Therefore, a relatively poor architecture would be 
developed because the power of the currently accepted architecture is worse, and no other 
architecture could be accepted since the BAES is stable. In other words, a fast cooling brings a short 
exploration time, but may produce a sub-optimal architecture.  
13 
A. Approach 
Designers analyze specification early in the design time by considering the relationship between 
power and performance. However, constructing the trade-off curve is a very time-consuming process. 
Figure 6 illustrates the prior power and performance trade-off schema. Repeatedly performing the 
low power optimization approach N times under multiple distinct performance constraints generates 
N solutions forming a power/performance trade-off curve. Although the optimization approach can 
be performed N times of trial in which the quality of a solution is enhanced, it explores many regions 
of the solutions space repeatedly, wasting valuable searching time. Additionally, an exhaustive search 
that generates solutions with multiple distinct performance constraints is unrealistic due to the design 
space which is created from the topology and bus parameters is large.  
Avoiding repeated searching of regions may speed up the process with little effect on solution 
searching. PBAES solves the time-consuming problem by utilizing pseudo-parallel structure (PPS). 
The aim of PPS is to obtain optimal solutions from the overlapping design space, SYS1 and SYS2, 
from a system under investigation (SuI) with of performance constraints K1 and K2, respectively. The 
block curve in Figure 7 denotes the generated power/performance trade-off curve. The solution 
located inside the circle represents the neighbor solutions around the "center of a circle" solution. The 
next architecture candidate in PBAES is chosen from the neighboring solutions. 
Fig. 7 shows the searching paths in the schema with PPS. Assume S0 and P0 is the present selected 
architecture under performance constraints K1 and K2 individually. If the solution under K1 is first 
searched, then the approach generates a candidate S1 from the neighboring solutions of S0. However, 
S1 is not an acceptable solution in SYS1 search space, but would be a better solution than P0 in the 
SYS2 search space, because S1 has better power and performance to P0. Thus, the key concept of PPS 
is to share S1, which is the original solution for SYS1, with SYS2. Before beginning the exploration in 
SYS2, PBAES replaces P0 with P0’, and goes into a benefit neighborhood space. The dotted area 
indicates the search space pruned by the PPS procedure during the SYS2 exploration. This pruning 
significantly decreases the search space, and helps PBAES to converge quickly to the optimal 
solution.  
The core of PBAES is based on the Simulated Annealing (SA) algorithm and a pseudo parallel 
structure. Bus transformation is one strategy to alter communication architecture by changing one or 
more attributes of a bus. The communication architecture evolves through bus transformation, which 
is automatically performed to explore the enormous solution space in PBAES. PBAES searches the 
optimal solution with discrete performance constraints in parallel and eventually generates the 
near-optimal low-power architecture(s) under given performance constraint(s). Therefore, PBAES is 
a dynamic low power optimization approach, but different with prior approaches, it shares the search 
solutions and uses a pseudo parallel exploration to reduce the exploration time. 
 
15 
considers more than one due to the shared structure. Under the same set of SA parameters, the 
number of trials was unchanged, but the number of search solutions generated from each exploration 
in PBAES increased from M× N to M× N× A, where M denotes the number of cooling temperature, N 
represents the length of the Markov chain and A represents the number of performance constraint. 
PBAES shares the explored solution, and can thus search it with a smaller power factor and increase 
the possibility of finding an approximately globally optimal solution. 
 
 
Fig. 8. Power factor gain when the algorithm is forced to use SA only and then it utilizes SA and PPS 
 
(a) Using BAES 
 
(b) Using PBAES 
Fig. 9.  Accepted solutions and the number of iterations 
 
 
TABLE I 
SA PARAMETERS AND GENERATED TRIALS 
 Cooling ratio Markov chain Generated trials 
17 
Figure 10 shows the experimental results with 5–100 components. The normalized annealing 
iteration AINormalized is defined as follows. 
 
%.100
1
21
Normalized 


AI
AIAI
AI            
(5) 
 
where AI1 denotes the annealing iteration in Case1 and AI2 represents the annealing iteration in 
Case2. Case1 required more annealing iterations than Case2, as shown in Fig. 10, since its difference 
between starting temperature and final temperature was larger. 
The normalized execution time ETNormalized is defined as below.  
 
%.100
1
21 


ET
ETET
ETNormalized         (6) 
 
where ET1 represents the execution time in Case1, and ET2 is the execution time in Case2. Both 
cases exhibited similar trends of execution time and annealing iteration under different numbers of 
component, revealing that the annealing process depends strongly on the execution time. The user 
can define the number of annealing iterations to trade off the time to search design space with the 
quality of solutions. 
In the second experiment, the vector length was varied as 2,000, 5,000 and 10,000 and φ =10 was 
set. Figure 11 shows the experimental results. The speed of trace driven estimator depends mainly on 
the length of input vector. A larger input vector leads to a longer execution time, as indicated in Fig. 
11.  
An important observation from Figs. 10 11 is that the execution time is not closely related to the 
number of components. However, the execution time increase as the difference between starting 
temperature and final temperature raises, as well as with increasing numbers of annealing iterations, 
possibly leading to an unacceptable execution time. This problem can be computed by lowering the 
cooling rate to speed up the execution time, or stop the searching once a predefined execution time 
has been elapsed, but these approaches lead to a sub-optimal solution. 
 
19 
(3) Effective communication exploration on the multi-mode system  
We presented another novel bus architecture exploration algorithm for multi-mode systems 
(BAEMs) using the multi-objective genetic algorithm. BAEMs explores the communication 
architecture of system under multi-configurable modes simultaneously and effectively, and then 
generates the communication architecture satisfying the performance constraints. This research 
illustrates the problem on the multi-mode system exploration and demonstrates the effectiveness 
against the exhaustive approach. 
A. Problem definition 
 Given: 
1. N data flow graphs where each graph stands for one configuration 
2. Explored Bus Parameters 
3. Performance constraints for each mode 
 Determine: 
1. bus architectures that can meet all these requirements within given bounds  
B. Proposed algorithm 
BAEMs searches the communication architecture solution spaces using genetic algorithm. The 
communication architecture solution space is formed by the topology, the priority of component, the 
bit width of each bus and the operating frequency of each bus. The topology defines the connection 
among the components and has a great impact on the system performance and power. For instance, a 
smaller transfer time path is created since the bridge between two buses is removed, and power 
consumption from the bridge is also saved. This may increase the bus contentions, because there are 
more components at the same bus, but sometimes these can be eased under relaxed performance 
constraints.  
The bus arbiter selects a component with highest priority as the bus master when more than one 
components request the bus. Therefore, the setting of priority of component affects the bus behavior 
as well as the system performance. Finally, changing the bus parameters, likes width and operating 
frequency will alter bus capability for data transfer. For example, increasing the bus width would 
enlarge the bus bandwidth, increasing the system performance. 
BAEMs encodes the explored parameters consist of topology and bus parameters using gene. For 
the communication architecture exploration problem, each individual chromosome that consists of a 
gene set represents communication architecture. A chromosome consists of three parts: the bus 
location, the priority of component, and the parameters of each bus.  
Assume the number of component is Nc, the level of configurable priority is Np, the number of 
explored bus width is Nw, the number of explored bus frequency Nf, and the number of bus is limited 
as  2/cb NN  . Therefore, the length of chromosome equals to 2Nc+2Nb. Define Gj is the j-th gene 
in chromosome. The genes Gi represents the bus location of component i, where i{0,1…Nc-1}. It 
can task value in (0,..,Nb-1). The priority of the components is represented in the gene Gi, where 
21 
approach. The quality is ranged from 0% to 6.6%. It shows that BAEMs can search the near-optimal 
solution.  
The execution time equals to TNexe  , where Nexe is the number of visiting solution and T 
represents the simulation time estimating a architecture by the estimator. Figure 13 shows the number 
of visiting solutions by these two approaches. The number of visiting solutions using the exhaustive 
approach increases exponentially as the number of components increases. On the other hands, the 
number of visiting solutions greatly depends on the value of generation and population using by 
BAEMs approach. These results demonstrate BAEMs can speed up the exploration time with the 
similar quality solutions. 
 
 
Fig. 12. Power comparison for architectures generated by BAEMs and the exhaustive approach  
 
 
Fig. 13. The number of visiting solutions by the exhaustive approach and BAEMs approach. 
D. Conclusions 
This work proposes an energy and performance-aware bus communication architecture exploration 
algorithm for multi-mode system. BAEMs encodes the exploration problem as a set of gene and 
searches the optimal solution effectively using multi-objective genetic algorithm. BAEMs overcomes 
the problem of communication exploration on the multi-mode system. The experimental result 
indicates that BAEMs can speed up the exploration time and also generate the similar quality 
solutions compared with the exhaustive search. 
 
(4) Fast Trace-Driven Communication Architecture Power Estimation 
23 
a high level, and is thus is left to be determined by designers, switching activity, which depends on 
the switching count and execution cycle, could be a good indicator. Therefore, we define a power 
factor, PF, to represent the power in Eq. (11). 
 
FCTPF *)/(         (12) 
 
where T is the switching count, C is the execution cycle and F is the scaling ratio of bus frequency. 
 
 
Fig. 14. F-TPE flow chart 
 
Fig. 15. A simple trace example 
B. Experimental Results 
25 
Fast and effective exploration is achieved using the APDT approach to analyze the traces under 
the clusters, data allocation and communication configurations once the traces are constructed by the 
proposed syntax analysis automatically. Therefore, Designers do not need to provide extra system 
models for the next iteration of task exploration, nor do they need to profile input traces for the static 
trace simulation approach. Instead, they spend most of their time on the tasks of 1) choosing 
architecture and setting the architectural configurations in the APDT with little manual effort, and 2) 
analyzing the architecture with reference to the results of the estimation.  
A. Approach 
Fig. 16 presents the APDT design flow, which comprises two components - a syntax analyzer 
and a trace analyzer. The syntax analyzer constructs concurrent execution traces that represent the 
temporal order of execution of tasks in a resource. Basic definitions must be laid out to formulate the 
concurrent execution traces. An execution flow graph EFG(V,E) is a directed graph and represents 
the unfolding of task functional executions and data transfers in the executable specification, where 
∀vV is a task per execution and ∀eE specifies a data/control dependence between two 
executions. The vertex set Vj={vV:RM(v)=j}, where RM(v)=j indicates that vertex v is mapped 
onto resource rj. We assume vp,vqVj; thus, a trace is generated when a path exists from vp to vq in 
EFG(V,E), i.e., vp and vq are executed dependently. Oppositely, vp and vq may execute and compete 
for resource rj when their executions are independent. Two independent traces are thus generated. 
After the syntax analyzer tracks vertices that are mapped onto a single resource and their 
execution footprints have been retained on the corresponding trace, the trace analyzer emulates the 
concurrent execution traces on a architecture using detailed clustering, data allocation and 
communication settings, and estimates the quality of the architecture based on information in the 
library. The trace analyzer consists of a task scheduler and a communication scheduler. The task 
scheduler arranges tasks to be performed on resources, while the communication scheduler selects 
the very next execution that has been transferred from data requests of tasks. The communication 
latency associated with the transmission of data from a bus transfer is calculated as Eq(13), 
 
        
FS
BW
Dx 
             (13) 
 
where Dx is the amount of data per transfer, BW is bus bandwidth, and FS is the scaling ratio of 
bus frequency. For example, we assume, without loss of generality, the normalized highest bus 
frequency is 1; thus, FS=2 means that the operating frequency is two times slower than the highest 
frequency.  
The major advantage of the proposed approach is that trace reconstruction is not needed 
whenever the resource assignment changes. A concurrent execution trace is adopted to avoid the 
resource competition issue. Therefore, APDT can reduce system remodeling effort and estimation 
time needed for performance evaluations, thereby enhancing exploration effectiveness.  
27 
was mapped onto the dedicated resource ri, where j{1,…,k} and k is the number of ti executions. 
The resource connects to a bus through one bus interface. For example, for 10 frames, t1,1–t1,10 are 
mapped into resource r1 and it shares the bus interface of component h1. The data transferred through 
channel d1 were forced to be located in global memory m1 and that transferred through d5 was forced 
to be located in m2. The output data transferred through d4 and d7 were mapped into m3. The data 
transferred through d2, d3, and d6 were directly passed from one component to another component 
through the shared bus. Two bus mapping configurations were shown. In Arch1, all components 
connected through a bus. In Arch2, the two paths were executed in two buses to increase 
performance. 
Similarly, Fig. 17(e) shows the Arch3 architecture that uses a data allocation setting different from 
that of Arch2. The new setting maps input data for the two paths into a memory m1. Fig. 17(f) shows 
the Arch4 architecture, which uses a different resource mapping than Arch1. For Arch4 case, the 
competing-for-execution problem may arise in resource r2 when t2 and t5 are in independent and 
distinct paths. The Arch5 architecture uses a different resource clustering setting than Arch1 (Fig. 
17(g)). In Arch5, parallel execution of resources was exercised in a component and these resources 
were connected through the dedicated wire.  
The five architectures are generated by reconfiguring the parameters in the APDT. This work also 
generated simulation models executable on the CoWare platform for Arch1–Arch5 for comparison 
purpose. The functional blocks and system communication architecture were modeled using 
bus-functional model [10] using SystemC. CoWare AHB library was adopted. One bridge model was 
developed and used to connect two shared buses.  
The burst technique is a popular approach for improving communication performance. However, 
the burst simulation is time-consuming since data are separated into several packages and then 
transferred on a bus. The APDT approach not only generates an estimate quickly without a burst 
transfer, but also supports a burst-mode analysis to improve estimation performance. Fig. 18(a) plots 
performance deviation and speedup under various architectures using the APDT approach without a 
burst mode, relative to the result of the CoWare simulation, where (a) and (b) represent the designs 
that are evaluated with different bus priorities. The estimate by the APDT approach deviated from 
that by CoWare by 2.9% on average, but the simulation time was 7921 times faster. These 
experimental results reveal that the APDT approach shortens time for estimating performance.  
 Experimental results demonstrate that Arch2 and Arch3 yielded a larger than average deviation 
(Fig. 18(a)). The causes of the deviation are as follows. The process of implementing the AHB 
protocol consists of address and data phases, and the first cycle of the address phase of the next 
transfer and the last cycle of the data phase of current transfer can be executed in parallel, reducing 
the number of execution cycles.  The APDT approach without a burst mode ignores this parallelism. 
Furthermore, bus requests in the architecture with a burst mode result in more bus traffic than that not 
in burst mode when data are separated into several packages in burst mode. The bus traffic may 
29 
 
(a) w/o burst mode 
 
(b) w/i burst mode 
Fig. 18. Performance deviation and speedup under different architecture.  
 
C. Conclusions 
APDT is a fast and effective dynamic trace-based method for analyzing architecture performance. 
This work demonstrates that the APDT approach without a burst mode accelerates estimation by a 
factor of 7921 over the speed achieved using the bus-function mode on CoWare and with an average 
deviation of the estimate of 2.9%. The deviation associated with APDT with a burst mode is less than 
0.01% and the estimation speed is 50 times that achieved using CoWare. In the future, an efficient 
exploration algorithm will be developed with the aid of the APDT approach. 
 
(6) Cycle-timed SystemC Communication Power Monitor on CoWare 
CoWare is the system integration and simulation platform in ESL domain [32]. A cycle-timed 
SystemC AHB power monitor module is developed on this platform. The monitor estimates the AHB 
communication power consumption by monitoring the bus behavior, such as arbitration and data wire 
switching. This can enable us to refine our estimation approach as well as provide designers to collect 
their power in communication architecture. 
There are three phases in the power estimation flow as shown in Figure 17, embedding the power 
monitor phase, system simulation phase, and trace analysis. Firstly, designers develop the system 
simulation model and insert the power monitor class in the system. Then, system simulation is 
performing to ensure the operation correctly and extract the trace of power. Finally, a power analyzer 
is used to analyze the power trace. 
31 
五、 計畫成果自評 
本研究子計畫主要是針對計畫所開發之多格式系統單晶片，發展一個前瞻性的多格式系統
連接架構探勘方法，縮短演算法與架構設計來回的時間，完成低功率連接架構設計。在這三年
間我們已完成三個電子系統階層效能與功率評估方法(F-TPE,APDT,PowerMonitor)和三個連接
架構探勘演算法(BAES,PBAES,BAEMs)。由計畫執行近三年來的實驗結果顯示，我們所提出的效
能和功率評估方法可幫助設計者在不同的設計階層分析系統的連接架構，連接探勘演算法可有
效率地尋找低功率連接架構於多格式系統。在成果發表上，BAES和 PBAES[29]概念已被國際著
名期刊所刊載，APDT[33]已被國際著名會議接受，實作 F-TPE 和 PowerMonitor 開發經驗於產
學合作計畫，其他高階層功率管理方法[34]和功率管理電路設計[35-37]等研究亦已被發表於
國際期刊和會議論文中。整體而言，本子計畫在學術或是實用上都很有的價值與貢獻。三年來
之研究成果已完成原先預定目標。 
 在學術技術與應用面：本子計畫提出電子系統階層系統架構評估與多格式連接架構探勘方
法。設計者利用此評估方法，可在 Un-Timed、Approximated-Time 和 Cycle-Timed 等三個層級
進行系統架構的分析，此評估方法可被使用至不同的系統探勘演算法中。另一方面，透過連接
架構探勘演算法可幫助設計者完成低功率連接設計。 
 在經濟效益面：多格式系統利用硬體分享的概念來降低設計的成本，然而此將造成系統連
接架構設計成本的提高。此計畫所開發的連接架構探勘演算法可幫助設計者於電子系統階層進
行多格式連接架構效能和功率的探勘，有助於縮短整體設計時間、提高連接架構效能與降低系
統功率，可幫助設計者完成有競爭性的產品。 
 在社會面效益面：本子計畫所補助之經費提供了五位博士班與十二位碩士班學生針對各自
研發的議題進行深入之研究。本子計畫參與人員在學理上可充分了解多格式系統設計和低功耗
設計所面臨的各種問題和開發解決之道；在實際應用方面，計畫參與人員將系統與驗證平台整
合，亦獲取開發 EDA 之技術與經驗。因此，透過本計畫理論與實際相結合的訓練，已順利為
我國培育相當多之積體電路 EDA 及低功率設計相關之人才。 
 回顧過去計畫執行初期，因計畫架構龐大以及多階層的設計方法，各子計畫執行人員在初
期或有些許溝通上的障礙存在。然而，歷經三年來許多次大大小小會議之磨合，各子計畫逐漸
累積經驗，並藉著與其他計畫合作，以及參與主題小組或各相關主題研討會之機會，一方面相
互交換資訊、分享經驗，另一方面則能在有限的資源下，而逐步解決開發過程中的種種困難。 
 展望未來，在累積一定技術與實作驗證成果之後，本計畫除了將研發之技術應用於教學以
及更深入的研究之外，也將把現有之技術與產業合作，為其提供一個整合功率消耗探勘系統平
台解決方案，以提高產業競爭力。 
 
 
 
33 
[11] A. Donlin, "Transaction level modeling: flows and use models," in Proc. Int. Conf. Hardware/Software Codesign 
and System Synthesis, 2004, pp. 75-80. 
[12] W. Klingauf, R. Gunzel, O. Bringmann, P. Parfuntseu, and M. Burton, "GreenBus - a generic interconnect fabric for 
transaction level modelling," in Proc. Int. Conf. Design Automation, July 2006, pp. 905-910. 
[13]  M. Caldari, M. Conti, M. Coppola, S. Curaba, L. Pieralisi and C. Turchetti, "Transaction-level models for AMBA 
bus architecture using SystemC 2.0," in Proc. Int. Conf. Design Automation and Test in Europe, April 2003, pp. 
26-31. 
[14]  W. Kruijtzer, P. van der Wolf, E. de Kock, J. Stuyt, W. Ecker, A. Mayer, S. Hustin, C. Amerijckx, S. de Paoli, and 
E. Vaumorin, "Industrial IP integration flows based on IP-XACTTM Standards," in Proc. Design Automation and 
Test in Europe, March 2008, pp. 32-37. 
[15] G. Beltrame, D. Sciuto, C. Silvano, D. Lyonnard, C. Pilkington, “Exploiting TLM and object introspection for 
system-level simulation,” in Proc. Int. Conf. DATE, 2006, pp. 100-105. 
[16] M. Tawk, K. Z. Ibrahim, S. Niar, “Multi-granularity sampling for simulating concurrent heterogeneous 
applications,” in Proc. Int. Conf. CASES, 2008, pp. 217-226. 
[17] S. Pasricha, N. Dutt and M. Ben-Romdhane, "Fast exploration of bus-based communication architectures at the 
CCATB abstraction," ACM Trans. on Embedded Comput. Syst., vol. 7, pp. 1-32, 2008. 
[18] K. Lahiri, A. Raghunathan, and S. Dey, "System-level performance analysis for designing on-chip communication 
architectures," IEEE Tran. on Computer-Aided Design of Integrated Circuits and Systems, vol. 20, pp. 768-783, 
2001. 
[19]  T. Wild, A. Herkersdorf, and R. Ohlendorf, "Performance Evaluation for System-on-Chip Architectures using 
Trace-based Transaction Level Simulation," in Proc. Int. Conf. Design, Automation and Test in Europe, 2006, pp. 
1-6. 
[20] S. Pasricha, N. Dutt, and M. Ben-Romdhane, "Automated synthesis of bus architectures for systems with throughput 
constraints," CECS Technical Report 04--20, August 2004. 
[21] L. Cai and D. Gajski, "Channel mapping in system level design," CECS Technical Report 030-03, Jan. 2003. 
[22] K. K. Ryu and V. J. Mooney III, "Automated bus generation for multiprocessor SoC design," IEEE Trans. 
35 
[34] Lih-Yih Chiou, Yi-Siou Chen and Ya-Lun Jian, “Energy-Aware Partitioning Using a Multi-Objective Genetic 
Algorithm,” (accepted) in Proc. of the 16th Workshop on Synthesis and System Integration of Mixed Information 
Technology (SASIMI' 10). 
[35] Lih-Yih. Chiou, and Shien-Chun. Luo, "Energy Efficient Dual Edge Triggered Level Converting Flip Flops with 
Symmetry in Setup Times and Insensitivity to Output Parasitics," IEEE Transactions on VLSI System, Vol. 17, 
No.11, pp.1659-1663, Nov. 2009.  
[36] Shien-Chun Luo and Lih-Yih Chiou, "A Sub-200mV Voltage Scalable SRAM with Tolerance of Access Failure by 
Self-Activated Bitline Sensing," (accepted) IEEE Trans. Circuits and Systems II: Express Briefs. 
[37] Shien-Chun Luo and Lih-Yih Chiou,"Adaptive Minimum Supply Voltage for Subthreshold Circuits Considering 
Noise Margin and PT Variations", IEEE International Conference on Green Circuits and Systems (ICGCS), pp. 
499-503, 2010.  
98年度專題研究計畫研究成果彙整表 
計畫主持人：邱瀝毅 計畫編號：98-2220-E-006-006- 
計畫名稱：電子系統層級設計技術開發及其在多格式系統晶片之應用--子計畫五：電子系統層級功率
評估與連接功率最佳化於多格式系統單晶片應用之研究(3/3) 
量化 
成果項目 實際已達成
數（被接受
或已發表）
預期總達成
數(含實際已
達成數) 
本計畫實
際貢獻百
分比 
單位 
備 註 （ 質 化 說
明：如數個計畫
共同成果、成果
列 為 該 期 刊 之
封 面 故 事 ...
等） 
期刊論文 0 0 100%  
研究報告/技術報告 0 0 100%  
研討會論文 0 0 100% 
篇 
 
論文著作 
專書 0 0 100%   
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 13 4 325%  
博士生 5 2 250%  
博士後研究員 0 0 100%  
國內 
參與計畫人力 
（本國籍） 
專任助理 0 0 100% 
人次 
 
期刊論文 2 2 100%  
研究報告/技術報告 0 0 100%  
研討會論文 4 4 100% 
篇 
 
論文著作 
專書 0 0 100% 章/本  
申請中件數 0 0 100%  專利 已獲得件數 0 0 100% 件  
件數 0 0 100% 件  
技術移轉 
權利金 0 0 100% 千元  
碩士生 0 0 100%  
博士生 0 0 100%  
博士後研究員 0 0 100%  
國外 
參與計畫人力 
（外國籍） 
專任助理 0 0 100% 
人次 
 
 
