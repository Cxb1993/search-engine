關鍵詞：迴文、字尾樹、字綴樹、核醣核酸二級結構預測 
Keywords: palindrome, suffix tree, affix tree, RNA secondary structure prediction 
 
成果報告內容 
Introduction 
 A palindrome is a string that is the same when read it either forwardly or backwardly.  We 
developed several important methods based on suffix trees and suffix automata in order to detect 
all palindromes.  The details are described in the attached papers. 
 
  
baab$
b
aab
$
a
ab
b
root
1
2
3
4
5
(1)
(2,5)
(1,4)
(2)
(5)
(3,4)(2,3)
(3)
(4)
c$＇
c$＇
$
c$＇
$c$＇
$
c$＇
1
2
3
4
5
(5)
(1)(5)
(1)
(2)(1)
(4)
(3)
(4)(3)
(2)
(3)(2)
$＇ $ 6
(6)
6
(6)
 
(a)                                  (b) 
Figure 1 cbaab$1 =K  and baabc$'1 =− K  
 
 
Figure 2 
 
2.2 The Method 
 
In this section, we first present the algorithm based 
on suffix trees to find all maximum palindromes in a 
given string. We construct the suffix tree of 1K  and 
1K− . At each node v , we check whether there 
exist fi  and ri  such that if + ir = (n − D(v) + 2). If 
the substring associated with this node is a maximum 
palindrome, we will find fi  and ri  such that if + ir 
= (n − D(v) + 2). On the other hand, if if + ir = (n − 
D(v) + 2) for some fi  and ri , the substring 
corresponding to this node must be a palindrome, but 
not necessarily a maximum palindrome. 
 
We now use the input string cbaab to explain the 
above discussion. Consider Fig. 4 whose suffix tree 
is constructed for cbaab$  and baabc$' . We are 
interested in the node indicated by the arrow sign.  
 
For this pointed node, if = 2 , ir = 1, n = 5, and D(v) 
= 4. Thus if + ir = (n − D(v) + 2) . 
 
Thus if + ir = (n − D(v) + 2) . The substring 
corresponding to this node is baab and is a maximum 
palindrome. By using an eliminating operation, we 
get another palindrome aa. For other nodes of the 
suffix tree, the formula does not hold. So there are 
not other maximum palindromes. 
 
We now show another example cabbaabb. The 
suffix tree is shown in Fig. 5. 
 
For the left pointed node, n = 8 and D(v) = 4. 
Besides there exist if = 2, and ir = 4. Thus the formula 
 b
abb
$
a
bb
b
root
1
(1)
[9]
2 (2) [8]
6
(6)
[4]
4
(4)
[6]
5
(5)
[5]
3
(3)
[7]
c$＇
$
$
$
c$＇
1
(1)
[9]
7 (7) [3]
3
(3)
[7]
4
(4)
[6]
5
(5)
[5]
abbaabb$
8
(8)
[2]
ac$＇ a
abb$
$
a
c$＇ abb
ac$＇
c$＇
a abb
$
ac$＇
(1)(8)
[1]
c$＇
8
(8) [2]
7
(7)
[3]
6
(6)
[4]
(5)(3)
[4]
(2)(4)
[4]
(2,6)(4)
[3]
(2,5,6)(3,4,7)
[1]
(3)(1)
[6]
(3)(1,5)
[3]
(3,7)(1,5)
[2]
(3,7,8)(1,5)
[1]
(4)(2)
[5]
(4,6)(2)
[2]
$$＇
9
(9)
[1]
9
(9)
[1]
2
(2)
[8]
 
Figure 5 
 
Figure 6 
 
4. Collect the forward, reversed collections for 
'S  or 'S−  and find )(vD  for each node 
in the suffix tree. 
5. For each node v  of the suffix tree, check 
whether there exist fi  and ri  such 
that )2)(( +−=+ vDnii rf . If yes, return 
the substring corresponding to this node v  
as a possible maximum palindrome of S . 
6. Utilize eliminating operations to all 
palindromes obtained in the above procedures 
to produce more palindromes 
 
3 The correctness of our proposed 
algorithm 
 
We finally discuss why the algorithm works.  Let 
us assume that there is a maximum palindrome 
starting at fi  with length k  in the given string S .  
Then there must be a maximum palindrome staring at 
ri  in S− .  As shown in Fig. 6, we have  
if − 1 + k + ir − 1 = n 
But, on the suffix tree constructed out of 
SS −and , we have: 
 
K = D(v) 
Thus, we have )2)(( +−=+ vDnii rf . 
4 Conclusions 
 
In this paper, we presented an algorithm based on 
suffix trees to find all palindromes in a given string.  
The main goal is actually to define a new kind of 
palindromes, namely palindromes with gaps between 
' and αα .  
 
We have already some preliminary result to 
indicate that our present algorithm, with modification, 
can be used to find the new kind of palindromes, 
which cannot be found by using the Manacher 
algorithm [2].  This is our future research. 
 
Finding all Palindrome Subsequences in a String 
 
K.R. Chuang1, R.C.T. Lee2 and C.H. Huang3* 
1,2 Department of Computer Science, National Chi-Nan University, Puli, Nantou 
Hsieh, Taiwan 545 
3 Department of Computer Science and Information Engineering, National Formosa 
University, 64, Wen-Hwa Rod, Hu-wei, Yun-Lin, Taiwan 632 
*Corresponding author: chhuang@sunws.nfu.edu.tw 
 
 
Abstract
  
A palindrome is a string of symbols that is 
read the same forward and backward. 
Palindrome also occurs in DNA. DNA 
palindromes appear frequently and are 
widespread in human cancers. Identifying them 
could help advance the understanding of 
genomic instability [2, 6]. The Palindrome 
subsequences detection problem is therefore an 
important issue in computational biology.  In 
this paper, we present an algorithm to find all 
palindrome subsequences. 
 
1. Introduction 
 
In this paper, the following notations are 
used.  A string is a sequence of symbols from 
an alphabet set .  For a string S = s 1s2…sn of 
length n, let si denote the ith symbol in S.  A 
subsequence of S is obtained by deleting zero or 
more (not necessarily consecutive) symbols form 
S. 
 
A palindrome is a string of the form wwR 
where w is a non-empty substring and wR is the 
reverse of w. For example, TT and GCAACG 
are palindromes.  There are many various 
classic computing problems in finding 
palindromes of a string.  For example, 
Manacher discovered an on-line sequential 
algorithm that finds all initial palindromes in a 
string [4].  Porto and Barbosa gave an 
algorithm to find long approximate palindromes 
[5]. 
 
Given a string S, a subsequence P is a 
palindrome subsequence of S if P is a 
palindrome.  Taking a string S = ACGATGTAC 
as an example, a palindrome subsequence of S is 
ATTA. In computational molecular biology, 
finding out the palindrome subsequences in 
DNA sequence is an important issue [3]. 
However, as far as we know, there is no article 
discussing about how to detect all palindrome 
subsequences. In this paper, we proposed an 
effective algorithm to solve the palindrome 
subsequence problem.   
 
2. The Method 
 
To begin with, we introduce an idea from 
the properties of palindrome.  Let P = p1p2…pm 
be a palindrome.  If P is a palindrome, p1 is 
matched with pm and p2 is matched with pm-1 and 
so forth.  For example, given a palindrome P = 
ATTA, p1 is matched with p4 and p2 is matched 
p3 (Figure 1).  Palindrome subsequences also 
have the same property of palindrome, because 
palindrome subsequences are palindromes. 
 
Figure 1 
 
Let matched pair, (i, j), to denote that si is 
matched with sj where nji 1  and we 
define k-palindrome subsequence to be a 
palindrome subsequence which has k matched 
pairs of S.  We use the notation (i1, j1) (i2, j2) … 
(ik, jk) to denote k-palindrome subsequence 
where njjjiii kk  1221 ......1 . 
Given a string S = ACGATGTAC, AGGA is one 
of all palindrome subsequences of S. The 
matched pairs of AGGA are (1, 8) and (3, 6) 
(Figure 2).  It is a 2-palindrome subsequence 
 
The 24th Workshop on Combinatorial Mathematics and Computation Theory
-371-
finding all palindrome subsequences problem.  
In this algorithm, we find all palindrome 
subsequences form one palindrome subsequence 
to the longest palindrome subsequence.  Given 
a string S of length n, let Uk be the set of 
k-palindrome where
2Step 1: We use incidence matrix to find all 
matched pairs (i, j) where 
1 n .  k 
nji 1  and 
add them into U1, because each matched pair is 
1-palindrome subsequence. 
Step 2: We generate U k from Uk-1 and U1 
where 
2
n
.  For all k-1-palindrome 
subsequences in U
1 k 
k-1, we take a k-1-palindrome 
subsequence (i1, j1) … (ik-1, jk-1) form Uk-1 and we 
check all 1-palindromes from U1 whether there 
is a 1-palindrome (i’, j’) which satisfies the rule 
i’ > ik-1 and j’ < jk-1.  If it is satisfied, we 
combine the k-1-palindrome (i1, j1) … (ik-1, jk-1) 
with the 1-palindrome (i’, j’) to be k-palindrome 
(i1, j1) … (ik-1, jk-1) (i’, j’) and add it into the set 
Uk. Until the Un/2 is generated, we can get the set 
U = U1  U 2 … U  n/2 which contains all 
palindrome subsequences of S. 
 
In the following, we present the algorithm 
for finding all palindrome subsequences. 
 
Algorithm  findAllPalindromeSubsequences(S) 
Input: A string S = s1s2…sn. 
Output: All palindrome subsequences of S.
Step 1:  
/* Finding out matched pair for nji 1  
*/ 
U1 := {} 
for i = 1 to n do 
 for j = i +1 to n do 
  if si = sj then 
w := (i, j) 
   U1 := U1  {w} 
 endfor
endfor
Step 2:  
/* Finding all palindrome subsequences of S */ 
for k = 2 to n/2 do 
Uk := {} 
for all k-1-palindrome (i1, j1) … (ik-1, jk-1) from 
Uk-1 do 
for all 1-palindrome (i’, j’) from U1 do 
if i’ > ik-1 and j’ < jk-1 then
ik := i’ 
jk := j’
w := (i1, j1) … (ik-1, jk-1) (ik, jk) 
Uk := Uk  {w} 
endif
endfor
endfor
endfor
U := U1 U2… Un/2
/* U is the set of all palindrome subsequences of 
S */
 
4. An Example 
 
Given a string S = ACGATGTAC, We now 
illustrate the whole procedure in detail. 
S1 S2 S3 S4 S5 S6 S7 S8 S9
A C G A T G T A C 
Step 1: We use incidence matrix to find all 
matched pairs (i, j) where . nji 1
Table 1 The incidence matrix for this string S = 
ACGATGTAC 
Sj 1 2 3 4 5 6 7 8 9
Si  A C G A T G T A C
1 A  0 0 1 0 0 0 1 0
2 C   0 0 0 0 0 0 1
3 G    0 0 1 0 0 0
4 A     0 0 0 1 0
5 T      0 1 0 0
6 G       0 0 0
7 T        0 0
8 A         0
9 C          
 
After the incidence matrix is generated, we 
can get the U1. 
U1 = {(1, 4), (1, 8), (2, 9), (3, 6), (4, 8), (5, 7)} 
 
Step 2: 
(1) k = 2, U1 = {(1, 4), (1, 8), (2, 9), (3, 6), (4, 8), 
 
The 24th Workshop on Combinatorial Mathematics and Computation Theory
-373-
There is no 1-palindrome which can be 
satisfied. 
U3 = {(2, 9) (4, 8) (5, 7)} 
(2-6) 
We take the 2-palindrome (4, 8) (5, 7) from 
U2. 
Check all 1-palindrome from U1. 
There is no 1-palindrome which can be 
satisfied. 
 
(3) k = 4, U1 = {(1, 4), (1, 8), (2, 9), (3, 6), (4, 8), 
(5, 7)}, U2 = {(1, 8) (3, 6), (1, 8) (5, 7), (2, 9) (3, 
6), (2, 9) (4, 8), (2, 9) (5, 7), (4, 8) (5, 7)}, U3 = 
{(2, 9) (4, 8) (5, 7)}, U4 = {} 
(3-1) 
We take the 3-palindrome (2, 9) (4, 8) (5, 7) 
from U3. 
Check all 1-palindrome from U1. 
There is no 1-palindrome which can be 
satisfied. 
U4 = {} 
 
Finally, we get the set U = U1  U 2 
… U n/2 which contains all palindrome 
subsequences of S. 
U = {(1, 4), (1, 8), (2, 9), (3, 6), (4, 8), (5, 7), (1, 
8) (3, 6), (1, 8) (5, 7), (2, 9) (3, 6), (2, 9) (4, 8), 
(2, 9) (5, 7), (4, 8) (5, 7), (2, 9) (4, 8) (5, 7)} 
 
The all palindrome subsequences of S are as 
follows: 
(1, 4) AA 
(1, 8) AA 
(2, 9) CC 
(3, 6) GG 
(4, 8) AA 
(5, 7) TT 
(1, 8) (3, 6) AGGA 
(1, 8) (5, 7) ACCA 
(2, 9) (3, 6) CGGC 
(2, 9) (4, 8) CAAC 
(2, 9) (5, 7) CTTC 
(4, 8) (5, 7) ATTA 
(2, 9) (4, 8) (5, 7) CATTAC 
5. Conclusions
 
In this paper, we proposed an algorithm to 
solve the finding all palindrome subsequences in 
a string.  Palindrome subsequences occur 
frequently in DNA sequences and have been 
proved to be critical for some biological 
characteristics.  Our algorithm provides an 
effective tool for the related research. 
 
References 
[1] Allison, L. (2004) Finding Approximate 
Palindromes in Strings Quickly and Simply 
[2] Choi, Charles Q (2005) DNA palindromes 
found in cancer. The Scientist 
[3] Gusfied, D. (1997) Algorithms on Strings, 
Trees, and Sequences: Computer Science and 
Computational Biology, Cambridge University 
Press, New York. 
[4] Manacher, D. (1975) A new Linear-Time 
“On-Line” Algorithm for Finding the Smallest 
Initial Palindrome of a String. J. Assoc. Comput. 
[5] Proto, A. H. L. and Barbosa V. C. (2002)  
Finding Approximate Palindromes in Strings. 
Pattern Recognition 
[6] Tanaka, Hisashi; BERGSTROM, Donald A; 
YAO, Meng-Chao and TAPSCOTT, Stephen J 
(2006) Large DNA palindromes as a common 
form of structural chromosome aberrations in 
human cancers. Human Cell 
[7] Wen, W. H. (2006) Longest Palindrome and 
Tandem Repeat Subsequences 
 
 
The 24th Workshop on Combinatorial Mathematics and Computation Theory
-375-
2focus on algorithms to find the edit distance 
between two strings, and many of them [1, 3, 4, 6, 
7, 10, 11, 12, 14, 15, and 16] use the following 
rule: Consider the two strings 21 AAA   and 
21BBB  , if 22 BA   and kBAED ),( 11  , then 
kBAED ),(  .
There are two approaches to solve the 
approximate string matching problem. The first 
approach [12, 2, 10, 11 and 15] is a local approach 
which computes ),( SPED  where S  is a 
substring of T  starting from each location i .
That is, for every possible position i , we test 
whether there exists a substring S  of T
starting from this location such that kSPED ),( .
Another approach [16], named Approach 2, is a 
global approach which can solve the problem in 
O( 
	




w
mnk ) time-complexity where w  is the word 
size. We shall use the technique in [16] to solve 
the problem. 
In the above, we only talked about one case.  
In the following, we give the precise definition of 
1S  and 2S  for all cases.  
Case 1: We find even approximate palindromes. If 
 21 ni  , let 1S  be ),1( iT  and 2S  be 
}),2min{,1( nkiiT  ; otherwise, let 1S  be 
)},1,12(max{ ikniT   and 2S  be 
),2( niT  .
Case 2:  We find odd approximate palindromes. 
If  21 ni  , let 1S  be ),1( iT  and 2S  be 
}),12min{,2( nkiiT  ; otherwise, let 1S  be 
)},1,22(max{ ikniT   and 2S  be 
),2( niT  .
Essentially, for each location i  in T , we 
compute the edit distance between 1S  and 2S .
Given two strings ,'211 mpppS 
'212 ntttS   and k , we define 
'.0and'0where
,
.otherwise,0
)),1(),,1((if,1
),( 21
mjni
kiSjSED
jiM k



 

     
We now use dynamic approach to find ),( jiM k .
Let ),( jiM kI , ),( jiM
k
D  and ),( jiM
k
S  denote 
the ),( jiM k  related to insertion, deletion and 
substitution respectively, where 










.otherwise,0
1)1,1(andor
1),1(,if,1
),(
1
jiMpt
jiMpt
jiM kji
k
ji
k
I ,










.otherwise,0
1)1,1(andor
1)1,(,if,1
),(
1
jiMpt
jiMpt
jiM kji
k
ji
k
D
and










.otherwise,0
1)1,1(andor
1)1,1(andif,1
),(
1
jiMpt
jiMpt
jiM kji
k
ji
k
S
After every ),( jiM kI , ),( jiM
k
D  and 
),( jiM kS  are found, we can determine ),( jiM
k
by ),( jiM k = ),( jiM kI or ),( jiM
k
D or ),( jiM
k
S
where “or” is the “logical or” operation . 
Our algorithm is presented in the following: 
Input: A string ....21 ntttT   and k.
Output: All occurrences of approximate palindromes 
of T with error 'k .
for i=1 to n do
    for kk  '0  do  
     for ''0''0 mjandni   do 
     








otherwise0
''0if,1)0,'(
''0if,1)',0(
)','( '
'
' kiiM
kjjM
jiM k
k
k
      )','(' jiM k )','(' jiM kI or )','(
' jiM kD    
                     or )','(' jiM kS ;
         end for 
    end for 
end for 
The 25th Workshop on Combinatorial Mathematics and Computation Theory
-243-
