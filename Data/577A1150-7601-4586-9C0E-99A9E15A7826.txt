(二) 研究背景及目的：
對平行處理或分散式系統而言，互連網路(interconnection networks)的設計
與分析是一個相當重要的主題。許多重要的文獻在探討互連網路之架構[1, 2, 5,
7, 8, 12, 13, 21, 22, 23, 25, 27, 28, 31, 33]。選擇何種網路互連方式將會決定系統
的效能。互連網路有許多分析的參數，例如：連結性(connectivity)、分支度
(degree)、直徑(diameter)、對稱性(symmetry)、容錯(fault-tolerance) 等[36]。無
向圖(undirected graph)常被用來作為互連網路的模型，其中，節點(node)代表處
理機(processor)，邊(edge)則代表到通訊管道(communication channels)。因此，
本計畫中，網路(network)和圖(graph)、節點(node)和處理器(processor)、邊(edge)
和通訊管道(communication channels)將交互使用。
Cayle 圖已被證明非常適合用來設計互連網路 [2]。它們是以排列群
(permutation groups)為基礎所發展出來的一重要理論，目前許多重要的互連網
路，包括 hypercubes[5]，star graphs[1, 2]，pancake graphs[2] 等，都是 Cayle
圖。這些圖是正則(rugular)且對稱的(symmetric)。然而，這些節點的分支度
(degree)會隨著圖的大小而增加。從 VLSI 實作[7]的觀點來看，固定節點分支
度之網路(the fixed node-degree networks)是相當重要的，其中一原因是在互連
網路的研究領域中，有些計算只適用於有固定數目的 I/O 埠上（即固定分支度）
[7]。
P. Vadapalli and P. K. Srimany[31]提出 trivalent Cayley 圖，該圖已被證明出
有正則性、直徑與節點數目對數成正比、以及最大容錯。此外，論文[26, 30, 31,
32, 34]中探討 trivalent Cayley 圖各種拓樸屬性(topological properties)和最短路
1
network)：k-valent 圖 nkG , 。k-valent 圖屬於 Cayley 圖族(Cayley graphs family)。
我们證明 nkG , 具有許多優異的拓樸性質(topological properties)，並設計一個最短
路徑繞徑演算法(shortest path routing algorithm)。另外，我们也探討 nkG , 圖的直
徑(diameter)、環路的嵌入( cycles embedding )、cliques embedding、容錯(fault
tolerance)等性質。
方法一︰我們將互連網路以圖形 (graph)來表示；節點 (node)代表處理器
(processor)，邊(edge)代表通訊管道(communication channel)。我們對 k-valent
圖已完成下列的定義：
定義 1. k-valent 圖 nkG , 為一有 nkn )1(  個節點之無向圖，且 n 和 k 是兩整數滿
足 n2；k3。 nkG , 的點(node) v = 11110 ...~...  nmmm ssssss 為一長度為 n 的字
串， }2,,1,0{  ksi  ，並且字串裡恰有一個符號 ms~ 是被標記的，其
它的符號則是未標記。vm 表示一個被標記的符號是在位置 m 的節點
v。 *ms 表示 is 或 is~。邊(edge)的形式為(v，δ(v ))，δ∈{f，f
-1，g1，g2，…gk-2}
是一生成子(generator)定義如下：
1. nmm vuf mod)1()(  ，其中 * 1*1*0 ...  nm sssu ， ** 1*2*1mod)1( ...   nnm sssv and
)1mod()1( 0  ks ；
2. nmm vuf mod)1(1 )(   ，其中 * 1*1*0 ...  nm sssu ， * 2*2*1*mod)1( ...   nnm sssv  and
)1mod()1( 1   ksn ；
3. mmi vug )( ，其中 * 1*1*0 ...  nm sssu ， ** 2*1*0 ...  nm sssv and
)1mod()( 1   kisn 。
方法二︰我們建立了 k-valent 圖和其它 Cayley 圖之間的關係，並藉此推導出
3
表在左邊部分中，最左邊那串最長「0」子字串的左端位置。如
果 0vLZL 的話，我們定義 0vLj 。
令 vLZR 為在右邊部分中，最長的「0」子字串的長度，亦即，
,0:0max{ 11   ljjjv ssslLZR  }1 njm 。而且令 vRj 代
表在右邊部分中，最左邊那串最長「0」子字串的左端位置。如
果 0vLZR 的話，我們定義 mj vR  。
由上述定義我們可決定節點的距離函數如下：
定義 4. 在 nkG , 中，考慮一個任意的節點 v，接著我們定義：
1.





otherwise.]1[]0[22
0)(if2]1[]0[22
)(1 NSRNSLLZLmn
LZLjmNSRNSLLZLmn
vDIST L
2.





otherwise.]1[]0[23
0)(if2]1[]0[23
)(2 NSRNSRLZRmn
LZRjnNSLNSRLZRmn
vDIST R
3. ].1[]2[2)(3  NSRNSLmnvDIST
4. ].1[]2[3)(4 NSLNSRmnvDIST 
節點 v的距離函數  )(min)( 41 vDISTvDIST ii 。
我們觀察 1DIST - 4DIST 代表四種從節點 v 到 identity node 之路徑長度。本計畫證
明了節點 v 到 identity node 之最短路徑即為上述四條路徑之一。下列四種演算
法可建構出由節點 v 到 identity node 長度為 1DIST 到 4DIST 之路徑：
Algorithm DIST_1(v,n,m,LZL,jL)
1: for i = 0 to (jL–1) do
2: v ← f(v)
3: end for
4: for i = 0 to (jL–1) + (n–m) do
5
jL m
LZL
: Block A; : Block B; : Block C;
: Block D.
上圖說明 Algorithm DIST_1 是如何進行，圖中的任一字串表示將一個來源點 v
分割成 4 個區塊。在執行完演算法第 1 到第 3 行後，中間的節點就如「2:」所
示。在執行完第 4 到第 9 行後，中間的節點就會如「3:」所示，其中區塊 A 和
D 的所有符號都是 0。假如 0 LZLjm L 的話，第 10 到第 21 行將進一步地被
執行來產生我們的 identity node。Algorithm DIST_2~ DIST_4 的觀念與此相似。
Algorithm DIST_2(v,n,m,LZR,jR)
1: for i = 0 to (n–2–jR–LZR) do
2: v ← f -1(v)
3: end for
4: if (n–jR–LZR) > 0 then
5: v ← gk-v[n-1]-1(v)
6: for i = 0 to (n–2–jR–LZR) do
1:
2:
3:
4:
5:
Figure 1：An illustrate of Algorithm DIST_1.
3-valent Cayley graph G
7
Algorithm DIST_3(v, n, m)
1: for i = 0 to (m–1) do
2: v ← f(v)
3: if v[n–1] ≠ k–2 then
4: v ← gk–2–v[n–1](v)
5: end if
6: end for
7: for i = m to (n–1) do
8: v ← f(v)
9: if v[n–1] ≠ 0 then
10: v ← gk–1–v[n–1](v)
11: end if
12: end for
1:
2:
3:
4:
5:
Figure 2：An illustrate of Algorithm DIST_2.
3-valent Cayley graph G
9
9: v ← gk–v[n–1](v)
10: end if
11: v ← f –1(v)
12: end for
13: for i = m to (n–1) do
14: v ← f –1(v)
15: end for
方法四︰本計畫證明 k-valent 圖可以嵌入節點互斥環路 (node-disjoint
cycles)。我們的方法是將 k-valent 圖的邊分成兩大類以簡化問題。環路(cycle)
是一個點和邊個數一樣多的子圖(subgraph)。如果兩個環路沒有共同的節點則
稱兩環路互斥。一個由生成子 f (generator f ) (或 1f )所定義的邊稱作
F-edge。 nkG , 中的任何環路只包含一個 F-cycle 中的 F-edge。例如：圖一中的
環路 0~1,11~,1~0,00~ 是一個 F-cycle。對於非負整數 i，我們遞迴地定義：
1:
2:
3:
4:
Figure 4：An illustrate of Algorithm DIST_4.
3-valent Cayley graph G
11
clique 是一節點集合，集合中的任兩節點彼此相鄰(adjacent)。一個 clique 如果
不被任何其他的 clique 所包含，則稱該 clique 為 maximal。G-clique 是 nkG , 中
讓每一對相鄰的節點是由一G-edge 連接的maximal clique。例如： 10~,00~ 是 2,3G
中的一個 G-clique。兩個 G-cliques 沒有共同節點則稱為互斥。我們藉由上述
定義來探討 k-valent 圖可以嵌入多少個節點互斥 G-cliques。
方法六︰我們建構 k-valent 圖簡化圖來探討 k-valent 圖之連結度(connectivity)
及容錯性(fault-tolerance)。簡化圖的定義如下︰
定義 5. 對於一個 k-valent 圖 nkG , ，藉由下列兩個步驟可以建構出一個 nkG , 的簡
化圖 nkRG , ：
1. 對於每個 F-leader 2210
~
nsss  的 F-cycle，把它縮成一個叫做超級
節點的單一節點，並用 221 nsss  標記。
2. 如果 nkG , 中的任意兩個 F-cycle 相鄰，則用一超級邊的無向邊連接
相關的兩個超級節點。
3-2 進行步驟
本計畫依下列步驟進行：
步驟 1. 證明 nkG , ，n≥2 及 k≥3，是一個分支度為 k 的正則圖，且有 2
)1( nnkn  個
邊。
若有一個一對一且映成的函數，將 )( 1GV 對應至 )( 2GV ，使得 )(),( 1GEvu  若
且唯若 )())(),(( 2GEvu  ，則我們稱圖 1G 和 2G 為同構 (isomorphism)。
13
且 ij， jj yx  。二、 112211  nn yxyxyx  (mod k-1)。
對於一個 G-clique K 我們可以定義 G-leader 為 K 中 0]1[ nv 的唯一節
點。為了方便，我們用這樣的一個節點來表示它所對應的 G-clique。如果兩個
G-clique 沒有共同的節點，則稱作不相交。
步驟 11. 證明 nkG , 可以嵌入 1)1(  nkn 個長度為 )1( kn 節點不相交大小為 1k 的
G-clique。
兩個 G-clique 1K 跟 2K 相鄰若且為若存在一對點 1Ku 跟 2Kv 使得如果
不是 )(ufv 就是 )(1 ufv  。
步驟 12. 證明當 n>2 時，每一個 nkG , 中的 G-clique 與 )1(2 k 個不同的 G-clique
相鄰。當 n=2 時，每一個 nkG , 中的 G-clique 與 1k 個不同的 G-clique
相鄰。
步驟 13. 對於任意兩節點 u, v 而言，嵌入連接 u, v 兩節點的最長路徑(longest
u,v-path)於 nkG , 。
步驟 14. 嵌入漢彌頓圓(Hamiltonian cycle)於 nkG , 。
步驟 15. 嵌入樹網路(tree networks)於 nkG , 。
步驟 16. 證明簡化圖的連結度至少為 k，亦即 kRG nk )( , for 3n 。
步驟 17. 利用在ξ-連通圖中給定兩個節點集合 1V 跟 2V ，其中  21 VV ，則
存在ξ條連接 1V 跟 2V 的節點互斥路徑之特性證明 kG nk )( , 。
步驟 18. 證明 k-valent 圖的連結度為 k，亦即 kG nk )( , 。
15
9. 證明當 n>2 時，每一個 nkG , 中的 F-cycle 與 )2( kn 個不同的 F-cycle 相鄰；
當 n=2 時，每一個 nkG , 中的 F-cycle 與 2k 個不同的 F-cycle 相鄰。
第二年完成之工作項目：
10. 證明一個 F-leader 為 2210
~
 nxxxv  的 F-cycle 是與 F-leader 為
1210
~
nyyy  的 F-cycle 相鄰的條件是下列的某一性質成立：一、對於某整
數 i, 11  ni ， ii yx  而且對於所有的整數 j, 11  nj 且 ij，
jj yx  。二、 112211  nn yxyxyx  (mod k-1)。
11. 證明 nkG , 可以嵌入 1)1(  nkn 個長度為 )1( kn 節點不相交大小為 1k 的
G-clique。
12. 證明當 n>2 時，每一個 nkG , 中的 G-clique 與 )1(2 k 個不同的 G-clique 相鄰。
當 n=2 時，每一個 nkG , 中的 G-clique 與 1k 個不同的 G-clique 相鄰。
13. 對於任意兩節點 u, v而言，嵌入連接 u, v兩節點的最長路徑(longest u,v-path)
於 nkG , 。
14. 嵌入漢彌頓圓(Hamiltonian cycle)於 nkG , 。
15. 嵌入樹網路(tree networks)於 nkG , 。
16.證明簡化圖的連結度至少為 k，亦即 kRG nk )( , for 3n 。
17. 利用在ξ-連通圖中給定兩個節點集合 1V 跟 2V ，其中  21 VV ，則存在
ξ條連接 1V 跟 2V 的節點互斥路徑之特性證明 kG nk )( , 。
18. 證明 k-valent 圖的連結度為 k，亦即 kG nk )( , 。
17
1989.
[3] S. G. Akl, Parallel Computertarion: Models and Methods. Prentice Hall,
1977.
[4] H. J. Bandelt and H. M. Mulder, Distance-hereditary graphs, Journal of
Combinatorial Theory Series B, 41(1):182--208, Augest 1986.
[5] L. Bhuyan and D. P. Agrawal,“Genereated hypercube and hyperbus structure
for a computer network,”IEEE Transactions on Computers, bf33:323-333,
1984.
[6] M. S. Chang, S. Y. Hsieh, and G. H. Chen, Dynamic Programming on
Distance-Hereditary Graphs, in Proceedings of 7th International Symposium
on Algorithms and Computation (ISAAC'97), LNCS 1350, pp. 344-353, 1997.
[7] C. Chen, D. P. Agrawal, and J. R. Burke,“dBCube: a new class of hierarchical
multiprocessor interconnection networks with area efficient layout,”IEEE
Transactions on Parallel and Distributed Systems, 4:1332-1344, 1993.
[8] G. H. Chen, J. S. Fu, and J. F. Fang, “Hypercomplete: a pancyclic recursive
topology for large-scale distributed multicomputer systems,”Networks,
35(1):56-69, 2000.
[9] B. Courcele, J. A. Makovsky, U. Rotics, “Graphs of Bounded Clique-width”, 
Theory of Computing Systems, vol. 33, pp. 125-150, 2000.
[10] E. Dahlhaus, Efficient parallel recognition algorithms of cographs and
distance-hereditary graphs, Discrete Applied Mathematics, 57(1):29-44, 1995.
19
Tracks on Parallel Numerics (ParNum'99) and Parallel Computing in Image
Processing, Video Processing, and Multimedia (ACPC'99), LNCS 1557, pp.
417--426, 1999.
[20] S.-Y. Hsieh, C.-W. Ho, T.-s. Hsu, M. T. Ko, and G. H. Chen, Characterization
of efficiently parallel solvable problems on distance-hereditary graphs, SIAM
Journal on Discrete Mathematics, vol. 15, no. 4, pp. 488-518, 2002.
[21] W. J. Hsu, “Fibonacci cubes: a new interconnection topology,” IEEE
Transactions on Paralle and Distributed Systems, 4:3-12, 1993.
[22] K. Hwang and J. Ghosh, “Hypernet: a communication-efficient architecture
for constructing massively parallel computers,” IEEE Transactions on
Computers, C-36:1450--1466, 1987.
[23] Q. M. Maluhi and M. A. Bayoumi, “The hierarchical hypercube:a new
interconnection topology for massively paralel systems,”IEEE Transactions
on Parallel and Distributed Systems, 5:17--30,1994.
[24] K. Menger, “Zur algemeinen Kurventheorie,” Fund. Math.,10:95--115, 1927.
[25] S. ohring and S. K. Das, “Folded petersen cube networks: newcompetitors for
the hypercubes,”IEEE Transactions on Parallel and Distributed Systems,
7:151--168, 1996.
[26] S.Okawa, “Correction to the diameter of trivalent Cayleygraphs,” IEEE
Transactions on Fundamentals,E84-A:1269--1272, 2001.
[27] F. P. Preparata and J. Vuilemin, “The cube-connected cycles: a versatile
21
[36] Junming Xu, “Topological structure and analysis of interconnection
networks”, Kluwer Academic, 2001.
[37] H. G. Yeh and G. J. Chang, Weighted connected domination and Steiner trees
in distance-hereditary graphs, Discrete Applied Mathematics,
87(1--3):245--253, 1998.
[38] H. G. Yeh and G. J. Chang, Linear-time algorithms for bipartite
distance-hereditary graphs, Manuscript.
[39] H. G. Yeh and G. J. Chang, The path-partition problem in bipartite
distance-hereditary graphs, Taiwaness Journal of Mathematics, 2(3):353--360,
1998.
(五) 發表之期刊論文：
Sun-Yuan Hsieh and Tien-Te Hsiao, “The k-degree Cayley graph and its
topological properties,”Networks, vol. 47, issue 1, pp. 26-36, 2006 (SCI;
impact factor 0.742).
A preliminary version of this paper appeared in Proceedings of the 2004
International Conference on Parallel Processing (ICPP), pp. 206-213,
IEEE Computer Society Press (EI), under the title “Topological 
properties, optimal Routing, and embedding on the k-valent graph”.
23
TABLE 1. Topological comparison of various Cayley graphs, where (a)–(g) mean the number of nodes, diameter, degree, connectivity, maximal fault
tolerance, Hamiltonian, and disjoint cliques embedding, respectively.
Topology (a) (b) (c) (d) (e) (f) (g)
n-Cycle n  n2  2 2 yes yes no
Trivalent graph [25] n2n  5n2  − 2 3 3 yes yes yes
Cube-connected-cycle [22] n2n 2n − 1 + max{1,  n−22 } 3 3 yes yes unknown
Wrapped around butterﬂy graph [17] n2n  3n2  4 4 yes yes unknown
n-Dimensional hypercube [5] 2n n n n yes yes unknown
k-Ary n-cube [5] kn n k2  2n 2n yes yes unknown
n-Dimensional star graph [1] n!  3(n−1)2  n − 1 n − 1 yes yes unknown
Cyclic-cubes [13] nkn  3n2  2k 2k yes yes unknown
k-Degree Cayley graph Gk,n n(k − 1)n  5n2  − 2 for k ≥ 6 and n ≥ 4; k k yes unknown yes
2n for k ≥ 6 and n = 2, 3
graphs shown in Table 1, Gk,n possesses a much larger num-
ber of nodes for a given diameter. For example, with diameter
6 and ﬁxed degree 6, the six-dimensional hypercube has 64
nodes, the 4-ary 3-cube has 64 nodes, the cyclic-cube has 324
nodes, butG6,3 possesses 375 nodes.We note here thatGk,n is
generalized from the trivalent graph (which is isomorphic to
G3,n), not from the cube-connected-cycle. The trivalent graph
and the cube-connected-cycle both have the same number of
nodes (see Table 1) and are regular of constant degree 3.
However, both graphs are not isomorphic.
The remainder of this article is organized as follows. In
the next section, we introduce the k-degree Cayley graph.
In Section 3, a shortest path routing algorithm that gives the
diameter is presented. Embedding and connectivity are dis-
cussed in Section 4 and Section 5, respectively. Finally, some
concluding remarks are given in Section 6.
2. THE k -DEGREE CAYLEY GRAPH
The following is a formal deﬁnition of the k-degreeCayley
graph.
Deﬁnition 1. A k-degree Cayley graph Gk,n is an undi-
rected graph with N = n(k − 1)n nodes for any inte-
gers n≥ 2 and k ≥ 3. Each node v of Gk,n has the form
s0s1 · · · sm−1s˜msm+1 · · · sn−1 corresponding to a string of n
symbols selected from {0, 1, . . . , k − 2} such that exactly
one symbol s˜m is in marked form and the others are in
unmarked form. We sometimes use vm to represent a node
v with the marked symbol on position m; thus, the nota-
tions vm and v are used interchangeably throughout this
article. Let s∗i = si or s˜i. Each edge is of type (v, δ(v)),
where δ ∈ {f , f −1, g1, g2, . . . , gk−2} is a generator deﬁned as
follows:
1. f (um) = v(m−1) mod n, where um = s∗0s∗1 · · · s∗n−1,
v(m−1) mod n = s∗1s∗2 · · · s∗n−1α∗ and α = (s0 + 1) mod
(k − 1);
2. f −1(um) = v(m+1) mod n, where um = s∗0s∗1 · · · s∗n−1,
v(m+1) mod n = β∗s∗0s∗1 · · · s∗n−2 and β = (sn−1 − 1) mod
(k − 1);
3. gi(um) = vm, where um = s∗0s∗1 · · · s∗n−1, vm =
s∗0s
∗
1 · · · s∗n−2γ ∗ and γ = (sn−1 + i) mod (k − 1) for
1 ≤ i ≤ k − 2.
For example, {0˜0, 0˜1, 1˜0, 1˜1, 00˜, 01˜, 10˜, 11˜} is the node set
of G3,2. Because f (respectively, f −1) is the inverse of
f −1 (respectively f ), and the inverse of gi equals gk−i−1
for 1 ≤ i ≤ k − 2, the edges of Gk,n are bidirec-
tional. Moreover, according to Deﬁnition 1, k-degree Cayley
graphs form a class of Cayley graphs, a proof of which is
given in Appendix A. Figure 1 illustrates a 3-degree Cayley
graph G3,2.
Proposition 1. Gk,n, n ≥ 2 and k ≥ 3, is a regular graph
of degree k with kn(k−1)n2 edges.
Proof. Straightforward. ■
Vadapalli and Srimani [25] deﬁned the trivalent Cayley
graphs TCn as follows.
Deﬁnition 2. Each node of a trivalent Cayley graph
TCn, n ≥ 2, corresponds to a circular permutation in
lexicographic order of n symbols, t1, t2, . . . , tn, comple-
mented or uncomplemented. The node set of TCn is deﬁned
as V(TCn) = {t∗j t∗j+1 · · · t∗n t∗1 t∗2 · · · t∗j−1|t∗i = ti or t¯i for all
i, j ∈ {1, . . . , n}}. Let j = j. Each edge is of the type
FIG. 1. A three-degree Cayley graph G3,2.
NETWORKS—2006—DOI 10.1002/net 27
25
Deﬁnition 4. Consider an arbitrary node v in Gk,n. Deﬁne:
1. D1(v) =

2n + m − 2LZL
−L[0] − R[1] − 2 if (m− jL −LZL)> 0
2n + m − 2LZL
−L[0] − R[1] otherwise.
2. D2(v) =

3n − m − 2LZR
−R[0] − L[−1] − 2 if (n− jR −LZR)> 0
3n − m − 2LZR
−R[0] − L[−1] otherwise.
3. D3(v) = 2n + m − L[−2] − R[−1].
4. D4(v) = 3n − m − R[2] − L[1].
The four terms Di(v), 1 ≤ i ≤ 4, deﬁned in Deﬁnition 4
represent the lengths of four possible paths in Gk,n from v to
the identity node. The paths are constructed using algorithms
Dist_1–Dist_4, respectively. As will be shown later, the dis-
tance function D(v) computes the length of a shortest path
from v to the identity node. For ease of understanding our
shortest path routing algorithm, we ﬁrst present Algorithm
Dist_1, which we use to generate a path of length D1(v)
from v to the identity node.
Algorithm 1: Dist_1 (v, n,m,LZL, jL)
1: for i = 0 to (jL − 1) do
2: v ← f (v)
3: end for
4: for i = 0 to (jL − 1) + (n − m) do
5: if v[n − 1] 	= 1 then
6: v ← gk−v[n−1](v)
7: end if
8: v ← f −1(v)
9: end for
10: if (m − jL − LZL) > 0 then
11: for i = 1 to (m − jL − LZL − 1) do
12: v ← f −1(v)
13: end for
14: v ← gk−v[n−1]−1(v)
15: for i = 1 to (m − jL − LZL − 1) do
16: v ← f (v)
17: if v[n − 1] 	= 0 then
18: v ← gk−v[n−1]−1(v)
19: end if
20: end for
21: end if
Deﬁnition 5. Thedistance functionof v is deﬁnedasD(v) =
min1≤i≤4{Di(v)}.
Figure 2 illustrates how Algorithm Dist_1 works. The
string representing the given source node v is divided into
four blocks. After executing lines 1–3 of the algorithm, we
FIG. 2. An illustration of Algorithm Dist_1, which moves symbols from
the given source node v to the identity node.
have the intermediate node shown in (2).After executing lines
4–9, we have the intermediate node shown in (3) in which the
symbols of blocks A and D are all 0. If m − jL − LZL > 0,
then lines 10–21 are further executed to form the resulting
identity node.
Example 2. Suppose that v= 10021˜00 is the source node in
G4,7. Then, by Example 1, LZL = 2 and jL = 1. The string v
is divided into four blocks in which Blocks A, B, C, and
D are 1, 00, 2, and 100, respectively. Algorithm Dist_1
works on v as follows: Because jL = 1, lines 1–3 are executed
in one step such that v= 10021˜00 f−→ 0021˜002. Moreover,
because (jL − 1) + (n − m) = 3, the for-loop (lines 4–9)
is executed four times to generate a path 0021˜002 g2−→
0021˜004 f
−1
−→ 00021˜00 g4−→ 00021˜01 f
−1
−→ 000021˜0 g4−→
000021˜1 f
−1
−→ 0000021˜ f
−1
−→ 0˜000002. As m − jL − LZL =
4 − 1 − 2 = 1 > 0, lines 11–13 need to be considered fur-
ther. The two for-loops (one is described in lines 11–13 and
the other in lines 15–20) need not be executed, because
m − jL − LZL − 1 = 0 < 1. Only line 14 is executed to
arrive at the identity node by 0˜000002 g1−→ 0˜000000.
Because the concepts of algorithms Dist_2–Dist_4 are
similar to that of Algorithm Dist_1, we present them in
Appendix B. Our shortest path routing algorithm uses the
shortest path generated by Algorithms Dist_1, Dist_2,
Dist_3, and Dist_4.
The following lemma helps prove the correctness of our
routing algorithm.
Lemma 3. For an arbitrary node v in Gk,n, D(v)−D(v′) =
±1 or 0, where v′ = δ(v) and δ ∈ {f , f −1, g1, g2, . . . , gk−2}.
Proof. Assume that v = s0s1 · · · sm−1s˜msm+1 · · · sn−1
and δ(v)= v′ = t0t1 · · · tm′−1 ˜tm′ tm′+1 · · · tn−1. LetL′,R′,LZL′,
and LZR′ be the corresponding parameters (deﬁned in
Deﬁnition 3) of v′. By the deﬁnition of the distance function,
we can utilize the fact that D(v) − Dp(v′) ≤ D(v) − D(v′) ≤
Dq(v) − D(v′), where p, q ∈ {1, 2, 3, 4}, to simplify the
derivation.
NETWORKS—2006—DOI 10.1002/net 29
27
Theorem 6. For an arbitrary node v in Gk,n, D(v) ≤
max{2n, 5n2 − 2}. Moreover, diam(Gk,n) =  5n2  − 2 when
k ≥ 6 and n ≥ 4; and diam(Gk,n) = 2n when k ≥ 6 and
n = 2, 3.
Proof. By Deﬁnition 4, we have D(v) ≤ min{2n +
m−2, 3n−m−2, 2n+m, 3n−m} = min{2n+m−2, 3n−
m−2} ≤ 5n2 −2 form > 0, andD(v) ≤ min{2n, 3n−2} ≤ 2n
for m = 0. Hence, the upper bound on the diameter is
max{ 5n2 − 2, 2n}. Note that it is 5n2 − 2 for n ≥ 4.
We now show the lower bound. For k ≥ 6 and n ≥ 4,
consider the node v in Gk,n such that v[i] /∈ {0, 1, k−2, k−3}
and m = n/2. Thus, L[0] = L[1] = L[−1] = L[−2] =
R[0] = R[1] = R[−1] = R[−2] = 0 and LZL = LZR = 0.
By Deﬁnition 4, D(v) = min{2n+ n2−2, 3n− n2−2} =
 5n2  − 2. Therefore,  5n2  − 2 ≤ diam(Gk,n) ≤ 5n2 − 2 and
diam(Gk,n) =  5n2  − 2. The case where k ≥ 6 and n = 2, 3
can be shown similarly. ■
4. EMBEDDING
In this section, we show that the k-degree Cayley graph
can embed two types of structure.A cycle is a sequence of dis-
tinct nodes v1, v2, . . . , vq such that for each i= 1, 2, . . . , q− 1,
(vi, vi+1) and (vn, v1) are in E(G), and all the edges
(v1, v2), (v2, v3), . . . , (vq, v1) are distinct. A clique in a graph
is a set of pairwise adjacent nodes.
Two cycles are node-disjoint if they have no common
node. An edge deﬁned by the generator f (or f −1) is an F-
edge, and any cycle in Gk,n consisting of only F-edges is an
F-cycle. The cycle (0˜0, 01˜, 1˜1, 10˜) shown in Figure 1 is an
example of anF-cycle. For a nonnegative integer i, we recur-
sively deﬁne f i(v) =
{
v if i = 0,
f ( f i−1(v)) if i > 0. The notation
(f −1)i(v) can be deﬁned similarly.
Theorem 7. Gk,n can embed (k − 1)n−1 node-disjoint F-
cycles of length n(k − 1).
Proof. Given an arbitrary node v inGk,n, it is not difﬁcult
to verify that f n(k−1)(v) = v and f i(v) 	= f j(v), where 1 ≤
i, j ≤ n(k − 1) and i 	= j. Thus, from an arbitrary node v,
a cycle of length n(k − 1) in Gk,n can be generated by a
functional iteration f n(k−1)(v). Because Gk,n has n(k − 1)n
nodes, totally (k − 1)n−1 F-cycles each of length n(k − 1)
can be generated. These cycles are node-disjoint by the fact
that f (u) = f (v) if and only if u = v. ■
Each F-cycle has a unique node v such that v[i] = s
and m = 0 for two given integers 0 ≤ i ≤ n− 1 and 0 ≤
s ≤ k − 2. Therefore, for each F-cycle C, we can deﬁne the
C-leader (leader for short if no ambiguity arises) to be the
unique node v of C, thereby satisfying v[0] = 0 and m = 0.
Note that each leader uniquely determines a speciﬁcF-cycle.
TwoF-cyclesC1 andC2 are said to be adjacent if there exists
a node v1 ∈ C1 and a node v2 ∈ C2 such that v1 = gi(v2) for
some 1 ≤ i ≤ k − 2.
Theorem 8. Each F-cycle of Gk,n is adjacent to n(k − 2)
differentF-cycles for n> 2. In the case of n= 2, eachF-cycle
of Gk,2 is adjacent to k − 2 different F-cycles.
Proof. We ﬁrst consider n> 2. For an arbitrary F-cycle
C with the C-leader v = 0˜s1s2 · · · sn−1,
(f −1)i ◦ (gj ◦ f i(v)) = 0˜s1s2 · · · s′ · · · sn−1, (2)
where◦means the function composition; s′ = (si−1 + j) mod
(k −1) for all i 	= 1; and 1 ≤ j ≤ k −2. Thus, (n−1)(k −2)
leaders of (n − 1)(k − 2) distinct F-cycles can be obtained
from v. This implies that the given F-cycle is adjacent to
(n− 1)(k − 2) distinctF-cycles. Moreover, the other (k − 2)
leaders can be obtained from v by
(f −1)1+jn ◦ (gj ◦ f (v)) = 0˜s′1s′2 · · · s′n−1, (3)
where s′i = (si − j) mod (k − 1). Therefore, each F-cycle is
adjacent to n(k − 2) different F-cycles.
The case of n = 2 can be proved using either (2)
or (3). ■
The proof of the above theorem leads to the following
result.
Corollary 9. An F-cycle with leader v = 0˜x1x2 · · · xn−2
is adjacent to the following F-cycles with leaders
0˜y1y2 · · · yn−1 such that one of the following conditions
holds.
1. xi 	= yi for some 1 ≤ i ≤ n − 1, and xj = yj for all
1 ≤ j ≤ n − 1 and j 	= i;
2. x1 − y1 = x2 − y2 = · · · = xn−1 − yn−1 (mod k − 1).
We next show that Gk,n can embed cliques. An edge of
Gk,n, deﬁned by the generator gi, is called a G-edge. A clique
is said to be maximal if it is not contained in another clique.
A G-clique is a maximal clique in Gk,n such that each pair
of adjacent nodes is connected by a G-edge. For example,
{0˜0, 0˜1} is a G-clique in G3,2. Note that a G-clique contains
k − 1 nodes. Given some ﬁxed 0 ≤ s ≤ k − 2, each G-clique
has a unique node v that satisﬁes v[n − 1] = s. Therefore,
for a G-clique K , we can deﬁne the K-leader (leader for
short if no ambiguity arises) to be the unique node v∈K that
satisﬁes v[n− 1]= 0. For convenience, we use such a node
to represent its corresponding G-clique. Two G-cliques are
node-disjoint if they have no common node.
Theorem 10. Gk,n can embed n(k − 1)n−1 node-disjoint
G-cliques of size k − 1.
Proof. Clearly, there are n(k−1)n−1 leaders in Gk,n that
correspond to n(k−1)n−1 G-cliques. It is not difﬁcult to verify
that these G-cliques are pairwise node-disjoint. Moreover,
because each G-clique contains k − 1 nodes, the n(k − 1)n−1
G-cliques partition the nodes of Gk,n. ■
NETWORKS—2006—DOI 10.1002/net 31
29
Lemma 15. κ(Gk,n) ≥ k for k ≥ 4 and n ≥ 2.
Proof. We prove this lemma by showing that there are
k pairwise internally disjoint paths between two arbitrary
nodes, u and v, in Gk,n. There are two cases.
Case 1. n = 2. Recall that in this case, RGk,2(= Rk,2) is a
complete graph with k−1 nodes. Thus, there are totally k−1
F-cycles in Gk,2.
Case 1.1. u and v are in the same F-cycle C. This cycle
is a concatenation of two internally disjoint paths from u
to v, denoted by P1 and P2, which contribute two paths.
Let C1,C2, . . . ,Ck−2 be the other F-cycles of Gk,2. Then,
the other k − 2 paths can be constructed by the following
three steps:
1. For each Ci, identify the entry node, gji (u) ∈ Ci, and the
exit node, gli (v) ∈ Ci, where 1 ≤ ji, li ≤ k − 2. It is not
difﬁcult to show that there exist ji and li such that gji (u)
and gli (v) are in the same F -cycle, Ci.
2. For each Ci, construct a path Qi from gji (u) to gli (v) using
the F -edges of the corresponding F -cycle.
3. Construct the desired k internally disjoint paths:
P1,P2, (u, gj1 (u))
⊕Q1⊕ (gl1 (v), v), (u, gj2 (u))⊕Q2⊕
(gl2 (v), v), . . . , (u, gjk−2 (u))
⊕Qk−2⊕ (glk−2(v), v).
Case 1.2. u and v are in differentF-cycles. Let F1 and F2
be the F-cycles to which u and v belong, respectively. We
ﬁrst construct three pairwise internally disjoint paths from
u to v using F1 and F2. If u and v are adjacent, then the
desired paths can be constructed as follows:
A. Find twonodesu1 andu2 (respectively, v1 and v2) different
from u (respectively, v) in F1 (respectively, F2) such that
gi(u1) = v1 and gi(u2) = v2 for some 1 ≤ i ≤ k − 2 (see
also Fig. 3a).
B. Let P[u, u1] and P[u, u2] (respectively, Q[v1, v] and
Q[v2, v]) be two paths in F1 (respectively, F2) whose
FIG. 3. An illustration of Case 1.2 in the proof of Lemma 15.
nodes are all different, except u (respectively, v). Then,
(u, v), P[u, u1] ⊕ (u1, v1) ⊕ Q[v1, v], and P[u, u2] ⊕
(u2, v2)
⊕Q[v2, v] form the desired three paths.
Otherwise, if u and v are not adjacent, then the desired three
paths can be constructed as follows:
I. Find twonodesu1 andu2 (respectively, v1 and v2) different
from u (respectively, v) in F1 (respectively, F2) such that
gi(u1)= v, gj(u2)= v1, and gl(u)= v2, where 1≤ i, j, l ≤
k − 2 (see also Fig. 3b).
II. Let P′[u, u1] and P′[u, u2] (respectively, Q′[v1, v] and
Q′[v2, v]) be two paths in F1 (respectively, F2) whose
nodes are all different, except u (respectively, v). Then,
P′[u, u1]⊕(u1, v), (u, v2)⊕Q′[v2, v], and P′[u, u2]⊕
(u2, v1)
⊕Q′[v1, v] form the desired three paths.
The other k − 3 internally disjoint paths from u to v can be
constructed from the other k − 3 f -cycles using a method
similar to that in Case 1.1.
Case 2. n≥ 3. If u and v are in the same F-cycle,
there exist k internally disjoint paths from u to v. Two
paths are then constructed in the same F-cycle, and the
other k − 2 paths are constructed from adjacent k − 2
F-cycles based on a method similar to that in Case 1. If
u and v are in different F-cycles, then the sets of nodes
{g1(u), g2(u), . . . , gk−2(u), g1( f (u)), g1( f −1(u))} (respec-
tively, {g1(v), g2(v), . . . , gk−2(v), g1( f (v)), g1( f −1(v))}),
which are in k differentF-cycles denoted by {C1, C2, . . . , Ck}
(respectively, {C′1, C′2, . . . , C′k}), can be reached from u
(respectively, v). By Lemma 13 and Lemma 14, there
are k node-disjoint paths connecting {C1, C2, . . . , Ck} and
{C ′1, C ′2, . . . , C′k} in RGk,n. This implies that there exist k
pairwise internally disjoint paths from u to v in Gk,n. ■
We conclude this section with the following theorem.
Theorem 16. κ(Gk,n) = k for k ≥ 3 and n ≥ 2.
Proof. ByLemma12andLemma15,wehaveκ(Gk,n) ≥
k. Also, by the fact that Gk,n is a k-regular graph, we have
κ(Gk,n) ≤ k. Thus, the result holds. ■
6. CONCLUDING REMARKS
In this article, we generalize the concept of the trivalent
graph and propose a new family Gk,n of k-degree Cayley
graphs for building interconnection networks. The proposed
graph is regular of degree k, where k can be any integer larger
than 3. We also show that Gk,n for some ﬁxed integer k ≥ 6
has diameter logarithmic in the number of nodes as well as
maximal fault tolerance. A shortest path routing algorithm is
also presented.
Furthermore, we demonstrate that Gk,n can embed cycles.
A cycle structure, which is a fundamental topology for par-
allel and distributed processing, is suitable for local area net-
works and for the development of simple parallel algorithms
NETWORKS—2006—DOI 10.1002/net 33
31
FIG. 6. An illustration of Algorithm Dist_4, which moves symbols from
the given source node v to the identity node.
the symbols of block B are all 0. Finally, after executing lines
13–15, we locate the identity node.
Figure 6 illustrates how Algorithm Dist_4 works. The
string representing the given source node v is divided into
two blocks. After executing lines 1–6 of the algorithm, we
have the intermediate node shown in (2).After executing lines
7–12, we have the intermediate node shown in (3) in which
the symbols of block B are all 0. Finally, after executing lines
13–15, we locate the identity node.
Algorithm 2: Dist_2(v, n,m,LZL, jR)
1: for i = 0 to (n − 2 − jR − LZR) do
2: v ← f −1(v)
3: end for
4: if (n − jR − LZR) > 0 then
5: v ← gk−v[n−1]−1(v)
6: for i = 0 to (n − 2 − jR − LZR) do
7: v ← f (v)
8: if v[n − 1] 	= 0 then
9: v ← gk−v[n−1]−1(v)
10: end if
11: end for
12: end if
13: for i = 0 to (m − 1) do
14: v ← f (v)
15: if v[n − 1] 	= 0 then
16: v ← gk−v[n−1]−1(v)
17: end if
18: end for
19: for i = 0 to jR − m − 1 do
20: v ← f (v)
21: end for
22: for i = 0 to jR − m − 1 do
23: if v[n − 1] 	= 1 then
24: v ← gk−v[n−1](v)
25: end if
26: v ← f −1(v)
27: end for
Algorithm 3: Dist_3(v, n,m)
1: for i = 0 to (m − 1) do
2: v ← f (v)
3: if v[n − 1] 	= k − 2 then
4: v ← gk−2−v[n−1](v)
5: end if
6: end for
7: for i = m to (n − 1) do
8: v ← f (v)
9: if v[n − 1] 	= 0 then
10: v ← gk−1−v[n−1](v)
11: end if
12: end for
13: for i = 0 to (m − 1) do
14: v ← f (v)
15: end for
Algorithm 4: Dist_4(v, n,m)
1: for i = m to (n − 1) do
2: if v[n − 1] 	= 2 (mod k − 1) then
3: v ← gk−v[n−1]+1(v)
4: end if
5: v ← f −1(v)
6: end for
7: for i = 0 to (m − 1) do
8: if v[n − 1] 	= 1 then
9: v ← gk−v[n−1](v)
10: end if
11: v ← f −1(v)
12: end for
13: for i = m to (n − 1) do
14: v ← f −1(v)
15: end for
REFERENCES
[1] S.B. Akers, D. Harel, and B. Krishnamurthy, The star graph:
An attractive alternative to the n-cube, Proceedings of Inter-
national Conference on Parallel Processing, St. Charles, IL,
1987, pp. 555–556.
[2] S.B. Akers and B. Krishnamurthy, A group-theoretic model
for symmetric interconnectionnetworks, IEEETransComput
38 (1989), 555–566.
[3] F. Annexstein, M. Baumslag, and A.L. Rosenberg, Group
action graphs and parallel architecture, SIAM J Comput 19
(1990), 544–569.
[4] H. Attiya, M. Snir, and M.K. Warmuth, Computing in an
anonymous ring, J ACM 35 (1988), 845–875.
[5] L. Bhuyan and D.P. Agrawal, Generalized hypercube and
hyperbus structure for a computer network, IEEE Trans
Comput 33 (1984), 323–333.
NETWORKS—2006—DOI 10.1002/net 35
33
