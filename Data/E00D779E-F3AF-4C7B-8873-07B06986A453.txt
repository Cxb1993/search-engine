2二、研究目的：
In this project, we try to find some proper assumptions both on communication reliability
and synchrony such that we can design a new leader election protocol based on our assumptions.
We try to achieve the goal of communication efficiency as well. Especially, we will consider
Byzantine failures where a process can behave arbitrarily according to its specification. This is a
more general situation and thus a more difficult problem. It is very possible to discover more
interesting problems from this topic. Obviously, protocols that work with general failures and
weak assumptions have better coverage than protocols that work with restricted failures and
strong assumptions. Finally, we will perform some simulation experiments to certify and analyze
the performance of our protocol, by using a C-based discrete-event simulation language,
PARSEC [13].
三、文獻探討：
All the existent leader election protocols proposed in the literature implicitly assume that
each process initially knows the identity of each other process. In [12], the authors provide weak
assumptions both on the initial knowledge of the processes and on the network behavior and then
consider the eventual leader election problem in asynchronous distributed systems where an
arbitrary number of processes can crash. Particularly, two eventual leader election protocols are
proposed. One protocol assumes that a process also knows the lower bound on the number of
processes that do not crash. This protocol is not communication-efficient in the sense that each
correct process has to send messages forever. The other protocol is communication-efficient: after
some time, only the final common leader has to send messages forever. This protocol does not
require the processes to know the lower bound on the number of crashed processes, but needs
stronger properties from the underlying network [12].
四、研究方法：
First, we describe the asynchronous system model that this project is based on. The system
is composed of a finite set of processes, and each process proceeds at its own speed. Each process
has an id. The process ids are totally ordered, for example they can be integers, but need not be
continuous. Initially, a process knows its own id and the fact that no two processes have the same
id. Furthermore, up to a predefined amount of processes can reveal a Byzantine behavior,
implying that this process can behave in an arbitrary manner. This model is the most severe
process failure model. A Byzantine process can crash, fail to send or receive messages, send
arbitrary messages, start in an arbitrary state, perform arbitrary state transitions, and so on.
However, we need to assume that Byzantine processes do not control the network. For instance,
the schedule of message delivery is chosen in advance and is thus oblivious to the Byzantine
process behavior, etc. A process that exhibits a Byzantine behavior is called faulty. Otherwise, it
is correct. A process executes correctly until it is faulty. Lastly, the processes communicate by
exchanging messages through a communication network, which is assumed to be reliable, namely,
no loss, creation, or corruption of messages. Moreover, there is no bound on message transfer
delays (i.e. asynchronous).
In this project, we have to first come up with some assumptions on the initial knowledge of
4processes may crash. On the other hand, our problem is hard to work out because of the unknown
process identities. Hence, we first handled such a problem under the assumption that processes do
not crash. We have discovered that some basic concepts for this problem. Particularly, in order to
elect a leader, the topology of the network must be constrained. If all processes in the network do
not know any other processes, no processes can communicate and cooperate with other processes
to solve the problem. Thus every process somehow has to get partial knowledge about system
participants initially. Based on the graph formed by such knowledge of all processes, we have to
determine the necessary and sufficient connectivity condition for the problem. Especially, there
can only one sink component during the course of election. Moreover, an algorithm based on this
condition must also be provided. Our concepts support a good start for solving this problem as
well as overcoming the advanced case when processes may crash.
參考文獻：
[1] L. Lamport, R. Shostak and L. Pease, “The Byzantine general problem,” ACM Trans. 
Programming Languages and Systems, vol. 4, no. 3, pp. 382-401, 1982.
[2] L. Pease, R. Shostak and L. Lamport, “Reaching agreement in presence of faults,” J. the ACM,
vol. 27, no. 2, pp. 228-234, 1980.
[3] T. D. Chandra and S. Toueg, “Unreliable failure detectors for reliable distributed systems,” J. 
the ACM, vol. 43, no. 2, pp. 225-267, Mar. 1996.
[4] M. J. Fischer, N. Lynch and M. S. Paterson, “Impossibility of distributed consensus with one
faulty process,” J. the ACM, vol. 32, no. 2, pp. 374–382, Apr. 1985.
[5] H. Attiya and J. Welch, Distributed computing: Fundamentals, simulations and advanced
topics, McGraw–Hill, 1998.
[6] N. A.Lynch, Distributed algorithms, Morgan Kaufmann Pub., San Francisco, CA, 1996.
[7] M. Raynal, “Consensus in synchronous systems: A concise guided tour,” Proc. the 2002 
Pacific Rim Int’l Symp. Dependable Computing, pp. 221-228, Dec. 2002.
[8] M. J. Fischer, N. Lynch and M. S. Paterson, “Impossibility of distributed consensus with one 
faulty
process,” J. the ACM, vol. 32, no. 2, pp. 374–382, Apr. 1985.
[9] L. Lamport, “The part-time parliament,” ACM Trans. Computer Systems, vol. 16, no. 2, pp. 
133-169, 1998.
[10] T. D. Chandra, V. Hadzilacos, and S. Toueg, “The weakest failure detector for solving 
consensus,” J. the ACM, vol. 43, no. 4, pp. 685-722, 1996.
[11] A. Mostefaoui, M. Raynal and C. Travers, “Crash-resilient time-free eventual leadership,” 
Proc. 23th Int’l IEEE Symp. Reliable Distributed Systems, pp. 208-217, Florianopolis, Brasil,
2004.
[12] A. Fernández, E. Jiménez, and M. Raynal, “Eventual leader election with weak assumptions 
on initial knowledge, communication reliability, and synchrony,” Proc. the Int’l Conf. 
Dependable Systems and Networks, pp. 166-178, June 2006.
[13] UCLA Parallel Computing Laboratory, PARSEC Simulation Languages Release 1.1,
http://pcl.cs.ucla.edu/projects/parsec/, 1999.
出席國際學術會議心得報告
計畫編號 NSC 96-2221-E-005-030
計畫名稱 非同步分散式系統之領導者選舉協定、一致協定與不可分割廣播協定之研究
出國人員姓名
服務機關及職稱
國立中興大學電機工程學系 蔡智強 副教授
會議時間地點 96年 12月 17日至 19日 澳洲墨爾本市
會議名稱 二 OO七年太平洋週邊可靠計算國際會議 (PRDC 2007)
發表論文題目 Self-Adjusting Indexing Techniques for Communication-InducedCheckpointing Protocols
一、參加會議經過
此次由 IEEE Society 所舉辦之二 OO 七年太平洋週邊可靠計算國際會議(PRDC 2007)在
2007年 12月 17日至 12月 19日於澳洲的公園城市墨爾本舉行。這是一個一年一度的大
型國際會議，與會專家學者包含了美國、日本、法國、瑞典、韓國、英國、加拿大、葡
萄牙、西班牙、瑞士、香港、大陸、義大利以及中華民國等十幾個國家。大家共同討論
可靠計算方面最新的研究主題與方向，並且交換研究心得。Kyenote Speech 與發表的論
文均相當先進，對國內學術研究有很大的幫助。本人在這會議上口頭報告發表一篇論文。
本人於12月15日早上自行從台北出發，經由香港轉機並於當天晚上抵達澳洲墨爾本市。
休息兩晚調整時差與體力後，17日開始參加會議。上午九時舉行開幕式後，立即開始進
行一場Keynote Speech，由美國University of Illinois at Urbana-Champaign的William H.
Sanders教授主講，隨後便開始各場Sessions。第二天一早也是進行第二場Keynote Speech，
是由葡萄牙University of Lisboa的Paulo Verissimo教授主講。隨後便開始各場Sessions，本
人被安排於上午第一場Session: Distributed Systems (II)口頭報告發表論文。下午則繼續參
加各場Sessions並與各國專家學者交換研究心得，晚上則參加了會議所舉辦之晚宴。
19日整天也是繼續參加會議。於此次會議中，本人選擇較有興趣的幾個 Session去聆聽
其他優秀學者的論文發表，如 Distributed Systems、Dependable Networks、Security Issues
和 Dependable Systems and Hardwares等等，並且也參加了各場 Keynote Speech，獲益良
多。19日上午與各國學者道別並相約下次 PRDC會議時見後離開會場，之後便在墨爾本
市拜訪親友以及遊覽。28日搭機返回台灣，並於 29日晚上回到台中。
