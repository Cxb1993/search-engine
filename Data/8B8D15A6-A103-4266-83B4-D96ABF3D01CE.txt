2央伺服器的效能形成此架構的效率和擴展的瓶頸，而且中央伺服器容易形成駭客的目
標。此外，此架構還有一個嚴重的缺點是具有單點失敗的問題（single point of failure
problem）。此架構較著名的 P2P 系統有 Napster、eDonkey 和 eMule 等。
2. 分散/無結構式點對點系統（Decentralized/Unstructured P2P System）：
此架構最大的特點是沒有中央伺服器和明確的網路拓撲（network topology）。使用
者欲查詢檔案時，電腦會將查詢封包傳送到與它連的電腦，並且使用 flooding 的方式
把查詢封包傳送下去。此外，在查詢封包上使用的 TTL（Time to Live）的方式限定查
詢的範圍。然而，因為使用了 TTL 來限定查詢範圍，在查詢範圍外的檔案會被遺漏。
這也使得查詢的品質大幅下降。當電腦收到查詢封包後除了會將查詢封包傳遞下去
外，會查詢本身是否有符合的檔案，如果有則將結果沿著原路徑回傳。在查詢的使用
者電腦收到回傳結果後，檔案傳送是透過 HTTP 的方式來完成。此架構的優點是容易
開始、不需要維護、沒有單點失敗的問題以及當系統一旦開始運作後將會很難被完全
關閉。也因此此架構不怕被駭客攻擊。但很明確的缺點是搜尋比較沒有效率而且因為
是使用 flooding 方式來傳送查詢封包，這造成網路傳輸量（Network Traffic）的大量增
加。此架構較著名的 P2P 系統是 Gnutella，它在 2005 年已經是第三大的 P2P 系統。
3. 分散/結構式點對點系統（Decentralized/Structured P2P System）
此架構的特點是利用分散式雜湊表（distribution hash table）來建立網路拓撲（network
topology）。在系統中，每台電腦（peer）都有一個 ID 編號，並且維護與它相鄰的電腦
的 ID 和它的 IP 位置的列表。當一台電腦要加入此類系統時，會透過 hash table 將電腦
的 IP 位置轉換成一個 ID，並且通知與此 ID 相連的 peer 更新其維護的 ID 的 IP 位置。
如此，此電腦即成功的加入系統。之後，新加入的電腦會將其擁有的檔案的檔名透過
hash table 轉換成 key，並將 key 視為 ID 編號且將本身的 IP 位置傳至擁有此 ID 編號的
peer 更新其維護的 key list。因此，當使用者欲搜尋時，系統會將使用者搜尋的關鍵字
透過 hash table 轉換成 key，並傳送查詢封包到與 key 相同的 ID 位置取得其維護的 key
list，系統在根據 key list 的 IP 位置去取得檔案。此架構的優點是負載平衡、保證在一
定的時間內能夠取得查詢結果和具有自我修復的功能。但是最大的缺點即是無法提供
類似搜尋引擎方式的關鍵字查詢。例如：如果再搜尋引擎查詢『可樂』這個關鍵字，
搜尋引擎的查詢結果內會包含有可口可樂和百事可樂這兩種資料。但是在此架構的系
統上，查詢結果只能找到檔案名稱為『可樂』的檔案。因此，查詢的品質較差。使用
此架構的系統有 Chord、CAN、Pastry 和 Tapestry。
4. Hybrid P2P System:
此類架構是混合 Centralized 和 Decentralized/Unstructured 架構。使用此架構的 P2P
系統有 KaZaA 和 FastTrack。以 KaZaA 為例，在 KaZaA 系統中，peer 被分成兩種，super
4圖二：PeerCluster 設計概念 圖三：在圖二中的一種可能的 hypercube 拓譜
圖二為三種不同興趣的群組：Movie, Computer 和 Sport。當 peer 加入此系統時，將在
這三個群組中設定一個主要的興趣群組並且加入此群組中。此外，PeerCluster 的查詢策略
是當 peer 查詢同群組時，則使用廣播的方式散播查詢(intracluster broadcasting)；而查詢不
同群組時則先路由到目的群組後在用廣播的方式散佈查詢(intercluster routing + intracluster
broadcasting)。因此，intercluster routing 和 intracluster broadcasting 為 PeerCluster 系統兩個
主要的功能。為了在分散式網路拓譜能夠對這兩個功能有較好的效能，PeerCluster 利用
hyperclube 來建立系統。圖三為圖二的一種可能的 hypercube 拓譜。在圖三中由一個 5-維度
的 hypercube 來包含三個興趣群組：Movie, Computer 和 Sport，分別由一個 4-維度兩個 3-
維度的 subhypercube 所組成。每個節點可以是為一個 peer。兩個節點若有連結相連表示在
系統中這兩的節點是鄰居關係。由圖三所知，由於 hyperclube 被切割成三個群組，因此每
個節點的連結有兩種性質，一個是連結同群組鄰居的 intra-cluster link，另一個是連結不同
群組鄰居的 inter-cluster link。透過 inter-cluster link 來完成 intercluster routing，並且用
intra-cluster link 來達成 intracluster broadcasting。
我們使用 HyperCube topology 來建立 PeerCluster 的架構，並且使用 Huffman code 的編碼方
式對 HyperCube 的架構來分群。在 PeerCluster 中，每個維護一個 router table，其記錄的是
在 HyperClube 中與它相鄰的 IP 位置。圖四為一個 router table 的範例。
圖四：Router table 的範例
當一個 peer 加入 PeerCluter 系統時，使用者要先選擇欲加入的群組，系統將會把空的 ID 位
置配置給加入的 peer，並且通知其 router table 中的相鄰 peer 更新他們的 router table。在查
詢時，使用者除了輸入關鍵字外並要選擇查詢的群組，如果查詢的群組與自己加入的群組
6四、實驗結果與分析
圖五：不同群組數量下的查詢效能比 圖六：在興趣熱門程度頃斜下的查詢效能比
圖五與圖六顯示PeerCluster2和PeerCluster在不同群組數量以及興趣熱門程度頃斜下的
查詢效能比較結果。在圖五中，當系統大小相同下，群組數量越少表示群組大小越大，反
之群組大小越小。因此，在群組數量少時，PeerCluster2 的子群組的效能越明顯，而當群組
數量越多時，其效能將與 PeerCluster 相似。另一方面，在圖六中，標題的興趣熱門程度相
同，表示使用者查詢標題機率相似，反之，如果某個標題熱門程度越高，表示使用者將集
中查詢此主題。因此，當熱門程度越頃斜時，PeerCluster2 的效能將越明顯，而當熱門程度
越平均，其效能將與 PeerCluster 相似。根據這些結果，PeerCluster2 在系統大小越大以及標
題熱門程度差異越大時，越能突顯其效能。
五、計畫成果自評
根據實驗結果顯示，我們在 PeerCluster 系統的群組中根據 peer 所提供的內容透過
Content-based User Clustering 對 peer 相似性分析再進行一次分群的方式，讓大項標題群組
內能夠在形成子群組。透過這樣的方法，成功的提升整體的查詢效能。
六、參考文獻
[1] The Discussion Board of eDonkey, http://www.cyndi.idv.tw/forum/index.php, 2001.
[2] C. Batten, K. Barr, A. Saraf, and S. Treptin. pStore: A secure peer-to-peer backup system. Technical
Memo MIT-LCS-TM-632, MIT Laboratory for Computer Science, December 2001.
[3] L. Bhuyan and D.P. Agrawal, “Generalized Hypercube and Hyperbus Structures for a Computer
Network,” vol. 33, pp. 323-333, 1984.
[4] C. Blake and R. Rodrigues. High Availability, Scalable Storage, Dynamic Peer Networks: Pick Two. In
9th Workshop on Hot Topics in Operating Systems (HotOS-IX).
[5] J-M. Busca, F. Picconi, and P. Sens. Pastis: A Highly-Scalable Multi-User Peer-to-Peer File System. In
Euro-Par 2005, Lisboa, Portugal.
[6] T.F. Chan and Y. Saad, “Multigrid Algorithms on the Hypercube Multiprocessor,” IEEE Trans.
Computers, vol. 35, no. 11, pp. 969-977, Nov. 1986.
[7] Y. Chawathe, S. Ratnasamy, B.L.N. Lanham, and S. Shenker,“Making Gnutella-Link P2P Systems
