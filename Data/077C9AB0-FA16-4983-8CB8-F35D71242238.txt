2behavior – yet-to-synchronize behavior that appears in a subsystem’s state space, but
its reachability is uncertain in the whole state space. So, methods to hide the internal
details of a subsystem must be capable of dealing with the “pending” behavior, which
excludes several well-known state-space reduction or minimization methods.
Bisimulation, technologically, is very suitable for such an application. Bisimula-
tion was first introduced by Milner [20](i.e., CCS). Milner introduced strong and weak
bisimulation to relate two communicating systems. Weak bisimulation, also known as
observational equivalence, is widely used in practical applications. A finer bisimulation
equivalence, called branching bisimulation, was later proposed by Glabbeek[11] to im-
prove weak bisimulation equivalence. Branching bisimulation and weak bisimulation
are the same for a large class of processes. It is finer than the weak bisimulation but
has some good properties, such as lower complexity and a simpler algorithm. So, in our
previous work [6, 5], branching bisimulation has been used as the tool to hide internal
details of a subsystem. The branching bisimulation minimization (BBM) tool we use is
Fc2tools from INRIA [4]. It is a solid, stable set of tools, which is well implemented.
Minimizations can be invoked only after the state space is entirely explored. We call
this type of minimization as off-line.
Although off-line BBM has been applied successfully to many tasks, we have en-
countered the following scenario: When the parallel composition engine consumes
memory up to a certain point, the operating systems begin swapping pages between
physical memory and the hard disk. This symptom is known as “thrashing.” When that
happens, the system’s performance degrades dramatically due to the heavy disk I/Os.
Beyond this point, the whole system becomes unusable, even though BBM can shrink
the state-space considerably once it has the chance.
In this paper, we propose a pragmatic on-the-fly BBM approach. The minimization
is incorporated with the parallel composition engine. When the shortage of memory
resources is detected, branching bisimulation minimization is invoked to minimize the
explored state space and then release the memories which are no longer used. Such an
on-the-fly approach allows systems of larger size to be verified.
2 Related Work
Branching bisimulation equivalence was introduced by Van Glabbeek and Weijland in
[11]. They argue that this equivalence relation applied on labeled transition systems
(LTS) is finer than the observation equivalence of Milner[20]. Branching bisimulation
is favored for the following reasons. In the view of algorithm, branching bisimulation
can be decided in O(mn) time complexity, where m is the number of transitions and
n the number of states, and in O(m) space complexity [13, 4]. Nevertheless, the fastest
algorithm of observation equivalence has O(l ·n2.367) time complexity and O(n+m+)
space complexity, where l is the number of actions and m+ is the number of edges
after taking τ+ the transitive closure. Van Glabbeek has also shown that observation
equivalence is not adequate for a modal logic with eventually operator. Therefore, if we
apply the observation equivalence to minimize a process, the liveness properties will be
lost. Nonetheless, branching bisimulation preserves liveness properties.
41. Π:= Π0
2. while (Π is not stable)
3. begin
4. Find (B, B’) unstable
5. Π:= RefineΠ(B,B′)
6. end
In the beginning, the algorithm initializes a partition Π to Π0, where Π0 is a partition
with one block which contains all the states of a LTS. Then it repeats a refinement step
which consists in finding an unstable pair of blocks and refining the current partition
with respect to it, until a stable partition is obtained.
Definition 2. Given an action a in A of LTS, a pair of blocks (B,B′) of Π is a-unstable
iff in the setting of (B 6= B′ or a 6= τ) and φ 6= Posa(B,B′) 6= B, where
Posa(B,B
′) = {s ∈ B |∃s1, s2, ..., sn, s
′ : s0 = s,
∀i > 0, si ∈ B ∧si−1
τ
→ si, sn
a
→ s′∧s′ ∈ B′}. 
The condition (B 6= B′ or a 6= τ) means that we cannot use τ -action to check the
instability of B itself. The condition φ 6= Posa(B,B′) 6= B means only partial states
in B may reach states in B′ via action a. If both conditions hold, the pair of blocks
(B,B′) is a-unstable. This instability notion is better explained in Fig. 1. In the figure,
a block B is checked against a splitter B′ with action a. The states which can use a
to reach block B′ is marked as grey. If the set of marked states is fewer than B, B is
unstable. Therefore,B will be split into two blocks, one with the marked states and one
with the unmarked states. In other words, the stability of a block is determined by its
outgoing transitions to other blocks, including τ actions.
Fig. 1. The instability notion checked by a splitter block.
A pair of blocks is said to be unstable if and only if there exists an action a for
which these blocks are a-unstable, otherwise it is said to be stable. More generally, a
block B of a partition Π is said to be stable iff for all blocks B′ in Π , the pair (B,B′)
is stable. The partition Π is stable iff each of its blocks are stable.
When the BBM algorithm finds an unstable pair of blocks, it applies the refinement
below in the current partition by splitting a block into two smaller blocks.
6been totally explored, the correctness of a finer instability notion is preserved. That is,
once a block B is stable with respect to all its splitters, the newly explored behavior
(must be from splitter blocks) will not be able to split the block anymore, though B
could be merged into a bigger block in the future. Using this property, we design our
pragmatic approach as follows. We first define:
Definition 5. A complete-partial LTS.
Given an entire state space L = < S,A,→, q >, LC = < SC , AC ,→C , qc > is a
complete-partial LTS with respect to L iff
LC is a partial LTS of L and each nonterminal state in LC has their outgoing tran-
sitions explored totally. 
To obtain a complete-partial LTS, we need to explore the reachable states breath-
firstly. The nature of breath-first search maintains its explored state space as a complete-
partial LTS at all time. So, to cope with our approach, the parallel composition must be
designed to explore states breath-firstly.
Our approach for intermediate minimization is described as follows. During state
exploration, the program may pass a complete-partial LTS to the BBM module to
start an intermediate minimization. In each immediate minimization, we prepare the
complete-partial LTS into an initial partition which consists of a main-block and splitter-
blocks (shown in figure 2). In this complete-partial LTS, the terminal states, which either
have unexplored successor states or not, are made into disjoint splitter-blocks. Splitter
blocks collects all the terminal states of a complete-partial LTS so that no outgoing tran-
sitions from main-block would end at other places.
Fig. 2. The main-block and splitter blocks of a complete partial LTS.
Lemma 1. Let a block B be a complete-partial LTS without terminal states. Let B
be partitioned into Bi, i ∈ I by all the actions from B that end at splitter-blocks. Then,
Bi is final, i.e., it can never be split by other transitions (such as unexplored states).
Proof. By contradiction. If Bi can be split by other transitions which do not start from
8Algorithm 2 The Minimization procedure.
1: Let UnstableBlockList be an empty block list;
2: Let complete_partial_LTS be a partially composed LTS;
3: void Minimization( splitterlist ) {
4: MergeTauCycle( complete_partial_LTS );
5: PrepareUnstableBlockList( splitterlist );
6: BranchBisim( complete_partial_LTS );
7: }
8: void PrepareUnstableBlockList( splitterlist ) {
9: Let MainBlock be an empty block;
10: for all s in complete_partial_LTS.States {
11: if s is in splitterlist {
12: Create an empty block b; // the splitter-block
13: b.BottomList.add( s );
14: Add all s.InTrans into b.TransitionList;
15: UnstableBlockList.add( b );
16: }else {
17: MainBlock.BottomList.add( s );
18: Add all s.InTrans into MainBlock.TransitionList;
19: }
20: }
21: MainBlock.resetMark();
22: MainBlock.resetBlockPtr();
23: MainBlock.resetBottomList();
24: UnstableBlockList.add( MainBlock );
25: }
files, if no minimization method or analysis algorithm is invoked. The required memory
storage is the hash table which keeps the information of explored states so that when a
new reachable state is generated, it can be checked if it is already explored before.
In a straightforward implementation of explicit state enumeration, a state and a tran-
sition require the least memory structure as follows:
struct state_type {
BITSTATE state_no ; // the bit representation
struct edge_type * transitions ;
};
struct edge_type {
struct state_type *to ; // the destination state
struct edge_type * next ; // the pointer to link the transitions
};
Let the length of BITSTATE be S bits. A pointer in most platforms occupies 4 bytes. So,
a state with 3 outgoing transitions can occupy (
⌈
S
8
⌉
+4)+3∗8 bytes. In the hash table,
a state needs to store
⌈
S
8
⌉
+ 4 bytes, where 4 bytes are the pointer to the state. When
a state is merged, the memory resources of its state and transitions can be freed and
re-allocated but it still needs to keep a copy of BITSTATE (⌈S
8
⌉
+ 4 bytes) in the hash
table and its pointer in the hash table is redirected to the representative state of all the
merged ones.
By the analysis above, let the number of states being merged be n. Assume each
state has 3 transitions. The total memory occupied (including hash table) by these states
are n ∗ ((
⌈
S
8
⌉
+ 4) + 24 + (
⌈
S
8
⌉
+ 4)) bytes. After these states are merged, there are
n ∗ (
⌈
S
8
⌉
+ 4) bytes need to be kept in the hash table. Take S = 32 for example. 4/5 of
the memory is returned for reallocation. So, using our strategy, it could approximately
have a factor 5 gain.
10
Enumerating
statespace
Computing S.C.C.
Merging S.C.C.
Splitting blocks
Merging blocks
Three-Elevator System
Global Composition with on-the-fly Min. ( 5000 states )
0
5000
10000
15000
20000
25000
30000
0 30 60 90 120 150 180 210
Elapsed Time (sec.)
S
t
a
t
e
N
u
m
b
e
r
s
28983
7803
147
(a) (b)
Fig. 3. A comparison of analyses with/without on-the-fly BBM by the maximum number of states
ever generated.
We have shown that a partially explored LTS can be minimized by the BBM algorithm
if its state exploration is enumerated breath-firstly and an initial partition is prepared
in a specific way. In our future research, we will seek approaches to determine the
thresholds of triggering intermediate minimization automatically so that BBM is only
triggered at the precise timing. The thresholds apparently may vary from a system to a
system.
References
1. D. Bergamini, N. Descoubes, C. Joubert, and R. Mateescu. Bisimulator: A modular tool for
on-the-fly equivalence checking. In TACAS, pages 613–618, 2005.
2. S. Blom and J. van de Pol. State space reduction by proving confluence. In Proc. of 14th Int.
Conf. on Computer Aided Verification, LNCS 2404, pages 596–609, 2002.
3. A. Bouajjani, J.-C. Fernandez, and N. Halbwachs. Minimal model generation. In Pro-
ceedings of International Conference on Computer-Aided Verification(CAV), Volume 531 of
Lecture Notes in Computer Science, pages 197–203, 1990.
4. A. Bouali. Weak and branching bisimulation in fctool. Technical Report Technical Report
1575, INRIA, Sophia Antipolis, Valbonne Cedex, France, 1992.
5. Y. Cheng. Refactoring design models for inductive verification. In Proceedings of Inter-
national Symposium on Software Testing and Analysis (ISSTA2002), pages 164–168, Rome,
Italy, July 2002.
6. Y.-P. Cheng, M. Young, C.-L. Huang, and C.-Y. Pan. Towards scalable compositional analy-
sis by refactoring design models. In Proceedings of the ACM SIGSOFT 2003 Symposium on
the Foundations of Software Engineering, pages 247–256, 2003.
7. S. C. Cheung and J. Kramer. Context constraints for compositional reachability analysis.
ACM Transactions on Software Engineering and Methodology, 5(4):334–377, October 1996.
8. D. Dams and J. Groote. Specification and implementation of components of a
£gCRL toolbox. Technical Report 152, Logic Group Preprint, SeriesUtrecht University,
http://homepages.cwi.nl/ mcrl, 1995.
9. J.-C. Fernandez and L. Mounier. A tool set for deciding behavioral equivalences. In CON-
CUR, 1991.
