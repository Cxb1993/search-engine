 2
Abstract 
 
 
In this project, we propose to 
investigate the research issues to build 
Java compiler on the network processor 
platform. With the new era of arrivals of 
network application, traditional routers 
and switchers are not faster enough for 
applications. Using new network 
processor architecture and hot object 
oriented language compiler, we can have 
faster and better environment for 
development of network application. 
 
 
As huge improvement of internet 
infrastructure in the recent decade, people 
gain much more convenience on those 
high-speed  communication and data 
transformation from internet than in 90’s.  
 
 
Network processor is a new computer 
architecture which is designed for 
nowadays high throughput network data 
processing, which is mainly composed of 
a core-processor and multiple 
co-processors with hierarchical memory 
system. This kind of complex system 
communicates with variety of memory 
architecture could make packet processing 
jobs separated to different mutual 
exclusive ones and processed by each 
computing units synchronously and as fast 
as possible. Each computing unit is 
supposed to run a component, which we 
call it PPF(packet processing function) in 
a packet processing flow to make sure 
every packet is processed in an efficient 
way.  
 
 
Intel’s network processor (IXP) is the 
perfect example allows a single stream 
packet/cell processing problem to be 
integrated into multiple, sequential, and 
synchronous tasks that can be linked 
together easily. It has one XScale 
processor and multiple RISC processors 
called micro-engines which allows 
network application processed in  
 
 
 
simultaneous methods. Network 
applications shall be separated in several 
different tasks.  
   
 
We bring up a solution using the 
approaches to emphasize on enabling Java 
programming languages over IXP network 
processors to make a good model for 
compilers over multi-core architectures. 
Previous work about multi-core compilers 
over IXP is the IXA Software 
Development Kit which supports only C 
front-end and must be tuned by human 
efforts.  
 
 
In this project, we propose a neat 
interface for users to program Intel IXP 
network processors without considering 
about hardware details. Also, by the 
convenience of GNU Compiler Collection, 
programmers on Intel IXP could easily use 
this tool to help program the network 
application on IXP. 
 
 
 
Keywords: Compiler System, Machine 
Description, Compiler Porting, Intel 
IXP, Network Processor, Language, 
Java Compiler. 
 
 
二、緣由與目的 
 
   
  由於網路資訊科技的蓬勃發展，人
們在日常生活中的網路使用也日趨頻
繁，各式各樣的家電產品，隨著日新月
異的網路頻寬的快速加大以及使用族群
人數的快速增加，對於網路伺服器功能
的要求更顯地格外重要，一般架構的處
理器已經不能滿足網路所需的大量封包
處理，並且 protocol 的發展也越趨於
dynamic 跟複雜，所以為了網路資料快
速處理方案，進而投靠新的網路架構解
決方案。 
 4
二、Difficulties 
我們選用 AVR driver machine 作
為原始的 machine description 來做
porting。由於 AVR 跟 IXP 是不同的機
器，以下是遇到的一些困難的地方以
及解決方法： 
 
1. Stack operation 
Micro-engine 並沒有 stack 
operation，但是在現今的程式語言
以及網路應用上，stack 扮演著一
個很重要的角色。所以我將 stack
放置在 ME 中的 local memory
中，再設計一套 local memory 的
指令來取代 stack 的操作。 
 
2. Function call 
IXP 的機器架構主要是將功
能分散到各個 ME 上來做分工，
所以並沒有設計 function call的功
能，所以我們利用上面提到的
stack 來實做 function call 跟
return。主要關鍵在於協調及回應
function call calling convention。 
 
3. Label uniqueness 
在上面提到的 function call calling 
convention 中加入＃來做 label 且
必須唯一，branch instruction 及
return label 也要有相同的性質。 
 
 
三、Machine description implementation 
GCC 描述目標機器的方法是利用
一個檔案：xx.md；GCC 先將 RTL tree
轉成 RTL expression，如下圖： 
 
然後再將 RTL expression 對應 machine 
description轉成machine assembly code 
 
 
 
四、Produced assembly result 
Source code： 
 
 
Produced assembly code： 
