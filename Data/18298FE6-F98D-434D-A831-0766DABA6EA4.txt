2 
中   華   民   國  96 年  10  月   10  日 
摘要 
本研究計畫主要探討對於序列串並連可靠度問題(series-parallel redundant reliability 
problems)中其在有資源的限制下，如何同時考量在每個子系統中有多種類別的組件可選
擇，以及對所選組件併聯的數目需同時決定，而欲使其系統可靠度最大。更進一步我們將
考量上述系統中加入系統存活性(survivability)的考量，也就是當系統受到攻擊或隨著時間
的增長可能造成的內部退化損壞，而系統在多重狀態(multi-state)的損壞下仍能夠維持最基
本的運作。所以如何能在有資源限制下設計出具備存活度最高的系統，或者是以最少的成
本設計出符合最低存活度需求之系統其乃為此一階段的主要目的。系統可靠度最佳化問題
於過去文獻上已被廣泛探討，其大部分使用數學規劃方法或啟發式法求解。然而在過去文
獻中最大的困難在於限制式的數量多而難以滿足，使得求解品質仍待提升。本計畫對傳統
序列串併聯的可靠度系統的最佳化進行研究，並提出一新方法求解，並且對具備「存活度」
特性的序列串併聯的可靠度系統的特性，提供解決此一問題之最佳化法。利用所提方法求
解上述問題之最佳解或最佳近似解預期將較其他傳統方法簡易，並且藉由過去文獻各測試
例題的進行結果比較，證實本研究計畫所提方法之解應優於或同於目前各種不同文獻上所
列之數學規劃方法和啟發式方法。 
前言 
系統可靠度的最佳化設計上對於現實生活中的實際應用乃是相當重要且廣泛，而且過
去幾十年來各類的系統可靠度問題一直是許多學者持續進行的重要研究課題，因此本計畫
主要探討對於序列串並聯可靠度問題(series-parallel redundant reliability problems)中其在有
資源的限制下，如何同時考量在每個子系統中有多種類別的組件可選擇，以及對所選組件
並聯的數目需同時決定，而欲使其系統可靠度最大，更進一步我們將考量上述所提及之可
靠度系統中加入系統存活性(survivability)的考量因素，本研究包括在資源限制下，解決序
列串並連可靠度設計最佳化問題，以及探討加入系統存活性(survivability)的因素考量序列
串並連可靠度設計最佳化問題的。 
文獻探討 
欲提升序列串並聯系統可靠度最佳化問題的兩個主要方法包括：增加系統內部各組件
的可靠度或者在各個子系統中加入相同並聯的組件【Misra and Sharma, 1973】。 而利用提
升系統內部各組件的可靠度來增加整個系統可靠度的方法只能達到某一定程度的提升而
已，並且所需要可靠度的程度也許因為製造上的技術無法突破而難以達成。然而使用第二
種方法也就是選擇並聯組件多寡程度的方式可以較輕易且有效提升整個系統可靠度。但是
隨著組件並聯讓系統可靠度增加時，也伴隨著整個系統的重量、體積、及成本等因素的增
加。除了上述兩種方法之外、第三種方法為上述兩種方法並用也是另種可行的方式【Kuo and 
Prasad, 2000】。 
而上述第二種和第三種方法乃較為實際並以廣泛被研究，其分別為整數和混合整數問
題。序列串並連可靠度問題即是在各個組件可靠度已知的情形下，決定各子系統內組件並
聯的個數，其乃是屬於整數規劃的問題(決策變數乃為整數值)【Hiller and Lieberman, 1995】 
【Nakagawa and Miyazaki, 1981】【Coit and Smith, 19961, 19962】【Hsieh, 2002】。而第三
雖然提升系統存活度的方法可以利用並聯組件的方式，然而從易受傷性(vulnerability)
的觀點來看系統組件間若無足夠的分隔保護，當某系統遭受連鎖破壞時再多的並聯組件將
可能同時被摧毀。因此系統並聯組件間的隔離保護是必需的，例如分別將某些並聯組件一
同裝入不同的保護罩殼內，如此當屬於同一保護罩內某一些並聯組件被攻擊時，並不會破
壞到其他保護罩殼內的組件，而使得整個系統仍能夠維持基本的運作。 此外、當某一並聯
的組件若沒有被與另一個組件分隔時，則此兩組件被視為同一保護群組，因此若所有並聯
組件屬於同一群組且當遭受同一攻擊時，則所有組件可能全部遭受到摧毀。因此增加保護
群組的數目才是真正可以提升系統存活度的方法。但是當增加保護群組數目時，也必須同
時考量到保護的成本也相對提升，因此、不同數目的群組因素和建構保護措施的成本因素
將是影響整個系統保護的程度。 
對於一個已知系統架構的系統存活度的評估方法可以由“通用產生函數”(universal 
generating function, UGF)來求出並且此UGF已經被證實為一個方便且有效評估多重狀態系
統的方法【Levitin, et al., 1998】【Levitin and Lisnianski, 1997, 1998】【Lisnianski et al., 2000】
【Levitin, 2000】。所以所提計畫於第二年度的研究內容除了考量系統組件的選擇因素外又
同時考量如何將子系統中並聯組件將之分到不同的保護群組內而使得在最小成本狀況下如
何設計此一系統而使其存活度能滿足最低保護的程度的需求。換句話說如何同時決定系統
組件種類、所選組件之並聯數目、保護群組的數目、以及哪些並聯的組件要指派到同一個
群組內，且該群組的保護等級(protection level)應為何等級，才能讓整個系統存活度滿足最
低的保護程度的要求且成本最小。由此可知此一問題具備極高度的困難度和複雜性。所以
如何能在有資源限制下設計出具備存活度最高的系統，或者是以最少的成本設計出符合最
低存活度需求之系統其乃為本研究目的。然而為提升系統的存活度，因此每一個子系統內
的各組件種類極其個數需被決定外，更要決定如何將組件分隔，亦即哪些組件須在同一保
護群組內，且每一個子系統內的保護群組數目應各為多少，且每一群組的保護等級應屬何
種等級，才能滿足預期的系統保護的程度，因此該問題具有的求解特色為高度組合複雜性
的問題，必須同時考量(1)各子系統內應採用哪種組件？(2)每一類組件應各為幾個？(3)如何
分群？(4)分成幾個保護群？(5)每一個保護群的保護等級應各為多少？以上的考量下如何
制定一個成本最低的決策使系統若招受攻擊或破壞時，其系統存活度仍能滿足預期需求程
度，使系統仍能持續維持最基本的運作。 
問題描述一 
 變數定義 
n 於總系統中子系統的數目。 
ki  在第i個子系統中可選擇組件的種類數目，1≤ i ≤n。 
xi,k 在第i個子系統中第k種組件的數目。 
ai,j,k 第i個子系統中第k種組件對第j種資源的需求數量，ai,j,k > 0。 
qi,k 表示在第i個子系統中第k種組件可能失敗的機率。 
jb  對第j種資源的限制。  
 數學模式 
對於此一非線性整數規劃之序列串並聯可靠度問題系統可靠度問題其目標方程式乃描
4 
內被取代的舊有個體(也具是較差的個體)。 接著，部分結構相似性過高的個體也
繼之被去除以保持有限空間的記憶區內保持個體的多樣性。  
此記憶區的功能機制乃為生物免疫系統中的記憶區，來記憶不同種類的抗體以利
其對抗各式各樣外來侵入病毒的結構【Jerne, 1973】，亦即記憶區內的主要功用乃
欲在有限的記憶容量內維持抗體的多樣性(diversity)而非單一性，如此當不同病毒
入侵時免疫系統才能將最適當的抗體由記憶區中找出且大量複製以對抗及消滅入
侵的病毒。 因此當新的個體加入記憶區後尚有一重要程序必須被完成而保持記憶
區內個體的多樣性，而欲維持記憶區內個體多樣性的方法可以藉由計算出記憶區
內每一個體間的相似性大小，當相似性過小時則擇優保留而去除較差的個體。 而
此衡量任兩個體Abi和Abj相似性的方法如下列數學簡式所表示：Similarityij=║Abi
－Abj║, i,j， (其最簡易的方式即是計算其幾何距離, Euclidian distance)。 如此
記憶區中便能保持個體的多樣性，而避免相同或過於類似的個體存在。 
∀
步驟七：檢查所預設的任何停止條件(例如最大的演化代數)是否被達到？ 若答案為否定的
則至步驟二，否則至步驟八。 
步驟八：結束。由記憶區中輸出最佳解或近似最佳解。 
 
 
 
 
 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
評量 
(Evaluation)
初始族群 
(Initial population)
選擇 
(Selection)
複製 
(Clone)
最佳的 m 個個體之族群 
(best n individuals) 
基因運算 
(Genetic Operations) 
新族群個體 
(new individuals)
最佳個體複製後之族群 
(temporary population of clones) 重新選擇 
(Re-Selection)
記憶區 
(Memory Set)
達到停止
條件？
最佳之規劃解
(optimal/near 
optimal solution) 
是 
否
(步驟一) (步驟二)
(步驟四)
(步驟三)
(步驟五)
(步驟六) 
(步驟七)
(步驟八) 
 
圖(一)、仿生物免疫系統之免疫演算法的機制架構 
為說明採用模仿生物免疫系統之機制可以改善之前所陳述的若應用傳統遺傳演算法於本研
究問題的不足處，我們設計一個簡單的例題，分別利用本計畫所提方法及遺傳演算法求解
以測試比較其不同處亦即所提方法的永不收斂性，來顯示本研究所提出方法可減少落入局
部解的可能，而有更多機會搜尋到全域最佳解之可行性。而當有任何代表求解的個體違反
6 
8 
)
群和各每群內有包括那些組件及其保護層級若為已知時，我們將利用此一評估方法來衡量
多重狀態系統的存活度。(該法已成功的被發展出來，因此在此省略重複敘述)，如此如何已
最低的成本建構在滿足最低的存活度之限制下的系統存活度架構 （亦即，如何分群、各每
群內有包括那些組件、各組件保護群的保護層級應為何等）。 
 而對於子系統中群組的分群及其對應的保護層級所產生的成本可由兩個向量得知，其
為γm (代表屬於子系統m的組件群組所相對應的保護層級) 和rm(代表子系統內組件的分群
向量)，因此第m個子系統組件的分隔群組和其相對應的保護層級所產生的成本可定義如下
【Levitin, 2000】： 
( )( )∑
=
= m
E
i
mim
sep
m imncC
1
,, γ ， 
其中Em代表第m個子系統中所可以容納組件的最大數目，而cm(n, γ)代表在子系統m內將n個
組件配置在同一個保護層級為γ保護群組內所衍生的建置成本。 
由上述的定義則可描述出總成本為： 
( ) [ ] ( )( ) ([ ]∑ ∑∑
= = =
+=+=
M
i
M
m
Em
i
mimmim
sep
m
el
mMSS himncCCrhC
1 1 1
,,,, εγγ ，  
其中hmi表示類別為i的組件屬於第m個子系統中，而ε m(h) 表示第h種類別的組件包含在第m
個子系統的成本。 
 由此本計畫目標乃是要去求解最佳化的分群問題，而同時考量各群組相對應的保護等
級，而在滿足 MSS 存活度的下限的限制下，如何決定各子系統的組件分群、分群數目以及
各群組保護層級(亦即需求解三個參數向量 h、r、γ)欲使總成本最小。 
研究方法二 
在此一研究中採用於本計畫前一階段所發展出的「仿生物免疫系統」之免疫演算法為
基礎的解決方案，然其因為在此階段所欲解決的問題具備特殊的組合特性，另提出一特殊
的抗體基因的設計方法來解決此一階段問題。 本階段研究之關鍵解決方案在於如何同時決
定每一個子系統內的保護群組數目、各組件應屬那一個保護群、以及每一個保護群的保護
層級。因此、我們利用一個特殊的抗體基因表示方式來同時解決上述問題。 
有關適用本階段計畫之基因表示法產生程序如下所敘述： 
假設若所考量的多狀態可靠度系統包含兩個子系統(M=2)，於第一個子系統中包含三種不同
類型的組件可選擇的組件 (H1=3)，可用的保護層級共兩級(PL1=2)。而於第二個子系統中包
含四種不同類型的組件可選擇的組件 (H2=4)，可用的保護層級也有四級(PL2=2)。且每一子
系統中最多可以容納 5 個組件(Em=5)。由此一假設來說明基因表示法產生程序： 
1. 決定抗體基因長度 
首先令每一個子系統抗體基因長度為L=2×Em =10，因每一子系統最多能容納 5 個組件，而
共有兩個子系統，因此本例中整個系統的基因長度為 20。前面 10 個抗體基因和後面 10 個
抗體基因分別代表第一個子系統和第二個子系統的群組和組件的組合。此一長度即可以表
示整個系統所有組合的可能性。 
2. 產生初始解 
因為第一個子系統中包含三種不同類型的組件可選擇的組件 (H1=3)，可用的保護層級共兩
級(PL1=2)，因此令前五個基因隨機產生 0~5 的整數(3+2=5 決策)，因第二個子系統中包含
四種不同類型的組件可選擇的組件 (H2=4)，可用的保護層級也有四級(PL2=4)，因此而後半
的損壞下仍能夠維持最基本的運作。本研究提出以免疫系統為基礎之遺傳演算法及特殊的
基因表示方式來解決上述問題，藉由實驗數據可得知所提方法的優越性與。本研究結果正
在撰寫成論文中，相信本研究結果將可以發表在國際學術會議及國際知名期刊。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
圖三、抗體基因所表示的多狀態可靠度系統架構 
 
參考文獻 
1.  Anderson, P., and Agarwal, S. (1992), “An improved model for protective-system 
reliability,” IEEE Trans. on Reliability, 41, pp. 422-426. 
組件(類別 1) 
組件(類別 3) 
組件(類別 1) 
組件(類別 2) 
子系統 I  
子系統 II  
組件(類別 1) 
組件(類別 2) 
組件(類別 1) 
組件(類別 1) 
組件(類別 3) 
組件(類別 4) 
保護層級 2 
保護層級 3 
保護層級 1 
2. Bai, D., Yun, W., and Chung, S. (1991), “Redundancy optimization of k-out-of-n systems 
with common-cause failure,” IEEE Trans. on Reliability, 40, pp. 56-59. 
3. Barbacci, M. (1996), “Survivability in the age of vulnerable systems,” Computer, 29(11), pp. 
8. 
4. Bellman, R.E., and Dreyfus, E. (1958), “Dynamic programming and reliability of 
multicomponent devices,” Operations Research, 6, Mar.-Apr., pp. 200-206. 
5. Chae, K., and Clark, G. (1986), “System reliability in the presence of common-cause 
failures,” IEEE Trans. On Reliability, R-35, pp. 32-35. 
6. Chern, M.S. (1992), “On the computational complexity of reliability redundancy allocation 
in a series system,” Operations Research Letters, 11, pp.309-315. 
10 
12 
27. Misra, K.B. and Sharma, J. (1973), “A new geometric programming formulation for a 
reliability problem,” International Journal Control, 18, pp. 497-503. 
28. Misra, K.B. and Sharma, U. (1991), “An efficient algorithm to solve integer-programming 
problems arising in system-reliability design,” IEEE Trans. on Reliability, 40(1), pp.81-91. 
29. Nakagawa, Y. and Miyazaki, S. (1981), “Surrogate constraints algorithm for reliability 
optimization problems with two constraints,” IEEE Trans. on Reliability, R-30, pp.175-180. 
30. Page, L., and Perry, J. (1989), “Model for system reliability with common-cause failures,” 
IEEE Trans. on Reliability, 38, pp. 406-410. 
31. Painton, L. and Campbell, J. (1995), “Genetic algorithms in optimization of system 
reliability,” IEEE Trans. on Reliability, 44, pp. 172-178. 
32. Parfenov, U. (1989), Survivability and effectiveness of ship electric power systems, 
Leningrad: Russian Naval Academy, Russian. 
33. Sharma, J. and Venkateswaran, K.V. (1971), “A direct method for maximizing the system 
reliability,” IEEE Trans. on Reliability, R-20 (1), pp. 256-259. 
34. Vaurio, J. (1998), “An implicit method for incorporating common-cause failures in system 
analysis,” IEEE Trans. on Reliability, 47, pp. 173-180. 
35. Vesely, W. (1977), “Estimating common-cause failure probabilities in reliability and risk 
analysis: Marshall-Olkin specializations” In: Fussell J., Burdick, G., editors. Nuclear systems 
reliability engineering and risk assessment. Society of Industrial and Applied Mathematics, 
pp. 314-341. 
36. Volik, B, and Ryabinin, I. (1984), “Reliability and survivability of control system,” Automat 
Remote Control, 12, pp. 8-14. 
37. Xu, Z., Kuo, W., and Lin, H.H. (1990), “Optimization limits in improving system 
reliability,” IEEE Trans. on Reliability, R-39, pp. 51-60. 
38. Xue, J., and Yang, K., “Dynamic reliability analysis of coherent multi-state systems,” IEEE 
Trans. on Reliability, 44. pp. 683-688. 
 
片播放是否正常；休息時間時還備有茶點和飲料。在會場中遇到相當多的研究
成果卓越的教授們，和他們聊天及討論他們的研究成果收獲十分豐富。 
此次會議很榮幸被邀請擔任敝人論文報告議程場次的主持人，並且在該時段
報告我的論文，題目是“Penalty Guided PSO for Reliability Design Problems”，主
要內容為利用人工智慧的粒子群演算法來解決系統可靠度設計最佳化問題，與
會的學者不少，也透過討論的機會認識了幾位從事這方面研究的學生和教授，
大家相聊甚歡，獲益良多。 
二、 與會心得 
 
PRICAI 2006會議提供人工智慧及相關應用研究領域的研究學者，可以透過
國際會議的機會，針對大家的研究方向交流經驗，分享心得。同時，大家可以
透過會議中的報告與討論，了解不同國家的科技發展，以及研究特色，對尋求
未來研究方向和議題幫助甚大。在此次大會中也有聽到一些不同國家的學者針
對最佳化研究議題從不同角度提出不同的見解，令人印象深刻。 此次會議的與
會者來自世界各地的學者相當多，發現大量亞洲各國學者帶領研究生參加國際
會議並發表，令我印象深刻。藉由與不同與會者的討論中，深刻體會每個國家
之間不同的研究精神令我獲益良多。 
三、 建 議 
 
這次的會議是在中國桂林舉行，除機票與註冊費外，所需消費不甚高，建議
學校或國科會對於經費不甚高的情形下可以斟酌增加補助學生的數目給與出國
參與國際會議的機會以鼓勵研究生多參與國際學術活動，同時，建議學校方面
可更開拓國際化的視野，對教師及研究生積極鼓勵參加國際學術交流達成實質
的素質提昇，令其擁有更寬廣的視野。 
 
五、 其 他 
 
非常感謝國科會補助出席第第九屆泛太平洋人工智慧國際會議 (9th Pacific 
Rim International Conference on Artificial Intelligence, PRICAI 2006)，使敝人得以
藉由國際學術會議的參與與討論，擴展有關人工智慧與相關應用的視野與研究
Penalty Guided PSO for Reliability Design Problems 
Ta-Cheng Chen 
Department of Information Management, National Formosa University, 
64 Wenhua Rd., Huwei, Yulin, 632, TAIWAN 
tchen@nfu.edu.tw 
Abstract. This paper considers nonlinearly mixed integer reliability design 
problems in which both the number of redundancy components and the corre-
sponding component reliability in each subsystem are to be decided simultane-
ously so as to maximize the system reliability.  The reliability design problems 
have been studied in the literature for decades, usually using mathematical pro-
gramming or heuristic/metaheuristic optimization approaches.  The difficulties 
encountered for both methodologies are to maintain feasibility with respect to 
three nonlinear constraints, namely, cost and weight constraints, and constraints 
on the products of volume and weight.  A penalty-guided particle swarm opti-
mization approach is presented for solving the mixed integer reliability design 
problems. It can efficiently and effectively search over promising feasible and 
infeasible regions to find the feasible optimal or near optimal solution. Numeri-
cal examples indicate that the proposed approach performs better than other ap-
proaches for the reliability-redundant allocation design problems considered in 
this paper.  
1   Introduction 
The system reliability optimization is very important in the real world applications 
and the various kinds of systems have been studied in the literature for decades. Typi-
cally there are two ways to achieve higher system reliability: (i) by increasing the 
reliability of system components, and (ii) by using redundant components in various 
subsystems in the system. In the first way, the system reliability is able to be en-
hanced to some degree, but the required reliability enhancement may be never attain-
able even though the most currently reliable elements are used. Use of the second 
way is to choose the optimal combination of elements and redundancy-levels; the 
system reliability can be also enhanced, but the cost, weight, volume, etc. will be 
increased as well. It perhaps the most common problem in design-for-reliability and 
has been called as a “redundancy allocation problem” [12]. In addition to the above 
two ways, the combination of the two approaches and reassignment of interchange-
able elements are also feasible ways for increasing the system reliability [12] [7]. 
Such problem of maximizing system reliability through redundancy and component 
reliability choices is called “reliability-redundancy allocation problem” [12]. How-
ever, a fundamental trade-off problem between reliability enhanced and resources 
consumed has to be encountered while a high reliability system is to be designed. 
a penalty guided PSO (PGPSO) is applied to solve the reliability-redundancy alloca-
tion problems. 
2  Particle Swarm Optimization 
PSO individuals (or particles) work by cooperation and competition between them-
selves. Each individual adjusts its flying by its own experience with the information 
from companions. Each individual represents a potential solution to the problem. The 
particles fly through the search space by updating the position of the ith particle at 
time t according the following equation [10]:  
xi (k+1)= xi (k) + vi (k) Δt  (3) 
Where k is the iterative number, the xi (t) and vi (t) are vectors representing the cur-
rent position and velocity respectively, i.e., xi = (xi1, xi2, …, xiN) and vi = (vi1, vi2, …, 
viN) in which N is the number of decision variables of the problem to be solved. Also, 
Δt is the time step value. Denote the best location this particle has experienced is 
depicted as pi = (pi1, pi2, …, piN), and the best position of the colony as pg(pg1, pg2, …, 
pgN) respectively . The velocity updates are governed by the following modified equa-
tions [17]:  
vin (k+1) =wvin (k) Δt +c1rand1n()(pin-xin(k))/ Δt + c2rand2n()(pgn-xin(k))/Δt  (4) 
where 0≤w≤1 is an inertia weight determining how much of the particle’s previous 
velocity is preserved, c1 and c2 are positive acceleration constants, rand1n() and 
rand2n() are uniform random sequences sampled from U(0,1). A unit inertia weight 
(w=1) and a unit time step (Δt=1) are employed in our work. The termination crite-
rion for the iterations is determined according to whether the maximum generation is 
reached. In our implementation, the integer solutions are represented by strings of 
real numbers. Each string consisting of substring includes the type of component and 
redundant levels for each subsystem.  
2.1  Solution representation mechanism 
The solution representation for PGPSO can be used in the similar manner to that of 
genetic algorithms. In our implementation, the particle is represented by a string, each 
string consisting of a substring for each subsystem. Each subsystem in turn consists 
of a real number substring representing the level of redundancy (integer) and the 
corresponding reliability of redundant components (real) type of component. It is 
illustrated in Figure 1. For instance, the real number in the subsystem 2 is 4.8718, 
which represents there are four components with reliability = 0.8718.  
m the number of subsystems in the system 
ni the number of components in subsystem i, 1≤ i ≤m 
n ≡(n1, n2, …, nm), the vector of the redundancy allocation for the system  
ri the reliability of each component in subsystem i, 1≤ i ≤m 
r ≡(r1, r2, …, rm), the vector of the component reliabilities for the system 
qi =1-ri, the failure probability of each component in subsystem, 1≤ i ≤m 
Ri(ni) =1- , the reliability of subsystem i, 1≤ i ≤m  i
n
iq
Rs the system reliability 
gi the ith constraint function  
wi the weight of each component in subsystem i, 1≤ i ≤m  
vi the volume of each component in subsystem i, 1≤ i ≤m  
ci the cost of each component in subsystem i, 1≤ i ≤m  
V the upper limit on the sum of the subsystems’ products of volume & weight  
C the upper limit on the cost of the system  
W the upper limit on the weight of the system  
P1. Series system (Figure 2(a) [7]) 
 Max f(r, n) =   ( )∏
=
m
i
ii nR
1
Subject to  g1(r, n) = ∑   
=
≤
m
i
iii Vnvw
1
22 ,
  g2(r, n) =   ( ) ( )(∑
=
≤+−
m
i
iiii Cnnr i
1
,4/expln/1000 βα )
 g3(r, n) =   ( )∑
=
≤
m
i
iii Wnnw
1
,4/exp
 0≤ri≤1, ni∈positive integer, 1≤ i ≤m  
P2. Series-parallel system (Figure 2(b) [7]) 
 Max f(r, n) = ( )2111 RR−− ( )( )( )543 111 RRR −−−  
Subject to  g1(r, n), g2(r, n) and g3(r, n) 
 0≤ri≤1, ni∈positive integer, 1≤ i ≤m 
P3. Complex (bridge) system (Figure 2(c) [7]) 
 Max f(r, n) = R1R2+R3R4+R1R4R5 
 +R2R3R5-R1R2R3R4-R1R2R3R5-R1R2R4R5
 -R1R3R4R5-R2R3R4R5+2 R1R2R3R4R5
Subject to  g1(r, n), g2(r, n) and g3(r, n) 
 0≤ri≤1, ni∈positive integer, 1≤ i ≤m 
P4. Overspeed Protection system [4] [19] 
Table 3. Data used in overspeed protection system (P4) [4] [19].  
Stage 105αj βj vi wi V C W T 
1 1 1.5 1 6 
2 2.3 1.5 2 6 
3 0.3 1.5 3 8 
4 2.3 1.5 2 7 
250.0 400.0 500.0 1000 hrs.  
The PGPSO is implemented in MATLAB® on the Pentium-4 3.2 GHz PC. The de-
termination of all parameters is a significant problem for the PGPSO implementation. 
However, there is no any formal methodology to solve the problem because different 
value-combinations of the parameters result to different characteristics as well as 
different performance of PGPSO. Therefore, one should note that the best values for 
the PGPSO parameters may be case-dependent and based upon the experience from 
preliminary runs.  
The numerical results are shown in Table 4 through 7, in which the best solutions 
of each problem are reported and compared with solutions reported previously in the 
literature. Table 4 indicate that the solution of the series problem found by PGPSO is 
just slightly better than the solution found by Xu et al. [18] and Chen [1], but is com-
paratively better than the solutions found by Hikita et al. [7], Kuo et al. [11], and 
Hsieh et al. [9]. Table 5 shows that the solution of series-parallel problem found by 
PSO is better than those reported in literature [7] [9] [1]. Compared with the solutions 
found by Dhingra [4] and Yokota et al. [19] in the Table 6, the solutions found by 
proposed method are relatively with more significant improvement. In Table 7, the 
solution found by the proposed approach is much better than the previous best know 
solution by Dhingra [4], Yokota et al. [19] and Chen [1].  Although the penalty 
guided PSO found better solutions for all the four problems, some of the improve-
ments look extremely tiny (e.x., on the order of 10-6 or 10-5). However, it has to be 
emphasized that even tiny improvement in reliability is often hard to be achieved in 
high reliability applications.  
For measuring the improvement, MPI (maximum possible improvement) can be 
used to measure the amount improvement of the solutions found by the proposed 
approach to the previous best know solutions [3]. MPI is the fraction that the best 
feasible solution achieved of the maximum possible improvement, it is described as:  
MPI (%)=(Rs_PGPSO - Rs_other)/(1 - Rs_other) 
Where Rs_PGPSO represents the system reliability obtained by the proposed approach 
and Rs_other represents the system reliability obtained by other approaches in literature.  
By using the index, it shows the proposed approach made larger improvements in 
P2~P4. From Table 5~7, it can be seen that the minimum improvement for P2, P3 
and P4 are 10.248%, 8.317% and 85.128% respectively. Especially in Table 7 (P4), 
the solution found by the proposed approach is much superior to those in previous 
literature. As above comparisons, the solutions found by the proposed approach can 
dominate any other methods for the four problems.  
 
 
Table 7. Comparison of the best PGPSO solution with other approaches for P4.  
 [4] [19] [1]  PGPSO 
k (6,6,3,5) (3,6,3,5) (5,5,5,5) (5,6,4,5) 
0.81604 0.965593 0.903800 0.901899 
0.80309 0.760592 0.874992 0.849636 
0.98364 0.972646 0.919898 0.948071 r 
0.80373 0.804660 0.890609 0.888268 
Rs 0.99961 0.999468 0.999942 0.999955 
MPI(%) 88.46% 91.54% 22.41%  
65 92 50 50 
0.064 -70.733576 0.002152 0 Slacks of  (h1 ~ h2) 4.348 127.583189 28.803701 28.803701
Note: Slack is the unused resources; MPI (%)=(Rs_PGPSO -Rs_other)/(1- Rs_other) 
Table 8. Performance Comparison of immune algorithm to PGPSO (20 Runs).  
PGPSO IA Items P1 P2 P3 P4 P1 P2 P3 P4 
Popula-
tion 80 80 80 80 80 80 80 80 
Max iter. 500 200 200 200 500 200 200 200 
Best Rs 0.93168215 0.99997665 0.99988934 0.99995467 0.931678 0.99997658 0.99988921 0.99994218 
Avg. Rs 0.92781729 0.99996734 0.99985940 0.99994815 0.92737864 0.99996169 0.99985484 0.99993137 
Avg. CPU 3.77 1.54 1.81 1.47 250.53 100.28 102.04 102.93 
4  Conclusions 
This paper presents penalty guided PSO for solving various reliability design prob-
lem, which include series systems, series-parallel system, complex (bridge) system 
and overspeed protection system. In these optimization problems, both the redun-
dancy (number of redundant components) and the corresponding reliability of each 
component in each subsystem under multiple constraints are to be decided simultane-
ously. Compared with other traditional evolutionary computation based approaches, 
penalty guided PSO are able to provide better solutions with much fewer CPU time. 
As demonstrated in the previous section, the best solutions found by penalty guided 
PSO are all better than or tie the well-know best solutions by other heuristic methods 
for mixed-integer reliability problems. While the improvement may be too small to be 
insignificant, our limited experience suggests that the penalty guided PSO find solu-
tions which are of a quality and are comparable to that of other heuristic algorithms. 
The proposed method achieves the optimal/near optimal solution for all problems in 
this work more effectively and efficiently.  
Acknowledgment 
The research is supported by grants from National Science Council, Taiwan under 
contract NSC 93-2213-E-150-012. 
