 1 
行院國家科學委員會專題研究計畫成果報告 
結合方面導向技術於嵌入式系統軟體發展之研究 
The Study of Integrating Aspect-Oriented Techniques 
 into Embedded System Software Development 
 
計畫編號：NSC 95－2221－E－006－091 
執行期限：95 年 08 月 01 日至 96 年 10 月 31 日 
計畫主持人： 陳  敬    成功大學電腦與通信工程研究所 
計畫參與人員：蘇惠明    成功大學電機工程研究所 
       劉冠成‧黃俊霖 成功大學電腦與通信工程研究所 
 
摘  要 
嵌入式系統各類型產品之間其硬體差
異性甚高，為了達到降低開發及維護成
本，設計一個容易裁製之嵌入式軟體框架
(Framework)，以提高軟體重用性，才能提
高產品之市場競爭力。框架之基礎為由元
件(Component)所組成，但元件本身與生俱
來之程式碼交織及程式碼散佈之特質，影
響物件本身之內聚性及物件之間的獨立
性，需要新的模組化技術來輔助其解決此
問題，方面導向(Aspect-Oriented)技術正是
因應而生，其原理乃用核心關注點實現系
統基本功能，而將難以模組化之交織及散
佈程式碼用横切性關注點加以模組化。方
面導向技術於軟體工程、程式語言與物件
導向設計等領域已受到高度重視，結合此
一技術發展並應用於嵌入式軟體之開發正
方興未艾，尤其是嵌入式軟體硬體多樣性
及其它非功能性需求本質即是横切性關注
點，適合應用方面導向技術協助實現。本
計畫以嵌入式軟體框架為基礎，結合方面
導向技術設計彈性之任務排程功能，克服
硬體多樣性特性，以期驗證方面導向技術
之優勢，並探討進一步可能之方向，為嵌
入式系統軟體之發展開拓一新途徑與彈性
之基礎解決方案。 
關鍵詞：嵌入式系統、嵌入式軟體、方面
導向 
1. 背景說明 
近年來應用新軟體技術如元件與物件
技術等以發展嵌入式軟體風潮方興未艾，
的確為嵌入式軟體發展投注一股新的活
力。但元件與物件技術與生俱來的程式碼
交織(tangling)及程式碼散佈(scattering)之
特質，影響物件本身之內聚性及物件之間
的獨立性[15]，造成軟體後續演化，諸如
升級、維護或修改等等相當困難，方面導
向(Aspect-Oriented，簡稱AO)技術正是解
決上述問題之良方。Aspect其原意是指經
常反覆進行之運算或處理工作，如果在許
多物件(object)或其操作(operation)中皆必
須呼叫相同動作，以物件導向之方式來實
現則其成本太高，利用方面導向[14]設計
方式，可以將概念上所謂的横切性關注點
(crosscutting concern)與核心關注點 (core 
concern)獨立設計，透過編織(weave)之方
式直入，使原本之物件責任單純化，如此
一來，横切性之物件不論是修改或甚至移
 3 
名為 .acc的檔案，利用該工具作前置處
理，.acc檔與C原始檔及標頭檔交織，轉成
ANSI C格式之C原始檔，如此可使用其它
開放軟體社群所提供之相關支援開發工
具。ACC之優越性是可以完全支援C語
言，運行平台包括Linux，Solaris及Windows
等常用之平台，而且Coady Y 及Kiczales G 
等學者曾用該工具對FreeBSD v3.3 作業
系統原始碼的預先讀取 (Prefetching) 動
作 [15] 為作過探討，Prefetching 是發生
在記憶體找不到資料，必須從由磁碟中讀
取時，預測下一次可能讀取之資料，同時
載入，以減少磁碟存取的次數，是為一典
型横切性關注點，該動作横跨VM、VFS 及
FFS 等好幾個層次，以傳統技術很難加以
模組化，但藉由面向導向技術加以模組
化，VM 層次及FFS 層次之原始碼變清晰
了，每個預先讀取之程式碼皆放單一個
Aspect 內，如此一來，預先讀取模式就變
得隨插即用，只須透過makefile 技術增加
或排除即可改變預先讀取模式[17]。可見
該技術運用在作業系統等複雜之軟體是可
行且有其效益。 
 
3. 嵌入式軟體框架組成 
框架主體可用於提供嵌入式系統軟體
基本功能，是為核心關注點。就基本功能
面來說，精簡性及可靠性是嵌入式產品最
基本之需求，採用微核心架構是相當好之
選擇，微核心架構下，核心只滿足系統最
基本之需求，所以僅配置排程器(Scheduler) 
訊息傳遞(Message Passing)及中斷處理函
式(Interrupt Service Routines)前置處理等
功能，讓整個系統達到最精簡化，而將作
業系統服務、驅動程式與應用程式視為一
般行程，由一般行程與微核心共同構建完
整之嵌入式軟體 
 
3.1 框架核心 
軟體框架如圖3.1所示，虛線之下即為
微核心之基本組成包括系統呼叫介面、訊
息傳遞、中斷介面及排程器。所有行程須
透過系統呼叫介面才能與微核心溝通，系
統呼叫介面會啟動系統呼叫處理函式，這
些系統呼叫分成訊息傳遞、中斷處理、及
其它功能等三類。系統呼叫函式使用包裝
函式(Wrapper Functions)，以AT&T內嵌組
語(inline assembly code) 語法實作而成，
這是使用GCC為編譯器時最常被利用之
內嵌組合語言，利於移植到不同硬體平台。 
行程與微核心溝通之方式乃透過系統
呼叫介面，由系統呼叫介面會啟動系統呼
叫處理函式。行程與行程間則透過訊息傳
遞(Message-Passing)來相互溝通。當某一
行程要傳送訊息給另外一個行程時，若對
方並沒有準備好要接收此訊息，則傳送訊
息行程會停頓(block)，直到對方接收訊息
之後，原行程才會繼續執行。當一個行程
要接收由另一個行程傳來之訊息時，若對
方並沒有要傳送訊息給此行程，則此行程
也會停頓，直到對方傳送訊息為止。 
行程間通訊乃使用約會型訊息傳遞
(Rendezvous Message-Passing)機制來相互
溝通。約會型訊息傳遞之優點是系統核心
不需要為每一個行程配置額外訊息佇列，
而缺點則須設法解決優先權反轉問題
(Priority Inversion Problem)，也就是在特定
情況下，高優先權行程，必須等待低優先
權行程執行完成才能繼續執行，違反了一
般即時系統(Real-time System)對於高優先
權行程必須優於低優先權行程執行之假
設。要克服此一問題須修改訊息傳遞之機
制，已有許多文獻提出相關之解決方案，
如 優 先 權 頂 置 協 定 (Priority Ceiling 
Protocol)及優先權繼承協定等 (Priority 
Inheritance Protocol)[4]，我們採取後者來
 5 
裝置即可馬上啟用。使用者行毋須知道此
驅動程式行程之代號，只需要使用它向檔
案系統註冊之名字即可。 
 
4. 方面導向技術應用 
方面導向技術連接點模型(join point 
model)可以分成靜態資料結構之連接及動
態系統行為之連接。靜態資料結構之連接
藉由introduce機制可以擴充資料結構；動
態系統行為之連接可以藉由pointcut定義
系統連接點，然後利用advice決定在該
pointcut要進行擴充何種邏輯，所以無論資
料結構也好，系統行為也好，皆可利用方
面導向技術加以重新模組化，而加強原來
核心模組功能。 
 
4.1 時間驅動模式即時控制系統 
大多數嵌入式系統應用為求快速反應
外界環境事件，設計上皆以為事件驅動為
主，所以原來框架預設之架構是一個高效
能即時系統框架。但如果要修改成線上生
產用機器人控制系統，它可能為一個時間
驅動之即時控制系統，與原來之架構完全
不同，我們要如何修改呢? 
 
 
 
 
 
 
 
 
 
圖4.1 事件驅動之task 
 
假設要實現 RM(rate monotonic) 模
型，必須具備支援週期性task之能力，也
就是說，週期性task行為模式要由事件驅
動改為時間驅動。圖4.1說明事件驅動的
task，一開始就先檢查訊息佇列(行號5)，
如果有訊息則處理訊息，沒訊息則進入就
緒列，等待下一次執行。圖4.2說明週期性
task一開始就先執行本身任務，最後一行
指令則讓自己進入等待列(行號6)，等待下
一次週期到，由系統自動喚醒執行。分析
此一行為，task資料結構必須額外提供週
期、最差執行時間及第幾個job(task每一週
期執行之instance稱為job)等參數，以便系
統可以依這些參數，安排執行，而這些參
數對事件驅動之task並非必要，故原始之
設計並未納入，若重新修改框架，加入這
些參數自然也無不可，但對事件驅動模式
之系統，姑增加參數之多寡，這就是一個
額外負擔。但藉由方面導向技術，設計一
個introduce檔如圖4.3所示，增加了三個參
數：週期、最差執行時間及第幾個job，利
用ACC將其織入原始檔，就可以擴充task 
結構。透過introduce機制，織入以上參數，
原來之事件驅動系統可以維持簡潔性，而
修改成時間驅動之模式，仍維持各個模組
之清晰性。在此例中將時間驅動視為一個
非功能性需求，方面導向技術很容易實
作。當然要轉成時間驅動模式，這是在資
料結構要修改部分，還要配合其它模組作
細部修改，例如每個task最後一行程式若
用函式sleep()，該task週期會因前面任務執
行所花費之時間而相對於系統絕對開始時
間會造成偏移，所以搭配增加一個函數
end_cycle，計算距離下次週期還有多少時
間，當作參數傳給sleep()。 
 
4.2 訊息通訊重新模組化 
行程之間透過訊息傳遞溝通，訊息傳
遞狀態細分成三對，要求(Request)與聆聽
(Listen)、回覆(Reply)與領收(Accept)、傳
1 void task1 
2 { 
3   ….   //variables declaration 
4   while(1) { 
5     swi_listen(&msg); //message listien 
6     switch(&msg.type); 
7     case TIMER_SLEEP 
8        …. 
9   } 
10 }  
 7 
值，作法是將排程策略也就是優先權決定
策略視為横切性關注點，將連接點定義在
排程器開始執行前，如圖4.6行1 當系統執
行schedule()函式前，利用before advice實
作排程策略，如此一來就可以將排程策略
與排程器分開設計。 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
圖4.5 行程訊息傳遞狀態轉移 
 
 
 
 
圖4.6 決定排程策略的advice模組 
 
4.4 討 論 
除了上述二個横切性關注點，在嵌入
式系統中，硬體多樣性、同步機制、追蹤
及容錯等皆也都是相當明顯之横切性關注
點，這些都是方面導向技術可以運用的空
間。利用方面導向技術皆可讓系統設計更
彈性，相對也必須犠牲某一程度之效能，
而效能是嵌入式軟體非常注重的，尤其是
作業系統層級之軟體。但由於ACC運作是
採用靜態織入(static weaving)方式，也就是
在編譯前期用前置處理器將aspect織入原
始碼中，所以增加了一些程式碼，需要較
大的空間，但其執行時間還是可以透過程
式碼分析來預期的(predictable)。 
作業系統層級之設計，必須為了效能
犠牲了某程度之模組化，例如在圖 4.6 中
訊息傳送功能與避免優先權反轉機制及避
免死結機制等原始碼是撰寫在一起，要直
接套用方面導向技術，其連接點是不明顯
的，所以作業系統層級之軟體應要將連接
點模型再小型化，能定義在程式片段，更
能適用於作業系統領域，這正是 J-Y. Park
等學者所提倡之觀點[19]。 
 
5. 結  論 
本計畫旨在研究方面導向技術並結合
此技術應用於嵌入式系統軟體之閞發。我
們以一個嵌入式系統框架為基礎，藉由排
程彈性修改等實作範例來說方面導向技術
之優越性，並探討其它可能之應用。由於
嵌入式軟體本質上存在許多非功能性特
質，正適合應用方面導向技術來發展，但
方面導向技術有某程度之額外負載，有可
1 …. 
2 if(p==current) 
3   return -1; 
4 if((p->state==UNUSED)|| 
(p->state==ZOMBIED)) 
5   return -1; 
6 else if((p->state==RECEIVE)&& 
(p->msg_addr->tsrc==ANY)){ 
7   msg_cpy(p->msg_addr,m); 
8   p->state=RUNNING; 
9   p->msg_addr=NULL; 
10   move_in_run_queue(p); 
11   schedule();     
 return 0; 
12  }else 
if((p->state==RECEIVE)&&(p->msg_add
r->tsrc==current->pid)){ 
13   msg_cpy(p->msg_addr,m); 
14   p->msg_addr=NULL; 
15   move_in_run_queue(p); 
16   schedule();     
 return 0; 
17  }else if(detect_deadlock(p)) 
18   return -1; 
19  move_out_run_queue(current);  
 current->msg_addr=m;   
 current->state=SENDING;   
  move_in_sender_queue(p,current);  
20  if((p->state==RUNNING)&& 
   (p->dynamic_prio > 
       current->dynamic_prio) ){ 
21   move_out_run_queue(p); 
22  p->dynamic_prio= 
    current->dynamic_prio;  
23     move_in_run_queue(p); 
24  } 
25  schedule();     
 current->msg_addr=NULL; 
26  return 0;  
27 … 
1 before(): execution(void schedule()) {  
2 排程策略設計，決定 priority 
3 } 
