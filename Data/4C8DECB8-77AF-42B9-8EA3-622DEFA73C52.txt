II 
ABSTRACT 
In this report, we propose a new drift-free bitstream switching scheme to improve the coding 
performance of H.264 SP-frames for rate adaptation. Our method removes one of the two 
re-quantization blocks in the SP-frame encoders so as to significantly improve coding performance. 
The drift-free switching property of SP-frames is retained by properly restructuring the primary and 
secondary switching frame codecs. Experimental results show that our proposed scheme achieves 
close coding performance to that of regular H.264 P-frames and significantly better performance than 
that of SP-frames. The proposed method also provides the advantage of using a single secondary 
switching bitstream for both switching-up and switching-down processes. 
We also propose a generalized DCT decimation scheme for DCT-domain spatial downscaling 
which performs two-fold decimation on sub-frames of a flexible size larger than the traditional 8×8 
block size to improve the visual quality. Efficient sparse-matrix representations are then derived to 
reduce the computation of the proposed DCT decimation method. We compare the anti-aliasing 
filtering performances and computational complexities of the proposed downscaling scheme with the 
existing DCT-domain and pixel-domain downscaling schemes. Our analyses show that the proposed 
scheme can reduce the aliasing artifact compared to the pixel-domain downscaling schemes, whereas 
the computational complexity may be increased. We also integrate the proposed decimation scheme 
into the cascaded DCT-domain transcoder for two-fold spatial downscaling of a pre-encoded video. 
Experimental results show that the proposed scheme with a sub-frame size of 16×16 and 32×32 can 
achieve significantly better visual quality, while leading to an increased computational cost. The 
average PSNR performance improvement of using a larger sub-frame size over that using the 
traditional 8×8 size can be up to about 1 dB. Our method offers more flexibility while making a 
tradeoff between visual quality and computational complexity. 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Keywords— video adaptation, bitstream switching, video transcoding, video coding, 
compressed-domain processing. 
 
2 
using a single secondary switching bitstream for both switching-up and switching-down processes. 
We also propose a generalized DCT decimation scheme for DCT-domain spatial downscaling 
which performs two-fold decimation on sub-frames of a flexible size larger than the traditional 8×8 
block size to improve the visual quality. Efficient sparse-matrix representations are then derived to 
reduce the computation of the proposed DCT decimation method. We also integrate the proposed 
decimation scheme into the cascaded DCT-domain transcoder for two-fold spatial downscaling of a 
pre-encoded video. Our method offers more flexibility while making a tradeoff between visual quality 
and computational complexity. 
The report is organized as follows. In Section II, we brief review our results in the first two years’ 
projects. Section III elaborates on the results of this year’s project about drift-free bitstream switching. 
Our results about DCT-domain video transcoding are provided in Section VI. Our conclusion about 
this 3-year project is drawn in Section V. 
 
II. Brief Review of the Results in FY93 and FY94 
II.1. FY93 (2003/8~2004/7) 
In FY93, we developed efficient schemes for enhancing the error robustness of multi-hypothesis 
motion-compensate predictive (MHMCP) coder without sacrificing the coding efficiency significantly. 
The proposed schemes utilize the concept of reference picture interleaving and data partitioning to 
make the MHMCP-coded video more resilient to channel errors, especially for burst channel error. 
Besides, we also proposed a scheme of integrating adaptive intra-refresh into the proposed MHMCP 
coder to further improve the error recovery speed. 
We have shown that combining the proposed 2HMCP with random intra-refresh can achieve faster 
error recovery speed. We have also proposed an adaptive intra-refresh scheme to further improve the 
error recovery capability of the proposed MHMCP coder. Extensive simulation results show that the 
proposed methods effectively and quickly mitigates the error propagation and the penalty on coding 
efficiency for clean channels due to the inserted error resilience features is rather minor. The proposed 
2HMCP with a lower-rate intra-refresh can achieve better or comparable error resilience compared to 
Inter MCP with a much higher-rate intra-refresh, while retaining significantly better coding 
performance for clean channels. 
 
II.2. FY94 (2004/8~2005/7) 
In FY94, we developed efficient rate-distortion optimized quantization schemes to improving the 
coding efficiency of H.264 primary SP-Frames under given storage constraints on secondary 
SP-frames. A two-pass encoding procedure is adopted in our work. While performing the first-pass 
encoding, encoding statistics are collected to estimate the parameters of the distortion and rate models 
of primary and secondary SP-Frames in a GOP, respectively. With these models, we then use the 
Lagrange multiplier method to find the optimal set of quantization step-sizes for all frames in a GOP. 
We have proposed two R-D optimized rate-control schemes: uniform quantization and non-uniform 
quantization, respectively. 
Experimental results show that the proposed rate and distortion models are rather accurate and both 
methods can achieve accurate rate control to meet the storage constraints. We have also proposed an 
SP-frame density estimation scheme to determine the number of SP-frames that can be encoded in a 
GOP under a wide range of storage constraints. The optimal non-uniform quantization scheme 
achieves a coding gain of about 0.3 dB on average over the uniform quantization schemes. 
 
 
4 
SS12), the residual of the lower bit-rate bitstream (e.g., SS2), and the motion vectors of the higher 
bitrate bitstream. With these data, the lower-rate frame (e.g., SS2) can be reconstructed form the 
higher-rate primary residues plus the secondary switching frames, as will be elaborated in the 
following. 
 
A. Encoding Process 
Fig. 5 depicts the block diagrams of the proposed primary and secondary SS-frame encoders. The 
upper half of Fig. 5 illustrates the architecture of the higher-rate primary SS-frame encoder. Compared 
to the SP-frame encoder shown in Fig. 2, the re-quantization and de-quantization blocks in the 
reconstruction loop of the encoder have been removed to increase the coding efficiency, whereas the 
re-quantization block (e.g., Qs which is operated on HKpred) and the subsequent de-quantization block 
prior to motion compensation are kept to avoid the drifting error while performing switching. The 
architecture of the lower-rate primary SS-frame encoder, as shown in the lower half of Fig. 5, is about 
the same with the higher bitrate one, but it employs a coarser quantization step size, Qp2. Note that, we 
use the corresponding reconstructed higher bit-rate SS-frame (e.g., Hrec) as the input video to the lower 
bit-rate encoder. 
The secondary SS-frame encoder depicted in Fig. 5 for drift-free bitstream switching is similar to 
the secondary SP-frame encoder in H.264. However, in our scheme the difference between the 
higher-rate quantized prediction residues, HLpred, and the corresponding lower-rate version, LLpred, is 
used to generate the secondary bitstream (e.g., SS12). Instead of using two different secondary 
SP-frame bitstreams for switching up and down, respectively, from one bitstream to another one of 
different bit-rate in the SP-frame scheme, our method provides the advantage of using the same 
secondary SS-frame for switching up or down at a switching point. This thus halves the storage cost 
for the secondary bitstream if both switching-up and switching-down are desirable. The SP-frame 
scheme typically does not have such feature. 
 
B. Decoding Process 
Fig. 6 depicts the block diagram of the primary SS-frame decoder. The incoming bitstream is 
decoded by VLD, and is then de-quantized. The motion-compensated temporal prediction obtained 
from the frame memory is subsequently added to the dequantized residual signal. Similar to the 
primary SP-frame decoder, an extra re-quantization/de-quantization pair with a quantization step-size 
of Qs is performed on the temporal prediction prior to the motion compensation to achieve drift-free 
switching. However, same with the proposed encoder, the extra re-quantization process on the 
reconstructed frame has been removed. 
The decoding process for switching down is shown in Fig. 7. As mentioned above, while switching 
down, the server needs to send the secondary SS-frame, the motion vectors of the higher-rate bitstream, 
and the residual of the lower-rate bitstream to the client decoder. The decoder first uses the received 
motion vectors to obtain the temporal prediction from the higher-rate reconstructed frame buffer. The 
decoded secondary SS-frame is then added to the temporal prediction to obtain exactly the same 
content as the lower-rate temporal prediction. Finally, the lower-rate primary residual is added to the 
de-quantized lower-rate temporal prediction, followed by the inverse transform and loop filtering, to 
reconstruct the lower-rate video without drift. As for switching up, the decoder architecture is the same, 
but the two frame memories (FB-H and FB-L) are exchanged as shown in Fig. 8. The switching-up 
decoder decodes a higher-rate video frame from its corresponding lower-rate primary switching frame 
and secondary switching frame. In the decoding process for switching up, the decoded SS12 frame is 
subtracted from the quantized lower-rate temporal prediction retrieved from the FB-L buffer to obtain 
the corresponding higher-rate temporal prediction, HLpred. The higher-rate primary residual frame is 
then added to the higher-rate temporal prediction to reconstruct the higher-rate video. Note that, the 
proposed switching-up and switching-down decoding flows share the same functional blocks. The 
6 
“SS-Frames (Ori)”), since the higher-rate reconstructed video contains less high-frequency content. 
The bitrate saving is relatively significant for slow-motion video (e.g., News in our experiments), but 
rather minor for fast-motion video. 
Fig. 10 and Fig. 11 compare the average PSNR performances of primary higher-rate and lower-rate 
videos encoded using SS-frames, SP-frames and P-frames for the three test sequences at different 
bitrates. The re-quantization parameters for SP-frames and SS-frames, Qsp and Qs, are both set to be 
Qp1 - 6. The quantization parameter for the primary lower-rate bitstream Qp2 = Qp1 + 6. As shown in 
Fig. 10 and Fig. 11, the coding efficiency for SP-frames scheme is significantly worse than those of the 
other two methods due to its two extra re-quantizations, Qs. By removing one re-quatization from the 
two primary switching frame encoders and rearranging the switching frames, the SS-frame scheme 
achieves close PSNR performance compared to the regular P-frame coding, while retaining the 
property of seamless switching. The frame-by-frame performance comparisons for higher-rate 
bitstreams are illustrated in Fig. 12. Table I shows the average PSNR performance comparison of the 
three coding methods with Qp1 = 22, Qp2 = 28, and Qsp = Qs = 16 for three test sequences, respectively. 
The SS-frame method improves PNSR performance by 0.15~0.33 dB for the primary higher-rate 
bitstreams (denoted as “High”), and 0.17~0.38 dB for the lower-rate ones (denoted as “Low”), 
respectively. The PSNR improvement becomes more significant for the low bitrate range since the 
performance degradation due to the re-quantization process would become more severe. 
Table I 
Average PSNR performance comparison of three coding methods with 
 Qp1 = 22, Qp2 = 28, and Qsp = Qs = 16 for three test sequences 
Average PSNR Performance (in dB) 
P-frames SP-frames SS-frames Sequence 
High Low High Low High Low 
Stefan 39.46 34.25 39.21 34.06 39.37 34.23 
News 41.22 38.49 40.78 38.11 41.16 38.45 
Coastguard 38.87 34.28 38.58 33.86 38.81 34.24 
 
III.4. Summary 
We proposed a new drift-free bitstream switching scheme that can significantly improve the 
coding performance of SP-frames for H.264 rate adaptation. By removing one re-quantization block 
and rearranging the switching frames, the proposed SS-frame scheme achieves close PSNR 
performance compared to regular P-frames, while retaining the property of drift-free switching. The 
experiments show that our proposed scheme not only enhances the coding performance but also has 
about the same bit-count as SP-frames within a switching window. 
 
 
IV. Visual Quality Enhancement for DCT-domain Spatial Downscaling 
Transcoding Using Generalized DCT Decimation 
IV.1. Motivation 
Video transcoding [2]-[4] is an operation of converting a video bit-stream from one format into 
another format (e.g., bit-rate, frame-rate, spatial resolution, and coding syntax). It is an efficient means 
of achieving fine and dynamic video adaptation. A straightforward realization of a video transcoder is 
to cascade a decoder followed by an encoder [2]. This cascaded pixel-domain architecture is flexible 
and can be used for bitrate adaptation and spatial/temporal resolution-conversion without drift. It is, 
however, computationally intensive for real-time applications, even though the motion-vectors and 
coding-modes of the incoming bit-stream can be reused for fast processing. 
8 
to form the output coded video. The above procedures can be combined together and performed fully 
in the DCT domain as described in the following three steps: 
 
Step 1. Grouping a set of 8×8 blocks to an M×N DCT sub-frame 
The IDCT transformation of each 8×8 DCT block Bi,j in the original-size DCT frame is expressed 
as 
, 8 , 8
t
i j i jT B T=b ,   i = 1, ..., N/8 and j = 1, …, M/8                  (2) 
where bi,j and Bi,j denote the (i,j)-th 8×8 pixel block and its corresponding 8×8 DCT block, 
respectively. T8 is the 8-point 1-D DCT transform matrix. 
Suppose that the frame is divided into sub-frames of M×N pixels, where M and N stand for the 
horizontal and vertical sizes, respectively. Let N×M-sized matrix FN×M (N is the row size and M is the 
column size, which is in the reverse order of the notation of spatial indices of a video frame) denote an 
M×N sub-frame in the DCT domain; TN and TM the N-point and M-point DCT transform matrices, 
respectively. The DCT sub-frame FN×M can be computed from the corresponding 8×8 DCT blocks Bi,j 
by 
1,1 1, /8 8 1,1 8 8 1, /8 8 ,1
,1 , /8
/8,1 /8, /8 8 /8,1 8 8 /8, /8 8 , /8
... ...t t tM M M
t
N M N M N N N
t t t
N N M N N M M M
T B T T B T T
F T T T T
T B T T B T T
×
⎡ ⎤ ⎡ ⎤⎡ ⎤ ⎢ ⎥ ⎢ ⎥⎢ ⎥ ⎡ ⎤= = ⎣ ⎦ ⎢ ⎥ ⎢ ⎥⎢ ⎥ ⎢ ⎥ ⎢ ⎥⎢ ⎥⎣ ⎦ ⎣ ⎦ ⎣ ⎦
b b
b b
# % # " # % # #
" "
.      (3) 
In (3), TN is divided into N/8 columns of sub-matrices TN,i of size N×8, while TM is divided into 
M/8 rows of sub-matrices ,
t
M jT of size 8×M. Equation (3) can be rewritten as 
( ) ( )( )( )
( ) ( )( )( )
( ) ( )( )( )
,1 8 1,1 , / 8 8 / 8,1 8 ,1
,1 8 1,2 , / 8 8 / 8,2 8 ,2
,1 8 1, / 8 , / 8 8 / 8, / 8 8 , / 8
...
t t t
N M N N N N M
t t t
N N N N M
t t t
N M N N N M M M
F T T B T T B T T
T T B T T B T T
T T B T T B T T
× = + +
+ + +
+
+ + +
"
"
"
                  (4) 
where , 8tN iT T  and 8 ,tM jT T  can be calculated and stored in look-up tables off-line for computing FN×M. 
 
Step 2. Extracting (M/2)×(N/2) low-frequency coefficients of an M×N DCT sub-frame 
In order to obtain the downscaled version of FN×M, the (M/2)×(N/2) low-frequency coefficients of FN×M 
are extracted by 
l ( ) ( ) ( ) ( )/ 2 / 2 / 2 / 2tN M N MN N M MF P F P× ×× ×=                           (5) 
where ( ) ( ) ( ) ( ) ( )/ 2 / 2 / 2 / 2 / 2N N N N N NP I× × ×⎡ ⎤= ⎣ ⎦0  and ( )
( ) ( )
( ) ( )
/ 2 / 2
/ 2
/ 2 / 2
M Mt
M M
M M
I
P
×
×
×
⎡ ⎤
= ⎢ ⎥⎢ ⎥⎣ ⎦0
 are matrices for extracting 
low-frequency coefficients. I(N/2)×(M/2) and 0(N/2)×(M/2) represent the (N/2)×(M/2) identity and zero 
matrices, respectively. 
Since only the low-frequency coefficients are retained, the remaining high-frequency coefficients 
are all discarded. By combining (4) with (5), the computation for extracting l ( ) ( )/ 2 / 2N MF ×  can be 
reduced to 
l ( ) ( ) ( ) ( )
( )
/ 2 / 2 ,1 1,1 , /8 /8,1 ,1 ,1 1,2 , /8 /8,2 ,2
,1 1, /8 , /8 /8, /8 , /8
/8 /8
, , ,
1 1
t t
N M N N N N M N N N N M
t
N M N N N M M M
M N
t
N i i j M j
j i
F L B L B L L B L B L
L B L B L
L B L
×
= =
= + + + + +
+ + + +
⎧ ⎫⎛ ⎞
= ⎨ ⎬⎜ ⎟⎝ ⎠⎩ ⎭∑ ∑
" "
" "         (6) 
where ( ), , 8/ 2
t
N i N iN NL P T T×=  and ( ), 8 , / 2 ,
t t t
M j M j M ML T T P= , which can be calculated and stored offline, thus will 
not consume extra computation while performing transcoding. Furthermore, the decomposition 
method proposed in [16] can also be adopted to decompose ,N iL  into much sparser matrices to reduce 
10 
where exp( 2 / )W j Nπ= , 1j = −  and  
/ 2 1
2 2
0
( ) ( )
N
i ki
k i
i
F z z H z W
−
− −
=
= ∑                            (17) 
where Hi(z) is the z-transform of hi. 
Fig. 15 shows the magnitude responses of the generalized DCT decimation filter with N = 8, 16, 
32, and 288, respectively, and the three pixel-domain anti-aliasing filters: the bilinear filter, the 7-tap 
Gaussian filter with the coefficients (-2, 0, 9, 16, 9, 0, -1)/32 as suggested in [11], and the 15-tap 
truncated ideal low-pass filter (ILF-15 in Fig. 15) with the coefficients (-1, 0, 2, 0, -3, 0, 10, 16, 10, 0, 
-3, 0, 2, 0, -1)/32 which is obtained by approximating and truncating the ideal low-pass sinc filter 
coefficients. The ideal low-pass filter is designed with a cutoff frequency of 0.5π. In the generalized 
DCT decimation scheme, as N increases, the gain of DCT decimation filter becomes much flatter in 
the low frequency part (0~π/2), whereas the gain decreases rapidly in the high-frequency part (π/2~π). 
A lower gain at the frequencies higher than the stop-band implies less visible aliasing artifacts in the 
downscaled image. It is evident that, increasing the sub-frame size for the DCT decimation scheme 
will improve the anti-aliasing performance, thereby leading to a better visual quality of the downscaled 
image. It will, however, also increase the computational complexity. The total numbers of 
multiplications and additions required for computing each outgoing block ,ˆk lB  in (6) and (9) with a 
sub-frame size of M×N pixels are 128N+2NM+96M and 112N+84M+2NM-64, respectively. Using the 
sparse-matrix representations in (6), (12), and (13), the total numbers of multiplications and additions 
are reduced to 64N+2NM+64M and 72N+52M+2NM-64N/M+192, respectively. The computational 
complexities of the proposed DCT-decimation scheme with various sub-frame sizes are listed in Table 
II. From the table, the 8×8 sub-frame size used in [16] achieves the lowest complexity, whereas the 
other larger sub-frame sizes lead to higher complexities.  
 
Table II 
Average computational complexity per block for the generalized DCT-decimation scheme with and 
without sparse-matrix decomposition for different sub-frame sizes 
M×N 
Avg. multiplications per block 
,
ˆ
k lB  
Avg. additions per block ,ˆk lB  
 Gen. DCT Decimation 
Sparse-Matrix 
Decomposition
Gen. DCT 
Decimation 
Sparse-Matrix 
Decomposition 
352×288 273,408 243,712 264,512 241,932 
32×32 9,216 6,144 8,256 6,144 
16×16 4,096 2,560 3,584 2,624 
8×8 1,024 320 768 320 
 
Table III 
Average computational complexity per block for pixel-domain downscaling scheme using the two 
truncated ideal low-pass filters with tap lengths of 7 and 15 
Tap length Avg. multiplications per downscaled block
Avg. additions per 
downscaled block 
7-tap 1,344 1,152 
15-tap 2,880 2,688 
 
 
IV.4. Experimental Results 
In our experiments, two 150-frame CIF (352×288) test sequences, Container and Football, with a 
frame rate of 25 fps are encoded with a fixed quantization step-size, QP = 5, and a GOP size of 15 (i.e., 
the (15,3) GOP structure) by a front-end MPEG-2 encoder. Each coded video is then transcoded with 
four fixed quantization step-sizes, QP = (10,12,14,18), by using the CDDT shown in Fig. 1 which 
12 
the high-motion Football sequence becomes relatively higher (up to 0.1~0.3 dB). But such 
performance degradation is still rather minor compared to the coding gain achieved by the proposed 
generalized DCT decimation. 
Fig. 19 shows the difference images of frame #8 between the original version of Container 
sequence and the upscaled image after downscaling transcoding with four sub-frame sizes, 
respectively. The test video is first compressed with the QP = 5 and the GOP structure of (15,3), and is 
then transcoded to its quarter size with the same QP value. It is evident that the larger the sub-frame 
size, the smaller the energy of the difference frame.  
 
IV.5. Summary 
We proposed a generalized DCT decimation scheme which can adopt a sub-frame size larger than the 
traditional 8×8 block size. We also showed how to reduce the computation of the proposed 
DCT-decimation using sparse-matrix representations. We have analyzed the anti-aliasing properties 
and the computational complexities of the proposed scheme with various sub-frame sizes. We have 
also implemented a DCT-domain spatial downscaling transcoder based on the proposed scheme. 
Experimental results show that the proposed scheme with a sub-frame size of 16×16 and 32×32 can 
achieve significantly better visual quality, while leading to an increased computational cost. The 
average PSNR performance improvement of using a larger sub-frame size over that using the 
traditional 8×8 size can be up to about 1 dB. Our method offers more flexibility while making a 
tradeoff between visual quality and computational complexity. 
 
V. Conclusions 
 
In this three-year project, we have developed novel and efficient QoS and video adaptation 
techniques for video streaming over heterogeneous networks. In the first year (FY93), we developed 
efficient schemes for enhancing the error robustness of multi-hypothesis motion-compensate 
predictive (MHMCP) coder without sacrificing the coding efficiency significantly. In the second year 
(FY94), we developed efficient rate-distortion optimized quantization schemes to improving the 
coding efficiency of H.264 primary SP-Frames under given storage constraints on secondary 
SP-frames. In the final year, we proposed a new drift-free bitstream switching scheme to improve the 
coding performance of H.264 SP-frames for rate adaptation. We also proposed a generalized DCT 
decimation scheme for DCT-domain spatial downscaling which performs two-fold decimation on 
sub-frames of a flexible size larger than the traditional 8×8 block size to improve the visual quality. 
Our results have resulted in 13 international conference papers [24]-[36] and eight international 
journal papers (four papers published or accepted and four papers submitted or revised) [37]-[44]. The 
results meet the goals of this project quite well.  
 
 
References 
[1] S.-F. Chang and A. Vetro, “Video adaptation: Concepts, technologies, and open issues,” Proc. IEEE, vol. 
93, no. 1, pp. 148-158, Jan. 2005. 
[2] J. Xin, C.-W. Lin, and M.-T. Sun, “Digital video transcoding,” Proc. IEEE, vol. 93, no. 1, pp. 84-97, Jan. 
2005. 
[3] A. Vetro, C. Christopoulos, and H. Sun, “Video transcoding architectures and techniques: an overview,” 
IEEE Signal Processing Magazine, vol. 20, no. 3, pp. 18-29. Mar. 2003. 
[4] I. Ahmad, X. Wei, Y.u Sun and Y.-Q. Zhang, “Video transcoding: An overview of various techniques and 
research issues,” IEEE Trans. Multimedia, vol. 7, no. 5, pp. 793-804, Oct. 2005. 
[5] W. Li, “Overview of fine granularity in MPEG-4 video standard,” IEEE Trans. Circuits Syst. Video 
Technol., vol. 11, no. 3, pp.301-317, Mar. 2001. 
[6] N. Färber and B. Girod, “Robust H.263 compatible video transmission for mobile access to video servers,” 
in Proc. Int. Conf. Image Processing, Oct. 1997, Santa Barbara, CA. 
14 
[31] C.-M. Chen, Y.-R. Lee, C.-W. Lin, and Yung-Chang Chen “Adaptive error resilience transcoding for video 
multicast over wireless networks,” in Proc. IEEE Int. Conf. Multimedia and Expo, July 2005, Amsterdam, 
the Netherlands. 
[32] Y.-R. Lee and C.-W. Lin, “DCT-domain downscaling transcoding using generalized DCT decimation,” in 
Proc. IEEE Int. Conf. Image Processing, Sept. 2005, Genoa, Italy. 
[33] C.-M. Chen, Y.-C. Chen, and C.-W. Lin, “Error resilience transcoding using content-aware intra-refresh 
based on profit tracing,” in Proc. IEEE Int. Symp. Circuits and Systems, May 2006, Island of Kos, Greece. 
[34] C.-M. Chen, C.-W. Lin, and Y.-C. Chen, “Unequal error protection of video streaming over wires LANs 
using content-aware packet retry limit,” in Proc. IEEE Int. Conf. Multimedia and Expo, July 2006, Toronto, 
Canada. 
[35] S.-M. Hsu, C.-W. Lin, and I.-H. Lee, “A new seamless bitstream switching scheme for H.264 video 
adaptation with enhanced coding performance,” in Proc. IEEE Int. Conf. Image Processing, Oct. 2006, 
Atlanta, GA, USA. 
[36] C.-M. Chen, C.-W. Lin, and Y.-C. Chen, “Packet scheduling for video streaming over wireless with 
content-aware packet retry limit,” in Proc. IEEE Workshop Multimedia Signal Processing (MMSP), Oct. 
2006, Victoria, Canada. 
[37] J. Xin, C.-W. Lin, and M.-T. Sun, “Digital video transcoding,” Proceedings of the IEEE, vol. 93, no. 1, pp. 
84-97, Jan. 2005.  
[38] H.-J. Chiou, Y.-R. Lee, and C.-W. Lin, “Content-aware error resilient transcoding using prioritized 
intra-refresh for video streaming,” J. Visual Commun. Image Represent. (Special Issue on Visual 
Communications in the Ubiquitous Era), vol. 16, no. 4-5, pp. 563-588, Aug.-Oct. 2005.  
[39] W.-N. Lie, C.-I. Lin, and C.-W. Lin, “Enhancing video error resilience by using data embedding 
techniques,” IEEE Trans. Circuits Syst. Video Technol., vol. 16, no. 2, pp. 300-308, Feb. 2006. 
[40] C.-M. Chen, C.-W. Lin, and Y.-C. Chen, "Adaptive error resilience transcoding for video multicast over 
wireless networks," accepted and to appear in EURASIP Signal Processing: Image Communication 
(Special Issue on Mobile Video), 1Q, 2007. 
[41] C.-M. Chen, C.-W. Lin, H.-C. Wei, and Y.-C. Chen, “Multiple description transcoding and prioritized 
retransmission for robust video streaming over wireless LANs,” Journal of Visual Communication and 
Image Representation. (in revision) 
[42] Y.-C. Tsai, C.-W. Lin, and C.-M. Tsai, “H.264 error resilience coding based on multihypothesis 
motion-compensated prediction,” Signal Processing: Image Communication. (submitted) 
[43] Y.-R. Lee and C.-W. Lin, “Visual Quality Enhancement in DCT-Domain Spatial Downscaling Transcoding 
Using Generalized DCT Decimation,” IEEE Trans. Circuits Syst. Video Technol., April 2006. (in revision) 
[44] C.-P. Chang, C.-W. Lin, and S.-M. Hsu, “R-D optimized quantization of H.264 SP-frames for bitstream 
switching with storage constraints,” IEEE Trans. Circuits and Systems for Video Technology. (submitted) 
16 
News
33
35
37
39
41
43
45
0 20 40 60 80 100 120 140
Bitrate (kbps)
P
S
N
R
 (d
B)
P-frames Qsp=Qp
Qsp=Qp-5 Qsp=Qp-10
Qsp=Qp-15
QP=31
QP=28
QP=22
QP=19
QP=25
 
Fig. 3. PSNR performance comparison of H.264 P-frames and SP-frames for the News sequence at 
different bit-rates. 
 
 
Fig. 4. Illustration of bitstream switching using SS-frames. 
 
18 
 
predLL predLK
predHL
  
Fig. 8. Block diagram for decoding higher-rate video from primary and secondary SS-frames in a 
switching up process. 
 
Stefan
40
50
60
70
80
90
100
110
120
130
1 3 5 7 9 11 13 15 17 19 21
Qs & Qsp
x1
,0
00
 b
its
SS-Frames
SP-Frames
SS-Frames (Ori)
 
(a) 
News
10
15
20
25
30
35
40
45
50
55
60
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
Qs & Qsp
x1
,0
00
 b
its
SS-Frames
SP-Frames
SS-Frames (Ori)
 
(b) 
20 
News (higher-rate)
37
38
39
40
41
42
43
44
45
46
25 55 85 115 145
Bitrate (kbps)
P
S
N
R
 (d
B)
SS-Frames
SP-Frames
P-Frames
 
(b) 
Coastguard (higher-rate)
33
35
37
39
41
43
45
80 180 280 380 480 580
Bitrate (kbps)
PS
N
R
 (d
B)
P-Frames
SS-Frames
SP-Frames
 
(c) 
Fig. 10. Average PNSR performance comparison of primary higher bitrate bitstreams encoded using 
SS-frames, SP-frames and P-frames at different bitrates for (a) Stefan, (b) News, and (c) Coastguard. 
The quantization parameters for these bistreams are set as Qp1 = {16, 19, 22, 25, 28} and Qsp = Qs = 
Qp1 - 6. 
22 
using SS-frames, SP-frames and P-frames at different bitrates for (a) News, (b) Stefan, and (c) 
Coastguard. The quantization parameters for these bistreams are set as Qp2 = {31, 34, 37, 40, 43} and 
Qsp = Qs = Qp1 - 12. 
 
Stefan (higher-rate)
38.5
39
39.5
40
40.5
41
41.5
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29
Frame number
PS
N
R
 (d
B)
P-Frames
SP-Frames
SS-Frames
 
(a) 
News (higher-rate)
40.5
41
41.5
42
42.5
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29
Frame number
PS
N
R
 (d
B)
P-Frames
SP-Frames
SS-Frames
 
(b) 
24 
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1
-100
-90
-80
-70
-60
-50
-40
-30
-20
-10
0
10
Frequency in ×π rad/sample
M
ag
ni
tu
de
 in
 d
B
F0
N=288
N=32
N=16
N=8
Bilinear
7-tap
ILF-15
 
Fig. 15. Comparison of magnitude responses of DCT-domain and pixel-domain decimation filters. 
 
CONTAINER
23.5
24
24.5
25
25.5
26
26.5
27
27.5
28
80 130 180 230 280
Bitrate (Kbps)
Y
-P
S
N
R
 (d
B
)
352x288
32x32
16x16
8x8
7-tap
ILF-15
Bilinear
FOOTBALL
27.5
28
28.5
29
29.5
30
30.5
31
31.5
32
32.5
300 500 700 900 1100 1300
Bitrate (Kbps)
Y
-P
S
N
R
 (d
B
)
352x288
32x32
16x16
8x8
7-tap
ILF-15
Bilinear
 
(a)                                          (b) 
Fig. 16. Average luminance PSNR performance comparison of DCT decimation with various 
sub-frame sizes for two test sequences: (a) Container and (b) Football. The test videos are first 
compressed with the QP = 5 and the GOP structure of (15,3), and are then transcoded to their quarter 
size with QP = (5,7,10,12). 
 
 
VLD+
IQ1 
DECODER 
MCdec 
MV1
DCT-domain
decimation 
MV 
Resampling
FM1 
Incoming 
Bitstream 
IDCT
Pixel-domain
downscaling
DCT
MV2
IDCT
IQ2 
MCenc FM2
VLC Q2
Outgoing 
Bitstream 
DCT
ENCODER 
 
Fig. 17. A drift-free downscaling transcoder by replacing the pixel-domain downscaling with the pair 
of DCT + DCT-Domain Decimation + IDCT. 
