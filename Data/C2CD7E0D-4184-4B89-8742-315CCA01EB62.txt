（二）英文摘要 
Keywords：System-on-Chip (SoC), safety-critical system, system-level modeling, SystemC, 
transient fault (soft error or SEU), System-level fault injection methodology and 
tool, software-implemented fault injection, robustness analysis, safety standard, 
failure mode and effects analysis (FMEA). 
Intelligent systems, such as intelligent automotive systems or intelligent robots, require 
a stringent reliability/safety while the systems are in operation. As system-on-chip (SoC) 
becomes prevalent in the intelligent system applications, the reliability issue of SoC is 
getting more attention in the design industry while the SoC fabrication enters the very deep 
submicron technology. How to validate the SoC robustness and perform the FMEA to 
identify the weakness of the SoC becomes a critical issue in the SoC design and application. 
We propose a development process for safety-critical systems, which includes: utilizing a 
verification platform to perform the FMEA /FTA (Fault Tree Analysis) to find out the 
vulnerability of the system that can help designers not only invest limited resources on the 
most crucial regions but also understand the gain derived from the investments. This 
research proposes an effective reliability/safety verification platform in system-level design 
for SoC dependability validation and analysis. The SoC robustness verification platform 
consists of a system-level fault injection tool which contains software-implemented and 
simulation-based fault injection schemes and an FMEA model as well as analysis tool. The 
verification platform is helpful to develop a reliable system by locating systems’ 
vulnerability points and realizing their effects on the system reliability/safety. We construct 
a verification platform on the CoWare Platform Architect and physical system environment, 
and then use a realistic ARM-based SoC to demonstrate the feasibility and effectiveness of 
the proposed reliability/safety verification platform. The robustness of the experimental SoC 
can be validated and the FMEA results can be exploited to provide the proper protection to 
the most vulnerable points.  
 2
 Add fault-tolerant 
designs to improve the 
robustness of critical 
components identified 
in Phase 2 
Phase 1: 
Fault Hypotheses 
Develop fault injection 
strategy to emulate  
interference-induced 
errors 
Identify possible 
interferences 
• 
• 
• Perform fault injection 
campaigns 
• 
• 
• 
Identify failure modes 
Assess risk-priority 
number 
Locate critical 
components to be 
protected
Phase 2: 
Failure Mode and 
Effect Analysis 
Robustness? 
EndRobustness 
Criterion 
(IEC 61508) 
Acceptable
Unacceptable
Phase 3: 
Fault-Tolerant 
Design 
•
 
Fig. 1. Robustness/safety validation and fault-tolerant design process. 
According to IEC 61508, if a failure will result in a critical effect on system and lead human’s life to 
be in danger, then such a failure is identified as a dangerous failure or hazard. IEC 61508 defines a 
system’s safety integrity level (SIL) to be the Probability of the occurrence of a dangerous Failure per 
Hour (PFH) in the system. For continuous mode of operation (high demand rate), the four levels of SIL 
are given in Table I [7]. 
TABLE I: SAFETY INTEGRITY LEVELS 
SIL PFH
4 ≥10-9 to <10-8
3 ≥10-8 to <10-7
2 ≥10-7 to <10-6
1 ≥10-6 to <10-5
 
To acquire the system’s PFH, we define ëi as the occurring probability of the ith type of threat (or error) 
per hour and ái as the probability of dangerous failures caused by the ith type of threat. Thus 
i
k
i
i αλ∑
=
×=
1
PFH                                (1) 
where k means how many types of threats considered. 
Actually, each type of threat may result in more than one mode of dangerous failure, so the ái can be 
calculated by the following equation: 
∑
=
=
n
j
i jFMiP
1
))(,(α                           (2) 
where n means the number of possible modes of dangerous failure caused by the ith type of threat, and 
P(i, FM(j)) represents the probability of occurring the jth mode of dangerous failure caused by the ith 
type of threat. 
 3
sent to the parent process and the kill command is executed to suspend the child process. The 
parent process then uses the following request: PTRACE_PEEKTEXT, 
PTRACE_POKETEXT, PTRACE_GETREGS, and PTRACE_SETREGS provided in 
ptrace() system call to inject the faults into the desired locations. 
IV. The parent process resumes the child process after the fault injection, and simultaneously 
executes the wait() function to wait for the termination of the child process. 
 
Fig. 2. The flow of automatic software-implemented fault injection and failure mode classification tool. 
 5
Injection campaign
Completed Incomplete
Correct 
time 
Incorrect 
time 
System 
stable
System  
unstable
Correct 
results 
Incorrect 
results 
Process
hang
Infinite 
loop
System error 
detected schemes
System 
crash
Correct 
results 
Incorrect 
results 
 
Fig. 4. System behavior and failure mode classification. 
 
Fig. 5. Process of failure mode classification. 
The notations used in the risk model are developed below. 
z n: number of components to be investigated in the SoC; 
 7
the components of register file in ARM926EJ CPU, AMBA AHB and memory sub-system. We utilize 
the Socle Technology CDK ARM926EJ-embedded SoC platform with the software-implemented fault 
injection platform presented in Section 3.1 to obtain the probability distribution of failure modes for 
register file in ARM926EJ CPU. An ARM926EJ-based SoC platform in SystemC design level provided 
by CoWare Platform Architect was used to gain the experimental results for the other two components. 
The potential SoC failure modes classified from the fault injection process are fatal failure (FF), silent 
data corruption (SDC), correct data/incorrect time (CD/IT), and deadlock/infinite loop (DL/IL). Here, 
the fatal failure includes system crash and process hang; silent data corruption includes incorrect 
data/correct time and incorrect data/incorrect time. In the following, we summarize the data used in this 
case study. 
z n = 3, {C(1), C(2), C(3)} = {register file in ARM926EJ, AMBA AHB, memory sub-system}. 
z z = 4, {FM(1), FM(2), FM(3), FM(4)} = {FF, SDC, CD/IT, DL}. 
z The benchmarks employed in the fault injection process are: JPEG (pixels: 255 × 154), matrix 
multiplication (M-M: 50 × 50), quicksort (QS: 3000 elements) and FFT (256 points). 
A.  Probability distribution of failure modes in ARM926EJ CPU 
The register set in ARM926EJ CPU used in this experiment is R0 ~ R12, R13 (SP), R14 (LR), R15 
(PC), R16 (CPSR), and R17 (ORIG_R0). A fault injection campaign is an experiment, which injects a 
single bit-flip fault to the target register to investigate its effect on the system behavior. For each 
benchmark, we performed one thousand fault injection campaigns for each target register by randomly 
choosing the time instant of fault injection within the benchmark simulation duration, and randomly 
choosing the target bit to inject 1-bit flip fault. So, eighteen thousand fault injection campaigns were 
carried out for each benchmark to obtain the data shown in Table II. From Table II, it is evident that the 
susceptibility of the system to register faults is benchmark-dependent and the rank of system 
vulnerability over different benchmarks is QS > FFT > M-M. However, all benchmarks exhibit the same 
trend in that while a fault arises in the register set, the occurring probabilities of CD/IT and FF occupy 
the top two ranks.  
Table III and IV illustrate the statistics of failure probability for each target register for benchmarks 
M-M and QS. The more results can be found in [14]. Throughout these tables, we can observe the 
vulnerability of target registers for different benchmark programs. It is evident that the vulnerability of 
registers quite depends on the characteristics of the benchmarks, which could affect the read/write 
frequency and read/write syndrome of the target registers. The bit errors won’t cause damage to the 
system operation if one of the following situations occurs:  
z Situation 1: The benchmark program never reads the affected registers after the bit errors happen.  
z Situation 2: The first access to the affected registers after the occurrence of bit errors is the ‘write’ 
action. 
It is apparent to see that the usage frequency of R4 ~ R8 for benchmark M-M is quite lower than QS, so 
the failure probability of R4 ~ R8 for M-M is significantly lower than QS as well. Another interesting 
result deserved to be pointed out is the failure probability of R14 ~ R16. As seen from Table III and IV, 
the vulnerability of R15 (program counter) to the faults is 100%. It indicates that the R15 is the most 
vulnerable register to be protected in the register set. Since QS employs the recursive call mechanism 
and comparison operation, the R14 and R16 are used heavily. Consequently, those two registers are also 
vulnerable to the faults in QS benchmark. According to the experimental results [14], the top three 
vulnerable registers are R15 (100%), R14 (68%), and R13 (31.5%). The failure probabilities for other 
registers are all below 30%. 
 
 9
TABLE V. P (2, FM(K)), P (2, SF) AND P (2, NE) FOR THE USED BENCHMARKS 
 FF (%) SDC (%) CD/IT (%) DL (%) SF (%) NE (%) 
JPEG 18.57 45.90 0.16 15.88 80.51 19.49 
M-M 18.95 55.06 2.15 3.57 79.73 20.27 
FFT 20.18 21.09 15.74 6.38 63.39 36.61 
QS 20.06 17.52 12.24 5.67 55.50 44.50 
Avg. 19.41 38.16 7.59 8.06 73.22 26.78 
C. Probability distribution of failure modes in memory sub-system 
Table VI shows the probability distribution of failure modes if a bit error occurs in the memory 
sub-system. 
TABLE VI. P (3, FM(K)), P (3, SF) AND P (3, NE) FOR THE USED BENCHMARKS 
 FF (%) SDC (%) CD/IT (%) DL (%) SF (%) NE (%) 
M-M 0.0 3.438 0.0 0.0 3.438 96.562 
QS 0.0 0.592 0.442 0.425 1.459 98.541 
JPEG 0.0 0.879 0.004 0.460 1.343 98.657 
FFT 0.0 0.307 0.161 0.270 0.738 99.262 
Avg. 0.0 1.304 0.152 0.289 1.745 98.255 
D. SoC-Level Risk Assessment 
In this case study, three components, ARM926EJ CPU, AMBA AHB system bus and memory, are 
utilized to demonstrate the proposed risk model to assess the scales of failure-induced risks in a system. 
The following data are used to show the risk assessment for the selected components: {FR_C(1), 
FR_C(2), FR_C(3)} = {10-6 ~ 10-8/hour }; {S_FM(1), S_FM(2), S_FM(3), S_FM(4)} = {10, 8, 4, 6}. 
According to the expressions presented in Section 4, the SoC failure rate, SIL and RPN are obtained 
below: 
TABLE VII. SYSTEM FAILURE RATE 
FR_C/per hour 1 × 10-6 0.5 × 10-6 1 × 10-7 0.5 × 10-7 1 × 10-8 
SFR_C(1) 2.519 × 10-7 1.26 × 10-7 2.519 × 10-8 1.26 × 10-8 2.519 × 10-9 
SFR_C(2) 7.322 × 10-7  3.66 × 10-7 7.322 × 10-8 3.66 × 10-8 7.322 × 10-9 
SFR_C(3) 1.745 × 10-8 8.725 × 10-9 1.745 × 10-9 8.725 × 10-10 1.745 × 10-10 
SFR 1.001 × 10-6 5.007 × 10-7 1.001 × 10-7 5.007 × 10-8 1.001 × 10-8 
SIL 1 2 2 3 3 
 11
 References: 
[1] R. Makowitz and C. Temple, “FlexRay – A communication network for automotive control systems,” 
IEEE Int. Workshop on Factory Communication Systems, Page(s):207 – 212, June 2006. 
[2] C. Constantinescu, “Impact of deep submicron technology on dependability of VLSI circuits,” Proc. 
IEEE Int. Conf. on Dependable Systems and Networks, pp. 205-209, 2002. 
[3] R. Baumann, “Soft errors in advanced computer systems,” IEEE Design & Test of Computers, vol. 
22, issue 3, pp. 258 – 266, May-June 2005. 
[4] Y. Zorian et al., “Impact of soft error challenge on SoC design,” Proc. 11th IEEE Int. On-Line 
Testing Symposium, pp. 63 – 68, 2005. 
[5] CEI International Standard IEC 61508, 1998-2000. 
[6] S. Brown, “Overview of IEC 61508 design of electrical/electronic/programmable electronic 
safety-related systems,” Computing & Control Engineering Journal, pp. 6-12, February 2000. 
[7] A. H. Mollah, “Application of Failure Mode and Effect Analysis (FMEA) for Process Risk 
Assessment,” BioProcess International, pp. 12–20, November 2005. 
[8] M. Stamatelatos and W. Vesely et al., Fault Tree Handbook with Aerospace Applications, version 1.1,  
NASA, 2002. 
[9] Y. Y. Chen, Y. C. Wang & J. M. Peng, “SoC-Level Fault Injection Methodology in SystemC Design 
Platform,” in 2008 7th Int. Conf. on System Simulation & Scientific Computing, pp. 680-687. 
[10] CoWare Model Library, “Platform Creator User’s Guide,” Product Version V2006.1.2. 
[11] K. J. Chang, and Y. Y. Chen, “System-level fault injection in SystemC design platform,” in 2007 
Proc. 8th Int. Symposium on Advanced Intelligent Systems, pp. 354-359. 
[12] Yung-Yuan Chen, Chung-Hsien Hsu, and Kuen-Long Leu, “SoC-Level Risk Assessment Using 
FMEA Approach in System Design with SystemC,” IEEE Symposium on Industrial Embedded 
Systems, pp. 82-89, July 2009, Switzerland. 
[13] 陳信宇、陳永源， “系統晶片強韌度驗證分析工具平台開發＂，2009 全國計算機會議，pp. 1-12, 
November 2009. (本計畫論文發表) 
[14] 陳信宇, “Development of the Robustness Verification and Analysis Tool for SoC Design 
Platform”, 中華大學碩士論文, 99 年 2 月.(本計畫成果: 學生畢業論文) 
[15] Kuen-Long Leu, Yung-Yuan Chen, Chin-Long Wey, Jwu-E Chen and Chung-Hsien Hsu, “A 
Bayesian Network Reliability Modeling for FlexRay Systems,” International Conference on 
Information and Communication Technologies, World Academy of Science, Engineering and 
Technology, pp. 42-47, May 2010. (本計畫論文發表) 
[16] Kuen-Long Leu, Yung-Yuan Chen, Chin-Long Wey, Jwu-E Chen, “A verification flow for FlexRay 
communication robustness compliant with IEC 61508,” The 2nd International Conference on 
Industrial Mechatronics and Automation, pp. 228-231, May 2010. (本計畫論文發表) 
[17] Yung-Yuan Chen and Chung-Hsien Hsu, “SoC-Level Hazard Analysis and Risk Assessment Using 
FMEA/FTA Approaches Compliant with IEC 61508,” Journal manuscript under preparation, to be 
submitted to SCI-indexed journal before December, 2010. (本計畫研發成果) 
 13
系統晶片強韌度驗證分析工具平台開發 
陳信宇         陳永源 
中華大學資訊工程學系      中華大學資訊工程學系 
300 新竹市香山區五福路二段707 號    300 新竹市香山區五福路二段707 號 
m09502044@chu.edu.tw      chenyy@chu.edu.tw 
摘要―智慧型嵌入式系統常應用在一些需要高可靠度的
領域，例如汽車駕駛系統以及智慧型機器人，同時智慧型
系統的設計也大量的應用系統晶片的設計概念。製程進步
已經進入到深次微米時代，高密度的系統晶片容易受到輻
射線及電磁波的干擾，而降低晶片可靠度。使得系統開發
者在開發新的智慧型系統時，必須嚴格審視系統晶片可靠
度的相關問題。 
在本篇論文裡，我們以不更改目標系統晶片架構的前提之
下，利用系統晶片軟體實踐錯誤注入的方式，去針對目標
系統晶片內的處理器所擁有的暫存器作錯誤注入模擬實
驗，並利用 FMEA 概念和失效類型的分類，以及實驗結
果紀錄，提出一個失效類型分類模型，並根據分類模型開
發一套自動化錯誤注入及失效類型分析工具。透過精簡化
的使用者參數設定，讓系統開發者能在系統設計流程初期
就可以透過此工具進行大量的模擬錯誤注入實驗，並分析
實驗數據轉換成目標系統的強韌度資訊，讓系統開發者在
系統設計流程初期就能掌握目標系統的強韌度和脆弱
點，並依照目標系統對於可靠度的要求程度，針對脆弱點
來加入有效的容錯機制。不僅協助設計者提高目標系統的
可靠度，也可以提昇系統晶片可靠度設計及驗證的效率。 
我們以 ARM 為基礎的系統晶片來做實驗，透過設定少量
的使用者自訂參數，來自動化完成大量的暫存器錯誤注入
實驗。由實驗結果得知，錯誤一旦發生在暫存器單元時，
系統可能產生八種不同的反應，包括七種不同的失效類型
以及沒有造成任何失效。同時我們也可以統計出七種不同
的失效類型以及沒有造成任何失效的機率分布，作為目標
系統的強韌度參考。所開發的工具除了提供非侵入式方式
進行模擬錯誤注入實驗，並且利用自動化實驗以及分析的
方法來大大降低分析成本，提昇智慧型系統設計及驗證流
程的速度。 
一. 簡介 
隨著嵌入式系統應用的普及化，複雜的智慧
型系統已經成為人們日常生活不可或缺的一部
分。例如智慧型手持裝置，車用電子控制裝置，
航太設備…等等。而智慧型系統在設計流程上面
普遍的加入系統晶片。由於人們更加的依賴電子
產品，當智慧型系統應用的領域與人身安全有直
接相關時，系統晶片的可靠度便成為不可忽視的
重要議題。 
當晶片製程進入深次微米時代之後，系統晶
片的設計越來越複雜，包含的電晶體也越來越
多，因此也越來越容易受到輻射線或是電磁波的
干擾而出現軟性錯誤，特別是在暫存器以及記憶
體中[1]。因此，系統晶片開發者必須要在設計初
期，即能針對系統晶片強韌度做一完整的驗證分
析，以利開發者決定是否需要加入容錯機制來提
高系統晶片的可靠度。 
所以，在決定是否將容錯機制加入系統晶片
時，有兩個重要的課題必須先解決: 一是如何在
系統開發設計初期驗證目標系統的強韌度; 二
是如果需要加入容錯機制時，如何更快速有效的
提供系統晶片對於失效模式以及效應分析
(Failure Mode and Effect Analysis)的相關資料，讓
設計者知道系統晶片的脆弱點，以及如何有效的
加入容錯機制到系統晶片，降低系統晶片的開
發、設計及晶片成本。 
對於以上問題，要驗證目標系統的可靠度最
直接的方法就是對目標系統進行錯誤注入實
驗，透過實驗觀察系統遭受到錯誤污染時，所反
應的系統行為去分析出目標系統的強韌度以及
 15
使 用 到 大 量 的 內 文 切 換 (content 
switch)。因此若測試程式執行時，所佔
用的記憶體區塊太大的話，將會導致錯
誤注入工具在執行中會變得很慢。 
作者也提到利用系統函數 ptrace()，來設計錯誤
注入工具時，可能會有的優缺點。 
優點： 
i. 工具的執行檔很小，不會佔用太多的目
標系統資源 
ii. 易於移植，針對以 UNIX 為基礎之不同
的系統，只要稍微修改工具即可移植 
iii. 在進行每一次實驗時，不需更動測試程
式的原始碼內容，或是重新編譯測試程
式。 
在[6]中，提到了利用一些晶片內建的 on 
chip debugger，在非侵入式的情況之下，利用軟
體錯誤注入的方式並搭配內建的除錯電路去針
對系統內部資訊作存取及改寫。此方法可以在不
需中斷測試程式的情況之下來驗證系統的容錯
能力，但這並不是每一個晶片系統都有內建除錯
電路。若目標系統的晶片沒有內建除錯電路，我
們不一定還能正常使用此工具。 
由於應用領域的不同，上述的文獻大多都是
探討在高速工作站的系統或是具有內嵌除錯電
路的系統上進行實驗。而在嵌入式系統廣泛運用
的今日，上述提供的方法似乎沒有辦法提供一套
完整的方案來完全地協助使用者，針對不同的目
標系統進行錯誤敏感度實驗，並且針對大量實驗
的結果執行自動失效類型分類與強韌度分析。 
因此，在本篇論文中，我們以非侵入式的方
式，以不更改目標系統的架構以及資源為前提，
採用軟體實踐錯誤注入的方法開發一套適用於
一般系統晶片的自動化軟體錯誤注入工具，並利
用 FMEA 相關概念設計自動化錯誤管理分析工
具，透過大量錯誤注入實驗的自動化分類以及分
析，來提供一個針對於一般系統晶片在開發與驗
證容錯設計的一個完整解決方案。 
三. 自動化軟體灌錯分析工具架構 
3.1 錯誤注入流程 
為了完成上述的目標，我們採用軟體實踐錯
誤注入的方法，並且以非侵入式的做法以及不改
變目標系統晶片架構為原則去設計工具。我們利
用以 Unix 為基礎的系統環境，利用作業系統所
提供的系統函式 fork()，產生出子程序以及母程
序。子程序為錯誤注入目標程序，負責執行錯誤
注入實驗所要測試的目標程式;而母程序則是錯
誤注入監控程序，負責處理錯誤注入實驗的一些
必要的前置參數設定及更改暫存器或記憶體的
內容。當母程序自動設定完參數之後，首先執行
無錯誤注入(fault free)實驗，此實驗的結果紀錄
將會當成之後進行實驗結果分類及分析的對照
組。接著，母程序使用到另外一個系統函式
ptrace()，透過 ptrace()這個系統函式，母程序可
以監督並控制子程序的執行狀況，並且透過
GETREGS 、 SETREGS 及 、 PEEKTEXT 、
POKETEXT…等 ptrace()函式參數的設定，使得
母程序可以在特定的事件被觸發之後，暫停子程
序的執行，並且存取在子程序中，目標程式所使
用的暫存器以及記憶體中的內容值，進而進行錯
誤注入。將錯誤注入到目標程式之後，母程序恢
復子程序的執行，並紀錄每一次實驗的結果。 
3.2 失效類型分類及分析方法 
為了要取得高可信度的數據來分析目標系
統的強韌度以及脆弱點，我們必須依靠大量的錯
誤注入實驗，並從實驗結果觀察系統運作時受到
干擾的反應現象，來做分類並統計歸納。因為不
同的測試程式特性，以及錯誤注入的時間點及發
生錯誤的暫存器位置的差異，我們可以歸納出系
統運作時遭受干擾時所產生的八種反應 如圖 1
所示。 
 17
息，則其失敗類型可能是系統損毀失效類型、或
無窮迴圈失效類型。在這二種失效類型中，由於
系統損毀失效類型不會產生執行結果記錄檔
案，而無限迴圈則是會產生數量龐大的不正確資
訊。所以我們需要利用實驗結果記錄檔案的容
量，來做為這二種失效類型的區分特徵。若實驗
記錄檔的容量為不為零，則代表此次實驗因受到
錯誤污染，而產生子程序無止盡執行的系統行
為，導致實驗記錄檔案容量爆增，我們將之歸類
於無窮迴圈失敗類型。實驗記錄檔的容量為為
零，則代表子程序損毀無法回傳結束狀態，甚至
為監督者的母程序所產生的既有訊息也沒有出
現在記錄檔案。進而可推斷，當此次實驗及遭遇
到的錯誤干擾若出現在實際操作的系統上，作業
系統可能因此錯誤而導致無法回應，必須重新開
機。 
在錯誤注入實驗結果記錄檔所記錄的資訊
中，我們找到上述四種特徵。我們可透過這四種
特徵去區分出八種不同的系統反應，而這四種特
徵在八種不同系統反應所代表的意義如下： 
 時間正確結果正確 (Correct Time Correct 
Data , CTCD)： 
子程序的結束狀態方面，此分類是屬於正常結
束。子程序的結束時間方面，是屬於正確的。在
測試程式輸出結果方面，是屬於正確的。在實驗
結果記錄檔案容量方面，是屬於正確的。 
 時間正確結果不正確(Correct Time Incorrect 
Data , CTID)： 
子程序的結束狀態方面，此分類是屬於正常結
束。子程序的結束時間，是屬於正確的。在測試
程式輸出結果方面，是屬於不正確的。在實驗結
果記錄檔案容量方面，是屬於正確的。 
 時間不正確結果正確(Incorrect Time Correct 
Data , ITCD)： 
子程序的結束狀態方面，此分類是屬於正常結
束。子程序的結束時間方面，是屬於不正確的。
在測試程式輸出結果，是屬於正確的。在實驗結
果記錄檔案容量方面，是屬於正確的。 
 時間不正確結果不正確 (Incorrect Time 
Incorrect Data , ITID)： 
子程序的結束狀態，此分類是屬於正常結束。子
程序的結束時間方面，是屬於不正確的。在測試
程式輸出結果方面，是屬於不正確的。在實驗結
果記錄檔案容量方面，是屬於正確的。 
 程序無回應(Process Hang , PH)： 
子程序的結束狀態方面，此分類是屬於不正常結
束。子程序的結束時間方面，由於是不正常結
束，故程式結束時間無法做為判斷依據。在測試
程式輸出結果方面，由於是不正常結束，測試程
式輸出結果不一，故無法做為判斷依據。而在實
驗結果記錄檔案容量方面，由於程序無回應是屬
於程式受到干擾而無法繼續執行，但是作業系統
仍然是正常執行的狀態，所以實驗結果記錄檔案
容量不會爆增。 
 無窮迴圈(Infinite Loop , IL)： 
子程序的結束狀態方面，此分類是屬於沒有結
束。子程序的結束時間方面，由於是沒有結束，
故程式結束時間無法做為區分參考。在測試程式
輸出結果方面，由於是不正常結束，測試程式輸
出結果因受干擾，而可能產生大量無意義資訊，
故測試程式輸出結果無法做為區分參考。在實驗
結果記錄檔案容量方面，由於無限迴圈會造成實
驗結果記錄檔案的容量，因為多了很多無意義的
資料而造成爆增的現象。 
 系統錯誤偵測機制 (System Error Detect 
Mechanism , SEDM)： 
子程序的結束狀態方面，因為錯誤被作業系統的
偵查錯誤機制偵測並排除，所以此分類是屬於正
常結束。子程序的結束時間方面，由於子程序被
作業系統提早結束的關係，所以程式結束時間非
常短，是屬於不正確的。在測試程式輸出結果方
面，由於作業系統已經透過偵查錯誤機制將子程
序安全而快速的結束掉了，因此子程序所執行的
測試程式輸出結果也一併視為是錯誤而不會輸
 19
Model)。此分析模型是將上述的分類法則
以程式流程圖及一些程式技巧的撰寫方式
表示，並且轉換成與工具結合的模組，以
進行錯誤注入實驗之後的自動化分析與分
類。圖 2 展示分析模型流程圖。 
在這邊值得一提的是，在分析錯誤類型的
特徵中，工具必須定義一組合理的時間範
圍來區分每一次的實驗結果是否落在合理
的時間範圍內。而由於作業系統在執行程
式的過程中，會因為工作排程以及一些內
文切換的動作，使得每一次的執行結束時
間皆有些許不同，所以合理的時間範圍必
定不是為一個固定的值。因此，我們使用
了蒙地卡羅模擬法(Monte Carlo 
Simulation)的概念，透過統計的方式來找
出一組合理的正確時間範圍。 
蒙地卡羅模擬法，是基於大數法則的實證
方法，當實驗的次數越多，其平均值也就
會越趨近於理論值。因此我們透過大量蒐
集並統計無錯誤注入實驗結果的結束時
間，來找出合理的時間範圍。 
1. 首先，我們先透過執行無錯誤注入實
驗，並擷取每一次實驗的程式執行時
間，執行次數預設值為 50 次。執行完
成之後，我們在這 50 組的程式執行時
間中，找出最大值以及最小值，並且
個別存在 Time_MAX1 以及
Time_min1 兩個變數中，而完成一整
個程序我們稱作是一個 Run。 
2. 將 Time_MAX1 以及 Time_min1 分別
複製一份到 Time_MAX2 以及
Time_min2 兩個變數中。Time_MAX2
以及 Time_min2分別儲存目前找到的
合理時間最大值以及最小值。 
3. 之後，再次執行一個 Run，可以得到
另一組的時間範圍存放在
Time_MAX1 以及 Time_min1 中。 
4. 將 Time_MAX2 跟 Time_MAX1 比較
大小，若 Time_MAX1 > 
Time_MAX2，則改寫目前存放的最大
合理時間。 
5. 將 Time_min2 跟 Time_min1 比較大
小，若 Time_min1 < Time_min2，則
改寫目前存放的最小合理時間。 
6. 定義一個變數 judge 記錄收斂次數，
若在執行一個 run 之後，發現上述步
驟 4 及步驟 5 並沒有改寫之動作，代
表這一次的 run 是在收斂範圍內，將
judge + 1，並進行下一次實驗。若下
一次實驗的步驟 4 或步驟 5 有改寫的
行為，則 judge 歸零。 
7. 當 judge = 2 的時候結束蒙地卡羅模
擬，換句話說，必須找到連續兩次都
落在統計的合理時間範圍之內才代表
接近理論值的時間範圍。 
透過圖 3，可以很清楚知道程式的演算法
運作… 
 
圖 3. 蒙地卡羅模擬法流程 
透過上述蒙地卡羅模擬法的概念可以找出
逼近母體的合理時間範圍，而越逼近母體
的合理時間範圍，在判斷程式結束時間的
Extrac
Copy ExtracNO. 1
Runs
NO. 2
Runs
NO. 3
Runs
T_MAX1 
T_min1 
T_MAX2 
T_min2 
NO. n
Runs
NO. 4
Runs
T_MAX1 
T_min1 
If not 
converge 
(judge != 2) 
Compare & check range 
If modified, judge =0 
Else , judge += 1 
Final T_MAX 
Final T_min 
When judge = 2 
T_min2 <= x <= TMAX2 
is final Correct Time Range 
 21
備進行錯誤注入實驗，工具可以根據剛剛
使用者設定的測試程式以及錯誤注入實驗
的執行次數…等參數進行一連串的錯誤注
入實驗，並且將個別的實驗結果紀錄到不
同的檔案。完成錯誤注入實驗之後，工具
接著引入自動化分析模型，而自動化分析
模型的分類法則是套用 3.2 章節所提到的
分析法則，並且帶入無錯誤注入實驗記錄
檔案當作對照組，將產生出來的大量實驗
記錄檔案進行自動化分析及分類。 
工具將實驗記錄分析結果並分類完
成後，接著彙整數據，並計算各種失敗類
型的機率分佈，並將資料輸出成結果資料
檔以利系統開發者參考。 
四. 實驗結果 
在[1]中提到，由於soft error發生在暫
存器的機率相當高，所以我們把實驗目標
定在目標系統晶片的暫存器檔案上面，並
且透過大量的自動化錯誤注入及分析工具
來驗證系統晶片的強韌度。本篇論文使用
(CDK)1嵌入式系統開發平台來做為軟體
錯誤注入實驗的環境，而整個平台包括
ARM926EJ-S 的 核 心 以 及 Open Linux 
2.6.19 為平台的作業系統[7]，並選擇ARM
處理器中，在使用者模式下的R0~R17 暫
存器進行實驗。我們將以下列實驗來展示
軟體灌錯管理分析工具如何自動化完成灌
錯實驗以及分析數據。 
4.1 蒙地卡羅模擬法實驗合理化時間的差
異性 
由於作業系統在執行程式的過程中，會因
為工作排程以及一些內文切換的動作，使
得每一次的執行結束時間皆有些許不同，
所以使用蒙地卡羅模擬法來取得合理的時
間範圍。而實驗中有兩個參數，分別是
                                                 
1 Socle Technology – SoC Platform Solution and 
Service Company 
judge 以及 runs 所包含的個數，這兩個參
數的設定將會影響合理時間範圍的正確
性，我們將 judge 設定為 2，分別觀察當
runs 為 5，10，50，100 時，對於合理時間
判斷的準確度，實驗結果如圖 5 所示： 
0
10
20
30
40
50
60
70
80
90
100
CTCD CTID ITCD ITID PH IL SEDM SC Total
runs=5
run=10
run=50
run=100
 
圖 5. 自動化錯誤注入及管理分析工具流程圖 
由圖 5 的數據可以發現，當 runs 越高，則
CTCD 的精確度也越高，而 ITCD 的數量
也會明顯變少。此數據可以驗證使用蒙地
卡羅模擬法的概念可以提昇合理化的時間
範圍準確度，而提高每一個 runs 所要執行
的次數則會使分析工具的效率些微下降。 
4.2 個別暫存器之注入錯誤分析實驗 
實驗設定為 50 × 50 的矩陣相乘運算
執行 1000 次實驗，目標暫存器為 R0，錯
誤注入時間範圍為 0us ~ 250us 之間隨機
產生。 
將整套自動化軟體錯誤注入管理分析工具
在目標系統上面執行錯誤注入實驗，執行
1000 次錯誤注入實驗及分析資料總共耗
時 15 分鐘，而分析結果如下： 
在完成 1000 次的錯誤注入實驗以及自動
化分析之後，工具會在目標系統上面建立
七種不同的目錄，分別表示失敗類型以及
一種沒有造成任何失敗的類型，如圖 6 所
示： 
 23
程式的輸出值因為系統遭受到污染而輸出
錯誤的答案。 
4.3 暫存器檔案注入錯誤分析實驗 
接著我們進行一個實驗，以整個暫存器檔
案為一個元件進行軟體錯誤注入實驗，來
模擬當智慧型系統暫存器檔案遭受錯誤干
擾時，系統所呈現的反應為何。實驗設定
如下： 
 測試程式：50 × 50 矩陣相乘 
 實驗次數 10808 次 
 每次實驗中，目標暫存器檔案 R0 ~ 
R17 隨機選擇 
 錯誤觸發時間：測試程式執行時間範
圍內隨機選擇 
實驗數據如圖 10 所示： 
0
5
10
15
20
25
30
35
40
45
50
55
60
65
70
75
80
85
90
95
100
CT
CD
CT
ID
IT
CD IT
ID PH IL
SE
DM S
C
To
tal
數列1
 
圖 10 暫存器檔案綜合錯誤注入實驗結果 
在圖 10 中我們可以透過工具，很快
的得到暫存器檔案的錯誤注入實驗分析結
果。由數據可以很清楚了解，當系統遭遇
到輻射線或電磁波干擾時，有 86%的機率
是不會有影響的，換言之有 14%的機率是
會造成系統失效的類型出現。而在各失效
類型中，又以程式無回應這種失敗類型為
最高，達到約 7%的機率會造成程式無回
應，次之則是輸出結果錯誤，而這些綜合
數據也可以提供系統開發者一個資訊去了
解目標系統整體對於執行測試程式中遭受
到錯誤污染，系統整個的失效類型分佈。 
 
五. 結論 
在本篇論文中，我們以非侵入式的原
則及不更改晶片系統的架構之下，採用軟
體實踐錯誤注入的方式，完成一套自動化
的軟體灌錯管理及分析工具，並且以
FMEA 的錯誤類型分類概念去設計一個自
動化分析模型並套用到工具中。藉由此工
具的自動化實驗分析，系統開發者可以在
開發階段早期就透過工具了解到目標系統
的強韌度資訊以及脆弱點，並且透過精簡
化的使用者參數設定以及高程度的自動化
分類以及分析，可以使用大量的實驗數據
來提高分析結果的精確度以及大幅降低分
析成本(analysis cost)。在智慧型嵌入式系
統大幅應用的今日，高度自動化的實驗分
析工具有助於系統開發者降低系統的開發
以及驗證成本，並且降低 Time to Market
所需要的時間成本，使得智慧型嵌入式系
統能夠越來越可靠及人性化。 
 
六. 致謝 
本研究要特別感謝國科會計畫編號
NSC 98 – 2221 – E – 216 – 014 的贊
助。 
 
七. 參考文獻 
[1] Alfredo B, Paolo P. “Fault injection 
techniques and tools for embedded 
systems reliability evaluation”, Kluwer 
Academic, 2003 
[2] Raphael R. Some*, Won S. Kim, Garen 
Khanoyan, Leslie Callum, Ani1 
Agrawal, and John J. Beahan “ A 
Software-Implemented Fault Injection 
 25
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                             99 年 6 月 22 日 
報告人姓名  陳永源 
 
服務機構
及職稱 
 
台北大學電機工程研究所 
教授 
     時間 
會議 
     地點 
5 月 30-31, 2010 
中國大陸、武漢 
本會核定
補助文號
 
NSC 98-2221-E-305-010 
 
會議 
名稱 
 (中文)  
 (英文) 2010 2nd International Conference on Industrial Mechatronics and 
Automation (ICIMA 2010) 
發表 
論文 
題目 
 (中文) 
 (英文) A verification flow for FlexRay communication robustness compliant 
with IEC 61508 
 
 
表 Y04 
2010 2nd International Conference on Industrial Mechatronics and Automation 
A verification flow for FlexRay communication 
robustness compliant with lEe 61508 
Kuen-Long Leu Yung-Yuan Chen* Chin-Long Wey Jwu-E Chen 
National Central University, Department of Electrical Engineering, 
Jhongli City, Taoyuan County, Taiwan (RO.C) 
{945401025, clwey, jechen}@ee.ncu.edu.tw 
*National Taipei University, Graduate Institute of Electrical Engineering, 
Taipei City, Taiwan (RO.C) 
chenyy@mail.ntpu.edu.tw 
Abstract-FlexRay, as a communication protocol for automotive 
control systems, is developed to fulfill the increasing demand on 
the electronic control units for implementing systems with higher 
safety and more comfort. Fault-tolerant feature is especially 
highlighted in the FlexRay protocol such that the FlexRay 
systems can be robust enough for applying to the safety-critical 
applications. In this work, we investigate the fault-tolerant 
mechanisms adopted in the FlexRay protocol, and propose an 
effective verification flow to justify the FlexRay communication 
robustness. The goal of the proposed flow is to ensure that the 
communication robustness can achieve the demanded safety 
integrity level (SIL) defined in lEe 61508 norm. Through a case 
study, the feasibility of the verification flow is demonstrated. 
Index Terms-Automotive system, FlexRay, fault-tolerant 
design, lEe 61508, robustness. 
I. INTRODUCTION 
Safety attribute plays a key design metric in safety-critical 
automotive systems and robot control systems. When these 
systems are implemented with networked electronic control 
units (ECUs), a robust communication protocol is significant 
to ensure the transmission correctness. To tackle this issue, 
FlexRay - as the next generation of the in-vehicle network 
standard - not only provides high bandwidth but also fault­
tolerant attributes [1]. Fault-tolerant mechanisms (FTMs) have 
been introduced into the FlexRay protocol [2]. Therefore, to 
utilize these FTMs in an effective way, there must have 
sufficient investigation for their fault-tolerant effectiveness 
correlated with the corresponding costs in terms of hardware 
overhead and performance degradation. 
Dehbashi et al. [3] presented an investigation of the fault 
effects on different topologies: bus and star, which are 
communicated by the central bus guardian (CBG). 
Experimental results show the fault-tolerant effectiveness of 
the CBO and star topology based on injecting bit-flip faults 
into the components in the communication controller designed 
by VHDL. Ref. [4] provided the analysis of activated faults in 
the FlexRay communication controller (CC) registers. 
Experimental results assess the capability of FTMs performed 
by FlexRay CC. In [5], the fault-tolerant effectiveness of the 
error detection mechanism for reception service and clock 
978-1-4244-7656-5/10/$26.00 mOIO IEEE 
228 
synchronization service were tested by injecting faults at 
digital, packet and frame level. 
The previous literature rarely addresses the issue of how to 
validate the FlexRay communication robustness to comply 
with the international safety standard. Based on our survey, 
only [6] provided a safety verification methodology for the 
end-to-end FlexRay communication system compliant with the 
IEC 61508 norm, the most prevalent standard referred to 
electricaV electronic/programmable electronic safety-related 
systems [7]. In [6], the concept of end-to-end communication 
protection for SIL 3 requirement was described and CRC 
safety code specified in the FlexRay protocol was exploited to 
demonstrate the calculation of the probability of dangerous 
failures per hour with respect to EN 50159. 
Primary investigations in this work will cover: (a) how 
effective of a protocol-related FTM to various communication 
errors, and identifying the most effective FTM to a particular 
error type; (b) performancelbandwidth degradation or 
hardware overhead imposed by protocol-related FTMs. 
The remaining paper is organized as follows. In Section II, 
we classify the FTMs adopted in the FlexRay protocol into 
three categories. The following section presents the proposed 
verification flow. In Section IV, we utilize a case study to 
demonstrate how the verification flow can validate the 
communication robustness. Conclusions and future work 
appear in Section V. 
II. FTMs IN THE FLEXRA Y PROTOCOL 
From the design flexibility viewpoint, FTMs proposed in 
the FlexRay protocol can be classified into the following three 
categories: 
(a) Inherent and fixed: those FTMs which are essential and 
nonadjustable belong to this category. Typical example is 
the majority voting mechanism employed in each bit 
sampling. If any glitch occurs during signal transfer, the 
receiver could avoid making a wrong reception of the bit 
value with the voting mechanism. 
(b) Inherent but adjustable: those FTMs which are essential 
but the FTM-related parameters can be adjusted belong to 
this category. The simplest example is the 'action point 
ICIMA2010 
Section II, respectively. An example of fundamental 
configuration can be found in Table II where we assign the 
minimal or near minimal values among the allowable ranges to 
the FTM-related parameters. An adjusted configuration and an 
appended configuration can be obtained from the fundamental 
configuration by modifying one of the FTM-related 
parameters and adding one of the noninherent FTMs, 
respectively. The verification strategy illustrated in Fig. 2 can 
be employed to assess the effectiveness of a particular 
protocol-related FTM to various communication errors, and 
identifying the most effective FTM to a specific error type 
[10]. 
During phase 3, we consider not only the feasibility of 
FTMs, but also the performancelbandwidth degradation 
caused by FTMs. If protocol-related FTMs are still unable to 
raise the communication robustness to SIL 4, we may need to 
use additional FTMs to overcome the unresolved threats. 
0epetitio::> 
C Deletion:::> 
Gnsertion:::> 
�orruPtio:0 
C Delay:::> 
Fig. 2. Verification strategy for FTMs defined in FlexRay protocol 
IV. CASE STUDY: A PING-PONG APPLICATION 
To demonstrate the verification flow, a ping-pong 
application was created and the corresponding verification 
platform has been established as shown in Fig. 3. 
Fig. 3. An experimental platform with ITXDN and ITXConnexion 
There are four static frames to be sent where these four 
frames all have data embedded but the last two frames (Frame 
ID 3 and 4) are also used as synchronization frames. When 
PING-PONG application is running, it will repeat the task that 
Node 1 sends a data frame to Node 2 and then Node 2 sends 
another data frame back to Node 1. TTxDN was inserted 
between Node 1 and Node 2 to perform the injection of threats 
into the communication channel. All traffic on the bus can be 
monitored and logged by the TTxConnexion - a FlexRay 
traffic-monitoring device. 
230 
Without loss of generality, a most common threat, delay, 
was chosen for phase 1 in this demonstration. TTxDN uses the 
holding of a designated frame with a pre-defmed time period 
to emulate the communication delay. In phase 2, an 
experimental platform exhibited in Fig. 3 was first constructed 
with parameters of fundamental configuration as shown in 
Table II. Table II summarizes the values used for primary 
cluster-related and FTM-related parameters in this illustration. 
Table III summarizes the experimental setup for threat 
injections in this case study. 
TABLE II 
FUNDAMENTAL CONFIGURATION 
("+" represents FTM-related parameters) 
Parameter Value Range specified in Spec. 
gNumberOjStaticSlots 4 2 - cStaticSlotIDMax 
gNumberOfMiniSlots 0 0-7986 
gdStaticSlot 53 4 - 661 MT (Macrotick) 
aFrameLengthStatic 438 89 - 2638 [gdBit] (Bit Rate: 10 Mbitls) 
gdActionPointOffiet+ 3 1 - 63 MT (Macrotick) 
gSyncNodeMax+ 2 2 - cSyncNodeMax 
gMaxWithoutClock- I gMaxWithoutClock-CorrectionPassive -CorrectionFatar 15 even/odd cycle pairs 
gMaxWithoutClock- I 1-15 even/odd cycle pairs CorrectionPassive+ 
pAllowHaltDueToClock+ true Boolean 
0-31 even/odd cycle pairs 
pAllowPassiveToActive+ I When it sets to zero, the CC is not allowed to transition from normal passive 
state to normal active state 
TABLE III 
EX PERIMENTAL SETUP FOR THREAT EMULATION 
Threat type Delay 
Delay range 1 :s Delay :s 8 (Macro Tick) 
# experiments 20000 
Frame 1-4, 
Affected frame Each experiment delays a 
frame only 
Affected cycle One odd cycle at each experiment 
During each experiment, we first randomly choose an odd 
cycle and one of four frames within the selected cycle to be 
delayed. If a frame is delayed and crosses the following static 
slot boundary, then Boundary Violation will be detected by the 
communication controller and this frame will be dropped. If 
Boundary Violation occurs at any one of the first two frames 
then we defme this situation as a dangerous failure mode 
termed as data message missing. On the other hand, if 
Boundary Violation occurs at any one of the last two frames 
then not only the data but also the synchronization information 
will be lost. Thus the other dangerous failure mode named as 
synchronization and data missing could be observed. The 
following equation is employed to calculate a1 (i = 1 means 
only one type of threat considered): 
行政院國家科學委員會補助國內專家學者出席國際學術會議報告 
                                                             99 年 7 月 29 日 
報告人姓名  陳永源 
 
服務機構
及職稱 
 
台北大學電機工程研究所 
教授 
     時間 
會議 
     地點 
7 月 15-17, 2010 
中國大陸、青島 
本會核定
補助文號
 
NSC 98-2221-E-305-010 
 
會議 
名稱 
 (中文)  
 (英文) 2010 IEEE International Conference on Vehicular Electronics and 
       Safety 
發表 
論文 
題目 
 (中文) 
 (英文) Robustness Analysis of the FlexRay System through Fault Tree 
        Analysis 
 
 
表 Y04 
無衍生研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
目前我們團隊正在與德國萊因台灣分公司及相關業界，籌組＇＇車用電子安全
性暨可靠性前瞻技術聯盟＇＇，德國萊因希望借重我們團隊在此領域累積的技
術、經驗和研發成果，希望透過聯盟來推動車用電子安全性暨可靠性前瞻技術，
協助產業界技術和研發能力的升級。此聯盟主要是要推動 ISO 26262 的汽車電
子安全規範，希望能建立一套符合 ISO 26262 安全規範的設計驗證流程，並以
safety case 來驗證流程的可行性及正確性。希望將此符合 ISO 26262 安全規
範的設計驗證流程引進到產業界，協助高階車用電子的產品可以符合 ISO 26262
安全規範。 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
