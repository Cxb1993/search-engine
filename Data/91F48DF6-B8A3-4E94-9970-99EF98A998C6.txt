透過點對點網路之協同式動態三維場景傳輸技術之研究與發展 
Research on Collaborative Dynamic 3D Scene Transmission via Peer-to-Peer Network 
計畫編號：NSC97－2221－E－159－016－ 
執行期限：97年 08月 01日 至 98年 07月 31日 
主持人：邱川峰 明新科技大學資訊管理系（所） 
 
 
中文摘要 
 
近年來因為網路傳輸能力與裝置計算能力的提升，將
三維場景在一般的計算裝置如個人電腦與手持裝置等
設備上瀏覽已成為一個非常流行的研究領域。雖然傳
統計算機圖學上已經有許多針對三為物件與場景處理
的研究，但當三維的物件或場景需要在網路上作傳輸
時，發展上仍然有著幾個問題需要去解決：（1）在
最近的研究中比較著重於 client-server 的架構來作
為三維場景與物件處理與儲存，但是因為三維場景與
物件需要大量的計算與儲存空間，而這些處理都會在
伺服器上進行，會使得伺服器的負荷太大導致整個系
統的效能降低。（2）三維場景與物件的所需要的儲
存空間非常的大，一般的使用裝置並沒有如此大的空
間能夠儲存完整的三維場景與物件。因此本計畫提出
一個基於三維物件視覺重要度與細節程度建進是傳輸
方法之協同式點對點網路動態三維場景傳輸機制的設
計來解決以上的問題。 
關鍵字：三維場景串流、點對點網路、協同式串流、
細節層次 
 
ABSTRACT 
 
Because of the growth of network and device capability, 
to realize the 3D content on general computation devices 
have become a popular and challenging research area as 
well as video delivery over internet in the past years. But 
in order to transmit 3D content over Internet, there still 
exist some issues that need to be solved. (1) In recent 
development on 3D delivery technology, most of them 
focus on client-server architecture that deploys a central 
server or proxy to process 3D content rendering, storage 
and delivery. Therefore, the heavy computation and 
processing will be the bottleneck of the central server so 
that the overall performance might be worse. (2) 3D 
scenes always have large volume so that 3D scenes from 
one server may gain worse transmission performance and 
user’s device will not have enough storage space as well 
as server machine. Therefore, in this paper we propose a 
collaborative 3D scene transmission system over peer-to-
peer network to overcome the issues. 
Keywords— 3D Streaming, Peer-to-Peer network, 
Collaborative Streaming, LOD 
 
1. INTRODUCTION 
 
Because of the growth of network and device 
capability, to realize the 3D content on general 
computation devices have become a popular and 
challenging research area as well as video delivery over 
Internet in the past years. But in order to transmit 3D 
content over Internet, there still exist some issues that 
need to be solved. First, in recent development on 3D 
delivery technology, most of them focus on client-server 
architecture that deploys a central server to process 3D 
content rendering, storage and delivery. The heavy 
computation and processing will be the bottleneck on the 
central server so that the overall performance might be 
worse. Second, 3D scenes always have large volume so 
that transmitting large volume of 3D scenes data from the 
server may gain worse transmission performance. 
Therefore, the present work in this paper is to propose a 
real-time collaborative 3D scenes transmission 
mechanism over peer-to-peer overlay network. The 
proposed collaborative 3D scene transmission mechanism 
is based on multi layer segmentation, multi-flow 
streaming and mixing receiving data. On the other hand, 
in order to achieving the goal of multi-flows streaming, 
we will use the LOD(Level of Detail)[24] to encode each 
object in 3D scene.  
The rest of this paper is organized as followings. 
Section 2 will reveal literatures related with our work. A 
collaborative 3D streaming mechanism over peer-to-peer 
overlay network is proposed in Section 3. The design of 
distributed 3D streaming system based on the proposed 
mechanism is described in Section 4. Finally, we give the 
conclusion of our work in section 5. 
 
2. RELATED WORK 
 
Before presenting our work, we describe the related 
literatures regarding peer-to-peer network architecture, 
streaming over peer-to-peer overlay network and 3D 
content streaming in the following. 
 
2.1 Peer-to-Peer Overlay Network 
 
Peer-to-peer network is popular application-level 
network architecture in recent year. It can provide 
resource sharing in a distributed way. It resides on 
underlying network architecture and is a distributed 
architecture without central server involving. The first 
peer-to-peer network is Napster[3]. It deploy a central 
 1
section, we propose our design to achieve 3D content 
streaming efficiently over P2P networks. 
 
3.1 System Overview 
 
In order to streaming massive 3D content, we 
describe the overall architecture of 3D scene Streaming 
over Peer-to-Peer network in Figure 1. Peer A is the node 
that requiring the 3D scene. Peer A would acquire the 3D 
scene information from server. After acquiring the 
information from the server, peer A would determine the 
object streaming priority with respect to the object 
importance by multi-layer segmentation for 3D scene and 
monitor network status in the peer-to-peer network. 
Finally, peer A would render the 3D data and display the 
3D scene by using multi-flow approach which is 
responsible for partial data of 3D scene. 
 
Server Node
Peer A
Acquiring 3D scene 
information
Download 3D scene 
information
searching
searching
searching
streaming
streaming
 
Figure 1 : 3D Scene Streaming over Peer-to-Peer Network 
 
In order to achieve the 3D scene streaming, we divide 
the overall processes in the following steps and shows in 
Figure 2. 
3D Scene Preprocessing : 3D scene contain several 
individual objects and there exists temporal and spatial 
relationships between these objects in the scene. In order 
to represent the streamed 3D scene, 3D scene should be 
encoded in a flexible way. Therefore, we use XML-based 
description format which is a text-based representation 
and easy to process to describe 3D scene. 
Object Importance Determination : Because of the 
objects in the 3D scene have spatial and temporal 
relationships, objects have different priority and 
visualization with respect to the objects’ relationship and 
users’ viewpoint. Therefore, we need to decide the 
streaming priority for each object in this process. 
Steaming Source Selection : After assigning the 
importance for each objects, we lookup the object data 
and search for the data in the peer-to-peer network 
according the object’s importance and prioirty. 
Real-time 3D Scene Rendering : When the object 
streaming priority is determined, we could start to stream 
each object and render the 3D scene real-time. 
 
3D Scene Preprocessing
Object Importance 
Determination 
Steaming Peer Selection 
Real-time 3D Scene 
Rendering  
Figure 2 : Steps for 3D Scene Streaming Processing 
 
3.2 3D Scene Graph 
 
The 3D scene graph is used for represent the objects’ 
relationship. Based on the 3D scene graph, we could 
determine which object should be displayed first. The 
proposed 3D scene graph is similar with other scene graph, 
for example, x3D, Java 3D etc., but our proposed 3D 
scene graph is simpler than others. The main purpose of 
our 3D scene graph is to present the relative position of 
objects that is the implicit annotation for object 
importance. Therefore, a preprocessing server will 
recognize the 3D scene into 3D scene graph first. In order 
to encode and decode the 3D scene graph in a general 
approach, we use the XML markup language to define the 
3D scene graph structure. Figure 3 shows the XML-based 
3D scene graph structure. Each 3D scene graph 
representation is starting at 3DGraph tag. Because each 
3D scene conclude server objects, each object will be 
starting at Object tag and include Name tag, Identifier tag, 
LOD_Sequence tag, and position tag to represent object’s 
name, object’s identifier, object LOD(Level of Detail) 
sequence, object’s x-axis and y-axis.. On the other hand, 
some objects might be occluded with each other, the 
occluded objects will be starting at GroupObject tag with 
its x-axis and y-axis. Each GroupObject also conclude 
several objects as well as non-occluded object in the 3D 
scene. 
 
3DGraph
Object GroupObjectObject …………
x-axis
IdentifierName LOD_SequencePosition Object Object
y-axis
SEQ0 SEQ1 SEQ2 SEQ3 …………  
Figure 3 : XML-based 3D scene graph 
 
3.3 Multiple Streaming Source Selection 
 
The 3D scene includes several objects and the objects 
will reside on some of peers of the peer-to-peer network. 
When a peer requires to stream 3D scene from peer-to-
 3
 
Figure 6 : Algorithm for Object Importance 
Determination 
 
 
Figure 7 : Algorithm for Source Peer Selection 
 
3.4 Real-time 3D Scene Streaming 
 
In order to streaming overall 3D scene, we use 
multiple streaming flows to download each object and 
then combine the downloaded object data into scene 
which will be explained in next section. The requesting 
peer broadcasts a search message that including all object 
identifier to lookup the peers that holds the object data. 
But in our proposed system, the unit of searching object 
data is LOD data pieces identifier which is composited by 
object identifier and LOD sequence number instead of 
searching object identifier. When object LOD pieces are 
found, the peer will response to requesting peer with its 
network uplink capacity which denote the peer’s network 
status. And then requesting will probe a message to 
estimate network delay between requesting peer and other 
peers that contain the LOD data pieces. 
In real-time 3D streaming process, streaming data and 
rendering data are the two important tasks. In previous 
section, we already have the object downloading priority. 
In order to guarantee the streaming quality and real-time 
rendering, we need to monitor the network status. 
Because our proposed method use the LOD data pieces 
instead overall object, therefore, the object is streaming 
from multiple source peers and rendering. We use 
OCPN[31] to model the collaborative streaming system. 
When we obtain the streaming source set with respect to 
object importance and network status described previous 
section, we can model the streaming system as streaming 
machine showed in Figure 8. In the figure, there exist two 
places indicating two object streams, one rendering place 
to render 3D scene and one transition state indicating the 
longest time that the rendering state can wait. If the actual 
time to reach transition state is exceeded a defined 
threshold, we need to execute the object lookup again to 
obtain the better ones. Alone with the streaming machine, 
we have propose multi queues including multiple source 
queues and one rendering queue to maintain the streaming 
data. As the example of Figure 8, we have two source 
queues to maintain the LOD data piece for two objects 
and each queue would be filled from multiple peers 
collaboratively. Then the data in the multiple queues will 
be move to rendering queue for 3D scene rendering. The 
process is showed in Figure 9. 
Input : 3D Scene Graph 
Output : Object Importance 
for each Obejct Oi 
 if NP>vDist(view-Oi)  
  NPÅ vDist(view-Oi) 
for each Object Oi 
 ΔÅ1 
 while vDist(view-Oi) < NP+Δ*vDistInterval 
  ΔÅΔ+1 
 Oi.viÅΔ-1 
for each Layer Li 
 for each Object j in Li 
  ∆Å1 
 while hDist(view-Oj) >∆*ε 
  ∆Å∆+1 
 Oj.hiÅ∆-1 
 
obejct1
obejct2 3D scene
time t1
time t1
3D scene
time t2
time t3
base mesh 
of object 1
base mesh 
of object 2
refinement mesh 
1 of object 1
refinement mesh 
2 of object 1
refinement mesh 
1 of object 2
 
Imput : Object Download Priority 
Output : downloadSet 
for each priority group g 
 find the peer k with Costmin 
 if (downlink – ratek)>0 
  downlink Å downlink – ratek 
  downloadSet Å downloadSet ∪ k 
 else return 
Figure 8 : An Example of Streaming Machine 
 
M0 M1 M3 M4M2
……..
M0 M1 M3 M4M2
……..
Streaming QUEUE 
for object 2
multiple sources with LOD data pieces
Peer-to-Peer Network
Streaming QUEUE 
for object1
M0 M0 M2M1 M1 M3 M2 M4 M5 M3 Rendering QUEUE 
for 3D Scene
……..Monitor
 
Figure 9 : Queuing Machine for Collaborative Streaming 
 
changing object
 
 5
