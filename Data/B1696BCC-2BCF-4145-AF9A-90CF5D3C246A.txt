 II
無線感測網路微系統程式與發展系統之研製 
 
 
摘要 
 無線感測網路是近期資訊發展及微電腦科技下的衍生品，很多地方都可以看見它的影
子，其應用的範圍很多，像人員的定位、氣象、土石流、海浪波幅、溫度、溼度及雨量上
的監測等例子比比皆是，台灣是一個典型的海島國家，雨量豐沛，加上台灣山坡地過度開
發、人口密集，土石流災害儼然成為台灣地區每年颱風豪雨季節民眾最關心的話題。另一
面，IEEE 802.15.4低速率無線個人區域網路（Low-Rate Wireless Personal Area Network 
LR-WPAN）發展已漸趨成熟，傳輸特性有低消耗功率、傳輸距離短、，包含大氣、水文、
山林、河流、保育動物，以及候鳥研究等領域環境都變化多端，非常適合建立感測資料，
而且研究結果影響宏大。而在土石流偵測方面，由於主要是依據地聲以及土壤濕度來做判
定，在下雨天時比較有可能會發生，故在絕大部分時間偵測元件是屬於非常低的資料流量，
只有在雨天時才必須要密集的去做偵測並回傳資料。因此，本國科會計畫主要是針對架構
於IEEE 802.15.4 LR-WPAN 通訊協定Beacon Order Adaptation Algorithm（BOAA）進行更深
入的探討，，以達到更好的延長偵測元件電池使用壽命的效果，並節省偵測元件重新部署
之人力與經費。最後並新舊BOAA的功耗比較與分析，以求得最佳的省電方式。 
 
關鍵字：IEEE 802.15.4、低速率無線個人區域網路、Beacon Order Adaptation Algorithm
（BOAA）。 
 
 
 
 2
者恆處在聽的狀態，在裝置要回傳資訊時會先彼此競爭，等通知協調者後，再傳送資料給
協調者。而有信標網路中，含有超級訊框(Superframe)的架構(圖一)，其固定將包含信標及
超級訊框分為16 個slots，超級訊框持續時間(Superframe Duration，SD) 與信標間距(Beacon 
Interval，BI) 依照協調者使用信標級數(Beacon Order，BO) 及超級訊框級數 
(SuperframeOrder，SO)來控制，其中BI＝aBaseSuperframeDuration×2BO，SD＝
aBaseSuperframeDuration×2SO，而aBaseSuperframeDuration為一個時間常數，彼此關係是
0≦SO≦BO≦14，如此可限制超級訊框持續時間會小於等於信標間距；協調者發送信標，
除了用作同步化外，也包含網路相關資訊等；超級訊框以有無使用保證時槽(Guaranteed 
Time Slots)來區別，有保證時槽的超級訊框可分成兩部分，一是競爭存取週期(Contention 
Access Period，CAP)，另一是無競爭週期(Contention Free Period，CFP)，而無保證時槽的
超級訊框則全都是CAP。 
一個superframe有16個slot，對於superframe中所定義的參數如下： 
● BI(Beacon Interval) = aBaseSuperframeDuration x 
2BO symbols，(0≦BO≦14)。 
● SD(Superframe Duration) = aBaseSuperframeDuration 
x 2S0 symbols，(0≦SO≦BO≦14). 
● aNumSuperframeSlots = 16 (fixed) 
● aBaseSlotDuration = 2S0 x 60 symbols (variable) 
● aBaseSuperframeDuratiojn = aNumSuperframeSlots x 
   aBaseSlotDuration = 16 x 2S0 x 60 symbols(variable) 
Beacon Order Adaptation Algorithm（BOAA）【4】、【5】是採取控制 BO的方式來適當調
整 Beacon訊號發送頻率。BO值大小直接影響到 BI值。BO減小 BI時間變短，即表示 Beacon
訊號頻繁，可以傳送較多的資料，精準度高延遲時間短，其缺點是較耗電。反之，BO加大
BI時間變長，可以有較低耗電量，但是卻犧牲了效能。 
在這方法中，協調者（coordinator）必須
有一個 Buffer Matrix B，如圖二所示。此
Buffer Matrix B為一個 lb×nRFD矩陣，其中
nRFD為感測元件個數。每一列代表每一次
Beacon訊號，每一行則分別對應到每一個
devices，用來記錄每一個 devices在該筆
Beacon訊號中是否有資料作傳送，有則設為
1，反之為 0。而為求得精確 Buffer Matrix B，
協調者在發出 Beacon訊號後便採用免競爭
模式輪詢（polling）每個感測元件，如此可
完全避免建立 Buffer Matrix B時所產生碰撞
問題。之後我們可以統計 Buffer Matrix B所
包含的訊息，並利用此數值來控制所需的傳
輸速率。 
 
圖二 Buffer Matrix B 
 
 
其演算法如上： 
Algorithm 1 recordMessageOccurence（） 
1: i<=1 
2: while algorithm not abort do 
3:   polling all devices in CFP  
4:   for j=1 to nRFD do 
5:     if RFD j send  ack then 
6:       mark message occurrence in bi,j 
7:     else  
8:       mark message absence in bi,j 
9:             sleep until end of beacon interval 
10:     end if 
11:   end for  
12:   evaluate N_MAX（） 
13:   evaluateBO（） 
14:   if i=lb then 
15:     i<=1 
16:   else 
17:     i<=i+1 
18:   end if 
19:   for k=1 to nRFD do 
20:     if N_MAXk !=0  
21:       assign the sequence number from 1 to 
nRFD according to 
22:       value N_MAXk 
23:     end if 
24:   end for 
25:   forward message in sequence 
26:   sleep until end of beacon interval 
27: end while 
 4
 在上述 Algorithm 2C 演算法中，Buffer Matrix B 為一個 lb×nRFD矩陣。我們給定一個
WEIGHT 值（演算法第 5行），在每一次 Beacon 訊號，最新一列 Buffer Matrix B 元素乘
上 WEIGHT 值後計算每一行元素和（演算法第 4、5、6、7 行），並在 nRFD 筆元素和中
取出最大值等於 N_MAX。 
 ●evaluateBO（）函數： 
N_MAX是一個非常重要的參數，其意味著目前網路資料量大小，故我們可以根據
evaluateN_MAX（）函數所求得 N_MAX值，配合以下方法來計算 BO值： 
1、Algorithm 2.D（Table Algorithm）： 
在本方法中，我們建立一個表格，每個範圍 N_MAX值分別對應到不同 BO值，根據這
個各表格來控制 BO大小。如表一所示。 
表一 N_MAX對照表 
N_MAX值 動作 
N_MAX≦0 B0＝14，251s
0＜N_MAX≦1 B0＝13，126s
1＜N_MAX≦2 B0＝12，63s
2＜N_MAX≦3 B0＝11，31s
3＜N_MAX≦4 B0＝10，16s
4＜N_MAX≦5 B0＝9，7.86s
5＜N_MAX≦6 B0＝8，3.93s
6＜N_MAX≦7 B0＝7，1.96s
7＜N_MAX≦8 B0＝6，0.98s
8＜N_MAX≦9 B0＝5，0.49s
9＜N_MAX≦10 B0＝4，0.24s
10＜N_MAX≦11( B0＝3，0.12s
11＜N_MAX≦12 B0＝2，61ms
12＜N_MAX≦13 B0=1，30ms
N_MAX≧14 B0=0，15ms
2、Algorithm 2.E： 
在本方法中，我們建立一個表格，每個範圍 N_MAX值分別對應到不同 BO值，根據這
個各表格來控制 BO大小。其中 C_MAX為矩陣 buffer Matrix B行的最大值，我們將其分割
為 14等分。如表二所示。 
表二 N_MAX對照表 
N_MAX值 動作 
N_MAX≦0(C_MAX)/14 B0＝14，BI=251s 
0(C_MAX)/14＜N_MAX≦(C_MAX)/14 B0＝13，BI=126s 
(C_MAX)/14＜N_MAX≦2(C_MAX)/14 B0＝12，BI=63s 
2(C_MAX)/14＜N_MAX≦3(C_MAX)/14 B0＝11，BI=31s 
3(C_MAX)/14＜N_MAX≦4(C_MAX)/14 B0＝10，BI=16s 
4(C_MAX)/14＜N_MAX≦5(C_MAX)/14 B0＝9，BI=7.86s 
5(C_MAX)/14＜N_MAX≦6(C_MAX)/14 B0＝8，BI=3.93s 
6(C_MAX)/14＜N_MAX≦7(C_MAX)/14 B0＝7，BI=1.96s 
7(C_MAX)/14＜N_MAX≦8(C_MAX)/14 B0＝6，BI=0.98s 
8(C_MAX)/14＜N_MAX≦9(C_MAX)/14 B0＝5，BI=0.49s 
 6
表三 模擬環境參數 
參數 數值 參數 數值 
Pidle 
Ptx 
Prx 
Psleep 
30mw 
31mw 
35mw 
3µw 
TBeacon 
Tack 
Tdata 
0.1ms  
0.1ms  
0.2ms 
 
1、感測元件瞬間反應速度 
在本小節中我們主要是要探討weight值大小對於瞬間反應時間的影響。圖十一的模擬實
驗中我們搭配Algorithm 2.C（Weight Algorithm）及Algorithm 3.D（Table Algorithm）演算法，
上述的BO初始值定為14，buffer Matrix B=0，∆=1.000，lb=20，weight={2，4，6，8，10}，
即表示從原本傳輸速率從∆=0.000瞬間變為∆=1.000，模擬結果如圖七所示。從圖七我們可
以發現weight值愈大則瞬間反應速度愈快。以weight=2、10為例，當weight=10，BO從14變
為4，Beacon Interval（BI）由251秒減少為0.24秒，比weight=2，BO從14變為12，Beacon Interval
（BI）由251秒減少為62.91秒瞬間反應數度高出很多。 
0
5
10
15
0 5 10 15 20 25
Beacon次數
BO
weight=2 weight=4 weight=6 weight=8 weight=10
 
圖七 weight值對瞬間反應影響 
 
 圖八的模擬實驗中我們搭配Algorithm 2.C（Weight Algorithm）及Algorithm 3.E演算法，
模擬條件設定與圖七模擬實驗相同。由圖八我們可以發現，除瞬間反應能力較差外，還需
要更多的Beacon訊號才能使BO由14降為0。 
0
5
10
15
0 5 10 15 20 25Beacon次數
BO
weight=2 weight=4 weight=6
weight=8 weight=10 weight=12
 
圖八 weight值對瞬間反應影響 
 
2、平均功率消耗及平均延遲對∆分布圖 
圖九、圖十為改良後BOAA演算法algorithm 2C搭配algorithm 3D平均功率消耗及平均延
遲對傳輸速率∆分布圖。在本次實驗中我們設定weight={2，4，6，8，10}，lb=20。圖九、
圖十顯示在相同傳輸速率∆下，weight值愈高則平均消耗功率越大，但有較低平均時間延
遲。在相同WEIGHT值下，傳輸速率∆愈高，BO值愈小，平均消耗功率越大，平均時間延
遲越短。 
 8
法其平均延遲時間不會有太大的影響。 
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
0 0.2 0.4 0.6 0.8 1Δ
ξavg
原BOAA 改良後BOAA
      
0
2
4
6
8
10
12
14
16
0 0.2 0.4 0.6 0.8 1Δ
δavg
原BOAA 改良後BOAA
 
圖十五 改良後與未改良BOAA演算法algorithm 2C    圖十六 改良後與未改良BOAA演算法algorithm 2C  
搭配algorithm 3E演算法平均功率消耗對∆比較圖    搭配algorithm 3E演算法平均傳輸延遲對∆比較圖 
 
3、Buffer Matrix B大小對BO值及消耗功率影響 
在本小節中我們主要是要探討Buffer Matrix B大小對BO值及消耗功率影響。在本模擬實
驗中我們搭配Algorithm 2.C（Weight Algorithm）及Algorithm3.D（Table Algorithm）演算法，
並設定Buffer Matrix B=1，∆=0.000，weight=4，即表示從原本傳輸速率從∆=1.000瞬間變為
∆=0.000，模擬結果如圖十七所示。圖十七顯示當傳輸速率從∆=1.000瞬間變為∆=0.000，lb
值愈大需要更多次的Beacon訊號才能將BO值控制在符合目前的傳輸速率，即較為耗電，但
相對而言能夠紀錄更多筆網路資料，得到較精確的數值。 
0
5
10
15
0 10 20 30 40
Beacon次數
BO
lb=15 lb=20 lb=30
 
圖十七 lb大小對BO值影響 
 
 圖十八模擬實驗為搭配Algorithm2.C（Weight Algorithm）及Algorithm 3.E演算法，其於
條件均與圖十七模擬實驗相同。由圖十八可得知，BO由0增加為14所需的Beacon訊號次數
相同，斜率較小，即較省電。故在相同條件下搭配Algorithm3E演算法，lb值越大，能夠紀
錄更多筆網路資料，得到較精確的數值，而當BO從0增加為14的耗電量比搭配Algorithm 2.D
演算法低。 
0
5
10
15
0 10 20 30 40
Beacon次數
BO
lb=15 lb=20 lb=30
 
圖十八 lb大小對BO值影響 
 
4、 結論與未來工作 
 在BOAA演算法中，主要針對災難偵測方面提出幾個演算法，使偵測元件能夠自我控
制流量，在效能與能量消耗間做一個評量，以達到延長偵測元件電池使用壽命的目的。而
在本國科會報告中，我們主要是針對這些演算法加以改良，並用程式做了許多的模擬來驗
證。從我們的模擬結果中可以得知改良後的BOAA演算法搭配Algorithm 2C及Algorithm 3D
