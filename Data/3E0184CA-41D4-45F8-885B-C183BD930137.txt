 行政院國家科學委員會補助專題研究計畫成果報告
 
 
晶片網路架構之測試存取機制設計 
 
 
計畫類別：□ 個別型計畫  □ 整合型計畫 
計畫編號：NSC 99-2221-E-259-027 
執行期間： 99 年 8 月 1 日 至 100 年 7 月 31 日 
 
計畫主持人： 紀新洲 
計畫參與人員： 馮至芬、謝耀文、葉志宏、吳主文、蔡坤霖、蔡仁傑、江穎
賢、徐瑞鴻、賴俊年、鄭維翔、翁恩強 
  
 
成果報告類型(依經費核定清單規定繳交)：□精簡報告  □完整報告 
 
本成果報告包括以下應繳交之附件： 
□赴國外出差或研習心得報告一份 
□赴大陸地區出差或研習心得報告一份 
□出席國際學術會議心得報告及發表之論文各一份 
□國際合作研究計畫國外研究報告書一份 
 
 
處理方式：除產學合作研究計畫、提升產業技術及人才培育研究計畫、列管計
畫及下列情形者外，得立即公開查詢 
          □涉及專利或其他智慧財產權，□一年□二年後可公開查詢 
          
執行單位：國立東華大學資工系 
 
中華民國 100 年 8 月 2 日 
 
間 之 連 結 ， 此 種 網 路 稱 為 晶 片 網 路
(network-on-chip; NoC)，其符合兩個主要的系
統需求：可重複使用度(reusability)及可擴充頻
寬(scalable bandwidth)。學者指出 NoC 非常具
有 潛 力 成 為 系 統 單 晶 片 之 內 部 連 結
(interconnection)最佳選擇。NoC 主要目的為支
援系統晶片中各核心間之通訊，其可視為各核
心間點對點之連結通道及交換器(router)之集
合。 
NoC 除了與拓撲有關之外，另外於實作時
所需之功能包括： flow-control、 routing、
arbitration、switching、buffering 及 wrapper。
flow-control分配於通道間及 router內部之資料
流量；routing 是一種機制，此機制決定訊息由
傳送端至接收端的路徑；當兩個以上的訊息要
求相同的資源時，由 arbitration 建立優先權的
規則；switching 是一種機制，此機制將 router
輸入埠(input port)所收的訊息，放至 router 的
輸出埠(output)中；當被要求的輸出通道為忙碌
時，以 buffering 方式暫時儲存訊息；核心通常
使用 wrapper 作為與 NoC 介面，以解決訊息成
為封包(pack)及解封包(unpack)的問題。 
以核心為基礎(core-based)之系統單晶片
大量使用智財，不但增加系統的複雜度，同時
更提高測試的複雜度。為了解決以核心為基礎
系統單晶片之測試問題，需要比傳統的 DFT 
(design-for-testability)更結構化及系統化的方
法。基於結構化及系統化的需求下，學者提出
一般性測試架構，此架構包括 source、sink、
wrapper 及 test access mechanism (TAM)，如圖
1 所示。 
ADC FPGA
CPU DSP ADCCore 
under test
Wrapper
Flash 
Memory
Source
Sink
MPEG SRAM DRAM SoC
Test Access Mechanism (TAM)
TAM
 
圖 1. 以核心為基礎系統晶片之測試架構圖。 
於此結構中 source 提供每個核心之測試
樣本(test stimuli)，sink 收集測試結果(test result)
並分析測試結果，TAM 是提供連結的實體結
構，其連接 source、sink 及核心，TAM 的設計
決定由外部傳送或接受測試資料之效率。
wrapper 像一層外殼，包圍在核心的外面，提
供核心與外部之通訊介面，當測試進行時，可
將核心與外部隔離。當移除或增加核心時，
wrapper 不需任何修改，即可提供即插即用
(plug and play)功能。目前有 IEEE P1500 
Standard for Embedded Core Test (SECT)提供
測試 wrapper 之標準介面。 
P1500 SECT 為嵌入式核心的積體電路定
義一個標準的測試介面，於此標準中並不必考
慮核心內部的測試方法，或是系統單晶片的整
合與最佳化的方式，這些都是交由核心提供者
與核心使用者來決定的。因此 P1500 SECT 主
要的工作在於規範核心測試之標準介面，其中
包含兩個主要項目：(1)核心測試資訊的傳達(2)
嵌入式核心的測試存取。不論對核心提供者或
核心使用者而言，都可以達到簡化核心測試設
計方式，亦即達到隨插即用的便利性。 
IEEE P1500 包含了兩大部分，一個是核心
測試語言(Core Test Language, CTL)，另一個是
核 心 測 試 界 面 架 構 (core test wrapper 
architecture)。CTL 是以 IEEE 1450 標準測試界
面語言 (standard test interface language)為基
礎，加以延伸發展而成，適用於核心的設計語
言。在核心測試界面的架構上，IEEE P1500
之 wrapper 是一個包覆在核心周圍的標準測試
界面。如圖 2 所示，系統晶片中每個核心外面
皆包覆著 IEEE P1500 wrapper，並且經由
Wrapper Serial Input (WSI)和 Wrapper Serial 
Output (WSO)相連接，Wrapper Interface Port 
(WIP)與TAM-in / TAM-out為控制測試界面的
操作及傳送測試資料。 
TAM，其結構方塊圖如圖 4 所示。當進行測試
時，將測試向量轉換成封包，由 source 送出，
經由 NoC 送達預測試之核心，測試完成後，
再使用相同之方法，將測試結果經由 NoC 送
至 sink，進行測試結果之分析。若不是進行測
試時，各核心間可透過 NoC 傳遞資料。 
 
Network-on-
Chip
Source/SinkSource/Sink Core
 
圖 4. 以 NoC 為基礎之 TAM。 
 
本計劃以本實驗室已完成之 NoC 設計成
果為基礎，並加入測試之技術，以建立以 NoC
為基礎之 TAM 軟體模擬器，以軟體模擬的方
法進行研究，以找出最佳之系統結構，最後以
cell-based 設計流程，使用硬體描述語言進行
硬體實作，另外實作之結果以智財方式呈現。
本計劃研究內容包括以下幾項： 
(1) 建立軟體模擬器 
目前 NoC 仍為熱門之研究課題，故尚未
出現成熟之 NoC 架構，故本項目製作以 NoC
為基礎之系統晶片模擬軟體，本模擬軟體分普
通傳輸模式及測試模式，一般傳輸模式以目前
NoC 研究成果為主，測試模式以系統晶片測試
之 benchmarks 為主，藉此找出系統於普通傳
輸模式與測試模式之最佳結構。 
(2) 封包格式設計 
封包格式會影響 wrapper 及 switch 之設
計，本項目以項目(1)之軟體模擬結果，設計適
用於普通傳輸模式及測試模式之封包格式，以
建立統一之封包格式。當系統晶片設計完成
後，尚需加入其他核心時，必須考慮本系統之
可擴充性。為增加本系統之可擴充性，於封包
格式設計時考慮核心於 NoC 之位址定址的問
題。本項目中以動態增加位址的方法，保持具
有彈性之位址空間，以期達到系統之可擴充
性。 
(3) wrapper 設計 
wrapper 為核心與外部連接之介面，於普
通傳輸模式中，必須將欲傳輸之訊息轉換成為
封包，或將封包還原成原訊息；於測試模式時
亦需解決測試封包問題，尚須將測試向量導入
核心之測試電路中，故本項目以 IEEE P1500
為 wrapper 之基本設計，加入拆解及組合封包
功能，並以多工器將一般傳輸模式之訊息及測
試向量分開導入核心或核心中之測試電路，以
達到訊息及測試向量分流之功能。 
(4) switch 設計 
本項目使用上述項目中已完成之封包格
式及動態定址設計 switch，並加入 circuit 
switching 及 packet switching 結合之機制，以
期提高 switch 之效能，進而降低測試時間。 
(5) 建立測試排程(test scheduling)機制 
    於測試時會遭遇測試核心之先後順序問
題，亦即測試排程之問題，本項目以 Cota 所
提之分析方法為基礎，建立低功率消耗之測試
排程。 
(6) 實作 
    本項目以 cell-based 設計流程，實作以
NoC 為基礎之 TAM，最後之結果以智財方式
呈現。為了降低設計的困難度，以 top-down 
design 方式進行硬體設計。首先切割模組，再
將各個模組分階段分別以硬體描述語言設
計、模擬後，再組合各個模組進行驗證。 
針對本計畫，我們已經整理出計畫的研究
成果，撰寫成會議論文與期刊論文，目前正投
稿至相關的國際會議與國際期刊。 
 
四、 結論與討論 
本計畫提出了一個使用晶片網路為架構
表 Y04 
國科會出席國際學術會議報告 
                                                          100 年 3 月 1 日 
報告人姓名  
紀新洲 
 
服務機構 
及職稱 
 
國立東華大學資工系副教授 
 
     時間 
會議 
     地點 
2011/2/15 ~ 2011/2/17 
奧地利茵斯布魯克 
會議 
名稱 
 (中文) 平行與分散計算與網路國際會議 
 (英文) International Conference on Parallel and Distributed Computing and 
Networks 
發表 
論文 
題目 
 (中文) 一個有錯晶片網路之可重組管線化交換器的設計與實作 
 (英文) Design of a Reconfigurable Pipelined Switch for Faulty On-Chip Networks 
表 Y04 
From: <Review@iasted.org> 
To: <hcchi@mail.ndhu.edu.tw> 
Subject: PDCN 2011 - Notification of Acceptance  
Date: Wed, 17 Nov 2010 12:29:29 -0600 
Message-ID: <4F5CD3B677FA4650B2CAD1FB31167672@iasted.org> 
 
November 17, 2010 
 
Hsin-Chou Chi 
National Dong Hwa University 
Dept of Computer Science and Information Engineering, National Dong Hwa University, Shoufeng 
 
Hualien 
Taiwan 
 
 
Re:  719-067 
 Design of a Reconfigurable Pipelined Switch for Faulty On-Chip Networks 
 
Dear Prof. Hsin-Chou Chi, 
 
Congratulations! Your paper has been accepted for the IASTED International Conference on 
Parallel and Distributed Computing and Networks, which will be held Feb 15, 2011 to Feb 17, 2011, 
in Innsbruck, Austria. We cordially invite you to attend the conference and to present your paper.  
 
You must take into consideration the reviewers' comments to improve your paper before you submit 
your final manuscript. The reviewer comments and paper status information are also available to 
view on your "My Papers" page on the IASTED website: 
 
http://www.iasted.org/conferences/mypapers.aspx?id=719 
 
All registration materials and tour options will be posted on our web site. Please register and book 
your flight as soon as possible. The registration information is available here: 
 
http://www.iasted.org/conferences/registrationinfo-719.html 
 
In order to attend, you need to submit the following by Dec 06, 2010: 
 
1. Registration Form (mandatory)  
2. Author Information Form (mandatory) 
表 Y04 
fax: (403) 247-6851  
e-mail: review@iasted.org  
web site: http://www.iasted.org  
 
 
 
 
 
 
 
includes an IP core and an associated switch in the 
network. It is assumed that a switch connects to only one 
IP core here since it is the typical case for many on-chip 
networks. The performance of an on-chip network relies 
on the efficient design and implementation of the routing 
function in the switch. In this section, we describe the 
routing scheme we have proposed for irregular networks 
[13]. 
 
S0 
S1 
S2 
S4 
S5 
S3 
S8 
S7 
S6 
C8 
C3 
C1 
C2 
C4 
C5 
C6 
C0 
C7 
 
Figure 1. An irregular network. Each circle and each 
rectangular indicate an IP core and a switch, 
respectively. 
We assume that each link in the network consists of a 
pair of input and output channels. A link with a switch 
connects to either a neighboring switch or the associated 
IP core. A typical switch design employs input queueing 
organization and has buffers at the input ports to 
accommodate arriving packets. When output port 
contention or blocking occurs, the packets can be stored in 
the input buffers temporarily. A crossbar is also usually 
included in the switch to facilitate unblocking connections 
between the input ports and the output ports before packets 
leave the switch. In our design, an algorithmic routing 
function realized by a hardware module efficiently 
produces the destined output port based on the information 
in the packet header. 
Many deadlock-free routing algorithms have been 
proposed for regular networks, such as mesh, torus, and 
hypercube [5][6]. Although these proposed routing designs 
work for regular network, they cannot be applied to 
irregular networks. Relatively few deadlock-free routing 
schemes have been proposed for irregular networks 
[9][10][11][12]. However, these designs rely on the pre-
installed routing table in each switch. Such switch designs 
typically have higher complexity, and the size of the 
routing table increases as the network size increases. 
Furthermore, the contents of the routing table in each 
switch have to be set up during initialization. 
The up*/down* routing algorithm proposed by the 
DEC Autonet project is one of the routing designs for 
irregular networks [9]. Their design uses a distributed 
algorithm to construct a spanning tree and assign an ID for 
each node during system initialization. Each packet in the 
network traverses for zero or more hops in the “up” 
direction before zero or more hops in the “down” direction. 
One of the drawbacks in the up*/down* routing is that the 
links between nodes in different levels cannot be utilized 
for routing packets. Besides, a routing table is required in 
the switch, which adds complexity to the switch design. 
In [12], another routing algorithm called adaptive trail 
routing was proposed for irregular networks. This routing 
design finds two opposite unidirectional Eulerian trails and 
utilizes the links not in the Eulerian trails. The problem 
with the adaptive trail routing is that these trails have to be 
analyzed and determined in order to construct the contents 
of the routing table in each switch during initialization. 
Besides requiring complex routing tables, Eulerian trails 
do not always exist for any network topology. 
The L-turn routing and tree-turn routing are two 
modified routing algorithms based on the Autonet 
up*/down* routing for irregular networks. These two 
routing schemes try to allow more links to participate in 
the routing, and hence can reduce the routing distance of 
packets and mitigate network congestion. Although these 
two routing schemes outperform the up*/down* routing, 
they still require a costly routing table in the switch, and 
the table contents need to be established during 
initialization. 
Similar to the up*/down* routing, the L-turn routing 
and tree-turn routing, our previously proposed TRAIN 
routing uses a subset of the network to construct a tree [13]. 
With these previously proposed three routing schemes, 
some of the links cannot be used for packet transmission. 
However, with TRAIN, all links not belonging to the tree 
become shortcuts and can be used. Furthermore, there is an 
algorithmic routing decision hardware module in the 
TRAIN switch, which determines the destined output port 
for the arriving packets. TRAIN does not require a routing 
table in the switch, and hence can reduce switch 
complexity significantly, especially for large networks. 
The basic idea of TRAIN is as follows. A packet sets 
out from the source node and tries to follow the tree route 
to reach the destination node. When a transmitted packet is 
in any switch, including the source node, it tries to take 
advantage of the shortcuts during runtime if shorter 
distance than the “planned” tree route is provided. The 
shortcuts can be used to reduce the number of hops a 
packet has to traverse. With these shortcuts, the network 
has more bandwidth provided, and the traffic congestion 
problem around the tree root is less severe. Note that a 
packet may take advantage of more than one shortcut 
along its journey, and the path is not necessarily the 
shortest. 
The routing decision hardware module in the switch is 
used to determine the destined output port. The routing 
decision hardware module tries to find if any shortcut with 
the switch can provide a shorter tree route from the current 
node to the destination node. A packet is routed to the 
neighboring switch associated with the most profitable 
shortcut, if one or more such desired shortcuts exist. A 
packet simply continues to traverse along the planned tree 
route if a desired shortcut does not exist or is currently 
blocked. 
One of the key issues with an on-chip network is the 
efficiency of the routing function in the switch. TRAIN 
S8
C8
S3
C3
S1
C1
S2
C2
S4
C4
S5
C5
S6
C6
S0
C0
S7
C7
Level 3
Level 2
Level 1
Shortcut Link
Tree Link
 
Figure 4. The TRAIN configuration of the irregular 
network for the example in Figure 2.  Six links are 
used as shortcuts.  
TRAIN routing uses a simple mechanism to achieve 
deadlock freedom. TRAIN uses virtual cut-through 
switching, which is part of the deadlock prevention 
mechanism. With virtual cut-through switching, a packet 
can start to be forwarded to the next node if the packet 
header has arrived and the destined output port is decided. 
However, it is required that the next switch has sufficient 
buffer space to store the packet when it is forwarded. 
Even though virtual cut-through switching requires more 
buffer space than wormhole switching, it is still feasible 
since packet size tends to be small for on-chip networks. 
In addition, no packets can be blocked in place across 
several nodes waiting for transmission with virtual cut-
through.  Network contention is hence mitigated. 
Since there exists no cycle in any tree, at least a 
shortcut link is required to form a channel dependency 
cycle. For deadlock to occur, the shortcut has to be 
blocked in the dependency cycle. However, with our 
TRAIN routing, a packet can never cross the blocked 
shortcut due to virtual cut-through. The packet will then 
follow the tree route instead. Since no channel 
dependency cycle can occur in a tree, deadlock is hence 
prevented with our TRAIN routing.  
We have evaluated the TRAIN routing based on static 
analysis and dynamic simulation [13]. Our results show 
that our TRAIN routing achieves superior performance 
compared to other designs for various networks sizes. 
Since the TRAIN routing requires no routing table and is 
relatively inexpensive, it provides a cost-effective 
approach to on-chip network design. 
 
3. Design of the Reconfigurable TRAIN 
Switch 
 
Although the TRAIN routing is designed for irregular 
networks, it can be perfectly used in on-chip networks with 
mesh topology. In this section, we present a technique for 
constructing a spanning tree in the mesh network. After 
this embedded tree is constructed, all the links not in the 
tree become shortcuts as described in Section II. In the 
following, we show that TRAIN can be equivalent to the 
well-known XY routing for 2D mesh with appropriate 
mapping of the tree. 
Figure 5 shows how a tree is constructed in the mesh 
network. In Figure 5(a) and 5(b), solid lines indicate tree 
links while dotted lines indicate shortcuts. Any corner 
node can be used as the root of the tree. Both neighboring 
nodes of the root are its children. The neighboring node of 
the root in the X dimension becomes the “root” of a 
subtree, which includes all the nodes not in the same 
column as the root. Meanwhile, the other neighboring 
node of the root becomes the “root” of the other nodes in 
the same column. This procedure is repeated until the 
embedded tree covers all the nodes in the mesh network. 
Root
Root
(a) (b)
(c)  
Figure 5. A tree is embedded in the mesh network for 
TRAIN routing. 
Although the embedded tree proposed here is not 
balanced, it facilitates efficient routing for our network. 
With this embedded tree, we slightly modify our routing 
algorithm as follows: When a packet arriving in a switch 
finds that there is at least one desirable shortcut, it always 
follows the most profitable one even if the shortcut is 
currently blocked. The blocked packet will stay in the 
switch and keep trying until it can successfully cross the 
shortcut. With such design, the routing behavior is exactly 
the same as the XY routing for 2D mesh networks. Since 
this routing algorithm is equivalent to the XY routing, it 
has all the nice features of the XY routing, including 
deadlock freedom and shortest path. 
Figure 6 shows the node ID assignment for TRAIN in 
the mesh network from Figure 5. Assume that the source 
node is (211100) and the destination node is (222100) for a 
packet. The “planned” tree route of the packet is originally 
(211100) →  (211000) →  (210000) →  (200000) → 
(220000) → (222000) → (222100). However, at (211100), 
the packet chooses the shortcut toward (221110) instead of 
the tree link even though they provide the same tree 
distance. At (221110), the packet chooses the shortcut 
toward (222111) due to two fewer tree hops. Figure 7 
shows the distance calculation at node (221110). The final 
route for the packet is (211100) → (221110) → (222111) 
→ (222110) → (222100).  
distance calculation algorithm facilitates efficient 
processing. The logic design of distance calculation for a 
5x5 mesh is shown in Figure 10. In a 5x5 mesh, it 
requires 8 digits, or 16 bits, for the node ID. Note that if 
the network size is smaller than 5x5, the circuit speed can 
be further reduced.  
A
D
D
E
R
a15
a14
b15
b14
a13
a12
b13
b12
a11
a10
b11
b10
a9
a8
b9
b8
a7
a6
b7
b6
a5
a5
b4
b4
a3
a2
b3
b2
a1
a0
b1
b0  
Figure 10. Logic design of distance calculation for a 
5x5 mesh. 
There is an initialization unit in each switch, which is 
for setting up the node ID during initialization. There is a 
1-bit input and a 1-bit output for the initialization unit. 
These special 1-bit links are chained together and used to 
transmit an initialization packet to each switch by an 
external host of the network. After the switches receive 
their initialization packets, the switches exchange the 
node ID with their neighbors to facilitate distance 
calculation during run-time. With such design, the cost of 
initialization for the whole network can be reduced. 
 
4. Implementation 
 
In order to validate our idea, we have implemented the 
design of our switch in VLSI as a switch IP for NoC 
platforms. Cell-based design flow is employed with 
0.18μm technology. We have implemented the switch 
design with four different link widths in a 5x5 mesh 
network, including 64 bits, 128 bits, 256 bits, and 512 bits. 
Tables 1, 2, 3, and 4 show the implementation results for 
the switch with four different link widths. 
 
Table 1. Implementation of the switch with 64-bit links. 
Switch with 64-bit links 
Clock rate 125 MHz 
Area of core 526,425 μm2 
Gate count 36,700 
Operating voltage 1.62 V 
Power consumption 288 mW 
 
Table 2. Implementation of the switch with 128-bit links. 
Switch with 128-bit links 
Clock rate 110 MHz 
Area of core 819,308 μm2 
Gate count 53,319 
Operating voltage 1.62 V 
Power consumption 355 mW 
 
Table 3. Implementation of the switch with 256-bit links. 
Switch with 256-bit links 
Clock rate 100 MHz 
Area of core 1,403,161 μm2 
Gate count 86,884 
Operating voltage 1.62 V 
Power consumption 581 mW 
 
Table 4. Implementation of the switch with 512-bit links. 
Switch with 512-bit links 
Clock rate 83 MHz 
Area of core 2,572,560 μm2 
Gate count 152,748 
Operating voltage 1.62 V 
Power consumption 947 mW 
 
As expected, from the 64-bit version to the 128-bit 
version, the area increases by 56%, the power increases by 
23%, and the clock rate slows down by 14%. From the 
128-bit version to the 256-bit version, the area increases by 
71%, the power increases by 64%, and the clock rate slows 
down by 10%. Lastly, from the 256-bit version to the 512-
bit version, the area increases by 83%, the power increases 
by 63%, and the clock rate slows down by 20%. 
A key observation from the above data is: Although the 
area of core and power consumption increase significantly 
with wider link width, the increase of the clock cycle time 
is relatively small. 
 
5. Summary and Conclusions 
 
Recently, NoC architectures have been proposed as the 
communication framework for SoC design. The design of 
the routing system for faulty on-chip networks is one of 
the critical issues for NoC architectures. In this paper, we 
have presented the design of a reconfigurable pipelined 
switch for mesh on-chip networks. When the switch is in 
國科會補助計畫衍生研發成果推廣資料表
日期:2011/08/31
國科會補助計畫
計畫名稱: 晶片網路架構之測試存取機制設計
計畫主持人: 紀新洲
計畫編號: 99-2221-E-259-027- 學門領域: 計算機結構與計算機系統
無研發成果推廣資料
其他成果 
(無法以量化表達之成
果如辦理學術活動、獲
得獎項、重要國際合
作、研究成果國際影響
力及其他協助產業技
術發展之具體效益事
項等，請以文字敘述填
列。) 
無 
 成果項目 量化 名稱或內容性質簡述 
測驗工具(含質性與量性) 0  
課程/模組 0  
電腦及網路系統或工具 0  
教材 0  
舉辦之活動/競賽 0  
研討會/工作坊 0  
電子報、網站 0  
科 
教 
處 
計 
畫 
加 
填 
項 
目 計畫成果推廣之參與（閱聽）人數 0  
 
